// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 46 0 0
// InitMacro ;
  12: CALL 32900 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareAmerican ;
  29: CALL 237 0 0
// PrepareArabian ;
  33: CALL 30536 0 0
// Action ;
  37: CALL 31657 0 0
// RunMacro ;
  41: CALL 33050 0 0
// end ;
  45: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol ; function InitVariables ; begin
  46: LD_INT 0
  48: PPUSH
// debug := true ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 1
  56: ST_TO_ADDR
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// mission_prefix := 11_ ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 11_
  72: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_STRING 10c_
  80: ST_TO_ADDR
// ar_run := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// ar_patrol := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_captured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ;
 105: LD_VAR 0 1
 109: RET
// function Debuger ; var i ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
// if not debug then
 114: LD_EXP 1
 118: NOT
 119: IFFALSE 123
// exit ;
 121: GO 232
// game_speed := 7 ;
 123: LD_ADDR_OWVAR 65
 127: PUSH
 128: LD_INT 7
 130: ST_TO_ADDR
// uc_side := 1 ;
 131: LD_ADDR_OWVAR 20
 135: PUSH
 136: LD_INT 1
 138: ST_TO_ADDR
// uc_nation := 1 ;
 139: LD_ADDR_OWVAR 21
 143: PUSH
 144: LD_INT 1
 146: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 147: LD_ADDR_OWVAR 37
 151: PUSH
 152: LD_INT 2
 154: ST_TO_ADDR
// vc_control := control_computer ;
 155: LD_ADDR_OWVAR 38
 159: PUSH
 160: LD_INT 3
 162: ST_TO_ADDR
// vc_engine := engine_combustion ;
 163: LD_ADDR_OWVAR 39
 167: PUSH
 168: LD_INT 1
 170: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 171: LD_ADDR_OWVAR 40
 175: PUSH
 176: LD_INT 7
 178: ST_TO_ADDR
// for i = 1 to 4 do
 179: LD_ADDR_VAR 0 2
 183: PUSH
 184: DOUBLE
 185: LD_INT 1
 187: DEC
 188: ST_TO_ADDR
 189: LD_INT 4
 191: PUSH
 192: FOR_TO
 193: IFFALSE 218
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 195: CALL_OW 45
 199: PPUSH
 200: LD_INT 137
 202: PPUSH
 203: LD_INT 91
 205: PPUSH
 206: LD_INT 6
 208: PPUSH
 209: LD_INT 0
 211: PPUSH
 212: CALL_OW 50
 216: GO 192
 218: POP
 219: POP
// SetSide ( ar_force_south , 1 ) ;
 220: LD_EXP 23
 224: PPUSH
 225: LD_INT 1
 227: PPUSH
 228: CALL_OW 235
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
 244: PPUSH
 245: PPUSH
 246: PPUSH
// uc_side := 4 ;
 247: LD_ADDR_OWVAR 20
 251: PUSH
 252: LD_INT 4
 254: ST_TO_ADDR
// uc_nation := 1 ;
 255: LD_ADDR_OWVAR 21
 259: PUSH
 260: LD_INT 1
 262: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 263: LD_ADDR_EXP 17
 267: PUSH
 268: LD_STRING Powell
 270: PPUSH
 271: LD_INT 0
 273: PPUSH
 274: CALL 1325 0 2
 278: ST_TO_ADDR
// uc_side := 1 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 287: LD_ADDR_EXP 8
 291: PUSH
 292: LD_STRING JMM
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: CALL 1325 0 2
 305: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 306: LD_ADDR_EXP 9
 310: PUSH
 311: LD_STRING Lisa
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: CALL 1325 0 2
 324: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 325: LD_ADDR_EXP 10
 329: PUSH
 330: LD_STRING Donaldson
 332: PPUSH
 333: LD_EXP 1
 337: NOT
 338: PPUSH
 339: CALL 1325 0 2
 343: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 344: LD_ADDR_EXP 11
 348: PUSH
 349: LD_STRING Bobby
 351: PPUSH
 352: LD_EXP 1
 356: NOT
 357: PPUSH
 358: CALL 1325 0 2
 362: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 363: LD_ADDR_EXP 12
 367: PUSH
 368: LD_STRING Cyrus
 370: PPUSH
 371: LD_EXP 1
 375: NOT
 376: PPUSH
 377: CALL 1325 0 2
 381: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 382: LD_ADDR_EXP 13
 386: PUSH
 387: LD_STRING Denis
 389: PPUSH
 390: LD_EXP 1
 394: NOT
 395: PPUSH
 396: CALL 1325 0 2
 400: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 401: LD_ADDR_EXP 14
 405: PUSH
 406: LD_STRING Brown
 408: PPUSH
 409: LD_EXP 1
 413: NOT
 414: PPUSH
 415: CALL 1325 0 2
 419: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 420: LD_ADDR_EXP 15
 424: PUSH
 425: LD_STRING Gladstone
 427: PPUSH
 428: LD_EXP 1
 432: NOT
 433: PPUSH
 434: CALL 1325 0 2
 438: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 439: LD_ADDR_EXP 16
 443: PUSH
 444: LD_STRING Houten
 446: PPUSH
 447: LD_EXP 1
 451: NOT
 452: PPUSH
 453: CALL 1325 0 2
 457: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 458: LD_ADDR_EXP 18
 462: PUSH
 463: LD_STRING Cornel
 465: PPUSH
 466: LD_EXP 1
 470: NOT
 471: PPUSH
 472: CALL 1325 0 2
 476: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 477: LD_ADDR_EXP 19
 481: PUSH
 482: LD_STRING Gary
 484: PPUSH
 485: LD_EXP 1
 489: NOT
 490: PPUSH
 491: CALL 1325 0 2
 495: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 496: LD_ADDR_EXP 20
 500: PUSH
 501: LD_STRING Frank
 503: PPUSH
 504: LD_EXP 1
 508: NOT
 509: PPUSH
 510: CALL 1325 0 2
 514: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 515: LD_ADDR_EXP 21
 519: PUSH
 520: LD_STRING Kikuchi
 522: PPUSH
 523: LD_EXP 1
 527: NOT
 528: PPUSH
 529: CALL 1325 0 2
 533: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 534: LD_ADDR_VAR 0 5
 538: PUSH
 539: LD_EXP 9
 543: PUSH
 544: LD_EXP 10
 548: PUSH
 549: LD_EXP 11
 553: PUSH
 554: LD_EXP 12
 558: PUSH
 559: LD_EXP 13
 563: PUSH
 564: LD_EXP 14
 568: PUSH
 569: LD_EXP 15
 573: PUSH
 574: LD_EXP 16
 578: PUSH
 579: LD_EXP 18
 583: PUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_EXP 20
 593: PUSH
 594: LD_EXP 21
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: ST_TO_ADDR
// tmp := tmp diff 0 ;
 613: LD_ADDR_VAR 0 5
 617: PUSH
 618: LD_VAR 0 5
 622: PUSH
 623: LD_INT 0
 625: DIFF
 626: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
 627: LD_ADDR_VAR 0 5
 631: PUSH
 632: LD_VAR 0 5
 636: PUSH
 637: LD_STRING 10_lock
 639: PPUSH
 640: CALL_OW 31
 644: UNION
 645: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
 646: LD_ADDR_VAR 0 5
 650: PUSH
 651: LD_VAR 0 5
 655: PUSH
 656: LD_STRING 10c_lock
 658: PPUSH
 659: CALL_OW 31
 663: UNION
 664: ST_TO_ADDR
// for i in tmp do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: LD_VAR 0 5
 674: PUSH
 675: FOR_IN
 676: IFFALSE 707
// if GetClass ( i ) = class_mortar then
 678: LD_VAR 0 2
 682: PPUSH
 683: CALL_OW 257
 687: PUSH
 688: LD_INT 8
 690: EQUAL
 691: IFFALSE 705
// SetClass ( i , class_soldier ) ;
 693: LD_VAR 0 2
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: CALL_OW 336
 705: GO 675
 707: POP
 708: POP
// if tmp < 12 then
 709: LD_VAR 0 5
 713: PUSH
 714: LD_INT 12
 716: LESS
 717: IFFALSE 815
// begin k := 16 - tmp ;
 719: LD_ADDR_VAR 0 3
 723: PUSH
 724: LD_INT 16
 726: PUSH
 727: LD_VAR 0 5
 731: MINUS
 732: ST_TO_ADDR
// for i = 1 to k do
 733: LD_ADDR_VAR 0 2
 737: PUSH
 738: DOUBLE
 739: LD_INT 1
 741: DEC
 742: ST_TO_ADDR
 743: LD_VAR 0 3
 747: PUSH
 748: FOR_TO
 749: IFFALSE 813
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
 751: LD_INT 0
 753: PPUSH
 754: LD_INT 1
 756: PUSH
 757: LD_INT 1
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 3
 765: PUSH
 766: LD_INT 4
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: LIST
 773: LIST
 774: LIST
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 5
 781: PPUSH
 782: CALL_OW 12
 786: ARRAY
 787: PPUSH
 788: LD_INT 6
 790: PPUSH
 791: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
 795: LD_ADDR_VAR 0 5
 799: PUSH
 800: LD_VAR 0 5
 804: PUSH
 805: CALL_OW 44
 809: ADD
 810: ST_TO_ADDR
// end ;
 811: GO 748
 813: POP
 814: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
 815: LD_ADDR_VAR 0 6
 819: PUSH
 820: LD_STRING 1
 822: PPUSH
 823: LD_INT 12
 825: PPUSH
 826: LD_INT 12
 828: PPUSH
 829: LD_INT -5
 831: PUSH
 832: LD_EXP 8
 836: PUSH
 837: LD_INT -2
 839: PUSH
 840: LD_INT -3
 842: PUSH
 843: LD_INT -5
 845: PUSH
 846: EMPTY
 847: LIST
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: PUSH
 853: LD_VAR 0 5
 857: ADD
 858: PUSH
 859: LD_INT -6
 861: PUSH
 862: LD_INT -4
 864: PUSH
 865: LD_EXP 17
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: LIST
 874: ADD
 875: PPUSH
 876: LD_INT 1
 878: PUSH
 879: LD_INT 4
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 2
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 3
 898: PUSH
 899: LD_INT 0
 901: PUSH
 902: LD_INT 5
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 4
 912: PUSH
 913: LD_INT 0
 915: PUSH
 916: LD_INT 3
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: PUSH
 924: LD_INT 5
 926: PUSH
 927: LD_INT 0
 929: PUSH
 930: LD_INT 2
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: LIST
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: PPUSH
 945: CALL_OW 42
 949: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
 950: LD_ADDR_VAR 0 7
 954: PUSH
 955: LD_INT 3
 957: PUSH
 958: LD_INT 1
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: LD_INT 4
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: LD_INT 2
 975: PUSH
 976: LD_INT 2
 978: PUSH
 979: LD_INT 1
 981: PUSH
 982: LD_INT 5
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: LIST
 989: LIST
 990: PUSH
 991: LD_INT 4
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: LD_INT 1
 999: PUSH
1000: LD_INT 5
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: LD_INT 2
1011: PUSH
1012: LD_INT 1
1014: PUSH
1015: LD_INT 1
1017: PUSH
1018: LD_INT 7
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: LD_INT 7
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: LIST
1043: LIST
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: ST_TO_ADDR
// for i in JMM ^ selected do
1052: LD_ADDR_VAR 0 2
1056: PUSH
1057: LD_EXP 8
1061: PUSH
1062: LD_VAR 0 6
1066: ADD
1067: PUSH
1068: FOR_IN
1069: IFFALSE 1258
// begin if GetClass ( i ) = 3 then
1071: LD_VAR 0 2
1075: PPUSH
1076: CALL_OW 257
1080: PUSH
1081: LD_INT 3
1083: EQUAL
1084: IFFALSE 1241
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1086: LD_ADDR_OWVAR 37
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: LD_INT 1
1098: ARRAY
1099: PUSH
1100: LD_INT 1
1102: ARRAY
1103: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1104: LD_ADDR_OWVAR 39
1108: PUSH
1109: LD_VAR 0 7
1113: PUSH
1114: LD_INT 1
1116: ARRAY
1117: PUSH
1118: LD_INT 2
1120: ARRAY
1121: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1122: LD_ADDR_OWVAR 38
1126: PUSH
1127: LD_VAR 0 7
1131: PUSH
1132: LD_INT 1
1134: ARRAY
1135: PUSH
1136: LD_INT 3
1138: ARRAY
1139: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1140: LD_ADDR_OWVAR 40
1144: PUSH
1145: LD_VAR 0 7
1149: PUSH
1150: LD_INT 1
1152: ARRAY
1153: PUSH
1154: LD_INT 4
1156: ARRAY
1157: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1158: LD_ADDR_VAR 0 7
1162: PUSH
1163: LD_VAR 0 7
1167: PPUSH
1168: LD_INT 1
1170: PPUSH
1171: CALL_OW 3
1175: ST_TO_ADDR
// veh := CreateVehicle ;
1176: LD_ADDR_VAR 0 8
1180: PUSH
1181: CALL_OW 45
1185: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1186: LD_VAR 0 8
1190: PPUSH
1191: LD_INT 8
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 8
1210: PPUSH
1211: CALL_OW 52
// if i = JMM then
1215: LD_VAR 0 2
1219: PUSH
1220: LD_EXP 8
1224: EQUAL
1225: IFFALSE 1239
// SetMark ( veh , 1 ) ;
1227: LD_VAR 0 8
1231: PPUSH
1232: LD_INT 1
1234: PPUSH
1235: CALL_OW 242
// end else
1239: GO 1256
// PlaceUnitArea ( i , am_hum_start , false ) ;
1241: LD_VAR 0 2
1245: PPUSH
1246: LD_INT 9
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: CALL_OW 49
// end ;
1256: GO 1068
1258: POP
1259: POP
// vc_chassis := us_medium_tracked ;
1260: LD_ADDR_OWVAR 37
1264: PUSH
1265: LD_INT 3
1267: ST_TO_ADDR
// vc_engine := engine_solar ;
1268: LD_ADDR_OWVAR 39
1272: PUSH
1273: LD_INT 2
1275: ST_TO_ADDR
// vc_control := control_computer ;
1276: LD_ADDR_OWVAR 38
1280: PUSH
1281: LD_INT 3
1283: ST_TO_ADDR
// vc_weapon := us_radar ;
1284: LD_ADDR_OWVAR 40
1288: PUSH
1289: LD_INT 11
1291: ST_TO_ADDR
// veh := CreateVehicle ;
1292: LD_ADDR_VAR 0 8
1296: PUSH
1297: CALL_OW 45
1301: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1302: LD_VAR 0 8
1306: PPUSH
1307: LD_INT 87
1309: PPUSH
1310: LD_INT 142
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: CALL_OW 48
// end ; end_of_file
1320: LD_VAR 0 1
1324: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1325: LD_INT 0
1327: PPUSH
1328: PPUSH
// if exist_mode then
1329: LD_VAR 0 2
1333: IFFALSE 1358
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1335: LD_ADDR_VAR 0 4
1339: PUSH
1340: LD_EXP 4
1344: PUSH
1345: LD_VAR 0 1
1349: STR
1350: PPUSH
1351: CALL_OW 34
1355: ST_TO_ADDR
1356: GO 1373
// unit := NewCharacter ( ident ) ;
1358: LD_ADDR_VAR 0 4
1362: PUSH
1363: LD_VAR 0 1
1367: PPUSH
1368: CALL_OW 25
1372: ST_TO_ADDR
// result := unit ;
1373: LD_ADDR_VAR 0 3
1377: PUSH
1378: LD_VAR 0 4
1382: ST_TO_ADDR
// end ;
1383: LD_VAR 0 3
1387: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1388: LD_INT 0
1390: PPUSH
// vc_chassis := chassis ;
1391: LD_ADDR_OWVAR 37
1395: PUSH
1396: LD_VAR 0 1
1400: ST_TO_ADDR
// vc_engine := engine ;
1401: LD_ADDR_OWVAR 39
1405: PUSH
1406: LD_VAR 0 2
1410: ST_TO_ADDR
// vc_control := control ;
1411: LD_ADDR_OWVAR 38
1415: PUSH
1416: LD_VAR 0 3
1420: ST_TO_ADDR
// vc_weapon := weapon ;
1421: LD_ADDR_OWVAR 40
1425: PUSH
1426: LD_VAR 0 4
1430: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1431: LD_ADDR_OWVAR 41
1435: PUSH
1436: LD_VAR 0 5
1440: ST_TO_ADDR
// end ;
1441: LD_VAR 0 6
1445: RET
// export function WantPlant ( unit ) ; var task ; begin
1446: LD_INT 0
1448: PPUSH
1449: PPUSH
// result := false ;
1450: LD_ADDR_VAR 0 2
1454: PUSH
1455: LD_INT 0
1457: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
1458: LD_ADDR_VAR 0 3
1462: PUSH
1463: LD_VAR 0 1
1467: PPUSH
1468: CALL_OW 437
1472: ST_TO_ADDR
// if task then
1473: LD_VAR 0 3
1477: IFFALSE 1505
// if task [ 1 ] [ 1 ] = p then
1479: LD_VAR 0 3
1483: PUSH
1484: LD_INT 1
1486: ARRAY
1487: PUSH
1488: LD_INT 1
1490: ARRAY
1491: PUSH
1492: LD_STRING p
1494: EQUAL
1495: IFFALSE 1505
// result := true ;
1497: LD_ADDR_VAR 0 2
1501: PUSH
1502: LD_INT 1
1504: ST_TO_ADDR
// end ;
1505: LD_VAR 0 2
1509: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
1510: LD_INT 0
1512: PPUSH
1513: PPUSH
1514: PPUSH
1515: PPUSH
// if pos < 1 then
1516: LD_VAR 0 2
1520: PUSH
1521: LD_INT 1
1523: LESS
1524: IFFALSE 1528
// exit ;
1526: GO 1831
// if pos = 1 then
1528: LD_VAR 0 2
1532: PUSH
1533: LD_INT 1
1535: EQUAL
1536: IFFALSE 1569
// result := Replace ( arr , pos [ 1 ] , value ) else
1538: LD_ADDR_VAR 0 4
1542: PUSH
1543: LD_VAR 0 1
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 1
1555: ARRAY
1556: PPUSH
1557: LD_VAR 0 3
1561: PPUSH
1562: CALL_OW 1
1566: ST_TO_ADDR
1567: GO 1831
// begin tmp := arr ;
1569: LD_ADDR_VAR 0 6
1573: PUSH
1574: LD_VAR 0 1
1578: ST_TO_ADDR
// s_arr := [ tmp ] ;
1579: LD_ADDR_VAR 0 7
1583: PUSH
1584: LD_VAR 0 6
1588: PUSH
1589: EMPTY
1590: LIST
1591: ST_TO_ADDR
// for i = 1 to pos - 1 do
1592: LD_ADDR_VAR 0 5
1596: PUSH
1597: DOUBLE
1598: LD_INT 1
1600: DEC
1601: ST_TO_ADDR
1602: LD_VAR 0 2
1606: PUSH
1607: LD_INT 1
1609: MINUS
1610: PUSH
1611: FOR_TO
1612: IFFALSE 1657
// begin tmp := tmp [ pos [ i ] ] ;
1614: LD_ADDR_VAR 0 6
1618: PUSH
1619: LD_VAR 0 6
1623: PUSH
1624: LD_VAR 0 2
1628: PUSH
1629: LD_VAR 0 5
1633: ARRAY
1634: ARRAY
1635: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
1636: LD_ADDR_VAR 0 7
1640: PUSH
1641: LD_VAR 0 7
1645: PUSH
1646: LD_VAR 0 6
1650: PUSH
1651: EMPTY
1652: LIST
1653: ADD
1654: ST_TO_ADDR
// end ;
1655: GO 1611
1657: POP
1658: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
1659: LD_ADDR_VAR 0 6
1663: PUSH
1664: LD_VAR 0 6
1668: PPUSH
1669: LD_VAR 0 2
1673: PUSH
1674: LD_VAR 0 2
1678: ARRAY
1679: PPUSH
1680: LD_VAR 0 3
1684: PPUSH
1685: CALL_OW 1
1689: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
1690: LD_ADDR_VAR 0 7
1694: PUSH
1695: LD_VAR 0 7
1699: PPUSH
1700: LD_VAR 0 7
1704: PPUSH
1705: LD_VAR 0 6
1709: PPUSH
1710: CALL_OW 1
1714: ST_TO_ADDR
// for i = s_arr downto 2 do
1715: LD_ADDR_VAR 0 5
1719: PUSH
1720: DOUBLE
1721: LD_VAR 0 7
1725: INC
1726: ST_TO_ADDR
1727: LD_INT 2
1729: PUSH
1730: FOR_DOWNTO
1731: IFFALSE 1815
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
1733: LD_ADDR_VAR 0 6
1737: PUSH
1738: LD_VAR 0 7
1742: PUSH
1743: LD_VAR 0 5
1747: PUSH
1748: LD_INT 1
1750: MINUS
1751: ARRAY
1752: PPUSH
1753: LD_VAR 0 2
1757: PUSH
1758: LD_VAR 0 5
1762: PUSH
1763: LD_INT 1
1765: MINUS
1766: ARRAY
1767: PPUSH
1768: LD_VAR 0 7
1772: PUSH
1773: LD_VAR 0 5
1777: ARRAY
1778: PPUSH
1779: CALL_OW 1
1783: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
1784: LD_ADDR_VAR 0 7
1788: PUSH
1789: LD_VAR 0 7
1793: PPUSH
1794: LD_VAR 0 5
1798: PUSH
1799: LD_INT 1
1801: MINUS
1802: PPUSH
1803: LD_VAR 0 6
1807: PPUSH
1808: CALL_OW 1
1812: ST_TO_ADDR
// end ;
1813: GO 1730
1815: POP
1816: POP
// result := s_arr [ 1 ] ;
1817: LD_ADDR_VAR 0 4
1821: PUSH
1822: LD_VAR 0 7
1826: PUSH
1827: LD_INT 1
1829: ARRAY
1830: ST_TO_ADDR
// end ; end ;
1831: LD_VAR 0 4
1835: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
1836: LD_INT 0
1838: PPUSH
1839: PPUSH
// if not list then
1840: LD_VAR 0 1
1844: NOT
1845: IFFALSE 1849
// exit ;
1847: GO 1940
// i := list [ pos1 ] ;
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: LD_VAR 0 1
1858: PUSH
1859: LD_VAR 0 2
1863: ARRAY
1864: ST_TO_ADDR
// if not i then
1865: LD_VAR 0 5
1869: NOT
1870: IFFALSE 1874
// exit ;
1872: GO 1940
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
1874: LD_ADDR_VAR 0 1
1878: PUSH
1879: LD_VAR 0 1
1883: PPUSH
1884: LD_VAR 0 2
1888: PPUSH
1889: LD_VAR 0 1
1893: PUSH
1894: LD_VAR 0 3
1898: ARRAY
1899: PPUSH
1900: CALL_OW 1
1904: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
1905: LD_ADDR_VAR 0 1
1909: PUSH
1910: LD_VAR 0 1
1914: PPUSH
1915: LD_VAR 0 3
1919: PPUSH
1920: LD_VAR 0 5
1924: PPUSH
1925: CALL_OW 1
1929: ST_TO_ADDR
// result := list ;
1930: LD_ADDR_VAR 0 4
1934: PUSH
1935: LD_VAR 0 1
1939: ST_TO_ADDR
// end ;
1940: LD_VAR 0 4
1944: RET
// export function Add ( list , pos , val ) ; begin
1945: LD_INT 0
1947: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_VAR 0 1
1957: PPUSH
1958: LD_VAR 0 2
1962: PPUSH
1963: LD_VAR 0 3
1967: PPUSH
1968: CALL 1510 0 3
1972: ST_TO_ADDR
1973: LD_VAR 0 4
1977: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
1978: LD_INT 0
1980: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
1981: LD_ADDR_VAR 0 5
1985: PUSH
1986: LD_VAR 0 1
1990: PPUSH
1991: CALL_OW 250
1995: PPUSH
1996: LD_VAR 0 1
2000: PPUSH
2001: CALL_OW 251
2005: PPUSH
2006: LD_VAR 0 2
2010: PPUSH
2011: LD_VAR 0 3
2015: PPUSH
2016: LD_VAR 0 4
2020: PPUSH
2021: CALL 2031 0 5
2025: ST_TO_ADDR
// end ;
2026: LD_VAR 0 5
2030: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
2031: LD_INT 0
2033: PPUSH
2034: PPUSH
2035: PPUSH
2036: PPUSH
// if not list then
2037: LD_VAR 0 3
2041: NOT
2042: IFFALSE 2046
// exit ;
2044: GO 2434
// result := [ ] ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: EMPTY
2052: ST_TO_ADDR
// for i in list do
2053: LD_ADDR_VAR 0 7
2057: PUSH
2058: LD_VAR 0 3
2062: PUSH
2063: FOR_IN
2064: IFFALSE 2266
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2066: LD_ADDR_VAR 0 9
2070: PUSH
2071: LD_VAR 0 7
2075: PPUSH
2076: LD_VAR 0 1
2080: PPUSH
2081: LD_VAR 0 2
2085: PPUSH
2086: CALL_OW 297
2090: ST_TO_ADDR
// if not result then
2091: LD_VAR 0 6
2095: NOT
2096: IFFALSE 2122
// result := [ [ i , tmp ] ] else
2098: LD_ADDR_VAR 0 6
2102: PUSH
2103: LD_VAR 0 7
2107: PUSH
2108: LD_VAR 0 9
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: ST_TO_ADDR
2120: GO 2264
// begin if result [ result ] [ 2 ] < tmp then
2122: LD_VAR 0 6
2126: PUSH
2127: LD_VAR 0 6
2131: ARRAY
2132: PUSH
2133: LD_INT 2
2135: ARRAY
2136: PUSH
2137: LD_VAR 0 9
2141: LESS
2142: IFFALSE 2184
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2144: LD_ADDR_VAR 0 6
2148: PUSH
2149: LD_VAR 0 6
2153: PPUSH
2154: LD_VAR 0 6
2158: PUSH
2159: LD_INT 1
2161: PLUS
2162: PPUSH
2163: LD_VAR 0 7
2167: PUSH
2168: LD_VAR 0 9
2172: PUSH
2173: EMPTY
2174: LIST
2175: LIST
2176: PPUSH
2177: CALL_OW 2
2181: ST_TO_ADDR
2182: GO 2264
// for j = 1 to result do
2184: LD_ADDR_VAR 0 8
2188: PUSH
2189: DOUBLE
2190: LD_INT 1
2192: DEC
2193: ST_TO_ADDR
2194: LD_VAR 0 6
2198: PUSH
2199: FOR_TO
2200: IFFALSE 2262
// begin if tmp < result [ j ] [ 2 ] then
2202: LD_VAR 0 9
2206: PUSH
2207: LD_VAR 0 6
2211: PUSH
2212: LD_VAR 0 8
2216: ARRAY
2217: PUSH
2218: LD_INT 2
2220: ARRAY
2221: LESS
2222: IFFALSE 2260
// begin result := Insert ( result , j , [ i , tmp ] ) ;
2224: LD_ADDR_VAR 0 6
2228: PUSH
2229: LD_VAR 0 6
2233: PPUSH
2234: LD_VAR 0 8
2238: PPUSH
2239: LD_VAR 0 7
2243: PUSH
2244: LD_VAR 0 9
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PPUSH
2253: CALL_OW 2
2257: ST_TO_ADDR
// break ;
2258: GO 2262
// end ; end ;
2260: GO 2199
2262: POP
2263: POP
// end ; end ;
2264: GO 2063
2266: POP
2267: POP
// if result and not asc then
2268: LD_VAR 0 6
2272: PUSH
2273: LD_VAR 0 4
2277: NOT
2278: AND
2279: IFFALSE 2354
// begin tmp := result ;
2281: LD_ADDR_VAR 0 9
2285: PUSH
2286: LD_VAR 0 6
2290: ST_TO_ADDR
// for i = tmp downto 1 do
2291: LD_ADDR_VAR 0 7
2295: PUSH
2296: DOUBLE
2297: LD_VAR 0 9
2301: INC
2302: ST_TO_ADDR
2303: LD_INT 1
2305: PUSH
2306: FOR_DOWNTO
2307: IFFALSE 2352
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
2309: LD_ADDR_VAR 0 6
2313: PUSH
2314: LD_VAR 0 6
2318: PPUSH
2319: LD_VAR 0 9
2323: PUSH
2324: LD_VAR 0 7
2328: MINUS
2329: PUSH
2330: LD_INT 1
2332: PLUS
2333: PPUSH
2334: LD_VAR 0 9
2338: PUSH
2339: LD_VAR 0 7
2343: ARRAY
2344: PPUSH
2345: CALL_OW 1
2349: ST_TO_ADDR
2350: GO 2306
2352: POP
2353: POP
// end ; tmp := [ ] ;
2354: LD_ADDR_VAR 0 9
2358: PUSH
2359: EMPTY
2360: ST_TO_ADDR
// if mode then
2361: LD_VAR 0 5
2365: IFFALSE 2434
// begin for i = 1 to result do
2367: LD_ADDR_VAR 0 7
2371: PUSH
2372: DOUBLE
2373: LD_INT 1
2375: DEC
2376: ST_TO_ADDR
2377: LD_VAR 0 6
2381: PUSH
2382: FOR_TO
2383: IFFALSE 2422
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
2385: LD_ADDR_VAR 0 9
2389: PUSH
2390: LD_VAR 0 9
2394: PPUSH
2395: LD_VAR 0 7
2399: PPUSH
2400: LD_VAR 0 6
2404: PUSH
2405: LD_VAR 0 7
2409: ARRAY
2410: PUSH
2411: LD_INT 1
2413: ARRAY
2414: PPUSH
2415: CALL_OW 1
2419: ST_TO_ADDR
2420: GO 2382
2422: POP
2423: POP
// result := tmp ;
2424: LD_ADDR_VAR 0 6
2428: PUSH
2429: LD_VAR 0 9
2433: ST_TO_ADDR
// end ; end ;
2434: LD_VAR 0 6
2438: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
2439: LD_INT 0
2441: PPUSH
2442: PPUSH
2443: PPUSH
2444: PPUSH
2445: PPUSH
2446: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
2447: LD_ADDR_VAR 0 5
2451: PUSH
2452: LD_INT 0
2454: PUSH
2455: LD_INT 0
2457: PUSH
2458: LD_INT 0
2460: PUSH
2461: LD_INT 0
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: ST_TO_ADDR
// if not x or not y then
2470: LD_VAR 0 2
2474: NOT
2475: PUSH
2476: LD_VAR 0 3
2480: NOT
2481: OR
2482: IFFALSE 2486
// exit ;
2484: GO 4114
// if not range then
2486: LD_VAR 0 4
2490: NOT
2491: IFFALSE 2501
// range := 10 ;
2493: LD_ADDR_VAR 0 4
2497: PUSH
2498: LD_INT 10
2500: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
2501: LD_ADDR_VAR 0 8
2505: PUSH
2506: LD_INT 81
2508: PUSH
2509: LD_VAR 0 1
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: LD_INT 92
2520: PUSH
2521: LD_VAR 0 2
2525: PUSH
2526: LD_VAR 0 3
2530: PUSH
2531: LD_VAR 0 4
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PPUSH
2546: CALL_OW 69
2550: ST_TO_ADDR
// if not tmp then
2551: LD_VAR 0 8
2555: NOT
2556: IFFALSE 2560
// exit ;
2558: GO 4114
// for i in tmp do
2560: LD_ADDR_VAR 0 6
2564: PUSH
2565: LD_VAR 0 8
2569: PUSH
2570: FOR_IN
2571: IFFALSE 4089
// begin points := [ 0 , 0 , 0 ] ;
2573: LD_ADDR_VAR 0 9
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// bpoints := 1 ;
2592: LD_ADDR_VAR 0 10
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// case GetType ( i ) of unit_human :
2600: LD_VAR 0 6
2604: PPUSH
2605: CALL_OW 247
2609: PUSH
2610: LD_INT 1
2612: DOUBLE
2613: EQUAL
2614: IFTRUE 2618
2616: GO 3196
2618: POP
// begin if GetClass ( i ) = 1 then
2619: LD_VAR 0 6
2623: PPUSH
2624: CALL_OW 257
2628: PUSH
2629: LD_INT 1
2631: EQUAL
2632: IFFALSE 2653
// points := [ 10 , 5 , 3 ] ;
2634: LD_ADDR_VAR 0 9
2638: PUSH
2639: LD_INT 10
2641: PUSH
2642: LD_INT 5
2644: PUSH
2645: LD_INT 3
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
2653: LD_VAR 0 6
2657: PPUSH
2658: CALL_OW 257
2662: PUSH
2663: LD_INT 2
2665: PUSH
2666: LD_INT 3
2668: PUSH
2669: LD_INT 4
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: IN
2677: IFFALSE 2698
// points := [ 3 , 2 , 1 ] ;
2679: LD_ADDR_VAR 0 9
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: LD_INT 2
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// if GetClass ( i ) = 5 then
2698: LD_VAR 0 6
2702: PPUSH
2703: CALL_OW 257
2707: PUSH
2708: LD_INT 5
2710: EQUAL
2711: IFFALSE 2732
// points := [ 130 , 5 , 2 ] ;
2713: LD_ADDR_VAR 0 9
2717: PUSH
2718: LD_INT 130
2720: PUSH
2721: LD_INT 5
2723: PUSH
2724: LD_INT 2
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: ST_TO_ADDR
// if GetClass ( i ) = 8 then
2732: LD_VAR 0 6
2736: PPUSH
2737: CALL_OW 257
2741: PUSH
2742: LD_INT 8
2744: EQUAL
2745: IFFALSE 2766
// points := [ 35 , 35 , 30 ] ;
2747: LD_ADDR_VAR 0 9
2751: PUSH
2752: LD_INT 35
2754: PUSH
2755: LD_INT 35
2757: PUSH
2758: LD_INT 30
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: ST_TO_ADDR
// if GetClass ( i ) = 9 then
2766: LD_VAR 0 6
2770: PPUSH
2771: CALL_OW 257
2775: PUSH
2776: LD_INT 9
2778: EQUAL
2779: IFFALSE 2800
// points := [ 20 , 55 , 40 ] ;
2781: LD_ADDR_VAR 0 9
2785: PUSH
2786: LD_INT 20
2788: PUSH
2789: LD_INT 55
2791: PUSH
2792: LD_INT 40
2794: PUSH
2795: EMPTY
2796: LIST
2797: LIST
2798: LIST
2799: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
2800: LD_VAR 0 6
2804: PPUSH
2805: CALL_OW 257
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: LD_INT 16
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: IN
2820: IFFALSE 2841
// points := [ 5 , 3 , 2 ] ;
2822: LD_ADDR_VAR 0 9
2826: PUSH
2827: LD_INT 5
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 2
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: ST_TO_ADDR
// if GetClass ( i ) = 17 then
2841: LD_VAR 0 6
2845: PPUSH
2846: CALL_OW 257
2850: PUSH
2851: LD_INT 17
2853: EQUAL
2854: IFFALSE 2875
// points := [ 100 , 50 , 75 ] ;
2856: LD_ADDR_VAR 0 9
2860: PUSH
2861: LD_INT 100
2863: PUSH
2864: LD_INT 50
2866: PUSH
2867: LD_INT 75
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: ST_TO_ADDR
// if GetClass ( i ) = 15 then
2875: LD_VAR 0 6
2879: PPUSH
2880: CALL_OW 257
2884: PUSH
2885: LD_INT 15
2887: EQUAL
2888: IFFALSE 2909
// points := [ 10 , 5 , 3 ] ;
2890: LD_ADDR_VAR 0 9
2894: PUSH
2895: LD_INT 10
2897: PUSH
2898: LD_INT 5
2900: PUSH
2901: LD_INT 3
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: LIST
2908: ST_TO_ADDR
// if GetClass ( i ) = 14 then
2909: LD_VAR 0 6
2913: PPUSH
2914: CALL_OW 257
2918: PUSH
2919: LD_INT 14
2921: EQUAL
2922: IFFALSE 2943
// points := [ 10 , 0 , 0 ] ;
2924: LD_ADDR_VAR 0 9
2928: PUSH
2929: LD_INT 10
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: LD_INT 0
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: LIST
2942: ST_TO_ADDR
// if GetClass ( i ) = 11 then
2943: LD_VAR 0 6
2947: PPUSH
2948: CALL_OW 257
2952: PUSH
2953: LD_INT 11
2955: EQUAL
2956: IFFALSE 2977
// points := [ 30 , 10 , 5 ] ;
2958: LD_ADDR_VAR 0 9
2962: PUSH
2963: LD_INT 30
2965: PUSH
2966: LD_INT 10
2968: PUSH
2969: LD_INT 5
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: LIST
2976: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
2977: LD_VAR 0 1
2981: PPUSH
2982: LD_INT 5
2984: PPUSH
2985: CALL_OW 321
2989: PUSH
2990: LD_INT 2
2992: EQUAL
2993: IFFALSE 3010
// bpoints := bpoints * 1.8 ;
2995: LD_ADDR_VAR 0 10
2999: PUSH
3000: LD_VAR 0 10
3004: PUSH
3005: LD_REAL  1.80000000000000E+0000
3008: MUL
3009: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
3010: LD_VAR 0 6
3014: PPUSH
3015: CALL_OW 257
3019: PUSH
3020: LD_INT 1
3022: PUSH
3023: LD_INT 2
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: LD_INT 4
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: LIST
3036: LIST
3037: IN
3038: PUSH
3039: LD_VAR 0 1
3043: PPUSH
3044: LD_INT 51
3046: PPUSH
3047: CALL_OW 321
3051: PUSH
3052: LD_INT 2
3054: EQUAL
3055: AND
3056: IFFALSE 3073
// bpoints := bpoints * 1.2 ;
3058: LD_ADDR_VAR 0 10
3062: PUSH
3063: LD_VAR 0 10
3067: PUSH
3068: LD_REAL  1.20000000000000E+0000
3071: MUL
3072: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
3073: LD_VAR 0 6
3077: PPUSH
3078: CALL_OW 257
3082: PUSH
3083: LD_INT 5
3085: PUSH
3086: LD_INT 7
3088: PUSH
3089: LD_INT 9
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: LIST
3096: IN
3097: PUSH
3098: LD_VAR 0 1
3102: PPUSH
3103: LD_INT 52
3105: PPUSH
3106: CALL_OW 321
3110: PUSH
3111: LD_INT 2
3113: EQUAL
3114: AND
3115: IFFALSE 3132
// bpoints := bpoints * 1.5 ;
3117: LD_ADDR_VAR 0 10
3121: PUSH
3122: LD_VAR 0 10
3126: PUSH
3127: LD_REAL  1.50000000000000E+0000
3130: MUL
3131: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
3132: LD_VAR 0 1
3136: PPUSH
3137: LD_INT 66
3139: PPUSH
3140: CALL_OW 321
3144: PUSH
3145: LD_INT 2
3147: EQUAL
3148: IFFALSE 3165
// bpoints := bpoints * 1.1 ;
3150: LD_ADDR_VAR 0 10
3154: PUSH
3155: LD_VAR 0 10
3159: PUSH
3160: LD_REAL  1.10000000000000E+0000
3163: MUL
3164: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
3165: LD_ADDR_VAR 0 10
3169: PUSH
3170: LD_VAR 0 10
3174: PUSH
3175: LD_VAR 0 6
3179: PPUSH
3180: LD_INT 1
3182: PPUSH
3183: CALL_OW 259
3187: PUSH
3188: LD_REAL  1.15000000000000E+0000
3191: MUL
3192: MUL
3193: ST_TO_ADDR
// end ; unit_vehicle :
3194: GO 4018
3196: LD_INT 2
3198: DOUBLE
3199: EQUAL
3200: IFTRUE 3204
3202: GO 4006
3204: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
3205: LD_VAR 0 6
3209: PPUSH
3210: CALL_OW 264
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 42
3220: PUSH
3221: LD_INT 24
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: IN
3229: IFFALSE 3250
// points := [ 25 , 5 , 3 ] ;
3231: LD_ADDR_VAR 0 9
3235: PUSH
3236: LD_INT 25
3238: PUSH
3239: LD_INT 5
3241: PUSH
3242: LD_INT 3
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
3250: LD_VAR 0 6
3254: PPUSH
3255: CALL_OW 264
3259: PUSH
3260: LD_INT 4
3262: PUSH
3263: LD_INT 43
3265: PUSH
3266: LD_INT 25
3268: PUSH
3269: EMPTY
3270: LIST
3271: LIST
3272: LIST
3273: IN
3274: IFFALSE 3295
// points := [ 40 , 15 , 5 ] ;
3276: LD_ADDR_VAR 0 9
3280: PUSH
3281: LD_INT 40
3283: PUSH
3284: LD_INT 15
3286: PUSH
3287: LD_INT 5
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
3295: LD_VAR 0 6
3299: PPUSH
3300: CALL_OW 264
3304: PUSH
3305: LD_INT 3
3307: PUSH
3308: LD_INT 23
3310: PUSH
3311: EMPTY
3312: LIST
3313: LIST
3314: IN
3315: IFFALSE 3336
// points := [ 7 , 25 , 8 ] ;
3317: LD_ADDR_VAR 0 9
3321: PUSH
3322: LD_INT 7
3324: PUSH
3325: LD_INT 25
3327: PUSH
3328: LD_INT 8
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
3336: LD_VAR 0 6
3340: PPUSH
3341: CALL_OW 264
3345: PUSH
3346: LD_INT 5
3348: PUSH
3349: LD_INT 27
3351: PUSH
3352: LD_INT 44
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: LIST
3359: IN
3360: IFFALSE 3381
// points := [ 14 , 50 , 16 ] ;
3362: LD_ADDR_VAR 0 9
3366: PUSH
3367: LD_INT 14
3369: PUSH
3370: LD_INT 50
3372: PUSH
3373: LD_INT 16
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: LIST
3380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
3381: LD_VAR 0 6
3385: PPUSH
3386: CALL_OW 264
3390: PUSH
3391: LD_INT 6
3393: PUSH
3394: LD_INT 46
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: IN
3401: IFFALSE 3422
// points := [ 32 , 120 , 70 ] ;
3403: LD_ADDR_VAR 0 9
3407: PUSH
3408: LD_INT 32
3410: PUSH
3411: LD_INT 120
3413: PUSH
3414: LD_INT 70
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: LIST
3421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
3422: LD_VAR 0 6
3426: PPUSH
3427: CALL_OW 264
3431: PUSH
3432: LD_INT 7
3434: PUSH
3435: LD_INT 28
3437: PUSH
3438: LD_INT 45
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: IN
3446: IFFALSE 3467
// points := [ 35 , 20 , 45 ] ;
3448: LD_ADDR_VAR 0 9
3452: PUSH
3453: LD_INT 35
3455: PUSH
3456: LD_INT 20
3458: PUSH
3459: LD_INT 45
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: LIST
3466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
3467: LD_VAR 0 6
3471: PPUSH
3472: CALL_OW 264
3476: PUSH
3477: LD_INT 47
3479: PUSH
3480: EMPTY
3481: LIST
3482: IN
3483: IFFALSE 3504
// points := [ 67 , 45 , 75 ] ;
3485: LD_ADDR_VAR 0 9
3489: PUSH
3490: LD_INT 67
3492: PUSH
3493: LD_INT 45
3495: PUSH
3496: LD_INT 75
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: LIST
3503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
3504: LD_VAR 0 6
3508: PPUSH
3509: CALL_OW 264
3513: PUSH
3514: LD_INT 26
3516: PUSH
3517: EMPTY
3518: LIST
3519: IN
3520: IFFALSE 3541
// points := [ 120 , 30 , 80 ] ;
3522: LD_ADDR_VAR 0 9
3526: PUSH
3527: LD_INT 120
3529: PUSH
3530: LD_INT 30
3532: PUSH
3533: LD_INT 80
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
3541: LD_VAR 0 6
3545: PPUSH
3546: CALL_OW 264
3550: PUSH
3551: LD_INT 22
3553: PUSH
3554: EMPTY
3555: LIST
3556: IN
3557: IFFALSE 3578
// points := [ 40 , 1 , 1 ] ;
3559: LD_ADDR_VAR 0 9
3563: PUSH
3564: LD_INT 40
3566: PUSH
3567: LD_INT 1
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: LIST
3577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
3578: LD_VAR 0 6
3582: PPUSH
3583: CALL_OW 264
3587: PUSH
3588: LD_INT 29
3590: PUSH
3591: EMPTY
3592: LIST
3593: IN
3594: IFFALSE 3615
// points := [ 70 , 200 , 400 ] ;
3596: LD_ADDR_VAR 0 9
3600: PUSH
3601: LD_INT 70
3603: PUSH
3604: LD_INT 200
3606: PUSH
3607: LD_INT 400
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
3615: LD_VAR 0 6
3619: PPUSH
3620: CALL_OW 264
3624: PUSH
3625: LD_INT 14
3627: PUSH
3628: LD_INT 53
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: IN
3635: IFFALSE 3656
// points := [ 40 , 10 , 20 ] ;
3637: LD_ADDR_VAR 0 9
3641: PUSH
3642: LD_INT 40
3644: PUSH
3645: LD_INT 10
3647: PUSH
3648: LD_INT 20
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: LIST
3655: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
3656: LD_VAR 0 6
3660: PPUSH
3661: CALL_OW 264
3665: PUSH
3666: LD_INT 9
3668: PUSH
3669: EMPTY
3670: LIST
3671: IN
3672: IFFALSE 3693
// points := [ 5 , 70 , 20 ] ;
3674: LD_ADDR_VAR 0 9
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: LD_INT 70
3684: PUSH
3685: LD_INT 20
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
3693: LD_VAR 0 6
3697: PPUSH
3698: CALL_OW 264
3702: PUSH
3703: LD_INT 10
3705: PUSH
3706: EMPTY
3707: LIST
3708: IN
3709: IFFALSE 3730
// points := [ 35 , 110 , 70 ] ;
3711: LD_ADDR_VAR 0 9
3715: PUSH
3716: LD_INT 35
3718: PUSH
3719: LD_INT 110
3721: PUSH
3722: LD_INT 70
3724: PUSH
3725: EMPTY
3726: LIST
3727: LIST
3728: LIST
3729: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
3730: LD_VAR 0 6
3734: PPUSH
3735: CALL_OW 265
3739: PUSH
3740: LD_INT 25
3742: EQUAL
3743: IFFALSE 3764
// points := [ 80 , 65 , 100 ] ;
3745: LD_ADDR_VAR 0 9
3749: PUSH
3750: LD_INT 80
3752: PUSH
3753: LD_INT 65
3755: PUSH
3756: LD_INT 100
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
3764: LD_VAR 0 6
3768: PPUSH
3769: CALL_OW 263
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3812
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
3779: LD_ADDR_VAR 0 10
3783: PUSH
3784: LD_VAR 0 10
3788: PUSH
3789: LD_VAR 0 6
3793: PPUSH
3794: CALL_OW 311
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: CALL_OW 259
3806: PUSH
3807: LD_INT 4
3809: MUL
3810: MUL
3811: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
3812: LD_VAR 0 6
3816: PPUSH
3817: CALL_OW 263
3821: PUSH
3822: LD_INT 2
3824: EQUAL
3825: IFFALSE 3876
// begin j := IsControledBy ( i ) ;
3827: LD_ADDR_VAR 0 7
3831: PUSH
3832: LD_VAR 0 6
3836: PPUSH
3837: CALL_OW 312
3841: ST_TO_ADDR
// if j then
3842: LD_VAR 0 7
3846: IFFALSE 3876
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
3848: LD_ADDR_VAR 0 10
3852: PUSH
3853: LD_VAR 0 10
3857: PUSH
3858: LD_VAR 0 7
3862: PPUSH
3863: LD_INT 3
3865: PPUSH
3866: CALL_OW 259
3870: PUSH
3871: LD_INT 3
3873: MUL
3874: MUL
3875: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
3876: LD_VAR 0 6
3880: PPUSH
3881: CALL_OW 264
3885: PUSH
3886: LD_INT 5
3888: PUSH
3889: LD_INT 6
3891: PUSH
3892: LD_INT 46
3894: PUSH
3895: LD_INT 44
3897: PUSH
3898: LD_INT 47
3900: PUSH
3901: LD_INT 45
3903: PUSH
3904: LD_INT 28
3906: PUSH
3907: LD_INT 7
3909: PUSH
3910: LD_INT 27
3912: PUSH
3913: LD_INT 29
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: IN
3928: PUSH
3929: LD_VAR 0 1
3933: PPUSH
3934: LD_INT 52
3936: PPUSH
3937: CALL_OW 321
3941: PUSH
3942: LD_INT 2
3944: EQUAL
3945: AND
3946: IFFALSE 3963
// bpoints := bpoints * 1.2 ;
3948: LD_ADDR_VAR 0 10
3952: PUSH
3953: LD_VAR 0 10
3957: PUSH
3958: LD_REAL  1.20000000000000E+0000
3961: MUL
3962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
3963: LD_VAR 0 6
3967: PPUSH
3968: CALL_OW 264
3972: PUSH
3973: LD_INT 6
3975: PUSH
3976: LD_INT 46
3978: PUSH
3979: LD_INT 47
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: LIST
3986: IN
3987: IFFALSE 4004
// bpoints := bpoints * 1.2 ;
3989: LD_ADDR_VAR 0 10
3993: PUSH
3994: LD_VAR 0 10
3998: PUSH
3999: LD_REAL  1.20000000000000E+0000
4002: MUL
4003: ST_TO_ADDR
// end ; unit_building :
4004: GO 4018
4006: LD_INT 3
4008: DOUBLE
4009: EQUAL
4010: IFTRUE 4014
4012: GO 4017
4014: POP
// ; end ;
4015: GO 4018
4017: POP
// for i = 1 to 3 do
4018: LD_ADDR_VAR 0 6
4022: PUSH
4023: DOUBLE
4024: LD_INT 1
4026: DEC
4027: ST_TO_ADDR
4028: LD_INT 3
4030: PUSH
4031: FOR_TO
4032: IFFALSE 4085
// result := Replace ( result , i , result [ i ] + ( points [ i ] * bpoints ) ) ;
4034: LD_ADDR_VAR 0 5
4038: PUSH
4039: LD_VAR 0 5
4043: PPUSH
4044: LD_VAR 0 6
4048: PPUSH
4049: LD_VAR 0 5
4053: PUSH
4054: LD_VAR 0 6
4058: ARRAY
4059: PUSH
4060: LD_VAR 0 9
4064: PUSH
4065: LD_VAR 0 6
4069: ARRAY
4070: PUSH
4071: LD_VAR 0 10
4075: MUL
4076: PLUS
4077: PPUSH
4078: CALL_OW 1
4082: ST_TO_ADDR
4083: GO 4031
4085: POP
4086: POP
// end ;
4087: GO 2570
4089: POP
4090: POP
// result := Replace ( result , 4 , tmp ) ;
4091: LD_ADDR_VAR 0 5
4095: PUSH
4096: LD_VAR 0 5
4100: PPUSH
4101: LD_INT 4
4103: PPUSH
4104: LD_VAR 0 8
4108: PPUSH
4109: CALL_OW 1
4113: ST_TO_ADDR
// end ;
4114: LD_VAR 0 5
4118: RET
// export function DangerAtRange ( unit , range ) ; begin
4119: LD_INT 0
4121: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
4122: LD_ADDR_VAR 0 3
4126: PUSH
4127: LD_VAR 0 1
4131: PPUSH
4132: CALL_OW 255
4136: PPUSH
4137: LD_VAR 0 1
4141: PPUSH
4142: CALL_OW 250
4146: PPUSH
4147: LD_VAR 0 1
4151: PPUSH
4152: CALL_OW 251
4156: PPUSH
4157: LD_VAR 0 2
4161: PPUSH
4162: CALL 2439 0 4
4166: ST_TO_ADDR
// end ;
4167: LD_VAR 0 3
4171: RET
// export function IsExtension ( b ) ; begin
4172: LD_INT 0
4174: PPUSH
// result := false ;
4175: LD_ADDR_VAR 0 2
4179: PUSH
4180: LD_INT 0
4182: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
4183: LD_VAR 0 1
4187: PPUSH
4188: CALL_OW 266
4192: PUSH
4193: LD_INT 23
4195: PUSH
4196: LD_INT 20
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_INT 17
4204: PUSH
4205: LD_INT 24
4207: PUSH
4208: LD_INT 21
4210: PUSH
4211: LD_INT 19
4213: PUSH
4214: LD_INT 16
4216: PUSH
4217: LD_INT 25
4219: PUSH
4220: LD_INT 18
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: IN
4235: IFFALSE 4245
// result := true ;
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: LD_INT 1
4244: ST_TO_ADDR
// end ;
4245: LD_VAR 0 2
4249: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
4250: LD_INT 0
4252: PPUSH
4253: PPUSH
4254: PPUSH
// result := [ ] ;
4255: LD_ADDR_VAR 0 2
4259: PUSH
4260: EMPTY
4261: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
4262: LD_ADDR_VAR 0 3
4266: PUSH
4267: LD_INT 21
4269: PUSH
4270: LD_INT 3
4272: PUSH
4273: EMPTY
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: ST_TO_ADDR
// if not tmp then
4282: LD_VAR 0 3
4286: NOT
4287: IFFALSE 4291
// exit ;
4289: GO 4341
// for i in tmp do
4291: LD_ADDR_VAR 0 4
4295: PUSH
4296: LD_VAR 0 3
4300: PUSH
4301: FOR_IN
4302: IFFALSE 4339
// if GetBase ( i ) = base then
4304: LD_VAR 0 4
4308: PPUSH
4309: CALL_OW 274
4313: PUSH
4314: LD_VAR 0 1
4318: EQUAL
4319: IFFALSE 4337
// result := result ^ i ;
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: LD_VAR 0 2
4330: PUSH
4331: LD_VAR 0 4
4335: ADD
4336: ST_TO_ADDR
4337: GO 4301
4339: POP
4340: POP
// end ;
4341: LD_VAR 0 2
4345: RET
// export function ComComplete ( unit , b ) ; var i ; begin
4346: LD_INT 0
4348: PPUSH
4349: PPUSH
// if BuildingStatus ( b ) = bs_build then
4350: LD_VAR 0 2
4354: PPUSH
4355: CALL_OW 461
4359: PUSH
4360: LD_INT 1
4362: EQUAL
4363: IFFALSE 4423
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
4365: LD_VAR 0 1
4369: PPUSH
4370: LD_STRING h
4372: PUSH
4373: LD_VAR 0 2
4377: PPUSH
4378: CALL_OW 250
4382: PUSH
4383: LD_VAR 0 2
4387: PPUSH
4388: CALL_OW 251
4392: PUSH
4393: LD_VAR 0 2
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: LD_INT 0
4403: PUSH
4404: LD_INT 0
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: PUSH
4416: EMPTY
4417: LIST
4418: PPUSH
4419: CALL_OW 446
// end ;
4423: LD_VAR 0 3
4427: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
4428: LD_INT 0
4430: PPUSH
4431: PPUSH
4432: PPUSH
4433: PPUSH
4434: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
4435: LD_VAR 0 1
4439: NOT
4440: PUSH
4441: LD_VAR 0 1
4445: PPUSH
4446: CALL_OW 263
4450: PUSH
4451: LD_INT 2
4453: EQUAL
4454: NOT
4455: OR
4456: IFFALSE 4460
// exit ;
4458: GO 4732
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
4460: LD_ADDR_VAR 0 6
4464: PUSH
4465: LD_INT 22
4467: PUSH
4468: LD_VAR 0 1
4472: PPUSH
4473: CALL_OW 255
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 2
4484: PUSH
4485: LD_INT 30
4487: PUSH
4488: LD_INT 36
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: LD_INT 34
4497: PUSH
4498: LD_INT 31
4500: PUSH
4501: EMPTY
4502: LIST
4503: LIST
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PPUSH
4514: CALL_OW 69
4518: ST_TO_ADDR
// if not tmp then
4519: LD_VAR 0 6
4523: NOT
4524: IFFALSE 4528
// exit ;
4526: GO 4732
// result := [ ] ;
4528: LD_ADDR_VAR 0 2
4532: PUSH
4533: EMPTY
4534: ST_TO_ADDR
// for i in tmp do
4535: LD_ADDR_VAR 0 3
4539: PUSH
4540: LD_VAR 0 6
4544: PUSH
4545: FOR_IN
4546: IFFALSE 4594
// begin t := UnitsInside ( i ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_VAR 0 3
4557: PPUSH
4558: CALL_OW 313
4562: ST_TO_ADDR
// if t then
4563: LD_VAR 0 4
4567: IFFALSE 4592
// result := Insert ( result , 1 , t ) ;
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_INT 1
4581: PPUSH
4582: LD_VAR 0 4
4586: PPUSH
4587: CALL_OW 2
4591: ST_TO_ADDR
// end ;
4592: GO 4545
4594: POP
4595: POP
// if not result then
4596: LD_VAR 0 2
4600: NOT
4601: IFFALSE 4605
// exit ;
4603: GO 4732
// mech := 0 ;
4605: LD_ADDR_VAR 0 5
4609: PUSH
4610: LD_INT 0
4612: ST_TO_ADDR
// for i in result do
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: LD_VAR 0 2
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4706
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
4626: LD_ADDR_VAR 0 4
4630: PUSH
4631: LD_VAR 0 3
4635: PPUSH
4636: LD_INT 3
4638: PPUSH
4639: CALL_OW 259
4643: PUSH
4644: LD_VAR 0 3
4648: PPUSH
4649: CALL_OW 432
4653: MINUS
4654: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
4655: LD_VAR 0 4
4659: PUSH
4660: LD_VAR 0 5
4664: PUSH
4665: LD_INT 1
4667: ARRAY
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 259
4676: PUSH
4677: LD_VAR 0 5
4681: PUSH
4682: LD_INT 1
4684: ARRAY
4685: PPUSH
4686: CALL_OW 432
4690: MINUS
4691: GREATEREQUAL
4692: IFFALSE 4704
// mech := i ;
4694: LD_ADDR_VAR 0 5
4698: PUSH
4699: LD_VAR 0 3
4703: ST_TO_ADDR
// end ;
4704: GO 4623
4706: POP
4707: POP
// if mech then
4708: LD_VAR 0 5
4712: IFFALSE 4732
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
4714: LD_VAR 0 1
4718: PPUSH
4719: LD_VAR 0 5
4723: PUSH
4724: LD_INT 1
4726: ARRAY
4727: PPUSH
4728: CALL_OW 135
// end ;
4732: LD_VAR 0 2
4736: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , f , x , un , base , side , nation , buildings ; begin
4737: LD_INT 0
4739: PPUSH
4740: PPUSH
4741: PPUSH
4742: PPUSH
4743: PPUSH
4744: PPUSH
4745: PPUSH
4746: PPUSH
4747: PPUSH
4748: PPUSH
// result := [ ] ;
4749: LD_ADDR_VAR 0 6
4753: PUSH
4754: EMPTY
4755: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 266
4765: PUSH
4766: LD_INT 0
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: IN
4776: NOT
4777: IFFALSE 4781
// exit ;
4779: GO 5876
// if name then
4781: LD_VAR 0 2
4785: IFFALSE 4801
// SetBName ( base_dep , name ) ;
4787: LD_VAR 0 1
4791: PPUSH
4792: LD_VAR 0 2
4796: PPUSH
4797: CALL_OW 500
// base := GetBase ( base_dep ) ;
4801: LD_ADDR_VAR 0 12
4805: PUSH
4806: LD_VAR 0 1
4810: PPUSH
4811: CALL_OW 274
4815: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
4816: LD_ADDR_VAR 0 13
4820: PUSH
4821: LD_VAR 0 1
4825: PPUSH
4826: CALL_OW 255
4830: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
4831: LD_ADDR_VAR 0 14
4835: PUSH
4836: LD_VAR 0 1
4840: PPUSH
4841: CALL_OW 248
4845: ST_TO_ADDR
// if sources then
4846: LD_VAR 0 4
4850: IFFALSE 4897
// for i = 1 to 3 do
4852: LD_ADDR_VAR 0 7
4856: PUSH
4857: DOUBLE
4858: LD_INT 1
4860: DEC
4861: ST_TO_ADDR
4862: LD_INT 3
4864: PUSH
4865: FOR_TO
4866: IFFALSE 4895
// AddResourceType ( base , i , sources [ i ] ) ;
4868: LD_VAR 0 12
4872: PPUSH
4873: LD_VAR 0 7
4877: PPUSH
4878: LD_VAR 0 4
4882: PUSH
4883: LD_VAR 0 7
4887: ARRAY
4888: PPUSH
4889: CALL_OW 276
4893: GO 4865
4895: POP
4896: POP
// buildings := GetBaseBuildings ( base ) ;
4897: LD_ADDR_VAR 0 15
4901: PUSH
4902: LD_VAR 0 12
4906: PPUSH
4907: CALL 4250 0 1
4911: ST_TO_ADDR
// InitHc ;
4912: CALL_OW 19
// InitUc ;
4916: CALL_OW 18
// uc_side := side ;
4920: LD_ADDR_OWVAR 20
4924: PUSH
4925: LD_VAR 0 13
4929: ST_TO_ADDR
// uc_nation := nation ;
4930: LD_ADDR_OWVAR 21
4934: PUSH
4935: LD_VAR 0 14
4939: ST_TO_ADDR
// if buildings then
4940: LD_VAR 0 15
4944: IFFALSE 5747
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4946: LD_VAR 0 15
4950: PPUSH
4951: LD_INT 2
4953: PUSH
4954: LD_INT 30
4956: PUSH
4957: LD_INT 32
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: PUSH
4964: LD_INT 30
4966: PUSH
4967: LD_INT 33
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: LIST
4978: PPUSH
4979: CALL_OW 72
4983: IFFALSE 5066
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
4985: LD_ADDR_VAR 0 7
4989: PUSH
4990: LD_VAR 0 15
4994: PPUSH
4995: LD_INT 2
4997: PUSH
4998: LD_INT 30
5000: PUSH
5001: LD_INT 32
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 30
5010: PUSH
5011: LD_INT 33
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: LIST
5022: PPUSH
5023: CALL_OW 72
5027: PUSH
5028: FOR_IN
5029: IFFALSE 5064
// if not GetBWeapon ( i ) then
5031: LD_VAR 0 7
5035: PPUSH
5036: CALL_OW 269
5040: NOT
5041: IFFALSE 5062
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
5043: LD_VAR 0 7
5047: PPUSH
5048: LD_VAR 0 7
5052: PPUSH
5053: CALL 5881 0 1
5057: PPUSH
5058: CALL_OW 431
5062: GO 5028
5064: POP
5065: POP
// end ; for i = 1 to personel do
5066: LD_ADDR_VAR 0 7
5070: PUSH
5071: DOUBLE
5072: LD_INT 1
5074: DEC
5075: ST_TO_ADDR
5076: LD_VAR 0 5
5080: PUSH
5081: FOR_TO
5082: IFFALSE 5727
// begin case i of 1 :
5084: LD_VAR 0 7
5088: PUSH
5089: LD_INT 1
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5170
5097: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
5098: LD_ADDR_VAR 0 9
5102: PUSH
5103: LD_VAR 0 15
5107: PPUSH
5108: LD_INT 22
5110: PUSH
5111: LD_VAR 0 13
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 2
5122: PUSH
5123: LD_INT 30
5125: PUSH
5126: LD_INT 32
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 30
5135: PUSH
5136: LD_INT 4
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 30
5145: PUSH
5146: LD_INT 5
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 72
5167: ST_TO_ADDR
5168: GO 5392
5170: LD_INT 2
5172: DOUBLE
5173: EQUAL
5174: IFTRUE 5178
5176: GO 5240
5178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
5179: LD_ADDR_VAR 0 9
5183: PUSH
5184: LD_VAR 0 15
5188: PPUSH
5189: LD_INT 22
5191: PUSH
5192: LD_VAR 0 13
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 2
5203: PUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PUSH
5214: LD_INT 30
5216: PUSH
5217: LD_INT 1
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 72
5237: ST_TO_ADDR
5238: GO 5392
5240: LD_INT 3
5242: DOUBLE
5243: EQUAL
5244: IFTRUE 5248
5246: GO 5310
5248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
5249: LD_ADDR_VAR 0 9
5253: PUSH
5254: LD_VAR 0 15
5258: PPUSH
5259: LD_INT 22
5261: PUSH
5262: LD_VAR 0 13
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PUSH
5271: LD_INT 2
5273: PUSH
5274: LD_INT 30
5276: PUSH
5277: LD_INT 2
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 30
5286: PUSH
5287: LD_INT 3
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PPUSH
5303: CALL_OW 72
5307: ST_TO_ADDR
5308: GO 5392
5310: LD_INT 4
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5391
5318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
5319: LD_ADDR_VAR 0 9
5323: PUSH
5324: LD_VAR 0 15
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_VAR 0 13
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PUSH
5341: LD_INT 2
5343: PUSH
5344: LD_INT 30
5346: PUSH
5347: LD_INT 6
5349: PUSH
5350: EMPTY
5351: LIST
5352: LIST
5353: PUSH
5354: LD_INT 30
5356: PUSH
5357: LD_INT 7
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PUSH
5364: LD_INT 30
5366: PUSH
5367: LD_INT 8
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 72
5388: ST_TO_ADDR
5389: GO 5392
5391: POP
// if not f then
5392: LD_VAR 0 9
5396: NOT
5397: IFFALSE 5401
// continue ;
5399: GO 5081
// x := personel [ i ] ;
5401: LD_ADDR_VAR 0 10
5405: PUSH
5406: LD_VAR 0 5
5410: PUSH
5411: LD_VAR 0 7
5415: ARRAY
5416: ST_TO_ADDR
// if x = - 1 then
5417: LD_VAR 0 10
5421: PUSH
5422: LD_INT 1
5424: NEG
5425: EQUAL
5426: IFFALSE 5548
// begin for j in f do
5428: LD_ADDR_VAR 0 8
5432: PUSH
5433: LD_VAR 0 9
5437: PUSH
5438: FOR_IN
5439: IFFALSE 5544
// repeat PrepareHuman ( false , i , skill ) ;
5441: LD_INT 0
5443: PPUSH
5444: LD_VAR 0 7
5448: PPUSH
5449: LD_VAR 0 3
5453: PPUSH
5454: CALL_OW 380
// un := CreateHuman ;
5458: LD_ADDR_VAR 0 11
5462: PUSH
5463: CALL_OW 44
5467: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
5468: LD_ADDR_VAR 0 6
5472: PUSH
5473: LD_VAR 0 6
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: LD_VAR 0 11
5485: PPUSH
5486: CALL_OW 2
5490: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
5491: LD_VAR 0 11
5495: PPUSH
5496: LD_VAR 0 8
5500: PPUSH
5501: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
5505: LD_VAR 0 8
5509: PPUSH
5510: CALL_OW 313
5514: PUSH
5515: LD_INT 6
5517: EQUAL
5518: PUSH
5519: LD_VAR 0 8
5523: PPUSH
5524: CALL_OW 266
5528: PUSH
5529: LD_INT 32
5531: PUSH
5532: LD_INT 31
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: IN
5539: OR
5540: IFFALSE 5441
5542: GO 5438
5544: POP
5545: POP
// end else
5546: GO 5725
// for j = 1 to x do
5548: LD_ADDR_VAR 0 8
5552: PUSH
5553: DOUBLE
5554: LD_INT 1
5556: DEC
5557: ST_TO_ADDR
5558: LD_VAR 0 10
5562: PUSH
5563: FOR_TO
5564: IFFALSE 5723
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
5566: LD_VAR 0 9
5570: PUSH
5571: LD_INT 1
5573: ARRAY
5574: PPUSH
5575: CALL_OW 313
5579: PUSH
5580: LD_VAR 0 9
5584: PUSH
5585: LD_INT 1
5587: ARRAY
5588: PPUSH
5589: CALL_OW 266
5593: PUSH
5594: LD_INT 32
5596: PUSH
5597: LD_INT 31
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: IN
5604: AND
5605: PUSH
5606: LD_VAR 0 9
5610: PUSH
5611: LD_INT 1
5613: ARRAY
5614: PPUSH
5615: CALL_OW 313
5619: PUSH
5620: LD_INT 6
5622: EQUAL
5623: OR
5624: IFFALSE 5644
// f := Delete ( f , 1 ) ;
5626: LD_ADDR_VAR 0 9
5630: PUSH
5631: LD_VAR 0 9
5635: PPUSH
5636: LD_INT 1
5638: PPUSH
5639: CALL_OW 3
5643: ST_TO_ADDR
// if not f then
5644: LD_VAR 0 9
5648: NOT
5649: IFFALSE 5653
// break ;
5651: GO 5723
// PrepareHuman ( false , i , skill ) ;
5653: LD_INT 0
5655: PPUSH
5656: LD_VAR 0 7
5660: PPUSH
5661: LD_VAR 0 3
5665: PPUSH
5666: CALL_OW 380
// un := CreateHuman ;
5670: LD_ADDR_VAR 0 11
5674: PUSH
5675: CALL_OW 44
5679: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
5680: LD_ADDR_VAR 0 6
5684: PUSH
5685: LD_VAR 0 6
5689: PPUSH
5690: LD_INT 1
5692: PPUSH
5693: LD_VAR 0 11
5697: PPUSH
5698: CALL_OW 2
5702: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
5703: LD_VAR 0 11
5707: PPUSH
5708: LD_VAR 0 9
5712: PUSH
5713: LD_INT 1
5715: ARRAY
5716: PPUSH
5717: CALL_OW 52
// end ;
5721: GO 5563
5723: POP
5724: POP
// end ;
5725: GO 5081
5727: POP
5728: POP
// result := result ^ buildings ;
5729: LD_ADDR_VAR 0 6
5733: PUSH
5734: LD_VAR 0 6
5738: PUSH
5739: LD_VAR 0 15
5743: ADD
5744: ST_TO_ADDR
// end else
5745: GO 5876
// begin for i = 1 to personel do
5747: LD_ADDR_VAR 0 7
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 5
5761: PUSH
5762: FOR_TO
5763: IFFALSE 5874
// begin x := personel [ i ] ;
5765: LD_ADDR_VAR 0 10
5769: PUSH
5770: LD_VAR 0 5
5774: PUSH
5775: LD_VAR 0 7
5779: ARRAY
5780: ST_TO_ADDR
// if x = - 1 then
5781: LD_VAR 0 10
5785: PUSH
5786: LD_INT 1
5788: NEG
5789: EQUAL
5790: IFFALSE 5794
// continue ;
5792: GO 5762
// PrepareHuman ( false , i , skill ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_VAR 0 7
5801: PPUSH
5802: LD_VAR 0 3
5806: PPUSH
5807: CALL_OW 380
// un := CreateHuman ;
5811: LD_ADDR_VAR 0 11
5815: PUSH
5816: CALL_OW 44
5820: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
5821: LD_VAR 0 11
5825: PPUSH
5826: LD_VAR 0 1
5830: PPUSH
5831: CALL_OW 250
5835: PPUSH
5836: LD_VAR 0 1
5840: PPUSH
5841: CALL_OW 251
5845: PPUSH
5846: LD_INT 10
5848: PPUSH
5849: LD_INT 0
5851: PPUSH
5852: CALL_OW 50
// result := result ^ un ;
5856: LD_ADDR_VAR 0 6
5860: PUSH
5861: LD_VAR 0 6
5865: PUSH
5866: LD_VAR 0 11
5870: ADD
5871: ST_TO_ADDR
// end ;
5872: GO 5762
5874: POP
5875: POP
// end ; end ;
5876: LD_VAR 0 6
5880: RET
// export function GetTurretWeapon ( tower ) ; var list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
5881: LD_INT 0
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
5895: PPUSH
5896: PPUSH
5897: PPUSH
// result := false ;
5898: LD_ADDR_VAR 0 2
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// if not tower then
5906: LD_VAR 0 1
5910: NOT
5911: IFFALSE 5915
// exit ;
5913: GO 7088
// nat := GetNation ( tower ) ;
5915: LD_ADDR_VAR 0 10
5919: PUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: CALL_OW 248
5929: ST_TO_ADDR
// side := GetSide ( tower ) ;
5930: LD_ADDR_VAR 0 14
5934: PUSH
5935: LD_VAR 0 1
5939: PPUSH
5940: CALL_OW 255
5944: ST_TO_ADDR
// x := GetX ( tower ) ;
5945: LD_ADDR_VAR 0 8
5949: PUSH
5950: LD_VAR 0 1
5954: PPUSH
5955: CALL_OW 250
5959: ST_TO_ADDR
// y := GetY ( tower ) ;
5960: LD_ADDR_VAR 0 9
5964: PUSH
5965: LD_VAR 0 1
5969: PPUSH
5970: CALL_OW 251
5974: ST_TO_ADDR
// weapon := 0 ;
5975: LD_ADDR_VAR 0 16
5979: PUSH
5980: LD_INT 0
5982: ST_TO_ADDR
// fac_list := [ ] ;
5983: LD_ADDR_VAR 0 15
5987: PUSH
5988: EMPTY
5989: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
5990: LD_ADDR_VAR 0 4
5994: PUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 274
6004: PPUSH
6005: CALL 4250 0 1
6009: PPUSH
6010: LD_INT 30
6012: PUSH
6013: LD_INT 3
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 72
6024: ST_TO_ADDR
// if not factories then
6025: LD_VAR 0 4
6029: NOT
6030: IFFALSE 6034
// exit ;
6032: GO 7088
// for i in factories do
6034: LD_ADDR_VAR 0 6
6038: PUSH
6039: LD_VAR 0 4
6043: PUSH
6044: FOR_IN
6045: IFFALSE 6070
// fac_list := fac_list union AvailableWeaponList ( i ) ;
6047: LD_ADDR_VAR 0 15
6051: PUSH
6052: LD_VAR 0 15
6056: PUSH
6057: LD_VAR 0 6
6061: PPUSH
6062: CALL_OW 478
6066: UNION
6067: ST_TO_ADDR
6068: GO 6044
6070: POP
6071: POP
// if not fac_list then
6072: LD_VAR 0 15
6076: NOT
6077: IFFALSE 6081
// exit ;
6079: GO 7088
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
6081: LD_ADDR_VAR 0 3
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: LD_INT 5
6091: PUSH
6092: LD_INT 9
6094: PUSH
6095: LD_INT 10
6097: PUSH
6098: LD_INT 6
6100: PUSH
6101: LD_INT 7
6103: PUSH
6104: LD_INT 11
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 27
6118: PUSH
6119: LD_INT 28
6121: PUSH
6122: LD_INT 26
6124: PUSH
6125: LD_INT 30
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: LD_INT 43
6136: PUSH
6137: LD_INT 44
6139: PUSH
6140: LD_INT 46
6142: PUSH
6143: LD_INT 45
6145: PUSH
6146: LD_INT 47
6148: PUSH
6149: LD_INT 49
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: LIST
6164: PUSH
6165: LD_VAR 0 10
6169: ARRAY
6170: ST_TO_ADDR
// for i in list do
6171: LD_ADDR_VAR 0 6
6175: PUSH
6176: LD_VAR 0 3
6180: PUSH
6181: FOR_IN
6182: IFFALSE 6215
// if not i in fac_list then
6184: LD_VAR 0 6
6188: PUSH
6189: LD_VAR 0 15
6193: IN
6194: NOT
6195: IFFALSE 6213
// list := list diff i ;
6197: LD_ADDR_VAR 0 3
6201: PUSH
6202: LD_VAR 0 3
6206: PUSH
6207: LD_VAR 0 6
6211: DIFF
6212: ST_TO_ADDR
6213: GO 6181
6215: POP
6216: POP
// if not list then
6217: LD_VAR 0 3
6221: NOT
6222: IFFALSE 6226
// exit ;
6224: GO 7088
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
6226: LD_VAR 0 10
6230: PUSH
6231: LD_INT 3
6233: EQUAL
6234: PUSH
6235: LD_INT 49
6237: PUSH
6238: LD_VAR 0 3
6242: IN
6243: AND
6244: PUSH
6245: LD_INT 31
6247: PPUSH
6248: LD_VAR 0 14
6252: PPUSH
6253: CALL_OW 321
6257: PUSH
6258: LD_INT 2
6260: EQUAL
6261: AND
6262: IFFALSE 6322
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
6264: LD_INT 22
6266: PUSH
6267: LD_VAR 0 14
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: LD_INT 35
6278: PUSH
6279: LD_INT 49
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 91
6288: PUSH
6289: LD_VAR 0 1
6293: PUSH
6294: LD_INT 10
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: PPUSH
6307: CALL_OW 69
6311: NOT
6312: IFFALSE 6322
// weapon := ru_time_lapser ;
6314: LD_ADDR_VAR 0 16
6318: PUSH
6319: LD_INT 49
6321: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
6322: LD_VAR 0 10
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 2
6332: PUSH
6333: EMPTY
6334: LIST
6335: LIST
6336: IN
6337: PUSH
6338: LD_INT 11
6340: PUSH
6341: LD_VAR 0 3
6345: IN
6346: PUSH
6347: LD_INT 30
6349: PUSH
6350: LD_VAR 0 3
6354: IN
6355: OR
6356: AND
6357: PUSH
6358: LD_INT 6
6360: PPUSH
6361: LD_VAR 0 14
6365: PPUSH
6366: CALL_OW 321
6370: PUSH
6371: LD_INT 2
6373: EQUAL
6374: AND
6375: IFFALSE 6540
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
6377: LD_INT 22
6379: PUSH
6380: LD_VAR 0 14
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: LD_INT 35
6394: PUSH
6395: LD_INT 11
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 35
6404: PUSH
6405: LD_INT 30
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 91
6419: PUSH
6420: LD_VAR 0 1
6424: PUSH
6425: LD_INT 15
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 69
6442: NOT
6443: PUSH
6444: LD_INT 22
6446: PUSH
6447: LD_VAR 0 14
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 30
6461: PUSH
6462: LD_INT 32
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 30
6471: PUSH
6472: LD_INT 33
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: LD_INT 91
6486: PUSH
6487: LD_VAR 0 1
6491: PUSH
6492: LD_INT 12
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: PPUSH
6508: CALL_OW 69
6512: PUSH
6513: LD_INT 1
6515: GREATER
6516: AND
6517: IFFALSE 6540
// weapon := [ us_radar , ar_radar ] [ nat ] ;
6519: LD_ADDR_VAR 0 16
6523: PUSH
6524: LD_INT 11
6526: PUSH
6527: LD_INT 30
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_VAR 0 10
6538: ARRAY
6539: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
6540: LD_VAR 0 16
6544: NOT
6545: PUSH
6546: LD_INT 40
6548: PPUSH
6549: LD_VAR 0 14
6553: PPUSH
6554: CALL_OW 321
6558: PUSH
6559: LD_INT 2
6561: EQUAL
6562: AND
6563: PUSH
6564: LD_INT 7
6566: PUSH
6567: LD_VAR 0 3
6571: IN
6572: PUSH
6573: LD_INT 28
6575: PUSH
6576: LD_VAR 0 3
6580: IN
6581: OR
6582: PUSH
6583: LD_INT 45
6585: PUSH
6586: LD_VAR 0 3
6590: IN
6591: OR
6592: AND
6593: IFFALSE 6803
// begin height := GetHexInfo ( x , y ) [ 2 ] ;
6595: LD_ADDR_VAR 0 13
6599: PUSH
6600: LD_VAR 0 8
6604: PPUSH
6605: LD_VAR 0 9
6609: PPUSH
6610: CALL_OW 546
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
6619: LD_ADDR_VAR 0 12
6623: PUSH
6624: LD_INT 0
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 5
6635: PUSH
6636: EMPTY
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: ST_TO_ADDR
// for i in tmp do
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_VAR 0 12
6651: PUSH
6652: FOR_IN
6653: IFFALSE 6801
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
6655: LD_ADDR_VAR 0 7
6659: PUSH
6660: LD_VAR 0 8
6664: PPUSH
6665: LD_VAR 0 6
6669: PPUSH
6670: LD_INT 5
6672: PPUSH
6673: CALL_OW 272
6677: PUSH
6678: LD_VAR 0 9
6682: PPUSH
6683: LD_VAR 0 6
6687: PPUSH
6688: LD_INT 5
6690: PPUSH
6691: CALL_OW 273
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
6700: LD_VAR 0 7
6704: PUSH
6705: LD_INT 1
6707: ARRAY
6708: PPUSH
6709: LD_VAR 0 7
6713: PUSH
6714: LD_INT 2
6716: ARRAY
6717: PPUSH
6718: CALL_OW 488
6722: IFFALSE 6799
// begin h := GetHexInfo ( j [ 1 ] , j [ 2 ] ) [ 2 ] ;
6724: LD_ADDR_VAR 0 11
6728: PUSH
6729: LD_VAR 0 7
6733: PUSH
6734: LD_INT 1
6736: ARRAY
6737: PPUSH
6738: LD_VAR 0 7
6742: PUSH
6743: LD_INT 2
6745: ARRAY
6746: PPUSH
6747: CALL_OW 546
6751: PUSH
6752: LD_INT 2
6754: ARRAY
6755: ST_TO_ADDR
// if h + 7 < height then
6756: LD_VAR 0 11
6760: PUSH
6761: LD_INT 7
6763: PLUS
6764: PUSH
6765: LD_VAR 0 13
6769: LESS
6770: IFFALSE 6799
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
6772: LD_ADDR_VAR 0 16
6776: PUSH
6777: LD_INT 7
6779: PUSH
6780: LD_INT 28
6782: PUSH
6783: LD_INT 45
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: PUSH
6791: LD_VAR 0 10
6795: ARRAY
6796: ST_TO_ADDR
// break ;
6797: GO 6801
// end ; end ; end ;
6799: GO 6652
6801: POP
6802: POP
// end ; if not weapon then
6803: LD_VAR 0 16
6807: NOT
6808: IFFALSE 6970
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
6810: LD_ADDR_VAR 0 3
6814: PUSH
6815: LD_VAR 0 3
6819: PUSH
6820: LD_INT 11
6822: PUSH
6823: LD_INT 30
6825: PUSH
6826: LD_INT 49
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: DIFF
6834: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
6835: LD_ADDR_VAR 0 16
6839: PUSH
6840: LD_VAR 0 3
6844: PUSH
6845: LD_INT 1
6847: PPUSH
6848: LD_VAR 0 3
6852: PPUSH
6853: CALL_OW 12
6857: ARRAY
6858: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
6859: LD_ADDR_VAR 0 12
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_VAR 0 14
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 3
6878: PUSH
6879: LD_INT 35
6881: PUSH
6882: LD_INT 0
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: ST_TO_ADDR
// for i in tmp do
6902: LD_ADDR_VAR 0 6
6906: PUSH
6907: LD_VAR 0 12
6911: PUSH
6912: FOR_IN
6913: IFFALSE 6938
// list := list diff GetBWeapon ( i ) ;
6915: LD_ADDR_VAR 0 3
6919: PUSH
6920: LD_VAR 0 3
6924: PUSH
6925: LD_VAR 0 6
6929: PPUSH
6930: CALL_OW 269
6934: DIFF
6935: ST_TO_ADDR
6936: GO 6912
6938: POP
6939: POP
// if list then
6940: LD_VAR 0 3
6944: IFFALSE 6970
// weapon := list [ rand ( 1 , list ) ] ;
6946: LD_ADDR_VAR 0 16
6950: PUSH
6951: LD_VAR 0 3
6955: PUSH
6956: LD_INT 1
6958: PPUSH
6959: LD_VAR 0 3
6963: PPUSH
6964: CALL_OW 12
6968: ARRAY
6969: ST_TO_ADDR
// end ; if weapon then
6970: LD_VAR 0 16
6974: IFFALSE 7088
// begin tmp := CostOfWeapon ( weapon ) ;
6976: LD_ADDR_VAR 0 12
6980: PUSH
6981: LD_VAR 0 16
6985: PPUSH
6986: CALL_OW 451
6990: ST_TO_ADDR
// j := GetBase ( tower ) ;
6991: LD_ADDR_VAR 0 7
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: CALL_OW 274
7005: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
7006: LD_VAR 0 7
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: CALL_OW 275
7018: PUSH
7019: LD_VAR 0 12
7023: PUSH
7024: LD_INT 1
7026: ARRAY
7027: GREATEREQUAL
7028: PUSH
7029: LD_VAR 0 7
7033: PPUSH
7034: LD_INT 2
7036: PPUSH
7037: CALL_OW 275
7041: PUSH
7042: LD_VAR 0 12
7046: PUSH
7047: LD_INT 2
7049: ARRAY
7050: GREATEREQUAL
7051: AND
7052: PUSH
7053: LD_VAR 0 7
7057: PPUSH
7058: LD_INT 3
7060: PPUSH
7061: CALL_OW 275
7065: PUSH
7066: LD_VAR 0 12
7070: PUSH
7071: LD_INT 3
7073: ARRAY
7074: GREATEREQUAL
7075: AND
7076: IFFALSE 7088
// result := weapon ;
7078: LD_ADDR_VAR 0 2
7082: PUSH
7083: LD_VAR 0 16
7087: ST_TO_ADDR
// end ; end ;
7088: LD_VAR 0 2
7092: RET
// export function Compare ( val1 , val2 ) ; begin
7093: LD_INT 0
7095: PPUSH
// if val1 = val2 then
7096: LD_VAR 0 1
7100: PUSH
7101: LD_VAR 0 2
7105: EQUAL
7106: IFFALSE 7118
// result := true else
7108: LD_ADDR_VAR 0 3
7112: PUSH
7113: LD_INT 1
7115: ST_TO_ADDR
7116: GO 7126
// result := false ;
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 0
7125: ST_TO_ADDR
// end ;
7126: LD_VAR 0 3
7130: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
7131: LD_INT 0
7133: PPUSH
7134: PPUSH
// result := true ;
7135: LD_ADDR_VAR 0 3
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// if array1 = array2 then
7143: LD_VAR 0 1
7147: PUSH
7148: LD_VAR 0 2
7152: EQUAL
7153: IFFALSE 7218
// begin for i = 1 to array1 do
7155: LD_ADDR_VAR 0 4
7159: PUSH
7160: DOUBLE
7161: LD_INT 1
7163: DEC
7164: ST_TO_ADDR
7165: LD_VAR 0 1
7169: PUSH
7170: FOR_TO
7171: IFFALSE 7214
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_VAR 0 4
7182: ARRAY
7183: PPUSH
7184: LD_VAR 0 2
7188: PUSH
7189: LD_VAR 0 4
7193: ARRAY
7194: PPUSH
7195: CALL 7093 0 2
7199: NOT
7200: IFFALSE 7212
// begin result := false ;
7202: LD_ADDR_VAR 0 3
7206: PUSH
7207: LD_INT 0
7209: ST_TO_ADDR
// break ;
7210: GO 7214
// end ;
7212: GO 7170
7214: POP
7215: POP
// end else
7216: GO 7226
// result := false ;
7218: LD_ADDR_VAR 0 3
7222: PUSH
7223: LD_INT 0
7225: ST_TO_ADDR
// end ;
7226: LD_VAR 0 3
7230: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
7235: PPUSH
// pom := GetBase ( fac ) ;
7236: LD_ADDR_VAR 0 5
7240: PUSH
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 274
7250: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
7251: LD_ADDR_VAR 0 4
7255: PUSH
7256: LD_VAR 0 2
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_VAR 0 2
7269: PUSH
7270: LD_INT 2
7272: ARRAY
7273: PPUSH
7274: LD_VAR 0 2
7278: PUSH
7279: LD_INT 3
7281: ARRAY
7282: PPUSH
7283: LD_VAR 0 2
7287: PUSH
7288: LD_INT 4
7290: ARRAY
7291: PPUSH
7292: CALL_OW 449
7296: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
7297: LD_VAR 0 5
7301: PPUSH
7302: LD_INT 1
7304: PPUSH
7305: CALL_OW 275
7309: PUSH
7310: LD_VAR 0 4
7314: PUSH
7315: LD_INT 1
7317: ARRAY
7318: GREATEREQUAL
7319: PUSH
7320: LD_VAR 0 5
7324: PPUSH
7325: LD_INT 2
7327: PPUSH
7328: CALL_OW 275
7332: PUSH
7333: LD_VAR 0 4
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: GREATEREQUAL
7342: AND
7343: PUSH
7344: LD_VAR 0 5
7348: PPUSH
7349: LD_INT 3
7351: PPUSH
7352: CALL_OW 275
7356: PUSH
7357: LD_VAR 0 4
7361: PUSH
7362: LD_INT 3
7364: ARRAY
7365: GREATEREQUAL
7366: AND
7367: IFFALSE 7379
// result := true else
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_INT 1
7376: ST_TO_ADDR
7377: GO 7387
// result := false ;
7379: LD_ADDR_VAR 0 3
7383: PUSH
7384: LD_INT 0
7386: ST_TO_ADDR
// end ;
7387: LD_VAR 0 3
7391: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist ; begin
7392: LD_INT 0
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
// result := false ;
7402: LD_ADDR_VAR 0 6
7406: PUSH
7407: LD_INT 0
7409: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
7410: LD_VAR 0 1
7414: NOT
7415: PUSH
7416: LD_VAR 0 2
7420: NOT
7421: OR
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 0
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: LD_INT 2
7436: PUSH
7437: LD_INT 3
7439: PUSH
7440: LD_INT 4
7442: PUSH
7443: LD_INT 5
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: IN
7454: NOT
7455: OR
7456: PUSH
7457: LD_VAR 0 3
7461: PPUSH
7462: LD_VAR 0 4
7466: PPUSH
7467: CALL_OW 488
7471: NOT
7472: OR
7473: IFFALSE 7477
// exit ;
7475: GO 8160
// pom := GetBase ( bdepot ) ;
7477: LD_ADDR_VAR 0 9
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: CALL_OW 274
7491: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
7492: LD_ADDR_VAR 0 10
7496: PUSH
7497: LD_VAR 0 2
7501: PPUSH
7502: LD_VAR 0 1
7506: PPUSH
7507: CALL_OW 248
7511: PPUSH
7512: CALL_OW 450
7516: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
7517: LD_VAR 0 9
7521: PPUSH
7522: LD_INT 1
7524: PPUSH
7525: CALL_OW 275
7529: PUSH
7530: LD_VAR 0 10
7534: PUSH
7535: LD_INT 1
7537: ARRAY
7538: GREATEREQUAL
7539: PUSH
7540: LD_VAR 0 9
7544: PPUSH
7545: LD_INT 2
7547: PPUSH
7548: CALL_OW 275
7552: PUSH
7553: LD_VAR 0 10
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: GREATEREQUAL
7562: AND
7563: PUSH
7564: LD_VAR 0 9
7568: PPUSH
7569: LD_INT 3
7571: PPUSH
7572: CALL_OW 275
7576: PUSH
7577: LD_VAR 0 10
7581: PUSH
7582: LD_INT 3
7584: ARRAY
7585: GREATEREQUAL
7586: AND
7587: IFFALSE 7599
// result := true else
7589: LD_ADDR_VAR 0 6
7593: PUSH
7594: LD_INT 1
7596: ST_TO_ADDR
7597: GO 7601
// exit ;
7599: GO 8160
// if GetBType ( bdepot ) = b_depot then
7601: LD_VAR 0 1
7605: PPUSH
7606: CALL_OW 266
7610: PUSH
7611: LD_INT 0
7613: EQUAL
7614: IFFALSE 7626
// dist := 28 else
7616: LD_ADDR_VAR 0 13
7620: PUSH
7621: LD_INT 28
7623: ST_TO_ADDR
7624: GO 7634
// dist := 36 ;
7626: LD_ADDR_VAR 0 13
7630: PUSH
7631: LD_INT 36
7633: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
7634: LD_VAR 0 1
7638: PPUSH
7639: LD_VAR 0 3
7643: PPUSH
7644: LD_VAR 0 4
7648: PPUSH
7649: CALL_OW 297
7653: PUSH
7654: LD_VAR 0 13
7658: GREATER
7659: IFFALSE 7671
// begin result := false ;
7661: LD_ADDR_VAR 0 6
7665: PUSH
7666: LD_INT 0
7668: ST_TO_ADDR
// exit ;
7669: GO 8160
// end ; hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
7671: LD_ADDR_VAR 0 11
7675: PUSH
7676: LD_VAR 0 2
7680: PPUSH
7681: LD_VAR 0 3
7685: PPUSH
7686: LD_VAR 0 4
7690: PPUSH
7691: LD_VAR 0 5
7695: PPUSH
7696: LD_VAR 0 1
7700: PPUSH
7701: CALL_OW 248
7705: PPUSH
7706: LD_INT 0
7708: PPUSH
7709: CALL 8165 0 6
7713: ST_TO_ADDR
// if not hexes then
7714: LD_VAR 0 11
7718: NOT
7719: IFFALSE 7731
// begin result := false ;
7721: LD_ADDR_VAR 0 6
7725: PUSH
7726: LD_INT 0
7728: ST_TO_ADDR
// exit ;
7729: GO 8160
// end ; height := GetHexInfo ( x , y ) [ 2 ] ;
7731: LD_ADDR_VAR 0 12
7735: PUSH
7736: LD_VAR 0 3
7740: PPUSH
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 546
7750: PUSH
7751: LD_INT 2
7753: ARRAY
7754: ST_TO_ADDR
// for i = 1 to hexes do
7755: LD_ADDR_VAR 0 7
7759: PUSH
7760: DOUBLE
7761: LD_INT 1
7763: DEC
7764: ST_TO_ADDR
7765: LD_VAR 0 11
7769: PUSH
7770: FOR_TO
7771: IFFALSE 8117
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
7773: LD_VAR 0 11
7777: PUSH
7778: LD_VAR 0 7
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 11
7792: PUSH
7793: LD_VAR 0 7
7797: ARRAY
7798: PUSH
7799: LD_INT 2
7801: ARRAY
7802: PPUSH
7803: CALL_OW 488
7807: NOT
7808: IFFALSE 7812
// continue ;
7810: GO 7770
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
7812: LD_ADDR_VAR 0 8
7816: PUSH
7817: LD_VAR 0 11
7821: PUSH
7822: LD_VAR 0 7
7826: ARRAY
7827: PUSH
7828: LD_INT 1
7830: ARRAY
7831: PPUSH
7832: LD_VAR 0 11
7836: PUSH
7837: LD_VAR 0 7
7841: ARRAY
7842: PUSH
7843: LD_INT 2
7845: ARRAY
7846: PPUSH
7847: CALL_OW 546
7851: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
7852: LD_VAR 0 8
7856: PUSH
7857: LD_INT 1
7859: ARRAY
7860: PUSH
7861: LD_VAR 0 8
7865: PUSH
7866: LD_INT 2
7868: ARRAY
7869: PUSH
7870: LD_VAR 0 12
7874: PUSH
7875: LD_INT 2
7877: PLUS
7878: GREATER
7879: OR
7880: PUSH
7881: LD_VAR 0 8
7885: PUSH
7886: LD_INT 2
7888: ARRAY
7889: PUSH
7890: LD_VAR 0 12
7894: PUSH
7895: LD_INT 2
7897: MINUS
7898: LESS
7899: OR
7900: PUSH
7901: LD_VAR 0 8
7905: PUSH
7906: LD_INT 3
7908: ARRAY
7909: PUSH
7910: LD_INT 0
7912: PUSH
7913: LD_INT 8
7915: PUSH
7916: LD_INT 9
7918: PUSH
7919: LD_INT 10
7921: PUSH
7922: LD_INT 11
7924: PUSH
7925: LD_INT 12
7927: PUSH
7928: LD_INT 13
7930: PUSH
7931: LD_INT 16
7933: PUSH
7934: LD_INT 17
7936: PUSH
7937: LD_INT 18
7939: PUSH
7940: LD_INT 19
7942: PUSH
7943: LD_INT 20
7945: PUSH
7946: LD_INT 21
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: IN
7964: NOT
7965: OR
7966: PUSH
7967: LD_VAR 0 8
7971: PUSH
7972: LD_INT 4
7974: ARRAY
7975: OR
7976: PUSH
7977: LD_VAR 0 8
7981: PUSH
7982: LD_INT 5
7984: ARRAY
7985: NOT
7986: OR
7987: PUSH
7988: LD_VAR 0 8
7992: PUSH
7993: LD_INT 6
7995: ARRAY
7996: PUSH
7997: LD_INT 1
7999: PUSH
8000: LD_INT 2
8002: PUSH
8003: LD_INT 7
8005: PUSH
8006: LD_INT 9
8008: PUSH
8009: LD_INT 10
8011: PUSH
8012: LD_INT 11
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: IN
8023: NOT
8024: OR
8025: PUSH
8026: LD_VAR 0 11
8030: PUSH
8031: LD_VAR 0 7
8035: ARRAY
8036: PUSH
8037: LD_INT 1
8039: ARRAY
8040: PPUSH
8041: LD_VAR 0 11
8045: PUSH
8046: LD_VAR 0 7
8050: ARRAY
8051: PUSH
8052: LD_INT 2
8054: ARRAY
8055: PPUSH
8056: CALL_OW 428
8060: PUSH
8061: LD_INT 0
8063: GREATER
8064: OR
8065: PUSH
8066: LD_VAR 0 11
8070: PUSH
8071: LD_VAR 0 7
8075: ARRAY
8076: PUSH
8077: LD_INT 1
8079: ARRAY
8080: PPUSH
8081: LD_VAR 0 11
8085: PUSH
8086: LD_VAR 0 7
8090: ARRAY
8091: PUSH
8092: LD_INT 2
8094: ARRAY
8095: PPUSH
8096: CALL_OW 351
8100: OR
8101: IFFALSE 8115
// begin result := false ;
8103: LD_ADDR_VAR 0 6
8107: PUSH
8108: LD_INT 0
8110: ST_TO_ADDR
// exit ;
8111: POP
8112: POP
8113: GO 8160
// end ; end ;
8115: GO 7770
8117: POP
8118: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL_OW 255
8128: PPUSH
8129: LD_VAR 0 3
8133: PPUSH
8134: LD_VAR 0 4
8138: PPUSH
8139: LD_INT 20
8141: PPUSH
8142: CALL 2439 0 4
8146: PUSH
8147: LD_INT 4
8149: ARRAY
8150: IFFALSE 8160
// result := false ;
8152: LD_ADDR_VAR 0 6
8156: PUSH
8157: LD_INT 0
8159: ST_TO_ADDR
// end ;
8160: LD_VAR 0 6
8164: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
8165: LD_INT 0
8167: PPUSH
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
8179: PPUSH
8180: PPUSH
8181: PPUSH
8182: PPUSH
8183: PPUSH
8184: PPUSH
8185: PPUSH
8186: PPUSH
8187: PPUSH
8188: PPUSH
8189: PPUSH
8190: PPUSH
8191: PPUSH
8192: PPUSH
8193: PPUSH
8194: PPUSH
8195: PPUSH
8196: PPUSH
8197: PPUSH
8198: PPUSH
8199: PPUSH
8200: PPUSH
8201: PPUSH
8202: PPUSH
8203: PPUSH
8204: PPUSH
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
8209: PPUSH
8210: PPUSH
8211: PPUSH
8212: PPUSH
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
8217: PPUSH
8218: PPUSH
8219: PPUSH
8220: PPUSH
8221: PPUSH
8222: PPUSH
8223: PPUSH
8224: PPUSH
// result = [ ] ;
8225: LD_ADDR_VAR 0 7
8229: PUSH
8230: EMPTY
8231: ST_TO_ADDR
// temp_list = [ ] ;
8232: LD_ADDR_VAR 0 9
8236: PUSH
8237: EMPTY
8238: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
8239: LD_VAR 0 4
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 1
8249: PUSH
8250: LD_INT 2
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: LD_INT 4
8258: PUSH
8259: LD_INT 5
8261: PUSH
8262: EMPTY
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: IN
8270: NOT
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: LD_INT 0
8279: PUSH
8280: LD_INT 1
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: IN
8287: PUSH
8288: LD_VAR 0 5
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: LD_INT 2
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: IN
8307: NOT
8308: AND
8309: OR
8310: IFFALSE 8314
// exit ;
8312: GO 26699
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
8314: LD_VAR 0 1
8318: PUSH
8319: LD_INT 6
8321: PUSH
8322: LD_INT 7
8324: PUSH
8325: LD_INT 8
8327: PUSH
8328: LD_INT 13
8330: PUSH
8331: LD_INT 12
8333: PUSH
8334: LD_INT 15
8336: PUSH
8337: LD_INT 11
8339: PUSH
8340: LD_INT 14
8342: PUSH
8343: LD_INT 10
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: IN
8357: IFFALSE 8367
// btype = b_lab ;
8359: LD_ADDR_VAR 0 1
8363: PUSH
8364: LD_INT 6
8366: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
8367: LD_VAR 0 6
8371: PUSH
8372: LD_INT 0
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 2
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: IN
8386: NOT
8387: PUSH
8388: LD_VAR 0 1
8392: PUSH
8393: LD_INT 0
8395: PUSH
8396: LD_INT 1
8398: PUSH
8399: LD_INT 2
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: LD_INT 6
8407: PUSH
8408: LD_INT 36
8410: PUSH
8411: LD_INT 4
8413: PUSH
8414: LD_INT 5
8416: PUSH
8417: LD_INT 31
8419: PUSH
8420: LD_INT 32
8422: PUSH
8423: LD_INT 33
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: LIST
8438: IN
8439: NOT
8440: PUSH
8441: LD_VAR 0 6
8445: PUSH
8446: LD_INT 1
8448: EQUAL
8449: AND
8450: OR
8451: PUSH
8452: LD_VAR 0 1
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 3
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: IN
8467: NOT
8468: PUSH
8469: LD_VAR 0 6
8473: PUSH
8474: LD_INT 2
8476: EQUAL
8477: AND
8478: OR
8479: IFFALSE 8489
// mode = 0 ;
8481: LD_ADDR_VAR 0 6
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// case mode of 0 :
8489: LD_VAR 0 6
8493: PUSH
8494: LD_INT 0
8496: DOUBLE
8497: EQUAL
8498: IFTRUE 8502
8500: GO 19955
8502: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
8503: LD_ADDR_VAR 0 11
8507: PUSH
8508: LD_INT 0
8510: PUSH
8511: LD_INT 0
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 0
8520: PUSH
8521: LD_INT 1
8523: NEG
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 1
8531: PUSH
8532: LD_INT 0
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_INT 1
8541: PUSH
8542: LD_INT 1
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 0
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 1
8561: NEG
8562: PUSH
8563: LD_INT 0
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PUSH
8570: LD_INT 1
8572: NEG
8573: PUSH
8574: LD_INT 1
8576: NEG
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 1
8584: NEG
8585: PUSH
8586: LD_INT 2
8588: NEG
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 0
8596: PUSH
8597: LD_INT 2
8599: NEG
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 1
8607: PUSH
8608: LD_INT 1
8610: NEG
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 1
8618: PUSH
8619: LD_INT 2
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 0
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 1
8638: NEG
8639: PUSH
8640: LD_INT 1
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: LD_INT 3
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 0
8659: PUSH
8660: LD_INT 3
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 1
8669: NEG
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
8696: LD_ADDR_VAR 0 12
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: LD_INT 0
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 0
8713: PUSH
8714: LD_INT 1
8716: NEG
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 1
8724: PUSH
8725: LD_INT 0
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: LD_INT 1
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: PUSH
8742: LD_INT 0
8744: PUSH
8745: LD_INT 1
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 1
8754: NEG
8755: PUSH
8756: LD_INT 0
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 1
8765: NEG
8766: PUSH
8767: LD_INT 1
8769: NEG
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 1
8777: PUSH
8778: LD_INT 1
8780: NEG
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 2
8788: PUSH
8789: LD_INT 0
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 1
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 1
8808: NEG
8809: PUSH
8810: LD_INT 1
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 2
8819: NEG
8820: PUSH
8821: LD_INT 0
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: LD_INT 2
8830: NEG
8831: PUSH
8832: LD_INT 1
8834: NEG
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 2
8842: NEG
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: PUSH
8851: LD_INT 3
8853: NEG
8854: PUSH
8855: LD_INT 0
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 3
8864: NEG
8865: PUSH
8866: LD_INT 1
8868: NEG
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
8892: LD_ADDR_VAR 0 13
8896: PUSH
8897: LD_INT 0
8899: PUSH
8900: LD_INT 0
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 0
8909: PUSH
8910: LD_INT 1
8912: NEG
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 1
8920: PUSH
8921: LD_INT 0
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 1
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: PUSH
8938: LD_INT 0
8940: PUSH
8941: LD_INT 1
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 1
8950: NEG
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 1
8961: NEG
8962: PUSH
8963: LD_INT 1
8965: NEG
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 1
8973: NEG
8974: PUSH
8975: LD_INT 2
8977: NEG
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 2
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: EMPTY
9000: LIST
9001: LIST
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: LD_INT 2
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 2
9015: NEG
9016: PUSH
9017: LD_INT 1
9019: NEG
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 2
9027: NEG
9028: PUSH
9029: LD_INT 2
9031: NEG
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 2
9039: NEG
9040: PUSH
9041: LD_INT 3
9043: NEG
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 3
9051: NEG
9052: PUSH
9053: LD_INT 2
9055: NEG
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 3
9063: NEG
9064: PUSH
9065: LD_INT 3
9067: NEG
9068: PUSH
9069: EMPTY
9070: LIST
9071: LIST
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
9091: LD_ADDR_VAR 0 14
9095: PUSH
9096: LD_INT 0
9098: PUSH
9099: LD_INT 0
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 0
9108: PUSH
9109: LD_INT 1
9111: NEG
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PUSH
9117: LD_INT 1
9119: PUSH
9120: LD_INT 0
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: PUSH
9127: LD_INT 1
9129: PUSH
9130: LD_INT 1
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 0
9139: PUSH
9140: LD_INT 1
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: PUSH
9147: LD_INT 1
9149: NEG
9150: PUSH
9151: LD_INT 0
9153: PUSH
9154: EMPTY
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 1
9160: NEG
9161: PUSH
9162: LD_INT 1
9164: NEG
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 1
9172: NEG
9173: PUSH
9174: LD_INT 2
9176: NEG
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 0
9184: PUSH
9185: LD_INT 2
9187: NEG
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 1
9195: PUSH
9196: LD_INT 1
9198: NEG
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: LD_INT 2
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 0
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 1
9226: NEG
9227: PUSH
9228: LD_INT 1
9230: PUSH
9231: EMPTY
9232: LIST
9233: LIST
9234: PUSH
9235: LD_INT 1
9237: NEG
9238: PUSH
9239: LD_INT 3
9241: NEG
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 0
9249: PUSH
9250: LD_INT 3
9252: NEG
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 1
9260: PUSH
9261: LD_INT 2
9263: NEG
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
9287: LD_ADDR_VAR 0 15
9291: PUSH
9292: LD_INT 0
9294: PUSH
9295: LD_INT 0
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 0
9304: PUSH
9305: LD_INT 1
9307: NEG
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: LD_INT 0
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: LD_INT 1
9325: PUSH
9326: LD_INT 1
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 0
9335: PUSH
9336: LD_INT 1
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 1
9345: NEG
9346: PUSH
9347: LD_INT 0
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 1
9356: NEG
9357: PUSH
9358: LD_INT 1
9360: NEG
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 1
9368: PUSH
9369: LD_INT 1
9371: NEG
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 2
9379: PUSH
9380: LD_INT 0
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 2
9389: PUSH
9390: LD_INT 1
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 1
9399: NEG
9400: PUSH
9401: LD_INT 1
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 2
9410: NEG
9411: PUSH
9412: LD_INT 0
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 2
9421: NEG
9422: PUSH
9423: LD_INT 1
9425: NEG
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 2
9433: PUSH
9434: LD_INT 1
9436: NEG
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: PUSH
9442: LD_INT 3
9444: PUSH
9445: LD_INT 0
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 1
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
9480: LD_ADDR_VAR 0 16
9484: PUSH
9485: LD_INT 0
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 0
9497: PUSH
9498: LD_INT 1
9500: NEG
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 1
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 1
9518: PUSH
9519: LD_INT 1
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 0
9528: PUSH
9529: LD_INT 1
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 1
9538: NEG
9539: PUSH
9540: LD_INT 0
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 1
9549: NEG
9550: PUSH
9551: LD_INT 1
9553: NEG
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 1
9561: NEG
9562: PUSH
9563: LD_INT 2
9565: NEG
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: PUSH
9571: LD_INT 2
9573: PUSH
9574: LD_INT 1
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: LD_INT 2
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 1
9593: PUSH
9594: LD_INT 2
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 2
9603: NEG
9604: PUSH
9605: LD_INT 1
9607: NEG
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 2
9615: NEG
9616: PUSH
9617: LD_INT 2
9619: NEG
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: LD_INT 3
9627: PUSH
9628: LD_INT 2
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: PUSH
9635: LD_INT 3
9637: PUSH
9638: LD_INT 3
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: LD_INT 3
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: EMPTY
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9673: LD_ADDR_VAR 0 17
9677: PUSH
9678: LD_INT 0
9680: PUSH
9681: LD_INT 0
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: LD_INT 0
9690: PUSH
9691: LD_INT 1
9693: NEG
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: LD_INT 0
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 1
9711: PUSH
9712: LD_INT 1
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 0
9721: PUSH
9722: LD_INT 1
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 1
9731: NEG
9732: PUSH
9733: LD_INT 0
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PUSH
9740: LD_INT 1
9742: NEG
9743: PUSH
9744: LD_INT 1
9746: NEG
9747: PUSH
9748: EMPTY
9749: LIST
9750: LIST
9751: PUSH
9752: LD_INT 1
9754: NEG
9755: PUSH
9756: LD_INT 2
9758: NEG
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 0
9766: PUSH
9767: LD_INT 2
9769: NEG
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: LD_INT 1
9780: NEG
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: LD_INT 2
9788: PUSH
9789: LD_INT 0
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 2
9798: PUSH
9799: LD_INT 1
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: LD_INT 2
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 0
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 1
9838: NEG
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 2
9849: NEG
9850: PUSH
9851: LD_INT 0
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 2
9860: NEG
9861: PUSH
9862: LD_INT 1
9864: NEG
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 2
9872: NEG
9873: PUSH
9874: LD_INT 2
9876: NEG
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9903: LD_ADDR_VAR 0 18
9907: PUSH
9908: LD_INT 0
9910: PUSH
9911: LD_INT 0
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 0
9920: PUSH
9921: LD_INT 1
9923: NEG
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PUSH
9929: LD_INT 1
9931: PUSH
9932: LD_INT 0
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 1
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 1
9961: NEG
9962: PUSH
9963: LD_INT 0
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 1
9972: NEG
9973: PUSH
9974: LD_INT 1
9976: NEG
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 1
9984: NEG
9985: PUSH
9986: LD_INT 2
9988: NEG
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 0
9996: PUSH
9997: LD_INT 2
9999: NEG
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: LD_INT 1
10010: NEG
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 0
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PUSH
10026: LD_INT 2
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: LD_INT 2
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 0
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 1
10068: NEG
10069: PUSH
10070: LD_INT 1
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 2
10079: NEG
10080: PUSH
10081: LD_INT 0
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 2
10090: NEG
10091: PUSH
10092: LD_INT 1
10094: NEG
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 2
10102: NEG
10103: PUSH
10104: LD_INT 2
10106: NEG
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10133: LD_ADDR_VAR 0 19
10137: PUSH
10138: LD_INT 0
10140: PUSH
10141: LD_INT 0
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 0
10150: PUSH
10151: LD_INT 1
10153: NEG
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: LD_INT 0
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 1
10171: PUSH
10172: LD_INT 1
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 0
10181: PUSH
10182: LD_INT 1
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 1
10191: NEG
10192: PUSH
10193: LD_INT 0
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 1
10202: NEG
10203: PUSH
10204: LD_INT 1
10206: NEG
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 1
10214: NEG
10215: PUSH
10216: LD_INT 2
10218: NEG
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 0
10226: PUSH
10227: LD_INT 2
10229: NEG
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: LD_INT 1
10240: NEG
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 2
10248: PUSH
10249: LD_INT 0
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 1
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 2
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 1
10278: PUSH
10279: LD_INT 2
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 0
10288: PUSH
10289: LD_INT 2
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 1
10298: NEG
10299: PUSH
10300: LD_INT 1
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 2
10309: NEG
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 2
10320: NEG
10321: PUSH
10322: LD_INT 1
10324: NEG
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 2
10332: NEG
10333: PUSH
10334: LD_INT 2
10336: NEG
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10363: LD_ADDR_VAR 0 20
10367: PUSH
10368: LD_INT 0
10370: PUSH
10371: LD_INT 0
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 0
10380: PUSH
10381: LD_INT 1
10383: NEG
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: LD_INT 0
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 1
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 0
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 1
10421: NEG
10422: PUSH
10423: LD_INT 0
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 1
10432: NEG
10433: PUSH
10434: LD_INT 1
10436: NEG
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 1
10444: NEG
10445: PUSH
10446: LD_INT 2
10448: NEG
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 0
10456: PUSH
10457: LD_INT 2
10459: NEG
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 1
10467: PUSH
10468: LD_INT 1
10470: NEG
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 2
10478: PUSH
10479: LD_INT 0
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 1
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: LD_INT 2
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: LD_INT 0
10518: PUSH
10519: LD_INT 2
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 1
10528: NEG
10529: PUSH
10530: LD_INT 1
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 2
10539: NEG
10540: PUSH
10541: LD_INT 0
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: LD_INT 2
10550: NEG
10551: PUSH
10552: LD_INT 1
10554: NEG
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: LD_INT 2
10562: NEG
10563: PUSH
10564: LD_INT 2
10566: NEG
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10593: LD_ADDR_VAR 0 21
10597: PUSH
10598: LD_INT 0
10600: PUSH
10601: LD_INT 0
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 0
10610: PUSH
10611: LD_INT 1
10613: NEG
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 1
10621: PUSH
10622: LD_INT 0
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 0
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 1
10651: NEG
10652: PUSH
10653: LD_INT 0
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 1
10662: NEG
10663: PUSH
10664: LD_INT 1
10666: NEG
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 1
10674: NEG
10675: PUSH
10676: LD_INT 2
10678: NEG
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 0
10686: PUSH
10687: LD_INT 2
10689: NEG
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 1
10697: PUSH
10698: LD_INT 1
10700: NEG
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 2
10718: PUSH
10719: LD_INT 1
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PUSH
10726: LD_INT 2
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 1
10738: PUSH
10739: LD_INT 2
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: LD_INT 2
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 1
10758: NEG
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: NEG
10770: PUSH
10771: LD_INT 0
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 2
10780: NEG
10781: PUSH
10782: LD_INT 1
10784: NEG
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 2
10792: NEG
10793: PUSH
10794: LD_INT 2
10796: NEG
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10823: LD_ADDR_VAR 0 22
10827: PUSH
10828: LD_INT 0
10830: PUSH
10831: LD_INT 0
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 0
10840: PUSH
10841: LD_INT 1
10843: NEG
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 1
10851: PUSH
10852: LD_INT 0
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 1
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 0
10871: PUSH
10872: LD_INT 1
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 1
10881: NEG
10882: PUSH
10883: LD_INT 0
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 1
10892: NEG
10893: PUSH
10894: LD_INT 1
10896: NEG
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 1
10904: NEG
10905: PUSH
10906: LD_INT 2
10908: NEG
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: PUSH
10914: LD_INT 0
10916: PUSH
10917: LD_INT 2
10919: NEG
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 1
10927: PUSH
10928: LD_INT 1
10930: NEG
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: LD_INT 0
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: LD_INT 2
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: LD_INT 2
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 0
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 1
10988: NEG
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 2
10999: NEG
11000: PUSH
11001: LD_INT 0
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 2
11010: NEG
11011: PUSH
11012: LD_INT 1
11014: NEG
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 2
11022: NEG
11023: PUSH
11024: LD_INT 2
11026: NEG
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
11053: LD_ADDR_VAR 0 23
11057: PUSH
11058: LD_INT 0
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 0
11070: PUSH
11071: LD_INT 1
11073: NEG
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 0
11101: PUSH
11102: LD_INT 1
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 1
11111: NEG
11112: PUSH
11113: LD_INT 0
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 1
11122: NEG
11123: PUSH
11124: LD_INT 1
11126: NEG
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 1
11134: NEG
11135: PUSH
11136: LD_INT 2
11138: NEG
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: LD_INT 2
11149: NEG
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 1
11157: PUSH
11158: LD_INT 1
11160: NEG
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 0
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: LD_INT 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 1
11218: NEG
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 2
11229: NEG
11230: PUSH
11231: LD_INT 0
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 2
11240: NEG
11241: PUSH
11242: LD_INT 1
11244: NEG
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 2
11252: NEG
11253: PUSH
11254: LD_INT 2
11256: NEG
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: LD_INT 2
11264: NEG
11265: PUSH
11266: LD_INT 3
11268: NEG
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 1
11276: NEG
11277: PUSH
11278: LD_INT 3
11280: NEG
11281: PUSH
11282: EMPTY
11283: LIST
11284: LIST
11285: PUSH
11286: LD_INT 1
11288: PUSH
11289: LD_INT 2
11291: NEG
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 2
11299: PUSH
11300: LD_INT 1
11302: NEG
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
11333: LD_ADDR_VAR 0 24
11337: PUSH
11338: LD_INT 0
11340: PUSH
11341: LD_INT 0
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 0
11350: PUSH
11351: LD_INT 1
11353: NEG
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 1
11361: PUSH
11362: LD_INT 0
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: PUSH
11369: LD_INT 1
11371: PUSH
11372: LD_INT 1
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PUSH
11379: LD_INT 0
11381: PUSH
11382: LD_INT 1
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 1
11391: NEG
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 1
11402: NEG
11403: PUSH
11404: LD_INT 1
11406: NEG
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 1
11414: NEG
11415: PUSH
11416: LD_INT 2
11418: NEG
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 0
11426: PUSH
11427: LD_INT 2
11429: NEG
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 1
11437: PUSH
11438: LD_INT 1
11440: NEG
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 2
11448: PUSH
11449: LD_INT 0
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 2
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 1
11478: PUSH
11479: LD_INT 2
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 1
11498: NEG
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 2
11509: NEG
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 2
11520: NEG
11521: PUSH
11522: LD_INT 1
11524: NEG
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 2
11532: NEG
11533: PUSH
11534: LD_INT 2
11536: NEG
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 1
11544: PUSH
11545: LD_INT 2
11547: NEG
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PUSH
11553: LD_INT 2
11555: PUSH
11556: LD_INT 1
11558: NEG
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 3
11566: PUSH
11567: LD_INT 1
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 3
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
11609: LD_ADDR_VAR 0 25
11613: PUSH
11614: LD_INT 0
11616: PUSH
11617: LD_INT 0
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: LD_INT 1
11629: NEG
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: LD_INT 0
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 0
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 1
11667: NEG
11668: PUSH
11669: LD_INT 0
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 1
11678: NEG
11679: PUSH
11680: LD_INT 1
11682: NEG
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: LD_INT 1
11690: NEG
11691: PUSH
11692: LD_INT 2
11694: NEG
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 0
11702: PUSH
11703: LD_INT 2
11705: NEG
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: LD_INT 1
11716: NEG
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: PUSH
11722: LD_INT 2
11724: PUSH
11725: LD_INT 0
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 2
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 1
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 0
11764: PUSH
11765: LD_INT 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 1
11774: NEG
11775: PUSH
11776: LD_INT 1
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 2
11785: NEG
11786: PUSH
11787: LD_INT 0
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 2
11796: NEG
11797: PUSH
11798: LD_INT 1
11800: NEG
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: LD_INT 2
11808: NEG
11809: PUSH
11810: LD_INT 2
11812: NEG
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 3
11820: PUSH
11821: LD_INT 1
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 3
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 2
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 1
11850: PUSH
11851: LD_INT 3
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
11883: LD_ADDR_VAR 0 26
11887: PUSH
11888: LD_INT 0
11890: PUSH
11891: LD_INT 0
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 0
11900: PUSH
11901: LD_INT 1
11903: NEG
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: LD_INT 0
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 1
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 0
11931: PUSH
11932: LD_INT 1
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 1
11941: NEG
11942: PUSH
11943: LD_INT 0
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 1
11952: NEG
11953: PUSH
11954: LD_INT 1
11956: NEG
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 1
11964: NEG
11965: PUSH
11966: LD_INT 2
11968: NEG
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 0
11976: PUSH
11977: LD_INT 2
11979: NEG
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 1
11987: PUSH
11988: LD_INT 1
11990: NEG
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 0
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 2
12008: PUSH
12009: LD_INT 1
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 2
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 0
12038: PUSH
12039: LD_INT 2
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 1
12048: NEG
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 2
12059: NEG
12060: PUSH
12061: LD_INT 0
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 2
12070: NEG
12071: PUSH
12072: LD_INT 1
12074: NEG
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 2
12082: NEG
12083: PUSH
12084: LD_INT 2
12086: NEG
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 1
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 1
12114: NEG
12115: PUSH
12116: LD_INT 2
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 2
12125: NEG
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
12159: LD_ADDR_VAR 0 27
12163: PUSH
12164: LD_INT 0
12166: PUSH
12167: LD_INT 0
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 0
12176: PUSH
12177: LD_INT 1
12179: NEG
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 1
12187: PUSH
12188: LD_INT 0
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 0
12207: PUSH
12208: LD_INT 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 1
12217: NEG
12218: PUSH
12219: LD_INT 0
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 1
12228: NEG
12229: PUSH
12230: LD_INT 1
12232: NEG
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 1
12240: NEG
12241: PUSH
12242: LD_INT 2
12244: NEG
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 0
12252: PUSH
12253: LD_INT 2
12255: NEG
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: LD_INT 1
12266: NEG
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: LD_INT 0
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 2
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: LD_INT 2
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 1
12304: PUSH
12305: LD_INT 2
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 1
12324: NEG
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 2
12335: NEG
12336: PUSH
12337: LD_INT 0
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: PUSH
12344: LD_INT 2
12346: NEG
12347: PUSH
12348: LD_INT 1
12350: NEG
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 2
12358: NEG
12359: PUSH
12360: LD_INT 2
12362: NEG
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 1
12370: NEG
12371: PUSH
12372: LD_INT 2
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 2
12381: NEG
12382: PUSH
12383: LD_INT 1
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: LD_INT 3
12392: NEG
12393: PUSH
12394: LD_INT 1
12396: NEG
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 3
12404: NEG
12405: PUSH
12406: LD_INT 2
12408: NEG
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
12439: LD_ADDR_VAR 0 28
12443: PUSH
12444: LD_INT 0
12446: PUSH
12447: LD_INT 0
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 0
12456: PUSH
12457: LD_INT 1
12459: NEG
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 1
12467: PUSH
12468: LD_INT 0
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 1
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 0
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 1
12497: NEG
12498: PUSH
12499: LD_INT 0
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 1
12508: NEG
12509: PUSH
12510: LD_INT 1
12512: NEG
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 1
12520: NEG
12521: PUSH
12522: LD_INT 2
12524: NEG
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 0
12532: PUSH
12533: LD_INT 2
12535: NEG
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: LD_INT 1
12546: NEG
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 0
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 1
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: LD_INT 2
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 1
12584: PUSH
12585: LD_INT 2
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 0
12594: PUSH
12595: LD_INT 2
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 1
12604: NEG
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 2
12615: NEG
12616: PUSH
12617: LD_INT 0
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 2
12626: NEG
12627: PUSH
12628: LD_INT 1
12630: NEG
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 2
12638: NEG
12639: PUSH
12640: LD_INT 2
12642: NEG
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 2
12650: NEG
12651: PUSH
12652: LD_INT 3
12654: NEG
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 1
12662: NEG
12663: PUSH
12664: LD_INT 3
12666: NEG
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 3
12674: NEG
12675: PUSH
12676: LD_INT 1
12678: NEG
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 3
12686: NEG
12687: PUSH
12688: LD_INT 2
12690: NEG
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
12721: LD_ADDR_VAR 0 29
12725: PUSH
12726: LD_INT 0
12728: PUSH
12729: LD_INT 0
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: LD_INT 0
12738: PUSH
12739: LD_INT 1
12741: NEG
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: LD_INT 0
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: LD_INT 1
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PUSH
12767: LD_INT 0
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 1
12779: NEG
12780: PUSH
12781: LD_INT 0
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 1
12790: NEG
12791: PUSH
12792: LD_INT 1
12794: NEG
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 1
12802: NEG
12803: PUSH
12804: LD_INT 2
12806: NEG
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 0
12814: PUSH
12815: LD_INT 2
12817: NEG
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 1
12825: PUSH
12826: LD_INT 1
12828: NEG
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 2
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 2
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 1
12856: PUSH
12857: LD_INT 2
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 0
12866: PUSH
12867: LD_INT 2
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 1
12876: NEG
12877: PUSH
12878: LD_INT 1
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 2
12887: NEG
12888: PUSH
12889: LD_INT 1
12891: NEG
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 2
12899: NEG
12900: PUSH
12901: LD_INT 2
12903: NEG
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: LD_INT 2
12911: NEG
12912: PUSH
12913: LD_INT 3
12915: NEG
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: LD_INT 1
12926: NEG
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 3
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: LD_INT 3
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 1
12954: NEG
12955: PUSH
12956: LD_INT 2
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 3
12965: NEG
12966: PUSH
12967: LD_INT 2
12969: NEG
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
13000: LD_ADDR_VAR 0 30
13004: PUSH
13005: LD_INT 0
13007: PUSH
13008: LD_INT 0
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 0
13017: PUSH
13018: LD_INT 1
13020: NEG
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: LD_INT 0
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 1
13038: PUSH
13039: LD_INT 1
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 0
13048: PUSH
13049: LD_INT 1
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: LD_INT 1
13058: NEG
13059: PUSH
13060: LD_INT 0
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 1
13069: NEG
13070: PUSH
13071: LD_INT 1
13073: NEG
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 1
13081: NEG
13082: PUSH
13083: LD_INT 2
13085: NEG
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 0
13093: PUSH
13094: LD_INT 2
13096: NEG
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 1
13104: PUSH
13105: LD_INT 1
13107: NEG
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 2
13115: PUSH
13116: LD_INT 0
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: LD_INT 2
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 1
13145: PUSH
13146: LD_INT 2
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 1
13155: NEG
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 2
13166: NEG
13167: PUSH
13168: LD_INT 0
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 2
13177: NEG
13178: PUSH
13179: LD_INT 1
13181: NEG
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 1
13189: NEG
13190: PUSH
13191: LD_INT 3
13193: NEG
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 1
13201: PUSH
13202: LD_INT 2
13204: NEG
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 3
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 2
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 2
13232: NEG
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 3
13243: NEG
13244: PUSH
13245: LD_INT 1
13247: NEG
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13278: LD_ADDR_VAR 0 31
13282: PUSH
13283: LD_INT 0
13285: PUSH
13286: LD_INT 0
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 0
13295: PUSH
13296: LD_INT 1
13298: NEG
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: LD_INT 0
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: LD_INT 1
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 0
13326: PUSH
13327: LD_INT 1
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: LD_INT 1
13336: NEG
13337: PUSH
13338: LD_INT 0
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 1
13347: NEG
13348: PUSH
13349: LD_INT 1
13351: NEG
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 1
13359: NEG
13360: PUSH
13361: LD_INT 2
13363: NEG
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 1
13371: PUSH
13372: LD_INT 1
13374: NEG
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 2
13382: PUSH
13383: LD_INT 0
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 1
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 1
13412: PUSH
13413: LD_INT 2
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 0
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 1
13432: NEG
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: NEG
13444: PUSH
13445: LD_INT 1
13447: NEG
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 2
13455: NEG
13456: PUSH
13457: LD_INT 2
13459: NEG
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 2
13467: NEG
13468: PUSH
13469: LD_INT 3
13471: NEG
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 2
13479: PUSH
13480: LD_INT 1
13482: NEG
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 3
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: LD_INT 3
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 1
13510: NEG
13511: PUSH
13512: LD_INT 2
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 3
13521: NEG
13522: PUSH
13523: LD_INT 2
13525: NEG
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
13556: LD_ADDR_VAR 0 32
13560: PUSH
13561: LD_INT 0
13563: PUSH
13564: LD_INT 0
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 0
13573: PUSH
13574: LD_INT 1
13576: NEG
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 0
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 1
13614: NEG
13615: PUSH
13616: LD_INT 0
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 1
13625: NEG
13626: PUSH
13627: LD_INT 1
13629: NEG
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 1
13637: NEG
13638: PUSH
13639: LD_INT 2
13641: NEG
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 0
13649: PUSH
13650: LD_INT 2
13652: NEG
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: LD_INT 1
13663: NEG
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 2
13671: PUSH
13672: LD_INT 1
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: LD_INT 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 0
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 1
13711: NEG
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 2
13722: NEG
13723: PUSH
13724: LD_INT 0
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 2
13733: NEG
13734: PUSH
13735: LD_INT 1
13737: NEG
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 1
13745: NEG
13746: PUSH
13747: LD_INT 3
13749: NEG
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 1
13757: PUSH
13758: LD_INT 2
13760: NEG
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 3
13768: PUSH
13769: LD_INT 2
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 3
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 2
13788: NEG
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 3
13799: NEG
13800: PUSH
13801: LD_INT 1
13803: NEG
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13834: LD_ADDR_VAR 0 33
13838: PUSH
13839: LD_INT 0
13841: PUSH
13842: LD_INT 0
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 0
13851: PUSH
13852: LD_INT 1
13854: NEG
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: LD_INT 0
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: LD_INT 1
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 0
13882: PUSH
13883: LD_INT 1
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 1
13892: NEG
13893: PUSH
13894: LD_INT 0
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 1
13903: NEG
13904: PUSH
13905: LD_INT 1
13907: NEG
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 1
13915: NEG
13916: PUSH
13917: LD_INT 2
13919: NEG
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 1
13927: PUSH
13928: LD_INT 1
13930: NEG
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: LD_INT 0
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 1
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 1
13958: PUSH
13959: LD_INT 2
13961: PUSH
13962: EMPTY
13963: LIST
13964: LIST
13965: PUSH
13966: LD_INT 0
13968: PUSH
13969: LD_INT 2
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 1
13978: NEG
13979: PUSH
13980: LD_INT 1
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 2
13989: NEG
13990: PUSH
13991: LD_INT 0
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 2
14000: NEG
14001: PUSH
14002: LD_INT 1
14004: NEG
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 2
14012: NEG
14013: PUSH
14014: LD_INT 2
14016: NEG
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 2
14024: NEG
14025: PUSH
14026: LD_INT 3
14028: NEG
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 2
14036: PUSH
14037: LD_INT 1
14039: NEG
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: LD_INT 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 1
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 1
14067: NEG
14068: PUSH
14069: LD_INT 2
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 3
14078: NEG
14079: PUSH
14080: LD_INT 2
14082: NEG
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14113: LD_ADDR_VAR 0 34
14117: PUSH
14118: LD_INT 0
14120: PUSH
14121: LD_INT 0
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: LD_INT 0
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 1
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 0
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 1
14171: NEG
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 1
14182: NEG
14183: PUSH
14184: LD_INT 1
14186: NEG
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: NEG
14195: PUSH
14196: LD_INT 2
14198: NEG
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 0
14206: PUSH
14207: LD_INT 2
14209: NEG
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: LD_INT 1
14220: NEG
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 2
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 2
14238: PUSH
14239: LD_INT 2
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 1
14248: PUSH
14249: LD_INT 2
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 1
14258: NEG
14259: PUSH
14260: LD_INT 1
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 2
14269: NEG
14270: PUSH
14271: LD_INT 0
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 2
14280: NEG
14281: PUSH
14282: LD_INT 1
14284: NEG
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: PUSH
14290: LD_INT 2
14292: NEG
14293: PUSH
14294: LD_INT 2
14296: NEG
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 1
14304: NEG
14305: PUSH
14306: LD_INT 3
14308: NEG
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 1
14316: PUSH
14317: LD_INT 2
14319: NEG
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 2
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 2
14347: NEG
14348: PUSH
14349: LD_INT 1
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 3
14358: NEG
14359: PUSH
14360: LD_INT 1
14362: NEG
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
14393: LD_ADDR_VAR 0 35
14397: PUSH
14398: LD_INT 0
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 0
14410: PUSH
14411: LD_INT 1
14413: NEG
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 1
14421: PUSH
14422: LD_INT 0
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: LD_INT 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 1
14451: NEG
14452: PUSH
14453: LD_INT 0
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 1
14462: NEG
14463: PUSH
14464: LD_INT 1
14466: NEG
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: LD_INT 1
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 2
14484: NEG
14485: PUSH
14486: LD_INT 1
14488: NEG
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: LIST
14504: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
14505: LD_ADDR_VAR 0 36
14509: PUSH
14510: LD_INT 0
14512: PUSH
14513: LD_INT 0
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 0
14522: PUSH
14523: LD_INT 1
14525: NEG
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: LD_INT 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 0
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 1
14563: NEG
14564: PUSH
14565: LD_INT 0
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 1
14574: NEG
14575: PUSH
14576: LD_INT 1
14578: NEG
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 1
14586: NEG
14587: PUSH
14588: LD_INT 2
14590: NEG
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 1
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
14617: LD_ADDR_VAR 0 37
14621: PUSH
14622: LD_INT 0
14624: PUSH
14625: LD_INT 0
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 0
14634: PUSH
14635: LD_INT 1
14637: NEG
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 1
14645: PUSH
14646: LD_INT 0
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 1
14655: PUSH
14656: LD_INT 1
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 0
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 1
14675: NEG
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 1
14686: NEG
14687: PUSH
14688: LD_INT 1
14690: NEG
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 1
14698: PUSH
14699: LD_INT 1
14701: NEG
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
14729: LD_ADDR_VAR 0 38
14733: PUSH
14734: LD_INT 0
14736: PUSH
14737: LD_INT 0
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 0
14746: PUSH
14747: LD_INT 1
14749: NEG
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 1
14757: PUSH
14758: LD_INT 0
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: LD_INT 1
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: LD_INT 0
14777: PUSH
14778: LD_INT 1
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: LD_INT 1
14787: NEG
14788: PUSH
14789: LD_INT 0
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 1
14798: NEG
14799: PUSH
14800: LD_INT 1
14802: NEG
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 1
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 2
14820: NEG
14821: PUSH
14822: LD_INT 1
14824: NEG
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
14841: LD_ADDR_VAR 0 39
14845: PUSH
14846: LD_INT 0
14848: PUSH
14849: LD_INT 0
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 0
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: LD_INT 0
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: LD_INT 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 0
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 1
14899: NEG
14900: PUSH
14901: LD_INT 0
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 1
14910: NEG
14911: PUSH
14912: LD_INT 1
14914: NEG
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: PUSH
14920: LD_INT 1
14922: NEG
14923: PUSH
14924: LD_INT 2
14926: NEG
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 1
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
14953: LD_ADDR_VAR 0 40
14957: PUSH
14958: LD_INT 0
14960: PUSH
14961: LD_INT 0
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: LD_INT 1
14973: NEG
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: LD_INT 0
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 1
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 0
15001: PUSH
15002: LD_INT 1
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 1
15011: NEG
15012: PUSH
15013: LD_INT 0
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 1
15022: NEG
15023: PUSH
15024: LD_INT 1
15026: NEG
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 1
15034: PUSH
15035: LD_INT 1
15037: NEG
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: NEG
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15065: LD_ADDR_VAR 0 41
15069: PUSH
15070: LD_INT 0
15072: PUSH
15073: LD_INT 0
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: LD_INT 1
15085: NEG
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 1
15093: PUSH
15094: LD_INT 0
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 1
15103: PUSH
15104: LD_INT 1
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PUSH
15111: LD_INT 0
15113: PUSH
15114: LD_INT 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 1
15123: NEG
15124: PUSH
15125: LD_INT 0
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 1
15134: NEG
15135: PUSH
15136: LD_INT 1
15138: NEG
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 1
15146: NEG
15147: PUSH
15148: LD_INT 2
15150: NEG
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 1
15158: PUSH
15159: LD_INT 1
15161: NEG
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 2
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: LD_INT 2
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 1
15209: NEG
15210: PUSH
15211: LD_INT 1
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 2
15220: NEG
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 2
15231: NEG
15232: PUSH
15233: LD_INT 1
15235: NEG
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: LD_INT 2
15243: NEG
15244: PUSH
15245: LD_INT 2
15247: NEG
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 2
15255: NEG
15256: PUSH
15257: LD_INT 3
15259: NEG
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: LD_INT 1
15270: NEG
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 3
15288: PUSH
15289: LD_INT 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 3
15308: PUSH
15309: LD_INT 3
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: NEG
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 3
15339: NEG
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 3
15350: NEG
15351: PUSH
15352: LD_INT 1
15354: NEG
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 3
15362: NEG
15363: PUSH
15364: LD_INT 2
15366: NEG
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 3
15374: NEG
15375: PUSH
15376: LD_INT 3
15378: NEG
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15415: LD_ADDR_VAR 0 42
15419: PUSH
15420: LD_INT 0
15422: PUSH
15423: LD_INT 0
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 0
15432: PUSH
15433: LD_INT 1
15435: NEG
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 1
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 1
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 1
15473: NEG
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 1
15484: NEG
15485: PUSH
15486: LD_INT 1
15488: NEG
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 1
15496: NEG
15497: PUSH
15498: LD_INT 2
15500: NEG
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 0
15508: PUSH
15509: LD_INT 2
15511: NEG
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: LD_INT 2
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: LD_INT 2
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 1
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 0
15560: PUSH
15561: LD_INT 2
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 1
15570: NEG
15571: PUSH
15572: LD_INT 1
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 2
15581: NEG
15582: PUSH
15583: LD_INT 1
15585: NEG
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: PUSH
15591: LD_INT 2
15593: NEG
15594: PUSH
15595: LD_INT 2
15597: NEG
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 2
15605: NEG
15606: PUSH
15607: LD_INT 3
15609: NEG
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PUSH
15615: LD_INT 1
15617: NEG
15618: PUSH
15619: LD_INT 3
15621: NEG
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: LD_INT 3
15632: NEG
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 1
15640: PUSH
15641: LD_INT 2
15643: NEG
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 3
15651: PUSH
15652: LD_INT 2
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 3
15661: PUSH
15662: LD_INT 3
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 2
15671: PUSH
15672: LD_INT 3
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 1
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 1
15701: NEG
15702: PUSH
15703: LD_INT 2
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 3
15712: NEG
15713: PUSH
15714: LD_INT 2
15716: NEG
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 3
15724: NEG
15725: PUSH
15726: LD_INT 3
15728: NEG
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15765: LD_ADDR_VAR 0 43
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 0
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 0
15782: PUSH
15783: LD_INT 1
15785: NEG
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: LD_INT 0
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 1
15803: PUSH
15804: LD_INT 1
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 1
15823: NEG
15824: PUSH
15825: LD_INT 0
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: PUSH
15836: LD_INT 1
15838: NEG
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 1
15846: NEG
15847: PUSH
15848: LD_INT 2
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 0
15858: PUSH
15859: LD_INT 2
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 2
15880: PUSH
15881: LD_INT 0
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 2
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: LD_INT 1
15920: NEG
15921: PUSH
15922: LD_INT 1
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 2
15931: NEG
15932: PUSH
15933: LD_INT 0
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: NEG
15943: PUSH
15944: LD_INT 1
15946: NEG
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 1
15954: NEG
15955: PUSH
15956: LD_INT 3
15958: NEG
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: LD_INT 3
15969: NEG
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: LD_INT 2
15980: NEG
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 2
15988: PUSH
15989: LD_INT 1
15991: NEG
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 3
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 3
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: LD_INT 3
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 0
16029: PUSH
16030: LD_INT 3
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 1
16039: NEG
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: NEG
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 3
16061: NEG
16062: PUSH
16063: LD_INT 0
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 3
16072: NEG
16073: PUSH
16074: LD_INT 1
16076: NEG
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16113: LD_ADDR_VAR 0 44
16117: PUSH
16118: LD_INT 0
16120: PUSH
16121: LD_INT 0
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 0
16130: PUSH
16131: LD_INT 1
16133: NEG
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: LD_INT 0
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 0
16161: PUSH
16162: LD_INT 1
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 1
16171: NEG
16172: PUSH
16173: LD_INT 0
16175: PUSH
16176: EMPTY
16177: LIST
16178: LIST
16179: PUSH
16180: LD_INT 1
16182: NEG
16183: PUSH
16184: LD_INT 1
16186: NEG
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 1
16194: NEG
16195: PUSH
16196: LD_INT 2
16198: NEG
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 1
16206: PUSH
16207: LD_INT 1
16209: NEG
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: LD_INT 2
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: EMPTY
16222: LIST
16223: LIST
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: LD_INT 2
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 1
16247: PUSH
16248: LD_INT 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 1
16257: NEG
16258: PUSH
16259: LD_INT 1
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 2
16268: NEG
16269: PUSH
16270: LD_INT 0
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 2
16279: NEG
16280: PUSH
16281: LD_INT 1
16283: NEG
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: NEG
16292: PUSH
16293: LD_INT 2
16295: NEG
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 2
16303: NEG
16304: PUSH
16305: LD_INT 3
16307: NEG
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 2
16315: PUSH
16316: LD_INT 1
16318: NEG
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 3
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 3
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 3
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: LD_INT 3
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 2
16366: PUSH
16367: LD_INT 3
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 2
16376: NEG
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: LD_INT 3
16387: NEG
16388: PUSH
16389: LD_INT 0
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 3
16398: NEG
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 3
16410: NEG
16411: PUSH
16412: LD_INT 2
16414: NEG
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: LD_INT 3
16422: NEG
16423: PUSH
16424: LD_INT 3
16426: NEG
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16463: LD_ADDR_VAR 0 45
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: LD_INT 0
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 0
16480: PUSH
16481: LD_INT 1
16483: NEG
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: LD_INT 0
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 1
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 1
16521: NEG
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 1
16532: NEG
16533: PUSH
16534: LD_INT 1
16536: NEG
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 1
16544: NEG
16545: PUSH
16546: LD_INT 2
16548: NEG
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 0
16556: PUSH
16557: LD_INT 2
16559: NEG
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: LD_INT 1
16570: NEG
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: LD_INT 1
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 2
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 0
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 1
16618: NEG
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: NEG
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 2
16641: NEG
16642: PUSH
16643: LD_INT 2
16645: NEG
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 2
16653: NEG
16654: PUSH
16655: LD_INT 3
16657: NEG
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: LD_INT 1
16665: NEG
16666: PUSH
16667: LD_INT 3
16669: NEG
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: LD_INT 3
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: LD_INT 2
16691: NEG
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 3
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: LD_INT 3
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 2
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 0
16739: PUSH
16740: LD_INT 3
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: NEG
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 3
16760: NEG
16761: PUSH
16762: LD_INT 2
16764: NEG
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 3
16772: NEG
16773: PUSH
16774: LD_INT 3
16776: NEG
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16813: LD_ADDR_VAR 0 46
16817: PUSH
16818: LD_INT 0
16820: PUSH
16821: LD_INT 0
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: LD_INT 1
16833: NEG
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 1
16841: PUSH
16842: LD_INT 0
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 0
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 1
16871: NEG
16872: PUSH
16873: LD_INT 0
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: PUSH
16880: LD_INT 1
16882: NEG
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 1
16894: NEG
16895: PUSH
16896: LD_INT 2
16898: NEG
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: LD_INT 0
16906: PUSH
16907: LD_INT 2
16909: NEG
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: LD_INT 1
16920: NEG
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: LD_INT 2
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: LD_INT 2
16938: PUSH
16939: LD_INT 1
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: LD_INT 2
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 0
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 1
16968: NEG
16969: PUSH
16970: LD_INT 1
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 2
16979: NEG
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: NEG
16991: PUSH
16992: LD_INT 1
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 1
17002: NEG
17003: PUSH
17004: LD_INT 3
17006: NEG
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: LD_INT 0
17014: PUSH
17015: LD_INT 3
17017: NEG
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: NEG
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 1
17039: NEG
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: LD_INT 0
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 3
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 3
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 1
17087: NEG
17088: PUSH
17089: LD_INT 2
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 2
17098: NEG
17099: PUSH
17100: LD_INT 1
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 3
17109: NEG
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: LD_INT 3
17120: NEG
17121: PUSH
17122: LD_INT 1
17124: NEG
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17161: LD_ADDR_VAR 0 47
17165: PUSH
17166: LD_INT 0
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 0
17178: PUSH
17179: LD_INT 1
17181: NEG
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: LD_INT 0
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: LD_INT 1
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 0
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: LD_INT 0
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 1
17230: NEG
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PUSH
17244: LD_INT 2
17246: NEG
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: LD_INT 2
17257: NEG
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: PUSH
17263: LD_INT 1
17265: PUSH
17266: LD_INT 1
17268: NEG
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 2
17276: NEG
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PUSH
17286: LD_INT 2
17288: NEG
17289: PUSH
17290: LD_INT 2
17292: NEG
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
17312: LD_ADDR_VAR 0 48
17316: PUSH
17317: LD_INT 0
17319: PUSH
17320: LD_INT 0
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: LD_INT 1
17332: NEG
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: LD_INT 0
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: LD_INT 1
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 1
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: LD_INT 0
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 1
17381: NEG
17382: PUSH
17383: LD_INT 1
17385: NEG
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: NEG
17394: PUSH
17395: LD_INT 2
17397: NEG
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 0
17405: PUSH
17406: LD_INT 2
17408: NEG
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 0
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: LD_INT 1
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
17459: LD_ADDR_VAR 0 49
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 0
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 0
17476: PUSH
17477: LD_INT 1
17479: NEG
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: LD_INT 0
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 1
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 0
17507: PUSH
17508: LD_INT 1
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 1
17517: NEG
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: NEG
17529: PUSH
17530: LD_INT 1
17532: NEG
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 1
17540: PUSH
17541: LD_INT 1
17543: NEG
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 2
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 2
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 2
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 2
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
17603: LD_ADDR_VAR 0 50
17607: PUSH
17608: LD_INT 0
17610: PUSH
17611: LD_INT 0
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 1
17623: NEG
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: LD_INT 0
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 0
17651: PUSH
17652: LD_INT 1
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: LD_INT 1
17676: NEG
17677: PUSH
17678: EMPTY
17679: LIST
17680: LIST
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: LD_INT 1
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 2
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 1
17704: PUSH
17705: LD_INT 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 0
17714: PUSH
17715: LD_INT 2
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: LD_INT 1
17724: NEG
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
17747: LD_ADDR_VAR 0 51
17751: PUSH
17752: LD_INT 0
17754: PUSH
17755: LD_INT 0
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 1
17767: NEG
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 1
17775: PUSH
17776: LD_INT 0
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: LD_INT 1
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 0
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: LD_INT 0
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 1
17816: NEG
17817: PUSH
17818: LD_INT 1
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 1
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 0
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 1
17848: NEG
17849: PUSH
17850: LD_INT 1
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 2
17859: NEG
17860: PUSH
17861: LD_INT 0
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 2
17870: NEG
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17894: LD_ADDR_VAR 0 52
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: NEG
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 2
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 2
17998: NEG
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 2
18021: NEG
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18045: LD_ADDR_VAR 0 53
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 0
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 0
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 0
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 1
18114: NEG
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 1
18126: NEG
18127: PUSH
18128: LD_INT 2
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: LD_INT 2
18141: NEG
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 0
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 1
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 2
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 1
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 0
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 1
18210: NEG
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 2
18221: NEG
18222: PUSH
18223: LD_INT 0
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 2
18232: NEG
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 2
18244: NEG
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18275: LD_ADDR_VAR 0 54
18279: PUSH
18280: LD_INT 0
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: LD_INT 1
18295: NEG
18296: PUSH
18297: EMPTY
18298: LIST
18299: LIST
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: LD_INT 1
18313: PUSH
18314: LD_INT 1
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: LD_INT 2
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 2
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 0
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 2
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 0
18430: PUSH
18431: LD_INT 2
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: NEG
18441: PUSH
18442: LD_INT 1
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 2
18451: NEG
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 2
18462: NEG
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 2
18474: NEG
18475: PUSH
18476: LD_INT 2
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18505: LD_ADDR_VAR 0 55
18509: PUSH
18510: LD_INT 0
18512: PUSH
18513: LD_INT 0
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 0
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 1
18574: NEG
18575: PUSH
18576: LD_INT 1
18578: NEG
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 2
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: LD_INT 2
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 0
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 1
18670: NEG
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 2
18681: NEG
18682: PUSH
18683: LD_INT 0
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 2
18692: NEG
18693: PUSH
18694: LD_INT 1
18696: NEG
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 2
18704: NEG
18705: PUSH
18706: LD_INT 2
18708: NEG
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18735: LD_ADDR_VAR 0 56
18739: PUSH
18740: LD_INT 0
18742: PUSH
18743: LD_INT 0
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: LD_INT 1
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 1
18773: PUSH
18774: LD_INT 1
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: NEG
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 1
18816: NEG
18817: PUSH
18818: LD_INT 2
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 0
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PUSH
18840: LD_INT 1
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 2
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: LD_INT 2
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 2
18911: NEG
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 2
18922: NEG
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: NEG
18935: PUSH
18936: LD_INT 2
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18965: LD_ADDR_VAR 0 57
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: LD_INT 0
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 1
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 1
19023: NEG
19024: PUSH
19025: LD_INT 0
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: NEG
19035: PUSH
19036: LD_INT 1
19038: NEG
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: NEG
19047: PUSH
19048: LD_INT 2
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 0
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: LD_INT 1
19072: NEG
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: LD_INT 1
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 2
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: LD_INT 2
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 2
19141: NEG
19142: PUSH
19143: LD_INT 0
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 2
19152: NEG
19153: PUSH
19154: LD_INT 1
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: NEG
19165: PUSH
19166: LD_INT 2
19168: NEG
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19195: LD_ADDR_VAR 0 58
19199: PUSH
19200: LD_INT 0
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: NEG
19254: PUSH
19255: LD_INT 0
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PUSH
19262: LD_INT 1
19264: NEG
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: NEG
19277: PUSH
19278: LD_INT 2
19280: NEG
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 2
19291: NEG
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 2
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 2
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 2
19330: PUSH
19331: LD_INT 2
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: LD_INT 2
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19425: LD_ADDR_VAR 0 59
19429: PUSH
19430: LD_INT 0
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 1
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 1
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: LD_INT 1
19498: NEG
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19513: LD_ADDR_VAR 0 60
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: LD_INT 0
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: LD_INT 1
19533: NEG
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 1
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: EMPTY
19556: LIST
19557: LIST
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19601: LD_ADDR_VAR 0 61
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 1
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 1
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 1
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: LD_INT 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 1
19659: NEG
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 1
19670: NEG
19671: PUSH
19672: LD_INT 1
19674: NEG
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19689: LD_ADDR_VAR 0 62
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 0
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 0
19737: PUSH
19738: LD_INT 1
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: NEG
19759: PUSH
19760: LD_INT 1
19762: NEG
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19777: LD_ADDR_VAR 0 63
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 0
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 0
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 1
19815: PUSH
19816: LD_INT 1
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: LD_INT 0
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 1
19835: NEG
19836: PUSH
19837: LD_INT 0
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 1
19846: NEG
19847: PUSH
19848: LD_INT 1
19850: NEG
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19865: LD_ADDR_VAR 0 64
19869: PUSH
19870: LD_INT 0
19872: PUSH
19873: LD_INT 0
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: LD_INT 1
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: LD_INT 0
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 0
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 1
19934: NEG
19935: PUSH
19936: LD_INT 1
19938: NEG
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: ST_TO_ADDR
// end ; 1 :
19953: GO 25850
19955: LD_INT 1
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 22586
19963: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19964: LD_ADDR_VAR 0 11
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 3
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 3
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: LIST
20007: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20008: LD_ADDR_VAR 0 12
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 1
20018: NEG
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 3
20026: PUSH
20027: LD_INT 0
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 3
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20049: LD_ADDR_VAR 0 13
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: LD_INT 2
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: LD_INT 3
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 2
20076: PUSH
20077: LD_INT 3
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20089: LD_ADDR_VAR 0 14
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 3
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20130: LD_ADDR_VAR 0 15
20134: PUSH
20135: LD_INT 2
20137: NEG
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 3
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 3
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20174: LD_ADDR_VAR 0 16
20178: PUSH
20179: LD_INT 2
20181: NEG
20182: PUSH
20183: LD_INT 3
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 3
20193: NEG
20194: PUSH
20195: LD_INT 2
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 3
20205: NEG
20206: PUSH
20207: LD_INT 3
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20220: LD_ADDR_VAR 0 17
20224: PUSH
20225: LD_INT 1
20227: NEG
20228: PUSH
20229: LD_INT 3
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 0
20239: PUSH
20240: LD_INT 3
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 1
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20264: LD_ADDR_VAR 0 18
20268: PUSH
20269: LD_INT 2
20271: PUSH
20272: LD_INT 1
20274: NEG
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: PUSH
20280: LD_INT 3
20282: PUSH
20283: LD_INT 0
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 3
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20305: LD_ADDR_VAR 0 19
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: LD_INT 3
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: LD_INT 3
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20345: LD_ADDR_VAR 0 20
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: LD_INT 3
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 3
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 1
20372: NEG
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20386: LD_ADDR_VAR 0 21
20390: PUSH
20391: LD_INT 2
20393: NEG
20394: PUSH
20395: LD_INT 1
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 3
20404: NEG
20405: PUSH
20406: LD_INT 0
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 3
20415: NEG
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
20430: LD_ADDR_VAR 0 22
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: LD_INT 3
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 3
20449: NEG
20450: PUSH
20451: LD_INT 2
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 3
20461: NEG
20462: PUSH
20463: LD_INT 3
20465: NEG
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
20476: LD_ADDR_VAR 0 23
20480: PUSH
20481: LD_INT 0
20483: PUSH
20484: LD_INT 3
20486: NEG
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 4
20498: NEG
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: LD_INT 3
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
20520: LD_ADDR_VAR 0 24
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: LD_INT 0
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 3
20537: PUSH
20538: LD_INT 1
20540: NEG
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 4
20548: PUSH
20549: LD_INT 1
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
20561: LD_ADDR_VAR 0 25
20565: PUSH
20566: LD_INT 3
20568: PUSH
20569: LD_INT 3
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: LD_INT 3
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 3
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
20601: LD_ADDR_VAR 0 26
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 3
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: LD_INT 4
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 3
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
20642: LD_ADDR_VAR 0 27
20646: PUSH
20647: LD_INT 3
20649: NEG
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 3
20660: NEG
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 4
20671: NEG
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: LIST
20685: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
20686: LD_ADDR_VAR 0 28
20690: PUSH
20691: LD_INT 3
20693: NEG
20694: PUSH
20695: LD_INT 3
20697: NEG
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 3
20705: NEG
20706: PUSH
20707: LD_INT 4
20709: NEG
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 4
20717: NEG
20718: PUSH
20719: LD_INT 3
20721: NEG
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: LIST
20731: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
20732: LD_ADDR_VAR 0 29
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: LD_INT 3
20743: NEG
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: LD_INT 3
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: LD_INT 4
20777: NEG
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 0
20785: PUSH
20786: LD_INT 4
20788: NEG
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 1
20796: PUSH
20797: LD_INT 3
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: LD_INT 5
20811: NEG
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: LD_INT 5
20822: NEG
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: LD_INT 4
20833: NEG
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 6
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 0
20853: PUSH
20854: LD_INT 6
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 5
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
20887: LD_ADDR_VAR 0 30
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 3
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 3
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 3
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 4
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 4
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 4
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 5
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 5
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 5
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 6
20998: PUSH
20999: LD_INT 0
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 6
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
21030: LD_ADDR_VAR 0 31
21034: PUSH
21035: LD_INT 3
21037: PUSH
21038: LD_INT 2
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 3
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 3
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 4
21067: PUSH
21068: LD_INT 3
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 4
21077: PUSH
21078: LD_INT 4
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 3
21087: PUSH
21088: LD_INT 4
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 5
21097: PUSH
21098: LD_INT 4
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: PUSH
21105: LD_INT 5
21107: PUSH
21108: LD_INT 5
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 4
21117: PUSH
21118: LD_INT 5
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 6
21127: PUSH
21128: LD_INT 5
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 6
21137: PUSH
21138: LD_INT 6
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 5
21147: PUSH
21148: LD_INT 6
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
21169: LD_ADDR_VAR 0 32
21173: PUSH
21174: LD_INT 1
21176: PUSH
21177: LD_INT 3
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: NEG
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: LD_INT 4
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 4
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 3
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 5
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 5
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 4
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 1
21269: PUSH
21270: LD_INT 6
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 6
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 5
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
21312: LD_ADDR_VAR 0 33
21316: PUSH
21317: LD_INT 2
21319: NEG
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 3
21330: NEG
21331: PUSH
21332: LD_INT 0
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 3
21341: NEG
21342: PUSH
21343: LD_INT 1
21345: NEG
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 3
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 4
21364: NEG
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 4
21375: NEG
21376: PUSH
21377: LD_INT 1
21379: NEG
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 4
21387: NEG
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 5
21398: NEG
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 5
21409: NEG
21410: PUSH
21411: LD_INT 1
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 5
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 6
21432: NEG
21433: PUSH
21434: LD_INT 0
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 6
21443: NEG
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
21467: LD_ADDR_VAR 0 34
21471: PUSH
21472: LD_INT 2
21474: NEG
21475: PUSH
21476: LD_INT 3
21478: NEG
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: LD_INT 3
21486: NEG
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 3
21498: NEG
21499: PUSH
21500: LD_INT 3
21502: NEG
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 3
21510: NEG
21511: PUSH
21512: LD_INT 4
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 4
21522: NEG
21523: PUSH
21524: LD_INT 3
21526: NEG
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: LD_INT 4
21534: NEG
21535: PUSH
21536: LD_INT 4
21538: NEG
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 4
21546: NEG
21547: PUSH
21548: LD_INT 5
21550: NEG
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 5
21558: NEG
21559: PUSH
21560: LD_INT 4
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 5
21570: NEG
21571: PUSH
21572: LD_INT 5
21574: NEG
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 5
21582: NEG
21583: PUSH
21584: LD_INT 6
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 6
21594: NEG
21595: PUSH
21596: LD_INT 5
21598: NEG
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 6
21606: NEG
21607: PUSH
21608: LD_INT 6
21610: NEG
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
21630: LD_ADDR_VAR 0 41
21634: PUSH
21635: LD_INT 0
21637: PUSH
21638: LD_INT 2
21640: NEG
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 1
21648: NEG
21649: PUSH
21650: LD_INT 3
21652: NEG
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: LD_INT 2
21663: NEG
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
21674: LD_ADDR_VAR 0 42
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 0
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 3
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
21715: LD_ADDR_VAR 0 43
21719: PUSH
21720: LD_INT 2
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 3
21732: PUSH
21733: LD_INT 2
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 2
21742: PUSH
21743: LD_INT 3
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
21755: LD_ADDR_VAR 0 44
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 1
21782: NEG
21783: PUSH
21784: LD_INT 2
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21796: LD_ADDR_VAR 0 45
21800: PUSH
21801: LD_INT 2
21803: NEG
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 2
21814: NEG
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 3
21825: NEG
21826: PUSH
21827: LD_INT 1
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: LIST
21839: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
21840: LD_ADDR_VAR 0 46
21844: PUSH
21845: LD_INT 2
21847: NEG
21848: PUSH
21849: LD_INT 2
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 2
21859: NEG
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 3
21871: NEG
21872: PUSH
21873: LD_INT 2
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: LIST
21885: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
21886: LD_ADDR_VAR 0 47
21890: PUSH
21891: LD_INT 2
21893: NEG
21894: PUSH
21895: LD_INT 3
21897: NEG
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 1
21905: NEG
21906: PUSH
21907: LD_INT 3
21909: NEG
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21919: LD_ADDR_VAR 0 48
21923: PUSH
21924: LD_INT 1
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 2
21937: PUSH
21938: LD_INT 1
21940: NEG
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
21950: LD_ADDR_VAR 0 49
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 3
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
21979: LD_ADDR_VAR 0 50
21983: PUSH
21984: LD_INT 2
21986: PUSH
21987: LD_INT 3
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 1
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22008: LD_ADDR_VAR 0 51
22012: PUSH
22013: LD_INT 1
22015: NEG
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22039: LD_ADDR_VAR 0 52
22043: PUSH
22044: LD_INT 3
22046: NEG
22047: PUSH
22048: LD_INT 1
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 3
22058: NEG
22059: PUSH
22060: LD_INT 2
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: EMPTY
22069: LIST
22070: LIST
22071: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22072: LD_ADDR_VAR 0 53
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: LD_INT 3
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 0
22091: PUSH
22092: LD_INT 3
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 2
22105: NEG
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22116: LD_ADDR_VAR 0 54
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: LD_INT 1
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 3
22144: PUSH
22145: LD_INT 1
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22157: LD_ADDR_VAR 0 55
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: LD_INT 3
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: LD_INT 3
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: LIST
22196: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22197: LD_ADDR_VAR 0 56
22201: PUSH
22202: LD_INT 1
22204: PUSH
22205: LD_INT 3
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 0
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 1
22224: NEG
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22238: LD_ADDR_VAR 0 57
22242: PUSH
22243: LD_INT 2
22245: NEG
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 3
22256: NEG
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 3
22267: NEG
22268: PUSH
22269: LD_INT 1
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22282: LD_ADDR_VAR 0 58
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: LD_INT 3
22293: NEG
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 3
22301: NEG
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 3
22313: NEG
22314: PUSH
22315: LD_INT 3
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
22328: LD_ADDR_VAR 0 59
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: PUSH
22337: LD_INT 2
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 1
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
22372: LD_ADDR_VAR 0 60
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: LD_INT 1
22382: NEG
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: LD_INT 0
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: LIST
22412: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
22413: LD_ADDR_VAR 0 61
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: LD_INT 1
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: LIST
22452: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
22453: LD_ADDR_VAR 0 62
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 0
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 1
22480: NEG
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
22494: LD_ADDR_VAR 0 63
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 2
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: LIST
22537: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22538: LD_ADDR_VAR 0 64
22542: PUSH
22543: LD_INT 1
22545: NEG
22546: PUSH
22547: LD_INT 2
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: ST_TO_ADDR
// end ; 2 :
22584: GO 25850
22586: LD_INT 2
22588: DOUBLE
22589: EQUAL
22590: IFTRUE 22594
22592: GO 25849
22594: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
22595: LD_ADDR_VAR 0 29
22599: PUSH
22600: LD_INT 4
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 4
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 5
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 5
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 4
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 3
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 3
22663: PUSH
22664: LD_INT 1
22666: NEG
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 3
22674: PUSH
22675: LD_INT 2
22677: NEG
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: LD_INT 5
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 3
22695: PUSH
22696: LD_INT 3
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 4
22715: PUSH
22716: LD_INT 3
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 4
22725: PUSH
22726: LD_INT 4
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: LD_INT 4
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: LD_INT 3
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 2
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 4
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 4
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 4
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 4
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 5
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 5
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: NEG
22836: PUSH
22837: LD_INT 4
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 5
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 2
22867: NEG
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 3
22878: NEG
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 3
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 2
22901: NEG
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: NEG
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 3
22923: NEG
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 4
22934: NEG
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 4
22945: NEG
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 4
22957: NEG
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 2
22969: NEG
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 4
22980: NEG
22981: PUSH
22982: LD_INT 4
22984: NEG
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 4
22992: NEG
22993: PUSH
22994: LD_INT 5
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 3
23004: NEG
23005: PUSH
23006: LD_INT 4
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: NEG
23017: PUSH
23018: LD_INT 3
23020: NEG
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 4
23028: NEG
23029: PUSH
23030: LD_INT 3
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 5
23040: NEG
23041: PUSH
23042: LD_INT 4
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 5
23052: NEG
23053: PUSH
23054: LD_INT 5
23056: NEG
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 3
23064: NEG
23065: PUSH
23066: LD_INT 5
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 5
23076: NEG
23077: PUSH
23078: LD_INT 3
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
23133: LD_ADDR_VAR 0 30
23137: PUSH
23138: LD_INT 4
23140: PUSH
23141: LD_INT 4
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 4
23150: PUSH
23151: LD_INT 3
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 5
23160: PUSH
23161: LD_INT 4
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 5
23170: PUSH
23171: LD_INT 5
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 4
23180: PUSH
23181: LD_INT 5
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 4
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 3
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 5
23210: PUSH
23211: LD_INT 3
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 2
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: LD_INT 4
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 0
23270: PUSH
23271: LD_INT 4
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 3
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: LD_INT 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: LD_INT 4
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: NEG
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: PUSH
23321: LD_INT 4
23323: NEG
23324: PUSH
23325: LD_INT 0
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 4
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 3
23346: NEG
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 3
23357: NEG
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 4
23368: NEG
23369: PUSH
23370: LD_INT 1
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: LD_INT 5
23379: NEG
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 5
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 5
23402: NEG
23403: PUSH
23404: LD_INT 2
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: LD_INT 2
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 3
23425: NEG
23426: PUSH
23427: LD_INT 3
23429: NEG
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 3
23437: NEG
23438: PUSH
23439: LD_INT 4
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: LD_INT 3
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 3
23473: NEG
23474: PUSH
23475: LD_INT 2
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 4
23485: NEG
23486: PUSH
23487: LD_INT 3
23489: NEG
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 4
23497: NEG
23498: PUSH
23499: LD_INT 4
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: NEG
23510: PUSH
23511: LD_INT 4
23513: NEG
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 4
23521: NEG
23522: PUSH
23523: LD_INT 2
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 4
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: LD_INT 5
23547: NEG
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: LD_INT 4
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: LD_INT 3
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: NEG
23589: PUSH
23590: LD_INT 4
23592: NEG
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 5
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: LD_INT 5
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
23680: LD_ADDR_VAR 0 31
23684: PUSH
23685: LD_INT 0
23687: PUSH
23688: LD_INT 4
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 3
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 4
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: LD_INT 5
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 5
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: NEG
23738: PUSH
23739: LD_INT 4
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 3
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: LD_INT 5
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: LD_INT 3
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 3
23780: NEG
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 3
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: NEG
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 3
23825: NEG
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 4
23836: NEG
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 4
23847: NEG
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 4
23859: NEG
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: NEG
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 4
23882: NEG
23883: PUSH
23884: LD_INT 4
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 4
23894: NEG
23895: PUSH
23896: LD_INT 5
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 3
23906: NEG
23907: PUSH
23908: LD_INT 4
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 3
23918: NEG
23919: PUSH
23920: LD_INT 3
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 4
23930: NEG
23931: PUSH
23932: LD_INT 3
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 5
23942: NEG
23943: PUSH
23944: LD_INT 4
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 5
23954: NEG
23955: PUSH
23956: LD_INT 5
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 3
23966: NEG
23967: PUSH
23968: LD_INT 5
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 5
23978: NEG
23979: PUSH
23980: LD_INT 3
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 3
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: LD_INT 4
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: LD_INT 3
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 2
24026: NEG
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: LD_INT 2
24037: NEG
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: LD_INT 3
24049: NEG
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 1
24057: NEG
24058: PUSH
24059: LD_INT 4
24061: NEG
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 2
24069: PUSH
24070: LD_INT 2
24072: NEG
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: NEG
24081: PUSH
24082: LD_INT 4
24084: NEG
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 4
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 4
24102: PUSH
24103: LD_INT 1
24105: NEG
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 5
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 5
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 4
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: LD_INT 0
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 3
24164: PUSH
24165: LD_INT 2
24167: NEG
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 5
24175: PUSH
24176: LD_INT 2
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
24230: LD_ADDR_VAR 0 32
24234: PUSH
24235: LD_INT 4
24237: NEG
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 4
24248: NEG
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: NEG
24261: PUSH
24262: LD_INT 0
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 3
24271: NEG
24272: PUSH
24273: LD_INT 1
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 4
24282: NEG
24283: PUSH
24284: LD_INT 1
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 5
24293: NEG
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 5
24304: NEG
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 5
24316: NEG
24317: PUSH
24318: LD_INT 2
24320: NEG
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 3
24328: NEG
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: NEG
24340: PUSH
24341: LD_INT 3
24343: NEG
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: LD_INT 4
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: LD_INT 3
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 3
24387: NEG
24388: PUSH
24389: LD_INT 2
24391: NEG
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 4
24399: NEG
24400: PUSH
24401: LD_INT 3
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 4
24411: NEG
24412: PUSH
24413: LD_INT 4
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: LD_INT 4
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 4
24435: NEG
24436: PUSH
24437: LD_INT 2
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: LD_INT 4
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 5
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 4
24472: NEG
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 1
24480: PUSH
24481: LD_INT 3
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 0
24491: PUSH
24492: LD_INT 3
24494: NEG
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 4
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: LD_INT 5
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: PUSH
24527: LD_INT 3
24529: NEG
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: LD_INT 5
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 3
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 3
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 4
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 4
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 1
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: LD_INT 2
24624: NEG
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: PUSH
24630: LD_INT 4
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 4
24642: PUSH
24643: LD_INT 4
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 4
24652: PUSH
24653: LD_INT 3
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 5
24662: PUSH
24663: LD_INT 4
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 5
24672: PUSH
24673: LD_INT 5
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 4
24682: PUSH
24683: LD_INT 5
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 3
24692: PUSH
24693: LD_INT 4
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 3
24702: PUSH
24703: LD_INT 3
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 3
24722: PUSH
24723: LD_INT 5
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
24777: LD_ADDR_VAR 0 33
24781: PUSH
24782: LD_INT 4
24784: NEG
24785: PUSH
24786: LD_INT 4
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 4
24796: NEG
24797: PUSH
24798: LD_INT 5
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: LD_INT 4
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 3
24820: NEG
24821: PUSH
24822: LD_INT 3
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 4
24832: NEG
24833: PUSH
24834: LD_INT 3
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 5
24844: NEG
24845: PUSH
24846: LD_INT 4
24848: NEG
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 5
24856: NEG
24857: PUSH
24858: LD_INT 5
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 3
24868: NEG
24869: PUSH
24870: LD_INT 5
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 5
24880: NEG
24881: PUSH
24882: LD_INT 3
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 0
24892: PUSH
24893: LD_INT 3
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 4
24906: NEG
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 3
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 1
24925: PUSH
24926: LD_INT 2
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 0
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: LD_INT 3
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 4
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 2
24974: NEG
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 2
24982: NEG
24983: PUSH
24984: LD_INT 4
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 4
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 4
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 5
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 5
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 4
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: LD_INT 0
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: LD_INT 1
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 3
25066: PUSH
25067: LD_INT 2
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 5
25077: PUSH
25078: LD_INT 2
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: LD_INT 3
25087: PUSH
25088: LD_INT 3
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 3
25097: PUSH
25098: LD_INT 2
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 4
25107: PUSH
25108: LD_INT 3
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 4
25117: PUSH
25118: LD_INT 4
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 4
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 2
25137: PUSH
25138: LD_INT 3
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 4
25157: PUSH
25158: LD_INT 2
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: LD_INT 4
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 4
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: LD_INT 4
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: LD_INT 5
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 0
25217: PUSH
25218: LD_INT 5
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: LD_INT 4
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 1
25238: NEG
25239: PUSH
25240: LD_INT 3
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: LD_INT 5
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: PUSH
25257: LD_INT 2
25259: NEG
25260: PUSH
25261: LD_INT 3
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
25315: LD_ADDR_VAR 0 34
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 4
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 5
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: LD_INT 4
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: LD_INT 3
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 0
25366: PUSH
25367: LD_INT 3
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 4
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: LD_INT 5
25393: NEG
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: LD_INT 3
25404: NEG
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: LD_INT 5
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 3
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 3
25434: PUSH
25435: LD_INT 1
25437: NEG
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 4
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 4
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 3
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 2
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 4
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 4
25517: PUSH
25518: LD_INT 4
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 4
25527: PUSH
25528: LD_INT 3
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 5
25537: PUSH
25538: LD_INT 4
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 5
25547: PUSH
25548: LD_INT 5
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 4
25557: PUSH
25558: LD_INT 5
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 3
25567: PUSH
25568: LD_INT 4
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 3
25577: PUSH
25578: LD_INT 3
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 5
25587: PUSH
25588: LD_INT 3
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 3
25597: PUSH
25598: LD_INT 5
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: LD_INT 3
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 0
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: LD_INT 4
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: LD_INT 4
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 3
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: NEG
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 4
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: NEG
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 4
25700: NEG
25701: PUSH
25702: LD_INT 0
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 4
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: NEG
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 3
25723: NEG
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: LD_INT 1
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 4
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 5
25756: NEG
25757: PUSH
25758: LD_INT 0
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 5
25767: NEG
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 5
25779: NEG
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 3
25791: NEG
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: ST_TO_ADDR
// end ; end ;
25847: GO 25850
25849: POP
// case btype of b_depot , b_warehouse :
25850: LD_VAR 0 1
25854: PUSH
25855: LD_INT 0
25857: DOUBLE
25858: EQUAL
25859: IFTRUE 25869
25861: LD_INT 1
25863: DOUBLE
25864: EQUAL
25865: IFTRUE 25869
25867: GO 26070
25869: POP
// case nation of nation_american :
25870: LD_VAR 0 5
25874: PUSH
25875: LD_INT 1
25877: DOUBLE
25878: EQUAL
25879: IFTRUE 25883
25881: GO 25939
25883: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
25884: LD_ADDR_VAR 0 9
25888: PUSH
25889: LD_VAR 0 11
25893: PUSH
25894: LD_VAR 0 12
25898: PUSH
25899: LD_VAR 0 13
25903: PUSH
25904: LD_VAR 0 14
25908: PUSH
25909: LD_VAR 0 15
25913: PUSH
25914: LD_VAR 0 16
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: PUSH
25927: LD_VAR 0 4
25931: PUSH
25932: LD_INT 1
25934: PLUS
25935: ARRAY
25936: ST_TO_ADDR
25937: GO 26068
25939: LD_INT 2
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 26003
25947: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
25948: LD_ADDR_VAR 0 9
25952: PUSH
25953: LD_VAR 0 17
25957: PUSH
25958: LD_VAR 0 18
25962: PUSH
25963: LD_VAR 0 19
25967: PUSH
25968: LD_VAR 0 20
25972: PUSH
25973: LD_VAR 0 21
25977: PUSH
25978: LD_VAR 0 22
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: PUSH
25991: LD_VAR 0 4
25995: PUSH
25996: LD_INT 1
25998: PLUS
25999: ARRAY
26000: ST_TO_ADDR
26001: GO 26068
26003: LD_INT 3
26005: DOUBLE
26006: EQUAL
26007: IFTRUE 26011
26009: GO 26067
26011: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
26012: LD_ADDR_VAR 0 9
26016: PUSH
26017: LD_VAR 0 23
26021: PUSH
26022: LD_VAR 0 24
26026: PUSH
26027: LD_VAR 0 25
26031: PUSH
26032: LD_VAR 0 26
26036: PUSH
26037: LD_VAR 0 27
26041: PUSH
26042: LD_VAR 0 28
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: PUSH
26055: LD_VAR 0 4
26059: PUSH
26060: LD_INT 1
26062: PLUS
26063: ARRAY
26064: ST_TO_ADDR
26065: GO 26068
26067: POP
26068: GO 26617
26070: LD_INT 2
26072: DOUBLE
26073: EQUAL
26074: IFTRUE 26084
26076: LD_INT 3
26078: DOUBLE
26079: EQUAL
26080: IFTRUE 26084
26082: GO 26140
26084: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
26085: LD_ADDR_VAR 0 9
26089: PUSH
26090: LD_VAR 0 29
26094: PUSH
26095: LD_VAR 0 30
26099: PUSH
26100: LD_VAR 0 31
26104: PUSH
26105: LD_VAR 0 32
26109: PUSH
26110: LD_VAR 0 33
26114: PUSH
26115: LD_VAR 0 34
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: PUSH
26128: LD_VAR 0 4
26132: PUSH
26133: LD_INT 1
26135: PLUS
26136: ARRAY
26137: ST_TO_ADDR
26138: GO 26617
26140: LD_INT 16
26142: DOUBLE
26143: EQUAL
26144: IFTRUE 26196
26146: LD_INT 17
26148: DOUBLE
26149: EQUAL
26150: IFTRUE 26196
26152: LD_INT 18
26154: DOUBLE
26155: EQUAL
26156: IFTRUE 26196
26158: LD_INT 19
26160: DOUBLE
26161: EQUAL
26162: IFTRUE 26196
26164: LD_INT 20
26166: DOUBLE
26167: EQUAL
26168: IFTRUE 26196
26170: LD_INT 21
26172: DOUBLE
26173: EQUAL
26174: IFTRUE 26196
26176: LD_INT 23
26178: DOUBLE
26179: EQUAL
26180: IFTRUE 26196
26182: LD_INT 24
26184: DOUBLE
26185: EQUAL
26186: IFTRUE 26196
26188: LD_INT 25
26190: DOUBLE
26191: EQUAL
26192: IFTRUE 26196
26194: GO 26252
26196: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
26197: LD_ADDR_VAR 0 9
26201: PUSH
26202: LD_VAR 0 35
26206: PUSH
26207: LD_VAR 0 36
26211: PUSH
26212: LD_VAR 0 37
26216: PUSH
26217: LD_VAR 0 38
26221: PUSH
26222: LD_VAR 0 39
26226: PUSH
26227: LD_VAR 0 40
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: PUSH
26240: LD_VAR 0 4
26244: PUSH
26245: LD_INT 1
26247: PLUS
26248: ARRAY
26249: ST_TO_ADDR
26250: GO 26617
26252: LD_INT 6
26254: DOUBLE
26255: EQUAL
26256: IFTRUE 26308
26258: LD_INT 7
26260: DOUBLE
26261: EQUAL
26262: IFTRUE 26308
26264: LD_INT 8
26266: DOUBLE
26267: EQUAL
26268: IFTRUE 26308
26270: LD_INT 13
26272: DOUBLE
26273: EQUAL
26274: IFTRUE 26308
26276: LD_INT 12
26278: DOUBLE
26279: EQUAL
26280: IFTRUE 26308
26282: LD_INT 15
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26308
26288: LD_INT 11
26290: DOUBLE
26291: EQUAL
26292: IFTRUE 26308
26294: LD_INT 14
26296: DOUBLE
26297: EQUAL
26298: IFTRUE 26308
26300: LD_INT 10
26302: DOUBLE
26303: EQUAL
26304: IFTRUE 26308
26306: GO 26364
26308: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
26309: LD_ADDR_VAR 0 9
26313: PUSH
26314: LD_VAR 0 41
26318: PUSH
26319: LD_VAR 0 42
26323: PUSH
26324: LD_VAR 0 43
26328: PUSH
26329: LD_VAR 0 44
26333: PUSH
26334: LD_VAR 0 45
26338: PUSH
26339: LD_VAR 0 46
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: PUSH
26352: LD_VAR 0 4
26356: PUSH
26357: LD_INT 1
26359: PLUS
26360: ARRAY
26361: ST_TO_ADDR
26362: GO 26617
26364: LD_INT 36
26366: DOUBLE
26367: EQUAL
26368: IFTRUE 26372
26370: GO 26428
26372: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
26373: LD_ADDR_VAR 0 9
26377: PUSH
26378: LD_VAR 0 47
26382: PUSH
26383: LD_VAR 0 48
26387: PUSH
26388: LD_VAR 0 49
26392: PUSH
26393: LD_VAR 0 50
26397: PUSH
26398: LD_VAR 0 51
26402: PUSH
26403: LD_VAR 0 52
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: PUSH
26416: LD_VAR 0 4
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: ARRAY
26425: ST_TO_ADDR
26426: GO 26617
26428: LD_INT 4
26430: DOUBLE
26431: EQUAL
26432: IFTRUE 26454
26434: LD_INT 5
26436: DOUBLE
26437: EQUAL
26438: IFTRUE 26454
26440: LD_INT 34
26442: DOUBLE
26443: EQUAL
26444: IFTRUE 26454
26446: LD_INT 37
26448: DOUBLE
26449: EQUAL
26450: IFTRUE 26454
26452: GO 26510
26454: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
26455: LD_ADDR_VAR 0 9
26459: PUSH
26460: LD_VAR 0 53
26464: PUSH
26465: LD_VAR 0 54
26469: PUSH
26470: LD_VAR 0 55
26474: PUSH
26475: LD_VAR 0 56
26479: PUSH
26480: LD_VAR 0 57
26484: PUSH
26485: LD_VAR 0 58
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: LD_VAR 0 4
26502: PUSH
26503: LD_INT 1
26505: PLUS
26506: ARRAY
26507: ST_TO_ADDR
26508: GO 26617
26510: LD_INT 31
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26560
26516: LD_INT 32
26518: DOUBLE
26519: EQUAL
26520: IFTRUE 26560
26522: LD_INT 33
26524: DOUBLE
26525: EQUAL
26526: IFTRUE 26560
26528: LD_INT 27
26530: DOUBLE
26531: EQUAL
26532: IFTRUE 26560
26534: LD_INT 26
26536: DOUBLE
26537: EQUAL
26538: IFTRUE 26560
26540: LD_INT 28
26542: DOUBLE
26543: EQUAL
26544: IFTRUE 26560
26546: LD_INT 29
26548: DOUBLE
26549: EQUAL
26550: IFTRUE 26560
26552: LD_INT 30
26554: DOUBLE
26555: EQUAL
26556: IFTRUE 26560
26558: GO 26616
26560: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
26561: LD_ADDR_VAR 0 9
26565: PUSH
26566: LD_VAR 0 59
26570: PUSH
26571: LD_VAR 0 60
26575: PUSH
26576: LD_VAR 0 61
26580: PUSH
26581: LD_VAR 0 62
26585: PUSH
26586: LD_VAR 0 63
26590: PUSH
26591: LD_VAR 0 64
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: PUSH
26604: LD_VAR 0 4
26608: PUSH
26609: LD_INT 1
26611: PLUS
26612: ARRAY
26613: ST_TO_ADDR
26614: GO 26617
26616: POP
// temp_list2 = [ ] ;
26617: LD_ADDR_VAR 0 10
26621: PUSH
26622: EMPTY
26623: ST_TO_ADDR
// for i in temp_list do
26624: LD_ADDR_VAR 0 8
26628: PUSH
26629: LD_VAR 0 9
26633: PUSH
26634: FOR_IN
26635: IFFALSE 26687
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
26637: LD_ADDR_VAR 0 10
26641: PUSH
26642: LD_VAR 0 10
26646: PUSH
26647: LD_VAR 0 8
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PUSH
26656: LD_VAR 0 2
26660: PLUS
26661: PUSH
26662: LD_VAR 0 8
26666: PUSH
26667: LD_INT 2
26669: ARRAY
26670: PUSH
26671: LD_VAR 0 3
26675: PLUS
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: EMPTY
26682: LIST
26683: ADD
26684: ST_TO_ADDR
26685: GO 26634
26687: POP
26688: POP
// result = temp_list2 ;
26689: LD_ADDR_VAR 0 7
26693: PUSH
26694: LD_VAR 0 10
26698: ST_TO_ADDR
// end ;
26699: LD_VAR 0 7
26703: RET
// export function EnemyInRange ( unit , dist ) ; begin
26704: LD_INT 0
26706: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_VAR 0 1
26716: PPUSH
26717: CALL_OW 255
26721: PPUSH
26722: LD_VAR 0 1
26726: PPUSH
26727: CALL_OW 250
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 251
26741: PPUSH
26742: LD_VAR 0 2
26746: PPUSH
26747: CALL 2439 0 4
26751: PUSH
26752: LD_INT 4
26754: ARRAY
26755: ST_TO_ADDR
// end ;
26756: LD_VAR 0 3
26760: RET
// export function PlayerSeeMe ( unit ) ; begin
26761: LD_INT 0
26763: PPUSH
// result := See ( your_side , unit ) ;
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: LD_OWVAR 2
26773: PPUSH
26774: LD_VAR 0 1
26778: PPUSH
26779: CALL_OW 292
26783: ST_TO_ADDR
// end ;
26784: LD_VAR 0 2
26788: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
26789: LD_INT 0
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
// if not hexes then
26796: LD_VAR 0 2
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26953
// dist := 9999 ;
26805: LD_ADDR_VAR 0 5
26809: PUSH
26810: LD_INT 9999
26812: ST_TO_ADDR
// for i = 1 to hexes do
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: DOUBLE
26819: LD_INT 1
26821: DEC
26822: ST_TO_ADDR
26823: LD_VAR 0 2
26827: PUSH
26828: FOR_TO
26829: IFFALSE 26941
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
26831: LD_VAR 0 1
26835: PPUSH
26836: LD_VAR 0 2
26840: PUSH
26841: LD_VAR 0 4
26845: ARRAY
26846: PUSH
26847: LD_INT 1
26849: ARRAY
26850: PPUSH
26851: LD_VAR 0 2
26855: PUSH
26856: LD_VAR 0 4
26860: ARRAY
26861: PUSH
26862: LD_INT 2
26864: ARRAY
26865: PPUSH
26866: CALL_OW 297
26870: PUSH
26871: LD_VAR 0 5
26875: LESS
26876: IFFALSE 26939
// begin hex := hexes [ i ] ;
26878: LD_ADDR_VAR 0 7
26882: PUSH
26883: LD_VAR 0 2
26887: PUSH
26888: LD_VAR 0 4
26892: ARRAY
26893: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26894: LD_ADDR_VAR 0 5
26898: PUSH
26899: LD_VAR 0 1
26903: PPUSH
26904: LD_VAR 0 2
26908: PUSH
26909: LD_VAR 0 4
26913: ARRAY
26914: PUSH
26915: LD_INT 1
26917: ARRAY
26918: PPUSH
26919: LD_VAR 0 2
26923: PUSH
26924: LD_VAR 0 4
26928: ARRAY
26929: PUSH
26930: LD_INT 2
26932: ARRAY
26933: PPUSH
26934: CALL_OW 297
26938: ST_TO_ADDR
// end ; end ;
26939: GO 26828
26941: POP
26942: POP
// result := hex ;
26943: LD_ADDR_VAR 0 3
26947: PUSH
26948: LD_VAR 0 7
26952: ST_TO_ADDR
// end ;
26953: LD_VAR 0 3
26957: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
26958: LD_INT 0
26960: PPUSH
26961: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
26962: LD_VAR 0 1
26966: NOT
26967: PUSH
26968: LD_VAR 0 1
26972: PUSH
26973: LD_INT 21
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 23
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PPUSH
26997: CALL_OW 69
27001: IN
27002: NOT
27003: OR
27004: IFFALSE 27008
// exit ;
27006: GO 27055
// for i = 1 to 3 do
27008: LD_ADDR_VAR 0 3
27012: PUSH
27013: DOUBLE
27014: LD_INT 1
27016: DEC
27017: ST_TO_ADDR
27018: LD_INT 3
27020: PUSH
27021: FOR_TO
27022: IFFALSE 27053
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL_OW 250
27033: PPUSH
27034: LD_VAR 0 1
27038: PPUSH
27039: CALL_OW 251
27043: PPUSH
27044: LD_INT 1
27046: PPUSH
27047: CALL_OW 453
27051: GO 27021
27053: POP
27054: POP
// end ;
27055: LD_VAR 0 2
27059: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
27060: LD_INT 0
27062: PPUSH
27063: PPUSH
27064: PPUSH
27065: PPUSH
27066: PPUSH
27067: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
27068: LD_VAR 0 1
27072: NOT
27073: PUSH
27074: LD_VAR 0 2
27078: NOT
27079: OR
27080: PUSH
27081: LD_VAR 0 1
27085: PPUSH
27086: CALL_OW 314
27090: OR
27091: IFFALSE 27095
// exit ;
27093: GO 27536
// x := GetX ( enemy_unit ) ;
27095: LD_ADDR_VAR 0 7
27099: PUSH
27100: LD_VAR 0 2
27104: PPUSH
27105: CALL_OW 250
27109: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
27110: LD_ADDR_VAR 0 8
27114: PUSH
27115: LD_VAR 0 2
27119: PPUSH
27120: CALL_OW 251
27124: ST_TO_ADDR
// if not x or not y then
27125: LD_VAR 0 7
27129: NOT
27130: PUSH
27131: LD_VAR 0 8
27135: NOT
27136: OR
27137: IFFALSE 27141
// exit ;
27139: GO 27536
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
27141: LD_ADDR_VAR 0 6
27145: PUSH
27146: LD_VAR 0 7
27150: PPUSH
27151: LD_INT 0
27153: PPUSH
27154: LD_INT 4
27156: PPUSH
27157: CALL_OW 272
27161: PUSH
27162: LD_VAR 0 8
27166: PPUSH
27167: LD_INT 0
27169: PPUSH
27170: LD_INT 4
27172: PPUSH
27173: CALL_OW 273
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_VAR 0 7
27186: PPUSH
27187: LD_INT 1
27189: PPUSH
27190: LD_INT 4
27192: PPUSH
27193: CALL_OW 272
27197: PUSH
27198: LD_VAR 0 8
27202: PPUSH
27203: LD_INT 1
27205: PPUSH
27206: LD_INT 4
27208: PPUSH
27209: CALL_OW 273
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_VAR 0 7
27222: PPUSH
27223: LD_INT 2
27225: PPUSH
27226: LD_INT 4
27228: PPUSH
27229: CALL_OW 272
27233: PUSH
27234: LD_VAR 0 8
27238: PPUSH
27239: LD_INT 2
27241: PPUSH
27242: LD_INT 4
27244: PPUSH
27245: CALL_OW 273
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_VAR 0 7
27258: PPUSH
27259: LD_INT 3
27261: PPUSH
27262: LD_INT 4
27264: PPUSH
27265: CALL_OW 272
27269: PUSH
27270: LD_VAR 0 8
27274: PPUSH
27275: LD_INT 3
27277: PPUSH
27278: LD_INT 4
27280: PPUSH
27281: CALL_OW 273
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_VAR 0 7
27294: PPUSH
27295: LD_INT 4
27297: PPUSH
27298: LD_INT 4
27300: PPUSH
27301: CALL_OW 272
27305: PUSH
27306: LD_VAR 0 8
27310: PPUSH
27311: LD_INT 4
27313: PPUSH
27314: LD_INT 4
27316: PPUSH
27317: CALL_OW 273
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_VAR 0 7
27330: PPUSH
27331: LD_INT 5
27333: PPUSH
27334: LD_INT 4
27336: PPUSH
27337: CALL_OW 272
27341: PUSH
27342: LD_VAR 0 8
27346: PPUSH
27347: LD_INT 5
27349: PPUSH
27350: LD_INT 4
27352: PPUSH
27353: CALL_OW 273
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// for i = tmp downto 1 do
27370: LD_ADDR_VAR 0 4
27374: PUSH
27375: DOUBLE
27376: LD_VAR 0 6
27380: INC
27381: ST_TO_ADDR
27382: LD_INT 1
27384: PUSH
27385: FOR_DOWNTO
27386: IFFALSE 27487
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
27388: LD_VAR 0 6
27392: PUSH
27393: LD_VAR 0 4
27397: ARRAY
27398: PUSH
27399: LD_INT 1
27401: ARRAY
27402: PPUSH
27403: LD_VAR 0 6
27407: PUSH
27408: LD_VAR 0 4
27412: ARRAY
27413: PUSH
27414: LD_INT 2
27416: ARRAY
27417: PPUSH
27418: CALL_OW 488
27422: NOT
27423: PUSH
27424: LD_VAR 0 6
27428: PUSH
27429: LD_VAR 0 4
27433: ARRAY
27434: PUSH
27435: LD_INT 1
27437: ARRAY
27438: PPUSH
27439: LD_VAR 0 6
27443: PUSH
27444: LD_VAR 0 4
27448: ARRAY
27449: PUSH
27450: LD_INT 2
27452: ARRAY
27453: PPUSH
27454: CALL_OW 428
27458: PUSH
27459: LD_INT 0
27461: NONEQUAL
27462: OR
27463: IFFALSE 27485
// tmp := Delete ( tmp , i ) ;
27465: LD_ADDR_VAR 0 6
27469: PUSH
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_VAR 0 4
27479: PPUSH
27480: CALL_OW 3
27484: ST_TO_ADDR
27485: GO 27385
27487: POP
27488: POP
// j := GetClosestHex ( unit , tmp ) ;
27489: LD_ADDR_VAR 0 5
27493: PUSH
27494: LD_VAR 0 1
27498: PPUSH
27499: LD_VAR 0 6
27503: PPUSH
27504: CALL 26789 0 2
27508: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
27509: LD_VAR 0 1
27513: PPUSH
27514: LD_VAR 0 5
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PPUSH
27523: LD_VAR 0 5
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PPUSH
27532: CALL_OW 111
// end ;
27536: LD_VAR 0 3
27540: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
27541: LD_INT 0
27543: PPUSH
27544: PPUSH
27545: PPUSH
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
27550: PPUSH
27551: PPUSH
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
27556: PPUSH
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
27566: PPUSH
27567: PPUSH
27568: PPUSH
// if not list then
27569: LD_VAR 0 1
27573: NOT
27574: IFFALSE 27578
// exit ;
27576: GO 30531
// base := list [ 1 ] ;
27578: LD_ADDR_VAR 0 3
27582: PUSH
27583: LD_VAR 0 1
27587: PUSH
27588: LD_INT 1
27590: ARRAY
27591: ST_TO_ADDR
// group := list [ 2 ] ;
27592: LD_ADDR_VAR 0 4
27596: PUSH
27597: LD_VAR 0 1
27601: PUSH
27602: LD_INT 2
27604: ARRAY
27605: ST_TO_ADDR
// path := list [ 3 ] ;
27606: LD_ADDR_VAR 0 5
27610: PUSH
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 3
27618: ARRAY
27619: ST_TO_ADDR
// flags := list [ 4 ] ;
27620: LD_ADDR_VAR 0 6
27624: PUSH
27625: LD_VAR 0 1
27629: PUSH
27630: LD_INT 4
27632: ARRAY
27633: ST_TO_ADDR
// mined := [ ] ;
27634: LD_ADDR_VAR 0 25
27638: PUSH
27639: EMPTY
27640: ST_TO_ADDR
// bombed := [ ] ;
27641: LD_ADDR_VAR 0 26
27645: PUSH
27646: EMPTY
27647: ST_TO_ADDR
// if not group or not path then
27648: LD_VAR 0 4
27652: NOT
27653: PUSH
27654: LD_VAR 0 5
27658: NOT
27659: OR
27660: IFFALSE 27664
// exit ;
27662: GO 30531
// if flags then
27664: LD_VAR 0 6
27668: IFFALSE 27812
// begin f_ignore_area := flags [ 1 ] ;
27670: LD_ADDR_VAR 0 15
27674: PUSH
27675: LD_VAR 0 6
27679: PUSH
27680: LD_INT 1
27682: ARRAY
27683: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
27684: LD_ADDR_VAR 0 16
27688: PUSH
27689: LD_VAR 0 6
27693: PUSH
27694: LD_INT 2
27696: ARRAY
27697: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
27698: LD_ADDR_VAR 0 17
27702: PUSH
27703: LD_VAR 0 6
27707: PUSH
27708: LD_INT 3
27710: ARRAY
27711: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
27712: LD_ADDR_VAR 0 18
27716: PUSH
27717: LD_VAR 0 6
27721: PUSH
27722: LD_INT 4
27724: ARRAY
27725: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
27726: LD_ADDR_VAR 0 19
27730: PUSH
27731: LD_VAR 0 6
27735: PUSH
27736: LD_INT 5
27738: ARRAY
27739: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
27740: LD_ADDR_VAR 0 20
27744: PUSH
27745: LD_VAR 0 6
27749: PUSH
27750: LD_INT 6
27752: ARRAY
27753: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
27754: LD_ADDR_VAR 0 21
27758: PUSH
27759: LD_VAR 0 6
27763: PUSH
27764: LD_INT 7
27766: ARRAY
27767: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
27768: LD_ADDR_VAR 0 22
27772: PUSH
27773: LD_VAR 0 6
27777: PUSH
27778: LD_INT 8
27780: ARRAY
27781: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
27782: LD_ADDR_VAR 0 23
27786: PUSH
27787: LD_VAR 0 6
27791: PUSH
27792: LD_INT 9
27794: ARRAY
27795: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
27796: LD_ADDR_VAR 0 24
27800: PUSH
27801: LD_VAR 0 6
27805: PUSH
27806: LD_INT 10
27808: ARRAY
27809: ST_TO_ADDR
// end else
27810: GO 27892
// begin f_ignore_area := false ;
27812: LD_ADDR_VAR 0 15
27816: PUSH
27817: LD_INT 0
27819: ST_TO_ADDR
// f_capture := false ;
27820: LD_ADDR_VAR 0 16
27824: PUSH
27825: LD_INT 0
27827: ST_TO_ADDR
// f_ignore_civ := false ;
27828: LD_ADDR_VAR 0 17
27832: PUSH
27833: LD_INT 0
27835: ST_TO_ADDR
// f_murder := false ;
27836: LD_ADDR_VAR 0 18
27840: PUSH
27841: LD_INT 0
27843: ST_TO_ADDR
// f_mines := false ;
27844: LD_ADDR_VAR 0 19
27848: PUSH
27849: LD_INT 0
27851: ST_TO_ADDR
// f_repair := false ;
27852: LD_ADDR_VAR 0 20
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// f_heal := false ;
27860: LD_ADDR_VAR 0 21
27864: PUSH
27865: LD_INT 0
27867: ST_TO_ADDR
// f_spacetime := false ;
27868: LD_ADDR_VAR 0 22
27872: PUSH
27873: LD_INT 0
27875: ST_TO_ADDR
// f_attack_depot := false ;
27876: LD_ADDR_VAR 0 23
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
// f_crawl := false ;
27884: LD_ADDR_VAR 0 24
27888: PUSH
27889: LD_INT 0
27891: ST_TO_ADDR
// end ; units_path := [ ] ;
27892: LD_ADDR_VAR 0 14
27896: PUSH
27897: EMPTY
27898: ST_TO_ADDR
// for i = 1 to group do
27899: LD_ADDR_VAR 0 7
27903: PUSH
27904: DOUBLE
27905: LD_INT 1
27907: DEC
27908: ST_TO_ADDR
27909: LD_VAR 0 4
27913: PUSH
27914: FOR_TO
27915: IFFALSE 27944
// begin units_path := Replace ( units_path , i , path ) ;
27917: LD_ADDR_VAR 0 14
27921: PUSH
27922: LD_VAR 0 14
27926: PPUSH
27927: LD_VAR 0 7
27931: PPUSH
27932: LD_VAR 0 5
27936: PPUSH
27937: CALL_OW 1
27941: ST_TO_ADDR
// end ;
27942: GO 27914
27944: POP
27945: POP
// repeat for i = group downto 1 do
27946: LD_ADDR_VAR 0 7
27950: PUSH
27951: DOUBLE
27952: LD_VAR 0 4
27956: INC
27957: ST_TO_ADDR
27958: LD_INT 1
27960: PUSH
27961: FOR_DOWNTO
27962: IFFALSE 30513
// begin tmp := [ ] ;
27964: LD_ADDR_VAR 0 12
27968: PUSH
27969: EMPTY
27970: ST_TO_ADDR
// attacking := false ;
27971: LD_ADDR_VAR 0 27
27975: PUSH
27976: LD_INT 0
27978: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
27979: LD_VAR 0 4
27983: PUSH
27984: LD_VAR 0 7
27988: ARRAY
27989: PPUSH
27990: CALL_OW 301
27994: PUSH
27995: LD_VAR 0 4
27999: PUSH
28000: LD_VAR 0 7
28004: ARRAY
28005: NOT
28006: OR
28007: IFFALSE 28051
// begin group := Delete ( group , i ) ;
28009: LD_ADDR_VAR 0 4
28013: PUSH
28014: LD_VAR 0 4
28018: PPUSH
28019: LD_VAR 0 7
28023: PPUSH
28024: CALL_OW 3
28028: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
28029: LD_ADDR_VAR 0 14
28033: PUSH
28034: LD_VAR 0 14
28038: PPUSH
28039: LD_VAR 0 7
28043: PPUSH
28044: CALL_OW 3
28048: ST_TO_ADDR
// continue ;
28049: GO 27961
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
28051: LD_VAR 0 4
28055: PUSH
28056: LD_VAR 0 7
28060: ARRAY
28061: PPUSH
28062: LD_INT 10
28064: PPUSH
28065: CALL 26704 0 2
28069: NOT
28070: PUSH
28071: LD_VAR 0 14
28075: PUSH
28076: LD_VAR 0 7
28080: ARRAY
28081: PUSH
28082: EMPTY
28083: EQUAL
28084: NOT
28085: AND
28086: IFFALSE 28370
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
28088: LD_VAR 0 4
28092: PUSH
28093: LD_VAR 0 7
28097: ARRAY
28098: PPUSH
28099: CALL_OW 262
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: LD_INT 2
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: IN
28114: IFFALSE 28173
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
28116: LD_VAR 0 4
28120: PUSH
28121: LD_VAR 0 7
28125: ARRAY
28126: PPUSH
28127: CALL_OW 261
28131: PUSH
28132: LD_INT 10
28134: LESS
28135: PUSH
28136: LD_VAR 0 4
28140: PUSH
28141: LD_VAR 0 7
28145: ARRAY
28146: PPUSH
28147: CALL 26761 0 1
28151: NOT
28152: AND
28153: IFFALSE 28173
// SetFuel ( group [ i ] , 12 ) ;
28155: LD_VAR 0 4
28159: PUSH
28160: LD_VAR 0 7
28164: ARRAY
28165: PPUSH
28166: LD_INT 12
28168: PPUSH
28169: CALL_OW 240
// if units_path [ i ] then
28173: LD_VAR 0 14
28177: PUSH
28178: LD_VAR 0 7
28182: ARRAY
28183: IFFALSE 28368
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
28185: LD_VAR 0 4
28189: PUSH
28190: LD_VAR 0 7
28194: ARRAY
28195: PPUSH
28196: LD_VAR 0 14
28200: PUSH
28201: LD_VAR 0 7
28205: ARRAY
28206: PUSH
28207: LD_INT 1
28209: ARRAY
28210: PUSH
28211: LD_INT 1
28213: ARRAY
28214: PPUSH
28215: LD_VAR 0 14
28219: PUSH
28220: LD_VAR 0 7
28224: ARRAY
28225: PUSH
28226: LD_INT 1
28228: ARRAY
28229: PUSH
28230: LD_INT 2
28232: ARRAY
28233: PPUSH
28234: CALL_OW 297
28238: PUSH
28239: LD_INT 6
28241: GREATER
28242: IFFALSE 28317
// begin if not HasTask ( group [ i ] ) then
28244: LD_VAR 0 4
28248: PUSH
28249: LD_VAR 0 7
28253: ARRAY
28254: PPUSH
28255: CALL_OW 314
28259: NOT
28260: IFFALSE 28315
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
28262: LD_VAR 0 4
28266: PUSH
28267: LD_VAR 0 7
28271: ARRAY
28272: PPUSH
28273: LD_VAR 0 14
28277: PUSH
28278: LD_VAR 0 7
28282: ARRAY
28283: PUSH
28284: LD_INT 1
28286: ARRAY
28287: PUSH
28288: LD_INT 1
28290: ARRAY
28291: PPUSH
28292: LD_VAR 0 14
28296: PUSH
28297: LD_VAR 0 7
28301: ARRAY
28302: PUSH
28303: LD_INT 1
28305: ARRAY
28306: PUSH
28307: LD_INT 2
28309: ARRAY
28310: PPUSH
28311: CALL_OW 114
// end else
28315: GO 28368
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
28317: LD_ADDR_VAR 0 13
28321: PUSH
28322: LD_VAR 0 14
28326: PUSH
28327: LD_VAR 0 7
28331: ARRAY
28332: PPUSH
28333: LD_INT 1
28335: PPUSH
28336: CALL_OW 3
28340: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
28341: LD_ADDR_VAR 0 14
28345: PUSH
28346: LD_VAR 0 14
28350: PPUSH
28351: LD_VAR 0 7
28355: PPUSH
28356: LD_VAR 0 13
28360: PPUSH
28361: CALL_OW 1
28365: ST_TO_ADDR
// continue ;
28366: GO 27961
// end ; end ; end else
28368: GO 30511
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
28370: LD_ADDR_VAR 0 12
28374: PUSH
28375: LD_INT 81
28377: PUSH
28378: LD_VAR 0 4
28382: PUSH
28383: LD_VAR 0 7
28387: ARRAY
28388: PPUSH
28389: CALL_OW 255
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PPUSH
28398: CALL_OW 69
28402: ST_TO_ADDR
// if not tmp then
28403: LD_VAR 0 12
28407: NOT
28408: IFFALSE 28412
// continue ;
28410: GO 27961
// if f_ignore_area then
28412: LD_VAR 0 15
28416: IFFALSE 28504
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
28418: LD_ADDR_VAR 0 13
28422: PUSH
28423: LD_VAR 0 12
28427: PPUSH
28428: LD_INT 3
28430: PUSH
28431: LD_INT 92
28433: PUSH
28434: LD_VAR 0 15
28438: PUSH
28439: LD_INT 1
28441: ARRAY
28442: PUSH
28443: LD_VAR 0 15
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: PUSH
28452: LD_VAR 0 15
28456: PUSH
28457: LD_INT 3
28459: ARRAY
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PPUSH
28471: CALL_OW 72
28475: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
28476: LD_VAR 0 12
28480: PUSH
28481: LD_VAR 0 13
28485: DIFF
28486: IFFALSE 28504
// tmp := tmp diff tmp2 ;
28488: LD_ADDR_VAR 0 12
28492: PUSH
28493: LD_VAR 0 12
28497: PUSH
28498: LD_VAR 0 13
28502: DIFF
28503: ST_TO_ADDR
// end ; if not f_murder then
28504: LD_VAR 0 18
28508: NOT
28509: IFFALSE 28567
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
28511: LD_ADDR_VAR 0 13
28515: PUSH
28516: LD_VAR 0 12
28520: PPUSH
28521: LD_INT 3
28523: PUSH
28524: LD_INT 50
28526: PUSH
28527: EMPTY
28528: LIST
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PPUSH
28534: CALL_OW 72
28538: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
28539: LD_VAR 0 12
28543: PUSH
28544: LD_VAR 0 13
28548: DIFF
28549: IFFALSE 28567
// tmp := tmp diff tmp2 ;
28551: LD_ADDR_VAR 0 12
28555: PUSH
28556: LD_VAR 0 12
28560: PUSH
28561: LD_VAR 0 13
28565: DIFF
28566: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
28567: LD_ADDR_VAR 0 12
28571: PUSH
28572: LD_VAR 0 4
28576: PUSH
28577: LD_VAR 0 7
28581: ARRAY
28582: PPUSH
28583: LD_VAR 0 12
28587: PPUSH
28588: LD_INT 1
28590: PPUSH
28591: LD_INT 1
28593: PPUSH
28594: CALL 1978 0 4
28598: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
28599: LD_VAR 0 4
28603: PUSH
28604: LD_VAR 0 7
28608: ARRAY
28609: PPUSH
28610: CALL_OW 257
28614: PUSH
28615: LD_INT 1
28617: EQUAL
28618: IFFALSE 28953
// begin if WantPlant ( group [ i ] ) then
28620: LD_VAR 0 4
28624: PUSH
28625: LD_VAR 0 7
28629: ARRAY
28630: PPUSH
28631: CALL 1446 0 1
28635: IFFALSE 28639
// continue ;
28637: GO 27961
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
28639: LD_VAR 0 16
28643: PUSH
28644: LD_VAR 0 4
28648: PUSH
28649: LD_VAR 0 7
28653: ARRAY
28654: PPUSH
28655: CALL_OW 310
28659: NOT
28660: AND
28661: PUSH
28662: LD_VAR 0 12
28666: PUSH
28667: LD_INT 1
28669: ARRAY
28670: PUSH
28671: LD_VAR 0 12
28675: PPUSH
28676: LD_INT 21
28678: PUSH
28679: LD_INT 2
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 58
28688: PUSH
28689: EMPTY
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 72
28700: IN
28701: AND
28702: IFFALSE 28738
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
28704: LD_VAR 0 4
28708: PUSH
28709: LD_VAR 0 7
28713: ARRAY
28714: PPUSH
28715: LD_VAR 0 12
28719: PUSH
28720: LD_INT 1
28722: ARRAY
28723: PPUSH
28724: CALL_OW 120
// attacking := true ;
28728: LD_ADDR_VAR 0 27
28732: PUSH
28733: LD_INT 1
28735: ST_TO_ADDR
// continue ;
28736: GO 27961
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
28738: LD_VAR 0 24
28742: PUSH
28743: LD_VAR 0 4
28747: PUSH
28748: LD_VAR 0 7
28752: ARRAY
28753: PPUSH
28754: CALL_OW 256
28758: PUSH
28759: LD_INT 800
28761: LESS
28762: AND
28763: PUSH
28764: LD_VAR 0 4
28768: PUSH
28769: LD_VAR 0 7
28773: ARRAY
28774: PPUSH
28775: CALL_OW 318
28779: NOT
28780: AND
28781: IFFALSE 28798
// ComCrawl ( group [ i ] ) ;
28783: LD_VAR 0 4
28787: PUSH
28788: LD_VAR 0 7
28792: ARRAY
28793: PPUSH
28794: CALL_OW 137
// if f_mines then
28798: LD_VAR 0 19
28802: IFFALSE 28953
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
28804: LD_VAR 0 12
28808: PUSH
28809: LD_INT 1
28811: ARRAY
28812: PPUSH
28813: CALL_OW 247
28817: PUSH
28818: LD_INT 3
28820: EQUAL
28821: PUSH
28822: LD_VAR 0 12
28826: PUSH
28827: LD_INT 1
28829: ARRAY
28830: PUSH
28831: LD_VAR 0 25
28835: IN
28836: NOT
28837: AND
28838: IFFALSE 28953
// begin ComPlaceDelayedCharge ( group [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , tmp [ 1 ] ) ;
28840: LD_VAR 0 4
28844: PUSH
28845: LD_VAR 0 7
28849: ARRAY
28850: PPUSH
28851: LD_VAR 0 12
28855: PUSH
28856: LD_INT 1
28858: ARRAY
28859: PPUSH
28860: CALL_OW 250
28864: PPUSH
28865: LD_VAR 0 12
28869: PUSH
28870: LD_INT 1
28872: ARRAY
28873: PPUSH
28874: CALL_OW 251
28878: PPUSH
28879: LD_VAR 0 12
28883: PUSH
28884: LD_INT 1
28886: ARRAY
28887: PPUSH
28888: CALL_OW 132
// AddComWait ( group [ i ] , 0 0$2 ) ;
28892: LD_VAR 0 4
28896: PUSH
28897: LD_VAR 0 7
28901: ARRAY
28902: PPUSH
28903: LD_INT 70
28905: PPUSH
28906: CALL_OW 202
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
28910: LD_ADDR_VAR 0 25
28914: PUSH
28915: LD_VAR 0 25
28919: PPUSH
28920: LD_VAR 0 25
28924: PUSH
28925: LD_INT 1
28927: PLUS
28928: PPUSH
28929: LD_VAR 0 12
28933: PUSH
28934: LD_INT 1
28936: ARRAY
28937: PPUSH
28938: CALL_OW 1
28942: ST_TO_ADDR
// attacking := true ;
28943: LD_ADDR_VAR 0 27
28947: PUSH
28948: LD_INT 1
28950: ST_TO_ADDR
// continue ;
28951: GO 27961
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
28953: LD_VAR 0 4
28957: PUSH
28958: LD_VAR 0 7
28962: ARRAY
28963: PPUSH
28964: CALL_OW 257
28968: PUSH
28969: LD_INT 17
28971: EQUAL
28972: IFFALSE 29092
// begin k := 3 ;
28974: LD_ADDR_VAR 0 9
28978: PUSH
28979: LD_INT 3
28981: ST_TO_ADDR
// if tmp < k then
28982: LD_VAR 0 12
28986: PUSH
28987: LD_VAR 0 9
28991: LESS
28992: IFFALSE 29004
// k := tmp ;
28994: LD_ADDR_VAR 0 9
28998: PUSH
28999: LD_VAR 0 12
29003: ST_TO_ADDR
// for j = 1 to k do
29004: LD_ADDR_VAR 0 8
29008: PUSH
29009: DOUBLE
29010: LD_INT 1
29012: DEC
29013: ST_TO_ADDR
29014: LD_VAR 0 9
29018: PUSH
29019: FOR_TO
29020: IFFALSE 29090
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
29022: LD_VAR 0 12
29026: PUSH
29027: LD_VAR 0 8
29031: ARRAY
29032: PUSH
29033: LD_VAR 0 12
29037: PPUSH
29038: LD_INT 58
29040: PUSH
29041: EMPTY
29042: LIST
29043: PPUSH
29044: CALL_OW 72
29048: IN
29049: NOT
29050: IFFALSE 29088
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
29052: LD_VAR 0 4
29056: PUSH
29057: LD_VAR 0 7
29061: ARRAY
29062: PPUSH
29063: LD_VAR 0 12
29067: PUSH
29068: LD_VAR 0 8
29072: ARRAY
29073: PPUSH
29074: CALL_OW 115
// attacking := true ;
29078: LD_ADDR_VAR 0 27
29082: PUSH
29083: LD_INT 1
29085: ST_TO_ADDR
// break ;
29086: GO 29090
// end ; end ;
29088: GO 29019
29090: POP
29091: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
29092: LD_VAR 0 4
29096: PUSH
29097: LD_VAR 0 7
29101: ARRAY
29102: PPUSH
29103: CALL_OW 257
29107: PUSH
29108: LD_INT 8
29110: EQUAL
29111: PUSH
29112: LD_VAR 0 4
29116: PUSH
29117: LD_VAR 0 7
29121: ARRAY
29122: PPUSH
29123: CALL_OW 264
29127: PUSH
29128: LD_INT 28
29130: PUSH
29131: LD_INT 45
29133: PUSH
29134: LD_INT 7
29136: PUSH
29137: LD_INT 47
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: LIST
29145: IN
29146: OR
29147: IFFALSE 29403
// begin if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
29149: LD_VAR 0 12
29153: PUSH
29154: LD_INT 1
29156: ARRAY
29157: PPUSH
29158: CALL_OW 266
29162: PUSH
29163: LD_INT 32
29165: PUSH
29166: LD_INT 31
29168: PUSH
29169: LD_INT 33
29171: PUSH
29172: LD_INT 4
29174: PUSH
29175: LD_INT 5
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: IN
29185: IFFALSE 29371
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
29187: LD_ADDR_VAR 0 9
29191: PUSH
29192: LD_VAR 0 12
29196: PUSH
29197: LD_INT 1
29199: ARRAY
29200: PPUSH
29201: CALL_OW 266
29205: PPUSH
29206: LD_VAR 0 12
29210: PUSH
29211: LD_INT 1
29213: ARRAY
29214: PPUSH
29215: CALL_OW 250
29219: PPUSH
29220: LD_VAR 0 12
29224: PUSH
29225: LD_INT 1
29227: ARRAY
29228: PPUSH
29229: CALL_OW 251
29233: PPUSH
29234: LD_VAR 0 12
29238: PUSH
29239: LD_INT 1
29241: ARRAY
29242: PPUSH
29243: CALL_OW 254
29247: PPUSH
29248: LD_VAR 0 12
29252: PUSH
29253: LD_INT 1
29255: ARRAY
29256: PPUSH
29257: CALL_OW 248
29261: PPUSH
29262: LD_INT 0
29264: PPUSH
29265: CALL 8165 0 6
29269: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
29270: LD_ADDR_VAR 0 8
29274: PUSH
29275: LD_VAR 0 4
29279: PUSH
29280: LD_VAR 0 7
29284: ARRAY
29285: PPUSH
29286: LD_VAR 0 9
29290: PPUSH
29291: CALL 26789 0 2
29295: ST_TO_ADDR
// if j then
29296: LD_VAR 0 8
29300: IFFALSE 29369
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29302: LD_VAR 0 8
29306: PUSH
29307: LD_INT 1
29309: ARRAY
29310: PPUSH
29311: LD_VAR 0 8
29315: PUSH
29316: LD_INT 2
29318: ARRAY
29319: PPUSH
29320: CALL_OW 488
29324: IFFALSE 29369
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
29326: LD_VAR 0 4
29330: PUSH
29331: LD_VAR 0 7
29335: ARRAY
29336: PPUSH
29337: LD_VAR 0 8
29341: PUSH
29342: LD_INT 1
29344: ARRAY
29345: PPUSH
29346: LD_VAR 0 8
29350: PUSH
29351: LD_INT 2
29353: ARRAY
29354: PPUSH
29355: CALL_OW 116
// attacking := true ;
29359: LD_ADDR_VAR 0 27
29363: PUSH
29364: LD_INT 1
29366: ST_TO_ADDR
// continue ;
29367: GO 27961
// end ; end else
29369: GO 29403
// begin ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
29371: LD_VAR 0 4
29375: PUSH
29376: LD_VAR 0 7
29380: ARRAY
29381: PPUSH
29382: LD_VAR 0 12
29386: PUSH
29387: LD_INT 1
29389: ARRAY
29390: PPUSH
29391: CALL_OW 115
// attacking := true ;
29395: LD_ADDR_VAR 0 27
29399: PUSH
29400: LD_INT 1
29402: ST_TO_ADDR
// end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
29403: LD_VAR 0 4
29407: PUSH
29408: LD_VAR 0 7
29412: ARRAY
29413: PPUSH
29414: CALL_OW 265
29418: PUSH
29419: LD_INT 11
29421: EQUAL
29422: IFFALSE 29700
// begin k := 10 ;
29424: LD_ADDR_VAR 0 9
29428: PUSH
29429: LD_INT 10
29431: ST_TO_ADDR
// x := 0 ;
29432: LD_ADDR_VAR 0 10
29436: PUSH
29437: LD_INT 0
29439: ST_TO_ADDR
// if tmp < k then
29440: LD_VAR 0 12
29444: PUSH
29445: LD_VAR 0 9
29449: LESS
29450: IFFALSE 29462
// k := tmp ;
29452: LD_ADDR_VAR 0 9
29456: PUSH
29457: LD_VAR 0 12
29461: ST_TO_ADDR
// for j = k downto 1 do
29462: LD_ADDR_VAR 0 8
29466: PUSH
29467: DOUBLE
29468: LD_VAR 0 9
29472: INC
29473: ST_TO_ADDR
29474: LD_INT 1
29476: PUSH
29477: FOR_DOWNTO
29478: IFFALSE 29553
// begin if GetType ( tmp [ j ] ) = unit_human then
29480: LD_VAR 0 12
29484: PUSH
29485: LD_VAR 0 8
29489: ARRAY
29490: PPUSH
29491: CALL_OW 247
29495: PUSH
29496: LD_INT 1
29498: EQUAL
29499: IFFALSE 29551
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
29501: LD_VAR 0 4
29505: PUSH
29506: LD_VAR 0 7
29510: ARRAY
29511: PPUSH
29512: LD_VAR 0 12
29516: PUSH
29517: LD_VAR 0 8
29521: ARRAY
29522: PPUSH
29523: CALL 27060 0 2
// x := tmp [ j ] ;
29527: LD_ADDR_VAR 0 10
29531: PUSH
29532: LD_VAR 0 12
29536: PUSH
29537: LD_VAR 0 8
29541: ARRAY
29542: ST_TO_ADDR
// attacking := true ;
29543: LD_ADDR_VAR 0 27
29547: PUSH
29548: LD_INT 1
29550: ST_TO_ADDR
// end ; end ;
29551: GO 29477
29553: POP
29554: POP
// if not x then
29555: LD_VAR 0 10
29559: NOT
29560: IFFALSE 29700
// begin attacking := true ;
29562: LD_ADDR_VAR 0 27
29566: PUSH
29567: LD_INT 1
29569: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
29570: LD_VAR 0 4
29574: PUSH
29575: LD_VAR 0 7
29579: ARRAY
29580: PPUSH
29581: CALL_OW 250
29585: PPUSH
29586: LD_VAR 0 4
29590: PUSH
29591: LD_VAR 0 7
29595: ARRAY
29596: PPUSH
29597: CALL_OW 251
29601: PPUSH
29602: CALL_OW 546
29606: PUSH
29607: LD_INT 2
29609: ARRAY
29610: PUSH
29611: LD_VAR 0 12
29615: PUSH
29616: LD_INT 1
29618: ARRAY
29619: PPUSH
29620: CALL_OW 250
29624: PPUSH
29625: LD_VAR 0 12
29629: PUSH
29630: LD_INT 1
29632: ARRAY
29633: PPUSH
29634: CALL_OW 251
29638: PPUSH
29639: CALL_OW 546
29643: PUSH
29644: LD_INT 2
29646: ARRAY
29647: EQUAL
29648: IFFALSE 29676
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
29650: LD_VAR 0 4
29654: PUSH
29655: LD_VAR 0 7
29659: ARRAY
29660: PPUSH
29661: LD_VAR 0 12
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: PPUSH
29670: CALL 27060 0 2
29674: GO 29700
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
29676: LD_VAR 0 4
29680: PUSH
29681: LD_VAR 0 7
29685: ARRAY
29686: PPUSH
29687: LD_VAR 0 12
29691: PUSH
29692: LD_INT 1
29694: ARRAY
29695: PPUSH
29696: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
29700: LD_VAR 0 4
29704: PUSH
29705: LD_VAR 0 7
29709: ARRAY
29710: PPUSH
29711: CALL_OW 264
29715: PUSH
29716: LD_INT 29
29718: EQUAL
29719: IFFALSE 29979
// begin if WantsToAttack ( group [ i ] ) in bombed then
29721: LD_VAR 0 4
29725: PUSH
29726: LD_VAR 0 7
29730: ARRAY
29731: PPUSH
29732: CALL_OW 319
29736: PUSH
29737: LD_VAR 0 26
29741: IN
29742: IFFALSE 29746
// continue ;
29744: GO 27961
// k := 8 ;
29746: LD_ADDR_VAR 0 9
29750: PUSH
29751: LD_INT 8
29753: ST_TO_ADDR
// x := 0 ;
29754: LD_ADDR_VAR 0 10
29758: PUSH
29759: LD_INT 0
29761: ST_TO_ADDR
// if tmp < k then
29762: LD_VAR 0 12
29766: PUSH
29767: LD_VAR 0 9
29771: LESS
29772: IFFALSE 29784
// k := tmp ;
29774: LD_ADDR_VAR 0 9
29778: PUSH
29779: LD_VAR 0 12
29783: ST_TO_ADDR
// for j = 1 to k do
29784: LD_ADDR_VAR 0 8
29788: PUSH
29789: DOUBLE
29790: LD_INT 1
29792: DEC
29793: ST_TO_ADDR
29794: LD_VAR 0 9
29798: PUSH
29799: FOR_TO
29800: IFFALSE 29924
// begin if GetType ( tmp [ j ] ) = unit_building then
29802: LD_VAR 0 12
29806: PUSH
29807: LD_VAR 0 8
29811: ARRAY
29812: PPUSH
29813: CALL_OW 247
29817: PUSH
29818: LD_INT 3
29820: EQUAL
29821: IFFALSE 29922
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
29823: LD_VAR 0 12
29827: PUSH
29828: LD_VAR 0 8
29832: ARRAY
29833: PUSH
29834: LD_VAR 0 26
29838: IN
29839: NOT
29840: PUSH
29841: LD_VAR 0 12
29845: PUSH
29846: LD_VAR 0 8
29850: ARRAY
29851: PPUSH
29852: CALL_OW 313
29856: AND
29857: IFFALSE 29922
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
29859: LD_VAR 0 4
29863: PUSH
29864: LD_VAR 0 7
29868: ARRAY
29869: PPUSH
29870: LD_VAR 0 12
29874: PUSH
29875: LD_VAR 0 8
29879: ARRAY
29880: PPUSH
29881: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
29885: LD_ADDR_VAR 0 26
29889: PUSH
29890: LD_VAR 0 26
29894: PPUSH
29895: LD_VAR 0 26
29899: PUSH
29900: LD_INT 1
29902: PLUS
29903: PPUSH
29904: LD_VAR 0 12
29908: PUSH
29909: LD_VAR 0 8
29913: ARRAY
29914: PPUSH
29915: CALL_OW 1
29919: ST_TO_ADDR
// break ;
29920: GO 29924
// end ; end ;
29922: GO 29799
29924: POP
29925: POP
// attacking := true ;
29926: LD_ADDR_VAR 0 27
29930: PUSH
29931: LD_INT 1
29933: ST_TO_ADDR
// if GetLives ( group [ i ] ) < 500 then
29934: LD_VAR 0 4
29938: PUSH
29939: LD_VAR 0 7
29943: ARRAY
29944: PPUSH
29945: CALL_OW 256
29949: PUSH
29950: LD_INT 500
29952: LESS
29953: IFFALSE 29979
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
29955: LD_VAR 0 4
29959: PUSH
29960: LD_VAR 0 7
29964: ARRAY
29965: PPUSH
29966: LD_VAR 0 12
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
29979: LD_VAR 0 4
29983: PUSH
29984: LD_VAR 0 7
29988: ARRAY
29989: PPUSH
29990: CALL_OW 256
29994: PUSH
29995: LD_INT 250
29997: LESS
29998: PUSH
29999: LD_VAR 0 4
30003: PUSH
30004: LD_VAR 0 7
30008: ARRAY
30009: PUSH
30010: LD_INT 21
30012: PUSH
30013: LD_INT 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 23
30022: PUSH
30023: LD_INT 2
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: IN
30039: AND
30040: IFFALSE 30165
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
30042: LD_ADDR_VAR 0 9
30046: PUSH
30047: LD_OWVAR 3
30051: PUSH
30052: LD_VAR 0 4
30056: PUSH
30057: LD_VAR 0 7
30061: ARRAY
30062: DIFF
30063: PPUSH
30064: LD_VAR 0 4
30068: PUSH
30069: LD_VAR 0 7
30073: ARRAY
30074: PPUSH
30075: CALL_OW 74
30079: ST_TO_ADDR
// if not k then
30080: LD_VAR 0 9
30084: NOT
30085: IFFALSE 30089
// continue ;
30087: GO 27961
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
30089: LD_VAR 0 9
30093: PUSH
30094: LD_INT 81
30096: PUSH
30097: LD_VAR 0 4
30101: PUSH
30102: LD_VAR 0 7
30106: ARRAY
30107: PPUSH
30108: CALL_OW 255
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PPUSH
30117: CALL_OW 69
30121: IN
30122: PUSH
30123: LD_VAR 0 9
30127: PPUSH
30128: LD_VAR 0 4
30132: PUSH
30133: LD_VAR 0 7
30137: ARRAY
30138: PPUSH
30139: CALL_OW 296
30143: PUSH
30144: LD_INT 5
30146: LESS
30147: AND
30148: IFFALSE 30165
// ComAutodestruct ( group [ i ] ) ;
30150: LD_VAR 0 4
30154: PUSH
30155: LD_VAR 0 7
30159: ARRAY
30160: PPUSH
30161: CALL 26958 0 1
// end ; if f_attack_depot then
30165: LD_VAR 0 23
30169: IFFALSE 30281
// begin k := 6 ;
30171: LD_ADDR_VAR 0 9
30175: PUSH
30176: LD_INT 6
30178: ST_TO_ADDR
// if tmp < k then
30179: LD_VAR 0 12
30183: PUSH
30184: LD_VAR 0 9
30188: LESS
30189: IFFALSE 30201
// k := tmp ;
30191: LD_ADDR_VAR 0 9
30195: PUSH
30196: LD_VAR 0 12
30200: ST_TO_ADDR
// for j = 1 to k do
30201: LD_ADDR_VAR 0 8
30205: PUSH
30206: DOUBLE
30207: LD_INT 1
30209: DEC
30210: ST_TO_ADDR
30211: LD_VAR 0 9
30215: PUSH
30216: FOR_TO
30217: IFFALSE 30279
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
30219: LD_VAR 0 8
30223: PPUSH
30224: CALL_OW 266
30228: PUSH
30229: LD_INT 0
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: IN
30239: IFFALSE 30277
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30241: LD_VAR 0 4
30245: PUSH
30246: LD_VAR 0 7
30250: ARRAY
30251: PPUSH
30252: LD_VAR 0 12
30256: PUSH
30257: LD_VAR 0 8
30261: ARRAY
30262: PPUSH
30263: CALL_OW 115
// attacking := true ;
30267: LD_ADDR_VAR 0 27
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// break ;
30275: GO 30279
// end ;
30277: GO 30216
30279: POP
30280: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
30281: LD_VAR 0 4
30285: PUSH
30286: LD_VAR 0 7
30290: ARRAY
30291: PPUSH
30292: CALL_OW 302
30296: PUSH
30297: LD_VAR 0 27
30301: NOT
30302: AND
30303: IFFALSE 30511
// begin k := 8 ;
30305: LD_ADDR_VAR 0 9
30309: PUSH
30310: LD_INT 8
30312: ST_TO_ADDR
// x := 0 ;
30313: LD_ADDR_VAR 0 10
30317: PUSH
30318: LD_INT 0
30320: ST_TO_ADDR
// if tmp < k then
30321: LD_VAR 0 12
30325: PUSH
30326: LD_VAR 0 9
30330: LESS
30331: IFFALSE 30343
// k := tmp ;
30333: LD_ADDR_VAR 0 9
30337: PUSH
30338: LD_VAR 0 12
30342: ST_TO_ADDR
// for j = 1 to k do
30343: LD_ADDR_VAR 0 8
30347: PUSH
30348: DOUBLE
30349: LD_INT 1
30351: DEC
30352: ST_TO_ADDR
30353: LD_VAR 0 9
30357: PUSH
30358: FOR_TO
30359: IFFALSE 30457
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
30361: LD_VAR 0 12
30365: PUSH
30366: LD_VAR 0 8
30370: ARRAY
30371: PPUSH
30372: CALL_OW 247
30376: PUSH
30377: LD_INT 1
30379: EQUAL
30380: PUSH
30381: LD_VAR 0 12
30385: PUSH
30386: LD_VAR 0 8
30390: ARRAY
30391: PPUSH
30392: CALL_OW 256
30396: PUSH
30397: LD_INT 250
30399: LESS
30400: PUSH
30401: LD_VAR 0 18
30405: AND
30406: PUSH
30407: LD_VAR 0 18
30411: NOT
30412: PUSH
30413: LD_VAR 0 12
30417: PUSH
30418: LD_VAR 0 8
30422: ARRAY
30423: PPUSH
30424: CALL_OW 256
30428: PUSH
30429: LD_INT 250
30431: GREATEREQUAL
30432: AND
30433: OR
30434: AND
30435: IFFALSE 30455
// begin x := tmp [ j ] ;
30437: LD_ADDR_VAR 0 10
30441: PUSH
30442: LD_VAR 0 12
30446: PUSH
30447: LD_VAR 0 8
30451: ARRAY
30452: ST_TO_ADDR
// break ;
30453: GO 30457
// end ;
30455: GO 30358
30457: POP
30458: POP
// if x then
30459: LD_VAR 0 10
30463: IFFALSE 30487
// ComAttackUnit ( group [ i ] , x ) else
30465: LD_VAR 0 4
30469: PUSH
30470: LD_VAR 0 7
30474: ARRAY
30475: PPUSH
30476: LD_VAR 0 10
30480: PPUSH
30481: CALL_OW 115
30485: GO 30511
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
30487: LD_VAR 0 4
30491: PUSH
30492: LD_VAR 0 7
30496: ARRAY
30497: PPUSH
30498: LD_VAR 0 12
30502: PUSH
30503: LD_INT 1
30505: ARRAY
30506: PPUSH
30507: CALL_OW 115
// end ; end ; end ;
30511: GO 27961
30513: POP
30514: POP
// wait ( 0 0$1 ) ;
30515: LD_INT 35
30517: PPUSH
30518: CALL_OW 67
// until group = [ ] ;
30522: LD_VAR 0 4
30526: PUSH
30527: EMPTY
30528: EQUAL
30529: IFFALSE 27946
// end ; end_of_file
30531: LD_VAR 0 2
30535: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba ; export function PrepareArabian ; var i , d , un , skill ; begin
30536: LD_INT 0
30538: PPUSH
30539: PPUSH
30540: PPUSH
30541: PPUSH
30542: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
30543: LD_ADDR_VAR 0 5
30547: PUSH
30548: LD_INT 6
30550: PUSH
30551: LD_INT 7
30553: PUSH
30554: LD_INT 8
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: LIST
30561: PUSH
30562: LD_OWVAR 67
30566: ARRAY
30567: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
30568: LD_INT 69
30570: PUSH
30571: EMPTY
30572: LIST
30573: PPUSH
30574: LD_INT 141
30576: PPUSH
30577: CALL_OW 169
// Wait ( 1 ) ;
30581: LD_INT 1
30583: PPUSH
30584: CALL_OW 67
// uc_side := 2 ;
30588: LD_ADDR_OWVAR 20
30592: PUSH
30593: LD_INT 2
30595: ST_TO_ADDR
// uc_nation := 2 ;
30596: LD_ADDR_OWVAR 21
30600: PUSH
30601: LD_INT 2
30603: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
30604: LD_ADDR_OWVAR 37
30608: PUSH
30609: LD_INT 14
30611: ST_TO_ADDR
// vc_engine := engine_siberite ;
30612: LD_ADDR_OWVAR 39
30616: PUSH
30617: LD_INT 3
30619: ST_TO_ADDR
// vc_control := control_manual ;
30620: LD_ADDR_OWVAR 38
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
30628: LD_ADDR_OWVAR 40
30632: PUSH
30633: LD_INT 31
30635: ST_TO_ADDR
// for i = 1 to 3 do
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: DOUBLE
30642: LD_INT 1
30644: DEC
30645: ST_TO_ADDR
30646: LD_INT 3
30648: PUSH
30649: FOR_TO
30650: IFFALSE 30734
// begin PrepareHuman ( false , class_mechanic , skill ) ;
30652: LD_INT 0
30654: PPUSH
30655: LD_INT 3
30657: PPUSH
30658: LD_VAR 0 5
30662: PPUSH
30663: CALL_OW 380
// un := CreateVehicle ;
30667: LD_ADDR_VAR 0 4
30671: PUSH
30672: CALL_OW 45
30676: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
30677: LD_VAR 0 4
30681: PPUSH
30682: LD_INT 0
30684: PPUSH
30685: LD_INT 5
30687: PPUSH
30688: CALL_OW 12
30692: PPUSH
30693: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
30697: LD_VAR 0 4
30701: PPUSH
30702: LD_INT 156
30704: PPUSH
30705: LD_INT 15
30707: PPUSH
30708: LD_INT 6
30710: PPUSH
30711: LD_INT 0
30713: PPUSH
30714: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
30718: CALL_OW 44
30722: PPUSH
30723: LD_VAR 0 4
30727: PPUSH
30728: CALL_OW 52
// end ;
30732: GO 30649
30734: POP
30735: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 3000 , 500 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
30736: LD_ADDR_EXP 24
30740: PUSH
30741: LD_INT 94
30743: PPUSH
30744: LD_STRING dammam
30746: PPUSH
30747: LD_VAR 0 5
30751: PPUSH
30752: LD_INT 3000
30754: PUSH
30755: LD_INT 500
30757: PUSH
30758: LD_INT 300
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PPUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: LD_INT 4
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: PPUSH
30787: CALL 4737 0 5
30791: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
30792: LD_ADDR_EXP 24
30796: PUSH
30797: LD_EXP 24
30801: PUSH
30802: LD_INT 122
30804: PPUSH
30805: LD_STRING 
30807: PPUSH
30808: LD_VAR 0 5
30812: PPUSH
30813: LD_INT 100
30815: PUSH
30816: LD_INT 60
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: PPUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: LD_INT 4
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: PPUSH
30846: CALL 4737 0 5
30850: ADD
30851: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 0 , 2 ] ) ;
30852: LD_ADDR_EXP 22
30856: PUSH
30857: LD_INT 45
30859: PPUSH
30860: LD_STRING jeddah
30862: PPUSH
30863: LD_VAR 0 5
30867: PPUSH
30868: LD_INT 700
30870: PUSH
30871: LD_INT 300
30873: PUSH
30874: LD_INT 10
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: PPUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: LD_INT 5
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: PPUSH
30901: CALL 4737 0 5
30905: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
30906: LD_ADDR_EXP 23
30910: PUSH
30911: LD_INT 7
30913: PPUSH
30914: LD_STRING riyadh
30916: PPUSH
30917: LD_VAR 0 5
30921: PPUSH
30922: LD_INT 500
30924: PUSH
30925: LD_INT 60
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: LIST
30935: PPUSH
30936: LD_INT 4
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: LD_INT 3
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL 4737 0 5
30958: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 1 , 2 ] ) ;
30959: LD_ADDR_EXP 25
30963: PUSH
30964: LD_INT 69
30966: PPUSH
30967: LD_STRING 
30969: PPUSH
30970: LD_VAR 0 5
30974: PPUSH
30975: LD_INT 500
30977: PUSH
30978: LD_INT 50
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: EMPTY
30985: LIST
30986: LIST
30987: LIST
30988: PPUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: PPUSH
31008: CALL 4737 0 5
31012: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
31013: LD_ADDR_EXP 31
31017: PUSH
31018: LD_EXP 24
31022: PUSH
31023: LD_EXP 22
31027: PUSH
31028: LD_EXP 25
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
31038: LD_ADDR_VAR 0 2
31042: PUSH
31043: LD_INT 22
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 30
31055: PUSH
31056: LD_INT 31
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 58
31065: PUSH
31066: EMPTY
31067: LIST
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: PPUSH
31074: CALL_OW 69
31078: PUSH
31079: FOR_IN
31080: IFFALSE 31205
// begin if GetBase ( i ) then
31082: LD_VAR 0 2
31086: PPUSH
31087: CALL_OW 274
31091: IFFALSE 31095
// continue ;
31093: GO 31079
// d := GetDir ( i ) ;
31095: LD_ADDR_VAR 0 3
31099: PUSH
31100: LD_VAR 0 2
31104: PPUSH
31105: CALL_OW 254
31109: ST_TO_ADDR
// if d < 3 then
31110: LD_VAR 0 3
31114: PUSH
31115: LD_INT 3
31117: LESS
31118: IFFALSE 31136
// d := d + 3 else
31120: LD_ADDR_VAR 0 3
31124: PUSH
31125: LD_VAR 0 3
31129: PUSH
31130: LD_INT 3
31132: PLUS
31133: ST_TO_ADDR
31134: GO 31150
// d := d - 3 ;
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_VAR 0 3
31145: PUSH
31146: LD_INT 3
31148: MINUS
31149: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
31150: LD_INT 0
31152: PPUSH
31153: LD_INT 8
31155: PPUSH
31156: LD_VAR 0 5
31160: PPUSH
31161: CALL_OW 380
// un := CreateHuman ;
31165: LD_ADDR_VAR 0 4
31169: PUSH
31170: CALL_OW 44
31174: ST_TO_ADDR
// SetDir ( un , d ) ;
31175: LD_VAR 0 4
31179: PPUSH
31180: LD_VAR 0 3
31184: PPUSH
31185: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
31189: LD_VAR 0 4
31193: PPUSH
31194: LD_VAR 0 2
31198: PPUSH
31199: CALL_OW 52
// end ;
31203: GO 31079
31205: POP
31206: POP
// ar_force_tmp := [ ] ;
31207: LD_ADDR_EXP 26
31211: PUSH
31212: EMPTY
31213: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
31214: LD_INT 1
31216: PPUSH
31217: LD_INT 1
31219: PPUSH
31220: LD_VAR 0 5
31224: PPUSH
31225: CALL_OW 380
// hc_gallery := SecondCharsGal ;
31229: LD_ADDR_OWVAR 33
31233: PUSH
31234: LD_STRING SecondCharsGal
31236: ST_TO_ADDR
// hc_face_number := 4 ;
31237: LD_ADDR_OWVAR 34
31241: PUSH
31242: LD_INT 4
31244: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
31245: LD_ADDR_EXP 26
31249: PUSH
31250: LD_EXP 26
31254: PPUSH
31255: LD_INT 1
31257: PPUSH
31258: CALL_OW 44
31262: PPUSH
31263: CALL_OW 1
31267: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
31268: LD_INT 2
31270: PPUSH
31271: LD_INT 4
31273: PPUSH
31274: LD_VAR 0 5
31278: PPUSH
31279: CALL_OW 380
// hc_gallery := SecondCharsGal ;
31283: LD_ADDR_OWVAR 33
31287: PUSH
31288: LD_STRING SecondCharsGal
31290: ST_TO_ADDR
// hc_face_number := 15 ;
31291: LD_ADDR_OWVAR 34
31295: PUSH
31296: LD_INT 15
31298: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
31299: LD_ADDR_EXP 26
31303: PUSH
31304: LD_EXP 26
31308: PPUSH
31309: LD_INT 2
31311: PPUSH
31312: CALL_OW 44
31316: PPUSH
31317: CALL_OW 1
31321: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
31322: LD_INT 2
31324: PPUSH
31325: LD_INT 4
31327: PPUSH
31328: LD_VAR 0 5
31332: PPUSH
31333: CALL_OW 380
// hc_gallery :=  ;
31337: LD_ADDR_OWVAR 33
31341: PUSH
31342: LD_STRING 
31344: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
31345: LD_ADDR_EXP 26
31349: PUSH
31350: LD_EXP 26
31354: PPUSH
31355: LD_INT 3
31357: PPUSH
31358: CALL_OW 44
31362: PPUSH
31363: CALL_OW 1
31367: ST_TO_ADDR
// hc_sex := sex_male ;
31368: LD_ADDR_OWVAR 27
31372: PUSH
31373: LD_INT 1
31375: ST_TO_ADDR
// hc_class = 11 ;
31376: LD_ADDR_OWVAR 28
31380: PUSH
31381: LD_INT 11
31383: ST_TO_ADDR
// hc_gallery = sandar ;
31384: LD_ADDR_OWVAR 33
31388: PUSH
31389: LD_STRING sandar
31391: ST_TO_ADDR
// hc_face_number = 33 ;
31392: LD_ADDR_OWVAR 34
31396: PUSH
31397: LD_INT 33
31399: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
31400: LD_ADDR_OWVAR 26
31404: PUSH
31405: LD_STRING Thabit Muhair Saliba
31407: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
31408: LD_ADDR_OWVAR 31
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 0
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: ST_TO_ADDR
// Saliba = CreateHuman ;
31431: LD_ADDR_EXP 28
31435: PUSH
31436: CALL_OW 44
31440: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
31441: LD_EXP 28
31445: PPUSH
31446: LD_INT 7
31448: PPUSH
31449: CALL_OW 52
// ar_vehicles_tmp := [ ] ;
31453: LD_ADDR_EXP 27
31457: PUSH
31458: EMPTY
31459: ST_TO_ADDR
// for i = 1 to 4 do
31460: LD_ADDR_VAR 0 2
31464: PUSH
31465: DOUBLE
31466: LD_INT 1
31468: DEC
31469: ST_TO_ADDR
31470: LD_INT 4
31472: PUSH
31473: FOR_TO
31474: IFFALSE 31646
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
31476: LD_INT 13
31478: PUSH
31479: LD_INT 14
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: PPUSH
31489: LD_INT 2
31491: PPUSH
31492: CALL_OW 12
31496: ARRAY
31497: PPUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: PPUSH
31511: LD_INT 2
31513: PPUSH
31514: CALL_OW 12
31518: ARRAY
31519: PPUSH
31520: LD_INT 1
31522: PPUSH
31523: LD_INT 25
31525: PUSH
31526: LD_INT 27
31528: PUSH
31529: LD_INT 26
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PPUSH
31540: LD_INT 3
31542: PPUSH
31543: CALL_OW 12
31547: ARRAY
31548: PPUSH
31549: LD_INT 60
31551: PPUSH
31552: LD_INT 100
31554: PPUSH
31555: CALL_OW 12
31559: PPUSH
31560: CALL 1388 0 5
// un := CreateVehicle ;
31564: LD_ADDR_VAR 0 4
31568: PUSH
31569: CALL_OW 45
31573: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
31574: LD_ADDR_EXP 27
31578: PUSH
31579: LD_EXP 27
31583: PPUSH
31584: LD_EXP 27
31588: PUSH
31589: LD_INT 1
31591: PLUS
31592: PPUSH
31593: LD_VAR 0 4
31597: PPUSH
31598: CALL_OW 1
31602: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31603: LD_VAR 0 4
31607: PPUSH
31608: LD_INT 0
31610: PPUSH
31611: LD_INT 5
31613: PPUSH
31614: CALL_OW 12
31618: PPUSH
31619: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_INT 124
31630: PPUSH
31631: LD_INT 141
31633: PPUSH
31634: LD_INT 6
31636: PPUSH
31637: LD_INT 0
31639: PPUSH
31640: CALL_OW 50
// end ;
31644: GO 31473
31646: POP
31647: POP
// InitHc ;
31648: CALL_OW 19
// end ; end_of_file
31652: LD_VAR 0 1
31656: RET
// export function Action ; var tmp , p , radar , sols , i ; begin
31657: LD_INT 0
31659: PPUSH
31660: PPUSH
31661: PPUSH
31662: PPUSH
31663: PPUSH
31664: PPUSH
// InGameOn ;
31665: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
31669: LD_EXP 8
31673: PPUSH
31674: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
31678: LD_ADDR_VAR 0 2
31682: PUSH
31683: LD_INT 22
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 25
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PPUSH
31707: CALL_OW 69
31711: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
31712: LD_ADDR_VAR 0 4
31716: PUSH
31717: LD_INT 22
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 34
31729: PUSH
31730: LD_INT 11
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PPUSH
31741: CALL_OW 69
31745: PUSH
31746: LD_INT 1
31748: ARRAY
31749: ST_TO_ADDR
// for i = 1 to tmp do
31750: LD_ADDR_VAR 0 6
31754: PUSH
31755: DOUBLE
31756: LD_INT 1
31758: DEC
31759: ST_TO_ADDR
31760: LD_VAR 0 2
31764: PUSH
31765: FOR_TO
31766: IFFALSE 31813
// begin if i = 5 then
31768: LD_VAR 0 6
31772: PUSH
31773: LD_INT 5
31775: EQUAL
31776: IFFALSE 31780
// break ;
31778: GO 31813
// sols := Replace ( sols , i , tmp [ i ] ) ;
31780: LD_ADDR_VAR 0 5
31784: PUSH
31785: LD_VAR 0 5
31789: PPUSH
31790: LD_VAR 0 6
31794: PPUSH
31795: LD_VAR 0 2
31799: PUSH
31800: LD_VAR 0 6
31804: ARRAY
31805: PPUSH
31806: CALL_OW 1
31810: ST_TO_ADDR
// end ;
31811: GO 31765
31813: POP
31814: POP
// tmp := ar_force_tmp ;
31815: LD_ADDR_VAR 0 2
31819: PUSH
31820: LD_EXP 26
31824: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
31825: LD_VAR 0 2
31829: PUSH
31830: LD_INT 1
31832: ARRAY
31833: PPUSH
31834: LD_INT 108
31836: PPUSH
31837: LD_INT 139
31839: PPUSH
31840: LD_INT 0
31842: PPUSH
31843: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
31847: LD_VAR 0 2
31851: PUSH
31852: LD_INT 1
31854: ARRAY
31855: PPUSH
31856: LD_EXP 8
31860: PPUSH
31861: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 2
31872: ARRAY
31873: PPUSH
31874: LD_INT 114
31876: PPUSH
31877: LD_INT 132
31879: PPUSH
31880: LD_INT 0
31882: PPUSH
31883: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
31887: LD_VAR 0 2
31891: PUSH
31892: LD_INT 3
31894: ARRAY
31895: PPUSH
31896: LD_INT 115
31898: PPUSH
31899: LD_INT 132
31901: PPUSH
31902: LD_INT 0
31904: PPUSH
31905: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
31909: LD_VAR 0 2
31913: PUSH
31914: LD_INT 2
31916: ARRAY
31917: PUSH
31918: LD_VAR 0 2
31922: PUSH
31923: LD_INT 3
31925: ARRAY
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PPUSH
31931: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
31935: LD_VAR 0 4
31939: PPUSH
31940: LD_INT 83
31942: PPUSH
31943: LD_INT 123
31945: PPUSH
31946: CALL_OW 111
// Wait ( 0 0$01 ) ;
31950: LD_INT 35
31952: PPUSH
31953: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
31957: LD_INT 90
31959: PPUSH
31960: LD_INT 144
31962: PPUSH
31963: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
31967: LD_VAR 0 5
31971: PPUSH
31972: LD_INT 88
31974: PPUSH
31975: LD_INT 129
31977: PPUSH
31978: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
31982: LD_ADDR_VAR 0 3
31986: PUSH
31987: LD_INT 92
31989: PUSH
31990: LD_INT 131
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 88
31999: PUSH
32000: LD_INT 127
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 91
32009: PUSH
32010: LD_INT 132
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 92
32019: PUSH
32020: LD_INT 134
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: ST_TO_ADDR
// for i = 1 to sols do
32033: LD_ADDR_VAR 0 6
32037: PUSH
32038: DOUBLE
32039: LD_INT 1
32041: DEC
32042: ST_TO_ADDR
32043: LD_VAR 0 5
32047: PUSH
32048: FOR_TO
32049: IFFALSE 32122
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
32051: LD_VAR 0 5
32055: PUSH
32056: LD_VAR 0 6
32060: ARRAY
32061: PPUSH
32062: LD_VAR 0 3
32066: PUSH
32067: LD_VAR 0 6
32071: ARRAY
32072: PUSH
32073: LD_INT 1
32075: ARRAY
32076: PPUSH
32077: LD_VAR 0 3
32081: PUSH
32082: LD_VAR 0 6
32086: ARRAY
32087: PUSH
32088: LD_INT 2
32090: ARRAY
32091: PPUSH
32092: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
32096: LD_VAR 0 5
32100: PUSH
32101: LD_VAR 0 6
32105: ARRAY
32106: PPUSH
32107: CALL_OW 197
// AddComHold ( sols ) ;
32111: LD_VAR 0 5
32115: PPUSH
32116: CALL_OW 200
// end ;
32120: GO 32048
32122: POP
32123: POP
// repeat wait ( 0 0$1 ) ;
32124: LD_INT 35
32126: PPUSH
32127: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
32131: LD_VAR 0 5
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: LD_INT 92
32142: PPUSH
32143: LD_INT 131
32145: PPUSH
32146: CALL_OW 297
32150: PUSH
32151: LD_INT 4
32153: LESS
32154: IFFALSE 32124
// CenterOnXY ( 96 , 139 ) ;
32156: LD_INT 96
32158: PPUSH
32159: LD_INT 139
32161: PPUSH
32162: CALL_OW 84
// wait ( 0 0$3 ) ;
32166: LD_INT 105
32168: PPUSH
32169: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
32173: LD_INT 111
32175: PPUSH
32176: LD_INT 135
32178: PPUSH
32179: LD_INT 1
32181: PPUSH
32182: LD_INT 25
32184: NEG
32185: PPUSH
32186: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
32190: LD_VAR 0 2
32194: PUSH
32195: LD_INT 2
32197: ARRAY
32198: PPUSH
32199: LD_VAR 0 2
32203: PUSH
32204: LD_INT 1
32206: ARRAY
32207: PPUSH
32208: CALL_OW 250
32212: PUSH
32213: LD_INT 3
32215: PLUS
32216: PPUSH
32217: LD_VAR 0 2
32221: PUSH
32222: LD_INT 1
32224: ARRAY
32225: PPUSH
32226: CALL_OW 251
32230: PPUSH
32231: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
32235: LD_VAR 0 2
32239: PUSH
32240: LD_INT 3
32242: ARRAY
32243: PPUSH
32244: LD_INT 7
32246: PPUSH
32247: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
32251: LD_VAR 0 2
32255: PUSH
32256: LD_INT 2
32258: ARRAY
32259: PPUSH
32260: LD_VAR 0 2
32264: PUSH
32265: LD_INT 1
32267: ARRAY
32268: PPUSH
32269: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
32273: LD_INT 35
32275: PPUSH
32276: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
32280: LD_VAR 0 2
32284: PUSH
32285: LD_INT 1
32287: ARRAY
32288: PPUSH
32289: LD_VAR 0 2
32293: PUSH
32294: LD_INT 2
32296: ARRAY
32297: PPUSH
32298: CALL_OW 296
32302: PUSH
32303: LD_INT 5
32305: LESS
32306: IFFALSE 32273
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
32308: LD_VAR 0 2
32312: PUSH
32313: LD_INT 1
32315: ARRAY
32316: PPUSH
32317: LD_VAR 0 2
32321: PUSH
32322: LD_INT 2
32324: ARRAY
32325: PPUSH
32326: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
32330: LD_VAR 0 2
32334: PUSH
32335: LD_INT 1
32337: ARRAY
32338: PPUSH
32339: LD_STRING D1a-Merc1-1
32341: PPUSH
32342: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
32346: LD_VAR 0 2
32350: PUSH
32351: LD_INT 2
32353: ARRAY
32354: PPUSH
32355: LD_STRING D1a-FMerc2-1
32357: PPUSH
32358: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
32362: LD_VAR 0 2
32366: PUSH
32367: LD_INT 2
32369: ARRAY
32370: PPUSH
32371: LD_VAR 0 2
32375: PUSH
32376: LD_INT 1
32378: ARRAY
32379: PPUSH
32380: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
32384: LD_VAR 0 2
32388: PUSH
32389: LD_INT 1
32391: ARRAY
32392: PPUSH
32393: LD_INT 500
32395: PPUSH
32396: CALL_OW 234
// wait ( 0 0$2 ) ;
32400: LD_INT 70
32402: PPUSH
32403: CALL_OW 67
// SetLives ( tmp [ 1 ] , 4 ) ;
32407: LD_VAR 0 2
32411: PUSH
32412: LD_INT 1
32414: ARRAY
32415: PPUSH
32416: LD_INT 4
32418: PPUSH
32419: CALL_OW 234
// wait ( 0 0$0.3 ) ;
32423: LD_INT 10
32425: PPUSH
32426: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
32430: LD_VAR 0 2
32434: PUSH
32435: LD_INT 1
32437: ARRAY
32438: PPUSH
32439: LD_STRING D1a-Merc1-2
32441: PPUSH
32442: CALL_OW 91
// wait ( 0 0$0.3 ) ;
32446: LD_INT 10
32448: PPUSH
32449: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
32453: LD_VAR 0 2
32457: PUSH
32458: LD_INT 1
32460: ARRAY
32461: PPUSH
32462: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
32466: LD_VAR 0 2
32470: PUSH
32471: LD_INT 2
32473: ARRAY
32474: PPUSH
32475: LD_INT 10
32477: PPUSH
32478: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
32482: LD_VAR 0 2
32486: PUSH
32487: LD_INT 2
32489: ARRAY
32490: PPUSH
32491: LD_STRING D1a-FMerc2-2
32493: PPUSH
32494: CALL_OW 88
// wait ( 0 0$1 ) ;
32498: LD_INT 35
32500: PPUSH
32501: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
32505: LD_INT 7
32507: PPUSH
32508: CALL_OW 85
// wait ( 0 0$2 ) ;
32512: LD_INT 70
32514: PPUSH
32515: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
32519: LD_EXP 28
32523: PPUSH
32524: LD_STRING D1a-Saliba-1
32526: PPUSH
32527: CALL_OW 91
// KillUnit ( Saliba ) ;
32531: LD_EXP 28
32535: PPUSH
32536: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
32540: LD_VAR 0 2
32544: PUSH
32545: LD_INT 3
32547: ARRAY
32548: PPUSH
32549: CALL_OW 122
// InGameOff ;
32553: CALL_OW 9
// CenterOnUnits ( JMM ) ;
32557: LD_EXP 8
32561: PPUSH
32562: CALL_OW 85
// ChangeMissionObjectives ( M1 ) ;
32566: LD_STRING M1
32568: PPUSH
32569: CALL_OW 337
// SaveForQuickRestart ;
32573: CALL_OW 22
// ar_run := true ;
32577: LD_ADDR_EXP 5
32581: PUSH
32582: LD_INT 1
32584: ST_TO_ADDR
// end ;
32585: LD_VAR 0 1
32589: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
32590: LD_EXP 5
32594: IFFALSE 32897
32596: GO 32598
32598: DISABLE
32599: LD_INT 0
32601: PPUSH
32602: PPUSH
32603: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: LD_EXP 26
32613: PUSH
32614: LD_EXP 23
32618: PPUSH
32619: LD_INT 21
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PPUSH
32629: CALL_OW 72
32633: ADD
32634: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
32635: LD_VAR 0 2
32639: PPUSH
32640: LD_INT 5
32642: PPUSH
32643: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
32647: LD_INT 5
32649: PPUSH
32650: LD_INT 1
32652: PPUSH
32653: CALL_OW 343
// k := 1 ;
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 1
32664: ST_TO_ADDR
// for i in tmp do
32665: LD_ADDR_VAR 0 1
32669: PUSH
32670: LD_VAR 0 2
32674: PUSH
32675: FOR_IN
32676: IFFALSE 32761
// begin if IsInUnit ( i ) then
32678: LD_VAR 0 1
32682: PPUSH
32683: CALL_OW 310
32687: IFFALSE 32698
// ComExitBuilding ( i ) ;
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 122
// if GetClass ( i ) = 3 then
32698: LD_VAR 0 1
32702: PPUSH
32703: CALL_OW 257
32707: PUSH
32708: LD_INT 3
32710: EQUAL
32711: IFFALSE 32747
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
32713: LD_VAR 0 1
32717: PPUSH
32718: LD_EXP 27
32722: PUSH
32723: LD_VAR 0 3
32727: ARRAY
32728: PPUSH
32729: CALL_OW 180
// k := k + 1 ;
32733: LD_ADDR_VAR 0 3
32737: PUSH
32738: LD_VAR 0 3
32742: PUSH
32743: LD_INT 1
32745: PLUS
32746: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
32747: LD_VAR 0 1
32751: PPUSH
32752: LD_INT 10
32754: PPUSH
32755: CALL_OW 173
// end ;
32759: GO 32675
32761: POP
32762: POP
// repeat wait ( 0 0$0.3 ) ;
32763: LD_INT 10
32765: PPUSH
32766: CALL_OW 67
// for i in tmp do
32770: LD_ADDR_VAR 0 1
32774: PUSH
32775: LD_VAR 0 2
32779: PUSH
32780: FOR_IN
32781: IFFALSE 32809
// if not HasTask ( i ) then
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 314
32792: NOT
32793: IFFALSE 32807
// ComMoveToArea ( i , escape_area ) ;
32795: LD_VAR 0 1
32799: PPUSH
32800: LD_INT 10
32802: PPUSH
32803: CALL_OW 113
32807: GO 32780
32809: POP
32810: POP
// k := FilterUnitsInArea ( escape_area , [ f_side , 5 ] ) ;
32811: LD_ADDR_VAR 0 3
32815: PUSH
32816: LD_INT 10
32818: PPUSH
32819: LD_INT 22
32821: PUSH
32822: LD_INT 5
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PPUSH
32829: CALL_OW 70
32833: ST_TO_ADDR
// if k then
32834: LD_VAR 0 3
32838: IFFALSE 32882
// for i in k do
32840: LD_ADDR_VAR 0 1
32844: PUSH
32845: LD_VAR 0 3
32849: PUSH
32850: FOR_IN
32851: IFFALSE 32880
// begin RemoveUnit ( i ) ;
32853: LD_VAR 0 1
32857: PPUSH
32858: CALL_OW 64
// tmp := tmp diff i ;
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: LD_VAR 0 2
32871: PUSH
32872: LD_VAR 0 1
32876: DIFF
32877: ST_TO_ADDR
// end ;
32878: GO 32850
32880: POP
32881: POP
// until not tmp ;
32882: LD_VAR 0 2
32886: NOT
32887: IFFALSE 32763
// ar_patrol := true ;
32889: LD_ADDR_EXP 7
32893: PUSH
32894: LD_INT 1
32896: ST_TO_ADDR
// end ; end_of_file
32897: PPOPN 3
32899: END
// export callback_error ; export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce ; export function InitMacro ; begin
32900: LD_INT 0
32902: PPUSH
// callback_error := false ;
32903: LD_ADDR_EXP 29
32907: PUSH
32908: LD_INT 0
32910: ST_TO_ADDR
// skirmish := false ;
32911: LD_ADDR_EXP 30
32915: PUSH
32916: LD_INT 0
32918: ST_TO_ADDR
// mc_bases := [ ] ;
32919: LD_ADDR_EXP 31
32923: PUSH
32924: EMPTY
32925: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
32926: LD_ADDR_EXP 32
32930: PUSH
32931: EMPTY
32932: ST_TO_ADDR
// mc_building_repairs := [ ] ;
32933: LD_ADDR_EXP 33
32937: PUSH
32938: EMPTY
32939: ST_TO_ADDR
// mc_need_heal := [ ] ;
32940: LD_ADDR_EXP 34
32944: PUSH
32945: EMPTY
32946: ST_TO_ADDR
// mc_healers := [ ] ;
32947: LD_ADDR_EXP 35
32951: PUSH
32952: EMPTY
32953: ST_TO_ADDR
// mc_build_list := [ ] ;
32954: LD_ADDR_EXP 36
32958: PUSH
32959: EMPTY
32960: ST_TO_ADDR
// mc_builders := [ ] ;
32961: LD_ADDR_EXP 37
32965: PUSH
32966: EMPTY
32967: ST_TO_ADDR
// mc_construct_list := [ ] ;
32968: LD_ADDR_EXP 38
32972: PUSH
32973: EMPTY
32974: ST_TO_ADDR
// mc_turret_list := [ ] ;
32975: LD_ADDR_EXP 39
32979: PUSH
32980: EMPTY
32981: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
32982: LD_ADDR_EXP 40
32986: PUSH
32987: EMPTY
32988: ST_TO_ADDR
// mc_miners := [ ] ;
32989: LD_ADDR_EXP 42
32993: PUSH
32994: EMPTY
32995: ST_TO_ADDR
// mc_mines := [ ] ;
32996: LD_ADDR_EXP 41
33000: PUSH
33001: EMPTY
33002: ST_TO_ADDR
// mc_minefields := [ ] ;
33003: LD_ADDR_EXP 43
33007: PUSH
33008: EMPTY
33009: ST_TO_ADDR
// mc_crates := [ ] ;
33010: LD_ADDR_EXP 44
33014: PUSH
33015: EMPTY
33016: ST_TO_ADDR
// mc_crates_collector := [ ] ;
33017: LD_ADDR_EXP 45
33021: PUSH
33022: EMPTY
33023: ST_TO_ADDR
// mc_vehicles := [ ] ;
33024: LD_ADDR_EXP 46
33028: PUSH
33029: EMPTY
33030: ST_TO_ADDR
// mc_attack := [ ] ;
33031: LD_ADDR_EXP 47
33035: PUSH
33036: EMPTY
33037: ST_TO_ADDR
// mc_produce := [ ] ;
33038: LD_ADDR_EXP 48
33042: PUSH
33043: EMPTY
33044: ST_TO_ADDR
// end ;
33045: LD_VAR 0 1
33049: RET
// export function RunMacro ; var i ; begin
33050: LD_INT 0
33052: PPUSH
33053: PPUSH
// for i = 1 to mc_bases do
33054: LD_ADDR_VAR 0 2
33058: PUSH
33059: DOUBLE
33060: LD_INT 1
33062: DEC
33063: ST_TO_ADDR
33064: LD_EXP 31
33068: PUSH
33069: FOR_TO
33070: IFFALSE 33490
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
33072: LD_ADDR_EXP 32
33076: PUSH
33077: LD_EXP 32
33081: PPUSH
33082: LD_VAR 0 2
33086: PPUSH
33087: EMPTY
33088: PPUSH
33089: CALL_OW 1
33093: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
33094: LD_ADDR_EXP 33
33098: PUSH
33099: LD_EXP 33
33103: PPUSH
33104: LD_VAR 0 2
33108: PPUSH
33109: EMPTY
33110: PPUSH
33111: CALL_OW 1
33115: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
33116: LD_ADDR_EXP 34
33120: PUSH
33121: LD_EXP 34
33125: PPUSH
33126: LD_VAR 0 2
33130: PPUSH
33131: EMPTY
33132: PPUSH
33133: CALL_OW 1
33137: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
33138: LD_ADDR_EXP 35
33142: PUSH
33143: LD_EXP 35
33147: PPUSH
33148: LD_VAR 0 2
33152: PPUSH
33153: EMPTY
33154: PUSH
33155: EMPTY
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PPUSH
33161: CALL_OW 1
33165: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
33166: LD_ADDR_EXP 36
33170: PUSH
33171: LD_EXP 36
33175: PPUSH
33176: LD_VAR 0 2
33180: PPUSH
33181: EMPTY
33182: PPUSH
33183: CALL_OW 1
33187: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
33188: LD_ADDR_EXP 38
33192: PUSH
33193: LD_EXP 38
33197: PPUSH
33198: LD_VAR 0 2
33202: PPUSH
33203: EMPTY
33204: PPUSH
33205: CALL_OW 1
33209: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
33210: LD_ADDR_EXP 39
33214: PUSH
33215: LD_EXP 39
33219: PPUSH
33220: LD_VAR 0 2
33224: PPUSH
33225: EMPTY
33226: PPUSH
33227: CALL_OW 1
33231: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
33232: LD_ADDR_EXP 40
33236: PUSH
33237: LD_EXP 40
33241: PPUSH
33242: LD_VAR 0 2
33246: PPUSH
33247: EMPTY
33248: PPUSH
33249: CALL_OW 1
33253: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
33254: LD_ADDR_EXP 40
33258: PUSH
33259: LD_EXP 40
33263: PPUSH
33264: LD_VAR 0 2
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: PPUSH
33276: EMPTY
33277: PPUSH
33278: CALL 1945 0 3
33282: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
33283: LD_ADDR_EXP 40
33287: PUSH
33288: LD_EXP 40
33292: PPUSH
33293: LD_VAR 0 2
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PPUSH
33305: EMPTY
33306: PPUSH
33307: CALL 1945 0 3
33311: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
33312: LD_ADDR_EXP 42
33316: PUSH
33317: LD_EXP 42
33321: PPUSH
33322: LD_VAR 0 2
33326: PPUSH
33327: EMPTY
33328: PPUSH
33329: CALL_OW 1
33333: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
33334: LD_ADDR_EXP 41
33338: PUSH
33339: LD_EXP 41
33343: PPUSH
33344: LD_VAR 0 2
33348: PPUSH
33349: EMPTY
33350: PPUSH
33351: CALL_OW 1
33355: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
33356: LD_ADDR_EXP 43
33360: PUSH
33361: LD_EXP 43
33365: PPUSH
33366: LD_VAR 0 2
33370: PPUSH
33371: EMPTY
33372: PPUSH
33373: CALL_OW 1
33377: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
33378: LD_ADDR_EXP 44
33382: PUSH
33383: LD_EXP 44
33387: PPUSH
33388: LD_VAR 0 2
33392: PPUSH
33393: EMPTY
33394: PPUSH
33395: CALL_OW 1
33399: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
33400: LD_ADDR_EXP 45
33404: PUSH
33405: LD_EXP 45
33409: PPUSH
33410: LD_VAR 0 2
33414: PPUSH
33415: EMPTY
33416: PPUSH
33417: CALL_OW 1
33421: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
33422: LD_ADDR_EXP 46
33426: PUSH
33427: LD_EXP 46
33431: PPUSH
33432: LD_VAR 0 2
33436: PPUSH
33437: EMPTY
33438: PPUSH
33439: CALL_OW 1
33443: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
33444: LD_ADDR_EXP 47
33448: PUSH
33449: LD_EXP 47
33453: PPUSH
33454: LD_VAR 0 2
33458: PPUSH
33459: EMPTY
33460: PPUSH
33461: CALL_OW 1
33465: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
33466: LD_ADDR_EXP 48
33470: PUSH
33471: LD_EXP 48
33475: PPUSH
33476: LD_VAR 0 2
33480: PPUSH
33481: EMPTY
33482: PPUSH
33483: CALL_OW 1
33487: ST_TO_ADDR
// end ;
33488: GO 33069
33490: POP
33491: POP
// MC_SetMinesField ( 1 , 8 , minefield1_left ) ;
33492: LD_INT 1
33494: PPUSH
33495: LD_INT 8
33497: PPUSH
33498: LD_INT 3
33500: PPUSH
33501: CALL 40213 0 3
// MC_SetMinesField ( 2 , 6 , minefield2_left ) ;
33505: LD_INT 2
33507: PPUSH
33508: LD_INT 6
33510: PPUSH
33511: LD_INT 2
33513: PPUSH
33514: CALL 40213 0 3
// MC_SetMinesField ( 3 , 6 , minefield3_left ) ;
33518: LD_INT 3
33520: PPUSH
33521: LD_INT 6
33523: PPUSH
33524: LD_INT 1
33526: PPUSH
33527: CALL 40213 0 3
// skirmish := true ;
33531: LD_ADDR_EXP 30
33535: PUSH
33536: LD_INT 1
33538: ST_TO_ADDR
// end ;
33539: LD_VAR 0 1
33543: RET
// every 0 0$01 trigger skirmish do
33544: LD_EXP 30
33548: IFFALSE 33625
33550: GO 33552
33552: DISABLE
// begin enable ;
33553: ENABLE
// MC_CheckBuildings ( ) ;
33554: CALL 33866 0 0
// MC_CheckPeopleLife ( ) ;
33558: CALL 34084 0 0
// RaiseSailEvent ( 103 ) ;
33562: LD_INT 103
33564: PPUSH
33565: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
33569: LD_INT 104
33571: PPUSH
33572: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
33576: LD_INT 105
33578: PPUSH
33579: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
33583: LD_INT 106
33585: PPUSH
33586: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
33590: LD_INT 107
33592: PPUSH
33593: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
33597: LD_INT 108
33599: PPUSH
33600: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
33604: LD_INT 109
33606: PPUSH
33607: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
33611: LD_INT 110
33613: PPUSH
33614: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
33618: LD_INT 200
33620: PPUSH
33621: CALL_OW 427
// end ;
33625: END
// on SailEvent ( event ) do begin if event = 101 then
33626: LD_VAR 0 1
33630: PUSH
33631: LD_INT 101
33633: EQUAL
33634: IFFALSE 33640
// MC_RepairBuildings ( ) ;
33636: CALL 34630 0 0
// if event = 102 then
33640: LD_VAR 0 1
33644: PUSH
33645: LD_INT 102
33647: EQUAL
33648: IFFALSE 33654
// MC_Heal ( ) ;
33650: CALL 35024 0 0
// if event = 103 then
33654: LD_VAR 0 1
33658: PUSH
33659: LD_INT 103
33661: EQUAL
33662: IFFALSE 33668
// MC_Build ( ) ;
33664: CALL 35409 0 0
// if event = 104 then
33668: LD_VAR 0 1
33672: PUSH
33673: LD_INT 104
33675: EQUAL
33676: IFFALSE 33682
// MC_TurretWeapon ( ) ;
33678: CALL 36132 0 0
// if event = 105 then
33682: LD_VAR 0 1
33686: PUSH
33687: LD_INT 105
33689: EQUAL
33690: IFFALSE 33696
// MC_TurretCrew ( ) ;
33692: CALL 36451 0 0
// if event = 106 then
33696: LD_VAR 0 1
33700: PUSH
33701: LD_INT 106
33703: EQUAL
33704: IFFALSE 33710
// MC_PlantMines ( ) ;
33706: CALL 37154 0 0
// if event = 107 then
33710: LD_VAR 0 1
33714: PUSH
33715: LD_INT 107
33717: EQUAL
33718: IFFALSE 33724
// MC_CollectCrates ( ) ;
33720: CALL 38073 0 0
// if event = 108 then
33724: LD_VAR 0 1
33728: PUSH
33729: LD_INT 108
33731: EQUAL
33732: IFFALSE 33738
// MC_LinkRemoteControl ( ) ;
33734: CALL 38870 0 0
// if event = 109 then
33738: LD_VAR 0 1
33742: PUSH
33743: LD_INT 109
33745: EQUAL
33746: IFFALSE 33752
// MC_ProduceVehicle ( ) ;
33748: CALL 39039 0 0
// if event = 110 then
33752: LD_VAR 0 1
33756: PUSH
33757: LD_INT 110
33759: EQUAL
33760: IFFALSE 33766
// MC_SendAttack ( ) ;
33762: CALL 39427 0 0
// if event = 200 then
33766: LD_VAR 0 1
33770: PUSH
33771: LD_INT 200
33773: EQUAL
33774: IFFALSE 33780
// MC_Idle ( ) ;
33776: CALL 40012 0 0
// end ;
33780: PPOPN 1
33782: END
// export function MC_Reset ( base , tag ) ; var i ; begin
33783: LD_INT 0
33785: PPUSH
33786: PPUSH
// if not mc_bases [ base ] or not tag then
33787: LD_EXP 31
33791: PUSH
33792: LD_VAR 0 1
33796: ARRAY
33797: NOT
33798: PUSH
33799: LD_VAR 0 2
33803: NOT
33804: OR
33805: IFFALSE 33809
// exit ;
33807: GO 33861
// for i in mc_bases [ base ] do
33809: LD_ADDR_VAR 0 4
33813: PUSH
33814: LD_EXP 31
33818: PUSH
33819: LD_VAR 0 1
33823: ARRAY
33824: PUSH
33825: FOR_IN
33826: IFFALSE 33859
// if GetTag ( i ) = tag then
33828: LD_VAR 0 4
33832: PPUSH
33833: CALL_OW 110
33837: PUSH
33838: LD_VAR 0 2
33842: EQUAL
33843: IFFALSE 33857
// SetTag ( i , 0 ) ;
33845: LD_VAR 0 4
33849: PPUSH
33850: LD_INT 0
33852: PPUSH
33853: CALL_OW 109
33857: GO 33825
33859: POP
33860: POP
// end ;
33861: LD_VAR 0 3
33865: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
33866: LD_INT 0
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
// if not mc_bases then
33872: LD_EXP 31
33876: NOT
33877: IFFALSE 33881
// exit ;
33879: GO 34079
// for i = 1 to mc_bases do
33881: LD_ADDR_VAR 0 2
33885: PUSH
33886: DOUBLE
33887: LD_INT 1
33889: DEC
33890: ST_TO_ADDR
33891: LD_EXP 31
33895: PUSH
33896: FOR_TO
33897: IFFALSE 34064
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
33899: LD_ADDR_VAR 0 4
33903: PUSH
33904: LD_EXP 31
33908: PUSH
33909: LD_VAR 0 2
33913: ARRAY
33914: PPUSH
33915: LD_INT 21
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: PUSH
33928: LD_INT 24
33930: PUSH
33931: LD_INT 1000
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PPUSH
33946: CALL_OW 72
33950: ST_TO_ADDR
// if not tmp then
33951: LD_VAR 0 4
33955: NOT
33956: IFFALSE 33982
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
33958: LD_ADDR_EXP 32
33962: PUSH
33963: LD_EXP 32
33967: PPUSH
33968: LD_VAR 0 2
33972: PPUSH
33973: EMPTY
33974: PPUSH
33975: CALL_OW 1
33979: ST_TO_ADDR
// continue ;
33980: GO 33896
// end ; for j in tmp do
33982: LD_ADDR_VAR 0 3
33986: PUSH
33987: LD_VAR 0 4
33991: PUSH
33992: FOR_IN
33993: IFFALSE 34060
// if not j in mc_building_need_repair [ i ] then
33995: LD_VAR 0 3
33999: PUSH
34000: LD_EXP 32
34004: PUSH
34005: LD_VAR 0 2
34009: ARRAY
34010: IN
34011: NOT
34012: IFFALSE 34058
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
34014: LD_ADDR_EXP 32
34018: PUSH
34019: LD_EXP 32
34023: PPUSH
34024: LD_VAR 0 2
34028: PUSH
34029: LD_EXP 32
34033: PUSH
34034: LD_VAR 0 2
34038: ARRAY
34039: PUSH
34040: LD_INT 1
34042: PLUS
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL 1945 0 3
34057: ST_TO_ADDR
34058: GO 33992
34060: POP
34061: POP
// end ;
34062: GO 33896
34064: POP
34065: POP
// if mc_building_need_repair then
34066: LD_EXP 32
34070: IFFALSE 34079
// RaiseSailEvent ( 101 ) ;
34072: LD_INT 101
34074: PPUSH
34075: CALL_OW 427
// end ;
34079: LD_VAR 0 1
34083: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
34088: PPUSH
34089: PPUSH
34090: PPUSH
34091: PPUSH
34092: PPUSH
// if not mc_bases then
34093: LD_EXP 31
34097: NOT
34098: IFFALSE 34102
// exit ;
34100: GO 34625
// for i = 1 to mc_bases do
34102: LD_ADDR_VAR 0 2
34106: PUSH
34107: DOUBLE
34108: LD_INT 1
34110: DEC
34111: ST_TO_ADDR
34112: LD_EXP 31
34116: PUSH
34117: FOR_TO
34118: IFFALSE 34616
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
34120: LD_ADDR_VAR 0 5
34124: PUSH
34125: LD_EXP 31
34129: PUSH
34130: LD_VAR 0 2
34134: ARRAY
34135: PPUSH
34136: LD_INT 21
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 54
34154: PUSH
34155: EMPTY
34156: LIST
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 3
34164: PUSH
34165: LD_INT 24
34167: PUSH
34168: LD_INT 700
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PPUSH
34188: CALL_OW 72
34192: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
34193: LD_ADDR_VAR 0 6
34197: PUSH
34198: LD_EXP 31
34202: PUSH
34203: LD_VAR 0 2
34207: ARRAY
34208: PPUSH
34209: LD_INT 21
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: LD_INT 3
34224: PUSH
34225: LD_INT 54
34227: PUSH
34228: EMPTY
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: LD_INT 24
34240: PUSH
34241: LD_INT 250
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PPUSH
34261: CALL_OW 72
34265: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
34266: LD_ADDR_VAR 0 7
34270: PUSH
34271: LD_VAR 0 5
34275: PUSH
34276: LD_VAR 0 6
34280: DIFF
34281: ST_TO_ADDR
// if not need_heal_1 then
34282: LD_VAR 0 6
34286: NOT
34287: IFFALSE 34320
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
34289: LD_ADDR_EXP 34
34293: PUSH
34294: LD_EXP 34
34298: PPUSH
34299: LD_VAR 0 2
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PPUSH
34311: EMPTY
34312: PPUSH
34313: CALL 1945 0 3
34317: ST_TO_ADDR
34318: GO 34352
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
34320: LD_ADDR_EXP 34
34324: PUSH
34325: LD_EXP 34
34329: PPUSH
34330: LD_VAR 0 2
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PPUSH
34342: LD_VAR 0 6
34346: PPUSH
34347: CALL 1945 0 3
34351: ST_TO_ADDR
// if not need_heal_2 then
34352: LD_VAR 0 7
34356: NOT
34357: IFFALSE 34390
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
34359: LD_ADDR_EXP 34
34363: PUSH
34364: LD_EXP 34
34368: PPUSH
34369: LD_VAR 0 2
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PPUSH
34381: EMPTY
34382: PPUSH
34383: CALL 1945 0 3
34387: ST_TO_ADDR
34388: GO 34422
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
34390: LD_ADDR_EXP 34
34394: PUSH
34395: LD_EXP 34
34399: PPUSH
34400: LD_VAR 0 2
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PPUSH
34412: LD_VAR 0 7
34416: PPUSH
34417: CALL 1945 0 3
34421: ST_TO_ADDR
// if need_heal_2 then
34422: LD_VAR 0 7
34426: IFFALSE 34598
// for j in need_heal_2 do
34428: LD_ADDR_VAR 0 3
34432: PUSH
34433: LD_VAR 0 7
34437: PUSH
34438: FOR_IN
34439: IFFALSE 34596
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
34441: LD_ADDR_VAR 0 5
34445: PUSH
34446: LD_EXP 31
34450: PUSH
34451: LD_VAR 0 2
34455: ARRAY
34456: PPUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 30
34462: PUSH
34463: LD_INT 6
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 30
34472: PUSH
34473: LD_INT 7
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 30
34482: PUSH
34483: LD_INT 8
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 30
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 30
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 25
34512: PUSH
34513: LD_INT 4
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: PPUSH
34529: CALL_OW 72
34533: ST_TO_ADDR
// if tmp then
34534: LD_VAR 0 5
34538: IFFALSE 34594
// begin k := NearestUnitToUnit ( tmp , j ) ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 5
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: CALL_OW 74
34559: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
34560: LD_VAR 0 3
34564: PPUSH
34565: LD_VAR 0 4
34569: PPUSH
34570: CALL_OW 296
34574: PUSH
34575: LD_INT 7
34577: GREATER
34578: IFFALSE 34594
// ComMoveUnit ( j , k ) ;
34580: LD_VAR 0 3
34584: PPUSH
34585: LD_VAR 0 4
34589: PPUSH
34590: CALL_OW 112
// end ; end ;
34594: GO 34438
34596: POP
34597: POP
// if not need_heal_1 and not need_heal_2 then
34598: LD_VAR 0 6
34602: NOT
34603: PUSH
34604: LD_VAR 0 7
34608: NOT
34609: AND
34610: IFFALSE 34614
// continue ;
34612: GO 34117
// end ;
34614: GO 34117
34616: POP
34617: POP
// RaiseSailEvent ( 102 ) ;
34618: LD_INT 102
34620: PPUSH
34621: CALL_OW 427
// end ;
34625: LD_VAR 0 1
34629: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
34634: PPUSH
34635: PPUSH
34636: PPUSH
// if not mc_bases then
34637: LD_EXP 31
34641: NOT
34642: IFFALSE 34646
// exit ;
34644: GO 35019
// for i = 1 to mc_bases do
34646: LD_ADDR_VAR 0 2
34650: PUSH
34651: DOUBLE
34652: LD_INT 1
34654: DEC
34655: ST_TO_ADDR
34656: LD_EXP 31
34660: PUSH
34661: FOR_TO
34662: IFFALSE 35017
// begin if not mc_building_need_repair [ i ] then
34664: LD_EXP 32
34668: PUSH
34669: LD_VAR 0 2
34673: ARRAY
34674: NOT
34675: IFFALSE 34713
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
34677: LD_ADDR_EXP 33
34681: PUSH
34682: LD_EXP 33
34686: PPUSH
34687: LD_VAR 0 2
34691: PPUSH
34692: EMPTY
34693: PPUSH
34694: CALL_OW 1
34698: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
34699: LD_VAR 0 2
34703: PPUSH
34704: LD_INT 101
34706: PPUSH
34707: CALL 33783 0 2
// continue ;
34711: GO 34661
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
34713: LD_ADDR_EXP 37
34717: PUSH
34718: LD_EXP 37
34722: PPUSH
34723: LD_VAR 0 2
34727: PPUSH
34728: EMPTY
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
34735: LD_VAR 0 2
34739: PPUSH
34740: LD_INT 103
34742: PPUSH
34743: CALL 33783 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
34747: LD_ADDR_VAR 0 5
34751: PUSH
34752: LD_EXP 31
34756: PUSH
34757: LD_VAR 0 2
34761: ARRAY
34762: PPUSH
34763: LD_INT 2
34765: PUSH
34766: LD_INT 25
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 25
34778: PUSH
34779: LD_INT 16
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: PPUSH
34794: CALL_OW 72
34798: ST_TO_ADDR
// if not tmp then
34799: LD_VAR 0 5
34803: NOT
34804: IFFALSE 34808
// continue ;
34806: GO 34661
// for j in tmp do
34808: LD_ADDR_VAR 0 3
34812: PUSH
34813: LD_VAR 0 5
34817: PUSH
34818: FOR_IN
34819: IFFALSE 35013
// begin if mc_need_heal [ i ] then
34821: LD_EXP 34
34825: PUSH
34826: LD_VAR 0 2
34830: ARRAY
34831: IFFALSE 34879
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
34833: LD_VAR 0 3
34837: PUSH
34838: LD_EXP 34
34842: PUSH
34843: LD_VAR 0 2
34847: ARRAY
34848: PUSH
34849: LD_INT 1
34851: ARRAY
34852: IN
34853: PUSH
34854: LD_VAR 0 3
34858: PUSH
34859: LD_EXP 34
34863: PUSH
34864: LD_VAR 0 2
34868: ARRAY
34869: PUSH
34870: LD_INT 2
34872: ARRAY
34873: IN
34874: OR
34875: IFFALSE 34879
// continue ;
34877: GO 34818
// if IsInUnit ( j ) then
34879: LD_VAR 0 3
34883: PPUSH
34884: CALL_OW 310
34888: IFFALSE 34899
// ComExitBuilding ( j ) ;
34890: LD_VAR 0 3
34894: PPUSH
34895: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
34899: LD_VAR 0 3
34903: PUSH
34904: LD_EXP 33
34908: PUSH
34909: LD_VAR 0 2
34913: ARRAY
34914: IN
34915: NOT
34916: IFFALSE 34974
// begin SetTag ( j , 101 ) ;
34918: LD_VAR 0 3
34922: PPUSH
34923: LD_INT 101
34925: PPUSH
34926: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
34930: LD_ADDR_EXP 33
34934: PUSH
34935: LD_EXP 33
34939: PPUSH
34940: LD_VAR 0 2
34944: PUSH
34945: LD_EXP 33
34949: PUSH
34950: LD_VAR 0 2
34954: ARRAY
34955: PUSH
34956: LD_INT 1
34958: PLUS
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PPUSH
34964: LD_VAR 0 3
34968: PPUSH
34969: CALL 1945 0 3
34973: ST_TO_ADDR
// end ; Wait ( 3 ) ;
34974: LD_INT 3
34976: PPUSH
34977: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
34981: LD_VAR 0 3
34985: PPUSH
34986: LD_EXP 32
34990: PUSH
34991: LD_VAR 0 2
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 3
35001: PPUSH
35002: CALL_OW 74
35006: PPUSH
35007: CALL_OW 130
// end ;
35011: GO 34818
35013: POP
35014: POP
// end ;
35015: GO 34661
35017: POP
35018: POP
// end ;
35019: LD_VAR 0 1
35023: RET
// export function MC_Heal ; var i , j , tmp ; begin
35024: LD_INT 0
35026: PPUSH
35027: PPUSH
35028: PPUSH
35029: PPUSH
// if not mc_bases then
35030: LD_EXP 31
35034: NOT
35035: IFFALSE 35039
// exit ;
35037: GO 35404
// for i = 1 to mc_bases do
35039: LD_ADDR_VAR 0 2
35043: PUSH
35044: DOUBLE
35045: LD_INT 1
35047: DEC
35048: ST_TO_ADDR
35049: LD_EXP 31
35053: PUSH
35054: FOR_TO
35055: IFFALSE 35402
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
35057: LD_EXP 34
35061: PUSH
35062: LD_VAR 0 2
35066: ARRAY
35067: PUSH
35068: LD_INT 1
35070: ARRAY
35071: NOT
35072: PUSH
35073: LD_EXP 34
35077: PUSH
35078: LD_VAR 0 2
35082: ARRAY
35083: PUSH
35084: LD_INT 2
35086: ARRAY
35087: NOT
35088: AND
35089: IFFALSE 35127
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
35091: LD_ADDR_EXP 35
35095: PUSH
35096: LD_EXP 35
35100: PPUSH
35101: LD_VAR 0 2
35105: PPUSH
35106: EMPTY
35107: PPUSH
35108: CALL_OW 1
35112: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
35113: LD_VAR 0 2
35117: PPUSH
35118: LD_INT 102
35120: PPUSH
35121: CALL 33783 0 2
// continue ;
35125: GO 35054
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
35127: LD_ADDR_VAR 0 4
35131: PUSH
35132: LD_EXP 31
35136: PUSH
35137: LD_VAR 0 2
35141: ARRAY
35142: PPUSH
35143: LD_INT 25
35145: PUSH
35146: LD_INT 4
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PPUSH
35153: CALL_OW 72
35157: ST_TO_ADDR
// if not tmp then
35158: LD_VAR 0 4
35162: NOT
35163: IFFALSE 35167
// continue ;
35165: GO 35054
// for j in tmp do
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_VAR 0 4
35176: PUSH
35177: FOR_IN
35178: IFFALSE 35398
// begin if IsInUnit ( j ) then
35180: LD_VAR 0 3
35184: PPUSH
35185: CALL_OW 310
35189: IFFALSE 35200
// ComExitBuilding ( j ) ;
35191: LD_VAR 0 3
35195: PPUSH
35196: CALL_OW 122
// if not j in mc_healers [ i ] then
35200: LD_VAR 0 3
35204: PUSH
35205: LD_EXP 35
35209: PUSH
35210: LD_VAR 0 2
35214: ARRAY
35215: IN
35216: NOT
35217: IFFALSE 35263
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
35219: LD_ADDR_EXP 35
35223: PUSH
35224: LD_EXP 35
35228: PPUSH
35229: LD_VAR 0 2
35233: PUSH
35234: LD_EXP 35
35238: PUSH
35239: LD_VAR 0 2
35243: ARRAY
35244: PUSH
35245: LD_INT 1
35247: PLUS
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PPUSH
35253: LD_VAR 0 3
35257: PPUSH
35258: CALL 1945 0 3
35262: ST_TO_ADDR
// if not GetTag ( j ) then
35263: LD_VAR 0 3
35267: PPUSH
35268: CALL_OW 110
35272: NOT
35273: IFFALSE 35287
// SetTag ( j , 102 ) ;
35275: LD_VAR 0 3
35279: PPUSH
35280: LD_INT 102
35282: PPUSH
35283: CALL_OW 109
// Wait ( 3 ) ;
35287: LD_INT 3
35289: PPUSH
35290: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
35294: LD_EXP 34
35298: PUSH
35299: LD_VAR 0 2
35303: ARRAY
35304: PUSH
35305: LD_INT 1
35307: ARRAY
35308: IFFALSE 35340
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
35310: LD_VAR 0 3
35314: PPUSH
35315: LD_EXP 34
35319: PUSH
35320: LD_VAR 0 2
35324: ARRAY
35325: PUSH
35326: LD_INT 1
35328: ARRAY
35329: PUSH
35330: LD_INT 1
35332: ARRAY
35333: PPUSH
35334: CALL_OW 128
35338: GO 35396
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
35340: LD_VAR 0 3
35344: PPUSH
35345: CALL_OW 314
35349: NOT
35350: PUSH
35351: LD_EXP 34
35355: PUSH
35356: LD_VAR 0 2
35360: ARRAY
35361: PUSH
35362: LD_INT 2
35364: ARRAY
35365: AND
35366: IFFALSE 35396
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
35368: LD_VAR 0 3
35372: PPUSH
35373: LD_EXP 34
35377: PUSH
35378: LD_VAR 0 2
35382: ARRAY
35383: PUSH
35384: LD_INT 2
35386: ARRAY
35387: PUSH
35388: LD_INT 1
35390: ARRAY
35391: PPUSH
35392: CALL_OW 128
// end ;
35396: GO 35177
35398: POP
35399: POP
// end ;
35400: GO 35054
35402: POP
35403: POP
// end ;
35404: LD_VAR 0 1
35408: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
35409: LD_INT 0
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
// if not mc_bases then
35415: LD_EXP 31
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 36127
// for i = 1 to mc_bases do
35424: LD_ADDR_VAR 0 2
35428: PUSH
35429: DOUBLE
35430: LD_INT 1
35432: DEC
35433: ST_TO_ADDR
35434: LD_EXP 31
35438: PUSH
35439: FOR_TO
35440: IFFALSE 36125
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
35442: LD_EXP 36
35446: PUSH
35447: LD_VAR 0 2
35451: ARRAY
35452: NOT
35453: PUSH
35454: LD_EXP 38
35458: PUSH
35459: LD_VAR 0 2
35463: ARRAY
35464: NOT
35465: AND
35466: IFFALSE 35504
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
35468: LD_ADDR_EXP 37
35472: PUSH
35473: LD_EXP 37
35477: PPUSH
35478: LD_VAR 0 2
35482: PPUSH
35483: EMPTY
35484: PPUSH
35485: CALL_OW 1
35489: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_INT 103
35497: PPUSH
35498: CALL 33783 0 2
// continue ;
35502: GO 35439
// end ; if mc_construct_list [ i ] then
35504: LD_EXP 38
35508: PUSH
35509: LD_VAR 0 2
35513: ARRAY
35514: IFFALSE 35719
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
35516: LD_ADDR_VAR 0 4
35520: PUSH
35521: LD_EXP 31
35525: PUSH
35526: LD_VAR 0 2
35530: ARRAY
35531: PPUSH
35532: LD_INT 25
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PPUSH
35542: CALL_OW 72
35546: PUSH
35547: LD_EXP 33
35551: PUSH
35552: LD_VAR 0 2
35556: ARRAY
35557: DIFF
35558: ST_TO_ADDR
// if not tmp then
35559: LD_VAR 0 4
35563: NOT
35564: IFFALSE 35568
// continue ;
35566: GO 35439
// for j in tmp do
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_VAR 0 4
35577: PUSH
35578: FOR_IN
35579: IFFALSE 35715
// begin if not mc_builders [ i ] then
35581: LD_EXP 37
35585: PUSH
35586: LD_VAR 0 2
35590: ARRAY
35591: NOT
35592: IFFALSE 35650
// begin SetTag ( j , 103 ) ;
35594: LD_VAR 0 3
35598: PPUSH
35599: LD_INT 103
35601: PPUSH
35602: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
35606: LD_ADDR_EXP 37
35610: PUSH
35611: LD_EXP 37
35615: PPUSH
35616: LD_VAR 0 2
35620: PUSH
35621: LD_EXP 37
35625: PUSH
35626: LD_VAR 0 2
35630: ARRAY
35631: PUSH
35632: LD_INT 1
35634: PLUS
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PPUSH
35640: LD_VAR 0 3
35644: PPUSH
35645: CALL 1945 0 3
35649: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
35650: LD_VAR 0 3
35654: PPUSH
35655: CALL_OW 310
35659: IFFALSE 35670
// ComExitBuilding ( j ) ;
35661: LD_VAR 0 3
35665: PPUSH
35666: CALL_OW 122
// wait ( 3 ) ;
35670: LD_INT 3
35672: PPUSH
35673: CALL_OW 67
// if not HasTask ( j ) then
35677: LD_VAR 0 3
35681: PPUSH
35682: CALL_OW 314
35686: NOT
35687: IFFALSE 35713
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
35689: LD_VAR 0 3
35693: PPUSH
35694: LD_EXP 38
35698: PUSH
35699: LD_VAR 0 2
35703: ARRAY
35704: PUSH
35705: LD_INT 1
35707: ARRAY
35708: PPUSH
35709: CALL 4346 0 2
// end ;
35713: GO 35578
35715: POP
35716: POP
// end else
35717: GO 36123
// if mc_build_list [ i ] then
35719: LD_EXP 36
35723: PUSH
35724: LD_VAR 0 2
35728: ARRAY
35729: IFFALSE 36123
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
35731: LD_EXP 31
35735: PUSH
35736: LD_VAR 0 2
35740: ARRAY
35741: PPUSH
35742: LD_INT 2
35744: PUSH
35745: LD_INT 30
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 30
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: PPUSH
35770: CALL_OW 72
35774: PUSH
35775: LD_INT 1
35777: ARRAY
35778: PPUSH
35779: LD_EXP 36
35783: PUSH
35784: LD_VAR 0 2
35788: ARRAY
35789: PUSH
35790: LD_INT 1
35792: ARRAY
35793: PUSH
35794: LD_INT 1
35796: ARRAY
35797: PPUSH
35798: LD_EXP 36
35802: PUSH
35803: LD_VAR 0 2
35807: ARRAY
35808: PUSH
35809: LD_INT 1
35811: ARRAY
35812: PUSH
35813: LD_INT 2
35815: ARRAY
35816: PPUSH
35817: LD_EXP 36
35821: PUSH
35822: LD_VAR 0 2
35826: ARRAY
35827: PUSH
35828: LD_INT 1
35830: ARRAY
35831: PUSH
35832: LD_INT 3
35834: ARRAY
35835: PPUSH
35836: LD_EXP 36
35840: PUSH
35841: LD_VAR 0 2
35845: ARRAY
35846: PUSH
35847: LD_INT 1
35849: ARRAY
35850: PUSH
35851: LD_INT 4
35853: ARRAY
35854: PPUSH
35855: CALL 7392 0 5
35859: IFFALSE 36123
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: LD_EXP 31
35870: PUSH
35871: LD_VAR 0 2
35875: ARRAY
35876: PPUSH
35877: LD_INT 25
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 72
35891: PUSH
35892: LD_EXP 33
35896: PUSH
35897: LD_VAR 0 2
35901: ARRAY
35902: DIFF
35903: ST_TO_ADDR
// if not tmp then
35904: LD_VAR 0 4
35908: NOT
35909: IFFALSE 35913
// continue ;
35911: GO 35439
// for j in tmp do
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_VAR 0 4
35922: PUSH
35923: FOR_IN
35924: IFFALSE 36121
// begin if not mc_builders [ i ] then
35926: LD_EXP 37
35930: PUSH
35931: LD_VAR 0 2
35935: ARRAY
35936: NOT
35937: IFFALSE 35995
// begin SetTag ( j , 103 ) ;
35939: LD_VAR 0 3
35943: PPUSH
35944: LD_INT 103
35946: PPUSH
35947: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
35951: LD_ADDR_EXP 37
35955: PUSH
35956: LD_EXP 37
35960: PPUSH
35961: LD_VAR 0 2
35965: PUSH
35966: LD_EXP 37
35970: PUSH
35971: LD_VAR 0 2
35975: ARRAY
35976: PUSH
35977: LD_INT 1
35979: PLUS
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PPUSH
35985: LD_VAR 0 3
35989: PPUSH
35990: CALL 1945 0 3
35994: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
35995: LD_VAR 0 3
35999: PPUSH
36000: CALL_OW 310
36004: IFFALSE 36015
// ComExitBuilding ( j ) ;
36006: LD_VAR 0 3
36010: PPUSH
36011: CALL_OW 122
// wait ( 3 ) ;
36015: LD_INT 3
36017: PPUSH
36018: CALL_OW 67
// if not HasTask ( j ) then
36022: LD_VAR 0 3
36026: PPUSH
36027: CALL_OW 314
36031: NOT
36032: IFFALSE 36119
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
36034: LD_VAR 0 3
36038: PPUSH
36039: LD_EXP 36
36043: PUSH
36044: LD_VAR 0 2
36048: ARRAY
36049: PUSH
36050: LD_INT 1
36052: ARRAY
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: PPUSH
36058: LD_EXP 36
36062: PUSH
36063: LD_VAR 0 2
36067: ARRAY
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PUSH
36073: LD_INT 2
36075: ARRAY
36076: PPUSH
36077: LD_EXP 36
36081: PUSH
36082: LD_VAR 0 2
36086: ARRAY
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PUSH
36092: LD_INT 3
36094: ARRAY
36095: PPUSH
36096: LD_EXP 36
36100: PUSH
36101: LD_VAR 0 2
36105: ARRAY
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PUSH
36111: LD_INT 4
36113: ARRAY
36114: PPUSH
36115: CALL_OW 145
// end ;
36119: GO 35923
36121: POP
36122: POP
// end ; end ;
36123: GO 35439
36125: POP
36126: POP
// end ;
36127: LD_VAR 0 1
36131: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
36132: LD_INT 0
36134: PPUSH
36135: PPUSH
36136: PPUSH
36137: PPUSH
36138: PPUSH
36139: PPUSH
36140: PPUSH
// if not mc_bases then
36141: LD_EXP 31
36145: NOT
36146: IFFALSE 36150
// exit ;
36148: GO 36446
// for i = 1 to mc_bases do
36150: LD_ADDR_VAR 0 2
36154: PUSH
36155: DOUBLE
36156: LD_INT 1
36158: DEC
36159: ST_TO_ADDR
36160: LD_EXP 31
36164: PUSH
36165: FOR_TO
36166: IFFALSE 36444
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
36168: LD_EXP 39
36172: PUSH
36173: LD_VAR 0 2
36177: ARRAY
36178: NOT
36179: PUSH
36180: LD_EXP 31
36184: PUSH
36185: LD_VAR 0 2
36189: ARRAY
36190: PPUSH
36191: LD_INT 30
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PPUSH
36201: CALL_OW 72
36205: NOT
36206: OR
36207: IFFALSE 36211
// continue ;
36209: GO 36165
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
36211: LD_EXP 39
36215: PUSH
36216: LD_VAR 0 2
36220: ARRAY
36221: PUSH
36222: LD_INT 1
36224: ARRAY
36225: PPUSH
36226: CALL_OW 269
36230: IFFALSE 36296
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
36232: LD_ADDR_VAR 0 4
36236: PUSH
36237: LD_EXP 39
36241: PUSH
36242: LD_VAR 0 2
36246: ARRAY
36247: PPUSH
36248: LD_INT 1
36250: PPUSH
36251: CALL_OW 3
36255: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
36256: LD_ADDR_EXP 39
36260: PUSH
36261: LD_EXP 39
36265: PPUSH
36266: LD_VAR 0 2
36270: PPUSH
36271: LD_VAR 0 4
36275: PPUSH
36276: CALL_OW 1
36280: ST_TO_ADDR
// if not mc_turret_list [ i ] then
36281: LD_EXP 39
36285: PUSH
36286: LD_VAR 0 2
36290: ARRAY
36291: NOT
36292: IFFALSE 36296
// continue ;
36294: GO 36165
// end ; busy := false ;
36296: LD_ADDR_VAR 0 6
36300: PUSH
36301: LD_INT 0
36303: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
36304: LD_ADDR_VAR 0 4
36308: PUSH
36309: LD_EXP 31
36313: PUSH
36314: LD_VAR 0 2
36318: ARRAY
36319: PPUSH
36320: LD_INT 30
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PPUSH
36330: CALL_OW 72
36334: ST_TO_ADDR
// for j in tmp do
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_VAR 0 4
36344: PUSH
36345: FOR_IN
36346: IFFALSE 36374
// if not BuildingStatus ( j ) = bs_idle then
36348: LD_VAR 0 3
36352: PPUSH
36353: CALL_OW 461
36357: PUSH
36358: LD_INT 2
36360: EQUAL
36361: NOT
36362: IFFALSE 36372
// busy := true ;
36364: LD_ADDR_VAR 0 6
36368: PUSH
36369: LD_INT 1
36371: ST_TO_ADDR
36372: GO 36345
36374: POP
36375: POP
// if busy then
36376: LD_VAR 0 6
36380: IFFALSE 36384
// continue ;
36382: GO 36165
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: LD_EXP 39
36393: PUSH
36394: LD_VAR 0 2
36398: ARRAY
36399: PUSH
36400: LD_INT 1
36402: ARRAY
36403: PPUSH
36404: CALL 5881 0 1
36408: ST_TO_ADDR
// if not weapon then
36409: LD_VAR 0 7
36413: NOT
36414: IFFALSE 36418
// continue ;
36416: GO 36165
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
36418: LD_EXP 39
36422: PUSH
36423: LD_VAR 0 2
36427: ARRAY
36428: PUSH
36429: LD_INT 1
36431: ARRAY
36432: PPUSH
36433: LD_VAR 0 7
36437: PPUSH
36438: CALL_OW 148
// end ;
36442: GO 36165
36444: POP
36445: POP
// end ;
36446: LD_VAR 0 1
36450: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , x ; begin
36451: LD_INT 0
36453: PPUSH
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
// if not mc_bases then
36459: LD_EXP 31
36463: NOT
36464: IFFALSE 36468
// exit ;
36466: GO 37149
// for i = 1 to mc_bases do
36468: LD_ADDR_VAR 0 2
36472: PUSH
36473: DOUBLE
36474: LD_INT 1
36476: DEC
36477: ST_TO_ADDR
36478: LD_EXP 31
36482: PUSH
36483: FOR_TO
36484: IFFALSE 37147
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_EXP 31
36495: PUSH
36496: LD_VAR 0 2
36500: ARRAY
36501: PPUSH
36502: LD_INT 24
36504: PUSH
36505: LD_INT 375
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 2
36514: PUSH
36515: LD_INT 30
36517: PUSH
36518: LD_INT 32
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 30
36527: PUSH
36528: LD_INT 31
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 58
36542: PUSH
36543: EMPTY
36544: LIST
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: LIST
36550: PPUSH
36551: CALL_OW 72
36555: ST_TO_ADDR
// if not x then
36556: LD_VAR 0 6
36560: NOT
36561: IFFALSE 36565
// continue ;
36563: GO 36483
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
36565: LD_ADDR_EXP 40
36569: PUSH
36570: LD_EXP 40
36574: PPUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PPUSH
36587: LD_VAR 0 6
36591: PPUSH
36592: CALL 1945 0 3
36596: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
36597: LD_EXP 40
36601: PUSH
36602: LD_VAR 0 2
36606: ARRAY
36607: NOT
36608: PUSH
36609: LD_EXP 40
36613: PUSH
36614: LD_VAR 0 2
36618: ARRAY
36619: PUSH
36620: LD_INT 1
36622: ARRAY
36623: NOT
36624: OR
36625: PUSH
36626: LD_EXP 40
36630: PUSH
36631: LD_VAR 0 2
36635: ARRAY
36636: PUSH
36637: LD_INT 1
36639: ARRAY
36640: PUSH
36641: LD_INT 1
36643: ARRAY
36644: NOT
36645: OR
36646: IFFALSE 36650
// continue ;
36648: GO 36483
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
36650: LD_EXP 40
36654: PUSH
36655: LD_VAR 0 2
36659: ARRAY
36660: PUSH
36661: LD_INT 1
36663: ARRAY
36664: PUSH
36665: LD_INT 1
36667: ARRAY
36668: PPUSH
36669: CALL_OW 313
36673: PUSH
36674: LD_INT 0
36676: EQUAL
36677: IFFALSE 37145
// if not mc_empty_turret_list [ i ] [ 2 ] then
36679: LD_EXP 40
36683: PUSH
36684: LD_VAR 0 2
36688: ARRAY
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: NOT
36694: IFFALSE 36843
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36696: LD_ADDR_VAR 0 5
36700: PUSH
36701: LD_EXP 31
36705: PUSH
36706: LD_VAR 0 2
36710: ARRAY
36711: PPUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 30
36717: PUSH
36718: LD_INT 4
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 30
36727: PUSH
36728: LD_INT 5
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: PPUSH
36740: CALL_OW 72
36744: ST_TO_ADDR
// if not tmp then
36745: LD_VAR 0 5
36749: NOT
36750: IFFALSE 36754
// continue ;
36752: GO 36483
// for j in tmp do
36754: LD_ADDR_VAR 0 3
36758: PUSH
36759: LD_VAR 0 5
36763: PUSH
36764: FOR_IN
36765: IFFALSE 36839
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_VAR 0 3
36776: PPUSH
36777: CALL_OW 313
36781: PPUSH
36782: LD_INT 25
36784: PUSH
36785: LD_INT 1
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PPUSH
36792: CALL_OW 72
36796: ST_TO_ADDR
// if t then
36797: LD_VAR 0 4
36801: IFFALSE 36837
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t ) ;
36803: LD_ADDR_EXP 40
36807: PUSH
36808: LD_EXP 40
36812: PPUSH
36813: LD_VAR 0 2
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PPUSH
36825: LD_VAR 0 4
36829: PPUSH
36830: CALL 1945 0 3
36834: ST_TO_ADDR
// break ;
36835: GO 36839
// end ; end ;
36837: GO 36764
36839: POP
36840: POP
// end else
36841: GO 37145
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
36843: LD_EXP 40
36847: PUSH
36848: LD_VAR 0 2
36852: ARRAY
36853: PUSH
36854: LD_INT 2
36856: ARRAY
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: CALL_OW 301
36866: IFFALSE 36899
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
36868: LD_ADDR_EXP 40
36872: PUSH
36873: LD_EXP 40
36877: PPUSH
36878: LD_VAR 0 2
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PPUSH
36890: EMPTY
36891: PPUSH
36892: CALL 1945 0 3
36896: ST_TO_ADDR
// break ;
36897: GO 37147
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
36899: LD_EXP 40
36903: PUSH
36904: LD_VAR 0 2
36908: ARRAY
36909: PUSH
36910: LD_INT 2
36912: ARRAY
36913: PUSH
36914: LD_INT 1
36916: ARRAY
36917: PPUSH
36918: CALL_OW 314
36922: NOT
36923: PUSH
36924: LD_EXP 40
36928: PUSH
36929: LD_VAR 0 2
36933: ARRAY
36934: PUSH
36935: LD_INT 2
36937: ARRAY
36938: PUSH
36939: LD_INT 1
36941: ARRAY
36942: PUSH
36943: LD_EXP 40
36947: PUSH
36948: LD_VAR 0 2
36952: ARRAY
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: PUSH
36958: LD_INT 1
36960: ARRAY
36961: PPUSH
36962: CALL_OW 313
36966: IN
36967: NOT
36968: AND
36969: IFFALSE 37145
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
36971: LD_EXP 40
36975: PUSH
36976: LD_VAR 0 2
36980: ARRAY
36981: PUSH
36982: LD_INT 2
36984: ARRAY
36985: PUSH
36986: LD_INT 1
36988: ARRAY
36989: PPUSH
36990: CALL_OW 310
36994: IFFALSE 37019
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
36996: LD_EXP 40
37000: PUSH
37001: LD_VAR 0 2
37005: ARRAY
37006: PUSH
37007: LD_INT 2
37009: ARRAY
37010: PUSH
37011: LD_INT 1
37013: ARRAY
37014: PPUSH
37015: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
37019: LD_EXP 40
37023: PUSH
37024: LD_VAR 0 2
37028: ARRAY
37029: PUSH
37030: LD_INT 2
37032: ARRAY
37033: PUSH
37034: LD_INT 1
37036: ARRAY
37037: PPUSH
37038: LD_EXP 40
37042: PUSH
37043: LD_VAR 0 2
37047: ARRAY
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PUSH
37053: LD_INT 1
37055: ARRAY
37056: PPUSH
37057: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
37061: LD_INT 35
37063: PPUSH
37064: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
37068: LD_EXP 40
37072: PUSH
37073: LD_VAR 0 2
37077: ARRAY
37078: PUSH
37079: LD_INT 2
37081: ARRAY
37082: NOT
37083: IFFALSE 37087
// break ;
37085: GO 37112
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
37087: LD_EXP 40
37091: PUSH
37092: LD_VAR 0 2
37096: ARRAY
37097: PUSH
37098: LD_INT 2
37100: ARRAY
37101: PUSH
37102: LD_INT 1
37104: ARRAY
37105: PPUSH
37106: CALL_OW 310
37110: IFFALSE 37061
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
37112: LD_ADDR_EXP 40
37116: PUSH
37117: LD_EXP 40
37121: PPUSH
37122: LD_VAR 0 2
37126: PUSH
37127: LD_INT 2
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PPUSH
37134: EMPTY
37135: PPUSH
37136: CALL 1945 0 3
37140: ST_TO_ADDR
// exit ;
37141: POP
37142: POP
37143: GO 37149
// end ; end ; end ;
37145: GO 36483
37147: POP
37148: POP
// end ;
37149: LD_VAR 0 1
37153: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
37154: LD_INT 0
37156: PPUSH
37157: PPUSH
37158: PPUSH
37159: PPUSH
37160: PPUSH
37161: PPUSH
// if not mc_bases then
37162: LD_EXP 31
37166: NOT
37167: IFFALSE 37171
// exit ;
37169: GO 38068
// for i = 1 to mc_bases do
37171: LD_ADDR_VAR 0 2
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_EXP 31
37185: PUSH
37186: FOR_TO
37187: IFFALSE 38066
// begin if mc_minefields [ i ] and mc_miners [ i ] then
37189: LD_EXP 43
37193: PUSH
37194: LD_VAR 0 2
37198: ARRAY
37199: PUSH
37200: LD_EXP 42
37204: PUSH
37205: LD_VAR 0 2
37209: ARRAY
37210: AND
37211: IFFALSE 37287
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
37213: LD_EXP 43
37217: PUSH
37218: LD_VAR 0 2
37222: ARRAY
37223: PPUSH
37224: LD_INT 81
37226: PUSH
37227: LD_EXP 42
37231: PUSH
37232: LD_VAR 0 2
37236: ARRAY
37237: PUSH
37238: LD_INT 1
37240: ARRAY
37241: PPUSH
37242: CALL_OW 255
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 2
37253: PUSH
37254: LD_INT 21
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 21
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PPUSH
37283: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
37287: LD_EXP 41
37291: PUSH
37292: LD_VAR 0 2
37296: ARRAY
37297: NOT
37298: PUSH
37299: LD_EXP 41
37303: PUSH
37304: LD_VAR 0 2
37308: ARRAY
37309: PUSH
37310: LD_EXP 42
37314: PUSH
37315: LD_VAR 0 2
37319: ARRAY
37320: EQUAL
37321: OR
37322: IFFALSE 37326
// continue ;
37324: GO 37186
// if mc_miners [ i ] then
37326: LD_EXP 42
37330: PUSH
37331: LD_VAR 0 2
37335: ARRAY
37336: IFFALSE 37764
// for j = 1 to mc_miners [ i ] do
37338: LD_ADDR_VAR 0 3
37342: PUSH
37343: DOUBLE
37344: LD_INT 1
37346: DEC
37347: ST_TO_ADDR
37348: LD_EXP 42
37352: PUSH
37353: LD_VAR 0 2
37357: ARRAY
37358: PUSH
37359: FOR_TO
37360: IFFALSE 37762
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
37362: LD_EXP 42
37366: PUSH
37367: LD_VAR 0 2
37371: ARRAY
37372: PUSH
37373: LD_VAR 0 3
37377: ARRAY
37378: PPUSH
37379: CALL_OW 301
37383: IFFALSE 37465
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
37385: LD_ADDR_VAR 0 5
37389: PUSH
37390: LD_EXP 42
37394: PUSH
37395: LD_VAR 0 2
37399: ARRAY
37400: PUSH
37401: LD_EXP 42
37405: PUSH
37406: LD_VAR 0 2
37410: ARRAY
37411: PUSH
37412: LD_VAR 0 3
37416: ARRAY
37417: DIFF
37418: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
37419: LD_ADDR_EXP 42
37423: PUSH
37424: LD_EXP 42
37428: PPUSH
37429: LD_VAR 0 2
37433: PUSH
37434: LD_EXP 42
37438: PUSH
37439: LD_VAR 0 2
37443: ARRAY
37444: PUSH
37445: LD_INT 1
37447: PLUS
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PPUSH
37453: LD_VAR 0 5
37457: PPUSH
37458: CALL_OW 1
37462: ST_TO_ADDR
// continue ;
37463: GO 37359
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
37465: LD_EXP 42
37469: PUSH
37470: LD_VAR 0 2
37474: ARRAY
37475: PUSH
37476: LD_VAR 0 3
37480: ARRAY
37481: PPUSH
37482: CALL_OW 459
37486: NOT
37487: PUSH
37488: LD_EXP 42
37492: PUSH
37493: LD_VAR 0 2
37497: ARRAY
37498: PUSH
37499: LD_VAR 0 3
37503: ARRAY
37504: PPUSH
37505: CALL_OW 255
37509: PPUSH
37510: LD_EXP 41
37514: PUSH
37515: LD_VAR 0 2
37519: ARRAY
37520: PUSH
37521: LD_VAR 0 3
37525: ARRAY
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PPUSH
37531: LD_EXP 41
37535: PUSH
37536: LD_VAR 0 2
37540: ARRAY
37541: PUSH
37542: LD_VAR 0 3
37546: ARRAY
37547: PUSH
37548: LD_INT 2
37550: ARRAY
37551: PPUSH
37552: LD_INT 12
37554: PPUSH
37555: CALL 2439 0 4
37559: PUSH
37560: LD_INT 4
37562: ARRAY
37563: PUSH
37564: LD_INT 0
37566: EQUAL
37567: AND
37568: IFFALSE 37760
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
37570: LD_EXP 42
37574: PUSH
37575: LD_VAR 0 2
37579: ARRAY
37580: PUSH
37581: LD_VAR 0 3
37585: ARRAY
37586: PPUSH
37587: CALL_OW 310
37591: IFFALSE 37614
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
37593: LD_EXP 42
37597: PUSH
37598: LD_VAR 0 2
37602: ARRAY
37603: PUSH
37604: LD_VAR 0 3
37608: ARRAY
37609: PPUSH
37610: CALL_OW 122
// wait ( 3 ) ;
37614: LD_INT 3
37616: PPUSH
37617: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
37621: LD_EXP 41
37625: PUSH
37626: LD_VAR 0 2
37630: ARRAY
37631: PUSH
37632: LD_VAR 0 3
37636: ARRAY
37637: PUSH
37638: LD_INT 1
37640: ARRAY
37641: PPUSH
37642: LD_EXP 41
37646: PUSH
37647: LD_VAR 0 2
37651: ARRAY
37652: PUSH
37653: LD_VAR 0 3
37657: ARRAY
37658: PUSH
37659: LD_INT 2
37661: ARRAY
37662: PPUSH
37663: CALL_OW 458
37667: NOT
37668: PUSH
37669: LD_EXP 42
37673: PUSH
37674: LD_VAR 0 2
37678: ARRAY
37679: PUSH
37680: LD_VAR 0 3
37684: ARRAY
37685: PPUSH
37686: CALL_OW 314
37690: NOT
37691: AND
37692: IFFALSE 37760
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
37694: LD_EXP 42
37698: PUSH
37699: LD_VAR 0 2
37703: ARRAY
37704: PUSH
37705: LD_VAR 0 3
37709: ARRAY
37710: PPUSH
37711: LD_EXP 41
37715: PUSH
37716: LD_VAR 0 2
37720: ARRAY
37721: PUSH
37722: LD_VAR 0 3
37726: ARRAY
37727: PUSH
37728: LD_INT 1
37730: ARRAY
37731: PPUSH
37732: LD_EXP 41
37736: PUSH
37737: LD_VAR 0 2
37741: ARRAY
37742: PUSH
37743: LD_VAR 0 3
37747: ARRAY
37748: PUSH
37749: LD_INT 2
37751: ARRAY
37752: PPUSH
37753: LD_INT 0
37755: PPUSH
37756: CALL_OW 133
// end ; end ;
37760: GO 37359
37762: POP
37763: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
37764: LD_ADDR_VAR 0 5
37768: PUSH
37769: LD_EXP 31
37773: PUSH
37774: LD_VAR 0 2
37778: ARRAY
37779: PPUSH
37780: LD_INT 2
37782: PUSH
37783: LD_INT 30
37785: PUSH
37786: LD_INT 4
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 30
37795: PUSH
37796: LD_INT 5
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: LIST
37807: PPUSH
37808: CALL_OW 72
37812: ST_TO_ADDR
// if not tmp then
37813: LD_VAR 0 5
37817: NOT
37818: IFFALSE 37822
// continue ;
37820: GO 37186
// list := [ ] ;
37822: LD_ADDR_VAR 0 6
37826: PUSH
37827: EMPTY
37828: ST_TO_ADDR
// for j in tmp do
37829: LD_ADDR_VAR 0 3
37833: PUSH
37834: LD_VAR 0 5
37838: PUSH
37839: FOR_IN
37840: IFFALSE 37909
// begin for k in UnitsInside ( j ) do
37842: LD_ADDR_VAR 0 4
37846: PUSH
37847: LD_VAR 0 3
37851: PPUSH
37852: CALL_OW 313
37856: PUSH
37857: FOR_IN
37858: IFFALSE 37905
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
37860: LD_VAR 0 4
37864: PPUSH
37865: CALL_OW 257
37869: PUSH
37870: LD_INT 1
37872: EQUAL
37873: PUSH
37874: LD_VAR 0 4
37878: PPUSH
37879: CALL_OW 459
37883: NOT
37884: AND
37885: IFFALSE 37903
// list := list ^ k ;
37887: LD_ADDR_VAR 0 6
37891: PUSH
37892: LD_VAR 0 6
37896: PUSH
37897: LD_VAR 0 4
37901: ADD
37902: ST_TO_ADDR
37903: GO 37857
37905: POP
37906: POP
// end ;
37907: GO 37839
37909: POP
37910: POP
// list := list diff mc_miners [ i ] ;
37911: LD_ADDR_VAR 0 6
37915: PUSH
37916: LD_VAR 0 6
37920: PUSH
37921: LD_EXP 42
37925: PUSH
37926: LD_VAR 0 2
37930: ARRAY
37931: DIFF
37932: ST_TO_ADDR
// if not list then
37933: LD_VAR 0 6
37937: NOT
37938: IFFALSE 37942
// continue ;
37940: GO 37186
// k := mc_mines [ i ] - mc_miners [ i ] ;
37942: LD_ADDR_VAR 0 4
37946: PUSH
37947: LD_EXP 41
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: PUSH
37958: LD_EXP 42
37962: PUSH
37963: LD_VAR 0 2
37967: ARRAY
37968: MINUS
37969: ST_TO_ADDR
// if k > list then
37970: LD_VAR 0 4
37974: PUSH
37975: LD_VAR 0 6
37979: GREATER
37980: IFFALSE 37992
// k := list ;
37982: LD_ADDR_VAR 0 4
37986: PUSH
37987: LD_VAR 0 6
37991: ST_TO_ADDR
// for j = 1 to k do
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: DOUBLE
37998: LD_INT 1
38000: DEC
38001: ST_TO_ADDR
38002: LD_VAR 0 4
38006: PUSH
38007: FOR_TO
38008: IFFALSE 38062
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
38010: LD_ADDR_EXP 42
38014: PUSH
38015: LD_EXP 42
38019: PPUSH
38020: LD_VAR 0 2
38024: PUSH
38025: LD_EXP 42
38029: PUSH
38030: LD_VAR 0 2
38034: ARRAY
38035: PUSH
38036: LD_INT 1
38038: PLUS
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PPUSH
38044: LD_VAR 0 6
38048: PUSH
38049: LD_VAR 0 3
38053: ARRAY
38054: PPUSH
38055: CALL 1945 0 3
38059: ST_TO_ADDR
38060: GO 38007
38062: POP
38063: POP
// end ;
38064: GO 37186
38066: POP
38067: POP
// end ;
38068: LD_VAR 0 1
38072: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
38077: PPUSH
38078: PPUSH
38079: PPUSH
// if not mc_bases then
38080: LD_EXP 31
38084: NOT
38085: IFFALSE 38089
// exit ;
38087: GO 38865
// for i = 1 to mc_bases do
38089: LD_ADDR_VAR 0 2
38093: PUSH
38094: DOUBLE
38095: LD_INT 1
38097: DEC
38098: ST_TO_ADDR
38099: LD_EXP 31
38103: PUSH
38104: FOR_TO
38105: IFFALSE 38863
// begin if not mc_bases [ i ] then
38107: LD_EXP 31
38111: PUSH
38112: LD_VAR 0 2
38116: ARRAY
38117: NOT
38118: IFFALSE 38122
// continue ;
38120: GO 38104
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
38122: LD_EXP 44
38126: PUSH
38127: LD_VAR 0 2
38131: ARRAY
38132: NOT
38133: PUSH
38134: LD_EXP 45
38138: PUSH
38139: LD_VAR 0 2
38143: ARRAY
38144: AND
38145: IFFALSE 38183
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
38147: LD_ADDR_EXP 45
38151: PUSH
38152: LD_EXP 45
38156: PPUSH
38157: LD_VAR 0 2
38161: PPUSH
38162: EMPTY
38163: PPUSH
38164: CALL_OW 1
38168: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
38169: LD_VAR 0 2
38173: PPUSH
38174: LD_INT 107
38176: PPUSH
38177: CALL 33783 0 2
// continue ;
38181: GO 38104
// end ; target := [ ] ;
38183: LD_ADDR_VAR 0 5
38187: PUSH
38188: EMPTY
38189: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
38190: LD_ADDR_VAR 0 3
38194: PUSH
38195: DOUBLE
38196: LD_EXP 44
38200: PUSH
38201: LD_VAR 0 2
38205: ARRAY
38206: INC
38207: ST_TO_ADDR
38208: LD_INT 1
38210: PUSH
38211: FOR_DOWNTO
38212: IFFALSE 38472
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
38214: LD_EXP 44
38218: PUSH
38219: LD_VAR 0 2
38223: ARRAY
38224: PUSH
38225: LD_VAR 0 3
38229: ARRAY
38230: PUSH
38231: LD_INT 2
38233: ARRAY
38234: PPUSH
38235: LD_EXP 44
38239: PUSH
38240: LD_VAR 0 2
38244: ARRAY
38245: PUSH
38246: LD_VAR 0 3
38250: ARRAY
38251: PUSH
38252: LD_INT 3
38254: ARRAY
38255: PPUSH
38256: CALL_OW 488
38260: PUSH
38261: LD_EXP 44
38265: PUSH
38266: LD_VAR 0 2
38270: ARRAY
38271: PUSH
38272: LD_VAR 0 3
38276: ARRAY
38277: PUSH
38278: LD_INT 2
38280: ARRAY
38281: PPUSH
38282: LD_EXP 44
38286: PUSH
38287: LD_VAR 0 2
38291: ARRAY
38292: PUSH
38293: LD_VAR 0 3
38297: ARRAY
38298: PUSH
38299: LD_INT 3
38301: ARRAY
38302: PPUSH
38303: CALL_OW 284
38307: PUSH
38308: LD_INT 0
38310: EQUAL
38311: AND
38312: IFFALSE 38367
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
38314: LD_ADDR_VAR 0 4
38318: PUSH
38319: LD_EXP 44
38323: PUSH
38324: LD_VAR 0 2
38328: ARRAY
38329: PPUSH
38330: LD_VAR 0 3
38334: PPUSH
38335: CALL_OW 3
38339: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
38340: LD_ADDR_EXP 44
38344: PUSH
38345: LD_EXP 44
38349: PPUSH
38350: LD_VAR 0 2
38354: PPUSH
38355: LD_VAR 0 4
38359: PPUSH
38360: CALL_OW 1
38364: ST_TO_ADDR
// continue ;
38365: GO 38211
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
38367: LD_EXP 31
38371: PUSH
38372: LD_VAR 0 2
38376: ARRAY
38377: PUSH
38378: LD_INT 1
38380: ARRAY
38381: PPUSH
38382: CALL_OW 255
38386: PPUSH
38387: LD_EXP 44
38391: PUSH
38392: LD_VAR 0 2
38396: ARRAY
38397: PUSH
38398: LD_VAR 0 3
38402: ARRAY
38403: PUSH
38404: LD_INT 2
38406: ARRAY
38407: PPUSH
38408: LD_EXP 44
38412: PUSH
38413: LD_VAR 0 2
38417: ARRAY
38418: PUSH
38419: LD_VAR 0 3
38423: ARRAY
38424: PUSH
38425: LD_INT 3
38427: ARRAY
38428: PPUSH
38429: LD_INT 20
38431: PPUSH
38432: CALL 2439 0 4
38436: PUSH
38437: LD_INT 4
38439: ARRAY
38440: PUSH
38441: LD_INT 0
38443: EQUAL
38444: IFFALSE 38470
// begin target := mc_crates [ i ] [ j ] ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_EXP 44
38455: PUSH
38456: LD_VAR 0 2
38460: ARRAY
38461: PUSH
38462: LD_VAR 0 3
38466: ARRAY
38467: ST_TO_ADDR
// break ;
38468: GO 38472
// end ; end ;
38470: GO 38211
38472: POP
38473: POP
// if not target then
38474: LD_VAR 0 5
38478: NOT
38479: IFFALSE 38483
// continue ;
38481: GO 38104
// if mc_crates_collector [ i ] < 5 then
38483: LD_EXP 45
38487: PUSH
38488: LD_VAR 0 2
38492: ARRAY
38493: PUSH
38494: LD_INT 5
38496: LESS
38497: IFFALSE 38677
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
38499: LD_ADDR_VAR 0 4
38503: PUSH
38504: LD_EXP 31
38508: PUSH
38509: LD_VAR 0 2
38513: ARRAY
38514: PPUSH
38515: LD_INT 2
38517: PUSH
38518: LD_INT 25
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 16
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 24
38545: PUSH
38546: LD_INT 750
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PPUSH
38557: CALL_OW 72
38561: ST_TO_ADDR
// if not tmp then
38562: LD_VAR 0 4
38566: NOT
38567: IFFALSE 38571
// continue ;
38569: GO 38104
// for j in tmp do
38571: LD_ADDR_VAR 0 3
38575: PUSH
38576: LD_VAR 0 4
38580: PUSH
38581: FOR_IN
38582: IFFALSE 38675
// if GetTag ( j ) = 0 then
38584: LD_VAR 0 3
38588: PPUSH
38589: CALL_OW 110
38593: PUSH
38594: LD_INT 0
38596: EQUAL
38597: IFFALSE 38673
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
38599: LD_ADDR_EXP 45
38603: PUSH
38604: LD_EXP 45
38608: PPUSH
38609: LD_VAR 0 2
38613: PUSH
38614: LD_EXP 45
38618: PUSH
38619: LD_VAR 0 2
38623: ARRAY
38624: PUSH
38625: LD_INT 1
38627: PLUS
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PPUSH
38633: LD_VAR 0 3
38637: PPUSH
38638: CALL 1945 0 3
38642: ST_TO_ADDR
// SetTag ( j , 107 ) ;
38643: LD_VAR 0 3
38647: PPUSH
38648: LD_INT 107
38650: PPUSH
38651: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
38655: LD_EXP 45
38659: PUSH
38660: LD_VAR 0 2
38664: ARRAY
38665: PUSH
38666: LD_INT 5
38668: GREATER
38669: IFFALSE 38673
// break ;
38671: GO 38675
// end ;
38673: GO 38581
38675: POP
38676: POP
// end ; if mc_crates_collector [ i ] and target then
38677: LD_EXP 45
38681: PUSH
38682: LD_VAR 0 2
38686: ARRAY
38687: PUSH
38688: LD_VAR 0 5
38692: AND
38693: IFFALSE 38861
// begin if mc_crates_collector [ i ] < target [ 1 ] then
38695: LD_EXP 45
38699: PUSH
38700: LD_VAR 0 2
38704: ARRAY
38705: PUSH
38706: LD_VAR 0 5
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: LESS
38715: IFFALSE 38735
// tmp := mc_crates_collector [ i ] else
38717: LD_ADDR_VAR 0 4
38721: PUSH
38722: LD_EXP 45
38726: PUSH
38727: LD_VAR 0 2
38731: ARRAY
38732: ST_TO_ADDR
38733: GO 38749
// tmp := target [ 1 ] ;
38735: LD_ADDR_VAR 0 4
38739: PUSH
38740: LD_VAR 0 5
38744: PUSH
38745: LD_INT 1
38747: ARRAY
38748: ST_TO_ADDR
// for j = 1 to tmp do
38749: LD_ADDR_VAR 0 3
38753: PUSH
38754: DOUBLE
38755: LD_INT 1
38757: DEC
38758: ST_TO_ADDR
38759: LD_VAR 0 4
38763: PUSH
38764: FOR_TO
38765: IFFALSE 38859
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
38767: LD_EXP 45
38771: PUSH
38772: LD_VAR 0 2
38776: ARRAY
38777: PUSH
38778: LD_VAR 0 3
38782: ARRAY
38783: PPUSH
38784: CALL_OW 310
38788: IFFALSE 38811
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
38790: LD_EXP 45
38794: PUSH
38795: LD_VAR 0 2
38799: ARRAY
38800: PUSH
38801: LD_VAR 0 3
38805: ARRAY
38806: PPUSH
38807: CALL_OW 122
// wait ( 3 ) ;
38811: LD_INT 3
38813: PPUSH
38814: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
38818: LD_EXP 45
38822: PUSH
38823: LD_VAR 0 2
38827: ARRAY
38828: PUSH
38829: LD_VAR 0 3
38833: ARRAY
38834: PPUSH
38835: LD_VAR 0 5
38839: PUSH
38840: LD_INT 2
38842: ARRAY
38843: PPUSH
38844: LD_VAR 0 5
38848: PUSH
38849: LD_INT 3
38851: ARRAY
38852: PPUSH
38853: CALL_OW 117
// end ;
38857: GO 38764
38859: POP
38860: POP
// end ; end ;
38861: GO 38104
38863: POP
38864: POP
// end ;
38865: LD_VAR 0 1
38869: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
38870: LD_INT 0
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
// if not mc_bases then
38876: LD_EXP 31
38880: NOT
38881: IFFALSE 38885
// exit ;
38883: GO 39034
// for i = 1 to mc_bases do
38885: LD_ADDR_VAR 0 2
38889: PUSH
38890: DOUBLE
38891: LD_INT 1
38893: DEC
38894: ST_TO_ADDR
38895: LD_EXP 31
38899: PUSH
38900: FOR_TO
38901: IFFALSE 39032
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
38903: LD_ADDR_VAR 0 4
38907: PUSH
38908: LD_EXP 46
38912: PUSH
38913: LD_VAR 0 2
38917: ARRAY
38918: PPUSH
38919: LD_INT 33
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PPUSH
38929: CALL_OW 72
38933: ST_TO_ADDR
// if tmp then
38934: LD_VAR 0 4
38938: IFFALSE 39030
// for j in tmp do
38940: LD_ADDR_VAR 0 3
38944: PUSH
38945: LD_VAR 0 4
38949: PUSH
38950: FOR_IN
38951: IFFALSE 39028
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
38953: LD_VAR 0 3
38957: PPUSH
38958: CALL_OW 312
38962: NOT
38963: PUSH
38964: LD_VAR 0 3
38968: PPUSH
38969: CALL_OW 256
38973: PUSH
38974: LD_INT 250
38976: GREATEREQUAL
38977: AND
38978: IFFALSE 38991
// Connect ( j ) else
38980: LD_VAR 0 3
38984: PPUSH
38985: CALL 4428 0 1
38989: GO 39026
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
38991: LD_VAR 0 3
38995: PPUSH
38996: CALL_OW 256
39000: PUSH
39001: LD_INT 250
39003: LESS
39004: PUSH
39005: LD_VAR 0 3
39009: PPUSH
39010: CALL_OW 312
39014: AND
39015: IFFALSE 39026
// ComUnlink ( j ) ;
39017: LD_VAR 0 3
39021: PPUSH
39022: CALL_OW 136
39026: GO 38950
39028: POP
39029: POP
// end ;
39030: GO 38900
39032: POP
39033: POP
// end ;
39034: LD_VAR 0 1
39038: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
39043: PPUSH
39044: PPUSH
39045: PPUSH
// if not mc_bases then
39046: LD_EXP 31
39050: NOT
39051: IFFALSE 39055
// exit ;
39053: GO 39422
// for i = 1 to mc_bases do
39055: LD_ADDR_VAR 0 2
39059: PUSH
39060: DOUBLE
39061: LD_INT 1
39063: DEC
39064: ST_TO_ADDR
39065: LD_EXP 31
39069: PUSH
39070: FOR_TO
39071: IFFALSE 39420
// begin if not mc_produce [ i ] then
39073: LD_EXP 48
39077: PUSH
39078: LD_VAR 0 2
39082: ARRAY
39083: NOT
39084: IFFALSE 39088
// continue ;
39086: GO 39070
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
39088: LD_ADDR_VAR 0 5
39092: PUSH
39093: LD_EXP 31
39097: PUSH
39098: LD_VAR 0 2
39102: ARRAY
39103: PPUSH
39104: LD_INT 30
39106: PUSH
39107: LD_INT 3
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PPUSH
39114: CALL_OW 72
39118: ST_TO_ADDR
// if not fac then
39119: LD_VAR 0 5
39123: NOT
39124: IFFALSE 39128
// continue ;
39126: GO 39070
// for j in fac do
39128: LD_ADDR_VAR 0 3
39132: PUSH
39133: LD_VAR 0 5
39137: PUSH
39138: FOR_IN
39139: IFFALSE 39416
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
39141: LD_VAR 0 3
39145: PPUSH
39146: CALL_OW 461
39150: PUSH
39151: LD_INT 2
39153: NONEQUAL
39154: PUSH
39155: LD_VAR 0 3
39159: PPUSH
39160: LD_INT 20
39162: PPUSH
39163: CALL 4119 0 2
39167: PUSH
39168: LD_INT 4
39170: ARRAY
39171: OR
39172: PUSH
39173: LD_VAR 0 3
39177: PPUSH
39178: CALL_OW 313
39182: PUSH
39183: LD_INT 0
39185: EQUAL
39186: OR
39187: IFFALSE 39191
// continue ;
39189: GO 39138
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
39191: LD_VAR 0 3
39195: PPUSH
39196: LD_EXP 48
39200: PUSH
39201: LD_VAR 0 2
39205: ARRAY
39206: PUSH
39207: LD_INT 1
39209: ARRAY
39210: PUSH
39211: LD_INT 1
39213: ARRAY
39214: PPUSH
39215: LD_EXP 48
39219: PUSH
39220: LD_VAR 0 2
39224: ARRAY
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PUSH
39230: LD_INT 2
39232: ARRAY
39233: PPUSH
39234: LD_EXP 48
39238: PUSH
39239: LD_VAR 0 2
39243: ARRAY
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PUSH
39249: LD_INT 3
39251: ARRAY
39252: PPUSH
39253: LD_EXP 48
39257: PUSH
39258: LD_VAR 0 2
39262: ARRAY
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PUSH
39268: LD_INT 4
39270: ARRAY
39271: PPUSH
39272: CALL_OW 448
39276: IFFALSE 39414
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
39278: LD_VAR 0 3
39282: PPUSH
39283: LD_EXP 48
39287: PUSH
39288: LD_VAR 0 2
39292: ARRAY
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PUSH
39298: LD_INT 1
39300: ARRAY
39301: PPUSH
39302: LD_EXP 48
39306: PUSH
39307: LD_VAR 0 2
39311: ARRAY
39312: PUSH
39313: LD_INT 1
39315: ARRAY
39316: PUSH
39317: LD_INT 2
39319: ARRAY
39320: PPUSH
39321: LD_EXP 48
39325: PUSH
39326: LD_VAR 0 2
39330: ARRAY
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PUSH
39336: LD_INT 3
39338: ARRAY
39339: PPUSH
39340: LD_EXP 48
39344: PUSH
39345: LD_VAR 0 2
39349: ARRAY
39350: PUSH
39351: LD_INT 1
39353: ARRAY
39354: PUSH
39355: LD_INT 4
39357: ARRAY
39358: PPUSH
39359: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
39363: LD_ADDR_VAR 0 4
39367: PUSH
39368: LD_EXP 48
39372: PUSH
39373: LD_VAR 0 2
39377: ARRAY
39378: PPUSH
39379: LD_INT 1
39381: PPUSH
39382: CALL_OW 3
39386: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
39387: LD_ADDR_EXP 48
39391: PUSH
39392: LD_EXP 48
39396: PPUSH
39397: LD_VAR 0 2
39401: PPUSH
39402: LD_VAR 0 4
39406: PPUSH
39407: CALL_OW 1
39411: ST_TO_ADDR
// break ;
39412: GO 39416
// end ; end ;
39414: GO 39138
39416: POP
39417: POP
// end ;
39418: GO 39070
39420: POP
39421: POP
// end ;
39422: LD_VAR 0 1
39426: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
39427: LD_INT 0
39429: PPUSH
39430: PPUSH
39431: PPUSH
// if not mc_bases then
39432: LD_EXP 31
39436: NOT
39437: IFFALSE 39441
// exit ;
39439: GO 39530
// for i = 1 to mc_bases do
39441: LD_ADDR_VAR 0 2
39445: PUSH
39446: DOUBLE
39447: LD_INT 1
39449: DEC
39450: ST_TO_ADDR
39451: LD_EXP 31
39455: PUSH
39456: FOR_TO
39457: IFFALSE 39528
// begin if mc_attack [ i ] then
39459: LD_EXP 47
39463: PUSH
39464: LD_VAR 0 2
39468: ARRAY
39469: IFFALSE 39526
// begin tmp := mc_attack [ i ] [ 1 ] ;
39471: LD_ADDR_VAR 0 3
39475: PUSH
39476: LD_EXP 47
39480: PUSH
39481: LD_VAR 0 2
39485: ARRAY
39486: PUSH
39487: LD_INT 1
39489: ARRAY
39490: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
39491: LD_ADDR_EXP 47
39495: PUSH
39496: LD_EXP 47
39500: PPUSH
39501: LD_VAR 0 2
39505: PPUSH
39506: EMPTY
39507: PPUSH
39508: CALL_OW 1
39512: ST_TO_ADDR
// Attack ( tmp ) ;
39513: LD_VAR 0 3
39517: PPUSH
39518: CALL 27541 0 1
// exit ;
39522: POP
39523: POP
39524: GO 39530
// end ; end ;
39526: GO 39456
39528: POP
39529: POP
// end ;
39530: LD_VAR 0 1
39534: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
39535: LD_INT 0
39537: PPUSH
39538: PPUSH
39539: PPUSH
39540: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
39541: LD_VAR 0 1
39545: NOT
39546: PUSH
39547: LD_VAR 0 2
39551: NOT
39552: OR
39553: PUSH
39554: LD_VAR 0 3
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 2
39564: PUSH
39565: LD_INT 3
39567: PUSH
39568: LD_INT 4
39570: PUSH
39571: LD_INT 5
39573: PUSH
39574: LD_INT 8
39576: PUSH
39577: LD_INT 9
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: IN
39589: NOT
39590: OR
39591: IFFALSE 39595
// exit ;
39593: GO 40007
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39595: LD_ADDR_VAR 0 1
39599: PUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: LD_INT 21
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 24
39617: PUSH
39618: LD_INT 250
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PPUSH
39629: CALL_OW 72
39633: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
39634: LD_VAR 0 3
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: LD_INT 8
39644: PUSH
39645: LD_INT 9
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: IN
39653: IFFALSE 39663
// class := 1 ;
39655: LD_ADDR_VAR 0 3
39659: PUSH
39660: LD_INT 1
39662: ST_TO_ADDR
// case class of 1 :
39663: LD_VAR 0 3
39667: PUSH
39668: LD_INT 1
39670: DOUBLE
39671: EQUAL
39672: IFTRUE 39676
39674: GO 39722
39676: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
39677: LD_ADDR_VAR 0 7
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: LD_INT 2
39689: PUSH
39690: LD_INT 30
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 30
39702: PUSH
39703: LD_INT 5
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: PPUSH
39715: CALL_OW 72
39719: ST_TO_ADDR
39720: GO 39896
39722: LD_INT 2
39724: DOUBLE
39725: EQUAL
39726: IFTRUE 39730
39728: GO 39776
39730: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: LD_VAR 0 1
39740: PPUSH
39741: LD_INT 2
39743: PUSH
39744: LD_INT 30
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 30
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: LIST
39768: PPUSH
39769: CALL_OW 72
39773: ST_TO_ADDR
39774: GO 39896
39776: LD_INT 3
39778: DOUBLE
39779: EQUAL
39780: IFTRUE 39784
39782: GO 39830
39784: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39785: LD_ADDR_VAR 0 7
39789: PUSH
39790: LD_VAR 0 1
39794: PPUSH
39795: LD_INT 2
39797: PUSH
39798: LD_INT 30
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 30
39810: PUSH
39811: LD_INT 3
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: PPUSH
39823: CALL_OW 72
39827: ST_TO_ADDR
39828: GO 39896
39830: LD_INT 4
39832: DOUBLE
39833: EQUAL
39834: IFTRUE 39838
39836: GO 39895
39838: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
39839: LD_ADDR_VAR 0 7
39843: PUSH
39844: LD_VAR 0 1
39848: PPUSH
39849: LD_INT 2
39851: PUSH
39852: LD_INT 30
39854: PUSH
39855: LD_INT 6
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 30
39864: PUSH
39865: LD_INT 7
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 30
39874: PUSH
39875: LD_INT 8
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: PPUSH
39888: CALL_OW 72
39892: ST_TO_ADDR
39893: GO 39896
39895: POP
// if not tmp then
39896: LD_VAR 0 7
39900: NOT
39901: IFFALSE 39905
// exit ;
39903: GO 40007
// for i in tmp do
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_VAR 0 7
39914: PUSH
39915: FOR_IN
39916: IFFALSE 39985
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
39918: LD_VAR 0 5
39922: PPUSH
39923: CALL_OW 313
39927: PUSH
39928: LD_INT 6
39930: LESS
39931: PUSH
39932: LD_VAR 0 5
39936: PPUSH
39937: CALL_OW 266
39941: PUSH
39942: LD_INT 31
39944: PUSH
39945: LD_INT 32
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: IN
39952: NOT
39953: AND
39954: PUSH
39955: LD_VAR 0 5
39959: PPUSH
39960: CALL_OW 313
39964: PUSH
39965: LD_INT 0
39967: EQUAL
39968: OR
39969: IFFALSE 39983
// begin j := i ;
39971: LD_ADDR_VAR 0 6
39975: PUSH
39976: LD_VAR 0 5
39980: ST_TO_ADDR
// break ;
39981: GO 39985
// end ; end ;
39983: GO 39915
39985: POP
39986: POP
// if j then
39987: LD_VAR 0 6
39991: IFFALSE 40007
// ComEnterUnit ( unit , j ) ;
39993: LD_VAR 0 2
39997: PPUSH
39998: LD_VAR 0 6
40002: PPUSH
40003: CALL_OW 120
// end ;
40007: LD_VAR 0 4
40011: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40012: LD_INT 0
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
// if not mc_bases then
40018: LD_EXP 31
40022: NOT
40023: IFFALSE 40027
// exit ;
40025: GO 40208
// for i = 1 to mc_bases do
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: DOUBLE
40033: LD_INT 1
40035: DEC
40036: ST_TO_ADDR
40037: LD_EXP 31
40041: PUSH
40042: FOR_TO
40043: IFFALSE 40206
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
40045: LD_ADDR_VAR 0 4
40049: PUSH
40050: LD_EXP 31
40054: PUSH
40055: LD_VAR 0 2
40059: ARRAY
40060: PPUSH
40061: LD_INT 21
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PPUSH
40071: CALL_OW 72
40075: ST_TO_ADDR
// if not tmp then
40076: LD_VAR 0 4
40080: NOT
40081: IFFALSE 40087
// exit ;
40083: POP
40084: POP
40085: GO 40208
// for j in tmp do
40087: LD_ADDR_VAR 0 3
40091: PUSH
40092: LD_VAR 0 4
40096: PUSH
40097: FOR_IN
40098: IFFALSE 40202
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
40100: LD_VAR 0 3
40104: PPUSH
40105: CALL_OW 110
40109: NOT
40110: PUSH
40111: LD_VAR 0 3
40115: PPUSH
40116: CALL_OW 314
40120: NOT
40121: AND
40122: PUSH
40123: LD_VAR 0 3
40127: PPUSH
40128: CALL_OW 310
40132: NOT
40133: AND
40134: PUSH
40135: LD_EXP 34
40139: PUSH
40140: LD_VAR 0 2
40144: ARRAY
40145: PUSH
40146: LD_INT 1
40148: ARRAY
40149: NOT
40150: AND
40151: PUSH
40152: LD_EXP 34
40156: PUSH
40157: LD_VAR 0 2
40161: ARRAY
40162: PUSH
40163: LD_INT 2
40165: ARRAY
40166: NOT
40167: AND
40168: IFFALSE 40200
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
40170: LD_EXP 31
40174: PUSH
40175: LD_VAR 0 2
40179: ARRAY
40180: PPUSH
40181: LD_VAR 0 3
40185: PPUSH
40186: LD_VAR 0 3
40190: PPUSH
40191: CALL_OW 257
40195: PPUSH
40196: CALL 39535 0 3
// end ;
40200: GO 40097
40202: POP
40203: POP
// end ;
40204: GO 40042
40206: POP
40207: POP
// end ;
40208: LD_VAR 0 1
40212: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
40213: LD_INT 0
40215: PPUSH
40216: PPUSH
40217: PPUSH
40218: PPUSH
40219: PPUSH
40220: PPUSH
40221: PPUSH
// if not mc_bases [ base ] then
40222: LD_EXP 31
40226: PUSH
40227: LD_VAR 0 1
40231: ARRAY
40232: NOT
40233: IFFALSE 40237
// exit ;
40235: GO 40505
// tmp := [ ] ;
40237: LD_ADDR_VAR 0 7
40241: PUSH
40242: EMPTY
40243: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40244: LD_ADDR_VAR 0 8
40248: PUSH
40249: LD_VAR 0 3
40253: PPUSH
40254: LD_INT 0
40256: PPUSH
40257: CALL_OW 517
40261: ST_TO_ADDR
// if not list then
40262: LD_VAR 0 8
40266: NOT
40267: IFFALSE 40271
// exit ;
40269: GO 40505
// for i = 1 to amount do
40271: LD_ADDR_VAR 0 5
40275: PUSH
40276: DOUBLE
40277: LD_INT 1
40279: DEC
40280: ST_TO_ADDR
40281: LD_VAR 0 2
40285: PUSH
40286: FOR_TO
40287: IFFALSE 40453
// begin c := rand ( 1 , list [ 1 ] - i ) ;
40289: LD_ADDR_VAR 0 6
40293: PUSH
40294: LD_INT 1
40296: PPUSH
40297: LD_VAR 0 8
40301: PUSH
40302: LD_INT 1
40304: ARRAY
40305: PUSH
40306: LD_VAR 0 5
40310: MINUS
40311: PPUSH
40312: CALL_OW 12
40316: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
40317: LD_ADDR_VAR 0 7
40321: PUSH
40322: LD_VAR 0 7
40326: PPUSH
40327: LD_VAR 0 5
40331: PPUSH
40332: LD_VAR 0 8
40336: PUSH
40337: LD_INT 1
40339: ARRAY
40340: PUSH
40341: LD_VAR 0 6
40345: ARRAY
40346: PUSH
40347: LD_VAR 0 8
40351: PUSH
40352: LD_INT 2
40354: ARRAY
40355: PUSH
40356: LD_VAR 0 6
40360: ARRAY
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PPUSH
40366: CALL_OW 1
40370: ST_TO_ADDR
// for j = 1 to 2 do
40371: LD_ADDR_VAR 0 10
40375: PUSH
40376: DOUBLE
40377: LD_INT 1
40379: DEC
40380: ST_TO_ADDR
40381: LD_INT 2
40383: PUSH
40384: FOR_TO
40385: IFFALSE 40440
// begin x := Delete ( list [ j ] , c ) ;
40387: LD_ADDR_VAR 0 9
40391: PUSH
40392: LD_VAR 0 8
40396: PUSH
40397: LD_VAR 0 10
40401: ARRAY
40402: PPUSH
40403: LD_VAR 0 6
40407: PPUSH
40408: CALL_OW 3
40412: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
40413: LD_ADDR_VAR 0 8
40417: PUSH
40418: LD_VAR 0 8
40422: PPUSH
40423: LD_VAR 0 10
40427: PPUSH
40428: LD_VAR 0 9
40432: PPUSH
40433: CALL_OW 1
40437: ST_TO_ADDR
// end ;
40438: GO 40384
40440: POP
40441: POP
// if not list then
40442: LD_VAR 0 8
40446: NOT
40447: IFFALSE 40451
// break ;
40449: GO 40453
// end ;
40451: GO 40286
40453: POP
40454: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40455: LD_ADDR_EXP 41
40459: PUSH
40460: LD_EXP 41
40464: PPUSH
40465: LD_VAR 0 1
40469: PPUSH
40470: LD_VAR 0 7
40474: PPUSH
40475: CALL_OW 1
40479: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40480: LD_ADDR_EXP 43
40484: PUSH
40485: LD_EXP 43
40489: PPUSH
40490: LD_VAR 0 1
40494: PPUSH
40495: LD_VAR 0 3
40499: PPUSH
40500: CALL_OW 1
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 4
40509: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
40510: LD_INT 0
40512: PPUSH
// if not mc_bases [ base ] then
40513: LD_EXP 31
40517: PUSH
40518: LD_VAR 0 1
40522: ARRAY
40523: NOT
40524: IFFALSE 40528
// exit ;
40526: GO 40553
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
40528: LD_ADDR_EXP 48
40532: PUSH
40533: LD_EXP 48
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: LD_VAR 0 2
40547: PPUSH
40548: CALL_OW 1
40552: ST_TO_ADDR
// end ;
40553: LD_VAR 0 3
40557: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
40558: LD_INT 0
40560: PPUSH
40561: PPUSH
40562: PPUSH
40563: PPUSH
// if not mc_bases [ base ] then
40564: LD_EXP 31
40568: PUSH
40569: LD_VAR 0 1
40573: ARRAY
40574: NOT
40575: IFFALSE 40579
// exit ;
40577: GO 40644
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
40579: LD_ADDR_EXP 47
40583: PUSH
40584: LD_EXP 47
40588: PPUSH
40589: LD_VAR 0 1
40593: PUSH
40594: LD_EXP 47
40598: PUSH
40599: LD_VAR 0 1
40603: ARRAY
40604: PUSH
40605: LD_INT 1
40607: PLUS
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PPUSH
40613: LD_VAR 0 1
40617: PUSH
40618: LD_VAR 0 2
40622: PUSH
40623: LD_VAR 0 3
40627: PUSH
40628: LD_VAR 0 4
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: PPUSH
40639: CALL 1945 0 3
40643: ST_TO_ADDR
// end ;
40644: LD_VAR 0 5
40648: RET
// export function MC_GetMinesField ( base ) ; begin
40649: LD_INT 0
40651: PPUSH
// result := mc_mines [ base ] ;
40652: LD_ADDR_VAR 0 2
40656: PUSH
40657: LD_EXP 41
40661: PUSH
40662: LD_VAR 0 1
40666: ARRAY
40667: ST_TO_ADDR
// end ; end_of_file
40668: LD_VAR 0 2
40672: RET
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
40673: LD_INT 0
40675: PPUSH
40676: PPUSH
40677: PPUSH
40678: PPUSH
40679: PPUSH
// begin if un in FilterAllUnits ( [ f_type , unit_building ] ) then
40680: LD_VAR 0 1
40684: PUSH
40685: LD_INT 21
40687: PUSH
40688: LD_INT 3
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PPUSH
40695: CALL_OW 69
40699: IN
40700: IFFALSE 41216
// begin if not mc_bases then
40702: LD_EXP 31
40706: NOT
40707: IFFALSE 40711
// exit ;
40709: GO 41216
// pos := mc_build_list [ i ] + 1 ;
40711: LD_ADDR_VAR 0 5
40715: PUSH
40716: LD_EXP 36
40720: PUSH
40721: LD_VAR 0 2
40725: ARRAY
40726: PUSH
40727: LD_INT 1
40729: PLUS
40730: ST_TO_ADDR
// btype := GetBType ( un ) ;
40731: LD_ADDR_VAR 0 4
40735: PUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 266
40745: ST_TO_ADDR
// if btype = b_warehouse then
40746: LD_VAR 0 4
40750: PUSH
40751: LD_INT 1
40753: EQUAL
40754: IFFALSE 40772
// begin btype := b_depot ;
40756: LD_ADDR_VAR 0 4
40760: PUSH
40761: LD_INT 0
40763: ST_TO_ADDR
// pos := 1 ;
40764: LD_ADDR_VAR 0 5
40768: PUSH
40769: LD_INT 1
40771: ST_TO_ADDR
// end ; if btype = b_factory then
40772: LD_VAR 0 4
40776: PUSH
40777: LD_INT 3
40779: EQUAL
40780: IFFALSE 40798
// begin btype := b_workshop ;
40782: LD_ADDR_VAR 0 4
40786: PUSH
40787: LD_INT 2
40789: ST_TO_ADDR
// pos := 1 ;
40790: LD_ADDR_VAR 0 5
40794: PUSH
40795: LD_INT 1
40797: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
40798: LD_VAR 0 4
40802: PUSH
40803: LD_INT 7
40805: PUSH
40806: LD_INT 8
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: IN
40813: IFFALSE 40823
// btype := b_lab ;
40815: LD_ADDR_VAR 0 4
40819: PUSH
40820: LD_INT 6
40822: ST_TO_ADDR
// for i = 1 to mc_bases do
40823: LD_ADDR_VAR 0 2
40827: PUSH
40828: DOUBLE
40829: LD_INT 1
40831: DEC
40832: ST_TO_ADDR
40833: LD_EXP 31
40837: PUSH
40838: FOR_TO
40839: IFFALSE 41214
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
40841: LD_VAR 0 1
40845: PUSH
40846: LD_EXP 31
40850: PUSH
40851: LD_VAR 0 2
40855: ARRAY
40856: IN
40857: PUSH
40858: LD_VAR 0 1
40862: PUSH
40863: LD_EXP 38
40867: PUSH
40868: LD_VAR 0 2
40872: ARRAY
40873: IN
40874: OR
40875: IFFALSE 41212
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
40877: LD_ADDR_EXP 36
40881: PUSH
40882: LD_EXP 36
40886: PPUSH
40887: LD_VAR 0 2
40891: PUSH
40892: LD_EXP 36
40896: PUSH
40897: LD_VAR 0 2
40901: ARRAY
40902: PUSH
40903: LD_INT 1
40905: PLUS
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PPUSH
40911: LD_VAR 0 4
40915: PUSH
40916: LD_VAR 0 1
40920: PPUSH
40921: CALL_OW 250
40925: PUSH
40926: LD_VAR 0 1
40930: PPUSH
40931: CALL_OW 251
40935: PUSH
40936: LD_VAR 0 1
40940: PPUSH
40941: CALL_OW 254
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: PPUSH
40952: CALL 1945 0 3
40956: ST_TO_ADDR
// if pos = 1 then
40957: LD_VAR 0 5
40961: PUSH
40962: LD_INT 1
40964: EQUAL
40965: IFFALSE 41080
// begin tmp := mc_build_list [ i ] ;
40967: LD_ADDR_VAR 0 6
40971: PUSH
40972: LD_EXP 36
40976: PUSH
40977: LD_VAR 0 2
40981: ARRAY
40982: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
40983: LD_VAR 0 6
40987: PPUSH
40988: LD_INT 2
40990: PUSH
40991: LD_INT 30
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 30
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: LIST
41015: PPUSH
41016: CALL_OW 72
41020: IFFALSE 41030
// pos := 2 ;
41022: LD_ADDR_VAR 0 5
41026: PUSH
41027: LD_INT 2
41029: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
41030: LD_ADDR_VAR 0 6
41034: PUSH
41035: LD_VAR 0 6
41039: PPUSH
41040: LD_VAR 0 5
41044: PPUSH
41045: LD_VAR 0 6
41049: PPUSH
41050: CALL 1836 0 3
41054: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
41055: LD_ADDR_EXP 36
41059: PUSH
41060: LD_EXP 36
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: LD_VAR 0 6
41074: PPUSH
41075: CALL_OW 1
41079: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
41080: LD_VAR 0 1
41084: PUSH
41085: LD_EXP 31
41089: PUSH
41090: LD_VAR 0 2
41094: ARRAY
41095: IN
41096: IFFALSE 41145
// begin tmp := mc_bases [ i ] diff un ;
41098: LD_ADDR_VAR 0 6
41102: PUSH
41103: LD_EXP 31
41107: PUSH
41108: LD_VAR 0 2
41112: ARRAY
41113: PUSH
41114: LD_VAR 0 1
41118: DIFF
41119: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
41120: LD_ADDR_EXP 31
41124: PUSH
41125: LD_EXP 31
41129: PPUSH
41130: LD_VAR 0 2
41134: PPUSH
41135: LD_VAR 0 6
41139: PPUSH
41140: CALL_OW 1
41144: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
41145: LD_VAR 0 1
41149: PUSH
41150: LD_EXP 38
41154: PUSH
41155: LD_VAR 0 2
41159: ARRAY
41160: IN
41161: IFFALSE 41210
// begin tmp := mc_construct_list [ i ] diff un ;
41163: LD_ADDR_VAR 0 6
41167: PUSH
41168: LD_EXP 38
41172: PUSH
41173: LD_VAR 0 2
41177: ARRAY
41178: PUSH
41179: LD_VAR 0 1
41183: DIFF
41184: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
41185: LD_ADDR_EXP 38
41189: PUSH
41190: LD_EXP 38
41194: PPUSH
41195: LD_VAR 0 2
41199: PPUSH
41200: LD_VAR 0 6
41204: PPUSH
41205: CALL_OW 1
41209: ST_TO_ADDR
// end ; break ;
41210: GO 41214
// end ;
41212: GO 40838
41214: POP
41215: POP
// end ; end ;
41216: PPOPN 6
41218: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
41219: LD_INT 0
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
// begin if not mc_bases then
41228: LD_EXP 31
41232: NOT
41233: IFFALSE 41237
// exit ;
41235: GO 41478
// btype := GetBType ( building ) ;
41237: LD_ADDR_VAR 0 6
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 266
41251: ST_TO_ADDR
// x := GetX ( building ) ;
41252: LD_ADDR_VAR 0 7
41256: PUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 250
41266: ST_TO_ADDR
// y := GetY ( building ) ;
41267: LD_ADDR_VAR 0 8
41271: PUSH
41272: LD_VAR 0 1
41276: PPUSH
41277: CALL_OW 251
41281: ST_TO_ADDR
// d := GetDir ( building ) ;
41282: LD_ADDR_VAR 0 9
41286: PUSH
41287: LD_VAR 0 1
41291: PPUSH
41292: CALL_OW 254
41296: ST_TO_ADDR
// for i = 1 to mc_bases do
41297: LD_ADDR_VAR 0 3
41301: PUSH
41302: DOUBLE
41303: LD_INT 1
41305: DEC
41306: ST_TO_ADDR
41307: LD_EXP 31
41311: PUSH
41312: FOR_TO
41313: IFFALSE 41476
// begin if not mc_build_list [ i ] then
41315: LD_EXP 36
41319: PUSH
41320: LD_VAR 0 3
41324: ARRAY
41325: NOT
41326: IFFALSE 41330
// continue ;
41328: GO 41312
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
41330: LD_VAR 0 6
41334: PUSH
41335: LD_VAR 0 7
41339: PUSH
41340: LD_VAR 0 8
41344: PUSH
41345: LD_VAR 0 9
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: PPUSH
41356: LD_EXP 36
41360: PUSH
41361: LD_VAR 0 3
41365: ARRAY
41366: PUSH
41367: LD_INT 1
41369: ARRAY
41370: PPUSH
41371: CALL 7131 0 2
41375: IFFALSE 41474
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
41377: LD_ADDR_VAR 0 5
41381: PUSH
41382: LD_EXP 36
41386: PUSH
41387: LD_VAR 0 3
41391: ARRAY
41392: PPUSH
41393: LD_INT 1
41395: PPUSH
41396: CALL_OW 3
41400: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
41401: LD_ADDR_EXP 36
41405: PUSH
41406: LD_EXP 36
41410: PPUSH
41411: LD_VAR 0 3
41415: PPUSH
41416: LD_VAR 0 5
41420: PPUSH
41421: CALL_OW 1
41425: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
41426: LD_ADDR_EXP 38
41430: PUSH
41431: LD_EXP 38
41435: PPUSH
41436: LD_VAR 0 3
41440: PUSH
41441: LD_EXP 38
41445: PUSH
41446: LD_VAR 0 3
41450: ARRAY
41451: PUSH
41452: LD_INT 1
41454: PLUS
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PPUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL 1945 0 3
41469: ST_TO_ADDR
// exit ;
41470: POP
41471: POP
41472: GO 41478
// end ; end ;
41474: GO 41312
41476: POP
41477: POP
// end ;
41478: PPOPN 9
41480: END
// on BuildingComplete ( building ) do var i , j , tmp ;
41481: LD_INT 0
41483: PPUSH
41484: PPUSH
41485: PPUSH
// begin if not mc_bases then
41486: LD_EXP 31
41490: NOT
41491: IFFALSE 41495
// exit ;
41493: GO 41696
// for i = 1 to mc_bases do
41495: LD_ADDR_VAR 0 2
41499: PUSH
41500: DOUBLE
41501: LD_INT 1
41503: DEC
41504: ST_TO_ADDR
41505: LD_EXP 31
41509: PUSH
41510: FOR_TO
41511: IFFALSE 41694
// begin if building in mc_construct_list [ i ] then
41513: LD_VAR 0 1
41517: PUSH
41518: LD_EXP 38
41522: PUSH
41523: LD_VAR 0 2
41527: ARRAY
41528: IN
41529: IFFALSE 41692
// begin tmp := mc_construct_list [ i ] diff building ;
41531: LD_ADDR_VAR 0 4
41535: PUSH
41536: LD_EXP 38
41540: PUSH
41541: LD_VAR 0 2
41545: ARRAY
41546: PUSH
41547: LD_VAR 0 1
41551: DIFF
41552: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
41553: LD_ADDR_EXP 38
41557: PUSH
41558: LD_EXP 38
41562: PPUSH
41563: LD_VAR 0 2
41567: PPUSH
41568: LD_VAR 0 4
41572: PPUSH
41573: CALL_OW 1
41577: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
41578: LD_ADDR_EXP 31
41582: PUSH
41583: LD_EXP 31
41587: PPUSH
41588: LD_VAR 0 2
41592: PUSH
41593: LD_EXP 31
41597: PUSH
41598: LD_VAR 0 2
41602: ARRAY
41603: PUSH
41604: LD_INT 1
41606: PLUS
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PPUSH
41612: LD_VAR 0 1
41616: PPUSH
41617: CALL 1945 0 3
41621: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
41622: LD_VAR 0 1
41626: PPUSH
41627: CALL_OW 266
41631: PUSH
41632: LD_INT 32
41634: PUSH
41635: LD_INT 33
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: IN
41642: IFFALSE 41688
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
41644: LD_ADDR_EXP 39
41648: PUSH
41649: LD_EXP 39
41653: PPUSH
41654: LD_VAR 0 2
41658: PUSH
41659: LD_EXP 39
41663: PUSH
41664: LD_VAR 0 2
41668: ARRAY
41669: PUSH
41670: LD_INT 1
41672: PLUS
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL 1945 0 3
41687: ST_TO_ADDR
// exit ;
41688: POP
41689: POP
41690: GO 41696
// end ; end ;
41692: GO 41510
41694: POP
41695: POP
// end ;
41696: PPOPN 4
41698: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
41699: LD_INT 0
41701: PPUSH
41702: PPUSH
// begin if not mc_bases then
41703: LD_EXP 31
41707: NOT
41708: IFFALSE 41712
// exit ;
41710: GO 41905
// repeat wait ( 0 0$1 ) ;
41712: LD_INT 35
41714: PPUSH
41715: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
41719: LD_VAR 0 2
41723: PPUSH
41724: LD_VAR 0 3
41728: PPUSH
41729: CALL_OW 284
41733: IFFALSE 41712
// for i = 1 to mc_bases do
41735: LD_ADDR_VAR 0 6
41739: PUSH
41740: DOUBLE
41741: LD_INT 1
41743: DEC
41744: ST_TO_ADDR
41745: LD_EXP 31
41749: PUSH
41750: FOR_TO
41751: IFFALSE 41903
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41753: LD_ADDR_VAR 0 7
41757: PUSH
41758: LD_EXP 31
41762: PUSH
41763: LD_VAR 0 6
41767: ARRAY
41768: PPUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 30
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: PPUSH
41797: CALL_OW 72
41801: ST_TO_ADDR
// if not depot then
41802: LD_VAR 0 7
41806: NOT
41807: IFFALSE 41811
// continue ;
41809: GO 41750
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
41811: LD_VAR 0 7
41815: PUSH
41816: LD_INT 1
41818: ARRAY
41819: PPUSH
41820: LD_VAR 0 2
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: CALL_OW 297
41834: PUSH
41835: LD_INT 30
41837: LESS
41838: IFFALSE 41901
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41840: LD_ADDR_EXP 44
41844: PUSH
41845: LD_EXP 44
41849: PPUSH
41850: LD_VAR 0 6
41854: PUSH
41855: LD_EXP 44
41859: PUSH
41860: LD_VAR 0 6
41864: ARRAY
41865: PUSH
41866: LD_INT 1
41868: PLUS
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PPUSH
41874: LD_VAR 0 4
41878: PUSH
41879: LD_VAR 0 2
41883: PUSH
41884: LD_VAR 0 3
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: PPUSH
41894: CALL 1945 0 3
41898: ST_TO_ADDR
// break ;
41899: GO 41903
// end ; end ;
41901: GO 41750
41903: POP
41904: POP
// end ;
41905: PPOPN 7
41907: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
41908: LD_INT 0
41910: PPUSH
41911: PPUSH
// begin if not mc_bases then
41912: LD_EXP 31
41916: NOT
41917: IFFALSE 41921
// exit ;
41919: GO 42009
// for i = 1 to mc_bases do
41921: LD_ADDR_VAR 0 3
41925: PUSH
41926: DOUBLE
41927: LD_INT 1
41929: DEC
41930: ST_TO_ADDR
41931: LD_EXP 31
41935: PUSH
41936: FOR_TO
41937: IFFALSE 42007
// begin if factory in mc_bases [ i ] then
41939: LD_VAR 0 2
41943: PUSH
41944: LD_EXP 31
41948: PUSH
41949: LD_VAR 0 3
41953: ARRAY
41954: IN
41955: IFFALSE 42005
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
41957: LD_ADDR_EXP 46
41961: PUSH
41962: LD_EXP 46
41966: PPUSH
41967: LD_VAR 0 3
41971: PUSH
41972: LD_EXP 46
41976: PUSH
41977: LD_VAR 0 3
41981: ARRAY
41982: PUSH
41983: LD_INT 1
41985: PLUS
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: LD_VAR 0 1
41995: PPUSH
41996: CALL 1945 0 3
42000: ST_TO_ADDR
// exit ;
42001: POP
42002: POP
42003: GO 42009
// end ; end ;
42005: GO 41936
42007: POP
42008: POP
// end ; end_of_file
42009: PPOPN 4
42011: END
// every 0 0$1 trigger game do
42012: LD_EXP 2
42016: IFFALSE 42046
42018: GO 42020
42020: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
42021: LD_INT 7
42023: PUSH
42024: LD_INT 6
42026: PUSH
42027: LD_INT 4
42029: PUSH
42030: LD_INT 6
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: PPUSH
42039: LD_INT 1400
42041: PPUSH
42042: CALL 42047 0 2
42046: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
42047: LD_INT 0
42049: PPUSH
42050: PPUSH
42051: PPUSH
// if not areas then
42052: LD_VAR 0 1
42056: NOT
42057: IFFALSE 42061
// exit ;
42059: GO 42173
// repeat wait ( time ) ;
42061: LD_VAR 0 2
42065: PPUSH
42066: CALL_OW 67
// p := rand ( 1 , 90 ) ;
42070: LD_ADDR_VAR 0 5
42074: PUSH
42075: LD_INT 1
42077: PPUSH
42078: LD_INT 90
42080: PPUSH
42081: CALL_OW 12
42085: ST_TO_ADDR
// for i in areas do
42086: LD_ADDR_VAR 0 4
42090: PUSH
42091: LD_VAR 0 1
42095: PUSH
42096: FOR_IN
42097: IFFALSE 42150
// begin if Prob ( p ) then
42099: LD_VAR 0 5
42103: PPUSH
42104: CALL_OW 13
42108: IFFALSE 42148
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
42110: LD_INT 1
42112: PPUSH
42113: LD_INT 5
42115: PPUSH
42116: CALL_OW 12
42120: PPUSH
42121: LD_VAR 0 4
42125: PPUSH
42126: LD_INT 1
42128: PPUSH
42129: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
42133: LD_INT 455
42135: PPUSH
42136: LD_INT 595
42138: PPUSH
42139: CALL_OW 12
42143: PPUSH
42144: CALL_OW 67
// end ; end ;
42148: GO 42096
42150: POP
42151: POP
// time := time + 0 0$3 ;
42152: LD_ADDR_VAR 0 2
42156: PUSH
42157: LD_VAR 0 2
42161: PUSH
42162: LD_INT 105
42164: PLUS
42165: ST_TO_ADDR
// until not game ;
42166: LD_EXP 2
42170: NOT
42171: IFFALSE 42061
// end ;
42173: LD_VAR 0 3
42177: RET
