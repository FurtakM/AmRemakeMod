// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16279 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 75995 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2208 0 0
// MC_Start ( ) ;
  78: CALL 17374 0 0
// Action ;
  82: CALL 7361 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 189000
 212: PUSH
 213: LD_INT 168000
 215: PUSH
 216: LD_INT 157500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 73
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 74
 312: PUSH
 313: LD_INT 25
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 36089 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 36089 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 36089 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 49
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 36537 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 41905 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 41905 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 41905 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 41905 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 41905 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 41905 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 41905 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 41905 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 41905 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 41905 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 41905 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 41905 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 41905 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 41905 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 41905 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1461
// if GetClass ( i ) = class_mortar then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: EQUAL
1445: IFFALSE 1459
// SetClass ( i , class_soldier ) ;
1447: LD_VAR 0 2
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL_OW 336
1459: GO 1429
1461: POP
1462: POP
// if tmp < 12 then
1463: LD_VAR 0 5
1467: PUSH
1468: LD_INT 12
1470: LESS
1471: IFFALSE 1569
// begin k := 16 - tmp ;
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: LD_INT 16
1480: PUSH
1481: LD_VAR 0 5
1485: MINUS
1486: ST_TO_ADDR
// for i = 1 to k do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_VAR 0 3
1501: PUSH
1502: FOR_TO
1503: IFFALSE 1567
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1505: LD_INT 0
1507: PPUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 1
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: LD_INT 4
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 5
1535: PPUSH
1536: CALL_OW 12
1540: ARRAY
1541: PPUSH
1542: LD_INT 6
1544: PPUSH
1545: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: CALL_OW 44
1563: ADD
1564: ST_TO_ADDR
// end ;
1565: GO 1502
1567: POP
1568: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1569: LD_ADDR_EXP 20
1573: PUSH
1574: LD_STRING 1
1576: PPUSH
1577: LD_INT 12
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT -5
1585: PUSH
1586: LD_EXP 21
1590: PUSH
1591: LD_INT -2
1593: PUSH
1594: LD_INT -3
1596: PUSH
1597: LD_INT -5
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_VAR 0 5
1611: ADD
1612: PUSH
1613: LD_INT -6
1615: PUSH
1616: LD_INT -4
1618: PUSH
1619: LD_EXP 30
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: ADD
1629: PPUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 42
1703: ST_TO_ADDR
// others := tmp diff selected ;
1704: LD_ADDR_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: LD_EXP 20
1718: DIFF
1719: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1720: LD_ADDR_VAR 0 8
1724: PUSH
1725: LD_VAR 0 5
1729: PUSH
1730: LD_EXP 22
1734: PUSH
1735: LD_EXP 23
1739: PUSH
1740: LD_EXP 24
1744: PUSH
1745: LD_EXP 25
1749: PUSH
1750: LD_EXP 26
1754: PUSH
1755: LD_EXP 27
1759: PUSH
1760: LD_EXP 28
1764: PUSH
1765: LD_EXP 29
1769: PUSH
1770: LD_EXP 31
1774: PUSH
1775: LD_EXP 32
1779: PUSH
1780: LD_EXP 33
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: DIFF
1804: ST_TO_ADDR
// no_selected := others ;
1805: LD_ADDR_EXP 19
1809: PUSH
1810: LD_VAR 0 8
1814: ST_TO_ADDR
// if no_selected then
1815: LD_EXP 19
1819: IFFALSE 1833
// SaveCharacters ( no_selected , 11_others ) ;
1821: LD_EXP 19
1825: PPUSH
1826: LD_STRING 11_others
1828: PPUSH
1829: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1833: LD_ADDR_VAR 0 6
1837: PUSH
1838: LD_INT 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 1
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 7
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: ST_TO_ADDR
// for i in JMM ^ selected do
1935: LD_ADDR_VAR 0 2
1939: PUSH
1940: LD_EXP 21
1944: PUSH
1945: LD_EXP 20
1949: ADD
1950: PUSH
1951: FOR_IN
1952: IFFALSE 2141
// begin if GetClass ( i ) = 3 then
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 257
1963: PUSH
1964: LD_INT 3
1966: EQUAL
1967: IFFALSE 2124
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1969: LD_ADDR_OWVAR 37
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1987: LD_ADDR_OWVAR 39
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 2
2003: ARRAY
2004: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2005: LD_ADDR_OWVAR 38
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2023: LD_ADDR_OWVAR 40
2027: PUSH
2028: LD_VAR 0 6
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PUSH
2037: LD_INT 4
2039: ARRAY
2040: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2041: LD_ADDR_VAR 0 6
2045: PUSH
2046: LD_VAR 0 6
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: CALL_OW 3
2058: ST_TO_ADDR
// veh := CreateVehicle ;
2059: LD_ADDR_VAR 0 7
2063: PUSH
2064: CALL_OW 45
2068: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2069: LD_VAR 0 7
2073: PPUSH
2074: LD_INT 8
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_VAR 0 7
2093: PPUSH
2094: CALL_OW 52
// if i = JMM then
2098: LD_VAR 0 2
2102: PUSH
2103: LD_EXP 21
2107: EQUAL
2108: IFFALSE 2122
// SetMark ( veh , 1 ) ;
2110: LD_VAR 0 7
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 242
// end else
2122: GO 2139
// PlaceUnitArea ( i , am_hum_start , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 9
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// end ;
2139: GO 1951
2141: POP
2142: POP
// vc_chassis := us_medium_tracked ;
2143: LD_ADDR_OWVAR 37
2147: PUSH
2148: LD_INT 3
2150: ST_TO_ADDR
// vc_engine := engine_solar ;
2151: LD_ADDR_OWVAR 39
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_control := control_computer ;
2159: LD_ADDR_OWVAR 38
2163: PUSH
2164: LD_INT 3
2166: ST_TO_ADDR
// vc_weapon := us_radar ;
2167: LD_ADDR_OWVAR 40
2171: PUSH
2172: LD_INT 11
2174: ST_TO_ADDR
// veh := CreateVehicle ;
2175: LD_ADDR_VAR 0 7
2179: PUSH
2180: CALL_OW 45
2184: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2185: LD_VAR 0 7
2189: PPUSH
2190: LD_INT 87
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 48
// end ; end_of_file
2203: LD_VAR 0 1
2207: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2215: LD_ADDR_VAR 0 5
2219: PUSH
2220: LD_INT 6
2222: PUSH
2223: LD_INT 7
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_OWVAR 67
2238: ARRAY
2239: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
2240: LD_INT 69
2242: PUSH
2243: EMPTY
2244: LIST
2245: PPUSH
2246: LD_INT 141
2248: PPUSH
2249: CALL_OW 169
// Wait ( 1 ) ;
2253: LD_INT 1
2255: PPUSH
2256: CALL_OW 67
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// uc_nation := 2 ;
2268: LD_ADDR_OWVAR 21
2272: PUSH
2273: LD_INT 2
2275: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2276: LD_ADDR_OWVAR 37
2280: PUSH
2281: LD_INT 14
2283: ST_TO_ADDR
// vc_engine := engine_siberite ;
2284: LD_ADDR_OWVAR 39
2288: PUSH
2289: LD_INT 3
2291: ST_TO_ADDR
// vc_control := control_manual ;
2292: LD_ADDR_OWVAR 38
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2300: LD_ADDR_OWVAR 40
2304: PUSH
2305: LD_INT 31
2307: ST_TO_ADDR
// for i = 1 to 3 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 3
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2406
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: LD_VAR 0 5
2334: PPUSH
2335: CALL_OW 380
// un := CreateVehicle ;
2339: LD_ADDR_VAR 0 4
2343: PUSH
2344: CALL_OW 45
2348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: CALL_OW 12
2364: PPUSH
2365: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 156
2376: PPUSH
2377: LD_INT 15
2379: PPUSH
2380: LD_INT 6
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2390: CALL_OW 44
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 52
// end ;
2404: GO 2321
2406: POP
2407: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2408: LD_ADDR_EXP 37
2412: PUSH
2413: LD_INT 94
2415: PPUSH
2416: LD_STRING dammam
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: LD_INT 10000
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: LD_INT 300
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PPUSH
2438: LD_INT 1
2440: NEG
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: LD_INT 1
2447: NEG
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL 51936 0 5
2462: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
2463: LD_ADDR_EXP 37
2467: PUSH
2468: LD_EXP 37
2472: PUSH
2473: LD_INT 122
2475: PPUSH
2476: LD_STRING 
2478: PPUSH
2479: LD_VAR 0 5
2483: PPUSH
2484: LD_INT 100
2486: PUSH
2487: LD_INT 60
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PPUSH
2498: LD_INT 1
2500: NEG
2501: PUSH
2502: LD_INT 4
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: LD_INT 0
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL 51936 0 5
2521: ADD
2522: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2523: LD_ADDR_EXP 35
2527: PUSH
2528: LD_INT 45
2530: PPUSH
2531: LD_STRING jeddah
2533: PPUSH
2534: LD_VAR 0 5
2538: PPUSH
2539: LD_INT 700
2541: PUSH
2542: LD_INT 300
2544: PUSH
2545: LD_INT 10
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PPUSH
2553: LD_INT 1
2555: NEG
2556: PUSH
2557: LD_INT 5
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 2
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL 51936 0 5
2576: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2577: LD_ADDR_EXP 36
2581: PUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_STRING riyadh
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 500
2595: PUSH
2596: LD_INT 60
2598: PUSH
2599: LD_INT 0
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL 51936 0 5
2629: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2630: LD_ADDR_EXP 38
2634: PUSH
2635: LD_INT 69
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: LD_VAR 0 5
2645: PPUSH
2646: LD_INT 500
2648: PUSH
2649: LD_INT 50
2651: PUSH
2652: LD_INT 0
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: PPUSH
2660: LD_INT 1
2662: NEG
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL 51936 0 5
2683: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2684: LD_ADDR_EXP 49
2688: PUSH
2689: LD_EXP 37
2693: PUSH
2694: LD_EXP 35
2698: PUSH
2699: LD_EXP 38
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 58
2736: PUSH
2737: EMPTY
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2876
// begin if GetBase ( i ) then
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 274
2762: IFFALSE 2766
// continue ;
2764: GO 2750
// d := GetDir ( i ) ;
2766: LD_ADDR_VAR 0 3
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL_OW 254
2780: ST_TO_ADDR
// if d < 3 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: LESS
2789: IFFALSE 2807
// d := d + 3 else
2791: LD_ADDR_VAR 0 3
2795: PUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 3
2803: PLUS
2804: ST_TO_ADDR
2805: GO 2821
// d := d - 3 ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 3
2819: MINUS
2820: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 8
2826: PPUSH
2827: LD_VAR 0 5
2831: PPUSH
2832: CALL_OW 380
// un := CreateHuman ;
2836: LD_ADDR_VAR 0 4
2840: PUSH
2841: CALL_OW 44
2845: ST_TO_ADDR
// SetDir ( un , d ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_VAR 0 3
2855: PPUSH
2856: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 52
// end ;
2874: GO 2750
2876: POP
2877: POP
// if Difficulty > 1 then
2878: LD_OWVAR 67
2882: PUSH
2883: LD_INT 1
2885: GREATER
2886: IFFALSE 3257
// begin ar_kamikadze := [ ] ;
2888: LD_ADDR_EXP 41
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2895: LD_INT 0
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: CALL_OW 380
// un := CreateHuman ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PPUSH
2928: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2932: LD_VAR 0 4
2936: PPUSH
2937: LD_INT 23
2939: PPUSH
2940: LD_INT 44
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 48
// ComCrawl ( un ) ;
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 137
// un := CreateHuman ;
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: CALL_OW 44
2968: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2981: LD_VAR 0 4
2985: PPUSH
2986: LD_INT 30
2988: PPUSH
2989: LD_INT 39
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 48
// ComCrawl ( un ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 17
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 380
// un := CreateHuman ;
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_INT 45
3052: PPUSH
3053: LD_INT 86
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// ComHold ( un ) ;
3063: LD_VAR 0 4
3067: PPUSH
3068: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3072: LD_ADDR_EXP 41
3076: PUSH
3077: LD_EXP 41
3081: PPUSH
3082: LD_EXP 41
3086: PUSH
3087: LD_INT 1
3089: PLUS
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
// un := CreateHuman ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: CALL_OW 44
3110: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3123: LD_VAR 0 4
3127: PPUSH
3128: LD_INT 60
3130: PPUSH
3131: LD_INT 85
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 48
// ComHold ( un ) ;
3141: LD_VAR 0 4
3145: PPUSH
3146: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3150: LD_ADDR_EXP 41
3154: PUSH
3155: LD_EXP 41
3159: PPUSH
3160: LD_EXP 41
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 4
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 222
3208: PPUSH
3209: LD_INT 166
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// ComHold ( un ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3228: LD_ADDR_EXP 41
3232: PUSH
3233: LD_EXP 41
3237: PPUSH
3238: LD_EXP 41
3242: PUSH
3243: LD_INT 1
3245: PLUS
3246: PPUSH
3247: LD_VAR 0 4
3251: PPUSH
3252: CALL_OW 1
3256: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3257: LD_ADDR_EXP 39
3261: PUSH
3262: EMPTY
3263: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 5
3274: PPUSH
3275: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING SecondCharsGal
3286: ST_TO_ADDR
// hc_face_number := 4 ;
3287: LD_ADDR_OWVAR 34
3291: PUSH
3292: LD_INT 4
3294: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3295: LD_ADDR_EXP 39
3299: PUSH
3300: LD_EXP 39
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 44
3312: PPUSH
3313: CALL_OW 1
3317: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3318: LD_INT 2
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3333: LD_ADDR_OWVAR 33
3337: PUSH
3338: LD_STRING SecondCharsGal
3340: ST_TO_ADDR
// hc_face_number := 15 ;
3341: LD_ADDR_OWVAR 34
3345: PUSH
3346: LD_INT 15
3348: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3349: LD_ADDR_EXP 39
3353: PUSH
3354: LD_EXP 39
3358: PPUSH
3359: LD_INT 2
3361: PPUSH
3362: CALL_OW 44
3366: PPUSH
3367: CALL_OW 1
3371: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3372: LD_INT 2
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_VAR 0 5
3382: PPUSH
3383: CALL_OW 380
// hc_gallery :=  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3395: LD_ADDR_EXP 39
3399: PUSH
3400: LD_EXP 39
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: CALL_OW 44
3412: PPUSH
3413: CALL_OW 1
3417: ST_TO_ADDR
// hc_sex := sex_male ;
3418: LD_ADDR_OWVAR 27
3422: PUSH
3423: LD_INT 1
3425: ST_TO_ADDR
// hc_class = 11 ;
3426: LD_ADDR_OWVAR 28
3430: PUSH
3431: LD_INT 11
3433: ST_TO_ADDR
// hc_gallery = sandar ;
3434: LD_ADDR_OWVAR 33
3438: PUSH
3439: LD_STRING sandar
3441: ST_TO_ADDR
// hc_face_number = 33 ;
3442: LD_ADDR_OWVAR 34
3446: PUSH
3447: LD_INT 33
3449: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3450: LD_ADDR_OWVAR 26
3454: PUSH
3455: LD_STRING Thabit Muhair Saliba
3457: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3458: LD_ADDR_OWVAR 31
3462: PUSH
3463: LD_INT 0
3465: PUSH
3466: LD_INT 0
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: ST_TO_ADDR
// Saliba = CreateHuman ;
3481: LD_ADDR_EXP 43
3485: PUSH
3486: CALL_OW 44
3490: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3491: LD_EXP 43
3495: PPUSH
3496: LD_INT 7
3498: PPUSH
3499: CALL_OW 52
// if gensher_active then
3503: LD_EXP 18
3507: IFFALSE 3534
// begin Gensher = NewCharacter ( Dietrich ) ;
3509: LD_ADDR_EXP 44
3513: PUSH
3514: LD_STRING Dietrich
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3522: LD_EXP 44
3526: PPUSH
3527: LD_INT 94
3529: PPUSH
3530: CALL_OW 52
// end ; InitHc ;
3534: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3538: LD_ADDR_EXP 40
3542: PUSH
3543: EMPTY
3544: ST_TO_ADDR
// for i = 1 to 4 do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 4
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3731
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3561: LD_INT 13
3563: PUSH
3564: LD_INT 14
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: PPUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 1
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 12
3603: ARRAY
3604: PPUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 27
3613: PUSH
3614: LD_INT 26
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: PPUSH
3634: LD_INT 60
3636: PPUSH
3637: LD_INT 100
3639: PPUSH
3640: CALL_OW 12
3644: PPUSH
3645: CALL 48507 0 5
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3659: LD_ADDR_EXP 40
3663: PUSH
3664: LD_EXP 40
3668: PPUSH
3669: LD_EXP 40
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: PPUSH
3678: LD_VAR 0 4
3682: PPUSH
3683: CALL_OW 1
3687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
3708: LD_VAR 0 4
3712: PPUSH
3713: LD_INT 124
3715: PPUSH
3716: LD_INT 141
3718: PPUSH
3719: LD_INT 6
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 50
// end ;
3729: GO 3558
3731: POP
3732: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3733: LD_ADDR_EXP 42
3737: PUSH
3738: EMPTY
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3994
// for i = 1 to 3 do
3782: LD_ADDR_VAR 0 2
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_INT 3
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3990
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3798: LD_INT 14
3800: PPUSH
3801: LD_INT 3
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ARRAY
3822: PPUSH
3823: LD_INT 1
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 25
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 26
3853: PUSH
3854: LD_INT 28
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: CALL_OW 12
3873: ARRAY
3874: PPUSH
3875: LD_INT 100
3877: PPUSH
3878: CALL 48507 0 5
// un := CreateVehicle ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: CALL_OW 45
3891: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3892: LD_ADDR_EXP 42
3896: PUSH
3897: LD_EXP 42
3901: PPUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_EXP 42
3911: PUSH
3912: LD_VAR 0 2
3916: ARRAY
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: CALL 49064 0 3
3935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 5
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_INT 20
3963: PUSH
3964: LD_INT 21
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: LD_VAR 0 2
3979: ARRAY
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ;
3988: GO 3795
3990: POP
3991: POP
3992: GO 3779
3994: POP
3995: POP
// InitHc ;
3996: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 10
4008: PPUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 0
4014: PPUSH
4015: CALL_OW 58
// end ;
4019: LD_VAR 0 1
4023: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4024: LD_EXP 41
4028: IFFALSE 4102
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin enable ;
4036: ENABLE
// for i in ar_kamikadze do
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_EXP 41
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4100
// if See ( 1 , i ) then
4050: LD_INT 1
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 292
4062: IFFALSE 4098
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 81
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PPUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 74
4093: PPUSH
4094: CALL_OW 115
4098: GO 4047
4100: POP
4101: POP
// end ;
4102: PPOPN 1
4104: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4105: LD_EXP 13
4109: IFFALSE 4426
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
4119: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4120: LD_INT 35
4122: PPUSH
4123: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4127: LD_INT 1
4129: PPUSH
4130: CALL 36883 0 1
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4120
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4140: LD_INT 1
4142: PPUSH
4143: LD_INT 14
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: LD_INT 32
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: PPUSH
4164: CALL 36426 0 2
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4175: LD_EXP 68
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 33
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 34
4196: PUSH
4197: LD_INT 32
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PPUSH
4208: CALL_OW 72
4212: IFFALSE 4168
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: LD_EXP 68
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: PPUSH
4228: LD_INT 33
4230: PUSH
4231: LD_INT 2
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 34
4240: PUSH
4241: LD_INT 32
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_INT 5
4268: PPUSH
4269: CALL_OW 469
4273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4274: LD_INT 35
4276: PPUSH
4277: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4281: LD_ADDR_VAR 0 4
4285: PUSH
4286: LD_INT 5
4288: PPUSH
4289: CALL_OW 469
4293: ST_TO_ADDR
// tmp := 100 ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 100
4301: ST_TO_ADDR
// if pos then
4302: LD_VAR 0 4
4306: IFFALSE 4346
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 20
4336: PPUSH
4337: CALL 49558 0 4
4341: PUSH
4342: LD_INT 4
4344: ARRAY
4345: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4346: LD_VAR 0 4
4350: PUSH
4351: LD_EXP 14
4355: NOT
4356: AND
4357: PUSH
4358: LD_VAR 0 3
4362: PUSH
4363: LD_INT 10
4365: LESS
4366: AND
4367: IFFALSE 4274
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4369: LD_VAR 0 2
4373: PPUSH
4374: LD_VAR 0 4
4378: PUSH
4379: LD_INT 1
4381: ARRAY
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 2
4390: ARRAY
4391: PPUSH
4392: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 198
4403: PPUSH
4404: LD_INT 113
4406: PPUSH
4407: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 124
4418: PPUSH
4419: LD_INT 7
4421: PPUSH
4422: CALL_OW 171
// end ;
4426: PPOPN 4
4428: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4429: LD_EXP 6
4433: IFFALSE 6978
4435: GO 4437
4437: DISABLE
4438: LD_INT 0
4440: PPUSH
4441: PPUSH
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4448: LD_ADDR_VAR 0 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: ST_TO_ADDR
// coords := [ ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4480: LD_ADDR_VAR 0 6
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 0
4490: PUSH
4491: LD_INT 0
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 14
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 28
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 25
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: LD_INT 28
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 14
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: LD_INT 29
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PPUSH
4608: CALL 36426 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
4612: LD_INT 21000
4614: PUSH
4615: LD_INT 19600
4617: PUSH
4618: LD_INT 18900
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PPUSH
4632: CALL_OW 67
// InitHc ;
4636: CALL_OW 19
// InitUc ;
4640: CALL_OW 18
// uc_side := 2 ;
4644: LD_ADDR_OWVAR 20
4648: PUSH
4649: LD_INT 2
4651: ST_TO_ADDR
// uc_nation := 2 ;
4652: LD_ADDR_OWVAR 21
4656: PUSH
4657: LD_INT 2
4659: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: EMPTY
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_EXP 68
4699: PUSH
4700: LD_INT 1
4702: ARRAY
4703: PUSH
4704: LD_INT 34
4706: PUSH
4707: LD_INT 32
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: DIFF
4719: PPUSH
4720: CALL_OW 1
4724: ST_TO_ADDR
// for i = 1 to Difficulty do
4725: LD_ADDR_VAR 0 1
4729: PUSH
4730: DOUBLE
4731: LD_INT 1
4733: DEC
4734: ST_TO_ADDR
4735: LD_OWVAR 67
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4863
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4743: LD_INT 13
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 5
4751: PPUSH
4752: LD_INT 29
4754: PPUSH
4755: LD_INT 100
4757: PPUSH
4758: CALL 48507 0 5
// un := CreateVehicle ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: CALL_OW 45
4771: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_VAR 0 3
4781: PPUSH
4782: LD_INT 1
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PUSH
4794: LD_INT 1
4796: PLUS
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_VAR 0 2
4806: PPUSH
4807: CALL 49064 0 3
4811: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 16
4831: PPUSH
4832: LD_INT 0
4834: PPUSH
4835: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 51
4846: PPUSH
4847: LD_INT 10
4849: PPUSH
4850: CALL_OW 111
// wait ( 0 0$2 ) ;
4854: LD_INT 70
4856: PPUSH
4857: CALL_OW 67
// end ;
4861: GO 4740
4863: POP
4864: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 51
4872: PUSH
4873: LD_INT 24
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 75
4882: PUSH
4883: LD_INT 90
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4894: LD_INT 1
4896: PPUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 5
4910: PPUSH
4911: LD_VAR 0 6
4915: PPUSH
4916: CALL 36720 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_INT 2
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_OWVAR 67
4948: ARRAY
4949: PUSH
4950: FOR_TO
4951: IFFALSE 5035
// begin PrepareHuman ( false , 17 , skill ) ;
4953: LD_INT 0
4955: PPUSH
4956: LD_INT 17
4958: PPUSH
4959: LD_VAR 0 4
4963: PPUSH
4964: CALL_OW 380
// un := CreateHuman ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_VAR 0 3
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 2
4998: ARRAY
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: CALL 49064 0 3
5017: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5018: LD_VAR 0 2
5022: PPUSH
5023: LD_INT 13
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4950
5035: POP
5036: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 2
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PUSH
5061: LD_OWVAR 67
5065: ARRAY
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5171
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5070: LD_INT 0
5072: PPUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 12
5093: ARRAY
5094: PPUSH
5095: LD_VAR 0 4
5099: PPUSH
5100: CALL_OW 380
// un := CreateHuman ;
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: CALL_OW 44
5113: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 49064 0 3
5153: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5154: LD_VAR 0 2
5158: PPUSH
5159: LD_INT 13
5161: PPUSH
5162: LD_INT 0
5164: PPUSH
5165: CALL_OW 49
// end ;
5169: GO 5067
5171: POP
5172: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_INT 67
5180: PUSH
5181: LD_INT 112
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 130
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5202: LD_INT 2
5204: PPUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 5
5218: PPUSH
5219: LD_VAR 0 6
5223: PPUSH
5224: CALL 36720 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 1
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_OWVAR 67
5256: ARRAY
5257: PUSH
5258: FOR_TO
5259: IFFALSE 5343
// begin PrepareHuman ( false , 17 , skill ) ;
5261: LD_INT 0
5263: PPUSH
5264: LD_INT 17
5266: PPUSH
5267: LD_VAR 0 4
5271: PPUSH
5272: CALL_OW 380
// un := CreateHuman ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: CALL_OW 44
5285: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_VAR 0 3
5295: PPUSH
5296: LD_INT 3
5298: PUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 3
5306: ARRAY
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: LD_VAR 0 2
5320: PPUSH
5321: CALL 49064 0 3
5325: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5326: LD_VAR 0 2
5330: PPUSH
5331: LD_INT 14
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// end ;
5341: GO 5258
5343: POP
5344: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 148
5352: PUSH
5353: LD_INT 158
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 148
5362: PUSH
5363: LD_INT 158
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5374: LD_INT 3
5376: PPUSH
5377: LD_VAR 0 3
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PPUSH
5391: LD_VAR 0 6
5395: PPUSH
5396: CALL 36720 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5639
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5433: LD_INT 14
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: LD_INT 1
5441: PUSH
5442: LD_INT 5
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: CALL_OW 12
5459: ARRAY
5460: PPUSH
5461: LD_INT 27
5463: PUSH
5464: LD_INT 26
5466: PUSH
5467: LD_INT 28
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 3
5480: PPUSH
5481: CALL_OW 12
5485: ARRAY
5486: PPUSH
5487: LD_INT 100
5489: PPUSH
5490: CALL 48507 0 5
// un := CreateVehicle ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: CALL_OW 45
5503: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_INT 4
5516: PUSH
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 4
5524: ARRAY
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: LD_VAR 0 2
5538: PPUSH
5539: CALL 49064 0 3
5543: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5544: LD_VAR 0 2
5548: PPUSH
5549: LD_INT 5
5551: PPUSH
5552: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5556: LD_VAR 0 2
5560: PPUSH
5561: LD_INT 15
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 49
// if GetControl ( un ) = control_manual then
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 263
5580: PUSH
5581: LD_INT 1
5583: EQUAL
5584: IFFALSE 5615
// begin PrepareHuman ( false , 3 , skill ) ;
5586: LD_INT 0
5588: PPUSH
5589: LD_INT 3
5591: PPUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5601: CALL_OW 44
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_INT 179
5622: PPUSH
5623: LD_INT 135
5625: PPUSH
5626: CALL_OW 111
// wait ( 0 0$2 ) ;
5630: LD_INT 70
5632: PPUSH
5633: CALL_OW 67
// end ;
5637: GO 5430
5639: POP
5640: POP
// vc_chassis := 15 ;
5641: LD_ADDR_OWVAR 37
5645: PUSH
5646: LD_INT 15
5648: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 4
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_INT 4
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: CALL_OW 45
5683: PPUSH
5684: CALL 49064 0 3
5688: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 4
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 3
5702: PUSH
5703: LD_INT 4
5705: ARRAY
5706: ARRAY
5707: PPUSH
5708: LD_INT 15
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5718: LD_INT 0
5720: PPUSH
5721: LD_INT 11
5723: PPUSH
5724: LD_VAR 0 4
5728: PPUSH
5729: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_VAR 0 3
5742: PPUSH
5743: LD_INT 4
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_INT 4
5753: ARRAY
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 44
5767: PPUSH
5768: CALL 49064 0 3
5772: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5773: LD_VAR 0 3
5777: PUSH
5778: LD_INT 4
5780: ARRAY
5781: PUSH
5782: LD_VAR 0 3
5786: PUSH
5787: LD_INT 4
5789: ARRAY
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 4
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 4
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: MINUS
5813: ARRAY
5814: PPUSH
5815: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5819: LD_ADDR_VAR 0 5
5823: PUSH
5824: LD_INT 148
5826: PUSH
5827: LD_INT 140
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5837: LD_INT 1
5839: PPUSH
5840: LD_VAR 0 3
5844: PUSH
5845: LD_INT 4
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 5
5853: PPUSH
5854: LD_VAR 0 6
5858: PPUSH
5859: CALL 36720 0 4
// if gensher_active then
5863: LD_EXP 18
5867: IFFALSE 6220
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5869: LD_EXP 44
5873: PPUSH
5874: LD_STRING D10-Diet-1
5876: PPUSH
5877: CALL_OW 94
// for i = 1 to 2 do
5881: LD_ADDR_VAR 0 1
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 2
5893: PUSH
5894: FOR_TO
5895: IFFALSE 6017
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5897: LD_INT 13
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: LD_INT 5
5905: PPUSH
5906: LD_INT 29
5908: PPUSH
5909: LD_INT 100
5911: PPUSH
5912: CALL 48507 0 5
// un := CreateVehicle ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: CALL_OW 45
5925: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 5
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: CALL 49064 0 3
5965: ST_TO_ADDR
// SetDir ( un , 0 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 23
5985: PPUSH
5986: LD_INT 0
5988: PPUSH
5989: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
5993: LD_VAR 0 2
5997: PPUSH
5998: LD_INT 85
6000: PPUSH
6001: LD_INT 152
6003: PPUSH
6004: CALL_OW 111
// wait ( 0 0$2 ) ;
6008: LD_INT 70
6010: PPUSH
6011: CALL_OW 67
// end ;
6015: GO 5894
6017: POP
6018: POP
// for i = 1 to 3 do
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_INT 3
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6174
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6035: LD_INT 14
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: LD_INT 5
6043: PPUSH
6044: LD_INT 27
6046: PUSH
6047: LD_INT 28
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 2
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 48507 0 5
// un := CreateVehicle ;
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 5
6095: PUSH
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 5
6103: ARRAY
6104: PUSH
6105: LD_INT 1
6107: PLUS
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL 49064 0 3
6122: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_INT 0
6130: PPUSH
6131: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 23
6142: PPUSH
6143: LD_INT 0
6145: PPUSH
6146: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: LD_INT 85
6157: PPUSH
6158: LD_INT 152
6160: PPUSH
6161: CALL_OW 111
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// end ;
6172: GO 6032
6174: POP
6175: POP
// coords := [ [ 97 , 143 ] ] ;
6176: LD_ADDR_VAR 0 5
6180: PUSH
6181: LD_INT 97
6183: PUSH
6184: LD_INT 143
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6194: LD_INT 1
6196: PPUSH
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 5
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 5
6210: PPUSH
6211: LD_VAR 0 6
6215: PPUSH
6216: CALL 36720 0 4
// end ; Wait ( 10 10$00 ) ;
6220: LD_INT 21000
6222: PPUSH
6223: CALL_OW 67
// tmp := [ ] ;
6227: LD_ADDR_VAR 0 3
6231: PUSH
6232: EMPTY
6233: ST_TO_ADDR
// w := 1 ;
6234: LD_ADDR_VAR 0 7
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// repeat tmp := [ ] ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: EMPTY
6248: ST_TO_ADDR
// if w mod 4 = 0 then
6249: LD_VAR 0 7
6253: PUSH
6254: LD_INT 4
6256: MOD
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: IFFALSE 6348
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6263: LD_ADDR_VAR 0 8
6267: PUSH
6268: LD_INT 11
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 11
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 24
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 11
6306: PUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 24
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 11
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: ST_TO_ADDR
6346: GO 6450
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6348: LD_ADDR_VAR 0 8
6352: PUSH
6353: LD_INT 14
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 28
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 14
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 14
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 28
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 14
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 29
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// if w mod 3 = 0 then
6450: LD_VAR 0 7
6454: PUSH
6455: LD_INT 3
6457: MOD
6458: PUSH
6459: LD_INT 0
6461: EQUAL
6462: IFFALSE 6538
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6464: LD_ADDR_VAR 0 8
6468: PUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: LD_INT 1
6476: PUSH
6477: LD_VAR 0 8
6481: PUSH
6482: LD_VAR 0 1
6486: ARRAY
6487: PUSH
6488: LD_INT 1
6490: PLUS
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: LD_INT 14
6498: PUSH
6499: LD_INT 1
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 25
6507: PUSH
6508: LD_INT 28
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 12
6525: ARRAY
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL 49064 0 3
6537: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6538: LD_INT 1
6540: PPUSH
6541: LD_VAR 0 8
6545: PPUSH
6546: CALL 36426 0 2
// if GetSide ( ar_dep_w ) = 2 then
6550: LD_INT 45
6552: PPUSH
6553: CALL_OW 255
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6646
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6563: LD_ADDR_VAR 0 8
6567: PUSH
6568: LD_INT 14
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 28
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 14
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 27
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 14
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 27
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6627: LD_INT 2
6629: PPUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL 36426 0 2
// wait ( 0 0$50 ) ;
6639: LD_INT 1750
6641: PPUSH
6642: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6653: LD_EXP 68
6657: PUSH
6658: LD_INT 1
6660: ARRAY
6661: PPUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: LD_INT 32
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 72
6683: PUSH
6684: LD_INT 4
6686: GREATEREQUAL
6687: IFFALSE 6646
// wait ( 0 0$10 ) ;
6689: LD_INT 350
6691: PPUSH
6692: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_EXP 68
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: LD_INT 3
6712: PUSH
6713: LD_INT 34
6715: PUSH
6716: LD_INT 32
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6732: LD_INT 100
6734: PPUSH
6735: CALL_OW 13
6739: PUSH
6740: LD_INT 50
6742: LESS
6743: IFFALSE 6776
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6745: LD_ADDR_VAR 0 5
6749: PUSH
6750: LD_INT 55
6752: PUSH
6753: LD_INT 7
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 75
6762: PUSH
6763: LD_INT 90
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 6805
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 128
6783: PUSH
6784: LD_INT 94
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 180
6793: PUSH
6794: LD_INT 135
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if w mod 4 = 0 then
6805: LD_VAR 0 7
6809: PUSH
6810: LD_INT 4
6812: MOD
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: IFFALSE 6848
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6819: LD_ADDR_VAR 0 5
6823: PUSH
6824: LD_INT 91
6826: PUSH
6827: LD_INT 58
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 117
6836: PUSH
6837: LD_INT 107
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6848: LD_INT 1
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: LD_VAR 0 5
6860: PPUSH
6861: LD_VAR 0 6
6865: PPUSH
6866: CALL 36720 0 4
// if mc_vehicles [ 2 ] then
6870: LD_EXP 68
6874: PUSH
6875: LD_INT 2
6877: ARRAY
6878: IFFALSE 6914
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_EXP 68
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_INT 73
6894: PUSH
6895: LD_INT 115
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PPUSH
6905: LD_VAR 0 6
6909: PPUSH
6910: CALL 36720 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
6914: LD_INT 19950
6916: PPUSH
6917: LD_INT 26250
6919: PPUSH
6920: CALL_OW 12
6924: PPUSH
6925: CALL_OW 67
// w := w + 1 ;
6929: LD_ADDR_VAR 0 7
6933: PUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_INT 1
6941: PLUS
6942: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
6943: LD_INT 94
6945: PPUSH
6946: CALL_OW 301
6950: PUSH
6951: LD_EXP 49
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PPUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 72
6974: NOT
6975: OR
6976: IFFALSE 6242
// end ;
6978: PPOPN 8
6980: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
6981: LD_INT 69
6983: IFFALSE 7358
6985: GO 6987
6987: DISABLE
6988: LD_INT 0
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
// begin enable ;
6994: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
6995: LD_INT 35
6997: PPUSH
6998: LD_INT 1190
7000: PPUSH
7001: CALL_OW 12
7005: PPUSH
7006: CALL_OW 67
// tmp := [ ] ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: EMPTY
7016: ST_TO_ADDR
// uc_side := 8 ;
7017: LD_ADDR_OWVAR 20
7021: PUSH
7022: LD_INT 8
7024: ST_TO_ADDR
// uc_nation := 2 ;
7025: LD_ADDR_OWVAR 21
7029: PUSH
7030: LD_INT 2
7032: ST_TO_ADDR
// InitHc ;
7033: CALL_OW 19
// for i = 1 to 3 do
7037: LD_ADDR_VAR 0 1
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_INT 3
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7178
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 12
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: LD_INT 27
7083: PUSH
7084: LD_INT 28
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 12
7101: ARRAY
7102: PPUSH
7103: LD_INT 100
7105: PPUSH
7106: CALL 48507 0 5
// un := CreateVehicle ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: CALL_OW 45
7119: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 15
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 2
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 1
7175: ST_TO_ADDR
// end ;
7176: GO 7050
7178: POP
7179: POP
// for i = 1 to 4 do
7180: LD_ADDR_VAR 0 1
7184: PUSH
7185: DOUBLE
7186: LD_INT 1
7188: DEC
7189: ST_TO_ADDR
7190: LD_INT 4
7192: PUSH
7193: FOR_TO
7194: IFFALSE 7273
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_INT 4
7204: PPUSH
7205: CALL_OW 12
7209: PPUSH
7210: LD_INT 6
7212: PPUSH
7213: CALL_OW 380
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_INT 15
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7242: LD_ADDR_VAR 0 2
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 1
7270: ST_TO_ADDR
// end ;
7271: GO 7193
7273: POP
7274: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_INT 210
7282: PPUSH
7283: LD_INT 177
7285: PPUSH
7286: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7290: LD_ADDR_VAR 0 4
7294: PUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 70
7312: ST_TO_ADDR
// if x then
7313: LD_VAR 0 4
7317: IFFALSE 7345
// for i in x do
7319: LD_ADDR_VAR 0 1
7323: PUSH
7324: LD_VAR 0 4
7328: PUSH
7329: FOR_IN
7330: IFFALSE 7343
// RemoveUnit ( i ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 64
7341: GO 7329
7343: POP
7344: POP
// wait ( 0 0$3 ) ;
7345: LD_INT 105
7347: PPUSH
7348: CALL_OW 67
// until tmp ;
7352: LD_VAR 0 2
7356: IFFALSE 7275
// end ; end_of_file
7358: PPOPN 4
7360: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// InGameOn ;
7369: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7373: LD_EXP 21
7377: PPUSH
7378: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7382: LD_ADDR_VAR 0 2
7386: PUSH
7387: LD_INT 22
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7416: LD_ADDR_VAR 0 4
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 1
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 34
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 69
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: ST_TO_ADDR
// for i = 1 to tmp do
7454: LD_ADDR_VAR 0 6
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_VAR 0 2
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7517
// begin if i = 5 then
7472: LD_VAR 0 6
7476: PUSH
7477: LD_INT 5
7479: EQUAL
7480: IFFALSE 7484
// break ;
7482: GO 7517
// sols := Replace ( sols , i , tmp [ i ] ) ;
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 5
7493: PPUSH
7494: LD_VAR 0 6
7498: PPUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_VAR 0 6
7508: ARRAY
7509: PPUSH
7510: CALL_OW 1
7514: ST_TO_ADDR
// end ;
7515: GO 7469
7517: POP
7518: POP
// tmp := ar_force_tmp ;
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_EXP 39
7528: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PPUSH
7538: LD_INT 108
7540: PPUSH
7541: LD_INT 139
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PPUSH
7578: LD_INT 114
7580: PPUSH
7581: LD_INT 132
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7591: LD_VAR 0 2
7595: PUSH
7596: LD_INT 3
7598: ARRAY
7599: PPUSH
7600: LD_INT 115
7602: PPUSH
7603: LD_INT 132
7605: PPUSH
7606: LD_INT 0
7608: PPUSH
7609: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7613: LD_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 3
7629: ARRAY
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7639: LD_VAR 0 4
7643: PPUSH
7644: LD_INT 83
7646: PPUSH
7647: LD_INT 123
7649: PPUSH
7650: CALL_OW 111
// Wait ( 0 0$01 ) ;
7654: LD_INT 35
7656: PPUSH
7657: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7661: LD_INT 90
7663: PPUSH
7664: LD_INT 144
7666: PPUSH
7667: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_INT 88
7678: PPUSH
7679: LD_INT 129
7681: PPUSH
7682: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7686: LD_ADDR_VAR 0 3
7690: PUSH
7691: LD_INT 92
7693: PUSH
7694: LD_INT 131
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 88
7703: PUSH
7704: LD_INT 127
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 91
7713: PUSH
7714: LD_INT 132
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 92
7723: PUSH
7724: LD_INT 134
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// for i = 1 to sols do
7737: LD_ADDR_VAR 0 6
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_VAR 0 5
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7826
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7755: LD_VAR 0 5
7759: PUSH
7760: LD_VAR 0 6
7764: ARRAY
7765: PPUSH
7766: LD_VAR 0 3
7770: PUSH
7771: LD_VAR 0 6
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 3
7785: PUSH
7786: LD_VAR 0 6
7790: ARRAY
7791: PUSH
7792: LD_INT 2
7794: ARRAY
7795: PPUSH
7796: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
7800: LD_VAR 0 5
7804: PUSH
7805: LD_VAR 0 6
7809: ARRAY
7810: PPUSH
7811: CALL_OW 197
// AddComHold ( sols ) ;
7815: LD_VAR 0 5
7819: PPUSH
7820: CALL_OW 200
// end ;
7824: GO 7752
7826: POP
7827: POP
// repeat wait ( 0 0$1 ) ;
7828: LD_INT 35
7830: PPUSH
7831: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
7835: LD_VAR 0 5
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: LD_INT 92
7846: PPUSH
7847: LD_INT 131
7849: PPUSH
7850: CALL_OW 297
7854: PUSH
7855: LD_INT 4
7857: LESS
7858: IFFALSE 7828
// CenterOnXY ( 96 , 139 ) ;
7860: LD_INT 96
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 84
// wait ( 0 0$3 ) ;
7870: LD_INT 105
7872: PPUSH
7873: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
7877: LD_INT 111
7879: PPUSH
7880: LD_INT 135
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 25
7888: NEG
7889: PPUSH
7890: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 2
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PPUSH
7912: CALL_OW 250
7916: PUSH
7917: LD_INT 3
7919: PLUS
7920: PPUSH
7921: LD_VAR 0 2
7925: PUSH
7926: LD_INT 1
7928: ARRAY
7929: PPUSH
7930: CALL_OW 251
7934: PPUSH
7935: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 3
7946: ARRAY
7947: PPUSH
7948: LD_INT 7
7950: PPUSH
7951: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
7955: LD_VAR 0 2
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PPUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PPUSH
7973: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
7977: LD_INT 35
7979: PPUSH
7980: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 2
8000: ARRAY
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 5
8009: LESS
8010: IFFALSE 7977
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8012: LD_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 2
8028: ARRAY
8029: PPUSH
8030: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: LD_STRING D1a-Merc1-1
8045: PPUSH
8046: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PPUSH
8059: LD_STRING D1a-FMerc2-1
8061: PPUSH
8062: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PPUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8088: LD_VAR 0 2
8092: PUSH
8093: LD_INT 1
8095: ARRAY
8096: PPUSH
8097: LD_INT 500
8099: PPUSH
8100: CALL_OW 234
// wait ( 0 0$2 ) ;
8104: LD_INT 70
8106: PPUSH
8107: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8111: LD_VAR 0 2
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_INT 2
8122: PPUSH
8123: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8127: LD_INT 10
8129: PPUSH
8130: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_STRING D1a-Merc1-2
8145: PPUSH
8146: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8150: LD_INT 7
8152: PPUSH
8153: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: ARRAY
8165: PPUSH
8166: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8170: LD_VAR 0 2
8174: PUSH
8175: LD_INT 2
8177: ARRAY
8178: PPUSH
8179: LD_INT 10
8181: PPUSH
8182: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_STRING D1a-FMerc2-2
8197: PPUSH
8198: CALL_OW 88
// wait ( 0 0$1 ) ;
8202: LD_INT 35
8204: PPUSH
8205: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8209: LD_INT 7
8211: PPUSH
8212: CALL_OW 85
// wait ( 0 0$2 ) ;
8216: LD_INT 70
8218: PPUSH
8219: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8223: LD_EXP 43
8227: PPUSH
8228: LD_STRING D1a-Saliba-1
8230: PPUSH
8231: CALL_OW 91
// KillUnit ( Saliba ) ;
8235: LD_EXP 43
8239: PPUSH
8240: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 3
8251: ARRAY
8252: PPUSH
8253: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8257: LD_EXP 21
8261: PPUSH
8262: CALL_OW 85
// wait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 67
// InGameOff ;
8273: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8277: LD_STRING M1
8279: PPUSH
8280: CALL_OW 337
// game_speed := 4 ;
8284: LD_ADDR_OWVAR 65
8288: PUSH
8289: LD_INT 4
8291: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8292: LD_INT 111
8294: PPUSH
8295: LD_INT 135
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: CALL_OW 331
// SaveForQuickRestart ;
8305: CALL_OW 22
// ar_run := true ;
8309: LD_ADDR_EXP 5
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8317: LD_INT 35
8319: PPUSH
8320: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8324: LD_INT 22
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 91
8336: PUSH
8337: LD_INT 7
8339: PUSH
8340: LD_INT 10
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 7
8359: PPUSH
8360: CALL_OW 256
8364: PUSH
8365: LD_INT 999
8367: LESS
8368: OR
8369: IFFALSE 8317
// if GetSide ( ar_dep_s ) = 2 then
8371: LD_INT 7
8373: PPUSH
8374: CALL_OW 255
8378: PUSH
8379: LD_INT 2
8381: EQUAL
8382: IFFALSE 8394
// SetSide ( ar_dep_s , 1 ) ;
8384: LD_INT 7
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 235
// end ;
8394: LD_VAR 0 1
8398: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8399: LD_EXP 5
8403: IFFALSE 8763
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_EXP 39
8422: PUSH
8423: LD_EXP 36
8427: PPUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ADD
8461: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_INT 5
8469: PPUSH
8470: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8474: LD_INT 5
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 343
// k := 1 ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// for i in tmp do
8492: LD_ADDR_VAR 0 1
8496: PUSH
8497: LD_VAR 0 2
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8588
// begin if IsInUnit ( i ) then
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 310
8514: IFFALSE 8525
// ComExitBuilding ( i ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 122
// if GetClass ( i ) = 3 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 257
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8574
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_EXP 40
8549: PUSH
8550: LD_VAR 0 3
8554: ARRAY
8555: PPUSH
8556: CALL_OW 180
// k := k + 1 ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 3
8569: PUSH
8570: LD_INT 1
8572: PLUS
8573: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8574: LD_VAR 0 1
8578: PPUSH
8579: LD_INT 10
8581: PPUSH
8582: CALL_OW 173
// end ;
8586: GO 8502
8588: POP
8589: POP
// ar_patrol := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8598: LD_INT 10
8600: PPUSH
8601: CALL_OW 67
// for i in tmp do
8605: LD_ADDR_VAR 0 1
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_IN
8616: IFFALSE 8644
// if not HasTask ( i ) then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 314
8627: NOT
8628: IFFALSE 8642
// ComMoveToArea ( i , escape_area ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 10
8637: PPUSH
8638: CALL_OW 113
8642: GO 8615
8644: POP
8645: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 95
8658: PUSH
8659: LD_INT 10
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// if k then
8671: LD_VAR 0 3
8675: IFFALSE 8744
// for i in k do
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8742
// begin if IsInUnit ( i ) then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 310
8699: IFFALSE 8715
// RemoveUnit ( IsInUnit ( i ) ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 310
8710: PPUSH
8711: CALL_OW 64
// RemoveUnit ( i ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 64
// tmp := tmp diff i ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 2
8733: PUSH
8734: LD_VAR 0 1
8738: DIFF
8739: ST_TO_ADDR
// end ;
8740: GO 8687
8742: POP
8743: POP
// until tmp = [ ] ;
8744: LD_VAR 0 2
8748: PUSH
8749: EMPTY
8750: EQUAL
8751: IFFALSE 8598
// ChangeSideFog ( 5 , 5 ) ;
8753: LD_INT 5
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 343
// end ;
8763: PPOPN 3
8765: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
8766: LD_EXP 7
8770: IFFALSE 9060
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// begin uc_side := 2 ;
8780: LD_ADDR_OWVAR 20
8784: PUSH
8785: LD_INT 2
8787: ST_TO_ADDR
// uc_nation := 2 ;
8788: LD_ADDR_OWVAR 21
8792: PUSH
8793: LD_INT 2
8795: ST_TO_ADDR
// InitHc ;
8796: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_INT 6
8808: PPUSH
8809: CALL_OW 380
// un := CreateHuman ;
8813: LD_ADDR_VAR 0 2
8817: PUSH
8818: CALL_OW 44
8822: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
8823: LD_INT 14
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_INT 27
8834: PPUSH
8835: LD_INT 98
8837: PPUSH
8838: CALL 48507 0 5
// veh := CreateVehicle ;
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: CALL_OW 45
8851: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 179
8871: PPUSH
8872: LD_INT 135
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 126
8903: PPUSH
8904: LD_INT 133
8906: PPUSH
8907: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
8911: LD_INT 10
8913: PPUSH
8914: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 3
8925: PPUSH
8926: CALL_OW 292
8930: PUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 9
8946: LESS
8947: OR
8948: IFFALSE 8911
// ComHold ( veh ) ;
8950: LD_VAR 0 3
8954: PPUSH
8955: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: LD_STRING D2aa-Ar1-1
8966: PPUSH
8967: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 177
8978: PPUSH
8979: LD_INT 96
8981: PPUSH
8982: CALL_OW 111
// AddComExitVehicle ( un ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8995: LD_INT 35
8997: PPUSH
8998: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 69
9009: PPUSH
9010: CALL_OW 296
9014: PUSH
9015: LD_INT 15
9017: LESS
9018: IFFALSE 8995
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9020: LD_ADDR_EXP 49
9024: PUSH
9025: LD_EXP 49
9029: PPUSH
9030: LD_INT 3
9032: PUSH
9033: LD_EXP 49
9037: PUSH
9038: LD_INT 3
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: PLUS
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL 49064 0 3
9059: ST_TO_ADDR
// end ;
9060: PPOPN 3
9062: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9063: LD_INT 7
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_INT 7
9077: PPUSH
9078: CALL_OW 301
9082: OR
9083: IFFALSE 11507
9085: GO 9087
9087: DISABLE
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_EXP 36
9101: PPUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 3
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: PUSH
9117: FOR_IN
9118: IFFALSE 9134
// SetSide ( i , 1 ) ;
9120: LD_VAR 0 1
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 235
9132: GO 9117
9134: POP
9135: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 46
9143: PUSH
9144: LD_INT 41
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 50
9153: PUSH
9154: LD_INT 25
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 57
9163: PUSH
9164: LD_INT 75
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 75
9173: PUSH
9174: LD_INT 89
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 51
9183: PUSH
9184: LD_INT 45
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 95
9193: PUSH
9194: LD_INT 95
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 77
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 101
9213: PUSH
9214: LD_INT 76
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 118
9223: PUSH
9224: LD_INT 81
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 139
9233: PUSH
9234: LD_INT 97
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 129
9243: PUSH
9244: LD_INT 114
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 154
9253: PUSH
9254: LD_INT 111
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// base_captured := true ;
9275: LD_ADDR_EXP 6
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// DialogueOn ;
9283: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9287: LD_EXP 21
9291: PPUSH
9292: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9296: LD_EXP 21
9300: PPUSH
9301: LD_STRING D2-JMM-1
9303: PPUSH
9304: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9308: LD_EXP 30
9312: PPUSH
9313: LD_STRING D2-Pow-1
9315: PPUSH
9316: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9320: LD_EXP 21
9324: PPUSH
9325: LD_STRING D2-JMM-2
9327: PPUSH
9328: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9332: LD_EXP 30
9336: PPUSH
9337: LD_STRING D2-Pow-2
9339: PPUSH
9340: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9344: LD_EXP 21
9348: PPUSH
9349: LD_STRING D2-JMM-3
9351: PPUSH
9352: CALL_OW 88
// DialogueOff ;
9356: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9360: LD_STRING M2
9362: PPUSH
9363: CALL_OW 337
// Wait ( 0 0$2 ) ;
9367: LD_INT 70
9369: PPUSH
9370: CALL_OW 67
// if IsOk ( Gary ) then
9374: LD_EXP 32
9378: PPUSH
9379: CALL_OW 302
9383: IFFALSE 9397
// Say ( Gary , D2a-Gary-1 ) ;
9385: LD_EXP 32
9389: PPUSH
9390: LD_STRING D2a-Gary-1
9392: PPUSH
9393: CALL_OW 88
// if IsOk ( Bobby ) then
9397: LD_EXP 24
9401: PPUSH
9402: CALL_OW 302
9406: IFFALSE 9420
// Say ( Bobby , D2a-Bobby-1 ) ;
9408: LD_EXP 24
9412: PPUSH
9413: LD_STRING D2a-Bobby-1
9415: PPUSH
9416: CALL_OW 88
// if IsOk ( Cyrus ) then
9420: LD_EXP 25
9424: PPUSH
9425: CALL_OW 302
9429: IFFALSE 9443
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING D2a-Cyrus-1
9438: PPUSH
9439: CALL_OW 88
// if IsOk ( Lisa ) then
9443: LD_EXP 22
9447: PPUSH
9448: CALL_OW 302
9452: IFFALSE 9466
// Say ( Lisa , D2a-Lisa-1 ) ;
9454: LD_EXP 22
9458: PPUSH
9459: LD_STRING D2a-Lisa-1
9461: PPUSH
9462: CALL_OW 88
// if IsOk ( Frank ) then
9466: LD_EXP 33
9470: PPUSH
9471: CALL_OW 302
9475: IFFALSE 9489
// Say ( Frank , D2a-Frank-1 ) ;
9477: LD_EXP 33
9481: PPUSH
9482: LD_STRING D2a-Frank-1
9484: PPUSH
9485: CALL_OW 88
// if IsOk ( Cornel ) then
9489: LD_EXP 31
9493: PPUSH
9494: CALL_OW 302
9498: IFFALSE 9512
// Say ( Cornel , D2a-Corn-1 ) ;
9500: LD_EXP 31
9504: PPUSH
9505: LD_STRING D2a-Corn-1
9507: PPUSH
9508: CALL_OW 88
// if IsOk ( Donaldson ) then
9512: LD_EXP 23
9516: PPUSH
9517: CALL_OW 302
9521: IFFALSE 9535
// Say ( Donaldson , D2a-Don-1 ) ;
9523: LD_EXP 23
9527: PPUSH
9528: LD_STRING D2a-Don-1
9530: PPUSH
9531: CALL_OW 88
// if IsOk ( Brown ) then
9535: LD_EXP 27
9539: PPUSH
9540: CALL_OW 302
9544: IFFALSE 9558
// Say ( Brown , D2a-Brown-1 ) ;
9546: LD_EXP 27
9550: PPUSH
9551: LD_STRING D2a-Brown-1
9553: PPUSH
9554: CALL_OW 88
// Wait ( 0 0$30 ) ;
9558: LD_INT 1050
9560: PPUSH
9561: CALL_OW 67
// if IsOk ( Frank ) then
9565: LD_EXP 33
9569: PPUSH
9570: CALL_OW 302
9574: IFFALSE 9840
// begin DialogueOn ;
9576: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9580: LD_EXP 21
9584: PUSH
9585: LD_EXP 33
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9598: LD_EXP 33
9602: PPUSH
9603: LD_STRING D3F-Frank-1
9605: PPUSH
9606: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9610: LD_EXP 21
9614: PPUSH
9615: LD_STRING D3F-JMM-1
9617: PPUSH
9618: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9622: LD_EXP 33
9626: PPUSH
9627: LD_STRING D3F-Frank-2
9629: PPUSH
9630: CALL_OW 88
// case Query ( QFrank ) of 1 :
9634: LD_STRING QFrank
9636: PPUSH
9637: CALL_OW 97
9641: PUSH
9642: LD_INT 1
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9673
9650: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9651: LD_EXP 21
9655: PPUSH
9656: LD_STRING D3Fa-JMM-1
9658: PPUSH
9659: CALL_OW 88
// us_scout := 1 ;
9663: LD_ADDR_EXP 8
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// end ; 2 :
9671: GO 9836
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9803
9681: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING D3Fb-JMM-1
9689: PPUSH
9690: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9694: LD_EXP 33
9698: PPUSH
9699: LD_STRING D3Fb-Frank-1
9701: PPUSH
9702: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
9706: LD_STRING QFrank2
9708: PPUSH
9709: CALL_OW 97
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9769
9722: POP
// begin us_scout := 2 ;
9723: LD_ADDR_EXP 8
9727: PUSH
9728: LD_INT 2
9730: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
9731: LD_EXP 21
9735: PPUSH
9736: LD_STRING D3Fba-JMM-1
9738: PPUSH
9739: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
9743: LD_EXP 33
9747: PPUSH
9748: LD_STRING D3Fba-Frank-1
9750: PPUSH
9751: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
9755: LD_EXP 21
9759: PPUSH
9760: LD_STRING D3Fba-JMM-2
9762: PPUSH
9763: CALL_OW 88
// end ; 2 :
9767: GO 9801
9769: LD_INT 2
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9800
9777: POP
// begin us_scout := 0 ;
9778: LD_ADDR_EXP 8
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
9786: LD_EXP 21
9790: PPUSH
9791: LD_STRING D3Fbb-JMM-1
9793: PPUSH
9794: CALL_OW 88
// end ; end ;
9798: GO 9801
9800: POP
// end ; 3 :
9801: GO 9836
9803: LD_INT 3
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9835
9811: POP
// begin us_scout := - 1 ;
9812: LD_ADDR_EXP 8
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
9821: LD_EXP 21
9825: PPUSH
9826: LD_STRING D3Fc-JMM-1
9828: PPUSH
9829: CALL_OW 88
// end ; end ;
9833: GO 9836
9835: POP
// DialogueOff ;
9836: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
9840: LD_EXP 8
9844: PUSH
9845: LD_INT 1
9847: NEG
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: IN
9856: IFFALSE 9860
// exit ;
9858: GO 11507
// if us_scout in [ 1 , 2 ] then
9860: LD_EXP 8
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: IN
9875: IFFALSE 10574
// begin if IsInUnit ( Frank ) then
9877: LD_EXP 33
9881: PPUSH
9882: CALL_OW 310
9886: IFFALSE 9897
// ComExitBuilding ( Frank ) ;
9888: LD_EXP 33
9892: PPUSH
9893: CALL_OW 122
// if IsDrivenBy ( Frank ) then
9897: LD_EXP 33
9901: PPUSH
9902: CALL_OW 311
9906: IFFALSE 9917
// ComExitVehicle ( Frank ) ;
9908: LD_EXP 33
9912: PPUSH
9913: CALL_OW 121
// SetSide ( Frank , 4 ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_INT 4
9924: PPUSH
9925: CALL_OW 235
// wait ( 0 0$1 ) ;
9929: LD_INT 35
9931: PPUSH
9932: CALL_OW 67
// if us_scout = 2 then
9936: LD_EXP 8
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: IFFALSE 10312
// begin ComMoveXY ( Frank , 75 , 63 ) ;
9946: LD_EXP 33
9950: PPUSH
9951: LD_INT 75
9953: PPUSH
9954: LD_INT 63
9956: PPUSH
9957: CALL_OW 111
// AddComHold ( Frank ) ;
9961: LD_EXP 33
9965: PPUSH
9966: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
9970: LD_EXP 33
9974: PPUSH
9975: LD_INT 770
9977: PPUSH
9978: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
9982: LD_EXP 33
9986: PPUSH
9987: LD_INT 100
9989: PPUSH
9990: LD_INT 75
9992: PPUSH
9993: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
9997: LD_EXP 33
10001: PPUSH
10002: LD_INT 123
10004: PPUSH
10005: LD_INT 103
10007: PPUSH
10008: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10012: LD_EXP 33
10016: PPUSH
10017: LD_INT 138
10019: PPUSH
10020: LD_INT 108
10022: PPUSH
10023: CALL_OW 171
// AddComHold ( Frank ) ;
10027: LD_EXP 33
10031: PPUSH
10032: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10036: LD_INT 35
10038: PPUSH
10039: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10043: LD_EXP 33
10047: PPUSH
10048: LD_INT 138
10050: PPUSH
10051: LD_INT 108
10053: PPUSH
10054: CALL_OW 307
10058: IFFALSE 10036
// AddComMoveXY ( Frank , 125 , 132 ) ;
10060: LD_EXP 33
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 132
10070: PPUSH
10071: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10075: LD_INT 35
10077: PPUSH
10078: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10082: LD_INT 1
10084: PPUSH
10085: LD_EXP 33
10089: PPUSH
10090: CALL_OW 292
10094: PUSH
10095: LD_EXP 33
10099: PPUSH
10100: LD_INT 7
10102: PPUSH
10103: CALL_OW 296
10107: PUSH
10108: LD_INT 7
10110: LESS
10111: OR
10112: IFFALSE 10075
// DialogueOn ;
10114: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10118: LD_EXP 33
10122: PPUSH
10123: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10127: LD_INT 10
10129: PPUSH
10130: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10134: LD_EXP 21
10138: PPUSH
10139: LD_STRING D4Fa-JMM-1
10141: PPUSH
10142: CALL_OW 88
// for i in points do
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_VAR 0 2
10155: PUSH
10156: FOR_IN
10157: IFFALSE 10215
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10159: LD_VAR 0 1
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_VAR 0 1
10172: PUSH
10173: LD_INT 2
10175: ARRAY
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: LD_INT 20
10182: NEG
10183: PPUSH
10184: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10188: LD_VAR 0 1
10192: PUSH
10193: LD_INT 1
10195: ARRAY
10196: PPUSH
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 2
10204: ARRAY
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 331
// end ;
10213: GO 10156
10215: POP
10216: POP
// dwait ( 0 0$0.5 ) ;
10217: LD_INT 18
10219: PPUSH
10220: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10224: LD_INT 42
10226: PPUSH
10227: LD_INT 27
10229: PPUSH
10230: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10234: LD_EXP 33
10238: PPUSH
10239: LD_STRING D4Fa-Frank-1
10241: PPUSH
10242: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10246: LD_INT 18
10248: PPUSH
10249: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10253: LD_EXP 21
10257: PPUSH
10258: LD_STRING D4Fa-JMM-2
10260: PPUSH
10261: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10265: LD_INT 118
10267: PPUSH
10268: LD_INT 80
10270: PPUSH
10271: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10275: LD_EXP 33
10279: PPUSH
10280: LD_STRING D4Fa-Frank-2
10282: PPUSH
10283: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10287: LD_INT 10
10289: PPUSH
10290: CALL_OW 68
// DialogueOff ;
10294: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10298: LD_EXP 33
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 235
// end else
10310: GO 10574
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 4
10317: PPUSH
10318: LD_INT 2
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10328: LD_EXP 33
10332: PPUSH
10333: LD_INT 75
10335: PPUSH
10336: LD_INT 63
10338: PPUSH
10339: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10343: LD_EXP 33
10347: PPUSH
10348: LD_INT 175
10350: PPUSH
10351: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10355: LD_EXP 33
10359: PPUSH
10360: LD_INT 102
10362: PPUSH
10363: LD_INT 76
10365: PPUSH
10366: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10370: LD_EXP 33
10374: PPUSH
10375: LD_INT 108
10377: PPUSH
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10385: LD_INT 35
10387: PPUSH
10388: CALL_OW 67
// until See ( 2 , Frank ) ;
10392: LD_INT 2
10394: PPUSH
10395: LD_EXP 33
10399: PPUSH
10400: CALL_OW 292
10404: IFFALSE 10385
// ComMoveXY ( Frank , 112 , 118 ) ;
10406: LD_EXP 33
10410: PPUSH
10411: LD_INT 112
10413: PPUSH
10414: LD_INT 118
10416: PPUSH
10417: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10421: LD_EXP 33
10425: PPUSH
10426: CALL_OW 256
10430: PUSH
10431: LD_INT 750
10433: GREATEREQUAL
10434: IFFALSE 10448
// SetLives ( Frank , 700 ) ;
10436: LD_EXP 33
10440: PPUSH
10441: LD_INT 700
10443: PPUSH
10444: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 33
10462: PPUSH
10463: CALL_OW 292
10467: PUSH
10468: LD_EXP 33
10472: PPUSH
10473: LD_INT 7
10475: PPUSH
10476: CALL_OW 296
10480: PUSH
10481: LD_INT 17
10483: LESS
10484: OR
10485: IFFALSE 10448
// DialogueOn ;
10487: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10491: LD_EXP 33
10495: PPUSH
10496: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10500: LD_EXP 33
10504: PPUSH
10505: LD_STRING D4Fb-Frank-1
10507: PPUSH
10508: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10512: LD_EXP 21
10516: PPUSH
10517: LD_STRING D4Fb-JMM-1
10519: PPUSH
10520: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10524: LD_INT 2
10526: PPUSH
10527: LD_STRING D4Fb-FSci1-1
10529: PPUSH
10530: CALL 15155 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10534: LD_EXP 33
10538: PPUSH
10539: LD_STRING D4Fb-Frank-2
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_STRING D4Fb-JMM-2
10553: PPUSH
10554: CALL_OW 88
// DialogueOff ;
10558: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10562: LD_EXP 33
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10574: LD_EXP 34
10578: PPUSH
10579: CALL_OW 302
10583: PUSH
10584: LD_EXP 33
10588: NOT
10589: AND
10590: IFFALSE 10738
// begin DialogueOn ;
10592: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10596: LD_EXP 21
10600: PUSH
10601: LD_EXP 34
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10614: LD_EXP 34
10618: PPUSH
10619: LD_STRING D3Y-Yam-1
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10626: LD_EXP 21
10630: PPUSH
10631: LD_STRING D3Y-JMM-1
10633: PPUSH
10634: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10638: LD_EXP 34
10642: PPUSH
10643: LD_STRING D3Y-Yam-2
10645: PPUSH
10646: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10650: LD_STRING QYamoko
10652: PPUSH
10653: CALL_OW 97
10657: PUSH
10658: LD_INT 1
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10701
10666: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10667: LD_EXP 21
10671: PPUSH
10672: LD_STRING D3Ya-JMM-1
10674: PPUSH
10675: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10679: LD_EXP 34
10683: PPUSH
10684: LD_STRING D3Ya-Yam-1
10686: PPUSH
10687: CALL_OW 88
// us_scout := 1 ;
10691: LD_ADDR_EXP 8
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// end ; 2 :
10699: GO 10734
10701: LD_INT 2
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10733
10709: POP
// begin us_scout := - 1 ;
10710: LD_ADDR_EXP 8
10714: PUSH
10715: LD_INT 1
10717: NEG
10718: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
10719: LD_EXP 21
10723: PPUSH
10724: LD_STRING D3Yb-JMM-1
10726: PPUSH
10727: CALL_OW 88
// end ; end ;
10731: GO 10734
10733: POP
// DialogueOff ;
10734: CALL_OW 7
// end ; if Frank then
10738: LD_EXP 33
10742: IFFALSE 10746
// exit ;
10744: GO 11507
// if us_scout in [ - 1 , 0 ] then
10746: LD_EXP 8
10750: PUSH
10751: LD_INT 1
10753: NEG
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: IN
10762: IFFALSE 10766
// exit ;
10764: GO 11507
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
10766: LD_ADDR_EXP 8
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_OWVAR 67
10789: ARRAY
10790: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
10791: LD_EXP 8
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: IN
10806: IFFALSE 11507
// begin if IsInUnit ( Kikuchi ) then
10808: LD_EXP 34
10812: PPUSH
10813: CALL_OW 310
10817: IFFALSE 10828
// ComExitBuilding ( Kikuchi ) ;
10819: LD_EXP 34
10823: PPUSH
10824: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
10828: LD_EXP 34
10832: PPUSH
10833: CALL_OW 311
10837: IFFALSE 10848
// ComExitVehicle ( Kikuchi ) ;
10839: LD_EXP 34
10843: PPUSH
10844: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
10848: LD_EXP 34
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 235
// wait ( 0 0$1 ) ;
10860: LD_INT 35
10862: PPUSH
10863: CALL_OW 67
// if us_scout = 2 then
10867: LD_EXP 8
10871: PUSH
10872: LD_INT 2
10874: EQUAL
10875: IFFALSE 11255
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
10877: LD_EXP 34
10881: PPUSH
10882: LD_INT 75
10884: PPUSH
10885: LD_INT 63
10887: PPUSH
10888: CALL_OW 111
// AddComHold ( Kikuchi ) ;
10892: LD_EXP 34
10896: PPUSH
10897: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
10901: LD_EXP 34
10905: PPUSH
10906: LD_INT 770
10908: PPUSH
10909: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
10913: LD_EXP 34
10917: PPUSH
10918: LD_INT 100
10920: PPUSH
10921: LD_INT 75
10923: PPUSH
10924: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
10928: LD_EXP 34
10932: PPUSH
10933: LD_INT 123
10935: PPUSH
10936: LD_INT 103
10938: PPUSH
10939: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
10943: LD_EXP 34
10947: PPUSH
10948: LD_INT 138
10950: PPUSH
10951: LD_INT 108
10953: PPUSH
10954: CALL_OW 171
// AddComHold ( Kikuchi ) ;
10958: LD_EXP 34
10962: PPUSH
10963: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10967: LD_INT 35
10969: PPUSH
10970: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
10974: LD_EXP 34
10978: PPUSH
10979: LD_INT 138
10981: PPUSH
10982: LD_INT 108
10984: PPUSH
10985: CALL_OW 307
10989: IFFALSE 10967
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
10991: LD_EXP 34
10995: PPUSH
10996: LD_INT 125
10998: PPUSH
10999: LD_INT 132
11001: PPUSH
11002: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11006: LD_INT 35
11008: PPUSH
11009: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11013: LD_INT 1
11015: PPUSH
11016: LD_EXP 34
11020: PPUSH
11021: CALL_OW 292
11025: PUSH
11026: LD_EXP 34
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: CALL_OW 296
11038: PUSH
11039: LD_INT 7
11041: LESS
11042: OR
11043: IFFALSE 11006
// DialogueOn ;
11045: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11049: LD_EXP 34
11053: PPUSH
11054: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11058: LD_INT 10
11060: PPUSH
11061: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11065: LD_EXP 34
11069: PPUSH
11070: LD_STRING D4Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11077: LD_EXP 21
11081: PPUSH
11082: LD_STRING D4Ya-JMM-1
11084: PPUSH
11085: CALL_OW 88
// for i in points do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11158
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 1
11109: ARRAY
11110: PPUSH
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 2
11118: ARRAY
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 331
// end ;
11156: GO 11099
11158: POP
11159: POP
// dwait ( 0 0$0.5 ) ;
11160: LD_INT 18
11162: PPUSH
11163: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11167: LD_INT 42
11169: PPUSH
11170: LD_INT 27
11172: PPUSH
11173: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11177: LD_EXP 34
11181: PPUSH
11182: LD_STRING D4Ya-Yam-2
11184: PPUSH
11185: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11189: LD_INT 18
11191: PPUSH
11192: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11196: LD_INT 118
11198: PPUSH
11199: LD_INT 80
11201: PPUSH
11202: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11206: LD_EXP 21
11210: PPUSH
11211: LD_STRING D4Ya-JMM-2
11213: PPUSH
11214: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11218: LD_EXP 34
11222: PPUSH
11223: LD_STRING D4Ya-Yam-3
11225: PPUSH
11226: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 68
// DialogueOff ;
11237: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11241: LD_EXP 34
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 235
// end else
11253: GO 11507
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11255: LD_INT 2
11257: PPUSH
11258: LD_INT 4
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11271: LD_EXP 34
11275: PPUSH
11276: LD_INT 75
11278: PPUSH
11279: LD_INT 63
11281: PPUSH
11282: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11286: LD_EXP 34
11290: PPUSH
11291: LD_INT 175
11293: PPUSH
11294: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11298: LD_EXP 34
11302: PPUSH
11303: LD_INT 102
11305: PPUSH
11306: LD_INT 76
11308: PPUSH
11309: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11313: LD_EXP 34
11317: PPUSH
11318: LD_INT 108
11320: PPUSH
11321: LD_INT 70
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11335: LD_INT 2
11337: PPUSH
11338: LD_EXP 34
11342: PPUSH
11343: CALL_OW 292
11347: IFFALSE 11328
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11349: LD_EXP 34
11353: PPUSH
11354: LD_INT 112
11356: PPUSH
11357: LD_INT 118
11359: PPUSH
11360: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11364: LD_EXP 34
11368: PPUSH
11369: CALL_OW 256
11373: PUSH
11374: LD_INT 750
11376: GREATEREQUAL
11377: IFFALSE 11391
// SetLives ( Kikuchi , 700 ) ;
11379: LD_EXP 34
11383: PPUSH
11384: LD_INT 700
11386: PPUSH
11387: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11398: LD_INT 1
11400: PPUSH
11401: LD_EXP 34
11405: PPUSH
11406: CALL_OW 292
11410: PUSH
11411: LD_EXP 34
11415: PPUSH
11416: LD_INT 7
11418: PPUSH
11419: CALL_OW 296
11423: PUSH
11424: LD_INT 17
11426: LESS
11427: OR
11428: IFFALSE 11391
// DialogueOn ;
11430: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11434: LD_EXP 34
11438: PPUSH
11439: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11443: LD_EXP 34
11447: PPUSH
11448: LD_STRING D4Yb-Yam-1
11450: PPUSH
11451: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING D4Yb-JMM-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_STRING D4Yb-Yam-2
11474: PPUSH
11475: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11479: LD_EXP 21
11483: PPUSH
11484: LD_STRING D4Yb-JMM-2
11486: PPUSH
11487: CALL_OW 88
// DialogueOff ;
11491: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11495: LD_EXP 34
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 235
// end ; end ; end ;
11507: PPOPN 2
11509: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11510: LD_EXP 6
11514: IFFALSE 12547
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// if not seen [ 1 ] then
11526: LD_EXP 9
11530: PUSH
11531: LD_INT 1
11533: ARRAY
11534: NOT
11535: IFFALSE 11715
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 11
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: ST_TO_ADDR
// if tmp then
11589: LD_VAR 0 2
11593: IFFALSE 11715
// for i in tmp do
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11713
// if See ( 1 , i ) then
11608: LD_INT 1
11610: PPUSH
11611: LD_VAR 0 1
11615: PPUSH
11616: CALL_OW 292
11620: IFFALSE 11711
// begin seen := Replace ( seen , 1 , true ) ;
11622: LD_ADDR_EXP 9
11626: PUSH
11627: LD_EXP 9
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 1
11642: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11643: LD_INT 1
11645: PPUSH
11646: CALL 14977 0 1
11650: IFFALSE 11711
// begin DialogueOn ;
11652: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11665: LD_INT 10
11667: PPUSH
11668: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_STRING D5a-Sol2-1
11682: PPUSH
11683: CALL 15155 0 2
11687: ST_TO_ADDR
// if not un then
11688: LD_VAR 0 3
11692: NOT
11693: IFFALSE 11705
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_STRING D5a-FSol2-1
11700: PPUSH
11701: CALL 15155 0 2
// DialogueOff ;
11705: CALL_OW 7
// break ;
11709: GO 11713
// end ; end ;
11711: GO 11605
11713: POP
11714: POP
// end ; if not seen [ 2 ] then
11715: LD_EXP 9
11719: PUSH
11720: LD_INT 2
11722: ARRAY
11723: NOT
11724: IFFALSE 11949
// begin can_kamikazed := true ;
11726: LD_ADDR_EXP 10
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 17
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: ST_TO_ADDR
// if tmp then
11768: LD_VAR 0 2
11772: IFFALSE 11949
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11947
// if See ( 1 , i ) then
11787: LD_INT 1
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 292
11799: IFFALSE 11945
// begin seen := Replace ( seen , 2 , true ) ;
11801: LD_ADDR_EXP 9
11805: PUSH
11806: LD_EXP 9
11810: PPUSH
11811: LD_INT 2
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11822: LD_INT 1
11824: PPUSH
11825: CALL 14977 0 1
11829: IFFALSE 11945
// begin DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_STRING D5b-Sol1-1
11861: PPUSH
11862: CALL 15155 0 2
11866: ST_TO_ADDR
// if not un then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11890
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 2
11881: PPUSH
11882: LD_STRING D5b-FSol1-1
11884: PPUSH
11885: CALL 15155 0 2
11889: ST_TO_ADDR
// if un then
11890: LD_VAR 0 3
11894: IFFALSE 11939
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
11896: LD_ADDR_VAR 0 4
11900: PUSH
11901: LD_INT 1
11903: PPUSH
11904: LD_STRING D5b-Sol2-1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL 15381 0 3
11916: ST_TO_ADDR
// if not un2 then
11917: LD_VAR 0 4
11921: NOT
11922: IFFALSE 11939
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
11924: LD_INT 2
11926: PPUSH
11927: LD_STRING D5b-FSol2-1
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: CALL 15381 0 3
// end ; DialogueOff ;
11939: CALL_OW 7
// break ;
11943: GO 11947
// end ; end ;
11945: GO 11784
11947: POP
11948: POP
// end ; if not seen [ 3 ] then
11949: LD_EXP 9
11953: PUSH
11954: LD_INT 3
11956: ARRAY
11957: NOT
11958: IFFALSE 12132
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// if tmp then
11994: LD_VAR 0 2
11998: IFFALSE 12132
// for i in tmp do
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_VAR 0 2
12009: PUSH
12010: FOR_IN
12011: IFFALSE 12130
// if See ( 1 , i ) then
12013: LD_INT 1
12015: PPUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 292
12025: IFFALSE 12128
// begin seen := Replace ( seen , 3 , true ) ;
12027: LD_ADDR_EXP 9
12031: PUSH
12032: LD_EXP 9
12036: PPUSH
12037: LD_INT 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12048: LD_INT 1
12050: PPUSH
12051: CALL 14977 0 1
12055: IFFALSE 12128
// begin DialogueOn ;
12057: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_STRING D8-Sol1-1
12087: PPUSH
12088: CALL 15155 0 2
12092: ST_TO_ADDR
// if not un then
12093: LD_VAR 0 3
12097: NOT
12098: IFFALSE 12110
// SayRand ( sex_female , D8-FSol1-1 ) ;
12100: LD_INT 2
12102: PPUSH
12103: LD_STRING D8-FSol1-1
12105: PPUSH
12106: CALL 15155 0 2
// Say ( JMM , D8-JMM-1 ) ;
12110: LD_EXP 21
12114: PPUSH
12115: LD_STRING D8-JMM-1
12117: PPUSH
12118: CALL_OW 88
// DialogueOff ;
12122: CALL_OW 7
// break ;
12126: GO 12130
// end ; end ;
12128: GO 12010
12130: POP
12131: POP
// end ; if not seen [ 4 ] then
12132: LD_EXP 9
12136: PUSH
12137: LD_INT 4
12139: ARRAY
12140: NOT
12141: IFFALSE 12303
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12143: LD_ADDR_VAR 0 2
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 33
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// if tmp then
12177: LD_VAR 0 2
12181: IFFALSE 12303
// for i in tmp do
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_VAR 0 2
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12301
// if See ( 1 , i ) then
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 292
12208: IFFALSE 12299
// begin seen := Replace ( seen , 4 , true ) ;
12210: LD_ADDR_EXP 9
12214: PUSH
12215: LD_EXP 9
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 1
12230: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12231: LD_INT 1
12233: PPUSH
12234: CALL 14977 0 1
12238: IFFALSE 12299
// begin DialogueOn ;
12240: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12253: LD_INT 10
12255: PPUSH
12256: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_STRING D5a-Sol1-1
12270: PPUSH
12271: CALL 15155 0 2
12275: ST_TO_ADDR
// if not un then
12276: LD_VAR 0 3
12280: NOT
12281: IFFALSE 12293
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12283: LD_INT 2
12285: PPUSH
12286: LD_STRING D5a-FSol1-1
12288: PPUSH
12289: CALL 15155 0 2
// DialogueOff ;
12293: CALL_OW 7
// break ;
12297: GO 12301
// end ; end ;
12299: GO 12193
12301: POP
12302: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12303: LD_EXP 9
12307: PUSH
12308: LD_INT 5
12310: ARRAY
12311: NOT
12312: PUSH
12313: LD_EXP 9
12317: PUSH
12318: LD_INT 3
12320: ARRAY
12321: AND
12322: IFFALSE 12496
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 34
12341: PUSH
12342: LD_INT 31
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: ST_TO_ADDR
// if tmp then
12358: LD_VAR 0 2
12362: IFFALSE 12496
// for i in tmp do
12364: LD_ADDR_VAR 0 1
12368: PUSH
12369: LD_VAR 0 2
12373: PUSH
12374: FOR_IN
12375: IFFALSE 12494
// if See ( 1 , i ) then
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 292
12389: IFFALSE 12492
// begin seen := Replace ( seen , 5 , true ) ;
12391: LD_ADDR_EXP 9
12395: PUSH
12396: LD_EXP 9
12400: PPUSH
12401: LD_INT 5
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 1
12411: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12412: LD_INT 1
12414: PPUSH
12415: CALL 14977 0 1
12419: IFFALSE 12492
// begin DialogueOn ;
12421: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12434: LD_INT 10
12436: PPUSH
12437: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 1
12448: PPUSH
12449: LD_STRING D8a-Sol2-1
12451: PPUSH
12452: CALL 15155 0 2
12456: ST_TO_ADDR
// if not un then
12457: LD_VAR 0 3
12461: NOT
12462: IFFALSE 12474
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12464: LD_INT 2
12466: PPUSH
12467: LD_STRING D8a-FSol2-1
12469: PPUSH
12470: CALL 15155 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12474: LD_EXP 21
12478: PPUSH
12479: LD_STRING D8a-JMM-1
12481: PPUSH
12482: CALL_OW 88
// DialogueOff ;
12486: CALL_OW 7
// break ;
12490: GO 12494
// end ; end ;
12492: GO 12374
12494: POP
12495: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12496: LD_EXP 9
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_EXP 9
12509: PUSH
12510: LD_INT 2
12512: ARRAY
12513: AND
12514: PUSH
12515: LD_EXP 9
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: AND
12524: PUSH
12525: LD_EXP 9
12529: PUSH
12530: LD_INT 4
12532: ARRAY
12533: AND
12534: PUSH
12535: LD_EXP 9
12539: PUSH
12540: LD_INT 5
12542: ARRAY
12543: AND
12544: IFFALSE 12547
// disable ;
12546: DISABLE
// end ;
12547: PPOPN 4
12549: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12550: LD_EXP 10
12554: PUSH
12555: LD_EXP 11
12559: AND
12560: IFFALSE 12758
12562: GO 12564
12564: DISABLE
12565: LD_INT 0
12567: PPUSH
// begin DialogueOn ;
12568: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12572: LD_EXP 11
12576: PPUSH
12577: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_STRING D5c-Sol1-1
12591: PPUSH
12592: CALL 15155 0 2
12596: ST_TO_ADDR
// if not un then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12620
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: PPUSH
12612: LD_STRING D5c-FSol1-1
12614: PPUSH
12615: CALL 15155 0 2
12619: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12620: LD_EXP 21
12624: PPUSH
12625: LD_STRING D5c-JMM-1
12627: PPUSH
12628: CALL_OW 88
// if IsOk ( Lisa ) then
12632: LD_EXP 22
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12657
// Say ( Lisa , D5d-Lisa-1 ) else
12643: LD_EXP 22
12647: PPUSH
12648: LD_STRING D5d-Lisa-1
12650: PPUSH
12651: CALL_OW 88
12655: GO 12742
// if IsOk ( Cyrus ) then
12657: LD_EXP 25
12661: PPUSH
12662: CALL_OW 302
12666: IFFALSE 12682
// Say ( Cyrus , D5d-Cyrus-1 ) else
12668: LD_EXP 25
12672: PPUSH
12673: LD_STRING D5d-Cyrus-1
12675: PPUSH
12676: CALL_OW 88
12680: GO 12742
// if IsOk ( Gary ) then
12682: LD_EXP 32
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// Say ( Gary , D5d-Gary-1 ) else
12693: LD_EXP 32
12697: PPUSH
12698: LD_STRING D5d-Gary-1
12700: PPUSH
12701: CALL_OW 88
12705: GO 12742
// if GetSex ( un ) = sex_male then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 258
12716: PUSH
12717: LD_INT 1
12719: EQUAL
12720: IFFALSE 12736
// Say ( un , D5d-Sol1-1 ) else
12722: LD_VAR 0 1
12726: PPUSH
12727: LD_STRING D5d-Sol1-1
12729: PPUSH
12730: CALL_OW 88
12734: GO 12742
// begin DialogueOff ;
12736: CALL_OW 7
// exit ;
12740: GO 12758
// end ; Say ( JMM , D5d-JMM-1 ) ;
12742: LD_EXP 21
12746: PPUSH
12747: LD_STRING D5d-JMM-1
12749: PPUSH
12750: CALL_OW 88
// DialogueOff ;
12754: CALL_OW 7
// end ;
12758: PPOPN 1
12760: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
12761: LD_INT 1
12763: PPUSH
12764: LD_INT 17
12766: PPUSH
12767: CALL_OW 294
12771: PUSH
12772: LD_INT 2
12774: GREATEREQUAL
12775: IFFALSE 12896
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
12783: LD_INT 10
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 10
12794: NEG
12795: PPUSH
12796: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
12800: LD_INT 10
12802: PPUSH
12803: LD_INT 5
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
12813: LD_INT 10
12815: PPUSH
12816: LD_INT 5
12818: PPUSH
12819: CALL_OW 86
// DialogueOn ;
12823: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D6-Sci1-1
12837: PPUSH
12838: CALL 15155 0 2
12842: ST_TO_ADDR
// if un then
12843: LD_VAR 0 1
12847: IFFALSE 12885
// begin Say ( JMM , D6-JMM-1 ) ;
12849: LD_EXP 21
12853: PPUSH
12854: LD_STRING D6-JMM-1
12856: PPUSH
12857: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_STRING D6-Sci1-2
12868: PPUSH
12869: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING D6-JMM-2
12880: PPUSH
12881: CALL_OW 88
// end ; DialogueOff ;
12885: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12889: LD_STRING M3
12891: PPUSH
12892: CALL_OW 337
// end ;
12896: PPOPN 1
12898: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
12899: LD_OWVAR 1
12903: PUSH
12904: LD_INT 42000
12906: GREATEREQUAL
12907: PUSH
12908: LD_INT 2
12910: PPUSH
12911: LD_INT 169
12913: PPUSH
12914: LD_INT 90
12916: PPUSH
12917: LD_INT 10
12919: PPUSH
12920: CALL 49558 0 4
12924: PUSH
12925: LD_INT 4
12927: ARRAY
12928: PUSH
12929: LD_INT 0
12931: EQUAL
12932: PUSH
12933: LD_INT 45
12935: PPUSH
12936: CALL_OW 301
12940: OR
12941: PUSH
12942: LD_INT 45
12944: PPUSH
12945: CALL_OW 255
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: OR
12954: AND
12955: PUSH
12956: LD_INT 94
12958: PPUSH
12959: CALL_OW 301
12963: NOT
12964: AND
12965: IFFALSE 14091
12967: GO 12969
12969: DISABLE
12970: LD_INT 0
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin uc_side := 5 ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_INT 5
12983: ST_TO_ADDR
// uc_nation := 2 ;
12984: LD_ADDR_OWVAR 21
12988: PUSH
12989: LD_INT 2
12991: ST_TO_ADDR
// InitHc ;
12992: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 3
13001: PPUSH
13002: LD_INT 8
13004: PPUSH
13005: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13009: LD_ADDR_OWVAR 29
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: LD_INT 12
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13024: LD_ADDR_OWVAR 33
13028: PUSH
13029: LD_STRING SecondCharsGal
13031: ST_TO_ADDR
// hc_face_number := 7 ;
13032: LD_ADDR_OWVAR 34
13036: PUSH
13037: LD_INT 7
13039: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13040: LD_ADDR_EXP 45
13044: PUSH
13045: CALL_OW 44
13049: ST_TO_ADDR
// InitHc ;
13050: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 16
13059: PPUSH
13060: LD_INT 2
13062: PPUSH
13063: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13067: LD_ADDR_OWVAR 29
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 12
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: ST_TO_ADDR
// hc_name :=  ;
13082: LD_ADDR_OWVAR 26
13086: PUSH
13087: LD_STRING 
13089: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13090: LD_ADDR_EXP 46
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// InitHc ;
13100: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13104: LD_INT 35
13106: PPUSH
13107: CALL_OW 67
// until not InBattle ( 1 ) ;
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 463
13118: NOT
13119: IFFALSE 13104
// wait ( 0 0$5 ) ;
13121: LD_INT 175
13123: PPUSH
13124: CALL_OW 67
// DialogueOn ;
13128: CALL_OW 6
// InGameOn ;
13132: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13136: LD_ADDR_VAR 0 1
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 25
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 25
13186: PUSH
13187: LD_INT 4
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_EXP 21
13236: PUSH
13237: LD_EXP 22
13241: PUSH
13242: LD_EXP 23
13246: PUSH
13247: LD_EXP 24
13251: PUSH
13252: LD_EXP 25
13256: PUSH
13257: LD_EXP 26
13261: PUSH
13262: LD_EXP 27
13266: PUSH
13267: LD_EXP 28
13271: PUSH
13272: LD_EXP 29
13276: PUSH
13277: LD_EXP 31
13281: PUSH
13282: LD_EXP 32
13286: PUSH
13287: LD_EXP 33
13291: PUSH
13292: LD_EXP 34
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: DIFF
13312: PPUSH
13313: LD_INT 26
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 72
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: ST_TO_ADDR
// if not un and Brown then
13332: LD_VAR 0 1
13336: NOT
13337: PUSH
13338: LD_EXP 27
13342: AND
13343: IFFALSE 13355
// un := Brown ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_EXP 27
13354: ST_TO_ADDR
// if un then
13355: LD_VAR 0 1
13359: IFFALSE 13385
// begin Say ( un , D7-Sol1-1 ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_STRING D7-Sol1-1
13368: PPUSH
13369: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13373: LD_EXP 21
13377: PPUSH
13378: LD_STRING D7-JMM-1
13380: PPUSH
13381: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13385: LD_EXP 45
13389: PPUSH
13390: LD_STRING D7-Ar1-1
13392: PPUSH
13393: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING D7-JMM-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13409: LD_EXP 45
13413: PPUSH
13414: LD_STRING D7-Ar1-2
13416: PPUSH
13417: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING D7-JMM-3
13428: PPUSH
13429: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13433: LD_EXP 45
13437: PPUSH
13438: LD_STRING D7-Ar1-3
13440: PPUSH
13441: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13445: LD_EXP 21
13449: PPUSH
13450: LD_STRING D7-JMM-4
13452: PPUSH
13453: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13457: LD_EXP 45
13461: PPUSH
13462: LD_STRING D7-Ar1-4
13464: PPUSH
13465: CALL_OW 94
// InGameOff ;
13469: CALL_OW 9
// DialogueOff ;
13473: CALL_OW 7
// case Query ( QCameras ) of 1 :
13477: LD_STRING QCameras
13479: PPUSH
13480: CALL_OW 97
13484: PUSH
13485: LD_INT 1
13487: DOUBLE
13488: EQUAL
13489: IFTRUE 13493
13491: GO 13496
13493: POP
// ; 2 :
13494: GO 13510
13496: LD_INT 2
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13509
13504: POP
// exit ; end ;
13505: GO 14091
13507: GO 13510
13509: POP
// ChangeMissionObjectives ( MCar ) ;
13510: LD_STRING MCar
13512: PPUSH
13513: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13517: LD_INT 124
13519: PPUSH
13520: LD_INT 90
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 6
13528: NEG
13529: PPUSH
13530: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13534: LD_INT 124
13536: PPUSH
13537: LD_INT 90
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13547: LD_INT 12
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 424
// wait ( 3 ) ;
13557: LD_INT 3
13559: PPUSH
13560: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13564: LD_INT 124
13566: PPUSH
13567: LD_INT 90
13569: PPUSH
13570: CALL_OW 86
// cargo := false ;
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_INT 12
13596: PPUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 34
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 58
13619: PUSH
13620: EMPTY
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// until cargo ;
13633: LD_VAR 0 3
13637: IFFALSE 13582
// cargo := cargo [ 1 ] ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 5
13660: PPUSH
13661: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
13665: LD_INT 12
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13675: LD_EXP 45
13679: PPUSH
13680: LD_INT 11
13682: PPUSH
13683: LD_INT 0
13685: PPUSH
13686: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13690: LD_EXP 46
13694: PPUSH
13695: LD_INT 11
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
13705: LD_EXP 45
13709: PUSH
13710: LD_EXP 46
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: LD_INT 12
13721: PPUSH
13722: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
13726: LD_EXP 45
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13740: LD_EXP 45
13744: PUSH
13745: LD_EXP 46
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: LD_INT 209
13756: PPUSH
13757: LD_INT 178
13759: PPUSH
13760: CALL_OW 171
// while ( true ) do
13764: LD_INT 1
13766: IFFALSE 13920
// begin wait ( 0 0$1 ) ;
13768: LD_INT 35
13770: PPUSH
13771: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
13775: LD_EXP 45
13779: PPUSH
13780: CALL_OW 314
13784: NOT
13785: PUSH
13786: LD_EXP 46
13790: PPUSH
13791: CALL_OW 314
13795: NOT
13796: OR
13797: IFFALSE 13823
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13799: LD_EXP 45
13803: PUSH
13804: LD_EXP 46
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: LD_INT 209
13815: PPUSH
13816: LD_INT 178
13818: PPUSH
13819: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
13823: LD_EXP 45
13827: PPUSH
13828: LD_INT 10
13830: PPUSH
13831: CALL_OW 308
13835: IFFALSE 13846
// RemoveUnit ( ar_mechanic ) ;
13837: LD_EXP 45
13841: PPUSH
13842: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
13846: LD_EXP 46
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 308
13858: IFFALSE 13869
// RemoveUnit ( ar_mechanic_friend ) ;
13860: LD_EXP 46
13864: PPUSH
13865: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 10
13876: PPUSH
13877: CALL_OW 308
13881: IFFALSE 13892
// RemoveUnit ( cargo ) ;
13883: LD_VAR 0 3
13887: PPUSH
13888: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
13892: LD_EXP 45
13896: PPUSH
13897: CALL_OW 300
13901: NOT
13902: PUSH
13903: LD_EXP 46
13907: PPUSH
13908: CALL_OW 300
13912: NOT
13913: AND
13914: IFFALSE 13918
// break ;
13916: GO 13920
// end ;
13918: GO 13764
// wait ( 0 0$2 ) ;
13920: LD_INT 70
13922: PPUSH
13923: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
13927: LD_EXP 45
13931: PPUSH
13932: LD_STRING D7a-Ar1-1
13934: PPUSH
13935: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
13939: LD_ADDR_VAR 0 4
13943: PUSH
13944: LD_INT 129
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 103
13956: PUSH
13957: LD_INT 6
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 148
13966: PUSH
13967: LD_INT 47
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 155
13976: PUSH
13977: LD_INT 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if Difficulty = 1 then
13990: LD_OWVAR 67
13994: PUSH
13995: LD_INT 1
13997: EQUAL
13998: IFFALSE 14035
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 4
14009: PUSH
14010: LD_INT 78
14012: PUSH
14013: LD_INT 7
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 104
14022: PUSH
14023: LD_INT 43
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ADD
14034: ST_TO_ADDR
// for i in tmp do
14035: LD_ADDR_VAR 0 2
14039: PUSH
14040: LD_VAR 0 4
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14079
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 9
14071: NEG
14072: PPUSH
14073: CALL_OW 330
14077: GO 14045
14079: POP
14080: POP
// CenterOnXY ( 129 , 10 ) ;
14081: LD_INT 129
14083: PPUSH
14084: LD_INT 10
14086: PPUSH
14087: CALL_OW 84
// end ;
14091: PPOPN 4
14093: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14094: LD_EXP 15
14098: PUSH
14099: LD_INT 21000
14101: MINUS
14102: PUSH
14103: LD_OWVAR 1
14107: LESSEQUAL
14108: IFFALSE 14148
14110: GO 14112
14112: DISABLE
// begin powell_warn := true ;
14113: LD_ADDR_EXP 16
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// DialogueOn ;
14121: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14125: LD_EXP 30
14129: PPUSH
14130: LD_STRING D9-Pow-1
14132: PPUSH
14133: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14137: LD_INT 10
14139: PPUSH
14140: CALL_OW 68
// DialogueOff ;
14144: CALL_OW 7
// end ;
14148: END
// every 0 0$1 trigger game_time <= tick do
14149: LD_EXP 15
14153: PUSH
14154: LD_OWVAR 1
14158: LESSEQUAL
14159: IFFALSE 14198
14161: GO 14163
14163: DISABLE
// begin DialogueOn ;
14164: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14168: LD_EXP 30
14172: PPUSH
14173: LD_STRING D9a-Pow-1
14175: PPUSH
14176: CALL_OW 94
// dwait ( 0 0$2 ) ;
14180: LD_INT 70
14182: PPUSH
14183: CALL_OW 68
// DialogueOff ;
14187: CALL_OW 7
// YouLost ( Command ) ;
14191: LD_STRING Command
14193: PPUSH
14194: CALL_OW 104
// end ;
14198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14199: LD_INT 22
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PUSH
14228: LD_INT 0
14230: EQUAL
14231: PUSH
14232: LD_EXP 21
14236: PPUSH
14237: CALL_OW 302
14241: AND
14242: IFFALSE 14974
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
// begin if tick < [ 70 70$00 , 60 60$00 , 55 55$00 ] [ Difficulty ] then
14250: LD_OWVAR 1
14254: PUSH
14255: LD_INT 147000
14257: PUSH
14258: LD_INT 126000
14260: PUSH
14261: LD_INT 115500
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_OWVAR 67
14273: ARRAY
14274: LESS
14275: IFFALSE 14289
// AddMedal ( Time1 , 1 ) else
14277: LD_STRING Time1
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 101
14287: GO 14320
// if not powell_warn then
14289: LD_EXP 16
14293: NOT
14294: IFFALSE 14309
// AddMedal ( Time1 , - 1 ) else
14296: LD_STRING Time1
14298: PPUSH
14299: LD_INT 1
14301: NEG
14302: PPUSH
14303: CALL_OW 101
14307: GO 14320
// AddMedal ( Time1 , - 2 ) ;
14309: LD_STRING Time1
14311: PPUSH
14312: LD_INT 2
14314: NEG
14315: PPUSH
14316: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14320: LD_EXP 17
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_OWVAR 67
14343: ARRAY
14344: GREATEREQUAL
14345: IFFALSE 14360
// AddMedal ( Destroy , - 2 ) else
14347: LD_STRING Destroy
14349: PPUSH
14350: LD_INT 2
14352: NEG
14353: PPUSH
14354: CALL_OW 101
14358: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14360: LD_INT 22
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 50
14382: PUSH
14383: EMPTY
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PUSH
14396: LD_INT 25
14398: GREATEREQUAL
14399: IFFALSE 14414
// AddMedal ( Destroy , - 1 ) else
14401: LD_STRING Destroy
14403: PPUSH
14404: LD_INT 1
14406: NEG
14407: PPUSH
14408: CALL_OW 101
14412: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14414: LD_INT 22
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 3
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 50
14436: PUSH
14437: EMPTY
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PUSH
14450: LD_INT 15
14452: GREATEREQUAL
14453: IFFALSE 14467
// AddMedal ( Destroy , 1 ) else
14455: LD_STRING Destroy
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 101
14465: GO 14477
// AddMedal ( Destroy , 2 ) ;
14467: LD_STRING Destroy
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14477: LD_EXP 13
14481: PPUSH
14482: LD_STRING 11_artifact_captured
14484: PPUSH
14485: CALL_OW 39
// if artifact_get then
14489: LD_EXP 13
14493: IFFALSE 14507
// AddMedal ( Artefact , 1 ) else
14495: LD_STRING Artefact
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 101
14505: GO 14518
// AddMedal ( Artefact , - 1 ) ;
14507: LD_STRING Artefact
14509: PPUSH
14510: LD_INT 1
14512: NEG
14513: PPUSH
14514: CALL_OW 101
// GiveMedals ( MAIN ) ;
14518: LD_STRING MAIN
14520: PPUSH
14521: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14525: LD_ADDR_EXP 20
14529: PUSH
14530: LD_EXP 20
14534: PPUSH
14535: LD_INT 51
14537: PUSH
14538: EMPTY
14539: LIST
14540: PPUSH
14541: CALL_OW 72
14545: ST_TO_ADDR
// tmp := JMM ^ selected ;
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_EXP 21
14555: PUSH
14556: LD_EXP 20
14560: ADD
14561: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14571: LD_VAR 0 1
14575: PUSH
14576: LD_EXP 21
14580: PUSH
14581: LD_EXP 22
14585: PUSH
14586: LD_EXP 23
14590: PUSH
14591: LD_EXP 24
14595: PUSH
14596: LD_EXP 25
14600: PUSH
14601: LD_EXP 26
14605: PUSH
14606: LD_EXP 27
14610: PUSH
14611: LD_EXP 28
14615: PUSH
14616: LD_EXP 29
14620: PUSH
14621: LD_EXP 31
14625: PUSH
14626: LD_EXP 32
14630: PUSH
14631: LD_EXP 33
14635: PUSH
14636: LD_EXP 34
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: DIFF
14656: PPUSH
14657: LD_STRING 11c_others
14659: PPUSH
14660: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14664: LD_EXP 21
14668: PPUSH
14669: LD_EXP 3
14673: PUSH
14674: LD_STRING JMM
14676: STR
14677: PPUSH
14678: CALL_OW 38
// if Lisa then
14682: LD_EXP 22
14686: IFFALSE 14706
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14688: LD_EXP 22
14692: PPUSH
14693: LD_EXP 3
14697: PUSH
14698: LD_STRING Lisa
14700: STR
14701: PPUSH
14702: CALL_OW 38
// if Donaldson then
14706: LD_EXP 23
14710: IFFALSE 14730
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
14712: LD_EXP 23
14716: PPUSH
14717: LD_EXP 3
14721: PUSH
14722: LD_STRING Donaldson
14724: STR
14725: PPUSH
14726: CALL_OW 38
// if Bobby then
14730: LD_EXP 24
14734: IFFALSE 14754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14736: LD_EXP 24
14740: PPUSH
14741: LD_EXP 3
14745: PUSH
14746: LD_STRING Bobby
14748: STR
14749: PPUSH
14750: CALL_OW 38
// if Cyrus then
14754: LD_EXP 25
14758: IFFALSE 14778
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14760: LD_EXP 25
14764: PPUSH
14765: LD_EXP 3
14769: PUSH
14770: LD_STRING Cyrus
14772: STR
14773: PPUSH
14774: CALL_OW 38
// if Denis then
14778: LD_EXP 26
14782: IFFALSE 14802
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
14784: LD_EXP 26
14788: PPUSH
14789: LD_EXP 3
14793: PUSH
14794: LD_STRING Denis
14796: STR
14797: PPUSH
14798: CALL_OW 38
// if Brown then
14802: LD_EXP 27
14806: IFFALSE 14826
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_EXP 3
14817: PUSH
14818: LD_STRING Brown
14820: STR
14821: PPUSH
14822: CALL_OW 38
// if Gladstone then
14826: LD_EXP 28
14830: IFFALSE 14850
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
14832: LD_EXP 28
14836: PPUSH
14837: LD_EXP 3
14841: PUSH
14842: LD_STRING Gladstone
14844: STR
14845: PPUSH
14846: CALL_OW 38
// if Houten then
14850: LD_EXP 29
14854: IFFALSE 14874
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
14856: LD_EXP 29
14860: PPUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_STRING Houten
14868: STR
14869: PPUSH
14870: CALL_OW 38
// if Cornel then
14874: LD_EXP 31
14878: IFFALSE 14898
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
14880: LD_EXP 31
14884: PPUSH
14885: LD_EXP 3
14889: PUSH
14890: LD_STRING Cornel
14892: STR
14893: PPUSH
14894: CALL_OW 38
// if Gary then
14898: LD_EXP 32
14902: IFFALSE 14922
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
14904: LD_EXP 32
14908: PPUSH
14909: LD_EXP 3
14913: PUSH
14914: LD_STRING Gary
14916: STR
14917: PPUSH
14918: CALL_OW 38
// if Frank then
14922: LD_EXP 33
14926: IFFALSE 14946
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
14928: LD_EXP 33
14932: PPUSH
14933: LD_EXP 3
14937: PUSH
14938: LD_STRING Frank
14940: STR
14941: PPUSH
14942: CALL_OW 38
// if Kikuchi then
14946: LD_EXP 34
14950: IFFALSE 14970
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
14952: LD_EXP 34
14956: PPUSH
14957: LD_EXP 3
14961: PUSH
14962: LD_STRING Kikuchi
14964: STR
14965: PPUSH
14966: CALL_OW 38
// YouWin ;
14970: CALL_OW 103
// end ;
14974: PPOPN 1
14976: END
// export function CanSayRand ( side ) ; begin
14977: LD_INT 0
14979: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 52
14987: PUSH
14988: EMPTY
14989: LIST
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_VAR 0 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: LD_EXP 21
15067: PUSH
15068: LD_EXP 33
15072: PUSH
15073: LD_EXP 22
15077: PUSH
15078: LD_EXP 23
15082: PUSH
15083: LD_EXP 24
15087: PUSH
15088: LD_EXP 25
15092: PUSH
15093: LD_EXP 26
15097: PUSH
15098: LD_EXP 27
15102: PUSH
15103: LD_EXP 28
15107: PUSH
15108: LD_EXP 29
15112: PUSH
15113: LD_EXP 30
15117: PUSH
15118: LD_EXP 31
15122: PUSH
15123: LD_EXP 32
15127: PUSH
15128: LD_EXP 34
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: DIFF
15149: ST_TO_ADDR
// end ;
15150: LD_VAR 0 2
15154: RET
// export function SayRand ( sex , dial ) ; begin
15155: LD_INT 0
15157: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15158: LD_ADDR_VAR 0 3
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: EMPTY
15167: LIST
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 26
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 25
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_EXP 21
15256: PUSH
15257: LD_EXP 33
15261: PUSH
15262: LD_EXP 22
15266: PUSH
15267: LD_EXP 23
15271: PUSH
15272: LD_EXP 24
15276: PUSH
15277: LD_EXP 25
15281: PUSH
15282: LD_EXP 26
15286: PUSH
15287: LD_EXP 27
15291: PUSH
15292: LD_EXP 28
15296: PUSH
15297: LD_EXP 29
15301: PUSH
15302: LD_EXP 30
15306: PUSH
15307: LD_EXP 31
15311: PUSH
15312: LD_EXP 32
15316: PUSH
15317: LD_EXP 34
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: DIFF
15338: ST_TO_ADDR
// if not result then
15339: LD_VAR 0 3
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15376
// result := result [ 1 ] ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: ST_TO_ADDR
// Say ( result , dial ) ;
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 88
// end ;
15376: LD_VAR 0 3
15380: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15381: LD_INT 0
15383: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 26
15401: PUSH
15402: LD_VAR 0 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 3
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: LD_EXP 21
15475: PUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_EXP 22
15485: PUSH
15486: LD_EXP 23
15490: PUSH
15491: LD_EXP 24
15495: PUSH
15496: LD_EXP 25
15500: PUSH
15501: LD_EXP 26
15505: PUSH
15506: LD_EXP 27
15510: PUSH
15511: LD_EXP 28
15515: PUSH
15516: LD_EXP 29
15520: PUSH
15521: LD_EXP 30
15525: PUSH
15526: LD_EXP 31
15530: PUSH
15531: LD_EXP 32
15535: PUSH
15536: LD_EXP 34
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_VAR 0 3
15561: ADD
15562: DIFF
15563: ST_TO_ADDR
// if not result then
15564: LD_VAR 0 4
15568: NOT
15569: IFFALSE 15573
// exit ;
15571: GO 15601
// result := result [ 1 ] ;
15573: LD_ADDR_VAR 0 4
15577: PUSH
15578: LD_VAR 0 4
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: ST_TO_ADDR
// Say ( result , dial ) ;
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: CALL_OW 88
// end ; end_of_file
15601: LD_VAR 0 4
15605: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 255
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15629
// artifact_get := true ;
15621: LD_ADDR_EXP 13
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 255
15638: PUSH
15639: LD_INT 2
15641: EQUAL
15642: IFFALSE 15660
// begin artifact_get := false ;
15644: LD_ADDR_EXP 13
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// artifact_stolen := true ;
15652: LD_ADDR_EXP 12
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15660: LD_ADDR_EXP 14
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// end ;
15668: PPOPN 2
15670: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15671: LD_ADDR_EXP 14
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// end ;
15679: PPOPN 2
15681: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15682: LD_VAR 0 1
15686: PUSH
15687: LD_EXP 21
15691: EQUAL
15692: IFFALSE 15703
// begin YouLost ( JMM ) ;
15694: LD_STRING JMM
15696: PPUSH
15697: CALL_OW 104
// exit ;
15701: GO 15835
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 25
15773: PUSH
15774: LD_INT 5
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 8
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: IN
15810: IFFALSE 15826
// loses_counter := loses_counter + 1 ;
15812: LD_ADDR_EXP 17
15816: PUSH
15817: LD_EXP 17
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL 39441 0 1
// end ;
15835: PPOPN 1
15837: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: CALL 41308 0 2
// end ;
15852: PPOPN 2
15854: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL 40624 0 1
// end ;
15864: PPOPN 1
15866: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_VAR 0 4
15886: PPUSH
15887: LD_VAR 0 5
15891: PPUSH
15892: CALL 38780 0 5
// end ;
15896: PPOPN 5
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 38468 0 2
// end ;
15913: PPOPN 2
15915: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 15950
// if not kamikazed then
15933: LD_EXP 11
15937: NOT
15938: IFFALSE 15950
// kamikazed := unit ;
15940: LD_ADDR_EXP 11
15944: PUSH
15945: LD_VAR 0 1
15949: ST_TO_ADDR
// end ;
15950: PPOPN 1
15952: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
15957: LD_VAR 0 1
15961: PPUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: CALL 38313 0 4
// end ;
15981: PPOPN 6
15983: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: CALL 38095 0 3
// end ;
16003: PPOPN 3
16005: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16006: LD_VAR 0 1
16010: PPUSH
16011: LD_VAR 0 2
16015: PPUSH
16016: CALL 39153 0 2
// end ;
16020: PPOPN 2
16022: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL 37803 0 2
// end ;
16037: PPOPN 2
16039: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 37987 0 2
// end ;
16054: PPOPN 2
16056: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL 40390 0 1
// end ;
16066: PPOPN 1
16068: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL 41562 0 2
// end ;
16083: PPOPN 2
16085: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_VAR 0 4
16105: PPUSH
16106: CALL 41771 0 4
// end ; end_of_file
16110: PPOPN 4
16112: END
// every 0 0$1 trigger game do
16113: LD_EXP 2
16117: IFFALSE 16147
16119: GO 16121
16121: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16122: LD_INT 7
16124: PUSH
16125: LD_INT 6
16127: PUSH
16128: LD_INT 4
16130: PUSH
16131: LD_INT 6
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: LD_INT 1750
16142: PPUSH
16143: CALL 16148 0 2
16147: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// if not areas then
16153: LD_VAR 0 1
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16274
// repeat wait ( time ) ;
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_INT 90
16181: PPUSH
16182: CALL_OW 12
16186: ST_TO_ADDR
// for i in areas do
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16251
// begin if Prob ( p ) then
16200: LD_VAR 0 5
16204: PPUSH
16205: CALL_OW 13
16209: IFFALSE 16249
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16211: LD_INT 1
16213: PPUSH
16214: LD_INT 5
16216: PPUSH
16217: CALL_OW 12
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
16234: LD_INT 455
16236: PPUSH
16237: LD_INT 595
16239: PPUSH
16240: CALL_OW 12
16244: PPUSH
16245: CALL_OW 67
// end ; end ;
16249: GO 16197
16251: POP
16252: POP
// time := time + 0 0$3 ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 105
16265: PLUS
16266: ST_TO_ADDR
// until not game ;
16267: LD_EXP 2
16271: NOT
16272: IFFALSE 16162
// end ; end_of_file
16274: LD_VAR 0 3
16278: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class ; export function InitMacro ; var i ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
// skirmish := false ;
16283: LD_ADDR_EXP 47
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// debug_mc := false ;
16291: LD_ADDR_EXP 48
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
// mc_bases := [ ] ;
16299: LD_ADDR_EXP 49
16303: PUSH
16304: EMPTY
16305: ST_TO_ADDR
// mc_sides := [ ] ;
16306: LD_ADDR_EXP 75
16310: PUSH
16311: EMPTY
16312: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16313: LD_ADDR_EXP 50
16317: PUSH
16318: EMPTY
16319: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16320: LD_ADDR_EXP 51
16324: PUSH
16325: EMPTY
16326: ST_TO_ADDR
// mc_need_heal := [ ] ;
16327: LD_ADDR_EXP 52
16331: PUSH
16332: EMPTY
16333: ST_TO_ADDR
// mc_healers := [ ] ;
16334: LD_ADDR_EXP 53
16338: PUSH
16339: EMPTY
16340: ST_TO_ADDR
// mc_build_list := [ ] ;
16341: LD_ADDR_EXP 54
16345: PUSH
16346: EMPTY
16347: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16348: LD_ADDR_EXP 81
16352: PUSH
16353: EMPTY
16354: ST_TO_ADDR
// mc_builders := [ ] ;
16355: LD_ADDR_EXP 55
16359: PUSH
16360: EMPTY
16361: ST_TO_ADDR
// mc_construct_list := [ ] ;
16362: LD_ADDR_EXP 56
16366: PUSH
16367: EMPTY
16368: ST_TO_ADDR
// mc_turret_list := [ ] ;
16369: LD_ADDR_EXP 57
16373: PUSH
16374: EMPTY
16375: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16376: LD_ADDR_EXP 58
16380: PUSH
16381: EMPTY
16382: ST_TO_ADDR
// mc_miners := [ ] ;
16383: LD_ADDR_EXP 63
16387: PUSH
16388: EMPTY
16389: ST_TO_ADDR
// mc_mines := [ ] ;
16390: LD_ADDR_EXP 62
16394: PUSH
16395: EMPTY
16396: ST_TO_ADDR
// mc_minefields := [ ] ;
16397: LD_ADDR_EXP 64
16401: PUSH
16402: EMPTY
16403: ST_TO_ADDR
// mc_crates := [ ] ;
16404: LD_ADDR_EXP 65
16408: PUSH
16409: EMPTY
16410: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16411: LD_ADDR_EXP 66
16415: PUSH
16416: EMPTY
16417: ST_TO_ADDR
// mc_crates_area := [ ] ;
16418: LD_ADDR_EXP 67
16422: PUSH
16423: EMPTY
16424: ST_TO_ADDR
// mc_vehicles := [ ] ;
16425: LD_ADDR_EXP 68
16429: PUSH
16430: EMPTY
16431: ST_TO_ADDR
// mc_attack := [ ] ;
16432: LD_ADDR_EXP 69
16436: PUSH
16437: EMPTY
16438: ST_TO_ADDR
// mc_produce := [ ] ;
16439: LD_ADDR_EXP 70
16443: PUSH
16444: EMPTY
16445: ST_TO_ADDR
// mc_defender := [ ] ;
16446: LD_ADDR_EXP 71
16450: PUSH
16451: EMPTY
16452: ST_TO_ADDR
// mc_parking := [ ] ;
16453: LD_ADDR_EXP 73
16457: PUSH
16458: EMPTY
16459: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16460: LD_ADDR_EXP 59
16464: PUSH
16465: EMPTY
16466: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16467: LD_ADDR_EXP 61
16471: PUSH
16472: EMPTY
16473: ST_TO_ADDR
// mc_scan := [ ] ;
16474: LD_ADDR_EXP 72
16478: PUSH
16479: EMPTY
16480: ST_TO_ADDR
// mc_scan_area := [ ] ;
16481: LD_ADDR_EXP 74
16485: PUSH
16486: EMPTY
16487: ST_TO_ADDR
// mc_tech := [ ] ;
16488: LD_ADDR_EXP 76
16492: PUSH
16493: EMPTY
16494: ST_TO_ADDR
// mc_class := [ ] ;
16495: LD_ADDR_EXP 89
16499: PUSH
16500: EMPTY
16501: ST_TO_ADDR
// end ;
16502: LD_VAR 0 1
16506: RET
// export function MC_Kill ( base ) ; begin
16507: LD_INT 0
16509: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16510: LD_ADDR_EXP 49
16514: PUSH
16515: LD_EXP 49
16519: PPUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: EMPTY
16526: PPUSH
16527: CALL_OW 1
16531: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16532: LD_ADDR_EXP 50
16536: PUSH
16537: LD_EXP 50
16541: PPUSH
16542: LD_VAR 0 1
16546: PPUSH
16547: EMPTY
16548: PPUSH
16549: CALL_OW 1
16553: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16554: LD_ADDR_EXP 51
16558: PUSH
16559: LD_EXP 51
16563: PPUSH
16564: LD_VAR 0 1
16568: PPUSH
16569: EMPTY
16570: PPUSH
16571: CALL_OW 1
16575: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16576: LD_ADDR_EXP 52
16580: PUSH
16581: LD_EXP 52
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: EMPTY
16592: PPUSH
16593: CALL_OW 1
16597: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16598: LD_ADDR_EXP 53
16602: PUSH
16603: LD_EXP 53
16607: PPUSH
16608: LD_VAR 0 1
16612: PPUSH
16613: EMPTY
16614: PPUSH
16615: CALL_OW 1
16619: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16620: LD_ADDR_EXP 54
16624: PUSH
16625: LD_EXP 54
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: EMPTY
16636: PPUSH
16637: CALL_OW 1
16641: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16642: LD_ADDR_EXP 55
16646: PUSH
16647: LD_EXP 55
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: EMPTY
16658: PPUSH
16659: CALL_OW 1
16663: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16664: LD_ADDR_EXP 56
16668: PUSH
16669: LD_EXP 56
16673: PPUSH
16674: LD_VAR 0 1
16678: PPUSH
16679: EMPTY
16680: PPUSH
16681: CALL_OW 1
16685: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16686: LD_ADDR_EXP 57
16690: PUSH
16691: LD_EXP 57
16695: PPUSH
16696: LD_VAR 0 1
16700: PPUSH
16701: EMPTY
16702: PPUSH
16703: CALL_OW 1
16707: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16708: LD_ADDR_EXP 58
16712: PUSH
16713: LD_EXP 58
16717: PPUSH
16718: LD_VAR 0 1
16722: PPUSH
16723: EMPTY
16724: PPUSH
16725: CALL_OW 1
16729: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16730: LD_ADDR_EXP 59
16734: PUSH
16735: LD_EXP 59
16739: PPUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: EMPTY
16746: PPUSH
16747: CALL_OW 1
16751: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16752: LD_ADDR_EXP 60
16756: PUSH
16757: LD_EXP 60
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: LD_INT 0
16769: PPUSH
16770: CALL_OW 1
16774: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16775: LD_ADDR_EXP 61
16779: PUSH
16780: LD_EXP 61
16784: PPUSH
16785: LD_VAR 0 1
16789: PPUSH
16790: EMPTY
16791: PPUSH
16792: CALL_OW 1
16796: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16797: LD_ADDR_EXP 62
16801: PUSH
16802: LD_EXP 62
16806: PPUSH
16807: LD_VAR 0 1
16811: PPUSH
16812: EMPTY
16813: PPUSH
16814: CALL_OW 1
16818: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16819: LD_ADDR_EXP 63
16823: PUSH
16824: LD_EXP 63
16828: PPUSH
16829: LD_VAR 0 1
16833: PPUSH
16834: EMPTY
16835: PPUSH
16836: CALL_OW 1
16840: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16841: LD_ADDR_EXP 64
16845: PUSH
16846: LD_EXP 64
16850: PPUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: EMPTY
16857: PPUSH
16858: CALL_OW 1
16862: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16863: LD_ADDR_EXP 65
16867: PUSH
16868: LD_EXP 65
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: EMPTY
16879: PPUSH
16880: CALL_OW 1
16884: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
16885: LD_ADDR_EXP 66
16889: PUSH
16890: LD_EXP 66
16894: PPUSH
16895: LD_VAR 0 1
16899: PPUSH
16900: EMPTY
16901: PPUSH
16902: CALL_OW 1
16906: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
16907: LD_ADDR_EXP 67
16911: PUSH
16912: LD_EXP 67
16916: PPUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: EMPTY
16923: PPUSH
16924: CALL_OW 1
16928: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
16929: LD_ADDR_EXP 68
16933: PUSH
16934: LD_EXP 68
16938: PPUSH
16939: LD_VAR 0 1
16943: PPUSH
16944: EMPTY
16945: PPUSH
16946: CALL_OW 1
16950: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
16951: LD_ADDR_EXP 69
16955: PUSH
16956: LD_EXP 69
16960: PPUSH
16961: LD_VAR 0 1
16965: PPUSH
16966: EMPTY
16967: PPUSH
16968: CALL_OW 1
16972: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
16973: LD_ADDR_EXP 70
16977: PUSH
16978: LD_EXP 70
16982: PPUSH
16983: LD_VAR 0 1
16987: PPUSH
16988: EMPTY
16989: PPUSH
16990: CALL_OW 1
16994: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
16995: LD_ADDR_EXP 71
16999: PUSH
17000: LD_EXP 71
17004: PPUSH
17005: LD_VAR 0 1
17009: PPUSH
17010: EMPTY
17011: PPUSH
17012: CALL_OW 1
17016: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17017: LD_ADDR_EXP 72
17021: PUSH
17022: LD_EXP 72
17026: PPUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: EMPTY
17033: PPUSH
17034: CALL_OW 1
17038: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17039: LD_ADDR_EXP 73
17043: PUSH
17044: LD_EXP 73
17048: PPUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: EMPTY
17055: PPUSH
17056: CALL_OW 1
17060: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17061: LD_ADDR_EXP 74
17065: PUSH
17066: LD_EXP 74
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: EMPTY
17077: PPUSH
17078: CALL_OW 1
17082: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17083: LD_ADDR_EXP 76
17087: PUSH
17088: LD_EXP 76
17092: PPUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: EMPTY
17099: PPUSH
17100: CALL_OW 1
17104: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17105: LD_ADDR_EXP 78
17109: PUSH
17110: LD_EXP 78
17114: PPUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: EMPTY
17121: PPUSH
17122: CALL_OW 1
17126: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17127: LD_ADDR_EXP 79
17131: PUSH
17132: LD_EXP 79
17136: PPUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: EMPTY
17143: PPUSH
17144: CALL_OW 1
17148: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17149: LD_ADDR_EXP 80
17153: PUSH
17154: LD_EXP 80
17158: PPUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: EMPTY
17165: PPUSH
17166: CALL_OW 1
17170: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17171: LD_ADDR_EXP 81
17175: PUSH
17176: LD_EXP 81
17180: PPUSH
17181: LD_VAR 0 1
17185: PPUSH
17186: EMPTY
17187: PPUSH
17188: CALL_OW 1
17192: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17193: LD_ADDR_EXP 82
17197: PUSH
17198: LD_EXP 82
17202: PPUSH
17203: LD_VAR 0 1
17207: PPUSH
17208: EMPTY
17209: PPUSH
17210: CALL_OW 1
17214: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17215: LD_ADDR_EXP 83
17219: PUSH
17220: LD_EXP 83
17224: PPUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: EMPTY
17231: PPUSH
17232: CALL_OW 1
17236: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17237: LD_ADDR_EXP 84
17241: PUSH
17242: LD_EXP 84
17246: PPUSH
17247: LD_VAR 0 1
17251: PPUSH
17252: EMPTY
17253: PPUSH
17254: CALL_OW 1
17258: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17259: LD_ADDR_EXP 85
17263: PUSH
17264: LD_EXP 85
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: EMPTY
17275: PPUSH
17276: CALL_OW 1
17280: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17281: LD_ADDR_EXP 86
17285: PUSH
17286: LD_EXP 86
17290: PPUSH
17291: LD_VAR 0 1
17295: PPUSH
17296: EMPTY
17297: PPUSH
17298: CALL_OW 1
17302: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17303: LD_ADDR_EXP 87
17307: PUSH
17308: LD_EXP 87
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: EMPTY
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17325: LD_ADDR_EXP 88
17329: PUSH
17330: LD_EXP 88
17334: PPUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: EMPTY
17341: PPUSH
17342: CALL_OW 1
17346: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17347: LD_ADDR_EXP 89
17351: PUSH
17352: LD_EXP 89
17356: PPUSH
17357: LD_VAR 0 1
17361: PPUSH
17362: EMPTY
17363: PPUSH
17364: CALL_OW 1
17368: ST_TO_ADDR
// end ;
17369: LD_VAR 0 2
17373: RET
// export function MC_Start ( ) ; var i ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
// for i = 1 to mc_bases do
17378: LD_ADDR_VAR 0 2
17382: PUSH
17383: DOUBLE
17384: LD_INT 1
17386: DEC
17387: ST_TO_ADDR
17388: LD_EXP 49
17392: PUSH
17393: FOR_TO
17394: IFFALSE 18384
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17396: LD_ADDR_EXP 49
17400: PUSH
17401: LD_EXP 49
17405: PPUSH
17406: LD_VAR 0 2
17410: PPUSH
17411: LD_EXP 49
17415: PUSH
17416: LD_VAR 0 2
17420: ARRAY
17421: PUSH
17422: LD_INT 0
17424: DIFF
17425: PPUSH
17426: CALL_OW 1
17430: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17431: LD_ADDR_EXP 50
17435: PUSH
17436: LD_EXP 50
17440: PPUSH
17441: LD_VAR 0 2
17445: PPUSH
17446: EMPTY
17447: PPUSH
17448: CALL_OW 1
17452: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17453: LD_ADDR_EXP 51
17457: PUSH
17458: LD_EXP 51
17462: PPUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: EMPTY
17469: PPUSH
17470: CALL_OW 1
17474: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17475: LD_ADDR_EXP 52
17479: PUSH
17480: LD_EXP 52
17484: PPUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: EMPTY
17491: PPUSH
17492: CALL_OW 1
17496: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17497: LD_ADDR_EXP 53
17501: PUSH
17502: LD_EXP 53
17506: PPUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: EMPTY
17513: PUSH
17514: EMPTY
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 1
17524: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17525: LD_ADDR_EXP 54
17529: PUSH
17530: LD_EXP 54
17534: PPUSH
17535: LD_VAR 0 2
17539: PPUSH
17540: EMPTY
17541: PPUSH
17542: CALL_OW 1
17546: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17547: LD_ADDR_EXP 81
17551: PUSH
17552: LD_EXP 81
17556: PPUSH
17557: LD_VAR 0 2
17561: PPUSH
17562: EMPTY
17563: PPUSH
17564: CALL_OW 1
17568: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17569: LD_ADDR_EXP 55
17573: PUSH
17574: LD_EXP 55
17578: PPUSH
17579: LD_VAR 0 2
17583: PPUSH
17584: EMPTY
17585: PPUSH
17586: CALL_OW 1
17590: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17591: LD_ADDR_EXP 56
17595: PUSH
17596: LD_EXP 56
17600: PPUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: EMPTY
17607: PPUSH
17608: CALL_OW 1
17612: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17613: LD_ADDR_EXP 57
17617: PUSH
17618: LD_EXP 57
17622: PPUSH
17623: LD_VAR 0 2
17627: PPUSH
17628: EMPTY
17629: PPUSH
17630: CALL_OW 1
17634: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17635: LD_ADDR_EXP 58
17639: PUSH
17640: LD_EXP 58
17644: PPUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: LD_EXP 49
17654: PUSH
17655: LD_VAR 0 2
17659: ARRAY
17660: PPUSH
17661: LD_INT 2
17663: PUSH
17664: LD_INT 30
17666: PUSH
17667: LD_INT 32
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 30
17676: PUSH
17677: LD_INT 31
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 58
17691: PUSH
17692: EMPTY
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PPUSH
17699: CALL_OW 72
17703: PPUSH
17704: CALL_OW 1
17708: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17709: LD_ADDR_EXP 59
17713: PUSH
17714: LD_EXP 59
17718: PPUSH
17719: LD_VAR 0 2
17723: PPUSH
17724: EMPTY
17725: PPUSH
17726: CALL_OW 1
17730: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17731: LD_ADDR_EXP 63
17735: PUSH
17736: LD_EXP 63
17740: PPUSH
17741: LD_VAR 0 2
17745: PPUSH
17746: EMPTY
17747: PPUSH
17748: CALL_OW 1
17752: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17753: LD_ADDR_EXP 62
17757: PUSH
17758: LD_EXP 62
17762: PPUSH
17763: LD_VAR 0 2
17767: PPUSH
17768: EMPTY
17769: PPUSH
17770: CALL_OW 1
17774: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17775: LD_ADDR_EXP 64
17779: PUSH
17780: LD_EXP 64
17784: PPUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: EMPTY
17791: PPUSH
17792: CALL_OW 1
17796: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17797: LD_ADDR_EXP 65
17801: PUSH
17802: LD_EXP 65
17806: PPUSH
17807: LD_VAR 0 2
17811: PPUSH
17812: EMPTY
17813: PPUSH
17814: CALL_OW 1
17818: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17819: LD_ADDR_EXP 66
17823: PUSH
17824: LD_EXP 66
17828: PPUSH
17829: LD_VAR 0 2
17833: PPUSH
17834: EMPTY
17835: PPUSH
17836: CALL_OW 1
17840: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17841: LD_ADDR_EXP 67
17845: PUSH
17846: LD_EXP 67
17850: PPUSH
17851: LD_VAR 0 2
17855: PPUSH
17856: EMPTY
17857: PPUSH
17858: CALL_OW 1
17862: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17863: LD_ADDR_EXP 68
17867: PUSH
17868: LD_EXP 68
17872: PPUSH
17873: LD_VAR 0 2
17877: PPUSH
17878: EMPTY
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17885: LD_ADDR_EXP 69
17889: PUSH
17890: LD_EXP 69
17894: PPUSH
17895: LD_VAR 0 2
17899: PPUSH
17900: EMPTY
17901: PPUSH
17902: CALL_OW 1
17906: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17907: LD_ADDR_EXP 70
17911: PUSH
17912: LD_EXP 70
17916: PPUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: EMPTY
17923: PPUSH
17924: CALL_OW 1
17928: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17929: LD_ADDR_EXP 71
17933: PUSH
17934: LD_EXP 71
17938: PPUSH
17939: LD_VAR 0 2
17943: PPUSH
17944: EMPTY
17945: PPUSH
17946: CALL_OW 1
17950: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
17951: LD_ADDR_EXP 60
17955: PUSH
17956: LD_EXP 60
17960: PPUSH
17961: LD_VAR 0 2
17965: PPUSH
17966: LD_INT 0
17968: PPUSH
17969: CALL_OW 1
17973: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
17974: LD_ADDR_EXP 73
17978: PUSH
17979: LD_EXP 73
17983: PPUSH
17984: LD_VAR 0 2
17988: PPUSH
17989: LD_INT 0
17991: PPUSH
17992: CALL_OW 1
17996: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17997: LD_ADDR_EXP 61
18001: PUSH
18002: LD_EXP 61
18006: PPUSH
18007: LD_VAR 0 2
18011: PPUSH
18012: EMPTY
18013: PPUSH
18014: CALL_OW 1
18018: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18019: LD_ADDR_EXP 72
18023: PUSH
18024: LD_EXP 72
18028: PPUSH
18029: LD_VAR 0 2
18033: PPUSH
18034: LD_INT 0
18036: PPUSH
18037: CALL_OW 1
18041: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18042: LD_ADDR_EXP 74
18046: PUSH
18047: LD_EXP 74
18051: PPUSH
18052: LD_VAR 0 2
18056: PPUSH
18057: EMPTY
18058: PPUSH
18059: CALL_OW 1
18063: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18064: LD_ADDR_EXP 77
18068: PUSH
18069: LD_EXP 77
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_INT 0
18081: PPUSH
18082: CALL_OW 1
18086: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18087: LD_ADDR_EXP 78
18091: PUSH
18092: LD_EXP 78
18096: PPUSH
18097: LD_VAR 0 2
18101: PPUSH
18102: EMPTY
18103: PPUSH
18104: CALL_OW 1
18108: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18109: LD_ADDR_EXP 79
18113: PUSH
18114: LD_EXP 79
18118: PPUSH
18119: LD_VAR 0 2
18123: PPUSH
18124: EMPTY
18125: PPUSH
18126: CALL_OW 1
18130: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18131: LD_ADDR_EXP 80
18135: PUSH
18136: LD_EXP 80
18140: PPUSH
18141: LD_VAR 0 2
18145: PPUSH
18146: EMPTY
18147: PPUSH
18148: CALL_OW 1
18152: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18153: LD_ADDR_EXP 82
18157: PUSH
18158: LD_EXP 82
18162: PPUSH
18163: LD_VAR 0 2
18167: PPUSH
18168: LD_EXP 49
18172: PUSH
18173: LD_VAR 0 2
18177: ARRAY
18178: PPUSH
18179: LD_INT 2
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: LD_INT 6
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 30
18194: PUSH
18195: LD_INT 7
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 30
18204: PUSH
18205: LD_INT 8
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 72
18222: PPUSH
18223: CALL_OW 1
18227: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18228: LD_ADDR_EXP 83
18232: PUSH
18233: LD_EXP 83
18237: PPUSH
18238: LD_VAR 0 2
18242: PPUSH
18243: EMPTY
18244: PPUSH
18245: CALL_OW 1
18249: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18250: LD_ADDR_EXP 84
18254: PUSH
18255: LD_EXP 84
18259: PPUSH
18260: LD_VAR 0 2
18264: PPUSH
18265: EMPTY
18266: PPUSH
18267: CALL_OW 1
18271: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18272: LD_ADDR_EXP 85
18276: PUSH
18277: LD_EXP 85
18281: PPUSH
18282: LD_VAR 0 2
18286: PPUSH
18287: EMPTY
18288: PPUSH
18289: CALL_OW 1
18293: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18294: LD_ADDR_EXP 86
18298: PUSH
18299: LD_EXP 86
18303: PPUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: EMPTY
18310: PPUSH
18311: CALL_OW 1
18315: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18316: LD_ADDR_EXP 87
18320: PUSH
18321: LD_EXP 87
18325: PPUSH
18326: LD_VAR 0 2
18330: PPUSH
18331: EMPTY
18332: PPUSH
18333: CALL_OW 1
18337: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18338: LD_ADDR_EXP 88
18342: PUSH
18343: LD_EXP 88
18347: PPUSH
18348: LD_VAR 0 2
18352: PPUSH
18353: EMPTY
18354: PPUSH
18355: CALL_OW 1
18359: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18360: LD_ADDR_EXP 89
18364: PUSH
18365: LD_EXP 89
18369: PPUSH
18370: LD_VAR 0 2
18374: PPUSH
18375: EMPTY
18376: PPUSH
18377: CALL_OW 1
18381: ST_TO_ADDR
// end ;
18382: GO 17393
18384: POP
18385: POP
// MC_InitSides ( ) ;
18386: CALL 18672 0 0
// MC_InitResearch ( ) ;
18390: CALL 18411 0 0
// CustomInitMacro ( ) ;
18394: CALL 285 0 0
// skirmish := true ;
18398: LD_ADDR_EXP 47
18402: PUSH
18403: LD_INT 1
18405: ST_TO_ADDR
// end ;
18406: LD_VAR 0 1
18410: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18411: LD_INT 0
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
// if not mc_bases then
18419: LD_EXP 49
18423: NOT
18424: IFFALSE 18428
// exit ;
18426: GO 18667
// for i = 1 to 8 do
18428: LD_ADDR_VAR 0 2
18432: PUSH
18433: DOUBLE
18434: LD_INT 1
18436: DEC
18437: ST_TO_ADDR
18438: LD_INT 8
18440: PUSH
18441: FOR_TO
18442: IFFALSE 18468
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18444: LD_ADDR_EXP 76
18448: PUSH
18449: LD_EXP 76
18453: PPUSH
18454: LD_VAR 0 2
18458: PPUSH
18459: EMPTY
18460: PPUSH
18461: CALL_OW 1
18465: ST_TO_ADDR
18466: GO 18441
18468: POP
18469: POP
// tmp := [ ] ;
18470: LD_ADDR_VAR 0 5
18474: PUSH
18475: EMPTY
18476: ST_TO_ADDR
// for i = 1 to mc_sides do
18477: LD_ADDR_VAR 0 2
18481: PUSH
18482: DOUBLE
18483: LD_INT 1
18485: DEC
18486: ST_TO_ADDR
18487: LD_EXP 75
18491: PUSH
18492: FOR_TO
18493: IFFALSE 18551
// if not mc_sides [ i ] in tmp then
18495: LD_EXP 75
18499: PUSH
18500: LD_VAR 0 2
18504: ARRAY
18505: PUSH
18506: LD_VAR 0 5
18510: IN
18511: NOT
18512: IFFALSE 18549
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18514: LD_ADDR_VAR 0 5
18518: PUSH
18519: LD_VAR 0 5
18523: PPUSH
18524: LD_VAR 0 5
18528: PUSH
18529: LD_INT 1
18531: PLUS
18532: PPUSH
18533: LD_EXP 75
18537: PUSH
18538: LD_VAR 0 2
18542: ARRAY
18543: PPUSH
18544: CALL_OW 2
18548: ST_TO_ADDR
18549: GO 18492
18551: POP
18552: POP
// if not tmp then
18553: LD_VAR 0 5
18557: NOT
18558: IFFALSE 18562
// exit ;
18560: GO 18667
// for j in tmp do
18562: LD_ADDR_VAR 0 3
18566: PUSH
18567: LD_VAR 0 5
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18665
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18575: LD_ADDR_VAR 0 6
18579: PUSH
18580: LD_INT 22
18582: PUSH
18583: LD_VAR 0 3
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 69
18596: ST_TO_ADDR
// if not un then
18597: LD_VAR 0 6
18601: NOT
18602: IFFALSE 18606
// continue ;
18604: GO 18572
// nation := GetNation ( un [ 1 ] ) ;
18606: LD_ADDR_VAR 0 4
18610: PUSH
18611: LD_VAR 0 6
18615: PUSH
18616: LD_INT 1
18618: ARRAY
18619: PPUSH
18620: CALL_OW 248
18624: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18625: LD_ADDR_EXP 76
18629: PUSH
18630: LD_EXP 76
18634: PPUSH
18635: LD_VAR 0 3
18639: PPUSH
18640: LD_VAR 0 3
18644: PPUSH
18645: LD_VAR 0 4
18649: PPUSH
18650: LD_INT 1
18652: PPUSH
18653: CALL 41968 0 3
18657: PPUSH
18658: CALL_OW 1
18662: ST_TO_ADDR
// end ;
18663: GO 18572
18665: POP
18666: POP
// end ;
18667: LD_VAR 0 1
18671: RET
// export function MC_InitSides ( ) ; var i ; begin
18672: LD_INT 0
18674: PPUSH
18675: PPUSH
// if not mc_bases then
18676: LD_EXP 49
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18759
// for i = 1 to mc_bases do
18685: LD_ADDR_VAR 0 2
18689: PUSH
18690: DOUBLE
18691: LD_INT 1
18693: DEC
18694: ST_TO_ADDR
18695: LD_EXP 49
18699: PUSH
18700: FOR_TO
18701: IFFALSE 18757
// if mc_bases [ i ] then
18703: LD_EXP 49
18707: PUSH
18708: LD_VAR 0 2
18712: ARRAY
18713: IFFALSE 18755
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18715: LD_ADDR_EXP 75
18719: PUSH
18720: LD_EXP 75
18724: PPUSH
18725: LD_VAR 0 2
18729: PPUSH
18730: LD_EXP 49
18734: PUSH
18735: LD_VAR 0 2
18739: ARRAY
18740: PUSH
18741: LD_INT 1
18743: ARRAY
18744: PPUSH
18745: CALL_OW 255
18749: PPUSH
18750: CALL_OW 1
18754: ST_TO_ADDR
18755: GO 18700
18757: POP
18758: POP
// end ;
18759: LD_VAR 0 1
18763: RET
// every 0 0$01 trigger skirmish do
18764: LD_EXP 47
18768: IFFALSE 18915
18770: GO 18772
18772: DISABLE
// begin enable ;
18773: ENABLE
// MC_CheckBuildings ( ) ;
18774: CALL 22727 0 0
// MC_CheckPeopleLife ( ) ;
18778: CALL 22852 0 0
// RaiseSailEvent ( 100 ) ;
18782: LD_INT 100
18784: PPUSH
18785: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
18789: LD_INT 103
18791: PPUSH
18792: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18796: LD_INT 104
18798: PPUSH
18799: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18803: LD_INT 105
18805: PPUSH
18806: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18810: LD_INT 106
18812: PPUSH
18813: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18817: LD_INT 107
18819: PPUSH
18820: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18824: LD_INT 108
18826: PPUSH
18827: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18831: LD_INT 109
18833: PPUSH
18834: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18838: LD_INT 110
18840: PPUSH
18841: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18845: LD_INT 111
18847: PPUSH
18848: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18852: LD_INT 112
18854: PPUSH
18855: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
18859: LD_INT 113
18861: PPUSH
18862: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18866: LD_INT 120
18868: PPUSH
18869: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18873: LD_INT 121
18875: PPUSH
18876: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18880: LD_INT 122
18882: PPUSH
18883: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18887: LD_INT 123
18889: PPUSH
18890: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18894: LD_INT 125
18896: PPUSH
18897: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18901: LD_INT 126
18903: PPUSH
18904: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18908: LD_INT 200
18910: PPUSH
18911: CALL_OW 427
// end ;
18915: END
// on SailEvent ( event ) do begin if event = 100 then
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 100
18923: EQUAL
18924: IFFALSE 18930
// MC_ClassManager ( ) ;
18926: CALL 19322 0 0
// if event = 101 then
18930: LD_VAR 0 1
18934: PUSH
18935: LD_INT 101
18937: EQUAL
18938: IFFALSE 18944
// MC_RepairBuildings ( ) ;
18940: CALL 23410 0 0
// if event = 102 then
18944: LD_VAR 0 1
18948: PUSH
18949: LD_INT 102
18951: EQUAL
18952: IFFALSE 18958
// MC_Heal ( ) ;
18954: CALL 23816 0 0
// if event = 103 then
18958: LD_VAR 0 1
18962: PUSH
18963: LD_INT 103
18965: EQUAL
18966: IFFALSE 18972
// MC_Build ( ) ;
18968: CALL 24238 0 0
// if event = 104 then
18972: LD_VAR 0 1
18976: PUSH
18977: LD_INT 104
18979: EQUAL
18980: IFFALSE 18986
// MC_TurretWeapon ( ) ;
18982: CALL 25851 0 0
// if event = 105 then
18986: LD_VAR 0 1
18990: PUSH
18991: LD_INT 105
18993: EQUAL
18994: IFFALSE 19000
// MC_BuildUpgrade ( ) ;
18996: CALL 25402 0 0
// if event = 106 then
19000: LD_VAR 0 1
19004: PUSH
19005: LD_INT 106
19007: EQUAL
19008: IFFALSE 19014
// MC_PlantMines ( ) ;
19010: CALL 26203 0 0
// if event = 107 then
19014: LD_VAR 0 1
19018: PUSH
19019: LD_INT 107
19021: EQUAL
19022: IFFALSE 19028
// MC_CollectCrates ( ) ;
19024: CALL 27237 0 0
// if event = 108 then
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 108
19035: EQUAL
19036: IFFALSE 19042
// MC_LinkRemoteControl ( ) ;
19038: CALL 28797 0 0
// if event = 109 then
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 109
19049: EQUAL
19050: IFFALSE 19056
// MC_ProduceVehicle ( ) ;
19052: CALL 28978 0 0
// if event = 110 then
19056: LD_VAR 0 1
19060: PUSH
19061: LD_INT 110
19063: EQUAL
19064: IFFALSE 19070
// MC_SendAttack ( ) ;
19066: CALL 29459 0 0
// if event = 111 then
19070: LD_VAR 0 1
19074: PUSH
19075: LD_INT 111
19077: EQUAL
19078: IFFALSE 19084
// MC_Defend ( ) ;
19080: CALL 29567 0 0
// if event = 112 then
19084: LD_VAR 0 1
19088: PUSH
19089: LD_INT 112
19091: EQUAL
19092: IFFALSE 19098
// MC_Research ( ) ;
19094: CALL 30120 0 0
// if event = 113 then
19098: LD_VAR 0 1
19102: PUSH
19103: LD_INT 113
19105: EQUAL
19106: IFFALSE 19112
// MC_MinesTrigger ( ) ;
19108: CALL 31089 0 0
// if event = 120 then
19112: LD_VAR 0 1
19116: PUSH
19117: LD_INT 120
19119: EQUAL
19120: IFFALSE 19126
// MC_RepairVehicle ( ) ;
19122: CALL 31188 0 0
// if event = 121 then
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 121
19133: EQUAL
19134: IFFALSE 19140
// MC_TameApe ( ) ;
19136: CALL 31931 0 0
// if event = 122 then
19140: LD_VAR 0 1
19144: PUSH
19145: LD_INT 122
19147: EQUAL
19148: IFFALSE 19154
// MC_ChangeApeClass ( ) ;
19150: CALL 32760 0 0
// if event = 123 then
19154: LD_VAR 0 1
19158: PUSH
19159: LD_INT 123
19161: EQUAL
19162: IFFALSE 19168
// MC_Bazooka ( ) ;
19164: CALL 33394 0 0
// if event = 124 then
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 124
19175: EQUAL
19176: IFFALSE 19182
// MC_TeleportExit ( ) ;
19178: CALL 33592 0 0
// if event = 125 then
19182: LD_VAR 0 1
19186: PUSH
19187: LD_INT 125
19189: EQUAL
19190: IFFALSE 19196
// MC_Deposits ( ) ;
19192: CALL 33634 0 0
// if event = 126 then
19196: LD_VAR 0 1
19200: PUSH
19201: LD_INT 126
19203: EQUAL
19204: IFFALSE 19210
// MC_RemoteDriver ( ) ;
19206: CALL 34259 0 0
// if event = 200 then
19210: LD_VAR 0 1
19214: PUSH
19215: LD_INT 200
19217: EQUAL
19218: IFFALSE 19224
// MC_Idle ( ) ;
19220: CALL 35830 0 0
// end ;
19224: PPOPN 1
19226: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
// if not mc_bases [ base ] or not tag then
19231: LD_EXP 49
19235: PUSH
19236: LD_VAR 0 1
19240: ARRAY
19241: NOT
19242: PUSH
19243: LD_VAR 0 2
19247: NOT
19248: OR
19249: IFFALSE 19253
// exit ;
19251: GO 19317
// for i in mc_bases [ base ] union mc_ape [ base ] do
19253: LD_ADDR_VAR 0 4
19257: PUSH
19258: LD_EXP 49
19262: PUSH
19263: LD_VAR 0 1
19267: ARRAY
19268: PUSH
19269: LD_EXP 78
19273: PUSH
19274: LD_VAR 0 1
19278: ARRAY
19279: UNION
19280: PUSH
19281: FOR_IN
19282: IFFALSE 19315
// if GetTag ( i ) = tag then
19284: LD_VAR 0 4
19288: PPUSH
19289: CALL_OW 110
19293: PUSH
19294: LD_VAR 0 2
19298: EQUAL
19299: IFFALSE 19313
// SetTag ( i , 0 ) ;
19301: LD_VAR 0 4
19305: PPUSH
19306: LD_INT 0
19308: PPUSH
19309: CALL_OW 109
19313: GO 19281
19315: POP
19316: POP
// end ;
19317: LD_VAR 0 3
19321: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19322: LD_INT 0
19324: PPUSH
19325: PPUSH
19326: PPUSH
19327: PPUSH
19328: PPUSH
19329: PPUSH
19330: PPUSH
19331: PPUSH
// if not mc_bases then
19332: LD_EXP 49
19336: NOT
19337: IFFALSE 19341
// exit ;
19339: GO 19799
// for i = 1 to mc_bases do
19341: LD_ADDR_VAR 0 2
19345: PUSH
19346: DOUBLE
19347: LD_INT 1
19349: DEC
19350: ST_TO_ADDR
19351: LD_EXP 49
19355: PUSH
19356: FOR_TO
19357: IFFALSE 19797
// begin tmp := MC_ClassCheckReq ( i ) ;
19359: LD_ADDR_VAR 0 4
19363: PUSH
19364: LD_VAR 0 2
19368: PPUSH
19369: CALL 19804 0 1
19373: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19374: LD_ADDR_EXP 89
19378: PUSH
19379: LD_EXP 89
19383: PPUSH
19384: LD_VAR 0 2
19388: PPUSH
19389: LD_VAR 0 4
19393: PPUSH
19394: CALL_OW 1
19398: ST_TO_ADDR
// if not tmp then
19399: LD_VAR 0 4
19403: NOT
19404: IFFALSE 19408
// continue ;
19406: GO 19356
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19408: LD_ADDR_VAR 0 6
19412: PUSH
19413: LD_EXP 49
19417: PUSH
19418: LD_VAR 0 2
19422: ARRAY
19423: PPUSH
19424: LD_INT 2
19426: PUSH
19427: LD_INT 30
19429: PUSH
19430: LD_INT 4
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 30
19439: PUSH
19440: LD_INT 5
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: LIST
19451: PPUSH
19452: CALL_OW 72
19456: PUSH
19457: LD_EXP 49
19461: PUSH
19462: LD_VAR 0 2
19466: ARRAY
19467: PPUSH
19468: LD_INT 2
19470: PUSH
19471: LD_INT 30
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 30
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: LIST
19495: PPUSH
19496: CALL_OW 72
19500: PUSH
19501: LD_EXP 49
19505: PUSH
19506: LD_VAR 0 2
19510: ARRAY
19511: PPUSH
19512: LD_INT 30
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PPUSH
19522: CALL_OW 72
19526: PUSH
19527: LD_EXP 49
19531: PUSH
19532: LD_VAR 0 2
19536: ARRAY
19537: PPUSH
19538: LD_INT 2
19540: PUSH
19541: LD_INT 30
19543: PUSH
19544: LD_INT 6
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 30
19553: PUSH
19554: LD_INT 7
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 30
19563: PUSH
19564: LD_INT 8
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 72
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: ST_TO_ADDR
// for j = 1 to 4 do
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: DOUBLE
19594: LD_INT 1
19596: DEC
19597: ST_TO_ADDR
19598: LD_INT 4
19600: PUSH
19601: FOR_TO
19602: IFFALSE 19793
// begin if not tmp [ j ] then
19604: LD_VAR 0 4
19608: PUSH
19609: LD_VAR 0 3
19613: ARRAY
19614: NOT
19615: IFFALSE 19619
// continue ;
19617: GO 19601
// for p in tmp [ j ] do
19619: LD_ADDR_VAR 0 5
19623: PUSH
19624: LD_VAR 0 4
19628: PUSH
19629: LD_VAR 0 3
19633: ARRAY
19634: PUSH
19635: FOR_IN
19636: IFFALSE 19789
// begin if not b [ j ] then
19638: LD_VAR 0 6
19642: PUSH
19643: LD_VAR 0 3
19647: ARRAY
19648: NOT
19649: IFFALSE 19653
// break ;
19651: GO 19789
// e := 0 ;
19653: LD_ADDR_VAR 0 7
19657: PUSH
19658: LD_INT 0
19660: ST_TO_ADDR
// for k in b [ j ] do
19661: LD_ADDR_VAR 0 8
19665: PUSH
19666: LD_VAR 0 6
19670: PUSH
19671: LD_VAR 0 3
19675: ARRAY
19676: PUSH
19677: FOR_IN
19678: IFFALSE 19705
// if IsNotFull ( k ) then
19680: LD_VAR 0 8
19684: PPUSH
19685: CALL 45963 0 1
19689: IFFALSE 19703
// begin e := k ;
19691: LD_ADDR_VAR 0 7
19695: PUSH
19696: LD_VAR 0 8
19700: ST_TO_ADDR
// break ;
19701: GO 19705
// end ;
19703: GO 19677
19705: POP
19706: POP
// if e and not UnitGoingToBuilding ( p , e ) then
19707: LD_VAR 0 7
19711: PUSH
19712: LD_VAR 0 5
19716: PPUSH
19717: LD_VAR 0 7
19721: PPUSH
19722: CALL 81181 0 2
19726: NOT
19727: AND
19728: IFFALSE 19787
// begin if IsInUnit ( p ) then
19730: LD_VAR 0 5
19734: PPUSH
19735: CALL_OW 310
19739: IFFALSE 19750
// ComExitBuilding ( p ) ;
19741: LD_VAR 0 5
19745: PPUSH
19746: CALL_OW 122
// ComEnterUnit ( p , e ) ;
19750: LD_VAR 0 5
19754: PPUSH
19755: LD_VAR 0 7
19759: PPUSH
19760: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
19764: LD_VAR 0 5
19768: PPUSH
19769: LD_VAR 0 3
19773: PPUSH
19774: CALL_OW 183
// AddComExitBuilding ( p ) ;
19778: LD_VAR 0 5
19782: PPUSH
19783: CALL_OW 182
// end ; end ;
19787: GO 19635
19789: POP
19790: POP
// end ;
19791: GO 19601
19793: POP
19794: POP
// end ;
19795: GO 19356
19797: POP
19798: POP
// end ;
19799: LD_VAR 0 1
19803: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
19804: LD_INT 0
19806: PPUSH
19807: PPUSH
19808: PPUSH
19809: PPUSH
19810: PPUSH
19811: PPUSH
19812: PPUSH
19813: PPUSH
19814: PPUSH
19815: PPUSH
19816: PPUSH
19817: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
19818: LD_VAR 0 1
19822: NOT
19823: PUSH
19824: LD_EXP 49
19828: PUSH
19829: LD_VAR 0 1
19833: ARRAY
19834: NOT
19835: OR
19836: PUSH
19837: LD_EXP 49
19841: PUSH
19842: LD_VAR 0 1
19846: ARRAY
19847: PPUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 30
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 30
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 72
19880: NOT
19881: OR
19882: IFFALSE 19886
// exit ;
19884: GO 22722
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
19886: LD_ADDR_VAR 0 4
19890: PUSH
19891: LD_EXP 49
19895: PUSH
19896: LD_VAR 0 1
19900: ARRAY
19901: PPUSH
19902: LD_INT 2
19904: PUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 25
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 25
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 25
19937: PUSH
19938: LD_INT 4
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 25
19947: PUSH
19948: LD_INT 5
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 25
19957: PUSH
19958: LD_INT 8
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 25
19967: PUSH
19968: LD_INT 9
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: PPUSH
19985: CALL_OW 72
19989: ST_TO_ADDR
// for i in tmp do
19990: LD_ADDR_VAR 0 3
19994: PUSH
19995: LD_VAR 0 4
19999: PUSH
20000: FOR_IN
20001: IFFALSE 20032
// if GetTag ( i ) then
20003: LD_VAR 0 3
20007: PPUSH
20008: CALL_OW 110
20012: IFFALSE 20030
// tmp := tmp diff i ;
20014: LD_ADDR_VAR 0 4
20018: PUSH
20019: LD_VAR 0 4
20023: PUSH
20024: LD_VAR 0 3
20028: DIFF
20029: ST_TO_ADDR
20030: GO 20000
20032: POP
20033: POP
// if not tmp then
20034: LD_VAR 0 4
20038: NOT
20039: IFFALSE 20043
// exit ;
20041: GO 22722
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20043: LD_ADDR_VAR 0 5
20047: PUSH
20048: LD_EXP 49
20052: PUSH
20053: LD_VAR 0 1
20057: ARRAY
20058: PPUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 25
20064: PUSH
20065: LD_INT 1
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: PUSH
20072: LD_INT 25
20074: PUSH
20075: LD_INT 5
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 25
20084: PUSH
20085: LD_INT 8
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 25
20094: PUSH
20095: LD_INT 9
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: PPUSH
20109: CALL_OW 72
20113: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20114: LD_ADDR_VAR 0 6
20118: PUSH
20119: LD_EXP 49
20123: PUSH
20124: LD_VAR 0 1
20128: ARRAY
20129: PPUSH
20130: LD_INT 25
20132: PUSH
20133: LD_INT 2
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 72
20144: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20145: LD_ADDR_VAR 0 7
20149: PUSH
20150: LD_EXP 49
20154: PUSH
20155: LD_VAR 0 1
20159: ARRAY
20160: PPUSH
20161: LD_INT 25
20163: PUSH
20164: LD_INT 3
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PPUSH
20171: CALL_OW 72
20175: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ f_class , 4 ] ) ;
20176: LD_ADDR_VAR 0 8
20180: PUSH
20181: LD_EXP 49
20185: PUSH
20186: LD_VAR 0 1
20190: ARRAY
20191: PPUSH
20192: LD_INT 25
20194: PUSH
20195: LD_INT 4
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 72
20206: ST_TO_ADDR
// if mc_scan [ base ] then
20207: LD_EXP 72
20211: PUSH
20212: LD_VAR 0 1
20216: ARRAY
20217: IFFALSE 20669
// begin if debug_mc then
20219: LD_EXP 48
20223: IFFALSE 20233
// debug_strings := case 4 ;
20225: LD_ADDR_OWVAR 48
20229: PUSH
20230: LD_STRING case 4
20232: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20233: LD_ADDR_VAR 0 12
20237: PUSH
20238: LD_EXP 49
20242: PUSH
20243: LD_VAR 0 1
20247: ARRAY
20248: PPUSH
20249: LD_INT 2
20251: PUSH
20252: LD_INT 30
20254: PUSH
20255: LD_INT 4
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: PUSH
20262: LD_INT 30
20264: PUSH
20265: LD_INT 5
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: PPUSH
20277: CALL_OW 72
20281: ST_TO_ADDR
// if not b then
20282: LD_VAR 0 12
20286: NOT
20287: IFFALSE 20291
// exit ;
20289: GO 22722
// p := [ ] ;
20291: LD_ADDR_VAR 0 11
20295: PUSH
20296: EMPTY
20297: ST_TO_ADDR
// if sci >= 2 then
20298: LD_VAR 0 8
20302: PUSH
20303: LD_INT 2
20305: GREATEREQUAL
20306: IFFALSE 20337
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20308: LD_ADDR_VAR 0 8
20312: PUSH
20313: LD_VAR 0 8
20317: PUSH
20318: LD_INT 1
20320: ARRAY
20321: PUSH
20322: LD_VAR 0 8
20326: PUSH
20327: LD_INT 2
20329: ARRAY
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: ST_TO_ADDR
20335: GO 20398
// if sci = 1 then
20337: LD_VAR 0 8
20341: PUSH
20342: LD_INT 1
20344: EQUAL
20345: IFFALSE 20366
// sci := [ sci [ 1 ] ] else
20347: LD_ADDR_VAR 0 8
20351: PUSH
20352: LD_VAR 0 8
20356: PUSH
20357: LD_INT 1
20359: ARRAY
20360: PUSH
20361: EMPTY
20362: LIST
20363: ST_TO_ADDR
20364: GO 20398
// if sci = 0 then
20366: LD_VAR 0 8
20370: PUSH
20371: LD_INT 0
20373: EQUAL
20374: IFFALSE 20398
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20376: LD_ADDR_VAR 0 11
20380: PUSH
20381: LD_VAR 0 4
20385: PPUSH
20386: LD_INT 4
20388: PPUSH
20389: CALL 81044 0 2
20393: PUSH
20394: LD_INT 1
20396: ARRAY
20397: ST_TO_ADDR
// if eng > 4 then
20398: LD_VAR 0 6
20402: PUSH
20403: LD_INT 4
20405: GREATER
20406: IFFALSE 20452
// for i = eng downto 4 do
20408: LD_ADDR_VAR 0 3
20412: PUSH
20413: DOUBLE
20414: LD_VAR 0 6
20418: INC
20419: ST_TO_ADDR
20420: LD_INT 4
20422: PUSH
20423: FOR_DOWNTO
20424: IFFALSE 20450
// eng := eng diff eng [ i ] ;
20426: LD_ADDR_VAR 0 6
20430: PUSH
20431: LD_VAR 0 6
20435: PUSH
20436: LD_VAR 0 6
20440: PUSH
20441: LD_VAR 0 3
20445: ARRAY
20446: DIFF
20447: ST_TO_ADDR
20448: GO 20423
20450: POP
20451: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
20452: LD_ADDR_VAR 0 4
20456: PUSH
20457: LD_VAR 0 4
20461: PUSH
20462: LD_VAR 0 5
20466: PUSH
20467: LD_VAR 0 6
20471: UNION
20472: PUSH
20473: LD_VAR 0 7
20477: UNION
20478: PUSH
20479: LD_VAR 0 8
20483: UNION
20484: DIFF
20485: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
20486: LD_ADDR_VAR 0 13
20490: PUSH
20491: LD_EXP 49
20495: PUSH
20496: LD_VAR 0 1
20500: ARRAY
20501: PPUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 30
20507: PUSH
20508: LD_INT 32
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 30
20517: PUSH
20518: LD_INT 31
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PPUSH
20530: CALL_OW 72
20534: PUSH
20535: LD_EXP 49
20539: PUSH
20540: LD_VAR 0 1
20544: ARRAY
20545: PPUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 30
20551: PUSH
20552: LD_INT 4
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 30
20561: PUSH
20562: LD_INT 5
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 72
20578: PUSH
20579: LD_INT 6
20581: MUL
20582: PLUS
20583: ST_TO_ADDR
// if bcount < tmp then
20584: LD_VAR 0 13
20588: PUSH
20589: LD_VAR 0 4
20593: LESS
20594: IFFALSE 20640
// for i = tmp downto bcount do
20596: LD_ADDR_VAR 0 3
20600: PUSH
20601: DOUBLE
20602: LD_VAR 0 4
20606: INC
20607: ST_TO_ADDR
20608: LD_VAR 0 13
20612: PUSH
20613: FOR_DOWNTO
20614: IFFALSE 20638
// tmp := Delete ( tmp , tmp ) ;
20616: LD_ADDR_VAR 0 4
20620: PUSH
20621: LD_VAR 0 4
20625: PPUSH
20626: LD_VAR 0 4
20630: PPUSH
20631: CALL_OW 3
20635: ST_TO_ADDR
20636: GO 20613
20638: POP
20639: POP
// result := [ tmp , 0 , 0 , p ] ;
20640: LD_ADDR_VAR 0 2
20644: PUSH
20645: LD_VAR 0 4
20649: PUSH
20650: LD_INT 0
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_VAR 0 11
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: ST_TO_ADDR
// exit ;
20667: GO 22722
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
20669: LD_EXP 49
20673: PUSH
20674: LD_VAR 0 1
20678: ARRAY
20679: PPUSH
20680: LD_INT 2
20682: PUSH
20683: LD_INT 30
20685: PUSH
20686: LD_INT 6
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 30
20695: PUSH
20696: LD_INT 7
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 30
20705: PUSH
20706: LD_INT 8
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: PPUSH
20719: CALL_OW 72
20723: NOT
20724: PUSH
20725: LD_EXP 49
20729: PUSH
20730: LD_VAR 0 1
20734: ARRAY
20735: PPUSH
20736: LD_INT 30
20738: PUSH
20739: LD_INT 3
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PPUSH
20746: CALL_OW 72
20750: NOT
20751: AND
20752: IFFALSE 20815
// begin if eng = tmp then
20754: LD_VAR 0 6
20758: PUSH
20759: LD_VAR 0 4
20763: EQUAL
20764: IFFALSE 20768
// exit ;
20766: GO 22722
// if debug_mc then
20768: LD_EXP 48
20772: IFFALSE 20782
// debug_strings := case 1 ;
20774: LD_ADDR_OWVAR 48
20778: PUSH
20779: LD_STRING case 1
20781: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
20782: LD_ADDR_VAR 0 2
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_VAR 0 4
20794: PUSH
20795: LD_VAR 0 6
20799: DIFF
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: LD_INT 0
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: ST_TO_ADDR
// exit ;
20813: GO 22722
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
20815: LD_EXP 76
20819: PUSH
20820: LD_EXP 75
20824: PUSH
20825: LD_VAR 0 1
20829: ARRAY
20830: ARRAY
20831: PUSH
20832: LD_EXP 49
20836: PUSH
20837: LD_VAR 0 1
20841: ARRAY
20842: PPUSH
20843: LD_INT 2
20845: PUSH
20846: LD_INT 30
20848: PUSH
20849: LD_INT 6
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 30
20858: PUSH
20859: LD_INT 7
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 30
20868: PUSH
20869: LD_INT 8
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PPUSH
20882: CALL_OW 72
20886: AND
20887: PUSH
20888: LD_EXP 49
20892: PUSH
20893: LD_VAR 0 1
20897: ARRAY
20898: PPUSH
20899: LD_INT 30
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PPUSH
20909: CALL_OW 72
20913: NOT
20914: AND
20915: IFFALSE 21120
// begin if sci >= 6 then
20917: LD_VAR 0 8
20921: PUSH
20922: LD_INT 6
20924: GREATEREQUAL
20925: IFFALSE 20929
// exit ;
20927: GO 22722
// if debug_mc then
20929: LD_EXP 48
20933: IFFALSE 20943
// debug_strings := case 2 ;
20935: LD_ADDR_OWVAR 48
20939: PUSH
20940: LD_STRING case 2
20942: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
20943: LD_ADDR_VAR 0 9
20947: PUSH
20948: LD_VAR 0 4
20952: PUSH
20953: LD_VAR 0 8
20957: DIFF
20958: PPUSH
20959: LD_INT 4
20961: PPUSH
20962: CALL 81044 0 2
20966: ST_TO_ADDR
// p := [ ] ;
20967: LD_ADDR_VAR 0 11
20971: PUSH
20972: EMPTY
20973: ST_TO_ADDR
// if sci < 6 and sort > 6 then
20974: LD_VAR 0 8
20978: PUSH
20979: LD_INT 6
20981: LESS
20982: PUSH
20983: LD_VAR 0 9
20987: PUSH
20988: LD_INT 6
20990: GREATER
20991: AND
20992: IFFALSE 21073
// begin for i = 1 to 6 - sci do
20994: LD_ADDR_VAR 0 3
20998: PUSH
20999: DOUBLE
21000: LD_INT 1
21002: DEC
21003: ST_TO_ADDR
21004: LD_INT 6
21006: PUSH
21007: LD_VAR 0 8
21011: MINUS
21012: PUSH
21013: FOR_TO
21014: IFFALSE 21069
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21016: LD_ADDR_VAR 0 11
21020: PUSH
21021: LD_VAR 0 11
21025: PPUSH
21026: LD_VAR 0 11
21030: PUSH
21031: LD_INT 1
21033: PLUS
21034: PPUSH
21035: LD_VAR 0 9
21039: PUSH
21040: LD_INT 1
21042: ARRAY
21043: PPUSH
21044: CALL_OW 2
21048: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21049: LD_ADDR_VAR 0 9
21053: PUSH
21054: LD_VAR 0 9
21058: PPUSH
21059: LD_INT 1
21061: PPUSH
21062: CALL_OW 3
21066: ST_TO_ADDR
// end ;
21067: GO 21013
21069: POP
21070: POP
// end else
21071: GO 21093
// if sort then
21073: LD_VAR 0 9
21077: IFFALSE 21093
// p := sort [ 1 ] ;
21079: LD_ADDR_VAR 0 11
21083: PUSH
21084: LD_VAR 0 9
21088: PUSH
21089: LD_INT 1
21091: ARRAY
21092: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21093: LD_ADDR_VAR 0 2
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: LD_INT 0
21106: PUSH
21107: LD_VAR 0 11
21111: PUSH
21112: EMPTY
21113: LIST
21114: LIST
21115: LIST
21116: LIST
21117: ST_TO_ADDR
// exit ;
21118: GO 22722
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21120: LD_EXP 76
21124: PUSH
21125: LD_EXP 75
21129: PUSH
21130: LD_VAR 0 1
21134: ARRAY
21135: ARRAY
21136: PUSH
21137: LD_EXP 49
21141: PUSH
21142: LD_VAR 0 1
21146: ARRAY
21147: PPUSH
21148: LD_INT 2
21150: PUSH
21151: LD_INT 30
21153: PUSH
21154: LD_INT 6
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: LD_INT 30
21163: PUSH
21164: LD_INT 7
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 30
21173: PUSH
21174: LD_INT 8
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: PPUSH
21187: CALL_OW 72
21191: AND
21192: PUSH
21193: LD_EXP 49
21197: PUSH
21198: LD_VAR 0 1
21202: ARRAY
21203: PPUSH
21204: LD_INT 30
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PPUSH
21214: CALL_OW 72
21218: AND
21219: IFFALSE 21696
// begin if debug_mc then
21221: LD_EXP 48
21225: IFFALSE 21235
// debug_strings := case 3 ;
21227: LD_ADDR_OWVAR 48
21231: PUSH
21232: LD_STRING case 3
21234: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21235: LD_ADDR_VAR 0 2
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: ST_TO_ADDR
// if not eng then
21258: LD_VAR 0 6
21262: NOT
21263: IFFALSE 21326
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21265: LD_ADDR_VAR 0 11
21269: PUSH
21270: LD_VAR 0 4
21274: PPUSH
21275: LD_INT 2
21277: PPUSH
21278: CALL 81044 0 2
21282: PUSH
21283: LD_INT 1
21285: ARRAY
21286: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21287: LD_ADDR_VAR 0 2
21291: PUSH
21292: LD_VAR 0 2
21296: PPUSH
21297: LD_INT 2
21299: PPUSH
21300: LD_VAR 0 11
21304: PPUSH
21305: CALL_OW 1
21309: ST_TO_ADDR
// tmp := tmp diff p ;
21310: LD_ADDR_VAR 0 4
21314: PUSH
21315: LD_VAR 0 4
21319: PUSH
21320: LD_VAR 0 11
21324: DIFF
21325: ST_TO_ADDR
// end ; tmp := tmp diff ( mech union sci ) ;
21326: LD_ADDR_VAR 0 4
21330: PUSH
21331: LD_VAR 0 4
21335: PUSH
21336: LD_VAR 0 7
21340: PUSH
21341: LD_VAR 0 8
21345: UNION
21346: DIFF
21347: ST_TO_ADDR
// if tmp and sci < 6 then
21348: LD_VAR 0 4
21352: PUSH
21353: LD_VAR 0 8
21357: PUSH
21358: LD_INT 6
21360: LESS
21361: AND
21362: IFFALSE 21521
// begin sort := SortBySkill ( tmp , 4 ) ;
21364: LD_ADDR_VAR 0 9
21368: PUSH
21369: LD_VAR 0 4
21373: PPUSH
21374: LD_INT 4
21376: PPUSH
21377: CALL 81044 0 2
21381: ST_TO_ADDR
// p := [ ] ;
21382: LD_ADDR_VAR 0 11
21386: PUSH
21387: EMPTY
21388: ST_TO_ADDR
// if sort then
21389: LD_VAR 0 9
21393: IFFALSE 21492
// for i = 1 to 6 - sci do
21395: LD_ADDR_VAR 0 3
21399: PUSH
21400: DOUBLE
21401: LD_INT 1
21403: DEC
21404: ST_TO_ADDR
21405: LD_INT 6
21407: PUSH
21408: LD_VAR 0 8
21412: MINUS
21413: PUSH
21414: FOR_TO
21415: IFFALSE 21490
// begin if i = sort then
21417: LD_VAR 0 3
21421: PUSH
21422: LD_VAR 0 9
21426: EQUAL
21427: IFFALSE 21431
// break ;
21429: GO 21490
// p := Insert ( p , p + 1 , sort [ i ] ) ;
21431: LD_ADDR_VAR 0 11
21435: PUSH
21436: LD_VAR 0 11
21440: PPUSH
21441: LD_VAR 0 11
21445: PUSH
21446: LD_INT 1
21448: PLUS
21449: PPUSH
21450: LD_VAR 0 9
21454: PUSH
21455: LD_VAR 0 3
21459: ARRAY
21460: PPUSH
21461: CALL_OW 2
21465: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
21466: LD_ADDR_VAR 0 4
21470: PUSH
21471: LD_VAR 0 4
21475: PUSH
21476: LD_VAR 0 9
21480: PUSH
21481: LD_VAR 0 3
21485: ARRAY
21486: DIFF
21487: ST_TO_ADDR
// end ;
21488: GO 21414
21490: POP
21491: POP
// if p then
21492: LD_VAR 0 11
21496: IFFALSE 21521
// result := Replace ( result , 4 , p ) ;
21498: LD_ADDR_VAR 0 2
21502: PUSH
21503: LD_VAR 0 2
21507: PPUSH
21508: LD_INT 4
21510: PPUSH
21511: LD_VAR 0 11
21515: PPUSH
21516: CALL_OW 1
21520: ST_TO_ADDR
// end ; if tmp and mech < 6 then
21521: LD_VAR 0 4
21525: PUSH
21526: LD_VAR 0 7
21530: PUSH
21531: LD_INT 6
21533: LESS
21534: AND
21535: IFFALSE 21694
// begin sort := SortBySkill ( tmp , 3 ) ;
21537: LD_ADDR_VAR 0 9
21541: PUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: LD_INT 3
21549: PPUSH
21550: CALL 81044 0 2
21554: ST_TO_ADDR
// p := [ ] ;
21555: LD_ADDR_VAR 0 11
21559: PUSH
21560: EMPTY
21561: ST_TO_ADDR
// if sort then
21562: LD_VAR 0 9
21566: IFFALSE 21665
// for i = 1 to 6 - mech do
21568: LD_ADDR_VAR 0 3
21572: PUSH
21573: DOUBLE
21574: LD_INT 1
21576: DEC
21577: ST_TO_ADDR
21578: LD_INT 6
21580: PUSH
21581: LD_VAR 0 7
21585: MINUS
21586: PUSH
21587: FOR_TO
21588: IFFALSE 21663
// begin if i = sort then
21590: LD_VAR 0 3
21594: PUSH
21595: LD_VAR 0 9
21599: EQUAL
21600: IFFALSE 21604
// break ;
21602: GO 21663
// p := Insert ( p , p + 1 , sort [ i ] ) ;
21604: LD_ADDR_VAR 0 11
21608: PUSH
21609: LD_VAR 0 11
21613: PPUSH
21614: LD_VAR 0 11
21618: PUSH
21619: LD_INT 1
21621: PLUS
21622: PPUSH
21623: LD_VAR 0 9
21627: PUSH
21628: LD_VAR 0 3
21632: ARRAY
21633: PPUSH
21634: CALL_OW 2
21638: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
21639: LD_ADDR_VAR 0 4
21643: PUSH
21644: LD_VAR 0 4
21648: PUSH
21649: LD_VAR 0 9
21653: PUSH
21654: LD_VAR 0 3
21658: ARRAY
21659: DIFF
21660: ST_TO_ADDR
// end ;
21661: GO 21587
21663: POP
21664: POP
// if p then
21665: LD_VAR 0 11
21669: IFFALSE 21694
// result := Replace ( result , 3 , p ) ;
21671: LD_ADDR_VAR 0 2
21675: PUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: LD_INT 3
21683: PPUSH
21684: LD_VAR 0 11
21688: PPUSH
21689: CALL_OW 1
21693: ST_TO_ADDR
// end ; exit ;
21694: GO 22722
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
21696: LD_EXP 76
21700: PUSH
21701: LD_EXP 75
21705: PUSH
21706: LD_VAR 0 1
21710: ARRAY
21711: ARRAY
21712: NOT
21713: PUSH
21714: LD_EXP 49
21718: PUSH
21719: LD_VAR 0 1
21723: ARRAY
21724: PPUSH
21725: LD_INT 30
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PPUSH
21735: CALL_OW 72
21739: AND
21740: PUSH
21741: LD_EXP 54
21745: PUSH
21746: LD_VAR 0 1
21750: ARRAY
21751: AND
21752: IFFALSE 22171
// begin if debug_mc then
21754: LD_EXP 48
21758: IFFALSE 21768
// debug_strings := case 5 ;
21760: LD_ADDR_OWVAR 48
21764: PUSH
21765: LD_STRING case 5
21767: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21768: LD_ADDR_VAR 0 2
21772: PUSH
21773: LD_INT 0
21775: PUSH
21776: LD_INT 0
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: ST_TO_ADDR
// tmp := tmp diff mech ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_VAR 0 4
21800: PUSH
21801: LD_VAR 0 7
21805: DIFF
21806: ST_TO_ADDR
// if tmp and mech < 6 then
21807: LD_VAR 0 4
21811: PUSH
21812: LD_VAR 0 7
21816: PUSH
21817: LD_INT 6
21819: LESS
21820: AND
21821: IFFALSE 21980
// begin sort := SortBySkill ( tmp , 3 ) ;
21823: LD_ADDR_VAR 0 9
21827: PUSH
21828: LD_VAR 0 4
21832: PPUSH
21833: LD_INT 3
21835: PPUSH
21836: CALL 81044 0 2
21840: ST_TO_ADDR
// p := [ ] ;
21841: LD_ADDR_VAR 0 11
21845: PUSH
21846: EMPTY
21847: ST_TO_ADDR
// if sort then
21848: LD_VAR 0 9
21852: IFFALSE 21951
// for i = 1 to 6 - mech do
21854: LD_ADDR_VAR 0 3
21858: PUSH
21859: DOUBLE
21860: LD_INT 1
21862: DEC
21863: ST_TO_ADDR
21864: LD_INT 6
21866: PUSH
21867: LD_VAR 0 7
21871: MINUS
21872: PUSH
21873: FOR_TO
21874: IFFALSE 21949
// begin if i = sort then
21876: LD_VAR 0 3
21880: PUSH
21881: LD_VAR 0 9
21885: EQUAL
21886: IFFALSE 21890
// break ;
21888: GO 21949
// p := Insert ( p , p + 1 , sort [ i ] ) ;
21890: LD_ADDR_VAR 0 11
21894: PUSH
21895: LD_VAR 0 11
21899: PPUSH
21900: LD_VAR 0 11
21904: PUSH
21905: LD_INT 1
21907: PLUS
21908: PPUSH
21909: LD_VAR 0 9
21913: PUSH
21914: LD_VAR 0 3
21918: ARRAY
21919: PPUSH
21920: CALL_OW 2
21924: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
21925: LD_ADDR_VAR 0 4
21929: PUSH
21930: LD_VAR 0 4
21934: PUSH
21935: LD_VAR 0 9
21939: PUSH
21940: LD_VAR 0 3
21944: ARRAY
21945: DIFF
21946: ST_TO_ADDR
// end ;
21947: GO 21873
21949: POP
21950: POP
// if p then
21951: LD_VAR 0 11
21955: IFFALSE 21980
// result := Replace ( result , 3 , p ) ;
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: LD_INT 3
21969: PPUSH
21970: LD_VAR 0 11
21974: PPUSH
21975: CALL_OW 1
21979: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
21980: LD_ADDR_VAR 0 4
21984: PUSH
21985: LD_VAR 0 4
21989: PUSH
21990: LD_VAR 0 6
21994: DIFF
21995: ST_TO_ADDR
// if tmp and eng < 6 then
21996: LD_VAR 0 4
22000: PUSH
22001: LD_VAR 0 6
22005: PUSH
22006: LD_INT 6
22008: LESS
22009: AND
22010: IFFALSE 22169
// begin sort := SortBySkill ( tmp , 2 ) ;
22012: LD_ADDR_VAR 0 9
22016: PUSH
22017: LD_VAR 0 4
22021: PPUSH
22022: LD_INT 2
22024: PPUSH
22025: CALL 81044 0 2
22029: ST_TO_ADDR
// p := [ ] ;
22030: LD_ADDR_VAR 0 11
22034: PUSH
22035: EMPTY
22036: ST_TO_ADDR
// if sort then
22037: LD_VAR 0 9
22041: IFFALSE 22140
// for i = 1 to 6 - eng do
22043: LD_ADDR_VAR 0 3
22047: PUSH
22048: DOUBLE
22049: LD_INT 1
22051: DEC
22052: ST_TO_ADDR
22053: LD_INT 6
22055: PUSH
22056: LD_VAR 0 6
22060: MINUS
22061: PUSH
22062: FOR_TO
22063: IFFALSE 22138
// begin if i = sort then
22065: LD_VAR 0 3
22069: PUSH
22070: LD_VAR 0 9
22074: EQUAL
22075: IFFALSE 22079
// break ;
22077: GO 22138
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22079: LD_ADDR_VAR 0 11
22083: PUSH
22084: LD_VAR 0 11
22088: PPUSH
22089: LD_VAR 0 11
22093: PUSH
22094: LD_INT 1
22096: PLUS
22097: PPUSH
22098: LD_VAR 0 9
22102: PUSH
22103: LD_VAR 0 3
22107: ARRAY
22108: PPUSH
22109: CALL_OW 2
22113: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22114: LD_ADDR_VAR 0 4
22118: PUSH
22119: LD_VAR 0 4
22123: PUSH
22124: LD_VAR 0 9
22128: PUSH
22129: LD_VAR 0 3
22133: ARRAY
22134: DIFF
22135: ST_TO_ADDR
// end ;
22136: GO 22062
22138: POP
22139: POP
// if p then
22140: LD_VAR 0 11
22144: IFFALSE 22169
// result := Replace ( result , 2 , p ) ;
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: LD_VAR 0 11
22163: PPUSH
22164: CALL_OW 1
22168: ST_TO_ADDR
// end ; exit ;
22169: GO 22722
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
22171: LD_EXP 76
22175: PUSH
22176: LD_EXP 75
22180: PUSH
22181: LD_VAR 0 1
22185: ARRAY
22186: ARRAY
22187: NOT
22188: PUSH
22189: LD_EXP 49
22193: PUSH
22194: LD_VAR 0 1
22198: ARRAY
22199: PPUSH
22200: LD_INT 30
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 72
22214: AND
22215: PUSH
22216: LD_EXP 54
22220: PUSH
22221: LD_VAR 0 1
22225: ARRAY
22226: NOT
22227: AND
22228: IFFALSE 22722
// begin if debug_mc then
22230: LD_EXP 48
22234: IFFALSE 22244
// debug_strings := case 6 ;
22236: LD_ADDR_OWVAR 48
22240: PUSH
22241: LD_STRING case 6
22243: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22244: LD_ADDR_VAR 0 2
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 0
22254: PUSH
22255: LD_INT 0
22257: PUSH
22258: LD_INT 0
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: ST_TO_ADDR
// tmp := tmp diff mech ;
22267: LD_ADDR_VAR 0 4
22271: PUSH
22272: LD_VAR 0 4
22276: PUSH
22277: LD_VAR 0 7
22281: DIFF
22282: ST_TO_ADDR
// if tmp and mech < 6 then
22283: LD_VAR 0 4
22287: PUSH
22288: LD_VAR 0 7
22292: PUSH
22293: LD_INT 6
22295: LESS
22296: AND
22297: IFFALSE 22456
// begin sort := SortBySkill ( tmp , 3 ) ;
22299: LD_ADDR_VAR 0 9
22303: PUSH
22304: LD_VAR 0 4
22308: PPUSH
22309: LD_INT 3
22311: PPUSH
22312: CALL 81044 0 2
22316: ST_TO_ADDR
// p := [ ] ;
22317: LD_ADDR_VAR 0 11
22321: PUSH
22322: EMPTY
22323: ST_TO_ADDR
// if sort then
22324: LD_VAR 0 9
22328: IFFALSE 22427
// for i = 1 to 6 - mech do
22330: LD_ADDR_VAR 0 3
22334: PUSH
22335: DOUBLE
22336: LD_INT 1
22338: DEC
22339: ST_TO_ADDR
22340: LD_INT 6
22342: PUSH
22343: LD_VAR 0 7
22347: MINUS
22348: PUSH
22349: FOR_TO
22350: IFFALSE 22425
// begin if i = sort then
22352: LD_VAR 0 3
22356: PUSH
22357: LD_VAR 0 9
22361: EQUAL
22362: IFFALSE 22366
// break ;
22364: GO 22425
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22366: LD_ADDR_VAR 0 11
22370: PUSH
22371: LD_VAR 0 11
22375: PPUSH
22376: LD_VAR 0 11
22380: PUSH
22381: LD_INT 1
22383: PLUS
22384: PPUSH
22385: LD_VAR 0 9
22389: PUSH
22390: LD_VAR 0 3
22394: ARRAY
22395: PPUSH
22396: CALL_OW 2
22400: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22401: LD_ADDR_VAR 0 4
22405: PUSH
22406: LD_VAR 0 4
22410: PUSH
22411: LD_VAR 0 9
22415: PUSH
22416: LD_VAR 0 3
22420: ARRAY
22421: DIFF
22422: ST_TO_ADDR
// end ;
22423: GO 22349
22425: POP
22426: POP
// if p then
22427: LD_VAR 0 11
22431: IFFALSE 22456
// result := Replace ( result , 3 , p ) ;
22433: LD_ADDR_VAR 0 2
22437: PUSH
22438: LD_VAR 0 2
22442: PPUSH
22443: LD_INT 3
22445: PPUSH
22446: LD_VAR 0 11
22450: PPUSH
22451: CALL_OW 1
22455: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
22456: LD_ADDR_VAR 0 4
22460: PUSH
22461: LD_VAR 0 4
22465: PUSH
22466: LD_VAR 0 6
22470: DIFF
22471: ST_TO_ADDR
// if tmp and eng < 4 then
22472: LD_VAR 0 4
22476: PUSH
22477: LD_VAR 0 6
22481: PUSH
22482: LD_INT 4
22484: LESS
22485: AND
22486: IFFALSE 22647
// begin sort := SortBySkill ( tmp , 2 ) ;
22488: LD_ADDR_VAR 0 9
22492: PUSH
22493: LD_VAR 0 4
22497: PPUSH
22498: LD_INT 2
22500: PPUSH
22501: CALL 81044 0 2
22505: ST_TO_ADDR
// p := [ ] ;
22506: LD_ADDR_VAR 0 11
22510: PUSH
22511: EMPTY
22512: ST_TO_ADDR
// if sort then
22513: LD_VAR 0 9
22517: IFFALSE 22616
// for i = 1 to 4 - eng do
22519: LD_ADDR_VAR 0 3
22523: PUSH
22524: DOUBLE
22525: LD_INT 1
22527: DEC
22528: ST_TO_ADDR
22529: LD_INT 4
22531: PUSH
22532: LD_VAR 0 6
22536: MINUS
22537: PUSH
22538: FOR_TO
22539: IFFALSE 22614
// begin if i = sort then
22541: LD_VAR 0 3
22545: PUSH
22546: LD_VAR 0 9
22550: EQUAL
22551: IFFALSE 22555
// break ;
22553: GO 22614
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22555: LD_ADDR_VAR 0 11
22559: PUSH
22560: LD_VAR 0 11
22564: PPUSH
22565: LD_VAR 0 11
22569: PUSH
22570: LD_INT 1
22572: PLUS
22573: PPUSH
22574: LD_VAR 0 9
22578: PUSH
22579: LD_VAR 0 3
22583: ARRAY
22584: PPUSH
22585: CALL_OW 2
22589: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22590: LD_ADDR_VAR 0 4
22594: PUSH
22595: LD_VAR 0 4
22599: PUSH
22600: LD_VAR 0 9
22604: PUSH
22605: LD_VAR 0 3
22609: ARRAY
22610: DIFF
22611: ST_TO_ADDR
// end ;
22612: GO 22538
22614: POP
22615: POP
// if p then
22616: LD_VAR 0 11
22620: IFFALSE 22645
// result := Replace ( result , 2 , p ) ;
22622: LD_ADDR_VAR 0 2
22626: PUSH
22627: LD_VAR 0 2
22631: PPUSH
22632: LD_INT 2
22634: PPUSH
22635: LD_VAR 0 11
22639: PPUSH
22640: CALL_OW 1
22644: ST_TO_ADDR
// end else
22645: GO 22691
// for i = eng downto 5 do
22647: LD_ADDR_VAR 0 3
22651: PUSH
22652: DOUBLE
22653: LD_VAR 0 6
22657: INC
22658: ST_TO_ADDR
22659: LD_INT 5
22661: PUSH
22662: FOR_DOWNTO
22663: IFFALSE 22689
// tmp := tmp union eng [ i ] ;
22665: LD_ADDR_VAR 0 4
22669: PUSH
22670: LD_VAR 0 4
22674: PUSH
22675: LD_VAR 0 6
22679: PUSH
22680: LD_VAR 0 3
22684: ARRAY
22685: UNION
22686: ST_TO_ADDR
22687: GO 22662
22689: POP
22690: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: LD_VAR 0 2
22700: PPUSH
22701: LD_INT 1
22703: PPUSH
22704: LD_VAR 0 4
22708: PUSH
22709: LD_VAR 0 5
22713: DIFF
22714: PPUSH
22715: CALL_OW 1
22719: ST_TO_ADDR
// exit ;
22720: GO 22722
// end ; end ;
22722: LD_VAR 0 2
22726: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
// if not mc_bases then
22732: LD_EXP 49
22736: NOT
22737: IFFALSE 22741
// exit ;
22739: GO 22847
// for i = 1 to mc_bases do
22741: LD_ADDR_VAR 0 2
22745: PUSH
22746: DOUBLE
22747: LD_INT 1
22749: DEC
22750: ST_TO_ADDR
22751: LD_EXP 49
22755: PUSH
22756: FOR_TO
22757: IFFALSE 22838
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
22759: LD_ADDR_VAR 0 3
22763: PUSH
22764: LD_EXP 49
22768: PUSH
22769: LD_VAR 0 2
22773: ARRAY
22774: PPUSH
22775: LD_INT 21
22777: PUSH
22778: LD_INT 3
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 24
22790: PUSH
22791: LD_INT 1000
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PPUSH
22806: CALL_OW 72
22810: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
22811: LD_ADDR_EXP 50
22815: PUSH
22816: LD_EXP 50
22820: PPUSH
22821: LD_VAR 0 2
22825: PPUSH
22826: LD_VAR 0 3
22830: PPUSH
22831: CALL_OW 1
22835: ST_TO_ADDR
// end ;
22836: GO 22756
22838: POP
22839: POP
// RaiseSailEvent ( 101 ) ;
22840: LD_INT 101
22842: PPUSH
22843: CALL_OW 427
// end ;
22847: LD_VAR 0 1
22851: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
22852: LD_INT 0
22854: PPUSH
22855: PPUSH
22856: PPUSH
22857: PPUSH
22858: PPUSH
22859: PPUSH
22860: PPUSH
// if not mc_bases then
22861: LD_EXP 49
22865: NOT
22866: IFFALSE 22870
// exit ;
22868: GO 23405
// for i = 1 to mc_bases do
22870: LD_ADDR_VAR 0 2
22874: PUSH
22875: DOUBLE
22876: LD_INT 1
22878: DEC
22879: ST_TO_ADDR
22880: LD_EXP 49
22884: PUSH
22885: FOR_TO
22886: IFFALSE 23396
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
22888: LD_ADDR_VAR 0 5
22892: PUSH
22893: LD_EXP 49
22897: PUSH
22898: LD_VAR 0 2
22902: ARRAY
22903: PUSH
22904: LD_EXP 78
22908: PUSH
22909: LD_VAR 0 2
22913: ARRAY
22914: UNION
22915: PPUSH
22916: LD_INT 21
22918: PUSH
22919: LD_INT 1
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 3
22931: PUSH
22932: LD_INT 54
22934: PUSH
22935: EMPTY
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 24
22947: PUSH
22948: LD_INT 700
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 72
22972: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
22973: LD_ADDR_VAR 0 6
22977: PUSH
22978: LD_EXP 49
22982: PUSH
22983: LD_VAR 0 2
22987: ARRAY
22988: PPUSH
22989: LD_INT 21
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: LD_INT 54
23007: PUSH
23008: EMPTY
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 3
23017: PUSH
23018: LD_INT 24
23020: PUSH
23021: LD_INT 250
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PPUSH
23041: CALL_OW 72
23045: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
23046: LD_ADDR_VAR 0 7
23050: PUSH
23051: LD_VAR 0 5
23055: PUSH
23056: LD_VAR 0 6
23060: DIFF
23061: ST_TO_ADDR
// if not need_heal_1 then
23062: LD_VAR 0 6
23066: NOT
23067: IFFALSE 23100
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
23069: LD_ADDR_EXP 52
23073: PUSH
23074: LD_EXP 52
23078: PPUSH
23079: LD_VAR 0 2
23083: PUSH
23084: LD_INT 1
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PPUSH
23091: EMPTY
23092: PPUSH
23093: CALL 49064 0 3
23097: ST_TO_ADDR
23098: GO 23132
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
23100: LD_ADDR_EXP 52
23104: PUSH
23105: LD_EXP 52
23109: PPUSH
23110: LD_VAR 0 2
23114: PUSH
23115: LD_INT 1
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PPUSH
23122: LD_VAR 0 6
23126: PPUSH
23127: CALL 49064 0 3
23131: ST_TO_ADDR
// if not need_heal_2 then
23132: LD_VAR 0 7
23136: NOT
23137: IFFALSE 23170
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
23139: LD_ADDR_EXP 52
23143: PUSH
23144: LD_EXP 52
23148: PPUSH
23149: LD_VAR 0 2
23153: PUSH
23154: LD_INT 2
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PPUSH
23161: EMPTY
23162: PPUSH
23163: CALL 49064 0 3
23167: ST_TO_ADDR
23168: GO 23202
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
23170: LD_ADDR_EXP 52
23174: PUSH
23175: LD_EXP 52
23179: PPUSH
23180: LD_VAR 0 2
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PPUSH
23192: LD_VAR 0 7
23196: PPUSH
23197: CALL 49064 0 3
23201: ST_TO_ADDR
// if need_heal_2 then
23202: LD_VAR 0 7
23206: IFFALSE 23378
// for j in need_heal_2 do
23208: LD_ADDR_VAR 0 3
23212: PUSH
23213: LD_VAR 0 7
23217: PUSH
23218: FOR_IN
23219: IFFALSE 23376
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
23221: LD_ADDR_VAR 0 5
23225: PUSH
23226: LD_EXP 49
23230: PUSH
23231: LD_VAR 0 2
23235: ARRAY
23236: PPUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 6
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 7
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: LD_INT 8
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 30
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 30
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 25
23292: PUSH
23293: LD_INT 4
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: PPUSH
23309: CALL_OW 72
23313: ST_TO_ADDR
// if tmp then
23314: LD_VAR 0 5
23318: IFFALSE 23374
// begin k := NearestUnitToUnit ( tmp , j ) ;
23320: LD_ADDR_VAR 0 4
23324: PUSH
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 3
23334: PPUSH
23335: CALL_OW 74
23339: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
23340: LD_VAR 0 3
23344: PPUSH
23345: LD_VAR 0 4
23349: PPUSH
23350: CALL_OW 296
23354: PUSH
23355: LD_INT 7
23357: GREATER
23358: IFFALSE 23374
// ComMoveUnit ( j , k ) ;
23360: LD_VAR 0 3
23364: PPUSH
23365: LD_VAR 0 4
23369: PPUSH
23370: CALL_OW 112
// end ; end ;
23374: GO 23218
23376: POP
23377: POP
// if not need_heal_1 and not need_heal_2 then
23378: LD_VAR 0 6
23382: NOT
23383: PUSH
23384: LD_VAR 0 7
23388: NOT
23389: AND
23390: IFFALSE 23394
// continue ;
23392: GO 22885
// end ;
23394: GO 22885
23396: POP
23397: POP
// RaiseSailEvent ( 102 ) ;
23398: LD_INT 102
23400: PPUSH
23401: CALL_OW 427
// end ;
23405: LD_VAR 0 1
23409: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
// if not mc_bases then
23417: LD_EXP 49
23421: NOT
23422: IFFALSE 23426
// exit ;
23424: GO 23811
// for i = 1 to mc_bases do
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: DOUBLE
23432: LD_INT 1
23434: DEC
23435: ST_TO_ADDR
23436: LD_EXP 49
23440: PUSH
23441: FOR_TO
23442: IFFALSE 23809
// begin if not mc_building_need_repair [ i ] then
23444: LD_EXP 50
23448: PUSH
23449: LD_VAR 0 2
23453: ARRAY
23454: NOT
23455: IFFALSE 23493
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
23457: LD_ADDR_EXP 51
23461: PUSH
23462: LD_EXP 51
23466: PPUSH
23467: LD_VAR 0 2
23471: PPUSH
23472: EMPTY
23473: PPUSH
23474: CALL_OW 1
23478: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
23479: LD_VAR 0 2
23483: PPUSH
23484: LD_INT 101
23486: PPUSH
23487: CALL 19227 0 2
// continue ;
23491: GO 23441
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
23493: LD_ADDR_EXP 55
23497: PUSH
23498: LD_EXP 55
23502: PPUSH
23503: LD_VAR 0 2
23507: PPUSH
23508: EMPTY
23509: PPUSH
23510: CALL_OW 1
23514: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
23515: LD_VAR 0 2
23519: PPUSH
23520: LD_INT 103
23522: PPUSH
23523: CALL 19227 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
23527: LD_ADDR_VAR 0 5
23531: PUSH
23532: LD_EXP 49
23536: PUSH
23537: LD_VAR 0 2
23541: ARRAY
23542: PUSH
23543: LD_EXP 78
23547: PUSH
23548: LD_VAR 0 2
23552: ARRAY
23553: UNION
23554: PPUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 25
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 25
23570: PUSH
23571: LD_INT 16
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: PPUSH
23586: CALL_OW 72
23590: ST_TO_ADDR
// if not tmp then
23591: LD_VAR 0 5
23595: NOT
23596: IFFALSE 23600
// continue ;
23598: GO 23441
// for j in tmp do
23600: LD_ADDR_VAR 0 3
23604: PUSH
23605: LD_VAR 0 5
23609: PUSH
23610: FOR_IN
23611: IFFALSE 23805
// begin if mc_need_heal [ i ] then
23613: LD_EXP 52
23617: PUSH
23618: LD_VAR 0 2
23622: ARRAY
23623: IFFALSE 23671
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
23625: LD_VAR 0 3
23629: PUSH
23630: LD_EXP 52
23634: PUSH
23635: LD_VAR 0 2
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: IN
23645: PUSH
23646: LD_VAR 0 3
23650: PUSH
23651: LD_EXP 52
23655: PUSH
23656: LD_VAR 0 2
23660: ARRAY
23661: PUSH
23662: LD_INT 2
23664: ARRAY
23665: IN
23666: OR
23667: IFFALSE 23671
// continue ;
23669: GO 23610
// if IsInUnit ( j ) then
23671: LD_VAR 0 3
23675: PPUSH
23676: CALL_OW 310
23680: IFFALSE 23691
// ComExitBuilding ( j ) ;
23682: LD_VAR 0 3
23686: PPUSH
23687: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
23691: LD_VAR 0 3
23695: PUSH
23696: LD_EXP 51
23700: PUSH
23701: LD_VAR 0 2
23705: ARRAY
23706: IN
23707: NOT
23708: IFFALSE 23766
// begin SetTag ( j , 101 ) ;
23710: LD_VAR 0 3
23714: PPUSH
23715: LD_INT 101
23717: PPUSH
23718: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
23722: LD_ADDR_EXP 51
23726: PUSH
23727: LD_EXP 51
23731: PPUSH
23732: LD_VAR 0 2
23736: PUSH
23737: LD_EXP 51
23741: PUSH
23742: LD_VAR 0 2
23746: ARRAY
23747: PUSH
23748: LD_INT 1
23750: PLUS
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PPUSH
23756: LD_VAR 0 3
23760: PPUSH
23761: CALL 49064 0 3
23765: ST_TO_ADDR
// end ; Wait ( 3 ) ;
23766: LD_INT 3
23768: PPUSH
23769: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
23773: LD_VAR 0 3
23777: PPUSH
23778: LD_EXP 50
23782: PUSH
23783: LD_VAR 0 2
23787: ARRAY
23788: PPUSH
23789: LD_VAR 0 3
23793: PPUSH
23794: CALL_OW 74
23798: PPUSH
23799: CALL_OW 130
// end ;
23803: GO 23610
23805: POP
23806: POP
// end ;
23807: GO 23441
23809: POP
23810: POP
// end ;
23811: LD_VAR 0 1
23815: RET
// export function MC_Heal ; var i , j , tmp ; begin
23816: LD_INT 0
23818: PPUSH
23819: PPUSH
23820: PPUSH
23821: PPUSH
// if not mc_bases then
23822: LD_EXP 49
23826: NOT
23827: IFFALSE 23831
// exit ;
23829: GO 24233
// for i = 1 to mc_bases do
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: DOUBLE
23837: LD_INT 1
23839: DEC
23840: ST_TO_ADDR
23841: LD_EXP 49
23845: PUSH
23846: FOR_TO
23847: IFFALSE 24231
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
23849: LD_EXP 52
23853: PUSH
23854: LD_VAR 0 2
23858: ARRAY
23859: PUSH
23860: LD_INT 1
23862: ARRAY
23863: NOT
23864: PUSH
23865: LD_EXP 52
23869: PUSH
23870: LD_VAR 0 2
23874: ARRAY
23875: PUSH
23876: LD_INT 2
23878: ARRAY
23879: NOT
23880: AND
23881: IFFALSE 23919
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
23883: LD_ADDR_EXP 53
23887: PUSH
23888: LD_EXP 53
23892: PPUSH
23893: LD_VAR 0 2
23897: PPUSH
23898: EMPTY
23899: PPUSH
23900: CALL_OW 1
23904: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
23905: LD_VAR 0 2
23909: PPUSH
23910: LD_INT 102
23912: PPUSH
23913: CALL 19227 0 2
// continue ;
23917: GO 23846
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
23919: LD_ADDR_VAR 0 4
23923: PUSH
23924: LD_EXP 49
23928: PUSH
23929: LD_VAR 0 2
23933: ARRAY
23934: PPUSH
23935: LD_INT 25
23937: PUSH
23938: LD_INT 4
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PPUSH
23945: CALL_OW 72
23949: ST_TO_ADDR
// if not tmp then
23950: LD_VAR 0 4
23954: NOT
23955: IFFALSE 23959
// continue ;
23957: GO 23846
// if mc_taming [ i ] then
23959: LD_EXP 80
23963: PUSH
23964: LD_VAR 0 2
23968: ARRAY
23969: IFFALSE 23993
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
23971: LD_ADDR_EXP 80
23975: PUSH
23976: LD_EXP 80
23980: PPUSH
23981: LD_VAR 0 2
23985: PPUSH
23986: EMPTY
23987: PPUSH
23988: CALL_OW 1
23992: ST_TO_ADDR
// for j in tmp do
23993: LD_ADDR_VAR 0 3
23997: PUSH
23998: LD_VAR 0 4
24002: PUSH
24003: FOR_IN
24004: IFFALSE 24227
// begin if IsInUnit ( j ) then
24006: LD_VAR 0 3
24010: PPUSH
24011: CALL_OW 310
24015: IFFALSE 24026
// ComExitBuilding ( j ) ;
24017: LD_VAR 0 3
24021: PPUSH
24022: CALL_OW 122
// if not j in mc_healers [ i ] then
24026: LD_VAR 0 3
24030: PUSH
24031: LD_EXP 53
24035: PUSH
24036: LD_VAR 0 2
24040: ARRAY
24041: IN
24042: NOT
24043: IFFALSE 24089
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
24045: LD_ADDR_EXP 53
24049: PUSH
24050: LD_EXP 53
24054: PPUSH
24055: LD_VAR 0 2
24059: PUSH
24060: LD_EXP 53
24064: PUSH
24065: LD_VAR 0 2
24069: ARRAY
24070: PUSH
24071: LD_INT 1
24073: PLUS
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PPUSH
24079: LD_VAR 0 3
24083: PPUSH
24084: CALL 49064 0 3
24088: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
24089: LD_VAR 0 3
24093: PPUSH
24094: CALL_OW 110
24098: PUSH
24099: LD_INT 102
24101: NONEQUAL
24102: IFFALSE 24116
// SetTag ( j , 102 ) ;
24104: LD_VAR 0 3
24108: PPUSH
24109: LD_INT 102
24111: PPUSH
24112: CALL_OW 109
// Wait ( 3 ) ;
24116: LD_INT 3
24118: PPUSH
24119: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
24123: LD_EXP 52
24127: PUSH
24128: LD_VAR 0 2
24132: ARRAY
24133: PUSH
24134: LD_INT 1
24136: ARRAY
24137: IFFALSE 24169
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
24139: LD_VAR 0 3
24143: PPUSH
24144: LD_EXP 52
24148: PUSH
24149: LD_VAR 0 2
24153: ARRAY
24154: PUSH
24155: LD_INT 1
24157: ARRAY
24158: PUSH
24159: LD_INT 1
24161: ARRAY
24162: PPUSH
24163: CALL_OW 128
24167: GO 24225
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
24169: LD_VAR 0 3
24173: PPUSH
24174: CALL_OW 314
24178: NOT
24179: PUSH
24180: LD_EXP 52
24184: PUSH
24185: LD_VAR 0 2
24189: ARRAY
24190: PUSH
24191: LD_INT 2
24193: ARRAY
24194: AND
24195: IFFALSE 24225
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
24197: LD_VAR 0 3
24201: PPUSH
24202: LD_EXP 52
24206: PUSH
24207: LD_VAR 0 2
24211: ARRAY
24212: PUSH
24213: LD_INT 2
24215: ARRAY
24216: PUSH
24217: LD_INT 1
24219: ARRAY
24220: PPUSH
24221: CALL_OW 128
// end ;
24225: GO 24003
24227: POP
24228: POP
// end ;
24229: GO 23846
24231: POP
24232: POP
// end ;
24233: LD_VAR 0 1
24237: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
24238: LD_INT 0
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
// if not mc_bases then
24245: LD_EXP 49
24249: NOT
24250: IFFALSE 24254
// exit ;
24252: GO 25397
// for i = 1 to mc_bases do
24254: LD_ADDR_VAR 0 2
24258: PUSH
24259: DOUBLE
24260: LD_INT 1
24262: DEC
24263: ST_TO_ADDR
24264: LD_EXP 49
24268: PUSH
24269: FOR_TO
24270: IFFALSE 25395
// begin if mc_scan [ i ] then
24272: LD_EXP 72
24276: PUSH
24277: LD_VAR 0 2
24281: ARRAY
24282: IFFALSE 24286
// continue ;
24284: GO 24269
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
24286: LD_EXP 54
24290: PUSH
24291: LD_VAR 0 2
24295: ARRAY
24296: NOT
24297: PUSH
24298: LD_EXP 56
24302: PUSH
24303: LD_VAR 0 2
24307: ARRAY
24308: NOT
24309: AND
24310: PUSH
24311: LD_EXP 55
24315: PUSH
24316: LD_VAR 0 2
24320: ARRAY
24321: AND
24322: IFFALSE 24360
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
24324: LD_ADDR_EXP 55
24328: PUSH
24329: LD_EXP 55
24333: PPUSH
24334: LD_VAR 0 2
24338: PPUSH
24339: EMPTY
24340: PPUSH
24341: CALL_OW 1
24345: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24346: LD_VAR 0 2
24350: PPUSH
24351: LD_INT 103
24353: PPUSH
24354: CALL 19227 0 2
// continue ;
24358: GO 24269
// end ; if mc_construct_list [ i ] then
24360: LD_EXP 56
24364: PUSH
24365: LD_VAR 0 2
24369: ARRAY
24370: IFFALSE 24590
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
24372: LD_ADDR_VAR 0 4
24376: PUSH
24377: LD_EXP 49
24381: PUSH
24382: LD_VAR 0 2
24386: ARRAY
24387: PPUSH
24388: LD_INT 25
24390: PUSH
24391: LD_INT 2
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PPUSH
24398: CALL_OW 72
24402: PUSH
24403: LD_EXP 51
24407: PUSH
24408: LD_VAR 0 2
24412: ARRAY
24413: DIFF
24414: ST_TO_ADDR
// if not tmp then
24415: LD_VAR 0 4
24419: NOT
24420: IFFALSE 24424
// continue ;
24422: GO 24269
// for j in tmp do
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_VAR 0 4
24433: PUSH
24434: FOR_IN
24435: IFFALSE 24586
// begin if not mc_builders [ i ] then
24437: LD_EXP 55
24441: PUSH
24442: LD_VAR 0 2
24446: ARRAY
24447: NOT
24448: IFFALSE 24506
// begin SetTag ( j , 103 ) ;
24450: LD_VAR 0 3
24454: PPUSH
24455: LD_INT 103
24457: PPUSH
24458: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
24462: LD_ADDR_EXP 55
24466: PUSH
24467: LD_EXP 55
24471: PPUSH
24472: LD_VAR 0 2
24476: PUSH
24477: LD_EXP 55
24481: PUSH
24482: LD_VAR 0 2
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: PLUS
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: LD_VAR 0 3
24500: PPUSH
24501: CALL 49064 0 3
24505: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
24506: LD_VAR 0 3
24510: PPUSH
24511: CALL_OW 310
24515: IFFALSE 24526
// ComExitBuilding ( j ) ;
24517: LD_VAR 0 3
24521: PPUSH
24522: CALL_OW 122
// wait ( 3 ) ;
24526: LD_INT 3
24528: PPUSH
24529: CALL_OW 67
// if not mc_construct_list [ i ] then
24533: LD_EXP 56
24537: PUSH
24538: LD_VAR 0 2
24542: ARRAY
24543: NOT
24544: IFFALSE 24548
// break ;
24546: GO 24586
// if not HasTask ( j ) then
24548: LD_VAR 0 3
24552: PPUSH
24553: CALL_OW 314
24557: NOT
24558: IFFALSE 24584
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
24560: LD_VAR 0 3
24564: PPUSH
24565: LD_EXP 56
24569: PUSH
24570: LD_VAR 0 2
24574: ARRAY
24575: PUSH
24576: LD_INT 1
24578: ARRAY
24579: PPUSH
24580: CALL 51500 0 2
// end ;
24584: GO 24434
24586: POP
24587: POP
// end else
24588: GO 25393
// if mc_build_list [ i ] then
24590: LD_EXP 54
24594: PUSH
24595: LD_VAR 0 2
24599: ARRAY
24600: IFFALSE 25393
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24602: LD_ADDR_VAR 0 5
24606: PUSH
24607: LD_EXP 49
24611: PUSH
24612: LD_VAR 0 2
24616: ARRAY
24617: PPUSH
24618: LD_INT 2
24620: PUSH
24621: LD_INT 30
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 30
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 72
24650: ST_TO_ADDR
// if depot then
24651: LD_VAR 0 5
24655: IFFALSE 24673
// depot := depot [ 1 ] else
24657: LD_ADDR_VAR 0 5
24661: PUSH
24662: LD_VAR 0 5
24666: PUSH
24667: LD_INT 1
24669: ARRAY
24670: ST_TO_ADDR
24671: GO 24681
// depot := 0 ;
24673: LD_ADDR_VAR 0 5
24677: PUSH
24678: LD_INT 0
24680: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
24681: LD_EXP 54
24685: PUSH
24686: LD_VAR 0 2
24690: ARRAY
24691: PUSH
24692: LD_INT 1
24694: ARRAY
24695: PUSH
24696: LD_INT 1
24698: ARRAY
24699: PPUSH
24700: CALL 51343 0 1
24704: PUSH
24705: LD_EXP 49
24709: PUSH
24710: LD_VAR 0 2
24714: ARRAY
24715: PPUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 30
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 30
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: PPUSH
24744: CALL_OW 72
24748: NOT
24749: AND
24750: IFFALSE 24855
// begin for j = 1 to mc_build_list [ i ] do
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: DOUBLE
24758: LD_INT 1
24760: DEC
24761: ST_TO_ADDR
24762: LD_EXP 54
24766: PUSH
24767: LD_VAR 0 2
24771: ARRAY
24772: PUSH
24773: FOR_TO
24774: IFFALSE 24853
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
24776: LD_EXP 54
24780: PUSH
24781: LD_VAR 0 2
24785: ARRAY
24786: PUSH
24787: LD_VAR 0 3
24791: ARRAY
24792: PUSH
24793: LD_INT 1
24795: ARRAY
24796: PUSH
24797: LD_INT 2
24799: EQUAL
24800: IFFALSE 24851
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
24802: LD_ADDR_EXP 54
24806: PUSH
24807: LD_EXP 54
24811: PPUSH
24812: LD_VAR 0 2
24816: PPUSH
24817: LD_EXP 54
24821: PUSH
24822: LD_VAR 0 2
24826: ARRAY
24827: PPUSH
24828: LD_VAR 0 3
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: LD_INT 0
24838: PPUSH
24839: CALL 48047 0 4
24843: PPUSH
24844: CALL_OW 1
24848: ST_TO_ADDR
// break ;
24849: GO 24853
// end ;
24851: GO 24773
24853: POP
24854: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
24855: LD_EXP 54
24859: PUSH
24860: LD_VAR 0 2
24864: ARRAY
24865: PUSH
24866: LD_INT 1
24868: ARRAY
24869: PUSH
24870: LD_INT 1
24872: ARRAY
24873: PUSH
24874: LD_INT 0
24876: EQUAL
24877: PUSH
24878: LD_VAR 0 5
24882: PUSH
24883: LD_VAR 0 5
24887: PPUSH
24888: LD_EXP 54
24892: PUSH
24893: LD_VAR 0 2
24897: ARRAY
24898: PUSH
24899: LD_INT 1
24901: ARRAY
24902: PUSH
24903: LD_INT 1
24905: ARRAY
24906: PPUSH
24907: LD_EXP 54
24911: PUSH
24912: LD_VAR 0 2
24916: ARRAY
24917: PUSH
24918: LD_INT 1
24920: ARRAY
24921: PUSH
24922: LD_INT 2
24924: ARRAY
24925: PPUSH
24926: LD_EXP 54
24930: PUSH
24931: LD_VAR 0 2
24935: ARRAY
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PUSH
24941: LD_INT 3
24943: ARRAY
24944: PPUSH
24945: LD_EXP 54
24949: PUSH
24950: LD_VAR 0 2
24954: ARRAY
24955: PUSH
24956: LD_INT 1
24958: ARRAY
24959: PUSH
24960: LD_INT 4
24962: ARRAY
24963: PPUSH
24964: CALL 55732 0 5
24968: AND
24969: OR
24970: IFFALSE 25251
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
24972: LD_ADDR_VAR 0 4
24976: PUSH
24977: LD_EXP 49
24981: PUSH
24982: LD_VAR 0 2
24986: ARRAY
24987: PPUSH
24988: LD_INT 25
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: PPUSH
24998: CALL_OW 72
25002: PUSH
25003: LD_EXP 51
25007: PUSH
25008: LD_VAR 0 2
25012: ARRAY
25013: DIFF
25014: ST_TO_ADDR
// if not tmp then
25015: LD_VAR 0 4
25019: NOT
25020: IFFALSE 25024
// continue ;
25022: GO 24269
// for j in tmp do
25024: LD_ADDR_VAR 0 3
25028: PUSH
25029: LD_VAR 0 4
25033: PUSH
25034: FOR_IN
25035: IFFALSE 25247
// begin if not mc_builders [ i ] then
25037: LD_EXP 55
25041: PUSH
25042: LD_VAR 0 2
25046: ARRAY
25047: NOT
25048: IFFALSE 25106
// begin SetTag ( j , 103 ) ;
25050: LD_VAR 0 3
25054: PPUSH
25055: LD_INT 103
25057: PPUSH
25058: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25062: LD_ADDR_EXP 55
25066: PUSH
25067: LD_EXP 55
25071: PPUSH
25072: LD_VAR 0 2
25076: PUSH
25077: LD_EXP 55
25081: PUSH
25082: LD_VAR 0 2
25086: ARRAY
25087: PUSH
25088: LD_INT 1
25090: PLUS
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PPUSH
25096: LD_VAR 0 3
25100: PPUSH
25101: CALL 49064 0 3
25105: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25106: LD_VAR 0 3
25110: PPUSH
25111: CALL_OW 310
25115: IFFALSE 25126
// ComExitBuilding ( j ) ;
25117: LD_VAR 0 3
25121: PPUSH
25122: CALL_OW 122
// wait ( 3 ) ;
25126: LD_INT 3
25128: PPUSH
25129: CALL_OW 67
// if not mc_build_list [ i ] then
25133: LD_EXP 54
25137: PUSH
25138: LD_VAR 0 2
25142: ARRAY
25143: NOT
25144: IFFALSE 25148
// break ;
25146: GO 25247
// if not HasTask ( j ) then
25148: LD_VAR 0 3
25152: PPUSH
25153: CALL_OW 314
25157: NOT
25158: IFFALSE 25245
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
25160: LD_VAR 0 3
25164: PPUSH
25165: LD_EXP 54
25169: PUSH
25170: LD_VAR 0 2
25174: ARRAY
25175: PUSH
25176: LD_INT 1
25178: ARRAY
25179: PUSH
25180: LD_INT 1
25182: ARRAY
25183: PPUSH
25184: LD_EXP 54
25188: PUSH
25189: LD_VAR 0 2
25193: ARRAY
25194: PUSH
25195: LD_INT 1
25197: ARRAY
25198: PUSH
25199: LD_INT 2
25201: ARRAY
25202: PPUSH
25203: LD_EXP 54
25207: PUSH
25208: LD_VAR 0 2
25212: ARRAY
25213: PUSH
25214: LD_INT 1
25216: ARRAY
25217: PUSH
25218: LD_INT 3
25220: ARRAY
25221: PPUSH
25222: LD_EXP 54
25226: PUSH
25227: LD_VAR 0 2
25231: ARRAY
25232: PUSH
25233: LD_INT 1
25235: ARRAY
25236: PUSH
25237: LD_INT 4
25239: ARRAY
25240: PPUSH
25241: CALL_OW 145
// end ;
25245: GO 25034
25247: POP
25248: POP
// end else
25249: GO 25393
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
25251: LD_EXP 49
25255: PUSH
25256: LD_VAR 0 2
25260: ARRAY
25261: PPUSH
25262: LD_EXP 54
25266: PUSH
25267: LD_VAR 0 2
25271: ARRAY
25272: PUSH
25273: LD_INT 1
25275: ARRAY
25276: PUSH
25277: LD_INT 1
25279: ARRAY
25280: PPUSH
25281: LD_EXP 54
25285: PUSH
25286: LD_VAR 0 2
25290: ARRAY
25291: PUSH
25292: LD_INT 1
25294: ARRAY
25295: PUSH
25296: LD_INT 2
25298: ARRAY
25299: PPUSH
25300: LD_EXP 54
25304: PUSH
25305: LD_VAR 0 2
25309: ARRAY
25310: PUSH
25311: LD_INT 1
25313: ARRAY
25314: PUSH
25315: LD_INT 3
25317: ARRAY
25318: PPUSH
25319: LD_EXP 54
25323: PUSH
25324: LD_VAR 0 2
25328: ARRAY
25329: PUSH
25330: LD_INT 1
25332: ARRAY
25333: PUSH
25334: LD_INT 4
25336: ARRAY
25337: PPUSH
25338: CALL 55163 0 5
25342: NOT
25343: IFFALSE 25393
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
25345: LD_ADDR_EXP 54
25349: PUSH
25350: LD_EXP 54
25354: PPUSH
25355: LD_VAR 0 2
25359: PPUSH
25360: LD_EXP 54
25364: PUSH
25365: LD_VAR 0 2
25369: ARRAY
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: LD_INT 1
25376: NEG
25377: PPUSH
25378: LD_INT 0
25380: PPUSH
25381: CALL 48047 0 4
25385: PPUSH
25386: CALL_OW 1
25390: ST_TO_ADDR
// continue ;
25391: GO 24269
// end ; end ; end ;
25393: GO 24269
25395: POP
25396: POP
// end ;
25397: LD_VAR 0 1
25401: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
25406: PPUSH
25407: PPUSH
25408: PPUSH
25409: PPUSH
// if not mc_bases then
25410: LD_EXP 49
25414: NOT
25415: IFFALSE 25419
// exit ;
25417: GO 25846
// for i = 1 to mc_bases do
25419: LD_ADDR_VAR 0 2
25423: PUSH
25424: DOUBLE
25425: LD_INT 1
25427: DEC
25428: ST_TO_ADDR
25429: LD_EXP 49
25433: PUSH
25434: FOR_TO
25435: IFFALSE 25844
// begin tmp := mc_build_upgrade [ i ] ;
25437: LD_ADDR_VAR 0 4
25441: PUSH
25442: LD_EXP 81
25446: PUSH
25447: LD_VAR 0 2
25451: ARRAY
25452: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
25453: LD_ADDR_VAR 0 6
25457: PUSH
25458: LD_EXP 82
25462: PUSH
25463: LD_VAR 0 2
25467: ARRAY
25468: PPUSH
25469: LD_INT 2
25471: PUSH
25472: LD_INT 30
25474: PUSH
25475: LD_INT 6
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 30
25484: PUSH
25485: LD_INT 7
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: PPUSH
25497: CALL_OW 72
25501: ST_TO_ADDR
// if not tmp and not lab then
25502: LD_VAR 0 4
25506: NOT
25507: PUSH
25508: LD_VAR 0 6
25512: NOT
25513: AND
25514: IFFALSE 25518
// continue ;
25516: GO 25434
// if tmp then
25518: LD_VAR 0 4
25522: IFFALSE 25642
// for j in tmp do
25524: LD_ADDR_VAR 0 3
25528: PUSH
25529: LD_VAR 0 4
25533: PUSH
25534: FOR_IN
25535: IFFALSE 25640
// begin if UpgradeCost ( j ) then
25537: LD_VAR 0 3
25541: PPUSH
25542: CALL 54823 0 1
25546: IFFALSE 25638
// begin ComUpgrade ( j ) ;
25548: LD_VAR 0 3
25552: PPUSH
25553: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
25557: LD_ADDR_EXP 81
25561: PUSH
25562: LD_EXP 81
25566: PPUSH
25567: LD_VAR 0 2
25571: PPUSH
25572: LD_EXP 81
25576: PUSH
25577: LD_VAR 0 2
25581: ARRAY
25582: PUSH
25583: LD_VAR 0 3
25587: DIFF
25588: PPUSH
25589: CALL_OW 1
25593: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
25594: LD_ADDR_EXP 56
25598: PUSH
25599: LD_EXP 56
25603: PPUSH
25604: LD_VAR 0 2
25608: PUSH
25609: LD_EXP 56
25613: PUSH
25614: LD_VAR 0 2
25618: ARRAY
25619: PUSH
25620: LD_INT 1
25622: PLUS
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: CALL 49064 0 3
25637: ST_TO_ADDR
// end ; end ;
25638: GO 25534
25640: POP
25641: POP
// if not lab or not mc_lab_upgrade [ i ] then
25642: LD_VAR 0 6
25646: NOT
25647: PUSH
25648: LD_EXP 83
25652: PUSH
25653: LD_VAR 0 2
25657: ARRAY
25658: NOT
25659: OR
25660: IFFALSE 25664
// continue ;
25662: GO 25434
// for j in lab do
25664: LD_ADDR_VAR 0 3
25668: PUSH
25669: LD_VAR 0 6
25673: PUSH
25674: FOR_IN
25675: IFFALSE 25840
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
25677: LD_VAR 0 3
25681: PPUSH
25682: CALL_OW 266
25686: PUSH
25687: LD_INT 6
25689: PUSH
25690: LD_INT 7
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: IN
25697: PUSH
25698: LD_VAR 0 3
25702: PPUSH
25703: CALL_OW 461
25707: PUSH
25708: LD_INT 1
25710: NONEQUAL
25711: AND
25712: IFFALSE 25838
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
25714: LD_VAR 0 3
25718: PPUSH
25719: LD_EXP 83
25723: PUSH
25724: LD_VAR 0 2
25728: ARRAY
25729: PUSH
25730: LD_INT 1
25732: ARRAY
25733: PPUSH
25734: CALL 55028 0 2
25738: IFFALSE 25838
// begin ComCancel ( j ) ;
25740: LD_VAR 0 3
25744: PPUSH
25745: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
25749: LD_VAR 0 3
25753: PPUSH
25754: LD_EXP 83
25758: PUSH
25759: LD_VAR 0 2
25763: ARRAY
25764: PUSH
25765: LD_INT 1
25767: ARRAY
25768: PPUSH
25769: CALL_OW 207
// if not j in mc_construct_list [ i ] then
25773: LD_VAR 0 3
25777: PUSH
25778: LD_EXP 56
25782: PUSH
25783: LD_VAR 0 2
25787: ARRAY
25788: IN
25789: NOT
25790: IFFALSE 25836
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
25792: LD_ADDR_EXP 56
25796: PUSH
25797: LD_EXP 56
25801: PPUSH
25802: LD_VAR 0 2
25806: PUSH
25807: LD_EXP 56
25811: PUSH
25812: LD_VAR 0 2
25816: ARRAY
25817: PUSH
25818: LD_INT 1
25820: PLUS
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PPUSH
25826: LD_VAR 0 3
25830: PPUSH
25831: CALL 49064 0 3
25835: ST_TO_ADDR
// break ;
25836: GO 25840
// end ; end ; end ;
25838: GO 25674
25840: POP
25841: POP
// end ;
25842: GO 25434
25844: POP
25845: POP
// end ;
25846: LD_VAR 0 1
25850: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
25851: LD_INT 0
25853: PPUSH
25854: PPUSH
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
// if not mc_bases then
25860: LD_EXP 49
25864: NOT
25865: IFFALSE 25869
// exit ;
25867: GO 26198
// for i = 1 to mc_bases do
25869: LD_ADDR_VAR 0 2
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_EXP 49
25883: PUSH
25884: FOR_TO
25885: IFFALSE 26196
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
25887: LD_EXP 57
25891: PUSH
25892: LD_VAR 0 2
25896: ARRAY
25897: NOT
25898: PUSH
25899: LD_EXP 49
25903: PUSH
25904: LD_VAR 0 2
25908: ARRAY
25909: PPUSH
25910: LD_INT 30
25912: PUSH
25913: LD_INT 3
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PPUSH
25920: CALL_OW 72
25924: NOT
25925: OR
25926: IFFALSE 25930
// continue ;
25928: GO 25884
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
25930: LD_EXP 57
25934: PUSH
25935: LD_VAR 0 2
25939: ARRAY
25940: PUSH
25941: LD_INT 1
25943: ARRAY
25944: PPUSH
25945: CALL_OW 269
25949: IFFALSE 26015
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
25951: LD_ADDR_VAR 0 4
25955: PUSH
25956: LD_EXP 57
25960: PUSH
25961: LD_VAR 0 2
25965: ARRAY
25966: PPUSH
25967: LD_INT 1
25969: PPUSH
25970: CALL_OW 3
25974: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
25975: LD_ADDR_EXP 57
25979: PUSH
25980: LD_EXP 57
25984: PPUSH
25985: LD_VAR 0 2
25989: PPUSH
25990: LD_VAR 0 4
25994: PPUSH
25995: CALL_OW 1
25999: ST_TO_ADDR
// if not mc_turret_list [ i ] then
26000: LD_EXP 57
26004: PUSH
26005: LD_VAR 0 2
26009: ARRAY
26010: NOT
26011: IFFALSE 26015
// continue ;
26013: GO 25884
// end ; busy := false ;
26015: LD_ADDR_VAR 0 6
26019: PUSH
26020: LD_INT 0
26022: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26023: LD_ADDR_VAR 0 4
26027: PUSH
26028: LD_EXP 49
26032: PUSH
26033: LD_VAR 0 2
26037: ARRAY
26038: PPUSH
26039: LD_INT 30
26041: PUSH
26042: LD_INT 3
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: CALL_OW 72
26053: ST_TO_ADDR
// for j in tmp do
26054: LD_ADDR_VAR 0 3
26058: PUSH
26059: LD_VAR 0 4
26063: PUSH
26064: FOR_IN
26065: IFFALSE 26093
// if not BuildingStatus ( j ) = bs_idle then
26067: LD_VAR 0 3
26071: PPUSH
26072: CALL_OW 461
26076: PUSH
26077: LD_INT 2
26079: EQUAL
26080: NOT
26081: IFFALSE 26091
// busy := true ;
26083: LD_ADDR_VAR 0 6
26087: PUSH
26088: LD_INT 1
26090: ST_TO_ADDR
26091: GO 26064
26093: POP
26094: POP
// if busy then
26095: LD_VAR 0 6
26099: IFFALSE 26103
// continue ;
26101: GO 25884
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
26103: LD_ADDR_VAR 0 7
26107: PUSH
26108: LD_EXP 57
26112: PUSH
26113: LD_VAR 0 2
26117: ARRAY
26118: PUSH
26119: LD_INT 1
26121: ARRAY
26122: PPUSH
26123: CALL 53387 0 1
26127: ST_TO_ADDR
// if not weapon then
26128: LD_VAR 0 7
26132: NOT
26133: IFFALSE 26137
// continue ;
26135: GO 25884
// if mc_allowed_tower_weapons [ i ] then
26137: LD_EXP 87
26141: PUSH
26142: LD_VAR 0 2
26146: ARRAY
26147: IFFALSE 26170
// if not weapon in mc_allowed_tower_weapons [ i ] then
26149: LD_VAR 0 7
26153: PUSH
26154: LD_EXP 87
26158: PUSH
26159: LD_VAR 0 2
26163: ARRAY
26164: IN
26165: NOT
26166: IFFALSE 26170
// continue ;
26168: GO 25884
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
26170: LD_EXP 57
26174: PUSH
26175: LD_VAR 0 2
26179: ARRAY
26180: PUSH
26181: LD_INT 1
26183: ARRAY
26184: PPUSH
26185: LD_VAR 0 7
26189: PPUSH
26190: CALL_OW 148
// end ;
26194: GO 25884
26196: POP
26197: POP
// end ;
26198: LD_VAR 0 1
26202: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
26203: LD_INT 0
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
26210: PPUSH
// if not mc_bases then
26211: LD_EXP 49
26215: NOT
26216: IFFALSE 26220
// exit ;
26218: GO 27232
// for i = 1 to mc_bases do
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: DOUBLE
26226: LD_INT 1
26228: DEC
26229: ST_TO_ADDR
26230: LD_EXP 49
26234: PUSH
26235: FOR_TO
26236: IFFALSE 27230
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
26238: LD_EXP 62
26242: PUSH
26243: LD_VAR 0 2
26247: ARRAY
26248: NOT
26249: PUSH
26250: LD_EXP 62
26254: PUSH
26255: LD_VAR 0 2
26259: ARRAY
26260: PUSH
26261: LD_EXP 63
26265: PUSH
26266: LD_VAR 0 2
26270: ARRAY
26271: EQUAL
26272: OR
26273: IFFALSE 26277
// continue ;
26275: GO 26235
// if mc_miners [ i ] then
26277: LD_EXP 63
26281: PUSH
26282: LD_VAR 0 2
26286: ARRAY
26287: IFFALSE 26917
// begin k := 1 ;
26289: LD_ADDR_VAR 0 4
26293: PUSH
26294: LD_INT 1
26296: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
26297: LD_ADDR_VAR 0 3
26301: PUSH
26302: DOUBLE
26303: LD_EXP 63
26307: PUSH
26308: LD_VAR 0 2
26312: ARRAY
26313: INC
26314: ST_TO_ADDR
26315: LD_INT 1
26317: PUSH
26318: FOR_DOWNTO
26319: IFFALSE 26915
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
26321: LD_EXP 63
26325: PUSH
26326: LD_VAR 0 2
26330: ARRAY
26331: PUSH
26332: LD_VAR 0 3
26336: ARRAY
26337: PPUSH
26338: CALL_OW 301
26342: PUSH
26343: LD_EXP 63
26347: PUSH
26348: LD_VAR 0 2
26352: ARRAY
26353: PUSH
26354: LD_VAR 0 3
26358: ARRAY
26359: PPUSH
26360: CALL_OW 257
26364: PUSH
26365: LD_INT 1
26367: NONEQUAL
26368: OR
26369: IFFALSE 26432
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
26371: LD_ADDR_VAR 0 5
26375: PUSH
26376: LD_EXP 63
26380: PUSH
26381: LD_VAR 0 2
26385: ARRAY
26386: PUSH
26387: LD_EXP 63
26391: PUSH
26392: LD_VAR 0 2
26396: ARRAY
26397: PUSH
26398: LD_VAR 0 3
26402: ARRAY
26403: DIFF
26404: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
26405: LD_ADDR_EXP 63
26409: PUSH
26410: LD_EXP 63
26414: PPUSH
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 5
26424: PPUSH
26425: CALL_OW 1
26429: ST_TO_ADDR
// continue ;
26430: GO 26318
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
26432: LD_EXP 63
26436: PUSH
26437: LD_VAR 0 2
26441: ARRAY
26442: PUSH
26443: LD_VAR 0 3
26447: ARRAY
26448: PPUSH
26449: CALL 48565 0 1
26453: PUSH
26454: LD_EXP 63
26458: PUSH
26459: LD_VAR 0 2
26463: ARRAY
26464: PUSH
26465: LD_VAR 0 3
26469: ARRAY
26470: PPUSH
26471: CALL_OW 255
26475: PPUSH
26476: LD_EXP 62
26480: PUSH
26481: LD_VAR 0 2
26485: ARRAY
26486: PUSH
26487: LD_VAR 0 4
26491: ARRAY
26492: PUSH
26493: LD_INT 1
26495: ARRAY
26496: PPUSH
26497: LD_EXP 62
26501: PUSH
26502: LD_VAR 0 2
26506: ARRAY
26507: PUSH
26508: LD_VAR 0 4
26512: ARRAY
26513: PUSH
26514: LD_INT 2
26516: ARRAY
26517: PPUSH
26518: LD_INT 15
26520: PPUSH
26521: CALL 49558 0 4
26525: PUSH
26526: LD_INT 4
26528: ARRAY
26529: PUSH
26530: LD_EXP 63
26534: PUSH
26535: LD_VAR 0 2
26539: ARRAY
26540: PUSH
26541: LD_VAR 0 3
26545: ARRAY
26546: PPUSH
26547: LD_INT 10
26549: PPUSH
26550: CALL 51255 0 2
26554: PUSH
26555: LD_INT 4
26557: ARRAY
26558: OR
26559: AND
26560: IFFALSE 26583
// ComStop ( mc_miners [ i ] [ j ] ) ;
26562: LD_EXP 63
26566: PUSH
26567: LD_VAR 0 2
26571: ARRAY
26572: PUSH
26573: LD_VAR 0 3
26577: ARRAY
26578: PPUSH
26579: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
26583: LD_EXP 63
26587: PUSH
26588: LD_VAR 0 2
26592: ARRAY
26593: PUSH
26594: LD_VAR 0 3
26598: ARRAY
26599: PPUSH
26600: CALL_OW 257
26604: PUSH
26605: LD_INT 1
26607: EQUAL
26608: PUSH
26609: LD_EXP 63
26613: PUSH
26614: LD_VAR 0 2
26618: ARRAY
26619: PUSH
26620: LD_VAR 0 3
26624: ARRAY
26625: PPUSH
26626: CALL_OW 459
26630: NOT
26631: AND
26632: PUSH
26633: LD_EXP 63
26637: PUSH
26638: LD_VAR 0 2
26642: ARRAY
26643: PUSH
26644: LD_VAR 0 3
26648: ARRAY
26649: PPUSH
26650: CALL_OW 255
26654: PPUSH
26655: LD_EXP 62
26659: PUSH
26660: LD_VAR 0 2
26664: ARRAY
26665: PUSH
26666: LD_VAR 0 4
26670: ARRAY
26671: PUSH
26672: LD_INT 1
26674: ARRAY
26675: PPUSH
26676: LD_EXP 62
26680: PUSH
26681: LD_VAR 0 2
26685: ARRAY
26686: PUSH
26687: LD_VAR 0 4
26691: ARRAY
26692: PUSH
26693: LD_INT 2
26695: ARRAY
26696: PPUSH
26697: LD_INT 15
26699: PPUSH
26700: CALL 49558 0 4
26704: PUSH
26705: LD_INT 4
26707: ARRAY
26708: PUSH
26709: LD_INT 0
26711: EQUAL
26712: AND
26713: PUSH
26714: LD_EXP 63
26718: PUSH
26719: LD_VAR 0 2
26723: ARRAY
26724: PUSH
26725: LD_VAR 0 3
26729: ARRAY
26730: PPUSH
26731: CALL_OW 314
26735: NOT
26736: AND
26737: IFFALSE 26913
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
26739: LD_EXP 63
26743: PUSH
26744: LD_VAR 0 2
26748: ARRAY
26749: PUSH
26750: LD_VAR 0 3
26754: ARRAY
26755: PPUSH
26756: CALL_OW 310
26760: IFFALSE 26783
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
26762: LD_EXP 63
26766: PUSH
26767: LD_VAR 0 2
26771: ARRAY
26772: PUSH
26773: LD_VAR 0 3
26777: ARRAY
26778: PPUSH
26779: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
26783: LD_EXP 63
26787: PUSH
26788: LD_VAR 0 2
26792: ARRAY
26793: PUSH
26794: LD_VAR 0 3
26798: ARRAY
26799: PPUSH
26800: CALL_OW 314
26804: NOT
26805: IFFALSE 26873
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
26807: LD_EXP 63
26811: PUSH
26812: LD_VAR 0 2
26816: ARRAY
26817: PUSH
26818: LD_VAR 0 3
26822: ARRAY
26823: PPUSH
26824: LD_EXP 62
26828: PUSH
26829: LD_VAR 0 2
26833: ARRAY
26834: PUSH
26835: LD_VAR 0 4
26839: ARRAY
26840: PUSH
26841: LD_INT 1
26843: ARRAY
26844: PPUSH
26845: LD_EXP 62
26849: PUSH
26850: LD_VAR 0 2
26854: ARRAY
26855: PUSH
26856: LD_VAR 0 4
26860: ARRAY
26861: PUSH
26862: LD_INT 2
26864: ARRAY
26865: PPUSH
26866: LD_INT 0
26868: PPUSH
26869: CALL_OW 193
// k := k + 1 ;
26873: LD_ADDR_VAR 0 4
26877: PUSH
26878: LD_VAR 0 4
26882: PUSH
26883: LD_INT 1
26885: PLUS
26886: ST_TO_ADDR
// if k > mc_mines [ i ] then
26887: LD_VAR 0 4
26891: PUSH
26892: LD_EXP 62
26896: PUSH
26897: LD_VAR 0 2
26901: ARRAY
26902: GREATER
26903: IFFALSE 26913
// k := 1 ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_INT 1
26912: ST_TO_ADDR
// end ; end ;
26913: GO 26318
26915: POP
26916: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
26917: LD_ADDR_VAR 0 5
26921: PUSH
26922: LD_EXP 49
26926: PUSH
26927: LD_VAR 0 2
26931: ARRAY
26932: PPUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 30
26938: PUSH
26939: LD_INT 4
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 30
26948: PUSH
26949: LD_INT 5
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 30
26958: PUSH
26959: LD_INT 32
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: PPUSH
26972: CALL_OW 72
26976: ST_TO_ADDR
// if not tmp then
26977: LD_VAR 0 5
26981: NOT
26982: IFFALSE 26986
// continue ;
26984: GO 26235
// list := [ ] ;
26986: LD_ADDR_VAR 0 6
26990: PUSH
26991: EMPTY
26992: ST_TO_ADDR
// for j in tmp do
26993: LD_ADDR_VAR 0 3
26997: PUSH
26998: LD_VAR 0 5
27002: PUSH
27003: FOR_IN
27004: IFFALSE 27073
// begin for k in UnitsInside ( j ) do
27006: LD_ADDR_VAR 0 4
27010: PUSH
27011: LD_VAR 0 3
27015: PPUSH
27016: CALL_OW 313
27020: PUSH
27021: FOR_IN
27022: IFFALSE 27069
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
27024: LD_VAR 0 4
27028: PPUSH
27029: CALL_OW 257
27033: PUSH
27034: LD_INT 1
27036: EQUAL
27037: PUSH
27038: LD_VAR 0 4
27042: PPUSH
27043: CALL_OW 459
27047: NOT
27048: AND
27049: IFFALSE 27067
// list := list ^ k ;
27051: LD_ADDR_VAR 0 6
27055: PUSH
27056: LD_VAR 0 6
27060: PUSH
27061: LD_VAR 0 4
27065: ADD
27066: ST_TO_ADDR
27067: GO 27021
27069: POP
27070: POP
// end ;
27071: GO 27003
27073: POP
27074: POP
// list := list diff mc_miners [ i ] ;
27075: LD_ADDR_VAR 0 6
27079: PUSH
27080: LD_VAR 0 6
27084: PUSH
27085: LD_EXP 63
27089: PUSH
27090: LD_VAR 0 2
27094: ARRAY
27095: DIFF
27096: ST_TO_ADDR
// if not list then
27097: LD_VAR 0 6
27101: NOT
27102: IFFALSE 27106
// continue ;
27104: GO 26235
// k := mc_mines [ i ] - mc_miners [ i ] ;
27106: LD_ADDR_VAR 0 4
27110: PUSH
27111: LD_EXP 62
27115: PUSH
27116: LD_VAR 0 2
27120: ARRAY
27121: PUSH
27122: LD_EXP 63
27126: PUSH
27127: LD_VAR 0 2
27131: ARRAY
27132: MINUS
27133: ST_TO_ADDR
// if k > list then
27134: LD_VAR 0 4
27138: PUSH
27139: LD_VAR 0 6
27143: GREATER
27144: IFFALSE 27156
// k := list ;
27146: LD_ADDR_VAR 0 4
27150: PUSH
27151: LD_VAR 0 6
27155: ST_TO_ADDR
// for j = 1 to k do
27156: LD_ADDR_VAR 0 3
27160: PUSH
27161: DOUBLE
27162: LD_INT 1
27164: DEC
27165: ST_TO_ADDR
27166: LD_VAR 0 4
27170: PUSH
27171: FOR_TO
27172: IFFALSE 27226
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
27174: LD_ADDR_EXP 63
27178: PUSH
27179: LD_EXP 63
27183: PPUSH
27184: LD_VAR 0 2
27188: PUSH
27189: LD_EXP 63
27193: PUSH
27194: LD_VAR 0 2
27198: ARRAY
27199: PUSH
27200: LD_INT 1
27202: PLUS
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PPUSH
27208: LD_VAR 0 6
27212: PUSH
27213: LD_VAR 0 3
27217: ARRAY
27218: PPUSH
27219: CALL 49064 0 3
27223: ST_TO_ADDR
27224: GO 27171
27226: POP
27227: POP
// end ;
27228: GO 26235
27230: POP
27231: POP
// end ;
27232: LD_VAR 0 1
27236: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
27237: LD_INT 0
27239: PPUSH
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
// if not mc_bases then
27249: LD_EXP 49
27253: NOT
27254: IFFALSE 27258
// exit ;
27256: GO 28792
// for i = 1 to mc_bases do
27258: LD_ADDR_VAR 0 2
27262: PUSH
27263: DOUBLE
27264: LD_INT 1
27266: DEC
27267: ST_TO_ADDR
27268: LD_EXP 49
27272: PUSH
27273: FOR_TO
27274: IFFALSE 28790
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
27276: LD_EXP 49
27280: PUSH
27281: LD_VAR 0 2
27285: ARRAY
27286: NOT
27287: PUSH
27288: LD_EXP 56
27292: PUSH
27293: LD_VAR 0 2
27297: ARRAY
27298: OR
27299: IFFALSE 27303
// continue ;
27301: GO 27273
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
27303: LD_EXP 65
27307: PUSH
27308: LD_VAR 0 2
27312: ARRAY
27313: NOT
27314: PUSH
27315: LD_EXP 66
27319: PUSH
27320: LD_VAR 0 2
27324: ARRAY
27325: AND
27326: IFFALSE 27364
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
27328: LD_ADDR_EXP 66
27332: PUSH
27333: LD_EXP 66
27337: PPUSH
27338: LD_VAR 0 2
27342: PPUSH
27343: EMPTY
27344: PPUSH
27345: CALL_OW 1
27349: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_INT 107
27357: PPUSH
27358: CALL 19227 0 2
// continue ;
27362: GO 27273
// end ; target := [ ] ;
27364: LD_ADDR_VAR 0 6
27368: PUSH
27369: EMPTY
27370: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
27371: LD_ADDR_VAR 0 3
27375: PUSH
27376: DOUBLE
27377: LD_EXP 65
27381: PUSH
27382: LD_VAR 0 2
27386: ARRAY
27387: INC
27388: ST_TO_ADDR
27389: LD_INT 1
27391: PUSH
27392: FOR_DOWNTO
27393: IFFALSE 27653
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
27395: LD_EXP 65
27399: PUSH
27400: LD_VAR 0 2
27404: ARRAY
27405: PUSH
27406: LD_VAR 0 3
27410: ARRAY
27411: PUSH
27412: LD_INT 2
27414: ARRAY
27415: PPUSH
27416: LD_EXP 65
27420: PUSH
27421: LD_VAR 0 2
27425: ARRAY
27426: PUSH
27427: LD_VAR 0 3
27431: ARRAY
27432: PUSH
27433: LD_INT 3
27435: ARRAY
27436: PPUSH
27437: CALL_OW 488
27441: PUSH
27442: LD_EXP 65
27446: PUSH
27447: LD_VAR 0 2
27451: ARRAY
27452: PUSH
27453: LD_VAR 0 3
27457: ARRAY
27458: PUSH
27459: LD_INT 2
27461: ARRAY
27462: PPUSH
27463: LD_EXP 65
27467: PUSH
27468: LD_VAR 0 2
27472: ARRAY
27473: PUSH
27474: LD_VAR 0 3
27478: ARRAY
27479: PUSH
27480: LD_INT 3
27482: ARRAY
27483: PPUSH
27484: CALL_OW 284
27488: PUSH
27489: LD_INT 0
27491: EQUAL
27492: AND
27493: IFFALSE 27548
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
27495: LD_ADDR_VAR 0 5
27499: PUSH
27500: LD_EXP 65
27504: PUSH
27505: LD_VAR 0 2
27509: ARRAY
27510: PPUSH
27511: LD_VAR 0 3
27515: PPUSH
27516: CALL_OW 3
27520: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
27521: LD_ADDR_EXP 65
27525: PUSH
27526: LD_EXP 65
27530: PPUSH
27531: LD_VAR 0 2
27535: PPUSH
27536: LD_VAR 0 5
27540: PPUSH
27541: CALL_OW 1
27545: ST_TO_ADDR
// continue ;
27546: GO 27392
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
27548: LD_EXP 49
27552: PUSH
27553: LD_VAR 0 2
27557: ARRAY
27558: PUSH
27559: LD_INT 1
27561: ARRAY
27562: PPUSH
27563: CALL_OW 255
27567: PPUSH
27568: LD_EXP 65
27572: PUSH
27573: LD_VAR 0 2
27577: ARRAY
27578: PUSH
27579: LD_VAR 0 3
27583: ARRAY
27584: PUSH
27585: LD_INT 2
27587: ARRAY
27588: PPUSH
27589: LD_EXP 65
27593: PUSH
27594: LD_VAR 0 2
27598: ARRAY
27599: PUSH
27600: LD_VAR 0 3
27604: ARRAY
27605: PUSH
27606: LD_INT 3
27608: ARRAY
27609: PPUSH
27610: LD_INT 20
27612: PPUSH
27613: CALL 49558 0 4
27617: PUSH
27618: LD_INT 4
27620: ARRAY
27621: PUSH
27622: LD_INT 0
27624: EQUAL
27625: IFFALSE 27651
// begin target := mc_crates [ i ] [ j ] ;
27627: LD_ADDR_VAR 0 6
27631: PUSH
27632: LD_EXP 65
27636: PUSH
27637: LD_VAR 0 2
27641: ARRAY
27642: PUSH
27643: LD_VAR 0 3
27647: ARRAY
27648: ST_TO_ADDR
// break ;
27649: GO 27653
// end ; end ;
27651: GO 27392
27653: POP
27654: POP
// if not target then
27655: LD_VAR 0 6
27659: NOT
27660: IFFALSE 27664
// continue ;
27662: GO 27273
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
27664: LD_ADDR_VAR 0 7
27668: PUSH
27669: LD_EXP 68
27673: PUSH
27674: LD_VAR 0 2
27678: ARRAY
27679: PPUSH
27680: LD_INT 2
27682: PUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 58
27688: PUSH
27689: EMPTY
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 61
27698: PUSH
27699: EMPTY
27700: LIST
27701: PUSH
27702: LD_INT 33
27704: PUSH
27705: LD_INT 5
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 33
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 2
27731: PUSH
27732: LD_INT 34
27734: PUSH
27735: LD_INT 32
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 34
27744: PUSH
27745: LD_INT 51
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 34
27754: PUSH
27755: LD_INT 12
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PPUSH
27772: CALL_OW 72
27776: ST_TO_ADDR
// if not cargo then
27777: LD_VAR 0 7
27781: NOT
27782: IFFALSE 28325
// begin if mc_crates_collector [ i ] < 5 then
27784: LD_EXP 66
27788: PUSH
27789: LD_VAR 0 2
27793: ARRAY
27794: PUSH
27795: LD_INT 5
27797: LESS
27798: IFFALSE 28084
// begin if mc_ape [ i ] then
27800: LD_EXP 78
27804: PUSH
27805: LD_VAR 0 2
27809: ARRAY
27810: IFFALSE 27857
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
27812: LD_ADDR_VAR 0 5
27816: PUSH
27817: LD_EXP 78
27821: PUSH
27822: LD_VAR 0 2
27826: ARRAY
27827: PPUSH
27828: LD_INT 25
27830: PUSH
27831: LD_INT 16
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 24
27840: PUSH
27841: LD_INT 750
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PPUSH
27852: CALL_OW 72
27856: ST_TO_ADDR
// if not tmp then
27857: LD_VAR 0 5
27861: NOT
27862: IFFALSE 27911
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
27864: LD_ADDR_VAR 0 5
27868: PUSH
27869: LD_EXP 49
27873: PUSH
27874: LD_VAR 0 2
27878: ARRAY
27879: PPUSH
27880: LD_INT 25
27882: PUSH
27883: LD_INT 2
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: PUSH
27890: LD_INT 24
27892: PUSH
27893: LD_INT 750
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PPUSH
27904: CALL_OW 72
27908: ST_TO_ADDR
27909: GO 27972
// if tmp < 5 then
27911: LD_VAR 0 5
27915: PUSH
27916: LD_INT 5
27918: LESS
27919: IFFALSE 27972
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
27921: LD_ADDR_VAR 0 5
27925: PUSH
27926: LD_VAR 0 5
27930: PUSH
27931: LD_EXP 49
27935: PUSH
27936: LD_VAR 0 2
27940: ARRAY
27941: PPUSH
27942: LD_INT 25
27944: PUSH
27945: LD_INT 2
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 24
27954: PUSH
27955: LD_INT 750
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PPUSH
27966: CALL_OW 72
27970: UNION
27971: ST_TO_ADDR
// if not tmp then
27972: LD_VAR 0 5
27976: NOT
27977: IFFALSE 27981
// continue ;
27979: GO 27273
// for j in tmp do
27981: LD_ADDR_VAR 0 3
27985: PUSH
27986: LD_VAR 0 5
27990: PUSH
27991: FOR_IN
27992: IFFALSE 28082
// if not GetTag ( j ) then
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 110
28003: NOT
28004: IFFALSE 28080
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
28006: LD_ADDR_EXP 66
28010: PUSH
28011: LD_EXP 66
28015: PPUSH
28016: LD_VAR 0 2
28020: PUSH
28021: LD_EXP 66
28025: PUSH
28026: LD_VAR 0 2
28030: ARRAY
28031: PUSH
28032: LD_INT 1
28034: PLUS
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PPUSH
28040: LD_VAR 0 3
28044: PPUSH
28045: CALL 49064 0 3
28049: ST_TO_ADDR
// SetTag ( j , 107 ) ;
28050: LD_VAR 0 3
28054: PPUSH
28055: LD_INT 107
28057: PPUSH
28058: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
28062: LD_EXP 66
28066: PUSH
28067: LD_VAR 0 2
28071: ARRAY
28072: PUSH
28073: LD_INT 5
28075: GREATEREQUAL
28076: IFFALSE 28080
// break ;
28078: GO 28082
// end ;
28080: GO 27991
28082: POP
28083: POP
// end ; if mc_crates_collector [ i ] and target then
28084: LD_EXP 66
28088: PUSH
28089: LD_VAR 0 2
28093: ARRAY
28094: PUSH
28095: LD_VAR 0 6
28099: AND
28100: IFFALSE 28323
// begin if mc_crates_collector [ i ] < target [ 1 ] then
28102: LD_EXP 66
28106: PUSH
28107: LD_VAR 0 2
28111: ARRAY
28112: PUSH
28113: LD_VAR 0 6
28117: PUSH
28118: LD_INT 1
28120: ARRAY
28121: LESS
28122: IFFALSE 28142
// tmp := mc_crates_collector [ i ] else
28124: LD_ADDR_VAR 0 5
28128: PUSH
28129: LD_EXP 66
28133: PUSH
28134: LD_VAR 0 2
28138: ARRAY
28139: ST_TO_ADDR
28140: GO 28156
// tmp := target [ 1 ] ;
28142: LD_ADDR_VAR 0 5
28146: PUSH
28147: LD_VAR 0 6
28151: PUSH
28152: LD_INT 1
28154: ARRAY
28155: ST_TO_ADDR
// k := 0 ;
28156: LD_ADDR_VAR 0 4
28160: PUSH
28161: LD_INT 0
28163: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_EXP 66
28173: PUSH
28174: LD_VAR 0 2
28178: ARRAY
28179: PUSH
28180: FOR_IN
28181: IFFALSE 28321
// begin k := k + 1 ;
28183: LD_ADDR_VAR 0 4
28187: PUSH
28188: LD_VAR 0 4
28192: PUSH
28193: LD_INT 1
28195: PLUS
28196: ST_TO_ADDR
// if k > tmp then
28197: LD_VAR 0 4
28201: PUSH
28202: LD_VAR 0 5
28206: GREATER
28207: IFFALSE 28211
// break ;
28209: GO 28321
// if GetClass ( j ) <> 2 then
28211: LD_VAR 0 3
28215: PPUSH
28216: CALL_OW 257
28220: PUSH
28221: LD_INT 2
28223: NONEQUAL
28224: IFFALSE 28265
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
28226: LD_ADDR_EXP 66
28230: PUSH
28231: LD_EXP 66
28235: PPUSH
28236: LD_VAR 0 2
28240: PPUSH
28241: LD_EXP 66
28245: PUSH
28246: LD_VAR 0 2
28250: ARRAY
28251: PUSH
28252: LD_VAR 0 3
28256: DIFF
28257: PPUSH
28258: CALL_OW 1
28262: ST_TO_ADDR
// continue ;
28263: GO 28180
// end ; if IsInUnit ( j ) then
28265: LD_VAR 0 3
28269: PPUSH
28270: CALL_OW 310
28274: IFFALSE 28285
// ComExitBuilding ( j ) ;
28276: LD_VAR 0 3
28280: PPUSH
28281: CALL_OW 122
// wait ( 3 ) ;
28285: LD_INT 3
28287: PPUSH
28288: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
28292: LD_VAR 0 3
28296: PPUSH
28297: LD_VAR 0 6
28301: PUSH
28302: LD_INT 2
28304: ARRAY
28305: PPUSH
28306: LD_VAR 0 6
28310: PUSH
28311: LD_INT 3
28313: ARRAY
28314: PPUSH
28315: CALL_OW 117
// end ;
28319: GO 28180
28321: POP
28322: POP
// end ; end else
28323: GO 28788
// begin for j in cargo do
28325: LD_ADDR_VAR 0 3
28329: PUSH
28330: LD_VAR 0 7
28334: PUSH
28335: FOR_IN
28336: IFFALSE 28786
// begin if GetTag ( j ) <> 0 then
28338: LD_VAR 0 3
28342: PPUSH
28343: CALL_OW 110
28347: PUSH
28348: LD_INT 0
28350: NONEQUAL
28351: IFFALSE 28355
// continue ;
28353: GO 28335
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
28355: LD_VAR 0 3
28359: PPUSH
28360: CALL_OW 262
28364: PUSH
28365: LD_INT 2
28367: EQUAL
28368: PUSH
28369: LD_VAR 0 3
28373: PPUSH
28374: CALL_OW 261
28378: PUSH
28379: LD_INT 15
28381: LESS
28382: AND
28383: IFFALSE 28387
// continue ;
28385: GO 28335
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
28387: LD_VAR 0 3
28391: PPUSH
28392: CALL_OW 262
28396: PUSH
28397: LD_INT 1
28399: EQUAL
28400: PUSH
28401: LD_VAR 0 3
28405: PPUSH
28406: CALL_OW 261
28410: PUSH
28411: LD_INT 10
28413: LESS
28414: AND
28415: IFFALSE 28725
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28417: LD_ADDR_VAR 0 8
28421: PUSH
28422: LD_EXP 49
28426: PUSH
28427: LD_VAR 0 2
28431: ARRAY
28432: PPUSH
28433: LD_INT 2
28435: PUSH
28436: LD_INT 30
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 30
28448: PUSH
28449: LD_INT 1
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 72
28465: ST_TO_ADDR
// if not depot then
28466: LD_VAR 0 8
28470: NOT
28471: IFFALSE 28475
// continue ;
28473: GO 28335
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
28475: LD_VAR 0 3
28479: PPUSH
28480: LD_VAR 0 8
28484: PPUSH
28485: LD_VAR 0 3
28489: PPUSH
28490: CALL_OW 74
28494: PPUSH
28495: CALL_OW 296
28499: PUSH
28500: LD_INT 6
28502: LESS
28503: IFFALSE 28519
// SetFuel ( j , 100 ) else
28505: LD_VAR 0 3
28509: PPUSH
28510: LD_INT 100
28512: PPUSH
28513: CALL_OW 240
28517: GO 28725
// if GetFuel ( j ) = 0 then
28519: LD_VAR 0 3
28523: PPUSH
28524: CALL_OW 261
28528: PUSH
28529: LD_INT 0
28531: EQUAL
28532: IFFALSE 28725
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
28534: LD_ADDR_EXP 68
28538: PUSH
28539: LD_EXP 68
28543: PPUSH
28544: LD_VAR 0 2
28548: PPUSH
28549: LD_EXP 68
28553: PUSH
28554: LD_VAR 0 2
28558: ARRAY
28559: PUSH
28560: LD_VAR 0 3
28564: DIFF
28565: PPUSH
28566: CALL_OW 1
28570: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
28571: LD_VAR 0 3
28575: PPUSH
28576: CALL_OW 263
28580: PUSH
28581: LD_INT 1
28583: EQUAL
28584: IFFALSE 28600
// ComExitVehicle ( IsInUnit ( j ) ) ;
28586: LD_VAR 0 3
28590: PPUSH
28591: CALL_OW 310
28595: PPUSH
28596: CALL_OW 121
// if GetControl ( j ) = control_remote then
28600: LD_VAR 0 3
28604: PPUSH
28605: CALL_OW 263
28609: PUSH
28610: LD_INT 2
28612: EQUAL
28613: IFFALSE 28624
// ComUnlink ( j ) ;
28615: LD_VAR 0 3
28619: PPUSH
28620: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
28624: LD_ADDR_VAR 0 9
28628: PUSH
28629: LD_VAR 0 2
28633: PPUSH
28634: LD_INT 3
28636: PPUSH
28637: CALL 36907 0 2
28641: ST_TO_ADDR
// if fac then
28642: LD_VAR 0 9
28646: IFFALSE 28723
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
28648: LD_ADDR_VAR 0 10
28652: PUSH
28653: LD_VAR 0 9
28657: PPUSH
28658: LD_VAR 0 3
28662: PPUSH
28663: CALL_OW 265
28667: PPUSH
28668: LD_VAR 0 3
28672: PPUSH
28673: CALL_OW 262
28677: PPUSH
28678: LD_VAR 0 3
28682: PPUSH
28683: CALL_OW 263
28687: PPUSH
28688: LD_VAR 0 3
28692: PPUSH
28693: CALL_OW 264
28697: PPUSH
28698: CALL 46229 0 5
28702: ST_TO_ADDR
// if components then
28703: LD_VAR 0 10
28707: IFFALSE 28723
// MC_InsertProduceList ( i , components ) ;
28709: LD_VAR 0 2
28713: PPUSH
28714: LD_VAR 0 10
28718: PPUSH
28719: CALL 36474 0 2
// end ; continue ;
28723: GO 28335
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
28725: LD_VAR 0 3
28729: PPUSH
28730: LD_INT 1
28732: PPUSH
28733: CALL_OW 289
28737: PUSH
28738: LD_INT 100
28740: LESS
28741: PUSH
28742: LD_VAR 0 3
28746: PPUSH
28747: CALL_OW 314
28751: NOT
28752: AND
28753: IFFALSE 28782
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
28755: LD_VAR 0 3
28759: PPUSH
28760: LD_VAR 0 6
28764: PUSH
28765: LD_INT 2
28767: ARRAY
28768: PPUSH
28769: LD_VAR 0 6
28773: PUSH
28774: LD_INT 3
28776: ARRAY
28777: PPUSH
28778: CALL_OW 117
// break ;
28782: GO 28786
// end ;
28784: GO 28335
28786: POP
28787: POP
// end ; end ;
28788: GO 27273
28790: POP
28791: POP
// end ;
28792: LD_VAR 0 1
28796: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
28797: LD_INT 0
28799: PPUSH
28800: PPUSH
28801: PPUSH
28802: PPUSH
// if not mc_bases then
28803: LD_EXP 49
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 28973
// for i = 1 to mc_bases do
28812: LD_ADDR_VAR 0 2
28816: PUSH
28817: DOUBLE
28818: LD_INT 1
28820: DEC
28821: ST_TO_ADDR
28822: LD_EXP 49
28826: PUSH
28827: FOR_TO
28828: IFFALSE 28971
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
28830: LD_ADDR_VAR 0 4
28834: PUSH
28835: LD_EXP 68
28839: PUSH
28840: LD_VAR 0 2
28844: ARRAY
28845: PUSH
28846: LD_EXP 71
28850: PUSH
28851: LD_VAR 0 2
28855: ARRAY
28856: ADD
28857: PPUSH
28858: LD_INT 33
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PPUSH
28868: CALL_OW 72
28872: ST_TO_ADDR
// if tmp then
28873: LD_VAR 0 4
28877: IFFALSE 28969
// for j in tmp do
28879: LD_ADDR_VAR 0 3
28883: PUSH
28884: LD_VAR 0 4
28888: PUSH
28889: FOR_IN
28890: IFFALSE 28967
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
28892: LD_VAR 0 3
28896: PPUSH
28897: CALL_OW 312
28901: NOT
28902: PUSH
28903: LD_VAR 0 3
28907: PPUSH
28908: CALL_OW 256
28912: PUSH
28913: LD_INT 250
28915: GREATEREQUAL
28916: AND
28917: IFFALSE 28930
// Connect ( j ) else
28919: LD_VAR 0 3
28923: PPUSH
28924: CALL 51582 0 1
28928: GO 28965
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
28930: LD_VAR 0 3
28934: PPUSH
28935: CALL_OW 256
28939: PUSH
28940: LD_INT 250
28942: LESS
28943: PUSH
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 312
28953: AND
28954: IFFALSE 28965
// ComUnlink ( j ) ;
28956: LD_VAR 0 3
28960: PPUSH
28961: CALL_OW 136
28965: GO 28889
28967: POP
28968: POP
// end ;
28969: GO 28827
28971: POP
28972: POP
// end ;
28973: LD_VAR 0 1
28977: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
28978: LD_INT 0
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
// if not mc_bases then
28985: LD_EXP 49
28989: NOT
28990: IFFALSE 28994
// exit ;
28992: GO 29454
// for i = 1 to mc_bases do
28994: LD_ADDR_VAR 0 2
28998: PUSH
28999: DOUBLE
29000: LD_INT 1
29002: DEC
29003: ST_TO_ADDR
29004: LD_EXP 49
29008: PUSH
29009: FOR_TO
29010: IFFALSE 29452
// begin if not mc_produce [ i ] then
29012: LD_EXP 70
29016: PUSH
29017: LD_VAR 0 2
29021: ARRAY
29022: NOT
29023: IFFALSE 29027
// continue ;
29025: GO 29009
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
29027: LD_ADDR_VAR 0 5
29031: PUSH
29032: LD_EXP 49
29036: PUSH
29037: LD_VAR 0 2
29041: ARRAY
29042: PPUSH
29043: LD_INT 30
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PPUSH
29053: CALL_OW 72
29057: ST_TO_ADDR
// if not fac then
29058: LD_VAR 0 5
29062: NOT
29063: IFFALSE 29067
// continue ;
29065: GO 29009
// for j in fac do
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_VAR 0 5
29076: PUSH
29077: FOR_IN
29078: IFFALSE 29448
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
29080: LD_VAR 0 3
29084: PPUSH
29085: CALL_OW 461
29089: PUSH
29090: LD_INT 2
29092: NONEQUAL
29093: PUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: LD_INT 15
29101: PPUSH
29102: CALL 51255 0 2
29106: PUSH
29107: LD_INT 4
29109: ARRAY
29110: OR
29111: PUSH
29112: LD_VAR 0 3
29116: PPUSH
29117: CALL_OW 313
29121: PUSH
29122: LD_INT 0
29124: EQUAL
29125: OR
29126: IFFALSE 29130
// continue ;
29128: GO 29077
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
29130: LD_VAR 0 3
29134: PPUSH
29135: LD_EXP 70
29139: PUSH
29140: LD_VAR 0 2
29144: ARRAY
29145: PUSH
29146: LD_INT 1
29148: ARRAY
29149: PUSH
29150: LD_INT 1
29152: ARRAY
29153: PPUSH
29154: LD_EXP 70
29158: PUSH
29159: LD_VAR 0 2
29163: ARRAY
29164: PUSH
29165: LD_INT 1
29167: ARRAY
29168: PUSH
29169: LD_INT 2
29171: ARRAY
29172: PPUSH
29173: LD_EXP 70
29177: PUSH
29178: LD_VAR 0 2
29182: ARRAY
29183: PUSH
29184: LD_INT 1
29186: ARRAY
29187: PUSH
29188: LD_INT 3
29190: ARRAY
29191: PPUSH
29192: LD_EXP 70
29196: PUSH
29197: LD_VAR 0 2
29201: ARRAY
29202: PUSH
29203: LD_INT 1
29205: ARRAY
29206: PUSH
29207: LD_INT 4
29209: ARRAY
29210: PPUSH
29211: CALL_OW 448
29215: PUSH
29216: LD_VAR 0 3
29220: PPUSH
29221: LD_EXP 70
29225: PUSH
29226: LD_VAR 0 2
29230: ARRAY
29231: PUSH
29232: LD_INT 1
29234: ARRAY
29235: PUSH
29236: LD_INT 1
29238: ARRAY
29239: PUSH
29240: LD_EXP 70
29244: PUSH
29245: LD_VAR 0 2
29249: ARRAY
29250: PUSH
29251: LD_INT 1
29253: ARRAY
29254: PUSH
29255: LD_INT 2
29257: ARRAY
29258: PUSH
29259: LD_EXP 70
29263: PUSH
29264: LD_VAR 0 2
29268: ARRAY
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PUSH
29274: LD_INT 3
29276: ARRAY
29277: PUSH
29278: LD_EXP 70
29282: PUSH
29283: LD_VAR 0 2
29287: ARRAY
29288: PUSH
29289: LD_INT 1
29291: ARRAY
29292: PUSH
29293: LD_INT 4
29295: ARRAY
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: PPUSH
29303: CALL 54676 0 2
29307: AND
29308: IFFALSE 29446
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
29310: LD_VAR 0 3
29314: PPUSH
29315: LD_EXP 70
29319: PUSH
29320: LD_VAR 0 2
29324: ARRAY
29325: PUSH
29326: LD_INT 1
29328: ARRAY
29329: PUSH
29330: LD_INT 1
29332: ARRAY
29333: PPUSH
29334: LD_EXP 70
29338: PUSH
29339: LD_VAR 0 2
29343: ARRAY
29344: PUSH
29345: LD_INT 1
29347: ARRAY
29348: PUSH
29349: LD_INT 2
29351: ARRAY
29352: PPUSH
29353: LD_EXP 70
29357: PUSH
29358: LD_VAR 0 2
29362: ARRAY
29363: PUSH
29364: LD_INT 1
29366: ARRAY
29367: PUSH
29368: LD_INT 3
29370: ARRAY
29371: PPUSH
29372: LD_EXP 70
29376: PUSH
29377: LD_VAR 0 2
29381: ARRAY
29382: PUSH
29383: LD_INT 1
29385: ARRAY
29386: PUSH
29387: LD_INT 4
29389: ARRAY
29390: PPUSH
29391: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
29395: LD_ADDR_VAR 0 4
29399: PUSH
29400: LD_EXP 70
29404: PUSH
29405: LD_VAR 0 2
29409: ARRAY
29410: PPUSH
29411: LD_INT 1
29413: PPUSH
29414: CALL_OW 3
29418: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
29419: LD_ADDR_EXP 70
29423: PUSH
29424: LD_EXP 70
29428: PPUSH
29429: LD_VAR 0 2
29433: PPUSH
29434: LD_VAR 0 4
29438: PPUSH
29439: CALL_OW 1
29443: ST_TO_ADDR
// break ;
29444: GO 29448
// end ; end ;
29446: GO 29077
29448: POP
29449: POP
// end ;
29450: GO 29009
29452: POP
29453: POP
// end ;
29454: LD_VAR 0 1
29458: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
29463: PPUSH
// if not mc_bases then
29464: LD_EXP 49
29468: NOT
29469: IFFALSE 29473
// exit ;
29471: GO 29562
// for i = 1 to mc_bases do
29473: LD_ADDR_VAR 0 2
29477: PUSH
29478: DOUBLE
29479: LD_INT 1
29481: DEC
29482: ST_TO_ADDR
29483: LD_EXP 49
29487: PUSH
29488: FOR_TO
29489: IFFALSE 29560
// begin if mc_attack [ i ] then
29491: LD_EXP 69
29495: PUSH
29496: LD_VAR 0 2
29500: ARRAY
29501: IFFALSE 29558
// begin tmp := mc_attack [ i ] [ 1 ] ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_EXP 69
29512: PUSH
29513: LD_VAR 0 2
29517: ARRAY
29518: PUSH
29519: LD_INT 1
29521: ARRAY
29522: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
29523: LD_ADDR_EXP 69
29527: PUSH
29528: LD_EXP 69
29532: PPUSH
29533: LD_VAR 0 2
29537: PPUSH
29538: EMPTY
29539: PPUSH
29540: CALL_OW 1
29544: ST_TO_ADDR
// Attack ( tmp ) ;
29545: LD_VAR 0 3
29549: PPUSH
29550: CALL 76608 0 1
// exit ;
29554: POP
29555: POP
29556: GO 29562
// end ; end ;
29558: GO 29488
29560: POP
29561: POP
// end ;
29562: LD_VAR 0 1
29566: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
29567: LD_INT 0
29569: PPUSH
29570: PPUSH
29571: PPUSH
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
// if not mc_bases then
29576: LD_EXP 49
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 30115
// for i = 1 to mc_bases do
29585: LD_ADDR_VAR 0 2
29589: PUSH
29590: DOUBLE
29591: LD_INT 1
29593: DEC
29594: ST_TO_ADDR
29595: LD_EXP 49
29599: PUSH
29600: FOR_TO
29601: IFFALSE 30113
// begin if not mc_bases [ i ] then
29603: LD_EXP 49
29607: PUSH
29608: LD_VAR 0 2
29612: ARRAY
29613: NOT
29614: IFFALSE 29618
// continue ;
29616: GO 29600
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
29618: LD_ADDR_VAR 0 7
29622: PUSH
29623: LD_EXP 49
29627: PUSH
29628: LD_VAR 0 2
29632: ARRAY
29633: PUSH
29634: LD_INT 1
29636: ARRAY
29637: PPUSH
29638: CALL 45533 0 1
29642: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
29643: LD_ADDR_EXP 72
29647: PUSH
29648: LD_EXP 72
29652: PPUSH
29653: LD_VAR 0 2
29657: PPUSH
29658: LD_EXP 49
29662: PUSH
29663: LD_VAR 0 2
29667: ARRAY
29668: PUSH
29669: LD_INT 1
29671: ARRAY
29672: PPUSH
29673: CALL_OW 255
29677: PPUSH
29678: LD_EXP 74
29682: PUSH
29683: LD_VAR 0 2
29687: ARRAY
29688: PPUSH
29689: CALL 43505 0 2
29693: PPUSH
29694: CALL_OW 1
29698: ST_TO_ADDR
// if not mc_scan [ i ] then
29699: LD_EXP 72
29703: PUSH
29704: LD_VAR 0 2
29708: ARRAY
29709: NOT
29710: IFFALSE 29865
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
29712: LD_ADDR_VAR 0 4
29716: PUSH
29717: LD_EXP 49
29721: PUSH
29722: LD_VAR 0 2
29726: ARRAY
29727: PPUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 8
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 9
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: PPUSH
29767: CALL_OW 72
29771: ST_TO_ADDR
// if not tmp then
29772: LD_VAR 0 4
29776: NOT
29777: IFFALSE 29781
// continue ;
29779: GO 29600
// for j in tmp do
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: LD_VAR 0 4
29790: PUSH
29791: FOR_IN
29792: IFFALSE 29863
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
29794: LD_VAR 0 3
29798: PPUSH
29799: CALL_OW 310
29803: PPUSH
29804: CALL_OW 266
29808: PUSH
29809: LD_INT 5
29811: EQUAL
29812: PUSH
29813: LD_VAR 0 3
29817: PPUSH
29818: CALL_OW 257
29822: PUSH
29823: LD_INT 1
29825: EQUAL
29826: AND
29827: PUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 459
29837: NOT
29838: AND
29839: PUSH
29840: LD_VAR 0 7
29844: AND
29845: IFFALSE 29861
// ComChangeProfession ( j , class ) ;
29847: LD_VAR 0 3
29851: PPUSH
29852: LD_VAR 0 7
29856: PPUSH
29857: CALL_OW 123
29861: GO 29791
29863: POP
29864: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] then
29865: LD_EXP 72
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PUSH
29876: LD_EXP 71
29880: PUSH
29881: LD_VAR 0 2
29885: ARRAY
29886: NOT
29887: AND
29888: IFFALSE 30020
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
29890: LD_ADDR_VAR 0 4
29894: PUSH
29895: LD_EXP 49
29899: PUSH
29900: LD_VAR 0 2
29904: ARRAY
29905: PPUSH
29906: LD_INT 2
29908: PUSH
29909: LD_INT 25
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 25
29921: PUSH
29922: LD_INT 5
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 25
29931: PUSH
29932: LD_INT 8
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 25
29941: PUSH
29942: LD_INT 9
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: PPUSH
29956: CALL_OW 72
29960: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
29961: LD_ADDR_VAR 0 4
29965: PUSH
29966: LD_VAR 0 4
29970: PUSH
29971: LD_VAR 0 4
29975: PPUSH
29976: LD_INT 18
29978: PPUSH
29979: CALL 80056 0 2
29983: DIFF
29984: ST_TO_ADDR
// if tmp then
29985: LD_VAR 0 4
29989: IFFALSE 30020
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
29991: LD_VAR 0 2
29995: PPUSH
29996: LD_VAR 0 4
30000: PPUSH
30001: LD_EXP 74
30005: PUSH
30006: LD_VAR 0 2
30010: ARRAY
30011: PPUSH
30012: CALL 43540 0 3
// exit ;
30016: POP
30017: POP
30018: GO 30115
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
30020: LD_EXP 72
30024: PUSH
30025: LD_VAR 0 2
30029: ARRAY
30030: PUSH
30031: LD_EXP 71
30035: PUSH
30036: LD_VAR 0 2
30040: ARRAY
30041: AND
30042: IFFALSE 30111
// begin tmp := mc_defender [ i ] ;
30044: LD_ADDR_VAR 0 4
30048: PUSH
30049: LD_EXP 71
30053: PUSH
30054: LD_VAR 0 2
30058: ARRAY
30059: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
30060: LD_ADDR_EXP 71
30064: PUSH
30065: LD_EXP 71
30069: PPUSH
30070: LD_VAR 0 2
30074: PPUSH
30075: EMPTY
30076: PPUSH
30077: CALL_OW 1
30081: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
30082: LD_VAR 0 2
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: LD_EXP 72
30096: PUSH
30097: LD_VAR 0 2
30101: ARRAY
30102: PPUSH
30103: CALL 44026 0 3
// exit ;
30107: POP
30108: POP
30109: GO 30115
// end ; end ;
30111: GO 29600
30113: POP
30114: POP
// end ;
30115: LD_VAR 0 1
30119: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
30120: LD_INT 0
30122: PPUSH
30123: PPUSH
30124: PPUSH
30125: PPUSH
30126: PPUSH
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
// if not mc_bases then
30131: LD_EXP 49
30135: NOT
30136: IFFALSE 30140
// exit ;
30138: GO 31084
// for i = 1 to mc_bases do
30140: LD_ADDR_VAR 0 2
30144: PUSH
30145: DOUBLE
30146: LD_INT 1
30148: DEC
30149: ST_TO_ADDR
30150: LD_EXP 49
30154: PUSH
30155: FOR_TO
30156: IFFALSE 31082
// begin tmp := mc_lab [ i ] ;
30158: LD_ADDR_VAR 0 6
30162: PUSH
30163: LD_EXP 82
30167: PUSH
30168: LD_VAR 0 2
30172: ARRAY
30173: ST_TO_ADDR
// if not tmp then
30174: LD_VAR 0 6
30178: NOT
30179: IFFALSE 30183
// continue ;
30181: GO 30155
// for j in tmp do
30183: LD_ADDR_VAR 0 3
30187: PUSH
30188: LD_VAR 0 6
30192: PUSH
30193: FOR_IN
30194: IFFALSE 31078
// begin side := GetSide ( j ) ;
30196: LD_ADDR_VAR 0 4
30200: PUSH
30201: LD_VAR 0 3
30205: PPUSH
30206: CALL_OW 255
30210: ST_TO_ADDR
// if not mc_tech [ side ] then
30211: LD_EXP 76
30215: PUSH
30216: LD_VAR 0 4
30220: ARRAY
30221: NOT
30222: IFFALSE 30226
// continue ;
30224: GO 30193
// if BuildingStatus ( j ) = bs_idle then
30226: LD_VAR 0 3
30230: PPUSH
30231: CALL_OW 461
30235: PUSH
30236: LD_INT 2
30238: EQUAL
30239: IFFALSE 30312
// for t in mc_tech [ side ] do
30241: LD_ADDR_VAR 0 5
30245: PUSH
30246: LD_EXP 76
30250: PUSH
30251: LD_VAR 0 4
30255: ARRAY
30256: PUSH
30257: FOR_IN
30258: IFFALSE 30310
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
30260: LD_VAR 0 3
30264: PPUSH
30265: LD_VAR 0 5
30269: PPUSH
30270: CALL_OW 430
30274: PUSH
30275: LD_VAR 0 4
30279: PPUSH
30280: LD_VAR 0 5
30284: PPUSH
30285: CALL 42613 0 2
30289: AND
30290: IFFALSE 30308
// begin ComResearch ( j , t ) ;
30292: LD_VAR 0 3
30296: PPUSH
30297: LD_VAR 0 5
30301: PPUSH
30302: CALL_OW 124
// break ;
30306: GO 30310
// end ;
30308: GO 30257
30310: POP
30311: POP
// if BuildingStatus ( j ) = bs_need_ape then
30312: LD_VAR 0 3
30316: PPUSH
30317: CALL_OW 461
30321: PUSH
30322: LD_INT 10
30324: EQUAL
30325: IFFALSE 30913
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
30327: LD_EXP 78
30331: PUSH
30332: LD_VAR 0 2
30336: ARRAY
30337: NOT
30338: PUSH
30339: LD_EXP 79
30343: PUSH
30344: LD_VAR 0 2
30348: ARRAY
30349: NOT
30350: AND
30351: PUSH
30352: LD_EXP 76
30356: PUSH
30357: LD_VAR 0 4
30361: ARRAY
30362: PUSH
30363: LD_INT 1
30365: GREATER
30366: AND
30367: IFFALSE 30498
// begin ComCancel ( j ) ;
30369: LD_VAR 0 3
30373: PPUSH
30374: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
30378: LD_ADDR_EXP 76
30382: PUSH
30383: LD_EXP 76
30387: PPUSH
30388: LD_VAR 0 4
30392: PPUSH
30393: LD_EXP 76
30397: PUSH
30398: LD_VAR 0 4
30402: ARRAY
30403: PPUSH
30404: LD_EXP 76
30408: PUSH
30409: LD_VAR 0 4
30413: ARRAY
30414: PUSH
30415: LD_INT 1
30417: MINUS
30418: PPUSH
30419: LD_EXP 76
30423: PUSH
30424: LD_VAR 0 4
30428: ARRAY
30429: PPUSH
30430: LD_INT 0
30432: PPUSH
30433: CALL 48047 0 4
30437: PPUSH
30438: CALL_OW 1
30442: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
30443: LD_ADDR_EXP 76
30447: PUSH
30448: LD_EXP 76
30452: PPUSH
30453: LD_VAR 0 4
30457: PPUSH
30458: LD_EXP 76
30462: PUSH
30463: LD_VAR 0 4
30467: ARRAY
30468: PPUSH
30469: LD_EXP 76
30473: PUSH
30474: LD_VAR 0 4
30478: ARRAY
30479: PPUSH
30480: LD_INT 1
30482: PPUSH
30483: LD_INT 0
30485: PPUSH
30486: CALL 48047 0 4
30490: PPUSH
30491: CALL_OW 1
30495: ST_TO_ADDR
// continue ;
30496: GO 30193
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
30498: LD_EXP 78
30502: PUSH
30503: LD_VAR 0 2
30507: ARRAY
30508: PUSH
30509: LD_EXP 79
30513: PUSH
30514: LD_VAR 0 2
30518: ARRAY
30519: NOT
30520: AND
30521: IFFALSE 30648
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
30523: LD_ADDR_EXP 79
30527: PUSH
30528: LD_EXP 79
30532: PPUSH
30533: LD_VAR 0 2
30537: PUSH
30538: LD_EXP 79
30542: PUSH
30543: LD_VAR 0 2
30547: ARRAY
30548: PUSH
30549: LD_INT 1
30551: PLUS
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PPUSH
30557: LD_EXP 78
30561: PUSH
30562: LD_VAR 0 2
30566: ARRAY
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: PPUSH
30572: CALL 49064 0 3
30576: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
30577: LD_EXP 78
30581: PUSH
30582: LD_VAR 0 2
30586: ARRAY
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PPUSH
30592: LD_INT 112
30594: PPUSH
30595: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
30599: LD_ADDR_VAR 0 9
30603: PUSH
30604: LD_EXP 78
30608: PUSH
30609: LD_VAR 0 2
30613: ARRAY
30614: PPUSH
30615: LD_INT 1
30617: PPUSH
30618: CALL_OW 3
30622: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
30623: LD_ADDR_EXP 78
30627: PUSH
30628: LD_EXP 78
30632: PPUSH
30633: LD_VAR 0 2
30637: PPUSH
30638: LD_VAR 0 9
30642: PPUSH
30643: CALL_OW 1
30647: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
30648: LD_EXP 78
30652: PUSH
30653: LD_VAR 0 2
30657: ARRAY
30658: PUSH
30659: LD_EXP 79
30663: PUSH
30664: LD_VAR 0 2
30668: ARRAY
30669: AND
30670: PUSH
30671: LD_EXP 79
30675: PUSH
30676: LD_VAR 0 2
30680: ARRAY
30681: PUSH
30682: LD_INT 1
30684: ARRAY
30685: PPUSH
30686: CALL_OW 310
30690: NOT
30691: AND
30692: PUSH
30693: LD_VAR 0 3
30697: PPUSH
30698: CALL_OW 313
30702: PUSH
30703: LD_INT 6
30705: EQUAL
30706: AND
30707: IFFALSE 30763
// begin tmp2 := UnitsInside ( j ) ;
30709: LD_ADDR_VAR 0 9
30713: PUSH
30714: LD_VAR 0 3
30718: PPUSH
30719: CALL_OW 313
30723: ST_TO_ADDR
// if tmp2 = 6 then
30724: LD_VAR 0 9
30728: PUSH
30729: LD_INT 6
30731: EQUAL
30732: IFFALSE 30763
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
30734: LD_VAR 0 9
30738: PUSH
30739: LD_INT 1
30741: ARRAY
30742: PPUSH
30743: LD_INT 112
30745: PPUSH
30746: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
30750: LD_VAR 0 9
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
30763: LD_EXP 79
30767: PUSH
30768: LD_VAR 0 2
30772: ARRAY
30773: PUSH
30774: LD_EXP 79
30778: PUSH
30779: LD_VAR 0 2
30783: ARRAY
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PPUSH
30789: CALL_OW 314
30793: NOT
30794: AND
30795: PUSH
30796: LD_EXP 79
30800: PUSH
30801: LD_VAR 0 2
30805: ARRAY
30806: PUSH
30807: LD_INT 1
30809: ARRAY
30810: PPUSH
30811: CALL_OW 310
30815: NOT
30816: AND
30817: IFFALSE 30843
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
30819: LD_EXP 79
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: PUSH
30830: LD_INT 1
30832: ARRAY
30833: PPUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
30843: LD_EXP 79
30847: PUSH
30848: LD_VAR 0 2
30852: ARRAY
30853: PUSH
30854: LD_INT 1
30856: ARRAY
30857: PPUSH
30858: CALL_OW 310
30862: PUSH
30863: LD_EXP 79
30867: PUSH
30868: LD_VAR 0 2
30872: ARRAY
30873: PUSH
30874: LD_INT 1
30876: ARRAY
30877: PPUSH
30878: CALL_OW 310
30882: PPUSH
30883: CALL_OW 461
30887: PUSH
30888: LD_INT 3
30890: NONEQUAL
30891: AND
30892: IFFALSE 30913
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
30894: LD_EXP 79
30898: PUSH
30899: LD_VAR 0 2
30903: ARRAY
30904: PUSH
30905: LD_INT 1
30907: ARRAY
30908: PPUSH
30909: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
30913: LD_VAR 0 3
30917: PPUSH
30918: CALL_OW 461
30922: PUSH
30923: LD_INT 6
30925: EQUAL
30926: PUSH
30927: LD_VAR 0 6
30931: PUSH
30932: LD_INT 1
30934: GREATER
30935: AND
30936: IFFALSE 31076
// begin sci := [ ] ;
30938: LD_ADDR_VAR 0 8
30942: PUSH
30943: EMPTY
30944: ST_TO_ADDR
// for x in tmp diff j do
30945: LD_ADDR_VAR 0 7
30949: PUSH
30950: LD_VAR 0 6
30954: PUSH
30955: LD_VAR 0 3
30959: DIFF
30960: PUSH
30961: FOR_IN
30962: IFFALSE 31002
// begin if BuildingStatus ( x ) = bs_idle then
30964: LD_VAR 0 7
30968: PPUSH
30969: CALL_OW 461
30973: PUSH
30974: LD_INT 2
30976: EQUAL
30977: IFFALSE 31000
// sci := sci ^ UnitsInside ( x ) ;
30979: LD_ADDR_VAR 0 8
30983: PUSH
30984: LD_VAR 0 8
30988: PUSH
30989: LD_VAR 0 7
30993: PPUSH
30994: CALL_OW 313
30998: ADD
30999: ST_TO_ADDR
// end ;
31000: GO 30961
31002: POP
31003: POP
// if not sci then
31004: LD_VAR 0 8
31008: NOT
31009: IFFALSE 31013
// continue ;
31011: GO 30193
// for x in sci do
31013: LD_ADDR_VAR 0 7
31017: PUSH
31018: LD_VAR 0 8
31022: PUSH
31023: FOR_IN
31024: IFFALSE 31074
// if IsInUnit ( x ) and not HasTask ( x ) then
31026: LD_VAR 0 7
31030: PPUSH
31031: CALL_OW 310
31035: PUSH
31036: LD_VAR 0 7
31040: PPUSH
31041: CALL_OW 314
31045: NOT
31046: AND
31047: IFFALSE 31072
// begin ComExitBuilding ( x ) ;
31049: LD_VAR 0 7
31053: PPUSH
31054: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31058: LD_VAR 0 7
31062: PPUSH
31063: LD_VAR 0 3
31067: PPUSH
31068: CALL_OW 180
// end ;
31072: GO 31023
31074: POP
31075: POP
// end ; end ;
31076: GO 30193
31078: POP
31079: POP
// end ;
31080: GO 30155
31082: POP
31083: POP
// end ;
31084: LD_VAR 0 1
31088: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
31089: LD_INT 0
31091: PPUSH
31092: PPUSH
// if not mc_bases then
31093: LD_EXP 49
31097: NOT
31098: IFFALSE 31102
// exit ;
31100: GO 31183
// for i = 1 to mc_bases do
31102: LD_ADDR_VAR 0 2
31106: PUSH
31107: DOUBLE
31108: LD_INT 1
31110: DEC
31111: ST_TO_ADDR
31112: LD_EXP 49
31116: PUSH
31117: FOR_TO
31118: IFFALSE 31181
// if mc_mines [ i ] and mc_miners [ i ] then
31120: LD_EXP 62
31124: PUSH
31125: LD_VAR 0 2
31129: ARRAY
31130: PUSH
31131: LD_EXP 63
31135: PUSH
31136: LD_VAR 0 2
31140: ARRAY
31141: AND
31142: IFFALSE 31179
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
31144: LD_EXP 63
31148: PUSH
31149: LD_VAR 0 2
31153: ARRAY
31154: PUSH
31155: LD_INT 1
31157: ARRAY
31158: PPUSH
31159: CALL_OW 255
31163: PPUSH
31164: LD_EXP 62
31168: PUSH
31169: LD_VAR 0 2
31173: ARRAY
31174: PPUSH
31175: CALL 45686 0 2
31179: GO 31117
31181: POP
31182: POP
// end ;
31183: LD_VAR 0 1
31187: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
31188: LD_INT 0
31190: PPUSH
31191: PPUSH
31192: PPUSH
31193: PPUSH
31194: PPUSH
31195: PPUSH
31196: PPUSH
31197: PPUSH
// if not mc_bases or not mc_parking then
31198: LD_EXP 49
31202: NOT
31203: PUSH
31204: LD_EXP 73
31208: NOT
31209: OR
31210: IFFALSE 31214
// exit ;
31212: GO 31926
// for i = 1 to mc_bases do
31214: LD_ADDR_VAR 0 2
31218: PUSH
31219: DOUBLE
31220: LD_INT 1
31222: DEC
31223: ST_TO_ADDR
31224: LD_EXP 49
31228: PUSH
31229: FOR_TO
31230: IFFALSE 31924
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
31232: LD_EXP 49
31236: PUSH
31237: LD_VAR 0 2
31241: ARRAY
31242: NOT
31243: PUSH
31244: LD_EXP 73
31248: PUSH
31249: LD_VAR 0 2
31253: ARRAY
31254: NOT
31255: OR
31256: IFFALSE 31260
// continue ;
31258: GO 31229
// if mc_scan [ i ] then
31260: LD_EXP 72
31264: PUSH
31265: LD_VAR 0 2
31269: ARRAY
31270: IFFALSE 31296
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
31272: LD_ADDR_EXP 61
31276: PUSH
31277: LD_EXP 61
31281: PPUSH
31282: LD_VAR 0 2
31286: PPUSH
31287: EMPTY
31288: PPUSH
31289: CALL_OW 1
31293: ST_TO_ADDR
// continue ;
31294: GO 31229
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
31296: LD_ADDR_VAR 0 5
31300: PUSH
31301: LD_EXP 49
31305: PUSH
31306: LD_VAR 0 2
31310: ARRAY
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PPUSH
31316: CALL_OW 255
31320: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31321: LD_ADDR_VAR 0 6
31325: PUSH
31326: LD_EXP 49
31330: PUSH
31331: LD_VAR 0 2
31335: ARRAY
31336: PPUSH
31337: LD_INT 30
31339: PUSH
31340: LD_INT 3
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PPUSH
31347: CALL_OW 72
31351: ST_TO_ADDR
// if not fac then
31352: LD_VAR 0 6
31356: NOT
31357: IFFALSE 31408
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31359: LD_ADDR_VAR 0 6
31363: PUSH
31364: LD_EXP 49
31368: PUSH
31369: LD_VAR 0 2
31373: ARRAY
31374: PPUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 30
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 30
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: LIST
31402: PPUSH
31403: CALL_OW 72
31407: ST_TO_ADDR
// if not fac then
31408: LD_VAR 0 6
31412: NOT
31413: IFFALSE 31417
// continue ;
31415: GO 31229
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
31417: LD_ADDR_VAR 0 7
31421: PUSH
31422: LD_EXP 73
31426: PUSH
31427: LD_VAR 0 2
31431: ARRAY
31432: PPUSH
31433: LD_INT 22
31435: PUSH
31436: LD_VAR 0 5
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 21
31447: PUSH
31448: LD_INT 2
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 24
31460: PUSH
31461: LD_INT 1000
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: PPUSH
31477: CALL_OW 70
31481: PUSH
31482: LD_INT 22
31484: PUSH
31485: LD_VAR 0 5
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 91
31496: PUSH
31497: LD_VAR 0 6
31501: PUSH
31502: LD_INT 1
31504: ARRAY
31505: PUSH
31506: LD_INT 25
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 21
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: PUSH
31527: LD_INT 24
31529: PUSH
31530: LD_INT 1000
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: PPUSH
31547: CALL_OW 69
31551: UNION
31552: ST_TO_ADDR
// if not vehs then
31553: LD_VAR 0 7
31557: NOT
31558: IFFALSE 31584
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
31560: LD_ADDR_EXP 61
31564: PUSH
31565: LD_EXP 61
31569: PPUSH
31570: LD_VAR 0 2
31574: PPUSH
31575: EMPTY
31576: PPUSH
31577: CALL_OW 1
31581: ST_TO_ADDR
// continue ;
31582: GO 31229
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
31584: LD_ADDR_VAR 0 8
31588: PUSH
31589: LD_EXP 49
31593: PUSH
31594: LD_VAR 0 2
31598: ARRAY
31599: PPUSH
31600: LD_INT 30
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 72
31614: ST_TO_ADDR
// if tmp then
31615: LD_VAR 0 8
31619: IFFALSE 31722
// begin for j in tmp do
31621: LD_ADDR_VAR 0 3
31625: PUSH
31626: LD_VAR 0 8
31630: PUSH
31631: FOR_IN
31632: IFFALSE 31720
// for k in UnitsInside ( j ) do
31634: LD_ADDR_VAR 0 4
31638: PUSH
31639: LD_VAR 0 3
31643: PPUSH
31644: CALL_OW 313
31648: PUSH
31649: FOR_IN
31650: IFFALSE 31716
// if k then
31652: LD_VAR 0 4
31656: IFFALSE 31714
// if not k in mc_repair_vehicle [ i ] then
31658: LD_VAR 0 4
31662: PUSH
31663: LD_EXP 61
31667: PUSH
31668: LD_VAR 0 2
31672: ARRAY
31673: IN
31674: NOT
31675: IFFALSE 31714
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
31677: LD_ADDR_EXP 61
31681: PUSH
31682: LD_EXP 61
31686: PPUSH
31687: LD_VAR 0 2
31691: PPUSH
31692: LD_EXP 61
31696: PUSH
31697: LD_VAR 0 2
31701: ARRAY
31702: PUSH
31703: LD_VAR 0 4
31707: UNION
31708: PPUSH
31709: CALL_OW 1
31713: ST_TO_ADDR
31714: GO 31649
31716: POP
31717: POP
31718: GO 31631
31720: POP
31721: POP
// end ; if not mc_repair_vehicle [ i ] then
31722: LD_EXP 61
31726: PUSH
31727: LD_VAR 0 2
31731: ARRAY
31732: NOT
31733: IFFALSE 31737
// continue ;
31735: GO 31229
// for j in mc_repair_vehicle [ i ] do
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: LD_EXP 61
31746: PUSH
31747: LD_VAR 0 2
31751: ARRAY
31752: PUSH
31753: FOR_IN
31754: IFFALSE 31920
// begin if GetClass ( j ) <> 3 then
31756: LD_VAR 0 3
31760: PPUSH
31761: CALL_OW 257
31765: PUSH
31766: LD_INT 3
31768: NONEQUAL
31769: IFFALSE 31810
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
31771: LD_ADDR_EXP 61
31775: PUSH
31776: LD_EXP 61
31780: PPUSH
31781: LD_VAR 0 2
31785: PPUSH
31786: LD_EXP 61
31790: PUSH
31791: LD_VAR 0 2
31795: ARRAY
31796: PUSH
31797: LD_VAR 0 3
31801: DIFF
31802: PPUSH
31803: CALL_OW 1
31807: ST_TO_ADDR
// continue ;
31808: GO 31753
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
31810: LD_VAR 0 3
31814: PPUSH
31815: CALL_OW 311
31819: NOT
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_EXP 52
31830: PUSH
31831: LD_VAR 0 2
31835: ARRAY
31836: PUSH
31837: LD_INT 1
31839: ARRAY
31840: IN
31841: NOT
31842: AND
31843: PUSH
31844: LD_VAR 0 3
31848: PUSH
31849: LD_EXP 52
31853: PUSH
31854: LD_VAR 0 2
31858: ARRAY
31859: PUSH
31860: LD_INT 2
31862: ARRAY
31863: IN
31864: NOT
31865: AND
31866: IFFALSE 31918
// begin if IsInUnit ( j ) then
31868: LD_VAR 0 3
31872: PPUSH
31873: CALL_OW 310
31877: IFFALSE 31888
// ComExitBuilding ( j ) ;
31879: LD_VAR 0 3
31883: PPUSH
31884: CALL_OW 122
// if not HasTask ( j ) then
31888: LD_VAR 0 3
31892: PPUSH
31893: CALL_OW 314
31897: NOT
31898: IFFALSE 31918
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
31900: LD_VAR 0 3
31904: PPUSH
31905: LD_VAR 0 7
31909: PUSH
31910: LD_INT 1
31912: ARRAY
31913: PPUSH
31914: CALL_OW 189
// end ; end ;
31918: GO 31753
31920: POP
31921: POP
// end ;
31922: GO 31229
31924: POP
31925: POP
// end ;
31926: LD_VAR 0 1
31930: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
31931: LD_INT 0
31933: PPUSH
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
31939: PPUSH
31940: PPUSH
31941: PPUSH
31942: PPUSH
31943: PPUSH
// if not mc_bases then
31944: LD_EXP 49
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 32755
// for i = 1 to mc_bases do
31953: LD_ADDR_VAR 0 2
31957: PUSH
31958: DOUBLE
31959: LD_INT 1
31961: DEC
31962: ST_TO_ADDR
31963: LD_EXP 49
31967: PUSH
31968: FOR_TO
31969: IFFALSE 32753
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
31971: LD_EXP 77
31975: PUSH
31976: LD_VAR 0 2
31980: ARRAY
31981: NOT
31982: PUSH
31983: LD_EXP 52
31987: PUSH
31988: LD_VAR 0 2
31992: ARRAY
31993: PUSH
31994: LD_INT 1
31996: ARRAY
31997: OR
31998: PUSH
31999: LD_EXP 52
32003: PUSH
32004: LD_VAR 0 2
32008: ARRAY
32009: PUSH
32010: LD_INT 2
32012: ARRAY
32013: OR
32014: PUSH
32015: LD_EXP 75
32019: PUSH
32020: LD_VAR 0 2
32024: ARRAY
32025: PPUSH
32026: LD_INT 1
32028: PPUSH
32029: CALL_OW 325
32033: NOT
32034: OR
32035: PUSH
32036: LD_EXP 72
32040: PUSH
32041: LD_VAR 0 2
32045: ARRAY
32046: OR
32047: IFFALSE 32051
// continue ;
32049: GO 31968
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
32051: LD_ADDR_VAR 0 8
32055: PUSH
32056: LD_EXP 49
32060: PUSH
32061: LD_VAR 0 2
32065: ARRAY
32066: PPUSH
32067: LD_INT 25
32069: PUSH
32070: LD_INT 4
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 50
32079: PUSH
32080: EMPTY
32081: LIST
32082: PUSH
32083: LD_INT 3
32085: PUSH
32086: LD_INT 60
32088: PUSH
32089: EMPTY
32090: LIST
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: LIST
32100: PPUSH
32101: CALL_OW 72
32105: PUSH
32106: LD_EXP 53
32110: PUSH
32111: LD_VAR 0 2
32115: ARRAY
32116: DIFF
32117: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32118: LD_ADDR_VAR 0 9
32122: PUSH
32123: LD_EXP 49
32127: PUSH
32128: LD_VAR 0 2
32132: ARRAY
32133: PPUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 30
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 30
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: LIST
32161: PPUSH
32162: CALL_OW 72
32166: ST_TO_ADDR
// if not tmp or not dep then
32167: LD_VAR 0 8
32171: NOT
32172: PUSH
32173: LD_VAR 0 9
32177: NOT
32178: OR
32179: IFFALSE 32183
// continue ;
32181: GO 31968
// side := GetSide ( tmp [ 1 ] ) ;
32183: LD_ADDR_VAR 0 11
32187: PUSH
32188: LD_VAR 0 8
32192: PUSH
32193: LD_INT 1
32195: ARRAY
32196: PPUSH
32197: CALL_OW 255
32201: ST_TO_ADDR
// dep := dep [ 1 ] ;
32202: LD_ADDR_VAR 0 9
32206: PUSH
32207: LD_VAR 0 9
32211: PUSH
32212: LD_INT 1
32214: ARRAY
32215: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
32216: LD_ADDR_VAR 0 7
32220: PUSH
32221: LD_EXP 77
32225: PUSH
32226: LD_VAR 0 2
32230: ARRAY
32231: PPUSH
32232: LD_INT 22
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 25
32244: PUSH
32245: LD_INT 12
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 70
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 25
32273: PUSH
32274: LD_INT 12
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 91
32283: PUSH
32284: LD_VAR 0 9
32288: PUSH
32289: LD_INT 20
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: PPUSH
32302: CALL_OW 69
32306: UNION
32307: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
32308: LD_ADDR_VAR 0 10
32312: PUSH
32313: LD_EXP 77
32317: PUSH
32318: LD_VAR 0 2
32322: ARRAY
32323: PPUSH
32324: LD_INT 81
32326: PUSH
32327: LD_VAR 0 11
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 70
32340: ST_TO_ADDR
// if not apes or danger_at_area then
32341: LD_VAR 0 7
32345: NOT
32346: PUSH
32347: LD_VAR 0 10
32351: OR
32352: IFFALSE 32402
// begin if mc_taming [ i ] then
32354: LD_EXP 80
32358: PUSH
32359: LD_VAR 0 2
32363: ARRAY
32364: IFFALSE 32400
// begin MC_Reset ( i , 121 ) ;
32366: LD_VAR 0 2
32370: PPUSH
32371: LD_INT 121
32373: PPUSH
32374: CALL 19227 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
32378: LD_ADDR_EXP 80
32382: PUSH
32383: LD_EXP 80
32387: PPUSH
32388: LD_VAR 0 2
32392: PPUSH
32393: EMPTY
32394: PPUSH
32395: CALL_OW 1
32399: ST_TO_ADDR
// end ; continue ;
32400: GO 31968
// end ; for j in tmp do
32402: LD_ADDR_VAR 0 3
32406: PUSH
32407: LD_VAR 0 8
32411: PUSH
32412: FOR_IN
32413: IFFALSE 32749
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
32415: LD_VAR 0 3
32419: PUSH
32420: LD_EXP 80
32424: PUSH
32425: LD_VAR 0 2
32429: ARRAY
32430: IN
32431: NOT
32432: PUSH
32433: LD_EXP 80
32437: PUSH
32438: LD_VAR 0 2
32442: ARRAY
32443: PUSH
32444: LD_INT 3
32446: LESS
32447: AND
32448: IFFALSE 32506
// begin SetTag ( j , 121 ) ;
32450: LD_VAR 0 3
32454: PPUSH
32455: LD_INT 121
32457: PPUSH
32458: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
32462: LD_ADDR_EXP 80
32466: PUSH
32467: LD_EXP 80
32471: PPUSH
32472: LD_VAR 0 2
32476: PUSH
32477: LD_EXP 80
32481: PUSH
32482: LD_VAR 0 2
32486: ARRAY
32487: PUSH
32488: LD_INT 1
32490: PLUS
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PPUSH
32496: LD_VAR 0 3
32500: PPUSH
32501: CALL 49064 0 3
32505: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
32506: LD_VAR 0 3
32510: PUSH
32511: LD_EXP 80
32515: PUSH
32516: LD_VAR 0 2
32520: ARRAY
32521: IN
32522: IFFALSE 32747
// begin if GetClass ( j ) <> 4 then
32524: LD_VAR 0 3
32528: PPUSH
32529: CALL_OW 257
32533: PUSH
32534: LD_INT 4
32536: NONEQUAL
32537: IFFALSE 32590
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
32539: LD_ADDR_EXP 80
32543: PUSH
32544: LD_EXP 80
32548: PPUSH
32549: LD_VAR 0 2
32553: PPUSH
32554: LD_EXP 80
32558: PUSH
32559: LD_VAR 0 2
32563: ARRAY
32564: PUSH
32565: LD_VAR 0 3
32569: DIFF
32570: PPUSH
32571: CALL_OW 1
32575: ST_TO_ADDR
// SetTag ( j , 0 ) ;
32576: LD_VAR 0 3
32580: PPUSH
32581: LD_INT 0
32583: PPUSH
32584: CALL_OW 109
// continue ;
32588: GO 32412
// end ; if IsInUnit ( j ) then
32590: LD_VAR 0 3
32594: PPUSH
32595: CALL_OW 310
32599: IFFALSE 32610
// ComExitBuilding ( j ) ;
32601: LD_VAR 0 3
32605: PPUSH
32606: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
32610: LD_ADDR_VAR 0 6
32614: PUSH
32615: LD_VAR 0 7
32619: PPUSH
32620: LD_VAR 0 3
32624: PPUSH
32625: CALL_OW 74
32629: ST_TO_ADDR
// if not ape then
32630: LD_VAR 0 6
32634: NOT
32635: IFFALSE 32639
// break ;
32637: GO 32749
// x := GetX ( ape ) ;
32639: LD_ADDR_VAR 0 4
32643: PUSH
32644: LD_VAR 0 6
32648: PPUSH
32649: CALL_OW 250
32653: ST_TO_ADDR
// y := GetY ( ape ) ;
32654: LD_ADDR_VAR 0 5
32658: PUSH
32659: LD_VAR 0 6
32663: PPUSH
32664: CALL_OW 251
32668: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32669: LD_VAR 0 4
32673: PPUSH
32674: LD_VAR 0 5
32678: PPUSH
32679: CALL_OW 488
32683: NOT
32684: PUSH
32685: LD_VAR 0 11
32689: PPUSH
32690: LD_VAR 0 4
32694: PPUSH
32695: LD_VAR 0 5
32699: PPUSH
32700: LD_INT 20
32702: PPUSH
32703: CALL 49558 0 4
32707: PUSH
32708: LD_INT 4
32710: ARRAY
32711: OR
32712: IFFALSE 32716
// break ;
32714: GO 32749
// if not HasTask ( j ) then
32716: LD_VAR 0 3
32720: PPUSH
32721: CALL_OW 314
32725: NOT
32726: IFFALSE 32747
// ComTameXY ( j , x , y ) ;
32728: LD_VAR 0 3
32732: PPUSH
32733: LD_VAR 0 4
32737: PPUSH
32738: LD_VAR 0 5
32742: PPUSH
32743: CALL_OW 131
// end ; end ;
32747: GO 32412
32749: POP
32750: POP
// end ;
32751: GO 31968
32753: POP
32754: POP
// end ;
32755: LD_VAR 0 1
32759: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
32760: LD_INT 0
32762: PPUSH
32763: PPUSH
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
// if not mc_bases then
32770: LD_EXP 49
32774: NOT
32775: IFFALSE 32779
// exit ;
32777: GO 33389
// for i = 1 to mc_bases do
32779: LD_ADDR_VAR 0 2
32783: PUSH
32784: DOUBLE
32785: LD_INT 1
32787: DEC
32788: ST_TO_ADDR
32789: LD_EXP 49
32793: PUSH
32794: FOR_TO
32795: IFFALSE 33387
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
32797: LD_EXP 78
32801: PUSH
32802: LD_VAR 0 2
32806: ARRAY
32807: NOT
32808: PUSH
32809: LD_EXP 78
32813: PUSH
32814: LD_VAR 0 2
32818: ARRAY
32819: PPUSH
32820: LD_INT 25
32822: PUSH
32823: LD_INT 12
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PPUSH
32830: CALL_OW 72
32834: NOT
32835: OR
32836: IFFALSE 32840
// continue ;
32838: GO 32794
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
32840: LD_ADDR_VAR 0 5
32844: PUSH
32845: LD_EXP 78
32849: PUSH
32850: LD_VAR 0 2
32854: ARRAY
32855: PUSH
32856: LD_INT 1
32858: ARRAY
32859: PPUSH
32860: CALL_OW 255
32864: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
32865: LD_VAR 0 5
32869: PPUSH
32870: LD_INT 2
32872: PPUSH
32873: CALL_OW 325
32877: IFFALSE 33122
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
32879: LD_ADDR_VAR 0 4
32883: PUSH
32884: LD_EXP 78
32888: PUSH
32889: LD_VAR 0 2
32893: ARRAY
32894: PPUSH
32895: LD_INT 25
32897: PUSH
32898: LD_INT 16
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PPUSH
32905: CALL_OW 72
32909: ST_TO_ADDR
// if tmp < 6 then
32910: LD_VAR 0 4
32914: PUSH
32915: LD_INT 6
32917: LESS
32918: IFFALSE 33122
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32920: LD_ADDR_VAR 0 6
32924: PUSH
32925: LD_EXP 49
32929: PUSH
32930: LD_VAR 0 2
32934: ARRAY
32935: PPUSH
32936: LD_INT 2
32938: PUSH
32939: LD_INT 30
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 30
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: PPUSH
32964: CALL_OW 72
32968: ST_TO_ADDR
// if depot then
32969: LD_VAR 0 6
32973: IFFALSE 33122
// begin for j in depot do
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_VAR 0 6
32984: PUSH
32985: FOR_IN
32986: IFFALSE 33017
// begin if UnitsInside ( j ) < 6 then
32988: LD_VAR 0 3
32992: PPUSH
32993: CALL_OW 313
32997: PUSH
32998: LD_INT 6
33000: LESS
33001: IFFALSE 33015
// begin selected := j ;
33003: LD_ADDR_VAR 0 7
33007: PUSH
33008: LD_VAR 0 3
33012: ST_TO_ADDR
// break ;
33013: GO 33017
// end ; end ;
33015: GO 32985
33017: POP
33018: POP
// if selected then
33019: LD_VAR 0 7
33023: IFFALSE 33122
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
33025: LD_ADDR_VAR 0 3
33029: PUSH
33030: LD_EXP 78
33034: PUSH
33035: LD_VAR 0 2
33039: ARRAY
33040: PPUSH
33041: LD_INT 25
33043: PUSH
33044: LD_INT 12
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PPUSH
33051: CALL_OW 72
33055: PUSH
33056: FOR_IN
33057: IFFALSE 33120
// if not HasTask ( j ) then
33059: LD_VAR 0 3
33063: PPUSH
33064: CALL_OW 314
33068: NOT
33069: IFFALSE 33118
// begin if not IsInUnit ( j ) then
33071: LD_VAR 0 3
33075: PPUSH
33076: CALL_OW 310
33080: NOT
33081: IFFALSE 33097
// ComEnterUnit ( j , selected ) ;
33083: LD_VAR 0 3
33087: PPUSH
33088: LD_VAR 0 7
33092: PPUSH
33093: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
33097: LD_VAR 0 3
33101: PPUSH
33102: LD_INT 16
33104: PPUSH
33105: CALL_OW 183
// AddComExitBuilding ( j ) ;
33109: LD_VAR 0 3
33113: PPUSH
33114: CALL_OW 182
// end ;
33118: GO 33056
33120: POP
33121: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
33122: LD_VAR 0 5
33126: PPUSH
33127: LD_INT 11
33129: PPUSH
33130: CALL_OW 325
33134: IFFALSE 33385
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
33136: LD_ADDR_VAR 0 4
33140: PUSH
33141: LD_EXP 78
33145: PUSH
33146: LD_VAR 0 2
33150: ARRAY
33151: PPUSH
33152: LD_INT 25
33154: PUSH
33155: LD_INT 16
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PPUSH
33162: CALL_OW 72
33166: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
33167: LD_VAR 0 4
33171: PUSH
33172: LD_INT 6
33174: GREATEREQUAL
33175: PUSH
33176: LD_VAR 0 5
33180: PPUSH
33181: LD_INT 2
33183: PPUSH
33184: CALL_OW 325
33188: NOT
33189: OR
33190: IFFALSE 33385
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
33192: LD_ADDR_VAR 0 8
33196: PUSH
33197: LD_EXP 49
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PPUSH
33208: LD_INT 2
33210: PUSH
33211: LD_INT 30
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 30
33223: PUSH
33224: LD_INT 5
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 72
33240: ST_TO_ADDR
// if barracks then
33241: LD_VAR 0 8
33245: IFFALSE 33385
// begin for j in barracks do
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: LD_VAR 0 8
33256: PUSH
33257: FOR_IN
33258: IFFALSE 33289
// begin if UnitsInside ( j ) < 6 then
33260: LD_VAR 0 3
33264: PPUSH
33265: CALL_OW 313
33269: PUSH
33270: LD_INT 6
33272: LESS
33273: IFFALSE 33287
// begin selected := j ;
33275: LD_ADDR_VAR 0 7
33279: PUSH
33280: LD_VAR 0 3
33284: ST_TO_ADDR
// break ;
33285: GO 33289
// end ; end ;
33287: GO 33257
33289: POP
33290: POP
// if selected then
33291: LD_VAR 0 7
33295: IFFALSE 33385
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_EXP 78
33306: PUSH
33307: LD_VAR 0 2
33311: ARRAY
33312: PPUSH
33313: LD_INT 25
33315: PUSH
33316: LD_INT 12
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL_OW 72
33327: PUSH
33328: FOR_IN
33329: IFFALSE 33383
// if not IsInUnit ( j ) and not HasTask ( j ) then
33331: LD_VAR 0 3
33335: PPUSH
33336: CALL_OW 310
33340: NOT
33341: PUSH
33342: LD_VAR 0 3
33346: PPUSH
33347: CALL_OW 314
33351: NOT
33352: AND
33353: IFFALSE 33381
// begin ComEnterUnit ( j , selected ) ;
33355: LD_VAR 0 3
33359: PPUSH
33360: LD_VAR 0 7
33364: PPUSH
33365: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
33369: LD_VAR 0 3
33373: PPUSH
33374: LD_INT 15
33376: PPUSH
33377: CALL_OW 183
// end ;
33381: GO 33328
33383: POP
33384: POP
// end ; end ; end ; end ; end ;
33385: GO 32794
33387: POP
33388: POP
// end ;
33389: LD_VAR 0 1
33393: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
// if not mc_bases then
33400: LD_EXP 49
33404: NOT
33405: IFFALSE 33409
// exit ;
33407: GO 33587
// for i = 1 to mc_bases do
33409: LD_ADDR_VAR 0 2
33413: PUSH
33414: DOUBLE
33415: LD_INT 1
33417: DEC
33418: ST_TO_ADDR
33419: LD_EXP 49
33423: PUSH
33424: FOR_TO
33425: IFFALSE 33585
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
33427: LD_ADDR_VAR 0 4
33431: PUSH
33432: LD_EXP 49
33436: PUSH
33437: LD_VAR 0 2
33441: ARRAY
33442: PPUSH
33443: LD_INT 25
33445: PUSH
33446: LD_INT 9
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PPUSH
33453: CALL_OW 72
33457: ST_TO_ADDR
// if not tmp then
33458: LD_VAR 0 4
33462: NOT
33463: IFFALSE 33467
// continue ;
33465: GO 33424
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
33467: LD_EXP 75
33471: PUSH
33472: LD_VAR 0 2
33476: ARRAY
33477: PPUSH
33478: LD_INT 29
33480: PPUSH
33481: CALL_OW 325
33485: NOT
33486: PUSH
33487: LD_EXP 75
33491: PUSH
33492: LD_VAR 0 2
33496: ARRAY
33497: PPUSH
33498: LD_INT 28
33500: PPUSH
33501: CALL_OW 325
33505: NOT
33506: AND
33507: IFFALSE 33511
// continue ;
33509: GO 33424
// for j in tmp do
33511: LD_ADDR_VAR 0 3
33515: PUSH
33516: LD_VAR 0 4
33520: PUSH
33521: FOR_IN
33522: IFFALSE 33581
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33524: LD_VAR 0 3
33528: PUSH
33529: LD_EXP 52
33533: PUSH
33534: LD_VAR 0 2
33538: ARRAY
33539: PUSH
33540: LD_INT 1
33542: ARRAY
33543: IN
33544: NOT
33545: PUSH
33546: LD_VAR 0 3
33550: PUSH
33551: LD_EXP 52
33555: PUSH
33556: LD_VAR 0 2
33560: ARRAY
33561: PUSH
33562: LD_INT 2
33564: ARRAY
33565: IN
33566: NOT
33567: AND
33568: IFFALSE 33579
// ComSpaceTimeShoot ( j ) ;
33570: LD_VAR 0 3
33574: PPUSH
33575: CALL 42704 0 1
33579: GO 33521
33581: POP
33582: POP
// end ;
33583: GO 33424
33585: POP
33586: POP
// end ;
33587: LD_VAR 0 1
33591: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
33592: LD_INT 0
33594: PPUSH
33595: PPUSH
33596: PPUSH
33597: PPUSH
// if not mc_bases then
33598: LD_EXP 49
33602: NOT
33603: IFFALSE 33607
// exit ;
33605: GO 33629
// for i = 1 to mc_bases do
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: DOUBLE
33613: LD_INT 1
33615: DEC
33616: ST_TO_ADDR
33617: LD_EXP 49
33621: PUSH
33622: FOR_TO
33623: IFFALSE 33627
// begin end ;
33625: GO 33622
33627: POP
33628: POP
// end ;
33629: LD_VAR 0 1
33633: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
33634: LD_INT 0
33636: PPUSH
33637: PPUSH
33638: PPUSH
// if not mc_bases then
33639: LD_EXP 49
33643: NOT
33644: IFFALSE 33648
// exit ;
33646: GO 34254
// for i = 1 to mc_bases do
33648: LD_ADDR_VAR 0 2
33652: PUSH
33653: DOUBLE
33654: LD_INT 1
33656: DEC
33657: ST_TO_ADDR
33658: LD_EXP 49
33662: PUSH
33663: FOR_TO
33664: IFFALSE 34252
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
33666: LD_ADDR_VAR 0 3
33670: PUSH
33671: LD_EXP 49
33675: PUSH
33676: LD_VAR 0 2
33680: ARRAY
33681: PPUSH
33682: LD_INT 25
33684: PUSH
33685: LD_INT 4
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PPUSH
33692: CALL_OW 72
33696: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
33697: LD_VAR 0 3
33701: NOT
33702: PUSH
33703: LD_EXP 85
33707: PUSH
33708: LD_VAR 0 2
33712: ARRAY
33713: NOT
33714: OR
33715: PUSH
33716: LD_EXP 49
33720: PUSH
33721: LD_VAR 0 2
33725: ARRAY
33726: PPUSH
33727: LD_INT 2
33729: PUSH
33730: LD_INT 30
33732: PUSH
33733: LD_INT 0
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 30
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: LIST
33754: PPUSH
33755: CALL_OW 72
33759: NOT
33760: OR
33761: IFFALSE 33811
// begin if mc_deposits_finder [ i ] then
33763: LD_EXP 86
33767: PUSH
33768: LD_VAR 0 2
33772: ARRAY
33773: IFFALSE 33809
// begin MC_Reset ( i , 125 ) ;
33775: LD_VAR 0 2
33779: PPUSH
33780: LD_INT 125
33782: PPUSH
33783: CALL 19227 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
33787: LD_ADDR_EXP 86
33791: PUSH
33792: LD_EXP 86
33796: PPUSH
33797: LD_VAR 0 2
33801: PPUSH
33802: EMPTY
33803: PPUSH
33804: CALL_OW 1
33808: ST_TO_ADDR
// end ; continue ;
33809: GO 33663
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
33811: LD_EXP 85
33815: PUSH
33816: LD_VAR 0 2
33820: ARRAY
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PUSH
33826: LD_INT 3
33828: ARRAY
33829: PUSH
33830: LD_INT 1
33832: EQUAL
33833: PUSH
33834: LD_INT 20
33836: PPUSH
33837: LD_EXP 75
33841: PUSH
33842: LD_VAR 0 2
33846: ARRAY
33847: PPUSH
33848: CALL_OW 321
33852: PUSH
33853: LD_INT 2
33855: NONEQUAL
33856: AND
33857: IFFALSE 33907
// begin if mc_deposits_finder [ i ] then
33859: LD_EXP 86
33863: PUSH
33864: LD_VAR 0 2
33868: ARRAY
33869: IFFALSE 33905
// begin MC_Reset ( i , 125 ) ;
33871: LD_VAR 0 2
33875: PPUSH
33876: LD_INT 125
33878: PPUSH
33879: CALL 19227 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
33883: LD_ADDR_EXP 86
33887: PUSH
33888: LD_EXP 86
33892: PPUSH
33893: LD_VAR 0 2
33897: PPUSH
33898: EMPTY
33899: PPUSH
33900: CALL_OW 1
33904: ST_TO_ADDR
// end ; continue ;
33905: GO 33663
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
33907: LD_EXP 85
33911: PUSH
33912: LD_VAR 0 2
33916: ARRAY
33917: PUSH
33918: LD_INT 1
33920: ARRAY
33921: PUSH
33922: LD_INT 1
33924: ARRAY
33925: PPUSH
33926: LD_EXP 85
33930: PUSH
33931: LD_VAR 0 2
33935: ARRAY
33936: PUSH
33937: LD_INT 1
33939: ARRAY
33940: PUSH
33941: LD_INT 2
33943: ARRAY
33944: PPUSH
33945: LD_EXP 75
33949: PUSH
33950: LD_VAR 0 2
33954: ARRAY
33955: PPUSH
33956: CALL_OW 440
33960: IFFALSE 34003
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
33962: LD_ADDR_EXP 85
33966: PUSH
33967: LD_EXP 85
33971: PPUSH
33972: LD_VAR 0 2
33976: PPUSH
33977: LD_EXP 85
33981: PUSH
33982: LD_VAR 0 2
33986: ARRAY
33987: PPUSH
33988: LD_INT 1
33990: PPUSH
33991: CALL_OW 3
33995: PPUSH
33996: CALL_OW 1
34000: ST_TO_ADDR
34001: GO 34250
// begin if not mc_deposits_finder [ i ] then
34003: LD_EXP 86
34007: PUSH
34008: LD_VAR 0 2
34012: ARRAY
34013: NOT
34014: IFFALSE 34066
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
34016: LD_ADDR_EXP 86
34020: PUSH
34021: LD_EXP 86
34025: PPUSH
34026: LD_VAR 0 2
34030: PPUSH
34031: LD_VAR 0 3
34035: PUSH
34036: LD_INT 1
34038: ARRAY
34039: PUSH
34040: EMPTY
34041: LIST
34042: PPUSH
34043: CALL_OW 1
34047: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
34048: LD_VAR 0 3
34052: PUSH
34053: LD_INT 1
34055: ARRAY
34056: PPUSH
34057: LD_INT 125
34059: PPUSH
34060: CALL_OW 109
// end else
34064: GO 34250
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
34066: LD_EXP 86
34070: PUSH
34071: LD_VAR 0 2
34075: ARRAY
34076: PUSH
34077: LD_INT 1
34079: ARRAY
34080: PPUSH
34081: CALL_OW 310
34085: IFFALSE 34108
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
34087: LD_EXP 86
34091: PUSH
34092: LD_VAR 0 2
34096: ARRAY
34097: PUSH
34098: LD_INT 1
34100: ARRAY
34101: PPUSH
34102: CALL_OW 122
34106: GO 34250
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
34108: LD_EXP 86
34112: PUSH
34113: LD_VAR 0 2
34117: ARRAY
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: CALL_OW 314
34127: NOT
34128: PUSH
34129: LD_EXP 86
34133: PUSH
34134: LD_VAR 0 2
34138: ARRAY
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PPUSH
34144: LD_EXP 85
34148: PUSH
34149: LD_VAR 0 2
34153: ARRAY
34154: PUSH
34155: LD_INT 1
34157: ARRAY
34158: PUSH
34159: LD_INT 1
34161: ARRAY
34162: PPUSH
34163: LD_EXP 85
34167: PUSH
34168: LD_VAR 0 2
34172: ARRAY
34173: PUSH
34174: LD_INT 1
34176: ARRAY
34177: PUSH
34178: LD_INT 2
34180: ARRAY
34181: PPUSH
34182: CALL_OW 297
34186: PUSH
34187: LD_INT 6
34189: GREATER
34190: AND
34191: IFFALSE 34250
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
34193: LD_EXP 86
34197: PUSH
34198: LD_VAR 0 2
34202: ARRAY
34203: PUSH
34204: LD_INT 1
34206: ARRAY
34207: PPUSH
34208: LD_EXP 85
34212: PUSH
34213: LD_VAR 0 2
34217: ARRAY
34218: PUSH
34219: LD_INT 1
34221: ARRAY
34222: PUSH
34223: LD_INT 1
34225: ARRAY
34226: PPUSH
34227: LD_EXP 85
34231: PUSH
34232: LD_VAR 0 2
34236: ARRAY
34237: PUSH
34238: LD_INT 1
34240: ARRAY
34241: PUSH
34242: LD_INT 2
34244: ARRAY
34245: PPUSH
34246: CALL_OW 111
// end ; end ; end ;
34250: GO 33663
34252: POP
34253: POP
// end ;
34254: LD_VAR 0 1
34258: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
34259: LD_INT 0
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
// if not mc_bases then
34270: LD_EXP 49
34274: NOT
34275: IFFALSE 34279
// exit ;
34277: GO 34843
// for i = 1 to mc_bases do
34279: LD_ADDR_VAR 0 2
34283: PUSH
34284: DOUBLE
34285: LD_INT 1
34287: DEC
34288: ST_TO_ADDR
34289: LD_EXP 49
34293: PUSH
34294: FOR_TO
34295: IFFALSE 34841
// begin if not mc_bases [ i ] then
34297: LD_EXP 49
34301: PUSH
34302: LD_VAR 0 2
34306: ARRAY
34307: NOT
34308: IFFALSE 34312
// continue ;
34310: GO 34294
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
34312: LD_ADDR_VAR 0 7
34316: PUSH
34317: LD_EXP 49
34321: PUSH
34322: LD_VAR 0 2
34326: ARRAY
34327: PUSH
34328: LD_INT 1
34330: ARRAY
34331: PPUSH
34332: CALL_OW 248
34336: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
34337: LD_VAR 0 7
34341: PUSH
34342: LD_INT 1
34344: NONEQUAL
34345: PUSH
34346: LD_EXP 68
34350: PUSH
34351: LD_VAR 0 2
34355: ARRAY
34356: PUSH
34357: LD_EXP 71
34361: PUSH
34362: LD_VAR 0 2
34366: ARRAY
34367: UNION
34368: PPUSH
34369: LD_INT 33
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PPUSH
34379: CALL_OW 72
34383: NOT
34384: OR
34385: IFFALSE 34389
// continue ;
34387: GO 34294
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: LD_EXP 49
34398: PUSH
34399: LD_VAR 0 2
34403: ARRAY
34404: PPUSH
34405: LD_INT 30
34407: PUSH
34408: LD_INT 36
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PPUSH
34415: CALL_OW 72
34419: ST_TO_ADDR
// if not cts then
34420: LD_VAR 0 9
34424: NOT
34425: IFFALSE 34429
// continue ;
34427: GO 34294
// if mc_remote_driver [ i ] then
34429: LD_EXP 88
34433: PUSH
34434: LD_VAR 0 2
34438: ARRAY
34439: IFFALSE 34654
// for j in mc_remote_driver [ i ] do
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: LD_EXP 88
34450: PUSH
34451: LD_VAR 0 2
34455: ARRAY
34456: PUSH
34457: FOR_IN
34458: IFFALSE 34652
// begin if GetClass ( j ) <> 3 then
34460: LD_VAR 0 3
34464: PPUSH
34465: CALL_OW 257
34469: PUSH
34470: LD_INT 3
34472: NONEQUAL
34473: IFFALSE 34526
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
34475: LD_ADDR_EXP 88
34479: PUSH
34480: LD_EXP 88
34484: PPUSH
34485: LD_VAR 0 2
34489: PPUSH
34490: LD_EXP 88
34494: PUSH
34495: LD_VAR 0 2
34499: ARRAY
34500: PUSH
34501: LD_VAR 0 3
34505: DIFF
34506: PPUSH
34507: CALL_OW 1
34511: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34512: LD_VAR 0 3
34516: PPUSH
34517: LD_INT 0
34519: PPUSH
34520: CALL_OW 109
// continue ;
34524: GO 34457
// end ; if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 310
34535: NOT
34536: PUSH
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL_OW 310
34546: PPUSH
34547: CALL_OW 266
34551: PUSH
34552: LD_INT 36
34554: NONEQUAL
34555: OR
34556: IFFALSE 34650
// begin if IsInUnit ( j ) then
34558: LD_VAR 0 3
34562: PPUSH
34563: CALL_OW 310
34567: IFFALSE 34578
// ComExitBuilding ( j ) ;
34569: LD_VAR 0 3
34573: PPUSH
34574: CALL_OW 122
// ct := 0 ;
34578: LD_ADDR_VAR 0 8
34582: PUSH
34583: LD_INT 0
34585: ST_TO_ADDR
// for k in cts do
34586: LD_ADDR_VAR 0 4
34590: PUSH
34591: LD_VAR 0 9
34595: PUSH
34596: FOR_IN
34597: IFFALSE 34628
// if UnitsInside ( k ) < 3 then
34599: LD_VAR 0 4
34603: PPUSH
34604: CALL_OW 313
34608: PUSH
34609: LD_INT 3
34611: LESS
34612: IFFALSE 34626
// begin ct := k ;
34614: LD_ADDR_VAR 0 8
34618: PUSH
34619: LD_VAR 0 4
34623: ST_TO_ADDR
// break ;
34624: GO 34628
// end ;
34626: GO 34596
34628: POP
34629: POP
// if ct then
34630: LD_VAR 0 8
34634: IFFALSE 34650
// AddComEnterUnit ( j , ct ) ;
34636: LD_VAR 0 3
34640: PPUSH
34641: LD_VAR 0 8
34645: PPUSH
34646: CALL_OW 180
// end ; end ;
34650: GO 34457
34652: POP
34653: POP
// places := 0 ;
34654: LD_ADDR_VAR 0 5
34658: PUSH
34659: LD_INT 0
34661: ST_TO_ADDR
// for j = 1 to cts do
34662: LD_ADDR_VAR 0 3
34666: PUSH
34667: DOUBLE
34668: LD_INT 1
34670: DEC
34671: ST_TO_ADDR
34672: LD_VAR 0 9
34676: PUSH
34677: FOR_TO
34678: IFFALSE 34696
// places := places + 3 ;
34680: LD_ADDR_VAR 0 5
34684: PUSH
34685: LD_VAR 0 5
34689: PUSH
34690: LD_INT 3
34692: PLUS
34693: ST_TO_ADDR
34694: GO 34677
34696: POP
34697: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
34698: LD_ADDR_VAR 0 6
34702: PUSH
34703: LD_EXP 49
34707: PUSH
34708: LD_VAR 0 2
34712: ARRAY
34713: PPUSH
34714: LD_INT 25
34716: PUSH
34717: LD_INT 3
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PPUSH
34724: CALL_OW 72
34728: PUSH
34729: LD_EXP 88
34733: PUSH
34734: LD_VAR 0 2
34738: ARRAY
34739: DIFF
34740: ST_TO_ADDR
// if not tmp then
34741: LD_VAR 0 6
34745: NOT
34746: IFFALSE 34750
// continue ;
34748: GO 34294
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
34750: LD_ADDR_VAR 0 5
34754: PUSH
34755: LD_VAR 0 5
34759: PUSH
34760: LD_EXP 88
34764: PUSH
34765: LD_VAR 0 2
34769: ARRAY
34770: PUSH
34771: LD_INT 1
34773: PLUS
34774: MINUS
34775: ST_TO_ADDR
// if places then
34776: LD_VAR 0 5
34780: IFFALSE 34839
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
34782: LD_ADDR_EXP 88
34786: PUSH
34787: LD_EXP 88
34791: PPUSH
34792: LD_VAR 0 2
34796: PPUSH
34797: LD_EXP 88
34801: PUSH
34802: LD_VAR 0 2
34806: ARRAY
34807: PUSH
34808: LD_VAR 0 6
34812: PUSH
34813: LD_INT 1
34815: ARRAY
34816: UNION
34817: PPUSH
34818: CALL_OW 1
34822: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
34823: LD_VAR 0 6
34827: PUSH
34828: LD_INT 1
34830: ARRAY
34831: PPUSH
34832: LD_INT 126
34834: PPUSH
34835: CALL_OW 109
// end ; end ;
34839: GO 34294
34841: POP
34842: POP
// end ;
34843: LD_VAR 0 1
34847: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
34848: LD_INT 0
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
34854: PPUSH
34855: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
34856: LD_VAR 0 1
34860: NOT
34861: PUSH
34862: LD_VAR 0 2
34866: NOT
34867: OR
34868: PUSH
34869: LD_VAR 0 3
34873: NOT
34874: OR
34875: PUSH
34876: LD_VAR 0 4
34880: PUSH
34881: LD_INT 1
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: LD_INT 5
34895: PUSH
34896: LD_INT 8
34898: PUSH
34899: LD_INT 9
34901: PUSH
34902: LD_INT 15
34904: PUSH
34905: LD_INT 16
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: IN
34919: NOT
34920: OR
34921: IFFALSE 34925
// exit ;
34923: GO 35825
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
34925: LD_ADDR_VAR 0 2
34929: PUSH
34930: LD_VAR 0 2
34934: PPUSH
34935: LD_INT 21
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 24
34947: PUSH
34948: LD_INT 250
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PPUSH
34959: CALL_OW 72
34963: ST_TO_ADDR
// case class of 1 , 15 :
34964: LD_VAR 0 4
34968: PUSH
34969: LD_INT 1
34971: DOUBLE
34972: EQUAL
34973: IFTRUE 34983
34975: LD_INT 15
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34983
34981: GO 35068
34983: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
34984: LD_ADDR_VAR 0 8
34988: PUSH
34989: LD_VAR 0 2
34993: PPUSH
34994: LD_INT 2
34996: PUSH
34997: LD_INT 30
34999: PUSH
35000: LD_INT 32
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 30
35009: PUSH
35010: LD_INT 31
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: PPUSH
35022: CALL_OW 72
35026: PUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 30
35037: PUSH
35038: LD_INT 4
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 30
35047: PUSH
35048: LD_INT 5
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: LIST
35059: PPUSH
35060: CALL_OW 72
35064: ADD
35065: ST_TO_ADDR
35066: GO 35314
35068: LD_INT 2
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35082
35074: LD_INT 16
35076: DOUBLE
35077: EQUAL
35078: IFTRUE 35082
35080: GO 35128
35082: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
35083: LD_ADDR_VAR 0 8
35087: PUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 30
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 30
35108: PUSH
35109: LD_INT 1
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: LIST
35120: PPUSH
35121: CALL_OW 72
35125: ST_TO_ADDR
35126: GO 35314
35128: LD_INT 3
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35136
35134: GO 35182
35136: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
35137: LD_ADDR_VAR 0 8
35141: PUSH
35142: LD_VAR 0 2
35146: PPUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 30
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 30
35162: PUSH
35163: LD_INT 3
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: PPUSH
35175: CALL_OW 72
35179: ST_TO_ADDR
35180: GO 35314
35182: LD_INT 4
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35247
35190: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
35191: LD_ADDR_VAR 0 8
35195: PUSH
35196: LD_VAR 0 2
35200: PPUSH
35201: LD_INT 2
35203: PUSH
35204: LD_INT 30
35206: PUSH
35207: LD_INT 6
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 30
35216: PUSH
35217: LD_INT 7
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 30
35226: PUSH
35227: LD_INT 8
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: PPUSH
35240: CALL_OW 72
35244: ST_TO_ADDR
35245: GO 35314
35247: LD_INT 5
35249: DOUBLE
35250: EQUAL
35251: IFTRUE 35267
35253: LD_INT 8
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35267
35259: LD_INT 9
35261: DOUBLE
35262: EQUAL
35263: IFTRUE 35267
35265: GO 35313
35267: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
35268: LD_ADDR_VAR 0 8
35272: PUSH
35273: LD_VAR 0 2
35277: PPUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 30
35283: PUSH
35284: LD_INT 4
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 30
35293: PUSH
35294: LD_INT 5
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: LIST
35305: PPUSH
35306: CALL_OW 72
35310: ST_TO_ADDR
35311: GO 35314
35313: POP
// if not tmp then
35314: LD_VAR 0 8
35318: NOT
35319: IFFALSE 35323
// exit ;
35321: GO 35825
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
35323: LD_VAR 0 4
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: LD_INT 15
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: IN
35338: PUSH
35339: LD_EXP 58
35343: PUSH
35344: LD_VAR 0 1
35348: ARRAY
35349: AND
35350: IFFALSE 35506
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
35352: LD_ADDR_VAR 0 9
35356: PUSH
35357: LD_EXP 58
35361: PUSH
35362: LD_VAR 0 1
35366: ARRAY
35367: PUSH
35368: LD_INT 1
35370: ARRAY
35371: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
35372: LD_VAR 0 9
35376: PUSH
35377: LD_EXP 59
35381: PUSH
35382: LD_VAR 0 1
35386: ARRAY
35387: IN
35388: NOT
35389: IFFALSE 35504
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
35391: LD_ADDR_EXP 59
35395: PUSH
35396: LD_EXP 59
35400: PPUSH
35401: LD_VAR 0 1
35405: PUSH
35406: LD_EXP 59
35410: PUSH
35411: LD_VAR 0 1
35415: ARRAY
35416: PUSH
35417: LD_INT 1
35419: PLUS
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PPUSH
35425: LD_VAR 0 9
35429: PPUSH
35430: CALL 49064 0 3
35434: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
35435: LD_ADDR_EXP 58
35439: PUSH
35440: LD_EXP 58
35444: PPUSH
35445: LD_VAR 0 1
35449: PPUSH
35450: LD_EXP 58
35454: PUSH
35455: LD_VAR 0 1
35459: ARRAY
35460: PUSH
35461: LD_VAR 0 9
35465: DIFF
35466: PPUSH
35467: CALL_OW 1
35471: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
35472: LD_VAR 0 3
35476: PPUSH
35477: LD_EXP 59
35481: PUSH
35482: LD_VAR 0 1
35486: ARRAY
35487: PUSH
35488: LD_EXP 59
35492: PUSH
35493: LD_VAR 0 1
35497: ARRAY
35498: ARRAY
35499: PPUSH
35500: CALL_OW 120
// end ; exit ;
35504: GO 35825
// end ; if tmp > 1 then
35506: LD_VAR 0 8
35510: PUSH
35511: LD_INT 1
35513: GREATER
35514: IFFALSE 35618
// for i = 2 to tmp do
35516: LD_ADDR_VAR 0 6
35520: PUSH
35521: DOUBLE
35522: LD_INT 2
35524: DEC
35525: ST_TO_ADDR
35526: LD_VAR 0 8
35530: PUSH
35531: FOR_TO
35532: IFFALSE 35616
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
35534: LD_VAR 0 8
35538: PUSH
35539: LD_VAR 0 6
35543: ARRAY
35544: PPUSH
35545: CALL_OW 461
35549: PUSH
35550: LD_INT 6
35552: EQUAL
35553: IFFALSE 35614
// begin x := tmp [ i ] ;
35555: LD_ADDR_VAR 0 9
35559: PUSH
35560: LD_VAR 0 8
35564: PUSH
35565: LD_VAR 0 6
35569: ARRAY
35570: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
35571: LD_ADDR_VAR 0 8
35575: PUSH
35576: LD_VAR 0 8
35580: PPUSH
35581: LD_VAR 0 6
35585: PPUSH
35586: CALL_OW 3
35590: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
35591: LD_ADDR_VAR 0 8
35595: PUSH
35596: LD_VAR 0 8
35600: PPUSH
35601: LD_INT 1
35603: PPUSH
35604: LD_VAR 0 9
35608: PPUSH
35609: CALL_OW 2
35613: ST_TO_ADDR
// end ;
35614: GO 35531
35616: POP
35617: POP
// for i in tmp do
35618: LD_ADDR_VAR 0 6
35622: PUSH
35623: LD_VAR 0 8
35627: PUSH
35628: FOR_IN
35629: IFFALSE 35698
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
35631: LD_VAR 0 6
35635: PPUSH
35636: CALL_OW 313
35640: PUSH
35641: LD_INT 6
35643: LESS
35644: PUSH
35645: LD_VAR 0 6
35649: PPUSH
35650: CALL_OW 266
35654: PUSH
35655: LD_INT 31
35657: PUSH
35658: LD_INT 32
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: IN
35665: NOT
35666: AND
35667: PUSH
35668: LD_VAR 0 6
35672: PPUSH
35673: CALL_OW 313
35677: PUSH
35678: LD_INT 0
35680: EQUAL
35681: OR
35682: IFFALSE 35696
// begin j := i ;
35684: LD_ADDR_VAR 0 7
35688: PUSH
35689: LD_VAR 0 6
35693: ST_TO_ADDR
// break ;
35694: GO 35698
// end ; end ;
35696: GO 35628
35698: POP
35699: POP
// if j then
35700: LD_VAR 0 7
35704: IFFALSE 35722
// ComEnterUnit ( unit , j ) else
35706: LD_VAR 0 3
35710: PPUSH
35711: LD_VAR 0 7
35715: PPUSH
35716: CALL_OW 120
35720: GO 35825
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35722: LD_ADDR_VAR 0 10
35726: PUSH
35727: LD_VAR 0 2
35731: PPUSH
35732: LD_INT 2
35734: PUSH
35735: LD_INT 30
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 30
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: PPUSH
35760: CALL_OW 72
35764: ST_TO_ADDR
// if depot then
35765: LD_VAR 0 10
35769: IFFALSE 35825
// begin depot := NearestUnitToUnit ( depot , unit ) ;
35771: LD_ADDR_VAR 0 10
35775: PUSH
35776: LD_VAR 0 10
35780: PPUSH
35781: LD_VAR 0 3
35785: PPUSH
35786: CALL_OW 74
35790: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
35791: LD_VAR 0 3
35795: PPUSH
35796: LD_VAR 0 10
35800: PPUSH
35801: CALL_OW 296
35805: PUSH
35806: LD_INT 10
35808: GREATER
35809: IFFALSE 35825
// ComStandNearbyBuilding ( unit , depot ) ;
35811: LD_VAR 0 3
35815: PPUSH
35816: LD_VAR 0 10
35820: PPUSH
35821: CALL 43321 0 2
// end ; end ; end ;
35825: LD_VAR 0 5
35829: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
35830: LD_INT 0
35832: PPUSH
35833: PPUSH
35834: PPUSH
35835: PPUSH
// if not mc_bases then
35836: LD_EXP 49
35840: NOT
35841: IFFALSE 35845
// exit ;
35843: GO 36084
// for i = 1 to mc_bases do
35845: LD_ADDR_VAR 0 2
35849: PUSH
35850: DOUBLE
35851: LD_INT 1
35853: DEC
35854: ST_TO_ADDR
35855: LD_EXP 49
35859: PUSH
35860: FOR_TO
35861: IFFALSE 36082
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
35863: LD_ADDR_VAR 0 4
35867: PUSH
35868: LD_EXP 49
35872: PUSH
35873: LD_VAR 0 2
35877: ARRAY
35878: PPUSH
35879: LD_INT 21
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PPUSH
35889: CALL_OW 72
35893: PUSH
35894: LD_EXP 78
35898: PUSH
35899: LD_VAR 0 2
35903: ARRAY
35904: UNION
35905: ST_TO_ADDR
// if not tmp then
35906: LD_VAR 0 4
35910: NOT
35911: IFFALSE 35915
// continue ;
35913: GO 35860
// for j in tmp do
35915: LD_ADDR_VAR 0 3
35919: PUSH
35920: LD_VAR 0 4
35924: PUSH
35925: FOR_IN
35926: IFFALSE 36078
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
35928: LD_VAR 0 3
35932: PPUSH
35933: CALL_OW 110
35937: NOT
35938: PUSH
35939: LD_VAR 0 3
35943: PPUSH
35944: CALL_OW 314
35948: NOT
35949: AND
35950: PUSH
35951: LD_VAR 0 3
35955: PPUSH
35956: CALL_OW 311
35960: NOT
35961: AND
35962: PUSH
35963: LD_VAR 0 3
35967: PPUSH
35968: CALL_OW 310
35972: NOT
35973: AND
35974: PUSH
35975: LD_VAR 0 3
35979: PUSH
35980: LD_EXP 52
35984: PUSH
35985: LD_VAR 0 2
35989: ARRAY
35990: PUSH
35991: LD_INT 1
35993: ARRAY
35994: IN
35995: NOT
35996: AND
35997: PUSH
35998: LD_VAR 0 3
36002: PUSH
36003: LD_EXP 52
36007: PUSH
36008: LD_VAR 0 2
36012: ARRAY
36013: PUSH
36014: LD_INT 2
36016: ARRAY
36017: IN
36018: NOT
36019: AND
36020: PUSH
36021: LD_VAR 0 3
36025: PUSH
36026: LD_EXP 61
36030: PUSH
36031: LD_VAR 0 2
36035: ARRAY
36036: IN
36037: NOT
36038: AND
36039: IFFALSE 36076
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
36041: LD_VAR 0 2
36045: PPUSH
36046: LD_EXP 49
36050: PUSH
36051: LD_VAR 0 2
36055: ARRAY
36056: PPUSH
36057: LD_VAR 0 3
36061: PPUSH
36062: LD_VAR 0 3
36066: PPUSH
36067: CALL_OW 257
36071: PPUSH
36072: CALL 34848 0 4
// end ;
36076: GO 35925
36078: POP
36079: POP
// end ;
36080: GO 35860
36082: POP
36083: POP
// end ;
36084: LD_VAR 0 1
36088: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
36089: LD_INT 0
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
// if not mc_bases [ base ] then
36097: LD_EXP 49
36101: PUSH
36102: LD_VAR 0 1
36106: ARRAY
36107: NOT
36108: IFFALSE 36112
// exit ;
36110: GO 36294
// tmp := [ ] ;
36112: LD_ADDR_VAR 0 6
36116: PUSH
36117: EMPTY
36118: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
36119: LD_ADDR_VAR 0 7
36123: PUSH
36124: LD_VAR 0 3
36128: PPUSH
36129: LD_INT 0
36131: PPUSH
36132: CALL_OW 517
36136: ST_TO_ADDR
// if not list then
36137: LD_VAR 0 7
36141: NOT
36142: IFFALSE 36146
// exit ;
36144: GO 36294
// for i = 1 to amount do
36146: LD_ADDR_VAR 0 5
36150: PUSH
36151: DOUBLE
36152: LD_INT 1
36154: DEC
36155: ST_TO_ADDR
36156: LD_VAR 0 2
36160: PUSH
36161: FOR_TO
36162: IFFALSE 36242
// begin x := rand ( 1 , list [ 1 ] ) ;
36164: LD_ADDR_VAR 0 8
36168: PUSH
36169: LD_INT 1
36171: PPUSH
36172: LD_VAR 0 7
36176: PUSH
36177: LD_INT 1
36179: ARRAY
36180: PPUSH
36181: CALL_OW 12
36185: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
36186: LD_ADDR_VAR 0 6
36190: PUSH
36191: LD_VAR 0 6
36195: PPUSH
36196: LD_VAR 0 5
36200: PPUSH
36201: LD_VAR 0 7
36205: PUSH
36206: LD_INT 1
36208: ARRAY
36209: PUSH
36210: LD_VAR 0 8
36214: ARRAY
36215: PUSH
36216: LD_VAR 0 7
36220: PUSH
36221: LD_INT 2
36223: ARRAY
36224: PUSH
36225: LD_VAR 0 8
36229: ARRAY
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PPUSH
36235: CALL_OW 1
36239: ST_TO_ADDR
// end ;
36240: GO 36161
36242: POP
36243: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
36244: LD_ADDR_EXP 62
36248: PUSH
36249: LD_EXP 62
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: LD_VAR 0 6
36263: PPUSH
36264: CALL_OW 1
36268: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
36269: LD_ADDR_EXP 64
36273: PUSH
36274: LD_EXP 64
36278: PPUSH
36279: LD_VAR 0 1
36283: PPUSH
36284: LD_VAR 0 3
36288: PPUSH
36289: CALL_OW 1
36293: ST_TO_ADDR
// end ;
36294: LD_VAR 0 4
36298: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
36299: LD_INT 0
36301: PPUSH
// if not mc_bases [ base ] then
36302: LD_EXP 49
36306: PUSH
36307: LD_VAR 0 1
36311: ARRAY
36312: NOT
36313: IFFALSE 36317
// exit ;
36315: GO 36342
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
36317: LD_ADDR_EXP 54
36321: PUSH
36322: LD_EXP 54
36326: PPUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: CALL_OW 1
36341: ST_TO_ADDR
// end ;
36342: LD_VAR 0 3
36346: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
36347: LD_INT 0
36349: PPUSH
// if not mc_bases [ base ] then
36350: LD_EXP 49
36354: PUSH
36355: LD_VAR 0 1
36359: ARRAY
36360: NOT
36361: IFFALSE 36365
// exit ;
36363: GO 36421
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
36365: LD_ADDR_EXP 54
36369: PUSH
36370: LD_EXP 54
36374: PPUSH
36375: LD_VAR 0 1
36379: PPUSH
36380: LD_EXP 54
36384: PUSH
36385: LD_VAR 0 1
36389: ARRAY
36390: PPUSH
36391: LD_EXP 54
36395: PUSH
36396: LD_VAR 0 1
36400: ARRAY
36401: PUSH
36402: LD_INT 1
36404: PLUS
36405: PPUSH
36406: LD_VAR 0 2
36410: PPUSH
36411: CALL_OW 2
36415: PPUSH
36416: CALL_OW 1
36420: ST_TO_ADDR
// end ;
36421: LD_VAR 0 3
36425: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
36426: LD_INT 0
36428: PPUSH
// if not mc_bases [ base ] then
36429: LD_EXP 49
36433: PUSH
36434: LD_VAR 0 1
36438: ARRAY
36439: NOT
36440: IFFALSE 36444
// exit ;
36442: GO 36469
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
36444: LD_ADDR_EXP 70
36448: PUSH
36449: LD_EXP 70
36453: PPUSH
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_VAR 0 2
36463: PPUSH
36464: CALL_OW 1
36468: ST_TO_ADDR
// end ;
36469: LD_VAR 0 3
36473: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
36474: LD_INT 0
36476: PPUSH
// if not mc_bases [ base ] then
36477: LD_EXP 49
36481: PUSH
36482: LD_VAR 0 1
36486: ARRAY
36487: NOT
36488: IFFALSE 36492
// exit ;
36490: GO 36532
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
36492: LD_ADDR_EXP 70
36496: PUSH
36497: LD_EXP 70
36501: PPUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_EXP 70
36511: PUSH
36512: LD_VAR 0 1
36516: ARRAY
36517: PUSH
36518: LD_VAR 0 2
36522: PUSH
36523: EMPTY
36524: LIST
36525: ADD
36526: PPUSH
36527: CALL_OW 1
36531: ST_TO_ADDR
// end ;
36532: LD_VAR 0 3
36536: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
36537: LD_INT 0
36539: PPUSH
// if not mc_bases [ base ] then
36540: LD_EXP 49
36544: PUSH
36545: LD_VAR 0 1
36549: ARRAY
36550: NOT
36551: IFFALSE 36555
// exit ;
36553: GO 36667
// mc_defender := Replace ( mc_defender , base , deflist ) ;
36555: LD_ADDR_EXP 71
36559: PUSH
36560: LD_EXP 71
36564: PPUSH
36565: LD_VAR 0 1
36569: PPUSH
36570: LD_VAR 0 2
36574: PPUSH
36575: CALL_OW 1
36579: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
36580: LD_ADDR_EXP 60
36584: PUSH
36585: LD_EXP 60
36589: PPUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: LD_VAR 0 2
36599: PUSH
36600: LD_INT 0
36602: PLUS
36603: PPUSH
36604: CALL_OW 1
36608: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
36609: LD_ADDR_EXP 68
36613: PUSH
36614: LD_EXP 68
36618: PPUSH
36619: LD_VAR 0 1
36623: PPUSH
36624: LD_EXP 68
36628: PUSH
36629: LD_VAR 0 1
36633: ARRAY
36634: PUSH
36635: LD_EXP 71
36639: PUSH
36640: LD_VAR 0 1
36644: ARRAY
36645: PPUSH
36646: LD_INT 21
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PPUSH
36656: CALL_OW 72
36660: UNION
36661: PPUSH
36662: CALL_OW 1
36666: ST_TO_ADDR
// end ;
36667: LD_VAR 0 3
36671: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
36672: LD_INT 0
36674: PPUSH
// if not mc_bases [ base ] then
36675: LD_EXP 49
36679: PUSH
36680: LD_VAR 0 1
36684: ARRAY
36685: NOT
36686: IFFALSE 36690
// exit ;
36688: GO 36715
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
36690: LD_ADDR_EXP 60
36694: PUSH
36695: LD_EXP 60
36699: PPUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: CALL_OW 1
36714: ST_TO_ADDR
// end ;
36715: LD_VAR 0 3
36719: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
36720: LD_INT 0
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
// if not mc_bases [ base ] then
36726: LD_EXP 49
36730: PUSH
36731: LD_VAR 0 1
36735: ARRAY
36736: NOT
36737: IFFALSE 36741
// exit ;
36739: GO 36806
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
36741: LD_ADDR_EXP 69
36745: PUSH
36746: LD_EXP 69
36750: PPUSH
36751: LD_VAR 0 1
36755: PUSH
36756: LD_EXP 69
36760: PUSH
36761: LD_VAR 0 1
36765: ARRAY
36766: PUSH
36767: LD_INT 1
36769: PLUS
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PPUSH
36775: LD_VAR 0 1
36779: PUSH
36780: LD_VAR 0 2
36784: PUSH
36785: LD_VAR 0 3
36789: PUSH
36790: LD_VAR 0 4
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: PPUSH
36801: CALL 49064 0 3
36805: ST_TO_ADDR
// end ;
36806: LD_VAR 0 5
36810: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
36811: LD_INT 0
36813: PPUSH
// if not mc_bases [ base ] then
36814: LD_EXP 49
36818: PUSH
36819: LD_VAR 0 1
36823: ARRAY
36824: NOT
36825: IFFALSE 36829
// exit ;
36827: GO 36854
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
36829: LD_ADDR_EXP 85
36833: PUSH
36834: LD_EXP 85
36838: PPUSH
36839: LD_VAR 0 1
36843: PPUSH
36844: LD_VAR 0 2
36848: PPUSH
36849: CALL_OW 1
36853: ST_TO_ADDR
// end ;
36854: LD_VAR 0 3
36858: RET
// export function MC_GetMinesField ( base ) ; begin
36859: LD_INT 0
36861: PPUSH
// result := mc_mines [ base ] ;
36862: LD_ADDR_VAR 0 2
36866: PUSH
36867: LD_EXP 62
36871: PUSH
36872: LD_VAR 0 1
36876: ARRAY
36877: ST_TO_ADDR
// end ;
36878: LD_VAR 0 2
36882: RET
// export function MC_GetProduceList ( base ) ; begin
36883: LD_INT 0
36885: PPUSH
// result := mc_produce [ base ] ;
36886: LD_ADDR_VAR 0 2
36890: PUSH
36891: LD_EXP 70
36895: PUSH
36896: LD_VAR 0 1
36900: ARRAY
36901: ST_TO_ADDR
// end ;
36902: LD_VAR 0 2
36906: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
36907: LD_INT 0
36909: PPUSH
36910: PPUSH
// if not mc_bases then
36911: LD_EXP 49
36915: NOT
36916: IFFALSE 36920
// exit ;
36918: GO 36985
// if mc_bases [ base ] then
36920: LD_EXP 49
36924: PUSH
36925: LD_VAR 0 1
36929: ARRAY
36930: IFFALSE 36985
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
36932: LD_ADDR_VAR 0 3
36936: PUSH
36937: LD_EXP 49
36941: PUSH
36942: LD_VAR 0 1
36946: ARRAY
36947: PPUSH
36948: LD_INT 30
36950: PUSH
36951: LD_VAR 0 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PPUSH
36960: CALL_OW 72
36964: ST_TO_ADDR
// if result then
36965: LD_VAR 0 3
36969: IFFALSE 36985
// result := result [ 1 ] ;
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_VAR 0 3
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: ST_TO_ADDR
// end ; end ;
36985: LD_VAR 0 3
36989: RET
// export function MC_SetTame ( base , area ) ; begin
36990: LD_INT 0
36992: PPUSH
// if not mc_bases or not base then
36993: LD_EXP 49
36997: NOT
36998: PUSH
36999: LD_VAR 0 1
37003: NOT
37004: OR
37005: IFFALSE 37009
// exit ;
37007: GO 37034
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
37009: LD_ADDR_EXP 77
37013: PUSH
37014: LD_EXP 77
37018: PPUSH
37019: LD_VAR 0 1
37023: PPUSH
37024: LD_VAR 0 2
37028: PPUSH
37029: CALL_OW 1
37033: ST_TO_ADDR
// end ;
37034: LD_VAR 0 3
37038: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
37039: LD_INT 0
37041: PPUSH
37042: PPUSH
// if not mc_bases or not base then
37043: LD_EXP 49
37047: NOT
37048: PUSH
37049: LD_VAR 0 1
37053: NOT
37054: OR
37055: IFFALSE 37059
// exit ;
37057: GO 37161
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
37059: LD_ADDR_VAR 0 4
37063: PUSH
37064: LD_EXP 49
37068: PUSH
37069: LD_VAR 0 1
37073: ARRAY
37074: PPUSH
37075: LD_INT 30
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PPUSH
37087: CALL_OW 72
37091: ST_TO_ADDR
// if not tmp then
37092: LD_VAR 0 4
37096: NOT
37097: IFFALSE 37101
// exit ;
37099: GO 37161
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
37101: LD_ADDR_EXP 81
37105: PUSH
37106: LD_EXP 81
37110: PPUSH
37111: LD_VAR 0 1
37115: PPUSH
37116: LD_EXP 81
37120: PUSH
37121: LD_VAR 0 1
37125: ARRAY
37126: PPUSH
37127: LD_EXP 81
37131: PUSH
37132: LD_VAR 0 1
37136: ARRAY
37137: PUSH
37138: LD_INT 1
37140: PLUS
37141: PPUSH
37142: LD_VAR 0 4
37146: PUSH
37147: LD_INT 1
37149: ARRAY
37150: PPUSH
37151: CALL_OW 2
37155: PPUSH
37156: CALL_OW 1
37160: ST_TO_ADDR
// end ;
37161: LD_VAR 0 3
37165: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
37166: LD_INT 0
37168: PPUSH
37169: PPUSH
// if not mc_bases or not base or not kinds then
37170: LD_EXP 49
37174: NOT
37175: PUSH
37176: LD_VAR 0 1
37180: NOT
37181: OR
37182: PUSH
37183: LD_VAR 0 2
37187: NOT
37188: OR
37189: IFFALSE 37193
// exit ;
37191: GO 37254
// for i in kinds do
37193: LD_ADDR_VAR 0 4
37197: PUSH
37198: LD_VAR 0 2
37202: PUSH
37203: FOR_IN
37204: IFFALSE 37252
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
37206: LD_ADDR_EXP 83
37210: PUSH
37211: LD_EXP 83
37215: PPUSH
37216: LD_VAR 0 1
37220: PUSH
37221: LD_EXP 83
37225: PUSH
37226: LD_VAR 0 1
37230: ARRAY
37231: PUSH
37232: LD_INT 1
37234: PLUS
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PPUSH
37240: LD_VAR 0 4
37244: PPUSH
37245: CALL 49064 0 3
37249: ST_TO_ADDR
37250: GO 37203
37252: POP
37253: POP
// end ;
37254: LD_VAR 0 3
37258: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
37259: LD_INT 0
37261: PPUSH
// if not mc_bases or not base or not areas then
37262: LD_EXP 49
37266: NOT
37267: PUSH
37268: LD_VAR 0 1
37272: NOT
37273: OR
37274: PUSH
37275: LD_VAR 0 2
37279: NOT
37280: OR
37281: IFFALSE 37285
// exit ;
37283: GO 37310
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
37285: LD_ADDR_EXP 67
37289: PUSH
37290: LD_EXP 67
37294: PPUSH
37295: LD_VAR 0 1
37299: PPUSH
37300: LD_VAR 0 2
37304: PPUSH
37305: CALL_OW 1
37309: ST_TO_ADDR
// end ;
37310: LD_VAR 0 3
37314: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
37315: LD_INT 0
37317: PPUSH
// if not mc_bases or not base then
37318: LD_EXP 49
37322: NOT
37323: PUSH
37324: LD_VAR 0 1
37328: NOT
37329: OR
37330: IFFALSE 37334
// exit ;
37332: GO 37368
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
37334: LD_ADDR_EXP 84
37338: PUSH
37339: LD_EXP 84
37343: PPUSH
37344: LD_VAR 0 1
37348: PPUSH
37349: LD_VAR 0 2
37353: PUSH
37354: LD_VAR 0 3
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PPUSH
37363: CALL_OW 1
37367: ST_TO_ADDR
// end ;
37368: LD_VAR 0 4
37372: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
37373: LD_INT 0
37375: PPUSH
37376: PPUSH
37377: PPUSH
// if not mc_bases or not base or not ext_list then
37378: LD_EXP 49
37382: NOT
37383: PUSH
37384: LD_VAR 0 1
37388: NOT
37389: OR
37390: PUSH
37391: LD_VAR 0 5
37395: NOT
37396: OR
37397: IFFALSE 37401
// exit ;
37399: GO 37574
// tmp := GetFacExtXYD ( x , y , d ) ;
37401: LD_ADDR_VAR 0 8
37405: PUSH
37406: LD_VAR 0 2
37410: PPUSH
37411: LD_VAR 0 3
37415: PPUSH
37416: LD_VAR 0 4
37420: PPUSH
37421: CALL 80174 0 3
37425: ST_TO_ADDR
// if not tmp then
37426: LD_VAR 0 8
37430: NOT
37431: IFFALSE 37435
// exit ;
37433: GO 37574
// for i in tmp do
37435: LD_ADDR_VAR 0 7
37439: PUSH
37440: LD_VAR 0 8
37444: PUSH
37445: FOR_IN
37446: IFFALSE 37572
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
37448: LD_ADDR_EXP 54
37452: PUSH
37453: LD_EXP 54
37457: PPUSH
37458: LD_VAR 0 1
37462: PPUSH
37463: LD_EXP 54
37467: PUSH
37468: LD_VAR 0 1
37472: ARRAY
37473: PPUSH
37474: LD_EXP 54
37478: PUSH
37479: LD_VAR 0 1
37483: ARRAY
37484: PUSH
37485: LD_INT 1
37487: PLUS
37488: PPUSH
37489: LD_VAR 0 5
37493: PUSH
37494: LD_INT 1
37496: ARRAY
37497: PUSH
37498: LD_VAR 0 7
37502: PUSH
37503: LD_INT 1
37505: ARRAY
37506: PUSH
37507: LD_VAR 0 7
37511: PUSH
37512: LD_INT 2
37514: ARRAY
37515: PUSH
37516: LD_VAR 0 7
37520: PUSH
37521: LD_INT 3
37523: ARRAY
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: PPUSH
37531: CALL_OW 2
37535: PPUSH
37536: CALL_OW 1
37540: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
37541: LD_ADDR_VAR 0 5
37545: PUSH
37546: LD_VAR 0 5
37550: PPUSH
37551: LD_INT 1
37553: PPUSH
37554: CALL_OW 3
37558: ST_TO_ADDR
// if not ext_list then
37559: LD_VAR 0 5
37563: NOT
37564: IFFALSE 37570
// exit ;
37566: POP
37567: POP
37568: GO 37574
// end ;
37570: GO 37445
37572: POP
37573: POP
// end ;
37574: LD_VAR 0 6
37578: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
37579: LD_INT 0
37581: PPUSH
// if not mc_bases or not base or not weapon_list then
37582: LD_EXP 49
37586: NOT
37587: PUSH
37588: LD_VAR 0 1
37592: NOT
37593: OR
37594: PUSH
37595: LD_VAR 0 2
37599: NOT
37600: OR
37601: IFFALSE 37605
// exit ;
37603: GO 37630
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
37605: LD_ADDR_EXP 87
37609: PUSH
37610: LD_EXP 87
37614: PPUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: LD_VAR 0 2
37624: PPUSH
37625: CALL_OW 1
37629: ST_TO_ADDR
// end ;
37630: LD_VAR 0 3
37634: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
37635: LD_INT 0
37637: PPUSH
// if not mc_bases or not base or not tech_list then
37638: LD_EXP 49
37642: NOT
37643: PUSH
37644: LD_VAR 0 1
37648: NOT
37649: OR
37650: PUSH
37651: LD_VAR 0 2
37655: NOT
37656: OR
37657: IFFALSE 37661
// exit ;
37659: GO 37686
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
37661: LD_ADDR_EXP 76
37665: PUSH
37666: LD_EXP 76
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: LD_VAR 0 2
37680: PPUSH
37681: CALL_OW 1
37685: ST_TO_ADDR
// end ;
37686: LD_VAR 0 3
37690: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
37691: LD_INT 0
37693: PPUSH
// if not mc_bases or not parking_area or not base then
37694: LD_EXP 49
37698: NOT
37699: PUSH
37700: LD_VAR 0 2
37704: NOT
37705: OR
37706: PUSH
37707: LD_VAR 0 1
37711: NOT
37712: OR
37713: IFFALSE 37717
// exit ;
37715: GO 37742
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
37717: LD_ADDR_EXP 73
37721: PUSH
37722: LD_EXP 73
37726: PPUSH
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_VAR 0 2
37736: PPUSH
37737: CALL_OW 1
37741: ST_TO_ADDR
// end ;
37742: LD_VAR 0 3
37746: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
37747: LD_INT 0
37749: PPUSH
// if not mc_bases or not base or not scan_area then
37750: LD_EXP 49
37754: NOT
37755: PUSH
37756: LD_VAR 0 1
37760: NOT
37761: OR
37762: PUSH
37763: LD_VAR 0 2
37767: NOT
37768: OR
37769: IFFALSE 37773
// exit ;
37771: GO 37798
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
37773: LD_ADDR_EXP 74
37777: PUSH
37778: LD_EXP 74
37782: PPUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: LD_VAR 0 2
37792: PPUSH
37793: CALL_OW 1
37797: ST_TO_ADDR
// end ; end_of_file
37798: LD_VAR 0 3
37802: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
37803: LD_INT 0
37805: PPUSH
37806: PPUSH
37807: PPUSH
// if not mc_bases then
37808: LD_EXP 49
37812: NOT
37813: IFFALSE 37817
// exit ;
37815: GO 37982
// for i = 1 to mc_bases do
37817: LD_ADDR_VAR 0 4
37821: PUSH
37822: DOUBLE
37823: LD_INT 1
37825: DEC
37826: ST_TO_ADDR
37827: LD_EXP 49
37831: PUSH
37832: FOR_TO
37833: IFFALSE 37980
// begin if sci in mc_bases [ i ] then
37835: LD_VAR 0 2
37839: PUSH
37840: LD_EXP 49
37844: PUSH
37845: LD_VAR 0 4
37849: ARRAY
37850: IN
37851: IFFALSE 37978
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
37853: LD_ADDR_EXP 78
37857: PUSH
37858: LD_EXP 78
37862: PPUSH
37863: LD_VAR 0 4
37867: PUSH
37868: LD_EXP 78
37872: PUSH
37873: LD_VAR 0 4
37877: ARRAY
37878: PUSH
37879: LD_INT 1
37881: PLUS
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PPUSH
37887: LD_VAR 0 1
37891: PPUSH
37892: CALL 49064 0 3
37896: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
37897: LD_ADDR_VAR 0 5
37901: PUSH
37902: LD_EXP 49
37906: PUSH
37907: LD_VAR 0 4
37911: ARRAY
37912: PPUSH
37913: LD_INT 2
37915: PUSH
37916: LD_INT 30
37918: PUSH
37919: LD_INT 0
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 30
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: PPUSH
37941: CALL_OW 72
37945: PPUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 74
37955: ST_TO_ADDR
// if tmp then
37956: LD_VAR 0 5
37960: IFFALSE 37976
// ComStandNearbyBuilding ( ape , tmp ) ;
37962: LD_VAR 0 1
37966: PPUSH
37967: LD_VAR 0 5
37971: PPUSH
37972: CALL 43321 0 2
// break ;
37976: GO 37980
// end ; end ;
37978: GO 37832
37980: POP
37981: POP
// end ;
37982: LD_VAR 0 3
37986: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
37987: LD_INT 0
37989: PPUSH
37990: PPUSH
37991: PPUSH
// if not mc_bases then
37992: LD_EXP 49
37996: NOT
37997: IFFALSE 38001
// exit ;
37999: GO 38090
// for i = 1 to mc_bases do
38001: LD_ADDR_VAR 0 4
38005: PUSH
38006: DOUBLE
38007: LD_INT 1
38009: DEC
38010: ST_TO_ADDR
38011: LD_EXP 49
38015: PUSH
38016: FOR_TO
38017: IFFALSE 38088
// begin if building in mc_busy_turret_list [ i ] then
38019: LD_VAR 0 1
38023: PUSH
38024: LD_EXP 59
38028: PUSH
38029: LD_VAR 0 4
38033: ARRAY
38034: IN
38035: IFFALSE 38086
// begin tmp := mc_busy_turret_list [ i ] diff building ;
38037: LD_ADDR_VAR 0 5
38041: PUSH
38042: LD_EXP 59
38046: PUSH
38047: LD_VAR 0 4
38051: ARRAY
38052: PUSH
38053: LD_VAR 0 1
38057: DIFF
38058: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
38059: LD_ADDR_EXP 59
38063: PUSH
38064: LD_EXP 59
38068: PPUSH
38069: LD_VAR 0 4
38073: PPUSH
38074: LD_VAR 0 5
38078: PPUSH
38079: CALL_OW 1
38083: ST_TO_ADDR
// break ;
38084: GO 38088
// end ; end ;
38086: GO 38016
38088: POP
38089: POP
// end ;
38090: LD_VAR 0 3
38094: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
38095: LD_INT 0
38097: PPUSH
38098: PPUSH
38099: PPUSH
// if not mc_bases then
38100: LD_EXP 49
38104: NOT
38105: IFFALSE 38109
// exit ;
38107: GO 38308
// for i = 1 to mc_bases do
38109: LD_ADDR_VAR 0 5
38113: PUSH
38114: DOUBLE
38115: LD_INT 1
38117: DEC
38118: ST_TO_ADDR
38119: LD_EXP 49
38123: PUSH
38124: FOR_TO
38125: IFFALSE 38306
// if building in mc_bases [ i ] then
38127: LD_VAR 0 1
38131: PUSH
38132: LD_EXP 49
38136: PUSH
38137: LD_VAR 0 5
38141: ARRAY
38142: IN
38143: IFFALSE 38304
// begin tmp := mc_bases [ i ] diff building ;
38145: LD_ADDR_VAR 0 6
38149: PUSH
38150: LD_EXP 49
38154: PUSH
38155: LD_VAR 0 5
38159: ARRAY
38160: PUSH
38161: LD_VAR 0 1
38165: DIFF
38166: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
38167: LD_ADDR_EXP 49
38171: PUSH
38172: LD_EXP 49
38176: PPUSH
38177: LD_VAR 0 5
38181: PPUSH
38182: LD_VAR 0 6
38186: PPUSH
38187: CALL_OW 1
38191: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
38192: LD_VAR 0 1
38196: PUSH
38197: LD_EXP 57
38201: PUSH
38202: LD_VAR 0 5
38206: ARRAY
38207: IN
38208: IFFALSE 38247
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
38210: LD_ADDR_EXP 57
38214: PUSH
38215: LD_EXP 57
38219: PPUSH
38220: LD_VAR 0 5
38224: PPUSH
38225: LD_EXP 57
38229: PUSH
38230: LD_VAR 0 5
38234: ARRAY
38235: PUSH
38236: LD_VAR 0 1
38240: DIFF
38241: PPUSH
38242: CALL_OW 1
38246: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
38247: LD_VAR 0 1
38251: PUSH
38252: LD_EXP 58
38256: PUSH
38257: LD_VAR 0 5
38261: ARRAY
38262: IN
38263: IFFALSE 38302
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
38265: LD_ADDR_EXP 58
38269: PUSH
38270: LD_EXP 58
38274: PPUSH
38275: LD_VAR 0 5
38279: PPUSH
38280: LD_EXP 58
38284: PUSH
38285: LD_VAR 0 5
38289: ARRAY
38290: PUSH
38291: LD_VAR 0 1
38295: DIFF
38296: PPUSH
38297: CALL_OW 1
38301: ST_TO_ADDR
// break ;
38302: GO 38306
// end ;
38304: GO 38124
38306: POP
38307: POP
// end ;
38308: LD_VAR 0 4
38312: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
38313: LD_INT 0
38315: PPUSH
38316: PPUSH
38317: PPUSH
// if not mc_bases or not side in mc_sides then
38318: LD_EXP 49
38322: NOT
38323: PUSH
38324: LD_VAR 0 3
38328: PUSH
38329: LD_EXP 75
38333: IN
38334: NOT
38335: OR
38336: IFFALSE 38340
// exit ;
38338: GO 38463
// for i = 1 to mc_vehicles do
38340: LD_ADDR_VAR 0 6
38344: PUSH
38345: DOUBLE
38346: LD_INT 1
38348: DEC
38349: ST_TO_ADDR
38350: LD_EXP 68
38354: PUSH
38355: FOR_TO
38356: IFFALSE 38461
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
38358: LD_VAR 0 2
38362: PUSH
38363: LD_EXP 68
38367: PUSH
38368: LD_VAR 0 6
38372: ARRAY
38373: IN
38374: PUSH
38375: LD_VAR 0 1
38379: PUSH
38380: LD_EXP 68
38384: PUSH
38385: LD_VAR 0 6
38389: ARRAY
38390: IN
38391: OR
38392: IFFALSE 38459
// begin tmp := mc_vehicles [ i ] diff old ;
38394: LD_ADDR_VAR 0 7
38398: PUSH
38399: LD_EXP 68
38403: PUSH
38404: LD_VAR 0 6
38408: ARRAY
38409: PUSH
38410: LD_VAR 0 2
38414: DIFF
38415: ST_TO_ADDR
// tmp := tmp diff new ;
38416: LD_ADDR_VAR 0 7
38420: PUSH
38421: LD_VAR 0 7
38425: PUSH
38426: LD_VAR 0 1
38430: DIFF
38431: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
38432: LD_ADDR_EXP 68
38436: PUSH
38437: LD_EXP 68
38441: PPUSH
38442: LD_VAR 0 6
38446: PPUSH
38447: LD_VAR 0 7
38451: PPUSH
38452: CALL_OW 1
38456: ST_TO_ADDR
// break ;
38457: GO 38461
// end ;
38459: GO 38355
38461: POP
38462: POP
// end ;
38463: LD_VAR 0 5
38467: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
38468: LD_INT 0
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
// if not mc_bases then
38474: LD_EXP 49
38478: NOT
38479: IFFALSE 38483
// exit ;
38481: GO 38775
// side := GetSide ( vehicle ) ;
38483: LD_ADDR_VAR 0 5
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: CALL_OW 255
38497: ST_TO_ADDR
// for i = 1 to mc_bases do
38498: LD_ADDR_VAR 0 4
38502: PUSH
38503: DOUBLE
38504: LD_INT 1
38506: DEC
38507: ST_TO_ADDR
38508: LD_EXP 49
38512: PUSH
38513: FOR_TO
38514: IFFALSE 38773
// begin if factory in mc_bases [ i ] then
38516: LD_VAR 0 2
38520: PUSH
38521: LD_EXP 49
38525: PUSH
38526: LD_VAR 0 4
38530: ARRAY
38531: IN
38532: IFFALSE 38771
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
38534: LD_EXP 71
38538: PUSH
38539: LD_VAR 0 4
38543: ARRAY
38544: PUSH
38545: LD_EXP 60
38549: PUSH
38550: LD_VAR 0 4
38554: ARRAY
38555: LESS
38556: IFFALSE 38727
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
38558: LD_ADDR_EXP 71
38562: PUSH
38563: LD_EXP 71
38567: PPUSH
38568: LD_VAR 0 4
38572: PPUSH
38573: LD_EXP 71
38577: PUSH
38578: LD_VAR 0 4
38582: ARRAY
38583: PUSH
38584: LD_VAR 0 1
38588: ADD
38589: PPUSH
38590: CALL_OW 1
38594: ST_TO_ADDR
// if not mc_scan [ i ] then
38595: LD_EXP 72
38599: PUSH
38600: LD_VAR 0 4
38604: ARRAY
38605: NOT
38606: IFFALSE 38725
// begin if GetControl ( vehicle ) = control_remote then
38608: LD_VAR 0 1
38612: PPUSH
38613: CALL_OW 263
38617: PUSH
38618: LD_INT 2
38620: EQUAL
38621: IFFALSE 38641
// repeat wait ( 0 0$1 ) ;
38623: LD_INT 35
38625: PPUSH
38626: CALL_OW 67
// until IsControledBy ( vehicle ) ;
38630: LD_VAR 0 1
38634: PPUSH
38635: CALL_OW 312
38639: IFFALSE 38623
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
38641: LD_VAR 0 1
38645: PPUSH
38646: LD_EXP 73
38650: PUSH
38651: LD_VAR 0 4
38655: ARRAY
38656: PPUSH
38657: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
38661: LD_VAR 0 1
38665: PPUSH
38666: CALL_OW 263
38670: PUSH
38671: LD_INT 1
38673: NONEQUAL
38674: IFFALSE 38678
// break ;
38676: GO 38773
// repeat wait ( 0 0$1 ) ;
38678: LD_INT 35
38680: PPUSH
38681: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
38685: LD_VAR 0 1
38689: PPUSH
38690: LD_EXP 73
38694: PUSH
38695: LD_VAR 0 4
38699: ARRAY
38700: PPUSH
38701: CALL_OW 308
38705: IFFALSE 38678
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 311
38716: PPUSH
38717: CALL_OW 121
// exit ;
38721: POP
38722: POP
38723: GO 38775
// end ; end else
38725: GO 38771
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
38727: LD_ADDR_EXP 68
38731: PUSH
38732: LD_EXP 68
38736: PPUSH
38737: LD_VAR 0 4
38741: PUSH
38742: LD_EXP 68
38746: PUSH
38747: LD_VAR 0 4
38751: ARRAY
38752: PUSH
38753: LD_INT 1
38755: PLUS
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PPUSH
38761: LD_VAR 0 1
38765: PPUSH
38766: CALL 49064 0 3
38770: ST_TO_ADDR
// end ; end ;
38771: GO 38513
38773: POP
38774: POP
// end ;
38775: LD_VAR 0 3
38779: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
38780: LD_INT 0
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
// if not mc_bases then
38786: LD_EXP 49
38790: NOT
38791: IFFALSE 38795
// exit ;
38793: GO 39148
// repeat wait ( 0 0$1 ) ;
38795: LD_INT 35
38797: PPUSH
38798: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
38802: LD_VAR 0 2
38806: PPUSH
38807: LD_VAR 0 3
38811: PPUSH
38812: CALL_OW 284
38816: IFFALSE 38795
// if GetResourceTypeXY ( x , y ) = mat_artefact then
38818: LD_VAR 0 2
38822: PPUSH
38823: LD_VAR 0 3
38827: PPUSH
38828: CALL_OW 283
38832: PUSH
38833: LD_INT 4
38835: EQUAL
38836: IFFALSE 38840
// exit ;
38838: GO 39148
// for i = 1 to mc_bases do
38840: LD_ADDR_VAR 0 7
38844: PUSH
38845: DOUBLE
38846: LD_INT 1
38848: DEC
38849: ST_TO_ADDR
38850: LD_EXP 49
38854: PUSH
38855: FOR_TO
38856: IFFALSE 39146
// begin if mc_crates_area [ i ] then
38858: LD_EXP 67
38862: PUSH
38863: LD_VAR 0 7
38867: ARRAY
38868: IFFALSE 38979
// for j in mc_crates_area [ i ] do
38870: LD_ADDR_VAR 0 8
38874: PUSH
38875: LD_EXP 67
38879: PUSH
38880: LD_VAR 0 7
38884: ARRAY
38885: PUSH
38886: FOR_IN
38887: IFFALSE 38977
// if InArea ( x , y , j ) then
38889: LD_VAR 0 2
38893: PPUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: LD_VAR 0 8
38903: PPUSH
38904: CALL_OW 309
38908: IFFALSE 38975
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
38910: LD_ADDR_EXP 65
38914: PUSH
38915: LD_EXP 65
38919: PPUSH
38920: LD_VAR 0 7
38924: PUSH
38925: LD_EXP 65
38929: PUSH
38930: LD_VAR 0 7
38934: ARRAY
38935: PUSH
38936: LD_INT 1
38938: PLUS
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PPUSH
38944: LD_VAR 0 4
38948: PUSH
38949: LD_VAR 0 2
38953: PUSH
38954: LD_VAR 0 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: PPUSH
38964: CALL 49064 0 3
38968: ST_TO_ADDR
// exit ;
38969: POP
38970: POP
38971: POP
38972: POP
38973: GO 39148
// end ;
38975: GO 38886
38977: POP
38978: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
38979: LD_ADDR_VAR 0 9
38983: PUSH
38984: LD_EXP 49
38988: PUSH
38989: LD_VAR 0 7
38993: ARRAY
38994: PPUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 30
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 30
39010: PUSH
39011: LD_INT 1
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: PPUSH
39023: CALL_OW 72
39027: ST_TO_ADDR
// if not depot then
39028: LD_VAR 0 9
39032: NOT
39033: IFFALSE 39037
// continue ;
39035: GO 38855
// for j in depot do
39037: LD_ADDR_VAR 0 8
39041: PUSH
39042: LD_VAR 0 9
39046: PUSH
39047: FOR_IN
39048: IFFALSE 39142
// if GetDistUnitXY ( j , x , y ) < 30 then
39050: LD_VAR 0 8
39054: PPUSH
39055: LD_VAR 0 2
39059: PPUSH
39060: LD_VAR 0 3
39064: PPUSH
39065: CALL_OW 297
39069: PUSH
39070: LD_INT 30
39072: LESS
39073: IFFALSE 39140
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
39075: LD_ADDR_EXP 65
39079: PUSH
39080: LD_EXP 65
39084: PPUSH
39085: LD_VAR 0 7
39089: PUSH
39090: LD_EXP 65
39094: PUSH
39095: LD_VAR 0 7
39099: ARRAY
39100: PUSH
39101: LD_INT 1
39103: PLUS
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PPUSH
39109: LD_VAR 0 4
39113: PUSH
39114: LD_VAR 0 2
39118: PUSH
39119: LD_VAR 0 3
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: LIST
39128: PPUSH
39129: CALL 49064 0 3
39133: ST_TO_ADDR
// exit ;
39134: POP
39135: POP
39136: POP
39137: POP
39138: GO 39148
// end ;
39140: GO 39047
39142: POP
39143: POP
// end ;
39144: GO 38855
39146: POP
39147: POP
// end ;
39148: LD_VAR 0 6
39152: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
// side := GetSide ( lab ) ;
39159: LD_ADDR_VAR 0 4
39163: PUSH
39164: LD_VAR 0 2
39168: PPUSH
39169: CALL_OW 255
39173: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
39174: LD_VAR 0 4
39178: PUSH
39179: LD_EXP 75
39183: IN
39184: NOT
39185: PUSH
39186: LD_EXP 76
39190: NOT
39191: OR
39192: PUSH
39193: LD_EXP 49
39197: NOT
39198: OR
39199: IFFALSE 39203
// exit ;
39201: GO 39436
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
39203: LD_ADDR_EXP 76
39207: PUSH
39208: LD_EXP 76
39212: PPUSH
39213: LD_VAR 0 4
39217: PPUSH
39218: LD_EXP 76
39222: PUSH
39223: LD_VAR 0 4
39227: ARRAY
39228: PUSH
39229: LD_VAR 0 1
39233: DIFF
39234: PPUSH
39235: CALL_OW 1
39239: ST_TO_ADDR
// for i = 1 to mc_bases do
39240: LD_ADDR_VAR 0 5
39244: PUSH
39245: DOUBLE
39246: LD_INT 1
39248: DEC
39249: ST_TO_ADDR
39250: LD_EXP 49
39254: PUSH
39255: FOR_TO
39256: IFFALSE 39434
// begin if lab in mc_bases [ i ] then
39258: LD_VAR 0 2
39262: PUSH
39263: LD_EXP 49
39267: PUSH
39268: LD_VAR 0 5
39272: ARRAY
39273: IN
39274: IFFALSE 39432
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
39276: LD_VAR 0 1
39280: PUSH
39281: LD_INT 11
39283: PUSH
39284: LD_INT 4
39286: PUSH
39287: LD_INT 3
39289: PUSH
39290: LD_INT 2
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: IN
39299: PUSH
39300: LD_EXP 79
39304: PUSH
39305: LD_VAR 0 5
39309: ARRAY
39310: AND
39311: IFFALSE 39432
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
39313: LD_ADDR_VAR 0 6
39317: PUSH
39318: LD_EXP 79
39322: PUSH
39323: LD_VAR 0 5
39327: ARRAY
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
39333: LD_ADDR_EXP 79
39337: PUSH
39338: LD_EXP 79
39342: PPUSH
39343: LD_VAR 0 5
39347: PPUSH
39348: EMPTY
39349: PPUSH
39350: CALL_OW 1
39354: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
39355: LD_VAR 0 6
39359: PPUSH
39360: LD_INT 0
39362: PPUSH
39363: CALL_OW 109
// ComExitBuilding ( tmp ) ;
39367: LD_VAR 0 6
39371: PPUSH
39372: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
39376: LD_ADDR_EXP 78
39380: PUSH
39381: LD_EXP 78
39385: PPUSH
39386: LD_VAR 0 5
39390: PPUSH
39391: LD_EXP 78
39395: PUSH
39396: LD_VAR 0 5
39400: ARRAY
39401: PPUSH
39402: LD_INT 1
39404: PPUSH
39405: LD_VAR 0 6
39409: PPUSH
39410: CALL_OW 2
39414: PPUSH
39415: CALL_OW 1
39419: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
39420: LD_VAR 0 5
39424: PPUSH
39425: LD_INT 112
39427: PPUSH
39428: CALL 19227 0 2
// end ; end ; end ;
39432: GO 39255
39434: POP
39435: POP
// end ;
39436: LD_VAR 0 3
39440: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
// if not mc_bases then
39451: LD_EXP 49
39455: NOT
39456: IFFALSE 39460
// exit ;
39458: GO 40385
// for i = 1 to mc_bases do
39460: LD_ADDR_VAR 0 3
39464: PUSH
39465: DOUBLE
39466: LD_INT 1
39468: DEC
39469: ST_TO_ADDR
39470: LD_EXP 49
39474: PUSH
39475: FOR_TO
39476: IFFALSE 40383
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
39478: LD_VAR 0 1
39482: PUSH
39483: LD_EXP 49
39487: PUSH
39488: LD_VAR 0 3
39492: ARRAY
39493: IN
39494: PUSH
39495: LD_VAR 0 1
39499: PUSH
39500: LD_EXP 56
39504: PUSH
39505: LD_VAR 0 3
39509: ARRAY
39510: IN
39511: OR
39512: PUSH
39513: LD_VAR 0 1
39517: PUSH
39518: LD_EXP 68
39522: PUSH
39523: LD_VAR 0 3
39527: ARRAY
39528: IN
39529: OR
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: LD_EXP 78
39540: PUSH
39541: LD_VAR 0 3
39545: ARRAY
39546: IN
39547: OR
39548: PUSH
39549: LD_VAR 0 1
39553: PUSH
39554: LD_EXP 79
39558: PUSH
39559: LD_VAR 0 3
39563: ARRAY
39564: IN
39565: OR
39566: IFFALSE 40381
// begin if un in mc_ape [ i ] then
39568: LD_VAR 0 1
39572: PUSH
39573: LD_EXP 78
39577: PUSH
39578: LD_VAR 0 3
39582: ARRAY
39583: IN
39584: IFFALSE 39623
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
39586: LD_ADDR_EXP 78
39590: PUSH
39591: LD_EXP 78
39595: PPUSH
39596: LD_VAR 0 3
39600: PPUSH
39601: LD_EXP 78
39605: PUSH
39606: LD_VAR 0 3
39610: ARRAY
39611: PUSH
39612: LD_VAR 0 1
39616: DIFF
39617: PPUSH
39618: CALL_OW 1
39622: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
39623: LD_VAR 0 1
39627: PUSH
39628: LD_EXP 79
39632: PUSH
39633: LD_VAR 0 3
39637: ARRAY
39638: IN
39639: IFFALSE 39663
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
39641: LD_ADDR_EXP 79
39645: PUSH
39646: LD_EXP 79
39650: PPUSH
39651: LD_VAR 0 3
39655: PPUSH
39656: EMPTY
39657: PPUSH
39658: CALL_OW 1
39662: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 247
39672: PUSH
39673: LD_INT 2
39675: EQUAL
39676: PUSH
39677: LD_VAR 0 1
39681: PPUSH
39682: CALL_OW 110
39686: PUSH
39687: LD_INT 20
39689: EQUAL
39690: AND
39691: IFFALSE 39794
// begin fac := MC_GetBuilding ( i , b_factory ) ;
39693: LD_ADDR_VAR 0 8
39697: PUSH
39698: LD_VAR 0 3
39702: PPUSH
39703: LD_INT 3
39705: PPUSH
39706: CALL 36907 0 2
39710: ST_TO_ADDR
// if fac then
39711: LD_VAR 0 8
39715: IFFALSE 39794
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
39717: LD_ADDR_VAR 0 9
39721: PUSH
39722: LD_VAR 0 8
39726: PPUSH
39727: LD_VAR 0 1
39731: PPUSH
39732: CALL_OW 265
39736: PPUSH
39737: LD_VAR 0 1
39741: PPUSH
39742: CALL_OW 262
39746: PPUSH
39747: LD_VAR 0 1
39751: PPUSH
39752: CALL_OW 263
39756: PPUSH
39757: LD_VAR 0 1
39761: PPUSH
39762: CALL_OW 264
39766: PPUSH
39767: CALL 46229 0 5
39771: ST_TO_ADDR
// if components then
39772: LD_VAR 0 9
39776: IFFALSE 39792
// MC_InsertProduceList ( i , components ) ;
39778: LD_VAR 0 3
39782: PPUSH
39783: LD_VAR 0 9
39787: PPUSH
39788: CALL 36474 0 2
// break ;
39792: GO 40383
// end ; end ; if GetType ( un ) = unit_building then
39794: LD_VAR 0 1
39798: PPUSH
39799: CALL_OW 247
39803: PUSH
39804: LD_INT 3
39806: EQUAL
39807: IFFALSE 40104
// begin btype := GetBType ( un ) ;
39809: LD_ADDR_VAR 0 5
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: CALL_OW 266
39823: ST_TO_ADDR
// if btype = b_warehouse then
39824: LD_VAR 0 5
39828: PUSH
39829: LD_INT 1
39831: EQUAL
39832: IFFALSE 39850
// begin btype := b_depot ;
39834: LD_ADDR_VAR 0 5
39838: PUSH
39839: LD_INT 0
39841: ST_TO_ADDR
// pos := 1 ;
39842: LD_ADDR_VAR 0 6
39846: PUSH
39847: LD_INT 1
39849: ST_TO_ADDR
// end ; if btype = b_factory then
39850: LD_VAR 0 5
39854: PUSH
39855: LD_INT 3
39857: EQUAL
39858: IFFALSE 39876
// begin btype := b_workshop ;
39860: LD_ADDR_VAR 0 5
39864: PUSH
39865: LD_INT 2
39867: ST_TO_ADDR
// pos := 1 ;
39868: LD_ADDR_VAR 0 6
39872: PUSH
39873: LD_INT 1
39875: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
39876: LD_VAR 0 5
39880: PUSH
39881: LD_INT 7
39883: PUSH
39884: LD_INT 8
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: IN
39891: IFFALSE 39901
// btype := b_lab ;
39893: LD_ADDR_VAR 0 5
39897: PUSH
39898: LD_INT 6
39900: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
39901: LD_ADDR_EXP 54
39905: PUSH
39906: LD_EXP 54
39910: PPUSH
39911: LD_VAR 0 3
39915: PUSH
39916: LD_EXP 54
39920: PUSH
39921: LD_VAR 0 3
39925: ARRAY
39926: PUSH
39927: LD_INT 1
39929: PLUS
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PPUSH
39935: LD_VAR 0 5
39939: PUSH
39940: LD_VAR 0 1
39944: PPUSH
39945: CALL_OW 250
39949: PUSH
39950: LD_VAR 0 1
39954: PPUSH
39955: CALL_OW 251
39959: PUSH
39960: LD_VAR 0 1
39964: PPUSH
39965: CALL_OW 254
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: PPUSH
39976: CALL 49064 0 3
39980: ST_TO_ADDR
// if pos = 1 then
39981: LD_VAR 0 6
39985: PUSH
39986: LD_INT 1
39988: EQUAL
39989: IFFALSE 40104
// begin tmp := mc_build_list [ i ] ;
39991: LD_ADDR_VAR 0 7
39995: PUSH
39996: LD_EXP 54
40000: PUSH
40001: LD_VAR 0 3
40005: ARRAY
40006: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
40007: LD_VAR 0 7
40011: PPUSH
40012: LD_INT 2
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 0
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 30
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: PPUSH
40040: CALL_OW 72
40044: IFFALSE 40054
// pos := 2 ;
40046: LD_ADDR_VAR 0 6
40050: PUSH
40051: LD_INT 2
40053: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
40054: LD_ADDR_VAR 0 7
40058: PUSH
40059: LD_VAR 0 7
40063: PPUSH
40064: LD_VAR 0 6
40068: PPUSH
40069: LD_VAR 0 7
40073: PPUSH
40074: CALL 48955 0 3
40078: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
40079: LD_ADDR_EXP 54
40083: PUSH
40084: LD_EXP 54
40088: PPUSH
40089: LD_VAR 0 3
40093: PPUSH
40094: LD_VAR 0 7
40098: PPUSH
40099: CALL_OW 1
40103: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
40104: LD_VAR 0 1
40108: PUSH
40109: LD_EXP 49
40113: PUSH
40114: LD_VAR 0 3
40118: ARRAY
40119: IN
40120: IFFALSE 40159
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
40122: LD_ADDR_EXP 49
40126: PUSH
40127: LD_EXP 49
40131: PPUSH
40132: LD_VAR 0 3
40136: PPUSH
40137: LD_EXP 49
40141: PUSH
40142: LD_VAR 0 3
40146: ARRAY
40147: PUSH
40148: LD_VAR 0 1
40152: DIFF
40153: PPUSH
40154: CALL_OW 1
40158: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
40159: LD_VAR 0 1
40163: PUSH
40164: LD_EXP 56
40168: PUSH
40169: LD_VAR 0 3
40173: ARRAY
40174: IN
40175: IFFALSE 40214
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
40177: LD_ADDR_EXP 56
40181: PUSH
40182: LD_EXP 56
40186: PPUSH
40187: LD_VAR 0 3
40191: PPUSH
40192: LD_EXP 56
40196: PUSH
40197: LD_VAR 0 3
40201: ARRAY
40202: PUSH
40203: LD_VAR 0 1
40207: DIFF
40208: PPUSH
40209: CALL_OW 1
40213: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
40214: LD_VAR 0 1
40218: PUSH
40219: LD_EXP 68
40223: PUSH
40224: LD_VAR 0 3
40228: ARRAY
40229: IN
40230: IFFALSE 40269
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
40232: LD_ADDR_EXP 68
40236: PUSH
40237: LD_EXP 68
40241: PPUSH
40242: LD_VAR 0 3
40246: PPUSH
40247: LD_EXP 68
40251: PUSH
40252: LD_VAR 0 3
40256: ARRAY
40257: PUSH
40258: LD_VAR 0 1
40262: DIFF
40263: PPUSH
40264: CALL_OW 1
40268: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
40269: LD_VAR 0 1
40273: PUSH
40274: LD_EXP 58
40278: PUSH
40279: LD_VAR 0 3
40283: ARRAY
40284: IN
40285: IFFALSE 40324
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
40287: LD_ADDR_EXP 58
40291: PUSH
40292: LD_EXP 58
40296: PPUSH
40297: LD_VAR 0 3
40301: PPUSH
40302: LD_EXP 58
40306: PUSH
40307: LD_VAR 0 3
40311: ARRAY
40312: PUSH
40313: LD_VAR 0 1
40317: DIFF
40318: PPUSH
40319: CALL_OW 1
40323: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
40324: LD_VAR 0 1
40328: PUSH
40329: LD_EXP 57
40333: PUSH
40334: LD_VAR 0 3
40338: ARRAY
40339: IN
40340: IFFALSE 40379
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
40342: LD_ADDR_EXP 57
40346: PUSH
40347: LD_EXP 57
40351: PPUSH
40352: LD_VAR 0 3
40356: PPUSH
40357: LD_EXP 57
40361: PUSH
40362: LD_VAR 0 3
40366: ARRAY
40367: PUSH
40368: LD_VAR 0 1
40372: DIFF
40373: PPUSH
40374: CALL_OW 1
40378: ST_TO_ADDR
// end ; break ;
40379: GO 40383
// end ;
40381: GO 39475
40383: POP
40384: POP
// end ;
40385: LD_VAR 0 2
40389: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
40390: LD_INT 0
40392: PPUSH
40393: PPUSH
40394: PPUSH
// if not mc_bases then
40395: LD_EXP 49
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40619
// for i = 1 to mc_bases do
40404: LD_ADDR_VAR 0 3
40408: PUSH
40409: DOUBLE
40410: LD_INT 1
40412: DEC
40413: ST_TO_ADDR
40414: LD_EXP 49
40418: PUSH
40419: FOR_TO
40420: IFFALSE 40617
// begin if building in mc_construct_list [ i ] then
40422: LD_VAR 0 1
40426: PUSH
40427: LD_EXP 56
40431: PUSH
40432: LD_VAR 0 3
40436: ARRAY
40437: IN
40438: IFFALSE 40615
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
40440: LD_ADDR_EXP 56
40444: PUSH
40445: LD_EXP 56
40449: PPUSH
40450: LD_VAR 0 3
40454: PPUSH
40455: LD_EXP 56
40459: PUSH
40460: LD_VAR 0 3
40464: ARRAY
40465: PUSH
40466: LD_VAR 0 1
40470: DIFF
40471: PPUSH
40472: CALL_OW 1
40476: ST_TO_ADDR
// if building in mc_lab [ i ] then
40477: LD_VAR 0 1
40481: PUSH
40482: LD_EXP 82
40486: PUSH
40487: LD_VAR 0 3
40491: ARRAY
40492: IN
40493: IFFALSE 40548
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
40495: LD_ADDR_EXP 83
40499: PUSH
40500: LD_EXP 83
40504: PPUSH
40505: LD_VAR 0 3
40509: PPUSH
40510: LD_EXP 83
40514: PUSH
40515: LD_VAR 0 3
40519: ARRAY
40520: PPUSH
40521: LD_INT 1
40523: PPUSH
40524: LD_EXP 83
40528: PUSH
40529: LD_VAR 0 3
40533: ARRAY
40534: PPUSH
40535: LD_INT 0
40537: PPUSH
40538: CALL 48047 0 4
40542: PPUSH
40543: CALL_OW 1
40547: ST_TO_ADDR
// if not building in mc_bases [ i ] then
40548: LD_VAR 0 1
40552: PUSH
40553: LD_EXP 49
40557: PUSH
40558: LD_VAR 0 3
40562: ARRAY
40563: IN
40564: NOT
40565: IFFALSE 40611
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
40567: LD_ADDR_EXP 49
40571: PUSH
40572: LD_EXP 49
40576: PPUSH
40577: LD_VAR 0 3
40581: PUSH
40582: LD_EXP 49
40586: PUSH
40587: LD_VAR 0 3
40591: ARRAY
40592: PUSH
40593: LD_INT 1
40595: PLUS
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PPUSH
40601: LD_VAR 0 1
40605: PPUSH
40606: CALL 49064 0 3
40610: ST_TO_ADDR
// exit ;
40611: POP
40612: POP
40613: GO 40619
// end ; end ;
40615: GO 40419
40617: POP
40618: POP
// end ;
40619: LD_VAR 0 2
40623: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
40624: LD_INT 0
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
// if not mc_bases then
40633: LD_EXP 49
40637: NOT
40638: IFFALSE 40642
// exit ;
40640: GO 41303
// for i = 1 to mc_bases do
40642: LD_ADDR_VAR 0 3
40646: PUSH
40647: DOUBLE
40648: LD_INT 1
40650: DEC
40651: ST_TO_ADDR
40652: LD_EXP 49
40656: PUSH
40657: FOR_TO
40658: IFFALSE 41301
// begin if building in mc_construct_list [ i ] then
40660: LD_VAR 0 1
40664: PUSH
40665: LD_EXP 56
40669: PUSH
40670: LD_VAR 0 3
40674: ARRAY
40675: IN
40676: IFFALSE 41299
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
40678: LD_ADDR_EXP 56
40682: PUSH
40683: LD_EXP 56
40687: PPUSH
40688: LD_VAR 0 3
40692: PPUSH
40693: LD_EXP 56
40697: PUSH
40698: LD_VAR 0 3
40702: ARRAY
40703: PUSH
40704: LD_VAR 0 1
40708: DIFF
40709: PPUSH
40710: CALL_OW 1
40714: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
40715: LD_ADDR_EXP 49
40719: PUSH
40720: LD_EXP 49
40724: PPUSH
40725: LD_VAR 0 3
40729: PUSH
40730: LD_EXP 49
40734: PUSH
40735: LD_VAR 0 3
40739: ARRAY
40740: PUSH
40741: LD_INT 1
40743: PLUS
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PPUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL 49064 0 3
40758: ST_TO_ADDR
// btype := GetBType ( building ) ;
40759: LD_ADDR_VAR 0 5
40763: PUSH
40764: LD_VAR 0 1
40768: PPUSH
40769: CALL_OW 266
40773: ST_TO_ADDR
// side := GetSide ( building ) ;
40774: LD_ADDR_VAR 0 8
40778: PUSH
40779: LD_VAR 0 1
40783: PPUSH
40784: CALL_OW 255
40788: ST_TO_ADDR
// if btype = b_lab then
40789: LD_VAR 0 5
40793: PUSH
40794: LD_INT 6
40796: EQUAL
40797: IFFALSE 40847
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
40799: LD_ADDR_EXP 82
40803: PUSH
40804: LD_EXP 82
40808: PPUSH
40809: LD_VAR 0 3
40813: PUSH
40814: LD_EXP 82
40818: PUSH
40819: LD_VAR 0 3
40823: ARRAY
40824: PUSH
40825: LD_INT 1
40827: PLUS
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PPUSH
40833: LD_VAR 0 1
40837: PPUSH
40838: CALL 49064 0 3
40842: ST_TO_ADDR
// exit ;
40843: POP
40844: POP
40845: GO 41303
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
40847: LD_VAR 0 5
40851: PUSH
40852: LD_INT 0
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: LD_INT 4
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: IN
40866: IFFALSE 40990
// begin if btype = b_armoury then
40868: LD_VAR 0 5
40872: PUSH
40873: LD_INT 4
40875: EQUAL
40876: IFFALSE 40886
// btype := b_barracks ;
40878: LD_ADDR_VAR 0 5
40882: PUSH
40883: LD_INT 5
40885: ST_TO_ADDR
// if btype = b_depot then
40886: LD_VAR 0 5
40890: PUSH
40891: LD_INT 0
40893: EQUAL
40894: IFFALSE 40904
// btype := b_warehouse ;
40896: LD_ADDR_VAR 0 5
40900: PUSH
40901: LD_INT 1
40903: ST_TO_ADDR
// if btype = b_workshop then
40904: LD_VAR 0 5
40908: PUSH
40909: LD_INT 2
40911: EQUAL
40912: IFFALSE 40922
// btype := b_factory ;
40914: LD_ADDR_VAR 0 5
40918: PUSH
40919: LD_INT 3
40921: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
40922: LD_VAR 0 5
40926: PPUSH
40927: LD_VAR 0 8
40931: PPUSH
40932: CALL_OW 323
40936: PUSH
40937: LD_INT 1
40939: EQUAL
40940: IFFALSE 40986
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
40942: LD_ADDR_EXP 81
40946: PUSH
40947: LD_EXP 81
40951: PPUSH
40952: LD_VAR 0 3
40956: PUSH
40957: LD_EXP 81
40961: PUSH
40962: LD_VAR 0 3
40966: ARRAY
40967: PUSH
40968: LD_INT 1
40970: PLUS
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PPUSH
40976: LD_VAR 0 1
40980: PPUSH
40981: CALL 49064 0 3
40985: ST_TO_ADDR
// exit ;
40986: POP
40987: POP
40988: GO 41303
// end ; if btype in [ b_bunker , b_turret ] then
40990: LD_VAR 0 5
40994: PUSH
40995: LD_INT 32
40997: PUSH
40998: LD_INT 33
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: IN
41005: IFFALSE 41295
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
41007: LD_ADDR_EXP 57
41011: PUSH
41012: LD_EXP 57
41016: PPUSH
41017: LD_VAR 0 3
41021: PUSH
41022: LD_EXP 57
41026: PUSH
41027: LD_VAR 0 3
41031: ARRAY
41032: PUSH
41033: LD_INT 1
41035: PLUS
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PPUSH
41041: LD_VAR 0 1
41045: PPUSH
41046: CALL 49064 0 3
41050: ST_TO_ADDR
// if btype = b_bunker then
41051: LD_VAR 0 5
41055: PUSH
41056: LD_INT 32
41058: EQUAL
41059: IFFALSE 41295
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
41061: LD_ADDR_EXP 58
41065: PUSH
41066: LD_EXP 58
41070: PPUSH
41071: LD_VAR 0 3
41075: PUSH
41076: LD_EXP 58
41080: PUSH
41081: LD_VAR 0 3
41085: ARRAY
41086: PUSH
41087: LD_INT 1
41089: PLUS
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PPUSH
41095: LD_VAR 0 1
41099: PPUSH
41100: CALL 49064 0 3
41104: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
41105: LD_ADDR_VAR 0 6
41109: PUSH
41110: LD_EXP 49
41114: PUSH
41115: LD_VAR 0 3
41119: ARRAY
41120: PPUSH
41121: LD_INT 25
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 3
41133: PUSH
41134: LD_INT 54
41136: PUSH
41137: EMPTY
41138: LIST
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PPUSH
41148: CALL_OW 72
41152: ST_TO_ADDR
// if tmp then
41153: LD_VAR 0 6
41157: IFFALSE 41163
// exit ;
41159: POP
41160: POP
41161: GO 41303
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
41163: LD_ADDR_VAR 0 6
41167: PUSH
41168: LD_EXP 49
41172: PUSH
41173: LD_VAR 0 3
41177: ARRAY
41178: PPUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 30
41184: PUSH
41185: LD_INT 4
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 30
41194: PUSH
41195: LD_INT 5
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: LIST
41206: PPUSH
41207: CALL_OW 72
41211: ST_TO_ADDR
// if not tmp then
41212: LD_VAR 0 6
41216: NOT
41217: IFFALSE 41223
// exit ;
41219: POP
41220: POP
41221: GO 41303
// for j in tmp do
41223: LD_ADDR_VAR 0 4
41227: PUSH
41228: LD_VAR 0 6
41232: PUSH
41233: FOR_IN
41234: IFFALSE 41293
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
41236: LD_ADDR_VAR 0 7
41240: PUSH
41241: LD_VAR 0 4
41245: PPUSH
41246: CALL_OW 313
41250: PPUSH
41251: LD_INT 25
41253: PUSH
41254: LD_INT 1
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PPUSH
41261: CALL_OW 72
41265: ST_TO_ADDR
// if units then
41266: LD_VAR 0 7
41270: IFFALSE 41291
// begin ComExitBuilding ( units [ 1 ] ) ;
41272: LD_VAR 0 7
41276: PUSH
41277: LD_INT 1
41279: ARRAY
41280: PPUSH
41281: CALL_OW 122
// exit ;
41285: POP
41286: POP
41287: POP
41288: POP
41289: GO 41303
// end ; end ;
41291: GO 41233
41293: POP
41294: POP
// end ; end ; exit ;
41295: POP
41296: POP
41297: GO 41303
// end ; end ;
41299: GO 40657
41301: POP
41302: POP
// end ;
41303: LD_VAR 0 2
41307: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
41308: LD_INT 0
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
// if not mc_bases then
41317: LD_EXP 49
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41557
// btype := GetBType ( building ) ;
41326: LD_ADDR_VAR 0 6
41330: PUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: CALL_OW 266
41340: ST_TO_ADDR
// x := GetX ( building ) ;
41341: LD_ADDR_VAR 0 7
41345: PUSH
41346: LD_VAR 0 1
41350: PPUSH
41351: CALL_OW 250
41355: ST_TO_ADDR
// y := GetY ( building ) ;
41356: LD_ADDR_VAR 0 8
41360: PUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 251
41370: ST_TO_ADDR
// d := GetDir ( building ) ;
41371: LD_ADDR_VAR 0 9
41375: PUSH
41376: LD_VAR 0 1
41380: PPUSH
41381: CALL_OW 254
41385: ST_TO_ADDR
// for i = 1 to mc_bases do
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: DOUBLE
41392: LD_INT 1
41394: DEC
41395: ST_TO_ADDR
41396: LD_EXP 49
41400: PUSH
41401: FOR_TO
41402: IFFALSE 41555
// begin if not mc_build_list [ i ] then
41404: LD_EXP 54
41408: PUSH
41409: LD_VAR 0 4
41413: ARRAY
41414: NOT
41415: IFFALSE 41419
// continue ;
41417: GO 41401
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
41419: LD_VAR 0 6
41423: PUSH
41424: LD_VAR 0 7
41428: PUSH
41429: LD_VAR 0 8
41433: PUSH
41434: LD_VAR 0 9
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: PPUSH
41445: LD_EXP 54
41449: PUSH
41450: LD_VAR 0 4
41454: ARRAY
41455: PUSH
41456: LD_INT 1
41458: ARRAY
41459: PPUSH
41460: CALL 54581 0 2
41464: IFFALSE 41553
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
41466: LD_ADDR_EXP 54
41470: PUSH
41471: LD_EXP 54
41475: PPUSH
41476: LD_VAR 0 4
41480: PPUSH
41481: LD_EXP 54
41485: PUSH
41486: LD_VAR 0 4
41490: ARRAY
41491: PPUSH
41492: LD_INT 1
41494: PPUSH
41495: CALL_OW 3
41499: PPUSH
41500: CALL_OW 1
41504: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
41505: LD_ADDR_EXP 56
41509: PUSH
41510: LD_EXP 56
41514: PPUSH
41515: LD_VAR 0 4
41519: PUSH
41520: LD_EXP 56
41524: PUSH
41525: LD_VAR 0 4
41529: ARRAY
41530: PUSH
41531: LD_INT 1
41533: PLUS
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PPUSH
41539: LD_VAR 0 1
41543: PPUSH
41544: CALL 49064 0 3
41548: ST_TO_ADDR
// exit ;
41549: POP
41550: POP
41551: GO 41557
// end ; end ;
41553: GO 41401
41555: POP
41556: POP
// end ;
41557: LD_VAR 0 3
41561: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
41562: LD_INT 0
41564: PPUSH
41565: PPUSH
41566: PPUSH
// if not mc_bases then
41567: LD_EXP 49
41571: NOT
41572: IFFALSE 41576
// exit ;
41574: GO 41766
// for i = 1 to mc_bases do
41576: LD_ADDR_VAR 0 4
41580: PUSH
41581: DOUBLE
41582: LD_INT 1
41584: DEC
41585: ST_TO_ADDR
41586: LD_EXP 49
41590: PUSH
41591: FOR_TO
41592: IFFALSE 41679
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
41594: LD_VAR 0 1
41598: PUSH
41599: LD_EXP 57
41603: PUSH
41604: LD_VAR 0 4
41608: ARRAY
41609: IN
41610: PUSH
41611: LD_VAR 0 1
41615: PUSH
41616: LD_EXP 58
41620: PUSH
41621: LD_VAR 0 4
41625: ARRAY
41626: IN
41627: NOT
41628: AND
41629: IFFALSE 41677
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
41631: LD_ADDR_EXP 58
41635: PUSH
41636: LD_EXP 58
41640: PPUSH
41641: LD_VAR 0 4
41645: PUSH
41646: LD_EXP 58
41650: PUSH
41651: LD_VAR 0 4
41655: ARRAY
41656: PUSH
41657: LD_INT 1
41659: PLUS
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PPUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: CALL 49064 0 3
41674: ST_TO_ADDR
// break ;
41675: GO 41679
// end ; end ;
41677: GO 41591
41679: POP
41680: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
41681: LD_VAR 0 1
41685: PPUSH
41686: CALL_OW 257
41690: PUSH
41691: LD_EXP 75
41695: IN
41696: PUSH
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 266
41706: PUSH
41707: LD_INT 5
41709: EQUAL
41710: AND
41711: PUSH
41712: LD_VAR 0 2
41716: PPUSH
41717: CALL_OW 110
41721: PUSH
41722: LD_INT 18
41724: NONEQUAL
41725: AND
41726: IFFALSE 41766
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
41728: LD_VAR 0 2
41732: PPUSH
41733: CALL_OW 257
41737: PUSH
41738: LD_INT 5
41740: PUSH
41741: LD_INT 8
41743: PUSH
41744: LD_INT 9
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: IN
41752: IFFALSE 41766
// SetClass ( unit , 1 ) ;
41754: LD_VAR 0 2
41758: PPUSH
41759: LD_INT 1
41761: PPUSH
41762: CALL_OW 336
// end ;
41766: LD_VAR 0 3
41770: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
// if not mc_bases then
41775: LD_EXP 49
41779: NOT
41780: IFFALSE 41784
// exit ;
41782: GO 41900
// if GetLives ( abandoned_vehicle ) > 250 then
41784: LD_VAR 0 2
41788: PPUSH
41789: CALL_OW 256
41793: PUSH
41794: LD_INT 250
41796: GREATER
41797: IFFALSE 41801
// exit ;
41799: GO 41900
// for i = 1 to mc_bases do
41801: LD_ADDR_VAR 0 6
41805: PUSH
41806: DOUBLE
41807: LD_INT 1
41809: DEC
41810: ST_TO_ADDR
41811: LD_EXP 49
41815: PUSH
41816: FOR_TO
41817: IFFALSE 41898
// begin if driver in mc_bases [ i ] then
41819: LD_VAR 0 1
41823: PUSH
41824: LD_EXP 49
41828: PUSH
41829: LD_VAR 0 6
41833: ARRAY
41834: IN
41835: IFFALSE 41896
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
41837: LD_VAR 0 1
41841: PPUSH
41842: LD_EXP 49
41846: PUSH
41847: LD_VAR 0 6
41851: ARRAY
41852: PPUSH
41853: LD_INT 2
41855: PUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: PPUSH
41881: CALL_OW 72
41885: PUSH
41886: LD_INT 1
41888: ARRAY
41889: PPUSH
41890: CALL_OW 112
// break ;
41894: GO 41898
// end ; end ;
41896: GO 41816
41898: POP
41899: POP
// end ; end_of_file
41900: LD_VAR 0 5
41904: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41905: LD_INT 0
41907: PPUSH
41908: PPUSH
// if exist_mode then
41909: LD_VAR 0 2
41913: IFFALSE 41938
// unit := CreateCharacter ( prefix & ident ) else
41915: LD_ADDR_VAR 0 5
41919: PUSH
41920: LD_VAR 0 3
41924: PUSH
41925: LD_VAR 0 1
41929: STR
41930: PPUSH
41931: CALL_OW 34
41935: ST_TO_ADDR
41936: GO 41953
// unit := NewCharacter ( ident ) ;
41938: LD_ADDR_VAR 0 5
41942: PUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: CALL_OW 25
41952: ST_TO_ADDR
// result := unit ;
41953: LD_ADDR_VAR 0 4
41957: PUSH
41958: LD_VAR 0 5
41962: ST_TO_ADDR
// end ;
41963: LD_VAR 0 4
41967: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41968: LD_INT 0
41970: PPUSH
41971: PPUSH
// if not side or not nation then
41972: LD_VAR 0 1
41976: NOT
41977: PUSH
41978: LD_VAR 0 2
41982: NOT
41983: OR
41984: IFFALSE 41988
// exit ;
41986: GO 42608
// case nation of nation_american :
41988: LD_VAR 0 2
41992: PUSH
41993: LD_INT 1
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42167
42001: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
42002: LD_ADDR_VAR 0 4
42006: PUSH
42007: LD_INT 35
42009: PUSH
42010: LD_INT 45
42012: PUSH
42013: LD_INT 46
42015: PUSH
42016: LD_INT 47
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: LD_INT 6
42027: PUSH
42028: LD_INT 15
42030: PUSH
42031: LD_INT 16
42033: PUSH
42034: LD_INT 7
42036: PUSH
42037: LD_INT 12
42039: PUSH
42040: LD_INT 13
42042: PUSH
42043: LD_INT 10
42045: PUSH
42046: LD_INT 14
42048: PUSH
42049: LD_INT 20
42051: PUSH
42052: LD_INT 25
42054: PUSH
42055: LD_INT 32
42057: PUSH
42058: LD_INT 27
42060: PUSH
42061: LD_INT 36
42063: PUSH
42064: LD_INT 69
42066: PUSH
42067: LD_INT 39
42069: PUSH
42070: LD_INT 34
42072: PUSH
42073: LD_INT 40
42075: PUSH
42076: LD_INT 48
42078: PUSH
42079: LD_INT 49
42081: PUSH
42082: LD_INT 50
42084: PUSH
42085: LD_INT 51
42087: PUSH
42088: LD_INT 52
42090: PUSH
42091: LD_INT 53
42093: PUSH
42094: LD_INT 54
42096: PUSH
42097: LD_INT 55
42099: PUSH
42100: LD_INT 56
42102: PUSH
42103: LD_INT 57
42105: PUSH
42106: LD_INT 58
42108: PUSH
42109: LD_INT 59
42111: PUSH
42112: LD_INT 60
42114: PUSH
42115: LD_INT 61
42117: PUSH
42118: LD_INT 62
42120: PUSH
42121: LD_INT 80
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: ST_TO_ADDR
42165: GO 42532
42167: LD_INT 2
42169: DOUBLE
42170: EQUAL
42171: IFTRUE 42175
42173: GO 42345
42175: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
42176: LD_ADDR_VAR 0 4
42180: PUSH
42181: LD_INT 35
42183: PUSH
42184: LD_INT 45
42186: PUSH
42187: LD_INT 46
42189: PUSH
42190: LD_INT 47
42192: PUSH
42193: LD_INT 70
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 11
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: LD_INT 5
42210: PUSH
42211: LD_INT 6
42213: PUSH
42214: LD_INT 15
42216: PUSH
42217: LD_INT 18
42219: PUSH
42220: LD_INT 7
42222: PUSH
42223: LD_INT 17
42225: PUSH
42226: LD_INT 8
42228: PUSH
42229: LD_INT 20
42231: PUSH
42232: LD_INT 72
42234: PUSH
42235: LD_INT 26
42237: PUSH
42238: LD_INT 69
42240: PUSH
42241: LD_INT 39
42243: PUSH
42244: LD_INT 40
42246: PUSH
42247: LD_INT 41
42249: PUSH
42250: LD_INT 42
42252: PUSH
42253: LD_INT 43
42255: PUSH
42256: LD_INT 48
42258: PUSH
42259: LD_INT 49
42261: PUSH
42262: LD_INT 50
42264: PUSH
42265: LD_INT 51
42267: PUSH
42268: LD_INT 52
42270: PUSH
42271: LD_INT 53
42273: PUSH
42274: LD_INT 54
42276: PUSH
42277: LD_INT 55
42279: PUSH
42280: LD_INT 56
42282: PUSH
42283: LD_INT 60
42285: PUSH
42286: LD_INT 61
42288: PUSH
42289: LD_INT 62
42291: PUSH
42292: LD_INT 66
42294: PUSH
42295: LD_INT 67
42297: PUSH
42298: LD_INT 68
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
42343: GO 42532
42345: LD_INT 3
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42353
42351: GO 42531
42353: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
42354: LD_ADDR_VAR 0 4
42358: PUSH
42359: LD_INT 46
42361: PUSH
42362: LD_INT 47
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 11
42373: PUSH
42374: LD_INT 9
42376: PUSH
42377: LD_INT 20
42379: PUSH
42380: LD_INT 19
42382: PUSH
42383: LD_INT 21
42385: PUSH
42386: LD_INT 24
42388: PUSH
42389: LD_INT 22
42391: PUSH
42392: LD_INT 25
42394: PUSH
42395: LD_INT 28
42397: PUSH
42398: LD_INT 29
42400: PUSH
42401: LD_INT 31
42403: PUSH
42404: LD_INT 37
42406: PUSH
42407: LD_INT 38
42409: PUSH
42410: LD_INT 32
42412: PUSH
42413: LD_INT 27
42415: PUSH
42416: LD_INT 33
42418: PUSH
42419: LD_INT 69
42421: PUSH
42422: LD_INT 39
42424: PUSH
42425: LD_INT 34
42427: PUSH
42428: LD_INT 40
42430: PUSH
42431: LD_INT 71
42433: PUSH
42434: LD_INT 23
42436: PUSH
42437: LD_INT 44
42439: PUSH
42440: LD_INT 48
42442: PUSH
42443: LD_INT 49
42445: PUSH
42446: LD_INT 50
42448: PUSH
42449: LD_INT 51
42451: PUSH
42452: LD_INT 52
42454: PUSH
42455: LD_INT 53
42457: PUSH
42458: LD_INT 54
42460: PUSH
42461: LD_INT 55
42463: PUSH
42464: LD_INT 56
42466: PUSH
42467: LD_INT 57
42469: PUSH
42470: LD_INT 58
42472: PUSH
42473: LD_INT 59
42475: PUSH
42476: LD_INT 63
42478: PUSH
42479: LD_INT 64
42481: PUSH
42482: LD_INT 65
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: ST_TO_ADDR
42529: GO 42532
42531: POP
// if state > - 1 and state < 3 then
42532: LD_VAR 0 3
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: GREATER
42541: PUSH
42542: LD_VAR 0 3
42546: PUSH
42547: LD_INT 3
42549: LESS
42550: AND
42551: IFFALSE 42608
// for i in result do
42553: LD_ADDR_VAR 0 5
42557: PUSH
42558: LD_VAR 0 4
42562: PUSH
42563: FOR_IN
42564: IFFALSE 42606
// if GetTech ( i , side ) <> state then
42566: LD_VAR 0 5
42570: PPUSH
42571: LD_VAR 0 1
42575: PPUSH
42576: CALL_OW 321
42580: PUSH
42581: LD_VAR 0 3
42585: NONEQUAL
42586: IFFALSE 42604
// result := result diff i ;
42588: LD_ADDR_VAR 0 4
42592: PUSH
42593: LD_VAR 0 4
42597: PUSH
42598: LD_VAR 0 5
42602: DIFF
42603: ST_TO_ADDR
42604: GO 42563
42606: POP
42607: POP
// end ;
42608: LD_VAR 0 4
42612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42613: LD_INT 0
42615: PPUSH
42616: PPUSH
42617: PPUSH
// result := true ;
42618: LD_ADDR_VAR 0 3
42622: PUSH
42623: LD_INT 1
42625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42626: LD_ADDR_VAR 0 5
42630: PUSH
42631: LD_VAR 0 2
42635: PPUSH
42636: CALL_OW 480
42640: ST_TO_ADDR
// if not tmp then
42641: LD_VAR 0 5
42645: NOT
42646: IFFALSE 42650
// exit ;
42648: GO 42699
// for i in tmp do
42650: LD_ADDR_VAR 0 4
42654: PUSH
42655: LD_VAR 0 5
42659: PUSH
42660: FOR_IN
42661: IFFALSE 42697
// if GetTech ( i , side ) <> state_researched then
42663: LD_VAR 0 4
42667: PPUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 321
42677: PUSH
42678: LD_INT 2
42680: NONEQUAL
42681: IFFALSE 42695
// begin result := false ;
42683: LD_ADDR_VAR 0 3
42687: PUSH
42688: LD_INT 0
42690: ST_TO_ADDR
// exit ;
42691: POP
42692: POP
42693: GO 42699
// end ;
42695: GO 42660
42697: POP
42698: POP
// end ;
42699: LD_VAR 0 3
42703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42704: LD_INT 0
42706: PPUSH
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42719: LD_VAR 0 1
42723: NOT
42724: PUSH
42725: LD_VAR 0 1
42729: PPUSH
42730: CALL_OW 257
42734: PUSH
42735: LD_INT 9
42737: NONEQUAL
42738: OR
42739: IFFALSE 42743
// exit ;
42741: GO 43316
// side := GetSide ( unit ) ;
42743: LD_ADDR_VAR 0 9
42747: PUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 255
42757: ST_TO_ADDR
// tech_space := tech_spacanom ;
42758: LD_ADDR_VAR 0 12
42762: PUSH
42763: LD_INT 29
42765: ST_TO_ADDR
// tech_time := tech_taurad ;
42766: LD_ADDR_VAR 0 13
42770: PUSH
42771: LD_INT 28
42773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42774: LD_ADDR_VAR 0 11
42778: PUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: CALL_OW 310
42788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42789: LD_VAR 0 11
42793: PPUSH
42794: CALL_OW 247
42798: PUSH
42799: LD_INT 2
42801: EQUAL
42802: IFFALSE 42806
// exit ;
42804: GO 43316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42806: LD_ADDR_VAR 0 8
42810: PUSH
42811: LD_INT 81
42813: PUSH
42814: LD_VAR 0 9
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 21
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PPUSH
42844: CALL_OW 69
42848: ST_TO_ADDR
// if not tmp then
42849: LD_VAR 0 8
42853: NOT
42854: IFFALSE 42858
// exit ;
42856: GO 43316
// if in_unit then
42858: LD_VAR 0 11
42862: IFFALSE 42886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42864: LD_ADDR_VAR 0 10
42868: PUSH
42869: LD_VAR 0 8
42873: PPUSH
42874: LD_VAR 0 11
42878: PPUSH
42879: CALL_OW 74
42883: ST_TO_ADDR
42884: GO 42906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42886: LD_ADDR_VAR 0 10
42890: PUSH
42891: LD_VAR 0 8
42895: PPUSH
42896: LD_VAR 0 1
42900: PPUSH
42901: CALL_OW 74
42905: ST_TO_ADDR
// if not enemy then
42906: LD_VAR 0 10
42910: NOT
42911: IFFALSE 42915
// exit ;
42913: GO 43316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42915: LD_VAR 0 11
42919: PUSH
42920: LD_VAR 0 11
42924: PPUSH
42925: LD_VAR 0 10
42929: PPUSH
42930: CALL_OW 296
42934: PUSH
42935: LD_INT 13
42937: GREATER
42938: AND
42939: PUSH
42940: LD_VAR 0 1
42944: PPUSH
42945: LD_VAR 0 10
42949: PPUSH
42950: CALL_OW 296
42954: PUSH
42955: LD_INT 12
42957: GREATER
42958: OR
42959: IFFALSE 42963
// exit ;
42961: GO 43316
// missile := [ 1 ] ;
42963: LD_ADDR_VAR 0 14
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42974: LD_VAR 0 9
42978: PPUSH
42979: LD_VAR 0 12
42983: PPUSH
42984: CALL_OW 325
42988: IFFALSE 43017
// missile := Insert ( missile , missile + 1 , 2 ) ;
42990: LD_ADDR_VAR 0 14
42994: PUSH
42995: LD_VAR 0 14
42999: PPUSH
43000: LD_VAR 0 14
43004: PUSH
43005: LD_INT 1
43007: PLUS
43008: PPUSH
43009: LD_INT 2
43011: PPUSH
43012: CALL_OW 2
43016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
43017: LD_VAR 0 9
43021: PPUSH
43022: LD_VAR 0 13
43026: PPUSH
43027: CALL_OW 325
43031: PUSH
43032: LD_VAR 0 10
43036: PPUSH
43037: CALL_OW 255
43041: PPUSH
43042: LD_VAR 0 13
43046: PPUSH
43047: CALL_OW 325
43051: NOT
43052: AND
43053: IFFALSE 43082
// missile := Insert ( missile , missile + 1 , 3 ) ;
43055: LD_ADDR_VAR 0 14
43059: PUSH
43060: LD_VAR 0 14
43064: PPUSH
43065: LD_VAR 0 14
43069: PUSH
43070: LD_INT 1
43072: PLUS
43073: PPUSH
43074: LD_INT 3
43076: PPUSH
43077: CALL_OW 2
43081: ST_TO_ADDR
// if missile < 2 then
43082: LD_VAR 0 14
43086: PUSH
43087: LD_INT 2
43089: LESS
43090: IFFALSE 43094
// exit ;
43092: GO 43316
// x := GetX ( enemy ) ;
43094: LD_ADDR_VAR 0 4
43098: PUSH
43099: LD_VAR 0 10
43103: PPUSH
43104: CALL_OW 250
43108: ST_TO_ADDR
// y := GetY ( enemy ) ;
43109: LD_ADDR_VAR 0 5
43113: PUSH
43114: LD_VAR 0 10
43118: PPUSH
43119: CALL_OW 251
43123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43124: LD_ADDR_VAR 0 6
43128: PUSH
43129: LD_VAR 0 4
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PPUSH
43138: LD_INT 1
43140: PPUSH
43141: CALL_OW 12
43145: PLUS
43146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: LD_VAR 0 5
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PPUSH
43161: LD_INT 1
43163: PPUSH
43164: CALL_OW 12
43168: PLUS
43169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43170: LD_VAR 0 6
43174: PPUSH
43175: LD_VAR 0 7
43179: PPUSH
43180: CALL_OW 488
43184: NOT
43185: IFFALSE 43207
// begin _x := x ;
43187: LD_ADDR_VAR 0 6
43191: PUSH
43192: LD_VAR 0 4
43196: ST_TO_ADDR
// _y := y ;
43197: LD_ADDR_VAR 0 7
43201: PUSH
43202: LD_VAR 0 5
43206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43207: LD_ADDR_VAR 0 3
43211: PUSH
43212: LD_INT 1
43214: PPUSH
43215: LD_VAR 0 14
43219: PPUSH
43220: CALL_OW 12
43224: ST_TO_ADDR
// case i of 1 :
43225: LD_VAR 0 3
43229: PUSH
43230: LD_INT 1
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43255
43238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43239: LD_VAR 0 1
43243: PPUSH
43244: LD_VAR 0 10
43248: PPUSH
43249: CALL_OW 115
43253: GO 43316
43255: LD_INT 2
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43285
43263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43264: LD_VAR 0 1
43268: PPUSH
43269: LD_VAR 0 6
43273: PPUSH
43274: LD_VAR 0 7
43278: PPUSH
43279: CALL_OW 153
43283: GO 43316
43285: LD_INT 3
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43315
43293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43294: LD_VAR 0 1
43298: PPUSH
43299: LD_VAR 0 6
43303: PPUSH
43304: LD_VAR 0 7
43308: PPUSH
43309: CALL_OW 154
43313: GO 43316
43315: POP
// end ;
43316: LD_VAR 0 2
43320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43321: LD_INT 0
43323: PPUSH
43324: PPUSH
43325: PPUSH
43326: PPUSH
43327: PPUSH
43328: PPUSH
// if not unit or not building then
43329: LD_VAR 0 1
43333: NOT
43334: PUSH
43335: LD_VAR 0 2
43339: NOT
43340: OR
43341: IFFALSE 43345
// exit ;
43343: GO 43500
// x := GetX ( building ) ;
43345: LD_ADDR_VAR 0 5
43349: PUSH
43350: LD_VAR 0 2
43354: PPUSH
43355: CALL_OW 250
43359: ST_TO_ADDR
// y := GetY ( building ) ;
43360: LD_ADDR_VAR 0 6
43364: PUSH
43365: LD_VAR 0 2
43369: PPUSH
43370: CALL_OW 251
43374: ST_TO_ADDR
// for i = 0 to 5 do
43375: LD_ADDR_VAR 0 4
43379: PUSH
43380: DOUBLE
43381: LD_INT 0
43383: DEC
43384: ST_TO_ADDR
43385: LD_INT 5
43387: PUSH
43388: FOR_TO
43389: IFFALSE 43498
// begin _x := ShiftX ( x , i , 3 ) ;
43391: LD_ADDR_VAR 0 7
43395: PUSH
43396: LD_VAR 0 5
43400: PPUSH
43401: LD_VAR 0 4
43405: PPUSH
43406: LD_INT 3
43408: PPUSH
43409: CALL_OW 272
43413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43414: LD_ADDR_VAR 0 8
43418: PUSH
43419: LD_VAR 0 6
43423: PPUSH
43424: LD_VAR 0 4
43428: PPUSH
43429: LD_INT 3
43431: PPUSH
43432: CALL_OW 273
43436: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
43437: LD_VAR 0 7
43441: PPUSH
43442: LD_VAR 0 8
43446: PPUSH
43447: CALL_OW 428
43451: PUSH
43452: LD_INT 0
43454: EQUAL
43455: PUSH
43456: LD_VAR 0 7
43460: PPUSH
43461: LD_VAR 0 8
43465: PPUSH
43466: CALL_OW 488
43470: AND
43471: IFFALSE 43496
// begin ComMoveXY ( unit , _x , _y ) ;
43473: LD_VAR 0 1
43477: PPUSH
43478: LD_VAR 0 7
43482: PPUSH
43483: LD_VAR 0 8
43487: PPUSH
43488: CALL_OW 111
// exit ;
43492: POP
43493: POP
43494: GO 43500
// end ; end ;
43496: GO 43388
43498: POP
43499: POP
// end ;
43500: LD_VAR 0 3
43504: RET
// export function ScanBase ( side , base_area ) ; begin
43505: LD_INT 0
43507: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43508: LD_ADDR_VAR 0 3
43512: PUSH
43513: LD_VAR 0 2
43517: PPUSH
43518: LD_INT 81
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PPUSH
43530: CALL_OW 70
43534: ST_TO_ADDR
// end ;
43535: LD_VAR 0 3
43539: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
43540: LD_INT 0
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
43547: LD_VAR 0 1
43551: NOT
43552: PUSH
43553: LD_EXP 49
43557: PUSH
43558: LD_VAR 0 1
43562: ARRAY
43563: NOT
43564: OR
43565: PUSH
43566: LD_VAR 0 2
43570: NOT
43571: OR
43572: PUSH
43573: LD_VAR 0 3
43577: NOT
43578: OR
43579: IFFALSE 43583
// exit ;
43581: GO 44021
// side := mc_sides [ base ] ;
43583: LD_ADDR_VAR 0 6
43587: PUSH
43588: LD_EXP 75
43592: PUSH
43593: LD_VAR 0 1
43597: ARRAY
43598: ST_TO_ADDR
// if not side then
43599: LD_VAR 0 6
43603: NOT
43604: IFFALSE 43608
// exit ;
43606: GO 44021
// for i in solds do
43608: LD_ADDR_VAR 0 7
43612: PUSH
43613: LD_VAR 0 2
43617: PUSH
43618: FOR_IN
43619: IFFALSE 43680
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
43621: LD_VAR 0 7
43625: PPUSH
43626: CALL_OW 310
43630: PPUSH
43631: CALL_OW 266
43635: PUSH
43636: LD_INT 32
43638: PUSH
43639: LD_INT 31
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: IN
43646: IFFALSE 43666
// solds := solds diff i else
43648: LD_ADDR_VAR 0 2
43652: PUSH
43653: LD_VAR 0 2
43657: PUSH
43658: LD_VAR 0 7
43662: DIFF
43663: ST_TO_ADDR
43664: GO 43678
// SetTag ( i , 18 ) ;
43666: LD_VAR 0 7
43670: PPUSH
43671: LD_INT 18
43673: PPUSH
43674: CALL_OW 109
43678: GO 43618
43680: POP
43681: POP
// if not solds then
43682: LD_VAR 0 2
43686: NOT
43687: IFFALSE 43691
// exit ;
43689: GO 44021
// repeat wait ( 0 0$1 ) ;
43691: LD_INT 35
43693: PPUSH
43694: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
43698: LD_ADDR_VAR 0 5
43702: PUSH
43703: LD_VAR 0 6
43707: PPUSH
43708: LD_VAR 0 3
43712: PPUSH
43713: CALL 43505 0 2
43717: ST_TO_ADDR
// if not enemy or enemy > 5 then
43718: LD_VAR 0 5
43722: NOT
43723: PUSH
43724: LD_VAR 0 5
43728: PUSH
43729: LD_INT 5
43731: GREATER
43732: OR
43733: IFFALSE 43774
// begin for i in solds do
43735: LD_ADDR_VAR 0 7
43739: PUSH
43740: LD_VAR 0 2
43744: PUSH
43745: FOR_IN
43746: IFFALSE 43770
// if HasTask ( i ) then
43748: LD_VAR 0 7
43752: PPUSH
43753: CALL_OW 314
43757: IFFALSE 43768
// ComStop ( i ) ;
43759: LD_VAR 0 7
43763: PPUSH
43764: CALL_OW 141
43768: GO 43745
43770: POP
43771: POP
// break ;
43772: GO 44009
// end ; for i in solds do
43774: LD_ADDR_VAR 0 7
43778: PUSH
43779: LD_VAR 0 2
43783: PUSH
43784: FOR_IN
43785: IFFALSE 44001
// begin if IsInUnit ( i ) then
43787: LD_VAR 0 7
43791: PPUSH
43792: CALL_OW 310
43796: IFFALSE 43807
// ComExitBuilding ( i ) ;
43798: LD_VAR 0 7
43802: PPUSH
43803: CALL_OW 122
// if GetLives ( i ) > 333 then
43807: LD_VAR 0 7
43811: PPUSH
43812: CALL_OW 256
43816: PUSH
43817: LD_INT 333
43819: GREATER
43820: IFFALSE 43848
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43822: LD_VAR 0 7
43826: PPUSH
43827: LD_VAR 0 5
43831: PPUSH
43832: LD_VAR 0 7
43836: PPUSH
43837: CALL_OW 74
43841: PPUSH
43842: CALL_OW 115
43846: GO 43999
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
43848: LD_ADDR_VAR 0 8
43852: PUSH
43853: LD_EXP 49
43857: PUSH
43858: LD_VAR 0 1
43862: ARRAY
43863: PPUSH
43864: LD_INT 2
43866: PUSH
43867: LD_INT 30
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 30
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 30
43889: PUSH
43890: LD_INT 6
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: PPUSH
43903: CALL_OW 72
43907: PPUSH
43908: LD_VAR 0 7
43912: PPUSH
43913: CALL_OW 74
43917: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
43918: LD_VAR 0 7
43922: PPUSH
43923: LD_VAR 0 8
43927: PPUSH
43928: CALL_OW 250
43932: PPUSH
43933: LD_INT 3
43935: PPUSH
43936: LD_INT 5
43938: PPUSH
43939: CALL_OW 272
43943: PPUSH
43944: LD_VAR 0 8
43948: PPUSH
43949: CALL_OW 251
43953: PPUSH
43954: LD_INT 3
43956: PPUSH
43957: LD_INT 5
43959: PPUSH
43960: CALL_OW 273
43964: PPUSH
43965: CALL_OW 111
// SetTag ( i , 0 ) ;
43969: LD_VAR 0 7
43973: PPUSH
43974: LD_INT 0
43976: PPUSH
43977: CALL_OW 109
// solds := solds diff i ;
43981: LD_ADDR_VAR 0 2
43985: PUSH
43986: LD_VAR 0 2
43990: PUSH
43991: LD_VAR 0 7
43995: DIFF
43996: ST_TO_ADDR
// continue ;
43997: GO 43784
// end ; end ;
43999: GO 43784
44001: POP
44002: POP
// until solds ;
44003: LD_VAR 0 2
44007: IFFALSE 43691
// MC_Reset ( base , 18 ) ;
44009: LD_VAR 0 1
44013: PPUSH
44014: LD_INT 18
44016: PPUSH
44017: CALL 19227 0 2
// end ;
44021: LD_VAR 0 4
44025: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
44026: LD_INT 0
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
44044: LD_ADDR_VAR 0 12
44048: PUSH
44049: LD_EXP 49
44053: PUSH
44054: LD_VAR 0 1
44058: ARRAY
44059: PPUSH
44060: LD_INT 25
44062: PUSH
44063: LD_INT 3
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PPUSH
44070: CALL_OW 72
44074: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
44075: LD_ADDR_VAR 0 8
44079: PUSH
44080: LD_EXP 49
44084: PUSH
44085: LD_VAR 0 1
44089: ARRAY
44090: PPUSH
44091: LD_INT 2
44093: PUSH
44094: LD_INT 25
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 25
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 25
44116: PUSH
44117: LD_INT 8
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 25
44126: PUSH
44127: LD_INT 9
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: PPUSH
44141: CALL_OW 72
44145: ST_TO_ADDR
// if not defenders and not solds then
44146: LD_VAR 0 2
44150: NOT
44151: PUSH
44152: LD_VAR 0 8
44156: NOT
44157: AND
44158: IFFALSE 44162
// exit ;
44160: GO 45528
// depot_under_attack := false ;
44162: LD_ADDR_VAR 0 16
44166: PUSH
44167: LD_INT 0
44169: ST_TO_ADDR
// sold_defenders := [ ] ;
44170: LD_ADDR_VAR 0 17
44174: PUSH
44175: EMPTY
44176: ST_TO_ADDR
// if mechs then
44177: LD_VAR 0 12
44181: IFFALSE 44310
// for i in defenders do
44183: LD_ADDR_VAR 0 5
44187: PUSH
44188: LD_VAR 0 2
44192: PUSH
44193: FOR_IN
44194: IFFALSE 44308
// begin SetTag ( i , 20 ) ;
44196: LD_VAR 0 5
44200: PPUSH
44201: LD_INT 20
44203: PPUSH
44204: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
44208: LD_VAR 0 5
44212: PPUSH
44213: CALL_OW 263
44217: PUSH
44218: LD_INT 1
44220: EQUAL
44221: PUSH
44222: LD_VAR 0 5
44226: PPUSH
44227: CALL_OW 311
44231: NOT
44232: AND
44233: PUSH
44234: LD_VAR 0 12
44238: AND
44239: IFFALSE 44306
// begin un := mechs [ 1 ] ;
44241: LD_ADDR_VAR 0 10
44245: PUSH
44246: LD_VAR 0 12
44250: PUSH
44251: LD_INT 1
44253: ARRAY
44254: ST_TO_ADDR
// ComExitBuilding ( un ) ;
44255: LD_VAR 0 10
44259: PPUSH
44260: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
44264: LD_VAR 0 10
44268: PPUSH
44269: LD_VAR 0 5
44273: PPUSH
44274: CALL_OW 180
// SetTag ( un , 19 ) ;
44278: LD_VAR 0 10
44282: PPUSH
44283: LD_INT 19
44285: PPUSH
44286: CALL_OW 109
// mechs := mechs diff un ;
44290: LD_ADDR_VAR 0 12
44294: PUSH
44295: LD_VAR 0 12
44299: PUSH
44300: LD_VAR 0 10
44304: DIFF
44305: ST_TO_ADDR
// end ; end ;
44306: GO 44193
44308: POP
44309: POP
// if solds then
44310: LD_VAR 0 8
44314: IFFALSE 44373
// for i in solds do
44316: LD_ADDR_VAR 0 5
44320: PUSH
44321: LD_VAR 0 8
44325: PUSH
44326: FOR_IN
44327: IFFALSE 44371
// if not GetTag ( i ) then
44329: LD_VAR 0 5
44333: PPUSH
44334: CALL_OW 110
44338: NOT
44339: IFFALSE 44369
// begin defenders := defenders union i ;
44341: LD_ADDR_VAR 0 2
44345: PUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_VAR 0 5
44355: UNION
44356: ST_TO_ADDR
// SetTag ( i , 18 ) ;
44357: LD_VAR 0 5
44361: PPUSH
44362: LD_INT 18
44364: PPUSH
44365: CALL_OW 109
// end ;
44369: GO 44326
44371: POP
44372: POP
// repeat wait ( 0 0$1 ) ;
44373: LD_INT 35
44375: PPUSH
44376: CALL_OW 67
// enemy := mc_scan [ base ] ;
44380: LD_ADDR_VAR 0 3
44384: PUSH
44385: LD_EXP 72
44389: PUSH
44390: LD_VAR 0 1
44394: ARRAY
44395: ST_TO_ADDR
// for i in defenders do
44396: LD_ADDR_VAR 0 5
44400: PUSH
44401: LD_VAR 0 2
44405: PUSH
44406: FOR_IN
44407: IFFALSE 45092
// begin e := NearestUnitToUnit ( enemy , i ) ;
44409: LD_ADDR_VAR 0 13
44413: PUSH
44414: LD_VAR 0 3
44418: PPUSH
44419: LD_VAR 0 5
44423: PPUSH
44424: CALL_OW 74
44428: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
44429: LD_ADDR_VAR 0 16
44433: PUSH
44434: LD_EXP 49
44438: PUSH
44439: LD_VAR 0 1
44443: ARRAY
44444: PPUSH
44445: LD_INT 2
44447: PUSH
44448: LD_INT 30
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 30
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: PPUSH
44473: CALL_OW 72
44477: NOT
44478: PUSH
44479: LD_EXP 49
44483: PUSH
44484: LD_VAR 0 1
44488: ARRAY
44489: PPUSH
44490: LD_INT 2
44492: PUSH
44493: LD_INT 30
44495: PUSH
44496: LD_INT 0
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 30
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: PPUSH
44518: CALL_OW 72
44522: PPUSH
44523: CALL_OW 256
44527: PUSH
44528: LD_INT 600
44530: LESS
44531: OR
44532: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
44533: LD_VAR 0 5
44537: PPUSH
44538: CALL_OW 247
44542: PUSH
44543: LD_INT 2
44545: DOUBLE
44546: EQUAL
44547: IFTRUE 44551
44549: GO 44798
44551: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
44552: LD_VAR 0 5
44556: PPUSH
44557: CALL_OW 256
44561: PUSH
44562: LD_INT 650
44564: GREATER
44565: PUSH
44566: LD_VAR 0 5
44570: PPUSH
44571: LD_VAR 0 13
44575: PPUSH
44576: CALL_OW 296
44580: PUSH
44581: LD_INT 40
44583: LESS
44584: AND
44585: IFFALSE 44603
// ComAttackUnit ( i , e ) else
44587: LD_VAR 0 5
44591: PPUSH
44592: LD_VAR 0 13
44596: PPUSH
44597: CALL_OW 115
44601: GO 44681
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
44603: LD_VAR 0 5
44607: PPUSH
44608: LD_VAR 0 13
44612: PPUSH
44613: CALL_OW 296
44617: PUSH
44618: LD_INT 30
44620: GREATEREQUAL
44621: PUSH
44622: LD_VAR 0 5
44626: PPUSH
44627: CALL_OW 256
44631: PUSH
44632: LD_INT 650
44634: LESSEQUAL
44635: OR
44636: PUSH
44637: LD_VAR 0 5
44641: PPUSH
44642: LD_EXP 73
44646: PUSH
44647: LD_VAR 0 1
44651: ARRAY
44652: PPUSH
44653: CALL_OW 308
44657: NOT
44658: AND
44659: IFFALSE 44681
// ComMoveToArea ( i , mc_parking [ base ] ) ;
44661: LD_VAR 0 5
44665: PPUSH
44666: LD_EXP 73
44670: PUSH
44671: LD_VAR 0 1
44675: ARRAY
44676: PPUSH
44677: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
44681: LD_VAR 0 5
44685: PPUSH
44686: CALL_OW 256
44690: PUSH
44691: LD_INT 998
44693: LESS
44694: PUSH
44695: LD_VAR 0 5
44699: PPUSH
44700: CALL_OW 263
44704: PUSH
44705: LD_INT 1
44707: EQUAL
44708: AND
44709: PUSH
44710: LD_VAR 0 5
44714: PPUSH
44715: CALL_OW 311
44719: AND
44720: PUSH
44721: LD_VAR 0 5
44725: PPUSH
44726: LD_EXP 73
44730: PUSH
44731: LD_VAR 0 1
44735: ARRAY
44736: PPUSH
44737: CALL_OW 308
44741: AND
44742: IFFALSE 44796
// begin mech := IsDrivenBy ( i ) ;
44744: LD_ADDR_VAR 0 9
44748: PUSH
44749: LD_VAR 0 5
44753: PPUSH
44754: CALL_OW 311
44758: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
44759: LD_VAR 0 9
44763: PPUSH
44764: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
44768: LD_VAR 0 9
44772: PPUSH
44773: LD_VAR 0 5
44777: PPUSH
44778: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
44782: LD_VAR 0 9
44786: PPUSH
44787: LD_VAR 0 5
44791: PPUSH
44792: CALL_OW 180
// end ; end ; unit_human :
44796: GO 45063
44798: LD_INT 1
44800: DOUBLE
44801: EQUAL
44802: IFTRUE 44806
44804: GO 45062
44806: POP
// begin b := IsInUnit ( i ) ;
44807: LD_ADDR_VAR 0 18
44811: PUSH
44812: LD_VAR 0 5
44816: PPUSH
44817: CALL_OW 310
44821: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
44822: LD_ADDR_VAR 0 19
44826: PUSH
44827: LD_VAR 0 18
44831: NOT
44832: PUSH
44833: LD_VAR 0 18
44837: PPUSH
44838: CALL_OW 266
44842: PUSH
44843: LD_INT 32
44845: PUSH
44846: LD_INT 31
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: IN
44853: OR
44854: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
44855: LD_VAR 0 16
44859: PUSH
44860: LD_VAR 0 2
44864: PPUSH
44865: LD_INT 21
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PPUSH
44875: CALL_OW 72
44879: PUSH
44880: LD_INT 1
44882: LESSEQUAL
44883: OR
44884: PUSH
44885: LD_VAR 0 19
44889: AND
44890: PUSH
44891: LD_VAR 0 5
44895: PUSH
44896: LD_VAR 0 17
44900: IN
44901: NOT
44902: AND
44903: IFFALSE 44996
// begin if b then
44905: LD_VAR 0 18
44909: IFFALSE 44958
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
44911: LD_VAR 0 18
44915: PPUSH
44916: LD_VAR 0 3
44920: PPUSH
44921: LD_VAR 0 18
44925: PPUSH
44926: CALL_OW 74
44930: PPUSH
44931: CALL_OW 296
44935: PUSH
44936: LD_INT 10
44938: LESS
44939: PUSH
44940: LD_VAR 0 18
44944: PPUSH
44945: CALL_OW 461
44949: PUSH
44950: LD_INT 7
44952: NONEQUAL
44953: AND
44954: IFFALSE 44958
// continue ;
44956: GO 44406
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
44958: LD_ADDR_VAR 0 17
44962: PUSH
44963: LD_VAR 0 17
44967: PPUSH
44968: LD_VAR 0 17
44972: PUSH
44973: LD_INT 1
44975: PLUS
44976: PPUSH
44977: LD_VAR 0 5
44981: PPUSH
44982: CALL_OW 1
44986: ST_TO_ADDR
// ComExitBuilding ( i ) ;
44987: LD_VAR 0 5
44991: PPUSH
44992: CALL_OW 122
// end ; if sold_defenders then
44996: LD_VAR 0 17
45000: IFFALSE 45060
// if i in sold_defenders then
45002: LD_VAR 0 5
45006: PUSH
45007: LD_VAR 0 17
45011: IN
45012: IFFALSE 45060
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
45014: LD_VAR 0 5
45018: PPUSH
45019: CALL_OW 314
45023: NOT
45024: PUSH
45025: LD_VAR 0 5
45029: PPUSH
45030: LD_VAR 0 13
45034: PPUSH
45035: CALL_OW 296
45039: PUSH
45040: LD_INT 30
45042: LESS
45043: AND
45044: IFFALSE 45060
// ComAttackUnit ( i , e ) ;
45046: LD_VAR 0 5
45050: PPUSH
45051: LD_VAR 0 13
45055: PPUSH
45056: CALL_OW 115
// end ; end ; end ;
45060: GO 45063
45062: POP
// if IsDead ( i ) then
45063: LD_VAR 0 5
45067: PPUSH
45068: CALL_OW 301
45072: IFFALSE 45090
// defenders := defenders diff i ;
45074: LD_ADDR_VAR 0 2
45078: PUSH
45079: LD_VAR 0 2
45083: PUSH
45084: LD_VAR 0 5
45088: DIFF
45089: ST_TO_ADDR
// end ;
45090: GO 44406
45092: POP
45093: POP
// until not enemy or not defenders ;
45094: LD_VAR 0 3
45098: NOT
45099: PUSH
45100: LD_VAR 0 2
45104: NOT
45105: OR
45106: IFFALSE 44373
// MC_Reset ( base , 18 ) ;
45108: LD_VAR 0 1
45112: PPUSH
45113: LD_INT 18
45115: PPUSH
45116: CALL 19227 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
45120: LD_ADDR_VAR 0 2
45124: PUSH
45125: LD_VAR 0 2
45129: PUSH
45130: LD_VAR 0 2
45134: PPUSH
45135: LD_INT 2
45137: PUSH
45138: LD_INT 25
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 25
45150: PUSH
45151: LD_INT 5
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 25
45160: PUSH
45161: LD_INT 8
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 25
45170: PUSH
45171: LD_INT 9
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: PPUSH
45185: CALL_OW 72
45189: DIFF
45190: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
45191: LD_VAR 0 3
45195: NOT
45196: PUSH
45197: LD_VAR 0 2
45201: PPUSH
45202: LD_INT 21
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PPUSH
45212: CALL_OW 72
45216: AND
45217: IFFALSE 45479
// begin tmp := FilterByTag ( defenders , 19 ) ;
45219: LD_ADDR_VAR 0 11
45223: PUSH
45224: LD_VAR 0 2
45228: PPUSH
45229: LD_INT 19
45231: PPUSH
45232: CALL 80056 0 2
45236: ST_TO_ADDR
// if tmp then
45237: LD_VAR 0 11
45241: IFFALSE 45311
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
45243: LD_ADDR_VAR 0 11
45247: PUSH
45248: LD_VAR 0 11
45252: PPUSH
45253: LD_INT 25
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PPUSH
45263: CALL_OW 72
45267: ST_TO_ADDR
// if tmp then
45268: LD_VAR 0 11
45272: IFFALSE 45311
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
45274: LD_ADDR_EXP 61
45278: PUSH
45279: LD_EXP 61
45283: PPUSH
45284: LD_VAR 0 1
45288: PPUSH
45289: LD_EXP 61
45293: PUSH
45294: LD_VAR 0 1
45298: ARRAY
45299: PUSH
45300: LD_VAR 0 11
45304: UNION
45305: PPUSH
45306: CALL_OW 1
45310: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_INT 19
45318: PPUSH
45319: CALL 19227 0 2
// repeat wait ( 0 0$1 ) ;
45323: LD_INT 35
45325: PPUSH
45326: CALL_OW 67
// for i in defenders do
45330: LD_ADDR_VAR 0 5
45334: PUSH
45335: LD_VAR 0 2
45339: PUSH
45340: FOR_IN
45341: IFFALSE 45430
// begin if not IsInArea ( i , mc_parking [ base ] ) then
45343: LD_VAR 0 5
45347: PPUSH
45348: LD_EXP 73
45352: PUSH
45353: LD_VAR 0 1
45357: ARRAY
45358: PPUSH
45359: CALL_OW 308
45363: NOT
45364: IFFALSE 45388
// ComMoveToArea ( i , mc_parking [ base ] ) else
45366: LD_VAR 0 5
45370: PPUSH
45371: LD_EXP 73
45375: PUSH
45376: LD_VAR 0 1
45380: ARRAY
45381: PPUSH
45382: CALL_OW 113
45386: GO 45428
// if GetControl ( i ) = control_manual then
45388: LD_VAR 0 5
45392: PPUSH
45393: CALL_OW 263
45397: PUSH
45398: LD_INT 1
45400: EQUAL
45401: IFFALSE 45428
// if IsDrivenBy ( i ) then
45403: LD_VAR 0 5
45407: PPUSH
45408: CALL_OW 311
45412: IFFALSE 45428
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
45414: LD_VAR 0 5
45418: PPUSH
45419: CALL_OW 311
45423: PPUSH
45424: CALL_OW 121
// end ;
45428: GO 45340
45430: POP
45431: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
45432: LD_VAR 0 2
45436: PPUSH
45437: LD_INT 95
45439: PUSH
45440: LD_EXP 73
45444: PUSH
45445: LD_VAR 0 1
45449: ARRAY
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PPUSH
45455: CALL_OW 72
45459: PUSH
45460: LD_VAR 0 2
45464: EQUAL
45465: PUSH
45466: LD_EXP 72
45470: PUSH
45471: LD_VAR 0 1
45475: ARRAY
45476: OR
45477: IFFALSE 45323
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
45479: LD_ADDR_EXP 71
45483: PUSH
45484: LD_EXP 71
45488: PPUSH
45489: LD_VAR 0 1
45493: PPUSH
45494: LD_EXP 71
45498: PUSH
45499: LD_VAR 0 1
45503: ARRAY
45504: PUSH
45505: LD_VAR 0 2
45509: UNION
45510: PPUSH
45511: CALL_OW 1
45515: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
45516: LD_VAR 0 1
45520: PPUSH
45521: LD_INT 20
45523: PPUSH
45524: CALL 19227 0 2
// end ;
45528: LD_VAR 0 4
45532: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45533: LD_INT 0
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
// result := false ;
45539: LD_ADDR_VAR 0 2
45543: PUSH
45544: LD_INT 0
45546: ST_TO_ADDR
// side := GetSide ( unit ) ;
45547: LD_ADDR_VAR 0 3
45551: PUSH
45552: LD_VAR 0 1
45556: PPUSH
45557: CALL_OW 255
45561: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45562: LD_ADDR_VAR 0 4
45566: PUSH
45567: LD_VAR 0 1
45571: PPUSH
45572: CALL_OW 248
45576: ST_TO_ADDR
// case nat of 1 :
45577: LD_VAR 0 4
45581: PUSH
45582: LD_INT 1
45584: DOUBLE
45585: EQUAL
45586: IFTRUE 45590
45588: GO 45601
45590: POP
// tech := tech_lassight ; 2 :
45591: LD_ADDR_VAR 0 5
45595: PUSH
45596: LD_INT 12
45598: ST_TO_ADDR
45599: GO 45640
45601: LD_INT 2
45603: DOUBLE
45604: EQUAL
45605: IFTRUE 45609
45607: GO 45620
45609: POP
// tech := tech_mortar ; 3 :
45610: LD_ADDR_VAR 0 5
45614: PUSH
45615: LD_INT 41
45617: ST_TO_ADDR
45618: GO 45640
45620: LD_INT 3
45622: DOUBLE
45623: EQUAL
45624: IFTRUE 45628
45626: GO 45639
45628: POP
// tech := tech_bazooka ; end ;
45629: LD_ADDR_VAR 0 5
45633: PUSH
45634: LD_INT 44
45636: ST_TO_ADDR
45637: GO 45640
45639: POP
// if Researched ( side , tech ) then
45640: LD_VAR 0 3
45644: PPUSH
45645: LD_VAR 0 5
45649: PPUSH
45650: CALL_OW 325
45654: IFFALSE 45681
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45656: LD_ADDR_VAR 0 2
45660: PUSH
45661: LD_INT 5
45663: PUSH
45664: LD_INT 8
45666: PUSH
45667: LD_INT 9
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: PUSH
45675: LD_VAR 0 4
45679: ARRAY
45680: ST_TO_ADDR
// end ;
45681: LD_VAR 0 2
45685: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45686: LD_INT 0
45688: PPUSH
45689: PPUSH
45690: PPUSH
// if not mines then
45691: LD_VAR 0 2
45695: NOT
45696: IFFALSE 45700
// exit ;
45698: GO 45844
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45700: LD_ADDR_VAR 0 5
45704: PUSH
45705: LD_INT 81
45707: PUSH
45708: LD_VAR 0 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 21
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PPUSH
45738: CALL_OW 69
45742: ST_TO_ADDR
// for i in mines do
45743: LD_ADDR_VAR 0 4
45747: PUSH
45748: LD_VAR 0 2
45752: PUSH
45753: FOR_IN
45754: IFFALSE 45842
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45756: LD_VAR 0 4
45760: PUSH
45761: LD_INT 1
45763: ARRAY
45764: PPUSH
45765: LD_VAR 0 4
45769: PUSH
45770: LD_INT 2
45772: ARRAY
45773: PPUSH
45774: CALL_OW 458
45778: NOT
45779: IFFALSE 45783
// continue ;
45781: GO 45753
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45783: LD_VAR 0 4
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PPUSH
45792: LD_VAR 0 4
45796: PUSH
45797: LD_INT 2
45799: ARRAY
45800: PPUSH
45801: CALL_OW 428
45805: PUSH
45806: LD_VAR 0 5
45810: IN
45811: IFFALSE 45840
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45813: LD_VAR 0 4
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: PPUSH
45822: LD_VAR 0 4
45826: PUSH
45827: LD_INT 2
45829: ARRAY
45830: PPUSH
45831: LD_VAR 0 1
45835: PPUSH
45836: CALL_OW 456
// end ;
45840: GO 45753
45842: POP
45843: POP
// end ;
45844: LD_VAR 0 3
45848: RET
// export function Count ( array ) ; var i ; begin
45849: LD_INT 0
45851: PPUSH
45852: PPUSH
// result := 0 ;
45853: LD_ADDR_VAR 0 2
45857: PUSH
45858: LD_INT 0
45860: ST_TO_ADDR
// for i in array do
45861: LD_ADDR_VAR 0 3
45865: PUSH
45866: LD_VAR 0 1
45870: PUSH
45871: FOR_IN
45872: IFFALSE 45896
// if i then
45874: LD_VAR 0 3
45878: IFFALSE 45894
// result := result + 1 ;
45880: LD_ADDR_VAR 0 2
45884: PUSH
45885: LD_VAR 0 2
45889: PUSH
45890: LD_INT 1
45892: PLUS
45893: ST_TO_ADDR
45894: GO 45871
45896: POP
45897: POP
// end ;
45898: LD_VAR 0 2
45902: RET
// export function IsEmpty ( building ) ; begin
45903: LD_INT 0
45905: PPUSH
// if not building then
45906: LD_VAR 0 1
45910: NOT
45911: IFFALSE 45915
// exit ;
45913: GO 45958
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45915: LD_ADDR_VAR 0 2
45919: PUSH
45920: LD_VAR 0 1
45924: PUSH
45925: LD_INT 22
45927: PUSH
45928: LD_VAR 0 1
45932: PPUSH
45933: CALL_OW 255
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 58
45944: PUSH
45945: EMPTY
45946: LIST
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PPUSH
45952: CALL_OW 69
45956: IN
45957: ST_TO_ADDR
// end ;
45958: LD_VAR 0 2
45962: RET
// export function IsNotFull ( building ) ; begin
45963: LD_INT 0
45965: PPUSH
// if not building then
45966: LD_VAR 0 1
45970: NOT
45971: IFFALSE 45975
// exit ;
45973: GO 45994
// result := UnitsInside ( building ) < 6 ;
45975: LD_ADDR_VAR 0 2
45979: PUSH
45980: LD_VAR 0 1
45984: PPUSH
45985: CALL_OW 313
45989: PUSH
45990: LD_INT 6
45992: LESS
45993: ST_TO_ADDR
// end ;
45994: LD_VAR 0 2
45998: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45999: LD_INT 0
46001: PPUSH
46002: PPUSH
46003: PPUSH
46004: PPUSH
// tmp := [ ] ;
46005: LD_ADDR_VAR 0 3
46009: PUSH
46010: EMPTY
46011: ST_TO_ADDR
// list := [ ] ;
46012: LD_ADDR_VAR 0 5
46016: PUSH
46017: EMPTY
46018: ST_TO_ADDR
// for i = 16 to 25 do
46019: LD_ADDR_VAR 0 4
46023: PUSH
46024: DOUBLE
46025: LD_INT 16
46027: DEC
46028: ST_TO_ADDR
46029: LD_INT 25
46031: PUSH
46032: FOR_TO
46033: IFFALSE 46106
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46035: LD_ADDR_VAR 0 3
46039: PUSH
46040: LD_VAR 0 3
46044: PUSH
46045: LD_INT 22
46047: PUSH
46048: LD_VAR 0 1
46052: PPUSH
46053: CALL_OW 255
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 91
46064: PUSH
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 6
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 30
46080: PUSH
46081: LD_VAR 0 4
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: LIST
46094: PUSH
46095: EMPTY
46096: LIST
46097: PPUSH
46098: CALL_OW 69
46102: ADD
46103: ST_TO_ADDR
46104: GO 46032
46106: POP
46107: POP
// for i = 1 to tmp do
46108: LD_ADDR_VAR 0 4
46112: PUSH
46113: DOUBLE
46114: LD_INT 1
46116: DEC
46117: ST_TO_ADDR
46118: LD_VAR 0 3
46122: PUSH
46123: FOR_TO
46124: IFFALSE 46212
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46126: LD_ADDR_VAR 0 5
46130: PUSH
46131: LD_VAR 0 5
46135: PUSH
46136: LD_VAR 0 3
46140: PUSH
46141: LD_VAR 0 4
46145: ARRAY
46146: PPUSH
46147: CALL_OW 266
46151: PUSH
46152: LD_VAR 0 3
46156: PUSH
46157: LD_VAR 0 4
46161: ARRAY
46162: PPUSH
46163: CALL_OW 250
46167: PUSH
46168: LD_VAR 0 3
46172: PUSH
46173: LD_VAR 0 4
46177: ARRAY
46178: PPUSH
46179: CALL_OW 251
46183: PUSH
46184: LD_VAR 0 3
46188: PUSH
46189: LD_VAR 0 4
46193: ARRAY
46194: PPUSH
46195: CALL_OW 254
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: PUSH
46206: EMPTY
46207: LIST
46208: ADD
46209: ST_TO_ADDR
46210: GO 46123
46212: POP
46213: POP
// result := list ;
46214: LD_ADDR_VAR 0 2
46218: PUSH
46219: LD_VAR 0 5
46223: ST_TO_ADDR
// end ;
46224: LD_VAR 0 2
46228: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46229: LD_INT 0
46231: PPUSH
46232: PPUSH
46233: PPUSH
46234: PPUSH
46235: PPUSH
46236: PPUSH
46237: PPUSH
// if not factory then
46238: LD_VAR 0 1
46242: NOT
46243: IFFALSE 46247
// exit ;
46245: GO 46772
// if control = control_apeman then
46247: LD_VAR 0 4
46251: PUSH
46252: LD_INT 5
46254: EQUAL
46255: IFFALSE 46364
// begin tmp := UnitsInside ( factory ) ;
46257: LD_ADDR_VAR 0 8
46261: PUSH
46262: LD_VAR 0 1
46266: PPUSH
46267: CALL_OW 313
46271: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46272: LD_VAR 0 8
46276: PPUSH
46277: LD_INT 25
46279: PUSH
46280: LD_INT 12
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PPUSH
46287: CALL_OW 72
46291: NOT
46292: IFFALSE 46302
// control := control_manual ;
46294: LD_ADDR_VAR 0 4
46298: PUSH
46299: LD_INT 1
46301: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46302: LD_ADDR_VAR 0 8
46306: PUSH
46307: LD_VAR 0 1
46311: PPUSH
46312: CALL 45999 0 1
46316: ST_TO_ADDR
// if tmp then
46317: LD_VAR 0 8
46321: IFFALSE 46364
// begin for i in tmp do
46323: LD_ADDR_VAR 0 7
46327: PUSH
46328: LD_VAR 0 8
46332: PUSH
46333: FOR_IN
46334: IFFALSE 46362
// if i [ 1 ] = b_ext_radar then
46336: LD_VAR 0 7
46340: PUSH
46341: LD_INT 1
46343: ARRAY
46344: PUSH
46345: LD_INT 20
46347: EQUAL
46348: IFFALSE 46360
// begin control := control_remote ;
46350: LD_ADDR_VAR 0 4
46354: PUSH
46355: LD_INT 2
46357: ST_TO_ADDR
// break ;
46358: GO 46362
// end ;
46360: GO 46333
46362: POP
46363: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46364: LD_VAR 0 1
46368: PPUSH
46369: LD_VAR 0 2
46373: PPUSH
46374: LD_VAR 0 3
46378: PPUSH
46379: LD_VAR 0 4
46383: PPUSH
46384: LD_VAR 0 5
46388: PPUSH
46389: CALL_OW 448
46393: IFFALSE 46428
// begin result := [ chassis , engine , control , weapon ] ;
46395: LD_ADDR_VAR 0 6
46399: PUSH
46400: LD_VAR 0 2
46404: PUSH
46405: LD_VAR 0 3
46409: PUSH
46410: LD_VAR 0 4
46414: PUSH
46415: LD_VAR 0 5
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// exit ;
46426: GO 46772
// end ; _chassis := AvailableChassisList ( factory ) ;
46428: LD_ADDR_VAR 0 9
46432: PUSH
46433: LD_VAR 0 1
46437: PPUSH
46438: CALL_OW 475
46442: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46443: LD_ADDR_VAR 0 11
46447: PUSH
46448: LD_VAR 0 1
46452: PPUSH
46453: CALL_OW 476
46457: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46458: LD_ADDR_VAR 0 12
46462: PUSH
46463: LD_VAR 0 1
46467: PPUSH
46468: CALL_OW 477
46472: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46473: LD_ADDR_VAR 0 10
46477: PUSH
46478: LD_VAR 0 1
46482: PPUSH
46483: CALL_OW 478
46487: ST_TO_ADDR
// if not chassis in _chassis then
46488: LD_VAR 0 2
46492: PUSH
46493: LD_VAR 0 9
46497: IN
46498: NOT
46499: IFFALSE 46525
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46501: LD_ADDR_VAR 0 2
46505: PUSH
46506: LD_VAR 0 9
46510: PUSH
46511: LD_INT 1
46513: PPUSH
46514: LD_VAR 0 9
46518: PPUSH
46519: CALL_OW 12
46523: ARRAY
46524: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46525: LD_VAR 0 2
46529: PPUSH
46530: LD_VAR 0 3
46534: PPUSH
46535: CALL 46777 0 2
46539: NOT
46540: IFFALSE 46599
// repeat engine := _engine [ 1 ] ;
46542: LD_ADDR_VAR 0 3
46546: PUSH
46547: LD_VAR 0 11
46551: PUSH
46552: LD_INT 1
46554: ARRAY
46555: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46556: LD_ADDR_VAR 0 11
46560: PUSH
46561: LD_VAR 0 11
46565: PPUSH
46566: LD_INT 1
46568: PPUSH
46569: CALL_OW 3
46573: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46574: LD_VAR 0 2
46578: PPUSH
46579: LD_VAR 0 3
46583: PPUSH
46584: CALL 46777 0 2
46588: PUSH
46589: LD_VAR 0 11
46593: PUSH
46594: EMPTY
46595: EQUAL
46596: OR
46597: IFFALSE 46542
// if not control in _control then
46599: LD_VAR 0 4
46603: PUSH
46604: LD_VAR 0 12
46608: IN
46609: NOT
46610: IFFALSE 46636
// control := _control [ rand ( 1 , _control ) ] ;
46612: LD_ADDR_VAR 0 4
46616: PUSH
46617: LD_VAR 0 12
46621: PUSH
46622: LD_INT 1
46624: PPUSH
46625: LD_VAR 0 12
46629: PPUSH
46630: CALL_OW 12
46634: ARRAY
46635: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46636: LD_VAR 0 2
46640: PPUSH
46641: LD_VAR 0 5
46645: PPUSH
46646: CALL 46997 0 2
46650: NOT
46651: IFFALSE 46710
// repeat weapon := _weapon [ 1 ] ;
46653: LD_ADDR_VAR 0 5
46657: PUSH
46658: LD_VAR 0 10
46662: PUSH
46663: LD_INT 1
46665: ARRAY
46666: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46667: LD_ADDR_VAR 0 10
46671: PUSH
46672: LD_VAR 0 10
46676: PPUSH
46677: LD_INT 1
46679: PPUSH
46680: CALL_OW 3
46684: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46685: LD_VAR 0 2
46689: PPUSH
46690: LD_VAR 0 5
46694: PPUSH
46695: CALL 46997 0 2
46699: PUSH
46700: LD_VAR 0 10
46704: PUSH
46705: EMPTY
46706: EQUAL
46707: OR
46708: IFFALSE 46653
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46710: LD_VAR 0 1
46714: PPUSH
46715: LD_VAR 0 2
46719: PPUSH
46720: LD_VAR 0 3
46724: PPUSH
46725: LD_VAR 0 4
46729: PPUSH
46730: LD_VAR 0 5
46734: PPUSH
46735: CALL_OW 448
46739: IFFALSE 46772
// result := [ chassis , engine , control , weapon ] ;
46741: LD_ADDR_VAR 0 6
46745: PUSH
46746: LD_VAR 0 2
46750: PUSH
46751: LD_VAR 0 3
46755: PUSH
46756: LD_VAR 0 4
46760: PUSH
46761: LD_VAR 0 5
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: ST_TO_ADDR
// end ;
46772: LD_VAR 0 6
46776: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46777: LD_INT 0
46779: PPUSH
// if not chassis or not engine then
46780: LD_VAR 0 1
46784: NOT
46785: PUSH
46786: LD_VAR 0 2
46790: NOT
46791: OR
46792: IFFALSE 46796
// exit ;
46794: GO 46992
// case engine of engine_solar :
46796: LD_VAR 0 2
46800: PUSH
46801: LD_INT 2
46803: DOUBLE
46804: EQUAL
46805: IFTRUE 46809
46807: GO 46847
46809: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46810: LD_ADDR_VAR 0 3
46814: PUSH
46815: LD_INT 11
46817: PUSH
46818: LD_INT 12
46820: PUSH
46821: LD_INT 13
46823: PUSH
46824: LD_INT 14
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 3
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: ST_TO_ADDR
46845: GO 46976
46847: LD_INT 1
46849: DOUBLE
46850: EQUAL
46851: IFTRUE 46855
46853: GO 46917
46855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46856: LD_ADDR_VAR 0 3
46860: PUSH
46861: LD_INT 11
46863: PUSH
46864: LD_INT 12
46866: PUSH
46867: LD_INT 13
46869: PUSH
46870: LD_INT 14
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: LD_INT 3
46881: PUSH
46882: LD_INT 4
46884: PUSH
46885: LD_INT 5
46887: PUSH
46888: LD_INT 21
46890: PUSH
46891: LD_INT 23
46893: PUSH
46894: LD_INT 22
46896: PUSH
46897: LD_INT 24
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: ST_TO_ADDR
46915: GO 46976
46917: LD_INT 3
46919: DOUBLE
46920: EQUAL
46921: IFTRUE 46925
46923: GO 46975
46925: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46926: LD_ADDR_VAR 0 3
46930: PUSH
46931: LD_INT 13
46933: PUSH
46934: LD_INT 14
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 4
46945: PUSH
46946: LD_INT 5
46948: PUSH
46949: LD_INT 21
46951: PUSH
46952: LD_INT 22
46954: PUSH
46955: LD_INT 23
46957: PUSH
46958: LD_INT 24
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
46973: GO 46976
46975: POP
// result := ( chassis in result ) ;
46976: LD_ADDR_VAR 0 3
46980: PUSH
46981: LD_VAR 0 1
46985: PUSH
46986: LD_VAR 0 3
46990: IN
46991: ST_TO_ADDR
// end ;
46992: LD_VAR 0 3
46996: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
46997: LD_INT 0
46999: PPUSH
// if not chassis or not weapon then
47000: LD_VAR 0 1
47004: NOT
47005: PUSH
47006: LD_VAR 0 2
47010: NOT
47011: OR
47012: IFFALSE 47016
// exit ;
47014: GO 48042
// case weapon of us_machine_gun :
47016: LD_VAR 0 2
47020: PUSH
47021: LD_INT 2
47023: DOUBLE
47024: EQUAL
47025: IFTRUE 47029
47027: GO 47059
47029: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47030: LD_ADDR_VAR 0 3
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 3
47043: PUSH
47044: LD_INT 4
47046: PUSH
47047: LD_INT 5
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: ST_TO_ADDR
47057: GO 48026
47059: LD_INT 3
47061: DOUBLE
47062: EQUAL
47063: IFTRUE 47067
47065: GO 47097
47067: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47068: LD_ADDR_VAR 0 3
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 4
47084: PUSH
47085: LD_INT 5
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: ST_TO_ADDR
47095: GO 48026
47097: LD_INT 11
47099: DOUBLE
47100: EQUAL
47101: IFTRUE 47105
47103: GO 47135
47105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47106: LD_ADDR_VAR 0 3
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: ST_TO_ADDR
47133: GO 48026
47135: LD_INT 4
47137: DOUBLE
47138: EQUAL
47139: IFTRUE 47143
47141: GO 47169
47143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47144: LD_ADDR_VAR 0 3
47148: PUSH
47149: LD_INT 2
47151: PUSH
47152: LD_INT 3
47154: PUSH
47155: LD_INT 4
47157: PUSH
47158: LD_INT 5
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
47167: GO 48026
47169: LD_INT 5
47171: DOUBLE
47172: EQUAL
47173: IFTRUE 47177
47175: GO 47203
47177: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47178: LD_ADDR_VAR 0 3
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: LD_INT 4
47191: PUSH
47192: LD_INT 5
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: ST_TO_ADDR
47201: GO 48026
47203: LD_INT 9
47205: DOUBLE
47206: EQUAL
47207: IFTRUE 47211
47209: GO 47237
47211: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47212: LD_ADDR_VAR 0 3
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: LD_INT 3
47222: PUSH
47223: LD_INT 4
47225: PUSH
47226: LD_INT 5
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: ST_TO_ADDR
47235: GO 48026
47237: LD_INT 7
47239: DOUBLE
47240: EQUAL
47241: IFTRUE 47245
47243: GO 47271
47245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47246: LD_ADDR_VAR 0 3
47250: PUSH
47251: LD_INT 2
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: LD_INT 5
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: ST_TO_ADDR
47269: GO 48026
47271: LD_INT 12
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47305
47279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47280: LD_ADDR_VAR 0 3
47284: PUSH
47285: LD_INT 2
47287: PUSH
47288: LD_INT 3
47290: PUSH
47291: LD_INT 4
47293: PUSH
47294: LD_INT 5
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: ST_TO_ADDR
47303: GO 48026
47305: LD_INT 13
47307: DOUBLE
47308: EQUAL
47309: IFTRUE 47313
47311: GO 47339
47313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47314: LD_ADDR_VAR 0 3
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: LD_INT 3
47324: PUSH
47325: LD_INT 4
47327: PUSH
47328: LD_INT 5
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: ST_TO_ADDR
47337: GO 48026
47339: LD_INT 14
47341: DOUBLE
47342: EQUAL
47343: IFTRUE 47347
47345: GO 47365
47347: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47348: LD_ADDR_VAR 0 3
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: ST_TO_ADDR
47363: GO 48026
47365: LD_INT 6
47367: DOUBLE
47368: EQUAL
47369: IFTRUE 47373
47371: GO 47391
47373: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47374: LD_ADDR_VAR 0 3
47378: PUSH
47379: LD_INT 4
47381: PUSH
47382: LD_INT 5
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: ST_TO_ADDR
47389: GO 48026
47391: LD_INT 10
47393: DOUBLE
47394: EQUAL
47395: IFTRUE 47399
47397: GO 47417
47399: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47400: LD_ADDR_VAR 0 3
47404: PUSH
47405: LD_INT 4
47407: PUSH
47408: LD_INT 5
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: ST_TO_ADDR
47415: GO 48026
47417: LD_INT 22
47419: DOUBLE
47420: EQUAL
47421: IFTRUE 47425
47423: GO 47451
47425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47426: LD_ADDR_VAR 0 3
47430: PUSH
47431: LD_INT 11
47433: PUSH
47434: LD_INT 12
47436: PUSH
47437: LD_INT 13
47439: PUSH
47440: LD_INT 14
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: ST_TO_ADDR
47449: GO 48026
47451: LD_INT 23
47453: DOUBLE
47454: EQUAL
47455: IFTRUE 47459
47457: GO 47485
47459: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: LD_INT 11
47467: PUSH
47468: LD_INT 12
47470: PUSH
47471: LD_INT 13
47473: PUSH
47474: LD_INT 14
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
47483: GO 48026
47485: LD_INT 24
47487: DOUBLE
47488: EQUAL
47489: IFTRUE 47493
47491: GO 47519
47493: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47494: LD_ADDR_VAR 0 3
47498: PUSH
47499: LD_INT 11
47501: PUSH
47502: LD_INT 12
47504: PUSH
47505: LD_INT 13
47507: PUSH
47508: LD_INT 14
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: ST_TO_ADDR
47517: GO 48026
47519: LD_INT 30
47521: DOUBLE
47522: EQUAL
47523: IFTRUE 47527
47525: GO 47553
47527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47528: LD_ADDR_VAR 0 3
47532: PUSH
47533: LD_INT 11
47535: PUSH
47536: LD_INT 12
47538: PUSH
47539: LD_INT 13
47541: PUSH
47542: LD_INT 14
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: ST_TO_ADDR
47551: GO 48026
47553: LD_INT 25
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47561
47559: GO 47579
47561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47562: LD_ADDR_VAR 0 3
47566: PUSH
47567: LD_INT 13
47569: PUSH
47570: LD_INT 14
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: ST_TO_ADDR
47577: GO 48026
47579: LD_INT 27
47581: DOUBLE
47582: EQUAL
47583: IFTRUE 47587
47585: GO 47605
47587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47588: LD_ADDR_VAR 0 3
47592: PUSH
47593: LD_INT 13
47595: PUSH
47596: LD_INT 14
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: ST_TO_ADDR
47603: GO 48026
47605: LD_INT 28
47607: DOUBLE
47608: EQUAL
47609: IFTRUE 47613
47611: GO 47631
47613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47614: LD_ADDR_VAR 0 3
47618: PUSH
47619: LD_INT 13
47621: PUSH
47622: LD_INT 14
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: ST_TO_ADDR
47629: GO 48026
47631: LD_INT 29
47633: DOUBLE
47634: EQUAL
47635: IFTRUE 47639
47637: GO 47657
47639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47640: LD_ADDR_VAR 0 3
47644: PUSH
47645: LD_INT 13
47647: PUSH
47648: LD_INT 14
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: ST_TO_ADDR
47655: GO 48026
47657: LD_INT 31
47659: DOUBLE
47660: EQUAL
47661: IFTRUE 47665
47663: GO 47683
47665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47666: LD_ADDR_VAR 0 3
47670: PUSH
47671: LD_INT 13
47673: PUSH
47674: LD_INT 14
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: ST_TO_ADDR
47681: GO 48026
47683: LD_INT 26
47685: DOUBLE
47686: EQUAL
47687: IFTRUE 47691
47689: GO 47709
47691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47692: LD_ADDR_VAR 0 3
47696: PUSH
47697: LD_INT 13
47699: PUSH
47700: LD_INT 14
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: ST_TO_ADDR
47707: GO 48026
47709: LD_INT 42
47711: DOUBLE
47712: EQUAL
47713: IFTRUE 47717
47715: GO 47743
47717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47718: LD_ADDR_VAR 0 3
47722: PUSH
47723: LD_INT 21
47725: PUSH
47726: LD_INT 22
47728: PUSH
47729: LD_INT 23
47731: PUSH
47732: LD_INT 24
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
47741: GO 48026
47743: LD_INT 43
47745: DOUBLE
47746: EQUAL
47747: IFTRUE 47751
47749: GO 47777
47751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47752: LD_ADDR_VAR 0 3
47756: PUSH
47757: LD_INT 21
47759: PUSH
47760: LD_INT 22
47762: PUSH
47763: LD_INT 23
47765: PUSH
47766: LD_INT 24
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
47775: GO 48026
47777: LD_INT 44
47779: DOUBLE
47780: EQUAL
47781: IFTRUE 47785
47783: GO 47811
47785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47786: LD_ADDR_VAR 0 3
47790: PUSH
47791: LD_INT 21
47793: PUSH
47794: LD_INT 22
47796: PUSH
47797: LD_INT 23
47799: PUSH
47800: LD_INT 24
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: ST_TO_ADDR
47809: GO 48026
47811: LD_INT 45
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47819
47817: GO 47845
47819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: LD_INT 21
47827: PUSH
47828: LD_INT 22
47830: PUSH
47831: LD_INT 23
47833: PUSH
47834: LD_INT 24
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: ST_TO_ADDR
47843: GO 48026
47845: LD_INT 49
47847: DOUBLE
47848: EQUAL
47849: IFTRUE 47853
47851: GO 47879
47853: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47854: LD_ADDR_VAR 0 3
47858: PUSH
47859: LD_INT 21
47861: PUSH
47862: LD_INT 22
47864: PUSH
47865: LD_INT 23
47867: PUSH
47868: LD_INT 24
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: ST_TO_ADDR
47877: GO 48026
47879: LD_INT 51
47881: DOUBLE
47882: EQUAL
47883: IFTRUE 47887
47885: GO 47913
47887: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47888: LD_ADDR_VAR 0 3
47892: PUSH
47893: LD_INT 21
47895: PUSH
47896: LD_INT 22
47898: PUSH
47899: LD_INT 23
47901: PUSH
47902: LD_INT 24
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: ST_TO_ADDR
47911: GO 48026
47913: LD_INT 52
47915: DOUBLE
47916: EQUAL
47917: IFTRUE 47921
47919: GO 47947
47921: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47922: LD_ADDR_VAR 0 3
47926: PUSH
47927: LD_INT 21
47929: PUSH
47930: LD_INT 22
47932: PUSH
47933: LD_INT 23
47935: PUSH
47936: LD_INT 24
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: ST_TO_ADDR
47945: GO 48026
47947: LD_INT 53
47949: DOUBLE
47950: EQUAL
47951: IFTRUE 47955
47953: GO 47973
47955: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
47956: LD_ADDR_VAR 0 3
47960: PUSH
47961: LD_INT 23
47963: PUSH
47964: LD_INT 24
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: ST_TO_ADDR
47971: GO 48026
47973: LD_INT 46
47975: DOUBLE
47976: EQUAL
47977: IFTRUE 47981
47979: GO 47999
47981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
47982: LD_ADDR_VAR 0 3
47986: PUSH
47987: LD_INT 23
47989: PUSH
47990: LD_INT 24
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: ST_TO_ADDR
47997: GO 48026
47999: LD_INT 47
48001: DOUBLE
48002: EQUAL
48003: IFTRUE 48007
48005: GO 48025
48007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48008: LD_ADDR_VAR 0 3
48012: PUSH
48013: LD_INT 23
48015: PUSH
48016: LD_INT 24
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: ST_TO_ADDR
48023: GO 48026
48025: POP
// result := ( chassis in result ) ;
48026: LD_ADDR_VAR 0 3
48030: PUSH
48031: LD_VAR 0 1
48035: PUSH
48036: LD_VAR 0 3
48040: IN
48041: ST_TO_ADDR
// end ;
48042: LD_VAR 0 3
48046: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48047: LD_INT 0
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
// result := array ;
48056: LD_ADDR_VAR 0 5
48060: PUSH
48061: LD_VAR 0 1
48065: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48066: LD_VAR 0 1
48070: NOT
48071: PUSH
48072: LD_VAR 0 2
48076: NOT
48077: OR
48078: PUSH
48079: LD_VAR 0 3
48083: NOT
48084: OR
48085: PUSH
48086: LD_VAR 0 2
48090: PUSH
48091: LD_VAR 0 1
48095: GREATER
48096: OR
48097: PUSH
48098: LD_VAR 0 3
48102: PUSH
48103: LD_VAR 0 1
48107: GREATER
48108: OR
48109: IFFALSE 48113
// exit ;
48111: GO 48409
// if direction then
48113: LD_VAR 0 4
48117: IFFALSE 48181
// begin d := 1 ;
48119: LD_ADDR_VAR 0 9
48123: PUSH
48124: LD_INT 1
48126: ST_TO_ADDR
// if i_from > i_to then
48127: LD_VAR 0 2
48131: PUSH
48132: LD_VAR 0 3
48136: GREATER
48137: IFFALSE 48163
// length := ( array - i_from ) + i_to else
48139: LD_ADDR_VAR 0 11
48143: PUSH
48144: LD_VAR 0 1
48148: PUSH
48149: LD_VAR 0 2
48153: MINUS
48154: PUSH
48155: LD_VAR 0 3
48159: PLUS
48160: ST_TO_ADDR
48161: GO 48179
// length := i_to - i_from ;
48163: LD_ADDR_VAR 0 11
48167: PUSH
48168: LD_VAR 0 3
48172: PUSH
48173: LD_VAR 0 2
48177: MINUS
48178: ST_TO_ADDR
// end else
48179: GO 48242
// begin d := - 1 ;
48181: LD_ADDR_VAR 0 9
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: ST_TO_ADDR
// if i_from > i_to then
48190: LD_VAR 0 2
48194: PUSH
48195: LD_VAR 0 3
48199: GREATER
48200: IFFALSE 48220
// length := i_from - i_to else
48202: LD_ADDR_VAR 0 11
48206: PUSH
48207: LD_VAR 0 2
48211: PUSH
48212: LD_VAR 0 3
48216: MINUS
48217: ST_TO_ADDR
48218: GO 48242
// length := ( array - i_to ) + i_from ;
48220: LD_ADDR_VAR 0 11
48224: PUSH
48225: LD_VAR 0 1
48229: PUSH
48230: LD_VAR 0 3
48234: MINUS
48235: PUSH
48236: LD_VAR 0 2
48240: PLUS
48241: ST_TO_ADDR
// end ; if not length then
48242: LD_VAR 0 11
48246: NOT
48247: IFFALSE 48251
// exit ;
48249: GO 48409
// tmp := array ;
48251: LD_ADDR_VAR 0 10
48255: PUSH
48256: LD_VAR 0 1
48260: ST_TO_ADDR
// for i = 1 to length do
48261: LD_ADDR_VAR 0 6
48265: PUSH
48266: DOUBLE
48267: LD_INT 1
48269: DEC
48270: ST_TO_ADDR
48271: LD_VAR 0 11
48275: PUSH
48276: FOR_TO
48277: IFFALSE 48397
// begin for j = 1 to array do
48279: LD_ADDR_VAR 0 7
48283: PUSH
48284: DOUBLE
48285: LD_INT 1
48287: DEC
48288: ST_TO_ADDR
48289: LD_VAR 0 1
48293: PUSH
48294: FOR_TO
48295: IFFALSE 48383
// begin k := j + d ;
48297: LD_ADDR_VAR 0 8
48301: PUSH
48302: LD_VAR 0 7
48306: PUSH
48307: LD_VAR 0 9
48311: PLUS
48312: ST_TO_ADDR
// if k > array then
48313: LD_VAR 0 8
48317: PUSH
48318: LD_VAR 0 1
48322: GREATER
48323: IFFALSE 48333
// k := 1 ;
48325: LD_ADDR_VAR 0 8
48329: PUSH
48330: LD_INT 1
48332: ST_TO_ADDR
// if not k then
48333: LD_VAR 0 8
48337: NOT
48338: IFFALSE 48350
// k := array ;
48340: LD_ADDR_VAR 0 8
48344: PUSH
48345: LD_VAR 0 1
48349: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48350: LD_ADDR_VAR 0 10
48354: PUSH
48355: LD_VAR 0 10
48359: PPUSH
48360: LD_VAR 0 8
48364: PPUSH
48365: LD_VAR 0 1
48369: PUSH
48370: LD_VAR 0 7
48374: ARRAY
48375: PPUSH
48376: CALL_OW 1
48380: ST_TO_ADDR
// end ;
48381: GO 48294
48383: POP
48384: POP
// array := tmp ;
48385: LD_ADDR_VAR 0 1
48389: PUSH
48390: LD_VAR 0 10
48394: ST_TO_ADDR
// end ;
48395: GO 48276
48397: POP
48398: POP
// result := array ;
48399: LD_ADDR_VAR 0 5
48403: PUSH
48404: LD_VAR 0 1
48408: ST_TO_ADDR
// end ;
48409: LD_VAR 0 5
48413: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48414: LD_INT 0
48416: PPUSH
48417: PPUSH
// result := 0 ;
48418: LD_ADDR_VAR 0 3
48422: PUSH
48423: LD_INT 0
48425: ST_TO_ADDR
// if not array or not value in array then
48426: LD_VAR 0 1
48430: NOT
48431: PUSH
48432: LD_VAR 0 2
48436: PUSH
48437: LD_VAR 0 1
48441: IN
48442: NOT
48443: OR
48444: IFFALSE 48448
// exit ;
48446: GO 48502
// for i = 1 to array do
48448: LD_ADDR_VAR 0 4
48452: PUSH
48453: DOUBLE
48454: LD_INT 1
48456: DEC
48457: ST_TO_ADDR
48458: LD_VAR 0 1
48462: PUSH
48463: FOR_TO
48464: IFFALSE 48500
// if value = array [ i ] then
48466: LD_VAR 0 2
48470: PUSH
48471: LD_VAR 0 1
48475: PUSH
48476: LD_VAR 0 4
48480: ARRAY
48481: EQUAL
48482: IFFALSE 48498
// begin result := i ;
48484: LD_ADDR_VAR 0 3
48488: PUSH
48489: LD_VAR 0 4
48493: ST_TO_ADDR
// exit ;
48494: POP
48495: POP
48496: GO 48502
// end ;
48498: GO 48463
48500: POP
48501: POP
// end ;
48502: LD_VAR 0 3
48506: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48507: LD_INT 0
48509: PPUSH
// vc_chassis := chassis ;
48510: LD_ADDR_OWVAR 37
48514: PUSH
48515: LD_VAR 0 1
48519: ST_TO_ADDR
// vc_engine := engine ;
48520: LD_ADDR_OWVAR 39
48524: PUSH
48525: LD_VAR 0 2
48529: ST_TO_ADDR
// vc_control := control ;
48530: LD_ADDR_OWVAR 38
48534: PUSH
48535: LD_VAR 0 3
48539: ST_TO_ADDR
// vc_weapon := weapon ;
48540: LD_ADDR_OWVAR 40
48544: PUSH
48545: LD_VAR 0 4
48549: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48550: LD_ADDR_OWVAR 41
48554: PUSH
48555: LD_VAR 0 5
48559: ST_TO_ADDR
// end ;
48560: LD_VAR 0 6
48564: RET
// export function WantPlant ( unit ) ; var task ; begin
48565: LD_INT 0
48567: PPUSH
48568: PPUSH
// result := false ;
48569: LD_ADDR_VAR 0 2
48573: PUSH
48574: LD_INT 0
48576: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48577: LD_ADDR_VAR 0 3
48581: PUSH
48582: LD_VAR 0 1
48586: PPUSH
48587: CALL_OW 437
48591: ST_TO_ADDR
// if task then
48592: LD_VAR 0 3
48596: IFFALSE 48624
// if task [ 1 ] [ 1 ] = p then
48598: LD_VAR 0 3
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PUSH
48607: LD_INT 1
48609: ARRAY
48610: PUSH
48611: LD_STRING p
48613: EQUAL
48614: IFFALSE 48624
// result := true ;
48616: LD_ADDR_VAR 0 2
48620: PUSH
48621: LD_INT 1
48623: ST_TO_ADDR
// end ;
48624: LD_VAR 0 2
48628: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48629: LD_INT 0
48631: PPUSH
48632: PPUSH
48633: PPUSH
48634: PPUSH
// if pos < 1 then
48635: LD_VAR 0 2
48639: PUSH
48640: LD_INT 1
48642: LESS
48643: IFFALSE 48647
// exit ;
48645: GO 48950
// if pos = 1 then
48647: LD_VAR 0 2
48651: PUSH
48652: LD_INT 1
48654: EQUAL
48655: IFFALSE 48688
// result := Replace ( arr , pos [ 1 ] , value ) else
48657: LD_ADDR_VAR 0 4
48661: PUSH
48662: LD_VAR 0 1
48666: PPUSH
48667: LD_VAR 0 2
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: PPUSH
48676: LD_VAR 0 3
48680: PPUSH
48681: CALL_OW 1
48685: ST_TO_ADDR
48686: GO 48950
// begin tmp := arr ;
48688: LD_ADDR_VAR 0 6
48692: PUSH
48693: LD_VAR 0 1
48697: ST_TO_ADDR
// s_arr := [ tmp ] ;
48698: LD_ADDR_VAR 0 7
48702: PUSH
48703: LD_VAR 0 6
48707: PUSH
48708: EMPTY
48709: LIST
48710: ST_TO_ADDR
// for i = 1 to pos - 1 do
48711: LD_ADDR_VAR 0 5
48715: PUSH
48716: DOUBLE
48717: LD_INT 1
48719: DEC
48720: ST_TO_ADDR
48721: LD_VAR 0 2
48725: PUSH
48726: LD_INT 1
48728: MINUS
48729: PUSH
48730: FOR_TO
48731: IFFALSE 48776
// begin tmp := tmp [ pos [ i ] ] ;
48733: LD_ADDR_VAR 0 6
48737: PUSH
48738: LD_VAR 0 6
48742: PUSH
48743: LD_VAR 0 2
48747: PUSH
48748: LD_VAR 0 5
48752: ARRAY
48753: ARRAY
48754: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48755: LD_ADDR_VAR 0 7
48759: PUSH
48760: LD_VAR 0 7
48764: PUSH
48765: LD_VAR 0 6
48769: PUSH
48770: EMPTY
48771: LIST
48772: ADD
48773: ST_TO_ADDR
// end ;
48774: GO 48730
48776: POP
48777: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48778: LD_ADDR_VAR 0 6
48782: PUSH
48783: LD_VAR 0 6
48787: PPUSH
48788: LD_VAR 0 2
48792: PUSH
48793: LD_VAR 0 2
48797: ARRAY
48798: PPUSH
48799: LD_VAR 0 3
48803: PPUSH
48804: CALL_OW 1
48808: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48809: LD_ADDR_VAR 0 7
48813: PUSH
48814: LD_VAR 0 7
48818: PPUSH
48819: LD_VAR 0 7
48823: PPUSH
48824: LD_VAR 0 6
48828: PPUSH
48829: CALL_OW 1
48833: ST_TO_ADDR
// for i = s_arr downto 2 do
48834: LD_ADDR_VAR 0 5
48838: PUSH
48839: DOUBLE
48840: LD_VAR 0 7
48844: INC
48845: ST_TO_ADDR
48846: LD_INT 2
48848: PUSH
48849: FOR_DOWNTO
48850: IFFALSE 48934
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48852: LD_ADDR_VAR 0 6
48856: PUSH
48857: LD_VAR 0 7
48861: PUSH
48862: LD_VAR 0 5
48866: PUSH
48867: LD_INT 1
48869: MINUS
48870: ARRAY
48871: PPUSH
48872: LD_VAR 0 2
48876: PUSH
48877: LD_VAR 0 5
48881: PUSH
48882: LD_INT 1
48884: MINUS
48885: ARRAY
48886: PPUSH
48887: LD_VAR 0 7
48891: PUSH
48892: LD_VAR 0 5
48896: ARRAY
48897: PPUSH
48898: CALL_OW 1
48902: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48903: LD_ADDR_VAR 0 7
48907: PUSH
48908: LD_VAR 0 7
48912: PPUSH
48913: LD_VAR 0 5
48917: PUSH
48918: LD_INT 1
48920: MINUS
48921: PPUSH
48922: LD_VAR 0 6
48926: PPUSH
48927: CALL_OW 1
48931: ST_TO_ADDR
// end ;
48932: GO 48849
48934: POP
48935: POP
// result := s_arr [ 1 ] ;
48936: LD_ADDR_VAR 0 4
48940: PUSH
48941: LD_VAR 0 7
48945: PUSH
48946: LD_INT 1
48948: ARRAY
48949: ST_TO_ADDR
// end ; end ;
48950: LD_VAR 0 4
48954: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
48955: LD_INT 0
48957: PPUSH
48958: PPUSH
// if not list then
48959: LD_VAR 0 1
48963: NOT
48964: IFFALSE 48968
// exit ;
48966: GO 49059
// i := list [ pos1 ] ;
48968: LD_ADDR_VAR 0 5
48972: PUSH
48973: LD_VAR 0 1
48977: PUSH
48978: LD_VAR 0 2
48982: ARRAY
48983: ST_TO_ADDR
// if not i then
48984: LD_VAR 0 5
48988: NOT
48989: IFFALSE 48993
// exit ;
48991: GO 49059
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
48993: LD_ADDR_VAR 0 1
48997: PUSH
48998: LD_VAR 0 1
49002: PPUSH
49003: LD_VAR 0 2
49007: PPUSH
49008: LD_VAR 0 1
49012: PUSH
49013: LD_VAR 0 3
49017: ARRAY
49018: PPUSH
49019: CALL_OW 1
49023: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49024: LD_ADDR_VAR 0 1
49028: PUSH
49029: LD_VAR 0 1
49033: PPUSH
49034: LD_VAR 0 3
49038: PPUSH
49039: LD_VAR 0 5
49043: PPUSH
49044: CALL_OW 1
49048: ST_TO_ADDR
// result := list ;
49049: LD_ADDR_VAR 0 4
49053: PUSH
49054: LD_VAR 0 1
49058: ST_TO_ADDR
// end ;
49059: LD_VAR 0 4
49063: RET
// export function Add ( list , pos , val ) ; begin
49064: LD_INT 0
49066: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
49067: LD_ADDR_VAR 0 4
49071: PUSH
49072: LD_VAR 0 1
49076: PPUSH
49077: LD_VAR 0 2
49081: PPUSH
49082: LD_VAR 0 3
49086: PPUSH
49087: CALL 48629 0 3
49091: ST_TO_ADDR
49092: LD_VAR 0 4
49096: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49097: LD_INT 0
49099: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49100: LD_ADDR_VAR 0 5
49104: PUSH
49105: LD_VAR 0 1
49109: PPUSH
49110: CALL_OW 250
49114: PPUSH
49115: LD_VAR 0 1
49119: PPUSH
49120: CALL_OW 251
49124: PPUSH
49125: LD_VAR 0 2
49129: PPUSH
49130: LD_VAR 0 3
49134: PPUSH
49135: LD_VAR 0 4
49139: PPUSH
49140: CALL 49150 0 5
49144: ST_TO_ADDR
// end ;
49145: LD_VAR 0 5
49149: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49150: LD_INT 0
49152: PPUSH
49153: PPUSH
49154: PPUSH
49155: PPUSH
// if not list then
49156: LD_VAR 0 3
49160: NOT
49161: IFFALSE 49165
// exit ;
49163: GO 49553
// result := [ ] ;
49165: LD_ADDR_VAR 0 6
49169: PUSH
49170: EMPTY
49171: ST_TO_ADDR
// for i in list do
49172: LD_ADDR_VAR 0 7
49176: PUSH
49177: LD_VAR 0 3
49181: PUSH
49182: FOR_IN
49183: IFFALSE 49385
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49185: LD_ADDR_VAR 0 9
49189: PUSH
49190: LD_VAR 0 7
49194: PPUSH
49195: LD_VAR 0 1
49199: PPUSH
49200: LD_VAR 0 2
49204: PPUSH
49205: CALL_OW 297
49209: ST_TO_ADDR
// if not result then
49210: LD_VAR 0 6
49214: NOT
49215: IFFALSE 49241
// result := [ [ i , tmp ] ] else
49217: LD_ADDR_VAR 0 6
49221: PUSH
49222: LD_VAR 0 7
49226: PUSH
49227: LD_VAR 0 9
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: ST_TO_ADDR
49239: GO 49383
// begin if result [ result ] [ 2 ] < tmp then
49241: LD_VAR 0 6
49245: PUSH
49246: LD_VAR 0 6
49250: ARRAY
49251: PUSH
49252: LD_INT 2
49254: ARRAY
49255: PUSH
49256: LD_VAR 0 9
49260: LESS
49261: IFFALSE 49303
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49263: LD_ADDR_VAR 0 6
49267: PUSH
49268: LD_VAR 0 6
49272: PPUSH
49273: LD_VAR 0 6
49277: PUSH
49278: LD_INT 1
49280: PLUS
49281: PPUSH
49282: LD_VAR 0 7
49286: PUSH
49287: LD_VAR 0 9
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PPUSH
49296: CALL_OW 2
49300: ST_TO_ADDR
49301: GO 49383
// for j = 1 to result do
49303: LD_ADDR_VAR 0 8
49307: PUSH
49308: DOUBLE
49309: LD_INT 1
49311: DEC
49312: ST_TO_ADDR
49313: LD_VAR 0 6
49317: PUSH
49318: FOR_TO
49319: IFFALSE 49381
// begin if tmp < result [ j ] [ 2 ] then
49321: LD_VAR 0 9
49325: PUSH
49326: LD_VAR 0 6
49330: PUSH
49331: LD_VAR 0 8
49335: ARRAY
49336: PUSH
49337: LD_INT 2
49339: ARRAY
49340: LESS
49341: IFFALSE 49379
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49343: LD_ADDR_VAR 0 6
49347: PUSH
49348: LD_VAR 0 6
49352: PPUSH
49353: LD_VAR 0 8
49357: PPUSH
49358: LD_VAR 0 7
49362: PUSH
49363: LD_VAR 0 9
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PPUSH
49372: CALL_OW 2
49376: ST_TO_ADDR
// break ;
49377: GO 49381
// end ; end ;
49379: GO 49318
49381: POP
49382: POP
// end ; end ;
49383: GO 49182
49385: POP
49386: POP
// if result and not asc then
49387: LD_VAR 0 6
49391: PUSH
49392: LD_VAR 0 4
49396: NOT
49397: AND
49398: IFFALSE 49473
// begin tmp := result ;
49400: LD_ADDR_VAR 0 9
49404: PUSH
49405: LD_VAR 0 6
49409: ST_TO_ADDR
// for i = tmp downto 1 do
49410: LD_ADDR_VAR 0 7
49414: PUSH
49415: DOUBLE
49416: LD_VAR 0 9
49420: INC
49421: ST_TO_ADDR
49422: LD_INT 1
49424: PUSH
49425: FOR_DOWNTO
49426: IFFALSE 49471
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49428: LD_ADDR_VAR 0 6
49432: PUSH
49433: LD_VAR 0 6
49437: PPUSH
49438: LD_VAR 0 9
49442: PUSH
49443: LD_VAR 0 7
49447: MINUS
49448: PUSH
49449: LD_INT 1
49451: PLUS
49452: PPUSH
49453: LD_VAR 0 9
49457: PUSH
49458: LD_VAR 0 7
49462: ARRAY
49463: PPUSH
49464: CALL_OW 1
49468: ST_TO_ADDR
49469: GO 49425
49471: POP
49472: POP
// end ; tmp := [ ] ;
49473: LD_ADDR_VAR 0 9
49477: PUSH
49478: EMPTY
49479: ST_TO_ADDR
// if mode then
49480: LD_VAR 0 5
49484: IFFALSE 49553
// begin for i = 1 to result do
49486: LD_ADDR_VAR 0 7
49490: PUSH
49491: DOUBLE
49492: LD_INT 1
49494: DEC
49495: ST_TO_ADDR
49496: LD_VAR 0 6
49500: PUSH
49501: FOR_TO
49502: IFFALSE 49541
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49504: LD_ADDR_VAR 0 9
49508: PUSH
49509: LD_VAR 0 9
49513: PPUSH
49514: LD_VAR 0 7
49518: PPUSH
49519: LD_VAR 0 6
49523: PUSH
49524: LD_VAR 0 7
49528: ARRAY
49529: PUSH
49530: LD_INT 1
49532: ARRAY
49533: PPUSH
49534: CALL_OW 1
49538: ST_TO_ADDR
49539: GO 49501
49541: POP
49542: POP
// result := tmp ;
49543: LD_ADDR_VAR 0 6
49547: PUSH
49548: LD_VAR 0 9
49552: ST_TO_ADDR
// end ; end ;
49553: LD_VAR 0 6
49557: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49558: LD_INT 0
49560: PPUSH
49561: PPUSH
49562: PPUSH
49563: PPUSH
49564: PPUSH
49565: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49566: LD_ADDR_VAR 0 5
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: EMPTY
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// if not x or not y then
49588: LD_VAR 0 2
49592: NOT
49593: PUSH
49594: LD_VAR 0 3
49598: NOT
49599: OR
49600: IFFALSE 49604
// exit ;
49602: GO 51250
// if not range then
49604: LD_VAR 0 4
49608: NOT
49609: IFFALSE 49619
// range := 10 ;
49611: LD_ADDR_VAR 0 4
49615: PUSH
49616: LD_INT 10
49618: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49619: LD_ADDR_VAR 0 8
49623: PUSH
49624: LD_INT 81
49626: PUSH
49627: LD_VAR 0 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 92
49638: PUSH
49639: LD_VAR 0 2
49643: PUSH
49644: LD_VAR 0 3
49648: PUSH
49649: LD_VAR 0 4
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 3
49662: PUSH
49663: LD_INT 21
49665: PUSH
49666: LD_INT 3
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: LIST
49681: PPUSH
49682: CALL_OW 69
49686: ST_TO_ADDR
// if not tmp then
49687: LD_VAR 0 8
49691: NOT
49692: IFFALSE 49696
// exit ;
49694: GO 51250
// for i in tmp do
49696: LD_ADDR_VAR 0 6
49700: PUSH
49701: LD_VAR 0 8
49705: PUSH
49706: FOR_IN
49707: IFFALSE 51225
// begin points := [ 0 , 0 , 0 ] ;
49709: LD_ADDR_VAR 0 9
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// bpoints := 1 ;
49728: LD_ADDR_VAR 0 10
49732: PUSH
49733: LD_INT 1
49735: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49736: LD_VAR 0 6
49740: PPUSH
49741: CALL_OW 247
49745: PUSH
49746: LD_INT 1
49748: DOUBLE
49749: EQUAL
49750: IFTRUE 49754
49752: GO 50332
49754: POP
// begin if GetClass ( i ) = 1 then
49755: LD_VAR 0 6
49759: PPUSH
49760: CALL_OW 257
49764: PUSH
49765: LD_INT 1
49767: EQUAL
49768: IFFALSE 49789
// points := [ 10 , 5 , 3 ] ;
49770: LD_ADDR_VAR 0 9
49774: PUSH
49775: LD_INT 10
49777: PUSH
49778: LD_INT 5
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49789: LD_VAR 0 6
49793: PPUSH
49794: CALL_OW 257
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 4
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: IN
49813: IFFALSE 49834
// points := [ 3 , 2 , 1 ] ;
49815: LD_ADDR_VAR 0 9
49819: PUSH
49820: LD_INT 3
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49834: LD_VAR 0 6
49838: PPUSH
49839: CALL_OW 257
49843: PUSH
49844: LD_INT 5
49846: EQUAL
49847: IFFALSE 49868
// points := [ 130 , 5 , 2 ] ;
49849: LD_ADDR_VAR 0 9
49853: PUSH
49854: LD_INT 130
49856: PUSH
49857: LD_INT 5
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49868: LD_VAR 0 6
49872: PPUSH
49873: CALL_OW 257
49877: PUSH
49878: LD_INT 8
49880: EQUAL
49881: IFFALSE 49902
// points := [ 35 , 35 , 30 ] ;
49883: LD_ADDR_VAR 0 9
49887: PUSH
49888: LD_INT 35
49890: PUSH
49891: LD_INT 35
49893: PUSH
49894: LD_INT 30
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49902: LD_VAR 0 6
49906: PPUSH
49907: CALL_OW 257
49911: PUSH
49912: LD_INT 9
49914: EQUAL
49915: IFFALSE 49936
// points := [ 20 , 55 , 40 ] ;
49917: LD_ADDR_VAR 0 9
49921: PUSH
49922: LD_INT 20
49924: PUSH
49925: LD_INT 55
49927: PUSH
49928: LD_INT 40
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49936: LD_VAR 0 6
49940: PPUSH
49941: CALL_OW 257
49945: PUSH
49946: LD_INT 12
49948: PUSH
49949: LD_INT 16
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: IN
49956: IFFALSE 49977
// points := [ 5 , 3 , 2 ] ;
49958: LD_ADDR_VAR 0 9
49962: PUSH
49963: LD_INT 5
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: LD_INT 2
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// if GetClass ( i ) = 17 then
49977: LD_VAR 0 6
49981: PPUSH
49982: CALL_OW 257
49986: PUSH
49987: LD_INT 17
49989: EQUAL
49990: IFFALSE 50011
// points := [ 100 , 50 , 75 ] ;
49992: LD_ADDR_VAR 0 9
49996: PUSH
49997: LD_INT 100
49999: PUSH
50000: LD_INT 50
50002: PUSH
50003: LD_INT 75
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50011: LD_VAR 0 6
50015: PPUSH
50016: CALL_OW 257
50020: PUSH
50021: LD_INT 15
50023: EQUAL
50024: IFFALSE 50045
// points := [ 10 , 5 , 3 ] ;
50026: LD_ADDR_VAR 0 9
50030: PUSH
50031: LD_INT 10
50033: PUSH
50034: LD_INT 5
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: LIST
50044: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50045: LD_VAR 0 6
50049: PPUSH
50050: CALL_OW 257
50054: PUSH
50055: LD_INT 14
50057: EQUAL
50058: IFFALSE 50079
// points := [ 10 , 0 , 0 ] ;
50060: LD_ADDR_VAR 0 9
50064: PUSH
50065: LD_INT 10
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: LIST
50078: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50079: LD_VAR 0 6
50083: PPUSH
50084: CALL_OW 257
50088: PUSH
50089: LD_INT 11
50091: EQUAL
50092: IFFALSE 50113
// points := [ 30 , 10 , 5 ] ;
50094: LD_ADDR_VAR 0 9
50098: PUSH
50099: LD_INT 30
50101: PUSH
50102: LD_INT 10
50104: PUSH
50105: LD_INT 5
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: LIST
50112: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50113: LD_VAR 0 1
50117: PPUSH
50118: LD_INT 5
50120: PPUSH
50121: CALL_OW 321
50125: PUSH
50126: LD_INT 2
50128: EQUAL
50129: IFFALSE 50146
// bpoints := bpoints * 1.8 ;
50131: LD_ADDR_VAR 0 10
50135: PUSH
50136: LD_VAR 0 10
50140: PUSH
50141: LD_REAL  1.80000000000000E+0000
50144: MUL
50145: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50146: LD_VAR 0 6
50150: PPUSH
50151: CALL_OW 257
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: LD_INT 4
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: IN
50174: PUSH
50175: LD_VAR 0 1
50179: PPUSH
50180: LD_INT 51
50182: PPUSH
50183: CALL_OW 321
50187: PUSH
50188: LD_INT 2
50190: EQUAL
50191: AND
50192: IFFALSE 50209
// bpoints := bpoints * 1.2 ;
50194: LD_ADDR_VAR 0 10
50198: PUSH
50199: LD_VAR 0 10
50203: PUSH
50204: LD_REAL  1.20000000000000E+0000
50207: MUL
50208: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50209: LD_VAR 0 6
50213: PPUSH
50214: CALL_OW 257
50218: PUSH
50219: LD_INT 5
50221: PUSH
50222: LD_INT 7
50224: PUSH
50225: LD_INT 9
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: LIST
50232: IN
50233: PUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: LD_INT 52
50241: PPUSH
50242: CALL_OW 321
50246: PUSH
50247: LD_INT 2
50249: EQUAL
50250: AND
50251: IFFALSE 50268
// bpoints := bpoints * 1.5 ;
50253: LD_ADDR_VAR 0 10
50257: PUSH
50258: LD_VAR 0 10
50262: PUSH
50263: LD_REAL  1.50000000000000E+0000
50266: MUL
50267: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50268: LD_VAR 0 1
50272: PPUSH
50273: LD_INT 66
50275: PPUSH
50276: CALL_OW 321
50280: PUSH
50281: LD_INT 2
50283: EQUAL
50284: IFFALSE 50301
// bpoints := bpoints * 1.1 ;
50286: LD_ADDR_VAR 0 10
50290: PUSH
50291: LD_VAR 0 10
50295: PUSH
50296: LD_REAL  1.10000000000000E+0000
50299: MUL
50300: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50301: LD_ADDR_VAR 0 10
50305: PUSH
50306: LD_VAR 0 10
50310: PUSH
50311: LD_VAR 0 6
50315: PPUSH
50316: LD_INT 1
50318: PPUSH
50319: CALL_OW 259
50323: PUSH
50324: LD_REAL  1.15000000000000E+0000
50327: MUL
50328: MUL
50329: ST_TO_ADDR
// end ; unit_vehicle :
50330: GO 51154
50332: LD_INT 2
50334: DOUBLE
50335: EQUAL
50336: IFTRUE 50340
50338: GO 51142
50340: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50341: LD_VAR 0 6
50345: PPUSH
50346: CALL_OW 264
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 42
50356: PUSH
50357: LD_INT 24
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: IN
50365: IFFALSE 50386
// points := [ 25 , 5 , 3 ] ;
50367: LD_ADDR_VAR 0 9
50371: PUSH
50372: LD_INT 25
50374: PUSH
50375: LD_INT 5
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50386: LD_VAR 0 6
50390: PPUSH
50391: CALL_OW 264
50395: PUSH
50396: LD_INT 4
50398: PUSH
50399: LD_INT 43
50401: PUSH
50402: LD_INT 25
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: LIST
50409: IN
50410: IFFALSE 50431
// points := [ 40 , 15 , 5 ] ;
50412: LD_ADDR_VAR 0 9
50416: PUSH
50417: LD_INT 40
50419: PUSH
50420: LD_INT 15
50422: PUSH
50423: LD_INT 5
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50431: LD_VAR 0 6
50435: PPUSH
50436: CALL_OW 264
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: LD_INT 23
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: IN
50451: IFFALSE 50472
// points := [ 7 , 25 , 8 ] ;
50453: LD_ADDR_VAR 0 9
50457: PUSH
50458: LD_INT 7
50460: PUSH
50461: LD_INT 25
50463: PUSH
50464: LD_INT 8
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: LIST
50471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50472: LD_VAR 0 6
50476: PPUSH
50477: CALL_OW 264
50481: PUSH
50482: LD_INT 5
50484: PUSH
50485: LD_INT 27
50487: PUSH
50488: LD_INT 44
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: IN
50496: IFFALSE 50517
// points := [ 14 , 50 , 16 ] ;
50498: LD_ADDR_VAR 0 9
50502: PUSH
50503: LD_INT 14
50505: PUSH
50506: LD_INT 50
50508: PUSH
50509: LD_INT 16
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50517: LD_VAR 0 6
50521: PPUSH
50522: CALL_OW 264
50526: PUSH
50527: LD_INT 6
50529: PUSH
50530: LD_INT 46
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: IN
50537: IFFALSE 50558
// points := [ 32 , 120 , 70 ] ;
50539: LD_ADDR_VAR 0 9
50543: PUSH
50544: LD_INT 32
50546: PUSH
50547: LD_INT 120
50549: PUSH
50550: LD_INT 70
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
50558: LD_VAR 0 6
50562: PPUSH
50563: CALL_OW 264
50567: PUSH
50568: LD_INT 7
50570: PUSH
50571: LD_INT 28
50573: PUSH
50574: LD_INT 45
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: LIST
50581: IN
50582: IFFALSE 50603
// points := [ 35 , 20 , 45 ] ;
50584: LD_ADDR_VAR 0 9
50588: PUSH
50589: LD_INT 35
50591: PUSH
50592: LD_INT 20
50594: PUSH
50595: LD_INT 45
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50603: LD_VAR 0 6
50607: PPUSH
50608: CALL_OW 264
50612: PUSH
50613: LD_INT 47
50615: PUSH
50616: EMPTY
50617: LIST
50618: IN
50619: IFFALSE 50640
// points := [ 67 , 45 , 75 ] ;
50621: LD_ADDR_VAR 0 9
50625: PUSH
50626: LD_INT 67
50628: PUSH
50629: LD_INT 45
50631: PUSH
50632: LD_INT 75
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50640: LD_VAR 0 6
50644: PPUSH
50645: CALL_OW 264
50649: PUSH
50650: LD_INT 26
50652: PUSH
50653: EMPTY
50654: LIST
50655: IN
50656: IFFALSE 50677
// points := [ 120 , 30 , 80 ] ;
50658: LD_ADDR_VAR 0 9
50662: PUSH
50663: LD_INT 120
50665: PUSH
50666: LD_INT 30
50668: PUSH
50669: LD_INT 80
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50677: LD_VAR 0 6
50681: PPUSH
50682: CALL_OW 264
50686: PUSH
50687: LD_INT 22
50689: PUSH
50690: EMPTY
50691: LIST
50692: IN
50693: IFFALSE 50714
// points := [ 40 , 1 , 1 ] ;
50695: LD_ADDR_VAR 0 9
50699: PUSH
50700: LD_INT 40
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50714: LD_VAR 0 6
50718: PPUSH
50719: CALL_OW 264
50723: PUSH
50724: LD_INT 29
50726: PUSH
50727: EMPTY
50728: LIST
50729: IN
50730: IFFALSE 50751
// points := [ 70 , 200 , 400 ] ;
50732: LD_ADDR_VAR 0 9
50736: PUSH
50737: LD_INT 70
50739: PUSH
50740: LD_INT 200
50742: PUSH
50743: LD_INT 400
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50751: LD_VAR 0 6
50755: PPUSH
50756: CALL_OW 264
50760: PUSH
50761: LD_INT 14
50763: PUSH
50764: LD_INT 53
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: IN
50771: IFFALSE 50792
// points := [ 40 , 10 , 20 ] ;
50773: LD_ADDR_VAR 0 9
50777: PUSH
50778: LD_INT 40
50780: PUSH
50781: LD_INT 10
50783: PUSH
50784: LD_INT 20
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50792: LD_VAR 0 6
50796: PPUSH
50797: CALL_OW 264
50801: PUSH
50802: LD_INT 9
50804: PUSH
50805: EMPTY
50806: LIST
50807: IN
50808: IFFALSE 50829
// points := [ 5 , 70 , 20 ] ;
50810: LD_ADDR_VAR 0 9
50814: PUSH
50815: LD_INT 5
50817: PUSH
50818: LD_INT 70
50820: PUSH
50821: LD_INT 20
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50829: LD_VAR 0 6
50833: PPUSH
50834: CALL_OW 264
50838: PUSH
50839: LD_INT 10
50841: PUSH
50842: EMPTY
50843: LIST
50844: IN
50845: IFFALSE 50866
// points := [ 35 , 110 , 70 ] ;
50847: LD_ADDR_VAR 0 9
50851: PUSH
50852: LD_INT 35
50854: PUSH
50855: LD_INT 110
50857: PUSH
50858: LD_INT 70
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50866: LD_VAR 0 6
50870: PPUSH
50871: CALL_OW 265
50875: PUSH
50876: LD_INT 25
50878: EQUAL
50879: IFFALSE 50900
// points := [ 80 , 65 , 100 ] ;
50881: LD_ADDR_VAR 0 9
50885: PUSH
50886: LD_INT 80
50888: PUSH
50889: LD_INT 65
50891: PUSH
50892: LD_INT 100
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: LIST
50899: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50900: LD_VAR 0 6
50904: PPUSH
50905: CALL_OW 263
50909: PUSH
50910: LD_INT 1
50912: EQUAL
50913: IFFALSE 50948
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50915: LD_ADDR_VAR 0 10
50919: PUSH
50920: LD_VAR 0 10
50924: PUSH
50925: LD_VAR 0 6
50929: PPUSH
50930: CALL_OW 311
50934: PPUSH
50935: LD_INT 3
50937: PPUSH
50938: CALL_OW 259
50942: PUSH
50943: LD_INT 4
50945: MUL
50946: MUL
50947: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50948: LD_VAR 0 6
50952: PPUSH
50953: CALL_OW 263
50957: PUSH
50958: LD_INT 2
50960: EQUAL
50961: IFFALSE 51012
// begin j := IsControledBy ( i ) ;
50963: LD_ADDR_VAR 0 7
50967: PUSH
50968: LD_VAR 0 6
50972: PPUSH
50973: CALL_OW 312
50977: ST_TO_ADDR
// if j then
50978: LD_VAR 0 7
50982: IFFALSE 51012
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
50984: LD_ADDR_VAR 0 10
50988: PUSH
50989: LD_VAR 0 10
50993: PUSH
50994: LD_VAR 0 7
50998: PPUSH
50999: LD_INT 3
51001: PPUSH
51002: CALL_OW 259
51006: PUSH
51007: LD_INT 3
51009: MUL
51010: MUL
51011: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51012: LD_VAR 0 6
51016: PPUSH
51017: CALL_OW 264
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: LD_INT 6
51027: PUSH
51028: LD_INT 46
51030: PUSH
51031: LD_INT 44
51033: PUSH
51034: LD_INT 47
51036: PUSH
51037: LD_INT 45
51039: PUSH
51040: LD_INT 28
51042: PUSH
51043: LD_INT 7
51045: PUSH
51046: LD_INT 27
51048: PUSH
51049: LD_INT 29
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: IN
51064: PUSH
51065: LD_VAR 0 1
51069: PPUSH
51070: LD_INT 52
51072: PPUSH
51073: CALL_OW 321
51077: PUSH
51078: LD_INT 2
51080: EQUAL
51081: AND
51082: IFFALSE 51099
// bpoints := bpoints * 1.2 ;
51084: LD_ADDR_VAR 0 10
51088: PUSH
51089: LD_VAR 0 10
51093: PUSH
51094: LD_REAL  1.20000000000000E+0000
51097: MUL
51098: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51099: LD_VAR 0 6
51103: PPUSH
51104: CALL_OW 264
51108: PUSH
51109: LD_INT 6
51111: PUSH
51112: LD_INT 46
51114: PUSH
51115: LD_INT 47
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: IN
51123: IFFALSE 51140
// bpoints := bpoints * 1.2 ;
51125: LD_ADDR_VAR 0 10
51129: PUSH
51130: LD_VAR 0 10
51134: PUSH
51135: LD_REAL  1.20000000000000E+0000
51138: MUL
51139: ST_TO_ADDR
// end ; unit_building :
51140: GO 51154
51142: LD_INT 3
51144: DOUBLE
51145: EQUAL
51146: IFTRUE 51150
51148: GO 51153
51150: POP
// ; end ;
51151: GO 51154
51153: POP
// for j = 1 to 3 do
51154: LD_ADDR_VAR 0 7
51158: PUSH
51159: DOUBLE
51160: LD_INT 1
51162: DEC
51163: ST_TO_ADDR
51164: LD_INT 3
51166: PUSH
51167: FOR_TO
51168: IFFALSE 51221
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51170: LD_ADDR_VAR 0 5
51174: PUSH
51175: LD_VAR 0 5
51179: PPUSH
51180: LD_VAR 0 7
51184: PPUSH
51185: LD_VAR 0 5
51189: PUSH
51190: LD_VAR 0 7
51194: ARRAY
51195: PUSH
51196: LD_VAR 0 9
51200: PUSH
51201: LD_VAR 0 7
51205: ARRAY
51206: PUSH
51207: LD_VAR 0 10
51211: MUL
51212: PLUS
51213: PPUSH
51214: CALL_OW 1
51218: ST_TO_ADDR
51219: GO 51167
51221: POP
51222: POP
// end ;
51223: GO 49706
51225: POP
51226: POP
// result := Replace ( result , 4 , tmp ) ;
51227: LD_ADDR_VAR 0 5
51231: PUSH
51232: LD_VAR 0 5
51236: PPUSH
51237: LD_INT 4
51239: PPUSH
51240: LD_VAR 0 8
51244: PPUSH
51245: CALL_OW 1
51249: ST_TO_ADDR
// end ;
51250: LD_VAR 0 5
51254: RET
// export function DangerAtRange ( unit , range ) ; begin
51255: LD_INT 0
51257: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51258: LD_ADDR_VAR 0 3
51262: PUSH
51263: LD_VAR 0 1
51267: PPUSH
51268: CALL_OW 255
51272: PPUSH
51273: LD_VAR 0 1
51277: PPUSH
51278: CALL_OW 250
51282: PPUSH
51283: LD_VAR 0 1
51287: PPUSH
51288: CALL_OW 251
51292: PPUSH
51293: LD_VAR 0 2
51297: PPUSH
51298: CALL 49558 0 4
51302: ST_TO_ADDR
// end ;
51303: LD_VAR 0 3
51307: RET
// export function DangerInArea ( side , area ) ; begin
51308: LD_INT 0
51310: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51311: LD_ADDR_VAR 0 3
51315: PUSH
51316: LD_VAR 0 2
51320: PPUSH
51321: LD_INT 81
51323: PUSH
51324: LD_VAR 0 1
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PPUSH
51333: CALL_OW 70
51337: ST_TO_ADDR
// end ;
51338: LD_VAR 0 3
51342: RET
// export function IsExtension ( b ) ; begin
51343: LD_INT 0
51345: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51346: LD_ADDR_VAR 0 2
51350: PUSH
51351: LD_VAR 0 1
51355: PUSH
51356: LD_INT 23
51358: PUSH
51359: LD_INT 20
51361: PUSH
51362: LD_INT 22
51364: PUSH
51365: LD_INT 17
51367: PUSH
51368: LD_INT 24
51370: PUSH
51371: LD_INT 21
51373: PUSH
51374: LD_INT 19
51376: PUSH
51377: LD_INT 16
51379: PUSH
51380: LD_INT 25
51382: PUSH
51383: LD_INT 18
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: IN
51398: ST_TO_ADDR
// end ;
51399: LD_VAR 0 2
51403: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
51404: LD_INT 0
51406: PPUSH
51407: PPUSH
51408: PPUSH
// result := [ ] ;
51409: LD_ADDR_VAR 0 2
51413: PUSH
51414: EMPTY
51415: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
51416: LD_ADDR_VAR 0 3
51420: PUSH
51421: LD_INT 21
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PPUSH
51431: CALL_OW 69
51435: ST_TO_ADDR
// if not tmp then
51436: LD_VAR 0 3
51440: NOT
51441: IFFALSE 51445
// exit ;
51443: GO 51495
// for i in tmp do
51445: LD_ADDR_VAR 0 4
51449: PUSH
51450: LD_VAR 0 3
51454: PUSH
51455: FOR_IN
51456: IFFALSE 51493
// if GetBase ( i ) = base then
51458: LD_VAR 0 4
51462: PPUSH
51463: CALL_OW 274
51467: PUSH
51468: LD_VAR 0 1
51472: EQUAL
51473: IFFALSE 51491
// result := result ^ i ;
51475: LD_ADDR_VAR 0 2
51479: PUSH
51480: LD_VAR 0 2
51484: PUSH
51485: LD_VAR 0 4
51489: ADD
51490: ST_TO_ADDR
51491: GO 51455
51493: POP
51494: POP
// end ;
51495: LD_VAR 0 2
51499: RET
// export function ComComplete ( unit , b ) ; var i ; begin
51500: LD_INT 0
51502: PPUSH
51503: PPUSH
// if BuildingStatus ( b ) = bs_build then
51504: LD_VAR 0 2
51508: PPUSH
51509: CALL_OW 461
51513: PUSH
51514: LD_INT 1
51516: EQUAL
51517: IFFALSE 51577
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51519: LD_VAR 0 1
51523: PPUSH
51524: LD_STRING h
51526: PUSH
51527: LD_VAR 0 2
51531: PPUSH
51532: CALL_OW 250
51536: PUSH
51537: LD_VAR 0 2
51541: PPUSH
51542: CALL_OW 251
51546: PUSH
51547: LD_VAR 0 2
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: PPUSH
51573: CALL_OW 446
// end ;
51577: LD_VAR 0 3
51581: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51582: LD_INT 0
51584: PPUSH
51585: PPUSH
51586: PPUSH
51587: PPUSH
51588: PPUSH
51589: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
51590: LD_VAR 0 1
51594: NOT
51595: PUSH
51596: LD_VAR 0 1
51600: PPUSH
51601: CALL_OW 263
51605: PUSH
51606: LD_INT 2
51608: EQUAL
51609: NOT
51610: OR
51611: IFFALSE 51615
// exit ;
51613: GO 51931
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51615: LD_ADDR_VAR 0 6
51619: PUSH
51620: LD_INT 22
51622: PUSH
51623: LD_VAR 0 1
51627: PPUSH
51628: CALL_OW 255
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 30
51642: PUSH
51643: LD_INT 36
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 34
51652: PUSH
51653: LD_INT 31
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PPUSH
51669: CALL_OW 69
51673: ST_TO_ADDR
// if not tmp then
51674: LD_VAR 0 6
51678: NOT
51679: IFFALSE 51683
// exit ;
51681: GO 51931
// result := [ ] ;
51683: LD_ADDR_VAR 0 2
51687: PUSH
51688: EMPTY
51689: ST_TO_ADDR
// for i in tmp do
51690: LD_ADDR_VAR 0 3
51694: PUSH
51695: LD_VAR 0 6
51699: PUSH
51700: FOR_IN
51701: IFFALSE 51772
// begin t := UnitsInside ( i ) ;
51703: LD_ADDR_VAR 0 4
51707: PUSH
51708: LD_VAR 0 3
51712: PPUSH
51713: CALL_OW 313
51717: ST_TO_ADDR
// if t then
51718: LD_VAR 0 4
51722: IFFALSE 51770
// for j in t do
51724: LD_ADDR_VAR 0 7
51728: PUSH
51729: LD_VAR 0 4
51733: PUSH
51734: FOR_IN
51735: IFFALSE 51768
// result := Insert ( result , result + 1 , j ) ;
51737: LD_ADDR_VAR 0 2
51741: PUSH
51742: LD_VAR 0 2
51746: PPUSH
51747: LD_VAR 0 2
51751: PUSH
51752: LD_INT 1
51754: PLUS
51755: PPUSH
51756: LD_VAR 0 7
51760: PPUSH
51761: CALL_OW 2
51765: ST_TO_ADDR
51766: GO 51734
51768: POP
51769: POP
// end ;
51770: GO 51700
51772: POP
51773: POP
// if not result then
51774: LD_VAR 0 2
51778: NOT
51779: IFFALSE 51783
// exit ;
51781: GO 51931
// mech := result [ 1 ] ;
51783: LD_ADDR_VAR 0 5
51787: PUSH
51788: LD_VAR 0 2
51792: PUSH
51793: LD_INT 1
51795: ARRAY
51796: ST_TO_ADDR
// if result > 1 then
51797: LD_VAR 0 2
51801: PUSH
51802: LD_INT 1
51804: GREATER
51805: IFFALSE 51917
// for i = 2 to result do
51807: LD_ADDR_VAR 0 3
51811: PUSH
51812: DOUBLE
51813: LD_INT 2
51815: DEC
51816: ST_TO_ADDR
51817: LD_VAR 0 2
51821: PUSH
51822: FOR_TO
51823: IFFALSE 51915
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51825: LD_ADDR_VAR 0 4
51829: PUSH
51830: LD_VAR 0 2
51834: PUSH
51835: LD_VAR 0 3
51839: ARRAY
51840: PPUSH
51841: LD_INT 3
51843: PPUSH
51844: CALL_OW 259
51848: PUSH
51849: LD_VAR 0 2
51853: PUSH
51854: LD_VAR 0 3
51858: ARRAY
51859: PPUSH
51860: CALL_OW 432
51864: MINUS
51865: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51866: LD_VAR 0 4
51870: PUSH
51871: LD_VAR 0 5
51875: PPUSH
51876: LD_INT 3
51878: PPUSH
51879: CALL_OW 259
51883: PUSH
51884: LD_VAR 0 5
51888: PPUSH
51889: CALL_OW 432
51893: MINUS
51894: GREATEREQUAL
51895: IFFALSE 51913
// mech := result [ i ] ;
51897: LD_ADDR_VAR 0 5
51901: PUSH
51902: LD_VAR 0 2
51906: PUSH
51907: LD_VAR 0 3
51911: ARRAY
51912: ST_TO_ADDR
// end ;
51913: GO 51822
51915: POP
51916: POP
// ComLinkTo ( vehicle , mech ) ;
51917: LD_VAR 0 1
51921: PPUSH
51922: LD_VAR 0 5
51926: PPUSH
51927: CALL_OW 135
// end ;
51931: LD_VAR 0 2
51935: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
51936: LD_INT 0
51938: PPUSH
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
// result := [ ] ;
51950: LD_ADDR_VAR 0 6
51954: PUSH
51955: EMPTY
51956: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
51957: LD_VAR 0 1
51961: PPUSH
51962: CALL_OW 266
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: IN
51977: NOT
51978: IFFALSE 51982
// exit ;
51980: GO 53382
// if name then
51982: LD_VAR 0 2
51986: IFFALSE 52002
// SetBName ( base_dep , name ) ;
51988: LD_VAR 0 1
51992: PPUSH
51993: LD_VAR 0 2
51997: PPUSH
51998: CALL_OW 500
// base := GetBase ( base_dep ) ;
52002: LD_ADDR_VAR 0 14
52006: PUSH
52007: LD_VAR 0 1
52011: PPUSH
52012: CALL_OW 274
52016: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52017: LD_ADDR_VAR 0 15
52021: PUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 255
52031: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52032: LD_ADDR_VAR 0 16
52036: PUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 248
52046: ST_TO_ADDR
// if sources then
52047: LD_VAR 0 4
52051: IFFALSE 52098
// for i = 1 to 3 do
52053: LD_ADDR_VAR 0 7
52057: PUSH
52058: DOUBLE
52059: LD_INT 1
52061: DEC
52062: ST_TO_ADDR
52063: LD_INT 3
52065: PUSH
52066: FOR_TO
52067: IFFALSE 52096
// AddResourceType ( base , i , sources [ i ] ) ;
52069: LD_VAR 0 14
52073: PPUSH
52074: LD_VAR 0 7
52078: PPUSH
52079: LD_VAR 0 4
52083: PUSH
52084: LD_VAR 0 7
52088: ARRAY
52089: PPUSH
52090: CALL_OW 276
52094: GO 52066
52096: POP
52097: POP
// buildings := GetBaseBuildings ( base ) ;
52098: LD_ADDR_VAR 0 17
52102: PUSH
52103: LD_VAR 0 14
52107: PPUSH
52108: CALL 51404 0 1
52112: ST_TO_ADDR
// InitHc ;
52113: CALL_OW 19
// InitUc ;
52117: CALL_OW 18
// uc_side := side ;
52121: LD_ADDR_OWVAR 20
52125: PUSH
52126: LD_VAR 0 15
52130: ST_TO_ADDR
// uc_nation := nation ;
52131: LD_ADDR_OWVAR 21
52135: PUSH
52136: LD_VAR 0 16
52140: ST_TO_ADDR
// if buildings then
52141: LD_VAR 0 17
52145: IFFALSE 53241
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52147: LD_VAR 0 17
52151: PPUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 30
52157: PUSH
52158: LD_INT 32
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 30
52167: PUSH
52168: LD_INT 33
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: LIST
52179: PPUSH
52180: CALL_OW 72
52184: IFFALSE 52267
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52186: LD_ADDR_VAR 0 7
52190: PUSH
52191: LD_VAR 0 17
52195: PPUSH
52196: LD_INT 2
52198: PUSH
52199: LD_INT 30
52201: PUSH
52202: LD_INT 32
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 30
52211: PUSH
52212: LD_INT 33
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: PPUSH
52224: CALL_OW 72
52228: PUSH
52229: FOR_IN
52230: IFFALSE 52265
// begin if not GetBWeapon ( i ) then
52232: LD_VAR 0 7
52236: PPUSH
52237: CALL_OW 269
52241: NOT
52242: IFFALSE 52263
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
52244: LD_VAR 0 7
52248: PPUSH
52249: LD_VAR 0 7
52253: PPUSH
52254: CALL 53387 0 1
52258: PPUSH
52259: CALL_OW 431
// end ;
52263: GO 52229
52265: POP
52266: POP
// end ; for i = 1 to personel do
52267: LD_ADDR_VAR 0 7
52271: PUSH
52272: DOUBLE
52273: LD_INT 1
52275: DEC
52276: ST_TO_ADDR
52277: LD_VAR 0 5
52281: PUSH
52282: FOR_TO
52283: IFFALSE 53221
// begin if i > 4 then
52285: LD_VAR 0 7
52289: PUSH
52290: LD_INT 4
52292: GREATER
52293: IFFALSE 52297
// break ;
52295: GO 53221
// case i of 1 :
52297: LD_VAR 0 7
52301: PUSH
52302: LD_INT 1
52304: DOUBLE
52305: EQUAL
52306: IFTRUE 52310
52308: GO 52383
52310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52311: LD_ADDR_VAR 0 11
52315: PUSH
52316: LD_VAR 0 17
52320: PPUSH
52321: LD_INT 22
52323: PUSH
52324: LD_VAR 0 15
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 2
52335: PUSH
52336: LD_INT 30
52338: PUSH
52339: LD_INT 32
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 30
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 30
52358: PUSH
52359: LD_INT 5
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PPUSH
52376: CALL_OW 72
52380: ST_TO_ADDR
52381: GO 52605
52383: LD_INT 2
52385: DOUBLE
52386: EQUAL
52387: IFTRUE 52391
52389: GO 52453
52391: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52392: LD_ADDR_VAR 0 11
52396: PUSH
52397: LD_VAR 0 17
52401: PPUSH
52402: LD_INT 22
52404: PUSH
52405: LD_VAR 0 15
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 2
52416: PUSH
52417: LD_INT 30
52419: PUSH
52420: LD_INT 0
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 30
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PPUSH
52446: CALL_OW 72
52450: ST_TO_ADDR
52451: GO 52605
52453: LD_INT 3
52455: DOUBLE
52456: EQUAL
52457: IFTRUE 52461
52459: GO 52523
52461: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52462: LD_ADDR_VAR 0 11
52466: PUSH
52467: LD_VAR 0 17
52471: PPUSH
52472: LD_INT 22
52474: PUSH
52475: LD_VAR 0 15
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 30
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 30
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PPUSH
52516: CALL_OW 72
52520: ST_TO_ADDR
52521: GO 52605
52523: LD_INT 4
52525: DOUBLE
52526: EQUAL
52527: IFTRUE 52531
52529: GO 52604
52531: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52532: LD_ADDR_VAR 0 11
52536: PUSH
52537: LD_VAR 0 17
52541: PPUSH
52542: LD_INT 22
52544: PUSH
52545: LD_VAR 0 15
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 30
52559: PUSH
52560: LD_INT 6
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 30
52569: PUSH
52570: LD_INT 7
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 30
52579: PUSH
52580: LD_INT 8
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PPUSH
52597: CALL_OW 72
52601: ST_TO_ADDR
52602: GO 52605
52604: POP
// x := personel [ i ] ;
52605: LD_ADDR_VAR 0 12
52609: PUSH
52610: LD_VAR 0 5
52614: PUSH
52615: LD_VAR 0 7
52619: ARRAY
52620: ST_TO_ADDR
// if x = - 1 then
52621: LD_VAR 0 12
52625: PUSH
52626: LD_INT 1
52628: NEG
52629: EQUAL
52630: IFFALSE 52839
// begin for j in f do
52632: LD_ADDR_VAR 0 8
52636: PUSH
52637: LD_VAR 0 11
52641: PUSH
52642: FOR_IN
52643: IFFALSE 52835
// repeat InitHc ;
52645: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52649: LD_VAR 0 8
52653: PPUSH
52654: CALL_OW 266
52658: PUSH
52659: LD_INT 5
52661: EQUAL
52662: IFFALSE 52732
// begin if UnitsInside ( j ) < 3 then
52664: LD_VAR 0 8
52668: PPUSH
52669: CALL_OW 313
52673: PUSH
52674: LD_INT 3
52676: LESS
52677: IFFALSE 52713
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
52679: LD_INT 0
52681: PPUSH
52682: LD_INT 5
52684: PUSH
52685: LD_INT 8
52687: PUSH
52688: LD_INT 9
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: LIST
52695: PUSH
52696: LD_VAR 0 16
52700: ARRAY
52701: PPUSH
52702: LD_VAR 0 3
52706: PPUSH
52707: CALL_OW 380
52711: GO 52730
// PrepareHuman ( false , i , skill ) ;
52713: LD_INT 0
52715: PPUSH
52716: LD_VAR 0 7
52720: PPUSH
52721: LD_VAR 0 3
52725: PPUSH
52726: CALL_OW 380
// end else
52730: GO 52749
// PrepareHuman ( false , i , skill ) ;
52732: LD_INT 0
52734: PPUSH
52735: LD_VAR 0 7
52739: PPUSH
52740: LD_VAR 0 3
52744: PPUSH
52745: CALL_OW 380
// un := CreateHuman ;
52749: LD_ADDR_VAR 0 13
52753: PUSH
52754: CALL_OW 44
52758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52759: LD_ADDR_VAR 0 6
52763: PUSH
52764: LD_VAR 0 6
52768: PPUSH
52769: LD_INT 1
52771: PPUSH
52772: LD_VAR 0 13
52776: PPUSH
52777: CALL_OW 2
52781: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
52782: LD_VAR 0 13
52786: PPUSH
52787: LD_VAR 0 8
52791: PPUSH
52792: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
52796: LD_VAR 0 8
52800: PPUSH
52801: CALL_OW 313
52805: PUSH
52806: LD_INT 6
52808: EQUAL
52809: PUSH
52810: LD_VAR 0 8
52814: PPUSH
52815: CALL_OW 266
52819: PUSH
52820: LD_INT 32
52822: PUSH
52823: LD_INT 31
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: IN
52830: OR
52831: IFFALSE 52645
52833: GO 52642
52835: POP
52836: POP
// end else
52837: GO 53219
// for j = 1 to x do
52839: LD_ADDR_VAR 0 8
52843: PUSH
52844: DOUBLE
52845: LD_INT 1
52847: DEC
52848: ST_TO_ADDR
52849: LD_VAR 0 12
52853: PUSH
52854: FOR_TO
52855: IFFALSE 53217
// begin InitHc ;
52857: CALL_OW 19
// if not f then
52861: LD_VAR 0 11
52865: NOT
52866: IFFALSE 52955
// begin PrepareHuman ( false , i , skill ) ;
52868: LD_INT 0
52870: PPUSH
52871: LD_VAR 0 7
52875: PPUSH
52876: LD_VAR 0 3
52880: PPUSH
52881: CALL_OW 380
// un := CreateHuman ;
52885: LD_ADDR_VAR 0 13
52889: PUSH
52890: CALL_OW 44
52894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
52895: LD_ADDR_VAR 0 6
52899: PUSH
52900: LD_VAR 0 6
52904: PPUSH
52905: LD_INT 1
52907: PPUSH
52908: LD_VAR 0 13
52912: PPUSH
52913: CALL_OW 2
52917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
52918: LD_VAR 0 13
52922: PPUSH
52923: LD_VAR 0 1
52927: PPUSH
52928: CALL_OW 250
52932: PPUSH
52933: LD_VAR 0 1
52937: PPUSH
52938: CALL_OW 251
52942: PPUSH
52943: LD_INT 10
52945: PPUSH
52946: LD_INT 0
52948: PPUSH
52949: CALL_OW 50
// continue ;
52953: GO 52854
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
52955: LD_VAR 0 11
52959: PUSH
52960: LD_INT 1
52962: ARRAY
52963: PPUSH
52964: CALL_OW 313
52968: PUSH
52969: LD_VAR 0 11
52973: PUSH
52974: LD_INT 1
52976: ARRAY
52977: PPUSH
52978: CALL_OW 266
52982: PUSH
52983: LD_INT 32
52985: PUSH
52986: LD_INT 31
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: IN
52993: AND
52994: PUSH
52995: LD_VAR 0 11
52999: PUSH
53000: LD_INT 1
53002: ARRAY
53003: PPUSH
53004: CALL_OW 313
53008: PUSH
53009: LD_INT 6
53011: EQUAL
53012: OR
53013: IFFALSE 53033
// f := Delete ( f , 1 ) ;
53015: LD_ADDR_VAR 0 11
53019: PUSH
53020: LD_VAR 0 11
53024: PPUSH
53025: LD_INT 1
53027: PPUSH
53028: CALL_OW 3
53032: ST_TO_ADDR
// if not f then
53033: LD_VAR 0 11
53037: NOT
53038: IFFALSE 53056
// begin x := x + 2 ;
53040: LD_ADDR_VAR 0 12
53044: PUSH
53045: LD_VAR 0 12
53049: PUSH
53050: LD_INT 2
53052: PLUS
53053: ST_TO_ADDR
// continue ;
53054: GO 52854
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53056: LD_VAR 0 11
53060: PUSH
53061: LD_INT 1
53063: ARRAY
53064: PPUSH
53065: CALL_OW 266
53069: PUSH
53070: LD_INT 5
53072: EQUAL
53073: IFFALSE 53147
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53075: LD_VAR 0 11
53079: PUSH
53080: LD_INT 1
53082: ARRAY
53083: PPUSH
53084: CALL_OW 313
53088: PUSH
53089: LD_INT 3
53091: LESS
53092: IFFALSE 53128
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53094: LD_INT 0
53096: PPUSH
53097: LD_INT 5
53099: PUSH
53100: LD_INT 8
53102: PUSH
53103: LD_INT 9
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: PUSH
53111: LD_VAR 0 16
53115: ARRAY
53116: PPUSH
53117: LD_VAR 0 3
53121: PPUSH
53122: CALL_OW 380
53126: GO 53145
// PrepareHuman ( false , i , skill ) ;
53128: LD_INT 0
53130: PPUSH
53131: LD_VAR 0 7
53135: PPUSH
53136: LD_VAR 0 3
53140: PPUSH
53141: CALL_OW 380
// end else
53145: GO 53164
// PrepareHuman ( false , i , skill ) ;
53147: LD_INT 0
53149: PPUSH
53150: LD_VAR 0 7
53154: PPUSH
53155: LD_VAR 0 3
53159: PPUSH
53160: CALL_OW 380
// un := CreateHuman ;
53164: LD_ADDR_VAR 0 13
53168: PUSH
53169: CALL_OW 44
53173: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53174: LD_ADDR_VAR 0 6
53178: PUSH
53179: LD_VAR 0 6
53183: PPUSH
53184: LD_INT 1
53186: PPUSH
53187: LD_VAR 0 13
53191: PPUSH
53192: CALL_OW 2
53196: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53197: LD_VAR 0 13
53201: PPUSH
53202: LD_VAR 0 11
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PPUSH
53211: CALL_OW 52
// end ;
53215: GO 52854
53217: POP
53218: POP
// end ;
53219: GO 52282
53221: POP
53222: POP
// result := result ^ buildings ;
53223: LD_ADDR_VAR 0 6
53227: PUSH
53228: LD_VAR 0 6
53232: PUSH
53233: LD_VAR 0 17
53237: ADD
53238: ST_TO_ADDR
// end else
53239: GO 53382
// begin for i = 1 to personel do
53241: LD_ADDR_VAR 0 7
53245: PUSH
53246: DOUBLE
53247: LD_INT 1
53249: DEC
53250: ST_TO_ADDR
53251: LD_VAR 0 5
53255: PUSH
53256: FOR_TO
53257: IFFALSE 53380
// begin if i > 4 then
53259: LD_VAR 0 7
53263: PUSH
53264: LD_INT 4
53266: GREATER
53267: IFFALSE 53271
// break ;
53269: GO 53380
// x := personel [ i ] ;
53271: LD_ADDR_VAR 0 12
53275: PUSH
53276: LD_VAR 0 5
53280: PUSH
53281: LD_VAR 0 7
53285: ARRAY
53286: ST_TO_ADDR
// if x = - 1 then
53287: LD_VAR 0 12
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: EQUAL
53296: IFFALSE 53300
// continue ;
53298: GO 53256
// PrepareHuman ( false , i , skill ) ;
53300: LD_INT 0
53302: PPUSH
53303: LD_VAR 0 7
53307: PPUSH
53308: LD_VAR 0 3
53312: PPUSH
53313: CALL_OW 380
// un := CreateHuman ;
53317: LD_ADDR_VAR 0 13
53321: PUSH
53322: CALL_OW 44
53326: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53327: LD_VAR 0 13
53331: PPUSH
53332: LD_VAR 0 1
53336: PPUSH
53337: CALL_OW 250
53341: PPUSH
53342: LD_VAR 0 1
53346: PPUSH
53347: CALL_OW 251
53351: PPUSH
53352: LD_INT 10
53354: PPUSH
53355: LD_INT 0
53357: PPUSH
53358: CALL_OW 50
// result := result ^ un ;
53362: LD_ADDR_VAR 0 6
53366: PUSH
53367: LD_VAR 0 6
53371: PUSH
53372: LD_VAR 0 13
53376: ADD
53377: ST_TO_ADDR
// end ;
53378: GO 53256
53380: POP
53381: POP
// end ; end ;
53382: LD_VAR 0 6
53386: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53387: LD_INT 0
53389: PPUSH
53390: PPUSH
53391: PPUSH
53392: PPUSH
53393: PPUSH
53394: PPUSH
53395: PPUSH
53396: PPUSH
53397: PPUSH
53398: PPUSH
53399: PPUSH
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
53404: PPUSH
// result := false ;
53405: LD_ADDR_VAR 0 2
53409: PUSH
53410: LD_INT 0
53412: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53413: LD_VAR 0 1
53417: NOT
53418: PUSH
53419: LD_VAR 0 1
53423: PPUSH
53424: CALL_OW 266
53428: PUSH
53429: LD_INT 32
53431: PUSH
53432: LD_INT 33
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: IN
53439: NOT
53440: OR
53441: IFFALSE 53445
// exit ;
53443: GO 54576
// nat := GetNation ( tower ) ;
53445: LD_ADDR_VAR 0 11
53449: PUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: CALL_OW 248
53459: ST_TO_ADDR
// side := GetSide ( tower ) ;
53460: LD_ADDR_VAR 0 15
53464: PUSH
53465: LD_VAR 0 1
53469: PPUSH
53470: CALL_OW 255
53474: ST_TO_ADDR
// x := GetX ( tower ) ;
53475: LD_ADDR_VAR 0 9
53479: PUSH
53480: LD_VAR 0 1
53484: PPUSH
53485: CALL_OW 250
53489: ST_TO_ADDR
// y := GetY ( tower ) ;
53490: LD_ADDR_VAR 0 10
53494: PUSH
53495: LD_VAR 0 1
53499: PPUSH
53500: CALL_OW 251
53504: ST_TO_ADDR
// if not x or not y then
53505: LD_VAR 0 9
53509: NOT
53510: PUSH
53511: LD_VAR 0 10
53515: NOT
53516: OR
53517: IFFALSE 53521
// exit ;
53519: GO 54576
// weapon := 0 ;
53521: LD_ADDR_VAR 0 17
53525: PUSH
53526: LD_INT 0
53528: ST_TO_ADDR
// fac_list := [ ] ;
53529: LD_ADDR_VAR 0 16
53533: PUSH
53534: EMPTY
53535: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
53536: LD_ADDR_VAR 0 5
53540: PUSH
53541: LD_VAR 0 1
53545: PPUSH
53546: CALL_OW 274
53550: PPUSH
53551: CALL 51404 0 1
53555: PPUSH
53556: LD_INT 30
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PPUSH
53566: CALL_OW 72
53570: ST_TO_ADDR
// if not factories then
53571: LD_VAR 0 5
53575: NOT
53576: IFFALSE 53580
// exit ;
53578: GO 54576
// for i in factories do
53580: LD_ADDR_VAR 0 7
53584: PUSH
53585: LD_VAR 0 5
53589: PUSH
53590: FOR_IN
53591: IFFALSE 53616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53593: LD_ADDR_VAR 0 16
53597: PUSH
53598: LD_VAR 0 16
53602: PUSH
53603: LD_VAR 0 7
53607: PPUSH
53608: CALL_OW 478
53612: UNION
53613: ST_TO_ADDR
53614: GO 53590
53616: POP
53617: POP
// if not fac_list then
53618: LD_VAR 0 16
53622: NOT
53623: IFFALSE 53627
// exit ;
53625: GO 54576
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53627: LD_ADDR_VAR 0 4
53631: PUSH
53632: LD_INT 4
53634: PUSH
53635: LD_INT 5
53637: PUSH
53638: LD_INT 9
53640: PUSH
53641: LD_INT 10
53643: PUSH
53644: LD_INT 6
53646: PUSH
53647: LD_INT 7
53649: PUSH
53650: LD_INT 11
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 27
53664: PUSH
53665: LD_INT 28
53667: PUSH
53668: LD_INT 26
53670: PUSH
53671: LD_INT 30
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 43
53682: PUSH
53683: LD_INT 44
53685: PUSH
53686: LD_INT 46
53688: PUSH
53689: LD_INT 45
53691: PUSH
53692: LD_INT 47
53694: PUSH
53695: LD_INT 49
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: PUSH
53711: LD_VAR 0 11
53715: ARRAY
53716: ST_TO_ADDR
// for i in list do
53717: LD_ADDR_VAR 0 7
53721: PUSH
53722: LD_VAR 0 4
53726: PUSH
53727: FOR_IN
53728: IFFALSE 53761
// if not i in fac_list then
53730: LD_VAR 0 7
53734: PUSH
53735: LD_VAR 0 16
53739: IN
53740: NOT
53741: IFFALSE 53759
// list := list diff i ;
53743: LD_ADDR_VAR 0 4
53747: PUSH
53748: LD_VAR 0 4
53752: PUSH
53753: LD_VAR 0 7
53757: DIFF
53758: ST_TO_ADDR
53759: GO 53727
53761: POP
53762: POP
// if not list then
53763: LD_VAR 0 4
53767: NOT
53768: IFFALSE 53772
// exit ;
53770: GO 54576
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
53772: LD_VAR 0 11
53776: PUSH
53777: LD_INT 3
53779: EQUAL
53780: PUSH
53781: LD_INT 49
53783: PUSH
53784: LD_VAR 0 4
53788: IN
53789: AND
53790: PUSH
53791: LD_INT 31
53793: PPUSH
53794: LD_VAR 0 15
53798: PPUSH
53799: CALL_OW 321
53803: PUSH
53804: LD_INT 2
53806: EQUAL
53807: AND
53808: IFFALSE 53868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
53810: LD_INT 22
53812: PUSH
53813: LD_VAR 0 15
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 35
53824: PUSH
53825: LD_INT 49
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 91
53834: PUSH
53835: LD_VAR 0 1
53839: PUSH
53840: LD_INT 10
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: PPUSH
53853: CALL_OW 69
53857: NOT
53858: IFFALSE 53868
// weapon := ru_time_lapser ;
53860: LD_ADDR_VAR 0 17
53864: PUSH
53865: LD_INT 49
53867: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
53868: LD_VAR 0 11
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: IN
53883: PUSH
53884: LD_INT 11
53886: PUSH
53887: LD_VAR 0 4
53891: IN
53892: PUSH
53893: LD_INT 30
53895: PUSH
53896: LD_VAR 0 4
53900: IN
53901: OR
53902: AND
53903: PUSH
53904: LD_INT 6
53906: PPUSH
53907: LD_VAR 0 15
53911: PPUSH
53912: CALL_OW 321
53916: PUSH
53917: LD_INT 2
53919: EQUAL
53920: AND
53921: IFFALSE 54086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
53923: LD_INT 22
53925: PUSH
53926: LD_VAR 0 15
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 35
53940: PUSH
53941: LD_INT 11
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 35
53950: PUSH
53951: LD_INT 30
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 91
53965: PUSH
53966: LD_VAR 0 1
53970: PUSH
53971: LD_INT 18
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: PPUSH
53984: CALL_OW 69
53988: NOT
53989: PUSH
53990: LD_INT 22
53992: PUSH
53993: LD_VAR 0 15
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 30
54007: PUSH
54008: LD_INT 32
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 30
54017: PUSH
54018: LD_INT 33
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 91
54032: PUSH
54033: LD_VAR 0 1
54037: PUSH
54038: LD_INT 12
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: PUSH
54051: EMPTY
54052: LIST
54053: PPUSH
54054: CALL_OW 69
54058: PUSH
54059: LD_INT 2
54061: GREATER
54062: AND
54063: IFFALSE 54086
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54065: LD_ADDR_VAR 0 17
54069: PUSH
54070: LD_INT 11
54072: PUSH
54073: LD_INT 30
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_VAR 0 11
54084: ARRAY
54085: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54086: LD_VAR 0 17
54090: NOT
54091: PUSH
54092: LD_INT 40
54094: PPUSH
54095: LD_VAR 0 15
54099: PPUSH
54100: CALL_OW 321
54104: PUSH
54105: LD_INT 2
54107: EQUAL
54108: AND
54109: PUSH
54110: LD_INT 7
54112: PUSH
54113: LD_VAR 0 4
54117: IN
54118: PUSH
54119: LD_INT 28
54121: PUSH
54122: LD_VAR 0 4
54126: IN
54127: OR
54128: PUSH
54129: LD_INT 45
54131: PUSH
54132: LD_VAR 0 4
54136: IN
54137: OR
54138: AND
54139: IFFALSE 54393
// begin hex := GetHexInfo ( x , y ) ;
54141: LD_ADDR_VAR 0 3
54145: PUSH
54146: LD_VAR 0 9
54150: PPUSH
54151: LD_VAR 0 10
54155: PPUSH
54156: CALL_OW 546
54160: ST_TO_ADDR
// if hex [ 1 ] then
54161: LD_VAR 0 3
54165: PUSH
54166: LD_INT 1
54168: ARRAY
54169: IFFALSE 54173
// exit ;
54171: GO 54576
// height := hex [ 2 ] ;
54173: LD_ADDR_VAR 0 14
54177: PUSH
54178: LD_VAR 0 3
54182: PUSH
54183: LD_INT 2
54185: ARRAY
54186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54187: LD_ADDR_VAR 0 13
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 5
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: ST_TO_ADDR
// for i in tmp do
54210: LD_ADDR_VAR 0 7
54214: PUSH
54215: LD_VAR 0 13
54219: PUSH
54220: FOR_IN
54221: IFFALSE 54391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54223: LD_ADDR_VAR 0 8
54227: PUSH
54228: LD_VAR 0 9
54232: PPUSH
54233: LD_VAR 0 7
54237: PPUSH
54238: LD_INT 5
54240: PPUSH
54241: CALL_OW 272
54245: PUSH
54246: LD_VAR 0 10
54250: PPUSH
54251: LD_VAR 0 7
54255: PPUSH
54256: LD_INT 5
54258: PPUSH
54259: CALL_OW 273
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54268: LD_VAR 0 8
54272: PUSH
54273: LD_INT 1
54275: ARRAY
54276: PPUSH
54277: LD_VAR 0 8
54281: PUSH
54282: LD_INT 2
54284: ARRAY
54285: PPUSH
54286: CALL_OW 488
54290: IFFALSE 54389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54292: LD_ADDR_VAR 0 3
54296: PUSH
54297: LD_VAR 0 8
54301: PUSH
54302: LD_INT 1
54304: ARRAY
54305: PPUSH
54306: LD_VAR 0 8
54310: PUSH
54311: LD_INT 2
54313: ARRAY
54314: PPUSH
54315: CALL_OW 546
54319: ST_TO_ADDR
// if hex [ 1 ] then
54320: LD_VAR 0 3
54324: PUSH
54325: LD_INT 1
54327: ARRAY
54328: IFFALSE 54332
// continue ;
54330: GO 54220
// h := hex [ 2 ] ;
54332: LD_ADDR_VAR 0 12
54336: PUSH
54337: LD_VAR 0 3
54341: PUSH
54342: LD_INT 2
54344: ARRAY
54345: ST_TO_ADDR
// if h + 7 < height then
54346: LD_VAR 0 12
54350: PUSH
54351: LD_INT 7
54353: PLUS
54354: PUSH
54355: LD_VAR 0 14
54359: LESS
54360: IFFALSE 54389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54362: LD_ADDR_VAR 0 17
54366: PUSH
54367: LD_INT 7
54369: PUSH
54370: LD_INT 28
54372: PUSH
54373: LD_INT 45
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: LIST
54380: PUSH
54381: LD_VAR 0 11
54385: ARRAY
54386: ST_TO_ADDR
// break ;
54387: GO 54391
// end ; end ; end ;
54389: GO 54220
54391: POP
54392: POP
// end ; if not weapon then
54393: LD_VAR 0 17
54397: NOT
54398: IFFALSE 54458
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54400: LD_ADDR_VAR 0 4
54404: PUSH
54405: LD_VAR 0 4
54409: PUSH
54410: LD_INT 11
54412: PUSH
54413: LD_INT 30
54415: PUSH
54416: LD_INT 49
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: LIST
54423: DIFF
54424: ST_TO_ADDR
// if not list then
54425: LD_VAR 0 4
54429: NOT
54430: IFFALSE 54434
// exit ;
54432: GO 54576
// weapon := list [ rand ( 1 , list ) ] ;
54434: LD_ADDR_VAR 0 17
54438: PUSH
54439: LD_VAR 0 4
54443: PUSH
54444: LD_INT 1
54446: PPUSH
54447: LD_VAR 0 4
54451: PPUSH
54452: CALL_OW 12
54456: ARRAY
54457: ST_TO_ADDR
// end ; if weapon then
54458: LD_VAR 0 17
54462: IFFALSE 54576
// begin tmp := CostOfWeapon ( weapon ) ;
54464: LD_ADDR_VAR 0 13
54468: PUSH
54469: LD_VAR 0 17
54473: PPUSH
54474: CALL_OW 451
54478: ST_TO_ADDR
// j := GetBase ( tower ) ;
54479: LD_ADDR_VAR 0 8
54483: PUSH
54484: LD_VAR 0 1
54488: PPUSH
54489: CALL_OW 274
54493: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54494: LD_VAR 0 8
54498: PPUSH
54499: LD_INT 1
54501: PPUSH
54502: CALL_OW 275
54506: PUSH
54507: LD_VAR 0 13
54511: PUSH
54512: LD_INT 1
54514: ARRAY
54515: GREATEREQUAL
54516: PUSH
54517: LD_VAR 0 8
54521: PPUSH
54522: LD_INT 2
54524: PPUSH
54525: CALL_OW 275
54529: PUSH
54530: LD_VAR 0 13
54534: PUSH
54535: LD_INT 2
54537: ARRAY
54538: GREATEREQUAL
54539: AND
54540: PUSH
54541: LD_VAR 0 8
54545: PPUSH
54546: LD_INT 3
54548: PPUSH
54549: CALL_OW 275
54553: PUSH
54554: LD_VAR 0 13
54558: PUSH
54559: LD_INT 3
54561: ARRAY
54562: GREATEREQUAL
54563: AND
54564: IFFALSE 54576
// result := weapon ;
54566: LD_ADDR_VAR 0 2
54570: PUSH
54571: LD_VAR 0 17
54575: ST_TO_ADDR
// end ; end ;
54576: LD_VAR 0 2
54580: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54581: LD_INT 0
54583: PPUSH
54584: PPUSH
// result := true ;
54585: LD_ADDR_VAR 0 3
54589: PUSH
54590: LD_INT 1
54592: ST_TO_ADDR
// if array1 = array2 then
54593: LD_VAR 0 1
54597: PUSH
54598: LD_VAR 0 2
54602: EQUAL
54603: IFFALSE 54663
// begin for i = 1 to array1 do
54605: LD_ADDR_VAR 0 4
54609: PUSH
54610: DOUBLE
54611: LD_INT 1
54613: DEC
54614: ST_TO_ADDR
54615: LD_VAR 0 1
54619: PUSH
54620: FOR_TO
54621: IFFALSE 54659
// if array1 [ i ] <> array2 [ i ] then
54623: LD_VAR 0 1
54627: PUSH
54628: LD_VAR 0 4
54632: ARRAY
54633: PUSH
54634: LD_VAR 0 2
54638: PUSH
54639: LD_VAR 0 4
54643: ARRAY
54644: NONEQUAL
54645: IFFALSE 54657
// begin result := false ;
54647: LD_ADDR_VAR 0 3
54651: PUSH
54652: LD_INT 0
54654: ST_TO_ADDR
// break ;
54655: GO 54659
// end ;
54657: GO 54620
54659: POP
54660: POP
// end else
54661: GO 54671
// result := false ;
54663: LD_ADDR_VAR 0 3
54667: PUSH
54668: LD_INT 0
54670: ST_TO_ADDR
// end ;
54671: LD_VAR 0 3
54675: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
54676: LD_INT 0
54678: PPUSH
54679: PPUSH
54680: PPUSH
// pom := GetBase ( fac ) ;
54681: LD_ADDR_VAR 0 5
54685: PUSH
54686: LD_VAR 0 1
54690: PPUSH
54691: CALL_OW 274
54695: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
54696: LD_ADDR_VAR 0 4
54700: PUSH
54701: LD_VAR 0 2
54705: PUSH
54706: LD_INT 1
54708: ARRAY
54709: PPUSH
54710: LD_VAR 0 2
54714: PUSH
54715: LD_INT 2
54717: ARRAY
54718: PPUSH
54719: LD_VAR 0 2
54723: PUSH
54724: LD_INT 3
54726: ARRAY
54727: PPUSH
54728: LD_VAR 0 2
54732: PUSH
54733: LD_INT 4
54735: ARRAY
54736: PPUSH
54737: CALL_OW 449
54741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54742: LD_ADDR_VAR 0 3
54746: PUSH
54747: LD_VAR 0 5
54751: PPUSH
54752: LD_INT 1
54754: PPUSH
54755: CALL_OW 275
54759: PUSH
54760: LD_VAR 0 4
54764: PUSH
54765: LD_INT 1
54767: ARRAY
54768: GREATEREQUAL
54769: PUSH
54770: LD_VAR 0 5
54774: PPUSH
54775: LD_INT 2
54777: PPUSH
54778: CALL_OW 275
54782: PUSH
54783: LD_VAR 0 4
54787: PUSH
54788: LD_INT 2
54790: ARRAY
54791: GREATEREQUAL
54792: AND
54793: PUSH
54794: LD_VAR 0 5
54798: PPUSH
54799: LD_INT 3
54801: PPUSH
54802: CALL_OW 275
54806: PUSH
54807: LD_VAR 0 4
54811: PUSH
54812: LD_INT 3
54814: ARRAY
54815: GREATEREQUAL
54816: AND
54817: ST_TO_ADDR
// end ;
54818: LD_VAR 0 3
54822: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
// pom := GetBase ( building ) ;
54829: LD_ADDR_VAR 0 3
54833: PUSH
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 274
54843: ST_TO_ADDR
// if not pom then
54844: LD_VAR 0 3
54848: NOT
54849: IFFALSE 54853
// exit ;
54851: GO 55023
// btype := GetBType ( building ) ;
54853: LD_ADDR_VAR 0 5
54857: PUSH
54858: LD_VAR 0 1
54862: PPUSH
54863: CALL_OW 266
54867: ST_TO_ADDR
// if btype = b_armoury then
54868: LD_VAR 0 5
54872: PUSH
54873: LD_INT 4
54875: EQUAL
54876: IFFALSE 54886
// btype := b_barracks ;
54878: LD_ADDR_VAR 0 5
54882: PUSH
54883: LD_INT 5
54885: ST_TO_ADDR
// if btype = b_depot then
54886: LD_VAR 0 5
54890: PUSH
54891: LD_INT 0
54893: EQUAL
54894: IFFALSE 54904
// btype := b_warehouse ;
54896: LD_ADDR_VAR 0 5
54900: PUSH
54901: LD_INT 1
54903: ST_TO_ADDR
// if btype = b_workshop then
54904: LD_VAR 0 5
54908: PUSH
54909: LD_INT 2
54911: EQUAL
54912: IFFALSE 54922
// btype := b_factory ;
54914: LD_ADDR_VAR 0 5
54918: PUSH
54919: LD_INT 3
54921: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
54922: LD_ADDR_VAR 0 4
54926: PUSH
54927: LD_VAR 0 5
54931: PPUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: CALL_OW 248
54941: PPUSH
54942: CALL_OW 450
54946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
54947: LD_ADDR_VAR 0 2
54951: PUSH
54952: LD_VAR 0 3
54956: PPUSH
54957: LD_INT 1
54959: PPUSH
54960: CALL_OW 275
54964: PUSH
54965: LD_VAR 0 4
54969: PUSH
54970: LD_INT 1
54972: ARRAY
54973: GREATEREQUAL
54974: PUSH
54975: LD_VAR 0 3
54979: PPUSH
54980: LD_INT 2
54982: PPUSH
54983: CALL_OW 275
54987: PUSH
54988: LD_VAR 0 4
54992: PUSH
54993: LD_INT 2
54995: ARRAY
54996: GREATEREQUAL
54997: AND
54998: PUSH
54999: LD_VAR 0 3
55003: PPUSH
55004: LD_INT 3
55006: PPUSH
55007: CALL_OW 275
55011: PUSH
55012: LD_VAR 0 4
55016: PUSH
55017: LD_INT 3
55019: ARRAY
55020: GREATEREQUAL
55021: AND
55022: ST_TO_ADDR
// end ;
55023: LD_VAR 0 2
55027: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55028: LD_INT 0
55030: PPUSH
55031: PPUSH
55032: PPUSH
// pom := GetBase ( building ) ;
55033: LD_ADDR_VAR 0 4
55037: PUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: CALL_OW 274
55047: ST_TO_ADDR
// if not pom then
55048: LD_VAR 0 4
55052: NOT
55053: IFFALSE 55057
// exit ;
55055: GO 55158
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: LD_VAR 0 2
55066: PPUSH
55067: LD_VAR 0 1
55071: PPUSH
55072: CALL_OW 248
55076: PPUSH
55077: CALL_OW 450
55081: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55082: LD_ADDR_VAR 0 3
55086: PUSH
55087: LD_VAR 0 4
55091: PPUSH
55092: LD_INT 1
55094: PPUSH
55095: CALL_OW 275
55099: PUSH
55100: LD_VAR 0 5
55104: PUSH
55105: LD_INT 1
55107: ARRAY
55108: GREATEREQUAL
55109: PUSH
55110: LD_VAR 0 4
55114: PPUSH
55115: LD_INT 2
55117: PPUSH
55118: CALL_OW 275
55122: PUSH
55123: LD_VAR 0 5
55127: PUSH
55128: LD_INT 2
55130: ARRAY
55131: GREATEREQUAL
55132: AND
55133: PUSH
55134: LD_VAR 0 4
55138: PPUSH
55139: LD_INT 3
55141: PPUSH
55142: CALL_OW 275
55146: PUSH
55147: LD_VAR 0 5
55151: PUSH
55152: LD_INT 3
55154: ARRAY
55155: GREATEREQUAL
55156: AND
55157: ST_TO_ADDR
// end ;
55158: LD_VAR 0 3
55162: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
55163: LD_INT 0
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
// result := false ;
55175: LD_ADDR_VAR 0 6
55179: PUSH
55180: LD_INT 0
55182: ST_TO_ADDR
// if not base or not btype or not x or not y then
55183: LD_VAR 0 1
55187: NOT
55188: PUSH
55189: LD_VAR 0 2
55193: NOT
55194: OR
55195: PUSH
55196: LD_VAR 0 3
55200: NOT
55201: OR
55202: PUSH
55203: LD_VAR 0 4
55207: NOT
55208: OR
55209: IFFALSE 55213
// exit ;
55211: GO 55727
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
55213: LD_ADDR_VAR 0 12
55217: PUSH
55218: LD_VAR 0 2
55222: PPUSH
55223: LD_VAR 0 3
55227: PPUSH
55228: LD_VAR 0 4
55232: PPUSH
55233: LD_VAR 0 5
55237: PPUSH
55238: LD_VAR 0 1
55242: PUSH
55243: LD_INT 1
55245: ARRAY
55246: PPUSH
55247: CALL_OW 248
55251: PPUSH
55252: LD_INT 0
55254: PPUSH
55255: CALL 56556 0 6
55259: ST_TO_ADDR
// if not hexes then
55260: LD_VAR 0 12
55264: NOT
55265: IFFALSE 55269
// exit ;
55267: GO 55727
// for i = 1 to hexes do
55269: LD_ADDR_VAR 0 7
55273: PUSH
55274: DOUBLE
55275: LD_INT 1
55277: DEC
55278: ST_TO_ADDR
55279: LD_VAR 0 12
55283: PUSH
55284: FOR_TO
55285: IFFALSE 55725
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55287: LD_ADDR_VAR 0 11
55291: PUSH
55292: LD_VAR 0 12
55296: PUSH
55297: LD_VAR 0 7
55301: ARRAY
55302: PUSH
55303: LD_INT 1
55305: ARRAY
55306: PPUSH
55307: LD_VAR 0 12
55311: PUSH
55312: LD_VAR 0 7
55316: ARRAY
55317: PUSH
55318: LD_INT 2
55320: ARRAY
55321: PPUSH
55322: CALL_OW 428
55326: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
55327: LD_VAR 0 11
55331: NOT
55332: PUSH
55333: LD_VAR 0 11
55337: PPUSH
55338: CALL_OW 247
55342: PUSH
55343: LD_INT 3
55345: EQUAL
55346: OR
55347: IFFALSE 55351
// continue ;
55349: GO 55284
// result := true ;
55351: LD_ADDR_VAR 0 6
55355: PUSH
55356: LD_INT 1
55358: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55359: LD_ADDR_VAR 0 15
55363: PUSH
55364: LD_INT 22
55366: PUSH
55367: LD_VAR 0 11
55371: PPUSH
55372: CALL_OW 255
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 30
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 30
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PPUSH
55413: CALL_OW 69
55417: ST_TO_ADDR
// if dep then
55418: LD_VAR 0 15
55422: IFFALSE 55558
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
55424: LD_ADDR_VAR 0 14
55428: PUSH
55429: LD_VAR 0 15
55433: PUSH
55434: LD_INT 1
55436: ARRAY
55437: PPUSH
55438: CALL_OW 250
55442: PPUSH
55443: LD_VAR 0 15
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PPUSH
55452: CALL_OW 254
55456: PPUSH
55457: LD_INT 5
55459: PPUSH
55460: CALL_OW 272
55464: PUSH
55465: LD_VAR 0 15
55469: PUSH
55470: LD_INT 1
55472: ARRAY
55473: PPUSH
55474: CALL_OW 251
55478: PPUSH
55479: LD_VAR 0 15
55483: PUSH
55484: LD_INT 1
55486: ARRAY
55487: PPUSH
55488: CALL_OW 254
55492: PPUSH
55493: LD_INT 5
55495: PPUSH
55496: CALL_OW 273
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
55505: LD_VAR 0 14
55509: PUSH
55510: LD_INT 1
55512: ARRAY
55513: PPUSH
55514: LD_VAR 0 14
55518: PUSH
55519: LD_INT 2
55521: ARRAY
55522: PPUSH
55523: CALL_OW 488
55527: IFFALSE 55558
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
55529: LD_VAR 0 11
55533: PPUSH
55534: LD_VAR 0 14
55538: PUSH
55539: LD_INT 1
55541: ARRAY
55542: PPUSH
55543: LD_VAR 0 14
55547: PUSH
55548: LD_INT 2
55550: ARRAY
55551: PPUSH
55552: CALL_OW 111
// continue ;
55556: GO 55284
// end ; end ; r := GetDir ( tmp ) ;
55558: LD_ADDR_VAR 0 13
55562: PUSH
55563: LD_VAR 0 11
55567: PPUSH
55568: CALL_OW 254
55572: ST_TO_ADDR
// if r = 5 then
55573: LD_VAR 0 13
55577: PUSH
55578: LD_INT 5
55580: EQUAL
55581: IFFALSE 55591
// r := 0 ;
55583: LD_ADDR_VAR 0 13
55587: PUSH
55588: LD_INT 0
55590: ST_TO_ADDR
// for j = r to 5 do
55591: LD_ADDR_VAR 0 8
55595: PUSH
55596: DOUBLE
55597: LD_VAR 0 13
55601: DEC
55602: ST_TO_ADDR
55603: LD_INT 5
55605: PUSH
55606: FOR_TO
55607: IFFALSE 55721
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
55609: LD_ADDR_VAR 0 9
55613: PUSH
55614: LD_VAR 0 11
55618: PPUSH
55619: CALL_OW 250
55623: PPUSH
55624: LD_VAR 0 8
55628: PPUSH
55629: LD_INT 2
55631: PPUSH
55632: CALL_OW 272
55636: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
55637: LD_ADDR_VAR 0 10
55641: PUSH
55642: LD_VAR 0 11
55646: PPUSH
55647: CALL_OW 251
55651: PPUSH
55652: LD_VAR 0 8
55656: PPUSH
55657: LD_INT 2
55659: PPUSH
55660: CALL_OW 273
55664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
55665: LD_VAR 0 9
55669: PPUSH
55670: LD_VAR 0 10
55674: PPUSH
55675: CALL_OW 488
55679: PUSH
55680: LD_VAR 0 9
55684: PPUSH
55685: LD_VAR 0 10
55689: PPUSH
55690: CALL_OW 428
55694: NOT
55695: AND
55696: IFFALSE 55719
// begin ComMoveXY ( tmp , _x , _y ) ;
55698: LD_VAR 0 11
55702: PPUSH
55703: LD_VAR 0 9
55707: PPUSH
55708: LD_VAR 0 10
55712: PPUSH
55713: CALL_OW 111
// break ;
55717: GO 55721
// end ; end ;
55719: GO 55606
55721: POP
55722: POP
// end ;
55723: GO 55284
55725: POP
55726: POP
// end ;
55727: LD_VAR 0 6
55731: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
55732: LD_INT 0
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
55741: PPUSH
55742: PPUSH
// result := false ;
55743: LD_ADDR_VAR 0 6
55747: PUSH
55748: LD_INT 0
55750: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
55751: LD_VAR 0 1
55755: NOT
55756: PUSH
55757: LD_VAR 0 1
55761: PPUSH
55762: CALL_OW 266
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: IN
55777: NOT
55778: OR
55779: PUSH
55780: LD_VAR 0 2
55784: NOT
55785: OR
55786: PUSH
55787: LD_VAR 0 5
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: LD_INT 3
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: LD_INT 5
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: IN
55818: NOT
55819: OR
55820: PUSH
55821: LD_VAR 0 3
55825: PPUSH
55826: LD_VAR 0 4
55830: PPUSH
55831: CALL_OW 488
55835: NOT
55836: OR
55837: IFFALSE 55841
// exit ;
55839: GO 56551
// pom := GetBase ( bdepot ) ;
55841: LD_ADDR_VAR 0 9
55845: PUSH
55846: LD_VAR 0 1
55850: PPUSH
55851: CALL_OW 274
55855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
55856: LD_ADDR_VAR 0 10
55860: PUSH
55861: LD_VAR 0 2
55865: PPUSH
55866: LD_VAR 0 1
55870: PPUSH
55871: CALL_OW 248
55875: PPUSH
55876: CALL_OW 450
55880: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55881: LD_VAR 0 9
55885: PPUSH
55886: LD_INT 1
55888: PPUSH
55889: CALL_OW 275
55893: PUSH
55894: LD_VAR 0 10
55898: PUSH
55899: LD_INT 1
55901: ARRAY
55902: GREATEREQUAL
55903: PUSH
55904: LD_VAR 0 9
55908: PPUSH
55909: LD_INT 2
55911: PPUSH
55912: CALL_OW 275
55916: PUSH
55917: LD_VAR 0 10
55921: PUSH
55922: LD_INT 2
55924: ARRAY
55925: GREATEREQUAL
55926: AND
55927: PUSH
55928: LD_VAR 0 9
55932: PPUSH
55933: LD_INT 3
55935: PPUSH
55936: CALL_OW 275
55940: PUSH
55941: LD_VAR 0 10
55945: PUSH
55946: LD_INT 3
55948: ARRAY
55949: GREATEREQUAL
55950: AND
55951: NOT
55952: IFFALSE 55956
// exit ;
55954: GO 56551
// if GetBType ( bdepot ) = b_depot then
55956: LD_VAR 0 1
55960: PPUSH
55961: CALL_OW 266
55965: PUSH
55966: LD_INT 0
55968: EQUAL
55969: IFFALSE 55981
// dist := 28 else
55971: LD_ADDR_VAR 0 13
55975: PUSH
55976: LD_INT 28
55978: ST_TO_ADDR
55979: GO 55989
// dist := 36 ;
55981: LD_ADDR_VAR 0 13
55985: PUSH
55986: LD_INT 36
55988: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_VAR 0 3
55998: PPUSH
55999: LD_VAR 0 4
56003: PPUSH
56004: CALL_OW 297
56008: PUSH
56009: LD_VAR 0 13
56013: GREATER
56014: IFFALSE 56018
// exit ;
56016: GO 56551
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
56018: LD_ADDR_VAR 0 11
56022: PUSH
56023: LD_VAR 0 2
56027: PPUSH
56028: LD_VAR 0 3
56032: PPUSH
56033: LD_VAR 0 4
56037: PPUSH
56038: LD_VAR 0 5
56042: PPUSH
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 248
56052: PPUSH
56053: LD_INT 0
56055: PPUSH
56056: CALL 56556 0 6
56060: ST_TO_ADDR
// if not hexes then
56061: LD_VAR 0 11
56065: NOT
56066: IFFALSE 56070
// exit ;
56068: GO 56551
// hex := GetHexInfo ( x , y ) ;
56070: LD_ADDR_VAR 0 14
56074: PUSH
56075: LD_VAR 0 3
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: CALL_OW 546
56089: ST_TO_ADDR
// if hex [ 1 ] then
56090: LD_VAR 0 14
56094: PUSH
56095: LD_INT 1
56097: ARRAY
56098: IFFALSE 56102
// exit ;
56100: GO 56551
// height := hex [ 2 ] ;
56102: LD_ADDR_VAR 0 12
56106: PUSH
56107: LD_VAR 0 14
56111: PUSH
56112: LD_INT 2
56114: ARRAY
56115: ST_TO_ADDR
// for i = 1 to hexes do
56116: LD_ADDR_VAR 0 7
56120: PUSH
56121: DOUBLE
56122: LD_INT 1
56124: DEC
56125: ST_TO_ADDR
56126: LD_VAR 0 11
56130: PUSH
56131: FOR_TO
56132: IFFALSE 56460
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56134: LD_VAR 0 11
56138: PUSH
56139: LD_VAR 0 7
56143: ARRAY
56144: PUSH
56145: LD_INT 1
56147: ARRAY
56148: PPUSH
56149: LD_VAR 0 11
56153: PUSH
56154: LD_VAR 0 7
56158: ARRAY
56159: PUSH
56160: LD_INT 2
56162: ARRAY
56163: PPUSH
56164: CALL_OW 488
56168: NOT
56169: IFFALSE 56173
// continue ;
56171: GO 56131
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56173: LD_ADDR_VAR 0 8
56177: PUSH
56178: LD_VAR 0 11
56182: PUSH
56183: LD_VAR 0 7
56187: ARRAY
56188: PUSH
56189: LD_INT 1
56191: ARRAY
56192: PPUSH
56193: LD_VAR 0 11
56197: PUSH
56198: LD_VAR 0 7
56202: ARRAY
56203: PUSH
56204: LD_INT 2
56206: ARRAY
56207: PPUSH
56208: CALL_OW 546
56212: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
56213: LD_VAR 0 8
56217: PUSH
56218: LD_INT 1
56220: ARRAY
56221: PUSH
56222: LD_VAR 0 8
56226: PUSH
56227: LD_INT 2
56229: ARRAY
56230: PUSH
56231: LD_VAR 0 12
56235: PUSH
56236: LD_INT 2
56238: PLUS
56239: GREATER
56240: OR
56241: PUSH
56242: LD_VAR 0 8
56246: PUSH
56247: LD_INT 2
56249: ARRAY
56250: PUSH
56251: LD_VAR 0 12
56255: PUSH
56256: LD_INT 2
56258: MINUS
56259: LESS
56260: OR
56261: PUSH
56262: LD_VAR 0 8
56266: PUSH
56267: LD_INT 3
56269: ARRAY
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 8
56276: PUSH
56277: LD_INT 9
56279: PUSH
56280: LD_INT 10
56282: PUSH
56283: LD_INT 11
56285: PUSH
56286: LD_INT 12
56288: PUSH
56289: LD_INT 13
56291: PUSH
56292: LD_INT 16
56294: PUSH
56295: LD_INT 17
56297: PUSH
56298: LD_INT 18
56300: PUSH
56301: LD_INT 19
56303: PUSH
56304: LD_INT 20
56306: PUSH
56307: LD_INT 21
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: IN
56325: NOT
56326: OR
56327: PUSH
56328: LD_VAR 0 8
56332: PUSH
56333: LD_INT 5
56335: ARRAY
56336: NOT
56337: OR
56338: PUSH
56339: LD_VAR 0 8
56343: PUSH
56344: LD_INT 6
56346: ARRAY
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 7
56356: PUSH
56357: LD_INT 9
56359: PUSH
56360: LD_INT 10
56362: PUSH
56363: LD_INT 11
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: IN
56374: NOT
56375: OR
56376: PUSH
56377: LD_VAR 0 11
56381: PUSH
56382: LD_VAR 0 7
56386: ARRAY
56387: PUSH
56388: LD_INT 1
56390: ARRAY
56391: PPUSH
56392: LD_VAR 0 11
56396: PUSH
56397: LD_VAR 0 7
56401: ARRAY
56402: PUSH
56403: LD_INT 2
56405: ARRAY
56406: PPUSH
56407: CALL_OW 428
56411: PUSH
56412: LD_INT 0
56414: GREATER
56415: OR
56416: PUSH
56417: LD_VAR 0 11
56421: PUSH
56422: LD_VAR 0 7
56426: ARRAY
56427: PUSH
56428: LD_INT 1
56430: ARRAY
56431: PPUSH
56432: LD_VAR 0 11
56436: PUSH
56437: LD_VAR 0 7
56441: ARRAY
56442: PUSH
56443: LD_INT 2
56445: ARRAY
56446: PPUSH
56447: CALL_OW 351
56451: OR
56452: IFFALSE 56458
// exit ;
56454: POP
56455: POP
56456: GO 56551
// end ;
56458: GO 56131
56460: POP
56461: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
56462: LD_VAR 0 1
56466: PPUSH
56467: CALL_OW 255
56471: PPUSH
56472: LD_VAR 0 3
56476: PPUSH
56477: LD_VAR 0 4
56481: PPUSH
56482: LD_INT 20
56484: PPUSH
56485: CALL 49558 0 4
56489: PUSH
56490: LD_INT 4
56492: ARRAY
56493: IFFALSE 56497
// exit ;
56495: GO 56551
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
56497: LD_VAR 0 2
56501: PUSH
56502: LD_INT 29
56504: PUSH
56505: LD_INT 30
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: IN
56512: PUSH
56513: LD_VAR 0 3
56517: PPUSH
56518: LD_VAR 0 4
56522: PPUSH
56523: LD_VAR 0 1
56527: PPUSH
56528: CALL_OW 255
56532: PPUSH
56533: CALL_OW 440
56537: NOT
56538: AND
56539: IFFALSE 56543
// exit ;
56541: GO 56551
// result := true ;
56543: LD_ADDR_VAR 0 6
56547: PUSH
56548: LD_INT 1
56550: ST_TO_ADDR
// end ;
56551: LD_VAR 0 6
56555: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
56556: LD_INT 0
56558: PPUSH
56559: PPUSH
56560: PPUSH
56561: PPUSH
56562: PPUSH
56563: PPUSH
56564: PPUSH
56565: PPUSH
56566: PPUSH
56567: PPUSH
56568: PPUSH
56569: PPUSH
56570: PPUSH
56571: PPUSH
56572: PPUSH
56573: PPUSH
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
56580: PPUSH
56581: PPUSH
56582: PPUSH
56583: PPUSH
56584: PPUSH
56585: PPUSH
56586: PPUSH
56587: PPUSH
56588: PPUSH
56589: PPUSH
56590: PPUSH
56591: PPUSH
56592: PPUSH
56593: PPUSH
56594: PPUSH
56595: PPUSH
56596: PPUSH
56597: PPUSH
56598: PPUSH
56599: PPUSH
56600: PPUSH
56601: PPUSH
56602: PPUSH
56603: PPUSH
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
56610: PPUSH
56611: PPUSH
56612: PPUSH
56613: PPUSH
56614: PPUSH
56615: PPUSH
// result = [ ] ;
56616: LD_ADDR_VAR 0 7
56620: PUSH
56621: EMPTY
56622: ST_TO_ADDR
// temp_list = [ ] ;
56623: LD_ADDR_VAR 0 9
56627: PUSH
56628: EMPTY
56629: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
56630: LD_VAR 0 4
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 4
56649: PUSH
56650: LD_INT 5
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: IN
56661: NOT
56662: PUSH
56663: LD_VAR 0 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: IN
56678: PUSH
56679: LD_VAR 0 5
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: IN
56698: NOT
56699: AND
56700: OR
56701: IFFALSE 56705
// exit ;
56703: GO 75090
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
56705: LD_VAR 0 1
56709: PUSH
56710: LD_INT 6
56712: PUSH
56713: LD_INT 7
56715: PUSH
56716: LD_INT 8
56718: PUSH
56719: LD_INT 13
56721: PUSH
56722: LD_INT 12
56724: PUSH
56725: LD_INT 15
56727: PUSH
56728: LD_INT 11
56730: PUSH
56731: LD_INT 14
56733: PUSH
56734: LD_INT 10
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: IN
56748: IFFALSE 56758
// btype = b_lab ;
56750: LD_ADDR_VAR 0 1
56754: PUSH
56755: LD_INT 6
56757: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
56758: LD_VAR 0 6
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: LIST
56776: IN
56777: NOT
56778: PUSH
56779: LD_VAR 0 1
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: LD_INT 2
56792: PUSH
56793: LD_INT 3
56795: PUSH
56796: LD_INT 6
56798: PUSH
56799: LD_INT 36
56801: PUSH
56802: LD_INT 4
56804: PUSH
56805: LD_INT 5
56807: PUSH
56808: LD_INT 31
56810: PUSH
56811: LD_INT 32
56813: PUSH
56814: LD_INT 33
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: IN
56830: NOT
56831: PUSH
56832: LD_VAR 0 6
56836: PUSH
56837: LD_INT 1
56839: EQUAL
56840: AND
56841: OR
56842: PUSH
56843: LD_VAR 0 1
56847: PUSH
56848: LD_INT 2
56850: PUSH
56851: LD_INT 3
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: IN
56858: NOT
56859: PUSH
56860: LD_VAR 0 6
56864: PUSH
56865: LD_INT 2
56867: EQUAL
56868: AND
56869: OR
56870: IFFALSE 56880
// mode = 0 ;
56872: LD_ADDR_VAR 0 6
56876: PUSH
56877: LD_INT 0
56879: ST_TO_ADDR
// case mode of 0 :
56880: LD_VAR 0 6
56884: PUSH
56885: LD_INT 0
56887: DOUBLE
56888: EQUAL
56889: IFTRUE 56893
56891: GO 68346
56893: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56894: LD_ADDR_VAR 0 11
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 2
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 1
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 1
57060: NEG
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57087: LD_ADDR_VAR 0 12
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 0
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 1
57199: NEG
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: NEG
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 2
57221: NEG
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 2
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57283: LD_ADDR_VAR 0 13
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: LD_INT 0
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 0
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 2
57406: NEG
57407: PUSH
57408: LD_INT 1
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: NEG
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57482: LD_ADDR_VAR 0 14
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 0
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: LD_INT 1
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: NEG
57629: PUSH
57630: LD_INT 3
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 3
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 2
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57678: LD_ADDR_VAR 0 15
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 3
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57871: LD_ADDR_VAR 0 16
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 2
57964: PUSH
57965: LD_INT 1
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: LD_INT 2
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: LD_INT 2
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 2
58038: PUSH
58039: LD_INT 3
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58064: LD_ADDR_VAR 0 17
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 0
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 1
58145: NEG
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 2
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58294: LD_ADDR_VAR 0 18
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 0
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 0
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58524: LD_ADDR_VAR 0 19
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 0
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 0
58572: PUSH
58573: LD_INT 1
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 2
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 0
58617: PUSH
58618: LD_INT 2
58620: NEG
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 1
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 2
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 2
58723: NEG
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58754: LD_ADDR_VAR 0 20
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 1
58774: NEG
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 2
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 2
58850: NEG
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 1
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: LD_INT 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: LD_INT 1
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 2
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 2
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58984: LD_ADDR_VAR 0 21
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: LD_INT 1
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 1
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 1
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 2
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 2
59171: NEG
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 2
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59214: LD_ADDR_VAR 0 22
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: LD_INT 0
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 0
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: LD_INT 1
59321: NEG
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: LD_INT 0
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 2
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 2
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 2
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 2
59390: NEG
59391: PUSH
59392: LD_INT 0
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 2
59401: NEG
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59444: LD_ADDR_VAR 0 23
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: LD_INT 0
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 0
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 1
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 1
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 2
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 2
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 2
59620: NEG
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 2
59631: NEG
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 2
59643: NEG
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 2
59655: NEG
59656: PUSH
59657: LD_INT 3
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 3
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 2
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
59724: LD_ADDR_VAR 0 24
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 0
59817: PUSH
59818: LD_INT 2
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 2
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: LD_INT 2
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 1
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 2
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 2
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 2
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 2
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 3
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
60000: LD_ADDR_VAR 0 25
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: NEG
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 2
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: LD_INT 2
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: LD_INT 2
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: NEG
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 2
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60274: LD_ADDR_VAR 0 26
60278: PUSH
60279: LD_INT 0
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: LD_INT 0
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 1
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 2
60370: NEG
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 1
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 2
60409: PUSH
60410: LD_INT 2
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: NEG
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: PUSH
60486: LD_INT 3
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 1
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60550: LD_ADDR_VAR 0 27
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 0
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: LD_INT 0
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: PUSH
60686: LD_INT 2
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 2
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 2
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 2
60726: NEG
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 1
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: LD_INT 1
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60830: LD_ADDR_VAR 0 28
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: PUSH
60859: LD_INT 0
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 1
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: PUSH
60946: LD_INT 0
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 2
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: NEG
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 2
61041: NEG
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61112: LD_ADDR_VAR 0 29
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 1
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 2
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: PUSH
61255: LD_INT 0
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: LD_INT 1
61282: NEG
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 2
61290: NEG
61291: PUSH
61292: LD_INT 2
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 2
61302: NEG
61303: PUSH
61304: LD_INT 3
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: NEG
61346: PUSH
61347: LD_INT 2
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61391: LD_ADDR_VAR 0 30
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 1
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 1
61449: NEG
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 2
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: LD_INT 2
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: LD_INT 2
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 1
61546: NEG
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: LD_INT 0
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: NEG
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 3
61634: NEG
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61669: LD_ADDR_VAR 0 31
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: LD_INT 0
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 2
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 2
61846: NEG
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 3
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: NEG
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 3
61912: NEG
61913: PUSH
61914: LD_INT 2
61916: NEG
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61947: LD_ADDR_VAR 0 32
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 2
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 2
62124: NEG
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: LD_INT 3
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 3
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 1
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 3
62190: NEG
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62225: LD_ADDR_VAR 0 33
62229: PUSH
62230: LD_INT 0
62232: PUSH
62233: LD_INT 0
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 0
62242: PUSH
62243: LD_INT 1
62245: NEG
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 1
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 0
62273: PUSH
62274: LD_INT 1
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 2
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 2
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 3
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: LD_INT 3
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 1
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 3
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62504: LD_ADDR_VAR 0 34
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: PUSH
62530: LD_INT 1
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: LD_INT 1
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: NEG
62574: PUSH
62575: LD_INT 1
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 2
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 0
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 1
62611: NEG
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: LD_INT 1
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: LD_INT 2
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: LD_INT 1
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: NEG
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: NEG
62684: PUSH
62685: LD_INT 2
62687: NEG
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 3
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: NEG
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: PUSH
62729: LD_INT 3
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 3
62749: NEG
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62784: LD_ADDR_VAR 0 35
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: EMPTY
62796: LIST
62797: LIST
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 1
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 1
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 0
62832: PUSH
62833: LD_INT 1
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 1
62842: NEG
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 1
62853: NEG
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 2
62865: PUSH
62866: LD_INT 1
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62896: LD_ADDR_VAR 0 36
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 1
62916: NEG
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: LD_INT 1
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: LD_INT 1
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: LD_INT 1
62954: NEG
62955: PUSH
62956: LD_INT 0
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 2
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 1
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63008: LD_ADDR_VAR 0 37
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 1
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 1
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 1
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: PUSH
63098: LD_INT 1
63100: NEG
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63120: LD_ADDR_VAR 0 38
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: LD_INT 1
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: LD_INT 1
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: NEG
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 1
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 2
63211: NEG
63212: PUSH
63213: LD_INT 1
63215: NEG
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
63232: LD_ADDR_VAR 0 39
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 1
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: NEG
63291: PUSH
63292: LD_INT 0
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: NEG
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: LD_INT 2
63317: NEG
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PUSH
63323: LD_INT 1
63325: PUSH
63326: LD_INT 2
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
63344: LD_ADDR_VAR 0 40
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 0
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 0
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: PUSH
63380: LD_INT 1
63382: PUSH
63383: LD_INT 1
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: NEG
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63456: LD_ADDR_VAR 0 41
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 1
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: LD_INT 0
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: LD_INT 1
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: LD_INT 1
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: LD_INT 0
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 1
63525: NEG
63526: PUSH
63527: LD_INT 1
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 2
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 2
63560: PUSH
63561: LD_INT 0
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: LD_INT 1
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 1
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: NEG
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: NEG
63623: PUSH
63624: LD_INT 1
63626: NEG
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 2
63634: NEG
63635: PUSH
63636: LD_INT 2
63638: NEG
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 2
63646: NEG
63647: PUSH
63648: LD_INT 3
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 2
63658: PUSH
63659: LD_INT 1
63661: NEG
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 3
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 3
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: PUSH
63700: LD_INT 3
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 3
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 3
63730: NEG
63731: PUSH
63732: LD_INT 0
63734: PUSH
63735: EMPTY
63736: LIST
63737: LIST
63738: PUSH
63739: LD_INT 3
63741: NEG
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 3
63753: NEG
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 3
63765: NEG
63766: PUSH
63767: LD_INT 3
63769: NEG
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: LIST
63804: LIST
63805: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63806: LD_ADDR_VAR 0 42
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: LD_INT 0
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 0
63854: PUSH
63855: LD_INT 1
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: NEG
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 1
63887: NEG
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 2
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 2
63931: PUSH
63932: LD_INT 2
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 0
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 1
63961: NEG
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: NEG
63985: PUSH
63986: LD_INT 2
63988: NEG
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 3
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: LD_INT 3
64023: NEG
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 3
64042: PUSH
64043: LD_INT 2
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: LD_INT 3
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: PUSH
64063: LD_INT 3
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 1
64072: PUSH
64073: LD_INT 3
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 0
64082: PUSH
64083: LD_INT 3
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: NEG
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 3
64103: NEG
64104: PUSH
64105: LD_INT 2
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 3
64115: NEG
64116: PUSH
64117: LD_INT 3
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64156: LD_ADDR_VAR 0 43
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 1
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: NEG
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: NEG
64238: PUSH
64239: LD_INT 2
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 2
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 2
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: NEG
64323: PUSH
64324: LD_INT 0
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 3
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: PUSH
64380: LD_INT 1
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 3
64390: PUSH
64391: LD_INT 0
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 3
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 1
64410: PUSH
64411: LD_INT 3
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 3
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: NEG
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 3
64452: NEG
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 3
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64504: LD_ADDR_VAR 0 44
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 1
64524: NEG
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: PUSH
64530: LD_INT 1
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 1
64562: NEG
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 1
64573: NEG
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: LD_INT 2
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 1
64597: PUSH
64598: LD_INT 1
64600: NEG
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: PUSH
64639: LD_INT 2
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 1
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 2
64659: NEG
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: LD_INT 1
64674: NEG
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 2
64686: NEG
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 2
64694: NEG
64695: PUSH
64696: LD_INT 3
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 2
64706: PUSH
64707: LD_INT 1
64709: NEG
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 3
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 3
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: LD_INT 3
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: LD_INT 3
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 3
64789: NEG
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 3
64801: NEG
64802: PUSH
64803: LD_INT 2
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 3
64813: NEG
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64854: LD_ADDR_VAR 0 45
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 0
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: LD_INT 0
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 1
64923: NEG
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: LD_INT 2
64939: NEG
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 0
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 1
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 2
64969: PUSH
64970: LD_INT 1
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 2
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: LD_INT 2
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: PUSH
65007: LD_INT 1
65009: NEG
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 2
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 2
65032: NEG
65033: PUSH
65034: LD_INT 2
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: LD_INT 3
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 1
65056: NEG
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: LD_INT 3
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: NEG
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65204: LD_ADDR_VAR 0 46
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: LD_INT 1
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 1
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: NEG
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: PUSH
65271: LD_INT 1
65273: NEG
65274: PUSH
65275: LD_INT 1
65277: NEG
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: NEG
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: LD_INT 2
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 1
65311: NEG
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 2
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 2
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 0
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 2
65370: NEG
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 2
65381: NEG
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: NEG
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 0
65405: PUSH
65406: LD_INT 3
65408: NEG
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: LD_INT 3
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 3
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: LD_INT 1
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 3
65500: NEG
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65552: LD_ADDR_VAR 0 47
65556: PUSH
65557: LD_INT 0
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 1
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: PUSH
65591: LD_INT 1
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 0
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: LD_INT 0
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 1
65621: NEG
65622: PUSH
65623: LD_INT 1
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 2
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: LD_INT 2
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
65703: LD_ADDR_VAR 0 48
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: PUSH
65718: LD_INT 0
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: LD_INT 0
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 1
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: LD_INT 1
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: NEG
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: NEG
65785: PUSH
65786: LD_INT 2
65788: NEG
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 0
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 1
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: LD_INT 0
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: LD_INT 1
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
65850: LD_ADDR_VAR 0 49
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: LD_INT 1
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: LD_INT 0
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 1
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: LD_INT 1
65923: NEG
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: PUSH
65940: LD_INT 2
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: PUSH
65953: LD_INT 1
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: LD_INT 2
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 1
65972: PUSH
65973: LD_INT 2
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65994: LD_ADDR_VAR 0 50
65998: PUSH
65999: LD_INT 0
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: LD_INT 1
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 1
66032: PUSH
66033: LD_INT 1
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: LD_INT 0
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: NEG
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 2
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: LD_INT 2
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: PUSH
66096: LD_INT 2
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: NEG
66116: PUSH
66117: LD_INT 1
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66138: LD_ADDR_VAR 0 51
66142: PUSH
66143: LD_INT 0
66145: PUSH
66146: LD_INT 0
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: LD_INT 1
66158: NEG
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 1
66176: PUSH
66177: LD_INT 1
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: LD_INT 1
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 0
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: LD_INT 1
66211: NEG
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 2
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 1
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 2
66250: NEG
66251: PUSH
66252: LD_INT 0
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: NEG
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: LIST
66277: LIST
66278: LIST
66279: LIST
66280: LIST
66281: LIST
66282: LIST
66283: LIST
66284: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66285: LD_ADDR_VAR 0 52
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 1
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 1
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 0
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 1
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 1
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 1
66382: PUSH
66383: EMPTY
66384: LIST
66385: LIST
66386: PUSH
66387: LD_INT 2
66389: NEG
66390: PUSH
66391: LD_INT 0
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 2
66400: NEG
66401: PUSH
66402: LD_INT 1
66404: NEG
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 2
66412: NEG
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66436: LD_ADDR_VAR 0 53
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 1
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 1
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: PUSH
66475: LD_INT 1
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 1
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 1
66494: NEG
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 2
66521: NEG
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: LD_INT 0
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: PUSH
66552: LD_INT 0
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 2
66571: PUSH
66572: LD_INT 2
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 1
66581: PUSH
66582: LD_INT 2
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: LD_INT 2
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: LD_INT 1
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: LD_INT 0
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 1
66627: NEG
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 2
66635: NEG
66636: PUSH
66637: LD_INT 2
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66666: LD_ADDR_VAR 0 54
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: LD_INT 1
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 0
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: LD_INT 0
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: LD_INT 1
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: LD_INT 2
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 1
66831: NEG
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PUSH
66863: LD_INT 2
66865: NEG
66866: PUSH
66867: LD_INT 2
66869: NEG
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66896: LD_ADDR_VAR 0 55
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 0
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 0
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: EMPTY
66939: LIST
66940: LIST
66941: PUSH
66942: LD_INT 0
66944: PUSH
66945: LD_INT 1
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 2
66981: NEG
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: LD_INT 0
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 2
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 2
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 2
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 2
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: NEG
67062: PUSH
67063: LD_INT 1
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: PUSH
67093: LD_INT 2
67095: NEG
67096: PUSH
67097: LD_INT 2
67099: NEG
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67126: LD_ADDR_VAR 0 56
67130: PUSH
67131: LD_INT 0
67133: PUSH
67134: LD_INT 0
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 0
67143: PUSH
67144: LD_INT 1
67146: NEG
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 1
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 1
67164: PUSH
67165: LD_INT 1
67167: PUSH
67168: EMPTY
67169: LIST
67170: LIST
67171: PUSH
67172: LD_INT 0
67174: PUSH
67175: LD_INT 1
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: LD_INT 0
67188: PUSH
67189: EMPTY
67190: LIST
67191: LIST
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: LD_INT 1
67199: NEG
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: LD_INT 2
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 2
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: LD_INT 0
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: LD_INT 1
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 2
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 2
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 2
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 1
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: LD_INT 2
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67356: LD_ADDR_VAR 0 57
67360: PUSH
67361: LD_INT 0
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: EMPTY
67368: LIST
67369: LIST
67370: PUSH
67371: LD_INT 0
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 0
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 1
67394: PUSH
67395: LD_INT 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: LD_INT 1
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: LD_INT 1
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 2
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: LD_INT 0
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: LD_INT 1
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67586: LD_ADDR_VAR 0 58
67590: PUSH
67591: LD_INT 0
67593: PUSH
67594: LD_INT 0
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 1
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 1
67644: NEG
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 1
67655: NEG
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 1
67667: NEG
67668: PUSH
67669: LD_INT 2
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 0
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 1
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 2
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 2
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_INT 2
67721: PUSH
67722: LD_INT 2
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: LD_INT 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 0
67741: PUSH
67742: LD_INT 2
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: PUSH
67753: LD_INT 1
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 2
67785: NEG
67786: PUSH
67787: LD_INT 2
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67816: LD_ADDR_VAR 0 59
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 1
67836: NEG
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 1
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: LD_INT 1
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 1
67874: NEG
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: NEG
67886: PUSH
67887: LD_INT 1
67889: NEG
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67904: LD_ADDR_VAR 0 60
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: LD_INT 0
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 1
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 0
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 1
67962: NEG
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 1
67973: NEG
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67992: LD_ADDR_VAR 0 61
67996: PUSH
67997: LD_INT 0
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: EMPTY
68004: LIST
68005: LIST
68006: PUSH
68007: LD_INT 0
68009: PUSH
68010: LD_INT 1
68012: NEG
68013: PUSH
68014: EMPTY
68015: LIST
68016: LIST
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: LD_INT 0
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 1
68050: NEG
68051: PUSH
68052: LD_INT 0
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: LD_INT 1
68065: NEG
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: EMPTY
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: LIST
68078: LIST
68079: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68080: LD_ADDR_VAR 0 62
68084: PUSH
68085: LD_INT 0
68087: PUSH
68088: LD_INT 0
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 1
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 0
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 1
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: NEG
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 1
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68168: LD_ADDR_VAR 0 63
68172: PUSH
68173: LD_INT 0
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: LD_INT 1
68188: NEG
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: LD_INT 0
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 1
68226: NEG
68227: PUSH
68228: LD_INT 0
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 1
68237: NEG
68238: PUSH
68239: LD_INT 1
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68256: LD_ADDR_VAR 0 64
68260: PUSH
68261: LD_INT 0
68263: PUSH
68264: LD_INT 0
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 0
68273: PUSH
68274: LD_INT 1
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 1
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 0
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 1
68314: NEG
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: LD_INT 1
68325: NEG
68326: PUSH
68327: LD_INT 1
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: ST_TO_ADDR
// end ; 1 :
68344: GO 74241
68346: LD_INT 1
68348: DOUBLE
68349: EQUAL
68350: IFTRUE 68354
68352: GO 70977
68354: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68355: LD_ADDR_VAR 0 11
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: LD_INT 3
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 1
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: LIST
68398: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68399: LD_ADDR_VAR 0 12
68403: PUSH
68404: LD_INT 2
68406: PUSH
68407: LD_INT 1
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 3
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 3
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: LIST
68439: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68440: LD_ADDR_VAR 0 13
68444: PUSH
68445: LD_INT 3
68447: PUSH
68448: LD_INT 2
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 3
68457: PUSH
68458: LD_INT 3
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: PUSH
68465: LD_INT 2
68467: PUSH
68468: LD_INT 3
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: LIST
68479: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68480: LD_ADDR_VAR 0 14
68484: PUSH
68485: LD_INT 1
68487: PUSH
68488: LD_INT 3
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: LD_INT 3
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 1
68507: NEG
68508: PUSH
68509: LD_INT 2
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: LIST
68520: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68521: LD_ADDR_VAR 0 15
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 3
68539: NEG
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 3
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: LIST
68564: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68565: LD_ADDR_VAR 0 16
68569: PUSH
68570: LD_INT 2
68572: NEG
68573: PUSH
68574: LD_INT 3
68576: NEG
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 3
68584: NEG
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 3
68596: NEG
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: LIST
68610: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68611: LD_ADDR_VAR 0 17
68615: PUSH
68616: LD_INT 1
68618: NEG
68619: PUSH
68620: LD_INT 3
68622: NEG
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: LD_INT 3
68633: NEG
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: PUSH
68642: LD_INT 2
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68655: LD_ADDR_VAR 0 18
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: LD_INT 1
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 3
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: LIST
68695: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68696: LD_ADDR_VAR 0 19
68700: PUSH
68701: LD_INT 3
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 3
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: LD_INT 3
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: EMPTY
68732: LIST
68733: LIST
68734: LIST
68735: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68736: LD_ADDR_VAR 0 20
68740: PUSH
68741: LD_INT 1
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 3
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 1
68763: NEG
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: LIST
68776: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68777: LD_ADDR_VAR 0 21
68781: PUSH
68782: LD_INT 2
68784: NEG
68785: PUSH
68786: LD_INT 1
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 3
68795: NEG
68796: PUSH
68797: LD_INT 0
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 3
68806: NEG
68807: PUSH
68808: LD_INT 1
68810: NEG
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: LIST
68820: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68821: LD_ADDR_VAR 0 22
68825: PUSH
68826: LD_INT 2
68828: NEG
68829: PUSH
68830: LD_INT 3
68832: NEG
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 3
68840: NEG
68841: PUSH
68842: LD_INT 2
68844: NEG
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 3
68852: NEG
68853: PUSH
68854: LD_INT 3
68856: NEG
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: LIST
68866: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
68867: LD_ADDR_VAR 0 23
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 3
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: LD_INT 4
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: PUSH
68898: LD_INT 3
68900: NEG
68901: PUSH
68902: EMPTY
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68911: LD_ADDR_VAR 0 24
68915: PUSH
68916: LD_INT 3
68918: PUSH
68919: LD_INT 0
68921: PUSH
68922: EMPTY
68923: LIST
68924: LIST
68925: PUSH
68926: LD_INT 3
68928: PUSH
68929: LD_INT 1
68931: NEG
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: PUSH
68937: LD_INT 4
68939: PUSH
68940: LD_INT 1
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: LIST
68951: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68952: LD_ADDR_VAR 0 25
68956: PUSH
68957: LD_INT 3
68959: PUSH
68960: LD_INT 3
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 4
68969: PUSH
68970: LD_INT 3
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 3
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: LIST
68991: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68992: LD_ADDR_VAR 0 26
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: LD_INT 3
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: PUSH
69010: LD_INT 4
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 1
69019: NEG
69020: PUSH
69021: LD_INT 3
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: LIST
69032: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
69033: LD_ADDR_VAR 0 27
69037: PUSH
69038: LD_INT 3
69040: NEG
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 3
69051: NEG
69052: PUSH
69053: LD_INT 1
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 4
69062: NEG
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: LIST
69076: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
69077: LD_ADDR_VAR 0 28
69081: PUSH
69082: LD_INT 3
69084: NEG
69085: PUSH
69086: LD_INT 3
69088: NEG
69089: PUSH
69090: EMPTY
69091: LIST
69092: LIST
69093: PUSH
69094: LD_INT 3
69096: NEG
69097: PUSH
69098: LD_INT 4
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 4
69108: NEG
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: LIST
69122: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
69123: LD_ADDR_VAR 0 29
69127: PUSH
69128: LD_INT 1
69130: NEG
69131: PUSH
69132: LD_INT 3
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 1
69153: PUSH
69154: LD_INT 2
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: LD_INT 4
69168: NEG
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 0
69176: PUSH
69177: LD_INT 4
69179: NEG
69180: PUSH
69181: EMPTY
69182: LIST
69183: LIST
69184: PUSH
69185: LD_INT 1
69187: PUSH
69188: LD_INT 3
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 1
69198: NEG
69199: PUSH
69200: LD_INT 5
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: LD_INT 5
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: LD_INT 4
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 1
69232: NEG
69233: PUSH
69234: LD_INT 6
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 6
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 1
69255: PUSH
69256: LD_INT 5
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
69278: LD_ADDR_VAR 0 30
69282: PUSH
69283: LD_INT 2
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 3
69306: PUSH
69307: LD_INT 1
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 3
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 4
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 4
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 4
69347: PUSH
69348: LD_INT 1
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 5
69358: PUSH
69359: LD_INT 0
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 5
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 5
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 6
69389: PUSH
69390: LD_INT 0
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 6
69399: PUSH
69400: LD_INT 1
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
69421: LD_ADDR_VAR 0 31
69425: PUSH
69426: LD_INT 3
69428: PUSH
69429: LD_INT 2
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 3
69438: PUSH
69439: LD_INT 3
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: LD_INT 3
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: LD_INT 3
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 4
69468: PUSH
69469: LD_INT 4
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 3
69478: PUSH
69479: LD_INT 4
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 5
69488: PUSH
69489: LD_INT 4
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 5
69498: PUSH
69499: LD_INT 5
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 4
69508: PUSH
69509: LD_INT 5
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: PUSH
69516: LD_INT 6
69518: PUSH
69519: LD_INT 5
69521: PUSH
69522: EMPTY
69523: LIST
69524: LIST
69525: PUSH
69526: LD_INT 6
69528: PUSH
69529: LD_INT 6
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 5
69538: PUSH
69539: LD_INT 6
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
69560: LD_ADDR_VAR 0 32
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 3
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 3
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 2
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: PUSH
69599: LD_INT 4
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: LD_INT 4
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 1
69629: PUSH
69630: LD_INT 5
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 5
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 1
69649: NEG
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: PUSH
69661: LD_INT 6
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: LD_INT 6
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 1
69680: NEG
69681: PUSH
69682: LD_INT 5
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: LIST
69699: LIST
69700: LIST
69701: LIST
69702: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
69703: LD_ADDR_VAR 0 33
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 1
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 3
69732: NEG
69733: PUSH
69734: LD_INT 1
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: LD_INT 1
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 4
69755: NEG
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: PUSH
69764: LD_INT 4
69766: NEG
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 4
69778: NEG
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 5
69789: NEG
69790: PUSH
69791: LD_INT 0
69793: PUSH
69794: EMPTY
69795: LIST
69796: LIST
69797: PUSH
69798: LD_INT 5
69800: NEG
69801: PUSH
69802: LD_INT 1
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 5
69812: NEG
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 6
69823: NEG
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 6
69834: NEG
69835: PUSH
69836: LD_INT 1
69838: NEG
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
69858: LD_ADDR_VAR 0 34
69862: PUSH
69863: LD_INT 2
69865: NEG
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 3
69877: NEG
69878: PUSH
69879: LD_INT 2
69881: NEG
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 3
69889: NEG
69890: PUSH
69891: LD_INT 3
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 3
69901: NEG
69902: PUSH
69903: LD_INT 4
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 4
69913: NEG
69914: PUSH
69915: LD_INT 3
69917: NEG
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: LD_INT 4
69929: NEG
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 4
69937: NEG
69938: PUSH
69939: LD_INT 5
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 5
69949: NEG
69950: PUSH
69951: LD_INT 4
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 5
69961: NEG
69962: PUSH
69963: LD_INT 5
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 5
69973: NEG
69974: PUSH
69975: LD_INT 6
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 6
69985: NEG
69986: PUSH
69987: LD_INT 5
69989: NEG
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 6
69997: NEG
69998: PUSH
69999: LD_INT 6
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: LIST
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: LIST
70019: LIST
70020: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
70021: LD_ADDR_VAR 0 41
70025: PUSH
70026: LD_INT 0
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 1
70039: NEG
70040: PUSH
70041: LD_INT 3
70043: NEG
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 1
70051: PUSH
70052: LD_INT 2
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
70065: LD_ADDR_VAR 0 42
70069: PUSH
70070: LD_INT 2
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: LIST
70105: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
70106: LD_ADDR_VAR 0 43
70110: PUSH
70111: LD_INT 2
70113: PUSH
70114: LD_INT 2
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: LD_INT 2
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 2
70133: PUSH
70134: LD_INT 3
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: LIST
70145: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
70146: LD_ADDR_VAR 0 44
70150: PUSH
70151: LD_INT 0
70153: PUSH
70154: LD_INT 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: PUSH
70164: LD_INT 3
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 1
70173: NEG
70174: PUSH
70175: LD_INT 2
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70187: LD_ADDR_VAR 0 45
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: LD_INT 0
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 2
70205: NEG
70206: PUSH
70207: LD_INT 1
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 3
70216: NEG
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: LIST
70230: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
70231: LD_ADDR_VAR 0 46
70235: PUSH
70236: LD_INT 2
70238: NEG
70239: PUSH
70240: LD_INT 2
70242: NEG
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: PUSH
70248: LD_INT 2
70250: NEG
70251: PUSH
70252: LD_INT 3
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: LD_INT 2
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
70277: LD_ADDR_VAR 0 47
70281: PUSH
70282: LD_INT 2
70284: NEG
70285: PUSH
70286: LD_INT 3
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 1
70296: NEG
70297: PUSH
70298: LD_INT 3
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
70310: LD_ADDR_VAR 0 48
70314: PUSH
70315: LD_INT 1
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: LD_INT 1
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
70341: LD_ADDR_VAR 0 49
70345: PUSH
70346: LD_INT 3
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: LD_INT 2
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
70370: LD_ADDR_VAR 0 50
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 3
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
70399: LD_ADDR_VAR 0 51
70403: PUSH
70404: LD_INT 1
70406: NEG
70407: PUSH
70408: LD_INT 2
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 2
70417: NEG
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
70430: LD_ADDR_VAR 0 52
70434: PUSH
70435: LD_INT 3
70437: NEG
70438: PUSH
70439: LD_INT 1
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: NEG
70450: PUSH
70451: LD_INT 2
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70463: LD_ADDR_VAR 0 53
70467: PUSH
70468: LD_INT 1
70470: NEG
70471: PUSH
70472: LD_INT 3
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: LD_INT 3
70485: NEG
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 1
70493: PUSH
70494: LD_INT 2
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70507: LD_ADDR_VAR 0 54
70511: PUSH
70512: LD_INT 2
70514: PUSH
70515: LD_INT 1
70517: NEG
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 3
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 3
70535: PUSH
70536: LD_INT 1
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: LIST
70547: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70548: LD_ADDR_VAR 0 55
70552: PUSH
70553: LD_INT 3
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 2
70575: PUSH
70576: LD_INT 3
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: LIST
70587: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70588: LD_ADDR_VAR 0 56
70592: PUSH
70593: LD_INT 1
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 0
70605: PUSH
70606: LD_INT 3
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: LD_INT 2
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: LIST
70628: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70629: LD_ADDR_VAR 0 57
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: LD_INT 1
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 3
70647: NEG
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 3
70658: NEG
70659: PUSH
70660: LD_INT 1
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: LIST
70672: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70673: LD_ADDR_VAR 0 58
70677: PUSH
70678: LD_INT 2
70680: NEG
70681: PUSH
70682: LD_INT 3
70684: NEG
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: LD_INT 3
70692: NEG
70693: PUSH
70694: LD_INT 2
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 3
70704: NEG
70705: PUSH
70706: LD_INT 3
70708: NEG
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: LIST
70718: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
70719: LD_ADDR_VAR 0 59
70723: PUSH
70724: LD_INT 1
70726: NEG
70727: PUSH
70728: LD_INT 2
70730: NEG
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: LD_INT 2
70741: NEG
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70763: LD_ADDR_VAR 0 60
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: LD_INT 1
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: LD_INT 1
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: LIST
70803: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70804: LD_ADDR_VAR 0 61
70808: PUSH
70809: LD_INT 2
70811: PUSH
70812: LD_INT 1
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 2
70821: PUSH
70822: LD_INT 2
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 1
70831: PUSH
70832: LD_INT 2
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: LIST
70843: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70844: LD_ADDR_VAR 0 62
70848: PUSH
70849: LD_INT 1
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 0
70861: PUSH
70862: LD_INT 2
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: LD_INT 1
70871: NEG
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70885: LD_ADDR_VAR 0 63
70889: PUSH
70890: LD_INT 1
70892: NEG
70893: PUSH
70894: LD_INT 1
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: NEG
70904: PUSH
70905: LD_INT 0
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: NEG
70915: PUSH
70916: LD_INT 1
70918: NEG
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70929: LD_ADDR_VAR 0 64
70933: PUSH
70934: LD_INT 1
70936: NEG
70937: PUSH
70938: LD_INT 2
70940: NEG
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 2
70948: NEG
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 2
70960: NEG
70961: PUSH
70962: LD_INT 2
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// end ; 2 :
70975: GO 74241
70977: LD_INT 2
70979: DOUBLE
70980: EQUAL
70981: IFTRUE 70985
70983: GO 74240
70985: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70986: LD_ADDR_VAR 0 29
70990: PUSH
70991: LD_INT 4
70993: PUSH
70994: LD_INT 0
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 4
71003: PUSH
71004: LD_INT 1
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 5
71014: PUSH
71015: LD_INT 0
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: PUSH
71022: LD_INT 5
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 3
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 3
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 3
71065: PUSH
71066: LD_INT 2
71068: NEG
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 5
71076: PUSH
71077: LD_INT 2
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: LD_INT 3
71086: PUSH
71087: LD_INT 3
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: LD_INT 2
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 4
71106: PUSH
71107: LD_INT 3
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 4
71116: PUSH
71117: LD_INT 4
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: LD_INT 4
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 2
71136: PUSH
71137: LD_INT 3
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 2
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: LD_INT 2
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 2
71166: PUSH
71167: LD_INT 4
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 0
71176: PUSH
71177: LD_INT 4
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 0
71186: PUSH
71187: LD_INT 3
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: LD_INT 4
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 1
71206: PUSH
71207: LD_INT 5
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 0
71216: PUSH
71217: LD_INT 5
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 1
71226: NEG
71227: PUSH
71228: LD_INT 4
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: PUSH
71235: LD_INT 1
71237: NEG
71238: PUSH
71239: LD_INT 3
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: LD_INT 5
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 2
71258: NEG
71259: PUSH
71260: LD_INT 3
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 3
71269: NEG
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 3
71280: NEG
71281: PUSH
71282: LD_INT 1
71284: NEG
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 2
71292: NEG
71293: PUSH
71294: LD_INT 0
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 2
71303: NEG
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 3
71314: NEG
71315: PUSH
71316: LD_INT 1
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 4
71325: NEG
71326: PUSH
71327: LD_INT 0
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 4
71336: NEG
71337: PUSH
71338: LD_INT 1
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 4
71348: NEG
71349: PUSH
71350: LD_INT 2
71352: NEG
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: LD_INT 2
71360: NEG
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 4
71371: NEG
71372: PUSH
71373: LD_INT 4
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 4
71383: NEG
71384: PUSH
71385: LD_INT 5
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: LD_INT 3
71395: NEG
71396: PUSH
71397: LD_INT 4
71399: NEG
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 3
71407: NEG
71408: PUSH
71409: LD_INT 3
71411: NEG
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 4
71419: NEG
71420: PUSH
71421: LD_INT 3
71423: NEG
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: PUSH
71429: LD_INT 5
71431: NEG
71432: PUSH
71433: LD_INT 4
71435: NEG
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: LD_INT 5
71443: NEG
71444: PUSH
71445: LD_INT 5
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 3
71455: NEG
71456: PUSH
71457: LD_INT 5
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 5
71467: NEG
71468: PUSH
71469: LD_INT 3
71471: NEG
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
71524: LD_ADDR_VAR 0 30
71528: PUSH
71529: LD_INT 4
71531: PUSH
71532: LD_INT 4
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 4
71541: PUSH
71542: LD_INT 3
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 5
71551: PUSH
71552: LD_INT 4
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 5
71561: PUSH
71562: LD_INT 5
71564: PUSH
71565: EMPTY
71566: LIST
71567: LIST
71568: PUSH
71569: LD_INT 4
71571: PUSH
71572: LD_INT 5
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 3
71581: PUSH
71582: LD_INT 4
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 3
71591: PUSH
71592: LD_INT 3
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 5
71601: PUSH
71602: LD_INT 3
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: LD_INT 3
71611: PUSH
71612: LD_INT 5
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 0
71621: PUSH
71622: LD_INT 3
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 0
71631: PUSH
71632: LD_INT 2
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: LD_INT 3
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 4
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 4
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 1
71671: NEG
71672: PUSH
71673: LD_INT 3
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 1
71682: NEG
71683: PUSH
71684: LD_INT 2
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 2
71693: PUSH
71694: LD_INT 4
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 2
71703: NEG
71704: PUSH
71705: LD_INT 2
71707: PUSH
71708: EMPTY
71709: LIST
71710: LIST
71711: PUSH
71712: LD_INT 4
71714: NEG
71715: PUSH
71716: LD_INT 0
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 4
71725: NEG
71726: PUSH
71727: LD_INT 1
71729: NEG
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 3
71737: NEG
71738: PUSH
71739: LD_INT 0
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 3
71748: NEG
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 4
71759: NEG
71760: PUSH
71761: LD_INT 1
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 5
71770: NEG
71771: PUSH
71772: LD_INT 0
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 5
71781: NEG
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 5
71793: NEG
71794: PUSH
71795: LD_INT 2
71797: NEG
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 3
71805: NEG
71806: PUSH
71807: LD_INT 2
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 3
71816: NEG
71817: PUSH
71818: LD_INT 3
71820: NEG
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 3
71828: NEG
71829: PUSH
71830: LD_INT 4
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 2
71840: NEG
71841: PUSH
71842: LD_INT 3
71844: NEG
71845: PUSH
71846: EMPTY
71847: LIST
71848: LIST
71849: PUSH
71850: LD_INT 2
71852: NEG
71853: PUSH
71854: LD_INT 2
71856: NEG
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 3
71864: NEG
71865: PUSH
71866: LD_INT 2
71868: NEG
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_INT 4
71876: NEG
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 4
71888: NEG
71889: PUSH
71890: LD_INT 4
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 2
71900: NEG
71901: PUSH
71902: LD_INT 4
71904: NEG
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 4
71912: NEG
71913: PUSH
71914: LD_INT 2
71916: NEG
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 0
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_INT 5
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 1
71946: PUSH
71947: LD_INT 4
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 1
71957: PUSH
71958: LD_INT 3
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: NEG
71980: PUSH
71981: LD_INT 4
71983: NEG
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 1
71991: NEG
71992: PUSH
71993: LD_INT 5
71995: NEG
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 3
72006: NEG
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: PUSH
72012: LD_INT 2
72014: NEG
72015: PUSH
72016: LD_INT 5
72018: NEG
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: LIST
72028: LIST
72029: LIST
72030: LIST
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: LIST
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
72071: LD_ADDR_VAR 0 31
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: LD_INT 4
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: LD_INT 3
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: LD_INT 4
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 1
72108: PUSH
72109: LD_INT 5
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 0
72118: PUSH
72119: LD_INT 5
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 1
72128: NEG
72129: PUSH
72130: LD_INT 4
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 1
72139: NEG
72140: PUSH
72141: LD_INT 3
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 2
72150: PUSH
72151: LD_INT 5
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 2
72160: NEG
72161: PUSH
72162: LD_INT 3
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 3
72171: NEG
72172: PUSH
72173: LD_INT 0
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 3
72182: NEG
72183: PUSH
72184: LD_INT 1
72186: NEG
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 2
72194: NEG
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: LD_INT 1
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 3
72216: NEG
72217: PUSH
72218: LD_INT 1
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 4
72227: NEG
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 4
72238: NEG
72239: PUSH
72240: LD_INT 1
72242: NEG
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: PUSH
72248: LD_INT 4
72250: NEG
72251: PUSH
72252: LD_INT 2
72254: NEG
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 2
72262: NEG
72263: PUSH
72264: LD_INT 2
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 4
72273: NEG
72274: PUSH
72275: LD_INT 4
72277: NEG
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 4
72285: NEG
72286: PUSH
72287: LD_INT 5
72289: NEG
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 3
72297: NEG
72298: PUSH
72299: LD_INT 4
72301: NEG
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 3
72309: NEG
72310: PUSH
72311: LD_INT 3
72313: NEG
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PUSH
72319: LD_INT 4
72321: NEG
72322: PUSH
72323: LD_INT 3
72325: NEG
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 5
72333: NEG
72334: PUSH
72335: LD_INT 4
72337: NEG
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 5
72345: NEG
72346: PUSH
72347: LD_INT 5
72349: NEG
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: LD_INT 3
72357: NEG
72358: PUSH
72359: LD_INT 5
72361: NEG
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 5
72369: NEG
72370: PUSH
72371: LD_INT 3
72373: NEG
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: LD_INT 3
72384: NEG
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 0
72392: PUSH
72393: LD_INT 4
72395: NEG
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 1
72403: PUSH
72404: LD_INT 3
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: LD_INT 2
72417: NEG
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: LD_INT 2
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: LD_INT 3
72440: NEG
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: PUSH
72450: LD_INT 4
72452: NEG
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 2
72460: PUSH
72461: LD_INT 2
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 2
72471: NEG
72472: PUSH
72473: LD_INT 4
72475: NEG
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 4
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: PUSH
72491: LD_INT 4
72493: PUSH
72494: LD_INT 1
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 5
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 5
72514: PUSH
72515: LD_INT 1
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 4
72524: PUSH
72525: LD_INT 1
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: LD_INT 0
72537: PUSH
72538: EMPTY
72539: LIST
72540: LIST
72541: PUSH
72542: LD_INT 3
72544: PUSH
72545: LD_INT 1
72547: NEG
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 3
72555: PUSH
72556: LD_INT 2
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 5
72566: PUSH
72567: LD_INT 2
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: EMPTY
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
72621: LD_ADDR_VAR 0 32
72625: PUSH
72626: LD_INT 4
72628: NEG
72629: PUSH
72630: LD_INT 0
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 4
72639: NEG
72640: PUSH
72641: LD_INT 1
72643: NEG
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: LD_INT 3
72651: NEG
72652: PUSH
72653: LD_INT 0
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 3
72662: NEG
72663: PUSH
72664: LD_INT 1
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 4
72673: NEG
72674: PUSH
72675: LD_INT 1
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 5
72684: NEG
72685: PUSH
72686: LD_INT 0
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 5
72695: NEG
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: PUSH
72701: EMPTY
72702: LIST
72703: LIST
72704: PUSH
72705: LD_INT 5
72707: NEG
72708: PUSH
72709: LD_INT 2
72711: NEG
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: LD_INT 2
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: LD_INT 3
72734: NEG
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 3
72742: NEG
72743: PUSH
72744: LD_INT 4
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 2
72754: NEG
72755: PUSH
72756: LD_INT 3
72758: NEG
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 2
72766: NEG
72767: PUSH
72768: LD_INT 2
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 3
72778: NEG
72779: PUSH
72780: LD_INT 2
72782: NEG
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: PUSH
72788: LD_INT 4
72790: NEG
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 4
72802: NEG
72803: PUSH
72804: LD_INT 4
72806: NEG
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 2
72814: NEG
72815: PUSH
72816: LD_INT 4
72818: NEG
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 4
72826: NEG
72827: PUSH
72828: LD_INT 2
72830: NEG
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 0
72838: PUSH
72839: LD_INT 4
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 0
72849: PUSH
72850: LD_INT 5
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: LD_INT 4
72863: NEG
72864: PUSH
72865: EMPTY
72866: LIST
72867: LIST
72868: PUSH
72869: LD_INT 1
72871: PUSH
72872: LD_INT 3
72874: NEG
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: PUSH
72880: LD_INT 0
72882: PUSH
72883: LD_INT 3
72885: NEG
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 1
72893: NEG
72894: PUSH
72895: LD_INT 4
72897: NEG
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: LD_INT 5
72909: NEG
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 2
72917: PUSH
72918: LD_INT 3
72920: NEG
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 2
72928: NEG
72929: PUSH
72930: LD_INT 5
72932: NEG
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 3
72940: PUSH
72941: LD_INT 0
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: PUSH
72948: LD_INT 3
72950: PUSH
72951: LD_INT 1
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 4
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 4
72971: PUSH
72972: LD_INT 1
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: PUSH
72979: LD_INT 3
72981: PUSH
72982: LD_INT 1
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 2
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 2
73001: PUSH
73002: LD_INT 1
73004: NEG
73005: PUSH
73006: EMPTY
73007: LIST
73008: LIST
73009: PUSH
73010: LD_INT 2
73012: PUSH
73013: LD_INT 2
73015: NEG
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 4
73023: PUSH
73024: LD_INT 2
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 4
73033: PUSH
73034: LD_INT 4
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 4
73043: PUSH
73044: LD_INT 3
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 5
73053: PUSH
73054: LD_INT 4
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 5
73063: PUSH
73064: LD_INT 5
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 4
73073: PUSH
73074: LD_INT 5
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 3
73083: PUSH
73084: LD_INT 4
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 3
73093: PUSH
73094: LD_INT 3
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 5
73103: PUSH
73104: LD_INT 3
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 3
73113: PUSH
73114: LD_INT 5
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: LIST
73137: LIST
73138: LIST
73139: LIST
73140: LIST
73141: LIST
73142: LIST
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
73168: LD_ADDR_VAR 0 33
73172: PUSH
73173: LD_INT 4
73175: NEG
73176: PUSH
73177: LD_INT 4
73179: NEG
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 4
73187: NEG
73188: PUSH
73189: LD_INT 5
73191: NEG
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 3
73199: NEG
73200: PUSH
73201: LD_INT 4
73203: NEG
73204: PUSH
73205: EMPTY
73206: LIST
73207: LIST
73208: PUSH
73209: LD_INT 3
73211: NEG
73212: PUSH
73213: LD_INT 3
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 4
73223: NEG
73224: PUSH
73225: LD_INT 3
73227: NEG
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 5
73235: NEG
73236: PUSH
73237: LD_INT 4
73239: NEG
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 5
73247: NEG
73248: PUSH
73249: LD_INT 5
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 3
73259: NEG
73260: PUSH
73261: LD_INT 5
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 5
73271: NEG
73272: PUSH
73273: LD_INT 3
73275: NEG
73276: PUSH
73277: EMPTY
73278: LIST
73279: LIST
73280: PUSH
73281: LD_INT 0
73283: PUSH
73284: LD_INT 3
73286: NEG
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 0
73294: PUSH
73295: LD_INT 4
73297: NEG
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 1
73305: PUSH
73306: LD_INT 3
73308: NEG
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 1
73316: PUSH
73317: LD_INT 2
73319: NEG
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 0
73327: PUSH
73328: LD_INT 2
73330: NEG
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 1
73338: NEG
73339: PUSH
73340: LD_INT 3
73342: NEG
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: PUSH
73348: LD_INT 1
73350: NEG
73351: PUSH
73352: LD_INT 4
73354: NEG
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 2
73362: PUSH
73363: LD_INT 2
73365: NEG
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 2
73373: NEG
73374: PUSH
73375: LD_INT 4
73377: NEG
73378: PUSH
73379: EMPTY
73380: LIST
73381: LIST
73382: PUSH
73383: LD_INT 4
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: EMPTY
73390: LIST
73391: LIST
73392: PUSH
73393: LD_INT 4
73395: PUSH
73396: LD_INT 1
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 5
73406: PUSH
73407: LD_INT 0
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 5
73416: PUSH
73417: LD_INT 1
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: PUSH
73424: LD_INT 4
73426: PUSH
73427: LD_INT 1
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 3
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 3
73446: PUSH
73447: LD_INT 1
73449: NEG
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: LD_INT 3
73457: PUSH
73458: LD_INT 2
73460: NEG
73461: PUSH
73462: EMPTY
73463: LIST
73464: LIST
73465: PUSH
73466: LD_INT 5
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 3
73478: PUSH
73479: LD_INT 3
73481: PUSH
73482: EMPTY
73483: LIST
73484: LIST
73485: PUSH
73486: LD_INT 3
73488: PUSH
73489: LD_INT 2
73491: PUSH
73492: EMPTY
73493: LIST
73494: LIST
73495: PUSH
73496: LD_INT 4
73498: PUSH
73499: LD_INT 3
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 4
73508: PUSH
73509: LD_INT 4
73511: PUSH
73512: EMPTY
73513: LIST
73514: LIST
73515: PUSH
73516: LD_INT 3
73518: PUSH
73519: LD_INT 4
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 2
73528: PUSH
73529: LD_INT 3
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 2
73538: PUSH
73539: LD_INT 2
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 4
73548: PUSH
73549: LD_INT 2
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 2
73558: PUSH
73559: LD_INT 4
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 0
73568: PUSH
73569: LD_INT 4
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: LD_INT 3
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 1
73588: PUSH
73589: LD_INT 4
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 1
73598: PUSH
73599: LD_INT 5
73601: PUSH
73602: EMPTY
73603: LIST
73604: LIST
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 5
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 1
73618: NEG
73619: PUSH
73620: LD_INT 4
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 1
73629: NEG
73630: PUSH
73631: LD_INT 3
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 2
73640: PUSH
73641: LD_INT 5
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 2
73650: NEG
73651: PUSH
73652: LD_INT 3
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: LIST
73682: LIST
73683: LIST
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
73706: LD_ADDR_VAR 0 34
73710: PUSH
73711: LD_INT 0
73713: PUSH
73714: LD_INT 4
73716: NEG
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 0
73724: PUSH
73725: LD_INT 5
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 1
73735: PUSH
73736: LD_INT 4
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: LD_INT 1
73746: PUSH
73747: LD_INT 3
73749: NEG
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 0
73757: PUSH
73758: LD_INT 3
73760: NEG
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 1
73768: NEG
73769: PUSH
73770: LD_INT 4
73772: NEG
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 1
73780: NEG
73781: PUSH
73782: LD_INT 5
73784: NEG
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: PUSH
73790: LD_INT 2
73792: PUSH
73793: LD_INT 3
73795: NEG
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 2
73803: NEG
73804: PUSH
73805: LD_INT 5
73807: NEG
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 3
73815: PUSH
73816: LD_INT 0
73818: PUSH
73819: EMPTY
73820: LIST
73821: LIST
73822: PUSH
73823: LD_INT 3
73825: PUSH
73826: LD_INT 1
73828: NEG
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 4
73836: PUSH
73837: LD_INT 0
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 4
73846: PUSH
73847: LD_INT 1
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 3
73856: PUSH
73857: LD_INT 1
73859: PUSH
73860: EMPTY
73861: LIST
73862: LIST
73863: PUSH
73864: LD_INT 2
73866: PUSH
73867: LD_INT 0
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 2
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 2
73887: PUSH
73888: LD_INT 2
73890: NEG
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: PUSH
73896: LD_INT 4
73898: PUSH
73899: LD_INT 2
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 4
73908: PUSH
73909: LD_INT 4
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 4
73918: PUSH
73919: LD_INT 3
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 5
73928: PUSH
73929: LD_INT 4
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 5
73938: PUSH
73939: LD_INT 5
73941: PUSH
73942: EMPTY
73943: LIST
73944: LIST
73945: PUSH
73946: LD_INT 4
73948: PUSH
73949: LD_INT 5
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: PUSH
73956: LD_INT 3
73958: PUSH
73959: LD_INT 4
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 3
73968: PUSH
73969: LD_INT 3
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 5
73978: PUSH
73979: LD_INT 3
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 3
73988: PUSH
73989: LD_INT 5
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 0
73998: PUSH
73999: LD_INT 3
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: LD_INT 0
74008: PUSH
74009: LD_INT 2
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 1
74018: PUSH
74019: LD_INT 3
74021: PUSH
74022: EMPTY
74023: LIST
74024: LIST
74025: PUSH
74026: LD_INT 1
74028: PUSH
74029: LD_INT 4
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: LD_INT 4
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 1
74048: NEG
74049: PUSH
74050: LD_INT 3
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: PUSH
74061: LD_INT 2
74063: PUSH
74064: EMPTY
74065: LIST
74066: LIST
74067: PUSH
74068: LD_INT 2
74070: PUSH
74071: LD_INT 4
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 2
74080: NEG
74081: PUSH
74082: LD_INT 2
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 4
74091: NEG
74092: PUSH
74093: LD_INT 0
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 4
74102: NEG
74103: PUSH
74104: LD_INT 1
74106: NEG
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: LD_INT 3
74114: NEG
74115: PUSH
74116: LD_INT 0
74118: PUSH
74119: EMPTY
74120: LIST
74121: LIST
74122: PUSH
74123: LD_INT 3
74125: NEG
74126: PUSH
74127: LD_INT 1
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 4
74136: NEG
74137: PUSH
74138: LD_INT 1
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 5
74147: NEG
74148: PUSH
74149: LD_INT 0
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 5
74158: NEG
74159: PUSH
74160: LD_INT 1
74162: NEG
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 5
74170: NEG
74171: PUSH
74172: LD_INT 2
74174: NEG
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 3
74182: NEG
74183: PUSH
74184: LD_INT 2
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: ST_TO_ADDR
// end ; end ;
74238: GO 74241
74240: POP
// case btype of b_depot , b_warehouse :
74241: LD_VAR 0 1
74245: PUSH
74246: LD_INT 0
74248: DOUBLE
74249: EQUAL
74250: IFTRUE 74260
74252: LD_INT 1
74254: DOUBLE
74255: EQUAL
74256: IFTRUE 74260
74258: GO 74461
74260: POP
// case nation of nation_american :
74261: LD_VAR 0 5
74265: PUSH
74266: LD_INT 1
74268: DOUBLE
74269: EQUAL
74270: IFTRUE 74274
74272: GO 74330
74274: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
74275: LD_ADDR_VAR 0 9
74279: PUSH
74280: LD_VAR 0 11
74284: PUSH
74285: LD_VAR 0 12
74289: PUSH
74290: LD_VAR 0 13
74294: PUSH
74295: LD_VAR 0 14
74299: PUSH
74300: LD_VAR 0 15
74304: PUSH
74305: LD_VAR 0 16
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: PUSH
74318: LD_VAR 0 4
74322: PUSH
74323: LD_INT 1
74325: PLUS
74326: ARRAY
74327: ST_TO_ADDR
74328: GO 74459
74330: LD_INT 2
74332: DOUBLE
74333: EQUAL
74334: IFTRUE 74338
74336: GO 74394
74338: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
74339: LD_ADDR_VAR 0 9
74343: PUSH
74344: LD_VAR 0 17
74348: PUSH
74349: LD_VAR 0 18
74353: PUSH
74354: LD_VAR 0 19
74358: PUSH
74359: LD_VAR 0 20
74363: PUSH
74364: LD_VAR 0 21
74368: PUSH
74369: LD_VAR 0 22
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: PUSH
74382: LD_VAR 0 4
74386: PUSH
74387: LD_INT 1
74389: PLUS
74390: ARRAY
74391: ST_TO_ADDR
74392: GO 74459
74394: LD_INT 3
74396: DOUBLE
74397: EQUAL
74398: IFTRUE 74402
74400: GO 74458
74402: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
74403: LD_ADDR_VAR 0 9
74407: PUSH
74408: LD_VAR 0 23
74412: PUSH
74413: LD_VAR 0 24
74417: PUSH
74418: LD_VAR 0 25
74422: PUSH
74423: LD_VAR 0 26
74427: PUSH
74428: LD_VAR 0 27
74432: PUSH
74433: LD_VAR 0 28
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: LIST
74442: LIST
74443: LIST
74444: LIST
74445: PUSH
74446: LD_VAR 0 4
74450: PUSH
74451: LD_INT 1
74453: PLUS
74454: ARRAY
74455: ST_TO_ADDR
74456: GO 74459
74458: POP
74459: GO 75008
74461: LD_INT 2
74463: DOUBLE
74464: EQUAL
74465: IFTRUE 74475
74467: LD_INT 3
74469: DOUBLE
74470: EQUAL
74471: IFTRUE 74475
74473: GO 74531
74475: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
74476: LD_ADDR_VAR 0 9
74480: PUSH
74481: LD_VAR 0 29
74485: PUSH
74486: LD_VAR 0 30
74490: PUSH
74491: LD_VAR 0 31
74495: PUSH
74496: LD_VAR 0 32
74500: PUSH
74501: LD_VAR 0 33
74505: PUSH
74506: LD_VAR 0 34
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: PUSH
74519: LD_VAR 0 4
74523: PUSH
74524: LD_INT 1
74526: PLUS
74527: ARRAY
74528: ST_TO_ADDR
74529: GO 75008
74531: LD_INT 16
74533: DOUBLE
74534: EQUAL
74535: IFTRUE 74587
74537: LD_INT 17
74539: DOUBLE
74540: EQUAL
74541: IFTRUE 74587
74543: LD_INT 18
74545: DOUBLE
74546: EQUAL
74547: IFTRUE 74587
74549: LD_INT 19
74551: DOUBLE
74552: EQUAL
74553: IFTRUE 74587
74555: LD_INT 20
74557: DOUBLE
74558: EQUAL
74559: IFTRUE 74587
74561: LD_INT 21
74563: DOUBLE
74564: EQUAL
74565: IFTRUE 74587
74567: LD_INT 23
74569: DOUBLE
74570: EQUAL
74571: IFTRUE 74587
74573: LD_INT 24
74575: DOUBLE
74576: EQUAL
74577: IFTRUE 74587
74579: LD_INT 25
74581: DOUBLE
74582: EQUAL
74583: IFTRUE 74587
74585: GO 74643
74587: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
74588: LD_ADDR_VAR 0 9
74592: PUSH
74593: LD_VAR 0 35
74597: PUSH
74598: LD_VAR 0 36
74602: PUSH
74603: LD_VAR 0 37
74607: PUSH
74608: LD_VAR 0 38
74612: PUSH
74613: LD_VAR 0 39
74617: PUSH
74618: LD_VAR 0 40
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: PUSH
74631: LD_VAR 0 4
74635: PUSH
74636: LD_INT 1
74638: PLUS
74639: ARRAY
74640: ST_TO_ADDR
74641: GO 75008
74643: LD_INT 6
74645: DOUBLE
74646: EQUAL
74647: IFTRUE 74699
74649: LD_INT 7
74651: DOUBLE
74652: EQUAL
74653: IFTRUE 74699
74655: LD_INT 8
74657: DOUBLE
74658: EQUAL
74659: IFTRUE 74699
74661: LD_INT 13
74663: DOUBLE
74664: EQUAL
74665: IFTRUE 74699
74667: LD_INT 12
74669: DOUBLE
74670: EQUAL
74671: IFTRUE 74699
74673: LD_INT 15
74675: DOUBLE
74676: EQUAL
74677: IFTRUE 74699
74679: LD_INT 11
74681: DOUBLE
74682: EQUAL
74683: IFTRUE 74699
74685: LD_INT 14
74687: DOUBLE
74688: EQUAL
74689: IFTRUE 74699
74691: LD_INT 10
74693: DOUBLE
74694: EQUAL
74695: IFTRUE 74699
74697: GO 74755
74699: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
74700: LD_ADDR_VAR 0 9
74704: PUSH
74705: LD_VAR 0 41
74709: PUSH
74710: LD_VAR 0 42
74714: PUSH
74715: LD_VAR 0 43
74719: PUSH
74720: LD_VAR 0 44
74724: PUSH
74725: LD_VAR 0 45
74729: PUSH
74730: LD_VAR 0 46
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: LIST
74741: LIST
74742: PUSH
74743: LD_VAR 0 4
74747: PUSH
74748: LD_INT 1
74750: PLUS
74751: ARRAY
74752: ST_TO_ADDR
74753: GO 75008
74755: LD_INT 36
74757: DOUBLE
74758: EQUAL
74759: IFTRUE 74763
74761: GO 74819
74763: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
74764: LD_ADDR_VAR 0 9
74768: PUSH
74769: LD_VAR 0 47
74773: PUSH
74774: LD_VAR 0 48
74778: PUSH
74779: LD_VAR 0 49
74783: PUSH
74784: LD_VAR 0 50
74788: PUSH
74789: LD_VAR 0 51
74793: PUSH
74794: LD_VAR 0 52
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: PUSH
74807: LD_VAR 0 4
74811: PUSH
74812: LD_INT 1
74814: PLUS
74815: ARRAY
74816: ST_TO_ADDR
74817: GO 75008
74819: LD_INT 4
74821: DOUBLE
74822: EQUAL
74823: IFTRUE 74845
74825: LD_INT 5
74827: DOUBLE
74828: EQUAL
74829: IFTRUE 74845
74831: LD_INT 34
74833: DOUBLE
74834: EQUAL
74835: IFTRUE 74845
74837: LD_INT 37
74839: DOUBLE
74840: EQUAL
74841: IFTRUE 74845
74843: GO 74901
74845: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
74846: LD_ADDR_VAR 0 9
74850: PUSH
74851: LD_VAR 0 53
74855: PUSH
74856: LD_VAR 0 54
74860: PUSH
74861: LD_VAR 0 55
74865: PUSH
74866: LD_VAR 0 56
74870: PUSH
74871: LD_VAR 0 57
74875: PUSH
74876: LD_VAR 0 58
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: PUSH
74889: LD_VAR 0 4
74893: PUSH
74894: LD_INT 1
74896: PLUS
74897: ARRAY
74898: ST_TO_ADDR
74899: GO 75008
74901: LD_INT 31
74903: DOUBLE
74904: EQUAL
74905: IFTRUE 74951
74907: LD_INT 32
74909: DOUBLE
74910: EQUAL
74911: IFTRUE 74951
74913: LD_INT 33
74915: DOUBLE
74916: EQUAL
74917: IFTRUE 74951
74919: LD_INT 27
74921: DOUBLE
74922: EQUAL
74923: IFTRUE 74951
74925: LD_INT 26
74927: DOUBLE
74928: EQUAL
74929: IFTRUE 74951
74931: LD_INT 28
74933: DOUBLE
74934: EQUAL
74935: IFTRUE 74951
74937: LD_INT 29
74939: DOUBLE
74940: EQUAL
74941: IFTRUE 74951
74943: LD_INT 30
74945: DOUBLE
74946: EQUAL
74947: IFTRUE 74951
74949: GO 75007
74951: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
74952: LD_ADDR_VAR 0 9
74956: PUSH
74957: LD_VAR 0 59
74961: PUSH
74962: LD_VAR 0 60
74966: PUSH
74967: LD_VAR 0 61
74971: PUSH
74972: LD_VAR 0 62
74976: PUSH
74977: LD_VAR 0 63
74981: PUSH
74982: LD_VAR 0 64
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: PUSH
74995: LD_VAR 0 4
74999: PUSH
75000: LD_INT 1
75002: PLUS
75003: ARRAY
75004: ST_TO_ADDR
75005: GO 75008
75007: POP
// temp_list2 = [ ] ;
75008: LD_ADDR_VAR 0 10
75012: PUSH
75013: EMPTY
75014: ST_TO_ADDR
// for i in temp_list do
75015: LD_ADDR_VAR 0 8
75019: PUSH
75020: LD_VAR 0 9
75024: PUSH
75025: FOR_IN
75026: IFFALSE 75078
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
75028: LD_ADDR_VAR 0 10
75032: PUSH
75033: LD_VAR 0 10
75037: PUSH
75038: LD_VAR 0 8
75042: PUSH
75043: LD_INT 1
75045: ARRAY
75046: PUSH
75047: LD_VAR 0 2
75051: PLUS
75052: PUSH
75053: LD_VAR 0 8
75057: PUSH
75058: LD_INT 2
75060: ARRAY
75061: PUSH
75062: LD_VAR 0 3
75066: PLUS
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: EMPTY
75073: LIST
75074: ADD
75075: ST_TO_ADDR
75076: GO 75025
75078: POP
75079: POP
// result = temp_list2 ;
75080: LD_ADDR_VAR 0 7
75084: PUSH
75085: LD_VAR 0 10
75089: ST_TO_ADDR
// end ;
75090: LD_VAR 0 7
75094: RET
// export function EnemyInRange ( unit , dist ) ; begin
75095: LD_INT 0
75097: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
75098: LD_ADDR_VAR 0 3
75102: PUSH
75103: LD_VAR 0 1
75107: PPUSH
75108: CALL_OW 255
75112: PPUSH
75113: LD_VAR 0 1
75117: PPUSH
75118: CALL_OW 250
75122: PPUSH
75123: LD_VAR 0 1
75127: PPUSH
75128: CALL_OW 251
75132: PPUSH
75133: LD_VAR 0 2
75137: PPUSH
75138: CALL 49558 0 4
75142: PUSH
75143: LD_INT 4
75145: ARRAY
75146: ST_TO_ADDR
// end ;
75147: LD_VAR 0 3
75151: RET
// export function PlayerSeeMe ( unit ) ; begin
75152: LD_INT 0
75154: PPUSH
// result := See ( your_side , unit ) ;
75155: LD_ADDR_VAR 0 2
75159: PUSH
75160: LD_OWVAR 2
75164: PPUSH
75165: LD_VAR 0 1
75169: PPUSH
75170: CALL_OW 292
75174: ST_TO_ADDR
// end ;
75175: LD_VAR 0 2
75179: RET
// export function ReverseDir ( unit ) ; begin
75180: LD_INT 0
75182: PPUSH
// if not unit then
75183: LD_VAR 0 1
75187: NOT
75188: IFFALSE 75192
// exit ;
75190: GO 75238
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
75192: LD_ADDR_VAR 0 2
75196: PUSH
75197: LD_INT 3
75199: PUSH
75200: LD_INT 4
75202: PUSH
75203: LD_INT 5
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: LD_INT 1
75211: PUSH
75212: LD_INT 2
75214: PUSH
75215: EMPTY
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: PUSH
75223: LD_VAR 0 1
75227: PPUSH
75228: CALL_OW 254
75232: PUSH
75233: LD_INT 1
75235: PLUS
75236: ARRAY
75237: ST_TO_ADDR
// end ;
75238: LD_VAR 0 2
75242: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
75243: LD_INT 0
75245: PPUSH
75246: PPUSH
75247: PPUSH
75248: PPUSH
75249: PPUSH
// if not hexes then
75250: LD_VAR 0 2
75254: NOT
75255: IFFALSE 75259
// exit ;
75257: GO 75407
// dist := 9999 ;
75259: LD_ADDR_VAR 0 5
75263: PUSH
75264: LD_INT 9999
75266: ST_TO_ADDR
// for i = 1 to hexes do
75267: LD_ADDR_VAR 0 4
75271: PUSH
75272: DOUBLE
75273: LD_INT 1
75275: DEC
75276: ST_TO_ADDR
75277: LD_VAR 0 2
75281: PUSH
75282: FOR_TO
75283: IFFALSE 75395
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
75285: LD_VAR 0 1
75289: PPUSH
75290: LD_VAR 0 2
75294: PUSH
75295: LD_VAR 0 4
75299: ARRAY
75300: PUSH
75301: LD_INT 1
75303: ARRAY
75304: PPUSH
75305: LD_VAR 0 2
75309: PUSH
75310: LD_VAR 0 4
75314: ARRAY
75315: PUSH
75316: LD_INT 2
75318: ARRAY
75319: PPUSH
75320: CALL_OW 297
75324: PUSH
75325: LD_VAR 0 5
75329: LESS
75330: IFFALSE 75393
// begin hex := hexes [ i ] ;
75332: LD_ADDR_VAR 0 7
75336: PUSH
75337: LD_VAR 0 2
75341: PUSH
75342: LD_VAR 0 4
75346: ARRAY
75347: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
75348: LD_ADDR_VAR 0 5
75352: PUSH
75353: LD_VAR 0 1
75357: PPUSH
75358: LD_VAR 0 2
75362: PUSH
75363: LD_VAR 0 4
75367: ARRAY
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PPUSH
75373: LD_VAR 0 2
75377: PUSH
75378: LD_VAR 0 4
75382: ARRAY
75383: PUSH
75384: LD_INT 2
75386: ARRAY
75387: PPUSH
75388: CALL_OW 297
75392: ST_TO_ADDR
// end ; end ;
75393: GO 75282
75395: POP
75396: POP
// result := hex ;
75397: LD_ADDR_VAR 0 3
75401: PUSH
75402: LD_VAR 0 7
75406: ST_TO_ADDR
// end ;
75407: LD_VAR 0 3
75411: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
75412: LD_INT 0
75414: PPUSH
75415: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
75416: LD_VAR 0 1
75420: NOT
75421: PUSH
75422: LD_VAR 0 1
75426: PUSH
75427: LD_INT 21
75429: PUSH
75430: LD_INT 2
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: LD_INT 23
75439: PUSH
75440: LD_INT 2
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PUSH
75447: EMPTY
75448: LIST
75449: LIST
75450: PPUSH
75451: CALL_OW 69
75455: IN
75456: NOT
75457: OR
75458: IFFALSE 75462
// exit ;
75460: GO 75509
// for i = 1 to 3 do
75462: LD_ADDR_VAR 0 3
75466: PUSH
75467: DOUBLE
75468: LD_INT 1
75470: DEC
75471: ST_TO_ADDR
75472: LD_INT 3
75474: PUSH
75475: FOR_TO
75476: IFFALSE 75507
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
75478: LD_VAR 0 1
75482: PPUSH
75483: CALL_OW 250
75487: PPUSH
75488: LD_VAR 0 1
75492: PPUSH
75493: CALL_OW 251
75497: PPUSH
75498: LD_INT 1
75500: PPUSH
75501: CALL_OW 453
75505: GO 75475
75507: POP
75508: POP
// end ;
75509: LD_VAR 0 2
75513: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
75514: LD_INT 0
75516: PPUSH
75517: PPUSH
75518: PPUSH
75519: PPUSH
75520: PPUSH
75521: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
75522: LD_VAR 0 1
75526: NOT
75527: PUSH
75528: LD_VAR 0 2
75532: NOT
75533: OR
75534: PUSH
75535: LD_VAR 0 1
75539: PPUSH
75540: CALL_OW 314
75544: OR
75545: IFFALSE 75549
// exit ;
75547: GO 75990
// x := GetX ( enemy_unit ) ;
75549: LD_ADDR_VAR 0 7
75553: PUSH
75554: LD_VAR 0 2
75558: PPUSH
75559: CALL_OW 250
75563: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
75564: LD_ADDR_VAR 0 8
75568: PUSH
75569: LD_VAR 0 2
75573: PPUSH
75574: CALL_OW 251
75578: ST_TO_ADDR
// if not x or not y then
75579: LD_VAR 0 7
75583: NOT
75584: PUSH
75585: LD_VAR 0 8
75589: NOT
75590: OR
75591: IFFALSE 75595
// exit ;
75593: GO 75990
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
75595: LD_ADDR_VAR 0 6
75599: PUSH
75600: LD_VAR 0 7
75604: PPUSH
75605: LD_INT 0
75607: PPUSH
75608: LD_INT 4
75610: PPUSH
75611: CALL_OW 272
75615: PUSH
75616: LD_VAR 0 8
75620: PPUSH
75621: LD_INT 0
75623: PPUSH
75624: LD_INT 4
75626: PPUSH
75627: CALL_OW 273
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: LD_VAR 0 7
75640: PPUSH
75641: LD_INT 1
75643: PPUSH
75644: LD_INT 4
75646: PPUSH
75647: CALL_OW 272
75651: PUSH
75652: LD_VAR 0 8
75656: PPUSH
75657: LD_INT 1
75659: PPUSH
75660: LD_INT 4
75662: PPUSH
75663: CALL_OW 273
75667: PUSH
75668: EMPTY
75669: LIST
75670: LIST
75671: PUSH
75672: LD_VAR 0 7
75676: PPUSH
75677: LD_INT 2
75679: PPUSH
75680: LD_INT 4
75682: PPUSH
75683: CALL_OW 272
75687: PUSH
75688: LD_VAR 0 8
75692: PPUSH
75693: LD_INT 2
75695: PPUSH
75696: LD_INT 4
75698: PPUSH
75699: CALL_OW 273
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_VAR 0 7
75712: PPUSH
75713: LD_INT 3
75715: PPUSH
75716: LD_INT 4
75718: PPUSH
75719: CALL_OW 272
75723: PUSH
75724: LD_VAR 0 8
75728: PPUSH
75729: LD_INT 3
75731: PPUSH
75732: LD_INT 4
75734: PPUSH
75735: CALL_OW 273
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_VAR 0 7
75748: PPUSH
75749: LD_INT 4
75751: PPUSH
75752: LD_INT 4
75754: PPUSH
75755: CALL_OW 272
75759: PUSH
75760: LD_VAR 0 8
75764: PPUSH
75765: LD_INT 4
75767: PPUSH
75768: LD_INT 4
75770: PPUSH
75771: CALL_OW 273
75775: PUSH
75776: EMPTY
75777: LIST
75778: LIST
75779: PUSH
75780: LD_VAR 0 7
75784: PPUSH
75785: LD_INT 5
75787: PPUSH
75788: LD_INT 4
75790: PPUSH
75791: CALL_OW 272
75795: PUSH
75796: LD_VAR 0 8
75800: PPUSH
75801: LD_INT 5
75803: PPUSH
75804: LD_INT 4
75806: PPUSH
75807: CALL_OW 273
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: ST_TO_ADDR
// for i = tmp downto 1 do
75824: LD_ADDR_VAR 0 4
75828: PUSH
75829: DOUBLE
75830: LD_VAR 0 6
75834: INC
75835: ST_TO_ADDR
75836: LD_INT 1
75838: PUSH
75839: FOR_DOWNTO
75840: IFFALSE 75941
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
75842: LD_VAR 0 6
75846: PUSH
75847: LD_VAR 0 4
75851: ARRAY
75852: PUSH
75853: LD_INT 1
75855: ARRAY
75856: PPUSH
75857: LD_VAR 0 6
75861: PUSH
75862: LD_VAR 0 4
75866: ARRAY
75867: PUSH
75868: LD_INT 2
75870: ARRAY
75871: PPUSH
75872: CALL_OW 488
75876: NOT
75877: PUSH
75878: LD_VAR 0 6
75882: PUSH
75883: LD_VAR 0 4
75887: ARRAY
75888: PUSH
75889: LD_INT 1
75891: ARRAY
75892: PPUSH
75893: LD_VAR 0 6
75897: PUSH
75898: LD_VAR 0 4
75902: ARRAY
75903: PUSH
75904: LD_INT 2
75906: ARRAY
75907: PPUSH
75908: CALL_OW 428
75912: PUSH
75913: LD_INT 0
75915: NONEQUAL
75916: OR
75917: IFFALSE 75939
// tmp := Delete ( tmp , i ) ;
75919: LD_ADDR_VAR 0 6
75923: PUSH
75924: LD_VAR 0 6
75928: PPUSH
75929: LD_VAR 0 4
75933: PPUSH
75934: CALL_OW 3
75938: ST_TO_ADDR
75939: GO 75839
75941: POP
75942: POP
// j := GetClosestHex ( unit , tmp ) ;
75943: LD_ADDR_VAR 0 5
75947: PUSH
75948: LD_VAR 0 1
75952: PPUSH
75953: LD_VAR 0 6
75957: PPUSH
75958: CALL 75243 0 2
75962: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75963: LD_VAR 0 1
75967: PPUSH
75968: LD_VAR 0 5
75972: PUSH
75973: LD_INT 1
75975: ARRAY
75976: PPUSH
75977: LD_VAR 0 5
75981: PUSH
75982: LD_INT 2
75984: ARRAY
75985: PPUSH
75986: CALL_OW 111
// end ;
75990: LD_VAR 0 3
75994: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75995: LD_INT 0
75997: PPUSH
75998: PPUSH
75999: PPUSH
// uc_side = 0 ;
76000: LD_ADDR_OWVAR 20
76004: PUSH
76005: LD_INT 0
76007: ST_TO_ADDR
// uc_nation = 0 ;
76008: LD_ADDR_OWVAR 21
76012: PUSH
76013: LD_INT 0
76015: ST_TO_ADDR
// InitHc ;
76016: CALL_OW 19
// InitVc ;
76020: CALL_OW 20
// if mastodonts then
76024: LD_VAR 0 6
76028: IFFALSE 76095
// for i = 1 to mastodonts do
76030: LD_ADDR_VAR 0 11
76034: PUSH
76035: DOUBLE
76036: LD_INT 1
76038: DEC
76039: ST_TO_ADDR
76040: LD_VAR 0 6
76044: PUSH
76045: FOR_TO
76046: IFFALSE 76093
// begin vc_chassis := 31 ;
76048: LD_ADDR_OWVAR 37
76052: PUSH
76053: LD_INT 31
76055: ST_TO_ADDR
// vc_control := control_rider ;
76056: LD_ADDR_OWVAR 38
76060: PUSH
76061: LD_INT 4
76063: ST_TO_ADDR
// animal := CreateVehicle ;
76064: LD_ADDR_VAR 0 12
76068: PUSH
76069: CALL_OW 45
76073: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76074: LD_VAR 0 12
76078: PPUSH
76079: LD_VAR 0 8
76083: PPUSH
76084: LD_INT 0
76086: PPUSH
76087: CALL_OW 49
// end ;
76091: GO 76045
76093: POP
76094: POP
// if horses then
76095: LD_VAR 0 5
76099: IFFALSE 76166
// for i = 1 to horses do
76101: LD_ADDR_VAR 0 11
76105: PUSH
76106: DOUBLE
76107: LD_INT 1
76109: DEC
76110: ST_TO_ADDR
76111: LD_VAR 0 5
76115: PUSH
76116: FOR_TO
76117: IFFALSE 76164
// begin hc_class := 21 ;
76119: LD_ADDR_OWVAR 28
76123: PUSH
76124: LD_INT 21
76126: ST_TO_ADDR
// hc_gallery :=  ;
76127: LD_ADDR_OWVAR 33
76131: PUSH
76132: LD_STRING 
76134: ST_TO_ADDR
// animal := CreateHuman ;
76135: LD_ADDR_VAR 0 12
76139: PUSH
76140: CALL_OW 44
76144: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76145: LD_VAR 0 12
76149: PPUSH
76150: LD_VAR 0 8
76154: PPUSH
76155: LD_INT 0
76157: PPUSH
76158: CALL_OW 49
// end ;
76162: GO 76116
76164: POP
76165: POP
// if birds then
76166: LD_VAR 0 1
76170: IFFALSE 76237
// for i = 1 to birds do
76172: LD_ADDR_VAR 0 11
76176: PUSH
76177: DOUBLE
76178: LD_INT 1
76180: DEC
76181: ST_TO_ADDR
76182: LD_VAR 0 1
76186: PUSH
76187: FOR_TO
76188: IFFALSE 76235
// begin hc_class = 18 ;
76190: LD_ADDR_OWVAR 28
76194: PUSH
76195: LD_INT 18
76197: ST_TO_ADDR
// hc_gallery =  ;
76198: LD_ADDR_OWVAR 33
76202: PUSH
76203: LD_STRING 
76205: ST_TO_ADDR
// animal := CreateHuman ;
76206: LD_ADDR_VAR 0 12
76210: PUSH
76211: CALL_OW 44
76215: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76216: LD_VAR 0 12
76220: PPUSH
76221: LD_VAR 0 8
76225: PPUSH
76226: LD_INT 0
76228: PPUSH
76229: CALL_OW 49
// end ;
76233: GO 76187
76235: POP
76236: POP
// if tigers then
76237: LD_VAR 0 2
76241: IFFALSE 76325
// for i = 1 to tigers do
76243: LD_ADDR_VAR 0 11
76247: PUSH
76248: DOUBLE
76249: LD_INT 1
76251: DEC
76252: ST_TO_ADDR
76253: LD_VAR 0 2
76257: PUSH
76258: FOR_TO
76259: IFFALSE 76323
// begin hc_class = class_tiger ;
76261: LD_ADDR_OWVAR 28
76265: PUSH
76266: LD_INT 14
76268: ST_TO_ADDR
// hc_gallery =  ;
76269: LD_ADDR_OWVAR 33
76273: PUSH
76274: LD_STRING 
76276: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
76277: LD_ADDR_OWVAR 35
76281: PUSH
76282: LD_INT 7
76284: NEG
76285: PPUSH
76286: LD_INT 7
76288: PPUSH
76289: CALL_OW 12
76293: ST_TO_ADDR
// animal := CreateHuman ;
76294: LD_ADDR_VAR 0 12
76298: PUSH
76299: CALL_OW 44
76303: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76304: LD_VAR 0 12
76308: PPUSH
76309: LD_VAR 0 8
76313: PPUSH
76314: LD_INT 0
76316: PPUSH
76317: CALL_OW 49
// end ;
76321: GO 76258
76323: POP
76324: POP
// if apemans then
76325: LD_VAR 0 3
76329: IFFALSE 76452
// for i = 1 to apemans do
76331: LD_ADDR_VAR 0 11
76335: PUSH
76336: DOUBLE
76337: LD_INT 1
76339: DEC
76340: ST_TO_ADDR
76341: LD_VAR 0 3
76345: PUSH
76346: FOR_TO
76347: IFFALSE 76450
// begin hc_class = class_apeman ;
76349: LD_ADDR_OWVAR 28
76353: PUSH
76354: LD_INT 12
76356: ST_TO_ADDR
// hc_gallery =  ;
76357: LD_ADDR_OWVAR 33
76361: PUSH
76362: LD_STRING 
76364: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
76365: LD_ADDR_OWVAR 35
76369: PUSH
76370: LD_INT 5
76372: NEG
76373: PPUSH
76374: LD_INT 5
76376: PPUSH
76377: CALL_OW 12
76381: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
76382: LD_ADDR_OWVAR 31
76386: PUSH
76387: LD_INT 1
76389: PPUSH
76390: LD_INT 3
76392: PPUSH
76393: CALL_OW 12
76397: PUSH
76398: LD_INT 1
76400: PPUSH
76401: LD_INT 3
76403: PPUSH
76404: CALL_OW 12
76408: PUSH
76409: LD_INT 0
76411: PUSH
76412: LD_INT 0
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: ST_TO_ADDR
// animal := CreateHuman ;
76421: LD_ADDR_VAR 0 12
76425: PUSH
76426: CALL_OW 44
76430: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76431: LD_VAR 0 12
76435: PPUSH
76436: LD_VAR 0 8
76440: PPUSH
76441: LD_INT 0
76443: PPUSH
76444: CALL_OW 49
// end ;
76448: GO 76346
76450: POP
76451: POP
// if enchidnas then
76452: LD_VAR 0 4
76456: IFFALSE 76523
// for i = 1 to enchidnas do
76458: LD_ADDR_VAR 0 11
76462: PUSH
76463: DOUBLE
76464: LD_INT 1
76466: DEC
76467: ST_TO_ADDR
76468: LD_VAR 0 4
76472: PUSH
76473: FOR_TO
76474: IFFALSE 76521
// begin hc_class = 13 ;
76476: LD_ADDR_OWVAR 28
76480: PUSH
76481: LD_INT 13
76483: ST_TO_ADDR
// hc_gallery =  ;
76484: LD_ADDR_OWVAR 33
76488: PUSH
76489: LD_STRING 
76491: ST_TO_ADDR
// animal := CreateHuman ;
76492: LD_ADDR_VAR 0 12
76496: PUSH
76497: CALL_OW 44
76501: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
76502: LD_VAR 0 12
76506: PPUSH
76507: LD_VAR 0 8
76511: PPUSH
76512: LD_INT 0
76514: PPUSH
76515: CALL_OW 49
// end ;
76519: GO 76473
76521: POP
76522: POP
// if not wat_area then
76523: LD_VAR 0 9
76527: NOT
76528: IFFALSE 76532
// exit ;
76530: GO 76603
// if fishes then
76532: LD_VAR 0 7
76536: IFFALSE 76603
// for i = 1 to fishes do
76538: LD_ADDR_VAR 0 11
76542: PUSH
76543: DOUBLE
76544: LD_INT 1
76546: DEC
76547: ST_TO_ADDR
76548: LD_VAR 0 7
76552: PUSH
76553: FOR_TO
76554: IFFALSE 76601
// begin hc_class = 20 ;
76556: LD_ADDR_OWVAR 28
76560: PUSH
76561: LD_INT 20
76563: ST_TO_ADDR
// hc_gallery =  ;
76564: LD_ADDR_OWVAR 33
76568: PUSH
76569: LD_STRING 
76571: ST_TO_ADDR
// animal := CreateHuman ;
76572: LD_ADDR_VAR 0 12
76576: PUSH
76577: CALL_OW 44
76581: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
76582: LD_VAR 0 12
76586: PPUSH
76587: LD_VAR 0 9
76591: PPUSH
76592: LD_INT 0
76594: PPUSH
76595: CALL_OW 49
// end ;
76599: GO 76553
76601: POP
76602: POP
// end ;
76603: LD_VAR 0 10
76607: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
76608: LD_INT 0
76610: PPUSH
76611: PPUSH
76612: PPUSH
76613: PPUSH
76614: PPUSH
76615: PPUSH
76616: PPUSH
76617: PPUSH
76618: PPUSH
76619: PPUSH
76620: PPUSH
76621: PPUSH
76622: PPUSH
76623: PPUSH
76624: PPUSH
76625: PPUSH
76626: PPUSH
76627: PPUSH
76628: PPUSH
76629: PPUSH
76630: PPUSH
76631: PPUSH
76632: PPUSH
76633: PPUSH
76634: PPUSH
76635: PPUSH
76636: PPUSH
76637: PPUSH
// if not list then
76638: LD_VAR 0 1
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 79944
// base := list [ 1 ] ;
76647: LD_ADDR_VAR 0 3
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: LD_INT 1
76659: ARRAY
76660: ST_TO_ADDR
// group := list [ 2 ] ;
76661: LD_ADDR_VAR 0 4
76665: PUSH
76666: LD_VAR 0 1
76670: PUSH
76671: LD_INT 2
76673: ARRAY
76674: ST_TO_ADDR
// path := list [ 3 ] ;
76675: LD_ADDR_VAR 0 5
76679: PUSH
76680: LD_VAR 0 1
76684: PUSH
76685: LD_INT 3
76687: ARRAY
76688: ST_TO_ADDR
// flags := list [ 4 ] ;
76689: LD_ADDR_VAR 0 6
76693: PUSH
76694: LD_VAR 0 1
76698: PUSH
76699: LD_INT 4
76701: ARRAY
76702: ST_TO_ADDR
// mined := [ ] ;
76703: LD_ADDR_VAR 0 27
76707: PUSH
76708: EMPTY
76709: ST_TO_ADDR
// bombed := [ ] ;
76710: LD_ADDR_VAR 0 28
76714: PUSH
76715: EMPTY
76716: ST_TO_ADDR
// if not group or not path then
76717: LD_VAR 0 4
76721: NOT
76722: PUSH
76723: LD_VAR 0 5
76727: NOT
76728: OR
76729: IFFALSE 76733
// exit ;
76731: GO 79944
// if flags then
76733: LD_VAR 0 6
76737: IFFALSE 76881
// begin f_ignore_area := flags [ 1 ] ;
76739: LD_ADDR_VAR 0 17
76743: PUSH
76744: LD_VAR 0 6
76748: PUSH
76749: LD_INT 1
76751: ARRAY
76752: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
76753: LD_ADDR_VAR 0 18
76757: PUSH
76758: LD_VAR 0 6
76762: PUSH
76763: LD_INT 2
76765: ARRAY
76766: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
76767: LD_ADDR_VAR 0 19
76771: PUSH
76772: LD_VAR 0 6
76776: PUSH
76777: LD_INT 3
76779: ARRAY
76780: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
76781: LD_ADDR_VAR 0 20
76785: PUSH
76786: LD_VAR 0 6
76790: PUSH
76791: LD_INT 4
76793: ARRAY
76794: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
76795: LD_ADDR_VAR 0 21
76799: PUSH
76800: LD_VAR 0 6
76804: PUSH
76805: LD_INT 5
76807: ARRAY
76808: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
76809: LD_ADDR_VAR 0 22
76813: PUSH
76814: LD_VAR 0 6
76818: PUSH
76819: LD_INT 6
76821: ARRAY
76822: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
76823: LD_ADDR_VAR 0 23
76827: PUSH
76828: LD_VAR 0 6
76832: PUSH
76833: LD_INT 7
76835: ARRAY
76836: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
76837: LD_ADDR_VAR 0 24
76841: PUSH
76842: LD_VAR 0 6
76846: PUSH
76847: LD_INT 8
76849: ARRAY
76850: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
76851: LD_ADDR_VAR 0 25
76855: PUSH
76856: LD_VAR 0 6
76860: PUSH
76861: LD_INT 9
76863: ARRAY
76864: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
76865: LD_ADDR_VAR 0 26
76869: PUSH
76870: LD_VAR 0 6
76874: PUSH
76875: LD_INT 10
76877: ARRAY
76878: ST_TO_ADDR
// end else
76879: GO 76961
// begin f_ignore_area := false ;
76881: LD_ADDR_VAR 0 17
76885: PUSH
76886: LD_INT 0
76888: ST_TO_ADDR
// f_capture := false ;
76889: LD_ADDR_VAR 0 18
76893: PUSH
76894: LD_INT 0
76896: ST_TO_ADDR
// f_ignore_civ := false ;
76897: LD_ADDR_VAR 0 19
76901: PUSH
76902: LD_INT 0
76904: ST_TO_ADDR
// f_murder := false ;
76905: LD_ADDR_VAR 0 20
76909: PUSH
76910: LD_INT 0
76912: ST_TO_ADDR
// f_mines := false ;
76913: LD_ADDR_VAR 0 21
76917: PUSH
76918: LD_INT 0
76920: ST_TO_ADDR
// f_repair := false ;
76921: LD_ADDR_VAR 0 22
76925: PUSH
76926: LD_INT 0
76928: ST_TO_ADDR
// f_heal := false ;
76929: LD_ADDR_VAR 0 23
76933: PUSH
76934: LD_INT 0
76936: ST_TO_ADDR
// f_spacetime := false ;
76937: LD_ADDR_VAR 0 24
76941: PUSH
76942: LD_INT 0
76944: ST_TO_ADDR
// f_attack_depot := false ;
76945: LD_ADDR_VAR 0 25
76949: PUSH
76950: LD_INT 0
76952: ST_TO_ADDR
// f_crawl := false ;
76953: LD_ADDR_VAR 0 26
76957: PUSH
76958: LD_INT 0
76960: ST_TO_ADDR
// end ; units_path := [ ] ;
76961: LD_ADDR_VAR 0 16
76965: PUSH
76966: EMPTY
76967: ST_TO_ADDR
// for i = 1 to group do
76968: LD_ADDR_VAR 0 7
76972: PUSH
76973: DOUBLE
76974: LD_INT 1
76976: DEC
76977: ST_TO_ADDR
76978: LD_VAR 0 4
76982: PUSH
76983: FOR_TO
76984: IFFALSE 77013
// begin units_path := Replace ( units_path , i , path ) ;
76986: LD_ADDR_VAR 0 16
76990: PUSH
76991: LD_VAR 0 16
76995: PPUSH
76996: LD_VAR 0 7
77000: PPUSH
77001: LD_VAR 0 5
77005: PPUSH
77006: CALL_OW 1
77010: ST_TO_ADDR
// end ;
77011: GO 76983
77013: POP
77014: POP
// repeat for i = group downto 1 do
77015: LD_ADDR_VAR 0 7
77019: PUSH
77020: DOUBLE
77021: LD_VAR 0 4
77025: INC
77026: ST_TO_ADDR
77027: LD_INT 1
77029: PUSH
77030: FOR_DOWNTO
77031: IFFALSE 79926
// begin wait ( 0 0$1 ) ;
77033: LD_INT 35
77035: PPUSH
77036: CALL_OW 67
// tmp := [ ] ;
77040: LD_ADDR_VAR 0 14
77044: PUSH
77045: EMPTY
77046: ST_TO_ADDR
// attacking := false ;
77047: LD_ADDR_VAR 0 29
77051: PUSH
77052: LD_INT 0
77054: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
77055: LD_VAR 0 4
77059: PUSH
77060: LD_VAR 0 7
77064: ARRAY
77065: PPUSH
77066: CALL_OW 301
77070: PUSH
77071: LD_VAR 0 4
77075: PUSH
77076: LD_VAR 0 7
77080: ARRAY
77081: NOT
77082: OR
77083: IFFALSE 77127
// begin group := Delete ( group , i ) ;
77085: LD_ADDR_VAR 0 4
77089: PUSH
77090: LD_VAR 0 4
77094: PPUSH
77095: LD_VAR 0 7
77099: PPUSH
77100: CALL_OW 3
77104: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
77105: LD_ADDR_VAR 0 16
77109: PUSH
77110: LD_VAR 0 16
77114: PPUSH
77115: LD_VAR 0 7
77119: PPUSH
77120: CALL_OW 3
77124: ST_TO_ADDR
// continue ;
77125: GO 77030
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
77127: LD_VAR 0 4
77131: PUSH
77132: LD_VAR 0 7
77136: ARRAY
77137: PPUSH
77138: LD_INT 10
77140: PPUSH
77141: CALL 75095 0 2
77145: NOT
77146: PUSH
77147: LD_VAR 0 16
77151: PUSH
77152: LD_VAR 0 7
77156: ARRAY
77157: PUSH
77158: EMPTY
77159: EQUAL
77160: NOT
77161: AND
77162: IFFALSE 77428
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
77164: LD_VAR 0 4
77168: PUSH
77169: LD_VAR 0 7
77173: ARRAY
77174: PPUSH
77175: CALL_OW 262
77179: PUSH
77180: LD_INT 1
77182: PUSH
77183: LD_INT 2
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: IN
77190: IFFALSE 77231
// if GetFuel ( group [ i ] ) < 10 then
77192: LD_VAR 0 4
77196: PUSH
77197: LD_VAR 0 7
77201: ARRAY
77202: PPUSH
77203: CALL_OW 261
77207: PUSH
77208: LD_INT 10
77210: LESS
77211: IFFALSE 77231
// SetFuel ( group [ i ] , 12 ) ;
77213: LD_VAR 0 4
77217: PUSH
77218: LD_VAR 0 7
77222: ARRAY
77223: PPUSH
77224: LD_INT 12
77226: PPUSH
77227: CALL_OW 240
// if units_path [ i ] then
77231: LD_VAR 0 16
77235: PUSH
77236: LD_VAR 0 7
77240: ARRAY
77241: IFFALSE 77426
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
77243: LD_VAR 0 4
77247: PUSH
77248: LD_VAR 0 7
77252: ARRAY
77253: PPUSH
77254: LD_VAR 0 16
77258: PUSH
77259: LD_VAR 0 7
77263: ARRAY
77264: PUSH
77265: LD_INT 1
77267: ARRAY
77268: PUSH
77269: LD_INT 1
77271: ARRAY
77272: PPUSH
77273: LD_VAR 0 16
77277: PUSH
77278: LD_VAR 0 7
77282: ARRAY
77283: PUSH
77284: LD_INT 1
77286: ARRAY
77287: PUSH
77288: LD_INT 2
77290: ARRAY
77291: PPUSH
77292: CALL_OW 297
77296: PUSH
77297: LD_INT 6
77299: GREATER
77300: IFFALSE 77375
// begin if not HasTask ( group [ i ] ) then
77302: LD_VAR 0 4
77306: PUSH
77307: LD_VAR 0 7
77311: ARRAY
77312: PPUSH
77313: CALL_OW 314
77317: NOT
77318: IFFALSE 77373
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
77320: LD_VAR 0 4
77324: PUSH
77325: LD_VAR 0 7
77329: ARRAY
77330: PPUSH
77331: LD_VAR 0 16
77335: PUSH
77336: LD_VAR 0 7
77340: ARRAY
77341: PUSH
77342: LD_INT 1
77344: ARRAY
77345: PUSH
77346: LD_INT 1
77348: ARRAY
77349: PPUSH
77350: LD_VAR 0 16
77354: PUSH
77355: LD_VAR 0 7
77359: ARRAY
77360: PUSH
77361: LD_INT 1
77363: ARRAY
77364: PUSH
77365: LD_INT 2
77367: ARRAY
77368: PPUSH
77369: CALL_OW 114
// end else
77373: GO 77426
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
77375: LD_ADDR_VAR 0 15
77379: PUSH
77380: LD_VAR 0 16
77384: PUSH
77385: LD_VAR 0 7
77389: ARRAY
77390: PPUSH
77391: LD_INT 1
77393: PPUSH
77394: CALL_OW 3
77398: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
77399: LD_ADDR_VAR 0 16
77403: PUSH
77404: LD_VAR 0 16
77408: PPUSH
77409: LD_VAR 0 7
77413: PPUSH
77414: LD_VAR 0 15
77418: PPUSH
77419: CALL_OW 1
77423: ST_TO_ADDR
// continue ;
77424: GO 77030
// end ; end ; end else
77426: GO 79924
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
77428: LD_ADDR_VAR 0 14
77432: PUSH
77433: LD_INT 81
77435: PUSH
77436: LD_VAR 0 4
77440: PUSH
77441: LD_VAR 0 7
77445: ARRAY
77446: PPUSH
77447: CALL_OW 255
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PPUSH
77456: CALL_OW 69
77460: ST_TO_ADDR
// if not tmp then
77461: LD_VAR 0 14
77465: NOT
77466: IFFALSE 77470
// continue ;
77468: GO 77030
// if f_ignore_area then
77470: LD_VAR 0 17
77474: IFFALSE 77562
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
77476: LD_ADDR_VAR 0 15
77480: PUSH
77481: LD_VAR 0 14
77485: PPUSH
77486: LD_INT 3
77488: PUSH
77489: LD_INT 92
77491: PUSH
77492: LD_VAR 0 17
77496: PUSH
77497: LD_INT 1
77499: ARRAY
77500: PUSH
77501: LD_VAR 0 17
77505: PUSH
77506: LD_INT 2
77508: ARRAY
77509: PUSH
77510: LD_VAR 0 17
77514: PUSH
77515: LD_INT 3
77517: ARRAY
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PPUSH
77529: CALL_OW 72
77533: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
77534: LD_VAR 0 14
77538: PUSH
77539: LD_VAR 0 15
77543: DIFF
77544: IFFALSE 77562
// tmp := tmp diff tmp2 ;
77546: LD_ADDR_VAR 0 14
77550: PUSH
77551: LD_VAR 0 14
77555: PUSH
77556: LD_VAR 0 15
77560: DIFF
77561: ST_TO_ADDR
// end ; if not f_murder then
77562: LD_VAR 0 20
77566: NOT
77567: IFFALSE 77625
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
77569: LD_ADDR_VAR 0 15
77573: PUSH
77574: LD_VAR 0 14
77578: PPUSH
77579: LD_INT 3
77581: PUSH
77582: LD_INT 50
77584: PUSH
77585: EMPTY
77586: LIST
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PPUSH
77592: CALL_OW 72
77596: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
77597: LD_VAR 0 14
77601: PUSH
77602: LD_VAR 0 15
77606: DIFF
77607: IFFALSE 77625
// tmp := tmp diff tmp2 ;
77609: LD_ADDR_VAR 0 14
77613: PUSH
77614: LD_VAR 0 14
77618: PUSH
77619: LD_VAR 0 15
77623: DIFF
77624: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
77625: LD_ADDR_VAR 0 14
77629: PUSH
77630: LD_VAR 0 4
77634: PUSH
77635: LD_VAR 0 7
77639: ARRAY
77640: PPUSH
77641: LD_VAR 0 14
77645: PPUSH
77646: LD_INT 1
77648: PPUSH
77649: LD_INT 1
77651: PPUSH
77652: CALL 49097 0 4
77656: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
77657: LD_VAR 0 4
77661: PUSH
77662: LD_VAR 0 7
77666: ARRAY
77667: PPUSH
77668: CALL_OW 257
77672: PUSH
77673: LD_INT 1
77675: EQUAL
77676: IFFALSE 78124
// begin if WantPlant ( group [ i ] ) then
77678: LD_VAR 0 4
77682: PUSH
77683: LD_VAR 0 7
77687: ARRAY
77688: PPUSH
77689: CALL 48565 0 1
77693: IFFALSE 77697
// continue ;
77695: GO 77030
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
77697: LD_VAR 0 18
77701: PUSH
77702: LD_VAR 0 4
77706: PUSH
77707: LD_VAR 0 7
77711: ARRAY
77712: PPUSH
77713: CALL_OW 310
77717: NOT
77718: AND
77719: PUSH
77720: LD_VAR 0 14
77724: PUSH
77725: LD_INT 1
77727: ARRAY
77728: PUSH
77729: LD_VAR 0 14
77733: PPUSH
77734: LD_INT 21
77736: PUSH
77737: LD_INT 2
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: LD_INT 58
77746: PUSH
77747: EMPTY
77748: LIST
77749: PUSH
77750: EMPTY
77751: LIST
77752: LIST
77753: PPUSH
77754: CALL_OW 72
77758: IN
77759: AND
77760: IFFALSE 77796
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
77762: LD_VAR 0 4
77766: PUSH
77767: LD_VAR 0 7
77771: ARRAY
77772: PPUSH
77773: LD_VAR 0 14
77777: PUSH
77778: LD_INT 1
77780: ARRAY
77781: PPUSH
77782: CALL_OW 120
// attacking := true ;
77786: LD_ADDR_VAR 0 29
77790: PUSH
77791: LD_INT 1
77793: ST_TO_ADDR
// continue ;
77794: GO 77030
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
77796: LD_VAR 0 26
77800: PUSH
77801: LD_VAR 0 4
77805: PUSH
77806: LD_VAR 0 7
77810: ARRAY
77811: PPUSH
77812: CALL_OW 257
77816: PUSH
77817: LD_INT 1
77819: EQUAL
77820: AND
77821: PUSH
77822: LD_VAR 0 4
77826: PUSH
77827: LD_VAR 0 7
77831: ARRAY
77832: PPUSH
77833: CALL_OW 256
77837: PUSH
77838: LD_INT 800
77840: LESS
77841: AND
77842: PUSH
77843: LD_VAR 0 4
77847: PUSH
77848: LD_VAR 0 7
77852: ARRAY
77853: PPUSH
77854: CALL_OW 318
77858: NOT
77859: AND
77860: IFFALSE 77877
// ComCrawl ( group [ i ] ) ;
77862: LD_VAR 0 4
77866: PUSH
77867: LD_VAR 0 7
77871: ARRAY
77872: PPUSH
77873: CALL_OW 137
// if f_mines then
77877: LD_VAR 0 21
77881: IFFALSE 78124
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
77883: LD_VAR 0 14
77887: PUSH
77888: LD_INT 1
77890: ARRAY
77891: PPUSH
77892: CALL_OW 247
77896: PUSH
77897: LD_INT 3
77899: EQUAL
77900: PUSH
77901: LD_VAR 0 14
77905: PUSH
77906: LD_INT 1
77908: ARRAY
77909: PUSH
77910: LD_VAR 0 27
77914: IN
77915: NOT
77916: AND
77917: IFFALSE 78124
// begin x := GetX ( tmp [ 1 ] ) ;
77919: LD_ADDR_VAR 0 10
77923: PUSH
77924: LD_VAR 0 14
77928: PUSH
77929: LD_INT 1
77931: ARRAY
77932: PPUSH
77933: CALL_OW 250
77937: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
77938: LD_ADDR_VAR 0 11
77942: PUSH
77943: LD_VAR 0 14
77947: PUSH
77948: LD_INT 1
77950: ARRAY
77951: PPUSH
77952: CALL_OW 251
77956: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
77957: LD_ADDR_VAR 0 12
77961: PUSH
77962: LD_VAR 0 4
77966: PUSH
77967: LD_VAR 0 7
77971: ARRAY
77972: PPUSH
77973: CALL 75180 0 1
77977: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
77978: LD_VAR 0 4
77982: PUSH
77983: LD_VAR 0 7
77987: ARRAY
77988: PPUSH
77989: LD_VAR 0 10
77993: PPUSH
77994: LD_VAR 0 11
77998: PPUSH
77999: LD_VAR 0 14
78003: PUSH
78004: LD_INT 1
78006: ARRAY
78007: PPUSH
78008: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
78012: LD_VAR 0 4
78016: PUSH
78017: LD_VAR 0 7
78021: ARRAY
78022: PPUSH
78023: LD_VAR 0 10
78027: PPUSH
78028: LD_VAR 0 12
78032: PPUSH
78033: LD_INT 7
78035: PPUSH
78036: CALL_OW 272
78040: PPUSH
78041: LD_VAR 0 11
78045: PPUSH
78046: LD_VAR 0 12
78050: PPUSH
78051: LD_INT 7
78053: PPUSH
78054: CALL_OW 273
78058: PPUSH
78059: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
78063: LD_VAR 0 4
78067: PUSH
78068: LD_VAR 0 7
78072: ARRAY
78073: PPUSH
78074: LD_INT 71
78076: PPUSH
78077: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
78081: LD_ADDR_VAR 0 27
78085: PUSH
78086: LD_VAR 0 27
78090: PPUSH
78091: LD_VAR 0 27
78095: PUSH
78096: LD_INT 1
78098: PLUS
78099: PPUSH
78100: LD_VAR 0 14
78104: PUSH
78105: LD_INT 1
78107: ARRAY
78108: PPUSH
78109: CALL_OW 1
78113: ST_TO_ADDR
// attacking := true ;
78114: LD_ADDR_VAR 0 29
78118: PUSH
78119: LD_INT 1
78121: ST_TO_ADDR
// continue ;
78122: GO 77030
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
78124: LD_VAR 0 4
78128: PUSH
78129: LD_VAR 0 7
78133: ARRAY
78134: PPUSH
78135: CALL_OW 257
78139: PUSH
78140: LD_INT 17
78142: EQUAL
78143: PUSH
78144: LD_VAR 0 4
78148: PUSH
78149: LD_VAR 0 7
78153: ARRAY
78154: PPUSH
78155: CALL_OW 110
78159: PUSH
78160: LD_INT 71
78162: EQUAL
78163: NOT
78164: AND
78165: IFFALSE 78311
// begin attacking := false ;
78167: LD_ADDR_VAR 0 29
78171: PUSH
78172: LD_INT 0
78174: ST_TO_ADDR
// k := 5 ;
78175: LD_ADDR_VAR 0 9
78179: PUSH
78180: LD_INT 5
78182: ST_TO_ADDR
// if tmp < k then
78183: LD_VAR 0 14
78187: PUSH
78188: LD_VAR 0 9
78192: LESS
78193: IFFALSE 78205
// k := tmp ;
78195: LD_ADDR_VAR 0 9
78199: PUSH
78200: LD_VAR 0 14
78204: ST_TO_ADDR
// for j = 1 to k do
78205: LD_ADDR_VAR 0 8
78209: PUSH
78210: DOUBLE
78211: LD_INT 1
78213: DEC
78214: ST_TO_ADDR
78215: LD_VAR 0 9
78219: PUSH
78220: FOR_TO
78221: IFFALSE 78309
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
78223: LD_VAR 0 14
78227: PUSH
78228: LD_VAR 0 8
78232: ARRAY
78233: PUSH
78234: LD_VAR 0 14
78238: PPUSH
78239: LD_INT 58
78241: PUSH
78242: EMPTY
78243: LIST
78244: PPUSH
78245: CALL_OW 72
78249: IN
78250: NOT
78251: IFFALSE 78307
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
78253: LD_VAR 0 4
78257: PUSH
78258: LD_VAR 0 7
78262: ARRAY
78263: PPUSH
78264: LD_VAR 0 14
78268: PUSH
78269: LD_VAR 0 8
78273: ARRAY
78274: PPUSH
78275: CALL_OW 115
// attacking := true ;
78279: LD_ADDR_VAR 0 29
78283: PUSH
78284: LD_INT 1
78286: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
78287: LD_VAR 0 4
78291: PUSH
78292: LD_VAR 0 7
78296: ARRAY
78297: PPUSH
78298: LD_INT 71
78300: PPUSH
78301: CALL_OW 109
// continue ;
78305: GO 78220
// end ; end ;
78307: GO 78220
78309: POP
78310: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
78311: LD_VAR 0 4
78315: PUSH
78316: LD_VAR 0 7
78320: ARRAY
78321: PPUSH
78322: CALL_OW 257
78326: PUSH
78327: LD_INT 8
78329: EQUAL
78330: PUSH
78331: LD_VAR 0 4
78335: PUSH
78336: LD_VAR 0 7
78340: ARRAY
78341: PPUSH
78342: CALL_OW 264
78346: PUSH
78347: LD_INT 28
78349: PUSH
78350: LD_INT 45
78352: PUSH
78353: LD_INT 7
78355: PUSH
78356: LD_INT 47
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: LIST
78363: LIST
78364: IN
78365: OR
78366: IFFALSE 78596
// begin attacking := false ;
78368: LD_ADDR_VAR 0 29
78372: PUSH
78373: LD_INT 0
78375: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
78376: LD_VAR 0 14
78380: PUSH
78381: LD_INT 1
78383: ARRAY
78384: PPUSH
78385: CALL_OW 266
78389: PUSH
78390: LD_INT 32
78392: PUSH
78393: LD_INT 31
78395: PUSH
78396: LD_INT 33
78398: PUSH
78399: LD_INT 4
78401: PUSH
78402: LD_INT 5
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: IN
78412: IFFALSE 78596
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
78414: LD_ADDR_VAR 0 9
78418: PUSH
78419: LD_VAR 0 14
78423: PUSH
78424: LD_INT 1
78426: ARRAY
78427: PPUSH
78428: CALL_OW 266
78432: PPUSH
78433: LD_VAR 0 14
78437: PUSH
78438: LD_INT 1
78440: ARRAY
78441: PPUSH
78442: CALL_OW 250
78446: PPUSH
78447: LD_VAR 0 14
78451: PUSH
78452: LD_INT 1
78454: ARRAY
78455: PPUSH
78456: CALL_OW 251
78460: PPUSH
78461: LD_VAR 0 14
78465: PUSH
78466: LD_INT 1
78468: ARRAY
78469: PPUSH
78470: CALL_OW 254
78474: PPUSH
78475: LD_VAR 0 14
78479: PUSH
78480: LD_INT 1
78482: ARRAY
78483: PPUSH
78484: CALL_OW 248
78488: PPUSH
78489: LD_INT 0
78491: PPUSH
78492: CALL 56556 0 6
78496: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
78497: LD_ADDR_VAR 0 8
78501: PUSH
78502: LD_VAR 0 4
78506: PUSH
78507: LD_VAR 0 7
78511: ARRAY
78512: PPUSH
78513: LD_VAR 0 9
78517: PPUSH
78518: CALL 75243 0 2
78522: ST_TO_ADDR
// if j then
78523: LD_VAR 0 8
78527: IFFALSE 78596
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
78529: LD_VAR 0 8
78533: PUSH
78534: LD_INT 1
78536: ARRAY
78537: PPUSH
78538: LD_VAR 0 8
78542: PUSH
78543: LD_INT 2
78545: ARRAY
78546: PPUSH
78547: CALL_OW 488
78551: IFFALSE 78596
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
78553: LD_VAR 0 4
78557: PUSH
78558: LD_VAR 0 7
78562: ARRAY
78563: PPUSH
78564: LD_VAR 0 8
78568: PUSH
78569: LD_INT 1
78571: ARRAY
78572: PPUSH
78573: LD_VAR 0 8
78577: PUSH
78578: LD_INT 2
78580: ARRAY
78581: PPUSH
78582: CALL_OW 116
// attacking := true ;
78586: LD_ADDR_VAR 0 29
78590: PUSH
78591: LD_INT 1
78593: ST_TO_ADDR
// continue ;
78594: GO 77030
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
78596: LD_VAR 0 4
78600: PUSH
78601: LD_VAR 0 7
78605: ARRAY
78606: PPUSH
78607: CALL_OW 265
78611: PUSH
78612: LD_INT 11
78614: EQUAL
78615: IFFALSE 78893
// begin k := 10 ;
78617: LD_ADDR_VAR 0 9
78621: PUSH
78622: LD_INT 10
78624: ST_TO_ADDR
// x := 0 ;
78625: LD_ADDR_VAR 0 10
78629: PUSH
78630: LD_INT 0
78632: ST_TO_ADDR
// if tmp < k then
78633: LD_VAR 0 14
78637: PUSH
78638: LD_VAR 0 9
78642: LESS
78643: IFFALSE 78655
// k := tmp ;
78645: LD_ADDR_VAR 0 9
78649: PUSH
78650: LD_VAR 0 14
78654: ST_TO_ADDR
// for j = k downto 1 do
78655: LD_ADDR_VAR 0 8
78659: PUSH
78660: DOUBLE
78661: LD_VAR 0 9
78665: INC
78666: ST_TO_ADDR
78667: LD_INT 1
78669: PUSH
78670: FOR_DOWNTO
78671: IFFALSE 78746
// begin if GetType ( tmp [ j ] ) = unit_human then
78673: LD_VAR 0 14
78677: PUSH
78678: LD_VAR 0 8
78682: ARRAY
78683: PPUSH
78684: CALL_OW 247
78688: PUSH
78689: LD_INT 1
78691: EQUAL
78692: IFFALSE 78744
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
78694: LD_VAR 0 4
78698: PUSH
78699: LD_VAR 0 7
78703: ARRAY
78704: PPUSH
78705: LD_VAR 0 14
78709: PUSH
78710: LD_VAR 0 8
78714: ARRAY
78715: PPUSH
78716: CALL 75514 0 2
// x := tmp [ j ] ;
78720: LD_ADDR_VAR 0 10
78724: PUSH
78725: LD_VAR 0 14
78729: PUSH
78730: LD_VAR 0 8
78734: ARRAY
78735: ST_TO_ADDR
// attacking := true ;
78736: LD_ADDR_VAR 0 29
78740: PUSH
78741: LD_INT 1
78743: ST_TO_ADDR
// end ; end ;
78744: GO 78670
78746: POP
78747: POP
// if not x then
78748: LD_VAR 0 10
78752: NOT
78753: IFFALSE 78893
// begin attacking := true ;
78755: LD_ADDR_VAR 0 29
78759: PUSH
78760: LD_INT 1
78762: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
78763: LD_VAR 0 4
78767: PUSH
78768: LD_VAR 0 7
78772: ARRAY
78773: PPUSH
78774: CALL_OW 250
78778: PPUSH
78779: LD_VAR 0 4
78783: PUSH
78784: LD_VAR 0 7
78788: ARRAY
78789: PPUSH
78790: CALL_OW 251
78794: PPUSH
78795: CALL_OW 546
78799: PUSH
78800: LD_INT 2
78802: ARRAY
78803: PUSH
78804: LD_VAR 0 14
78808: PUSH
78809: LD_INT 1
78811: ARRAY
78812: PPUSH
78813: CALL_OW 250
78817: PPUSH
78818: LD_VAR 0 14
78822: PUSH
78823: LD_INT 1
78825: ARRAY
78826: PPUSH
78827: CALL_OW 251
78831: PPUSH
78832: CALL_OW 546
78836: PUSH
78837: LD_INT 2
78839: ARRAY
78840: EQUAL
78841: IFFALSE 78869
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
78843: LD_VAR 0 4
78847: PUSH
78848: LD_VAR 0 7
78852: ARRAY
78853: PPUSH
78854: LD_VAR 0 14
78858: PUSH
78859: LD_INT 1
78861: ARRAY
78862: PPUSH
78863: CALL 75514 0 2
78867: GO 78893
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
78869: LD_VAR 0 4
78873: PUSH
78874: LD_VAR 0 7
78878: ARRAY
78879: PPUSH
78880: LD_VAR 0 14
78884: PUSH
78885: LD_INT 1
78887: ARRAY
78888: PPUSH
78889: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
78893: LD_VAR 0 4
78897: PUSH
78898: LD_VAR 0 7
78902: ARRAY
78903: PPUSH
78904: CALL_OW 264
78908: PUSH
78909: LD_INT 29
78911: EQUAL
78912: IFFALSE 79278
// begin if WantsToAttack ( group [ i ] ) in bombed then
78914: LD_VAR 0 4
78918: PUSH
78919: LD_VAR 0 7
78923: ARRAY
78924: PPUSH
78925: CALL_OW 319
78929: PUSH
78930: LD_VAR 0 28
78934: IN
78935: IFFALSE 78939
// continue ;
78937: GO 77030
// k := 8 ;
78939: LD_ADDR_VAR 0 9
78943: PUSH
78944: LD_INT 8
78946: ST_TO_ADDR
// x := 0 ;
78947: LD_ADDR_VAR 0 10
78951: PUSH
78952: LD_INT 0
78954: ST_TO_ADDR
// if tmp < k then
78955: LD_VAR 0 14
78959: PUSH
78960: LD_VAR 0 9
78964: LESS
78965: IFFALSE 78977
// k := tmp ;
78967: LD_ADDR_VAR 0 9
78971: PUSH
78972: LD_VAR 0 14
78976: ST_TO_ADDR
// for j = 1 to k do
78977: LD_ADDR_VAR 0 8
78981: PUSH
78982: DOUBLE
78983: LD_INT 1
78985: DEC
78986: ST_TO_ADDR
78987: LD_VAR 0 9
78991: PUSH
78992: FOR_TO
78993: IFFALSE 79125
// begin if GetType ( tmp [ j ] ) = unit_building then
78995: LD_VAR 0 14
78999: PUSH
79000: LD_VAR 0 8
79004: ARRAY
79005: PPUSH
79006: CALL_OW 247
79010: PUSH
79011: LD_INT 3
79013: EQUAL
79014: IFFALSE 79123
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
79016: LD_VAR 0 14
79020: PUSH
79021: LD_VAR 0 8
79025: ARRAY
79026: PUSH
79027: LD_VAR 0 28
79031: IN
79032: NOT
79033: PUSH
79034: LD_VAR 0 14
79038: PUSH
79039: LD_VAR 0 8
79043: ARRAY
79044: PPUSH
79045: CALL_OW 313
79049: AND
79050: IFFALSE 79123
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
79052: LD_VAR 0 4
79056: PUSH
79057: LD_VAR 0 7
79061: ARRAY
79062: PPUSH
79063: LD_VAR 0 14
79067: PUSH
79068: LD_VAR 0 8
79072: ARRAY
79073: PPUSH
79074: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
79078: LD_ADDR_VAR 0 28
79082: PUSH
79083: LD_VAR 0 28
79087: PPUSH
79088: LD_VAR 0 28
79092: PUSH
79093: LD_INT 1
79095: PLUS
79096: PPUSH
79097: LD_VAR 0 14
79101: PUSH
79102: LD_VAR 0 8
79106: ARRAY
79107: PPUSH
79108: CALL_OW 1
79112: ST_TO_ADDR
// attacking := true ;
79113: LD_ADDR_VAR 0 29
79117: PUSH
79118: LD_INT 1
79120: ST_TO_ADDR
// break ;
79121: GO 79125
// end ; end ;
79123: GO 78992
79125: POP
79126: POP
// if not attacking and f_attack_depot then
79127: LD_VAR 0 29
79131: NOT
79132: PUSH
79133: LD_VAR 0 25
79137: AND
79138: IFFALSE 79233
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79140: LD_ADDR_VAR 0 13
79144: PUSH
79145: LD_VAR 0 14
79149: PPUSH
79150: LD_INT 2
79152: PUSH
79153: LD_INT 30
79155: PUSH
79156: LD_INT 0
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: LD_INT 30
79165: PUSH
79166: LD_INT 1
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: LIST
79177: PPUSH
79178: CALL_OW 72
79182: ST_TO_ADDR
// if z then
79183: LD_VAR 0 13
79187: IFFALSE 79233
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
79189: LD_VAR 0 4
79193: PUSH
79194: LD_VAR 0 7
79198: ARRAY
79199: PPUSH
79200: LD_VAR 0 13
79204: PPUSH
79205: LD_VAR 0 4
79209: PUSH
79210: LD_VAR 0 7
79214: ARRAY
79215: PPUSH
79216: CALL_OW 74
79220: PPUSH
79221: CALL_OW 115
// attacking := true ;
79225: LD_ADDR_VAR 0 29
79229: PUSH
79230: LD_INT 1
79232: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
79233: LD_VAR 0 4
79237: PUSH
79238: LD_VAR 0 7
79242: ARRAY
79243: PPUSH
79244: CALL_OW 256
79248: PUSH
79249: LD_INT 500
79251: LESS
79252: IFFALSE 79278
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
79254: LD_VAR 0 4
79258: PUSH
79259: LD_VAR 0 7
79263: ARRAY
79264: PPUSH
79265: LD_VAR 0 14
79269: PUSH
79270: LD_INT 1
79272: ARRAY
79273: PPUSH
79274: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79278: LD_VAR 0 4
79282: PUSH
79283: LD_VAR 0 7
79287: ARRAY
79288: PPUSH
79289: CALL_OW 256
79293: PUSH
79294: LD_INT 250
79296: LESS
79297: PUSH
79298: LD_VAR 0 4
79302: PUSH
79303: LD_VAR 0 7
79307: ARRAY
79308: PUSH
79309: LD_INT 21
79311: PUSH
79312: LD_INT 2
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: LD_INT 23
79321: PUSH
79322: LD_INT 2
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PPUSH
79333: CALL_OW 69
79337: IN
79338: AND
79339: IFFALSE 79464
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
79341: LD_ADDR_VAR 0 9
79345: PUSH
79346: LD_OWVAR 3
79350: PUSH
79351: LD_VAR 0 4
79355: PUSH
79356: LD_VAR 0 7
79360: ARRAY
79361: DIFF
79362: PPUSH
79363: LD_VAR 0 4
79367: PUSH
79368: LD_VAR 0 7
79372: ARRAY
79373: PPUSH
79374: CALL_OW 74
79378: ST_TO_ADDR
// if not k then
79379: LD_VAR 0 9
79383: NOT
79384: IFFALSE 79388
// continue ;
79386: GO 77030
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
79388: LD_VAR 0 9
79392: PUSH
79393: LD_INT 81
79395: PUSH
79396: LD_VAR 0 4
79400: PUSH
79401: LD_VAR 0 7
79405: ARRAY
79406: PPUSH
79407: CALL_OW 255
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PPUSH
79416: CALL_OW 69
79420: IN
79421: PUSH
79422: LD_VAR 0 9
79426: PPUSH
79427: LD_VAR 0 4
79431: PUSH
79432: LD_VAR 0 7
79436: ARRAY
79437: PPUSH
79438: CALL_OW 296
79442: PUSH
79443: LD_INT 5
79445: LESS
79446: AND
79447: IFFALSE 79464
// ComAutodestruct ( group [ i ] ) ;
79449: LD_VAR 0 4
79453: PUSH
79454: LD_VAR 0 7
79458: ARRAY
79459: PPUSH
79460: CALL 75412 0 1
// end ; if f_attack_depot then
79464: LD_VAR 0 25
79468: IFFALSE 79580
// begin k := 6 ;
79470: LD_ADDR_VAR 0 9
79474: PUSH
79475: LD_INT 6
79477: ST_TO_ADDR
// if tmp < k then
79478: LD_VAR 0 14
79482: PUSH
79483: LD_VAR 0 9
79487: LESS
79488: IFFALSE 79500
// k := tmp ;
79490: LD_ADDR_VAR 0 9
79494: PUSH
79495: LD_VAR 0 14
79499: ST_TO_ADDR
// for j = 1 to k do
79500: LD_ADDR_VAR 0 8
79504: PUSH
79505: DOUBLE
79506: LD_INT 1
79508: DEC
79509: ST_TO_ADDR
79510: LD_VAR 0 9
79514: PUSH
79515: FOR_TO
79516: IFFALSE 79578
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
79518: LD_VAR 0 8
79522: PPUSH
79523: CALL_OW 266
79527: PUSH
79528: LD_INT 0
79530: PUSH
79531: LD_INT 1
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: IN
79538: IFFALSE 79576
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
79540: LD_VAR 0 4
79544: PUSH
79545: LD_VAR 0 7
79549: ARRAY
79550: PPUSH
79551: LD_VAR 0 14
79555: PUSH
79556: LD_VAR 0 8
79560: ARRAY
79561: PPUSH
79562: CALL_OW 115
// attacking := true ;
79566: LD_ADDR_VAR 0 29
79570: PUSH
79571: LD_INT 1
79573: ST_TO_ADDR
// break ;
79574: GO 79578
// end ;
79576: GO 79515
79578: POP
79579: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
79580: LD_VAR 0 4
79584: PUSH
79585: LD_VAR 0 7
79589: ARRAY
79590: PPUSH
79591: CALL_OW 302
79595: PUSH
79596: LD_VAR 0 29
79600: NOT
79601: AND
79602: IFFALSE 79924
// begin if GetTag ( group [ i ] ) = 71 then
79604: LD_VAR 0 4
79608: PUSH
79609: LD_VAR 0 7
79613: ARRAY
79614: PPUSH
79615: CALL_OW 110
79619: PUSH
79620: LD_INT 71
79622: EQUAL
79623: IFFALSE 79664
// begin if HasTask ( group [ i ] ) then
79625: LD_VAR 0 4
79629: PUSH
79630: LD_VAR 0 7
79634: ARRAY
79635: PPUSH
79636: CALL_OW 314
79640: IFFALSE 79646
// continue else
79642: GO 77030
79644: GO 79664
// SetTag ( group [ i ] , 0 ) ;
79646: LD_VAR 0 4
79650: PUSH
79651: LD_VAR 0 7
79655: ARRAY
79656: PPUSH
79657: LD_INT 0
79659: PPUSH
79660: CALL_OW 109
// end ; k := 8 ;
79664: LD_ADDR_VAR 0 9
79668: PUSH
79669: LD_INT 8
79671: ST_TO_ADDR
// x := 0 ;
79672: LD_ADDR_VAR 0 10
79676: PUSH
79677: LD_INT 0
79679: ST_TO_ADDR
// if tmp < k then
79680: LD_VAR 0 14
79684: PUSH
79685: LD_VAR 0 9
79689: LESS
79690: IFFALSE 79702
// k := tmp ;
79692: LD_ADDR_VAR 0 9
79696: PUSH
79697: LD_VAR 0 14
79701: ST_TO_ADDR
// for j = 1 to k do
79702: LD_ADDR_VAR 0 8
79706: PUSH
79707: DOUBLE
79708: LD_INT 1
79710: DEC
79711: ST_TO_ADDR
79712: LD_VAR 0 9
79716: PUSH
79717: FOR_TO
79718: IFFALSE 79816
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
79720: LD_VAR 0 14
79724: PUSH
79725: LD_VAR 0 8
79729: ARRAY
79730: PPUSH
79731: CALL_OW 247
79735: PUSH
79736: LD_INT 1
79738: EQUAL
79739: PUSH
79740: LD_VAR 0 14
79744: PUSH
79745: LD_VAR 0 8
79749: ARRAY
79750: PPUSH
79751: CALL_OW 256
79755: PUSH
79756: LD_INT 250
79758: LESS
79759: PUSH
79760: LD_VAR 0 20
79764: AND
79765: PUSH
79766: LD_VAR 0 20
79770: NOT
79771: PUSH
79772: LD_VAR 0 14
79776: PUSH
79777: LD_VAR 0 8
79781: ARRAY
79782: PPUSH
79783: CALL_OW 256
79787: PUSH
79788: LD_INT 250
79790: GREATEREQUAL
79791: AND
79792: OR
79793: AND
79794: IFFALSE 79814
// begin x := tmp [ j ] ;
79796: LD_ADDR_VAR 0 10
79800: PUSH
79801: LD_VAR 0 14
79805: PUSH
79806: LD_VAR 0 8
79810: ARRAY
79811: ST_TO_ADDR
// break ;
79812: GO 79816
// end ;
79814: GO 79717
79816: POP
79817: POP
// if x then
79818: LD_VAR 0 10
79822: IFFALSE 79846
// ComAttackUnit ( group [ i ] , x ) else
79824: LD_VAR 0 4
79828: PUSH
79829: LD_VAR 0 7
79833: ARRAY
79834: PPUSH
79835: LD_VAR 0 10
79839: PPUSH
79840: CALL_OW 115
79844: GO 79870
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
79846: LD_VAR 0 4
79850: PUSH
79851: LD_VAR 0 7
79855: ARRAY
79856: PPUSH
79857: LD_VAR 0 14
79861: PUSH
79862: LD_INT 1
79864: ARRAY
79865: PPUSH
79866: CALL_OW 115
// if not HasTask ( group [ i ] ) then
79870: LD_VAR 0 4
79874: PUSH
79875: LD_VAR 0 7
79879: ARRAY
79880: PPUSH
79881: CALL_OW 314
79885: NOT
79886: IFFALSE 79924
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
79888: LD_VAR 0 4
79892: PUSH
79893: LD_VAR 0 7
79897: ARRAY
79898: PPUSH
79899: LD_VAR 0 14
79903: PPUSH
79904: LD_VAR 0 4
79908: PUSH
79909: LD_VAR 0 7
79913: ARRAY
79914: PPUSH
79915: CALL_OW 74
79919: PPUSH
79920: CALL_OW 115
// end ; end ; end ;
79924: GO 77030
79926: POP
79927: POP
// wait ( 0 0$1 ) ;
79928: LD_INT 35
79930: PPUSH
79931: CALL_OW 67
// until group = [ ] ;
79935: LD_VAR 0 4
79939: PUSH
79940: EMPTY
79941: EQUAL
79942: IFFALSE 77015
// end ;
79944: LD_VAR 0 2
79948: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
79949: LD_INT 0
79951: PPUSH
79952: PPUSH
79953: PPUSH
79954: PPUSH
// if not base_units then
79955: LD_VAR 0 1
79959: NOT
79960: IFFALSE 79964
// exit ;
79962: GO 80051
// result := false ;
79964: LD_ADDR_VAR 0 2
79968: PUSH
79969: LD_INT 0
79971: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
79972: LD_ADDR_VAR 0 5
79976: PUSH
79977: LD_VAR 0 1
79981: PPUSH
79982: LD_INT 21
79984: PUSH
79985: LD_INT 3
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: PPUSH
79992: CALL_OW 72
79996: ST_TO_ADDR
// if not tmp then
79997: LD_VAR 0 5
80001: NOT
80002: IFFALSE 80006
// exit ;
80004: GO 80051
// for i in tmp do
80006: LD_ADDR_VAR 0 3
80010: PUSH
80011: LD_VAR 0 5
80015: PUSH
80016: FOR_IN
80017: IFFALSE 80049
// begin result := EnemyInRange ( i , 22 ) ;
80019: LD_ADDR_VAR 0 2
80023: PUSH
80024: LD_VAR 0 3
80028: PPUSH
80029: LD_INT 22
80031: PPUSH
80032: CALL 75095 0 2
80036: ST_TO_ADDR
// if result then
80037: LD_VAR 0 2
80041: IFFALSE 80047
// exit ;
80043: POP
80044: POP
80045: GO 80051
// end ;
80047: GO 80016
80049: POP
80050: POP
// end ;
80051: LD_VAR 0 2
80055: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80056: LD_INT 0
80058: PPUSH
80059: PPUSH
// if not units then
80060: LD_VAR 0 1
80064: NOT
80065: IFFALSE 80069
// exit ;
80067: GO 80139
// result := [ ] ;
80069: LD_ADDR_VAR 0 3
80073: PUSH
80074: EMPTY
80075: ST_TO_ADDR
// for i in units do
80076: LD_ADDR_VAR 0 4
80080: PUSH
80081: LD_VAR 0 1
80085: PUSH
80086: FOR_IN
80087: IFFALSE 80137
// if GetTag ( i ) = tag then
80089: LD_VAR 0 4
80093: PPUSH
80094: CALL_OW 110
80098: PUSH
80099: LD_VAR 0 2
80103: EQUAL
80104: IFFALSE 80135
// result := Insert ( result , result + 1 , i ) ;
80106: LD_ADDR_VAR 0 3
80110: PUSH
80111: LD_VAR 0 3
80115: PPUSH
80116: LD_VAR 0 3
80120: PUSH
80121: LD_INT 1
80123: PLUS
80124: PPUSH
80125: LD_VAR 0 4
80129: PPUSH
80130: CALL_OW 2
80134: ST_TO_ADDR
80135: GO 80086
80137: POP
80138: POP
// end ;
80139: LD_VAR 0 3
80143: RET
// export function IsDriver ( un ) ; begin
80144: LD_INT 0
80146: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80147: LD_ADDR_VAR 0 2
80151: PUSH
80152: LD_VAR 0 1
80156: PUSH
80157: LD_INT 55
80159: PUSH
80160: EMPTY
80161: LIST
80162: PPUSH
80163: CALL_OW 69
80167: IN
80168: ST_TO_ADDR
// end ;
80169: LD_VAR 0 2
80173: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80174: LD_INT 0
80176: PPUSH
80177: PPUSH
// list := [ ] ;
80178: LD_ADDR_VAR 0 5
80182: PUSH
80183: EMPTY
80184: ST_TO_ADDR
// case d of 0 :
80185: LD_VAR 0 3
80189: PUSH
80190: LD_INT 0
80192: DOUBLE
80193: EQUAL
80194: IFTRUE 80198
80196: GO 80331
80198: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80199: LD_ADDR_VAR 0 5
80203: PUSH
80204: LD_VAR 0 1
80208: PUSH
80209: LD_INT 4
80211: MINUS
80212: PUSH
80213: LD_VAR 0 2
80217: PUSH
80218: LD_INT 4
80220: MINUS
80221: PUSH
80222: LD_INT 2
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: LIST
80229: PUSH
80230: LD_VAR 0 1
80234: PUSH
80235: LD_INT 3
80237: MINUS
80238: PUSH
80239: LD_VAR 0 2
80243: PUSH
80244: LD_INT 1
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: LIST
80251: PUSH
80252: LD_VAR 0 1
80256: PUSH
80257: LD_INT 4
80259: PLUS
80260: PUSH
80261: LD_VAR 0 2
80265: PUSH
80266: LD_INT 4
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: LIST
80273: PUSH
80274: LD_VAR 0 1
80278: PUSH
80279: LD_INT 3
80281: PLUS
80282: PUSH
80283: LD_VAR 0 2
80287: PUSH
80288: LD_INT 3
80290: PLUS
80291: PUSH
80292: LD_INT 5
80294: PUSH
80295: EMPTY
80296: LIST
80297: LIST
80298: LIST
80299: PUSH
80300: LD_VAR 0 1
80304: PUSH
80305: LD_VAR 0 2
80309: PUSH
80310: LD_INT 4
80312: PLUS
80313: PUSH
80314: LD_INT 0
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: LIST
80321: PUSH
80322: EMPTY
80323: LIST
80324: LIST
80325: LIST
80326: LIST
80327: LIST
80328: ST_TO_ADDR
// end ; 1 :
80329: GO 81029
80331: LD_INT 1
80333: DOUBLE
80334: EQUAL
80335: IFTRUE 80339
80337: GO 80472
80339: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80340: LD_ADDR_VAR 0 5
80344: PUSH
80345: LD_VAR 0 1
80349: PUSH
80350: LD_VAR 0 2
80354: PUSH
80355: LD_INT 4
80357: MINUS
80358: PUSH
80359: LD_INT 3
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: LIST
80366: PUSH
80367: LD_VAR 0 1
80371: PUSH
80372: LD_INT 3
80374: MINUS
80375: PUSH
80376: LD_VAR 0 2
80380: PUSH
80381: LD_INT 3
80383: MINUS
80384: PUSH
80385: LD_INT 2
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: LIST
80392: PUSH
80393: LD_VAR 0 1
80397: PUSH
80398: LD_INT 4
80400: MINUS
80401: PUSH
80402: LD_VAR 0 2
80406: PUSH
80407: LD_INT 1
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: LIST
80414: PUSH
80415: LD_VAR 0 1
80419: PUSH
80420: LD_VAR 0 2
80424: PUSH
80425: LD_INT 3
80427: PLUS
80428: PUSH
80429: LD_INT 0
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: LIST
80436: PUSH
80437: LD_VAR 0 1
80441: PUSH
80442: LD_INT 4
80444: PLUS
80445: PUSH
80446: LD_VAR 0 2
80450: PUSH
80451: LD_INT 4
80453: PLUS
80454: PUSH
80455: LD_INT 5
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: LIST
80462: PUSH
80463: EMPTY
80464: LIST
80465: LIST
80466: LIST
80467: LIST
80468: LIST
80469: ST_TO_ADDR
// end ; 2 :
80470: GO 81029
80472: LD_INT 2
80474: DOUBLE
80475: EQUAL
80476: IFTRUE 80480
80478: GO 80609
80480: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80481: LD_ADDR_VAR 0 5
80485: PUSH
80486: LD_VAR 0 1
80490: PUSH
80491: LD_VAR 0 2
80495: PUSH
80496: LD_INT 3
80498: MINUS
80499: PUSH
80500: LD_INT 3
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: LIST
80507: PUSH
80508: LD_VAR 0 1
80512: PUSH
80513: LD_INT 4
80515: PLUS
80516: PUSH
80517: LD_VAR 0 2
80521: PUSH
80522: LD_INT 4
80524: PUSH
80525: EMPTY
80526: LIST
80527: LIST
80528: LIST
80529: PUSH
80530: LD_VAR 0 1
80534: PUSH
80535: LD_VAR 0 2
80539: PUSH
80540: LD_INT 4
80542: PLUS
80543: PUSH
80544: LD_INT 0
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: LIST
80551: PUSH
80552: LD_VAR 0 1
80556: PUSH
80557: LD_INT 3
80559: MINUS
80560: PUSH
80561: LD_VAR 0 2
80565: PUSH
80566: LD_INT 1
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: LIST
80573: PUSH
80574: LD_VAR 0 1
80578: PUSH
80579: LD_INT 4
80581: MINUS
80582: PUSH
80583: LD_VAR 0 2
80587: PUSH
80588: LD_INT 4
80590: MINUS
80591: PUSH
80592: LD_INT 2
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: LIST
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: ST_TO_ADDR
// end ; 3 :
80607: GO 81029
80609: LD_INT 3
80611: DOUBLE
80612: EQUAL
80613: IFTRUE 80617
80615: GO 80750
80617: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
80618: LD_ADDR_VAR 0 5
80622: PUSH
80623: LD_VAR 0 1
80627: PUSH
80628: LD_INT 3
80630: PLUS
80631: PUSH
80632: LD_VAR 0 2
80636: PUSH
80637: LD_INT 4
80639: PUSH
80640: EMPTY
80641: LIST
80642: LIST
80643: LIST
80644: PUSH
80645: LD_VAR 0 1
80649: PUSH
80650: LD_INT 4
80652: PLUS
80653: PUSH
80654: LD_VAR 0 2
80658: PUSH
80659: LD_INT 4
80661: PLUS
80662: PUSH
80663: LD_INT 5
80665: PUSH
80666: EMPTY
80667: LIST
80668: LIST
80669: LIST
80670: PUSH
80671: LD_VAR 0 1
80675: PUSH
80676: LD_INT 4
80678: MINUS
80679: PUSH
80680: LD_VAR 0 2
80684: PUSH
80685: LD_INT 1
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: LIST
80692: PUSH
80693: LD_VAR 0 1
80697: PUSH
80698: LD_VAR 0 2
80702: PUSH
80703: LD_INT 4
80705: MINUS
80706: PUSH
80707: LD_INT 3
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: LIST
80714: PUSH
80715: LD_VAR 0 1
80719: PUSH
80720: LD_INT 3
80722: MINUS
80723: PUSH
80724: LD_VAR 0 2
80728: PUSH
80729: LD_INT 3
80731: MINUS
80732: PUSH
80733: LD_INT 2
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: LIST
80740: PUSH
80741: EMPTY
80742: LIST
80743: LIST
80744: LIST
80745: LIST
80746: LIST
80747: ST_TO_ADDR
// end ; 4 :
80748: GO 81029
80750: LD_INT 4
80752: DOUBLE
80753: EQUAL
80754: IFTRUE 80758
80756: GO 80891
80758: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
80759: LD_ADDR_VAR 0 5
80763: PUSH
80764: LD_VAR 0 1
80768: PUSH
80769: LD_VAR 0 2
80773: PUSH
80774: LD_INT 4
80776: PLUS
80777: PUSH
80778: LD_INT 0
80780: PUSH
80781: EMPTY
80782: LIST
80783: LIST
80784: LIST
80785: PUSH
80786: LD_VAR 0 1
80790: PUSH
80791: LD_INT 3
80793: PLUS
80794: PUSH
80795: LD_VAR 0 2
80799: PUSH
80800: LD_INT 3
80802: PLUS
80803: PUSH
80804: LD_INT 5
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: LIST
80811: PUSH
80812: LD_VAR 0 1
80816: PUSH
80817: LD_INT 4
80819: PLUS
80820: PUSH
80821: LD_VAR 0 2
80825: PUSH
80826: LD_INT 4
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: LIST
80833: PUSH
80834: LD_VAR 0 1
80838: PUSH
80839: LD_VAR 0 2
80843: PUSH
80844: LD_INT 3
80846: MINUS
80847: PUSH
80848: LD_INT 3
80850: PUSH
80851: EMPTY
80852: LIST
80853: LIST
80854: LIST
80855: PUSH
80856: LD_VAR 0 1
80860: PUSH
80861: LD_INT 4
80863: MINUS
80864: PUSH
80865: LD_VAR 0 2
80869: PUSH
80870: LD_INT 4
80872: MINUS
80873: PUSH
80874: LD_INT 2
80876: PUSH
80877: EMPTY
80878: LIST
80879: LIST
80880: LIST
80881: PUSH
80882: EMPTY
80883: LIST
80884: LIST
80885: LIST
80886: LIST
80887: LIST
80888: ST_TO_ADDR
// end ; 5 :
80889: GO 81029
80891: LD_INT 5
80893: DOUBLE
80894: EQUAL
80895: IFTRUE 80899
80897: GO 81028
80899: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
80900: LD_ADDR_VAR 0 5
80904: PUSH
80905: LD_VAR 0 1
80909: PUSH
80910: LD_INT 4
80912: MINUS
80913: PUSH
80914: LD_VAR 0 2
80918: PUSH
80919: LD_INT 1
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: LIST
80926: PUSH
80927: LD_VAR 0 1
80931: PUSH
80932: LD_VAR 0 2
80936: PUSH
80937: LD_INT 4
80939: MINUS
80940: PUSH
80941: LD_INT 3
80943: PUSH
80944: EMPTY
80945: LIST
80946: LIST
80947: LIST
80948: PUSH
80949: LD_VAR 0 1
80953: PUSH
80954: LD_INT 4
80956: PLUS
80957: PUSH
80958: LD_VAR 0 2
80962: PUSH
80963: LD_INT 4
80965: PLUS
80966: PUSH
80967: LD_INT 5
80969: PUSH
80970: EMPTY
80971: LIST
80972: LIST
80973: LIST
80974: PUSH
80975: LD_VAR 0 1
80979: PUSH
80980: LD_INT 3
80982: PLUS
80983: PUSH
80984: LD_VAR 0 2
80988: PUSH
80989: LD_INT 4
80991: PUSH
80992: EMPTY
80993: LIST
80994: LIST
80995: LIST
80996: PUSH
80997: LD_VAR 0 1
81001: PUSH
81002: LD_VAR 0 2
81006: PUSH
81007: LD_INT 3
81009: PLUS
81010: PUSH
81011: LD_INT 0
81013: PUSH
81014: EMPTY
81015: LIST
81016: LIST
81017: LIST
81018: PUSH
81019: EMPTY
81020: LIST
81021: LIST
81022: LIST
81023: LIST
81024: LIST
81025: ST_TO_ADDR
// end ; end ;
81026: GO 81029
81028: POP
// result := list ;
81029: LD_ADDR_VAR 0 4
81033: PUSH
81034: LD_VAR 0 5
81038: ST_TO_ADDR
// end ;
81039: LD_VAR 0 4
81043: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81044: LD_INT 0
81046: PPUSH
81047: PPUSH
81048: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81049: LD_VAR 0 1
81053: NOT
81054: PUSH
81055: LD_VAR 0 2
81059: PUSH
81060: LD_INT 1
81062: PUSH
81063: LD_INT 2
81065: PUSH
81066: LD_INT 3
81068: PUSH
81069: LD_INT 4
81071: PUSH
81072: EMPTY
81073: LIST
81074: LIST
81075: LIST
81076: LIST
81077: IN
81078: NOT
81079: OR
81080: IFFALSE 81084
// exit ;
81082: GO 81176
// tmp := [ ] ;
81084: LD_ADDR_VAR 0 5
81088: PUSH
81089: EMPTY
81090: ST_TO_ADDR
// for i in units do
81091: LD_ADDR_VAR 0 4
81095: PUSH
81096: LD_VAR 0 1
81100: PUSH
81101: FOR_IN
81102: IFFALSE 81145
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81104: LD_ADDR_VAR 0 5
81108: PUSH
81109: LD_VAR 0 5
81113: PPUSH
81114: LD_VAR 0 5
81118: PUSH
81119: LD_INT 1
81121: PLUS
81122: PPUSH
81123: LD_VAR 0 4
81127: PPUSH
81128: LD_VAR 0 2
81132: PPUSH
81133: CALL_OW 259
81137: PPUSH
81138: CALL_OW 2
81142: ST_TO_ADDR
81143: GO 81101
81145: POP
81146: POP
// if not tmp then
81147: LD_VAR 0 5
81151: NOT
81152: IFFALSE 81156
// exit ;
81154: GO 81176
// result := SortListByListDesc ( units , tmp ) ;
81156: LD_ADDR_VAR 0 3
81160: PUSH
81161: LD_VAR 0 1
81165: PPUSH
81166: LD_VAR 0 5
81170: PPUSH
81171: CALL_OW 77
81175: ST_TO_ADDR
// end ;
81176: LD_VAR 0 3
81180: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81181: LD_INT 0
81183: PPUSH
81184: PPUSH
81185: PPUSH
// x := GetX ( building ) ;
81186: LD_ADDR_VAR 0 4
81190: PUSH
81191: LD_VAR 0 2
81195: PPUSH
81196: CALL_OW 250
81200: ST_TO_ADDR
// y := GetY ( building ) ;
81201: LD_ADDR_VAR 0 5
81205: PUSH
81206: LD_VAR 0 2
81210: PPUSH
81211: CALL_OW 251
81215: ST_TO_ADDR
// if GetTaskList ( unit ) then
81216: LD_VAR 0 1
81220: PPUSH
81221: CALL_OW 437
81225: IFFALSE 81320
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81227: LD_STRING e
81229: PUSH
81230: LD_VAR 0 1
81234: PPUSH
81235: CALL_OW 437
81239: PUSH
81240: LD_INT 1
81242: ARRAY
81243: PUSH
81244: LD_INT 1
81246: ARRAY
81247: EQUAL
81248: PUSH
81249: LD_VAR 0 4
81253: PUSH
81254: LD_VAR 0 1
81258: PPUSH
81259: CALL_OW 437
81263: PUSH
81264: LD_INT 1
81266: ARRAY
81267: PUSH
81268: LD_INT 2
81270: ARRAY
81271: EQUAL
81272: AND
81273: PUSH
81274: LD_VAR 0 5
81278: PUSH
81279: LD_VAR 0 1
81283: PPUSH
81284: CALL_OW 437
81288: PUSH
81289: LD_INT 1
81291: ARRAY
81292: PUSH
81293: LD_INT 3
81295: ARRAY
81296: EQUAL
81297: AND
81298: IFFALSE 81310
// result := true else
81300: LD_ADDR_VAR 0 3
81304: PUSH
81305: LD_INT 1
81307: ST_TO_ADDR
81308: GO 81318
// result := false ;
81310: LD_ADDR_VAR 0 3
81314: PUSH
81315: LD_INT 0
81317: ST_TO_ADDR
// end else
81318: GO 81328
// result := false ;
81320: LD_ADDR_VAR 0 3
81324: PUSH
81325: LD_INT 0
81327: ST_TO_ADDR
// end ;
81328: LD_VAR 0 3
81332: RET
