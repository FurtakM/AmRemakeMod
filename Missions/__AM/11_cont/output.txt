// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16591 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 78338 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2200 0 0
// MC_Start ( ) ;
  78: CALL 17738 0 0
// Action ;
  82: CALL 7580 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 100 100$00 , 90 90$00 , 85 85$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 210000
 212: PUSH
 213: LD_INT 189000
 215: PUSH
 216: LD_INT 178500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 73
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 74
 312: PUSH
 313: LD_INT 25
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 38107 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 38107 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 38107 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 49
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 38533 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 44097 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 44097 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 44097 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 44097 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 44097 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 44097 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 44097 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 44097 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 44097 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 44097 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 44097 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 44097 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 44097 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 44097 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 44097 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1468
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: IN
1452: IFFALSE 1466
// SetClass ( i , class_soldier ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: CALL_OW 336
1466: GO 1429
1468: POP
1469: POP
// if tmp < 12 then
1470: LD_VAR 0 5
1474: PUSH
1475: LD_INT 12
1477: LESS
1478: IFFALSE 1572
// begin k := 16 - tmp ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_INT 16
1487: PUSH
1488: LD_VAR 0 5
1492: MINUS
1493: ST_TO_ADDR
// for i = 1 to k do
1494: LD_ADDR_VAR 0 2
1498: PUSH
1499: DOUBLE
1500: LD_INT 1
1502: DEC
1503: ST_TO_ADDR
1504: LD_VAR 0 3
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1570
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1512: LD_INT 0
1514: PPUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 12
1543: ARRAY
1544: PPUSH
1545: LD_INT 6
1547: PPUSH
1548: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1552: LD_ADDR_VAR 0 5
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: CALL_OW 44
1566: ADD
1567: ST_TO_ADDR
// end ;
1568: GO 1509
1570: POP
1571: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1572: LD_ADDR_EXP 20
1576: PUSH
1577: LD_STRING 1
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT 12
1585: PPUSH
1586: LD_INT -5
1588: PUSH
1589: LD_EXP 21
1593: PUSH
1594: LD_INT -2
1596: PUSH
1597: LD_INT -3
1599: PUSH
1600: LD_INT -5
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: PUSH
1610: LD_VAR 0 5
1614: ADD
1615: PUSH
1616: LD_INT -6
1618: PUSH
1619: LD_INT -4
1621: PUSH
1622: LD_EXP 30
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: ADD
1632: PPUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 42
1695: ST_TO_ADDR
// others := tmp diff selected ;
1696: LD_ADDR_VAR 0 8
1700: PUSH
1701: LD_VAR 0 5
1705: PUSH
1706: LD_EXP 20
1710: DIFF
1711: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1712: LD_ADDR_VAR 0 8
1716: PUSH
1717: LD_VAR 0 5
1721: PUSH
1722: LD_EXP 22
1726: PUSH
1727: LD_EXP 23
1731: PUSH
1732: LD_EXP 24
1736: PUSH
1737: LD_EXP 25
1741: PUSH
1742: LD_EXP 26
1746: PUSH
1747: LD_EXP 27
1751: PUSH
1752: LD_EXP 28
1756: PUSH
1757: LD_EXP 29
1761: PUSH
1762: LD_EXP 31
1766: PUSH
1767: LD_EXP 32
1771: PUSH
1772: LD_EXP 33
1776: PUSH
1777: LD_EXP 34
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: DIFF
1796: ST_TO_ADDR
// no_selected := others ;
1797: LD_ADDR_EXP 19
1801: PUSH
1802: LD_VAR 0 8
1806: ST_TO_ADDR
// if no_selected then
1807: LD_EXP 19
1811: IFFALSE 1825
// SaveCharacters ( no_selected , 11_others ) ;
1813: LD_EXP 19
1817: PPUSH
1818: LD_STRING 11_others
1820: PPUSH
1821: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1825: LD_ADDR_VAR 0 6
1829: PUSH
1830: LD_INT 3
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: LD_INT 4
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 1
1856: PUSH
1857: LD_INT 5
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: LD_INT 7
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 3
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 7
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ST_TO_ADDR
// for i in JMM ^ selected do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_EXP 21
1936: PUSH
1937: LD_EXP 20
1941: ADD
1942: PUSH
1943: FOR_IN
1944: IFFALSE 2133
// begin if GetClass ( i ) = 3 then
1946: LD_VAR 0 2
1950: PPUSH
1951: CALL_OW 257
1955: PUSH
1956: LD_INT 3
1958: EQUAL
1959: IFFALSE 2116
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1961: LD_ADDR_OWVAR 37
1965: PUSH
1966: LD_VAR 0 6
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PUSH
1975: LD_INT 1
1977: ARRAY
1978: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1979: LD_ADDR_OWVAR 39
1983: PUSH
1984: LD_VAR 0 6
1988: PUSH
1989: LD_INT 1
1991: ARRAY
1992: PUSH
1993: LD_INT 2
1995: ARRAY
1996: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1997: LD_ADDR_OWVAR 38
2001: PUSH
2002: LD_VAR 0 6
2006: PUSH
2007: LD_INT 1
2009: ARRAY
2010: PUSH
2011: LD_INT 3
2013: ARRAY
2014: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2015: LD_ADDR_OWVAR 40
2019: PUSH
2020: LD_VAR 0 6
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PUSH
2029: LD_INT 4
2031: ARRAY
2032: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2033: LD_ADDR_VAR 0 6
2037: PUSH
2038: LD_VAR 0 6
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 3
2050: ST_TO_ADDR
// veh := CreateVehicle ;
2051: LD_ADDR_VAR 0 7
2055: PUSH
2056: CALL_OW 45
2060: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2061: LD_VAR 0 7
2065: PPUSH
2066: LD_INT 8
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_VAR 0 7
2085: PPUSH
2086: CALL_OW 52
// if i = JMM then
2090: LD_VAR 0 2
2094: PUSH
2095: LD_EXP 21
2099: EQUAL
2100: IFFALSE 2114
// SetMark ( veh , 1 ) ;
2102: LD_VAR 0 7
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL_OW 242
// end else
2114: GO 2131
// PlaceUnitArea ( i , am_hum_start , false ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 9
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 49
// end ;
2131: GO 1943
2133: POP
2134: POP
// vc_chassis := us_medium_tracked ;
2135: LD_ADDR_OWVAR 37
2139: PUSH
2140: LD_INT 3
2142: ST_TO_ADDR
// vc_engine := engine_solar ;
2143: LD_ADDR_OWVAR 39
2147: PUSH
2148: LD_INT 2
2150: ST_TO_ADDR
// vc_control := control_computer ;
2151: LD_ADDR_OWVAR 38
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// vc_weapon := us_radar ;
2159: LD_ADDR_OWVAR 40
2163: PUSH
2164: LD_INT 11
2166: ST_TO_ADDR
// veh := CreateVehicle ;
2167: LD_ADDR_VAR 0 7
2171: PUSH
2172: CALL_OW 45
2176: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2177: LD_VAR 0 7
2181: PPUSH
2182: LD_INT 87
2184: PPUSH
2185: LD_INT 142
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 48
// end ; end_of_file
2195: LD_VAR 0 1
2199: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2207: LD_ADDR_VAR 0 5
2211: PUSH
2212: LD_INT 6
2214: PUSH
2215: LD_INT 7
2217: PUSH
2218: LD_INT 8
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: PUSH
2226: LD_OWVAR 67
2230: ARRAY
2231: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
2232: LD_INT 69
2234: PUSH
2235: EMPTY
2236: LIST
2237: PPUSH
2238: LD_INT 141
2240: PPUSH
2241: CALL_OW 169
// Wait ( 1 ) ;
2245: LD_INT 1
2247: PPUSH
2248: CALL_OW 67
// uc_side := 2 ;
2252: LD_ADDR_OWVAR 20
2256: PUSH
2257: LD_INT 2
2259: ST_TO_ADDR
// uc_nation := 2 ;
2260: LD_ADDR_OWVAR 21
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2268: LD_ADDR_OWVAR 37
2272: PUSH
2273: LD_INT 14
2275: ST_TO_ADDR
// vc_engine := engine_siberite ;
2276: LD_ADDR_OWVAR 39
2280: PUSH
2281: LD_INT 3
2283: ST_TO_ADDR
// vc_control := control_manual ;
2284: LD_ADDR_OWVAR 38
2288: PUSH
2289: LD_INT 1
2291: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2292: LD_ADDR_OWVAR 40
2296: PUSH
2297: LD_INT 31
2299: ST_TO_ADDR
// for i = 1 to 3 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 3
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2398
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 3
2321: PPUSH
2322: LD_VAR 0 5
2326: PPUSH
2327: CALL_OW 380
// un := CreateVehicle ;
2331: LD_ADDR_VAR 0 4
2335: PUSH
2336: CALL_OW 45
2340: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2341: LD_VAR 0 4
2345: PPUSH
2346: LD_INT 0
2348: PPUSH
2349: LD_INT 5
2351: PPUSH
2352: CALL_OW 12
2356: PPUSH
2357: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2361: LD_VAR 0 4
2365: PPUSH
2366: LD_INT 156
2368: PPUSH
2369: LD_INT 15
2371: PPUSH
2372: LD_INT 6
2374: PPUSH
2375: LD_INT 0
2377: PPUSH
2378: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2382: CALL_OW 44
2386: PPUSH
2387: LD_VAR 0 4
2391: PPUSH
2392: CALL_OW 52
// end ;
2396: GO 2313
2398: POP
2399: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2400: LD_ADDR_EXP 37
2404: PUSH
2405: LD_INT 94
2407: PPUSH
2408: LD_STRING dammam
2410: PPUSH
2411: LD_VAR 0 5
2415: PPUSH
2416: LD_INT 10000
2418: PUSH
2419: LD_INT 1000
2421: PUSH
2422: LD_INT 300
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PPUSH
2430: LD_INT 1
2432: NEG
2433: PUSH
2434: LD_INT 5
2436: PUSH
2437: LD_INT 1
2439: NEG
2440: PUSH
2441: LD_INT 4
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: LIST
2449: PPUSH
2450: CALL 54159 0 5
2454: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
2455: LD_ADDR_EXP 37
2459: PUSH
2460: LD_EXP 37
2464: PUSH
2465: LD_INT 122
2467: PPUSH
2468: LD_STRING 
2470: PPUSH
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 100
2478: PUSH
2479: LD_INT 60
2481: PUSH
2482: LD_INT 0
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: PPUSH
2490: LD_INT 1
2492: NEG
2493: PUSH
2494: LD_INT 4
2496: PUSH
2497: LD_INT 0
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: PPUSH
2509: CALL 54159 0 5
2513: ADD
2514: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2515: LD_ADDR_EXP 35
2519: PUSH
2520: LD_INT 45
2522: PPUSH
2523: LD_STRING jeddah
2525: PPUSH
2526: LD_VAR 0 5
2530: PPUSH
2531: LD_INT 700
2533: PUSH
2534: LD_INT 300
2536: PUSH
2537: LD_INT 10
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: LIST
2544: PPUSH
2545: LD_INT 1
2547: NEG
2548: PUSH
2549: LD_INT 5
2551: PUSH
2552: LD_INT 3
2554: PUSH
2555: LD_INT 2
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: LIST
2563: PPUSH
2564: CALL 54159 0 5
2568: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2569: LD_ADDR_EXP 36
2573: PUSH
2574: LD_INT 7
2576: PPUSH
2577: LD_STRING riyadh
2579: PPUSH
2580: LD_VAR 0 5
2584: PPUSH
2585: LD_INT 500
2587: PUSH
2588: LD_INT 60
2590: PUSH
2591: LD_INT 0
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: PPUSH
2599: LD_INT 4
2601: PUSH
2602: LD_INT 2
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: PPUSH
2617: CALL 54159 0 5
2621: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2622: LD_ADDR_EXP 38
2626: PUSH
2627: LD_INT 69
2629: PPUSH
2630: LD_STRING 
2632: PPUSH
2633: LD_VAR 0 5
2637: PPUSH
2638: LD_INT 500
2640: PUSH
2641: LD_INT 50
2643: PUSH
2644: LD_INT 0
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: PPUSH
2652: LD_INT 1
2654: NEG
2655: PUSH
2656: LD_INT 3
2658: PUSH
2659: LD_INT 3
2661: PUSH
2662: LD_INT 2
2664: PUSH
2665: EMPTY
2666: LIST
2667: LIST
2668: LIST
2669: LIST
2670: PPUSH
2671: CALL 54159 0 5
2675: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2676: LD_ADDR_EXP 49
2680: PUSH
2681: LD_EXP 37
2685: PUSH
2686: LD_EXP 35
2690: PUSH
2691: LD_EXP 38
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: LIST
2700: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: LD_INT 22
2708: PUSH
2709: LD_INT 2
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: PUSH
2716: LD_INT 30
2718: PUSH
2719: LD_INT 31
2721: PUSH
2722: EMPTY
2723: LIST
2724: LIST
2725: PUSH
2726: LD_INT 58
2728: PUSH
2729: EMPTY
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PUSH
2742: FOR_IN
2743: IFFALSE 2868
// begin if GetBase ( i ) then
2745: LD_VAR 0 2
2749: PPUSH
2750: CALL_OW 274
2754: IFFALSE 2758
// continue ;
2756: GO 2742
// d := GetDir ( i ) ;
2758: LD_ADDR_VAR 0 3
2762: PUSH
2763: LD_VAR 0 2
2767: PPUSH
2768: CALL_OW 254
2772: ST_TO_ADDR
// if d < 3 then
2773: LD_VAR 0 3
2777: PUSH
2778: LD_INT 3
2780: LESS
2781: IFFALSE 2799
// d := d + 3 else
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 3
2795: PLUS
2796: ST_TO_ADDR
2797: GO 2813
// d := d - 3 ;
2799: LD_ADDR_VAR 0 3
2803: PUSH
2804: LD_VAR 0 3
2808: PUSH
2809: LD_INT 3
2811: MINUS
2812: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2813: LD_INT 0
2815: PPUSH
2816: LD_INT 8
2818: PPUSH
2819: LD_VAR 0 5
2823: PPUSH
2824: CALL_OW 380
// un := CreateHuman ;
2828: LD_ADDR_VAR 0 4
2832: PUSH
2833: CALL_OW 44
2837: ST_TO_ADDR
// SetDir ( un , d ) ;
2838: LD_VAR 0 4
2842: PPUSH
2843: LD_VAR 0 3
2847: PPUSH
2848: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2852: LD_VAR 0 4
2856: PPUSH
2857: LD_VAR 0 2
2861: PPUSH
2862: CALL_OW 52
// end ;
2866: GO 2742
2868: POP
2869: POP
// if Difficulty > 1 then
2870: LD_OWVAR 67
2874: PUSH
2875: LD_INT 1
2877: GREATER
2878: IFFALSE 3249
// begin ar_kamikadze := [ ] ;
2880: LD_ADDR_EXP 41
2884: PUSH
2885: EMPTY
2886: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL_OW 380
// un := CreateHuman ;
2902: LD_ADDR_VAR 0 4
2906: PUSH
2907: CALL_OW 44
2911: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2912: LD_VAR 0 4
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2924: LD_VAR 0 4
2928: PPUSH
2929: LD_INT 23
2931: PPUSH
2932: LD_INT 44
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComCrawl ( un ) ;
2942: LD_VAR 0 4
2946: PPUSH
2947: CALL_OW 137
// un := CreateHuman ;
2951: LD_ADDR_VAR 0 4
2955: PUSH
2956: CALL_OW 44
2960: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2961: LD_VAR 0 4
2965: PPUSH
2966: LD_INT 3
2968: PPUSH
2969: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2973: LD_VAR 0 4
2977: PPUSH
2978: LD_INT 30
2980: PPUSH
2981: LD_INT 39
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 48
// ComCrawl ( un ) ;
2991: LD_VAR 0 4
2995: PPUSH
2996: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3000: LD_INT 0
3002: PPUSH
3003: LD_INT 17
3005: PPUSH
3006: LD_VAR 0 5
3010: PPUSH
3011: CALL_OW 380
// un := CreateHuman ;
3015: LD_ADDR_VAR 0 4
3019: PUSH
3020: CALL_OW 44
3024: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3025: LD_VAR 0 4
3029: PPUSH
3030: LD_INT 3
3032: PPUSH
3033: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3037: LD_VAR 0 4
3041: PPUSH
3042: LD_INT 45
3044: PPUSH
3045: LD_INT 86
3047: PPUSH
3048: LD_INT 0
3050: PPUSH
3051: CALL_OW 48
// ComHold ( un ) ;
3055: LD_VAR 0 4
3059: PPUSH
3060: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3064: LD_ADDR_EXP 41
3068: PUSH
3069: LD_EXP 41
3073: PPUSH
3074: LD_EXP 41
3078: PUSH
3079: LD_INT 1
3081: PLUS
3082: PPUSH
3083: LD_VAR 0 4
3087: PPUSH
3088: CALL_OW 1
3092: ST_TO_ADDR
// un := CreateHuman ;
3093: LD_ADDR_VAR 0 4
3097: PUSH
3098: CALL_OW 44
3102: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3103: LD_VAR 0 4
3107: PPUSH
3108: LD_INT 3
3110: PPUSH
3111: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3115: LD_VAR 0 4
3119: PPUSH
3120: LD_INT 60
3122: PPUSH
3123: LD_INT 85
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 48
// ComHold ( un ) ;
3133: LD_VAR 0 4
3137: PPUSH
3138: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3142: LD_ADDR_EXP 41
3146: PUSH
3147: LD_EXP 41
3151: PPUSH
3152: LD_EXP 41
3156: PUSH
3157: LD_INT 1
3159: PLUS
3160: PPUSH
3161: LD_VAR 0 4
3165: PPUSH
3166: CALL_OW 1
3170: ST_TO_ADDR
// un := CreateHuman ;
3171: LD_ADDR_VAR 0 4
3175: PUSH
3176: CALL_OW 44
3180: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3181: LD_VAR 0 4
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3193: LD_VAR 0 4
3197: PPUSH
3198: LD_INT 222
3200: PPUSH
3201: LD_INT 166
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 48
// ComHold ( un ) ;
3211: LD_VAR 0 4
3215: PPUSH
3216: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3220: LD_ADDR_EXP 41
3224: PUSH
3225: LD_EXP 41
3229: PPUSH
3230: LD_EXP 41
3234: PUSH
3235: LD_INT 1
3237: PLUS
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: CALL_OW 1
3248: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3249: LD_ADDR_EXP 39
3253: PUSH
3254: EMPTY
3255: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3256: LD_INT 1
3258: PPUSH
3259: LD_INT 1
3261: PPUSH
3262: LD_VAR 0 5
3266: PPUSH
3267: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3271: LD_ADDR_OWVAR 26
3275: PUSH
3276: LD_STRING Pavel Grigorovic
3278: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING SecondCharsGal
3286: ST_TO_ADDR
// hc_face_number := 4 ;
3287: LD_ADDR_OWVAR 34
3291: PUSH
3292: LD_INT 4
3294: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3295: LD_ADDR_EXP 39
3299: PUSH
3300: LD_EXP 39
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 44
3312: PPUSH
3313: CALL_OW 1
3317: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3318: LD_INT 2
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 380
// hc_name := Lucy Sebel ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING Lucy Sebel
3340: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3341: LD_ADDR_OWVAR 33
3345: PUSH
3346: LD_STRING SecondCharsGal
3348: ST_TO_ADDR
// hc_face_number := 15 ;
3349: LD_ADDR_OWVAR 34
3353: PUSH
3354: LD_INT 15
3356: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3357: LD_ADDR_EXP 39
3361: PUSH
3362: LD_EXP 39
3366: PPUSH
3367: LD_INT 2
3369: PPUSH
3370: CALL_OW 44
3374: PPUSH
3375: CALL_OW 1
3379: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3380: LD_INT 2
3382: PPUSH
3383: LD_INT 4
3385: PPUSH
3386: LD_VAR 0 5
3390: PPUSH
3391: CALL_OW 380
// hc_gallery :=  ;
3395: LD_ADDR_OWVAR 33
3399: PUSH
3400: LD_STRING 
3402: ST_TO_ADDR
// hc_name :=  ;
3403: LD_ADDR_OWVAR 26
3407: PUSH
3408: LD_STRING 
3410: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3411: LD_ADDR_EXP 39
3415: PUSH
3416: LD_EXP 39
3420: PPUSH
3421: LD_INT 3
3423: PPUSH
3424: CALL_OW 44
3428: PPUSH
3429: CALL_OW 1
3433: ST_TO_ADDR
// hc_sex := sex_male ;
3434: LD_ADDR_OWVAR 27
3438: PUSH
3439: LD_INT 1
3441: ST_TO_ADDR
// hc_class = 11 ;
3442: LD_ADDR_OWVAR 28
3446: PUSH
3447: LD_INT 11
3449: ST_TO_ADDR
// hc_gallery = sandar ;
3450: LD_ADDR_OWVAR 33
3454: PUSH
3455: LD_STRING sandar
3457: ST_TO_ADDR
// hc_face_number = 33 ;
3458: LD_ADDR_OWVAR 34
3462: PUSH
3463: LD_INT 33
3465: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3466: LD_ADDR_OWVAR 26
3470: PUSH
3471: LD_STRING Thabit Muhair Saliba
3473: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3474: LD_ADDR_OWVAR 31
3478: PUSH
3479: LD_INT 0
3481: PUSH
3482: LD_INT 0
3484: PUSH
3485: LD_INT 0
3487: PUSH
3488: LD_INT 0
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: ST_TO_ADDR
// Saliba = CreateHuman ;
3497: LD_ADDR_EXP 43
3501: PUSH
3502: CALL_OW 44
3506: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3507: LD_EXP 43
3511: PPUSH
3512: LD_INT 7
3514: PPUSH
3515: CALL_OW 52
// if gensher_active then
3519: LD_EXP 18
3523: IFFALSE 3550
// begin Gensher = NewCharacter ( Dietrich ) ;
3525: LD_ADDR_EXP 44
3529: PUSH
3530: LD_STRING Dietrich
3532: PPUSH
3533: CALL_OW 25
3537: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3538: LD_EXP 44
3542: PPUSH
3543: LD_INT 94
3545: PPUSH
3546: CALL_OW 52
// end ; InitHc ;
3550: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3554: LD_ADDR_EXP 40
3558: PUSH
3559: EMPTY
3560: ST_TO_ADDR
// for i = 1 to 5 do
3561: LD_ADDR_VAR 0 2
3565: PUSH
3566: DOUBLE
3567: LD_INT 1
3569: DEC
3570: ST_TO_ADDR
3571: LD_INT 5
3573: PUSH
3574: FOR_TO
3575: IFFALSE 3747
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3577: LD_INT 13
3579: PUSH
3580: LD_INT 14
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 12
3597: ARRAY
3598: PPUSH
3599: LD_INT 1
3601: PUSH
3602: LD_INT 2
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: LD_INT 1
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: CALL_OW 12
3619: ARRAY
3620: PPUSH
3621: LD_INT 1
3623: PPUSH
3624: LD_INT 25
3626: PUSH
3627: LD_INT 27
3629: PUSH
3630: LD_INT 26
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 3
3643: PPUSH
3644: CALL_OW 12
3648: ARRAY
3649: PPUSH
3650: LD_INT 60
3652: PPUSH
3653: LD_INT 100
3655: PPUSH
3656: CALL_OW 12
3660: PPUSH
3661: CALL 50730 0 5
// un := CreateVehicle ;
3665: LD_ADDR_VAR 0 4
3669: PUSH
3670: CALL_OW 45
3674: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3675: LD_ADDR_EXP 40
3679: PUSH
3680: LD_EXP 40
3684: PPUSH
3685: LD_EXP 40
3689: PUSH
3690: LD_INT 1
3692: PLUS
3693: PPUSH
3694: LD_VAR 0 4
3698: PPUSH
3699: CALL_OW 1
3703: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3704: LD_VAR 0 4
3708: PPUSH
3709: LD_INT 0
3711: PPUSH
3712: LD_INT 5
3714: PPUSH
3715: CALL_OW 12
3719: PPUSH
3720: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3724: LD_VAR 0 4
3728: PPUSH
3729: LD_INT 124
3731: PPUSH
3732: LD_INT 141
3734: PPUSH
3735: LD_INT 8
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 50
// end ;
3745: GO 3574
3747: POP
3748: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3749: LD_ADDR_EXP 42
3753: PUSH
3754: EMPTY
3755: PUSH
3756: EMPTY
3757: PUSH
3758: EMPTY
3759: PUSH
3760: EMPTY
3761: LIST
3762: LIST
3763: LIST
3764: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3765: LD_ADDR_VAR 0 3
3769: PUSH
3770: DOUBLE
3771: LD_INT 1
3773: DEC
3774: ST_TO_ADDR
3775: LD_INT 3
3777: PUSH
3778: LD_INT 3
3780: PUSH
3781: LD_INT 4
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: LIST
3788: PUSH
3789: LD_OWVAR 67
3793: ARRAY
3794: PUSH
3795: FOR_TO
3796: IFFALSE 4010
// for i = 1 to 3 do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_INT 3
3810: PUSH
3811: FOR_TO
3812: IFFALSE 4006
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3814: LD_INT 14
3816: PPUSH
3817: LD_INT 3
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ARRAY
3838: PPUSH
3839: LD_INT 1
3841: PUSH
3842: LD_INT 5
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 1
3851: PPUSH
3852: LD_INT 2
3854: PPUSH
3855: CALL_OW 12
3859: ARRAY
3860: PPUSH
3861: LD_INT 25
3863: PUSH
3864: LD_INT 27
3866: PUSH
3867: LD_INT 26
3869: PUSH
3870: LD_INT 28
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 1
3881: PPUSH
3882: LD_INT 4
3884: PPUSH
3885: CALL_OW 12
3889: ARRAY
3890: PPUSH
3891: LD_INT 100
3893: PPUSH
3894: CALL 50730 0 5
// un := CreateVehicle ;
3898: LD_ADDR_VAR 0 4
3902: PUSH
3903: CALL_OW 45
3907: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3908: LD_ADDR_EXP 42
3912: PUSH
3913: LD_EXP 42
3917: PPUSH
3918: LD_VAR 0 2
3922: PUSH
3923: LD_EXP 42
3927: PUSH
3928: LD_VAR 0 2
3932: ARRAY
3933: PUSH
3934: LD_INT 1
3936: PLUS
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: PPUSH
3942: LD_VAR 0 4
3946: PPUSH
3947: CALL 51287 0 3
3951: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3952: LD_VAR 0 4
3956: PPUSH
3957: LD_INT 0
3959: PPUSH
3960: LD_INT 5
3962: PPUSH
3963: CALL_OW 12
3967: PPUSH
3968: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3972: LD_VAR 0 4
3976: PPUSH
3977: LD_INT 20
3979: PUSH
3980: LD_INT 21
3982: PUSH
3983: LD_INT 22
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: LD_VAR 0 2
3995: ARRAY
3996: PPUSH
3997: LD_INT 0
3999: PPUSH
4000: CALL_OW 49
// end ;
4004: GO 3811
4006: POP
4007: POP
4008: GO 3795
4010: POP
4011: POP
// InitHc ;
4012: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4016: LD_INT 4
4018: PPUSH
4019: LD_INT 5
4021: PPUSH
4022: LD_INT 10
4024: PPUSH
4025: LD_INT 5
4027: PPUSH
4028: LD_INT 0
4030: PPUSH
4031: CALL_OW 58
// end ;
4035: LD_VAR 0 1
4039: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4040: LD_EXP 41
4044: IFFALSE 4118
4046: GO 4048
4048: DISABLE
4049: LD_INT 0
4051: PPUSH
// begin enable ;
4052: ENABLE
// for i in ar_kamikadze do
4053: LD_ADDR_VAR 0 1
4057: PUSH
4058: LD_EXP 41
4062: PUSH
4063: FOR_IN
4064: IFFALSE 4116
// if See ( 1 , i ) then
4066: LD_INT 1
4068: PPUSH
4069: LD_VAR 0 1
4073: PPUSH
4074: CALL_OW 292
4078: IFFALSE 4114
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4080: LD_VAR 0 1
4084: PPUSH
4085: LD_INT 81
4087: PUSH
4088: LD_INT 2
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 69
4099: PPUSH
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 74
4109: PPUSH
4110: CALL_OW 115
4114: GO 4063
4116: POP
4117: POP
// end ;
4118: PPOPN 1
4120: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4121: LD_EXP 13
4125: IFFALSE 4442
4127: GO 4129
4129: DISABLE
4130: LD_INT 0
4132: PPUSH
4133: PPUSH
4134: PPUSH
4135: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4136: LD_INT 35
4138: PPUSH
4139: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4143: LD_INT 1
4145: PPUSH
4146: CALL 38879 0 1
4150: PUSH
4151: LD_INT 0
4153: EQUAL
4154: IFFALSE 4136
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4156: LD_INT 1
4158: PPUSH
4159: LD_INT 14
4161: PUSH
4162: LD_INT 3
4164: PUSH
4165: LD_INT 2
4167: PUSH
4168: LD_INT 32
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: PUSH
4177: EMPTY
4178: LIST
4179: PPUSH
4180: CALL 38425 0 2
// repeat wait ( 0 0$1 ) ;
4184: LD_INT 35
4186: PPUSH
4187: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4191: LD_EXP 68
4195: PUSH
4196: LD_INT 1
4198: ARRAY
4199: PPUSH
4200: LD_INT 33
4202: PUSH
4203: LD_INT 2
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 34
4212: PUSH
4213: LD_INT 32
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 72
4228: IFFALSE 4184
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_EXP 68
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: PPUSH
4244: LD_INT 33
4246: PUSH
4247: LD_INT 2
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PUSH
4254: LD_INT 34
4256: PUSH
4257: LD_INT 32
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PPUSH
4268: CALL_OW 72
4272: PUSH
4273: LD_INT 1
4275: ARRAY
4276: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4277: LD_ADDR_VAR 0 4
4281: PUSH
4282: LD_INT 5
4284: PPUSH
4285: CALL_OW 469
4289: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4297: LD_ADDR_VAR 0 4
4301: PUSH
4302: LD_INT 5
4304: PPUSH
4305: CALL_OW 469
4309: ST_TO_ADDR
// tmp := 100 ;
4310: LD_ADDR_VAR 0 3
4314: PUSH
4315: LD_INT 100
4317: ST_TO_ADDR
// if pos then
4318: LD_VAR 0 4
4322: IFFALSE 4362
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4324: LD_ADDR_VAR 0 3
4328: PUSH
4329: LD_INT 2
4331: PPUSH
4332: LD_VAR 0 4
4336: PUSH
4337: LD_INT 1
4339: ARRAY
4340: PPUSH
4341: LD_VAR 0 4
4345: PUSH
4346: LD_INT 2
4348: ARRAY
4349: PPUSH
4350: LD_INT 20
4352: PPUSH
4353: CALL 51781 0 4
4357: PUSH
4358: LD_INT 4
4360: ARRAY
4361: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4362: LD_VAR 0 4
4366: PUSH
4367: LD_EXP 14
4371: NOT
4372: AND
4373: PUSH
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 10
4381: LESS
4382: AND
4383: IFFALSE 4290
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4385: LD_VAR 0 2
4389: PPUSH
4390: LD_VAR 0 4
4394: PUSH
4395: LD_INT 1
4397: ARRAY
4398: PPUSH
4399: LD_VAR 0 4
4403: PUSH
4404: LD_INT 2
4406: ARRAY
4407: PPUSH
4408: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4412: LD_VAR 0 2
4416: PPUSH
4417: LD_INT 198
4419: PPUSH
4420: LD_INT 113
4422: PPUSH
4423: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4427: LD_VAR 0 2
4431: PPUSH
4432: LD_INT 124
4434: PPUSH
4435: LD_INT 7
4437: PPUSH
4438: CALL_OW 171
// end ;
4442: PPOPN 4
4444: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4445: LD_EXP 6
4449: IFFALSE 7106
4451: GO 4453
4453: DISABLE
4454: LD_INT 0
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4464: LD_ADDR_VAR 0 4
4468: PUSH
4469: LD_INT 5
4471: PUSH
4472: LD_INT 6
4474: PUSH
4475: LD_INT 7
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: PUSH
4483: LD_OWVAR 67
4487: ARRAY
4488: ST_TO_ADDR
// coords := [ ] ;
4489: LD_ADDR_VAR 0 5
4493: PUSH
4494: EMPTY
4495: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4496: LD_ADDR_VAR 0 6
4500: PUSH
4501: LD_INT 0
4503: PUSH
4504: LD_INT 0
4506: PUSH
4507: LD_INT 0
4509: PUSH
4510: LD_INT 0
4512: PUSH
4513: LD_INT 1
4515: PUSH
4516: LD_INT 0
4518: PUSH
4519: LD_INT 0
4521: PUSH
4522: LD_INT 0
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: LD_INT 0
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4543: LD_INT 1
4545: PPUSH
4546: LD_INT 14
4548: PUSH
4549: LD_INT 1
4551: PUSH
4552: LD_INT 2
4554: PUSH
4555: LD_INT 28
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 14
4566: PUSH
4567: LD_INT 1
4569: PUSH
4570: LD_INT 2
4572: PUSH
4573: LD_INT 25
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 14
4584: PUSH
4585: LD_INT 1
4587: PUSH
4588: LD_INT 2
4590: PUSH
4591: LD_INT 28
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 14
4602: PUSH
4603: LD_INT 1
4605: PUSH
4606: LD_INT 2
4608: PUSH
4609: LD_INT 29
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: PPUSH
4624: CALL 38425 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4628: LD_INT 21000
4630: PUSH
4631: LD_INT 19950
4633: PUSH
4634: LD_INT 18900
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: LIST
4641: PUSH
4642: LD_OWVAR 67
4646: ARRAY
4647: PPUSH
4648: CALL_OW 67
// InitHc ;
4652: CALL_OW 19
// InitUc ;
4656: CALL_OW 18
// uc_side := 2 ;
4660: LD_ADDR_OWVAR 20
4664: PUSH
4665: LD_INT 2
4667: ST_TO_ADDR
// uc_nation := 2 ;
4668: LD_ADDR_OWVAR 21
4672: PUSH
4673: LD_INT 2
4675: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: EMPTY
4682: PUSH
4683: EMPTY
4684: PUSH
4685: EMPTY
4686: PUSH
4687: EMPTY
4688: PUSH
4689: EMPTY
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: LD_EXP 68
4715: PUSH
4716: LD_INT 1
4718: ARRAY
4719: PUSH
4720: LD_INT 34
4722: PUSH
4723: LD_INT 32
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: PPUSH
4730: CALL_OW 69
4734: DIFF
4735: PPUSH
4736: CALL_OW 1
4740: ST_TO_ADDR
// for i = 1 to Difficulty do
4741: LD_ADDR_VAR 0 1
4745: PUSH
4746: DOUBLE
4747: LD_INT 1
4749: DEC
4750: ST_TO_ADDR
4751: LD_OWVAR 67
4755: PUSH
4756: FOR_TO
4757: IFFALSE 4895
// begin uc_side := 2 ;
4759: LD_ADDR_OWVAR 20
4763: PUSH
4764: LD_INT 2
4766: ST_TO_ADDR
// uc_nation := 2 ;
4767: LD_ADDR_OWVAR 21
4771: PUSH
4772: LD_INT 2
4774: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4775: LD_INT 13
4777: PPUSH
4778: LD_INT 3
4780: PPUSH
4781: LD_INT 5
4783: PPUSH
4784: LD_INT 29
4786: PPUSH
4787: LD_INT 100
4789: PPUSH
4790: CALL 50730 0 5
// un := CreateVehicle ;
4794: LD_ADDR_VAR 0 2
4798: PUSH
4799: CALL_OW 45
4803: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4804: LD_ADDR_VAR 0 3
4808: PUSH
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 1
4816: PUSH
4817: LD_VAR 0 3
4821: PUSH
4822: LD_INT 1
4824: ARRAY
4825: PUSH
4826: LD_INT 1
4828: PLUS
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: PPUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: CALL 51287 0 3
4843: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4844: LD_VAR 0 2
4848: PPUSH
4849: LD_INT 3
4851: PPUSH
4852: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4856: LD_VAR 0 2
4860: PPUSH
4861: LD_INT 16
4863: PPUSH
4864: LD_INT 0
4866: PPUSH
4867: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4871: LD_VAR 0 2
4875: PPUSH
4876: LD_INT 51
4878: PPUSH
4879: LD_INT 10
4881: PPUSH
4882: CALL_OW 111
// wait ( 0 0$2 ) ;
4886: LD_INT 70
4888: PPUSH
4889: CALL_OW 67
// end ;
4893: GO 4756
4895: POP
4896: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_INT 51
4904: PUSH
4905: LD_INT 24
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: LD_INT 75
4914: PUSH
4915: LD_INT 90
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4926: LD_INT 1
4928: PPUSH
4929: LD_VAR 0 3
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PPUSH
4938: LD_VAR 0 5
4942: PPUSH
4943: LD_VAR 0 6
4947: PPUSH
4948: CALL 38716 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4952: LD_ADDR_VAR 0 1
4956: PUSH
4957: DOUBLE
4958: LD_INT 1
4960: DEC
4961: ST_TO_ADDR
4962: LD_INT 2
4964: PUSH
4965: LD_INT 3
4967: PUSH
4968: LD_INT 3
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: LD_OWVAR 67
4980: ARRAY
4981: PUSH
4982: FOR_TO
4983: IFFALSE 5083
// begin uc_side := 2 ;
4985: LD_ADDR_OWVAR 20
4989: PUSH
4990: LD_INT 2
4992: ST_TO_ADDR
// uc_nation := 2 ;
4993: LD_ADDR_OWVAR 21
4997: PUSH
4998: LD_INT 2
5000: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5001: LD_INT 0
5003: PPUSH
5004: LD_INT 17
5006: PPUSH
5007: LD_VAR 0 4
5011: PPUSH
5012: CALL_OW 380
// un := CreateHuman ;
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: CALL_OW 44
5025: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5026: LD_ADDR_VAR 0 3
5030: PUSH
5031: LD_VAR 0 3
5035: PPUSH
5036: LD_INT 2
5038: PUSH
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 2
5046: ARRAY
5047: PUSH
5048: LD_INT 1
5050: PLUS
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PPUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: CALL 51287 0 3
5065: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5066: LD_VAR 0 2
5070: PPUSH
5071: LD_INT 13
5073: PPUSH
5074: LD_INT 0
5076: PPUSH
5077: CALL_OW 49
// end ;
5081: GO 4982
5083: POP
5084: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5085: LD_ADDR_VAR 0 1
5089: PUSH
5090: DOUBLE
5091: LD_INT 1
5093: DEC
5094: ST_TO_ADDR
5095: LD_INT 2
5097: PUSH
5098: LD_INT 3
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PUSH
5109: LD_OWVAR 67
5113: ARRAY
5114: PUSH
5115: FOR_TO
5116: IFFALSE 5235
// begin uc_side := 2 ;
5118: LD_ADDR_OWVAR 20
5122: PUSH
5123: LD_INT 2
5125: ST_TO_ADDR
// uc_nation := 2 ;
5126: LD_ADDR_OWVAR 21
5130: PUSH
5131: LD_INT 2
5133: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5134: LD_INT 0
5136: PPUSH
5137: LD_INT 1
5139: PUSH
5140: LD_INT 8
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: LD_INT 2
5152: PPUSH
5153: CALL_OW 12
5157: ARRAY
5158: PPUSH
5159: LD_VAR 0 4
5163: PPUSH
5164: CALL_OW 380
// un := CreateHuman ;
5168: LD_ADDR_VAR 0 2
5172: PUSH
5173: CALL_OW 44
5177: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5178: LD_ADDR_VAR 0 3
5182: PUSH
5183: LD_VAR 0 3
5187: PPUSH
5188: LD_INT 2
5190: PUSH
5191: LD_VAR 0 3
5195: PUSH
5196: LD_INT 2
5198: ARRAY
5199: PUSH
5200: LD_INT 1
5202: PLUS
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL 51287 0 3
5217: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_INT 13
5225: PPUSH
5226: LD_INT 0
5228: PPUSH
5229: CALL_OW 49
// end ;
5233: GO 5115
5235: POP
5236: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5237: LD_ADDR_VAR 0 5
5241: PUSH
5242: LD_INT 67
5244: PUSH
5245: LD_INT 112
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 85
5254: PUSH
5255: LD_INT 130
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5266: LD_INT 2
5268: PPUSH
5269: LD_VAR 0 3
5273: PUSH
5274: LD_INT 2
5276: ARRAY
5277: PPUSH
5278: LD_VAR 0 5
5282: PPUSH
5283: LD_VAR 0 6
5287: PPUSH
5288: CALL 38716 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5292: LD_ADDR_VAR 0 1
5296: PUSH
5297: DOUBLE
5298: LD_INT 1
5300: DEC
5301: ST_TO_ADDR
5302: LD_INT 1
5304: PUSH
5305: LD_INT 2
5307: PUSH
5308: LD_INT 3
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: LIST
5315: PUSH
5316: LD_OWVAR 67
5320: ARRAY
5321: PUSH
5322: FOR_TO
5323: IFFALSE 5423
// begin uc_side := 2 ;
5325: LD_ADDR_OWVAR 20
5329: PUSH
5330: LD_INT 2
5332: ST_TO_ADDR
// uc_nation := 2 ;
5333: LD_ADDR_OWVAR 21
5337: PUSH
5338: LD_INT 2
5340: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 17
5346: PPUSH
5347: LD_VAR 0 4
5351: PPUSH
5352: CALL_OW 380
// un := CreateHuman ;
5356: LD_ADDR_VAR 0 2
5360: PUSH
5361: CALL_OW 44
5365: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5366: LD_ADDR_VAR 0 3
5370: PUSH
5371: LD_VAR 0 3
5375: PPUSH
5376: LD_INT 3
5378: PUSH
5379: LD_VAR 0 3
5383: PUSH
5384: LD_INT 3
5386: ARRAY
5387: PUSH
5388: LD_INT 1
5390: PLUS
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: CALL 51287 0 3
5405: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5406: LD_VAR 0 2
5410: PPUSH
5411: LD_INT 14
5413: PPUSH
5414: LD_INT 0
5416: PPUSH
5417: CALL_OW 49
// end ;
5421: GO 5322
5423: POP
5424: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5425: LD_ADDR_VAR 0 5
5429: PUSH
5430: LD_INT 148
5432: PUSH
5433: LD_INT 158
5435: PUSH
5436: EMPTY
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 148
5442: PUSH
5443: LD_INT 158
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5454: LD_INT 3
5456: PPUSH
5457: LD_VAR 0 3
5461: PUSH
5462: LD_INT 3
5464: ARRAY
5465: PPUSH
5466: LD_VAR 0 5
5470: PPUSH
5471: LD_VAR 0 6
5475: PPUSH
5476: CALL 38716 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5480: LD_ADDR_VAR 0 1
5484: PUSH
5485: DOUBLE
5486: LD_INT 1
5488: DEC
5489: ST_TO_ADDR
5490: LD_INT 3
5492: PUSH
5493: LD_INT 4
5495: PUSH
5496: LD_INT 4
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: LD_OWVAR 67
5508: ARRAY
5509: PUSH
5510: FOR_TO
5511: IFFALSE 5735
// begin uc_side := 2 ;
5513: LD_ADDR_OWVAR 20
5517: PUSH
5518: LD_INT 2
5520: ST_TO_ADDR
// uc_nation := 2 ;
5521: LD_ADDR_OWVAR 21
5525: PUSH
5526: LD_INT 2
5528: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5529: LD_INT 14
5531: PPUSH
5532: LD_INT 3
5534: PPUSH
5535: LD_INT 1
5537: PUSH
5538: LD_INT 5
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 1
5547: PPUSH
5548: LD_INT 2
5550: PPUSH
5551: CALL_OW 12
5555: ARRAY
5556: PPUSH
5557: LD_INT 27
5559: PUSH
5560: LD_INT 26
5562: PUSH
5563: LD_INT 28
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_INT 3
5576: PPUSH
5577: CALL_OW 12
5581: ARRAY
5582: PPUSH
5583: LD_INT 100
5585: PPUSH
5586: CALL 50730 0 5
// un := CreateVehicle ;
5590: LD_ADDR_VAR 0 2
5594: PUSH
5595: CALL_OW 45
5599: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5600: LD_ADDR_VAR 0 3
5604: PUSH
5605: LD_VAR 0 3
5609: PPUSH
5610: LD_INT 4
5612: PUSH
5613: LD_VAR 0 3
5617: PUSH
5618: LD_INT 4
5620: ARRAY
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PPUSH
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL 51287 0 3
5639: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 5
5647: PPUSH
5648: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5652: LD_VAR 0 2
5656: PPUSH
5657: LD_INT 15
5659: PPUSH
5660: LD_INT 0
5662: PPUSH
5663: CALL_OW 49
// if GetControl ( un ) = control_manual then
5667: LD_VAR 0 2
5671: PPUSH
5672: CALL_OW 263
5676: PUSH
5677: LD_INT 1
5679: EQUAL
5680: IFFALSE 5711
// begin PrepareHuman ( false , 3 , skill ) ;
5682: LD_INT 0
5684: PPUSH
5685: LD_INT 3
5687: PPUSH
5688: LD_VAR 0 4
5692: PPUSH
5693: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5697: CALL_OW 44
5701: PPUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5711: LD_VAR 0 2
5715: PPUSH
5716: LD_INT 179
5718: PPUSH
5719: LD_INT 135
5721: PPUSH
5722: CALL_OW 111
// wait ( 0 0$2 ) ;
5726: LD_INT 70
5728: PPUSH
5729: CALL_OW 67
// end ;
5733: GO 5510
5735: POP
5736: POP
// vc_chassis := 15 ;
5737: LD_ADDR_OWVAR 37
5741: PUSH
5742: LD_INT 15
5744: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5745: LD_ADDR_VAR 0 3
5749: PUSH
5750: LD_VAR 0 3
5754: PPUSH
5755: LD_INT 4
5757: PUSH
5758: LD_VAR 0 3
5762: PUSH
5763: LD_INT 4
5765: ARRAY
5766: PUSH
5767: LD_INT 1
5769: PLUS
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PPUSH
5775: CALL_OW 45
5779: PPUSH
5780: CALL 51287 0 3
5784: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5785: LD_VAR 0 3
5789: PUSH
5790: LD_INT 4
5792: ARRAY
5793: PUSH
5794: LD_VAR 0 3
5798: PUSH
5799: LD_INT 4
5801: ARRAY
5802: ARRAY
5803: PPUSH
5804: LD_INT 15
5806: PPUSH
5807: LD_INT 0
5809: PPUSH
5810: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5814: LD_INT 0
5816: PPUSH
5817: LD_INT 11
5819: PPUSH
5820: LD_VAR 0 4
5824: PPUSH
5825: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5829: LD_ADDR_VAR 0 3
5833: PUSH
5834: LD_VAR 0 3
5838: PPUSH
5839: LD_INT 4
5841: PUSH
5842: LD_VAR 0 3
5846: PUSH
5847: LD_INT 4
5849: ARRAY
5850: PUSH
5851: LD_INT 1
5853: PLUS
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: CALL_OW 44
5863: PPUSH
5864: CALL 51287 0 3
5868: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5869: LD_VAR 0 3
5873: PUSH
5874: LD_INT 4
5876: ARRAY
5877: PUSH
5878: LD_VAR 0 3
5882: PUSH
5883: LD_INT 4
5885: ARRAY
5886: ARRAY
5887: PPUSH
5888: LD_VAR 0 3
5892: PUSH
5893: LD_INT 4
5895: ARRAY
5896: PUSH
5897: LD_VAR 0 3
5901: PUSH
5902: LD_INT 4
5904: ARRAY
5905: PUSH
5906: LD_INT 1
5908: MINUS
5909: ARRAY
5910: PPUSH
5911: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5915: LD_ADDR_VAR 0 5
5919: PUSH
5920: LD_INT 148
5922: PUSH
5923: LD_INT 140
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5933: LD_INT 1
5935: PPUSH
5936: LD_VAR 0 3
5940: PUSH
5941: LD_INT 4
5943: ARRAY
5944: PPUSH
5945: LD_VAR 0 5
5949: PPUSH
5950: LD_VAR 0 6
5954: PPUSH
5955: CALL 38716 0 4
// if gensher_active then
5959: LD_EXP 18
5963: IFFALSE 6348
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5965: LD_EXP 44
5969: PPUSH
5970: LD_STRING D10-Diet-1
5972: PPUSH
5973: CALL_OW 94
// for i = 1 to 2 do
5977: LD_ADDR_VAR 0 1
5981: PUSH
5982: DOUBLE
5983: LD_INT 1
5985: DEC
5986: ST_TO_ADDR
5987: LD_INT 2
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6129
// begin uc_side := 2 ;
5993: LD_ADDR_OWVAR 20
5997: PUSH
5998: LD_INT 2
6000: ST_TO_ADDR
// uc_nation := 2 ;
6001: LD_ADDR_OWVAR 21
6005: PUSH
6006: LD_INT 2
6008: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6009: LD_INT 13
6011: PPUSH
6012: LD_INT 3
6014: PPUSH
6015: LD_INT 5
6017: PPUSH
6018: LD_INT 29
6020: PPUSH
6021: LD_INT 100
6023: PPUSH
6024: CALL 50730 0 5
// un := CreateVehicle ;
6028: LD_ADDR_VAR 0 2
6032: PUSH
6033: CALL_OW 45
6037: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6038: LD_ADDR_VAR 0 3
6042: PUSH
6043: LD_VAR 0 3
6047: PPUSH
6048: LD_INT 5
6050: PUSH
6051: LD_VAR 0 3
6055: PUSH
6056: LD_INT 5
6058: ARRAY
6059: PUSH
6060: LD_INT 1
6062: PLUS
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PPUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: CALL 51287 0 3
6077: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6078: LD_VAR 0 2
6082: PPUSH
6083: LD_INT 0
6085: PPUSH
6086: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6090: LD_VAR 0 2
6094: PPUSH
6095: LD_INT 23
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6105: LD_VAR 0 2
6109: PPUSH
6110: LD_INT 85
6112: PPUSH
6113: LD_INT 152
6115: PPUSH
6116: CALL_OW 111
// wait ( 0 0$2 ) ;
6120: LD_INT 70
6122: PPUSH
6123: CALL_OW 67
// end ;
6127: GO 5990
6129: POP
6130: POP
// for i = 1 to 3 do
6131: LD_ADDR_VAR 0 1
6135: PUSH
6136: DOUBLE
6137: LD_INT 1
6139: DEC
6140: ST_TO_ADDR
6141: LD_INT 3
6143: PUSH
6144: FOR_TO
6145: IFFALSE 6302
// begin uc_side := 2 ;
6147: LD_ADDR_OWVAR 20
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// uc_nation := 2 ;
6155: LD_ADDR_OWVAR 21
6159: PUSH
6160: LD_INT 2
6162: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6163: LD_INT 14
6165: PPUSH
6166: LD_INT 3
6168: PPUSH
6169: LD_INT 5
6171: PPUSH
6172: LD_INT 27
6174: PUSH
6175: LD_INT 28
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_INT 2
6187: PPUSH
6188: CALL_OW 12
6192: ARRAY
6193: PPUSH
6194: LD_INT 100
6196: PPUSH
6197: CALL 50730 0 5
// un := CreateVehicle ;
6201: LD_ADDR_VAR 0 2
6205: PUSH
6206: CALL_OW 45
6210: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6211: LD_ADDR_VAR 0 3
6215: PUSH
6216: LD_VAR 0 3
6220: PPUSH
6221: LD_INT 5
6223: PUSH
6224: LD_VAR 0 3
6228: PUSH
6229: LD_INT 5
6231: ARRAY
6232: PUSH
6233: LD_INT 1
6235: PLUS
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: LD_VAR 0 2
6245: PPUSH
6246: CALL 51287 0 3
6250: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6251: LD_VAR 0 2
6255: PPUSH
6256: LD_INT 0
6258: PPUSH
6259: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 23
6270: PPUSH
6271: LD_INT 0
6273: PPUSH
6274: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6278: LD_VAR 0 2
6282: PPUSH
6283: LD_INT 85
6285: PPUSH
6286: LD_INT 152
6288: PPUSH
6289: CALL_OW 111
// wait ( 0 0$2 ) ;
6293: LD_INT 70
6295: PPUSH
6296: CALL_OW 67
// end ;
6300: GO 6144
6302: POP
6303: POP
// coords := [ [ 97 , 143 ] ] ;
6304: LD_ADDR_VAR 0 5
6308: PUSH
6309: LD_INT 97
6311: PUSH
6312: LD_INT 143
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: EMPTY
6320: LIST
6321: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6322: LD_INT 1
6324: PPUSH
6325: LD_VAR 0 3
6329: PUSH
6330: LD_INT 5
6332: ARRAY
6333: PPUSH
6334: LD_VAR 0 5
6338: PPUSH
6339: LD_VAR 0 6
6343: PPUSH
6344: CALL 38716 0 4
// end ; Wait ( 13 13$00 ) ;
6348: LD_INT 27300
6350: PPUSH
6351: CALL_OW 67
// tmp := [ ] ;
6355: LD_ADDR_VAR 0 3
6359: PUSH
6360: EMPTY
6361: ST_TO_ADDR
// w := 1 ;
6362: LD_ADDR_VAR 0 7
6366: PUSH
6367: LD_INT 1
6369: ST_TO_ADDR
// repeat tmp := [ ] ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: EMPTY
6376: ST_TO_ADDR
// if w mod 4 = 0 then
6377: LD_VAR 0 7
6381: PUSH
6382: LD_INT 4
6384: MOD
6385: PUSH
6386: LD_INT 0
6388: EQUAL
6389: IFFALSE 6476
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6391: LD_ADDR_VAR 0 8
6395: PUSH
6396: LD_INT 11
6398: PUSH
6399: LD_INT 1
6401: PUSH
6402: LD_INT 2
6404: PUSH
6405: LD_INT 24
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 11
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: LD_INT 2
6422: PUSH
6423: LD_INT 24
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 11
6434: PUSH
6435: LD_INT 1
6437: PUSH
6438: LD_INT 2
6440: PUSH
6441: LD_INT 24
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: PUSH
6450: LD_INT 11
6452: PUSH
6453: LD_INT 1
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: LD_INT 24
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: ST_TO_ADDR
6474: GO 6578
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6476: LD_ADDR_VAR 0 8
6480: PUSH
6481: LD_INT 14
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: LD_INT 2
6489: PUSH
6490: LD_INT 28
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: PUSH
6499: LD_INT 14
6501: PUSH
6502: LD_INT 1
6504: PUSH
6505: LD_INT 2
6507: PUSH
6508: LD_INT 25
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: LD_INT 14
6519: PUSH
6520: LD_INT 1
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 28
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: PUSH
6535: LD_INT 14
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_INT 29
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 11
6555: PUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_INT 24
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: ST_TO_ADDR
// if w mod 3 = 0 then
6578: LD_VAR 0 7
6582: PUSH
6583: LD_INT 3
6585: MOD
6586: PUSH
6587: LD_INT 0
6589: EQUAL
6590: IFFALSE 6666
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6592: LD_ADDR_VAR 0 8
6596: PUSH
6597: LD_VAR 0 8
6601: PPUSH
6602: LD_INT 1
6604: PUSH
6605: LD_VAR 0 8
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PUSH
6616: LD_INT 1
6618: PLUS
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PPUSH
6624: LD_INT 14
6626: PUSH
6627: LD_INT 1
6629: PUSH
6630: LD_INT 2
6632: PUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 28
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 1
6645: PPUSH
6646: LD_INT 2
6648: PPUSH
6649: CALL_OW 12
6653: ARRAY
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL 51287 0 3
6665: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6666: LD_INT 1
6668: PPUSH
6669: LD_VAR 0 8
6673: PPUSH
6674: CALL 38425 0 2
// if GetSide ( ar_dep_w ) = 2 then
6678: LD_INT 45
6680: PPUSH
6681: CALL_OW 255
6685: PUSH
6686: LD_INT 2
6688: EQUAL
6689: IFFALSE 6774
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6691: LD_ADDR_VAR 0 8
6695: PUSH
6696: LD_INT 14
6698: PUSH
6699: LD_INT 1
6701: PUSH
6702: LD_INT 2
6704: PUSH
6705: LD_INT 28
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 14
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: LD_INT 27
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: PUSH
6732: LD_INT 14
6734: PUSH
6735: LD_INT 1
6737: PUSH
6738: LD_INT 2
6740: PUSH
6741: LD_INT 27
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6755: LD_INT 2
6757: PPUSH
6758: LD_VAR 0 8
6762: PPUSH
6763: CALL 38425 0 2
// wait ( 0 0$50 ) ;
6767: LD_INT 1750
6769: PPUSH
6770: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6774: LD_INT 35
6776: PPUSH
6777: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6781: LD_EXP 68
6785: PUSH
6786: LD_INT 1
6788: ARRAY
6789: PPUSH
6790: LD_INT 3
6792: PUSH
6793: LD_INT 34
6795: PUSH
6796: LD_INT 32
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PPUSH
6807: CALL_OW 72
6811: PUSH
6812: LD_INT 4
6814: GREATEREQUAL
6815: IFFALSE 6774
// wait ( 0 0$10 ) ;
6817: LD_INT 350
6819: PPUSH
6820: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6824: LD_ADDR_VAR 0 3
6828: PUSH
6829: LD_EXP 68
6833: PUSH
6834: LD_INT 1
6836: ARRAY
6837: PPUSH
6838: LD_INT 3
6840: PUSH
6841: LD_INT 34
6843: PUSH
6844: LD_INT 32
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 72
6859: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6860: LD_INT 100
6862: PPUSH
6863: CALL_OW 13
6867: PUSH
6868: LD_INT 50
6870: LESS
6871: IFFALSE 6904
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6873: LD_ADDR_VAR 0 5
6877: PUSH
6878: LD_INT 55
6880: PUSH
6881: LD_INT 7
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 75
6890: PUSH
6891: LD_INT 90
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: ST_TO_ADDR
6902: GO 6933
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6904: LD_ADDR_VAR 0 5
6908: PUSH
6909: LD_INT 128
6911: PUSH
6912: LD_INT 94
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 180
6921: PUSH
6922: LD_INT 135
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: ST_TO_ADDR
// if w mod 4 = 0 then
6933: LD_VAR 0 7
6937: PUSH
6938: LD_INT 4
6940: MOD
6941: PUSH
6942: LD_INT 0
6944: EQUAL
6945: IFFALSE 6976
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6947: LD_ADDR_VAR 0 5
6951: PUSH
6952: LD_INT 91
6954: PUSH
6955: LD_INT 58
6957: PUSH
6958: EMPTY
6959: LIST
6960: LIST
6961: PUSH
6962: LD_INT 117
6964: PUSH
6965: LD_INT 107
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6976: LD_INT 1
6978: PPUSH
6979: LD_VAR 0 3
6983: PPUSH
6984: LD_VAR 0 5
6988: PPUSH
6989: LD_VAR 0 6
6993: PPUSH
6994: CALL 38716 0 4
// if mc_vehicles [ 2 ] then
6998: LD_EXP 68
7002: PUSH
7003: LD_INT 2
7005: ARRAY
7006: IFFALSE 7042
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7008: LD_INT 2
7010: PPUSH
7011: LD_EXP 68
7015: PUSH
7016: LD_INT 2
7018: ARRAY
7019: PPUSH
7020: LD_INT 73
7022: PUSH
7023: LD_INT 115
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: PPUSH
7033: LD_VAR 0 6
7037: PPUSH
7038: CALL 38716 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
7042: LD_INT 19950
7044: PPUSH
7045: LD_INT 26250
7047: PPUSH
7048: CALL_OW 12
7052: PPUSH
7053: CALL_OW 67
// w := w + 1 ;
7057: LD_ADDR_VAR 0 7
7061: PUSH
7062: LD_VAR 0 7
7066: PUSH
7067: LD_INT 1
7069: PLUS
7070: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7071: LD_INT 94
7073: PPUSH
7074: CALL_OW 301
7078: PUSH
7079: LD_EXP 49
7083: PUSH
7084: LD_INT 1
7086: ARRAY
7087: PPUSH
7088: LD_INT 30
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: PPUSH
7098: CALL_OW 72
7102: NOT
7103: OR
7104: IFFALSE 6370
// end ;
7106: PPOPN 8
7108: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7109: LD_INT 69
7111: IFFALSE 7486
7113: GO 7115
7115: DISABLE
7116: LD_INT 0
7118: PPUSH
7119: PPUSH
7120: PPUSH
7121: PPUSH
// begin enable ;
7122: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7123: LD_INT 35
7125: PPUSH
7126: LD_INT 1190
7128: PPUSH
7129: CALL_OW 12
7133: PPUSH
7134: CALL_OW 67
// tmp := [ ] ;
7138: LD_ADDR_VAR 0 2
7142: PUSH
7143: EMPTY
7144: ST_TO_ADDR
// uc_side := 8 ;
7145: LD_ADDR_OWVAR 20
7149: PUSH
7150: LD_INT 8
7152: ST_TO_ADDR
// uc_nation := 2 ;
7153: LD_ADDR_OWVAR 21
7157: PUSH
7158: LD_INT 2
7160: ST_TO_ADDR
// InitHc ;
7161: CALL_OW 19
// for i = 1 to 3 do
7165: LD_ADDR_VAR 0 1
7169: PUSH
7170: DOUBLE
7171: LD_INT 1
7173: DEC
7174: ST_TO_ADDR
7175: LD_INT 3
7177: PUSH
7178: FOR_TO
7179: IFFALSE 7306
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7181: LD_INT 13
7183: PUSH
7184: LD_INT 14
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 1
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: CALL_OW 12
7201: ARRAY
7202: PPUSH
7203: LD_INT 3
7205: PPUSH
7206: LD_INT 5
7208: PPUSH
7209: LD_INT 27
7211: PUSH
7212: LD_INT 28
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 1
7221: PPUSH
7222: LD_INT 2
7224: PPUSH
7225: CALL_OW 12
7229: ARRAY
7230: PPUSH
7231: LD_INT 100
7233: PPUSH
7234: CALL 50730 0 5
// un := CreateVehicle ;
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: CALL_OW 45
7247: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7248: LD_VAR 0 3
7252: PPUSH
7253: LD_INT 4
7255: PPUSH
7256: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7260: LD_VAR 0 3
7264: PPUSH
7265: LD_INT 15
7267: PPUSH
7268: LD_INT 0
7270: PPUSH
7271: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7275: LD_ADDR_VAR 0 2
7279: PUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_VAR 0 2
7289: PUSH
7290: LD_INT 1
7292: PLUS
7293: PPUSH
7294: LD_VAR 0 3
7298: PPUSH
7299: CALL_OW 1
7303: ST_TO_ADDR
// end ;
7304: GO 7178
7306: POP
7307: POP
// for i = 1 to 4 do
7308: LD_ADDR_VAR 0 1
7312: PUSH
7313: DOUBLE
7314: LD_INT 1
7316: DEC
7317: ST_TO_ADDR
7318: LD_INT 4
7320: PUSH
7321: FOR_TO
7322: IFFALSE 7401
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7324: LD_INT 0
7326: PPUSH
7327: LD_INT 1
7329: PPUSH
7330: LD_INT 4
7332: PPUSH
7333: CALL_OW 12
7337: PPUSH
7338: LD_INT 6
7340: PPUSH
7341: CALL_OW 380
// un := CreateHuman ;
7345: LD_ADDR_VAR 0 3
7349: PUSH
7350: CALL_OW 44
7354: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7355: LD_VAR 0 3
7359: PPUSH
7360: LD_INT 15
7362: PPUSH
7363: LD_INT 0
7365: PPUSH
7366: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7370: LD_ADDR_VAR 0 2
7374: PUSH
7375: LD_VAR 0 2
7379: PPUSH
7380: LD_VAR 0 2
7384: PUSH
7385: LD_INT 1
7387: PLUS
7388: PPUSH
7389: LD_VAR 0 3
7393: PPUSH
7394: CALL_OW 1
7398: ST_TO_ADDR
// end ;
7399: GO 7321
7401: POP
7402: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7403: LD_VAR 0 2
7407: PPUSH
7408: LD_INT 210
7410: PPUSH
7411: LD_INT 177
7413: PPUSH
7414: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7418: LD_ADDR_VAR 0 4
7422: PUSH
7423: LD_INT 10
7425: PPUSH
7426: LD_INT 22
7428: PUSH
7429: LD_INT 8
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 70
7440: ST_TO_ADDR
// if x then
7441: LD_VAR 0 4
7445: IFFALSE 7473
// for i in x do
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_VAR 0 4
7456: PUSH
7457: FOR_IN
7458: IFFALSE 7471
// RemoveUnit ( i ) ;
7460: LD_VAR 0 1
7464: PPUSH
7465: CALL_OW 64
7469: GO 7457
7471: POP
7472: POP
// wait ( 0 0$3 ) ;
7473: LD_INT 105
7475: PPUSH
7476: CALL_OW 67
// until tmp ;
7480: LD_VAR 0 2
7484: IFFALSE 7403
// end ;
7486: PPOPN 4
7488: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7489: LD_INT 22
7491: PUSH
7492: LD_INT 2
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 34
7501: PUSH
7502: LD_INT 31
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: LD_INT 24
7514: PUSH
7515: LD_INT 1000
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: LIST
7530: PPUSH
7531: CALL_OW 69
7535: IFFALSE 7579
7537: GO 7539
7539: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7540: LD_INT 22
7542: PUSH
7543: LD_INT 2
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: PUSH
7550: LD_INT 34
7552: PUSH
7553: LD_INT 31
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 69
7568: PPUSH
7569: LD_INT 106
7571: PPUSH
7572: LD_INT 14
7574: PPUSH
7575: CALL_OW 111
// end ; end_of_file
7579: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7580: LD_INT 0
7582: PPUSH
7583: PPUSH
7584: PPUSH
7585: PPUSH
7586: PPUSH
7587: PPUSH
// InGameOn ;
7588: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7592: LD_EXP 21
7596: PPUSH
7597: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7601: LD_INT 2
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: LD_INT 1
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_INT 22
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 25
7634: PUSH
7635: LD_INT 1
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PPUSH
7646: CALL_OW 69
7650: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7651: LD_ADDR_VAR 0 4
7655: PUSH
7656: LD_INT 22
7658: PUSH
7659: LD_INT 1
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 34
7668: PUSH
7669: LD_INT 11
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL_OW 69
7684: PUSH
7685: LD_INT 1
7687: ARRAY
7688: ST_TO_ADDR
// for i = 1 to tmp do
7689: LD_ADDR_VAR 0 6
7693: PUSH
7694: DOUBLE
7695: LD_INT 1
7697: DEC
7698: ST_TO_ADDR
7699: LD_VAR 0 2
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7752
// begin if i = 5 then
7707: LD_VAR 0 6
7711: PUSH
7712: LD_INT 5
7714: EQUAL
7715: IFFALSE 7719
// break ;
7717: GO 7752
// sols := Replace ( sols , i , tmp [ i ] ) ;
7719: LD_ADDR_VAR 0 5
7723: PUSH
7724: LD_VAR 0 5
7728: PPUSH
7729: LD_VAR 0 6
7733: PPUSH
7734: LD_VAR 0 2
7738: PUSH
7739: LD_VAR 0 6
7743: ARRAY
7744: PPUSH
7745: CALL_OW 1
7749: ST_TO_ADDR
// end ;
7750: GO 7704
7752: POP
7753: POP
// tmp := ar_force_tmp ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_EXP 39
7763: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7764: LD_VAR 0 2
7768: PUSH
7769: LD_INT 1
7771: ARRAY
7772: PPUSH
7773: LD_INT 108
7775: PPUSH
7776: LD_INT 139
7778: PPUSH
7779: LD_INT 0
7781: PPUSH
7782: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7786: LD_VAR 0 2
7790: PUSH
7791: LD_INT 1
7793: ARRAY
7794: PPUSH
7795: LD_EXP 21
7799: PPUSH
7800: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7804: LD_VAR 0 2
7808: PUSH
7809: LD_INT 2
7811: ARRAY
7812: PPUSH
7813: LD_INT 114
7815: PPUSH
7816: LD_INT 132
7818: PPUSH
7819: LD_INT 0
7821: PPUSH
7822: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7826: LD_VAR 0 2
7830: PUSH
7831: LD_INT 3
7833: ARRAY
7834: PPUSH
7835: LD_INT 115
7837: PPUSH
7838: LD_INT 132
7840: PPUSH
7841: LD_INT 0
7843: PPUSH
7844: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7848: LD_VAR 0 2
7852: PUSH
7853: LD_INT 2
7855: ARRAY
7856: PUSH
7857: LD_VAR 0 2
7861: PUSH
7862: LD_INT 3
7864: ARRAY
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PPUSH
7870: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7874: LD_VAR 0 4
7878: PPUSH
7879: LD_INT 83
7881: PPUSH
7882: LD_INT 123
7884: PPUSH
7885: CALL_OW 111
// Wait ( 0 0$01 ) ;
7889: LD_INT 35
7891: PPUSH
7892: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7896: LD_INT 90
7898: PPUSH
7899: LD_INT 144
7901: PPUSH
7902: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7906: LD_VAR 0 5
7910: PPUSH
7911: LD_INT 88
7913: PPUSH
7914: LD_INT 129
7916: PPUSH
7917: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7921: LD_ADDR_VAR 0 3
7925: PUSH
7926: LD_INT 92
7928: PUSH
7929: LD_INT 131
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 88
7938: PUSH
7939: LD_INT 127
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 91
7948: PUSH
7949: LD_INT 132
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 92
7958: PUSH
7959: LD_INT 134
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: ST_TO_ADDR
// for i = 1 to sols do
7972: LD_ADDR_VAR 0 6
7976: PUSH
7977: DOUBLE
7978: LD_INT 1
7980: DEC
7981: ST_TO_ADDR
7982: LD_VAR 0 5
7986: PUSH
7987: FOR_TO
7988: IFFALSE 8061
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7990: LD_VAR 0 5
7994: PUSH
7995: LD_VAR 0 6
7999: ARRAY
8000: PPUSH
8001: LD_VAR 0 3
8005: PUSH
8006: LD_VAR 0 6
8010: ARRAY
8011: PUSH
8012: LD_INT 1
8014: ARRAY
8015: PPUSH
8016: LD_VAR 0 3
8020: PUSH
8021: LD_VAR 0 6
8025: ARRAY
8026: PUSH
8027: LD_INT 2
8029: ARRAY
8030: PPUSH
8031: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8035: LD_VAR 0 5
8039: PUSH
8040: LD_VAR 0 6
8044: ARRAY
8045: PPUSH
8046: CALL_OW 197
// AddComHold ( sols ) ;
8050: LD_VAR 0 5
8054: PPUSH
8055: CALL_OW 200
// end ;
8059: GO 7987
8061: POP
8062: POP
// repeat wait ( 0 0$1 ) ;
8063: LD_INT 35
8065: PPUSH
8066: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8070: LD_VAR 0 5
8074: PUSH
8075: LD_INT 1
8077: ARRAY
8078: PPUSH
8079: LD_INT 92
8081: PPUSH
8082: LD_INT 131
8084: PPUSH
8085: CALL_OW 297
8089: PUSH
8090: LD_INT 4
8092: LESS
8093: IFFALSE 8063
// CenterOnXY ( 96 , 139 ) ;
8095: LD_INT 96
8097: PPUSH
8098: LD_INT 139
8100: PPUSH
8101: CALL_OW 84
// wait ( 0 0$3 ) ;
8105: LD_INT 105
8107: PPUSH
8108: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8112: LD_INT 111
8114: PPUSH
8115: LD_INT 135
8117: PPUSH
8118: LD_INT 1
8120: PPUSH
8121: LD_INT 25
8123: NEG
8124: PPUSH
8125: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8129: LD_VAR 0 2
8133: PUSH
8134: LD_INT 2
8136: ARRAY
8137: PPUSH
8138: LD_VAR 0 2
8142: PUSH
8143: LD_INT 1
8145: ARRAY
8146: PPUSH
8147: CALL_OW 250
8151: PUSH
8152: LD_INT 3
8154: PLUS
8155: PPUSH
8156: LD_VAR 0 2
8160: PUSH
8161: LD_INT 1
8163: ARRAY
8164: PPUSH
8165: CALL_OW 251
8169: PPUSH
8170: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8174: LD_VAR 0 2
8178: PUSH
8179: LD_INT 3
8181: ARRAY
8182: PPUSH
8183: LD_INT 7
8185: PPUSH
8186: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8190: LD_VAR 0 2
8194: PUSH
8195: LD_INT 2
8197: ARRAY
8198: PPUSH
8199: LD_VAR 0 2
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8212: LD_INT 35
8214: PPUSH
8215: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8219: LD_VAR 0 2
8223: PUSH
8224: LD_INT 1
8226: ARRAY
8227: PPUSH
8228: LD_VAR 0 2
8232: PUSH
8233: LD_INT 2
8235: ARRAY
8236: PPUSH
8237: CALL_OW 296
8241: PUSH
8242: LD_INT 5
8244: LESS
8245: IFFALSE 8212
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8247: LD_VAR 0 2
8251: PUSH
8252: LD_INT 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PPUSH
8265: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8269: LD_VAR 0 2
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_STRING D1a-Merc1-1
8280: PPUSH
8281: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 2
8292: ARRAY
8293: PPUSH
8294: LD_STRING D1a-FMerc2-1
8296: PPUSH
8297: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8301: LD_VAR 0 2
8305: PUSH
8306: LD_INT 2
8308: ARRAY
8309: PPUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8323: LD_VAR 0 2
8327: PUSH
8328: LD_INT 1
8330: ARRAY
8331: PPUSH
8332: LD_INT 500
8334: PPUSH
8335: CALL_OW 234
// wait ( 0 0$2 ) ;
8339: LD_INT 70
8341: PPUSH
8342: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8346: LD_VAR 0 2
8350: PUSH
8351: LD_INT 1
8353: ARRAY
8354: PPUSH
8355: LD_INT 2
8357: PPUSH
8358: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8362: LD_INT 10
8364: PPUSH
8365: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8369: LD_VAR 0 2
8373: PUSH
8374: LD_INT 1
8376: ARRAY
8377: PPUSH
8378: LD_STRING D1a-Merc1-2
8380: PPUSH
8381: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8385: LD_INT 7
8387: PPUSH
8388: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8392: LD_VAR 0 2
8396: PUSH
8397: LD_INT 1
8399: ARRAY
8400: PPUSH
8401: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: LD_INT 10
8416: PPUSH
8417: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8421: LD_VAR 0 2
8425: PUSH
8426: LD_INT 2
8428: ARRAY
8429: PPUSH
8430: LD_STRING D1a-FMerc2-2
8432: PPUSH
8433: CALL_OW 88
// wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8444: LD_INT 7
8446: PPUSH
8447: CALL_OW 85
// wait ( 0 0$2 ) ;
8451: LD_INT 70
8453: PPUSH
8454: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8458: LD_EXP 43
8462: PPUSH
8463: LD_STRING D1a-Saliba-1
8465: PPUSH
8466: CALL_OW 91
// KillUnit ( Saliba ) ;
8470: LD_EXP 43
8474: PPUSH
8475: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8479: LD_VAR 0 2
8483: PUSH
8484: LD_INT 3
8486: ARRAY
8487: PPUSH
8488: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8492: LD_EXP 21
8496: PPUSH
8497: CALL_OW 85
// wait ( 0 0$1 ) ;
8501: LD_INT 35
8503: PPUSH
8504: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8508: LD_VAR 0 5
8512: PPUSH
8513: LD_INT 88
8515: PPUSH
8516: LD_INT 141
8518: PPUSH
8519: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8523: LD_VAR 0 5
8527: PPUSH
8528: LD_INT 70
8530: PPUSH
8531: CALL_OW 202
// AddComWalk ( sols ) ;
8535: LD_VAR 0 5
8539: PPUSH
8540: CALL_OW 198
// wait ( 0 0$2 ) ;
8544: LD_INT 70
8546: PPUSH
8547: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8551: LD_INT 2
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 2
8559: PPUSH
8560: LD_INT 1
8562: PPUSH
8563: CALL_OW 80
// InGameOff ;
8567: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8571: LD_STRING M1
8573: PPUSH
8574: CALL_OW 337
// game_speed := 4 ;
8578: LD_ADDR_OWVAR 65
8582: PUSH
8583: LD_INT 4
8585: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8586: LD_INT 111
8588: PPUSH
8589: LD_INT 135
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: CALL_OW 331
// SaveForQuickRestart ;
8599: CALL_OW 22
// ar_run := true ;
8603: LD_ADDR_EXP 5
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8611: LD_INT 35
8613: PPUSH
8614: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8618: LD_INT 22
8620: PUSH
8621: LD_INT 1
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 91
8630: PUSH
8631: LD_INT 7
8633: PUSH
8634: LD_INT 10
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PPUSH
8646: CALL_OW 69
8650: PUSH
8651: LD_INT 7
8653: PPUSH
8654: CALL_OW 256
8658: PUSH
8659: LD_INT 999
8661: LESS
8662: OR
8663: IFFALSE 8611
// if GetSide ( ar_dep_s ) = 2 then
8665: LD_INT 7
8667: PPUSH
8668: CALL_OW 255
8672: PUSH
8673: LD_INT 2
8675: EQUAL
8676: IFFALSE 8688
// SetSide ( ar_dep_s , 1 ) ;
8678: LD_INT 7
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 235
// end ;
8688: LD_VAR 0 1
8692: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8693: LD_EXP 5
8697: IFFALSE 9057
8699: GO 8701
8701: DISABLE
8702: LD_INT 0
8704: PPUSH
8705: PPUSH
8706: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8707: LD_ADDR_VAR 0 2
8711: PUSH
8712: LD_EXP 39
8716: PUSH
8717: LD_EXP 36
8721: PPUSH
8722: LD_INT 2
8724: PUSH
8725: LD_INT 21
8727: PUSH
8728: LD_INT 2
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PUSH
8735: LD_INT 21
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: PPUSH
8750: CALL_OW 72
8754: ADD
8755: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8756: LD_VAR 0 2
8760: PPUSH
8761: LD_INT 5
8763: PPUSH
8764: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8768: LD_INT 5
8770: PPUSH
8771: LD_INT 1
8773: PPUSH
8774: CALL_OW 343
// k := 1 ;
8778: LD_ADDR_VAR 0 3
8782: PUSH
8783: LD_INT 1
8785: ST_TO_ADDR
// for i in tmp do
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_VAR 0 2
8795: PUSH
8796: FOR_IN
8797: IFFALSE 8882
// begin if IsInUnit ( i ) then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 310
8808: IFFALSE 8819
// ComExitBuilding ( i ) ;
8810: LD_VAR 0 1
8814: PPUSH
8815: CALL_OW 122
// if GetClass ( i ) = 3 then
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 257
8828: PUSH
8829: LD_INT 3
8831: EQUAL
8832: IFFALSE 8868
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8834: LD_VAR 0 1
8838: PPUSH
8839: LD_EXP 40
8843: PUSH
8844: LD_VAR 0 3
8848: ARRAY
8849: PPUSH
8850: CALL_OW 180
// k := k + 1 ;
8854: LD_ADDR_VAR 0 3
8858: PUSH
8859: LD_VAR 0 3
8863: PUSH
8864: LD_INT 1
8866: PLUS
8867: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8868: LD_VAR 0 1
8872: PPUSH
8873: LD_INT 10
8875: PPUSH
8876: CALL_OW 173
// end ;
8880: GO 8796
8882: POP
8883: POP
// ar_patrol := true ;
8884: LD_ADDR_EXP 7
8888: PUSH
8889: LD_INT 1
8891: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8892: LD_INT 10
8894: PPUSH
8895: CALL_OW 67
// for i in tmp do
8899: LD_ADDR_VAR 0 1
8903: PUSH
8904: LD_VAR 0 2
8908: PUSH
8909: FOR_IN
8910: IFFALSE 8938
// if not HasTask ( i ) then
8912: LD_VAR 0 1
8916: PPUSH
8917: CALL_OW 314
8921: NOT
8922: IFFALSE 8936
// ComMoveToArea ( i , escape_area ) ;
8924: LD_VAR 0 1
8928: PPUSH
8929: LD_INT 10
8931: PPUSH
8932: CALL_OW 113
8936: GO 8909
8938: POP
8939: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8940: LD_ADDR_VAR 0 3
8944: PUSH
8945: LD_VAR 0 2
8949: PPUSH
8950: LD_INT 95
8952: PUSH
8953: LD_INT 10
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 72
8964: ST_TO_ADDR
// if k then
8965: LD_VAR 0 3
8969: IFFALSE 9038
// for i in k do
8971: LD_ADDR_VAR 0 1
8975: PUSH
8976: LD_VAR 0 3
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9036
// begin if IsInUnit ( i ) then
8984: LD_VAR 0 1
8988: PPUSH
8989: CALL_OW 310
8993: IFFALSE 9009
// RemoveUnit ( IsInUnit ( i ) ) ;
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 310
9004: PPUSH
9005: CALL_OW 64
// RemoveUnit ( i ) ;
9009: LD_VAR 0 1
9013: PPUSH
9014: CALL_OW 64
// tmp := tmp diff i ;
9018: LD_ADDR_VAR 0 2
9022: PUSH
9023: LD_VAR 0 2
9027: PUSH
9028: LD_VAR 0 1
9032: DIFF
9033: ST_TO_ADDR
// end ;
9034: GO 8981
9036: POP
9037: POP
// until tmp = [ ] ;
9038: LD_VAR 0 2
9042: PUSH
9043: EMPTY
9044: EQUAL
9045: IFFALSE 8892
// ChangeSideFog ( 5 , 5 ) ;
9047: LD_INT 5
9049: PPUSH
9050: LD_INT 5
9052: PPUSH
9053: CALL_OW 343
// end ;
9057: PPOPN 3
9059: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9060: LD_EXP 7
9064: IFFALSE 9354
9066: GO 9068
9068: DISABLE
9069: LD_INT 0
9071: PPUSH
9072: PPUSH
9073: PPUSH
// begin uc_side := 2 ;
9074: LD_ADDR_OWVAR 20
9078: PUSH
9079: LD_INT 2
9081: ST_TO_ADDR
// uc_nation := 2 ;
9082: LD_ADDR_OWVAR 21
9086: PUSH
9087: LD_INT 2
9089: ST_TO_ADDR
// InitHc ;
9090: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9094: LD_INT 1
9096: PPUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 6
9102: PPUSH
9103: CALL_OW 380
// un := CreateHuman ;
9107: LD_ADDR_VAR 0 2
9111: PUSH
9112: CALL_OW 44
9116: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9117: LD_INT 14
9119: PPUSH
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 1
9125: PPUSH
9126: LD_INT 27
9128: PPUSH
9129: LD_INT 98
9131: PPUSH
9132: CALL 50730 0 5
// veh := CreateVehicle ;
9136: LD_ADDR_VAR 0 3
9140: PUSH
9141: CALL_OW 45
9145: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_INT 4
9153: PPUSH
9154: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9158: LD_VAR 0 3
9162: PPUSH
9163: LD_INT 179
9165: PPUSH
9166: LD_INT 135
9168: PPUSH
9169: LD_INT 0
9171: PPUSH
9172: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9176: LD_VAR 0 2
9180: PPUSH
9181: LD_VAR 0 3
9185: PPUSH
9186: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9190: LD_VAR 0 2
9194: PPUSH
9195: LD_INT 126
9197: PPUSH
9198: LD_INT 133
9200: PPUSH
9201: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9205: LD_INT 10
9207: PPUSH
9208: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9212: LD_INT 1
9214: PPUSH
9215: LD_VAR 0 3
9219: PPUSH
9220: CALL_OW 292
9224: PUSH
9225: LD_VAR 0 3
9229: PPUSH
9230: LD_INT 7
9232: PPUSH
9233: CALL_OW 296
9237: PUSH
9238: LD_INT 9
9240: LESS
9241: OR
9242: IFFALSE 9205
// ComHold ( veh ) ;
9244: LD_VAR 0 3
9248: PPUSH
9249: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9253: LD_VAR 0 2
9257: PPUSH
9258: LD_STRING D2aa-Ar1-1
9260: PPUSH
9261: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9265: LD_VAR 0 2
9269: PPUSH
9270: LD_INT 177
9272: PPUSH
9273: LD_INT 96
9275: PPUSH
9276: CALL_OW 111
// AddComExitVehicle ( un ) ;
9280: LD_VAR 0 2
9284: PPUSH
9285: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9289: LD_INT 35
9291: PPUSH
9292: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9296: LD_VAR 0 2
9300: PPUSH
9301: LD_INT 69
9303: PPUSH
9304: CALL_OW 296
9308: PUSH
9309: LD_INT 15
9311: LESS
9312: IFFALSE 9289
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9314: LD_ADDR_EXP 49
9318: PUSH
9319: LD_EXP 49
9323: PPUSH
9324: LD_INT 3
9326: PUSH
9327: LD_EXP 49
9331: PUSH
9332: LD_INT 3
9334: ARRAY
9335: PUSH
9336: LD_INT 1
9338: PLUS
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: PPUSH
9344: LD_VAR 0 2
9348: PPUSH
9349: CALL 51287 0 3
9353: ST_TO_ADDR
// end ;
9354: PPOPN 3
9356: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9357: LD_INT 7
9359: PPUSH
9360: CALL_OW 255
9364: PUSH
9365: LD_INT 1
9367: EQUAL
9368: PUSH
9369: LD_INT 7
9371: PPUSH
9372: CALL_OW 301
9376: OR
9377: IFFALSE 11801
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9386: LD_ADDR_VAR 0 1
9390: PUSH
9391: LD_EXP 36
9395: PPUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 3
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 72
9410: PUSH
9411: FOR_IN
9412: IFFALSE 9428
// SetSide ( i , 1 ) ;
9414: LD_VAR 0 1
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 235
9426: GO 9411
9428: POP
9429: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9430: LD_ADDR_VAR 0 2
9434: PUSH
9435: LD_INT 46
9437: PUSH
9438: LD_INT 41
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 50
9447: PUSH
9448: LD_INT 25
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: LD_INT 57
9457: PUSH
9458: LD_INT 75
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 75
9467: PUSH
9468: LD_INT 89
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PUSH
9475: LD_INT 51
9477: PUSH
9478: LD_INT 45
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 95
9487: PUSH
9488: LD_INT 95
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: PUSH
9495: LD_INT 84
9497: PUSH
9498: LD_INT 77
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PUSH
9505: LD_INT 101
9507: PUSH
9508: LD_INT 76
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PUSH
9515: LD_INT 118
9517: PUSH
9518: LD_INT 81
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 139
9527: PUSH
9528: LD_INT 97
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: PUSH
9535: LD_INT 129
9537: PUSH
9538: LD_INT 114
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 154
9547: PUSH
9548: LD_INT 111
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
// base_captured := true ;
9569: LD_ADDR_EXP 6
9573: PUSH
9574: LD_INT 1
9576: ST_TO_ADDR
// DialogueOn ;
9577: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9581: LD_EXP 21
9585: PPUSH
9586: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9590: LD_EXP 21
9594: PPUSH
9595: LD_STRING D2-JMM-1
9597: PPUSH
9598: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9602: LD_EXP 30
9606: PPUSH
9607: LD_STRING D2-Pow-1
9609: PPUSH
9610: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9614: LD_EXP 21
9618: PPUSH
9619: LD_STRING D2-JMM-2
9621: PPUSH
9622: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9626: LD_EXP 30
9630: PPUSH
9631: LD_STRING D2-Pow-2
9633: PPUSH
9634: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9638: LD_EXP 21
9642: PPUSH
9643: LD_STRING D2-JMM-3
9645: PPUSH
9646: CALL_OW 88
// DialogueOff ;
9650: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9654: LD_STRING M2
9656: PPUSH
9657: CALL_OW 337
// Wait ( 0 0$2 ) ;
9661: LD_INT 70
9663: PPUSH
9664: CALL_OW 67
// if IsOk ( Gary ) then
9668: LD_EXP 32
9672: PPUSH
9673: CALL_OW 302
9677: IFFALSE 9691
// Say ( Gary , D2a-Gary-1 ) ;
9679: LD_EXP 32
9683: PPUSH
9684: LD_STRING D2a-Gary-1
9686: PPUSH
9687: CALL_OW 88
// if IsOk ( Bobby ) then
9691: LD_EXP 24
9695: PPUSH
9696: CALL_OW 302
9700: IFFALSE 9714
// Say ( Bobby , D2a-Bobby-1 ) ;
9702: LD_EXP 24
9706: PPUSH
9707: LD_STRING D2a-Bobby-1
9709: PPUSH
9710: CALL_OW 88
// if IsOk ( Cyrus ) then
9714: LD_EXP 25
9718: PPUSH
9719: CALL_OW 302
9723: IFFALSE 9737
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9725: LD_EXP 25
9729: PPUSH
9730: LD_STRING D2a-Cyrus-1
9732: PPUSH
9733: CALL_OW 88
// if IsOk ( Lisa ) then
9737: LD_EXP 22
9741: PPUSH
9742: CALL_OW 302
9746: IFFALSE 9760
// Say ( Lisa , D2a-Lisa-1 ) ;
9748: LD_EXP 22
9752: PPUSH
9753: LD_STRING D2a-Lisa-1
9755: PPUSH
9756: CALL_OW 88
// if IsOk ( Frank ) then
9760: LD_EXP 33
9764: PPUSH
9765: CALL_OW 302
9769: IFFALSE 9783
// Say ( Frank , D2a-Frank-1 ) ;
9771: LD_EXP 33
9775: PPUSH
9776: LD_STRING D2a-Frank-1
9778: PPUSH
9779: CALL_OW 88
// if IsOk ( Cornel ) then
9783: LD_EXP 31
9787: PPUSH
9788: CALL_OW 302
9792: IFFALSE 9806
// Say ( Cornel , D2a-Corn-1 ) ;
9794: LD_EXP 31
9798: PPUSH
9799: LD_STRING D2a-Corn-1
9801: PPUSH
9802: CALL_OW 88
// if IsOk ( Donaldson ) then
9806: LD_EXP 23
9810: PPUSH
9811: CALL_OW 302
9815: IFFALSE 9829
// Say ( Donaldson , D2a-Don-1 ) ;
9817: LD_EXP 23
9821: PPUSH
9822: LD_STRING D2a-Don-1
9824: PPUSH
9825: CALL_OW 88
// if IsOk ( Brown ) then
9829: LD_EXP 27
9833: PPUSH
9834: CALL_OW 302
9838: IFFALSE 9852
// Say ( Brown , D2a-Brown-1 ) ;
9840: LD_EXP 27
9844: PPUSH
9845: LD_STRING D2a-Brown-1
9847: PPUSH
9848: CALL_OW 88
// Wait ( 0 0$30 ) ;
9852: LD_INT 1050
9854: PPUSH
9855: CALL_OW 67
// if IsOk ( Frank ) then
9859: LD_EXP 33
9863: PPUSH
9864: CALL_OW 302
9868: IFFALSE 10134
// begin DialogueOn ;
9870: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9874: LD_EXP 21
9878: PUSH
9879: LD_EXP 33
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9892: LD_EXP 33
9896: PPUSH
9897: LD_STRING D3F-Frank-1
9899: PPUSH
9900: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9904: LD_EXP 21
9908: PPUSH
9909: LD_STRING D3F-JMM-1
9911: PPUSH
9912: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9916: LD_EXP 33
9920: PPUSH
9921: LD_STRING D3F-Frank-2
9923: PPUSH
9924: CALL_OW 88
// case Query ( QFrank ) of 1 :
9928: LD_STRING QFrank
9930: PPUSH
9931: CALL_OW 97
9935: PUSH
9936: LD_INT 1
9938: DOUBLE
9939: EQUAL
9940: IFTRUE 9944
9942: GO 9967
9944: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9945: LD_EXP 21
9949: PPUSH
9950: LD_STRING D3Fa-JMM-1
9952: PPUSH
9953: CALL_OW 88
// us_scout := 1 ;
9957: LD_ADDR_EXP 8
9961: PUSH
9962: LD_INT 1
9964: ST_TO_ADDR
// end ; 2 :
9965: GO 10130
9967: LD_INT 2
9969: DOUBLE
9970: EQUAL
9971: IFTRUE 9975
9973: GO 10097
9975: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9976: LD_EXP 21
9980: PPUSH
9981: LD_STRING D3Fb-JMM-1
9983: PPUSH
9984: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9988: LD_EXP 33
9992: PPUSH
9993: LD_STRING D3Fb-Frank-1
9995: PPUSH
9996: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10000: LD_STRING QFrank2
10002: PPUSH
10003: CALL_OW 97
10007: PUSH
10008: LD_INT 1
10010: DOUBLE
10011: EQUAL
10012: IFTRUE 10016
10014: GO 10063
10016: POP
// begin us_scout := 2 ;
10017: LD_ADDR_EXP 8
10021: PUSH
10022: LD_INT 2
10024: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10025: LD_EXP 21
10029: PPUSH
10030: LD_STRING D3Fba-JMM-1
10032: PPUSH
10033: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10037: LD_EXP 33
10041: PPUSH
10042: LD_STRING D3Fba-Frank-1
10044: PPUSH
10045: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10049: LD_EXP 21
10053: PPUSH
10054: LD_STRING D3Fba-JMM-2
10056: PPUSH
10057: CALL_OW 88
// end ; 2 :
10061: GO 10095
10063: LD_INT 2
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10094
10071: POP
// begin us_scout := 0 ;
10072: LD_ADDR_EXP 8
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10080: LD_EXP 21
10084: PPUSH
10085: LD_STRING D3Fbb-JMM-1
10087: PPUSH
10088: CALL_OW 88
// end ; end ;
10092: GO 10095
10094: POP
// end ; 3 :
10095: GO 10130
10097: LD_INT 3
10099: DOUBLE
10100: EQUAL
10101: IFTRUE 10105
10103: GO 10129
10105: POP
// begin us_scout := - 1 ;
10106: LD_ADDR_EXP 8
10110: PUSH
10111: LD_INT 1
10113: NEG
10114: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10115: LD_EXP 21
10119: PPUSH
10120: LD_STRING D3Fc-JMM-1
10122: PPUSH
10123: CALL_OW 88
// end ; end ;
10127: GO 10130
10129: POP
// DialogueOff ;
10130: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10134: LD_EXP 8
10138: PUSH
10139: LD_INT 1
10141: NEG
10142: PUSH
10143: LD_INT 0
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: IN
10150: IFFALSE 10154
// exit ;
10152: GO 11801
// if us_scout in [ 1 , 2 ] then
10154: LD_EXP 8
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: LD_INT 2
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: IN
10169: IFFALSE 10868
// begin if IsInUnit ( Frank ) then
10171: LD_EXP 33
10175: PPUSH
10176: CALL_OW 310
10180: IFFALSE 10191
// ComExitBuilding ( Frank ) ;
10182: LD_EXP 33
10186: PPUSH
10187: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10191: LD_EXP 33
10195: PPUSH
10196: CALL_OW 311
10200: IFFALSE 10211
// ComExitVehicle ( Frank ) ;
10202: LD_EXP 33
10206: PPUSH
10207: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10211: LD_EXP 33
10215: PPUSH
10216: LD_INT 4
10218: PPUSH
10219: CALL_OW 235
// wait ( 0 0$1 ) ;
10223: LD_INT 35
10225: PPUSH
10226: CALL_OW 67
// if us_scout = 2 then
10230: LD_EXP 8
10234: PUSH
10235: LD_INT 2
10237: EQUAL
10238: IFFALSE 10606
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10240: LD_EXP 33
10244: PPUSH
10245: LD_INT 75
10247: PPUSH
10248: LD_INT 63
10250: PPUSH
10251: CALL_OW 111
// AddComHold ( Frank ) ;
10255: LD_EXP 33
10259: PPUSH
10260: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10264: LD_EXP 33
10268: PPUSH
10269: LD_INT 770
10271: PPUSH
10272: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10276: LD_EXP 33
10280: PPUSH
10281: LD_INT 100
10283: PPUSH
10284: LD_INT 75
10286: PPUSH
10287: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10291: LD_EXP 33
10295: PPUSH
10296: LD_INT 123
10298: PPUSH
10299: LD_INT 103
10301: PPUSH
10302: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10306: LD_EXP 33
10310: PPUSH
10311: LD_INT 138
10313: PPUSH
10314: LD_INT 108
10316: PPUSH
10317: CALL_OW 171
// AddComHold ( Frank ) ;
10321: LD_EXP 33
10325: PPUSH
10326: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10330: LD_INT 35
10332: PPUSH
10333: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10337: LD_EXP 33
10341: PPUSH
10342: LD_INT 138
10344: PPUSH
10345: LD_INT 108
10347: PPUSH
10348: CALL_OW 307
10352: IFFALSE 10330
// AddComMoveXY ( Frank , 125 , 132 ) ;
10354: LD_EXP 33
10358: PPUSH
10359: LD_INT 125
10361: PPUSH
10362: LD_INT 132
10364: PPUSH
10365: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10376: LD_INT 1
10378: PPUSH
10379: LD_EXP 33
10383: PPUSH
10384: CALL_OW 292
10388: PUSH
10389: LD_EXP 33
10393: PPUSH
10394: LD_INT 7
10396: PPUSH
10397: CALL_OW 296
10401: PUSH
10402: LD_INT 7
10404: LESS
10405: OR
10406: IFFALSE 10369
// DialogueOn ;
10408: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10412: LD_EXP 33
10416: PPUSH
10417: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10421: LD_INT 10
10423: PPUSH
10424: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10428: LD_EXP 21
10432: PPUSH
10433: LD_STRING D4Fa-JMM-1
10435: PPUSH
10436: CALL_OW 88
// for i in points do
10440: LD_ADDR_VAR 0 1
10444: PUSH
10445: LD_VAR 0 2
10449: PUSH
10450: FOR_IN
10451: IFFALSE 10509
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10453: LD_VAR 0 1
10457: PUSH
10458: LD_INT 1
10460: ARRAY
10461: PPUSH
10462: LD_VAR 0 1
10466: PUSH
10467: LD_INT 2
10469: ARRAY
10470: PPUSH
10471: LD_INT 1
10473: PPUSH
10474: LD_INT 20
10476: NEG
10477: PPUSH
10478: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10482: LD_VAR 0 1
10486: PUSH
10487: LD_INT 1
10489: ARRAY
10490: PPUSH
10491: LD_VAR 0 1
10495: PUSH
10496: LD_INT 2
10498: ARRAY
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: CALL_OW 331
// end ;
10507: GO 10450
10509: POP
10510: POP
// dwait ( 0 0$0.5 ) ;
10511: LD_INT 18
10513: PPUSH
10514: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10518: LD_INT 42
10520: PPUSH
10521: LD_INT 27
10523: PPUSH
10524: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10528: LD_EXP 33
10532: PPUSH
10533: LD_STRING D4Fa-Frank-1
10535: PPUSH
10536: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10540: LD_INT 18
10542: PPUSH
10543: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10547: LD_EXP 21
10551: PPUSH
10552: LD_STRING D4Fa-JMM-2
10554: PPUSH
10555: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10559: LD_INT 118
10561: PPUSH
10562: LD_INT 80
10564: PPUSH
10565: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10569: LD_EXP 33
10573: PPUSH
10574: LD_STRING D4Fa-Frank-2
10576: PPUSH
10577: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10581: LD_INT 10
10583: PPUSH
10584: CALL_OW 68
// DialogueOff ;
10588: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10592: LD_EXP 33
10596: PPUSH
10597: LD_INT 1
10599: PPUSH
10600: CALL_OW 235
// end else
10604: GO 10868
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10606: LD_INT 2
10608: PPUSH
10609: LD_INT 4
10611: PPUSH
10612: LD_INT 2
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10622: LD_EXP 33
10626: PPUSH
10627: LD_INT 75
10629: PPUSH
10630: LD_INT 63
10632: PPUSH
10633: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10637: LD_EXP 33
10641: PPUSH
10642: LD_INT 175
10644: PPUSH
10645: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10649: LD_EXP 33
10653: PPUSH
10654: LD_INT 102
10656: PPUSH
10657: LD_INT 76
10659: PPUSH
10660: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10664: LD_EXP 33
10668: PPUSH
10669: LD_INT 108
10671: PPUSH
10672: LD_INT 70
10674: PPUSH
10675: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10679: LD_INT 35
10681: PPUSH
10682: CALL_OW 67
// until See ( 2 , Frank ) ;
10686: LD_INT 2
10688: PPUSH
10689: LD_EXP 33
10693: PPUSH
10694: CALL_OW 292
10698: IFFALSE 10679
// ComMoveXY ( Frank , 112 , 118 ) ;
10700: LD_EXP 33
10704: PPUSH
10705: LD_INT 112
10707: PPUSH
10708: LD_INT 118
10710: PPUSH
10711: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10715: LD_EXP 33
10719: PPUSH
10720: CALL_OW 256
10724: PUSH
10725: LD_INT 750
10727: GREATEREQUAL
10728: IFFALSE 10742
// SetLives ( Frank , 700 ) ;
10730: LD_EXP 33
10734: PPUSH
10735: LD_INT 700
10737: PPUSH
10738: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10742: LD_INT 35
10744: PPUSH
10745: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10749: LD_INT 1
10751: PPUSH
10752: LD_EXP 33
10756: PPUSH
10757: CALL_OW 292
10761: PUSH
10762: LD_EXP 33
10766: PPUSH
10767: LD_INT 7
10769: PPUSH
10770: CALL_OW 296
10774: PUSH
10775: LD_INT 17
10777: LESS
10778: OR
10779: IFFALSE 10742
// DialogueOn ;
10781: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10785: LD_EXP 33
10789: PPUSH
10790: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10794: LD_EXP 33
10798: PPUSH
10799: LD_STRING D4Fb-Frank-1
10801: PPUSH
10802: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10806: LD_EXP 21
10810: PPUSH
10811: LD_STRING D4Fb-JMM-1
10813: PPUSH
10814: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10818: LD_INT 2
10820: PPUSH
10821: LD_STRING D4Fb-FSci1-1
10823: PPUSH
10824: CALL 15449 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10828: LD_EXP 33
10832: PPUSH
10833: LD_STRING D4Fb-Frank-2
10835: PPUSH
10836: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10840: LD_EXP 21
10844: PPUSH
10845: LD_STRING D4Fb-JMM-2
10847: PPUSH
10848: CALL_OW 88
// DialogueOff ;
10852: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10856: LD_EXP 33
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10868: LD_EXP 34
10872: PPUSH
10873: CALL_OW 302
10877: PUSH
10878: LD_EXP 33
10882: NOT
10883: AND
10884: IFFALSE 11032
// begin DialogueOn ;
10886: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10890: LD_EXP 21
10894: PUSH
10895: LD_EXP 34
10899: PUSH
10900: EMPTY
10901: LIST
10902: LIST
10903: PPUSH
10904: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10908: LD_EXP 34
10912: PPUSH
10913: LD_STRING D3Y-Yam-1
10915: PPUSH
10916: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10920: LD_EXP 21
10924: PPUSH
10925: LD_STRING D3Y-JMM-1
10927: PPUSH
10928: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10932: LD_EXP 34
10936: PPUSH
10937: LD_STRING D3Y-Yam-2
10939: PPUSH
10940: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10944: LD_STRING QYamoko
10946: PPUSH
10947: CALL_OW 97
10951: PUSH
10952: LD_INT 1
10954: DOUBLE
10955: EQUAL
10956: IFTRUE 10960
10958: GO 10995
10960: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10961: LD_EXP 21
10965: PPUSH
10966: LD_STRING D3Ya-JMM-1
10968: PPUSH
10969: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10973: LD_EXP 34
10977: PPUSH
10978: LD_STRING D3Ya-Yam-1
10980: PPUSH
10981: CALL_OW 88
// us_scout := 1 ;
10985: LD_ADDR_EXP 8
10989: PUSH
10990: LD_INT 1
10992: ST_TO_ADDR
// end ; 2 :
10993: GO 11028
10995: LD_INT 2
10997: DOUBLE
10998: EQUAL
10999: IFTRUE 11003
11001: GO 11027
11003: POP
// begin us_scout := - 1 ;
11004: LD_ADDR_EXP 8
11008: PUSH
11009: LD_INT 1
11011: NEG
11012: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11013: LD_EXP 21
11017: PPUSH
11018: LD_STRING D3Yb-JMM-1
11020: PPUSH
11021: CALL_OW 88
// end ; end ;
11025: GO 11028
11027: POP
// DialogueOff ;
11028: CALL_OW 7
// end ; if Frank then
11032: LD_EXP 33
11036: IFFALSE 11040
// exit ;
11038: GO 11801
// if us_scout in [ - 1 , 0 ] then
11040: LD_EXP 8
11044: PUSH
11045: LD_INT 1
11047: NEG
11048: PUSH
11049: LD_INT 0
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: IN
11056: IFFALSE 11060
// exit ;
11058: GO 11801
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11060: LD_ADDR_EXP 8
11064: PUSH
11065: LD_INT 2
11067: PUSH
11068: LD_INT 2
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_OWVAR 67
11083: ARRAY
11084: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11085: LD_EXP 8
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: LD_INT 2
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: IN
11100: IFFALSE 11801
// begin if IsInUnit ( Kikuchi ) then
11102: LD_EXP 34
11106: PPUSH
11107: CALL_OW 310
11111: IFFALSE 11122
// ComExitBuilding ( Kikuchi ) ;
11113: LD_EXP 34
11117: PPUSH
11118: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11122: LD_EXP 34
11126: PPUSH
11127: CALL_OW 311
11131: IFFALSE 11142
// ComExitVehicle ( Kikuchi ) ;
11133: LD_EXP 34
11137: PPUSH
11138: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11142: LD_EXP 34
11146: PPUSH
11147: LD_INT 4
11149: PPUSH
11150: CALL_OW 235
// wait ( 0 0$1 ) ;
11154: LD_INT 35
11156: PPUSH
11157: CALL_OW 67
// if us_scout = 2 then
11161: LD_EXP 8
11165: PUSH
11166: LD_INT 2
11168: EQUAL
11169: IFFALSE 11549
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11171: LD_EXP 34
11175: PPUSH
11176: LD_INT 75
11178: PPUSH
11179: LD_INT 63
11181: PPUSH
11182: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11186: LD_EXP 34
11190: PPUSH
11191: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11195: LD_EXP 34
11199: PPUSH
11200: LD_INT 770
11202: PPUSH
11203: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11207: LD_EXP 34
11211: PPUSH
11212: LD_INT 100
11214: PPUSH
11215: LD_INT 75
11217: PPUSH
11218: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11222: LD_EXP 34
11226: PPUSH
11227: LD_INT 123
11229: PPUSH
11230: LD_INT 103
11232: PPUSH
11233: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11237: LD_EXP 34
11241: PPUSH
11242: LD_INT 138
11244: PPUSH
11245: LD_INT 108
11247: PPUSH
11248: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11252: LD_EXP 34
11256: PPUSH
11257: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11261: LD_INT 35
11263: PPUSH
11264: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11268: LD_EXP 34
11272: PPUSH
11273: LD_INT 138
11275: PPUSH
11276: LD_INT 108
11278: PPUSH
11279: CALL_OW 307
11283: IFFALSE 11261
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11285: LD_EXP 34
11289: PPUSH
11290: LD_INT 125
11292: PPUSH
11293: LD_INT 132
11295: PPUSH
11296: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11300: LD_INT 35
11302: PPUSH
11303: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11307: LD_INT 1
11309: PPUSH
11310: LD_EXP 34
11314: PPUSH
11315: CALL_OW 292
11319: PUSH
11320: LD_EXP 34
11324: PPUSH
11325: LD_INT 7
11327: PPUSH
11328: CALL_OW 296
11332: PUSH
11333: LD_INT 7
11335: LESS
11336: OR
11337: IFFALSE 11300
// DialogueOn ;
11339: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11343: LD_EXP 34
11347: PPUSH
11348: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11352: LD_INT 10
11354: PPUSH
11355: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11359: LD_EXP 34
11363: PPUSH
11364: LD_STRING D4Ya-Yam-1
11366: PPUSH
11367: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11371: LD_EXP 21
11375: PPUSH
11376: LD_STRING D4Ya-JMM-1
11378: PPUSH
11379: CALL_OW 88
// for i in points do
11383: LD_ADDR_VAR 0 1
11387: PUSH
11388: LD_VAR 0 2
11392: PUSH
11393: FOR_IN
11394: IFFALSE 11452
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11396: LD_VAR 0 1
11400: PUSH
11401: LD_INT 1
11403: ARRAY
11404: PPUSH
11405: LD_VAR 0 1
11409: PUSH
11410: LD_INT 2
11412: ARRAY
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: LD_INT 20
11419: NEG
11420: PPUSH
11421: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11425: LD_VAR 0 1
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: LD_VAR 0 1
11438: PUSH
11439: LD_INT 2
11441: ARRAY
11442: PPUSH
11443: LD_INT 1
11445: PPUSH
11446: CALL_OW 331
// end ;
11450: GO 11393
11452: POP
11453: POP
// dwait ( 0 0$0.5 ) ;
11454: LD_INT 18
11456: PPUSH
11457: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11461: LD_INT 42
11463: PPUSH
11464: LD_INT 27
11466: PPUSH
11467: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11471: LD_EXP 34
11475: PPUSH
11476: LD_STRING D4Ya-Yam-2
11478: PPUSH
11479: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11483: LD_INT 18
11485: PPUSH
11486: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11490: LD_INT 118
11492: PPUSH
11493: LD_INT 80
11495: PPUSH
11496: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11500: LD_EXP 21
11504: PPUSH
11505: LD_STRING D4Ya-JMM-2
11507: PPUSH
11508: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11512: LD_EXP 34
11516: PPUSH
11517: LD_STRING D4Ya-Yam-3
11519: PPUSH
11520: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11524: LD_INT 10
11526: PPUSH
11527: CALL_OW 68
// DialogueOff ;
11531: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11535: LD_EXP 34
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 235
// end else
11547: GO 11801
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11549: LD_INT 2
11551: PPUSH
11552: LD_INT 4
11554: PPUSH
11555: LD_INT 2
11557: PPUSH
11558: LD_INT 1
11560: PPUSH
11561: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11565: LD_EXP 34
11569: PPUSH
11570: LD_INT 75
11572: PPUSH
11573: LD_INT 63
11575: PPUSH
11576: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11580: LD_EXP 34
11584: PPUSH
11585: LD_INT 175
11587: PPUSH
11588: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11592: LD_EXP 34
11596: PPUSH
11597: LD_INT 102
11599: PPUSH
11600: LD_INT 76
11602: PPUSH
11603: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11607: LD_EXP 34
11611: PPUSH
11612: LD_INT 108
11614: PPUSH
11615: LD_INT 70
11617: PPUSH
11618: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11622: LD_INT 35
11624: PPUSH
11625: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11629: LD_INT 2
11631: PPUSH
11632: LD_EXP 34
11636: PPUSH
11637: CALL_OW 292
11641: IFFALSE 11622
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11643: LD_EXP 34
11647: PPUSH
11648: LD_INT 112
11650: PPUSH
11651: LD_INT 118
11653: PPUSH
11654: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11658: LD_EXP 34
11662: PPUSH
11663: CALL_OW 256
11667: PUSH
11668: LD_INT 750
11670: GREATEREQUAL
11671: IFFALSE 11685
// SetLives ( Kikuchi , 700 ) ;
11673: LD_EXP 34
11677: PPUSH
11678: LD_INT 700
11680: PPUSH
11681: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11685: LD_INT 35
11687: PPUSH
11688: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11692: LD_INT 1
11694: PPUSH
11695: LD_EXP 34
11699: PPUSH
11700: CALL_OW 292
11704: PUSH
11705: LD_EXP 34
11709: PPUSH
11710: LD_INT 7
11712: PPUSH
11713: CALL_OW 296
11717: PUSH
11718: LD_INT 17
11720: LESS
11721: OR
11722: IFFALSE 11685
// DialogueOn ;
11724: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11728: LD_EXP 34
11732: PPUSH
11733: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11737: LD_EXP 34
11741: PPUSH
11742: LD_STRING D4Yb-Yam-1
11744: PPUSH
11745: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11749: LD_EXP 21
11753: PPUSH
11754: LD_STRING D4Yb-JMM-1
11756: PPUSH
11757: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11761: LD_EXP 34
11765: PPUSH
11766: LD_STRING D4Yb-Yam-2
11768: PPUSH
11769: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11773: LD_EXP 21
11777: PPUSH
11778: LD_STRING D4Yb-JMM-2
11780: PPUSH
11781: CALL_OW 88
// DialogueOff ;
11785: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11789: LD_EXP 34
11793: PPUSH
11794: LD_INT 1
11796: PPUSH
11797: CALL_OW 235
// end ; end ; end ;
11801: PPOPN 2
11803: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11804: LD_EXP 6
11808: IFFALSE 12841
11810: GO 11812
11812: DISABLE
11813: LD_INT 0
11815: PPUSH
11816: PPUSH
11817: PPUSH
11818: PPUSH
// begin enable ;
11819: ENABLE
// if not seen [ 1 ] then
11820: LD_EXP 9
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: NOT
11829: IFFALSE 12009
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: LD_INT 22
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 25
11851: PUSH
11852: LD_INT 11
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 33
11861: PUSH
11862: LD_INT 4
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: ST_TO_ADDR
// if tmp then
11883: LD_VAR 0 2
11887: IFFALSE 12009
// for i in tmp do
11889: LD_ADDR_VAR 0 1
11893: PUSH
11894: LD_VAR 0 2
11898: PUSH
11899: FOR_IN
11900: IFFALSE 12007
// if See ( 1 , i ) then
11902: LD_INT 1
11904: PPUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 292
11914: IFFALSE 12005
// begin seen := Replace ( seen , 1 , true ) ;
11916: LD_ADDR_EXP 9
11920: PUSH
11921: LD_EXP 9
11925: PPUSH
11926: LD_INT 1
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 1
11936: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11937: LD_INT 1
11939: PPUSH
11940: CALL 15271 0 1
11944: IFFALSE 12005
// begin DialogueOn ;
11946: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11950: LD_VAR 0 1
11954: PPUSH
11955: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11959: LD_INT 10
11961: PPUSH
11962: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: LD_INT 1
11973: PPUSH
11974: LD_STRING D5a-Sol2-1
11976: PPUSH
11977: CALL 15449 0 2
11981: ST_TO_ADDR
// if not un then
11982: LD_VAR 0 3
11986: NOT
11987: IFFALSE 11999
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11989: LD_INT 2
11991: PPUSH
11992: LD_STRING D5a-FSol2-1
11994: PPUSH
11995: CALL 15449 0 2
// DialogueOff ;
11999: CALL_OW 7
// break ;
12003: GO 12007
// end ; end ;
12005: GO 11899
12007: POP
12008: POP
// end ; if not seen [ 2 ] then
12009: LD_EXP 9
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: NOT
12018: IFFALSE 12243
// begin can_kamikazed := true ;
12020: LD_ADDR_EXP 10
12024: PUSH
12025: LD_INT 1
12027: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12028: LD_ADDR_VAR 0 2
12032: PUSH
12033: LD_INT 22
12035: PUSH
12036: LD_INT 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 25
12045: PUSH
12046: LD_INT 17
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: ST_TO_ADDR
// if tmp then
12062: LD_VAR 0 2
12066: IFFALSE 12243
// for i in tmp do
12068: LD_ADDR_VAR 0 1
12072: PUSH
12073: LD_VAR 0 2
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12241
// if See ( 1 , i ) then
12081: LD_INT 1
12083: PPUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 292
12093: IFFALSE 12239
// begin seen := Replace ( seen , 2 , true ) ;
12095: LD_ADDR_EXP 9
12099: PUSH
12100: LD_EXP 9
12104: PPUSH
12105: LD_INT 2
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 1
12115: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12116: LD_INT 1
12118: PPUSH
12119: CALL 15271 0 1
12123: IFFALSE 12239
// begin DialogueOn ;
12125: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12129: LD_VAR 0 1
12133: PPUSH
12134: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12138: LD_INT 10
12140: PPUSH
12141: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12145: LD_ADDR_VAR 0 3
12149: PUSH
12150: LD_INT 1
12152: PPUSH
12153: LD_STRING D5b-Sol1-1
12155: PPUSH
12156: CALL 15449 0 2
12160: ST_TO_ADDR
// if not un then
12161: LD_VAR 0 3
12165: NOT
12166: IFFALSE 12184
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12168: LD_ADDR_VAR 0 3
12172: PUSH
12173: LD_INT 2
12175: PPUSH
12176: LD_STRING D5b-FSol1-1
12178: PPUSH
12179: CALL 15449 0 2
12183: ST_TO_ADDR
// if un then
12184: LD_VAR 0 3
12188: IFFALSE 12233
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_INT 1
12197: PPUSH
12198: LD_STRING D5b-Sol2-1
12200: PPUSH
12201: LD_VAR 0 3
12205: PPUSH
12206: CALL 15675 0 3
12210: ST_TO_ADDR
// if not un2 then
12211: LD_VAR 0 4
12215: NOT
12216: IFFALSE 12233
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12218: LD_INT 2
12220: PPUSH
12221: LD_STRING D5b-FSol2-1
12223: PPUSH
12224: LD_VAR 0 3
12228: PPUSH
12229: CALL 15675 0 3
// end ; DialogueOff ;
12233: CALL_OW 7
// break ;
12237: GO 12241
// end ; end ;
12239: GO 12078
12241: POP
12242: POP
// end ; if not seen [ 3 ] then
12243: LD_EXP 9
12247: PUSH
12248: LD_INT 3
12250: ARRAY
12251: NOT
12252: IFFALSE 12426
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12254: LD_ADDR_VAR 0 2
12258: PUSH
12259: LD_INT 22
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 33
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: EMPTY
12280: LIST
12281: LIST
12282: PPUSH
12283: CALL_OW 69
12287: ST_TO_ADDR
// if tmp then
12288: LD_VAR 0 2
12292: IFFALSE 12426
// for i in tmp do
12294: LD_ADDR_VAR 0 1
12298: PUSH
12299: LD_VAR 0 2
12303: PUSH
12304: FOR_IN
12305: IFFALSE 12424
// if See ( 1 , i ) then
12307: LD_INT 1
12309: PPUSH
12310: LD_VAR 0 1
12314: PPUSH
12315: CALL_OW 292
12319: IFFALSE 12422
// begin seen := Replace ( seen , 3 , true ) ;
12321: LD_ADDR_EXP 9
12325: PUSH
12326: LD_EXP 9
12330: PPUSH
12331: LD_INT 3
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: CALL_OW 1
12341: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12342: LD_INT 1
12344: PPUSH
12345: CALL 15271 0 1
12349: IFFALSE 12422
// begin DialogueOn ;
12351: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12355: LD_VAR 0 1
12359: PPUSH
12360: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12364: LD_INT 10
12366: PPUSH
12367: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12371: LD_ADDR_VAR 0 3
12375: PUSH
12376: LD_INT 1
12378: PPUSH
12379: LD_STRING D8-Sol1-1
12381: PPUSH
12382: CALL 15449 0 2
12386: ST_TO_ADDR
// if not un then
12387: LD_VAR 0 3
12391: NOT
12392: IFFALSE 12404
// SayRand ( sex_female , D8-FSol1-1 ) ;
12394: LD_INT 2
12396: PPUSH
12397: LD_STRING D8-FSol1-1
12399: PPUSH
12400: CALL 15449 0 2
// Say ( JMM , D8-JMM-1 ) ;
12404: LD_EXP 21
12408: PPUSH
12409: LD_STRING D8-JMM-1
12411: PPUSH
12412: CALL_OW 88
// DialogueOff ;
12416: CALL_OW 7
// break ;
12420: GO 12424
// end ; end ;
12422: GO 12304
12424: POP
12425: POP
// end ; if not seen [ 4 ] then
12426: LD_EXP 9
12430: PUSH
12431: LD_INT 4
12433: ARRAY
12434: NOT
12435: IFFALSE 12597
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12437: LD_ADDR_VAR 0 2
12441: PUSH
12442: LD_INT 22
12444: PUSH
12445: LD_INT 2
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 33
12454: PUSH
12455: LD_INT 5
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 69
12470: ST_TO_ADDR
// if tmp then
12471: LD_VAR 0 2
12475: IFFALSE 12597
// for i in tmp do
12477: LD_ADDR_VAR 0 1
12481: PUSH
12482: LD_VAR 0 2
12486: PUSH
12487: FOR_IN
12488: IFFALSE 12595
// if See ( 1 , i ) then
12490: LD_INT 1
12492: PPUSH
12493: LD_VAR 0 1
12497: PPUSH
12498: CALL_OW 292
12502: IFFALSE 12593
// begin seen := Replace ( seen , 4 , true ) ;
12504: LD_ADDR_EXP 9
12508: PUSH
12509: LD_EXP 9
12513: PPUSH
12514: LD_INT 4
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 1
12524: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12525: LD_INT 1
12527: PPUSH
12528: CALL 15271 0 1
12532: IFFALSE 12593
// begin DialogueOn ;
12534: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12538: LD_VAR 0 1
12542: PPUSH
12543: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12547: LD_INT 10
12549: PPUSH
12550: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12554: LD_ADDR_VAR 0 3
12558: PUSH
12559: LD_INT 1
12561: PPUSH
12562: LD_STRING D5a-Sol1-1
12564: PPUSH
12565: CALL 15449 0 2
12569: ST_TO_ADDR
// if not un then
12570: LD_VAR 0 3
12574: NOT
12575: IFFALSE 12587
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12577: LD_INT 2
12579: PPUSH
12580: LD_STRING D5a-FSol1-1
12582: PPUSH
12583: CALL 15449 0 2
// DialogueOff ;
12587: CALL_OW 7
// break ;
12591: GO 12595
// end ; end ;
12593: GO 12487
12595: POP
12596: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12597: LD_EXP 9
12601: PUSH
12602: LD_INT 5
12604: ARRAY
12605: NOT
12606: PUSH
12607: LD_EXP 9
12611: PUSH
12612: LD_INT 3
12614: ARRAY
12615: AND
12616: IFFALSE 12790
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12618: LD_ADDR_VAR 0 2
12622: PUSH
12623: LD_INT 22
12625: PUSH
12626: LD_INT 2
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 34
12635: PUSH
12636: LD_INT 31
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: ST_TO_ADDR
// if tmp then
12652: LD_VAR 0 2
12656: IFFALSE 12790
// for i in tmp do
12658: LD_ADDR_VAR 0 1
12662: PUSH
12663: LD_VAR 0 2
12667: PUSH
12668: FOR_IN
12669: IFFALSE 12788
// if See ( 1 , i ) then
12671: LD_INT 1
12673: PPUSH
12674: LD_VAR 0 1
12678: PPUSH
12679: CALL_OW 292
12683: IFFALSE 12786
// begin seen := Replace ( seen , 5 , true ) ;
12685: LD_ADDR_EXP 9
12689: PUSH
12690: LD_EXP 9
12694: PPUSH
12695: LD_INT 5
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 1
12705: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12706: LD_INT 1
12708: PPUSH
12709: CALL 15271 0 1
12713: IFFALSE 12786
// begin DialogueOn ;
12715: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12719: LD_VAR 0 1
12723: PPUSH
12724: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12728: LD_INT 10
12730: PPUSH
12731: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12735: LD_ADDR_VAR 0 3
12739: PUSH
12740: LD_INT 1
12742: PPUSH
12743: LD_STRING D8a-Sol2-1
12745: PPUSH
12746: CALL 15449 0 2
12750: ST_TO_ADDR
// if not un then
12751: LD_VAR 0 3
12755: NOT
12756: IFFALSE 12768
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12758: LD_INT 2
12760: PPUSH
12761: LD_STRING D8a-FSol2-1
12763: PPUSH
12764: CALL 15449 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12768: LD_EXP 21
12772: PPUSH
12773: LD_STRING D8a-JMM-1
12775: PPUSH
12776: CALL_OW 88
// DialogueOff ;
12780: CALL_OW 7
// break ;
12784: GO 12788
// end ; end ;
12786: GO 12668
12788: POP
12789: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12790: LD_EXP 9
12794: PUSH
12795: LD_INT 1
12797: ARRAY
12798: PUSH
12799: LD_EXP 9
12803: PUSH
12804: LD_INT 2
12806: ARRAY
12807: AND
12808: PUSH
12809: LD_EXP 9
12813: PUSH
12814: LD_INT 3
12816: ARRAY
12817: AND
12818: PUSH
12819: LD_EXP 9
12823: PUSH
12824: LD_INT 4
12826: ARRAY
12827: AND
12828: PUSH
12829: LD_EXP 9
12833: PUSH
12834: LD_INT 5
12836: ARRAY
12837: AND
12838: IFFALSE 12841
// disable ;
12840: DISABLE
// end ;
12841: PPOPN 4
12843: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12844: LD_EXP 10
12848: PUSH
12849: LD_EXP 11
12853: AND
12854: IFFALSE 13052
12856: GO 12858
12858: DISABLE
12859: LD_INT 0
12861: PPUSH
// begin DialogueOn ;
12862: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12866: LD_EXP 11
12870: PPUSH
12871: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12875: LD_ADDR_VAR 0 1
12879: PUSH
12880: LD_INT 1
12882: PPUSH
12883: LD_STRING D5c-Sol1-1
12885: PPUSH
12886: CALL 15449 0 2
12890: ST_TO_ADDR
// if not un then
12891: LD_VAR 0 1
12895: NOT
12896: IFFALSE 12914
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12898: LD_ADDR_VAR 0 1
12902: PUSH
12903: LD_INT 2
12905: PPUSH
12906: LD_STRING D5c-FSol1-1
12908: PPUSH
12909: CALL 15449 0 2
12913: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12914: LD_EXP 21
12918: PPUSH
12919: LD_STRING D5c-JMM-1
12921: PPUSH
12922: CALL_OW 88
// if IsOk ( Lisa ) then
12926: LD_EXP 22
12930: PPUSH
12931: CALL_OW 302
12935: IFFALSE 12951
// Say ( Lisa , D5d-Lisa-1 ) else
12937: LD_EXP 22
12941: PPUSH
12942: LD_STRING D5d-Lisa-1
12944: PPUSH
12945: CALL_OW 88
12949: GO 13036
// if IsOk ( Cyrus ) then
12951: LD_EXP 25
12955: PPUSH
12956: CALL_OW 302
12960: IFFALSE 12976
// Say ( Cyrus , D5d-Cyrus-1 ) else
12962: LD_EXP 25
12966: PPUSH
12967: LD_STRING D5d-Cyrus-1
12969: PPUSH
12970: CALL_OW 88
12974: GO 13036
// if IsOk ( Gary ) then
12976: LD_EXP 32
12980: PPUSH
12981: CALL_OW 302
12985: IFFALSE 13001
// Say ( Gary , D5d-Gary-1 ) else
12987: LD_EXP 32
12991: PPUSH
12992: LD_STRING D5d-Gary-1
12994: PPUSH
12995: CALL_OW 88
12999: GO 13036
// if GetSex ( un ) = sex_male then
13001: LD_VAR 0 1
13005: PPUSH
13006: CALL_OW 258
13010: PUSH
13011: LD_INT 1
13013: EQUAL
13014: IFFALSE 13030
// Say ( un , D5d-Sol1-1 ) else
13016: LD_VAR 0 1
13020: PPUSH
13021: LD_STRING D5d-Sol1-1
13023: PPUSH
13024: CALL_OW 88
13028: GO 13036
// begin DialogueOff ;
13030: CALL_OW 7
// exit ;
13034: GO 13052
// end ; Say ( JMM , D5d-JMM-1 ) ;
13036: LD_EXP 21
13040: PPUSH
13041: LD_STRING D5d-JMM-1
13043: PPUSH
13044: CALL_OW 88
// DialogueOff ;
13048: CALL_OW 7
// end ;
13052: PPOPN 1
13054: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13055: LD_INT 1
13057: PPUSH
13058: LD_INT 17
13060: PPUSH
13061: CALL_OW 294
13065: PUSH
13066: LD_INT 2
13068: GREATEREQUAL
13069: IFFALSE 13190
13071: GO 13073
13073: DISABLE
13074: LD_INT 0
13076: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13077: LD_INT 10
13079: PPUSH
13080: LD_INT 5
13082: PPUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_INT 10
13088: NEG
13089: PPUSH
13090: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13094: LD_INT 10
13096: PPUSH
13097: LD_INT 5
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13107: LD_INT 10
13109: PPUSH
13110: LD_INT 5
13112: PPUSH
13113: CALL_OW 86
// DialogueOn ;
13117: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13121: LD_ADDR_VAR 0 1
13125: PUSH
13126: LD_INT 1
13128: PPUSH
13129: LD_STRING D6-Sci1-1
13131: PPUSH
13132: CALL 15449 0 2
13136: ST_TO_ADDR
// if un then
13137: LD_VAR 0 1
13141: IFFALSE 13179
// begin Say ( JMM , D6-JMM-1 ) ;
13143: LD_EXP 21
13147: PPUSH
13148: LD_STRING D6-JMM-1
13150: PPUSH
13151: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_STRING D6-Sci1-2
13162: PPUSH
13163: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13167: LD_EXP 21
13171: PPUSH
13172: LD_STRING D6-JMM-2
13174: PPUSH
13175: CALL_OW 88
// end ; DialogueOff ;
13179: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13183: LD_STRING M3
13185: PPUSH
13186: CALL_OW 337
// end ;
13190: PPOPN 1
13192: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13193: LD_OWVAR 1
13197: PUSH
13198: LD_INT 42000
13200: GREATEREQUAL
13201: PUSH
13202: LD_INT 2
13204: PPUSH
13205: LD_INT 169
13207: PPUSH
13208: LD_INT 90
13210: PPUSH
13211: LD_INT 10
13213: PPUSH
13214: CALL 51781 0 4
13218: PUSH
13219: LD_INT 4
13221: ARRAY
13222: PUSH
13223: LD_INT 0
13225: EQUAL
13226: PUSH
13227: LD_INT 45
13229: PPUSH
13230: CALL_OW 301
13234: OR
13235: PUSH
13236: LD_INT 45
13238: PPUSH
13239: CALL_OW 255
13243: PUSH
13244: LD_INT 1
13246: EQUAL
13247: OR
13248: AND
13249: PUSH
13250: LD_INT 94
13252: PPUSH
13253: CALL_OW 301
13257: NOT
13258: AND
13259: IFFALSE 14385
13261: GO 13263
13263: DISABLE
13264: LD_INT 0
13266: PPUSH
13267: PPUSH
13268: PPUSH
13269: PPUSH
// begin uc_side := 5 ;
13270: LD_ADDR_OWVAR 20
13274: PUSH
13275: LD_INT 5
13277: ST_TO_ADDR
// uc_nation := 2 ;
13278: LD_ADDR_OWVAR 21
13282: PUSH
13283: LD_INT 2
13285: ST_TO_ADDR
// InitHc ;
13286: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13290: LD_INT 1
13292: PPUSH
13293: LD_INT 3
13295: PPUSH
13296: LD_INT 8
13298: PPUSH
13299: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13303: LD_ADDR_OWVAR 29
13307: PUSH
13308: LD_INT 12
13310: PUSH
13311: LD_INT 12
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13318: LD_ADDR_OWVAR 33
13322: PUSH
13323: LD_STRING SecondCharsGal
13325: ST_TO_ADDR
// hc_face_number := 7 ;
13326: LD_ADDR_OWVAR 34
13330: PUSH
13331: LD_INT 7
13333: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13334: LD_ADDR_EXP 45
13338: PUSH
13339: CALL_OW 44
13343: ST_TO_ADDR
// InitHc ;
13344: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13348: LD_INT 1
13350: PPUSH
13351: LD_INT 16
13353: PPUSH
13354: LD_INT 2
13356: PPUSH
13357: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13361: LD_ADDR_OWVAR 29
13365: PUSH
13366: LD_INT 12
13368: PUSH
13369: LD_INT 12
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: ST_TO_ADDR
// hc_name :=  ;
13376: LD_ADDR_OWVAR 26
13380: PUSH
13381: LD_STRING 
13383: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13384: LD_ADDR_EXP 46
13388: PUSH
13389: CALL_OW 44
13393: ST_TO_ADDR
// InitHc ;
13394: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13398: LD_INT 35
13400: PPUSH
13401: CALL_OW 67
// until not InBattle ( 1 ) ;
13405: LD_INT 1
13407: PPUSH
13408: CALL_OW 463
13412: NOT
13413: IFFALSE 13398
// wait ( 0 0$5 ) ;
13415: LD_INT 175
13417: PPUSH
13418: CALL_OW 67
// DialogueOn ;
13422: CALL_OW 6
// InGameOn ;
13426: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13430: LD_ADDR_VAR 0 1
13434: PUSH
13435: LD_INT 22
13437: PUSH
13438: LD_INT 1
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 2
13447: PUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 2
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 3
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 25
13480: PUSH
13481: LD_INT 4
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 25
13500: PUSH
13501: LD_INT 8
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PPUSH
13521: CALL_OW 69
13525: PUSH
13526: LD_EXP 21
13530: PUSH
13531: LD_EXP 22
13535: PUSH
13536: LD_EXP 23
13540: PUSH
13541: LD_EXP 24
13545: PUSH
13546: LD_EXP 25
13550: PUSH
13551: LD_EXP 26
13555: PUSH
13556: LD_EXP 27
13560: PUSH
13561: LD_EXP 28
13565: PUSH
13566: LD_EXP 29
13570: PUSH
13571: LD_EXP 31
13575: PUSH
13576: LD_EXP 32
13580: PUSH
13581: LD_EXP 33
13585: PUSH
13586: LD_EXP 34
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: DIFF
13606: PPUSH
13607: LD_INT 26
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PPUSH
13617: CALL_OW 72
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: ST_TO_ADDR
// if not un and Brown then
13626: LD_VAR 0 1
13630: NOT
13631: PUSH
13632: LD_EXP 27
13636: AND
13637: IFFALSE 13649
// un := Brown ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: LD_EXP 27
13648: ST_TO_ADDR
// if un then
13649: LD_VAR 0 1
13653: IFFALSE 13679
// begin Say ( un , D7-Sol1-1 ) ;
13655: LD_VAR 0 1
13659: PPUSH
13660: LD_STRING D7-Sol1-1
13662: PPUSH
13663: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13667: LD_EXP 21
13671: PPUSH
13672: LD_STRING D7-JMM-1
13674: PPUSH
13675: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13679: LD_EXP 45
13683: PPUSH
13684: LD_STRING D7-Ar1-1
13686: PPUSH
13687: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13691: LD_EXP 21
13695: PPUSH
13696: LD_STRING D7-JMM-2
13698: PPUSH
13699: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13703: LD_EXP 45
13707: PPUSH
13708: LD_STRING D7-Ar1-2
13710: PPUSH
13711: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13715: LD_EXP 21
13719: PPUSH
13720: LD_STRING D7-JMM-3
13722: PPUSH
13723: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13727: LD_EXP 45
13731: PPUSH
13732: LD_STRING D7-Ar1-3
13734: PPUSH
13735: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13739: LD_EXP 21
13743: PPUSH
13744: LD_STRING D7-JMM-4
13746: PPUSH
13747: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13751: LD_EXP 45
13755: PPUSH
13756: LD_STRING D7-Ar1-4
13758: PPUSH
13759: CALL_OW 94
// InGameOff ;
13763: CALL_OW 9
// DialogueOff ;
13767: CALL_OW 7
// case Query ( QCameras ) of 1 :
13771: LD_STRING QCameras
13773: PPUSH
13774: CALL_OW 97
13778: PUSH
13779: LD_INT 1
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13790
13787: POP
// ; 2 :
13788: GO 13804
13790: LD_INT 2
13792: DOUBLE
13793: EQUAL
13794: IFTRUE 13798
13796: GO 13803
13798: POP
// exit ; end ;
13799: GO 14385
13801: GO 13804
13803: POP
// ChangeMissionObjectives ( MCar ) ;
13804: LD_STRING MCar
13806: PPUSH
13807: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13811: LD_INT 124
13813: PPUSH
13814: LD_INT 90
13816: PPUSH
13817: LD_INT 1
13819: PPUSH
13820: LD_INT 6
13822: NEG
13823: PPUSH
13824: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13828: LD_INT 124
13830: PPUSH
13831: LD_INT 90
13833: PPUSH
13834: LD_INT 1
13836: PPUSH
13837: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13841: LD_INT 12
13843: PPUSH
13844: LD_INT 1
13846: PPUSH
13847: CALL_OW 424
// wait ( 3 ) ;
13851: LD_INT 3
13853: PPUSH
13854: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13858: LD_INT 124
13860: PPUSH
13861: LD_INT 90
13863: PPUSH
13864: CALL_OW 86
// cargo := false ;
13868: LD_ADDR_VAR 0 3
13872: PUSH
13873: LD_INT 0
13875: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13876: LD_INT 35
13878: PPUSH
13879: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: LD_INT 12
13890: PPUSH
13891: LD_INT 32
13893: PUSH
13894: LD_INT 3
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 34
13903: PUSH
13904: LD_INT 32
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 58
13913: PUSH
13914: EMPTY
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 70
13926: ST_TO_ADDR
// until cargo ;
13927: LD_VAR 0 3
13931: IFFALSE 13876
// cargo := cargo [ 1 ] ;
13933: LD_ADDR_VAR 0 3
13937: PUSH
13938: LD_VAR 0 3
13942: PUSH
13943: LD_INT 1
13945: ARRAY
13946: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13947: LD_VAR 0 3
13951: PPUSH
13952: LD_INT 5
13954: PPUSH
13955: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
13959: LD_INT 12
13961: PPUSH
13962: LD_INT 0
13964: PPUSH
13965: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13969: LD_EXP 45
13973: PPUSH
13974: LD_INT 11
13976: PPUSH
13977: LD_INT 0
13979: PPUSH
13980: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13984: LD_EXP 46
13988: PPUSH
13989: LD_INT 11
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
13999: LD_EXP 45
14003: PUSH
14004: LD_EXP 46
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PPUSH
14013: LD_INT 12
14015: PPUSH
14016: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14020: LD_EXP 45
14024: PPUSH
14025: LD_VAR 0 3
14029: PPUSH
14030: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14034: LD_EXP 45
14038: PUSH
14039: LD_EXP 46
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: LD_INT 209
14050: PPUSH
14051: LD_INT 178
14053: PPUSH
14054: CALL_OW 171
// while ( true ) do
14058: LD_INT 1
14060: IFFALSE 14214
// begin wait ( 0 0$1 ) ;
14062: LD_INT 35
14064: PPUSH
14065: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14069: LD_EXP 45
14073: PPUSH
14074: CALL_OW 314
14078: NOT
14079: PUSH
14080: LD_EXP 46
14084: PPUSH
14085: CALL_OW 314
14089: NOT
14090: OR
14091: IFFALSE 14117
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14093: LD_EXP 45
14097: PUSH
14098: LD_EXP 46
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: LD_INT 209
14109: PPUSH
14110: LD_INT 178
14112: PPUSH
14113: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14117: LD_EXP 45
14121: PPUSH
14122: LD_INT 10
14124: PPUSH
14125: CALL_OW 308
14129: IFFALSE 14140
// RemoveUnit ( ar_mechanic ) ;
14131: LD_EXP 45
14135: PPUSH
14136: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14140: LD_EXP 46
14144: PPUSH
14145: LD_INT 10
14147: PPUSH
14148: CALL_OW 308
14152: IFFALSE 14163
// RemoveUnit ( ar_mechanic_friend ) ;
14154: LD_EXP 46
14158: PPUSH
14159: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14163: LD_VAR 0 3
14167: PPUSH
14168: LD_INT 10
14170: PPUSH
14171: CALL_OW 308
14175: IFFALSE 14186
// RemoveUnit ( cargo ) ;
14177: LD_VAR 0 3
14181: PPUSH
14182: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14186: LD_EXP 45
14190: PPUSH
14191: CALL_OW 300
14195: NOT
14196: PUSH
14197: LD_EXP 46
14201: PPUSH
14202: CALL_OW 300
14206: NOT
14207: AND
14208: IFFALSE 14212
// break ;
14210: GO 14214
// end ;
14212: GO 14058
// wait ( 0 0$2 ) ;
14214: LD_INT 70
14216: PPUSH
14217: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14221: LD_EXP 45
14225: PPUSH
14226: LD_STRING D7a-Ar1-1
14228: PPUSH
14229: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14233: LD_ADDR_VAR 0 4
14237: PUSH
14238: LD_INT 129
14240: PUSH
14241: LD_INT 10
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 103
14250: PUSH
14251: LD_INT 6
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 148
14260: PUSH
14261: LD_INT 47
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 155
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: ST_TO_ADDR
// if Difficulty = 1 then
14284: LD_OWVAR 67
14288: PUSH
14289: LD_INT 1
14291: EQUAL
14292: IFFALSE 14329
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_VAR 0 4
14303: PUSH
14304: LD_INT 78
14306: PUSH
14307: LD_INT 7
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 104
14316: PUSH
14317: LD_INT 43
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: ADD
14328: ST_TO_ADDR
// for i in tmp do
14329: LD_ADDR_VAR 0 2
14333: PUSH
14334: LD_VAR 0 4
14338: PUSH
14339: FOR_IN
14340: IFFALSE 14373
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14342: LD_VAR 0 2
14346: PUSH
14347: LD_INT 1
14349: ARRAY
14350: PPUSH
14351: LD_VAR 0 2
14355: PUSH
14356: LD_INT 2
14358: ARRAY
14359: PPUSH
14360: LD_INT 1
14362: PPUSH
14363: LD_INT 9
14365: NEG
14366: PPUSH
14367: CALL_OW 330
14371: GO 14339
14373: POP
14374: POP
// CenterOnXY ( 129 , 10 ) ;
14375: LD_INT 129
14377: PPUSH
14378: LD_INT 10
14380: PPUSH
14381: CALL_OW 84
// end ;
14385: PPOPN 4
14387: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14388: LD_EXP 15
14392: PUSH
14393: LD_INT 21000
14395: MINUS
14396: PUSH
14397: LD_OWVAR 1
14401: LESSEQUAL
14402: IFFALSE 14442
14404: GO 14406
14406: DISABLE
// begin powell_warn := true ;
14407: LD_ADDR_EXP 16
14411: PUSH
14412: LD_INT 1
14414: ST_TO_ADDR
// DialogueOn ;
14415: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14419: LD_EXP 30
14423: PPUSH
14424: LD_STRING D9-Pow-1
14426: PPUSH
14427: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14431: LD_INT 10
14433: PPUSH
14434: CALL_OW 68
// DialogueOff ;
14438: CALL_OW 7
// end ;
14442: END
// every 0 0$1 trigger game_time <= tick do
14443: LD_EXP 15
14447: PUSH
14448: LD_OWVAR 1
14452: LESSEQUAL
14453: IFFALSE 14492
14455: GO 14457
14457: DISABLE
// begin DialogueOn ;
14458: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14462: LD_EXP 30
14466: PPUSH
14467: LD_STRING D9a-Pow-1
14469: PPUSH
14470: CALL_OW 94
// dwait ( 0 0$2 ) ;
14474: LD_INT 70
14476: PPUSH
14477: CALL_OW 68
// DialogueOff ;
14481: CALL_OW 7
// YouLost ( Command ) ;
14485: LD_STRING Command
14487: PPUSH
14488: CALL_OW 104
// end ;
14492: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14493: LD_INT 22
14495: PUSH
14496: LD_INT 2
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: PUSH
14503: LD_INT 30
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PPUSH
14517: CALL_OW 69
14521: PUSH
14522: LD_INT 0
14524: EQUAL
14525: PUSH
14526: LD_EXP 21
14530: PPUSH
14531: CALL_OW 302
14535: AND
14536: IFFALSE 15268
14538: GO 14540
14540: DISABLE
14541: LD_INT 0
14543: PPUSH
// begin if tick < [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] then
14544: LD_OWVAR 1
14548: PUSH
14549: LD_INT 189000
14551: PUSH
14552: LD_INT 168000
14554: PUSH
14555: LD_INT 157500
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_OWVAR 67
14567: ARRAY
14568: LESS
14569: IFFALSE 14583
// AddMedal ( Time1 , 1 ) else
14571: LD_STRING Time1
14573: PPUSH
14574: LD_INT 1
14576: PPUSH
14577: CALL_OW 101
14581: GO 14614
// if not powell_warn then
14583: LD_EXP 16
14587: NOT
14588: IFFALSE 14603
// AddMedal ( Time1 , - 1 ) else
14590: LD_STRING Time1
14592: PPUSH
14593: LD_INT 1
14595: NEG
14596: PPUSH
14597: CALL_OW 101
14601: GO 14614
// AddMedal ( Time1 , - 2 ) ;
14603: LD_STRING Time1
14605: PPUSH
14606: LD_INT 2
14608: NEG
14609: PPUSH
14610: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14614: LD_EXP 17
14618: PUSH
14619: LD_INT 5
14621: PUSH
14622: LD_INT 4
14624: PUSH
14625: LD_INT 3
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: LIST
14632: PUSH
14633: LD_OWVAR 67
14637: ARRAY
14638: GREATEREQUAL
14639: IFFALSE 14654
// AddMedal ( Destroy , - 2 ) else
14641: LD_STRING Destroy
14643: PPUSH
14644: LD_INT 2
14646: NEG
14647: PPUSH
14648: CALL_OW 101
14652: GO 14771
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14654: LD_INT 22
14656: PUSH
14657: LD_INT 2
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 50
14676: PUSH
14677: EMPTY
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: PPUSH
14685: CALL_OW 69
14689: PUSH
14690: LD_INT 25
14692: GREATEREQUAL
14693: IFFALSE 14708
// AddMedal ( Destroy , - 1 ) else
14695: LD_STRING Destroy
14697: PPUSH
14698: LD_INT 1
14700: NEG
14701: PPUSH
14702: CALL_OW 101
14706: GO 14771
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14708: LD_INT 22
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 50
14730: PUSH
14731: EMPTY
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: PUSH
14744: LD_INT 15
14746: GREATEREQUAL
14747: IFFALSE 14761
// AddMedal ( Destroy , 1 ) else
14749: LD_STRING Destroy
14751: PPUSH
14752: LD_INT 1
14754: PPUSH
14755: CALL_OW 101
14759: GO 14771
// AddMedal ( Destroy , 2 ) ;
14761: LD_STRING Destroy
14763: PPUSH
14764: LD_INT 2
14766: PPUSH
14767: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14771: LD_EXP 13
14775: PPUSH
14776: LD_STRING 11_artifact_captured
14778: PPUSH
14779: CALL_OW 39
// if artifact_get then
14783: LD_EXP 13
14787: IFFALSE 14801
// AddMedal ( Artefact , 1 ) else
14789: LD_STRING Artefact
14791: PPUSH
14792: LD_INT 1
14794: PPUSH
14795: CALL_OW 101
14799: GO 14812
// AddMedal ( Artefact , - 1 ) ;
14801: LD_STRING Artefact
14803: PPUSH
14804: LD_INT 1
14806: NEG
14807: PPUSH
14808: CALL_OW 101
// GiveMedals ( MAIN ) ;
14812: LD_STRING MAIN
14814: PPUSH
14815: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14819: LD_ADDR_EXP 20
14823: PUSH
14824: LD_EXP 20
14828: PPUSH
14829: LD_INT 51
14831: PUSH
14832: EMPTY
14833: LIST
14834: PPUSH
14835: CALL_OW 72
14839: ST_TO_ADDR
// tmp := JMM ^ selected ;
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_EXP 21
14849: PUSH
14850: LD_EXP 20
14854: ADD
14855: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14856: LD_VAR 0 1
14860: PPUSH
14861: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14865: LD_VAR 0 1
14869: PUSH
14870: LD_EXP 21
14874: PUSH
14875: LD_EXP 22
14879: PUSH
14880: LD_EXP 23
14884: PUSH
14885: LD_EXP 24
14889: PUSH
14890: LD_EXP 25
14894: PUSH
14895: LD_EXP 26
14899: PUSH
14900: LD_EXP 27
14904: PUSH
14905: LD_EXP 28
14909: PUSH
14910: LD_EXP 29
14914: PUSH
14915: LD_EXP 31
14919: PUSH
14920: LD_EXP 32
14924: PUSH
14925: LD_EXP 33
14929: PUSH
14930: LD_EXP 34
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: DIFF
14950: PPUSH
14951: LD_STRING 11c_others
14953: PPUSH
14954: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14958: LD_EXP 21
14962: PPUSH
14963: LD_EXP 3
14967: PUSH
14968: LD_STRING JMM
14970: STR
14971: PPUSH
14972: CALL_OW 38
// if Lisa then
14976: LD_EXP 22
14980: IFFALSE 15000
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14982: LD_EXP 22
14986: PPUSH
14987: LD_EXP 3
14991: PUSH
14992: LD_STRING Lisa
14994: STR
14995: PPUSH
14996: CALL_OW 38
// if Donaldson then
15000: LD_EXP 23
15004: IFFALSE 15024
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15006: LD_EXP 23
15010: PPUSH
15011: LD_EXP 3
15015: PUSH
15016: LD_STRING Donaldson
15018: STR
15019: PPUSH
15020: CALL_OW 38
// if Bobby then
15024: LD_EXP 24
15028: IFFALSE 15048
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15030: LD_EXP 24
15034: PPUSH
15035: LD_EXP 3
15039: PUSH
15040: LD_STRING Bobby
15042: STR
15043: PPUSH
15044: CALL_OW 38
// if Cyrus then
15048: LD_EXP 25
15052: IFFALSE 15072
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15054: LD_EXP 25
15058: PPUSH
15059: LD_EXP 3
15063: PUSH
15064: LD_STRING Cyrus
15066: STR
15067: PPUSH
15068: CALL_OW 38
// if Denis then
15072: LD_EXP 26
15076: IFFALSE 15096
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15078: LD_EXP 26
15082: PPUSH
15083: LD_EXP 3
15087: PUSH
15088: LD_STRING Denis
15090: STR
15091: PPUSH
15092: CALL_OW 38
// if Brown then
15096: LD_EXP 27
15100: IFFALSE 15120
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15102: LD_EXP 27
15106: PPUSH
15107: LD_EXP 3
15111: PUSH
15112: LD_STRING Brown
15114: STR
15115: PPUSH
15116: CALL_OW 38
// if Gladstone then
15120: LD_EXP 28
15124: IFFALSE 15144
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15126: LD_EXP 28
15130: PPUSH
15131: LD_EXP 3
15135: PUSH
15136: LD_STRING Gladstone
15138: STR
15139: PPUSH
15140: CALL_OW 38
// if Houten then
15144: LD_EXP 29
15148: IFFALSE 15168
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15150: LD_EXP 29
15154: PPUSH
15155: LD_EXP 3
15159: PUSH
15160: LD_STRING Houten
15162: STR
15163: PPUSH
15164: CALL_OW 38
// if Cornel then
15168: LD_EXP 31
15172: IFFALSE 15192
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
15174: LD_EXP 31
15178: PPUSH
15179: LD_EXP 3
15183: PUSH
15184: LD_STRING Cornel
15186: STR
15187: PPUSH
15188: CALL_OW 38
// if Gary then
15192: LD_EXP 32
15196: IFFALSE 15216
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15198: LD_EXP 32
15202: PPUSH
15203: LD_EXP 3
15207: PUSH
15208: LD_STRING Gary
15210: STR
15211: PPUSH
15212: CALL_OW 38
// if Frank then
15216: LD_EXP 33
15220: IFFALSE 15240
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15222: LD_EXP 33
15226: PPUSH
15227: LD_EXP 3
15231: PUSH
15232: LD_STRING Frank
15234: STR
15235: PPUSH
15236: CALL_OW 38
// if Kikuchi then
15240: LD_EXP 34
15244: IFFALSE 15264
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15246: LD_EXP 34
15250: PPUSH
15251: LD_EXP 3
15255: PUSH
15256: LD_STRING Kikuchi
15258: STR
15259: PPUSH
15260: CALL_OW 38
// YouWin ;
15264: CALL_OW 103
// end ;
15268: PPOPN 1
15270: END
// export function CanSayRand ( side ) ; begin
15271: LD_INT 0
15273: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15274: LD_ADDR_VAR 0 2
15278: PUSH
15279: LD_INT 52
15281: PUSH
15282: EMPTY
15283: LIST
15284: PUSH
15285: LD_INT 22
15287: PUSH
15288: LD_VAR 0 1
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 2
15299: PUSH
15300: LD_INT 25
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 25
15312: PUSH
15313: LD_INT 2
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 25
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 25
15332: PUSH
15333: LD_INT 4
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: PUSH
15357: LD_EXP 21
15361: PUSH
15362: LD_EXP 33
15366: PUSH
15367: LD_EXP 22
15371: PUSH
15372: LD_EXP 23
15376: PUSH
15377: LD_EXP 24
15381: PUSH
15382: LD_EXP 25
15386: PUSH
15387: LD_EXP 26
15391: PUSH
15392: LD_EXP 27
15396: PUSH
15397: LD_EXP 28
15401: PUSH
15402: LD_EXP 29
15406: PUSH
15407: LD_EXP 30
15411: PUSH
15412: LD_EXP 31
15416: PUSH
15417: LD_EXP 32
15421: PUSH
15422: LD_EXP 34
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: DIFF
15443: ST_TO_ADDR
// end ;
15444: LD_VAR 0 2
15448: RET
// export function SayRand ( sex , dial ) ; begin
15449: LD_INT 0
15451: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 52
15459: PUSH
15460: EMPTY
15461: LIST
15462: PUSH
15463: LD_INT 22
15465: PUSH
15466: LD_INT 1
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: LD_INT 26
15475: PUSH
15476: LD_VAR 0 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 2
15487: PUSH
15488: LD_INT 25
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 25
15500: PUSH
15501: LD_INT 2
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 25
15510: PUSH
15511: LD_INT 3
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 25
15520: PUSH
15521: LD_INT 4
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: PUSH
15546: LD_EXP 21
15550: PUSH
15551: LD_EXP 33
15555: PUSH
15556: LD_EXP 22
15560: PUSH
15561: LD_EXP 23
15565: PUSH
15566: LD_EXP 24
15570: PUSH
15571: LD_EXP 25
15575: PUSH
15576: LD_EXP 26
15580: PUSH
15581: LD_EXP 27
15585: PUSH
15586: LD_EXP 28
15590: PUSH
15591: LD_EXP 29
15595: PUSH
15596: LD_EXP 30
15600: PUSH
15601: LD_EXP 31
15605: PUSH
15606: LD_EXP 32
15610: PUSH
15611: LD_EXP 34
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: DIFF
15632: ST_TO_ADDR
// if not result then
15633: LD_VAR 0 3
15637: NOT
15638: IFFALSE 15642
// exit ;
15640: GO 15670
// result := result [ 1 ] ;
15642: LD_ADDR_VAR 0 3
15646: PUSH
15647: LD_VAR 0 3
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: ST_TO_ADDR
// Say ( result , dial ) ;
15656: LD_VAR 0 3
15660: PPUSH
15661: LD_VAR 0 2
15665: PPUSH
15666: CALL_OW 88
// end ;
15670: LD_VAR 0 3
15674: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15675: LD_INT 0
15677: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15678: LD_ADDR_VAR 0 4
15682: PUSH
15683: LD_INT 22
15685: PUSH
15686: LD_INT 1
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 26
15695: PUSH
15696: LD_VAR 0 1
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: LD_INT 2
15707: PUSH
15708: LD_INT 25
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 25
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 25
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 25
15740: PUSH
15741: LD_INT 4
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: LIST
15759: PPUSH
15760: CALL_OW 69
15764: PUSH
15765: LD_EXP 21
15769: PUSH
15770: LD_EXP 33
15774: PUSH
15775: LD_EXP 22
15779: PUSH
15780: LD_EXP 23
15784: PUSH
15785: LD_EXP 24
15789: PUSH
15790: LD_EXP 25
15794: PUSH
15795: LD_EXP 26
15799: PUSH
15800: LD_EXP 27
15804: PUSH
15805: LD_EXP 28
15809: PUSH
15810: LD_EXP 29
15814: PUSH
15815: LD_EXP 30
15819: PUSH
15820: LD_EXP 31
15824: PUSH
15825: LD_EXP 32
15829: PUSH
15830: LD_EXP 34
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: PUSH
15851: LD_VAR 0 3
15855: ADD
15856: DIFF
15857: ST_TO_ADDR
// if not result then
15858: LD_VAR 0 4
15862: NOT
15863: IFFALSE 15867
// exit ;
15865: GO 15895
// result := result [ 1 ] ;
15867: LD_ADDR_VAR 0 4
15871: PUSH
15872: LD_VAR 0 4
15876: PUSH
15877: LD_INT 1
15879: ARRAY
15880: ST_TO_ADDR
// Say ( result , dial ) ;
15881: LD_VAR 0 4
15885: PPUSH
15886: LD_VAR 0 2
15890: PPUSH
15891: CALL_OW 88
// end ; end_of_file
15895: LD_VAR 0 4
15899: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15900: LD_VAR 0 1
15904: PPUSH
15905: CALL_OW 255
15909: PUSH
15910: LD_INT 1
15912: EQUAL
15913: IFFALSE 15923
// artifact_get := true ;
15915: LD_ADDR_EXP 13
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15923: LD_VAR 0 1
15927: PPUSH
15928: CALL_OW 255
15932: PUSH
15933: LD_INT 2
15935: EQUAL
15936: IFFALSE 15954
// begin artifact_get := false ;
15938: LD_ADDR_EXP 13
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// artifact_stolen := true ;
15946: LD_ADDR_EXP 12
15950: PUSH
15951: LD_INT 1
15953: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15954: LD_ADDR_EXP 14
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// end ;
15962: PPOPN 2
15964: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15965: LD_ADDR_EXP 14
15969: PUSH
15970: LD_INT 0
15972: ST_TO_ADDR
// end ;
15973: PPOPN 2
15975: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15976: LD_VAR 0 1
15980: PUSH
15981: LD_EXP 21
15985: EQUAL
15986: IFFALSE 15997
// begin YouLost ( JMM ) ;
15988: LD_STRING JMM
15990: PPUSH
15991: CALL_OW 104
// exit ;
15995: GO 16129
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
15997: LD_VAR 0 1
16001: PUSH
16002: LD_INT 22
16004: PUSH
16005: LD_INT 1
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 21
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 25
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 25
16037: PUSH
16038: LD_INT 2
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 25
16047: PUSH
16048: LD_INT 3
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 25
16057: PUSH
16058: LD_INT 4
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 25
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 25
16077: PUSH
16078: LD_INT 8
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: LIST
16098: PPUSH
16099: CALL_OW 69
16103: IN
16104: IFFALSE 16120
// loses_counter := loses_counter + 1 ;
16106: LD_ADDR_EXP 17
16110: PUSH
16111: LD_EXP 17
16115: PUSH
16116: LD_INT 1
16118: PLUS
16119: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL 41615 0 1
// end ;
16129: PPOPN 1
16131: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16132: LD_VAR 0 1
16136: PPUSH
16137: LD_VAR 0 2
16141: PPUSH
16142: CALL 43500 0 2
// end ;
16146: PPOPN 2
16148: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16149: LD_VAR 0 1
16153: PPUSH
16154: CALL 42816 0 1
// end ;
16158: PPOPN 1
16160: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: LD_VAR 0 3
16175: PPUSH
16176: LD_VAR 0 4
16180: PPUSH
16181: LD_VAR 0 5
16185: PPUSH
16186: CALL 40954 0 5
// end ;
16190: PPOPN 5
16192: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16193: LD_VAR 0 1
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL 40551 0 2
// end ;
16207: PPOPN 2
16209: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16210: LD_VAR 0 1
16214: PPUSH
16215: CALL_OW 247
16219: PUSH
16220: LD_INT 2
16222: EQUAL
16223: IFFALSE 16227
// exit ;
16225: GO 16244
// if not kamikazed then
16227: LD_EXP 11
16231: NOT
16232: IFFALSE 16244
// kamikazed := unit ;
16234: LD_ADDR_EXP 11
16238: PUSH
16239: LD_VAR 0 1
16243: ST_TO_ADDR
// end ;
16244: PPOPN 1
16246: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16247: LD_INT 0
16249: PPUSH
16250: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: LD_VAR 0 2
16260: PPUSH
16261: LD_VAR 0 3
16265: PPUSH
16266: LD_VAR 0 4
16270: PPUSH
16271: CALL 40396 0 4
// end ;
16275: PPOPN 6
16277: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_VAR 0 2
16287: PPUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: CALL 40178 0 3
// end ;
16297: PPOPN 3
16299: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16300: LD_VAR 0 1
16304: PPUSH
16305: LD_VAR 0 2
16309: PPUSH
16310: CALL 41327 0 2
// end ;
16314: PPOPN 2
16316: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16317: LD_VAR 0 1
16321: PPUSH
16322: LD_VAR 0 2
16326: PPUSH
16327: CALL 39886 0 2
// end ;
16331: PPOPN 2
16333: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16334: LD_VAR 0 1
16338: PPUSH
16339: LD_VAR 0 2
16343: PPUSH
16344: CALL 40070 0 2
// end ;
16348: PPOPN 2
16350: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL 42582 0 1
// end ;
16360: PPOPN 1
16362: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_VAR 0 2
16372: PPUSH
16373: CALL 43754 0 2
// end ;
16377: PPOPN 2
16379: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_VAR 0 2
16389: PPUSH
16390: LD_VAR 0 3
16394: PPUSH
16395: LD_VAR 0 4
16399: PPUSH
16400: CALL 43963 0 4
// end ; end_of_file
16404: PPOPN 4
16406: END
// every 0 0$1 trigger game do
16407: LD_EXP 2
16411: IFFALSE 16441
16413: GO 16415
16415: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16416: LD_INT 7
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: LD_INT 4
16424: PUSH
16425: LD_INT 6
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PPUSH
16434: LD_INT 1750
16436: PPUSH
16437: CALL 16442 0 2
16441: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
// if not areas then
16447: LD_VAR 0 1
16451: NOT
16452: IFFALSE 16456
// exit ;
16454: GO 16586
// repeat wait ( time ) ;
16456: LD_VAR 0 2
16460: PPUSH
16461: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16465: LD_ADDR_VAR 0 5
16469: PUSH
16470: LD_INT 1
16472: PPUSH
16473: LD_INT 90
16475: PPUSH
16476: CALL_OW 12
16480: ST_TO_ADDR
// for i in areas do
16481: LD_ADDR_VAR 0 4
16485: PUSH
16486: LD_VAR 0 1
16490: PUSH
16491: FOR_IN
16492: IFFALSE 16545
// begin if Prob ( p ) then
16494: LD_VAR 0 5
16498: PPUSH
16499: CALL_OW 13
16503: IFFALSE 16543
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16505: LD_INT 1
16507: PPUSH
16508: LD_INT 5
16510: PPUSH
16511: CALL_OW 12
16515: PPUSH
16516: LD_VAR 0 4
16520: PPUSH
16521: LD_INT 1
16523: PPUSH
16524: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16528: LD_INT 385
16530: PPUSH
16531: LD_INT 595
16533: PPUSH
16534: CALL_OW 12
16538: PPUSH
16539: CALL_OW 67
// end ; end ;
16543: GO 16491
16545: POP
16546: POP
// time := time + 0 0$3 ;
16547: LD_ADDR_VAR 0 2
16551: PUSH
16552: LD_VAR 0 2
16556: PUSH
16557: LD_INT 105
16559: PLUS
16560: ST_TO_ADDR
// if time > 8 8$00 then
16561: LD_VAR 0 2
16565: PUSH
16566: LD_INT 16800
16568: GREATER
16569: IFFALSE 16579
// time := 0 0$40 ;
16571: LD_ADDR_VAR 0 2
16575: PUSH
16576: LD_INT 1400
16578: ST_TO_ADDR
// until not game ;
16579: LD_EXP 2
16583: NOT
16584: IFFALSE 16456
// end ; end_of_file
16586: LD_VAR 0 3
16590: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16591: LD_INT 0
16593: PPUSH
16594: PPUSH
// skirmish := false ;
16595: LD_ADDR_EXP 47
16599: PUSH
16600: LD_INT 0
16602: ST_TO_ADDR
// debug_mc := false ;
16603: LD_ADDR_EXP 48
16607: PUSH
16608: LD_INT 0
16610: ST_TO_ADDR
// mc_bases := [ ] ;
16611: LD_ADDR_EXP 49
16615: PUSH
16616: EMPTY
16617: ST_TO_ADDR
// mc_sides := [ ] ;
16618: LD_ADDR_EXP 75
16622: PUSH
16623: EMPTY
16624: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16625: LD_ADDR_EXP 50
16629: PUSH
16630: EMPTY
16631: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16632: LD_ADDR_EXP 51
16636: PUSH
16637: EMPTY
16638: ST_TO_ADDR
// mc_need_heal := [ ] ;
16639: LD_ADDR_EXP 52
16643: PUSH
16644: EMPTY
16645: ST_TO_ADDR
// mc_healers := [ ] ;
16646: LD_ADDR_EXP 53
16650: PUSH
16651: EMPTY
16652: ST_TO_ADDR
// mc_build_list := [ ] ;
16653: LD_ADDR_EXP 54
16657: PUSH
16658: EMPTY
16659: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16660: LD_ADDR_EXP 81
16664: PUSH
16665: EMPTY
16666: ST_TO_ADDR
// mc_builders := [ ] ;
16667: LD_ADDR_EXP 55
16671: PUSH
16672: EMPTY
16673: ST_TO_ADDR
// mc_construct_list := [ ] ;
16674: LD_ADDR_EXP 56
16678: PUSH
16679: EMPTY
16680: ST_TO_ADDR
// mc_turret_list := [ ] ;
16681: LD_ADDR_EXP 57
16685: PUSH
16686: EMPTY
16687: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16688: LD_ADDR_EXP 58
16692: PUSH
16693: EMPTY
16694: ST_TO_ADDR
// mc_miners := [ ] ;
16695: LD_ADDR_EXP 63
16699: PUSH
16700: EMPTY
16701: ST_TO_ADDR
// mc_mines := [ ] ;
16702: LD_ADDR_EXP 62
16706: PUSH
16707: EMPTY
16708: ST_TO_ADDR
// mc_minefields := [ ] ;
16709: LD_ADDR_EXP 64
16713: PUSH
16714: EMPTY
16715: ST_TO_ADDR
// mc_crates := [ ] ;
16716: LD_ADDR_EXP 65
16720: PUSH
16721: EMPTY
16722: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16723: LD_ADDR_EXP 66
16727: PUSH
16728: EMPTY
16729: ST_TO_ADDR
// mc_crates_area := [ ] ;
16730: LD_ADDR_EXP 67
16734: PUSH
16735: EMPTY
16736: ST_TO_ADDR
// mc_vehicles := [ ] ;
16737: LD_ADDR_EXP 68
16741: PUSH
16742: EMPTY
16743: ST_TO_ADDR
// mc_attack := [ ] ;
16744: LD_ADDR_EXP 69
16748: PUSH
16749: EMPTY
16750: ST_TO_ADDR
// mc_produce := [ ] ;
16751: LD_ADDR_EXP 70
16755: PUSH
16756: EMPTY
16757: ST_TO_ADDR
// mc_defender := [ ] ;
16758: LD_ADDR_EXP 71
16762: PUSH
16763: EMPTY
16764: ST_TO_ADDR
// mc_parking := [ ] ;
16765: LD_ADDR_EXP 73
16769: PUSH
16770: EMPTY
16771: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16772: LD_ADDR_EXP 59
16776: PUSH
16777: EMPTY
16778: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16779: LD_ADDR_EXP 61
16783: PUSH
16784: EMPTY
16785: ST_TO_ADDR
// mc_scan := [ ] ;
16786: LD_ADDR_EXP 72
16790: PUSH
16791: EMPTY
16792: ST_TO_ADDR
// mc_scan_area := [ ] ;
16793: LD_ADDR_EXP 74
16797: PUSH
16798: EMPTY
16799: ST_TO_ADDR
// mc_tech := [ ] ;
16800: LD_ADDR_EXP 76
16804: PUSH
16805: EMPTY
16806: ST_TO_ADDR
// mc_class := [ ] ;
16807: LD_ADDR_EXP 90
16811: PUSH
16812: EMPTY
16813: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16814: LD_ADDR_EXP 91
16818: PUSH
16819: EMPTY
16820: ST_TO_ADDR
// end ;
16821: LD_VAR 0 1
16825: RET
// export function MC_Kill ( base ) ; begin
16826: LD_INT 0
16828: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16829: LD_ADDR_EXP 49
16833: PUSH
16834: LD_EXP 49
16838: PPUSH
16839: LD_VAR 0 1
16843: PPUSH
16844: EMPTY
16845: PPUSH
16846: CALL_OW 1
16850: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16851: LD_ADDR_EXP 50
16855: PUSH
16856: LD_EXP 50
16860: PPUSH
16861: LD_VAR 0 1
16865: PPUSH
16866: EMPTY
16867: PPUSH
16868: CALL_OW 1
16872: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16873: LD_ADDR_EXP 51
16877: PUSH
16878: LD_EXP 51
16882: PPUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: EMPTY
16889: PPUSH
16890: CALL_OW 1
16894: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16895: LD_ADDR_EXP 52
16899: PUSH
16900: LD_EXP 52
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: EMPTY
16911: PPUSH
16912: CALL_OW 1
16916: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16917: LD_ADDR_EXP 53
16921: PUSH
16922: LD_EXP 53
16926: PPUSH
16927: LD_VAR 0 1
16931: PPUSH
16932: EMPTY
16933: PPUSH
16934: CALL_OW 1
16938: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16939: LD_ADDR_EXP 54
16943: PUSH
16944: LD_EXP 54
16948: PPUSH
16949: LD_VAR 0 1
16953: PPUSH
16954: EMPTY
16955: PPUSH
16956: CALL_OW 1
16960: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16961: LD_ADDR_EXP 55
16965: PUSH
16966: LD_EXP 55
16970: PPUSH
16971: LD_VAR 0 1
16975: PPUSH
16976: EMPTY
16977: PPUSH
16978: CALL_OW 1
16982: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16983: LD_ADDR_EXP 56
16987: PUSH
16988: LD_EXP 56
16992: PPUSH
16993: LD_VAR 0 1
16997: PPUSH
16998: EMPTY
16999: PPUSH
17000: CALL_OW 1
17004: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17005: LD_ADDR_EXP 57
17009: PUSH
17010: LD_EXP 57
17014: PPUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: EMPTY
17021: PPUSH
17022: CALL_OW 1
17026: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17027: LD_ADDR_EXP 58
17031: PUSH
17032: LD_EXP 58
17036: PPUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: EMPTY
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17049: LD_ADDR_EXP 59
17053: PUSH
17054: LD_EXP 59
17058: PPUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: EMPTY
17065: PPUSH
17066: CALL_OW 1
17070: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17071: LD_ADDR_EXP 60
17075: PUSH
17076: LD_EXP 60
17080: PPUSH
17081: LD_VAR 0 1
17085: PPUSH
17086: LD_INT 0
17088: PPUSH
17089: CALL_OW 1
17093: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17094: LD_ADDR_EXP 61
17098: PUSH
17099: LD_EXP 61
17103: PPUSH
17104: LD_VAR 0 1
17108: PPUSH
17109: EMPTY
17110: PPUSH
17111: CALL_OW 1
17115: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17116: LD_ADDR_EXP 62
17120: PUSH
17121: LD_EXP 62
17125: PPUSH
17126: LD_VAR 0 1
17130: PPUSH
17131: EMPTY
17132: PPUSH
17133: CALL_OW 1
17137: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17138: LD_ADDR_EXP 63
17142: PUSH
17143: LD_EXP 63
17147: PPUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: EMPTY
17154: PPUSH
17155: CALL_OW 1
17159: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17160: LD_ADDR_EXP 64
17164: PUSH
17165: LD_EXP 64
17169: PPUSH
17170: LD_VAR 0 1
17174: PPUSH
17175: EMPTY
17176: PPUSH
17177: CALL_OW 1
17181: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17182: LD_ADDR_EXP 65
17186: PUSH
17187: LD_EXP 65
17191: PPUSH
17192: LD_VAR 0 1
17196: PPUSH
17197: EMPTY
17198: PPUSH
17199: CALL_OW 1
17203: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17204: LD_ADDR_EXP 66
17208: PUSH
17209: LD_EXP 66
17213: PPUSH
17214: LD_VAR 0 1
17218: PPUSH
17219: EMPTY
17220: PPUSH
17221: CALL_OW 1
17225: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17226: LD_ADDR_EXP 67
17230: PUSH
17231: LD_EXP 67
17235: PPUSH
17236: LD_VAR 0 1
17240: PPUSH
17241: EMPTY
17242: PPUSH
17243: CALL_OW 1
17247: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17248: LD_ADDR_EXP 68
17252: PUSH
17253: LD_EXP 68
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: EMPTY
17264: PPUSH
17265: CALL_OW 1
17269: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17270: LD_ADDR_EXP 69
17274: PUSH
17275: LD_EXP 69
17279: PPUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: EMPTY
17286: PPUSH
17287: CALL_OW 1
17291: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17292: LD_ADDR_EXP 70
17296: PUSH
17297: LD_EXP 70
17301: PPUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: EMPTY
17308: PPUSH
17309: CALL_OW 1
17313: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17314: LD_ADDR_EXP 71
17318: PUSH
17319: LD_EXP 71
17323: PPUSH
17324: LD_VAR 0 1
17328: PPUSH
17329: EMPTY
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17336: LD_ADDR_EXP 72
17340: PUSH
17341: LD_EXP 72
17345: PPUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: EMPTY
17352: PPUSH
17353: CALL_OW 1
17357: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17358: LD_ADDR_EXP 73
17362: PUSH
17363: LD_EXP 73
17367: PPUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: EMPTY
17374: PPUSH
17375: CALL_OW 1
17379: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17380: LD_ADDR_EXP 74
17384: PUSH
17385: LD_EXP 74
17389: PPUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: EMPTY
17396: PPUSH
17397: CALL_OW 1
17401: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17402: LD_ADDR_EXP 76
17406: PUSH
17407: LD_EXP 76
17411: PPUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: EMPTY
17418: PPUSH
17419: CALL_OW 1
17423: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17424: LD_ADDR_EXP 78
17428: PUSH
17429: LD_EXP 78
17433: PPUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: EMPTY
17440: PPUSH
17441: CALL_OW 1
17445: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17446: LD_ADDR_EXP 79
17450: PUSH
17451: LD_EXP 79
17455: PPUSH
17456: LD_VAR 0 1
17460: PPUSH
17461: EMPTY
17462: PPUSH
17463: CALL_OW 1
17467: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17468: LD_ADDR_EXP 80
17472: PUSH
17473: LD_EXP 80
17477: PPUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: EMPTY
17484: PPUSH
17485: CALL_OW 1
17489: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17490: LD_ADDR_EXP 81
17494: PUSH
17495: LD_EXP 81
17499: PPUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: EMPTY
17506: PPUSH
17507: CALL_OW 1
17511: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17512: LD_ADDR_EXP 82
17516: PUSH
17517: LD_EXP 82
17521: PPUSH
17522: LD_VAR 0 1
17526: PPUSH
17527: EMPTY
17528: PPUSH
17529: CALL_OW 1
17533: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17534: LD_ADDR_EXP 83
17538: PUSH
17539: LD_EXP 83
17543: PPUSH
17544: LD_VAR 0 1
17548: PPUSH
17549: EMPTY
17550: PPUSH
17551: CALL_OW 1
17555: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17556: LD_ADDR_EXP 84
17560: PUSH
17561: LD_EXP 84
17565: PPUSH
17566: LD_VAR 0 1
17570: PPUSH
17571: EMPTY
17572: PPUSH
17573: CALL_OW 1
17577: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17578: LD_ADDR_EXP 85
17582: PUSH
17583: LD_EXP 85
17587: PPUSH
17588: LD_VAR 0 1
17592: PPUSH
17593: EMPTY
17594: PPUSH
17595: CALL_OW 1
17599: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17600: LD_ADDR_EXP 86
17604: PUSH
17605: LD_EXP 86
17609: PPUSH
17610: LD_VAR 0 1
17614: PPUSH
17615: EMPTY
17616: PPUSH
17617: CALL_OW 1
17621: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17622: LD_ADDR_EXP 87
17626: PUSH
17627: LD_EXP 87
17631: PPUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: EMPTY
17638: PPUSH
17639: CALL_OW 1
17643: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17644: LD_ADDR_EXP 88
17648: PUSH
17649: LD_EXP 88
17653: PPUSH
17654: LD_VAR 0 1
17658: PPUSH
17659: EMPTY
17660: PPUSH
17661: CALL_OW 1
17665: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17666: LD_ADDR_EXP 89
17670: PUSH
17671: LD_EXP 89
17675: PPUSH
17676: LD_VAR 0 1
17680: PPUSH
17681: EMPTY
17682: PPUSH
17683: CALL_OW 1
17687: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17688: LD_ADDR_EXP 90
17692: PUSH
17693: LD_EXP 90
17697: PPUSH
17698: LD_VAR 0 1
17702: PPUSH
17703: EMPTY
17704: PPUSH
17705: CALL_OW 1
17709: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17710: LD_ADDR_EXP 91
17714: PUSH
17715: LD_EXP 91
17719: PPUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_INT 0
17727: PPUSH
17728: CALL_OW 1
17732: ST_TO_ADDR
// end ;
17733: LD_VAR 0 2
17737: RET
// export function MC_Start ( ) ; var i ; begin
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
// for i = 1 to mc_bases do
17742: LD_ADDR_VAR 0 2
17746: PUSH
17747: DOUBLE
17748: LD_INT 1
17750: DEC
17751: ST_TO_ADDR
17752: LD_EXP 49
17756: PUSH
17757: FOR_TO
17758: IFFALSE 18835
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17760: LD_ADDR_EXP 49
17764: PUSH
17765: LD_EXP 49
17769: PPUSH
17770: LD_VAR 0 2
17774: PPUSH
17775: LD_EXP 49
17779: PUSH
17780: LD_VAR 0 2
17784: ARRAY
17785: PUSH
17786: LD_INT 0
17788: DIFF
17789: PPUSH
17790: CALL_OW 1
17794: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17795: LD_ADDR_EXP 50
17799: PUSH
17800: LD_EXP 50
17804: PPUSH
17805: LD_VAR 0 2
17809: PPUSH
17810: EMPTY
17811: PPUSH
17812: CALL_OW 1
17816: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17817: LD_ADDR_EXP 51
17821: PUSH
17822: LD_EXP 51
17826: PPUSH
17827: LD_VAR 0 2
17831: PPUSH
17832: EMPTY
17833: PPUSH
17834: CALL_OW 1
17838: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17839: LD_ADDR_EXP 52
17843: PUSH
17844: LD_EXP 52
17848: PPUSH
17849: LD_VAR 0 2
17853: PPUSH
17854: EMPTY
17855: PPUSH
17856: CALL_OW 1
17860: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17861: LD_ADDR_EXP 53
17865: PUSH
17866: LD_EXP 53
17870: PPUSH
17871: LD_VAR 0 2
17875: PPUSH
17876: EMPTY
17877: PUSH
17878: EMPTY
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 1
17888: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17889: LD_ADDR_EXP 54
17893: PUSH
17894: LD_EXP 54
17898: PPUSH
17899: LD_VAR 0 2
17903: PPUSH
17904: EMPTY
17905: PPUSH
17906: CALL_OW 1
17910: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17911: LD_ADDR_EXP 81
17915: PUSH
17916: LD_EXP 81
17920: PPUSH
17921: LD_VAR 0 2
17925: PPUSH
17926: EMPTY
17927: PPUSH
17928: CALL_OW 1
17932: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17933: LD_ADDR_EXP 55
17937: PUSH
17938: LD_EXP 55
17942: PPUSH
17943: LD_VAR 0 2
17947: PPUSH
17948: EMPTY
17949: PPUSH
17950: CALL_OW 1
17954: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17955: LD_ADDR_EXP 56
17959: PUSH
17960: LD_EXP 56
17964: PPUSH
17965: LD_VAR 0 2
17969: PPUSH
17970: EMPTY
17971: PPUSH
17972: CALL_OW 1
17976: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
17977: LD_ADDR_EXP 57
17981: PUSH
17982: LD_EXP 57
17986: PPUSH
17987: LD_VAR 0 2
17991: PPUSH
17992: LD_EXP 49
17996: PUSH
17997: LD_VAR 0 2
18001: ARRAY
18002: PPUSH
18003: LD_INT 2
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 32
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 30
18018: PUSH
18019: LD_INT 33
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 72
18035: PPUSH
18036: CALL_OW 1
18040: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
18041: LD_ADDR_EXP 58
18045: PUSH
18046: LD_EXP 58
18050: PPUSH
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_EXP 49
18060: PUSH
18061: LD_VAR 0 2
18065: ARRAY
18066: PPUSH
18067: LD_INT 2
18069: PUSH
18070: LD_INT 30
18072: PUSH
18073: LD_INT 32
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 30
18082: PUSH
18083: LD_INT 31
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 58
18097: PUSH
18098: EMPTY
18099: LIST
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 72
18109: PPUSH
18110: CALL_OW 1
18114: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
18115: LD_ADDR_EXP 59
18119: PUSH
18120: LD_EXP 59
18124: PPUSH
18125: LD_VAR 0 2
18129: PPUSH
18130: EMPTY
18131: PPUSH
18132: CALL_OW 1
18136: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
18137: LD_ADDR_EXP 63
18141: PUSH
18142: LD_EXP 63
18146: PPUSH
18147: LD_VAR 0 2
18151: PPUSH
18152: EMPTY
18153: PPUSH
18154: CALL_OW 1
18158: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
18159: LD_ADDR_EXP 62
18163: PUSH
18164: LD_EXP 62
18168: PPUSH
18169: LD_VAR 0 2
18173: PPUSH
18174: EMPTY
18175: PPUSH
18176: CALL_OW 1
18180: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
18181: LD_ADDR_EXP 64
18185: PUSH
18186: LD_EXP 64
18190: PPUSH
18191: LD_VAR 0 2
18195: PPUSH
18196: EMPTY
18197: PPUSH
18198: CALL_OW 1
18202: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
18203: LD_ADDR_EXP 65
18207: PUSH
18208: LD_EXP 65
18212: PPUSH
18213: LD_VAR 0 2
18217: PPUSH
18218: EMPTY
18219: PPUSH
18220: CALL_OW 1
18224: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
18225: LD_ADDR_EXP 66
18229: PUSH
18230: LD_EXP 66
18234: PPUSH
18235: LD_VAR 0 2
18239: PPUSH
18240: EMPTY
18241: PPUSH
18242: CALL_OW 1
18246: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
18247: LD_ADDR_EXP 67
18251: PUSH
18252: LD_EXP 67
18256: PPUSH
18257: LD_VAR 0 2
18261: PPUSH
18262: EMPTY
18263: PPUSH
18264: CALL_OW 1
18268: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
18269: LD_ADDR_EXP 68
18273: PUSH
18274: LD_EXP 68
18278: PPUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: EMPTY
18285: PPUSH
18286: CALL_OW 1
18290: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
18291: LD_ADDR_EXP 69
18295: PUSH
18296: LD_EXP 69
18300: PPUSH
18301: LD_VAR 0 2
18305: PPUSH
18306: EMPTY
18307: PPUSH
18308: CALL_OW 1
18312: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
18313: LD_ADDR_EXP 70
18317: PUSH
18318: LD_EXP 70
18322: PPUSH
18323: LD_VAR 0 2
18327: PPUSH
18328: EMPTY
18329: PPUSH
18330: CALL_OW 1
18334: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
18335: LD_ADDR_EXP 71
18339: PUSH
18340: LD_EXP 71
18344: PPUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: EMPTY
18351: PPUSH
18352: CALL_OW 1
18356: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18357: LD_ADDR_EXP 60
18361: PUSH
18362: LD_EXP 60
18366: PPUSH
18367: LD_VAR 0 2
18371: PPUSH
18372: LD_INT 0
18374: PPUSH
18375: CALL_OW 1
18379: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18380: LD_ADDR_EXP 73
18384: PUSH
18385: LD_EXP 73
18389: PPUSH
18390: LD_VAR 0 2
18394: PPUSH
18395: LD_INT 0
18397: PPUSH
18398: CALL_OW 1
18402: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18403: LD_ADDR_EXP 61
18407: PUSH
18408: LD_EXP 61
18412: PPUSH
18413: LD_VAR 0 2
18417: PPUSH
18418: EMPTY
18419: PPUSH
18420: CALL_OW 1
18424: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18425: LD_ADDR_EXP 72
18429: PUSH
18430: LD_EXP 72
18434: PPUSH
18435: LD_VAR 0 2
18439: PPUSH
18440: LD_INT 0
18442: PPUSH
18443: CALL_OW 1
18447: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18448: LD_ADDR_EXP 74
18452: PUSH
18453: LD_EXP 74
18457: PPUSH
18458: LD_VAR 0 2
18462: PPUSH
18463: EMPTY
18464: PPUSH
18465: CALL_OW 1
18469: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18470: LD_ADDR_EXP 77
18474: PUSH
18475: LD_EXP 77
18479: PPUSH
18480: LD_VAR 0 2
18484: PPUSH
18485: LD_INT 0
18487: PPUSH
18488: CALL_OW 1
18492: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18493: LD_ADDR_EXP 78
18497: PUSH
18498: LD_EXP 78
18502: PPUSH
18503: LD_VAR 0 2
18507: PPUSH
18508: EMPTY
18509: PPUSH
18510: CALL_OW 1
18514: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18515: LD_ADDR_EXP 79
18519: PUSH
18520: LD_EXP 79
18524: PPUSH
18525: LD_VAR 0 2
18529: PPUSH
18530: EMPTY
18531: PPUSH
18532: CALL_OW 1
18536: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18537: LD_ADDR_EXP 80
18541: PUSH
18542: LD_EXP 80
18546: PPUSH
18547: LD_VAR 0 2
18551: PPUSH
18552: EMPTY
18553: PPUSH
18554: CALL_OW 1
18558: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18559: LD_ADDR_EXP 82
18563: PUSH
18564: LD_EXP 82
18568: PPUSH
18569: LD_VAR 0 2
18573: PPUSH
18574: LD_EXP 49
18578: PUSH
18579: LD_VAR 0 2
18583: ARRAY
18584: PPUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 30
18590: PUSH
18591: LD_INT 6
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 30
18600: PUSH
18601: LD_INT 7
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 30
18610: PUSH
18611: LD_INT 8
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: PPUSH
18624: CALL_OW 72
18628: PPUSH
18629: CALL_OW 1
18633: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18634: LD_ADDR_EXP 83
18638: PUSH
18639: LD_EXP 83
18643: PPUSH
18644: LD_VAR 0 2
18648: PPUSH
18649: EMPTY
18650: PPUSH
18651: CALL_OW 1
18655: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18656: LD_ADDR_EXP 84
18660: PUSH
18661: LD_EXP 84
18665: PPUSH
18666: LD_VAR 0 2
18670: PPUSH
18671: EMPTY
18672: PPUSH
18673: CALL_OW 1
18677: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
18678: LD_ADDR_EXP 85
18682: PUSH
18683: LD_EXP 85
18687: PPUSH
18688: LD_VAR 0 2
18692: PPUSH
18693: EMPTY
18694: PPUSH
18695: CALL_OW 1
18699: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18700: LD_ADDR_EXP 86
18704: PUSH
18705: LD_EXP 86
18709: PPUSH
18710: LD_VAR 0 2
18714: PPUSH
18715: EMPTY
18716: PPUSH
18717: CALL_OW 1
18721: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18722: LD_ADDR_EXP 87
18726: PUSH
18727: LD_EXP 87
18731: PPUSH
18732: LD_VAR 0 2
18736: PPUSH
18737: EMPTY
18738: PPUSH
18739: CALL_OW 1
18743: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18744: LD_ADDR_EXP 88
18748: PUSH
18749: LD_EXP 88
18753: PPUSH
18754: LD_VAR 0 2
18758: PPUSH
18759: EMPTY
18760: PPUSH
18761: CALL_OW 1
18765: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18766: LD_ADDR_EXP 89
18770: PUSH
18771: LD_EXP 89
18775: PPUSH
18776: LD_VAR 0 2
18780: PPUSH
18781: EMPTY
18782: PPUSH
18783: CALL_OW 1
18787: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18788: LD_ADDR_EXP 90
18792: PUSH
18793: LD_EXP 90
18797: PPUSH
18798: LD_VAR 0 2
18802: PPUSH
18803: EMPTY
18804: PPUSH
18805: CALL_OW 1
18809: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
18810: LD_ADDR_EXP 91
18814: PUSH
18815: LD_EXP 91
18819: PPUSH
18820: LD_VAR 0 2
18824: PPUSH
18825: LD_INT 0
18827: PPUSH
18828: CALL_OW 1
18832: ST_TO_ADDR
// end ;
18833: GO 17757
18835: POP
18836: POP
// MC_InitSides ( ) ;
18837: CALL 19123 0 0
// MC_InitResearch ( ) ;
18841: CALL 18862 0 0
// CustomInitMacro ( ) ;
18845: CALL 285 0 0
// skirmish := true ;
18849: LD_ADDR_EXP 47
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// end ;
18857: LD_VAR 0 1
18861: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
18867: PPUSH
18868: PPUSH
18869: PPUSH
// if not mc_bases then
18870: LD_EXP 49
18874: NOT
18875: IFFALSE 18879
// exit ;
18877: GO 19118
// for i = 1 to 8 do
18879: LD_ADDR_VAR 0 2
18883: PUSH
18884: DOUBLE
18885: LD_INT 1
18887: DEC
18888: ST_TO_ADDR
18889: LD_INT 8
18891: PUSH
18892: FOR_TO
18893: IFFALSE 18919
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18895: LD_ADDR_EXP 76
18899: PUSH
18900: LD_EXP 76
18904: PPUSH
18905: LD_VAR 0 2
18909: PPUSH
18910: EMPTY
18911: PPUSH
18912: CALL_OW 1
18916: ST_TO_ADDR
18917: GO 18892
18919: POP
18920: POP
// tmp := [ ] ;
18921: LD_ADDR_VAR 0 5
18925: PUSH
18926: EMPTY
18927: ST_TO_ADDR
// for i = 1 to mc_sides do
18928: LD_ADDR_VAR 0 2
18932: PUSH
18933: DOUBLE
18934: LD_INT 1
18936: DEC
18937: ST_TO_ADDR
18938: LD_EXP 75
18942: PUSH
18943: FOR_TO
18944: IFFALSE 19002
// if not mc_sides [ i ] in tmp then
18946: LD_EXP 75
18950: PUSH
18951: LD_VAR 0 2
18955: ARRAY
18956: PUSH
18957: LD_VAR 0 5
18961: IN
18962: NOT
18963: IFFALSE 19000
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18965: LD_ADDR_VAR 0 5
18969: PUSH
18970: LD_VAR 0 5
18974: PPUSH
18975: LD_VAR 0 5
18979: PUSH
18980: LD_INT 1
18982: PLUS
18983: PPUSH
18984: LD_EXP 75
18988: PUSH
18989: LD_VAR 0 2
18993: ARRAY
18994: PPUSH
18995: CALL_OW 2
18999: ST_TO_ADDR
19000: GO 18943
19002: POP
19003: POP
// if not tmp then
19004: LD_VAR 0 5
19008: NOT
19009: IFFALSE 19013
// exit ;
19011: GO 19118
// for j in tmp do
19013: LD_ADDR_VAR 0 3
19017: PUSH
19018: LD_VAR 0 5
19022: PUSH
19023: FOR_IN
19024: IFFALSE 19116
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
19026: LD_ADDR_VAR 0 6
19030: PUSH
19031: LD_INT 22
19033: PUSH
19034: LD_VAR 0 3
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: ST_TO_ADDR
// if not un then
19048: LD_VAR 0 6
19052: NOT
19053: IFFALSE 19057
// continue ;
19055: GO 19023
// nation := GetNation ( un [ 1 ] ) ;
19057: LD_ADDR_VAR 0 4
19061: PUSH
19062: LD_VAR 0 6
19066: PUSH
19067: LD_INT 1
19069: ARRAY
19070: PPUSH
19071: CALL_OW 248
19075: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
19076: LD_ADDR_EXP 76
19080: PUSH
19081: LD_EXP 76
19085: PPUSH
19086: LD_VAR 0 3
19090: PPUSH
19091: LD_VAR 0 3
19095: PPUSH
19096: LD_VAR 0 4
19100: PPUSH
19101: LD_INT 1
19103: PPUSH
19104: CALL 44160 0 3
19108: PPUSH
19109: CALL_OW 1
19113: ST_TO_ADDR
// end ;
19114: GO 19023
19116: POP
19117: POP
// end ;
19118: LD_VAR 0 1
19122: RET
// export function MC_InitSides ( ) ; var i ; begin
19123: LD_INT 0
19125: PPUSH
19126: PPUSH
// if not mc_bases then
19127: LD_EXP 49
19131: NOT
19132: IFFALSE 19136
// exit ;
19134: GO 19210
// for i = 1 to mc_bases do
19136: LD_ADDR_VAR 0 2
19140: PUSH
19141: DOUBLE
19142: LD_INT 1
19144: DEC
19145: ST_TO_ADDR
19146: LD_EXP 49
19150: PUSH
19151: FOR_TO
19152: IFFALSE 19208
// if mc_bases [ i ] then
19154: LD_EXP 49
19158: PUSH
19159: LD_VAR 0 2
19163: ARRAY
19164: IFFALSE 19206
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
19166: LD_ADDR_EXP 75
19170: PUSH
19171: LD_EXP 75
19175: PPUSH
19176: LD_VAR 0 2
19180: PPUSH
19181: LD_EXP 49
19185: PUSH
19186: LD_VAR 0 2
19190: ARRAY
19191: PUSH
19192: LD_INT 1
19194: ARRAY
19195: PPUSH
19196: CALL_OW 255
19200: PPUSH
19201: CALL_OW 1
19205: ST_TO_ADDR
19206: GO 19151
19208: POP
19209: POP
// end ;
19210: LD_VAR 0 1
19214: RET
// every 0 0$01 trigger skirmish do
19215: LD_EXP 47
19219: IFFALSE 19373
19221: GO 19223
19223: DISABLE
// begin enable ;
19224: ENABLE
// MC_CheckBuildings ( ) ;
19225: CALL 23506 0 0
// MC_CheckPeopleLife ( ) ;
19229: CALL 23631 0 0
// RaiseSailEvent ( 100 ) ;
19233: LD_INT 100
19235: PPUSH
19236: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
19240: LD_INT 103
19242: PPUSH
19243: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
19247: LD_INT 104
19249: PPUSH
19250: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
19254: LD_INT 105
19256: PPUSH
19257: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
19261: LD_INT 106
19263: PPUSH
19264: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
19268: LD_INT 107
19270: PPUSH
19271: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
19275: LD_INT 108
19277: PPUSH
19278: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
19282: LD_INT 109
19284: PPUSH
19285: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
19289: LD_INT 110
19291: PPUSH
19292: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
19296: LD_INT 111
19298: PPUSH
19299: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
19303: LD_INT 112
19305: PPUSH
19306: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
19310: LD_INT 113
19312: PPUSH
19313: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
19317: LD_INT 120
19319: PPUSH
19320: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
19324: LD_INT 121
19326: PPUSH
19327: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
19331: LD_INT 122
19333: PPUSH
19334: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
19338: LD_INT 123
19340: PPUSH
19341: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
19345: LD_INT 124
19347: PPUSH
19348: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
19352: LD_INT 125
19354: PPUSH
19355: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
19359: LD_INT 126
19361: PPUSH
19362: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
19366: LD_INT 200
19368: PPUSH
19369: CALL_OW 427
// end ;
19373: END
// on SailEvent ( event ) do begin if event = 100 then
19374: LD_VAR 0 1
19378: PUSH
19379: LD_INT 100
19381: EQUAL
19382: IFFALSE 19388
// MC_ClassManager ( ) ;
19384: CALL 19780 0 0
// if event = 101 then
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 101
19395: EQUAL
19396: IFFALSE 19402
// MC_RepairBuildings ( ) ;
19398: CALL 24189 0 0
// if event = 102 then
19402: LD_VAR 0 1
19406: PUSH
19407: LD_INT 102
19409: EQUAL
19410: IFFALSE 19416
// MC_Heal ( ) ;
19412: CALL 24595 0 0
// if event = 103 then
19416: LD_VAR 0 1
19420: PUSH
19421: LD_INT 103
19423: EQUAL
19424: IFFALSE 19430
// MC_Build ( ) ;
19426: CALL 25017 0 0
// if event = 104 then
19430: LD_VAR 0 1
19434: PUSH
19435: LD_INT 104
19437: EQUAL
19438: IFFALSE 19444
// MC_TurretWeapon ( ) ;
19440: CALL 26630 0 0
// if event = 105 then
19444: LD_VAR 0 1
19448: PUSH
19449: LD_INT 105
19451: EQUAL
19452: IFFALSE 19458
// MC_BuildUpgrade ( ) ;
19454: CALL 26181 0 0
// if event = 106 then
19458: LD_VAR 0 1
19462: PUSH
19463: LD_INT 106
19465: EQUAL
19466: IFFALSE 19472
// MC_PlantMines ( ) ;
19468: CALL 27049 0 0
// if event = 107 then
19472: LD_VAR 0 1
19476: PUSH
19477: LD_INT 107
19479: EQUAL
19480: IFFALSE 19486
// MC_CollectCrates ( ) ;
19482: CALL 28083 0 0
// if event = 108 then
19486: LD_VAR 0 1
19490: PUSH
19491: LD_INT 108
19493: EQUAL
19494: IFFALSE 19500
// MC_LinkRemoteControl ( ) ;
19496: CALL 29840 0 0
// if event = 109 then
19500: LD_VAR 0 1
19504: PUSH
19505: LD_INT 109
19507: EQUAL
19508: IFFALSE 19514
// MC_ProduceVehicle ( ) ;
19510: CALL 30021 0 0
// if event = 110 then
19514: LD_VAR 0 1
19518: PUSH
19519: LD_INT 110
19521: EQUAL
19522: IFFALSE 19528
// MC_SendAttack ( ) ;
19524: CALL 30502 0 0
// if event = 111 then
19528: LD_VAR 0 1
19532: PUSH
19533: LD_INT 111
19535: EQUAL
19536: IFFALSE 19542
// MC_Defend ( ) ;
19538: CALL 30610 0 0
// if event = 112 then
19542: LD_VAR 0 1
19546: PUSH
19547: LD_INT 112
19549: EQUAL
19550: IFFALSE 19556
// MC_Research ( ) ;
19552: CALL 31237 0 0
// if event = 113 then
19556: LD_VAR 0 1
19560: PUSH
19561: LD_INT 113
19563: EQUAL
19564: IFFALSE 19570
// MC_MinesTrigger ( ) ;
19566: CALL 32324 0 0
// if event = 120 then
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 120
19577: EQUAL
19578: IFFALSE 19584
// MC_RepairVehicle ( ) ;
19580: CALL 32423 0 0
// if event = 121 then
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 121
19591: EQUAL
19592: IFFALSE 19598
// MC_TameApe ( ) ;
19594: CALL 33166 0 0
// if event = 122 then
19598: LD_VAR 0 1
19602: PUSH
19603: LD_INT 122
19605: EQUAL
19606: IFFALSE 19612
// MC_ChangeApeClass ( ) ;
19608: CALL 33995 0 0
// if event = 123 then
19612: LD_VAR 0 1
19616: PUSH
19617: LD_INT 123
19619: EQUAL
19620: IFFALSE 19626
// MC_Bazooka ( ) ;
19622: CALL 34645 0 0
// if event = 124 then
19626: LD_VAR 0 1
19630: PUSH
19631: LD_INT 124
19633: EQUAL
19634: IFFALSE 19640
// MC_TeleportExit ( ) ;
19636: CALL 34843 0 0
// if event = 125 then
19640: LD_VAR 0 1
19644: PUSH
19645: LD_INT 125
19647: EQUAL
19648: IFFALSE 19654
// MC_Deposits ( ) ;
19650: CALL 35490 0 0
// if event = 126 then
19654: LD_VAR 0 1
19658: PUSH
19659: LD_INT 126
19661: EQUAL
19662: IFFALSE 19668
// MC_RemoteDriver ( ) ;
19664: CALL 36115 0 0
// if event = 200 then
19668: LD_VAR 0 1
19672: PUSH
19673: LD_INT 200
19675: EQUAL
19676: IFFALSE 19682
// MC_Idle ( ) ;
19678: CALL 37848 0 0
// end ;
19682: PPOPN 1
19684: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
// if not mc_bases [ base ] or not tag then
19689: LD_EXP 49
19693: PUSH
19694: LD_VAR 0 1
19698: ARRAY
19699: NOT
19700: PUSH
19701: LD_VAR 0 2
19705: NOT
19706: OR
19707: IFFALSE 19711
// exit ;
19709: GO 19775
// for i in mc_bases [ base ] union mc_ape [ base ] do
19711: LD_ADDR_VAR 0 4
19715: PUSH
19716: LD_EXP 49
19720: PUSH
19721: LD_VAR 0 1
19725: ARRAY
19726: PUSH
19727: LD_EXP 78
19731: PUSH
19732: LD_VAR 0 1
19736: ARRAY
19737: UNION
19738: PUSH
19739: FOR_IN
19740: IFFALSE 19773
// if GetTag ( i ) = tag then
19742: LD_VAR 0 4
19746: PPUSH
19747: CALL_OW 110
19751: PUSH
19752: LD_VAR 0 2
19756: EQUAL
19757: IFFALSE 19771
// SetTag ( i , 0 ) ;
19759: LD_VAR 0 4
19763: PPUSH
19764: LD_INT 0
19766: PPUSH
19767: CALL_OW 109
19771: GO 19739
19773: POP
19774: POP
// end ;
19775: LD_VAR 0 3
19779: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19780: LD_INT 0
19782: PPUSH
19783: PPUSH
19784: PPUSH
19785: PPUSH
19786: PPUSH
19787: PPUSH
19788: PPUSH
19789: PPUSH
// if not mc_bases then
19790: LD_EXP 49
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 20257
// for i = 1 to mc_bases do
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: DOUBLE
19805: LD_INT 1
19807: DEC
19808: ST_TO_ADDR
19809: LD_EXP 49
19813: PUSH
19814: FOR_TO
19815: IFFALSE 20255
// begin tmp := MC_ClassCheckReq ( i ) ;
19817: LD_ADDR_VAR 0 4
19821: PUSH
19822: LD_VAR 0 2
19826: PPUSH
19827: CALL 20262 0 1
19831: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19832: LD_ADDR_EXP 90
19836: PUSH
19837: LD_EXP 90
19841: PPUSH
19842: LD_VAR 0 2
19846: PPUSH
19847: LD_VAR 0 4
19851: PPUSH
19852: CALL_OW 1
19856: ST_TO_ADDR
// if not tmp then
19857: LD_VAR 0 4
19861: NOT
19862: IFFALSE 19866
// continue ;
19864: GO 19814
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19866: LD_ADDR_VAR 0 6
19870: PUSH
19871: LD_EXP 49
19875: PUSH
19876: LD_VAR 0 2
19880: ARRAY
19881: PPUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 4
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 30
19897: PUSH
19898: LD_INT 5
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 72
19914: PUSH
19915: LD_EXP 49
19919: PUSH
19920: LD_VAR 0 2
19924: ARRAY
19925: PPUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 30
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 30
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 72
19958: PUSH
19959: LD_EXP 49
19963: PUSH
19964: LD_VAR 0 2
19968: ARRAY
19969: PPUSH
19970: LD_INT 30
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PPUSH
19980: CALL_OW 72
19984: PUSH
19985: LD_EXP 49
19989: PUSH
19990: LD_VAR 0 2
19994: ARRAY
19995: PPUSH
19996: LD_INT 2
19998: PUSH
19999: LD_INT 30
20001: PUSH
20002: LD_INT 6
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 30
20011: PUSH
20012: LD_INT 7
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 30
20021: PUSH
20022: LD_INT 8
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: PPUSH
20035: CALL_OW 72
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: ST_TO_ADDR
// for j = 1 to 4 do
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: DOUBLE
20052: LD_INT 1
20054: DEC
20055: ST_TO_ADDR
20056: LD_INT 4
20058: PUSH
20059: FOR_TO
20060: IFFALSE 20251
// begin if not tmp [ j ] then
20062: LD_VAR 0 4
20066: PUSH
20067: LD_VAR 0 3
20071: ARRAY
20072: NOT
20073: IFFALSE 20077
// continue ;
20075: GO 20059
// for p in tmp [ j ] do
20077: LD_ADDR_VAR 0 5
20081: PUSH
20082: LD_VAR 0 4
20086: PUSH
20087: LD_VAR 0 3
20091: ARRAY
20092: PUSH
20093: FOR_IN
20094: IFFALSE 20247
// begin if not b [ j ] then
20096: LD_VAR 0 6
20100: PUSH
20101: LD_VAR 0 3
20105: ARRAY
20106: NOT
20107: IFFALSE 20111
// break ;
20109: GO 20247
// e := 0 ;
20111: LD_ADDR_VAR 0 7
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// for k in b [ j ] do
20119: LD_ADDR_VAR 0 8
20123: PUSH
20124: LD_VAR 0 6
20128: PUSH
20129: LD_VAR 0 3
20133: ARRAY
20134: PUSH
20135: FOR_IN
20136: IFFALSE 20163
// if IsNotFull ( k ) then
20138: LD_VAR 0 8
20142: PPUSH
20143: CALL 48186 0 1
20147: IFFALSE 20161
// begin e := k ;
20149: LD_ADDR_VAR 0 7
20153: PUSH
20154: LD_VAR 0 8
20158: ST_TO_ADDR
// break ;
20159: GO 20163
// end ;
20161: GO 20135
20163: POP
20164: POP
// if e and not UnitGoingToBuilding ( p , e ) then
20165: LD_VAR 0 7
20169: PUSH
20170: LD_VAR 0 5
20174: PPUSH
20175: LD_VAR 0 7
20179: PPUSH
20180: CALL 84992 0 2
20184: NOT
20185: AND
20186: IFFALSE 20245
// begin if IsInUnit ( p ) then
20188: LD_VAR 0 5
20192: PPUSH
20193: CALL_OW 310
20197: IFFALSE 20208
// ComExitBuilding ( p ) ;
20199: LD_VAR 0 5
20203: PPUSH
20204: CALL_OW 122
// ComEnterUnit ( p , e ) ;
20208: LD_VAR 0 5
20212: PPUSH
20213: LD_VAR 0 7
20217: PPUSH
20218: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
20222: LD_VAR 0 5
20226: PPUSH
20227: LD_VAR 0 3
20231: PPUSH
20232: CALL_OW 183
// AddComExitBuilding ( p ) ;
20236: LD_VAR 0 5
20240: PPUSH
20241: CALL_OW 182
// end ; end ;
20245: GO 20093
20247: POP
20248: POP
// end ;
20249: GO 20059
20251: POP
20252: POP
// end ;
20253: GO 19814
20255: POP
20256: POP
// end ;
20257: LD_VAR 0 1
20261: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
20262: LD_INT 0
20264: PPUSH
20265: PPUSH
20266: PPUSH
20267: PPUSH
20268: PPUSH
20269: PPUSH
20270: PPUSH
20271: PPUSH
20272: PPUSH
20273: PPUSH
20274: PPUSH
20275: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20276: LD_VAR 0 1
20280: NOT
20281: PUSH
20282: LD_EXP 49
20286: PUSH
20287: LD_VAR 0 1
20291: ARRAY
20292: NOT
20293: OR
20294: PUSH
20295: LD_EXP 49
20299: PUSH
20300: LD_VAR 0 1
20304: ARRAY
20305: PPUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 0
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PPUSH
20334: CALL_OW 72
20338: NOT
20339: OR
20340: IFFALSE 20344
// exit ;
20342: GO 23501
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20344: LD_ADDR_VAR 0 4
20348: PUSH
20349: LD_EXP 49
20353: PUSH
20354: LD_VAR 0 1
20358: ARRAY
20359: PPUSH
20360: LD_INT 2
20362: PUSH
20363: LD_INT 25
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 25
20375: PUSH
20376: LD_INT 2
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 25
20385: PUSH
20386: LD_INT 3
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 25
20395: PUSH
20396: LD_INT 4
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 25
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 25
20415: PUSH
20416: LD_INT 8
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 9
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: PPUSH
20443: CALL_OW 72
20447: ST_TO_ADDR
// for i in tmp do
20448: LD_ADDR_VAR 0 3
20452: PUSH
20453: LD_VAR 0 4
20457: PUSH
20458: FOR_IN
20459: IFFALSE 20490
// if GetTag ( i ) then
20461: LD_VAR 0 3
20465: PPUSH
20466: CALL_OW 110
20470: IFFALSE 20488
// tmp := tmp diff i ;
20472: LD_ADDR_VAR 0 4
20476: PUSH
20477: LD_VAR 0 4
20481: PUSH
20482: LD_VAR 0 3
20486: DIFF
20487: ST_TO_ADDR
20488: GO 20458
20490: POP
20491: POP
// if not tmp then
20492: LD_VAR 0 4
20496: NOT
20497: IFFALSE 20501
// exit ;
20499: GO 23501
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_EXP 49
20510: PUSH
20511: LD_VAR 0 1
20515: ARRAY
20516: PPUSH
20517: LD_INT 2
20519: PUSH
20520: LD_INT 25
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 25
20532: PUSH
20533: LD_INT 5
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 25
20542: PUSH
20543: LD_INT 8
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 25
20552: PUSH
20553: LD_INT 9
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 72
20571: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20572: LD_ADDR_VAR 0 6
20576: PUSH
20577: LD_EXP 49
20581: PUSH
20582: LD_VAR 0 1
20586: ARRAY
20587: PPUSH
20588: LD_INT 25
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PPUSH
20598: CALL_OW 72
20602: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20603: LD_ADDR_VAR 0 7
20607: PUSH
20608: LD_EXP 49
20612: PUSH
20613: LD_VAR 0 1
20617: ARRAY
20618: PPUSH
20619: LD_INT 25
20621: PUSH
20622: LD_INT 3
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PPUSH
20629: CALL_OW 72
20633: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ f_class , 4 ] ) ;
20634: LD_ADDR_VAR 0 8
20638: PUSH
20639: LD_EXP 49
20643: PUSH
20644: LD_VAR 0 1
20648: ARRAY
20649: PPUSH
20650: LD_INT 25
20652: PUSH
20653: LD_INT 4
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PPUSH
20660: CALL_OW 72
20664: ST_TO_ADDR
// if mc_scan [ base ] then
20665: LD_EXP 72
20669: PUSH
20670: LD_VAR 0 1
20674: ARRAY
20675: IFFALSE 21136
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
20677: LD_ADDR_EXP 91
20681: PUSH
20682: LD_EXP 91
20686: PPUSH
20687: LD_VAR 0 1
20691: PPUSH
20692: LD_INT 4
20694: PPUSH
20695: CALL_OW 1
20699: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20700: LD_ADDR_VAR 0 12
20704: PUSH
20705: LD_EXP 49
20709: PUSH
20710: LD_VAR 0 1
20714: ARRAY
20715: PPUSH
20716: LD_INT 2
20718: PUSH
20719: LD_INT 30
20721: PUSH
20722: LD_INT 4
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: PUSH
20729: LD_INT 30
20731: PUSH
20732: LD_INT 5
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: PPUSH
20744: CALL_OW 72
20748: ST_TO_ADDR
// if not b then
20749: LD_VAR 0 12
20753: NOT
20754: IFFALSE 20758
// exit ;
20756: GO 23501
// p := [ ] ;
20758: LD_ADDR_VAR 0 11
20762: PUSH
20763: EMPTY
20764: ST_TO_ADDR
// if sci >= 2 then
20765: LD_VAR 0 8
20769: PUSH
20770: LD_INT 2
20772: GREATEREQUAL
20773: IFFALSE 20804
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20775: LD_ADDR_VAR 0 8
20779: PUSH
20780: LD_VAR 0 8
20784: PUSH
20785: LD_INT 1
20787: ARRAY
20788: PUSH
20789: LD_VAR 0 8
20793: PUSH
20794: LD_INT 2
20796: ARRAY
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: ST_TO_ADDR
20802: GO 20865
// if sci = 1 then
20804: LD_VAR 0 8
20808: PUSH
20809: LD_INT 1
20811: EQUAL
20812: IFFALSE 20833
// sci := [ sci [ 1 ] ] else
20814: LD_ADDR_VAR 0 8
20818: PUSH
20819: LD_VAR 0 8
20823: PUSH
20824: LD_INT 1
20826: ARRAY
20827: PUSH
20828: EMPTY
20829: LIST
20830: ST_TO_ADDR
20831: GO 20865
// if sci = 0 then
20833: LD_VAR 0 8
20837: PUSH
20838: LD_INT 0
20840: EQUAL
20841: IFFALSE 20865
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20843: LD_ADDR_VAR 0 11
20847: PUSH
20848: LD_VAR 0 4
20852: PPUSH
20853: LD_INT 4
20855: PPUSH
20856: CALL 84855 0 2
20860: PUSH
20861: LD_INT 1
20863: ARRAY
20864: ST_TO_ADDR
// if eng > 4 then
20865: LD_VAR 0 6
20869: PUSH
20870: LD_INT 4
20872: GREATER
20873: IFFALSE 20919
// for i = eng downto 4 do
20875: LD_ADDR_VAR 0 3
20879: PUSH
20880: DOUBLE
20881: LD_VAR 0 6
20885: INC
20886: ST_TO_ADDR
20887: LD_INT 4
20889: PUSH
20890: FOR_DOWNTO
20891: IFFALSE 20917
// eng := eng diff eng [ i ] ;
20893: LD_ADDR_VAR 0 6
20897: PUSH
20898: LD_VAR 0 6
20902: PUSH
20903: LD_VAR 0 6
20907: PUSH
20908: LD_VAR 0 3
20912: ARRAY
20913: DIFF
20914: ST_TO_ADDR
20915: GO 20890
20917: POP
20918: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
20919: LD_ADDR_VAR 0 4
20923: PUSH
20924: LD_VAR 0 4
20928: PUSH
20929: LD_VAR 0 5
20933: PUSH
20934: LD_VAR 0 6
20938: UNION
20939: PUSH
20940: LD_VAR 0 7
20944: UNION
20945: PUSH
20946: LD_VAR 0 8
20950: UNION
20951: DIFF
20952: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
20953: LD_ADDR_VAR 0 13
20957: PUSH
20958: LD_EXP 49
20962: PUSH
20963: LD_VAR 0 1
20967: ARRAY
20968: PPUSH
20969: LD_INT 2
20971: PUSH
20972: LD_INT 30
20974: PUSH
20975: LD_INT 32
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 30
20984: PUSH
20985: LD_INT 31
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: LIST
20996: PPUSH
20997: CALL_OW 72
21001: PUSH
21002: LD_EXP 49
21006: PUSH
21007: LD_VAR 0 1
21011: ARRAY
21012: PPUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 30
21018: PUSH
21019: LD_INT 4
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 30
21028: PUSH
21029: LD_INT 5
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: LIST
21040: PPUSH
21041: CALL_OW 72
21045: PUSH
21046: LD_INT 6
21048: MUL
21049: PLUS
21050: ST_TO_ADDR
// if bcount < tmp then
21051: LD_VAR 0 13
21055: PUSH
21056: LD_VAR 0 4
21060: LESS
21061: IFFALSE 21107
// for i = tmp downto bcount do
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: DOUBLE
21069: LD_VAR 0 4
21073: INC
21074: ST_TO_ADDR
21075: LD_VAR 0 13
21079: PUSH
21080: FOR_DOWNTO
21081: IFFALSE 21105
// tmp := Delete ( tmp , tmp ) ;
21083: LD_ADDR_VAR 0 4
21087: PUSH
21088: LD_VAR 0 4
21092: PPUSH
21093: LD_VAR 0 4
21097: PPUSH
21098: CALL_OW 3
21102: ST_TO_ADDR
21103: GO 21080
21105: POP
21106: POP
// result := [ tmp , 0 , 0 , p ] ;
21107: LD_ADDR_VAR 0 2
21111: PUSH
21112: LD_VAR 0 4
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 0
21122: PUSH
21123: LD_VAR 0 11
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: ST_TO_ADDR
// exit ;
21134: GO 23501
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21136: LD_EXP 49
21140: PUSH
21141: LD_VAR 0 1
21145: ARRAY
21146: PPUSH
21147: LD_INT 2
21149: PUSH
21150: LD_INT 30
21152: PUSH
21153: LD_INT 6
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 30
21162: PUSH
21163: LD_INT 7
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 30
21172: PUSH
21173: LD_INT 8
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 72
21190: NOT
21191: PUSH
21192: LD_EXP 49
21196: PUSH
21197: LD_VAR 0 1
21201: ARRAY
21202: PPUSH
21203: LD_INT 30
21205: PUSH
21206: LD_INT 3
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PPUSH
21213: CALL_OW 72
21217: NOT
21218: AND
21219: IFFALSE 21291
// begin if eng = tmp then
21221: LD_VAR 0 6
21225: PUSH
21226: LD_VAR 0 4
21230: EQUAL
21231: IFFALSE 21235
// exit ;
21233: GO 23501
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
21235: LD_ADDR_EXP 91
21239: PUSH
21240: LD_EXP 91
21244: PPUSH
21245: LD_VAR 0 1
21249: PPUSH
21250: LD_INT 1
21252: PPUSH
21253: CALL_OW 1
21257: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
21258: LD_ADDR_VAR 0 2
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_VAR 0 4
21270: PUSH
21271: LD_VAR 0 6
21275: DIFF
21276: PUSH
21277: LD_INT 0
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: ST_TO_ADDR
// exit ;
21289: GO 23501
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21291: LD_EXP 76
21295: PUSH
21296: LD_EXP 75
21300: PUSH
21301: LD_VAR 0 1
21305: ARRAY
21306: ARRAY
21307: PUSH
21308: LD_EXP 49
21312: PUSH
21313: LD_VAR 0 1
21317: ARRAY
21318: PPUSH
21319: LD_INT 2
21321: PUSH
21322: LD_INT 30
21324: PUSH
21325: LD_INT 6
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 30
21334: PUSH
21335: LD_INT 7
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 30
21344: PUSH
21345: LD_INT 8
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: PPUSH
21358: CALL_OW 72
21362: AND
21363: PUSH
21364: LD_EXP 49
21368: PUSH
21369: LD_VAR 0 1
21373: ARRAY
21374: PPUSH
21375: LD_INT 30
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PPUSH
21385: CALL_OW 72
21389: NOT
21390: AND
21391: IFFALSE 21605
// begin if sci >= 6 then
21393: LD_VAR 0 8
21397: PUSH
21398: LD_INT 6
21400: GREATEREQUAL
21401: IFFALSE 21405
// exit ;
21403: GO 23501
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
21405: LD_ADDR_EXP 91
21409: PUSH
21410: LD_EXP 91
21414: PPUSH
21415: LD_VAR 0 1
21419: PPUSH
21420: LD_INT 2
21422: PPUSH
21423: CALL_OW 1
21427: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_VAR 0 4
21437: PUSH
21438: LD_VAR 0 8
21442: DIFF
21443: PPUSH
21444: LD_INT 4
21446: PPUSH
21447: CALL 84855 0 2
21451: ST_TO_ADDR
// p := [ ] ;
21452: LD_ADDR_VAR 0 11
21456: PUSH
21457: EMPTY
21458: ST_TO_ADDR
// if sci < 6 and sort > 6 then
21459: LD_VAR 0 8
21463: PUSH
21464: LD_INT 6
21466: LESS
21467: PUSH
21468: LD_VAR 0 9
21472: PUSH
21473: LD_INT 6
21475: GREATER
21476: AND
21477: IFFALSE 21558
// begin for i = 1 to 6 - sci do
21479: LD_ADDR_VAR 0 3
21483: PUSH
21484: DOUBLE
21485: LD_INT 1
21487: DEC
21488: ST_TO_ADDR
21489: LD_INT 6
21491: PUSH
21492: LD_VAR 0 8
21496: MINUS
21497: PUSH
21498: FOR_TO
21499: IFFALSE 21554
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21501: LD_ADDR_VAR 0 11
21505: PUSH
21506: LD_VAR 0 11
21510: PPUSH
21511: LD_VAR 0 11
21515: PUSH
21516: LD_INT 1
21518: PLUS
21519: PPUSH
21520: LD_VAR 0 9
21524: PUSH
21525: LD_INT 1
21527: ARRAY
21528: PPUSH
21529: CALL_OW 2
21533: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21534: LD_ADDR_VAR 0 9
21538: PUSH
21539: LD_VAR 0 9
21543: PPUSH
21544: LD_INT 1
21546: PPUSH
21547: CALL_OW 3
21551: ST_TO_ADDR
// end ;
21552: GO 21498
21554: POP
21555: POP
// end else
21556: GO 21578
// if sort then
21558: LD_VAR 0 9
21562: IFFALSE 21578
// p := sort [ 1 ] ;
21564: LD_ADDR_VAR 0 11
21568: PUSH
21569: LD_VAR 0 9
21573: PUSH
21574: LD_INT 1
21576: ARRAY
21577: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21578: LD_ADDR_VAR 0 2
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: LD_INT 0
21591: PUSH
21592: LD_VAR 0 11
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: ST_TO_ADDR
// exit ;
21603: GO 23501
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21605: LD_EXP 76
21609: PUSH
21610: LD_EXP 75
21614: PUSH
21615: LD_VAR 0 1
21619: ARRAY
21620: ARRAY
21621: PUSH
21622: LD_EXP 49
21626: PUSH
21627: LD_VAR 0 1
21631: ARRAY
21632: PPUSH
21633: LD_INT 2
21635: PUSH
21636: LD_INT 30
21638: PUSH
21639: LD_INT 6
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 30
21648: PUSH
21649: LD_INT 7
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 30
21658: PUSH
21659: LD_INT 8
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 72
21676: AND
21677: PUSH
21678: LD_EXP 49
21682: PUSH
21683: LD_VAR 0 1
21687: ARRAY
21688: PPUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PPUSH
21699: CALL_OW 72
21703: AND
21704: IFFALSE 22231
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
21706: LD_ADDR_EXP 91
21710: PUSH
21711: LD_EXP 91
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: LD_INT 3
21723: PPUSH
21724: CALL_OW 1
21728: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_INT 0
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 0
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: ST_TO_ADDR
// if not eng then
21752: LD_VAR 0 6
21756: NOT
21757: IFFALSE 21820
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21759: LD_ADDR_VAR 0 11
21763: PUSH
21764: LD_VAR 0 4
21768: PPUSH
21769: LD_INT 2
21771: PPUSH
21772: CALL 84855 0 2
21776: PUSH
21777: LD_INT 1
21779: ARRAY
21780: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21781: LD_ADDR_VAR 0 2
21785: PUSH
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_INT 2
21793: PPUSH
21794: LD_VAR 0 11
21798: PPUSH
21799: CALL_OW 1
21803: ST_TO_ADDR
// tmp := tmp diff p ;
21804: LD_ADDR_VAR 0 4
21808: PUSH
21809: LD_VAR 0 4
21813: PUSH
21814: LD_VAR 0 11
21818: DIFF
21819: ST_TO_ADDR
// end ; if not eng then
21820: LD_VAR 0 6
21824: NOT
21825: IFFALSE 21851
// tmp := tmp diff ( mech union sci ) else
21827: LD_ADDR_VAR 0 4
21831: PUSH
21832: LD_VAR 0 4
21836: PUSH
21837: LD_VAR 0 7
21841: PUSH
21842: LD_VAR 0 8
21846: UNION
21847: DIFF
21848: ST_TO_ADDR
21849: GO 21883
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
21851: LD_ADDR_VAR 0 4
21855: PUSH
21856: LD_VAR 0 4
21860: PUSH
21861: LD_VAR 0 6
21865: PUSH
21866: LD_INT 1
21868: ARRAY
21869: PUSH
21870: LD_VAR 0 7
21874: UNION
21875: PUSH
21876: LD_VAR 0 8
21880: UNION
21881: DIFF
21882: ST_TO_ADDR
// if tmp and sci < 6 then
21883: LD_VAR 0 4
21887: PUSH
21888: LD_VAR 0 8
21892: PUSH
21893: LD_INT 6
21895: LESS
21896: AND
21897: IFFALSE 22056
// begin sort := SortBySkill ( tmp , 4 ) ;
21899: LD_ADDR_VAR 0 9
21903: PUSH
21904: LD_VAR 0 4
21908: PPUSH
21909: LD_INT 4
21911: PPUSH
21912: CALL 84855 0 2
21916: ST_TO_ADDR
// p := [ ] ;
21917: LD_ADDR_VAR 0 11
21921: PUSH
21922: EMPTY
21923: ST_TO_ADDR
// if sort then
21924: LD_VAR 0 9
21928: IFFALSE 22027
// for i = 1 to 6 - sci do
21930: LD_ADDR_VAR 0 3
21934: PUSH
21935: DOUBLE
21936: LD_INT 1
21938: DEC
21939: ST_TO_ADDR
21940: LD_INT 6
21942: PUSH
21943: LD_VAR 0 8
21947: MINUS
21948: PUSH
21949: FOR_TO
21950: IFFALSE 22025
// begin if i = sort then
21952: LD_VAR 0 3
21956: PUSH
21957: LD_VAR 0 9
21961: EQUAL
21962: IFFALSE 21966
// break ;
21964: GO 22025
// p := Insert ( p , p + 1 , sort [ i ] ) ;
21966: LD_ADDR_VAR 0 11
21970: PUSH
21971: LD_VAR 0 11
21975: PPUSH
21976: LD_VAR 0 11
21980: PUSH
21981: LD_INT 1
21983: PLUS
21984: PPUSH
21985: LD_VAR 0 9
21989: PUSH
21990: LD_VAR 0 3
21994: ARRAY
21995: PPUSH
21996: CALL_OW 2
22000: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22001: LD_ADDR_VAR 0 4
22005: PUSH
22006: LD_VAR 0 4
22010: PUSH
22011: LD_VAR 0 9
22015: PUSH
22016: LD_VAR 0 3
22020: ARRAY
22021: DIFF
22022: ST_TO_ADDR
// end ;
22023: GO 21949
22025: POP
22026: POP
// if p then
22027: LD_VAR 0 11
22031: IFFALSE 22056
// result := Replace ( result , 4 , p ) ;
22033: LD_ADDR_VAR 0 2
22037: PUSH
22038: LD_VAR 0 2
22042: PPUSH
22043: LD_INT 4
22045: PPUSH
22046: LD_VAR 0 11
22050: PPUSH
22051: CALL_OW 1
22055: ST_TO_ADDR
// end ; if tmp and mech < 6 then
22056: LD_VAR 0 4
22060: PUSH
22061: LD_VAR 0 7
22065: PUSH
22066: LD_INT 6
22068: LESS
22069: AND
22070: IFFALSE 22229
// begin sort := SortBySkill ( tmp , 3 ) ;
22072: LD_ADDR_VAR 0 9
22076: PUSH
22077: LD_VAR 0 4
22081: PPUSH
22082: LD_INT 3
22084: PPUSH
22085: CALL 84855 0 2
22089: ST_TO_ADDR
// p := [ ] ;
22090: LD_ADDR_VAR 0 11
22094: PUSH
22095: EMPTY
22096: ST_TO_ADDR
// if sort then
22097: LD_VAR 0 9
22101: IFFALSE 22200
// for i = 1 to 6 - mech do
22103: LD_ADDR_VAR 0 3
22107: PUSH
22108: DOUBLE
22109: LD_INT 1
22111: DEC
22112: ST_TO_ADDR
22113: LD_INT 6
22115: PUSH
22116: LD_VAR 0 7
22120: MINUS
22121: PUSH
22122: FOR_TO
22123: IFFALSE 22198
// begin if i = sort then
22125: LD_VAR 0 3
22129: PUSH
22130: LD_VAR 0 9
22134: EQUAL
22135: IFFALSE 22139
// break ;
22137: GO 22198
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22139: LD_ADDR_VAR 0 11
22143: PUSH
22144: LD_VAR 0 11
22148: PPUSH
22149: LD_VAR 0 11
22153: PUSH
22154: LD_INT 1
22156: PLUS
22157: PPUSH
22158: LD_VAR 0 9
22162: PUSH
22163: LD_VAR 0 3
22167: ARRAY
22168: PPUSH
22169: CALL_OW 2
22173: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22174: LD_ADDR_VAR 0 4
22178: PUSH
22179: LD_VAR 0 4
22183: PUSH
22184: LD_VAR 0 9
22188: PUSH
22189: LD_VAR 0 3
22193: ARRAY
22194: DIFF
22195: ST_TO_ADDR
// end ;
22196: GO 22122
22198: POP
22199: POP
// if p then
22200: LD_VAR 0 11
22204: IFFALSE 22229
// result := Replace ( result , 3 , p ) ;
22206: LD_ADDR_VAR 0 2
22210: PUSH
22211: LD_VAR 0 2
22215: PPUSH
22216: LD_INT 3
22218: PPUSH
22219: LD_VAR 0 11
22223: PPUSH
22224: CALL_OW 1
22228: ST_TO_ADDR
// end ; exit ;
22229: GO 23501
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
22231: LD_EXP 76
22235: PUSH
22236: LD_EXP 75
22240: PUSH
22241: LD_VAR 0 1
22245: ARRAY
22246: ARRAY
22247: NOT
22248: PUSH
22249: LD_EXP 49
22253: PUSH
22254: LD_VAR 0 1
22258: ARRAY
22259: PPUSH
22260: LD_INT 30
22262: PUSH
22263: LD_INT 3
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PPUSH
22270: CALL_OW 72
22274: AND
22275: PUSH
22276: LD_EXP 54
22280: PUSH
22281: LD_VAR 0 1
22285: ARRAY
22286: AND
22287: IFFALSE 22831
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
22289: LD_ADDR_EXP 91
22293: PUSH
22294: LD_EXP 91
22298: PPUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: LD_INT 5
22306: PPUSH
22307: CALL_OW 1
22311: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22312: LD_ADDR_VAR 0 2
22316: PUSH
22317: LD_INT 0
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: LD_INT 0
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: ST_TO_ADDR
// if sci > 1 then
22335: LD_VAR 0 8
22339: PUSH
22340: LD_INT 1
22342: GREATER
22343: IFFALSE 22371
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: LD_VAR 0 4
22354: PUSH
22355: LD_VAR 0 8
22359: PUSH
22360: LD_VAR 0 8
22364: PUSH
22365: LD_INT 1
22367: ARRAY
22368: DIFF
22369: DIFF
22370: ST_TO_ADDR
// if tmp and not sci then
22371: LD_VAR 0 4
22375: PUSH
22376: LD_VAR 0 8
22380: NOT
22381: AND
22382: IFFALSE 22451
// begin sort := SortBySkill ( tmp , 4 ) ;
22384: LD_ADDR_VAR 0 9
22388: PUSH
22389: LD_VAR 0 4
22393: PPUSH
22394: LD_INT 4
22396: PPUSH
22397: CALL 84855 0 2
22401: ST_TO_ADDR
// if sort then
22402: LD_VAR 0 9
22406: IFFALSE 22422
// p := sort [ 1 ] ;
22408: LD_ADDR_VAR 0 11
22412: PUSH
22413: LD_VAR 0 9
22417: PUSH
22418: LD_INT 1
22420: ARRAY
22421: ST_TO_ADDR
// if p then
22422: LD_VAR 0 11
22426: IFFALSE 22451
// result := Replace ( result , 4 , p ) ;
22428: LD_ADDR_VAR 0 2
22432: PUSH
22433: LD_VAR 0 2
22437: PPUSH
22438: LD_INT 4
22440: PPUSH
22441: LD_VAR 0 11
22445: PPUSH
22446: CALL_OW 1
22450: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
22451: LD_ADDR_VAR 0 4
22455: PUSH
22456: LD_VAR 0 4
22460: PUSH
22461: LD_VAR 0 7
22465: DIFF
22466: ST_TO_ADDR
// if tmp and mech < 6 then
22467: LD_VAR 0 4
22471: PUSH
22472: LD_VAR 0 7
22476: PUSH
22477: LD_INT 6
22479: LESS
22480: AND
22481: IFFALSE 22640
// begin sort := SortBySkill ( tmp , 3 ) ;
22483: LD_ADDR_VAR 0 9
22487: PUSH
22488: LD_VAR 0 4
22492: PPUSH
22493: LD_INT 3
22495: PPUSH
22496: CALL 84855 0 2
22500: ST_TO_ADDR
// p := [ ] ;
22501: LD_ADDR_VAR 0 11
22505: PUSH
22506: EMPTY
22507: ST_TO_ADDR
// if sort then
22508: LD_VAR 0 9
22512: IFFALSE 22611
// for i = 1 to 6 - mech do
22514: LD_ADDR_VAR 0 3
22518: PUSH
22519: DOUBLE
22520: LD_INT 1
22522: DEC
22523: ST_TO_ADDR
22524: LD_INT 6
22526: PUSH
22527: LD_VAR 0 7
22531: MINUS
22532: PUSH
22533: FOR_TO
22534: IFFALSE 22609
// begin if i = sort then
22536: LD_VAR 0 3
22540: PUSH
22541: LD_VAR 0 9
22545: EQUAL
22546: IFFALSE 22550
// break ;
22548: GO 22609
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22550: LD_ADDR_VAR 0 11
22554: PUSH
22555: LD_VAR 0 11
22559: PPUSH
22560: LD_VAR 0 11
22564: PUSH
22565: LD_INT 1
22567: PLUS
22568: PPUSH
22569: LD_VAR 0 9
22573: PUSH
22574: LD_VAR 0 3
22578: ARRAY
22579: PPUSH
22580: CALL_OW 2
22584: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22585: LD_ADDR_VAR 0 4
22589: PUSH
22590: LD_VAR 0 4
22594: PUSH
22595: LD_VAR 0 9
22599: PUSH
22600: LD_VAR 0 3
22604: ARRAY
22605: DIFF
22606: ST_TO_ADDR
// end ;
22607: GO 22533
22609: POP
22610: POP
// if p then
22611: LD_VAR 0 11
22615: IFFALSE 22640
// result := Replace ( result , 3 , p ) ;
22617: LD_ADDR_VAR 0 2
22621: PUSH
22622: LD_VAR 0 2
22626: PPUSH
22627: LD_INT 3
22629: PPUSH
22630: LD_VAR 0 11
22634: PPUSH
22635: CALL_OW 1
22639: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
22640: LD_ADDR_VAR 0 4
22644: PUSH
22645: LD_VAR 0 4
22649: PUSH
22650: LD_VAR 0 6
22654: DIFF
22655: ST_TO_ADDR
// if tmp and eng < 6 then
22656: LD_VAR 0 4
22660: PUSH
22661: LD_VAR 0 6
22665: PUSH
22666: LD_INT 6
22668: LESS
22669: AND
22670: IFFALSE 22829
// begin sort := SortBySkill ( tmp , 2 ) ;
22672: LD_ADDR_VAR 0 9
22676: PUSH
22677: LD_VAR 0 4
22681: PPUSH
22682: LD_INT 2
22684: PPUSH
22685: CALL 84855 0 2
22689: ST_TO_ADDR
// p := [ ] ;
22690: LD_ADDR_VAR 0 11
22694: PUSH
22695: EMPTY
22696: ST_TO_ADDR
// if sort then
22697: LD_VAR 0 9
22701: IFFALSE 22800
// for i = 1 to 6 - eng do
22703: LD_ADDR_VAR 0 3
22707: PUSH
22708: DOUBLE
22709: LD_INT 1
22711: DEC
22712: ST_TO_ADDR
22713: LD_INT 6
22715: PUSH
22716: LD_VAR 0 6
22720: MINUS
22721: PUSH
22722: FOR_TO
22723: IFFALSE 22798
// begin if i = sort then
22725: LD_VAR 0 3
22729: PUSH
22730: LD_VAR 0 9
22734: EQUAL
22735: IFFALSE 22739
// break ;
22737: GO 22798
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22739: LD_ADDR_VAR 0 11
22743: PUSH
22744: LD_VAR 0 11
22748: PPUSH
22749: LD_VAR 0 11
22753: PUSH
22754: LD_INT 1
22756: PLUS
22757: PPUSH
22758: LD_VAR 0 9
22762: PUSH
22763: LD_VAR 0 3
22767: ARRAY
22768: PPUSH
22769: CALL_OW 2
22773: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22774: LD_ADDR_VAR 0 4
22778: PUSH
22779: LD_VAR 0 4
22783: PUSH
22784: LD_VAR 0 9
22788: PUSH
22789: LD_VAR 0 3
22793: ARRAY
22794: DIFF
22795: ST_TO_ADDR
// end ;
22796: GO 22722
22798: POP
22799: POP
// if p then
22800: LD_VAR 0 11
22804: IFFALSE 22829
// result := Replace ( result , 2 , p ) ;
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_VAR 0 2
22815: PPUSH
22816: LD_INT 2
22818: PPUSH
22819: LD_VAR 0 11
22823: PPUSH
22824: CALL_OW 1
22828: ST_TO_ADDR
// end ; exit ;
22829: GO 23501
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
22831: LD_EXP 76
22835: PUSH
22836: LD_EXP 75
22840: PUSH
22841: LD_VAR 0 1
22845: ARRAY
22846: ARRAY
22847: NOT
22848: PUSH
22849: LD_EXP 49
22853: PUSH
22854: LD_VAR 0 1
22858: ARRAY
22859: PPUSH
22860: LD_INT 30
22862: PUSH
22863: LD_INT 3
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PPUSH
22870: CALL_OW 72
22874: AND
22875: PUSH
22876: LD_EXP 54
22880: PUSH
22881: LD_VAR 0 1
22885: ARRAY
22886: NOT
22887: AND
22888: IFFALSE 23501
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
22890: LD_ADDR_EXP 91
22894: PUSH
22895: LD_EXP 91
22899: PPUSH
22900: LD_VAR 0 1
22904: PPUSH
22905: LD_INT 6
22907: PPUSH
22908: CALL_OW 1
22912: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22913: LD_ADDR_VAR 0 2
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 0
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: ST_TO_ADDR
// if sci >= 1 then
22936: LD_VAR 0 8
22940: PUSH
22941: LD_INT 1
22943: GREATEREQUAL
22944: IFFALSE 22966
// tmp := tmp diff sci [ 1 ] ;
22946: LD_ADDR_VAR 0 4
22950: PUSH
22951: LD_VAR 0 4
22955: PUSH
22956: LD_VAR 0 8
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: DIFF
22965: ST_TO_ADDR
// if tmp and not sci then
22966: LD_VAR 0 4
22970: PUSH
22971: LD_VAR 0 8
22975: NOT
22976: AND
22977: IFFALSE 23046
// begin sort := SortBySkill ( tmp , 4 ) ;
22979: LD_ADDR_VAR 0 9
22983: PUSH
22984: LD_VAR 0 4
22988: PPUSH
22989: LD_INT 4
22991: PPUSH
22992: CALL 84855 0 2
22996: ST_TO_ADDR
// if sort then
22997: LD_VAR 0 9
23001: IFFALSE 23017
// p := sort [ 1 ] ;
23003: LD_ADDR_VAR 0 11
23007: PUSH
23008: LD_VAR 0 9
23012: PUSH
23013: LD_INT 1
23015: ARRAY
23016: ST_TO_ADDR
// if p then
23017: LD_VAR 0 11
23021: IFFALSE 23046
// result := Replace ( result , 4 , p ) ;
23023: LD_ADDR_VAR 0 2
23027: PUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: LD_INT 4
23035: PPUSH
23036: LD_VAR 0 11
23040: PPUSH
23041: CALL_OW 1
23045: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23046: LD_ADDR_VAR 0 4
23050: PUSH
23051: LD_VAR 0 4
23055: PUSH
23056: LD_VAR 0 7
23060: DIFF
23061: ST_TO_ADDR
// if tmp and mech < 6 then
23062: LD_VAR 0 4
23066: PUSH
23067: LD_VAR 0 7
23071: PUSH
23072: LD_INT 6
23074: LESS
23075: AND
23076: IFFALSE 23235
// begin sort := SortBySkill ( tmp , 3 ) ;
23078: LD_ADDR_VAR 0 9
23082: PUSH
23083: LD_VAR 0 4
23087: PPUSH
23088: LD_INT 3
23090: PPUSH
23091: CALL 84855 0 2
23095: ST_TO_ADDR
// p := [ ] ;
23096: LD_ADDR_VAR 0 11
23100: PUSH
23101: EMPTY
23102: ST_TO_ADDR
// if sort then
23103: LD_VAR 0 9
23107: IFFALSE 23206
// for i = 1 to 6 - mech do
23109: LD_ADDR_VAR 0 3
23113: PUSH
23114: DOUBLE
23115: LD_INT 1
23117: DEC
23118: ST_TO_ADDR
23119: LD_INT 6
23121: PUSH
23122: LD_VAR 0 7
23126: MINUS
23127: PUSH
23128: FOR_TO
23129: IFFALSE 23204
// begin if i = sort then
23131: LD_VAR 0 3
23135: PUSH
23136: LD_VAR 0 9
23140: EQUAL
23141: IFFALSE 23145
// break ;
23143: GO 23204
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23145: LD_ADDR_VAR 0 11
23149: PUSH
23150: LD_VAR 0 11
23154: PPUSH
23155: LD_VAR 0 11
23159: PUSH
23160: LD_INT 1
23162: PLUS
23163: PPUSH
23164: LD_VAR 0 9
23168: PUSH
23169: LD_VAR 0 3
23173: ARRAY
23174: PPUSH
23175: CALL_OW 2
23179: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23180: LD_ADDR_VAR 0 4
23184: PUSH
23185: LD_VAR 0 4
23189: PUSH
23190: LD_VAR 0 9
23194: PUSH
23195: LD_VAR 0 3
23199: ARRAY
23200: DIFF
23201: ST_TO_ADDR
// end ;
23202: GO 23128
23204: POP
23205: POP
// if p then
23206: LD_VAR 0 11
23210: IFFALSE 23235
// result := Replace ( result , 3 , p ) ;
23212: LD_ADDR_VAR 0 2
23216: PUSH
23217: LD_VAR 0 2
23221: PPUSH
23222: LD_INT 3
23224: PPUSH
23225: LD_VAR 0 11
23229: PPUSH
23230: CALL_OW 1
23234: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23235: LD_ADDR_VAR 0 4
23239: PUSH
23240: LD_VAR 0 4
23244: PUSH
23245: LD_VAR 0 6
23249: DIFF
23250: ST_TO_ADDR
// if tmp and eng < 4 then
23251: LD_VAR 0 4
23255: PUSH
23256: LD_VAR 0 6
23260: PUSH
23261: LD_INT 4
23263: LESS
23264: AND
23265: IFFALSE 23426
// begin sort := SortBySkill ( tmp , 2 ) ;
23267: LD_ADDR_VAR 0 9
23271: PUSH
23272: LD_VAR 0 4
23276: PPUSH
23277: LD_INT 2
23279: PPUSH
23280: CALL 84855 0 2
23284: ST_TO_ADDR
// p := [ ] ;
23285: LD_ADDR_VAR 0 11
23289: PUSH
23290: EMPTY
23291: ST_TO_ADDR
// if sort then
23292: LD_VAR 0 9
23296: IFFALSE 23395
// for i = 1 to 4 - eng do
23298: LD_ADDR_VAR 0 3
23302: PUSH
23303: DOUBLE
23304: LD_INT 1
23306: DEC
23307: ST_TO_ADDR
23308: LD_INT 4
23310: PUSH
23311: LD_VAR 0 6
23315: MINUS
23316: PUSH
23317: FOR_TO
23318: IFFALSE 23393
// begin if i = sort then
23320: LD_VAR 0 3
23324: PUSH
23325: LD_VAR 0 9
23329: EQUAL
23330: IFFALSE 23334
// break ;
23332: GO 23393
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23334: LD_ADDR_VAR 0 11
23338: PUSH
23339: LD_VAR 0 11
23343: PPUSH
23344: LD_VAR 0 11
23348: PUSH
23349: LD_INT 1
23351: PLUS
23352: PPUSH
23353: LD_VAR 0 9
23357: PUSH
23358: LD_VAR 0 3
23362: ARRAY
23363: PPUSH
23364: CALL_OW 2
23368: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23369: LD_ADDR_VAR 0 4
23373: PUSH
23374: LD_VAR 0 4
23378: PUSH
23379: LD_VAR 0 9
23383: PUSH
23384: LD_VAR 0 3
23388: ARRAY
23389: DIFF
23390: ST_TO_ADDR
// end ;
23391: GO 23317
23393: POP
23394: POP
// if p then
23395: LD_VAR 0 11
23399: IFFALSE 23424
// result := Replace ( result , 2 , p ) ;
23401: LD_ADDR_VAR 0 2
23405: PUSH
23406: LD_VAR 0 2
23410: PPUSH
23411: LD_INT 2
23413: PPUSH
23414: LD_VAR 0 11
23418: PPUSH
23419: CALL_OW 1
23423: ST_TO_ADDR
// end else
23424: GO 23470
// for i = eng downto 5 do
23426: LD_ADDR_VAR 0 3
23430: PUSH
23431: DOUBLE
23432: LD_VAR 0 6
23436: INC
23437: ST_TO_ADDR
23438: LD_INT 5
23440: PUSH
23441: FOR_DOWNTO
23442: IFFALSE 23468
// tmp := tmp union eng [ i ] ;
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: LD_VAR 0 4
23453: PUSH
23454: LD_VAR 0 6
23458: PUSH
23459: LD_VAR 0 3
23463: ARRAY
23464: UNION
23465: ST_TO_ADDR
23466: GO 23441
23468: POP
23469: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
23470: LD_ADDR_VAR 0 2
23474: PUSH
23475: LD_VAR 0 2
23479: PPUSH
23480: LD_INT 1
23482: PPUSH
23483: LD_VAR 0 4
23487: PUSH
23488: LD_VAR 0 5
23492: DIFF
23493: PPUSH
23494: CALL_OW 1
23498: ST_TO_ADDR
// exit ;
23499: GO 23501
// end ; end ;
23501: LD_VAR 0 2
23505: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
23506: LD_INT 0
23508: PPUSH
23509: PPUSH
23510: PPUSH
// if not mc_bases then
23511: LD_EXP 49
23515: NOT
23516: IFFALSE 23520
// exit ;
23518: GO 23626
// for i = 1 to mc_bases do
23520: LD_ADDR_VAR 0 2
23524: PUSH
23525: DOUBLE
23526: LD_INT 1
23528: DEC
23529: ST_TO_ADDR
23530: LD_EXP 49
23534: PUSH
23535: FOR_TO
23536: IFFALSE 23617
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23538: LD_ADDR_VAR 0 3
23542: PUSH
23543: LD_EXP 49
23547: PUSH
23548: LD_VAR 0 2
23552: ARRAY
23553: PPUSH
23554: LD_INT 21
23556: PUSH
23557: LD_INT 3
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: LD_INT 24
23569: PUSH
23570: LD_INT 1000
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PPUSH
23585: CALL_OW 72
23589: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
23590: LD_ADDR_EXP 50
23594: PUSH
23595: LD_EXP 50
23599: PPUSH
23600: LD_VAR 0 2
23604: PPUSH
23605: LD_VAR 0 3
23609: PPUSH
23610: CALL_OW 1
23614: ST_TO_ADDR
// end ;
23615: GO 23535
23617: POP
23618: POP
// RaiseSailEvent ( 101 ) ;
23619: LD_INT 101
23621: PPUSH
23622: CALL_OW 427
// end ;
23626: LD_VAR 0 1
23630: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
23631: LD_INT 0
23633: PPUSH
23634: PPUSH
23635: PPUSH
23636: PPUSH
23637: PPUSH
23638: PPUSH
23639: PPUSH
// if not mc_bases then
23640: LD_EXP 49
23644: NOT
23645: IFFALSE 23649
// exit ;
23647: GO 24184
// for i = 1 to mc_bases do
23649: LD_ADDR_VAR 0 2
23653: PUSH
23654: DOUBLE
23655: LD_INT 1
23657: DEC
23658: ST_TO_ADDR
23659: LD_EXP 49
23663: PUSH
23664: FOR_TO
23665: IFFALSE 24175
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
23667: LD_ADDR_VAR 0 5
23671: PUSH
23672: LD_EXP 49
23676: PUSH
23677: LD_VAR 0 2
23681: ARRAY
23682: PUSH
23683: LD_EXP 78
23687: PUSH
23688: LD_VAR 0 2
23692: ARRAY
23693: UNION
23694: PPUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: PUSH
23708: LD_INT 3
23710: PUSH
23711: LD_INT 54
23713: PUSH
23714: EMPTY
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 3
23723: PUSH
23724: LD_INT 24
23726: PUSH
23727: LD_INT 700
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: LIST
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PPUSH
23747: CALL_OW 72
23751: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
23752: LD_ADDR_VAR 0 6
23756: PUSH
23757: LD_EXP 49
23761: PUSH
23762: LD_VAR 0 2
23766: ARRAY
23767: PPUSH
23768: LD_INT 21
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: LD_INT 54
23786: PUSH
23787: EMPTY
23788: LIST
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 3
23796: PUSH
23797: LD_INT 24
23799: PUSH
23800: LD_INT 250
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PPUSH
23820: CALL_OW 72
23824: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
23825: LD_ADDR_VAR 0 7
23829: PUSH
23830: LD_VAR 0 5
23834: PUSH
23835: LD_VAR 0 6
23839: DIFF
23840: ST_TO_ADDR
// if not need_heal_1 then
23841: LD_VAR 0 6
23845: NOT
23846: IFFALSE 23879
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
23848: LD_ADDR_EXP 52
23852: PUSH
23853: LD_EXP 52
23857: PPUSH
23858: LD_VAR 0 2
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PPUSH
23870: EMPTY
23871: PPUSH
23872: CALL 51287 0 3
23876: ST_TO_ADDR
23877: GO 23911
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
23879: LD_ADDR_EXP 52
23883: PUSH
23884: LD_EXP 52
23888: PPUSH
23889: LD_VAR 0 2
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: LD_VAR 0 6
23905: PPUSH
23906: CALL 51287 0 3
23910: ST_TO_ADDR
// if not need_heal_2 then
23911: LD_VAR 0 7
23915: NOT
23916: IFFALSE 23949
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
23918: LD_ADDR_EXP 52
23922: PUSH
23923: LD_EXP 52
23927: PPUSH
23928: LD_VAR 0 2
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PPUSH
23940: EMPTY
23941: PPUSH
23942: CALL 51287 0 3
23946: ST_TO_ADDR
23947: GO 23981
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
23949: LD_ADDR_EXP 52
23953: PUSH
23954: LD_EXP 52
23958: PPUSH
23959: LD_VAR 0 2
23963: PUSH
23964: LD_INT 2
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PPUSH
23971: LD_VAR 0 7
23975: PPUSH
23976: CALL 51287 0 3
23980: ST_TO_ADDR
// if need_heal_2 then
23981: LD_VAR 0 7
23985: IFFALSE 24157
// for j in need_heal_2 do
23987: LD_ADDR_VAR 0 3
23991: PUSH
23992: LD_VAR 0 7
23996: PUSH
23997: FOR_IN
23998: IFFALSE 24155
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
24000: LD_ADDR_VAR 0 5
24004: PUSH
24005: LD_EXP 49
24009: PUSH
24010: LD_VAR 0 2
24014: ARRAY
24015: PPUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 30
24021: PUSH
24022: LD_INT 6
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PUSH
24029: LD_INT 30
24031: PUSH
24032: LD_INT 7
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 30
24041: PUSH
24042: LD_INT 8
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 30
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 30
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: LD_INT 4
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: PPUSH
24088: CALL_OW 72
24092: ST_TO_ADDR
// if tmp then
24093: LD_VAR 0 5
24097: IFFALSE 24153
// begin k := NearestUnitToUnit ( tmp , j ) ;
24099: LD_ADDR_VAR 0 4
24103: PUSH
24104: LD_VAR 0 5
24108: PPUSH
24109: LD_VAR 0 3
24113: PPUSH
24114: CALL_OW 74
24118: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
24119: LD_VAR 0 3
24123: PPUSH
24124: LD_VAR 0 4
24128: PPUSH
24129: CALL_OW 296
24133: PUSH
24134: LD_INT 7
24136: GREATER
24137: IFFALSE 24153
// ComMoveUnit ( j , k ) ;
24139: LD_VAR 0 3
24143: PPUSH
24144: LD_VAR 0 4
24148: PPUSH
24149: CALL_OW 112
// end ; end ;
24153: GO 23997
24155: POP
24156: POP
// if not need_heal_1 and not need_heal_2 then
24157: LD_VAR 0 6
24161: NOT
24162: PUSH
24163: LD_VAR 0 7
24167: NOT
24168: AND
24169: IFFALSE 24173
// continue ;
24171: GO 23664
// end ;
24173: GO 23664
24175: POP
24176: POP
// RaiseSailEvent ( 102 ) ;
24177: LD_INT 102
24179: PPUSH
24180: CALL_OW 427
// end ;
24184: LD_VAR 0 1
24188: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
24189: LD_INT 0
24191: PPUSH
24192: PPUSH
24193: PPUSH
24194: PPUSH
24195: PPUSH
// if not mc_bases then
24196: LD_EXP 49
24200: NOT
24201: IFFALSE 24205
// exit ;
24203: GO 24590
// for i = 1 to mc_bases do
24205: LD_ADDR_VAR 0 2
24209: PUSH
24210: DOUBLE
24211: LD_INT 1
24213: DEC
24214: ST_TO_ADDR
24215: LD_EXP 49
24219: PUSH
24220: FOR_TO
24221: IFFALSE 24588
// begin if not mc_building_need_repair [ i ] then
24223: LD_EXP 50
24227: PUSH
24228: LD_VAR 0 2
24232: ARRAY
24233: NOT
24234: IFFALSE 24272
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24236: LD_ADDR_EXP 51
24240: PUSH
24241: LD_EXP 51
24245: PPUSH
24246: LD_VAR 0 2
24250: PPUSH
24251: EMPTY
24252: PPUSH
24253: CALL_OW 1
24257: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 101
24265: PPUSH
24266: CALL 19685 0 2
// continue ;
24270: GO 24220
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
24272: LD_ADDR_EXP 55
24276: PUSH
24277: LD_EXP 55
24281: PPUSH
24282: LD_VAR 0 2
24286: PPUSH
24287: EMPTY
24288: PPUSH
24289: CALL_OW 1
24293: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24294: LD_VAR 0 2
24298: PPUSH
24299: LD_INT 103
24301: PPUSH
24302: CALL 19685 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
24306: LD_ADDR_VAR 0 5
24310: PUSH
24311: LD_EXP 49
24315: PUSH
24316: LD_VAR 0 2
24320: ARRAY
24321: PUSH
24322: LD_EXP 78
24326: PUSH
24327: LD_VAR 0 2
24331: ARRAY
24332: UNION
24333: PPUSH
24334: LD_INT 2
24336: PUSH
24337: LD_INT 25
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 25
24349: PUSH
24350: LD_INT 16
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: PUSH
24362: EMPTY
24363: LIST
24364: PPUSH
24365: CALL_OW 72
24369: ST_TO_ADDR
// if not tmp then
24370: LD_VAR 0 5
24374: NOT
24375: IFFALSE 24379
// continue ;
24377: GO 24220
// for j in tmp do
24379: LD_ADDR_VAR 0 3
24383: PUSH
24384: LD_VAR 0 5
24388: PUSH
24389: FOR_IN
24390: IFFALSE 24584
// begin if mc_need_heal [ i ] then
24392: LD_EXP 52
24396: PUSH
24397: LD_VAR 0 2
24401: ARRAY
24402: IFFALSE 24450
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
24404: LD_VAR 0 3
24408: PUSH
24409: LD_EXP 52
24413: PUSH
24414: LD_VAR 0 2
24418: ARRAY
24419: PUSH
24420: LD_INT 1
24422: ARRAY
24423: IN
24424: PUSH
24425: LD_VAR 0 3
24429: PUSH
24430: LD_EXP 52
24434: PUSH
24435: LD_VAR 0 2
24439: ARRAY
24440: PUSH
24441: LD_INT 2
24443: ARRAY
24444: IN
24445: OR
24446: IFFALSE 24450
// continue ;
24448: GO 24389
// if IsInUnit ( j ) then
24450: LD_VAR 0 3
24454: PPUSH
24455: CALL_OW 310
24459: IFFALSE 24470
// ComExitBuilding ( j ) ;
24461: LD_VAR 0 3
24465: PPUSH
24466: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
24470: LD_VAR 0 3
24474: PUSH
24475: LD_EXP 51
24479: PUSH
24480: LD_VAR 0 2
24484: ARRAY
24485: IN
24486: NOT
24487: IFFALSE 24545
// begin SetTag ( j , 101 ) ;
24489: LD_VAR 0 3
24493: PPUSH
24494: LD_INT 101
24496: PPUSH
24497: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
24501: LD_ADDR_EXP 51
24505: PUSH
24506: LD_EXP 51
24510: PPUSH
24511: LD_VAR 0 2
24515: PUSH
24516: LD_EXP 51
24520: PUSH
24521: LD_VAR 0 2
24525: ARRAY
24526: PUSH
24527: LD_INT 1
24529: PLUS
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PPUSH
24535: LD_VAR 0 3
24539: PPUSH
24540: CALL 51287 0 3
24544: ST_TO_ADDR
// end ; Wait ( 3 ) ;
24545: LD_INT 3
24547: PPUSH
24548: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
24552: LD_VAR 0 3
24556: PPUSH
24557: LD_EXP 50
24561: PUSH
24562: LD_VAR 0 2
24566: ARRAY
24567: PPUSH
24568: LD_VAR 0 3
24572: PPUSH
24573: CALL_OW 74
24577: PPUSH
24578: CALL_OW 130
// end ;
24582: GO 24389
24584: POP
24585: POP
// end ;
24586: GO 24220
24588: POP
24589: POP
// end ;
24590: LD_VAR 0 1
24594: RET
// export function MC_Heal ; var i , j , tmp ; begin
24595: LD_INT 0
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
// if not mc_bases then
24601: LD_EXP 49
24605: NOT
24606: IFFALSE 24610
// exit ;
24608: GO 25012
// for i = 1 to mc_bases do
24610: LD_ADDR_VAR 0 2
24614: PUSH
24615: DOUBLE
24616: LD_INT 1
24618: DEC
24619: ST_TO_ADDR
24620: LD_EXP 49
24624: PUSH
24625: FOR_TO
24626: IFFALSE 25010
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
24628: LD_EXP 52
24632: PUSH
24633: LD_VAR 0 2
24637: ARRAY
24638: PUSH
24639: LD_INT 1
24641: ARRAY
24642: NOT
24643: PUSH
24644: LD_EXP 52
24648: PUSH
24649: LD_VAR 0 2
24653: ARRAY
24654: PUSH
24655: LD_INT 2
24657: ARRAY
24658: NOT
24659: AND
24660: IFFALSE 24698
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
24662: LD_ADDR_EXP 53
24666: PUSH
24667: LD_EXP 53
24671: PPUSH
24672: LD_VAR 0 2
24676: PPUSH
24677: EMPTY
24678: PPUSH
24679: CALL_OW 1
24683: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
24684: LD_VAR 0 2
24688: PPUSH
24689: LD_INT 102
24691: PPUSH
24692: CALL 19685 0 2
// continue ;
24696: GO 24625
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
24698: LD_ADDR_VAR 0 4
24702: PUSH
24703: LD_EXP 49
24707: PUSH
24708: LD_VAR 0 2
24712: ARRAY
24713: PPUSH
24714: LD_INT 25
24716: PUSH
24717: LD_INT 4
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PPUSH
24724: CALL_OW 72
24728: ST_TO_ADDR
// if not tmp then
24729: LD_VAR 0 4
24733: NOT
24734: IFFALSE 24738
// continue ;
24736: GO 24625
// if mc_taming [ i ] then
24738: LD_EXP 80
24742: PUSH
24743: LD_VAR 0 2
24747: ARRAY
24748: IFFALSE 24772
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
24750: LD_ADDR_EXP 80
24754: PUSH
24755: LD_EXP 80
24759: PPUSH
24760: LD_VAR 0 2
24764: PPUSH
24765: EMPTY
24766: PPUSH
24767: CALL_OW 1
24771: ST_TO_ADDR
// for j in tmp do
24772: LD_ADDR_VAR 0 3
24776: PUSH
24777: LD_VAR 0 4
24781: PUSH
24782: FOR_IN
24783: IFFALSE 25006
// begin if IsInUnit ( j ) then
24785: LD_VAR 0 3
24789: PPUSH
24790: CALL_OW 310
24794: IFFALSE 24805
// ComExitBuilding ( j ) ;
24796: LD_VAR 0 3
24800: PPUSH
24801: CALL_OW 122
// if not j in mc_healers [ i ] then
24805: LD_VAR 0 3
24809: PUSH
24810: LD_EXP 53
24814: PUSH
24815: LD_VAR 0 2
24819: ARRAY
24820: IN
24821: NOT
24822: IFFALSE 24868
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
24824: LD_ADDR_EXP 53
24828: PUSH
24829: LD_EXP 53
24833: PPUSH
24834: LD_VAR 0 2
24838: PUSH
24839: LD_EXP 53
24843: PUSH
24844: LD_VAR 0 2
24848: ARRAY
24849: PUSH
24850: LD_INT 1
24852: PLUS
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PPUSH
24858: LD_VAR 0 3
24862: PPUSH
24863: CALL 51287 0 3
24867: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
24868: LD_VAR 0 3
24872: PPUSH
24873: CALL_OW 110
24877: PUSH
24878: LD_INT 102
24880: NONEQUAL
24881: IFFALSE 24895
// SetTag ( j , 102 ) ;
24883: LD_VAR 0 3
24887: PPUSH
24888: LD_INT 102
24890: PPUSH
24891: CALL_OW 109
// Wait ( 3 ) ;
24895: LD_INT 3
24897: PPUSH
24898: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
24902: LD_EXP 52
24906: PUSH
24907: LD_VAR 0 2
24911: ARRAY
24912: PUSH
24913: LD_INT 1
24915: ARRAY
24916: IFFALSE 24948
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
24918: LD_VAR 0 3
24922: PPUSH
24923: LD_EXP 52
24927: PUSH
24928: LD_VAR 0 2
24932: ARRAY
24933: PUSH
24934: LD_INT 1
24936: ARRAY
24937: PUSH
24938: LD_INT 1
24940: ARRAY
24941: PPUSH
24942: CALL_OW 128
24946: GO 25004
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
24948: LD_VAR 0 3
24952: PPUSH
24953: CALL_OW 314
24957: NOT
24958: PUSH
24959: LD_EXP 52
24963: PUSH
24964: LD_VAR 0 2
24968: ARRAY
24969: PUSH
24970: LD_INT 2
24972: ARRAY
24973: AND
24974: IFFALSE 25004
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
24976: LD_VAR 0 3
24980: PPUSH
24981: LD_EXP 52
24985: PUSH
24986: LD_VAR 0 2
24990: ARRAY
24991: PUSH
24992: LD_INT 2
24994: ARRAY
24995: PUSH
24996: LD_INT 1
24998: ARRAY
24999: PPUSH
25000: CALL_OW 128
// end ;
25004: GO 24782
25006: POP
25007: POP
// end ;
25008: GO 24625
25010: POP
25011: POP
// end ;
25012: LD_VAR 0 1
25016: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
25017: LD_INT 0
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
// if not mc_bases then
25024: LD_EXP 49
25028: NOT
25029: IFFALSE 25033
// exit ;
25031: GO 26176
// for i = 1 to mc_bases do
25033: LD_ADDR_VAR 0 2
25037: PUSH
25038: DOUBLE
25039: LD_INT 1
25041: DEC
25042: ST_TO_ADDR
25043: LD_EXP 49
25047: PUSH
25048: FOR_TO
25049: IFFALSE 26174
// begin if mc_scan [ i ] then
25051: LD_EXP 72
25055: PUSH
25056: LD_VAR 0 2
25060: ARRAY
25061: IFFALSE 25065
// continue ;
25063: GO 25048
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
25065: LD_EXP 54
25069: PUSH
25070: LD_VAR 0 2
25074: ARRAY
25075: NOT
25076: PUSH
25077: LD_EXP 56
25081: PUSH
25082: LD_VAR 0 2
25086: ARRAY
25087: NOT
25088: AND
25089: PUSH
25090: LD_EXP 55
25094: PUSH
25095: LD_VAR 0 2
25099: ARRAY
25100: AND
25101: IFFALSE 25139
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
25103: LD_ADDR_EXP 55
25107: PUSH
25108: LD_EXP 55
25112: PPUSH
25113: LD_VAR 0 2
25117: PPUSH
25118: EMPTY
25119: PPUSH
25120: CALL_OW 1
25124: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25125: LD_VAR 0 2
25129: PPUSH
25130: LD_INT 103
25132: PPUSH
25133: CALL 19685 0 2
// continue ;
25137: GO 25048
// end ; if mc_construct_list [ i ] then
25139: LD_EXP 56
25143: PUSH
25144: LD_VAR 0 2
25148: ARRAY
25149: IFFALSE 25369
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25151: LD_ADDR_VAR 0 4
25155: PUSH
25156: LD_EXP 49
25160: PUSH
25161: LD_VAR 0 2
25165: ARRAY
25166: PPUSH
25167: LD_INT 25
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PPUSH
25177: CALL_OW 72
25181: PUSH
25182: LD_EXP 51
25186: PUSH
25187: LD_VAR 0 2
25191: ARRAY
25192: DIFF
25193: ST_TO_ADDR
// if not tmp then
25194: LD_VAR 0 4
25198: NOT
25199: IFFALSE 25203
// continue ;
25201: GO 25048
// for j in tmp do
25203: LD_ADDR_VAR 0 3
25207: PUSH
25208: LD_VAR 0 4
25212: PUSH
25213: FOR_IN
25214: IFFALSE 25365
// begin if not mc_builders [ i ] then
25216: LD_EXP 55
25220: PUSH
25221: LD_VAR 0 2
25225: ARRAY
25226: NOT
25227: IFFALSE 25285
// begin SetTag ( j , 103 ) ;
25229: LD_VAR 0 3
25233: PPUSH
25234: LD_INT 103
25236: PPUSH
25237: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25241: LD_ADDR_EXP 55
25245: PUSH
25246: LD_EXP 55
25250: PPUSH
25251: LD_VAR 0 2
25255: PUSH
25256: LD_EXP 55
25260: PUSH
25261: LD_VAR 0 2
25265: ARRAY
25266: PUSH
25267: LD_INT 1
25269: PLUS
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PPUSH
25275: LD_VAR 0 3
25279: PPUSH
25280: CALL 51287 0 3
25284: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25285: LD_VAR 0 3
25289: PPUSH
25290: CALL_OW 310
25294: IFFALSE 25305
// ComExitBuilding ( j ) ;
25296: LD_VAR 0 3
25300: PPUSH
25301: CALL_OW 122
// wait ( 3 ) ;
25305: LD_INT 3
25307: PPUSH
25308: CALL_OW 67
// if not mc_construct_list [ i ] then
25312: LD_EXP 56
25316: PUSH
25317: LD_VAR 0 2
25321: ARRAY
25322: NOT
25323: IFFALSE 25327
// break ;
25325: GO 25365
// if not HasTask ( j ) then
25327: LD_VAR 0 3
25331: PPUSH
25332: CALL_OW 314
25336: NOT
25337: IFFALSE 25363
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
25339: LD_VAR 0 3
25343: PPUSH
25344: LD_EXP 56
25348: PUSH
25349: LD_VAR 0 2
25353: ARRAY
25354: PUSH
25355: LD_INT 1
25357: ARRAY
25358: PPUSH
25359: CALL 53723 0 2
// end ;
25363: GO 25213
25365: POP
25366: POP
// end else
25367: GO 26172
// if mc_build_list [ i ] then
25369: LD_EXP 54
25373: PUSH
25374: LD_VAR 0 2
25378: ARRAY
25379: IFFALSE 26172
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
25381: LD_ADDR_VAR 0 5
25385: PUSH
25386: LD_EXP 49
25390: PUSH
25391: LD_VAR 0 2
25395: ARRAY
25396: PPUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 30
25402: PUSH
25403: LD_INT 0
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: LD_INT 1
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: PPUSH
25425: CALL_OW 72
25429: ST_TO_ADDR
// if depot then
25430: LD_VAR 0 5
25434: IFFALSE 25452
// depot := depot [ 1 ] else
25436: LD_ADDR_VAR 0 5
25440: PUSH
25441: LD_VAR 0 5
25445: PUSH
25446: LD_INT 1
25448: ARRAY
25449: ST_TO_ADDR
25450: GO 25460
// depot := 0 ;
25452: LD_ADDR_VAR 0 5
25456: PUSH
25457: LD_INT 0
25459: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
25460: LD_EXP 54
25464: PUSH
25465: LD_VAR 0 2
25469: ARRAY
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PUSH
25475: LD_INT 1
25477: ARRAY
25478: PPUSH
25479: CALL 53566 0 1
25483: PUSH
25484: LD_EXP 49
25488: PUSH
25489: LD_VAR 0 2
25493: ARRAY
25494: PPUSH
25495: LD_INT 2
25497: PUSH
25498: LD_INT 30
25500: PUSH
25501: LD_INT 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: PPUSH
25523: CALL_OW 72
25527: NOT
25528: AND
25529: IFFALSE 25634
// begin for j = 1 to mc_build_list [ i ] do
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: DOUBLE
25537: LD_INT 1
25539: DEC
25540: ST_TO_ADDR
25541: LD_EXP 54
25545: PUSH
25546: LD_VAR 0 2
25550: ARRAY
25551: PUSH
25552: FOR_TO
25553: IFFALSE 25632
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
25555: LD_EXP 54
25559: PUSH
25560: LD_VAR 0 2
25564: ARRAY
25565: PUSH
25566: LD_VAR 0 3
25570: ARRAY
25571: PUSH
25572: LD_INT 1
25574: ARRAY
25575: PUSH
25576: LD_INT 2
25578: EQUAL
25579: IFFALSE 25630
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
25581: LD_ADDR_EXP 54
25585: PUSH
25586: LD_EXP 54
25590: PPUSH
25591: LD_VAR 0 2
25595: PPUSH
25596: LD_EXP 54
25600: PUSH
25601: LD_VAR 0 2
25605: ARRAY
25606: PPUSH
25607: LD_VAR 0 3
25611: PPUSH
25612: LD_INT 1
25614: PPUSH
25615: LD_INT 0
25617: PPUSH
25618: CALL 50270 0 4
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
// break ;
25628: GO 25632
// end ;
25630: GO 25552
25632: POP
25633: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
25634: LD_EXP 54
25638: PUSH
25639: LD_VAR 0 2
25643: ARRAY
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PUSH
25653: LD_INT 0
25655: EQUAL
25656: PUSH
25657: LD_VAR 0 5
25661: PUSH
25662: LD_VAR 0 5
25666: PPUSH
25667: LD_EXP 54
25671: PUSH
25672: LD_VAR 0 2
25676: ARRAY
25677: PUSH
25678: LD_INT 1
25680: ARRAY
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: PPUSH
25686: LD_EXP 54
25690: PUSH
25691: LD_VAR 0 2
25695: ARRAY
25696: PUSH
25697: LD_INT 1
25699: ARRAY
25700: PUSH
25701: LD_INT 2
25703: ARRAY
25704: PPUSH
25705: LD_EXP 54
25709: PUSH
25710: LD_VAR 0 2
25714: ARRAY
25715: PUSH
25716: LD_INT 1
25718: ARRAY
25719: PUSH
25720: LD_INT 3
25722: ARRAY
25723: PPUSH
25724: LD_EXP 54
25728: PUSH
25729: LD_VAR 0 2
25733: ARRAY
25734: PUSH
25735: LD_INT 1
25737: ARRAY
25738: PUSH
25739: LD_INT 4
25741: ARRAY
25742: PPUSH
25743: CALL 58075 0 5
25747: AND
25748: OR
25749: IFFALSE 26030
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25751: LD_ADDR_VAR 0 4
25755: PUSH
25756: LD_EXP 49
25760: PUSH
25761: LD_VAR 0 2
25765: ARRAY
25766: PPUSH
25767: LD_INT 25
25769: PUSH
25770: LD_INT 2
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PPUSH
25777: CALL_OW 72
25781: PUSH
25782: LD_EXP 51
25786: PUSH
25787: LD_VAR 0 2
25791: ARRAY
25792: DIFF
25793: ST_TO_ADDR
// if not tmp then
25794: LD_VAR 0 4
25798: NOT
25799: IFFALSE 25803
// continue ;
25801: GO 25048
// for j in tmp do
25803: LD_ADDR_VAR 0 3
25807: PUSH
25808: LD_VAR 0 4
25812: PUSH
25813: FOR_IN
25814: IFFALSE 26026
// begin if not mc_builders [ i ] then
25816: LD_EXP 55
25820: PUSH
25821: LD_VAR 0 2
25825: ARRAY
25826: NOT
25827: IFFALSE 25885
// begin SetTag ( j , 103 ) ;
25829: LD_VAR 0 3
25833: PPUSH
25834: LD_INT 103
25836: PPUSH
25837: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25841: LD_ADDR_EXP 55
25845: PUSH
25846: LD_EXP 55
25850: PPUSH
25851: LD_VAR 0 2
25855: PUSH
25856: LD_EXP 55
25860: PUSH
25861: LD_VAR 0 2
25865: ARRAY
25866: PUSH
25867: LD_INT 1
25869: PLUS
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PPUSH
25875: LD_VAR 0 3
25879: PPUSH
25880: CALL 51287 0 3
25884: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25885: LD_VAR 0 3
25889: PPUSH
25890: CALL_OW 310
25894: IFFALSE 25905
// ComExitBuilding ( j ) ;
25896: LD_VAR 0 3
25900: PPUSH
25901: CALL_OW 122
// wait ( 3 ) ;
25905: LD_INT 3
25907: PPUSH
25908: CALL_OW 67
// if not mc_build_list [ i ] then
25912: LD_EXP 54
25916: PUSH
25917: LD_VAR 0 2
25921: ARRAY
25922: NOT
25923: IFFALSE 25927
// break ;
25925: GO 26026
// if not HasTask ( j ) then
25927: LD_VAR 0 3
25931: PPUSH
25932: CALL_OW 314
25936: NOT
25937: IFFALSE 26024
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
25939: LD_VAR 0 3
25943: PPUSH
25944: LD_EXP 54
25948: PUSH
25949: LD_VAR 0 2
25953: ARRAY
25954: PUSH
25955: LD_INT 1
25957: ARRAY
25958: PUSH
25959: LD_INT 1
25961: ARRAY
25962: PPUSH
25963: LD_EXP 54
25967: PUSH
25968: LD_VAR 0 2
25972: ARRAY
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PUSH
25978: LD_INT 2
25980: ARRAY
25981: PPUSH
25982: LD_EXP 54
25986: PUSH
25987: LD_VAR 0 2
25991: ARRAY
25992: PUSH
25993: LD_INT 1
25995: ARRAY
25996: PUSH
25997: LD_INT 3
25999: ARRAY
26000: PPUSH
26001: LD_EXP 54
26005: PUSH
26006: LD_VAR 0 2
26010: ARRAY
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PUSH
26016: LD_INT 4
26018: ARRAY
26019: PPUSH
26020: CALL_OW 145
// end ;
26024: GO 25813
26026: POP
26027: POP
// end else
26028: GO 26172
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
26030: LD_EXP 49
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PPUSH
26041: LD_EXP 54
26045: PUSH
26046: LD_VAR 0 2
26050: ARRAY
26051: PUSH
26052: LD_INT 1
26054: ARRAY
26055: PUSH
26056: LD_INT 1
26058: ARRAY
26059: PPUSH
26060: LD_EXP 54
26064: PUSH
26065: LD_VAR 0 2
26069: ARRAY
26070: PUSH
26071: LD_INT 1
26073: ARRAY
26074: PUSH
26075: LD_INT 2
26077: ARRAY
26078: PPUSH
26079: LD_EXP 54
26083: PUSH
26084: LD_VAR 0 2
26088: ARRAY
26089: PUSH
26090: LD_INT 1
26092: ARRAY
26093: PUSH
26094: LD_INT 3
26096: ARRAY
26097: PPUSH
26098: LD_EXP 54
26102: PUSH
26103: LD_VAR 0 2
26107: ARRAY
26108: PUSH
26109: LD_INT 1
26111: ARRAY
26112: PUSH
26113: LD_INT 4
26115: ARRAY
26116: PPUSH
26117: CALL 57506 0 5
26121: NOT
26122: IFFALSE 26172
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
26124: LD_ADDR_EXP 54
26128: PUSH
26129: LD_EXP 54
26133: PPUSH
26134: LD_VAR 0 2
26138: PPUSH
26139: LD_EXP 54
26143: PUSH
26144: LD_VAR 0 2
26148: ARRAY
26149: PPUSH
26150: LD_INT 1
26152: PPUSH
26153: LD_INT 1
26155: NEG
26156: PPUSH
26157: LD_INT 0
26159: PPUSH
26160: CALL 50270 0 4
26164: PPUSH
26165: CALL_OW 1
26169: ST_TO_ADDR
// continue ;
26170: GO 25048
// end ; end ; end ;
26172: GO 25048
26174: POP
26175: POP
// end ;
26176: LD_VAR 0 1
26180: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
26181: LD_INT 0
26183: PPUSH
26184: PPUSH
26185: PPUSH
26186: PPUSH
26187: PPUSH
26188: PPUSH
// if not mc_bases then
26189: LD_EXP 49
26193: NOT
26194: IFFALSE 26198
// exit ;
26196: GO 26625
// for i = 1 to mc_bases do
26198: LD_ADDR_VAR 0 2
26202: PUSH
26203: DOUBLE
26204: LD_INT 1
26206: DEC
26207: ST_TO_ADDR
26208: LD_EXP 49
26212: PUSH
26213: FOR_TO
26214: IFFALSE 26623
// begin tmp := mc_build_upgrade [ i ] ;
26216: LD_ADDR_VAR 0 4
26220: PUSH
26221: LD_EXP 81
26225: PUSH
26226: LD_VAR 0 2
26230: ARRAY
26231: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
26232: LD_ADDR_VAR 0 6
26236: PUSH
26237: LD_EXP 82
26241: PUSH
26242: LD_VAR 0 2
26246: ARRAY
26247: PPUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 30
26253: PUSH
26254: LD_INT 6
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 30
26263: PUSH
26264: LD_INT 7
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: PPUSH
26276: CALL_OW 72
26280: ST_TO_ADDR
// if not tmp and not lab then
26281: LD_VAR 0 4
26285: NOT
26286: PUSH
26287: LD_VAR 0 6
26291: NOT
26292: AND
26293: IFFALSE 26297
// continue ;
26295: GO 26213
// if tmp then
26297: LD_VAR 0 4
26301: IFFALSE 26421
// for j in tmp do
26303: LD_ADDR_VAR 0 3
26307: PUSH
26308: LD_VAR 0 4
26312: PUSH
26313: FOR_IN
26314: IFFALSE 26419
// begin if UpgradeCost ( j ) then
26316: LD_VAR 0 3
26320: PPUSH
26321: CALL 57166 0 1
26325: IFFALSE 26417
// begin ComUpgrade ( j ) ;
26327: LD_VAR 0 3
26331: PPUSH
26332: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
26336: LD_ADDR_EXP 81
26340: PUSH
26341: LD_EXP 81
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: LD_EXP 81
26355: PUSH
26356: LD_VAR 0 2
26360: ARRAY
26361: PUSH
26362: LD_VAR 0 3
26366: DIFF
26367: PPUSH
26368: CALL_OW 1
26372: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26373: LD_ADDR_EXP 56
26377: PUSH
26378: LD_EXP 56
26382: PPUSH
26383: LD_VAR 0 2
26387: PUSH
26388: LD_EXP 56
26392: PUSH
26393: LD_VAR 0 2
26397: ARRAY
26398: PUSH
26399: LD_INT 1
26401: PLUS
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PPUSH
26407: LD_VAR 0 3
26411: PPUSH
26412: CALL 51287 0 3
26416: ST_TO_ADDR
// end ; end ;
26417: GO 26313
26419: POP
26420: POP
// if not lab or not mc_lab_upgrade [ i ] then
26421: LD_VAR 0 6
26425: NOT
26426: PUSH
26427: LD_EXP 83
26431: PUSH
26432: LD_VAR 0 2
26436: ARRAY
26437: NOT
26438: OR
26439: IFFALSE 26443
// continue ;
26441: GO 26213
// for j in lab do
26443: LD_ADDR_VAR 0 3
26447: PUSH
26448: LD_VAR 0 6
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26619
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
26456: LD_VAR 0 3
26460: PPUSH
26461: CALL_OW 266
26465: PUSH
26466: LD_INT 6
26468: PUSH
26469: LD_INT 7
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: IN
26476: PUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: CALL_OW 461
26486: PUSH
26487: LD_INT 1
26489: NONEQUAL
26490: AND
26491: IFFALSE 26617
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
26493: LD_VAR 0 3
26497: PPUSH
26498: LD_EXP 83
26502: PUSH
26503: LD_VAR 0 2
26507: ARRAY
26508: PUSH
26509: LD_INT 1
26511: ARRAY
26512: PPUSH
26513: CALL 57371 0 2
26517: IFFALSE 26617
// begin ComCancel ( j ) ;
26519: LD_VAR 0 3
26523: PPUSH
26524: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
26528: LD_VAR 0 3
26532: PPUSH
26533: LD_EXP 83
26537: PUSH
26538: LD_VAR 0 2
26542: ARRAY
26543: PUSH
26544: LD_INT 1
26546: ARRAY
26547: PPUSH
26548: CALL_OW 207
// if not j in mc_construct_list [ i ] then
26552: LD_VAR 0 3
26556: PUSH
26557: LD_EXP 56
26561: PUSH
26562: LD_VAR 0 2
26566: ARRAY
26567: IN
26568: NOT
26569: IFFALSE 26615
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26571: LD_ADDR_EXP 56
26575: PUSH
26576: LD_EXP 56
26580: PPUSH
26581: LD_VAR 0 2
26585: PUSH
26586: LD_EXP 56
26590: PUSH
26591: LD_VAR 0 2
26595: ARRAY
26596: PUSH
26597: LD_INT 1
26599: PLUS
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: LD_VAR 0 3
26609: PPUSH
26610: CALL 51287 0 3
26614: ST_TO_ADDR
// break ;
26615: GO 26619
// end ; end ; end ;
26617: GO 26453
26619: POP
26620: POP
// end ;
26621: GO 26213
26623: POP
26624: POP
// end ;
26625: LD_VAR 0 1
26629: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
26630: LD_INT 0
26632: PPUSH
26633: PPUSH
26634: PPUSH
26635: PPUSH
26636: PPUSH
26637: PPUSH
26638: PPUSH
26639: PPUSH
26640: PPUSH
// if not mc_bases then
26641: LD_EXP 49
26645: NOT
26646: IFFALSE 26650
// exit ;
26648: GO 27044
// for i = 1 to mc_bases do
26650: LD_ADDR_VAR 0 2
26654: PUSH
26655: DOUBLE
26656: LD_INT 1
26658: DEC
26659: ST_TO_ADDR
26660: LD_EXP 49
26664: PUSH
26665: FOR_TO
26666: IFFALSE 27042
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
26668: LD_EXP 57
26672: PUSH
26673: LD_VAR 0 2
26677: ARRAY
26678: NOT
26679: PUSH
26680: LD_EXP 49
26684: PUSH
26685: LD_VAR 0 2
26689: ARRAY
26690: PPUSH
26691: LD_INT 30
26693: PUSH
26694: LD_INT 3
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PPUSH
26701: CALL_OW 72
26705: NOT
26706: OR
26707: IFFALSE 26711
// continue ;
26709: GO 26665
// busy := false ;
26711: LD_ADDR_VAR 0 8
26715: PUSH
26716: LD_INT 0
26718: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26719: LD_ADDR_VAR 0 4
26723: PUSH
26724: LD_EXP 49
26728: PUSH
26729: LD_VAR 0 2
26733: ARRAY
26734: PPUSH
26735: LD_INT 30
26737: PUSH
26738: LD_INT 3
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PPUSH
26745: CALL_OW 72
26749: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
26750: LD_ADDR_VAR 0 6
26754: PUSH
26755: LD_EXP 57
26759: PUSH
26760: LD_VAR 0 2
26764: ARRAY
26765: PPUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 30
26771: PUSH
26772: LD_INT 32
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 30
26781: PUSH
26782: LD_INT 33
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 72
26798: ST_TO_ADDR
// if not t then
26799: LD_VAR 0 6
26803: NOT
26804: IFFALSE 26808
// continue ;
26806: GO 26665
// for j in tmp do
26808: LD_ADDR_VAR 0 3
26812: PUSH
26813: LD_VAR 0 4
26817: PUSH
26818: FOR_IN
26819: IFFALSE 26849
// if not BuildingStatus ( j ) = bs_idle then
26821: LD_VAR 0 3
26825: PPUSH
26826: CALL_OW 461
26830: PUSH
26831: LD_INT 2
26833: EQUAL
26834: NOT
26835: IFFALSE 26847
// begin busy := true ;
26837: LD_ADDR_VAR 0 8
26841: PUSH
26842: LD_INT 1
26844: ST_TO_ADDR
// break ;
26845: GO 26849
// end ;
26847: GO 26818
26849: POP
26850: POP
// if busy then
26851: LD_VAR 0 8
26855: IFFALSE 26859
// continue ;
26857: GO 26665
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
26859: LD_ADDR_VAR 0 7
26863: PUSH
26864: LD_VAR 0 6
26868: PPUSH
26869: LD_INT 35
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PPUSH
26879: CALL_OW 72
26883: ST_TO_ADDR
// if tw then
26884: LD_VAR 0 7
26888: IFFALSE 26954
// begin tw := tw [ 1 ] ;
26890: LD_ADDR_VAR 0 7
26894: PUSH
26895: LD_VAR 0 7
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw ) ;
26904: LD_ADDR_VAR 0 9
26908: PUSH
26909: LD_VAR 0 7
26913: PPUSH
26914: CALL 55730 0 1
26918: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
26919: LD_EXP 88
26923: PUSH
26924: LD_VAR 0 2
26928: ARRAY
26929: IFFALSE 26952
// if not weapon in mc_allowed_tower_weapons [ i ] then
26931: LD_VAR 0 9
26935: PUSH
26936: LD_EXP 88
26940: PUSH
26941: LD_VAR 0 2
26945: ARRAY
26946: IN
26947: NOT
26948: IFFALSE 26952
// continue ;
26950: GO 26665
// end else
26952: GO 27017
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
26954: LD_ADDR_VAR 0 5
26958: PUSH
26959: LD_EXP 57
26963: PUSH
26964: LD_VAR 0 2
26968: ARRAY
26969: PPUSH
26970: LD_VAR 0 4
26974: PPUSH
26975: CALL 85779 0 2
26979: ST_TO_ADDR
// if not tmp2 then
26980: LD_VAR 0 5
26984: NOT
26985: IFFALSE 26989
// continue ;
26987: GO 26665
// tw := tmp2 [ 1 ] ;
26989: LD_ADDR_VAR 0 7
26993: PUSH
26994: LD_VAR 0 5
26998: PUSH
26999: LD_INT 1
27001: ARRAY
27002: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
27003: LD_ADDR_VAR 0 9
27007: PUSH
27008: LD_VAR 0 5
27012: PUSH
27013: LD_INT 2
27015: ARRAY
27016: ST_TO_ADDR
// end ; if not weapon then
27017: LD_VAR 0 9
27021: NOT
27022: IFFALSE 27026
// continue ;
27024: GO 26665
// ComPlaceWeapon ( tw , weapon ) ;
27026: LD_VAR 0 7
27030: PPUSH
27031: LD_VAR 0 9
27035: PPUSH
27036: CALL_OW 148
// end ;
27040: GO 26665
27042: POP
27043: POP
// end ;
27044: LD_VAR 0 1
27048: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
27049: LD_INT 0
27051: PPUSH
27052: PPUSH
27053: PPUSH
27054: PPUSH
27055: PPUSH
27056: PPUSH
// if not mc_bases then
27057: LD_EXP 49
27061: NOT
27062: IFFALSE 27066
// exit ;
27064: GO 28078
// for i = 1 to mc_bases do
27066: LD_ADDR_VAR 0 2
27070: PUSH
27071: DOUBLE
27072: LD_INT 1
27074: DEC
27075: ST_TO_ADDR
27076: LD_EXP 49
27080: PUSH
27081: FOR_TO
27082: IFFALSE 28076
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
27084: LD_EXP 62
27088: PUSH
27089: LD_VAR 0 2
27093: ARRAY
27094: NOT
27095: PUSH
27096: LD_EXP 62
27100: PUSH
27101: LD_VAR 0 2
27105: ARRAY
27106: PUSH
27107: LD_EXP 63
27111: PUSH
27112: LD_VAR 0 2
27116: ARRAY
27117: EQUAL
27118: OR
27119: IFFALSE 27123
// continue ;
27121: GO 27081
// if mc_miners [ i ] then
27123: LD_EXP 63
27127: PUSH
27128: LD_VAR 0 2
27132: ARRAY
27133: IFFALSE 27763
// begin k := 1 ;
27135: LD_ADDR_VAR 0 4
27139: PUSH
27140: LD_INT 1
27142: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: DOUBLE
27149: LD_EXP 63
27153: PUSH
27154: LD_VAR 0 2
27158: ARRAY
27159: INC
27160: ST_TO_ADDR
27161: LD_INT 1
27163: PUSH
27164: FOR_DOWNTO
27165: IFFALSE 27761
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
27167: LD_EXP 63
27171: PUSH
27172: LD_VAR 0 2
27176: ARRAY
27177: PUSH
27178: LD_VAR 0 3
27182: ARRAY
27183: PPUSH
27184: CALL_OW 301
27188: PUSH
27189: LD_EXP 63
27193: PUSH
27194: LD_VAR 0 2
27198: ARRAY
27199: PUSH
27200: LD_VAR 0 3
27204: ARRAY
27205: PPUSH
27206: CALL_OW 257
27210: PUSH
27211: LD_INT 1
27213: NONEQUAL
27214: OR
27215: IFFALSE 27278
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
27217: LD_ADDR_VAR 0 5
27221: PUSH
27222: LD_EXP 63
27226: PUSH
27227: LD_VAR 0 2
27231: ARRAY
27232: PUSH
27233: LD_EXP 63
27237: PUSH
27238: LD_VAR 0 2
27242: ARRAY
27243: PUSH
27244: LD_VAR 0 3
27248: ARRAY
27249: DIFF
27250: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
27251: LD_ADDR_EXP 63
27255: PUSH
27256: LD_EXP 63
27260: PPUSH
27261: LD_VAR 0 2
27265: PPUSH
27266: LD_VAR 0 5
27270: PPUSH
27271: CALL_OW 1
27275: ST_TO_ADDR
// continue ;
27276: GO 27164
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
27278: LD_EXP 63
27282: PUSH
27283: LD_VAR 0 2
27287: ARRAY
27288: PUSH
27289: LD_VAR 0 3
27293: ARRAY
27294: PPUSH
27295: CALL 50788 0 1
27299: PUSH
27300: LD_EXP 63
27304: PUSH
27305: LD_VAR 0 2
27309: ARRAY
27310: PUSH
27311: LD_VAR 0 3
27315: ARRAY
27316: PPUSH
27317: CALL_OW 255
27321: PPUSH
27322: LD_EXP 62
27326: PUSH
27327: LD_VAR 0 2
27331: ARRAY
27332: PUSH
27333: LD_VAR 0 4
27337: ARRAY
27338: PUSH
27339: LD_INT 1
27341: ARRAY
27342: PPUSH
27343: LD_EXP 62
27347: PUSH
27348: LD_VAR 0 2
27352: ARRAY
27353: PUSH
27354: LD_VAR 0 4
27358: ARRAY
27359: PUSH
27360: LD_INT 2
27362: ARRAY
27363: PPUSH
27364: LD_INT 15
27366: PPUSH
27367: CALL 51781 0 4
27371: PUSH
27372: LD_INT 4
27374: ARRAY
27375: PUSH
27376: LD_EXP 63
27380: PUSH
27381: LD_VAR 0 2
27385: ARRAY
27386: PUSH
27387: LD_VAR 0 3
27391: ARRAY
27392: PPUSH
27393: LD_INT 10
27395: PPUSH
27396: CALL 53478 0 2
27400: PUSH
27401: LD_INT 4
27403: ARRAY
27404: OR
27405: AND
27406: IFFALSE 27429
// ComStop ( mc_miners [ i ] [ j ] ) ;
27408: LD_EXP 63
27412: PUSH
27413: LD_VAR 0 2
27417: ARRAY
27418: PUSH
27419: LD_VAR 0 3
27423: ARRAY
27424: PPUSH
27425: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
27429: LD_EXP 63
27433: PUSH
27434: LD_VAR 0 2
27438: ARRAY
27439: PUSH
27440: LD_VAR 0 3
27444: ARRAY
27445: PPUSH
27446: CALL_OW 257
27450: PUSH
27451: LD_INT 1
27453: EQUAL
27454: PUSH
27455: LD_EXP 63
27459: PUSH
27460: LD_VAR 0 2
27464: ARRAY
27465: PUSH
27466: LD_VAR 0 3
27470: ARRAY
27471: PPUSH
27472: CALL_OW 459
27476: NOT
27477: AND
27478: PUSH
27479: LD_EXP 63
27483: PUSH
27484: LD_VAR 0 2
27488: ARRAY
27489: PUSH
27490: LD_VAR 0 3
27494: ARRAY
27495: PPUSH
27496: CALL_OW 255
27500: PPUSH
27501: LD_EXP 62
27505: PUSH
27506: LD_VAR 0 2
27510: ARRAY
27511: PUSH
27512: LD_VAR 0 4
27516: ARRAY
27517: PUSH
27518: LD_INT 1
27520: ARRAY
27521: PPUSH
27522: LD_EXP 62
27526: PUSH
27527: LD_VAR 0 2
27531: ARRAY
27532: PUSH
27533: LD_VAR 0 4
27537: ARRAY
27538: PUSH
27539: LD_INT 2
27541: ARRAY
27542: PPUSH
27543: LD_INT 15
27545: PPUSH
27546: CALL 51781 0 4
27550: PUSH
27551: LD_INT 4
27553: ARRAY
27554: PUSH
27555: LD_INT 0
27557: EQUAL
27558: AND
27559: PUSH
27560: LD_EXP 63
27564: PUSH
27565: LD_VAR 0 2
27569: ARRAY
27570: PUSH
27571: LD_VAR 0 3
27575: ARRAY
27576: PPUSH
27577: CALL_OW 314
27581: NOT
27582: AND
27583: IFFALSE 27759
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
27585: LD_EXP 63
27589: PUSH
27590: LD_VAR 0 2
27594: ARRAY
27595: PUSH
27596: LD_VAR 0 3
27600: ARRAY
27601: PPUSH
27602: CALL_OW 310
27606: IFFALSE 27629
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
27608: LD_EXP 63
27612: PUSH
27613: LD_VAR 0 2
27617: ARRAY
27618: PUSH
27619: LD_VAR 0 3
27623: ARRAY
27624: PPUSH
27625: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
27629: LD_EXP 63
27633: PUSH
27634: LD_VAR 0 2
27638: ARRAY
27639: PUSH
27640: LD_VAR 0 3
27644: ARRAY
27645: PPUSH
27646: CALL_OW 314
27650: NOT
27651: IFFALSE 27719
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
27653: LD_EXP 63
27657: PUSH
27658: LD_VAR 0 2
27662: ARRAY
27663: PUSH
27664: LD_VAR 0 3
27668: ARRAY
27669: PPUSH
27670: LD_EXP 62
27674: PUSH
27675: LD_VAR 0 2
27679: ARRAY
27680: PUSH
27681: LD_VAR 0 4
27685: ARRAY
27686: PUSH
27687: LD_INT 1
27689: ARRAY
27690: PPUSH
27691: LD_EXP 62
27695: PUSH
27696: LD_VAR 0 2
27700: ARRAY
27701: PUSH
27702: LD_VAR 0 4
27706: ARRAY
27707: PUSH
27708: LD_INT 2
27710: ARRAY
27711: PPUSH
27712: LD_INT 0
27714: PPUSH
27715: CALL_OW 193
// k := k + 1 ;
27719: LD_ADDR_VAR 0 4
27723: PUSH
27724: LD_VAR 0 4
27728: PUSH
27729: LD_INT 1
27731: PLUS
27732: ST_TO_ADDR
// if k > mc_mines [ i ] then
27733: LD_VAR 0 4
27737: PUSH
27738: LD_EXP 62
27742: PUSH
27743: LD_VAR 0 2
27747: ARRAY
27748: GREATER
27749: IFFALSE 27759
// k := 1 ;
27751: LD_ADDR_VAR 0 4
27755: PUSH
27756: LD_INT 1
27758: ST_TO_ADDR
// end ; end ;
27759: GO 27164
27761: POP
27762: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
27763: LD_ADDR_VAR 0 5
27767: PUSH
27768: LD_EXP 49
27772: PUSH
27773: LD_VAR 0 2
27777: ARRAY
27778: PPUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 30
27784: PUSH
27785: LD_INT 4
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 30
27794: PUSH
27795: LD_INT 5
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 30
27804: PUSH
27805: LD_INT 32
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 72
27822: ST_TO_ADDR
// if not tmp then
27823: LD_VAR 0 5
27827: NOT
27828: IFFALSE 27832
// continue ;
27830: GO 27081
// list := [ ] ;
27832: LD_ADDR_VAR 0 6
27836: PUSH
27837: EMPTY
27838: ST_TO_ADDR
// for j in tmp do
27839: LD_ADDR_VAR 0 3
27843: PUSH
27844: LD_VAR 0 5
27848: PUSH
27849: FOR_IN
27850: IFFALSE 27919
// begin for k in UnitsInside ( j ) do
27852: LD_ADDR_VAR 0 4
27856: PUSH
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 313
27866: PUSH
27867: FOR_IN
27868: IFFALSE 27915
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
27870: LD_VAR 0 4
27874: PPUSH
27875: CALL_OW 257
27879: PUSH
27880: LD_INT 1
27882: EQUAL
27883: PUSH
27884: LD_VAR 0 4
27888: PPUSH
27889: CALL_OW 459
27893: NOT
27894: AND
27895: IFFALSE 27913
// list := list ^ k ;
27897: LD_ADDR_VAR 0 6
27901: PUSH
27902: LD_VAR 0 6
27906: PUSH
27907: LD_VAR 0 4
27911: ADD
27912: ST_TO_ADDR
27913: GO 27867
27915: POP
27916: POP
// end ;
27917: GO 27849
27919: POP
27920: POP
// list := list diff mc_miners [ i ] ;
27921: LD_ADDR_VAR 0 6
27925: PUSH
27926: LD_VAR 0 6
27930: PUSH
27931: LD_EXP 63
27935: PUSH
27936: LD_VAR 0 2
27940: ARRAY
27941: DIFF
27942: ST_TO_ADDR
// if not list then
27943: LD_VAR 0 6
27947: NOT
27948: IFFALSE 27952
// continue ;
27950: GO 27081
// k := mc_mines [ i ] - mc_miners [ i ] ;
27952: LD_ADDR_VAR 0 4
27956: PUSH
27957: LD_EXP 62
27961: PUSH
27962: LD_VAR 0 2
27966: ARRAY
27967: PUSH
27968: LD_EXP 63
27972: PUSH
27973: LD_VAR 0 2
27977: ARRAY
27978: MINUS
27979: ST_TO_ADDR
// if k > list then
27980: LD_VAR 0 4
27984: PUSH
27985: LD_VAR 0 6
27989: GREATER
27990: IFFALSE 28002
// k := list ;
27992: LD_ADDR_VAR 0 4
27996: PUSH
27997: LD_VAR 0 6
28001: ST_TO_ADDR
// for j = 1 to k do
28002: LD_ADDR_VAR 0 3
28006: PUSH
28007: DOUBLE
28008: LD_INT 1
28010: DEC
28011: ST_TO_ADDR
28012: LD_VAR 0 4
28016: PUSH
28017: FOR_TO
28018: IFFALSE 28072
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
28020: LD_ADDR_EXP 63
28024: PUSH
28025: LD_EXP 63
28029: PPUSH
28030: LD_VAR 0 2
28034: PUSH
28035: LD_EXP 63
28039: PUSH
28040: LD_VAR 0 2
28044: ARRAY
28045: PUSH
28046: LD_INT 1
28048: PLUS
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PPUSH
28054: LD_VAR 0 6
28058: PUSH
28059: LD_VAR 0 3
28063: ARRAY
28064: PPUSH
28065: CALL 51287 0 3
28069: ST_TO_ADDR
28070: GO 28017
28072: POP
28073: POP
// end ;
28074: GO 27081
28076: POP
28077: POP
// end ;
28078: LD_VAR 0 1
28082: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
28083: LD_INT 0
28085: PPUSH
28086: PPUSH
28087: PPUSH
28088: PPUSH
28089: PPUSH
28090: PPUSH
28091: PPUSH
28092: PPUSH
28093: PPUSH
28094: PPUSH
// if not mc_bases then
28095: LD_EXP 49
28099: NOT
28100: IFFALSE 28104
// exit ;
28102: GO 29835
// for i = 1 to mc_bases do
28104: LD_ADDR_VAR 0 2
28108: PUSH
28109: DOUBLE
28110: LD_INT 1
28112: DEC
28113: ST_TO_ADDR
28114: LD_EXP 49
28118: PUSH
28119: FOR_TO
28120: IFFALSE 29833
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
28122: LD_EXP 49
28126: PUSH
28127: LD_VAR 0 2
28131: ARRAY
28132: NOT
28133: PUSH
28134: LD_EXP 56
28138: PUSH
28139: LD_VAR 0 2
28143: ARRAY
28144: OR
28145: IFFALSE 28149
// continue ;
28147: GO 28119
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
28149: LD_EXP 65
28153: PUSH
28154: LD_VAR 0 2
28158: ARRAY
28159: NOT
28160: PUSH
28161: LD_EXP 66
28165: PUSH
28166: LD_VAR 0 2
28170: ARRAY
28171: AND
28172: IFFALSE 28210
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
28174: LD_ADDR_EXP 66
28178: PUSH
28179: LD_EXP 66
28183: PPUSH
28184: LD_VAR 0 2
28188: PPUSH
28189: EMPTY
28190: PPUSH
28191: CALL_OW 1
28195: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
28196: LD_VAR 0 2
28200: PPUSH
28201: LD_INT 107
28203: PPUSH
28204: CALL 19685 0 2
// continue ;
28208: GO 28119
// end ; target := [ ] ;
28210: LD_ADDR_VAR 0 6
28214: PUSH
28215: EMPTY
28216: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
28217: LD_ADDR_VAR 0 3
28221: PUSH
28222: DOUBLE
28223: LD_EXP 65
28227: PUSH
28228: LD_VAR 0 2
28232: ARRAY
28233: INC
28234: ST_TO_ADDR
28235: LD_INT 1
28237: PUSH
28238: FOR_DOWNTO
28239: IFFALSE 28499
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
28241: LD_EXP 65
28245: PUSH
28246: LD_VAR 0 2
28250: ARRAY
28251: PUSH
28252: LD_VAR 0 3
28256: ARRAY
28257: PUSH
28258: LD_INT 2
28260: ARRAY
28261: PPUSH
28262: LD_EXP 65
28266: PUSH
28267: LD_VAR 0 2
28271: ARRAY
28272: PUSH
28273: LD_VAR 0 3
28277: ARRAY
28278: PUSH
28279: LD_INT 3
28281: ARRAY
28282: PPUSH
28283: CALL_OW 488
28287: PUSH
28288: LD_EXP 65
28292: PUSH
28293: LD_VAR 0 2
28297: ARRAY
28298: PUSH
28299: LD_VAR 0 3
28303: ARRAY
28304: PUSH
28305: LD_INT 2
28307: ARRAY
28308: PPUSH
28309: LD_EXP 65
28313: PUSH
28314: LD_VAR 0 2
28318: ARRAY
28319: PUSH
28320: LD_VAR 0 3
28324: ARRAY
28325: PUSH
28326: LD_INT 3
28328: ARRAY
28329: PPUSH
28330: CALL_OW 284
28334: PUSH
28335: LD_INT 0
28337: EQUAL
28338: AND
28339: IFFALSE 28394
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
28341: LD_ADDR_VAR 0 5
28345: PUSH
28346: LD_EXP 65
28350: PUSH
28351: LD_VAR 0 2
28355: ARRAY
28356: PPUSH
28357: LD_VAR 0 3
28361: PPUSH
28362: CALL_OW 3
28366: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
28367: LD_ADDR_EXP 65
28371: PUSH
28372: LD_EXP 65
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 5
28386: PPUSH
28387: CALL_OW 1
28391: ST_TO_ADDR
// continue ;
28392: GO 28238
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
28394: LD_EXP 49
28398: PUSH
28399: LD_VAR 0 2
28403: ARRAY
28404: PUSH
28405: LD_INT 1
28407: ARRAY
28408: PPUSH
28409: CALL_OW 255
28413: PPUSH
28414: LD_EXP 65
28418: PUSH
28419: LD_VAR 0 2
28423: ARRAY
28424: PUSH
28425: LD_VAR 0 3
28429: ARRAY
28430: PUSH
28431: LD_INT 2
28433: ARRAY
28434: PPUSH
28435: LD_EXP 65
28439: PUSH
28440: LD_VAR 0 2
28444: ARRAY
28445: PUSH
28446: LD_VAR 0 3
28450: ARRAY
28451: PUSH
28452: LD_INT 3
28454: ARRAY
28455: PPUSH
28456: LD_INT 30
28458: PPUSH
28459: CALL 51781 0 4
28463: PUSH
28464: LD_INT 4
28466: ARRAY
28467: PUSH
28468: LD_INT 0
28470: EQUAL
28471: IFFALSE 28497
// begin target := mc_crates [ i ] [ j ] ;
28473: LD_ADDR_VAR 0 6
28477: PUSH
28478: LD_EXP 65
28482: PUSH
28483: LD_VAR 0 2
28487: ARRAY
28488: PUSH
28489: LD_VAR 0 3
28493: ARRAY
28494: ST_TO_ADDR
// break ;
28495: GO 28499
// end ; end ;
28497: GO 28238
28499: POP
28500: POP
// if not target then
28501: LD_VAR 0 6
28505: NOT
28506: IFFALSE 28510
// continue ;
28508: GO 28119
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
28510: LD_ADDR_VAR 0 7
28514: PUSH
28515: LD_EXP 68
28519: PUSH
28520: LD_VAR 0 2
28524: ARRAY
28525: PPUSH
28526: LD_INT 2
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: LD_INT 58
28534: PUSH
28535: EMPTY
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 61
28544: PUSH
28545: EMPTY
28546: LIST
28547: PUSH
28548: LD_INT 33
28550: PUSH
28551: LD_INT 5
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 33
28560: PUSH
28561: LD_INT 3
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 34
28580: PUSH
28581: LD_INT 32
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 34
28590: PUSH
28591: LD_INT 51
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 34
28600: PUSH
28601: LD_INT 12
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PPUSH
28618: CALL_OW 72
28622: ST_TO_ADDR
// if not cargo then
28623: LD_VAR 0 7
28627: NOT
28628: IFFALSE 29271
// begin if mc_crates_collector [ i ] < 5 then
28630: LD_EXP 66
28634: PUSH
28635: LD_VAR 0 2
28639: ARRAY
28640: PUSH
28641: LD_INT 5
28643: LESS
28644: IFFALSE 29010
// begin if mc_ape [ i ] then
28646: LD_EXP 78
28650: PUSH
28651: LD_VAR 0 2
28655: ARRAY
28656: IFFALSE 28703
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
28658: LD_ADDR_VAR 0 5
28662: PUSH
28663: LD_EXP 78
28667: PUSH
28668: LD_VAR 0 2
28672: ARRAY
28673: PPUSH
28674: LD_INT 25
28676: PUSH
28677: LD_INT 16
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 24
28686: PUSH
28687: LD_INT 750
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 72
28702: ST_TO_ADDR
// if not tmp then
28703: LD_VAR 0 5
28707: NOT
28708: IFFALSE 28755
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
28710: LD_ADDR_VAR 0 5
28714: PUSH
28715: LD_EXP 49
28719: PUSH
28720: LD_VAR 0 2
28724: ARRAY
28725: PPUSH
28726: LD_INT 25
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 24
28738: PUSH
28739: LD_INT 750
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PPUSH
28750: CALL_OW 72
28754: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
28755: LD_EXP 78
28759: PUSH
28760: LD_VAR 0 2
28764: ARRAY
28765: PUSH
28766: LD_EXP 49
28770: PUSH
28771: LD_VAR 0 2
28775: ARRAY
28776: PPUSH
28777: LD_INT 25
28779: PUSH
28780: LD_INT 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 24
28789: PUSH
28790: LD_INT 750
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 72
28805: AND
28806: PUSH
28807: LD_VAR 0 5
28811: PUSH
28812: LD_INT 5
28814: LESS
28815: AND
28816: IFFALSE 28898
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
28818: LD_ADDR_VAR 0 3
28822: PUSH
28823: LD_EXP 49
28827: PUSH
28828: LD_VAR 0 2
28832: ARRAY
28833: PPUSH
28834: LD_INT 25
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 24
28846: PUSH
28847: LD_INT 750
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PPUSH
28858: CALL_OW 72
28862: PUSH
28863: FOR_IN
28864: IFFALSE 28896
// begin tmp := tmp union j ;
28866: LD_ADDR_VAR 0 5
28870: PUSH
28871: LD_VAR 0 5
28875: PUSH
28876: LD_VAR 0 3
28880: UNION
28881: ST_TO_ADDR
// if tmp >= 5 then
28882: LD_VAR 0 5
28886: PUSH
28887: LD_INT 5
28889: GREATEREQUAL
28890: IFFALSE 28894
// break ;
28892: GO 28896
// end ;
28894: GO 28863
28896: POP
28897: POP
// end ; if not tmp then
28898: LD_VAR 0 5
28902: NOT
28903: IFFALSE 28907
// continue ;
28905: GO 28119
// for j in tmp do
28907: LD_ADDR_VAR 0 3
28911: PUSH
28912: LD_VAR 0 5
28916: PUSH
28917: FOR_IN
28918: IFFALSE 29008
// if not GetTag ( j ) then
28920: LD_VAR 0 3
28924: PPUSH
28925: CALL_OW 110
28929: NOT
28930: IFFALSE 29006
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
28932: LD_ADDR_EXP 66
28936: PUSH
28937: LD_EXP 66
28941: PPUSH
28942: LD_VAR 0 2
28946: PUSH
28947: LD_EXP 66
28951: PUSH
28952: LD_VAR 0 2
28956: ARRAY
28957: PUSH
28958: LD_INT 1
28960: PLUS
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PPUSH
28966: LD_VAR 0 3
28970: PPUSH
28971: CALL 51287 0 3
28975: ST_TO_ADDR
// SetTag ( j , 107 ) ;
28976: LD_VAR 0 3
28980: PPUSH
28981: LD_INT 107
28983: PPUSH
28984: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
28988: LD_EXP 66
28992: PUSH
28993: LD_VAR 0 2
28997: ARRAY
28998: PUSH
28999: LD_INT 5
29001: GREATEREQUAL
29002: IFFALSE 29006
// break ;
29004: GO 29008
// end ;
29006: GO 28917
29008: POP
29009: POP
// end ; if mc_crates_collector [ i ] and target then
29010: LD_EXP 66
29014: PUSH
29015: LD_VAR 0 2
29019: ARRAY
29020: PUSH
29021: LD_VAR 0 6
29025: AND
29026: IFFALSE 29269
// begin if mc_crates_collector [ i ] < target [ 1 ] then
29028: LD_EXP 66
29032: PUSH
29033: LD_VAR 0 2
29037: ARRAY
29038: PUSH
29039: LD_VAR 0 6
29043: PUSH
29044: LD_INT 1
29046: ARRAY
29047: LESS
29048: IFFALSE 29068
// tmp := mc_crates_collector [ i ] else
29050: LD_ADDR_VAR 0 5
29054: PUSH
29055: LD_EXP 66
29059: PUSH
29060: LD_VAR 0 2
29064: ARRAY
29065: ST_TO_ADDR
29066: GO 29082
// tmp := target [ 1 ] ;
29068: LD_ADDR_VAR 0 5
29072: PUSH
29073: LD_VAR 0 6
29077: PUSH
29078: LD_INT 1
29080: ARRAY
29081: ST_TO_ADDR
// k := 0 ;
29082: LD_ADDR_VAR 0 4
29086: PUSH
29087: LD_INT 0
29089: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
29090: LD_ADDR_VAR 0 3
29094: PUSH
29095: LD_EXP 66
29099: PUSH
29100: LD_VAR 0 2
29104: ARRAY
29105: PUSH
29106: FOR_IN
29107: IFFALSE 29267
// begin k := k + 1 ;
29109: LD_ADDR_VAR 0 4
29113: PUSH
29114: LD_VAR 0 4
29118: PUSH
29119: LD_INT 1
29121: PLUS
29122: ST_TO_ADDR
// if k > tmp then
29123: LD_VAR 0 4
29127: PUSH
29128: LD_VAR 0 5
29132: GREATER
29133: IFFALSE 29137
// break ;
29135: GO 29267
// if not GetClass ( j ) in [ 2 , 16 ] then
29137: LD_VAR 0 3
29141: PPUSH
29142: CALL_OW 257
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 16
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: IN
29157: NOT
29158: IFFALSE 29211
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
29160: LD_ADDR_EXP 66
29164: PUSH
29165: LD_EXP 66
29169: PPUSH
29170: LD_VAR 0 2
29174: PPUSH
29175: LD_EXP 66
29179: PUSH
29180: LD_VAR 0 2
29184: ARRAY
29185: PUSH
29186: LD_VAR 0 3
29190: DIFF
29191: PPUSH
29192: CALL_OW 1
29196: ST_TO_ADDR
// SetTag ( j , 0 ) ;
29197: LD_VAR 0 3
29201: PPUSH
29202: LD_INT 0
29204: PPUSH
29205: CALL_OW 109
// continue ;
29209: GO 29106
// end ; if IsInUnit ( j ) then
29211: LD_VAR 0 3
29215: PPUSH
29216: CALL_OW 310
29220: IFFALSE 29231
// ComExitBuilding ( j ) ;
29222: LD_VAR 0 3
29226: PPUSH
29227: CALL_OW 122
// wait ( 3 ) ;
29231: LD_INT 3
29233: PPUSH
29234: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29238: LD_VAR 0 3
29242: PPUSH
29243: LD_VAR 0 6
29247: PUSH
29248: LD_INT 2
29250: ARRAY
29251: PPUSH
29252: LD_VAR 0 6
29256: PUSH
29257: LD_INT 3
29259: ARRAY
29260: PPUSH
29261: CALL_OW 117
// end ;
29265: GO 29106
29267: POP
29268: POP
// end ; end else
29269: GO 29831
// begin for j in cargo do
29271: LD_ADDR_VAR 0 3
29275: PUSH
29276: LD_VAR 0 7
29280: PUSH
29281: FOR_IN
29282: IFFALSE 29829
// begin if GetTag ( j ) <> 0 then
29284: LD_VAR 0 3
29288: PPUSH
29289: CALL_OW 110
29293: PUSH
29294: LD_INT 0
29296: NONEQUAL
29297: IFFALSE 29301
// continue ;
29299: GO 29281
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
29301: LD_VAR 0 3
29305: PPUSH
29306: CALL_OW 256
29310: PUSH
29311: LD_INT 1000
29313: LESS
29314: PUSH
29315: LD_VAR 0 3
29319: PPUSH
29320: LD_EXP 73
29324: PUSH
29325: LD_VAR 0 2
29329: ARRAY
29330: PPUSH
29331: CALL_OW 308
29335: NOT
29336: AND
29337: IFFALSE 29359
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29339: LD_VAR 0 3
29343: PPUSH
29344: LD_EXP 73
29348: PUSH
29349: LD_VAR 0 2
29353: ARRAY
29354: PPUSH
29355: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
29359: LD_VAR 0 3
29363: PPUSH
29364: CALL_OW 256
29368: PUSH
29369: LD_INT 1000
29371: LESS
29372: PUSH
29373: LD_VAR 0 3
29377: PPUSH
29378: LD_EXP 73
29382: PUSH
29383: LD_VAR 0 2
29387: ARRAY
29388: PPUSH
29389: CALL_OW 308
29393: AND
29394: IFFALSE 29398
// continue ;
29396: GO 29281
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
29398: LD_VAR 0 3
29402: PPUSH
29403: CALL_OW 262
29407: PUSH
29408: LD_INT 2
29410: EQUAL
29411: PUSH
29412: LD_VAR 0 3
29416: PPUSH
29417: CALL_OW 261
29421: PUSH
29422: LD_INT 15
29424: LESS
29425: AND
29426: IFFALSE 29430
// continue ;
29428: GO 29281
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
29430: LD_VAR 0 3
29434: PPUSH
29435: CALL_OW 262
29439: PUSH
29440: LD_INT 1
29442: EQUAL
29443: PUSH
29444: LD_VAR 0 3
29448: PPUSH
29449: CALL_OW 261
29453: PUSH
29454: LD_INT 10
29456: LESS
29457: AND
29458: IFFALSE 29768
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29460: LD_ADDR_VAR 0 8
29464: PUSH
29465: LD_EXP 49
29469: PUSH
29470: LD_VAR 0 2
29474: ARRAY
29475: PPUSH
29476: LD_INT 2
29478: PUSH
29479: LD_INT 30
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 30
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: PPUSH
29504: CALL_OW 72
29508: ST_TO_ADDR
// if not depot then
29509: LD_VAR 0 8
29513: NOT
29514: IFFALSE 29518
// continue ;
29516: GO 29281
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
29518: LD_VAR 0 3
29522: PPUSH
29523: LD_VAR 0 8
29527: PPUSH
29528: LD_VAR 0 3
29532: PPUSH
29533: CALL_OW 74
29537: PPUSH
29538: CALL_OW 296
29542: PUSH
29543: LD_INT 6
29545: LESS
29546: IFFALSE 29562
// SetFuel ( j , 100 ) else
29548: LD_VAR 0 3
29552: PPUSH
29553: LD_INT 100
29555: PPUSH
29556: CALL_OW 240
29560: GO 29768
// if GetFuel ( j ) = 0 then
29562: LD_VAR 0 3
29566: PPUSH
29567: CALL_OW 261
29571: PUSH
29572: LD_INT 0
29574: EQUAL
29575: IFFALSE 29768
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
29577: LD_ADDR_EXP 68
29581: PUSH
29582: LD_EXP 68
29586: PPUSH
29587: LD_VAR 0 2
29591: PPUSH
29592: LD_EXP 68
29596: PUSH
29597: LD_VAR 0 2
29601: ARRAY
29602: PUSH
29603: LD_VAR 0 3
29607: DIFF
29608: PPUSH
29609: CALL_OW 1
29613: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
29614: LD_VAR 0 3
29618: PPUSH
29619: CALL_OW 263
29623: PUSH
29624: LD_INT 1
29626: EQUAL
29627: IFFALSE 29643
// ComExitVehicle ( IsInUnit ( j ) ) ;
29629: LD_VAR 0 3
29633: PPUSH
29634: CALL_OW 310
29638: PPUSH
29639: CALL_OW 121
// if GetControl ( j ) = control_remote then
29643: LD_VAR 0 3
29647: PPUSH
29648: CALL_OW 263
29652: PUSH
29653: LD_INT 2
29655: EQUAL
29656: IFFALSE 29667
// ComUnlink ( j ) ;
29658: LD_VAR 0 3
29662: PPUSH
29663: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
29667: LD_ADDR_VAR 0 9
29671: PUSH
29672: LD_VAR 0 2
29676: PPUSH
29677: LD_INT 3
29679: PPUSH
29680: CALL 38903 0 2
29684: ST_TO_ADDR
// if fac then
29685: LD_VAR 0 9
29689: IFFALSE 29766
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
29691: LD_ADDR_VAR 0 10
29695: PUSH
29696: LD_VAR 0 9
29700: PPUSH
29701: LD_VAR 0 3
29705: PPUSH
29706: CALL_OW 265
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 262
29720: PPUSH
29721: LD_VAR 0 3
29725: PPUSH
29726: CALL_OW 263
29730: PPUSH
29731: LD_VAR 0 3
29735: PPUSH
29736: CALL_OW 264
29740: PPUSH
29741: CALL 48452 0 5
29745: ST_TO_ADDR
// if components then
29746: LD_VAR 0 10
29750: IFFALSE 29766
// MC_InsertProduceList ( i , components ) ;
29752: LD_VAR 0 2
29756: PPUSH
29757: LD_VAR 0 10
29761: PPUSH
29762: CALL 38473 0 2
// end ; continue ;
29766: GO 29281
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
29768: LD_VAR 0 3
29772: PPUSH
29773: LD_INT 1
29775: PPUSH
29776: CALL_OW 289
29780: PUSH
29781: LD_INT 100
29783: LESS
29784: PUSH
29785: LD_VAR 0 3
29789: PPUSH
29790: CALL_OW 314
29794: NOT
29795: AND
29796: IFFALSE 29825
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29798: LD_VAR 0 3
29802: PPUSH
29803: LD_VAR 0 6
29807: PUSH
29808: LD_INT 2
29810: ARRAY
29811: PPUSH
29812: LD_VAR 0 6
29816: PUSH
29817: LD_INT 3
29819: ARRAY
29820: PPUSH
29821: CALL_OW 117
// break ;
29825: GO 29829
// end ;
29827: GO 29281
29829: POP
29830: POP
// end ; end ;
29831: GO 28119
29833: POP
29834: POP
// end ;
29835: LD_VAR 0 1
29839: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
29840: LD_INT 0
29842: PPUSH
29843: PPUSH
29844: PPUSH
29845: PPUSH
// if not mc_bases then
29846: LD_EXP 49
29850: NOT
29851: IFFALSE 29855
// exit ;
29853: GO 30016
// for i = 1 to mc_bases do
29855: LD_ADDR_VAR 0 2
29859: PUSH
29860: DOUBLE
29861: LD_INT 1
29863: DEC
29864: ST_TO_ADDR
29865: LD_EXP 49
29869: PUSH
29870: FOR_TO
29871: IFFALSE 30014
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
29873: LD_ADDR_VAR 0 4
29877: PUSH
29878: LD_EXP 68
29882: PUSH
29883: LD_VAR 0 2
29887: ARRAY
29888: PUSH
29889: LD_EXP 71
29893: PUSH
29894: LD_VAR 0 2
29898: ARRAY
29899: UNION
29900: PPUSH
29901: LD_INT 33
29903: PUSH
29904: LD_INT 2
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 72
29915: ST_TO_ADDR
// if tmp then
29916: LD_VAR 0 4
29920: IFFALSE 30012
// for j in tmp do
29922: LD_ADDR_VAR 0 3
29926: PUSH
29927: LD_VAR 0 4
29931: PUSH
29932: FOR_IN
29933: IFFALSE 30010
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
29935: LD_VAR 0 3
29939: PPUSH
29940: CALL_OW 312
29944: NOT
29945: PUSH
29946: LD_VAR 0 3
29950: PPUSH
29951: CALL_OW 256
29955: PUSH
29956: LD_INT 250
29958: GREATEREQUAL
29959: AND
29960: IFFALSE 29973
// Connect ( j ) else
29962: LD_VAR 0 3
29966: PPUSH
29967: CALL 53805 0 1
29971: GO 30008
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
29973: LD_VAR 0 3
29977: PPUSH
29978: CALL_OW 256
29982: PUSH
29983: LD_INT 250
29985: LESS
29986: PUSH
29987: LD_VAR 0 3
29991: PPUSH
29992: CALL_OW 312
29996: AND
29997: IFFALSE 30008
// ComUnlink ( j ) ;
29999: LD_VAR 0 3
30003: PPUSH
30004: CALL_OW 136
30008: GO 29932
30010: POP
30011: POP
// end ;
30012: GO 29870
30014: POP
30015: POP
// end ;
30016: LD_VAR 0 1
30020: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
30021: LD_INT 0
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
// if not mc_bases then
30028: LD_EXP 49
30032: NOT
30033: IFFALSE 30037
// exit ;
30035: GO 30497
// for i = 1 to mc_bases do
30037: LD_ADDR_VAR 0 2
30041: PUSH
30042: DOUBLE
30043: LD_INT 1
30045: DEC
30046: ST_TO_ADDR
30047: LD_EXP 49
30051: PUSH
30052: FOR_TO
30053: IFFALSE 30495
// begin if not mc_produce [ i ] then
30055: LD_EXP 70
30059: PUSH
30060: LD_VAR 0 2
30064: ARRAY
30065: NOT
30066: IFFALSE 30070
// continue ;
30068: GO 30052
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30070: LD_ADDR_VAR 0 5
30074: PUSH
30075: LD_EXP 49
30079: PUSH
30080: LD_VAR 0 2
30084: ARRAY
30085: PPUSH
30086: LD_INT 30
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 72
30100: ST_TO_ADDR
// if not fac then
30101: LD_VAR 0 5
30105: NOT
30106: IFFALSE 30110
// continue ;
30108: GO 30052
// for j in fac do
30110: LD_ADDR_VAR 0 3
30114: PUSH
30115: LD_VAR 0 5
30119: PUSH
30120: FOR_IN
30121: IFFALSE 30491
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
30123: LD_VAR 0 3
30127: PPUSH
30128: CALL_OW 461
30132: PUSH
30133: LD_INT 2
30135: NONEQUAL
30136: PUSH
30137: LD_VAR 0 3
30141: PPUSH
30142: LD_INT 15
30144: PPUSH
30145: CALL 53478 0 2
30149: PUSH
30150: LD_INT 4
30152: ARRAY
30153: OR
30154: PUSH
30155: LD_VAR 0 3
30159: PPUSH
30160: CALL_OW 313
30164: PUSH
30165: LD_INT 0
30167: EQUAL
30168: OR
30169: IFFALSE 30173
// continue ;
30171: GO 30120
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
30173: LD_VAR 0 3
30177: PPUSH
30178: LD_EXP 70
30182: PUSH
30183: LD_VAR 0 2
30187: ARRAY
30188: PUSH
30189: LD_INT 1
30191: ARRAY
30192: PUSH
30193: LD_INT 1
30195: ARRAY
30196: PPUSH
30197: LD_EXP 70
30201: PUSH
30202: LD_VAR 0 2
30206: ARRAY
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PUSH
30212: LD_INT 2
30214: ARRAY
30215: PPUSH
30216: LD_EXP 70
30220: PUSH
30221: LD_VAR 0 2
30225: ARRAY
30226: PUSH
30227: LD_INT 1
30229: ARRAY
30230: PUSH
30231: LD_INT 3
30233: ARRAY
30234: PPUSH
30235: LD_EXP 70
30239: PUSH
30240: LD_VAR 0 2
30244: ARRAY
30245: PUSH
30246: LD_INT 1
30248: ARRAY
30249: PUSH
30250: LD_INT 4
30252: ARRAY
30253: PPUSH
30254: CALL_OW 448
30258: PUSH
30259: LD_VAR 0 3
30263: PPUSH
30264: LD_EXP 70
30268: PUSH
30269: LD_VAR 0 2
30273: ARRAY
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PUSH
30279: LD_INT 1
30281: ARRAY
30282: PUSH
30283: LD_EXP 70
30287: PUSH
30288: LD_VAR 0 2
30292: ARRAY
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PUSH
30298: LD_INT 2
30300: ARRAY
30301: PUSH
30302: LD_EXP 70
30306: PUSH
30307: LD_VAR 0 2
30311: ARRAY
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PUSH
30317: LD_INT 3
30319: ARRAY
30320: PUSH
30321: LD_EXP 70
30325: PUSH
30326: LD_VAR 0 2
30330: ARRAY
30331: PUSH
30332: LD_INT 1
30334: ARRAY
30335: PUSH
30336: LD_INT 4
30338: ARRAY
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: PPUSH
30346: CALL 57019 0 2
30350: AND
30351: IFFALSE 30489
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
30353: LD_VAR 0 3
30357: PPUSH
30358: LD_EXP 70
30362: PUSH
30363: LD_VAR 0 2
30367: ARRAY
30368: PUSH
30369: LD_INT 1
30371: ARRAY
30372: PUSH
30373: LD_INT 1
30375: ARRAY
30376: PPUSH
30377: LD_EXP 70
30381: PUSH
30382: LD_VAR 0 2
30386: ARRAY
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PUSH
30392: LD_INT 2
30394: ARRAY
30395: PPUSH
30396: LD_EXP 70
30400: PUSH
30401: LD_VAR 0 2
30405: ARRAY
30406: PUSH
30407: LD_INT 1
30409: ARRAY
30410: PUSH
30411: LD_INT 3
30413: ARRAY
30414: PPUSH
30415: LD_EXP 70
30419: PUSH
30420: LD_VAR 0 2
30424: ARRAY
30425: PUSH
30426: LD_INT 1
30428: ARRAY
30429: PUSH
30430: LD_INT 4
30432: ARRAY
30433: PPUSH
30434: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
30438: LD_ADDR_VAR 0 4
30442: PUSH
30443: LD_EXP 70
30447: PUSH
30448: LD_VAR 0 2
30452: ARRAY
30453: PPUSH
30454: LD_INT 1
30456: PPUSH
30457: CALL_OW 3
30461: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
30462: LD_ADDR_EXP 70
30466: PUSH
30467: LD_EXP 70
30471: PPUSH
30472: LD_VAR 0 2
30476: PPUSH
30477: LD_VAR 0 4
30481: PPUSH
30482: CALL_OW 1
30486: ST_TO_ADDR
// break ;
30487: GO 30491
// end ; end ;
30489: GO 30120
30491: POP
30492: POP
// end ;
30493: GO 30052
30495: POP
30496: POP
// end ;
30497: LD_VAR 0 1
30501: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
30502: LD_INT 0
30504: PPUSH
30505: PPUSH
30506: PPUSH
// if not mc_bases then
30507: LD_EXP 49
30511: NOT
30512: IFFALSE 30516
// exit ;
30514: GO 30605
// for i = 1 to mc_bases do
30516: LD_ADDR_VAR 0 2
30520: PUSH
30521: DOUBLE
30522: LD_INT 1
30524: DEC
30525: ST_TO_ADDR
30526: LD_EXP 49
30530: PUSH
30531: FOR_TO
30532: IFFALSE 30603
// begin if mc_attack [ i ] then
30534: LD_EXP 69
30538: PUSH
30539: LD_VAR 0 2
30543: ARRAY
30544: IFFALSE 30601
// begin tmp := mc_attack [ i ] [ 1 ] ;
30546: LD_ADDR_VAR 0 3
30550: PUSH
30551: LD_EXP 69
30555: PUSH
30556: LD_VAR 0 2
30560: ARRAY
30561: PUSH
30562: LD_INT 1
30564: ARRAY
30565: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
30566: LD_ADDR_EXP 69
30570: PUSH
30571: LD_EXP 69
30575: PPUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: EMPTY
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
// Attack ( tmp ) ;
30588: LD_VAR 0 3
30592: PPUSH
30593: CALL 79123 0 1
// exit ;
30597: POP
30598: POP
30599: GO 30605
// end ; end ;
30601: GO 30531
30603: POP
30604: POP
// end ;
30605: LD_VAR 0 1
30609: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
30610: LD_INT 0
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
30616: PPUSH
30617: PPUSH
30618: PPUSH
// if not mc_bases then
30619: LD_EXP 49
30623: NOT
30624: IFFALSE 30628
// exit ;
30626: GO 31232
// for i = 1 to mc_bases do
30628: LD_ADDR_VAR 0 2
30632: PUSH
30633: DOUBLE
30634: LD_INT 1
30636: DEC
30637: ST_TO_ADDR
30638: LD_EXP 49
30642: PUSH
30643: FOR_TO
30644: IFFALSE 31230
// begin if not mc_bases [ i ] then
30646: LD_EXP 49
30650: PUSH
30651: LD_VAR 0 2
30655: ARRAY
30656: NOT
30657: IFFALSE 30661
// continue ;
30659: GO 30643
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: LD_EXP 49
30670: PUSH
30671: LD_VAR 0 2
30675: ARRAY
30676: PUSH
30677: LD_INT 1
30679: ARRAY
30680: PPUSH
30681: CALL 47756 0 1
30685: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
30686: LD_ADDR_EXP 72
30690: PUSH
30691: LD_EXP 72
30695: PPUSH
30696: LD_VAR 0 2
30700: PPUSH
30701: LD_EXP 49
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_INT 1
30714: ARRAY
30715: PPUSH
30716: CALL_OW 255
30720: PPUSH
30721: LD_EXP 74
30725: PUSH
30726: LD_VAR 0 2
30730: ARRAY
30731: PPUSH
30732: CALL 45716 0 2
30736: PPUSH
30737: CALL_OW 1
30741: ST_TO_ADDR
// if not mc_scan [ i ] then
30742: LD_EXP 72
30746: PUSH
30747: LD_VAR 0 2
30751: ARRAY
30752: NOT
30753: IFFALSE 30908
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
30755: LD_ADDR_VAR 0 4
30759: PUSH
30760: LD_EXP 49
30764: PUSH
30765: LD_VAR 0 2
30769: ARRAY
30770: PPUSH
30771: LD_INT 2
30773: PUSH
30774: LD_INT 25
30776: PUSH
30777: LD_INT 5
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 25
30786: PUSH
30787: LD_INT 8
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 25
30796: PUSH
30797: LD_INT 9
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: PPUSH
30810: CALL_OW 72
30814: ST_TO_ADDR
// if not tmp then
30815: LD_VAR 0 4
30819: NOT
30820: IFFALSE 30824
// continue ;
30822: GO 30643
// for j in tmp do
30824: LD_ADDR_VAR 0 3
30828: PUSH
30829: LD_VAR 0 4
30833: PUSH
30834: FOR_IN
30835: IFFALSE 30906
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
30837: LD_VAR 0 3
30841: PPUSH
30842: CALL_OW 310
30846: PPUSH
30847: CALL_OW 266
30851: PUSH
30852: LD_INT 5
30854: EQUAL
30855: PUSH
30856: LD_VAR 0 3
30860: PPUSH
30861: CALL_OW 257
30865: PUSH
30866: LD_INT 1
30868: EQUAL
30869: AND
30870: PUSH
30871: LD_VAR 0 3
30875: PPUSH
30876: CALL_OW 459
30880: NOT
30881: AND
30882: PUSH
30883: LD_VAR 0 7
30887: AND
30888: IFFALSE 30904
// ComChangeProfession ( j , class ) ;
30890: LD_VAR 0 3
30894: PPUSH
30895: LD_VAR 0 7
30899: PPUSH
30900: CALL_OW 123
30904: GO 30834
30906: POP
30907: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
30908: LD_EXP 72
30912: PUSH
30913: LD_VAR 0 2
30917: ARRAY
30918: PUSH
30919: LD_EXP 71
30923: PUSH
30924: LD_VAR 0 2
30928: ARRAY
30929: NOT
30930: AND
30931: PUSH
30932: LD_EXP 49
30936: PUSH
30937: LD_VAR 0 2
30941: ARRAY
30942: PPUSH
30943: LD_INT 30
30945: PUSH
30946: LD_INT 32
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PPUSH
30953: CALL_OW 72
30957: NOT
30958: AND
30959: PUSH
30960: LD_EXP 49
30964: PUSH
30965: LD_VAR 0 2
30969: ARRAY
30970: PPUSH
30971: LD_INT 2
30973: PUSH
30974: LD_INT 30
30976: PUSH
30977: LD_INT 4
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 30
30986: PUSH
30987: LD_INT 5
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: PPUSH
30999: CALL_OW 72
31003: NOT
31004: AND
31005: IFFALSE 31137
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31007: LD_ADDR_VAR 0 4
31011: PUSH
31012: LD_EXP 49
31016: PUSH
31017: LD_VAR 0 2
31021: ARRAY
31022: PPUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 25
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 25
31038: PUSH
31039: LD_INT 5
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 25
31048: PUSH
31049: LD_INT 8
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 25
31058: PUSH
31059: LD_INT 9
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: PPUSH
31073: CALL_OW 72
31077: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
31078: LD_ADDR_VAR 0 4
31082: PUSH
31083: LD_VAR 0 4
31087: PUSH
31088: LD_VAR 0 4
31092: PPUSH
31093: LD_INT 18
31095: PPUSH
31096: CALL 83867 0 2
31100: DIFF
31101: ST_TO_ADDR
// if tmp then
31102: LD_VAR 0 4
31106: IFFALSE 31137
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
31108: LD_VAR 0 2
31112: PPUSH
31113: LD_VAR 0 4
31117: PPUSH
31118: LD_EXP 74
31122: PUSH
31123: LD_VAR 0 2
31127: ARRAY
31128: PPUSH
31129: CALL 45751 0 3
// exit ;
31133: POP
31134: POP
31135: GO 31232
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
31137: LD_EXP 72
31141: PUSH
31142: LD_VAR 0 2
31146: ARRAY
31147: PUSH
31148: LD_EXP 71
31152: PUSH
31153: LD_VAR 0 2
31157: ARRAY
31158: AND
31159: IFFALSE 31228
// begin tmp := mc_defender [ i ] ;
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: LD_EXP 71
31170: PUSH
31171: LD_VAR 0 2
31175: ARRAY
31176: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
31177: LD_ADDR_EXP 71
31181: PUSH
31182: LD_EXP 71
31186: PPUSH
31187: LD_VAR 0 2
31191: PPUSH
31192: EMPTY
31193: PPUSH
31194: CALL_OW 1
31198: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
31199: LD_VAR 0 2
31203: PPUSH
31204: LD_VAR 0 4
31208: PPUSH
31209: LD_EXP 72
31213: PUSH
31214: LD_VAR 0 2
31218: ARRAY
31219: PPUSH
31220: CALL 46249 0 3
// exit ;
31224: POP
31225: POP
31226: GO 31232
// end ; end ;
31228: GO 30643
31230: POP
31231: POP
// end ;
31232: LD_VAR 0 1
31236: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
31237: LD_INT 0
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
31245: PPUSH
31246: PPUSH
31247: PPUSH
31248: PPUSH
31249: PPUSH
// if not mc_bases then
31250: LD_EXP 49
31254: NOT
31255: IFFALSE 31259
// exit ;
31257: GO 32319
// for i = 1 to mc_bases do
31259: LD_ADDR_VAR 0 2
31263: PUSH
31264: DOUBLE
31265: LD_INT 1
31267: DEC
31268: ST_TO_ADDR
31269: LD_EXP 49
31273: PUSH
31274: FOR_TO
31275: IFFALSE 32317
// begin tmp := mc_lab [ i ] ;
31277: LD_ADDR_VAR 0 6
31281: PUSH
31282: LD_EXP 82
31286: PUSH
31287: LD_VAR 0 2
31291: ARRAY
31292: ST_TO_ADDR
// if not tmp then
31293: LD_VAR 0 6
31297: NOT
31298: IFFALSE 31302
// continue ;
31300: GO 31274
// idle_lab := 0 ;
31302: LD_ADDR_VAR 0 11
31306: PUSH
31307: LD_INT 0
31309: ST_TO_ADDR
// for j in tmp do
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_VAR 0 6
31319: PUSH
31320: FOR_IN
31321: IFFALSE 32313
// begin researching := false ;
31323: LD_ADDR_VAR 0 10
31327: PUSH
31328: LD_INT 0
31330: ST_TO_ADDR
// side := GetSide ( j ) ;
31331: LD_ADDR_VAR 0 4
31335: PUSH
31336: LD_VAR 0 3
31340: PPUSH
31341: CALL_OW 255
31345: ST_TO_ADDR
// if not mc_tech [ side ] then
31346: LD_EXP 76
31350: PUSH
31351: LD_VAR 0 4
31355: ARRAY
31356: NOT
31357: IFFALSE 31361
// continue ;
31359: GO 31320
// if BuildingStatus ( j ) = bs_idle then
31361: LD_VAR 0 3
31365: PPUSH
31366: CALL_OW 461
31370: PUSH
31371: LD_INT 2
31373: EQUAL
31374: IFFALSE 31547
// begin if idle_lab then
31376: LD_VAR 0 11
31380: IFFALSE 31451
// begin tmp2 := UnitsInside ( idle_lab ) ;
31382: LD_ADDR_VAR 0 9
31386: PUSH
31387: LD_VAR 0 11
31391: PPUSH
31392: CALL_OW 313
31396: ST_TO_ADDR
// if tmp2 then
31397: LD_VAR 0 9
31401: IFFALSE 31443
// for x in tmp2 do
31403: LD_ADDR_VAR 0 7
31407: PUSH
31408: LD_VAR 0 9
31412: PUSH
31413: FOR_IN
31414: IFFALSE 31441
// begin ComExitBuilding ( x ) ;
31416: LD_VAR 0 7
31420: PPUSH
31421: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31425: LD_VAR 0 7
31429: PPUSH
31430: LD_VAR 0 3
31434: PPUSH
31435: CALL_OW 180
// end ;
31439: GO 31413
31441: POP
31442: POP
// idle_lab := 0 ;
31443: LD_ADDR_VAR 0 11
31447: PUSH
31448: LD_INT 0
31450: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
31451: LD_ADDR_VAR 0 5
31455: PUSH
31456: LD_EXP 76
31460: PUSH
31461: LD_VAR 0 4
31465: ARRAY
31466: PUSH
31467: FOR_IN
31468: IFFALSE 31528
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
31470: LD_VAR 0 3
31474: PPUSH
31475: LD_VAR 0 5
31479: PPUSH
31480: CALL_OW 430
31484: PUSH
31485: LD_VAR 0 4
31489: PPUSH
31490: LD_VAR 0 5
31494: PPUSH
31495: CALL 44821 0 2
31499: AND
31500: IFFALSE 31526
// begin researching := true ;
31502: LD_ADDR_VAR 0 10
31506: PUSH
31507: LD_INT 1
31509: ST_TO_ADDR
// ComResearch ( j , t ) ;
31510: LD_VAR 0 3
31514: PPUSH
31515: LD_VAR 0 5
31519: PPUSH
31520: CALL_OW 124
// break ;
31524: GO 31528
// end ;
31526: GO 31467
31528: POP
31529: POP
// if not researching then
31530: LD_VAR 0 10
31534: NOT
31535: IFFALSE 31547
// idle_lab := j ;
31537: LD_ADDR_VAR 0 11
31541: PUSH
31542: LD_VAR 0 3
31546: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
31547: LD_VAR 0 3
31551: PPUSH
31552: CALL_OW 461
31556: PUSH
31557: LD_INT 10
31559: EQUAL
31560: IFFALSE 32148
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
31562: LD_EXP 78
31566: PUSH
31567: LD_VAR 0 2
31571: ARRAY
31572: NOT
31573: PUSH
31574: LD_EXP 79
31578: PUSH
31579: LD_VAR 0 2
31583: ARRAY
31584: NOT
31585: AND
31586: PUSH
31587: LD_EXP 76
31591: PUSH
31592: LD_VAR 0 4
31596: ARRAY
31597: PUSH
31598: LD_INT 1
31600: GREATER
31601: AND
31602: IFFALSE 31733
// begin ComCancel ( j ) ;
31604: LD_VAR 0 3
31608: PPUSH
31609: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
31613: LD_ADDR_EXP 76
31617: PUSH
31618: LD_EXP 76
31622: PPUSH
31623: LD_VAR 0 4
31627: PPUSH
31628: LD_EXP 76
31632: PUSH
31633: LD_VAR 0 4
31637: ARRAY
31638: PPUSH
31639: LD_EXP 76
31643: PUSH
31644: LD_VAR 0 4
31648: ARRAY
31649: PUSH
31650: LD_INT 1
31652: MINUS
31653: PPUSH
31654: LD_EXP 76
31658: PUSH
31659: LD_VAR 0 4
31663: ARRAY
31664: PPUSH
31665: LD_INT 0
31667: PPUSH
31668: CALL 50270 0 4
31672: PPUSH
31673: CALL_OW 1
31677: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
31678: LD_ADDR_EXP 76
31682: PUSH
31683: LD_EXP 76
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_EXP 76
31697: PUSH
31698: LD_VAR 0 4
31702: ARRAY
31703: PPUSH
31704: LD_EXP 76
31708: PUSH
31709: LD_VAR 0 4
31713: ARRAY
31714: PPUSH
31715: LD_INT 1
31717: PPUSH
31718: LD_INT 0
31720: PPUSH
31721: CALL 50270 0 4
31725: PPUSH
31726: CALL_OW 1
31730: ST_TO_ADDR
// continue ;
31731: GO 31320
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
31733: LD_EXP 78
31737: PUSH
31738: LD_VAR 0 2
31742: ARRAY
31743: PUSH
31744: LD_EXP 79
31748: PUSH
31749: LD_VAR 0 2
31753: ARRAY
31754: NOT
31755: AND
31756: IFFALSE 31883
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
31758: LD_ADDR_EXP 79
31762: PUSH
31763: LD_EXP 79
31767: PPUSH
31768: LD_VAR 0 2
31772: PUSH
31773: LD_EXP 79
31777: PUSH
31778: LD_VAR 0 2
31782: ARRAY
31783: PUSH
31784: LD_INT 1
31786: PLUS
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PPUSH
31792: LD_EXP 78
31796: PUSH
31797: LD_VAR 0 2
31801: ARRAY
31802: PUSH
31803: LD_INT 1
31805: ARRAY
31806: PPUSH
31807: CALL 51287 0 3
31811: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
31812: LD_EXP 78
31816: PUSH
31817: LD_VAR 0 2
31821: ARRAY
31822: PUSH
31823: LD_INT 1
31825: ARRAY
31826: PPUSH
31827: LD_INT 112
31829: PPUSH
31830: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
31834: LD_ADDR_VAR 0 9
31838: PUSH
31839: LD_EXP 78
31843: PUSH
31844: LD_VAR 0 2
31848: ARRAY
31849: PPUSH
31850: LD_INT 1
31852: PPUSH
31853: CALL_OW 3
31857: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
31858: LD_ADDR_EXP 78
31862: PUSH
31863: LD_EXP 78
31867: PPUSH
31868: LD_VAR 0 2
31872: PPUSH
31873: LD_VAR 0 9
31877: PPUSH
31878: CALL_OW 1
31882: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
31883: LD_EXP 78
31887: PUSH
31888: LD_VAR 0 2
31892: ARRAY
31893: PUSH
31894: LD_EXP 79
31898: PUSH
31899: LD_VAR 0 2
31903: ARRAY
31904: AND
31905: PUSH
31906: LD_EXP 79
31910: PUSH
31911: LD_VAR 0 2
31915: ARRAY
31916: PUSH
31917: LD_INT 1
31919: ARRAY
31920: PPUSH
31921: CALL_OW 310
31925: NOT
31926: AND
31927: PUSH
31928: LD_VAR 0 3
31932: PPUSH
31933: CALL_OW 313
31937: PUSH
31938: LD_INT 6
31940: EQUAL
31941: AND
31942: IFFALSE 31998
// begin tmp2 := UnitsInside ( j ) ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_VAR 0 3
31953: PPUSH
31954: CALL_OW 313
31958: ST_TO_ADDR
// if tmp2 = 6 then
31959: LD_VAR 0 9
31963: PUSH
31964: LD_INT 6
31966: EQUAL
31967: IFFALSE 31998
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
31969: LD_VAR 0 9
31973: PUSH
31974: LD_INT 1
31976: ARRAY
31977: PPUSH
31978: LD_INT 112
31980: PPUSH
31981: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
31985: LD_VAR 0 9
31989: PUSH
31990: LD_INT 1
31992: ARRAY
31993: PPUSH
31994: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
31998: LD_EXP 79
32002: PUSH
32003: LD_VAR 0 2
32007: ARRAY
32008: PUSH
32009: LD_EXP 79
32013: PUSH
32014: LD_VAR 0 2
32018: ARRAY
32019: PUSH
32020: LD_INT 1
32022: ARRAY
32023: PPUSH
32024: CALL_OW 314
32028: NOT
32029: AND
32030: PUSH
32031: LD_EXP 79
32035: PUSH
32036: LD_VAR 0 2
32040: ARRAY
32041: PUSH
32042: LD_INT 1
32044: ARRAY
32045: PPUSH
32046: CALL_OW 310
32050: NOT
32051: AND
32052: IFFALSE 32078
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
32054: LD_EXP 79
32058: PUSH
32059: LD_VAR 0 2
32063: ARRAY
32064: PUSH
32065: LD_INT 1
32067: ARRAY
32068: PPUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
32078: LD_EXP 79
32082: PUSH
32083: LD_VAR 0 2
32087: ARRAY
32088: PUSH
32089: LD_INT 1
32091: ARRAY
32092: PPUSH
32093: CALL_OW 310
32097: PUSH
32098: LD_EXP 79
32102: PUSH
32103: LD_VAR 0 2
32107: ARRAY
32108: PUSH
32109: LD_INT 1
32111: ARRAY
32112: PPUSH
32113: CALL_OW 310
32117: PPUSH
32118: CALL_OW 461
32122: PUSH
32123: LD_INT 3
32125: NONEQUAL
32126: AND
32127: IFFALSE 32148
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
32129: LD_EXP 79
32133: PUSH
32134: LD_VAR 0 2
32138: ARRAY
32139: PUSH
32140: LD_INT 1
32142: ARRAY
32143: PPUSH
32144: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
32148: LD_VAR 0 3
32152: PPUSH
32153: CALL_OW 461
32157: PUSH
32158: LD_INT 6
32160: EQUAL
32161: PUSH
32162: LD_VAR 0 6
32166: PUSH
32167: LD_INT 1
32169: GREATER
32170: AND
32171: IFFALSE 32311
// begin sci := [ ] ;
32173: LD_ADDR_VAR 0 8
32177: PUSH
32178: EMPTY
32179: ST_TO_ADDR
// for x in tmp diff j do
32180: LD_ADDR_VAR 0 7
32184: PUSH
32185: LD_VAR 0 6
32189: PUSH
32190: LD_VAR 0 3
32194: DIFF
32195: PUSH
32196: FOR_IN
32197: IFFALSE 32237
// begin if BuildingStatus ( x ) = bs_idle then
32199: LD_VAR 0 7
32203: PPUSH
32204: CALL_OW 461
32208: PUSH
32209: LD_INT 2
32211: EQUAL
32212: IFFALSE 32235
// sci := sci ^ UnitsInside ( x ) ;
32214: LD_ADDR_VAR 0 8
32218: PUSH
32219: LD_VAR 0 8
32223: PUSH
32224: LD_VAR 0 7
32228: PPUSH
32229: CALL_OW 313
32233: ADD
32234: ST_TO_ADDR
// end ;
32235: GO 32196
32237: POP
32238: POP
// if not sci then
32239: LD_VAR 0 8
32243: NOT
32244: IFFALSE 32248
// continue ;
32246: GO 31320
// for x in sci do
32248: LD_ADDR_VAR 0 7
32252: PUSH
32253: LD_VAR 0 8
32257: PUSH
32258: FOR_IN
32259: IFFALSE 32309
// if IsInUnit ( x ) and not HasTask ( x ) then
32261: LD_VAR 0 7
32265: PPUSH
32266: CALL_OW 310
32270: PUSH
32271: LD_VAR 0 7
32275: PPUSH
32276: CALL_OW 314
32280: NOT
32281: AND
32282: IFFALSE 32307
// begin ComExitBuilding ( x ) ;
32284: LD_VAR 0 7
32288: PPUSH
32289: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32293: LD_VAR 0 7
32297: PPUSH
32298: LD_VAR 0 3
32302: PPUSH
32303: CALL_OW 180
// end ;
32307: GO 32258
32309: POP
32310: POP
// end ; end ;
32311: GO 31320
32313: POP
32314: POP
// end ;
32315: GO 31274
32317: POP
32318: POP
// end ;
32319: LD_VAR 0 1
32323: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
32324: LD_INT 0
32326: PPUSH
32327: PPUSH
// if not mc_bases then
32328: LD_EXP 49
32332: NOT
32333: IFFALSE 32337
// exit ;
32335: GO 32418
// for i = 1 to mc_bases do
32337: LD_ADDR_VAR 0 2
32341: PUSH
32342: DOUBLE
32343: LD_INT 1
32345: DEC
32346: ST_TO_ADDR
32347: LD_EXP 49
32351: PUSH
32352: FOR_TO
32353: IFFALSE 32416
// if mc_mines [ i ] and mc_miners [ i ] then
32355: LD_EXP 62
32359: PUSH
32360: LD_VAR 0 2
32364: ARRAY
32365: PUSH
32366: LD_EXP 63
32370: PUSH
32371: LD_VAR 0 2
32375: ARRAY
32376: AND
32377: IFFALSE 32414
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
32379: LD_EXP 63
32383: PUSH
32384: LD_VAR 0 2
32388: ARRAY
32389: PUSH
32390: LD_INT 1
32392: ARRAY
32393: PPUSH
32394: CALL_OW 255
32398: PPUSH
32399: LD_EXP 62
32403: PUSH
32404: LD_VAR 0 2
32408: ARRAY
32409: PPUSH
32410: CALL 47909 0 2
32414: GO 32352
32416: POP
32417: POP
// end ;
32418: LD_VAR 0 1
32422: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
32423: LD_INT 0
32425: PPUSH
32426: PPUSH
32427: PPUSH
32428: PPUSH
32429: PPUSH
32430: PPUSH
32431: PPUSH
32432: PPUSH
// if not mc_bases or not mc_parking then
32433: LD_EXP 49
32437: NOT
32438: PUSH
32439: LD_EXP 73
32443: NOT
32444: OR
32445: IFFALSE 32449
// exit ;
32447: GO 33161
// for i = 1 to mc_bases do
32449: LD_ADDR_VAR 0 2
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_EXP 49
32463: PUSH
32464: FOR_TO
32465: IFFALSE 33159
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
32467: LD_EXP 49
32471: PUSH
32472: LD_VAR 0 2
32476: ARRAY
32477: NOT
32478: PUSH
32479: LD_EXP 73
32483: PUSH
32484: LD_VAR 0 2
32488: ARRAY
32489: NOT
32490: OR
32491: IFFALSE 32495
// continue ;
32493: GO 32464
// if mc_scan [ i ] then
32495: LD_EXP 72
32499: PUSH
32500: LD_VAR 0 2
32504: ARRAY
32505: IFFALSE 32531
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32507: LD_ADDR_EXP 61
32511: PUSH
32512: LD_EXP 61
32516: PPUSH
32517: LD_VAR 0 2
32521: PPUSH
32522: EMPTY
32523: PPUSH
32524: CALL_OW 1
32528: ST_TO_ADDR
// continue ;
32529: GO 32464
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
32531: LD_ADDR_VAR 0 5
32535: PUSH
32536: LD_EXP 49
32540: PUSH
32541: LD_VAR 0 2
32545: ARRAY
32546: PUSH
32547: LD_INT 1
32549: ARRAY
32550: PPUSH
32551: CALL_OW 255
32555: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32556: LD_ADDR_VAR 0 6
32560: PUSH
32561: LD_EXP 49
32565: PUSH
32566: LD_VAR 0 2
32570: ARRAY
32571: PPUSH
32572: LD_INT 30
32574: PUSH
32575: LD_INT 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PPUSH
32582: CALL_OW 72
32586: ST_TO_ADDR
// if not fac then
32587: LD_VAR 0 6
32591: NOT
32592: IFFALSE 32643
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32594: LD_ADDR_VAR 0 6
32598: PUSH
32599: LD_EXP 49
32603: PUSH
32604: LD_VAR 0 2
32608: ARRAY
32609: PPUSH
32610: LD_INT 2
32612: PUSH
32613: LD_INT 30
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 30
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: PPUSH
32638: CALL_OW 72
32642: ST_TO_ADDR
// if not fac then
32643: LD_VAR 0 6
32647: NOT
32648: IFFALSE 32652
// continue ;
32650: GO 32464
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
32652: LD_ADDR_VAR 0 7
32656: PUSH
32657: LD_EXP 73
32661: PUSH
32662: LD_VAR 0 2
32666: ARRAY
32667: PPUSH
32668: LD_INT 22
32670: PUSH
32671: LD_VAR 0 5
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 21
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 24
32695: PUSH
32696: LD_INT 1000
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 70
32716: PUSH
32717: LD_INT 22
32719: PUSH
32720: LD_VAR 0 5
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 91
32731: PUSH
32732: LD_VAR 0 6
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: PUSH
32741: LD_INT 25
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 21
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 24
32764: PUSH
32765: LD_INT 1000
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: PPUSH
32782: CALL_OW 69
32786: UNION
32787: ST_TO_ADDR
// if not vehs then
32788: LD_VAR 0 7
32792: NOT
32793: IFFALSE 32819
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32795: LD_ADDR_EXP 61
32799: PUSH
32800: LD_EXP 61
32804: PPUSH
32805: LD_VAR 0 2
32809: PPUSH
32810: EMPTY
32811: PPUSH
32812: CALL_OW 1
32816: ST_TO_ADDR
// continue ;
32817: GO 32464
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32819: LD_ADDR_VAR 0 8
32823: PUSH
32824: LD_EXP 49
32828: PUSH
32829: LD_VAR 0 2
32833: ARRAY
32834: PPUSH
32835: LD_INT 30
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PPUSH
32845: CALL_OW 72
32849: ST_TO_ADDR
// if tmp then
32850: LD_VAR 0 8
32854: IFFALSE 32957
// begin for j in tmp do
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_VAR 0 8
32865: PUSH
32866: FOR_IN
32867: IFFALSE 32955
// for k in UnitsInside ( j ) do
32869: LD_ADDR_VAR 0 4
32873: PUSH
32874: LD_VAR 0 3
32878: PPUSH
32879: CALL_OW 313
32883: PUSH
32884: FOR_IN
32885: IFFALSE 32951
// if k then
32887: LD_VAR 0 4
32891: IFFALSE 32949
// if not k in mc_repair_vehicle [ i ] then
32893: LD_VAR 0 4
32897: PUSH
32898: LD_EXP 61
32902: PUSH
32903: LD_VAR 0 2
32907: ARRAY
32908: IN
32909: NOT
32910: IFFALSE 32949
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
32912: LD_ADDR_EXP 61
32916: PUSH
32917: LD_EXP 61
32921: PPUSH
32922: LD_VAR 0 2
32926: PPUSH
32927: LD_EXP 61
32931: PUSH
32932: LD_VAR 0 2
32936: ARRAY
32937: PUSH
32938: LD_VAR 0 4
32942: UNION
32943: PPUSH
32944: CALL_OW 1
32948: ST_TO_ADDR
32949: GO 32884
32951: POP
32952: POP
32953: GO 32866
32955: POP
32956: POP
// end ; if not mc_repair_vehicle [ i ] then
32957: LD_EXP 61
32961: PUSH
32962: LD_VAR 0 2
32966: ARRAY
32967: NOT
32968: IFFALSE 32972
// continue ;
32970: GO 32464
// for j in mc_repair_vehicle [ i ] do
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_EXP 61
32981: PUSH
32982: LD_VAR 0 2
32986: ARRAY
32987: PUSH
32988: FOR_IN
32989: IFFALSE 33155
// begin if GetClass ( j ) <> 3 then
32991: LD_VAR 0 3
32995: PPUSH
32996: CALL_OW 257
33000: PUSH
33001: LD_INT 3
33003: NONEQUAL
33004: IFFALSE 33045
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
33006: LD_ADDR_EXP 61
33010: PUSH
33011: LD_EXP 61
33015: PPUSH
33016: LD_VAR 0 2
33020: PPUSH
33021: LD_EXP 61
33025: PUSH
33026: LD_VAR 0 2
33030: ARRAY
33031: PUSH
33032: LD_VAR 0 3
33036: DIFF
33037: PPUSH
33038: CALL_OW 1
33042: ST_TO_ADDR
// continue ;
33043: GO 32988
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33045: LD_VAR 0 3
33049: PPUSH
33050: CALL_OW 311
33054: NOT
33055: PUSH
33056: LD_VAR 0 3
33060: PUSH
33061: LD_EXP 52
33065: PUSH
33066: LD_VAR 0 2
33070: ARRAY
33071: PUSH
33072: LD_INT 1
33074: ARRAY
33075: IN
33076: NOT
33077: AND
33078: PUSH
33079: LD_VAR 0 3
33083: PUSH
33084: LD_EXP 52
33088: PUSH
33089: LD_VAR 0 2
33093: ARRAY
33094: PUSH
33095: LD_INT 2
33097: ARRAY
33098: IN
33099: NOT
33100: AND
33101: IFFALSE 33153
// begin if IsInUnit ( j ) then
33103: LD_VAR 0 3
33107: PPUSH
33108: CALL_OW 310
33112: IFFALSE 33123
// ComExitBuilding ( j ) ;
33114: LD_VAR 0 3
33118: PPUSH
33119: CALL_OW 122
// if not HasTask ( j ) then
33123: LD_VAR 0 3
33127: PPUSH
33128: CALL_OW 314
33132: NOT
33133: IFFALSE 33153
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
33135: LD_VAR 0 3
33139: PPUSH
33140: LD_VAR 0 7
33144: PUSH
33145: LD_INT 1
33147: ARRAY
33148: PPUSH
33149: CALL_OW 189
// end ; end ;
33153: GO 32988
33155: POP
33156: POP
// end ;
33157: GO 32464
33159: POP
33160: POP
// end ;
33161: LD_VAR 0 1
33165: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
33170: PPUSH
33171: PPUSH
33172: PPUSH
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
// if not mc_bases then
33179: LD_EXP 49
33183: NOT
33184: IFFALSE 33188
// exit ;
33186: GO 33990
// for i = 1 to mc_bases do
33188: LD_ADDR_VAR 0 2
33192: PUSH
33193: DOUBLE
33194: LD_INT 1
33196: DEC
33197: ST_TO_ADDR
33198: LD_EXP 49
33202: PUSH
33203: FOR_TO
33204: IFFALSE 33988
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
33206: LD_EXP 77
33210: PUSH
33211: LD_VAR 0 2
33215: ARRAY
33216: NOT
33217: PUSH
33218: LD_EXP 52
33222: PUSH
33223: LD_VAR 0 2
33227: ARRAY
33228: PUSH
33229: LD_INT 1
33231: ARRAY
33232: OR
33233: PUSH
33234: LD_EXP 52
33238: PUSH
33239: LD_VAR 0 2
33243: ARRAY
33244: PUSH
33245: LD_INT 2
33247: ARRAY
33248: OR
33249: PUSH
33250: LD_EXP 75
33254: PUSH
33255: LD_VAR 0 2
33259: ARRAY
33260: PPUSH
33261: LD_INT 1
33263: PPUSH
33264: CALL_OW 325
33268: NOT
33269: OR
33270: PUSH
33271: LD_EXP 72
33275: PUSH
33276: LD_VAR 0 2
33280: ARRAY
33281: OR
33282: IFFALSE 33286
// continue ;
33284: GO 33203
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
33286: LD_ADDR_VAR 0 8
33290: PUSH
33291: LD_EXP 49
33295: PUSH
33296: LD_VAR 0 2
33300: ARRAY
33301: PPUSH
33302: LD_INT 25
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 50
33314: PUSH
33315: EMPTY
33316: LIST
33317: PUSH
33318: LD_INT 3
33320: PUSH
33321: LD_INT 60
33323: PUSH
33324: EMPTY
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: PPUSH
33336: CALL_OW 72
33340: PUSH
33341: LD_EXP 53
33345: PUSH
33346: LD_VAR 0 2
33350: ARRAY
33351: DIFF
33352: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33353: LD_ADDR_VAR 0 9
33357: PUSH
33358: LD_EXP 49
33362: PUSH
33363: LD_VAR 0 2
33367: ARRAY
33368: PPUSH
33369: LD_INT 2
33371: PUSH
33372: LD_INT 30
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 30
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: PPUSH
33397: CALL_OW 72
33401: ST_TO_ADDR
// if not tmp or not dep then
33402: LD_VAR 0 8
33406: NOT
33407: PUSH
33408: LD_VAR 0 9
33412: NOT
33413: OR
33414: IFFALSE 33418
// continue ;
33416: GO 33203
// side := GetSide ( tmp [ 1 ] ) ;
33418: LD_ADDR_VAR 0 11
33422: PUSH
33423: LD_VAR 0 8
33427: PUSH
33428: LD_INT 1
33430: ARRAY
33431: PPUSH
33432: CALL_OW 255
33436: ST_TO_ADDR
// dep := dep [ 1 ] ;
33437: LD_ADDR_VAR 0 9
33441: PUSH
33442: LD_VAR 0 9
33446: PUSH
33447: LD_INT 1
33449: ARRAY
33450: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
33451: LD_ADDR_VAR 0 7
33455: PUSH
33456: LD_EXP 77
33460: PUSH
33461: LD_VAR 0 2
33465: ARRAY
33466: PPUSH
33467: LD_INT 22
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 25
33479: PUSH
33480: LD_INT 12
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PPUSH
33491: CALL_OW 70
33495: PUSH
33496: LD_INT 22
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 25
33508: PUSH
33509: LD_INT 12
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 91
33518: PUSH
33519: LD_VAR 0 9
33523: PUSH
33524: LD_INT 20
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: LIST
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: PPUSH
33537: CALL_OW 69
33541: UNION
33542: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
33543: LD_ADDR_VAR 0 10
33547: PUSH
33548: LD_EXP 77
33552: PUSH
33553: LD_VAR 0 2
33557: ARRAY
33558: PPUSH
33559: LD_INT 81
33561: PUSH
33562: LD_VAR 0 11
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PPUSH
33571: CALL_OW 70
33575: ST_TO_ADDR
// if not apes or danger_at_area then
33576: LD_VAR 0 7
33580: NOT
33581: PUSH
33582: LD_VAR 0 10
33586: OR
33587: IFFALSE 33637
// begin if mc_taming [ i ] then
33589: LD_EXP 80
33593: PUSH
33594: LD_VAR 0 2
33598: ARRAY
33599: IFFALSE 33635
// begin MC_Reset ( i , 121 ) ;
33601: LD_VAR 0 2
33605: PPUSH
33606: LD_INT 121
33608: PPUSH
33609: CALL 19685 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33613: LD_ADDR_EXP 80
33617: PUSH
33618: LD_EXP 80
33622: PPUSH
33623: LD_VAR 0 2
33627: PPUSH
33628: EMPTY
33629: PPUSH
33630: CALL_OW 1
33634: ST_TO_ADDR
// end ; continue ;
33635: GO 33203
// end ; for j in tmp do
33637: LD_ADDR_VAR 0 3
33641: PUSH
33642: LD_VAR 0 8
33646: PUSH
33647: FOR_IN
33648: IFFALSE 33984
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
33650: LD_VAR 0 3
33654: PUSH
33655: LD_EXP 80
33659: PUSH
33660: LD_VAR 0 2
33664: ARRAY
33665: IN
33666: NOT
33667: PUSH
33668: LD_EXP 80
33672: PUSH
33673: LD_VAR 0 2
33677: ARRAY
33678: PUSH
33679: LD_INT 3
33681: LESS
33682: AND
33683: IFFALSE 33741
// begin SetTag ( j , 121 ) ;
33685: LD_VAR 0 3
33689: PPUSH
33690: LD_INT 121
33692: PPUSH
33693: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
33697: LD_ADDR_EXP 80
33701: PUSH
33702: LD_EXP 80
33706: PPUSH
33707: LD_VAR 0 2
33711: PUSH
33712: LD_EXP 80
33716: PUSH
33717: LD_VAR 0 2
33721: ARRAY
33722: PUSH
33723: LD_INT 1
33725: PLUS
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PPUSH
33731: LD_VAR 0 3
33735: PPUSH
33736: CALL 51287 0 3
33740: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
33741: LD_VAR 0 3
33745: PUSH
33746: LD_EXP 80
33750: PUSH
33751: LD_VAR 0 2
33755: ARRAY
33756: IN
33757: IFFALSE 33982
// begin if GetClass ( j ) <> 4 then
33759: LD_VAR 0 3
33763: PPUSH
33764: CALL_OW 257
33768: PUSH
33769: LD_INT 4
33771: NONEQUAL
33772: IFFALSE 33825
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
33774: LD_ADDR_EXP 80
33778: PUSH
33779: LD_EXP 80
33783: PPUSH
33784: LD_VAR 0 2
33788: PPUSH
33789: LD_EXP 80
33793: PUSH
33794: LD_VAR 0 2
33798: ARRAY
33799: PUSH
33800: LD_VAR 0 3
33804: DIFF
33805: PPUSH
33806: CALL_OW 1
33810: ST_TO_ADDR
// SetTag ( j , 0 ) ;
33811: LD_VAR 0 3
33815: PPUSH
33816: LD_INT 0
33818: PPUSH
33819: CALL_OW 109
// continue ;
33823: GO 33647
// end ; if IsInUnit ( j ) then
33825: LD_VAR 0 3
33829: PPUSH
33830: CALL_OW 310
33834: IFFALSE 33845
// ComExitBuilding ( j ) ;
33836: LD_VAR 0 3
33840: PPUSH
33841: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
33845: LD_ADDR_VAR 0 6
33849: PUSH
33850: LD_VAR 0 7
33854: PPUSH
33855: LD_VAR 0 3
33859: PPUSH
33860: CALL_OW 74
33864: ST_TO_ADDR
// if not ape then
33865: LD_VAR 0 6
33869: NOT
33870: IFFALSE 33874
// break ;
33872: GO 33984
// x := GetX ( ape ) ;
33874: LD_ADDR_VAR 0 4
33878: PUSH
33879: LD_VAR 0 6
33883: PPUSH
33884: CALL_OW 250
33888: ST_TO_ADDR
// y := GetY ( ape ) ;
33889: LD_ADDR_VAR 0 5
33893: PUSH
33894: LD_VAR 0 6
33898: PPUSH
33899: CALL_OW 251
33903: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33904: LD_VAR 0 4
33908: PPUSH
33909: LD_VAR 0 5
33913: PPUSH
33914: CALL_OW 488
33918: NOT
33919: PUSH
33920: LD_VAR 0 11
33924: PPUSH
33925: LD_VAR 0 4
33929: PPUSH
33930: LD_VAR 0 5
33934: PPUSH
33935: LD_INT 20
33937: PPUSH
33938: CALL 51781 0 4
33942: PUSH
33943: LD_INT 4
33945: ARRAY
33946: OR
33947: IFFALSE 33951
// break ;
33949: GO 33984
// if not HasTask ( j ) then
33951: LD_VAR 0 3
33955: PPUSH
33956: CALL_OW 314
33960: NOT
33961: IFFALSE 33982
// ComTameXY ( j , x , y ) ;
33963: LD_VAR 0 3
33967: PPUSH
33968: LD_VAR 0 4
33972: PPUSH
33973: LD_VAR 0 5
33977: PPUSH
33978: CALL_OW 131
// end ; end ;
33982: GO 33647
33984: POP
33985: POP
// end ;
33986: GO 33203
33988: POP
33989: POP
// end ;
33990: LD_VAR 0 1
33994: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
33995: LD_INT 0
33997: PPUSH
33998: PPUSH
33999: PPUSH
34000: PPUSH
34001: PPUSH
34002: PPUSH
34003: PPUSH
34004: PPUSH
// if not mc_bases then
34005: LD_EXP 49
34009: NOT
34010: IFFALSE 34014
// exit ;
34012: GO 34640
// for i = 1 to mc_bases do
34014: LD_ADDR_VAR 0 2
34018: PUSH
34019: DOUBLE
34020: LD_INT 1
34022: DEC
34023: ST_TO_ADDR
34024: LD_EXP 49
34028: PUSH
34029: FOR_TO
34030: IFFALSE 34638
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
34032: LD_EXP 78
34036: PUSH
34037: LD_VAR 0 2
34041: ARRAY
34042: NOT
34043: PUSH
34044: LD_EXP 78
34048: PUSH
34049: LD_VAR 0 2
34053: ARRAY
34054: PPUSH
34055: LD_INT 25
34057: PUSH
34058: LD_INT 12
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PPUSH
34065: CALL_OW 72
34069: NOT
34070: OR
34071: IFFALSE 34075
// continue ;
34073: GO 34029
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
34075: LD_ADDR_VAR 0 5
34079: PUSH
34080: LD_EXP 78
34084: PUSH
34085: LD_VAR 0 2
34089: ARRAY
34090: PUSH
34091: LD_INT 1
34093: ARRAY
34094: PPUSH
34095: CALL_OW 255
34099: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
34100: LD_VAR 0 5
34104: PPUSH
34105: LD_INT 2
34107: PPUSH
34108: CALL_OW 325
34112: IFFALSE 34365
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34114: LD_ADDR_VAR 0 4
34118: PUSH
34119: LD_EXP 78
34123: PUSH
34124: LD_VAR 0 2
34128: ARRAY
34129: PPUSH
34130: LD_INT 25
34132: PUSH
34133: LD_INT 16
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PPUSH
34140: CALL_OW 72
34144: ST_TO_ADDR
// if tmp < 6 then
34145: LD_VAR 0 4
34149: PUSH
34150: LD_INT 6
34152: LESS
34153: IFFALSE 34365
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34155: LD_ADDR_VAR 0 6
34159: PUSH
34160: LD_EXP 49
34164: PUSH
34165: LD_VAR 0 2
34169: ARRAY
34170: PPUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 30
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 30
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: PPUSH
34199: CALL_OW 72
34203: ST_TO_ADDR
// if depot then
34204: LD_VAR 0 6
34208: IFFALSE 34365
// begin selected := 0 ;
34210: LD_ADDR_VAR 0 7
34214: PUSH
34215: LD_INT 0
34217: ST_TO_ADDR
// for j in depot do
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_VAR 0 6
34227: PUSH
34228: FOR_IN
34229: IFFALSE 34260
// begin if UnitsInside ( j ) < 6 then
34231: LD_VAR 0 3
34235: PPUSH
34236: CALL_OW 313
34240: PUSH
34241: LD_INT 6
34243: LESS
34244: IFFALSE 34258
// begin selected := j ;
34246: LD_ADDR_VAR 0 7
34250: PUSH
34251: LD_VAR 0 3
34255: ST_TO_ADDR
// break ;
34256: GO 34260
// end ; end ;
34258: GO 34228
34260: POP
34261: POP
// if selected then
34262: LD_VAR 0 7
34266: IFFALSE 34365
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34268: LD_ADDR_VAR 0 3
34272: PUSH
34273: LD_EXP 78
34277: PUSH
34278: LD_VAR 0 2
34282: ARRAY
34283: PPUSH
34284: LD_INT 25
34286: PUSH
34287: LD_INT 12
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PPUSH
34294: CALL_OW 72
34298: PUSH
34299: FOR_IN
34300: IFFALSE 34363
// if not HasTask ( j ) then
34302: LD_VAR 0 3
34306: PPUSH
34307: CALL_OW 314
34311: NOT
34312: IFFALSE 34361
// begin if not IsInUnit ( j ) then
34314: LD_VAR 0 3
34318: PPUSH
34319: CALL_OW 310
34323: NOT
34324: IFFALSE 34340
// ComEnterUnit ( j , selected ) ;
34326: LD_VAR 0 3
34330: PPUSH
34331: LD_VAR 0 7
34335: PPUSH
34336: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
34340: LD_VAR 0 3
34344: PPUSH
34345: LD_INT 16
34347: PPUSH
34348: CALL_OW 183
// AddComExitBuilding ( j ) ;
34352: LD_VAR 0 3
34356: PPUSH
34357: CALL_OW 182
// end ;
34361: GO 34299
34363: POP
34364: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
34365: LD_VAR 0 5
34369: PPUSH
34370: LD_INT 11
34372: PPUSH
34373: CALL_OW 325
34377: IFFALSE 34636
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34379: LD_ADDR_VAR 0 4
34383: PUSH
34384: LD_EXP 78
34388: PUSH
34389: LD_VAR 0 2
34393: ARRAY
34394: PPUSH
34395: LD_INT 25
34397: PUSH
34398: LD_INT 16
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PPUSH
34405: CALL_OW 72
34409: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
34410: LD_VAR 0 4
34414: PUSH
34415: LD_INT 6
34417: GREATEREQUAL
34418: PUSH
34419: LD_VAR 0 5
34423: PPUSH
34424: LD_INT 2
34426: PPUSH
34427: CALL_OW 325
34431: NOT
34432: OR
34433: IFFALSE 34636
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
34435: LD_ADDR_VAR 0 8
34439: PUSH
34440: LD_EXP 49
34444: PUSH
34445: LD_VAR 0 2
34449: ARRAY
34450: PPUSH
34451: LD_INT 2
34453: PUSH
34454: LD_INT 30
34456: PUSH
34457: LD_INT 4
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 30
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: LIST
34478: PPUSH
34479: CALL_OW 72
34483: ST_TO_ADDR
// if barracks then
34484: LD_VAR 0 8
34488: IFFALSE 34636
// begin selected := 0 ;
34490: LD_ADDR_VAR 0 7
34494: PUSH
34495: LD_INT 0
34497: ST_TO_ADDR
// for j in barracks do
34498: LD_ADDR_VAR 0 3
34502: PUSH
34503: LD_VAR 0 8
34507: PUSH
34508: FOR_IN
34509: IFFALSE 34540
// begin if UnitsInside ( j ) < 6 then
34511: LD_VAR 0 3
34515: PPUSH
34516: CALL_OW 313
34520: PUSH
34521: LD_INT 6
34523: LESS
34524: IFFALSE 34538
// begin selected := j ;
34526: LD_ADDR_VAR 0 7
34530: PUSH
34531: LD_VAR 0 3
34535: ST_TO_ADDR
// break ;
34536: GO 34540
// end ; end ;
34538: GO 34508
34540: POP
34541: POP
// if selected then
34542: LD_VAR 0 7
34546: IFFALSE 34636
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34548: LD_ADDR_VAR 0 3
34552: PUSH
34553: LD_EXP 78
34557: PUSH
34558: LD_VAR 0 2
34562: ARRAY
34563: PPUSH
34564: LD_INT 25
34566: PUSH
34567: LD_INT 12
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PPUSH
34574: CALL_OW 72
34578: PUSH
34579: FOR_IN
34580: IFFALSE 34634
// if not IsInUnit ( j ) and not HasTask ( j ) then
34582: LD_VAR 0 3
34586: PPUSH
34587: CALL_OW 310
34591: NOT
34592: PUSH
34593: LD_VAR 0 3
34597: PPUSH
34598: CALL_OW 314
34602: NOT
34603: AND
34604: IFFALSE 34632
// begin ComEnterUnit ( j , selected ) ;
34606: LD_VAR 0 3
34610: PPUSH
34611: LD_VAR 0 7
34615: PPUSH
34616: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
34620: LD_VAR 0 3
34624: PPUSH
34625: LD_INT 15
34627: PPUSH
34628: CALL_OW 183
// end ;
34632: GO 34579
34634: POP
34635: POP
// end ; end ; end ; end ; end ;
34636: GO 34029
34638: POP
34639: POP
// end ;
34640: LD_VAR 0 1
34644: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
34645: LD_INT 0
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
// if not mc_bases then
34651: LD_EXP 49
34655: NOT
34656: IFFALSE 34660
// exit ;
34658: GO 34838
// for i = 1 to mc_bases do
34660: LD_ADDR_VAR 0 2
34664: PUSH
34665: DOUBLE
34666: LD_INT 1
34668: DEC
34669: ST_TO_ADDR
34670: LD_EXP 49
34674: PUSH
34675: FOR_TO
34676: IFFALSE 34836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
34678: LD_ADDR_VAR 0 4
34682: PUSH
34683: LD_EXP 49
34687: PUSH
34688: LD_VAR 0 2
34692: ARRAY
34693: PPUSH
34694: LD_INT 25
34696: PUSH
34697: LD_INT 9
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PPUSH
34704: CALL_OW 72
34708: ST_TO_ADDR
// if not tmp then
34709: LD_VAR 0 4
34713: NOT
34714: IFFALSE 34718
// continue ;
34716: GO 34675
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
34718: LD_EXP 75
34722: PUSH
34723: LD_VAR 0 2
34727: ARRAY
34728: PPUSH
34729: LD_INT 29
34731: PPUSH
34732: CALL_OW 325
34736: NOT
34737: PUSH
34738: LD_EXP 75
34742: PUSH
34743: LD_VAR 0 2
34747: ARRAY
34748: PPUSH
34749: LD_INT 28
34751: PPUSH
34752: CALL_OW 325
34756: NOT
34757: AND
34758: IFFALSE 34762
// continue ;
34760: GO 34675
// for j in tmp do
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_VAR 0 4
34771: PUSH
34772: FOR_IN
34773: IFFALSE 34832
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34775: LD_VAR 0 3
34779: PUSH
34780: LD_EXP 52
34784: PUSH
34785: LD_VAR 0 2
34789: ARRAY
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: IN
34795: NOT
34796: PUSH
34797: LD_VAR 0 3
34801: PUSH
34802: LD_EXP 52
34806: PUSH
34807: LD_VAR 0 2
34811: ARRAY
34812: PUSH
34813: LD_INT 2
34815: ARRAY
34816: IN
34817: NOT
34818: AND
34819: IFFALSE 34830
// ComSpaceTimeShoot ( j ) ;
34821: LD_VAR 0 3
34825: PPUSH
34826: CALL 44912 0 1
34830: GO 34772
34832: POP
34833: POP
// end ;
34834: GO 34675
34836: POP
34837: POP
// end ;
34838: LD_VAR 0 1
34842: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
34843: LD_INT 0
34845: PPUSH
34846: PPUSH
34847: PPUSH
34848: PPUSH
34849: PPUSH
34850: PPUSH
34851: PPUSH
34852: PPUSH
34853: PPUSH
// if not mc_bases then
34854: LD_EXP 49
34858: NOT
34859: IFFALSE 34863
// exit ;
34861: GO 35485
// for i = 1 to mc_bases do
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_EXP 49
34877: PUSH
34878: FOR_TO
34879: IFFALSE 35483
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
34881: LD_EXP 84
34885: PUSH
34886: LD_VAR 0 2
34890: ARRAY
34891: NOT
34892: PUSH
34893: LD_INT 38
34895: PPUSH
34896: LD_EXP 75
34900: PUSH
34901: LD_VAR 0 2
34905: ARRAY
34906: PPUSH
34907: CALL_OW 321
34911: PUSH
34912: LD_INT 2
34914: NONEQUAL
34915: OR
34916: IFFALSE 34920
// continue ;
34918: GO 34878
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
34920: LD_ADDR_VAR 0 8
34924: PUSH
34925: LD_EXP 49
34929: PUSH
34930: LD_VAR 0 2
34934: ARRAY
34935: PPUSH
34936: LD_INT 30
34938: PUSH
34939: LD_INT 34
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PPUSH
34946: CALL_OW 72
34950: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
34951: LD_ADDR_VAR 0 9
34955: PUSH
34956: LD_EXP 49
34960: PUSH
34961: LD_VAR 0 2
34965: ARRAY
34966: PPUSH
34967: LD_INT 25
34969: PUSH
34970: LD_INT 4
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PPUSH
34977: CALL_OW 72
34981: PPUSH
34982: LD_INT 0
34984: PPUSH
34985: CALL 83867 0 2
34989: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
34990: LD_VAR 0 9
34994: NOT
34995: PUSH
34996: LD_VAR 0 8
35000: NOT
35001: OR
35002: PUSH
35003: LD_EXP 49
35007: PUSH
35008: LD_VAR 0 2
35012: ARRAY
35013: PPUSH
35014: LD_INT 124
35016: PPUSH
35017: CALL 83867 0 2
35021: OR
35022: IFFALSE 35026
// continue ;
35024: GO 34878
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
35026: LD_EXP 85
35030: PUSH
35031: LD_VAR 0 2
35035: ARRAY
35036: PUSH
35037: LD_EXP 84
35041: PUSH
35042: LD_VAR 0 2
35046: ARRAY
35047: LESS
35048: PUSH
35049: LD_EXP 85
35053: PUSH
35054: LD_VAR 0 2
35058: ARRAY
35059: PUSH
35060: LD_VAR 0 8
35064: LESS
35065: AND
35066: IFFALSE 35481
// begin tmp := sci [ 1 ] ;
35068: LD_ADDR_VAR 0 7
35072: PUSH
35073: LD_VAR 0 9
35077: PUSH
35078: LD_INT 1
35080: ARRAY
35081: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
35082: LD_VAR 0 7
35086: PPUSH
35087: LD_INT 124
35089: PPUSH
35090: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: DOUBLE
35100: LD_EXP 84
35104: PUSH
35105: LD_VAR 0 2
35109: ARRAY
35110: INC
35111: ST_TO_ADDR
35112: LD_EXP 84
35116: PUSH
35117: LD_VAR 0 2
35121: ARRAY
35122: PUSH
35123: FOR_DOWNTO
35124: IFFALSE 35467
// begin if IsInUnit ( tmp ) then
35126: LD_VAR 0 7
35130: PPUSH
35131: CALL_OW 310
35135: IFFALSE 35146
// ComExitBuilding ( tmp ) ;
35137: LD_VAR 0 7
35141: PPUSH
35142: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
35146: LD_INT 35
35148: PPUSH
35149: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
35153: LD_VAR 0 7
35157: PPUSH
35158: CALL_OW 310
35162: NOT
35163: PUSH
35164: LD_VAR 0 7
35168: PPUSH
35169: CALL_OW 314
35173: NOT
35174: AND
35175: IFFALSE 35146
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
35177: LD_ADDR_VAR 0 6
35181: PUSH
35182: LD_VAR 0 7
35186: PPUSH
35187: CALL_OW 250
35191: PUSH
35192: LD_VAR 0 7
35196: PPUSH
35197: CALL_OW 251
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35206: LD_INT 35
35208: PPUSH
35209: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
35213: LD_ADDR_VAR 0 4
35217: PUSH
35218: LD_EXP 84
35222: PUSH
35223: LD_VAR 0 2
35227: ARRAY
35228: PUSH
35229: LD_VAR 0 3
35233: ARRAY
35234: PUSH
35235: LD_INT 1
35237: ARRAY
35238: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
35239: LD_ADDR_VAR 0 5
35243: PUSH
35244: LD_EXP 84
35248: PUSH
35249: LD_VAR 0 2
35253: ARRAY
35254: PUSH
35255: LD_VAR 0 3
35259: ARRAY
35260: PUSH
35261: LD_INT 2
35263: ARRAY
35264: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
35265: LD_VAR 0 7
35269: PPUSH
35270: LD_INT 10
35272: PPUSH
35273: CALL 53478 0 2
35277: PUSH
35278: LD_INT 4
35280: ARRAY
35281: IFFALSE 35319
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
35283: LD_VAR 0 7
35287: PPUSH
35288: LD_VAR 0 6
35292: PUSH
35293: LD_INT 1
35295: ARRAY
35296: PPUSH
35297: LD_VAR 0 6
35301: PUSH
35302: LD_INT 2
35304: ARRAY
35305: PPUSH
35306: CALL_OW 111
// wait ( 0 0$10 ) ;
35310: LD_INT 350
35312: PPUSH
35313: CALL_OW 67
// end else
35317: GO 35345
// begin ComMoveXY ( tmp , x , y ) ;
35319: LD_VAR 0 7
35323: PPUSH
35324: LD_VAR 0 4
35328: PPUSH
35329: LD_VAR 0 5
35333: PPUSH
35334: CALL_OW 111
// wait ( 0 0$3 ) ;
35338: LD_INT 105
35340: PPUSH
35341: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
35345: LD_VAR 0 7
35349: PPUSH
35350: LD_VAR 0 4
35354: PPUSH
35355: LD_VAR 0 5
35359: PPUSH
35360: CALL_OW 307
35364: IFFALSE 35206
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
35366: LD_VAR 0 7
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: LD_VAR 0 5
35380: PPUSH
35381: LD_VAR 0 8
35385: PUSH
35386: LD_VAR 0 3
35390: ARRAY
35391: PPUSH
35392: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
35396: LD_INT 35
35398: PPUSH
35399: CALL_OW 67
// until not HasTask ( tmp ) ;
35403: LD_VAR 0 7
35407: PPUSH
35408: CALL_OW 314
35412: NOT
35413: IFFALSE 35396
// mc_teleport_exit_set := Add ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
35415: LD_ADDR_EXP 85
35419: PUSH
35420: LD_EXP 85
35424: PPUSH
35425: LD_VAR 0 2
35429: PUSH
35430: LD_EXP 85
35434: PUSH
35435: LD_VAR 0 2
35439: ARRAY
35440: PUSH
35441: LD_INT 1
35443: PLUS
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PPUSH
35449: LD_VAR 0 8
35453: PUSH
35454: LD_VAR 0 3
35458: ARRAY
35459: PPUSH
35460: CALL 51287 0 3
35464: ST_TO_ADDR
// end ;
35465: GO 35123
35467: POP
35468: POP
// MC_Reset ( i , 124 ) ;
35469: LD_VAR 0 2
35473: PPUSH
35474: LD_INT 124
35476: PPUSH
35477: CALL 19685 0 2
// end ; end ;
35481: GO 34878
35483: POP
35484: POP
// end ;
35485: LD_VAR 0 1
35489: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
35490: LD_INT 0
35492: PPUSH
35493: PPUSH
35494: PPUSH
// if not mc_bases then
35495: LD_EXP 49
35499: NOT
35500: IFFALSE 35504
// exit ;
35502: GO 36110
// for i = 1 to mc_bases do
35504: LD_ADDR_VAR 0 2
35508: PUSH
35509: DOUBLE
35510: LD_INT 1
35512: DEC
35513: ST_TO_ADDR
35514: LD_EXP 49
35518: PUSH
35519: FOR_TO
35520: IFFALSE 36108
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
35522: LD_ADDR_VAR 0 3
35526: PUSH
35527: LD_EXP 49
35531: PUSH
35532: LD_VAR 0 2
35536: ARRAY
35537: PPUSH
35538: LD_INT 25
35540: PUSH
35541: LD_INT 4
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PPUSH
35548: CALL_OW 72
35552: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35553: LD_VAR 0 3
35557: NOT
35558: PUSH
35559: LD_EXP 86
35563: PUSH
35564: LD_VAR 0 2
35568: ARRAY
35569: NOT
35570: OR
35571: PUSH
35572: LD_EXP 49
35576: PUSH
35577: LD_VAR 0 2
35581: ARRAY
35582: PPUSH
35583: LD_INT 2
35585: PUSH
35586: LD_INT 30
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 30
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: LIST
35610: PPUSH
35611: CALL_OW 72
35615: NOT
35616: OR
35617: IFFALSE 35667
// begin if mc_deposits_finder [ i ] then
35619: LD_EXP 87
35623: PUSH
35624: LD_VAR 0 2
35628: ARRAY
35629: IFFALSE 35665
// begin MC_Reset ( i , 125 ) ;
35631: LD_VAR 0 2
35635: PPUSH
35636: LD_INT 125
35638: PPUSH
35639: CALL 19685 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35643: LD_ADDR_EXP 87
35647: PUSH
35648: LD_EXP 87
35652: PPUSH
35653: LD_VAR 0 2
35657: PPUSH
35658: EMPTY
35659: PPUSH
35660: CALL_OW 1
35664: ST_TO_ADDR
// end ; continue ;
35665: GO 35519
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
35667: LD_EXP 86
35671: PUSH
35672: LD_VAR 0 2
35676: ARRAY
35677: PUSH
35678: LD_INT 1
35680: ARRAY
35681: PUSH
35682: LD_INT 3
35684: ARRAY
35685: PUSH
35686: LD_INT 1
35688: EQUAL
35689: PUSH
35690: LD_INT 20
35692: PPUSH
35693: LD_EXP 75
35697: PUSH
35698: LD_VAR 0 2
35702: ARRAY
35703: PPUSH
35704: CALL_OW 321
35708: PUSH
35709: LD_INT 2
35711: NONEQUAL
35712: AND
35713: IFFALSE 35763
// begin if mc_deposits_finder [ i ] then
35715: LD_EXP 87
35719: PUSH
35720: LD_VAR 0 2
35724: ARRAY
35725: IFFALSE 35761
// begin MC_Reset ( i , 125 ) ;
35727: LD_VAR 0 2
35731: PPUSH
35732: LD_INT 125
35734: PPUSH
35735: CALL 19685 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35739: LD_ADDR_EXP 87
35743: PUSH
35744: LD_EXP 87
35748: PPUSH
35749: LD_VAR 0 2
35753: PPUSH
35754: EMPTY
35755: PPUSH
35756: CALL_OW 1
35760: ST_TO_ADDR
// end ; continue ;
35761: GO 35519
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
35763: LD_EXP 86
35767: PUSH
35768: LD_VAR 0 2
35772: ARRAY
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PUSH
35778: LD_INT 1
35780: ARRAY
35781: PPUSH
35782: LD_EXP 86
35786: PUSH
35787: LD_VAR 0 2
35791: ARRAY
35792: PUSH
35793: LD_INT 1
35795: ARRAY
35796: PUSH
35797: LD_INT 2
35799: ARRAY
35800: PPUSH
35801: LD_EXP 75
35805: PUSH
35806: LD_VAR 0 2
35810: ARRAY
35811: PPUSH
35812: CALL_OW 440
35816: IFFALSE 35859
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
35818: LD_ADDR_EXP 86
35822: PUSH
35823: LD_EXP 86
35827: PPUSH
35828: LD_VAR 0 2
35832: PPUSH
35833: LD_EXP 86
35837: PUSH
35838: LD_VAR 0 2
35842: ARRAY
35843: PPUSH
35844: LD_INT 1
35846: PPUSH
35847: CALL_OW 3
35851: PPUSH
35852: CALL_OW 1
35856: ST_TO_ADDR
35857: GO 36106
// begin if not mc_deposits_finder [ i ] then
35859: LD_EXP 87
35863: PUSH
35864: LD_VAR 0 2
35868: ARRAY
35869: NOT
35870: IFFALSE 35922
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
35872: LD_ADDR_EXP 87
35876: PUSH
35877: LD_EXP 87
35881: PPUSH
35882: LD_VAR 0 2
35886: PPUSH
35887: LD_VAR 0 3
35891: PUSH
35892: LD_INT 1
35894: ARRAY
35895: PUSH
35896: EMPTY
35897: LIST
35898: PPUSH
35899: CALL_OW 1
35903: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
35904: LD_VAR 0 3
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PPUSH
35913: LD_INT 125
35915: PPUSH
35916: CALL_OW 109
// end else
35920: GO 36106
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
35922: LD_EXP 87
35926: PUSH
35927: LD_VAR 0 2
35931: ARRAY
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PPUSH
35937: CALL_OW 310
35941: IFFALSE 35964
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
35943: LD_EXP 87
35947: PUSH
35948: LD_VAR 0 2
35952: ARRAY
35953: PUSH
35954: LD_INT 1
35956: ARRAY
35957: PPUSH
35958: CALL_OW 122
35962: GO 36106
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
35964: LD_EXP 87
35968: PUSH
35969: LD_VAR 0 2
35973: ARRAY
35974: PUSH
35975: LD_INT 1
35977: ARRAY
35978: PPUSH
35979: CALL_OW 314
35983: NOT
35984: PUSH
35985: LD_EXP 87
35989: PUSH
35990: LD_VAR 0 2
35994: ARRAY
35995: PUSH
35996: LD_INT 1
35998: ARRAY
35999: PPUSH
36000: LD_EXP 86
36004: PUSH
36005: LD_VAR 0 2
36009: ARRAY
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: PUSH
36015: LD_INT 1
36017: ARRAY
36018: PPUSH
36019: LD_EXP 86
36023: PUSH
36024: LD_VAR 0 2
36028: ARRAY
36029: PUSH
36030: LD_INT 1
36032: ARRAY
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: PPUSH
36038: CALL_OW 297
36042: PUSH
36043: LD_INT 6
36045: GREATER
36046: AND
36047: IFFALSE 36106
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
36049: LD_EXP 87
36053: PUSH
36054: LD_VAR 0 2
36058: ARRAY
36059: PUSH
36060: LD_INT 1
36062: ARRAY
36063: PPUSH
36064: LD_EXP 86
36068: PUSH
36069: LD_VAR 0 2
36073: ARRAY
36074: PUSH
36075: LD_INT 1
36077: ARRAY
36078: PUSH
36079: LD_INT 1
36081: ARRAY
36082: PPUSH
36083: LD_EXP 86
36087: PUSH
36088: LD_VAR 0 2
36092: ARRAY
36093: PUSH
36094: LD_INT 1
36096: ARRAY
36097: PUSH
36098: LD_INT 2
36100: ARRAY
36101: PPUSH
36102: CALL_OW 111
// end ; end ; end ;
36106: GO 35519
36108: POP
36109: POP
// end ;
36110: LD_VAR 0 1
36114: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
36115: LD_INT 0
36117: PPUSH
36118: PPUSH
36119: PPUSH
36120: PPUSH
36121: PPUSH
36122: PPUSH
36123: PPUSH
36124: PPUSH
36125: PPUSH
36126: PPUSH
36127: PPUSH
// if not mc_bases then
36128: LD_EXP 49
36132: NOT
36133: IFFALSE 36137
// exit ;
36135: GO 36861
// for i = 1 to mc_bases do
36137: LD_ADDR_VAR 0 2
36141: PUSH
36142: DOUBLE
36143: LD_INT 1
36145: DEC
36146: ST_TO_ADDR
36147: LD_EXP 49
36151: PUSH
36152: FOR_TO
36153: IFFALSE 36859
// begin if not mc_bases [ i ] then
36155: LD_EXP 49
36159: PUSH
36160: LD_VAR 0 2
36164: ARRAY
36165: NOT
36166: IFFALSE 36170
// continue ;
36168: GO 36152
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
36170: LD_ADDR_VAR 0 7
36174: PUSH
36175: LD_EXP 49
36179: PUSH
36180: LD_VAR 0 2
36184: ARRAY
36185: PUSH
36186: LD_INT 1
36188: ARRAY
36189: PPUSH
36190: CALL_OW 248
36194: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
36195: LD_VAR 0 7
36199: PUSH
36200: LD_INT 3
36202: EQUAL
36203: PUSH
36204: LD_EXP 68
36208: PUSH
36209: LD_VAR 0 2
36213: ARRAY
36214: PUSH
36215: LD_EXP 71
36219: PUSH
36220: LD_VAR 0 2
36224: ARRAY
36225: UNION
36226: PPUSH
36227: LD_INT 33
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PPUSH
36237: CALL_OW 72
36241: NOT
36242: OR
36243: IFFALSE 36247
// continue ;
36245: GO 36152
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
36247: LD_ADDR_VAR 0 9
36251: PUSH
36252: LD_EXP 49
36256: PUSH
36257: LD_VAR 0 2
36261: ARRAY
36262: PPUSH
36263: LD_INT 30
36265: PUSH
36266: LD_INT 36
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PPUSH
36273: CALL_OW 72
36277: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
36278: LD_ADDR_VAR 0 10
36282: PUSH
36283: LD_EXP 68
36287: PUSH
36288: LD_VAR 0 2
36292: ARRAY
36293: PPUSH
36294: LD_INT 34
36296: PUSH
36297: LD_INT 31
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PPUSH
36304: CALL_OW 72
36308: ST_TO_ADDR
// if not cts and not mcts then
36309: LD_VAR 0 9
36313: NOT
36314: PUSH
36315: LD_VAR 0 10
36319: NOT
36320: AND
36321: IFFALSE 36325
// continue ;
36323: GO 36152
// x := cts ;
36325: LD_ADDR_VAR 0 11
36329: PUSH
36330: LD_VAR 0 9
36334: ST_TO_ADDR
// if not x then
36335: LD_VAR 0 11
36339: NOT
36340: IFFALSE 36352
// x := mcts ;
36342: LD_ADDR_VAR 0 11
36346: PUSH
36347: LD_VAR 0 10
36351: ST_TO_ADDR
// if mc_remote_driver [ i ] then
36352: LD_EXP 89
36356: PUSH
36357: LD_VAR 0 2
36361: ARRAY
36362: IFFALSE 36631
// for j in mc_remote_driver [ i ] do
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_EXP 89
36373: PUSH
36374: LD_VAR 0 2
36378: ARRAY
36379: PUSH
36380: FOR_IN
36381: IFFALSE 36629
// begin if GetClass ( j ) <> 3 then
36383: LD_VAR 0 3
36387: PPUSH
36388: CALL_OW 257
36392: PUSH
36393: LD_INT 3
36395: NONEQUAL
36396: IFFALSE 36449
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
36398: LD_ADDR_EXP 89
36402: PUSH
36403: LD_EXP 89
36407: PPUSH
36408: LD_VAR 0 2
36412: PPUSH
36413: LD_EXP 89
36417: PUSH
36418: LD_VAR 0 2
36422: ARRAY
36423: PUSH
36424: LD_VAR 0 3
36428: DIFF
36429: PPUSH
36430: CALL_OW 1
36434: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36435: LD_VAR 0 3
36439: PPUSH
36440: LD_INT 0
36442: PPUSH
36443: CALL_OW 109
// continue ;
36447: GO 36380
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
36449: LD_VAR 0 3
36453: PPUSH
36454: CALL_OW 310
36458: NOT
36459: PUSH
36460: LD_VAR 0 3
36464: PPUSH
36465: CALL_OW 310
36469: PPUSH
36470: CALL_OW 266
36474: PUSH
36475: LD_INT 36
36477: NONEQUAL
36478: PUSH
36479: LD_VAR 0 3
36483: PPUSH
36484: CALL 83955 0 1
36488: NOT
36489: AND
36490: OR
36491: IFFALSE 36627
// begin if IsInUnit ( j ) then
36493: LD_VAR 0 3
36497: PPUSH
36498: CALL_OW 310
36502: IFFALSE 36513
// ComExitBuilding ( j ) ;
36504: LD_VAR 0 3
36508: PPUSH
36509: CALL_OW 122
// ct := 0 ;
36513: LD_ADDR_VAR 0 8
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// for k in x do
36521: LD_ADDR_VAR 0 4
36525: PUSH
36526: LD_VAR 0 11
36530: PUSH
36531: FOR_IN
36532: IFFALSE 36605
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
36534: LD_VAR 0 4
36538: PPUSH
36539: CALL_OW 264
36543: PUSH
36544: LD_INT 31
36546: EQUAL
36547: PUSH
36548: LD_VAR 0 4
36552: PPUSH
36553: CALL_OW 311
36557: NOT
36558: AND
36559: PUSH
36560: LD_VAR 0 4
36564: PPUSH
36565: CALL_OW 266
36569: PUSH
36570: LD_INT 36
36572: EQUAL
36573: PUSH
36574: LD_VAR 0 4
36578: PPUSH
36579: CALL_OW 313
36583: PUSH
36584: LD_INT 3
36586: LESS
36587: AND
36588: OR
36589: IFFALSE 36603
// begin ct := k ;
36591: LD_ADDR_VAR 0 8
36595: PUSH
36596: LD_VAR 0 4
36600: ST_TO_ADDR
// break ;
36601: GO 36605
// end ;
36603: GO 36531
36605: POP
36606: POP
// if ct then
36607: LD_VAR 0 8
36611: IFFALSE 36627
// ComEnterUnit ( j , ct ) ;
36613: LD_VAR 0 3
36617: PPUSH
36618: LD_VAR 0 8
36622: PPUSH
36623: CALL_OW 120
// end ; end ;
36627: GO 36380
36629: POP
36630: POP
// places := 0 ;
36631: LD_ADDR_VAR 0 5
36635: PUSH
36636: LD_INT 0
36638: ST_TO_ADDR
// for j = 1 to x do
36639: LD_ADDR_VAR 0 3
36643: PUSH
36644: DOUBLE
36645: LD_INT 1
36647: DEC
36648: ST_TO_ADDR
36649: LD_VAR 0 11
36653: PUSH
36654: FOR_TO
36655: IFFALSE 36710
// if GetWeapon ( x [ j ] ) = ar_control_tower then
36657: LD_VAR 0 11
36661: PUSH
36662: LD_VAR 0 3
36666: ARRAY
36667: PPUSH
36668: CALL_OW 264
36672: PUSH
36673: LD_INT 31
36675: EQUAL
36676: IFFALSE 36694
// places := places + 1 else
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 5
36687: PUSH
36688: LD_INT 1
36690: PLUS
36691: ST_TO_ADDR
36692: GO 36708
// places := places + 3 ;
36694: LD_ADDR_VAR 0 5
36698: PUSH
36699: LD_VAR 0 5
36703: PUSH
36704: LD_INT 3
36706: PLUS
36707: ST_TO_ADDR
36708: GO 36654
36710: POP
36711: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
36712: LD_ADDR_VAR 0 6
36716: PUSH
36717: LD_EXP 49
36721: PUSH
36722: LD_VAR 0 2
36726: ARRAY
36727: PPUSH
36728: LD_INT 25
36730: PUSH
36731: LD_INT 3
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PPUSH
36738: CALL_OW 72
36742: PUSH
36743: LD_EXP 89
36747: PUSH
36748: LD_VAR 0 2
36752: ARRAY
36753: DIFF
36754: PPUSH
36755: LD_INT 3
36757: PPUSH
36758: CALL 84855 0 2
36762: ST_TO_ADDR
// if not tmp then
36763: LD_VAR 0 6
36767: NOT
36768: IFFALSE 36772
// continue ;
36770: GO 36152
// places := places - mc_remote_driver [ i ] ;
36772: LD_ADDR_VAR 0 5
36776: PUSH
36777: LD_VAR 0 5
36781: PUSH
36782: LD_EXP 89
36786: PUSH
36787: LD_VAR 0 2
36791: ARRAY
36792: MINUS
36793: ST_TO_ADDR
// if places then
36794: LD_VAR 0 5
36798: IFFALSE 36857
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
36800: LD_ADDR_EXP 89
36804: PUSH
36805: LD_EXP 89
36809: PPUSH
36810: LD_VAR 0 2
36814: PPUSH
36815: LD_EXP 89
36819: PUSH
36820: LD_VAR 0 2
36824: ARRAY
36825: PUSH
36826: LD_VAR 0 6
36830: PUSH
36831: LD_INT 1
36833: ARRAY
36834: UNION
36835: PPUSH
36836: CALL_OW 1
36840: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
36841: LD_VAR 0 6
36845: PUSH
36846: LD_INT 1
36848: ARRAY
36849: PPUSH
36850: LD_INT 126
36852: PPUSH
36853: CALL_OW 109
// end ; end ;
36857: GO 36152
36859: POP
36860: POP
// end ;
36861: LD_VAR 0 1
36865: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
36866: LD_INT 0
36868: PPUSH
36869: PPUSH
36870: PPUSH
36871: PPUSH
36872: PPUSH
36873: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
36874: LD_VAR 0 1
36878: NOT
36879: PUSH
36880: LD_VAR 0 2
36884: NOT
36885: OR
36886: PUSH
36887: LD_VAR 0 3
36891: NOT
36892: OR
36893: PUSH
36894: LD_VAR 0 4
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: LD_INT 4
36910: PUSH
36911: LD_INT 5
36913: PUSH
36914: LD_INT 8
36916: PUSH
36917: LD_INT 9
36919: PUSH
36920: LD_INT 15
36922: PUSH
36923: LD_INT 16
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: IN
36937: NOT
36938: OR
36939: IFFALSE 36943
// exit ;
36941: GO 37843
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
36943: LD_ADDR_VAR 0 2
36947: PUSH
36948: LD_VAR 0 2
36952: PPUSH
36953: LD_INT 21
36955: PUSH
36956: LD_INT 3
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 24
36965: PUSH
36966: LD_INT 250
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PPUSH
36977: CALL_OW 72
36981: ST_TO_ADDR
// case class of 1 , 15 :
36982: LD_VAR 0 4
36986: PUSH
36987: LD_INT 1
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 37001
36993: LD_INT 15
36995: DOUBLE
36996: EQUAL
36997: IFTRUE 37001
36999: GO 37086
37001: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
37002: LD_ADDR_VAR 0 8
37006: PUSH
37007: LD_VAR 0 2
37011: PPUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 30
37017: PUSH
37018: LD_INT 32
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: LD_INT 31
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: PPUSH
37040: CALL_OW 72
37044: PUSH
37045: LD_VAR 0 2
37049: PPUSH
37050: LD_INT 2
37052: PUSH
37053: LD_INT 30
37055: PUSH
37056: LD_INT 4
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 30
37065: PUSH
37066: LD_INT 5
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: LIST
37077: PPUSH
37078: CALL_OW 72
37082: ADD
37083: ST_TO_ADDR
37084: GO 37332
37086: LD_INT 2
37088: DOUBLE
37089: EQUAL
37090: IFTRUE 37100
37092: LD_INT 16
37094: DOUBLE
37095: EQUAL
37096: IFTRUE 37100
37098: GO 37146
37100: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
37101: LD_ADDR_VAR 0 8
37105: PUSH
37106: LD_VAR 0 2
37110: PPUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 30
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 30
37126: PUSH
37127: LD_INT 1
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PPUSH
37139: CALL_OW 72
37143: ST_TO_ADDR
37144: GO 37332
37146: LD_INT 3
37148: DOUBLE
37149: EQUAL
37150: IFTRUE 37154
37152: GO 37200
37154: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
37155: LD_ADDR_VAR 0 8
37159: PUSH
37160: LD_VAR 0 2
37164: PPUSH
37165: LD_INT 2
37167: PUSH
37168: LD_INT 30
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 30
37180: PUSH
37181: LD_INT 3
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: PPUSH
37193: CALL_OW 72
37197: ST_TO_ADDR
37198: GO 37332
37200: LD_INT 4
37202: DOUBLE
37203: EQUAL
37204: IFTRUE 37208
37206: GO 37265
37208: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
37209: LD_ADDR_VAR 0 8
37213: PUSH
37214: LD_VAR 0 2
37218: PPUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 30
37224: PUSH
37225: LD_INT 6
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 30
37234: PUSH
37235: LD_INT 7
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: LD_INT 30
37244: PUSH
37245: LD_INT 8
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: PPUSH
37258: CALL_OW 72
37262: ST_TO_ADDR
37263: GO 37332
37265: LD_INT 5
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37285
37271: LD_INT 8
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37285
37277: LD_INT 9
37279: DOUBLE
37280: EQUAL
37281: IFTRUE 37285
37283: GO 37331
37285: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
37286: LD_ADDR_VAR 0 8
37290: PUSH
37291: LD_VAR 0 2
37295: PPUSH
37296: LD_INT 2
37298: PUSH
37299: LD_INT 30
37301: PUSH
37302: LD_INT 4
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 30
37311: PUSH
37312: LD_INT 5
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: PPUSH
37324: CALL_OW 72
37328: ST_TO_ADDR
37329: GO 37332
37331: POP
// if not tmp then
37332: LD_VAR 0 8
37336: NOT
37337: IFFALSE 37341
// exit ;
37339: GO 37843
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
37341: LD_VAR 0 4
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 15
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: IN
37356: PUSH
37357: LD_EXP 58
37361: PUSH
37362: LD_VAR 0 1
37366: ARRAY
37367: AND
37368: IFFALSE 37524
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
37370: LD_ADDR_VAR 0 9
37374: PUSH
37375: LD_EXP 58
37379: PUSH
37380: LD_VAR 0 1
37384: ARRAY
37385: PUSH
37386: LD_INT 1
37388: ARRAY
37389: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
37390: LD_VAR 0 9
37394: PUSH
37395: LD_EXP 59
37399: PUSH
37400: LD_VAR 0 1
37404: ARRAY
37405: IN
37406: NOT
37407: IFFALSE 37522
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
37409: LD_ADDR_EXP 59
37413: PUSH
37414: LD_EXP 59
37418: PPUSH
37419: LD_VAR 0 1
37423: PUSH
37424: LD_EXP 59
37428: PUSH
37429: LD_VAR 0 1
37433: ARRAY
37434: PUSH
37435: LD_INT 1
37437: PLUS
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PPUSH
37443: LD_VAR 0 9
37447: PPUSH
37448: CALL 51287 0 3
37452: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
37453: LD_ADDR_EXP 58
37457: PUSH
37458: LD_EXP 58
37462: PPUSH
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_EXP 58
37472: PUSH
37473: LD_VAR 0 1
37477: ARRAY
37478: PUSH
37479: LD_VAR 0 9
37483: DIFF
37484: PPUSH
37485: CALL_OW 1
37489: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
37490: LD_VAR 0 3
37494: PPUSH
37495: LD_EXP 59
37499: PUSH
37500: LD_VAR 0 1
37504: ARRAY
37505: PUSH
37506: LD_EXP 59
37510: PUSH
37511: LD_VAR 0 1
37515: ARRAY
37516: ARRAY
37517: PPUSH
37518: CALL_OW 120
// end ; exit ;
37522: GO 37843
// end ; if tmp > 1 then
37524: LD_VAR 0 8
37528: PUSH
37529: LD_INT 1
37531: GREATER
37532: IFFALSE 37636
// for i = 2 to tmp do
37534: LD_ADDR_VAR 0 6
37538: PUSH
37539: DOUBLE
37540: LD_INT 2
37542: DEC
37543: ST_TO_ADDR
37544: LD_VAR 0 8
37548: PUSH
37549: FOR_TO
37550: IFFALSE 37634
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
37552: LD_VAR 0 8
37556: PUSH
37557: LD_VAR 0 6
37561: ARRAY
37562: PPUSH
37563: CALL_OW 461
37567: PUSH
37568: LD_INT 6
37570: EQUAL
37571: IFFALSE 37632
// begin x := tmp [ i ] ;
37573: LD_ADDR_VAR 0 9
37577: PUSH
37578: LD_VAR 0 8
37582: PUSH
37583: LD_VAR 0 6
37587: ARRAY
37588: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
37589: LD_ADDR_VAR 0 8
37593: PUSH
37594: LD_VAR 0 8
37598: PPUSH
37599: LD_VAR 0 6
37603: PPUSH
37604: CALL_OW 3
37608: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
37609: LD_ADDR_VAR 0 8
37613: PUSH
37614: LD_VAR 0 8
37618: PPUSH
37619: LD_INT 1
37621: PPUSH
37622: LD_VAR 0 9
37626: PPUSH
37627: CALL_OW 2
37631: ST_TO_ADDR
// end ;
37632: GO 37549
37634: POP
37635: POP
// for i in tmp do
37636: LD_ADDR_VAR 0 6
37640: PUSH
37641: LD_VAR 0 8
37645: PUSH
37646: FOR_IN
37647: IFFALSE 37716
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
37649: LD_VAR 0 6
37653: PPUSH
37654: CALL_OW 313
37658: PUSH
37659: LD_INT 6
37661: LESS
37662: PUSH
37663: LD_VAR 0 6
37667: PPUSH
37668: CALL_OW 266
37672: PUSH
37673: LD_INT 31
37675: PUSH
37676: LD_INT 32
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: IN
37683: NOT
37684: AND
37685: PUSH
37686: LD_VAR 0 6
37690: PPUSH
37691: CALL_OW 313
37695: PUSH
37696: LD_INT 0
37698: EQUAL
37699: OR
37700: IFFALSE 37714
// begin j := i ;
37702: LD_ADDR_VAR 0 7
37706: PUSH
37707: LD_VAR 0 6
37711: ST_TO_ADDR
// break ;
37712: GO 37716
// end ; end ;
37714: GO 37646
37716: POP
37717: POP
// if j then
37718: LD_VAR 0 7
37722: IFFALSE 37740
// ComEnterUnit ( unit , j ) else
37724: LD_VAR 0 3
37728: PPUSH
37729: LD_VAR 0 7
37733: PPUSH
37734: CALL_OW 120
37738: GO 37843
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37740: LD_ADDR_VAR 0 10
37744: PUSH
37745: LD_VAR 0 2
37749: PPUSH
37750: LD_INT 2
37752: PUSH
37753: LD_INT 30
37755: PUSH
37756: LD_INT 0
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 30
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: PPUSH
37778: CALL_OW 72
37782: ST_TO_ADDR
// if depot then
37783: LD_VAR 0 10
37787: IFFALSE 37843
// begin depot := NearestUnitToUnit ( depot , unit ) ;
37789: LD_ADDR_VAR 0 10
37793: PUSH
37794: LD_VAR 0 10
37798: PPUSH
37799: LD_VAR 0 3
37803: PPUSH
37804: CALL_OW 74
37808: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
37809: LD_VAR 0 3
37813: PPUSH
37814: LD_VAR 0 10
37818: PPUSH
37819: CALL_OW 296
37823: PUSH
37824: LD_INT 10
37826: GREATER
37827: IFFALSE 37843
// ComStandNearbyBuilding ( unit , depot ) ;
37829: LD_VAR 0 3
37833: PPUSH
37834: LD_VAR 0 10
37838: PPUSH
37839: CALL 45529 0 2
// end ; end ; end ;
37843: LD_VAR 0 5
37847: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
37848: LD_INT 0
37850: PPUSH
37851: PPUSH
37852: PPUSH
37853: PPUSH
// if not mc_bases then
37854: LD_EXP 49
37858: NOT
37859: IFFALSE 37863
// exit ;
37861: GO 38102
// for i = 1 to mc_bases do
37863: LD_ADDR_VAR 0 2
37867: PUSH
37868: DOUBLE
37869: LD_INT 1
37871: DEC
37872: ST_TO_ADDR
37873: LD_EXP 49
37877: PUSH
37878: FOR_TO
37879: IFFALSE 38100
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
37881: LD_ADDR_VAR 0 4
37885: PUSH
37886: LD_EXP 49
37890: PUSH
37891: LD_VAR 0 2
37895: ARRAY
37896: PPUSH
37897: LD_INT 21
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PPUSH
37907: CALL_OW 72
37911: PUSH
37912: LD_EXP 78
37916: PUSH
37917: LD_VAR 0 2
37921: ARRAY
37922: UNION
37923: ST_TO_ADDR
// if not tmp then
37924: LD_VAR 0 4
37928: NOT
37929: IFFALSE 37933
// continue ;
37931: GO 37878
// for j in tmp do
37933: LD_ADDR_VAR 0 3
37937: PUSH
37938: LD_VAR 0 4
37942: PUSH
37943: FOR_IN
37944: IFFALSE 38096
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
37946: LD_VAR 0 3
37950: PPUSH
37951: CALL_OW 110
37955: NOT
37956: PUSH
37957: LD_VAR 0 3
37961: PPUSH
37962: CALL_OW 314
37966: NOT
37967: AND
37968: PUSH
37969: LD_VAR 0 3
37973: PPUSH
37974: CALL_OW 311
37978: NOT
37979: AND
37980: PUSH
37981: LD_VAR 0 3
37985: PPUSH
37986: CALL_OW 310
37990: NOT
37991: AND
37992: PUSH
37993: LD_VAR 0 3
37997: PUSH
37998: LD_EXP 52
38002: PUSH
38003: LD_VAR 0 2
38007: ARRAY
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: IN
38013: NOT
38014: AND
38015: PUSH
38016: LD_VAR 0 3
38020: PUSH
38021: LD_EXP 52
38025: PUSH
38026: LD_VAR 0 2
38030: ARRAY
38031: PUSH
38032: LD_INT 2
38034: ARRAY
38035: IN
38036: NOT
38037: AND
38038: PUSH
38039: LD_VAR 0 3
38043: PUSH
38044: LD_EXP 61
38048: PUSH
38049: LD_VAR 0 2
38053: ARRAY
38054: IN
38055: NOT
38056: AND
38057: IFFALSE 38094
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
38059: LD_VAR 0 2
38063: PPUSH
38064: LD_EXP 49
38068: PUSH
38069: LD_VAR 0 2
38073: ARRAY
38074: PPUSH
38075: LD_VAR 0 3
38079: PPUSH
38080: LD_VAR 0 3
38084: PPUSH
38085: CALL_OW 257
38089: PPUSH
38090: CALL 36866 0 4
// end ;
38094: GO 37943
38096: POP
38097: POP
// end ;
38098: GO 37878
38100: POP
38101: POP
// end ;
38102: LD_VAR 0 1
38106: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
38107: LD_INT 0
38109: PPUSH
38110: PPUSH
38111: PPUSH
38112: PPUSH
38113: PPUSH
38114: PPUSH
// if not mc_bases [ base ] then
38115: LD_EXP 49
38119: PUSH
38120: LD_VAR 0 1
38124: ARRAY
38125: NOT
38126: IFFALSE 38130
// exit ;
38128: GO 38312
// tmp := [ ] ;
38130: LD_ADDR_VAR 0 6
38134: PUSH
38135: EMPTY
38136: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
38137: LD_ADDR_VAR 0 7
38141: PUSH
38142: LD_VAR 0 3
38146: PPUSH
38147: LD_INT 0
38149: PPUSH
38150: CALL_OW 517
38154: ST_TO_ADDR
// if not list then
38155: LD_VAR 0 7
38159: NOT
38160: IFFALSE 38164
// exit ;
38162: GO 38312
// for i = 1 to amount do
38164: LD_ADDR_VAR 0 5
38168: PUSH
38169: DOUBLE
38170: LD_INT 1
38172: DEC
38173: ST_TO_ADDR
38174: LD_VAR 0 2
38178: PUSH
38179: FOR_TO
38180: IFFALSE 38260
// begin x := rand ( 1 , list [ 1 ] ) ;
38182: LD_ADDR_VAR 0 8
38186: PUSH
38187: LD_INT 1
38189: PPUSH
38190: LD_VAR 0 7
38194: PUSH
38195: LD_INT 1
38197: ARRAY
38198: PPUSH
38199: CALL_OW 12
38203: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
38204: LD_ADDR_VAR 0 6
38208: PUSH
38209: LD_VAR 0 6
38213: PPUSH
38214: LD_VAR 0 5
38218: PPUSH
38219: LD_VAR 0 7
38223: PUSH
38224: LD_INT 1
38226: ARRAY
38227: PUSH
38228: LD_VAR 0 8
38232: ARRAY
38233: PUSH
38234: LD_VAR 0 7
38238: PUSH
38239: LD_INT 2
38241: ARRAY
38242: PUSH
38243: LD_VAR 0 8
38247: ARRAY
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PPUSH
38253: CALL_OW 1
38257: ST_TO_ADDR
// end ;
38258: GO 38179
38260: POP
38261: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
38262: LD_ADDR_EXP 62
38266: PUSH
38267: LD_EXP 62
38271: PPUSH
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_VAR 0 6
38281: PPUSH
38282: CALL_OW 1
38286: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
38287: LD_ADDR_EXP 64
38291: PUSH
38292: LD_EXP 64
38296: PPUSH
38297: LD_VAR 0 1
38301: PPUSH
38302: LD_VAR 0 3
38306: PPUSH
38307: CALL_OW 1
38311: ST_TO_ADDR
// end ;
38312: LD_VAR 0 4
38316: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
38317: LD_INT 0
38319: PPUSH
// if not mc_bases [ base ] then
38320: LD_EXP 49
38324: PUSH
38325: LD_VAR 0 1
38329: ARRAY
38330: NOT
38331: IFFALSE 38335
// exit ;
38333: GO 38360
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
38335: LD_ADDR_EXP 54
38339: PUSH
38340: LD_EXP 54
38344: PPUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: LD_VAR 0 2
38354: PPUSH
38355: CALL_OW 1
38359: ST_TO_ADDR
// end ;
38360: LD_VAR 0 3
38364: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
38365: LD_INT 0
38367: PPUSH
// if not mc_bases [ base ] then
38368: LD_EXP 49
38372: PUSH
38373: LD_VAR 0 1
38377: ARRAY
38378: NOT
38379: IFFALSE 38383
// exit ;
38381: GO 38420
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
38383: LD_ADDR_EXP 54
38387: PUSH
38388: LD_EXP 54
38392: PPUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: LD_EXP 54
38402: PUSH
38403: LD_VAR 0 1
38407: ARRAY
38408: PUSH
38409: LD_VAR 0 2
38413: UNION
38414: PPUSH
38415: CALL_OW 1
38419: ST_TO_ADDR
// end ;
38420: LD_VAR 0 3
38424: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
38425: LD_INT 0
38427: PPUSH
// if not mc_bases [ base ] then
38428: LD_EXP 49
38432: PUSH
38433: LD_VAR 0 1
38437: ARRAY
38438: NOT
38439: IFFALSE 38443
// exit ;
38441: GO 38468
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
38443: LD_ADDR_EXP 70
38447: PUSH
38448: LD_EXP 70
38452: PPUSH
38453: LD_VAR 0 1
38457: PPUSH
38458: LD_VAR 0 2
38462: PPUSH
38463: CALL_OW 1
38467: ST_TO_ADDR
// end ;
38468: LD_VAR 0 3
38472: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
38473: LD_INT 0
38475: PPUSH
// if not mc_bases [ base ] then
38476: LD_EXP 49
38480: PUSH
38481: LD_VAR 0 1
38485: ARRAY
38486: NOT
38487: IFFALSE 38491
// exit ;
38489: GO 38528
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
38491: LD_ADDR_EXP 70
38495: PUSH
38496: LD_EXP 70
38500: PPUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_EXP 70
38510: PUSH
38511: LD_VAR 0 1
38515: ARRAY
38516: PUSH
38517: LD_VAR 0 2
38521: UNION
38522: PPUSH
38523: CALL_OW 1
38527: ST_TO_ADDR
// end ;
38528: LD_VAR 0 3
38532: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
38533: LD_INT 0
38535: PPUSH
// if not mc_bases [ base ] then
38536: LD_EXP 49
38540: PUSH
38541: LD_VAR 0 1
38545: ARRAY
38546: NOT
38547: IFFALSE 38551
// exit ;
38549: GO 38663
// mc_defender := Replace ( mc_defender , base , deflist ) ;
38551: LD_ADDR_EXP 71
38555: PUSH
38556: LD_EXP 71
38560: PPUSH
38561: LD_VAR 0 1
38565: PPUSH
38566: LD_VAR 0 2
38570: PPUSH
38571: CALL_OW 1
38575: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
38576: LD_ADDR_EXP 60
38580: PUSH
38581: LD_EXP 60
38585: PPUSH
38586: LD_VAR 0 1
38590: PPUSH
38591: LD_VAR 0 2
38595: PUSH
38596: LD_INT 0
38598: PLUS
38599: PPUSH
38600: CALL_OW 1
38604: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
38605: LD_ADDR_EXP 68
38609: PUSH
38610: LD_EXP 68
38614: PPUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: LD_EXP 68
38624: PUSH
38625: LD_VAR 0 1
38629: ARRAY
38630: PUSH
38631: LD_EXP 71
38635: PUSH
38636: LD_VAR 0 1
38640: ARRAY
38641: PPUSH
38642: LD_INT 21
38644: PUSH
38645: LD_INT 2
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PPUSH
38652: CALL_OW 72
38656: UNION
38657: PPUSH
38658: CALL_OW 1
38662: ST_TO_ADDR
// end ;
38663: LD_VAR 0 3
38667: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
38668: LD_INT 0
38670: PPUSH
// if not mc_bases [ base ] then
38671: LD_EXP 49
38675: PUSH
38676: LD_VAR 0 1
38680: ARRAY
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 38711
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
38686: LD_ADDR_EXP 60
38690: PUSH
38691: LD_EXP 60
38695: PPUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: LD_VAR 0 2
38705: PPUSH
38706: CALL_OW 1
38710: ST_TO_ADDR
// end ;
38711: LD_VAR 0 3
38715: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
38716: LD_INT 0
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
// if not mc_bases [ base ] then
38722: LD_EXP 49
38726: PUSH
38727: LD_VAR 0 1
38731: ARRAY
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 38802
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
38737: LD_ADDR_EXP 69
38741: PUSH
38742: LD_EXP 69
38746: PPUSH
38747: LD_VAR 0 1
38751: PUSH
38752: LD_EXP 69
38756: PUSH
38757: LD_VAR 0 1
38761: ARRAY
38762: PUSH
38763: LD_INT 1
38765: PLUS
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: LD_VAR 0 1
38775: PUSH
38776: LD_VAR 0 2
38780: PUSH
38781: LD_VAR 0 3
38785: PUSH
38786: LD_VAR 0 4
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: PPUSH
38797: CALL 51287 0 3
38801: ST_TO_ADDR
// end ;
38802: LD_VAR 0 5
38806: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
38807: LD_INT 0
38809: PPUSH
// if not mc_bases [ base ] then
38810: LD_EXP 49
38814: PUSH
38815: LD_VAR 0 1
38819: ARRAY
38820: NOT
38821: IFFALSE 38825
// exit ;
38823: GO 38850
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
38825: LD_ADDR_EXP 86
38829: PUSH
38830: LD_EXP 86
38834: PPUSH
38835: LD_VAR 0 1
38839: PPUSH
38840: LD_VAR 0 2
38844: PPUSH
38845: CALL_OW 1
38849: ST_TO_ADDR
// end ;
38850: LD_VAR 0 3
38854: RET
// export function MC_GetMinesField ( base ) ; begin
38855: LD_INT 0
38857: PPUSH
// result := mc_mines [ base ] ;
38858: LD_ADDR_VAR 0 2
38862: PUSH
38863: LD_EXP 62
38867: PUSH
38868: LD_VAR 0 1
38872: ARRAY
38873: ST_TO_ADDR
// end ;
38874: LD_VAR 0 2
38878: RET
// export function MC_GetProduceList ( base ) ; begin
38879: LD_INT 0
38881: PPUSH
// result := mc_produce [ base ] ;
38882: LD_ADDR_VAR 0 2
38886: PUSH
38887: LD_EXP 70
38891: PUSH
38892: LD_VAR 0 1
38896: ARRAY
38897: ST_TO_ADDR
// end ;
38898: LD_VAR 0 2
38902: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
38903: LD_INT 0
38905: PPUSH
38906: PPUSH
// if not mc_bases then
38907: LD_EXP 49
38911: NOT
38912: IFFALSE 38916
// exit ;
38914: GO 38981
// if mc_bases [ base ] then
38916: LD_EXP 49
38920: PUSH
38921: LD_VAR 0 1
38925: ARRAY
38926: IFFALSE 38981
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
38928: LD_ADDR_VAR 0 3
38932: PUSH
38933: LD_EXP 49
38937: PUSH
38938: LD_VAR 0 1
38942: ARRAY
38943: PPUSH
38944: LD_INT 30
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PPUSH
38956: CALL_OW 72
38960: ST_TO_ADDR
// if result then
38961: LD_VAR 0 3
38965: IFFALSE 38981
// result := result [ 1 ] ;
38967: LD_ADDR_VAR 0 3
38971: PUSH
38972: LD_VAR 0 3
38976: PUSH
38977: LD_INT 1
38979: ARRAY
38980: ST_TO_ADDR
// end ; end ;
38981: LD_VAR 0 3
38985: RET
// export function MC_SetTame ( base , area ) ; begin
38986: LD_INT 0
38988: PPUSH
// if not mc_bases or not base then
38989: LD_EXP 49
38993: NOT
38994: PUSH
38995: LD_VAR 0 1
38999: NOT
39000: OR
39001: IFFALSE 39005
// exit ;
39003: GO 39030
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
39005: LD_ADDR_EXP 77
39009: PUSH
39010: LD_EXP 77
39014: PPUSH
39015: LD_VAR 0 1
39019: PPUSH
39020: LD_VAR 0 2
39024: PPUSH
39025: CALL_OW 1
39029: ST_TO_ADDR
// end ;
39030: LD_VAR 0 3
39034: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
39035: LD_INT 0
39037: PPUSH
39038: PPUSH
// if not mc_bases or not base then
39039: LD_EXP 49
39043: NOT
39044: PUSH
39045: LD_VAR 0 1
39049: NOT
39050: OR
39051: IFFALSE 39055
// exit ;
39053: GO 39157
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39055: LD_ADDR_VAR 0 4
39059: PUSH
39060: LD_EXP 49
39064: PUSH
39065: LD_VAR 0 1
39069: ARRAY
39070: PPUSH
39071: LD_INT 30
39073: PUSH
39074: LD_VAR 0 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PPUSH
39083: CALL_OW 72
39087: ST_TO_ADDR
// if not tmp then
39088: LD_VAR 0 4
39092: NOT
39093: IFFALSE 39097
// exit ;
39095: GO 39157
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
39097: LD_ADDR_EXP 81
39101: PUSH
39102: LD_EXP 81
39106: PPUSH
39107: LD_VAR 0 1
39111: PPUSH
39112: LD_EXP 81
39116: PUSH
39117: LD_VAR 0 1
39121: ARRAY
39122: PPUSH
39123: LD_EXP 81
39127: PUSH
39128: LD_VAR 0 1
39132: ARRAY
39133: PUSH
39134: LD_INT 1
39136: PLUS
39137: PPUSH
39138: LD_VAR 0 4
39142: PUSH
39143: LD_INT 1
39145: ARRAY
39146: PPUSH
39147: CALL_OW 2
39151: PPUSH
39152: CALL_OW 1
39156: ST_TO_ADDR
// end ;
39157: LD_VAR 0 3
39161: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
39162: LD_INT 0
39164: PPUSH
39165: PPUSH
// if not mc_bases or not base or not kinds then
39166: LD_EXP 49
39170: NOT
39171: PUSH
39172: LD_VAR 0 1
39176: NOT
39177: OR
39178: PUSH
39179: LD_VAR 0 2
39183: NOT
39184: OR
39185: IFFALSE 39189
// exit ;
39187: GO 39250
// for i in kinds do
39189: LD_ADDR_VAR 0 4
39193: PUSH
39194: LD_VAR 0 2
39198: PUSH
39199: FOR_IN
39200: IFFALSE 39248
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
39202: LD_ADDR_EXP 83
39206: PUSH
39207: LD_EXP 83
39211: PPUSH
39212: LD_VAR 0 1
39216: PUSH
39217: LD_EXP 83
39221: PUSH
39222: LD_VAR 0 1
39226: ARRAY
39227: PUSH
39228: LD_INT 1
39230: PLUS
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PPUSH
39236: LD_VAR 0 4
39240: PPUSH
39241: CALL 51287 0 3
39245: ST_TO_ADDR
39246: GO 39199
39248: POP
39249: POP
// end ;
39250: LD_VAR 0 3
39254: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
39255: LD_INT 0
39257: PPUSH
// if not mc_bases or not base or not areas then
39258: LD_EXP 49
39262: NOT
39263: PUSH
39264: LD_VAR 0 1
39268: NOT
39269: OR
39270: PUSH
39271: LD_VAR 0 2
39275: NOT
39276: OR
39277: IFFALSE 39281
// exit ;
39279: GO 39306
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
39281: LD_ADDR_EXP 67
39285: PUSH
39286: LD_EXP 67
39290: PPUSH
39291: LD_VAR 0 1
39295: PPUSH
39296: LD_VAR 0 2
39300: PPUSH
39301: CALL_OW 1
39305: ST_TO_ADDR
// end ;
39306: LD_VAR 0 3
39310: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
39311: LD_INT 0
39313: PPUSH
// if not mc_bases or not base or not teleports_exit then
39314: LD_EXP 49
39318: NOT
39319: PUSH
39320: LD_VAR 0 1
39324: NOT
39325: OR
39326: PUSH
39327: LD_VAR 0 2
39331: NOT
39332: OR
39333: IFFALSE 39337
// exit ;
39335: GO 39362
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
39337: LD_ADDR_EXP 84
39341: PUSH
39342: LD_EXP 84
39346: PPUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: LD_VAR 0 2
39356: PPUSH
39357: CALL_OW 1
39361: ST_TO_ADDR
// end ;
39362: LD_VAR 0 3
39366: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
39367: LD_INT 0
39369: PPUSH
39370: PPUSH
39371: PPUSH
// if not mc_bases or not base or not ext_list then
39372: LD_EXP 49
39376: NOT
39377: PUSH
39378: LD_VAR 0 1
39382: NOT
39383: OR
39384: PUSH
39385: LD_VAR 0 5
39389: NOT
39390: OR
39391: IFFALSE 39395
// exit ;
39393: GO 39568
// tmp := GetFacExtXYD ( x , y , d ) ;
39395: LD_ADDR_VAR 0 8
39399: PUSH
39400: LD_VAR 0 2
39404: PPUSH
39405: LD_VAR 0 3
39409: PPUSH
39410: LD_VAR 0 4
39414: PPUSH
39415: CALL 83985 0 3
39419: ST_TO_ADDR
// if not tmp then
39420: LD_VAR 0 8
39424: NOT
39425: IFFALSE 39429
// exit ;
39427: GO 39568
// for i in tmp do
39429: LD_ADDR_VAR 0 7
39433: PUSH
39434: LD_VAR 0 8
39438: PUSH
39439: FOR_IN
39440: IFFALSE 39566
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
39442: LD_ADDR_EXP 54
39446: PUSH
39447: LD_EXP 54
39451: PPUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_EXP 54
39461: PUSH
39462: LD_VAR 0 1
39466: ARRAY
39467: PPUSH
39468: LD_EXP 54
39472: PUSH
39473: LD_VAR 0 1
39477: ARRAY
39478: PUSH
39479: LD_INT 1
39481: PLUS
39482: PPUSH
39483: LD_VAR 0 5
39487: PUSH
39488: LD_INT 1
39490: ARRAY
39491: PUSH
39492: LD_VAR 0 7
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PUSH
39501: LD_VAR 0 7
39505: PUSH
39506: LD_INT 2
39508: ARRAY
39509: PUSH
39510: LD_VAR 0 7
39514: PUSH
39515: LD_INT 3
39517: ARRAY
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: PPUSH
39525: CALL_OW 2
39529: PPUSH
39530: CALL_OW 1
39534: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
39535: LD_ADDR_VAR 0 5
39539: PUSH
39540: LD_VAR 0 5
39544: PPUSH
39545: LD_INT 1
39547: PPUSH
39548: CALL_OW 3
39552: ST_TO_ADDR
// if not ext_list then
39553: LD_VAR 0 5
39557: NOT
39558: IFFALSE 39564
// exit ;
39560: POP
39561: POP
39562: GO 39568
// end ;
39564: GO 39439
39566: POP
39567: POP
// end ;
39568: LD_VAR 0 6
39572: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
39573: LD_INT 0
39575: PPUSH
// if not mc_bases or not base or not weapon_list then
39576: LD_EXP 49
39580: NOT
39581: PUSH
39582: LD_VAR 0 1
39586: NOT
39587: OR
39588: PUSH
39589: LD_VAR 0 2
39593: NOT
39594: OR
39595: IFFALSE 39599
// exit ;
39597: GO 39624
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
39599: LD_ADDR_EXP 88
39603: PUSH
39604: LD_EXP 88
39608: PPUSH
39609: LD_VAR 0 1
39613: PPUSH
39614: LD_VAR 0 2
39618: PPUSH
39619: CALL_OW 1
39623: ST_TO_ADDR
// end ;
39624: LD_VAR 0 3
39628: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
39629: LD_INT 0
39631: PPUSH
// if not mc_bases or not base or not tech_list then
39632: LD_EXP 49
39636: NOT
39637: PUSH
39638: LD_VAR 0 1
39642: NOT
39643: OR
39644: PUSH
39645: LD_VAR 0 2
39649: NOT
39650: OR
39651: IFFALSE 39655
// exit ;
39653: GO 39680
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
39655: LD_ADDR_EXP 76
39659: PUSH
39660: LD_EXP 76
39664: PPUSH
39665: LD_VAR 0 1
39669: PPUSH
39670: LD_VAR 0 2
39674: PPUSH
39675: CALL_OW 1
39679: ST_TO_ADDR
// end ;
39680: LD_VAR 0 3
39684: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
39685: LD_INT 0
39687: PPUSH
// if not mc_bases or not parking_area or not base then
39688: LD_EXP 49
39692: NOT
39693: PUSH
39694: LD_VAR 0 2
39698: NOT
39699: OR
39700: PUSH
39701: LD_VAR 0 1
39705: NOT
39706: OR
39707: IFFALSE 39711
// exit ;
39709: GO 39736
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
39711: LD_ADDR_EXP 73
39715: PUSH
39716: LD_EXP 73
39720: PPUSH
39721: LD_VAR 0 1
39725: PPUSH
39726: LD_VAR 0 2
39730: PPUSH
39731: CALL_OW 1
39735: ST_TO_ADDR
// end ;
39736: LD_VAR 0 3
39740: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
39741: LD_INT 0
39743: PPUSH
// if not mc_bases or not base or not scan_area then
39744: LD_EXP 49
39748: NOT
39749: PUSH
39750: LD_VAR 0 1
39754: NOT
39755: OR
39756: PUSH
39757: LD_VAR 0 2
39761: NOT
39762: OR
39763: IFFALSE 39767
// exit ;
39765: GO 39792
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
39767: LD_ADDR_EXP 74
39771: PUSH
39772: LD_EXP 74
39776: PPUSH
39777: LD_VAR 0 1
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: CALL_OW 1
39791: ST_TO_ADDR
// end ;
39792: LD_VAR 0 3
39796: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
39797: LD_INT 0
39799: PPUSH
39800: PPUSH
// if not mc_bases or not base then
39801: LD_EXP 49
39805: NOT
39806: PUSH
39807: LD_VAR 0 1
39811: NOT
39812: OR
39813: IFFALSE 39817
// exit ;
39815: GO 39881
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
39817: LD_ADDR_VAR 0 3
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: LD_INT 3
39830: PUSH
39831: LD_INT 4
39833: PUSH
39834: LD_INT 11
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
39844: LD_ADDR_EXP 76
39848: PUSH
39849: LD_EXP 76
39853: PPUSH
39854: LD_VAR 0 1
39858: PPUSH
39859: LD_EXP 76
39863: PUSH
39864: LD_VAR 0 1
39868: ARRAY
39869: PUSH
39870: LD_VAR 0 3
39874: DIFF
39875: PPUSH
39876: CALL_OW 1
39880: ST_TO_ADDR
// end ; end_of_file
39881: LD_VAR 0 2
39885: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
39886: LD_INT 0
39888: PPUSH
39889: PPUSH
39890: PPUSH
// if not mc_bases then
39891: LD_EXP 49
39895: NOT
39896: IFFALSE 39900
// exit ;
39898: GO 40065
// for i = 1 to mc_bases do
39900: LD_ADDR_VAR 0 4
39904: PUSH
39905: DOUBLE
39906: LD_INT 1
39908: DEC
39909: ST_TO_ADDR
39910: LD_EXP 49
39914: PUSH
39915: FOR_TO
39916: IFFALSE 40063
// begin if sci in mc_bases [ i ] then
39918: LD_VAR 0 2
39922: PUSH
39923: LD_EXP 49
39927: PUSH
39928: LD_VAR 0 4
39932: ARRAY
39933: IN
39934: IFFALSE 40061
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
39936: LD_ADDR_EXP 78
39940: PUSH
39941: LD_EXP 78
39945: PPUSH
39946: LD_VAR 0 4
39950: PUSH
39951: LD_EXP 78
39955: PUSH
39956: LD_VAR 0 4
39960: ARRAY
39961: PUSH
39962: LD_INT 1
39964: PLUS
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PPUSH
39970: LD_VAR 0 1
39974: PPUSH
39975: CALL 51287 0 3
39979: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
39980: LD_ADDR_VAR 0 5
39984: PUSH
39985: LD_EXP 49
39989: PUSH
39990: LD_VAR 0 4
39994: ARRAY
39995: PPUSH
39996: LD_INT 2
39998: PUSH
39999: LD_INT 30
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 30
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: LIST
40023: PPUSH
40024: CALL_OW 72
40028: PPUSH
40029: LD_VAR 0 1
40033: PPUSH
40034: CALL_OW 74
40038: ST_TO_ADDR
// if tmp then
40039: LD_VAR 0 5
40043: IFFALSE 40059
// ComStandNearbyBuilding ( ape , tmp ) ;
40045: LD_VAR 0 1
40049: PPUSH
40050: LD_VAR 0 5
40054: PPUSH
40055: CALL 45529 0 2
// break ;
40059: GO 40063
// end ; end ;
40061: GO 39915
40063: POP
40064: POP
// end ;
40065: LD_VAR 0 3
40069: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
40070: LD_INT 0
40072: PPUSH
40073: PPUSH
40074: PPUSH
// if not mc_bases then
40075: LD_EXP 49
40079: NOT
40080: IFFALSE 40084
// exit ;
40082: GO 40173
// for i = 1 to mc_bases do
40084: LD_ADDR_VAR 0 4
40088: PUSH
40089: DOUBLE
40090: LD_INT 1
40092: DEC
40093: ST_TO_ADDR
40094: LD_EXP 49
40098: PUSH
40099: FOR_TO
40100: IFFALSE 40171
// begin if building in mc_busy_turret_list [ i ] then
40102: LD_VAR 0 1
40106: PUSH
40107: LD_EXP 59
40111: PUSH
40112: LD_VAR 0 4
40116: ARRAY
40117: IN
40118: IFFALSE 40169
// begin tmp := mc_busy_turret_list [ i ] diff building ;
40120: LD_ADDR_VAR 0 5
40124: PUSH
40125: LD_EXP 59
40129: PUSH
40130: LD_VAR 0 4
40134: ARRAY
40135: PUSH
40136: LD_VAR 0 1
40140: DIFF
40141: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
40142: LD_ADDR_EXP 59
40146: PUSH
40147: LD_EXP 59
40151: PPUSH
40152: LD_VAR 0 4
40156: PPUSH
40157: LD_VAR 0 5
40161: PPUSH
40162: CALL_OW 1
40166: ST_TO_ADDR
// break ;
40167: GO 40171
// end ; end ;
40169: GO 40099
40171: POP
40172: POP
// end ;
40173: LD_VAR 0 3
40177: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
40178: LD_INT 0
40180: PPUSH
40181: PPUSH
40182: PPUSH
// if not mc_bases then
40183: LD_EXP 49
40187: NOT
40188: IFFALSE 40192
// exit ;
40190: GO 40391
// for i = 1 to mc_bases do
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: DOUBLE
40198: LD_INT 1
40200: DEC
40201: ST_TO_ADDR
40202: LD_EXP 49
40206: PUSH
40207: FOR_TO
40208: IFFALSE 40389
// if building in mc_bases [ i ] then
40210: LD_VAR 0 1
40214: PUSH
40215: LD_EXP 49
40219: PUSH
40220: LD_VAR 0 5
40224: ARRAY
40225: IN
40226: IFFALSE 40387
// begin tmp := mc_bases [ i ] diff building ;
40228: LD_ADDR_VAR 0 6
40232: PUSH
40233: LD_EXP 49
40237: PUSH
40238: LD_VAR 0 5
40242: ARRAY
40243: PUSH
40244: LD_VAR 0 1
40248: DIFF
40249: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
40250: LD_ADDR_EXP 49
40254: PUSH
40255: LD_EXP 49
40259: PPUSH
40260: LD_VAR 0 5
40264: PPUSH
40265: LD_VAR 0 6
40269: PPUSH
40270: CALL_OW 1
40274: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
40275: LD_VAR 0 1
40279: PUSH
40280: LD_EXP 57
40284: PUSH
40285: LD_VAR 0 5
40289: ARRAY
40290: IN
40291: IFFALSE 40330
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
40293: LD_ADDR_EXP 57
40297: PUSH
40298: LD_EXP 57
40302: PPUSH
40303: LD_VAR 0 5
40307: PPUSH
40308: LD_EXP 57
40312: PUSH
40313: LD_VAR 0 5
40317: ARRAY
40318: PUSH
40319: LD_VAR 0 1
40323: DIFF
40324: PPUSH
40325: CALL_OW 1
40329: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
40330: LD_VAR 0 1
40334: PUSH
40335: LD_EXP 58
40339: PUSH
40340: LD_VAR 0 5
40344: ARRAY
40345: IN
40346: IFFALSE 40385
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
40348: LD_ADDR_EXP 58
40352: PUSH
40353: LD_EXP 58
40357: PPUSH
40358: LD_VAR 0 5
40362: PPUSH
40363: LD_EXP 58
40367: PUSH
40368: LD_VAR 0 5
40372: ARRAY
40373: PUSH
40374: LD_VAR 0 1
40378: DIFF
40379: PPUSH
40380: CALL_OW 1
40384: ST_TO_ADDR
// break ;
40385: GO 40389
// end ;
40387: GO 40207
40389: POP
40390: POP
// end ;
40391: LD_VAR 0 4
40395: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
// if not mc_bases or not side in mc_sides then
40401: LD_EXP 49
40405: NOT
40406: PUSH
40407: LD_VAR 0 3
40411: PUSH
40412: LD_EXP 75
40416: IN
40417: NOT
40418: OR
40419: IFFALSE 40423
// exit ;
40421: GO 40546
// for i = 1 to mc_vehicles do
40423: LD_ADDR_VAR 0 6
40427: PUSH
40428: DOUBLE
40429: LD_INT 1
40431: DEC
40432: ST_TO_ADDR
40433: LD_EXP 68
40437: PUSH
40438: FOR_TO
40439: IFFALSE 40544
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
40441: LD_VAR 0 2
40445: PUSH
40446: LD_EXP 68
40450: PUSH
40451: LD_VAR 0 6
40455: ARRAY
40456: IN
40457: PUSH
40458: LD_VAR 0 1
40462: PUSH
40463: LD_EXP 68
40467: PUSH
40468: LD_VAR 0 6
40472: ARRAY
40473: IN
40474: OR
40475: IFFALSE 40542
// begin tmp := mc_vehicles [ i ] diff old ;
40477: LD_ADDR_VAR 0 7
40481: PUSH
40482: LD_EXP 68
40486: PUSH
40487: LD_VAR 0 6
40491: ARRAY
40492: PUSH
40493: LD_VAR 0 2
40497: DIFF
40498: ST_TO_ADDR
// tmp := tmp diff new ;
40499: LD_ADDR_VAR 0 7
40503: PUSH
40504: LD_VAR 0 7
40508: PUSH
40509: LD_VAR 0 1
40513: DIFF
40514: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
40515: LD_ADDR_EXP 68
40519: PUSH
40520: LD_EXP 68
40524: PPUSH
40525: LD_VAR 0 6
40529: PPUSH
40530: LD_VAR 0 7
40534: PPUSH
40535: CALL_OW 1
40539: ST_TO_ADDR
// break ;
40540: GO 40544
// end ;
40542: GO 40438
40544: POP
40545: POP
// end ;
40546: LD_VAR 0 5
40550: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
40551: LD_INT 0
40553: PPUSH
40554: PPUSH
40555: PPUSH
40556: PPUSH
// if not mc_bases then
40557: LD_EXP 49
40561: NOT
40562: IFFALSE 40566
// exit ;
40564: GO 40949
// side := GetSide ( vehicle ) ;
40566: LD_ADDR_VAR 0 5
40570: PUSH
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 255
40580: ST_TO_ADDR
// for i = 1 to mc_bases do
40581: LD_ADDR_VAR 0 4
40585: PUSH
40586: DOUBLE
40587: LD_INT 1
40589: DEC
40590: ST_TO_ADDR
40591: LD_EXP 49
40595: PUSH
40596: FOR_TO
40597: IFFALSE 40947
// begin if factory in mc_bases [ i ] then
40599: LD_VAR 0 2
40603: PUSH
40604: LD_EXP 49
40608: PUSH
40609: LD_VAR 0 4
40613: ARRAY
40614: IN
40615: IFFALSE 40945
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
40617: LD_EXP 71
40621: PUSH
40622: LD_VAR 0 4
40626: ARRAY
40627: PUSH
40628: LD_EXP 60
40632: PUSH
40633: LD_VAR 0 4
40637: ARRAY
40638: LESS
40639: PUSH
40640: LD_VAR 0 1
40644: PPUSH
40645: CALL_OW 264
40649: PUSH
40650: LD_INT 31
40652: PUSH
40653: LD_INT 32
40655: PUSH
40656: LD_INT 51
40658: PUSH
40659: LD_EXP 93
40663: PUSH
40664: LD_INT 12
40666: PUSH
40667: LD_INT 30
40669: PUSH
40670: LD_EXP 92
40674: PUSH
40675: LD_INT 11
40677: PUSH
40678: LD_INT 53
40680: PUSH
40681: LD_INT 14
40683: PUSH
40684: LD_EXP 96
40688: PUSH
40689: LD_INT 29
40691: PUSH
40692: LD_EXP 94
40696: PUSH
40697: LD_INT 13
40699: PUSH
40700: LD_INT 52
40702: PUSH
40703: LD_INT 48
40705: PUSH
40706: LD_INT 8
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: IN
40728: NOT
40729: AND
40730: IFFALSE 40771
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
40732: LD_ADDR_EXP 71
40736: PUSH
40737: LD_EXP 71
40741: PPUSH
40742: LD_VAR 0 4
40746: PPUSH
40747: LD_EXP 71
40751: PUSH
40752: LD_VAR 0 4
40756: ARRAY
40757: PUSH
40758: LD_VAR 0 1
40762: ADD
40763: PPUSH
40764: CALL_OW 1
40768: ST_TO_ADDR
40769: GO 40815
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
40771: LD_ADDR_EXP 68
40775: PUSH
40776: LD_EXP 68
40780: PPUSH
40781: LD_VAR 0 4
40785: PUSH
40786: LD_EXP 68
40790: PUSH
40791: LD_VAR 0 4
40795: ARRAY
40796: PUSH
40797: LD_INT 1
40799: PLUS
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PPUSH
40805: LD_VAR 0 1
40809: PPUSH
40810: CALL 51287 0 3
40814: ST_TO_ADDR
// if not mc_scan [ i ] then
40815: LD_EXP 72
40819: PUSH
40820: LD_VAR 0 4
40824: ARRAY
40825: NOT
40826: IFFALSE 40945
// begin if GetControl ( vehicle ) = control_remote then
40828: LD_VAR 0 1
40832: PPUSH
40833: CALL_OW 263
40837: PUSH
40838: LD_INT 2
40840: EQUAL
40841: IFFALSE 40861
// repeat wait ( 0 0$1 ) ;
40843: LD_INT 35
40845: PPUSH
40846: CALL_OW 67
// until IsControledBy ( vehicle ) ;
40850: LD_VAR 0 1
40854: PPUSH
40855: CALL_OW 312
40859: IFFALSE 40843
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
40861: LD_VAR 0 1
40865: PPUSH
40866: LD_EXP 73
40870: PUSH
40871: LD_VAR 0 4
40875: ARRAY
40876: PPUSH
40877: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 263
40890: PUSH
40891: LD_INT 1
40893: NONEQUAL
40894: IFFALSE 40898
// break ;
40896: GO 40947
// repeat wait ( 0 0$1 ) ;
40898: LD_INT 35
40900: PPUSH
40901: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
40905: LD_VAR 0 1
40909: PPUSH
40910: LD_EXP 73
40914: PUSH
40915: LD_VAR 0 4
40919: ARRAY
40920: PPUSH
40921: CALL_OW 308
40925: IFFALSE 40898
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
40927: LD_VAR 0 1
40931: PPUSH
40932: CALL_OW 311
40936: PPUSH
40937: CALL_OW 121
// exit ;
40941: POP
40942: POP
40943: GO 40949
// end ; end ; end ;
40945: GO 40596
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 3
40953: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
// if not mc_bases then
40960: LD_EXP 49
40964: NOT
40965: IFFALSE 40969
// exit ;
40967: GO 41322
// repeat wait ( 0 0$1 ) ;
40969: LD_INT 35
40971: PPUSH
40972: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
40976: LD_VAR 0 2
40980: PPUSH
40981: LD_VAR 0 3
40985: PPUSH
40986: CALL_OW 284
40990: IFFALSE 40969
// if GetResourceTypeXY ( x , y ) = mat_artefact then
40992: LD_VAR 0 2
40996: PPUSH
40997: LD_VAR 0 3
41001: PPUSH
41002: CALL_OW 283
41006: PUSH
41007: LD_INT 4
41009: EQUAL
41010: IFFALSE 41014
// exit ;
41012: GO 41322
// for i = 1 to mc_bases do
41014: LD_ADDR_VAR 0 7
41018: PUSH
41019: DOUBLE
41020: LD_INT 1
41022: DEC
41023: ST_TO_ADDR
41024: LD_EXP 49
41028: PUSH
41029: FOR_TO
41030: IFFALSE 41320
// begin if mc_crates_area [ i ] then
41032: LD_EXP 67
41036: PUSH
41037: LD_VAR 0 7
41041: ARRAY
41042: IFFALSE 41153
// for j in mc_crates_area [ i ] do
41044: LD_ADDR_VAR 0 8
41048: PUSH
41049: LD_EXP 67
41053: PUSH
41054: LD_VAR 0 7
41058: ARRAY
41059: PUSH
41060: FOR_IN
41061: IFFALSE 41151
// if InArea ( x , y , j ) then
41063: LD_VAR 0 2
41067: PPUSH
41068: LD_VAR 0 3
41072: PPUSH
41073: LD_VAR 0 8
41077: PPUSH
41078: CALL_OW 309
41082: IFFALSE 41149
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41084: LD_ADDR_EXP 65
41088: PUSH
41089: LD_EXP 65
41093: PPUSH
41094: LD_VAR 0 7
41098: PUSH
41099: LD_EXP 65
41103: PUSH
41104: LD_VAR 0 7
41108: ARRAY
41109: PUSH
41110: LD_INT 1
41112: PLUS
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PPUSH
41118: LD_VAR 0 4
41122: PUSH
41123: LD_VAR 0 2
41127: PUSH
41128: LD_VAR 0 3
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: LIST
41137: PPUSH
41138: CALL 51287 0 3
41142: ST_TO_ADDR
// exit ;
41143: POP
41144: POP
41145: POP
41146: POP
41147: GO 41322
// end ;
41149: GO 41060
41151: POP
41152: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41153: LD_ADDR_VAR 0 9
41157: PUSH
41158: LD_EXP 49
41162: PUSH
41163: LD_VAR 0 7
41167: ARRAY
41168: PPUSH
41169: LD_INT 2
41171: PUSH
41172: LD_INT 30
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 30
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: PPUSH
41197: CALL_OW 72
41201: ST_TO_ADDR
// if not depot then
41202: LD_VAR 0 9
41206: NOT
41207: IFFALSE 41211
// continue ;
41209: GO 41029
// for j in depot do
41211: LD_ADDR_VAR 0 8
41215: PUSH
41216: LD_VAR 0 9
41220: PUSH
41221: FOR_IN
41222: IFFALSE 41316
// if GetDistUnitXY ( j , x , y ) < 30 then
41224: LD_VAR 0 8
41228: PPUSH
41229: LD_VAR 0 2
41233: PPUSH
41234: LD_VAR 0 3
41238: PPUSH
41239: CALL_OW 297
41243: PUSH
41244: LD_INT 30
41246: LESS
41247: IFFALSE 41314
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41249: LD_ADDR_EXP 65
41253: PUSH
41254: LD_EXP 65
41258: PPUSH
41259: LD_VAR 0 7
41263: PUSH
41264: LD_EXP 65
41268: PUSH
41269: LD_VAR 0 7
41273: ARRAY
41274: PUSH
41275: LD_INT 1
41277: PLUS
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PPUSH
41283: LD_VAR 0 4
41287: PUSH
41288: LD_VAR 0 2
41292: PUSH
41293: LD_VAR 0 3
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: LIST
41302: PPUSH
41303: CALL 51287 0 3
41307: ST_TO_ADDR
// exit ;
41308: POP
41309: POP
41310: POP
41311: POP
41312: GO 41322
// end ;
41314: GO 41221
41316: POP
41317: POP
// end ;
41318: GO 41029
41320: POP
41321: POP
// end ;
41322: LD_VAR 0 6
41326: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
41327: LD_INT 0
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
// side := GetSide ( lab ) ;
41333: LD_ADDR_VAR 0 4
41337: PUSH
41338: LD_VAR 0 2
41342: PPUSH
41343: CALL_OW 255
41347: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
41348: LD_VAR 0 4
41352: PUSH
41353: LD_EXP 75
41357: IN
41358: NOT
41359: PUSH
41360: LD_EXP 76
41364: NOT
41365: OR
41366: PUSH
41367: LD_EXP 49
41371: NOT
41372: OR
41373: IFFALSE 41377
// exit ;
41375: GO 41610
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
41377: LD_ADDR_EXP 76
41381: PUSH
41382: LD_EXP 76
41386: PPUSH
41387: LD_VAR 0 4
41391: PPUSH
41392: LD_EXP 76
41396: PUSH
41397: LD_VAR 0 4
41401: ARRAY
41402: PUSH
41403: LD_VAR 0 1
41407: DIFF
41408: PPUSH
41409: CALL_OW 1
41413: ST_TO_ADDR
// for i = 1 to mc_bases do
41414: LD_ADDR_VAR 0 5
41418: PUSH
41419: DOUBLE
41420: LD_INT 1
41422: DEC
41423: ST_TO_ADDR
41424: LD_EXP 49
41428: PUSH
41429: FOR_TO
41430: IFFALSE 41608
// begin if lab in mc_bases [ i ] then
41432: LD_VAR 0 2
41436: PUSH
41437: LD_EXP 49
41441: PUSH
41442: LD_VAR 0 5
41446: ARRAY
41447: IN
41448: IFFALSE 41606
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
41450: LD_VAR 0 1
41454: PUSH
41455: LD_INT 11
41457: PUSH
41458: LD_INT 4
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: IN
41473: PUSH
41474: LD_EXP 79
41478: PUSH
41479: LD_VAR 0 5
41483: ARRAY
41484: AND
41485: IFFALSE 41606
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
41487: LD_ADDR_VAR 0 6
41491: PUSH
41492: LD_EXP 79
41496: PUSH
41497: LD_VAR 0 5
41501: ARRAY
41502: PUSH
41503: LD_INT 1
41505: ARRAY
41506: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41507: LD_ADDR_EXP 79
41511: PUSH
41512: LD_EXP 79
41516: PPUSH
41517: LD_VAR 0 5
41521: PPUSH
41522: EMPTY
41523: PPUSH
41524: CALL_OW 1
41528: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
41529: LD_VAR 0 6
41533: PPUSH
41534: LD_INT 0
41536: PPUSH
41537: CALL_OW 109
// ComExitBuilding ( tmp ) ;
41541: LD_VAR 0 6
41545: PPUSH
41546: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
41550: LD_ADDR_EXP 78
41554: PUSH
41555: LD_EXP 78
41559: PPUSH
41560: LD_VAR 0 5
41564: PPUSH
41565: LD_EXP 78
41569: PUSH
41570: LD_VAR 0 5
41574: ARRAY
41575: PPUSH
41576: LD_INT 1
41578: PPUSH
41579: LD_VAR 0 6
41583: PPUSH
41584: CALL_OW 2
41588: PPUSH
41589: CALL_OW 1
41593: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
41594: LD_VAR 0 5
41598: PPUSH
41599: LD_INT 112
41601: PPUSH
41602: CALL 19685 0 2
// end ; end ; end ;
41606: GO 41429
41608: POP
41609: POP
// end ;
41610: LD_VAR 0 3
41614: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
41619: PPUSH
41620: PPUSH
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
// if not mc_bases then
41625: LD_EXP 49
41629: NOT
41630: IFFALSE 41634
// exit ;
41632: GO 42577
// for i = 1 to mc_bases do
41634: LD_ADDR_VAR 0 3
41638: PUSH
41639: DOUBLE
41640: LD_INT 1
41642: DEC
41643: ST_TO_ADDR
41644: LD_EXP 49
41648: PUSH
41649: FOR_TO
41650: IFFALSE 42575
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
41652: LD_VAR 0 1
41656: PUSH
41657: LD_EXP 49
41661: PUSH
41662: LD_VAR 0 3
41666: ARRAY
41667: IN
41668: PUSH
41669: LD_VAR 0 1
41673: PUSH
41674: LD_EXP 56
41678: PUSH
41679: LD_VAR 0 3
41683: ARRAY
41684: IN
41685: OR
41686: PUSH
41687: LD_VAR 0 1
41691: PUSH
41692: LD_EXP 68
41696: PUSH
41697: LD_VAR 0 3
41701: ARRAY
41702: IN
41703: OR
41704: PUSH
41705: LD_VAR 0 1
41709: PUSH
41710: LD_EXP 78
41714: PUSH
41715: LD_VAR 0 3
41719: ARRAY
41720: IN
41721: OR
41722: PUSH
41723: LD_VAR 0 1
41727: PUSH
41728: LD_EXP 79
41732: PUSH
41733: LD_VAR 0 3
41737: ARRAY
41738: IN
41739: OR
41740: IFFALSE 42573
// begin if un in mc_ape [ i ] then
41742: LD_VAR 0 1
41746: PUSH
41747: LD_EXP 78
41751: PUSH
41752: LD_VAR 0 3
41756: ARRAY
41757: IN
41758: IFFALSE 41797
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
41760: LD_ADDR_EXP 78
41764: PUSH
41765: LD_EXP 78
41769: PPUSH
41770: LD_VAR 0 3
41774: PPUSH
41775: LD_EXP 78
41779: PUSH
41780: LD_VAR 0 3
41784: ARRAY
41785: PUSH
41786: LD_VAR 0 1
41790: DIFF
41791: PPUSH
41792: CALL_OW 1
41796: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
41797: LD_VAR 0 1
41801: PUSH
41802: LD_EXP 79
41806: PUSH
41807: LD_VAR 0 3
41811: ARRAY
41812: IN
41813: IFFALSE 41837
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41815: LD_ADDR_EXP 79
41819: PUSH
41820: LD_EXP 79
41824: PPUSH
41825: LD_VAR 0 3
41829: PPUSH
41830: EMPTY
41831: PPUSH
41832: CALL_OW 1
41836: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
41837: LD_VAR 0 1
41841: PPUSH
41842: CALL_OW 247
41846: PUSH
41847: LD_INT 2
41849: EQUAL
41850: PUSH
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 110
41860: PUSH
41861: LD_INT 20
41863: EQUAL
41864: AND
41865: IFFALSE 41968
// begin fac := MC_GetBuilding ( i , b_factory ) ;
41867: LD_ADDR_VAR 0 8
41871: PUSH
41872: LD_VAR 0 3
41876: PPUSH
41877: LD_INT 3
41879: PPUSH
41880: CALL 38903 0 2
41884: ST_TO_ADDR
// if fac then
41885: LD_VAR 0 8
41889: IFFALSE 41968
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
41891: LD_ADDR_VAR 0 9
41895: PUSH
41896: LD_VAR 0 8
41900: PPUSH
41901: LD_VAR 0 1
41905: PPUSH
41906: CALL_OW 265
41910: PPUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 262
41920: PPUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 263
41930: PPUSH
41931: LD_VAR 0 1
41935: PPUSH
41936: CALL_OW 264
41940: PPUSH
41941: CALL 48452 0 5
41945: ST_TO_ADDR
// if components then
41946: LD_VAR 0 9
41950: IFFALSE 41966
// MC_InsertProduceList ( i , components ) ;
41952: LD_VAR 0 3
41956: PPUSH
41957: LD_VAR 0 9
41961: PPUSH
41962: CALL 38473 0 2
// break ;
41966: GO 42575
// end ; end ; if GetType ( un ) = unit_building then
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 247
41977: PUSH
41978: LD_INT 3
41980: EQUAL
41981: IFFALSE 42296
// begin btype := GetBType ( un ) ;
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 266
41997: ST_TO_ADDR
// if btype = b_warehouse then
41998: LD_VAR 0 5
42002: PUSH
42003: LD_INT 1
42005: EQUAL
42006: IFFALSE 42024
// begin btype := b_depot ;
42008: LD_ADDR_VAR 0 5
42012: PUSH
42013: LD_INT 0
42015: ST_TO_ADDR
// pos := 1 ;
42016: LD_ADDR_VAR 0 6
42020: PUSH
42021: LD_INT 1
42023: ST_TO_ADDR
// end ; if btype = b_factory then
42024: LD_VAR 0 5
42028: PUSH
42029: LD_INT 3
42031: EQUAL
42032: IFFALSE 42050
// begin btype := b_workshop ;
42034: LD_ADDR_VAR 0 5
42038: PUSH
42039: LD_INT 2
42041: ST_TO_ADDR
// pos := 1 ;
42042: LD_ADDR_VAR 0 6
42046: PUSH
42047: LD_INT 1
42049: ST_TO_ADDR
// end ; if btype = b_barracks then
42050: LD_VAR 0 5
42054: PUSH
42055: LD_INT 5
42057: EQUAL
42058: IFFALSE 42068
// btype := b_armoury ;
42060: LD_ADDR_VAR 0 5
42064: PUSH
42065: LD_INT 4
42067: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
42068: LD_VAR 0 5
42072: PUSH
42073: LD_INT 7
42075: PUSH
42076: LD_INT 8
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: IN
42083: IFFALSE 42093
// btype := b_lab ;
42085: LD_ADDR_VAR 0 5
42089: PUSH
42090: LD_INT 6
42092: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
42093: LD_ADDR_EXP 54
42097: PUSH
42098: LD_EXP 54
42102: PPUSH
42103: LD_VAR 0 3
42107: PUSH
42108: LD_EXP 54
42112: PUSH
42113: LD_VAR 0 3
42117: ARRAY
42118: PUSH
42119: LD_INT 1
42121: PLUS
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PPUSH
42127: LD_VAR 0 5
42131: PUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 250
42141: PUSH
42142: LD_VAR 0 1
42146: PPUSH
42147: CALL_OW 251
42151: PUSH
42152: LD_VAR 0 1
42156: PPUSH
42157: CALL_OW 254
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: PPUSH
42168: CALL 51287 0 3
42172: ST_TO_ADDR
// if pos = 1 then
42173: LD_VAR 0 6
42177: PUSH
42178: LD_INT 1
42180: EQUAL
42181: IFFALSE 42296
// begin tmp := mc_build_list [ i ] ;
42183: LD_ADDR_VAR 0 7
42187: PUSH
42188: LD_EXP 54
42192: PUSH
42193: LD_VAR 0 3
42197: ARRAY
42198: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42199: LD_VAR 0 7
42203: PPUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 30
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 30
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: PPUSH
42232: CALL_OW 72
42236: IFFALSE 42246
// pos := 2 ;
42238: LD_ADDR_VAR 0 6
42242: PUSH
42243: LD_INT 2
42245: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
42246: LD_ADDR_VAR 0 7
42250: PUSH
42251: LD_VAR 0 7
42255: PPUSH
42256: LD_VAR 0 6
42260: PPUSH
42261: LD_VAR 0 7
42265: PPUSH
42266: CALL 51178 0 3
42270: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
42271: LD_ADDR_EXP 54
42275: PUSH
42276: LD_EXP 54
42280: PPUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: LD_VAR 0 7
42290: PPUSH
42291: CALL_OW 1
42295: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
42296: LD_VAR 0 1
42300: PUSH
42301: LD_EXP 49
42305: PUSH
42306: LD_VAR 0 3
42310: ARRAY
42311: IN
42312: IFFALSE 42351
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
42314: LD_ADDR_EXP 49
42318: PUSH
42319: LD_EXP 49
42323: PPUSH
42324: LD_VAR 0 3
42328: PPUSH
42329: LD_EXP 49
42333: PUSH
42334: LD_VAR 0 3
42338: ARRAY
42339: PUSH
42340: LD_VAR 0 1
42344: DIFF
42345: PPUSH
42346: CALL_OW 1
42350: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
42351: LD_VAR 0 1
42355: PUSH
42356: LD_EXP 56
42360: PUSH
42361: LD_VAR 0 3
42365: ARRAY
42366: IN
42367: IFFALSE 42406
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
42369: LD_ADDR_EXP 56
42373: PUSH
42374: LD_EXP 56
42378: PPUSH
42379: LD_VAR 0 3
42383: PPUSH
42384: LD_EXP 56
42388: PUSH
42389: LD_VAR 0 3
42393: ARRAY
42394: PUSH
42395: LD_VAR 0 1
42399: DIFF
42400: PPUSH
42401: CALL_OW 1
42405: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
42406: LD_VAR 0 1
42410: PUSH
42411: LD_EXP 68
42415: PUSH
42416: LD_VAR 0 3
42420: ARRAY
42421: IN
42422: IFFALSE 42461
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
42424: LD_ADDR_EXP 68
42428: PUSH
42429: LD_EXP 68
42433: PPUSH
42434: LD_VAR 0 3
42438: PPUSH
42439: LD_EXP 68
42443: PUSH
42444: LD_VAR 0 3
42448: ARRAY
42449: PUSH
42450: LD_VAR 0 1
42454: DIFF
42455: PPUSH
42456: CALL_OW 1
42460: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
42461: LD_VAR 0 1
42465: PUSH
42466: LD_EXP 58
42470: PUSH
42471: LD_VAR 0 3
42475: ARRAY
42476: IN
42477: IFFALSE 42516
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
42479: LD_ADDR_EXP 58
42483: PUSH
42484: LD_EXP 58
42488: PPUSH
42489: LD_VAR 0 3
42493: PPUSH
42494: LD_EXP 58
42498: PUSH
42499: LD_VAR 0 3
42503: ARRAY
42504: PUSH
42505: LD_VAR 0 1
42509: DIFF
42510: PPUSH
42511: CALL_OW 1
42515: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
42516: LD_VAR 0 1
42520: PUSH
42521: LD_EXP 57
42525: PUSH
42526: LD_VAR 0 3
42530: ARRAY
42531: IN
42532: IFFALSE 42571
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
42534: LD_ADDR_EXP 57
42538: PUSH
42539: LD_EXP 57
42543: PPUSH
42544: LD_VAR 0 3
42548: PPUSH
42549: LD_EXP 57
42553: PUSH
42554: LD_VAR 0 3
42558: ARRAY
42559: PUSH
42560: LD_VAR 0 1
42564: DIFF
42565: PPUSH
42566: CALL_OW 1
42570: ST_TO_ADDR
// end ; break ;
42571: GO 42575
// end ;
42573: GO 41649
42575: POP
42576: POP
// end ;
42577: LD_VAR 0 2
42581: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
42586: PPUSH
// if not mc_bases then
42587: LD_EXP 49
42591: NOT
42592: IFFALSE 42596
// exit ;
42594: GO 42811
// for i = 1 to mc_bases do
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: DOUBLE
42602: LD_INT 1
42604: DEC
42605: ST_TO_ADDR
42606: LD_EXP 49
42610: PUSH
42611: FOR_TO
42612: IFFALSE 42809
// begin if building in mc_construct_list [ i ] then
42614: LD_VAR 0 1
42618: PUSH
42619: LD_EXP 56
42623: PUSH
42624: LD_VAR 0 3
42628: ARRAY
42629: IN
42630: IFFALSE 42807
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
42632: LD_ADDR_EXP 56
42636: PUSH
42637: LD_EXP 56
42641: PPUSH
42642: LD_VAR 0 3
42646: PPUSH
42647: LD_EXP 56
42651: PUSH
42652: LD_VAR 0 3
42656: ARRAY
42657: PUSH
42658: LD_VAR 0 1
42662: DIFF
42663: PPUSH
42664: CALL_OW 1
42668: ST_TO_ADDR
// if building in mc_lab [ i ] then
42669: LD_VAR 0 1
42673: PUSH
42674: LD_EXP 82
42678: PUSH
42679: LD_VAR 0 3
42683: ARRAY
42684: IN
42685: IFFALSE 42740
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
42687: LD_ADDR_EXP 83
42691: PUSH
42692: LD_EXP 83
42696: PPUSH
42697: LD_VAR 0 3
42701: PPUSH
42702: LD_EXP 83
42706: PUSH
42707: LD_VAR 0 3
42711: ARRAY
42712: PPUSH
42713: LD_INT 1
42715: PPUSH
42716: LD_EXP 83
42720: PUSH
42721: LD_VAR 0 3
42725: ARRAY
42726: PPUSH
42727: LD_INT 0
42729: PPUSH
42730: CALL 50270 0 4
42734: PPUSH
42735: CALL_OW 1
42739: ST_TO_ADDR
// if not building in mc_bases [ i ] then
42740: LD_VAR 0 1
42744: PUSH
42745: LD_EXP 49
42749: PUSH
42750: LD_VAR 0 3
42754: ARRAY
42755: IN
42756: NOT
42757: IFFALSE 42803
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
42759: LD_ADDR_EXP 49
42763: PUSH
42764: LD_EXP 49
42768: PPUSH
42769: LD_VAR 0 3
42773: PUSH
42774: LD_EXP 49
42778: PUSH
42779: LD_VAR 0 3
42783: ARRAY
42784: PUSH
42785: LD_INT 1
42787: PLUS
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PPUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL 51287 0 3
42802: ST_TO_ADDR
// exit ;
42803: POP
42804: POP
42805: GO 42811
// end ; end ;
42807: GO 42611
42809: POP
42810: POP
// end ;
42811: LD_VAR 0 2
42815: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
42816: LD_INT 0
42818: PPUSH
42819: PPUSH
42820: PPUSH
42821: PPUSH
42822: PPUSH
42823: PPUSH
42824: PPUSH
// if not mc_bases then
42825: LD_EXP 49
42829: NOT
42830: IFFALSE 42834
// exit ;
42832: GO 43495
// for i = 1 to mc_bases do
42834: LD_ADDR_VAR 0 3
42838: PUSH
42839: DOUBLE
42840: LD_INT 1
42842: DEC
42843: ST_TO_ADDR
42844: LD_EXP 49
42848: PUSH
42849: FOR_TO
42850: IFFALSE 43493
// begin if building in mc_construct_list [ i ] then
42852: LD_VAR 0 1
42856: PUSH
42857: LD_EXP 56
42861: PUSH
42862: LD_VAR 0 3
42866: ARRAY
42867: IN
42868: IFFALSE 43491
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
42870: LD_ADDR_EXP 56
42874: PUSH
42875: LD_EXP 56
42879: PPUSH
42880: LD_VAR 0 3
42884: PPUSH
42885: LD_EXP 56
42889: PUSH
42890: LD_VAR 0 3
42894: ARRAY
42895: PUSH
42896: LD_VAR 0 1
42900: DIFF
42901: PPUSH
42902: CALL_OW 1
42906: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
42907: LD_ADDR_EXP 49
42911: PUSH
42912: LD_EXP 49
42916: PPUSH
42917: LD_VAR 0 3
42921: PUSH
42922: LD_EXP 49
42926: PUSH
42927: LD_VAR 0 3
42931: ARRAY
42932: PUSH
42933: LD_INT 1
42935: PLUS
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PPUSH
42941: LD_VAR 0 1
42945: PPUSH
42946: CALL 51287 0 3
42950: ST_TO_ADDR
// btype := GetBType ( building ) ;
42951: LD_ADDR_VAR 0 5
42955: PUSH
42956: LD_VAR 0 1
42960: PPUSH
42961: CALL_OW 266
42965: ST_TO_ADDR
// side := GetSide ( building ) ;
42966: LD_ADDR_VAR 0 8
42970: PUSH
42971: LD_VAR 0 1
42975: PPUSH
42976: CALL_OW 255
42980: ST_TO_ADDR
// if btype = b_lab then
42981: LD_VAR 0 5
42985: PUSH
42986: LD_INT 6
42988: EQUAL
42989: IFFALSE 43039
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
42991: LD_ADDR_EXP 82
42995: PUSH
42996: LD_EXP 82
43000: PPUSH
43001: LD_VAR 0 3
43005: PUSH
43006: LD_EXP 82
43010: PUSH
43011: LD_VAR 0 3
43015: ARRAY
43016: PUSH
43017: LD_INT 1
43019: PLUS
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PPUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL 51287 0 3
43034: ST_TO_ADDR
// exit ;
43035: POP
43036: POP
43037: GO 43495
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
43039: LD_VAR 0 5
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: IN
43058: IFFALSE 43182
// begin if btype = b_armoury then
43060: LD_VAR 0 5
43064: PUSH
43065: LD_INT 4
43067: EQUAL
43068: IFFALSE 43078
// btype := b_barracks ;
43070: LD_ADDR_VAR 0 5
43074: PUSH
43075: LD_INT 5
43077: ST_TO_ADDR
// if btype = b_depot then
43078: LD_VAR 0 5
43082: PUSH
43083: LD_INT 0
43085: EQUAL
43086: IFFALSE 43096
// btype := b_warehouse ;
43088: LD_ADDR_VAR 0 5
43092: PUSH
43093: LD_INT 1
43095: ST_TO_ADDR
// if btype = b_workshop then
43096: LD_VAR 0 5
43100: PUSH
43101: LD_INT 2
43103: EQUAL
43104: IFFALSE 43114
// btype := b_factory ;
43106: LD_ADDR_VAR 0 5
43110: PUSH
43111: LD_INT 3
43113: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
43114: LD_VAR 0 5
43118: PPUSH
43119: LD_VAR 0 8
43123: PPUSH
43124: CALL_OW 323
43128: PUSH
43129: LD_INT 1
43131: EQUAL
43132: IFFALSE 43178
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
43134: LD_ADDR_EXP 81
43138: PUSH
43139: LD_EXP 81
43143: PPUSH
43144: LD_VAR 0 3
43148: PUSH
43149: LD_EXP 81
43153: PUSH
43154: LD_VAR 0 3
43158: ARRAY
43159: PUSH
43160: LD_INT 1
43162: PLUS
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PPUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: CALL 51287 0 3
43177: ST_TO_ADDR
// exit ;
43178: POP
43179: POP
43180: GO 43495
// end ; if btype in [ b_bunker , b_turret ] then
43182: LD_VAR 0 5
43186: PUSH
43187: LD_INT 32
43189: PUSH
43190: LD_INT 33
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: IN
43197: IFFALSE 43487
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
43199: LD_ADDR_EXP 57
43203: PUSH
43204: LD_EXP 57
43208: PPUSH
43209: LD_VAR 0 3
43213: PUSH
43214: LD_EXP 57
43218: PUSH
43219: LD_VAR 0 3
43223: ARRAY
43224: PUSH
43225: LD_INT 1
43227: PLUS
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PPUSH
43233: LD_VAR 0 1
43237: PPUSH
43238: CALL 51287 0 3
43242: ST_TO_ADDR
// if btype = b_bunker then
43243: LD_VAR 0 5
43247: PUSH
43248: LD_INT 32
43250: EQUAL
43251: IFFALSE 43487
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43253: LD_ADDR_EXP 58
43257: PUSH
43258: LD_EXP 58
43262: PPUSH
43263: LD_VAR 0 3
43267: PUSH
43268: LD_EXP 58
43272: PUSH
43273: LD_VAR 0 3
43277: ARRAY
43278: PUSH
43279: LD_INT 1
43281: PLUS
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PPUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL 51287 0 3
43296: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
43297: LD_ADDR_VAR 0 6
43301: PUSH
43302: LD_EXP 49
43306: PUSH
43307: LD_VAR 0 3
43311: ARRAY
43312: PPUSH
43313: LD_INT 25
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: PUSH
43326: LD_INT 54
43328: PUSH
43329: EMPTY
43330: LIST
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PPUSH
43340: CALL_OW 72
43344: ST_TO_ADDR
// if tmp then
43345: LD_VAR 0 6
43349: IFFALSE 43355
// exit ;
43351: POP
43352: POP
43353: GO 43495
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43355: LD_ADDR_VAR 0 6
43359: PUSH
43360: LD_EXP 49
43364: PUSH
43365: LD_VAR 0 3
43369: ARRAY
43370: PPUSH
43371: LD_INT 2
43373: PUSH
43374: LD_INT 30
43376: PUSH
43377: LD_INT 4
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 30
43386: PUSH
43387: LD_INT 5
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: LIST
43398: PPUSH
43399: CALL_OW 72
43403: ST_TO_ADDR
// if not tmp then
43404: LD_VAR 0 6
43408: NOT
43409: IFFALSE 43415
// exit ;
43411: POP
43412: POP
43413: GO 43495
// for j in tmp do
43415: LD_ADDR_VAR 0 4
43419: PUSH
43420: LD_VAR 0 6
43424: PUSH
43425: FOR_IN
43426: IFFALSE 43485
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
43428: LD_ADDR_VAR 0 7
43432: PUSH
43433: LD_VAR 0 4
43437: PPUSH
43438: CALL_OW 313
43442: PPUSH
43443: LD_INT 25
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PPUSH
43453: CALL_OW 72
43457: ST_TO_ADDR
// if units then
43458: LD_VAR 0 7
43462: IFFALSE 43483
// begin ComExitBuilding ( units [ 1 ] ) ;
43464: LD_VAR 0 7
43468: PUSH
43469: LD_INT 1
43471: ARRAY
43472: PPUSH
43473: CALL_OW 122
// exit ;
43477: POP
43478: POP
43479: POP
43480: POP
43481: GO 43495
// end ; end ;
43483: GO 43425
43485: POP
43486: POP
// end ; end ; exit ;
43487: POP
43488: POP
43489: GO 43495
// end ; end ;
43491: GO 42849
43493: POP
43494: POP
// end ;
43495: LD_VAR 0 2
43499: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
43500: LD_INT 0
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
43507: PPUSH
43508: PPUSH
// if not mc_bases then
43509: LD_EXP 49
43513: NOT
43514: IFFALSE 43518
// exit ;
43516: GO 43749
// btype := GetBType ( building ) ;
43518: LD_ADDR_VAR 0 6
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 266
43532: ST_TO_ADDR
// x := GetX ( building ) ;
43533: LD_ADDR_VAR 0 7
43537: PUSH
43538: LD_VAR 0 1
43542: PPUSH
43543: CALL_OW 250
43547: ST_TO_ADDR
// y := GetY ( building ) ;
43548: LD_ADDR_VAR 0 8
43552: PUSH
43553: LD_VAR 0 1
43557: PPUSH
43558: CALL_OW 251
43562: ST_TO_ADDR
// d := GetDir ( building ) ;
43563: LD_ADDR_VAR 0 9
43567: PUSH
43568: LD_VAR 0 1
43572: PPUSH
43573: CALL_OW 254
43577: ST_TO_ADDR
// for i = 1 to mc_bases do
43578: LD_ADDR_VAR 0 4
43582: PUSH
43583: DOUBLE
43584: LD_INT 1
43586: DEC
43587: ST_TO_ADDR
43588: LD_EXP 49
43592: PUSH
43593: FOR_TO
43594: IFFALSE 43747
// begin if not mc_build_list [ i ] then
43596: LD_EXP 54
43600: PUSH
43601: LD_VAR 0 4
43605: ARRAY
43606: NOT
43607: IFFALSE 43611
// continue ;
43609: GO 43593
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
43611: LD_VAR 0 6
43615: PUSH
43616: LD_VAR 0 7
43620: PUSH
43621: LD_VAR 0 8
43625: PUSH
43626: LD_VAR 0 9
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: PPUSH
43637: LD_EXP 54
43641: PUSH
43642: LD_VAR 0 4
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: CALL 56924 0 2
43656: IFFALSE 43745
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
43658: LD_ADDR_EXP 54
43662: PUSH
43663: LD_EXP 54
43667: PPUSH
43668: LD_VAR 0 4
43672: PPUSH
43673: LD_EXP 54
43677: PUSH
43678: LD_VAR 0 4
43682: ARRAY
43683: PPUSH
43684: LD_INT 1
43686: PPUSH
43687: CALL_OW 3
43691: PPUSH
43692: CALL_OW 1
43696: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
43697: LD_ADDR_EXP 56
43701: PUSH
43702: LD_EXP 56
43706: PPUSH
43707: LD_VAR 0 4
43711: PUSH
43712: LD_EXP 56
43716: PUSH
43717: LD_VAR 0 4
43721: ARRAY
43722: PUSH
43723: LD_INT 1
43725: PLUS
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PPUSH
43731: LD_VAR 0 1
43735: PPUSH
43736: CALL 51287 0 3
43740: ST_TO_ADDR
// exit ;
43741: POP
43742: POP
43743: GO 43749
// end ; end ;
43745: GO 43593
43747: POP
43748: POP
// end ;
43749: LD_VAR 0 3
43753: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
43754: LD_INT 0
43756: PPUSH
43757: PPUSH
43758: PPUSH
// if not mc_bases then
43759: LD_EXP 49
43763: NOT
43764: IFFALSE 43768
// exit ;
43766: GO 43958
// for i = 1 to mc_bases do
43768: LD_ADDR_VAR 0 4
43772: PUSH
43773: DOUBLE
43774: LD_INT 1
43776: DEC
43777: ST_TO_ADDR
43778: LD_EXP 49
43782: PUSH
43783: FOR_TO
43784: IFFALSE 43871
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
43786: LD_VAR 0 1
43790: PUSH
43791: LD_EXP 57
43795: PUSH
43796: LD_VAR 0 4
43800: ARRAY
43801: IN
43802: PUSH
43803: LD_VAR 0 1
43807: PUSH
43808: LD_EXP 58
43812: PUSH
43813: LD_VAR 0 4
43817: ARRAY
43818: IN
43819: NOT
43820: AND
43821: IFFALSE 43869
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43823: LD_ADDR_EXP 58
43827: PUSH
43828: LD_EXP 58
43832: PPUSH
43833: LD_VAR 0 4
43837: PUSH
43838: LD_EXP 58
43842: PUSH
43843: LD_VAR 0 4
43847: ARRAY
43848: PUSH
43849: LD_INT 1
43851: PLUS
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PPUSH
43857: LD_VAR 0 1
43861: PPUSH
43862: CALL 51287 0 3
43866: ST_TO_ADDR
// break ;
43867: GO 43871
// end ; end ;
43869: GO 43783
43871: POP
43872: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
43873: LD_VAR 0 1
43877: PPUSH
43878: CALL_OW 257
43882: PUSH
43883: LD_EXP 75
43887: IN
43888: PUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 266
43898: PUSH
43899: LD_INT 5
43901: EQUAL
43902: AND
43903: PUSH
43904: LD_VAR 0 2
43908: PPUSH
43909: CALL_OW 110
43913: PUSH
43914: LD_INT 18
43916: NONEQUAL
43917: AND
43918: IFFALSE 43958
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
43920: LD_VAR 0 2
43924: PPUSH
43925: CALL_OW 257
43929: PUSH
43930: LD_INT 5
43932: PUSH
43933: LD_INT 8
43935: PUSH
43936: LD_INT 9
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: LIST
43943: IN
43944: IFFALSE 43958
// SetClass ( unit , 1 ) ;
43946: LD_VAR 0 2
43950: PPUSH
43951: LD_INT 1
43953: PPUSH
43954: CALL_OW 336
// end ;
43958: LD_VAR 0 3
43962: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
43963: LD_INT 0
43965: PPUSH
43966: PPUSH
// if not mc_bases then
43967: LD_EXP 49
43971: NOT
43972: IFFALSE 43976
// exit ;
43974: GO 44092
// if GetLives ( abandoned_vehicle ) > 250 then
43976: LD_VAR 0 2
43980: PPUSH
43981: CALL_OW 256
43985: PUSH
43986: LD_INT 250
43988: GREATER
43989: IFFALSE 43993
// exit ;
43991: GO 44092
// for i = 1 to mc_bases do
43993: LD_ADDR_VAR 0 6
43997: PUSH
43998: DOUBLE
43999: LD_INT 1
44001: DEC
44002: ST_TO_ADDR
44003: LD_EXP 49
44007: PUSH
44008: FOR_TO
44009: IFFALSE 44090
// begin if driver in mc_bases [ i ] then
44011: LD_VAR 0 1
44015: PUSH
44016: LD_EXP 49
44020: PUSH
44021: LD_VAR 0 6
44025: ARRAY
44026: IN
44027: IFFALSE 44088
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
44029: LD_VAR 0 1
44033: PPUSH
44034: LD_EXP 49
44038: PUSH
44039: LD_VAR 0 6
44043: ARRAY
44044: PPUSH
44045: LD_INT 2
44047: PUSH
44048: LD_INT 30
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 30
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: PPUSH
44073: CALL_OW 72
44077: PUSH
44078: LD_INT 1
44080: ARRAY
44081: PPUSH
44082: CALL_OW 112
// break ;
44086: GO 44090
// end ; end ;
44088: GO 44008
44090: POP
44091: POP
// end ; end_of_file
44092: LD_VAR 0 5
44096: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44097: LD_INT 0
44099: PPUSH
44100: PPUSH
// if exist_mode then
44101: LD_VAR 0 2
44105: IFFALSE 44130
// unit := CreateCharacter ( prefix & ident ) else
44107: LD_ADDR_VAR 0 5
44111: PUSH
44112: LD_VAR 0 3
44116: PUSH
44117: LD_VAR 0 1
44121: STR
44122: PPUSH
44123: CALL_OW 34
44127: ST_TO_ADDR
44128: GO 44145
// unit := NewCharacter ( ident ) ;
44130: LD_ADDR_VAR 0 5
44134: PUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: CALL_OW 25
44144: ST_TO_ADDR
// result := unit ;
44145: LD_ADDR_VAR 0 4
44149: PUSH
44150: LD_VAR 0 5
44154: ST_TO_ADDR
// end ;
44155: LD_VAR 0 4
44159: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44160: LD_INT 0
44162: PPUSH
44163: PPUSH
// if not side or not nation then
44164: LD_VAR 0 1
44168: NOT
44169: PUSH
44170: LD_VAR 0 2
44174: NOT
44175: OR
44176: IFFALSE 44180
// exit ;
44178: GO 44816
// case nation of nation_american :
44180: LD_VAR 0 2
44184: PUSH
44185: LD_INT 1
44187: DOUBLE
44188: EQUAL
44189: IFTRUE 44193
44191: GO 44363
44193: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
44194: LD_ADDR_VAR 0 4
44198: PUSH
44199: LD_INT 35
44201: PUSH
44202: LD_INT 45
44204: PUSH
44205: LD_INT 46
44207: PUSH
44208: LD_INT 47
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 6
44219: PUSH
44220: LD_INT 15
44222: PUSH
44223: LD_INT 16
44225: PUSH
44226: LD_INT 7
44228: PUSH
44229: LD_INT 12
44231: PUSH
44232: LD_INT 13
44234: PUSH
44235: LD_INT 10
44237: PUSH
44238: LD_INT 14
44240: PUSH
44241: LD_INT 20
44243: PUSH
44244: LD_INT 21
44246: PUSH
44247: LD_INT 22
44249: PUSH
44250: LD_INT 25
44252: PUSH
44253: LD_INT 32
44255: PUSH
44256: LD_INT 27
44258: PUSH
44259: LD_INT 36
44261: PUSH
44262: LD_INT 69
44264: PUSH
44265: LD_INT 39
44267: PUSH
44268: LD_INT 34
44270: PUSH
44271: LD_INT 40
44273: PUSH
44274: LD_INT 48
44276: PUSH
44277: LD_INT 49
44279: PUSH
44280: LD_INT 50
44282: PUSH
44283: LD_INT 51
44285: PUSH
44286: LD_INT 52
44288: PUSH
44289: LD_INT 53
44291: PUSH
44292: LD_INT 54
44294: PUSH
44295: LD_INT 55
44297: PUSH
44298: LD_INT 56
44300: PUSH
44301: LD_INT 57
44303: PUSH
44304: LD_INT 58
44306: PUSH
44307: LD_INT 59
44309: PUSH
44310: LD_INT 60
44312: PUSH
44313: LD_INT 61
44315: PUSH
44316: LD_INT 62
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: ST_TO_ADDR
44361: GO 44740
44363: LD_INT 2
44365: DOUBLE
44366: EQUAL
44367: IFTRUE 44371
44369: GO 44549
44371: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
44372: LD_ADDR_VAR 0 4
44376: PUSH
44377: LD_INT 35
44379: PUSH
44380: LD_INT 45
44382: PUSH
44383: LD_INT 46
44385: PUSH
44386: LD_INT 47
44388: PUSH
44389: LD_INT 70
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 11
44397: PUSH
44398: LD_INT 3
44400: PUSH
44401: LD_INT 4
44403: PUSH
44404: LD_INT 5
44406: PUSH
44407: LD_INT 6
44409: PUSH
44410: LD_INT 15
44412: PUSH
44413: LD_INT 18
44415: PUSH
44416: LD_INT 7
44418: PUSH
44419: LD_INT 17
44421: PUSH
44422: LD_INT 8
44424: PUSH
44425: LD_INT 20
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 22
44433: PUSH
44434: LD_INT 72
44436: PUSH
44437: LD_INT 26
44439: PUSH
44440: LD_INT 69
44442: PUSH
44443: LD_INT 39
44445: PUSH
44446: LD_INT 40
44448: PUSH
44449: LD_INT 41
44451: PUSH
44452: LD_INT 42
44454: PUSH
44455: LD_INT 43
44457: PUSH
44458: LD_INT 48
44460: PUSH
44461: LD_INT 49
44463: PUSH
44464: LD_INT 50
44466: PUSH
44467: LD_INT 51
44469: PUSH
44470: LD_INT 52
44472: PUSH
44473: LD_INT 53
44475: PUSH
44476: LD_INT 54
44478: PUSH
44479: LD_INT 55
44481: PUSH
44482: LD_INT 56
44484: PUSH
44485: LD_INT 60
44487: PUSH
44488: LD_INT 61
44490: PUSH
44491: LD_INT 62
44493: PUSH
44494: LD_INT 66
44496: PUSH
44497: LD_INT 67
44499: PUSH
44500: LD_INT 68
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: ST_TO_ADDR
44547: GO 44740
44549: LD_INT 3
44551: DOUBLE
44552: EQUAL
44553: IFTRUE 44557
44555: GO 44739
44557: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
44558: LD_ADDR_VAR 0 4
44562: PUSH
44563: LD_INT 46
44565: PUSH
44566: LD_INT 47
44568: PUSH
44569: LD_INT 1
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 11
44577: PUSH
44578: LD_INT 9
44580: PUSH
44581: LD_INT 20
44583: PUSH
44584: LD_INT 19
44586: PUSH
44587: LD_INT 21
44589: PUSH
44590: LD_INT 24
44592: PUSH
44593: LD_INT 22
44595: PUSH
44596: LD_INT 25
44598: PUSH
44599: LD_INT 28
44601: PUSH
44602: LD_INT 29
44604: PUSH
44605: LD_INT 30
44607: PUSH
44608: LD_INT 31
44610: PUSH
44611: LD_INT 37
44613: PUSH
44614: LD_INT 38
44616: PUSH
44617: LD_INT 32
44619: PUSH
44620: LD_INT 27
44622: PUSH
44623: LD_INT 33
44625: PUSH
44626: LD_INT 69
44628: PUSH
44629: LD_INT 39
44631: PUSH
44632: LD_INT 34
44634: PUSH
44635: LD_INT 40
44637: PUSH
44638: LD_INT 71
44640: PUSH
44641: LD_INT 23
44643: PUSH
44644: LD_INT 44
44646: PUSH
44647: LD_INT 48
44649: PUSH
44650: LD_INT 49
44652: PUSH
44653: LD_INT 50
44655: PUSH
44656: LD_INT 51
44658: PUSH
44659: LD_INT 52
44661: PUSH
44662: LD_INT 53
44664: PUSH
44665: LD_INT 54
44667: PUSH
44668: LD_INT 55
44670: PUSH
44671: LD_INT 56
44673: PUSH
44674: LD_INT 57
44676: PUSH
44677: LD_INT 58
44679: PUSH
44680: LD_INT 59
44682: PUSH
44683: LD_INT 63
44685: PUSH
44686: LD_INT 64
44688: PUSH
44689: LD_INT 65
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: ST_TO_ADDR
44737: GO 44740
44739: POP
// if state > - 1 and state < 3 then
44740: LD_VAR 0 3
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: GREATER
44749: PUSH
44750: LD_VAR 0 3
44754: PUSH
44755: LD_INT 3
44757: LESS
44758: AND
44759: IFFALSE 44816
// for i in result do
44761: LD_ADDR_VAR 0 5
44765: PUSH
44766: LD_VAR 0 4
44770: PUSH
44771: FOR_IN
44772: IFFALSE 44814
// if GetTech ( i , side ) <> state then
44774: LD_VAR 0 5
44778: PPUSH
44779: LD_VAR 0 1
44783: PPUSH
44784: CALL_OW 321
44788: PUSH
44789: LD_VAR 0 3
44793: NONEQUAL
44794: IFFALSE 44812
// result := result diff i ;
44796: LD_ADDR_VAR 0 4
44800: PUSH
44801: LD_VAR 0 4
44805: PUSH
44806: LD_VAR 0 5
44810: DIFF
44811: ST_TO_ADDR
44812: GO 44771
44814: POP
44815: POP
// end ;
44816: LD_VAR 0 4
44820: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44821: LD_INT 0
44823: PPUSH
44824: PPUSH
44825: PPUSH
// result := true ;
44826: LD_ADDR_VAR 0 3
44830: PUSH
44831: LD_INT 1
44833: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44834: LD_ADDR_VAR 0 5
44838: PUSH
44839: LD_VAR 0 2
44843: PPUSH
44844: CALL_OW 480
44848: ST_TO_ADDR
// if not tmp then
44849: LD_VAR 0 5
44853: NOT
44854: IFFALSE 44858
// exit ;
44856: GO 44907
// for i in tmp do
44858: LD_ADDR_VAR 0 4
44862: PUSH
44863: LD_VAR 0 5
44867: PUSH
44868: FOR_IN
44869: IFFALSE 44905
// if GetTech ( i , side ) <> state_researched then
44871: LD_VAR 0 4
44875: PPUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 321
44885: PUSH
44886: LD_INT 2
44888: NONEQUAL
44889: IFFALSE 44903
// begin result := false ;
44891: LD_ADDR_VAR 0 3
44895: PUSH
44896: LD_INT 0
44898: ST_TO_ADDR
// exit ;
44899: POP
44900: POP
44901: GO 44907
// end ;
44903: GO 44868
44905: POP
44906: POP
// end ;
44907: LD_VAR 0 3
44911: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44912: LD_INT 0
44914: PPUSH
44915: PPUSH
44916: PPUSH
44917: PPUSH
44918: PPUSH
44919: PPUSH
44920: PPUSH
44921: PPUSH
44922: PPUSH
44923: PPUSH
44924: PPUSH
44925: PPUSH
44926: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44927: LD_VAR 0 1
44931: NOT
44932: PUSH
44933: LD_VAR 0 1
44937: PPUSH
44938: CALL_OW 257
44942: PUSH
44943: LD_INT 9
44945: NONEQUAL
44946: OR
44947: IFFALSE 44951
// exit ;
44949: GO 45524
// side := GetSide ( unit ) ;
44951: LD_ADDR_VAR 0 9
44955: PUSH
44956: LD_VAR 0 1
44960: PPUSH
44961: CALL_OW 255
44965: ST_TO_ADDR
// tech_space := tech_spacanom ;
44966: LD_ADDR_VAR 0 12
44970: PUSH
44971: LD_INT 29
44973: ST_TO_ADDR
// tech_time := tech_taurad ;
44974: LD_ADDR_VAR 0 13
44978: PUSH
44979: LD_INT 28
44981: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44982: LD_ADDR_VAR 0 11
44986: PUSH
44987: LD_VAR 0 1
44991: PPUSH
44992: CALL_OW 310
44996: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44997: LD_VAR 0 11
45001: PPUSH
45002: CALL_OW 247
45006: PUSH
45007: LD_INT 2
45009: EQUAL
45010: IFFALSE 45014
// exit ;
45012: GO 45524
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45014: LD_ADDR_VAR 0 8
45018: PUSH
45019: LD_INT 81
45021: PUSH
45022: LD_VAR 0 9
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: PUSH
45034: LD_INT 21
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PPUSH
45052: CALL_OW 69
45056: ST_TO_ADDR
// if not tmp then
45057: LD_VAR 0 8
45061: NOT
45062: IFFALSE 45066
// exit ;
45064: GO 45524
// if in_unit then
45066: LD_VAR 0 11
45070: IFFALSE 45094
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45072: LD_ADDR_VAR 0 10
45076: PUSH
45077: LD_VAR 0 8
45081: PPUSH
45082: LD_VAR 0 11
45086: PPUSH
45087: CALL_OW 74
45091: ST_TO_ADDR
45092: GO 45114
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45094: LD_ADDR_VAR 0 10
45098: PUSH
45099: LD_VAR 0 8
45103: PPUSH
45104: LD_VAR 0 1
45108: PPUSH
45109: CALL_OW 74
45113: ST_TO_ADDR
// if not enemy then
45114: LD_VAR 0 10
45118: NOT
45119: IFFALSE 45123
// exit ;
45121: GO 45524
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45123: LD_VAR 0 11
45127: PUSH
45128: LD_VAR 0 11
45132: PPUSH
45133: LD_VAR 0 10
45137: PPUSH
45138: CALL_OW 296
45142: PUSH
45143: LD_INT 13
45145: GREATER
45146: AND
45147: PUSH
45148: LD_VAR 0 1
45152: PPUSH
45153: LD_VAR 0 10
45157: PPUSH
45158: CALL_OW 296
45162: PUSH
45163: LD_INT 12
45165: GREATER
45166: OR
45167: IFFALSE 45171
// exit ;
45169: GO 45524
// missile := [ 1 ] ;
45171: LD_ADDR_VAR 0 14
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45182: LD_VAR 0 9
45186: PPUSH
45187: LD_VAR 0 12
45191: PPUSH
45192: CALL_OW 325
45196: IFFALSE 45225
// missile := Insert ( missile , missile + 1 , 2 ) ;
45198: LD_ADDR_VAR 0 14
45202: PUSH
45203: LD_VAR 0 14
45207: PPUSH
45208: LD_VAR 0 14
45212: PUSH
45213: LD_INT 1
45215: PLUS
45216: PPUSH
45217: LD_INT 2
45219: PPUSH
45220: CALL_OW 2
45224: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45225: LD_VAR 0 9
45229: PPUSH
45230: LD_VAR 0 13
45234: PPUSH
45235: CALL_OW 325
45239: PUSH
45240: LD_VAR 0 10
45244: PPUSH
45245: CALL_OW 255
45249: PPUSH
45250: LD_VAR 0 13
45254: PPUSH
45255: CALL_OW 325
45259: NOT
45260: AND
45261: IFFALSE 45290
// missile := Insert ( missile , missile + 1 , 3 ) ;
45263: LD_ADDR_VAR 0 14
45267: PUSH
45268: LD_VAR 0 14
45272: PPUSH
45273: LD_VAR 0 14
45277: PUSH
45278: LD_INT 1
45280: PLUS
45281: PPUSH
45282: LD_INT 3
45284: PPUSH
45285: CALL_OW 2
45289: ST_TO_ADDR
// if missile < 2 then
45290: LD_VAR 0 14
45294: PUSH
45295: LD_INT 2
45297: LESS
45298: IFFALSE 45302
// exit ;
45300: GO 45524
// x := GetX ( enemy ) ;
45302: LD_ADDR_VAR 0 4
45306: PUSH
45307: LD_VAR 0 10
45311: PPUSH
45312: CALL_OW 250
45316: ST_TO_ADDR
// y := GetY ( enemy ) ;
45317: LD_ADDR_VAR 0 5
45321: PUSH
45322: LD_VAR 0 10
45326: PPUSH
45327: CALL_OW 251
45331: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45332: LD_ADDR_VAR 0 6
45336: PUSH
45337: LD_VAR 0 4
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PPUSH
45346: LD_INT 1
45348: PPUSH
45349: CALL_OW 12
45353: PLUS
45354: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45355: LD_ADDR_VAR 0 7
45359: PUSH
45360: LD_VAR 0 5
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PPUSH
45369: LD_INT 1
45371: PPUSH
45372: CALL_OW 12
45376: PLUS
45377: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45378: LD_VAR 0 6
45382: PPUSH
45383: LD_VAR 0 7
45387: PPUSH
45388: CALL_OW 488
45392: NOT
45393: IFFALSE 45415
// begin _x := x ;
45395: LD_ADDR_VAR 0 6
45399: PUSH
45400: LD_VAR 0 4
45404: ST_TO_ADDR
// _y := y ;
45405: LD_ADDR_VAR 0 7
45409: PUSH
45410: LD_VAR 0 5
45414: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45415: LD_ADDR_VAR 0 3
45419: PUSH
45420: LD_INT 1
45422: PPUSH
45423: LD_VAR 0 14
45427: PPUSH
45428: CALL_OW 12
45432: ST_TO_ADDR
// case i of 1 :
45433: LD_VAR 0 3
45437: PUSH
45438: LD_INT 1
45440: DOUBLE
45441: EQUAL
45442: IFTRUE 45446
45444: GO 45463
45446: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45447: LD_VAR 0 1
45451: PPUSH
45452: LD_VAR 0 10
45456: PPUSH
45457: CALL_OW 115
45461: GO 45524
45463: LD_INT 2
45465: DOUBLE
45466: EQUAL
45467: IFTRUE 45471
45469: GO 45493
45471: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45472: LD_VAR 0 1
45476: PPUSH
45477: LD_VAR 0 6
45481: PPUSH
45482: LD_VAR 0 7
45486: PPUSH
45487: CALL_OW 153
45491: GO 45524
45493: LD_INT 3
45495: DOUBLE
45496: EQUAL
45497: IFTRUE 45501
45499: GO 45523
45501: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45502: LD_VAR 0 1
45506: PPUSH
45507: LD_VAR 0 6
45511: PPUSH
45512: LD_VAR 0 7
45516: PPUSH
45517: CALL_OW 154
45521: GO 45524
45523: POP
// end ;
45524: LD_VAR 0 2
45528: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45529: LD_INT 0
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
// if not unit or not building then
45537: LD_VAR 0 1
45541: NOT
45542: PUSH
45543: LD_VAR 0 2
45547: NOT
45548: OR
45549: IFFALSE 45553
// exit ;
45551: GO 45711
// x := GetX ( building ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 2
45562: PPUSH
45563: CALL_OW 250
45567: ST_TO_ADDR
// y := GetY ( building ) ;
45568: LD_ADDR_VAR 0 6
45572: PUSH
45573: LD_VAR 0 2
45577: PPUSH
45578: CALL_OW 251
45582: ST_TO_ADDR
// for i = 0 to 5 do
45583: LD_ADDR_VAR 0 4
45587: PUSH
45588: DOUBLE
45589: LD_INT 0
45591: DEC
45592: ST_TO_ADDR
45593: LD_INT 5
45595: PUSH
45596: FOR_TO
45597: IFFALSE 45709
// begin _x := ShiftX ( x , i , 3 ) ;
45599: LD_ADDR_VAR 0 7
45603: PUSH
45604: LD_VAR 0 5
45608: PPUSH
45609: LD_VAR 0 4
45613: PPUSH
45614: LD_INT 3
45616: PPUSH
45617: CALL_OW 272
45621: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45622: LD_ADDR_VAR 0 8
45626: PUSH
45627: LD_VAR 0 6
45631: PPUSH
45632: LD_VAR 0 4
45636: PPUSH
45637: LD_INT 3
45639: PPUSH
45640: CALL_OW 273
45644: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45645: LD_VAR 0 7
45649: PPUSH
45650: LD_VAR 0 8
45654: PPUSH
45655: CALL_OW 488
45659: NOT
45660: IFFALSE 45664
// continue ;
45662: GO 45596
// if HexInfo ( _x , _y ) = 0 then
45664: LD_VAR 0 7
45668: PPUSH
45669: LD_VAR 0 8
45673: PPUSH
45674: CALL_OW 428
45678: PUSH
45679: LD_INT 0
45681: EQUAL
45682: IFFALSE 45707
// begin ComMoveXY ( unit , _x , _y ) ;
45684: LD_VAR 0 1
45688: PPUSH
45689: LD_VAR 0 7
45693: PPUSH
45694: LD_VAR 0 8
45698: PPUSH
45699: CALL_OW 111
// exit ;
45703: POP
45704: POP
45705: GO 45711
// end ; end ;
45707: GO 45596
45709: POP
45710: POP
// end ;
45711: LD_VAR 0 3
45715: RET
// export function ScanBase ( side , base_area ) ; begin
45716: LD_INT 0
45718: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45719: LD_ADDR_VAR 0 3
45723: PUSH
45724: LD_VAR 0 2
45728: PPUSH
45729: LD_INT 81
45731: PUSH
45732: LD_VAR 0 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PPUSH
45741: CALL_OW 70
45745: ST_TO_ADDR
// end ;
45746: LD_VAR 0 3
45750: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
45751: LD_INT 0
45753: PPUSH
45754: PPUSH
45755: PPUSH
45756: PPUSH
45757: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
45758: LD_VAR 0 1
45762: NOT
45763: PUSH
45764: LD_EXP 49
45768: PUSH
45769: LD_VAR 0 1
45773: ARRAY
45774: NOT
45775: OR
45776: PUSH
45777: LD_VAR 0 2
45781: NOT
45782: OR
45783: PUSH
45784: LD_VAR 0 3
45788: NOT
45789: OR
45790: IFFALSE 45794
// exit ;
45792: GO 46244
// side := mc_sides [ base ] ;
45794: LD_ADDR_VAR 0 6
45798: PUSH
45799: LD_EXP 75
45803: PUSH
45804: LD_VAR 0 1
45808: ARRAY
45809: ST_TO_ADDR
// if not side then
45810: LD_VAR 0 6
45814: NOT
45815: IFFALSE 45819
// exit ;
45817: GO 46244
// for i in solds do
45819: LD_ADDR_VAR 0 7
45823: PUSH
45824: LD_VAR 0 2
45828: PUSH
45829: FOR_IN
45830: IFFALSE 45891
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
45832: LD_VAR 0 7
45836: PPUSH
45837: CALL_OW 310
45841: PPUSH
45842: CALL_OW 266
45846: PUSH
45847: LD_INT 32
45849: PUSH
45850: LD_INT 31
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: IN
45857: IFFALSE 45877
// solds := solds diff i else
45859: LD_ADDR_VAR 0 2
45863: PUSH
45864: LD_VAR 0 2
45868: PUSH
45869: LD_VAR 0 7
45873: DIFF
45874: ST_TO_ADDR
45875: GO 45889
// SetTag ( i , 18 ) ;
45877: LD_VAR 0 7
45881: PPUSH
45882: LD_INT 18
45884: PPUSH
45885: CALL_OW 109
45889: GO 45829
45891: POP
45892: POP
// if not solds then
45893: LD_VAR 0 2
45897: NOT
45898: IFFALSE 45902
// exit ;
45900: GO 46244
// repeat wait ( 0 0$1 ) ;
45902: LD_INT 35
45904: PPUSH
45905: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
45909: LD_ADDR_VAR 0 5
45913: PUSH
45914: LD_VAR 0 6
45918: PPUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: CALL 45716 0 2
45928: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
45929: LD_VAR 0 5
45933: NOT
45934: PUSH
45935: LD_VAR 0 5
45939: PUSH
45940: LD_INT 3
45942: GREATER
45943: OR
45944: PUSH
45945: LD_EXP 71
45949: PUSH
45950: LD_VAR 0 1
45954: ARRAY
45955: OR
45956: IFFALSE 45997
// begin for i in solds do
45958: LD_ADDR_VAR 0 7
45962: PUSH
45963: LD_VAR 0 2
45967: PUSH
45968: FOR_IN
45969: IFFALSE 45993
// if HasTask ( i ) then
45971: LD_VAR 0 7
45975: PPUSH
45976: CALL_OW 314
45980: IFFALSE 45991
// ComStop ( i ) ;
45982: LD_VAR 0 7
45986: PPUSH
45987: CALL_OW 141
45991: GO 45968
45993: POP
45994: POP
// break ;
45995: GO 46232
// end ; for i in solds do
45997: LD_ADDR_VAR 0 7
46001: PUSH
46002: LD_VAR 0 2
46006: PUSH
46007: FOR_IN
46008: IFFALSE 46224
// begin if IsInUnit ( i ) then
46010: LD_VAR 0 7
46014: PPUSH
46015: CALL_OW 310
46019: IFFALSE 46030
// ComExitBuilding ( i ) ;
46021: LD_VAR 0 7
46025: PPUSH
46026: CALL_OW 122
// if GetLives ( i ) > 333 then
46030: LD_VAR 0 7
46034: PPUSH
46035: CALL_OW 256
46039: PUSH
46040: LD_INT 333
46042: GREATER
46043: IFFALSE 46071
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46045: LD_VAR 0 7
46049: PPUSH
46050: LD_VAR 0 5
46054: PPUSH
46055: LD_VAR 0 7
46059: PPUSH
46060: CALL_OW 74
46064: PPUSH
46065: CALL_OW 115
46069: GO 46222
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
46071: LD_ADDR_VAR 0 8
46075: PUSH
46076: LD_EXP 49
46080: PUSH
46081: LD_VAR 0 1
46085: ARRAY
46086: PPUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 30
46092: PUSH
46093: LD_INT 0
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 30
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 30
46112: PUSH
46113: LD_INT 6
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: EMPTY
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: PPUSH
46126: CALL_OW 72
46130: PPUSH
46131: LD_VAR 0 7
46135: PPUSH
46136: CALL_OW 74
46140: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
46141: LD_VAR 0 7
46145: PPUSH
46146: LD_VAR 0 8
46150: PPUSH
46151: CALL_OW 250
46155: PPUSH
46156: LD_INT 3
46158: PPUSH
46159: LD_INT 5
46161: PPUSH
46162: CALL_OW 272
46166: PPUSH
46167: LD_VAR 0 8
46171: PPUSH
46172: CALL_OW 251
46176: PPUSH
46177: LD_INT 3
46179: PPUSH
46180: LD_INT 5
46182: PPUSH
46183: CALL_OW 273
46187: PPUSH
46188: CALL_OW 111
// SetTag ( i , 0 ) ;
46192: LD_VAR 0 7
46196: PPUSH
46197: LD_INT 0
46199: PPUSH
46200: CALL_OW 109
// solds := solds diff i ;
46204: LD_ADDR_VAR 0 2
46208: PUSH
46209: LD_VAR 0 2
46213: PUSH
46214: LD_VAR 0 7
46218: DIFF
46219: ST_TO_ADDR
// continue ;
46220: GO 46007
// end ; end ;
46222: GO 46007
46224: POP
46225: POP
// until solds ;
46226: LD_VAR 0 2
46230: IFFALSE 45902
// MC_Reset ( base , 18 ) ;
46232: LD_VAR 0 1
46236: PPUSH
46237: LD_INT 18
46239: PPUSH
46240: CALL 19685 0 2
// end ;
46244: LD_VAR 0 4
46248: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
46249: LD_INT 0
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
46267: LD_ADDR_VAR 0 12
46271: PUSH
46272: LD_EXP 49
46276: PUSH
46277: LD_VAR 0 1
46281: ARRAY
46282: PPUSH
46283: LD_INT 25
46285: PUSH
46286: LD_INT 3
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PPUSH
46293: CALL_OW 72
46297: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46298: LD_ADDR_VAR 0 8
46302: PUSH
46303: LD_EXP 49
46307: PUSH
46308: LD_VAR 0 1
46312: ARRAY
46313: PPUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 25
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 25
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 25
46339: PUSH
46340: LD_INT 8
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 25
46349: PUSH
46350: LD_INT 9
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: PPUSH
46364: CALL_OW 72
46368: ST_TO_ADDR
// if not defenders and not solds then
46369: LD_VAR 0 2
46373: NOT
46374: PUSH
46375: LD_VAR 0 8
46379: NOT
46380: AND
46381: IFFALSE 46385
// exit ;
46383: GO 47751
// depot_under_attack := false ;
46385: LD_ADDR_VAR 0 16
46389: PUSH
46390: LD_INT 0
46392: ST_TO_ADDR
// sold_defenders := [ ] ;
46393: LD_ADDR_VAR 0 17
46397: PUSH
46398: EMPTY
46399: ST_TO_ADDR
// if mechs then
46400: LD_VAR 0 12
46404: IFFALSE 46533
// for i in defenders do
46406: LD_ADDR_VAR 0 5
46410: PUSH
46411: LD_VAR 0 2
46415: PUSH
46416: FOR_IN
46417: IFFALSE 46531
// begin SetTag ( i , 20 ) ;
46419: LD_VAR 0 5
46423: PPUSH
46424: LD_INT 20
46426: PPUSH
46427: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
46431: LD_VAR 0 5
46435: PPUSH
46436: CALL_OW 263
46440: PUSH
46441: LD_INT 1
46443: EQUAL
46444: PUSH
46445: LD_VAR 0 5
46449: PPUSH
46450: CALL_OW 311
46454: NOT
46455: AND
46456: PUSH
46457: LD_VAR 0 12
46461: AND
46462: IFFALSE 46529
// begin un := mechs [ 1 ] ;
46464: LD_ADDR_VAR 0 10
46468: PUSH
46469: LD_VAR 0 12
46473: PUSH
46474: LD_INT 1
46476: ARRAY
46477: ST_TO_ADDR
// ComExitBuilding ( un ) ;
46478: LD_VAR 0 10
46482: PPUSH
46483: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
46487: LD_VAR 0 10
46491: PPUSH
46492: LD_VAR 0 5
46496: PPUSH
46497: CALL_OW 180
// SetTag ( un , 19 ) ;
46501: LD_VAR 0 10
46505: PPUSH
46506: LD_INT 19
46508: PPUSH
46509: CALL_OW 109
// mechs := mechs diff un ;
46513: LD_ADDR_VAR 0 12
46517: PUSH
46518: LD_VAR 0 12
46522: PUSH
46523: LD_VAR 0 10
46527: DIFF
46528: ST_TO_ADDR
// end ; end ;
46529: GO 46416
46531: POP
46532: POP
// if solds then
46533: LD_VAR 0 8
46537: IFFALSE 46596
// for i in solds do
46539: LD_ADDR_VAR 0 5
46543: PUSH
46544: LD_VAR 0 8
46548: PUSH
46549: FOR_IN
46550: IFFALSE 46594
// if not GetTag ( i ) then
46552: LD_VAR 0 5
46556: PPUSH
46557: CALL_OW 110
46561: NOT
46562: IFFALSE 46592
// begin defenders := defenders union i ;
46564: LD_ADDR_VAR 0 2
46568: PUSH
46569: LD_VAR 0 2
46573: PUSH
46574: LD_VAR 0 5
46578: UNION
46579: ST_TO_ADDR
// SetTag ( i , 18 ) ;
46580: LD_VAR 0 5
46584: PPUSH
46585: LD_INT 18
46587: PPUSH
46588: CALL_OW 109
// end ;
46592: GO 46549
46594: POP
46595: POP
// repeat wait ( 0 0$1 ) ;
46596: LD_INT 35
46598: PPUSH
46599: CALL_OW 67
// enemy := mc_scan [ base ] ;
46603: LD_ADDR_VAR 0 3
46607: PUSH
46608: LD_EXP 72
46612: PUSH
46613: LD_VAR 0 1
46617: ARRAY
46618: ST_TO_ADDR
// for i in defenders do
46619: LD_ADDR_VAR 0 5
46623: PUSH
46624: LD_VAR 0 2
46628: PUSH
46629: FOR_IN
46630: IFFALSE 47315
// begin e := NearestUnitToUnit ( enemy , i ) ;
46632: LD_ADDR_VAR 0 13
46636: PUSH
46637: LD_VAR 0 3
46641: PPUSH
46642: LD_VAR 0 5
46646: PPUSH
46647: CALL_OW 74
46651: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
46652: LD_ADDR_VAR 0 16
46656: PUSH
46657: LD_EXP 49
46661: PUSH
46662: LD_VAR 0 1
46666: ARRAY
46667: PPUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 30
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 30
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: LIST
46695: PPUSH
46696: CALL_OW 72
46700: NOT
46701: PUSH
46702: LD_EXP 49
46706: PUSH
46707: LD_VAR 0 1
46711: ARRAY
46712: PPUSH
46713: LD_INT 2
46715: PUSH
46716: LD_INT 30
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 30
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: PPUSH
46741: CALL_OW 72
46745: PPUSH
46746: CALL_OW 256
46750: PUSH
46751: LD_INT 600
46753: LESS
46754: OR
46755: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
46756: LD_VAR 0 5
46760: PPUSH
46761: CALL_OW 247
46765: PUSH
46766: LD_INT 2
46768: DOUBLE
46769: EQUAL
46770: IFTRUE 46774
46772: GO 47021
46774: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
46775: LD_VAR 0 5
46779: PPUSH
46780: CALL_OW 256
46784: PUSH
46785: LD_INT 650
46787: GREATER
46788: PUSH
46789: LD_VAR 0 5
46793: PPUSH
46794: LD_VAR 0 13
46798: PPUSH
46799: CALL_OW 296
46803: PUSH
46804: LD_INT 40
46806: LESS
46807: AND
46808: IFFALSE 46826
// ComAttackUnit ( i , e ) else
46810: LD_VAR 0 5
46814: PPUSH
46815: LD_VAR 0 13
46819: PPUSH
46820: CALL_OW 115
46824: GO 46904
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
46826: LD_VAR 0 5
46830: PPUSH
46831: LD_VAR 0 13
46835: PPUSH
46836: CALL_OW 296
46840: PUSH
46841: LD_INT 30
46843: GREATEREQUAL
46844: PUSH
46845: LD_VAR 0 5
46849: PPUSH
46850: CALL_OW 256
46854: PUSH
46855: LD_INT 650
46857: LESSEQUAL
46858: OR
46859: PUSH
46860: LD_VAR 0 5
46864: PPUSH
46865: LD_EXP 73
46869: PUSH
46870: LD_VAR 0 1
46874: ARRAY
46875: PPUSH
46876: CALL_OW 308
46880: NOT
46881: AND
46882: IFFALSE 46904
// ComMoveToArea ( i , mc_parking [ base ] ) ;
46884: LD_VAR 0 5
46888: PPUSH
46889: LD_EXP 73
46893: PUSH
46894: LD_VAR 0 1
46898: ARRAY
46899: PPUSH
46900: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
46904: LD_VAR 0 5
46908: PPUSH
46909: CALL_OW 256
46913: PUSH
46914: LD_INT 998
46916: LESS
46917: PUSH
46918: LD_VAR 0 5
46922: PPUSH
46923: CALL_OW 263
46927: PUSH
46928: LD_INT 1
46930: EQUAL
46931: AND
46932: PUSH
46933: LD_VAR 0 5
46937: PPUSH
46938: CALL_OW 311
46942: AND
46943: PUSH
46944: LD_VAR 0 5
46948: PPUSH
46949: LD_EXP 73
46953: PUSH
46954: LD_VAR 0 1
46958: ARRAY
46959: PPUSH
46960: CALL_OW 308
46964: AND
46965: IFFALSE 47019
// begin mech := IsDrivenBy ( i ) ;
46967: LD_ADDR_VAR 0 9
46971: PUSH
46972: LD_VAR 0 5
46976: PPUSH
46977: CALL_OW 311
46981: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
46982: LD_VAR 0 9
46986: PPUSH
46987: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
46991: LD_VAR 0 9
46995: PPUSH
46996: LD_VAR 0 5
47000: PPUSH
47001: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
47005: LD_VAR 0 9
47009: PPUSH
47010: LD_VAR 0 5
47014: PPUSH
47015: CALL_OW 180
// end ; end ; unit_human :
47019: GO 47286
47021: LD_INT 1
47023: DOUBLE
47024: EQUAL
47025: IFTRUE 47029
47027: GO 47285
47029: POP
// begin b := IsInUnit ( i ) ;
47030: LD_ADDR_VAR 0 18
47034: PUSH
47035: LD_VAR 0 5
47039: PPUSH
47040: CALL_OW 310
47044: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
47045: LD_ADDR_VAR 0 19
47049: PUSH
47050: LD_VAR 0 18
47054: NOT
47055: PUSH
47056: LD_VAR 0 18
47060: PPUSH
47061: CALL_OW 266
47065: PUSH
47066: LD_INT 32
47068: PUSH
47069: LD_INT 31
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: IN
47076: OR
47077: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
47078: LD_VAR 0 16
47082: PUSH
47083: LD_VAR 0 2
47087: PPUSH
47088: LD_INT 21
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PPUSH
47098: CALL_OW 72
47102: PUSH
47103: LD_INT 1
47105: LESSEQUAL
47106: OR
47107: PUSH
47108: LD_VAR 0 19
47112: AND
47113: PUSH
47114: LD_VAR 0 5
47118: PUSH
47119: LD_VAR 0 17
47123: IN
47124: NOT
47125: AND
47126: IFFALSE 47219
// begin if b then
47128: LD_VAR 0 18
47132: IFFALSE 47181
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
47134: LD_VAR 0 18
47138: PPUSH
47139: LD_VAR 0 3
47143: PPUSH
47144: LD_VAR 0 18
47148: PPUSH
47149: CALL_OW 74
47153: PPUSH
47154: CALL_OW 296
47158: PUSH
47159: LD_INT 10
47161: LESS
47162: PUSH
47163: LD_VAR 0 18
47167: PPUSH
47168: CALL_OW 461
47172: PUSH
47173: LD_INT 7
47175: NONEQUAL
47176: AND
47177: IFFALSE 47181
// continue ;
47179: GO 46629
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
47181: LD_ADDR_VAR 0 17
47185: PUSH
47186: LD_VAR 0 17
47190: PPUSH
47191: LD_VAR 0 17
47195: PUSH
47196: LD_INT 1
47198: PLUS
47199: PPUSH
47200: LD_VAR 0 5
47204: PPUSH
47205: CALL_OW 1
47209: ST_TO_ADDR
// ComExitBuilding ( i ) ;
47210: LD_VAR 0 5
47214: PPUSH
47215: CALL_OW 122
// end ; if sold_defenders then
47219: LD_VAR 0 17
47223: IFFALSE 47283
// if i in sold_defenders then
47225: LD_VAR 0 5
47229: PUSH
47230: LD_VAR 0 17
47234: IN
47235: IFFALSE 47283
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
47237: LD_VAR 0 5
47241: PPUSH
47242: CALL_OW 314
47246: NOT
47247: PUSH
47248: LD_VAR 0 5
47252: PPUSH
47253: LD_VAR 0 13
47257: PPUSH
47258: CALL_OW 296
47262: PUSH
47263: LD_INT 30
47265: LESS
47266: AND
47267: IFFALSE 47283
// ComAttackUnit ( i , e ) ;
47269: LD_VAR 0 5
47273: PPUSH
47274: LD_VAR 0 13
47278: PPUSH
47279: CALL_OW 115
// end ; end ; end ;
47283: GO 47286
47285: POP
// if IsDead ( i ) then
47286: LD_VAR 0 5
47290: PPUSH
47291: CALL_OW 301
47295: IFFALSE 47313
// defenders := defenders diff i ;
47297: LD_ADDR_VAR 0 2
47301: PUSH
47302: LD_VAR 0 2
47306: PUSH
47307: LD_VAR 0 5
47311: DIFF
47312: ST_TO_ADDR
// end ;
47313: GO 46629
47315: POP
47316: POP
// until not enemy or not defenders ;
47317: LD_VAR 0 3
47321: NOT
47322: PUSH
47323: LD_VAR 0 2
47327: NOT
47328: OR
47329: IFFALSE 46596
// MC_Reset ( base , 18 ) ;
47331: LD_VAR 0 1
47335: PPUSH
47336: LD_INT 18
47338: PPUSH
47339: CALL 19685 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
47343: LD_ADDR_VAR 0 2
47347: PUSH
47348: LD_VAR 0 2
47352: PUSH
47353: LD_VAR 0 2
47357: PPUSH
47358: LD_INT 2
47360: PUSH
47361: LD_INT 25
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 25
47373: PUSH
47374: LD_INT 5
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 25
47383: PUSH
47384: LD_INT 8
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 25
47393: PUSH
47394: LD_INT 9
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: PPUSH
47408: CALL_OW 72
47412: DIFF
47413: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
47414: LD_VAR 0 3
47418: NOT
47419: PUSH
47420: LD_VAR 0 2
47424: PPUSH
47425: LD_INT 21
47427: PUSH
47428: LD_INT 2
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PPUSH
47435: CALL_OW 72
47439: AND
47440: IFFALSE 47702
// begin tmp := FilterByTag ( defenders , 19 ) ;
47442: LD_ADDR_VAR 0 11
47446: PUSH
47447: LD_VAR 0 2
47451: PPUSH
47452: LD_INT 19
47454: PPUSH
47455: CALL 83867 0 2
47459: ST_TO_ADDR
// if tmp then
47460: LD_VAR 0 11
47464: IFFALSE 47534
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
47466: LD_ADDR_VAR 0 11
47470: PUSH
47471: LD_VAR 0 11
47475: PPUSH
47476: LD_INT 25
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PPUSH
47486: CALL_OW 72
47490: ST_TO_ADDR
// if tmp then
47491: LD_VAR 0 11
47495: IFFALSE 47534
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
47497: LD_ADDR_EXP 61
47501: PUSH
47502: LD_EXP 61
47506: PPUSH
47507: LD_VAR 0 1
47511: PPUSH
47512: LD_EXP 61
47516: PUSH
47517: LD_VAR 0 1
47521: ARRAY
47522: PUSH
47523: LD_VAR 0 11
47527: UNION
47528: PPUSH
47529: CALL_OW 1
47533: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
47534: LD_VAR 0 1
47538: PPUSH
47539: LD_INT 19
47541: PPUSH
47542: CALL 19685 0 2
// repeat wait ( 0 0$1 ) ;
47546: LD_INT 35
47548: PPUSH
47549: CALL_OW 67
// for i in defenders do
47553: LD_ADDR_VAR 0 5
47557: PUSH
47558: LD_VAR 0 2
47562: PUSH
47563: FOR_IN
47564: IFFALSE 47653
// begin if not IsInArea ( i , mc_parking [ base ] ) then
47566: LD_VAR 0 5
47570: PPUSH
47571: LD_EXP 73
47575: PUSH
47576: LD_VAR 0 1
47580: ARRAY
47581: PPUSH
47582: CALL_OW 308
47586: NOT
47587: IFFALSE 47611
// ComMoveToArea ( i , mc_parking [ base ] ) else
47589: LD_VAR 0 5
47593: PPUSH
47594: LD_EXP 73
47598: PUSH
47599: LD_VAR 0 1
47603: ARRAY
47604: PPUSH
47605: CALL_OW 113
47609: GO 47651
// if GetControl ( i ) = control_manual then
47611: LD_VAR 0 5
47615: PPUSH
47616: CALL_OW 263
47620: PUSH
47621: LD_INT 1
47623: EQUAL
47624: IFFALSE 47651
// if IsDrivenBy ( i ) then
47626: LD_VAR 0 5
47630: PPUSH
47631: CALL_OW 311
47635: IFFALSE 47651
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
47637: LD_VAR 0 5
47641: PPUSH
47642: CALL_OW 311
47646: PPUSH
47647: CALL_OW 121
// end ;
47651: GO 47563
47653: POP
47654: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
47655: LD_VAR 0 2
47659: PPUSH
47660: LD_INT 95
47662: PUSH
47663: LD_EXP 73
47667: PUSH
47668: LD_VAR 0 1
47672: ARRAY
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PPUSH
47678: CALL_OW 72
47682: PUSH
47683: LD_VAR 0 2
47687: EQUAL
47688: PUSH
47689: LD_EXP 72
47693: PUSH
47694: LD_VAR 0 1
47698: ARRAY
47699: OR
47700: IFFALSE 47546
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
47702: LD_ADDR_EXP 71
47706: PUSH
47707: LD_EXP 71
47711: PPUSH
47712: LD_VAR 0 1
47716: PPUSH
47717: LD_EXP 71
47721: PUSH
47722: LD_VAR 0 1
47726: ARRAY
47727: PUSH
47728: LD_VAR 0 2
47732: UNION
47733: PPUSH
47734: CALL_OW 1
47738: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
47739: LD_VAR 0 1
47743: PPUSH
47744: LD_INT 20
47746: PPUSH
47747: CALL 19685 0 2
// end ;
47751: LD_VAR 0 4
47755: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
47756: LD_INT 0
47758: PPUSH
47759: PPUSH
47760: PPUSH
47761: PPUSH
// result := false ;
47762: LD_ADDR_VAR 0 2
47766: PUSH
47767: LD_INT 0
47769: ST_TO_ADDR
// side := GetSide ( unit ) ;
47770: LD_ADDR_VAR 0 3
47774: PUSH
47775: LD_VAR 0 1
47779: PPUSH
47780: CALL_OW 255
47784: ST_TO_ADDR
// nat := GetNation ( unit ) ;
47785: LD_ADDR_VAR 0 4
47789: PUSH
47790: LD_VAR 0 1
47794: PPUSH
47795: CALL_OW 248
47799: ST_TO_ADDR
// case nat of 1 :
47800: LD_VAR 0 4
47804: PUSH
47805: LD_INT 1
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47813
47811: GO 47824
47813: POP
// tech := tech_lassight ; 2 :
47814: LD_ADDR_VAR 0 5
47818: PUSH
47819: LD_INT 12
47821: ST_TO_ADDR
47822: GO 47863
47824: LD_INT 2
47826: DOUBLE
47827: EQUAL
47828: IFTRUE 47832
47830: GO 47843
47832: POP
// tech := tech_mortar ; 3 :
47833: LD_ADDR_VAR 0 5
47837: PUSH
47838: LD_INT 41
47840: ST_TO_ADDR
47841: GO 47863
47843: LD_INT 3
47845: DOUBLE
47846: EQUAL
47847: IFTRUE 47851
47849: GO 47862
47851: POP
// tech := tech_bazooka ; end ;
47852: LD_ADDR_VAR 0 5
47856: PUSH
47857: LD_INT 44
47859: ST_TO_ADDR
47860: GO 47863
47862: POP
// if Researched ( side , tech ) then
47863: LD_VAR 0 3
47867: PPUSH
47868: LD_VAR 0 5
47872: PPUSH
47873: CALL_OW 325
47877: IFFALSE 47904
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
47879: LD_ADDR_VAR 0 2
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: LD_INT 8
47889: PUSH
47890: LD_INT 9
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: PUSH
47898: LD_VAR 0 4
47902: ARRAY
47903: ST_TO_ADDR
// end ;
47904: LD_VAR 0 2
47908: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
47909: LD_INT 0
47911: PPUSH
47912: PPUSH
47913: PPUSH
// if not mines then
47914: LD_VAR 0 2
47918: NOT
47919: IFFALSE 47923
// exit ;
47921: GO 48067
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47923: LD_ADDR_VAR 0 5
47927: PUSH
47928: LD_INT 81
47930: PUSH
47931: LD_VAR 0 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 3
47942: PUSH
47943: LD_INT 21
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PPUSH
47961: CALL_OW 69
47965: ST_TO_ADDR
// for i in mines do
47966: LD_ADDR_VAR 0 4
47970: PUSH
47971: LD_VAR 0 2
47975: PUSH
47976: FOR_IN
47977: IFFALSE 48065
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
47979: LD_VAR 0 4
47983: PUSH
47984: LD_INT 1
47986: ARRAY
47987: PPUSH
47988: LD_VAR 0 4
47992: PUSH
47993: LD_INT 2
47995: ARRAY
47996: PPUSH
47997: CALL_OW 458
48001: NOT
48002: IFFALSE 48006
// continue ;
48004: GO 47976
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48006: LD_VAR 0 4
48010: PUSH
48011: LD_INT 1
48013: ARRAY
48014: PPUSH
48015: LD_VAR 0 4
48019: PUSH
48020: LD_INT 2
48022: ARRAY
48023: PPUSH
48024: CALL_OW 428
48028: PUSH
48029: LD_VAR 0 5
48033: IN
48034: IFFALSE 48063
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48036: LD_VAR 0 4
48040: PUSH
48041: LD_INT 1
48043: ARRAY
48044: PPUSH
48045: LD_VAR 0 4
48049: PUSH
48050: LD_INT 2
48052: ARRAY
48053: PPUSH
48054: LD_VAR 0 1
48058: PPUSH
48059: CALL_OW 456
// end ;
48063: GO 47976
48065: POP
48066: POP
// end ;
48067: LD_VAR 0 3
48071: RET
// export function Count ( array ) ; var i ; begin
48072: LD_INT 0
48074: PPUSH
48075: PPUSH
// result := 0 ;
48076: LD_ADDR_VAR 0 2
48080: PUSH
48081: LD_INT 0
48083: ST_TO_ADDR
// for i in array do
48084: LD_ADDR_VAR 0 3
48088: PUSH
48089: LD_VAR 0 1
48093: PUSH
48094: FOR_IN
48095: IFFALSE 48119
// if i then
48097: LD_VAR 0 3
48101: IFFALSE 48117
// result := result + 1 ;
48103: LD_ADDR_VAR 0 2
48107: PUSH
48108: LD_VAR 0 2
48112: PUSH
48113: LD_INT 1
48115: PLUS
48116: ST_TO_ADDR
48117: GO 48094
48119: POP
48120: POP
// end ;
48121: LD_VAR 0 2
48125: RET
// export function IsEmpty ( building ) ; begin
48126: LD_INT 0
48128: PPUSH
// if not building then
48129: LD_VAR 0 1
48133: NOT
48134: IFFALSE 48138
// exit ;
48136: GO 48181
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48138: LD_ADDR_VAR 0 2
48142: PUSH
48143: LD_VAR 0 1
48147: PUSH
48148: LD_INT 22
48150: PUSH
48151: LD_VAR 0 1
48155: PPUSH
48156: CALL_OW 255
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 58
48167: PUSH
48168: EMPTY
48169: LIST
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PPUSH
48175: CALL_OW 69
48179: IN
48180: ST_TO_ADDR
// end ;
48181: LD_VAR 0 2
48185: RET
// export function IsNotFull ( building ) ; begin
48186: LD_INT 0
48188: PPUSH
// if not building then
48189: LD_VAR 0 1
48193: NOT
48194: IFFALSE 48198
// exit ;
48196: GO 48217
// result := UnitsInside ( building ) < 6 ;
48198: LD_ADDR_VAR 0 2
48202: PUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 313
48212: PUSH
48213: LD_INT 6
48215: LESS
48216: ST_TO_ADDR
// end ;
48217: LD_VAR 0 2
48221: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48222: LD_INT 0
48224: PPUSH
48225: PPUSH
48226: PPUSH
48227: PPUSH
// tmp := [ ] ;
48228: LD_ADDR_VAR 0 3
48232: PUSH
48233: EMPTY
48234: ST_TO_ADDR
// list := [ ] ;
48235: LD_ADDR_VAR 0 5
48239: PUSH
48240: EMPTY
48241: ST_TO_ADDR
// for i = 16 to 25 do
48242: LD_ADDR_VAR 0 4
48246: PUSH
48247: DOUBLE
48248: LD_INT 16
48250: DEC
48251: ST_TO_ADDR
48252: LD_INT 25
48254: PUSH
48255: FOR_TO
48256: IFFALSE 48329
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48258: LD_ADDR_VAR 0 3
48262: PUSH
48263: LD_VAR 0 3
48267: PUSH
48268: LD_INT 22
48270: PUSH
48271: LD_VAR 0 1
48275: PPUSH
48276: CALL_OW 255
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 91
48287: PUSH
48288: LD_VAR 0 1
48292: PUSH
48293: LD_INT 6
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 30
48303: PUSH
48304: LD_VAR 0 4
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: PUSH
48318: EMPTY
48319: LIST
48320: PPUSH
48321: CALL_OW 69
48325: ADD
48326: ST_TO_ADDR
48327: GO 48255
48329: POP
48330: POP
// for i = 1 to tmp do
48331: LD_ADDR_VAR 0 4
48335: PUSH
48336: DOUBLE
48337: LD_INT 1
48339: DEC
48340: ST_TO_ADDR
48341: LD_VAR 0 3
48345: PUSH
48346: FOR_TO
48347: IFFALSE 48435
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48349: LD_ADDR_VAR 0 5
48353: PUSH
48354: LD_VAR 0 5
48358: PUSH
48359: LD_VAR 0 3
48363: PUSH
48364: LD_VAR 0 4
48368: ARRAY
48369: PPUSH
48370: CALL_OW 266
48374: PUSH
48375: LD_VAR 0 3
48379: PUSH
48380: LD_VAR 0 4
48384: ARRAY
48385: PPUSH
48386: CALL_OW 250
48390: PUSH
48391: LD_VAR 0 3
48395: PUSH
48396: LD_VAR 0 4
48400: ARRAY
48401: PPUSH
48402: CALL_OW 251
48406: PUSH
48407: LD_VAR 0 3
48411: PUSH
48412: LD_VAR 0 4
48416: ARRAY
48417: PPUSH
48418: CALL_OW 254
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: PUSH
48429: EMPTY
48430: LIST
48431: ADD
48432: ST_TO_ADDR
48433: GO 48346
48435: POP
48436: POP
// result := list ;
48437: LD_ADDR_VAR 0 2
48441: PUSH
48442: LD_VAR 0 5
48446: ST_TO_ADDR
// end ;
48447: LD_VAR 0 2
48451: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48452: LD_INT 0
48454: PPUSH
48455: PPUSH
48456: PPUSH
48457: PPUSH
48458: PPUSH
48459: PPUSH
48460: PPUSH
// if not factory then
48461: LD_VAR 0 1
48465: NOT
48466: IFFALSE 48470
// exit ;
48468: GO 48995
// if control = control_apeman then
48470: LD_VAR 0 4
48474: PUSH
48475: LD_INT 5
48477: EQUAL
48478: IFFALSE 48587
// begin tmp := UnitsInside ( factory ) ;
48480: LD_ADDR_VAR 0 8
48484: PUSH
48485: LD_VAR 0 1
48489: PPUSH
48490: CALL_OW 313
48494: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48495: LD_VAR 0 8
48499: PPUSH
48500: LD_INT 25
48502: PUSH
48503: LD_INT 12
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PPUSH
48510: CALL_OW 72
48514: NOT
48515: IFFALSE 48525
// control := control_manual ;
48517: LD_ADDR_VAR 0 4
48521: PUSH
48522: LD_INT 1
48524: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48525: LD_ADDR_VAR 0 8
48529: PUSH
48530: LD_VAR 0 1
48534: PPUSH
48535: CALL 48222 0 1
48539: ST_TO_ADDR
// if tmp then
48540: LD_VAR 0 8
48544: IFFALSE 48587
// begin for i in tmp do
48546: LD_ADDR_VAR 0 7
48550: PUSH
48551: LD_VAR 0 8
48555: PUSH
48556: FOR_IN
48557: IFFALSE 48585
// if i [ 1 ] = b_ext_radar then
48559: LD_VAR 0 7
48563: PUSH
48564: LD_INT 1
48566: ARRAY
48567: PUSH
48568: LD_INT 20
48570: EQUAL
48571: IFFALSE 48583
// begin control := control_remote ;
48573: LD_ADDR_VAR 0 4
48577: PUSH
48578: LD_INT 2
48580: ST_TO_ADDR
// break ;
48581: GO 48585
// end ;
48583: GO 48556
48585: POP
48586: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48587: LD_VAR 0 1
48591: PPUSH
48592: LD_VAR 0 2
48596: PPUSH
48597: LD_VAR 0 3
48601: PPUSH
48602: LD_VAR 0 4
48606: PPUSH
48607: LD_VAR 0 5
48611: PPUSH
48612: CALL_OW 448
48616: IFFALSE 48651
// begin result := [ chassis , engine , control , weapon ] ;
48618: LD_ADDR_VAR 0 6
48622: PUSH
48623: LD_VAR 0 2
48627: PUSH
48628: LD_VAR 0 3
48632: PUSH
48633: LD_VAR 0 4
48637: PUSH
48638: LD_VAR 0 5
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: ST_TO_ADDR
// exit ;
48649: GO 48995
// end ; _chassis := AvailableChassisList ( factory ) ;
48651: LD_ADDR_VAR 0 9
48655: PUSH
48656: LD_VAR 0 1
48660: PPUSH
48661: CALL_OW 475
48665: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48666: LD_ADDR_VAR 0 11
48670: PUSH
48671: LD_VAR 0 1
48675: PPUSH
48676: CALL_OW 476
48680: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48681: LD_ADDR_VAR 0 12
48685: PUSH
48686: LD_VAR 0 1
48690: PPUSH
48691: CALL_OW 477
48695: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48696: LD_ADDR_VAR 0 10
48700: PUSH
48701: LD_VAR 0 1
48705: PPUSH
48706: CALL_OW 478
48710: ST_TO_ADDR
// if not chassis in _chassis then
48711: LD_VAR 0 2
48715: PUSH
48716: LD_VAR 0 9
48720: IN
48721: NOT
48722: IFFALSE 48748
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
48724: LD_ADDR_VAR 0 2
48728: PUSH
48729: LD_VAR 0 9
48733: PUSH
48734: LD_INT 1
48736: PPUSH
48737: LD_VAR 0 9
48741: PPUSH
48742: CALL_OW 12
48746: ARRAY
48747: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
48748: LD_VAR 0 2
48752: PPUSH
48753: LD_VAR 0 3
48757: PPUSH
48758: CALL 49000 0 2
48762: NOT
48763: IFFALSE 48822
// repeat engine := _engine [ 1 ] ;
48765: LD_ADDR_VAR 0 3
48769: PUSH
48770: LD_VAR 0 11
48774: PUSH
48775: LD_INT 1
48777: ARRAY
48778: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
48779: LD_ADDR_VAR 0 11
48783: PUSH
48784: LD_VAR 0 11
48788: PPUSH
48789: LD_INT 1
48791: PPUSH
48792: CALL_OW 3
48796: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
48797: LD_VAR 0 2
48801: PPUSH
48802: LD_VAR 0 3
48806: PPUSH
48807: CALL 49000 0 2
48811: PUSH
48812: LD_VAR 0 11
48816: PUSH
48817: EMPTY
48818: EQUAL
48819: OR
48820: IFFALSE 48765
// if not control in _control then
48822: LD_VAR 0 4
48826: PUSH
48827: LD_VAR 0 12
48831: IN
48832: NOT
48833: IFFALSE 48859
// control := _control [ rand ( 1 , _control ) ] ;
48835: LD_ADDR_VAR 0 4
48839: PUSH
48840: LD_VAR 0 12
48844: PUSH
48845: LD_INT 1
48847: PPUSH
48848: LD_VAR 0 12
48852: PPUSH
48853: CALL_OW 12
48857: ARRAY
48858: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
48859: LD_VAR 0 2
48863: PPUSH
48864: LD_VAR 0 5
48868: PPUSH
48869: CALL 49220 0 2
48873: NOT
48874: IFFALSE 48933
// repeat weapon := _weapon [ 1 ] ;
48876: LD_ADDR_VAR 0 5
48880: PUSH
48881: LD_VAR 0 10
48885: PUSH
48886: LD_INT 1
48888: ARRAY
48889: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
48890: LD_ADDR_VAR 0 10
48894: PUSH
48895: LD_VAR 0 10
48899: PPUSH
48900: LD_INT 1
48902: PPUSH
48903: CALL_OW 3
48907: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
48908: LD_VAR 0 2
48912: PPUSH
48913: LD_VAR 0 5
48917: PPUSH
48918: CALL 49220 0 2
48922: PUSH
48923: LD_VAR 0 10
48927: PUSH
48928: EMPTY
48929: EQUAL
48930: OR
48931: IFFALSE 48876
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48933: LD_VAR 0 1
48937: PPUSH
48938: LD_VAR 0 2
48942: PPUSH
48943: LD_VAR 0 3
48947: PPUSH
48948: LD_VAR 0 4
48952: PPUSH
48953: LD_VAR 0 5
48957: PPUSH
48958: CALL_OW 448
48962: IFFALSE 48995
// result := [ chassis , engine , control , weapon ] ;
48964: LD_ADDR_VAR 0 6
48968: PUSH
48969: LD_VAR 0 2
48973: PUSH
48974: LD_VAR 0 3
48978: PUSH
48979: LD_VAR 0 4
48983: PUSH
48984: LD_VAR 0 5
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: ST_TO_ADDR
// end ;
48995: LD_VAR 0 6
48999: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49000: LD_INT 0
49002: PPUSH
// if not chassis or not engine then
49003: LD_VAR 0 1
49007: NOT
49008: PUSH
49009: LD_VAR 0 2
49013: NOT
49014: OR
49015: IFFALSE 49019
// exit ;
49017: GO 49215
// case engine of engine_solar :
49019: LD_VAR 0 2
49023: PUSH
49024: LD_INT 2
49026: DOUBLE
49027: EQUAL
49028: IFTRUE 49032
49030: GO 49070
49032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49033: LD_ADDR_VAR 0 3
49037: PUSH
49038: LD_INT 11
49040: PUSH
49041: LD_INT 12
49043: PUSH
49044: LD_INT 13
49046: PUSH
49047: LD_INT 14
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: ST_TO_ADDR
49068: GO 49199
49070: LD_INT 1
49072: DOUBLE
49073: EQUAL
49074: IFTRUE 49078
49076: GO 49140
49078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49079: LD_ADDR_VAR 0 3
49083: PUSH
49084: LD_INT 11
49086: PUSH
49087: LD_INT 12
49089: PUSH
49090: LD_INT 13
49092: PUSH
49093: LD_INT 14
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 3
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 5
49110: PUSH
49111: LD_INT 21
49113: PUSH
49114: LD_INT 23
49116: PUSH
49117: LD_INT 22
49119: PUSH
49120: LD_INT 24
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: ST_TO_ADDR
49138: GO 49199
49140: LD_INT 3
49142: DOUBLE
49143: EQUAL
49144: IFTRUE 49148
49146: GO 49198
49148: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49149: LD_ADDR_VAR 0 3
49153: PUSH
49154: LD_INT 13
49156: PUSH
49157: LD_INT 14
49159: PUSH
49160: LD_INT 2
49162: PUSH
49163: LD_INT 3
49165: PUSH
49166: LD_INT 4
49168: PUSH
49169: LD_INT 5
49171: PUSH
49172: LD_INT 21
49174: PUSH
49175: LD_INT 22
49177: PUSH
49178: LD_INT 23
49180: PUSH
49181: LD_INT 24
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: ST_TO_ADDR
49196: GO 49199
49198: POP
// result := ( chassis in result ) ;
49199: LD_ADDR_VAR 0 3
49203: PUSH
49204: LD_VAR 0 1
49208: PUSH
49209: LD_VAR 0 3
49213: IN
49214: ST_TO_ADDR
// end ;
49215: LD_VAR 0 3
49219: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49220: LD_INT 0
49222: PPUSH
// if not chassis or not weapon then
49223: LD_VAR 0 1
49227: NOT
49228: PUSH
49229: LD_VAR 0 2
49233: NOT
49234: OR
49235: IFFALSE 49239
// exit ;
49237: GO 50265
// case weapon of us_machine_gun :
49239: LD_VAR 0 2
49243: PUSH
49244: LD_INT 2
49246: DOUBLE
49247: EQUAL
49248: IFTRUE 49252
49250: GO 49282
49252: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49253: LD_ADDR_VAR 0 3
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 4
49269: PUSH
49270: LD_INT 5
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: ST_TO_ADDR
49280: GO 50249
49282: LD_INT 3
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49290
49288: GO 49320
49290: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49291: LD_ADDR_VAR 0 3
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: LD_INT 4
49307: PUSH
49308: LD_INT 5
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: ST_TO_ADDR
49318: GO 50249
49320: LD_INT 11
49322: DOUBLE
49323: EQUAL
49324: IFTRUE 49328
49326: GO 49358
49328: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49329: LD_ADDR_VAR 0 3
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: LD_INT 4
49345: PUSH
49346: LD_INT 5
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: ST_TO_ADDR
49356: GO 50249
49358: LD_INT 4
49360: DOUBLE
49361: EQUAL
49362: IFTRUE 49366
49364: GO 49392
49366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49367: LD_ADDR_VAR 0 3
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: LD_INT 3
49377: PUSH
49378: LD_INT 4
49380: PUSH
49381: LD_INT 5
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
49390: GO 50249
49392: LD_INT 5
49394: DOUBLE
49395: EQUAL
49396: IFTRUE 49400
49398: GO 49426
49400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49401: LD_ADDR_VAR 0 3
49405: PUSH
49406: LD_INT 2
49408: PUSH
49409: LD_INT 3
49411: PUSH
49412: LD_INT 4
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: ST_TO_ADDR
49424: GO 50249
49426: LD_INT 9
49428: DOUBLE
49429: EQUAL
49430: IFTRUE 49434
49432: GO 49460
49434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49435: LD_ADDR_VAR 0 3
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 3
49445: PUSH
49446: LD_INT 4
49448: PUSH
49449: LD_INT 5
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
49458: GO 50249
49460: LD_INT 7
49462: DOUBLE
49463: EQUAL
49464: IFTRUE 49468
49466: GO 49494
49468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49469: LD_ADDR_VAR 0 3
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 4
49482: PUSH
49483: LD_INT 5
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: ST_TO_ADDR
49492: GO 50249
49494: LD_INT 12
49496: DOUBLE
49497: EQUAL
49498: IFTRUE 49502
49500: GO 49528
49502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49503: LD_ADDR_VAR 0 3
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: LD_INT 3
49513: PUSH
49514: LD_INT 4
49516: PUSH
49517: LD_INT 5
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: ST_TO_ADDR
49526: GO 50249
49528: LD_INT 13
49530: DOUBLE
49531: EQUAL
49532: IFTRUE 49536
49534: GO 49562
49536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49537: LD_ADDR_VAR 0 3
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: LD_INT 4
49550: PUSH
49551: LD_INT 5
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
49560: GO 50249
49562: LD_INT 14
49564: DOUBLE
49565: EQUAL
49566: IFTRUE 49570
49568: GO 49588
49570: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49571: LD_ADDR_VAR 0 3
49575: PUSH
49576: LD_INT 4
49578: PUSH
49579: LD_INT 5
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: ST_TO_ADDR
49586: GO 50249
49588: LD_INT 6
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49596
49594: GO 49614
49596: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: LD_INT 4
49604: PUSH
49605: LD_INT 5
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: ST_TO_ADDR
49612: GO 50249
49614: LD_INT 10
49616: DOUBLE
49617: EQUAL
49618: IFTRUE 49622
49620: GO 49640
49622: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49623: LD_ADDR_VAR 0 3
49627: PUSH
49628: LD_INT 4
49630: PUSH
49631: LD_INT 5
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: ST_TO_ADDR
49638: GO 50249
49640: LD_INT 22
49642: DOUBLE
49643: EQUAL
49644: IFTRUE 49648
49646: GO 49674
49648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_INT 11
49656: PUSH
49657: LD_INT 12
49659: PUSH
49660: LD_INT 13
49662: PUSH
49663: LD_INT 14
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: ST_TO_ADDR
49672: GO 50249
49674: LD_INT 23
49676: DOUBLE
49677: EQUAL
49678: IFTRUE 49682
49680: GO 49708
49682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
49683: LD_ADDR_VAR 0 3
49687: PUSH
49688: LD_INT 11
49690: PUSH
49691: LD_INT 12
49693: PUSH
49694: LD_INT 13
49696: PUSH
49697: LD_INT 14
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
49706: GO 50249
49708: LD_INT 24
49710: DOUBLE
49711: EQUAL
49712: IFTRUE 49716
49714: GO 49742
49716: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
49717: LD_ADDR_VAR 0 3
49721: PUSH
49722: LD_INT 11
49724: PUSH
49725: LD_INT 12
49727: PUSH
49728: LD_INT 13
49730: PUSH
49731: LD_INT 14
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: ST_TO_ADDR
49740: GO 50249
49742: LD_INT 30
49744: DOUBLE
49745: EQUAL
49746: IFTRUE 49750
49748: GO 49776
49750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
49751: LD_ADDR_VAR 0 3
49755: PUSH
49756: LD_INT 11
49758: PUSH
49759: LD_INT 12
49761: PUSH
49762: LD_INT 13
49764: PUSH
49765: LD_INT 14
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: ST_TO_ADDR
49774: GO 50249
49776: LD_INT 25
49778: DOUBLE
49779: EQUAL
49780: IFTRUE 49784
49782: GO 49802
49784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
49785: LD_ADDR_VAR 0 3
49789: PUSH
49790: LD_INT 13
49792: PUSH
49793: LD_INT 14
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: ST_TO_ADDR
49800: GO 50249
49802: LD_INT 27
49804: DOUBLE
49805: EQUAL
49806: IFTRUE 49810
49808: GO 49828
49810: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
49811: LD_ADDR_VAR 0 3
49815: PUSH
49816: LD_INT 13
49818: PUSH
49819: LD_INT 14
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: ST_TO_ADDR
49826: GO 50249
49828: LD_INT 28
49830: DOUBLE
49831: EQUAL
49832: IFTRUE 49836
49834: GO 49854
49836: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49837: LD_ADDR_VAR 0 3
49841: PUSH
49842: LD_INT 13
49844: PUSH
49845: LD_INT 14
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: ST_TO_ADDR
49852: GO 50249
49854: LD_INT 29
49856: DOUBLE
49857: EQUAL
49858: IFTRUE 49862
49860: GO 49880
49862: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49863: LD_ADDR_VAR 0 3
49867: PUSH
49868: LD_INT 13
49870: PUSH
49871: LD_INT 14
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: ST_TO_ADDR
49878: GO 50249
49880: LD_INT 31
49882: DOUBLE
49883: EQUAL
49884: IFTRUE 49888
49886: GO 49906
49888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
49889: LD_ADDR_VAR 0 3
49893: PUSH
49894: LD_INT 13
49896: PUSH
49897: LD_INT 14
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: ST_TO_ADDR
49904: GO 50249
49906: LD_INT 26
49908: DOUBLE
49909: EQUAL
49910: IFTRUE 49914
49912: GO 49932
49914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
49915: LD_ADDR_VAR 0 3
49919: PUSH
49920: LD_INT 13
49922: PUSH
49923: LD_INT 14
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: ST_TO_ADDR
49930: GO 50249
49932: LD_INT 42
49934: DOUBLE
49935: EQUAL
49936: IFTRUE 49940
49938: GO 49966
49940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
49941: LD_ADDR_VAR 0 3
49945: PUSH
49946: LD_INT 21
49948: PUSH
49949: LD_INT 22
49951: PUSH
49952: LD_INT 23
49954: PUSH
49955: LD_INT 24
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
49964: GO 50249
49966: LD_INT 43
49968: DOUBLE
49969: EQUAL
49970: IFTRUE 49974
49972: GO 50000
49974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
49975: LD_ADDR_VAR 0 3
49979: PUSH
49980: LD_INT 21
49982: PUSH
49983: LD_INT 22
49985: PUSH
49986: LD_INT 23
49988: PUSH
49989: LD_INT 24
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: ST_TO_ADDR
49998: GO 50249
50000: LD_INT 44
50002: DOUBLE
50003: EQUAL
50004: IFTRUE 50008
50006: GO 50034
50008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50009: LD_ADDR_VAR 0 3
50013: PUSH
50014: LD_INT 21
50016: PUSH
50017: LD_INT 22
50019: PUSH
50020: LD_INT 23
50022: PUSH
50023: LD_INT 24
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: ST_TO_ADDR
50032: GO 50249
50034: LD_INT 45
50036: DOUBLE
50037: EQUAL
50038: IFTRUE 50042
50040: GO 50068
50042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50043: LD_ADDR_VAR 0 3
50047: PUSH
50048: LD_INT 21
50050: PUSH
50051: LD_INT 22
50053: PUSH
50054: LD_INT 23
50056: PUSH
50057: LD_INT 24
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: ST_TO_ADDR
50066: GO 50249
50068: LD_INT 49
50070: DOUBLE
50071: EQUAL
50072: IFTRUE 50076
50074: GO 50102
50076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50077: LD_ADDR_VAR 0 3
50081: PUSH
50082: LD_INT 21
50084: PUSH
50085: LD_INT 22
50087: PUSH
50088: LD_INT 23
50090: PUSH
50091: LD_INT 24
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: ST_TO_ADDR
50100: GO 50249
50102: LD_INT 51
50104: DOUBLE
50105: EQUAL
50106: IFTRUE 50110
50108: GO 50136
50110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50111: LD_ADDR_VAR 0 3
50115: PUSH
50116: LD_INT 21
50118: PUSH
50119: LD_INT 22
50121: PUSH
50122: LD_INT 23
50124: PUSH
50125: LD_INT 24
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
50134: GO 50249
50136: LD_INT 52
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50144
50142: GO 50170
50144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50145: LD_ADDR_VAR 0 3
50149: PUSH
50150: LD_INT 21
50152: PUSH
50153: LD_INT 22
50155: PUSH
50156: LD_INT 23
50158: PUSH
50159: LD_INT 24
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: ST_TO_ADDR
50168: GO 50249
50170: LD_INT 53
50172: DOUBLE
50173: EQUAL
50174: IFTRUE 50178
50176: GO 50196
50178: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50179: LD_ADDR_VAR 0 3
50183: PUSH
50184: LD_INT 23
50186: PUSH
50187: LD_INT 24
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: ST_TO_ADDR
50194: GO 50249
50196: LD_INT 46
50198: DOUBLE
50199: EQUAL
50200: IFTRUE 50204
50202: GO 50222
50204: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50205: LD_ADDR_VAR 0 3
50209: PUSH
50210: LD_INT 23
50212: PUSH
50213: LD_INT 24
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: ST_TO_ADDR
50220: GO 50249
50222: LD_INT 47
50224: DOUBLE
50225: EQUAL
50226: IFTRUE 50230
50228: GO 50248
50230: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50231: LD_ADDR_VAR 0 3
50235: PUSH
50236: LD_INT 23
50238: PUSH
50239: LD_INT 24
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: ST_TO_ADDR
50246: GO 50249
50248: POP
// result := ( chassis in result ) ;
50249: LD_ADDR_VAR 0 3
50253: PUSH
50254: LD_VAR 0 1
50258: PUSH
50259: LD_VAR 0 3
50263: IN
50264: ST_TO_ADDR
// end ;
50265: LD_VAR 0 3
50269: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50270: LD_INT 0
50272: PPUSH
50273: PPUSH
50274: PPUSH
50275: PPUSH
50276: PPUSH
50277: PPUSH
50278: PPUSH
// result := array ;
50279: LD_ADDR_VAR 0 5
50283: PUSH
50284: LD_VAR 0 1
50288: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50289: LD_VAR 0 1
50293: NOT
50294: PUSH
50295: LD_VAR 0 2
50299: NOT
50300: OR
50301: PUSH
50302: LD_VAR 0 3
50306: NOT
50307: OR
50308: PUSH
50309: LD_VAR 0 2
50313: PUSH
50314: LD_VAR 0 1
50318: GREATER
50319: OR
50320: PUSH
50321: LD_VAR 0 3
50325: PUSH
50326: LD_VAR 0 1
50330: GREATER
50331: OR
50332: IFFALSE 50336
// exit ;
50334: GO 50632
// if direction then
50336: LD_VAR 0 4
50340: IFFALSE 50404
// begin d := 1 ;
50342: LD_ADDR_VAR 0 9
50346: PUSH
50347: LD_INT 1
50349: ST_TO_ADDR
// if i_from > i_to then
50350: LD_VAR 0 2
50354: PUSH
50355: LD_VAR 0 3
50359: GREATER
50360: IFFALSE 50386
// length := ( array - i_from ) + i_to else
50362: LD_ADDR_VAR 0 11
50366: PUSH
50367: LD_VAR 0 1
50371: PUSH
50372: LD_VAR 0 2
50376: MINUS
50377: PUSH
50378: LD_VAR 0 3
50382: PLUS
50383: ST_TO_ADDR
50384: GO 50402
// length := i_to - i_from ;
50386: LD_ADDR_VAR 0 11
50390: PUSH
50391: LD_VAR 0 3
50395: PUSH
50396: LD_VAR 0 2
50400: MINUS
50401: ST_TO_ADDR
// end else
50402: GO 50465
// begin d := - 1 ;
50404: LD_ADDR_VAR 0 9
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: ST_TO_ADDR
// if i_from > i_to then
50413: LD_VAR 0 2
50417: PUSH
50418: LD_VAR 0 3
50422: GREATER
50423: IFFALSE 50443
// length := i_from - i_to else
50425: LD_ADDR_VAR 0 11
50429: PUSH
50430: LD_VAR 0 2
50434: PUSH
50435: LD_VAR 0 3
50439: MINUS
50440: ST_TO_ADDR
50441: GO 50465
// length := ( array - i_to ) + i_from ;
50443: LD_ADDR_VAR 0 11
50447: PUSH
50448: LD_VAR 0 1
50452: PUSH
50453: LD_VAR 0 3
50457: MINUS
50458: PUSH
50459: LD_VAR 0 2
50463: PLUS
50464: ST_TO_ADDR
// end ; if not length then
50465: LD_VAR 0 11
50469: NOT
50470: IFFALSE 50474
// exit ;
50472: GO 50632
// tmp := array ;
50474: LD_ADDR_VAR 0 10
50478: PUSH
50479: LD_VAR 0 1
50483: ST_TO_ADDR
// for i = 1 to length do
50484: LD_ADDR_VAR 0 6
50488: PUSH
50489: DOUBLE
50490: LD_INT 1
50492: DEC
50493: ST_TO_ADDR
50494: LD_VAR 0 11
50498: PUSH
50499: FOR_TO
50500: IFFALSE 50620
// begin for j = 1 to array do
50502: LD_ADDR_VAR 0 7
50506: PUSH
50507: DOUBLE
50508: LD_INT 1
50510: DEC
50511: ST_TO_ADDR
50512: LD_VAR 0 1
50516: PUSH
50517: FOR_TO
50518: IFFALSE 50606
// begin k := j + d ;
50520: LD_ADDR_VAR 0 8
50524: PUSH
50525: LD_VAR 0 7
50529: PUSH
50530: LD_VAR 0 9
50534: PLUS
50535: ST_TO_ADDR
// if k > array then
50536: LD_VAR 0 8
50540: PUSH
50541: LD_VAR 0 1
50545: GREATER
50546: IFFALSE 50556
// k := 1 ;
50548: LD_ADDR_VAR 0 8
50552: PUSH
50553: LD_INT 1
50555: ST_TO_ADDR
// if not k then
50556: LD_VAR 0 8
50560: NOT
50561: IFFALSE 50573
// k := array ;
50563: LD_ADDR_VAR 0 8
50567: PUSH
50568: LD_VAR 0 1
50572: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50573: LD_ADDR_VAR 0 10
50577: PUSH
50578: LD_VAR 0 10
50582: PPUSH
50583: LD_VAR 0 8
50587: PPUSH
50588: LD_VAR 0 1
50592: PUSH
50593: LD_VAR 0 7
50597: ARRAY
50598: PPUSH
50599: CALL_OW 1
50603: ST_TO_ADDR
// end ;
50604: GO 50517
50606: POP
50607: POP
// array := tmp ;
50608: LD_ADDR_VAR 0 1
50612: PUSH
50613: LD_VAR 0 10
50617: ST_TO_ADDR
// end ;
50618: GO 50499
50620: POP
50621: POP
// result := array ;
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: LD_VAR 0 1
50631: ST_TO_ADDR
// end ;
50632: LD_VAR 0 5
50636: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
50637: LD_INT 0
50639: PPUSH
50640: PPUSH
// result := 0 ;
50641: LD_ADDR_VAR 0 3
50645: PUSH
50646: LD_INT 0
50648: ST_TO_ADDR
// if not array or not value in array then
50649: LD_VAR 0 1
50653: NOT
50654: PUSH
50655: LD_VAR 0 2
50659: PUSH
50660: LD_VAR 0 1
50664: IN
50665: NOT
50666: OR
50667: IFFALSE 50671
// exit ;
50669: GO 50725
// for i = 1 to array do
50671: LD_ADDR_VAR 0 4
50675: PUSH
50676: DOUBLE
50677: LD_INT 1
50679: DEC
50680: ST_TO_ADDR
50681: LD_VAR 0 1
50685: PUSH
50686: FOR_TO
50687: IFFALSE 50723
// if value = array [ i ] then
50689: LD_VAR 0 2
50693: PUSH
50694: LD_VAR 0 1
50698: PUSH
50699: LD_VAR 0 4
50703: ARRAY
50704: EQUAL
50705: IFFALSE 50721
// begin result := i ;
50707: LD_ADDR_VAR 0 3
50711: PUSH
50712: LD_VAR 0 4
50716: ST_TO_ADDR
// exit ;
50717: POP
50718: POP
50719: GO 50725
// end ;
50721: GO 50686
50723: POP
50724: POP
// end ;
50725: LD_VAR 0 3
50729: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
50730: LD_INT 0
50732: PPUSH
// vc_chassis := chassis ;
50733: LD_ADDR_OWVAR 37
50737: PUSH
50738: LD_VAR 0 1
50742: ST_TO_ADDR
// vc_engine := engine ;
50743: LD_ADDR_OWVAR 39
50747: PUSH
50748: LD_VAR 0 2
50752: ST_TO_ADDR
// vc_control := control ;
50753: LD_ADDR_OWVAR 38
50757: PUSH
50758: LD_VAR 0 3
50762: ST_TO_ADDR
// vc_weapon := weapon ;
50763: LD_ADDR_OWVAR 40
50767: PUSH
50768: LD_VAR 0 4
50772: ST_TO_ADDR
// vc_fuel_battery := fuel ;
50773: LD_ADDR_OWVAR 41
50777: PUSH
50778: LD_VAR 0 5
50782: ST_TO_ADDR
// end ;
50783: LD_VAR 0 6
50787: RET
// export function WantPlant ( unit ) ; var task ; begin
50788: LD_INT 0
50790: PPUSH
50791: PPUSH
// result := false ;
50792: LD_ADDR_VAR 0 2
50796: PUSH
50797: LD_INT 0
50799: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
50800: LD_ADDR_VAR 0 3
50804: PUSH
50805: LD_VAR 0 1
50809: PPUSH
50810: CALL_OW 437
50814: ST_TO_ADDR
// if task then
50815: LD_VAR 0 3
50819: IFFALSE 50847
// if task [ 1 ] [ 1 ] = p then
50821: LD_VAR 0 3
50825: PUSH
50826: LD_INT 1
50828: ARRAY
50829: PUSH
50830: LD_INT 1
50832: ARRAY
50833: PUSH
50834: LD_STRING p
50836: EQUAL
50837: IFFALSE 50847
// result := true ;
50839: LD_ADDR_VAR 0 2
50843: PUSH
50844: LD_INT 1
50846: ST_TO_ADDR
// end ;
50847: LD_VAR 0 2
50851: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50852: LD_INT 0
50854: PPUSH
50855: PPUSH
50856: PPUSH
50857: PPUSH
// if pos < 1 then
50858: LD_VAR 0 2
50862: PUSH
50863: LD_INT 1
50865: LESS
50866: IFFALSE 50870
// exit ;
50868: GO 51173
// if pos = 1 then
50870: LD_VAR 0 2
50874: PUSH
50875: LD_INT 1
50877: EQUAL
50878: IFFALSE 50911
// result := Replace ( arr , pos [ 1 ] , value ) else
50880: LD_ADDR_VAR 0 4
50884: PUSH
50885: LD_VAR 0 1
50889: PPUSH
50890: LD_VAR 0 2
50894: PUSH
50895: LD_INT 1
50897: ARRAY
50898: PPUSH
50899: LD_VAR 0 3
50903: PPUSH
50904: CALL_OW 1
50908: ST_TO_ADDR
50909: GO 51173
// begin tmp := arr ;
50911: LD_ADDR_VAR 0 6
50915: PUSH
50916: LD_VAR 0 1
50920: ST_TO_ADDR
// s_arr := [ tmp ] ;
50921: LD_ADDR_VAR 0 7
50925: PUSH
50926: LD_VAR 0 6
50930: PUSH
50931: EMPTY
50932: LIST
50933: ST_TO_ADDR
// for i = 1 to pos - 1 do
50934: LD_ADDR_VAR 0 5
50938: PUSH
50939: DOUBLE
50940: LD_INT 1
50942: DEC
50943: ST_TO_ADDR
50944: LD_VAR 0 2
50948: PUSH
50949: LD_INT 1
50951: MINUS
50952: PUSH
50953: FOR_TO
50954: IFFALSE 50999
// begin tmp := tmp [ pos [ i ] ] ;
50956: LD_ADDR_VAR 0 6
50960: PUSH
50961: LD_VAR 0 6
50965: PUSH
50966: LD_VAR 0 2
50970: PUSH
50971: LD_VAR 0 5
50975: ARRAY
50976: ARRAY
50977: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
50978: LD_ADDR_VAR 0 7
50982: PUSH
50983: LD_VAR 0 7
50987: PUSH
50988: LD_VAR 0 6
50992: PUSH
50993: EMPTY
50994: LIST
50995: ADD
50996: ST_TO_ADDR
// end ;
50997: GO 50953
50999: POP
51000: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51001: LD_ADDR_VAR 0 6
51005: PUSH
51006: LD_VAR 0 6
51010: PPUSH
51011: LD_VAR 0 2
51015: PUSH
51016: LD_VAR 0 2
51020: ARRAY
51021: PPUSH
51022: LD_VAR 0 3
51026: PPUSH
51027: CALL_OW 1
51031: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51032: LD_ADDR_VAR 0 7
51036: PUSH
51037: LD_VAR 0 7
51041: PPUSH
51042: LD_VAR 0 7
51046: PPUSH
51047: LD_VAR 0 6
51051: PPUSH
51052: CALL_OW 1
51056: ST_TO_ADDR
// for i = s_arr downto 2 do
51057: LD_ADDR_VAR 0 5
51061: PUSH
51062: DOUBLE
51063: LD_VAR 0 7
51067: INC
51068: ST_TO_ADDR
51069: LD_INT 2
51071: PUSH
51072: FOR_DOWNTO
51073: IFFALSE 51157
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51075: LD_ADDR_VAR 0 6
51079: PUSH
51080: LD_VAR 0 7
51084: PUSH
51085: LD_VAR 0 5
51089: PUSH
51090: LD_INT 1
51092: MINUS
51093: ARRAY
51094: PPUSH
51095: LD_VAR 0 2
51099: PUSH
51100: LD_VAR 0 5
51104: PUSH
51105: LD_INT 1
51107: MINUS
51108: ARRAY
51109: PPUSH
51110: LD_VAR 0 7
51114: PUSH
51115: LD_VAR 0 5
51119: ARRAY
51120: PPUSH
51121: CALL_OW 1
51125: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51126: LD_ADDR_VAR 0 7
51130: PUSH
51131: LD_VAR 0 7
51135: PPUSH
51136: LD_VAR 0 5
51140: PUSH
51141: LD_INT 1
51143: MINUS
51144: PPUSH
51145: LD_VAR 0 6
51149: PPUSH
51150: CALL_OW 1
51154: ST_TO_ADDR
// end ;
51155: GO 51072
51157: POP
51158: POP
// result := s_arr [ 1 ] ;
51159: LD_ADDR_VAR 0 4
51163: PUSH
51164: LD_VAR 0 7
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: ST_TO_ADDR
// end ; end ;
51173: LD_VAR 0 4
51177: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51178: LD_INT 0
51180: PPUSH
51181: PPUSH
// if not list then
51182: LD_VAR 0 1
51186: NOT
51187: IFFALSE 51191
// exit ;
51189: GO 51282
// i := list [ pos1 ] ;
51191: LD_ADDR_VAR 0 5
51195: PUSH
51196: LD_VAR 0 1
51200: PUSH
51201: LD_VAR 0 2
51205: ARRAY
51206: ST_TO_ADDR
// if not i then
51207: LD_VAR 0 5
51211: NOT
51212: IFFALSE 51216
// exit ;
51214: GO 51282
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51216: LD_ADDR_VAR 0 1
51220: PUSH
51221: LD_VAR 0 1
51225: PPUSH
51226: LD_VAR 0 2
51230: PPUSH
51231: LD_VAR 0 1
51235: PUSH
51236: LD_VAR 0 3
51240: ARRAY
51241: PPUSH
51242: CALL_OW 1
51246: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51247: LD_ADDR_VAR 0 1
51251: PUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: LD_VAR 0 3
51261: PPUSH
51262: LD_VAR 0 5
51266: PPUSH
51267: CALL_OW 1
51271: ST_TO_ADDR
// result := list ;
51272: LD_ADDR_VAR 0 4
51276: PUSH
51277: LD_VAR 0 1
51281: ST_TO_ADDR
// end ;
51282: LD_VAR 0 4
51286: RET
// export function Add ( list , pos , val ) ; begin
51287: LD_INT 0
51289: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
51290: LD_ADDR_VAR 0 4
51294: PUSH
51295: LD_VAR 0 1
51299: PPUSH
51300: LD_VAR 0 2
51304: PPUSH
51305: LD_VAR 0 3
51309: PPUSH
51310: CALL 50852 0 3
51314: ST_TO_ADDR
51315: LD_VAR 0 4
51319: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51320: LD_INT 0
51322: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51323: LD_ADDR_VAR 0 5
51327: PUSH
51328: LD_VAR 0 1
51332: PPUSH
51333: CALL_OW 250
51337: PPUSH
51338: LD_VAR 0 1
51342: PPUSH
51343: CALL_OW 251
51347: PPUSH
51348: LD_VAR 0 2
51352: PPUSH
51353: LD_VAR 0 3
51357: PPUSH
51358: LD_VAR 0 4
51362: PPUSH
51363: CALL 51373 0 5
51367: ST_TO_ADDR
// end ;
51368: LD_VAR 0 5
51372: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51373: LD_INT 0
51375: PPUSH
51376: PPUSH
51377: PPUSH
51378: PPUSH
// if not list then
51379: LD_VAR 0 3
51383: NOT
51384: IFFALSE 51388
// exit ;
51386: GO 51776
// result := [ ] ;
51388: LD_ADDR_VAR 0 6
51392: PUSH
51393: EMPTY
51394: ST_TO_ADDR
// for i in list do
51395: LD_ADDR_VAR 0 7
51399: PUSH
51400: LD_VAR 0 3
51404: PUSH
51405: FOR_IN
51406: IFFALSE 51608
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51408: LD_ADDR_VAR 0 9
51412: PUSH
51413: LD_VAR 0 7
51417: PPUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: LD_VAR 0 2
51427: PPUSH
51428: CALL_OW 297
51432: ST_TO_ADDR
// if not result then
51433: LD_VAR 0 6
51437: NOT
51438: IFFALSE 51464
// result := [ [ i , tmp ] ] else
51440: LD_ADDR_VAR 0 6
51444: PUSH
51445: LD_VAR 0 7
51449: PUSH
51450: LD_VAR 0 9
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: EMPTY
51460: LIST
51461: ST_TO_ADDR
51462: GO 51606
// begin if result [ result ] [ 2 ] < tmp then
51464: LD_VAR 0 6
51468: PUSH
51469: LD_VAR 0 6
51473: ARRAY
51474: PUSH
51475: LD_INT 2
51477: ARRAY
51478: PUSH
51479: LD_VAR 0 9
51483: LESS
51484: IFFALSE 51526
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51486: LD_ADDR_VAR 0 6
51490: PUSH
51491: LD_VAR 0 6
51495: PPUSH
51496: LD_VAR 0 6
51500: PUSH
51501: LD_INT 1
51503: PLUS
51504: PPUSH
51505: LD_VAR 0 7
51509: PUSH
51510: LD_VAR 0 9
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PPUSH
51519: CALL_OW 2
51523: ST_TO_ADDR
51524: GO 51606
// for j = 1 to result do
51526: LD_ADDR_VAR 0 8
51530: PUSH
51531: DOUBLE
51532: LD_INT 1
51534: DEC
51535: ST_TO_ADDR
51536: LD_VAR 0 6
51540: PUSH
51541: FOR_TO
51542: IFFALSE 51604
// begin if tmp < result [ j ] [ 2 ] then
51544: LD_VAR 0 9
51548: PUSH
51549: LD_VAR 0 6
51553: PUSH
51554: LD_VAR 0 8
51558: ARRAY
51559: PUSH
51560: LD_INT 2
51562: ARRAY
51563: LESS
51564: IFFALSE 51602
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51566: LD_ADDR_VAR 0 6
51570: PUSH
51571: LD_VAR 0 6
51575: PPUSH
51576: LD_VAR 0 8
51580: PPUSH
51581: LD_VAR 0 7
51585: PUSH
51586: LD_VAR 0 9
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PPUSH
51595: CALL_OW 2
51599: ST_TO_ADDR
// break ;
51600: GO 51604
// end ; end ;
51602: GO 51541
51604: POP
51605: POP
// end ; end ;
51606: GO 51405
51608: POP
51609: POP
// if result and not asc then
51610: LD_VAR 0 6
51614: PUSH
51615: LD_VAR 0 4
51619: NOT
51620: AND
51621: IFFALSE 51696
// begin tmp := result ;
51623: LD_ADDR_VAR 0 9
51627: PUSH
51628: LD_VAR 0 6
51632: ST_TO_ADDR
// for i = tmp downto 1 do
51633: LD_ADDR_VAR 0 7
51637: PUSH
51638: DOUBLE
51639: LD_VAR 0 9
51643: INC
51644: ST_TO_ADDR
51645: LD_INT 1
51647: PUSH
51648: FOR_DOWNTO
51649: IFFALSE 51694
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51651: LD_ADDR_VAR 0 6
51655: PUSH
51656: LD_VAR 0 6
51660: PPUSH
51661: LD_VAR 0 9
51665: PUSH
51666: LD_VAR 0 7
51670: MINUS
51671: PUSH
51672: LD_INT 1
51674: PLUS
51675: PPUSH
51676: LD_VAR 0 9
51680: PUSH
51681: LD_VAR 0 7
51685: ARRAY
51686: PPUSH
51687: CALL_OW 1
51691: ST_TO_ADDR
51692: GO 51648
51694: POP
51695: POP
// end ; tmp := [ ] ;
51696: LD_ADDR_VAR 0 9
51700: PUSH
51701: EMPTY
51702: ST_TO_ADDR
// if mode then
51703: LD_VAR 0 5
51707: IFFALSE 51776
// begin for i = 1 to result do
51709: LD_ADDR_VAR 0 7
51713: PUSH
51714: DOUBLE
51715: LD_INT 1
51717: DEC
51718: ST_TO_ADDR
51719: LD_VAR 0 6
51723: PUSH
51724: FOR_TO
51725: IFFALSE 51764
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
51727: LD_ADDR_VAR 0 9
51731: PUSH
51732: LD_VAR 0 9
51736: PPUSH
51737: LD_VAR 0 7
51741: PPUSH
51742: LD_VAR 0 6
51746: PUSH
51747: LD_VAR 0 7
51751: ARRAY
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: PPUSH
51757: CALL_OW 1
51761: ST_TO_ADDR
51762: GO 51724
51764: POP
51765: POP
// result := tmp ;
51766: LD_ADDR_VAR 0 6
51770: PUSH
51771: LD_VAR 0 9
51775: ST_TO_ADDR
// end ; end ;
51776: LD_VAR 0 6
51780: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
51781: LD_INT 0
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
51789: LD_ADDR_VAR 0 5
51793: PUSH
51794: LD_INT 0
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: ST_TO_ADDR
// if not x or not y then
51811: LD_VAR 0 2
51815: NOT
51816: PUSH
51817: LD_VAR 0 3
51821: NOT
51822: OR
51823: IFFALSE 51827
// exit ;
51825: GO 53473
// if not range then
51827: LD_VAR 0 4
51831: NOT
51832: IFFALSE 51842
// range := 10 ;
51834: LD_ADDR_VAR 0 4
51838: PUSH
51839: LD_INT 10
51841: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51842: LD_ADDR_VAR 0 8
51846: PUSH
51847: LD_INT 81
51849: PUSH
51850: LD_VAR 0 1
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 92
51861: PUSH
51862: LD_VAR 0 2
51866: PUSH
51867: LD_VAR 0 3
51871: PUSH
51872: LD_VAR 0 4
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 3
51885: PUSH
51886: LD_INT 21
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: PPUSH
51905: CALL_OW 69
51909: ST_TO_ADDR
// if not tmp then
51910: LD_VAR 0 8
51914: NOT
51915: IFFALSE 51919
// exit ;
51917: GO 53473
// for i in tmp do
51919: LD_ADDR_VAR 0 6
51923: PUSH
51924: LD_VAR 0 8
51928: PUSH
51929: FOR_IN
51930: IFFALSE 53448
// begin points := [ 0 , 0 , 0 ] ;
51932: LD_ADDR_VAR 0 9
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: ST_TO_ADDR
// bpoints := 1 ;
51951: LD_ADDR_VAR 0 10
51955: PUSH
51956: LD_INT 1
51958: ST_TO_ADDR
// case GetType ( i ) of unit_human :
51959: LD_VAR 0 6
51963: PPUSH
51964: CALL_OW 247
51968: PUSH
51969: LD_INT 1
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 52555
51977: POP
// begin if GetClass ( i ) = 1 then
51978: LD_VAR 0 6
51982: PPUSH
51983: CALL_OW 257
51987: PUSH
51988: LD_INT 1
51990: EQUAL
51991: IFFALSE 52012
// points := [ 10 , 5 , 3 ] ;
51993: LD_ADDR_VAR 0 9
51997: PUSH
51998: LD_INT 10
52000: PUSH
52001: LD_INT 5
52003: PUSH
52004: LD_INT 3
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52012: LD_VAR 0 6
52016: PPUSH
52017: CALL_OW 257
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: LD_INT 4
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: IN
52036: IFFALSE 52057
// points := [ 3 , 2 , 1 ] ;
52038: LD_ADDR_VAR 0 9
52042: PUSH
52043: LD_INT 3
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52057: LD_VAR 0 6
52061: PPUSH
52062: CALL_OW 257
52066: PUSH
52067: LD_INT 5
52069: EQUAL
52070: IFFALSE 52091
// points := [ 130 , 5 , 2 ] ;
52072: LD_ADDR_VAR 0 9
52076: PUSH
52077: LD_INT 130
52079: PUSH
52080: LD_INT 5
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: LIST
52090: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52091: LD_VAR 0 6
52095: PPUSH
52096: CALL_OW 257
52100: PUSH
52101: LD_INT 8
52103: EQUAL
52104: IFFALSE 52125
// points := [ 35 , 35 , 30 ] ;
52106: LD_ADDR_VAR 0 9
52110: PUSH
52111: LD_INT 35
52113: PUSH
52114: LD_INT 35
52116: PUSH
52117: LD_INT 30
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: LIST
52124: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52125: LD_VAR 0 6
52129: PPUSH
52130: CALL_OW 257
52134: PUSH
52135: LD_INT 9
52137: EQUAL
52138: IFFALSE 52159
// points := [ 20 , 55 , 40 ] ;
52140: LD_ADDR_VAR 0 9
52144: PUSH
52145: LD_INT 20
52147: PUSH
52148: LD_INT 55
52150: PUSH
52151: LD_INT 40
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: LIST
52158: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52159: LD_VAR 0 6
52163: PPUSH
52164: CALL_OW 257
52168: PUSH
52169: LD_INT 12
52171: PUSH
52172: LD_INT 16
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: IN
52179: IFFALSE 52200
// points := [ 5 , 3 , 2 ] ;
52181: LD_ADDR_VAR 0 9
52185: PUSH
52186: LD_INT 5
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52200: LD_VAR 0 6
52204: PPUSH
52205: CALL_OW 257
52209: PUSH
52210: LD_INT 17
52212: EQUAL
52213: IFFALSE 52234
// points := [ 100 , 50 , 75 ] ;
52215: LD_ADDR_VAR 0 9
52219: PUSH
52220: LD_INT 100
52222: PUSH
52223: LD_INT 50
52225: PUSH
52226: LD_INT 75
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52234: LD_VAR 0 6
52238: PPUSH
52239: CALL_OW 257
52243: PUSH
52244: LD_INT 15
52246: EQUAL
52247: IFFALSE 52268
// points := [ 10 , 5 , 3 ] ;
52249: LD_ADDR_VAR 0 9
52253: PUSH
52254: LD_INT 10
52256: PUSH
52257: LD_INT 5
52259: PUSH
52260: LD_INT 3
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52268: LD_VAR 0 6
52272: PPUSH
52273: CALL_OW 257
52277: PUSH
52278: LD_INT 14
52280: EQUAL
52281: IFFALSE 52302
// points := [ 10 , 0 , 0 ] ;
52283: LD_ADDR_VAR 0 9
52287: PUSH
52288: LD_INT 10
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52302: LD_VAR 0 6
52306: PPUSH
52307: CALL_OW 257
52311: PUSH
52312: LD_INT 11
52314: EQUAL
52315: IFFALSE 52336
// points := [ 30 , 10 , 5 ] ;
52317: LD_ADDR_VAR 0 9
52321: PUSH
52322: LD_INT 30
52324: PUSH
52325: LD_INT 10
52327: PUSH
52328: LD_INT 5
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52336: LD_VAR 0 1
52340: PPUSH
52341: LD_INT 5
52343: PPUSH
52344: CALL_OW 321
52348: PUSH
52349: LD_INT 2
52351: EQUAL
52352: IFFALSE 52369
// bpoints := bpoints * 1.8 ;
52354: LD_ADDR_VAR 0 10
52358: PUSH
52359: LD_VAR 0 10
52363: PUSH
52364: LD_REAL  1.80000000000000E+0000
52367: MUL
52368: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52369: LD_VAR 0 6
52373: PPUSH
52374: CALL_OW 257
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: LD_INT 2
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: IN
52397: PUSH
52398: LD_VAR 0 1
52402: PPUSH
52403: LD_INT 51
52405: PPUSH
52406: CALL_OW 321
52410: PUSH
52411: LD_INT 2
52413: EQUAL
52414: AND
52415: IFFALSE 52432
// bpoints := bpoints * 1.2 ;
52417: LD_ADDR_VAR 0 10
52421: PUSH
52422: LD_VAR 0 10
52426: PUSH
52427: LD_REAL  1.20000000000000E+0000
52430: MUL
52431: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52432: LD_VAR 0 6
52436: PPUSH
52437: CALL_OW 257
52441: PUSH
52442: LD_INT 5
52444: PUSH
52445: LD_INT 7
52447: PUSH
52448: LD_INT 9
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: IN
52456: PUSH
52457: LD_VAR 0 1
52461: PPUSH
52462: LD_INT 52
52464: PPUSH
52465: CALL_OW 321
52469: PUSH
52470: LD_INT 2
52472: EQUAL
52473: AND
52474: IFFALSE 52491
// bpoints := bpoints * 1.5 ;
52476: LD_ADDR_VAR 0 10
52480: PUSH
52481: LD_VAR 0 10
52485: PUSH
52486: LD_REAL  1.50000000000000E+0000
52489: MUL
52490: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52491: LD_VAR 0 1
52495: PPUSH
52496: LD_INT 66
52498: PPUSH
52499: CALL_OW 321
52503: PUSH
52504: LD_INT 2
52506: EQUAL
52507: IFFALSE 52524
// bpoints := bpoints * 1.1 ;
52509: LD_ADDR_VAR 0 10
52513: PUSH
52514: LD_VAR 0 10
52518: PUSH
52519: LD_REAL  1.10000000000000E+0000
52522: MUL
52523: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52524: LD_ADDR_VAR 0 10
52528: PUSH
52529: LD_VAR 0 10
52533: PUSH
52534: LD_VAR 0 6
52538: PPUSH
52539: LD_INT 1
52541: PPUSH
52542: CALL_OW 259
52546: PUSH
52547: LD_REAL  1.15000000000000E+0000
52550: MUL
52551: MUL
52552: ST_TO_ADDR
// end ; unit_vehicle :
52553: GO 53377
52555: LD_INT 2
52557: DOUBLE
52558: EQUAL
52559: IFTRUE 52563
52561: GO 53365
52563: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52564: LD_VAR 0 6
52568: PPUSH
52569: CALL_OW 264
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 42
52579: PUSH
52580: LD_INT 24
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: LIST
52587: IN
52588: IFFALSE 52609
// points := [ 25 , 5 , 3 ] ;
52590: LD_ADDR_VAR 0 9
52594: PUSH
52595: LD_INT 25
52597: PUSH
52598: LD_INT 5
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52609: LD_VAR 0 6
52613: PPUSH
52614: CALL_OW 264
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: LD_INT 43
52624: PUSH
52625: LD_INT 25
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: IN
52633: IFFALSE 52654
// points := [ 40 , 15 , 5 ] ;
52635: LD_ADDR_VAR 0 9
52639: PUSH
52640: LD_INT 40
52642: PUSH
52643: LD_INT 15
52645: PUSH
52646: LD_INT 5
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52654: LD_VAR 0 6
52658: PPUSH
52659: CALL_OW 264
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 23
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: IN
52674: IFFALSE 52695
// points := [ 7 , 25 , 8 ] ;
52676: LD_ADDR_VAR 0 9
52680: PUSH
52681: LD_INT 7
52683: PUSH
52684: LD_INT 25
52686: PUSH
52687: LD_INT 8
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
52695: LD_VAR 0 6
52699: PPUSH
52700: CALL_OW 264
52704: PUSH
52705: LD_INT 5
52707: PUSH
52708: LD_INT 27
52710: PUSH
52711: LD_INT 44
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: LIST
52718: IN
52719: IFFALSE 52740
// points := [ 14 , 50 , 16 ] ;
52721: LD_ADDR_VAR 0 9
52725: PUSH
52726: LD_INT 14
52728: PUSH
52729: LD_INT 50
52731: PUSH
52732: LD_INT 16
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: LIST
52739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
52740: LD_VAR 0 6
52744: PPUSH
52745: CALL_OW 264
52749: PUSH
52750: LD_INT 6
52752: PUSH
52753: LD_INT 46
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: IN
52760: IFFALSE 52781
// points := [ 32 , 120 , 70 ] ;
52762: LD_ADDR_VAR 0 9
52766: PUSH
52767: LD_INT 32
52769: PUSH
52770: LD_INT 120
52772: PUSH
52773: LD_INT 70
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
52781: LD_VAR 0 6
52785: PPUSH
52786: CALL_OW 264
52790: PUSH
52791: LD_INT 7
52793: PUSH
52794: LD_INT 28
52796: PUSH
52797: LD_INT 45
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: LIST
52804: IN
52805: IFFALSE 52826
// points := [ 35 , 20 , 45 ] ;
52807: LD_ADDR_VAR 0 9
52811: PUSH
52812: LD_INT 35
52814: PUSH
52815: LD_INT 20
52817: PUSH
52818: LD_INT 45
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52826: LD_VAR 0 6
52830: PPUSH
52831: CALL_OW 264
52835: PUSH
52836: LD_INT 47
52838: PUSH
52839: EMPTY
52840: LIST
52841: IN
52842: IFFALSE 52863
// points := [ 67 , 45 , 75 ] ;
52844: LD_ADDR_VAR 0 9
52848: PUSH
52849: LD_INT 67
52851: PUSH
52852: LD_INT 45
52854: PUSH
52855: LD_INT 75
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52863: LD_VAR 0 6
52867: PPUSH
52868: CALL_OW 264
52872: PUSH
52873: LD_INT 26
52875: PUSH
52876: EMPTY
52877: LIST
52878: IN
52879: IFFALSE 52900
// points := [ 120 , 30 , 80 ] ;
52881: LD_ADDR_VAR 0 9
52885: PUSH
52886: LD_INT 120
52888: PUSH
52889: LD_INT 30
52891: PUSH
52892: LD_INT 80
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52900: LD_VAR 0 6
52904: PPUSH
52905: CALL_OW 264
52909: PUSH
52910: LD_INT 22
52912: PUSH
52913: EMPTY
52914: LIST
52915: IN
52916: IFFALSE 52937
// points := [ 40 , 1 , 1 ] ;
52918: LD_ADDR_VAR 0 9
52922: PUSH
52923: LD_INT 40
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
52937: LD_VAR 0 6
52941: PPUSH
52942: CALL_OW 264
52946: PUSH
52947: LD_INT 29
52949: PUSH
52950: EMPTY
52951: LIST
52952: IN
52953: IFFALSE 52974
// points := [ 70 , 200 , 400 ] ;
52955: LD_ADDR_VAR 0 9
52959: PUSH
52960: LD_INT 70
52962: PUSH
52963: LD_INT 200
52965: PUSH
52966: LD_INT 400
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
52974: LD_VAR 0 6
52978: PPUSH
52979: CALL_OW 264
52983: PUSH
52984: LD_INT 14
52986: PUSH
52987: LD_INT 53
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: IN
52994: IFFALSE 53015
// points := [ 40 , 10 , 20 ] ;
52996: LD_ADDR_VAR 0 9
53000: PUSH
53001: LD_INT 40
53003: PUSH
53004: LD_INT 10
53006: PUSH
53007: LD_INT 20
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: LIST
53014: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53015: LD_VAR 0 6
53019: PPUSH
53020: CALL_OW 264
53024: PUSH
53025: LD_INT 9
53027: PUSH
53028: EMPTY
53029: LIST
53030: IN
53031: IFFALSE 53052
// points := [ 5 , 70 , 20 ] ;
53033: LD_ADDR_VAR 0 9
53037: PUSH
53038: LD_INT 5
53040: PUSH
53041: LD_INT 70
53043: PUSH
53044: LD_INT 20
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53052: LD_VAR 0 6
53056: PPUSH
53057: CALL_OW 264
53061: PUSH
53062: LD_INT 10
53064: PUSH
53065: EMPTY
53066: LIST
53067: IN
53068: IFFALSE 53089
// points := [ 35 , 110 , 70 ] ;
53070: LD_ADDR_VAR 0 9
53074: PUSH
53075: LD_INT 35
53077: PUSH
53078: LD_INT 110
53080: PUSH
53081: LD_INT 70
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53089: LD_VAR 0 6
53093: PPUSH
53094: CALL_OW 265
53098: PUSH
53099: LD_INT 25
53101: EQUAL
53102: IFFALSE 53123
// points := [ 80 , 65 , 100 ] ;
53104: LD_ADDR_VAR 0 9
53108: PUSH
53109: LD_INT 80
53111: PUSH
53112: LD_INT 65
53114: PUSH
53115: LD_INT 100
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53123: LD_VAR 0 6
53127: PPUSH
53128: CALL_OW 263
53132: PUSH
53133: LD_INT 1
53135: EQUAL
53136: IFFALSE 53171
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53138: LD_ADDR_VAR 0 10
53142: PUSH
53143: LD_VAR 0 10
53147: PUSH
53148: LD_VAR 0 6
53152: PPUSH
53153: CALL_OW 311
53157: PPUSH
53158: LD_INT 3
53160: PPUSH
53161: CALL_OW 259
53165: PUSH
53166: LD_INT 4
53168: MUL
53169: MUL
53170: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53171: LD_VAR 0 6
53175: PPUSH
53176: CALL_OW 263
53180: PUSH
53181: LD_INT 2
53183: EQUAL
53184: IFFALSE 53235
// begin j := IsControledBy ( i ) ;
53186: LD_ADDR_VAR 0 7
53190: PUSH
53191: LD_VAR 0 6
53195: PPUSH
53196: CALL_OW 312
53200: ST_TO_ADDR
// if j then
53201: LD_VAR 0 7
53205: IFFALSE 53235
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53207: LD_ADDR_VAR 0 10
53211: PUSH
53212: LD_VAR 0 10
53216: PUSH
53217: LD_VAR 0 7
53221: PPUSH
53222: LD_INT 3
53224: PPUSH
53225: CALL_OW 259
53229: PUSH
53230: LD_INT 3
53232: MUL
53233: MUL
53234: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53235: LD_VAR 0 6
53239: PPUSH
53240: CALL_OW 264
53244: PUSH
53245: LD_INT 5
53247: PUSH
53248: LD_INT 6
53250: PUSH
53251: LD_INT 46
53253: PUSH
53254: LD_INT 44
53256: PUSH
53257: LD_INT 47
53259: PUSH
53260: LD_INT 45
53262: PUSH
53263: LD_INT 28
53265: PUSH
53266: LD_INT 7
53268: PUSH
53269: LD_INT 27
53271: PUSH
53272: LD_INT 29
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: IN
53287: PUSH
53288: LD_VAR 0 1
53292: PPUSH
53293: LD_INT 52
53295: PPUSH
53296: CALL_OW 321
53300: PUSH
53301: LD_INT 2
53303: EQUAL
53304: AND
53305: IFFALSE 53322
// bpoints := bpoints * 1.2 ;
53307: LD_ADDR_VAR 0 10
53311: PUSH
53312: LD_VAR 0 10
53316: PUSH
53317: LD_REAL  1.20000000000000E+0000
53320: MUL
53321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53322: LD_VAR 0 6
53326: PPUSH
53327: CALL_OW 264
53331: PUSH
53332: LD_INT 6
53334: PUSH
53335: LD_INT 46
53337: PUSH
53338: LD_INT 47
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: IN
53346: IFFALSE 53363
// bpoints := bpoints * 1.2 ;
53348: LD_ADDR_VAR 0 10
53352: PUSH
53353: LD_VAR 0 10
53357: PUSH
53358: LD_REAL  1.20000000000000E+0000
53361: MUL
53362: ST_TO_ADDR
// end ; unit_building :
53363: GO 53377
53365: LD_INT 3
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53373
53371: GO 53376
53373: POP
// ; end ;
53374: GO 53377
53376: POP
// for j = 1 to 3 do
53377: LD_ADDR_VAR 0 7
53381: PUSH
53382: DOUBLE
53383: LD_INT 1
53385: DEC
53386: ST_TO_ADDR
53387: LD_INT 3
53389: PUSH
53390: FOR_TO
53391: IFFALSE 53444
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53393: LD_ADDR_VAR 0 5
53397: PUSH
53398: LD_VAR 0 5
53402: PPUSH
53403: LD_VAR 0 7
53407: PPUSH
53408: LD_VAR 0 5
53412: PUSH
53413: LD_VAR 0 7
53417: ARRAY
53418: PUSH
53419: LD_VAR 0 9
53423: PUSH
53424: LD_VAR 0 7
53428: ARRAY
53429: PUSH
53430: LD_VAR 0 10
53434: MUL
53435: PLUS
53436: PPUSH
53437: CALL_OW 1
53441: ST_TO_ADDR
53442: GO 53390
53444: POP
53445: POP
// end ;
53446: GO 51929
53448: POP
53449: POP
// result := Replace ( result , 4 , tmp ) ;
53450: LD_ADDR_VAR 0 5
53454: PUSH
53455: LD_VAR 0 5
53459: PPUSH
53460: LD_INT 4
53462: PPUSH
53463: LD_VAR 0 8
53467: PPUSH
53468: CALL_OW 1
53472: ST_TO_ADDR
// end ;
53473: LD_VAR 0 5
53477: RET
// export function DangerAtRange ( unit , range ) ; begin
53478: LD_INT 0
53480: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53481: LD_ADDR_VAR 0 3
53485: PUSH
53486: LD_VAR 0 1
53490: PPUSH
53491: CALL_OW 255
53495: PPUSH
53496: LD_VAR 0 1
53500: PPUSH
53501: CALL_OW 250
53505: PPUSH
53506: LD_VAR 0 1
53510: PPUSH
53511: CALL_OW 251
53515: PPUSH
53516: LD_VAR 0 2
53520: PPUSH
53521: CALL 51781 0 4
53525: ST_TO_ADDR
// end ;
53526: LD_VAR 0 3
53530: RET
// export function DangerInArea ( side , area ) ; begin
53531: LD_INT 0
53533: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53534: LD_ADDR_VAR 0 3
53538: PUSH
53539: LD_VAR 0 2
53543: PPUSH
53544: LD_INT 81
53546: PUSH
53547: LD_VAR 0 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PPUSH
53556: CALL_OW 70
53560: ST_TO_ADDR
// end ;
53561: LD_VAR 0 3
53565: RET
// export function IsExtension ( b ) ; begin
53566: LD_INT 0
53568: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53569: LD_ADDR_VAR 0 2
53573: PUSH
53574: LD_VAR 0 1
53578: PUSH
53579: LD_INT 23
53581: PUSH
53582: LD_INT 20
53584: PUSH
53585: LD_INT 22
53587: PUSH
53588: LD_INT 17
53590: PUSH
53591: LD_INT 24
53593: PUSH
53594: LD_INT 21
53596: PUSH
53597: LD_INT 19
53599: PUSH
53600: LD_INT 16
53602: PUSH
53603: LD_INT 25
53605: PUSH
53606: LD_INT 18
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: IN
53621: ST_TO_ADDR
// end ;
53622: LD_VAR 0 2
53626: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
53627: LD_INT 0
53629: PPUSH
53630: PPUSH
53631: PPUSH
// result := [ ] ;
53632: LD_ADDR_VAR 0 2
53636: PUSH
53637: EMPTY
53638: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
53639: LD_ADDR_VAR 0 3
53643: PUSH
53644: LD_INT 21
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PPUSH
53654: CALL_OW 69
53658: ST_TO_ADDR
// if not tmp then
53659: LD_VAR 0 3
53663: NOT
53664: IFFALSE 53668
// exit ;
53666: GO 53718
// for i in tmp do
53668: LD_ADDR_VAR 0 4
53672: PUSH
53673: LD_VAR 0 3
53677: PUSH
53678: FOR_IN
53679: IFFALSE 53716
// if GetBase ( i ) = base then
53681: LD_VAR 0 4
53685: PPUSH
53686: CALL_OW 274
53690: PUSH
53691: LD_VAR 0 1
53695: EQUAL
53696: IFFALSE 53714
// result := result ^ i ;
53698: LD_ADDR_VAR 0 2
53702: PUSH
53703: LD_VAR 0 2
53707: PUSH
53708: LD_VAR 0 4
53712: ADD
53713: ST_TO_ADDR
53714: GO 53678
53716: POP
53717: POP
// end ;
53718: LD_VAR 0 2
53722: RET
// export function ComComplete ( unit , b ) ; var i ; begin
53723: LD_INT 0
53725: PPUSH
53726: PPUSH
// if BuildingStatus ( b ) = bs_build then
53727: LD_VAR 0 2
53731: PPUSH
53732: CALL_OW 461
53736: PUSH
53737: LD_INT 1
53739: EQUAL
53740: IFFALSE 53800
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
53742: LD_VAR 0 1
53746: PPUSH
53747: LD_STRING h
53749: PUSH
53750: LD_VAR 0 2
53754: PPUSH
53755: CALL_OW 250
53759: PUSH
53760: LD_VAR 0 2
53764: PPUSH
53765: CALL_OW 251
53769: PUSH
53770: LD_VAR 0 2
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: LD_INT 0
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: PUSH
53793: EMPTY
53794: LIST
53795: PPUSH
53796: CALL_OW 446
// end ;
53800: LD_VAR 0 3
53804: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53805: LD_INT 0
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
53813: LD_VAR 0 1
53817: NOT
53818: PUSH
53819: LD_VAR 0 1
53823: PPUSH
53824: CALL_OW 263
53828: PUSH
53829: LD_INT 2
53831: EQUAL
53832: NOT
53833: OR
53834: IFFALSE 53838
// exit ;
53836: GO 54154
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53838: LD_ADDR_VAR 0 6
53842: PUSH
53843: LD_INT 22
53845: PUSH
53846: LD_VAR 0 1
53850: PPUSH
53851: CALL_OW 255
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 30
53865: PUSH
53866: LD_INT 36
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 34
53875: PUSH
53876: LD_INT 31
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PPUSH
53892: CALL_OW 69
53896: ST_TO_ADDR
// if not tmp then
53897: LD_VAR 0 6
53901: NOT
53902: IFFALSE 53906
// exit ;
53904: GO 54154
// result := [ ] ;
53906: LD_ADDR_VAR 0 2
53910: PUSH
53911: EMPTY
53912: ST_TO_ADDR
// for i in tmp do
53913: LD_ADDR_VAR 0 3
53917: PUSH
53918: LD_VAR 0 6
53922: PUSH
53923: FOR_IN
53924: IFFALSE 53995
// begin t := UnitsInside ( i ) ;
53926: LD_ADDR_VAR 0 4
53930: PUSH
53931: LD_VAR 0 3
53935: PPUSH
53936: CALL_OW 313
53940: ST_TO_ADDR
// if t then
53941: LD_VAR 0 4
53945: IFFALSE 53993
// for j in t do
53947: LD_ADDR_VAR 0 7
53951: PUSH
53952: LD_VAR 0 4
53956: PUSH
53957: FOR_IN
53958: IFFALSE 53991
// result := Insert ( result , result + 1 , j ) ;
53960: LD_ADDR_VAR 0 2
53964: PUSH
53965: LD_VAR 0 2
53969: PPUSH
53970: LD_VAR 0 2
53974: PUSH
53975: LD_INT 1
53977: PLUS
53978: PPUSH
53979: LD_VAR 0 7
53983: PPUSH
53984: CALL_OW 2
53988: ST_TO_ADDR
53989: GO 53957
53991: POP
53992: POP
// end ;
53993: GO 53923
53995: POP
53996: POP
// if not result then
53997: LD_VAR 0 2
54001: NOT
54002: IFFALSE 54006
// exit ;
54004: GO 54154
// mech := result [ 1 ] ;
54006: LD_ADDR_VAR 0 5
54010: PUSH
54011: LD_VAR 0 2
54015: PUSH
54016: LD_INT 1
54018: ARRAY
54019: ST_TO_ADDR
// if result > 1 then
54020: LD_VAR 0 2
54024: PUSH
54025: LD_INT 1
54027: GREATER
54028: IFFALSE 54140
// for i = 2 to result do
54030: LD_ADDR_VAR 0 3
54034: PUSH
54035: DOUBLE
54036: LD_INT 2
54038: DEC
54039: ST_TO_ADDR
54040: LD_VAR 0 2
54044: PUSH
54045: FOR_TO
54046: IFFALSE 54138
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54048: LD_ADDR_VAR 0 4
54052: PUSH
54053: LD_VAR 0 2
54057: PUSH
54058: LD_VAR 0 3
54062: ARRAY
54063: PPUSH
54064: LD_INT 3
54066: PPUSH
54067: CALL_OW 259
54071: PUSH
54072: LD_VAR 0 2
54076: PUSH
54077: LD_VAR 0 3
54081: ARRAY
54082: PPUSH
54083: CALL_OW 432
54087: MINUS
54088: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54089: LD_VAR 0 4
54093: PUSH
54094: LD_VAR 0 5
54098: PPUSH
54099: LD_INT 3
54101: PPUSH
54102: CALL_OW 259
54106: PUSH
54107: LD_VAR 0 5
54111: PPUSH
54112: CALL_OW 432
54116: MINUS
54117: GREATEREQUAL
54118: IFFALSE 54136
// mech := result [ i ] ;
54120: LD_ADDR_VAR 0 5
54124: PUSH
54125: LD_VAR 0 2
54129: PUSH
54130: LD_VAR 0 3
54134: ARRAY
54135: ST_TO_ADDR
// end ;
54136: GO 54045
54138: POP
54139: POP
// ComLinkTo ( vehicle , mech ) ;
54140: LD_VAR 0 1
54144: PPUSH
54145: LD_VAR 0 5
54149: PPUSH
54150: CALL_OW 135
// end ;
54154: LD_VAR 0 2
54158: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54159: LD_INT 0
54161: PPUSH
54162: PPUSH
54163: PPUSH
54164: PPUSH
54165: PPUSH
54166: PPUSH
54167: PPUSH
54168: PPUSH
54169: PPUSH
54170: PPUSH
54171: PPUSH
54172: PPUSH
54173: PPUSH
// result := [ ] ;
54174: LD_ADDR_VAR 0 6
54178: PUSH
54179: EMPTY
54180: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54181: LD_VAR 0 1
54185: PPUSH
54186: CALL_OW 266
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: IN
54201: NOT
54202: IFFALSE 54206
// exit ;
54204: GO 55725
// if name then
54206: LD_VAR 0 2
54210: IFFALSE 54226
// SetBName ( base_dep , name ) ;
54212: LD_VAR 0 1
54216: PPUSH
54217: LD_VAR 0 2
54221: PPUSH
54222: CALL_OW 500
// base := GetBase ( base_dep ) ;
54226: LD_ADDR_VAR 0 14
54230: PUSH
54231: LD_VAR 0 1
54235: PPUSH
54236: CALL_OW 274
54240: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54241: LD_ADDR_VAR 0 15
54245: PUSH
54246: LD_VAR 0 1
54250: PPUSH
54251: CALL_OW 255
54255: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54256: LD_ADDR_VAR 0 16
54260: PUSH
54261: LD_VAR 0 1
54265: PPUSH
54266: CALL_OW 248
54270: ST_TO_ADDR
// if sources then
54271: LD_VAR 0 4
54275: IFFALSE 54322
// for i = 1 to 3 do
54277: LD_ADDR_VAR 0 7
54281: PUSH
54282: DOUBLE
54283: LD_INT 1
54285: DEC
54286: ST_TO_ADDR
54287: LD_INT 3
54289: PUSH
54290: FOR_TO
54291: IFFALSE 54320
// AddResourceType ( base , i , sources [ i ] ) ;
54293: LD_VAR 0 14
54297: PPUSH
54298: LD_VAR 0 7
54302: PPUSH
54303: LD_VAR 0 4
54307: PUSH
54308: LD_VAR 0 7
54312: ARRAY
54313: PPUSH
54314: CALL_OW 276
54318: GO 54290
54320: POP
54321: POP
// buildings := GetBaseBuildings ( base ) ;
54322: LD_ADDR_VAR 0 17
54326: PUSH
54327: LD_VAR 0 14
54331: PPUSH
54332: CALL 53627 0 1
54336: ST_TO_ADDR
// InitHc ;
54337: CALL_OW 19
// InitUc ;
54341: CALL_OW 18
// uc_side := side ;
54345: LD_ADDR_OWVAR 20
54349: PUSH
54350: LD_VAR 0 15
54354: ST_TO_ADDR
// uc_nation := nation ;
54355: LD_ADDR_OWVAR 21
54359: PUSH
54360: LD_VAR 0 16
54364: ST_TO_ADDR
// if buildings then
54365: LD_VAR 0 17
54369: IFFALSE 55584
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54371: LD_VAR 0 17
54375: PPUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 30
54381: PUSH
54382: LD_INT 32
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 30
54391: PUSH
54392: LD_INT 33
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: PPUSH
54404: CALL_OW 72
54408: IFFALSE 54491
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54410: LD_ADDR_VAR 0 7
54414: PUSH
54415: LD_VAR 0 17
54419: PPUSH
54420: LD_INT 2
54422: PUSH
54423: LD_INT 30
54425: PUSH
54426: LD_INT 32
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 30
54435: PUSH
54436: LD_INT 33
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: LIST
54447: PPUSH
54448: CALL_OW 72
54452: PUSH
54453: FOR_IN
54454: IFFALSE 54489
// begin if not GetBWeapon ( i ) then
54456: LD_VAR 0 7
54460: PPUSH
54461: CALL_OW 269
54465: NOT
54466: IFFALSE 54487
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
54468: LD_VAR 0 7
54472: PPUSH
54473: LD_VAR 0 7
54477: PPUSH
54478: CALL 55730 0 1
54482: PPUSH
54483: CALL_OW 431
// end ;
54487: GO 54453
54489: POP
54490: POP
// end ; for i = 1 to personel do
54491: LD_ADDR_VAR 0 7
54495: PUSH
54496: DOUBLE
54497: LD_INT 1
54499: DEC
54500: ST_TO_ADDR
54501: LD_VAR 0 5
54505: PUSH
54506: FOR_TO
54507: IFFALSE 55564
// begin if i > 4 then
54509: LD_VAR 0 7
54513: PUSH
54514: LD_INT 4
54516: GREATER
54517: IFFALSE 54521
// break ;
54519: GO 55564
// case i of 1 :
54521: LD_VAR 0 7
54525: PUSH
54526: LD_INT 1
54528: DOUBLE
54529: EQUAL
54530: IFTRUE 54534
54532: GO 54607
54534: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
54535: LD_ADDR_VAR 0 11
54539: PUSH
54540: LD_VAR 0 17
54544: PPUSH
54545: LD_INT 22
54547: PUSH
54548: LD_VAR 0 15
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 30
54562: PUSH
54563: LD_INT 32
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 30
54572: PUSH
54573: LD_INT 4
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 30
54582: PUSH
54583: LD_INT 5
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PPUSH
54600: CALL_OW 72
54604: ST_TO_ADDR
54605: GO 54829
54607: LD_INT 2
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54615
54613: GO 54677
54615: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
54616: LD_ADDR_VAR 0 11
54620: PUSH
54621: LD_VAR 0 17
54625: PPUSH
54626: LD_INT 22
54628: PUSH
54629: LD_VAR 0 15
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: PUSH
54641: LD_INT 30
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 30
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PPUSH
54670: CALL_OW 72
54674: ST_TO_ADDR
54675: GO 54829
54677: LD_INT 3
54679: DOUBLE
54680: EQUAL
54681: IFTRUE 54685
54683: GO 54747
54685: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54686: LD_ADDR_VAR 0 11
54690: PUSH
54691: LD_VAR 0 17
54695: PPUSH
54696: LD_INT 22
54698: PUSH
54699: LD_VAR 0 15
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 30
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 30
54723: PUSH
54724: LD_INT 3
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PPUSH
54740: CALL_OW 72
54744: ST_TO_ADDR
54745: GO 54829
54747: LD_INT 4
54749: DOUBLE
54750: EQUAL
54751: IFTRUE 54755
54753: GO 54828
54755: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54756: LD_ADDR_VAR 0 11
54760: PUSH
54761: LD_VAR 0 17
54765: PPUSH
54766: LD_INT 22
54768: PUSH
54769: LD_VAR 0 15
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 30
54783: PUSH
54784: LD_INT 6
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 30
54793: PUSH
54794: LD_INT 7
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 30
54803: PUSH
54804: LD_INT 8
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PPUSH
54821: CALL_OW 72
54825: ST_TO_ADDR
54826: GO 54829
54828: POP
// if i = 1 then
54829: LD_VAR 0 7
54833: PUSH
54834: LD_INT 1
54836: EQUAL
54837: IFFALSE 54948
// begin tmp := [ ] ;
54839: LD_ADDR_VAR 0 18
54843: PUSH
54844: EMPTY
54845: ST_TO_ADDR
// for j in f do
54846: LD_ADDR_VAR 0 8
54850: PUSH
54851: LD_VAR 0 11
54855: PUSH
54856: FOR_IN
54857: IFFALSE 54930
// if GetBType ( j ) = b_bunker then
54859: LD_VAR 0 8
54863: PPUSH
54864: CALL_OW 266
54868: PUSH
54869: LD_INT 32
54871: EQUAL
54872: IFFALSE 54899
// tmp := Insert ( tmp , 1 , j ) else
54874: LD_ADDR_VAR 0 18
54878: PUSH
54879: LD_VAR 0 18
54883: PPUSH
54884: LD_INT 1
54886: PPUSH
54887: LD_VAR 0 8
54891: PPUSH
54892: CALL_OW 2
54896: ST_TO_ADDR
54897: GO 54928
// tmp := Insert ( tmp , tmp + 1 , j ) ;
54899: LD_ADDR_VAR 0 18
54903: PUSH
54904: LD_VAR 0 18
54908: PPUSH
54909: LD_VAR 0 18
54913: PUSH
54914: LD_INT 1
54916: PLUS
54917: PPUSH
54918: LD_VAR 0 8
54922: PPUSH
54923: CALL_OW 2
54927: ST_TO_ADDR
54928: GO 54856
54930: POP
54931: POP
// if tmp then
54932: LD_VAR 0 18
54936: IFFALSE 54948
// f := tmp ;
54938: LD_ADDR_VAR 0 11
54942: PUSH
54943: LD_VAR 0 18
54947: ST_TO_ADDR
// end ; x := personel [ i ] ;
54948: LD_ADDR_VAR 0 12
54952: PUSH
54953: LD_VAR 0 5
54957: PUSH
54958: LD_VAR 0 7
54962: ARRAY
54963: ST_TO_ADDR
// if x = - 1 then
54964: LD_VAR 0 12
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: EQUAL
54973: IFFALSE 55182
// begin for j in f do
54975: LD_ADDR_VAR 0 8
54979: PUSH
54980: LD_VAR 0 11
54984: PUSH
54985: FOR_IN
54986: IFFALSE 55178
// repeat InitHc ;
54988: CALL_OW 19
// if GetBType ( j ) = b_barracks then
54992: LD_VAR 0 8
54996: PPUSH
54997: CALL_OW 266
55001: PUSH
55002: LD_INT 5
55004: EQUAL
55005: IFFALSE 55075
// begin if UnitsInside ( j ) < 3 then
55007: LD_VAR 0 8
55011: PPUSH
55012: CALL_OW 313
55016: PUSH
55017: LD_INT 3
55019: LESS
55020: IFFALSE 55056
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55022: LD_INT 0
55024: PPUSH
55025: LD_INT 5
55027: PUSH
55028: LD_INT 8
55030: PUSH
55031: LD_INT 9
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: LIST
55038: PUSH
55039: LD_VAR 0 16
55043: ARRAY
55044: PPUSH
55045: LD_VAR 0 3
55049: PPUSH
55050: CALL_OW 380
55054: GO 55073
// PrepareHuman ( false , i , skill ) ;
55056: LD_INT 0
55058: PPUSH
55059: LD_VAR 0 7
55063: PPUSH
55064: LD_VAR 0 3
55068: PPUSH
55069: CALL_OW 380
// end else
55073: GO 55092
// PrepareHuman ( false , i , skill ) ;
55075: LD_INT 0
55077: PPUSH
55078: LD_VAR 0 7
55082: PPUSH
55083: LD_VAR 0 3
55087: PPUSH
55088: CALL_OW 380
// un := CreateHuman ;
55092: LD_ADDR_VAR 0 13
55096: PUSH
55097: CALL_OW 44
55101: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55102: LD_ADDR_VAR 0 6
55106: PUSH
55107: LD_VAR 0 6
55111: PPUSH
55112: LD_INT 1
55114: PPUSH
55115: LD_VAR 0 13
55119: PPUSH
55120: CALL_OW 2
55124: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55125: LD_VAR 0 13
55129: PPUSH
55130: LD_VAR 0 8
55134: PPUSH
55135: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55139: LD_VAR 0 8
55143: PPUSH
55144: CALL_OW 313
55148: PUSH
55149: LD_INT 6
55151: EQUAL
55152: PUSH
55153: LD_VAR 0 8
55157: PPUSH
55158: CALL_OW 266
55162: PUSH
55163: LD_INT 32
55165: PUSH
55166: LD_INT 31
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: IN
55173: OR
55174: IFFALSE 54988
55176: GO 54985
55178: POP
55179: POP
// end else
55180: GO 55562
// for j = 1 to x do
55182: LD_ADDR_VAR 0 8
55186: PUSH
55187: DOUBLE
55188: LD_INT 1
55190: DEC
55191: ST_TO_ADDR
55192: LD_VAR 0 12
55196: PUSH
55197: FOR_TO
55198: IFFALSE 55560
// begin InitHc ;
55200: CALL_OW 19
// if not f then
55204: LD_VAR 0 11
55208: NOT
55209: IFFALSE 55298
// begin PrepareHuman ( false , i , skill ) ;
55211: LD_INT 0
55213: PPUSH
55214: LD_VAR 0 7
55218: PPUSH
55219: LD_VAR 0 3
55223: PPUSH
55224: CALL_OW 380
// un := CreateHuman ;
55228: LD_ADDR_VAR 0 13
55232: PUSH
55233: CALL_OW 44
55237: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55238: LD_ADDR_VAR 0 6
55242: PUSH
55243: LD_VAR 0 6
55247: PPUSH
55248: LD_INT 1
55250: PPUSH
55251: LD_VAR 0 13
55255: PPUSH
55256: CALL_OW 2
55260: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55261: LD_VAR 0 13
55265: PPUSH
55266: LD_VAR 0 1
55270: PPUSH
55271: CALL_OW 250
55275: PPUSH
55276: LD_VAR 0 1
55280: PPUSH
55281: CALL_OW 251
55285: PPUSH
55286: LD_INT 10
55288: PPUSH
55289: LD_INT 0
55291: PPUSH
55292: CALL_OW 50
// continue ;
55296: GO 55197
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55298: LD_VAR 0 11
55302: PUSH
55303: LD_INT 1
55305: ARRAY
55306: PPUSH
55307: CALL_OW 313
55311: PUSH
55312: LD_VAR 0 11
55316: PUSH
55317: LD_INT 1
55319: ARRAY
55320: PPUSH
55321: CALL_OW 266
55325: PUSH
55326: LD_INT 32
55328: PUSH
55329: LD_INT 31
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: IN
55336: AND
55337: PUSH
55338: LD_VAR 0 11
55342: PUSH
55343: LD_INT 1
55345: ARRAY
55346: PPUSH
55347: CALL_OW 313
55351: PUSH
55352: LD_INT 6
55354: EQUAL
55355: OR
55356: IFFALSE 55376
// f := Delete ( f , 1 ) ;
55358: LD_ADDR_VAR 0 11
55362: PUSH
55363: LD_VAR 0 11
55367: PPUSH
55368: LD_INT 1
55370: PPUSH
55371: CALL_OW 3
55375: ST_TO_ADDR
// if not f then
55376: LD_VAR 0 11
55380: NOT
55381: IFFALSE 55399
// begin x := x + 2 ;
55383: LD_ADDR_VAR 0 12
55387: PUSH
55388: LD_VAR 0 12
55392: PUSH
55393: LD_INT 2
55395: PLUS
55396: ST_TO_ADDR
// continue ;
55397: GO 55197
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55399: LD_VAR 0 11
55403: PUSH
55404: LD_INT 1
55406: ARRAY
55407: PPUSH
55408: CALL_OW 266
55412: PUSH
55413: LD_INT 5
55415: EQUAL
55416: IFFALSE 55490
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55418: LD_VAR 0 11
55422: PUSH
55423: LD_INT 1
55425: ARRAY
55426: PPUSH
55427: CALL_OW 313
55431: PUSH
55432: LD_INT 3
55434: LESS
55435: IFFALSE 55471
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55437: LD_INT 0
55439: PPUSH
55440: LD_INT 5
55442: PUSH
55443: LD_INT 8
55445: PUSH
55446: LD_INT 9
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: LIST
55453: PUSH
55454: LD_VAR 0 16
55458: ARRAY
55459: PPUSH
55460: LD_VAR 0 3
55464: PPUSH
55465: CALL_OW 380
55469: GO 55488
// PrepareHuman ( false , i , skill ) ;
55471: LD_INT 0
55473: PPUSH
55474: LD_VAR 0 7
55478: PPUSH
55479: LD_VAR 0 3
55483: PPUSH
55484: CALL_OW 380
// end else
55488: GO 55507
// PrepareHuman ( false , i , skill ) ;
55490: LD_INT 0
55492: PPUSH
55493: LD_VAR 0 7
55497: PPUSH
55498: LD_VAR 0 3
55502: PPUSH
55503: CALL_OW 380
// un := CreateHuman ;
55507: LD_ADDR_VAR 0 13
55511: PUSH
55512: CALL_OW 44
55516: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55517: LD_ADDR_VAR 0 6
55521: PUSH
55522: LD_VAR 0 6
55526: PPUSH
55527: LD_INT 1
55529: PPUSH
55530: LD_VAR 0 13
55534: PPUSH
55535: CALL_OW 2
55539: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
55540: LD_VAR 0 13
55544: PPUSH
55545: LD_VAR 0 11
55549: PUSH
55550: LD_INT 1
55552: ARRAY
55553: PPUSH
55554: CALL_OW 52
// end ;
55558: GO 55197
55560: POP
55561: POP
// end ;
55562: GO 54506
55564: POP
55565: POP
// result := result ^ buildings ;
55566: LD_ADDR_VAR 0 6
55570: PUSH
55571: LD_VAR 0 6
55575: PUSH
55576: LD_VAR 0 17
55580: ADD
55581: ST_TO_ADDR
// end else
55582: GO 55725
// begin for i = 1 to personel do
55584: LD_ADDR_VAR 0 7
55588: PUSH
55589: DOUBLE
55590: LD_INT 1
55592: DEC
55593: ST_TO_ADDR
55594: LD_VAR 0 5
55598: PUSH
55599: FOR_TO
55600: IFFALSE 55723
// begin if i > 4 then
55602: LD_VAR 0 7
55606: PUSH
55607: LD_INT 4
55609: GREATER
55610: IFFALSE 55614
// break ;
55612: GO 55723
// x := personel [ i ] ;
55614: LD_ADDR_VAR 0 12
55618: PUSH
55619: LD_VAR 0 5
55623: PUSH
55624: LD_VAR 0 7
55628: ARRAY
55629: ST_TO_ADDR
// if x = - 1 then
55630: LD_VAR 0 12
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: EQUAL
55639: IFFALSE 55643
// continue ;
55641: GO 55599
// PrepareHuman ( false , i , skill ) ;
55643: LD_INT 0
55645: PPUSH
55646: LD_VAR 0 7
55650: PPUSH
55651: LD_VAR 0 3
55655: PPUSH
55656: CALL_OW 380
// un := CreateHuman ;
55660: LD_ADDR_VAR 0 13
55664: PUSH
55665: CALL_OW 44
55669: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55670: LD_VAR 0 13
55674: PPUSH
55675: LD_VAR 0 1
55679: PPUSH
55680: CALL_OW 250
55684: PPUSH
55685: LD_VAR 0 1
55689: PPUSH
55690: CALL_OW 251
55694: PPUSH
55695: LD_INT 10
55697: PPUSH
55698: LD_INT 0
55700: PPUSH
55701: CALL_OW 50
// result := result ^ un ;
55705: LD_ADDR_VAR 0 6
55709: PUSH
55710: LD_VAR 0 6
55714: PUSH
55715: LD_VAR 0 13
55719: ADD
55720: ST_TO_ADDR
// end ;
55721: GO 55599
55723: POP
55724: POP
// end ; end ;
55725: LD_VAR 0 6
55729: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55730: LD_INT 0
55732: PPUSH
55733: PPUSH
55734: PPUSH
55735: PPUSH
55736: PPUSH
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
55741: PPUSH
55742: PPUSH
55743: PPUSH
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
// result := false ;
55748: LD_ADDR_VAR 0 2
55752: PUSH
55753: LD_INT 0
55755: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55756: LD_VAR 0 1
55760: NOT
55761: PUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 266
55771: PUSH
55772: LD_INT 32
55774: PUSH
55775: LD_INT 33
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: IN
55782: NOT
55783: OR
55784: IFFALSE 55788
// exit ;
55786: GO 56919
// nat := GetNation ( tower ) ;
55788: LD_ADDR_VAR 0 11
55792: PUSH
55793: LD_VAR 0 1
55797: PPUSH
55798: CALL_OW 248
55802: ST_TO_ADDR
// side := GetSide ( tower ) ;
55803: LD_ADDR_VAR 0 15
55807: PUSH
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL_OW 255
55817: ST_TO_ADDR
// x := GetX ( tower ) ;
55818: LD_ADDR_VAR 0 9
55822: PUSH
55823: LD_VAR 0 1
55827: PPUSH
55828: CALL_OW 250
55832: ST_TO_ADDR
// y := GetY ( tower ) ;
55833: LD_ADDR_VAR 0 10
55837: PUSH
55838: LD_VAR 0 1
55842: PPUSH
55843: CALL_OW 251
55847: ST_TO_ADDR
// if not x or not y then
55848: LD_VAR 0 9
55852: NOT
55853: PUSH
55854: LD_VAR 0 10
55858: NOT
55859: OR
55860: IFFALSE 55864
// exit ;
55862: GO 56919
// weapon := 0 ;
55864: LD_ADDR_VAR 0 17
55868: PUSH
55869: LD_INT 0
55871: ST_TO_ADDR
// fac_list := [ ] ;
55872: LD_ADDR_VAR 0 16
55876: PUSH
55877: EMPTY
55878: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
55879: LD_ADDR_VAR 0 5
55883: PUSH
55884: LD_VAR 0 1
55888: PPUSH
55889: CALL_OW 274
55893: PPUSH
55894: CALL 53627 0 1
55898: PPUSH
55899: LD_INT 30
55901: PUSH
55902: LD_INT 3
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PPUSH
55909: CALL_OW 72
55913: ST_TO_ADDR
// if not factories then
55914: LD_VAR 0 5
55918: NOT
55919: IFFALSE 55923
// exit ;
55921: GO 56919
// for i in factories do
55923: LD_ADDR_VAR 0 7
55927: PUSH
55928: LD_VAR 0 5
55932: PUSH
55933: FOR_IN
55934: IFFALSE 55959
// fac_list := fac_list union AvailableWeaponList ( i ) ;
55936: LD_ADDR_VAR 0 16
55940: PUSH
55941: LD_VAR 0 16
55945: PUSH
55946: LD_VAR 0 7
55950: PPUSH
55951: CALL_OW 478
55955: UNION
55956: ST_TO_ADDR
55957: GO 55933
55959: POP
55960: POP
// if not fac_list then
55961: LD_VAR 0 16
55965: NOT
55966: IFFALSE 55970
// exit ;
55968: GO 56919
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
55970: LD_ADDR_VAR 0 4
55974: PUSH
55975: LD_INT 4
55977: PUSH
55978: LD_INT 5
55980: PUSH
55981: LD_INT 9
55983: PUSH
55984: LD_INT 10
55986: PUSH
55987: LD_INT 6
55989: PUSH
55990: LD_INT 7
55992: PUSH
55993: LD_INT 11
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 27
56007: PUSH
56008: LD_INT 28
56010: PUSH
56011: LD_INT 26
56013: PUSH
56014: LD_INT 30
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 43
56025: PUSH
56026: LD_INT 44
56028: PUSH
56029: LD_INT 46
56031: PUSH
56032: LD_INT 45
56034: PUSH
56035: LD_INT 47
56037: PUSH
56038: LD_INT 49
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: LIST
56053: PUSH
56054: LD_VAR 0 11
56058: ARRAY
56059: ST_TO_ADDR
// for i in list do
56060: LD_ADDR_VAR 0 7
56064: PUSH
56065: LD_VAR 0 4
56069: PUSH
56070: FOR_IN
56071: IFFALSE 56104
// if not i in fac_list then
56073: LD_VAR 0 7
56077: PUSH
56078: LD_VAR 0 16
56082: IN
56083: NOT
56084: IFFALSE 56102
// list := list diff i ;
56086: LD_ADDR_VAR 0 4
56090: PUSH
56091: LD_VAR 0 4
56095: PUSH
56096: LD_VAR 0 7
56100: DIFF
56101: ST_TO_ADDR
56102: GO 56070
56104: POP
56105: POP
// if not list then
56106: LD_VAR 0 4
56110: NOT
56111: IFFALSE 56115
// exit ;
56113: GO 56919
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56115: LD_VAR 0 11
56119: PUSH
56120: LD_INT 3
56122: EQUAL
56123: PUSH
56124: LD_INT 49
56126: PUSH
56127: LD_VAR 0 4
56131: IN
56132: AND
56133: PUSH
56134: LD_INT 31
56136: PPUSH
56137: LD_VAR 0 15
56141: PPUSH
56142: CALL_OW 321
56146: PUSH
56147: LD_INT 2
56149: EQUAL
56150: AND
56151: IFFALSE 56211
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56153: LD_INT 22
56155: PUSH
56156: LD_VAR 0 15
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 35
56167: PUSH
56168: LD_INT 49
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 91
56177: PUSH
56178: LD_VAR 0 1
56182: PUSH
56183: LD_INT 10
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: PPUSH
56196: CALL_OW 69
56200: NOT
56201: IFFALSE 56211
// weapon := ru_time_lapser ;
56203: LD_ADDR_VAR 0 17
56207: PUSH
56208: LD_INT 49
56210: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56211: LD_VAR 0 11
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: IN
56226: PUSH
56227: LD_INT 11
56229: PUSH
56230: LD_VAR 0 4
56234: IN
56235: PUSH
56236: LD_INT 30
56238: PUSH
56239: LD_VAR 0 4
56243: IN
56244: OR
56245: AND
56246: PUSH
56247: LD_INT 6
56249: PPUSH
56250: LD_VAR 0 15
56254: PPUSH
56255: CALL_OW 321
56259: PUSH
56260: LD_INT 2
56262: EQUAL
56263: AND
56264: IFFALSE 56429
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56266: LD_INT 22
56268: PUSH
56269: LD_VAR 0 15
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 35
56283: PUSH
56284: LD_INT 11
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 35
56293: PUSH
56294: LD_INT 30
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 91
56308: PUSH
56309: LD_VAR 0 1
56313: PUSH
56314: LD_INT 18
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: LIST
56326: PPUSH
56327: CALL_OW 69
56331: NOT
56332: PUSH
56333: LD_INT 22
56335: PUSH
56336: LD_VAR 0 15
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 30
56350: PUSH
56351: LD_INT 32
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 30
56360: PUSH
56361: LD_INT 33
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 91
56375: PUSH
56376: LD_VAR 0 1
56380: PUSH
56381: LD_INT 12
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: PPUSH
56397: CALL_OW 69
56401: PUSH
56402: LD_INT 2
56404: GREATER
56405: AND
56406: IFFALSE 56429
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56408: LD_ADDR_VAR 0 17
56412: PUSH
56413: LD_INT 11
56415: PUSH
56416: LD_INT 30
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_VAR 0 11
56427: ARRAY
56428: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56429: LD_VAR 0 17
56433: NOT
56434: PUSH
56435: LD_INT 40
56437: PPUSH
56438: LD_VAR 0 15
56442: PPUSH
56443: CALL_OW 321
56447: PUSH
56448: LD_INT 2
56450: EQUAL
56451: AND
56452: PUSH
56453: LD_INT 7
56455: PUSH
56456: LD_VAR 0 4
56460: IN
56461: PUSH
56462: LD_INT 28
56464: PUSH
56465: LD_VAR 0 4
56469: IN
56470: OR
56471: PUSH
56472: LD_INT 45
56474: PUSH
56475: LD_VAR 0 4
56479: IN
56480: OR
56481: AND
56482: IFFALSE 56736
// begin hex := GetHexInfo ( x , y ) ;
56484: LD_ADDR_VAR 0 3
56488: PUSH
56489: LD_VAR 0 9
56493: PPUSH
56494: LD_VAR 0 10
56498: PPUSH
56499: CALL_OW 546
56503: ST_TO_ADDR
// if hex [ 1 ] then
56504: LD_VAR 0 3
56508: PUSH
56509: LD_INT 1
56511: ARRAY
56512: IFFALSE 56516
// exit ;
56514: GO 56919
// height := hex [ 2 ] ;
56516: LD_ADDR_VAR 0 14
56520: PUSH
56521: LD_VAR 0 3
56525: PUSH
56526: LD_INT 2
56528: ARRAY
56529: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56530: LD_ADDR_VAR 0 13
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 3
56543: PUSH
56544: LD_INT 5
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: ST_TO_ADDR
// for i in tmp do
56553: LD_ADDR_VAR 0 7
56557: PUSH
56558: LD_VAR 0 13
56562: PUSH
56563: FOR_IN
56564: IFFALSE 56734
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
56566: LD_ADDR_VAR 0 8
56570: PUSH
56571: LD_VAR 0 9
56575: PPUSH
56576: LD_VAR 0 7
56580: PPUSH
56581: LD_INT 5
56583: PPUSH
56584: CALL_OW 272
56588: PUSH
56589: LD_VAR 0 10
56593: PPUSH
56594: LD_VAR 0 7
56598: PPUSH
56599: LD_INT 5
56601: PPUSH
56602: CALL_OW 273
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56611: LD_VAR 0 8
56615: PUSH
56616: LD_INT 1
56618: ARRAY
56619: PPUSH
56620: LD_VAR 0 8
56624: PUSH
56625: LD_INT 2
56627: ARRAY
56628: PPUSH
56629: CALL_OW 488
56633: IFFALSE 56732
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
56635: LD_ADDR_VAR 0 3
56639: PUSH
56640: LD_VAR 0 8
56644: PUSH
56645: LD_INT 1
56647: ARRAY
56648: PPUSH
56649: LD_VAR 0 8
56653: PUSH
56654: LD_INT 2
56656: ARRAY
56657: PPUSH
56658: CALL_OW 546
56662: ST_TO_ADDR
// if hex [ 1 ] then
56663: LD_VAR 0 3
56667: PUSH
56668: LD_INT 1
56670: ARRAY
56671: IFFALSE 56675
// continue ;
56673: GO 56563
// h := hex [ 2 ] ;
56675: LD_ADDR_VAR 0 12
56679: PUSH
56680: LD_VAR 0 3
56684: PUSH
56685: LD_INT 2
56687: ARRAY
56688: ST_TO_ADDR
// if h + 7 < height then
56689: LD_VAR 0 12
56693: PUSH
56694: LD_INT 7
56696: PLUS
56697: PUSH
56698: LD_VAR 0 14
56702: LESS
56703: IFFALSE 56732
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56705: LD_ADDR_VAR 0 17
56709: PUSH
56710: LD_INT 7
56712: PUSH
56713: LD_INT 28
56715: PUSH
56716: LD_INT 45
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: LIST
56723: PUSH
56724: LD_VAR 0 11
56728: ARRAY
56729: ST_TO_ADDR
// break ;
56730: GO 56734
// end ; end ; end ;
56732: GO 56563
56734: POP
56735: POP
// end ; if not weapon then
56736: LD_VAR 0 17
56740: NOT
56741: IFFALSE 56801
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56743: LD_ADDR_VAR 0 4
56747: PUSH
56748: LD_VAR 0 4
56752: PUSH
56753: LD_INT 11
56755: PUSH
56756: LD_INT 30
56758: PUSH
56759: LD_INT 49
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: DIFF
56767: ST_TO_ADDR
// if not list then
56768: LD_VAR 0 4
56772: NOT
56773: IFFALSE 56777
// exit ;
56775: GO 56919
// weapon := list [ rand ( 1 , list ) ] ;
56777: LD_ADDR_VAR 0 17
56781: PUSH
56782: LD_VAR 0 4
56786: PUSH
56787: LD_INT 1
56789: PPUSH
56790: LD_VAR 0 4
56794: PPUSH
56795: CALL_OW 12
56799: ARRAY
56800: ST_TO_ADDR
// end ; if weapon then
56801: LD_VAR 0 17
56805: IFFALSE 56919
// begin tmp := CostOfWeapon ( weapon ) ;
56807: LD_ADDR_VAR 0 13
56811: PUSH
56812: LD_VAR 0 17
56816: PPUSH
56817: CALL_OW 451
56821: ST_TO_ADDR
// j := GetBase ( tower ) ;
56822: LD_ADDR_VAR 0 8
56826: PUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 274
56836: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
56837: LD_VAR 0 8
56841: PPUSH
56842: LD_INT 1
56844: PPUSH
56845: CALL_OW 275
56849: PUSH
56850: LD_VAR 0 13
56854: PUSH
56855: LD_INT 1
56857: ARRAY
56858: GREATEREQUAL
56859: PUSH
56860: LD_VAR 0 8
56864: PPUSH
56865: LD_INT 2
56867: PPUSH
56868: CALL_OW 275
56872: PUSH
56873: LD_VAR 0 13
56877: PUSH
56878: LD_INT 2
56880: ARRAY
56881: GREATEREQUAL
56882: AND
56883: PUSH
56884: LD_VAR 0 8
56888: PPUSH
56889: LD_INT 3
56891: PPUSH
56892: CALL_OW 275
56896: PUSH
56897: LD_VAR 0 13
56901: PUSH
56902: LD_INT 3
56904: ARRAY
56905: GREATEREQUAL
56906: AND
56907: IFFALSE 56919
// result := weapon ;
56909: LD_ADDR_VAR 0 2
56913: PUSH
56914: LD_VAR 0 17
56918: ST_TO_ADDR
// end ; end ;
56919: LD_VAR 0 2
56923: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
56924: LD_INT 0
56926: PPUSH
56927: PPUSH
// result := true ;
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_INT 1
56935: ST_TO_ADDR
// if array1 = array2 then
56936: LD_VAR 0 1
56940: PUSH
56941: LD_VAR 0 2
56945: EQUAL
56946: IFFALSE 57006
// begin for i = 1 to array1 do
56948: LD_ADDR_VAR 0 4
56952: PUSH
56953: DOUBLE
56954: LD_INT 1
56956: DEC
56957: ST_TO_ADDR
56958: LD_VAR 0 1
56962: PUSH
56963: FOR_TO
56964: IFFALSE 57002
// if array1 [ i ] <> array2 [ i ] then
56966: LD_VAR 0 1
56970: PUSH
56971: LD_VAR 0 4
56975: ARRAY
56976: PUSH
56977: LD_VAR 0 2
56981: PUSH
56982: LD_VAR 0 4
56986: ARRAY
56987: NONEQUAL
56988: IFFALSE 57000
// begin result := false ;
56990: LD_ADDR_VAR 0 3
56994: PUSH
56995: LD_INT 0
56997: ST_TO_ADDR
// break ;
56998: GO 57002
// end ;
57000: GO 56963
57002: POP
57003: POP
// end else
57004: GO 57014
// result := false ;
57006: LD_ADDR_VAR 0 3
57010: PUSH
57011: LD_INT 0
57013: ST_TO_ADDR
// end ;
57014: LD_VAR 0 3
57018: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57019: LD_INT 0
57021: PPUSH
57022: PPUSH
57023: PPUSH
// pom := GetBase ( fac ) ;
57024: LD_ADDR_VAR 0 5
57028: PUSH
57029: LD_VAR 0 1
57033: PPUSH
57034: CALL_OW 274
57038: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57039: LD_ADDR_VAR 0 4
57043: PUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_INT 1
57051: ARRAY
57052: PPUSH
57053: LD_VAR 0 2
57057: PUSH
57058: LD_INT 2
57060: ARRAY
57061: PPUSH
57062: LD_VAR 0 2
57066: PUSH
57067: LD_INT 3
57069: ARRAY
57070: PPUSH
57071: LD_VAR 0 2
57075: PUSH
57076: LD_INT 4
57078: ARRAY
57079: PPUSH
57080: CALL_OW 449
57084: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57085: LD_ADDR_VAR 0 3
57089: PUSH
57090: LD_VAR 0 5
57094: PPUSH
57095: LD_INT 1
57097: PPUSH
57098: CALL_OW 275
57102: PUSH
57103: LD_VAR 0 4
57107: PUSH
57108: LD_INT 1
57110: ARRAY
57111: GREATEREQUAL
57112: PUSH
57113: LD_VAR 0 5
57117: PPUSH
57118: LD_INT 2
57120: PPUSH
57121: CALL_OW 275
57125: PUSH
57126: LD_VAR 0 4
57130: PUSH
57131: LD_INT 2
57133: ARRAY
57134: GREATEREQUAL
57135: AND
57136: PUSH
57137: LD_VAR 0 5
57141: PPUSH
57142: LD_INT 3
57144: PPUSH
57145: CALL_OW 275
57149: PUSH
57150: LD_VAR 0 4
57154: PUSH
57155: LD_INT 3
57157: ARRAY
57158: GREATEREQUAL
57159: AND
57160: ST_TO_ADDR
// end ;
57161: LD_VAR 0 3
57165: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
57170: PPUSH
57171: PPUSH
// pom := GetBase ( building ) ;
57172: LD_ADDR_VAR 0 3
57176: PUSH
57177: LD_VAR 0 1
57181: PPUSH
57182: CALL_OW 274
57186: ST_TO_ADDR
// if not pom then
57187: LD_VAR 0 3
57191: NOT
57192: IFFALSE 57196
// exit ;
57194: GO 57366
// btype := GetBType ( building ) ;
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_VAR 0 1
57205: PPUSH
57206: CALL_OW 266
57210: ST_TO_ADDR
// if btype = b_armoury then
57211: LD_VAR 0 5
57215: PUSH
57216: LD_INT 4
57218: EQUAL
57219: IFFALSE 57229
// btype := b_barracks ;
57221: LD_ADDR_VAR 0 5
57225: PUSH
57226: LD_INT 5
57228: ST_TO_ADDR
// if btype = b_depot then
57229: LD_VAR 0 5
57233: PUSH
57234: LD_INT 0
57236: EQUAL
57237: IFFALSE 57247
// btype := b_warehouse ;
57239: LD_ADDR_VAR 0 5
57243: PUSH
57244: LD_INT 1
57246: ST_TO_ADDR
// if btype = b_workshop then
57247: LD_VAR 0 5
57251: PUSH
57252: LD_INT 2
57254: EQUAL
57255: IFFALSE 57265
// btype := b_factory ;
57257: LD_ADDR_VAR 0 5
57261: PUSH
57262: LD_INT 3
57264: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57265: LD_ADDR_VAR 0 4
57269: PUSH
57270: LD_VAR 0 5
57274: PPUSH
57275: LD_VAR 0 1
57279: PPUSH
57280: CALL_OW 248
57284: PPUSH
57285: CALL_OW 450
57289: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57290: LD_ADDR_VAR 0 2
57294: PUSH
57295: LD_VAR 0 3
57299: PPUSH
57300: LD_INT 1
57302: PPUSH
57303: CALL_OW 275
57307: PUSH
57308: LD_VAR 0 4
57312: PUSH
57313: LD_INT 1
57315: ARRAY
57316: GREATEREQUAL
57317: PUSH
57318: LD_VAR 0 3
57322: PPUSH
57323: LD_INT 2
57325: PPUSH
57326: CALL_OW 275
57330: PUSH
57331: LD_VAR 0 4
57335: PUSH
57336: LD_INT 2
57338: ARRAY
57339: GREATEREQUAL
57340: AND
57341: PUSH
57342: LD_VAR 0 3
57346: PPUSH
57347: LD_INT 3
57349: PPUSH
57350: CALL_OW 275
57354: PUSH
57355: LD_VAR 0 4
57359: PUSH
57360: LD_INT 3
57362: ARRAY
57363: GREATEREQUAL
57364: AND
57365: ST_TO_ADDR
// end ;
57366: LD_VAR 0 2
57370: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57371: LD_INT 0
57373: PPUSH
57374: PPUSH
57375: PPUSH
// pom := GetBase ( building ) ;
57376: LD_ADDR_VAR 0 4
57380: PUSH
57381: LD_VAR 0 1
57385: PPUSH
57386: CALL_OW 274
57390: ST_TO_ADDR
// if not pom then
57391: LD_VAR 0 4
57395: NOT
57396: IFFALSE 57400
// exit ;
57398: GO 57501
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57400: LD_ADDR_VAR 0 5
57404: PUSH
57405: LD_VAR 0 2
57409: PPUSH
57410: LD_VAR 0 1
57414: PPUSH
57415: CALL_OW 248
57419: PPUSH
57420: CALL_OW 450
57424: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57425: LD_ADDR_VAR 0 3
57429: PUSH
57430: LD_VAR 0 4
57434: PPUSH
57435: LD_INT 1
57437: PPUSH
57438: CALL_OW 275
57442: PUSH
57443: LD_VAR 0 5
57447: PUSH
57448: LD_INT 1
57450: ARRAY
57451: GREATEREQUAL
57452: PUSH
57453: LD_VAR 0 4
57457: PPUSH
57458: LD_INT 2
57460: PPUSH
57461: CALL_OW 275
57465: PUSH
57466: LD_VAR 0 5
57470: PUSH
57471: LD_INT 2
57473: ARRAY
57474: GREATEREQUAL
57475: AND
57476: PUSH
57477: LD_VAR 0 4
57481: PPUSH
57482: LD_INT 3
57484: PPUSH
57485: CALL_OW 275
57489: PUSH
57490: LD_VAR 0 5
57494: PUSH
57495: LD_INT 3
57497: ARRAY
57498: GREATEREQUAL
57499: AND
57500: ST_TO_ADDR
// end ;
57501: LD_VAR 0 3
57505: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
57506: LD_INT 0
57508: PPUSH
57509: PPUSH
57510: PPUSH
57511: PPUSH
57512: PPUSH
57513: PPUSH
57514: PPUSH
57515: PPUSH
57516: PPUSH
57517: PPUSH
// result := false ;
57518: LD_ADDR_VAR 0 6
57522: PUSH
57523: LD_INT 0
57525: ST_TO_ADDR
// if not base or not btype or not x or not y then
57526: LD_VAR 0 1
57530: NOT
57531: PUSH
57532: LD_VAR 0 2
57536: NOT
57537: OR
57538: PUSH
57539: LD_VAR 0 3
57543: NOT
57544: OR
57545: PUSH
57546: LD_VAR 0 4
57550: NOT
57551: OR
57552: IFFALSE 57556
// exit ;
57554: GO 58070
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
57556: LD_ADDR_VAR 0 12
57560: PUSH
57561: LD_VAR 0 2
57565: PPUSH
57566: LD_VAR 0 3
57570: PPUSH
57571: LD_VAR 0 4
57575: PPUSH
57576: LD_VAR 0 5
57580: PPUSH
57581: LD_VAR 0 1
57585: PUSH
57586: LD_INT 1
57588: ARRAY
57589: PPUSH
57590: CALL_OW 248
57594: PPUSH
57595: LD_INT 0
57597: PPUSH
57598: CALL 58899 0 6
57602: ST_TO_ADDR
// if not hexes then
57603: LD_VAR 0 12
57607: NOT
57608: IFFALSE 57612
// exit ;
57610: GO 58070
// for i = 1 to hexes do
57612: LD_ADDR_VAR 0 7
57616: PUSH
57617: DOUBLE
57618: LD_INT 1
57620: DEC
57621: ST_TO_ADDR
57622: LD_VAR 0 12
57626: PUSH
57627: FOR_TO
57628: IFFALSE 58068
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57630: LD_ADDR_VAR 0 11
57634: PUSH
57635: LD_VAR 0 12
57639: PUSH
57640: LD_VAR 0 7
57644: ARRAY
57645: PUSH
57646: LD_INT 1
57648: ARRAY
57649: PPUSH
57650: LD_VAR 0 12
57654: PUSH
57655: LD_VAR 0 7
57659: ARRAY
57660: PUSH
57661: LD_INT 2
57663: ARRAY
57664: PPUSH
57665: CALL_OW 428
57669: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
57670: LD_VAR 0 11
57674: NOT
57675: PUSH
57676: LD_VAR 0 11
57680: PPUSH
57681: CALL_OW 247
57685: PUSH
57686: LD_INT 3
57688: EQUAL
57689: OR
57690: IFFALSE 57694
// continue ;
57692: GO 57627
// result := true ;
57694: LD_ADDR_VAR 0 6
57698: PUSH
57699: LD_INT 1
57701: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57702: LD_ADDR_VAR 0 15
57706: PUSH
57707: LD_INT 22
57709: PUSH
57710: LD_VAR 0 11
57714: PPUSH
57715: CALL_OW 255
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 2
57726: PUSH
57727: LD_INT 30
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 30
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: LIST
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PPUSH
57756: CALL_OW 69
57760: ST_TO_ADDR
// if dep then
57761: LD_VAR 0 15
57765: IFFALSE 57901
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
57767: LD_ADDR_VAR 0 14
57771: PUSH
57772: LD_VAR 0 15
57776: PUSH
57777: LD_INT 1
57779: ARRAY
57780: PPUSH
57781: CALL_OW 250
57785: PPUSH
57786: LD_VAR 0 15
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PPUSH
57795: CALL_OW 254
57799: PPUSH
57800: LD_INT 5
57802: PPUSH
57803: CALL_OW 272
57807: PUSH
57808: LD_VAR 0 15
57812: PUSH
57813: LD_INT 1
57815: ARRAY
57816: PPUSH
57817: CALL_OW 251
57821: PPUSH
57822: LD_VAR 0 15
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PPUSH
57831: CALL_OW 254
57835: PPUSH
57836: LD_INT 5
57838: PPUSH
57839: CALL_OW 273
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
57848: LD_VAR 0 14
57852: PUSH
57853: LD_INT 1
57855: ARRAY
57856: PPUSH
57857: LD_VAR 0 14
57861: PUSH
57862: LD_INT 2
57864: ARRAY
57865: PPUSH
57866: CALL_OW 488
57870: IFFALSE 57901
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
57872: LD_VAR 0 11
57876: PPUSH
57877: LD_VAR 0 14
57881: PUSH
57882: LD_INT 1
57884: ARRAY
57885: PPUSH
57886: LD_VAR 0 14
57890: PUSH
57891: LD_INT 2
57893: ARRAY
57894: PPUSH
57895: CALL_OW 111
// continue ;
57899: GO 57627
// end ; end ; r := GetDir ( tmp ) ;
57901: LD_ADDR_VAR 0 13
57905: PUSH
57906: LD_VAR 0 11
57910: PPUSH
57911: CALL_OW 254
57915: ST_TO_ADDR
// if r = 5 then
57916: LD_VAR 0 13
57920: PUSH
57921: LD_INT 5
57923: EQUAL
57924: IFFALSE 57934
// r := 0 ;
57926: LD_ADDR_VAR 0 13
57930: PUSH
57931: LD_INT 0
57933: ST_TO_ADDR
// for j = r to 5 do
57934: LD_ADDR_VAR 0 8
57938: PUSH
57939: DOUBLE
57940: LD_VAR 0 13
57944: DEC
57945: ST_TO_ADDR
57946: LD_INT 5
57948: PUSH
57949: FOR_TO
57950: IFFALSE 58064
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
57952: LD_ADDR_VAR 0 9
57956: PUSH
57957: LD_VAR 0 11
57961: PPUSH
57962: CALL_OW 250
57966: PPUSH
57967: LD_VAR 0 8
57971: PPUSH
57972: LD_INT 2
57974: PPUSH
57975: CALL_OW 272
57979: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
57980: LD_ADDR_VAR 0 10
57984: PUSH
57985: LD_VAR 0 11
57989: PPUSH
57990: CALL_OW 251
57994: PPUSH
57995: LD_VAR 0 8
57999: PPUSH
58000: LD_INT 2
58002: PPUSH
58003: CALL_OW 273
58007: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58008: LD_VAR 0 9
58012: PPUSH
58013: LD_VAR 0 10
58017: PPUSH
58018: CALL_OW 488
58022: PUSH
58023: LD_VAR 0 9
58027: PPUSH
58028: LD_VAR 0 10
58032: PPUSH
58033: CALL_OW 428
58037: NOT
58038: AND
58039: IFFALSE 58062
// begin ComMoveXY ( tmp , _x , _y ) ;
58041: LD_VAR 0 11
58045: PPUSH
58046: LD_VAR 0 9
58050: PPUSH
58051: LD_VAR 0 10
58055: PPUSH
58056: CALL_OW 111
// break ;
58060: GO 58064
// end ; end ;
58062: GO 57949
58064: POP
58065: POP
// end ;
58066: GO 57627
58068: POP
58069: POP
// end ;
58070: LD_VAR 0 6
58074: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
58075: LD_INT 0
58077: PPUSH
58078: PPUSH
58079: PPUSH
58080: PPUSH
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
58085: PPUSH
// result := false ;
58086: LD_ADDR_VAR 0 6
58090: PUSH
58091: LD_INT 0
58093: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58094: LD_VAR 0 1
58098: NOT
58099: PUSH
58100: LD_VAR 0 1
58104: PPUSH
58105: CALL_OW 266
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: LD_INT 1
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: IN
58120: NOT
58121: OR
58122: PUSH
58123: LD_VAR 0 2
58127: NOT
58128: OR
58129: PUSH
58130: LD_VAR 0 5
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: IN
58161: NOT
58162: OR
58163: PUSH
58164: LD_VAR 0 3
58168: PPUSH
58169: LD_VAR 0 4
58173: PPUSH
58174: CALL_OW 488
58178: NOT
58179: OR
58180: IFFALSE 58184
// exit ;
58182: GO 58894
// pom := GetBase ( bdepot ) ;
58184: LD_ADDR_VAR 0 9
58188: PUSH
58189: LD_VAR 0 1
58193: PPUSH
58194: CALL_OW 274
58198: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
58199: LD_ADDR_VAR 0 10
58203: PUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: LD_VAR 0 1
58213: PPUSH
58214: CALL_OW 248
58218: PPUSH
58219: CALL_OW 450
58223: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58224: LD_VAR 0 9
58228: PPUSH
58229: LD_INT 1
58231: PPUSH
58232: CALL_OW 275
58236: PUSH
58237: LD_VAR 0 10
58241: PUSH
58242: LD_INT 1
58244: ARRAY
58245: GREATEREQUAL
58246: PUSH
58247: LD_VAR 0 9
58251: PPUSH
58252: LD_INT 2
58254: PPUSH
58255: CALL_OW 275
58259: PUSH
58260: LD_VAR 0 10
58264: PUSH
58265: LD_INT 2
58267: ARRAY
58268: GREATEREQUAL
58269: AND
58270: PUSH
58271: LD_VAR 0 9
58275: PPUSH
58276: LD_INT 3
58278: PPUSH
58279: CALL_OW 275
58283: PUSH
58284: LD_VAR 0 10
58288: PUSH
58289: LD_INT 3
58291: ARRAY
58292: GREATEREQUAL
58293: AND
58294: NOT
58295: IFFALSE 58299
// exit ;
58297: GO 58894
// if GetBType ( bdepot ) = b_depot then
58299: LD_VAR 0 1
58303: PPUSH
58304: CALL_OW 266
58308: PUSH
58309: LD_INT 0
58311: EQUAL
58312: IFFALSE 58324
// dist := 28 else
58314: LD_ADDR_VAR 0 13
58318: PUSH
58319: LD_INT 28
58321: ST_TO_ADDR
58322: GO 58332
// dist := 36 ;
58324: LD_ADDR_VAR 0 13
58328: PUSH
58329: LD_INT 36
58331: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
58332: LD_VAR 0 1
58336: PPUSH
58337: LD_VAR 0 3
58341: PPUSH
58342: LD_VAR 0 4
58346: PPUSH
58347: CALL_OW 297
58351: PUSH
58352: LD_VAR 0 13
58356: GREATER
58357: IFFALSE 58361
// exit ;
58359: GO 58894
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
58361: LD_ADDR_VAR 0 11
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: LD_VAR 0 3
58375: PPUSH
58376: LD_VAR 0 4
58380: PPUSH
58381: LD_VAR 0 5
58385: PPUSH
58386: LD_VAR 0 1
58390: PPUSH
58391: CALL_OW 248
58395: PPUSH
58396: LD_INT 0
58398: PPUSH
58399: CALL 58899 0 6
58403: ST_TO_ADDR
// if not hexes then
58404: LD_VAR 0 11
58408: NOT
58409: IFFALSE 58413
// exit ;
58411: GO 58894
// hex := GetHexInfo ( x , y ) ;
58413: LD_ADDR_VAR 0 14
58417: PUSH
58418: LD_VAR 0 3
58422: PPUSH
58423: LD_VAR 0 4
58427: PPUSH
58428: CALL_OW 546
58432: ST_TO_ADDR
// if hex [ 1 ] then
58433: LD_VAR 0 14
58437: PUSH
58438: LD_INT 1
58440: ARRAY
58441: IFFALSE 58445
// exit ;
58443: GO 58894
// height := hex [ 2 ] ;
58445: LD_ADDR_VAR 0 12
58449: PUSH
58450: LD_VAR 0 14
58454: PUSH
58455: LD_INT 2
58457: ARRAY
58458: ST_TO_ADDR
// for i = 1 to hexes do
58459: LD_ADDR_VAR 0 7
58463: PUSH
58464: DOUBLE
58465: LD_INT 1
58467: DEC
58468: ST_TO_ADDR
58469: LD_VAR 0 11
58473: PUSH
58474: FOR_TO
58475: IFFALSE 58803
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58477: LD_VAR 0 11
58481: PUSH
58482: LD_VAR 0 7
58486: ARRAY
58487: PUSH
58488: LD_INT 1
58490: ARRAY
58491: PPUSH
58492: LD_VAR 0 11
58496: PUSH
58497: LD_VAR 0 7
58501: ARRAY
58502: PUSH
58503: LD_INT 2
58505: ARRAY
58506: PPUSH
58507: CALL_OW 488
58511: NOT
58512: IFFALSE 58516
// continue ;
58514: GO 58474
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58516: LD_ADDR_VAR 0 8
58520: PUSH
58521: LD_VAR 0 11
58525: PUSH
58526: LD_VAR 0 7
58530: ARRAY
58531: PUSH
58532: LD_INT 1
58534: ARRAY
58535: PPUSH
58536: LD_VAR 0 11
58540: PUSH
58541: LD_VAR 0 7
58545: ARRAY
58546: PUSH
58547: LD_INT 2
58549: ARRAY
58550: PPUSH
58551: CALL_OW 546
58555: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58556: LD_VAR 0 8
58560: PUSH
58561: LD_INT 1
58563: ARRAY
58564: PUSH
58565: LD_VAR 0 8
58569: PUSH
58570: LD_INT 2
58572: ARRAY
58573: PUSH
58574: LD_VAR 0 12
58578: PUSH
58579: LD_INT 2
58581: PLUS
58582: GREATER
58583: OR
58584: PUSH
58585: LD_VAR 0 8
58589: PUSH
58590: LD_INT 2
58592: ARRAY
58593: PUSH
58594: LD_VAR 0 12
58598: PUSH
58599: LD_INT 2
58601: MINUS
58602: LESS
58603: OR
58604: PUSH
58605: LD_VAR 0 8
58609: PUSH
58610: LD_INT 3
58612: ARRAY
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: LD_INT 8
58619: PUSH
58620: LD_INT 9
58622: PUSH
58623: LD_INT 10
58625: PUSH
58626: LD_INT 11
58628: PUSH
58629: LD_INT 12
58631: PUSH
58632: LD_INT 13
58634: PUSH
58635: LD_INT 16
58637: PUSH
58638: LD_INT 17
58640: PUSH
58641: LD_INT 18
58643: PUSH
58644: LD_INT 19
58646: PUSH
58647: LD_INT 20
58649: PUSH
58650: LD_INT 21
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: IN
58668: NOT
58669: OR
58670: PUSH
58671: LD_VAR 0 8
58675: PUSH
58676: LD_INT 5
58678: ARRAY
58679: NOT
58680: OR
58681: PUSH
58682: LD_VAR 0 8
58686: PUSH
58687: LD_INT 6
58689: ARRAY
58690: PUSH
58691: LD_INT 1
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 7
58699: PUSH
58700: LD_INT 9
58702: PUSH
58703: LD_INT 10
58705: PUSH
58706: LD_INT 11
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: IN
58717: NOT
58718: OR
58719: PUSH
58720: LD_VAR 0 11
58724: PUSH
58725: LD_VAR 0 7
58729: ARRAY
58730: PUSH
58731: LD_INT 1
58733: ARRAY
58734: PPUSH
58735: LD_VAR 0 11
58739: PUSH
58740: LD_VAR 0 7
58744: ARRAY
58745: PUSH
58746: LD_INT 2
58748: ARRAY
58749: PPUSH
58750: CALL_OW 428
58754: PUSH
58755: LD_INT 0
58757: GREATER
58758: OR
58759: PUSH
58760: LD_VAR 0 11
58764: PUSH
58765: LD_VAR 0 7
58769: ARRAY
58770: PUSH
58771: LD_INT 1
58773: ARRAY
58774: PPUSH
58775: LD_VAR 0 11
58779: PUSH
58780: LD_VAR 0 7
58784: ARRAY
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: PPUSH
58790: CALL_OW 351
58794: OR
58795: IFFALSE 58801
// exit ;
58797: POP
58798: POP
58799: GO 58894
// end ;
58801: GO 58474
58803: POP
58804: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
58805: LD_VAR 0 1
58809: PPUSH
58810: CALL_OW 255
58814: PPUSH
58815: LD_VAR 0 3
58819: PPUSH
58820: LD_VAR 0 4
58824: PPUSH
58825: LD_INT 20
58827: PPUSH
58828: CALL 51781 0 4
58832: PUSH
58833: LD_INT 4
58835: ARRAY
58836: IFFALSE 58840
// exit ;
58838: GO 58894
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
58840: LD_VAR 0 2
58844: PUSH
58845: LD_INT 29
58847: PUSH
58848: LD_INT 30
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: IN
58855: PUSH
58856: LD_VAR 0 3
58860: PPUSH
58861: LD_VAR 0 4
58865: PPUSH
58866: LD_VAR 0 1
58870: PPUSH
58871: CALL_OW 255
58875: PPUSH
58876: CALL_OW 440
58880: NOT
58881: AND
58882: IFFALSE 58886
// exit ;
58884: GO 58894
// result := true ;
58886: LD_ADDR_VAR 0 6
58890: PUSH
58891: LD_INT 1
58893: ST_TO_ADDR
// end ;
58894: LD_VAR 0 6
58898: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
58899: LD_INT 0
58901: PPUSH
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
58907: PPUSH
58908: PPUSH
58909: PPUSH
58910: PPUSH
58911: PPUSH
58912: PPUSH
58913: PPUSH
58914: PPUSH
58915: PPUSH
58916: PPUSH
58917: PPUSH
58918: PPUSH
58919: PPUSH
58920: PPUSH
58921: PPUSH
58922: PPUSH
58923: PPUSH
58924: PPUSH
58925: PPUSH
58926: PPUSH
58927: PPUSH
58928: PPUSH
58929: PPUSH
58930: PPUSH
58931: PPUSH
58932: PPUSH
58933: PPUSH
58934: PPUSH
58935: PPUSH
58936: PPUSH
58937: PPUSH
58938: PPUSH
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
58943: PPUSH
58944: PPUSH
58945: PPUSH
58946: PPUSH
58947: PPUSH
58948: PPUSH
58949: PPUSH
58950: PPUSH
58951: PPUSH
58952: PPUSH
58953: PPUSH
58954: PPUSH
58955: PPUSH
58956: PPUSH
58957: PPUSH
58958: PPUSH
// result = [ ] ;
58959: LD_ADDR_VAR 0 7
58963: PUSH
58964: EMPTY
58965: ST_TO_ADDR
// temp_list = [ ] ;
58966: LD_ADDR_VAR 0 9
58970: PUSH
58971: EMPTY
58972: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
58973: LD_VAR 0 4
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: LD_INT 4
58992: PUSH
58993: LD_INT 5
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: IN
59004: NOT
59005: PUSH
59006: LD_VAR 0 1
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: IN
59021: PUSH
59022: LD_VAR 0 5
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: LIST
59040: IN
59041: NOT
59042: AND
59043: OR
59044: IFFALSE 59048
// exit ;
59046: GO 77433
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59048: LD_VAR 0 1
59052: PUSH
59053: LD_INT 6
59055: PUSH
59056: LD_INT 7
59058: PUSH
59059: LD_INT 8
59061: PUSH
59062: LD_INT 13
59064: PUSH
59065: LD_INT 12
59067: PUSH
59068: LD_INT 15
59070: PUSH
59071: LD_INT 11
59073: PUSH
59074: LD_INT 14
59076: PUSH
59077: LD_INT 10
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: IN
59091: IFFALSE 59101
// btype = b_lab ;
59093: LD_ADDR_VAR 0 1
59097: PUSH
59098: LD_INT 6
59100: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59101: LD_VAR 0 6
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: IN
59120: NOT
59121: PUSH
59122: LD_VAR 0 1
59126: PUSH
59127: LD_INT 0
59129: PUSH
59130: LD_INT 1
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: LD_INT 3
59138: PUSH
59139: LD_INT 6
59141: PUSH
59142: LD_INT 36
59144: PUSH
59145: LD_INT 4
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: LD_INT 31
59153: PUSH
59154: LD_INT 32
59156: PUSH
59157: LD_INT 33
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: IN
59173: NOT
59174: PUSH
59175: LD_VAR 0 6
59179: PUSH
59180: LD_INT 1
59182: EQUAL
59183: AND
59184: OR
59185: PUSH
59186: LD_VAR 0 1
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: IN
59201: NOT
59202: PUSH
59203: LD_VAR 0 6
59207: PUSH
59208: LD_INT 2
59210: EQUAL
59211: AND
59212: OR
59213: IFFALSE 59223
// mode = 0 ;
59215: LD_ADDR_VAR 0 6
59219: PUSH
59220: LD_INT 0
59222: ST_TO_ADDR
// case mode of 0 :
59223: LD_VAR 0 6
59227: PUSH
59228: LD_INT 0
59230: DOUBLE
59231: EQUAL
59232: IFTRUE 59236
59234: GO 70689
59236: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59237: LD_ADDR_VAR 0 11
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 1
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 0
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: NEG
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: NEG
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 2
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: LD_INT 3
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: LD_INT 3
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 1
59403: NEG
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59430: LD_ADDR_VAR 0 12
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: NEG
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 2
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59626: LD_ADDR_VAR 0 13
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: PUSH
59730: LD_INT 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 2
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: NEG
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 3
59797: NEG
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59825: LD_ADDR_VAR 0 14
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 1
59845: NEG
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 1
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 0
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 1
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: LD_INT 2
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: LD_INT 2
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: LD_INT 1
59960: NEG
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: LD_INT 3
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 3
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: LD_INT 2
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60021: LD_ADDR_VAR 0 15
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 1
60102: PUSH
60103: LD_INT 1
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60214: LD_ADDR_VAR 0 16
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 0
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 0
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: LD_INT 0
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: LD_INT 1
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 2
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 2
60337: NEG
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 2
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: LD_INT 3
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60407: LD_ADDR_VAR 0 17
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: NEG
60489: PUSH
60490: LD_INT 2
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 2
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 1
60514: NEG
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 2
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 2
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: LD_INT 2
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60637: LD_ADDR_VAR 0 18
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 0
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: LD_INT 1
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: LD_INT 1
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: LD_INT 2
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 2
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 0
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 2
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: LD_INT 2
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: LD_INT 2
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60867: LD_ADDR_VAR 0 19
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 2
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 1
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 0
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 2
61043: NEG
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 2
61054: NEG
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: NEG
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61097: LD_ADDR_VAR 0 20
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 1
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 0
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: NEG
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 2
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 0
61190: PUSH
61191: LD_INT 2
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 2
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: NEG
61274: PUSH
61275: LD_INT 0
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 2
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61327: LD_ADDR_VAR 0 21
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 1
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 1
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 2
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 2
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 2
61462: PUSH
61463: LD_INT 2
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: LD_INT 2
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 2
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: NEG
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: LD_INT 2
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61557: LD_ADDR_VAR 0 22
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 0
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 0
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: NEG
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 0
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 0
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 2
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 2
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 2
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: NEG
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 2
61733: NEG
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 2
61744: NEG
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61787: LD_ADDR_VAR 0 23
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 0
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 1
61856: NEG
61857: PUSH
61858: LD_INT 1
61860: NEG
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 1
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 2
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 2
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: NEG
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 2
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: NEG
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 2
61986: NEG
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 3
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: LD_INT 2
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: LD_INT 1
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62067: LD_ADDR_VAR 0 24
62071: PUSH
62072: LD_INT 0
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 0
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: PUSH
62134: LD_INT 1
62136: NEG
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 2
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 0
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 2
62182: PUSH
62183: LD_INT 0
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 2
62243: NEG
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: LD_INT 1
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: LD_INT 2
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62343: LD_ADDR_VAR 0 25
62347: PUSH
62348: LD_INT 0
62350: PUSH
62351: LD_INT 0
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 1
62363: NEG
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 1
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: NEG
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 2
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 2
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 2
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 2
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: LD_INT 2
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 2
62574: PUSH
62575: LD_INT 3
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 1
62584: PUSH
62585: LD_INT 3
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62617: LD_ADDR_VAR 0 26
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: LD_INT 1
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 1
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 1
62686: NEG
62687: PUSH
62688: LD_INT 1
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 2
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: LD_INT 2
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 1
62782: NEG
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 2
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 2
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 2
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62893: LD_ADDR_VAR 0 27
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 0
62910: PUSH
62911: LD_INT 1
62913: NEG
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 0
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 1
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 1
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: NEG
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: LD_INT 2
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 1
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: PUSH
63019: LD_INT 1
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 1
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 0
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: NEG
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 2
63069: NEG
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 2
63080: NEG
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 2
63092: NEG
63093: PUSH
63094: LD_INT 2
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: NEG
63139: PUSH
63140: LD_INT 2
63142: NEG
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63173: LD_ADDR_VAR 0 28
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 1
63193: NEG
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 1
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 1
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 1
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 2
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 1
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: NEG
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 2
63372: NEG
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: NEG
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: NEG
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 3
63420: NEG
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63455: LD_ADDR_VAR 0 29
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 0
63472: PUSH
63473: LD_INT 1
63475: NEG
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: LD_INT 1
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 1
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 1
63536: NEG
63537: PUSH
63538: LD_INT 2
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 0
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 2
63621: NEG
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 2
63633: NEG
63634: PUSH
63635: LD_INT 2
63637: NEG
63638: PUSH
63639: EMPTY
63640: LIST
63641: LIST
63642: PUSH
63643: LD_INT 2
63645: NEG
63646: PUSH
63647: LD_INT 3
63649: NEG
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 2
63657: PUSH
63658: LD_INT 1
63660: NEG
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: LD_INT 3
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 2
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 3
63699: NEG
63700: PUSH
63701: LD_INT 2
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63734: LD_ADDR_VAR 0 30
63738: PUSH
63739: LD_INT 0
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: LD_INT 1
63754: NEG
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 1
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: LD_INT 1
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 1
63792: NEG
63793: PUSH
63794: LD_INT 0
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: LD_INT 1
63807: NEG
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 2
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 2
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 1
63879: PUSH
63880: LD_INT 2
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: LD_INT 1
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 2
63900: NEG
63901: PUSH
63902: LD_INT 0
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 1
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: LD_INT 3
63927: NEG
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 1
63935: PUSH
63936: LD_INT 2
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 3
63946: PUSH
63947: LD_INT 2
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: PUSH
63957: LD_INT 3
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: NEG
63967: PUSH
63968: LD_INT 1
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64012: LD_ADDR_VAR 0 31
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 1
64032: NEG
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: LD_INT 0
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: NEG
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 1
64081: NEG
64082: PUSH
64083: LD_INT 1
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: LD_INT 2
64097: NEG
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 1
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 2
64116: PUSH
64117: LD_INT 0
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: PUSH
64147: LD_INT 2
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 1
64166: NEG
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 2
64177: NEG
64178: PUSH
64179: LD_INT 1
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 2
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 2
64201: NEG
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 2
64213: PUSH
64214: LD_INT 1
64216: NEG
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 3
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: LD_INT 3
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 2
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 3
64255: NEG
64256: PUSH
64257: LD_INT 2
64259: NEG
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64290: LD_ADDR_VAR 0 32
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 0
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: NEG
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: LD_INT 2
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: LD_INT 1
64397: NEG
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: PUSH
64416: LD_INT 2
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 2
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 0
64435: PUSH
64436: LD_INT 2
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: NEG
64457: PUSH
64458: LD_INT 0
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: LD_INT 3
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 2
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 3
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: LD_INT 3
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 2
64522: NEG
64523: PUSH
64524: LD_INT 1
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 3
64533: NEG
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64568: LD_ADDR_VAR 0 33
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 1
64588: NEG
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: LD_INT 1
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: LD_INT 1
64641: NEG
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 1
64649: NEG
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 0
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 2
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 2
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 2
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 2
64758: NEG
64759: PUSH
64760: LD_INT 3
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 2
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 3
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 3
64812: NEG
64813: PUSH
64814: LD_INT 2
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64847: LD_ADDR_VAR 0 34
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: PUSH
64883: LD_INT 1
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 1
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 2
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: PUSH
64952: LD_INT 1
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: LD_INT 2
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 1
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 2
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 2
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: LD_INT 3
65042: NEG
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 3
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 2
65081: NEG
65082: PUSH
65083: LD_INT 1
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 3
65092: NEG
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65127: LD_ADDR_VAR 0 35
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 0
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 1
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 0
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 1
65196: NEG
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: PUSH
65209: LD_INT 1
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 2
65218: NEG
65219: PUSH
65220: LD_INT 1
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65239: LD_ADDR_VAR 0 36
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65351: LD_ADDR_VAR 0 37
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 0
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 0
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 1
65409: NEG
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: LD_INT 1
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65463: LD_ADDR_VAR 0 38
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 0
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 0
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 1
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 2
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65575: LD_ADDR_VAR 0 39
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 0
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 1
65656: NEG
65657: PUSH
65658: LD_INT 2
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 1
65668: PUSH
65669: LD_INT 2
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65687: LD_ADDR_VAR 0 40
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 1
65707: NEG
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 0
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 1
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 0
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 1
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 1
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65799: LD_ADDR_VAR 0 41
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 1
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: LD_INT 1
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: LD_INT 1
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 2
65903: PUSH
65904: LD_INT 0
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 2
65913: PUSH
65914: LD_INT 1
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 2
65923: PUSH
65924: LD_INT 2
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: LD_INT 2
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 2
65954: NEG
65955: PUSH
65956: LD_INT 0
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 2
65965: NEG
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: LD_INT 2
65981: NEG
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: LD_INT 3
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 3
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 3
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 3
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 2
66062: NEG
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 3
66073: NEG
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 3
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: NEG
66109: PUSH
66110: LD_INT 3
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66149: LD_ADDR_VAR 0 42
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: LD_INT 0
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 1
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 1
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 0
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 1
66218: NEG
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 1
66230: NEG
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 0
66242: PUSH
66243: LD_INT 2
66245: NEG
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PUSH
66251: LD_INT 1
66253: PUSH
66254: LD_INT 1
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 2
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: LD_INT 2
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: LD_INT 2
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: NEG
66305: PUSH
66306: LD_INT 1
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: NEG
66316: PUSH
66317: LD_INT 1
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 2
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: LD_INT 3
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 0
66363: PUSH
66364: LD_INT 3
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 3
66385: PUSH
66386: LD_INT 2
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 2
66405: PUSH
66406: LD_INT 3
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 1
66415: PUSH
66416: LD_INT 3
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 0
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: NEG
66436: PUSH
66437: LD_INT 2
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 3
66446: NEG
66447: PUSH
66448: LD_INT 2
66450: NEG
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 3
66458: NEG
66459: PUSH
66460: LD_INT 3
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: LIST
66477: LIST
66478: LIST
66479: LIST
66480: LIST
66481: LIST
66482: LIST
66483: LIST
66484: LIST
66485: LIST
66486: LIST
66487: LIST
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: LIST
66494: LIST
66495: LIST
66496: LIST
66497: LIST
66498: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66499: LD_ADDR_VAR 0 43
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 0
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: LD_INT 0
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 1
66568: NEG
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 2
66595: NEG
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 1
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 2
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 2
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 2
66665: NEG
66666: PUSH
66667: LD_INT 0
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: LD_INT 1
66680: NEG
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 1
66688: NEG
66689: PUSH
66690: LD_INT 3
66692: NEG
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 2
66714: NEG
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 2
66722: PUSH
66723: LD_INT 1
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 3
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 3
66743: PUSH
66744: LD_INT 1
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: LD_INT 3
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: LD_INT 3
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 2
66784: NEG
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: NEG
66796: PUSH
66797: LD_INT 0
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66847: LD_ADDR_VAR 0 44
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: LD_INT 0
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 1
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 0
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: NEG
66917: PUSH
66918: LD_INT 1
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: NEG
66929: PUSH
66930: LD_INT 2
66932: NEG
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: LD_INT 1
66943: NEG
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: PUSH
66952: LD_INT 0
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 2
66961: PUSH
66962: LD_INT 1
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 2
67002: NEG
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 2
67013: NEG
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: NEG
67026: PUSH
67027: LD_INT 2
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 2
67037: NEG
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 2
67049: PUSH
67050: LD_INT 1
67052: NEG
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: PUSH
67061: LD_INT 0
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 3
67070: PUSH
67071: LD_INT 1
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 3
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 3
67090: PUSH
67091: LD_INT 3
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: PUSH
67101: LD_INT 3
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 3
67121: NEG
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 3
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: NEG
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67197: LD_ADDR_VAR 0 45
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 1
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: LD_INT 2
67282: NEG
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: LD_INT 2
67293: NEG
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: LD_INT 1
67367: NEG
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 2
67375: NEG
67376: PUSH
67377: LD_INT 2
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: NEG
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 3
67403: NEG
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 0
67411: PUSH
67412: LD_INT 3
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: PUSH
67423: LD_INT 2
67425: NEG
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 1
67463: PUSH
67464: LD_INT 3
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: LD_INT 2
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: LD_INT 2
67498: NEG
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: PUSH
67504: LD_INT 3
67506: NEG
67507: PUSH
67508: LD_INT 3
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: LIST
67520: LIST
67521: LIST
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: LIST
67527: LIST
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67547: LD_ADDR_VAR 0 46
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: LD_INT 1
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 1
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 1
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 1
67605: NEG
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 2
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 2
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 1
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: LD_INT 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 0
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: NEG
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 2
67713: NEG
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 3
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 1
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: LD_INT 3
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 1
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 1
67821: NEG
67822: PUSH
67823: LD_INT 2
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 2
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 3
67843: NEG
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 3
67854: NEG
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67895: LD_ADDR_VAR 0 47
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 0
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: LD_INT 0
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: LD_INT 1
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 1
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 1
67976: NEG
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 2
67991: NEG
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 1
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 2
68010: NEG
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: NEG
68023: PUSH
68024: LD_INT 2
68026: NEG
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68046: LD_ADDR_VAR 0 48
68050: PUSH
68051: LD_INT 0
68053: PUSH
68054: LD_INT 0
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 1
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 0
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: PUSH
68085: LD_INT 1
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 1
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: LD_INT 1
68119: NEG
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 1
68127: NEG
68128: PUSH
68129: LD_INT 2
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: LD_INT 2
68142: NEG
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 2
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 2
68171: PUSH
68172: LD_INT 1
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68193: LD_ADDR_VAR 0 49
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 1
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: PUSH
68275: LD_INT 1
68277: NEG
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 2
68285: PUSH
68286: LD_INT 0
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 2
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68337: LD_ADDR_VAR 0 50
68341: PUSH
68342: LD_INT 0
68344: PUSH
68345: LD_INT 0
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 0
68354: PUSH
68355: LD_INT 1
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: LD_INT 1
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 0
68385: PUSH
68386: LD_INT 1
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 1
68395: NEG
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 2
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68481: LD_ADDR_VAR 0 51
68485: PUSH
68486: LD_INT 0
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: PUSH
68510: LD_INT 0
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: LD_INT 1
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: LD_INT 1
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: LD_INT 0
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 1
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: LD_INT 0
68572: PUSH
68573: LD_INT 2
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 1
68582: NEG
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 2
68593: NEG
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68628: LD_ADDR_VAR 0 52
68632: PUSH
68633: LD_INT 0
68635: PUSH
68636: LD_INT 0
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 0
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: PUSH
68657: LD_INT 0
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 1
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: EMPTY
68704: LIST
68705: LIST
68706: PUSH
68707: LD_INT 1
68709: NEG
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: EMPTY
68716: LIST
68717: LIST
68718: PUSH
68719: LD_INT 1
68721: NEG
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 2
68732: NEG
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: LD_INT 1
68747: NEG
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 2
68755: NEG
68756: PUSH
68757: LD_INT 2
68759: NEG
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68779: LD_ADDR_VAR 0 53
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: LD_INT 0
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: LD_INT 1
68799: NEG
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 1
68807: PUSH
68808: LD_INT 0
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: LD_INT 1
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 1
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: PUSH
68835: LD_INT 1
68837: NEG
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: LD_INT 1
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 1
68860: NEG
68861: PUSH
68862: LD_INT 2
68864: NEG
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 0
68872: PUSH
68873: LD_INT 2
68875: NEG
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 1
68883: PUSH
68884: LD_INT 1
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 2
68894: PUSH
68895: LD_INT 0
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 2
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 2
68914: PUSH
68915: LD_INT 2
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: LD_INT 2
68927: PUSH
68928: EMPTY
68929: LIST
68930: LIST
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 2
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: NEG
68945: PUSH
68946: LD_INT 1
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 2
68955: NEG
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 2
68966: NEG
68967: PUSH
68968: LD_INT 1
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: NEG
68979: PUSH
68980: LD_INT 2
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69009: LD_ADDR_VAR 0 54
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 0
69026: PUSH
69027: LD_INT 1
69029: NEG
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 1
69037: PUSH
69038: LD_INT 0
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 1
69047: PUSH
69048: LD_INT 1
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: LD_INT 1
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 1
69067: NEG
69068: PUSH
69069: LD_INT 0
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: LD_INT 1
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: PUSH
69092: LD_INT 2
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 0
69102: PUSH
69103: LD_INT 2
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 1
69113: PUSH
69114: LD_INT 1
69116: NEG
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: PUSH
69132: LD_INT 2
69134: PUSH
69135: LD_INT 1
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 2
69144: PUSH
69145: LD_INT 2
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: LD_INT 2
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 1
69174: NEG
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: PUSH
69183: LD_INT 2
69185: NEG
69186: PUSH
69187: LD_INT 0
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: LD_INT 1
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 2
69208: NEG
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69239: LD_ADDR_VAR 0 55
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 1
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 1
69297: NEG
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 1
69308: NEG
69309: PUSH
69310: LD_INT 1
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 1
69320: NEG
69321: PUSH
69322: LD_INT 2
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 2
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 1
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 2
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 2
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: LD_INT 2
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: LD_INT 2
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 1
69404: NEG
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: NEG
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: NEG
69439: PUSH
69440: LD_INT 2
69442: NEG
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69469: LD_ADDR_VAR 0 56
69473: PUSH
69474: LD_INT 0
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 0
69486: PUSH
69487: LD_INT 1
69489: NEG
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: PUSH
69495: LD_INT 1
69497: PUSH
69498: LD_INT 0
69500: PUSH
69501: EMPTY
69502: LIST
69503: LIST
69504: PUSH
69505: LD_INT 1
69507: PUSH
69508: LD_INT 1
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: LD_INT 0
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: LD_INT 0
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: LD_INT 1
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 1
69550: NEG
69551: PUSH
69552: LD_INT 2
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 0
69562: PUSH
69563: LD_INT 2
69565: NEG
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: PUSH
69595: LD_INT 1
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: PUSH
69602: LD_INT 2
69604: PUSH
69605: LD_INT 2
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: EMPTY
69619: LIST
69620: LIST
69621: PUSH
69622: LD_INT 0
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: LD_INT 0
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 2
69656: NEG
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 2
69668: NEG
69669: PUSH
69670: LD_INT 2
69672: NEG
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: LIST
69695: LIST
69696: LIST
69697: LIST
69698: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69699: LD_ADDR_VAR 0 57
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: LD_INT 1
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 1
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: NEG
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 1
69780: NEG
69781: PUSH
69782: LD_INT 2
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 0
69792: PUSH
69793: LD_INT 2
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 2
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: LD_INT 1
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: LD_INT 2
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 0
69854: PUSH
69855: LD_INT 2
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 1
69864: NEG
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: NEG
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 2
69886: NEG
69887: PUSH
69888: LD_INT 1
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: NEG
69899: PUSH
69900: LD_INT 2
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69929: LD_ADDR_VAR 0 58
69933: PUSH
69934: LD_INT 0
69936: PUSH
69937: LD_INT 0
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: LD_INT 1
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: LD_INT 1
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: LD_INT 1
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: LD_INT 1
70002: NEG
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: LD_INT 2
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: LD_INT 2
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 1
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 2
70044: PUSH
70045: LD_INT 0
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: LD_INT 1
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: LD_INT 2
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: NEG
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 2
70105: NEG
70106: PUSH
70107: LD_INT 0
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: LD_INT 1
70120: NEG
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: NEG
70129: PUSH
70130: LD_INT 2
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70159: LD_ADDR_VAR 0 59
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 1
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: LD_INT 1
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70247: LD_ADDR_VAR 0 60
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: LD_INT 1
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 1
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 1
70316: NEG
70317: PUSH
70318: LD_INT 1
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70335: LD_ADDR_VAR 0 61
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: LD_INT 1
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 0
70383: PUSH
70384: LD_INT 1
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 1
70393: NEG
70394: PUSH
70395: LD_INT 0
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70423: LD_ADDR_VAR 0 62
70427: PUSH
70428: LD_INT 0
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: NEG
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70511: LD_ADDR_VAR 0 63
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: LD_INT 0
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: LD_INT 0
70528: PUSH
70529: LD_INT 1
70531: NEG
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: PUSH
70537: LD_INT 1
70539: PUSH
70540: LD_INT 0
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: LD_INT 1
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: LD_INT 1
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: NEG
70570: PUSH
70571: LD_INT 0
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 1
70580: NEG
70581: PUSH
70582: LD_INT 1
70584: NEG
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70599: LD_ADDR_VAR 0 64
70603: PUSH
70604: LD_INT 0
70606: PUSH
70607: LD_INT 0
70609: PUSH
70610: EMPTY
70611: LIST
70612: LIST
70613: PUSH
70614: LD_INT 0
70616: PUSH
70617: LD_INT 1
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 1
70627: PUSH
70628: LD_INT 0
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 1
70637: PUSH
70638: LD_INT 1
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: ST_TO_ADDR
// end ; 1 :
70687: GO 76584
70689: LD_INT 1
70691: DOUBLE
70692: EQUAL
70693: IFTRUE 70697
70695: GO 73320
70697: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70698: LD_ADDR_VAR 0 11
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 3
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 0
70717: PUSH
70718: LD_INT 3
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: LIST
70741: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70742: LD_ADDR_VAR 0 12
70746: PUSH
70747: LD_INT 2
70749: PUSH
70750: LD_INT 1
70752: NEG
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: LD_INT 0
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 3
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70783: LD_ADDR_VAR 0 13
70787: PUSH
70788: LD_INT 3
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 3
70800: PUSH
70801: LD_INT 3
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 2
70810: PUSH
70811: LD_INT 3
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: LIST
70822: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
70823: LD_ADDR_VAR 0 14
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: LD_INT 3
70833: PUSH
70834: EMPTY
70835: LIST
70836: LIST
70837: PUSH
70838: LD_INT 0
70840: PUSH
70841: LD_INT 3
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 1
70850: NEG
70851: PUSH
70852: LD_INT 2
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: LIST
70863: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70864: LD_ADDR_VAR 0 15
70868: PUSH
70869: LD_INT 2
70871: NEG
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 3
70882: NEG
70883: PUSH
70884: LD_INT 0
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 3
70893: NEG
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: LIST
70907: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70908: LD_ADDR_VAR 0 16
70912: PUSH
70913: LD_INT 2
70915: NEG
70916: PUSH
70917: LD_INT 3
70919: NEG
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: PUSH
70925: LD_INT 3
70927: NEG
70928: PUSH
70929: LD_INT 2
70931: NEG
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 3
70939: NEG
70940: PUSH
70941: LD_INT 3
70943: NEG
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: LIST
70953: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70954: LD_ADDR_VAR 0 17
70958: PUSH
70959: LD_INT 1
70961: NEG
70962: PUSH
70963: LD_INT 3
70965: NEG
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: LD_INT 3
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 1
70984: PUSH
70985: LD_INT 2
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: EMPTY
70994: LIST
70995: LIST
70996: LIST
70997: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70998: LD_ADDR_VAR 0 18
71002: PUSH
71003: LD_INT 2
71005: PUSH
71006: LD_INT 1
71008: NEG
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 3
71016: PUSH
71017: LD_INT 0
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 3
71026: PUSH
71027: LD_INT 1
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: LIST
71038: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71039: LD_ADDR_VAR 0 19
71043: PUSH
71044: LD_INT 3
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 3
71056: PUSH
71057: LD_INT 3
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 2
71066: PUSH
71067: LD_INT 3
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: LIST
71078: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71079: LD_ADDR_VAR 0 20
71083: PUSH
71084: LD_INT 1
71086: PUSH
71087: LD_INT 3
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 0
71096: PUSH
71097: LD_INT 3
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 1
71106: NEG
71107: PUSH
71108: LD_INT 2
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: LIST
71119: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71120: LD_ADDR_VAR 0 21
71124: PUSH
71125: LD_INT 2
71127: NEG
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 3
71149: NEG
71150: PUSH
71151: LD_INT 1
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: LIST
71163: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71164: LD_ADDR_VAR 0 22
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: LD_INT 3
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 3
71183: NEG
71184: PUSH
71185: LD_INT 2
71187: NEG
71188: PUSH
71189: EMPTY
71190: LIST
71191: LIST
71192: PUSH
71193: LD_INT 3
71195: NEG
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71210: LD_ADDR_VAR 0 23
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: LD_INT 3
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: PUSH
71230: LD_INT 4
71232: NEG
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 1
71240: PUSH
71241: LD_INT 3
71243: NEG
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: LIST
71253: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71254: LD_ADDR_VAR 0 24
71258: PUSH
71259: LD_INT 3
71261: PUSH
71262: LD_INT 0
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 3
71271: PUSH
71272: LD_INT 1
71274: NEG
71275: PUSH
71276: EMPTY
71277: LIST
71278: LIST
71279: PUSH
71280: LD_INT 4
71282: PUSH
71283: LD_INT 1
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: LIST
71294: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71295: LD_ADDR_VAR 0 25
71299: PUSH
71300: LD_INT 3
71302: PUSH
71303: LD_INT 3
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 4
71312: PUSH
71313: LD_INT 3
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: LD_INT 4
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71335: LD_ADDR_VAR 0 26
71339: PUSH
71340: LD_INT 0
71342: PUSH
71343: LD_INT 3
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 1
71352: PUSH
71353: LD_INT 4
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 1
71362: NEG
71363: PUSH
71364: LD_INT 3
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: LIST
71375: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71376: LD_ADDR_VAR 0 27
71380: PUSH
71381: LD_INT 3
71383: NEG
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 3
71394: NEG
71395: PUSH
71396: LD_INT 1
71398: PUSH
71399: EMPTY
71400: LIST
71401: LIST
71402: PUSH
71403: LD_INT 4
71405: NEG
71406: PUSH
71407: LD_INT 1
71409: NEG
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71420: LD_ADDR_VAR 0 28
71424: PUSH
71425: LD_INT 3
71427: NEG
71428: PUSH
71429: LD_INT 3
71431: NEG
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 3
71439: NEG
71440: PUSH
71441: LD_INT 4
71443: NEG
71444: PUSH
71445: EMPTY
71446: LIST
71447: LIST
71448: PUSH
71449: LD_INT 4
71451: NEG
71452: PUSH
71453: LD_INT 3
71455: NEG
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: LIST
71465: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71466: LD_ADDR_VAR 0 29
71470: PUSH
71471: LD_INT 1
71473: NEG
71474: PUSH
71475: LD_INT 3
71477: NEG
71478: PUSH
71479: EMPTY
71480: LIST
71481: LIST
71482: PUSH
71483: LD_INT 0
71485: PUSH
71486: LD_INT 3
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: LD_INT 2
71499: NEG
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 1
71507: NEG
71508: PUSH
71509: LD_INT 4
71511: NEG
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 0
71519: PUSH
71520: LD_INT 4
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: LD_INT 3
71533: NEG
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 1
71541: NEG
71542: PUSH
71543: LD_INT 5
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 0
71553: PUSH
71554: LD_INT 5
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 1
71564: PUSH
71565: LD_INT 4
71567: NEG
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: LD_INT 6
71579: NEG
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: LD_INT 6
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 1
71598: PUSH
71599: LD_INT 5
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71621: LD_ADDR_VAR 0 30
71625: PUSH
71626: LD_INT 2
71628: PUSH
71629: LD_INT 1
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 3
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 3
71649: PUSH
71650: LD_INT 1
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 3
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 4
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 4
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 4
71690: PUSH
71691: LD_INT 1
71693: NEG
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 5
71701: PUSH
71702: LD_INT 0
71704: PUSH
71705: EMPTY
71706: LIST
71707: LIST
71708: PUSH
71709: LD_INT 5
71711: PUSH
71712: LD_INT 1
71714: PUSH
71715: EMPTY
71716: LIST
71717: LIST
71718: PUSH
71719: LD_INT 5
71721: PUSH
71722: LD_INT 1
71724: NEG
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: PUSH
71730: LD_INT 6
71732: PUSH
71733: LD_INT 0
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: PUSH
71740: LD_INT 6
71742: PUSH
71743: LD_INT 1
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: LIST
71754: LIST
71755: LIST
71756: LIST
71757: LIST
71758: LIST
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
71764: LD_ADDR_VAR 0 31
71768: PUSH
71769: LD_INT 3
71771: PUSH
71772: LD_INT 2
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 3
71781: PUSH
71782: LD_INT 3
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 2
71791: PUSH
71792: LD_INT 3
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 4
71801: PUSH
71802: LD_INT 3
71804: PUSH
71805: EMPTY
71806: LIST
71807: LIST
71808: PUSH
71809: LD_INT 4
71811: PUSH
71812: LD_INT 4
71814: PUSH
71815: EMPTY
71816: LIST
71817: LIST
71818: PUSH
71819: LD_INT 3
71821: PUSH
71822: LD_INT 4
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 5
71831: PUSH
71832: LD_INT 4
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: PUSH
71839: LD_INT 5
71841: PUSH
71842: LD_INT 5
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 4
71851: PUSH
71852: LD_INT 5
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: LD_INT 6
71861: PUSH
71862: LD_INT 5
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 6
71871: PUSH
71872: LD_INT 6
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: LD_INT 5
71881: PUSH
71882: LD_INT 6
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
71903: LD_ADDR_VAR 0 32
71907: PUSH
71908: LD_INT 1
71910: PUSH
71911: LD_INT 3
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 0
71920: PUSH
71921: LD_INT 3
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 1
71930: NEG
71931: PUSH
71932: LD_INT 2
71934: PUSH
71935: EMPTY
71936: LIST
71937: LIST
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: LD_INT 4
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 0
71951: PUSH
71952: LD_INT 4
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 1
71961: NEG
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 5
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: LD_INT 5
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 1
71992: NEG
71993: PUSH
71994: LD_INT 4
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 1
72003: PUSH
72004: LD_INT 6
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 6
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: NEG
72024: PUSH
72025: LD_INT 5
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: LIST
72039: LIST
72040: LIST
72041: LIST
72042: LIST
72043: LIST
72044: LIST
72045: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72046: LD_ADDR_VAR 0 33
72050: PUSH
72051: LD_INT 2
72053: NEG
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 3
72064: NEG
72065: PUSH
72066: LD_INT 0
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 3
72075: NEG
72076: PUSH
72077: LD_INT 1
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 3
72087: NEG
72088: PUSH
72089: LD_INT 1
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 4
72098: NEG
72099: PUSH
72100: LD_INT 0
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 4
72109: NEG
72110: PUSH
72111: LD_INT 1
72113: NEG
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 4
72121: NEG
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 5
72132: NEG
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 5
72143: NEG
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 5
72155: NEG
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 6
72166: NEG
72167: PUSH
72168: LD_INT 0
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: PUSH
72175: LD_INT 6
72177: NEG
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72201: LD_ADDR_VAR 0 34
72205: PUSH
72206: LD_INT 2
72208: NEG
72209: PUSH
72210: LD_INT 3
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 3
72220: NEG
72221: PUSH
72222: LD_INT 2
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 3
72232: NEG
72233: PUSH
72234: LD_INT 3
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 3
72244: NEG
72245: PUSH
72246: LD_INT 4
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 4
72256: NEG
72257: PUSH
72258: LD_INT 3
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 4
72268: NEG
72269: PUSH
72270: LD_INT 4
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 4
72280: NEG
72281: PUSH
72282: LD_INT 5
72284: NEG
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 5
72292: NEG
72293: PUSH
72294: LD_INT 4
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 5
72304: NEG
72305: PUSH
72306: LD_INT 5
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 5
72316: NEG
72317: PUSH
72318: LD_INT 6
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 6
72328: NEG
72329: PUSH
72330: LD_INT 5
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 6
72340: NEG
72341: PUSH
72342: LD_INT 6
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72364: LD_ADDR_VAR 0 41
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: LD_INT 2
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 1
72382: NEG
72383: PUSH
72384: LD_INT 3
72386: NEG
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 1
72394: PUSH
72395: LD_INT 2
72397: NEG
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: LIST
72407: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72408: LD_ADDR_VAR 0 42
72412: PUSH
72413: LD_INT 2
72415: PUSH
72416: LD_INT 0
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 2
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 3
72436: PUSH
72437: LD_INT 1
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: LIST
72448: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72449: LD_ADDR_VAR 0 43
72453: PUSH
72454: LD_INT 2
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 3
72466: PUSH
72467: LD_INT 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: LD_INT 3
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: LIST
72488: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72489: LD_ADDR_VAR 0 44
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: LD_INT 2
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 1
72506: PUSH
72507: LD_INT 3
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 1
72516: NEG
72517: PUSH
72518: LD_INT 2
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: LIST
72529: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72530: LD_ADDR_VAR 0 45
72534: PUSH
72535: LD_INT 2
72537: NEG
72538: PUSH
72539: LD_INT 0
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 2
72548: NEG
72549: PUSH
72550: LD_INT 1
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: PUSH
72557: LD_INT 3
72559: NEG
72560: PUSH
72561: LD_INT 1
72563: NEG
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: LIST
72573: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72574: LD_ADDR_VAR 0 46
72578: PUSH
72579: LD_INT 2
72581: NEG
72582: PUSH
72583: LD_INT 2
72585: NEG
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 2
72593: NEG
72594: PUSH
72595: LD_INT 3
72597: NEG
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 3
72605: NEG
72606: PUSH
72607: LD_INT 2
72609: NEG
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: LIST
72619: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72620: LD_ADDR_VAR 0 47
72624: PUSH
72625: LD_INT 2
72627: NEG
72628: PUSH
72629: LD_INT 3
72631: NEG
72632: PUSH
72633: EMPTY
72634: LIST
72635: LIST
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: LD_INT 3
72643: NEG
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72653: LD_ADDR_VAR 0 48
72657: PUSH
72658: LD_INT 1
72660: PUSH
72661: LD_INT 2
72663: NEG
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 2
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72684: LD_ADDR_VAR 0 49
72688: PUSH
72689: LD_INT 3
72691: PUSH
72692: LD_INT 1
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 3
72701: PUSH
72702: LD_INT 2
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
72713: LD_ADDR_VAR 0 50
72717: PUSH
72718: LD_INT 2
72720: PUSH
72721: LD_INT 3
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 1
72730: PUSH
72731: LD_INT 3
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72742: LD_ADDR_VAR 0 51
72746: PUSH
72747: LD_INT 1
72749: NEG
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 2
72760: NEG
72761: PUSH
72762: LD_INT 1
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72773: LD_ADDR_VAR 0 52
72777: PUSH
72778: LD_INT 3
72780: NEG
72781: PUSH
72782: LD_INT 1
72784: NEG
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 3
72792: NEG
72793: PUSH
72794: LD_INT 2
72796: NEG
72797: PUSH
72798: EMPTY
72799: LIST
72800: LIST
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72806: LD_ADDR_VAR 0 53
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: LD_INT 3
72817: NEG
72818: PUSH
72819: EMPTY
72820: LIST
72821: LIST
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: LD_INT 3
72828: NEG
72829: PUSH
72830: EMPTY
72831: LIST
72832: LIST
72833: PUSH
72834: LD_INT 1
72836: PUSH
72837: LD_INT 2
72839: NEG
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: LIST
72849: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72850: LD_ADDR_VAR 0 54
72854: PUSH
72855: LD_INT 2
72857: PUSH
72858: LD_INT 1
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 3
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 3
72878: PUSH
72879: LD_INT 1
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: LIST
72890: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72891: LD_ADDR_VAR 0 55
72895: PUSH
72896: LD_INT 3
72898: PUSH
72899: LD_INT 2
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 3
72908: PUSH
72909: LD_INT 3
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 2
72918: PUSH
72919: LD_INT 3
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: LIST
72930: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72931: LD_ADDR_VAR 0 56
72935: PUSH
72936: LD_INT 1
72938: PUSH
72939: LD_INT 3
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 1
72958: NEG
72959: PUSH
72960: LD_INT 2
72962: PUSH
72963: EMPTY
72964: LIST
72965: LIST
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: LIST
72971: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72972: LD_ADDR_VAR 0 57
72976: PUSH
72977: LD_INT 2
72979: NEG
72980: PUSH
72981: LD_INT 1
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 3
72990: NEG
72991: PUSH
72992: LD_INT 0
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 3
73001: NEG
73002: PUSH
73003: LD_INT 1
73005: NEG
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73016: LD_ADDR_VAR 0 58
73020: PUSH
73021: LD_INT 2
73023: NEG
73024: PUSH
73025: LD_INT 3
73027: NEG
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 3
73035: NEG
73036: PUSH
73037: LD_INT 2
73039: NEG
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: PUSH
73045: LD_INT 3
73047: NEG
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: LIST
73061: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73062: LD_ADDR_VAR 0 59
73066: PUSH
73067: LD_INT 1
73069: NEG
73070: PUSH
73071: LD_INT 2
73073: NEG
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 0
73081: PUSH
73082: LD_INT 2
73084: NEG
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 1
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: LIST
73105: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73106: LD_ADDR_VAR 0 60
73110: PUSH
73111: LD_INT 1
73113: PUSH
73114: LD_INT 1
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 2
73124: PUSH
73125: LD_INT 0
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 2
73134: PUSH
73135: LD_INT 1
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: LIST
73146: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73147: LD_ADDR_VAR 0 61
73151: PUSH
73152: LD_INT 2
73154: PUSH
73155: LD_INT 1
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: LD_INT 2
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: LD_INT 1
73174: PUSH
73175: LD_INT 2
73177: PUSH
73178: EMPTY
73179: LIST
73180: LIST
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: LIST
73186: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73187: LD_ADDR_VAR 0 62
73191: PUSH
73192: LD_INT 1
73194: PUSH
73195: LD_INT 2
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 2
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 1
73214: NEG
73215: PUSH
73216: LD_INT 1
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: LIST
73227: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73228: LD_ADDR_VAR 0 63
73232: PUSH
73233: LD_INT 1
73235: NEG
73236: PUSH
73237: LD_INT 1
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: PUSH
73244: LD_INT 2
73246: NEG
73247: PUSH
73248: LD_INT 0
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 2
73257: NEG
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: LIST
73271: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73272: LD_ADDR_VAR 0 64
73276: PUSH
73277: LD_INT 1
73279: NEG
73280: PUSH
73281: LD_INT 2
73283: NEG
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 2
73291: NEG
73292: PUSH
73293: LD_INT 1
73295: NEG
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 2
73303: NEG
73304: PUSH
73305: LD_INT 2
73307: NEG
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: ST_TO_ADDR
// end ; 2 :
73318: GO 76584
73320: LD_INT 2
73322: DOUBLE
73323: EQUAL
73324: IFTRUE 73328
73326: GO 76583
73328: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73329: LD_ADDR_VAR 0 29
73333: PUSH
73334: LD_INT 4
73336: PUSH
73337: LD_INT 0
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_INT 4
73346: PUSH
73347: LD_INT 1
73349: NEG
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 5
73357: PUSH
73358: LD_INT 0
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 5
73367: PUSH
73368: LD_INT 1
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 4
73377: PUSH
73378: LD_INT 1
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 3
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 3
73397: PUSH
73398: LD_INT 1
73400: NEG
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 3
73408: PUSH
73409: LD_INT 2
73411: NEG
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 5
73419: PUSH
73420: LD_INT 2
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 3
73429: PUSH
73430: LD_INT 3
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 3
73439: PUSH
73440: LD_INT 2
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 4
73449: PUSH
73450: LD_INT 3
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 4
73459: PUSH
73460: LD_INT 4
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 3
73469: PUSH
73470: LD_INT 4
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: LD_INT 2
73479: PUSH
73480: LD_INT 3
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 2
73489: PUSH
73490: LD_INT 2
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 4
73499: PUSH
73500: LD_INT 2
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 2
73509: PUSH
73510: LD_INT 4
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: LD_INT 4
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 0
73529: PUSH
73530: LD_INT 3
73532: PUSH
73533: EMPTY
73534: LIST
73535: LIST
73536: PUSH
73537: LD_INT 1
73539: PUSH
73540: LD_INT 4
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 1
73549: PUSH
73550: LD_INT 5
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: LD_INT 5
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: NEG
73570: PUSH
73571: LD_INT 4
73573: PUSH
73574: EMPTY
73575: LIST
73576: LIST
73577: PUSH
73578: LD_INT 1
73580: NEG
73581: PUSH
73582: LD_INT 3
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 2
73591: PUSH
73592: LD_INT 5
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 2
73601: NEG
73602: PUSH
73603: LD_INT 3
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 3
73612: NEG
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 3
73623: NEG
73624: PUSH
73625: LD_INT 1
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 2
73635: NEG
73636: PUSH
73637: LD_INT 0
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 2
73646: NEG
73647: PUSH
73648: LD_INT 1
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 3
73657: NEG
73658: PUSH
73659: LD_INT 1
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 4
73668: NEG
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: EMPTY
73674: LIST
73675: LIST
73676: PUSH
73677: LD_INT 4
73679: NEG
73680: PUSH
73681: LD_INT 1
73683: NEG
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PUSH
73689: LD_INT 4
73691: NEG
73692: PUSH
73693: LD_INT 2
73695: NEG
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 2
73703: NEG
73704: PUSH
73705: LD_INT 2
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 4
73714: NEG
73715: PUSH
73716: LD_INT 4
73718: NEG
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 4
73726: NEG
73727: PUSH
73728: LD_INT 5
73730: NEG
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 3
73738: NEG
73739: PUSH
73740: LD_INT 4
73742: NEG
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 3
73750: NEG
73751: PUSH
73752: LD_INT 3
73754: NEG
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PUSH
73760: LD_INT 4
73762: NEG
73763: PUSH
73764: LD_INT 3
73766: NEG
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 5
73774: NEG
73775: PUSH
73776: LD_INT 4
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 5
73786: NEG
73787: PUSH
73788: LD_INT 5
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 3
73798: NEG
73799: PUSH
73800: LD_INT 5
73802: NEG
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 5
73810: NEG
73811: PUSH
73812: LD_INT 3
73814: NEG
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: LIST
73831: LIST
73832: LIST
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: LIST
73857: LIST
73858: LIST
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: LIST
73866: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
73867: LD_ADDR_VAR 0 30
73871: PUSH
73872: LD_INT 4
73874: PUSH
73875: LD_INT 4
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 4
73884: PUSH
73885: LD_INT 3
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 5
73894: PUSH
73895: LD_INT 4
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 5
73904: PUSH
73905: LD_INT 5
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 4
73914: PUSH
73915: LD_INT 5
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 3
73924: PUSH
73925: LD_INT 4
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 3
73934: PUSH
73935: LD_INT 3
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 5
73944: PUSH
73945: LD_INT 3
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 3
73954: PUSH
73955: LD_INT 5
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 0
73964: PUSH
73965: LD_INT 3
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 0
73974: PUSH
73975: LD_INT 2
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: LD_INT 3
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 1
73994: PUSH
73995: LD_INT 4
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 0
74004: PUSH
74005: LD_INT 4
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 1
74014: NEG
74015: PUSH
74016: LD_INT 3
74018: PUSH
74019: EMPTY
74020: LIST
74021: LIST
74022: PUSH
74023: LD_INT 1
74025: NEG
74026: PUSH
74027: LD_INT 2
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PUSH
74034: LD_INT 2
74036: PUSH
74037: LD_INT 4
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 2
74046: NEG
74047: PUSH
74048: LD_INT 2
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 4
74057: NEG
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 4
74068: NEG
74069: PUSH
74070: LD_INT 1
74072: NEG
74073: PUSH
74074: EMPTY
74075: LIST
74076: LIST
74077: PUSH
74078: LD_INT 3
74080: NEG
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 3
74091: NEG
74092: PUSH
74093: LD_INT 1
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 4
74102: NEG
74103: PUSH
74104: LD_INT 1
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: LD_INT 5
74113: NEG
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 5
74124: NEG
74125: PUSH
74126: LD_INT 1
74128: NEG
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 5
74136: NEG
74137: PUSH
74138: LD_INT 2
74140: NEG
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 3
74148: NEG
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 3
74159: NEG
74160: PUSH
74161: LD_INT 3
74163: NEG
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 3
74171: NEG
74172: PUSH
74173: LD_INT 4
74175: NEG
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 2
74183: NEG
74184: PUSH
74185: LD_INT 3
74187: NEG
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PUSH
74193: LD_INT 2
74195: NEG
74196: PUSH
74197: LD_INT 2
74199: NEG
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: PUSH
74205: LD_INT 3
74207: NEG
74208: PUSH
74209: LD_INT 2
74211: NEG
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 4
74219: NEG
74220: PUSH
74221: LD_INT 3
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 4
74231: NEG
74232: PUSH
74233: LD_INT 4
74235: NEG
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 2
74243: NEG
74244: PUSH
74245: LD_INT 4
74247: NEG
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 4
74255: NEG
74256: PUSH
74257: LD_INT 2
74259: NEG
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 0
74267: PUSH
74268: LD_INT 4
74270: NEG
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: LD_INT 5
74281: NEG
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 1
74289: PUSH
74290: LD_INT 4
74292: NEG
74293: PUSH
74294: EMPTY
74295: LIST
74296: LIST
74297: PUSH
74298: LD_INT 1
74300: PUSH
74301: LD_INT 3
74303: NEG
74304: PUSH
74305: EMPTY
74306: LIST
74307: LIST
74308: PUSH
74309: LD_INT 0
74311: PUSH
74312: LD_INT 3
74314: NEG
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: LD_INT 4
74326: NEG
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 1
74334: NEG
74335: PUSH
74336: LD_INT 5
74338: NEG
74339: PUSH
74340: EMPTY
74341: LIST
74342: LIST
74343: PUSH
74344: LD_INT 2
74346: PUSH
74347: LD_INT 3
74349: NEG
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 2
74357: NEG
74358: PUSH
74359: LD_INT 5
74361: NEG
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: LIST
74376: LIST
74377: LIST
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: LIST
74386: LIST
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74414: LD_ADDR_VAR 0 31
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: LD_INT 4
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 0
74431: PUSH
74432: LD_INT 3
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 1
74441: PUSH
74442: LD_INT 4
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 1
74451: PUSH
74452: LD_INT 5
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: LD_INT 5
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 1
74471: NEG
74472: PUSH
74473: LD_INT 4
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 1
74482: NEG
74483: PUSH
74484: LD_INT 3
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 2
74493: PUSH
74494: LD_INT 5
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 2
74503: NEG
74504: PUSH
74505: LD_INT 3
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 3
74514: NEG
74515: PUSH
74516: LD_INT 0
74518: PUSH
74519: EMPTY
74520: LIST
74521: LIST
74522: PUSH
74523: LD_INT 3
74525: NEG
74526: PUSH
74527: LD_INT 1
74529: NEG
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: NEG
74538: PUSH
74539: LD_INT 0
74541: PUSH
74542: EMPTY
74543: LIST
74544: LIST
74545: PUSH
74546: LD_INT 2
74548: NEG
74549: PUSH
74550: LD_INT 1
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: PUSH
74557: LD_INT 3
74559: NEG
74560: PUSH
74561: LD_INT 1
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: LD_INT 4
74570: NEG
74571: PUSH
74572: LD_INT 0
74574: PUSH
74575: EMPTY
74576: LIST
74577: LIST
74578: PUSH
74579: LD_INT 4
74581: NEG
74582: PUSH
74583: LD_INT 1
74585: NEG
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 4
74593: NEG
74594: PUSH
74595: LD_INT 2
74597: NEG
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 2
74605: NEG
74606: PUSH
74607: LD_INT 2
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: PUSH
74614: LD_INT 4
74616: NEG
74617: PUSH
74618: LD_INT 4
74620: NEG
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 4
74628: NEG
74629: PUSH
74630: LD_INT 5
74632: NEG
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: LD_INT 3
74640: NEG
74641: PUSH
74642: LD_INT 4
74644: NEG
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 3
74652: NEG
74653: PUSH
74654: LD_INT 3
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 4
74664: NEG
74665: PUSH
74666: LD_INT 3
74668: NEG
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 5
74676: NEG
74677: PUSH
74678: LD_INT 4
74680: NEG
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 5
74688: NEG
74689: PUSH
74690: LD_INT 5
74692: NEG
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: PUSH
74698: LD_INT 3
74700: NEG
74701: PUSH
74702: LD_INT 5
74704: NEG
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PUSH
74710: LD_INT 5
74712: NEG
74713: PUSH
74714: LD_INT 3
74716: NEG
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 0
74724: PUSH
74725: LD_INT 3
74727: NEG
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: PUSH
74733: LD_INT 0
74735: PUSH
74736: LD_INT 4
74738: NEG
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 1
74746: PUSH
74747: LD_INT 3
74749: NEG
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: PUSH
74755: LD_INT 1
74757: PUSH
74758: LD_INT 2
74760: NEG
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 0
74768: PUSH
74769: LD_INT 2
74771: NEG
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PUSH
74777: LD_INT 1
74779: NEG
74780: PUSH
74781: LD_INT 3
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 1
74791: NEG
74792: PUSH
74793: LD_INT 4
74795: NEG
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 2
74803: PUSH
74804: LD_INT 2
74806: NEG
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 2
74814: NEG
74815: PUSH
74816: LD_INT 4
74818: NEG
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 4
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 4
74836: PUSH
74837: LD_INT 1
74839: NEG
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 5
74847: PUSH
74848: LD_INT 0
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 5
74857: PUSH
74858: LD_INT 1
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 4
74867: PUSH
74868: LD_INT 1
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: LD_INT 0
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 3
74887: PUSH
74888: LD_INT 1
74890: NEG
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 3
74898: PUSH
74899: LD_INT 2
74901: NEG
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 5
74909: PUSH
74910: LD_INT 2
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: LIST
74924: LIST
74925: LIST
74926: LIST
74927: LIST
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
74964: LD_ADDR_VAR 0 32
74968: PUSH
74969: LD_INT 4
74971: NEG
74972: PUSH
74973: LD_INT 0
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 4
74982: NEG
74983: PUSH
74984: LD_INT 1
74986: NEG
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 3
74994: NEG
74995: PUSH
74996: LD_INT 0
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 3
75005: NEG
75006: PUSH
75007: LD_INT 1
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 4
75016: NEG
75017: PUSH
75018: LD_INT 1
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 5
75027: NEG
75028: PUSH
75029: LD_INT 0
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 5
75038: NEG
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 5
75050: NEG
75051: PUSH
75052: LD_INT 2
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 3
75062: NEG
75063: PUSH
75064: LD_INT 2
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 3
75073: NEG
75074: PUSH
75075: LD_INT 3
75077: NEG
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 3
75085: NEG
75086: PUSH
75087: LD_INT 4
75089: NEG
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 2
75097: NEG
75098: PUSH
75099: LD_INT 3
75101: NEG
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 2
75109: NEG
75110: PUSH
75111: LD_INT 2
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 3
75121: NEG
75122: PUSH
75123: LD_INT 2
75125: NEG
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 4
75133: NEG
75134: PUSH
75135: LD_INT 3
75137: NEG
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 4
75145: NEG
75146: PUSH
75147: LD_INT 4
75149: NEG
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 2
75157: NEG
75158: PUSH
75159: LD_INT 4
75161: NEG
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 4
75169: NEG
75170: PUSH
75171: LD_INT 2
75173: NEG
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: LD_INT 4
75184: NEG
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 0
75192: PUSH
75193: LD_INT 5
75195: NEG
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 1
75203: PUSH
75204: LD_INT 4
75206: NEG
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 1
75214: PUSH
75215: LD_INT 3
75217: NEG
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: LD_INT 3
75228: NEG
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 1
75236: NEG
75237: PUSH
75238: LD_INT 4
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 1
75248: NEG
75249: PUSH
75250: LD_INT 5
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: LD_INT 2
75260: PUSH
75261: LD_INT 3
75263: NEG
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PUSH
75269: LD_INT 2
75271: NEG
75272: PUSH
75273: LD_INT 5
75275: NEG
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 3
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: LD_INT 3
75293: PUSH
75294: LD_INT 1
75296: NEG
75297: PUSH
75298: EMPTY
75299: LIST
75300: LIST
75301: PUSH
75302: LD_INT 4
75304: PUSH
75305: LD_INT 0
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: LD_INT 4
75314: PUSH
75315: LD_INT 1
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 3
75324: PUSH
75325: LD_INT 1
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 2
75334: PUSH
75335: LD_INT 0
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 2
75344: PUSH
75345: LD_INT 1
75347: NEG
75348: PUSH
75349: EMPTY
75350: LIST
75351: LIST
75352: PUSH
75353: LD_INT 2
75355: PUSH
75356: LD_INT 2
75358: NEG
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 4
75366: PUSH
75367: LD_INT 2
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 4
75376: PUSH
75377: LD_INT 4
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: LD_INT 4
75386: PUSH
75387: LD_INT 3
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 5
75396: PUSH
75397: LD_INT 4
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 5
75406: PUSH
75407: LD_INT 5
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 4
75416: PUSH
75417: LD_INT 5
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PUSH
75424: LD_INT 3
75426: PUSH
75427: LD_INT 4
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 3
75436: PUSH
75437: LD_INT 3
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 5
75446: PUSH
75447: LD_INT 3
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: LD_INT 3
75456: PUSH
75457: LD_INT 5
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: LIST
75491: LIST
75492: LIST
75493: LIST
75494: LIST
75495: LIST
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: LIST
75503: LIST
75504: LIST
75505: LIST
75506: LIST
75507: LIST
75508: LIST
75509: LIST
75510: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75511: LD_ADDR_VAR 0 33
75515: PUSH
75516: LD_INT 4
75518: NEG
75519: PUSH
75520: LD_INT 4
75522: NEG
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 4
75530: NEG
75531: PUSH
75532: LD_INT 5
75534: NEG
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 3
75542: NEG
75543: PUSH
75544: LD_INT 4
75546: NEG
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 3
75554: NEG
75555: PUSH
75556: LD_INT 3
75558: NEG
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 4
75566: NEG
75567: PUSH
75568: LD_INT 3
75570: NEG
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 5
75578: NEG
75579: PUSH
75580: LD_INT 4
75582: NEG
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 5
75590: NEG
75591: PUSH
75592: LD_INT 5
75594: NEG
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: PUSH
75600: LD_INT 3
75602: NEG
75603: PUSH
75604: LD_INT 5
75606: NEG
75607: PUSH
75608: EMPTY
75609: LIST
75610: LIST
75611: PUSH
75612: LD_INT 5
75614: NEG
75615: PUSH
75616: LD_INT 3
75618: NEG
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: PUSH
75624: LD_INT 0
75626: PUSH
75627: LD_INT 3
75629: NEG
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 0
75637: PUSH
75638: LD_INT 4
75640: NEG
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: LD_INT 3
75651: NEG
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: LD_INT 1
75659: PUSH
75660: LD_INT 2
75662: NEG
75663: PUSH
75664: EMPTY
75665: LIST
75666: LIST
75667: PUSH
75668: LD_INT 0
75670: PUSH
75671: LD_INT 2
75673: NEG
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 1
75681: NEG
75682: PUSH
75683: LD_INT 3
75685: NEG
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: LD_INT 1
75693: NEG
75694: PUSH
75695: LD_INT 4
75697: NEG
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 2
75705: PUSH
75706: LD_INT 2
75708: NEG
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 2
75716: NEG
75717: PUSH
75718: LD_INT 4
75720: NEG
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 4
75728: PUSH
75729: LD_INT 0
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: PUSH
75736: LD_INT 4
75738: PUSH
75739: LD_INT 1
75741: NEG
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 5
75749: PUSH
75750: LD_INT 0
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 5
75759: PUSH
75760: LD_INT 1
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 4
75769: PUSH
75770: LD_INT 1
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: LD_INT 3
75779: PUSH
75780: LD_INT 0
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PUSH
75787: LD_INT 3
75789: PUSH
75790: LD_INT 1
75792: NEG
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: LD_INT 2
75803: NEG
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: LD_INT 5
75811: PUSH
75812: LD_INT 2
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: PUSH
75819: LD_INT 3
75821: PUSH
75822: LD_INT 3
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 3
75831: PUSH
75832: LD_INT 2
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 4
75841: PUSH
75842: LD_INT 3
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 4
75851: PUSH
75852: LD_INT 4
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 3
75861: PUSH
75862: LD_INT 4
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 2
75871: PUSH
75872: LD_INT 3
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 2
75881: PUSH
75882: LD_INT 2
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 4
75891: PUSH
75892: LD_INT 2
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: PUSH
75899: LD_INT 2
75901: PUSH
75902: LD_INT 4
75904: PUSH
75905: EMPTY
75906: LIST
75907: LIST
75908: PUSH
75909: LD_INT 0
75911: PUSH
75912: LD_INT 4
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 3
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 1
75931: PUSH
75932: LD_INT 4
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: LD_INT 5
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 0
75951: PUSH
75952: LD_INT 5
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: PUSH
75959: LD_INT 1
75961: NEG
75962: PUSH
75963: LD_INT 4
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 1
75972: NEG
75973: PUSH
75974: LD_INT 3
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 2
75983: PUSH
75984: LD_INT 5
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 2
75993: NEG
75994: PUSH
75995: LD_INT 3
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76049: LD_ADDR_VAR 0 34
76053: PUSH
76054: LD_INT 0
76056: PUSH
76057: LD_INT 4
76059: NEG
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: LD_INT 0
76067: PUSH
76068: LD_INT 5
76070: NEG
76071: PUSH
76072: EMPTY
76073: LIST
76074: LIST
76075: PUSH
76076: LD_INT 1
76078: PUSH
76079: LD_INT 4
76081: NEG
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PUSH
76087: LD_INT 1
76089: PUSH
76090: LD_INT 3
76092: NEG
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 0
76100: PUSH
76101: LD_INT 3
76103: NEG
76104: PUSH
76105: EMPTY
76106: LIST
76107: LIST
76108: PUSH
76109: LD_INT 1
76111: NEG
76112: PUSH
76113: LD_INT 4
76115: NEG
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 1
76123: NEG
76124: PUSH
76125: LD_INT 5
76127: NEG
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: PUSH
76133: LD_INT 2
76135: PUSH
76136: LD_INT 3
76138: NEG
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 2
76146: NEG
76147: PUSH
76148: LD_INT 5
76150: NEG
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 3
76158: PUSH
76159: LD_INT 0
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PUSH
76166: LD_INT 3
76168: PUSH
76169: LD_INT 1
76171: NEG
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: LD_INT 4
76179: PUSH
76180: LD_INT 0
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PUSH
76187: LD_INT 4
76189: PUSH
76190: LD_INT 1
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 3
76199: PUSH
76200: LD_INT 1
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 2
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 2
76219: PUSH
76220: LD_INT 1
76222: NEG
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 2
76230: PUSH
76231: LD_INT 2
76233: NEG
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: LD_INT 4
76241: PUSH
76242: LD_INT 2
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 4
76251: PUSH
76252: LD_INT 4
76254: PUSH
76255: EMPTY
76256: LIST
76257: LIST
76258: PUSH
76259: LD_INT 4
76261: PUSH
76262: LD_INT 3
76264: PUSH
76265: EMPTY
76266: LIST
76267: LIST
76268: PUSH
76269: LD_INT 5
76271: PUSH
76272: LD_INT 4
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 5
76281: PUSH
76282: LD_INT 5
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 4
76291: PUSH
76292: LD_INT 5
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 3
76301: PUSH
76302: LD_INT 4
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: LD_INT 3
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 5
76321: PUSH
76322: LD_INT 3
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 3
76331: PUSH
76332: LD_INT 5
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 0
76341: PUSH
76342: LD_INT 3
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 2
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 1
76361: PUSH
76362: LD_INT 3
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 1
76371: PUSH
76372: LD_INT 4
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: PUSH
76379: LD_INT 0
76381: PUSH
76382: LD_INT 4
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 1
76391: NEG
76392: PUSH
76393: LD_INT 3
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 1
76402: NEG
76403: PUSH
76404: LD_INT 2
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: LD_INT 2
76413: PUSH
76414: LD_INT 4
76416: PUSH
76417: EMPTY
76418: LIST
76419: LIST
76420: PUSH
76421: LD_INT 2
76423: NEG
76424: PUSH
76425: LD_INT 2
76427: PUSH
76428: EMPTY
76429: LIST
76430: LIST
76431: PUSH
76432: LD_INT 4
76434: NEG
76435: PUSH
76436: LD_INT 0
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 4
76445: NEG
76446: PUSH
76447: LD_INT 1
76449: NEG
76450: PUSH
76451: EMPTY
76452: LIST
76453: LIST
76454: PUSH
76455: LD_INT 3
76457: NEG
76458: PUSH
76459: LD_INT 0
76461: PUSH
76462: EMPTY
76463: LIST
76464: LIST
76465: PUSH
76466: LD_INT 3
76468: NEG
76469: PUSH
76470: LD_INT 1
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: PUSH
76477: LD_INT 4
76479: NEG
76480: PUSH
76481: LD_INT 1
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PUSH
76488: LD_INT 5
76490: NEG
76491: PUSH
76492: LD_INT 0
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 5
76501: NEG
76502: PUSH
76503: LD_INT 1
76505: NEG
76506: PUSH
76507: EMPTY
76508: LIST
76509: LIST
76510: PUSH
76511: LD_INT 5
76513: NEG
76514: PUSH
76515: LD_INT 2
76517: NEG
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 3
76525: NEG
76526: PUSH
76527: LD_INT 2
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: LIST
76562: LIST
76563: LIST
76564: LIST
76565: LIST
76566: LIST
76567: LIST
76568: LIST
76569: LIST
76570: LIST
76571: LIST
76572: LIST
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: ST_TO_ADDR
// end ; end ;
76581: GO 76584
76583: POP
// case btype of b_depot , b_warehouse :
76584: LD_VAR 0 1
76588: PUSH
76589: LD_INT 0
76591: DOUBLE
76592: EQUAL
76593: IFTRUE 76603
76595: LD_INT 1
76597: DOUBLE
76598: EQUAL
76599: IFTRUE 76603
76601: GO 76804
76603: POP
// case nation of nation_american :
76604: LD_VAR 0 5
76608: PUSH
76609: LD_INT 1
76611: DOUBLE
76612: EQUAL
76613: IFTRUE 76617
76615: GO 76673
76617: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
76618: LD_ADDR_VAR 0 9
76622: PUSH
76623: LD_VAR 0 11
76627: PUSH
76628: LD_VAR 0 12
76632: PUSH
76633: LD_VAR 0 13
76637: PUSH
76638: LD_VAR 0 14
76642: PUSH
76643: LD_VAR 0 15
76647: PUSH
76648: LD_VAR 0 16
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: PUSH
76661: LD_VAR 0 4
76665: PUSH
76666: LD_INT 1
76668: PLUS
76669: ARRAY
76670: ST_TO_ADDR
76671: GO 76802
76673: LD_INT 2
76675: DOUBLE
76676: EQUAL
76677: IFTRUE 76681
76679: GO 76737
76681: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
76682: LD_ADDR_VAR 0 9
76686: PUSH
76687: LD_VAR 0 17
76691: PUSH
76692: LD_VAR 0 18
76696: PUSH
76697: LD_VAR 0 19
76701: PUSH
76702: LD_VAR 0 20
76706: PUSH
76707: LD_VAR 0 21
76711: PUSH
76712: LD_VAR 0 22
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: PUSH
76725: LD_VAR 0 4
76729: PUSH
76730: LD_INT 1
76732: PLUS
76733: ARRAY
76734: ST_TO_ADDR
76735: GO 76802
76737: LD_INT 3
76739: DOUBLE
76740: EQUAL
76741: IFTRUE 76745
76743: GO 76801
76745: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
76746: LD_ADDR_VAR 0 9
76750: PUSH
76751: LD_VAR 0 23
76755: PUSH
76756: LD_VAR 0 24
76760: PUSH
76761: LD_VAR 0 25
76765: PUSH
76766: LD_VAR 0 26
76770: PUSH
76771: LD_VAR 0 27
76775: PUSH
76776: LD_VAR 0 28
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: LIST
76785: LIST
76786: LIST
76787: LIST
76788: PUSH
76789: LD_VAR 0 4
76793: PUSH
76794: LD_INT 1
76796: PLUS
76797: ARRAY
76798: ST_TO_ADDR
76799: GO 76802
76801: POP
76802: GO 77351
76804: LD_INT 2
76806: DOUBLE
76807: EQUAL
76808: IFTRUE 76818
76810: LD_INT 3
76812: DOUBLE
76813: EQUAL
76814: IFTRUE 76818
76816: GO 76874
76818: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
76819: LD_ADDR_VAR 0 9
76823: PUSH
76824: LD_VAR 0 29
76828: PUSH
76829: LD_VAR 0 30
76833: PUSH
76834: LD_VAR 0 31
76838: PUSH
76839: LD_VAR 0 32
76843: PUSH
76844: LD_VAR 0 33
76848: PUSH
76849: LD_VAR 0 34
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: PUSH
76862: LD_VAR 0 4
76866: PUSH
76867: LD_INT 1
76869: PLUS
76870: ARRAY
76871: ST_TO_ADDR
76872: GO 77351
76874: LD_INT 16
76876: DOUBLE
76877: EQUAL
76878: IFTRUE 76930
76880: LD_INT 17
76882: DOUBLE
76883: EQUAL
76884: IFTRUE 76930
76886: LD_INT 18
76888: DOUBLE
76889: EQUAL
76890: IFTRUE 76930
76892: LD_INT 19
76894: DOUBLE
76895: EQUAL
76896: IFTRUE 76930
76898: LD_INT 20
76900: DOUBLE
76901: EQUAL
76902: IFTRUE 76930
76904: LD_INT 21
76906: DOUBLE
76907: EQUAL
76908: IFTRUE 76930
76910: LD_INT 23
76912: DOUBLE
76913: EQUAL
76914: IFTRUE 76930
76916: LD_INT 24
76918: DOUBLE
76919: EQUAL
76920: IFTRUE 76930
76922: LD_INT 25
76924: DOUBLE
76925: EQUAL
76926: IFTRUE 76930
76928: GO 76986
76930: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
76931: LD_ADDR_VAR 0 9
76935: PUSH
76936: LD_VAR 0 35
76940: PUSH
76941: LD_VAR 0 36
76945: PUSH
76946: LD_VAR 0 37
76950: PUSH
76951: LD_VAR 0 38
76955: PUSH
76956: LD_VAR 0 39
76960: PUSH
76961: LD_VAR 0 40
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: PUSH
76974: LD_VAR 0 4
76978: PUSH
76979: LD_INT 1
76981: PLUS
76982: ARRAY
76983: ST_TO_ADDR
76984: GO 77351
76986: LD_INT 6
76988: DOUBLE
76989: EQUAL
76990: IFTRUE 77042
76992: LD_INT 7
76994: DOUBLE
76995: EQUAL
76996: IFTRUE 77042
76998: LD_INT 8
77000: DOUBLE
77001: EQUAL
77002: IFTRUE 77042
77004: LD_INT 13
77006: DOUBLE
77007: EQUAL
77008: IFTRUE 77042
77010: LD_INT 12
77012: DOUBLE
77013: EQUAL
77014: IFTRUE 77042
77016: LD_INT 15
77018: DOUBLE
77019: EQUAL
77020: IFTRUE 77042
77022: LD_INT 11
77024: DOUBLE
77025: EQUAL
77026: IFTRUE 77042
77028: LD_INT 14
77030: DOUBLE
77031: EQUAL
77032: IFTRUE 77042
77034: LD_INT 10
77036: DOUBLE
77037: EQUAL
77038: IFTRUE 77042
77040: GO 77098
77042: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
77043: LD_ADDR_VAR 0 9
77047: PUSH
77048: LD_VAR 0 41
77052: PUSH
77053: LD_VAR 0 42
77057: PUSH
77058: LD_VAR 0 43
77062: PUSH
77063: LD_VAR 0 44
77067: PUSH
77068: LD_VAR 0 45
77072: PUSH
77073: LD_VAR 0 46
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: LIST
77084: LIST
77085: PUSH
77086: LD_VAR 0 4
77090: PUSH
77091: LD_INT 1
77093: PLUS
77094: ARRAY
77095: ST_TO_ADDR
77096: GO 77351
77098: LD_INT 36
77100: DOUBLE
77101: EQUAL
77102: IFTRUE 77106
77104: GO 77162
77106: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77107: LD_ADDR_VAR 0 9
77111: PUSH
77112: LD_VAR 0 47
77116: PUSH
77117: LD_VAR 0 48
77121: PUSH
77122: LD_VAR 0 49
77126: PUSH
77127: LD_VAR 0 50
77131: PUSH
77132: LD_VAR 0 51
77136: PUSH
77137: LD_VAR 0 52
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: LIST
77146: LIST
77147: LIST
77148: LIST
77149: PUSH
77150: LD_VAR 0 4
77154: PUSH
77155: LD_INT 1
77157: PLUS
77158: ARRAY
77159: ST_TO_ADDR
77160: GO 77351
77162: LD_INT 4
77164: DOUBLE
77165: EQUAL
77166: IFTRUE 77188
77168: LD_INT 5
77170: DOUBLE
77171: EQUAL
77172: IFTRUE 77188
77174: LD_INT 34
77176: DOUBLE
77177: EQUAL
77178: IFTRUE 77188
77180: LD_INT 37
77182: DOUBLE
77183: EQUAL
77184: IFTRUE 77188
77186: GO 77244
77188: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77189: LD_ADDR_VAR 0 9
77193: PUSH
77194: LD_VAR 0 53
77198: PUSH
77199: LD_VAR 0 54
77203: PUSH
77204: LD_VAR 0 55
77208: PUSH
77209: LD_VAR 0 56
77213: PUSH
77214: LD_VAR 0 57
77218: PUSH
77219: LD_VAR 0 58
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: LIST
77228: LIST
77229: LIST
77230: LIST
77231: PUSH
77232: LD_VAR 0 4
77236: PUSH
77237: LD_INT 1
77239: PLUS
77240: ARRAY
77241: ST_TO_ADDR
77242: GO 77351
77244: LD_INT 31
77246: DOUBLE
77247: EQUAL
77248: IFTRUE 77294
77250: LD_INT 32
77252: DOUBLE
77253: EQUAL
77254: IFTRUE 77294
77256: LD_INT 33
77258: DOUBLE
77259: EQUAL
77260: IFTRUE 77294
77262: LD_INT 27
77264: DOUBLE
77265: EQUAL
77266: IFTRUE 77294
77268: LD_INT 26
77270: DOUBLE
77271: EQUAL
77272: IFTRUE 77294
77274: LD_INT 28
77276: DOUBLE
77277: EQUAL
77278: IFTRUE 77294
77280: LD_INT 29
77282: DOUBLE
77283: EQUAL
77284: IFTRUE 77294
77286: LD_INT 30
77288: DOUBLE
77289: EQUAL
77290: IFTRUE 77294
77292: GO 77350
77294: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
77295: LD_ADDR_VAR 0 9
77299: PUSH
77300: LD_VAR 0 59
77304: PUSH
77305: LD_VAR 0 60
77309: PUSH
77310: LD_VAR 0 61
77314: PUSH
77315: LD_VAR 0 62
77319: PUSH
77320: LD_VAR 0 63
77324: PUSH
77325: LD_VAR 0 64
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: PUSH
77338: LD_VAR 0 4
77342: PUSH
77343: LD_INT 1
77345: PLUS
77346: ARRAY
77347: ST_TO_ADDR
77348: GO 77351
77350: POP
// temp_list2 = [ ] ;
77351: LD_ADDR_VAR 0 10
77355: PUSH
77356: EMPTY
77357: ST_TO_ADDR
// for i in temp_list do
77358: LD_ADDR_VAR 0 8
77362: PUSH
77363: LD_VAR 0 9
77367: PUSH
77368: FOR_IN
77369: IFFALSE 77421
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77371: LD_ADDR_VAR 0 10
77375: PUSH
77376: LD_VAR 0 10
77380: PUSH
77381: LD_VAR 0 8
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PUSH
77390: LD_VAR 0 2
77394: PLUS
77395: PUSH
77396: LD_VAR 0 8
77400: PUSH
77401: LD_INT 2
77403: ARRAY
77404: PUSH
77405: LD_VAR 0 3
77409: PLUS
77410: PUSH
77411: EMPTY
77412: LIST
77413: LIST
77414: PUSH
77415: EMPTY
77416: LIST
77417: ADD
77418: ST_TO_ADDR
77419: GO 77368
77421: POP
77422: POP
// result = temp_list2 ;
77423: LD_ADDR_VAR 0 7
77427: PUSH
77428: LD_VAR 0 10
77432: ST_TO_ADDR
// end ;
77433: LD_VAR 0 7
77437: RET
// export function EnemyInRange ( unit , dist ) ; begin
77438: LD_INT 0
77440: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77441: LD_ADDR_VAR 0 3
77445: PUSH
77446: LD_VAR 0 1
77450: PPUSH
77451: CALL_OW 255
77455: PPUSH
77456: LD_VAR 0 1
77460: PPUSH
77461: CALL_OW 250
77465: PPUSH
77466: LD_VAR 0 1
77470: PPUSH
77471: CALL_OW 251
77475: PPUSH
77476: LD_VAR 0 2
77480: PPUSH
77481: CALL 51781 0 4
77485: PUSH
77486: LD_INT 4
77488: ARRAY
77489: ST_TO_ADDR
// end ;
77490: LD_VAR 0 3
77494: RET
// export function PlayerSeeMe ( unit ) ; begin
77495: LD_INT 0
77497: PPUSH
// result := See ( your_side , unit ) ;
77498: LD_ADDR_VAR 0 2
77502: PUSH
77503: LD_OWVAR 2
77507: PPUSH
77508: LD_VAR 0 1
77512: PPUSH
77513: CALL_OW 292
77517: ST_TO_ADDR
// end ;
77518: LD_VAR 0 2
77522: RET
// export function ReverseDir ( unit ) ; begin
77523: LD_INT 0
77525: PPUSH
// if not unit then
77526: LD_VAR 0 1
77530: NOT
77531: IFFALSE 77535
// exit ;
77533: GO 77581
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
77535: LD_ADDR_VAR 0 2
77539: PUSH
77540: LD_INT 3
77542: PUSH
77543: LD_INT 4
77545: PUSH
77546: LD_INT 5
77548: PUSH
77549: LD_INT 0
77551: PUSH
77552: LD_INT 1
77554: PUSH
77555: LD_INT 2
77557: PUSH
77558: EMPTY
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: PUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: CALL_OW 254
77575: PUSH
77576: LD_INT 1
77578: PLUS
77579: ARRAY
77580: ST_TO_ADDR
// end ;
77581: LD_VAR 0 2
77585: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77586: LD_INT 0
77588: PPUSH
77589: PPUSH
77590: PPUSH
77591: PPUSH
77592: PPUSH
// if not hexes then
77593: LD_VAR 0 2
77597: NOT
77598: IFFALSE 77602
// exit ;
77600: GO 77750
// dist := 9999 ;
77602: LD_ADDR_VAR 0 5
77606: PUSH
77607: LD_INT 9999
77609: ST_TO_ADDR
// for i = 1 to hexes do
77610: LD_ADDR_VAR 0 4
77614: PUSH
77615: DOUBLE
77616: LD_INT 1
77618: DEC
77619: ST_TO_ADDR
77620: LD_VAR 0 2
77624: PUSH
77625: FOR_TO
77626: IFFALSE 77738
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77628: LD_VAR 0 1
77632: PPUSH
77633: LD_VAR 0 2
77637: PUSH
77638: LD_VAR 0 4
77642: ARRAY
77643: PUSH
77644: LD_INT 1
77646: ARRAY
77647: PPUSH
77648: LD_VAR 0 2
77652: PUSH
77653: LD_VAR 0 4
77657: ARRAY
77658: PUSH
77659: LD_INT 2
77661: ARRAY
77662: PPUSH
77663: CALL_OW 297
77667: PUSH
77668: LD_VAR 0 5
77672: LESS
77673: IFFALSE 77736
// begin hex := hexes [ i ] ;
77675: LD_ADDR_VAR 0 7
77679: PUSH
77680: LD_VAR 0 2
77684: PUSH
77685: LD_VAR 0 4
77689: ARRAY
77690: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77691: LD_ADDR_VAR 0 5
77695: PUSH
77696: LD_VAR 0 1
77700: PPUSH
77701: LD_VAR 0 2
77705: PUSH
77706: LD_VAR 0 4
77710: ARRAY
77711: PUSH
77712: LD_INT 1
77714: ARRAY
77715: PPUSH
77716: LD_VAR 0 2
77720: PUSH
77721: LD_VAR 0 4
77725: ARRAY
77726: PUSH
77727: LD_INT 2
77729: ARRAY
77730: PPUSH
77731: CALL_OW 297
77735: ST_TO_ADDR
// end ; end ;
77736: GO 77625
77738: POP
77739: POP
// result := hex ;
77740: LD_ADDR_VAR 0 3
77744: PUSH
77745: LD_VAR 0 7
77749: ST_TO_ADDR
// end ;
77750: LD_VAR 0 3
77754: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
77755: LD_INT 0
77757: PPUSH
77758: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
77759: LD_VAR 0 1
77763: NOT
77764: PUSH
77765: LD_VAR 0 1
77769: PUSH
77770: LD_INT 21
77772: PUSH
77773: LD_INT 2
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 23
77782: PUSH
77783: LD_INT 2
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: EMPTY
77791: LIST
77792: LIST
77793: PPUSH
77794: CALL_OW 69
77798: IN
77799: NOT
77800: OR
77801: IFFALSE 77805
// exit ;
77803: GO 77852
// for i = 1 to 3 do
77805: LD_ADDR_VAR 0 3
77809: PUSH
77810: DOUBLE
77811: LD_INT 1
77813: DEC
77814: ST_TO_ADDR
77815: LD_INT 3
77817: PUSH
77818: FOR_TO
77819: IFFALSE 77850
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
77821: LD_VAR 0 1
77825: PPUSH
77826: CALL_OW 250
77830: PPUSH
77831: LD_VAR 0 1
77835: PPUSH
77836: CALL_OW 251
77840: PPUSH
77841: LD_INT 1
77843: PPUSH
77844: CALL_OW 453
77848: GO 77818
77850: POP
77851: POP
// end ;
77852: LD_VAR 0 2
77856: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
77857: LD_INT 0
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
77865: LD_VAR 0 1
77869: NOT
77870: PUSH
77871: LD_VAR 0 2
77875: NOT
77876: OR
77877: PUSH
77878: LD_VAR 0 1
77882: PPUSH
77883: CALL_OW 314
77887: OR
77888: IFFALSE 77892
// exit ;
77890: GO 78333
// x := GetX ( enemy_unit ) ;
77892: LD_ADDR_VAR 0 7
77896: PUSH
77897: LD_VAR 0 2
77901: PPUSH
77902: CALL_OW 250
77906: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
77907: LD_ADDR_VAR 0 8
77911: PUSH
77912: LD_VAR 0 2
77916: PPUSH
77917: CALL_OW 251
77921: ST_TO_ADDR
// if not x or not y then
77922: LD_VAR 0 7
77926: NOT
77927: PUSH
77928: LD_VAR 0 8
77932: NOT
77933: OR
77934: IFFALSE 77938
// exit ;
77936: GO 78333
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
77938: LD_ADDR_VAR 0 6
77942: PUSH
77943: LD_VAR 0 7
77947: PPUSH
77948: LD_INT 0
77950: PPUSH
77951: LD_INT 4
77953: PPUSH
77954: CALL_OW 272
77958: PUSH
77959: LD_VAR 0 8
77963: PPUSH
77964: LD_INT 0
77966: PPUSH
77967: LD_INT 4
77969: PPUSH
77970: CALL_OW 273
77974: PUSH
77975: EMPTY
77976: LIST
77977: LIST
77978: PUSH
77979: LD_VAR 0 7
77983: PPUSH
77984: LD_INT 1
77986: PPUSH
77987: LD_INT 4
77989: PPUSH
77990: CALL_OW 272
77994: PUSH
77995: LD_VAR 0 8
77999: PPUSH
78000: LD_INT 1
78002: PPUSH
78003: LD_INT 4
78005: PPUSH
78006: CALL_OW 273
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: PUSH
78015: LD_VAR 0 7
78019: PPUSH
78020: LD_INT 2
78022: PPUSH
78023: LD_INT 4
78025: PPUSH
78026: CALL_OW 272
78030: PUSH
78031: LD_VAR 0 8
78035: PPUSH
78036: LD_INT 2
78038: PPUSH
78039: LD_INT 4
78041: PPUSH
78042: CALL_OW 273
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: PUSH
78051: LD_VAR 0 7
78055: PPUSH
78056: LD_INT 3
78058: PPUSH
78059: LD_INT 4
78061: PPUSH
78062: CALL_OW 272
78066: PUSH
78067: LD_VAR 0 8
78071: PPUSH
78072: LD_INT 3
78074: PPUSH
78075: LD_INT 4
78077: PPUSH
78078: CALL_OW 273
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_VAR 0 7
78091: PPUSH
78092: LD_INT 4
78094: PPUSH
78095: LD_INT 4
78097: PPUSH
78098: CALL_OW 272
78102: PUSH
78103: LD_VAR 0 8
78107: PPUSH
78108: LD_INT 4
78110: PPUSH
78111: LD_INT 4
78113: PPUSH
78114: CALL_OW 273
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: LD_VAR 0 7
78127: PPUSH
78128: LD_INT 5
78130: PPUSH
78131: LD_INT 4
78133: PPUSH
78134: CALL_OW 272
78138: PUSH
78139: LD_VAR 0 8
78143: PPUSH
78144: LD_INT 5
78146: PPUSH
78147: LD_INT 4
78149: PPUSH
78150: CALL_OW 273
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: ST_TO_ADDR
// for i = tmp downto 1 do
78167: LD_ADDR_VAR 0 4
78171: PUSH
78172: DOUBLE
78173: LD_VAR 0 6
78177: INC
78178: ST_TO_ADDR
78179: LD_INT 1
78181: PUSH
78182: FOR_DOWNTO
78183: IFFALSE 78284
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78185: LD_VAR 0 6
78189: PUSH
78190: LD_VAR 0 4
78194: ARRAY
78195: PUSH
78196: LD_INT 1
78198: ARRAY
78199: PPUSH
78200: LD_VAR 0 6
78204: PUSH
78205: LD_VAR 0 4
78209: ARRAY
78210: PUSH
78211: LD_INT 2
78213: ARRAY
78214: PPUSH
78215: CALL_OW 488
78219: NOT
78220: PUSH
78221: LD_VAR 0 6
78225: PUSH
78226: LD_VAR 0 4
78230: ARRAY
78231: PUSH
78232: LD_INT 1
78234: ARRAY
78235: PPUSH
78236: LD_VAR 0 6
78240: PUSH
78241: LD_VAR 0 4
78245: ARRAY
78246: PUSH
78247: LD_INT 2
78249: ARRAY
78250: PPUSH
78251: CALL_OW 428
78255: PUSH
78256: LD_INT 0
78258: NONEQUAL
78259: OR
78260: IFFALSE 78282
// tmp := Delete ( tmp , i ) ;
78262: LD_ADDR_VAR 0 6
78266: PUSH
78267: LD_VAR 0 6
78271: PPUSH
78272: LD_VAR 0 4
78276: PPUSH
78277: CALL_OW 3
78281: ST_TO_ADDR
78282: GO 78182
78284: POP
78285: POP
// j := GetClosestHex ( unit , tmp ) ;
78286: LD_ADDR_VAR 0 5
78290: PUSH
78291: LD_VAR 0 1
78295: PPUSH
78296: LD_VAR 0 6
78300: PPUSH
78301: CALL 77586 0 2
78305: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78306: LD_VAR 0 1
78310: PPUSH
78311: LD_VAR 0 5
78315: PUSH
78316: LD_INT 1
78318: ARRAY
78319: PPUSH
78320: LD_VAR 0 5
78324: PUSH
78325: LD_INT 2
78327: ARRAY
78328: PPUSH
78329: CALL_OW 111
// end ;
78333: LD_VAR 0 3
78337: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78338: LD_INT 0
78340: PPUSH
78341: PPUSH
78342: PPUSH
// uc_side = 0 ;
78343: LD_ADDR_OWVAR 20
78347: PUSH
78348: LD_INT 0
78350: ST_TO_ADDR
// uc_nation = 0 ;
78351: LD_ADDR_OWVAR 21
78355: PUSH
78356: LD_INT 0
78358: ST_TO_ADDR
// InitHc ;
78359: CALL_OW 19
// InitVc ;
78363: CALL_OW 20
// if mastodonts then
78367: LD_VAR 0 6
78371: IFFALSE 78438
// for i = 1 to mastodonts do
78373: LD_ADDR_VAR 0 11
78377: PUSH
78378: DOUBLE
78379: LD_INT 1
78381: DEC
78382: ST_TO_ADDR
78383: LD_VAR 0 6
78387: PUSH
78388: FOR_TO
78389: IFFALSE 78436
// begin vc_chassis := 31 ;
78391: LD_ADDR_OWVAR 37
78395: PUSH
78396: LD_INT 31
78398: ST_TO_ADDR
// vc_control := control_rider ;
78399: LD_ADDR_OWVAR 38
78403: PUSH
78404: LD_INT 4
78406: ST_TO_ADDR
// animal := CreateVehicle ;
78407: LD_ADDR_VAR 0 12
78411: PUSH
78412: CALL_OW 45
78416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78417: LD_VAR 0 12
78421: PPUSH
78422: LD_VAR 0 8
78426: PPUSH
78427: LD_INT 0
78429: PPUSH
78430: CALL 85144 0 3
// end ;
78434: GO 78388
78436: POP
78437: POP
// if horses then
78438: LD_VAR 0 5
78442: IFFALSE 78509
// for i = 1 to horses do
78444: LD_ADDR_VAR 0 11
78448: PUSH
78449: DOUBLE
78450: LD_INT 1
78452: DEC
78453: ST_TO_ADDR
78454: LD_VAR 0 5
78458: PUSH
78459: FOR_TO
78460: IFFALSE 78507
// begin hc_class := 21 ;
78462: LD_ADDR_OWVAR 28
78466: PUSH
78467: LD_INT 21
78469: ST_TO_ADDR
// hc_gallery :=  ;
78470: LD_ADDR_OWVAR 33
78474: PUSH
78475: LD_STRING 
78477: ST_TO_ADDR
// animal := CreateHuman ;
78478: LD_ADDR_VAR 0 12
78482: PUSH
78483: CALL_OW 44
78487: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78488: LD_VAR 0 12
78492: PPUSH
78493: LD_VAR 0 8
78497: PPUSH
78498: LD_INT 0
78500: PPUSH
78501: CALL 85144 0 3
// end ;
78505: GO 78459
78507: POP
78508: POP
// if birds then
78509: LD_VAR 0 1
78513: IFFALSE 78580
// for i = 1 to birds do
78515: LD_ADDR_VAR 0 11
78519: PUSH
78520: DOUBLE
78521: LD_INT 1
78523: DEC
78524: ST_TO_ADDR
78525: LD_VAR 0 1
78529: PUSH
78530: FOR_TO
78531: IFFALSE 78578
// begin hc_class = 18 ;
78533: LD_ADDR_OWVAR 28
78537: PUSH
78538: LD_INT 18
78540: ST_TO_ADDR
// hc_gallery =  ;
78541: LD_ADDR_OWVAR 33
78545: PUSH
78546: LD_STRING 
78548: ST_TO_ADDR
// animal := CreateHuman ;
78549: LD_ADDR_VAR 0 12
78553: PUSH
78554: CALL_OW 44
78558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78559: LD_VAR 0 12
78563: PPUSH
78564: LD_VAR 0 8
78568: PPUSH
78569: LD_INT 0
78571: PPUSH
78572: CALL 85144 0 3
// end ;
78576: GO 78530
78578: POP
78579: POP
// if tigers then
78580: LD_VAR 0 2
78584: IFFALSE 78668
// for i = 1 to tigers do
78586: LD_ADDR_VAR 0 11
78590: PUSH
78591: DOUBLE
78592: LD_INT 1
78594: DEC
78595: ST_TO_ADDR
78596: LD_VAR 0 2
78600: PUSH
78601: FOR_TO
78602: IFFALSE 78666
// begin hc_class = class_tiger ;
78604: LD_ADDR_OWVAR 28
78608: PUSH
78609: LD_INT 14
78611: ST_TO_ADDR
// hc_gallery =  ;
78612: LD_ADDR_OWVAR 33
78616: PUSH
78617: LD_STRING 
78619: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78620: LD_ADDR_OWVAR 35
78624: PUSH
78625: LD_INT 7
78627: NEG
78628: PPUSH
78629: LD_INT 7
78631: PPUSH
78632: CALL_OW 12
78636: ST_TO_ADDR
// animal := CreateHuman ;
78637: LD_ADDR_VAR 0 12
78641: PUSH
78642: CALL_OW 44
78646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78647: LD_VAR 0 12
78651: PPUSH
78652: LD_VAR 0 8
78656: PPUSH
78657: LD_INT 0
78659: PPUSH
78660: CALL 85144 0 3
// end ;
78664: GO 78601
78666: POP
78667: POP
// if apemans then
78668: LD_VAR 0 3
78672: IFFALSE 78795
// for i = 1 to apemans do
78674: LD_ADDR_VAR 0 11
78678: PUSH
78679: DOUBLE
78680: LD_INT 1
78682: DEC
78683: ST_TO_ADDR
78684: LD_VAR 0 3
78688: PUSH
78689: FOR_TO
78690: IFFALSE 78793
// begin hc_class = class_apeman ;
78692: LD_ADDR_OWVAR 28
78696: PUSH
78697: LD_INT 12
78699: ST_TO_ADDR
// hc_gallery =  ;
78700: LD_ADDR_OWVAR 33
78704: PUSH
78705: LD_STRING 
78707: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
78708: LD_ADDR_OWVAR 35
78712: PUSH
78713: LD_INT 5
78715: NEG
78716: PPUSH
78717: LD_INT 5
78719: PPUSH
78720: CALL_OW 12
78724: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78725: LD_ADDR_OWVAR 31
78729: PUSH
78730: LD_INT 1
78732: PPUSH
78733: LD_INT 3
78735: PPUSH
78736: CALL_OW 12
78740: PUSH
78741: LD_INT 1
78743: PPUSH
78744: LD_INT 3
78746: PPUSH
78747: CALL_OW 12
78751: PUSH
78752: LD_INT 0
78754: PUSH
78755: LD_INT 0
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: LIST
78762: LIST
78763: ST_TO_ADDR
// animal := CreateHuman ;
78764: LD_ADDR_VAR 0 12
78768: PUSH
78769: CALL_OW 44
78773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78774: LD_VAR 0 12
78778: PPUSH
78779: LD_VAR 0 8
78783: PPUSH
78784: LD_INT 0
78786: PPUSH
78787: CALL 85144 0 3
// end ;
78791: GO 78689
78793: POP
78794: POP
// if enchidnas then
78795: LD_VAR 0 4
78799: IFFALSE 78866
// for i = 1 to enchidnas do
78801: LD_ADDR_VAR 0 11
78805: PUSH
78806: DOUBLE
78807: LD_INT 1
78809: DEC
78810: ST_TO_ADDR
78811: LD_VAR 0 4
78815: PUSH
78816: FOR_TO
78817: IFFALSE 78864
// begin hc_class = 13 ;
78819: LD_ADDR_OWVAR 28
78823: PUSH
78824: LD_INT 13
78826: ST_TO_ADDR
// hc_gallery =  ;
78827: LD_ADDR_OWVAR 33
78831: PUSH
78832: LD_STRING 
78834: ST_TO_ADDR
// animal := CreateHuman ;
78835: LD_ADDR_VAR 0 12
78839: PUSH
78840: CALL_OW 44
78844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78845: LD_VAR 0 12
78849: PPUSH
78850: LD_VAR 0 8
78854: PPUSH
78855: LD_INT 0
78857: PPUSH
78858: CALL 85144 0 3
// end ;
78862: GO 78816
78864: POP
78865: POP
// if fishes then
78866: LD_VAR 0 7
78870: IFFALSE 78937
// for i = 1 to fishes do
78872: LD_ADDR_VAR 0 11
78876: PUSH
78877: DOUBLE
78878: LD_INT 1
78880: DEC
78881: ST_TO_ADDR
78882: LD_VAR 0 7
78886: PUSH
78887: FOR_TO
78888: IFFALSE 78935
// begin hc_class = 20 ;
78890: LD_ADDR_OWVAR 28
78894: PUSH
78895: LD_INT 20
78897: ST_TO_ADDR
// hc_gallery =  ;
78898: LD_ADDR_OWVAR 33
78902: PUSH
78903: LD_STRING 
78905: ST_TO_ADDR
// animal := CreateHuman ;
78906: LD_ADDR_VAR 0 12
78910: PUSH
78911: CALL_OW 44
78915: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78916: LD_VAR 0 12
78920: PPUSH
78921: LD_VAR 0 9
78925: PPUSH
78926: LD_INT 0
78928: PPUSH
78929: CALL 85144 0 3
// end ;
78933: GO 78887
78935: POP
78936: POP
// end ;
78937: LD_VAR 0 10
78941: RET
// export function WantHeal ( sci , unit ) ; begin
78942: LD_INT 0
78944: PPUSH
// if GetTaskList ( sci ) > 0 then
78945: LD_VAR 0 1
78949: PPUSH
78950: CALL_OW 437
78954: PUSH
78955: LD_INT 0
78957: GREATER
78958: IFFALSE 79028
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78960: LD_VAR 0 1
78964: PPUSH
78965: CALL_OW 437
78969: PUSH
78970: LD_INT 1
78972: ARRAY
78973: PUSH
78974: LD_INT 1
78976: ARRAY
78977: PUSH
78978: LD_STRING l
78980: EQUAL
78981: PUSH
78982: LD_VAR 0 1
78986: PPUSH
78987: CALL_OW 437
78991: PUSH
78992: LD_INT 1
78994: ARRAY
78995: PUSH
78996: LD_INT 4
78998: ARRAY
78999: PUSH
79000: LD_VAR 0 2
79004: EQUAL
79005: AND
79006: IFFALSE 79018
// result := true else
79008: LD_ADDR_VAR 0 3
79012: PUSH
79013: LD_INT 1
79015: ST_TO_ADDR
79016: GO 79026
// result := false ;
79018: LD_ADDR_VAR 0 3
79022: PUSH
79023: LD_INT 0
79025: ST_TO_ADDR
// end else
79026: GO 79036
// result := false ;
79028: LD_ADDR_VAR 0 3
79032: PUSH
79033: LD_INT 0
79035: ST_TO_ADDR
// end ;
79036: LD_VAR 0 3
79040: RET
// export function HealTarget ( sci ) ; begin
79041: LD_INT 0
79043: PPUSH
// if not sci then
79044: LD_VAR 0 1
79048: NOT
79049: IFFALSE 79053
// exit ;
79051: GO 79118
// result := 0 ;
79053: LD_ADDR_VAR 0 2
79057: PUSH
79058: LD_INT 0
79060: ST_TO_ADDR
// if GetTaskList ( sci ) then
79061: LD_VAR 0 1
79065: PPUSH
79066: CALL_OW 437
79070: IFFALSE 79118
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79072: LD_VAR 0 1
79076: PPUSH
79077: CALL_OW 437
79081: PUSH
79082: LD_INT 1
79084: ARRAY
79085: PUSH
79086: LD_INT 1
79088: ARRAY
79089: PUSH
79090: LD_STRING l
79092: EQUAL
79093: IFFALSE 79118
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79095: LD_ADDR_VAR 0 2
79099: PUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: CALL_OW 437
79109: PUSH
79110: LD_INT 1
79112: ARRAY
79113: PUSH
79114: LD_INT 4
79116: ARRAY
79117: ST_TO_ADDR
// end ;
79118: LD_VAR 0 2
79122: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
79123: LD_INT 0
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
79129: PPUSH
79130: PPUSH
79131: PPUSH
79132: PPUSH
79133: PPUSH
79134: PPUSH
79135: PPUSH
79136: PPUSH
79137: PPUSH
79138: PPUSH
79139: PPUSH
79140: PPUSH
79141: PPUSH
79142: PPUSH
79143: PPUSH
79144: PPUSH
79145: PPUSH
79146: PPUSH
79147: PPUSH
79148: PPUSH
79149: PPUSH
79150: PPUSH
79151: PPUSH
79152: PPUSH
79153: PPUSH
79154: PPUSH
79155: PPUSH
79156: PPUSH
79157: PPUSH
// if not list then
79158: LD_VAR 0 1
79162: NOT
79163: IFFALSE 79167
// exit ;
79165: GO 83755
// base := list [ 1 ] ;
79167: LD_ADDR_VAR 0 3
79171: PUSH
79172: LD_VAR 0 1
79176: PUSH
79177: LD_INT 1
79179: ARRAY
79180: ST_TO_ADDR
// group := list [ 2 ] ;
79181: LD_ADDR_VAR 0 4
79185: PUSH
79186: LD_VAR 0 1
79190: PUSH
79191: LD_INT 2
79193: ARRAY
79194: ST_TO_ADDR
// path := list [ 3 ] ;
79195: LD_ADDR_VAR 0 5
79199: PUSH
79200: LD_VAR 0 1
79204: PUSH
79205: LD_INT 3
79207: ARRAY
79208: ST_TO_ADDR
// flags := list [ 4 ] ;
79209: LD_ADDR_VAR 0 6
79213: PUSH
79214: LD_VAR 0 1
79218: PUSH
79219: LD_INT 4
79221: ARRAY
79222: ST_TO_ADDR
// mined := [ ] ;
79223: LD_ADDR_VAR 0 27
79227: PUSH
79228: EMPTY
79229: ST_TO_ADDR
// bombed := [ ] ;
79230: LD_ADDR_VAR 0 28
79234: PUSH
79235: EMPTY
79236: ST_TO_ADDR
// healers := [ ] ;
79237: LD_ADDR_VAR 0 31
79241: PUSH
79242: EMPTY
79243: ST_TO_ADDR
// to_heal := [ ] ;
79244: LD_ADDR_VAR 0 30
79248: PUSH
79249: EMPTY
79250: ST_TO_ADDR
// repairs := [ ] ;
79251: LD_ADDR_VAR 0 33
79255: PUSH
79256: EMPTY
79257: ST_TO_ADDR
// to_repair := [ ] ;
79258: LD_ADDR_VAR 0 32
79262: PUSH
79263: EMPTY
79264: ST_TO_ADDR
// if not group or not path then
79265: LD_VAR 0 4
79269: NOT
79270: PUSH
79271: LD_VAR 0 5
79275: NOT
79276: OR
79277: IFFALSE 79281
// exit ;
79279: GO 83755
// if flags then
79281: LD_VAR 0 6
79285: IFFALSE 79429
// begin f_ignore_area := flags [ 1 ] ;
79287: LD_ADDR_VAR 0 17
79291: PUSH
79292: LD_VAR 0 6
79296: PUSH
79297: LD_INT 1
79299: ARRAY
79300: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
79301: LD_ADDR_VAR 0 18
79305: PUSH
79306: LD_VAR 0 6
79310: PUSH
79311: LD_INT 2
79313: ARRAY
79314: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
79315: LD_ADDR_VAR 0 19
79319: PUSH
79320: LD_VAR 0 6
79324: PUSH
79325: LD_INT 3
79327: ARRAY
79328: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
79329: LD_ADDR_VAR 0 20
79333: PUSH
79334: LD_VAR 0 6
79338: PUSH
79339: LD_INT 4
79341: ARRAY
79342: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
79343: LD_ADDR_VAR 0 21
79347: PUSH
79348: LD_VAR 0 6
79352: PUSH
79353: LD_INT 5
79355: ARRAY
79356: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
79357: LD_ADDR_VAR 0 22
79361: PUSH
79362: LD_VAR 0 6
79366: PUSH
79367: LD_INT 6
79369: ARRAY
79370: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
79371: LD_ADDR_VAR 0 23
79375: PUSH
79376: LD_VAR 0 6
79380: PUSH
79381: LD_INT 7
79383: ARRAY
79384: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
79385: LD_ADDR_VAR 0 24
79389: PUSH
79390: LD_VAR 0 6
79394: PUSH
79395: LD_INT 8
79397: ARRAY
79398: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
79399: LD_ADDR_VAR 0 25
79403: PUSH
79404: LD_VAR 0 6
79408: PUSH
79409: LD_INT 9
79411: ARRAY
79412: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
79413: LD_ADDR_VAR 0 26
79417: PUSH
79418: LD_VAR 0 6
79422: PUSH
79423: LD_INT 10
79425: ARRAY
79426: ST_TO_ADDR
// end else
79427: GO 79509
// begin f_ignore_area := false ;
79429: LD_ADDR_VAR 0 17
79433: PUSH
79434: LD_INT 0
79436: ST_TO_ADDR
// f_capture := false ;
79437: LD_ADDR_VAR 0 18
79441: PUSH
79442: LD_INT 0
79444: ST_TO_ADDR
// f_ignore_civ := false ;
79445: LD_ADDR_VAR 0 19
79449: PUSH
79450: LD_INT 0
79452: ST_TO_ADDR
// f_murder := false ;
79453: LD_ADDR_VAR 0 20
79457: PUSH
79458: LD_INT 0
79460: ST_TO_ADDR
// f_mines := false ;
79461: LD_ADDR_VAR 0 21
79465: PUSH
79466: LD_INT 0
79468: ST_TO_ADDR
// f_repair := false ;
79469: LD_ADDR_VAR 0 22
79473: PUSH
79474: LD_INT 0
79476: ST_TO_ADDR
// f_heal := false ;
79477: LD_ADDR_VAR 0 23
79481: PUSH
79482: LD_INT 0
79484: ST_TO_ADDR
// f_spacetime := false ;
79485: LD_ADDR_VAR 0 24
79489: PUSH
79490: LD_INT 0
79492: ST_TO_ADDR
// f_attack_depot := false ;
79493: LD_ADDR_VAR 0 25
79497: PUSH
79498: LD_INT 0
79500: ST_TO_ADDR
// f_crawl := false ;
79501: LD_ADDR_VAR 0 26
79505: PUSH
79506: LD_INT 0
79508: ST_TO_ADDR
// end ; if f_heal then
79509: LD_VAR 0 23
79513: IFFALSE 79540
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
79515: LD_ADDR_VAR 0 31
79519: PUSH
79520: LD_VAR 0 4
79524: PPUSH
79525: LD_INT 25
79527: PUSH
79528: LD_INT 4
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PPUSH
79535: CALL_OW 72
79539: ST_TO_ADDR
// if f_repair then
79540: LD_VAR 0 22
79544: IFFALSE 79571
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
79546: LD_ADDR_VAR 0 33
79550: PUSH
79551: LD_VAR 0 4
79555: PPUSH
79556: LD_INT 25
79558: PUSH
79559: LD_INT 3
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: PPUSH
79566: CALL_OW 72
79570: ST_TO_ADDR
// units_path := [ ] ;
79571: LD_ADDR_VAR 0 16
79575: PUSH
79576: EMPTY
79577: ST_TO_ADDR
// for i = 1 to group do
79578: LD_ADDR_VAR 0 7
79582: PUSH
79583: DOUBLE
79584: LD_INT 1
79586: DEC
79587: ST_TO_ADDR
79588: LD_VAR 0 4
79592: PUSH
79593: FOR_TO
79594: IFFALSE 79623
// units_path := Replace ( units_path , i , path ) ;
79596: LD_ADDR_VAR 0 16
79600: PUSH
79601: LD_VAR 0 16
79605: PPUSH
79606: LD_VAR 0 7
79610: PPUSH
79611: LD_VAR 0 5
79615: PPUSH
79616: CALL_OW 1
79620: ST_TO_ADDR
79621: GO 79593
79623: POP
79624: POP
// repeat for i = group downto 1 do
79625: LD_ADDR_VAR 0 7
79629: PUSH
79630: DOUBLE
79631: LD_VAR 0 4
79635: INC
79636: ST_TO_ADDR
79637: LD_INT 1
79639: PUSH
79640: FOR_DOWNTO
79641: IFFALSE 83737
// begin wait ( 5 ) ;
79643: LD_INT 5
79645: PPUSH
79646: CALL_OW 67
// tmp := [ ] ;
79650: LD_ADDR_VAR 0 14
79654: PUSH
79655: EMPTY
79656: ST_TO_ADDR
// attacking := false ;
79657: LD_ADDR_VAR 0 29
79661: PUSH
79662: LD_INT 0
79664: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
79665: LD_VAR 0 4
79669: PUSH
79670: LD_VAR 0 7
79674: ARRAY
79675: PPUSH
79676: CALL_OW 301
79680: PUSH
79681: LD_VAR 0 4
79685: PUSH
79686: LD_VAR 0 7
79690: ARRAY
79691: NOT
79692: OR
79693: IFFALSE 79802
// begin if GetType ( group [ i ] ) = unit_human then
79695: LD_VAR 0 4
79699: PUSH
79700: LD_VAR 0 7
79704: ARRAY
79705: PPUSH
79706: CALL_OW 247
79710: PUSH
79711: LD_INT 1
79713: EQUAL
79714: IFFALSE 79760
// begin to_heal := to_heal diff group [ i ] ;
79716: LD_ADDR_VAR 0 30
79720: PUSH
79721: LD_VAR 0 30
79725: PUSH
79726: LD_VAR 0 4
79730: PUSH
79731: LD_VAR 0 7
79735: ARRAY
79736: DIFF
79737: ST_TO_ADDR
// healers := healers diff group [ i ] ;
79738: LD_ADDR_VAR 0 31
79742: PUSH
79743: LD_VAR 0 31
79747: PUSH
79748: LD_VAR 0 4
79752: PUSH
79753: LD_VAR 0 7
79757: ARRAY
79758: DIFF
79759: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
79760: LD_ADDR_VAR 0 4
79764: PUSH
79765: LD_VAR 0 4
79769: PPUSH
79770: LD_VAR 0 7
79774: PPUSH
79775: CALL_OW 3
79779: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
79780: LD_ADDR_VAR 0 16
79784: PUSH
79785: LD_VAR 0 16
79789: PPUSH
79790: LD_VAR 0 7
79794: PPUSH
79795: CALL_OW 3
79799: ST_TO_ADDR
// continue ;
79800: GO 79640
// end ; if f_repair then
79802: LD_VAR 0 22
79806: IFFALSE 80295
// begin if GetType ( group [ i ] ) = unit_vehicle then
79808: LD_VAR 0 4
79812: PUSH
79813: LD_VAR 0 7
79817: ARRAY
79818: PPUSH
79819: CALL_OW 247
79823: PUSH
79824: LD_INT 2
79826: EQUAL
79827: IFFALSE 80017
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
79829: LD_VAR 0 4
79833: PUSH
79834: LD_VAR 0 7
79838: ARRAY
79839: PPUSH
79840: CALL_OW 256
79844: PUSH
79845: LD_INT 700
79847: LESS
79848: PUSH
79849: LD_VAR 0 4
79853: PUSH
79854: LD_VAR 0 7
79858: ARRAY
79859: PUSH
79860: LD_VAR 0 32
79864: IN
79865: NOT
79866: AND
79867: IFFALSE 79891
// to_repair := to_repair union group [ i ] ;
79869: LD_ADDR_VAR 0 32
79873: PUSH
79874: LD_VAR 0 32
79878: PUSH
79879: LD_VAR 0 4
79883: PUSH
79884: LD_VAR 0 7
79888: ARRAY
79889: UNION
79890: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
79891: LD_VAR 0 4
79895: PUSH
79896: LD_VAR 0 7
79900: ARRAY
79901: PPUSH
79902: CALL_OW 256
79906: PUSH
79907: LD_INT 1000
79909: EQUAL
79910: PUSH
79911: LD_VAR 0 4
79915: PUSH
79916: LD_VAR 0 7
79920: ARRAY
79921: PUSH
79922: LD_VAR 0 32
79926: IN
79927: AND
79928: IFFALSE 79952
// to_repair := to_repair diff group [ i ] ;
79930: LD_ADDR_VAR 0 32
79934: PUSH
79935: LD_VAR 0 32
79939: PUSH
79940: LD_VAR 0 4
79944: PUSH
79945: LD_VAR 0 7
79949: ARRAY
79950: DIFF
79951: ST_TO_ADDR
// if group [ i ] in to_repair then
79952: LD_VAR 0 4
79956: PUSH
79957: LD_VAR 0 7
79961: ARRAY
79962: PUSH
79963: LD_VAR 0 32
79967: IN
79968: IFFALSE 80015
// begin if not IsInArea ( group [ i ] , f_repair ) then
79970: LD_VAR 0 4
79974: PUSH
79975: LD_VAR 0 7
79979: ARRAY
79980: PPUSH
79981: LD_VAR 0 22
79985: PPUSH
79986: CALL_OW 308
79990: NOT
79991: IFFALSE 80013
// ComMoveToArea ( group [ i ] , f_repair ) ;
79993: LD_VAR 0 4
79997: PUSH
79998: LD_VAR 0 7
80002: ARRAY
80003: PPUSH
80004: LD_VAR 0 22
80008: PPUSH
80009: CALL_OW 113
// continue ;
80013: GO 79640
// end ; end else
80015: GO 80295
// if group [ i ] in repairs then
80017: LD_VAR 0 4
80021: PUSH
80022: LD_VAR 0 7
80026: ARRAY
80027: PUSH
80028: LD_VAR 0 33
80032: IN
80033: IFFALSE 80295
// begin if IsInUnit ( group [ i ] ) then
80035: LD_VAR 0 4
80039: PUSH
80040: LD_VAR 0 7
80044: ARRAY
80045: PPUSH
80046: CALL_OW 310
80050: IFFALSE 80118
// begin z := IsInUnit ( group [ i ] ) ;
80052: LD_ADDR_VAR 0 13
80056: PUSH
80057: LD_VAR 0 4
80061: PUSH
80062: LD_VAR 0 7
80066: ARRAY
80067: PPUSH
80068: CALL_OW 310
80072: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
80073: LD_VAR 0 13
80077: PUSH
80078: LD_VAR 0 32
80082: IN
80083: PUSH
80084: LD_VAR 0 13
80088: PPUSH
80089: LD_VAR 0 22
80093: PPUSH
80094: CALL_OW 308
80098: AND
80099: IFFALSE 80116
// ComExitVehicle ( group [ i ] ) ;
80101: LD_VAR 0 4
80105: PUSH
80106: LD_VAR 0 7
80110: ARRAY
80111: PPUSH
80112: CALL_OW 121
// end else
80116: GO 80295
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
80118: LD_ADDR_VAR 0 13
80122: PUSH
80123: LD_VAR 0 4
80127: PPUSH
80128: LD_INT 95
80130: PUSH
80131: LD_VAR 0 22
80135: PUSH
80136: EMPTY
80137: LIST
80138: LIST
80139: PUSH
80140: LD_INT 58
80142: PUSH
80143: EMPTY
80144: LIST
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PPUSH
80150: CALL_OW 72
80154: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
80155: LD_VAR 0 4
80159: PUSH
80160: LD_VAR 0 7
80164: ARRAY
80165: PPUSH
80166: CALL_OW 314
80170: NOT
80171: IFFALSE 80293
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
80173: LD_ADDR_VAR 0 10
80177: PUSH
80178: LD_VAR 0 13
80182: PPUSH
80183: LD_VAR 0 4
80187: PUSH
80188: LD_VAR 0 7
80192: ARRAY
80193: PPUSH
80194: CALL_OW 74
80198: ST_TO_ADDR
// if not x then
80199: LD_VAR 0 10
80203: NOT
80204: IFFALSE 80208
// continue ;
80206: GO 79640
// if GetLives ( x ) < 1000 then
80208: LD_VAR 0 10
80212: PPUSH
80213: CALL_OW 256
80217: PUSH
80218: LD_INT 1000
80220: LESS
80221: IFFALSE 80245
// ComRepairVehicle ( group [ i ] , x ) else
80223: LD_VAR 0 4
80227: PUSH
80228: LD_VAR 0 7
80232: ARRAY
80233: PPUSH
80234: LD_VAR 0 10
80238: PPUSH
80239: CALL_OW 129
80243: GO 80293
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
80245: LD_VAR 0 23
80249: PUSH
80250: LD_VAR 0 4
80254: PUSH
80255: LD_VAR 0 7
80259: ARRAY
80260: PPUSH
80261: CALL_OW 256
80265: PUSH
80266: LD_INT 1000
80268: LESS
80269: AND
80270: NOT
80271: IFFALSE 80293
// ComEnterUnit ( group [ i ] , x ) ;
80273: LD_VAR 0 4
80277: PUSH
80278: LD_VAR 0 7
80282: ARRAY
80283: PPUSH
80284: LD_VAR 0 10
80288: PPUSH
80289: CALL_OW 120
// end ; continue ;
80293: GO 79640
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
80295: LD_VAR 0 23
80299: PUSH
80300: LD_VAR 0 4
80304: PUSH
80305: LD_VAR 0 7
80309: ARRAY
80310: PPUSH
80311: CALL_OW 247
80315: PUSH
80316: LD_INT 1
80318: EQUAL
80319: AND
80320: IFFALSE 80798
// begin if group [ i ] in healers then
80322: LD_VAR 0 4
80326: PUSH
80327: LD_VAR 0 7
80331: ARRAY
80332: PUSH
80333: LD_VAR 0 31
80337: IN
80338: IFFALSE 80611
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
80340: LD_VAR 0 4
80344: PUSH
80345: LD_VAR 0 7
80349: ARRAY
80350: PPUSH
80351: LD_VAR 0 23
80355: PPUSH
80356: CALL_OW 308
80360: NOT
80361: PUSH
80362: LD_VAR 0 4
80366: PUSH
80367: LD_VAR 0 7
80371: ARRAY
80372: PPUSH
80373: CALL_OW 314
80377: NOT
80378: AND
80379: IFFALSE 80403
// ComMoveToArea ( group [ i ] , f_heal ) else
80381: LD_VAR 0 4
80385: PUSH
80386: LD_VAR 0 7
80390: ARRAY
80391: PPUSH
80392: LD_VAR 0 23
80396: PPUSH
80397: CALL_OW 113
80401: GO 80609
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
80403: LD_VAR 0 4
80407: PUSH
80408: LD_VAR 0 7
80412: ARRAY
80413: PPUSH
80414: CALL 79041 0 1
80418: PPUSH
80419: CALL_OW 256
80423: PUSH
80424: LD_INT 1000
80426: EQUAL
80427: IFFALSE 80446
// ComStop ( group [ i ] ) else
80429: LD_VAR 0 4
80433: PUSH
80434: LD_VAR 0 7
80438: ARRAY
80439: PPUSH
80440: CALL_OW 141
80444: GO 80609
// if not HasTask ( group [ i ] ) and to_heal then
80446: LD_VAR 0 4
80450: PUSH
80451: LD_VAR 0 7
80455: ARRAY
80456: PPUSH
80457: CALL_OW 314
80461: NOT
80462: PUSH
80463: LD_VAR 0 30
80467: AND
80468: IFFALSE 80609
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
80470: LD_ADDR_VAR 0 13
80474: PUSH
80475: LD_VAR 0 30
80479: PPUSH
80480: LD_INT 3
80482: PUSH
80483: LD_INT 54
80485: PUSH
80486: EMPTY
80487: LIST
80488: PUSH
80489: EMPTY
80490: LIST
80491: LIST
80492: PPUSH
80493: CALL_OW 72
80497: PPUSH
80498: LD_VAR 0 4
80502: PUSH
80503: LD_VAR 0 7
80507: ARRAY
80508: PPUSH
80509: CALL_OW 74
80513: ST_TO_ADDR
// if z then
80514: LD_VAR 0 13
80518: IFFALSE 80609
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
80520: LD_INT 91
80522: PUSH
80523: LD_VAR 0 13
80527: PUSH
80528: LD_INT 10
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: LIST
80535: PUSH
80536: LD_INT 81
80538: PUSH
80539: LD_VAR 0 13
80543: PPUSH
80544: CALL_OW 255
80548: PUSH
80549: EMPTY
80550: LIST
80551: LIST
80552: PUSH
80553: EMPTY
80554: LIST
80555: LIST
80556: PPUSH
80557: CALL_OW 69
80561: PUSH
80562: LD_INT 0
80564: EQUAL
80565: IFFALSE 80589
// ComHeal ( group [ i ] , z ) else
80567: LD_VAR 0 4
80571: PUSH
80572: LD_VAR 0 7
80576: ARRAY
80577: PPUSH
80578: LD_VAR 0 13
80582: PPUSH
80583: CALL_OW 128
80587: GO 80609
// ComMoveToArea ( group [ i ] , f_heal ) ;
80589: LD_VAR 0 4
80593: PUSH
80594: LD_VAR 0 7
80598: ARRAY
80599: PPUSH
80600: LD_VAR 0 23
80604: PPUSH
80605: CALL_OW 113
// end ; continue ;
80609: GO 79640
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
80611: LD_VAR 0 4
80615: PUSH
80616: LD_VAR 0 7
80620: ARRAY
80621: PPUSH
80622: CALL_OW 256
80626: PUSH
80627: LD_INT 700
80629: LESS
80630: PUSH
80631: LD_VAR 0 4
80635: PUSH
80636: LD_VAR 0 7
80640: ARRAY
80641: PUSH
80642: LD_VAR 0 30
80646: IN
80647: NOT
80648: AND
80649: IFFALSE 80673
// to_heal := to_heal union group [ i ] ;
80651: LD_ADDR_VAR 0 30
80655: PUSH
80656: LD_VAR 0 30
80660: PUSH
80661: LD_VAR 0 4
80665: PUSH
80666: LD_VAR 0 7
80670: ARRAY
80671: UNION
80672: ST_TO_ADDR
// if group [ i ] in to_heal then
80673: LD_VAR 0 4
80677: PUSH
80678: LD_VAR 0 7
80682: ARRAY
80683: PUSH
80684: LD_VAR 0 30
80688: IN
80689: IFFALSE 80798
// begin if GetLives ( group [ i ] ) = 1000 then
80691: LD_VAR 0 4
80695: PUSH
80696: LD_VAR 0 7
80700: ARRAY
80701: PPUSH
80702: CALL_OW 256
80706: PUSH
80707: LD_INT 1000
80709: EQUAL
80710: IFFALSE 80736
// to_heal := to_heal diff group [ i ] else
80712: LD_ADDR_VAR 0 30
80716: PUSH
80717: LD_VAR 0 30
80721: PUSH
80722: LD_VAR 0 4
80726: PUSH
80727: LD_VAR 0 7
80731: ARRAY
80732: DIFF
80733: ST_TO_ADDR
80734: GO 80798
// begin if not IsInArea ( group [ i ] , to_heal ) then
80736: LD_VAR 0 4
80740: PUSH
80741: LD_VAR 0 7
80745: ARRAY
80746: PPUSH
80747: LD_VAR 0 30
80751: PPUSH
80752: CALL_OW 308
80756: NOT
80757: IFFALSE 80781
// ComMoveToArea ( group [ i ] , f_heal ) else
80759: LD_VAR 0 4
80763: PUSH
80764: LD_VAR 0 7
80768: ARRAY
80769: PPUSH
80770: LD_VAR 0 23
80774: PPUSH
80775: CALL_OW 113
80779: GO 80796
// ComHold ( group [ i ] ) ;
80781: LD_VAR 0 4
80785: PUSH
80786: LD_VAR 0 7
80790: ARRAY
80791: PPUSH
80792: CALL_OW 140
// continue ;
80796: GO 79640
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
80798: LD_VAR 0 4
80802: PUSH
80803: LD_VAR 0 7
80807: ARRAY
80808: PPUSH
80809: LD_INT 10
80811: PPUSH
80812: CALL 77438 0 2
80816: NOT
80817: PUSH
80818: LD_VAR 0 16
80822: PUSH
80823: LD_VAR 0 7
80827: ARRAY
80828: PUSH
80829: EMPTY
80830: EQUAL
80831: NOT
80832: AND
80833: IFFALSE 81099
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
80835: LD_VAR 0 4
80839: PUSH
80840: LD_VAR 0 7
80844: ARRAY
80845: PPUSH
80846: CALL_OW 262
80850: PUSH
80851: LD_INT 1
80853: PUSH
80854: LD_INT 2
80856: PUSH
80857: EMPTY
80858: LIST
80859: LIST
80860: IN
80861: IFFALSE 80902
// if GetFuel ( group [ i ] ) < 10 then
80863: LD_VAR 0 4
80867: PUSH
80868: LD_VAR 0 7
80872: ARRAY
80873: PPUSH
80874: CALL_OW 261
80878: PUSH
80879: LD_INT 10
80881: LESS
80882: IFFALSE 80902
// SetFuel ( group [ i ] , 12 ) ;
80884: LD_VAR 0 4
80888: PUSH
80889: LD_VAR 0 7
80893: ARRAY
80894: PPUSH
80895: LD_INT 12
80897: PPUSH
80898: CALL_OW 240
// if units_path [ i ] then
80902: LD_VAR 0 16
80906: PUSH
80907: LD_VAR 0 7
80911: ARRAY
80912: IFFALSE 81097
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
80914: LD_VAR 0 4
80918: PUSH
80919: LD_VAR 0 7
80923: ARRAY
80924: PPUSH
80925: LD_VAR 0 16
80929: PUSH
80930: LD_VAR 0 7
80934: ARRAY
80935: PUSH
80936: LD_INT 1
80938: ARRAY
80939: PUSH
80940: LD_INT 1
80942: ARRAY
80943: PPUSH
80944: LD_VAR 0 16
80948: PUSH
80949: LD_VAR 0 7
80953: ARRAY
80954: PUSH
80955: LD_INT 1
80957: ARRAY
80958: PUSH
80959: LD_INT 2
80961: ARRAY
80962: PPUSH
80963: CALL_OW 297
80967: PUSH
80968: LD_INT 6
80970: GREATER
80971: IFFALSE 81046
// begin if not HasTask ( group [ i ] ) then
80973: LD_VAR 0 4
80977: PUSH
80978: LD_VAR 0 7
80982: ARRAY
80983: PPUSH
80984: CALL_OW 314
80988: NOT
80989: IFFALSE 81044
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
80991: LD_VAR 0 4
80995: PUSH
80996: LD_VAR 0 7
81000: ARRAY
81001: PPUSH
81002: LD_VAR 0 16
81006: PUSH
81007: LD_VAR 0 7
81011: ARRAY
81012: PUSH
81013: LD_INT 1
81015: ARRAY
81016: PUSH
81017: LD_INT 1
81019: ARRAY
81020: PPUSH
81021: LD_VAR 0 16
81025: PUSH
81026: LD_VAR 0 7
81030: ARRAY
81031: PUSH
81032: LD_INT 1
81034: ARRAY
81035: PUSH
81036: LD_INT 2
81038: ARRAY
81039: PPUSH
81040: CALL_OW 114
// end else
81044: GO 81097
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
81046: LD_ADDR_VAR 0 15
81050: PUSH
81051: LD_VAR 0 16
81055: PUSH
81056: LD_VAR 0 7
81060: ARRAY
81061: PPUSH
81062: LD_INT 1
81064: PPUSH
81065: CALL_OW 3
81069: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
81070: LD_ADDR_VAR 0 16
81074: PUSH
81075: LD_VAR 0 16
81079: PPUSH
81080: LD_VAR 0 7
81084: PPUSH
81085: LD_VAR 0 15
81089: PPUSH
81090: CALL_OW 1
81094: ST_TO_ADDR
// continue ;
81095: GO 79640
// end ; end ; end else
81097: GO 83735
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
81099: LD_ADDR_VAR 0 14
81103: PUSH
81104: LD_INT 81
81106: PUSH
81107: LD_VAR 0 4
81111: PUSH
81112: LD_VAR 0 7
81116: ARRAY
81117: PPUSH
81118: CALL_OW 255
81122: PUSH
81123: EMPTY
81124: LIST
81125: LIST
81126: PPUSH
81127: CALL_OW 69
81131: ST_TO_ADDR
// if not tmp then
81132: LD_VAR 0 14
81136: NOT
81137: IFFALSE 81141
// continue ;
81139: GO 79640
// if f_ignore_area then
81141: LD_VAR 0 17
81145: IFFALSE 81233
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
81147: LD_ADDR_VAR 0 15
81151: PUSH
81152: LD_VAR 0 14
81156: PPUSH
81157: LD_INT 3
81159: PUSH
81160: LD_INT 92
81162: PUSH
81163: LD_VAR 0 17
81167: PUSH
81168: LD_INT 1
81170: ARRAY
81171: PUSH
81172: LD_VAR 0 17
81176: PUSH
81177: LD_INT 2
81179: ARRAY
81180: PUSH
81181: LD_VAR 0 17
81185: PUSH
81186: LD_INT 3
81188: ARRAY
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: LIST
81194: LIST
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PPUSH
81200: CALL_OW 72
81204: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81205: LD_VAR 0 14
81209: PUSH
81210: LD_VAR 0 15
81214: DIFF
81215: IFFALSE 81233
// tmp := tmp diff tmp2 ;
81217: LD_ADDR_VAR 0 14
81221: PUSH
81222: LD_VAR 0 14
81226: PUSH
81227: LD_VAR 0 15
81231: DIFF
81232: ST_TO_ADDR
// end ; if not f_murder then
81233: LD_VAR 0 20
81237: NOT
81238: IFFALSE 81296
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
81240: LD_ADDR_VAR 0 15
81244: PUSH
81245: LD_VAR 0 14
81249: PPUSH
81250: LD_INT 3
81252: PUSH
81253: LD_INT 50
81255: PUSH
81256: EMPTY
81257: LIST
81258: PUSH
81259: EMPTY
81260: LIST
81261: LIST
81262: PPUSH
81263: CALL_OW 72
81267: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81268: LD_VAR 0 14
81272: PUSH
81273: LD_VAR 0 15
81277: DIFF
81278: IFFALSE 81296
// tmp := tmp diff tmp2 ;
81280: LD_ADDR_VAR 0 14
81284: PUSH
81285: LD_VAR 0 14
81289: PUSH
81290: LD_VAR 0 15
81294: DIFF
81295: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
81296: LD_ADDR_VAR 0 14
81300: PUSH
81301: LD_VAR 0 4
81305: PUSH
81306: LD_VAR 0 7
81310: ARRAY
81311: PPUSH
81312: LD_VAR 0 14
81316: PPUSH
81317: LD_INT 1
81319: PPUSH
81320: LD_INT 1
81322: PPUSH
81323: CALL 51320 0 4
81327: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
81328: LD_VAR 0 4
81332: PUSH
81333: LD_VAR 0 7
81337: ARRAY
81338: PPUSH
81339: CALL_OW 257
81343: PUSH
81344: LD_INT 1
81346: EQUAL
81347: IFFALSE 81795
// begin if WantPlant ( group [ i ] ) then
81349: LD_VAR 0 4
81353: PUSH
81354: LD_VAR 0 7
81358: ARRAY
81359: PPUSH
81360: CALL 50788 0 1
81364: IFFALSE 81368
// continue ;
81366: GO 79640
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
81368: LD_VAR 0 18
81372: PUSH
81373: LD_VAR 0 4
81377: PUSH
81378: LD_VAR 0 7
81382: ARRAY
81383: PPUSH
81384: CALL_OW 310
81388: NOT
81389: AND
81390: PUSH
81391: LD_VAR 0 14
81395: PUSH
81396: LD_INT 1
81398: ARRAY
81399: PUSH
81400: LD_VAR 0 14
81404: PPUSH
81405: LD_INT 21
81407: PUSH
81408: LD_INT 2
81410: PUSH
81411: EMPTY
81412: LIST
81413: LIST
81414: PUSH
81415: LD_INT 58
81417: PUSH
81418: EMPTY
81419: LIST
81420: PUSH
81421: EMPTY
81422: LIST
81423: LIST
81424: PPUSH
81425: CALL_OW 72
81429: IN
81430: AND
81431: IFFALSE 81467
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
81433: LD_VAR 0 4
81437: PUSH
81438: LD_VAR 0 7
81442: ARRAY
81443: PPUSH
81444: LD_VAR 0 14
81448: PUSH
81449: LD_INT 1
81451: ARRAY
81452: PPUSH
81453: CALL_OW 120
// attacking := true ;
81457: LD_ADDR_VAR 0 29
81461: PUSH
81462: LD_INT 1
81464: ST_TO_ADDR
// continue ;
81465: GO 79640
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
81467: LD_VAR 0 26
81471: PUSH
81472: LD_VAR 0 4
81476: PUSH
81477: LD_VAR 0 7
81481: ARRAY
81482: PPUSH
81483: CALL_OW 257
81487: PUSH
81488: LD_INT 1
81490: EQUAL
81491: AND
81492: PUSH
81493: LD_VAR 0 4
81497: PUSH
81498: LD_VAR 0 7
81502: ARRAY
81503: PPUSH
81504: CALL_OW 256
81508: PUSH
81509: LD_INT 800
81511: LESS
81512: AND
81513: PUSH
81514: LD_VAR 0 4
81518: PUSH
81519: LD_VAR 0 7
81523: ARRAY
81524: PPUSH
81525: CALL_OW 318
81529: NOT
81530: AND
81531: IFFALSE 81548
// ComCrawl ( group [ i ] ) ;
81533: LD_VAR 0 4
81537: PUSH
81538: LD_VAR 0 7
81542: ARRAY
81543: PPUSH
81544: CALL_OW 137
// if f_mines then
81548: LD_VAR 0 21
81552: IFFALSE 81795
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
81554: LD_VAR 0 14
81558: PUSH
81559: LD_INT 1
81561: ARRAY
81562: PPUSH
81563: CALL_OW 247
81567: PUSH
81568: LD_INT 3
81570: EQUAL
81571: PUSH
81572: LD_VAR 0 14
81576: PUSH
81577: LD_INT 1
81579: ARRAY
81580: PUSH
81581: LD_VAR 0 27
81585: IN
81586: NOT
81587: AND
81588: IFFALSE 81795
// begin x := GetX ( tmp [ 1 ] ) ;
81590: LD_ADDR_VAR 0 10
81594: PUSH
81595: LD_VAR 0 14
81599: PUSH
81600: LD_INT 1
81602: ARRAY
81603: PPUSH
81604: CALL_OW 250
81608: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
81609: LD_ADDR_VAR 0 11
81613: PUSH
81614: LD_VAR 0 14
81618: PUSH
81619: LD_INT 1
81621: ARRAY
81622: PPUSH
81623: CALL_OW 251
81627: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
81628: LD_ADDR_VAR 0 12
81632: PUSH
81633: LD_VAR 0 4
81637: PUSH
81638: LD_VAR 0 7
81642: ARRAY
81643: PPUSH
81644: CALL 77523 0 1
81648: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
81649: LD_VAR 0 4
81653: PUSH
81654: LD_VAR 0 7
81658: ARRAY
81659: PPUSH
81660: LD_VAR 0 10
81664: PPUSH
81665: LD_VAR 0 11
81669: PPUSH
81670: LD_VAR 0 14
81674: PUSH
81675: LD_INT 1
81677: ARRAY
81678: PPUSH
81679: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
81683: LD_VAR 0 4
81687: PUSH
81688: LD_VAR 0 7
81692: ARRAY
81693: PPUSH
81694: LD_VAR 0 10
81698: PPUSH
81699: LD_VAR 0 12
81703: PPUSH
81704: LD_INT 7
81706: PPUSH
81707: CALL_OW 272
81711: PPUSH
81712: LD_VAR 0 11
81716: PPUSH
81717: LD_VAR 0 12
81721: PPUSH
81722: LD_INT 7
81724: PPUSH
81725: CALL_OW 273
81729: PPUSH
81730: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
81734: LD_VAR 0 4
81738: PUSH
81739: LD_VAR 0 7
81743: ARRAY
81744: PPUSH
81745: LD_INT 71
81747: PPUSH
81748: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
81752: LD_ADDR_VAR 0 27
81756: PUSH
81757: LD_VAR 0 27
81761: PPUSH
81762: LD_VAR 0 27
81766: PUSH
81767: LD_INT 1
81769: PLUS
81770: PPUSH
81771: LD_VAR 0 14
81775: PUSH
81776: LD_INT 1
81778: ARRAY
81779: PPUSH
81780: CALL_OW 1
81784: ST_TO_ADDR
// attacking := true ;
81785: LD_ADDR_VAR 0 29
81789: PUSH
81790: LD_INT 1
81792: ST_TO_ADDR
// continue ;
81793: GO 79640
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
81795: LD_VAR 0 4
81799: PUSH
81800: LD_VAR 0 7
81804: ARRAY
81805: PPUSH
81806: CALL_OW 257
81810: PUSH
81811: LD_INT 17
81813: EQUAL
81814: PUSH
81815: LD_VAR 0 4
81819: PUSH
81820: LD_VAR 0 7
81824: ARRAY
81825: PPUSH
81826: CALL_OW 110
81830: PUSH
81831: LD_INT 71
81833: EQUAL
81834: NOT
81835: AND
81836: IFFALSE 81982
// begin attacking := false ;
81838: LD_ADDR_VAR 0 29
81842: PUSH
81843: LD_INT 0
81845: ST_TO_ADDR
// k := 5 ;
81846: LD_ADDR_VAR 0 9
81850: PUSH
81851: LD_INT 5
81853: ST_TO_ADDR
// if tmp < k then
81854: LD_VAR 0 14
81858: PUSH
81859: LD_VAR 0 9
81863: LESS
81864: IFFALSE 81876
// k := tmp ;
81866: LD_ADDR_VAR 0 9
81870: PUSH
81871: LD_VAR 0 14
81875: ST_TO_ADDR
// for j = 1 to k do
81876: LD_ADDR_VAR 0 8
81880: PUSH
81881: DOUBLE
81882: LD_INT 1
81884: DEC
81885: ST_TO_ADDR
81886: LD_VAR 0 9
81890: PUSH
81891: FOR_TO
81892: IFFALSE 81980
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
81894: LD_VAR 0 14
81898: PUSH
81899: LD_VAR 0 8
81903: ARRAY
81904: PUSH
81905: LD_VAR 0 14
81909: PPUSH
81910: LD_INT 58
81912: PUSH
81913: EMPTY
81914: LIST
81915: PPUSH
81916: CALL_OW 72
81920: IN
81921: NOT
81922: IFFALSE 81978
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
81924: LD_VAR 0 4
81928: PUSH
81929: LD_VAR 0 7
81933: ARRAY
81934: PPUSH
81935: LD_VAR 0 14
81939: PUSH
81940: LD_VAR 0 8
81944: ARRAY
81945: PPUSH
81946: CALL_OW 115
// attacking := true ;
81950: LD_ADDR_VAR 0 29
81954: PUSH
81955: LD_INT 1
81957: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
81958: LD_VAR 0 4
81962: PUSH
81963: LD_VAR 0 7
81967: ARRAY
81968: PPUSH
81969: LD_INT 71
81971: PPUSH
81972: CALL_OW 109
// continue ;
81976: GO 81891
// end ; end ;
81978: GO 81891
81980: POP
81981: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
81982: LD_VAR 0 4
81986: PUSH
81987: LD_VAR 0 7
81991: ARRAY
81992: PPUSH
81993: CALL_OW 257
81997: PUSH
81998: LD_INT 8
82000: EQUAL
82001: PUSH
82002: LD_VAR 0 4
82006: PUSH
82007: LD_VAR 0 7
82011: ARRAY
82012: PPUSH
82013: CALL_OW 264
82017: PUSH
82018: LD_INT 28
82020: PUSH
82021: LD_INT 45
82023: PUSH
82024: LD_INT 7
82026: PUSH
82027: LD_INT 47
82029: PUSH
82030: EMPTY
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: IN
82036: OR
82037: IFFALSE 82267
// begin attacking := false ;
82039: LD_ADDR_VAR 0 29
82043: PUSH
82044: LD_INT 0
82046: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
82047: LD_VAR 0 14
82051: PUSH
82052: LD_INT 1
82054: ARRAY
82055: PPUSH
82056: CALL_OW 266
82060: PUSH
82061: LD_INT 32
82063: PUSH
82064: LD_INT 31
82066: PUSH
82067: LD_INT 33
82069: PUSH
82070: LD_INT 4
82072: PUSH
82073: LD_INT 5
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: LIST
82080: LIST
82081: LIST
82082: IN
82083: IFFALSE 82267
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
82085: LD_ADDR_VAR 0 9
82089: PUSH
82090: LD_VAR 0 14
82094: PUSH
82095: LD_INT 1
82097: ARRAY
82098: PPUSH
82099: CALL_OW 266
82103: PPUSH
82104: LD_VAR 0 14
82108: PUSH
82109: LD_INT 1
82111: ARRAY
82112: PPUSH
82113: CALL_OW 250
82117: PPUSH
82118: LD_VAR 0 14
82122: PUSH
82123: LD_INT 1
82125: ARRAY
82126: PPUSH
82127: CALL_OW 251
82131: PPUSH
82132: LD_VAR 0 14
82136: PUSH
82137: LD_INT 1
82139: ARRAY
82140: PPUSH
82141: CALL_OW 254
82145: PPUSH
82146: LD_VAR 0 14
82150: PUSH
82151: LD_INT 1
82153: ARRAY
82154: PPUSH
82155: CALL_OW 248
82159: PPUSH
82160: LD_INT 0
82162: PPUSH
82163: CALL 58899 0 6
82167: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
82168: LD_ADDR_VAR 0 8
82172: PUSH
82173: LD_VAR 0 4
82177: PUSH
82178: LD_VAR 0 7
82182: ARRAY
82183: PPUSH
82184: LD_VAR 0 9
82188: PPUSH
82189: CALL 77586 0 2
82193: ST_TO_ADDR
// if j then
82194: LD_VAR 0 8
82198: IFFALSE 82267
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
82200: LD_VAR 0 8
82204: PUSH
82205: LD_INT 1
82207: ARRAY
82208: PPUSH
82209: LD_VAR 0 8
82213: PUSH
82214: LD_INT 2
82216: ARRAY
82217: PPUSH
82218: CALL_OW 488
82222: IFFALSE 82267
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
82224: LD_VAR 0 4
82228: PUSH
82229: LD_VAR 0 7
82233: ARRAY
82234: PPUSH
82235: LD_VAR 0 8
82239: PUSH
82240: LD_INT 1
82242: ARRAY
82243: PPUSH
82244: LD_VAR 0 8
82248: PUSH
82249: LD_INT 2
82251: ARRAY
82252: PPUSH
82253: CALL_OW 116
// attacking := true ;
82257: LD_ADDR_VAR 0 29
82261: PUSH
82262: LD_INT 1
82264: ST_TO_ADDR
// continue ;
82265: GO 79640
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
82267: LD_VAR 0 4
82271: PUSH
82272: LD_VAR 0 7
82276: ARRAY
82277: PPUSH
82278: CALL_OW 265
82282: PUSH
82283: LD_INT 11
82285: EQUAL
82286: IFFALSE 82564
// begin k := 10 ;
82288: LD_ADDR_VAR 0 9
82292: PUSH
82293: LD_INT 10
82295: ST_TO_ADDR
// x := 0 ;
82296: LD_ADDR_VAR 0 10
82300: PUSH
82301: LD_INT 0
82303: ST_TO_ADDR
// if tmp < k then
82304: LD_VAR 0 14
82308: PUSH
82309: LD_VAR 0 9
82313: LESS
82314: IFFALSE 82326
// k := tmp ;
82316: LD_ADDR_VAR 0 9
82320: PUSH
82321: LD_VAR 0 14
82325: ST_TO_ADDR
// for j = k downto 1 do
82326: LD_ADDR_VAR 0 8
82330: PUSH
82331: DOUBLE
82332: LD_VAR 0 9
82336: INC
82337: ST_TO_ADDR
82338: LD_INT 1
82340: PUSH
82341: FOR_DOWNTO
82342: IFFALSE 82417
// begin if GetType ( tmp [ j ] ) = unit_human then
82344: LD_VAR 0 14
82348: PUSH
82349: LD_VAR 0 8
82353: ARRAY
82354: PPUSH
82355: CALL_OW 247
82359: PUSH
82360: LD_INT 1
82362: EQUAL
82363: IFFALSE 82415
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
82365: LD_VAR 0 4
82369: PUSH
82370: LD_VAR 0 7
82374: ARRAY
82375: PPUSH
82376: LD_VAR 0 14
82380: PUSH
82381: LD_VAR 0 8
82385: ARRAY
82386: PPUSH
82387: CALL 77857 0 2
// x := tmp [ j ] ;
82391: LD_ADDR_VAR 0 10
82395: PUSH
82396: LD_VAR 0 14
82400: PUSH
82401: LD_VAR 0 8
82405: ARRAY
82406: ST_TO_ADDR
// attacking := true ;
82407: LD_ADDR_VAR 0 29
82411: PUSH
82412: LD_INT 1
82414: ST_TO_ADDR
// end ; end ;
82415: GO 82341
82417: POP
82418: POP
// if not x then
82419: LD_VAR 0 10
82423: NOT
82424: IFFALSE 82564
// begin attacking := true ;
82426: LD_ADDR_VAR 0 29
82430: PUSH
82431: LD_INT 1
82433: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
82434: LD_VAR 0 4
82438: PUSH
82439: LD_VAR 0 7
82443: ARRAY
82444: PPUSH
82445: CALL_OW 250
82449: PPUSH
82450: LD_VAR 0 4
82454: PUSH
82455: LD_VAR 0 7
82459: ARRAY
82460: PPUSH
82461: CALL_OW 251
82465: PPUSH
82466: CALL_OW 546
82470: PUSH
82471: LD_INT 2
82473: ARRAY
82474: PUSH
82475: LD_VAR 0 14
82479: PUSH
82480: LD_INT 1
82482: ARRAY
82483: PPUSH
82484: CALL_OW 250
82488: PPUSH
82489: LD_VAR 0 14
82493: PUSH
82494: LD_INT 1
82496: ARRAY
82497: PPUSH
82498: CALL_OW 251
82502: PPUSH
82503: CALL_OW 546
82507: PUSH
82508: LD_INT 2
82510: ARRAY
82511: EQUAL
82512: IFFALSE 82540
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
82514: LD_VAR 0 4
82518: PUSH
82519: LD_VAR 0 7
82523: ARRAY
82524: PPUSH
82525: LD_VAR 0 14
82529: PUSH
82530: LD_INT 1
82532: ARRAY
82533: PPUSH
82534: CALL 77857 0 2
82538: GO 82564
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
82540: LD_VAR 0 4
82544: PUSH
82545: LD_VAR 0 7
82549: ARRAY
82550: PPUSH
82551: LD_VAR 0 14
82555: PUSH
82556: LD_INT 1
82558: ARRAY
82559: PPUSH
82560: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
82564: LD_VAR 0 4
82568: PUSH
82569: LD_VAR 0 7
82573: ARRAY
82574: PPUSH
82575: CALL_OW 264
82579: PUSH
82580: LD_INT 29
82582: EQUAL
82583: IFFALSE 82949
// begin if WantsToAttack ( group [ i ] ) in bombed then
82585: LD_VAR 0 4
82589: PUSH
82590: LD_VAR 0 7
82594: ARRAY
82595: PPUSH
82596: CALL_OW 319
82600: PUSH
82601: LD_VAR 0 28
82605: IN
82606: IFFALSE 82610
// continue ;
82608: GO 79640
// k := 8 ;
82610: LD_ADDR_VAR 0 9
82614: PUSH
82615: LD_INT 8
82617: ST_TO_ADDR
// x := 0 ;
82618: LD_ADDR_VAR 0 10
82622: PUSH
82623: LD_INT 0
82625: ST_TO_ADDR
// if tmp < k then
82626: LD_VAR 0 14
82630: PUSH
82631: LD_VAR 0 9
82635: LESS
82636: IFFALSE 82648
// k := tmp ;
82638: LD_ADDR_VAR 0 9
82642: PUSH
82643: LD_VAR 0 14
82647: ST_TO_ADDR
// for j = 1 to k do
82648: LD_ADDR_VAR 0 8
82652: PUSH
82653: DOUBLE
82654: LD_INT 1
82656: DEC
82657: ST_TO_ADDR
82658: LD_VAR 0 9
82662: PUSH
82663: FOR_TO
82664: IFFALSE 82796
// begin if GetType ( tmp [ j ] ) = unit_building then
82666: LD_VAR 0 14
82670: PUSH
82671: LD_VAR 0 8
82675: ARRAY
82676: PPUSH
82677: CALL_OW 247
82681: PUSH
82682: LD_INT 3
82684: EQUAL
82685: IFFALSE 82794
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
82687: LD_VAR 0 14
82691: PUSH
82692: LD_VAR 0 8
82696: ARRAY
82697: PUSH
82698: LD_VAR 0 28
82702: IN
82703: NOT
82704: PUSH
82705: LD_VAR 0 14
82709: PUSH
82710: LD_VAR 0 8
82714: ARRAY
82715: PPUSH
82716: CALL_OW 313
82720: AND
82721: IFFALSE 82794
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
82723: LD_VAR 0 4
82727: PUSH
82728: LD_VAR 0 7
82732: ARRAY
82733: PPUSH
82734: LD_VAR 0 14
82738: PUSH
82739: LD_VAR 0 8
82743: ARRAY
82744: PPUSH
82745: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
82749: LD_ADDR_VAR 0 28
82753: PUSH
82754: LD_VAR 0 28
82758: PPUSH
82759: LD_VAR 0 28
82763: PUSH
82764: LD_INT 1
82766: PLUS
82767: PPUSH
82768: LD_VAR 0 14
82772: PUSH
82773: LD_VAR 0 8
82777: ARRAY
82778: PPUSH
82779: CALL_OW 1
82783: ST_TO_ADDR
// attacking := true ;
82784: LD_ADDR_VAR 0 29
82788: PUSH
82789: LD_INT 1
82791: ST_TO_ADDR
// break ;
82792: GO 82796
// end ; end ;
82794: GO 82663
82796: POP
82797: POP
// if not attacking and f_attack_depot then
82798: LD_VAR 0 29
82802: NOT
82803: PUSH
82804: LD_VAR 0 25
82808: AND
82809: IFFALSE 82904
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
82811: LD_ADDR_VAR 0 13
82815: PUSH
82816: LD_VAR 0 14
82820: PPUSH
82821: LD_INT 2
82823: PUSH
82824: LD_INT 30
82826: PUSH
82827: LD_INT 0
82829: PUSH
82830: EMPTY
82831: LIST
82832: LIST
82833: PUSH
82834: LD_INT 30
82836: PUSH
82837: LD_INT 1
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: PUSH
82844: EMPTY
82845: LIST
82846: LIST
82847: LIST
82848: PPUSH
82849: CALL_OW 72
82853: ST_TO_ADDR
// if z then
82854: LD_VAR 0 13
82858: IFFALSE 82904
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
82860: LD_VAR 0 4
82864: PUSH
82865: LD_VAR 0 7
82869: ARRAY
82870: PPUSH
82871: LD_VAR 0 13
82875: PPUSH
82876: LD_VAR 0 4
82880: PUSH
82881: LD_VAR 0 7
82885: ARRAY
82886: PPUSH
82887: CALL_OW 74
82891: PPUSH
82892: CALL_OW 115
// attacking := true ;
82896: LD_ADDR_VAR 0 29
82900: PUSH
82901: LD_INT 1
82903: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
82904: LD_VAR 0 4
82908: PUSH
82909: LD_VAR 0 7
82913: ARRAY
82914: PPUSH
82915: CALL_OW 256
82919: PUSH
82920: LD_INT 500
82922: LESS
82923: IFFALSE 82949
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
82925: LD_VAR 0 4
82929: PUSH
82930: LD_VAR 0 7
82934: ARRAY
82935: PPUSH
82936: LD_VAR 0 14
82940: PUSH
82941: LD_INT 1
82943: ARRAY
82944: PPUSH
82945: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
82949: LD_VAR 0 4
82953: PUSH
82954: LD_VAR 0 7
82958: ARRAY
82959: PPUSH
82960: CALL_OW 264
82964: PUSH
82965: LD_INT 49
82967: EQUAL
82968: IFFALSE 83089
// begin if not HasTask ( group [ i ] ) then
82970: LD_VAR 0 4
82974: PUSH
82975: LD_VAR 0 7
82979: ARRAY
82980: PPUSH
82981: CALL_OW 314
82985: NOT
82986: IFFALSE 83089
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
82988: LD_ADDR_VAR 0 9
82992: PUSH
82993: LD_INT 81
82995: PUSH
82996: LD_VAR 0 4
83000: PUSH
83001: LD_VAR 0 7
83005: ARRAY
83006: PPUSH
83007: CALL_OW 255
83011: PUSH
83012: EMPTY
83013: LIST
83014: LIST
83015: PPUSH
83016: CALL_OW 69
83020: PPUSH
83021: LD_VAR 0 4
83025: PUSH
83026: LD_VAR 0 7
83030: ARRAY
83031: PPUSH
83032: CALL_OW 74
83036: ST_TO_ADDR
// if k then
83037: LD_VAR 0 9
83041: IFFALSE 83089
// if GetDistUnits ( group [ i ] , k ) > 10 then
83043: LD_VAR 0 4
83047: PUSH
83048: LD_VAR 0 7
83052: ARRAY
83053: PPUSH
83054: LD_VAR 0 9
83058: PPUSH
83059: CALL_OW 296
83063: PUSH
83064: LD_INT 10
83066: GREATER
83067: IFFALSE 83089
// ComMoveUnit ( group [ i ] , k ) ;
83069: LD_VAR 0 4
83073: PUSH
83074: LD_VAR 0 7
83078: ARRAY
83079: PPUSH
83080: LD_VAR 0 9
83084: PPUSH
83085: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83089: LD_VAR 0 4
83093: PUSH
83094: LD_VAR 0 7
83098: ARRAY
83099: PPUSH
83100: CALL_OW 256
83104: PUSH
83105: LD_INT 250
83107: LESS
83108: PUSH
83109: LD_VAR 0 4
83113: PUSH
83114: LD_VAR 0 7
83118: ARRAY
83119: PUSH
83120: LD_INT 21
83122: PUSH
83123: LD_INT 2
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: PUSH
83130: LD_INT 23
83132: PUSH
83133: LD_INT 2
83135: PUSH
83136: EMPTY
83137: LIST
83138: LIST
83139: PUSH
83140: EMPTY
83141: LIST
83142: LIST
83143: PPUSH
83144: CALL_OW 69
83148: IN
83149: AND
83150: IFFALSE 83275
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
83152: LD_ADDR_VAR 0 9
83156: PUSH
83157: LD_OWVAR 3
83161: PUSH
83162: LD_VAR 0 4
83166: PUSH
83167: LD_VAR 0 7
83171: ARRAY
83172: DIFF
83173: PPUSH
83174: LD_VAR 0 4
83178: PUSH
83179: LD_VAR 0 7
83183: ARRAY
83184: PPUSH
83185: CALL_OW 74
83189: ST_TO_ADDR
// if not k then
83190: LD_VAR 0 9
83194: NOT
83195: IFFALSE 83199
// continue ;
83197: GO 79640
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
83199: LD_VAR 0 9
83203: PUSH
83204: LD_INT 81
83206: PUSH
83207: LD_VAR 0 4
83211: PUSH
83212: LD_VAR 0 7
83216: ARRAY
83217: PPUSH
83218: CALL_OW 255
83222: PUSH
83223: EMPTY
83224: LIST
83225: LIST
83226: PPUSH
83227: CALL_OW 69
83231: IN
83232: PUSH
83233: LD_VAR 0 9
83237: PPUSH
83238: LD_VAR 0 4
83242: PUSH
83243: LD_VAR 0 7
83247: ARRAY
83248: PPUSH
83249: CALL_OW 296
83253: PUSH
83254: LD_INT 5
83256: LESS
83257: AND
83258: IFFALSE 83275
// ComAutodestruct ( group [ i ] ) ;
83260: LD_VAR 0 4
83264: PUSH
83265: LD_VAR 0 7
83269: ARRAY
83270: PPUSH
83271: CALL 77755 0 1
// end ; if f_attack_depot then
83275: LD_VAR 0 25
83279: IFFALSE 83391
// begin k := 6 ;
83281: LD_ADDR_VAR 0 9
83285: PUSH
83286: LD_INT 6
83288: ST_TO_ADDR
// if tmp < k then
83289: LD_VAR 0 14
83293: PUSH
83294: LD_VAR 0 9
83298: LESS
83299: IFFALSE 83311
// k := tmp ;
83301: LD_ADDR_VAR 0 9
83305: PUSH
83306: LD_VAR 0 14
83310: ST_TO_ADDR
// for j = 1 to k do
83311: LD_ADDR_VAR 0 8
83315: PUSH
83316: DOUBLE
83317: LD_INT 1
83319: DEC
83320: ST_TO_ADDR
83321: LD_VAR 0 9
83325: PUSH
83326: FOR_TO
83327: IFFALSE 83389
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
83329: LD_VAR 0 8
83333: PPUSH
83334: CALL_OW 266
83338: PUSH
83339: LD_INT 0
83341: PUSH
83342: LD_INT 1
83344: PUSH
83345: EMPTY
83346: LIST
83347: LIST
83348: IN
83349: IFFALSE 83387
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83351: LD_VAR 0 4
83355: PUSH
83356: LD_VAR 0 7
83360: ARRAY
83361: PPUSH
83362: LD_VAR 0 14
83366: PUSH
83367: LD_VAR 0 8
83371: ARRAY
83372: PPUSH
83373: CALL_OW 115
// attacking := true ;
83377: LD_ADDR_VAR 0 29
83381: PUSH
83382: LD_INT 1
83384: ST_TO_ADDR
// break ;
83385: GO 83389
// end ;
83387: GO 83326
83389: POP
83390: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
83391: LD_VAR 0 4
83395: PUSH
83396: LD_VAR 0 7
83400: ARRAY
83401: PPUSH
83402: CALL_OW 302
83406: PUSH
83407: LD_VAR 0 29
83411: NOT
83412: AND
83413: IFFALSE 83735
// begin if GetTag ( group [ i ] ) = 71 then
83415: LD_VAR 0 4
83419: PUSH
83420: LD_VAR 0 7
83424: ARRAY
83425: PPUSH
83426: CALL_OW 110
83430: PUSH
83431: LD_INT 71
83433: EQUAL
83434: IFFALSE 83475
// begin if HasTask ( group [ i ] ) then
83436: LD_VAR 0 4
83440: PUSH
83441: LD_VAR 0 7
83445: ARRAY
83446: PPUSH
83447: CALL_OW 314
83451: IFFALSE 83457
// continue else
83453: GO 79640
83455: GO 83475
// SetTag ( group [ i ] , 0 ) ;
83457: LD_VAR 0 4
83461: PUSH
83462: LD_VAR 0 7
83466: ARRAY
83467: PPUSH
83468: LD_INT 0
83470: PPUSH
83471: CALL_OW 109
// end ; k := 8 ;
83475: LD_ADDR_VAR 0 9
83479: PUSH
83480: LD_INT 8
83482: ST_TO_ADDR
// x := 0 ;
83483: LD_ADDR_VAR 0 10
83487: PUSH
83488: LD_INT 0
83490: ST_TO_ADDR
// if tmp < k then
83491: LD_VAR 0 14
83495: PUSH
83496: LD_VAR 0 9
83500: LESS
83501: IFFALSE 83513
// k := tmp ;
83503: LD_ADDR_VAR 0 9
83507: PUSH
83508: LD_VAR 0 14
83512: ST_TO_ADDR
// for j = 1 to k do
83513: LD_ADDR_VAR 0 8
83517: PUSH
83518: DOUBLE
83519: LD_INT 1
83521: DEC
83522: ST_TO_ADDR
83523: LD_VAR 0 9
83527: PUSH
83528: FOR_TO
83529: IFFALSE 83627
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
83531: LD_VAR 0 14
83535: PUSH
83536: LD_VAR 0 8
83540: ARRAY
83541: PPUSH
83542: CALL_OW 247
83546: PUSH
83547: LD_INT 1
83549: EQUAL
83550: PUSH
83551: LD_VAR 0 14
83555: PUSH
83556: LD_VAR 0 8
83560: ARRAY
83561: PPUSH
83562: CALL_OW 256
83566: PUSH
83567: LD_INT 250
83569: LESS
83570: PUSH
83571: LD_VAR 0 20
83575: AND
83576: PUSH
83577: LD_VAR 0 20
83581: NOT
83582: PUSH
83583: LD_VAR 0 14
83587: PUSH
83588: LD_VAR 0 8
83592: ARRAY
83593: PPUSH
83594: CALL_OW 256
83598: PUSH
83599: LD_INT 250
83601: GREATEREQUAL
83602: AND
83603: OR
83604: AND
83605: IFFALSE 83625
// begin x := tmp [ j ] ;
83607: LD_ADDR_VAR 0 10
83611: PUSH
83612: LD_VAR 0 14
83616: PUSH
83617: LD_VAR 0 8
83621: ARRAY
83622: ST_TO_ADDR
// break ;
83623: GO 83627
// end ;
83625: GO 83528
83627: POP
83628: POP
// if x then
83629: LD_VAR 0 10
83633: IFFALSE 83657
// ComAttackUnit ( group [ i ] , x ) else
83635: LD_VAR 0 4
83639: PUSH
83640: LD_VAR 0 7
83644: ARRAY
83645: PPUSH
83646: LD_VAR 0 10
83650: PPUSH
83651: CALL_OW 115
83655: GO 83681
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83657: LD_VAR 0 4
83661: PUSH
83662: LD_VAR 0 7
83666: ARRAY
83667: PPUSH
83668: LD_VAR 0 14
83672: PUSH
83673: LD_INT 1
83675: ARRAY
83676: PPUSH
83677: CALL_OW 115
// if not HasTask ( group [ i ] ) then
83681: LD_VAR 0 4
83685: PUSH
83686: LD_VAR 0 7
83690: ARRAY
83691: PPUSH
83692: CALL_OW 314
83696: NOT
83697: IFFALSE 83735
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
83699: LD_VAR 0 4
83703: PUSH
83704: LD_VAR 0 7
83708: ARRAY
83709: PPUSH
83710: LD_VAR 0 14
83714: PPUSH
83715: LD_VAR 0 4
83719: PUSH
83720: LD_VAR 0 7
83724: ARRAY
83725: PPUSH
83726: CALL_OW 74
83730: PPUSH
83731: CALL_OW 115
// end ; end ; end ;
83735: GO 79640
83737: POP
83738: POP
// wait ( 0 0$1 ) ;
83739: LD_INT 35
83741: PPUSH
83742: CALL_OW 67
// until group = [ ] ;
83746: LD_VAR 0 4
83750: PUSH
83751: EMPTY
83752: EQUAL
83753: IFFALSE 79625
// end ;
83755: LD_VAR 0 2
83759: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
83760: LD_INT 0
83762: PPUSH
83763: PPUSH
83764: PPUSH
83765: PPUSH
// if not base_units then
83766: LD_VAR 0 1
83770: NOT
83771: IFFALSE 83775
// exit ;
83773: GO 83862
// result := false ;
83775: LD_ADDR_VAR 0 2
83779: PUSH
83780: LD_INT 0
83782: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
83783: LD_ADDR_VAR 0 5
83787: PUSH
83788: LD_VAR 0 1
83792: PPUSH
83793: LD_INT 21
83795: PUSH
83796: LD_INT 3
83798: PUSH
83799: EMPTY
83800: LIST
83801: LIST
83802: PPUSH
83803: CALL_OW 72
83807: ST_TO_ADDR
// if not tmp then
83808: LD_VAR 0 5
83812: NOT
83813: IFFALSE 83817
// exit ;
83815: GO 83862
// for i in tmp do
83817: LD_ADDR_VAR 0 3
83821: PUSH
83822: LD_VAR 0 5
83826: PUSH
83827: FOR_IN
83828: IFFALSE 83860
// begin result := EnemyInRange ( i , 22 ) ;
83830: LD_ADDR_VAR 0 2
83834: PUSH
83835: LD_VAR 0 3
83839: PPUSH
83840: LD_INT 22
83842: PPUSH
83843: CALL 77438 0 2
83847: ST_TO_ADDR
// if result then
83848: LD_VAR 0 2
83852: IFFALSE 83858
// exit ;
83854: POP
83855: POP
83856: GO 83862
// end ;
83858: GO 83827
83860: POP
83861: POP
// end ;
83862: LD_VAR 0 2
83866: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
83867: LD_INT 0
83869: PPUSH
83870: PPUSH
// if not units then
83871: LD_VAR 0 1
83875: NOT
83876: IFFALSE 83880
// exit ;
83878: GO 83950
// result := [ ] ;
83880: LD_ADDR_VAR 0 3
83884: PUSH
83885: EMPTY
83886: ST_TO_ADDR
// for i in units do
83887: LD_ADDR_VAR 0 4
83891: PUSH
83892: LD_VAR 0 1
83896: PUSH
83897: FOR_IN
83898: IFFALSE 83948
// if GetTag ( i ) = tag then
83900: LD_VAR 0 4
83904: PPUSH
83905: CALL_OW 110
83909: PUSH
83910: LD_VAR 0 2
83914: EQUAL
83915: IFFALSE 83946
// result := Insert ( result , result + 1 , i ) ;
83917: LD_ADDR_VAR 0 3
83921: PUSH
83922: LD_VAR 0 3
83926: PPUSH
83927: LD_VAR 0 3
83931: PUSH
83932: LD_INT 1
83934: PLUS
83935: PPUSH
83936: LD_VAR 0 4
83940: PPUSH
83941: CALL_OW 2
83945: ST_TO_ADDR
83946: GO 83897
83948: POP
83949: POP
// end ;
83950: LD_VAR 0 3
83954: RET
// export function IsDriver ( un ) ; begin
83955: LD_INT 0
83957: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
83958: LD_ADDR_VAR 0 2
83962: PUSH
83963: LD_VAR 0 1
83967: PUSH
83968: LD_INT 55
83970: PUSH
83971: EMPTY
83972: LIST
83973: PPUSH
83974: CALL_OW 69
83978: IN
83979: ST_TO_ADDR
// end ;
83980: LD_VAR 0 2
83984: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
83985: LD_INT 0
83987: PPUSH
83988: PPUSH
// list := [ ] ;
83989: LD_ADDR_VAR 0 5
83993: PUSH
83994: EMPTY
83995: ST_TO_ADDR
// case d of 0 :
83996: LD_VAR 0 3
84000: PUSH
84001: LD_INT 0
84003: DOUBLE
84004: EQUAL
84005: IFTRUE 84009
84007: GO 84142
84009: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84010: LD_ADDR_VAR 0 5
84014: PUSH
84015: LD_VAR 0 1
84019: PUSH
84020: LD_INT 4
84022: MINUS
84023: PUSH
84024: LD_VAR 0 2
84028: PUSH
84029: LD_INT 4
84031: MINUS
84032: PUSH
84033: LD_INT 2
84035: PUSH
84036: EMPTY
84037: LIST
84038: LIST
84039: LIST
84040: PUSH
84041: LD_VAR 0 1
84045: PUSH
84046: LD_INT 3
84048: MINUS
84049: PUSH
84050: LD_VAR 0 2
84054: PUSH
84055: LD_INT 1
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: LIST
84062: PUSH
84063: LD_VAR 0 1
84067: PUSH
84068: LD_INT 4
84070: PLUS
84071: PUSH
84072: LD_VAR 0 2
84076: PUSH
84077: LD_INT 4
84079: PUSH
84080: EMPTY
84081: LIST
84082: LIST
84083: LIST
84084: PUSH
84085: LD_VAR 0 1
84089: PUSH
84090: LD_INT 3
84092: PLUS
84093: PUSH
84094: LD_VAR 0 2
84098: PUSH
84099: LD_INT 3
84101: PLUS
84102: PUSH
84103: LD_INT 5
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: LIST
84110: PUSH
84111: LD_VAR 0 1
84115: PUSH
84116: LD_VAR 0 2
84120: PUSH
84121: LD_INT 4
84123: PLUS
84124: PUSH
84125: LD_INT 0
84127: PUSH
84128: EMPTY
84129: LIST
84130: LIST
84131: LIST
84132: PUSH
84133: EMPTY
84134: LIST
84135: LIST
84136: LIST
84137: LIST
84138: LIST
84139: ST_TO_ADDR
// end ; 1 :
84140: GO 84840
84142: LD_INT 1
84144: DOUBLE
84145: EQUAL
84146: IFTRUE 84150
84148: GO 84283
84150: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84151: LD_ADDR_VAR 0 5
84155: PUSH
84156: LD_VAR 0 1
84160: PUSH
84161: LD_VAR 0 2
84165: PUSH
84166: LD_INT 4
84168: MINUS
84169: PUSH
84170: LD_INT 3
84172: PUSH
84173: EMPTY
84174: LIST
84175: LIST
84176: LIST
84177: PUSH
84178: LD_VAR 0 1
84182: PUSH
84183: LD_INT 3
84185: MINUS
84186: PUSH
84187: LD_VAR 0 2
84191: PUSH
84192: LD_INT 3
84194: MINUS
84195: PUSH
84196: LD_INT 2
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: LIST
84203: PUSH
84204: LD_VAR 0 1
84208: PUSH
84209: LD_INT 4
84211: MINUS
84212: PUSH
84213: LD_VAR 0 2
84217: PUSH
84218: LD_INT 1
84220: PUSH
84221: EMPTY
84222: LIST
84223: LIST
84224: LIST
84225: PUSH
84226: LD_VAR 0 1
84230: PUSH
84231: LD_VAR 0 2
84235: PUSH
84236: LD_INT 3
84238: PLUS
84239: PUSH
84240: LD_INT 0
84242: PUSH
84243: EMPTY
84244: LIST
84245: LIST
84246: LIST
84247: PUSH
84248: LD_VAR 0 1
84252: PUSH
84253: LD_INT 4
84255: PLUS
84256: PUSH
84257: LD_VAR 0 2
84261: PUSH
84262: LD_INT 4
84264: PLUS
84265: PUSH
84266: LD_INT 5
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: LIST
84273: PUSH
84274: EMPTY
84275: LIST
84276: LIST
84277: LIST
84278: LIST
84279: LIST
84280: ST_TO_ADDR
// end ; 2 :
84281: GO 84840
84283: LD_INT 2
84285: DOUBLE
84286: EQUAL
84287: IFTRUE 84291
84289: GO 84420
84291: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84292: LD_ADDR_VAR 0 5
84296: PUSH
84297: LD_VAR 0 1
84301: PUSH
84302: LD_VAR 0 2
84306: PUSH
84307: LD_INT 3
84309: MINUS
84310: PUSH
84311: LD_INT 3
84313: PUSH
84314: EMPTY
84315: LIST
84316: LIST
84317: LIST
84318: PUSH
84319: LD_VAR 0 1
84323: PUSH
84324: LD_INT 4
84326: PLUS
84327: PUSH
84328: LD_VAR 0 2
84332: PUSH
84333: LD_INT 4
84335: PUSH
84336: EMPTY
84337: LIST
84338: LIST
84339: LIST
84340: PUSH
84341: LD_VAR 0 1
84345: PUSH
84346: LD_VAR 0 2
84350: PUSH
84351: LD_INT 4
84353: PLUS
84354: PUSH
84355: LD_INT 0
84357: PUSH
84358: EMPTY
84359: LIST
84360: LIST
84361: LIST
84362: PUSH
84363: LD_VAR 0 1
84367: PUSH
84368: LD_INT 3
84370: MINUS
84371: PUSH
84372: LD_VAR 0 2
84376: PUSH
84377: LD_INT 1
84379: PUSH
84380: EMPTY
84381: LIST
84382: LIST
84383: LIST
84384: PUSH
84385: LD_VAR 0 1
84389: PUSH
84390: LD_INT 4
84392: MINUS
84393: PUSH
84394: LD_VAR 0 2
84398: PUSH
84399: LD_INT 4
84401: MINUS
84402: PUSH
84403: LD_INT 2
84405: PUSH
84406: EMPTY
84407: LIST
84408: LIST
84409: LIST
84410: PUSH
84411: EMPTY
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: ST_TO_ADDR
// end ; 3 :
84418: GO 84840
84420: LD_INT 3
84422: DOUBLE
84423: EQUAL
84424: IFTRUE 84428
84426: GO 84561
84428: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84429: LD_ADDR_VAR 0 5
84433: PUSH
84434: LD_VAR 0 1
84438: PUSH
84439: LD_INT 3
84441: PLUS
84442: PUSH
84443: LD_VAR 0 2
84447: PUSH
84448: LD_INT 4
84450: PUSH
84451: EMPTY
84452: LIST
84453: LIST
84454: LIST
84455: PUSH
84456: LD_VAR 0 1
84460: PUSH
84461: LD_INT 4
84463: PLUS
84464: PUSH
84465: LD_VAR 0 2
84469: PUSH
84470: LD_INT 4
84472: PLUS
84473: PUSH
84474: LD_INT 5
84476: PUSH
84477: EMPTY
84478: LIST
84479: LIST
84480: LIST
84481: PUSH
84482: LD_VAR 0 1
84486: PUSH
84487: LD_INT 4
84489: MINUS
84490: PUSH
84491: LD_VAR 0 2
84495: PUSH
84496: LD_INT 1
84498: PUSH
84499: EMPTY
84500: LIST
84501: LIST
84502: LIST
84503: PUSH
84504: LD_VAR 0 1
84508: PUSH
84509: LD_VAR 0 2
84513: PUSH
84514: LD_INT 4
84516: MINUS
84517: PUSH
84518: LD_INT 3
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: LIST
84525: PUSH
84526: LD_VAR 0 1
84530: PUSH
84531: LD_INT 3
84533: MINUS
84534: PUSH
84535: LD_VAR 0 2
84539: PUSH
84540: LD_INT 3
84542: MINUS
84543: PUSH
84544: LD_INT 2
84546: PUSH
84547: EMPTY
84548: LIST
84549: LIST
84550: LIST
84551: PUSH
84552: EMPTY
84553: LIST
84554: LIST
84555: LIST
84556: LIST
84557: LIST
84558: ST_TO_ADDR
// end ; 4 :
84559: GO 84840
84561: LD_INT 4
84563: DOUBLE
84564: EQUAL
84565: IFTRUE 84569
84567: GO 84702
84569: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
84570: LD_ADDR_VAR 0 5
84574: PUSH
84575: LD_VAR 0 1
84579: PUSH
84580: LD_VAR 0 2
84584: PUSH
84585: LD_INT 4
84587: PLUS
84588: PUSH
84589: LD_INT 0
84591: PUSH
84592: EMPTY
84593: LIST
84594: LIST
84595: LIST
84596: PUSH
84597: LD_VAR 0 1
84601: PUSH
84602: LD_INT 3
84604: PLUS
84605: PUSH
84606: LD_VAR 0 2
84610: PUSH
84611: LD_INT 3
84613: PLUS
84614: PUSH
84615: LD_INT 5
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: LIST
84622: PUSH
84623: LD_VAR 0 1
84627: PUSH
84628: LD_INT 4
84630: PLUS
84631: PUSH
84632: LD_VAR 0 2
84636: PUSH
84637: LD_INT 4
84639: PUSH
84640: EMPTY
84641: LIST
84642: LIST
84643: LIST
84644: PUSH
84645: LD_VAR 0 1
84649: PUSH
84650: LD_VAR 0 2
84654: PUSH
84655: LD_INT 3
84657: MINUS
84658: PUSH
84659: LD_INT 3
84661: PUSH
84662: EMPTY
84663: LIST
84664: LIST
84665: LIST
84666: PUSH
84667: LD_VAR 0 1
84671: PUSH
84672: LD_INT 4
84674: MINUS
84675: PUSH
84676: LD_VAR 0 2
84680: PUSH
84681: LD_INT 4
84683: MINUS
84684: PUSH
84685: LD_INT 2
84687: PUSH
84688: EMPTY
84689: LIST
84690: LIST
84691: LIST
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: LIST
84697: LIST
84698: LIST
84699: ST_TO_ADDR
// end ; 5 :
84700: GO 84840
84702: LD_INT 5
84704: DOUBLE
84705: EQUAL
84706: IFTRUE 84710
84708: GO 84839
84710: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
84711: LD_ADDR_VAR 0 5
84715: PUSH
84716: LD_VAR 0 1
84720: PUSH
84721: LD_INT 4
84723: MINUS
84724: PUSH
84725: LD_VAR 0 2
84729: PUSH
84730: LD_INT 1
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: LIST
84737: PUSH
84738: LD_VAR 0 1
84742: PUSH
84743: LD_VAR 0 2
84747: PUSH
84748: LD_INT 4
84750: MINUS
84751: PUSH
84752: LD_INT 3
84754: PUSH
84755: EMPTY
84756: LIST
84757: LIST
84758: LIST
84759: PUSH
84760: LD_VAR 0 1
84764: PUSH
84765: LD_INT 4
84767: PLUS
84768: PUSH
84769: LD_VAR 0 2
84773: PUSH
84774: LD_INT 4
84776: PLUS
84777: PUSH
84778: LD_INT 5
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: LIST
84785: PUSH
84786: LD_VAR 0 1
84790: PUSH
84791: LD_INT 3
84793: PLUS
84794: PUSH
84795: LD_VAR 0 2
84799: PUSH
84800: LD_INT 4
84802: PUSH
84803: EMPTY
84804: LIST
84805: LIST
84806: LIST
84807: PUSH
84808: LD_VAR 0 1
84812: PUSH
84813: LD_VAR 0 2
84817: PUSH
84818: LD_INT 3
84820: PLUS
84821: PUSH
84822: LD_INT 0
84824: PUSH
84825: EMPTY
84826: LIST
84827: LIST
84828: LIST
84829: PUSH
84830: EMPTY
84831: LIST
84832: LIST
84833: LIST
84834: LIST
84835: LIST
84836: ST_TO_ADDR
// end ; end ;
84837: GO 84840
84839: POP
// result := list ;
84840: LD_ADDR_VAR 0 4
84844: PUSH
84845: LD_VAR 0 5
84849: ST_TO_ADDR
// end ;
84850: LD_VAR 0 4
84854: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
84855: LD_INT 0
84857: PPUSH
84858: PPUSH
84859: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
84860: LD_VAR 0 1
84864: NOT
84865: PUSH
84866: LD_VAR 0 2
84870: PUSH
84871: LD_INT 1
84873: PUSH
84874: LD_INT 2
84876: PUSH
84877: LD_INT 3
84879: PUSH
84880: LD_INT 4
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: LIST
84887: LIST
84888: IN
84889: NOT
84890: OR
84891: IFFALSE 84895
// exit ;
84893: GO 84987
// tmp := [ ] ;
84895: LD_ADDR_VAR 0 5
84899: PUSH
84900: EMPTY
84901: ST_TO_ADDR
// for i in units do
84902: LD_ADDR_VAR 0 4
84906: PUSH
84907: LD_VAR 0 1
84911: PUSH
84912: FOR_IN
84913: IFFALSE 84956
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
84915: LD_ADDR_VAR 0 5
84919: PUSH
84920: LD_VAR 0 5
84924: PPUSH
84925: LD_VAR 0 5
84929: PUSH
84930: LD_INT 1
84932: PLUS
84933: PPUSH
84934: LD_VAR 0 4
84938: PPUSH
84939: LD_VAR 0 2
84943: PPUSH
84944: CALL_OW 259
84948: PPUSH
84949: CALL_OW 2
84953: ST_TO_ADDR
84954: GO 84912
84956: POP
84957: POP
// if not tmp then
84958: LD_VAR 0 5
84962: NOT
84963: IFFALSE 84967
// exit ;
84965: GO 84987
// result := SortListByListDesc ( units , tmp ) ;
84967: LD_ADDR_VAR 0 3
84971: PUSH
84972: LD_VAR 0 1
84976: PPUSH
84977: LD_VAR 0 5
84981: PPUSH
84982: CALL_OW 77
84986: ST_TO_ADDR
// end ;
84987: LD_VAR 0 3
84991: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
84992: LD_INT 0
84994: PPUSH
84995: PPUSH
84996: PPUSH
// x := GetX ( building ) ;
84997: LD_ADDR_VAR 0 4
85001: PUSH
85002: LD_VAR 0 2
85006: PPUSH
85007: CALL_OW 250
85011: ST_TO_ADDR
// y := GetY ( building ) ;
85012: LD_ADDR_VAR 0 5
85016: PUSH
85017: LD_VAR 0 2
85021: PPUSH
85022: CALL_OW 251
85026: ST_TO_ADDR
// if GetTaskList ( unit ) then
85027: LD_VAR 0 1
85031: PPUSH
85032: CALL_OW 437
85036: IFFALSE 85131
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85038: LD_STRING e
85040: PUSH
85041: LD_VAR 0 1
85045: PPUSH
85046: CALL_OW 437
85050: PUSH
85051: LD_INT 1
85053: ARRAY
85054: PUSH
85055: LD_INT 1
85057: ARRAY
85058: EQUAL
85059: PUSH
85060: LD_VAR 0 4
85064: PUSH
85065: LD_VAR 0 1
85069: PPUSH
85070: CALL_OW 437
85074: PUSH
85075: LD_INT 1
85077: ARRAY
85078: PUSH
85079: LD_INT 2
85081: ARRAY
85082: EQUAL
85083: AND
85084: PUSH
85085: LD_VAR 0 5
85089: PUSH
85090: LD_VAR 0 1
85094: PPUSH
85095: CALL_OW 437
85099: PUSH
85100: LD_INT 1
85102: ARRAY
85103: PUSH
85104: LD_INT 3
85106: ARRAY
85107: EQUAL
85108: AND
85109: IFFALSE 85121
// result := true else
85111: LD_ADDR_VAR 0 3
85115: PUSH
85116: LD_INT 1
85118: ST_TO_ADDR
85119: GO 85129
// result := false ;
85121: LD_ADDR_VAR 0 3
85125: PUSH
85126: LD_INT 0
85128: ST_TO_ADDR
// end else
85129: GO 85139
// result := false ;
85131: LD_ADDR_VAR 0 3
85135: PUSH
85136: LD_INT 0
85138: ST_TO_ADDR
// end ;
85139: LD_VAR 0 3
85143: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85144: LD_INT 0
85146: PPUSH
85147: PPUSH
85148: PPUSH
85149: PPUSH
// if not unit or not area then
85150: LD_VAR 0 1
85154: NOT
85155: PUSH
85156: LD_VAR 0 2
85160: NOT
85161: OR
85162: IFFALSE 85166
// exit ;
85164: GO 85331
// tmp := AreaToList ( area , i ) ;
85166: LD_ADDR_VAR 0 6
85170: PUSH
85171: LD_VAR 0 2
85175: PPUSH
85176: LD_VAR 0 5
85180: PPUSH
85181: CALL_OW 517
85185: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85186: LD_ADDR_VAR 0 5
85190: PUSH
85191: DOUBLE
85192: LD_INT 1
85194: DEC
85195: ST_TO_ADDR
85196: LD_VAR 0 6
85200: PUSH
85201: LD_INT 1
85203: ARRAY
85204: PUSH
85205: FOR_TO
85206: IFFALSE 85321
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85208: LD_ADDR_VAR 0 7
85212: PUSH
85213: LD_VAR 0 6
85217: PUSH
85218: LD_INT 1
85220: ARRAY
85221: PUSH
85222: LD_VAR 0 5
85226: ARRAY
85227: PUSH
85228: LD_VAR 0 6
85232: PUSH
85233: LD_INT 2
85235: ARRAY
85236: PUSH
85237: LD_VAR 0 5
85241: ARRAY
85242: PUSH
85243: EMPTY
85244: LIST
85245: LIST
85246: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85247: LD_VAR 0 7
85251: PUSH
85252: LD_INT 1
85254: ARRAY
85255: PPUSH
85256: LD_VAR 0 7
85260: PUSH
85261: LD_INT 2
85263: ARRAY
85264: PPUSH
85265: CALL_OW 428
85269: PUSH
85270: LD_INT 0
85272: EQUAL
85273: IFFALSE 85319
// begin result := true ;
85275: LD_ADDR_VAR 0 4
85279: PUSH
85280: LD_INT 1
85282: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85283: LD_VAR 0 1
85287: PPUSH
85288: LD_VAR 0 7
85292: PUSH
85293: LD_INT 1
85295: ARRAY
85296: PPUSH
85297: LD_VAR 0 7
85301: PUSH
85302: LD_INT 2
85304: ARRAY
85305: PPUSH
85306: LD_VAR 0 3
85310: PPUSH
85311: CALL_OW 48
// exit ;
85315: POP
85316: POP
85317: GO 85331
// end ; end ;
85319: GO 85205
85321: POP
85322: POP
// result := false ;
85323: LD_ADDR_VAR 0 4
85327: PUSH
85328: LD_INT 0
85330: ST_TO_ADDR
// end ;
85331: LD_VAR 0 4
85335: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85336: LD_INT 0
85338: PPUSH
85339: PPUSH
85340: PPUSH
// if not side or side > 8 then
85341: LD_VAR 0 1
85345: NOT
85346: PUSH
85347: LD_VAR 0 1
85351: PUSH
85352: LD_INT 8
85354: GREATER
85355: OR
85356: IFFALSE 85360
// exit ;
85358: GO 85547
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85360: LD_ADDR_VAR 0 4
85364: PUSH
85365: LD_INT 22
85367: PUSH
85368: LD_VAR 0 1
85372: PUSH
85373: EMPTY
85374: LIST
85375: LIST
85376: PUSH
85377: LD_INT 21
85379: PUSH
85380: LD_INT 3
85382: PUSH
85383: EMPTY
85384: LIST
85385: LIST
85386: PUSH
85387: EMPTY
85388: LIST
85389: LIST
85390: PPUSH
85391: CALL_OW 69
85395: ST_TO_ADDR
// if not tmp then
85396: LD_VAR 0 4
85400: NOT
85401: IFFALSE 85405
// exit ;
85403: GO 85547
// enable_addtolog := true ;
85405: LD_ADDR_OWVAR 81
85409: PUSH
85410: LD_INT 1
85412: ST_TO_ADDR
// AddToLog ( [ ) ;
85413: LD_STRING [
85415: PPUSH
85416: CALL_OW 561
// for i in tmp do
85420: LD_ADDR_VAR 0 3
85424: PUSH
85425: LD_VAR 0 4
85429: PUSH
85430: FOR_IN
85431: IFFALSE 85538
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85433: LD_STRING [
85435: PUSH
85436: LD_VAR 0 3
85440: PPUSH
85441: CALL_OW 266
85445: STR
85446: PUSH
85447: LD_STRING , 
85449: STR
85450: PUSH
85451: LD_VAR 0 3
85455: PPUSH
85456: CALL_OW 250
85460: STR
85461: PUSH
85462: LD_STRING , 
85464: STR
85465: PUSH
85466: LD_VAR 0 3
85470: PPUSH
85471: CALL_OW 251
85475: STR
85476: PUSH
85477: LD_STRING , 
85479: STR
85480: PUSH
85481: LD_VAR 0 3
85485: PPUSH
85486: CALL_OW 254
85490: STR
85491: PUSH
85492: LD_STRING , 
85494: STR
85495: PUSH
85496: LD_VAR 0 3
85500: PPUSH
85501: LD_INT 1
85503: PPUSH
85504: CALL_OW 268
85508: STR
85509: PUSH
85510: LD_STRING , 
85512: STR
85513: PUSH
85514: LD_VAR 0 3
85518: PPUSH
85519: LD_INT 2
85521: PPUSH
85522: CALL_OW 268
85526: STR
85527: PUSH
85528: LD_STRING ],
85530: STR
85531: PPUSH
85532: CALL_OW 561
// end ;
85536: GO 85430
85538: POP
85539: POP
// AddToLog ( ]; ) ;
85540: LD_STRING ];
85542: PPUSH
85543: CALL_OW 561
// end ;
85547: LD_VAR 0 2
85551: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
85552: LD_INT 0
85554: PPUSH
85555: PPUSH
85556: PPUSH
85557: PPUSH
85558: PPUSH
// if not area or not rate or not max then
85559: LD_VAR 0 1
85563: NOT
85564: PUSH
85565: LD_VAR 0 2
85569: NOT
85570: OR
85571: PUSH
85572: LD_VAR 0 4
85576: NOT
85577: OR
85578: IFFALSE 85582
// exit ;
85580: GO 85774
// while 1 do
85582: LD_INT 1
85584: IFFALSE 85774
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
85586: LD_ADDR_VAR 0 9
85590: PUSH
85591: LD_VAR 0 1
85595: PPUSH
85596: LD_INT 1
85598: PPUSH
85599: CALL_OW 287
85603: PUSH
85604: LD_INT 10
85606: MUL
85607: ST_TO_ADDR
// r := rate / 10 ;
85608: LD_ADDR_VAR 0 7
85612: PUSH
85613: LD_VAR 0 2
85617: PUSH
85618: LD_INT 10
85620: DIVREAL
85621: ST_TO_ADDR
// time := 1 1$00 ;
85622: LD_ADDR_VAR 0 8
85626: PUSH
85627: LD_INT 2100
85629: ST_TO_ADDR
// if amount < min then
85630: LD_VAR 0 9
85634: PUSH
85635: LD_VAR 0 3
85639: LESS
85640: IFFALSE 85658
// r := r * 2 else
85642: LD_ADDR_VAR 0 7
85646: PUSH
85647: LD_VAR 0 7
85651: PUSH
85652: LD_INT 2
85654: MUL
85655: ST_TO_ADDR
85656: GO 85684
// if amount > max then
85658: LD_VAR 0 9
85662: PUSH
85663: LD_VAR 0 4
85667: GREATER
85668: IFFALSE 85684
// r := r / 2 ;
85670: LD_ADDR_VAR 0 7
85674: PUSH
85675: LD_VAR 0 7
85679: PUSH
85680: LD_INT 2
85682: DIVREAL
85683: ST_TO_ADDR
// time := time / r ;
85684: LD_ADDR_VAR 0 8
85688: PUSH
85689: LD_VAR 0 8
85693: PUSH
85694: LD_VAR 0 7
85698: DIVREAL
85699: ST_TO_ADDR
// if time < 0 then
85700: LD_VAR 0 8
85704: PUSH
85705: LD_INT 0
85707: LESS
85708: IFFALSE 85725
// time := time * - 1 ;
85710: LD_ADDR_VAR 0 8
85714: PUSH
85715: LD_VAR 0 8
85719: PUSH
85720: LD_INT 1
85722: NEG
85723: MUL
85724: ST_TO_ADDR
// wait ( time ) ;
85725: LD_VAR 0 8
85729: PPUSH
85730: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
85734: LD_INT 35
85736: PPUSH
85737: LD_INT 875
85739: PPUSH
85740: CALL_OW 12
85744: PPUSH
85745: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
85749: LD_INT 1
85751: PPUSH
85752: LD_INT 5
85754: PPUSH
85755: CALL_OW 12
85759: PPUSH
85760: LD_VAR 0 1
85764: PPUSH
85765: LD_INT 1
85767: PPUSH
85768: CALL_OW 55
// end ;
85772: GO 85582
// end ;
85774: LD_VAR 0 5
85778: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
85779: LD_INT 0
85781: PPUSH
85782: PPUSH
85783: PPUSH
85784: PPUSH
85785: PPUSH
85786: PPUSH
85787: PPUSH
85788: PPUSH
// if not turrets or not factories then
85789: LD_VAR 0 1
85793: NOT
85794: PUSH
85795: LD_VAR 0 2
85799: NOT
85800: OR
85801: IFFALSE 85805
// exit ;
85803: GO 86112
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
85805: LD_ADDR_VAR 0 10
85809: PUSH
85810: LD_INT 5
85812: PUSH
85813: LD_INT 6
85815: PUSH
85816: EMPTY
85817: LIST
85818: LIST
85819: PUSH
85820: LD_INT 2
85822: PUSH
85823: LD_INT 4
85825: PUSH
85826: EMPTY
85827: LIST
85828: LIST
85829: PUSH
85830: LD_INT 3
85832: PUSH
85833: LD_INT 5
85835: PUSH
85836: EMPTY
85837: LIST
85838: LIST
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: LIST
85844: PUSH
85845: LD_INT 24
85847: PUSH
85848: LD_INT 25
85850: PUSH
85851: EMPTY
85852: LIST
85853: LIST
85854: PUSH
85855: LD_INT 23
85857: PUSH
85858: LD_INT 27
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: PUSH
85865: EMPTY
85866: LIST
85867: LIST
85868: PUSH
85869: LD_INT 42
85871: PUSH
85872: LD_INT 43
85874: PUSH
85875: EMPTY
85876: LIST
85877: LIST
85878: PUSH
85879: LD_INT 44
85881: PUSH
85882: LD_INT 46
85884: PUSH
85885: EMPTY
85886: LIST
85887: LIST
85888: PUSH
85889: LD_INT 45
85891: PUSH
85892: LD_INT 47
85894: PUSH
85895: EMPTY
85896: LIST
85897: LIST
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: LIST
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: LIST
85908: ST_TO_ADDR
// result := [ ] ;
85909: LD_ADDR_VAR 0 3
85913: PUSH
85914: EMPTY
85915: ST_TO_ADDR
// for i in turrets do
85916: LD_ADDR_VAR 0 4
85920: PUSH
85921: LD_VAR 0 1
85925: PUSH
85926: FOR_IN
85927: IFFALSE 86110
// begin nat := GetNation ( i ) ;
85929: LD_ADDR_VAR 0 7
85933: PUSH
85934: LD_VAR 0 4
85938: PPUSH
85939: CALL_OW 248
85943: ST_TO_ADDR
// weapon := 0 ;
85944: LD_ADDR_VAR 0 8
85948: PUSH
85949: LD_INT 0
85951: ST_TO_ADDR
// if not nat then
85952: LD_VAR 0 7
85956: NOT
85957: IFFALSE 85961
// continue ;
85959: GO 85926
// for j in list [ nat ] do
85961: LD_ADDR_VAR 0 5
85965: PUSH
85966: LD_VAR 0 10
85970: PUSH
85971: LD_VAR 0 7
85975: ARRAY
85976: PUSH
85977: FOR_IN
85978: IFFALSE 86019
// if GetBWeapon ( i ) = j [ 1 ] then
85980: LD_VAR 0 4
85984: PPUSH
85985: CALL_OW 269
85989: PUSH
85990: LD_VAR 0 5
85994: PUSH
85995: LD_INT 1
85997: ARRAY
85998: EQUAL
85999: IFFALSE 86017
// begin weapon := j [ 2 ] ;
86001: LD_ADDR_VAR 0 8
86005: PUSH
86006: LD_VAR 0 5
86010: PUSH
86011: LD_INT 2
86013: ARRAY
86014: ST_TO_ADDR
// break ;
86015: GO 86019
// end ;
86017: GO 85977
86019: POP
86020: POP
// if not weapon then
86021: LD_VAR 0 8
86025: NOT
86026: IFFALSE 86030
// continue ;
86028: GO 85926
// for k in factories do
86030: LD_ADDR_VAR 0 6
86034: PUSH
86035: LD_VAR 0 2
86039: PUSH
86040: FOR_IN
86041: IFFALSE 86106
// begin weapons := AvailableWeaponList ( k ) ;
86043: LD_ADDR_VAR 0 9
86047: PUSH
86048: LD_VAR 0 6
86052: PPUSH
86053: CALL_OW 478
86057: ST_TO_ADDR
// if not weapons then
86058: LD_VAR 0 9
86062: NOT
86063: IFFALSE 86067
// continue ;
86065: GO 86040
// if weapon in weapons then
86067: LD_VAR 0 8
86071: PUSH
86072: LD_VAR 0 9
86076: IN
86077: IFFALSE 86104
// begin result := [ i , weapon ] ;
86079: LD_ADDR_VAR 0 3
86083: PUSH
86084: LD_VAR 0 4
86088: PUSH
86089: LD_VAR 0 8
86093: PUSH
86094: EMPTY
86095: LIST
86096: LIST
86097: ST_TO_ADDR
// exit ;
86098: POP
86099: POP
86100: POP
86101: POP
86102: GO 86112
// end ; end ;
86104: GO 86040
86106: POP
86107: POP
// end ;
86108: GO 85926
86110: POP
86111: POP
// end ; end_of_file
86112: LD_VAR 0 3
86116: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
86117: GO 86119
86119: DISABLE
// begin ru_radar := 98 ;
86120: LD_ADDR_EXP 92
86124: PUSH
86125: LD_INT 98
86127: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
86128: LD_ADDR_EXP 93
86132: PUSH
86133: LD_INT 89
86135: ST_TO_ADDR
// us_hack := 99 ;
86136: LD_ADDR_EXP 94
86140: PUSH
86141: LD_INT 99
86143: ST_TO_ADDR
// us_artillery := 97 ;
86144: LD_ADDR_EXP 95
86148: PUSH
86149: LD_INT 97
86151: ST_TO_ADDR
// ar_bio_bomb := 91 ;
86152: LD_ADDR_EXP 96
86156: PUSH
86157: LD_INT 91
86159: ST_TO_ADDR
// end ;
86160: END
