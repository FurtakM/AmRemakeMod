// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16279 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 71243 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2208 0 0
// MC_Start ( ) ;
  78: CALL 17337 0 0
// Action ;
  82: CALL 7361 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 189000
 212: PUSH
 213: LD_INT 168000
 215: PUSH
 216: LD_INT 157500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 72
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 73
 312: PUSH
 313: LD_INT 25
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 31889 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 31889 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 31889 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 48
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 32337 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 37705 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 37705 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 37705 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 37705 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 37705 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 37705 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 37705 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 37705 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 37705 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 37705 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 37705 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 37705 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 37705 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 37705 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 37705 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1461
// if GetClass ( i ) = class_mortar then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: EQUAL
1445: IFFALSE 1459
// SetClass ( i , class_soldier ) ;
1447: LD_VAR 0 2
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL_OW 336
1459: GO 1429
1461: POP
1462: POP
// if tmp < 12 then
1463: LD_VAR 0 5
1467: PUSH
1468: LD_INT 12
1470: LESS
1471: IFFALSE 1569
// begin k := 16 - tmp ;
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: LD_INT 16
1480: PUSH
1481: LD_VAR 0 5
1485: MINUS
1486: ST_TO_ADDR
// for i = 1 to k do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_VAR 0 3
1501: PUSH
1502: FOR_TO
1503: IFFALSE 1567
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1505: LD_INT 0
1507: PPUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 1
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: LD_INT 4
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 5
1535: PPUSH
1536: CALL_OW 12
1540: ARRAY
1541: PPUSH
1542: LD_INT 6
1544: PPUSH
1545: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: CALL_OW 44
1563: ADD
1564: ST_TO_ADDR
// end ;
1565: GO 1502
1567: POP
1568: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1569: LD_ADDR_EXP 20
1573: PUSH
1574: LD_STRING 1
1576: PPUSH
1577: LD_INT 12
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT -5
1585: PUSH
1586: LD_EXP 21
1590: PUSH
1591: LD_INT -2
1593: PUSH
1594: LD_INT -3
1596: PUSH
1597: LD_INT -5
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_VAR 0 5
1611: ADD
1612: PUSH
1613: LD_INT -6
1615: PUSH
1616: LD_INT -4
1618: PUSH
1619: LD_EXP 30
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: ADD
1629: PPUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 42
1703: ST_TO_ADDR
// others := tmp diff selected ;
1704: LD_ADDR_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: LD_EXP 20
1718: DIFF
1719: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1720: LD_ADDR_VAR 0 8
1724: PUSH
1725: LD_VAR 0 5
1729: PUSH
1730: LD_EXP 22
1734: PUSH
1735: LD_EXP 23
1739: PUSH
1740: LD_EXP 24
1744: PUSH
1745: LD_EXP 25
1749: PUSH
1750: LD_EXP 26
1754: PUSH
1755: LD_EXP 27
1759: PUSH
1760: LD_EXP 28
1764: PUSH
1765: LD_EXP 29
1769: PUSH
1770: LD_EXP 31
1774: PUSH
1775: LD_EXP 32
1779: PUSH
1780: LD_EXP 33
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: DIFF
1804: ST_TO_ADDR
// no_selected := others ;
1805: LD_ADDR_EXP 19
1809: PUSH
1810: LD_VAR 0 8
1814: ST_TO_ADDR
// if no_selected then
1815: LD_EXP 19
1819: IFFALSE 1833
// SaveCharacters ( no_selected , 11_others ) ;
1821: LD_EXP 19
1825: PPUSH
1826: LD_STRING 11_others
1828: PPUSH
1829: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1833: LD_ADDR_VAR 0 6
1837: PUSH
1838: LD_INT 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 1
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 7
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: ST_TO_ADDR
// for i in JMM ^ selected do
1935: LD_ADDR_VAR 0 2
1939: PUSH
1940: LD_EXP 21
1944: PUSH
1945: LD_EXP 20
1949: ADD
1950: PUSH
1951: FOR_IN
1952: IFFALSE 2141
// begin if GetClass ( i ) = 3 then
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 257
1963: PUSH
1964: LD_INT 3
1966: EQUAL
1967: IFFALSE 2124
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1969: LD_ADDR_OWVAR 37
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1987: LD_ADDR_OWVAR 39
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 2
2003: ARRAY
2004: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2005: LD_ADDR_OWVAR 38
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2023: LD_ADDR_OWVAR 40
2027: PUSH
2028: LD_VAR 0 6
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PUSH
2037: LD_INT 4
2039: ARRAY
2040: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2041: LD_ADDR_VAR 0 6
2045: PUSH
2046: LD_VAR 0 6
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: CALL_OW 3
2058: ST_TO_ADDR
// veh := CreateVehicle ;
2059: LD_ADDR_VAR 0 7
2063: PUSH
2064: CALL_OW 45
2068: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2069: LD_VAR 0 7
2073: PPUSH
2074: LD_INT 8
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_VAR 0 7
2093: PPUSH
2094: CALL_OW 52
// if i = JMM then
2098: LD_VAR 0 2
2102: PUSH
2103: LD_EXP 21
2107: EQUAL
2108: IFFALSE 2122
// SetMark ( veh , 1 ) ;
2110: LD_VAR 0 7
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 242
// end else
2122: GO 2139
// PlaceUnitArea ( i , am_hum_start , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 9
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// end ;
2139: GO 1951
2141: POP
2142: POP
// vc_chassis := us_medium_tracked ;
2143: LD_ADDR_OWVAR 37
2147: PUSH
2148: LD_INT 3
2150: ST_TO_ADDR
// vc_engine := engine_solar ;
2151: LD_ADDR_OWVAR 39
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_control := control_computer ;
2159: LD_ADDR_OWVAR 38
2163: PUSH
2164: LD_INT 3
2166: ST_TO_ADDR
// vc_weapon := us_radar ;
2167: LD_ADDR_OWVAR 40
2171: PUSH
2172: LD_INT 11
2174: ST_TO_ADDR
// veh := CreateVehicle ;
2175: LD_ADDR_VAR 0 7
2179: PUSH
2180: CALL_OW 45
2184: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2185: LD_VAR 0 7
2189: PPUSH
2190: LD_INT 87
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 48
// end ; end_of_file
2203: LD_VAR 0 1
2207: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2215: LD_ADDR_VAR 0 5
2219: PUSH
2220: LD_INT 6
2222: PUSH
2223: LD_INT 7
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_OWVAR 67
2238: ARRAY
2239: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
2240: LD_INT 69
2242: PUSH
2243: EMPTY
2244: LIST
2245: PPUSH
2246: LD_INT 141
2248: PPUSH
2249: CALL_OW 169
// Wait ( 1 ) ;
2253: LD_INT 1
2255: PPUSH
2256: CALL_OW 67
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// uc_nation := 2 ;
2268: LD_ADDR_OWVAR 21
2272: PUSH
2273: LD_INT 2
2275: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2276: LD_ADDR_OWVAR 37
2280: PUSH
2281: LD_INT 14
2283: ST_TO_ADDR
// vc_engine := engine_siberite ;
2284: LD_ADDR_OWVAR 39
2288: PUSH
2289: LD_INT 3
2291: ST_TO_ADDR
// vc_control := control_manual ;
2292: LD_ADDR_OWVAR 38
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2300: LD_ADDR_OWVAR 40
2304: PUSH
2305: LD_INT 31
2307: ST_TO_ADDR
// for i = 1 to 3 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 3
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2406
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: LD_VAR 0 5
2334: PPUSH
2335: CALL_OW 380
// un := CreateVehicle ;
2339: LD_ADDR_VAR 0 4
2343: PUSH
2344: CALL_OW 45
2348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: CALL_OW 12
2364: PPUSH
2365: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 156
2376: PPUSH
2377: LD_INT 15
2379: PPUSH
2380: LD_INT 6
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2390: CALL_OW 44
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 52
// end ;
2404: GO 2321
2406: POP
2407: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2408: LD_ADDR_EXP 37
2412: PUSH
2413: LD_INT 94
2415: PPUSH
2416: LD_STRING dammam
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: LD_INT 10000
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: LD_INT 300
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PPUSH
2438: LD_INT 1
2440: NEG
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: LD_INT 1
2447: NEG
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL 47184 0 5
2462: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
2463: LD_ADDR_EXP 37
2467: PUSH
2468: LD_EXP 37
2472: PUSH
2473: LD_INT 122
2475: PPUSH
2476: LD_STRING 
2478: PPUSH
2479: LD_VAR 0 5
2483: PPUSH
2484: LD_INT 100
2486: PUSH
2487: LD_INT 60
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PPUSH
2498: LD_INT 1
2500: NEG
2501: PUSH
2502: LD_INT 4
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: LD_INT 0
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL 47184 0 5
2521: ADD
2522: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2523: LD_ADDR_EXP 35
2527: PUSH
2528: LD_INT 45
2530: PPUSH
2531: LD_STRING jeddah
2533: PPUSH
2534: LD_VAR 0 5
2538: PPUSH
2539: LD_INT 700
2541: PUSH
2542: LD_INT 300
2544: PUSH
2545: LD_INT 10
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PPUSH
2553: LD_INT 1
2555: NEG
2556: PUSH
2557: LD_INT 5
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 2
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL 47184 0 5
2576: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2577: LD_ADDR_EXP 36
2581: PUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_STRING riyadh
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 500
2595: PUSH
2596: LD_INT 60
2598: PUSH
2599: LD_INT 0
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL 47184 0 5
2629: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2630: LD_ADDR_EXP 38
2634: PUSH
2635: LD_INT 69
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: LD_VAR 0 5
2645: PPUSH
2646: LD_INT 500
2648: PUSH
2649: LD_INT 50
2651: PUSH
2652: LD_INT 0
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: PPUSH
2660: LD_INT 1
2662: NEG
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL 47184 0 5
2683: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2684: LD_ADDR_EXP 48
2688: PUSH
2689: LD_EXP 37
2693: PUSH
2694: LD_EXP 35
2698: PUSH
2699: LD_EXP 38
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 58
2736: PUSH
2737: EMPTY
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2876
// begin if GetBase ( i ) then
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 274
2762: IFFALSE 2766
// continue ;
2764: GO 2750
// d := GetDir ( i ) ;
2766: LD_ADDR_VAR 0 3
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL_OW 254
2780: ST_TO_ADDR
// if d < 3 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: LESS
2789: IFFALSE 2807
// d := d + 3 else
2791: LD_ADDR_VAR 0 3
2795: PUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 3
2803: PLUS
2804: ST_TO_ADDR
2805: GO 2821
// d := d - 3 ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 3
2819: MINUS
2820: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 8
2826: PPUSH
2827: LD_VAR 0 5
2831: PPUSH
2832: CALL_OW 380
// un := CreateHuman ;
2836: LD_ADDR_VAR 0 4
2840: PUSH
2841: CALL_OW 44
2845: ST_TO_ADDR
// SetDir ( un , d ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_VAR 0 3
2855: PPUSH
2856: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 52
// end ;
2874: GO 2750
2876: POP
2877: POP
// if Difficulty > 1 then
2878: LD_OWVAR 67
2882: PUSH
2883: LD_INT 1
2885: GREATER
2886: IFFALSE 3257
// begin ar_kamikadze := [ ] ;
2888: LD_ADDR_EXP 41
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2895: LD_INT 0
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: CALL_OW 380
// un := CreateHuman ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PPUSH
2928: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2932: LD_VAR 0 4
2936: PPUSH
2937: LD_INT 23
2939: PPUSH
2940: LD_INT 44
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 48
// ComCrawl ( un ) ;
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 137
// un := CreateHuman ;
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: CALL_OW 44
2968: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2981: LD_VAR 0 4
2985: PPUSH
2986: LD_INT 30
2988: PPUSH
2989: LD_INT 39
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 48
// ComCrawl ( un ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 17
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 380
// un := CreateHuman ;
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_INT 45
3052: PPUSH
3053: LD_INT 86
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// ComHold ( un ) ;
3063: LD_VAR 0 4
3067: PPUSH
3068: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3072: LD_ADDR_EXP 41
3076: PUSH
3077: LD_EXP 41
3081: PPUSH
3082: LD_EXP 41
3086: PUSH
3087: LD_INT 1
3089: PLUS
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
// un := CreateHuman ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: CALL_OW 44
3110: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3123: LD_VAR 0 4
3127: PPUSH
3128: LD_INT 60
3130: PPUSH
3131: LD_INT 85
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 48
// ComHold ( un ) ;
3141: LD_VAR 0 4
3145: PPUSH
3146: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3150: LD_ADDR_EXP 41
3154: PUSH
3155: LD_EXP 41
3159: PPUSH
3160: LD_EXP 41
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 4
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 222
3208: PPUSH
3209: LD_INT 166
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// ComHold ( un ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3228: LD_ADDR_EXP 41
3232: PUSH
3233: LD_EXP 41
3237: PPUSH
3238: LD_EXP 41
3242: PUSH
3243: LD_INT 1
3245: PLUS
3246: PPUSH
3247: LD_VAR 0 4
3251: PPUSH
3252: CALL_OW 1
3256: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3257: LD_ADDR_EXP 39
3261: PUSH
3262: EMPTY
3263: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 5
3274: PPUSH
3275: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING SecondCharsGal
3286: ST_TO_ADDR
// hc_face_number := 4 ;
3287: LD_ADDR_OWVAR 34
3291: PUSH
3292: LD_INT 4
3294: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3295: LD_ADDR_EXP 39
3299: PUSH
3300: LD_EXP 39
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 44
3312: PPUSH
3313: CALL_OW 1
3317: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3318: LD_INT 2
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3333: LD_ADDR_OWVAR 33
3337: PUSH
3338: LD_STRING SecondCharsGal
3340: ST_TO_ADDR
// hc_face_number := 15 ;
3341: LD_ADDR_OWVAR 34
3345: PUSH
3346: LD_INT 15
3348: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3349: LD_ADDR_EXP 39
3353: PUSH
3354: LD_EXP 39
3358: PPUSH
3359: LD_INT 2
3361: PPUSH
3362: CALL_OW 44
3366: PPUSH
3367: CALL_OW 1
3371: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3372: LD_INT 2
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_VAR 0 5
3382: PPUSH
3383: CALL_OW 380
// hc_gallery :=  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3395: LD_ADDR_EXP 39
3399: PUSH
3400: LD_EXP 39
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: CALL_OW 44
3412: PPUSH
3413: CALL_OW 1
3417: ST_TO_ADDR
// hc_sex := sex_male ;
3418: LD_ADDR_OWVAR 27
3422: PUSH
3423: LD_INT 1
3425: ST_TO_ADDR
// hc_class = 11 ;
3426: LD_ADDR_OWVAR 28
3430: PUSH
3431: LD_INT 11
3433: ST_TO_ADDR
// hc_gallery = sandar ;
3434: LD_ADDR_OWVAR 33
3438: PUSH
3439: LD_STRING sandar
3441: ST_TO_ADDR
// hc_face_number = 33 ;
3442: LD_ADDR_OWVAR 34
3446: PUSH
3447: LD_INT 33
3449: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3450: LD_ADDR_OWVAR 26
3454: PUSH
3455: LD_STRING Thabit Muhair Saliba
3457: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3458: LD_ADDR_OWVAR 31
3462: PUSH
3463: LD_INT 0
3465: PUSH
3466: LD_INT 0
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: ST_TO_ADDR
// Saliba = CreateHuman ;
3481: LD_ADDR_EXP 43
3485: PUSH
3486: CALL_OW 44
3490: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3491: LD_EXP 43
3495: PPUSH
3496: LD_INT 7
3498: PPUSH
3499: CALL_OW 52
// if gensher_active then
3503: LD_EXP 18
3507: IFFALSE 3534
// begin Gensher = NewCharacter ( Dietrich ) ;
3509: LD_ADDR_EXP 44
3513: PUSH
3514: LD_STRING Dietrich
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3522: LD_EXP 44
3526: PPUSH
3527: LD_INT 94
3529: PPUSH
3530: CALL_OW 52
// end ; InitHc ;
3534: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3538: LD_ADDR_EXP 40
3542: PUSH
3543: EMPTY
3544: ST_TO_ADDR
// for i = 1 to 4 do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 4
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3731
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3561: LD_INT 13
3563: PUSH
3564: LD_INT 14
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: PPUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 1
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 12
3603: ARRAY
3604: PPUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 27
3613: PUSH
3614: LD_INT 26
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: PPUSH
3634: LD_INT 60
3636: PPUSH
3637: LD_INT 100
3639: PPUSH
3640: CALL_OW 12
3644: PPUSH
3645: CALL 43785 0 5
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3659: LD_ADDR_EXP 40
3663: PUSH
3664: LD_EXP 40
3668: PPUSH
3669: LD_EXP 40
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: PPUSH
3678: LD_VAR 0 4
3682: PPUSH
3683: CALL_OW 1
3687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
3708: LD_VAR 0 4
3712: PPUSH
3713: LD_INT 124
3715: PPUSH
3716: LD_INT 141
3718: PPUSH
3719: LD_INT 6
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 50
// end ;
3729: GO 3558
3731: POP
3732: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3733: LD_ADDR_EXP 42
3737: PUSH
3738: EMPTY
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3994
// for i = 1 to 3 do
3782: LD_ADDR_VAR 0 2
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_INT 3
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3990
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3798: LD_INT 14
3800: PPUSH
3801: LD_INT 3
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ARRAY
3822: PPUSH
3823: LD_INT 1
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 25
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 26
3853: PUSH
3854: LD_INT 28
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: CALL_OW 12
3873: ARRAY
3874: PPUSH
3875: LD_INT 100
3877: PPUSH
3878: CALL 43785 0 5
// un := CreateVehicle ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: CALL_OW 45
3891: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3892: LD_ADDR_EXP 42
3896: PUSH
3897: LD_EXP 42
3901: PPUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_EXP 42
3911: PUSH
3912: LD_VAR 0 2
3916: ARRAY
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: CALL 44342 0 3
3935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 5
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_INT 20
3963: PUSH
3964: LD_INT 21
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: LD_VAR 0 2
3979: ARRAY
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ;
3988: GO 3795
3990: POP
3991: POP
3992: GO 3779
3994: POP
3995: POP
// InitHc ;
3996: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 10
4008: PPUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 0
4014: PPUSH
4015: CALL_OW 58
// end ;
4019: LD_VAR 0 1
4023: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4024: LD_EXP 41
4028: IFFALSE 4102
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin enable ;
4036: ENABLE
// for i in ar_kamikadze do
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_EXP 41
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4100
// if See ( 1 , i ) then
4050: LD_INT 1
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 292
4062: IFFALSE 4098
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 81
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PPUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 74
4093: PPUSH
4094: CALL_OW 115
4098: GO 4047
4100: POP
4101: POP
// end ;
4102: PPOPN 1
4104: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4105: LD_EXP 13
4109: IFFALSE 4426
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
4119: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4120: LD_INT 35
4122: PPUSH
4123: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4127: LD_INT 1
4129: PPUSH
4130: CALL 32683 0 1
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4120
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4140: LD_INT 1
4142: PPUSH
4143: LD_INT 14
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: LD_INT 32
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: PPUSH
4164: CALL 32226 0 2
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4175: LD_EXP 67
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 33
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 34
4196: PUSH
4197: LD_INT 32
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PPUSH
4208: CALL_OW 72
4212: IFFALSE 4168
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: LD_EXP 67
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: PPUSH
4228: LD_INT 33
4230: PUSH
4231: LD_INT 2
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 34
4240: PUSH
4241: LD_INT 32
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_INT 5
4268: PPUSH
4269: CALL_OW 469
4273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4274: LD_INT 35
4276: PPUSH
4277: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4281: LD_ADDR_VAR 0 4
4285: PUSH
4286: LD_INT 5
4288: PPUSH
4289: CALL_OW 469
4293: ST_TO_ADDR
// tmp := 100 ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 100
4301: ST_TO_ADDR
// if pos then
4302: LD_VAR 0 4
4306: IFFALSE 4346
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 20
4336: PPUSH
4337: CALL 44836 0 4
4341: PUSH
4342: LD_INT 4
4344: ARRAY
4345: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4346: LD_VAR 0 4
4350: PUSH
4351: LD_EXP 14
4355: NOT
4356: AND
4357: PUSH
4358: LD_VAR 0 3
4362: PUSH
4363: LD_INT 10
4365: LESS
4366: AND
4367: IFFALSE 4274
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4369: LD_VAR 0 2
4373: PPUSH
4374: LD_VAR 0 4
4378: PUSH
4379: LD_INT 1
4381: ARRAY
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 2
4390: ARRAY
4391: PPUSH
4392: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 198
4403: PPUSH
4404: LD_INT 113
4406: PPUSH
4407: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 124
4418: PPUSH
4419: LD_INT 7
4421: PPUSH
4422: CALL_OW 171
// end ;
4426: PPOPN 4
4428: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4429: LD_EXP 6
4433: IFFALSE 6978
4435: GO 4437
4437: DISABLE
4438: LD_INT 0
4440: PPUSH
4441: PPUSH
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4448: LD_ADDR_VAR 0 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: ST_TO_ADDR
// coords := [ ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4480: LD_ADDR_VAR 0 6
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 0
4490: PUSH
4491: LD_INT 0
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 14
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 28
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 25
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: LD_INT 28
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 14
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: LD_INT 29
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PPUSH
4608: CALL 32226 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
4612: LD_INT 21000
4614: PUSH
4615: LD_INT 19600
4617: PUSH
4618: LD_INT 18900
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PPUSH
4632: CALL_OW 67
// InitHc ;
4636: CALL_OW 19
// InitUc ;
4640: CALL_OW 18
// uc_side := 2 ;
4644: LD_ADDR_OWVAR 20
4648: PUSH
4649: LD_INT 2
4651: ST_TO_ADDR
// uc_nation := 2 ;
4652: LD_ADDR_OWVAR 21
4656: PUSH
4657: LD_INT 2
4659: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: EMPTY
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_EXP 67
4699: PUSH
4700: LD_INT 1
4702: ARRAY
4703: PUSH
4704: LD_INT 34
4706: PUSH
4707: LD_INT 32
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: DIFF
4719: PPUSH
4720: CALL_OW 1
4724: ST_TO_ADDR
// for i = 1 to Difficulty do
4725: LD_ADDR_VAR 0 1
4729: PUSH
4730: DOUBLE
4731: LD_INT 1
4733: DEC
4734: ST_TO_ADDR
4735: LD_OWVAR 67
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4863
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4743: LD_INT 13
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 5
4751: PPUSH
4752: LD_INT 29
4754: PPUSH
4755: LD_INT 100
4757: PPUSH
4758: CALL 43785 0 5
// un := CreateVehicle ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: CALL_OW 45
4771: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_VAR 0 3
4781: PPUSH
4782: LD_INT 1
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PUSH
4794: LD_INT 1
4796: PLUS
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_VAR 0 2
4806: PPUSH
4807: CALL 44342 0 3
4811: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 16
4831: PPUSH
4832: LD_INT 0
4834: PPUSH
4835: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 51
4846: PPUSH
4847: LD_INT 10
4849: PPUSH
4850: CALL_OW 111
// wait ( 0 0$2 ) ;
4854: LD_INT 70
4856: PPUSH
4857: CALL_OW 67
// end ;
4861: GO 4740
4863: POP
4864: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 51
4872: PUSH
4873: LD_INT 24
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 75
4882: PUSH
4883: LD_INT 90
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4894: LD_INT 1
4896: PPUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 5
4910: PPUSH
4911: LD_VAR 0 6
4915: PPUSH
4916: CALL 32520 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_INT 2
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_OWVAR 67
4948: ARRAY
4949: PUSH
4950: FOR_TO
4951: IFFALSE 5035
// begin PrepareHuman ( false , 17 , skill ) ;
4953: LD_INT 0
4955: PPUSH
4956: LD_INT 17
4958: PPUSH
4959: LD_VAR 0 4
4963: PPUSH
4964: CALL_OW 380
// un := CreateHuman ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_VAR 0 3
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 2
4998: ARRAY
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: CALL 44342 0 3
5017: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5018: LD_VAR 0 2
5022: PPUSH
5023: LD_INT 13
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4950
5035: POP
5036: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 2
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PUSH
5061: LD_OWVAR 67
5065: ARRAY
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5171
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5070: LD_INT 0
5072: PPUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 12
5093: ARRAY
5094: PPUSH
5095: LD_VAR 0 4
5099: PPUSH
5100: CALL_OW 380
// un := CreateHuman ;
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: CALL_OW 44
5113: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 44342 0 3
5153: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5154: LD_VAR 0 2
5158: PPUSH
5159: LD_INT 13
5161: PPUSH
5162: LD_INT 0
5164: PPUSH
5165: CALL_OW 49
// end ;
5169: GO 5067
5171: POP
5172: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_INT 67
5180: PUSH
5181: LD_INT 112
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 130
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5202: LD_INT 2
5204: PPUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 5
5218: PPUSH
5219: LD_VAR 0 6
5223: PPUSH
5224: CALL 32520 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 1
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_OWVAR 67
5256: ARRAY
5257: PUSH
5258: FOR_TO
5259: IFFALSE 5343
// begin PrepareHuman ( false , 17 , skill ) ;
5261: LD_INT 0
5263: PPUSH
5264: LD_INT 17
5266: PPUSH
5267: LD_VAR 0 4
5271: PPUSH
5272: CALL_OW 380
// un := CreateHuman ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: CALL_OW 44
5285: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_VAR 0 3
5295: PPUSH
5296: LD_INT 3
5298: PUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 3
5306: ARRAY
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: LD_VAR 0 2
5320: PPUSH
5321: CALL 44342 0 3
5325: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5326: LD_VAR 0 2
5330: PPUSH
5331: LD_INT 14
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// end ;
5341: GO 5258
5343: POP
5344: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 148
5352: PUSH
5353: LD_INT 158
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 148
5362: PUSH
5363: LD_INT 158
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5374: LD_INT 3
5376: PPUSH
5377: LD_VAR 0 3
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PPUSH
5391: LD_VAR 0 6
5395: PPUSH
5396: CALL 32520 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5639
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5433: LD_INT 14
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: LD_INT 1
5441: PUSH
5442: LD_INT 5
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: CALL_OW 12
5459: ARRAY
5460: PPUSH
5461: LD_INT 27
5463: PUSH
5464: LD_INT 26
5466: PUSH
5467: LD_INT 28
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 3
5480: PPUSH
5481: CALL_OW 12
5485: ARRAY
5486: PPUSH
5487: LD_INT 100
5489: PPUSH
5490: CALL 43785 0 5
// un := CreateVehicle ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: CALL_OW 45
5503: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_INT 4
5516: PUSH
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 4
5524: ARRAY
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: LD_VAR 0 2
5538: PPUSH
5539: CALL 44342 0 3
5543: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5544: LD_VAR 0 2
5548: PPUSH
5549: LD_INT 5
5551: PPUSH
5552: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5556: LD_VAR 0 2
5560: PPUSH
5561: LD_INT 15
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 49
// if GetControl ( un ) = control_manual then
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 263
5580: PUSH
5581: LD_INT 1
5583: EQUAL
5584: IFFALSE 5615
// begin PrepareHuman ( false , 3 , skill ) ;
5586: LD_INT 0
5588: PPUSH
5589: LD_INT 3
5591: PPUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5601: CALL_OW 44
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_INT 179
5622: PPUSH
5623: LD_INT 135
5625: PPUSH
5626: CALL_OW 111
// wait ( 0 0$2 ) ;
5630: LD_INT 70
5632: PPUSH
5633: CALL_OW 67
// end ;
5637: GO 5430
5639: POP
5640: POP
// vc_chassis := 15 ;
5641: LD_ADDR_OWVAR 37
5645: PUSH
5646: LD_INT 15
5648: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 4
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_INT 4
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: CALL_OW 45
5683: PPUSH
5684: CALL 44342 0 3
5688: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 4
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 3
5702: PUSH
5703: LD_INT 4
5705: ARRAY
5706: ARRAY
5707: PPUSH
5708: LD_INT 15
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5718: LD_INT 0
5720: PPUSH
5721: LD_INT 11
5723: PPUSH
5724: LD_VAR 0 4
5728: PPUSH
5729: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_VAR 0 3
5742: PPUSH
5743: LD_INT 4
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_INT 4
5753: ARRAY
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 44
5767: PPUSH
5768: CALL 44342 0 3
5772: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5773: LD_VAR 0 3
5777: PUSH
5778: LD_INT 4
5780: ARRAY
5781: PUSH
5782: LD_VAR 0 3
5786: PUSH
5787: LD_INT 4
5789: ARRAY
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 4
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 4
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: MINUS
5813: ARRAY
5814: PPUSH
5815: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5819: LD_ADDR_VAR 0 5
5823: PUSH
5824: LD_INT 148
5826: PUSH
5827: LD_INT 140
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5837: LD_INT 1
5839: PPUSH
5840: LD_VAR 0 3
5844: PUSH
5845: LD_INT 4
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 5
5853: PPUSH
5854: LD_VAR 0 6
5858: PPUSH
5859: CALL 32520 0 4
// if gensher_active then
5863: LD_EXP 18
5867: IFFALSE 6220
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5869: LD_EXP 44
5873: PPUSH
5874: LD_STRING D10-Diet-1
5876: PPUSH
5877: CALL_OW 94
// for i = 1 to 2 do
5881: LD_ADDR_VAR 0 1
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 2
5893: PUSH
5894: FOR_TO
5895: IFFALSE 6017
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5897: LD_INT 13
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: LD_INT 5
5905: PPUSH
5906: LD_INT 29
5908: PPUSH
5909: LD_INT 100
5911: PPUSH
5912: CALL 43785 0 5
// un := CreateVehicle ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: CALL_OW 45
5925: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 5
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: CALL 44342 0 3
5965: ST_TO_ADDR
// SetDir ( un , 0 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 23
5985: PPUSH
5986: LD_INT 0
5988: PPUSH
5989: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
5993: LD_VAR 0 2
5997: PPUSH
5998: LD_INT 85
6000: PPUSH
6001: LD_INT 152
6003: PPUSH
6004: CALL_OW 111
// wait ( 0 0$2 ) ;
6008: LD_INT 70
6010: PPUSH
6011: CALL_OW 67
// end ;
6015: GO 5894
6017: POP
6018: POP
// for i = 1 to 3 do
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_INT 3
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6174
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6035: LD_INT 14
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: LD_INT 5
6043: PPUSH
6044: LD_INT 27
6046: PUSH
6047: LD_INT 28
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 2
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 43785 0 5
// un := CreateVehicle ;
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 5
6095: PUSH
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 5
6103: ARRAY
6104: PUSH
6105: LD_INT 1
6107: PLUS
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL 44342 0 3
6122: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_INT 0
6130: PPUSH
6131: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 23
6142: PPUSH
6143: LD_INT 0
6145: PPUSH
6146: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: LD_INT 85
6157: PPUSH
6158: LD_INT 152
6160: PPUSH
6161: CALL_OW 111
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// end ;
6172: GO 6032
6174: POP
6175: POP
// coords := [ [ 97 , 143 ] ] ;
6176: LD_ADDR_VAR 0 5
6180: PUSH
6181: LD_INT 97
6183: PUSH
6184: LD_INT 143
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6194: LD_INT 1
6196: PPUSH
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 5
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 5
6210: PPUSH
6211: LD_VAR 0 6
6215: PPUSH
6216: CALL 32520 0 4
// end ; Wait ( 10 10$00 ) ;
6220: LD_INT 21000
6222: PPUSH
6223: CALL_OW 67
// tmp := [ ] ;
6227: LD_ADDR_VAR 0 3
6231: PUSH
6232: EMPTY
6233: ST_TO_ADDR
// w := 1 ;
6234: LD_ADDR_VAR 0 7
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// repeat tmp := [ ] ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: EMPTY
6248: ST_TO_ADDR
// if w mod 4 = 0 then
6249: LD_VAR 0 7
6253: PUSH
6254: LD_INT 4
6256: MOD
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: IFFALSE 6348
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6263: LD_ADDR_VAR 0 8
6267: PUSH
6268: LD_INT 11
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 11
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 24
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 11
6306: PUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 24
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 11
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: ST_TO_ADDR
6346: GO 6450
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6348: LD_ADDR_VAR 0 8
6352: PUSH
6353: LD_INT 14
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 28
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 14
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 14
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 28
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 14
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 29
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// if w mod 3 = 0 then
6450: LD_VAR 0 7
6454: PUSH
6455: LD_INT 3
6457: MOD
6458: PUSH
6459: LD_INT 0
6461: EQUAL
6462: IFFALSE 6538
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6464: LD_ADDR_VAR 0 8
6468: PUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: LD_INT 1
6476: PUSH
6477: LD_VAR 0 8
6481: PUSH
6482: LD_VAR 0 1
6486: ARRAY
6487: PUSH
6488: LD_INT 1
6490: PLUS
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: LD_INT 14
6498: PUSH
6499: LD_INT 1
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 25
6507: PUSH
6508: LD_INT 28
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 12
6525: ARRAY
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL 44342 0 3
6537: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6538: LD_INT 1
6540: PPUSH
6541: LD_VAR 0 8
6545: PPUSH
6546: CALL 32226 0 2
// if GetSide ( ar_dep_w ) = 2 then
6550: LD_INT 45
6552: PPUSH
6553: CALL_OW 255
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6646
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6563: LD_ADDR_VAR 0 8
6567: PUSH
6568: LD_INT 14
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 28
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 14
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 27
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 14
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 27
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6627: LD_INT 2
6629: PPUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL 32226 0 2
// wait ( 0 0$50 ) ;
6639: LD_INT 1750
6641: PPUSH
6642: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6653: LD_EXP 67
6657: PUSH
6658: LD_INT 1
6660: ARRAY
6661: PPUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: LD_INT 32
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 72
6683: PUSH
6684: LD_INT 4
6686: GREATEREQUAL
6687: IFFALSE 6646
// wait ( 0 0$10 ) ;
6689: LD_INT 350
6691: PPUSH
6692: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_EXP 67
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: LD_INT 3
6712: PUSH
6713: LD_INT 34
6715: PUSH
6716: LD_INT 32
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6732: LD_INT 100
6734: PPUSH
6735: CALL_OW 13
6739: PUSH
6740: LD_INT 50
6742: LESS
6743: IFFALSE 6776
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6745: LD_ADDR_VAR 0 5
6749: PUSH
6750: LD_INT 55
6752: PUSH
6753: LD_INT 7
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 75
6762: PUSH
6763: LD_INT 90
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 6805
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 128
6783: PUSH
6784: LD_INT 94
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 180
6793: PUSH
6794: LD_INT 135
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if w mod 4 = 0 then
6805: LD_VAR 0 7
6809: PUSH
6810: LD_INT 4
6812: MOD
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: IFFALSE 6848
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6819: LD_ADDR_VAR 0 5
6823: PUSH
6824: LD_INT 91
6826: PUSH
6827: LD_INT 58
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 117
6836: PUSH
6837: LD_INT 107
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6848: LD_INT 1
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: LD_VAR 0 5
6860: PPUSH
6861: LD_VAR 0 6
6865: PPUSH
6866: CALL 32520 0 4
// if mc_vehicles [ 2 ] then
6870: LD_EXP 67
6874: PUSH
6875: LD_INT 2
6877: ARRAY
6878: IFFALSE 6914
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_EXP 67
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_INT 73
6894: PUSH
6895: LD_INT 115
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PPUSH
6905: LD_VAR 0 6
6909: PPUSH
6910: CALL 32520 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
6914: LD_INT 19950
6916: PPUSH
6917: LD_INT 26250
6919: PPUSH
6920: CALL_OW 12
6924: PPUSH
6925: CALL_OW 67
// w := w + 1 ;
6929: LD_ADDR_VAR 0 7
6933: PUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_INT 1
6941: PLUS
6942: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
6943: LD_INT 94
6945: PPUSH
6946: CALL_OW 301
6950: PUSH
6951: LD_EXP 48
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PPUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 72
6974: NOT
6975: OR
6976: IFFALSE 6242
// end ;
6978: PPOPN 8
6980: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
6981: LD_INT 69
6983: IFFALSE 7358
6985: GO 6987
6987: DISABLE
6988: LD_INT 0
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
// begin enable ;
6994: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
6995: LD_INT 35
6997: PPUSH
6998: LD_INT 1190
7000: PPUSH
7001: CALL_OW 12
7005: PPUSH
7006: CALL_OW 67
// tmp := [ ] ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: EMPTY
7016: ST_TO_ADDR
// uc_side := 8 ;
7017: LD_ADDR_OWVAR 20
7021: PUSH
7022: LD_INT 8
7024: ST_TO_ADDR
// uc_nation := 2 ;
7025: LD_ADDR_OWVAR 21
7029: PUSH
7030: LD_INT 2
7032: ST_TO_ADDR
// InitHc ;
7033: CALL_OW 19
// for i = 1 to 3 do
7037: LD_ADDR_VAR 0 1
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_INT 3
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7178
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 12
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: LD_INT 27
7083: PUSH
7084: LD_INT 28
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 12
7101: ARRAY
7102: PPUSH
7103: LD_INT 100
7105: PPUSH
7106: CALL 43785 0 5
// un := CreateVehicle ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: CALL_OW 45
7119: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 15
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 2
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 1
7175: ST_TO_ADDR
// end ;
7176: GO 7050
7178: POP
7179: POP
// for i = 1 to 4 do
7180: LD_ADDR_VAR 0 1
7184: PUSH
7185: DOUBLE
7186: LD_INT 1
7188: DEC
7189: ST_TO_ADDR
7190: LD_INT 4
7192: PUSH
7193: FOR_TO
7194: IFFALSE 7273
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_INT 4
7204: PPUSH
7205: CALL_OW 12
7209: PPUSH
7210: LD_INT 6
7212: PPUSH
7213: CALL_OW 380
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_INT 15
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7242: LD_ADDR_VAR 0 2
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 1
7270: ST_TO_ADDR
// end ;
7271: GO 7193
7273: POP
7274: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_INT 210
7282: PPUSH
7283: LD_INT 177
7285: PPUSH
7286: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7290: LD_ADDR_VAR 0 4
7294: PUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 70
7312: ST_TO_ADDR
// if x then
7313: LD_VAR 0 4
7317: IFFALSE 7345
// for i in x do
7319: LD_ADDR_VAR 0 1
7323: PUSH
7324: LD_VAR 0 4
7328: PUSH
7329: FOR_IN
7330: IFFALSE 7343
// RemoveUnit ( i ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 64
7341: GO 7329
7343: POP
7344: POP
// wait ( 0 0$3 ) ;
7345: LD_INT 105
7347: PPUSH
7348: CALL_OW 67
// until tmp ;
7352: LD_VAR 0 2
7356: IFFALSE 7275
// end ; end_of_file
7358: PPOPN 4
7360: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// InGameOn ;
7369: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7373: LD_EXP 21
7377: PPUSH
7378: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7382: LD_ADDR_VAR 0 2
7386: PUSH
7387: LD_INT 22
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7416: LD_ADDR_VAR 0 4
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 1
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 34
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 69
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: ST_TO_ADDR
// for i = 1 to tmp do
7454: LD_ADDR_VAR 0 6
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_VAR 0 2
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7517
// begin if i = 5 then
7472: LD_VAR 0 6
7476: PUSH
7477: LD_INT 5
7479: EQUAL
7480: IFFALSE 7484
// break ;
7482: GO 7517
// sols := Replace ( sols , i , tmp [ i ] ) ;
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 5
7493: PPUSH
7494: LD_VAR 0 6
7498: PPUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_VAR 0 6
7508: ARRAY
7509: PPUSH
7510: CALL_OW 1
7514: ST_TO_ADDR
// end ;
7515: GO 7469
7517: POP
7518: POP
// tmp := ar_force_tmp ;
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_EXP 39
7528: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PPUSH
7538: LD_INT 108
7540: PPUSH
7541: LD_INT 139
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PPUSH
7578: LD_INT 114
7580: PPUSH
7581: LD_INT 132
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7591: LD_VAR 0 2
7595: PUSH
7596: LD_INT 3
7598: ARRAY
7599: PPUSH
7600: LD_INT 115
7602: PPUSH
7603: LD_INT 132
7605: PPUSH
7606: LD_INT 0
7608: PPUSH
7609: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7613: LD_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 3
7629: ARRAY
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7639: LD_VAR 0 4
7643: PPUSH
7644: LD_INT 83
7646: PPUSH
7647: LD_INT 123
7649: PPUSH
7650: CALL_OW 111
// Wait ( 0 0$01 ) ;
7654: LD_INT 35
7656: PPUSH
7657: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7661: LD_INT 90
7663: PPUSH
7664: LD_INT 144
7666: PPUSH
7667: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_INT 88
7678: PPUSH
7679: LD_INT 129
7681: PPUSH
7682: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7686: LD_ADDR_VAR 0 3
7690: PUSH
7691: LD_INT 92
7693: PUSH
7694: LD_INT 131
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 88
7703: PUSH
7704: LD_INT 127
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 91
7713: PUSH
7714: LD_INT 132
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 92
7723: PUSH
7724: LD_INT 134
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// for i = 1 to sols do
7737: LD_ADDR_VAR 0 6
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_VAR 0 5
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7826
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7755: LD_VAR 0 5
7759: PUSH
7760: LD_VAR 0 6
7764: ARRAY
7765: PPUSH
7766: LD_VAR 0 3
7770: PUSH
7771: LD_VAR 0 6
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 3
7785: PUSH
7786: LD_VAR 0 6
7790: ARRAY
7791: PUSH
7792: LD_INT 2
7794: ARRAY
7795: PPUSH
7796: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
7800: LD_VAR 0 5
7804: PUSH
7805: LD_VAR 0 6
7809: ARRAY
7810: PPUSH
7811: CALL_OW 197
// AddComHold ( sols ) ;
7815: LD_VAR 0 5
7819: PPUSH
7820: CALL_OW 200
// end ;
7824: GO 7752
7826: POP
7827: POP
// repeat wait ( 0 0$1 ) ;
7828: LD_INT 35
7830: PPUSH
7831: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
7835: LD_VAR 0 5
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: LD_INT 92
7846: PPUSH
7847: LD_INT 131
7849: PPUSH
7850: CALL_OW 297
7854: PUSH
7855: LD_INT 4
7857: LESS
7858: IFFALSE 7828
// CenterOnXY ( 96 , 139 ) ;
7860: LD_INT 96
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 84
// wait ( 0 0$3 ) ;
7870: LD_INT 105
7872: PPUSH
7873: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
7877: LD_INT 111
7879: PPUSH
7880: LD_INT 135
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 25
7888: NEG
7889: PPUSH
7890: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 2
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PPUSH
7912: CALL_OW 250
7916: PUSH
7917: LD_INT 3
7919: PLUS
7920: PPUSH
7921: LD_VAR 0 2
7925: PUSH
7926: LD_INT 1
7928: ARRAY
7929: PPUSH
7930: CALL_OW 251
7934: PPUSH
7935: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 3
7946: ARRAY
7947: PPUSH
7948: LD_INT 7
7950: PPUSH
7951: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
7955: LD_VAR 0 2
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PPUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PPUSH
7973: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
7977: LD_INT 35
7979: PPUSH
7980: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 2
8000: ARRAY
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 5
8009: LESS
8010: IFFALSE 7977
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8012: LD_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 2
8028: ARRAY
8029: PPUSH
8030: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: LD_STRING D1a-Merc1-1
8045: PPUSH
8046: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PPUSH
8059: LD_STRING D1a-FMerc2-1
8061: PPUSH
8062: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PPUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8088: LD_VAR 0 2
8092: PUSH
8093: LD_INT 1
8095: ARRAY
8096: PPUSH
8097: LD_INT 500
8099: PPUSH
8100: CALL_OW 234
// wait ( 0 0$2 ) ;
8104: LD_INT 70
8106: PPUSH
8107: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8111: LD_VAR 0 2
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_INT 2
8122: PPUSH
8123: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8127: LD_INT 10
8129: PPUSH
8130: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_STRING D1a-Merc1-2
8145: PPUSH
8146: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8150: LD_INT 7
8152: PPUSH
8153: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: ARRAY
8165: PPUSH
8166: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8170: LD_VAR 0 2
8174: PUSH
8175: LD_INT 2
8177: ARRAY
8178: PPUSH
8179: LD_INT 10
8181: PPUSH
8182: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_STRING D1a-FMerc2-2
8197: PPUSH
8198: CALL_OW 88
// wait ( 0 0$1 ) ;
8202: LD_INT 35
8204: PPUSH
8205: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8209: LD_INT 7
8211: PPUSH
8212: CALL_OW 85
// wait ( 0 0$2 ) ;
8216: LD_INT 70
8218: PPUSH
8219: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8223: LD_EXP 43
8227: PPUSH
8228: LD_STRING D1a-Saliba-1
8230: PPUSH
8231: CALL_OW 91
// KillUnit ( Saliba ) ;
8235: LD_EXP 43
8239: PPUSH
8240: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 3
8251: ARRAY
8252: PPUSH
8253: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8257: LD_EXP 21
8261: PPUSH
8262: CALL_OW 85
// wait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 67
// InGameOff ;
8273: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8277: LD_STRING M1
8279: PPUSH
8280: CALL_OW 337
// game_speed := 4 ;
8284: LD_ADDR_OWVAR 65
8288: PUSH
8289: LD_INT 4
8291: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8292: LD_INT 111
8294: PPUSH
8295: LD_INT 135
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: CALL_OW 331
// SaveForQuickRestart ;
8305: CALL_OW 22
// ar_run := true ;
8309: LD_ADDR_EXP 5
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8317: LD_INT 35
8319: PPUSH
8320: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8324: LD_INT 22
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 91
8336: PUSH
8337: LD_INT 7
8339: PUSH
8340: LD_INT 10
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 7
8359: PPUSH
8360: CALL_OW 256
8364: PUSH
8365: LD_INT 999
8367: LESS
8368: OR
8369: IFFALSE 8317
// if GetSide ( ar_dep_s ) = 2 then
8371: LD_INT 7
8373: PPUSH
8374: CALL_OW 255
8378: PUSH
8379: LD_INT 2
8381: EQUAL
8382: IFFALSE 8394
// SetSide ( ar_dep_s , 1 ) ;
8384: LD_INT 7
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 235
// end ;
8394: LD_VAR 0 1
8398: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8399: LD_EXP 5
8403: IFFALSE 8763
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_EXP 39
8422: PUSH
8423: LD_EXP 36
8427: PPUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ADD
8461: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_INT 5
8469: PPUSH
8470: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8474: LD_INT 5
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 343
// k := 1 ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// for i in tmp do
8492: LD_ADDR_VAR 0 1
8496: PUSH
8497: LD_VAR 0 2
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8588
// begin if IsInUnit ( i ) then
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 310
8514: IFFALSE 8525
// ComExitBuilding ( i ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 122
// if GetClass ( i ) = 3 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 257
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8574
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_EXP 40
8549: PUSH
8550: LD_VAR 0 3
8554: ARRAY
8555: PPUSH
8556: CALL_OW 180
// k := k + 1 ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 3
8569: PUSH
8570: LD_INT 1
8572: PLUS
8573: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8574: LD_VAR 0 1
8578: PPUSH
8579: LD_INT 10
8581: PPUSH
8582: CALL_OW 173
// end ;
8586: GO 8502
8588: POP
8589: POP
// ar_patrol := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8598: LD_INT 10
8600: PPUSH
8601: CALL_OW 67
// for i in tmp do
8605: LD_ADDR_VAR 0 1
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_IN
8616: IFFALSE 8644
// if not HasTask ( i ) then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 314
8627: NOT
8628: IFFALSE 8642
// ComMoveToArea ( i , escape_area ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 10
8637: PPUSH
8638: CALL_OW 113
8642: GO 8615
8644: POP
8645: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 95
8658: PUSH
8659: LD_INT 10
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// if k then
8671: LD_VAR 0 3
8675: IFFALSE 8744
// for i in k do
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8742
// begin if IsInUnit ( i ) then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 310
8699: IFFALSE 8715
// RemoveUnit ( IsInUnit ( i ) ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 310
8710: PPUSH
8711: CALL_OW 64
// RemoveUnit ( i ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 64
// tmp := tmp diff i ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 2
8733: PUSH
8734: LD_VAR 0 1
8738: DIFF
8739: ST_TO_ADDR
// end ;
8740: GO 8687
8742: POP
8743: POP
// until tmp = [ ] ;
8744: LD_VAR 0 2
8748: PUSH
8749: EMPTY
8750: EQUAL
8751: IFFALSE 8598
// ChangeSideFog ( 5 , 5 ) ;
8753: LD_INT 5
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 343
// end ;
8763: PPOPN 3
8765: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
8766: LD_EXP 7
8770: IFFALSE 9060
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// begin uc_side := 2 ;
8780: LD_ADDR_OWVAR 20
8784: PUSH
8785: LD_INT 2
8787: ST_TO_ADDR
// uc_nation := 2 ;
8788: LD_ADDR_OWVAR 21
8792: PUSH
8793: LD_INT 2
8795: ST_TO_ADDR
// InitHc ;
8796: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_INT 6
8808: PPUSH
8809: CALL_OW 380
// un := CreateHuman ;
8813: LD_ADDR_VAR 0 2
8817: PUSH
8818: CALL_OW 44
8822: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
8823: LD_INT 14
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_INT 27
8834: PPUSH
8835: LD_INT 98
8837: PPUSH
8838: CALL 43785 0 5
// veh := CreateVehicle ;
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: CALL_OW 45
8851: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 179
8871: PPUSH
8872: LD_INT 135
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 126
8903: PPUSH
8904: LD_INT 133
8906: PPUSH
8907: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
8911: LD_INT 10
8913: PPUSH
8914: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 3
8925: PPUSH
8926: CALL_OW 292
8930: PUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 9
8946: LESS
8947: OR
8948: IFFALSE 8911
// ComHold ( veh ) ;
8950: LD_VAR 0 3
8954: PPUSH
8955: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: LD_STRING D2aa-Ar1-1
8966: PPUSH
8967: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 177
8978: PPUSH
8979: LD_INT 96
8981: PPUSH
8982: CALL_OW 111
// AddComExitVehicle ( un ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8995: LD_INT 35
8997: PPUSH
8998: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 69
9009: PPUSH
9010: CALL_OW 296
9014: PUSH
9015: LD_INT 15
9017: LESS
9018: IFFALSE 8995
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9020: LD_ADDR_EXP 48
9024: PUSH
9025: LD_EXP 48
9029: PPUSH
9030: LD_INT 3
9032: PUSH
9033: LD_EXP 48
9037: PUSH
9038: LD_INT 3
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: PLUS
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL 44342 0 3
9059: ST_TO_ADDR
// end ;
9060: PPOPN 3
9062: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9063: LD_INT 7
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_INT 7
9077: PPUSH
9078: CALL_OW 301
9082: OR
9083: IFFALSE 11507
9085: GO 9087
9087: DISABLE
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_EXP 36
9101: PPUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 3
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: PUSH
9117: FOR_IN
9118: IFFALSE 9134
// SetSide ( i , 1 ) ;
9120: LD_VAR 0 1
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 235
9132: GO 9117
9134: POP
9135: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 46
9143: PUSH
9144: LD_INT 41
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 50
9153: PUSH
9154: LD_INT 25
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 57
9163: PUSH
9164: LD_INT 75
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 75
9173: PUSH
9174: LD_INT 89
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 51
9183: PUSH
9184: LD_INT 45
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 95
9193: PUSH
9194: LD_INT 95
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 77
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 101
9213: PUSH
9214: LD_INT 76
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 118
9223: PUSH
9224: LD_INT 81
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 139
9233: PUSH
9234: LD_INT 97
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 129
9243: PUSH
9244: LD_INT 114
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 154
9253: PUSH
9254: LD_INT 111
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// base_captured := true ;
9275: LD_ADDR_EXP 6
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// DialogueOn ;
9283: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9287: LD_EXP 21
9291: PPUSH
9292: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9296: LD_EXP 21
9300: PPUSH
9301: LD_STRING D2-JMM-1
9303: PPUSH
9304: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9308: LD_EXP 30
9312: PPUSH
9313: LD_STRING D2-Pow-1
9315: PPUSH
9316: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9320: LD_EXP 21
9324: PPUSH
9325: LD_STRING D2-JMM-2
9327: PPUSH
9328: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9332: LD_EXP 30
9336: PPUSH
9337: LD_STRING D2-Pow-2
9339: PPUSH
9340: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9344: LD_EXP 21
9348: PPUSH
9349: LD_STRING D2-JMM-3
9351: PPUSH
9352: CALL_OW 88
// DialogueOff ;
9356: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9360: LD_STRING M2
9362: PPUSH
9363: CALL_OW 337
// Wait ( 0 0$2 ) ;
9367: LD_INT 70
9369: PPUSH
9370: CALL_OW 67
// if IsOk ( Gary ) then
9374: LD_EXP 32
9378: PPUSH
9379: CALL_OW 302
9383: IFFALSE 9397
// Say ( Gary , D2a-Gary-1 ) ;
9385: LD_EXP 32
9389: PPUSH
9390: LD_STRING D2a-Gary-1
9392: PPUSH
9393: CALL_OW 88
// if IsOk ( Bobby ) then
9397: LD_EXP 24
9401: PPUSH
9402: CALL_OW 302
9406: IFFALSE 9420
// Say ( Bobby , D2a-Bobby-1 ) ;
9408: LD_EXP 24
9412: PPUSH
9413: LD_STRING D2a-Bobby-1
9415: PPUSH
9416: CALL_OW 88
// if IsOk ( Cyrus ) then
9420: LD_EXP 25
9424: PPUSH
9425: CALL_OW 302
9429: IFFALSE 9443
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING D2a-Cyrus-1
9438: PPUSH
9439: CALL_OW 88
// if IsOk ( Lisa ) then
9443: LD_EXP 22
9447: PPUSH
9448: CALL_OW 302
9452: IFFALSE 9466
// Say ( Lisa , D2a-Lisa-1 ) ;
9454: LD_EXP 22
9458: PPUSH
9459: LD_STRING D2a-Lisa-1
9461: PPUSH
9462: CALL_OW 88
// if IsOk ( Frank ) then
9466: LD_EXP 33
9470: PPUSH
9471: CALL_OW 302
9475: IFFALSE 9489
// Say ( Frank , D2a-Frank-1 ) ;
9477: LD_EXP 33
9481: PPUSH
9482: LD_STRING D2a-Frank-1
9484: PPUSH
9485: CALL_OW 88
// if IsOk ( Cornel ) then
9489: LD_EXP 31
9493: PPUSH
9494: CALL_OW 302
9498: IFFALSE 9512
// Say ( Cornel , D2a-Corn-1 ) ;
9500: LD_EXP 31
9504: PPUSH
9505: LD_STRING D2a-Corn-1
9507: PPUSH
9508: CALL_OW 88
// if IsOk ( Donaldson ) then
9512: LD_EXP 23
9516: PPUSH
9517: CALL_OW 302
9521: IFFALSE 9535
// Say ( Donaldson , D2a-Don-1 ) ;
9523: LD_EXP 23
9527: PPUSH
9528: LD_STRING D2a-Don-1
9530: PPUSH
9531: CALL_OW 88
// if IsOk ( Brown ) then
9535: LD_EXP 27
9539: PPUSH
9540: CALL_OW 302
9544: IFFALSE 9558
// Say ( Brown , D2a-Brown-1 ) ;
9546: LD_EXP 27
9550: PPUSH
9551: LD_STRING D2a-Brown-1
9553: PPUSH
9554: CALL_OW 88
// Wait ( 0 0$30 ) ;
9558: LD_INT 1050
9560: PPUSH
9561: CALL_OW 67
// if IsOk ( Frank ) then
9565: LD_EXP 33
9569: PPUSH
9570: CALL_OW 302
9574: IFFALSE 9840
// begin DialogueOn ;
9576: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9580: LD_EXP 21
9584: PUSH
9585: LD_EXP 33
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9598: LD_EXP 33
9602: PPUSH
9603: LD_STRING D3F-Frank-1
9605: PPUSH
9606: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9610: LD_EXP 21
9614: PPUSH
9615: LD_STRING D3F-JMM-1
9617: PPUSH
9618: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9622: LD_EXP 33
9626: PPUSH
9627: LD_STRING D3F-Frank-2
9629: PPUSH
9630: CALL_OW 88
// case Query ( QFrank ) of 1 :
9634: LD_STRING QFrank
9636: PPUSH
9637: CALL_OW 97
9641: PUSH
9642: LD_INT 1
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9673
9650: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9651: LD_EXP 21
9655: PPUSH
9656: LD_STRING D3Fa-JMM-1
9658: PPUSH
9659: CALL_OW 88
// us_scout := 1 ;
9663: LD_ADDR_EXP 8
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// end ; 2 :
9671: GO 9836
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9803
9681: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING D3Fb-JMM-1
9689: PPUSH
9690: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9694: LD_EXP 33
9698: PPUSH
9699: LD_STRING D3Fb-Frank-1
9701: PPUSH
9702: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
9706: LD_STRING QFrank2
9708: PPUSH
9709: CALL_OW 97
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9769
9722: POP
// begin us_scout := 2 ;
9723: LD_ADDR_EXP 8
9727: PUSH
9728: LD_INT 2
9730: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
9731: LD_EXP 21
9735: PPUSH
9736: LD_STRING D3Fba-JMM-1
9738: PPUSH
9739: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
9743: LD_EXP 33
9747: PPUSH
9748: LD_STRING D3Fba-Frank-1
9750: PPUSH
9751: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
9755: LD_EXP 21
9759: PPUSH
9760: LD_STRING D3Fba-JMM-2
9762: PPUSH
9763: CALL_OW 88
// end ; 2 :
9767: GO 9801
9769: LD_INT 2
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9800
9777: POP
// begin us_scout := 0 ;
9778: LD_ADDR_EXP 8
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
9786: LD_EXP 21
9790: PPUSH
9791: LD_STRING D3Fbb-JMM-1
9793: PPUSH
9794: CALL_OW 88
// end ; end ;
9798: GO 9801
9800: POP
// end ; 3 :
9801: GO 9836
9803: LD_INT 3
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9835
9811: POP
// begin us_scout := - 1 ;
9812: LD_ADDR_EXP 8
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
9821: LD_EXP 21
9825: PPUSH
9826: LD_STRING D3Fc-JMM-1
9828: PPUSH
9829: CALL_OW 88
// end ; end ;
9833: GO 9836
9835: POP
// DialogueOff ;
9836: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
9840: LD_EXP 8
9844: PUSH
9845: LD_INT 1
9847: NEG
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: IN
9856: IFFALSE 9860
// exit ;
9858: GO 11507
// if us_scout in [ 1 , 2 ] then
9860: LD_EXP 8
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: IN
9875: IFFALSE 10574
// begin if IsInUnit ( Frank ) then
9877: LD_EXP 33
9881: PPUSH
9882: CALL_OW 310
9886: IFFALSE 9897
// ComExitBuilding ( Frank ) ;
9888: LD_EXP 33
9892: PPUSH
9893: CALL_OW 122
// if IsDrivenBy ( Frank ) then
9897: LD_EXP 33
9901: PPUSH
9902: CALL_OW 311
9906: IFFALSE 9917
// ComExitVehicle ( Frank ) ;
9908: LD_EXP 33
9912: PPUSH
9913: CALL_OW 121
// SetSide ( Frank , 4 ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_INT 4
9924: PPUSH
9925: CALL_OW 235
// wait ( 0 0$1 ) ;
9929: LD_INT 35
9931: PPUSH
9932: CALL_OW 67
// if us_scout = 2 then
9936: LD_EXP 8
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: IFFALSE 10312
// begin ComMoveXY ( Frank , 75 , 63 ) ;
9946: LD_EXP 33
9950: PPUSH
9951: LD_INT 75
9953: PPUSH
9954: LD_INT 63
9956: PPUSH
9957: CALL_OW 111
// AddComHold ( Frank ) ;
9961: LD_EXP 33
9965: PPUSH
9966: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
9970: LD_EXP 33
9974: PPUSH
9975: LD_INT 770
9977: PPUSH
9978: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
9982: LD_EXP 33
9986: PPUSH
9987: LD_INT 100
9989: PPUSH
9990: LD_INT 75
9992: PPUSH
9993: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
9997: LD_EXP 33
10001: PPUSH
10002: LD_INT 123
10004: PPUSH
10005: LD_INT 103
10007: PPUSH
10008: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10012: LD_EXP 33
10016: PPUSH
10017: LD_INT 138
10019: PPUSH
10020: LD_INT 108
10022: PPUSH
10023: CALL_OW 171
// AddComHold ( Frank ) ;
10027: LD_EXP 33
10031: PPUSH
10032: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10036: LD_INT 35
10038: PPUSH
10039: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10043: LD_EXP 33
10047: PPUSH
10048: LD_INT 138
10050: PPUSH
10051: LD_INT 108
10053: PPUSH
10054: CALL_OW 307
10058: IFFALSE 10036
// AddComMoveXY ( Frank , 125 , 132 ) ;
10060: LD_EXP 33
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 132
10070: PPUSH
10071: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10075: LD_INT 35
10077: PPUSH
10078: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10082: LD_INT 1
10084: PPUSH
10085: LD_EXP 33
10089: PPUSH
10090: CALL_OW 292
10094: PUSH
10095: LD_EXP 33
10099: PPUSH
10100: LD_INT 7
10102: PPUSH
10103: CALL_OW 296
10107: PUSH
10108: LD_INT 7
10110: LESS
10111: OR
10112: IFFALSE 10075
// DialogueOn ;
10114: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10118: LD_EXP 33
10122: PPUSH
10123: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10127: LD_INT 10
10129: PPUSH
10130: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10134: LD_EXP 21
10138: PPUSH
10139: LD_STRING D4Fa-JMM-1
10141: PPUSH
10142: CALL_OW 88
// for i in points do
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_VAR 0 2
10155: PUSH
10156: FOR_IN
10157: IFFALSE 10215
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10159: LD_VAR 0 1
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_VAR 0 1
10172: PUSH
10173: LD_INT 2
10175: ARRAY
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: LD_INT 20
10182: NEG
10183: PPUSH
10184: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10188: LD_VAR 0 1
10192: PUSH
10193: LD_INT 1
10195: ARRAY
10196: PPUSH
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 2
10204: ARRAY
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 331
// end ;
10213: GO 10156
10215: POP
10216: POP
// dwait ( 0 0$0.5 ) ;
10217: LD_INT 18
10219: PPUSH
10220: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10224: LD_INT 42
10226: PPUSH
10227: LD_INT 27
10229: PPUSH
10230: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10234: LD_EXP 33
10238: PPUSH
10239: LD_STRING D4Fa-Frank-1
10241: PPUSH
10242: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10246: LD_INT 18
10248: PPUSH
10249: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10253: LD_EXP 21
10257: PPUSH
10258: LD_STRING D4Fa-JMM-2
10260: PPUSH
10261: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10265: LD_INT 118
10267: PPUSH
10268: LD_INT 80
10270: PPUSH
10271: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10275: LD_EXP 33
10279: PPUSH
10280: LD_STRING D4Fa-Frank-2
10282: PPUSH
10283: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10287: LD_INT 10
10289: PPUSH
10290: CALL_OW 68
// DialogueOff ;
10294: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10298: LD_EXP 33
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 235
// end else
10310: GO 10574
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 4
10317: PPUSH
10318: LD_INT 2
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10328: LD_EXP 33
10332: PPUSH
10333: LD_INT 75
10335: PPUSH
10336: LD_INT 63
10338: PPUSH
10339: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10343: LD_EXP 33
10347: PPUSH
10348: LD_INT 175
10350: PPUSH
10351: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10355: LD_EXP 33
10359: PPUSH
10360: LD_INT 102
10362: PPUSH
10363: LD_INT 76
10365: PPUSH
10366: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10370: LD_EXP 33
10374: PPUSH
10375: LD_INT 108
10377: PPUSH
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10385: LD_INT 35
10387: PPUSH
10388: CALL_OW 67
// until See ( 2 , Frank ) ;
10392: LD_INT 2
10394: PPUSH
10395: LD_EXP 33
10399: PPUSH
10400: CALL_OW 292
10404: IFFALSE 10385
// ComMoveXY ( Frank , 112 , 118 ) ;
10406: LD_EXP 33
10410: PPUSH
10411: LD_INT 112
10413: PPUSH
10414: LD_INT 118
10416: PPUSH
10417: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10421: LD_EXP 33
10425: PPUSH
10426: CALL_OW 256
10430: PUSH
10431: LD_INT 750
10433: GREATEREQUAL
10434: IFFALSE 10448
// SetLives ( Frank , 700 ) ;
10436: LD_EXP 33
10440: PPUSH
10441: LD_INT 700
10443: PPUSH
10444: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 33
10462: PPUSH
10463: CALL_OW 292
10467: PUSH
10468: LD_EXP 33
10472: PPUSH
10473: LD_INT 7
10475: PPUSH
10476: CALL_OW 296
10480: PUSH
10481: LD_INT 17
10483: LESS
10484: OR
10485: IFFALSE 10448
// DialogueOn ;
10487: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10491: LD_EXP 33
10495: PPUSH
10496: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10500: LD_EXP 33
10504: PPUSH
10505: LD_STRING D4Fb-Frank-1
10507: PPUSH
10508: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10512: LD_EXP 21
10516: PPUSH
10517: LD_STRING D4Fb-JMM-1
10519: PPUSH
10520: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10524: LD_INT 2
10526: PPUSH
10527: LD_STRING D4Fb-FSci1-1
10529: PPUSH
10530: CALL 15155 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10534: LD_EXP 33
10538: PPUSH
10539: LD_STRING D4Fb-Frank-2
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_STRING D4Fb-JMM-2
10553: PPUSH
10554: CALL_OW 88
// DialogueOff ;
10558: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10562: LD_EXP 33
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10574: LD_EXP 34
10578: PPUSH
10579: CALL_OW 302
10583: PUSH
10584: LD_EXP 33
10588: NOT
10589: AND
10590: IFFALSE 10738
// begin DialogueOn ;
10592: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10596: LD_EXP 21
10600: PUSH
10601: LD_EXP 34
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10614: LD_EXP 34
10618: PPUSH
10619: LD_STRING D3Y-Yam-1
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10626: LD_EXP 21
10630: PPUSH
10631: LD_STRING D3Y-JMM-1
10633: PPUSH
10634: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10638: LD_EXP 34
10642: PPUSH
10643: LD_STRING D3Y-Yam-2
10645: PPUSH
10646: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10650: LD_STRING QYamoko
10652: PPUSH
10653: CALL_OW 97
10657: PUSH
10658: LD_INT 1
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10701
10666: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10667: LD_EXP 21
10671: PPUSH
10672: LD_STRING D3Ya-JMM-1
10674: PPUSH
10675: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10679: LD_EXP 34
10683: PPUSH
10684: LD_STRING D3Ya-Yam-1
10686: PPUSH
10687: CALL_OW 88
// us_scout := 1 ;
10691: LD_ADDR_EXP 8
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// end ; 2 :
10699: GO 10734
10701: LD_INT 2
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10733
10709: POP
// begin us_scout := - 1 ;
10710: LD_ADDR_EXP 8
10714: PUSH
10715: LD_INT 1
10717: NEG
10718: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
10719: LD_EXP 21
10723: PPUSH
10724: LD_STRING D3Yb-JMM-1
10726: PPUSH
10727: CALL_OW 88
// end ; end ;
10731: GO 10734
10733: POP
// DialogueOff ;
10734: CALL_OW 7
// end ; if Frank then
10738: LD_EXP 33
10742: IFFALSE 10746
// exit ;
10744: GO 11507
// if us_scout in [ - 1 , 0 ] then
10746: LD_EXP 8
10750: PUSH
10751: LD_INT 1
10753: NEG
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: IN
10762: IFFALSE 10766
// exit ;
10764: GO 11507
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
10766: LD_ADDR_EXP 8
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_OWVAR 67
10789: ARRAY
10790: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
10791: LD_EXP 8
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: IN
10806: IFFALSE 11507
// begin if IsInUnit ( Kikuchi ) then
10808: LD_EXP 34
10812: PPUSH
10813: CALL_OW 310
10817: IFFALSE 10828
// ComExitBuilding ( Kikuchi ) ;
10819: LD_EXP 34
10823: PPUSH
10824: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
10828: LD_EXP 34
10832: PPUSH
10833: CALL_OW 311
10837: IFFALSE 10848
// ComExitVehicle ( Kikuchi ) ;
10839: LD_EXP 34
10843: PPUSH
10844: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
10848: LD_EXP 34
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 235
// wait ( 0 0$1 ) ;
10860: LD_INT 35
10862: PPUSH
10863: CALL_OW 67
// if us_scout = 2 then
10867: LD_EXP 8
10871: PUSH
10872: LD_INT 2
10874: EQUAL
10875: IFFALSE 11255
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
10877: LD_EXP 34
10881: PPUSH
10882: LD_INT 75
10884: PPUSH
10885: LD_INT 63
10887: PPUSH
10888: CALL_OW 111
// AddComHold ( Kikuchi ) ;
10892: LD_EXP 34
10896: PPUSH
10897: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
10901: LD_EXP 34
10905: PPUSH
10906: LD_INT 770
10908: PPUSH
10909: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
10913: LD_EXP 34
10917: PPUSH
10918: LD_INT 100
10920: PPUSH
10921: LD_INT 75
10923: PPUSH
10924: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
10928: LD_EXP 34
10932: PPUSH
10933: LD_INT 123
10935: PPUSH
10936: LD_INT 103
10938: PPUSH
10939: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
10943: LD_EXP 34
10947: PPUSH
10948: LD_INT 138
10950: PPUSH
10951: LD_INT 108
10953: PPUSH
10954: CALL_OW 171
// AddComHold ( Kikuchi ) ;
10958: LD_EXP 34
10962: PPUSH
10963: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10967: LD_INT 35
10969: PPUSH
10970: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
10974: LD_EXP 34
10978: PPUSH
10979: LD_INT 138
10981: PPUSH
10982: LD_INT 108
10984: PPUSH
10985: CALL_OW 307
10989: IFFALSE 10967
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
10991: LD_EXP 34
10995: PPUSH
10996: LD_INT 125
10998: PPUSH
10999: LD_INT 132
11001: PPUSH
11002: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11006: LD_INT 35
11008: PPUSH
11009: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11013: LD_INT 1
11015: PPUSH
11016: LD_EXP 34
11020: PPUSH
11021: CALL_OW 292
11025: PUSH
11026: LD_EXP 34
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: CALL_OW 296
11038: PUSH
11039: LD_INT 7
11041: LESS
11042: OR
11043: IFFALSE 11006
// DialogueOn ;
11045: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11049: LD_EXP 34
11053: PPUSH
11054: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11058: LD_INT 10
11060: PPUSH
11061: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11065: LD_EXP 34
11069: PPUSH
11070: LD_STRING D4Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11077: LD_EXP 21
11081: PPUSH
11082: LD_STRING D4Ya-JMM-1
11084: PPUSH
11085: CALL_OW 88
// for i in points do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11158
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 1
11109: ARRAY
11110: PPUSH
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 2
11118: ARRAY
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 331
// end ;
11156: GO 11099
11158: POP
11159: POP
// dwait ( 0 0$0.5 ) ;
11160: LD_INT 18
11162: PPUSH
11163: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11167: LD_INT 42
11169: PPUSH
11170: LD_INT 27
11172: PPUSH
11173: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11177: LD_EXP 34
11181: PPUSH
11182: LD_STRING D4Ya-Yam-2
11184: PPUSH
11185: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11189: LD_INT 18
11191: PPUSH
11192: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11196: LD_INT 118
11198: PPUSH
11199: LD_INT 80
11201: PPUSH
11202: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11206: LD_EXP 21
11210: PPUSH
11211: LD_STRING D4Ya-JMM-2
11213: PPUSH
11214: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11218: LD_EXP 34
11222: PPUSH
11223: LD_STRING D4Ya-Yam-3
11225: PPUSH
11226: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 68
// DialogueOff ;
11237: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11241: LD_EXP 34
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 235
// end else
11253: GO 11507
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11255: LD_INT 2
11257: PPUSH
11258: LD_INT 4
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11271: LD_EXP 34
11275: PPUSH
11276: LD_INT 75
11278: PPUSH
11279: LD_INT 63
11281: PPUSH
11282: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11286: LD_EXP 34
11290: PPUSH
11291: LD_INT 175
11293: PPUSH
11294: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11298: LD_EXP 34
11302: PPUSH
11303: LD_INT 102
11305: PPUSH
11306: LD_INT 76
11308: PPUSH
11309: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11313: LD_EXP 34
11317: PPUSH
11318: LD_INT 108
11320: PPUSH
11321: LD_INT 70
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11335: LD_INT 2
11337: PPUSH
11338: LD_EXP 34
11342: PPUSH
11343: CALL_OW 292
11347: IFFALSE 11328
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11349: LD_EXP 34
11353: PPUSH
11354: LD_INT 112
11356: PPUSH
11357: LD_INT 118
11359: PPUSH
11360: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11364: LD_EXP 34
11368: PPUSH
11369: CALL_OW 256
11373: PUSH
11374: LD_INT 750
11376: GREATEREQUAL
11377: IFFALSE 11391
// SetLives ( Kikuchi , 700 ) ;
11379: LD_EXP 34
11383: PPUSH
11384: LD_INT 700
11386: PPUSH
11387: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11398: LD_INT 1
11400: PPUSH
11401: LD_EXP 34
11405: PPUSH
11406: CALL_OW 292
11410: PUSH
11411: LD_EXP 34
11415: PPUSH
11416: LD_INT 7
11418: PPUSH
11419: CALL_OW 296
11423: PUSH
11424: LD_INT 17
11426: LESS
11427: OR
11428: IFFALSE 11391
// DialogueOn ;
11430: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11434: LD_EXP 34
11438: PPUSH
11439: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11443: LD_EXP 34
11447: PPUSH
11448: LD_STRING D4Yb-Yam-1
11450: PPUSH
11451: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING D4Yb-JMM-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_STRING D4Yb-Yam-2
11474: PPUSH
11475: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11479: LD_EXP 21
11483: PPUSH
11484: LD_STRING D4Yb-JMM-2
11486: PPUSH
11487: CALL_OW 88
// DialogueOff ;
11491: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11495: LD_EXP 34
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 235
// end ; end ; end ;
11507: PPOPN 2
11509: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11510: LD_EXP 6
11514: IFFALSE 12547
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// if not seen [ 1 ] then
11526: LD_EXP 9
11530: PUSH
11531: LD_INT 1
11533: ARRAY
11534: NOT
11535: IFFALSE 11715
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 11
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: ST_TO_ADDR
// if tmp then
11589: LD_VAR 0 2
11593: IFFALSE 11715
// for i in tmp do
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11713
// if See ( 1 , i ) then
11608: LD_INT 1
11610: PPUSH
11611: LD_VAR 0 1
11615: PPUSH
11616: CALL_OW 292
11620: IFFALSE 11711
// begin seen := Replace ( seen , 1 , true ) ;
11622: LD_ADDR_EXP 9
11626: PUSH
11627: LD_EXP 9
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 1
11642: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11643: LD_INT 1
11645: PPUSH
11646: CALL 14977 0 1
11650: IFFALSE 11711
// begin DialogueOn ;
11652: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11665: LD_INT 10
11667: PPUSH
11668: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_STRING D5a-Sol2-1
11682: PPUSH
11683: CALL 15155 0 2
11687: ST_TO_ADDR
// if not un then
11688: LD_VAR 0 3
11692: NOT
11693: IFFALSE 11705
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_STRING D5a-FSol2-1
11700: PPUSH
11701: CALL 15155 0 2
// DialogueOff ;
11705: CALL_OW 7
// break ;
11709: GO 11713
// end ; end ;
11711: GO 11605
11713: POP
11714: POP
// end ; if not seen [ 2 ] then
11715: LD_EXP 9
11719: PUSH
11720: LD_INT 2
11722: ARRAY
11723: NOT
11724: IFFALSE 11949
// begin can_kamikazed := true ;
11726: LD_ADDR_EXP 10
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 17
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: ST_TO_ADDR
// if tmp then
11768: LD_VAR 0 2
11772: IFFALSE 11949
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11947
// if See ( 1 , i ) then
11787: LD_INT 1
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 292
11799: IFFALSE 11945
// begin seen := Replace ( seen , 2 , true ) ;
11801: LD_ADDR_EXP 9
11805: PUSH
11806: LD_EXP 9
11810: PPUSH
11811: LD_INT 2
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11822: LD_INT 1
11824: PPUSH
11825: CALL 14977 0 1
11829: IFFALSE 11945
// begin DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_STRING D5b-Sol1-1
11861: PPUSH
11862: CALL 15155 0 2
11866: ST_TO_ADDR
// if not un then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11890
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 2
11881: PPUSH
11882: LD_STRING D5b-FSol1-1
11884: PPUSH
11885: CALL 15155 0 2
11889: ST_TO_ADDR
// if un then
11890: LD_VAR 0 3
11894: IFFALSE 11939
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
11896: LD_ADDR_VAR 0 4
11900: PUSH
11901: LD_INT 1
11903: PPUSH
11904: LD_STRING D5b-Sol2-1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL 15381 0 3
11916: ST_TO_ADDR
// if not un2 then
11917: LD_VAR 0 4
11921: NOT
11922: IFFALSE 11939
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
11924: LD_INT 2
11926: PPUSH
11927: LD_STRING D5b-FSol2-1
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: CALL 15381 0 3
// end ; DialogueOff ;
11939: CALL_OW 7
// break ;
11943: GO 11947
// end ; end ;
11945: GO 11784
11947: POP
11948: POP
// end ; if not seen [ 3 ] then
11949: LD_EXP 9
11953: PUSH
11954: LD_INT 3
11956: ARRAY
11957: NOT
11958: IFFALSE 12132
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// if tmp then
11994: LD_VAR 0 2
11998: IFFALSE 12132
// for i in tmp do
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_VAR 0 2
12009: PUSH
12010: FOR_IN
12011: IFFALSE 12130
// if See ( 1 , i ) then
12013: LD_INT 1
12015: PPUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 292
12025: IFFALSE 12128
// begin seen := Replace ( seen , 3 , true ) ;
12027: LD_ADDR_EXP 9
12031: PUSH
12032: LD_EXP 9
12036: PPUSH
12037: LD_INT 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12048: LD_INT 1
12050: PPUSH
12051: CALL 14977 0 1
12055: IFFALSE 12128
// begin DialogueOn ;
12057: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_STRING D8-Sol1-1
12087: PPUSH
12088: CALL 15155 0 2
12092: ST_TO_ADDR
// if not un then
12093: LD_VAR 0 3
12097: NOT
12098: IFFALSE 12110
// SayRand ( sex_female , D8-FSol1-1 ) ;
12100: LD_INT 2
12102: PPUSH
12103: LD_STRING D8-FSol1-1
12105: PPUSH
12106: CALL 15155 0 2
// Say ( JMM , D8-JMM-1 ) ;
12110: LD_EXP 21
12114: PPUSH
12115: LD_STRING D8-JMM-1
12117: PPUSH
12118: CALL_OW 88
// DialogueOff ;
12122: CALL_OW 7
// break ;
12126: GO 12130
// end ; end ;
12128: GO 12010
12130: POP
12131: POP
// end ; if not seen [ 4 ] then
12132: LD_EXP 9
12136: PUSH
12137: LD_INT 4
12139: ARRAY
12140: NOT
12141: IFFALSE 12303
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12143: LD_ADDR_VAR 0 2
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 33
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// if tmp then
12177: LD_VAR 0 2
12181: IFFALSE 12303
// for i in tmp do
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_VAR 0 2
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12301
// if See ( 1 , i ) then
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 292
12208: IFFALSE 12299
// begin seen := Replace ( seen , 4 , true ) ;
12210: LD_ADDR_EXP 9
12214: PUSH
12215: LD_EXP 9
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 1
12230: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12231: LD_INT 1
12233: PPUSH
12234: CALL 14977 0 1
12238: IFFALSE 12299
// begin DialogueOn ;
12240: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12253: LD_INT 10
12255: PPUSH
12256: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_STRING D5a-Sol1-1
12270: PPUSH
12271: CALL 15155 0 2
12275: ST_TO_ADDR
// if not un then
12276: LD_VAR 0 3
12280: NOT
12281: IFFALSE 12293
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12283: LD_INT 2
12285: PPUSH
12286: LD_STRING D5a-FSol1-1
12288: PPUSH
12289: CALL 15155 0 2
// DialogueOff ;
12293: CALL_OW 7
// break ;
12297: GO 12301
// end ; end ;
12299: GO 12193
12301: POP
12302: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12303: LD_EXP 9
12307: PUSH
12308: LD_INT 5
12310: ARRAY
12311: NOT
12312: PUSH
12313: LD_EXP 9
12317: PUSH
12318: LD_INT 3
12320: ARRAY
12321: AND
12322: IFFALSE 12496
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 34
12341: PUSH
12342: LD_INT 31
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: ST_TO_ADDR
// if tmp then
12358: LD_VAR 0 2
12362: IFFALSE 12496
// for i in tmp do
12364: LD_ADDR_VAR 0 1
12368: PUSH
12369: LD_VAR 0 2
12373: PUSH
12374: FOR_IN
12375: IFFALSE 12494
// if See ( 1 , i ) then
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 292
12389: IFFALSE 12492
// begin seen := Replace ( seen , 5 , true ) ;
12391: LD_ADDR_EXP 9
12395: PUSH
12396: LD_EXP 9
12400: PPUSH
12401: LD_INT 5
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 1
12411: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12412: LD_INT 1
12414: PPUSH
12415: CALL 14977 0 1
12419: IFFALSE 12492
// begin DialogueOn ;
12421: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12434: LD_INT 10
12436: PPUSH
12437: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 1
12448: PPUSH
12449: LD_STRING D8a-Sol2-1
12451: PPUSH
12452: CALL 15155 0 2
12456: ST_TO_ADDR
// if not un then
12457: LD_VAR 0 3
12461: NOT
12462: IFFALSE 12474
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12464: LD_INT 2
12466: PPUSH
12467: LD_STRING D8a-FSol2-1
12469: PPUSH
12470: CALL 15155 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12474: LD_EXP 21
12478: PPUSH
12479: LD_STRING D8a-JMM-1
12481: PPUSH
12482: CALL_OW 88
// DialogueOff ;
12486: CALL_OW 7
// break ;
12490: GO 12494
// end ; end ;
12492: GO 12374
12494: POP
12495: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12496: LD_EXP 9
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_EXP 9
12509: PUSH
12510: LD_INT 2
12512: ARRAY
12513: AND
12514: PUSH
12515: LD_EXP 9
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: AND
12524: PUSH
12525: LD_EXP 9
12529: PUSH
12530: LD_INT 4
12532: ARRAY
12533: AND
12534: PUSH
12535: LD_EXP 9
12539: PUSH
12540: LD_INT 5
12542: ARRAY
12543: AND
12544: IFFALSE 12547
// disable ;
12546: DISABLE
// end ;
12547: PPOPN 4
12549: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12550: LD_EXP 10
12554: PUSH
12555: LD_EXP 11
12559: AND
12560: IFFALSE 12758
12562: GO 12564
12564: DISABLE
12565: LD_INT 0
12567: PPUSH
// begin DialogueOn ;
12568: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12572: LD_EXP 11
12576: PPUSH
12577: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_STRING D5c-Sol1-1
12591: PPUSH
12592: CALL 15155 0 2
12596: ST_TO_ADDR
// if not un then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12620
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: PPUSH
12612: LD_STRING D5c-FSol1-1
12614: PPUSH
12615: CALL 15155 0 2
12619: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12620: LD_EXP 21
12624: PPUSH
12625: LD_STRING D5c-JMM-1
12627: PPUSH
12628: CALL_OW 88
// if IsOk ( Lisa ) then
12632: LD_EXP 22
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12657
// Say ( Lisa , D5d-Lisa-1 ) else
12643: LD_EXP 22
12647: PPUSH
12648: LD_STRING D5d-Lisa-1
12650: PPUSH
12651: CALL_OW 88
12655: GO 12742
// if IsOk ( Cyrus ) then
12657: LD_EXP 25
12661: PPUSH
12662: CALL_OW 302
12666: IFFALSE 12682
// Say ( Cyrus , D5d-Cyrus-1 ) else
12668: LD_EXP 25
12672: PPUSH
12673: LD_STRING D5d-Cyrus-1
12675: PPUSH
12676: CALL_OW 88
12680: GO 12742
// if IsOk ( Gary ) then
12682: LD_EXP 32
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// Say ( Gary , D5d-Gary-1 ) else
12693: LD_EXP 32
12697: PPUSH
12698: LD_STRING D5d-Gary-1
12700: PPUSH
12701: CALL_OW 88
12705: GO 12742
// if GetSex ( un ) = sex_male then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 258
12716: PUSH
12717: LD_INT 1
12719: EQUAL
12720: IFFALSE 12736
// Say ( un , D5d-Sol1-1 ) else
12722: LD_VAR 0 1
12726: PPUSH
12727: LD_STRING D5d-Sol1-1
12729: PPUSH
12730: CALL_OW 88
12734: GO 12742
// begin DialogueOff ;
12736: CALL_OW 7
// exit ;
12740: GO 12758
// end ; Say ( JMM , D5d-JMM-1 ) ;
12742: LD_EXP 21
12746: PPUSH
12747: LD_STRING D5d-JMM-1
12749: PPUSH
12750: CALL_OW 88
// DialogueOff ;
12754: CALL_OW 7
// end ;
12758: PPOPN 1
12760: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
12761: LD_INT 1
12763: PPUSH
12764: LD_INT 17
12766: PPUSH
12767: CALL_OW 294
12771: PUSH
12772: LD_INT 2
12774: GREATEREQUAL
12775: IFFALSE 12896
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
12783: LD_INT 10
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 10
12794: NEG
12795: PPUSH
12796: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
12800: LD_INT 10
12802: PPUSH
12803: LD_INT 5
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
12813: LD_INT 10
12815: PPUSH
12816: LD_INT 5
12818: PPUSH
12819: CALL_OW 86
// DialogueOn ;
12823: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D6-Sci1-1
12837: PPUSH
12838: CALL 15155 0 2
12842: ST_TO_ADDR
// if un then
12843: LD_VAR 0 1
12847: IFFALSE 12885
// begin Say ( JMM , D6-JMM-1 ) ;
12849: LD_EXP 21
12853: PPUSH
12854: LD_STRING D6-JMM-1
12856: PPUSH
12857: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_STRING D6-Sci1-2
12868: PPUSH
12869: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING D6-JMM-2
12880: PPUSH
12881: CALL_OW 88
// end ; DialogueOff ;
12885: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12889: LD_STRING M3
12891: PPUSH
12892: CALL_OW 337
// end ;
12896: PPOPN 1
12898: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
12899: LD_OWVAR 1
12903: PUSH
12904: LD_INT 42000
12906: GREATEREQUAL
12907: PUSH
12908: LD_INT 2
12910: PPUSH
12911: LD_INT 169
12913: PPUSH
12914: LD_INT 90
12916: PPUSH
12917: LD_INT 10
12919: PPUSH
12920: CALL 44836 0 4
12924: PUSH
12925: LD_INT 4
12927: ARRAY
12928: PUSH
12929: LD_INT 0
12931: EQUAL
12932: PUSH
12933: LD_INT 45
12935: PPUSH
12936: CALL_OW 301
12940: OR
12941: PUSH
12942: LD_INT 45
12944: PPUSH
12945: CALL_OW 255
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: OR
12954: AND
12955: PUSH
12956: LD_INT 94
12958: PPUSH
12959: CALL_OW 301
12963: NOT
12964: AND
12965: IFFALSE 14091
12967: GO 12969
12969: DISABLE
12970: LD_INT 0
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin uc_side := 5 ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_INT 5
12983: ST_TO_ADDR
// uc_nation := 2 ;
12984: LD_ADDR_OWVAR 21
12988: PUSH
12989: LD_INT 2
12991: ST_TO_ADDR
// InitHc ;
12992: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 3
13001: PPUSH
13002: LD_INT 8
13004: PPUSH
13005: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13009: LD_ADDR_OWVAR 29
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: LD_INT 12
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13024: LD_ADDR_OWVAR 33
13028: PUSH
13029: LD_STRING SecondCharsGal
13031: ST_TO_ADDR
// hc_face_number := 7 ;
13032: LD_ADDR_OWVAR 34
13036: PUSH
13037: LD_INT 7
13039: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13040: LD_ADDR_EXP 45
13044: PUSH
13045: CALL_OW 44
13049: ST_TO_ADDR
// InitHc ;
13050: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 16
13059: PPUSH
13060: LD_INT 2
13062: PPUSH
13063: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13067: LD_ADDR_OWVAR 29
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 12
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: ST_TO_ADDR
// hc_name :=  ;
13082: LD_ADDR_OWVAR 26
13086: PUSH
13087: LD_STRING 
13089: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13090: LD_ADDR_EXP 46
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// InitHc ;
13100: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13104: LD_INT 35
13106: PPUSH
13107: CALL_OW 67
// until not InBattle ( 1 ) ;
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 463
13118: NOT
13119: IFFALSE 13104
// wait ( 0 0$5 ) ;
13121: LD_INT 175
13123: PPUSH
13124: CALL_OW 67
// DialogueOn ;
13128: CALL_OW 6
// InGameOn ;
13132: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13136: LD_ADDR_VAR 0 1
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 25
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 25
13186: PUSH
13187: LD_INT 4
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_EXP 21
13236: PUSH
13237: LD_EXP 22
13241: PUSH
13242: LD_EXP 23
13246: PUSH
13247: LD_EXP 24
13251: PUSH
13252: LD_EXP 25
13256: PUSH
13257: LD_EXP 26
13261: PUSH
13262: LD_EXP 27
13266: PUSH
13267: LD_EXP 28
13271: PUSH
13272: LD_EXP 29
13276: PUSH
13277: LD_EXP 31
13281: PUSH
13282: LD_EXP 32
13286: PUSH
13287: LD_EXP 33
13291: PUSH
13292: LD_EXP 34
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: DIFF
13312: PPUSH
13313: LD_INT 26
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 72
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: ST_TO_ADDR
// if not un and Brown then
13332: LD_VAR 0 1
13336: NOT
13337: PUSH
13338: LD_EXP 27
13342: AND
13343: IFFALSE 13355
// un := Brown ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_EXP 27
13354: ST_TO_ADDR
// if un then
13355: LD_VAR 0 1
13359: IFFALSE 13385
// begin Say ( un , D7-Sol1-1 ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_STRING D7-Sol1-1
13368: PPUSH
13369: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13373: LD_EXP 21
13377: PPUSH
13378: LD_STRING D7-JMM-1
13380: PPUSH
13381: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13385: LD_EXP 45
13389: PPUSH
13390: LD_STRING D7-Ar1-1
13392: PPUSH
13393: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING D7-JMM-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13409: LD_EXP 45
13413: PPUSH
13414: LD_STRING D7-Ar1-2
13416: PPUSH
13417: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING D7-JMM-3
13428: PPUSH
13429: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13433: LD_EXP 45
13437: PPUSH
13438: LD_STRING D7-Ar1-3
13440: PPUSH
13441: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13445: LD_EXP 21
13449: PPUSH
13450: LD_STRING D7-JMM-4
13452: PPUSH
13453: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13457: LD_EXP 45
13461: PPUSH
13462: LD_STRING D7-Ar1-4
13464: PPUSH
13465: CALL_OW 94
// InGameOff ;
13469: CALL_OW 9
// DialogueOff ;
13473: CALL_OW 7
// case Query ( QCameras ) of 1 :
13477: LD_STRING QCameras
13479: PPUSH
13480: CALL_OW 97
13484: PUSH
13485: LD_INT 1
13487: DOUBLE
13488: EQUAL
13489: IFTRUE 13493
13491: GO 13496
13493: POP
// ; 2 :
13494: GO 13510
13496: LD_INT 2
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13509
13504: POP
// exit ; end ;
13505: GO 14091
13507: GO 13510
13509: POP
// ChangeMissionObjectives ( MCar ) ;
13510: LD_STRING MCar
13512: PPUSH
13513: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13517: LD_INT 124
13519: PPUSH
13520: LD_INT 90
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 6
13528: NEG
13529: PPUSH
13530: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13534: LD_INT 124
13536: PPUSH
13537: LD_INT 90
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13547: LD_INT 12
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 424
// wait ( 3 ) ;
13557: LD_INT 3
13559: PPUSH
13560: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13564: LD_INT 124
13566: PPUSH
13567: LD_INT 90
13569: PPUSH
13570: CALL_OW 86
// cargo := false ;
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_INT 12
13596: PPUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 34
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 58
13619: PUSH
13620: EMPTY
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// until cargo ;
13633: LD_VAR 0 3
13637: IFFALSE 13582
// cargo := cargo [ 1 ] ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 5
13660: PPUSH
13661: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
13665: LD_INT 12
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13675: LD_EXP 45
13679: PPUSH
13680: LD_INT 11
13682: PPUSH
13683: LD_INT 0
13685: PPUSH
13686: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13690: LD_EXP 46
13694: PPUSH
13695: LD_INT 11
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
13705: LD_EXP 45
13709: PUSH
13710: LD_EXP 46
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: LD_INT 12
13721: PPUSH
13722: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
13726: LD_EXP 45
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13740: LD_EXP 45
13744: PUSH
13745: LD_EXP 46
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: LD_INT 209
13756: PPUSH
13757: LD_INT 178
13759: PPUSH
13760: CALL_OW 171
// while ( true ) do
13764: LD_INT 1
13766: IFFALSE 13920
// begin wait ( 0 0$1 ) ;
13768: LD_INT 35
13770: PPUSH
13771: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
13775: LD_EXP 45
13779: PPUSH
13780: CALL_OW 314
13784: NOT
13785: PUSH
13786: LD_EXP 46
13790: PPUSH
13791: CALL_OW 314
13795: NOT
13796: OR
13797: IFFALSE 13823
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13799: LD_EXP 45
13803: PUSH
13804: LD_EXP 46
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: LD_INT 209
13815: PPUSH
13816: LD_INT 178
13818: PPUSH
13819: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
13823: LD_EXP 45
13827: PPUSH
13828: LD_INT 10
13830: PPUSH
13831: CALL_OW 308
13835: IFFALSE 13846
// RemoveUnit ( ar_mechanic ) ;
13837: LD_EXP 45
13841: PPUSH
13842: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
13846: LD_EXP 46
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 308
13858: IFFALSE 13869
// RemoveUnit ( ar_mechanic_friend ) ;
13860: LD_EXP 46
13864: PPUSH
13865: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 10
13876: PPUSH
13877: CALL_OW 308
13881: IFFALSE 13892
// RemoveUnit ( cargo ) ;
13883: LD_VAR 0 3
13887: PPUSH
13888: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
13892: LD_EXP 45
13896: PPUSH
13897: CALL_OW 300
13901: NOT
13902: PUSH
13903: LD_EXP 46
13907: PPUSH
13908: CALL_OW 300
13912: NOT
13913: AND
13914: IFFALSE 13918
// break ;
13916: GO 13920
// end ;
13918: GO 13764
// wait ( 0 0$2 ) ;
13920: LD_INT 70
13922: PPUSH
13923: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
13927: LD_EXP 45
13931: PPUSH
13932: LD_STRING D7a-Ar1-1
13934: PPUSH
13935: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
13939: LD_ADDR_VAR 0 4
13943: PUSH
13944: LD_INT 129
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 103
13956: PUSH
13957: LD_INT 6
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 148
13966: PUSH
13967: LD_INT 47
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 155
13976: PUSH
13977: LD_INT 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if Difficulty = 1 then
13990: LD_OWVAR 67
13994: PUSH
13995: LD_INT 1
13997: EQUAL
13998: IFFALSE 14035
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 4
14009: PUSH
14010: LD_INT 78
14012: PUSH
14013: LD_INT 7
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 104
14022: PUSH
14023: LD_INT 43
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ADD
14034: ST_TO_ADDR
// for i in tmp do
14035: LD_ADDR_VAR 0 2
14039: PUSH
14040: LD_VAR 0 4
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14079
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 9
14071: NEG
14072: PPUSH
14073: CALL_OW 330
14077: GO 14045
14079: POP
14080: POP
// CenterOnXY ( 129 , 10 ) ;
14081: LD_INT 129
14083: PPUSH
14084: LD_INT 10
14086: PPUSH
14087: CALL_OW 84
// end ;
14091: PPOPN 4
14093: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14094: LD_EXP 15
14098: PUSH
14099: LD_INT 21000
14101: MINUS
14102: PUSH
14103: LD_OWVAR 1
14107: LESSEQUAL
14108: IFFALSE 14148
14110: GO 14112
14112: DISABLE
// begin powell_warn := true ;
14113: LD_ADDR_EXP 16
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// DialogueOn ;
14121: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14125: LD_EXP 30
14129: PPUSH
14130: LD_STRING D9-Pow-1
14132: PPUSH
14133: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14137: LD_INT 10
14139: PPUSH
14140: CALL_OW 68
// DialogueOff ;
14144: CALL_OW 7
// end ;
14148: END
// every 0 0$1 trigger game_time <= tick do
14149: LD_EXP 15
14153: PUSH
14154: LD_OWVAR 1
14158: LESSEQUAL
14159: IFFALSE 14198
14161: GO 14163
14163: DISABLE
// begin DialogueOn ;
14164: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14168: LD_EXP 30
14172: PPUSH
14173: LD_STRING D9a-Pow-1
14175: PPUSH
14176: CALL_OW 94
// dwait ( 0 0$2 ) ;
14180: LD_INT 70
14182: PPUSH
14183: CALL_OW 68
// DialogueOff ;
14187: CALL_OW 7
// YouLost ( Command ) ;
14191: LD_STRING Command
14193: PPUSH
14194: CALL_OW 104
// end ;
14198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14199: LD_INT 22
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PUSH
14228: LD_INT 0
14230: EQUAL
14231: PUSH
14232: LD_EXP 21
14236: PPUSH
14237: CALL_OW 302
14241: AND
14242: IFFALSE 14974
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
// begin if tick < [ 70 70$00 , 60 60$00 , 55 55$00 ] [ Difficulty ] then
14250: LD_OWVAR 1
14254: PUSH
14255: LD_INT 147000
14257: PUSH
14258: LD_INT 126000
14260: PUSH
14261: LD_INT 115500
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_OWVAR 67
14273: ARRAY
14274: LESS
14275: IFFALSE 14289
// AddMedal ( Time1 , 1 ) else
14277: LD_STRING Time1
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 101
14287: GO 14320
// if not powell_warn then
14289: LD_EXP 16
14293: NOT
14294: IFFALSE 14309
// AddMedal ( Time1 , - 1 ) else
14296: LD_STRING Time1
14298: PPUSH
14299: LD_INT 1
14301: NEG
14302: PPUSH
14303: CALL_OW 101
14307: GO 14320
// AddMedal ( Time1 , - 2 ) ;
14309: LD_STRING Time1
14311: PPUSH
14312: LD_INT 2
14314: NEG
14315: PPUSH
14316: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14320: LD_EXP 17
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_OWVAR 67
14343: ARRAY
14344: GREATEREQUAL
14345: IFFALSE 14360
// AddMedal ( Destroy , - 2 ) else
14347: LD_STRING Destroy
14349: PPUSH
14350: LD_INT 2
14352: NEG
14353: PPUSH
14354: CALL_OW 101
14358: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14360: LD_INT 22
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 50
14382: PUSH
14383: EMPTY
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PUSH
14396: LD_INT 25
14398: GREATEREQUAL
14399: IFFALSE 14414
// AddMedal ( Destroy , - 1 ) else
14401: LD_STRING Destroy
14403: PPUSH
14404: LD_INT 1
14406: NEG
14407: PPUSH
14408: CALL_OW 101
14412: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14414: LD_INT 22
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 3
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 50
14436: PUSH
14437: EMPTY
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PUSH
14450: LD_INT 15
14452: GREATEREQUAL
14453: IFFALSE 14467
// AddMedal ( Destroy , 1 ) else
14455: LD_STRING Destroy
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 101
14465: GO 14477
// AddMedal ( Destroy , 2 ) ;
14467: LD_STRING Destroy
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14477: LD_EXP 13
14481: PPUSH
14482: LD_STRING 11_artifact_captured
14484: PPUSH
14485: CALL_OW 39
// if artifact_get then
14489: LD_EXP 13
14493: IFFALSE 14507
// AddMedal ( Artefact , 1 ) else
14495: LD_STRING Artefact
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 101
14505: GO 14518
// AddMedal ( Artefact , - 1 ) ;
14507: LD_STRING Artefact
14509: PPUSH
14510: LD_INT 1
14512: NEG
14513: PPUSH
14514: CALL_OW 101
// GiveMedals ( MAIN ) ;
14518: LD_STRING MAIN
14520: PPUSH
14521: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14525: LD_ADDR_EXP 20
14529: PUSH
14530: LD_EXP 20
14534: PPUSH
14535: LD_INT 51
14537: PUSH
14538: EMPTY
14539: LIST
14540: PPUSH
14541: CALL_OW 72
14545: ST_TO_ADDR
// tmp := JMM ^ selected ;
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_EXP 21
14555: PUSH
14556: LD_EXP 20
14560: ADD
14561: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14571: LD_VAR 0 1
14575: PUSH
14576: LD_EXP 21
14580: PUSH
14581: LD_EXP 22
14585: PUSH
14586: LD_EXP 23
14590: PUSH
14591: LD_EXP 24
14595: PUSH
14596: LD_EXP 25
14600: PUSH
14601: LD_EXP 26
14605: PUSH
14606: LD_EXP 27
14610: PUSH
14611: LD_EXP 28
14615: PUSH
14616: LD_EXP 29
14620: PUSH
14621: LD_EXP 31
14625: PUSH
14626: LD_EXP 32
14630: PUSH
14631: LD_EXP 33
14635: PUSH
14636: LD_EXP 34
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: DIFF
14656: PPUSH
14657: LD_STRING 11c_others
14659: PPUSH
14660: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14664: LD_EXP 21
14668: PPUSH
14669: LD_EXP 3
14673: PUSH
14674: LD_STRING JMM
14676: STR
14677: PPUSH
14678: CALL_OW 38
// if Lisa then
14682: LD_EXP 22
14686: IFFALSE 14706
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14688: LD_EXP 22
14692: PPUSH
14693: LD_EXP 3
14697: PUSH
14698: LD_STRING Lisa
14700: STR
14701: PPUSH
14702: CALL_OW 38
// if Donaldson then
14706: LD_EXP 23
14710: IFFALSE 14730
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
14712: LD_EXP 23
14716: PPUSH
14717: LD_EXP 3
14721: PUSH
14722: LD_STRING Donaldson
14724: STR
14725: PPUSH
14726: CALL_OW 38
// if Bobby then
14730: LD_EXP 24
14734: IFFALSE 14754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14736: LD_EXP 24
14740: PPUSH
14741: LD_EXP 3
14745: PUSH
14746: LD_STRING Bobby
14748: STR
14749: PPUSH
14750: CALL_OW 38
// if Cyrus then
14754: LD_EXP 25
14758: IFFALSE 14778
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14760: LD_EXP 25
14764: PPUSH
14765: LD_EXP 3
14769: PUSH
14770: LD_STRING Cyrus
14772: STR
14773: PPUSH
14774: CALL_OW 38
// if Denis then
14778: LD_EXP 26
14782: IFFALSE 14802
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
14784: LD_EXP 26
14788: PPUSH
14789: LD_EXP 3
14793: PUSH
14794: LD_STRING Denis
14796: STR
14797: PPUSH
14798: CALL_OW 38
// if Brown then
14802: LD_EXP 27
14806: IFFALSE 14826
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_EXP 3
14817: PUSH
14818: LD_STRING Brown
14820: STR
14821: PPUSH
14822: CALL_OW 38
// if Gladstone then
14826: LD_EXP 28
14830: IFFALSE 14850
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
14832: LD_EXP 28
14836: PPUSH
14837: LD_EXP 3
14841: PUSH
14842: LD_STRING Gladstone
14844: STR
14845: PPUSH
14846: CALL_OW 38
// if Houten then
14850: LD_EXP 29
14854: IFFALSE 14874
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
14856: LD_EXP 29
14860: PPUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_STRING Houten
14868: STR
14869: PPUSH
14870: CALL_OW 38
// if Cornel then
14874: LD_EXP 31
14878: IFFALSE 14898
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
14880: LD_EXP 31
14884: PPUSH
14885: LD_EXP 3
14889: PUSH
14890: LD_STRING Cornel
14892: STR
14893: PPUSH
14894: CALL_OW 38
// if Gary then
14898: LD_EXP 32
14902: IFFALSE 14922
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
14904: LD_EXP 32
14908: PPUSH
14909: LD_EXP 3
14913: PUSH
14914: LD_STRING Gary
14916: STR
14917: PPUSH
14918: CALL_OW 38
// if Frank then
14922: LD_EXP 33
14926: IFFALSE 14946
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
14928: LD_EXP 33
14932: PPUSH
14933: LD_EXP 3
14937: PUSH
14938: LD_STRING Frank
14940: STR
14941: PPUSH
14942: CALL_OW 38
// if Kikuchi then
14946: LD_EXP 34
14950: IFFALSE 14970
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
14952: LD_EXP 34
14956: PPUSH
14957: LD_EXP 3
14961: PUSH
14962: LD_STRING Kikuchi
14964: STR
14965: PPUSH
14966: CALL_OW 38
// YouWin ;
14970: CALL_OW 103
// end ;
14974: PPOPN 1
14976: END
// export function CanSayRand ( side ) ; begin
14977: LD_INT 0
14979: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 52
14987: PUSH
14988: EMPTY
14989: LIST
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_VAR 0 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: LD_EXP 21
15067: PUSH
15068: LD_EXP 33
15072: PUSH
15073: LD_EXP 22
15077: PUSH
15078: LD_EXP 23
15082: PUSH
15083: LD_EXP 24
15087: PUSH
15088: LD_EXP 25
15092: PUSH
15093: LD_EXP 26
15097: PUSH
15098: LD_EXP 27
15102: PUSH
15103: LD_EXP 28
15107: PUSH
15108: LD_EXP 29
15112: PUSH
15113: LD_EXP 30
15117: PUSH
15118: LD_EXP 31
15122: PUSH
15123: LD_EXP 32
15127: PUSH
15128: LD_EXP 34
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: DIFF
15149: ST_TO_ADDR
// end ;
15150: LD_VAR 0 2
15154: RET
// export function SayRand ( sex , dial ) ; begin
15155: LD_INT 0
15157: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15158: LD_ADDR_VAR 0 3
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: EMPTY
15167: LIST
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 26
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 25
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_EXP 21
15256: PUSH
15257: LD_EXP 33
15261: PUSH
15262: LD_EXP 22
15266: PUSH
15267: LD_EXP 23
15271: PUSH
15272: LD_EXP 24
15276: PUSH
15277: LD_EXP 25
15281: PUSH
15282: LD_EXP 26
15286: PUSH
15287: LD_EXP 27
15291: PUSH
15292: LD_EXP 28
15296: PUSH
15297: LD_EXP 29
15301: PUSH
15302: LD_EXP 30
15306: PUSH
15307: LD_EXP 31
15311: PUSH
15312: LD_EXP 32
15316: PUSH
15317: LD_EXP 34
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: DIFF
15338: ST_TO_ADDR
// if not result then
15339: LD_VAR 0 3
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15376
// result := result [ 1 ] ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: ST_TO_ADDR
// Say ( result , dial ) ;
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 88
// end ;
15376: LD_VAR 0 3
15380: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15381: LD_INT 0
15383: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 26
15401: PUSH
15402: LD_VAR 0 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 3
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: LD_EXP 21
15475: PUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_EXP 22
15485: PUSH
15486: LD_EXP 23
15490: PUSH
15491: LD_EXP 24
15495: PUSH
15496: LD_EXP 25
15500: PUSH
15501: LD_EXP 26
15505: PUSH
15506: LD_EXP 27
15510: PUSH
15511: LD_EXP 28
15515: PUSH
15516: LD_EXP 29
15520: PUSH
15521: LD_EXP 30
15525: PUSH
15526: LD_EXP 31
15530: PUSH
15531: LD_EXP 32
15535: PUSH
15536: LD_EXP 34
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_VAR 0 3
15561: ADD
15562: DIFF
15563: ST_TO_ADDR
// if not result then
15564: LD_VAR 0 4
15568: NOT
15569: IFFALSE 15573
// exit ;
15571: GO 15601
// result := result [ 1 ] ;
15573: LD_ADDR_VAR 0 4
15577: PUSH
15578: LD_VAR 0 4
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: ST_TO_ADDR
// Say ( result , dial ) ;
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: CALL_OW 88
// end ; end_of_file
15601: LD_VAR 0 4
15605: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 255
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15629
// artifact_get := true ;
15621: LD_ADDR_EXP 13
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 255
15638: PUSH
15639: LD_INT 2
15641: EQUAL
15642: IFFALSE 15660
// begin artifact_get := false ;
15644: LD_ADDR_EXP 13
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// artifact_stolen := true ;
15652: LD_ADDR_EXP 12
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15660: LD_ADDR_EXP 14
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// end ;
15668: PPOPN 2
15670: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15671: LD_ADDR_EXP 14
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// end ;
15679: PPOPN 2
15681: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15682: LD_VAR 0 1
15686: PUSH
15687: LD_EXP 21
15691: EQUAL
15692: IFFALSE 15703
// begin YouLost ( JMM ) ;
15694: LD_STRING JMM
15696: PPUSH
15697: CALL_OW 104
// exit ;
15701: GO 15835
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 25
15773: PUSH
15774: LD_INT 5
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 8
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: IN
15810: IFFALSE 15826
// loses_counter := loses_counter + 1 ;
15812: LD_ADDR_EXP 17
15816: PUSH
15817: LD_EXP 17
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL 35241 0 1
// end ;
15835: PPOPN 1
15837: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: CALL 37108 0 2
// end ;
15852: PPOPN 2
15854: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL 36424 0 1
// end ;
15864: PPOPN 1
15866: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_VAR 0 4
15886: PPUSH
15887: LD_VAR 0 5
15891: PPUSH
15892: CALL 34580 0 5
// end ;
15896: PPOPN 5
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 34268 0 2
// end ;
15913: PPOPN 2
15915: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 15950
// if not kamikazed then
15933: LD_EXP 11
15937: NOT
15938: IFFALSE 15950
// kamikazed := unit ;
15940: LD_ADDR_EXP 11
15944: PUSH
15945: LD_VAR 0 1
15949: ST_TO_ADDR
// end ;
15950: PPOPN 1
15952: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
15957: LD_VAR 0 1
15961: PPUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: CALL 34113 0 4
// end ;
15981: PPOPN 6
15983: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: CALL 33895 0 3
// end ;
16003: PPOPN 3
16005: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16006: LD_VAR 0 1
16010: PPUSH
16011: LD_VAR 0 2
16015: PPUSH
16016: CALL 34953 0 2
// end ;
16020: PPOPN 2
16022: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL 33603 0 2
// end ;
16037: PPOPN 2
16039: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 33787 0 2
// end ;
16054: PPOPN 2
16056: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL 36190 0 1
// end ;
16066: PPOPN 1
16068: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL 37362 0 2
// end ;
16083: PPOPN 2
16085: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_VAR 0 4
16105: PPUSH
16106: CALL 37571 0 4
// end ; end_of_file
16110: PPOPN 4
16112: END
// every 0 0$1 trigger game do
16113: LD_EXP 2
16117: IFFALSE 16147
16119: GO 16121
16121: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16122: LD_INT 7
16124: PUSH
16125: LD_INT 6
16127: PUSH
16128: LD_INT 4
16130: PUSH
16131: LD_INT 6
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: LD_INT 1750
16142: PPUSH
16143: CALL 16148 0 2
16147: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// if not areas then
16153: LD_VAR 0 1
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16274
// repeat wait ( time ) ;
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_INT 90
16181: PPUSH
16182: CALL_OW 12
16186: ST_TO_ADDR
// for i in areas do
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16251
// begin if Prob ( p ) then
16200: LD_VAR 0 5
16204: PPUSH
16205: CALL_OW 13
16209: IFFALSE 16249
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16211: LD_INT 1
16213: PPUSH
16214: LD_INT 5
16216: PPUSH
16217: CALL_OW 12
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
16234: LD_INT 455
16236: PPUSH
16237: LD_INT 595
16239: PPUSH
16240: CALL_OW 12
16244: PPUSH
16245: CALL_OW 67
// end ; end ;
16249: GO 16197
16251: POP
16252: POP
// time := time + 0 0$3 ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 105
16265: PLUS
16266: ST_TO_ADDR
// until not game ;
16267: LD_EXP 2
16271: NOT
16272: IFFALSE 16162
// end ; end_of_file
16274: LD_VAR 0 3
16278: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
// skirmish := false ;
16283: LD_ADDR_EXP 47
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// mc_bases := [ ] ;
16291: LD_ADDR_EXP 48
16295: PUSH
16296: EMPTY
16297: ST_TO_ADDR
// mc_sides := [ ] ;
16298: LD_ADDR_EXP 74
16302: PUSH
16303: EMPTY
16304: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16305: LD_ADDR_EXP 49
16309: PUSH
16310: EMPTY
16311: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16312: LD_ADDR_EXP 50
16316: PUSH
16317: EMPTY
16318: ST_TO_ADDR
// mc_need_heal := [ ] ;
16319: LD_ADDR_EXP 51
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// mc_healers := [ ] ;
16326: LD_ADDR_EXP 52
16330: PUSH
16331: EMPTY
16332: ST_TO_ADDR
// mc_build_list := [ ] ;
16333: LD_ADDR_EXP 53
16337: PUSH
16338: EMPTY
16339: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16340: LD_ADDR_EXP 80
16344: PUSH
16345: EMPTY
16346: ST_TO_ADDR
// mc_builders := [ ] ;
16347: LD_ADDR_EXP 54
16351: PUSH
16352: EMPTY
16353: ST_TO_ADDR
// mc_construct_list := [ ] ;
16354: LD_ADDR_EXP 55
16358: PUSH
16359: EMPTY
16360: ST_TO_ADDR
// mc_turret_list := [ ] ;
16361: LD_ADDR_EXP 56
16365: PUSH
16366: EMPTY
16367: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16368: LD_ADDR_EXP 57
16372: PUSH
16373: EMPTY
16374: ST_TO_ADDR
// mc_miners := [ ] ;
16375: LD_ADDR_EXP 62
16379: PUSH
16380: EMPTY
16381: ST_TO_ADDR
// mc_mines := [ ] ;
16382: LD_ADDR_EXP 61
16386: PUSH
16387: EMPTY
16388: ST_TO_ADDR
// mc_minefields := [ ] ;
16389: LD_ADDR_EXP 63
16393: PUSH
16394: EMPTY
16395: ST_TO_ADDR
// mc_crates := [ ] ;
16396: LD_ADDR_EXP 64
16400: PUSH
16401: EMPTY
16402: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16403: LD_ADDR_EXP 65
16407: PUSH
16408: EMPTY
16409: ST_TO_ADDR
// mc_crates_area := [ ] ;
16410: LD_ADDR_EXP 66
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// mc_vehicles := [ ] ;
16417: LD_ADDR_EXP 67
16421: PUSH
16422: EMPTY
16423: ST_TO_ADDR
// mc_attack := [ ] ;
16424: LD_ADDR_EXP 68
16428: PUSH
16429: EMPTY
16430: ST_TO_ADDR
// mc_produce := [ ] ;
16431: LD_ADDR_EXP 69
16435: PUSH
16436: EMPTY
16437: ST_TO_ADDR
// mc_defender := [ ] ;
16438: LD_ADDR_EXP 70
16442: PUSH
16443: EMPTY
16444: ST_TO_ADDR
// mc_parking := [ ] ;
16445: LD_ADDR_EXP 72
16449: PUSH
16450: EMPTY
16451: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16452: LD_ADDR_EXP 58
16456: PUSH
16457: EMPTY
16458: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16459: LD_ADDR_EXP 60
16463: PUSH
16464: EMPTY
16465: ST_TO_ADDR
// mc_scan := [ ] ;
16466: LD_ADDR_EXP 71
16470: PUSH
16471: EMPTY
16472: ST_TO_ADDR
// mc_scan_area := [ ] ;
16473: LD_ADDR_EXP 73
16477: PUSH
16478: EMPTY
16479: ST_TO_ADDR
// mc_tech := [ ] ;
16480: LD_ADDR_EXP 75
16484: PUSH
16485: EMPTY
16486: ST_TO_ADDR
// end ;
16487: LD_VAR 0 1
16491: RET
// export function MC_Kill ( base ) ; begin
16492: LD_INT 0
16494: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16495: LD_ADDR_EXP 48
16499: PUSH
16500: LD_EXP 48
16504: PPUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: EMPTY
16511: PPUSH
16512: CALL_OW 1
16516: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16517: LD_ADDR_EXP 49
16521: PUSH
16522: LD_EXP 49
16526: PPUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: EMPTY
16533: PPUSH
16534: CALL_OW 1
16538: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16539: LD_ADDR_EXP 50
16543: PUSH
16544: LD_EXP 50
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: EMPTY
16555: PPUSH
16556: CALL_OW 1
16560: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16561: LD_ADDR_EXP 51
16565: PUSH
16566: LD_EXP 51
16570: PPUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: EMPTY
16577: PPUSH
16578: CALL_OW 1
16582: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16583: LD_ADDR_EXP 52
16587: PUSH
16588: LD_EXP 52
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: EMPTY
16599: PPUSH
16600: CALL_OW 1
16604: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16605: LD_ADDR_EXP 53
16609: PUSH
16610: LD_EXP 53
16614: PPUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: EMPTY
16621: PPUSH
16622: CALL_OW 1
16626: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16627: LD_ADDR_EXP 54
16631: PUSH
16632: LD_EXP 54
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: EMPTY
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16649: LD_ADDR_EXP 55
16653: PUSH
16654: LD_EXP 55
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: EMPTY
16665: PPUSH
16666: CALL_OW 1
16670: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16671: LD_ADDR_EXP 56
16675: PUSH
16676: LD_EXP 56
16680: PPUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: EMPTY
16687: PPUSH
16688: CALL_OW 1
16692: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16693: LD_ADDR_EXP 57
16697: PUSH
16698: LD_EXP 57
16702: PPUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: EMPTY
16709: PPUSH
16710: CALL_OW 1
16714: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16715: LD_ADDR_EXP 58
16719: PUSH
16720: LD_EXP 58
16724: PPUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: EMPTY
16731: PPUSH
16732: CALL_OW 1
16736: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16737: LD_ADDR_EXP 59
16741: PUSH
16742: LD_EXP 59
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: LD_INT 0
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16760: LD_ADDR_EXP 60
16764: PUSH
16765: LD_EXP 60
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: EMPTY
16776: PPUSH
16777: CALL_OW 1
16781: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_EXP 61
16791: PPUSH
16792: LD_VAR 0 1
16796: PPUSH
16797: EMPTY
16798: PPUSH
16799: CALL_OW 1
16803: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16804: LD_ADDR_EXP 62
16808: PUSH
16809: LD_EXP 62
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: EMPTY
16820: PPUSH
16821: CALL_OW 1
16825: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16826: LD_ADDR_EXP 63
16830: PUSH
16831: LD_EXP 63
16835: PPUSH
16836: LD_VAR 0 1
16840: PPUSH
16841: EMPTY
16842: PPUSH
16843: CALL_OW 1
16847: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16848: LD_ADDR_EXP 64
16852: PUSH
16853: LD_EXP 64
16857: PPUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: EMPTY
16864: PPUSH
16865: CALL_OW 1
16869: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
16870: LD_ADDR_EXP 65
16874: PUSH
16875: LD_EXP 65
16879: PPUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: EMPTY
16886: PPUSH
16887: CALL_OW 1
16891: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
16892: LD_ADDR_EXP 66
16896: PUSH
16897: LD_EXP 66
16901: PPUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: EMPTY
16908: PPUSH
16909: CALL_OW 1
16913: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
16914: LD_ADDR_EXP 67
16918: PUSH
16919: LD_EXP 67
16923: PPUSH
16924: LD_VAR 0 1
16928: PPUSH
16929: EMPTY
16930: PPUSH
16931: CALL_OW 1
16935: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
16936: LD_ADDR_EXP 68
16940: PUSH
16941: LD_EXP 68
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: EMPTY
16952: PPUSH
16953: CALL_OW 1
16957: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
16958: LD_ADDR_EXP 69
16962: PUSH
16963: LD_EXP 69
16967: PPUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: EMPTY
16974: PPUSH
16975: CALL_OW 1
16979: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
16980: LD_ADDR_EXP 70
16984: PUSH
16985: LD_EXP 70
16989: PPUSH
16990: LD_VAR 0 1
16994: PPUSH
16995: EMPTY
16996: PPUSH
16997: CALL_OW 1
17001: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17002: LD_ADDR_EXP 71
17006: PUSH
17007: LD_EXP 71
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: EMPTY
17018: PPUSH
17019: CALL_OW 1
17023: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17024: LD_ADDR_EXP 72
17028: PUSH
17029: LD_EXP 72
17033: PPUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: EMPTY
17040: PPUSH
17041: CALL_OW 1
17045: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17046: LD_ADDR_EXP 73
17050: PUSH
17051: LD_EXP 73
17055: PPUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: EMPTY
17062: PPUSH
17063: CALL_OW 1
17067: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17068: LD_ADDR_EXP 75
17072: PUSH
17073: LD_EXP 75
17077: PPUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: EMPTY
17084: PPUSH
17085: CALL_OW 1
17089: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17090: LD_ADDR_EXP 77
17094: PUSH
17095: LD_EXP 77
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: EMPTY
17106: PPUSH
17107: CALL_OW 1
17111: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17112: LD_ADDR_EXP 78
17116: PUSH
17117: LD_EXP 78
17121: PPUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: EMPTY
17128: PPUSH
17129: CALL_OW 1
17133: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17134: LD_ADDR_EXP 79
17138: PUSH
17139: LD_EXP 79
17143: PPUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: EMPTY
17150: PPUSH
17151: CALL_OW 1
17155: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17156: LD_ADDR_EXP 80
17160: PUSH
17161: LD_EXP 80
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: EMPTY
17172: PPUSH
17173: CALL_OW 1
17177: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17178: LD_ADDR_EXP 81
17182: PUSH
17183: LD_EXP 81
17187: PPUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: EMPTY
17194: PPUSH
17195: CALL_OW 1
17199: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17200: LD_ADDR_EXP 82
17204: PUSH
17205: LD_EXP 82
17209: PPUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: EMPTY
17216: PPUSH
17217: CALL_OW 1
17221: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17222: LD_ADDR_EXP 83
17226: PUSH
17227: LD_EXP 83
17231: PPUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: EMPTY
17238: PPUSH
17239: CALL_OW 1
17243: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17244: LD_ADDR_EXP 84
17248: PUSH
17249: LD_EXP 84
17253: PPUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: EMPTY
17260: PPUSH
17261: CALL_OW 1
17265: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17266: LD_ADDR_EXP 85
17270: PUSH
17271: LD_EXP 85
17275: PPUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: EMPTY
17282: PPUSH
17283: CALL_OW 1
17287: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17288: LD_ADDR_EXP 86
17292: PUSH
17293: LD_EXP 86
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: EMPTY
17304: PPUSH
17305: CALL_OW 1
17309: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17310: LD_ADDR_EXP 87
17314: PUSH
17315: LD_EXP 87
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: EMPTY
17326: PPUSH
17327: CALL_OW 1
17331: ST_TO_ADDR
// end ;
17332: LD_VAR 0 2
17336: RET
// export function MC_Start ( ) ; var i ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// for i = 1 to mc_bases do
17341: LD_ADDR_VAR 0 2
17345: PUSH
17346: DOUBLE
17347: LD_INT 1
17349: DEC
17350: ST_TO_ADDR
17351: LD_EXP 48
17355: PUSH
17356: FOR_TO
17357: IFFALSE 18290
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17359: LD_ADDR_EXP 49
17363: PUSH
17364: LD_EXP 49
17368: PPUSH
17369: LD_VAR 0 2
17373: PPUSH
17374: EMPTY
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17381: LD_ADDR_EXP 50
17385: PUSH
17386: LD_EXP 50
17390: PPUSH
17391: LD_VAR 0 2
17395: PPUSH
17396: EMPTY
17397: PPUSH
17398: CALL_OW 1
17402: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17403: LD_ADDR_EXP 51
17407: PUSH
17408: LD_EXP 51
17412: PPUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: EMPTY
17419: PPUSH
17420: CALL_OW 1
17424: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17425: LD_ADDR_EXP 52
17429: PUSH
17430: LD_EXP 52
17434: PPUSH
17435: LD_VAR 0 2
17439: PPUSH
17440: EMPTY
17441: PUSH
17442: EMPTY
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 1
17452: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17453: LD_ADDR_EXP 53
17457: PUSH
17458: LD_EXP 53
17462: PPUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: EMPTY
17469: PPUSH
17470: CALL_OW 1
17474: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17475: LD_ADDR_EXP 80
17479: PUSH
17480: LD_EXP 80
17484: PPUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: EMPTY
17491: PPUSH
17492: CALL_OW 1
17496: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17497: LD_ADDR_EXP 54
17501: PUSH
17502: LD_EXP 54
17506: PPUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: EMPTY
17513: PPUSH
17514: CALL_OW 1
17518: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17519: LD_ADDR_EXP 55
17523: PUSH
17524: LD_EXP 55
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: EMPTY
17535: PPUSH
17536: CALL_OW 1
17540: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17541: LD_ADDR_EXP 56
17545: PUSH
17546: LD_EXP 56
17550: PPUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: EMPTY
17557: PPUSH
17558: CALL_OW 1
17562: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17563: LD_ADDR_EXP 57
17567: PUSH
17568: LD_EXP 57
17572: PPUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_EXP 48
17582: PUSH
17583: LD_VAR 0 2
17587: ARRAY
17588: PPUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 30
17594: PUSH
17595: LD_INT 32
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: LD_INT 31
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 58
17619: PUSH
17620: EMPTY
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PPUSH
17627: CALL_OW 72
17631: PPUSH
17632: CALL_OW 1
17636: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17637: LD_ADDR_EXP 58
17641: PUSH
17642: LD_EXP 58
17646: PPUSH
17647: LD_VAR 0 2
17651: PPUSH
17652: EMPTY
17653: PPUSH
17654: CALL_OW 1
17658: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17659: LD_ADDR_EXP 62
17663: PUSH
17664: LD_EXP 62
17668: PPUSH
17669: LD_VAR 0 2
17673: PPUSH
17674: EMPTY
17675: PPUSH
17676: CALL_OW 1
17680: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17681: LD_ADDR_EXP 61
17685: PUSH
17686: LD_EXP 61
17690: PPUSH
17691: LD_VAR 0 2
17695: PPUSH
17696: EMPTY
17697: PPUSH
17698: CALL_OW 1
17702: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17703: LD_ADDR_EXP 63
17707: PUSH
17708: LD_EXP 63
17712: PPUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: EMPTY
17719: PPUSH
17720: CALL_OW 1
17724: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17725: LD_ADDR_EXP 64
17729: PUSH
17730: LD_EXP 64
17734: PPUSH
17735: LD_VAR 0 2
17739: PPUSH
17740: EMPTY
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17747: LD_ADDR_EXP 65
17751: PUSH
17752: LD_EXP 65
17756: PPUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: EMPTY
17763: PPUSH
17764: CALL_OW 1
17768: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17769: LD_ADDR_EXP 66
17773: PUSH
17774: LD_EXP 66
17778: PPUSH
17779: LD_VAR 0 2
17783: PPUSH
17784: EMPTY
17785: PPUSH
17786: CALL_OW 1
17790: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17791: LD_ADDR_EXP 67
17795: PUSH
17796: LD_EXP 67
17800: PPUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: EMPTY
17807: PPUSH
17808: CALL_OW 1
17812: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17813: LD_ADDR_EXP 68
17817: PUSH
17818: LD_EXP 68
17822: PPUSH
17823: LD_VAR 0 2
17827: PPUSH
17828: EMPTY
17829: PPUSH
17830: CALL_OW 1
17834: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17835: LD_ADDR_EXP 69
17839: PUSH
17840: LD_EXP 69
17844: PPUSH
17845: LD_VAR 0 2
17849: PPUSH
17850: EMPTY
17851: PPUSH
17852: CALL_OW 1
17856: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17857: LD_ADDR_EXP 70
17861: PUSH
17862: LD_EXP 70
17866: PPUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: EMPTY
17873: PPUSH
17874: CALL_OW 1
17878: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
17879: LD_ADDR_EXP 59
17883: PUSH
17884: LD_EXP 59
17888: PPUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_INT 0
17896: PPUSH
17897: CALL_OW 1
17901: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
17902: LD_ADDR_EXP 72
17906: PUSH
17907: LD_EXP 72
17911: PPUSH
17912: LD_VAR 0 2
17916: PPUSH
17917: LD_INT 0
17919: PPUSH
17920: CALL_OW 1
17924: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17925: LD_ADDR_EXP 60
17929: PUSH
17930: LD_EXP 60
17934: PPUSH
17935: LD_VAR 0 2
17939: PPUSH
17940: EMPTY
17941: PPUSH
17942: CALL_OW 1
17946: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
17947: LD_ADDR_EXP 71
17951: PUSH
17952: LD_EXP 71
17956: PPUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: LD_INT 0
17964: PPUSH
17965: CALL_OW 1
17969: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
17970: LD_ADDR_EXP 73
17974: PUSH
17975: LD_EXP 73
17979: PPUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: EMPTY
17986: PPUSH
17987: CALL_OW 1
17991: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
17992: LD_ADDR_EXP 76
17996: PUSH
17997: LD_EXP 76
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: LD_INT 0
18009: PPUSH
18010: CALL_OW 1
18014: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18015: LD_ADDR_EXP 77
18019: PUSH
18020: LD_EXP 77
18024: PPUSH
18025: LD_VAR 0 2
18029: PPUSH
18030: EMPTY
18031: PPUSH
18032: CALL_OW 1
18036: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18037: LD_ADDR_EXP 78
18041: PUSH
18042: LD_EXP 78
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: EMPTY
18053: PPUSH
18054: CALL_OW 1
18058: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18059: LD_ADDR_EXP 79
18063: PUSH
18064: LD_EXP 79
18068: PPUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: EMPTY
18075: PPUSH
18076: CALL_OW 1
18080: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18081: LD_ADDR_EXP 81
18085: PUSH
18086: LD_EXP 81
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_EXP 48
18100: PUSH
18101: LD_VAR 0 2
18105: ARRAY
18106: PPUSH
18107: LD_INT 2
18109: PUSH
18110: LD_INT 30
18112: PUSH
18113: LD_INT 6
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 30
18122: PUSH
18123: LD_INT 7
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 30
18132: PUSH
18133: LD_INT 8
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 72
18150: PPUSH
18151: CALL_OW 1
18155: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18156: LD_ADDR_EXP 82
18160: PUSH
18161: LD_EXP 82
18165: PPUSH
18166: LD_VAR 0 2
18170: PPUSH
18171: EMPTY
18172: PPUSH
18173: CALL_OW 1
18177: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18178: LD_ADDR_EXP 83
18182: PUSH
18183: LD_EXP 83
18187: PPUSH
18188: LD_VAR 0 2
18192: PPUSH
18193: EMPTY
18194: PPUSH
18195: CALL_OW 1
18199: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18200: LD_ADDR_EXP 84
18204: PUSH
18205: LD_EXP 84
18209: PPUSH
18210: LD_VAR 0 2
18214: PPUSH
18215: EMPTY
18216: PPUSH
18217: CALL_OW 1
18221: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18222: LD_ADDR_EXP 85
18226: PUSH
18227: LD_EXP 85
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: EMPTY
18238: PPUSH
18239: CALL_OW 1
18243: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18244: LD_ADDR_EXP 86
18248: PUSH
18249: LD_EXP 86
18253: PPUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: EMPTY
18260: PPUSH
18261: CALL_OW 1
18265: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18266: LD_ADDR_EXP 87
18270: PUSH
18271: LD_EXP 87
18275: PPUSH
18276: LD_VAR 0 2
18280: PPUSH
18281: EMPTY
18282: PPUSH
18283: CALL_OW 1
18287: ST_TO_ADDR
// end ;
18288: GO 17356
18290: POP
18291: POP
// MC_InitSides ( ) ;
18292: CALL 18578 0 0
// MC_InitResearch ( ) ;
18296: CALL 18317 0 0
// CustomInitMacro ( ) ;
18300: CALL 285 0 0
// skirmish := true ;
18304: LD_ADDR_EXP 47
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// end ;
18312: LD_VAR 0 1
18316: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18317: LD_INT 0
18319: PPUSH
18320: PPUSH
18321: PPUSH
18322: PPUSH
18323: PPUSH
18324: PPUSH
// if not mc_bases then
18325: LD_EXP 48
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18573
// for i = 1 to 8 do
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: DOUBLE
18340: LD_INT 1
18342: DEC
18343: ST_TO_ADDR
18344: LD_INT 8
18346: PUSH
18347: FOR_TO
18348: IFFALSE 18374
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18350: LD_ADDR_EXP 75
18354: PUSH
18355: LD_EXP 75
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: EMPTY
18366: PPUSH
18367: CALL_OW 1
18371: ST_TO_ADDR
18372: GO 18347
18374: POP
18375: POP
// tmp := [ ] ;
18376: LD_ADDR_VAR 0 5
18380: PUSH
18381: EMPTY
18382: ST_TO_ADDR
// for i = 1 to mc_sides do
18383: LD_ADDR_VAR 0 2
18387: PUSH
18388: DOUBLE
18389: LD_INT 1
18391: DEC
18392: ST_TO_ADDR
18393: LD_EXP 74
18397: PUSH
18398: FOR_TO
18399: IFFALSE 18457
// if not mc_sides [ i ] in tmp then
18401: LD_EXP 74
18405: PUSH
18406: LD_VAR 0 2
18410: ARRAY
18411: PUSH
18412: LD_VAR 0 5
18416: IN
18417: NOT
18418: IFFALSE 18455
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18420: LD_ADDR_VAR 0 5
18424: PUSH
18425: LD_VAR 0 5
18429: PPUSH
18430: LD_VAR 0 5
18434: PUSH
18435: LD_INT 1
18437: PLUS
18438: PPUSH
18439: LD_EXP 74
18443: PUSH
18444: LD_VAR 0 2
18448: ARRAY
18449: PPUSH
18450: CALL_OW 2
18454: ST_TO_ADDR
18455: GO 18398
18457: POP
18458: POP
// if not tmp then
18459: LD_VAR 0 5
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18573
// for j in tmp do
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_VAR 0 5
18477: PUSH
18478: FOR_IN
18479: IFFALSE 18571
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18481: LD_ADDR_VAR 0 6
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PPUSH
18498: CALL_OW 69
18502: ST_TO_ADDR
// if not un then
18503: LD_VAR 0 6
18507: NOT
18508: IFFALSE 18512
// continue ;
18510: GO 18478
// nation := GetNation ( un [ 1 ] ) ;
18512: LD_ADDR_VAR 0 4
18516: PUSH
18517: LD_VAR 0 6
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 248
18530: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18531: LD_ADDR_EXP 75
18535: PUSH
18536: LD_EXP 75
18540: PPUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: LD_VAR 0 4
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL 37768 0 3
18563: PPUSH
18564: CALL_OW 1
18568: ST_TO_ADDR
// end ;
18569: GO 18478
18571: POP
18572: POP
// end ;
18573: LD_VAR 0 1
18577: RET
// export function MC_InitSides ( ) ; var i ; begin
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
// if not mc_bases then
18582: LD_EXP 48
18586: NOT
18587: IFFALSE 18591
// exit ;
18589: GO 18665
// for i = 1 to mc_bases do
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: DOUBLE
18597: LD_INT 1
18599: DEC
18600: ST_TO_ADDR
18601: LD_EXP 48
18605: PUSH
18606: FOR_TO
18607: IFFALSE 18663
// if mc_bases [ i ] then
18609: LD_EXP 48
18613: PUSH
18614: LD_VAR 0 2
18618: ARRAY
18619: IFFALSE 18661
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18621: LD_ADDR_EXP 74
18625: PUSH
18626: LD_EXP 74
18630: PPUSH
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_EXP 48
18640: PUSH
18641: LD_VAR 0 2
18645: ARRAY
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PPUSH
18651: CALL_OW 255
18655: PPUSH
18656: CALL_OW 1
18660: ST_TO_ADDR
18661: GO 18606
18663: POP
18664: POP
// end ;
18665: LD_VAR 0 1
18669: RET
// every 0 0$01 trigger skirmish do
18670: LD_EXP 47
18674: IFFALSE 18807
18676: GO 18678
18678: DISABLE
// begin enable ;
18679: ENABLE
// MC_CheckBuildings ( ) ;
18680: CALL 19292 0 0
// MC_CheckPeopleLife ( ) ;
18684: CALL 19417 0 0
// RaiseSailEvent ( 103 ) ;
18688: LD_INT 103
18690: PPUSH
18691: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18695: LD_INT 104
18697: PPUSH
18698: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18702: LD_INT 105
18704: PPUSH
18705: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18709: LD_INT 106
18711: PPUSH
18712: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18716: LD_INT 107
18718: PPUSH
18719: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18723: LD_INT 108
18725: PPUSH
18726: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18730: LD_INT 109
18732: PPUSH
18733: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18737: LD_INT 110
18739: PPUSH
18740: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18744: LD_INT 111
18746: PPUSH
18747: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18751: LD_INT 112
18753: PPUSH
18754: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18758: LD_INT 120
18760: PPUSH
18761: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18765: LD_INT 121
18767: PPUSH
18768: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18772: LD_INT 122
18774: PPUSH
18775: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18779: LD_INT 123
18781: PPUSH
18782: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18786: LD_INT 125
18788: PPUSH
18789: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18793: LD_INT 126
18795: PPUSH
18796: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18800: LD_INT 200
18802: PPUSH
18803: CALL_OW 427
// end ;
18807: END
// every 10 trigger skirmish do var i ;
18808: LD_EXP 47
18812: IFFALSE 18911
18814: GO 18816
18816: DISABLE
18817: LD_INT 0
18819: PPUSH
// begin enable ;
18820: ENABLE
// if not mc_bases then
18821: LD_EXP 48
18825: NOT
18826: IFFALSE 18830
// exit ;
18828: GO 18911
// for i = 1 to mc_bases do
18830: LD_ADDR_VAR 0 1
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_EXP 48
18844: PUSH
18845: FOR_TO
18846: IFFALSE 18909
// if mc_mines [ i ] and mc_miners [ i ] then
18848: LD_EXP 61
18852: PUSH
18853: LD_VAR 0 1
18857: ARRAY
18858: PUSH
18859: LD_EXP 62
18863: PUSH
18864: LD_VAR 0 1
18868: ARRAY
18869: AND
18870: IFFALSE 18907
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
18872: LD_EXP 62
18876: PUSH
18877: LD_VAR 0 1
18881: ARRAY
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PPUSH
18887: CALL_OW 255
18891: PPUSH
18892: LD_EXP 61
18896: PUSH
18897: LD_VAR 0 1
18901: ARRAY
18902: PPUSH
18903: CALL 41000 0 2
18907: GO 18845
18909: POP
18910: POP
// end ;
18911: PPOPN 1
18913: END
// on SailEvent ( event ) do begin if event = 101 then
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 101
18921: EQUAL
18922: IFFALSE 18928
// MC_RepairBuildings ( ) ;
18924: CALL 19975 0 0
// if event = 102 then
18928: LD_VAR 0 1
18932: PUSH
18933: LD_INT 102
18935: EQUAL
18936: IFFALSE 18942
// MC_Heal ( ) ;
18938: CALL 20381 0 0
// if event = 103 then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 103
18949: EQUAL
18950: IFFALSE 18956
// MC_Build ( ) ;
18952: CALL 20803 0 0
// if event = 104 then
18956: LD_VAR 0 1
18960: PUSH
18961: LD_INT 104
18963: EQUAL
18964: IFFALSE 18970
// MC_TurretWeapon ( ) ;
18966: CALL 22220 0 0
// if event = 105 then
18970: LD_VAR 0 1
18974: PUSH
18975: LD_INT 105
18977: EQUAL
18978: IFFALSE 18984
// MC_BuildUpgrade ( ) ;
18980: CALL 21771 0 0
// if event = 106 then
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 106
18991: EQUAL
18992: IFFALSE 18998
// MC_PlantMines ( ) ;
18994: CALL 22572 0 0
// if event = 107 then
18998: LD_VAR 0 1
19002: PUSH
19003: LD_INT 107
19005: EQUAL
19006: IFFALSE 19012
// MC_CollectCrates ( ) ;
19008: CALL 23579 0 0
// if event = 108 then
19012: LD_VAR 0 1
19016: PUSH
19017: LD_INT 108
19019: EQUAL
19020: IFFALSE 19026
// MC_LinkRemoteControl ( ) ;
19022: CALL 25083 0 0
// if event = 109 then
19026: LD_VAR 0 1
19030: PUSH
19031: LD_INT 109
19033: EQUAL
19034: IFFALSE 19040
// MC_ProduceVehicle ( ) ;
19036: CALL 25264 0 0
// if event = 110 then
19040: LD_VAR 0 1
19044: PUSH
19045: LD_INT 110
19047: EQUAL
19048: IFFALSE 19054
// MC_SendAttack ( ) ;
19050: CALL 25745 0 0
// if event = 111 then
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 111
19061: EQUAL
19062: IFFALSE 19068
// MC_Defend ( ) ;
19064: CALL 25853 0 0
// if event = 112 then
19068: LD_VAR 0 1
19072: PUSH
19073: LD_INT 112
19075: EQUAL
19076: IFFALSE 19082
// MC_Research ( ) ;
19078: CALL 26251 0 0
// if event = 120 then
19082: LD_VAR 0 1
19086: PUSH
19087: LD_INT 120
19089: EQUAL
19090: IFFALSE 19096
// MC_RepairVehicle ( ) ;
19092: CALL 27220 0 0
// if event = 121 then
19096: LD_VAR 0 1
19100: PUSH
19101: LD_INT 121
19103: EQUAL
19104: IFFALSE 19110
// MC_TameApe ( ) ;
19106: CALL 27909 0 0
// if event = 122 then
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 122
19117: EQUAL
19118: IFFALSE 19124
// MC_ChangeApeClass ( ) ;
19120: CALL 28672 0 0
// if event = 123 then
19124: LD_VAR 0 1
19128: PUSH
19129: LD_INT 123
19131: EQUAL
19132: IFFALSE 19138
// MC_Bazooka ( ) ;
19134: CALL 29306 0 0
// if event = 124 then
19138: LD_VAR 0 1
19142: PUSH
19143: LD_INT 124
19145: EQUAL
19146: IFFALSE 19152
// MC_TeleportExit ( ) ;
19148: CALL 29504 0 0
// if event = 125 then
19152: LD_VAR 0 1
19156: PUSH
19157: LD_INT 125
19159: EQUAL
19160: IFFALSE 19166
// MC_Deposits ( ) ;
19162: CALL 29546 0 0
// if event = 126 then
19166: LD_VAR 0 1
19170: PUSH
19171: LD_INT 126
19173: EQUAL
19174: IFFALSE 19180
// MC_RemoteDriver ( ) ;
19176: CALL 30125 0 0
// if event = 200 then
19180: LD_VAR 0 1
19184: PUSH
19185: LD_INT 200
19187: EQUAL
19188: IFFALSE 19194
// MC_Idle ( ) ;
19190: CALL 31630 0 0
// end ;
19194: PPOPN 1
19196: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19197: LD_INT 0
19199: PPUSH
19200: PPUSH
// if not mc_bases [ base ] or not tag then
19201: LD_EXP 48
19205: PUSH
19206: LD_VAR 0 1
19210: ARRAY
19211: NOT
19212: PUSH
19213: LD_VAR 0 2
19217: NOT
19218: OR
19219: IFFALSE 19223
// exit ;
19221: GO 19287
// for i in mc_bases [ base ] union mc_ape [ base ] do
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: LD_EXP 48
19232: PUSH
19233: LD_VAR 0 1
19237: ARRAY
19238: PUSH
19239: LD_EXP 77
19243: PUSH
19244: LD_VAR 0 1
19248: ARRAY
19249: UNION
19250: PUSH
19251: FOR_IN
19252: IFFALSE 19285
// if GetTag ( i ) = tag then
19254: LD_VAR 0 4
19258: PPUSH
19259: CALL_OW 110
19263: PUSH
19264: LD_VAR 0 2
19268: EQUAL
19269: IFFALSE 19283
// SetTag ( i , 0 ) ;
19271: LD_VAR 0 4
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: CALL_OW 109
19283: GO 19251
19285: POP
19286: POP
// end ;
19287: LD_VAR 0 3
19291: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// if not mc_bases then
19297: LD_EXP 48
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19412
// for i = 1 to mc_bases do
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: DOUBLE
19312: LD_INT 1
19314: DEC
19315: ST_TO_ADDR
19316: LD_EXP 48
19320: PUSH
19321: FOR_TO
19322: IFFALSE 19403
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: LD_EXP 48
19333: PUSH
19334: LD_VAR 0 2
19338: ARRAY
19339: PPUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 3
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 24
19355: PUSH
19356: LD_INT 1000
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 72
19375: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
19376: LD_ADDR_EXP 49
19380: PUSH
19381: LD_EXP 49
19385: PPUSH
19386: LD_VAR 0 2
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: CALL_OW 1
19400: ST_TO_ADDR
// end ;
19401: GO 19321
19403: POP
19404: POP
// RaiseSailEvent ( 101 ) ;
19405: LD_INT 101
19407: PPUSH
19408: CALL_OW 427
// end ;
19412: LD_VAR 0 1
19416: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
19417: LD_INT 0
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
// if not mc_bases then
19426: LD_EXP 48
19430: NOT
19431: IFFALSE 19435
// exit ;
19433: GO 19970
// for i = 1 to mc_bases do
19435: LD_ADDR_VAR 0 2
19439: PUSH
19440: DOUBLE
19441: LD_INT 1
19443: DEC
19444: ST_TO_ADDR
19445: LD_EXP 48
19449: PUSH
19450: FOR_TO
19451: IFFALSE 19961
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
19453: LD_ADDR_VAR 0 5
19457: PUSH
19458: LD_EXP 48
19462: PUSH
19463: LD_VAR 0 2
19467: ARRAY
19468: PUSH
19469: LD_EXP 77
19473: PUSH
19474: LD_VAR 0 2
19478: ARRAY
19479: UNION
19480: PPUSH
19481: LD_INT 21
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: LD_INT 54
19499: PUSH
19500: EMPTY
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_INT 24
19512: PUSH
19513: LD_INT 700
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 72
19537: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
19538: LD_ADDR_VAR 0 6
19542: PUSH
19543: LD_EXP 48
19547: PUSH
19548: LD_VAR 0 2
19552: ARRAY
19553: PPUSH
19554: LD_INT 21
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 3
19569: PUSH
19570: LD_INT 54
19572: PUSH
19573: EMPTY
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: LD_INT 24
19585: PUSH
19586: LD_INT 250
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL_OW 72
19610: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
19611: LD_ADDR_VAR 0 7
19615: PUSH
19616: LD_VAR 0 5
19620: PUSH
19621: LD_VAR 0 6
19625: DIFF
19626: ST_TO_ADDR
// if not need_heal_1 then
19627: LD_VAR 0 6
19631: NOT
19632: IFFALSE 19665
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
19634: LD_ADDR_EXP 51
19638: PUSH
19639: LD_EXP 51
19643: PPUSH
19644: LD_VAR 0 2
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PPUSH
19656: EMPTY
19657: PPUSH
19658: CALL 44342 0 3
19662: ST_TO_ADDR
19663: GO 19697
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
19665: LD_ADDR_EXP 51
19669: PUSH
19670: LD_EXP 51
19674: PPUSH
19675: LD_VAR 0 2
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PPUSH
19687: LD_VAR 0 6
19691: PPUSH
19692: CALL 44342 0 3
19696: ST_TO_ADDR
// if not need_heal_2 then
19697: LD_VAR 0 7
19701: NOT
19702: IFFALSE 19735
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
19704: LD_ADDR_EXP 51
19708: PUSH
19709: LD_EXP 51
19713: PPUSH
19714: LD_VAR 0 2
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL 44342 0 3
19732: ST_TO_ADDR
19733: GO 19767
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
19735: LD_ADDR_EXP 51
19739: PUSH
19740: LD_EXP 51
19744: PPUSH
19745: LD_VAR 0 2
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PPUSH
19757: LD_VAR 0 7
19761: PPUSH
19762: CALL 44342 0 3
19766: ST_TO_ADDR
// if need_heal_2 then
19767: LD_VAR 0 7
19771: IFFALSE 19943
// for j in need_heal_2 do
19773: LD_ADDR_VAR 0 3
19777: PUSH
19778: LD_VAR 0 7
19782: PUSH
19783: FOR_IN
19784: IFFALSE 19941
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
19786: LD_ADDR_VAR 0 5
19790: PUSH
19791: LD_EXP 48
19795: PUSH
19796: LD_VAR 0 2
19800: ARRAY
19801: PPUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 30
19807: PUSH
19808: LD_INT 6
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 30
19817: PUSH
19818: LD_INT 7
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 8
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 4
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PPUSH
19874: CALL_OW 72
19878: ST_TO_ADDR
// if tmp then
19879: LD_VAR 0 5
19883: IFFALSE 19939
// begin k := NearestUnitToUnit ( tmp , j ) ;
19885: LD_ADDR_VAR 0 4
19889: PUSH
19890: LD_VAR 0 5
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: CALL_OW 74
19904: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_VAR 0 4
19914: PPUSH
19915: CALL_OW 296
19919: PUSH
19920: LD_INT 7
19922: GREATER
19923: IFFALSE 19939
// ComMoveUnit ( j , k ) ;
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_VAR 0 4
19934: PPUSH
19935: CALL_OW 112
// end ; end ;
19939: GO 19783
19941: POP
19942: POP
// if not need_heal_1 and not need_heal_2 then
19943: LD_VAR 0 6
19947: NOT
19948: PUSH
19949: LD_VAR 0 7
19953: NOT
19954: AND
19955: IFFALSE 19959
// continue ;
19957: GO 19450
// end ;
19959: GO 19450
19961: POP
19962: POP
// RaiseSailEvent ( 102 ) ;
19963: LD_INT 102
19965: PPUSH
19966: CALL_OW 427
// end ;
19970: LD_VAR 0 1
19974: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// if not mc_bases then
19982: LD_EXP 48
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20376
// for i = 1 to mc_bases do
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_EXP 48
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20374
// begin if not mc_building_need_repair [ i ] then
20009: LD_EXP 49
20013: PUSH
20014: LD_VAR 0 2
20018: ARRAY
20019: NOT
20020: IFFALSE 20058
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
20022: LD_ADDR_EXP 50
20026: PUSH
20027: LD_EXP 50
20031: PPUSH
20032: LD_VAR 0 2
20036: PPUSH
20037: EMPTY
20038: PPUSH
20039: CALL_OW 1
20043: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
20044: LD_VAR 0 2
20048: PPUSH
20049: LD_INT 101
20051: PPUSH
20052: CALL 19197 0 2
// continue ;
20056: GO 20006
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
20058: LD_ADDR_EXP 54
20062: PUSH
20063: LD_EXP 54
20067: PPUSH
20068: LD_VAR 0 2
20072: PPUSH
20073: EMPTY
20074: PPUSH
20075: CALL_OW 1
20079: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20080: LD_VAR 0 2
20084: PPUSH
20085: LD_INT 103
20087: PPUSH
20088: CALL 19197 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
20092: LD_ADDR_VAR 0 5
20096: PUSH
20097: LD_EXP 48
20101: PUSH
20102: LD_VAR 0 2
20106: ARRAY
20107: PUSH
20108: LD_EXP 77
20112: PUSH
20113: LD_VAR 0 2
20117: ARRAY
20118: UNION
20119: PPUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 25
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 16
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: PPUSH
20151: CALL_OW 72
20155: ST_TO_ADDR
// if not tmp then
20156: LD_VAR 0 5
20160: NOT
20161: IFFALSE 20165
// continue ;
20163: GO 20006
// for j in tmp do
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 5
20174: PUSH
20175: FOR_IN
20176: IFFALSE 20370
// begin if mc_need_heal [ i ] then
20178: LD_EXP 51
20182: PUSH
20183: LD_VAR 0 2
20187: ARRAY
20188: IFFALSE 20236
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
20190: LD_VAR 0 3
20194: PUSH
20195: LD_EXP 51
20199: PUSH
20200: LD_VAR 0 2
20204: ARRAY
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: IN
20210: PUSH
20211: LD_VAR 0 3
20215: PUSH
20216: LD_EXP 51
20220: PUSH
20221: LD_VAR 0 2
20225: ARRAY
20226: PUSH
20227: LD_INT 2
20229: ARRAY
20230: IN
20231: OR
20232: IFFALSE 20236
// continue ;
20234: GO 20175
// if IsInUnit ( j ) then
20236: LD_VAR 0 3
20240: PPUSH
20241: CALL_OW 310
20245: IFFALSE 20256
// ComExitBuilding ( j ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_EXP 50
20265: PUSH
20266: LD_VAR 0 2
20270: ARRAY
20271: IN
20272: NOT
20273: IFFALSE 20331
// begin SetTag ( j , 101 ) ;
20275: LD_VAR 0 3
20279: PPUSH
20280: LD_INT 101
20282: PPUSH
20283: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
20287: LD_ADDR_EXP 50
20291: PUSH
20292: LD_EXP 50
20296: PPUSH
20297: LD_VAR 0 2
20301: PUSH
20302: LD_EXP 50
20306: PUSH
20307: LD_VAR 0 2
20311: ARRAY
20312: PUSH
20313: LD_INT 1
20315: PLUS
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: CALL 44342 0 3
20330: ST_TO_ADDR
// end ; Wait ( 3 ) ;
20331: LD_INT 3
20333: PPUSH
20334: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
20338: LD_VAR 0 3
20342: PPUSH
20343: LD_EXP 49
20347: PUSH
20348: LD_VAR 0 2
20352: ARRAY
20353: PPUSH
20354: LD_VAR 0 3
20358: PPUSH
20359: CALL_OW 74
20363: PPUSH
20364: CALL_OW 130
// end ;
20368: GO 20175
20370: POP
20371: POP
// end ;
20372: GO 20006
20374: POP
20375: POP
// end ;
20376: LD_VAR 0 1
20380: RET
// export function MC_Heal ; var i , j , tmp ; begin
20381: LD_INT 0
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
// if not mc_bases then
20387: LD_EXP 48
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20798
// for i = 1 to mc_bases do
20396: LD_ADDR_VAR 0 2
20400: PUSH
20401: DOUBLE
20402: LD_INT 1
20404: DEC
20405: ST_TO_ADDR
20406: LD_EXP 48
20410: PUSH
20411: FOR_TO
20412: IFFALSE 20796
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
20414: LD_EXP 51
20418: PUSH
20419: LD_VAR 0 2
20423: ARRAY
20424: PUSH
20425: LD_INT 1
20427: ARRAY
20428: NOT
20429: PUSH
20430: LD_EXP 51
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 2
20443: ARRAY
20444: NOT
20445: AND
20446: IFFALSE 20484
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
20448: LD_ADDR_EXP 52
20452: PUSH
20453: LD_EXP 52
20457: PPUSH
20458: LD_VAR 0 2
20462: PPUSH
20463: EMPTY
20464: PPUSH
20465: CALL_OW 1
20469: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_INT 102
20477: PPUSH
20478: CALL 19197 0 2
// continue ;
20482: GO 20411
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20484: LD_ADDR_VAR 0 4
20488: PUSH
20489: LD_EXP 48
20493: PUSH
20494: LD_VAR 0 2
20498: ARRAY
20499: PPUSH
20500: LD_INT 25
20502: PUSH
20503: LD_INT 4
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 72
20514: ST_TO_ADDR
// if not tmp then
20515: LD_VAR 0 4
20519: NOT
20520: IFFALSE 20524
// continue ;
20522: GO 20411
// if mc_taming [ i ] then
20524: LD_EXP 79
20528: PUSH
20529: LD_VAR 0 2
20533: ARRAY
20534: IFFALSE 20558
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20536: LD_ADDR_EXP 79
20540: PUSH
20541: LD_EXP 79
20545: PPUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: EMPTY
20552: PPUSH
20553: CALL_OW 1
20557: ST_TO_ADDR
// for j in tmp do
20558: LD_ADDR_VAR 0 3
20562: PUSH
20563: LD_VAR 0 4
20567: PUSH
20568: FOR_IN
20569: IFFALSE 20792
// begin if IsInUnit ( j ) then
20571: LD_VAR 0 3
20575: PPUSH
20576: CALL_OW 310
20580: IFFALSE 20591
// ComExitBuilding ( j ) ;
20582: LD_VAR 0 3
20586: PPUSH
20587: CALL_OW 122
// if not j in mc_healers [ i ] then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_EXP 52
20600: PUSH
20601: LD_VAR 0 2
20605: ARRAY
20606: IN
20607: NOT
20608: IFFALSE 20654
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
20610: LD_ADDR_EXP 52
20614: PUSH
20615: LD_EXP 52
20619: PPUSH
20620: LD_VAR 0 2
20624: PUSH
20625: LD_EXP 52
20629: PUSH
20630: LD_VAR 0 2
20634: ARRAY
20635: PUSH
20636: LD_INT 1
20638: PLUS
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: LD_VAR 0 3
20648: PPUSH
20649: CALL 44342 0 3
20653: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 110
20663: PUSH
20664: LD_INT 102
20666: NONEQUAL
20667: IFFALSE 20681
// SetTag ( j , 102 ) ;
20669: LD_VAR 0 3
20673: PPUSH
20674: LD_INT 102
20676: PPUSH
20677: CALL_OW 109
// Wait ( 3 ) ;
20681: LD_INT 3
20683: PPUSH
20684: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
20688: LD_EXP 51
20692: PUSH
20693: LD_VAR 0 2
20697: ARRAY
20698: PUSH
20699: LD_INT 1
20701: ARRAY
20702: IFFALSE 20734
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
20704: LD_VAR 0 3
20708: PPUSH
20709: LD_EXP 51
20713: PUSH
20714: LD_VAR 0 2
20718: ARRAY
20719: PUSH
20720: LD_INT 1
20722: ARRAY
20723: PUSH
20724: LD_INT 1
20726: ARRAY
20727: PPUSH
20728: CALL_OW 128
20732: GO 20790
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
20734: LD_VAR 0 3
20738: PPUSH
20739: CALL_OW 314
20743: NOT
20744: PUSH
20745: LD_EXP 51
20749: PUSH
20750: LD_VAR 0 2
20754: ARRAY
20755: PUSH
20756: LD_INT 2
20758: ARRAY
20759: AND
20760: IFFALSE 20790
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_EXP 51
20771: PUSH
20772: LD_VAR 0 2
20776: ARRAY
20777: PUSH
20778: LD_INT 2
20780: ARRAY
20781: PUSH
20782: LD_INT 1
20784: ARRAY
20785: PPUSH
20786: CALL_OW 128
// end ;
20790: GO 20568
20792: POP
20793: POP
// end ;
20794: GO 20411
20796: POP
20797: POP
// end ;
20798: LD_VAR 0 1
20802: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
20803: LD_INT 0
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
// if not mc_bases then
20809: LD_EXP 48
20813: NOT
20814: IFFALSE 20818
// exit ;
20816: GO 21766
// for i = 1 to mc_bases do
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: DOUBLE
20824: LD_INT 1
20826: DEC
20827: ST_TO_ADDR
20828: LD_EXP 48
20832: PUSH
20833: FOR_TO
20834: IFFALSE 21764
// begin if mc_scan [ i ] then
20836: LD_EXP 71
20840: PUSH
20841: LD_VAR 0 2
20845: ARRAY
20846: IFFALSE 20850
// continue ;
20848: GO 20833
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
20850: LD_EXP 53
20854: PUSH
20855: LD_VAR 0 2
20859: ARRAY
20860: NOT
20861: PUSH
20862: LD_EXP 55
20866: PUSH
20867: LD_VAR 0 2
20871: ARRAY
20872: NOT
20873: AND
20874: PUSH
20875: LD_EXP 54
20879: PUSH
20880: LD_VAR 0 2
20884: ARRAY
20885: AND
20886: IFFALSE 20924
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
20888: LD_ADDR_EXP 54
20892: PUSH
20893: LD_EXP 54
20897: PPUSH
20898: LD_VAR 0 2
20902: PPUSH
20903: EMPTY
20904: PPUSH
20905: CALL_OW 1
20909: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20910: LD_VAR 0 2
20914: PPUSH
20915: LD_INT 103
20917: PPUSH
20918: CALL 19197 0 2
// continue ;
20922: GO 20833
// end ; if mc_construct_list [ i ] then
20924: LD_EXP 55
20928: PUSH
20929: LD_VAR 0 2
20933: ARRAY
20934: IFFALSE 21154
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
20936: LD_ADDR_VAR 0 4
20940: PUSH
20941: LD_EXP 48
20945: PUSH
20946: LD_VAR 0 2
20950: ARRAY
20951: PPUSH
20952: LD_INT 25
20954: PUSH
20955: LD_INT 2
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: CALL_OW 72
20966: PUSH
20967: LD_EXP 50
20971: PUSH
20972: LD_VAR 0 2
20976: ARRAY
20977: DIFF
20978: ST_TO_ADDR
// if not tmp then
20979: LD_VAR 0 4
20983: NOT
20984: IFFALSE 20988
// continue ;
20986: GO 20833
// for j in tmp do
20988: LD_ADDR_VAR 0 3
20992: PUSH
20993: LD_VAR 0 4
20997: PUSH
20998: FOR_IN
20999: IFFALSE 21150
// begin if not mc_builders [ i ] then
21001: LD_EXP 54
21005: PUSH
21006: LD_VAR 0 2
21010: ARRAY
21011: NOT
21012: IFFALSE 21070
// begin SetTag ( j , 103 ) ;
21014: LD_VAR 0 3
21018: PPUSH
21019: LD_INT 103
21021: PPUSH
21022: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21026: LD_ADDR_EXP 54
21030: PUSH
21031: LD_EXP 54
21035: PPUSH
21036: LD_VAR 0 2
21040: PUSH
21041: LD_EXP 54
21045: PUSH
21046: LD_VAR 0 2
21050: ARRAY
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PPUSH
21060: LD_VAR 0 3
21064: PPUSH
21065: CALL 44342 0 3
21069: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21070: LD_VAR 0 3
21074: PPUSH
21075: CALL_OW 310
21079: IFFALSE 21090
// ComExitBuilding ( j ) ;
21081: LD_VAR 0 3
21085: PPUSH
21086: CALL_OW 122
// wait ( 3 ) ;
21090: LD_INT 3
21092: PPUSH
21093: CALL_OW 67
// if not mc_construct_list [ i ] then
21097: LD_EXP 55
21101: PUSH
21102: LD_VAR 0 2
21106: ARRAY
21107: NOT
21108: IFFALSE 21112
// break ;
21110: GO 21150
// if not HasTask ( j ) then
21112: LD_VAR 0 3
21116: PPUSH
21117: CALL_OW 314
21121: NOT
21122: IFFALSE 21148
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
21124: LD_VAR 0 3
21128: PPUSH
21129: LD_EXP 55
21133: PUSH
21134: LD_VAR 0 2
21138: ARRAY
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL 46748 0 2
// end ;
21148: GO 20998
21150: POP
21151: POP
// end else
21152: GO 21762
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
21154: LD_EXP 53
21158: PUSH
21159: LD_VAR 0 2
21163: ARRAY
21164: PUSH
21165: LD_EXP 48
21169: PUSH
21170: LD_VAR 0 2
21174: ARRAY
21175: PPUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 30
21181: PUSH
21182: LD_INT 0
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 30
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: PPUSH
21204: CALL_OW 72
21208: AND
21209: IFFALSE 21762
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21211: LD_EXP 48
21215: PUSH
21216: LD_VAR 0 2
21220: ARRAY
21221: PPUSH
21222: LD_INT 2
21224: PUSH
21225: LD_INT 30
21227: PUSH
21228: LD_INT 0
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 30
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: PPUSH
21250: CALL_OW 72
21254: PUSH
21255: LD_INT 1
21257: ARRAY
21258: PPUSH
21259: LD_EXP 53
21263: PUSH
21264: LD_VAR 0 2
21268: ARRAY
21269: PUSH
21270: LD_INT 1
21272: ARRAY
21273: PUSH
21274: LD_INT 1
21276: ARRAY
21277: PPUSH
21278: LD_EXP 53
21282: PUSH
21283: LD_VAR 0 2
21287: ARRAY
21288: PUSH
21289: LD_INT 1
21291: ARRAY
21292: PUSH
21293: LD_INT 2
21295: ARRAY
21296: PPUSH
21297: LD_EXP 53
21301: PUSH
21302: LD_VAR 0 2
21306: ARRAY
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PUSH
21312: LD_INT 3
21314: ARRAY
21315: PPUSH
21316: LD_EXP 53
21320: PUSH
21321: LD_VAR 0 2
21325: ARRAY
21326: PUSH
21327: LD_INT 1
21329: ARRAY
21330: PUSH
21331: LD_INT 4
21333: ARRAY
21334: PPUSH
21335: CALL 50980 0 5
21339: IFFALSE 21620
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21341: LD_ADDR_VAR 0 4
21345: PUSH
21346: LD_EXP 48
21350: PUSH
21351: LD_VAR 0 2
21355: ARRAY
21356: PPUSH
21357: LD_INT 25
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PPUSH
21367: CALL_OW 72
21371: PUSH
21372: LD_EXP 50
21376: PUSH
21377: LD_VAR 0 2
21381: ARRAY
21382: DIFF
21383: ST_TO_ADDR
// if not tmp then
21384: LD_VAR 0 4
21388: NOT
21389: IFFALSE 21393
// continue ;
21391: GO 20833
// for j in tmp do
21393: LD_ADDR_VAR 0 3
21397: PUSH
21398: LD_VAR 0 4
21402: PUSH
21403: FOR_IN
21404: IFFALSE 21616
// begin if not mc_builders [ i ] then
21406: LD_EXP 54
21410: PUSH
21411: LD_VAR 0 2
21415: ARRAY
21416: NOT
21417: IFFALSE 21475
// begin SetTag ( j , 103 ) ;
21419: LD_VAR 0 3
21423: PPUSH
21424: LD_INT 103
21426: PPUSH
21427: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21431: LD_ADDR_EXP 54
21435: PUSH
21436: LD_EXP 54
21440: PPUSH
21441: LD_VAR 0 2
21445: PUSH
21446: LD_EXP 54
21450: PUSH
21451: LD_VAR 0 2
21455: ARRAY
21456: PUSH
21457: LD_INT 1
21459: PLUS
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PPUSH
21465: LD_VAR 0 3
21469: PPUSH
21470: CALL 44342 0 3
21474: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21475: LD_VAR 0 3
21479: PPUSH
21480: CALL_OW 310
21484: IFFALSE 21495
// ComExitBuilding ( j ) ;
21486: LD_VAR 0 3
21490: PPUSH
21491: CALL_OW 122
// wait ( 3 ) ;
21495: LD_INT 3
21497: PPUSH
21498: CALL_OW 67
// if not mc_build_list [ i ] then
21502: LD_EXP 53
21506: PUSH
21507: LD_VAR 0 2
21511: ARRAY
21512: NOT
21513: IFFALSE 21517
// break ;
21515: GO 21616
// if not HasTask ( j ) then
21517: LD_VAR 0 3
21521: PPUSH
21522: CALL_OW 314
21526: NOT
21527: IFFALSE 21614
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
21529: LD_VAR 0 3
21533: PPUSH
21534: LD_EXP 53
21538: PUSH
21539: LD_VAR 0 2
21543: ARRAY
21544: PUSH
21545: LD_INT 1
21547: ARRAY
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: PPUSH
21553: LD_EXP 53
21557: PUSH
21558: LD_VAR 0 2
21562: ARRAY
21563: PUSH
21564: LD_INT 1
21566: ARRAY
21567: PUSH
21568: LD_INT 2
21570: ARRAY
21571: PPUSH
21572: LD_EXP 53
21576: PUSH
21577: LD_VAR 0 2
21581: ARRAY
21582: PUSH
21583: LD_INT 1
21585: ARRAY
21586: PUSH
21587: LD_INT 3
21589: ARRAY
21590: PPUSH
21591: LD_EXP 53
21595: PUSH
21596: LD_VAR 0 2
21600: ARRAY
21601: PUSH
21602: LD_INT 1
21604: ARRAY
21605: PUSH
21606: LD_INT 4
21608: ARRAY
21609: PPUSH
21610: CALL_OW 145
// end ;
21614: GO 21403
21616: POP
21617: POP
// end else
21618: GO 21762
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21620: LD_EXP 48
21624: PUSH
21625: LD_VAR 0 2
21629: ARRAY
21630: PPUSH
21631: LD_EXP 53
21635: PUSH
21636: LD_VAR 0 2
21640: ARRAY
21641: PUSH
21642: LD_INT 1
21644: ARRAY
21645: PUSH
21646: LD_INT 1
21648: ARRAY
21649: PPUSH
21650: LD_EXP 53
21654: PUSH
21655: LD_VAR 0 2
21659: ARRAY
21660: PUSH
21661: LD_INT 1
21663: ARRAY
21664: PUSH
21665: LD_INT 2
21667: ARRAY
21668: PPUSH
21669: LD_EXP 53
21673: PUSH
21674: LD_VAR 0 2
21678: ARRAY
21679: PUSH
21680: LD_INT 1
21682: ARRAY
21683: PUSH
21684: LD_INT 3
21686: ARRAY
21687: PPUSH
21688: LD_EXP 53
21692: PUSH
21693: LD_VAR 0 2
21697: ARRAY
21698: PUSH
21699: LD_INT 1
21701: ARRAY
21702: PUSH
21703: LD_INT 4
21705: ARRAY
21706: PPUSH
21707: CALL 50411 0 5
21711: NOT
21712: IFFALSE 21762
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
21714: LD_ADDR_EXP 53
21718: PUSH
21719: LD_EXP 53
21723: PPUSH
21724: LD_VAR 0 2
21728: PPUSH
21729: LD_EXP 53
21733: PUSH
21734: LD_VAR 0 2
21738: ARRAY
21739: PPUSH
21740: LD_INT 1
21742: PPUSH
21743: LD_INT 1
21745: NEG
21746: PPUSH
21747: LD_INT 0
21749: PPUSH
21750: CALL 43325 0 4
21754: PPUSH
21755: CALL_OW 1
21759: ST_TO_ADDR
// continue ;
21760: GO 20833
// end ; end ;
21762: GO 20833
21764: POP
21765: POP
// end ;
21766: LD_VAR 0 1
21770: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
21771: LD_INT 0
21773: PPUSH
21774: PPUSH
21775: PPUSH
21776: PPUSH
21777: PPUSH
21778: PPUSH
// if not mc_bases then
21779: LD_EXP 48
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 22215
// for i = 1 to mc_bases do
21788: LD_ADDR_VAR 0 2
21792: PUSH
21793: DOUBLE
21794: LD_INT 1
21796: DEC
21797: ST_TO_ADDR
21798: LD_EXP 48
21802: PUSH
21803: FOR_TO
21804: IFFALSE 22213
// begin tmp := mc_build_upgrade [ i ] ;
21806: LD_ADDR_VAR 0 4
21810: PUSH
21811: LD_EXP 80
21815: PUSH
21816: LD_VAR 0 2
21820: ARRAY
21821: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
21822: LD_ADDR_VAR 0 6
21826: PUSH
21827: LD_EXP 81
21831: PUSH
21832: LD_VAR 0 2
21836: ARRAY
21837: PPUSH
21838: LD_INT 2
21840: PUSH
21841: LD_INT 30
21843: PUSH
21844: LD_INT 6
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 30
21853: PUSH
21854: LD_INT 7
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: LIST
21865: PPUSH
21866: CALL_OW 72
21870: ST_TO_ADDR
// if not tmp and not lab then
21871: LD_VAR 0 4
21875: NOT
21876: PUSH
21877: LD_VAR 0 6
21881: NOT
21882: AND
21883: IFFALSE 21887
// continue ;
21885: GO 21803
// if tmp then
21887: LD_VAR 0 4
21891: IFFALSE 22011
// for j in tmp do
21893: LD_ADDR_VAR 0 3
21897: PUSH
21898: LD_VAR 0 4
21902: PUSH
21903: FOR_IN
21904: IFFALSE 22009
// begin if UpgradeCost ( j ) then
21906: LD_VAR 0 3
21910: PPUSH
21911: CALL 50071 0 1
21915: IFFALSE 22007
// begin ComUpgrade ( j ) ;
21917: LD_VAR 0 3
21921: PPUSH
21922: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
21926: LD_ADDR_EXP 80
21930: PUSH
21931: LD_EXP 80
21935: PPUSH
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_EXP 80
21945: PUSH
21946: LD_VAR 0 2
21950: ARRAY
21951: PUSH
21952: LD_VAR 0 3
21956: DIFF
21957: PPUSH
21958: CALL_OW 1
21962: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
21963: LD_ADDR_EXP 55
21967: PUSH
21968: LD_EXP 55
21972: PPUSH
21973: LD_VAR 0 2
21977: PUSH
21978: LD_EXP 55
21982: PUSH
21983: LD_VAR 0 2
21987: ARRAY
21988: PUSH
21989: LD_INT 1
21991: PLUS
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: LD_VAR 0 3
22001: PPUSH
22002: CALL 44342 0 3
22006: ST_TO_ADDR
// end ; end ;
22007: GO 21903
22009: POP
22010: POP
// if not lab or not mc_lab_upgrade [ i ] then
22011: LD_VAR 0 6
22015: NOT
22016: PUSH
22017: LD_EXP 82
22021: PUSH
22022: LD_VAR 0 2
22026: ARRAY
22027: NOT
22028: OR
22029: IFFALSE 22033
// continue ;
22031: GO 21803
// for j in lab do
22033: LD_ADDR_VAR 0 3
22037: PUSH
22038: LD_VAR 0 6
22042: PUSH
22043: FOR_IN
22044: IFFALSE 22209
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
22046: LD_VAR 0 3
22050: PPUSH
22051: CALL_OW 266
22055: PUSH
22056: LD_INT 6
22058: PUSH
22059: LD_INT 7
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: IN
22066: PUSH
22067: LD_VAR 0 3
22071: PPUSH
22072: CALL_OW 461
22076: PUSH
22077: LD_INT 1
22079: NONEQUAL
22080: AND
22081: IFFALSE 22207
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
22083: LD_VAR 0 3
22087: PPUSH
22088: LD_EXP 82
22092: PUSH
22093: LD_VAR 0 2
22097: ARRAY
22098: PUSH
22099: LD_INT 1
22101: ARRAY
22102: PPUSH
22103: CALL 50276 0 2
22107: IFFALSE 22207
// begin ComCancel ( j ) ;
22109: LD_VAR 0 3
22113: PPUSH
22114: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
22118: LD_VAR 0 3
22122: PPUSH
22123: LD_EXP 82
22127: PUSH
22128: LD_VAR 0 2
22132: ARRAY
22133: PUSH
22134: LD_INT 1
22136: ARRAY
22137: PPUSH
22138: CALL_OW 207
// if not j in mc_construct_list [ i ] then
22142: LD_VAR 0 3
22146: PUSH
22147: LD_EXP 55
22151: PUSH
22152: LD_VAR 0 2
22156: ARRAY
22157: IN
22158: NOT
22159: IFFALSE 22205
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22161: LD_ADDR_EXP 55
22165: PUSH
22166: LD_EXP 55
22170: PPUSH
22171: LD_VAR 0 2
22175: PUSH
22176: LD_EXP 55
22180: PUSH
22181: LD_VAR 0 2
22185: ARRAY
22186: PUSH
22187: LD_INT 1
22189: PLUS
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PPUSH
22195: LD_VAR 0 3
22199: PPUSH
22200: CALL 44342 0 3
22204: ST_TO_ADDR
// break ;
22205: GO 22209
// end ; end ; end ;
22207: GO 22043
22209: POP
22210: POP
// end ;
22211: GO 21803
22213: POP
22214: POP
// end ;
22215: LD_VAR 0 1
22219: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
22224: PPUSH
22225: PPUSH
22226: PPUSH
22227: PPUSH
22228: PPUSH
// if not mc_bases then
22229: LD_EXP 48
22233: NOT
22234: IFFALSE 22238
// exit ;
22236: GO 22567
// for i = 1 to mc_bases do
22238: LD_ADDR_VAR 0 2
22242: PUSH
22243: DOUBLE
22244: LD_INT 1
22246: DEC
22247: ST_TO_ADDR
22248: LD_EXP 48
22252: PUSH
22253: FOR_TO
22254: IFFALSE 22565
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
22256: LD_EXP 56
22260: PUSH
22261: LD_VAR 0 2
22265: ARRAY
22266: NOT
22267: PUSH
22268: LD_EXP 48
22272: PUSH
22273: LD_VAR 0 2
22277: ARRAY
22278: PPUSH
22279: LD_INT 30
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 72
22293: NOT
22294: OR
22295: IFFALSE 22299
// continue ;
22297: GO 22253
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
22299: LD_EXP 56
22303: PUSH
22304: LD_VAR 0 2
22308: ARRAY
22309: PUSH
22310: LD_INT 1
22312: ARRAY
22313: PPUSH
22314: CALL_OW 269
22318: IFFALSE 22384
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
22320: LD_ADDR_VAR 0 4
22324: PUSH
22325: LD_EXP 56
22329: PUSH
22330: LD_VAR 0 2
22334: ARRAY
22335: PPUSH
22336: LD_INT 1
22338: PPUSH
22339: CALL_OW 3
22343: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
22344: LD_ADDR_EXP 56
22348: PUSH
22349: LD_EXP 56
22353: PPUSH
22354: LD_VAR 0 2
22358: PPUSH
22359: LD_VAR 0 4
22363: PPUSH
22364: CALL_OW 1
22368: ST_TO_ADDR
// if not mc_turret_list [ i ] then
22369: LD_EXP 56
22373: PUSH
22374: LD_VAR 0 2
22378: ARRAY
22379: NOT
22380: IFFALSE 22384
// continue ;
22382: GO 22253
// end ; busy := false ;
22384: LD_ADDR_VAR 0 6
22388: PUSH
22389: LD_INT 0
22391: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_EXP 48
22401: PUSH
22402: LD_VAR 0 2
22406: ARRAY
22407: PPUSH
22408: LD_INT 30
22410: PUSH
22411: LD_INT 3
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PPUSH
22418: CALL_OW 72
22422: ST_TO_ADDR
// for j in tmp do
22423: LD_ADDR_VAR 0 3
22427: PUSH
22428: LD_VAR 0 4
22432: PUSH
22433: FOR_IN
22434: IFFALSE 22462
// if not BuildingStatus ( j ) = bs_idle then
22436: LD_VAR 0 3
22440: PPUSH
22441: CALL_OW 461
22445: PUSH
22446: LD_INT 2
22448: EQUAL
22449: NOT
22450: IFFALSE 22460
// busy := true ;
22452: LD_ADDR_VAR 0 6
22456: PUSH
22457: LD_INT 1
22459: ST_TO_ADDR
22460: GO 22433
22462: POP
22463: POP
// if busy then
22464: LD_VAR 0 6
22468: IFFALSE 22472
// continue ;
22470: GO 22253
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
22472: LD_ADDR_VAR 0 7
22476: PUSH
22477: LD_EXP 56
22481: PUSH
22482: LD_VAR 0 2
22486: ARRAY
22487: PUSH
22488: LD_INT 1
22490: ARRAY
22491: PPUSH
22492: CALL 48635 0 1
22496: ST_TO_ADDR
// if not weapon then
22497: LD_VAR 0 7
22501: NOT
22502: IFFALSE 22506
// continue ;
22504: GO 22253
// if mc_allowed_tower_weapons [ i ] then
22506: LD_EXP 86
22510: PUSH
22511: LD_VAR 0 2
22515: ARRAY
22516: IFFALSE 22539
// if not weapon in mc_allowed_tower_weapons [ i ] then
22518: LD_VAR 0 7
22522: PUSH
22523: LD_EXP 86
22527: PUSH
22528: LD_VAR 0 2
22532: ARRAY
22533: IN
22534: NOT
22535: IFFALSE 22539
// continue ;
22537: GO 22253
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
22539: LD_EXP 56
22543: PUSH
22544: LD_VAR 0 2
22548: ARRAY
22549: PUSH
22550: LD_INT 1
22552: ARRAY
22553: PPUSH
22554: LD_VAR 0 7
22558: PPUSH
22559: CALL_OW 148
// end ;
22563: GO 22253
22565: POP
22566: POP
// end ;
22567: LD_VAR 0 1
22571: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
22572: LD_INT 0
22574: PPUSH
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
// if not mc_bases then
22580: LD_EXP 48
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 23574
// for i = 1 to mc_bases do
22589: LD_ADDR_VAR 0 2
22593: PUSH
22594: DOUBLE
22595: LD_INT 1
22597: DEC
22598: ST_TO_ADDR
22599: LD_EXP 48
22603: PUSH
22604: FOR_TO
22605: IFFALSE 23572
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
22607: LD_EXP 61
22611: PUSH
22612: LD_VAR 0 2
22616: ARRAY
22617: NOT
22618: PUSH
22619: LD_EXP 61
22623: PUSH
22624: LD_VAR 0 2
22628: ARRAY
22629: PUSH
22630: LD_EXP 62
22634: PUSH
22635: LD_VAR 0 2
22639: ARRAY
22640: EQUAL
22641: OR
22642: IFFALSE 22646
// continue ;
22644: GO 22604
// if mc_miners [ i ] then
22646: LD_EXP 62
22650: PUSH
22651: LD_VAR 0 2
22655: ARRAY
22656: IFFALSE 23259
// begin k := 1 ;
22658: LD_ADDR_VAR 0 4
22662: PUSH
22663: LD_INT 1
22665: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
22666: LD_ADDR_VAR 0 3
22670: PUSH
22671: DOUBLE
22672: LD_EXP 62
22676: PUSH
22677: LD_VAR 0 2
22681: ARRAY
22682: INC
22683: ST_TO_ADDR
22684: LD_INT 1
22686: PUSH
22687: FOR_DOWNTO
22688: IFFALSE 23257
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
22690: LD_EXP 62
22694: PUSH
22695: LD_VAR 0 2
22699: ARRAY
22700: PUSH
22701: LD_VAR 0 3
22705: ARRAY
22706: PPUSH
22707: CALL_OW 301
22711: IFFALSE 22774
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
22713: LD_ADDR_VAR 0 5
22717: PUSH
22718: LD_EXP 62
22722: PUSH
22723: LD_VAR 0 2
22727: ARRAY
22728: PUSH
22729: LD_EXP 62
22733: PUSH
22734: LD_VAR 0 2
22738: ARRAY
22739: PUSH
22740: LD_VAR 0 3
22744: ARRAY
22745: DIFF
22746: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
22747: LD_ADDR_EXP 62
22751: PUSH
22752: LD_EXP 62
22756: PPUSH
22757: LD_VAR 0 2
22761: PPUSH
22762: LD_VAR 0 5
22766: PPUSH
22767: CALL_OW 1
22771: ST_TO_ADDR
// continue ;
22772: GO 22687
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
22774: LD_EXP 62
22778: PUSH
22779: LD_VAR 0 2
22783: ARRAY
22784: PUSH
22785: LD_VAR 0 3
22789: ARRAY
22790: PPUSH
22791: CALL 43843 0 1
22795: PUSH
22796: LD_EXP 62
22800: PUSH
22801: LD_VAR 0 2
22805: ARRAY
22806: PUSH
22807: LD_VAR 0 3
22811: ARRAY
22812: PPUSH
22813: CALL_OW 255
22817: PPUSH
22818: LD_EXP 61
22822: PUSH
22823: LD_VAR 0 2
22827: ARRAY
22828: PUSH
22829: LD_VAR 0 4
22833: ARRAY
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PPUSH
22839: LD_EXP 61
22843: PUSH
22844: LD_VAR 0 2
22848: ARRAY
22849: PUSH
22850: LD_VAR 0 4
22854: ARRAY
22855: PUSH
22856: LD_INT 2
22858: ARRAY
22859: PPUSH
22860: LD_INT 15
22862: PPUSH
22863: CALL 44836 0 4
22867: PUSH
22868: LD_INT 4
22870: ARRAY
22871: PUSH
22872: LD_EXP 62
22876: PUSH
22877: LD_VAR 0 2
22881: ARRAY
22882: PUSH
22883: LD_VAR 0 3
22887: ARRAY
22888: PPUSH
22889: LD_INT 10
22891: PPUSH
22892: CALL 46533 0 2
22896: PUSH
22897: LD_INT 4
22899: ARRAY
22900: OR
22901: AND
22902: IFFALSE 22925
// ComStop ( mc_miners [ i ] [ j ] ) ;
22904: LD_EXP 62
22908: PUSH
22909: LD_VAR 0 2
22913: ARRAY
22914: PUSH
22915: LD_VAR 0 3
22919: ARRAY
22920: PPUSH
22921: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
22925: LD_EXP 62
22929: PUSH
22930: LD_VAR 0 2
22934: ARRAY
22935: PUSH
22936: LD_VAR 0 3
22940: ARRAY
22941: PPUSH
22942: CALL_OW 257
22946: PUSH
22947: LD_INT 1
22949: EQUAL
22950: PUSH
22951: LD_EXP 62
22955: PUSH
22956: LD_VAR 0 2
22960: ARRAY
22961: PUSH
22962: LD_VAR 0 3
22966: ARRAY
22967: PPUSH
22968: CALL_OW 459
22972: NOT
22973: AND
22974: PUSH
22975: LD_EXP 62
22979: PUSH
22980: LD_VAR 0 2
22984: ARRAY
22985: PUSH
22986: LD_VAR 0 3
22990: ARRAY
22991: PPUSH
22992: CALL_OW 255
22996: PPUSH
22997: LD_EXP 61
23001: PUSH
23002: LD_VAR 0 2
23006: ARRAY
23007: PUSH
23008: LD_VAR 0 4
23012: ARRAY
23013: PUSH
23014: LD_INT 1
23016: ARRAY
23017: PPUSH
23018: LD_EXP 61
23022: PUSH
23023: LD_VAR 0 2
23027: ARRAY
23028: PUSH
23029: LD_VAR 0 4
23033: ARRAY
23034: PUSH
23035: LD_INT 2
23037: ARRAY
23038: PPUSH
23039: LD_INT 15
23041: PPUSH
23042: CALL 44836 0 4
23046: PUSH
23047: LD_INT 4
23049: ARRAY
23050: PUSH
23051: LD_INT 0
23053: EQUAL
23054: AND
23055: PUSH
23056: LD_EXP 62
23060: PUSH
23061: LD_VAR 0 2
23065: ARRAY
23066: PUSH
23067: LD_VAR 0 3
23071: ARRAY
23072: PPUSH
23073: CALL_OW 314
23077: NOT
23078: AND
23079: IFFALSE 23255
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
23081: LD_EXP 62
23085: PUSH
23086: LD_VAR 0 2
23090: ARRAY
23091: PUSH
23092: LD_VAR 0 3
23096: ARRAY
23097: PPUSH
23098: CALL_OW 310
23102: IFFALSE 23125
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
23104: LD_EXP 62
23108: PUSH
23109: LD_VAR 0 2
23113: ARRAY
23114: PUSH
23115: LD_VAR 0 3
23119: ARRAY
23120: PPUSH
23121: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
23125: LD_EXP 62
23129: PUSH
23130: LD_VAR 0 2
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 3
23140: ARRAY
23141: PPUSH
23142: CALL_OW 314
23146: NOT
23147: IFFALSE 23215
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
23149: LD_EXP 62
23153: PUSH
23154: LD_VAR 0 2
23158: ARRAY
23159: PUSH
23160: LD_VAR 0 3
23164: ARRAY
23165: PPUSH
23166: LD_EXP 61
23170: PUSH
23171: LD_VAR 0 2
23175: ARRAY
23176: PUSH
23177: LD_VAR 0 4
23181: ARRAY
23182: PUSH
23183: LD_INT 1
23185: ARRAY
23186: PPUSH
23187: LD_EXP 61
23191: PUSH
23192: LD_VAR 0 2
23196: ARRAY
23197: PUSH
23198: LD_VAR 0 4
23202: ARRAY
23203: PUSH
23204: LD_INT 2
23206: ARRAY
23207: PPUSH
23208: LD_INT 0
23210: PPUSH
23211: CALL_OW 193
// k := k + 1 ;
23215: LD_ADDR_VAR 0 4
23219: PUSH
23220: LD_VAR 0 4
23224: PUSH
23225: LD_INT 1
23227: PLUS
23228: ST_TO_ADDR
// if k > mc_mines [ i ] then
23229: LD_VAR 0 4
23233: PUSH
23234: LD_EXP 61
23238: PUSH
23239: LD_VAR 0 2
23243: ARRAY
23244: GREATER
23245: IFFALSE 23255
// k := 1 ;
23247: LD_ADDR_VAR 0 4
23251: PUSH
23252: LD_INT 1
23254: ST_TO_ADDR
// end ; end ;
23255: GO 22687
23257: POP
23258: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
23259: LD_ADDR_VAR 0 5
23263: PUSH
23264: LD_EXP 48
23268: PUSH
23269: LD_VAR 0 2
23273: ARRAY
23274: PPUSH
23275: LD_INT 2
23277: PUSH
23278: LD_INT 30
23280: PUSH
23281: LD_INT 4
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 30
23290: PUSH
23291: LD_INT 5
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 30
23300: PUSH
23301: LD_INT 32
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: PPUSH
23314: CALL_OW 72
23318: ST_TO_ADDR
// if not tmp then
23319: LD_VAR 0 5
23323: NOT
23324: IFFALSE 23328
// continue ;
23326: GO 22604
// list := [ ] ;
23328: LD_ADDR_VAR 0 6
23332: PUSH
23333: EMPTY
23334: ST_TO_ADDR
// for j in tmp do
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: LD_VAR 0 5
23344: PUSH
23345: FOR_IN
23346: IFFALSE 23415
// begin for k in UnitsInside ( j ) do
23348: LD_ADDR_VAR 0 4
23352: PUSH
23353: LD_VAR 0 3
23357: PPUSH
23358: CALL_OW 313
23362: PUSH
23363: FOR_IN
23364: IFFALSE 23411
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
23366: LD_VAR 0 4
23370: PPUSH
23371: CALL_OW 257
23375: PUSH
23376: LD_INT 1
23378: EQUAL
23379: PUSH
23380: LD_VAR 0 4
23384: PPUSH
23385: CALL_OW 459
23389: NOT
23390: AND
23391: IFFALSE 23409
// list := list ^ k ;
23393: LD_ADDR_VAR 0 6
23397: PUSH
23398: LD_VAR 0 6
23402: PUSH
23403: LD_VAR 0 4
23407: ADD
23408: ST_TO_ADDR
23409: GO 23363
23411: POP
23412: POP
// end ;
23413: GO 23345
23415: POP
23416: POP
// list := list diff mc_miners [ i ] ;
23417: LD_ADDR_VAR 0 6
23421: PUSH
23422: LD_VAR 0 6
23426: PUSH
23427: LD_EXP 62
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: DIFF
23438: ST_TO_ADDR
// if not list then
23439: LD_VAR 0 6
23443: NOT
23444: IFFALSE 23448
// continue ;
23446: GO 22604
// k := mc_mines [ i ] - mc_miners [ i ] ;
23448: LD_ADDR_VAR 0 4
23452: PUSH
23453: LD_EXP 61
23457: PUSH
23458: LD_VAR 0 2
23462: ARRAY
23463: PUSH
23464: LD_EXP 62
23468: PUSH
23469: LD_VAR 0 2
23473: ARRAY
23474: MINUS
23475: ST_TO_ADDR
// if k > list then
23476: LD_VAR 0 4
23480: PUSH
23481: LD_VAR 0 6
23485: GREATER
23486: IFFALSE 23498
// k := list ;
23488: LD_ADDR_VAR 0 4
23492: PUSH
23493: LD_VAR 0 6
23497: ST_TO_ADDR
// for j = 1 to k do
23498: LD_ADDR_VAR 0 3
23502: PUSH
23503: DOUBLE
23504: LD_INT 1
23506: DEC
23507: ST_TO_ADDR
23508: LD_VAR 0 4
23512: PUSH
23513: FOR_TO
23514: IFFALSE 23568
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
23516: LD_ADDR_EXP 62
23520: PUSH
23521: LD_EXP 62
23525: PPUSH
23526: LD_VAR 0 2
23530: PUSH
23531: LD_EXP 62
23535: PUSH
23536: LD_VAR 0 2
23540: ARRAY
23541: PUSH
23542: LD_INT 1
23544: PLUS
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PPUSH
23550: LD_VAR 0 6
23554: PUSH
23555: LD_VAR 0 3
23559: ARRAY
23560: PPUSH
23561: CALL 44342 0 3
23565: ST_TO_ADDR
23566: GO 23513
23568: POP
23569: POP
// end ;
23570: GO 22604
23572: POP
23573: POP
// end ;
23574: LD_VAR 0 1
23578: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
23579: LD_INT 0
23581: PPUSH
23582: PPUSH
23583: PPUSH
23584: PPUSH
23585: PPUSH
23586: PPUSH
23587: PPUSH
23588: PPUSH
23589: PPUSH
// if not mc_bases then
23590: LD_EXP 48
23594: NOT
23595: IFFALSE 23599
// exit ;
23597: GO 25078
// for i = 1 to mc_bases do
23599: LD_ADDR_VAR 0 2
23603: PUSH
23604: DOUBLE
23605: LD_INT 1
23607: DEC
23608: ST_TO_ADDR
23609: LD_EXP 48
23613: PUSH
23614: FOR_TO
23615: IFFALSE 25076
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
23617: LD_EXP 48
23621: PUSH
23622: LD_VAR 0 2
23626: ARRAY
23627: NOT
23628: PUSH
23629: LD_EXP 55
23633: PUSH
23634: LD_VAR 0 2
23638: ARRAY
23639: OR
23640: IFFALSE 23644
// continue ;
23642: GO 23614
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
23644: LD_EXP 64
23648: PUSH
23649: LD_VAR 0 2
23653: ARRAY
23654: NOT
23655: PUSH
23656: LD_EXP 65
23660: PUSH
23661: LD_VAR 0 2
23665: ARRAY
23666: AND
23667: IFFALSE 23705
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23669: LD_ADDR_EXP 65
23673: PUSH
23674: LD_EXP 65
23678: PPUSH
23679: LD_VAR 0 2
23683: PPUSH
23684: EMPTY
23685: PPUSH
23686: CALL_OW 1
23690: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_INT 107
23698: PPUSH
23699: CALL 19197 0 2
// continue ;
23703: GO 23614
// end ; target := [ ] ;
23705: LD_ADDR_VAR 0 5
23709: PUSH
23710: EMPTY
23711: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: DOUBLE
23718: LD_EXP 64
23722: PUSH
23723: LD_VAR 0 2
23727: ARRAY
23728: INC
23729: ST_TO_ADDR
23730: LD_INT 1
23732: PUSH
23733: FOR_DOWNTO
23734: IFFALSE 23994
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
23736: LD_EXP 64
23740: PUSH
23741: LD_VAR 0 2
23745: ARRAY
23746: PUSH
23747: LD_VAR 0 3
23751: ARRAY
23752: PUSH
23753: LD_INT 2
23755: ARRAY
23756: PPUSH
23757: LD_EXP 64
23761: PUSH
23762: LD_VAR 0 2
23766: ARRAY
23767: PUSH
23768: LD_VAR 0 3
23772: ARRAY
23773: PUSH
23774: LD_INT 3
23776: ARRAY
23777: PPUSH
23778: CALL_OW 488
23782: PUSH
23783: LD_EXP 64
23787: PUSH
23788: LD_VAR 0 2
23792: ARRAY
23793: PUSH
23794: LD_VAR 0 3
23798: ARRAY
23799: PUSH
23800: LD_INT 2
23802: ARRAY
23803: PPUSH
23804: LD_EXP 64
23808: PUSH
23809: LD_VAR 0 2
23813: ARRAY
23814: PUSH
23815: LD_VAR 0 3
23819: ARRAY
23820: PUSH
23821: LD_INT 3
23823: ARRAY
23824: PPUSH
23825: CALL_OW 284
23829: PUSH
23830: LD_INT 0
23832: EQUAL
23833: AND
23834: IFFALSE 23889
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
23836: LD_ADDR_VAR 0 4
23840: PUSH
23841: LD_EXP 64
23845: PUSH
23846: LD_VAR 0 2
23850: ARRAY
23851: PPUSH
23852: LD_VAR 0 3
23856: PPUSH
23857: CALL_OW 3
23861: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
23862: LD_ADDR_EXP 64
23866: PUSH
23867: LD_EXP 64
23871: PPUSH
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_VAR 0 4
23881: PPUSH
23882: CALL_OW 1
23886: ST_TO_ADDR
// continue ;
23887: GO 23733
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
23889: LD_EXP 48
23893: PUSH
23894: LD_VAR 0 2
23898: ARRAY
23899: PUSH
23900: LD_INT 1
23902: ARRAY
23903: PPUSH
23904: CALL_OW 255
23908: PPUSH
23909: LD_EXP 64
23913: PUSH
23914: LD_VAR 0 2
23918: ARRAY
23919: PUSH
23920: LD_VAR 0 3
23924: ARRAY
23925: PUSH
23926: LD_INT 2
23928: ARRAY
23929: PPUSH
23930: LD_EXP 64
23934: PUSH
23935: LD_VAR 0 2
23939: ARRAY
23940: PUSH
23941: LD_VAR 0 3
23945: ARRAY
23946: PUSH
23947: LD_INT 3
23949: ARRAY
23950: PPUSH
23951: LD_INT 20
23953: PPUSH
23954: CALL 44836 0 4
23958: PUSH
23959: LD_INT 4
23961: ARRAY
23962: PUSH
23963: LD_INT 0
23965: EQUAL
23966: IFFALSE 23992
// begin target := mc_crates [ i ] [ j ] ;
23968: LD_ADDR_VAR 0 5
23972: PUSH
23973: LD_EXP 64
23977: PUSH
23978: LD_VAR 0 2
23982: ARRAY
23983: PUSH
23984: LD_VAR 0 3
23988: ARRAY
23989: ST_TO_ADDR
// break ;
23990: GO 23994
// end ; end ;
23992: GO 23733
23994: POP
23995: POP
// if not target then
23996: LD_VAR 0 5
24000: NOT
24001: IFFALSE 24005
// continue ;
24003: GO 23614
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
24005: LD_ADDR_VAR 0 6
24009: PUSH
24010: LD_EXP 67
24014: PUSH
24015: LD_VAR 0 2
24019: ARRAY
24020: PPUSH
24021: LD_INT 2
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: LD_INT 58
24029: PUSH
24030: EMPTY
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 61
24039: PUSH
24040: EMPTY
24041: LIST
24042: PUSH
24043: LD_INT 33
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 33
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: LD_INT 34
24075: PUSH
24076: LD_INT 32
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 34
24085: PUSH
24086: LD_INT 51
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: LD_INT 12
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PPUSH
24113: CALL_OW 72
24117: ST_TO_ADDR
// if not cargo then
24118: LD_VAR 0 6
24122: NOT
24123: IFFALSE 24611
// begin if mc_crates_collector [ i ] < 5 then
24125: LD_EXP 65
24129: PUSH
24130: LD_VAR 0 2
24134: ARRAY
24135: PUSH
24136: LD_INT 5
24138: LESS
24139: IFFALSE 24425
// begin if mc_ape [ i ] then
24141: LD_EXP 77
24145: PUSH
24146: LD_VAR 0 2
24150: ARRAY
24151: IFFALSE 24198
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 77
24162: PUSH
24163: LD_VAR 0 2
24167: ARRAY
24168: PPUSH
24169: LD_INT 25
24171: PUSH
24172: LD_INT 16
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 24
24181: PUSH
24182: LD_INT 750
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 72
24197: ST_TO_ADDR
// if not tmp then
24198: LD_VAR 0 4
24202: NOT
24203: IFFALSE 24252
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_EXP 48
24214: PUSH
24215: LD_VAR 0 2
24219: ARRAY
24220: PPUSH
24221: LD_INT 25
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 24
24233: PUSH
24234: LD_INT 750
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PPUSH
24245: CALL_OW 72
24249: ST_TO_ADDR
24250: GO 24313
// if tmp < 5 then
24252: LD_VAR 0 4
24256: PUSH
24257: LD_INT 5
24259: LESS
24260: IFFALSE 24313
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
24262: LD_ADDR_VAR 0 4
24266: PUSH
24267: LD_VAR 0 4
24271: PUSH
24272: LD_EXP 48
24276: PUSH
24277: LD_VAR 0 2
24281: ARRAY
24282: PPUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 24
24295: PUSH
24296: LD_INT 750
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 72
24311: UNION
24312: ST_TO_ADDR
// if not tmp then
24313: LD_VAR 0 4
24317: NOT
24318: IFFALSE 24322
// continue ;
24320: GO 23614
// for j in tmp do
24322: LD_ADDR_VAR 0 3
24326: PUSH
24327: LD_VAR 0 4
24331: PUSH
24332: FOR_IN
24333: IFFALSE 24423
// if not GetTag ( j ) then
24335: LD_VAR 0 3
24339: PPUSH
24340: CALL_OW 110
24344: NOT
24345: IFFALSE 24421
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
24347: LD_ADDR_EXP 65
24351: PUSH
24352: LD_EXP 65
24356: PPUSH
24357: LD_VAR 0 2
24361: PUSH
24362: LD_EXP 65
24366: PUSH
24367: LD_VAR 0 2
24371: ARRAY
24372: PUSH
24373: LD_INT 1
24375: PLUS
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PPUSH
24381: LD_VAR 0 3
24385: PPUSH
24386: CALL 44342 0 3
24390: ST_TO_ADDR
// SetTag ( j , 107 ) ;
24391: LD_VAR 0 3
24395: PPUSH
24396: LD_INT 107
24398: PPUSH
24399: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
24403: LD_EXP 65
24407: PUSH
24408: LD_VAR 0 2
24412: ARRAY
24413: PUSH
24414: LD_INT 5
24416: GREATEREQUAL
24417: IFFALSE 24421
// break ;
24419: GO 24423
// end ;
24421: GO 24332
24423: POP
24424: POP
// end ; if mc_crates_collector [ i ] and target then
24425: LD_EXP 65
24429: PUSH
24430: LD_VAR 0 2
24434: ARRAY
24435: PUSH
24436: LD_VAR 0 5
24440: AND
24441: IFFALSE 24609
// begin if mc_crates_collector [ i ] < target [ 1 ] then
24443: LD_EXP 65
24447: PUSH
24448: LD_VAR 0 2
24452: ARRAY
24453: PUSH
24454: LD_VAR 0 5
24458: PUSH
24459: LD_INT 1
24461: ARRAY
24462: LESS
24463: IFFALSE 24483
// tmp := mc_crates_collector [ i ] else
24465: LD_ADDR_VAR 0 4
24469: PUSH
24470: LD_EXP 65
24474: PUSH
24475: LD_VAR 0 2
24479: ARRAY
24480: ST_TO_ADDR
24481: GO 24497
// tmp := target [ 1 ] ;
24483: LD_ADDR_VAR 0 4
24487: PUSH
24488: LD_VAR 0 5
24492: PUSH
24493: LD_INT 1
24495: ARRAY
24496: ST_TO_ADDR
// for j = 1 to tmp do
24497: LD_ADDR_VAR 0 3
24501: PUSH
24502: DOUBLE
24503: LD_INT 1
24505: DEC
24506: ST_TO_ADDR
24507: LD_VAR 0 4
24511: PUSH
24512: FOR_TO
24513: IFFALSE 24607
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
24515: LD_EXP 65
24519: PUSH
24520: LD_VAR 0 2
24524: ARRAY
24525: PUSH
24526: LD_VAR 0 3
24530: ARRAY
24531: PPUSH
24532: CALL_OW 310
24536: IFFALSE 24559
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
24538: LD_EXP 65
24542: PUSH
24543: LD_VAR 0 2
24547: ARRAY
24548: PUSH
24549: LD_VAR 0 3
24553: ARRAY
24554: PPUSH
24555: CALL_OW 122
// wait ( 3 ) ;
24559: LD_INT 3
24561: PPUSH
24562: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
24566: LD_EXP 65
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: PUSH
24577: LD_VAR 0 3
24581: ARRAY
24582: PPUSH
24583: LD_VAR 0 5
24587: PUSH
24588: LD_INT 2
24590: ARRAY
24591: PPUSH
24592: LD_VAR 0 5
24596: PUSH
24597: LD_INT 3
24599: ARRAY
24600: PPUSH
24601: CALL_OW 117
// end ;
24605: GO 24512
24607: POP
24608: POP
// end ; end else
24609: GO 25074
// begin for j in cargo do
24611: LD_ADDR_VAR 0 3
24615: PUSH
24616: LD_VAR 0 6
24620: PUSH
24621: FOR_IN
24622: IFFALSE 25072
// begin if GetTag ( j ) <> 0 then
24624: LD_VAR 0 3
24628: PPUSH
24629: CALL_OW 110
24633: PUSH
24634: LD_INT 0
24636: NONEQUAL
24637: IFFALSE 24641
// continue ;
24639: GO 24621
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
24641: LD_VAR 0 3
24645: PPUSH
24646: CALL_OW 262
24650: PUSH
24651: LD_INT 2
24653: EQUAL
24654: PUSH
24655: LD_VAR 0 3
24659: PPUSH
24660: CALL_OW 261
24664: PUSH
24665: LD_INT 15
24667: LESS
24668: AND
24669: IFFALSE 24673
// continue ;
24671: GO 24621
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
24673: LD_VAR 0 3
24677: PPUSH
24678: CALL_OW 262
24682: PUSH
24683: LD_INT 1
24685: EQUAL
24686: PUSH
24687: LD_VAR 0 3
24691: PPUSH
24692: CALL_OW 261
24696: PUSH
24697: LD_INT 10
24699: LESS
24700: AND
24701: IFFALSE 25011
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24703: LD_ADDR_VAR 0 7
24707: PUSH
24708: LD_EXP 48
24712: PUSH
24713: LD_VAR 0 2
24717: ARRAY
24718: PPUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 30
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 30
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: PPUSH
24747: CALL_OW 72
24751: ST_TO_ADDR
// if not depot then
24752: LD_VAR 0 7
24756: NOT
24757: IFFALSE 24761
// continue ;
24759: GO 24621
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
24761: LD_VAR 0 3
24765: PPUSH
24766: LD_VAR 0 7
24770: PPUSH
24771: LD_VAR 0 3
24775: PPUSH
24776: CALL_OW 74
24780: PPUSH
24781: CALL_OW 296
24785: PUSH
24786: LD_INT 6
24788: LESS
24789: IFFALSE 24805
// SetFuel ( j , 100 ) else
24791: LD_VAR 0 3
24795: PPUSH
24796: LD_INT 100
24798: PPUSH
24799: CALL_OW 240
24803: GO 25011
// if GetFuel ( j ) = 0 then
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 261
24814: PUSH
24815: LD_INT 0
24817: EQUAL
24818: IFFALSE 25011
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
24820: LD_ADDR_EXP 67
24824: PUSH
24825: LD_EXP 67
24829: PPUSH
24830: LD_VAR 0 2
24834: PPUSH
24835: LD_EXP 67
24839: PUSH
24840: LD_VAR 0 2
24844: ARRAY
24845: PUSH
24846: LD_VAR 0 3
24850: DIFF
24851: PPUSH
24852: CALL_OW 1
24856: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
24857: LD_VAR 0 3
24861: PPUSH
24862: CALL_OW 263
24866: PUSH
24867: LD_INT 1
24869: EQUAL
24870: IFFALSE 24886
// ComExitVehicle ( IsInUnit ( j ) ) ;
24872: LD_VAR 0 3
24876: PPUSH
24877: CALL_OW 310
24881: PPUSH
24882: CALL_OW 121
// if GetControl ( j ) = control_remote then
24886: LD_VAR 0 3
24890: PPUSH
24891: CALL_OW 263
24895: PUSH
24896: LD_INT 2
24898: EQUAL
24899: IFFALSE 24910
// ComUnlink ( j ) ;
24901: LD_VAR 0 3
24905: PPUSH
24906: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
24910: LD_ADDR_VAR 0 8
24914: PUSH
24915: LD_VAR 0 2
24919: PPUSH
24920: LD_INT 3
24922: PPUSH
24923: CALL 32707 0 2
24927: ST_TO_ADDR
// if fac then
24928: LD_VAR 0 8
24932: IFFALSE 25009
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
24934: LD_ADDR_VAR 0 9
24938: PUSH
24939: LD_VAR 0 8
24943: PPUSH
24944: LD_VAR 0 3
24948: PPUSH
24949: CALL_OW 265
24953: PPUSH
24954: LD_VAR 0 3
24958: PPUSH
24959: CALL_OW 262
24963: PPUSH
24964: LD_VAR 0 3
24968: PPUSH
24969: CALL_OW 263
24973: PPUSH
24974: LD_VAR 0 3
24978: PPUSH
24979: CALL_OW 264
24983: PPUSH
24984: CALL 41507 0 5
24988: ST_TO_ADDR
// if components then
24989: LD_VAR 0 9
24993: IFFALSE 25009
// MC_InsertProduceList ( i , components ) ;
24995: LD_VAR 0 2
24999: PPUSH
25000: LD_VAR 0 9
25004: PPUSH
25005: CALL 32274 0 2
// end ; continue ;
25009: GO 24621
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
25011: LD_VAR 0 3
25015: PPUSH
25016: LD_INT 1
25018: PPUSH
25019: CALL_OW 289
25023: PUSH
25024: LD_INT 100
25026: LESS
25027: PUSH
25028: LD_VAR 0 3
25032: PPUSH
25033: CALL_OW 314
25037: NOT
25038: AND
25039: IFFALSE 25068
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
25041: LD_VAR 0 3
25045: PPUSH
25046: LD_VAR 0 5
25050: PUSH
25051: LD_INT 2
25053: ARRAY
25054: PPUSH
25055: LD_VAR 0 5
25059: PUSH
25060: LD_INT 3
25062: ARRAY
25063: PPUSH
25064: CALL_OW 117
// break ;
25068: GO 25072
// end ;
25070: GO 24621
25072: POP
25073: POP
// end ; end ;
25074: GO 23614
25076: POP
25077: POP
// end ;
25078: LD_VAR 0 1
25082: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
25088: PPUSH
// if not mc_bases then
25089: LD_EXP 48
25093: NOT
25094: IFFALSE 25098
// exit ;
25096: GO 25259
// for i = 1 to mc_bases do
25098: LD_ADDR_VAR 0 2
25102: PUSH
25103: DOUBLE
25104: LD_INT 1
25106: DEC
25107: ST_TO_ADDR
25108: LD_EXP 48
25112: PUSH
25113: FOR_TO
25114: IFFALSE 25257
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
25116: LD_ADDR_VAR 0 4
25120: PUSH
25121: LD_EXP 67
25125: PUSH
25126: LD_VAR 0 2
25130: ARRAY
25131: PUSH
25132: LD_EXP 70
25136: PUSH
25137: LD_VAR 0 2
25141: ARRAY
25142: ADD
25143: PPUSH
25144: LD_INT 33
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PPUSH
25154: CALL_OW 72
25158: ST_TO_ADDR
// if tmp then
25159: LD_VAR 0 4
25163: IFFALSE 25255
// for j in tmp do
25165: LD_ADDR_VAR 0 3
25169: PUSH
25170: LD_VAR 0 4
25174: PUSH
25175: FOR_IN
25176: IFFALSE 25253
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
25178: LD_VAR 0 3
25182: PPUSH
25183: CALL_OW 312
25187: NOT
25188: PUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: CALL_OW 256
25198: PUSH
25199: LD_INT 250
25201: GREATEREQUAL
25202: AND
25203: IFFALSE 25216
// Connect ( j ) else
25205: LD_VAR 0 3
25209: PPUSH
25210: CALL 46830 0 1
25214: GO 25251
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
25216: LD_VAR 0 3
25220: PPUSH
25221: CALL_OW 256
25225: PUSH
25226: LD_INT 250
25228: LESS
25229: PUSH
25230: LD_VAR 0 3
25234: PPUSH
25235: CALL_OW 312
25239: AND
25240: IFFALSE 25251
// ComUnlink ( j ) ;
25242: LD_VAR 0 3
25246: PPUSH
25247: CALL_OW 136
25251: GO 25175
25253: POP
25254: POP
// end ;
25255: GO 25113
25257: POP
25258: POP
// end ;
25259: LD_VAR 0 1
25263: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
25264: LD_INT 0
25266: PPUSH
25267: PPUSH
25268: PPUSH
25269: PPUSH
25270: PPUSH
// if not mc_bases then
25271: LD_EXP 48
25275: NOT
25276: IFFALSE 25280
// exit ;
25278: GO 25740
// for i = 1 to mc_bases do
25280: LD_ADDR_VAR 0 2
25284: PUSH
25285: DOUBLE
25286: LD_INT 1
25288: DEC
25289: ST_TO_ADDR
25290: LD_EXP 48
25294: PUSH
25295: FOR_TO
25296: IFFALSE 25738
// begin if not mc_produce [ i ] then
25298: LD_EXP 69
25302: PUSH
25303: LD_VAR 0 2
25307: ARRAY
25308: NOT
25309: IFFALSE 25313
// continue ;
25311: GO 25295
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
25313: LD_ADDR_VAR 0 5
25317: PUSH
25318: LD_EXP 48
25322: PUSH
25323: LD_VAR 0 2
25327: ARRAY
25328: PPUSH
25329: LD_INT 30
25331: PUSH
25332: LD_INT 3
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PPUSH
25339: CALL_OW 72
25343: ST_TO_ADDR
// if not fac then
25344: LD_VAR 0 5
25348: NOT
25349: IFFALSE 25353
// continue ;
25351: GO 25295
// for j in fac do
25353: LD_ADDR_VAR 0 3
25357: PUSH
25358: LD_VAR 0 5
25362: PUSH
25363: FOR_IN
25364: IFFALSE 25734
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
25366: LD_VAR 0 3
25370: PPUSH
25371: CALL_OW 461
25375: PUSH
25376: LD_INT 2
25378: NONEQUAL
25379: PUSH
25380: LD_VAR 0 3
25384: PPUSH
25385: LD_INT 15
25387: PPUSH
25388: CALL 46533 0 2
25392: PUSH
25393: LD_INT 4
25395: ARRAY
25396: OR
25397: PUSH
25398: LD_VAR 0 3
25402: PPUSH
25403: CALL_OW 313
25407: PUSH
25408: LD_INT 0
25410: EQUAL
25411: OR
25412: IFFALSE 25416
// continue ;
25414: GO 25363
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
25416: LD_VAR 0 3
25420: PPUSH
25421: LD_EXP 69
25425: PUSH
25426: LD_VAR 0 2
25430: ARRAY
25431: PUSH
25432: LD_INT 1
25434: ARRAY
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: LD_EXP 69
25444: PUSH
25445: LD_VAR 0 2
25449: ARRAY
25450: PUSH
25451: LD_INT 1
25453: ARRAY
25454: PUSH
25455: LD_INT 2
25457: ARRAY
25458: PPUSH
25459: LD_EXP 69
25463: PUSH
25464: LD_VAR 0 2
25468: ARRAY
25469: PUSH
25470: LD_INT 1
25472: ARRAY
25473: PUSH
25474: LD_INT 3
25476: ARRAY
25477: PPUSH
25478: LD_EXP 69
25482: PUSH
25483: LD_VAR 0 2
25487: ARRAY
25488: PUSH
25489: LD_INT 1
25491: ARRAY
25492: PUSH
25493: LD_INT 4
25495: ARRAY
25496: PPUSH
25497: CALL_OW 448
25501: PUSH
25502: LD_VAR 0 3
25506: PPUSH
25507: LD_EXP 69
25511: PUSH
25512: LD_VAR 0 2
25516: ARRAY
25517: PUSH
25518: LD_INT 1
25520: ARRAY
25521: PUSH
25522: LD_INT 1
25524: ARRAY
25525: PUSH
25526: LD_EXP 69
25530: PUSH
25531: LD_VAR 0 2
25535: ARRAY
25536: PUSH
25537: LD_INT 1
25539: ARRAY
25540: PUSH
25541: LD_INT 2
25543: ARRAY
25544: PUSH
25545: LD_EXP 69
25549: PUSH
25550: LD_VAR 0 2
25554: ARRAY
25555: PUSH
25556: LD_INT 1
25558: ARRAY
25559: PUSH
25560: LD_INT 3
25562: ARRAY
25563: PUSH
25564: LD_EXP 69
25568: PUSH
25569: LD_VAR 0 2
25573: ARRAY
25574: PUSH
25575: LD_INT 1
25577: ARRAY
25578: PUSH
25579: LD_INT 4
25581: ARRAY
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: PPUSH
25589: CALL 49924 0 2
25593: AND
25594: IFFALSE 25732
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
25596: LD_VAR 0 3
25600: PPUSH
25601: LD_EXP 69
25605: PUSH
25606: LD_VAR 0 2
25610: ARRAY
25611: PUSH
25612: LD_INT 1
25614: ARRAY
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: PPUSH
25620: LD_EXP 69
25624: PUSH
25625: LD_VAR 0 2
25629: ARRAY
25630: PUSH
25631: LD_INT 1
25633: ARRAY
25634: PUSH
25635: LD_INT 2
25637: ARRAY
25638: PPUSH
25639: LD_EXP 69
25643: PUSH
25644: LD_VAR 0 2
25648: ARRAY
25649: PUSH
25650: LD_INT 1
25652: ARRAY
25653: PUSH
25654: LD_INT 3
25656: ARRAY
25657: PPUSH
25658: LD_EXP 69
25662: PUSH
25663: LD_VAR 0 2
25667: ARRAY
25668: PUSH
25669: LD_INT 1
25671: ARRAY
25672: PUSH
25673: LD_INT 4
25675: ARRAY
25676: PPUSH
25677: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
25681: LD_ADDR_VAR 0 4
25685: PUSH
25686: LD_EXP 69
25690: PUSH
25691: LD_VAR 0 2
25695: ARRAY
25696: PPUSH
25697: LD_INT 1
25699: PPUSH
25700: CALL_OW 3
25704: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
25705: LD_ADDR_EXP 69
25709: PUSH
25710: LD_EXP 69
25714: PPUSH
25715: LD_VAR 0 2
25719: PPUSH
25720: LD_VAR 0 4
25724: PPUSH
25725: CALL_OW 1
25729: ST_TO_ADDR
// break ;
25730: GO 25734
// end ; end ;
25732: GO 25363
25734: POP
25735: POP
// end ;
25736: GO 25295
25738: POP
25739: POP
// end ;
25740: LD_VAR 0 1
25744: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
25745: LD_INT 0
25747: PPUSH
25748: PPUSH
25749: PPUSH
// if not mc_bases then
25750: LD_EXP 48
25754: NOT
25755: IFFALSE 25759
// exit ;
25757: GO 25848
// for i = 1 to mc_bases do
25759: LD_ADDR_VAR 0 2
25763: PUSH
25764: DOUBLE
25765: LD_INT 1
25767: DEC
25768: ST_TO_ADDR
25769: LD_EXP 48
25773: PUSH
25774: FOR_TO
25775: IFFALSE 25846
// begin if mc_attack [ i ] then
25777: LD_EXP 68
25781: PUSH
25782: LD_VAR 0 2
25786: ARRAY
25787: IFFALSE 25844
// begin tmp := mc_attack [ i ] [ 1 ] ;
25789: LD_ADDR_VAR 0 3
25793: PUSH
25794: LD_EXP 68
25798: PUSH
25799: LD_VAR 0 2
25803: ARRAY
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25809: LD_ADDR_EXP 68
25813: PUSH
25814: LD_EXP 68
25818: PPUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: EMPTY
25825: PPUSH
25826: CALL_OW 1
25830: ST_TO_ADDR
// Attack ( tmp ) ;
25831: LD_VAR 0 3
25835: PPUSH
25836: CALL 71856 0 1
// exit ;
25840: POP
25841: POP
25842: GO 25848
// end ; end ;
25844: GO 25774
25846: POP
25847: POP
// end ;
25848: LD_VAR 0 1
25852: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
25859: PPUSH
25860: PPUSH
25861: PPUSH
// if not mc_bases then
25862: LD_EXP 48
25866: NOT
25867: IFFALSE 25871
// exit ;
25869: GO 26246
// for i = 1 to mc_bases do
25871: LD_ADDR_VAR 0 2
25875: PUSH
25876: DOUBLE
25877: LD_INT 1
25879: DEC
25880: ST_TO_ADDR
25881: LD_EXP 48
25885: PUSH
25886: FOR_TO
25887: IFFALSE 26244
// begin if not mc_bases [ i ] then
25889: LD_EXP 48
25893: PUSH
25894: LD_VAR 0 2
25898: ARRAY
25899: NOT
25900: IFFALSE 25904
// continue ;
25902: GO 25886
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
25904: LD_ADDR_VAR 0 7
25908: PUSH
25909: LD_EXP 48
25913: PUSH
25914: LD_VAR 0 2
25918: ARRAY
25919: PUSH
25920: LD_INT 1
25922: ARRAY
25923: PPUSH
25924: CALL 40847 0 1
25928: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
25929: LD_ADDR_EXP 71
25933: PUSH
25934: LD_EXP 71
25938: PPUSH
25939: LD_VAR 0 2
25943: PPUSH
25944: LD_EXP 48
25948: PUSH
25949: LD_VAR 0 2
25953: ARRAY
25954: PUSH
25955: LD_INT 1
25957: ARRAY
25958: PPUSH
25959: CALL_OW 255
25963: PPUSH
25964: LD_EXP 73
25968: PUSH
25969: LD_VAR 0 2
25973: ARRAY
25974: PPUSH
25975: CALL 39305 0 2
25979: PPUSH
25980: CALL_OW 1
25984: ST_TO_ADDR
// if not mc_scan [ i ] then
25985: LD_EXP 71
25989: PUSH
25990: LD_VAR 0 2
25994: ARRAY
25995: NOT
25996: IFFALSE 26151
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
25998: LD_ADDR_VAR 0 4
26002: PUSH
26003: LD_EXP 48
26007: PUSH
26008: LD_VAR 0 2
26012: ARRAY
26013: PPUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 25
26019: PUSH
26020: LD_INT 5
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 8
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 25
26039: PUSH
26040: LD_INT 9
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: PPUSH
26053: CALL_OW 72
26057: ST_TO_ADDR
// if not tmp then
26058: LD_VAR 0 4
26062: NOT
26063: IFFALSE 26067
// continue ;
26065: GO 25886
// for j in tmp do
26067: LD_ADDR_VAR 0 3
26071: PUSH
26072: LD_VAR 0 4
26076: PUSH
26077: FOR_IN
26078: IFFALSE 26149
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
26080: LD_VAR 0 3
26084: PPUSH
26085: CALL_OW 310
26089: PPUSH
26090: CALL_OW 266
26094: PUSH
26095: LD_INT 5
26097: EQUAL
26098: PUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: CALL_OW 257
26108: PUSH
26109: LD_INT 1
26111: EQUAL
26112: AND
26113: PUSH
26114: LD_VAR 0 3
26118: PPUSH
26119: CALL_OW 459
26123: NOT
26124: AND
26125: PUSH
26126: LD_VAR 0 7
26130: AND
26131: IFFALSE 26147
// ComChangeProfession ( j , class ) ;
26133: LD_VAR 0 3
26137: PPUSH
26138: LD_VAR 0 7
26142: PPUSH
26143: CALL_OW 123
26147: GO 26077
26149: POP
26150: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
26151: LD_EXP 71
26155: PUSH
26156: LD_VAR 0 2
26160: ARRAY
26161: PUSH
26162: LD_EXP 70
26166: PUSH
26167: LD_VAR 0 2
26171: ARRAY
26172: AND
26173: IFFALSE 26242
// begin tmp := mc_defender [ i ] ;
26175: LD_ADDR_VAR 0 4
26179: PUSH
26180: LD_EXP 70
26184: PUSH
26185: LD_VAR 0 2
26189: ARRAY
26190: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
26191: LD_ADDR_EXP 70
26195: PUSH
26196: LD_EXP 70
26200: PPUSH
26201: LD_VAR 0 2
26205: PPUSH
26206: EMPTY
26207: PPUSH
26208: CALL_OW 1
26212: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
26213: LD_VAR 0 2
26217: PPUSH
26218: LD_VAR 0 4
26222: PPUSH
26223: LD_EXP 71
26227: PUSH
26228: LD_VAR 0 2
26232: ARRAY
26233: PPUSH
26234: CALL 39340 0 3
// exit ;
26238: POP
26239: POP
26240: GO 26246
// end ; end ;
26242: GO 25886
26244: POP
26245: POP
// end ;
26246: LD_VAR 0 1
26250: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
26251: LD_INT 0
26253: PPUSH
26254: PPUSH
26255: PPUSH
26256: PPUSH
26257: PPUSH
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
// if not mc_bases then
26262: LD_EXP 48
26266: NOT
26267: IFFALSE 26271
// exit ;
26269: GO 27215
// for i = 1 to mc_bases do
26271: LD_ADDR_VAR 0 2
26275: PUSH
26276: DOUBLE
26277: LD_INT 1
26279: DEC
26280: ST_TO_ADDR
26281: LD_EXP 48
26285: PUSH
26286: FOR_TO
26287: IFFALSE 27213
// begin tmp := mc_lab [ i ] ;
26289: LD_ADDR_VAR 0 6
26293: PUSH
26294: LD_EXP 81
26298: PUSH
26299: LD_VAR 0 2
26303: ARRAY
26304: ST_TO_ADDR
// if not tmp then
26305: LD_VAR 0 6
26309: NOT
26310: IFFALSE 26314
// continue ;
26312: GO 26286
// for j in tmp do
26314: LD_ADDR_VAR 0 3
26318: PUSH
26319: LD_VAR 0 6
26323: PUSH
26324: FOR_IN
26325: IFFALSE 27209
// begin side := GetSide ( j ) ;
26327: LD_ADDR_VAR 0 4
26331: PUSH
26332: LD_VAR 0 3
26336: PPUSH
26337: CALL_OW 255
26341: ST_TO_ADDR
// if not mc_tech [ side ] then
26342: LD_EXP 75
26346: PUSH
26347: LD_VAR 0 4
26351: ARRAY
26352: NOT
26353: IFFALSE 26357
// continue ;
26355: GO 26324
// if BuildingStatus ( j ) = bs_idle then
26357: LD_VAR 0 3
26361: PPUSH
26362: CALL_OW 461
26366: PUSH
26367: LD_INT 2
26369: EQUAL
26370: IFFALSE 26443
// for t in mc_tech [ side ] do
26372: LD_ADDR_VAR 0 5
26376: PUSH
26377: LD_EXP 75
26381: PUSH
26382: LD_VAR 0 4
26386: ARRAY
26387: PUSH
26388: FOR_IN
26389: IFFALSE 26441
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
26391: LD_VAR 0 3
26395: PPUSH
26396: LD_VAR 0 5
26400: PPUSH
26401: CALL_OW 430
26405: PUSH
26406: LD_VAR 0 4
26410: PPUSH
26411: LD_VAR 0 5
26415: PPUSH
26416: CALL 38413 0 2
26420: AND
26421: IFFALSE 26439
// begin ComResearch ( j , t ) ;
26423: LD_VAR 0 3
26427: PPUSH
26428: LD_VAR 0 5
26432: PPUSH
26433: CALL_OW 124
// break ;
26437: GO 26441
// end ;
26439: GO 26388
26441: POP
26442: POP
// if BuildingStatus ( j ) = bs_need_ape then
26443: LD_VAR 0 3
26447: PPUSH
26448: CALL_OW 461
26452: PUSH
26453: LD_INT 10
26455: EQUAL
26456: IFFALSE 27044
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
26458: LD_EXP 77
26462: PUSH
26463: LD_VAR 0 2
26467: ARRAY
26468: NOT
26469: PUSH
26470: LD_EXP 78
26474: PUSH
26475: LD_VAR 0 2
26479: ARRAY
26480: NOT
26481: AND
26482: PUSH
26483: LD_EXP 75
26487: PUSH
26488: LD_VAR 0 4
26492: ARRAY
26493: PUSH
26494: LD_INT 1
26496: GREATER
26497: AND
26498: IFFALSE 26629
// begin ComCancel ( j ) ;
26500: LD_VAR 0 3
26504: PPUSH
26505: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
26509: LD_ADDR_EXP 75
26513: PUSH
26514: LD_EXP 75
26518: PPUSH
26519: LD_VAR 0 4
26523: PPUSH
26524: LD_EXP 75
26528: PUSH
26529: LD_VAR 0 4
26533: ARRAY
26534: PPUSH
26535: LD_EXP 75
26539: PUSH
26540: LD_VAR 0 4
26544: ARRAY
26545: PUSH
26546: LD_INT 1
26548: MINUS
26549: PPUSH
26550: LD_EXP 75
26554: PUSH
26555: LD_VAR 0 4
26559: ARRAY
26560: PPUSH
26561: LD_INT 0
26563: PPUSH
26564: CALL 43325 0 4
26568: PPUSH
26569: CALL_OW 1
26573: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
26574: LD_ADDR_EXP 75
26578: PUSH
26579: LD_EXP 75
26583: PPUSH
26584: LD_VAR 0 4
26588: PPUSH
26589: LD_EXP 75
26593: PUSH
26594: LD_VAR 0 4
26598: ARRAY
26599: PPUSH
26600: LD_EXP 75
26604: PUSH
26605: LD_VAR 0 4
26609: ARRAY
26610: PPUSH
26611: LD_INT 1
26613: PPUSH
26614: LD_INT 0
26616: PPUSH
26617: CALL 43325 0 4
26621: PPUSH
26622: CALL_OW 1
26626: ST_TO_ADDR
// continue ;
26627: GO 26324
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
26629: LD_EXP 77
26633: PUSH
26634: LD_VAR 0 2
26638: ARRAY
26639: PUSH
26640: LD_EXP 78
26644: PUSH
26645: LD_VAR 0 2
26649: ARRAY
26650: NOT
26651: AND
26652: IFFALSE 26779
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
26654: LD_ADDR_EXP 78
26658: PUSH
26659: LD_EXP 78
26663: PPUSH
26664: LD_VAR 0 2
26668: PUSH
26669: LD_EXP 78
26673: PUSH
26674: LD_VAR 0 2
26678: ARRAY
26679: PUSH
26680: LD_INT 1
26682: PLUS
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PPUSH
26688: LD_EXP 77
26692: PUSH
26693: LD_VAR 0 2
26697: ARRAY
26698: PUSH
26699: LD_INT 1
26701: ARRAY
26702: PPUSH
26703: CALL 44342 0 3
26707: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
26708: LD_EXP 77
26712: PUSH
26713: LD_VAR 0 2
26717: ARRAY
26718: PUSH
26719: LD_INT 1
26721: ARRAY
26722: PPUSH
26723: LD_INT 112
26725: PPUSH
26726: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
26730: LD_ADDR_VAR 0 9
26734: PUSH
26735: LD_EXP 77
26739: PUSH
26740: LD_VAR 0 2
26744: ARRAY
26745: PPUSH
26746: LD_INT 1
26748: PPUSH
26749: CALL_OW 3
26753: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
26754: LD_ADDR_EXP 77
26758: PUSH
26759: LD_EXP 77
26763: PPUSH
26764: LD_VAR 0 2
26768: PPUSH
26769: LD_VAR 0 9
26773: PPUSH
26774: CALL_OW 1
26778: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
26779: LD_EXP 77
26783: PUSH
26784: LD_VAR 0 2
26788: ARRAY
26789: PUSH
26790: LD_EXP 78
26794: PUSH
26795: LD_VAR 0 2
26799: ARRAY
26800: AND
26801: PUSH
26802: LD_EXP 78
26806: PUSH
26807: LD_VAR 0 2
26811: ARRAY
26812: PUSH
26813: LD_INT 1
26815: ARRAY
26816: PPUSH
26817: CALL_OW 310
26821: NOT
26822: AND
26823: PUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: CALL_OW 313
26833: PUSH
26834: LD_INT 6
26836: EQUAL
26837: AND
26838: IFFALSE 26894
// begin tmp2 := UnitsInside ( j ) ;
26840: LD_ADDR_VAR 0 9
26844: PUSH
26845: LD_VAR 0 3
26849: PPUSH
26850: CALL_OW 313
26854: ST_TO_ADDR
// if tmp2 = 6 then
26855: LD_VAR 0 9
26859: PUSH
26860: LD_INT 6
26862: EQUAL
26863: IFFALSE 26894
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
26865: LD_VAR 0 9
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: LD_INT 112
26876: PPUSH
26877: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
26881: LD_VAR 0 9
26885: PUSH
26886: LD_INT 1
26888: ARRAY
26889: PPUSH
26890: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
26894: LD_EXP 78
26898: PUSH
26899: LD_VAR 0 2
26903: ARRAY
26904: PUSH
26905: LD_EXP 78
26909: PUSH
26910: LD_VAR 0 2
26914: ARRAY
26915: PUSH
26916: LD_INT 1
26918: ARRAY
26919: PPUSH
26920: CALL_OW 314
26924: NOT
26925: AND
26926: PUSH
26927: LD_EXP 78
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: PPUSH
26942: CALL_OW 310
26946: NOT
26947: AND
26948: IFFALSE 26974
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
26950: LD_EXP 78
26954: PUSH
26955: LD_VAR 0 2
26959: ARRAY
26960: PUSH
26961: LD_INT 1
26963: ARRAY
26964: PPUSH
26965: LD_VAR 0 3
26969: PPUSH
26970: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
26974: LD_EXP 78
26978: PUSH
26979: LD_VAR 0 2
26983: ARRAY
26984: PUSH
26985: LD_INT 1
26987: ARRAY
26988: PPUSH
26989: CALL_OW 310
26993: PUSH
26994: LD_EXP 78
26998: PUSH
26999: LD_VAR 0 2
27003: ARRAY
27004: PUSH
27005: LD_INT 1
27007: ARRAY
27008: PPUSH
27009: CALL_OW 310
27013: PPUSH
27014: CALL_OW 461
27018: PUSH
27019: LD_INT 3
27021: NONEQUAL
27022: AND
27023: IFFALSE 27044
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
27025: LD_EXP 78
27029: PUSH
27030: LD_VAR 0 2
27034: ARRAY
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
27044: LD_VAR 0 3
27048: PPUSH
27049: CALL_OW 461
27053: PUSH
27054: LD_INT 6
27056: EQUAL
27057: PUSH
27058: LD_VAR 0 6
27062: PUSH
27063: LD_INT 1
27065: GREATER
27066: AND
27067: IFFALSE 27207
// begin sci := [ ] ;
27069: LD_ADDR_VAR 0 8
27073: PUSH
27074: EMPTY
27075: ST_TO_ADDR
// for x in tmp diff j do
27076: LD_ADDR_VAR 0 7
27080: PUSH
27081: LD_VAR 0 6
27085: PUSH
27086: LD_VAR 0 3
27090: DIFF
27091: PUSH
27092: FOR_IN
27093: IFFALSE 27133
// begin if BuildingStatus ( x ) = bs_idle then
27095: LD_VAR 0 7
27099: PPUSH
27100: CALL_OW 461
27104: PUSH
27105: LD_INT 2
27107: EQUAL
27108: IFFALSE 27131
// sci := sci ^ UnitsInside ( x ) ;
27110: LD_ADDR_VAR 0 8
27114: PUSH
27115: LD_VAR 0 8
27119: PUSH
27120: LD_VAR 0 7
27124: PPUSH
27125: CALL_OW 313
27129: ADD
27130: ST_TO_ADDR
// end ;
27131: GO 27092
27133: POP
27134: POP
// if not sci then
27135: LD_VAR 0 8
27139: NOT
27140: IFFALSE 27144
// continue ;
27142: GO 26324
// for x in sci do
27144: LD_ADDR_VAR 0 7
27148: PUSH
27149: LD_VAR 0 8
27153: PUSH
27154: FOR_IN
27155: IFFALSE 27205
// if IsInUnit ( x ) and not HasTask ( x ) then
27157: LD_VAR 0 7
27161: PPUSH
27162: CALL_OW 310
27166: PUSH
27167: LD_VAR 0 7
27171: PPUSH
27172: CALL_OW 314
27176: NOT
27177: AND
27178: IFFALSE 27203
// begin ComExitBuilding ( x ) ;
27180: LD_VAR 0 7
27184: PPUSH
27185: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
27189: LD_VAR 0 7
27193: PPUSH
27194: LD_VAR 0 3
27198: PPUSH
27199: CALL_OW 180
// end ;
27203: GO 27154
27205: POP
27206: POP
// end ; end ;
27207: GO 26324
27209: POP
27210: POP
// end ;
27211: GO 26286
27213: POP
27214: POP
// end ;
27215: LD_VAR 0 1
27219: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
27220: LD_INT 0
27222: PPUSH
27223: PPUSH
27224: PPUSH
27225: PPUSH
27226: PPUSH
27227: PPUSH
27228: PPUSH
27229: PPUSH
// if not mc_bases or not mc_parking then
27230: LD_EXP 48
27234: NOT
27235: PUSH
27236: LD_EXP 72
27240: NOT
27241: OR
27242: IFFALSE 27246
// exit ;
27244: GO 27904
// for i = 1 to mc_bases do
27246: LD_ADDR_VAR 0 2
27250: PUSH
27251: DOUBLE
27252: LD_INT 1
27254: DEC
27255: ST_TO_ADDR
27256: LD_EXP 48
27260: PUSH
27261: FOR_TO
27262: IFFALSE 27902
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
27264: LD_EXP 48
27268: PUSH
27269: LD_VAR 0 2
27273: ARRAY
27274: NOT
27275: PUSH
27276: LD_EXP 72
27280: PUSH
27281: LD_VAR 0 2
27285: ARRAY
27286: NOT
27287: OR
27288: IFFALSE 27292
// continue ;
27290: GO 27261
// if mc_scan [ i ] then
27292: LD_EXP 71
27296: PUSH
27297: LD_VAR 0 2
27301: ARRAY
27302: IFFALSE 27328
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27304: LD_ADDR_EXP 60
27308: PUSH
27309: LD_EXP 60
27313: PPUSH
27314: LD_VAR 0 2
27318: PPUSH
27319: EMPTY
27320: PPUSH
27321: CALL_OW 1
27325: ST_TO_ADDR
// continue ;
27326: GO 27261
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
27328: LD_ADDR_VAR 0 5
27332: PUSH
27333: LD_EXP 48
27337: PUSH
27338: LD_VAR 0 2
27342: ARRAY
27343: PUSH
27344: LD_INT 1
27346: ARRAY
27347: PPUSH
27348: CALL_OW 255
27352: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27353: LD_ADDR_VAR 0 6
27357: PUSH
27358: LD_EXP 48
27362: PUSH
27363: LD_VAR 0 2
27367: ARRAY
27368: PPUSH
27369: LD_INT 30
27371: PUSH
27372: LD_INT 3
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 72
27383: ST_TO_ADDR
// if not fac then
27384: LD_VAR 0 6
27388: NOT
27389: IFFALSE 27440
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27391: LD_ADDR_VAR 0 6
27395: PUSH
27396: LD_EXP 48
27400: PUSH
27401: LD_VAR 0 2
27405: ARRAY
27406: PPUSH
27407: LD_INT 2
27409: PUSH
27410: LD_INT 30
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 30
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: LIST
27434: PPUSH
27435: CALL_OW 72
27439: ST_TO_ADDR
// if not fac then
27440: LD_VAR 0 6
27444: NOT
27445: IFFALSE 27449
// continue ;
27447: GO 27261
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27449: LD_ADDR_VAR 0 7
27453: PUSH
27454: LD_EXP 72
27458: PUSH
27459: LD_VAR 0 2
27463: ARRAY
27464: PPUSH
27465: LD_INT 22
27467: PUSH
27468: LD_VAR 0 5
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 21
27479: PUSH
27480: LD_INT 2
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 3
27489: PUSH
27490: LD_INT 24
27492: PUSH
27493: LD_INT 1000
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: PPUSH
27509: CALL_OW 70
27513: PUSH
27514: LD_INT 22
27516: PUSH
27517: LD_VAR 0 5
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 91
27528: PUSH
27529: LD_VAR 0 6
27533: PUSH
27534: LD_INT 1
27536: ARRAY
27537: PUSH
27538: LD_INT 25
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 21
27548: PUSH
27549: LD_INT 2
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 3
27558: PUSH
27559: LD_INT 24
27561: PUSH
27562: LD_INT 1000
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: PPUSH
27579: CALL_OW 69
27583: UNION
27584: ST_TO_ADDR
// if not vehs then
27585: LD_VAR 0 7
27589: NOT
27590: IFFALSE 27616
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27592: LD_ADDR_EXP 60
27596: PUSH
27597: LD_EXP 60
27601: PPUSH
27602: LD_VAR 0 2
27606: PPUSH
27607: EMPTY
27608: PPUSH
27609: CALL_OW 1
27613: ST_TO_ADDR
// continue ;
27614: GO 27261
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27616: LD_ADDR_VAR 0 8
27620: PUSH
27621: LD_EXP 48
27625: PUSH
27626: LD_VAR 0 2
27630: ARRAY
27631: PPUSH
27632: LD_INT 30
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PPUSH
27642: CALL_OW 72
27646: ST_TO_ADDR
// if tmp then
27647: LD_VAR 0 8
27651: IFFALSE 27754
// begin for j in tmp do
27653: LD_ADDR_VAR 0 3
27657: PUSH
27658: LD_VAR 0 8
27662: PUSH
27663: FOR_IN
27664: IFFALSE 27752
// for k in UnitsInside ( j ) do
27666: LD_ADDR_VAR 0 4
27670: PUSH
27671: LD_VAR 0 3
27675: PPUSH
27676: CALL_OW 313
27680: PUSH
27681: FOR_IN
27682: IFFALSE 27748
// if k then
27684: LD_VAR 0 4
27688: IFFALSE 27746
// if not k in mc_repair_vehicle [ i ] then
27690: LD_VAR 0 4
27694: PUSH
27695: LD_EXP 60
27699: PUSH
27700: LD_VAR 0 2
27704: ARRAY
27705: IN
27706: NOT
27707: IFFALSE 27746
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
27709: LD_ADDR_EXP 60
27713: PUSH
27714: LD_EXP 60
27718: PPUSH
27719: LD_VAR 0 2
27723: PPUSH
27724: LD_EXP 60
27728: PUSH
27729: LD_VAR 0 2
27733: ARRAY
27734: PUSH
27735: LD_VAR 0 4
27739: UNION
27740: PPUSH
27741: CALL_OW 1
27745: ST_TO_ADDR
27746: GO 27681
27748: POP
27749: POP
27750: GO 27663
27752: POP
27753: POP
// end ; if not mc_repair_vehicle [ i ] then
27754: LD_EXP 60
27758: PUSH
27759: LD_VAR 0 2
27763: ARRAY
27764: NOT
27765: IFFALSE 27769
// continue ;
27767: GO 27261
// for j in mc_repair_vehicle [ i ] do
27769: LD_ADDR_VAR 0 3
27773: PUSH
27774: LD_EXP 60
27778: PUSH
27779: LD_VAR 0 2
27783: ARRAY
27784: PUSH
27785: FOR_IN
27786: IFFALSE 27898
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
27788: LD_VAR 0 3
27792: PPUSH
27793: CALL_OW 311
27797: NOT
27798: PUSH
27799: LD_VAR 0 3
27803: PUSH
27804: LD_EXP 51
27808: PUSH
27809: LD_VAR 0 2
27813: ARRAY
27814: PUSH
27815: LD_INT 1
27817: ARRAY
27818: IN
27819: NOT
27820: AND
27821: PUSH
27822: LD_VAR 0 3
27826: PUSH
27827: LD_EXP 51
27831: PUSH
27832: LD_VAR 0 2
27836: ARRAY
27837: PUSH
27838: LD_INT 2
27840: ARRAY
27841: IN
27842: NOT
27843: AND
27844: IFFALSE 27896
// begin if IsInUnit ( j ) then
27846: LD_VAR 0 3
27850: PPUSH
27851: CALL_OW 310
27855: IFFALSE 27866
// ComExitBuilding ( j ) ;
27857: LD_VAR 0 3
27861: PPUSH
27862: CALL_OW 122
// if not HasTask ( j ) then
27866: LD_VAR 0 3
27870: PPUSH
27871: CALL_OW 314
27875: NOT
27876: IFFALSE 27896
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
27878: LD_VAR 0 3
27882: PPUSH
27883: LD_VAR 0 7
27887: PUSH
27888: LD_INT 1
27890: ARRAY
27891: PPUSH
27892: CALL_OW 189
// end ; end ;
27896: GO 27785
27898: POP
27899: POP
// end ;
27900: GO 27261
27902: POP
27903: POP
// end ;
27904: LD_VAR 0 1
27908: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
27909: LD_INT 0
27911: PPUSH
27912: PPUSH
27913: PPUSH
27914: PPUSH
27915: PPUSH
27916: PPUSH
27917: PPUSH
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
// if not mc_bases then
27922: LD_EXP 48
27926: NOT
27927: IFFALSE 27931
// exit ;
27929: GO 28667
// for i = 1 to mc_bases do
27931: LD_ADDR_VAR 0 2
27935: PUSH
27936: DOUBLE
27937: LD_INT 1
27939: DEC
27940: ST_TO_ADDR
27941: LD_EXP 48
27945: PUSH
27946: FOR_TO
27947: IFFALSE 28665
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
27949: LD_EXP 76
27953: PUSH
27954: LD_VAR 0 2
27958: ARRAY
27959: NOT
27960: PUSH
27961: LD_EXP 51
27965: PUSH
27966: LD_VAR 0 2
27970: ARRAY
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: OR
27976: PUSH
27977: LD_EXP 51
27981: PUSH
27982: LD_VAR 0 2
27986: ARRAY
27987: PUSH
27988: LD_INT 2
27990: ARRAY
27991: OR
27992: PUSH
27993: LD_EXP 74
27997: PUSH
27998: LD_VAR 0 2
28002: ARRAY
28003: PPUSH
28004: LD_INT 1
28006: PPUSH
28007: CALL_OW 325
28011: NOT
28012: OR
28013: PUSH
28014: LD_EXP 71
28018: PUSH
28019: LD_VAR 0 2
28023: ARRAY
28024: OR
28025: IFFALSE 28029
// continue ;
28027: GO 27946
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
28029: LD_ADDR_VAR 0 8
28033: PUSH
28034: LD_EXP 48
28038: PUSH
28039: LD_VAR 0 2
28043: ARRAY
28044: PPUSH
28045: LD_INT 25
28047: PUSH
28048: LD_INT 4
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 50
28057: PUSH
28058: EMPTY
28059: LIST
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 60
28066: PUSH
28067: EMPTY
28068: LIST
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: PPUSH
28079: CALL_OW 72
28083: PUSH
28084: LD_EXP 52
28088: PUSH
28089: LD_VAR 0 2
28093: ARRAY
28094: DIFF
28095: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28096: LD_ADDR_VAR 0 9
28100: PUSH
28101: LD_EXP 48
28105: PUSH
28106: LD_VAR 0 2
28110: ARRAY
28111: PPUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 30
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 72
28144: ST_TO_ADDR
// if not tmp or not dep then
28145: LD_VAR 0 8
28149: NOT
28150: PUSH
28151: LD_VAR 0 9
28155: NOT
28156: OR
28157: IFFALSE 28161
// continue ;
28159: GO 27946
// side := GetSide ( tmp [ 1 ] ) ;
28161: LD_ADDR_VAR 0 11
28165: PUSH
28166: LD_VAR 0 8
28170: PUSH
28171: LD_INT 1
28173: ARRAY
28174: PPUSH
28175: CALL_OW 255
28179: ST_TO_ADDR
// dep := dep [ 1 ] ;
28180: LD_ADDR_VAR 0 9
28184: PUSH
28185: LD_VAR 0 9
28189: PUSH
28190: LD_INT 1
28192: ARRAY
28193: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
28194: LD_ADDR_VAR 0 7
28198: PUSH
28199: LD_EXP 76
28203: PUSH
28204: LD_VAR 0 2
28208: ARRAY
28209: PPUSH
28210: LD_INT 22
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 12
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 70
28238: PUSH
28239: LD_INT 22
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 25
28251: PUSH
28252: LD_INT 12
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 91
28261: PUSH
28262: LD_VAR 0 9
28266: PUSH
28267: LD_INT 20
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PPUSH
28280: CALL_OW 69
28284: UNION
28285: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
28286: LD_ADDR_VAR 0 10
28290: PUSH
28291: LD_EXP 76
28295: PUSH
28296: LD_VAR 0 2
28300: ARRAY
28301: PPUSH
28302: LD_INT 81
28304: PUSH
28305: LD_VAR 0 11
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PPUSH
28314: CALL_OW 70
28318: ST_TO_ADDR
// if not apes or danger_at_area then
28319: LD_VAR 0 7
28323: NOT
28324: PUSH
28325: LD_VAR 0 10
28329: OR
28330: IFFALSE 28380
// begin if mc_taming [ i ] then
28332: LD_EXP 79
28336: PUSH
28337: LD_VAR 0 2
28341: ARRAY
28342: IFFALSE 28378
// begin MC_Reset ( i , 121 ) ;
28344: LD_VAR 0 2
28348: PPUSH
28349: LD_INT 121
28351: PPUSH
28352: CALL 19197 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
28356: LD_ADDR_EXP 79
28360: PUSH
28361: LD_EXP 79
28365: PPUSH
28366: LD_VAR 0 2
28370: PPUSH
28371: EMPTY
28372: PPUSH
28373: CALL_OW 1
28377: ST_TO_ADDR
// end ; continue ;
28378: GO 27946
// end ; for j in tmp do
28380: LD_ADDR_VAR 0 3
28384: PUSH
28385: LD_VAR 0 8
28389: PUSH
28390: FOR_IN
28391: IFFALSE 28661
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
28393: LD_VAR 0 3
28397: PUSH
28398: LD_EXP 79
28402: PUSH
28403: LD_VAR 0 2
28407: ARRAY
28408: IN
28409: NOT
28410: PUSH
28411: LD_EXP 79
28415: PUSH
28416: LD_VAR 0 2
28420: ARRAY
28421: PUSH
28422: LD_INT 3
28424: LESS
28425: AND
28426: IFFALSE 28484
// begin SetTag ( j , 121 ) ;
28428: LD_VAR 0 3
28432: PPUSH
28433: LD_INT 121
28435: PPUSH
28436: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
28440: LD_ADDR_EXP 79
28444: PUSH
28445: LD_EXP 79
28449: PPUSH
28450: LD_VAR 0 2
28454: PUSH
28455: LD_EXP 79
28459: PUSH
28460: LD_VAR 0 2
28464: ARRAY
28465: PUSH
28466: LD_INT 1
28468: PLUS
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PPUSH
28474: LD_VAR 0 3
28478: PPUSH
28479: CALL 44342 0 3
28483: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
28484: LD_VAR 0 3
28488: PUSH
28489: LD_EXP 79
28493: PUSH
28494: LD_VAR 0 2
28498: ARRAY
28499: IN
28500: IFFALSE 28659
// begin if IsInUnit ( j ) then
28502: LD_VAR 0 3
28506: PPUSH
28507: CALL_OW 310
28511: IFFALSE 28522
// ComExitBuilding ( j ) ;
28513: LD_VAR 0 3
28517: PPUSH
28518: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
28522: LD_ADDR_VAR 0 6
28526: PUSH
28527: LD_VAR 0 7
28531: PPUSH
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 74
28541: ST_TO_ADDR
// if not ape then
28542: LD_VAR 0 6
28546: NOT
28547: IFFALSE 28551
// break ;
28549: GO 28661
// x := GetX ( ape ) ;
28551: LD_ADDR_VAR 0 4
28555: PUSH
28556: LD_VAR 0 6
28560: PPUSH
28561: CALL_OW 250
28565: ST_TO_ADDR
// y := GetY ( ape ) ;
28566: LD_ADDR_VAR 0 5
28570: PUSH
28571: LD_VAR 0 6
28575: PPUSH
28576: CALL_OW 251
28580: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28581: LD_VAR 0 4
28585: PPUSH
28586: LD_VAR 0 5
28590: PPUSH
28591: CALL_OW 488
28595: NOT
28596: PUSH
28597: LD_VAR 0 11
28601: PPUSH
28602: LD_VAR 0 4
28606: PPUSH
28607: LD_VAR 0 5
28611: PPUSH
28612: LD_INT 20
28614: PPUSH
28615: CALL 44836 0 4
28619: PUSH
28620: LD_INT 4
28622: ARRAY
28623: OR
28624: IFFALSE 28628
// break ;
28626: GO 28661
// if not HasTask ( j ) then
28628: LD_VAR 0 3
28632: PPUSH
28633: CALL_OW 314
28637: NOT
28638: IFFALSE 28659
// ComTameXY ( j , x , y ) ;
28640: LD_VAR 0 3
28644: PPUSH
28645: LD_VAR 0 4
28649: PPUSH
28650: LD_VAR 0 5
28654: PPUSH
28655: CALL_OW 131
// end ; end ;
28659: GO 28390
28661: POP
28662: POP
// end ;
28663: GO 27946
28665: POP
28666: POP
// end ;
28667: LD_VAR 0 1
28671: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
28672: LD_INT 0
28674: PPUSH
28675: PPUSH
28676: PPUSH
28677: PPUSH
28678: PPUSH
28679: PPUSH
28680: PPUSH
28681: PPUSH
// if not mc_bases then
28682: LD_EXP 48
28686: NOT
28687: IFFALSE 28691
// exit ;
28689: GO 29301
// for i = 1 to mc_bases do
28691: LD_ADDR_VAR 0 2
28695: PUSH
28696: DOUBLE
28697: LD_INT 1
28699: DEC
28700: ST_TO_ADDR
28701: LD_EXP 48
28705: PUSH
28706: FOR_TO
28707: IFFALSE 29299
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
28709: LD_EXP 77
28713: PUSH
28714: LD_VAR 0 2
28718: ARRAY
28719: NOT
28720: PUSH
28721: LD_EXP 77
28725: PUSH
28726: LD_VAR 0 2
28730: ARRAY
28731: PPUSH
28732: LD_INT 25
28734: PUSH
28735: LD_INT 12
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PPUSH
28742: CALL_OW 72
28746: NOT
28747: OR
28748: IFFALSE 28752
// continue ;
28750: GO 28706
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
28752: LD_ADDR_VAR 0 5
28756: PUSH
28757: LD_EXP 77
28761: PUSH
28762: LD_VAR 0 2
28766: ARRAY
28767: PUSH
28768: LD_INT 1
28770: ARRAY
28771: PPUSH
28772: CALL_OW 255
28776: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
28777: LD_VAR 0 5
28781: PPUSH
28782: LD_INT 2
28784: PPUSH
28785: CALL_OW 325
28789: IFFALSE 29034
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28791: LD_ADDR_VAR 0 4
28795: PUSH
28796: LD_EXP 77
28800: PUSH
28801: LD_VAR 0 2
28805: ARRAY
28806: PPUSH
28807: LD_INT 25
28809: PUSH
28810: LD_INT 16
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PPUSH
28817: CALL_OW 72
28821: ST_TO_ADDR
// if tmp < 6 then
28822: LD_VAR 0 4
28826: PUSH
28827: LD_INT 6
28829: LESS
28830: IFFALSE 29034
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28832: LD_ADDR_VAR 0 6
28836: PUSH
28837: LD_EXP 48
28841: PUSH
28842: LD_VAR 0 2
28846: ARRAY
28847: PPUSH
28848: LD_INT 2
28850: PUSH
28851: LD_INT 30
28853: PUSH
28854: LD_INT 0
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 30
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: LIST
28875: PPUSH
28876: CALL_OW 72
28880: ST_TO_ADDR
// if depot then
28881: LD_VAR 0 6
28885: IFFALSE 29034
// begin for j in depot do
28887: LD_ADDR_VAR 0 3
28891: PUSH
28892: LD_VAR 0 6
28896: PUSH
28897: FOR_IN
28898: IFFALSE 28929
// begin if UnitsInside ( j ) < 6 then
28900: LD_VAR 0 3
28904: PPUSH
28905: CALL_OW 313
28909: PUSH
28910: LD_INT 6
28912: LESS
28913: IFFALSE 28927
// begin selected := j ;
28915: LD_ADDR_VAR 0 7
28919: PUSH
28920: LD_VAR 0 3
28924: ST_TO_ADDR
// break ;
28925: GO 28929
// end ; end ;
28927: GO 28897
28929: POP
28930: POP
// if selected then
28931: LD_VAR 0 7
28935: IFFALSE 29034
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
28937: LD_ADDR_VAR 0 3
28941: PUSH
28942: LD_EXP 77
28946: PUSH
28947: LD_VAR 0 2
28951: ARRAY
28952: PPUSH
28953: LD_INT 25
28955: PUSH
28956: LD_INT 12
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PPUSH
28963: CALL_OW 72
28967: PUSH
28968: FOR_IN
28969: IFFALSE 29032
// if not HasTask ( j ) then
28971: LD_VAR 0 3
28975: PPUSH
28976: CALL_OW 314
28980: NOT
28981: IFFALSE 29030
// begin if not IsInUnit ( j ) then
28983: LD_VAR 0 3
28987: PPUSH
28988: CALL_OW 310
28992: NOT
28993: IFFALSE 29009
// ComEnterUnit ( j , selected ) ;
28995: LD_VAR 0 3
28999: PPUSH
29000: LD_VAR 0 7
29004: PPUSH
29005: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
29009: LD_VAR 0 3
29013: PPUSH
29014: LD_INT 16
29016: PPUSH
29017: CALL_OW 183
// AddComExitBuilding ( j ) ;
29021: LD_VAR 0 3
29025: PPUSH
29026: CALL_OW 182
// end ;
29030: GO 28968
29032: POP
29033: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
29034: LD_VAR 0 5
29038: PPUSH
29039: LD_INT 11
29041: PPUSH
29042: CALL_OW 325
29046: IFFALSE 29297
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
29048: LD_ADDR_VAR 0 4
29052: PUSH
29053: LD_EXP 77
29057: PUSH
29058: LD_VAR 0 2
29062: ARRAY
29063: PPUSH
29064: LD_INT 25
29066: PUSH
29067: LD_INT 16
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PPUSH
29074: CALL_OW 72
29078: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
29079: LD_VAR 0 4
29083: PUSH
29084: LD_INT 6
29086: GREATEREQUAL
29087: PUSH
29088: LD_VAR 0 5
29092: PPUSH
29093: LD_INT 2
29095: PPUSH
29096: CALL_OW 325
29100: NOT
29101: OR
29102: IFFALSE 29297
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
29104: LD_ADDR_VAR 0 8
29108: PUSH
29109: LD_EXP 48
29113: PUSH
29114: LD_VAR 0 2
29118: ARRAY
29119: PPUSH
29120: LD_INT 2
29122: PUSH
29123: LD_INT 30
29125: PUSH
29126: LD_INT 4
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 30
29135: PUSH
29136: LD_INT 5
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: PPUSH
29148: CALL_OW 72
29152: ST_TO_ADDR
// if barracks then
29153: LD_VAR 0 8
29157: IFFALSE 29297
// begin for j in barracks do
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_VAR 0 8
29168: PUSH
29169: FOR_IN
29170: IFFALSE 29201
// begin if UnitsInside ( j ) < 6 then
29172: LD_VAR 0 3
29176: PPUSH
29177: CALL_OW 313
29181: PUSH
29182: LD_INT 6
29184: LESS
29185: IFFALSE 29199
// begin selected := j ;
29187: LD_ADDR_VAR 0 7
29191: PUSH
29192: LD_VAR 0 3
29196: ST_TO_ADDR
// break ;
29197: GO 29201
// end ; end ;
29199: GO 29169
29201: POP
29202: POP
// if selected then
29203: LD_VAR 0 7
29207: IFFALSE 29297
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29209: LD_ADDR_VAR 0 3
29213: PUSH
29214: LD_EXP 77
29218: PUSH
29219: LD_VAR 0 2
29223: ARRAY
29224: PPUSH
29225: LD_INT 25
29227: PUSH
29228: LD_INT 12
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PPUSH
29235: CALL_OW 72
29239: PUSH
29240: FOR_IN
29241: IFFALSE 29295
// if not IsInUnit ( j ) and not HasTask ( j ) then
29243: LD_VAR 0 3
29247: PPUSH
29248: CALL_OW 310
29252: NOT
29253: PUSH
29254: LD_VAR 0 3
29258: PPUSH
29259: CALL_OW 314
29263: NOT
29264: AND
29265: IFFALSE 29293
// begin ComEnterUnit ( j , selected ) ;
29267: LD_VAR 0 3
29271: PPUSH
29272: LD_VAR 0 7
29276: PPUSH
29277: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
29281: LD_VAR 0 3
29285: PPUSH
29286: LD_INT 15
29288: PPUSH
29289: CALL_OW 183
// end ;
29293: GO 29240
29295: POP
29296: POP
// end ; end ; end ; end ; end ;
29297: GO 28706
29299: POP
29300: POP
// end ;
29301: LD_VAR 0 1
29305: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
29306: LD_INT 0
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
// if not mc_bases then
29312: LD_EXP 48
29316: NOT
29317: IFFALSE 29321
// exit ;
29319: GO 29499
// for i = 1 to mc_bases do
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: DOUBLE
29327: LD_INT 1
29329: DEC
29330: ST_TO_ADDR
29331: LD_EXP 48
29335: PUSH
29336: FOR_TO
29337: IFFALSE 29497
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
29339: LD_ADDR_VAR 0 4
29343: PUSH
29344: LD_EXP 48
29348: PUSH
29349: LD_VAR 0 2
29353: ARRAY
29354: PPUSH
29355: LD_INT 25
29357: PUSH
29358: LD_INT 9
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PPUSH
29365: CALL_OW 72
29369: ST_TO_ADDR
// if not tmp then
29370: LD_VAR 0 4
29374: NOT
29375: IFFALSE 29379
// continue ;
29377: GO 29336
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
29379: LD_EXP 74
29383: PUSH
29384: LD_VAR 0 2
29388: ARRAY
29389: PPUSH
29390: LD_INT 29
29392: PPUSH
29393: CALL_OW 325
29397: NOT
29398: PUSH
29399: LD_EXP 74
29403: PUSH
29404: LD_VAR 0 2
29408: ARRAY
29409: PPUSH
29410: LD_INT 28
29412: PPUSH
29413: CALL_OW 325
29417: NOT
29418: AND
29419: IFFALSE 29423
// continue ;
29421: GO 29336
// for j in tmp do
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_VAR 0 4
29432: PUSH
29433: FOR_IN
29434: IFFALSE 29493
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
29436: LD_VAR 0 3
29440: PUSH
29441: LD_EXP 51
29445: PUSH
29446: LD_VAR 0 2
29450: ARRAY
29451: PUSH
29452: LD_INT 1
29454: ARRAY
29455: IN
29456: NOT
29457: PUSH
29458: LD_VAR 0 3
29462: PUSH
29463: LD_EXP 51
29467: PUSH
29468: LD_VAR 0 2
29472: ARRAY
29473: PUSH
29474: LD_INT 2
29476: ARRAY
29477: IN
29478: NOT
29479: AND
29480: IFFALSE 29491
// ComSpaceTimeShoot ( j ) ;
29482: LD_VAR 0 3
29486: PPUSH
29487: CALL 38504 0 1
29491: GO 29433
29493: POP
29494: POP
// end ;
29495: GO 29336
29497: POP
29498: POP
// end ;
29499: LD_VAR 0 1
29503: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
// if not mc_bases then
29510: LD_EXP 48
29514: NOT
29515: IFFALSE 29519
// exit ;
29517: GO 29541
// for i = 1 to mc_bases do
29519: LD_ADDR_VAR 0 2
29523: PUSH
29524: DOUBLE
29525: LD_INT 1
29527: DEC
29528: ST_TO_ADDR
29529: LD_EXP 48
29533: PUSH
29534: FOR_TO
29535: IFFALSE 29539
// begin end ;
29537: GO 29534
29539: POP
29540: POP
// end ;
29541: LD_VAR 0 1
29545: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
29546: LD_INT 0
29548: PPUSH
29549: PPUSH
29550: PPUSH
// if not mc_bases then
29551: LD_EXP 48
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 30120
// for i = 1 to mc_bases do
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: DOUBLE
29566: LD_INT 1
29568: DEC
29569: ST_TO_ADDR
29570: LD_EXP 48
29574: PUSH
29575: FOR_TO
29576: IFFALSE 30118
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29578: LD_ADDR_VAR 0 3
29582: PUSH
29583: LD_EXP 48
29587: PUSH
29588: LD_VAR 0 2
29592: ARRAY
29593: PPUSH
29594: LD_INT 25
29596: PUSH
29597: LD_INT 4
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 72
29608: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
29609: LD_VAR 0 3
29613: NOT
29614: PUSH
29615: LD_EXP 84
29619: PUSH
29620: LD_VAR 0 2
29624: ARRAY
29625: NOT
29626: OR
29627: IFFALSE 29677
// begin if mc_deposits_finder [ i ] then
29629: LD_EXP 85
29633: PUSH
29634: LD_VAR 0 2
29638: ARRAY
29639: IFFALSE 29675
// begin MC_Reset ( i , 125 ) ;
29641: LD_VAR 0 2
29645: PPUSH
29646: LD_INT 125
29648: PPUSH
29649: CALL 19197 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29653: LD_ADDR_EXP 85
29657: PUSH
29658: LD_EXP 85
29662: PPUSH
29663: LD_VAR 0 2
29667: PPUSH
29668: EMPTY
29669: PPUSH
29670: CALL_OW 1
29674: ST_TO_ADDR
// end ; continue ;
29675: GO 29575
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
29677: LD_EXP 84
29681: PUSH
29682: LD_VAR 0 2
29686: ARRAY
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PUSH
29692: LD_INT 3
29694: ARRAY
29695: PUSH
29696: LD_INT 1
29698: EQUAL
29699: PUSH
29700: LD_INT 20
29702: PPUSH
29703: LD_EXP 74
29707: PUSH
29708: LD_VAR 0 2
29712: ARRAY
29713: PPUSH
29714: CALL_OW 321
29718: PUSH
29719: LD_INT 2
29721: NONEQUAL
29722: AND
29723: IFFALSE 29773
// begin if mc_deposits_finder [ i ] then
29725: LD_EXP 85
29729: PUSH
29730: LD_VAR 0 2
29734: ARRAY
29735: IFFALSE 29771
// begin MC_Reset ( i , 125 ) ;
29737: LD_VAR 0 2
29741: PPUSH
29742: LD_INT 125
29744: PPUSH
29745: CALL 19197 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29749: LD_ADDR_EXP 85
29753: PUSH
29754: LD_EXP 85
29758: PPUSH
29759: LD_VAR 0 2
29763: PPUSH
29764: EMPTY
29765: PPUSH
29766: CALL_OW 1
29770: ST_TO_ADDR
// end ; continue ;
29771: GO 29575
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
29773: LD_EXP 84
29777: PUSH
29778: LD_VAR 0 2
29782: ARRAY
29783: PUSH
29784: LD_INT 1
29786: ARRAY
29787: PUSH
29788: LD_INT 1
29790: ARRAY
29791: PPUSH
29792: LD_EXP 84
29796: PUSH
29797: LD_VAR 0 2
29801: ARRAY
29802: PUSH
29803: LD_INT 1
29805: ARRAY
29806: PUSH
29807: LD_INT 2
29809: ARRAY
29810: PPUSH
29811: LD_EXP 74
29815: PUSH
29816: LD_VAR 0 2
29820: ARRAY
29821: PPUSH
29822: CALL_OW 440
29826: IFFALSE 29869
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
29828: LD_ADDR_EXP 84
29832: PUSH
29833: LD_EXP 84
29837: PPUSH
29838: LD_VAR 0 2
29842: PPUSH
29843: LD_EXP 84
29847: PUSH
29848: LD_VAR 0 2
29852: ARRAY
29853: PPUSH
29854: LD_INT 1
29856: PPUSH
29857: CALL_OW 3
29861: PPUSH
29862: CALL_OW 1
29866: ST_TO_ADDR
29867: GO 30116
// begin if not mc_deposits_finder [ i ] then
29869: LD_EXP 85
29873: PUSH
29874: LD_VAR 0 2
29878: ARRAY
29879: NOT
29880: IFFALSE 29932
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
29882: LD_ADDR_EXP 85
29886: PUSH
29887: LD_EXP 85
29891: PPUSH
29892: LD_VAR 0 2
29896: PPUSH
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 1
29904: ARRAY
29905: PUSH
29906: EMPTY
29907: LIST
29908: PPUSH
29909: CALL_OW 1
29913: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
29914: LD_VAR 0 3
29918: PUSH
29919: LD_INT 1
29921: ARRAY
29922: PPUSH
29923: LD_INT 125
29925: PPUSH
29926: CALL_OW 109
// end else
29930: GO 30116
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
29932: LD_EXP 85
29936: PUSH
29937: LD_VAR 0 2
29941: ARRAY
29942: PUSH
29943: LD_INT 1
29945: ARRAY
29946: PPUSH
29947: CALL_OW 310
29951: IFFALSE 29974
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
29953: LD_EXP 85
29957: PUSH
29958: LD_VAR 0 2
29962: ARRAY
29963: PUSH
29964: LD_INT 1
29966: ARRAY
29967: PPUSH
29968: CALL_OW 122
29972: GO 30116
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
29974: LD_EXP 85
29978: PUSH
29979: LD_VAR 0 2
29983: ARRAY
29984: PUSH
29985: LD_INT 1
29987: ARRAY
29988: PPUSH
29989: CALL_OW 314
29993: NOT
29994: PUSH
29995: LD_EXP 85
29999: PUSH
30000: LD_VAR 0 2
30004: ARRAY
30005: PUSH
30006: LD_INT 1
30008: ARRAY
30009: PPUSH
30010: LD_EXP 84
30014: PUSH
30015: LD_VAR 0 2
30019: ARRAY
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PUSH
30025: LD_INT 1
30027: ARRAY
30028: PPUSH
30029: LD_EXP 84
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: PUSH
30040: LD_INT 1
30042: ARRAY
30043: PUSH
30044: LD_INT 2
30046: ARRAY
30047: PPUSH
30048: CALL_OW 297
30052: PUSH
30053: LD_INT 6
30055: GREATER
30056: AND
30057: IFFALSE 30116
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
30059: LD_EXP 85
30063: PUSH
30064: LD_VAR 0 2
30068: ARRAY
30069: PUSH
30070: LD_INT 1
30072: ARRAY
30073: PPUSH
30074: LD_EXP 84
30078: PUSH
30079: LD_VAR 0 2
30083: ARRAY
30084: PUSH
30085: LD_INT 1
30087: ARRAY
30088: PUSH
30089: LD_INT 1
30091: ARRAY
30092: PPUSH
30093: LD_EXP 84
30097: PUSH
30098: LD_VAR 0 2
30102: ARRAY
30103: PUSH
30104: LD_INT 1
30106: ARRAY
30107: PUSH
30108: LD_INT 2
30110: ARRAY
30111: PPUSH
30112: CALL_OW 111
// end ; end ; end ;
30116: GO 29575
30118: POP
30119: POP
// end ;
30120: LD_VAR 0 1
30124: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
30125: LD_INT 0
30127: PPUSH
30128: PPUSH
30129: PPUSH
30130: PPUSH
30131: PPUSH
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
// if not mc_bases then
30136: LD_EXP 48
30140: NOT
30141: IFFALSE 30145
// exit ;
30143: GO 30643
// for i = 1 to mc_bases do
30145: LD_ADDR_VAR 0 2
30149: PUSH
30150: DOUBLE
30151: LD_INT 1
30153: DEC
30154: ST_TO_ADDR
30155: LD_EXP 48
30159: PUSH
30160: FOR_TO
30161: IFFALSE 30641
// begin if not mc_bases [ i ] then
30163: LD_EXP 48
30167: PUSH
30168: LD_VAR 0 2
30172: ARRAY
30173: NOT
30174: IFFALSE 30178
// continue ;
30176: GO 30160
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
30178: LD_ADDR_VAR 0 7
30182: PUSH
30183: LD_EXP 48
30187: PUSH
30188: LD_VAR 0 2
30192: ARRAY
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: CALL_OW 248
30202: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
30203: LD_VAR 0 7
30207: PUSH
30208: LD_INT 1
30210: NONEQUAL
30211: PUSH
30212: LD_EXP 67
30216: PUSH
30217: LD_VAR 0 2
30221: ARRAY
30222: PUSH
30223: LD_EXP 70
30227: PUSH
30228: LD_VAR 0 2
30232: ARRAY
30233: UNION
30234: PPUSH
30235: LD_INT 33
30237: PUSH
30238: LD_INT 2
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PPUSH
30245: CALL_OW 72
30249: NOT
30250: OR
30251: IFFALSE 30255
// continue ;
30253: GO 30160
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
30255: LD_ADDR_VAR 0 9
30259: PUSH
30260: LD_EXP 48
30264: PUSH
30265: LD_VAR 0 2
30269: ARRAY
30270: PPUSH
30271: LD_INT 30
30273: PUSH
30274: LD_INT 36
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 72
30285: ST_TO_ADDR
// if not cts then
30286: LD_VAR 0 9
30290: NOT
30291: IFFALSE 30295
// continue ;
30293: GO 30160
// if mc_remote_driver [ i ] then
30295: LD_EXP 87
30299: PUSH
30300: LD_VAR 0 2
30304: ARRAY
30305: IFFALSE 30454
// for j in mc_remote_driver [ i ] do
30307: LD_ADDR_VAR 0 3
30311: PUSH
30312: LD_EXP 87
30316: PUSH
30317: LD_VAR 0 2
30321: ARRAY
30322: PUSH
30323: FOR_IN
30324: IFFALSE 30452
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
30326: LD_VAR 0 3
30330: PPUSH
30331: CALL_OW 310
30335: NOT
30336: PUSH
30337: LD_VAR 0 3
30341: PPUSH
30342: CALL_OW 310
30346: PPUSH
30347: CALL_OW 266
30351: PUSH
30352: LD_INT 36
30354: NONEQUAL
30355: OR
30356: IFFALSE 30450
// begin if IsInUnit ( j ) then
30358: LD_VAR 0 3
30362: PPUSH
30363: CALL_OW 310
30367: IFFALSE 30378
// ComExitBuilding ( j ) ;
30369: LD_VAR 0 3
30373: PPUSH
30374: CALL_OW 122
// ct := 0 ;
30378: LD_ADDR_VAR 0 8
30382: PUSH
30383: LD_INT 0
30385: ST_TO_ADDR
// for k in cts do
30386: LD_ADDR_VAR 0 4
30390: PUSH
30391: LD_VAR 0 9
30395: PUSH
30396: FOR_IN
30397: IFFALSE 30428
// if UnitsInside ( k ) < 3 then
30399: LD_VAR 0 4
30403: PPUSH
30404: CALL_OW 313
30408: PUSH
30409: LD_INT 3
30411: LESS
30412: IFFALSE 30426
// begin ct := k ;
30414: LD_ADDR_VAR 0 8
30418: PUSH
30419: LD_VAR 0 4
30423: ST_TO_ADDR
// break ;
30424: GO 30428
// end ;
30426: GO 30396
30428: POP
30429: POP
// if ct then
30430: LD_VAR 0 8
30434: IFFALSE 30450
// AddComEnterUnit ( j , ct ) ;
30436: LD_VAR 0 3
30440: PPUSH
30441: LD_VAR 0 8
30445: PPUSH
30446: CALL_OW 180
// end ;
30450: GO 30323
30452: POP
30453: POP
// places := 0 ;
30454: LD_ADDR_VAR 0 5
30458: PUSH
30459: LD_INT 0
30461: ST_TO_ADDR
// for j = 1 to cts do
30462: LD_ADDR_VAR 0 3
30466: PUSH
30467: DOUBLE
30468: LD_INT 1
30470: DEC
30471: ST_TO_ADDR
30472: LD_VAR 0 9
30476: PUSH
30477: FOR_TO
30478: IFFALSE 30496
// places := places + 3 ;
30480: LD_ADDR_VAR 0 5
30484: PUSH
30485: LD_VAR 0 5
30489: PUSH
30490: LD_INT 3
30492: PLUS
30493: ST_TO_ADDR
30494: GO 30477
30496: POP
30497: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
30498: LD_ADDR_VAR 0 6
30502: PUSH
30503: LD_EXP 48
30507: PUSH
30508: LD_VAR 0 2
30512: ARRAY
30513: PPUSH
30514: LD_INT 25
30516: PUSH
30517: LD_INT 3
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PPUSH
30524: CALL_OW 72
30528: PUSH
30529: LD_EXP 87
30533: PUSH
30534: LD_VAR 0 2
30538: ARRAY
30539: DIFF
30540: ST_TO_ADDR
// if not tmp then
30541: LD_VAR 0 6
30545: NOT
30546: IFFALSE 30550
// continue ;
30548: GO 30160
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
30550: LD_ADDR_VAR 0 5
30554: PUSH
30555: LD_VAR 0 5
30559: PUSH
30560: LD_EXP 87
30564: PUSH
30565: LD_VAR 0 2
30569: ARRAY
30570: PUSH
30571: LD_INT 1
30573: PLUS
30574: MINUS
30575: ST_TO_ADDR
// if places then
30576: LD_VAR 0 5
30580: IFFALSE 30639
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
30582: LD_ADDR_EXP 87
30586: PUSH
30587: LD_EXP 87
30591: PPUSH
30592: LD_VAR 0 2
30596: PPUSH
30597: LD_EXP 87
30601: PUSH
30602: LD_VAR 0 2
30606: ARRAY
30607: PUSH
30608: LD_VAR 0 6
30612: PUSH
30613: LD_INT 1
30615: ARRAY
30616: UNION
30617: PPUSH
30618: CALL_OW 1
30622: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
30623: LD_VAR 0 6
30627: PUSH
30628: LD_INT 1
30630: ARRAY
30631: PPUSH
30632: LD_INT 126
30634: PPUSH
30635: CALL_OW 109
// end ; end ;
30639: GO 30160
30641: POP
30642: POP
// end ;
30643: LD_VAR 0 1
30647: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
30648: LD_INT 0
30650: PPUSH
30651: PPUSH
30652: PPUSH
30653: PPUSH
30654: PPUSH
30655: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
30656: LD_VAR 0 1
30660: NOT
30661: PUSH
30662: LD_VAR 0 2
30666: NOT
30667: OR
30668: PUSH
30669: LD_VAR 0 3
30673: NOT
30674: OR
30675: PUSH
30676: LD_VAR 0 4
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: LD_INT 8
30698: PUSH
30699: LD_INT 9
30701: PUSH
30702: LD_INT 15
30704: PUSH
30705: LD_INT 16
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: IN
30719: NOT
30720: OR
30721: IFFALSE 30725
// exit ;
30723: GO 31625
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
30725: LD_ADDR_VAR 0 2
30729: PUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: LD_INT 21
30737: PUSH
30738: LD_INT 3
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 24
30747: PUSH
30748: LD_INT 250
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL_OW 72
30763: ST_TO_ADDR
// case class of 1 , 15 :
30764: LD_VAR 0 4
30768: PUSH
30769: LD_INT 1
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30783
30775: LD_INT 15
30777: DOUBLE
30778: EQUAL
30779: IFTRUE 30783
30781: GO 30868
30783: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
30784: LD_ADDR_VAR 0 8
30788: PUSH
30789: LD_VAR 0 2
30793: PPUSH
30794: LD_INT 2
30796: PUSH
30797: LD_INT 30
30799: PUSH
30800: LD_INT 32
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 30
30809: PUSH
30810: LD_INT 31
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: LIST
30821: PPUSH
30822: CALL_OW 72
30826: PUSH
30827: LD_VAR 0 2
30831: PPUSH
30832: LD_INT 2
30834: PUSH
30835: LD_INT 30
30837: PUSH
30838: LD_INT 4
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 30
30847: PUSH
30848: LD_INT 5
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: LIST
30859: PPUSH
30860: CALL_OW 72
30864: ADD
30865: ST_TO_ADDR
30866: GO 31114
30868: LD_INT 2
30870: DOUBLE
30871: EQUAL
30872: IFTRUE 30882
30874: LD_INT 16
30876: DOUBLE
30877: EQUAL
30878: IFTRUE 30882
30880: GO 30928
30882: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
30883: LD_ADDR_VAR 0 8
30887: PUSH
30888: LD_VAR 0 2
30892: PPUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 30
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 30
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: LIST
30920: PPUSH
30921: CALL_OW 72
30925: ST_TO_ADDR
30926: GO 31114
30928: LD_INT 3
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30982
30936: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
30937: LD_ADDR_VAR 0 8
30941: PUSH
30942: LD_VAR 0 2
30946: PPUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 30
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: PPUSH
30975: CALL_OW 72
30979: ST_TO_ADDR
30980: GO 31114
30982: LD_INT 4
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31047
30990: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
30991: LD_ADDR_VAR 0 8
30995: PUSH
30996: LD_VAR 0 2
31000: PPUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 30
31006: PUSH
31007: LD_INT 6
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 30
31016: PUSH
31017: LD_INT 7
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 30
31026: PUSH
31027: LD_INT 8
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: PPUSH
31040: CALL_OW 72
31044: ST_TO_ADDR
31045: GO 31114
31047: LD_INT 5
31049: DOUBLE
31050: EQUAL
31051: IFTRUE 31067
31053: LD_INT 8
31055: DOUBLE
31056: EQUAL
31057: IFTRUE 31067
31059: LD_INT 9
31061: DOUBLE
31062: EQUAL
31063: IFTRUE 31067
31065: GO 31113
31067: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
31068: LD_ADDR_VAR 0 8
31072: PUSH
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_INT 2
31080: PUSH
31081: LD_INT 30
31083: PUSH
31084: LD_INT 4
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: PUSH
31091: LD_INT 30
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL_OW 72
31110: ST_TO_ADDR
31111: GO 31114
31113: POP
// if not tmp then
31114: LD_VAR 0 8
31118: NOT
31119: IFFALSE 31123
// exit ;
31121: GO 31625
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
31123: LD_VAR 0 4
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 15
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: IN
31138: PUSH
31139: LD_EXP 57
31143: PUSH
31144: LD_VAR 0 1
31148: ARRAY
31149: AND
31150: IFFALSE 31306
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
31152: LD_ADDR_VAR 0 9
31156: PUSH
31157: LD_EXP 57
31161: PUSH
31162: LD_VAR 0 1
31166: ARRAY
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
31172: LD_VAR 0 9
31176: PUSH
31177: LD_EXP 58
31181: PUSH
31182: LD_VAR 0 1
31186: ARRAY
31187: IN
31188: NOT
31189: IFFALSE 31304
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
31191: LD_ADDR_EXP 58
31195: PUSH
31196: LD_EXP 58
31200: PPUSH
31201: LD_VAR 0 1
31205: PUSH
31206: LD_EXP 58
31210: PUSH
31211: LD_VAR 0 1
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: PLUS
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PPUSH
31225: LD_VAR 0 9
31229: PPUSH
31230: CALL 44342 0 3
31234: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
31235: LD_ADDR_EXP 57
31239: PUSH
31240: LD_EXP 57
31244: PPUSH
31245: LD_VAR 0 1
31249: PPUSH
31250: LD_EXP 57
31254: PUSH
31255: LD_VAR 0 1
31259: ARRAY
31260: PUSH
31261: LD_VAR 0 9
31265: DIFF
31266: PPUSH
31267: CALL_OW 1
31271: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
31272: LD_VAR 0 3
31276: PPUSH
31277: LD_EXP 58
31281: PUSH
31282: LD_VAR 0 1
31286: ARRAY
31287: PUSH
31288: LD_EXP 58
31292: PUSH
31293: LD_VAR 0 1
31297: ARRAY
31298: ARRAY
31299: PPUSH
31300: CALL_OW 120
// end ; exit ;
31304: GO 31625
// end ; if tmp > 1 then
31306: LD_VAR 0 8
31310: PUSH
31311: LD_INT 1
31313: GREATER
31314: IFFALSE 31418
// for i = 2 to tmp do
31316: LD_ADDR_VAR 0 6
31320: PUSH
31321: DOUBLE
31322: LD_INT 2
31324: DEC
31325: ST_TO_ADDR
31326: LD_VAR 0 8
31330: PUSH
31331: FOR_TO
31332: IFFALSE 31416
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
31334: LD_VAR 0 8
31338: PUSH
31339: LD_VAR 0 6
31343: ARRAY
31344: PPUSH
31345: CALL_OW 461
31349: PUSH
31350: LD_INT 6
31352: EQUAL
31353: IFFALSE 31414
// begin x := tmp [ i ] ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_VAR 0 8
31364: PUSH
31365: LD_VAR 0 6
31369: ARRAY
31370: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
31371: LD_ADDR_VAR 0 8
31375: PUSH
31376: LD_VAR 0 8
31380: PPUSH
31381: LD_VAR 0 6
31385: PPUSH
31386: CALL_OW 3
31390: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
31391: LD_ADDR_VAR 0 8
31395: PUSH
31396: LD_VAR 0 8
31400: PPUSH
31401: LD_INT 1
31403: PPUSH
31404: LD_VAR 0 9
31408: PPUSH
31409: CALL_OW 2
31413: ST_TO_ADDR
// end ;
31414: GO 31331
31416: POP
31417: POP
// for i in tmp do
31418: LD_ADDR_VAR 0 6
31422: PUSH
31423: LD_VAR 0 8
31427: PUSH
31428: FOR_IN
31429: IFFALSE 31498
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
31431: LD_VAR 0 6
31435: PPUSH
31436: CALL_OW 313
31440: PUSH
31441: LD_INT 6
31443: LESS
31444: PUSH
31445: LD_VAR 0 6
31449: PPUSH
31450: CALL_OW 266
31454: PUSH
31455: LD_INT 31
31457: PUSH
31458: LD_INT 32
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: IN
31465: NOT
31466: AND
31467: PUSH
31468: LD_VAR 0 6
31472: PPUSH
31473: CALL_OW 313
31477: PUSH
31478: LD_INT 0
31480: EQUAL
31481: OR
31482: IFFALSE 31496
// begin j := i ;
31484: LD_ADDR_VAR 0 7
31488: PUSH
31489: LD_VAR 0 6
31493: ST_TO_ADDR
// break ;
31494: GO 31498
// end ; end ;
31496: GO 31428
31498: POP
31499: POP
// if j then
31500: LD_VAR 0 7
31504: IFFALSE 31522
// ComEnterUnit ( unit , j ) else
31506: LD_VAR 0 3
31510: PPUSH
31511: LD_VAR 0 7
31515: PPUSH
31516: CALL_OW 120
31520: GO 31625
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31522: LD_ADDR_VAR 0 10
31526: PUSH
31527: LD_VAR 0 2
31531: PPUSH
31532: LD_INT 2
31534: PUSH
31535: LD_INT 30
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 30
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: LIST
31559: PPUSH
31560: CALL_OW 72
31564: ST_TO_ADDR
// if depot then
31565: LD_VAR 0 10
31569: IFFALSE 31625
// begin depot := NearestUnitToUnit ( depot , unit ) ;
31571: LD_ADDR_VAR 0 10
31575: PUSH
31576: LD_VAR 0 10
31580: PPUSH
31581: LD_VAR 0 3
31585: PPUSH
31586: CALL_OW 74
31590: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
31591: LD_VAR 0 3
31595: PPUSH
31596: LD_VAR 0 10
31600: PPUSH
31601: CALL_OW 296
31605: PUSH
31606: LD_INT 10
31608: GREATER
31609: IFFALSE 31625
// ComStandNearbyBuilding ( unit , depot ) ;
31611: LD_VAR 0 3
31615: PPUSH
31616: LD_VAR 0 10
31620: PPUSH
31621: CALL 39121 0 2
// end ; end ; end ;
31625: LD_VAR 0 5
31629: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
31630: LD_INT 0
31632: PPUSH
31633: PPUSH
31634: PPUSH
31635: PPUSH
// if not mc_bases then
31636: LD_EXP 48
31640: NOT
31641: IFFALSE 31645
// exit ;
31643: GO 31884
// for i = 1 to mc_bases do
31645: LD_ADDR_VAR 0 2
31649: PUSH
31650: DOUBLE
31651: LD_INT 1
31653: DEC
31654: ST_TO_ADDR
31655: LD_EXP 48
31659: PUSH
31660: FOR_TO
31661: IFFALSE 31882
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
31663: LD_ADDR_VAR 0 4
31667: PUSH
31668: LD_EXP 48
31672: PUSH
31673: LD_VAR 0 2
31677: ARRAY
31678: PPUSH
31679: LD_INT 21
31681: PUSH
31682: LD_INT 1
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PPUSH
31689: CALL_OW 72
31693: PUSH
31694: LD_EXP 77
31698: PUSH
31699: LD_VAR 0 2
31703: ARRAY
31704: UNION
31705: ST_TO_ADDR
// if not tmp then
31706: LD_VAR 0 4
31710: NOT
31711: IFFALSE 31715
// continue ;
31713: GO 31660
// for j in tmp do
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_VAR 0 4
31724: PUSH
31725: FOR_IN
31726: IFFALSE 31878
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
31728: LD_VAR 0 3
31732: PPUSH
31733: CALL_OW 110
31737: NOT
31738: PUSH
31739: LD_VAR 0 3
31743: PPUSH
31744: CALL_OW 314
31748: NOT
31749: AND
31750: PUSH
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 311
31760: NOT
31761: AND
31762: PUSH
31763: LD_VAR 0 3
31767: PPUSH
31768: CALL_OW 310
31772: NOT
31773: AND
31774: PUSH
31775: LD_VAR 0 3
31779: PUSH
31780: LD_EXP 51
31784: PUSH
31785: LD_VAR 0 2
31789: ARRAY
31790: PUSH
31791: LD_INT 1
31793: ARRAY
31794: IN
31795: NOT
31796: AND
31797: PUSH
31798: LD_VAR 0 3
31802: PUSH
31803: LD_EXP 51
31807: PUSH
31808: LD_VAR 0 2
31812: ARRAY
31813: PUSH
31814: LD_INT 2
31816: ARRAY
31817: IN
31818: NOT
31819: AND
31820: PUSH
31821: LD_VAR 0 3
31825: PUSH
31826: LD_EXP 60
31830: PUSH
31831: LD_VAR 0 2
31835: ARRAY
31836: IN
31837: NOT
31838: AND
31839: IFFALSE 31876
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
31841: LD_VAR 0 2
31845: PPUSH
31846: LD_EXP 48
31850: PUSH
31851: LD_VAR 0 2
31855: ARRAY
31856: PPUSH
31857: LD_VAR 0 3
31861: PPUSH
31862: LD_VAR 0 3
31866: PPUSH
31867: CALL_OW 257
31871: PPUSH
31872: CALL 30648 0 4
// end ;
31876: GO 31725
31878: POP
31879: POP
// end ;
31880: GO 31660
31882: POP
31883: POP
// end ;
31884: LD_VAR 0 1
31888: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
31889: LD_INT 0
31891: PPUSH
31892: PPUSH
31893: PPUSH
31894: PPUSH
31895: PPUSH
31896: PPUSH
// if not mc_bases [ base ] then
31897: LD_EXP 48
31901: PUSH
31902: LD_VAR 0 1
31906: ARRAY
31907: NOT
31908: IFFALSE 31912
// exit ;
31910: GO 32094
// tmp := [ ] ;
31912: LD_ADDR_VAR 0 6
31916: PUSH
31917: EMPTY
31918: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
31919: LD_ADDR_VAR 0 7
31923: PUSH
31924: LD_VAR 0 3
31928: PPUSH
31929: LD_INT 0
31931: PPUSH
31932: CALL_OW 517
31936: ST_TO_ADDR
// if not list then
31937: LD_VAR 0 7
31941: NOT
31942: IFFALSE 31946
// exit ;
31944: GO 32094
// for i = 1 to amount do
31946: LD_ADDR_VAR 0 5
31950: PUSH
31951: DOUBLE
31952: LD_INT 1
31954: DEC
31955: ST_TO_ADDR
31956: LD_VAR 0 2
31960: PUSH
31961: FOR_TO
31962: IFFALSE 32042
// begin x := rand ( 1 , list [ 1 ] ) ;
31964: LD_ADDR_VAR 0 8
31968: PUSH
31969: LD_INT 1
31971: PPUSH
31972: LD_VAR 0 7
31976: PUSH
31977: LD_INT 1
31979: ARRAY
31980: PPUSH
31981: CALL_OW 12
31985: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
31986: LD_ADDR_VAR 0 6
31990: PUSH
31991: LD_VAR 0 6
31995: PPUSH
31996: LD_VAR 0 5
32000: PPUSH
32001: LD_VAR 0 7
32005: PUSH
32006: LD_INT 1
32008: ARRAY
32009: PUSH
32010: LD_VAR 0 8
32014: ARRAY
32015: PUSH
32016: LD_VAR 0 7
32020: PUSH
32021: LD_INT 2
32023: ARRAY
32024: PUSH
32025: LD_VAR 0 8
32029: ARRAY
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PPUSH
32035: CALL_OW 1
32039: ST_TO_ADDR
// end ;
32040: GO 31961
32042: POP
32043: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
32044: LD_ADDR_EXP 61
32048: PUSH
32049: LD_EXP 61
32053: PPUSH
32054: LD_VAR 0 1
32058: PPUSH
32059: LD_VAR 0 6
32063: PPUSH
32064: CALL_OW 1
32068: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
32069: LD_ADDR_EXP 63
32073: PUSH
32074: LD_EXP 63
32078: PPUSH
32079: LD_VAR 0 1
32083: PPUSH
32084: LD_VAR 0 3
32088: PPUSH
32089: CALL_OW 1
32093: ST_TO_ADDR
// end ;
32094: LD_VAR 0 4
32098: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
32099: LD_INT 0
32101: PPUSH
// if not mc_bases [ base ] then
32102: LD_EXP 48
32106: PUSH
32107: LD_VAR 0 1
32111: ARRAY
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32142
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
32117: LD_ADDR_EXP 53
32121: PUSH
32122: LD_EXP 53
32126: PPUSH
32127: LD_VAR 0 1
32131: PPUSH
32132: LD_VAR 0 2
32136: PPUSH
32137: CALL_OW 1
32141: ST_TO_ADDR
// end ;
32142: LD_VAR 0 3
32146: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
32147: LD_INT 0
32149: PPUSH
// if not mc_bases [ base ] then
32150: LD_EXP 48
32154: PUSH
32155: LD_VAR 0 1
32159: ARRAY
32160: NOT
32161: IFFALSE 32165
// exit ;
32163: GO 32221
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
32165: LD_ADDR_EXP 53
32169: PUSH
32170: LD_EXP 53
32174: PPUSH
32175: LD_VAR 0 1
32179: PPUSH
32180: LD_EXP 53
32184: PUSH
32185: LD_VAR 0 1
32189: ARRAY
32190: PPUSH
32191: LD_EXP 53
32195: PUSH
32196: LD_VAR 0 1
32200: ARRAY
32201: PUSH
32202: LD_INT 1
32204: PLUS
32205: PPUSH
32206: LD_VAR 0 2
32210: PPUSH
32211: CALL_OW 2
32215: PPUSH
32216: CALL_OW 1
32220: ST_TO_ADDR
// end ;
32221: LD_VAR 0 3
32225: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
32226: LD_INT 0
32228: PPUSH
// if not mc_bases [ base ] then
32229: LD_EXP 48
32233: PUSH
32234: LD_VAR 0 1
32238: ARRAY
32239: NOT
32240: IFFALSE 32244
// exit ;
32242: GO 32269
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
32244: LD_ADDR_EXP 69
32248: PUSH
32249: LD_EXP 69
32253: PPUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: LD_VAR 0 2
32263: PPUSH
32264: CALL_OW 1
32268: ST_TO_ADDR
// end ;
32269: LD_VAR 0 3
32273: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
32274: LD_INT 0
32276: PPUSH
// if not mc_bases [ base ] then
32277: LD_EXP 48
32281: PUSH
32282: LD_VAR 0 1
32286: ARRAY
32287: NOT
32288: IFFALSE 32292
// exit ;
32290: GO 32332
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
32292: LD_ADDR_EXP 69
32296: PUSH
32297: LD_EXP 69
32301: PPUSH
32302: LD_VAR 0 1
32306: PPUSH
32307: LD_EXP 69
32311: PUSH
32312: LD_VAR 0 1
32316: ARRAY
32317: PUSH
32318: LD_VAR 0 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: ADD
32326: PPUSH
32327: CALL_OW 1
32331: ST_TO_ADDR
// end ;
32332: LD_VAR 0 3
32336: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
32337: LD_INT 0
32339: PPUSH
// if not mc_bases [ base ] then
32340: LD_EXP 48
32344: PUSH
32345: LD_VAR 0 1
32349: ARRAY
32350: NOT
32351: IFFALSE 32355
// exit ;
32353: GO 32467
// mc_defender := Replace ( mc_defender , base , deflist ) ;
32355: LD_ADDR_EXP 70
32359: PUSH
32360: LD_EXP 70
32364: PPUSH
32365: LD_VAR 0 1
32369: PPUSH
32370: LD_VAR 0 2
32374: PPUSH
32375: CALL_OW 1
32379: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
32380: LD_ADDR_EXP 59
32384: PUSH
32385: LD_EXP 59
32389: PPUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: LD_VAR 0 2
32399: PUSH
32400: LD_INT 0
32402: PLUS
32403: PPUSH
32404: CALL_OW 1
32408: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
32409: LD_ADDR_EXP 67
32413: PUSH
32414: LD_EXP 67
32418: PPUSH
32419: LD_VAR 0 1
32423: PPUSH
32424: LD_EXP 67
32428: PUSH
32429: LD_VAR 0 1
32433: ARRAY
32434: PUSH
32435: LD_EXP 70
32439: PUSH
32440: LD_VAR 0 1
32444: ARRAY
32445: PPUSH
32446: LD_INT 21
32448: PUSH
32449: LD_INT 2
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: CALL_OW 72
32460: UNION
32461: PPUSH
32462: CALL_OW 1
32466: ST_TO_ADDR
// end ;
32467: LD_VAR 0 3
32471: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
32472: LD_INT 0
32474: PPUSH
// if not mc_bases [ base ] then
32475: LD_EXP 48
32479: PUSH
32480: LD_VAR 0 1
32484: ARRAY
32485: NOT
32486: IFFALSE 32490
// exit ;
32488: GO 32515
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
32490: LD_ADDR_EXP 59
32494: PUSH
32495: LD_EXP 59
32499: PPUSH
32500: LD_VAR 0 1
32504: PPUSH
32505: LD_VAR 0 2
32509: PPUSH
32510: CALL_OW 1
32514: ST_TO_ADDR
// end ;
32515: LD_VAR 0 3
32519: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
32520: LD_INT 0
32522: PPUSH
32523: PPUSH
32524: PPUSH
32525: PPUSH
// if not mc_bases [ base ] then
32526: LD_EXP 48
32530: PUSH
32531: LD_VAR 0 1
32535: ARRAY
32536: NOT
32537: IFFALSE 32541
// exit ;
32539: GO 32606
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
32541: LD_ADDR_EXP 68
32545: PUSH
32546: LD_EXP 68
32550: PPUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_EXP 68
32560: PUSH
32561: LD_VAR 0 1
32565: ARRAY
32566: PUSH
32567: LD_INT 1
32569: PLUS
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PPUSH
32575: LD_VAR 0 1
32579: PUSH
32580: LD_VAR 0 2
32584: PUSH
32585: LD_VAR 0 3
32589: PUSH
32590: LD_VAR 0 4
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL 44342 0 3
32605: ST_TO_ADDR
// end ;
32606: LD_VAR 0 5
32610: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
32611: LD_INT 0
32613: PPUSH
// if not mc_bases [ base ] then
32614: LD_EXP 48
32618: PUSH
32619: LD_VAR 0 1
32623: ARRAY
32624: NOT
32625: IFFALSE 32629
// exit ;
32627: GO 32654
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
32629: LD_ADDR_EXP 84
32633: PUSH
32634: LD_EXP 84
32638: PPUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: LD_VAR 0 2
32648: PPUSH
32649: CALL_OW 1
32653: ST_TO_ADDR
// end ;
32654: LD_VAR 0 3
32658: RET
// export function MC_GetMinesField ( base ) ; begin
32659: LD_INT 0
32661: PPUSH
// result := mc_mines [ base ] ;
32662: LD_ADDR_VAR 0 2
32666: PUSH
32667: LD_EXP 61
32671: PUSH
32672: LD_VAR 0 1
32676: ARRAY
32677: ST_TO_ADDR
// end ;
32678: LD_VAR 0 2
32682: RET
// export function MC_GetProduceList ( base ) ; begin
32683: LD_INT 0
32685: PPUSH
// result := mc_produce [ base ] ;
32686: LD_ADDR_VAR 0 2
32690: PUSH
32691: LD_EXP 69
32695: PUSH
32696: LD_VAR 0 1
32700: ARRAY
32701: ST_TO_ADDR
// end ;
32702: LD_VAR 0 2
32706: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
32707: LD_INT 0
32709: PPUSH
32710: PPUSH
// if not mc_bases then
32711: LD_EXP 48
32715: NOT
32716: IFFALSE 32720
// exit ;
32718: GO 32785
// if mc_bases [ base ] then
32720: LD_EXP 48
32724: PUSH
32725: LD_VAR 0 1
32729: ARRAY
32730: IFFALSE 32785
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32732: LD_ADDR_VAR 0 3
32736: PUSH
32737: LD_EXP 48
32741: PUSH
32742: LD_VAR 0 1
32746: ARRAY
32747: PPUSH
32748: LD_INT 30
32750: PUSH
32751: LD_VAR 0 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PPUSH
32760: CALL_OW 72
32764: ST_TO_ADDR
// if result then
32765: LD_VAR 0 3
32769: IFFALSE 32785
// result := result [ 1 ] ;
32771: LD_ADDR_VAR 0 3
32775: PUSH
32776: LD_VAR 0 3
32780: PUSH
32781: LD_INT 1
32783: ARRAY
32784: ST_TO_ADDR
// end ; end ;
32785: LD_VAR 0 3
32789: RET
// export function MC_SetTame ( base , area ) ; begin
32790: LD_INT 0
32792: PPUSH
// if not mc_bases or not base then
32793: LD_EXP 48
32797: NOT
32798: PUSH
32799: LD_VAR 0 1
32803: NOT
32804: OR
32805: IFFALSE 32809
// exit ;
32807: GO 32834
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
32809: LD_ADDR_EXP 76
32813: PUSH
32814: LD_EXP 76
32818: PPUSH
32819: LD_VAR 0 1
32823: PPUSH
32824: LD_VAR 0 2
32828: PPUSH
32829: CALL_OW 1
32833: ST_TO_ADDR
// end ;
32834: LD_VAR 0 3
32838: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
32839: LD_INT 0
32841: PPUSH
32842: PPUSH
// if not mc_bases or not base then
32843: LD_EXP 48
32847: NOT
32848: PUSH
32849: LD_VAR 0 1
32853: NOT
32854: OR
32855: IFFALSE 32859
// exit ;
32857: GO 32961
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32859: LD_ADDR_VAR 0 4
32863: PUSH
32864: LD_EXP 48
32868: PUSH
32869: LD_VAR 0 1
32873: ARRAY
32874: PPUSH
32875: LD_INT 30
32877: PUSH
32878: LD_VAR 0 2
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 72
32891: ST_TO_ADDR
// if not tmp then
32892: LD_VAR 0 4
32896: NOT
32897: IFFALSE 32901
// exit ;
32899: GO 32961
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
32901: LD_ADDR_EXP 80
32905: PUSH
32906: LD_EXP 80
32910: PPUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: LD_EXP 80
32920: PUSH
32921: LD_VAR 0 1
32925: ARRAY
32926: PPUSH
32927: LD_EXP 80
32931: PUSH
32932: LD_VAR 0 1
32936: ARRAY
32937: PUSH
32938: LD_INT 1
32940: PLUS
32941: PPUSH
32942: LD_VAR 0 4
32946: PUSH
32947: LD_INT 1
32949: ARRAY
32950: PPUSH
32951: CALL_OW 2
32955: PPUSH
32956: CALL_OW 1
32960: ST_TO_ADDR
// end ;
32961: LD_VAR 0 3
32965: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
32966: LD_INT 0
32968: PPUSH
32969: PPUSH
// if not mc_bases or not base or not kinds then
32970: LD_EXP 48
32974: NOT
32975: PUSH
32976: LD_VAR 0 1
32980: NOT
32981: OR
32982: PUSH
32983: LD_VAR 0 2
32987: NOT
32988: OR
32989: IFFALSE 32993
// exit ;
32991: GO 33054
// for i in kinds do
32993: LD_ADDR_VAR 0 4
32997: PUSH
32998: LD_VAR 0 2
33002: PUSH
33003: FOR_IN
33004: IFFALSE 33052
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
33006: LD_ADDR_EXP 82
33010: PUSH
33011: LD_EXP 82
33015: PPUSH
33016: LD_VAR 0 1
33020: PUSH
33021: LD_EXP 82
33025: PUSH
33026: LD_VAR 0 1
33030: ARRAY
33031: PUSH
33032: LD_INT 1
33034: PLUS
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PPUSH
33040: LD_VAR 0 4
33044: PPUSH
33045: CALL 44342 0 3
33049: ST_TO_ADDR
33050: GO 33003
33052: POP
33053: POP
// end ;
33054: LD_VAR 0 3
33058: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
33059: LD_INT 0
33061: PPUSH
// if not mc_bases or not base or not areas then
33062: LD_EXP 48
33066: NOT
33067: PUSH
33068: LD_VAR 0 1
33072: NOT
33073: OR
33074: PUSH
33075: LD_VAR 0 2
33079: NOT
33080: OR
33081: IFFALSE 33085
// exit ;
33083: GO 33110
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
33085: LD_ADDR_EXP 66
33089: PUSH
33090: LD_EXP 66
33094: PPUSH
33095: LD_VAR 0 1
33099: PPUSH
33100: LD_VAR 0 2
33104: PPUSH
33105: CALL_OW 1
33109: ST_TO_ADDR
// end ;
33110: LD_VAR 0 3
33114: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
33115: LD_INT 0
33117: PPUSH
// if not mc_bases or not base then
33118: LD_EXP 48
33122: NOT
33123: PUSH
33124: LD_VAR 0 1
33128: NOT
33129: OR
33130: IFFALSE 33134
// exit ;
33132: GO 33168
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
33134: LD_ADDR_EXP 83
33138: PUSH
33139: LD_EXP 83
33143: PPUSH
33144: LD_VAR 0 1
33148: PPUSH
33149: LD_VAR 0 2
33153: PUSH
33154: LD_VAR 0 3
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PPUSH
33163: CALL_OW 1
33167: ST_TO_ADDR
// end ;
33168: LD_VAR 0 4
33172: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
33173: LD_INT 0
33175: PPUSH
33176: PPUSH
33177: PPUSH
// if not mc_bases or not base or not ext_list then
33178: LD_EXP 48
33182: NOT
33183: PUSH
33184: LD_VAR 0 1
33188: NOT
33189: OR
33190: PUSH
33191: LD_VAR 0 5
33195: NOT
33196: OR
33197: IFFALSE 33201
// exit ;
33199: GO 33374
// tmp := GetFacExtXYD ( x , y , d ) ;
33201: LD_ADDR_VAR 0 8
33205: PUSH
33206: LD_VAR 0 2
33210: PPUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: LD_VAR 0 4
33220: PPUSH
33221: CALL 75422 0 3
33225: ST_TO_ADDR
// if not tmp then
33226: LD_VAR 0 8
33230: NOT
33231: IFFALSE 33235
// exit ;
33233: GO 33374
// for i in tmp do
33235: LD_ADDR_VAR 0 7
33239: PUSH
33240: LD_VAR 0 8
33244: PUSH
33245: FOR_IN
33246: IFFALSE 33372
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
33248: LD_ADDR_EXP 53
33252: PUSH
33253: LD_EXP 53
33257: PPUSH
33258: LD_VAR 0 1
33262: PPUSH
33263: LD_EXP 53
33267: PUSH
33268: LD_VAR 0 1
33272: ARRAY
33273: PPUSH
33274: LD_EXP 53
33278: PUSH
33279: LD_VAR 0 1
33283: ARRAY
33284: PUSH
33285: LD_INT 1
33287: PLUS
33288: PPUSH
33289: LD_VAR 0 5
33293: PUSH
33294: LD_INT 1
33296: ARRAY
33297: PUSH
33298: LD_VAR 0 7
33302: PUSH
33303: LD_INT 1
33305: ARRAY
33306: PUSH
33307: LD_VAR 0 7
33311: PUSH
33312: LD_INT 2
33314: ARRAY
33315: PUSH
33316: LD_VAR 0 7
33320: PUSH
33321: LD_INT 3
33323: ARRAY
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: PPUSH
33331: CALL_OW 2
33335: PPUSH
33336: CALL_OW 1
33340: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
33341: LD_ADDR_VAR 0 5
33345: PUSH
33346: LD_VAR 0 5
33350: PPUSH
33351: LD_INT 1
33353: PPUSH
33354: CALL_OW 3
33358: ST_TO_ADDR
// if not ext_list then
33359: LD_VAR 0 5
33363: NOT
33364: IFFALSE 33370
// exit ;
33366: POP
33367: POP
33368: GO 33374
// end ;
33370: GO 33245
33372: POP
33373: POP
// end ;
33374: LD_VAR 0 6
33378: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
33379: LD_INT 0
33381: PPUSH
// if not mc_bases or not base or not weapon_list then
33382: LD_EXP 48
33386: NOT
33387: PUSH
33388: LD_VAR 0 1
33392: NOT
33393: OR
33394: PUSH
33395: LD_VAR 0 2
33399: NOT
33400: OR
33401: IFFALSE 33405
// exit ;
33403: GO 33430
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
33405: LD_ADDR_EXP 86
33409: PUSH
33410: LD_EXP 86
33414: PPUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: LD_VAR 0 2
33424: PPUSH
33425: CALL_OW 1
33429: ST_TO_ADDR
// end ;
33430: LD_VAR 0 3
33434: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
33435: LD_INT 0
33437: PPUSH
// if not mc_bases or not base or not tech_list then
33438: LD_EXP 48
33442: NOT
33443: PUSH
33444: LD_VAR 0 1
33448: NOT
33449: OR
33450: PUSH
33451: LD_VAR 0 2
33455: NOT
33456: OR
33457: IFFALSE 33461
// exit ;
33459: GO 33486
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
33461: LD_ADDR_EXP 75
33465: PUSH
33466: LD_EXP 75
33470: PPUSH
33471: LD_VAR 0 1
33475: PPUSH
33476: LD_VAR 0 2
33480: PPUSH
33481: CALL_OW 1
33485: ST_TO_ADDR
// end ;
33486: LD_VAR 0 3
33490: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
33491: LD_INT 0
33493: PPUSH
// if not mc_bases or not parking_area or not base then
33494: LD_EXP 48
33498: NOT
33499: PUSH
33500: LD_VAR 0 2
33504: NOT
33505: OR
33506: PUSH
33507: LD_VAR 0 1
33511: NOT
33512: OR
33513: IFFALSE 33517
// exit ;
33515: GO 33542
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
33517: LD_ADDR_EXP 72
33521: PUSH
33522: LD_EXP 72
33526: PPUSH
33527: LD_VAR 0 1
33531: PPUSH
33532: LD_VAR 0 2
33536: PPUSH
33537: CALL_OW 1
33541: ST_TO_ADDR
// end ;
33542: LD_VAR 0 3
33546: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
33547: LD_INT 0
33549: PPUSH
// if not mc_bases or not base or not scan_area then
33550: LD_EXP 48
33554: NOT
33555: PUSH
33556: LD_VAR 0 1
33560: NOT
33561: OR
33562: PUSH
33563: LD_VAR 0 2
33567: NOT
33568: OR
33569: IFFALSE 33573
// exit ;
33571: GO 33598
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
33573: LD_ADDR_EXP 73
33577: PUSH
33578: LD_EXP 73
33582: PPUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: LD_VAR 0 2
33592: PPUSH
33593: CALL_OW 1
33597: ST_TO_ADDR
// end ; end_of_file
33598: LD_VAR 0 3
33602: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
33603: LD_INT 0
33605: PPUSH
33606: PPUSH
33607: PPUSH
// if not mc_bases then
33608: LD_EXP 48
33612: NOT
33613: IFFALSE 33617
// exit ;
33615: GO 33782
// for i = 1 to mc_bases do
33617: LD_ADDR_VAR 0 4
33621: PUSH
33622: DOUBLE
33623: LD_INT 1
33625: DEC
33626: ST_TO_ADDR
33627: LD_EXP 48
33631: PUSH
33632: FOR_TO
33633: IFFALSE 33780
// begin if sci in mc_bases [ i ] then
33635: LD_VAR 0 2
33639: PUSH
33640: LD_EXP 48
33644: PUSH
33645: LD_VAR 0 4
33649: ARRAY
33650: IN
33651: IFFALSE 33778
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
33653: LD_ADDR_EXP 77
33657: PUSH
33658: LD_EXP 77
33662: PPUSH
33663: LD_VAR 0 4
33667: PUSH
33668: LD_EXP 77
33672: PUSH
33673: LD_VAR 0 4
33677: ARRAY
33678: PUSH
33679: LD_INT 1
33681: PLUS
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PPUSH
33687: LD_VAR 0 1
33691: PPUSH
33692: CALL 44342 0 3
33696: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
33697: LD_ADDR_VAR 0 5
33701: PUSH
33702: LD_EXP 48
33706: PUSH
33707: LD_VAR 0 4
33711: ARRAY
33712: PPUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 30
33718: PUSH
33719: LD_INT 0
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 30
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: PPUSH
33741: CALL_OW 72
33745: PPUSH
33746: LD_VAR 0 1
33750: PPUSH
33751: CALL_OW 74
33755: ST_TO_ADDR
// if tmp then
33756: LD_VAR 0 5
33760: IFFALSE 33776
// ComStandNearbyBuilding ( ape , tmp ) ;
33762: LD_VAR 0 1
33766: PPUSH
33767: LD_VAR 0 5
33771: PPUSH
33772: CALL 39121 0 2
// break ;
33776: GO 33780
// end ; end ;
33778: GO 33632
33780: POP
33781: POP
// end ;
33782: LD_VAR 0 3
33786: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
33787: LD_INT 0
33789: PPUSH
33790: PPUSH
33791: PPUSH
// if not mc_bases then
33792: LD_EXP 48
33796: NOT
33797: IFFALSE 33801
// exit ;
33799: GO 33890
// for i = 1 to mc_bases do
33801: LD_ADDR_VAR 0 4
33805: PUSH
33806: DOUBLE
33807: LD_INT 1
33809: DEC
33810: ST_TO_ADDR
33811: LD_EXP 48
33815: PUSH
33816: FOR_TO
33817: IFFALSE 33888
// begin if building in mc_busy_turret_list [ i ] then
33819: LD_VAR 0 1
33823: PUSH
33824: LD_EXP 58
33828: PUSH
33829: LD_VAR 0 4
33833: ARRAY
33834: IN
33835: IFFALSE 33886
// begin tmp := mc_busy_turret_list [ i ] diff building ;
33837: LD_ADDR_VAR 0 5
33841: PUSH
33842: LD_EXP 58
33846: PUSH
33847: LD_VAR 0 4
33851: ARRAY
33852: PUSH
33853: LD_VAR 0 1
33857: DIFF
33858: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
33859: LD_ADDR_EXP 58
33863: PUSH
33864: LD_EXP 58
33868: PPUSH
33869: LD_VAR 0 4
33873: PPUSH
33874: LD_VAR 0 5
33878: PPUSH
33879: CALL_OW 1
33883: ST_TO_ADDR
// break ;
33884: GO 33888
// end ; end ;
33886: GO 33816
33888: POP
33889: POP
// end ;
33890: LD_VAR 0 3
33894: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
33895: LD_INT 0
33897: PPUSH
33898: PPUSH
33899: PPUSH
// if not mc_bases then
33900: LD_EXP 48
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 34108
// for i = 1 to mc_bases do
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: DOUBLE
33915: LD_INT 1
33917: DEC
33918: ST_TO_ADDR
33919: LD_EXP 48
33923: PUSH
33924: FOR_TO
33925: IFFALSE 34106
// if building in mc_bases [ i ] then
33927: LD_VAR 0 1
33931: PUSH
33932: LD_EXP 48
33936: PUSH
33937: LD_VAR 0 5
33941: ARRAY
33942: IN
33943: IFFALSE 34104
// begin tmp := mc_bases [ i ] diff building ;
33945: LD_ADDR_VAR 0 6
33949: PUSH
33950: LD_EXP 48
33954: PUSH
33955: LD_VAR 0 5
33959: ARRAY
33960: PUSH
33961: LD_VAR 0 1
33965: DIFF
33966: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
33967: LD_ADDR_EXP 48
33971: PUSH
33972: LD_EXP 48
33976: PPUSH
33977: LD_VAR 0 5
33981: PPUSH
33982: LD_VAR 0 6
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
33992: LD_VAR 0 1
33996: PUSH
33997: LD_EXP 56
34001: PUSH
34002: LD_VAR 0 5
34006: ARRAY
34007: IN
34008: IFFALSE 34047
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
34010: LD_ADDR_EXP 56
34014: PUSH
34015: LD_EXP 56
34019: PPUSH
34020: LD_VAR 0 5
34024: PPUSH
34025: LD_EXP 56
34029: PUSH
34030: LD_VAR 0 5
34034: ARRAY
34035: PUSH
34036: LD_VAR 0 1
34040: DIFF
34041: PPUSH
34042: CALL_OW 1
34046: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
34047: LD_VAR 0 1
34051: PUSH
34052: LD_EXP 57
34056: PUSH
34057: LD_VAR 0 5
34061: ARRAY
34062: IN
34063: IFFALSE 34102
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
34065: LD_ADDR_EXP 57
34069: PUSH
34070: LD_EXP 57
34074: PPUSH
34075: LD_VAR 0 5
34079: PPUSH
34080: LD_EXP 57
34084: PUSH
34085: LD_VAR 0 5
34089: ARRAY
34090: PUSH
34091: LD_VAR 0 1
34095: DIFF
34096: PPUSH
34097: CALL_OW 1
34101: ST_TO_ADDR
// break ;
34102: GO 34106
// end ;
34104: GO 33924
34106: POP
34107: POP
// end ;
34108: LD_VAR 0 4
34112: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
34113: LD_INT 0
34115: PPUSH
34116: PPUSH
34117: PPUSH
// if not mc_bases or not side in mc_sides then
34118: LD_EXP 48
34122: NOT
34123: PUSH
34124: LD_VAR 0 3
34128: PUSH
34129: LD_EXP 74
34133: IN
34134: NOT
34135: OR
34136: IFFALSE 34140
// exit ;
34138: GO 34263
// for i = 1 to mc_vehicles do
34140: LD_ADDR_VAR 0 6
34144: PUSH
34145: DOUBLE
34146: LD_INT 1
34148: DEC
34149: ST_TO_ADDR
34150: LD_EXP 67
34154: PUSH
34155: FOR_TO
34156: IFFALSE 34261
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
34158: LD_VAR 0 2
34162: PUSH
34163: LD_EXP 67
34167: PUSH
34168: LD_VAR 0 6
34172: ARRAY
34173: IN
34174: PUSH
34175: LD_VAR 0 1
34179: PUSH
34180: LD_EXP 67
34184: PUSH
34185: LD_VAR 0 6
34189: ARRAY
34190: IN
34191: OR
34192: IFFALSE 34259
// begin tmp := mc_vehicles [ i ] diff old ;
34194: LD_ADDR_VAR 0 7
34198: PUSH
34199: LD_EXP 67
34203: PUSH
34204: LD_VAR 0 6
34208: ARRAY
34209: PUSH
34210: LD_VAR 0 2
34214: DIFF
34215: ST_TO_ADDR
// tmp := tmp diff new ;
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: LD_VAR 0 7
34225: PUSH
34226: LD_VAR 0 1
34230: DIFF
34231: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
34232: LD_ADDR_EXP 67
34236: PUSH
34237: LD_EXP 67
34241: PPUSH
34242: LD_VAR 0 6
34246: PPUSH
34247: LD_VAR 0 7
34251: PPUSH
34252: CALL_OW 1
34256: ST_TO_ADDR
// break ;
34257: GO 34261
// end ;
34259: GO 34155
34261: POP
34262: POP
// end ;
34263: LD_VAR 0 5
34267: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
34268: LD_INT 0
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
// if not mc_bases then
34274: LD_EXP 48
34278: NOT
34279: IFFALSE 34283
// exit ;
34281: GO 34575
// side := GetSide ( vehicle ) ;
34283: LD_ADDR_VAR 0 5
34287: PUSH
34288: LD_VAR 0 1
34292: PPUSH
34293: CALL_OW 255
34297: ST_TO_ADDR
// for i = 1 to mc_bases do
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: DOUBLE
34304: LD_INT 1
34306: DEC
34307: ST_TO_ADDR
34308: LD_EXP 48
34312: PUSH
34313: FOR_TO
34314: IFFALSE 34573
// begin if factory in mc_bases [ i ] then
34316: LD_VAR 0 2
34320: PUSH
34321: LD_EXP 48
34325: PUSH
34326: LD_VAR 0 4
34330: ARRAY
34331: IN
34332: IFFALSE 34571
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
34334: LD_EXP 70
34338: PUSH
34339: LD_VAR 0 4
34343: ARRAY
34344: PUSH
34345: LD_EXP 59
34349: PUSH
34350: LD_VAR 0 4
34354: ARRAY
34355: LESS
34356: IFFALSE 34527
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
34358: LD_ADDR_EXP 70
34362: PUSH
34363: LD_EXP 70
34367: PPUSH
34368: LD_VAR 0 4
34372: PPUSH
34373: LD_EXP 70
34377: PUSH
34378: LD_VAR 0 4
34382: ARRAY
34383: PUSH
34384: LD_VAR 0 1
34388: ADD
34389: PPUSH
34390: CALL_OW 1
34394: ST_TO_ADDR
// if not mc_scan [ i ] then
34395: LD_EXP 71
34399: PUSH
34400: LD_VAR 0 4
34404: ARRAY
34405: NOT
34406: IFFALSE 34525
// begin if GetControl ( vehicle ) = control_remote then
34408: LD_VAR 0 1
34412: PPUSH
34413: CALL_OW 263
34417: PUSH
34418: LD_INT 2
34420: EQUAL
34421: IFFALSE 34441
// repeat wait ( 0 0$1 ) ;
34423: LD_INT 35
34425: PPUSH
34426: CALL_OW 67
// until IsControledBy ( vehicle ) ;
34430: LD_VAR 0 1
34434: PPUSH
34435: CALL_OW 312
34439: IFFALSE 34423
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
34441: LD_VAR 0 1
34445: PPUSH
34446: LD_EXP 72
34450: PUSH
34451: LD_VAR 0 4
34455: ARRAY
34456: PPUSH
34457: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
34461: LD_VAR 0 1
34465: PPUSH
34466: CALL_OW 263
34470: PUSH
34471: LD_INT 1
34473: NONEQUAL
34474: IFFALSE 34478
// break ;
34476: GO 34573
// repeat wait ( 0 0$1 ) ;
34478: LD_INT 35
34480: PPUSH
34481: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_EXP 72
34494: PUSH
34495: LD_VAR 0 4
34499: ARRAY
34500: PPUSH
34501: CALL_OW 308
34505: IFFALSE 34478
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
34507: LD_VAR 0 1
34511: PPUSH
34512: CALL_OW 311
34516: PPUSH
34517: CALL_OW 121
// exit ;
34521: POP
34522: POP
34523: GO 34575
// end ; end else
34525: GO 34571
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
34527: LD_ADDR_EXP 67
34531: PUSH
34532: LD_EXP 67
34536: PPUSH
34537: LD_VAR 0 4
34541: PUSH
34542: LD_EXP 67
34546: PUSH
34547: LD_VAR 0 4
34551: ARRAY
34552: PUSH
34553: LD_INT 1
34555: PLUS
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PPUSH
34561: LD_VAR 0 1
34565: PPUSH
34566: CALL 44342 0 3
34570: ST_TO_ADDR
// end ; end ;
34571: GO 34313
34573: POP
34574: POP
// end ;
34575: LD_VAR 0 3
34579: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
34580: LD_INT 0
34582: PPUSH
34583: PPUSH
34584: PPUSH
34585: PPUSH
// if not mc_bases then
34586: LD_EXP 48
34590: NOT
34591: IFFALSE 34595
// exit ;
34593: GO 34948
// repeat wait ( 0 0$1 ) ;
34595: LD_INT 35
34597: PPUSH
34598: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
34602: LD_VAR 0 2
34606: PPUSH
34607: LD_VAR 0 3
34611: PPUSH
34612: CALL_OW 284
34616: IFFALSE 34595
// if GetResourceTypeXY ( x , y ) = mat_artefact then
34618: LD_VAR 0 2
34622: PPUSH
34623: LD_VAR 0 3
34627: PPUSH
34628: CALL_OW 283
34632: PUSH
34633: LD_INT 4
34635: EQUAL
34636: IFFALSE 34640
// exit ;
34638: GO 34948
// for i = 1 to mc_bases do
34640: LD_ADDR_VAR 0 7
34644: PUSH
34645: DOUBLE
34646: LD_INT 1
34648: DEC
34649: ST_TO_ADDR
34650: LD_EXP 48
34654: PUSH
34655: FOR_TO
34656: IFFALSE 34946
// begin if mc_crates_area [ i ] then
34658: LD_EXP 66
34662: PUSH
34663: LD_VAR 0 7
34667: ARRAY
34668: IFFALSE 34779
// for j in mc_crates_area [ i ] do
34670: LD_ADDR_VAR 0 8
34674: PUSH
34675: LD_EXP 66
34679: PUSH
34680: LD_VAR 0 7
34684: ARRAY
34685: PUSH
34686: FOR_IN
34687: IFFALSE 34777
// if InArea ( x , y , j ) then
34689: LD_VAR 0 2
34693: PPUSH
34694: LD_VAR 0 3
34698: PPUSH
34699: LD_VAR 0 8
34703: PPUSH
34704: CALL_OW 309
34708: IFFALSE 34775
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34710: LD_ADDR_EXP 64
34714: PUSH
34715: LD_EXP 64
34719: PPUSH
34720: LD_VAR 0 7
34724: PUSH
34725: LD_EXP 64
34729: PUSH
34730: LD_VAR 0 7
34734: ARRAY
34735: PUSH
34736: LD_INT 1
34738: PLUS
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PPUSH
34744: LD_VAR 0 4
34748: PUSH
34749: LD_VAR 0 2
34753: PUSH
34754: LD_VAR 0 3
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: PPUSH
34764: CALL 44342 0 3
34768: ST_TO_ADDR
// exit ;
34769: POP
34770: POP
34771: POP
34772: POP
34773: GO 34948
// end ;
34775: GO 34686
34777: POP
34778: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34779: LD_ADDR_VAR 0 9
34783: PUSH
34784: LD_EXP 48
34788: PUSH
34789: LD_VAR 0 7
34793: ARRAY
34794: PPUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 30
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 30
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: PPUSH
34823: CALL_OW 72
34827: ST_TO_ADDR
// if not depot then
34828: LD_VAR 0 9
34832: NOT
34833: IFFALSE 34837
// continue ;
34835: GO 34655
// for j in depot do
34837: LD_ADDR_VAR 0 8
34841: PUSH
34842: LD_VAR 0 9
34846: PUSH
34847: FOR_IN
34848: IFFALSE 34942
// if GetDistUnitXY ( j , x , y ) < 30 then
34850: LD_VAR 0 8
34854: PPUSH
34855: LD_VAR 0 2
34859: PPUSH
34860: LD_VAR 0 3
34864: PPUSH
34865: CALL_OW 297
34869: PUSH
34870: LD_INT 30
34872: LESS
34873: IFFALSE 34940
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34875: LD_ADDR_EXP 64
34879: PUSH
34880: LD_EXP 64
34884: PPUSH
34885: LD_VAR 0 7
34889: PUSH
34890: LD_EXP 64
34894: PUSH
34895: LD_VAR 0 7
34899: ARRAY
34900: PUSH
34901: LD_INT 1
34903: PLUS
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PPUSH
34909: LD_VAR 0 4
34913: PUSH
34914: LD_VAR 0 2
34918: PUSH
34919: LD_VAR 0 3
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: PPUSH
34929: CALL 44342 0 3
34933: ST_TO_ADDR
// exit ;
34934: POP
34935: POP
34936: POP
34937: POP
34938: GO 34948
// end ;
34940: GO 34847
34942: POP
34943: POP
// end ;
34944: GO 34655
34946: POP
34947: POP
// end ;
34948: LD_VAR 0 6
34952: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
34953: LD_INT 0
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
// side := GetSide ( lab ) ;
34959: LD_ADDR_VAR 0 4
34963: PUSH
34964: LD_VAR 0 2
34968: PPUSH
34969: CALL_OW 255
34973: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
34974: LD_VAR 0 4
34978: PUSH
34979: LD_EXP 74
34983: IN
34984: NOT
34985: PUSH
34986: LD_EXP 75
34990: NOT
34991: OR
34992: PUSH
34993: LD_EXP 48
34997: NOT
34998: OR
34999: IFFALSE 35003
// exit ;
35001: GO 35236
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
35003: LD_ADDR_EXP 75
35007: PUSH
35008: LD_EXP 75
35012: PPUSH
35013: LD_VAR 0 4
35017: PPUSH
35018: LD_EXP 75
35022: PUSH
35023: LD_VAR 0 4
35027: ARRAY
35028: PUSH
35029: LD_VAR 0 1
35033: DIFF
35034: PPUSH
35035: CALL_OW 1
35039: ST_TO_ADDR
// for i = 1 to mc_bases do
35040: LD_ADDR_VAR 0 5
35044: PUSH
35045: DOUBLE
35046: LD_INT 1
35048: DEC
35049: ST_TO_ADDR
35050: LD_EXP 48
35054: PUSH
35055: FOR_TO
35056: IFFALSE 35234
// begin if lab in mc_bases [ i ] then
35058: LD_VAR 0 2
35062: PUSH
35063: LD_EXP 48
35067: PUSH
35068: LD_VAR 0 5
35072: ARRAY
35073: IN
35074: IFFALSE 35232
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
35076: LD_VAR 0 1
35080: PUSH
35081: LD_INT 11
35083: PUSH
35084: LD_INT 4
35086: PUSH
35087: LD_INT 3
35089: PUSH
35090: LD_INT 2
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: IN
35099: PUSH
35100: LD_EXP 78
35104: PUSH
35105: LD_VAR 0 5
35109: ARRAY
35110: AND
35111: IFFALSE 35232
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
35113: LD_ADDR_VAR 0 6
35117: PUSH
35118: LD_EXP 78
35122: PUSH
35123: LD_VAR 0 5
35127: ARRAY
35128: PUSH
35129: LD_INT 1
35131: ARRAY
35132: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35133: LD_ADDR_EXP 78
35137: PUSH
35138: LD_EXP 78
35142: PPUSH
35143: LD_VAR 0 5
35147: PPUSH
35148: EMPTY
35149: PPUSH
35150: CALL_OW 1
35154: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
35155: LD_VAR 0 6
35159: PPUSH
35160: LD_INT 0
35162: PPUSH
35163: CALL_OW 109
// ComExitBuilding ( tmp ) ;
35167: LD_VAR 0 6
35171: PPUSH
35172: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
35176: LD_ADDR_EXP 77
35180: PUSH
35181: LD_EXP 77
35185: PPUSH
35186: LD_VAR 0 5
35190: PPUSH
35191: LD_EXP 77
35195: PUSH
35196: LD_VAR 0 5
35200: ARRAY
35201: PPUSH
35202: LD_INT 1
35204: PPUSH
35205: LD_VAR 0 6
35209: PPUSH
35210: CALL_OW 2
35214: PPUSH
35215: CALL_OW 1
35219: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
35220: LD_VAR 0 5
35224: PPUSH
35225: LD_INT 112
35227: PPUSH
35228: CALL 19197 0 2
// end ; end ; end ;
35232: GO 35055
35234: POP
35235: POP
// end ;
35236: LD_VAR 0 3
35240: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
35241: LD_INT 0
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
// if not mc_bases then
35251: LD_EXP 48
35255: NOT
35256: IFFALSE 35260
// exit ;
35258: GO 36185
// for i = 1 to mc_bases do
35260: LD_ADDR_VAR 0 3
35264: PUSH
35265: DOUBLE
35266: LD_INT 1
35268: DEC
35269: ST_TO_ADDR
35270: LD_EXP 48
35274: PUSH
35275: FOR_TO
35276: IFFALSE 36183
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
35278: LD_VAR 0 1
35282: PUSH
35283: LD_EXP 48
35287: PUSH
35288: LD_VAR 0 3
35292: ARRAY
35293: IN
35294: PUSH
35295: LD_VAR 0 1
35299: PUSH
35300: LD_EXP 55
35304: PUSH
35305: LD_VAR 0 3
35309: ARRAY
35310: IN
35311: OR
35312: PUSH
35313: LD_VAR 0 1
35317: PUSH
35318: LD_EXP 67
35322: PUSH
35323: LD_VAR 0 3
35327: ARRAY
35328: IN
35329: OR
35330: PUSH
35331: LD_VAR 0 1
35335: PUSH
35336: LD_EXP 77
35340: PUSH
35341: LD_VAR 0 3
35345: ARRAY
35346: IN
35347: OR
35348: PUSH
35349: LD_VAR 0 1
35353: PUSH
35354: LD_EXP 78
35358: PUSH
35359: LD_VAR 0 3
35363: ARRAY
35364: IN
35365: OR
35366: IFFALSE 36181
// begin if un in mc_ape [ i ] then
35368: LD_VAR 0 1
35372: PUSH
35373: LD_EXP 77
35377: PUSH
35378: LD_VAR 0 3
35382: ARRAY
35383: IN
35384: IFFALSE 35423
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
35386: LD_ADDR_EXP 77
35390: PUSH
35391: LD_EXP 77
35395: PPUSH
35396: LD_VAR 0 3
35400: PPUSH
35401: LD_EXP 77
35405: PUSH
35406: LD_VAR 0 3
35410: ARRAY
35411: PUSH
35412: LD_VAR 0 1
35416: DIFF
35417: PPUSH
35418: CALL_OW 1
35422: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
35423: LD_VAR 0 1
35427: PUSH
35428: LD_EXP 78
35432: PUSH
35433: LD_VAR 0 3
35437: ARRAY
35438: IN
35439: IFFALSE 35463
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35441: LD_ADDR_EXP 78
35445: PUSH
35446: LD_EXP 78
35450: PPUSH
35451: LD_VAR 0 3
35455: PPUSH
35456: EMPTY
35457: PPUSH
35458: CALL_OW 1
35462: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 247
35472: PUSH
35473: LD_INT 2
35475: EQUAL
35476: PUSH
35477: LD_VAR 0 1
35481: PPUSH
35482: CALL_OW 110
35486: PUSH
35487: LD_INT 20
35489: EQUAL
35490: AND
35491: IFFALSE 35594
// begin fac := MC_GetBuilding ( i , b_factory ) ;
35493: LD_ADDR_VAR 0 8
35497: PUSH
35498: LD_VAR 0 3
35502: PPUSH
35503: LD_INT 3
35505: PPUSH
35506: CALL 32707 0 2
35510: ST_TO_ADDR
// if fac then
35511: LD_VAR 0 8
35515: IFFALSE 35594
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
35517: LD_ADDR_VAR 0 9
35521: PUSH
35522: LD_VAR 0 8
35526: PPUSH
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL_OW 265
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 262
35546: PPUSH
35547: LD_VAR 0 1
35551: PPUSH
35552: CALL_OW 263
35556: PPUSH
35557: LD_VAR 0 1
35561: PPUSH
35562: CALL_OW 264
35566: PPUSH
35567: CALL 41507 0 5
35571: ST_TO_ADDR
// if components then
35572: LD_VAR 0 9
35576: IFFALSE 35592
// MC_InsertProduceList ( i , components ) ;
35578: LD_VAR 0 3
35582: PPUSH
35583: LD_VAR 0 9
35587: PPUSH
35588: CALL 32274 0 2
// break ;
35592: GO 36183
// end ; end ; if GetType ( un ) = unit_building then
35594: LD_VAR 0 1
35598: PPUSH
35599: CALL_OW 247
35603: PUSH
35604: LD_INT 3
35606: EQUAL
35607: IFFALSE 35904
// begin btype := GetBType ( un ) ;
35609: LD_ADDR_VAR 0 5
35613: PUSH
35614: LD_VAR 0 1
35618: PPUSH
35619: CALL_OW 266
35623: ST_TO_ADDR
// if btype = b_warehouse then
35624: LD_VAR 0 5
35628: PUSH
35629: LD_INT 1
35631: EQUAL
35632: IFFALSE 35650
// begin btype := b_depot ;
35634: LD_ADDR_VAR 0 5
35638: PUSH
35639: LD_INT 0
35641: ST_TO_ADDR
// pos := 1 ;
35642: LD_ADDR_VAR 0 6
35646: PUSH
35647: LD_INT 1
35649: ST_TO_ADDR
// end ; if btype = b_factory then
35650: LD_VAR 0 5
35654: PUSH
35655: LD_INT 3
35657: EQUAL
35658: IFFALSE 35676
// begin btype := b_workshop ;
35660: LD_ADDR_VAR 0 5
35664: PUSH
35665: LD_INT 2
35667: ST_TO_ADDR
// pos := 1 ;
35668: LD_ADDR_VAR 0 6
35672: PUSH
35673: LD_INT 1
35675: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
35676: LD_VAR 0 5
35680: PUSH
35681: LD_INT 7
35683: PUSH
35684: LD_INT 8
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: IN
35691: IFFALSE 35701
// btype := b_lab ;
35693: LD_ADDR_VAR 0 5
35697: PUSH
35698: LD_INT 6
35700: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
35701: LD_ADDR_EXP 53
35705: PUSH
35706: LD_EXP 53
35710: PPUSH
35711: LD_VAR 0 3
35715: PUSH
35716: LD_EXP 53
35720: PUSH
35721: LD_VAR 0 3
35725: ARRAY
35726: PUSH
35727: LD_INT 1
35729: PLUS
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PPUSH
35735: LD_VAR 0 5
35739: PUSH
35740: LD_VAR 0 1
35744: PPUSH
35745: CALL_OW 250
35749: PUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: CALL_OW 251
35759: PUSH
35760: LD_VAR 0 1
35764: PPUSH
35765: CALL_OW 254
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: PPUSH
35776: CALL 44342 0 3
35780: ST_TO_ADDR
// if pos = 1 then
35781: LD_VAR 0 6
35785: PUSH
35786: LD_INT 1
35788: EQUAL
35789: IFFALSE 35904
// begin tmp := mc_build_list [ i ] ;
35791: LD_ADDR_VAR 0 7
35795: PUSH
35796: LD_EXP 53
35800: PUSH
35801: LD_VAR 0 3
35805: ARRAY
35806: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35807: LD_VAR 0 7
35811: PPUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 30
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: PPUSH
35840: CALL_OW 72
35844: IFFALSE 35854
// pos := 2 ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_INT 2
35853: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
35854: LD_ADDR_VAR 0 7
35858: PUSH
35859: LD_VAR 0 7
35863: PPUSH
35864: LD_VAR 0 6
35868: PPUSH
35869: LD_VAR 0 7
35873: PPUSH
35874: CALL 44233 0 3
35878: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
35879: LD_ADDR_EXP 53
35883: PUSH
35884: LD_EXP 53
35888: PPUSH
35889: LD_VAR 0 3
35893: PPUSH
35894: LD_VAR 0 7
35898: PPUSH
35899: CALL_OW 1
35903: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
35904: LD_VAR 0 1
35908: PUSH
35909: LD_EXP 48
35913: PUSH
35914: LD_VAR 0 3
35918: ARRAY
35919: IN
35920: IFFALSE 35959
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
35922: LD_ADDR_EXP 48
35926: PUSH
35927: LD_EXP 48
35931: PPUSH
35932: LD_VAR 0 3
35936: PPUSH
35937: LD_EXP 48
35941: PUSH
35942: LD_VAR 0 3
35946: ARRAY
35947: PUSH
35948: LD_VAR 0 1
35952: DIFF
35953: PPUSH
35954: CALL_OW 1
35958: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
35959: LD_VAR 0 1
35963: PUSH
35964: LD_EXP 55
35968: PUSH
35969: LD_VAR 0 3
35973: ARRAY
35974: IN
35975: IFFALSE 36014
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
35977: LD_ADDR_EXP 55
35981: PUSH
35982: LD_EXP 55
35986: PPUSH
35987: LD_VAR 0 3
35991: PPUSH
35992: LD_EXP 55
35996: PUSH
35997: LD_VAR 0 3
36001: ARRAY
36002: PUSH
36003: LD_VAR 0 1
36007: DIFF
36008: PPUSH
36009: CALL_OW 1
36013: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
36014: LD_VAR 0 1
36018: PUSH
36019: LD_EXP 67
36023: PUSH
36024: LD_VAR 0 3
36028: ARRAY
36029: IN
36030: IFFALSE 36069
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
36032: LD_ADDR_EXP 67
36036: PUSH
36037: LD_EXP 67
36041: PPUSH
36042: LD_VAR 0 3
36046: PPUSH
36047: LD_EXP 67
36051: PUSH
36052: LD_VAR 0 3
36056: ARRAY
36057: PUSH
36058: LD_VAR 0 1
36062: DIFF
36063: PPUSH
36064: CALL_OW 1
36068: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
36069: LD_VAR 0 1
36073: PUSH
36074: LD_EXP 57
36078: PUSH
36079: LD_VAR 0 3
36083: ARRAY
36084: IN
36085: IFFALSE 36124
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
36087: LD_ADDR_EXP 57
36091: PUSH
36092: LD_EXP 57
36096: PPUSH
36097: LD_VAR 0 3
36101: PPUSH
36102: LD_EXP 57
36106: PUSH
36107: LD_VAR 0 3
36111: ARRAY
36112: PUSH
36113: LD_VAR 0 1
36117: DIFF
36118: PPUSH
36119: CALL_OW 1
36123: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
36124: LD_VAR 0 1
36128: PUSH
36129: LD_EXP 56
36133: PUSH
36134: LD_VAR 0 3
36138: ARRAY
36139: IN
36140: IFFALSE 36179
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
36142: LD_ADDR_EXP 56
36146: PUSH
36147: LD_EXP 56
36151: PPUSH
36152: LD_VAR 0 3
36156: PPUSH
36157: LD_EXP 56
36161: PUSH
36162: LD_VAR 0 3
36166: ARRAY
36167: PUSH
36168: LD_VAR 0 1
36172: DIFF
36173: PPUSH
36174: CALL_OW 1
36178: ST_TO_ADDR
// end ; break ;
36179: GO 36183
// end ;
36181: GO 35275
36183: POP
36184: POP
// end ;
36185: LD_VAR 0 2
36189: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
36190: LD_INT 0
36192: PPUSH
36193: PPUSH
36194: PPUSH
// if not mc_bases then
36195: LD_EXP 48
36199: NOT
36200: IFFALSE 36204
// exit ;
36202: GO 36419
// for i = 1 to mc_bases do
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: DOUBLE
36210: LD_INT 1
36212: DEC
36213: ST_TO_ADDR
36214: LD_EXP 48
36218: PUSH
36219: FOR_TO
36220: IFFALSE 36417
// begin if building in mc_construct_list [ i ] then
36222: LD_VAR 0 1
36226: PUSH
36227: LD_EXP 55
36231: PUSH
36232: LD_VAR 0 3
36236: ARRAY
36237: IN
36238: IFFALSE 36415
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36240: LD_ADDR_EXP 55
36244: PUSH
36245: LD_EXP 55
36249: PPUSH
36250: LD_VAR 0 3
36254: PPUSH
36255: LD_EXP 55
36259: PUSH
36260: LD_VAR 0 3
36264: ARRAY
36265: PUSH
36266: LD_VAR 0 1
36270: DIFF
36271: PPUSH
36272: CALL_OW 1
36276: ST_TO_ADDR
// if building in mc_lab [ i ] then
36277: LD_VAR 0 1
36281: PUSH
36282: LD_EXP 81
36286: PUSH
36287: LD_VAR 0 3
36291: ARRAY
36292: IN
36293: IFFALSE 36348
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
36295: LD_ADDR_EXP 82
36299: PUSH
36300: LD_EXP 82
36304: PPUSH
36305: LD_VAR 0 3
36309: PPUSH
36310: LD_EXP 82
36314: PUSH
36315: LD_VAR 0 3
36319: ARRAY
36320: PPUSH
36321: LD_INT 1
36323: PPUSH
36324: LD_EXP 82
36328: PUSH
36329: LD_VAR 0 3
36333: ARRAY
36334: PPUSH
36335: LD_INT 0
36337: PPUSH
36338: CALL 43325 0 4
36342: PPUSH
36343: CALL_OW 1
36347: ST_TO_ADDR
// if not building in mc_bases [ i ] then
36348: LD_VAR 0 1
36352: PUSH
36353: LD_EXP 48
36357: PUSH
36358: LD_VAR 0 3
36362: ARRAY
36363: IN
36364: NOT
36365: IFFALSE 36411
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36367: LD_ADDR_EXP 48
36371: PUSH
36372: LD_EXP 48
36376: PPUSH
36377: LD_VAR 0 3
36381: PUSH
36382: LD_EXP 48
36386: PUSH
36387: LD_VAR 0 3
36391: ARRAY
36392: PUSH
36393: LD_INT 1
36395: PLUS
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PPUSH
36401: LD_VAR 0 1
36405: PPUSH
36406: CALL 44342 0 3
36410: ST_TO_ADDR
// exit ;
36411: POP
36412: POP
36413: GO 36419
// end ; end ;
36415: GO 36219
36417: POP
36418: POP
// end ;
36419: LD_VAR 0 2
36423: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
36424: LD_INT 0
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
// if not mc_bases then
36433: LD_EXP 48
36437: NOT
36438: IFFALSE 36442
// exit ;
36440: GO 37103
// for i = 1 to mc_bases do
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: DOUBLE
36448: LD_INT 1
36450: DEC
36451: ST_TO_ADDR
36452: LD_EXP 48
36456: PUSH
36457: FOR_TO
36458: IFFALSE 37101
// begin if building in mc_construct_list [ i ] then
36460: LD_VAR 0 1
36464: PUSH
36465: LD_EXP 55
36469: PUSH
36470: LD_VAR 0 3
36474: ARRAY
36475: IN
36476: IFFALSE 37099
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36478: LD_ADDR_EXP 55
36482: PUSH
36483: LD_EXP 55
36487: PPUSH
36488: LD_VAR 0 3
36492: PPUSH
36493: LD_EXP 55
36497: PUSH
36498: LD_VAR 0 3
36502: ARRAY
36503: PUSH
36504: LD_VAR 0 1
36508: DIFF
36509: PPUSH
36510: CALL_OW 1
36514: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36515: LD_ADDR_EXP 48
36519: PUSH
36520: LD_EXP 48
36524: PPUSH
36525: LD_VAR 0 3
36529: PUSH
36530: LD_EXP 48
36534: PUSH
36535: LD_VAR 0 3
36539: ARRAY
36540: PUSH
36541: LD_INT 1
36543: PLUS
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PPUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: CALL 44342 0 3
36558: ST_TO_ADDR
// btype := GetBType ( building ) ;
36559: LD_ADDR_VAR 0 5
36563: PUSH
36564: LD_VAR 0 1
36568: PPUSH
36569: CALL_OW 266
36573: ST_TO_ADDR
// side := GetSide ( building ) ;
36574: LD_ADDR_VAR 0 8
36578: PUSH
36579: LD_VAR 0 1
36583: PPUSH
36584: CALL_OW 255
36588: ST_TO_ADDR
// if btype = b_lab then
36589: LD_VAR 0 5
36593: PUSH
36594: LD_INT 6
36596: EQUAL
36597: IFFALSE 36647
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
36599: LD_ADDR_EXP 81
36603: PUSH
36604: LD_EXP 81
36608: PPUSH
36609: LD_VAR 0 3
36613: PUSH
36614: LD_EXP 81
36618: PUSH
36619: LD_VAR 0 3
36623: ARRAY
36624: PUSH
36625: LD_INT 1
36627: PLUS
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: CALL 44342 0 3
36642: ST_TO_ADDR
// exit ;
36643: POP
36644: POP
36645: GO 37103
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
36647: LD_VAR 0 5
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: LD_INT 2
36657: PUSH
36658: LD_INT 4
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: IN
36666: IFFALSE 36790
// begin if btype = b_armoury then
36668: LD_VAR 0 5
36672: PUSH
36673: LD_INT 4
36675: EQUAL
36676: IFFALSE 36686
// btype := b_barracks ;
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_INT 5
36685: ST_TO_ADDR
// if btype = b_depot then
36686: LD_VAR 0 5
36690: PUSH
36691: LD_INT 0
36693: EQUAL
36694: IFFALSE 36704
// btype := b_warehouse ;
36696: LD_ADDR_VAR 0 5
36700: PUSH
36701: LD_INT 1
36703: ST_TO_ADDR
// if btype = b_workshop then
36704: LD_VAR 0 5
36708: PUSH
36709: LD_INT 2
36711: EQUAL
36712: IFFALSE 36722
// btype := b_factory ;
36714: LD_ADDR_VAR 0 5
36718: PUSH
36719: LD_INT 3
36721: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
36722: LD_VAR 0 5
36726: PPUSH
36727: LD_VAR 0 8
36731: PPUSH
36732: CALL_OW 323
36736: PUSH
36737: LD_INT 1
36739: EQUAL
36740: IFFALSE 36786
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
36742: LD_ADDR_EXP 80
36746: PUSH
36747: LD_EXP 80
36751: PPUSH
36752: LD_VAR 0 3
36756: PUSH
36757: LD_EXP 80
36761: PUSH
36762: LD_VAR 0 3
36766: ARRAY
36767: PUSH
36768: LD_INT 1
36770: PLUS
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PPUSH
36776: LD_VAR 0 1
36780: PPUSH
36781: CALL 44342 0 3
36785: ST_TO_ADDR
// exit ;
36786: POP
36787: POP
36788: GO 37103
// end ; if btype in [ b_bunker , b_turret ] then
36790: LD_VAR 0 5
36794: PUSH
36795: LD_INT 32
36797: PUSH
36798: LD_INT 33
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: IN
36805: IFFALSE 37095
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
36807: LD_ADDR_EXP 56
36811: PUSH
36812: LD_EXP 56
36816: PPUSH
36817: LD_VAR 0 3
36821: PUSH
36822: LD_EXP 56
36826: PUSH
36827: LD_VAR 0 3
36831: ARRAY
36832: PUSH
36833: LD_INT 1
36835: PLUS
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PPUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL 44342 0 3
36850: ST_TO_ADDR
// if btype = b_bunker then
36851: LD_VAR 0 5
36855: PUSH
36856: LD_INT 32
36858: EQUAL
36859: IFFALSE 37095
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
36861: LD_ADDR_EXP 57
36865: PUSH
36866: LD_EXP 57
36870: PPUSH
36871: LD_VAR 0 3
36875: PUSH
36876: LD_EXP 57
36880: PUSH
36881: LD_VAR 0 3
36885: ARRAY
36886: PUSH
36887: LD_INT 1
36889: PLUS
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PPUSH
36895: LD_VAR 0 1
36899: PPUSH
36900: CALL 44342 0 3
36904: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
36905: LD_ADDR_VAR 0 6
36909: PUSH
36910: LD_EXP 48
36914: PUSH
36915: LD_VAR 0 3
36919: ARRAY
36920: PPUSH
36921: LD_INT 25
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 3
36933: PUSH
36934: LD_INT 54
36936: PUSH
36937: EMPTY
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PPUSH
36948: CALL_OW 72
36952: ST_TO_ADDR
// if tmp then
36953: LD_VAR 0 6
36957: IFFALSE 36963
// exit ;
36959: POP
36960: POP
36961: GO 37103
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36963: LD_ADDR_VAR 0 6
36967: PUSH
36968: LD_EXP 48
36972: PUSH
36973: LD_VAR 0 3
36977: ARRAY
36978: PPUSH
36979: LD_INT 2
36981: PUSH
36982: LD_INT 30
36984: PUSH
36985: LD_INT 4
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 30
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: PPUSH
37007: CALL_OW 72
37011: ST_TO_ADDR
// if not tmp then
37012: LD_VAR 0 6
37016: NOT
37017: IFFALSE 37023
// exit ;
37019: POP
37020: POP
37021: GO 37103
// for j in tmp do
37023: LD_ADDR_VAR 0 4
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: FOR_IN
37034: IFFALSE 37093
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
37036: LD_ADDR_VAR 0 7
37040: PUSH
37041: LD_VAR 0 4
37045: PPUSH
37046: CALL_OW 313
37050: PPUSH
37051: LD_INT 25
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PPUSH
37061: CALL_OW 72
37065: ST_TO_ADDR
// if units then
37066: LD_VAR 0 7
37070: IFFALSE 37091
// begin ComExitBuilding ( units [ 1 ] ) ;
37072: LD_VAR 0 7
37076: PUSH
37077: LD_INT 1
37079: ARRAY
37080: PPUSH
37081: CALL_OW 122
// exit ;
37085: POP
37086: POP
37087: POP
37088: POP
37089: GO 37103
// end ; end ;
37091: GO 37033
37093: POP
37094: POP
// end ; end ; exit ;
37095: POP
37096: POP
37097: GO 37103
// end ; end ;
37099: GO 36457
37101: POP
37102: POP
// end ;
37103: LD_VAR 0 2
37107: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
37108: LD_INT 0
37110: PPUSH
37111: PPUSH
37112: PPUSH
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
// if not mc_bases then
37117: LD_EXP 48
37121: NOT
37122: IFFALSE 37126
// exit ;
37124: GO 37357
// btype := GetBType ( building ) ;
37126: LD_ADDR_VAR 0 6
37130: PUSH
37131: LD_VAR 0 1
37135: PPUSH
37136: CALL_OW 266
37140: ST_TO_ADDR
// x := GetX ( building ) ;
37141: LD_ADDR_VAR 0 7
37145: PUSH
37146: LD_VAR 0 1
37150: PPUSH
37151: CALL_OW 250
37155: ST_TO_ADDR
// y := GetY ( building ) ;
37156: LD_ADDR_VAR 0 8
37160: PUSH
37161: LD_VAR 0 1
37165: PPUSH
37166: CALL_OW 251
37170: ST_TO_ADDR
// d := GetDir ( building ) ;
37171: LD_ADDR_VAR 0 9
37175: PUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 254
37185: ST_TO_ADDR
// for i = 1 to mc_bases do
37186: LD_ADDR_VAR 0 4
37190: PUSH
37191: DOUBLE
37192: LD_INT 1
37194: DEC
37195: ST_TO_ADDR
37196: LD_EXP 48
37200: PUSH
37201: FOR_TO
37202: IFFALSE 37355
// begin if not mc_build_list [ i ] then
37204: LD_EXP 53
37208: PUSH
37209: LD_VAR 0 4
37213: ARRAY
37214: NOT
37215: IFFALSE 37219
// continue ;
37217: GO 37201
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
37219: LD_VAR 0 6
37223: PUSH
37224: LD_VAR 0 7
37228: PUSH
37229: LD_VAR 0 8
37233: PUSH
37234: LD_VAR 0 9
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: PPUSH
37245: LD_EXP 53
37249: PUSH
37250: LD_VAR 0 4
37254: ARRAY
37255: PUSH
37256: LD_INT 1
37258: ARRAY
37259: PPUSH
37260: CALL 49829 0 2
37264: IFFALSE 37353
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
37266: LD_ADDR_EXP 53
37270: PUSH
37271: LD_EXP 53
37275: PPUSH
37276: LD_VAR 0 4
37280: PPUSH
37281: LD_EXP 53
37285: PUSH
37286: LD_VAR 0 4
37290: ARRAY
37291: PPUSH
37292: LD_INT 1
37294: PPUSH
37295: CALL_OW 3
37299: PPUSH
37300: CALL_OW 1
37304: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
37305: LD_ADDR_EXP 55
37309: PUSH
37310: LD_EXP 55
37314: PPUSH
37315: LD_VAR 0 4
37319: PUSH
37320: LD_EXP 55
37324: PUSH
37325: LD_VAR 0 4
37329: ARRAY
37330: PUSH
37331: LD_INT 1
37333: PLUS
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PPUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL 44342 0 3
37348: ST_TO_ADDR
// exit ;
37349: POP
37350: POP
37351: GO 37357
// end ; end ;
37353: GO 37201
37355: POP
37356: POP
// end ;
37357: LD_VAR 0 3
37361: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
37362: LD_INT 0
37364: PPUSH
37365: PPUSH
37366: PPUSH
// if not mc_bases then
37367: LD_EXP 48
37371: NOT
37372: IFFALSE 37376
// exit ;
37374: GO 37566
// for i = 1 to mc_bases do
37376: LD_ADDR_VAR 0 4
37380: PUSH
37381: DOUBLE
37382: LD_INT 1
37384: DEC
37385: ST_TO_ADDR
37386: LD_EXP 48
37390: PUSH
37391: FOR_TO
37392: IFFALSE 37479
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
37394: LD_VAR 0 1
37398: PUSH
37399: LD_EXP 56
37403: PUSH
37404: LD_VAR 0 4
37408: ARRAY
37409: IN
37410: PUSH
37411: LD_VAR 0 1
37415: PUSH
37416: LD_EXP 57
37420: PUSH
37421: LD_VAR 0 4
37425: ARRAY
37426: IN
37427: NOT
37428: AND
37429: IFFALSE 37477
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37431: LD_ADDR_EXP 57
37435: PUSH
37436: LD_EXP 57
37440: PPUSH
37441: LD_VAR 0 4
37445: PUSH
37446: LD_EXP 57
37450: PUSH
37451: LD_VAR 0 4
37455: ARRAY
37456: PUSH
37457: LD_INT 1
37459: PLUS
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PPUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL 44342 0 3
37474: ST_TO_ADDR
// break ;
37475: GO 37479
// end ; end ;
37477: GO 37391
37479: POP
37480: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
37481: LD_VAR 0 1
37485: PPUSH
37486: CALL_OW 257
37490: PUSH
37491: LD_EXP 74
37495: IN
37496: PUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 266
37506: PUSH
37507: LD_INT 5
37509: EQUAL
37510: AND
37511: PUSH
37512: LD_VAR 0 2
37516: PPUSH
37517: CALL_OW 110
37521: PUSH
37522: LD_INT 18
37524: NONEQUAL
37525: AND
37526: IFFALSE 37566
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
37528: LD_VAR 0 2
37532: PPUSH
37533: CALL_OW 257
37537: PUSH
37538: LD_INT 5
37540: PUSH
37541: LD_INT 8
37543: PUSH
37544: LD_INT 9
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: IN
37552: IFFALSE 37566
// SetClass ( unit , 1 ) ;
37554: LD_VAR 0 2
37558: PPUSH
37559: LD_INT 1
37561: PPUSH
37562: CALL_OW 336
// end ;
37566: LD_VAR 0 3
37570: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
// if not mc_bases then
37575: LD_EXP 48
37579: NOT
37580: IFFALSE 37584
// exit ;
37582: GO 37700
// if GetLives ( abandoned_vehicle ) > 250 then
37584: LD_VAR 0 2
37588: PPUSH
37589: CALL_OW 256
37593: PUSH
37594: LD_INT 250
37596: GREATER
37597: IFFALSE 37601
// exit ;
37599: GO 37700
// for i = 1 to mc_bases do
37601: LD_ADDR_VAR 0 6
37605: PUSH
37606: DOUBLE
37607: LD_INT 1
37609: DEC
37610: ST_TO_ADDR
37611: LD_EXP 48
37615: PUSH
37616: FOR_TO
37617: IFFALSE 37698
// begin if driver in mc_bases [ i ] then
37619: LD_VAR 0 1
37623: PUSH
37624: LD_EXP 48
37628: PUSH
37629: LD_VAR 0 6
37633: ARRAY
37634: IN
37635: IFFALSE 37696
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
37637: LD_VAR 0 1
37641: PPUSH
37642: LD_EXP 48
37646: PUSH
37647: LD_VAR 0 6
37651: ARRAY
37652: PPUSH
37653: LD_INT 2
37655: PUSH
37656: LD_INT 30
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 30
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: LIST
37680: PPUSH
37681: CALL_OW 72
37685: PUSH
37686: LD_INT 1
37688: ARRAY
37689: PPUSH
37690: CALL_OW 112
// break ;
37694: GO 37698
// end ; end ;
37696: GO 37616
37698: POP
37699: POP
// end ; end_of_file
37700: LD_VAR 0 5
37704: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37705: LD_INT 0
37707: PPUSH
37708: PPUSH
// if exist_mode then
37709: LD_VAR 0 2
37713: IFFALSE 37738
// unit := CreateCharacter ( prefix & ident ) else
37715: LD_ADDR_VAR 0 5
37719: PUSH
37720: LD_VAR 0 3
37724: PUSH
37725: LD_VAR 0 1
37729: STR
37730: PPUSH
37731: CALL_OW 34
37735: ST_TO_ADDR
37736: GO 37753
// unit := NewCharacter ( ident ) ;
37738: LD_ADDR_VAR 0 5
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 25
37752: ST_TO_ADDR
// result := unit ;
37753: LD_ADDR_VAR 0 4
37757: PUSH
37758: LD_VAR 0 5
37762: ST_TO_ADDR
// end ;
37763: LD_VAR 0 4
37767: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
// if not side or not nation then
37772: LD_VAR 0 1
37776: NOT
37777: PUSH
37778: LD_VAR 0 2
37782: NOT
37783: OR
37784: IFFALSE 37788
// exit ;
37786: GO 38408
// case nation of nation_american :
37788: LD_VAR 0 2
37792: PUSH
37793: LD_INT 1
37795: DOUBLE
37796: EQUAL
37797: IFTRUE 37801
37799: GO 37967
37801: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
37802: LD_ADDR_VAR 0 4
37806: PUSH
37807: LD_INT 35
37809: PUSH
37810: LD_INT 45
37812: PUSH
37813: LD_INT 46
37815: PUSH
37816: LD_INT 47
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 6
37827: PUSH
37828: LD_INT 15
37830: PUSH
37831: LD_INT 16
37833: PUSH
37834: LD_INT 7
37836: PUSH
37837: LD_INT 12
37839: PUSH
37840: LD_INT 13
37842: PUSH
37843: LD_INT 10
37845: PUSH
37846: LD_INT 14
37848: PUSH
37849: LD_INT 20
37851: PUSH
37852: LD_INT 25
37854: PUSH
37855: LD_INT 32
37857: PUSH
37858: LD_INT 27
37860: PUSH
37861: LD_INT 36
37863: PUSH
37864: LD_INT 69
37866: PUSH
37867: LD_INT 39
37869: PUSH
37870: LD_INT 34
37872: PUSH
37873: LD_INT 40
37875: PUSH
37876: LD_INT 48
37878: PUSH
37879: LD_INT 49
37881: PUSH
37882: LD_INT 50
37884: PUSH
37885: LD_INT 51
37887: PUSH
37888: LD_INT 52
37890: PUSH
37891: LD_INT 53
37893: PUSH
37894: LD_INT 54
37896: PUSH
37897: LD_INT 55
37899: PUSH
37900: LD_INT 56
37902: PUSH
37903: LD_INT 57
37905: PUSH
37906: LD_INT 58
37908: PUSH
37909: LD_INT 59
37911: PUSH
37912: LD_INT 60
37914: PUSH
37915: LD_INT 61
37917: PUSH
37918: LD_INT 62
37920: PUSH
37921: LD_INT 80
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
37965: GO 38332
37967: LD_INT 2
37969: DOUBLE
37970: EQUAL
37971: IFTRUE 37975
37973: GO 38145
37975: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
37976: LD_ADDR_VAR 0 4
37980: PUSH
37981: LD_INT 35
37983: PUSH
37984: LD_INT 45
37986: PUSH
37987: LD_INT 46
37989: PUSH
37990: LD_INT 47
37992: PUSH
37993: LD_INT 70
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 11
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: LD_INT 5
38010: PUSH
38011: LD_INT 6
38013: PUSH
38014: LD_INT 15
38016: PUSH
38017: LD_INT 18
38019: PUSH
38020: LD_INT 7
38022: PUSH
38023: LD_INT 17
38025: PUSH
38026: LD_INT 8
38028: PUSH
38029: LD_INT 20
38031: PUSH
38032: LD_INT 72
38034: PUSH
38035: LD_INT 26
38037: PUSH
38038: LD_INT 69
38040: PUSH
38041: LD_INT 39
38043: PUSH
38044: LD_INT 40
38046: PUSH
38047: LD_INT 41
38049: PUSH
38050: LD_INT 42
38052: PUSH
38053: LD_INT 43
38055: PUSH
38056: LD_INT 48
38058: PUSH
38059: LD_INT 49
38061: PUSH
38062: LD_INT 50
38064: PUSH
38065: LD_INT 51
38067: PUSH
38068: LD_INT 52
38070: PUSH
38071: LD_INT 53
38073: PUSH
38074: LD_INT 54
38076: PUSH
38077: LD_INT 55
38079: PUSH
38080: LD_INT 56
38082: PUSH
38083: LD_INT 60
38085: PUSH
38086: LD_INT 61
38088: PUSH
38089: LD_INT 62
38091: PUSH
38092: LD_INT 66
38094: PUSH
38095: LD_INT 67
38097: PUSH
38098: LD_INT 68
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: ST_TO_ADDR
38143: GO 38332
38145: LD_INT 3
38147: DOUBLE
38148: EQUAL
38149: IFTRUE 38153
38151: GO 38331
38153: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
38154: LD_ADDR_VAR 0 4
38158: PUSH
38159: LD_INT 46
38161: PUSH
38162: LD_INT 47
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 2
38170: PUSH
38171: LD_INT 11
38173: PUSH
38174: LD_INT 9
38176: PUSH
38177: LD_INT 20
38179: PUSH
38180: LD_INT 19
38182: PUSH
38183: LD_INT 21
38185: PUSH
38186: LD_INT 24
38188: PUSH
38189: LD_INT 22
38191: PUSH
38192: LD_INT 25
38194: PUSH
38195: LD_INT 28
38197: PUSH
38198: LD_INT 29
38200: PUSH
38201: LD_INT 31
38203: PUSH
38204: LD_INT 37
38206: PUSH
38207: LD_INT 38
38209: PUSH
38210: LD_INT 32
38212: PUSH
38213: LD_INT 27
38215: PUSH
38216: LD_INT 33
38218: PUSH
38219: LD_INT 69
38221: PUSH
38222: LD_INT 39
38224: PUSH
38225: LD_INT 34
38227: PUSH
38228: LD_INT 40
38230: PUSH
38231: LD_INT 71
38233: PUSH
38234: LD_INT 23
38236: PUSH
38237: LD_INT 44
38239: PUSH
38240: LD_INT 48
38242: PUSH
38243: LD_INT 49
38245: PUSH
38246: LD_INT 50
38248: PUSH
38249: LD_INT 51
38251: PUSH
38252: LD_INT 52
38254: PUSH
38255: LD_INT 53
38257: PUSH
38258: LD_INT 54
38260: PUSH
38261: LD_INT 55
38263: PUSH
38264: LD_INT 56
38266: PUSH
38267: LD_INT 57
38269: PUSH
38270: LD_INT 58
38272: PUSH
38273: LD_INT 59
38275: PUSH
38276: LD_INT 63
38278: PUSH
38279: LD_INT 64
38281: PUSH
38282: LD_INT 65
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: ST_TO_ADDR
38329: GO 38332
38331: POP
// if state > - 1 and state < 3 then
38332: LD_VAR 0 3
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: GREATER
38341: PUSH
38342: LD_VAR 0 3
38346: PUSH
38347: LD_INT 3
38349: LESS
38350: AND
38351: IFFALSE 38408
// for i in result do
38353: LD_ADDR_VAR 0 5
38357: PUSH
38358: LD_VAR 0 4
38362: PUSH
38363: FOR_IN
38364: IFFALSE 38406
// if GetTech ( i , side ) <> state then
38366: LD_VAR 0 5
38370: PPUSH
38371: LD_VAR 0 1
38375: PPUSH
38376: CALL_OW 321
38380: PUSH
38381: LD_VAR 0 3
38385: NONEQUAL
38386: IFFALSE 38404
// result := result diff i ;
38388: LD_ADDR_VAR 0 4
38392: PUSH
38393: LD_VAR 0 4
38397: PUSH
38398: LD_VAR 0 5
38402: DIFF
38403: ST_TO_ADDR
38404: GO 38363
38406: POP
38407: POP
// end ;
38408: LD_VAR 0 4
38412: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38413: LD_INT 0
38415: PPUSH
38416: PPUSH
38417: PPUSH
// result := true ;
38418: LD_ADDR_VAR 0 3
38422: PUSH
38423: LD_INT 1
38425: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38426: LD_ADDR_VAR 0 5
38430: PUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: CALL_OW 480
38440: ST_TO_ADDR
// if not tmp then
38441: LD_VAR 0 5
38445: NOT
38446: IFFALSE 38450
// exit ;
38448: GO 38499
// for i in tmp do
38450: LD_ADDR_VAR 0 4
38454: PUSH
38455: LD_VAR 0 5
38459: PUSH
38460: FOR_IN
38461: IFFALSE 38497
// if GetTech ( i , side ) <> state_researched then
38463: LD_VAR 0 4
38467: PPUSH
38468: LD_VAR 0 1
38472: PPUSH
38473: CALL_OW 321
38477: PUSH
38478: LD_INT 2
38480: NONEQUAL
38481: IFFALSE 38495
// begin result := false ;
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_INT 0
38490: ST_TO_ADDR
// exit ;
38491: POP
38492: POP
38493: GO 38499
// end ;
38495: GO 38460
38497: POP
38498: POP
// end ;
38499: LD_VAR 0 3
38503: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38504: LD_INT 0
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38519: LD_VAR 0 1
38523: NOT
38524: PUSH
38525: LD_VAR 0 1
38529: PPUSH
38530: CALL_OW 257
38534: PUSH
38535: LD_INT 9
38537: NONEQUAL
38538: OR
38539: IFFALSE 38543
// exit ;
38541: GO 39116
// side := GetSide ( unit ) ;
38543: LD_ADDR_VAR 0 9
38547: PUSH
38548: LD_VAR 0 1
38552: PPUSH
38553: CALL_OW 255
38557: ST_TO_ADDR
// tech_space := tech_spacanom ;
38558: LD_ADDR_VAR 0 12
38562: PUSH
38563: LD_INT 29
38565: ST_TO_ADDR
// tech_time := tech_taurad ;
38566: LD_ADDR_VAR 0 13
38570: PUSH
38571: LD_INT 28
38573: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38574: LD_ADDR_VAR 0 11
38578: PUSH
38579: LD_VAR 0 1
38583: PPUSH
38584: CALL_OW 310
38588: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38589: LD_VAR 0 11
38593: PPUSH
38594: CALL_OW 247
38598: PUSH
38599: LD_INT 2
38601: EQUAL
38602: IFFALSE 38606
// exit ;
38604: GO 39116
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38606: LD_ADDR_VAR 0 8
38610: PUSH
38611: LD_INT 81
38613: PUSH
38614: LD_VAR 0 9
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: PUSH
38626: LD_INT 21
38628: PUSH
38629: LD_INT 3
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PPUSH
38644: CALL_OW 69
38648: ST_TO_ADDR
// if not tmp then
38649: LD_VAR 0 8
38653: NOT
38654: IFFALSE 38658
// exit ;
38656: GO 39116
// if in_unit then
38658: LD_VAR 0 11
38662: IFFALSE 38686
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38664: LD_ADDR_VAR 0 10
38668: PUSH
38669: LD_VAR 0 8
38673: PPUSH
38674: LD_VAR 0 11
38678: PPUSH
38679: CALL_OW 74
38683: ST_TO_ADDR
38684: GO 38706
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38686: LD_ADDR_VAR 0 10
38690: PUSH
38691: LD_VAR 0 8
38695: PPUSH
38696: LD_VAR 0 1
38700: PPUSH
38701: CALL_OW 74
38705: ST_TO_ADDR
// if not enemy then
38706: LD_VAR 0 10
38710: NOT
38711: IFFALSE 38715
// exit ;
38713: GO 39116
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38715: LD_VAR 0 11
38719: PUSH
38720: LD_VAR 0 11
38724: PPUSH
38725: LD_VAR 0 10
38729: PPUSH
38730: CALL_OW 296
38734: PUSH
38735: LD_INT 13
38737: GREATER
38738: AND
38739: PUSH
38740: LD_VAR 0 1
38744: PPUSH
38745: LD_VAR 0 10
38749: PPUSH
38750: CALL_OW 296
38754: PUSH
38755: LD_INT 12
38757: GREATER
38758: OR
38759: IFFALSE 38763
// exit ;
38761: GO 39116
// missile := [ 1 ] ;
38763: LD_ADDR_VAR 0 14
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38774: LD_VAR 0 9
38778: PPUSH
38779: LD_VAR 0 12
38783: PPUSH
38784: CALL_OW 325
38788: IFFALSE 38817
// missile := Insert ( missile , missile + 1 , 2 ) ;
38790: LD_ADDR_VAR 0 14
38794: PUSH
38795: LD_VAR 0 14
38799: PPUSH
38800: LD_VAR 0 14
38804: PUSH
38805: LD_INT 1
38807: PLUS
38808: PPUSH
38809: LD_INT 2
38811: PPUSH
38812: CALL_OW 2
38816: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38817: LD_VAR 0 9
38821: PPUSH
38822: LD_VAR 0 13
38826: PPUSH
38827: CALL_OW 325
38831: PUSH
38832: LD_VAR 0 10
38836: PPUSH
38837: CALL_OW 255
38841: PPUSH
38842: LD_VAR 0 13
38846: PPUSH
38847: CALL_OW 325
38851: NOT
38852: AND
38853: IFFALSE 38882
// missile := Insert ( missile , missile + 1 , 3 ) ;
38855: LD_ADDR_VAR 0 14
38859: PUSH
38860: LD_VAR 0 14
38864: PPUSH
38865: LD_VAR 0 14
38869: PUSH
38870: LD_INT 1
38872: PLUS
38873: PPUSH
38874: LD_INT 3
38876: PPUSH
38877: CALL_OW 2
38881: ST_TO_ADDR
// if missile < 2 then
38882: LD_VAR 0 14
38886: PUSH
38887: LD_INT 2
38889: LESS
38890: IFFALSE 38894
// exit ;
38892: GO 39116
// x := GetX ( enemy ) ;
38894: LD_ADDR_VAR 0 4
38898: PUSH
38899: LD_VAR 0 10
38903: PPUSH
38904: CALL_OW 250
38908: ST_TO_ADDR
// y := GetY ( enemy ) ;
38909: LD_ADDR_VAR 0 5
38913: PUSH
38914: LD_VAR 0 10
38918: PPUSH
38919: CALL_OW 251
38923: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38924: LD_ADDR_VAR 0 6
38928: PUSH
38929: LD_VAR 0 4
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PPUSH
38938: LD_INT 1
38940: PPUSH
38941: CALL_OW 12
38945: PLUS
38946: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38947: LD_ADDR_VAR 0 7
38951: PUSH
38952: LD_VAR 0 5
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PPUSH
38961: LD_INT 1
38963: PPUSH
38964: CALL_OW 12
38968: PLUS
38969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38970: LD_VAR 0 6
38974: PPUSH
38975: LD_VAR 0 7
38979: PPUSH
38980: CALL_OW 488
38984: NOT
38985: IFFALSE 39007
// begin _x := x ;
38987: LD_ADDR_VAR 0 6
38991: PUSH
38992: LD_VAR 0 4
38996: ST_TO_ADDR
// _y := y ;
38997: LD_ADDR_VAR 0 7
39001: PUSH
39002: LD_VAR 0 5
39006: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39007: LD_ADDR_VAR 0 3
39011: PUSH
39012: LD_INT 1
39014: PPUSH
39015: LD_VAR 0 14
39019: PPUSH
39020: CALL_OW 12
39024: ST_TO_ADDR
// case i of 1 :
39025: LD_VAR 0 3
39029: PUSH
39030: LD_INT 1
39032: DOUBLE
39033: EQUAL
39034: IFTRUE 39038
39036: GO 39055
39038: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39039: LD_VAR 0 1
39043: PPUSH
39044: LD_VAR 0 10
39048: PPUSH
39049: CALL_OW 115
39053: GO 39116
39055: LD_INT 2
39057: DOUBLE
39058: EQUAL
39059: IFTRUE 39063
39061: GO 39085
39063: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39064: LD_VAR 0 1
39068: PPUSH
39069: LD_VAR 0 6
39073: PPUSH
39074: LD_VAR 0 7
39078: PPUSH
39079: CALL_OW 153
39083: GO 39116
39085: LD_INT 3
39087: DOUBLE
39088: EQUAL
39089: IFTRUE 39093
39091: GO 39115
39093: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39094: LD_VAR 0 1
39098: PPUSH
39099: LD_VAR 0 6
39103: PPUSH
39104: LD_VAR 0 7
39108: PPUSH
39109: CALL_OW 154
39113: GO 39116
39115: POP
// end ;
39116: LD_VAR 0 2
39120: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39121: LD_INT 0
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
// if not unit or not building then
39129: LD_VAR 0 1
39133: NOT
39134: PUSH
39135: LD_VAR 0 2
39139: NOT
39140: OR
39141: IFFALSE 39145
// exit ;
39143: GO 39300
// x := GetX ( building ) ;
39145: LD_ADDR_VAR 0 5
39149: PUSH
39150: LD_VAR 0 2
39154: PPUSH
39155: CALL_OW 250
39159: ST_TO_ADDR
// y := GetY ( building ) ;
39160: LD_ADDR_VAR 0 6
39164: PUSH
39165: LD_VAR 0 2
39169: PPUSH
39170: CALL_OW 251
39174: ST_TO_ADDR
// for i = 0 to 5 do
39175: LD_ADDR_VAR 0 4
39179: PUSH
39180: DOUBLE
39181: LD_INT 0
39183: DEC
39184: ST_TO_ADDR
39185: LD_INT 5
39187: PUSH
39188: FOR_TO
39189: IFFALSE 39298
// begin _x := ShiftX ( x , i , 3 ) ;
39191: LD_ADDR_VAR 0 7
39195: PUSH
39196: LD_VAR 0 5
39200: PPUSH
39201: LD_VAR 0 4
39205: PPUSH
39206: LD_INT 3
39208: PPUSH
39209: CALL_OW 272
39213: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39214: LD_ADDR_VAR 0 8
39218: PUSH
39219: LD_VAR 0 6
39223: PPUSH
39224: LD_VAR 0 4
39228: PPUSH
39229: LD_INT 3
39231: PPUSH
39232: CALL_OW 273
39236: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
39237: LD_VAR 0 7
39241: PPUSH
39242: LD_VAR 0 8
39246: PPUSH
39247: CALL_OW 428
39251: PUSH
39252: LD_INT 0
39254: EQUAL
39255: PUSH
39256: LD_VAR 0 7
39260: PPUSH
39261: LD_VAR 0 8
39265: PPUSH
39266: CALL_OW 488
39270: AND
39271: IFFALSE 39296
// begin ComMoveXY ( unit , _x , _y ) ;
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_VAR 0 7
39282: PPUSH
39283: LD_VAR 0 8
39287: PPUSH
39288: CALL_OW 111
// exit ;
39292: POP
39293: POP
39294: GO 39300
// end ; end ;
39296: GO 39188
39298: POP
39299: POP
// end ;
39300: LD_VAR 0 3
39304: RET
// export function ScanBase ( side , base_area ) ; begin
39305: LD_INT 0
39307: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39308: LD_ADDR_VAR 0 3
39312: PUSH
39313: LD_VAR 0 2
39317: PPUSH
39318: LD_INT 81
39320: PUSH
39321: LD_VAR 0 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PPUSH
39330: CALL_OW 70
39334: ST_TO_ADDR
// end ;
39335: LD_VAR 0 3
39339: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
39340: LD_INT 0
39342: PPUSH
39343: PPUSH
39344: PPUSH
39345: PPUSH
39346: PPUSH
39347: PPUSH
39348: PPUSH
39349: PPUSH
39350: PPUSH
39351: PPUSH
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
39358: LD_ADDR_VAR 0 12
39362: PUSH
39363: LD_EXP 48
39367: PUSH
39368: LD_VAR 0 1
39372: ARRAY
39373: PPUSH
39374: LD_INT 25
39376: PUSH
39377: LD_INT 3
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PPUSH
39384: CALL_OW 72
39388: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
39389: LD_ADDR_VAR 0 8
39393: PUSH
39394: LD_EXP 48
39398: PUSH
39399: LD_VAR 0 1
39403: ARRAY
39404: PPUSH
39405: LD_INT 2
39407: PUSH
39408: LD_INT 25
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 25
39420: PUSH
39421: LD_INT 5
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 25
39430: PUSH
39431: LD_INT 8
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 25
39440: PUSH
39441: LD_INT 9
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: PPUSH
39455: CALL_OW 72
39459: ST_TO_ADDR
// if not defenders and not solds then
39460: LD_VAR 0 2
39464: NOT
39465: PUSH
39466: LD_VAR 0 8
39470: NOT
39471: AND
39472: IFFALSE 39476
// exit ;
39474: GO 40842
// depot_under_attack := false ;
39476: LD_ADDR_VAR 0 16
39480: PUSH
39481: LD_INT 0
39483: ST_TO_ADDR
// sold_defenders := [ ] ;
39484: LD_ADDR_VAR 0 17
39488: PUSH
39489: EMPTY
39490: ST_TO_ADDR
// if mechs then
39491: LD_VAR 0 12
39495: IFFALSE 39624
// for i in defenders do
39497: LD_ADDR_VAR 0 5
39501: PUSH
39502: LD_VAR 0 2
39506: PUSH
39507: FOR_IN
39508: IFFALSE 39622
// begin SetTag ( i , 20 ) ;
39510: LD_VAR 0 5
39514: PPUSH
39515: LD_INT 20
39517: PPUSH
39518: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
39522: LD_VAR 0 5
39526: PPUSH
39527: CALL_OW 263
39531: PUSH
39532: LD_INT 1
39534: EQUAL
39535: PUSH
39536: LD_VAR 0 5
39540: PPUSH
39541: CALL_OW 311
39545: NOT
39546: AND
39547: PUSH
39548: LD_VAR 0 12
39552: AND
39553: IFFALSE 39620
// begin un := mechs [ 1 ] ;
39555: LD_ADDR_VAR 0 10
39559: PUSH
39560: LD_VAR 0 12
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: ST_TO_ADDR
// ComExitBuilding ( un ) ;
39569: LD_VAR 0 10
39573: PPUSH
39574: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
39578: LD_VAR 0 10
39582: PPUSH
39583: LD_VAR 0 5
39587: PPUSH
39588: CALL_OW 180
// SetTag ( un , 19 ) ;
39592: LD_VAR 0 10
39596: PPUSH
39597: LD_INT 19
39599: PPUSH
39600: CALL_OW 109
// mechs := mechs diff un ;
39604: LD_ADDR_VAR 0 12
39608: PUSH
39609: LD_VAR 0 12
39613: PUSH
39614: LD_VAR 0 10
39618: DIFF
39619: ST_TO_ADDR
// end ; end ;
39620: GO 39507
39622: POP
39623: POP
// if solds then
39624: LD_VAR 0 8
39628: IFFALSE 39687
// for i in solds do
39630: LD_ADDR_VAR 0 5
39634: PUSH
39635: LD_VAR 0 8
39639: PUSH
39640: FOR_IN
39641: IFFALSE 39685
// if not GetTag ( i ) then
39643: LD_VAR 0 5
39647: PPUSH
39648: CALL_OW 110
39652: NOT
39653: IFFALSE 39683
// begin defenders := defenders union i ;
39655: LD_ADDR_VAR 0 2
39659: PUSH
39660: LD_VAR 0 2
39664: PUSH
39665: LD_VAR 0 5
39669: UNION
39670: ST_TO_ADDR
// SetTag ( i , 18 ) ;
39671: LD_VAR 0 5
39675: PPUSH
39676: LD_INT 18
39678: PPUSH
39679: CALL_OW 109
// end ;
39683: GO 39640
39685: POP
39686: POP
// repeat wait ( 0 0$1 ) ;
39687: LD_INT 35
39689: PPUSH
39690: CALL_OW 67
// enemy := mc_scan [ base ] ;
39694: LD_ADDR_VAR 0 3
39698: PUSH
39699: LD_EXP 71
39703: PUSH
39704: LD_VAR 0 1
39708: ARRAY
39709: ST_TO_ADDR
// for i in defenders do
39710: LD_ADDR_VAR 0 5
39714: PUSH
39715: LD_VAR 0 2
39719: PUSH
39720: FOR_IN
39721: IFFALSE 40406
// begin e := NearestUnitToUnit ( enemy , i ) ;
39723: LD_ADDR_VAR 0 13
39727: PUSH
39728: LD_VAR 0 3
39732: PPUSH
39733: LD_VAR 0 5
39737: PPUSH
39738: CALL_OW 74
39742: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
39743: LD_ADDR_VAR 0 16
39747: PUSH
39748: LD_EXP 48
39752: PUSH
39753: LD_VAR 0 1
39757: ARRAY
39758: PPUSH
39759: LD_INT 2
39761: PUSH
39762: LD_INT 30
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 1
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PPUSH
39787: CALL_OW 72
39791: NOT
39792: PUSH
39793: LD_EXP 48
39797: PUSH
39798: LD_VAR 0 1
39802: ARRAY
39803: PPUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 30
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 30
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: PPUSH
39832: CALL_OW 72
39836: PPUSH
39837: CALL_OW 256
39841: PUSH
39842: LD_INT 600
39844: LESS
39845: OR
39846: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
39847: LD_VAR 0 5
39851: PPUSH
39852: CALL_OW 247
39856: PUSH
39857: LD_INT 2
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39865
39863: GO 40112
39865: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
39866: LD_VAR 0 5
39870: PPUSH
39871: CALL_OW 256
39875: PUSH
39876: LD_INT 650
39878: GREATER
39879: PUSH
39880: LD_VAR 0 5
39884: PPUSH
39885: LD_VAR 0 13
39889: PPUSH
39890: CALL_OW 296
39894: PUSH
39895: LD_INT 40
39897: LESS
39898: AND
39899: IFFALSE 39917
// ComAttackUnit ( i , e ) else
39901: LD_VAR 0 5
39905: PPUSH
39906: LD_VAR 0 13
39910: PPUSH
39911: CALL_OW 115
39915: GO 39995
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
39917: LD_VAR 0 5
39921: PPUSH
39922: LD_VAR 0 13
39926: PPUSH
39927: CALL_OW 296
39931: PUSH
39932: LD_INT 30
39934: GREATEREQUAL
39935: PUSH
39936: LD_VAR 0 5
39940: PPUSH
39941: CALL_OW 256
39945: PUSH
39946: LD_INT 650
39948: LESSEQUAL
39949: OR
39950: PUSH
39951: LD_VAR 0 5
39955: PPUSH
39956: LD_EXP 72
39960: PUSH
39961: LD_VAR 0 1
39965: ARRAY
39966: PPUSH
39967: CALL_OW 308
39971: NOT
39972: AND
39973: IFFALSE 39995
// ComMoveToArea ( i , mc_parking [ base ] ) ;
39975: LD_VAR 0 5
39979: PPUSH
39980: LD_EXP 72
39984: PUSH
39985: LD_VAR 0 1
39989: ARRAY
39990: PPUSH
39991: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
39995: LD_VAR 0 5
39999: PPUSH
40000: CALL_OW 256
40004: PUSH
40005: LD_INT 998
40007: LESS
40008: PUSH
40009: LD_VAR 0 5
40013: PPUSH
40014: CALL_OW 263
40018: PUSH
40019: LD_INT 1
40021: EQUAL
40022: AND
40023: PUSH
40024: LD_VAR 0 5
40028: PPUSH
40029: CALL_OW 311
40033: AND
40034: PUSH
40035: LD_VAR 0 5
40039: PPUSH
40040: LD_EXP 72
40044: PUSH
40045: LD_VAR 0 1
40049: ARRAY
40050: PPUSH
40051: CALL_OW 308
40055: AND
40056: IFFALSE 40110
// begin mech := IsDrivenBy ( i ) ;
40058: LD_ADDR_VAR 0 9
40062: PUSH
40063: LD_VAR 0 5
40067: PPUSH
40068: CALL_OW 311
40072: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
40073: LD_VAR 0 9
40077: PPUSH
40078: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
40082: LD_VAR 0 9
40086: PPUSH
40087: LD_VAR 0 5
40091: PPUSH
40092: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
40096: LD_VAR 0 9
40100: PPUSH
40101: LD_VAR 0 5
40105: PPUSH
40106: CALL_OW 180
// end ; end ; unit_human :
40110: GO 40377
40112: LD_INT 1
40114: DOUBLE
40115: EQUAL
40116: IFTRUE 40120
40118: GO 40376
40120: POP
// begin b := IsInUnit ( i ) ;
40121: LD_ADDR_VAR 0 18
40125: PUSH
40126: LD_VAR 0 5
40130: PPUSH
40131: CALL_OW 310
40135: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
40136: LD_ADDR_VAR 0 19
40140: PUSH
40141: LD_VAR 0 18
40145: NOT
40146: PUSH
40147: LD_VAR 0 18
40151: PPUSH
40152: CALL_OW 266
40156: PUSH
40157: LD_INT 32
40159: PUSH
40160: LD_INT 31
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: IN
40167: OR
40168: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
40169: LD_VAR 0 16
40173: PUSH
40174: LD_VAR 0 2
40178: PPUSH
40179: LD_INT 21
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PPUSH
40189: CALL_OW 72
40193: PUSH
40194: LD_INT 1
40196: LESSEQUAL
40197: OR
40198: PUSH
40199: LD_VAR 0 19
40203: AND
40204: PUSH
40205: LD_VAR 0 5
40209: PUSH
40210: LD_VAR 0 17
40214: IN
40215: NOT
40216: AND
40217: IFFALSE 40310
// begin if b then
40219: LD_VAR 0 18
40223: IFFALSE 40272
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
40225: LD_VAR 0 18
40229: PPUSH
40230: LD_VAR 0 3
40234: PPUSH
40235: LD_VAR 0 18
40239: PPUSH
40240: CALL_OW 74
40244: PPUSH
40245: CALL_OW 296
40249: PUSH
40250: LD_INT 10
40252: LESS
40253: PUSH
40254: LD_VAR 0 18
40258: PPUSH
40259: CALL_OW 461
40263: PUSH
40264: LD_INT 7
40266: NONEQUAL
40267: AND
40268: IFFALSE 40272
// continue ;
40270: GO 39720
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
40272: LD_ADDR_VAR 0 17
40276: PUSH
40277: LD_VAR 0 17
40281: PPUSH
40282: LD_VAR 0 17
40286: PUSH
40287: LD_INT 1
40289: PLUS
40290: PPUSH
40291: LD_VAR 0 5
40295: PPUSH
40296: CALL_OW 1
40300: ST_TO_ADDR
// ComExitBuilding ( i ) ;
40301: LD_VAR 0 5
40305: PPUSH
40306: CALL_OW 122
// end ; if sold_defenders then
40310: LD_VAR 0 17
40314: IFFALSE 40374
// if i in sold_defenders then
40316: LD_VAR 0 5
40320: PUSH
40321: LD_VAR 0 17
40325: IN
40326: IFFALSE 40374
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
40328: LD_VAR 0 5
40332: PPUSH
40333: CALL_OW 314
40337: NOT
40338: PUSH
40339: LD_VAR 0 5
40343: PPUSH
40344: LD_VAR 0 13
40348: PPUSH
40349: CALL_OW 296
40353: PUSH
40354: LD_INT 30
40356: LESS
40357: AND
40358: IFFALSE 40374
// ComAttackUnit ( i , e ) ;
40360: LD_VAR 0 5
40364: PPUSH
40365: LD_VAR 0 13
40369: PPUSH
40370: CALL_OW 115
// end ; end ; end ;
40374: GO 40377
40376: POP
// if IsDead ( i ) then
40377: LD_VAR 0 5
40381: PPUSH
40382: CALL_OW 301
40386: IFFALSE 40404
// defenders := defenders diff i ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_VAR 0 2
40397: PUSH
40398: LD_VAR 0 5
40402: DIFF
40403: ST_TO_ADDR
// end ;
40404: GO 39720
40406: POP
40407: POP
// until not enemy or not defenders ;
40408: LD_VAR 0 3
40412: NOT
40413: PUSH
40414: LD_VAR 0 2
40418: NOT
40419: OR
40420: IFFALSE 39687
// MC_Reset ( base , 18 ) ;
40422: LD_VAR 0 1
40426: PPUSH
40427: LD_INT 18
40429: PPUSH
40430: CALL 19197 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
40434: LD_ADDR_VAR 0 2
40438: PUSH
40439: LD_VAR 0 2
40443: PUSH
40444: LD_VAR 0 2
40448: PPUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 25
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 25
40464: PUSH
40465: LD_INT 5
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 25
40474: PUSH
40475: LD_INT 8
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 25
40484: PUSH
40485: LD_INT 9
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: PPUSH
40499: CALL_OW 72
40503: DIFF
40504: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
40505: LD_VAR 0 3
40509: NOT
40510: PUSH
40511: LD_VAR 0 2
40515: PPUSH
40516: LD_INT 21
40518: PUSH
40519: LD_INT 2
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PPUSH
40526: CALL_OW 72
40530: AND
40531: IFFALSE 40793
// begin tmp := FilterByTag ( defenders , 19 ) ;
40533: LD_ADDR_VAR 0 11
40537: PUSH
40538: LD_VAR 0 2
40542: PPUSH
40543: LD_INT 19
40545: PPUSH
40546: CALL 75304 0 2
40550: ST_TO_ADDR
// if tmp then
40551: LD_VAR 0 11
40555: IFFALSE 40625
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
40557: LD_ADDR_VAR 0 11
40561: PUSH
40562: LD_VAR 0 11
40566: PPUSH
40567: LD_INT 25
40569: PUSH
40570: LD_INT 3
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PPUSH
40577: CALL_OW 72
40581: ST_TO_ADDR
// if tmp then
40582: LD_VAR 0 11
40586: IFFALSE 40625
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
40588: LD_ADDR_EXP 60
40592: PUSH
40593: LD_EXP 60
40597: PPUSH
40598: LD_VAR 0 1
40602: PPUSH
40603: LD_EXP 60
40607: PUSH
40608: LD_VAR 0 1
40612: ARRAY
40613: PUSH
40614: LD_VAR 0 11
40618: UNION
40619: PPUSH
40620: CALL_OW 1
40624: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
40625: LD_VAR 0 1
40629: PPUSH
40630: LD_INT 19
40632: PPUSH
40633: CALL 19197 0 2
// repeat wait ( 0 0$1 ) ;
40637: LD_INT 35
40639: PPUSH
40640: CALL_OW 67
// for i in defenders do
40644: LD_ADDR_VAR 0 5
40648: PUSH
40649: LD_VAR 0 2
40653: PUSH
40654: FOR_IN
40655: IFFALSE 40744
// begin if not IsInArea ( i , mc_parking [ base ] ) then
40657: LD_VAR 0 5
40661: PPUSH
40662: LD_EXP 72
40666: PUSH
40667: LD_VAR 0 1
40671: ARRAY
40672: PPUSH
40673: CALL_OW 308
40677: NOT
40678: IFFALSE 40702
// ComMoveToArea ( i , mc_parking [ base ] ) else
40680: LD_VAR 0 5
40684: PPUSH
40685: LD_EXP 72
40689: PUSH
40690: LD_VAR 0 1
40694: ARRAY
40695: PPUSH
40696: CALL_OW 113
40700: GO 40742
// if GetControl ( i ) = control_manual then
40702: LD_VAR 0 5
40706: PPUSH
40707: CALL_OW 263
40711: PUSH
40712: LD_INT 1
40714: EQUAL
40715: IFFALSE 40742
// if IsDrivenBy ( i ) then
40717: LD_VAR 0 5
40721: PPUSH
40722: CALL_OW 311
40726: IFFALSE 40742
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
40728: LD_VAR 0 5
40732: PPUSH
40733: CALL_OW 311
40737: PPUSH
40738: CALL_OW 121
// end ;
40742: GO 40654
40744: POP
40745: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
40746: LD_VAR 0 2
40750: PPUSH
40751: LD_INT 95
40753: PUSH
40754: LD_EXP 72
40758: PUSH
40759: LD_VAR 0 1
40763: ARRAY
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PPUSH
40769: CALL_OW 72
40773: PUSH
40774: LD_VAR 0 2
40778: EQUAL
40779: PUSH
40780: LD_EXP 71
40784: PUSH
40785: LD_VAR 0 1
40789: ARRAY
40790: OR
40791: IFFALSE 40637
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
40793: LD_ADDR_EXP 70
40797: PUSH
40798: LD_EXP 70
40802: PPUSH
40803: LD_VAR 0 1
40807: PPUSH
40808: LD_EXP 70
40812: PUSH
40813: LD_VAR 0 1
40817: ARRAY
40818: PUSH
40819: LD_VAR 0 2
40823: UNION
40824: PPUSH
40825: CALL_OW 1
40829: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
40830: LD_VAR 0 1
40834: PPUSH
40835: LD_INT 20
40837: PPUSH
40838: CALL 19197 0 2
// end ;
40842: LD_VAR 0 4
40846: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40847: LD_INT 0
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
// result := false ;
40853: LD_ADDR_VAR 0 2
40857: PUSH
40858: LD_INT 0
40860: ST_TO_ADDR
// side := GetSide ( unit ) ;
40861: LD_ADDR_VAR 0 3
40865: PUSH
40866: LD_VAR 0 1
40870: PPUSH
40871: CALL_OW 255
40875: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40876: LD_ADDR_VAR 0 4
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 248
40890: ST_TO_ADDR
// case nat of 1 :
40891: LD_VAR 0 4
40895: PUSH
40896: LD_INT 1
40898: DOUBLE
40899: EQUAL
40900: IFTRUE 40904
40902: GO 40915
40904: POP
// tech := tech_lassight ; 2 :
40905: LD_ADDR_VAR 0 5
40909: PUSH
40910: LD_INT 12
40912: ST_TO_ADDR
40913: GO 40954
40915: LD_INT 2
40917: DOUBLE
40918: EQUAL
40919: IFTRUE 40923
40921: GO 40934
40923: POP
// tech := tech_mortar ; 3 :
40924: LD_ADDR_VAR 0 5
40928: PUSH
40929: LD_INT 41
40931: ST_TO_ADDR
40932: GO 40954
40934: LD_INT 3
40936: DOUBLE
40937: EQUAL
40938: IFTRUE 40942
40940: GO 40953
40942: POP
// tech := tech_bazooka ; end ;
40943: LD_ADDR_VAR 0 5
40947: PUSH
40948: LD_INT 44
40950: ST_TO_ADDR
40951: GO 40954
40953: POP
// if Researched ( side , tech ) then
40954: LD_VAR 0 3
40958: PPUSH
40959: LD_VAR 0 5
40963: PPUSH
40964: CALL_OW 325
40968: IFFALSE 40995
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40970: LD_ADDR_VAR 0 2
40974: PUSH
40975: LD_INT 5
40977: PUSH
40978: LD_INT 8
40980: PUSH
40981: LD_INT 9
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: LIST
40988: PUSH
40989: LD_VAR 0 4
40993: ARRAY
40994: ST_TO_ADDR
// end ;
40995: LD_VAR 0 2
40999: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41000: LD_INT 0
41002: PPUSH
41003: PPUSH
41004: PPUSH
// if not mines then
41005: LD_VAR 0 2
41009: NOT
41010: IFFALSE 41014
// exit ;
41012: GO 41158
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41014: LD_ADDR_VAR 0 5
41018: PUSH
41019: LD_INT 81
41021: PUSH
41022: LD_VAR 0 1
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: LD_INT 21
41036: PUSH
41037: LD_INT 3
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PPUSH
41052: CALL_OW 69
41056: ST_TO_ADDR
// for i in mines do
41057: LD_ADDR_VAR 0 4
41061: PUSH
41062: LD_VAR 0 2
41066: PUSH
41067: FOR_IN
41068: IFFALSE 41156
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41070: LD_VAR 0 4
41074: PUSH
41075: LD_INT 1
41077: ARRAY
41078: PPUSH
41079: LD_VAR 0 4
41083: PUSH
41084: LD_INT 2
41086: ARRAY
41087: PPUSH
41088: CALL_OW 458
41092: NOT
41093: IFFALSE 41097
// continue ;
41095: GO 41067
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41097: LD_VAR 0 4
41101: PUSH
41102: LD_INT 1
41104: ARRAY
41105: PPUSH
41106: LD_VAR 0 4
41110: PUSH
41111: LD_INT 2
41113: ARRAY
41114: PPUSH
41115: CALL_OW 428
41119: PUSH
41120: LD_VAR 0 5
41124: IN
41125: IFFALSE 41154
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41127: LD_VAR 0 4
41131: PUSH
41132: LD_INT 1
41134: ARRAY
41135: PPUSH
41136: LD_VAR 0 4
41140: PUSH
41141: LD_INT 2
41143: ARRAY
41144: PPUSH
41145: LD_VAR 0 1
41149: PPUSH
41150: CALL_OW 456
// end ;
41154: GO 41067
41156: POP
41157: POP
// end ;
41158: LD_VAR 0 3
41162: RET
// export function Count ( array ) ; var i ; begin
41163: LD_INT 0
41165: PPUSH
41166: PPUSH
// result := 0 ;
41167: LD_ADDR_VAR 0 2
41171: PUSH
41172: LD_INT 0
41174: ST_TO_ADDR
// for i in array do
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_VAR 0 1
41184: PUSH
41185: FOR_IN
41186: IFFALSE 41210
// if i then
41188: LD_VAR 0 3
41192: IFFALSE 41208
// result := result + 1 ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: LD_VAR 0 2
41203: PUSH
41204: LD_INT 1
41206: PLUS
41207: ST_TO_ADDR
41208: GO 41185
41210: POP
41211: POP
// end ;
41212: LD_VAR 0 2
41216: RET
// export function IsEmpty ( building ) ; begin
41217: LD_INT 0
41219: PPUSH
// if not building then
41220: LD_VAR 0 1
41224: NOT
41225: IFFALSE 41229
// exit ;
41227: GO 41272
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41229: LD_ADDR_VAR 0 2
41233: PUSH
41234: LD_VAR 0 1
41238: PUSH
41239: LD_INT 22
41241: PUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: CALL_OW 255
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 58
41258: PUSH
41259: EMPTY
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PPUSH
41266: CALL_OW 69
41270: IN
41271: ST_TO_ADDR
// end ;
41272: LD_VAR 0 2
41276: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41277: LD_INT 0
41279: PPUSH
41280: PPUSH
41281: PPUSH
41282: PPUSH
// tmp := [ ] ;
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: EMPTY
41289: ST_TO_ADDR
// list := [ ] ;
41290: LD_ADDR_VAR 0 5
41294: PUSH
41295: EMPTY
41296: ST_TO_ADDR
// for i = 16 to 25 do
41297: LD_ADDR_VAR 0 4
41301: PUSH
41302: DOUBLE
41303: LD_INT 16
41305: DEC
41306: ST_TO_ADDR
41307: LD_INT 25
41309: PUSH
41310: FOR_TO
41311: IFFALSE 41384
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41313: LD_ADDR_VAR 0 3
41317: PUSH
41318: LD_VAR 0 3
41322: PUSH
41323: LD_INT 22
41325: PUSH
41326: LD_VAR 0 1
41330: PPUSH
41331: CALL_OW 255
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 91
41342: PUSH
41343: LD_VAR 0 1
41347: PUSH
41348: LD_INT 6
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 30
41358: PUSH
41359: LD_VAR 0 4
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: LIST
41372: PUSH
41373: EMPTY
41374: LIST
41375: PPUSH
41376: CALL_OW 69
41380: ADD
41381: ST_TO_ADDR
41382: GO 41310
41384: POP
41385: POP
// for i = 1 to tmp do
41386: LD_ADDR_VAR 0 4
41390: PUSH
41391: DOUBLE
41392: LD_INT 1
41394: DEC
41395: ST_TO_ADDR
41396: LD_VAR 0 3
41400: PUSH
41401: FOR_TO
41402: IFFALSE 41490
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41404: LD_ADDR_VAR 0 5
41408: PUSH
41409: LD_VAR 0 5
41413: PUSH
41414: LD_VAR 0 3
41418: PUSH
41419: LD_VAR 0 4
41423: ARRAY
41424: PPUSH
41425: CALL_OW 266
41429: PUSH
41430: LD_VAR 0 3
41434: PUSH
41435: LD_VAR 0 4
41439: ARRAY
41440: PPUSH
41441: CALL_OW 250
41445: PUSH
41446: LD_VAR 0 3
41450: PUSH
41451: LD_VAR 0 4
41455: ARRAY
41456: PPUSH
41457: CALL_OW 251
41461: PUSH
41462: LD_VAR 0 3
41466: PUSH
41467: LD_VAR 0 4
41471: ARRAY
41472: PPUSH
41473: CALL_OW 254
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: ADD
41487: ST_TO_ADDR
41488: GO 41401
41490: POP
41491: POP
// result := list ;
41492: LD_ADDR_VAR 0 2
41496: PUSH
41497: LD_VAR 0 5
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 2
41506: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41507: LD_INT 0
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
// if not factory then
41516: LD_VAR 0 1
41520: NOT
41521: IFFALSE 41525
// exit ;
41523: GO 42050
// if control = control_apeman then
41525: LD_VAR 0 4
41529: PUSH
41530: LD_INT 5
41532: EQUAL
41533: IFFALSE 41642
// begin tmp := UnitsInside ( factory ) ;
41535: LD_ADDR_VAR 0 8
41539: PUSH
41540: LD_VAR 0 1
41544: PPUSH
41545: CALL_OW 313
41549: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41550: LD_VAR 0 8
41554: PPUSH
41555: LD_INT 25
41557: PUSH
41558: LD_INT 12
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PPUSH
41565: CALL_OW 72
41569: NOT
41570: IFFALSE 41580
// control := control_manual ;
41572: LD_ADDR_VAR 0 4
41576: PUSH
41577: LD_INT 1
41579: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41580: LD_ADDR_VAR 0 8
41584: PUSH
41585: LD_VAR 0 1
41589: PPUSH
41590: CALL 41277 0 1
41594: ST_TO_ADDR
// if tmp then
41595: LD_VAR 0 8
41599: IFFALSE 41642
// begin for i in tmp do
41601: LD_ADDR_VAR 0 7
41605: PUSH
41606: LD_VAR 0 8
41610: PUSH
41611: FOR_IN
41612: IFFALSE 41640
// if i [ 1 ] = b_ext_radar then
41614: LD_VAR 0 7
41618: PUSH
41619: LD_INT 1
41621: ARRAY
41622: PUSH
41623: LD_INT 20
41625: EQUAL
41626: IFFALSE 41638
// begin control := control_remote ;
41628: LD_ADDR_VAR 0 4
41632: PUSH
41633: LD_INT 2
41635: ST_TO_ADDR
// break ;
41636: GO 41640
// end ;
41638: GO 41611
41640: POP
41641: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41642: LD_VAR 0 1
41646: PPUSH
41647: LD_VAR 0 2
41651: PPUSH
41652: LD_VAR 0 3
41656: PPUSH
41657: LD_VAR 0 4
41661: PPUSH
41662: LD_VAR 0 5
41666: PPUSH
41667: CALL_OW 448
41671: IFFALSE 41706
// begin result := [ chassis , engine , control , weapon ] ;
41673: LD_ADDR_VAR 0 6
41677: PUSH
41678: LD_VAR 0 2
41682: PUSH
41683: LD_VAR 0 3
41687: PUSH
41688: LD_VAR 0 4
41692: PUSH
41693: LD_VAR 0 5
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// exit ;
41704: GO 42050
// end ; _chassis := AvailableChassisList ( factory ) ;
41706: LD_ADDR_VAR 0 9
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 475
41720: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41721: LD_ADDR_VAR 0 11
41725: PUSH
41726: LD_VAR 0 1
41730: PPUSH
41731: CALL_OW 476
41735: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41736: LD_ADDR_VAR 0 12
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 477
41750: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41751: LD_ADDR_VAR 0 10
41755: PUSH
41756: LD_VAR 0 1
41760: PPUSH
41761: CALL_OW 478
41765: ST_TO_ADDR
// if not chassis in _chassis then
41766: LD_VAR 0 2
41770: PUSH
41771: LD_VAR 0 9
41775: IN
41776: NOT
41777: IFFALSE 41803
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41779: LD_ADDR_VAR 0 2
41783: PUSH
41784: LD_VAR 0 9
41788: PUSH
41789: LD_INT 1
41791: PPUSH
41792: LD_VAR 0 9
41796: PPUSH
41797: CALL_OW 12
41801: ARRAY
41802: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41803: LD_VAR 0 2
41807: PPUSH
41808: LD_VAR 0 3
41812: PPUSH
41813: CALL 42055 0 2
41817: NOT
41818: IFFALSE 41877
// repeat engine := _engine [ 1 ] ;
41820: LD_ADDR_VAR 0 3
41824: PUSH
41825: LD_VAR 0 11
41829: PUSH
41830: LD_INT 1
41832: ARRAY
41833: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41834: LD_ADDR_VAR 0 11
41838: PUSH
41839: LD_VAR 0 11
41843: PPUSH
41844: LD_INT 1
41846: PPUSH
41847: CALL_OW 3
41851: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41852: LD_VAR 0 2
41856: PPUSH
41857: LD_VAR 0 3
41861: PPUSH
41862: CALL 42055 0 2
41866: PUSH
41867: LD_VAR 0 11
41871: PUSH
41872: EMPTY
41873: EQUAL
41874: OR
41875: IFFALSE 41820
// if not control in _control then
41877: LD_VAR 0 4
41881: PUSH
41882: LD_VAR 0 12
41886: IN
41887: NOT
41888: IFFALSE 41914
// control := _control [ rand ( 1 , _control ) ] ;
41890: LD_ADDR_VAR 0 4
41894: PUSH
41895: LD_VAR 0 12
41899: PUSH
41900: LD_INT 1
41902: PPUSH
41903: LD_VAR 0 12
41907: PPUSH
41908: CALL_OW 12
41912: ARRAY
41913: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41914: LD_VAR 0 2
41918: PPUSH
41919: LD_VAR 0 5
41923: PPUSH
41924: CALL 42275 0 2
41928: NOT
41929: IFFALSE 41988
// repeat weapon := _weapon [ 1 ] ;
41931: LD_ADDR_VAR 0 5
41935: PUSH
41936: LD_VAR 0 10
41940: PUSH
41941: LD_INT 1
41943: ARRAY
41944: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41945: LD_ADDR_VAR 0 10
41949: PUSH
41950: LD_VAR 0 10
41954: PPUSH
41955: LD_INT 1
41957: PPUSH
41958: CALL_OW 3
41962: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41963: LD_VAR 0 2
41967: PPUSH
41968: LD_VAR 0 5
41972: PPUSH
41973: CALL 42275 0 2
41977: PUSH
41978: LD_VAR 0 10
41982: PUSH
41983: EMPTY
41984: EQUAL
41985: OR
41986: IFFALSE 41931
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41988: LD_VAR 0 1
41992: PPUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: LD_VAR 0 3
42002: PPUSH
42003: LD_VAR 0 4
42007: PPUSH
42008: LD_VAR 0 5
42012: PPUSH
42013: CALL_OW 448
42017: IFFALSE 42050
// result := [ chassis , engine , control , weapon ] ;
42019: LD_ADDR_VAR 0 6
42023: PUSH
42024: LD_VAR 0 2
42028: PUSH
42029: LD_VAR 0 3
42033: PUSH
42034: LD_VAR 0 4
42038: PUSH
42039: LD_VAR 0 5
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// end ;
42050: LD_VAR 0 6
42054: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42055: LD_INT 0
42057: PPUSH
// if not chassis or not engine then
42058: LD_VAR 0 1
42062: NOT
42063: PUSH
42064: LD_VAR 0 2
42068: NOT
42069: OR
42070: IFFALSE 42074
// exit ;
42072: GO 42270
// case engine of engine_solar :
42074: LD_VAR 0 2
42078: PUSH
42079: LD_INT 2
42081: DOUBLE
42082: EQUAL
42083: IFTRUE 42087
42085: GO 42125
42087: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42088: LD_ADDR_VAR 0 3
42092: PUSH
42093: LD_INT 11
42095: PUSH
42096: LD_INT 12
42098: PUSH
42099: LD_INT 13
42101: PUSH
42102: LD_INT 14
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 2
42110: PUSH
42111: LD_INT 3
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: ST_TO_ADDR
42123: GO 42254
42125: LD_INT 1
42127: DOUBLE
42128: EQUAL
42129: IFTRUE 42133
42131: GO 42195
42133: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_INT 11
42141: PUSH
42142: LD_INT 12
42144: PUSH
42145: LD_INT 13
42147: PUSH
42148: LD_INT 14
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 3
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: LD_INT 21
42168: PUSH
42169: LD_INT 23
42171: PUSH
42172: LD_INT 22
42174: PUSH
42175: LD_INT 24
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
42193: GO 42254
42195: LD_INT 3
42197: DOUBLE
42198: EQUAL
42199: IFTRUE 42203
42201: GO 42253
42203: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42204: LD_ADDR_VAR 0 3
42208: PUSH
42209: LD_INT 13
42211: PUSH
42212: LD_INT 14
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: LD_INT 3
42220: PUSH
42221: LD_INT 4
42223: PUSH
42224: LD_INT 5
42226: PUSH
42227: LD_INT 21
42229: PUSH
42230: LD_INT 22
42232: PUSH
42233: LD_INT 23
42235: PUSH
42236: LD_INT 24
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: ST_TO_ADDR
42251: GO 42254
42253: POP
// result := ( chassis in result ) ;
42254: LD_ADDR_VAR 0 3
42258: PUSH
42259: LD_VAR 0 1
42263: PUSH
42264: LD_VAR 0 3
42268: IN
42269: ST_TO_ADDR
// end ;
42270: LD_VAR 0 3
42274: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42275: LD_INT 0
42277: PPUSH
// if not chassis or not weapon then
42278: LD_VAR 0 1
42282: NOT
42283: PUSH
42284: LD_VAR 0 2
42288: NOT
42289: OR
42290: IFFALSE 42294
// exit ;
42292: GO 43320
// case weapon of us_machine_gun :
42294: LD_VAR 0 2
42298: PUSH
42299: LD_INT 2
42301: DOUBLE
42302: EQUAL
42303: IFTRUE 42307
42305: GO 42337
42307: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42308: LD_ADDR_VAR 0 3
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
42335: GO 43304
42337: LD_INT 3
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42375
42345: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42346: LD_ADDR_VAR 0 3
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: LD_INT 4
42362: PUSH
42363: LD_INT 5
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: ST_TO_ADDR
42373: GO 43304
42375: LD_INT 11
42377: DOUBLE
42378: EQUAL
42379: IFTRUE 42383
42381: GO 42413
42383: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42384: LD_ADDR_VAR 0 3
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 2
42394: PUSH
42395: LD_INT 3
42397: PUSH
42398: LD_INT 4
42400: PUSH
42401: LD_INT 5
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: ST_TO_ADDR
42411: GO 43304
42413: LD_INT 4
42415: DOUBLE
42416: EQUAL
42417: IFTRUE 42421
42419: GO 42447
42421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42422: LD_ADDR_VAR 0 3
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: LD_INT 4
42435: PUSH
42436: LD_INT 5
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
42445: GO 43304
42447: LD_INT 5
42449: DOUBLE
42450: EQUAL
42451: IFTRUE 42455
42453: GO 42481
42455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42456: LD_ADDR_VAR 0 3
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: LD_INT 3
42466: PUSH
42467: LD_INT 4
42469: PUSH
42470: LD_INT 5
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: ST_TO_ADDR
42479: GO 43304
42481: LD_INT 9
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42515
42489: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42490: LD_ADDR_VAR 0 3
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: LD_INT 4
42503: PUSH
42504: LD_INT 5
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: ST_TO_ADDR
42513: GO 43304
42515: LD_INT 7
42517: DOUBLE
42518: EQUAL
42519: IFTRUE 42523
42521: GO 42549
42523: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42524: LD_ADDR_VAR 0 3
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: LD_INT 3
42534: PUSH
42535: LD_INT 4
42537: PUSH
42538: LD_INT 5
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
42547: GO 43304
42549: LD_INT 12
42551: DOUBLE
42552: EQUAL
42553: IFTRUE 42557
42555: GO 42583
42557: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_INT 2
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 5
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: ST_TO_ADDR
42581: GO 43304
42583: LD_INT 13
42585: DOUBLE
42586: EQUAL
42587: IFTRUE 42591
42589: GO 42617
42591: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42592: LD_ADDR_VAR 0 3
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 4
42605: PUSH
42606: LD_INT 5
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: ST_TO_ADDR
42615: GO 43304
42617: LD_INT 14
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42625
42623: GO 42643
42625: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42626: LD_ADDR_VAR 0 3
42630: PUSH
42631: LD_INT 4
42633: PUSH
42634: LD_INT 5
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: ST_TO_ADDR
42641: GO 43304
42643: LD_INT 6
42645: DOUBLE
42646: EQUAL
42647: IFTRUE 42651
42649: GO 42669
42651: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42652: LD_ADDR_VAR 0 3
42656: PUSH
42657: LD_INT 4
42659: PUSH
42660: LD_INT 5
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: ST_TO_ADDR
42667: GO 43304
42669: LD_INT 10
42671: DOUBLE
42672: EQUAL
42673: IFTRUE 42677
42675: GO 42695
42677: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42678: LD_ADDR_VAR 0 3
42682: PUSH
42683: LD_INT 4
42685: PUSH
42686: LD_INT 5
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: ST_TO_ADDR
42693: GO 43304
42695: LD_INT 22
42697: DOUBLE
42698: EQUAL
42699: IFTRUE 42703
42701: GO 42729
42703: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42704: LD_ADDR_VAR 0 3
42708: PUSH
42709: LD_INT 11
42711: PUSH
42712: LD_INT 12
42714: PUSH
42715: LD_INT 13
42717: PUSH
42718: LD_INT 14
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
42727: GO 43304
42729: LD_INT 23
42731: DOUBLE
42732: EQUAL
42733: IFTRUE 42737
42735: GO 42763
42737: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42738: LD_ADDR_VAR 0 3
42742: PUSH
42743: LD_INT 11
42745: PUSH
42746: LD_INT 12
42748: PUSH
42749: LD_INT 13
42751: PUSH
42752: LD_INT 14
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
42761: GO 43304
42763: LD_INT 24
42765: DOUBLE
42766: EQUAL
42767: IFTRUE 42771
42769: GO 42797
42771: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42772: LD_ADDR_VAR 0 3
42776: PUSH
42777: LD_INT 11
42779: PUSH
42780: LD_INT 12
42782: PUSH
42783: LD_INT 13
42785: PUSH
42786: LD_INT 14
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: ST_TO_ADDR
42795: GO 43304
42797: LD_INT 30
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42805
42803: GO 42831
42805: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_INT 11
42813: PUSH
42814: LD_INT 12
42816: PUSH
42817: LD_INT 13
42819: PUSH
42820: LD_INT 14
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
42829: GO 43304
42831: LD_INT 25
42833: DOUBLE
42834: EQUAL
42835: IFTRUE 42839
42837: GO 42857
42839: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42840: LD_ADDR_VAR 0 3
42844: PUSH
42845: LD_INT 13
42847: PUSH
42848: LD_INT 14
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: ST_TO_ADDR
42855: GO 43304
42857: LD_INT 27
42859: DOUBLE
42860: EQUAL
42861: IFTRUE 42865
42863: GO 42883
42865: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42866: LD_ADDR_VAR 0 3
42870: PUSH
42871: LD_INT 13
42873: PUSH
42874: LD_INT 14
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: ST_TO_ADDR
42881: GO 43304
42883: LD_INT 28
42885: DOUBLE
42886: EQUAL
42887: IFTRUE 42891
42889: GO 42909
42891: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_INT 13
42899: PUSH
42900: LD_INT 14
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: ST_TO_ADDR
42907: GO 43304
42909: LD_INT 29
42911: DOUBLE
42912: EQUAL
42913: IFTRUE 42917
42915: GO 42935
42917: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42918: LD_ADDR_VAR 0 3
42922: PUSH
42923: LD_INT 13
42925: PUSH
42926: LD_INT 14
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: ST_TO_ADDR
42933: GO 43304
42935: LD_INT 31
42937: DOUBLE
42938: EQUAL
42939: IFTRUE 42943
42941: GO 42961
42943: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42944: LD_ADDR_VAR 0 3
42948: PUSH
42949: LD_INT 13
42951: PUSH
42952: LD_INT 14
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: ST_TO_ADDR
42959: GO 43304
42961: LD_INT 26
42963: DOUBLE
42964: EQUAL
42965: IFTRUE 42969
42967: GO 42987
42969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42970: LD_ADDR_VAR 0 3
42974: PUSH
42975: LD_INT 13
42977: PUSH
42978: LD_INT 14
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: ST_TO_ADDR
42985: GO 43304
42987: LD_INT 42
42989: DOUBLE
42990: EQUAL
42991: IFTRUE 42995
42993: GO 43021
42995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42996: LD_ADDR_VAR 0 3
43000: PUSH
43001: LD_INT 21
43003: PUSH
43004: LD_INT 22
43006: PUSH
43007: LD_INT 23
43009: PUSH
43010: LD_INT 24
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
43019: GO 43304
43021: LD_INT 43
43023: DOUBLE
43024: EQUAL
43025: IFTRUE 43029
43027: GO 43055
43029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43030: LD_ADDR_VAR 0 3
43034: PUSH
43035: LD_INT 21
43037: PUSH
43038: LD_INT 22
43040: PUSH
43041: LD_INT 23
43043: PUSH
43044: LD_INT 24
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: ST_TO_ADDR
43053: GO 43304
43055: LD_INT 44
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43089
43063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43064: LD_ADDR_VAR 0 3
43068: PUSH
43069: LD_INT 21
43071: PUSH
43072: LD_INT 22
43074: PUSH
43075: LD_INT 23
43077: PUSH
43078: LD_INT 24
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
43087: GO 43304
43089: LD_INT 45
43091: DOUBLE
43092: EQUAL
43093: IFTRUE 43097
43095: GO 43123
43097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43098: LD_ADDR_VAR 0 3
43102: PUSH
43103: LD_INT 21
43105: PUSH
43106: LD_INT 22
43108: PUSH
43109: LD_INT 23
43111: PUSH
43112: LD_INT 24
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
43121: GO 43304
43123: LD_INT 49
43125: DOUBLE
43126: EQUAL
43127: IFTRUE 43131
43129: GO 43157
43131: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43132: LD_ADDR_VAR 0 3
43136: PUSH
43137: LD_INT 21
43139: PUSH
43140: LD_INT 22
43142: PUSH
43143: LD_INT 23
43145: PUSH
43146: LD_INT 24
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: ST_TO_ADDR
43155: GO 43304
43157: LD_INT 51
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43165
43163: GO 43191
43165: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_INT 21
43173: PUSH
43174: LD_INT 22
43176: PUSH
43177: LD_INT 23
43179: PUSH
43180: LD_INT 24
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: ST_TO_ADDR
43189: GO 43304
43191: LD_INT 52
43193: DOUBLE
43194: EQUAL
43195: IFTRUE 43199
43197: GO 43225
43199: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43200: LD_ADDR_VAR 0 3
43204: PUSH
43205: LD_INT 21
43207: PUSH
43208: LD_INT 22
43210: PUSH
43211: LD_INT 23
43213: PUSH
43214: LD_INT 24
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
43223: GO 43304
43225: LD_INT 53
43227: DOUBLE
43228: EQUAL
43229: IFTRUE 43233
43231: GO 43251
43233: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43234: LD_ADDR_VAR 0 3
43238: PUSH
43239: LD_INT 23
43241: PUSH
43242: LD_INT 24
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: ST_TO_ADDR
43249: GO 43304
43251: LD_INT 46
43253: DOUBLE
43254: EQUAL
43255: IFTRUE 43259
43257: GO 43277
43259: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43260: LD_ADDR_VAR 0 3
43264: PUSH
43265: LD_INT 23
43267: PUSH
43268: LD_INT 24
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: ST_TO_ADDR
43275: GO 43304
43277: LD_INT 47
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43285
43283: GO 43303
43285: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43286: LD_ADDR_VAR 0 3
43290: PUSH
43291: LD_INT 23
43293: PUSH
43294: LD_INT 24
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: ST_TO_ADDR
43301: GO 43304
43303: POP
// result := ( chassis in result ) ;
43304: LD_ADDR_VAR 0 3
43308: PUSH
43309: LD_VAR 0 1
43313: PUSH
43314: LD_VAR 0 3
43318: IN
43319: ST_TO_ADDR
// end ;
43320: LD_VAR 0 3
43324: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43325: LD_INT 0
43327: PPUSH
43328: PPUSH
43329: PPUSH
43330: PPUSH
43331: PPUSH
43332: PPUSH
43333: PPUSH
// result := array ;
43334: LD_ADDR_VAR 0 5
43338: PUSH
43339: LD_VAR 0 1
43343: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43344: LD_VAR 0 1
43348: NOT
43349: PUSH
43350: LD_VAR 0 2
43354: NOT
43355: OR
43356: PUSH
43357: LD_VAR 0 3
43361: NOT
43362: OR
43363: PUSH
43364: LD_VAR 0 2
43368: PUSH
43369: LD_VAR 0 1
43373: GREATER
43374: OR
43375: PUSH
43376: LD_VAR 0 3
43380: PUSH
43381: LD_VAR 0 1
43385: GREATER
43386: OR
43387: IFFALSE 43391
// exit ;
43389: GO 43687
// if direction then
43391: LD_VAR 0 4
43395: IFFALSE 43459
// begin d := 1 ;
43397: LD_ADDR_VAR 0 9
43401: PUSH
43402: LD_INT 1
43404: ST_TO_ADDR
// if i_from > i_to then
43405: LD_VAR 0 2
43409: PUSH
43410: LD_VAR 0 3
43414: GREATER
43415: IFFALSE 43441
// length := ( array - i_from ) + i_to else
43417: LD_ADDR_VAR 0 11
43421: PUSH
43422: LD_VAR 0 1
43426: PUSH
43427: LD_VAR 0 2
43431: MINUS
43432: PUSH
43433: LD_VAR 0 3
43437: PLUS
43438: ST_TO_ADDR
43439: GO 43457
// length := i_to - i_from ;
43441: LD_ADDR_VAR 0 11
43445: PUSH
43446: LD_VAR 0 3
43450: PUSH
43451: LD_VAR 0 2
43455: MINUS
43456: ST_TO_ADDR
// end else
43457: GO 43520
// begin d := - 1 ;
43459: LD_ADDR_VAR 0 9
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: ST_TO_ADDR
// if i_from > i_to then
43468: LD_VAR 0 2
43472: PUSH
43473: LD_VAR 0 3
43477: GREATER
43478: IFFALSE 43498
// length := i_from - i_to else
43480: LD_ADDR_VAR 0 11
43484: PUSH
43485: LD_VAR 0 2
43489: PUSH
43490: LD_VAR 0 3
43494: MINUS
43495: ST_TO_ADDR
43496: GO 43520
// length := ( array - i_to ) + i_from ;
43498: LD_ADDR_VAR 0 11
43502: PUSH
43503: LD_VAR 0 1
43507: PUSH
43508: LD_VAR 0 3
43512: MINUS
43513: PUSH
43514: LD_VAR 0 2
43518: PLUS
43519: ST_TO_ADDR
// end ; if not length then
43520: LD_VAR 0 11
43524: NOT
43525: IFFALSE 43529
// exit ;
43527: GO 43687
// tmp := array ;
43529: LD_ADDR_VAR 0 10
43533: PUSH
43534: LD_VAR 0 1
43538: ST_TO_ADDR
// for i = 1 to length do
43539: LD_ADDR_VAR 0 6
43543: PUSH
43544: DOUBLE
43545: LD_INT 1
43547: DEC
43548: ST_TO_ADDR
43549: LD_VAR 0 11
43553: PUSH
43554: FOR_TO
43555: IFFALSE 43675
// begin for j = 1 to array do
43557: LD_ADDR_VAR 0 7
43561: PUSH
43562: DOUBLE
43563: LD_INT 1
43565: DEC
43566: ST_TO_ADDR
43567: LD_VAR 0 1
43571: PUSH
43572: FOR_TO
43573: IFFALSE 43661
// begin k := j + d ;
43575: LD_ADDR_VAR 0 8
43579: PUSH
43580: LD_VAR 0 7
43584: PUSH
43585: LD_VAR 0 9
43589: PLUS
43590: ST_TO_ADDR
// if k > array then
43591: LD_VAR 0 8
43595: PUSH
43596: LD_VAR 0 1
43600: GREATER
43601: IFFALSE 43611
// k := 1 ;
43603: LD_ADDR_VAR 0 8
43607: PUSH
43608: LD_INT 1
43610: ST_TO_ADDR
// if not k then
43611: LD_VAR 0 8
43615: NOT
43616: IFFALSE 43628
// k := array ;
43618: LD_ADDR_VAR 0 8
43622: PUSH
43623: LD_VAR 0 1
43627: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43628: LD_ADDR_VAR 0 10
43632: PUSH
43633: LD_VAR 0 10
43637: PPUSH
43638: LD_VAR 0 8
43642: PPUSH
43643: LD_VAR 0 1
43647: PUSH
43648: LD_VAR 0 7
43652: ARRAY
43653: PPUSH
43654: CALL_OW 1
43658: ST_TO_ADDR
// end ;
43659: GO 43572
43661: POP
43662: POP
// array := tmp ;
43663: LD_ADDR_VAR 0 1
43667: PUSH
43668: LD_VAR 0 10
43672: ST_TO_ADDR
// end ;
43673: GO 43554
43675: POP
43676: POP
// result := array ;
43677: LD_ADDR_VAR 0 5
43681: PUSH
43682: LD_VAR 0 1
43686: ST_TO_ADDR
// end ;
43687: LD_VAR 0 5
43691: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43692: LD_INT 0
43694: PPUSH
43695: PPUSH
// result := 0 ;
43696: LD_ADDR_VAR 0 3
43700: PUSH
43701: LD_INT 0
43703: ST_TO_ADDR
// if not array or not value in array then
43704: LD_VAR 0 1
43708: NOT
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_VAR 0 1
43719: IN
43720: NOT
43721: OR
43722: IFFALSE 43726
// exit ;
43724: GO 43780
// for i = 1 to array do
43726: LD_ADDR_VAR 0 4
43730: PUSH
43731: DOUBLE
43732: LD_INT 1
43734: DEC
43735: ST_TO_ADDR
43736: LD_VAR 0 1
43740: PUSH
43741: FOR_TO
43742: IFFALSE 43778
// if value = array [ i ] then
43744: LD_VAR 0 2
43748: PUSH
43749: LD_VAR 0 1
43753: PUSH
43754: LD_VAR 0 4
43758: ARRAY
43759: EQUAL
43760: IFFALSE 43776
// begin result := i ;
43762: LD_ADDR_VAR 0 3
43766: PUSH
43767: LD_VAR 0 4
43771: ST_TO_ADDR
// exit ;
43772: POP
43773: POP
43774: GO 43780
// end ;
43776: GO 43741
43778: POP
43779: POP
// end ;
43780: LD_VAR 0 3
43784: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43785: LD_INT 0
43787: PPUSH
// vc_chassis := chassis ;
43788: LD_ADDR_OWVAR 37
43792: PUSH
43793: LD_VAR 0 1
43797: ST_TO_ADDR
// vc_engine := engine ;
43798: LD_ADDR_OWVAR 39
43802: PUSH
43803: LD_VAR 0 2
43807: ST_TO_ADDR
// vc_control := control ;
43808: LD_ADDR_OWVAR 38
43812: PUSH
43813: LD_VAR 0 3
43817: ST_TO_ADDR
// vc_weapon := weapon ;
43818: LD_ADDR_OWVAR 40
43822: PUSH
43823: LD_VAR 0 4
43827: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43828: LD_ADDR_OWVAR 41
43832: PUSH
43833: LD_VAR 0 5
43837: ST_TO_ADDR
// end ;
43838: LD_VAR 0 6
43842: RET
// export function WantPlant ( unit ) ; var task ; begin
43843: LD_INT 0
43845: PPUSH
43846: PPUSH
// result := false ;
43847: LD_ADDR_VAR 0 2
43851: PUSH
43852: LD_INT 0
43854: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: LD_VAR 0 1
43864: PPUSH
43865: CALL_OW 437
43869: ST_TO_ADDR
// if task then
43870: LD_VAR 0 3
43874: IFFALSE 43902
// if task [ 1 ] [ 1 ] = p then
43876: LD_VAR 0 3
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PUSH
43885: LD_INT 1
43887: ARRAY
43888: PUSH
43889: LD_STRING p
43891: EQUAL
43892: IFFALSE 43902
// result := true ;
43894: LD_ADDR_VAR 0 2
43898: PUSH
43899: LD_INT 1
43901: ST_TO_ADDR
// end ;
43902: LD_VAR 0 2
43906: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43907: LD_INT 0
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
// if pos < 1 then
43913: LD_VAR 0 2
43917: PUSH
43918: LD_INT 1
43920: LESS
43921: IFFALSE 43925
// exit ;
43923: GO 44228
// if pos = 1 then
43925: LD_VAR 0 2
43929: PUSH
43930: LD_INT 1
43932: EQUAL
43933: IFFALSE 43966
// result := Replace ( arr , pos [ 1 ] , value ) else
43935: LD_ADDR_VAR 0 4
43939: PUSH
43940: LD_VAR 0 1
43944: PPUSH
43945: LD_VAR 0 2
43949: PUSH
43950: LD_INT 1
43952: ARRAY
43953: PPUSH
43954: LD_VAR 0 3
43958: PPUSH
43959: CALL_OW 1
43963: ST_TO_ADDR
43964: GO 44228
// begin tmp := arr ;
43966: LD_ADDR_VAR 0 6
43970: PUSH
43971: LD_VAR 0 1
43975: ST_TO_ADDR
// s_arr := [ tmp ] ;
43976: LD_ADDR_VAR 0 7
43980: PUSH
43981: LD_VAR 0 6
43985: PUSH
43986: EMPTY
43987: LIST
43988: ST_TO_ADDR
// for i = 1 to pos - 1 do
43989: LD_ADDR_VAR 0 5
43993: PUSH
43994: DOUBLE
43995: LD_INT 1
43997: DEC
43998: ST_TO_ADDR
43999: LD_VAR 0 2
44003: PUSH
44004: LD_INT 1
44006: MINUS
44007: PUSH
44008: FOR_TO
44009: IFFALSE 44054
// begin tmp := tmp [ pos [ i ] ] ;
44011: LD_ADDR_VAR 0 6
44015: PUSH
44016: LD_VAR 0 6
44020: PUSH
44021: LD_VAR 0 2
44025: PUSH
44026: LD_VAR 0 5
44030: ARRAY
44031: ARRAY
44032: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44033: LD_ADDR_VAR 0 7
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_VAR 0 6
44047: PUSH
44048: EMPTY
44049: LIST
44050: ADD
44051: ST_TO_ADDR
// end ;
44052: GO 44008
44054: POP
44055: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44056: LD_ADDR_VAR 0 6
44060: PUSH
44061: LD_VAR 0 6
44065: PPUSH
44066: LD_VAR 0 2
44070: PUSH
44071: LD_VAR 0 2
44075: ARRAY
44076: PPUSH
44077: LD_VAR 0 3
44081: PPUSH
44082: CALL_OW 1
44086: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44087: LD_ADDR_VAR 0 7
44091: PUSH
44092: LD_VAR 0 7
44096: PPUSH
44097: LD_VAR 0 7
44101: PPUSH
44102: LD_VAR 0 6
44106: PPUSH
44107: CALL_OW 1
44111: ST_TO_ADDR
// for i = s_arr downto 2 do
44112: LD_ADDR_VAR 0 5
44116: PUSH
44117: DOUBLE
44118: LD_VAR 0 7
44122: INC
44123: ST_TO_ADDR
44124: LD_INT 2
44126: PUSH
44127: FOR_DOWNTO
44128: IFFALSE 44212
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44130: LD_ADDR_VAR 0 6
44134: PUSH
44135: LD_VAR 0 7
44139: PUSH
44140: LD_VAR 0 5
44144: PUSH
44145: LD_INT 1
44147: MINUS
44148: ARRAY
44149: PPUSH
44150: LD_VAR 0 2
44154: PUSH
44155: LD_VAR 0 5
44159: PUSH
44160: LD_INT 1
44162: MINUS
44163: ARRAY
44164: PPUSH
44165: LD_VAR 0 7
44169: PUSH
44170: LD_VAR 0 5
44174: ARRAY
44175: PPUSH
44176: CALL_OW 1
44180: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44181: LD_ADDR_VAR 0 7
44185: PUSH
44186: LD_VAR 0 7
44190: PPUSH
44191: LD_VAR 0 5
44195: PUSH
44196: LD_INT 1
44198: MINUS
44199: PPUSH
44200: LD_VAR 0 6
44204: PPUSH
44205: CALL_OW 1
44209: ST_TO_ADDR
// end ;
44210: GO 44127
44212: POP
44213: POP
// result := s_arr [ 1 ] ;
44214: LD_ADDR_VAR 0 4
44218: PUSH
44219: LD_VAR 0 7
44223: PUSH
44224: LD_INT 1
44226: ARRAY
44227: ST_TO_ADDR
// end ; end ;
44228: LD_VAR 0 4
44232: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44233: LD_INT 0
44235: PPUSH
44236: PPUSH
// if not list then
44237: LD_VAR 0 1
44241: NOT
44242: IFFALSE 44246
// exit ;
44244: GO 44337
// i := list [ pos1 ] ;
44246: LD_ADDR_VAR 0 5
44250: PUSH
44251: LD_VAR 0 1
44255: PUSH
44256: LD_VAR 0 2
44260: ARRAY
44261: ST_TO_ADDR
// if not i then
44262: LD_VAR 0 5
44266: NOT
44267: IFFALSE 44271
// exit ;
44269: GO 44337
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44271: LD_ADDR_VAR 0 1
44275: PUSH
44276: LD_VAR 0 1
44280: PPUSH
44281: LD_VAR 0 2
44285: PPUSH
44286: LD_VAR 0 1
44290: PUSH
44291: LD_VAR 0 3
44295: ARRAY
44296: PPUSH
44297: CALL_OW 1
44301: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44302: LD_ADDR_VAR 0 1
44306: PUSH
44307: LD_VAR 0 1
44311: PPUSH
44312: LD_VAR 0 3
44316: PPUSH
44317: LD_VAR 0 5
44321: PPUSH
44322: CALL_OW 1
44326: ST_TO_ADDR
// result := list ;
44327: LD_ADDR_VAR 0 4
44331: PUSH
44332: LD_VAR 0 1
44336: ST_TO_ADDR
// end ;
44337: LD_VAR 0 4
44341: RET
// export function Add ( list , pos , val ) ; begin
44342: LD_INT 0
44344: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
44345: LD_ADDR_VAR 0 4
44349: PUSH
44350: LD_VAR 0 1
44354: PPUSH
44355: LD_VAR 0 2
44359: PPUSH
44360: LD_VAR 0 3
44364: PPUSH
44365: CALL 43907 0 3
44369: ST_TO_ADDR
44370: LD_VAR 0 4
44374: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44375: LD_INT 0
44377: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_VAR 0 1
44387: PPUSH
44388: CALL_OW 250
44392: PPUSH
44393: LD_VAR 0 1
44397: PPUSH
44398: CALL_OW 251
44402: PPUSH
44403: LD_VAR 0 2
44407: PPUSH
44408: LD_VAR 0 3
44412: PPUSH
44413: LD_VAR 0 4
44417: PPUSH
44418: CALL 44428 0 5
44422: ST_TO_ADDR
// end ;
44423: LD_VAR 0 5
44427: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44428: LD_INT 0
44430: PPUSH
44431: PPUSH
44432: PPUSH
44433: PPUSH
// if not list then
44434: LD_VAR 0 3
44438: NOT
44439: IFFALSE 44443
// exit ;
44441: GO 44831
// result := [ ] ;
44443: LD_ADDR_VAR 0 6
44447: PUSH
44448: EMPTY
44449: ST_TO_ADDR
// for i in list do
44450: LD_ADDR_VAR 0 7
44454: PUSH
44455: LD_VAR 0 3
44459: PUSH
44460: FOR_IN
44461: IFFALSE 44663
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44463: LD_ADDR_VAR 0 9
44467: PUSH
44468: LD_VAR 0 7
44472: PPUSH
44473: LD_VAR 0 1
44477: PPUSH
44478: LD_VAR 0 2
44482: PPUSH
44483: CALL_OW 297
44487: ST_TO_ADDR
// if not result then
44488: LD_VAR 0 6
44492: NOT
44493: IFFALSE 44519
// result := [ [ i , tmp ] ] else
44495: LD_ADDR_VAR 0 6
44499: PUSH
44500: LD_VAR 0 7
44504: PUSH
44505: LD_VAR 0 9
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: EMPTY
44515: LIST
44516: ST_TO_ADDR
44517: GO 44661
// begin if result [ result ] [ 2 ] < tmp then
44519: LD_VAR 0 6
44523: PUSH
44524: LD_VAR 0 6
44528: ARRAY
44529: PUSH
44530: LD_INT 2
44532: ARRAY
44533: PUSH
44534: LD_VAR 0 9
44538: LESS
44539: IFFALSE 44581
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44541: LD_ADDR_VAR 0 6
44545: PUSH
44546: LD_VAR 0 6
44550: PPUSH
44551: LD_VAR 0 6
44555: PUSH
44556: LD_INT 1
44558: PLUS
44559: PPUSH
44560: LD_VAR 0 7
44564: PUSH
44565: LD_VAR 0 9
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PPUSH
44574: CALL_OW 2
44578: ST_TO_ADDR
44579: GO 44661
// for j = 1 to result do
44581: LD_ADDR_VAR 0 8
44585: PUSH
44586: DOUBLE
44587: LD_INT 1
44589: DEC
44590: ST_TO_ADDR
44591: LD_VAR 0 6
44595: PUSH
44596: FOR_TO
44597: IFFALSE 44659
// begin if tmp < result [ j ] [ 2 ] then
44599: LD_VAR 0 9
44603: PUSH
44604: LD_VAR 0 6
44608: PUSH
44609: LD_VAR 0 8
44613: ARRAY
44614: PUSH
44615: LD_INT 2
44617: ARRAY
44618: LESS
44619: IFFALSE 44657
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44621: LD_ADDR_VAR 0 6
44625: PUSH
44626: LD_VAR 0 6
44630: PPUSH
44631: LD_VAR 0 8
44635: PPUSH
44636: LD_VAR 0 7
44640: PUSH
44641: LD_VAR 0 9
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PPUSH
44650: CALL_OW 2
44654: ST_TO_ADDR
// break ;
44655: GO 44659
// end ; end ;
44657: GO 44596
44659: POP
44660: POP
// end ; end ;
44661: GO 44460
44663: POP
44664: POP
// if result and not asc then
44665: LD_VAR 0 6
44669: PUSH
44670: LD_VAR 0 4
44674: NOT
44675: AND
44676: IFFALSE 44751
// begin tmp := result ;
44678: LD_ADDR_VAR 0 9
44682: PUSH
44683: LD_VAR 0 6
44687: ST_TO_ADDR
// for i = tmp downto 1 do
44688: LD_ADDR_VAR 0 7
44692: PUSH
44693: DOUBLE
44694: LD_VAR 0 9
44698: INC
44699: ST_TO_ADDR
44700: LD_INT 1
44702: PUSH
44703: FOR_DOWNTO
44704: IFFALSE 44749
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44706: LD_ADDR_VAR 0 6
44710: PUSH
44711: LD_VAR 0 6
44715: PPUSH
44716: LD_VAR 0 9
44720: PUSH
44721: LD_VAR 0 7
44725: MINUS
44726: PUSH
44727: LD_INT 1
44729: PLUS
44730: PPUSH
44731: LD_VAR 0 9
44735: PUSH
44736: LD_VAR 0 7
44740: ARRAY
44741: PPUSH
44742: CALL_OW 1
44746: ST_TO_ADDR
44747: GO 44703
44749: POP
44750: POP
// end ; tmp := [ ] ;
44751: LD_ADDR_VAR 0 9
44755: PUSH
44756: EMPTY
44757: ST_TO_ADDR
// if mode then
44758: LD_VAR 0 5
44762: IFFALSE 44831
// begin for i = 1 to result do
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: DOUBLE
44770: LD_INT 1
44772: DEC
44773: ST_TO_ADDR
44774: LD_VAR 0 6
44778: PUSH
44779: FOR_TO
44780: IFFALSE 44819
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44782: LD_ADDR_VAR 0 9
44786: PUSH
44787: LD_VAR 0 9
44791: PPUSH
44792: LD_VAR 0 7
44796: PPUSH
44797: LD_VAR 0 6
44801: PUSH
44802: LD_VAR 0 7
44806: ARRAY
44807: PUSH
44808: LD_INT 1
44810: ARRAY
44811: PPUSH
44812: CALL_OW 1
44816: ST_TO_ADDR
44817: GO 44779
44819: POP
44820: POP
// result := tmp ;
44821: LD_ADDR_VAR 0 6
44825: PUSH
44826: LD_VAR 0 9
44830: ST_TO_ADDR
// end ; end ;
44831: LD_VAR 0 6
44835: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44836: LD_INT 0
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44844: LD_ADDR_VAR 0 5
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: ST_TO_ADDR
// if not x or not y then
44866: LD_VAR 0 2
44870: NOT
44871: PUSH
44872: LD_VAR 0 3
44876: NOT
44877: OR
44878: IFFALSE 44882
// exit ;
44880: GO 46528
// if not range then
44882: LD_VAR 0 4
44886: NOT
44887: IFFALSE 44897
// range := 10 ;
44889: LD_ADDR_VAR 0 4
44893: PUSH
44894: LD_INT 10
44896: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44897: LD_ADDR_VAR 0 8
44901: PUSH
44902: LD_INT 81
44904: PUSH
44905: LD_VAR 0 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 92
44916: PUSH
44917: LD_VAR 0 2
44921: PUSH
44922: LD_VAR 0 3
44926: PUSH
44927: LD_VAR 0 4
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 3
44940: PUSH
44941: LD_INT 21
44943: PUSH
44944: LD_INT 3
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: PPUSH
44960: CALL_OW 69
44964: ST_TO_ADDR
// if not tmp then
44965: LD_VAR 0 8
44969: NOT
44970: IFFALSE 44974
// exit ;
44972: GO 46528
// for i in tmp do
44974: LD_ADDR_VAR 0 6
44978: PUSH
44979: LD_VAR 0 8
44983: PUSH
44984: FOR_IN
44985: IFFALSE 46503
// begin points := [ 0 , 0 , 0 ] ;
44987: LD_ADDR_VAR 0 9
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: LIST
45005: ST_TO_ADDR
// bpoints := 1 ;
45006: LD_ADDR_VAR 0 10
45010: PUSH
45011: LD_INT 1
45013: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45014: LD_VAR 0 6
45018: PPUSH
45019: CALL_OW 247
45023: PUSH
45024: LD_INT 1
45026: DOUBLE
45027: EQUAL
45028: IFTRUE 45032
45030: GO 45610
45032: POP
// begin if GetClass ( i ) = 1 then
45033: LD_VAR 0 6
45037: PPUSH
45038: CALL_OW 257
45042: PUSH
45043: LD_INT 1
45045: EQUAL
45046: IFFALSE 45067
// points := [ 10 , 5 , 3 ] ;
45048: LD_ADDR_VAR 0 9
45052: PUSH
45053: LD_INT 10
45055: PUSH
45056: LD_INT 5
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: LIST
45066: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45067: LD_VAR 0 6
45071: PPUSH
45072: CALL_OW 257
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 3
45082: PUSH
45083: LD_INT 4
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: IN
45091: IFFALSE 45112
// points := [ 3 , 2 , 1 ] ;
45093: LD_ADDR_VAR 0 9
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45112: LD_VAR 0 6
45116: PPUSH
45117: CALL_OW 257
45121: PUSH
45122: LD_INT 5
45124: EQUAL
45125: IFFALSE 45146
// points := [ 130 , 5 , 2 ] ;
45127: LD_ADDR_VAR 0 9
45131: PUSH
45132: LD_INT 130
45134: PUSH
45135: LD_INT 5
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45146: LD_VAR 0 6
45150: PPUSH
45151: CALL_OW 257
45155: PUSH
45156: LD_INT 8
45158: EQUAL
45159: IFFALSE 45180
// points := [ 35 , 35 , 30 ] ;
45161: LD_ADDR_VAR 0 9
45165: PUSH
45166: LD_INT 35
45168: PUSH
45169: LD_INT 35
45171: PUSH
45172: LD_INT 30
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45180: LD_VAR 0 6
45184: PPUSH
45185: CALL_OW 257
45189: PUSH
45190: LD_INT 9
45192: EQUAL
45193: IFFALSE 45214
// points := [ 20 , 55 , 40 ] ;
45195: LD_ADDR_VAR 0 9
45199: PUSH
45200: LD_INT 20
45202: PUSH
45203: LD_INT 55
45205: PUSH
45206: LD_INT 40
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45214: LD_VAR 0 6
45218: PPUSH
45219: CALL_OW 257
45223: PUSH
45224: LD_INT 12
45226: PUSH
45227: LD_INT 16
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: IN
45234: IFFALSE 45255
// points := [ 5 , 3 , 2 ] ;
45236: LD_ADDR_VAR 0 9
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: LD_INT 3
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45255: LD_VAR 0 6
45259: PPUSH
45260: CALL_OW 257
45264: PUSH
45265: LD_INT 17
45267: EQUAL
45268: IFFALSE 45289
// points := [ 100 , 50 , 75 ] ;
45270: LD_ADDR_VAR 0 9
45274: PUSH
45275: LD_INT 100
45277: PUSH
45278: LD_INT 50
45280: PUSH
45281: LD_INT 75
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45289: LD_VAR 0 6
45293: PPUSH
45294: CALL_OW 257
45298: PUSH
45299: LD_INT 15
45301: EQUAL
45302: IFFALSE 45323
// points := [ 10 , 5 , 3 ] ;
45304: LD_ADDR_VAR 0 9
45308: PUSH
45309: LD_INT 10
45311: PUSH
45312: LD_INT 5
45314: PUSH
45315: LD_INT 3
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45323: LD_VAR 0 6
45327: PPUSH
45328: CALL_OW 257
45332: PUSH
45333: LD_INT 14
45335: EQUAL
45336: IFFALSE 45357
// points := [ 10 , 0 , 0 ] ;
45338: LD_ADDR_VAR 0 9
45342: PUSH
45343: LD_INT 10
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45357: LD_VAR 0 6
45361: PPUSH
45362: CALL_OW 257
45366: PUSH
45367: LD_INT 11
45369: EQUAL
45370: IFFALSE 45391
// points := [ 30 , 10 , 5 ] ;
45372: LD_ADDR_VAR 0 9
45376: PUSH
45377: LD_INT 30
45379: PUSH
45380: LD_INT 10
45382: PUSH
45383: LD_INT 5
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: LIST
45390: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45391: LD_VAR 0 1
45395: PPUSH
45396: LD_INT 5
45398: PPUSH
45399: CALL_OW 321
45403: PUSH
45404: LD_INT 2
45406: EQUAL
45407: IFFALSE 45424
// bpoints := bpoints * 1.8 ;
45409: LD_ADDR_VAR 0 10
45413: PUSH
45414: LD_VAR 0 10
45418: PUSH
45419: LD_REAL  1.80000000000000E+0000
45422: MUL
45423: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45424: LD_VAR 0 6
45428: PPUSH
45429: CALL_OW 257
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 4
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: IN
45452: PUSH
45453: LD_VAR 0 1
45457: PPUSH
45458: LD_INT 51
45460: PPUSH
45461: CALL_OW 321
45465: PUSH
45466: LD_INT 2
45468: EQUAL
45469: AND
45470: IFFALSE 45487
// bpoints := bpoints * 1.2 ;
45472: LD_ADDR_VAR 0 10
45476: PUSH
45477: LD_VAR 0 10
45481: PUSH
45482: LD_REAL  1.20000000000000E+0000
45485: MUL
45486: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45487: LD_VAR 0 6
45491: PPUSH
45492: CALL_OW 257
45496: PUSH
45497: LD_INT 5
45499: PUSH
45500: LD_INT 7
45502: PUSH
45503: LD_INT 9
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: LIST
45510: IN
45511: PUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: LD_INT 52
45519: PPUSH
45520: CALL_OW 321
45524: PUSH
45525: LD_INT 2
45527: EQUAL
45528: AND
45529: IFFALSE 45546
// bpoints := bpoints * 1.5 ;
45531: LD_ADDR_VAR 0 10
45535: PUSH
45536: LD_VAR 0 10
45540: PUSH
45541: LD_REAL  1.50000000000000E+0000
45544: MUL
45545: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45546: LD_VAR 0 1
45550: PPUSH
45551: LD_INT 66
45553: PPUSH
45554: CALL_OW 321
45558: PUSH
45559: LD_INT 2
45561: EQUAL
45562: IFFALSE 45579
// bpoints := bpoints * 1.1 ;
45564: LD_ADDR_VAR 0 10
45568: PUSH
45569: LD_VAR 0 10
45573: PUSH
45574: LD_REAL  1.10000000000000E+0000
45577: MUL
45578: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45579: LD_ADDR_VAR 0 10
45583: PUSH
45584: LD_VAR 0 10
45588: PUSH
45589: LD_VAR 0 6
45593: PPUSH
45594: LD_INT 1
45596: PPUSH
45597: CALL_OW 259
45601: PUSH
45602: LD_REAL  1.15000000000000E+0000
45605: MUL
45606: MUL
45607: ST_TO_ADDR
// end ; unit_vehicle :
45608: GO 46432
45610: LD_INT 2
45612: DOUBLE
45613: EQUAL
45614: IFTRUE 45618
45616: GO 46420
45618: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45619: LD_VAR 0 6
45623: PPUSH
45624: CALL_OW 264
45628: PUSH
45629: LD_INT 2
45631: PUSH
45632: LD_INT 42
45634: PUSH
45635: LD_INT 24
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: IN
45643: IFFALSE 45664
// points := [ 25 , 5 , 3 ] ;
45645: LD_ADDR_VAR 0 9
45649: PUSH
45650: LD_INT 25
45652: PUSH
45653: LD_INT 5
45655: PUSH
45656: LD_INT 3
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45664: LD_VAR 0 6
45668: PPUSH
45669: CALL_OW 264
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: LD_INT 43
45679: PUSH
45680: LD_INT 25
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: LIST
45687: IN
45688: IFFALSE 45709
// points := [ 40 , 15 , 5 ] ;
45690: LD_ADDR_VAR 0 9
45694: PUSH
45695: LD_INT 40
45697: PUSH
45698: LD_INT 15
45700: PUSH
45701: LD_INT 5
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45709: LD_VAR 0 6
45713: PPUSH
45714: CALL_OW 264
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: LD_INT 23
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: IN
45729: IFFALSE 45750
// points := [ 7 , 25 , 8 ] ;
45731: LD_ADDR_VAR 0 9
45735: PUSH
45736: LD_INT 7
45738: PUSH
45739: LD_INT 25
45741: PUSH
45742: LD_INT 8
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45750: LD_VAR 0 6
45754: PPUSH
45755: CALL_OW 264
45759: PUSH
45760: LD_INT 5
45762: PUSH
45763: LD_INT 27
45765: PUSH
45766: LD_INT 44
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: IN
45774: IFFALSE 45795
// points := [ 14 , 50 , 16 ] ;
45776: LD_ADDR_VAR 0 9
45780: PUSH
45781: LD_INT 14
45783: PUSH
45784: LD_INT 50
45786: PUSH
45787: LD_INT 16
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45795: LD_VAR 0 6
45799: PPUSH
45800: CALL_OW 264
45804: PUSH
45805: LD_INT 6
45807: PUSH
45808: LD_INT 46
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: IN
45815: IFFALSE 45836
// points := [ 32 , 120 , 70 ] ;
45817: LD_ADDR_VAR 0 9
45821: PUSH
45822: LD_INT 32
45824: PUSH
45825: LD_INT 120
45827: PUSH
45828: LD_INT 70
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
45836: LD_VAR 0 6
45840: PPUSH
45841: CALL_OW 264
45845: PUSH
45846: LD_INT 7
45848: PUSH
45849: LD_INT 28
45851: PUSH
45852: LD_INT 45
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: IN
45860: IFFALSE 45881
// points := [ 35 , 20 , 45 ] ;
45862: LD_ADDR_VAR 0 9
45866: PUSH
45867: LD_INT 35
45869: PUSH
45870: LD_INT 20
45872: PUSH
45873: LD_INT 45
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45881: LD_VAR 0 6
45885: PPUSH
45886: CALL_OW 264
45890: PUSH
45891: LD_INT 47
45893: PUSH
45894: EMPTY
45895: LIST
45896: IN
45897: IFFALSE 45918
// points := [ 67 , 45 , 75 ] ;
45899: LD_ADDR_VAR 0 9
45903: PUSH
45904: LD_INT 67
45906: PUSH
45907: LD_INT 45
45909: PUSH
45910: LD_INT 75
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45918: LD_VAR 0 6
45922: PPUSH
45923: CALL_OW 264
45927: PUSH
45928: LD_INT 26
45930: PUSH
45931: EMPTY
45932: LIST
45933: IN
45934: IFFALSE 45955
// points := [ 120 , 30 , 80 ] ;
45936: LD_ADDR_VAR 0 9
45940: PUSH
45941: LD_INT 120
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: LD_INT 80
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45955: LD_VAR 0 6
45959: PPUSH
45960: CALL_OW 264
45964: PUSH
45965: LD_INT 22
45967: PUSH
45968: EMPTY
45969: LIST
45970: IN
45971: IFFALSE 45992
// points := [ 40 , 1 , 1 ] ;
45973: LD_ADDR_VAR 0 9
45977: PUSH
45978: LD_INT 40
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45992: LD_VAR 0 6
45996: PPUSH
45997: CALL_OW 264
46001: PUSH
46002: LD_INT 29
46004: PUSH
46005: EMPTY
46006: LIST
46007: IN
46008: IFFALSE 46029
// points := [ 70 , 200 , 400 ] ;
46010: LD_ADDR_VAR 0 9
46014: PUSH
46015: LD_INT 70
46017: PUSH
46018: LD_INT 200
46020: PUSH
46021: LD_INT 400
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46029: LD_VAR 0 6
46033: PPUSH
46034: CALL_OW 264
46038: PUSH
46039: LD_INT 14
46041: PUSH
46042: LD_INT 53
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: IN
46049: IFFALSE 46070
// points := [ 40 , 10 , 20 ] ;
46051: LD_ADDR_VAR 0 9
46055: PUSH
46056: LD_INT 40
46058: PUSH
46059: LD_INT 10
46061: PUSH
46062: LD_INT 20
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46070: LD_VAR 0 6
46074: PPUSH
46075: CALL_OW 264
46079: PUSH
46080: LD_INT 9
46082: PUSH
46083: EMPTY
46084: LIST
46085: IN
46086: IFFALSE 46107
// points := [ 5 , 70 , 20 ] ;
46088: LD_ADDR_VAR 0 9
46092: PUSH
46093: LD_INT 5
46095: PUSH
46096: LD_INT 70
46098: PUSH
46099: LD_INT 20
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46107: LD_VAR 0 6
46111: PPUSH
46112: CALL_OW 264
46116: PUSH
46117: LD_INT 10
46119: PUSH
46120: EMPTY
46121: LIST
46122: IN
46123: IFFALSE 46144
// points := [ 35 , 110 , 70 ] ;
46125: LD_ADDR_VAR 0 9
46129: PUSH
46130: LD_INT 35
46132: PUSH
46133: LD_INT 110
46135: PUSH
46136: LD_INT 70
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46144: LD_VAR 0 6
46148: PPUSH
46149: CALL_OW 265
46153: PUSH
46154: LD_INT 25
46156: EQUAL
46157: IFFALSE 46178
// points := [ 80 , 65 , 100 ] ;
46159: LD_ADDR_VAR 0 9
46163: PUSH
46164: LD_INT 80
46166: PUSH
46167: LD_INT 65
46169: PUSH
46170: LD_INT 100
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46178: LD_VAR 0 6
46182: PPUSH
46183: CALL_OW 263
46187: PUSH
46188: LD_INT 1
46190: EQUAL
46191: IFFALSE 46226
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46193: LD_ADDR_VAR 0 10
46197: PUSH
46198: LD_VAR 0 10
46202: PUSH
46203: LD_VAR 0 6
46207: PPUSH
46208: CALL_OW 311
46212: PPUSH
46213: LD_INT 3
46215: PPUSH
46216: CALL_OW 259
46220: PUSH
46221: LD_INT 4
46223: MUL
46224: MUL
46225: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46226: LD_VAR 0 6
46230: PPUSH
46231: CALL_OW 263
46235: PUSH
46236: LD_INT 2
46238: EQUAL
46239: IFFALSE 46290
// begin j := IsControledBy ( i ) ;
46241: LD_ADDR_VAR 0 7
46245: PUSH
46246: LD_VAR 0 6
46250: PPUSH
46251: CALL_OW 312
46255: ST_TO_ADDR
// if j then
46256: LD_VAR 0 7
46260: IFFALSE 46290
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46262: LD_ADDR_VAR 0 10
46266: PUSH
46267: LD_VAR 0 10
46271: PUSH
46272: LD_VAR 0 7
46276: PPUSH
46277: LD_INT 3
46279: PPUSH
46280: CALL_OW 259
46284: PUSH
46285: LD_INT 3
46287: MUL
46288: MUL
46289: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46290: LD_VAR 0 6
46294: PPUSH
46295: CALL_OW 264
46299: PUSH
46300: LD_INT 5
46302: PUSH
46303: LD_INT 6
46305: PUSH
46306: LD_INT 46
46308: PUSH
46309: LD_INT 44
46311: PUSH
46312: LD_INT 47
46314: PUSH
46315: LD_INT 45
46317: PUSH
46318: LD_INT 28
46320: PUSH
46321: LD_INT 7
46323: PUSH
46324: LD_INT 27
46326: PUSH
46327: LD_INT 29
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: IN
46342: PUSH
46343: LD_VAR 0 1
46347: PPUSH
46348: LD_INT 52
46350: PPUSH
46351: CALL_OW 321
46355: PUSH
46356: LD_INT 2
46358: EQUAL
46359: AND
46360: IFFALSE 46377
// bpoints := bpoints * 1.2 ;
46362: LD_ADDR_VAR 0 10
46366: PUSH
46367: LD_VAR 0 10
46371: PUSH
46372: LD_REAL  1.20000000000000E+0000
46375: MUL
46376: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46377: LD_VAR 0 6
46381: PPUSH
46382: CALL_OW 264
46386: PUSH
46387: LD_INT 6
46389: PUSH
46390: LD_INT 46
46392: PUSH
46393: LD_INT 47
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: IN
46401: IFFALSE 46418
// bpoints := bpoints * 1.2 ;
46403: LD_ADDR_VAR 0 10
46407: PUSH
46408: LD_VAR 0 10
46412: PUSH
46413: LD_REAL  1.20000000000000E+0000
46416: MUL
46417: ST_TO_ADDR
// end ; unit_building :
46418: GO 46432
46420: LD_INT 3
46422: DOUBLE
46423: EQUAL
46424: IFTRUE 46428
46426: GO 46431
46428: POP
// ; end ;
46429: GO 46432
46431: POP
// for j = 1 to 3 do
46432: LD_ADDR_VAR 0 7
46436: PUSH
46437: DOUBLE
46438: LD_INT 1
46440: DEC
46441: ST_TO_ADDR
46442: LD_INT 3
46444: PUSH
46445: FOR_TO
46446: IFFALSE 46499
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46448: LD_ADDR_VAR 0 5
46452: PUSH
46453: LD_VAR 0 5
46457: PPUSH
46458: LD_VAR 0 7
46462: PPUSH
46463: LD_VAR 0 5
46467: PUSH
46468: LD_VAR 0 7
46472: ARRAY
46473: PUSH
46474: LD_VAR 0 9
46478: PUSH
46479: LD_VAR 0 7
46483: ARRAY
46484: PUSH
46485: LD_VAR 0 10
46489: MUL
46490: PLUS
46491: PPUSH
46492: CALL_OW 1
46496: ST_TO_ADDR
46497: GO 46445
46499: POP
46500: POP
// end ;
46501: GO 44984
46503: POP
46504: POP
// result := Replace ( result , 4 , tmp ) ;
46505: LD_ADDR_VAR 0 5
46509: PUSH
46510: LD_VAR 0 5
46514: PPUSH
46515: LD_INT 4
46517: PPUSH
46518: LD_VAR 0 8
46522: PPUSH
46523: CALL_OW 1
46527: ST_TO_ADDR
// end ;
46528: LD_VAR 0 5
46532: RET
// export function DangerAtRange ( unit , range ) ; begin
46533: LD_INT 0
46535: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46536: LD_ADDR_VAR 0 3
46540: PUSH
46541: LD_VAR 0 1
46545: PPUSH
46546: CALL_OW 255
46550: PPUSH
46551: LD_VAR 0 1
46555: PPUSH
46556: CALL_OW 250
46560: PPUSH
46561: LD_VAR 0 1
46565: PPUSH
46566: CALL_OW 251
46570: PPUSH
46571: LD_VAR 0 2
46575: PPUSH
46576: CALL 44836 0 4
46580: ST_TO_ADDR
// end ;
46581: LD_VAR 0 3
46585: RET
// export function IsExtension ( b ) ; begin
46586: LD_INT 0
46588: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46589: LD_ADDR_VAR 0 2
46593: PUSH
46594: LD_VAR 0 1
46598: PPUSH
46599: CALL_OW 266
46603: PUSH
46604: LD_INT 23
46606: PUSH
46607: LD_INT 20
46609: PUSH
46610: LD_INT 22
46612: PUSH
46613: LD_INT 17
46615: PUSH
46616: LD_INT 24
46618: PUSH
46619: LD_INT 21
46621: PUSH
46622: LD_INT 19
46624: PUSH
46625: LD_INT 16
46627: PUSH
46628: LD_INT 25
46630: PUSH
46631: LD_INT 18
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: IN
46646: ST_TO_ADDR
// end ;
46647: LD_VAR 0 2
46651: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
46652: LD_INT 0
46654: PPUSH
46655: PPUSH
46656: PPUSH
// result := [ ] ;
46657: LD_ADDR_VAR 0 2
46661: PUSH
46662: EMPTY
46663: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
46664: LD_ADDR_VAR 0 3
46668: PUSH
46669: LD_INT 21
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PPUSH
46679: CALL_OW 69
46683: ST_TO_ADDR
// if not tmp then
46684: LD_VAR 0 3
46688: NOT
46689: IFFALSE 46693
// exit ;
46691: GO 46743
// for i in tmp do
46693: LD_ADDR_VAR 0 4
46697: PUSH
46698: LD_VAR 0 3
46702: PUSH
46703: FOR_IN
46704: IFFALSE 46741
// if GetBase ( i ) = base then
46706: LD_VAR 0 4
46710: PPUSH
46711: CALL_OW 274
46715: PUSH
46716: LD_VAR 0 1
46720: EQUAL
46721: IFFALSE 46739
// result := result ^ i ;
46723: LD_ADDR_VAR 0 2
46727: PUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_VAR 0 4
46737: ADD
46738: ST_TO_ADDR
46739: GO 46703
46741: POP
46742: POP
// end ;
46743: LD_VAR 0 2
46747: RET
// export function ComComplete ( unit , b ) ; var i ; begin
46748: LD_INT 0
46750: PPUSH
46751: PPUSH
// if BuildingStatus ( b ) = bs_build then
46752: LD_VAR 0 2
46756: PPUSH
46757: CALL_OW 461
46761: PUSH
46762: LD_INT 1
46764: EQUAL
46765: IFFALSE 46825
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46767: LD_VAR 0 1
46771: PPUSH
46772: LD_STRING h
46774: PUSH
46775: LD_VAR 0 2
46779: PPUSH
46780: CALL_OW 250
46784: PUSH
46785: LD_VAR 0 2
46789: PPUSH
46790: CALL_OW 251
46794: PUSH
46795: LD_VAR 0 2
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: PPUSH
46821: CALL_OW 446
// end ;
46825: LD_VAR 0 3
46829: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46830: LD_INT 0
46832: PPUSH
46833: PPUSH
46834: PPUSH
46835: PPUSH
46836: PPUSH
46837: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
46838: LD_VAR 0 1
46842: NOT
46843: PUSH
46844: LD_VAR 0 1
46848: PPUSH
46849: CALL_OW 263
46853: PUSH
46854: LD_INT 2
46856: EQUAL
46857: NOT
46858: OR
46859: IFFALSE 46863
// exit ;
46861: GO 47179
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46863: LD_ADDR_VAR 0 6
46867: PUSH
46868: LD_INT 22
46870: PUSH
46871: LD_VAR 0 1
46875: PPUSH
46876: CALL_OW 255
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: PUSH
46888: LD_INT 30
46890: PUSH
46891: LD_INT 36
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 34
46900: PUSH
46901: LD_INT 31
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PPUSH
46917: CALL_OW 69
46921: ST_TO_ADDR
// if not tmp then
46922: LD_VAR 0 6
46926: NOT
46927: IFFALSE 46931
// exit ;
46929: GO 47179
// result := [ ] ;
46931: LD_ADDR_VAR 0 2
46935: PUSH
46936: EMPTY
46937: ST_TO_ADDR
// for i in tmp do
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: LD_VAR 0 6
46947: PUSH
46948: FOR_IN
46949: IFFALSE 47020
// begin t := UnitsInside ( i ) ;
46951: LD_ADDR_VAR 0 4
46955: PUSH
46956: LD_VAR 0 3
46960: PPUSH
46961: CALL_OW 313
46965: ST_TO_ADDR
// if t then
46966: LD_VAR 0 4
46970: IFFALSE 47018
// for j in t do
46972: LD_ADDR_VAR 0 7
46976: PUSH
46977: LD_VAR 0 4
46981: PUSH
46982: FOR_IN
46983: IFFALSE 47016
// result := Insert ( result , result + 1 , j ) ;
46985: LD_ADDR_VAR 0 2
46989: PUSH
46990: LD_VAR 0 2
46994: PPUSH
46995: LD_VAR 0 2
46999: PUSH
47000: LD_INT 1
47002: PLUS
47003: PPUSH
47004: LD_VAR 0 7
47008: PPUSH
47009: CALL_OW 2
47013: ST_TO_ADDR
47014: GO 46982
47016: POP
47017: POP
// end ;
47018: GO 46948
47020: POP
47021: POP
// if not result then
47022: LD_VAR 0 2
47026: NOT
47027: IFFALSE 47031
// exit ;
47029: GO 47179
// mech := result [ 1 ] ;
47031: LD_ADDR_VAR 0 5
47035: PUSH
47036: LD_VAR 0 2
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: ST_TO_ADDR
// if result > 1 then
47045: LD_VAR 0 2
47049: PUSH
47050: LD_INT 1
47052: GREATER
47053: IFFALSE 47165
// for i = 2 to result do
47055: LD_ADDR_VAR 0 3
47059: PUSH
47060: DOUBLE
47061: LD_INT 2
47063: DEC
47064: ST_TO_ADDR
47065: LD_VAR 0 2
47069: PUSH
47070: FOR_TO
47071: IFFALSE 47163
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47073: LD_ADDR_VAR 0 4
47077: PUSH
47078: LD_VAR 0 2
47082: PUSH
47083: LD_VAR 0 3
47087: ARRAY
47088: PPUSH
47089: LD_INT 3
47091: PPUSH
47092: CALL_OW 259
47096: PUSH
47097: LD_VAR 0 2
47101: PUSH
47102: LD_VAR 0 3
47106: ARRAY
47107: PPUSH
47108: CALL_OW 432
47112: MINUS
47113: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47114: LD_VAR 0 4
47118: PUSH
47119: LD_VAR 0 5
47123: PPUSH
47124: LD_INT 3
47126: PPUSH
47127: CALL_OW 259
47131: PUSH
47132: LD_VAR 0 5
47136: PPUSH
47137: CALL_OW 432
47141: MINUS
47142: GREATEREQUAL
47143: IFFALSE 47161
// mech := result [ i ] ;
47145: LD_ADDR_VAR 0 5
47149: PUSH
47150: LD_VAR 0 2
47154: PUSH
47155: LD_VAR 0 3
47159: ARRAY
47160: ST_TO_ADDR
// end ;
47161: GO 47070
47163: POP
47164: POP
// ComLinkTo ( vehicle , mech ) ;
47165: LD_VAR 0 1
47169: PPUSH
47170: LD_VAR 0 5
47174: PPUSH
47175: CALL_OW 135
// end ;
47179: LD_VAR 0 2
47183: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
47184: LD_INT 0
47186: PPUSH
47187: PPUSH
47188: PPUSH
47189: PPUSH
47190: PPUSH
47191: PPUSH
47192: PPUSH
47193: PPUSH
47194: PPUSH
47195: PPUSH
47196: PPUSH
47197: PPUSH
// result := [ ] ;
47198: LD_ADDR_VAR 0 6
47202: PUSH
47203: EMPTY
47204: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47205: LD_VAR 0 1
47209: PPUSH
47210: CALL_OW 266
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: IN
47225: NOT
47226: IFFALSE 47230
// exit ;
47228: GO 48630
// if name then
47230: LD_VAR 0 2
47234: IFFALSE 47250
// SetBName ( base_dep , name ) ;
47236: LD_VAR 0 1
47240: PPUSH
47241: LD_VAR 0 2
47245: PPUSH
47246: CALL_OW 500
// base := GetBase ( base_dep ) ;
47250: LD_ADDR_VAR 0 14
47254: PUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 274
47264: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47265: LD_ADDR_VAR 0 15
47269: PUSH
47270: LD_VAR 0 1
47274: PPUSH
47275: CALL_OW 255
47279: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47280: LD_ADDR_VAR 0 16
47284: PUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL_OW 248
47294: ST_TO_ADDR
// if sources then
47295: LD_VAR 0 4
47299: IFFALSE 47346
// for i = 1 to 3 do
47301: LD_ADDR_VAR 0 7
47305: PUSH
47306: DOUBLE
47307: LD_INT 1
47309: DEC
47310: ST_TO_ADDR
47311: LD_INT 3
47313: PUSH
47314: FOR_TO
47315: IFFALSE 47344
// AddResourceType ( base , i , sources [ i ] ) ;
47317: LD_VAR 0 14
47321: PPUSH
47322: LD_VAR 0 7
47326: PPUSH
47327: LD_VAR 0 4
47331: PUSH
47332: LD_VAR 0 7
47336: ARRAY
47337: PPUSH
47338: CALL_OW 276
47342: GO 47314
47344: POP
47345: POP
// buildings := GetBaseBuildings ( base ) ;
47346: LD_ADDR_VAR 0 17
47350: PUSH
47351: LD_VAR 0 14
47355: PPUSH
47356: CALL 46652 0 1
47360: ST_TO_ADDR
// InitHc ;
47361: CALL_OW 19
// InitUc ;
47365: CALL_OW 18
// uc_side := side ;
47369: LD_ADDR_OWVAR 20
47373: PUSH
47374: LD_VAR 0 15
47378: ST_TO_ADDR
// uc_nation := nation ;
47379: LD_ADDR_OWVAR 21
47383: PUSH
47384: LD_VAR 0 16
47388: ST_TO_ADDR
// if buildings then
47389: LD_VAR 0 17
47393: IFFALSE 48489
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47395: LD_VAR 0 17
47399: PPUSH
47400: LD_INT 2
47402: PUSH
47403: LD_INT 30
47405: PUSH
47406: LD_INT 32
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 30
47415: PUSH
47416: LD_INT 33
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: PPUSH
47428: CALL_OW 72
47432: IFFALSE 47515
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47434: LD_ADDR_VAR 0 7
47438: PUSH
47439: LD_VAR 0 17
47443: PPUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 30
47449: PUSH
47450: LD_INT 32
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 30
47459: PUSH
47460: LD_INT 33
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL_OW 72
47476: PUSH
47477: FOR_IN
47478: IFFALSE 47513
// begin if not GetBWeapon ( i ) then
47480: LD_VAR 0 7
47484: PPUSH
47485: CALL_OW 269
47489: NOT
47490: IFFALSE 47511
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
47492: LD_VAR 0 7
47496: PPUSH
47497: LD_VAR 0 7
47501: PPUSH
47502: CALL 48635 0 1
47506: PPUSH
47507: CALL_OW 431
// end ;
47511: GO 47477
47513: POP
47514: POP
// end ; for i = 1 to personel do
47515: LD_ADDR_VAR 0 7
47519: PUSH
47520: DOUBLE
47521: LD_INT 1
47523: DEC
47524: ST_TO_ADDR
47525: LD_VAR 0 5
47529: PUSH
47530: FOR_TO
47531: IFFALSE 48469
// begin if i > 4 then
47533: LD_VAR 0 7
47537: PUSH
47538: LD_INT 4
47540: GREATER
47541: IFFALSE 47545
// break ;
47543: GO 48469
// case i of 1 :
47545: LD_VAR 0 7
47549: PUSH
47550: LD_INT 1
47552: DOUBLE
47553: EQUAL
47554: IFTRUE 47558
47556: GO 47631
47558: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47559: LD_ADDR_VAR 0 11
47563: PUSH
47564: LD_VAR 0 17
47568: PPUSH
47569: LD_INT 22
47571: PUSH
47572: LD_VAR 0 15
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: LD_INT 30
47586: PUSH
47587: LD_INT 32
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 30
47596: PUSH
47597: LD_INT 4
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 30
47606: PUSH
47607: LD_INT 5
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PPUSH
47624: CALL_OW 72
47628: ST_TO_ADDR
47629: GO 47853
47631: LD_INT 2
47633: DOUBLE
47634: EQUAL
47635: IFTRUE 47639
47637: GO 47701
47639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47640: LD_ADDR_VAR 0 11
47644: PUSH
47645: LD_VAR 0 17
47649: PPUSH
47650: LD_INT 22
47652: PUSH
47653: LD_VAR 0 15
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: PUSH
47665: LD_INT 30
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 30
47677: PUSH
47678: LD_INT 1
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PPUSH
47694: CALL_OW 72
47698: ST_TO_ADDR
47699: GO 47853
47701: LD_INT 3
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47709
47707: GO 47771
47709: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47710: LD_ADDR_VAR 0 11
47714: PUSH
47715: LD_VAR 0 17
47719: PPUSH
47720: LD_INT 22
47722: PUSH
47723: LD_VAR 0 15
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 30
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 30
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PPUSH
47764: CALL_OW 72
47768: ST_TO_ADDR
47769: GO 47853
47771: LD_INT 4
47773: DOUBLE
47774: EQUAL
47775: IFTRUE 47779
47777: GO 47852
47779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47780: LD_ADDR_VAR 0 11
47784: PUSH
47785: LD_VAR 0 17
47789: PPUSH
47790: LD_INT 22
47792: PUSH
47793: LD_VAR 0 15
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 2
47804: PUSH
47805: LD_INT 30
47807: PUSH
47808: LD_INT 6
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 30
47817: PUSH
47818: LD_INT 7
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 30
47827: PUSH
47828: LD_INT 8
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PPUSH
47845: CALL_OW 72
47849: ST_TO_ADDR
47850: GO 47853
47852: POP
// x := personel [ i ] ;
47853: LD_ADDR_VAR 0 12
47857: PUSH
47858: LD_VAR 0 5
47862: PUSH
47863: LD_VAR 0 7
47867: ARRAY
47868: ST_TO_ADDR
// if x = - 1 then
47869: LD_VAR 0 12
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: EQUAL
47878: IFFALSE 48087
// begin for j in f do
47880: LD_ADDR_VAR 0 8
47884: PUSH
47885: LD_VAR 0 11
47889: PUSH
47890: FOR_IN
47891: IFFALSE 48083
// repeat InitHc ;
47893: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47897: LD_VAR 0 8
47901: PPUSH
47902: CALL_OW 266
47906: PUSH
47907: LD_INT 5
47909: EQUAL
47910: IFFALSE 47980
// begin if UnitsInside ( j ) < 3 then
47912: LD_VAR 0 8
47916: PPUSH
47917: CALL_OW 313
47921: PUSH
47922: LD_INT 3
47924: LESS
47925: IFFALSE 47961
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47927: LD_INT 0
47929: PPUSH
47930: LD_INT 5
47932: PUSH
47933: LD_INT 8
47935: PUSH
47936: LD_INT 9
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: PUSH
47944: LD_VAR 0 16
47948: ARRAY
47949: PPUSH
47950: LD_VAR 0 3
47954: PPUSH
47955: CALL_OW 380
47959: GO 47978
// PrepareHuman ( false , i , skill ) ;
47961: LD_INT 0
47963: PPUSH
47964: LD_VAR 0 7
47968: PPUSH
47969: LD_VAR 0 3
47973: PPUSH
47974: CALL_OW 380
// end else
47978: GO 47997
// PrepareHuman ( false , i , skill ) ;
47980: LD_INT 0
47982: PPUSH
47983: LD_VAR 0 7
47987: PPUSH
47988: LD_VAR 0 3
47992: PPUSH
47993: CALL_OW 380
// un := CreateHuman ;
47997: LD_ADDR_VAR 0 13
48001: PUSH
48002: CALL_OW 44
48006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48007: LD_ADDR_VAR 0 6
48011: PUSH
48012: LD_VAR 0 6
48016: PPUSH
48017: LD_INT 1
48019: PPUSH
48020: LD_VAR 0 13
48024: PPUSH
48025: CALL_OW 2
48029: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48030: LD_VAR 0 13
48034: PPUSH
48035: LD_VAR 0 8
48039: PPUSH
48040: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48044: LD_VAR 0 8
48048: PPUSH
48049: CALL_OW 313
48053: PUSH
48054: LD_INT 6
48056: EQUAL
48057: PUSH
48058: LD_VAR 0 8
48062: PPUSH
48063: CALL_OW 266
48067: PUSH
48068: LD_INT 32
48070: PUSH
48071: LD_INT 31
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: IN
48078: OR
48079: IFFALSE 47893
48081: GO 47890
48083: POP
48084: POP
// end else
48085: GO 48467
// for j = 1 to x do
48087: LD_ADDR_VAR 0 8
48091: PUSH
48092: DOUBLE
48093: LD_INT 1
48095: DEC
48096: ST_TO_ADDR
48097: LD_VAR 0 12
48101: PUSH
48102: FOR_TO
48103: IFFALSE 48465
// begin InitHc ;
48105: CALL_OW 19
// if not f then
48109: LD_VAR 0 11
48113: NOT
48114: IFFALSE 48203
// begin PrepareHuman ( false , i , skill ) ;
48116: LD_INT 0
48118: PPUSH
48119: LD_VAR 0 7
48123: PPUSH
48124: LD_VAR 0 3
48128: PPUSH
48129: CALL_OW 380
// un := CreateHuman ;
48133: LD_ADDR_VAR 0 13
48137: PUSH
48138: CALL_OW 44
48142: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48143: LD_ADDR_VAR 0 6
48147: PUSH
48148: LD_VAR 0 6
48152: PPUSH
48153: LD_INT 1
48155: PPUSH
48156: LD_VAR 0 13
48160: PPUSH
48161: CALL_OW 2
48165: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48166: LD_VAR 0 13
48170: PPUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 250
48180: PPUSH
48181: LD_VAR 0 1
48185: PPUSH
48186: CALL_OW 251
48190: PPUSH
48191: LD_INT 10
48193: PPUSH
48194: LD_INT 0
48196: PPUSH
48197: CALL_OW 50
// continue ;
48201: GO 48102
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48203: LD_VAR 0 11
48207: PUSH
48208: LD_INT 1
48210: ARRAY
48211: PPUSH
48212: CALL_OW 313
48216: PUSH
48217: LD_VAR 0 11
48221: PUSH
48222: LD_INT 1
48224: ARRAY
48225: PPUSH
48226: CALL_OW 266
48230: PUSH
48231: LD_INT 32
48233: PUSH
48234: LD_INT 31
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: IN
48241: AND
48242: PUSH
48243: LD_VAR 0 11
48247: PUSH
48248: LD_INT 1
48250: ARRAY
48251: PPUSH
48252: CALL_OW 313
48256: PUSH
48257: LD_INT 6
48259: EQUAL
48260: OR
48261: IFFALSE 48281
// f := Delete ( f , 1 ) ;
48263: LD_ADDR_VAR 0 11
48267: PUSH
48268: LD_VAR 0 11
48272: PPUSH
48273: LD_INT 1
48275: PPUSH
48276: CALL_OW 3
48280: ST_TO_ADDR
// if not f then
48281: LD_VAR 0 11
48285: NOT
48286: IFFALSE 48304
// begin x := x + 2 ;
48288: LD_ADDR_VAR 0 12
48292: PUSH
48293: LD_VAR 0 12
48297: PUSH
48298: LD_INT 2
48300: PLUS
48301: ST_TO_ADDR
// continue ;
48302: GO 48102
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48304: LD_VAR 0 11
48308: PUSH
48309: LD_INT 1
48311: ARRAY
48312: PPUSH
48313: CALL_OW 266
48317: PUSH
48318: LD_INT 5
48320: EQUAL
48321: IFFALSE 48395
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48323: LD_VAR 0 11
48327: PUSH
48328: LD_INT 1
48330: ARRAY
48331: PPUSH
48332: CALL_OW 313
48336: PUSH
48337: LD_INT 3
48339: LESS
48340: IFFALSE 48376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48342: LD_INT 0
48344: PPUSH
48345: LD_INT 5
48347: PUSH
48348: LD_INT 8
48350: PUSH
48351: LD_INT 9
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: PUSH
48359: LD_VAR 0 16
48363: ARRAY
48364: PPUSH
48365: LD_VAR 0 3
48369: PPUSH
48370: CALL_OW 380
48374: GO 48393
// PrepareHuman ( false , i , skill ) ;
48376: LD_INT 0
48378: PPUSH
48379: LD_VAR 0 7
48383: PPUSH
48384: LD_VAR 0 3
48388: PPUSH
48389: CALL_OW 380
// end else
48393: GO 48412
// PrepareHuman ( false , i , skill ) ;
48395: LD_INT 0
48397: PPUSH
48398: LD_VAR 0 7
48402: PPUSH
48403: LD_VAR 0 3
48407: PPUSH
48408: CALL_OW 380
// un := CreateHuman ;
48412: LD_ADDR_VAR 0 13
48416: PUSH
48417: CALL_OW 44
48421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48422: LD_ADDR_VAR 0 6
48426: PUSH
48427: LD_VAR 0 6
48431: PPUSH
48432: LD_INT 1
48434: PPUSH
48435: LD_VAR 0 13
48439: PPUSH
48440: CALL_OW 2
48444: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48445: LD_VAR 0 13
48449: PPUSH
48450: LD_VAR 0 11
48454: PUSH
48455: LD_INT 1
48457: ARRAY
48458: PPUSH
48459: CALL_OW 52
// end ;
48463: GO 48102
48465: POP
48466: POP
// end ;
48467: GO 47530
48469: POP
48470: POP
// result := result ^ buildings ;
48471: LD_ADDR_VAR 0 6
48475: PUSH
48476: LD_VAR 0 6
48480: PUSH
48481: LD_VAR 0 17
48485: ADD
48486: ST_TO_ADDR
// end else
48487: GO 48630
// begin for i = 1 to personel do
48489: LD_ADDR_VAR 0 7
48493: PUSH
48494: DOUBLE
48495: LD_INT 1
48497: DEC
48498: ST_TO_ADDR
48499: LD_VAR 0 5
48503: PUSH
48504: FOR_TO
48505: IFFALSE 48628
// begin if i > 4 then
48507: LD_VAR 0 7
48511: PUSH
48512: LD_INT 4
48514: GREATER
48515: IFFALSE 48519
// break ;
48517: GO 48628
// x := personel [ i ] ;
48519: LD_ADDR_VAR 0 12
48523: PUSH
48524: LD_VAR 0 5
48528: PUSH
48529: LD_VAR 0 7
48533: ARRAY
48534: ST_TO_ADDR
// if x = - 1 then
48535: LD_VAR 0 12
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: EQUAL
48544: IFFALSE 48548
// continue ;
48546: GO 48504
// PrepareHuman ( false , i , skill ) ;
48548: LD_INT 0
48550: PPUSH
48551: LD_VAR 0 7
48555: PPUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: CALL_OW 380
// un := CreateHuman ;
48565: LD_ADDR_VAR 0 13
48569: PUSH
48570: CALL_OW 44
48574: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48575: LD_VAR 0 13
48579: PPUSH
48580: LD_VAR 0 1
48584: PPUSH
48585: CALL_OW 250
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: CALL_OW 251
48599: PPUSH
48600: LD_INT 10
48602: PPUSH
48603: LD_INT 0
48605: PPUSH
48606: CALL_OW 50
// result := result ^ un ;
48610: LD_ADDR_VAR 0 6
48614: PUSH
48615: LD_VAR 0 6
48619: PUSH
48620: LD_VAR 0 13
48624: ADD
48625: ST_TO_ADDR
// end ;
48626: GO 48504
48628: POP
48629: POP
// end ; end ;
48630: LD_VAR 0 6
48634: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48635: LD_INT 0
48637: PPUSH
48638: PPUSH
48639: PPUSH
48640: PPUSH
48641: PPUSH
48642: PPUSH
48643: PPUSH
48644: PPUSH
48645: PPUSH
48646: PPUSH
48647: PPUSH
48648: PPUSH
48649: PPUSH
48650: PPUSH
48651: PPUSH
48652: PPUSH
// result := false ;
48653: LD_ADDR_VAR 0 2
48657: PUSH
48658: LD_INT 0
48660: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48661: LD_VAR 0 1
48665: NOT
48666: PUSH
48667: LD_VAR 0 1
48671: PPUSH
48672: CALL_OW 266
48676: PUSH
48677: LD_INT 32
48679: PUSH
48680: LD_INT 33
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: IN
48687: NOT
48688: OR
48689: IFFALSE 48693
// exit ;
48691: GO 49824
// nat := GetNation ( tower ) ;
48693: LD_ADDR_VAR 0 11
48697: PUSH
48698: LD_VAR 0 1
48702: PPUSH
48703: CALL_OW 248
48707: ST_TO_ADDR
// side := GetSide ( tower ) ;
48708: LD_ADDR_VAR 0 15
48712: PUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 255
48722: ST_TO_ADDR
// x := GetX ( tower ) ;
48723: LD_ADDR_VAR 0 9
48727: PUSH
48728: LD_VAR 0 1
48732: PPUSH
48733: CALL_OW 250
48737: ST_TO_ADDR
// y := GetY ( tower ) ;
48738: LD_ADDR_VAR 0 10
48742: PUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: CALL_OW 251
48752: ST_TO_ADDR
// if not x or not y then
48753: LD_VAR 0 9
48757: NOT
48758: PUSH
48759: LD_VAR 0 10
48763: NOT
48764: OR
48765: IFFALSE 48769
// exit ;
48767: GO 49824
// weapon := 0 ;
48769: LD_ADDR_VAR 0 17
48773: PUSH
48774: LD_INT 0
48776: ST_TO_ADDR
// fac_list := [ ] ;
48777: LD_ADDR_VAR 0 16
48781: PUSH
48782: EMPTY
48783: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
48784: LD_ADDR_VAR 0 5
48788: PUSH
48789: LD_VAR 0 1
48793: PPUSH
48794: CALL_OW 274
48798: PPUSH
48799: CALL 46652 0 1
48803: PPUSH
48804: LD_INT 30
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PPUSH
48814: CALL_OW 72
48818: ST_TO_ADDR
// if not factories then
48819: LD_VAR 0 5
48823: NOT
48824: IFFALSE 48828
// exit ;
48826: GO 49824
// for i in factories do
48828: LD_ADDR_VAR 0 7
48832: PUSH
48833: LD_VAR 0 5
48837: PUSH
48838: FOR_IN
48839: IFFALSE 48864
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48841: LD_ADDR_VAR 0 16
48845: PUSH
48846: LD_VAR 0 16
48850: PUSH
48851: LD_VAR 0 7
48855: PPUSH
48856: CALL_OW 478
48860: UNION
48861: ST_TO_ADDR
48862: GO 48838
48864: POP
48865: POP
// if not fac_list then
48866: LD_VAR 0 16
48870: NOT
48871: IFFALSE 48875
// exit ;
48873: GO 49824
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48875: LD_ADDR_VAR 0 4
48879: PUSH
48880: LD_INT 4
48882: PUSH
48883: LD_INT 5
48885: PUSH
48886: LD_INT 9
48888: PUSH
48889: LD_INT 10
48891: PUSH
48892: LD_INT 6
48894: PUSH
48895: LD_INT 7
48897: PUSH
48898: LD_INT 11
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 27
48912: PUSH
48913: LD_INT 28
48915: PUSH
48916: LD_INT 26
48918: PUSH
48919: LD_INT 30
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 43
48930: PUSH
48931: LD_INT 44
48933: PUSH
48934: LD_INT 46
48936: PUSH
48937: LD_INT 45
48939: PUSH
48940: LD_INT 47
48942: PUSH
48943: LD_INT 49
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: LIST
48958: PUSH
48959: LD_VAR 0 11
48963: ARRAY
48964: ST_TO_ADDR
// for i in list do
48965: LD_ADDR_VAR 0 7
48969: PUSH
48970: LD_VAR 0 4
48974: PUSH
48975: FOR_IN
48976: IFFALSE 49009
// if not i in fac_list then
48978: LD_VAR 0 7
48982: PUSH
48983: LD_VAR 0 16
48987: IN
48988: NOT
48989: IFFALSE 49007
// list := list diff i ;
48991: LD_ADDR_VAR 0 4
48995: PUSH
48996: LD_VAR 0 4
49000: PUSH
49001: LD_VAR 0 7
49005: DIFF
49006: ST_TO_ADDR
49007: GO 48975
49009: POP
49010: POP
// if not list then
49011: LD_VAR 0 4
49015: NOT
49016: IFFALSE 49020
// exit ;
49018: GO 49824
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49020: LD_VAR 0 11
49024: PUSH
49025: LD_INT 3
49027: EQUAL
49028: PUSH
49029: LD_INT 49
49031: PUSH
49032: LD_VAR 0 4
49036: IN
49037: AND
49038: PUSH
49039: LD_INT 31
49041: PPUSH
49042: LD_VAR 0 15
49046: PPUSH
49047: CALL_OW 321
49051: PUSH
49052: LD_INT 2
49054: EQUAL
49055: AND
49056: IFFALSE 49116
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49058: LD_INT 22
49060: PUSH
49061: LD_VAR 0 15
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 35
49072: PUSH
49073: LD_INT 49
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 91
49082: PUSH
49083: LD_VAR 0 1
49087: PUSH
49088: LD_INT 10
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: PPUSH
49101: CALL_OW 69
49105: NOT
49106: IFFALSE 49116
// weapon := ru_time_lapser ;
49108: LD_ADDR_VAR 0 17
49112: PUSH
49113: LD_INT 49
49115: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49116: LD_VAR 0 11
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: IN
49131: PUSH
49132: LD_INT 11
49134: PUSH
49135: LD_VAR 0 4
49139: IN
49140: PUSH
49141: LD_INT 30
49143: PUSH
49144: LD_VAR 0 4
49148: IN
49149: OR
49150: AND
49151: PUSH
49152: LD_INT 6
49154: PPUSH
49155: LD_VAR 0 15
49159: PPUSH
49160: CALL_OW 321
49164: PUSH
49165: LD_INT 2
49167: EQUAL
49168: AND
49169: IFFALSE 49334
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49171: LD_INT 22
49173: PUSH
49174: LD_VAR 0 15
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 35
49188: PUSH
49189: LD_INT 11
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 35
49198: PUSH
49199: LD_INT 30
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 91
49213: PUSH
49214: LD_VAR 0 1
49218: PUSH
49219: LD_INT 18
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: LIST
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: LIST
49231: PPUSH
49232: CALL_OW 69
49236: NOT
49237: PUSH
49238: LD_INT 22
49240: PUSH
49241: LD_VAR 0 15
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: PUSH
49253: LD_INT 30
49255: PUSH
49256: LD_INT 32
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 30
49265: PUSH
49266: LD_INT 33
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 91
49280: PUSH
49281: LD_VAR 0 1
49285: PUSH
49286: LD_INT 12
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: PPUSH
49302: CALL_OW 69
49306: PUSH
49307: LD_INT 2
49309: GREATER
49310: AND
49311: IFFALSE 49334
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49313: LD_ADDR_VAR 0 17
49317: PUSH
49318: LD_INT 11
49320: PUSH
49321: LD_INT 30
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_VAR 0 11
49332: ARRAY
49333: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49334: LD_VAR 0 17
49338: NOT
49339: PUSH
49340: LD_INT 40
49342: PPUSH
49343: LD_VAR 0 15
49347: PPUSH
49348: CALL_OW 321
49352: PUSH
49353: LD_INT 2
49355: EQUAL
49356: AND
49357: PUSH
49358: LD_INT 7
49360: PUSH
49361: LD_VAR 0 4
49365: IN
49366: PUSH
49367: LD_INT 28
49369: PUSH
49370: LD_VAR 0 4
49374: IN
49375: OR
49376: PUSH
49377: LD_INT 45
49379: PUSH
49380: LD_VAR 0 4
49384: IN
49385: OR
49386: AND
49387: IFFALSE 49641
// begin hex := GetHexInfo ( x , y ) ;
49389: LD_ADDR_VAR 0 3
49393: PUSH
49394: LD_VAR 0 9
49398: PPUSH
49399: LD_VAR 0 10
49403: PPUSH
49404: CALL_OW 546
49408: ST_TO_ADDR
// if hex [ 1 ] then
49409: LD_VAR 0 3
49413: PUSH
49414: LD_INT 1
49416: ARRAY
49417: IFFALSE 49421
// exit ;
49419: GO 49824
// height := hex [ 2 ] ;
49421: LD_ADDR_VAR 0 14
49425: PUSH
49426: LD_VAR 0 3
49430: PUSH
49431: LD_INT 2
49433: ARRAY
49434: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49435: LD_ADDR_VAR 0 13
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 3
49448: PUSH
49449: LD_INT 5
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// for i in tmp do
49458: LD_ADDR_VAR 0 7
49462: PUSH
49463: LD_VAR 0 13
49467: PUSH
49468: FOR_IN
49469: IFFALSE 49639
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49471: LD_ADDR_VAR 0 8
49475: PUSH
49476: LD_VAR 0 9
49480: PPUSH
49481: LD_VAR 0 7
49485: PPUSH
49486: LD_INT 5
49488: PPUSH
49489: CALL_OW 272
49493: PUSH
49494: LD_VAR 0 10
49498: PPUSH
49499: LD_VAR 0 7
49503: PPUSH
49504: LD_INT 5
49506: PPUSH
49507: CALL_OW 273
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49516: LD_VAR 0 8
49520: PUSH
49521: LD_INT 1
49523: ARRAY
49524: PPUSH
49525: LD_VAR 0 8
49529: PUSH
49530: LD_INT 2
49532: ARRAY
49533: PPUSH
49534: CALL_OW 488
49538: IFFALSE 49637
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49540: LD_ADDR_VAR 0 3
49544: PUSH
49545: LD_VAR 0 8
49549: PUSH
49550: LD_INT 1
49552: ARRAY
49553: PPUSH
49554: LD_VAR 0 8
49558: PUSH
49559: LD_INT 2
49561: ARRAY
49562: PPUSH
49563: CALL_OW 546
49567: ST_TO_ADDR
// if hex [ 1 ] then
49568: LD_VAR 0 3
49572: PUSH
49573: LD_INT 1
49575: ARRAY
49576: IFFALSE 49580
// continue ;
49578: GO 49468
// h := hex [ 2 ] ;
49580: LD_ADDR_VAR 0 12
49584: PUSH
49585: LD_VAR 0 3
49589: PUSH
49590: LD_INT 2
49592: ARRAY
49593: ST_TO_ADDR
// if h + 7 < height then
49594: LD_VAR 0 12
49598: PUSH
49599: LD_INT 7
49601: PLUS
49602: PUSH
49603: LD_VAR 0 14
49607: LESS
49608: IFFALSE 49637
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49610: LD_ADDR_VAR 0 17
49614: PUSH
49615: LD_INT 7
49617: PUSH
49618: LD_INT 28
49620: PUSH
49621: LD_INT 45
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: LIST
49628: PUSH
49629: LD_VAR 0 11
49633: ARRAY
49634: ST_TO_ADDR
// break ;
49635: GO 49639
// end ; end ; end ;
49637: GO 49468
49639: POP
49640: POP
// end ; if not weapon then
49641: LD_VAR 0 17
49645: NOT
49646: IFFALSE 49706
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49648: LD_ADDR_VAR 0 4
49652: PUSH
49653: LD_VAR 0 4
49657: PUSH
49658: LD_INT 11
49660: PUSH
49661: LD_INT 30
49663: PUSH
49664: LD_INT 49
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: DIFF
49672: ST_TO_ADDR
// if not list then
49673: LD_VAR 0 4
49677: NOT
49678: IFFALSE 49682
// exit ;
49680: GO 49824
// weapon := list [ rand ( 1 , list ) ] ;
49682: LD_ADDR_VAR 0 17
49686: PUSH
49687: LD_VAR 0 4
49691: PUSH
49692: LD_INT 1
49694: PPUSH
49695: LD_VAR 0 4
49699: PPUSH
49700: CALL_OW 12
49704: ARRAY
49705: ST_TO_ADDR
// end ; if weapon then
49706: LD_VAR 0 17
49710: IFFALSE 49824
// begin tmp := CostOfWeapon ( weapon ) ;
49712: LD_ADDR_VAR 0 13
49716: PUSH
49717: LD_VAR 0 17
49721: PPUSH
49722: CALL_OW 451
49726: ST_TO_ADDR
// j := GetBase ( tower ) ;
49727: LD_ADDR_VAR 0 8
49731: PUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 274
49741: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49742: LD_VAR 0 8
49746: PPUSH
49747: LD_INT 1
49749: PPUSH
49750: CALL_OW 275
49754: PUSH
49755: LD_VAR 0 13
49759: PUSH
49760: LD_INT 1
49762: ARRAY
49763: GREATEREQUAL
49764: PUSH
49765: LD_VAR 0 8
49769: PPUSH
49770: LD_INT 2
49772: PPUSH
49773: CALL_OW 275
49777: PUSH
49778: LD_VAR 0 13
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: GREATEREQUAL
49787: AND
49788: PUSH
49789: LD_VAR 0 8
49793: PPUSH
49794: LD_INT 3
49796: PPUSH
49797: CALL_OW 275
49801: PUSH
49802: LD_VAR 0 13
49806: PUSH
49807: LD_INT 3
49809: ARRAY
49810: GREATEREQUAL
49811: AND
49812: IFFALSE 49824
// result := weapon ;
49814: LD_ADDR_VAR 0 2
49818: PUSH
49819: LD_VAR 0 17
49823: ST_TO_ADDR
// end ; end ;
49824: LD_VAR 0 2
49828: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49829: LD_INT 0
49831: PPUSH
49832: PPUSH
// result := true ;
49833: LD_ADDR_VAR 0 3
49837: PUSH
49838: LD_INT 1
49840: ST_TO_ADDR
// if array1 = array2 then
49841: LD_VAR 0 1
49845: PUSH
49846: LD_VAR 0 2
49850: EQUAL
49851: IFFALSE 49911
// begin for i = 1 to array1 do
49853: LD_ADDR_VAR 0 4
49857: PUSH
49858: DOUBLE
49859: LD_INT 1
49861: DEC
49862: ST_TO_ADDR
49863: LD_VAR 0 1
49867: PUSH
49868: FOR_TO
49869: IFFALSE 49907
// if array1 [ i ] <> array2 [ i ] then
49871: LD_VAR 0 1
49875: PUSH
49876: LD_VAR 0 4
49880: ARRAY
49881: PUSH
49882: LD_VAR 0 2
49886: PUSH
49887: LD_VAR 0 4
49891: ARRAY
49892: NONEQUAL
49893: IFFALSE 49905
// begin result := false ;
49895: LD_ADDR_VAR 0 3
49899: PUSH
49900: LD_INT 0
49902: ST_TO_ADDR
// break ;
49903: GO 49907
// end ;
49905: GO 49868
49907: POP
49908: POP
// end else
49909: GO 49919
// result := false ;
49911: LD_ADDR_VAR 0 3
49915: PUSH
49916: LD_INT 0
49918: ST_TO_ADDR
// end ;
49919: LD_VAR 0 3
49923: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49924: LD_INT 0
49926: PPUSH
49927: PPUSH
49928: PPUSH
// pom := GetBase ( fac ) ;
49929: LD_ADDR_VAR 0 5
49933: PUSH
49934: LD_VAR 0 1
49938: PPUSH
49939: CALL_OW 274
49943: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49944: LD_ADDR_VAR 0 4
49948: PUSH
49949: LD_VAR 0 2
49953: PUSH
49954: LD_INT 1
49956: ARRAY
49957: PPUSH
49958: LD_VAR 0 2
49962: PUSH
49963: LD_INT 2
49965: ARRAY
49966: PPUSH
49967: LD_VAR 0 2
49971: PUSH
49972: LD_INT 3
49974: ARRAY
49975: PPUSH
49976: LD_VAR 0 2
49980: PUSH
49981: LD_INT 4
49983: ARRAY
49984: PPUSH
49985: CALL_OW 449
49989: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49990: LD_ADDR_VAR 0 3
49994: PUSH
49995: LD_VAR 0 5
49999: PPUSH
50000: LD_INT 1
50002: PPUSH
50003: CALL_OW 275
50007: PUSH
50008: LD_VAR 0 4
50012: PUSH
50013: LD_INT 1
50015: ARRAY
50016: GREATEREQUAL
50017: PUSH
50018: LD_VAR 0 5
50022: PPUSH
50023: LD_INT 2
50025: PPUSH
50026: CALL_OW 275
50030: PUSH
50031: LD_VAR 0 4
50035: PUSH
50036: LD_INT 2
50038: ARRAY
50039: GREATEREQUAL
50040: AND
50041: PUSH
50042: LD_VAR 0 5
50046: PPUSH
50047: LD_INT 3
50049: PPUSH
50050: CALL_OW 275
50054: PUSH
50055: LD_VAR 0 4
50059: PUSH
50060: LD_INT 3
50062: ARRAY
50063: GREATEREQUAL
50064: AND
50065: ST_TO_ADDR
// end ;
50066: LD_VAR 0 3
50070: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50071: LD_INT 0
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
// pom := GetBase ( building ) ;
50077: LD_ADDR_VAR 0 3
50081: PUSH
50082: LD_VAR 0 1
50086: PPUSH
50087: CALL_OW 274
50091: ST_TO_ADDR
// if not pom then
50092: LD_VAR 0 3
50096: NOT
50097: IFFALSE 50101
// exit ;
50099: GO 50271
// btype := GetBType ( building ) ;
50101: LD_ADDR_VAR 0 5
50105: PUSH
50106: LD_VAR 0 1
50110: PPUSH
50111: CALL_OW 266
50115: ST_TO_ADDR
// if btype = b_armoury then
50116: LD_VAR 0 5
50120: PUSH
50121: LD_INT 4
50123: EQUAL
50124: IFFALSE 50134
// btype := b_barracks ;
50126: LD_ADDR_VAR 0 5
50130: PUSH
50131: LD_INT 5
50133: ST_TO_ADDR
// if btype = b_depot then
50134: LD_VAR 0 5
50138: PUSH
50139: LD_INT 0
50141: EQUAL
50142: IFFALSE 50152
// btype := b_warehouse ;
50144: LD_ADDR_VAR 0 5
50148: PUSH
50149: LD_INT 1
50151: ST_TO_ADDR
// if btype = b_workshop then
50152: LD_VAR 0 5
50156: PUSH
50157: LD_INT 2
50159: EQUAL
50160: IFFALSE 50170
// btype := b_factory ;
50162: LD_ADDR_VAR 0 5
50166: PUSH
50167: LD_INT 3
50169: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50170: LD_ADDR_VAR 0 4
50174: PUSH
50175: LD_VAR 0 5
50179: PPUSH
50180: LD_VAR 0 1
50184: PPUSH
50185: CALL_OW 248
50189: PPUSH
50190: CALL_OW 450
50194: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50195: LD_ADDR_VAR 0 2
50199: PUSH
50200: LD_VAR 0 3
50204: PPUSH
50205: LD_INT 1
50207: PPUSH
50208: CALL_OW 275
50212: PUSH
50213: LD_VAR 0 4
50217: PUSH
50218: LD_INT 1
50220: ARRAY
50221: GREATEREQUAL
50222: PUSH
50223: LD_VAR 0 3
50227: PPUSH
50228: LD_INT 2
50230: PPUSH
50231: CALL_OW 275
50235: PUSH
50236: LD_VAR 0 4
50240: PUSH
50241: LD_INT 2
50243: ARRAY
50244: GREATEREQUAL
50245: AND
50246: PUSH
50247: LD_VAR 0 3
50251: PPUSH
50252: LD_INT 3
50254: PPUSH
50255: CALL_OW 275
50259: PUSH
50260: LD_VAR 0 4
50264: PUSH
50265: LD_INT 3
50267: ARRAY
50268: GREATEREQUAL
50269: AND
50270: ST_TO_ADDR
// end ;
50271: LD_VAR 0 2
50275: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50276: LD_INT 0
50278: PPUSH
50279: PPUSH
50280: PPUSH
// pom := GetBase ( building ) ;
50281: LD_ADDR_VAR 0 4
50285: PUSH
50286: LD_VAR 0 1
50290: PPUSH
50291: CALL_OW 274
50295: ST_TO_ADDR
// if not pom then
50296: LD_VAR 0 4
50300: NOT
50301: IFFALSE 50305
// exit ;
50303: GO 50406
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50305: LD_ADDR_VAR 0 5
50309: PUSH
50310: LD_VAR 0 2
50314: PPUSH
50315: LD_VAR 0 1
50319: PPUSH
50320: CALL_OW 248
50324: PPUSH
50325: CALL_OW 450
50329: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50330: LD_ADDR_VAR 0 3
50334: PUSH
50335: LD_VAR 0 4
50339: PPUSH
50340: LD_INT 1
50342: PPUSH
50343: CALL_OW 275
50347: PUSH
50348: LD_VAR 0 5
50352: PUSH
50353: LD_INT 1
50355: ARRAY
50356: GREATEREQUAL
50357: PUSH
50358: LD_VAR 0 4
50362: PPUSH
50363: LD_INT 2
50365: PPUSH
50366: CALL_OW 275
50370: PUSH
50371: LD_VAR 0 5
50375: PUSH
50376: LD_INT 2
50378: ARRAY
50379: GREATEREQUAL
50380: AND
50381: PUSH
50382: LD_VAR 0 4
50386: PPUSH
50387: LD_INT 3
50389: PPUSH
50390: CALL_OW 275
50394: PUSH
50395: LD_VAR 0 5
50399: PUSH
50400: LD_INT 3
50402: ARRAY
50403: GREATEREQUAL
50404: AND
50405: ST_TO_ADDR
// end ;
50406: LD_VAR 0 3
50410: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
50411: LD_INT 0
50413: PPUSH
50414: PPUSH
50415: PPUSH
50416: PPUSH
50417: PPUSH
50418: PPUSH
50419: PPUSH
50420: PPUSH
50421: PPUSH
50422: PPUSH
// result := false ;
50423: LD_ADDR_VAR 0 6
50427: PUSH
50428: LD_INT 0
50430: ST_TO_ADDR
// if not base or not btype or not x or not y then
50431: LD_VAR 0 1
50435: NOT
50436: PUSH
50437: LD_VAR 0 2
50441: NOT
50442: OR
50443: PUSH
50444: LD_VAR 0 3
50448: NOT
50449: OR
50450: PUSH
50451: LD_VAR 0 4
50455: NOT
50456: OR
50457: IFFALSE 50461
// exit ;
50459: GO 50975
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
50461: LD_ADDR_VAR 0 12
50465: PUSH
50466: LD_VAR 0 2
50470: PPUSH
50471: LD_VAR 0 3
50475: PPUSH
50476: LD_VAR 0 4
50480: PPUSH
50481: LD_VAR 0 5
50485: PPUSH
50486: LD_VAR 0 1
50490: PUSH
50491: LD_INT 1
50493: ARRAY
50494: PPUSH
50495: CALL_OW 248
50499: PPUSH
50500: LD_INT 0
50502: PPUSH
50503: CALL 51804 0 6
50507: ST_TO_ADDR
// if not hexes then
50508: LD_VAR 0 12
50512: NOT
50513: IFFALSE 50517
// exit ;
50515: GO 50975
// for i = 1 to hexes do
50517: LD_ADDR_VAR 0 7
50521: PUSH
50522: DOUBLE
50523: LD_INT 1
50525: DEC
50526: ST_TO_ADDR
50527: LD_VAR 0 12
50531: PUSH
50532: FOR_TO
50533: IFFALSE 50973
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50535: LD_ADDR_VAR 0 11
50539: PUSH
50540: LD_VAR 0 12
50544: PUSH
50545: LD_VAR 0 7
50549: ARRAY
50550: PUSH
50551: LD_INT 1
50553: ARRAY
50554: PPUSH
50555: LD_VAR 0 12
50559: PUSH
50560: LD_VAR 0 7
50564: ARRAY
50565: PUSH
50566: LD_INT 2
50568: ARRAY
50569: PPUSH
50570: CALL_OW 428
50574: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
50575: LD_VAR 0 11
50579: NOT
50580: PUSH
50581: LD_VAR 0 11
50585: PPUSH
50586: CALL_OW 247
50590: PUSH
50591: LD_INT 3
50593: EQUAL
50594: OR
50595: IFFALSE 50599
// continue ;
50597: GO 50532
// result := true ;
50599: LD_ADDR_VAR 0 6
50603: PUSH
50604: LD_INT 1
50606: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50607: LD_ADDR_VAR 0 15
50611: PUSH
50612: LD_INT 22
50614: PUSH
50615: LD_VAR 0 11
50619: PPUSH
50620: CALL_OW 255
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 30
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 30
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: LIST
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PPUSH
50661: CALL_OW 69
50665: ST_TO_ADDR
// if dep then
50666: LD_VAR 0 15
50670: IFFALSE 50806
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50672: LD_ADDR_VAR 0 14
50676: PUSH
50677: LD_VAR 0 15
50681: PUSH
50682: LD_INT 1
50684: ARRAY
50685: PPUSH
50686: CALL_OW 250
50690: PPUSH
50691: LD_VAR 0 15
50695: PUSH
50696: LD_INT 1
50698: ARRAY
50699: PPUSH
50700: CALL_OW 254
50704: PPUSH
50705: LD_INT 5
50707: PPUSH
50708: CALL_OW 272
50712: PUSH
50713: LD_VAR 0 15
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: CALL_OW 251
50726: PPUSH
50727: LD_VAR 0 15
50731: PUSH
50732: LD_INT 1
50734: ARRAY
50735: PPUSH
50736: CALL_OW 254
50740: PPUSH
50741: LD_INT 5
50743: PPUSH
50744: CALL_OW 273
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50753: LD_VAR 0 14
50757: PUSH
50758: LD_INT 1
50760: ARRAY
50761: PPUSH
50762: LD_VAR 0 14
50766: PUSH
50767: LD_INT 2
50769: ARRAY
50770: PPUSH
50771: CALL_OW 488
50775: IFFALSE 50806
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50777: LD_VAR 0 11
50781: PPUSH
50782: LD_VAR 0 14
50786: PUSH
50787: LD_INT 1
50789: ARRAY
50790: PPUSH
50791: LD_VAR 0 14
50795: PUSH
50796: LD_INT 2
50798: ARRAY
50799: PPUSH
50800: CALL_OW 111
// continue ;
50804: GO 50532
// end ; end ; r := GetDir ( tmp ) ;
50806: LD_ADDR_VAR 0 13
50810: PUSH
50811: LD_VAR 0 11
50815: PPUSH
50816: CALL_OW 254
50820: ST_TO_ADDR
// if r = 5 then
50821: LD_VAR 0 13
50825: PUSH
50826: LD_INT 5
50828: EQUAL
50829: IFFALSE 50839
// r := 0 ;
50831: LD_ADDR_VAR 0 13
50835: PUSH
50836: LD_INT 0
50838: ST_TO_ADDR
// for j = r to 5 do
50839: LD_ADDR_VAR 0 8
50843: PUSH
50844: DOUBLE
50845: LD_VAR 0 13
50849: DEC
50850: ST_TO_ADDR
50851: LD_INT 5
50853: PUSH
50854: FOR_TO
50855: IFFALSE 50969
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50857: LD_ADDR_VAR 0 9
50861: PUSH
50862: LD_VAR 0 11
50866: PPUSH
50867: CALL_OW 250
50871: PPUSH
50872: LD_VAR 0 8
50876: PPUSH
50877: LD_INT 2
50879: PPUSH
50880: CALL_OW 272
50884: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50885: LD_ADDR_VAR 0 10
50889: PUSH
50890: LD_VAR 0 11
50894: PPUSH
50895: CALL_OW 251
50899: PPUSH
50900: LD_VAR 0 8
50904: PPUSH
50905: LD_INT 2
50907: PPUSH
50908: CALL_OW 273
50912: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50913: LD_VAR 0 9
50917: PPUSH
50918: LD_VAR 0 10
50922: PPUSH
50923: CALL_OW 488
50927: PUSH
50928: LD_VAR 0 9
50932: PPUSH
50933: LD_VAR 0 10
50937: PPUSH
50938: CALL_OW 428
50942: NOT
50943: AND
50944: IFFALSE 50967
// begin ComMoveXY ( tmp , _x , _y ) ;
50946: LD_VAR 0 11
50950: PPUSH
50951: LD_VAR 0 9
50955: PPUSH
50956: LD_VAR 0 10
50960: PPUSH
50961: CALL_OW 111
// break ;
50965: GO 50969
// end ; end ;
50967: GO 50854
50969: POP
50970: POP
// end ;
50971: GO 50532
50973: POP
50974: POP
// end ;
50975: LD_VAR 0 6
50979: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
50980: LD_INT 0
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
50990: PPUSH
// result := false ;
50991: LD_ADDR_VAR 0 6
50995: PUSH
50996: LD_INT 0
50998: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
50999: LD_VAR 0 1
51003: NOT
51004: PUSH
51005: LD_VAR 0 1
51009: PPUSH
51010: CALL_OW 266
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: IN
51025: NOT
51026: OR
51027: PUSH
51028: LD_VAR 0 2
51032: NOT
51033: OR
51034: PUSH
51035: LD_VAR 0 5
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 3
51051: PUSH
51052: LD_INT 4
51054: PUSH
51055: LD_INT 5
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: IN
51066: NOT
51067: OR
51068: PUSH
51069: LD_VAR 0 3
51073: PPUSH
51074: LD_VAR 0 4
51078: PPUSH
51079: CALL_OW 488
51083: NOT
51084: OR
51085: IFFALSE 51089
// exit ;
51087: GO 51799
// pom := GetBase ( bdepot ) ;
51089: LD_ADDR_VAR 0 9
51093: PUSH
51094: LD_VAR 0 1
51098: PPUSH
51099: CALL_OW 274
51103: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
51104: LD_ADDR_VAR 0 10
51108: PUSH
51109: LD_VAR 0 2
51113: PPUSH
51114: LD_VAR 0 1
51118: PPUSH
51119: CALL_OW 248
51123: PPUSH
51124: CALL_OW 450
51128: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51129: LD_VAR 0 9
51133: PPUSH
51134: LD_INT 1
51136: PPUSH
51137: CALL_OW 275
51141: PUSH
51142: LD_VAR 0 10
51146: PUSH
51147: LD_INT 1
51149: ARRAY
51150: GREATEREQUAL
51151: PUSH
51152: LD_VAR 0 9
51156: PPUSH
51157: LD_INT 2
51159: PPUSH
51160: CALL_OW 275
51164: PUSH
51165: LD_VAR 0 10
51169: PUSH
51170: LD_INT 2
51172: ARRAY
51173: GREATEREQUAL
51174: AND
51175: PUSH
51176: LD_VAR 0 9
51180: PPUSH
51181: LD_INT 3
51183: PPUSH
51184: CALL_OW 275
51188: PUSH
51189: LD_VAR 0 10
51193: PUSH
51194: LD_INT 3
51196: ARRAY
51197: GREATEREQUAL
51198: AND
51199: NOT
51200: IFFALSE 51204
// exit ;
51202: GO 51799
// if GetBType ( bdepot ) = b_depot then
51204: LD_VAR 0 1
51208: PPUSH
51209: CALL_OW 266
51213: PUSH
51214: LD_INT 0
51216: EQUAL
51217: IFFALSE 51229
// dist := 28 else
51219: LD_ADDR_VAR 0 13
51223: PUSH
51224: LD_INT 28
51226: ST_TO_ADDR
51227: GO 51237
// dist := 36 ;
51229: LD_ADDR_VAR 0 13
51233: PUSH
51234: LD_INT 36
51236: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
51237: LD_VAR 0 1
51241: PPUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: LD_VAR 0 4
51251: PPUSH
51252: CALL_OW 297
51256: PUSH
51257: LD_VAR 0 13
51261: GREATER
51262: IFFALSE 51266
// exit ;
51264: GO 51799
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
51266: LD_ADDR_VAR 0 11
51270: PUSH
51271: LD_VAR 0 2
51275: PPUSH
51276: LD_VAR 0 3
51280: PPUSH
51281: LD_VAR 0 4
51285: PPUSH
51286: LD_VAR 0 5
51290: PPUSH
51291: LD_VAR 0 1
51295: PPUSH
51296: CALL_OW 248
51300: PPUSH
51301: LD_INT 0
51303: PPUSH
51304: CALL 51804 0 6
51308: ST_TO_ADDR
// if not hexes then
51309: LD_VAR 0 11
51313: NOT
51314: IFFALSE 51318
// exit ;
51316: GO 51799
// hex := GetHexInfo ( x , y ) ;
51318: LD_ADDR_VAR 0 14
51322: PUSH
51323: LD_VAR 0 3
51327: PPUSH
51328: LD_VAR 0 4
51332: PPUSH
51333: CALL_OW 546
51337: ST_TO_ADDR
// if hex [ 1 ] then
51338: LD_VAR 0 14
51342: PUSH
51343: LD_INT 1
51345: ARRAY
51346: IFFALSE 51350
// exit ;
51348: GO 51799
// height := hex [ 2 ] ;
51350: LD_ADDR_VAR 0 12
51354: PUSH
51355: LD_VAR 0 14
51359: PUSH
51360: LD_INT 2
51362: ARRAY
51363: ST_TO_ADDR
// for i = 1 to hexes do
51364: LD_ADDR_VAR 0 7
51368: PUSH
51369: DOUBLE
51370: LD_INT 1
51372: DEC
51373: ST_TO_ADDR
51374: LD_VAR 0 11
51378: PUSH
51379: FOR_TO
51380: IFFALSE 51708
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51382: LD_VAR 0 11
51386: PUSH
51387: LD_VAR 0 7
51391: ARRAY
51392: PUSH
51393: LD_INT 1
51395: ARRAY
51396: PPUSH
51397: LD_VAR 0 11
51401: PUSH
51402: LD_VAR 0 7
51406: ARRAY
51407: PUSH
51408: LD_INT 2
51410: ARRAY
51411: PPUSH
51412: CALL_OW 488
51416: NOT
51417: IFFALSE 51421
// continue ;
51419: GO 51379
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51421: LD_ADDR_VAR 0 8
51425: PUSH
51426: LD_VAR 0 11
51430: PUSH
51431: LD_VAR 0 7
51435: ARRAY
51436: PUSH
51437: LD_INT 1
51439: ARRAY
51440: PPUSH
51441: LD_VAR 0 11
51445: PUSH
51446: LD_VAR 0 7
51450: ARRAY
51451: PUSH
51452: LD_INT 2
51454: ARRAY
51455: PPUSH
51456: CALL_OW 546
51460: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51461: LD_VAR 0 8
51465: PUSH
51466: LD_INT 1
51468: ARRAY
51469: PUSH
51470: LD_VAR 0 8
51474: PUSH
51475: LD_INT 2
51477: ARRAY
51478: PUSH
51479: LD_VAR 0 12
51483: PUSH
51484: LD_INT 2
51486: PLUS
51487: GREATER
51488: OR
51489: PUSH
51490: LD_VAR 0 8
51494: PUSH
51495: LD_INT 2
51497: ARRAY
51498: PUSH
51499: LD_VAR 0 12
51503: PUSH
51504: LD_INT 2
51506: MINUS
51507: LESS
51508: OR
51509: PUSH
51510: LD_VAR 0 8
51514: PUSH
51515: LD_INT 3
51517: ARRAY
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 8
51524: PUSH
51525: LD_INT 9
51527: PUSH
51528: LD_INT 10
51530: PUSH
51531: LD_INT 11
51533: PUSH
51534: LD_INT 12
51536: PUSH
51537: LD_INT 13
51539: PUSH
51540: LD_INT 16
51542: PUSH
51543: LD_INT 17
51545: PUSH
51546: LD_INT 18
51548: PUSH
51549: LD_INT 19
51551: PUSH
51552: LD_INT 20
51554: PUSH
51555: LD_INT 21
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: IN
51573: NOT
51574: OR
51575: PUSH
51576: LD_VAR 0 8
51580: PUSH
51581: LD_INT 5
51583: ARRAY
51584: NOT
51585: OR
51586: PUSH
51587: LD_VAR 0 8
51591: PUSH
51592: LD_INT 6
51594: ARRAY
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 7
51604: PUSH
51605: LD_INT 9
51607: PUSH
51608: LD_INT 10
51610: PUSH
51611: LD_INT 11
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: IN
51622: NOT
51623: OR
51624: PUSH
51625: LD_VAR 0 11
51629: PUSH
51630: LD_VAR 0 7
51634: ARRAY
51635: PUSH
51636: LD_INT 1
51638: ARRAY
51639: PPUSH
51640: LD_VAR 0 11
51644: PUSH
51645: LD_VAR 0 7
51649: ARRAY
51650: PUSH
51651: LD_INT 2
51653: ARRAY
51654: PPUSH
51655: CALL_OW 428
51659: PUSH
51660: LD_INT 0
51662: GREATER
51663: OR
51664: PUSH
51665: LD_VAR 0 11
51669: PUSH
51670: LD_VAR 0 7
51674: ARRAY
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PPUSH
51680: LD_VAR 0 11
51684: PUSH
51685: LD_VAR 0 7
51689: ARRAY
51690: PUSH
51691: LD_INT 2
51693: ARRAY
51694: PPUSH
51695: CALL_OW 351
51699: OR
51700: IFFALSE 51706
// exit ;
51702: POP
51703: POP
51704: GO 51799
// end ;
51706: GO 51379
51708: POP
51709: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
51710: LD_VAR 0 1
51714: PPUSH
51715: CALL_OW 255
51719: PPUSH
51720: LD_VAR 0 3
51724: PPUSH
51725: LD_VAR 0 4
51729: PPUSH
51730: LD_INT 20
51732: PPUSH
51733: CALL 44836 0 4
51737: PUSH
51738: LD_INT 4
51740: ARRAY
51741: IFFALSE 51745
// exit ;
51743: GO 51799
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
51745: LD_VAR 0 2
51749: PUSH
51750: LD_INT 29
51752: PUSH
51753: LD_INT 30
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: IN
51760: PUSH
51761: LD_VAR 0 3
51765: PPUSH
51766: LD_VAR 0 4
51770: PPUSH
51771: LD_VAR 0 1
51775: PPUSH
51776: CALL_OW 255
51780: PPUSH
51781: CALL_OW 440
51785: NOT
51786: AND
51787: IFFALSE 51791
// exit ;
51789: GO 51799
// result := true ;
51791: LD_ADDR_VAR 0 6
51795: PUSH
51796: LD_INT 1
51798: ST_TO_ADDR
// end ;
51799: LD_VAR 0 6
51803: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
51804: LD_INT 0
51806: PPUSH
51807: PPUSH
51808: PPUSH
51809: PPUSH
51810: PPUSH
51811: PPUSH
51812: PPUSH
51813: PPUSH
51814: PPUSH
51815: PPUSH
51816: PPUSH
51817: PPUSH
51818: PPUSH
51819: PPUSH
51820: PPUSH
51821: PPUSH
51822: PPUSH
51823: PPUSH
51824: PPUSH
51825: PPUSH
51826: PPUSH
51827: PPUSH
51828: PPUSH
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
// result = [ ] ;
51864: LD_ADDR_VAR 0 7
51868: PUSH
51869: EMPTY
51870: ST_TO_ADDR
// temp_list = [ ] ;
51871: LD_ADDR_VAR 0 9
51875: PUSH
51876: EMPTY
51877: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51878: LD_VAR 0 4
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: LD_INT 4
51897: PUSH
51898: LD_INT 5
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: IN
51909: NOT
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: IN
51926: PUSH
51927: LD_VAR 0 5
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 3
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: LIST
51945: IN
51946: NOT
51947: AND
51948: OR
51949: IFFALSE 51953
// exit ;
51951: GO 70338
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51953: LD_VAR 0 1
51957: PUSH
51958: LD_INT 6
51960: PUSH
51961: LD_INT 7
51963: PUSH
51964: LD_INT 8
51966: PUSH
51967: LD_INT 13
51969: PUSH
51970: LD_INT 12
51972: PUSH
51973: LD_INT 15
51975: PUSH
51976: LD_INT 11
51978: PUSH
51979: LD_INT 14
51981: PUSH
51982: LD_INT 10
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: IN
51996: IFFALSE 52006
// btype = b_lab ;
51998: LD_ADDR_VAR 0 1
52002: PUSH
52003: LD_INT 6
52005: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52006: LD_VAR 0 6
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: LD_INT 1
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: LIST
52024: IN
52025: NOT
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: LD_INT 2
52040: PUSH
52041: LD_INT 3
52043: PUSH
52044: LD_INT 6
52046: PUSH
52047: LD_INT 36
52049: PUSH
52050: LD_INT 4
52052: PUSH
52053: LD_INT 5
52055: PUSH
52056: LD_INT 31
52058: PUSH
52059: LD_INT 32
52061: PUSH
52062: LD_INT 33
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: IN
52078: NOT
52079: PUSH
52080: LD_VAR 0 6
52084: PUSH
52085: LD_INT 1
52087: EQUAL
52088: AND
52089: OR
52090: PUSH
52091: LD_VAR 0 1
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: IN
52106: NOT
52107: PUSH
52108: LD_VAR 0 6
52112: PUSH
52113: LD_INT 2
52115: EQUAL
52116: AND
52117: OR
52118: IFFALSE 52128
// mode = 0 ;
52120: LD_ADDR_VAR 0 6
52124: PUSH
52125: LD_INT 0
52127: ST_TO_ADDR
// case mode of 0 :
52128: LD_VAR 0 6
52132: PUSH
52133: LD_INT 0
52135: DOUBLE
52136: EQUAL
52137: IFTRUE 52141
52139: GO 63594
52141: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52142: LD_ADDR_VAR 0 11
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 0
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: LD_INT 2
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 1
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 2
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 1
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 3
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52335: LD_ADDR_VAR 0 12
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 3
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52531: LD_ADDR_VAR 0 13
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 2
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 3
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 3
52702: NEG
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52730: LD_ADDR_VAR 0 14
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 3
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52926: LD_ADDR_VAR 0 15
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 0
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: LD_INT 0
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 2
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53119: LD_ADDR_VAR 0 16
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: LD_INT 1
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 1
53177: NEG
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: LD_INT 2
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53312: LD_ADDR_VAR 0 17
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 2
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: LD_INT 2
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 2
53488: NEG
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 2
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 2
53515: NEG
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53542: LD_ADDR_VAR 0 18
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 2
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 1
53707: NEG
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 2
53718: NEG
53719: PUSH
53720: LD_INT 0
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 2
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53772: LD_ADDR_VAR 0 19
53776: PUSH
53777: LD_INT 0
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 0
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 2
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54002: LD_ADDR_VAR 0 20
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 1
54022: NEG
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: NEG
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54232: LD_ADDR_VAR 0 21
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 1
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 2
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54462: LD_ADDR_VAR 0 22
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 1
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 1
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 2
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_INT 2
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54692: LD_ADDR_VAR 0 23
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 2
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 2
54891: NEG
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: LD_INT 3
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 3
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54972: LD_ADDR_VAR 0 24
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 0
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 3
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: LD_INT 2
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55248: LD_ADDR_VAR 0 25
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: LD_INT 2
55333: NEG
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 1
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 2
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 2
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: LD_INT 2
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 1
55393: PUSH
55394: LD_INT 2
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: NEG
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: NEG
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 2
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 2
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 3
55459: PUSH
55460: LD_INT 1
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 3
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 2
55479: PUSH
55480: LD_INT 3
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55522: LD_ADDR_VAR 0 26
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 1
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: LD_INT 1
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 2
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: NEG
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 3
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 2
55764: NEG
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55798: LD_ADDR_VAR 0 27
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 1
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 2
55883: NEG
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: LD_INT 2
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 2
55923: PUSH
55924: LD_INT 1
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 2
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 1
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 2
55997: NEG
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56078: LD_ADDR_VAR 0 28
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 2
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 2
56254: NEG
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 2
56289: NEG
56290: PUSH
56291: LD_INT 3
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: LD_INT 3
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56360: LD_ADDR_VAR 0 29
56364: PUSH
56365: LD_INT 0
56367: PUSH
56368: LD_INT 0
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 1
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 2
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 3
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: PUSH
56584: LD_INT 3
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: LD_INT 2
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 2
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56639: LD_ADDR_VAR 0 30
56643: PUSH
56644: LD_INT 0
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 1
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: NEG
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: LD_INT 2
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 2
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: NEG
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 3
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 2
56843: NEG
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 3
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 3
56882: NEG
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56917: LD_ADDR_VAR 0 31
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: LD_INT 0
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 1
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: LD_INT 1
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: LD_INT 1
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 2
57041: PUSH
57042: LD_INT 2
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 2
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 2
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 3
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 1
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 3
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57195: LD_ADDR_VAR 0 32
57199: PUSH
57200: LD_INT 0
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: LD_INT 0
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 1
57264: NEG
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 2
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 2
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: LD_INT 2
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: LD_INT 2
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 2
57361: NEG
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 2
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 3
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 3
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 3
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 3
57438: NEG
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57473: LD_ADDR_VAR 0 33
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: NEG
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: LD_INT 1
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 1
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: NEG
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 2
57663: NEG
57664: PUSH
57665: LD_INT 3
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: PUSH
57676: LD_INT 1
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57752: LD_ADDR_VAR 0 34
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 0
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: NEG
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 0
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: LD_INT 2
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: NEG
57909: PUSH
57910: LD_INT 0
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: LD_INT 2
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 3
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 1
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 3
57997: NEG
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58032: LD_ADDR_VAR 0 35
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 0
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 0
58049: PUSH
58050: LD_INT 1
58052: NEG
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 0
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: LD_INT 1
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: PUSH
58114: LD_INT 1
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58144: LD_ADDR_VAR 0 36
58148: PUSH
58149: LD_INT 0
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: PUSH
58183: LD_INT 1
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58256: LD_ADDR_VAR 0 37
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: LD_INT 0
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 1
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58368: LD_ADDR_VAR 0 38
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: LD_INT 1
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 0
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58480: LD_ADDR_VAR 0 39
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 0
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: LD_INT 1
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 2
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58592: LD_ADDR_VAR 0 40
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58704: LD_ADDR_VAR 0 41
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 1
58785: NEG
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 2
58818: PUSH
58819: LD_INT 1
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 2
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 2
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: EMPTY
58932: LIST
58933: LIST
58934: PUSH
58935: LD_INT 3
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: LD_INT 2
58957: PUSH
58958: LD_INT 3
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 2
58967: NEG
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: LD_INT 2
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 3
59013: NEG
59014: PUSH
59015: LD_INT 3
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59054: LD_ADDR_VAR 0 42
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 0
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 1
59112: NEG
59113: PUSH
59114: LD_INT 0
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 2
59139: NEG
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 0
59147: PUSH
59148: LD_INT 2
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: LD_INT 2
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 1
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: LD_INT 3
59248: NEG
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: NEG
59257: PUSH
59258: LD_INT 3
59260: NEG
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 0
59268: PUSH
59269: LD_INT 3
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 2
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: PUSH
59301: LD_INT 3
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 3
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 2
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 3
59351: NEG
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 3
59363: NEG
59364: PUSH
59365: LD_INT 3
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59404: LD_ADDR_VAR 0 43
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 1
59424: NEG
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 2
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: LD_INT 1
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 1
59539: PUSH
59540: LD_INT 2
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 2
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: LD_INT 3
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 0
59605: PUSH
59606: LD_INT 3
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 2
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 2
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 3
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: NEG
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 3
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59752: LD_ADDR_VAR 0 44
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 1
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 0
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: PUSH
59867: LD_INT 1
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 2
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 3
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 2
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: NEG
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 3
60049: NEG
60050: PUSH
60051: LD_INT 2
60053: NEG
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 3
60061: NEG
60062: PUSH
60063: LD_INT 3
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60102: LD_ADDR_VAR 0 45
60106: PUSH
60107: LD_INT 0
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 1
60160: NEG
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: LD_INT 1
60175: NEG
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 1
60183: NEG
60184: PUSH
60185: LD_INT 2
60187: NEG
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 2
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 3
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 1
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: PUSH
60349: LD_INT 3
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: PUSH
60359: LD_INT 3
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 1
60368: PUSH
60369: LD_INT 3
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 2
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 3
60411: NEG
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60452: LD_ADDR_VAR 0 46
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: LD_INT 1
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: NEG
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: NEG
60534: PUSH
60535: LD_INT 2
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 0
60545: PUSH
60546: LD_INT 2
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: LD_INT 1
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 2
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 2
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: LD_INT 0
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: LD_INT 3
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 1
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 3
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 3
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 3
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 3
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 2
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60800: LD_ADDR_VAR 0 47
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 0
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 1
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: LD_INT 1
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 1
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: NEG
60882: PUSH
60883: LD_INT 2
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 2
60896: NEG
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 1
60904: PUSH
60905: LD_INT 1
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 2
60915: NEG
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60951: LD_ADDR_VAR 0 48
60955: PUSH
60956: LD_INT 0
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: LD_INT 1
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 1
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: LD_INT 1
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: LD_INT 2
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 1
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 2
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 2
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61098: LD_ADDR_VAR 0 49
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 1
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 0
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: NEG
61157: PUSH
61158: LD_INT 0
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 2
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 2
61210: PUSH
61211: LD_INT 2
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61242: LD_ADDR_VAR 0 50
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 1
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 1
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 1
61300: NEG
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 2
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61386: LD_ADDR_VAR 0 51
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 0
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: LD_INT 1
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 1
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: LD_INT 1
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: LD_INT 1
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 1
61455: NEG
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 1
61467: PUSH
61468: LD_INT 2
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 0
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61533: LD_ADDR_VAR 0 52
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 1
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 1
61602: NEG
61603: PUSH
61604: LD_INT 1
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 1
61614: NEG
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 0
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 2
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61684: LD_ADDR_VAR 0 53
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 0
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 1
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 1
61753: NEG
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: LD_INT 2
61769: NEG
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 2
61780: NEG
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 1
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 2
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 1
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 0
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61914: LD_ADDR_VAR 0 54
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: LD_INT 2
61999: NEG
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 2
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 1
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 2
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: LD_INT 2
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: NEG
62080: PUSH
62081: LD_INT 1
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 2
62090: NEG
62091: PUSH
62092: LD_INT 0
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 2
62101: NEG
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 2
62113: NEG
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62144: LD_ADDR_VAR 0 55
62148: PUSH
62149: LD_INT 0
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 0
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 1
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 1
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 2
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 1
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 2
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 1
62289: PUSH
62290: LD_INT 2
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 2
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62374: LD_ADDR_VAR 0 56
62378: PUSH
62379: LD_INT 0
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 1
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 0
62422: PUSH
62423: LD_INT 1
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 1
62455: NEG
62456: PUSH
62457: LD_INT 2
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 0
62467: PUSH
62468: LD_INT 2
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 1
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 2
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62604: LD_ADDR_VAR 0 57
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 1
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 1
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: LD_INT 1
62685: NEG
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 2
62700: NEG
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: PUSH
62740: LD_INT 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 1
62749: PUSH
62750: LD_INT 2
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 2
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62834: LD_ADDR_VAR 0 58
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: LD_INT 1
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 0
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 0
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 1
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: PUSH
62960: LD_INT 1
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 1
62979: PUSH
62980: LD_INT 2
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 0
62989: PUSH
62990: LD_INT 2
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: PUSH
63001: LD_INT 1
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 2
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: NEG
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63064: LD_ADDR_VAR 0 59
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 0
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 1
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63152: LD_ADDR_VAR 0 60
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: LD_INT 1
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 1
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 0
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 0
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63240: LD_ADDR_VAR 0 61
63244: PUSH
63245: LD_INT 0
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 1
63268: PUSH
63269: LD_INT 0
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 0
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 1
63298: NEG
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63328: LD_ADDR_VAR 0 62
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 1
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 1
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 1
63386: NEG
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 1
63397: NEG
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: EMPTY
63404: LIST
63405: LIST
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63416: LD_ADDR_VAR 0 63
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 1
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 0
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 1
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63504: LD_ADDR_VAR 0 64
63508: PUSH
63509: LD_INT 0
63511: PUSH
63512: LD_INT 0
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 0
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 0
63552: PUSH
63553: LD_INT 1
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 1
63573: NEG
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: ST_TO_ADDR
// end ; 1 :
63592: GO 69489
63594: LD_INT 1
63596: DOUBLE
63597: EQUAL
63598: IFTRUE 63602
63600: GO 66225
63602: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63603: LD_ADDR_VAR 0 11
63607: PUSH
63608: LD_INT 1
63610: NEG
63611: PUSH
63612: LD_INT 3
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 3
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63647: LD_ADDR_VAR 0 12
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 3
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: LIST
63687: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63688: LD_ADDR_VAR 0 13
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 3
63705: PUSH
63706: LD_INT 3
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: LIST
63727: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63728: LD_ADDR_VAR 0 14
63732: PUSH
63733: LD_INT 1
63735: PUSH
63736: LD_INT 3
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 0
63745: PUSH
63746: LD_INT 3
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: NEG
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63769: LD_ADDR_VAR 0 15
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 3
63787: NEG
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 3
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: NEG
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63813: LD_ADDR_VAR 0 16
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: LD_INT 3
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 3
63832: NEG
63833: PUSH
63834: LD_INT 2
63836: NEG
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: LD_INT 3
63848: NEG
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63859: LD_ADDR_VAR 0 17
63863: PUSH
63864: LD_INT 1
63866: NEG
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: LD_INT 3
63881: NEG
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 1
63889: PUSH
63890: LD_INT 2
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63903: LD_ADDR_VAR 0 18
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: LD_INT 1
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 3
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 3
63931: PUSH
63932: LD_INT 1
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: LIST
63943: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63944: LD_ADDR_VAR 0 19
63948: PUSH
63949: LD_INT 3
63951: PUSH
63952: LD_INT 2
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: LD_INT 3
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: LD_INT 3
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: LIST
63983: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63984: LD_ADDR_VAR 0 20
63988: PUSH
63989: LD_INT 1
63991: PUSH
63992: LD_INT 3
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: LD_INT 3
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: NEG
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64025: LD_ADDR_VAR 0 21
64029: PUSH
64030: LD_INT 2
64032: NEG
64033: PUSH
64034: LD_INT 1
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 3
64043: NEG
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: LIST
64068: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64069: LD_ADDR_VAR 0 22
64073: PUSH
64074: LD_INT 2
64076: NEG
64077: PUSH
64078: LD_INT 3
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 3
64088: NEG
64089: PUSH
64090: LD_INT 2
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: LD_INT 3
64104: NEG
64105: PUSH
64106: EMPTY
64107: LIST
64108: LIST
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64115: LD_ADDR_VAR 0 23
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 4
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: LD_INT 3
64148: NEG
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: LIST
64158: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64159: LD_ADDR_VAR 0 24
64163: PUSH
64164: LD_INT 3
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 3
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 4
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64200: LD_ADDR_VAR 0 25
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: LD_INT 3
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 4
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 3
64227: PUSH
64228: LD_INT 4
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64240: LD_ADDR_VAR 0 26
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: LD_INT 4
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 1
64267: NEG
64268: PUSH
64269: LD_INT 3
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64281: LD_ADDR_VAR 0 27
64285: PUSH
64286: LD_INT 3
64288: NEG
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 3
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 4
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: LIST
64324: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64325: LD_ADDR_VAR 0 28
64329: PUSH
64330: LD_INT 3
64332: NEG
64333: PUSH
64334: LD_INT 3
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 3
64344: NEG
64345: PUSH
64346: LD_INT 4
64348: NEG
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 4
64356: NEG
64357: PUSH
64358: LD_INT 3
64360: NEG
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64371: LD_ADDR_VAR 0 29
64375: PUSH
64376: LD_INT 1
64378: NEG
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 0
64390: PUSH
64391: LD_INT 3
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 1
64401: PUSH
64402: LD_INT 2
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 1
64412: NEG
64413: PUSH
64414: LD_INT 4
64416: NEG
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 4
64427: NEG
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: LD_INT 3
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: NEG
64447: PUSH
64448: LD_INT 5
64450: NEG
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: LD_INT 5
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 1
64469: PUSH
64470: LD_INT 4
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 6
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: LD_INT 6
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 5
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64526: LD_ADDR_VAR 0 30
64530: PUSH
64531: LD_INT 2
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 3
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 3
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 3
64564: PUSH
64565: LD_INT 1
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 4
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 4
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 4
64595: PUSH
64596: LD_INT 1
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 5
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 5
64616: PUSH
64617: LD_INT 1
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 5
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 6
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 6
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64669: LD_ADDR_VAR 0 31
64673: PUSH
64674: LD_INT 3
64676: PUSH
64677: LD_INT 2
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: LD_INT 3
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 2
64696: PUSH
64697: LD_INT 3
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 4
64706: PUSH
64707: LD_INT 3
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 4
64716: PUSH
64717: LD_INT 4
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 3
64726: PUSH
64727: LD_INT 4
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 5
64736: PUSH
64737: LD_INT 4
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 5
64746: PUSH
64747: LD_INT 5
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 4
64756: PUSH
64757: LD_INT 5
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 6
64766: PUSH
64767: LD_INT 5
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 6
64776: PUSH
64777: LD_INT 6
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 5
64786: PUSH
64787: LD_INT 6
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64808: LD_ADDR_VAR 0 32
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: LD_INT 3
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 1
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: LD_INT 4
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: LD_INT 4
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: LD_INT 3
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 1
64877: PUSH
64878: LD_INT 5
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 5
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 4
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: LD_INT 6
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 6
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: LD_INT 5
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64951: LD_ADDR_VAR 0 33
64955: PUSH
64956: LD_INT 2
64958: NEG
64959: PUSH
64960: LD_INT 1
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 3
64969: NEG
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 3
64980: NEG
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 3
64992: NEG
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 4
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 4
65026: NEG
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 5
65037: NEG
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 5
65048: NEG
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 5
65060: NEG
65061: PUSH
65062: LD_INT 1
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 6
65071: NEG
65072: PUSH
65073: LD_INT 0
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 6
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65106: LD_ADDR_VAR 0 34
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: LD_INT 3
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 3
65125: NEG
65126: PUSH
65127: LD_INT 2
65129: NEG
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: LD_INT 3
65137: NEG
65138: PUSH
65139: LD_INT 3
65141: NEG
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 3
65149: NEG
65150: PUSH
65151: LD_INT 4
65153: NEG
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 4
65173: NEG
65174: PUSH
65175: LD_INT 4
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 4
65185: NEG
65186: PUSH
65187: LD_INT 5
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 5
65197: NEG
65198: PUSH
65199: LD_INT 4
65201: NEG
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 5
65209: NEG
65210: PUSH
65211: LD_INT 5
65213: NEG
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 5
65221: NEG
65222: PUSH
65223: LD_INT 6
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 6
65233: NEG
65234: PUSH
65235: LD_INT 5
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 6
65245: NEG
65246: PUSH
65247: LD_INT 6
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65269: LD_ADDR_VAR 0 41
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 2
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: LD_INT 3
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65313: LD_ADDR_VAR 0 42
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 2
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 3
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65354: LD_ADDR_VAR 0 43
65358: PUSH
65359: LD_INT 2
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 3
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 2
65381: PUSH
65382: LD_INT 3
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65394: LD_ADDR_VAR 0 44
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 3
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65435: LD_ADDR_VAR 0 45
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 2
65453: NEG
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 3
65464: NEG
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65479: LD_ADDR_VAR 0 46
65483: PUSH
65484: LD_INT 2
65486: NEG
65487: PUSH
65488: LD_INT 2
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 2
65498: NEG
65499: PUSH
65500: LD_INT 3
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 3
65510: NEG
65511: PUSH
65512: LD_INT 2
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65525: LD_ADDR_VAR 0 47
65529: PUSH
65530: LD_INT 2
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: LD_INT 3
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65558: LD_ADDR_VAR 0 48
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: LD_INT 2
65568: NEG
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 2
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65589: LD_ADDR_VAR 0 49
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 1
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 3
65606: PUSH
65607: LD_INT 2
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65618: LD_ADDR_VAR 0 50
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 1
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65647: LD_ADDR_VAR 0 51
65651: PUSH
65652: LD_INT 1
65654: NEG
65655: PUSH
65656: LD_INT 2
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: LD_INT 1
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65678: LD_ADDR_VAR 0 52
65682: PUSH
65683: LD_INT 3
65685: NEG
65686: PUSH
65687: LD_INT 1
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: LD_INT 2
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65711: LD_ADDR_VAR 0 53
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 3
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: LD_INT 3
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: LD_INT 2
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65755: LD_ADDR_VAR 0 54
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 3
65773: PUSH
65774: LD_INT 0
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 3
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: LIST
65795: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65796: LD_ADDR_VAR 0 55
65800: PUSH
65801: LD_INT 3
65803: PUSH
65804: LD_INT 2
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 3
65813: PUSH
65814: LD_INT 3
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65836: LD_ADDR_VAR 0 56
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65877: LD_ADDR_VAR 0 57
65881: PUSH
65882: LD_INT 2
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 3
65895: NEG
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 3
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65921: LD_ADDR_VAR 0 58
65925: PUSH
65926: LD_INT 2
65928: NEG
65929: PUSH
65930: LD_INT 3
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 3
65940: NEG
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 3
65952: NEG
65953: PUSH
65954: LD_INT 3
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65967: LD_ADDR_VAR 0 59
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 0
65986: PUSH
65987: LD_INT 2
65989: NEG
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 1
65997: PUSH
65998: LD_INT 1
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: LIST
66010: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66011: LD_ADDR_VAR 0 60
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 0
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66052: LD_ADDR_VAR 0 61
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 2
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: LIST
66091: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66092: LD_ADDR_VAR 0 62
66096: PUSH
66097: LD_INT 1
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 1
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66133: LD_ADDR_VAR 0 63
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: LD_INT 2
66151: NEG
66152: PUSH
66153: LD_INT 0
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 2
66162: NEG
66163: PUSH
66164: LD_INT 1
66166: NEG
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66177: LD_ADDR_VAR 0 64
66181: PUSH
66182: LD_INT 1
66184: NEG
66185: PUSH
66186: LD_INT 2
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 2
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: NEG
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: LIST
66222: ST_TO_ADDR
// end ; 2 :
66223: GO 69489
66225: LD_INT 2
66227: DOUBLE
66228: EQUAL
66229: IFTRUE 66233
66231: GO 69488
66233: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66234: LD_ADDR_VAR 0 29
66238: PUSH
66239: LD_INT 4
66241: PUSH
66242: LD_INT 0
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 4
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 5
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 5
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 4
66282: PUSH
66283: LD_INT 1
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 2
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 5
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 3
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 3
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 4
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 4
66364: PUSH
66365: LD_INT 4
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 2
66384: PUSH
66385: LD_INT 3
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 4
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: LD_INT 4
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 4
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: LD_INT 3
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: LD_INT 4
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: PUSH
66455: LD_INT 5
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 5
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 1
66474: NEG
66475: PUSH
66476: LD_INT 4
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: LD_INT 3
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 2
66496: PUSH
66497: LD_INT 5
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 2
66506: NEG
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 3
66517: NEG
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 3
66528: NEG
66529: PUSH
66530: LD_INT 1
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: LD_INT 1
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 3
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 4
66573: NEG
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 4
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 4
66596: NEG
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 2
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 4
66619: NEG
66620: PUSH
66621: LD_INT 4
66623: NEG
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: PUSH
66629: LD_INT 4
66631: NEG
66632: PUSH
66633: LD_INT 5
66635: NEG
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 3
66643: NEG
66644: PUSH
66645: LD_INT 4
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 3
66655: NEG
66656: PUSH
66657: LD_INT 3
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 5
66679: NEG
66680: PUSH
66681: LD_INT 4
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 5
66691: NEG
66692: PUSH
66693: LD_INT 5
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 3
66703: NEG
66704: PUSH
66705: LD_INT 5
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 5
66715: NEG
66716: PUSH
66717: LD_INT 3
66719: NEG
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66772: LD_ADDR_VAR 0 30
66776: PUSH
66777: LD_INT 4
66779: PUSH
66780: LD_INT 4
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 4
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: PUSH
66800: LD_INT 4
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 5
66809: PUSH
66810: LD_INT 5
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 4
66819: PUSH
66820: LD_INT 5
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 3
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 5
66849: PUSH
66850: LD_INT 3
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: LD_INT 5
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 1
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 1
66899: PUSH
66900: LD_INT 4
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 3
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 4
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: LD_INT 2
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 4
66962: NEG
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 4
66973: NEG
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 3
66985: NEG
66986: PUSH
66987: LD_INT 0
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: LD_INT 3
66996: NEG
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 4
67007: NEG
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 5
67018: NEG
67019: PUSH
67020: LD_INT 0
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 5
67029: NEG
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 5
67041: NEG
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 3
67053: NEG
67054: PUSH
67055: LD_INT 2
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: NEG
67065: PUSH
67066: LD_INT 3
67068: NEG
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 3
67076: NEG
67077: PUSH
67078: LD_INT 4
67080: NEG
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: NEG
67089: PUSH
67090: LD_INT 3
67092: NEG
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 2
67100: NEG
67101: PUSH
67102: LD_INT 2
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: NEG
67113: PUSH
67114: LD_INT 2
67116: NEG
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 4
67124: NEG
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 4
67136: NEG
67137: PUSH
67138: LD_INT 4
67140: NEG
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: NEG
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 4
67160: NEG
67161: PUSH
67162: LD_INT 2
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 0
67172: PUSH
67173: LD_INT 4
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 5
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 1
67194: PUSH
67195: LD_INT 4
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: LD_INT 3
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 3
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: NEG
67228: PUSH
67229: LD_INT 4
67231: NEG
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 5
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: LD_INT 3
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 2
67262: NEG
67263: PUSH
67264: LD_INT 5
67266: NEG
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: LIST
67291: LIST
67292: LIST
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67319: LD_ADDR_VAR 0 31
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 4
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 3
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: PUSH
67344: LD_INT 1
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: LD_INT 5
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 0
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: NEG
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: LD_INT 3
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: LD_INT 3
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 3
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 0
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 3
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 4
67475: NEG
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 4
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 4
67498: NEG
67499: PUSH
67500: LD_INT 2
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: NEG
67522: PUSH
67523: LD_INT 4
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 4
67533: NEG
67534: PUSH
67535: LD_INT 5
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_INT 3
67545: NEG
67546: PUSH
67547: LD_INT 4
67549: NEG
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: NEG
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 4
67569: NEG
67570: PUSH
67571: LD_INT 3
67573: NEG
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 5
67581: NEG
67582: PUSH
67583: LD_INT 4
67585: NEG
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 5
67593: NEG
67594: PUSH
67595: LD_INT 5
67597: NEG
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 3
67605: NEG
67606: PUSH
67607: LD_INT 5
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 5
67617: NEG
67618: PUSH
67619: LD_INT 3
67621: NEG
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 0
67629: PUSH
67630: LD_INT 3
67632: NEG
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 4
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: LD_INT 2
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 0
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: NEG
67685: PUSH
67686: LD_INT 3
67688: NEG
67689: PUSH
67690: EMPTY
67691: LIST
67692: LIST
67693: PUSH
67694: LD_INT 1
67696: NEG
67697: PUSH
67698: LD_INT 4
67700: NEG
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 2
67719: NEG
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 4
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 5
67752: PUSH
67753: LD_INT 0
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 5
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 4
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 3
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 3
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 3
67803: PUSH
67804: LD_INT 2
67806: NEG
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 5
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67869: LD_ADDR_VAR 0 32
67873: PUSH
67874: LD_INT 4
67876: NEG
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 4
67887: NEG
67888: PUSH
67889: LD_INT 1
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 3
67899: NEG
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 3
67910: NEG
67911: PUSH
67912: LD_INT 1
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 4
67921: NEG
67922: PUSH
67923: LD_INT 1
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 5
67932: NEG
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 5
67943: NEG
67944: PUSH
67945: LD_INT 1
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 5
67955: NEG
67956: PUSH
67957: LD_INT 2
67959: NEG
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 3
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 3
67990: NEG
67991: PUSH
67992: LD_INT 4
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: LD_INT 3
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 3
68026: NEG
68027: PUSH
68028: LD_INT 2
68030: NEG
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 4
68038: NEG
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: EMPTY
68045: LIST
68046: LIST
68047: PUSH
68048: LD_INT 4
68050: NEG
68051: PUSH
68052: LD_INT 4
68054: NEG
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 2
68062: NEG
68063: PUSH
68064: LD_INT 4
68066: NEG
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 4
68074: NEG
68075: PUSH
68076: LD_INT 2
68078: NEG
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 0
68086: PUSH
68087: LD_INT 4
68089: NEG
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: LD_INT 5
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 1
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: LD_INT 3
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 0
68130: PUSH
68131: LD_INT 3
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 1
68141: NEG
68142: PUSH
68143: LD_INT 4
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: LD_INT 5
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 2
68176: NEG
68177: PUSH
68178: LD_INT 5
68180: NEG
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: LD_INT 0
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: LD_INT 1
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 4
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 4
68219: PUSH
68220: LD_INT 1
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 3
68229: PUSH
68230: LD_INT 1
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: LD_INT 1
68252: NEG
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: LD_INT 2
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 4
68271: PUSH
68272: LD_INT 2
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 4
68281: PUSH
68282: LD_INT 4
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 4
68291: PUSH
68292: LD_INT 3
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 5
68301: PUSH
68302: LD_INT 4
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 5
68311: PUSH
68312: LD_INT 5
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 4
68321: PUSH
68322: LD_INT 5
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 3
68331: PUSH
68332: LD_INT 4
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: PUSH
68342: LD_INT 3
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 5
68351: PUSH
68352: LD_INT 3
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 3
68361: PUSH
68362: LD_INT 5
68364: PUSH
68365: EMPTY
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68416: LD_ADDR_VAR 0 33
68420: PUSH
68421: LD_INT 4
68423: NEG
68424: PUSH
68425: LD_INT 4
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 4
68435: NEG
68436: PUSH
68437: LD_INT 5
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 3
68447: NEG
68448: PUSH
68449: LD_INT 4
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 3
68459: NEG
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 4
68471: NEG
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 5
68483: NEG
68484: PUSH
68485: LD_INT 4
68487: NEG
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 5
68495: NEG
68496: PUSH
68497: LD_INT 5
68499: NEG
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 3
68507: NEG
68508: PUSH
68509: LD_INT 5
68511: NEG
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 5
68519: NEG
68520: PUSH
68521: LD_INT 3
68523: NEG
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: LD_INT 3
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: LD_INT 4
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 1
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 1
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: NEG
68587: PUSH
68588: LD_INT 3
68590: NEG
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 4
68602: NEG
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: PUSH
68611: LD_INT 2
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 4
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 4
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 5
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 5
68664: PUSH
68665: LD_INT 1
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 4
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: PUSH
68685: LD_INT 0
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 3
68694: PUSH
68695: LD_INT 1
68697: NEG
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 3
68705: PUSH
68706: LD_INT 2
68708: NEG
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 5
68716: PUSH
68717: LD_INT 2
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PUSH
68724: LD_INT 3
68726: PUSH
68727: LD_INT 3
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: LD_INT 2
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 4
68746: PUSH
68747: LD_INT 3
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 4
68756: PUSH
68757: LD_INT 4
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 3
68766: PUSH
68767: LD_INT 4
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 2
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 4
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 4
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 0
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: LD_INT 4
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 1
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 0
68856: PUSH
68857: LD_INT 5
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 1
68866: NEG
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 3
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: LD_INT 5
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PUSH
68896: LD_INT 2
68898: NEG
68899: PUSH
68900: LD_INT 3
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68954: LD_ADDR_VAR 0 34
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 4
68964: NEG
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: LD_INT 5
68975: NEG
68976: PUSH
68977: EMPTY
68978: LIST
68979: LIST
68980: PUSH
68981: LD_INT 1
68983: PUSH
68984: LD_INT 4
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 1
68994: PUSH
68995: LD_INT 3
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 0
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 4
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: NEG
69029: PUSH
69030: LD_INT 5
69032: NEG
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: LD_INT 3
69043: NEG
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 2
69051: NEG
69052: PUSH
69053: LD_INT 5
69055: NEG
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 3
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 4
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 4
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 3
69104: PUSH
69105: LD_INT 1
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 2
69114: PUSH
69115: LD_INT 0
69117: PUSH
69118: EMPTY
69119: LIST
69120: LIST
69121: PUSH
69122: LD_INT 2
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: LD_INT 2
69135: PUSH
69136: LD_INT 2
69138: NEG
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 4
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: LD_INT 4
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PUSH
69164: LD_INT 4
69166: PUSH
69167: LD_INT 3
69169: PUSH
69170: EMPTY
69171: LIST
69172: LIST
69173: PUSH
69174: LD_INT 5
69176: PUSH
69177: LD_INT 4
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 5
69186: PUSH
69187: LD_INT 5
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 4
69196: PUSH
69197: LD_INT 5
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 3
69206: PUSH
69207: LD_INT 4
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 3
69216: PUSH
69217: LD_INT 3
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 5
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: PUSH
69237: LD_INT 5
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: LD_INT 3
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 0
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: LD_INT 3
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 1
69276: PUSH
69277: LD_INT 4
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 4
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 1
69296: NEG
69297: PUSH
69298: LD_INT 3
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: LD_INT 2
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 2
69318: PUSH
69319: LD_INT 4
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 4
69350: NEG
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 3
69373: NEG
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 4
69384: NEG
69385: PUSH
69386: LD_INT 1
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 5
69395: NEG
69396: PUSH
69397: LD_INT 0
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 5
69406: NEG
69407: PUSH
69408: LD_INT 1
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 2
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 3
69430: NEG
69431: PUSH
69432: LD_INT 2
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: ST_TO_ADDR
// end ; end ;
69486: GO 69489
69488: POP
// case btype of b_depot , b_warehouse :
69489: LD_VAR 0 1
69493: PUSH
69494: LD_INT 0
69496: DOUBLE
69497: EQUAL
69498: IFTRUE 69508
69500: LD_INT 1
69502: DOUBLE
69503: EQUAL
69504: IFTRUE 69508
69506: GO 69709
69508: POP
// case nation of nation_american :
69509: LD_VAR 0 5
69513: PUSH
69514: LD_INT 1
69516: DOUBLE
69517: EQUAL
69518: IFTRUE 69522
69520: GO 69578
69522: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
69523: LD_ADDR_VAR 0 9
69527: PUSH
69528: LD_VAR 0 11
69532: PUSH
69533: LD_VAR 0 12
69537: PUSH
69538: LD_VAR 0 13
69542: PUSH
69543: LD_VAR 0 14
69547: PUSH
69548: LD_VAR 0 15
69552: PUSH
69553: LD_VAR 0 16
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: PUSH
69566: LD_VAR 0 4
69570: PUSH
69571: LD_INT 1
69573: PLUS
69574: ARRAY
69575: ST_TO_ADDR
69576: GO 69707
69578: LD_INT 2
69580: DOUBLE
69581: EQUAL
69582: IFTRUE 69586
69584: GO 69642
69586: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
69587: LD_ADDR_VAR 0 9
69591: PUSH
69592: LD_VAR 0 17
69596: PUSH
69597: LD_VAR 0 18
69601: PUSH
69602: LD_VAR 0 19
69606: PUSH
69607: LD_VAR 0 20
69611: PUSH
69612: LD_VAR 0 21
69616: PUSH
69617: LD_VAR 0 22
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: LD_VAR 0 4
69634: PUSH
69635: LD_INT 1
69637: PLUS
69638: ARRAY
69639: ST_TO_ADDR
69640: GO 69707
69642: LD_INT 3
69644: DOUBLE
69645: EQUAL
69646: IFTRUE 69650
69648: GO 69706
69650: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69651: LD_ADDR_VAR 0 9
69655: PUSH
69656: LD_VAR 0 23
69660: PUSH
69661: LD_VAR 0 24
69665: PUSH
69666: LD_VAR 0 25
69670: PUSH
69671: LD_VAR 0 26
69675: PUSH
69676: LD_VAR 0 27
69680: PUSH
69681: LD_VAR 0 28
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 4
69698: PUSH
69699: LD_INT 1
69701: PLUS
69702: ARRAY
69703: ST_TO_ADDR
69704: GO 69707
69706: POP
69707: GO 70256
69709: LD_INT 2
69711: DOUBLE
69712: EQUAL
69713: IFTRUE 69723
69715: LD_INT 3
69717: DOUBLE
69718: EQUAL
69719: IFTRUE 69723
69721: GO 69779
69723: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69724: LD_ADDR_VAR 0 9
69728: PUSH
69729: LD_VAR 0 29
69733: PUSH
69734: LD_VAR 0 30
69738: PUSH
69739: LD_VAR 0 31
69743: PUSH
69744: LD_VAR 0 32
69748: PUSH
69749: LD_VAR 0 33
69753: PUSH
69754: LD_VAR 0 34
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: PUSH
69767: LD_VAR 0 4
69771: PUSH
69772: LD_INT 1
69774: PLUS
69775: ARRAY
69776: ST_TO_ADDR
69777: GO 70256
69779: LD_INT 16
69781: DOUBLE
69782: EQUAL
69783: IFTRUE 69835
69785: LD_INT 17
69787: DOUBLE
69788: EQUAL
69789: IFTRUE 69835
69791: LD_INT 18
69793: DOUBLE
69794: EQUAL
69795: IFTRUE 69835
69797: LD_INT 19
69799: DOUBLE
69800: EQUAL
69801: IFTRUE 69835
69803: LD_INT 20
69805: DOUBLE
69806: EQUAL
69807: IFTRUE 69835
69809: LD_INT 21
69811: DOUBLE
69812: EQUAL
69813: IFTRUE 69835
69815: LD_INT 23
69817: DOUBLE
69818: EQUAL
69819: IFTRUE 69835
69821: LD_INT 24
69823: DOUBLE
69824: EQUAL
69825: IFTRUE 69835
69827: LD_INT 25
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69835
69833: GO 69891
69835: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69836: LD_ADDR_VAR 0 9
69840: PUSH
69841: LD_VAR 0 35
69845: PUSH
69846: LD_VAR 0 36
69850: PUSH
69851: LD_VAR 0 37
69855: PUSH
69856: LD_VAR 0 38
69860: PUSH
69861: LD_VAR 0 39
69865: PUSH
69866: LD_VAR 0 40
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: PUSH
69879: LD_VAR 0 4
69883: PUSH
69884: LD_INT 1
69886: PLUS
69887: ARRAY
69888: ST_TO_ADDR
69889: GO 70256
69891: LD_INT 6
69893: DOUBLE
69894: EQUAL
69895: IFTRUE 69947
69897: LD_INT 7
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69947
69903: LD_INT 8
69905: DOUBLE
69906: EQUAL
69907: IFTRUE 69947
69909: LD_INT 13
69911: DOUBLE
69912: EQUAL
69913: IFTRUE 69947
69915: LD_INT 12
69917: DOUBLE
69918: EQUAL
69919: IFTRUE 69947
69921: LD_INT 15
69923: DOUBLE
69924: EQUAL
69925: IFTRUE 69947
69927: LD_INT 11
69929: DOUBLE
69930: EQUAL
69931: IFTRUE 69947
69933: LD_INT 14
69935: DOUBLE
69936: EQUAL
69937: IFTRUE 69947
69939: LD_INT 10
69941: DOUBLE
69942: EQUAL
69943: IFTRUE 69947
69945: GO 70003
69947: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
69948: LD_ADDR_VAR 0 9
69952: PUSH
69953: LD_VAR 0 41
69957: PUSH
69958: LD_VAR 0 42
69962: PUSH
69963: LD_VAR 0 43
69967: PUSH
69968: LD_VAR 0 44
69972: PUSH
69973: LD_VAR 0 45
69977: PUSH
69978: LD_VAR 0 46
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: PUSH
69991: LD_VAR 0 4
69995: PUSH
69996: LD_INT 1
69998: PLUS
69999: ARRAY
70000: ST_TO_ADDR
70001: GO 70256
70003: LD_INT 36
70005: DOUBLE
70006: EQUAL
70007: IFTRUE 70011
70009: GO 70067
70011: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70012: LD_ADDR_VAR 0 9
70016: PUSH
70017: LD_VAR 0 47
70021: PUSH
70022: LD_VAR 0 48
70026: PUSH
70027: LD_VAR 0 49
70031: PUSH
70032: LD_VAR 0 50
70036: PUSH
70037: LD_VAR 0 51
70041: PUSH
70042: LD_VAR 0 52
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: LD_VAR 0 4
70059: PUSH
70060: LD_INT 1
70062: PLUS
70063: ARRAY
70064: ST_TO_ADDR
70065: GO 70256
70067: LD_INT 4
70069: DOUBLE
70070: EQUAL
70071: IFTRUE 70093
70073: LD_INT 5
70075: DOUBLE
70076: EQUAL
70077: IFTRUE 70093
70079: LD_INT 34
70081: DOUBLE
70082: EQUAL
70083: IFTRUE 70093
70085: LD_INT 37
70087: DOUBLE
70088: EQUAL
70089: IFTRUE 70093
70091: GO 70149
70093: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70094: LD_ADDR_VAR 0 9
70098: PUSH
70099: LD_VAR 0 53
70103: PUSH
70104: LD_VAR 0 54
70108: PUSH
70109: LD_VAR 0 55
70113: PUSH
70114: LD_VAR 0 56
70118: PUSH
70119: LD_VAR 0 57
70123: PUSH
70124: LD_VAR 0 58
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: PUSH
70137: LD_VAR 0 4
70141: PUSH
70142: LD_INT 1
70144: PLUS
70145: ARRAY
70146: ST_TO_ADDR
70147: GO 70256
70149: LD_INT 31
70151: DOUBLE
70152: EQUAL
70153: IFTRUE 70199
70155: LD_INT 32
70157: DOUBLE
70158: EQUAL
70159: IFTRUE 70199
70161: LD_INT 33
70163: DOUBLE
70164: EQUAL
70165: IFTRUE 70199
70167: LD_INT 27
70169: DOUBLE
70170: EQUAL
70171: IFTRUE 70199
70173: LD_INT 26
70175: DOUBLE
70176: EQUAL
70177: IFTRUE 70199
70179: LD_INT 28
70181: DOUBLE
70182: EQUAL
70183: IFTRUE 70199
70185: LD_INT 29
70187: DOUBLE
70188: EQUAL
70189: IFTRUE 70199
70191: LD_INT 30
70193: DOUBLE
70194: EQUAL
70195: IFTRUE 70199
70197: GO 70255
70199: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
70200: LD_ADDR_VAR 0 9
70204: PUSH
70205: LD_VAR 0 59
70209: PUSH
70210: LD_VAR 0 60
70214: PUSH
70215: LD_VAR 0 61
70219: PUSH
70220: LD_VAR 0 62
70224: PUSH
70225: LD_VAR 0 63
70229: PUSH
70230: LD_VAR 0 64
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: PUSH
70243: LD_VAR 0 4
70247: PUSH
70248: LD_INT 1
70250: PLUS
70251: ARRAY
70252: ST_TO_ADDR
70253: GO 70256
70255: POP
// temp_list2 = [ ] ;
70256: LD_ADDR_VAR 0 10
70260: PUSH
70261: EMPTY
70262: ST_TO_ADDR
// for i in temp_list do
70263: LD_ADDR_VAR 0 8
70267: PUSH
70268: LD_VAR 0 9
70272: PUSH
70273: FOR_IN
70274: IFFALSE 70326
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70276: LD_ADDR_VAR 0 10
70280: PUSH
70281: LD_VAR 0 10
70285: PUSH
70286: LD_VAR 0 8
70290: PUSH
70291: LD_INT 1
70293: ARRAY
70294: PUSH
70295: LD_VAR 0 2
70299: PLUS
70300: PUSH
70301: LD_VAR 0 8
70305: PUSH
70306: LD_INT 2
70308: ARRAY
70309: PUSH
70310: LD_VAR 0 3
70314: PLUS
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: EMPTY
70321: LIST
70322: ADD
70323: ST_TO_ADDR
70324: GO 70273
70326: POP
70327: POP
// result = temp_list2 ;
70328: LD_ADDR_VAR 0 7
70332: PUSH
70333: LD_VAR 0 10
70337: ST_TO_ADDR
// end ;
70338: LD_VAR 0 7
70342: RET
// export function EnemyInRange ( unit , dist ) ; begin
70343: LD_INT 0
70345: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70346: LD_ADDR_VAR 0 3
70350: PUSH
70351: LD_VAR 0 1
70355: PPUSH
70356: CALL_OW 255
70360: PPUSH
70361: LD_VAR 0 1
70365: PPUSH
70366: CALL_OW 250
70370: PPUSH
70371: LD_VAR 0 1
70375: PPUSH
70376: CALL_OW 251
70380: PPUSH
70381: LD_VAR 0 2
70385: PPUSH
70386: CALL 44836 0 4
70390: PUSH
70391: LD_INT 4
70393: ARRAY
70394: ST_TO_ADDR
// end ;
70395: LD_VAR 0 3
70399: RET
// export function PlayerSeeMe ( unit ) ; begin
70400: LD_INT 0
70402: PPUSH
// result := See ( your_side , unit ) ;
70403: LD_ADDR_VAR 0 2
70407: PUSH
70408: LD_OWVAR 2
70412: PPUSH
70413: LD_VAR 0 1
70417: PPUSH
70418: CALL_OW 292
70422: ST_TO_ADDR
// end ;
70423: LD_VAR 0 2
70427: RET
// export function ReverseDir ( unit ) ; begin
70428: LD_INT 0
70430: PPUSH
// if not unit then
70431: LD_VAR 0 1
70435: NOT
70436: IFFALSE 70440
// exit ;
70438: GO 70486
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
70440: LD_ADDR_VAR 0 2
70444: PUSH
70445: LD_INT 3
70447: PUSH
70448: LD_INT 4
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: LD_INT 2
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: CALL_OW 254
70480: PUSH
70481: LD_INT 1
70483: PLUS
70484: ARRAY
70485: ST_TO_ADDR
// end ;
70486: LD_VAR 0 2
70490: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70491: LD_INT 0
70493: PPUSH
70494: PPUSH
70495: PPUSH
70496: PPUSH
70497: PPUSH
// if not hexes then
70498: LD_VAR 0 2
70502: NOT
70503: IFFALSE 70507
// exit ;
70505: GO 70655
// dist := 9999 ;
70507: LD_ADDR_VAR 0 5
70511: PUSH
70512: LD_INT 9999
70514: ST_TO_ADDR
// for i = 1 to hexes do
70515: LD_ADDR_VAR 0 4
70519: PUSH
70520: DOUBLE
70521: LD_INT 1
70523: DEC
70524: ST_TO_ADDR
70525: LD_VAR 0 2
70529: PUSH
70530: FOR_TO
70531: IFFALSE 70643
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70533: LD_VAR 0 1
70537: PPUSH
70538: LD_VAR 0 2
70542: PUSH
70543: LD_VAR 0 4
70547: ARRAY
70548: PUSH
70549: LD_INT 1
70551: ARRAY
70552: PPUSH
70553: LD_VAR 0 2
70557: PUSH
70558: LD_VAR 0 4
70562: ARRAY
70563: PUSH
70564: LD_INT 2
70566: ARRAY
70567: PPUSH
70568: CALL_OW 297
70572: PUSH
70573: LD_VAR 0 5
70577: LESS
70578: IFFALSE 70641
// begin hex := hexes [ i ] ;
70580: LD_ADDR_VAR 0 7
70584: PUSH
70585: LD_VAR 0 2
70589: PUSH
70590: LD_VAR 0 4
70594: ARRAY
70595: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70596: LD_ADDR_VAR 0 5
70600: PUSH
70601: LD_VAR 0 1
70605: PPUSH
70606: LD_VAR 0 2
70610: PUSH
70611: LD_VAR 0 4
70615: ARRAY
70616: PUSH
70617: LD_INT 1
70619: ARRAY
70620: PPUSH
70621: LD_VAR 0 2
70625: PUSH
70626: LD_VAR 0 4
70630: ARRAY
70631: PUSH
70632: LD_INT 2
70634: ARRAY
70635: PPUSH
70636: CALL_OW 297
70640: ST_TO_ADDR
// end ; end ;
70641: GO 70530
70643: POP
70644: POP
// result := hex ;
70645: LD_ADDR_VAR 0 3
70649: PUSH
70650: LD_VAR 0 7
70654: ST_TO_ADDR
// end ;
70655: LD_VAR 0 3
70659: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70660: LD_INT 0
70662: PPUSH
70663: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70664: LD_VAR 0 1
70668: NOT
70669: PUSH
70670: LD_VAR 0 1
70674: PUSH
70675: LD_INT 21
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 23
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PPUSH
70699: CALL_OW 69
70703: IN
70704: NOT
70705: OR
70706: IFFALSE 70710
// exit ;
70708: GO 70757
// for i = 1 to 3 do
70710: LD_ADDR_VAR 0 3
70714: PUSH
70715: DOUBLE
70716: LD_INT 1
70718: DEC
70719: ST_TO_ADDR
70720: LD_INT 3
70722: PUSH
70723: FOR_TO
70724: IFFALSE 70755
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70726: LD_VAR 0 1
70730: PPUSH
70731: CALL_OW 250
70735: PPUSH
70736: LD_VAR 0 1
70740: PPUSH
70741: CALL_OW 251
70745: PPUSH
70746: LD_INT 1
70748: PPUSH
70749: CALL_OW 453
70753: GO 70723
70755: POP
70756: POP
// end ;
70757: LD_VAR 0 2
70761: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70762: LD_INT 0
70764: PPUSH
70765: PPUSH
70766: PPUSH
70767: PPUSH
70768: PPUSH
70769: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70770: LD_VAR 0 1
70774: NOT
70775: PUSH
70776: LD_VAR 0 2
70780: NOT
70781: OR
70782: PUSH
70783: LD_VAR 0 1
70787: PPUSH
70788: CALL_OW 314
70792: OR
70793: IFFALSE 70797
// exit ;
70795: GO 71238
// x := GetX ( enemy_unit ) ;
70797: LD_ADDR_VAR 0 7
70801: PUSH
70802: LD_VAR 0 2
70806: PPUSH
70807: CALL_OW 250
70811: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70812: LD_ADDR_VAR 0 8
70816: PUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: CALL_OW 251
70826: ST_TO_ADDR
// if not x or not y then
70827: LD_VAR 0 7
70831: NOT
70832: PUSH
70833: LD_VAR 0 8
70837: NOT
70838: OR
70839: IFFALSE 70843
// exit ;
70841: GO 71238
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70843: LD_ADDR_VAR 0 6
70847: PUSH
70848: LD_VAR 0 7
70852: PPUSH
70853: LD_INT 0
70855: PPUSH
70856: LD_INT 4
70858: PPUSH
70859: CALL_OW 272
70863: PUSH
70864: LD_VAR 0 8
70868: PPUSH
70869: LD_INT 0
70871: PPUSH
70872: LD_INT 4
70874: PPUSH
70875: CALL_OW 273
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PUSH
70884: LD_VAR 0 7
70888: PPUSH
70889: LD_INT 1
70891: PPUSH
70892: LD_INT 4
70894: PPUSH
70895: CALL_OW 272
70899: PUSH
70900: LD_VAR 0 8
70904: PPUSH
70905: LD_INT 1
70907: PPUSH
70908: LD_INT 4
70910: PPUSH
70911: CALL_OW 273
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_VAR 0 7
70924: PPUSH
70925: LD_INT 2
70927: PPUSH
70928: LD_INT 4
70930: PPUSH
70931: CALL_OW 272
70935: PUSH
70936: LD_VAR 0 8
70940: PPUSH
70941: LD_INT 2
70943: PPUSH
70944: LD_INT 4
70946: PPUSH
70947: CALL_OW 273
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: PUSH
70956: LD_VAR 0 7
70960: PPUSH
70961: LD_INT 3
70963: PPUSH
70964: LD_INT 4
70966: PPUSH
70967: CALL_OW 272
70971: PUSH
70972: LD_VAR 0 8
70976: PPUSH
70977: LD_INT 3
70979: PPUSH
70980: LD_INT 4
70982: PPUSH
70983: CALL_OW 273
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_VAR 0 7
70996: PPUSH
70997: LD_INT 4
70999: PPUSH
71000: LD_INT 4
71002: PPUSH
71003: CALL_OW 272
71007: PUSH
71008: LD_VAR 0 8
71012: PPUSH
71013: LD_INT 4
71015: PPUSH
71016: LD_INT 4
71018: PPUSH
71019: CALL_OW 273
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_VAR 0 7
71032: PPUSH
71033: LD_INT 5
71035: PPUSH
71036: LD_INT 4
71038: PPUSH
71039: CALL_OW 272
71043: PUSH
71044: LD_VAR 0 8
71048: PPUSH
71049: LD_INT 5
71051: PPUSH
71052: LD_INT 4
71054: PPUSH
71055: CALL_OW 273
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: ST_TO_ADDR
// for i = tmp downto 1 do
71072: LD_ADDR_VAR 0 4
71076: PUSH
71077: DOUBLE
71078: LD_VAR 0 6
71082: INC
71083: ST_TO_ADDR
71084: LD_INT 1
71086: PUSH
71087: FOR_DOWNTO
71088: IFFALSE 71189
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71090: LD_VAR 0 6
71094: PUSH
71095: LD_VAR 0 4
71099: ARRAY
71100: PUSH
71101: LD_INT 1
71103: ARRAY
71104: PPUSH
71105: LD_VAR 0 6
71109: PUSH
71110: LD_VAR 0 4
71114: ARRAY
71115: PUSH
71116: LD_INT 2
71118: ARRAY
71119: PPUSH
71120: CALL_OW 488
71124: NOT
71125: PUSH
71126: LD_VAR 0 6
71130: PUSH
71131: LD_VAR 0 4
71135: ARRAY
71136: PUSH
71137: LD_INT 1
71139: ARRAY
71140: PPUSH
71141: LD_VAR 0 6
71145: PUSH
71146: LD_VAR 0 4
71150: ARRAY
71151: PUSH
71152: LD_INT 2
71154: ARRAY
71155: PPUSH
71156: CALL_OW 428
71160: PUSH
71161: LD_INT 0
71163: NONEQUAL
71164: OR
71165: IFFALSE 71187
// tmp := Delete ( tmp , i ) ;
71167: LD_ADDR_VAR 0 6
71171: PUSH
71172: LD_VAR 0 6
71176: PPUSH
71177: LD_VAR 0 4
71181: PPUSH
71182: CALL_OW 3
71186: ST_TO_ADDR
71187: GO 71087
71189: POP
71190: POP
// j := GetClosestHex ( unit , tmp ) ;
71191: LD_ADDR_VAR 0 5
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: LD_VAR 0 6
71205: PPUSH
71206: CALL 70491 0 2
71210: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71211: LD_VAR 0 1
71215: PPUSH
71216: LD_VAR 0 5
71220: PUSH
71221: LD_INT 1
71223: ARRAY
71224: PPUSH
71225: LD_VAR 0 5
71229: PUSH
71230: LD_INT 2
71232: ARRAY
71233: PPUSH
71234: CALL_OW 111
// end ;
71238: LD_VAR 0 3
71242: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71243: LD_INT 0
71245: PPUSH
71246: PPUSH
71247: PPUSH
// uc_side = 0 ;
71248: LD_ADDR_OWVAR 20
71252: PUSH
71253: LD_INT 0
71255: ST_TO_ADDR
// uc_nation = 0 ;
71256: LD_ADDR_OWVAR 21
71260: PUSH
71261: LD_INT 0
71263: ST_TO_ADDR
// InitHc ;
71264: CALL_OW 19
// InitVc ;
71268: CALL_OW 20
// if mastodonts then
71272: LD_VAR 0 6
71276: IFFALSE 71343
// for i = 1 to mastodonts do
71278: LD_ADDR_VAR 0 11
71282: PUSH
71283: DOUBLE
71284: LD_INT 1
71286: DEC
71287: ST_TO_ADDR
71288: LD_VAR 0 6
71292: PUSH
71293: FOR_TO
71294: IFFALSE 71341
// begin vc_chassis := 31 ;
71296: LD_ADDR_OWVAR 37
71300: PUSH
71301: LD_INT 31
71303: ST_TO_ADDR
// vc_control := control_rider ;
71304: LD_ADDR_OWVAR 38
71308: PUSH
71309: LD_INT 4
71311: ST_TO_ADDR
// animal := CreateVehicle ;
71312: LD_ADDR_VAR 0 12
71316: PUSH
71317: CALL_OW 45
71321: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71322: LD_VAR 0 12
71326: PPUSH
71327: LD_VAR 0 8
71331: PPUSH
71332: LD_INT 0
71334: PPUSH
71335: CALL_OW 49
// end ;
71339: GO 71293
71341: POP
71342: POP
// if horses then
71343: LD_VAR 0 5
71347: IFFALSE 71414
// for i = 1 to horses do
71349: LD_ADDR_VAR 0 11
71353: PUSH
71354: DOUBLE
71355: LD_INT 1
71357: DEC
71358: ST_TO_ADDR
71359: LD_VAR 0 5
71363: PUSH
71364: FOR_TO
71365: IFFALSE 71412
// begin hc_class := 21 ;
71367: LD_ADDR_OWVAR 28
71371: PUSH
71372: LD_INT 21
71374: ST_TO_ADDR
// hc_gallery :=  ;
71375: LD_ADDR_OWVAR 33
71379: PUSH
71380: LD_STRING 
71382: ST_TO_ADDR
// animal := CreateHuman ;
71383: LD_ADDR_VAR 0 12
71387: PUSH
71388: CALL_OW 44
71392: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71393: LD_VAR 0 12
71397: PPUSH
71398: LD_VAR 0 8
71402: PPUSH
71403: LD_INT 0
71405: PPUSH
71406: CALL_OW 49
// end ;
71410: GO 71364
71412: POP
71413: POP
// if birds then
71414: LD_VAR 0 1
71418: IFFALSE 71485
// for i = 1 to birds do
71420: LD_ADDR_VAR 0 11
71424: PUSH
71425: DOUBLE
71426: LD_INT 1
71428: DEC
71429: ST_TO_ADDR
71430: LD_VAR 0 1
71434: PUSH
71435: FOR_TO
71436: IFFALSE 71483
// begin hc_class = 18 ;
71438: LD_ADDR_OWVAR 28
71442: PUSH
71443: LD_INT 18
71445: ST_TO_ADDR
// hc_gallery =  ;
71446: LD_ADDR_OWVAR 33
71450: PUSH
71451: LD_STRING 
71453: ST_TO_ADDR
// animal := CreateHuman ;
71454: LD_ADDR_VAR 0 12
71458: PUSH
71459: CALL_OW 44
71463: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71464: LD_VAR 0 12
71468: PPUSH
71469: LD_VAR 0 8
71473: PPUSH
71474: LD_INT 0
71476: PPUSH
71477: CALL_OW 49
// end ;
71481: GO 71435
71483: POP
71484: POP
// if tigers then
71485: LD_VAR 0 2
71489: IFFALSE 71573
// for i = 1 to tigers do
71491: LD_ADDR_VAR 0 11
71495: PUSH
71496: DOUBLE
71497: LD_INT 1
71499: DEC
71500: ST_TO_ADDR
71501: LD_VAR 0 2
71505: PUSH
71506: FOR_TO
71507: IFFALSE 71571
// begin hc_class = class_tiger ;
71509: LD_ADDR_OWVAR 28
71513: PUSH
71514: LD_INT 14
71516: ST_TO_ADDR
// hc_gallery =  ;
71517: LD_ADDR_OWVAR 33
71521: PUSH
71522: LD_STRING 
71524: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71525: LD_ADDR_OWVAR 35
71529: PUSH
71530: LD_INT 7
71532: NEG
71533: PPUSH
71534: LD_INT 7
71536: PPUSH
71537: CALL_OW 12
71541: ST_TO_ADDR
// animal := CreateHuman ;
71542: LD_ADDR_VAR 0 12
71546: PUSH
71547: CALL_OW 44
71551: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71552: LD_VAR 0 12
71556: PPUSH
71557: LD_VAR 0 8
71561: PPUSH
71562: LD_INT 0
71564: PPUSH
71565: CALL_OW 49
// end ;
71569: GO 71506
71571: POP
71572: POP
// if apemans then
71573: LD_VAR 0 3
71577: IFFALSE 71700
// for i = 1 to apemans do
71579: LD_ADDR_VAR 0 11
71583: PUSH
71584: DOUBLE
71585: LD_INT 1
71587: DEC
71588: ST_TO_ADDR
71589: LD_VAR 0 3
71593: PUSH
71594: FOR_TO
71595: IFFALSE 71698
// begin hc_class = class_apeman ;
71597: LD_ADDR_OWVAR 28
71601: PUSH
71602: LD_INT 12
71604: ST_TO_ADDR
// hc_gallery =  ;
71605: LD_ADDR_OWVAR 33
71609: PUSH
71610: LD_STRING 
71612: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
71613: LD_ADDR_OWVAR 35
71617: PUSH
71618: LD_INT 5
71620: NEG
71621: PPUSH
71622: LD_INT 5
71624: PPUSH
71625: CALL_OW 12
71629: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71630: LD_ADDR_OWVAR 31
71634: PUSH
71635: LD_INT 1
71637: PPUSH
71638: LD_INT 3
71640: PPUSH
71641: CALL_OW 12
71645: PUSH
71646: LD_INT 1
71648: PPUSH
71649: LD_INT 3
71651: PPUSH
71652: CALL_OW 12
71656: PUSH
71657: LD_INT 0
71659: PUSH
71660: LD_INT 0
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: ST_TO_ADDR
// animal := CreateHuman ;
71669: LD_ADDR_VAR 0 12
71673: PUSH
71674: CALL_OW 44
71678: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71679: LD_VAR 0 12
71683: PPUSH
71684: LD_VAR 0 8
71688: PPUSH
71689: LD_INT 0
71691: PPUSH
71692: CALL_OW 49
// end ;
71696: GO 71594
71698: POP
71699: POP
// if enchidnas then
71700: LD_VAR 0 4
71704: IFFALSE 71771
// for i = 1 to enchidnas do
71706: LD_ADDR_VAR 0 11
71710: PUSH
71711: DOUBLE
71712: LD_INT 1
71714: DEC
71715: ST_TO_ADDR
71716: LD_VAR 0 4
71720: PUSH
71721: FOR_TO
71722: IFFALSE 71769
// begin hc_class = 13 ;
71724: LD_ADDR_OWVAR 28
71728: PUSH
71729: LD_INT 13
71731: ST_TO_ADDR
// hc_gallery =  ;
71732: LD_ADDR_OWVAR 33
71736: PUSH
71737: LD_STRING 
71739: ST_TO_ADDR
// animal := CreateHuman ;
71740: LD_ADDR_VAR 0 12
71744: PUSH
71745: CALL_OW 44
71749: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71750: LD_VAR 0 12
71754: PPUSH
71755: LD_VAR 0 8
71759: PPUSH
71760: LD_INT 0
71762: PPUSH
71763: CALL_OW 49
// end ;
71767: GO 71721
71769: POP
71770: POP
// if not wat_area then
71771: LD_VAR 0 9
71775: NOT
71776: IFFALSE 71780
// exit ;
71778: GO 71851
// if fishes then
71780: LD_VAR 0 7
71784: IFFALSE 71851
// for i = 1 to fishes do
71786: LD_ADDR_VAR 0 11
71790: PUSH
71791: DOUBLE
71792: LD_INT 1
71794: DEC
71795: ST_TO_ADDR
71796: LD_VAR 0 7
71800: PUSH
71801: FOR_TO
71802: IFFALSE 71849
// begin hc_class = 20 ;
71804: LD_ADDR_OWVAR 28
71808: PUSH
71809: LD_INT 20
71811: ST_TO_ADDR
// hc_gallery =  ;
71812: LD_ADDR_OWVAR 33
71816: PUSH
71817: LD_STRING 
71819: ST_TO_ADDR
// animal := CreateHuman ;
71820: LD_ADDR_VAR 0 12
71824: PUSH
71825: CALL_OW 44
71829: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
71830: LD_VAR 0 12
71834: PPUSH
71835: LD_VAR 0 9
71839: PPUSH
71840: LD_INT 0
71842: PPUSH
71843: CALL_OW 49
// end ;
71847: GO 71801
71849: POP
71850: POP
// end ;
71851: LD_VAR 0 10
71855: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
71856: LD_INT 0
71858: PPUSH
71859: PPUSH
71860: PPUSH
71861: PPUSH
71862: PPUSH
71863: PPUSH
71864: PPUSH
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
71870: PPUSH
71871: PPUSH
71872: PPUSH
71873: PPUSH
71874: PPUSH
71875: PPUSH
71876: PPUSH
71877: PPUSH
71878: PPUSH
71879: PPUSH
71880: PPUSH
71881: PPUSH
71882: PPUSH
71883: PPUSH
71884: PPUSH
71885: PPUSH
// if not list then
71886: LD_VAR 0 1
71890: NOT
71891: IFFALSE 71895
// exit ;
71893: GO 75192
// base := list [ 1 ] ;
71895: LD_ADDR_VAR 0 3
71899: PUSH
71900: LD_VAR 0 1
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: ST_TO_ADDR
// group := list [ 2 ] ;
71909: LD_ADDR_VAR 0 4
71913: PUSH
71914: LD_VAR 0 1
71918: PUSH
71919: LD_INT 2
71921: ARRAY
71922: ST_TO_ADDR
// path := list [ 3 ] ;
71923: LD_ADDR_VAR 0 5
71927: PUSH
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 3
71935: ARRAY
71936: ST_TO_ADDR
// flags := list [ 4 ] ;
71937: LD_ADDR_VAR 0 6
71941: PUSH
71942: LD_VAR 0 1
71946: PUSH
71947: LD_INT 4
71949: ARRAY
71950: ST_TO_ADDR
// mined := [ ] ;
71951: LD_ADDR_VAR 0 27
71955: PUSH
71956: EMPTY
71957: ST_TO_ADDR
// bombed := [ ] ;
71958: LD_ADDR_VAR 0 28
71962: PUSH
71963: EMPTY
71964: ST_TO_ADDR
// if not group or not path then
71965: LD_VAR 0 4
71969: NOT
71970: PUSH
71971: LD_VAR 0 5
71975: NOT
71976: OR
71977: IFFALSE 71981
// exit ;
71979: GO 75192
// if flags then
71981: LD_VAR 0 6
71985: IFFALSE 72129
// begin f_ignore_area := flags [ 1 ] ;
71987: LD_ADDR_VAR 0 17
71991: PUSH
71992: LD_VAR 0 6
71996: PUSH
71997: LD_INT 1
71999: ARRAY
72000: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
72001: LD_ADDR_VAR 0 18
72005: PUSH
72006: LD_VAR 0 6
72010: PUSH
72011: LD_INT 2
72013: ARRAY
72014: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
72015: LD_ADDR_VAR 0 19
72019: PUSH
72020: LD_VAR 0 6
72024: PUSH
72025: LD_INT 3
72027: ARRAY
72028: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
72029: LD_ADDR_VAR 0 20
72033: PUSH
72034: LD_VAR 0 6
72038: PUSH
72039: LD_INT 4
72041: ARRAY
72042: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
72043: LD_ADDR_VAR 0 21
72047: PUSH
72048: LD_VAR 0 6
72052: PUSH
72053: LD_INT 5
72055: ARRAY
72056: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
72057: LD_ADDR_VAR 0 22
72061: PUSH
72062: LD_VAR 0 6
72066: PUSH
72067: LD_INT 6
72069: ARRAY
72070: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
72071: LD_ADDR_VAR 0 23
72075: PUSH
72076: LD_VAR 0 6
72080: PUSH
72081: LD_INT 7
72083: ARRAY
72084: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
72085: LD_ADDR_VAR 0 24
72089: PUSH
72090: LD_VAR 0 6
72094: PUSH
72095: LD_INT 8
72097: ARRAY
72098: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
72099: LD_ADDR_VAR 0 25
72103: PUSH
72104: LD_VAR 0 6
72108: PUSH
72109: LD_INT 9
72111: ARRAY
72112: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
72113: LD_ADDR_VAR 0 26
72117: PUSH
72118: LD_VAR 0 6
72122: PUSH
72123: LD_INT 10
72125: ARRAY
72126: ST_TO_ADDR
// end else
72127: GO 72209
// begin f_ignore_area := false ;
72129: LD_ADDR_VAR 0 17
72133: PUSH
72134: LD_INT 0
72136: ST_TO_ADDR
// f_capture := false ;
72137: LD_ADDR_VAR 0 18
72141: PUSH
72142: LD_INT 0
72144: ST_TO_ADDR
// f_ignore_civ := false ;
72145: LD_ADDR_VAR 0 19
72149: PUSH
72150: LD_INT 0
72152: ST_TO_ADDR
// f_murder := false ;
72153: LD_ADDR_VAR 0 20
72157: PUSH
72158: LD_INT 0
72160: ST_TO_ADDR
// f_mines := false ;
72161: LD_ADDR_VAR 0 21
72165: PUSH
72166: LD_INT 0
72168: ST_TO_ADDR
// f_repair := false ;
72169: LD_ADDR_VAR 0 22
72173: PUSH
72174: LD_INT 0
72176: ST_TO_ADDR
// f_heal := false ;
72177: LD_ADDR_VAR 0 23
72181: PUSH
72182: LD_INT 0
72184: ST_TO_ADDR
// f_spacetime := false ;
72185: LD_ADDR_VAR 0 24
72189: PUSH
72190: LD_INT 0
72192: ST_TO_ADDR
// f_attack_depot := false ;
72193: LD_ADDR_VAR 0 25
72197: PUSH
72198: LD_INT 0
72200: ST_TO_ADDR
// f_crawl := false ;
72201: LD_ADDR_VAR 0 26
72205: PUSH
72206: LD_INT 0
72208: ST_TO_ADDR
// end ; units_path := [ ] ;
72209: LD_ADDR_VAR 0 16
72213: PUSH
72214: EMPTY
72215: ST_TO_ADDR
// for i = 1 to group do
72216: LD_ADDR_VAR 0 7
72220: PUSH
72221: DOUBLE
72222: LD_INT 1
72224: DEC
72225: ST_TO_ADDR
72226: LD_VAR 0 4
72230: PUSH
72231: FOR_TO
72232: IFFALSE 72261
// begin units_path := Replace ( units_path , i , path ) ;
72234: LD_ADDR_VAR 0 16
72238: PUSH
72239: LD_VAR 0 16
72243: PPUSH
72244: LD_VAR 0 7
72248: PPUSH
72249: LD_VAR 0 5
72253: PPUSH
72254: CALL_OW 1
72258: ST_TO_ADDR
// end ;
72259: GO 72231
72261: POP
72262: POP
// repeat for i = group downto 1 do
72263: LD_ADDR_VAR 0 7
72267: PUSH
72268: DOUBLE
72269: LD_VAR 0 4
72273: INC
72274: ST_TO_ADDR
72275: LD_INT 1
72277: PUSH
72278: FOR_DOWNTO
72279: IFFALSE 75174
// begin wait ( 0 0$1 ) ;
72281: LD_INT 35
72283: PPUSH
72284: CALL_OW 67
// tmp := [ ] ;
72288: LD_ADDR_VAR 0 14
72292: PUSH
72293: EMPTY
72294: ST_TO_ADDR
// attacking := false ;
72295: LD_ADDR_VAR 0 29
72299: PUSH
72300: LD_INT 0
72302: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
72303: LD_VAR 0 4
72307: PUSH
72308: LD_VAR 0 7
72312: ARRAY
72313: PPUSH
72314: CALL_OW 301
72318: PUSH
72319: LD_VAR 0 4
72323: PUSH
72324: LD_VAR 0 7
72328: ARRAY
72329: NOT
72330: OR
72331: IFFALSE 72375
// begin group := Delete ( group , i ) ;
72333: LD_ADDR_VAR 0 4
72337: PUSH
72338: LD_VAR 0 4
72342: PPUSH
72343: LD_VAR 0 7
72347: PPUSH
72348: CALL_OW 3
72352: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
72353: LD_ADDR_VAR 0 16
72357: PUSH
72358: LD_VAR 0 16
72362: PPUSH
72363: LD_VAR 0 7
72367: PPUSH
72368: CALL_OW 3
72372: ST_TO_ADDR
// continue ;
72373: GO 72278
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
72375: LD_VAR 0 4
72379: PUSH
72380: LD_VAR 0 7
72384: ARRAY
72385: PPUSH
72386: LD_INT 10
72388: PPUSH
72389: CALL 70343 0 2
72393: NOT
72394: PUSH
72395: LD_VAR 0 16
72399: PUSH
72400: LD_VAR 0 7
72404: ARRAY
72405: PUSH
72406: EMPTY
72407: EQUAL
72408: NOT
72409: AND
72410: IFFALSE 72676
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
72412: LD_VAR 0 4
72416: PUSH
72417: LD_VAR 0 7
72421: ARRAY
72422: PPUSH
72423: CALL_OW 262
72427: PUSH
72428: LD_INT 1
72430: PUSH
72431: LD_INT 2
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: IN
72438: IFFALSE 72479
// if GetFuel ( group [ i ] ) < 10 then
72440: LD_VAR 0 4
72444: PUSH
72445: LD_VAR 0 7
72449: ARRAY
72450: PPUSH
72451: CALL_OW 261
72455: PUSH
72456: LD_INT 10
72458: LESS
72459: IFFALSE 72479
// SetFuel ( group [ i ] , 12 ) ;
72461: LD_VAR 0 4
72465: PUSH
72466: LD_VAR 0 7
72470: ARRAY
72471: PPUSH
72472: LD_INT 12
72474: PPUSH
72475: CALL_OW 240
// if units_path [ i ] then
72479: LD_VAR 0 16
72483: PUSH
72484: LD_VAR 0 7
72488: ARRAY
72489: IFFALSE 72674
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
72491: LD_VAR 0 4
72495: PUSH
72496: LD_VAR 0 7
72500: ARRAY
72501: PPUSH
72502: LD_VAR 0 16
72506: PUSH
72507: LD_VAR 0 7
72511: ARRAY
72512: PUSH
72513: LD_INT 1
72515: ARRAY
72516: PUSH
72517: LD_INT 1
72519: ARRAY
72520: PPUSH
72521: LD_VAR 0 16
72525: PUSH
72526: LD_VAR 0 7
72530: ARRAY
72531: PUSH
72532: LD_INT 1
72534: ARRAY
72535: PUSH
72536: LD_INT 2
72538: ARRAY
72539: PPUSH
72540: CALL_OW 297
72544: PUSH
72545: LD_INT 6
72547: GREATER
72548: IFFALSE 72623
// begin if not HasTask ( group [ i ] ) then
72550: LD_VAR 0 4
72554: PUSH
72555: LD_VAR 0 7
72559: ARRAY
72560: PPUSH
72561: CALL_OW 314
72565: NOT
72566: IFFALSE 72621
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
72568: LD_VAR 0 4
72572: PUSH
72573: LD_VAR 0 7
72577: ARRAY
72578: PPUSH
72579: LD_VAR 0 16
72583: PUSH
72584: LD_VAR 0 7
72588: ARRAY
72589: PUSH
72590: LD_INT 1
72592: ARRAY
72593: PUSH
72594: LD_INT 1
72596: ARRAY
72597: PPUSH
72598: LD_VAR 0 16
72602: PUSH
72603: LD_VAR 0 7
72607: ARRAY
72608: PUSH
72609: LD_INT 1
72611: ARRAY
72612: PUSH
72613: LD_INT 2
72615: ARRAY
72616: PPUSH
72617: CALL_OW 114
// end else
72621: GO 72674
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
72623: LD_ADDR_VAR 0 15
72627: PUSH
72628: LD_VAR 0 16
72632: PUSH
72633: LD_VAR 0 7
72637: ARRAY
72638: PPUSH
72639: LD_INT 1
72641: PPUSH
72642: CALL_OW 3
72646: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
72647: LD_ADDR_VAR 0 16
72651: PUSH
72652: LD_VAR 0 16
72656: PPUSH
72657: LD_VAR 0 7
72661: PPUSH
72662: LD_VAR 0 15
72666: PPUSH
72667: CALL_OW 1
72671: ST_TO_ADDR
// continue ;
72672: GO 72278
// end ; end ; end else
72674: GO 75172
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
72676: LD_ADDR_VAR 0 14
72680: PUSH
72681: LD_INT 81
72683: PUSH
72684: LD_VAR 0 4
72688: PUSH
72689: LD_VAR 0 7
72693: ARRAY
72694: PPUSH
72695: CALL_OW 255
72699: PUSH
72700: EMPTY
72701: LIST
72702: LIST
72703: PPUSH
72704: CALL_OW 69
72708: ST_TO_ADDR
// if not tmp then
72709: LD_VAR 0 14
72713: NOT
72714: IFFALSE 72718
// continue ;
72716: GO 72278
// if f_ignore_area then
72718: LD_VAR 0 17
72722: IFFALSE 72810
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
72724: LD_ADDR_VAR 0 15
72728: PUSH
72729: LD_VAR 0 14
72733: PPUSH
72734: LD_INT 3
72736: PUSH
72737: LD_INT 92
72739: PUSH
72740: LD_VAR 0 17
72744: PUSH
72745: LD_INT 1
72747: ARRAY
72748: PUSH
72749: LD_VAR 0 17
72753: PUSH
72754: LD_INT 2
72756: ARRAY
72757: PUSH
72758: LD_VAR 0 17
72762: PUSH
72763: LD_INT 3
72765: ARRAY
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PPUSH
72777: CALL_OW 72
72781: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72782: LD_VAR 0 14
72786: PUSH
72787: LD_VAR 0 15
72791: DIFF
72792: IFFALSE 72810
// tmp := tmp diff tmp2 ;
72794: LD_ADDR_VAR 0 14
72798: PUSH
72799: LD_VAR 0 14
72803: PUSH
72804: LD_VAR 0 15
72808: DIFF
72809: ST_TO_ADDR
// end ; if not f_murder then
72810: LD_VAR 0 20
72814: NOT
72815: IFFALSE 72873
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
72817: LD_ADDR_VAR 0 15
72821: PUSH
72822: LD_VAR 0 14
72826: PPUSH
72827: LD_INT 3
72829: PUSH
72830: LD_INT 50
72832: PUSH
72833: EMPTY
72834: LIST
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PPUSH
72840: CALL_OW 72
72844: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72845: LD_VAR 0 14
72849: PUSH
72850: LD_VAR 0 15
72854: DIFF
72855: IFFALSE 72873
// tmp := tmp diff tmp2 ;
72857: LD_ADDR_VAR 0 14
72861: PUSH
72862: LD_VAR 0 14
72866: PUSH
72867: LD_VAR 0 15
72871: DIFF
72872: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
72873: LD_ADDR_VAR 0 14
72877: PUSH
72878: LD_VAR 0 4
72882: PUSH
72883: LD_VAR 0 7
72887: ARRAY
72888: PPUSH
72889: LD_VAR 0 14
72893: PPUSH
72894: LD_INT 1
72896: PPUSH
72897: LD_INT 1
72899: PPUSH
72900: CALL 44375 0 4
72904: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
72905: LD_VAR 0 4
72909: PUSH
72910: LD_VAR 0 7
72914: ARRAY
72915: PPUSH
72916: CALL_OW 257
72920: PUSH
72921: LD_INT 1
72923: EQUAL
72924: IFFALSE 73372
// begin if WantPlant ( group [ i ] ) then
72926: LD_VAR 0 4
72930: PUSH
72931: LD_VAR 0 7
72935: ARRAY
72936: PPUSH
72937: CALL 43843 0 1
72941: IFFALSE 72945
// continue ;
72943: GO 72278
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
72945: LD_VAR 0 18
72949: PUSH
72950: LD_VAR 0 4
72954: PUSH
72955: LD_VAR 0 7
72959: ARRAY
72960: PPUSH
72961: CALL_OW 310
72965: NOT
72966: AND
72967: PUSH
72968: LD_VAR 0 14
72972: PUSH
72973: LD_INT 1
72975: ARRAY
72976: PUSH
72977: LD_VAR 0 14
72981: PPUSH
72982: LD_INT 21
72984: PUSH
72985: LD_INT 2
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 58
72994: PUSH
72995: EMPTY
72996: LIST
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PPUSH
73002: CALL_OW 72
73006: IN
73007: AND
73008: IFFALSE 73044
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
73010: LD_VAR 0 4
73014: PUSH
73015: LD_VAR 0 7
73019: ARRAY
73020: PPUSH
73021: LD_VAR 0 14
73025: PUSH
73026: LD_INT 1
73028: ARRAY
73029: PPUSH
73030: CALL_OW 120
// attacking := true ;
73034: LD_ADDR_VAR 0 29
73038: PUSH
73039: LD_INT 1
73041: ST_TO_ADDR
// continue ;
73042: GO 72278
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
73044: LD_VAR 0 26
73048: PUSH
73049: LD_VAR 0 4
73053: PUSH
73054: LD_VAR 0 7
73058: ARRAY
73059: PPUSH
73060: CALL_OW 257
73064: PUSH
73065: LD_INT 1
73067: EQUAL
73068: AND
73069: PUSH
73070: LD_VAR 0 4
73074: PUSH
73075: LD_VAR 0 7
73079: ARRAY
73080: PPUSH
73081: CALL_OW 256
73085: PUSH
73086: LD_INT 800
73088: LESS
73089: AND
73090: PUSH
73091: LD_VAR 0 4
73095: PUSH
73096: LD_VAR 0 7
73100: ARRAY
73101: PPUSH
73102: CALL_OW 318
73106: NOT
73107: AND
73108: IFFALSE 73125
// ComCrawl ( group [ i ] ) ;
73110: LD_VAR 0 4
73114: PUSH
73115: LD_VAR 0 7
73119: ARRAY
73120: PPUSH
73121: CALL_OW 137
// if f_mines then
73125: LD_VAR 0 21
73129: IFFALSE 73372
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
73131: LD_VAR 0 14
73135: PUSH
73136: LD_INT 1
73138: ARRAY
73139: PPUSH
73140: CALL_OW 247
73144: PUSH
73145: LD_INT 3
73147: EQUAL
73148: PUSH
73149: LD_VAR 0 14
73153: PUSH
73154: LD_INT 1
73156: ARRAY
73157: PUSH
73158: LD_VAR 0 27
73162: IN
73163: NOT
73164: AND
73165: IFFALSE 73372
// begin x := GetX ( tmp [ 1 ] ) ;
73167: LD_ADDR_VAR 0 10
73171: PUSH
73172: LD_VAR 0 14
73176: PUSH
73177: LD_INT 1
73179: ARRAY
73180: PPUSH
73181: CALL_OW 250
73185: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
73186: LD_ADDR_VAR 0 11
73190: PUSH
73191: LD_VAR 0 14
73195: PUSH
73196: LD_INT 1
73198: ARRAY
73199: PPUSH
73200: CALL_OW 251
73204: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
73205: LD_ADDR_VAR 0 12
73209: PUSH
73210: LD_VAR 0 4
73214: PUSH
73215: LD_VAR 0 7
73219: ARRAY
73220: PPUSH
73221: CALL 70428 0 1
73225: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
73226: LD_VAR 0 4
73230: PUSH
73231: LD_VAR 0 7
73235: ARRAY
73236: PPUSH
73237: LD_VAR 0 10
73241: PPUSH
73242: LD_VAR 0 11
73246: PPUSH
73247: LD_VAR 0 14
73251: PUSH
73252: LD_INT 1
73254: ARRAY
73255: PPUSH
73256: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
73260: LD_VAR 0 4
73264: PUSH
73265: LD_VAR 0 7
73269: ARRAY
73270: PPUSH
73271: LD_VAR 0 10
73275: PPUSH
73276: LD_VAR 0 12
73280: PPUSH
73281: LD_INT 7
73283: PPUSH
73284: CALL_OW 272
73288: PPUSH
73289: LD_VAR 0 11
73293: PPUSH
73294: LD_VAR 0 12
73298: PPUSH
73299: LD_INT 7
73301: PPUSH
73302: CALL_OW 273
73306: PPUSH
73307: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
73311: LD_VAR 0 4
73315: PUSH
73316: LD_VAR 0 7
73320: ARRAY
73321: PPUSH
73322: LD_INT 71
73324: PPUSH
73325: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
73329: LD_ADDR_VAR 0 27
73333: PUSH
73334: LD_VAR 0 27
73338: PPUSH
73339: LD_VAR 0 27
73343: PUSH
73344: LD_INT 1
73346: PLUS
73347: PPUSH
73348: LD_VAR 0 14
73352: PUSH
73353: LD_INT 1
73355: ARRAY
73356: PPUSH
73357: CALL_OW 1
73361: ST_TO_ADDR
// attacking := true ;
73362: LD_ADDR_VAR 0 29
73366: PUSH
73367: LD_INT 1
73369: ST_TO_ADDR
// continue ;
73370: GO 72278
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
73372: LD_VAR 0 4
73376: PUSH
73377: LD_VAR 0 7
73381: ARRAY
73382: PPUSH
73383: CALL_OW 257
73387: PUSH
73388: LD_INT 17
73390: EQUAL
73391: PUSH
73392: LD_VAR 0 4
73396: PUSH
73397: LD_VAR 0 7
73401: ARRAY
73402: PPUSH
73403: CALL_OW 110
73407: PUSH
73408: LD_INT 71
73410: EQUAL
73411: NOT
73412: AND
73413: IFFALSE 73559
// begin attacking := false ;
73415: LD_ADDR_VAR 0 29
73419: PUSH
73420: LD_INT 0
73422: ST_TO_ADDR
// k := 5 ;
73423: LD_ADDR_VAR 0 9
73427: PUSH
73428: LD_INT 5
73430: ST_TO_ADDR
// if tmp < k then
73431: LD_VAR 0 14
73435: PUSH
73436: LD_VAR 0 9
73440: LESS
73441: IFFALSE 73453
// k := tmp ;
73443: LD_ADDR_VAR 0 9
73447: PUSH
73448: LD_VAR 0 14
73452: ST_TO_ADDR
// for j = 1 to k do
73453: LD_ADDR_VAR 0 8
73457: PUSH
73458: DOUBLE
73459: LD_INT 1
73461: DEC
73462: ST_TO_ADDR
73463: LD_VAR 0 9
73467: PUSH
73468: FOR_TO
73469: IFFALSE 73557
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
73471: LD_VAR 0 14
73475: PUSH
73476: LD_VAR 0 8
73480: ARRAY
73481: PUSH
73482: LD_VAR 0 14
73486: PPUSH
73487: LD_INT 58
73489: PUSH
73490: EMPTY
73491: LIST
73492: PPUSH
73493: CALL_OW 72
73497: IN
73498: NOT
73499: IFFALSE 73555
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73501: LD_VAR 0 4
73505: PUSH
73506: LD_VAR 0 7
73510: ARRAY
73511: PPUSH
73512: LD_VAR 0 14
73516: PUSH
73517: LD_VAR 0 8
73521: ARRAY
73522: PPUSH
73523: CALL_OW 115
// attacking := true ;
73527: LD_ADDR_VAR 0 29
73531: PUSH
73532: LD_INT 1
73534: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
73535: LD_VAR 0 4
73539: PUSH
73540: LD_VAR 0 7
73544: ARRAY
73545: PPUSH
73546: LD_INT 71
73548: PPUSH
73549: CALL_OW 109
// continue ;
73553: GO 73468
// end ; end ;
73555: GO 73468
73557: POP
73558: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
73559: LD_VAR 0 4
73563: PUSH
73564: LD_VAR 0 7
73568: ARRAY
73569: PPUSH
73570: CALL_OW 257
73574: PUSH
73575: LD_INT 8
73577: EQUAL
73578: PUSH
73579: LD_VAR 0 4
73583: PUSH
73584: LD_VAR 0 7
73588: ARRAY
73589: PPUSH
73590: CALL_OW 264
73594: PUSH
73595: LD_INT 28
73597: PUSH
73598: LD_INT 45
73600: PUSH
73601: LD_INT 7
73603: PUSH
73604: LD_INT 47
73606: PUSH
73607: EMPTY
73608: LIST
73609: LIST
73610: LIST
73611: LIST
73612: IN
73613: OR
73614: IFFALSE 73844
// begin attacking := false ;
73616: LD_ADDR_VAR 0 29
73620: PUSH
73621: LD_INT 0
73623: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
73624: LD_VAR 0 14
73628: PUSH
73629: LD_INT 1
73631: ARRAY
73632: PPUSH
73633: CALL_OW 266
73637: PUSH
73638: LD_INT 32
73640: PUSH
73641: LD_INT 31
73643: PUSH
73644: LD_INT 33
73646: PUSH
73647: LD_INT 4
73649: PUSH
73650: LD_INT 5
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: IN
73660: IFFALSE 73844
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
73662: LD_ADDR_VAR 0 9
73666: PUSH
73667: LD_VAR 0 14
73671: PUSH
73672: LD_INT 1
73674: ARRAY
73675: PPUSH
73676: CALL_OW 266
73680: PPUSH
73681: LD_VAR 0 14
73685: PUSH
73686: LD_INT 1
73688: ARRAY
73689: PPUSH
73690: CALL_OW 250
73694: PPUSH
73695: LD_VAR 0 14
73699: PUSH
73700: LD_INT 1
73702: ARRAY
73703: PPUSH
73704: CALL_OW 251
73708: PPUSH
73709: LD_VAR 0 14
73713: PUSH
73714: LD_INT 1
73716: ARRAY
73717: PPUSH
73718: CALL_OW 254
73722: PPUSH
73723: LD_VAR 0 14
73727: PUSH
73728: LD_INT 1
73730: ARRAY
73731: PPUSH
73732: CALL_OW 248
73736: PPUSH
73737: LD_INT 0
73739: PPUSH
73740: CALL 51804 0 6
73744: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
73745: LD_ADDR_VAR 0 8
73749: PUSH
73750: LD_VAR 0 4
73754: PUSH
73755: LD_VAR 0 7
73759: ARRAY
73760: PPUSH
73761: LD_VAR 0 9
73765: PPUSH
73766: CALL 70491 0 2
73770: ST_TO_ADDR
// if j then
73771: LD_VAR 0 8
73775: IFFALSE 73844
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
73777: LD_VAR 0 8
73781: PUSH
73782: LD_INT 1
73784: ARRAY
73785: PPUSH
73786: LD_VAR 0 8
73790: PUSH
73791: LD_INT 2
73793: ARRAY
73794: PPUSH
73795: CALL_OW 488
73799: IFFALSE 73844
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
73801: LD_VAR 0 4
73805: PUSH
73806: LD_VAR 0 7
73810: ARRAY
73811: PPUSH
73812: LD_VAR 0 8
73816: PUSH
73817: LD_INT 1
73819: ARRAY
73820: PPUSH
73821: LD_VAR 0 8
73825: PUSH
73826: LD_INT 2
73828: ARRAY
73829: PPUSH
73830: CALL_OW 116
// attacking := true ;
73834: LD_ADDR_VAR 0 29
73838: PUSH
73839: LD_INT 1
73841: ST_TO_ADDR
// continue ;
73842: GO 72278
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
73844: LD_VAR 0 4
73848: PUSH
73849: LD_VAR 0 7
73853: ARRAY
73854: PPUSH
73855: CALL_OW 265
73859: PUSH
73860: LD_INT 11
73862: EQUAL
73863: IFFALSE 74141
// begin k := 10 ;
73865: LD_ADDR_VAR 0 9
73869: PUSH
73870: LD_INT 10
73872: ST_TO_ADDR
// x := 0 ;
73873: LD_ADDR_VAR 0 10
73877: PUSH
73878: LD_INT 0
73880: ST_TO_ADDR
// if tmp < k then
73881: LD_VAR 0 14
73885: PUSH
73886: LD_VAR 0 9
73890: LESS
73891: IFFALSE 73903
// k := tmp ;
73893: LD_ADDR_VAR 0 9
73897: PUSH
73898: LD_VAR 0 14
73902: ST_TO_ADDR
// for j = k downto 1 do
73903: LD_ADDR_VAR 0 8
73907: PUSH
73908: DOUBLE
73909: LD_VAR 0 9
73913: INC
73914: ST_TO_ADDR
73915: LD_INT 1
73917: PUSH
73918: FOR_DOWNTO
73919: IFFALSE 73994
// begin if GetType ( tmp [ j ] ) = unit_human then
73921: LD_VAR 0 14
73925: PUSH
73926: LD_VAR 0 8
73930: ARRAY
73931: PPUSH
73932: CALL_OW 247
73936: PUSH
73937: LD_INT 1
73939: EQUAL
73940: IFFALSE 73992
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
73942: LD_VAR 0 4
73946: PUSH
73947: LD_VAR 0 7
73951: ARRAY
73952: PPUSH
73953: LD_VAR 0 14
73957: PUSH
73958: LD_VAR 0 8
73962: ARRAY
73963: PPUSH
73964: CALL 70762 0 2
// x := tmp [ j ] ;
73968: LD_ADDR_VAR 0 10
73972: PUSH
73973: LD_VAR 0 14
73977: PUSH
73978: LD_VAR 0 8
73982: ARRAY
73983: ST_TO_ADDR
// attacking := true ;
73984: LD_ADDR_VAR 0 29
73988: PUSH
73989: LD_INT 1
73991: ST_TO_ADDR
// end ; end ;
73992: GO 73918
73994: POP
73995: POP
// if not x then
73996: LD_VAR 0 10
74000: NOT
74001: IFFALSE 74141
// begin attacking := true ;
74003: LD_ADDR_VAR 0 29
74007: PUSH
74008: LD_INT 1
74010: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
74011: LD_VAR 0 4
74015: PUSH
74016: LD_VAR 0 7
74020: ARRAY
74021: PPUSH
74022: CALL_OW 250
74026: PPUSH
74027: LD_VAR 0 4
74031: PUSH
74032: LD_VAR 0 7
74036: ARRAY
74037: PPUSH
74038: CALL_OW 251
74042: PPUSH
74043: CALL_OW 546
74047: PUSH
74048: LD_INT 2
74050: ARRAY
74051: PUSH
74052: LD_VAR 0 14
74056: PUSH
74057: LD_INT 1
74059: ARRAY
74060: PPUSH
74061: CALL_OW 250
74065: PPUSH
74066: LD_VAR 0 14
74070: PUSH
74071: LD_INT 1
74073: ARRAY
74074: PPUSH
74075: CALL_OW 251
74079: PPUSH
74080: CALL_OW 546
74084: PUSH
74085: LD_INT 2
74087: ARRAY
74088: EQUAL
74089: IFFALSE 74117
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
74091: LD_VAR 0 4
74095: PUSH
74096: LD_VAR 0 7
74100: ARRAY
74101: PPUSH
74102: LD_VAR 0 14
74106: PUSH
74107: LD_INT 1
74109: ARRAY
74110: PPUSH
74111: CALL 70762 0 2
74115: GO 74141
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74117: LD_VAR 0 4
74121: PUSH
74122: LD_VAR 0 7
74126: ARRAY
74127: PPUSH
74128: LD_VAR 0 14
74132: PUSH
74133: LD_INT 1
74135: ARRAY
74136: PPUSH
74137: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
74141: LD_VAR 0 4
74145: PUSH
74146: LD_VAR 0 7
74150: ARRAY
74151: PPUSH
74152: CALL_OW 264
74156: PUSH
74157: LD_INT 29
74159: EQUAL
74160: IFFALSE 74526
// begin if WantsToAttack ( group [ i ] ) in bombed then
74162: LD_VAR 0 4
74166: PUSH
74167: LD_VAR 0 7
74171: ARRAY
74172: PPUSH
74173: CALL_OW 319
74177: PUSH
74178: LD_VAR 0 28
74182: IN
74183: IFFALSE 74187
// continue ;
74185: GO 72278
// k := 8 ;
74187: LD_ADDR_VAR 0 9
74191: PUSH
74192: LD_INT 8
74194: ST_TO_ADDR
// x := 0 ;
74195: LD_ADDR_VAR 0 10
74199: PUSH
74200: LD_INT 0
74202: ST_TO_ADDR
// if tmp < k then
74203: LD_VAR 0 14
74207: PUSH
74208: LD_VAR 0 9
74212: LESS
74213: IFFALSE 74225
// k := tmp ;
74215: LD_ADDR_VAR 0 9
74219: PUSH
74220: LD_VAR 0 14
74224: ST_TO_ADDR
// for j = 1 to k do
74225: LD_ADDR_VAR 0 8
74229: PUSH
74230: DOUBLE
74231: LD_INT 1
74233: DEC
74234: ST_TO_ADDR
74235: LD_VAR 0 9
74239: PUSH
74240: FOR_TO
74241: IFFALSE 74373
// begin if GetType ( tmp [ j ] ) = unit_building then
74243: LD_VAR 0 14
74247: PUSH
74248: LD_VAR 0 8
74252: ARRAY
74253: PPUSH
74254: CALL_OW 247
74258: PUSH
74259: LD_INT 3
74261: EQUAL
74262: IFFALSE 74371
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
74264: LD_VAR 0 14
74268: PUSH
74269: LD_VAR 0 8
74273: ARRAY
74274: PUSH
74275: LD_VAR 0 28
74279: IN
74280: NOT
74281: PUSH
74282: LD_VAR 0 14
74286: PUSH
74287: LD_VAR 0 8
74291: ARRAY
74292: PPUSH
74293: CALL_OW 313
74297: AND
74298: IFFALSE 74371
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74300: LD_VAR 0 4
74304: PUSH
74305: LD_VAR 0 7
74309: ARRAY
74310: PPUSH
74311: LD_VAR 0 14
74315: PUSH
74316: LD_VAR 0 8
74320: ARRAY
74321: PPUSH
74322: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
74326: LD_ADDR_VAR 0 28
74330: PUSH
74331: LD_VAR 0 28
74335: PPUSH
74336: LD_VAR 0 28
74340: PUSH
74341: LD_INT 1
74343: PLUS
74344: PPUSH
74345: LD_VAR 0 14
74349: PUSH
74350: LD_VAR 0 8
74354: ARRAY
74355: PPUSH
74356: CALL_OW 1
74360: ST_TO_ADDR
// attacking := true ;
74361: LD_ADDR_VAR 0 29
74365: PUSH
74366: LD_INT 1
74368: ST_TO_ADDR
// break ;
74369: GO 74373
// end ; end ;
74371: GO 74240
74373: POP
74374: POP
// if not attacking and f_attack_depot then
74375: LD_VAR 0 29
74379: NOT
74380: PUSH
74381: LD_VAR 0 25
74385: AND
74386: IFFALSE 74481
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74388: LD_ADDR_VAR 0 13
74392: PUSH
74393: LD_VAR 0 14
74397: PPUSH
74398: LD_INT 2
74400: PUSH
74401: LD_INT 30
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 30
74413: PUSH
74414: LD_INT 1
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: LIST
74425: PPUSH
74426: CALL_OW 72
74430: ST_TO_ADDR
// if z then
74431: LD_VAR 0 13
74435: IFFALSE 74481
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
74437: LD_VAR 0 4
74441: PUSH
74442: LD_VAR 0 7
74446: ARRAY
74447: PPUSH
74448: LD_VAR 0 13
74452: PPUSH
74453: LD_VAR 0 4
74457: PUSH
74458: LD_VAR 0 7
74462: ARRAY
74463: PPUSH
74464: CALL_OW 74
74468: PPUSH
74469: CALL_OW 115
// attacking := true ;
74473: LD_ADDR_VAR 0 29
74477: PUSH
74478: LD_INT 1
74480: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
74481: LD_VAR 0 4
74485: PUSH
74486: LD_VAR 0 7
74490: ARRAY
74491: PPUSH
74492: CALL_OW 256
74496: PUSH
74497: LD_INT 500
74499: LESS
74500: IFFALSE 74526
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74502: LD_VAR 0 4
74506: PUSH
74507: LD_VAR 0 7
74511: ARRAY
74512: PPUSH
74513: LD_VAR 0 14
74517: PUSH
74518: LD_INT 1
74520: ARRAY
74521: PPUSH
74522: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74526: LD_VAR 0 4
74530: PUSH
74531: LD_VAR 0 7
74535: ARRAY
74536: PPUSH
74537: CALL_OW 256
74541: PUSH
74542: LD_INT 250
74544: LESS
74545: PUSH
74546: LD_VAR 0 4
74550: PUSH
74551: LD_VAR 0 7
74555: ARRAY
74556: PUSH
74557: LD_INT 21
74559: PUSH
74560: LD_INT 2
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: LD_INT 23
74569: PUSH
74570: LD_INT 2
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PPUSH
74581: CALL_OW 69
74585: IN
74586: AND
74587: IFFALSE 74712
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
74589: LD_ADDR_VAR 0 9
74593: PUSH
74594: LD_OWVAR 3
74598: PUSH
74599: LD_VAR 0 4
74603: PUSH
74604: LD_VAR 0 7
74608: ARRAY
74609: DIFF
74610: PPUSH
74611: LD_VAR 0 4
74615: PUSH
74616: LD_VAR 0 7
74620: ARRAY
74621: PPUSH
74622: CALL_OW 74
74626: ST_TO_ADDR
// if not k then
74627: LD_VAR 0 9
74631: NOT
74632: IFFALSE 74636
// continue ;
74634: GO 72278
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
74636: LD_VAR 0 9
74640: PUSH
74641: LD_INT 81
74643: PUSH
74644: LD_VAR 0 4
74648: PUSH
74649: LD_VAR 0 7
74653: ARRAY
74654: PPUSH
74655: CALL_OW 255
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PPUSH
74664: CALL_OW 69
74668: IN
74669: PUSH
74670: LD_VAR 0 9
74674: PPUSH
74675: LD_VAR 0 4
74679: PUSH
74680: LD_VAR 0 7
74684: ARRAY
74685: PPUSH
74686: CALL_OW 296
74690: PUSH
74691: LD_INT 5
74693: LESS
74694: AND
74695: IFFALSE 74712
// ComAutodestruct ( group [ i ] ) ;
74697: LD_VAR 0 4
74701: PUSH
74702: LD_VAR 0 7
74706: ARRAY
74707: PPUSH
74708: CALL 70660 0 1
// end ; if f_attack_depot then
74712: LD_VAR 0 25
74716: IFFALSE 74828
// begin k := 6 ;
74718: LD_ADDR_VAR 0 9
74722: PUSH
74723: LD_INT 6
74725: ST_TO_ADDR
// if tmp < k then
74726: LD_VAR 0 14
74730: PUSH
74731: LD_VAR 0 9
74735: LESS
74736: IFFALSE 74748
// k := tmp ;
74738: LD_ADDR_VAR 0 9
74742: PUSH
74743: LD_VAR 0 14
74747: ST_TO_ADDR
// for j = 1 to k do
74748: LD_ADDR_VAR 0 8
74752: PUSH
74753: DOUBLE
74754: LD_INT 1
74756: DEC
74757: ST_TO_ADDR
74758: LD_VAR 0 9
74762: PUSH
74763: FOR_TO
74764: IFFALSE 74826
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
74766: LD_VAR 0 8
74770: PPUSH
74771: CALL_OW 266
74775: PUSH
74776: LD_INT 0
74778: PUSH
74779: LD_INT 1
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: IN
74786: IFFALSE 74824
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74788: LD_VAR 0 4
74792: PUSH
74793: LD_VAR 0 7
74797: ARRAY
74798: PPUSH
74799: LD_VAR 0 14
74803: PUSH
74804: LD_VAR 0 8
74808: ARRAY
74809: PPUSH
74810: CALL_OW 115
// attacking := true ;
74814: LD_ADDR_VAR 0 29
74818: PUSH
74819: LD_INT 1
74821: ST_TO_ADDR
// break ;
74822: GO 74826
// end ;
74824: GO 74763
74826: POP
74827: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
74828: LD_VAR 0 4
74832: PUSH
74833: LD_VAR 0 7
74837: ARRAY
74838: PPUSH
74839: CALL_OW 302
74843: PUSH
74844: LD_VAR 0 29
74848: NOT
74849: AND
74850: IFFALSE 75172
// begin if GetTag ( group [ i ] ) = 71 then
74852: LD_VAR 0 4
74856: PUSH
74857: LD_VAR 0 7
74861: ARRAY
74862: PPUSH
74863: CALL_OW 110
74867: PUSH
74868: LD_INT 71
74870: EQUAL
74871: IFFALSE 74912
// begin if HasTask ( group [ i ] ) then
74873: LD_VAR 0 4
74877: PUSH
74878: LD_VAR 0 7
74882: ARRAY
74883: PPUSH
74884: CALL_OW 314
74888: IFFALSE 74894
// continue else
74890: GO 72278
74892: GO 74912
// SetTag ( group [ i ] , 0 ) ;
74894: LD_VAR 0 4
74898: PUSH
74899: LD_VAR 0 7
74903: ARRAY
74904: PPUSH
74905: LD_INT 0
74907: PPUSH
74908: CALL_OW 109
// end ; k := 8 ;
74912: LD_ADDR_VAR 0 9
74916: PUSH
74917: LD_INT 8
74919: ST_TO_ADDR
// x := 0 ;
74920: LD_ADDR_VAR 0 10
74924: PUSH
74925: LD_INT 0
74927: ST_TO_ADDR
// if tmp < k then
74928: LD_VAR 0 14
74932: PUSH
74933: LD_VAR 0 9
74937: LESS
74938: IFFALSE 74950
// k := tmp ;
74940: LD_ADDR_VAR 0 9
74944: PUSH
74945: LD_VAR 0 14
74949: ST_TO_ADDR
// for j = 1 to k do
74950: LD_ADDR_VAR 0 8
74954: PUSH
74955: DOUBLE
74956: LD_INT 1
74958: DEC
74959: ST_TO_ADDR
74960: LD_VAR 0 9
74964: PUSH
74965: FOR_TO
74966: IFFALSE 75064
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
74968: LD_VAR 0 14
74972: PUSH
74973: LD_VAR 0 8
74977: ARRAY
74978: PPUSH
74979: CALL_OW 247
74983: PUSH
74984: LD_INT 1
74986: EQUAL
74987: PUSH
74988: LD_VAR 0 14
74992: PUSH
74993: LD_VAR 0 8
74997: ARRAY
74998: PPUSH
74999: CALL_OW 256
75003: PUSH
75004: LD_INT 250
75006: LESS
75007: PUSH
75008: LD_VAR 0 20
75012: AND
75013: PUSH
75014: LD_VAR 0 20
75018: NOT
75019: PUSH
75020: LD_VAR 0 14
75024: PUSH
75025: LD_VAR 0 8
75029: ARRAY
75030: PPUSH
75031: CALL_OW 256
75035: PUSH
75036: LD_INT 250
75038: GREATEREQUAL
75039: AND
75040: OR
75041: AND
75042: IFFALSE 75062
// begin x := tmp [ j ] ;
75044: LD_ADDR_VAR 0 10
75048: PUSH
75049: LD_VAR 0 14
75053: PUSH
75054: LD_VAR 0 8
75058: ARRAY
75059: ST_TO_ADDR
// break ;
75060: GO 75064
// end ;
75062: GO 74965
75064: POP
75065: POP
// if x then
75066: LD_VAR 0 10
75070: IFFALSE 75094
// ComAttackUnit ( group [ i ] , x ) else
75072: LD_VAR 0 4
75076: PUSH
75077: LD_VAR 0 7
75081: ARRAY
75082: PPUSH
75083: LD_VAR 0 10
75087: PPUSH
75088: CALL_OW 115
75092: GO 75118
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75094: LD_VAR 0 4
75098: PUSH
75099: LD_VAR 0 7
75103: ARRAY
75104: PPUSH
75105: LD_VAR 0 14
75109: PUSH
75110: LD_INT 1
75112: ARRAY
75113: PPUSH
75114: CALL_OW 115
// if not HasTask ( group [ i ] ) then
75118: LD_VAR 0 4
75122: PUSH
75123: LD_VAR 0 7
75127: ARRAY
75128: PPUSH
75129: CALL_OW 314
75133: NOT
75134: IFFALSE 75172
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
75136: LD_VAR 0 4
75140: PUSH
75141: LD_VAR 0 7
75145: ARRAY
75146: PPUSH
75147: LD_VAR 0 14
75151: PPUSH
75152: LD_VAR 0 4
75156: PUSH
75157: LD_VAR 0 7
75161: ARRAY
75162: PPUSH
75163: CALL_OW 74
75167: PPUSH
75168: CALL_OW 115
// end ; end ; end ;
75172: GO 72278
75174: POP
75175: POP
// wait ( 0 0$1 ) ;
75176: LD_INT 35
75178: PPUSH
75179: CALL_OW 67
// until group = [ ] ;
75183: LD_VAR 0 4
75187: PUSH
75188: EMPTY
75189: EQUAL
75190: IFFALSE 72263
// end ;
75192: LD_VAR 0 2
75196: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75197: LD_INT 0
75199: PPUSH
75200: PPUSH
75201: PPUSH
75202: PPUSH
// if not base_units then
75203: LD_VAR 0 1
75207: NOT
75208: IFFALSE 75212
// exit ;
75210: GO 75299
// result := false ;
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: LD_INT 0
75219: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75220: LD_ADDR_VAR 0 5
75224: PUSH
75225: LD_VAR 0 1
75229: PPUSH
75230: LD_INT 21
75232: PUSH
75233: LD_INT 3
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PPUSH
75240: CALL_OW 72
75244: ST_TO_ADDR
// if not tmp then
75245: LD_VAR 0 5
75249: NOT
75250: IFFALSE 75254
// exit ;
75252: GO 75299
// for i in tmp do
75254: LD_ADDR_VAR 0 3
75258: PUSH
75259: LD_VAR 0 5
75263: PUSH
75264: FOR_IN
75265: IFFALSE 75297
// begin result := EnemyInRange ( i , 22 ) ;
75267: LD_ADDR_VAR 0 2
75271: PUSH
75272: LD_VAR 0 3
75276: PPUSH
75277: LD_INT 22
75279: PPUSH
75280: CALL 70343 0 2
75284: ST_TO_ADDR
// if result then
75285: LD_VAR 0 2
75289: IFFALSE 75295
// exit ;
75291: POP
75292: POP
75293: GO 75299
// end ;
75295: GO 75264
75297: POP
75298: POP
// end ;
75299: LD_VAR 0 2
75303: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75304: LD_INT 0
75306: PPUSH
75307: PPUSH
// if not units then
75308: LD_VAR 0 1
75312: NOT
75313: IFFALSE 75317
// exit ;
75315: GO 75387
// result := [ ] ;
75317: LD_ADDR_VAR 0 3
75321: PUSH
75322: EMPTY
75323: ST_TO_ADDR
// for i in units do
75324: LD_ADDR_VAR 0 4
75328: PUSH
75329: LD_VAR 0 1
75333: PUSH
75334: FOR_IN
75335: IFFALSE 75385
// if GetTag ( i ) = tag then
75337: LD_VAR 0 4
75341: PPUSH
75342: CALL_OW 110
75346: PUSH
75347: LD_VAR 0 2
75351: EQUAL
75352: IFFALSE 75383
// result := Insert ( result , result + 1 , i ) ;
75354: LD_ADDR_VAR 0 3
75358: PUSH
75359: LD_VAR 0 3
75363: PPUSH
75364: LD_VAR 0 3
75368: PUSH
75369: LD_INT 1
75371: PLUS
75372: PPUSH
75373: LD_VAR 0 4
75377: PPUSH
75378: CALL_OW 2
75382: ST_TO_ADDR
75383: GO 75334
75385: POP
75386: POP
// end ;
75387: LD_VAR 0 3
75391: RET
// export function IsDriver ( un ) ; begin
75392: LD_INT 0
75394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75395: LD_ADDR_VAR 0 2
75399: PUSH
75400: LD_VAR 0 1
75404: PUSH
75405: LD_INT 55
75407: PUSH
75408: EMPTY
75409: LIST
75410: PPUSH
75411: CALL_OW 69
75415: IN
75416: ST_TO_ADDR
// end ;
75417: LD_VAR 0 2
75421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75422: LD_INT 0
75424: PPUSH
75425: PPUSH
// list := [ ] ;
75426: LD_ADDR_VAR 0 5
75430: PUSH
75431: EMPTY
75432: ST_TO_ADDR
// case d of 0 :
75433: LD_VAR 0 3
75437: PUSH
75438: LD_INT 0
75440: DOUBLE
75441: EQUAL
75442: IFTRUE 75446
75444: GO 75579
75446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75447: LD_ADDR_VAR 0 5
75451: PUSH
75452: LD_VAR 0 1
75456: PUSH
75457: LD_INT 4
75459: MINUS
75460: PUSH
75461: LD_VAR 0 2
75465: PUSH
75466: LD_INT 4
75468: MINUS
75469: PUSH
75470: LD_INT 2
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: LIST
75477: PUSH
75478: LD_VAR 0 1
75482: PUSH
75483: LD_INT 3
75485: MINUS
75486: PUSH
75487: LD_VAR 0 2
75491: PUSH
75492: LD_INT 1
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 4
75507: PLUS
75508: PUSH
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 4
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 3
75529: PLUS
75530: PUSH
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 3
75538: PLUS
75539: PUSH
75540: LD_INT 5
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_VAR 0 2
75557: PUSH
75558: LD_INT 4
75560: PLUS
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: ST_TO_ADDR
// end ; 1 :
75577: GO 76277
75579: LD_INT 1
75581: DOUBLE
75582: EQUAL
75583: IFTRUE 75587
75585: GO 75720
75587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75588: LD_ADDR_VAR 0 5
75592: PUSH
75593: LD_VAR 0 1
75597: PUSH
75598: LD_VAR 0 2
75602: PUSH
75603: LD_INT 4
75605: MINUS
75606: PUSH
75607: LD_INT 3
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: LIST
75614: PUSH
75615: LD_VAR 0 1
75619: PUSH
75620: LD_INT 3
75622: MINUS
75623: PUSH
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 3
75631: MINUS
75632: PUSH
75633: LD_INT 2
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: LIST
75640: PUSH
75641: LD_VAR 0 1
75645: PUSH
75646: LD_INT 4
75648: MINUS
75649: PUSH
75650: LD_VAR 0 2
75654: PUSH
75655: LD_INT 1
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_VAR 0 2
75672: PUSH
75673: LD_INT 3
75675: PLUS
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_INT 4
75692: PLUS
75693: PUSH
75694: LD_VAR 0 2
75698: PUSH
75699: LD_INT 4
75701: PLUS
75702: PUSH
75703: LD_INT 5
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: LIST
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: ST_TO_ADDR
// end ; 2 :
75718: GO 76277
75720: LD_INT 2
75722: DOUBLE
75723: EQUAL
75724: IFTRUE 75728
75726: GO 75857
75728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75729: LD_ADDR_VAR 0 5
75733: PUSH
75734: LD_VAR 0 1
75738: PUSH
75739: LD_VAR 0 2
75743: PUSH
75744: LD_INT 3
75746: MINUS
75747: PUSH
75748: LD_INT 3
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: LIST
75755: PUSH
75756: LD_VAR 0 1
75760: PUSH
75761: LD_INT 4
75763: PLUS
75764: PUSH
75765: LD_VAR 0 2
75769: PUSH
75770: LD_INT 4
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: PUSH
75778: LD_VAR 0 1
75782: PUSH
75783: LD_VAR 0 2
75787: PUSH
75788: LD_INT 4
75790: PLUS
75791: PUSH
75792: LD_INT 0
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: LIST
75799: PUSH
75800: LD_VAR 0 1
75804: PUSH
75805: LD_INT 3
75807: MINUS
75808: PUSH
75809: LD_VAR 0 2
75813: PUSH
75814: LD_INT 1
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: PUSH
75822: LD_VAR 0 1
75826: PUSH
75827: LD_INT 4
75829: MINUS
75830: PUSH
75831: LD_VAR 0 2
75835: PUSH
75836: LD_INT 4
75838: MINUS
75839: PUSH
75840: LD_INT 2
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: LIST
75847: PUSH
75848: EMPTY
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: ST_TO_ADDR
// end ; 3 :
75855: GO 76277
75857: LD_INT 3
75859: DOUBLE
75860: EQUAL
75861: IFTRUE 75865
75863: GO 75998
75865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75866: LD_ADDR_VAR 0 5
75870: PUSH
75871: LD_VAR 0 1
75875: PUSH
75876: LD_INT 3
75878: PLUS
75879: PUSH
75880: LD_VAR 0 2
75884: PUSH
75885: LD_INT 4
75887: PUSH
75888: EMPTY
75889: LIST
75890: LIST
75891: LIST
75892: PUSH
75893: LD_VAR 0 1
75897: PUSH
75898: LD_INT 4
75900: PLUS
75901: PUSH
75902: LD_VAR 0 2
75906: PUSH
75907: LD_INT 4
75909: PLUS
75910: PUSH
75911: LD_INT 5
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: LIST
75918: PUSH
75919: LD_VAR 0 1
75923: PUSH
75924: LD_INT 4
75926: MINUS
75927: PUSH
75928: LD_VAR 0 2
75932: PUSH
75933: LD_INT 1
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: PUSH
75941: LD_VAR 0 1
75945: PUSH
75946: LD_VAR 0 2
75950: PUSH
75951: LD_INT 4
75953: MINUS
75954: PUSH
75955: LD_INT 3
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: PUSH
75963: LD_VAR 0 1
75967: PUSH
75968: LD_INT 3
75970: MINUS
75971: PUSH
75972: LD_VAR 0 2
75976: PUSH
75977: LD_INT 3
75979: MINUS
75980: PUSH
75981: LD_INT 2
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: LIST
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: ST_TO_ADDR
// end ; 4 :
75996: GO 76277
75998: LD_INT 4
76000: DOUBLE
76001: EQUAL
76002: IFTRUE 76006
76004: GO 76139
76006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76007: LD_ADDR_VAR 0 5
76011: PUSH
76012: LD_VAR 0 1
76016: PUSH
76017: LD_VAR 0 2
76021: PUSH
76022: LD_INT 4
76024: PLUS
76025: PUSH
76026: LD_INT 0
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: LIST
76033: PUSH
76034: LD_VAR 0 1
76038: PUSH
76039: LD_INT 3
76041: PLUS
76042: PUSH
76043: LD_VAR 0 2
76047: PUSH
76048: LD_INT 3
76050: PLUS
76051: PUSH
76052: LD_INT 5
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: LIST
76059: PUSH
76060: LD_VAR 0 1
76064: PUSH
76065: LD_INT 4
76067: PLUS
76068: PUSH
76069: LD_VAR 0 2
76073: PUSH
76074: LD_INT 4
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: LD_VAR 0 2
76091: PUSH
76092: LD_INT 3
76094: MINUS
76095: PUSH
76096: LD_INT 3
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_INT 4
76111: MINUS
76112: PUSH
76113: LD_VAR 0 2
76117: PUSH
76118: LD_INT 4
76120: MINUS
76121: PUSH
76122: LD_INT 2
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: LIST
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: ST_TO_ADDR
// end ; 5 :
76137: GO 76277
76139: LD_INT 5
76141: DOUBLE
76142: EQUAL
76143: IFTRUE 76147
76145: GO 76276
76147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76148: LD_ADDR_VAR 0 5
76152: PUSH
76153: LD_VAR 0 1
76157: PUSH
76158: LD_INT 4
76160: MINUS
76161: PUSH
76162: LD_VAR 0 2
76166: PUSH
76167: LD_INT 1
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_VAR 0 2
76184: PUSH
76185: LD_INT 4
76187: MINUS
76188: PUSH
76189: LD_INT 3
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: LD_INT 4
76204: PLUS
76205: PUSH
76206: LD_VAR 0 2
76210: PUSH
76211: LD_INT 4
76213: PLUS
76214: PUSH
76215: LD_INT 5
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: LIST
76222: PUSH
76223: LD_VAR 0 1
76227: PUSH
76228: LD_INT 3
76230: PLUS
76231: PUSH
76232: LD_VAR 0 2
76236: PUSH
76237: LD_INT 4
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: LD_VAR 0 2
76254: PUSH
76255: LD_INT 3
76257: PLUS
76258: PUSH
76259: LD_INT 0
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: LIST
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: LIST
76271: LIST
76272: LIST
76273: ST_TO_ADDR
// end ; end ;
76274: GO 76277
76276: POP
// result := list ;
76277: LD_ADDR_VAR 0 4
76281: PUSH
76282: LD_VAR 0 5
76286: ST_TO_ADDR
// end ;
76287: LD_VAR 0 4
76291: RET
