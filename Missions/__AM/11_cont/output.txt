// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46060 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28935 0 0
// PrepareAmerican ;
  33: CALL 294 0 0
// PrepareArabian ;
  37: CALL 33546 0 0
// Action ;
  41: CALL 38699 0 0
// RunMacro ;
  45: CALL 46223 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 17
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// end ;
 235: LD_VAR 0 1
 239: RET
// function Debuger ; var i ; begin
 240: LD_INT 0
 242: PPUSH
 243: PPUSH
// if not debug then
 244: LD_EXP 1
 248: NOT
 249: IFFALSE 253
// exit ;
 251: GO 289
// game_speed := 5 ;
 253: LD_ADDR_OWVAR 65
 257: PUSH
 258: LD_INT 5
 260: ST_TO_ADDR
// uc_side := 1 ;
 261: LD_ADDR_OWVAR 20
 265: PUSH
 266: LD_INT 1
 268: ST_TO_ADDR
// uc_nation := 1 ;
 269: LD_ADDR_OWVAR 21
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 277: LD_EXP 34
 281: PPUSH
 282: LD_INT 1
 284: PPUSH
 285: CALL_OW 235
// end ; end_of_file
 289: LD_VAR 0 1
 293: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 294: LD_INT 0
 296: PPUSH
 297: PPUSH
 298: PPUSH
 299: PPUSH
 300: PPUSH
 301: PPUSH
 302: PPUSH
 303: PPUSH
 304: PPUSH
// uc_side := 4 ;
 305: LD_ADDR_OWVAR 20
 309: PUSH
 310: LD_INT 4
 312: ST_TO_ADDR
// uc_nation := 1 ;
 313: LD_ADDR_OWVAR 21
 317: PUSH
 318: LD_INT 1
 320: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 321: LD_ADDR_EXP 27
 325: PUSH
 326: LD_STRING Powell
 328: PPUSH
 329: LD_INT 0
 331: PPUSH
 332: CALL 1871 0 2
 336: ST_TO_ADDR
// uc_side := 1 ;
 337: LD_ADDR_OWVAR 20
 341: PUSH
 342: LD_INT 1
 344: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 345: LD_ADDR_EXP 18
 349: PUSH
 350: LD_STRING JMM
 352: PPUSH
 353: LD_EXP 1
 357: NOT
 358: PPUSH
 359: CALL 1871 0 2
 363: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 364: LD_ADDR_EXP 19
 368: PUSH
 369: LD_STRING Lisa
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: CALL 1871 0 2
 382: ST_TO_ADDR
// if not Lisa then
 383: LD_EXP 19
 387: NOT
 388: IFFALSE 403
// Lisa := CreateCharacter ( 10_Lisa ) ;
 390: LD_ADDR_EXP 19
 394: PUSH
 395: LD_STRING 10_Lisa
 397: PPUSH
 398: CALL_OW 34
 402: ST_TO_ADDR
// if not Lisa then
 403: LD_EXP 19
 407: NOT
 408: IFFALSE 423
// Lisa := CreateCharacter ( 09_Lisa ) ;
 410: LD_ADDR_EXP 19
 414: PUSH
 415: LD_STRING 09_Lisa
 417: PPUSH
 418: CALL_OW 34
 422: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 423: LD_ADDR_EXP 28
 427: PUSH
 428: LD_STRING Cornel
 430: PPUSH
 431: LD_EXP 1
 435: NOT
 436: PPUSH
 437: CALL 1871 0 2
 441: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 442: LD_ADDR_EXP 20
 446: PUSH
 447: LD_STRING Donaldson
 449: PPUSH
 450: LD_EXP 1
 454: NOT
 455: PPUSH
 456: CALL 1871 0 2
 460: ST_TO_ADDR
// if not Donaldson then
 461: LD_EXP 20
 465: NOT
 466: IFFALSE 481
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 468: LD_ADDR_EXP 20
 472: PUSH
 473: LD_STRING 10_Donaldson
 475: PPUSH
 476: CALL_OW 34
 480: ST_TO_ADDR
// if not Donaldson then
 481: LD_EXP 20
 485: NOT
 486: IFFALSE 501
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 488: LD_ADDR_EXP 20
 492: PUSH
 493: LD_STRING 09_Donaldson
 495: PPUSH
 496: CALL_OW 34
 500: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 501: LD_ADDR_EXP 21
 505: PUSH
 506: LD_STRING Bobby
 508: PPUSH
 509: LD_EXP 1
 513: NOT
 514: PPUSH
 515: CALL 1871 0 2
 519: ST_TO_ADDR
// if not Bobby then
 520: LD_EXP 21
 524: NOT
 525: IFFALSE 540
// Bobby := CreateCharacter ( 10_Bobby ) ;
 527: LD_ADDR_EXP 21
 531: PUSH
 532: LD_STRING 10_Bobby
 534: PPUSH
 535: CALL_OW 34
 539: ST_TO_ADDR
// if not Bobby then
 540: LD_EXP 21
 544: NOT
 545: IFFALSE 560
// Bobby := CreateCharacter ( 09_Bobby ) ;
 547: LD_ADDR_EXP 21
 551: PUSH
 552: LD_STRING 09_Bobby
 554: PPUSH
 555: CALL_OW 34
 559: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 560: LD_ADDR_EXP 22
 564: PUSH
 565: LD_STRING Cyrus
 567: PPUSH
 568: LD_EXP 1
 572: NOT
 573: PPUSH
 574: CALL 1871 0 2
 578: ST_TO_ADDR
// if not Cyrus then
 579: LD_EXP 22
 583: NOT
 584: IFFALSE 599
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 586: LD_ADDR_EXP 22
 590: PUSH
 591: LD_STRING 10_Cyrus
 593: PPUSH
 594: CALL_OW 34
 598: ST_TO_ADDR
// if not Cyrus then
 599: LD_EXP 22
 603: NOT
 604: IFFALSE 619
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 606: LD_ADDR_EXP 22
 610: PUSH
 611: LD_STRING 09_Cyrus
 613: PPUSH
 614: CALL_OW 34
 618: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 619: LD_ADDR_EXP 23
 623: PUSH
 624: LD_STRING Denis
 626: PPUSH
 627: LD_EXP 1
 631: NOT
 632: PPUSH
 633: CALL 1871 0 2
 637: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 638: LD_ADDR_EXP 24
 642: PUSH
 643: LD_STRING Brown
 645: PPUSH
 646: LD_EXP 1
 650: NOT
 651: PPUSH
 652: CALL 1871 0 2
 656: ST_TO_ADDR
// if not Brown then
 657: LD_EXP 24
 661: NOT
 662: IFFALSE 677
// Brown := CreateCharacter ( 10_Brown ) ;
 664: LD_ADDR_EXP 24
 668: PUSH
 669: LD_STRING 10_Brown
 671: PPUSH
 672: CALL_OW 34
 676: ST_TO_ADDR
// if not Brown then
 677: LD_EXP 24
 681: NOT
 682: IFFALSE 697
// Brown := CreateCharacter ( 08_Brown ) ;
 684: LD_ADDR_EXP 24
 688: PUSH
 689: LD_STRING 08_Brown
 691: PPUSH
 692: CALL_OW 34
 696: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 697: LD_ADDR_EXP 25
 701: PUSH
 702: LD_STRING Gladstone
 704: PPUSH
 705: LD_EXP 1
 709: NOT
 710: PPUSH
 711: CALL 1871 0 2
 715: ST_TO_ADDR
// if not Gladstone then
 716: LD_EXP 25
 720: NOT
 721: IFFALSE 736
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 723: LD_ADDR_EXP 25
 727: PUSH
 728: LD_STRING 10_Gladstone
 730: PPUSH
 731: CALL_OW 34
 735: ST_TO_ADDR
// if not Gladstone then
 736: LD_EXP 25
 740: NOT
 741: IFFALSE 756
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 743: LD_ADDR_EXP 25
 747: PUSH
 748: LD_STRING 08_Gladstone
 750: PPUSH
 751: CALL_OW 34
 755: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 756: LD_ADDR_EXP 26
 760: PUSH
 761: LD_STRING Houten
 763: PPUSH
 764: LD_EXP 1
 768: NOT
 769: PPUSH
 770: CALL 1871 0 2
 774: ST_TO_ADDR
// if not Houten then
 775: LD_EXP 26
 779: NOT
 780: IFFALSE 795
// Houten := CreateCharacter ( 10_Houten ) ;
 782: LD_ADDR_EXP 26
 786: PUSH
 787: LD_STRING 10_Houten
 789: PPUSH
 790: CALL_OW 34
 794: ST_TO_ADDR
// if not Houten then
 795: LD_EXP 26
 799: NOT
 800: IFFALSE 815
// Houten := CreateCharacter ( 09_Houten ) ;
 802: LD_ADDR_EXP 26
 806: PUSH
 807: LD_STRING 09_Houten
 809: PPUSH
 810: CALL_OW 34
 814: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 815: LD_ADDR_EXP 28
 819: PUSH
 820: LD_STRING Cornel
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: CALL 1871 0 2
 833: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 834: LD_ADDR_EXP 29
 838: PUSH
 839: LD_STRING Gary
 841: PPUSH
 842: LD_EXP 1
 846: NOT
 847: PPUSH
 848: CALL 1871 0 2
 852: ST_TO_ADDR
// if not Gary then
 853: LD_EXP 29
 857: NOT
 858: IFFALSE 873
// Gary := CreateCharacter ( 10_Gary ) ;
 860: LD_ADDR_EXP 29
 864: PUSH
 865: LD_STRING 10_Gary
 867: PPUSH
 868: CALL_OW 34
 872: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 873: LD_ADDR_EXP 30
 877: PUSH
 878: LD_STRING Frank
 880: PPUSH
 881: LD_EXP 1
 885: NOT
 886: PPUSH
 887: CALL 1871 0 2
 891: ST_TO_ADDR
// if not Frank then
 892: LD_EXP 30
 896: NOT
 897: IFFALSE 912
// Frank := CreateCharacter ( 08_Frank ) ;
 899: LD_ADDR_EXP 30
 903: PUSH
 904: LD_STRING 08_Frank
 906: PPUSH
 907: CALL_OW 34
 911: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 912: LD_ADDR_EXP 31
 916: PUSH
 917: LD_STRING Kikuchi
 919: PPUSH
 920: LD_EXP 1
 924: NOT
 925: PPUSH
 926: CALL 1871 0 2
 930: ST_TO_ADDR
// if not Kikuchi then
 931: LD_EXP 31
 935: NOT
 936: IFFALSE 951
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 938: LD_ADDR_EXP 31
 942: PUSH
 943: LD_STRING 08_Kikuchi
 945: PPUSH
 946: CALL_OW 34
 950: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 951: LD_ADDR_VAR 0 5
 955: PUSH
 956: LD_EXP 19
 960: PUSH
 961: LD_EXP 20
 965: PUSH
 966: LD_EXP 21
 970: PUSH
 971: LD_EXP 22
 975: PUSH
 976: LD_EXP 23
 980: PUSH
 981: LD_EXP 24
 985: PUSH
 986: LD_EXP 25
 990: PUSH
 991: LD_EXP 26
 995: PUSH
 996: LD_EXP 28
1000: PUSH
1001: LD_EXP 29
1005: PUSH
1006: LD_EXP 30
1010: PUSH
1011: LD_EXP 31
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: ST_TO_ADDR
// tmp := tmp diff 0 ;
1030: LD_ADDR_VAR 0 5
1034: PUSH
1035: LD_VAR 0 5
1039: PUSH
1040: LD_INT 0
1042: DIFF
1043: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1044: LD_ADDR_VAR 0 5
1048: PUSH
1049: LD_VAR 0 5
1053: PUSH
1054: LD_STRING 10_lock
1056: PPUSH
1057: CALL_OW 31
1061: UNION
1062: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1063: LD_ADDR_VAR 0 5
1067: PUSH
1068: LD_VAR 0 5
1072: PUSH
1073: LD_STRING 10c_lock
1075: PPUSH
1076: CALL_OW 31
1080: UNION
1081: ST_TO_ADDR
// for i in tmp do
1082: LD_ADDR_VAR 0 2
1086: PUSH
1087: LD_VAR 0 5
1091: PUSH
1092: FOR_IN
1093: IFFALSE 1124
// if GetClass ( i ) = class_mortar then
1095: LD_VAR 0 2
1099: PPUSH
1100: CALL_OW 257
1104: PUSH
1105: LD_INT 8
1107: EQUAL
1108: IFFALSE 1122
// SetClass ( i , class_soldier ) ;
1110: LD_VAR 0 2
1114: PPUSH
1115: LD_INT 1
1117: PPUSH
1118: CALL_OW 336
1122: GO 1092
1124: POP
1125: POP
// if tmp < 12 then
1126: LD_VAR 0 5
1130: PUSH
1131: LD_INT 12
1133: LESS
1134: IFFALSE 1232
// begin k := 16 - tmp ;
1136: LD_ADDR_VAR 0 3
1140: PUSH
1141: LD_INT 16
1143: PUSH
1144: LD_VAR 0 5
1148: MINUS
1149: ST_TO_ADDR
// for i = 1 to k do
1150: LD_ADDR_VAR 0 2
1154: PUSH
1155: DOUBLE
1156: LD_INT 1
1158: DEC
1159: ST_TO_ADDR
1160: LD_VAR 0 3
1164: PUSH
1165: FOR_TO
1166: IFFALSE 1230
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1168: LD_INT 0
1170: PPUSH
1171: LD_INT 1
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: LD_INT 2
1179: PUSH
1180: LD_INT 3
1182: PUSH
1183: LD_INT 4
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 1
1195: PPUSH
1196: LD_INT 5
1198: PPUSH
1199: CALL_OW 12
1203: ARRAY
1204: PPUSH
1205: LD_INT 6
1207: PPUSH
1208: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1212: LD_ADDR_VAR 0 5
1216: PUSH
1217: LD_VAR 0 5
1221: PUSH
1222: CALL_OW 44
1226: ADD
1227: ST_TO_ADDR
// end ;
1228: GO 1165
1230: POP
1231: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1232: LD_ADDR_VAR 0 6
1236: PUSH
1237: LD_STRING 1
1239: PPUSH
1240: LD_INT 12
1242: PPUSH
1243: LD_INT 12
1245: PPUSH
1246: LD_INT -5
1248: PUSH
1249: LD_EXP 18
1253: PUSH
1254: LD_INT -2
1256: PUSH
1257: LD_INT -3
1259: PUSH
1260: LD_INT -5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: PUSH
1270: LD_VAR 0 5
1274: ADD
1275: PUSH
1276: LD_INT -6
1278: PUSH
1279: LD_INT -4
1281: PUSH
1282: LD_EXP 27
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: LIST
1291: ADD
1292: PPUSH
1293: LD_INT 1
1295: PUSH
1296: LD_INT 4
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PUSH
1303: LD_INT 2
1305: PUSH
1306: LD_INT 1
1308: PUSH
1309: EMPTY
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 3
1315: PUSH
1316: LD_INT 0
1318: PUSH
1319: LD_INT 5
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 4
1329: PUSH
1330: LD_INT 0
1332: PUSH
1333: LD_INT 3
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: LIST
1340: PUSH
1341: LD_INT 5
1343: PUSH
1344: LD_INT 0
1346: PUSH
1347: LD_INT 2
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: LIST
1361: PPUSH
1362: CALL_OW 42
1366: ST_TO_ADDR
// others := tmp diff selected ;
1367: LD_ADDR_VAR 0 9
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_VAR 0 6
1381: DIFF
1382: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1383: LD_ADDR_VAR 0 9
1387: PUSH
1388: LD_VAR 0 5
1392: PUSH
1393: LD_EXP 19
1397: PUSH
1398: LD_EXP 20
1402: PUSH
1403: LD_EXP 21
1407: PUSH
1408: LD_EXP 22
1412: PUSH
1413: LD_EXP 23
1417: PUSH
1418: LD_EXP 24
1422: PUSH
1423: LD_EXP 25
1427: PUSH
1428: LD_EXP 26
1432: PUSH
1433: LD_EXP 28
1437: PUSH
1438: LD_EXP 29
1442: PUSH
1443: LD_EXP 30
1447: PUSH
1448: LD_EXP 31
1452: PUSH
1453: EMPTY
1454: LIST
1455: LIST
1456: LIST
1457: LIST
1458: LIST
1459: LIST
1460: LIST
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: LIST
1466: DIFF
1467: ST_TO_ADDR
// if others then
1468: LD_VAR 0 9
1472: IFFALSE 1486
// SaveCharacters ( others , 11_others ) ;
1474: LD_VAR 0 9
1478: PPUSH
1479: LD_STRING 11_others
1481: PPUSH
1482: CALL_OW 38
// us_team := tmp ;
1486: LD_ADDR_EXP 32
1490: PUSH
1491: LD_VAR 0 5
1495: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1496: LD_ADDR_VAR 0 7
1500: PUSH
1501: LD_INT 3
1503: PUSH
1504: LD_INT 1
1506: PUSH
1507: LD_INT 1
1509: PUSH
1510: LD_INT 4
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 2
1521: PUSH
1522: LD_INT 2
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 5
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 4
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 5
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 3
1575: PUSH
1576: LD_INT 2
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 7
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// for i in JMM ^ selected do
1598: LD_ADDR_VAR 0 2
1602: PUSH
1603: LD_EXP 18
1607: PUSH
1608: LD_VAR 0 6
1612: ADD
1613: PUSH
1614: FOR_IN
1615: IFFALSE 1804
// begin if GetClass ( i ) = 3 then
1617: LD_VAR 0 2
1621: PPUSH
1622: CALL_OW 257
1626: PUSH
1627: LD_INT 3
1629: EQUAL
1630: IFFALSE 1787
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1632: LD_ADDR_OWVAR 37
1636: PUSH
1637: LD_VAR 0 7
1641: PUSH
1642: LD_INT 1
1644: ARRAY
1645: PUSH
1646: LD_INT 1
1648: ARRAY
1649: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1650: LD_ADDR_OWVAR 39
1654: PUSH
1655: LD_VAR 0 7
1659: PUSH
1660: LD_INT 1
1662: ARRAY
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1668: LD_ADDR_OWVAR 38
1672: PUSH
1673: LD_VAR 0 7
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PUSH
1682: LD_INT 3
1684: ARRAY
1685: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1686: LD_ADDR_OWVAR 40
1690: PUSH
1691: LD_VAR 0 7
1695: PUSH
1696: LD_INT 1
1698: ARRAY
1699: PUSH
1700: LD_INT 4
1702: ARRAY
1703: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1704: LD_ADDR_VAR 0 7
1708: PUSH
1709: LD_VAR 0 7
1713: PPUSH
1714: LD_INT 1
1716: PPUSH
1717: CALL_OW 3
1721: ST_TO_ADDR
// veh := CreateVehicle ;
1722: LD_ADDR_VAR 0 8
1726: PUSH
1727: CALL_OW 45
1731: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1732: LD_VAR 0 8
1736: PPUSH
1737: LD_INT 8
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1747: LD_VAR 0 2
1751: PPUSH
1752: LD_VAR 0 8
1756: PPUSH
1757: CALL_OW 52
// if i = JMM then
1761: LD_VAR 0 2
1765: PUSH
1766: LD_EXP 18
1770: EQUAL
1771: IFFALSE 1785
// SetMark ( veh , 1 ) ;
1773: LD_VAR 0 8
1777: PPUSH
1778: LD_INT 1
1780: PPUSH
1781: CALL_OW 242
// end else
1785: GO 1802
// PlaceUnitArea ( i , am_hum_start , false ) ;
1787: LD_VAR 0 2
1791: PPUSH
1792: LD_INT 9
1794: PPUSH
1795: LD_INT 0
1797: PPUSH
1798: CALL_OW 49
// end ;
1802: GO 1614
1804: POP
1805: POP
// vc_chassis := us_medium_tracked ;
1806: LD_ADDR_OWVAR 37
1810: PUSH
1811: LD_INT 3
1813: ST_TO_ADDR
// vc_engine := engine_solar ;
1814: LD_ADDR_OWVAR 39
1818: PUSH
1819: LD_INT 2
1821: ST_TO_ADDR
// vc_control := control_computer ;
1822: LD_ADDR_OWVAR 38
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// vc_weapon := us_radar ;
1830: LD_ADDR_OWVAR 40
1834: PUSH
1835: LD_INT 11
1837: ST_TO_ADDR
// veh := CreateVehicle ;
1838: LD_ADDR_VAR 0 8
1842: PUSH
1843: CALL_OW 45
1847: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1848: LD_VAR 0 8
1852: PPUSH
1853: LD_INT 87
1855: PPUSH
1856: LD_INT 142
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 48
// end ; end_of_file
1866: LD_VAR 0 1
1870: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1871: LD_INT 0
1873: PPUSH
1874: PPUSH
// if exist_mode then
1875: LD_VAR 0 2
1879: IFFALSE 1904
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1881: LD_ADDR_VAR 0 4
1885: PUSH
1886: LD_EXP 4
1890: PUSH
1891: LD_VAR 0 1
1895: STR
1896: PPUSH
1897: CALL_OW 34
1901: ST_TO_ADDR
1902: GO 1919
// unit := NewCharacter ( ident ) ;
1904: LD_ADDR_VAR 0 4
1908: PUSH
1909: LD_VAR 0 1
1913: PPUSH
1914: CALL_OW 25
1918: ST_TO_ADDR
// result := unit ;
1919: LD_ADDR_VAR 0 3
1923: PUSH
1924: LD_VAR 0 4
1928: ST_TO_ADDR
// end ;
1929: LD_VAR 0 3
1933: RET
// export function _GetHexInfo ( x , y ) ; begin
1934: LD_INT 0
1936: PPUSH
// result := false ;
1937: LD_ADDR_VAR 0 3
1941: PUSH
1942: LD_INT 0
1944: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1945: LD_VAR 0 1
1949: PPUSH
1950: LD_VAR 0 2
1954: PPUSH
1955: CALL_OW 488
1959: NOT
1960: PUSH
1961: LD_VAR 0 1
1965: NOT
1966: OR
1967: PUSH
1968: LD_VAR 0 2
1972: NOT
1973: OR
1974: IFFALSE 1978
// exit ;
1976: GO 1998
// result := GetHexInfo ( x , y ) ;
1978: LD_ADDR_VAR 0 3
1982: PUSH
1983: LD_VAR 0 1
1987: PPUSH
1988: LD_VAR 0 2
1992: PPUSH
1993: CALL_OW 546
1997: ST_TO_ADDR
// end ;
1998: LD_VAR 0 3
2002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2003: LD_INT 0
2005: PPUSH
// vc_chassis := chassis ;
2006: LD_ADDR_OWVAR 37
2010: PUSH
2011: LD_VAR 0 1
2015: ST_TO_ADDR
// vc_engine := engine ;
2016: LD_ADDR_OWVAR 39
2020: PUSH
2021: LD_VAR 0 2
2025: ST_TO_ADDR
// vc_control := control ;
2026: LD_ADDR_OWVAR 38
2030: PUSH
2031: LD_VAR 0 3
2035: ST_TO_ADDR
// vc_weapon := weapon ;
2036: LD_ADDR_OWVAR 40
2040: PUSH
2041: LD_VAR 0 4
2045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2046: LD_ADDR_OWVAR 41
2050: PUSH
2051: LD_VAR 0 5
2055: ST_TO_ADDR
// end ;
2056: LD_VAR 0 6
2060: RET
// export function CanSayRand ( side ) ; begin
2061: LD_INT 0
2063: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_INT 22
2071: PUSH
2072: LD_VAR 0 1
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PUSH
2081: LD_INT 2
2083: PUSH
2084: LD_INT 25
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 25
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 25
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 25
2116: PUSH
2117: LD_INT 4
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PPUSH
2135: CALL_OW 69
2139: PUSH
2140: LD_EXP 18
2144: PUSH
2145: LD_EXP 30
2149: PUSH
2150: LD_EXP 19
2154: PUSH
2155: LD_EXP 20
2159: PUSH
2160: LD_EXP 21
2164: PUSH
2165: LD_EXP 22
2169: PUSH
2170: LD_EXP 23
2174: PUSH
2175: LD_EXP 24
2179: PUSH
2180: LD_EXP 25
2184: PUSH
2185: LD_EXP 26
2189: PUSH
2190: LD_EXP 27
2194: PUSH
2195: LD_EXP 28
2199: PUSH
2200: LD_EXP 29
2204: PUSH
2205: LD_EXP 31
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: DIFF
2226: ST_TO_ADDR
// end ;
2227: LD_VAR 0 2
2231: RET
// export function SayRand ( sex , dial ) ; begin
2232: LD_INT 0
2234: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 26
2252: PUSH
2253: LD_VAR 0 1
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: LD_INT 2
2264: PUSH
2265: LD_INT 25
2267: PUSH
2268: LD_INT 1
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: PUSH
2275: LD_INT 25
2277: PUSH
2278: LD_INT 2
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 25
2297: PUSH
2298: LD_INT 4
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: LIST
2316: PPUSH
2317: CALL_OW 69
2321: PUSH
2322: LD_EXP 18
2326: PUSH
2327: LD_EXP 30
2331: PUSH
2332: LD_EXP 19
2336: PUSH
2337: LD_EXP 20
2341: PUSH
2342: LD_EXP 21
2346: PUSH
2347: LD_EXP 22
2351: PUSH
2352: LD_EXP 23
2356: PUSH
2357: LD_EXP 24
2361: PUSH
2362: LD_EXP 25
2366: PUSH
2367: LD_EXP 26
2371: PUSH
2372: LD_EXP 27
2376: PUSH
2377: LD_EXP 28
2381: PUSH
2382: LD_EXP 29
2386: PUSH
2387: LD_EXP 31
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: DIFF
2408: ST_TO_ADDR
// if not result then
2409: LD_VAR 0 3
2413: NOT
2414: IFFALSE 2418
// exit ;
2416: GO 2446
// result := result [ 1 ] ;
2418: LD_ADDR_VAR 0 3
2422: PUSH
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 1
2430: ARRAY
2431: ST_TO_ADDR
// Say ( result , dial ) ;
2432: LD_VAR 0 3
2436: PPUSH
2437: LD_VAR 0 2
2441: PPUSH
2442: CALL_OW 88
// end ;
2446: LD_VAR 0 3
2450: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2451: LD_INT 0
2453: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2454: LD_ADDR_VAR 0 4
2458: PUSH
2459: LD_INT 22
2461: PUSH
2462: LD_INT 1
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: LD_INT 26
2471: PUSH
2472: LD_VAR 0 1
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PUSH
2481: LD_INT 2
2483: PUSH
2484: LD_INT 25
2486: PUSH
2487: LD_INT 1
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: PUSH
2494: LD_INT 25
2496: PUSH
2497: LD_INT 2
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 25
2506: PUSH
2507: LD_INT 3
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 25
2516: PUSH
2517: LD_INT 4
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: LIST
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 69
2540: PUSH
2541: LD_EXP 18
2545: PUSH
2546: LD_EXP 30
2550: PUSH
2551: LD_EXP 19
2555: PUSH
2556: LD_EXP 20
2560: PUSH
2561: LD_EXP 21
2565: PUSH
2566: LD_EXP 22
2570: PUSH
2571: LD_EXP 23
2575: PUSH
2576: LD_EXP 24
2580: PUSH
2581: LD_EXP 25
2585: PUSH
2586: LD_EXP 26
2590: PUSH
2591: LD_EXP 27
2595: PUSH
2596: LD_EXP 28
2600: PUSH
2601: LD_EXP 29
2605: PUSH
2606: LD_EXP 31
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: LIST
2615: LIST
2616: LIST
2617: LIST
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: LIST
2626: PUSH
2627: LD_VAR 0 3
2631: ADD
2632: DIFF
2633: ST_TO_ADDR
// if not result then
2634: LD_VAR 0 4
2638: NOT
2639: IFFALSE 2643
// exit ;
2641: GO 2671
// result := result [ 1 ] ;
2643: LD_ADDR_VAR 0 4
2647: PUSH
2648: LD_VAR 0 4
2652: PUSH
2653: LD_INT 1
2655: ARRAY
2656: ST_TO_ADDR
// Say ( result , dial ) ;
2657: LD_VAR 0 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 88
// end ;
2671: LD_VAR 0 4
2675: RET
// export function WantPlant ( unit ) ; var task ; begin
2676: LD_INT 0
2678: PPUSH
2679: PPUSH
// result := false ;
2680: LD_ADDR_VAR 0 2
2684: PUSH
2685: LD_INT 0
2687: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2688: LD_ADDR_VAR 0 3
2692: PUSH
2693: LD_VAR 0 1
2697: PPUSH
2698: CALL_OW 437
2702: ST_TO_ADDR
// if task then
2703: LD_VAR 0 3
2707: IFFALSE 2735
// if task [ 1 ] [ 1 ] = p then
2709: LD_VAR 0 3
2713: PUSH
2714: LD_INT 1
2716: ARRAY
2717: PUSH
2718: LD_INT 1
2720: ARRAY
2721: PUSH
2722: LD_STRING p
2724: EQUAL
2725: IFFALSE 2735
// result := true ;
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
// end ;
2735: LD_VAR 0 2
2739: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2740: LD_INT 0
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// if pos < 1 then
2746: LD_VAR 0 2
2750: PUSH
2751: LD_INT 1
2753: LESS
2754: IFFALSE 2758
// exit ;
2756: GO 3061
// if pos = 1 then
2758: LD_VAR 0 2
2762: PUSH
2763: LD_INT 1
2765: EQUAL
2766: IFFALSE 2799
// result := Replace ( arr , pos [ 1 ] , value ) else
2768: LD_ADDR_VAR 0 4
2772: PUSH
2773: LD_VAR 0 1
2777: PPUSH
2778: LD_VAR 0 2
2782: PUSH
2783: LD_INT 1
2785: ARRAY
2786: PPUSH
2787: LD_VAR 0 3
2791: PPUSH
2792: CALL_OW 1
2796: ST_TO_ADDR
2797: GO 3061
// begin tmp := arr ;
2799: LD_ADDR_VAR 0 6
2803: PUSH
2804: LD_VAR 0 1
2808: ST_TO_ADDR
// s_arr := [ tmp ] ;
2809: LD_ADDR_VAR 0 7
2813: PUSH
2814: LD_VAR 0 6
2818: PUSH
2819: EMPTY
2820: LIST
2821: ST_TO_ADDR
// for i = 1 to pos - 1 do
2822: LD_ADDR_VAR 0 5
2826: PUSH
2827: DOUBLE
2828: LD_INT 1
2830: DEC
2831: ST_TO_ADDR
2832: LD_VAR 0 2
2836: PUSH
2837: LD_INT 1
2839: MINUS
2840: PUSH
2841: FOR_TO
2842: IFFALSE 2887
// begin tmp := tmp [ pos [ i ] ] ;
2844: LD_ADDR_VAR 0 6
2848: PUSH
2849: LD_VAR 0 6
2853: PUSH
2854: LD_VAR 0 2
2858: PUSH
2859: LD_VAR 0 5
2863: ARRAY
2864: ARRAY
2865: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2866: LD_ADDR_VAR 0 7
2870: PUSH
2871: LD_VAR 0 7
2875: PUSH
2876: LD_VAR 0 6
2880: PUSH
2881: EMPTY
2882: LIST
2883: ADD
2884: ST_TO_ADDR
// end ;
2885: GO 2841
2887: POP
2888: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2889: LD_ADDR_VAR 0 6
2893: PUSH
2894: LD_VAR 0 6
2898: PPUSH
2899: LD_VAR 0 2
2903: PUSH
2904: LD_VAR 0 2
2908: ARRAY
2909: PPUSH
2910: LD_VAR 0 3
2914: PPUSH
2915: CALL_OW 1
2919: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2920: LD_ADDR_VAR 0 7
2924: PUSH
2925: LD_VAR 0 7
2929: PPUSH
2930: LD_VAR 0 7
2934: PPUSH
2935: LD_VAR 0 6
2939: PPUSH
2940: CALL_OW 1
2944: ST_TO_ADDR
// for i = s_arr downto 2 do
2945: LD_ADDR_VAR 0 5
2949: PUSH
2950: DOUBLE
2951: LD_VAR 0 7
2955: INC
2956: ST_TO_ADDR
2957: LD_INT 2
2959: PUSH
2960: FOR_DOWNTO
2961: IFFALSE 3045
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2963: LD_ADDR_VAR 0 6
2967: PUSH
2968: LD_VAR 0 7
2972: PUSH
2973: LD_VAR 0 5
2977: PUSH
2978: LD_INT 1
2980: MINUS
2981: ARRAY
2982: PPUSH
2983: LD_VAR 0 2
2987: PUSH
2988: LD_VAR 0 5
2992: PUSH
2993: LD_INT 1
2995: MINUS
2996: ARRAY
2997: PPUSH
2998: LD_VAR 0 7
3002: PUSH
3003: LD_VAR 0 5
3007: ARRAY
3008: PPUSH
3009: CALL_OW 1
3013: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3014: LD_ADDR_VAR 0 7
3018: PUSH
3019: LD_VAR 0 7
3023: PPUSH
3024: LD_VAR 0 5
3028: PUSH
3029: LD_INT 1
3031: MINUS
3032: PPUSH
3033: LD_VAR 0 6
3037: PPUSH
3038: CALL_OW 1
3042: ST_TO_ADDR
// end ;
3043: GO 2960
3045: POP
3046: POP
// result := s_arr [ 1 ] ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: LD_VAR 0 7
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: ST_TO_ADDR
// end ; end ;
3061: LD_VAR 0 4
3065: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3066: LD_INT 0
3068: PPUSH
3069: PPUSH
// if not list then
3070: LD_VAR 0 1
3074: NOT
3075: IFFALSE 3079
// exit ;
3077: GO 3170
// i := list [ pos1 ] ;
3079: LD_ADDR_VAR 0 5
3083: PUSH
3084: LD_VAR 0 1
3088: PUSH
3089: LD_VAR 0 2
3093: ARRAY
3094: ST_TO_ADDR
// if not i then
3095: LD_VAR 0 5
3099: NOT
3100: IFFALSE 3104
// exit ;
3102: GO 3170
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3104: LD_ADDR_VAR 0 1
3108: PUSH
3109: LD_VAR 0 1
3113: PPUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_VAR 0 1
3123: PUSH
3124: LD_VAR 0 3
3128: ARRAY
3129: PPUSH
3130: CALL_OW 1
3134: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_VAR 0 1
3144: PPUSH
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_VAR 0 5
3154: PPUSH
3155: CALL_OW 1
3159: ST_TO_ADDR
// result := list ;
3160: LD_ADDR_VAR 0 4
3164: PUSH
3165: LD_VAR 0 1
3169: ST_TO_ADDR
// end ;
3170: LD_VAR 0 4
3174: RET
// export function Add ( list , pos , val ) ; begin
3175: LD_INT 0
3177: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3178: LD_ADDR_VAR 0 4
3182: PUSH
3183: LD_VAR 0 1
3187: PPUSH
3188: LD_VAR 0 2
3192: PPUSH
3193: LD_VAR 0 3
3197: PPUSH
3198: CALL 2740 0 3
3202: ST_TO_ADDR
3203: LD_VAR 0 4
3207: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3208: LD_INT 0
3210: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3211: LD_ADDR_VAR 0 5
3215: PUSH
3216: LD_VAR 0 1
3220: PPUSH
3221: CALL_OW 250
3225: PPUSH
3226: LD_VAR 0 1
3230: PPUSH
3231: CALL_OW 251
3235: PPUSH
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_VAR 0 3
3245: PPUSH
3246: LD_VAR 0 4
3250: PPUSH
3251: CALL 3261 0 5
3255: ST_TO_ADDR
// end ;
3256: LD_VAR 0 5
3260: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3261: LD_INT 0
3263: PPUSH
3264: PPUSH
3265: PPUSH
3266: PPUSH
// if not list then
3267: LD_VAR 0 3
3271: NOT
3272: IFFALSE 3276
// exit ;
3274: GO 3664
// result := [ ] ;
3276: LD_ADDR_VAR 0 6
3280: PUSH
3281: EMPTY
3282: ST_TO_ADDR
// for i in list do
3283: LD_ADDR_VAR 0 7
3287: PUSH
3288: LD_VAR 0 3
3292: PUSH
3293: FOR_IN
3294: IFFALSE 3496
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3296: LD_ADDR_VAR 0 9
3300: PUSH
3301: LD_VAR 0 7
3305: PPUSH
3306: LD_VAR 0 1
3310: PPUSH
3311: LD_VAR 0 2
3315: PPUSH
3316: CALL_OW 297
3320: ST_TO_ADDR
// if not result then
3321: LD_VAR 0 6
3325: NOT
3326: IFFALSE 3352
// result := [ [ i , tmp ] ] else
3328: LD_ADDR_VAR 0 6
3332: PUSH
3333: LD_VAR 0 7
3337: PUSH
3338: LD_VAR 0 9
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: EMPTY
3348: LIST
3349: ST_TO_ADDR
3350: GO 3494
// begin if result [ result ] [ 2 ] < tmp then
3352: LD_VAR 0 6
3356: PUSH
3357: LD_VAR 0 6
3361: ARRAY
3362: PUSH
3363: LD_INT 2
3365: ARRAY
3366: PUSH
3367: LD_VAR 0 9
3371: LESS
3372: IFFALSE 3414
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3374: LD_ADDR_VAR 0 6
3378: PUSH
3379: LD_VAR 0 6
3383: PPUSH
3384: LD_VAR 0 6
3388: PUSH
3389: LD_INT 1
3391: PLUS
3392: PPUSH
3393: LD_VAR 0 7
3397: PUSH
3398: LD_VAR 0 9
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: PPUSH
3407: CALL_OW 2
3411: ST_TO_ADDR
3412: GO 3494
// for j = 1 to result do
3414: LD_ADDR_VAR 0 8
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_VAR 0 6
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3492
// begin if tmp < result [ j ] [ 2 ] then
3432: LD_VAR 0 9
3436: PUSH
3437: LD_VAR 0 6
3441: PUSH
3442: LD_VAR 0 8
3446: ARRAY
3447: PUSH
3448: LD_INT 2
3450: ARRAY
3451: LESS
3452: IFFALSE 3490
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3454: LD_ADDR_VAR 0 6
3458: PUSH
3459: LD_VAR 0 6
3463: PPUSH
3464: LD_VAR 0 8
3468: PPUSH
3469: LD_VAR 0 7
3473: PUSH
3474: LD_VAR 0 9
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PPUSH
3483: CALL_OW 2
3487: ST_TO_ADDR
// break ;
3488: GO 3492
// end ; end ;
3490: GO 3429
3492: POP
3493: POP
// end ; end ;
3494: GO 3293
3496: POP
3497: POP
// if result and not asc then
3498: LD_VAR 0 6
3502: PUSH
3503: LD_VAR 0 4
3507: NOT
3508: AND
3509: IFFALSE 3584
// begin tmp := result ;
3511: LD_ADDR_VAR 0 9
3515: PUSH
3516: LD_VAR 0 6
3520: ST_TO_ADDR
// for i = tmp downto 1 do
3521: LD_ADDR_VAR 0 7
3525: PUSH
3526: DOUBLE
3527: LD_VAR 0 9
3531: INC
3532: ST_TO_ADDR
3533: LD_INT 1
3535: PUSH
3536: FOR_DOWNTO
3537: IFFALSE 3582
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3539: LD_ADDR_VAR 0 6
3543: PUSH
3544: LD_VAR 0 6
3548: PPUSH
3549: LD_VAR 0 9
3553: PUSH
3554: LD_VAR 0 7
3558: MINUS
3559: PUSH
3560: LD_INT 1
3562: PLUS
3563: PPUSH
3564: LD_VAR 0 9
3568: PUSH
3569: LD_VAR 0 7
3573: ARRAY
3574: PPUSH
3575: CALL_OW 1
3579: ST_TO_ADDR
3580: GO 3536
3582: POP
3583: POP
// end ; tmp := [ ] ;
3584: LD_ADDR_VAR 0 9
3588: PUSH
3589: EMPTY
3590: ST_TO_ADDR
// if mode then
3591: LD_VAR 0 5
3595: IFFALSE 3664
// begin for i = 1 to result do
3597: LD_ADDR_VAR 0 7
3601: PUSH
3602: DOUBLE
3603: LD_INT 1
3605: DEC
3606: ST_TO_ADDR
3607: LD_VAR 0 6
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3652
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3615: LD_ADDR_VAR 0 9
3619: PUSH
3620: LD_VAR 0 9
3624: PPUSH
3625: LD_VAR 0 7
3629: PPUSH
3630: LD_VAR 0 6
3634: PUSH
3635: LD_VAR 0 7
3639: ARRAY
3640: PUSH
3641: LD_INT 1
3643: ARRAY
3644: PPUSH
3645: CALL_OW 1
3649: ST_TO_ADDR
3650: GO 3612
3652: POP
3653: POP
// result := tmp ;
3654: LD_ADDR_VAR 0 6
3658: PUSH
3659: LD_VAR 0 9
3663: ST_TO_ADDR
// end ; end ;
3664: LD_VAR 0 6
3668: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3669: LD_INT 0
3671: PPUSH
3672: PPUSH
3673: PPUSH
3674: PPUSH
3675: PPUSH
3676: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3677: LD_ADDR_VAR 0 5
3681: PUSH
3682: LD_INT 0
3684: PUSH
3685: LD_INT 0
3687: PUSH
3688: LD_INT 0
3690: PUSH
3691: EMPTY
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: ST_TO_ADDR
// if not x or not y then
3699: LD_VAR 0 2
3703: NOT
3704: PUSH
3705: LD_VAR 0 3
3709: NOT
3710: OR
3711: IFFALSE 3715
// exit ;
3713: GO 5343
// if not range then
3715: LD_VAR 0 4
3719: NOT
3720: IFFALSE 3730
// range := 10 ;
3722: LD_ADDR_VAR 0 4
3726: PUSH
3727: LD_INT 10
3729: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3730: LD_ADDR_VAR 0 8
3734: PUSH
3735: LD_INT 81
3737: PUSH
3738: LD_VAR 0 1
3742: PUSH
3743: EMPTY
3744: LIST
3745: LIST
3746: PUSH
3747: LD_INT 92
3749: PUSH
3750: LD_VAR 0 2
3754: PUSH
3755: LD_VAR 0 3
3759: PUSH
3760: LD_VAR 0 4
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: ST_TO_ADDR
// if not tmp then
3780: LD_VAR 0 8
3784: NOT
3785: IFFALSE 3789
// exit ;
3787: GO 5343
// for i in tmp do
3789: LD_ADDR_VAR 0 6
3793: PUSH
3794: LD_VAR 0 8
3798: PUSH
3799: FOR_IN
3800: IFFALSE 5318
// begin points := [ 0 , 0 , 0 ] ;
3802: LD_ADDR_VAR 0 9
3806: PUSH
3807: LD_INT 0
3809: PUSH
3810: LD_INT 0
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: LIST
3820: ST_TO_ADDR
// bpoints := 1 ;
3821: LD_ADDR_VAR 0 10
3825: PUSH
3826: LD_INT 1
3828: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3829: LD_VAR 0 6
3833: PPUSH
3834: CALL_OW 247
3838: PUSH
3839: LD_INT 1
3841: DOUBLE
3842: EQUAL
3843: IFTRUE 3847
3845: GO 4425
3847: POP
// begin if GetClass ( i ) = 1 then
3848: LD_VAR 0 6
3852: PPUSH
3853: CALL_OW 257
3857: PUSH
3858: LD_INT 1
3860: EQUAL
3861: IFFALSE 3882
// points := [ 10 , 5 , 3 ] ;
3863: LD_ADDR_VAR 0 9
3867: PUSH
3868: LD_INT 10
3870: PUSH
3871: LD_INT 5
3873: PUSH
3874: LD_INT 3
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3882: LD_VAR 0 6
3886: PPUSH
3887: CALL_OW 257
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: LD_INT 4
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: LIST
3905: IN
3906: IFFALSE 3927
// points := [ 3 , 2 , 1 ] ;
3908: LD_ADDR_VAR 0 9
3912: PUSH
3913: LD_INT 3
3915: PUSH
3916: LD_INT 2
3918: PUSH
3919: LD_INT 1
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3927: LD_VAR 0 6
3931: PPUSH
3932: CALL_OW 257
3936: PUSH
3937: LD_INT 5
3939: EQUAL
3940: IFFALSE 3961
// points := [ 130 , 5 , 2 ] ;
3942: LD_ADDR_VAR 0 9
3946: PUSH
3947: LD_INT 130
3949: PUSH
3950: LD_INT 5
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: LIST
3960: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3961: LD_VAR 0 6
3965: PPUSH
3966: CALL_OW 257
3970: PUSH
3971: LD_INT 8
3973: EQUAL
3974: IFFALSE 3995
// points := [ 35 , 35 , 30 ] ;
3976: LD_ADDR_VAR 0 9
3980: PUSH
3981: LD_INT 35
3983: PUSH
3984: LD_INT 35
3986: PUSH
3987: LD_INT 30
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: LIST
3994: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3995: LD_VAR 0 6
3999: PPUSH
4000: CALL_OW 257
4004: PUSH
4005: LD_INT 9
4007: EQUAL
4008: IFFALSE 4029
// points := [ 20 , 55 , 40 ] ;
4010: LD_ADDR_VAR 0 9
4014: PUSH
4015: LD_INT 20
4017: PUSH
4018: LD_INT 55
4020: PUSH
4021: LD_INT 40
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: LIST
4028: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4029: LD_VAR 0 6
4033: PPUSH
4034: CALL_OW 257
4038: PUSH
4039: LD_INT 12
4041: PUSH
4042: LD_INT 16
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: IN
4049: IFFALSE 4070
// points := [ 5 , 3 , 2 ] ;
4051: LD_ADDR_VAR 0 9
4055: PUSH
4056: LD_INT 5
4058: PUSH
4059: LD_INT 3
4061: PUSH
4062: LD_INT 2
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4070: LD_VAR 0 6
4074: PPUSH
4075: CALL_OW 257
4079: PUSH
4080: LD_INT 17
4082: EQUAL
4083: IFFALSE 4104
// points := [ 100 , 50 , 75 ] ;
4085: LD_ADDR_VAR 0 9
4089: PUSH
4090: LD_INT 100
4092: PUSH
4093: LD_INT 50
4095: PUSH
4096: LD_INT 75
4098: PUSH
4099: EMPTY
4100: LIST
4101: LIST
4102: LIST
4103: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4104: LD_VAR 0 6
4108: PPUSH
4109: CALL_OW 257
4113: PUSH
4114: LD_INT 15
4116: EQUAL
4117: IFFALSE 4138
// points := [ 10 , 5 , 3 ] ;
4119: LD_ADDR_VAR 0 9
4123: PUSH
4124: LD_INT 10
4126: PUSH
4127: LD_INT 5
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: EMPTY
4134: LIST
4135: LIST
4136: LIST
4137: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4138: LD_VAR 0 6
4142: PPUSH
4143: CALL_OW 257
4147: PUSH
4148: LD_INT 14
4150: EQUAL
4151: IFFALSE 4172
// points := [ 10 , 0 , 0 ] ;
4153: LD_ADDR_VAR 0 9
4157: PUSH
4158: LD_INT 10
4160: PUSH
4161: LD_INT 0
4163: PUSH
4164: LD_INT 0
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4172: LD_VAR 0 6
4176: PPUSH
4177: CALL_OW 257
4181: PUSH
4182: LD_INT 11
4184: EQUAL
4185: IFFALSE 4206
// points := [ 30 , 10 , 5 ] ;
4187: LD_ADDR_VAR 0 9
4191: PUSH
4192: LD_INT 30
4194: PUSH
4195: LD_INT 10
4197: PUSH
4198: LD_INT 5
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4206: LD_VAR 0 1
4210: PPUSH
4211: LD_INT 5
4213: PPUSH
4214: CALL_OW 321
4218: PUSH
4219: LD_INT 2
4221: EQUAL
4222: IFFALSE 4239
// bpoints := bpoints * 1.8 ;
4224: LD_ADDR_VAR 0 10
4228: PUSH
4229: LD_VAR 0 10
4233: PUSH
4234: LD_REAL  1.80000000000000E+0000
4237: MUL
4238: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4239: LD_VAR 0 6
4243: PPUSH
4244: CALL_OW 257
4248: PUSH
4249: LD_INT 1
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: LD_INT 3
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: IN
4267: PUSH
4268: LD_VAR 0 1
4272: PPUSH
4273: LD_INT 51
4275: PPUSH
4276: CALL_OW 321
4280: PUSH
4281: LD_INT 2
4283: EQUAL
4284: AND
4285: IFFALSE 4302
// bpoints := bpoints * 1.2 ;
4287: LD_ADDR_VAR 0 10
4291: PUSH
4292: LD_VAR 0 10
4296: PUSH
4297: LD_REAL  1.20000000000000E+0000
4300: MUL
4301: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4302: LD_VAR 0 6
4306: PPUSH
4307: CALL_OW 257
4311: PUSH
4312: LD_INT 5
4314: PUSH
4315: LD_INT 7
4317: PUSH
4318: LD_INT 9
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: IN
4326: PUSH
4327: LD_VAR 0 1
4331: PPUSH
4332: LD_INT 52
4334: PPUSH
4335: CALL_OW 321
4339: PUSH
4340: LD_INT 2
4342: EQUAL
4343: AND
4344: IFFALSE 4361
// bpoints := bpoints * 1.5 ;
4346: LD_ADDR_VAR 0 10
4350: PUSH
4351: LD_VAR 0 10
4355: PUSH
4356: LD_REAL  1.50000000000000E+0000
4359: MUL
4360: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4361: LD_VAR 0 1
4365: PPUSH
4366: LD_INT 66
4368: PPUSH
4369: CALL_OW 321
4373: PUSH
4374: LD_INT 2
4376: EQUAL
4377: IFFALSE 4394
// bpoints := bpoints * 1.1 ;
4379: LD_ADDR_VAR 0 10
4383: PUSH
4384: LD_VAR 0 10
4388: PUSH
4389: LD_REAL  1.10000000000000E+0000
4392: MUL
4393: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4394: LD_ADDR_VAR 0 10
4398: PUSH
4399: LD_VAR 0 10
4403: PUSH
4404: LD_VAR 0 6
4408: PPUSH
4409: LD_INT 1
4411: PPUSH
4412: CALL_OW 259
4416: PUSH
4417: LD_REAL  1.15000000000000E+0000
4420: MUL
4421: MUL
4422: ST_TO_ADDR
// end ; unit_vehicle :
4423: GO 5247
4425: LD_INT 2
4427: DOUBLE
4428: EQUAL
4429: IFTRUE 4433
4431: GO 5235
4433: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4434: LD_VAR 0 6
4438: PPUSH
4439: CALL_OW 264
4443: PUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 42
4449: PUSH
4450: LD_INT 24
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: IN
4458: IFFALSE 4479
// points := [ 25 , 5 , 3 ] ;
4460: LD_ADDR_VAR 0 9
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 5
4470: PUSH
4471: LD_INT 3
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4479: LD_VAR 0 6
4483: PPUSH
4484: CALL_OW 264
4488: PUSH
4489: LD_INT 4
4491: PUSH
4492: LD_INT 43
4494: PUSH
4495: LD_INT 25
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: IN
4503: IFFALSE 4524
// points := [ 40 , 15 , 5 ] ;
4505: LD_ADDR_VAR 0 9
4509: PUSH
4510: LD_INT 40
4512: PUSH
4513: LD_INT 15
4515: PUSH
4516: LD_INT 5
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4524: LD_VAR 0 6
4528: PPUSH
4529: CALL_OW 264
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: LD_INT 23
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: IN
4544: IFFALSE 4565
// points := [ 7 , 25 , 8 ] ;
4546: LD_ADDR_VAR 0 9
4550: PUSH
4551: LD_INT 7
4553: PUSH
4554: LD_INT 25
4556: PUSH
4557: LD_INT 8
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4565: LD_VAR 0 6
4569: PPUSH
4570: CALL_OW 264
4574: PUSH
4575: LD_INT 5
4577: PUSH
4578: LD_INT 27
4580: PUSH
4581: LD_INT 44
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: IN
4589: IFFALSE 4610
// points := [ 14 , 50 , 16 ] ;
4591: LD_ADDR_VAR 0 9
4595: PUSH
4596: LD_INT 14
4598: PUSH
4599: LD_INT 50
4601: PUSH
4602: LD_INT 16
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4610: LD_VAR 0 6
4614: PPUSH
4615: CALL_OW 264
4619: PUSH
4620: LD_INT 6
4622: PUSH
4623: LD_INT 46
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: IN
4630: IFFALSE 4651
// points := [ 32 , 120 , 70 ] ;
4632: LD_ADDR_VAR 0 9
4636: PUSH
4637: LD_INT 32
4639: PUSH
4640: LD_INT 120
4642: PUSH
4643: LD_INT 70
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: LIST
4650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4651: LD_VAR 0 6
4655: PPUSH
4656: CALL_OW 264
4660: PUSH
4661: LD_INT 7
4663: PUSH
4664: LD_INT 28
4666: PUSH
4667: LD_INT 45
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: LIST
4674: IN
4675: IFFALSE 4696
// points := [ 35 , 20 , 45 ] ;
4677: LD_ADDR_VAR 0 9
4681: PUSH
4682: LD_INT 35
4684: PUSH
4685: LD_INT 20
4687: PUSH
4688: LD_INT 45
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: LIST
4695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4696: LD_VAR 0 6
4700: PPUSH
4701: CALL_OW 264
4705: PUSH
4706: LD_INT 47
4708: PUSH
4709: EMPTY
4710: LIST
4711: IN
4712: IFFALSE 4733
// points := [ 67 , 45 , 75 ] ;
4714: LD_ADDR_VAR 0 9
4718: PUSH
4719: LD_INT 67
4721: PUSH
4722: LD_INT 45
4724: PUSH
4725: LD_INT 75
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4733: LD_VAR 0 6
4737: PPUSH
4738: CALL_OW 264
4742: PUSH
4743: LD_INT 26
4745: PUSH
4746: EMPTY
4747: LIST
4748: IN
4749: IFFALSE 4770
// points := [ 120 , 30 , 80 ] ;
4751: LD_ADDR_VAR 0 9
4755: PUSH
4756: LD_INT 120
4758: PUSH
4759: LD_INT 30
4761: PUSH
4762: LD_INT 80
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: LIST
4769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4770: LD_VAR 0 6
4774: PPUSH
4775: CALL_OW 264
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: EMPTY
4784: LIST
4785: IN
4786: IFFALSE 4807
// points := [ 40 , 1 , 1 ] ;
4788: LD_ADDR_VAR 0 9
4792: PUSH
4793: LD_INT 40
4795: PUSH
4796: LD_INT 1
4798: PUSH
4799: LD_INT 1
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4807: LD_VAR 0 6
4811: PPUSH
4812: CALL_OW 264
4816: PUSH
4817: LD_INT 29
4819: PUSH
4820: EMPTY
4821: LIST
4822: IN
4823: IFFALSE 4844
// points := [ 70 , 200 , 400 ] ;
4825: LD_ADDR_VAR 0 9
4829: PUSH
4830: LD_INT 70
4832: PUSH
4833: LD_INT 200
4835: PUSH
4836: LD_INT 400
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4844: LD_VAR 0 6
4848: PPUSH
4849: CALL_OW 264
4853: PUSH
4854: LD_INT 14
4856: PUSH
4857: LD_INT 53
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: IN
4864: IFFALSE 4885
// points := [ 40 , 10 , 20 ] ;
4866: LD_ADDR_VAR 0 9
4870: PUSH
4871: LD_INT 40
4873: PUSH
4874: LD_INT 10
4876: PUSH
4877: LD_INT 20
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: LIST
4884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4885: LD_VAR 0 6
4889: PPUSH
4890: CALL_OW 264
4894: PUSH
4895: LD_INT 9
4897: PUSH
4898: EMPTY
4899: LIST
4900: IN
4901: IFFALSE 4922
// points := [ 5 , 70 , 20 ] ;
4903: LD_ADDR_VAR 0 9
4907: PUSH
4908: LD_INT 5
4910: PUSH
4911: LD_INT 70
4913: PUSH
4914: LD_INT 20
4916: PUSH
4917: EMPTY
4918: LIST
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4922: LD_VAR 0 6
4926: PPUSH
4927: CALL_OW 264
4931: PUSH
4932: LD_INT 10
4934: PUSH
4935: EMPTY
4936: LIST
4937: IN
4938: IFFALSE 4959
// points := [ 35 , 110 , 70 ] ;
4940: LD_ADDR_VAR 0 9
4944: PUSH
4945: LD_INT 35
4947: PUSH
4948: LD_INT 110
4950: PUSH
4951: LD_INT 70
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4959: LD_VAR 0 6
4963: PPUSH
4964: CALL_OW 265
4968: PUSH
4969: LD_INT 25
4971: EQUAL
4972: IFFALSE 4993
// points := [ 80 , 65 , 100 ] ;
4974: LD_ADDR_VAR 0 9
4978: PUSH
4979: LD_INT 80
4981: PUSH
4982: LD_INT 65
4984: PUSH
4985: LD_INT 100
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: LIST
4992: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4993: LD_VAR 0 6
4997: PPUSH
4998: CALL_OW 263
5002: PUSH
5003: LD_INT 1
5005: EQUAL
5006: IFFALSE 5041
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5008: LD_ADDR_VAR 0 10
5012: PUSH
5013: LD_VAR 0 10
5017: PUSH
5018: LD_VAR 0 6
5022: PPUSH
5023: CALL_OW 311
5027: PPUSH
5028: LD_INT 3
5030: PPUSH
5031: CALL_OW 259
5035: PUSH
5036: LD_INT 4
5038: MUL
5039: MUL
5040: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5041: LD_VAR 0 6
5045: PPUSH
5046: CALL_OW 263
5050: PUSH
5051: LD_INT 2
5053: EQUAL
5054: IFFALSE 5105
// begin j := IsControledBy ( i ) ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 6
5065: PPUSH
5066: CALL_OW 312
5070: ST_TO_ADDR
// if j then
5071: LD_VAR 0 7
5075: IFFALSE 5105
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5077: LD_ADDR_VAR 0 10
5081: PUSH
5082: LD_VAR 0 10
5086: PUSH
5087: LD_VAR 0 7
5091: PPUSH
5092: LD_INT 3
5094: PPUSH
5095: CALL_OW 259
5099: PUSH
5100: LD_INT 3
5102: MUL
5103: MUL
5104: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5105: LD_VAR 0 6
5109: PPUSH
5110: CALL_OW 264
5114: PUSH
5115: LD_INT 5
5117: PUSH
5118: LD_INT 6
5120: PUSH
5121: LD_INT 46
5123: PUSH
5124: LD_INT 44
5126: PUSH
5127: LD_INT 47
5129: PUSH
5130: LD_INT 45
5132: PUSH
5133: LD_INT 28
5135: PUSH
5136: LD_INT 7
5138: PUSH
5139: LD_INT 27
5141: PUSH
5142: LD_INT 29
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: IN
5157: PUSH
5158: LD_VAR 0 1
5162: PPUSH
5163: LD_INT 52
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: EQUAL
5174: AND
5175: IFFALSE 5192
// bpoints := bpoints * 1.2 ;
5177: LD_ADDR_VAR 0 10
5181: PUSH
5182: LD_VAR 0 10
5186: PUSH
5187: LD_REAL  1.20000000000000E+0000
5190: MUL
5191: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5192: LD_VAR 0 6
5196: PPUSH
5197: CALL_OW 264
5201: PUSH
5202: LD_INT 6
5204: PUSH
5205: LD_INT 46
5207: PUSH
5208: LD_INT 47
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: IN
5216: IFFALSE 5233
// bpoints := bpoints * 1.2 ;
5218: LD_ADDR_VAR 0 10
5222: PUSH
5223: LD_VAR 0 10
5227: PUSH
5228: LD_REAL  1.20000000000000E+0000
5231: MUL
5232: ST_TO_ADDR
// end ; unit_building :
5233: GO 5247
5235: LD_INT 3
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5243
5241: GO 5246
5243: POP
// ; end ;
5244: GO 5247
5246: POP
// for j = 1 to 3 do
5247: LD_ADDR_VAR 0 7
5251: PUSH
5252: DOUBLE
5253: LD_INT 1
5255: DEC
5256: ST_TO_ADDR
5257: LD_INT 3
5259: PUSH
5260: FOR_TO
5261: IFFALSE 5314
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5263: LD_ADDR_VAR 0 5
5267: PUSH
5268: LD_VAR 0 5
5272: PPUSH
5273: LD_VAR 0 7
5277: PPUSH
5278: LD_VAR 0 5
5282: PUSH
5283: LD_VAR 0 7
5287: ARRAY
5288: PUSH
5289: LD_VAR 0 9
5293: PUSH
5294: LD_VAR 0 7
5298: ARRAY
5299: PUSH
5300: LD_VAR 0 10
5304: MUL
5305: PLUS
5306: PPUSH
5307: CALL_OW 1
5311: ST_TO_ADDR
5312: GO 5260
5314: POP
5315: POP
// end ;
5316: GO 3799
5318: POP
5319: POP
// result := Replace ( result , 4 , tmp ) ;
5320: LD_ADDR_VAR 0 5
5324: PUSH
5325: LD_VAR 0 5
5329: PPUSH
5330: LD_INT 4
5332: PPUSH
5333: LD_VAR 0 8
5337: PPUSH
5338: CALL_OW 1
5342: ST_TO_ADDR
// end ;
5343: LD_VAR 0 5
5347: RET
// export function DangerAtRange ( unit , range ) ; begin
5348: LD_INT 0
5350: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5351: LD_ADDR_VAR 0 3
5355: PUSH
5356: LD_VAR 0 1
5360: PPUSH
5361: CALL_OW 255
5365: PPUSH
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL_OW 250
5375: PPUSH
5376: LD_VAR 0 1
5380: PPUSH
5381: CALL_OW 251
5385: PPUSH
5386: LD_VAR 0 2
5390: PPUSH
5391: CALL 3669 0 4
5395: ST_TO_ADDR
// end ;
5396: LD_VAR 0 3
5400: RET
// export function IsExtension ( b ) ; begin
5401: LD_INT 0
5403: PPUSH
// result := false ;
5404: LD_ADDR_VAR 0 2
5408: PUSH
5409: LD_INT 0
5411: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5412: LD_VAR 0 1
5416: PPUSH
5417: CALL_OW 266
5421: PUSH
5422: LD_INT 23
5424: PUSH
5425: LD_INT 20
5427: PUSH
5428: LD_INT 22
5430: PUSH
5431: LD_INT 17
5433: PUSH
5434: LD_INT 24
5436: PUSH
5437: LD_INT 21
5439: PUSH
5440: LD_INT 19
5442: PUSH
5443: LD_INT 16
5445: PUSH
5446: LD_INT 25
5448: PUSH
5449: LD_INT 18
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: IN
5464: IFFALSE 5474
// result := true ;
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// end ;
5474: LD_VAR 0 2
5478: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5479: LD_INT 0
5481: PPUSH
5482: PPUSH
5483: PPUSH
// result := [ ] ;
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: EMPTY
5490: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5491: LD_ADDR_VAR 0 3
5495: PUSH
5496: LD_INT 21
5498: PUSH
5499: LD_INT 3
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 69
5510: ST_TO_ADDR
// if not tmp then
5511: LD_VAR 0 3
5515: NOT
5516: IFFALSE 5520
// exit ;
5518: GO 5570
// for i in tmp do
5520: LD_ADDR_VAR 0 4
5524: PUSH
5525: LD_VAR 0 3
5529: PUSH
5530: FOR_IN
5531: IFFALSE 5568
// if GetBase ( i ) = base then
5533: LD_VAR 0 4
5537: PPUSH
5538: CALL_OW 274
5542: PUSH
5543: LD_VAR 0 1
5547: EQUAL
5548: IFFALSE 5566
// result := result ^ i ;
5550: LD_ADDR_VAR 0 2
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_VAR 0 4
5564: ADD
5565: ST_TO_ADDR
5566: GO 5530
5568: POP
5569: POP
// end ;
5570: LD_VAR 0 2
5574: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5575: LD_INT 0
5577: PPUSH
5578: PPUSH
// if BuildingStatus ( b ) = bs_build then
5579: LD_VAR 0 2
5583: PPUSH
5584: CALL_OW 461
5588: PUSH
5589: LD_INT 1
5591: EQUAL
5592: IFFALSE 5652
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_STRING h
5601: PUSH
5602: LD_VAR 0 2
5606: PPUSH
5607: CALL_OW 250
5611: PUSH
5612: LD_VAR 0 2
5616: PPUSH
5617: CALL_OW 251
5621: PUSH
5622: LD_VAR 0 2
5626: PUSH
5627: LD_INT 0
5629: PUSH
5630: LD_INT 0
5632: PUSH
5633: LD_INT 0
5635: PUSH
5636: EMPTY
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: EMPTY
5646: LIST
5647: PPUSH
5648: CALL_OW 446
// end ;
5652: LD_VAR 0 3
5656: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
5663: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5664: LD_VAR 0 1
5668: NOT
5669: PUSH
5670: LD_VAR 0 1
5674: PPUSH
5675: CALL_OW 263
5679: PUSH
5680: LD_INT 2
5682: EQUAL
5683: NOT
5684: OR
5685: IFFALSE 5689
// exit ;
5687: GO 5961
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_INT 22
5696: PUSH
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL_OW 255
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: LD_INT 2
5713: PUSH
5714: LD_INT 30
5716: PUSH
5717: LD_INT 36
5719: PUSH
5720: EMPTY
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 34
5726: PUSH
5727: LD_INT 31
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PPUSH
5743: CALL_OW 69
5747: ST_TO_ADDR
// if not tmp then
5748: LD_VAR 0 6
5752: NOT
5753: IFFALSE 5757
// exit ;
5755: GO 5961
// result := [ ] ;
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: EMPTY
5763: ST_TO_ADDR
// for i in tmp do
5764: LD_ADDR_VAR 0 3
5768: PUSH
5769: LD_VAR 0 6
5773: PUSH
5774: FOR_IN
5775: IFFALSE 5823
// begin t := UnitsInside ( i ) ;
5777: LD_ADDR_VAR 0 4
5781: PUSH
5782: LD_VAR 0 3
5786: PPUSH
5787: CALL_OW 313
5791: ST_TO_ADDR
// if t then
5792: LD_VAR 0 4
5796: IFFALSE 5821
// result := Insert ( result , 1 , t ) ;
5798: LD_ADDR_VAR 0 2
5802: PUSH
5803: LD_VAR 0 2
5807: PPUSH
5808: LD_INT 1
5810: PPUSH
5811: LD_VAR 0 4
5815: PPUSH
5816: CALL_OW 2
5820: ST_TO_ADDR
// end ;
5821: GO 5774
5823: POP
5824: POP
// if not result then
5825: LD_VAR 0 2
5829: NOT
5830: IFFALSE 5834
// exit ;
5832: GO 5961
// mech := 0 ;
5834: LD_ADDR_VAR 0 5
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// for i in result do
5842: LD_ADDR_VAR 0 3
5846: PUSH
5847: LD_VAR 0 2
5851: PUSH
5852: FOR_IN
5853: IFFALSE 5935
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5855: LD_ADDR_VAR 0 4
5859: PUSH
5860: LD_VAR 0 3
5864: PPUSH
5865: LD_INT 3
5867: PPUSH
5868: CALL_OW 259
5872: PUSH
5873: LD_VAR 0 3
5877: PPUSH
5878: CALL_OW 432
5882: MINUS
5883: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5884: LD_VAR 0 4
5888: PUSH
5889: LD_VAR 0 5
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PPUSH
5898: LD_INT 3
5900: PPUSH
5901: CALL_OW 259
5905: PUSH
5906: LD_VAR 0 5
5910: PUSH
5911: LD_INT 1
5913: ARRAY
5914: PPUSH
5915: CALL_OW 432
5919: MINUS
5920: GREATEREQUAL
5921: IFFALSE 5933
// mech := i ;
5923: LD_ADDR_VAR 0 5
5927: PUSH
5928: LD_VAR 0 3
5932: ST_TO_ADDR
// end ;
5933: GO 5852
5935: POP
5936: POP
// if mech then
5937: LD_VAR 0 5
5941: IFFALSE 5961
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: LD_VAR 0 5
5952: PUSH
5953: LD_INT 1
5955: ARRAY
5956: PPUSH
5957: CALL_OW 135
// end ;
5961: LD_VAR 0 2
5965: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
5966: LD_INT 0
5968: PPUSH
5969: PPUSH
5970: PPUSH
5971: PPUSH
5972: PPUSH
5973: PPUSH
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
// result := [ ] ;
5980: LD_ADDR_VAR 0 6
5984: PUSH
5985: EMPTY
5986: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5987: LD_VAR 0 1
5991: PPUSH
5992: CALL_OW 266
5996: PUSH
5997: LD_INT 0
5999: PUSH
6000: LD_INT 1
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: IN
6007: NOT
6008: IFFALSE 6012
// exit ;
6010: GO 7131
// if name then
6012: LD_VAR 0 2
6016: IFFALSE 6032
// SetBName ( base_dep , name ) ;
6018: LD_VAR 0 1
6022: PPUSH
6023: LD_VAR 0 2
6027: PPUSH
6028: CALL_OW 500
// base := GetBase ( base_dep ) ;
6032: LD_ADDR_VAR 0 14
6036: PUSH
6037: LD_VAR 0 1
6041: PPUSH
6042: CALL_OW 274
6046: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6047: LD_ADDR_VAR 0 15
6051: PUSH
6052: LD_VAR 0 1
6056: PPUSH
6057: CALL_OW 255
6061: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6062: LD_ADDR_VAR 0 16
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 248
6076: ST_TO_ADDR
// if sources then
6077: LD_VAR 0 4
6081: IFFALSE 6128
// for i = 1 to 3 do
6083: LD_ADDR_VAR 0 7
6087: PUSH
6088: DOUBLE
6089: LD_INT 1
6091: DEC
6092: ST_TO_ADDR
6093: LD_INT 3
6095: PUSH
6096: FOR_TO
6097: IFFALSE 6126
// AddResourceType ( base , i , sources [ i ] ) ;
6099: LD_VAR 0 14
6103: PPUSH
6104: LD_VAR 0 7
6108: PPUSH
6109: LD_VAR 0 4
6113: PUSH
6114: LD_VAR 0 7
6118: ARRAY
6119: PPUSH
6120: CALL_OW 276
6124: GO 6096
6126: POP
6127: POP
// buildings := GetBaseBuildings ( base ) ;
6128: LD_ADDR_VAR 0 17
6132: PUSH
6133: LD_VAR 0 14
6137: PPUSH
6138: CALL 5479 0 1
6142: ST_TO_ADDR
// InitHc ;
6143: CALL_OW 19
// InitUc ;
6147: CALL_OW 18
// uc_side := side ;
6151: LD_ADDR_OWVAR 20
6155: PUSH
6156: LD_VAR 0 15
6160: ST_TO_ADDR
// uc_nation := nation ;
6161: LD_ADDR_OWVAR 21
6165: PUSH
6166: LD_VAR 0 16
6170: ST_TO_ADDR
// if buildings then
6171: LD_VAR 0 17
6175: IFFALSE 6990
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6177: LD_VAR 0 17
6181: PPUSH
6182: LD_INT 2
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 32
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 30
6197: PUSH
6198: LD_INT 33
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 72
6214: IFFALSE 6297
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6216: LD_ADDR_VAR 0 7
6220: PUSH
6221: LD_VAR 0 17
6225: PPUSH
6226: LD_INT 2
6228: PUSH
6229: LD_INT 30
6231: PUSH
6232: LD_INT 32
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 30
6241: PUSH
6242: LD_INT 33
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: PPUSH
6254: CALL_OW 72
6258: PUSH
6259: FOR_IN
6260: IFFALSE 6295
// begin if not GetBWeapon ( i ) then
6262: LD_VAR 0 7
6266: PPUSH
6267: CALL_OW 269
6271: NOT
6272: IFFALSE 6293
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6274: LD_VAR 0 7
6278: PPUSH
6279: LD_VAR 0 7
6283: PPUSH
6284: CALL 7136 0 1
6288: PPUSH
6289: CALL_OW 431
// end ;
6293: GO 6259
6295: POP
6296: POP
// end ; for i = 1 to personel do
6297: LD_ADDR_VAR 0 7
6301: PUSH
6302: DOUBLE
6303: LD_INT 1
6305: DEC
6306: ST_TO_ADDR
6307: LD_VAR 0 5
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6970
// begin if i > 4 then
6315: LD_VAR 0 7
6319: PUSH
6320: LD_INT 4
6322: GREATER
6323: IFFALSE 6327
// break ;
6325: GO 6970
// case i of 1 :
6327: LD_VAR 0 7
6331: PUSH
6332: LD_INT 1
6334: DOUBLE
6335: EQUAL
6336: IFTRUE 6340
6338: GO 6413
6340: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6341: LD_ADDR_VAR 0 11
6345: PUSH
6346: LD_VAR 0 17
6350: PPUSH
6351: LD_INT 22
6353: PUSH
6354: LD_VAR 0 15
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PUSH
6363: LD_INT 2
6365: PUSH
6366: LD_INT 30
6368: PUSH
6369: LD_INT 32
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 30
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 30
6388: PUSH
6389: LD_INT 5
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: EMPTY
6403: LIST
6404: LIST
6405: PPUSH
6406: CALL_OW 72
6410: ST_TO_ADDR
6411: GO 6635
6413: LD_INT 2
6415: DOUBLE
6416: EQUAL
6417: IFTRUE 6421
6419: GO 6483
6421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6422: LD_ADDR_VAR 0 11
6426: PUSH
6427: LD_VAR 0 17
6431: PPUSH
6432: LD_INT 22
6434: PUSH
6435: LD_VAR 0 15
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: LD_INT 30
6449: PUSH
6450: LD_INT 0
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 30
6459: PUSH
6460: LD_INT 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PPUSH
6476: CALL_OW 72
6480: ST_TO_ADDR
6481: GO 6635
6483: LD_INT 3
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6553
6491: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6492: LD_ADDR_VAR 0 11
6496: PUSH
6497: LD_VAR 0 17
6501: PPUSH
6502: LD_INT 22
6504: PUSH
6505: LD_VAR 0 15
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 2
6516: PUSH
6517: LD_INT 30
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 30
6529: PUSH
6530: LD_INT 3
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 72
6550: ST_TO_ADDR
6551: GO 6635
6553: LD_INT 4
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6634
6561: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6562: LD_ADDR_VAR 0 11
6566: PUSH
6567: LD_VAR 0 17
6571: PPUSH
6572: LD_INT 22
6574: PUSH
6575: LD_VAR 0 15
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: LD_INT 30
6589: PUSH
6590: LD_INT 6
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 30
6599: PUSH
6600: LD_INT 7
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 30
6609: PUSH
6610: LD_INT 8
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PPUSH
6627: CALL_OW 72
6631: ST_TO_ADDR
6632: GO 6635
6634: POP
// if not f then
6635: LD_VAR 0 11
6639: NOT
6640: IFFALSE 6644
// continue ;
6642: GO 6312
// x := personel [ i ] ;
6644: LD_ADDR_VAR 0 12
6648: PUSH
6649: LD_VAR 0 5
6653: PUSH
6654: LD_VAR 0 7
6658: ARRAY
6659: ST_TO_ADDR
// if x = - 1 then
6660: LD_VAR 0 12
6664: PUSH
6665: LD_INT 1
6667: NEG
6668: EQUAL
6669: IFFALSE 6791
// begin for j in f do
6671: LD_ADDR_VAR 0 8
6675: PUSH
6676: LD_VAR 0 11
6680: PUSH
6681: FOR_IN
6682: IFFALSE 6787
// repeat PrepareHuman ( false , i , skill ) ;
6684: LD_INT 0
6686: PPUSH
6687: LD_VAR 0 7
6691: PPUSH
6692: LD_VAR 0 3
6696: PPUSH
6697: CALL_OW 380
// un := CreateHuman ;
6701: LD_ADDR_VAR 0 13
6705: PUSH
6706: CALL_OW 44
6710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6711: LD_ADDR_VAR 0 6
6715: PUSH
6716: LD_VAR 0 6
6720: PPUSH
6721: LD_INT 1
6723: PPUSH
6724: LD_VAR 0 13
6728: PPUSH
6729: CALL_OW 2
6733: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6734: LD_VAR 0 13
6738: PPUSH
6739: LD_VAR 0 8
6743: PPUSH
6744: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6748: LD_VAR 0 8
6752: PPUSH
6753: CALL_OW 313
6757: PUSH
6758: LD_INT 6
6760: EQUAL
6761: PUSH
6762: LD_VAR 0 8
6766: PPUSH
6767: CALL_OW 266
6771: PUSH
6772: LD_INT 32
6774: PUSH
6775: LD_INT 31
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: IN
6782: OR
6783: IFFALSE 6684
6785: GO 6681
6787: POP
6788: POP
// end else
6789: GO 6968
// for j = 1 to x do
6791: LD_ADDR_VAR 0 8
6795: PUSH
6796: DOUBLE
6797: LD_INT 1
6799: DEC
6800: ST_TO_ADDR
6801: LD_VAR 0 12
6805: PUSH
6806: FOR_TO
6807: IFFALSE 6966
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6809: LD_VAR 0 11
6813: PUSH
6814: LD_INT 1
6816: ARRAY
6817: PPUSH
6818: CALL_OW 313
6822: PUSH
6823: LD_VAR 0 11
6827: PUSH
6828: LD_INT 1
6830: ARRAY
6831: PPUSH
6832: CALL_OW 266
6836: PUSH
6837: LD_INT 32
6839: PUSH
6840: LD_INT 31
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: IN
6847: AND
6848: PUSH
6849: LD_VAR 0 11
6853: PUSH
6854: LD_INT 1
6856: ARRAY
6857: PPUSH
6858: CALL_OW 313
6862: PUSH
6863: LD_INT 6
6865: EQUAL
6866: OR
6867: IFFALSE 6887
// f := Delete ( f , 1 ) ;
6869: LD_ADDR_VAR 0 11
6873: PUSH
6874: LD_VAR 0 11
6878: PPUSH
6879: LD_INT 1
6881: PPUSH
6882: CALL_OW 3
6886: ST_TO_ADDR
// if not f then
6887: LD_VAR 0 11
6891: NOT
6892: IFFALSE 6896
// break ;
6894: GO 6966
// PrepareHuman ( false , i , skill ) ;
6896: LD_INT 0
6898: PPUSH
6899: LD_VAR 0 7
6903: PPUSH
6904: LD_VAR 0 3
6908: PPUSH
6909: CALL_OW 380
// un := CreateHuman ;
6913: LD_ADDR_VAR 0 13
6917: PUSH
6918: CALL_OW 44
6922: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6923: LD_ADDR_VAR 0 6
6927: PUSH
6928: LD_VAR 0 6
6932: PPUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_VAR 0 13
6940: PPUSH
6941: CALL_OW 2
6945: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6946: LD_VAR 0 13
6950: PPUSH
6951: LD_VAR 0 11
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PPUSH
6960: CALL_OW 52
// end ;
6964: GO 6806
6966: POP
6967: POP
// end ;
6968: GO 6312
6970: POP
6971: POP
// result := result ^ buildings ;
6972: LD_ADDR_VAR 0 6
6976: PUSH
6977: LD_VAR 0 6
6981: PUSH
6982: LD_VAR 0 17
6986: ADD
6987: ST_TO_ADDR
// end else
6988: GO 7131
// begin for i = 1 to personel do
6990: LD_ADDR_VAR 0 7
6994: PUSH
6995: DOUBLE
6996: LD_INT 1
6998: DEC
6999: ST_TO_ADDR
7000: LD_VAR 0 5
7004: PUSH
7005: FOR_TO
7006: IFFALSE 7129
// begin if i > 4 then
7008: LD_VAR 0 7
7012: PUSH
7013: LD_INT 4
7015: GREATER
7016: IFFALSE 7020
// break ;
7018: GO 7129
// x := personel [ i ] ;
7020: LD_ADDR_VAR 0 12
7024: PUSH
7025: LD_VAR 0 5
7029: PUSH
7030: LD_VAR 0 7
7034: ARRAY
7035: ST_TO_ADDR
// if x = - 1 then
7036: LD_VAR 0 12
7040: PUSH
7041: LD_INT 1
7043: NEG
7044: EQUAL
7045: IFFALSE 7049
// continue ;
7047: GO 7005
// PrepareHuman ( false , i , skill ) ;
7049: LD_INT 0
7051: PPUSH
7052: LD_VAR 0 7
7056: PPUSH
7057: LD_VAR 0 3
7061: PPUSH
7062: CALL_OW 380
// un := CreateHuman ;
7066: LD_ADDR_VAR 0 13
7070: PUSH
7071: CALL_OW 44
7075: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7076: LD_VAR 0 13
7080: PPUSH
7081: LD_VAR 0 1
7085: PPUSH
7086: CALL_OW 250
7090: PPUSH
7091: LD_VAR 0 1
7095: PPUSH
7096: CALL_OW 251
7100: PPUSH
7101: LD_INT 10
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: CALL_OW 50
// result := result ^ un ;
7111: LD_ADDR_VAR 0 6
7115: PUSH
7116: LD_VAR 0 6
7120: PUSH
7121: LD_VAR 0 13
7125: ADD
7126: ST_TO_ADDR
// end ;
7127: GO 7005
7129: POP
7130: POP
// end ; end ;
7131: LD_VAR 0 6
7135: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7136: LD_INT 0
7138: PPUSH
7139: PPUSH
7140: PPUSH
7141: PPUSH
7142: PPUSH
7143: PPUSH
7144: PPUSH
7145: PPUSH
7146: PPUSH
7147: PPUSH
7148: PPUSH
7149: PPUSH
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// result := false ;
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: LD_INT 0
7161: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7162: LD_VAR 0 1
7166: NOT
7167: PUSH
7168: LD_VAR 0 1
7172: PPUSH
7173: CALL_OW 266
7177: PUSH
7178: LD_INT 32
7180: PUSH
7181: LD_INT 33
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: IN
7188: NOT
7189: OR
7190: IFFALSE 7194
// exit ;
7192: GO 8427
// nat := GetNation ( tower ) ;
7194: LD_ADDR_VAR 0 11
7198: PUSH
7199: LD_VAR 0 1
7203: PPUSH
7204: CALL_OW 248
7208: ST_TO_ADDR
// side := GetSide ( tower ) ;
7209: LD_ADDR_VAR 0 15
7213: PUSH
7214: LD_VAR 0 1
7218: PPUSH
7219: CALL_OW 255
7223: ST_TO_ADDR
// x := GetX ( tower ) ;
7224: LD_ADDR_VAR 0 9
7228: PUSH
7229: LD_VAR 0 1
7233: PPUSH
7234: CALL_OW 250
7238: ST_TO_ADDR
// y := GetY ( tower ) ;
7239: LD_ADDR_VAR 0 10
7243: PUSH
7244: LD_VAR 0 1
7248: PPUSH
7249: CALL_OW 251
7253: ST_TO_ADDR
// if not x or not y then
7254: LD_VAR 0 9
7258: NOT
7259: PUSH
7260: LD_VAR 0 10
7264: NOT
7265: OR
7266: IFFALSE 7270
// exit ;
7268: GO 8427
// weapon := 0 ;
7270: LD_ADDR_VAR 0 17
7274: PUSH
7275: LD_INT 0
7277: ST_TO_ADDR
// fac_list := [ ] ;
7278: LD_ADDR_VAR 0 16
7282: PUSH
7283: EMPTY
7284: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7285: LD_ADDR_VAR 0 5
7289: PUSH
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 274
7299: PPUSH
7300: CALL 5479 0 1
7304: PPUSH
7305: LD_INT 30
7307: PUSH
7308: LD_INT 3
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PPUSH
7315: CALL_OW 72
7319: ST_TO_ADDR
// if not factories then
7320: LD_VAR 0 5
7324: NOT
7325: IFFALSE 7329
// exit ;
7327: GO 8427
// for i in factories do
7329: LD_ADDR_VAR 0 7
7333: PUSH
7334: LD_VAR 0 5
7338: PUSH
7339: FOR_IN
7340: IFFALSE 7365
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7342: LD_ADDR_VAR 0 16
7346: PUSH
7347: LD_VAR 0 16
7351: PUSH
7352: LD_VAR 0 7
7356: PPUSH
7357: CALL_OW 478
7361: UNION
7362: ST_TO_ADDR
7363: GO 7339
7365: POP
7366: POP
// if not fac_list then
7367: LD_VAR 0 16
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 8427
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7376: LD_ADDR_VAR 0 4
7380: PUSH
7381: LD_INT 4
7383: PUSH
7384: LD_INT 5
7386: PUSH
7387: LD_INT 9
7389: PUSH
7390: LD_INT 10
7392: PUSH
7393: LD_INT 6
7395: PUSH
7396: LD_INT 7
7398: PUSH
7399: LD_INT 11
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 27
7413: PUSH
7414: LD_INT 28
7416: PUSH
7417: LD_INT 26
7419: PUSH
7420: LD_INT 30
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: PUSH
7429: LD_INT 43
7431: PUSH
7432: LD_INT 44
7434: PUSH
7435: LD_INT 46
7437: PUSH
7438: LD_INT 45
7440: PUSH
7441: LD_INT 47
7443: PUSH
7444: LD_INT 49
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_VAR 0 11
7464: ARRAY
7465: ST_TO_ADDR
// for i in list do
7466: LD_ADDR_VAR 0 7
7470: PUSH
7471: LD_VAR 0 4
7475: PUSH
7476: FOR_IN
7477: IFFALSE 7510
// if not i in fac_list then
7479: LD_VAR 0 7
7483: PUSH
7484: LD_VAR 0 16
7488: IN
7489: NOT
7490: IFFALSE 7508
// list := list diff i ;
7492: LD_ADDR_VAR 0 4
7496: PUSH
7497: LD_VAR 0 4
7501: PUSH
7502: LD_VAR 0 7
7506: DIFF
7507: ST_TO_ADDR
7508: GO 7476
7510: POP
7511: POP
// if not list then
7512: LD_VAR 0 4
7516: NOT
7517: IFFALSE 7521
// exit ;
7519: GO 8427
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7521: LD_VAR 0 11
7525: PUSH
7526: LD_INT 3
7528: EQUAL
7529: PUSH
7530: LD_INT 49
7532: PUSH
7533: LD_VAR 0 4
7537: IN
7538: AND
7539: PUSH
7540: LD_INT 31
7542: PPUSH
7543: LD_VAR 0 15
7547: PPUSH
7548: CALL_OW 321
7552: PUSH
7553: LD_INT 2
7555: EQUAL
7556: AND
7557: IFFALSE 7617
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7559: LD_INT 22
7561: PUSH
7562: LD_VAR 0 15
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PUSH
7571: LD_INT 35
7573: PUSH
7574: LD_INT 49
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_INT 91
7583: PUSH
7584: LD_VAR 0 1
7588: PUSH
7589: LD_INT 10
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: LIST
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: NOT
7607: IFFALSE 7617
// weapon := ru_time_lapser ;
7609: LD_ADDR_VAR 0 17
7613: PUSH
7614: LD_INT 49
7616: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7617: LD_VAR 0 11
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: LD_INT 2
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: IN
7632: PUSH
7633: LD_INT 11
7635: PUSH
7636: LD_VAR 0 4
7640: IN
7641: PUSH
7642: LD_INT 30
7644: PUSH
7645: LD_VAR 0 4
7649: IN
7650: OR
7651: AND
7652: PUSH
7653: LD_INT 6
7655: PPUSH
7656: LD_VAR 0 15
7660: PPUSH
7661: CALL_OW 321
7665: PUSH
7666: LD_INT 2
7668: EQUAL
7669: AND
7670: IFFALSE 7835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7672: LD_INT 22
7674: PUSH
7675: LD_VAR 0 15
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 2
7686: PUSH
7687: LD_INT 35
7689: PUSH
7690: LD_INT 11
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 35
7699: PUSH
7700: LD_INT 30
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 91
7714: PUSH
7715: LD_VAR 0 1
7719: PUSH
7720: LD_INT 18
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 69
7737: NOT
7738: PUSH
7739: LD_INT 22
7741: PUSH
7742: LD_VAR 0 15
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 2
7753: PUSH
7754: LD_INT 30
7756: PUSH
7757: LD_INT 32
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 30
7766: PUSH
7767: LD_INT 33
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 91
7781: PUSH
7782: LD_VAR 0 1
7786: PUSH
7787: LD_INT 12
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: LIST
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: EMPTY
7801: LIST
7802: PPUSH
7803: CALL_OW 69
7807: PUSH
7808: LD_INT 2
7810: GREATER
7811: AND
7812: IFFALSE 7835
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7814: LD_ADDR_VAR 0 17
7818: PUSH
7819: LD_INT 11
7821: PUSH
7822: LD_INT 30
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_VAR 0 11
7833: ARRAY
7834: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7835: LD_VAR 0 17
7839: NOT
7840: PUSH
7841: LD_INT 40
7843: PPUSH
7844: LD_VAR 0 15
7848: PPUSH
7849: CALL_OW 321
7853: PUSH
7854: LD_INT 2
7856: EQUAL
7857: AND
7858: PUSH
7859: LD_INT 7
7861: PUSH
7862: LD_VAR 0 4
7866: IN
7867: PUSH
7868: LD_INT 28
7870: PUSH
7871: LD_VAR 0 4
7875: IN
7876: OR
7877: PUSH
7878: LD_INT 45
7880: PUSH
7881: LD_VAR 0 4
7885: IN
7886: OR
7887: AND
7888: IFFALSE 8142
// begin hex := _GetHexInfo ( x , y ) ;
7890: LD_ADDR_VAR 0 3
7894: PUSH
7895: LD_VAR 0 9
7899: PPUSH
7900: LD_VAR 0 10
7904: PPUSH
7905: CALL 1934 0 2
7909: ST_TO_ADDR
// if hex [ 1 ] then
7910: LD_VAR 0 3
7914: PUSH
7915: LD_INT 1
7917: ARRAY
7918: IFFALSE 7922
// exit ;
7920: GO 8427
// height := hex [ 2 ] ;
7922: LD_ADDR_VAR 0 14
7926: PUSH
7927: LD_VAR 0 3
7931: PUSH
7932: LD_INT 2
7934: ARRAY
7935: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7936: LD_ADDR_VAR 0 13
7940: PUSH
7941: LD_INT 0
7943: PUSH
7944: LD_INT 2
7946: PUSH
7947: LD_INT 3
7949: PUSH
7950: LD_INT 5
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: ST_TO_ADDR
// for i in tmp do
7959: LD_ADDR_VAR 0 7
7963: PUSH
7964: LD_VAR 0 13
7968: PUSH
7969: FOR_IN
7970: IFFALSE 8140
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7972: LD_ADDR_VAR 0 8
7976: PUSH
7977: LD_VAR 0 9
7981: PPUSH
7982: LD_VAR 0 7
7986: PPUSH
7987: LD_INT 5
7989: PPUSH
7990: CALL_OW 272
7994: PUSH
7995: LD_VAR 0 10
7999: PPUSH
8000: LD_VAR 0 7
8004: PPUSH
8005: LD_INT 5
8007: PPUSH
8008: CALL_OW 273
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8017: LD_VAR 0 8
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PPUSH
8026: LD_VAR 0 8
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PPUSH
8035: CALL_OW 488
8039: IFFALSE 8138
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8041: LD_ADDR_VAR 0 3
8045: PUSH
8046: LD_VAR 0 8
8050: PUSH
8051: LD_INT 1
8053: ARRAY
8054: PPUSH
8055: LD_VAR 0 8
8059: PUSH
8060: LD_INT 2
8062: ARRAY
8063: PPUSH
8064: CALL 1934 0 2
8068: ST_TO_ADDR
// if hex [ 1 ] then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: IFFALSE 8081
// continue ;
8079: GO 7969
// h := hex [ 2 ] ;
8081: LD_ADDR_VAR 0 12
8085: PUSH
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 2
8093: ARRAY
8094: ST_TO_ADDR
// if h + 7 < height then
8095: LD_VAR 0 12
8099: PUSH
8100: LD_INT 7
8102: PLUS
8103: PUSH
8104: LD_VAR 0 14
8108: LESS
8109: IFFALSE 8138
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8111: LD_ADDR_VAR 0 17
8115: PUSH
8116: LD_INT 7
8118: PUSH
8119: LD_INT 28
8121: PUSH
8122: LD_INT 45
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: LD_VAR 0 11
8134: ARRAY
8135: ST_TO_ADDR
// break ;
8136: GO 8140
// end ; end ; end ;
8138: GO 7969
8140: POP
8141: POP
// end ; if not weapon then
8142: LD_VAR 0 17
8146: NOT
8147: IFFALSE 8309
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8149: LD_ADDR_VAR 0 4
8153: PUSH
8154: LD_VAR 0 4
8158: PUSH
8159: LD_INT 11
8161: PUSH
8162: LD_INT 30
8164: PUSH
8165: LD_INT 49
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: DIFF
8173: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8174: LD_ADDR_VAR 0 17
8178: PUSH
8179: LD_VAR 0 4
8183: PUSH
8184: LD_INT 1
8186: PPUSH
8187: LD_VAR 0 4
8191: PPUSH
8192: CALL_OW 12
8196: ARRAY
8197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8198: LD_ADDR_VAR 0 13
8202: PUSH
8203: LD_INT 22
8205: PUSH
8206: LD_VAR 0 15
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 3
8217: PUSH
8218: LD_INT 35
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PPUSH
8236: CALL_OW 69
8240: ST_TO_ADDR
// for i in tmp do
8241: LD_ADDR_VAR 0 7
8245: PUSH
8246: LD_VAR 0 13
8250: PUSH
8251: FOR_IN
8252: IFFALSE 8277
// list := list diff GetBWeapon ( i ) ;
8254: LD_ADDR_VAR 0 4
8258: PUSH
8259: LD_VAR 0 4
8263: PUSH
8264: LD_VAR 0 7
8268: PPUSH
8269: CALL_OW 269
8273: DIFF
8274: ST_TO_ADDR
8275: GO 8251
8277: POP
8278: POP
// if list then
8279: LD_VAR 0 4
8283: IFFALSE 8309
// weapon := list [ rand ( 1 , list ) ] ;
8285: LD_ADDR_VAR 0 17
8289: PUSH
8290: LD_VAR 0 4
8294: PUSH
8295: LD_INT 1
8297: PPUSH
8298: LD_VAR 0 4
8302: PPUSH
8303: CALL_OW 12
8307: ARRAY
8308: ST_TO_ADDR
// end ; if weapon then
8309: LD_VAR 0 17
8313: IFFALSE 8427
// begin tmp := CostOfWeapon ( weapon ) ;
8315: LD_ADDR_VAR 0 13
8319: PUSH
8320: LD_VAR 0 17
8324: PPUSH
8325: CALL_OW 451
8329: ST_TO_ADDR
// j := GetBase ( tower ) ;
8330: LD_ADDR_VAR 0 8
8334: PUSH
8335: LD_VAR 0 1
8339: PPUSH
8340: CALL_OW 274
8344: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8345: LD_VAR 0 8
8349: PPUSH
8350: LD_INT 1
8352: PPUSH
8353: CALL_OW 275
8357: PUSH
8358: LD_VAR 0 13
8362: PUSH
8363: LD_INT 1
8365: ARRAY
8366: GREATEREQUAL
8367: PUSH
8368: LD_VAR 0 8
8372: PPUSH
8373: LD_INT 2
8375: PPUSH
8376: CALL_OW 275
8380: PUSH
8381: LD_VAR 0 13
8385: PUSH
8386: LD_INT 2
8388: ARRAY
8389: GREATEREQUAL
8390: AND
8391: PUSH
8392: LD_VAR 0 8
8396: PPUSH
8397: LD_INT 3
8399: PPUSH
8400: CALL_OW 275
8404: PUSH
8405: LD_VAR 0 13
8409: PUSH
8410: LD_INT 3
8412: ARRAY
8413: GREATEREQUAL
8414: AND
8415: IFFALSE 8427
// result := weapon ;
8417: LD_ADDR_VAR 0 2
8421: PUSH
8422: LD_VAR 0 17
8426: ST_TO_ADDR
// end ; end ;
8427: LD_VAR 0 2
8431: RET
// export function Compare ( val1 , val2 ) ; begin
8432: LD_INT 0
8434: PPUSH
// if val1 = val2 then
8435: LD_VAR 0 1
8439: PUSH
8440: LD_VAR 0 2
8444: EQUAL
8445: IFFALSE 8457
// result := true else
8447: LD_ADDR_VAR 0 3
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
8455: GO 8465
// result := false ;
8457: LD_ADDR_VAR 0 3
8461: PUSH
8462: LD_INT 0
8464: ST_TO_ADDR
// end ;
8465: LD_VAR 0 3
8469: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8470: LD_INT 0
8472: PPUSH
8473: PPUSH
// result := true ;
8474: LD_ADDR_VAR 0 3
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if array1 = array2 then
8482: LD_VAR 0 1
8486: PUSH
8487: LD_VAR 0 2
8491: EQUAL
8492: IFFALSE 8557
// begin for i = 1 to array1 do
8494: LD_ADDR_VAR 0 4
8498: PUSH
8499: DOUBLE
8500: LD_INT 1
8502: DEC
8503: ST_TO_ADDR
8504: LD_VAR 0 1
8508: PUSH
8509: FOR_TO
8510: IFFALSE 8553
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8512: LD_VAR 0 1
8516: PUSH
8517: LD_VAR 0 4
8521: ARRAY
8522: PPUSH
8523: LD_VAR 0 2
8527: PUSH
8528: LD_VAR 0 4
8532: ARRAY
8533: PPUSH
8534: CALL 8432 0 2
8538: NOT
8539: IFFALSE 8551
// begin result := false ;
8541: LD_ADDR_VAR 0 3
8545: PUSH
8546: LD_INT 0
8548: ST_TO_ADDR
// break ;
8549: GO 8553
// end ;
8551: GO 8509
8553: POP
8554: POP
// end else
8555: GO 8565
// result := false ;
8557: LD_ADDR_VAR 0 3
8561: PUSH
8562: LD_INT 0
8564: ST_TO_ADDR
// end ;
8565: LD_VAR 0 3
8569: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8570: LD_INT 0
8572: PPUSH
8573: PPUSH
8574: PPUSH
// pom := GetBase ( fac ) ;
8575: LD_ADDR_VAR 0 5
8579: PUSH
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 274
8589: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8590: LD_ADDR_VAR 0 4
8594: PUSH
8595: LD_VAR 0 2
8599: PUSH
8600: LD_INT 1
8602: ARRAY
8603: PPUSH
8604: LD_VAR 0 2
8608: PUSH
8609: LD_INT 2
8611: ARRAY
8612: PPUSH
8613: LD_VAR 0 2
8617: PUSH
8618: LD_INT 3
8620: ARRAY
8621: PPUSH
8622: LD_VAR 0 2
8626: PUSH
8627: LD_INT 4
8629: ARRAY
8630: PPUSH
8631: CALL_OW 449
8635: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8636: LD_VAR 0 5
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: CALL_OW 275
8648: PUSH
8649: LD_VAR 0 4
8653: PUSH
8654: LD_INT 1
8656: ARRAY
8657: GREATEREQUAL
8658: PUSH
8659: LD_VAR 0 5
8663: PPUSH
8664: LD_INT 2
8666: PPUSH
8667: CALL_OW 275
8671: PUSH
8672: LD_VAR 0 4
8676: PUSH
8677: LD_INT 2
8679: ARRAY
8680: GREATEREQUAL
8681: AND
8682: PUSH
8683: LD_VAR 0 5
8687: PPUSH
8688: LD_INT 3
8690: PPUSH
8691: CALL_OW 275
8695: PUSH
8696: LD_VAR 0 4
8700: PUSH
8701: LD_INT 3
8703: ARRAY
8704: GREATEREQUAL
8705: AND
8706: IFFALSE 8718
// result := true else
8708: LD_ADDR_VAR 0 3
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
8716: GO 8726
// result := false ;
8718: LD_ADDR_VAR 0 3
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// end ;
8726: LD_VAR 0 3
8730: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8731: LD_INT 0
8733: PPUSH
8734: PPUSH
8735: PPUSH
8736: PPUSH
8737: PPUSH
8738: PPUSH
8739: PPUSH
8740: PPUSH
8741: PPUSH
// result := false ;
8742: LD_ADDR_VAR 0 6
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8750: LD_VAR 0 1
8754: NOT
8755: PUSH
8756: LD_VAR 0 2
8760: NOT
8761: OR
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: LD_INT 0
8770: PUSH
8771: LD_INT 1
8773: PUSH
8774: LD_INT 2
8776: PUSH
8777: LD_INT 3
8779: PUSH
8780: LD_INT 4
8782: PUSH
8783: LD_INT 5
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: IN
8794: NOT
8795: OR
8796: PUSH
8797: LD_VAR 0 3
8801: PPUSH
8802: LD_VAR 0 4
8806: PPUSH
8807: CALL_OW 488
8811: NOT
8812: OR
8813: IFFALSE 8817
// exit ;
8815: GO 9491
// pom := GetBase ( bdepot ) ;
8817: LD_ADDR_VAR 0 9
8821: PUSH
8822: LD_VAR 0 1
8826: PPUSH
8827: CALL_OW 274
8831: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8832: LD_ADDR_VAR 0 10
8836: PUSH
8837: LD_VAR 0 2
8841: PPUSH
8842: LD_VAR 0 1
8846: PPUSH
8847: CALL_OW 248
8851: PPUSH
8852: CALL_OW 450
8856: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
8857: LD_VAR 0 9
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: CALL_OW 275
8869: PUSH
8870: LD_VAR 0 10
8874: PUSH
8875: LD_INT 1
8877: ARRAY
8878: GREATEREQUAL
8879: PUSH
8880: LD_VAR 0 9
8884: PPUSH
8885: LD_INT 2
8887: PPUSH
8888: CALL_OW 275
8892: PUSH
8893: LD_VAR 0 10
8897: PUSH
8898: LD_INT 2
8900: ARRAY
8901: GREATEREQUAL
8902: AND
8903: PUSH
8904: LD_VAR 0 9
8908: PPUSH
8909: LD_INT 3
8911: PPUSH
8912: CALL_OW 275
8916: PUSH
8917: LD_VAR 0 10
8921: PUSH
8922: LD_INT 3
8924: ARRAY
8925: GREATEREQUAL
8926: AND
8927: NOT
8928: IFFALSE 8932
// exit ;
8930: GO 9491
// if GetBType ( bdepot ) = b_depot then
8932: LD_VAR 0 1
8936: PPUSH
8937: CALL_OW 266
8941: PUSH
8942: LD_INT 0
8944: EQUAL
8945: IFFALSE 8957
// dist := 28 else
8947: LD_ADDR_VAR 0 13
8951: PUSH
8952: LD_INT 28
8954: ST_TO_ADDR
8955: GO 8965
// dist := 36 ;
8957: LD_ADDR_VAR 0 13
8961: PUSH
8962: LD_INT 36
8964: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8965: LD_VAR 0 1
8969: PPUSH
8970: LD_VAR 0 3
8974: PPUSH
8975: LD_VAR 0 4
8979: PPUSH
8980: CALL_OW 297
8984: PUSH
8985: LD_VAR 0 13
8989: GREATER
8990: IFFALSE 8994
// exit ;
8992: GO 9491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8994: LD_ADDR_VAR 0 11
8998: PUSH
8999: LD_VAR 0 2
9003: PPUSH
9004: LD_VAR 0 3
9008: PPUSH
9009: LD_VAR 0 4
9013: PPUSH
9014: LD_VAR 0 5
9018: PPUSH
9019: LD_VAR 0 1
9023: PPUSH
9024: CALL_OW 248
9028: PPUSH
9029: LD_INT 0
9031: PPUSH
9032: CALL 9496 0 6
9036: ST_TO_ADDR
// if not hexes then
9037: LD_VAR 0 11
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9491
// hex := _GetHexInfo ( x , y ) ;
9046: LD_ADDR_VAR 0 14
9050: PUSH
9051: LD_VAR 0 3
9055: PPUSH
9056: LD_VAR 0 4
9060: PPUSH
9061: CALL 1934 0 2
9065: ST_TO_ADDR
// if hex [ 1 ] then
9066: LD_VAR 0 14
9070: PUSH
9071: LD_INT 1
9073: ARRAY
9074: IFFALSE 9078
// exit ;
9076: GO 9491
// height := hex [ 2 ] ;
9078: LD_ADDR_VAR 0 12
9082: PUSH
9083: LD_VAR 0 14
9087: PUSH
9088: LD_INT 2
9090: ARRAY
9091: ST_TO_ADDR
// for i = 1 to hexes do
9092: LD_ADDR_VAR 0 7
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_VAR 0 11
9106: PUSH
9107: FOR_TO
9108: IFFALSE 9446
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9110: LD_VAR 0 11
9114: PUSH
9115: LD_VAR 0 7
9119: ARRAY
9120: PUSH
9121: LD_INT 1
9123: ARRAY
9124: PPUSH
9125: LD_VAR 0 11
9129: PUSH
9130: LD_VAR 0 7
9134: ARRAY
9135: PUSH
9136: LD_INT 2
9138: ARRAY
9139: PPUSH
9140: CALL_OW 488
9144: NOT
9145: IFFALSE 9149
// continue ;
9147: GO 9107
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9149: LD_ADDR_VAR 0 8
9153: PUSH
9154: LD_VAR 0 11
9158: PUSH
9159: LD_VAR 0 7
9163: ARRAY
9164: PUSH
9165: LD_INT 1
9167: ARRAY
9168: PPUSH
9169: LD_VAR 0 11
9173: PUSH
9174: LD_VAR 0 7
9178: ARRAY
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL 1934 0 2
9188: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9189: LD_VAR 0 8
9193: PUSH
9194: LD_INT 1
9196: ARRAY
9197: PUSH
9198: LD_VAR 0 8
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: PUSH
9207: LD_VAR 0 12
9211: PUSH
9212: LD_INT 2
9214: PLUS
9215: GREATER
9216: OR
9217: PUSH
9218: LD_VAR 0 8
9222: PUSH
9223: LD_INT 2
9225: ARRAY
9226: PUSH
9227: LD_VAR 0 12
9231: PUSH
9232: LD_INT 2
9234: MINUS
9235: LESS
9236: OR
9237: PUSH
9238: LD_VAR 0 8
9242: PUSH
9243: LD_INT 3
9245: ARRAY
9246: PUSH
9247: LD_INT 0
9249: PUSH
9250: LD_INT 8
9252: PUSH
9253: LD_INT 9
9255: PUSH
9256: LD_INT 10
9258: PUSH
9259: LD_INT 11
9261: PUSH
9262: LD_INT 12
9264: PUSH
9265: LD_INT 13
9267: PUSH
9268: LD_INT 16
9270: PUSH
9271: LD_INT 17
9273: PUSH
9274: LD_INT 18
9276: PUSH
9277: LD_INT 19
9279: PUSH
9280: LD_INT 20
9282: PUSH
9283: LD_INT 21
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: IN
9301: NOT
9302: OR
9303: PUSH
9304: LD_VAR 0 8
9308: PUSH
9309: LD_INT 4
9311: ARRAY
9312: OR
9313: PUSH
9314: LD_VAR 0 8
9318: PUSH
9319: LD_INT 5
9321: ARRAY
9322: NOT
9323: OR
9324: PUSH
9325: LD_VAR 0 8
9329: PUSH
9330: LD_INT 6
9332: ARRAY
9333: PUSH
9334: LD_INT 1
9336: PUSH
9337: LD_INT 2
9339: PUSH
9340: LD_INT 7
9342: PUSH
9343: LD_INT 9
9345: PUSH
9346: LD_INT 10
9348: PUSH
9349: LD_INT 11
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: IN
9360: NOT
9361: OR
9362: PUSH
9363: LD_VAR 0 11
9367: PUSH
9368: LD_VAR 0 7
9372: ARRAY
9373: PUSH
9374: LD_INT 1
9376: ARRAY
9377: PPUSH
9378: LD_VAR 0 11
9382: PUSH
9383: LD_VAR 0 7
9387: ARRAY
9388: PUSH
9389: LD_INT 2
9391: ARRAY
9392: PPUSH
9393: CALL_OW 428
9397: PUSH
9398: LD_INT 0
9400: GREATER
9401: OR
9402: PUSH
9403: LD_VAR 0 11
9407: PUSH
9408: LD_VAR 0 7
9412: ARRAY
9413: PUSH
9414: LD_INT 1
9416: ARRAY
9417: PPUSH
9418: LD_VAR 0 11
9422: PUSH
9423: LD_VAR 0 7
9427: ARRAY
9428: PUSH
9429: LD_INT 2
9431: ARRAY
9432: PPUSH
9433: CALL_OW 351
9437: OR
9438: IFFALSE 9444
// exit ;
9440: POP
9441: POP
9442: GO 9491
// end ;
9444: GO 9107
9446: POP
9447: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9448: LD_VAR 0 1
9452: PPUSH
9453: CALL_OW 255
9457: PPUSH
9458: LD_VAR 0 3
9462: PPUSH
9463: LD_VAR 0 4
9467: PPUSH
9468: LD_INT 20
9470: PPUSH
9471: CALL 3669 0 4
9475: PUSH
9476: LD_INT 4
9478: ARRAY
9479: IFFALSE 9483
// exit ;
9481: GO 9491
// result := true ;
9483: LD_ADDR_VAR 0 6
9487: PUSH
9488: LD_INT 1
9490: ST_TO_ADDR
// end ;
9491: LD_VAR 0 6
9495: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9496: LD_INT 0
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
9514: PPUSH
9515: PPUSH
9516: PPUSH
9517: PPUSH
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
// result = [ ] ;
9556: LD_ADDR_VAR 0 7
9560: PUSH
9561: EMPTY
9562: ST_TO_ADDR
// temp_list = [ ] ;
9563: LD_ADDR_VAR 0 9
9567: PUSH
9568: EMPTY
9569: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9570: LD_VAR 0 4
9574: PUSH
9575: LD_INT 0
9577: PUSH
9578: LD_INT 1
9580: PUSH
9581: LD_INT 2
9583: PUSH
9584: LD_INT 3
9586: PUSH
9587: LD_INT 4
9589: PUSH
9590: LD_INT 5
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: IN
9601: NOT
9602: PUSH
9603: LD_VAR 0 1
9607: PUSH
9608: LD_INT 0
9610: PUSH
9611: LD_INT 1
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: IN
9618: PUSH
9619: LD_VAR 0 5
9623: PUSH
9624: LD_INT 1
9626: PUSH
9627: LD_INT 2
9629: PUSH
9630: LD_INT 3
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: IN
9638: NOT
9639: AND
9640: OR
9641: IFFALSE 9645
// exit ;
9643: GO 28030
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9645: LD_VAR 0 1
9649: PUSH
9650: LD_INT 6
9652: PUSH
9653: LD_INT 7
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: LD_INT 13
9661: PUSH
9662: LD_INT 12
9664: PUSH
9665: LD_INT 15
9667: PUSH
9668: LD_INT 11
9670: PUSH
9671: LD_INT 14
9673: PUSH
9674: LD_INT 10
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: IN
9688: IFFALSE 9698
// btype = b_lab ;
9690: LD_ADDR_VAR 0 1
9694: PUSH
9695: LD_INT 6
9697: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9698: LD_VAR 0 6
9702: PUSH
9703: LD_INT 0
9705: PUSH
9706: LD_INT 1
9708: PUSH
9709: LD_INT 2
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: IN
9717: NOT
9718: PUSH
9719: LD_VAR 0 1
9723: PUSH
9724: LD_INT 0
9726: PUSH
9727: LD_INT 1
9729: PUSH
9730: LD_INT 2
9732: PUSH
9733: LD_INT 3
9735: PUSH
9736: LD_INT 6
9738: PUSH
9739: LD_INT 36
9741: PUSH
9742: LD_INT 4
9744: PUSH
9745: LD_INT 5
9747: PUSH
9748: LD_INT 31
9750: PUSH
9751: LD_INT 32
9753: PUSH
9754: LD_INT 33
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: IN
9770: NOT
9771: PUSH
9772: LD_VAR 0 6
9776: PUSH
9777: LD_INT 1
9779: EQUAL
9780: AND
9781: OR
9782: PUSH
9783: LD_VAR 0 1
9787: PUSH
9788: LD_INT 2
9790: PUSH
9791: LD_INT 3
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: IN
9798: NOT
9799: PUSH
9800: LD_VAR 0 6
9804: PUSH
9805: LD_INT 2
9807: EQUAL
9808: AND
9809: OR
9810: IFFALSE 9820
// mode = 0 ;
9812: LD_ADDR_VAR 0 6
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// case mode of 0 :
9820: LD_VAR 0 6
9824: PUSH
9825: LD_INT 0
9827: DOUBLE
9828: EQUAL
9829: IFTRUE 9833
9831: GO 21286
9833: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9834: LD_ADDR_VAR 0 11
9838: PUSH
9839: LD_INT 0
9841: PUSH
9842: LD_INT 0
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: LD_INT 1
9854: NEG
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: LD_INT 0
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 1
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 0
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 1
9892: NEG
9893: PUSH
9894: LD_INT 0
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 1
9903: NEG
9904: PUSH
9905: LD_INT 1
9907: NEG
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 1
9915: NEG
9916: PUSH
9917: LD_INT 2
9919: NEG
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 0
9927: PUSH
9928: LD_INT 2
9930: NEG
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 1
9938: PUSH
9939: LD_INT 1
9941: NEG
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 1
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 0
9959: PUSH
9960: LD_INT 2
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 1
9969: NEG
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: LD_INT 3
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 0
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 1
10000: NEG
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10027: LD_ADDR_VAR 0 12
10031: PUSH
10032: LD_INT 0
10034: PUSH
10035: LD_INT 0
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 0
10044: PUSH
10045: LD_INT 1
10047: NEG
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: LD_INT 0
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: LD_INT 1
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 1
10085: NEG
10086: PUSH
10087: LD_INT 0
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 1
10096: NEG
10097: PUSH
10098: LD_INT 1
10100: NEG
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 1
10108: PUSH
10109: LD_INT 1
10111: NEG
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 0
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 2
10129: PUSH
10130: LD_INT 1
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 1
10139: NEG
10140: PUSH
10141: LD_INT 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 2
10150: NEG
10151: PUSH
10152: LD_INT 0
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 2
10161: NEG
10162: PUSH
10163: LD_INT 1
10165: NEG
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 2
10173: NEG
10174: PUSH
10175: LD_INT 1
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 3
10184: NEG
10185: PUSH
10186: LD_INT 0
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 3
10195: NEG
10196: PUSH
10197: LD_INT 1
10199: NEG
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10223: LD_ADDR_VAR 0 13
10227: PUSH
10228: LD_INT 0
10230: PUSH
10231: LD_INT 0
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 0
10240: PUSH
10241: LD_INT 1
10243: NEG
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: LD_INT 0
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 1
10261: PUSH
10262: LD_INT 1
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: PUSH
10269: LD_INT 0
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PUSH
10279: LD_INT 1
10281: NEG
10282: PUSH
10283: LD_INT 0
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 1
10292: NEG
10293: PUSH
10294: LD_INT 1
10296: NEG
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 1
10304: NEG
10305: PUSH
10306: LD_INT 2
10308: NEG
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 2
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 2
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 1
10336: PUSH
10337: LD_INT 2
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 2
10346: NEG
10347: PUSH
10348: LD_INT 1
10350: NEG
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 2
10358: NEG
10359: PUSH
10360: LD_INT 2
10362: NEG
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: LD_INT 2
10370: NEG
10371: PUSH
10372: LD_INT 3
10374: NEG
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: LD_INT 3
10382: NEG
10383: PUSH
10384: LD_INT 2
10386: NEG
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 3
10394: NEG
10395: PUSH
10396: LD_INT 3
10398: NEG
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10422: LD_ADDR_VAR 0 14
10426: PUSH
10427: LD_INT 0
10429: PUSH
10430: LD_INT 0
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 0
10439: PUSH
10440: LD_INT 1
10442: NEG
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: LD_INT 0
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 1
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 0
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 1
10480: NEG
10481: PUSH
10482: LD_INT 0
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 1
10491: NEG
10492: PUSH
10493: LD_INT 1
10495: NEG
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 1
10503: NEG
10504: PUSH
10505: LD_INT 2
10507: NEG
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 0
10515: PUSH
10516: LD_INT 2
10518: NEG
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: LD_INT 1
10529: NEG
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 1
10537: PUSH
10538: LD_INT 2
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: PUSH
10545: LD_INT 0
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 1
10557: NEG
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 1
10568: NEG
10569: PUSH
10570: LD_INT 3
10572: NEG
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 0
10580: PUSH
10581: LD_INT 3
10583: NEG
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: LD_INT 2
10594: NEG
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10618: LD_ADDR_VAR 0 15
10622: PUSH
10623: LD_INT 0
10625: PUSH
10626: LD_INT 0
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 0
10635: PUSH
10636: LD_INT 1
10638: NEG
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 1
10646: PUSH
10647: LD_INT 0
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 0
10666: PUSH
10667: LD_INT 1
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 1
10676: NEG
10677: PUSH
10678: LD_INT 0
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 1
10687: NEG
10688: PUSH
10689: LD_INT 1
10691: NEG
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: LD_INT 1
10702: NEG
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 0
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 1
10730: NEG
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 2
10741: NEG
10742: PUSH
10743: LD_INT 0
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 2
10752: NEG
10753: PUSH
10754: LD_INT 1
10756: NEG
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 2
10764: PUSH
10765: LD_INT 1
10767: NEG
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: LD_INT 0
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 3
10785: PUSH
10786: LD_INT 1
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10811: LD_ADDR_VAR 0 16
10815: PUSH
10816: LD_INT 0
10818: PUSH
10819: LD_INT 0
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 0
10828: PUSH
10829: LD_INT 1
10831: NEG
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 1
10839: PUSH
10840: LD_INT 0
10842: PUSH
10843: EMPTY
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 1
10849: PUSH
10850: LD_INT 1
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PUSH
10857: LD_INT 0
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PUSH
10867: LD_INT 1
10869: NEG
10870: PUSH
10871: LD_INT 0
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: PUSH
10878: LD_INT 1
10880: NEG
10881: PUSH
10882: LD_INT 1
10884: NEG
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 1
10892: NEG
10893: PUSH
10894: LD_INT 2
10896: NEG
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 2
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 2
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 1
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 2
10934: NEG
10935: PUSH
10936: LD_INT 1
10938: NEG
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 2
10946: NEG
10947: PUSH
10948: LD_INT 2
10950: NEG
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 3
10958: PUSH
10959: LD_INT 2
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: LD_INT 3
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 2
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11004: LD_ADDR_VAR 0 17
11008: PUSH
11009: LD_INT 0
11011: PUSH
11012: LD_INT 0
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 0
11021: PUSH
11022: LD_INT 1
11024: NEG
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 1
11032: PUSH
11033: LD_INT 0
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 1
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 1
11062: NEG
11063: PUSH
11064: LD_INT 0
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 1
11073: NEG
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 1
11085: NEG
11086: PUSH
11087: LD_INT 2
11089: NEG
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 0
11097: PUSH
11098: LD_INT 2
11100: NEG
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: LD_INT 1
11111: NEG
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 2
11119: PUSH
11120: LD_INT 0
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 2
11129: PUSH
11130: LD_INT 1
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 2
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 1
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 0
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 1
11169: NEG
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 2
11180: NEG
11181: PUSH
11182: LD_INT 0
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 2
11191: NEG
11192: PUSH
11193: LD_INT 1
11195: NEG
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 2
11203: NEG
11204: PUSH
11205: LD_INT 2
11207: NEG
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11234: LD_ADDR_VAR 0 18
11238: PUSH
11239: LD_INT 0
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 0
11251: PUSH
11252: LD_INT 1
11254: NEG
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: PUSH
11270: LD_INT 1
11272: PUSH
11273: LD_INT 1
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 0
11282: PUSH
11283: LD_INT 1
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: PUSH
11290: LD_INT 1
11292: NEG
11293: PUSH
11294: LD_INT 0
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 1
11303: NEG
11304: PUSH
11305: LD_INT 1
11307: NEG
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 1
11315: NEG
11316: PUSH
11317: LD_INT 2
11319: NEG
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 0
11327: PUSH
11328: LD_INT 2
11330: NEG
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 1
11338: PUSH
11339: LD_INT 1
11341: NEG
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 2
11349: PUSH
11350: LD_INT 0
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 1
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 0
11389: PUSH
11390: LD_INT 2
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 1
11399: NEG
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 2
11410: NEG
11411: PUSH
11412: LD_INT 0
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 2
11421: NEG
11422: PUSH
11423: LD_INT 1
11425: NEG
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 2
11433: NEG
11434: PUSH
11435: LD_INT 2
11437: NEG
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11464: LD_ADDR_VAR 0 19
11468: PUSH
11469: LD_INT 0
11471: PUSH
11472: LD_INT 0
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 1
11484: NEG
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 1
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 0
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 1
11522: NEG
11523: PUSH
11524: LD_INT 0
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 1
11533: NEG
11534: PUSH
11535: LD_INT 1
11537: NEG
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 1
11545: NEG
11546: PUSH
11547: LD_INT 2
11549: NEG
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 0
11557: PUSH
11558: LD_INT 2
11560: NEG
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 1
11568: PUSH
11569: LD_INT 1
11571: NEG
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 0
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 2
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 1
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 0
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 1
11629: NEG
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 2
11640: NEG
11641: PUSH
11642: LD_INT 0
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 2
11651: NEG
11652: PUSH
11653: LD_INT 1
11655: NEG
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 2
11663: NEG
11664: PUSH
11665: LD_INT 2
11667: NEG
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11694: LD_ADDR_VAR 0 20
11698: PUSH
11699: LD_INT 0
11701: PUSH
11702: LD_INT 0
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 0
11711: PUSH
11712: LD_INT 1
11714: NEG
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 0
11742: PUSH
11743: LD_INT 1
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 1
11752: NEG
11753: PUSH
11754: LD_INT 0
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: LD_INT 1
11763: NEG
11764: PUSH
11765: LD_INT 1
11767: NEG
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 1
11775: NEG
11776: PUSH
11777: LD_INT 2
11779: NEG
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 0
11787: PUSH
11788: LD_INT 2
11790: NEG
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 1
11798: PUSH
11799: LD_INT 1
11801: NEG
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 2
11809: PUSH
11810: LD_INT 0
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 2
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: LD_INT 2
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: LD_INT 0
11849: PUSH
11850: LD_INT 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 1
11859: NEG
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 2
11870: NEG
11871: PUSH
11872: LD_INT 0
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 2
11881: NEG
11882: PUSH
11883: LD_INT 1
11885: NEG
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 2
11893: NEG
11894: PUSH
11895: LD_INT 2
11897: NEG
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11924: LD_ADDR_VAR 0 21
11928: PUSH
11929: LD_INT 0
11931: PUSH
11932: LD_INT 0
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 0
11941: PUSH
11942: LD_INT 1
11944: NEG
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 1
11952: PUSH
11953: LD_INT 0
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: LD_INT 1
11962: PUSH
11963: LD_INT 1
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 0
11972: PUSH
11973: LD_INT 1
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 1
11982: NEG
11983: PUSH
11984: LD_INT 0
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 1
11993: NEG
11994: PUSH
11995: LD_INT 1
11997: NEG
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 1
12005: NEG
12006: PUSH
12007: LD_INT 2
12009: NEG
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 0
12017: PUSH
12018: LD_INT 2
12020: NEG
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: LD_INT 1
12031: NEG
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 2
12039: PUSH
12040: LD_INT 0
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 2
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 2
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 1
12069: PUSH
12070: LD_INT 2
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 0
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 1
12089: NEG
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 2
12100: NEG
12101: PUSH
12102: LD_INT 0
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 2
12111: NEG
12112: PUSH
12113: LD_INT 1
12115: NEG
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: NEG
12124: PUSH
12125: LD_INT 2
12127: NEG
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12154: LD_ADDR_VAR 0 22
12158: PUSH
12159: LD_INT 0
12161: PUSH
12162: LD_INT 0
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 0
12171: PUSH
12172: LD_INT 1
12174: NEG
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: LD_INT 0
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 1
12192: PUSH
12193: LD_INT 1
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 0
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 1
12212: NEG
12213: PUSH
12214: LD_INT 0
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: LD_INT 1
12223: NEG
12224: PUSH
12225: LD_INT 1
12227: NEG
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 1
12235: NEG
12236: PUSH
12237: LD_INT 2
12239: NEG
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 0
12247: PUSH
12248: LD_INT 2
12250: NEG
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: LD_INT 1
12261: NEG
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: LD_INT 0
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 2
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 2
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 1
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 0
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 1
12319: NEG
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 2
12330: NEG
12331: PUSH
12332: LD_INT 0
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 2
12341: NEG
12342: PUSH
12343: LD_INT 1
12345: NEG
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 2
12353: NEG
12354: PUSH
12355: LD_INT 2
12357: NEG
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12384: LD_ADDR_VAR 0 23
12388: PUSH
12389: LD_INT 0
12391: PUSH
12392: LD_INT 0
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 0
12401: PUSH
12402: LD_INT 1
12404: NEG
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 1
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 1
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 0
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 1
12442: NEG
12443: PUSH
12444: LD_INT 0
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 1
12453: NEG
12454: PUSH
12455: LD_INT 1
12457: NEG
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 1
12465: NEG
12466: PUSH
12467: LD_INT 2
12469: NEG
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 0
12477: PUSH
12478: LD_INT 2
12480: NEG
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: LD_INT 1
12491: NEG
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: LD_INT 0
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 2
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 0
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 1
12549: NEG
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 2
12560: NEG
12561: PUSH
12562: LD_INT 0
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 2
12571: NEG
12572: PUSH
12573: LD_INT 1
12575: NEG
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 2
12583: NEG
12584: PUSH
12585: LD_INT 2
12587: NEG
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: NEG
12596: PUSH
12597: LD_INT 3
12599: NEG
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 1
12607: NEG
12608: PUSH
12609: LD_INT 3
12611: NEG
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 1
12619: PUSH
12620: LD_INT 2
12622: NEG
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 2
12630: PUSH
12631: LD_INT 1
12633: NEG
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12664: LD_ADDR_VAR 0 24
12668: PUSH
12669: LD_INT 0
12671: PUSH
12672: LD_INT 0
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 0
12681: PUSH
12682: LD_INT 1
12684: NEG
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 1
12692: PUSH
12693: LD_INT 0
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 0
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 1
12722: NEG
12723: PUSH
12724: LD_INT 0
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 1
12733: NEG
12734: PUSH
12735: LD_INT 1
12737: NEG
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 1
12745: NEG
12746: PUSH
12747: LD_INT 2
12749: NEG
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 0
12757: PUSH
12758: LD_INT 2
12760: NEG
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: LD_INT 1
12771: NEG
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: LD_INT 0
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 2
12789: PUSH
12790: LD_INT 1
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 2
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 1
12809: PUSH
12810: LD_INT 2
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 0
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 1
12829: NEG
12830: PUSH
12831: LD_INT 1
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 2
12840: NEG
12841: PUSH
12842: LD_INT 0
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 2
12851: NEG
12852: PUSH
12853: LD_INT 1
12855: NEG
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 2
12863: NEG
12864: PUSH
12865: LD_INT 2
12867: NEG
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: LD_INT 2
12878: NEG
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 2
12886: PUSH
12887: LD_INT 1
12889: NEG
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: LD_INT 1
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 3
12907: PUSH
12908: LD_INT 2
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12940: LD_ADDR_VAR 0 25
12944: PUSH
12945: LD_INT 0
12947: PUSH
12948: LD_INT 0
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 0
12957: PUSH
12958: LD_INT 1
12960: NEG
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: LD_INT 1
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 1
12978: PUSH
12979: LD_INT 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 0
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 1
12998: NEG
12999: PUSH
13000: LD_INT 0
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 1
13009: NEG
13010: PUSH
13011: LD_INT 1
13013: NEG
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 1
13021: NEG
13022: PUSH
13023: LD_INT 2
13025: NEG
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 0
13033: PUSH
13034: LD_INT 2
13036: NEG
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: LD_INT 1
13047: NEG
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 0
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 2
13065: PUSH
13066: LD_INT 1
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 2
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: LD_INT 1
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 0
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 1
13105: NEG
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: NEG
13117: PUSH
13118: LD_INT 0
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 2
13127: NEG
13128: PUSH
13129: LD_INT 1
13131: NEG
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 2
13139: NEG
13140: PUSH
13141: LD_INT 2
13143: NEG
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 3
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 2
13171: PUSH
13172: LD_INT 3
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 1
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13214: LD_ADDR_VAR 0 26
13218: PUSH
13219: LD_INT 0
13221: PUSH
13222: LD_INT 0
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 0
13231: PUSH
13232: LD_INT 1
13234: NEG
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 1
13242: PUSH
13243: LD_INT 0
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 0
13262: PUSH
13263: LD_INT 1
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 1
13272: NEG
13273: PUSH
13274: LD_INT 0
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 1
13283: NEG
13284: PUSH
13285: LD_INT 1
13287: NEG
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 1
13295: NEG
13296: PUSH
13297: LD_INT 2
13299: NEG
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 0
13307: PUSH
13308: LD_INT 2
13310: NEG
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: LD_INT 1
13321: NEG
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: LD_INT 0
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 2
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 1
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 0
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 1
13379: NEG
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 2
13390: NEG
13391: PUSH
13392: LD_INT 0
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 2
13401: NEG
13402: PUSH
13403: LD_INT 1
13405: NEG
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 2
13413: NEG
13414: PUSH
13415: LD_INT 2
13417: NEG
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: LD_INT 3
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 1
13445: NEG
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 2
13456: NEG
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13490: LD_ADDR_VAR 0 27
13494: PUSH
13495: LD_INT 0
13497: PUSH
13498: LD_INT 0
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 0
13507: PUSH
13508: LD_INT 1
13510: NEG
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 1
13518: PUSH
13519: LD_INT 0
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: LD_INT 1
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 0
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 1
13548: NEG
13549: PUSH
13550: LD_INT 0
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 1
13559: NEG
13560: PUSH
13561: LD_INT 1
13563: NEG
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 1
13571: NEG
13572: PUSH
13573: LD_INT 2
13575: NEG
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 0
13583: PUSH
13584: LD_INT 2
13586: NEG
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: LD_INT 1
13597: NEG
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 2
13605: PUSH
13606: LD_INT 0
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 1
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 1
13655: NEG
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 2
13666: NEG
13667: PUSH
13668: LD_INT 0
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 2
13677: NEG
13678: PUSH
13679: LD_INT 1
13681: NEG
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 2
13689: NEG
13690: PUSH
13691: LD_INT 2
13693: NEG
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 1
13701: NEG
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 2
13712: NEG
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 3
13723: NEG
13724: PUSH
13725: LD_INT 1
13727: NEG
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 3
13735: NEG
13736: PUSH
13737: LD_INT 2
13739: NEG
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13770: LD_ADDR_VAR 0 28
13774: PUSH
13775: LD_INT 0
13777: PUSH
13778: LD_INT 0
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 0
13787: PUSH
13788: LD_INT 1
13790: NEG
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: LD_INT 0
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 1
13808: PUSH
13809: LD_INT 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 0
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 1
13828: NEG
13829: PUSH
13830: LD_INT 0
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 1
13839: NEG
13840: PUSH
13841: LD_INT 1
13843: NEG
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 1
13851: NEG
13852: PUSH
13853: LD_INT 2
13855: NEG
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 0
13863: PUSH
13864: LD_INT 2
13866: NEG
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 1
13874: PUSH
13875: LD_INT 1
13877: NEG
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PUSH
13883: LD_INT 2
13885: PUSH
13886: LD_INT 0
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 0
13925: PUSH
13926: LD_INT 2
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 1
13935: NEG
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 2
13946: NEG
13947: PUSH
13948: LD_INT 0
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 2
13957: NEG
13958: PUSH
13959: LD_INT 1
13961: NEG
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 2
13969: NEG
13970: PUSH
13971: LD_INT 2
13973: NEG
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 2
13981: NEG
13982: PUSH
13983: LD_INT 3
13985: NEG
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 1
13993: NEG
13994: PUSH
13995: LD_INT 3
13997: NEG
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: NEG
14006: PUSH
14007: LD_INT 1
14009: NEG
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 3
14017: NEG
14018: PUSH
14019: LD_INT 2
14021: NEG
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14052: LD_ADDR_VAR 0 29
14056: PUSH
14057: LD_INT 0
14059: PUSH
14060: LD_INT 0
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: LD_INT 0
14069: PUSH
14070: LD_INT 1
14072: NEG
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 1
14080: PUSH
14081: LD_INT 0
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: LD_INT 1
14090: PUSH
14091: LD_INT 1
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 1
14110: NEG
14111: PUSH
14112: LD_INT 0
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: PUSH
14123: LD_INT 1
14125: NEG
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: LD_INT 2
14137: NEG
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 0
14145: PUSH
14146: LD_INT 2
14148: NEG
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 1
14156: PUSH
14157: LD_INT 1
14159: NEG
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 2
14167: PUSH
14168: LD_INT 0
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 2
14177: PUSH
14178: LD_INT 1
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 1
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 0
14197: PUSH
14198: LD_INT 2
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 1
14207: NEG
14208: PUSH
14209: LD_INT 1
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 2
14218: NEG
14219: PUSH
14220: LD_INT 1
14222: NEG
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 2
14230: NEG
14231: PUSH
14232: LD_INT 2
14234: NEG
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: LD_INT 2
14242: NEG
14243: PUSH
14244: LD_INT 3
14246: NEG
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 2
14254: PUSH
14255: LD_INT 1
14257: NEG
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: LD_INT 1
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 1
14275: PUSH
14276: LD_INT 3
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 1
14285: NEG
14286: PUSH
14287: LD_INT 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 3
14296: NEG
14297: PUSH
14298: LD_INT 2
14300: NEG
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14331: LD_ADDR_VAR 0 30
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: LD_INT 0
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: LD_INT 1
14351: NEG
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 1
14359: PUSH
14360: LD_INT 0
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 1
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 1
14389: NEG
14390: PUSH
14391: LD_INT 0
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: LD_INT 1
14400: NEG
14401: PUSH
14402: LD_INT 1
14404: NEG
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: NEG
14413: PUSH
14414: LD_INT 2
14416: NEG
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 0
14424: PUSH
14425: LD_INT 2
14427: NEG
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 1
14435: PUSH
14436: LD_INT 1
14438: NEG
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: LD_INT 0
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: LD_INT 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 1
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: LD_INT 1
14486: NEG
14487: PUSH
14488: LD_INT 1
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PUSH
14495: LD_INT 2
14497: NEG
14498: PUSH
14499: LD_INT 0
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: NEG
14509: PUSH
14510: LD_INT 1
14512: NEG
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 1
14520: NEG
14521: PUSH
14522: LD_INT 3
14524: NEG
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: LD_INT 2
14535: NEG
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 3
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 3
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 2
14563: NEG
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 3
14574: NEG
14575: PUSH
14576: LD_INT 1
14578: NEG
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14609: LD_ADDR_VAR 0 31
14613: PUSH
14614: LD_INT 0
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 0
14626: PUSH
14627: LD_INT 1
14629: NEG
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 1
14637: PUSH
14638: LD_INT 0
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: LD_INT 1
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 1
14667: NEG
14668: PUSH
14669: LD_INT 0
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 1
14678: NEG
14679: PUSH
14680: LD_INT 1
14682: NEG
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 1
14690: NEG
14691: PUSH
14692: LD_INT 2
14694: NEG
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: LD_INT 1
14705: NEG
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 2
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 1
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 0
14753: PUSH
14754: LD_INT 2
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 1
14763: NEG
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 2
14774: NEG
14775: PUSH
14776: LD_INT 1
14778: NEG
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 2
14786: NEG
14787: PUSH
14788: LD_INT 2
14790: NEG
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 2
14798: NEG
14799: PUSH
14800: LD_INT 3
14802: NEG
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 1
14813: NEG
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 3
14821: PUSH
14822: LD_INT 1
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: LD_INT 3
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 1
14841: NEG
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 3
14852: NEG
14853: PUSH
14854: LD_INT 2
14856: NEG
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: LIST
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14887: LD_ADDR_VAR 0 32
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: LD_INT 0
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: LD_INT 0
14904: PUSH
14905: LD_INT 1
14907: NEG
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: LD_INT 1
14915: PUSH
14916: LD_INT 0
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 1
14945: NEG
14946: PUSH
14947: LD_INT 0
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 1
14956: NEG
14957: PUSH
14958: LD_INT 1
14960: NEG
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 1
14968: NEG
14969: PUSH
14970: LD_INT 2
14972: NEG
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 0
14980: PUSH
14981: LD_INT 2
14983: NEG
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 1
14994: NEG
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: LD_INT 1
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 2
15012: PUSH
15013: LD_INT 2
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 1
15022: PUSH
15023: LD_INT 2
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: LD_INT 0
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 1
15042: NEG
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 2
15053: NEG
15054: PUSH
15055: LD_INT 0
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 2
15064: NEG
15065: PUSH
15066: LD_INT 1
15068: NEG
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 1
15076: NEG
15077: PUSH
15078: LD_INT 3
15080: NEG
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: LD_INT 2
15091: NEG
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 3
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: LD_INT 3
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 2
15119: NEG
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 3
15130: NEG
15131: PUSH
15132: LD_INT 1
15134: NEG
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15165: LD_ADDR_VAR 0 33
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: LD_INT 1
15185: NEG
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 1
15193: PUSH
15194: LD_INT 0
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: LD_INT 1
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 1
15223: NEG
15224: PUSH
15225: LD_INT 0
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: NEG
15235: PUSH
15236: LD_INT 1
15238: NEG
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 1
15246: NEG
15247: PUSH
15248: LD_INT 2
15250: NEG
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: LD_INT 1
15261: NEG
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 0
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 1
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 0
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 1
15309: NEG
15310: PUSH
15311: LD_INT 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 2
15320: NEG
15321: PUSH
15322: LD_INT 0
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 2
15331: NEG
15332: PUSH
15333: LD_INT 1
15335: NEG
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 2
15343: NEG
15344: PUSH
15345: LD_INT 2
15347: NEG
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 2
15355: NEG
15356: PUSH
15357: LD_INT 3
15359: NEG
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 2
15367: PUSH
15368: LD_INT 1
15370: NEG
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 1
15388: PUSH
15389: LD_INT 3
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 1
15398: NEG
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 3
15409: NEG
15410: PUSH
15411: LD_INT 2
15413: NEG
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15444: LD_ADDR_VAR 0 34
15448: PUSH
15449: LD_INT 0
15451: PUSH
15452: LD_INT 0
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 0
15461: PUSH
15462: LD_INT 1
15464: NEG
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 1
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 1
15502: NEG
15503: PUSH
15504: LD_INT 0
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 1
15513: NEG
15514: PUSH
15515: LD_INT 1
15517: NEG
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: LD_INT 2
15529: NEG
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 0
15537: PUSH
15538: LD_INT 2
15540: NEG
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: LD_INT 1
15551: NEG
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: LD_INT 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: LD_INT 2
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: NEG
15590: PUSH
15591: LD_INT 1
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: NEG
15601: PUSH
15602: LD_INT 0
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 2
15611: NEG
15612: PUSH
15613: LD_INT 1
15615: NEG
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 2
15623: NEG
15624: PUSH
15625: LD_INT 2
15627: NEG
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: PUSH
15633: LD_INT 1
15635: NEG
15636: PUSH
15637: LD_INT 3
15639: NEG
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PUSH
15645: LD_INT 1
15647: PUSH
15648: LD_INT 2
15650: NEG
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: LD_INT 2
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 2
15668: PUSH
15669: LD_INT 3
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 2
15678: NEG
15679: PUSH
15680: LD_INT 1
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 3
15689: NEG
15690: PUSH
15691: LD_INT 1
15693: NEG
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15724: LD_ADDR_VAR 0 35
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: LD_INT 0
15734: PUSH
15735: EMPTY
15736: LIST
15737: LIST
15738: PUSH
15739: LD_INT 0
15741: PUSH
15742: LD_INT 1
15744: NEG
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 1
15752: PUSH
15753: LD_INT 0
15755: PUSH
15756: EMPTY
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 0
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 1
15782: NEG
15783: PUSH
15784: LD_INT 0
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 1
15793: NEG
15794: PUSH
15795: LD_INT 1
15797: NEG
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 2
15815: NEG
15816: PUSH
15817: LD_INT 1
15819: NEG
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15836: LD_ADDR_VAR 0 36
15840: PUSH
15841: LD_INT 0
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 0
15853: PUSH
15854: LD_INT 1
15856: NEG
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: EMPTY
15869: LIST
15870: LIST
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: LD_INT 1
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: LD_INT 0
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 1
15905: NEG
15906: PUSH
15907: LD_INT 1
15909: NEG
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: LD_INT 2
15921: NEG
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 1
15929: PUSH
15930: LD_INT 2
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15948: LD_ADDR_VAR 0 37
15952: PUSH
15953: LD_INT 0
15955: PUSH
15956: LD_INT 0
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 0
15965: PUSH
15966: LD_INT 1
15968: NEG
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: LD_INT 0
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: LD_INT 1
15986: PUSH
15987: LD_INT 1
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 0
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: NEG
16007: PUSH
16008: LD_INT 0
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: NEG
16018: PUSH
16019: LD_INT 1
16021: NEG
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: LD_INT 1
16032: NEG
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16060: LD_ADDR_VAR 0 38
16064: PUSH
16065: LD_INT 0
16067: PUSH
16068: LD_INT 0
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 0
16077: PUSH
16078: LD_INT 1
16080: NEG
16081: PUSH
16082: EMPTY
16083: LIST
16084: LIST
16085: PUSH
16086: LD_INT 1
16088: PUSH
16089: LD_INT 0
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PUSH
16096: LD_INT 1
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 0
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 1
16118: NEG
16119: PUSH
16120: LD_INT 0
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 1
16129: NEG
16130: PUSH
16131: LD_INT 1
16133: NEG
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 2
16151: NEG
16152: PUSH
16153: LD_INT 1
16155: NEG
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16172: LD_ADDR_VAR 0 39
16176: PUSH
16177: LD_INT 0
16179: PUSH
16180: LD_INT 0
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: LD_INT 1
16192: NEG
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: LD_INT 0
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: LD_INT 1
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 0
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: NEG
16231: PUSH
16232: LD_INT 0
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 1
16241: NEG
16242: PUSH
16243: LD_INT 1
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: LD_INT 2
16257: NEG
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: LD_INT 2
16268: PUSH
16269: EMPTY
16270: LIST
16271: LIST
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16284: LD_ADDR_VAR 0 40
16288: PUSH
16289: LD_INT 0
16291: PUSH
16292: LD_INT 0
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: LD_INT 0
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: LD_INT 0
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 1
16322: PUSH
16323: LD_INT 1
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: LD_INT 0
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: LD_INT 1
16368: NEG
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: LD_INT 1
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16396: LD_ADDR_VAR 0 41
16400: PUSH
16401: LD_INT 0
16403: PUSH
16404: LD_INT 0
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 0
16413: PUSH
16414: LD_INT 1
16416: NEG
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: LD_INT 1
16424: PUSH
16425: LD_INT 0
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: PUSH
16432: LD_INT 1
16434: PUSH
16435: LD_INT 1
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: NEG
16455: PUSH
16456: LD_INT 0
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 1
16465: NEG
16466: PUSH
16467: LD_INT 1
16469: NEG
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: NEG
16478: PUSH
16479: LD_INT 2
16481: NEG
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: LD_INT 1
16492: NEG
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: LD_INT 0
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 2
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 2
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: LD_INT 1
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 1
16540: NEG
16541: PUSH
16542: LD_INT 1
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: NEG
16563: PUSH
16564: LD_INT 1
16566: NEG
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 2
16574: NEG
16575: PUSH
16576: LD_INT 2
16578: NEG
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 2
16586: NEG
16587: PUSH
16588: LD_INT 3
16590: NEG
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 2
16598: PUSH
16599: LD_INT 1
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 3
16639: PUSH
16640: LD_INT 3
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 2
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 2
16659: NEG
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: LD_INT 3
16670: NEG
16671: PUSH
16672: LD_INT 0
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 3
16681: NEG
16682: PUSH
16683: LD_INT 1
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 3
16693: NEG
16694: PUSH
16695: LD_INT 2
16697: NEG
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: PUSH
16703: LD_INT 3
16705: NEG
16706: PUSH
16707: LD_INT 3
16709: NEG
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16746: LD_ADDR_VAR 0 42
16750: PUSH
16751: LD_INT 0
16753: PUSH
16754: LD_INT 0
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 0
16763: PUSH
16764: LD_INT 1
16766: NEG
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: LD_INT 0
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 1
16784: PUSH
16785: LD_INT 1
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 0
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: LD_INT 0
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 1
16815: NEG
16816: PUSH
16817: LD_INT 1
16819: NEG
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 1
16827: NEG
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 0
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: LD_INT 1
16853: NEG
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 1
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 2
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 1
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 0
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: LD_INT 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 2
16912: NEG
16913: PUSH
16914: LD_INT 1
16916: NEG
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 2
16924: NEG
16925: PUSH
16926: LD_INT 2
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: NEG
16937: PUSH
16938: LD_INT 3
16940: NEG
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: PUSH
16946: LD_INT 1
16948: NEG
16949: PUSH
16950: LD_INT 3
16952: NEG
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 0
16960: PUSH
16961: LD_INT 3
16963: NEG
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: LD_INT 2
16974: NEG
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: PUSH
16990: LD_INT 3
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: LD_INT 1
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: EMPTY
17017: LIST
17018: LIST
17019: PUSH
17020: LD_INT 0
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: EMPTY
17027: LIST
17028: LIST
17029: PUSH
17030: LD_INT 1
17032: NEG
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 3
17043: NEG
17044: PUSH
17045: LD_INT 2
17047: NEG
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 3
17055: NEG
17056: PUSH
17057: LD_INT 3
17059: NEG
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17096: LD_ADDR_VAR 0 43
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: LD_INT 0
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 0
17113: PUSH
17114: LD_INT 1
17116: NEG
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 1
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 1
17134: PUSH
17135: LD_INT 1
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: LD_INT 0
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 1
17154: NEG
17155: PUSH
17156: LD_INT 0
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: LD_INT 1
17169: NEG
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: LD_INT 2
17181: NEG
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: LD_INT 0
17189: PUSH
17190: LD_INT 2
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 1
17200: PUSH
17201: LD_INT 1
17203: NEG
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: LD_INT 1
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 1
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 0
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 1
17251: NEG
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: LD_INT 2
17262: NEG
17263: PUSH
17264: LD_INT 0
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 1
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 1
17285: NEG
17286: PUSH
17287: LD_INT 3
17289: NEG
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 0
17297: PUSH
17298: LD_INT 3
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 1
17308: PUSH
17309: LD_INT 2
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: LD_INT 1
17322: NEG
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: LD_INT 2
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 2
17381: NEG
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 3
17392: NEG
17393: PUSH
17394: LD_INT 0
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 3
17403: NEG
17404: PUSH
17405: LD_INT 1
17407: NEG
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17444: LD_ADDR_VAR 0 44
17448: PUSH
17449: LD_INT 0
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 0
17461: PUSH
17462: LD_INT 1
17464: NEG
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: LD_INT 0
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 1
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 0
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 1
17502: NEG
17503: PUSH
17504: LD_INT 0
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: NEG
17514: PUSH
17515: LD_INT 1
17517: NEG
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: LD_INT 2
17529: NEG
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: LD_INT 1
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 1
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 1
17588: NEG
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 2
17599: NEG
17600: PUSH
17601: LD_INT 0
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: NEG
17611: PUSH
17612: LD_INT 1
17614: NEG
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: LD_INT 2
17626: NEG
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 2
17634: NEG
17635: PUSH
17636: LD_INT 3
17638: NEG
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 2
17646: PUSH
17647: LD_INT 1
17649: NEG
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 3
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 3
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_INT 3
17677: PUSH
17678: LD_INT 2
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PUSH
17685: LD_INT 3
17687: PUSH
17688: LD_INT 3
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: LD_INT 2
17697: PUSH
17698: LD_INT 3
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 2
17707: NEG
17708: PUSH
17709: LD_INT 1
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 3
17718: NEG
17719: PUSH
17720: LD_INT 0
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 3
17729: NEG
17730: PUSH
17731: LD_INT 1
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 3
17741: NEG
17742: PUSH
17743: LD_INT 2
17745: NEG
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 3
17753: NEG
17754: PUSH
17755: LD_INT 3
17757: NEG
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17794: LD_ADDR_VAR 0 45
17798: PUSH
17799: LD_INT 0
17801: PUSH
17802: LD_INT 0
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: LD_INT 0
17811: PUSH
17812: LD_INT 1
17814: NEG
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: LD_INT 0
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 0
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 0
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 1
17867: NEG
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 2
17879: NEG
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: LD_INT 0
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: LD_INT 1
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 1
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 2
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: LD_INT 1
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 2
17960: NEG
17961: PUSH
17962: LD_INT 1
17964: NEG
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: LD_INT 2
17976: NEG
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 2
17984: NEG
17985: PUSH
17986: LD_INT 3
17988: NEG
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: LD_INT 3
18000: NEG
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 3
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: PUSH
18020: LD_INT 2
18022: NEG
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 3
18030: PUSH
18031: LD_INT 2
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 3
18040: PUSH
18041: LD_INT 3
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 3
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: LD_INT 1
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 0
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 1
18080: NEG
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 3
18091: NEG
18092: PUSH
18093: LD_INT 2
18095: NEG
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 3
18103: NEG
18104: PUSH
18105: LD_INT 3
18107: NEG
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18144: LD_ADDR_VAR 0 46
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 0
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: LD_INT 0
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 1
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 0
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: NEG
18203: PUSH
18204: LD_INT 0
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 2
18229: NEG
18230: PUSH
18231: EMPTY
18232: LIST
18233: LIST
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 2
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: LD_INT 2
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 1
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: LD_INT 1
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 2
18310: NEG
18311: PUSH
18312: LD_INT 0
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: NEG
18322: PUSH
18323: LD_INT 1
18325: NEG
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 1
18333: NEG
18334: PUSH
18335: LD_INT 3
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: LD_INT 3
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 1
18370: NEG
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 3
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 3
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 3
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 2
18429: NEG
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 3
18440: NEG
18441: PUSH
18442: LD_INT 0
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: PUSH
18449: LD_INT 3
18451: NEG
18452: PUSH
18453: LD_INT 1
18455: NEG
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18492: LD_ADDR_VAR 0 47
18496: PUSH
18497: LD_INT 0
18499: PUSH
18500: LD_INT 0
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: LD_INT 1
18512: NEG
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: LD_INT 0
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: LD_INT 1
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 0
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: NEG
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: LD_INT 1
18561: NEG
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: LD_INT 2
18577: NEG
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 0
18585: PUSH
18586: LD_INT 2
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: LD_INT 1
18599: NEG
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 2
18607: NEG
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 2
18619: NEG
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18643: LD_ADDR_VAR 0 48
18647: PUSH
18648: LD_INT 0
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 1
18671: PUSH
18672: LD_INT 0
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 1
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 0
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 1
18701: NEG
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 1
18712: NEG
18713: PUSH
18714: LD_INT 1
18716: NEG
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: LD_INT 2
18728: NEG
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 2
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 2
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18790: LD_ADDR_VAR 0 49
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 1
18859: NEG
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 2
18892: PUSH
18893: LD_INT 1
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18934: LD_ADDR_VAR 0 50
18938: PUSH
18939: LD_INT 0
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 1
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19078: LD_ADDR_VAR 0 51
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 0
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 1
19106: PUSH
19107: LD_INT 0
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: LD_INT 1
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 0
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: NEG
19137: PUSH
19138: LD_INT 0
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: LD_INT 2
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 0
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: LD_INT 0
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 2
19201: NEG
19202: PUSH
19203: LD_INT 1
19205: NEG
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19225: LD_ADDR_VAR 0 52
19229: PUSH
19230: LD_INT 0
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: LD_INT 1
19245: NEG
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 1
19263: PUSH
19264: LD_INT 1
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 0
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: LD_INT 1
19283: NEG
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 1
19294: NEG
19295: PUSH
19296: LD_INT 1
19298: NEG
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 2
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: LD_INT 1
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 2
19329: NEG
19330: PUSH
19331: LD_INT 0
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 1
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: NEG
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19376: LD_ADDR_VAR 0 53
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 0
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: PUSH
19402: LD_INT 1
19404: PUSH
19405: LD_INT 0
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 1
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: PUSH
19422: LD_INT 0
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 1
19434: NEG
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: PUSH
19481: LD_INT 1
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: LD_INT 0
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 2
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 2
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 0
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 1
19541: NEG
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: LD_INT 2
19552: NEG
19553: PUSH
19554: LD_INT 0
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 2
19563: NEG
19564: PUSH
19565: LD_INT 1
19567: NEG
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19606: LD_ADDR_VAR 0 54
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 1
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: PUSH
19645: LD_INT 1
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: LD_INT 1
19664: NEG
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: LD_INT 2
19691: NEG
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 0
19699: PUSH
19700: LD_INT 2
19702: NEG
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: LD_INT 0
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 2
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 2
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: LD_INT 0
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: NEG
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19836: LD_ADDR_VAR 0 55
19840: PUSH
19841: LD_INT 0
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 0
19853: PUSH
19854: LD_INT 1
19856: NEG
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 1
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 0
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 1
19894: NEG
19895: PUSH
19896: LD_INT 0
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: LD_INT 1
19909: NEG
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: LD_INT 2
19921: NEG
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 2
19932: NEG
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 0
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 2
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 2
20012: NEG
20013: PUSH
20014: LD_INT 0
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 2
20023: NEG
20024: PUSH
20025: LD_INT 1
20027: NEG
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20066: LD_ADDR_VAR 0 56
20070: PUSH
20071: LD_INT 0
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 0
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 1
20104: PUSH
20105: LD_INT 1
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: LD_INT 0
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: LD_INT 1
20124: NEG
20125: PUSH
20126: LD_INT 0
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: LD_INT 1
20139: NEG
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: LD_INT 2
20151: NEG
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 0
20159: PUSH
20160: LD_INT 2
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 2
20181: PUSH
20182: LD_INT 0
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 2
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: NEG
20243: PUSH
20244: LD_INT 0
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: NEG
20254: PUSH
20255: LD_INT 1
20257: NEG
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: LIST
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20296: LD_ADDR_VAR 0 57
20300: PUSH
20301: LD_INT 0
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: PUSH
20322: LD_INT 1
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 1
20334: PUSH
20335: LD_INT 1
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 0
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: LD_INT 1
20354: NEG
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: LD_INT 1
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: LD_INT 2
20381: NEG
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 0
20389: PUSH
20390: LD_INT 2
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 0
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 2
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 2
20472: NEG
20473: PUSH
20474: LD_INT 0
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 2
20483: NEG
20484: PUSH
20485: LD_INT 1
20487: NEG
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 2
20495: NEG
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20526: LD_ADDR_VAR 0 58
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 1
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: LD_INT 0
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 1
20584: NEG
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 1
20595: NEG
20596: PUSH
20597: LD_INT 1
20599: NEG
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 2
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 2
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 2
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 2
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 2
20702: NEG
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 2
20713: NEG
20714: PUSH
20715: LD_INT 1
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20756: LD_ADDR_VAR 0 59
20760: PUSH
20761: LD_INT 0
20763: PUSH
20764: LD_INT 0
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 0
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 1
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: LD_INT 1
20794: PUSH
20795: LD_INT 1
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: LD_INT 1
20814: NEG
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: LD_INT 1
20829: NEG
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20844: LD_ADDR_VAR 0 60
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 0
20861: PUSH
20862: LD_INT 1
20864: NEG
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 1
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 0
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 1
20902: NEG
20903: PUSH
20904: LD_INT 0
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: LD_INT 1
20917: NEG
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: LIST
20929: LIST
20930: LIST
20931: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20932: LD_ADDR_VAR 0 61
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 0
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 0
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 1
20990: NEG
20991: PUSH
20992: LD_INT 0
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21020: LD_ADDR_VAR 0 62
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21108: LD_ADDR_VAR 0 63
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21196: LD_ADDR_VAR 0 64
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: ST_TO_ADDR
// end ; 1 :
21284: GO 27181
21286: LD_INT 1
21288: DOUBLE
21289: EQUAL
21290: IFTRUE 21294
21292: GO 23917
21294: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21295: LD_ADDR_VAR 0 11
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: LD_INT 3
21306: NEG
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: LD_INT 3
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: LIST
21338: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21339: LD_ADDR_VAR 0 12
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: LD_INT 1
21349: NEG
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 3
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 3
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21380: LD_ADDR_VAR 0 13
21384: PUSH
21385: LD_INT 3
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 3
21397: PUSH
21398: LD_INT 3
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: LD_INT 3
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21420: LD_ADDR_VAR 0 14
21424: PUSH
21425: LD_INT 1
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: LD_INT 3
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 1
21447: NEG
21448: PUSH
21449: LD_INT 2
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: LIST
21460: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21461: LD_ADDR_VAR 0 15
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: LD_INT 1
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 3
21479: NEG
21480: PUSH
21481: LD_INT 0
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: LD_INT 3
21490: NEG
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: LIST
21504: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21505: LD_ADDR_VAR 0 16
21509: PUSH
21510: LD_INT 2
21512: NEG
21513: PUSH
21514: LD_INT 3
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 3
21524: NEG
21525: PUSH
21526: LD_INT 2
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 3
21536: NEG
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: LIST
21550: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21551: LD_ADDR_VAR 0 17
21555: PUSH
21556: LD_INT 1
21558: NEG
21559: PUSH
21560: LD_INT 3
21562: NEG
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: LD_INT 3
21573: NEG
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: PUSH
21582: LD_INT 2
21584: NEG
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: LIST
21594: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21595: LD_ADDR_VAR 0 18
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 3
21623: PUSH
21624: LD_INT 1
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: LIST
21635: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21636: LD_ADDR_VAR 0 19
21640: PUSH
21641: LD_INT 3
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 3
21653: PUSH
21654: LD_INT 3
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 3
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21676: LD_ADDR_VAR 0 20
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 0
21693: PUSH
21694: LD_INT 3
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: LD_INT 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: LIST
21716: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21717: LD_ADDR_VAR 0 21
21721: PUSH
21722: LD_INT 2
21724: NEG
21725: PUSH
21726: LD_INT 1
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 3
21735: NEG
21736: PUSH
21737: LD_INT 0
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 3
21746: NEG
21747: PUSH
21748: LD_INT 1
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21761: LD_ADDR_VAR 0 22
21765: PUSH
21766: LD_INT 2
21768: NEG
21769: PUSH
21770: LD_INT 3
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 3
21780: NEG
21781: PUSH
21782: LD_INT 2
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 3
21792: NEG
21793: PUSH
21794: LD_INT 3
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21807: LD_ADDR_VAR 0 23
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: LD_INT 4
21829: NEG
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: LD_INT 3
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: LIST
21850: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21851: LD_ADDR_VAR 0 24
21855: PUSH
21856: LD_INT 3
21858: PUSH
21859: LD_INT 0
21861: PUSH
21862: EMPTY
21863: LIST
21864: LIST
21865: PUSH
21866: LD_INT 3
21868: PUSH
21869: LD_INT 1
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 4
21879: PUSH
21880: LD_INT 1
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21892: LD_ADDR_VAR 0 25
21896: PUSH
21897: LD_INT 3
21899: PUSH
21900: LD_INT 3
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 4
21909: PUSH
21910: LD_INT 3
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 3
21919: PUSH
21920: LD_INT 4
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21932: LD_ADDR_VAR 0 26
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 1
21959: NEG
21960: PUSH
21961: LD_INT 3
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21973: LD_ADDR_VAR 0 27
21977: PUSH
21978: LD_INT 3
21980: NEG
21981: PUSH
21982: LD_INT 0
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 3
21991: NEG
21992: PUSH
21993: LD_INT 1
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 4
22002: NEG
22003: PUSH
22004: LD_INT 1
22006: NEG
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22017: LD_ADDR_VAR 0 28
22021: PUSH
22022: LD_INT 3
22024: NEG
22025: PUSH
22026: LD_INT 3
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 3
22036: NEG
22037: PUSH
22038: LD_INT 4
22040: NEG
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 4
22048: NEG
22049: PUSH
22050: LD_INT 3
22052: NEG
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: LIST
22062: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22063: LD_ADDR_VAR 0 29
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 3
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 3
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: NEG
22105: PUSH
22106: LD_INT 4
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 0
22116: PUSH
22117: LD_INT 4
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: PUSH
22128: LD_INT 3
22130: NEG
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 5
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 5
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 4
22164: NEG
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 1
22172: NEG
22173: PUSH
22174: LD_INT 6
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 0
22184: PUSH
22185: LD_INT 6
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: LD_INT 5
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22218: LD_ADDR_VAR 0 30
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: LD_INT 1
22228: NEG
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 3
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 3
22256: PUSH
22257: LD_INT 1
22259: NEG
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 4
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 4
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 4
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 5
22298: PUSH
22299: LD_INT 0
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 5
22308: PUSH
22309: LD_INT 1
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 5
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 6
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 6
22339: PUSH
22340: LD_INT 1
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22361: LD_ADDR_VAR 0 31
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: LD_INT 2
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: LD_INT 3
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 2
22388: PUSH
22389: LD_INT 3
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 4
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 4
22408: PUSH
22409: LD_INT 4
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 3
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 5
22428: PUSH
22429: LD_INT 4
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 5
22438: PUSH
22439: LD_INT 5
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 4
22448: PUSH
22449: LD_INT 5
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 6
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 6
22468: PUSH
22469: LD_INT 6
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 5
22478: PUSH
22479: LD_INT 6
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22500: LD_ADDR_VAR 0 32
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 0
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 4
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 0
22548: PUSH
22549: LD_INT 4
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: NEG
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 5
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: LD_INT 5
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 1
22589: NEG
22590: PUSH
22591: LD_INT 4
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: PUSH
22601: LD_INT 6
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: LD_INT 6
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 1
22620: NEG
22621: PUSH
22622: LD_INT 5
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22643: LD_ADDR_VAR 0 33
22647: PUSH
22648: LD_INT 2
22650: NEG
22651: PUSH
22652: LD_INT 1
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 3
22661: NEG
22662: PUSH
22663: LD_INT 0
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 3
22672: NEG
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 3
22684: NEG
22685: PUSH
22686: LD_INT 1
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 4
22695: NEG
22696: PUSH
22697: LD_INT 0
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 4
22706: NEG
22707: PUSH
22708: LD_INT 1
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 4
22718: NEG
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 5
22729: NEG
22730: PUSH
22731: LD_INT 0
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 5
22740: NEG
22741: PUSH
22742: LD_INT 1
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 5
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 6
22763: NEG
22764: PUSH
22765: LD_INT 0
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 6
22774: NEG
22775: PUSH
22776: LD_INT 1
22778: NEG
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22798: LD_ADDR_VAR 0 34
22802: PUSH
22803: LD_INT 2
22805: NEG
22806: PUSH
22807: LD_INT 3
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 3
22817: NEG
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 3
22829: NEG
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 3
22841: NEG
22842: PUSH
22843: LD_INT 4
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 4
22853: NEG
22854: PUSH
22855: LD_INT 3
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 4
22865: NEG
22866: PUSH
22867: LD_INT 4
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 4
22877: NEG
22878: PUSH
22879: LD_INT 5
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 5
22889: NEG
22890: PUSH
22891: LD_INT 4
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 5
22901: NEG
22902: PUSH
22903: LD_INT 5
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 5
22913: NEG
22914: PUSH
22915: LD_INT 6
22917: NEG
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 6
22925: NEG
22926: PUSH
22927: LD_INT 5
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 6
22937: NEG
22938: PUSH
22939: LD_INT 6
22941: NEG
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22961: LD_ADDR_VAR 0 41
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 2
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 1
22979: NEG
22980: PUSH
22981: LD_INT 3
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23005: LD_ADDR_VAR 0 42
23009: PUSH
23010: LD_INT 2
23012: PUSH
23013: LD_INT 0
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 2
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23046: LD_ADDR_VAR 0 43
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 2
23073: PUSH
23074: LD_INT 3
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23086: LD_ADDR_VAR 0 44
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23127: LD_ADDR_VAR 0 45
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 2
23145: NEG
23146: PUSH
23147: LD_INT 1
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 3
23156: NEG
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: LIST
23170: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23171: LD_ADDR_VAR 0 46
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: LD_INT 3
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 3
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: LIST
23216: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23217: LD_ADDR_VAR 0 47
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: LD_INT 3
23228: NEG
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 1
23236: NEG
23237: PUSH
23238: LD_INT 3
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23250: LD_ADDR_VAR 0 48
23254: PUSH
23255: LD_INT 1
23257: PUSH
23258: LD_INT 2
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23281: LD_ADDR_VAR 0 49
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 1
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 3
23298: PUSH
23299: LD_INT 2
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23310: LD_ADDR_VAR 0 50
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 3
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23339: LD_ADDR_VAR 0 51
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 2
23357: NEG
23358: PUSH
23359: LD_INT 1
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23370: LD_ADDR_VAR 0 52
23374: PUSH
23375: LD_INT 3
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 3
23389: NEG
23390: PUSH
23391: LD_INT 2
23393: NEG
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23403: LD_ADDR_VAR 0 53
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 3
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 3
23425: NEG
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23447: LD_ADDR_VAR 0 54
23451: PUSH
23452: LD_INT 2
23454: PUSH
23455: LD_INT 1
23457: NEG
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PUSH
23463: LD_INT 3
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 3
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: LIST
23487: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23488: LD_ADDR_VAR 0 55
23492: PUSH
23493: LD_INT 3
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 3
23505: PUSH
23506: LD_INT 3
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 2
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23528: LD_ADDR_VAR 0 56
23532: PUSH
23533: LD_INT 1
23535: PUSH
23536: LD_INT 3
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 0
23545: PUSH
23546: LD_INT 3
23548: PUSH
23549: EMPTY
23550: LIST
23551: LIST
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: LD_INT 2
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23569: LD_ADDR_VAR 0 57
23573: PUSH
23574: LD_INT 2
23576: NEG
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 3
23587: NEG
23588: PUSH
23589: LD_INT 0
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 3
23598: NEG
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23613: LD_ADDR_VAR 0 58
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: LD_INT 3
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 3
23632: NEG
23633: PUSH
23634: LD_INT 2
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 3
23644: NEG
23645: PUSH
23646: LD_INT 3
23648: NEG
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23659: LD_ADDR_VAR 0 59
23663: PUSH
23664: LD_INT 1
23666: NEG
23667: PUSH
23668: LD_INT 2
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 0
23678: PUSH
23679: LD_INT 2
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23703: LD_ADDR_VAR 0 60
23707: PUSH
23708: LD_INT 1
23710: PUSH
23711: LD_INT 1
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 2
23731: PUSH
23732: LD_INT 1
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23744: LD_ADDR_VAR 0 61
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 2
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23784: LD_ADDR_VAR 0 62
23788: PUSH
23789: LD_INT 1
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 1
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23825: LD_ADDR_VAR 0 63
23829: PUSH
23830: LD_INT 1
23832: NEG
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 2
23843: NEG
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 2
23854: NEG
23855: PUSH
23856: LD_INT 1
23858: NEG
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: LIST
23868: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23869: LD_ADDR_VAR 0 64
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 2
23888: NEG
23889: PUSH
23890: LD_INT 1
23892: NEG
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: NEG
23901: PUSH
23902: LD_INT 2
23904: NEG
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: ST_TO_ADDR
// end ; 2 :
23915: GO 27181
23917: LD_INT 2
23919: DOUBLE
23920: EQUAL
23921: IFTRUE 23925
23923: GO 27180
23925: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23926: LD_ADDR_VAR 0 29
23930: PUSH
23931: LD_INT 4
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 4
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 5
23954: PUSH
23955: LD_INT 0
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 5
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 4
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 3
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 3
23994: PUSH
23995: LD_INT 1
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: LD_INT 2
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 5
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 4
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 4
24056: PUSH
24057: LD_INT 4
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 3
24066: PUSH
24067: LD_INT 4
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: LD_INT 2
24086: PUSH
24087: LD_INT 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 4
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 2
24106: PUSH
24107: LD_INT 4
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: LD_INT 4
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 0
24126: PUSH
24127: LD_INT 3
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: LD_INT 4
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: PUSH
24147: LD_INT 5
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 5
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: NEG
24167: PUSH
24168: LD_INT 4
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: PUSH
24189: LD_INT 5
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: NEG
24199: PUSH
24200: LD_INT 3
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 3
24209: NEG
24210: PUSH
24211: LD_INT 0
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 3
24220: NEG
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 2
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 2
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 3
24254: NEG
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 4
24265: NEG
24266: PUSH
24267: LD_INT 0
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 4
24276: NEG
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 4
24288: NEG
24289: PUSH
24290: LD_INT 2
24292: NEG
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 4
24311: NEG
24312: PUSH
24313: LD_INT 4
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 4
24323: NEG
24324: PUSH
24325: LD_INT 5
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 3
24335: NEG
24336: PUSH
24337: LD_INT 4
24339: NEG
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 3
24347: NEG
24348: PUSH
24349: LD_INT 3
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 4
24359: NEG
24360: PUSH
24361: LD_INT 3
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 5
24371: NEG
24372: PUSH
24373: LD_INT 4
24375: NEG
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 5
24383: NEG
24384: PUSH
24385: LD_INT 5
24387: NEG
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 3
24395: NEG
24396: PUSH
24397: LD_INT 5
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 5
24407: NEG
24408: PUSH
24409: LD_INT 3
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24464: LD_ADDR_VAR 0 30
24468: PUSH
24469: LD_INT 4
24471: PUSH
24472: LD_INT 4
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 4
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 5
24491: PUSH
24492: LD_INT 4
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 5
24501: PUSH
24502: LD_INT 5
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 4
24511: PUSH
24512: LD_INT 5
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 3
24521: PUSH
24522: LD_INT 4
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 5
24541: PUSH
24542: LD_INT 3
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 3
24551: PUSH
24552: LD_INT 5
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 0
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 0
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 4
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 4
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 3
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 4
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: NEG
24644: PUSH
24645: LD_INT 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 4
24654: NEG
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: LD_INT 4
24665: NEG
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 3
24677: NEG
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 3
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 4
24699: NEG
24700: PUSH
24701: LD_INT 1
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 5
24710: NEG
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 5
24721: NEG
24722: PUSH
24723: LD_INT 1
24725: NEG
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 5
24733: NEG
24734: PUSH
24735: LD_INT 2
24737: NEG
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 3
24745: NEG
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 3
24756: NEG
24757: PUSH
24758: LD_INT 3
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: LD_INT 4
24772: NEG
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 2
24780: NEG
24781: PUSH
24782: LD_INT 3
24784: NEG
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: LD_INT 2
24792: NEG
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: NEG
24805: PUSH
24806: LD_INT 2
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 4
24816: NEG
24817: PUSH
24818: LD_INT 3
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 4
24828: NEG
24829: PUSH
24830: LD_INT 4
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: LD_INT 4
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 4
24852: NEG
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: LD_INT 4
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 5
24878: NEG
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 4
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 3
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 0
24908: PUSH
24909: LD_INT 3
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: NEG
24920: PUSH
24921: LD_INT 4
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: NEG
24932: PUSH
24933: LD_INT 5
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 3
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 5
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25011: LD_ADDR_VAR 0 31
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 4
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: LD_INT 3
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: LD_INT 4
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 5
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 5
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: LD_INT 4
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 1
25079: NEG
25080: PUSH
25081: LD_INT 3
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 2
25090: PUSH
25091: LD_INT 5
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: LD_INT 3
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 3
25111: NEG
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 3
25122: NEG
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: NEG
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: NEG
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 3
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 4
25167: NEG
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 4
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 4
25190: NEG
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 4
25213: NEG
25214: PUSH
25215: LD_INT 4
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 4
25225: NEG
25226: PUSH
25227: LD_INT 5
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 3
25237: NEG
25238: PUSH
25239: LD_INT 4
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 3
25249: NEG
25250: PUSH
25251: LD_INT 3
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 4
25261: NEG
25262: PUSH
25263: LD_INT 3
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 5
25273: NEG
25274: PUSH
25275: LD_INT 4
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 5
25285: NEG
25286: PUSH
25287: LD_INT 5
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 3
25297: NEG
25298: PUSH
25299: LD_INT 5
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 5
25309: NEG
25310: PUSH
25311: LD_INT 3
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 3
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: LD_INT 4
25335: NEG
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: PUSH
25344: LD_INT 3
25346: NEG
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: NEG
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 0
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 1
25376: NEG
25377: PUSH
25378: LD_INT 3
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 4
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 2
25400: PUSH
25401: LD_INT 2
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 2
25411: NEG
25412: PUSH
25413: LD_INT 4
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 4
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 4
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 5
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 5
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 4
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 3
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 3
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 3
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 5
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25561: LD_ADDR_VAR 0 32
25565: PUSH
25566: LD_INT 4
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 4
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 3
25591: NEG
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 3
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 4
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 5
25624: NEG
25625: PUSH
25626: LD_INT 0
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 5
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 5
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 3
25659: NEG
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 3
25670: NEG
25671: PUSH
25672: LD_INT 3
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 3
25682: NEG
25683: PUSH
25684: LD_INT 4
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 2
25694: NEG
25695: PUSH
25696: LD_INT 3
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 2
25706: NEG
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 3
25718: NEG
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 4
25730: NEG
25731: PUSH
25732: LD_INT 3
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 4
25742: NEG
25743: PUSH
25744: LD_INT 4
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 2
25754: NEG
25755: PUSH
25756: LD_INT 4
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 4
25766: NEG
25767: PUSH
25768: LD_INT 2
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: LD_INT 4
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: LD_INT 5
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: LD_INT 4
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 3
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 3
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: NEG
25834: PUSH
25835: LD_INT 4
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: LD_INT 5
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 3
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: LD_INT 5
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 3
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 4
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 1
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 3
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 2
25941: PUSH
25942: LD_INT 1
25944: NEG
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 2
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 4
25963: PUSH
25964: LD_INT 2
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 4
25973: PUSH
25974: LD_INT 4
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 4
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 5
25993: PUSH
25994: LD_INT 4
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 5
26003: PUSH
26004: LD_INT 5
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 4
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 3
26023: PUSH
26024: LD_INT 4
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 3
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 5
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 3
26053: PUSH
26054: LD_INT 5
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26108: LD_ADDR_VAR 0 33
26112: PUSH
26113: LD_INT 4
26115: NEG
26116: PUSH
26117: LD_INT 4
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 4
26127: NEG
26128: PUSH
26129: LD_INT 5
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: LD_INT 3
26139: NEG
26140: PUSH
26141: LD_INT 4
26143: NEG
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 3
26151: NEG
26152: PUSH
26153: LD_INT 3
26155: NEG
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 4
26163: NEG
26164: PUSH
26165: LD_INT 3
26167: NEG
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 5
26175: NEG
26176: PUSH
26177: LD_INT 4
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 5
26187: NEG
26188: PUSH
26189: LD_INT 5
26191: NEG
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 3
26199: NEG
26200: PUSH
26201: LD_INT 5
26203: NEG
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 5
26211: NEG
26212: PUSH
26213: LD_INT 3
26215: NEG
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 0
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: LD_INT 4
26237: NEG
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 3
26248: NEG
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 3
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 4
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 4
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 4
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 4
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 5
26346: PUSH
26347: LD_INT 0
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 5
26356: PUSH
26357: LD_INT 1
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 4
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 3
26397: PUSH
26398: LD_INT 2
26400: NEG
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 5
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 3
26418: PUSH
26419: LD_INT 3
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 3
26428: PUSH
26429: LD_INT 2
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 4
26438: PUSH
26439: LD_INT 3
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 4
26448: PUSH
26449: LD_INT 4
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 3
26458: PUSH
26459: LD_INT 4
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 3
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 4
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: LD_INT 4
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: LD_INT 3
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 1
26528: PUSH
26529: LD_INT 4
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: LD_INT 5
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 0
26548: PUSH
26549: LD_INT 5
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 1
26558: NEG
26559: PUSH
26560: LD_INT 4
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 1
26569: NEG
26570: PUSH
26571: LD_INT 3
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: LD_INT 5
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 2
26590: NEG
26591: PUSH
26592: LD_INT 3
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26646: LD_ADDR_VAR 0 34
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 4
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: LD_INT 5
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 4
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 3
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 0
26697: PUSH
26698: LD_INT 3
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 4
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 5
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 3
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: LD_INT 5
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 3
26755: PUSH
26756: LD_INT 0
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 3
26765: PUSH
26766: LD_INT 1
26768: NEG
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 4
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 4
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 3
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: LD_INT 1
26819: NEG
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 2
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 4
26838: PUSH
26839: LD_INT 2
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 4
26848: PUSH
26849: LD_INT 4
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 4
26858: PUSH
26859: LD_INT 3
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 5
26868: PUSH
26869: LD_INT 4
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 5
26878: PUSH
26879: LD_INT 5
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 4
26888: PUSH
26889: LD_INT 5
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: LD_INT 4
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 5
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: LD_INT 5
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 0
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 4
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 4
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: LD_INT 4
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 2
27020: NEG
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 4
27031: NEG
27032: PUSH
27033: LD_INT 0
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 4
27042: NEG
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 3
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 3
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 4
27076: NEG
27077: PUSH
27078: LD_INT 1
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 5
27087: NEG
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 5
27098: NEG
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 5
27110: NEG
27111: PUSH
27112: LD_INT 2
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: NEG
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: ST_TO_ADDR
// end ; end ;
27178: GO 27181
27180: POP
// case btype of b_depot , b_warehouse :
27181: LD_VAR 0 1
27185: PUSH
27186: LD_INT 0
27188: DOUBLE
27189: EQUAL
27190: IFTRUE 27200
27192: LD_INT 1
27194: DOUBLE
27195: EQUAL
27196: IFTRUE 27200
27198: GO 27401
27200: POP
// case nation of nation_american :
27201: LD_VAR 0 5
27205: PUSH
27206: LD_INT 1
27208: DOUBLE
27209: EQUAL
27210: IFTRUE 27214
27212: GO 27270
27214: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27215: LD_ADDR_VAR 0 9
27219: PUSH
27220: LD_VAR 0 11
27224: PUSH
27225: LD_VAR 0 12
27229: PUSH
27230: LD_VAR 0 13
27234: PUSH
27235: LD_VAR 0 14
27239: PUSH
27240: LD_VAR 0 15
27244: PUSH
27245: LD_VAR 0 16
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: PUSH
27258: LD_VAR 0 4
27262: PUSH
27263: LD_INT 1
27265: PLUS
27266: ARRAY
27267: ST_TO_ADDR
27268: GO 27399
27270: LD_INT 2
27272: DOUBLE
27273: EQUAL
27274: IFTRUE 27278
27276: GO 27334
27278: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27279: LD_ADDR_VAR 0 9
27283: PUSH
27284: LD_VAR 0 17
27288: PUSH
27289: LD_VAR 0 18
27293: PUSH
27294: LD_VAR 0 19
27298: PUSH
27299: LD_VAR 0 20
27303: PUSH
27304: LD_VAR 0 21
27308: PUSH
27309: LD_VAR 0 22
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: PUSH
27322: LD_VAR 0 4
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: ARRAY
27331: ST_TO_ADDR
27332: GO 27399
27334: LD_INT 3
27336: DOUBLE
27337: EQUAL
27338: IFTRUE 27342
27340: GO 27398
27342: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27343: LD_ADDR_VAR 0 9
27347: PUSH
27348: LD_VAR 0 23
27352: PUSH
27353: LD_VAR 0 24
27357: PUSH
27358: LD_VAR 0 25
27362: PUSH
27363: LD_VAR 0 26
27367: PUSH
27368: LD_VAR 0 27
27372: PUSH
27373: LD_VAR 0 28
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: PUSH
27386: LD_VAR 0 4
27390: PUSH
27391: LD_INT 1
27393: PLUS
27394: ARRAY
27395: ST_TO_ADDR
27396: GO 27399
27398: POP
27399: GO 27948
27401: LD_INT 2
27403: DOUBLE
27404: EQUAL
27405: IFTRUE 27415
27407: LD_INT 3
27409: DOUBLE
27410: EQUAL
27411: IFTRUE 27415
27413: GO 27471
27415: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27416: LD_ADDR_VAR 0 9
27420: PUSH
27421: LD_VAR 0 29
27425: PUSH
27426: LD_VAR 0 30
27430: PUSH
27431: LD_VAR 0 31
27435: PUSH
27436: LD_VAR 0 32
27440: PUSH
27441: LD_VAR 0 33
27445: PUSH
27446: LD_VAR 0 34
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: PUSH
27459: LD_VAR 0 4
27463: PUSH
27464: LD_INT 1
27466: PLUS
27467: ARRAY
27468: ST_TO_ADDR
27469: GO 27948
27471: LD_INT 16
27473: DOUBLE
27474: EQUAL
27475: IFTRUE 27527
27477: LD_INT 17
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27527
27483: LD_INT 18
27485: DOUBLE
27486: EQUAL
27487: IFTRUE 27527
27489: LD_INT 19
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27527
27495: LD_INT 20
27497: DOUBLE
27498: EQUAL
27499: IFTRUE 27527
27501: LD_INT 21
27503: DOUBLE
27504: EQUAL
27505: IFTRUE 27527
27507: LD_INT 23
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27527
27513: LD_INT 24
27515: DOUBLE
27516: EQUAL
27517: IFTRUE 27527
27519: LD_INT 25
27521: DOUBLE
27522: EQUAL
27523: IFTRUE 27527
27525: GO 27583
27527: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27528: LD_ADDR_VAR 0 9
27532: PUSH
27533: LD_VAR 0 35
27537: PUSH
27538: LD_VAR 0 36
27542: PUSH
27543: LD_VAR 0 37
27547: PUSH
27548: LD_VAR 0 38
27552: PUSH
27553: LD_VAR 0 39
27557: PUSH
27558: LD_VAR 0 40
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: PUSH
27571: LD_VAR 0 4
27575: PUSH
27576: LD_INT 1
27578: PLUS
27579: ARRAY
27580: ST_TO_ADDR
27581: GO 27948
27583: LD_INT 6
27585: DOUBLE
27586: EQUAL
27587: IFTRUE 27639
27589: LD_INT 7
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27639
27595: LD_INT 8
27597: DOUBLE
27598: EQUAL
27599: IFTRUE 27639
27601: LD_INT 13
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27639
27607: LD_INT 12
27609: DOUBLE
27610: EQUAL
27611: IFTRUE 27639
27613: LD_INT 15
27615: DOUBLE
27616: EQUAL
27617: IFTRUE 27639
27619: LD_INT 11
27621: DOUBLE
27622: EQUAL
27623: IFTRUE 27639
27625: LD_INT 14
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27639
27631: LD_INT 10
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27639
27637: GO 27695
27639: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_VAR 0 41
27649: PUSH
27650: LD_VAR 0 42
27654: PUSH
27655: LD_VAR 0 43
27659: PUSH
27660: LD_VAR 0 44
27664: PUSH
27665: LD_VAR 0 45
27669: PUSH
27670: LD_VAR 0 46
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: PUSH
27683: LD_VAR 0 4
27687: PUSH
27688: LD_INT 1
27690: PLUS
27691: ARRAY
27692: ST_TO_ADDR
27693: GO 27948
27695: LD_INT 36
27697: DOUBLE
27698: EQUAL
27699: IFTRUE 27703
27701: GO 27759
27703: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_VAR 0 47
27713: PUSH
27714: LD_VAR 0 48
27718: PUSH
27719: LD_VAR 0 49
27723: PUSH
27724: LD_VAR 0 50
27728: PUSH
27729: LD_VAR 0 51
27733: PUSH
27734: LD_VAR 0 52
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: PUSH
27747: LD_VAR 0 4
27751: PUSH
27752: LD_INT 1
27754: PLUS
27755: ARRAY
27756: ST_TO_ADDR
27757: GO 27948
27759: LD_INT 4
27761: DOUBLE
27762: EQUAL
27763: IFTRUE 27785
27765: LD_INT 5
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27785
27771: LD_INT 34
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27785
27777: LD_INT 37
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27785
27783: GO 27841
27785: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27786: LD_ADDR_VAR 0 9
27790: PUSH
27791: LD_VAR 0 53
27795: PUSH
27796: LD_VAR 0 54
27800: PUSH
27801: LD_VAR 0 55
27805: PUSH
27806: LD_VAR 0 56
27810: PUSH
27811: LD_VAR 0 57
27815: PUSH
27816: LD_VAR 0 58
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: PUSH
27829: LD_VAR 0 4
27833: PUSH
27834: LD_INT 1
27836: PLUS
27837: ARRAY
27838: ST_TO_ADDR
27839: GO 27948
27841: LD_INT 31
27843: DOUBLE
27844: EQUAL
27845: IFTRUE 27891
27847: LD_INT 32
27849: DOUBLE
27850: EQUAL
27851: IFTRUE 27891
27853: LD_INT 33
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27891
27859: LD_INT 27
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27891
27865: LD_INT 26
27867: DOUBLE
27868: EQUAL
27869: IFTRUE 27891
27871: LD_INT 28
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27891
27877: LD_INT 29
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27891
27883: LD_INT 30
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27947
27891: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27892: LD_ADDR_VAR 0 9
27896: PUSH
27897: LD_VAR 0 59
27901: PUSH
27902: LD_VAR 0 60
27906: PUSH
27907: LD_VAR 0 61
27911: PUSH
27912: LD_VAR 0 62
27916: PUSH
27917: LD_VAR 0 63
27921: PUSH
27922: LD_VAR 0 64
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: PUSH
27935: LD_VAR 0 4
27939: PUSH
27940: LD_INT 1
27942: PLUS
27943: ARRAY
27944: ST_TO_ADDR
27945: GO 27948
27947: POP
// temp_list2 = [ ] ;
27948: LD_ADDR_VAR 0 10
27952: PUSH
27953: EMPTY
27954: ST_TO_ADDR
// for i in temp_list do
27955: LD_ADDR_VAR 0 8
27959: PUSH
27960: LD_VAR 0 9
27964: PUSH
27965: FOR_IN
27966: IFFALSE 28018
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27968: LD_ADDR_VAR 0 10
27972: PUSH
27973: LD_VAR 0 10
27977: PUSH
27978: LD_VAR 0 8
27982: PUSH
27983: LD_INT 1
27985: ARRAY
27986: PUSH
27987: LD_VAR 0 2
27991: PLUS
27992: PUSH
27993: LD_VAR 0 8
27997: PUSH
27998: LD_INT 2
28000: ARRAY
28001: PUSH
28002: LD_VAR 0 3
28006: PLUS
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: EMPTY
28013: LIST
28014: ADD
28015: ST_TO_ADDR
28016: GO 27965
28018: POP
28019: POP
// result = temp_list2 ;
28020: LD_ADDR_VAR 0 7
28024: PUSH
28025: LD_VAR 0 10
28029: ST_TO_ADDR
// end ;
28030: LD_VAR 0 7
28034: RET
// export function EnemyInRange ( unit , dist ) ; begin
28035: LD_INT 0
28037: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28038: LD_ADDR_VAR 0 3
28042: PUSH
28043: LD_VAR 0 1
28047: PPUSH
28048: CALL_OW 255
28052: PPUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 250
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 251
28072: PPUSH
28073: LD_VAR 0 2
28077: PPUSH
28078: CALL 3669 0 4
28082: PUSH
28083: LD_INT 4
28085: ARRAY
28086: ST_TO_ADDR
// end ;
28087: LD_VAR 0 3
28091: RET
// export function PlayerSeeMe ( unit ) ; begin
28092: LD_INT 0
28094: PPUSH
// result := See ( your_side , unit ) ;
28095: LD_ADDR_VAR 0 2
28099: PUSH
28100: LD_OWVAR 2
28104: PPUSH
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL_OW 292
28114: ST_TO_ADDR
// end ;
28115: LD_VAR 0 2
28119: RET
// export function ReverseDir ( unit ) ; begin
28120: LD_INT 0
28122: PPUSH
// if not unit then
28123: LD_VAR 0 1
28127: NOT
28128: IFFALSE 28132
// exit ;
28130: GO 28178
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28132: LD_ADDR_VAR 0 2
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 4
28142: PUSH
28143: LD_INT 5
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: PUSH
28163: LD_VAR 0 1
28167: PPUSH
28168: CALL_OW 254
28172: PUSH
28173: LD_INT 1
28175: PLUS
28176: ARRAY
28177: ST_TO_ADDR
// end ;
28178: LD_VAR 0 2
28182: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28183: LD_INT 0
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
// if not hexes then
28190: LD_VAR 0 2
28194: NOT
28195: IFFALSE 28199
// exit ;
28197: GO 28347
// dist := 9999 ;
28199: LD_ADDR_VAR 0 5
28203: PUSH
28204: LD_INT 9999
28206: ST_TO_ADDR
// for i = 1 to hexes do
28207: LD_ADDR_VAR 0 4
28211: PUSH
28212: DOUBLE
28213: LD_INT 1
28215: DEC
28216: ST_TO_ADDR
28217: LD_VAR 0 2
28221: PUSH
28222: FOR_TO
28223: IFFALSE 28335
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_VAR 0 2
28234: PUSH
28235: LD_VAR 0 4
28239: ARRAY
28240: PUSH
28241: LD_INT 1
28243: ARRAY
28244: PPUSH
28245: LD_VAR 0 2
28249: PUSH
28250: LD_VAR 0 4
28254: ARRAY
28255: PUSH
28256: LD_INT 2
28258: ARRAY
28259: PPUSH
28260: CALL_OW 297
28264: PUSH
28265: LD_VAR 0 5
28269: LESS
28270: IFFALSE 28333
// begin hex := hexes [ i ] ;
28272: LD_ADDR_VAR 0 7
28276: PUSH
28277: LD_VAR 0 2
28281: PUSH
28282: LD_VAR 0 4
28286: ARRAY
28287: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28288: LD_ADDR_VAR 0 5
28292: PUSH
28293: LD_VAR 0 1
28297: PPUSH
28298: LD_VAR 0 2
28302: PUSH
28303: LD_VAR 0 4
28307: ARRAY
28308: PUSH
28309: LD_INT 1
28311: ARRAY
28312: PPUSH
28313: LD_VAR 0 2
28317: PUSH
28318: LD_VAR 0 4
28322: ARRAY
28323: PUSH
28324: LD_INT 2
28326: ARRAY
28327: PPUSH
28328: CALL_OW 297
28332: ST_TO_ADDR
// end ; end ;
28333: GO 28222
28335: POP
28336: POP
// result := hex ;
28337: LD_ADDR_VAR 0 3
28341: PUSH
28342: LD_VAR 0 7
28346: ST_TO_ADDR
// end ;
28347: LD_VAR 0 3
28351: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28356: LD_VAR 0 1
28360: NOT
28361: PUSH
28362: LD_VAR 0 1
28366: PUSH
28367: LD_INT 21
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 23
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PPUSH
28391: CALL_OW 69
28395: IN
28396: NOT
28397: OR
28398: IFFALSE 28402
// exit ;
28400: GO 28449
// for i = 1 to 3 do
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: DOUBLE
28408: LD_INT 1
28410: DEC
28411: ST_TO_ADDR
28412: LD_INT 3
28414: PUSH
28415: FOR_TO
28416: IFFALSE 28447
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 250
28427: PPUSH
28428: LD_VAR 0 1
28432: PPUSH
28433: CALL_OW 251
28437: PPUSH
28438: LD_INT 1
28440: PPUSH
28441: CALL_OW 453
28445: GO 28415
28447: POP
28448: POP
// end ;
28449: LD_VAR 0 2
28453: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
28458: PPUSH
28459: PPUSH
28460: PPUSH
28461: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28462: LD_VAR 0 1
28466: NOT
28467: PUSH
28468: LD_VAR 0 2
28472: NOT
28473: OR
28474: PUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: CALL_OW 314
28484: OR
28485: IFFALSE 28489
// exit ;
28487: GO 28930
// x := GetX ( enemy_unit ) ;
28489: LD_ADDR_VAR 0 7
28493: PUSH
28494: LD_VAR 0 2
28498: PPUSH
28499: CALL_OW 250
28503: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28504: LD_ADDR_VAR 0 8
28508: PUSH
28509: LD_VAR 0 2
28513: PPUSH
28514: CALL_OW 251
28518: ST_TO_ADDR
// if not x or not y then
28519: LD_VAR 0 7
28523: NOT
28524: PUSH
28525: LD_VAR 0 8
28529: NOT
28530: OR
28531: IFFALSE 28535
// exit ;
28533: GO 28930
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28535: LD_ADDR_VAR 0 6
28539: PUSH
28540: LD_VAR 0 7
28544: PPUSH
28545: LD_INT 0
28547: PPUSH
28548: LD_INT 4
28550: PPUSH
28551: CALL_OW 272
28555: PUSH
28556: LD_VAR 0 8
28560: PPUSH
28561: LD_INT 0
28563: PPUSH
28564: LD_INT 4
28566: PPUSH
28567: CALL_OW 273
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_VAR 0 7
28580: PPUSH
28581: LD_INT 1
28583: PPUSH
28584: LD_INT 4
28586: PPUSH
28587: CALL_OW 272
28591: PUSH
28592: LD_VAR 0 8
28596: PPUSH
28597: LD_INT 1
28599: PPUSH
28600: LD_INT 4
28602: PPUSH
28603: CALL_OW 273
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_VAR 0 7
28616: PPUSH
28617: LD_INT 2
28619: PPUSH
28620: LD_INT 4
28622: PPUSH
28623: CALL_OW 272
28627: PUSH
28628: LD_VAR 0 8
28632: PPUSH
28633: LD_INT 2
28635: PPUSH
28636: LD_INT 4
28638: PPUSH
28639: CALL_OW 273
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_VAR 0 7
28652: PPUSH
28653: LD_INT 3
28655: PPUSH
28656: LD_INT 4
28658: PPUSH
28659: CALL_OW 272
28663: PUSH
28664: LD_VAR 0 8
28668: PPUSH
28669: LD_INT 3
28671: PPUSH
28672: LD_INT 4
28674: PPUSH
28675: CALL_OW 273
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_VAR 0 7
28688: PPUSH
28689: LD_INT 4
28691: PPUSH
28692: LD_INT 4
28694: PPUSH
28695: CALL_OW 272
28699: PUSH
28700: LD_VAR 0 8
28704: PPUSH
28705: LD_INT 4
28707: PPUSH
28708: LD_INT 4
28710: PPUSH
28711: CALL_OW 273
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_VAR 0 7
28724: PPUSH
28725: LD_INT 5
28727: PPUSH
28728: LD_INT 4
28730: PPUSH
28731: CALL_OW 272
28735: PUSH
28736: LD_VAR 0 8
28740: PPUSH
28741: LD_INT 5
28743: PPUSH
28744: LD_INT 4
28746: PPUSH
28747: CALL_OW 273
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: ST_TO_ADDR
// for i = tmp downto 1 do
28764: LD_ADDR_VAR 0 4
28768: PUSH
28769: DOUBLE
28770: LD_VAR 0 6
28774: INC
28775: ST_TO_ADDR
28776: LD_INT 1
28778: PUSH
28779: FOR_DOWNTO
28780: IFFALSE 28881
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28782: LD_VAR 0 6
28786: PUSH
28787: LD_VAR 0 4
28791: ARRAY
28792: PUSH
28793: LD_INT 1
28795: ARRAY
28796: PPUSH
28797: LD_VAR 0 6
28801: PUSH
28802: LD_VAR 0 4
28806: ARRAY
28807: PUSH
28808: LD_INT 2
28810: ARRAY
28811: PPUSH
28812: CALL_OW 488
28816: NOT
28817: PUSH
28818: LD_VAR 0 6
28822: PUSH
28823: LD_VAR 0 4
28827: ARRAY
28828: PUSH
28829: LD_INT 1
28831: ARRAY
28832: PPUSH
28833: LD_VAR 0 6
28837: PUSH
28838: LD_VAR 0 4
28842: ARRAY
28843: PUSH
28844: LD_INT 2
28846: ARRAY
28847: PPUSH
28848: CALL_OW 428
28852: PUSH
28853: LD_INT 0
28855: NONEQUAL
28856: OR
28857: IFFALSE 28879
// tmp := Delete ( tmp , i ) ;
28859: LD_ADDR_VAR 0 6
28863: PUSH
28864: LD_VAR 0 6
28868: PPUSH
28869: LD_VAR 0 4
28873: PPUSH
28874: CALL_OW 3
28878: ST_TO_ADDR
28879: GO 28779
28881: POP
28882: POP
// j := GetClosestHex ( unit , tmp ) ;
28883: LD_ADDR_VAR 0 5
28887: PUSH
28888: LD_VAR 0 1
28892: PPUSH
28893: LD_VAR 0 6
28897: PPUSH
28898: CALL 28183 0 2
28902: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28903: LD_VAR 0 1
28907: PPUSH
28908: LD_VAR 0 5
28912: PUSH
28913: LD_INT 1
28915: ARRAY
28916: PPUSH
28917: LD_VAR 0 5
28921: PUSH
28922: LD_INT 2
28924: ARRAY
28925: PPUSH
28926: CALL_OW 111
// end ;
28930: LD_VAR 0 3
28934: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28935: LD_INT 0
28937: PPUSH
28938: PPUSH
28939: PPUSH
28940: PPUSH
// uc_side = 0 ;
28941: LD_ADDR_OWVAR 20
28945: PUSH
28946: LD_INT 0
28948: ST_TO_ADDR
// uc_nation = 0 ;
28949: LD_ADDR_OWVAR 21
28953: PUSH
28954: LD_INT 0
28956: ST_TO_ADDR
// nat_area := natureArea ;
28957: LD_ADDR_VAR 0 4
28961: PUSH
28962: LD_INT 18
28964: ST_TO_ADDR
// InitHc ;
28965: CALL_OW 19
// for i = 1 to 4 do
28969: LD_ADDR_VAR 0 2
28973: PUSH
28974: DOUBLE
28975: LD_INT 1
28977: DEC
28978: ST_TO_ADDR
28979: LD_INT 4
28981: PUSH
28982: FOR_TO
28983: IFFALSE 29030
// begin hc_class = 18 ;
28985: LD_ADDR_OWVAR 28
28989: PUSH
28990: LD_INT 18
28992: ST_TO_ADDR
// hc_gallery =  ;
28993: LD_ADDR_OWVAR 33
28997: PUSH
28998: LD_STRING 
29000: ST_TO_ADDR
// animal := CreateHuman ;
29001: LD_ADDR_VAR 0 3
29005: PUSH
29006: CALL_OW 44
29010: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29011: LD_VAR 0 3
29015: PPUSH
29016: LD_VAR 0 4
29020: PPUSH
29021: LD_INT 0
29023: PPUSH
29024: CALL_OW 49
// end ;
29028: GO 28982
29030: POP
29031: POP
// for i = 1 to 3 do
29032: LD_ADDR_VAR 0 2
29036: PUSH
29037: DOUBLE
29038: LD_INT 1
29040: DEC
29041: ST_TO_ADDR
29042: LD_INT 3
29044: PUSH
29045: FOR_TO
29046: IFFALSE 29110
// begin hc_class = class_tiger ;
29048: LD_ADDR_OWVAR 28
29052: PUSH
29053: LD_INT 14
29055: ST_TO_ADDR
// hc_gallery =  ;
29056: LD_ADDR_OWVAR 33
29060: PUSH
29061: LD_STRING 
29063: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29064: LD_ADDR_OWVAR 35
29068: PUSH
29069: LD_INT 5
29071: NEG
29072: PPUSH
29073: LD_INT 5
29075: PPUSH
29076: CALL_OW 12
29080: ST_TO_ADDR
// animal := CreateHuman ;
29081: LD_ADDR_VAR 0 3
29085: PUSH
29086: CALL_OW 44
29090: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29091: LD_VAR 0 3
29095: PPUSH
29096: LD_VAR 0 4
29100: PPUSH
29101: LD_INT 0
29103: PPUSH
29104: CALL_OW 49
// end ;
29108: GO 29045
29110: POP
29111: POP
// for i = 1 to 5 do
29112: LD_ADDR_VAR 0 2
29116: PUSH
29117: DOUBLE
29118: LD_INT 1
29120: DEC
29121: ST_TO_ADDR
29122: LD_INT 5
29124: PUSH
29125: FOR_TO
29126: IFFALSE 29229
// begin hc_class = class_apeman ;
29128: LD_ADDR_OWVAR 28
29132: PUSH
29133: LD_INT 12
29135: ST_TO_ADDR
// hc_gallery =  ;
29136: LD_ADDR_OWVAR 33
29140: PUSH
29141: LD_STRING 
29143: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29144: LD_ADDR_OWVAR 35
29148: PUSH
29149: LD_INT 2
29151: NEG
29152: PPUSH
29153: LD_INT 2
29155: PPUSH
29156: CALL_OW 12
29160: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29161: LD_ADDR_OWVAR 31
29165: PUSH
29166: LD_INT 1
29168: PPUSH
29169: LD_INT 3
29171: PPUSH
29172: CALL_OW 12
29176: PUSH
29177: LD_INT 1
29179: PPUSH
29180: LD_INT 3
29182: PPUSH
29183: CALL_OW 12
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: ST_TO_ADDR
// animal := CreateHuman ;
29200: LD_ADDR_VAR 0 3
29204: PUSH
29205: CALL_OW 44
29209: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29210: LD_VAR 0 3
29214: PPUSH
29215: LD_VAR 0 4
29219: PPUSH
29220: LD_INT 0
29222: PPUSH
29223: CALL_OW 49
// end ;
29227: GO 29125
29229: POP
29230: POP
// for i = 1 to 3 do
29231: LD_ADDR_VAR 0 2
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_INT 3
29243: PUSH
29244: FOR_TO
29245: IFFALSE 29292
// begin hc_class = 13 ;
29247: LD_ADDR_OWVAR 28
29251: PUSH
29252: LD_INT 13
29254: ST_TO_ADDR
// hc_gallery =  ;
29255: LD_ADDR_OWVAR 33
29259: PUSH
29260: LD_STRING 
29262: ST_TO_ADDR
// animal := CreateHuman ;
29263: LD_ADDR_VAR 0 3
29267: PUSH
29268: CALL_OW 44
29272: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29273: LD_VAR 0 3
29277: PPUSH
29278: LD_VAR 0 4
29282: PPUSH
29283: LD_INT 0
29285: PPUSH
29286: CALL_OW 49
// end ;
29290: GO 29244
29292: POP
29293: POP
// for i = 1 to 7 do
29294: LD_ADDR_VAR 0 2
29298: PUSH
29299: DOUBLE
29300: LD_INT 1
29302: DEC
29303: ST_TO_ADDR
29304: LD_INT 7
29306: PUSH
29307: FOR_TO
29308: IFFALSE 29353
// begin hc_class = 20 ;
29310: LD_ADDR_OWVAR 28
29314: PUSH
29315: LD_INT 20
29317: ST_TO_ADDR
// hc_gallery =  ;
29318: LD_ADDR_OWVAR 33
29322: PUSH
29323: LD_STRING 
29325: ST_TO_ADDR
// animal := CreateHuman ;
29326: LD_ADDR_VAR 0 3
29330: PUSH
29331: CALL_OW 44
29335: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29336: LD_VAR 0 3
29340: PPUSH
29341: LD_INT 19
29343: PPUSH
29344: LD_INT 0
29346: PPUSH
29347: CALL_OW 49
// end ;
29351: GO 29307
29353: POP
29354: POP
// end ;
29355: LD_VAR 0 1
29359: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
// if not list then
29390: LD_VAR 0 1
29394: NOT
29395: IFFALSE 29399
// exit ;
29397: GO 32592
// base := list [ 1 ] ;
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: LD_VAR 0 1
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: ST_TO_ADDR
// group := list [ 2 ] ;
29413: LD_ADDR_VAR 0 4
29417: PUSH
29418: LD_VAR 0 1
29422: PUSH
29423: LD_INT 2
29425: ARRAY
29426: ST_TO_ADDR
// path := list [ 3 ] ;
29427: LD_ADDR_VAR 0 5
29431: PUSH
29432: LD_VAR 0 1
29436: PUSH
29437: LD_INT 3
29439: ARRAY
29440: ST_TO_ADDR
// flags := list [ 4 ] ;
29441: LD_ADDR_VAR 0 6
29445: PUSH
29446: LD_VAR 0 1
29450: PUSH
29451: LD_INT 4
29453: ARRAY
29454: ST_TO_ADDR
// mined := [ ] ;
29455: LD_ADDR_VAR 0 27
29459: PUSH
29460: EMPTY
29461: ST_TO_ADDR
// bombed := [ ] ;
29462: LD_ADDR_VAR 0 28
29466: PUSH
29467: EMPTY
29468: ST_TO_ADDR
// if not group or not path then
29469: LD_VAR 0 4
29473: NOT
29474: PUSH
29475: LD_VAR 0 5
29479: NOT
29480: OR
29481: IFFALSE 29485
// exit ;
29483: GO 32592
// if flags then
29485: LD_VAR 0 6
29489: IFFALSE 29633
// begin f_ignore_area := flags [ 1 ] ;
29491: LD_ADDR_VAR 0 17
29495: PUSH
29496: LD_VAR 0 6
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29505: LD_ADDR_VAR 0 18
29509: PUSH
29510: LD_VAR 0 6
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29519: LD_ADDR_VAR 0 19
29523: PUSH
29524: LD_VAR 0 6
29528: PUSH
29529: LD_INT 3
29531: ARRAY
29532: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29533: LD_ADDR_VAR 0 20
29537: PUSH
29538: LD_VAR 0 6
29542: PUSH
29543: LD_INT 4
29545: ARRAY
29546: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29547: LD_ADDR_VAR 0 21
29551: PUSH
29552: LD_VAR 0 6
29556: PUSH
29557: LD_INT 5
29559: ARRAY
29560: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29561: LD_ADDR_VAR 0 22
29565: PUSH
29566: LD_VAR 0 6
29570: PUSH
29571: LD_INT 6
29573: ARRAY
29574: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29575: LD_ADDR_VAR 0 23
29579: PUSH
29580: LD_VAR 0 6
29584: PUSH
29585: LD_INT 7
29587: ARRAY
29588: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29589: LD_ADDR_VAR 0 24
29593: PUSH
29594: LD_VAR 0 6
29598: PUSH
29599: LD_INT 8
29601: ARRAY
29602: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29603: LD_ADDR_VAR 0 25
29607: PUSH
29608: LD_VAR 0 6
29612: PUSH
29613: LD_INT 9
29615: ARRAY
29616: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29617: LD_ADDR_VAR 0 26
29621: PUSH
29622: LD_VAR 0 6
29626: PUSH
29627: LD_INT 10
29629: ARRAY
29630: ST_TO_ADDR
// end else
29631: GO 29713
// begin f_ignore_area := false ;
29633: LD_ADDR_VAR 0 17
29637: PUSH
29638: LD_INT 0
29640: ST_TO_ADDR
// f_capture := false ;
29641: LD_ADDR_VAR 0 18
29645: PUSH
29646: LD_INT 0
29648: ST_TO_ADDR
// f_ignore_civ := false ;
29649: LD_ADDR_VAR 0 19
29653: PUSH
29654: LD_INT 0
29656: ST_TO_ADDR
// f_murder := false ;
29657: LD_ADDR_VAR 0 20
29661: PUSH
29662: LD_INT 0
29664: ST_TO_ADDR
// f_mines := false ;
29665: LD_ADDR_VAR 0 21
29669: PUSH
29670: LD_INT 0
29672: ST_TO_ADDR
// f_repair := false ;
29673: LD_ADDR_VAR 0 22
29677: PUSH
29678: LD_INT 0
29680: ST_TO_ADDR
// f_heal := false ;
29681: LD_ADDR_VAR 0 23
29685: PUSH
29686: LD_INT 0
29688: ST_TO_ADDR
// f_spacetime := false ;
29689: LD_ADDR_VAR 0 24
29693: PUSH
29694: LD_INT 0
29696: ST_TO_ADDR
// f_attack_depot := false ;
29697: LD_ADDR_VAR 0 25
29701: PUSH
29702: LD_INT 0
29704: ST_TO_ADDR
// f_crawl := false ;
29705: LD_ADDR_VAR 0 26
29709: PUSH
29710: LD_INT 0
29712: ST_TO_ADDR
// end ; units_path := [ ] ;
29713: LD_ADDR_VAR 0 16
29717: PUSH
29718: EMPTY
29719: ST_TO_ADDR
// for i = 1 to group do
29720: LD_ADDR_VAR 0 7
29724: PUSH
29725: DOUBLE
29726: LD_INT 1
29728: DEC
29729: ST_TO_ADDR
29730: LD_VAR 0 4
29734: PUSH
29735: FOR_TO
29736: IFFALSE 29765
// begin units_path := Replace ( units_path , i , path ) ;
29738: LD_ADDR_VAR 0 16
29742: PUSH
29743: LD_VAR 0 16
29747: PPUSH
29748: LD_VAR 0 7
29752: PPUSH
29753: LD_VAR 0 5
29757: PPUSH
29758: CALL_OW 1
29762: ST_TO_ADDR
// end ;
29763: GO 29735
29765: POP
29766: POP
// repeat for i = group downto 1 do
29767: LD_ADDR_VAR 0 7
29771: PUSH
29772: DOUBLE
29773: LD_VAR 0 4
29777: INC
29778: ST_TO_ADDR
29779: LD_INT 1
29781: PUSH
29782: FOR_DOWNTO
29783: IFFALSE 32574
// begin tmp := [ ] ;
29785: LD_ADDR_VAR 0 14
29789: PUSH
29790: EMPTY
29791: ST_TO_ADDR
// attacking := false ;
29792: LD_ADDR_VAR 0 29
29796: PUSH
29797: LD_INT 0
29799: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 7
29809: ARRAY
29810: PPUSH
29811: CALL_OW 301
29815: PUSH
29816: LD_VAR 0 4
29820: PUSH
29821: LD_VAR 0 7
29825: ARRAY
29826: NOT
29827: OR
29828: IFFALSE 29872
// begin group := Delete ( group , i ) ;
29830: LD_ADDR_VAR 0 4
29834: PUSH
29835: LD_VAR 0 4
29839: PPUSH
29840: LD_VAR 0 7
29844: PPUSH
29845: CALL_OW 3
29849: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29850: LD_ADDR_VAR 0 16
29854: PUSH
29855: LD_VAR 0 16
29859: PPUSH
29860: LD_VAR 0 7
29864: PPUSH
29865: CALL_OW 3
29869: ST_TO_ADDR
// continue ;
29870: GO 29782
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29872: LD_VAR 0 4
29876: PUSH
29877: LD_VAR 0 7
29881: ARRAY
29882: PPUSH
29883: LD_INT 10
29885: PPUSH
29886: CALL 28035 0 2
29890: NOT
29891: PUSH
29892: LD_VAR 0 16
29896: PUSH
29897: LD_VAR 0 7
29901: ARRAY
29902: PUSH
29903: EMPTY
29904: EQUAL
29905: NOT
29906: AND
29907: IFFALSE 30191
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29909: LD_VAR 0 4
29913: PUSH
29914: LD_VAR 0 7
29918: ARRAY
29919: PPUSH
29920: CALL_OW 262
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: IN
29935: IFFALSE 29994
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29937: LD_VAR 0 4
29941: PUSH
29942: LD_VAR 0 7
29946: ARRAY
29947: PPUSH
29948: CALL_OW 261
29952: PUSH
29953: LD_INT 10
29955: LESS
29956: PUSH
29957: LD_VAR 0 4
29961: PUSH
29962: LD_VAR 0 7
29966: ARRAY
29967: PPUSH
29968: CALL 28092 0 1
29972: NOT
29973: AND
29974: IFFALSE 29994
// SetFuel ( group [ i ] , 12 ) ;
29976: LD_VAR 0 4
29980: PUSH
29981: LD_VAR 0 7
29985: ARRAY
29986: PPUSH
29987: LD_INT 12
29989: PPUSH
29990: CALL_OW 240
// if units_path [ i ] then
29994: LD_VAR 0 16
29998: PUSH
29999: LD_VAR 0 7
30003: ARRAY
30004: IFFALSE 30189
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30006: LD_VAR 0 4
30010: PUSH
30011: LD_VAR 0 7
30015: ARRAY
30016: PPUSH
30017: LD_VAR 0 16
30021: PUSH
30022: LD_VAR 0 7
30026: ARRAY
30027: PUSH
30028: LD_INT 1
30030: ARRAY
30031: PUSH
30032: LD_INT 1
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 16
30040: PUSH
30041: LD_VAR 0 7
30045: ARRAY
30046: PUSH
30047: LD_INT 1
30049: ARRAY
30050: PUSH
30051: LD_INT 2
30053: ARRAY
30054: PPUSH
30055: CALL_OW 297
30059: PUSH
30060: LD_INT 6
30062: GREATER
30063: IFFALSE 30138
// begin if not HasTask ( group [ i ] ) then
30065: LD_VAR 0 4
30069: PUSH
30070: LD_VAR 0 7
30074: ARRAY
30075: PPUSH
30076: CALL_OW 314
30080: NOT
30081: IFFALSE 30136
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30083: LD_VAR 0 4
30087: PUSH
30088: LD_VAR 0 7
30092: ARRAY
30093: PPUSH
30094: LD_VAR 0 16
30098: PUSH
30099: LD_VAR 0 7
30103: ARRAY
30104: PUSH
30105: LD_INT 1
30107: ARRAY
30108: PUSH
30109: LD_INT 1
30111: ARRAY
30112: PPUSH
30113: LD_VAR 0 16
30117: PUSH
30118: LD_VAR 0 7
30122: ARRAY
30123: PUSH
30124: LD_INT 1
30126: ARRAY
30127: PUSH
30128: LD_INT 2
30130: ARRAY
30131: PPUSH
30132: CALL_OW 114
// end else
30136: GO 30189
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30138: LD_ADDR_VAR 0 15
30142: PUSH
30143: LD_VAR 0 16
30147: PUSH
30148: LD_VAR 0 7
30152: ARRAY
30153: PPUSH
30154: LD_INT 1
30156: PPUSH
30157: CALL_OW 3
30161: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30162: LD_ADDR_VAR 0 16
30166: PUSH
30167: LD_VAR 0 16
30171: PPUSH
30172: LD_VAR 0 7
30176: PPUSH
30177: LD_VAR 0 15
30181: PPUSH
30182: CALL_OW 1
30186: ST_TO_ADDR
// continue ;
30187: GO 29782
// end ; end ; end else
30189: GO 32572
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30191: LD_ADDR_VAR 0 14
30195: PUSH
30196: LD_INT 81
30198: PUSH
30199: LD_VAR 0 4
30203: PUSH
30204: LD_VAR 0 7
30208: ARRAY
30209: PPUSH
30210: CALL_OW 255
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PPUSH
30219: CALL_OW 69
30223: ST_TO_ADDR
// if not tmp then
30224: LD_VAR 0 14
30228: NOT
30229: IFFALSE 30233
// continue ;
30231: GO 29782
// if f_ignore_area then
30233: LD_VAR 0 17
30237: IFFALSE 30325
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30239: LD_ADDR_VAR 0 15
30243: PUSH
30244: LD_VAR 0 14
30248: PPUSH
30249: LD_INT 3
30251: PUSH
30252: LD_INT 92
30254: PUSH
30255: LD_VAR 0 17
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: PUSH
30264: LD_VAR 0 17
30268: PUSH
30269: LD_INT 2
30271: ARRAY
30272: PUSH
30273: LD_VAR 0 17
30277: PUSH
30278: LD_INT 3
30280: ARRAY
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: CALL_OW 72
30296: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30297: LD_VAR 0 14
30301: PUSH
30302: LD_VAR 0 15
30306: DIFF
30307: IFFALSE 30325
// tmp := tmp diff tmp2 ;
30309: LD_ADDR_VAR 0 14
30313: PUSH
30314: LD_VAR 0 14
30318: PUSH
30319: LD_VAR 0 15
30323: DIFF
30324: ST_TO_ADDR
// end ; if not f_murder then
30325: LD_VAR 0 20
30329: NOT
30330: IFFALSE 30388
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30332: LD_ADDR_VAR 0 15
30336: PUSH
30337: LD_VAR 0 14
30341: PPUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 50
30347: PUSH
30348: EMPTY
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL_OW 72
30359: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30360: LD_VAR 0 14
30364: PUSH
30365: LD_VAR 0 15
30369: DIFF
30370: IFFALSE 30388
// tmp := tmp diff tmp2 ;
30372: LD_ADDR_VAR 0 14
30376: PUSH
30377: LD_VAR 0 14
30381: PUSH
30382: LD_VAR 0 15
30386: DIFF
30387: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30388: LD_ADDR_VAR 0 14
30392: PUSH
30393: LD_VAR 0 4
30397: PUSH
30398: LD_VAR 0 7
30402: ARRAY
30403: PPUSH
30404: LD_VAR 0 14
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: LD_INT 1
30414: PPUSH
30415: CALL 3208 0 4
30419: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30420: LD_VAR 0 4
30424: PUSH
30425: LD_VAR 0 7
30429: ARRAY
30430: PPUSH
30431: CALL_OW 257
30435: PUSH
30436: LD_INT 1
30438: EQUAL
30439: IFFALSE 30866
// begin if WantPlant ( group [ i ] ) then
30441: LD_VAR 0 4
30445: PUSH
30446: LD_VAR 0 7
30450: ARRAY
30451: PPUSH
30452: CALL 2676 0 1
30456: IFFALSE 30460
// continue ;
30458: GO 29782
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30460: LD_VAR 0 18
30464: PUSH
30465: LD_VAR 0 4
30469: PUSH
30470: LD_VAR 0 7
30474: ARRAY
30475: PPUSH
30476: CALL_OW 310
30480: NOT
30481: AND
30482: PUSH
30483: LD_VAR 0 14
30487: PUSH
30488: LD_INT 1
30490: ARRAY
30491: PUSH
30492: LD_VAR 0 14
30496: PPUSH
30497: LD_INT 21
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 58
30509: PUSH
30510: EMPTY
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PPUSH
30517: CALL_OW 72
30521: IN
30522: AND
30523: IFFALSE 30559
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30525: LD_VAR 0 4
30529: PUSH
30530: LD_VAR 0 7
30534: ARRAY
30535: PPUSH
30536: LD_VAR 0 14
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PPUSH
30545: CALL_OW 120
// attacking := true ;
30549: LD_ADDR_VAR 0 29
30553: PUSH
30554: LD_INT 1
30556: ST_TO_ADDR
// continue ;
30557: GO 29782
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30559: LD_VAR 0 26
30563: PUSH
30564: LD_VAR 0 4
30568: PUSH
30569: LD_VAR 0 7
30573: ARRAY
30574: PPUSH
30575: CALL_OW 256
30579: PUSH
30580: LD_INT 800
30582: LESS
30583: AND
30584: PUSH
30585: LD_VAR 0 4
30589: PUSH
30590: LD_VAR 0 7
30594: ARRAY
30595: PPUSH
30596: CALL_OW 318
30600: NOT
30601: AND
30602: IFFALSE 30619
// ComCrawl ( group [ i ] ) ;
30604: LD_VAR 0 4
30608: PUSH
30609: LD_VAR 0 7
30613: ARRAY
30614: PPUSH
30615: CALL_OW 137
// if f_mines then
30619: LD_VAR 0 21
30623: IFFALSE 30866
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30625: LD_VAR 0 14
30629: PUSH
30630: LD_INT 1
30632: ARRAY
30633: PPUSH
30634: CALL_OW 247
30638: PUSH
30639: LD_INT 3
30641: EQUAL
30642: PUSH
30643: LD_VAR 0 14
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: PUSH
30652: LD_VAR 0 27
30656: IN
30657: NOT
30658: AND
30659: IFFALSE 30866
// begin x := GetX ( tmp [ 1 ] ) ;
30661: LD_ADDR_VAR 0 10
30665: PUSH
30666: LD_VAR 0 14
30670: PUSH
30671: LD_INT 1
30673: ARRAY
30674: PPUSH
30675: CALL_OW 250
30679: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30680: LD_ADDR_VAR 0 11
30684: PUSH
30685: LD_VAR 0 14
30689: PUSH
30690: LD_INT 1
30692: ARRAY
30693: PPUSH
30694: CALL_OW 251
30698: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30699: LD_ADDR_VAR 0 12
30703: PUSH
30704: LD_VAR 0 4
30708: PUSH
30709: LD_VAR 0 7
30713: ARRAY
30714: PPUSH
30715: CALL 28120 0 1
30719: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30720: LD_VAR 0 4
30724: PUSH
30725: LD_VAR 0 7
30729: ARRAY
30730: PPUSH
30731: LD_VAR 0 10
30735: PPUSH
30736: LD_VAR 0 11
30740: PPUSH
30741: LD_VAR 0 14
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
30754: LD_VAR 0 4
30758: PUSH
30759: LD_VAR 0 7
30763: ARRAY
30764: PPUSH
30765: LD_VAR 0 10
30769: PPUSH
30770: LD_VAR 0 12
30774: PPUSH
30775: LD_INT 7
30777: PPUSH
30778: CALL_OW 272
30782: PPUSH
30783: LD_VAR 0 11
30787: PPUSH
30788: LD_VAR 0 12
30792: PPUSH
30793: LD_INT 7
30795: PPUSH
30796: CALL_OW 273
30800: PPUSH
30801: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
30805: LD_VAR 0 4
30809: PUSH
30810: LD_VAR 0 7
30814: ARRAY
30815: PPUSH
30816: LD_INT 71
30818: PPUSH
30819: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30823: LD_ADDR_VAR 0 27
30827: PUSH
30828: LD_VAR 0 27
30832: PPUSH
30833: LD_VAR 0 27
30837: PUSH
30838: LD_INT 1
30840: PLUS
30841: PPUSH
30842: LD_VAR 0 14
30846: PUSH
30847: LD_INT 1
30849: ARRAY
30850: PPUSH
30851: CALL_OW 1
30855: ST_TO_ADDR
// attacking := true ;
30856: LD_ADDR_VAR 0 29
30860: PUSH
30861: LD_INT 1
30863: ST_TO_ADDR
// continue ;
30864: GO 29782
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30866: LD_VAR 0 4
30870: PUSH
30871: LD_VAR 0 7
30875: ARRAY
30876: PPUSH
30877: CALL_OW 257
30881: PUSH
30882: LD_INT 17
30884: EQUAL
30885: IFFALSE 31013
// begin attacking := false ;
30887: LD_ADDR_VAR 0 29
30891: PUSH
30892: LD_INT 0
30894: ST_TO_ADDR
// k := 5 ;
30895: LD_ADDR_VAR 0 9
30899: PUSH
30900: LD_INT 5
30902: ST_TO_ADDR
// if tmp < k then
30903: LD_VAR 0 14
30907: PUSH
30908: LD_VAR 0 9
30912: LESS
30913: IFFALSE 30925
// k := tmp ;
30915: LD_ADDR_VAR 0 9
30919: PUSH
30920: LD_VAR 0 14
30924: ST_TO_ADDR
// for j = 1 to k do
30925: LD_ADDR_VAR 0 8
30929: PUSH
30930: DOUBLE
30931: LD_INT 1
30933: DEC
30934: ST_TO_ADDR
30935: LD_VAR 0 9
30939: PUSH
30940: FOR_TO
30941: IFFALSE 31011
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30943: LD_VAR 0 14
30947: PUSH
30948: LD_VAR 0 8
30952: ARRAY
30953: PUSH
30954: LD_VAR 0 14
30958: PPUSH
30959: LD_INT 58
30961: PUSH
30962: EMPTY
30963: LIST
30964: PPUSH
30965: CALL_OW 72
30969: IN
30970: NOT
30971: IFFALSE 31009
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30973: LD_VAR 0 4
30977: PUSH
30978: LD_VAR 0 7
30982: ARRAY
30983: PPUSH
30984: LD_VAR 0 14
30988: PUSH
30989: LD_VAR 0 8
30993: ARRAY
30994: PPUSH
30995: CALL_OW 115
// attacking := true ;
30999: LD_ADDR_VAR 0 29
31003: PUSH
31004: LD_INT 1
31006: ST_TO_ADDR
// continue ;
31007: GO 30940
// end ; end ;
31009: GO 30940
31011: POP
31012: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31013: LD_VAR 0 4
31017: PUSH
31018: LD_VAR 0 7
31022: ARRAY
31023: PPUSH
31024: CALL_OW 257
31028: PUSH
31029: LD_INT 8
31031: EQUAL
31032: PUSH
31033: LD_VAR 0 4
31037: PUSH
31038: LD_VAR 0 7
31042: ARRAY
31043: PPUSH
31044: CALL_OW 264
31048: PUSH
31049: LD_INT 28
31051: PUSH
31052: LD_INT 45
31054: PUSH
31055: LD_INT 7
31057: PUSH
31058: LD_INT 47
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: IN
31067: OR
31068: IFFALSE 31298
// begin attacking := false ;
31070: LD_ADDR_VAR 0 29
31074: PUSH
31075: LD_INT 0
31077: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31078: LD_VAR 0 14
31082: PUSH
31083: LD_INT 1
31085: ARRAY
31086: PPUSH
31087: CALL_OW 266
31091: PUSH
31092: LD_INT 32
31094: PUSH
31095: LD_INT 31
31097: PUSH
31098: LD_INT 33
31100: PUSH
31101: LD_INT 4
31103: PUSH
31104: LD_INT 5
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: IN
31114: IFFALSE 31298
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31116: LD_ADDR_VAR 0 9
31120: PUSH
31121: LD_VAR 0 14
31125: PUSH
31126: LD_INT 1
31128: ARRAY
31129: PPUSH
31130: CALL_OW 266
31134: PPUSH
31135: LD_VAR 0 14
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: CALL_OW 250
31148: PPUSH
31149: LD_VAR 0 14
31153: PUSH
31154: LD_INT 1
31156: ARRAY
31157: PPUSH
31158: CALL_OW 251
31162: PPUSH
31163: LD_VAR 0 14
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PPUSH
31172: CALL_OW 254
31176: PPUSH
31177: LD_VAR 0 14
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: PPUSH
31186: CALL_OW 248
31190: PPUSH
31191: LD_INT 0
31193: PPUSH
31194: CALL 9496 0 6
31198: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31199: LD_ADDR_VAR 0 8
31203: PUSH
31204: LD_VAR 0 4
31208: PUSH
31209: LD_VAR 0 7
31213: ARRAY
31214: PPUSH
31215: LD_VAR 0 9
31219: PPUSH
31220: CALL 28183 0 2
31224: ST_TO_ADDR
// if j then
31225: LD_VAR 0 8
31229: IFFALSE 31298
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31231: LD_VAR 0 8
31235: PUSH
31236: LD_INT 1
31238: ARRAY
31239: PPUSH
31240: LD_VAR 0 8
31244: PUSH
31245: LD_INT 2
31247: ARRAY
31248: PPUSH
31249: CALL_OW 488
31253: IFFALSE 31298
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31255: LD_VAR 0 4
31259: PUSH
31260: LD_VAR 0 7
31264: ARRAY
31265: PPUSH
31266: LD_VAR 0 8
31270: PUSH
31271: LD_INT 1
31273: ARRAY
31274: PPUSH
31275: LD_VAR 0 8
31279: PUSH
31280: LD_INT 2
31282: ARRAY
31283: PPUSH
31284: CALL_OW 116
// attacking := true ;
31288: LD_ADDR_VAR 0 29
31292: PUSH
31293: LD_INT 1
31295: ST_TO_ADDR
// continue ;
31296: GO 29782
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31298: LD_VAR 0 4
31302: PUSH
31303: LD_VAR 0 7
31307: ARRAY
31308: PPUSH
31309: CALL_OW 265
31313: PUSH
31314: LD_INT 11
31316: EQUAL
31317: IFFALSE 31595
// begin k := 10 ;
31319: LD_ADDR_VAR 0 9
31323: PUSH
31324: LD_INT 10
31326: ST_TO_ADDR
// x := 0 ;
31327: LD_ADDR_VAR 0 10
31331: PUSH
31332: LD_INT 0
31334: ST_TO_ADDR
// if tmp < k then
31335: LD_VAR 0 14
31339: PUSH
31340: LD_VAR 0 9
31344: LESS
31345: IFFALSE 31357
// k := tmp ;
31347: LD_ADDR_VAR 0 9
31351: PUSH
31352: LD_VAR 0 14
31356: ST_TO_ADDR
// for j = k downto 1 do
31357: LD_ADDR_VAR 0 8
31361: PUSH
31362: DOUBLE
31363: LD_VAR 0 9
31367: INC
31368: ST_TO_ADDR
31369: LD_INT 1
31371: PUSH
31372: FOR_DOWNTO
31373: IFFALSE 31448
// begin if GetType ( tmp [ j ] ) = unit_human then
31375: LD_VAR 0 14
31379: PUSH
31380: LD_VAR 0 8
31384: ARRAY
31385: PPUSH
31386: CALL_OW 247
31390: PUSH
31391: LD_INT 1
31393: EQUAL
31394: IFFALSE 31446
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31396: LD_VAR 0 4
31400: PUSH
31401: LD_VAR 0 7
31405: ARRAY
31406: PPUSH
31407: LD_VAR 0 14
31411: PUSH
31412: LD_VAR 0 8
31416: ARRAY
31417: PPUSH
31418: CALL 28454 0 2
// x := tmp [ j ] ;
31422: LD_ADDR_VAR 0 10
31426: PUSH
31427: LD_VAR 0 14
31431: PUSH
31432: LD_VAR 0 8
31436: ARRAY
31437: ST_TO_ADDR
// attacking := true ;
31438: LD_ADDR_VAR 0 29
31442: PUSH
31443: LD_INT 1
31445: ST_TO_ADDR
// end ; end ;
31446: GO 31372
31448: POP
31449: POP
// if not x then
31450: LD_VAR 0 10
31454: NOT
31455: IFFALSE 31595
// begin attacking := true ;
31457: LD_ADDR_VAR 0 29
31461: PUSH
31462: LD_INT 1
31464: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31465: LD_VAR 0 4
31469: PUSH
31470: LD_VAR 0 7
31474: ARRAY
31475: PPUSH
31476: CALL_OW 250
31480: PPUSH
31481: LD_VAR 0 4
31485: PUSH
31486: LD_VAR 0 7
31490: ARRAY
31491: PPUSH
31492: CALL_OW 251
31496: PPUSH
31497: CALL 1934 0 2
31501: PUSH
31502: LD_INT 2
31504: ARRAY
31505: PUSH
31506: LD_VAR 0 14
31510: PUSH
31511: LD_INT 1
31513: ARRAY
31514: PPUSH
31515: CALL_OW 250
31519: PPUSH
31520: LD_VAR 0 14
31524: PUSH
31525: LD_INT 1
31527: ARRAY
31528: PPUSH
31529: CALL_OW 251
31533: PPUSH
31534: CALL 1934 0 2
31538: PUSH
31539: LD_INT 2
31541: ARRAY
31542: EQUAL
31543: IFFALSE 31571
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31545: LD_VAR 0 4
31549: PUSH
31550: LD_VAR 0 7
31554: ARRAY
31555: PPUSH
31556: LD_VAR 0 14
31560: PUSH
31561: LD_INT 1
31563: ARRAY
31564: PPUSH
31565: CALL 28454 0 2
31569: GO 31595
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31571: LD_VAR 0 4
31575: PUSH
31576: LD_VAR 0 7
31580: ARRAY
31581: PPUSH
31582: LD_VAR 0 14
31586: PUSH
31587: LD_INT 1
31589: ARRAY
31590: PPUSH
31591: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31595: LD_VAR 0 4
31599: PUSH
31600: LD_VAR 0 7
31604: ARRAY
31605: PPUSH
31606: CALL_OW 264
31610: PUSH
31611: LD_INT 29
31613: EQUAL
31614: IFFALSE 31980
// begin if WantsToAttack ( group [ i ] ) in bombed then
31616: LD_VAR 0 4
31620: PUSH
31621: LD_VAR 0 7
31625: ARRAY
31626: PPUSH
31627: CALL_OW 319
31631: PUSH
31632: LD_VAR 0 28
31636: IN
31637: IFFALSE 31641
// continue ;
31639: GO 29782
// k := 8 ;
31641: LD_ADDR_VAR 0 9
31645: PUSH
31646: LD_INT 8
31648: ST_TO_ADDR
// x := 0 ;
31649: LD_ADDR_VAR 0 10
31653: PUSH
31654: LD_INT 0
31656: ST_TO_ADDR
// if tmp < k then
31657: LD_VAR 0 14
31661: PUSH
31662: LD_VAR 0 9
31666: LESS
31667: IFFALSE 31679
// k := tmp ;
31669: LD_ADDR_VAR 0 9
31673: PUSH
31674: LD_VAR 0 14
31678: ST_TO_ADDR
// for j = 1 to k do
31679: LD_ADDR_VAR 0 8
31683: PUSH
31684: DOUBLE
31685: LD_INT 1
31687: DEC
31688: ST_TO_ADDR
31689: LD_VAR 0 9
31693: PUSH
31694: FOR_TO
31695: IFFALSE 31827
// begin if GetType ( tmp [ j ] ) = unit_building then
31697: LD_VAR 0 14
31701: PUSH
31702: LD_VAR 0 8
31706: ARRAY
31707: PPUSH
31708: CALL_OW 247
31712: PUSH
31713: LD_INT 3
31715: EQUAL
31716: IFFALSE 31825
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31718: LD_VAR 0 14
31722: PUSH
31723: LD_VAR 0 8
31727: ARRAY
31728: PUSH
31729: LD_VAR 0 28
31733: IN
31734: NOT
31735: PUSH
31736: LD_VAR 0 14
31740: PUSH
31741: LD_VAR 0 8
31745: ARRAY
31746: PPUSH
31747: CALL_OW 313
31751: AND
31752: IFFALSE 31825
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31754: LD_VAR 0 4
31758: PUSH
31759: LD_VAR 0 7
31763: ARRAY
31764: PPUSH
31765: LD_VAR 0 14
31769: PUSH
31770: LD_VAR 0 8
31774: ARRAY
31775: PPUSH
31776: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31780: LD_ADDR_VAR 0 28
31784: PUSH
31785: LD_VAR 0 28
31789: PPUSH
31790: LD_VAR 0 28
31794: PUSH
31795: LD_INT 1
31797: PLUS
31798: PPUSH
31799: LD_VAR 0 14
31803: PUSH
31804: LD_VAR 0 8
31808: ARRAY
31809: PPUSH
31810: CALL_OW 1
31814: ST_TO_ADDR
// attacking := true ;
31815: LD_ADDR_VAR 0 29
31819: PUSH
31820: LD_INT 1
31822: ST_TO_ADDR
// break ;
31823: GO 31827
// end ; end ;
31825: GO 31694
31827: POP
31828: POP
// if not attacking and f_attack_depot then
31829: LD_VAR 0 29
31833: NOT
31834: PUSH
31835: LD_VAR 0 25
31839: AND
31840: IFFALSE 31935
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31842: LD_ADDR_VAR 0 13
31846: PUSH
31847: LD_VAR 0 14
31851: PPUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 30
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 30
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 72
31884: ST_TO_ADDR
// if z then
31885: LD_VAR 0 13
31889: IFFALSE 31935
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31891: LD_VAR 0 4
31895: PUSH
31896: LD_VAR 0 7
31900: ARRAY
31901: PPUSH
31902: LD_VAR 0 13
31906: PPUSH
31907: LD_VAR 0 4
31911: PUSH
31912: LD_VAR 0 7
31916: ARRAY
31917: PPUSH
31918: CALL_OW 74
31922: PPUSH
31923: CALL_OW 115
// attacking := true ;
31927: LD_ADDR_VAR 0 29
31931: PUSH
31932: LD_INT 1
31934: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31935: LD_VAR 0 4
31939: PUSH
31940: LD_VAR 0 7
31944: ARRAY
31945: PPUSH
31946: CALL_OW 256
31950: PUSH
31951: LD_INT 500
31953: LESS
31954: IFFALSE 31980
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31956: LD_VAR 0 4
31960: PUSH
31961: LD_VAR 0 7
31965: ARRAY
31966: PPUSH
31967: LD_VAR 0 14
31971: PUSH
31972: LD_INT 1
31974: ARRAY
31975: PPUSH
31976: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31980: LD_VAR 0 4
31984: PUSH
31985: LD_VAR 0 7
31989: ARRAY
31990: PPUSH
31991: CALL_OW 256
31995: PUSH
31996: LD_INT 250
31998: LESS
31999: PUSH
32000: LD_VAR 0 4
32004: PUSH
32005: LD_VAR 0 7
32009: ARRAY
32010: PUSH
32011: LD_INT 21
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 23
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PPUSH
32035: CALL_OW 69
32039: IN
32040: AND
32041: IFFALSE 32166
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32043: LD_ADDR_VAR 0 9
32047: PUSH
32048: LD_OWVAR 3
32052: PUSH
32053: LD_VAR 0 4
32057: PUSH
32058: LD_VAR 0 7
32062: ARRAY
32063: DIFF
32064: PPUSH
32065: LD_VAR 0 4
32069: PUSH
32070: LD_VAR 0 7
32074: ARRAY
32075: PPUSH
32076: CALL_OW 74
32080: ST_TO_ADDR
// if not k then
32081: LD_VAR 0 9
32085: NOT
32086: IFFALSE 32090
// continue ;
32088: GO 29782
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32090: LD_VAR 0 9
32094: PUSH
32095: LD_INT 81
32097: PUSH
32098: LD_VAR 0 4
32102: PUSH
32103: LD_VAR 0 7
32107: ARRAY
32108: PPUSH
32109: CALL_OW 255
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PPUSH
32118: CALL_OW 69
32122: IN
32123: PUSH
32124: LD_VAR 0 9
32128: PPUSH
32129: LD_VAR 0 4
32133: PUSH
32134: LD_VAR 0 7
32138: ARRAY
32139: PPUSH
32140: CALL_OW 296
32144: PUSH
32145: LD_INT 5
32147: LESS
32148: AND
32149: IFFALSE 32166
// ComAutodestruct ( group [ i ] ) ;
32151: LD_VAR 0 4
32155: PUSH
32156: LD_VAR 0 7
32160: ARRAY
32161: PPUSH
32162: CALL 28352 0 1
// end ; if f_attack_depot then
32166: LD_VAR 0 25
32170: IFFALSE 32282
// begin k := 6 ;
32172: LD_ADDR_VAR 0 9
32176: PUSH
32177: LD_INT 6
32179: ST_TO_ADDR
// if tmp < k then
32180: LD_VAR 0 14
32184: PUSH
32185: LD_VAR 0 9
32189: LESS
32190: IFFALSE 32202
// k := tmp ;
32192: LD_ADDR_VAR 0 9
32196: PUSH
32197: LD_VAR 0 14
32201: ST_TO_ADDR
// for j = 1 to k do
32202: LD_ADDR_VAR 0 8
32206: PUSH
32207: DOUBLE
32208: LD_INT 1
32210: DEC
32211: ST_TO_ADDR
32212: LD_VAR 0 9
32216: PUSH
32217: FOR_TO
32218: IFFALSE 32280
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32220: LD_VAR 0 8
32224: PPUSH
32225: CALL_OW 266
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: IN
32240: IFFALSE 32278
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32242: LD_VAR 0 4
32246: PUSH
32247: LD_VAR 0 7
32251: ARRAY
32252: PPUSH
32253: LD_VAR 0 14
32257: PUSH
32258: LD_VAR 0 8
32262: ARRAY
32263: PPUSH
32264: CALL_OW 115
// attacking := true ;
32268: LD_ADDR_VAR 0 29
32272: PUSH
32273: LD_INT 1
32275: ST_TO_ADDR
// break ;
32276: GO 32280
// end ;
32278: GO 32217
32280: POP
32281: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32282: LD_VAR 0 4
32286: PUSH
32287: LD_VAR 0 7
32291: ARRAY
32292: PPUSH
32293: CALL_OW 302
32297: PUSH
32298: LD_VAR 0 29
32302: NOT
32303: AND
32304: IFFALSE 32572
// begin if GetTag ( group [ i ] ) = 71 then
32306: LD_VAR 0 4
32310: PUSH
32311: LD_VAR 0 7
32315: ARRAY
32316: PPUSH
32317: CALL_OW 110
32321: PUSH
32322: LD_INT 71
32324: EQUAL
32325: IFFALSE 32366
// begin if HasTask ( group [ i ] ) then
32327: LD_VAR 0 4
32331: PUSH
32332: LD_VAR 0 7
32336: ARRAY
32337: PPUSH
32338: CALL_OW 314
32342: IFFALSE 32348
// continue else
32344: GO 29782
32346: GO 32366
// SetTag ( group [ i ] , 0 ) ;
32348: LD_VAR 0 4
32352: PUSH
32353: LD_VAR 0 7
32357: ARRAY
32358: PPUSH
32359: LD_INT 0
32361: PPUSH
32362: CALL_OW 109
// end ; k := 8 ;
32366: LD_ADDR_VAR 0 9
32370: PUSH
32371: LD_INT 8
32373: ST_TO_ADDR
// x := 0 ;
32374: LD_ADDR_VAR 0 10
32378: PUSH
32379: LD_INT 0
32381: ST_TO_ADDR
// if tmp < k then
32382: LD_VAR 0 14
32386: PUSH
32387: LD_VAR 0 9
32391: LESS
32392: IFFALSE 32404
// k := tmp ;
32394: LD_ADDR_VAR 0 9
32398: PUSH
32399: LD_VAR 0 14
32403: ST_TO_ADDR
// for j = 1 to k do
32404: LD_ADDR_VAR 0 8
32408: PUSH
32409: DOUBLE
32410: LD_INT 1
32412: DEC
32413: ST_TO_ADDR
32414: LD_VAR 0 9
32418: PUSH
32419: FOR_TO
32420: IFFALSE 32518
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32422: LD_VAR 0 14
32426: PUSH
32427: LD_VAR 0 8
32431: ARRAY
32432: PPUSH
32433: CALL_OW 247
32437: PUSH
32438: LD_INT 1
32440: EQUAL
32441: PUSH
32442: LD_VAR 0 14
32446: PUSH
32447: LD_VAR 0 8
32451: ARRAY
32452: PPUSH
32453: CALL_OW 256
32457: PUSH
32458: LD_INT 250
32460: LESS
32461: PUSH
32462: LD_VAR 0 20
32466: AND
32467: PUSH
32468: LD_VAR 0 20
32472: NOT
32473: PUSH
32474: LD_VAR 0 14
32478: PUSH
32479: LD_VAR 0 8
32483: ARRAY
32484: PPUSH
32485: CALL_OW 256
32489: PUSH
32490: LD_INT 250
32492: GREATEREQUAL
32493: AND
32494: OR
32495: AND
32496: IFFALSE 32516
// begin x := tmp [ j ] ;
32498: LD_ADDR_VAR 0 10
32502: PUSH
32503: LD_VAR 0 14
32507: PUSH
32508: LD_VAR 0 8
32512: ARRAY
32513: ST_TO_ADDR
// break ;
32514: GO 32518
// end ;
32516: GO 32419
32518: POP
32519: POP
// if x then
32520: LD_VAR 0 10
32524: IFFALSE 32548
// ComAttackUnit ( group [ i ] , x ) else
32526: LD_VAR 0 4
32530: PUSH
32531: LD_VAR 0 7
32535: ARRAY
32536: PPUSH
32537: LD_VAR 0 10
32541: PPUSH
32542: CALL_OW 115
32546: GO 32572
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32548: LD_VAR 0 4
32552: PUSH
32553: LD_VAR 0 7
32557: ARRAY
32558: PPUSH
32559: LD_VAR 0 14
32563: PUSH
32564: LD_INT 1
32566: ARRAY
32567: PPUSH
32568: CALL_OW 115
// end ; end ; end ;
32572: GO 29782
32574: POP
32575: POP
// wait ( 0 0$1 ) ;
32576: LD_INT 35
32578: PPUSH
32579: CALL_OW 67
// until group = [ ] ;
32583: LD_VAR 0 4
32587: PUSH
32588: EMPTY
32589: EQUAL
32590: IFFALSE 29767
// end ;
32592: LD_VAR 0 2
32596: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32597: LD_INT 0
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
32603: PPUSH
32604: PPUSH
32605: PPUSH
// if not defenders then
32606: LD_VAR 0 2
32610: NOT
32611: IFFALSE 32615
// exit ;
32613: GO 33139
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32615: LD_ADDR_VAR 0 9
32619: PUSH
32620: LD_EXP 46
32624: PUSH
32625: LD_VAR 0 1
32629: ARRAY
32630: PPUSH
32631: LD_INT 25
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PPUSH
32641: CALL_OW 72
32645: ST_TO_ADDR
// if mechs then
32646: LD_VAR 0 9
32650: IFFALSE 32749
// for i in defenders do
32652: LD_ADDR_VAR 0 5
32656: PUSH
32657: LD_VAR 0 2
32661: PUSH
32662: FOR_IN
32663: IFFALSE 32747
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32665: LD_VAR 0 5
32669: PPUSH
32670: CALL_OW 263
32674: PUSH
32675: LD_INT 1
32677: EQUAL
32678: PUSH
32679: LD_VAR 0 5
32683: PPUSH
32684: CALL_OW 311
32688: NOT
32689: AND
32690: IFFALSE 32745
// begin un := mechs [ 1 ] ;
32692: LD_ADDR_VAR 0 7
32696: PUSH
32697: LD_VAR 0 9
32701: PUSH
32702: LD_INT 1
32704: ARRAY
32705: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32706: LD_VAR 0 7
32710: PPUSH
32711: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32715: LD_VAR 0 7
32719: PPUSH
32720: LD_VAR 0 5
32724: PPUSH
32725: CALL_OW 180
// mechs := mechs diff un ;
32729: LD_ADDR_VAR 0 9
32733: PUSH
32734: LD_VAR 0 9
32738: PUSH
32739: LD_VAR 0 7
32743: DIFF
32744: ST_TO_ADDR
// end ;
32745: GO 32662
32747: POP
32748: POP
// repeat wait ( 0 0$1 ) ;
32749: LD_INT 35
32751: PPUSH
32752: CALL_OW 67
// enemy := mc_scan [ base ] ;
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_EXP 65
32765: PUSH
32766: LD_VAR 0 1
32770: ARRAY
32771: ST_TO_ADDR
// for i in defenders do
32772: LD_ADDR_VAR 0 5
32776: PUSH
32777: LD_VAR 0 2
32781: PUSH
32782: FOR_IN
32783: IFFALSE 32929
// begin e := NearestUnitToUnit ( enemy , i ) ;
32785: LD_ADDR_VAR 0 10
32789: PUSH
32790: LD_VAR 0 3
32794: PPUSH
32795: LD_VAR 0 5
32799: PPUSH
32800: CALL_OW 74
32804: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32805: LD_VAR 0 5
32809: PPUSH
32810: CALL_OW 319
32814: NOT
32815: PUSH
32816: LD_VAR 0 5
32820: PPUSH
32821: CALL_OW 302
32825: AND
32826: PUSH
32827: LD_VAR 0 5
32831: PPUSH
32832: LD_VAR 0 10
32836: PPUSH
32837: CALL_OW 296
32841: PUSH
32842: LD_INT 30
32844: LESS
32845: AND
32846: IFFALSE 32864
// ComAttackUnit ( i , e ) else
32848: LD_VAR 0 5
32852: PPUSH
32853: LD_VAR 0 10
32857: PPUSH
32858: CALL_OW 115
32862: GO 32927
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32864: LD_VAR 0 5
32868: PPUSH
32869: LD_VAR 0 10
32873: PPUSH
32874: CALL_OW 296
32878: PUSH
32879: LD_INT 30
32881: GREATEREQUAL
32882: PUSH
32883: LD_VAR 0 5
32887: PPUSH
32888: LD_EXP 66
32892: PUSH
32893: LD_VAR 0 1
32897: ARRAY
32898: PPUSH
32899: CALL_OW 308
32903: NOT
32904: AND
32905: IFFALSE 32927
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32907: LD_VAR 0 5
32911: PPUSH
32912: LD_EXP 66
32916: PUSH
32917: LD_VAR 0 1
32921: ARRAY
32922: PPUSH
32923: CALL_OW 113
// end ;
32927: GO 32782
32929: POP
32930: POP
// until not enemy or not defenders ;
32931: LD_VAR 0 3
32935: NOT
32936: PUSH
32937: LD_VAR 0 2
32941: NOT
32942: OR
32943: IFFALSE 32749
// if not enemy and defenders then
32945: LD_VAR 0 3
32949: NOT
32950: PUSH
32951: LD_VAR 0 2
32955: AND
32956: IFFALSE 33114
// repeat wait ( 0 0$1 ) ;
32958: LD_INT 35
32960: PPUSH
32961: CALL_OW 67
// for i in defenders do
32965: LD_ADDR_VAR 0 5
32969: PUSH
32970: LD_VAR 0 2
32974: PUSH
32975: FOR_IN
32976: IFFALSE 33065
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32978: LD_VAR 0 5
32982: PPUSH
32983: LD_EXP 66
32987: PUSH
32988: LD_VAR 0 1
32992: ARRAY
32993: PPUSH
32994: CALL_OW 308
32998: NOT
32999: IFFALSE 33023
// ComMoveToArea ( i , mc_parking [ base ] ) else
33001: LD_VAR 0 5
33005: PPUSH
33006: LD_EXP 66
33010: PUSH
33011: LD_VAR 0 1
33015: ARRAY
33016: PPUSH
33017: CALL_OW 113
33021: GO 33063
// if GetControl ( i ) = control_manual then
33023: LD_VAR 0 5
33027: PPUSH
33028: CALL_OW 263
33032: PUSH
33033: LD_INT 1
33035: EQUAL
33036: IFFALSE 33063
// if IsDrivenBy ( i ) then
33038: LD_VAR 0 5
33042: PPUSH
33043: CALL_OW 311
33047: IFFALSE 33063
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33049: LD_VAR 0 5
33053: PPUSH
33054: CALL_OW 311
33058: PPUSH
33059: CALL_OW 121
// end ;
33063: GO 32975
33065: POP
33066: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33067: LD_VAR 0 2
33071: PPUSH
33072: LD_INT 95
33074: PUSH
33075: LD_EXP 66
33079: PUSH
33080: LD_VAR 0 1
33084: ARRAY
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 72
33094: PUSH
33095: LD_VAR 0 2
33099: EQUAL
33100: PUSH
33101: LD_EXP 65
33105: PUSH
33106: LD_VAR 0 1
33110: ARRAY
33111: OR
33112: IFFALSE 32958
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33114: LD_ADDR_EXP 64
33118: PUSH
33119: LD_EXP 64
33123: PPUSH
33124: LD_VAR 0 1
33128: PPUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: CALL_OW 1
33138: ST_TO_ADDR
// end ;
33139: LD_VAR 0 4
33143: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33144: LD_INT 0
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
// if not base_units then
33150: LD_VAR 0 1
33154: NOT
33155: IFFALSE 33159
// exit ;
33157: GO 33246
// result := false ;
33159: LD_ADDR_VAR 0 2
33163: PUSH
33164: LD_INT 0
33166: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33167: LD_ADDR_VAR 0 5
33171: PUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 3
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PPUSH
33187: CALL_OW 72
33191: ST_TO_ADDR
// if not tmp then
33192: LD_VAR 0 5
33196: NOT
33197: IFFALSE 33201
// exit ;
33199: GO 33246
// for i in tmp do
33201: LD_ADDR_VAR 0 3
33205: PUSH
33206: LD_VAR 0 5
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33244
// begin result := EnemyInRange ( i , 18 ) ;
33214: LD_ADDR_VAR 0 2
33218: PUSH
33219: LD_VAR 0 3
33223: PPUSH
33224: LD_INT 18
33226: PPUSH
33227: CALL 28035 0 2
33231: ST_TO_ADDR
// if result then
33232: LD_VAR 0 2
33236: IFFALSE 33242
// exit ;
33238: POP
33239: POP
33240: GO 33246
// end ;
33242: GO 33211
33244: POP
33245: POP
// end ;
33246: LD_VAR 0 2
33250: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
33255: PPUSH
33256: PPUSH
// result := false ;
33257: LD_ADDR_VAR 0 2
33261: PUSH
33262: LD_INT 0
33264: ST_TO_ADDR
// side := GetSide ( unit ) ;
33265: LD_ADDR_VAR 0 3
33269: PUSH
33270: LD_VAR 0 1
33274: PPUSH
33275: CALL_OW 255
33279: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33280: LD_ADDR_VAR 0 4
33284: PUSH
33285: LD_VAR 0 1
33289: PPUSH
33290: CALL_OW 248
33294: ST_TO_ADDR
// case nat of 1 :
33295: LD_VAR 0 4
33299: PUSH
33300: LD_INT 1
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33319
33308: POP
// tech := tech_lassight ; 2 :
33309: LD_ADDR_VAR 0 5
33313: PUSH
33314: LD_INT 12
33316: ST_TO_ADDR
33317: GO 33358
33319: LD_INT 2
33321: DOUBLE
33322: EQUAL
33323: IFTRUE 33327
33325: GO 33338
33327: POP
// tech := tech_mortar ; 3 :
33328: LD_ADDR_VAR 0 5
33332: PUSH
33333: LD_INT 41
33335: ST_TO_ADDR
33336: GO 33358
33338: LD_INT 3
33340: DOUBLE
33341: EQUAL
33342: IFTRUE 33346
33344: GO 33357
33346: POP
// tech := tech_bazooka ; end ;
33347: LD_ADDR_VAR 0 5
33351: PUSH
33352: LD_INT 44
33354: ST_TO_ADDR
33355: GO 33358
33357: POP
// if Researched ( side , tech ) then
33358: LD_VAR 0 3
33362: PPUSH
33363: LD_VAR 0 5
33367: PPUSH
33368: CALL_OW 325
33372: IFFALSE 33399
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33374: LD_ADDR_VAR 0 2
33378: PUSH
33379: LD_INT 5
33381: PUSH
33382: LD_INT 8
33384: PUSH
33385: LD_INT 9
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: LIST
33392: PUSH
33393: LD_VAR 0 4
33397: ARRAY
33398: ST_TO_ADDR
// end ;
33399: LD_VAR 0 2
33403: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33404: LD_INT 0
33406: PPUSH
33407: PPUSH
33408: PPUSH
// if not mines then
33409: LD_VAR 0 2
33413: NOT
33414: IFFALSE 33418
// exit ;
33416: GO 33541
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33418: LD_ADDR_VAR 0 5
33422: PUSH
33423: LD_INT 81
33425: PUSH
33426: LD_VAR 0 1
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PPUSH
33435: CALL_OW 69
33439: ST_TO_ADDR
// for i in mines do
33440: LD_ADDR_VAR 0 4
33444: PUSH
33445: LD_VAR 0 2
33449: PUSH
33450: FOR_IN
33451: IFFALSE 33539
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33453: LD_VAR 0 4
33457: PUSH
33458: LD_INT 1
33460: ARRAY
33461: PPUSH
33462: LD_VAR 0 4
33466: PUSH
33467: LD_INT 2
33469: ARRAY
33470: PPUSH
33471: CALL_OW 458
33475: NOT
33476: IFFALSE 33480
// continue ;
33478: GO 33450
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33480: LD_VAR 0 4
33484: PUSH
33485: LD_INT 1
33487: ARRAY
33488: PPUSH
33489: LD_VAR 0 4
33493: PUSH
33494: LD_INT 2
33496: ARRAY
33497: PPUSH
33498: CALL_OW 428
33502: PUSH
33503: LD_VAR 0 5
33507: IN
33508: IFFALSE 33537
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33510: LD_VAR 0 4
33514: PUSH
33515: LD_INT 1
33517: ARRAY
33518: PPUSH
33519: LD_VAR 0 4
33523: PUSH
33524: LD_INT 2
33526: ARRAY
33527: PPUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 456
// end ;
33537: GO 33450
33539: POP
33540: POP
// end ; end_of_file
33541: LD_VAR 0 3
33545: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33546: LD_INT 0
33548: PPUSH
33549: PPUSH
33550: PPUSH
33551: PPUSH
33552: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33553: LD_ADDR_VAR 0 5
33557: PUSH
33558: LD_INT 6
33560: PUSH
33561: LD_INT 7
33563: PUSH
33564: LD_INT 8
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: LD_OWVAR 67
33576: ARRAY
33577: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33578: LD_INT 69
33580: PUSH
33581: EMPTY
33582: LIST
33583: PPUSH
33584: LD_INT 141
33586: PPUSH
33587: CALL_OW 169
// Wait ( 1 ) ;
33591: LD_INT 1
33593: PPUSH
33594: CALL_OW 67
// uc_side := 2 ;
33598: LD_ADDR_OWVAR 20
33602: PUSH
33603: LD_INT 2
33605: ST_TO_ADDR
// uc_nation := 2 ;
33606: LD_ADDR_OWVAR 21
33610: PUSH
33611: LD_INT 2
33613: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33614: LD_ADDR_OWVAR 37
33618: PUSH
33619: LD_INT 14
33621: ST_TO_ADDR
// vc_engine := engine_siberite ;
33622: LD_ADDR_OWVAR 39
33626: PUSH
33627: LD_INT 3
33629: ST_TO_ADDR
// vc_control := control_manual ;
33630: LD_ADDR_OWVAR 38
33634: PUSH
33635: LD_INT 1
33637: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33638: LD_ADDR_OWVAR 40
33642: PUSH
33643: LD_INT 31
33645: ST_TO_ADDR
// for i = 1 to 3 do
33646: LD_ADDR_VAR 0 2
33650: PUSH
33651: DOUBLE
33652: LD_INT 1
33654: DEC
33655: ST_TO_ADDR
33656: LD_INT 3
33658: PUSH
33659: FOR_TO
33660: IFFALSE 33744
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33662: LD_INT 0
33664: PPUSH
33665: LD_INT 3
33667: PPUSH
33668: LD_VAR 0 5
33672: PPUSH
33673: CALL_OW 380
// un := CreateVehicle ;
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: CALL_OW 45
33686: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33687: LD_VAR 0 4
33691: PPUSH
33692: LD_INT 0
33694: PPUSH
33695: LD_INT 5
33697: PPUSH
33698: CALL_OW 12
33702: PPUSH
33703: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33707: LD_VAR 0 4
33711: PPUSH
33712: LD_INT 156
33714: PPUSH
33715: LD_INT 15
33717: PPUSH
33718: LD_INT 6
33720: PPUSH
33721: LD_INT 0
33723: PPUSH
33724: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33728: CALL_OW 44
33732: PPUSH
33733: LD_VAR 0 4
33737: PPUSH
33738: CALL_OW 52
// end ;
33742: GO 33659
33744: POP
33745: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
33746: LD_ADDR_EXP 35
33750: PUSH
33751: LD_INT 94
33753: PPUSH
33754: LD_STRING dammam
33756: PPUSH
33757: LD_VAR 0 5
33761: PPUSH
33762: LD_INT 10000
33764: PUSH
33765: LD_INT 1000
33767: PUSH
33768: LD_INT 300
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: PPUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: LD_INT 5
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 4
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: PPUSH
33796: CALL 5966 0 5
33800: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33801: LD_ADDR_EXP 35
33805: PUSH
33806: LD_EXP 35
33810: PUSH
33811: LD_INT 122
33813: PPUSH
33814: LD_STRING 
33816: PPUSH
33817: LD_VAR 0 5
33821: PPUSH
33822: LD_INT 100
33824: PUSH
33825: LD_INT 60
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: PPUSH
33836: LD_INT 1
33838: NEG
33839: PUSH
33840: LD_INT 4
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: LD_INT 0
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: PPUSH
33855: CALL 5966 0 5
33859: ADD
33860: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33861: LD_ADDR_EXP 33
33865: PUSH
33866: LD_INT 45
33868: PPUSH
33869: LD_STRING jeddah
33871: PPUSH
33872: LD_VAR 0 5
33876: PPUSH
33877: LD_INT 700
33879: PUSH
33880: LD_INT 300
33882: PUSH
33883: LD_INT 10
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: LIST
33890: PPUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: LD_INT 5
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 2
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: PPUSH
33910: CALL 5966 0 5
33914: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33915: LD_ADDR_EXP 34
33919: PUSH
33920: LD_INT 7
33922: PPUSH
33923: LD_STRING riyadh
33925: PPUSH
33926: LD_VAR 0 5
33930: PPUSH
33931: LD_INT 500
33933: PUSH
33934: LD_INT 60
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: LIST
33944: PPUSH
33945: LD_INT 4
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 3
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: PPUSH
33963: CALL 5966 0 5
33967: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33968: LD_ADDR_EXP 36
33972: PUSH
33973: LD_INT 69
33975: PPUSH
33976: LD_STRING 
33978: PPUSH
33979: LD_VAR 0 5
33983: PPUSH
33984: LD_INT 500
33986: PUSH
33987: LD_INT 50
33989: PUSH
33990: LD_INT 0
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: PPUSH
33998: LD_INT 1
34000: NEG
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: LD_INT 3
34007: PUSH
34008: LD_INT 2
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: PPUSH
34017: CALL 5966 0 5
34021: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34022: LD_ADDR_EXP 46
34026: PUSH
34027: LD_EXP 35
34031: PUSH
34032: LD_EXP 33
34036: PUSH
34037: LD_EXP 36
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34047: LD_ADDR_VAR 0 2
34051: PUSH
34052: LD_INT 22
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 30
34064: PUSH
34065: LD_INT 31
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 58
34074: PUSH
34075: EMPTY
34076: LIST
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: LIST
34082: PPUSH
34083: CALL_OW 69
34087: PUSH
34088: FOR_IN
34089: IFFALSE 34214
// begin if GetBase ( i ) then
34091: LD_VAR 0 2
34095: PPUSH
34096: CALL_OW 274
34100: IFFALSE 34104
// continue ;
34102: GO 34088
// d := GetDir ( i ) ;
34104: LD_ADDR_VAR 0 3
34108: PUSH
34109: LD_VAR 0 2
34113: PPUSH
34114: CALL_OW 254
34118: ST_TO_ADDR
// if d < 3 then
34119: LD_VAR 0 3
34123: PUSH
34124: LD_INT 3
34126: LESS
34127: IFFALSE 34145
// d := d + 3 else
34129: LD_ADDR_VAR 0 3
34133: PUSH
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 3
34141: PLUS
34142: ST_TO_ADDR
34143: GO 34159
// d := d - 3 ;
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_VAR 0 3
34154: PUSH
34155: LD_INT 3
34157: MINUS
34158: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34159: LD_INT 0
34161: PPUSH
34162: LD_INT 8
34164: PPUSH
34165: LD_VAR 0 5
34169: PPUSH
34170: CALL_OW 380
// un := CreateHuman ;
34174: LD_ADDR_VAR 0 4
34178: PUSH
34179: CALL_OW 44
34183: ST_TO_ADDR
// SetDir ( un , d ) ;
34184: LD_VAR 0 4
34188: PPUSH
34189: LD_VAR 0 3
34193: PPUSH
34194: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34198: LD_VAR 0 4
34202: PPUSH
34203: LD_VAR 0 2
34207: PPUSH
34208: CALL_OW 52
// end ;
34212: GO 34088
34214: POP
34215: POP
// if Difficulty > 1 then
34216: LD_OWVAR 67
34220: PUSH
34221: LD_INT 1
34223: GREATER
34224: IFFALSE 34595
// begin ar_kamikadze := [ ] ;
34226: LD_ADDR_EXP 39
34230: PUSH
34231: EMPTY
34232: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34233: LD_INT 0
34235: PPUSH
34236: LD_INT 1
34238: PPUSH
34239: LD_VAR 0 5
34243: PPUSH
34244: CALL_OW 380
// un := CreateHuman ;
34248: LD_ADDR_VAR 0 4
34252: PUSH
34253: CALL_OW 44
34257: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34258: LD_VAR 0 4
34262: PPUSH
34263: LD_INT 3
34265: PPUSH
34266: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34270: LD_VAR 0 4
34274: PPUSH
34275: LD_INT 23
34277: PPUSH
34278: LD_INT 44
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: CALL_OW 48
// ComCrawl ( un ) ;
34288: LD_VAR 0 4
34292: PPUSH
34293: CALL_OW 137
// un := CreateHuman ;
34297: LD_ADDR_VAR 0 4
34301: PUSH
34302: CALL_OW 44
34306: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34307: LD_VAR 0 4
34311: PPUSH
34312: LD_INT 3
34314: PPUSH
34315: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34319: LD_VAR 0 4
34323: PPUSH
34324: LD_INT 30
34326: PPUSH
34327: LD_INT 39
34329: PPUSH
34330: LD_INT 0
34332: PPUSH
34333: CALL_OW 48
// ComCrawl ( un ) ;
34337: LD_VAR 0 4
34341: PPUSH
34342: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34346: LD_INT 0
34348: PPUSH
34349: LD_INT 17
34351: PPUSH
34352: LD_VAR 0 5
34356: PPUSH
34357: CALL_OW 380
// un := CreateHuman ;
34361: LD_ADDR_VAR 0 4
34365: PUSH
34366: CALL_OW 44
34370: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34371: LD_VAR 0 4
34375: PPUSH
34376: LD_INT 3
34378: PPUSH
34379: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34383: LD_VAR 0 4
34387: PPUSH
34388: LD_INT 45
34390: PPUSH
34391: LD_INT 86
34393: PPUSH
34394: LD_INT 0
34396: PPUSH
34397: CALL_OW 48
// ComHold ( un ) ;
34401: LD_VAR 0 4
34405: PPUSH
34406: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34410: LD_ADDR_EXP 39
34414: PUSH
34415: LD_EXP 39
34419: PPUSH
34420: LD_EXP 39
34424: PUSH
34425: LD_INT 1
34427: PLUS
34428: PPUSH
34429: LD_VAR 0 4
34433: PPUSH
34434: CALL_OW 1
34438: ST_TO_ADDR
// un := CreateHuman ;
34439: LD_ADDR_VAR 0 4
34443: PUSH
34444: CALL_OW 44
34448: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34449: LD_VAR 0 4
34453: PPUSH
34454: LD_INT 3
34456: PPUSH
34457: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34461: LD_VAR 0 4
34465: PPUSH
34466: LD_INT 60
34468: PPUSH
34469: LD_INT 85
34471: PPUSH
34472: LD_INT 0
34474: PPUSH
34475: CALL_OW 48
// ComHold ( un ) ;
34479: LD_VAR 0 4
34483: PPUSH
34484: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34488: LD_ADDR_EXP 39
34492: PUSH
34493: LD_EXP 39
34497: PPUSH
34498: LD_EXP 39
34502: PUSH
34503: LD_INT 1
34505: PLUS
34506: PPUSH
34507: LD_VAR 0 4
34511: PPUSH
34512: CALL_OW 1
34516: ST_TO_ADDR
// un := CreateHuman ;
34517: LD_ADDR_VAR 0 4
34521: PUSH
34522: CALL_OW 44
34526: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34527: LD_VAR 0 4
34531: PPUSH
34532: LD_INT 3
34534: PPUSH
34535: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34539: LD_VAR 0 4
34543: PPUSH
34544: LD_INT 222
34546: PPUSH
34547: LD_INT 166
34549: PPUSH
34550: LD_INT 0
34552: PPUSH
34553: CALL_OW 48
// ComHold ( un ) ;
34557: LD_VAR 0 4
34561: PPUSH
34562: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34566: LD_ADDR_EXP 39
34570: PUSH
34571: LD_EXP 39
34575: PPUSH
34576: LD_EXP 39
34580: PUSH
34581: LD_INT 1
34583: PLUS
34584: PPUSH
34585: LD_VAR 0 4
34589: PPUSH
34590: CALL_OW 1
34594: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34595: LD_ADDR_EXP 37
34599: PUSH
34600: EMPTY
34601: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34602: LD_INT 1
34604: PPUSH
34605: LD_INT 1
34607: PPUSH
34608: LD_VAR 0 5
34612: PPUSH
34613: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34617: LD_ADDR_OWVAR 33
34621: PUSH
34622: LD_STRING SecondCharsGal
34624: ST_TO_ADDR
// hc_face_number := 4 ;
34625: LD_ADDR_OWVAR 34
34629: PUSH
34630: LD_INT 4
34632: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34633: LD_ADDR_EXP 37
34637: PUSH
34638: LD_EXP 37
34642: PPUSH
34643: LD_INT 1
34645: PPUSH
34646: CALL_OW 44
34650: PPUSH
34651: CALL_OW 1
34655: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34656: LD_INT 2
34658: PPUSH
34659: LD_INT 4
34661: PPUSH
34662: LD_VAR 0 5
34666: PPUSH
34667: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34671: LD_ADDR_OWVAR 33
34675: PUSH
34676: LD_STRING SecondCharsGal
34678: ST_TO_ADDR
// hc_face_number := 15 ;
34679: LD_ADDR_OWVAR 34
34683: PUSH
34684: LD_INT 15
34686: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34687: LD_ADDR_EXP 37
34691: PUSH
34692: LD_EXP 37
34696: PPUSH
34697: LD_INT 2
34699: PPUSH
34700: CALL_OW 44
34704: PPUSH
34705: CALL_OW 1
34709: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34710: LD_INT 2
34712: PPUSH
34713: LD_INT 4
34715: PPUSH
34716: LD_VAR 0 5
34720: PPUSH
34721: CALL_OW 380
// hc_gallery :=  ;
34725: LD_ADDR_OWVAR 33
34729: PUSH
34730: LD_STRING 
34732: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34733: LD_ADDR_EXP 37
34737: PUSH
34738: LD_EXP 37
34742: PPUSH
34743: LD_INT 3
34745: PPUSH
34746: CALL_OW 44
34750: PPUSH
34751: CALL_OW 1
34755: ST_TO_ADDR
// hc_sex := sex_male ;
34756: LD_ADDR_OWVAR 27
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
// hc_class = 11 ;
34764: LD_ADDR_OWVAR 28
34768: PUSH
34769: LD_INT 11
34771: ST_TO_ADDR
// hc_gallery = sandar ;
34772: LD_ADDR_OWVAR 33
34776: PUSH
34777: LD_STRING sandar
34779: ST_TO_ADDR
// hc_face_number = 33 ;
34780: LD_ADDR_OWVAR 34
34784: PUSH
34785: LD_INT 33
34787: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34788: LD_ADDR_OWVAR 26
34792: PUSH
34793: LD_STRING Thabit Muhair Saliba
34795: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34796: LD_ADDR_OWVAR 31
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
// Saliba = CreateHuman ;
34819: LD_ADDR_EXP 41
34823: PUSH
34824: CALL_OW 44
34828: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34829: LD_EXP 41
34833: PPUSH
34834: LD_INT 7
34836: PPUSH
34837: CALL_OW 52
// if gensher_active then
34841: LD_EXP 17
34845: IFFALSE 34872
// begin Gensher = NewCharacter ( Gensher ) ;
34847: LD_ADDR_EXP 42
34851: PUSH
34852: LD_STRING Gensher
34854: PPUSH
34855: CALL_OW 25
34859: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
34860: LD_EXP 42
34864: PPUSH
34865: LD_INT 94
34867: PPUSH
34868: CALL_OW 52
// end ; InitHc ;
34872: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
34876: LD_ADDR_EXP 38
34880: PUSH
34881: EMPTY
34882: ST_TO_ADDR
// for i = 1 to 4 do
34883: LD_ADDR_VAR 0 2
34887: PUSH
34888: DOUBLE
34889: LD_INT 1
34891: DEC
34892: ST_TO_ADDR
34893: LD_INT 4
34895: PUSH
34896: FOR_TO
34897: IFFALSE 35069
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34899: LD_INT 13
34901: PUSH
34902: LD_INT 14
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PPUSH
34912: LD_INT 2
34914: PPUSH
34915: CALL_OW 12
34919: ARRAY
34920: PPUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 2
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 1
34933: PPUSH
34934: LD_INT 2
34936: PPUSH
34937: CALL_OW 12
34941: ARRAY
34942: PPUSH
34943: LD_INT 1
34945: PPUSH
34946: LD_INT 25
34948: PUSH
34949: LD_INT 27
34951: PUSH
34952: LD_INT 26
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 1
34962: PPUSH
34963: LD_INT 3
34965: PPUSH
34966: CALL_OW 12
34970: ARRAY
34971: PPUSH
34972: LD_INT 60
34974: PPUSH
34975: LD_INT 100
34977: PPUSH
34978: CALL_OW 12
34982: PPUSH
34983: CALL 2003 0 5
// un := CreateVehicle ;
34987: LD_ADDR_VAR 0 4
34991: PUSH
34992: CALL_OW 45
34996: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34997: LD_ADDR_EXP 38
35001: PUSH
35002: LD_EXP 38
35006: PPUSH
35007: LD_EXP 38
35011: PUSH
35012: LD_INT 1
35014: PLUS
35015: PPUSH
35016: LD_VAR 0 4
35020: PPUSH
35021: CALL_OW 1
35025: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35026: LD_VAR 0 4
35030: PPUSH
35031: LD_INT 0
35033: PPUSH
35034: LD_INT 5
35036: PPUSH
35037: CALL_OW 12
35041: PPUSH
35042: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35046: LD_VAR 0 4
35050: PPUSH
35051: LD_INT 124
35053: PPUSH
35054: LD_INT 141
35056: PPUSH
35057: LD_INT 6
35059: PPUSH
35060: LD_INT 0
35062: PPUSH
35063: CALL_OW 50
// end ;
35067: GO 34896
35069: POP
35070: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35071: LD_ADDR_EXP 40
35075: PUSH
35076: EMPTY
35077: PUSH
35078: EMPTY
35079: PUSH
35080: EMPTY
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35087: LD_ADDR_VAR 0 3
35091: PUSH
35092: DOUBLE
35093: LD_INT 1
35095: DEC
35096: ST_TO_ADDR
35097: LD_INT 3
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: LD_INT 4
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: LIST
35110: PUSH
35111: LD_OWVAR 67
35115: ARRAY
35116: PUSH
35117: FOR_TO
35118: IFFALSE 35332
// for i = 1 to 3 do
35120: LD_ADDR_VAR 0 2
35124: PUSH
35125: DOUBLE
35126: LD_INT 1
35128: DEC
35129: ST_TO_ADDR
35130: LD_INT 3
35132: PUSH
35133: FOR_TO
35134: IFFALSE 35328
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35136: LD_INT 14
35138: PPUSH
35139: LD_INT 3
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: PPUSH
35152: LD_INT 2
35154: PPUSH
35155: CALL_OW 12
35159: ARRAY
35160: PPUSH
35161: LD_INT 1
35163: PUSH
35164: LD_INT 5
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: PPUSH
35174: LD_INT 2
35176: PPUSH
35177: CALL_OW 12
35181: ARRAY
35182: PPUSH
35183: LD_INT 25
35185: PUSH
35186: LD_INT 27
35188: PUSH
35189: LD_INT 26
35191: PUSH
35192: LD_INT 28
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PPUSH
35204: LD_INT 4
35206: PPUSH
35207: CALL_OW 12
35211: ARRAY
35212: PPUSH
35213: LD_INT 100
35215: PPUSH
35216: CALL 2003 0 5
// un := CreateVehicle ;
35220: LD_ADDR_VAR 0 4
35224: PUSH
35225: CALL_OW 45
35229: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35230: LD_ADDR_EXP 40
35234: PUSH
35235: LD_EXP 40
35239: PPUSH
35240: LD_VAR 0 2
35244: PUSH
35245: LD_EXP 40
35249: PUSH
35250: LD_VAR 0 2
35254: ARRAY
35255: PUSH
35256: LD_INT 1
35258: PLUS
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PPUSH
35264: LD_VAR 0 4
35268: PPUSH
35269: CALL 3175 0 3
35273: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35274: LD_VAR 0 4
35278: PPUSH
35279: LD_INT 0
35281: PPUSH
35282: LD_INT 5
35284: PPUSH
35285: CALL_OW 12
35289: PPUSH
35290: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35294: LD_VAR 0 4
35298: PPUSH
35299: LD_INT 20
35301: PUSH
35302: LD_INT 21
35304: PUSH
35305: LD_INT 22
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PUSH
35313: LD_VAR 0 2
35317: ARRAY
35318: PPUSH
35319: LD_INT 0
35321: PPUSH
35322: CALL_OW 49
// end ;
35326: GO 35133
35328: POP
35329: POP
35330: GO 35117
35332: POP
35333: POP
// InitHc ;
35334: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35338: LD_INT 4
35340: PPUSH
35341: LD_INT 5
35343: PPUSH
35344: LD_INT 10
35346: PPUSH
35347: LD_INT 5
35349: PPUSH
35350: LD_INT 0
35352: PPUSH
35353: CALL_OW 58
// end ;
35357: LD_VAR 0 1
35361: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35362: LD_EXP 39
35366: IFFALSE 35440
35368: GO 35370
35370: DISABLE
35371: LD_INT 0
35373: PPUSH
// begin enable ;
35374: ENABLE
// for i in ar_kamikadze do
35375: LD_ADDR_VAR 0 1
35379: PUSH
35380: LD_EXP 39
35384: PUSH
35385: FOR_IN
35386: IFFALSE 35438
// if See ( 1 , i ) then
35388: LD_INT 1
35390: PPUSH
35391: LD_VAR 0 1
35395: PPUSH
35396: CALL_OW 292
35400: IFFALSE 35436
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35402: LD_VAR 0 1
35406: PPUSH
35407: LD_INT 81
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PPUSH
35417: CALL_OW 69
35421: PPUSH
35422: LD_VAR 0 1
35426: PPUSH
35427: CALL_OW 74
35431: PPUSH
35432: CALL_OW 115
35436: GO 35385
35438: POP
35439: POP
// end ;
35440: PPOPN 1
35442: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35443: LD_EXP 12
35447: IFFALSE 35764
35449: GO 35451
35451: DISABLE
35452: LD_INT 0
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35458: LD_INT 35
35460: PPUSH
35461: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35465: LD_INT 1
35467: PPUSH
35468: CALL 54646 0 1
35472: PUSH
35473: LD_INT 0
35475: EQUAL
35476: IFFALSE 35458
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35478: LD_INT 1
35480: PPUSH
35481: LD_INT 14
35483: PUSH
35484: LD_INT 3
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 32
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: PUSH
35499: EMPTY
35500: LIST
35501: PPUSH
35502: CALL 54435 0 2
// repeat wait ( 0 0$1 ) ;
35506: LD_INT 35
35508: PPUSH
35509: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35513: LD_EXP 61
35517: PUSH
35518: LD_INT 1
35520: ARRAY
35521: PPUSH
35522: LD_INT 33
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 34
35534: PUSH
35535: LD_INT 32
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PPUSH
35546: CALL_OW 72
35550: IFFALSE 35506
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35552: LD_ADDR_VAR 0 2
35556: PUSH
35557: LD_EXP 61
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: LD_INT 33
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 34
35578: PUSH
35579: LD_INT 32
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PPUSH
35590: CALL_OW 72
35594: PUSH
35595: LD_INT 1
35597: ARRAY
35598: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35599: LD_ADDR_VAR 0 4
35603: PUSH
35604: LD_INT 5
35606: PPUSH
35607: CALL_OW 469
35611: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35612: LD_INT 35
35614: PPUSH
35615: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35619: LD_ADDR_VAR 0 4
35623: PUSH
35624: LD_INT 5
35626: PPUSH
35627: CALL_OW 469
35631: ST_TO_ADDR
// tmp := 100 ;
35632: LD_ADDR_VAR 0 3
35636: PUSH
35637: LD_INT 100
35639: ST_TO_ADDR
// if pos then
35640: LD_VAR 0 4
35644: IFFALSE 35684
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35646: LD_ADDR_VAR 0 3
35650: PUSH
35651: LD_INT 2
35653: PPUSH
35654: LD_VAR 0 4
35658: PUSH
35659: LD_INT 1
35661: ARRAY
35662: PPUSH
35663: LD_VAR 0 4
35667: PUSH
35668: LD_INT 2
35670: ARRAY
35671: PPUSH
35672: LD_INT 20
35674: PPUSH
35675: CALL 3669 0 4
35679: PUSH
35680: LD_INT 4
35682: ARRAY
35683: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35684: LD_VAR 0 4
35688: PUSH
35689: LD_EXP 13
35693: NOT
35694: AND
35695: PUSH
35696: LD_VAR 0 3
35700: PUSH
35701: LD_INT 10
35703: LESS
35704: AND
35705: IFFALSE 35612
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35707: LD_VAR 0 2
35711: PPUSH
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PPUSH
35721: LD_VAR 0 4
35725: PUSH
35726: LD_INT 2
35728: ARRAY
35729: PPUSH
35730: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35734: LD_VAR 0 2
35738: PPUSH
35739: LD_INT 198
35741: PPUSH
35742: LD_INT 113
35744: PPUSH
35745: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35749: LD_VAR 0 2
35753: PPUSH
35754: LD_INT 124
35756: PPUSH
35757: LD_INT 7
35759: PPUSH
35760: CALL_OW 171
// end ;
35764: PPOPN 4
35766: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35767: LD_EXP 6
35771: IFFALSE 38316
35773: GO 35775
35775: DISABLE
35776: LD_INT 0
35778: PPUSH
35779: PPUSH
35780: PPUSH
35781: PPUSH
35782: PPUSH
35783: PPUSH
35784: PPUSH
35785: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35786: LD_ADDR_VAR 0 4
35790: PUSH
35791: LD_INT 5
35793: PUSH
35794: LD_INT 6
35796: PUSH
35797: LD_INT 7
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: PUSH
35805: LD_OWVAR 67
35809: ARRAY
35810: ST_TO_ADDR
// coords := [ ] ;
35811: LD_ADDR_VAR 0 5
35815: PUSH
35816: EMPTY
35817: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35818: LD_ADDR_VAR 0 6
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 0
35834: PUSH
35835: LD_INT 1
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35865: LD_INT 1
35867: PPUSH
35868: LD_INT 14
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 28
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 14
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: LD_INT 25
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 14
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: LD_INT 2
35912: PUSH
35913: LD_INT 28
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 14
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 29
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL 54435 0 2
// wait ( [ 10 10$00 , 9 9$00 , 8 8$20 ] [ Difficulty ] ) ;
35950: LD_INT 21000
35952: PUSH
35953: LD_INT 18900
35955: PUSH
35956: LD_INT 17500
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: PUSH
35964: LD_OWVAR 67
35968: ARRAY
35969: PPUSH
35970: CALL_OW 67
// InitHc ;
35974: CALL_OW 19
// InitUc ;
35978: CALL_OW 18
// uc_side := 2 ;
35982: LD_ADDR_OWVAR 20
35986: PUSH
35987: LD_INT 2
35989: ST_TO_ADDR
// uc_nation := 2 ;
35990: LD_ADDR_OWVAR 21
35994: PUSH
35995: LD_INT 2
35997: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: EMPTY
36004: PUSH
36005: EMPTY
36006: PUSH
36007: EMPTY
36008: PUSH
36009: EMPTY
36010: PUSH
36011: EMPTY
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36020: LD_ADDR_VAR 0 3
36024: PUSH
36025: LD_VAR 0 3
36029: PPUSH
36030: LD_INT 1
36032: PPUSH
36033: LD_EXP 61
36037: PUSH
36038: LD_INT 1
36040: ARRAY
36041: PUSH
36042: LD_INT 34
36044: PUSH
36045: LD_INT 32
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PPUSH
36052: CALL_OW 69
36056: DIFF
36057: PPUSH
36058: CALL_OW 1
36062: ST_TO_ADDR
// for i = 1 to Difficulty do
36063: LD_ADDR_VAR 0 1
36067: PUSH
36068: DOUBLE
36069: LD_INT 1
36071: DEC
36072: ST_TO_ADDR
36073: LD_OWVAR 67
36077: PUSH
36078: FOR_TO
36079: IFFALSE 36201
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36081: LD_INT 13
36083: PPUSH
36084: LD_INT 3
36086: PPUSH
36087: LD_INT 5
36089: PPUSH
36090: LD_INT 29
36092: PPUSH
36093: LD_INT 100
36095: PPUSH
36096: CALL 2003 0 5
// un := CreateVehicle ;
36100: LD_ADDR_VAR 0 2
36104: PUSH
36105: CALL_OW 45
36109: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36110: LD_ADDR_VAR 0 3
36114: PUSH
36115: LD_VAR 0 3
36119: PPUSH
36120: LD_INT 1
36122: PUSH
36123: LD_VAR 0 3
36127: PUSH
36128: LD_INT 1
36130: ARRAY
36131: PUSH
36132: LD_INT 1
36134: PLUS
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PPUSH
36140: LD_VAR 0 2
36144: PPUSH
36145: CALL 3175 0 3
36149: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36150: LD_VAR 0 2
36154: PPUSH
36155: LD_INT 3
36157: PPUSH
36158: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36162: LD_VAR 0 2
36166: PPUSH
36167: LD_INT 16
36169: PPUSH
36170: LD_INT 0
36172: PPUSH
36173: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36177: LD_VAR 0 2
36181: PPUSH
36182: LD_INT 51
36184: PPUSH
36185: LD_INT 10
36187: PPUSH
36188: CALL_OW 111
// wait ( 0 0$2 ) ;
36192: LD_INT 70
36194: PPUSH
36195: CALL_OW 67
// end ;
36199: GO 36078
36201: POP
36202: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36203: LD_ADDR_VAR 0 5
36207: PUSH
36208: LD_INT 51
36210: PUSH
36211: LD_INT 24
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 75
36220: PUSH
36221: LD_INT 90
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36232: LD_INT 1
36234: PPUSH
36235: LD_VAR 0 3
36239: PUSH
36240: LD_INT 1
36242: ARRAY
36243: PPUSH
36244: LD_VAR 0 5
36248: PPUSH
36249: LD_VAR 0 6
36253: PPUSH
36254: CALL 54531 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36258: LD_ADDR_VAR 0 1
36262: PUSH
36263: DOUBLE
36264: LD_INT 1
36266: DEC
36267: ST_TO_ADDR
36268: LD_INT 2
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: PUSH
36282: LD_OWVAR 67
36286: ARRAY
36287: PUSH
36288: FOR_TO
36289: IFFALSE 36373
// begin PrepareHuman ( false , 17 , skill ) ;
36291: LD_INT 0
36293: PPUSH
36294: LD_INT 17
36296: PPUSH
36297: LD_VAR 0 4
36301: PPUSH
36302: CALL_OW 380
// un := CreateHuman ;
36306: LD_ADDR_VAR 0 2
36310: PUSH
36311: CALL_OW 44
36315: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 3
36325: PPUSH
36326: LD_INT 2
36328: PUSH
36329: LD_VAR 0 3
36333: PUSH
36334: LD_INT 2
36336: ARRAY
36337: PUSH
36338: LD_INT 1
36340: PLUS
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PPUSH
36346: LD_VAR 0 2
36350: PPUSH
36351: CALL 3175 0 3
36355: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36356: LD_VAR 0 2
36360: PPUSH
36361: LD_INT 13
36363: PPUSH
36364: LD_INT 0
36366: PPUSH
36367: CALL_OW 49
// end ;
36371: GO 36288
36373: POP
36374: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36375: LD_ADDR_VAR 0 1
36379: PUSH
36380: DOUBLE
36381: LD_INT 1
36383: DEC
36384: ST_TO_ADDR
36385: LD_INT 3
36387: PUSH
36388: LD_INT 4
36390: PUSH
36391: LD_INT 4
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: PUSH
36399: LD_OWVAR 67
36403: ARRAY
36404: PUSH
36405: FOR_TO
36406: IFFALSE 36509
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36408: LD_INT 0
36410: PPUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 8
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PPUSH
36424: LD_INT 2
36426: PPUSH
36427: CALL_OW 12
36431: ARRAY
36432: PPUSH
36433: LD_VAR 0 4
36437: PPUSH
36438: CALL_OW 380
// un := CreateHuman ;
36442: LD_ADDR_VAR 0 2
36446: PUSH
36447: CALL_OW 44
36451: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_VAR 0 3
36461: PPUSH
36462: LD_INT 2
36464: PUSH
36465: LD_VAR 0 3
36469: PUSH
36470: LD_INT 2
36472: ARRAY
36473: PUSH
36474: LD_INT 1
36476: PLUS
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PPUSH
36482: LD_VAR 0 2
36486: PPUSH
36487: CALL 3175 0 3
36491: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36492: LD_VAR 0 2
36496: PPUSH
36497: LD_INT 13
36499: PPUSH
36500: LD_INT 0
36502: PPUSH
36503: CALL_OW 49
// end ;
36507: GO 36405
36509: POP
36510: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36511: LD_ADDR_VAR 0 5
36515: PUSH
36516: LD_INT 67
36518: PUSH
36519: LD_INT 112
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 85
36528: PUSH
36529: LD_INT 130
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36540: LD_INT 2
36542: PPUSH
36543: LD_VAR 0 3
36547: PUSH
36548: LD_INT 2
36550: ARRAY
36551: PPUSH
36552: LD_VAR 0 5
36556: PPUSH
36557: LD_VAR 0 6
36561: PPUSH
36562: CALL 54531 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36566: LD_ADDR_VAR 0 1
36570: PUSH
36571: DOUBLE
36572: LD_INT 1
36574: DEC
36575: ST_TO_ADDR
36576: LD_INT 1
36578: PUSH
36579: LD_INT 2
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: PUSH
36590: LD_OWVAR 67
36594: ARRAY
36595: PUSH
36596: FOR_TO
36597: IFFALSE 36681
// begin PrepareHuman ( false , 17 , skill ) ;
36599: LD_INT 0
36601: PPUSH
36602: LD_INT 17
36604: PPUSH
36605: LD_VAR 0 4
36609: PPUSH
36610: CALL_OW 380
// un := CreateHuman ;
36614: LD_ADDR_VAR 0 2
36618: PUSH
36619: CALL_OW 44
36623: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36624: LD_ADDR_VAR 0 3
36628: PUSH
36629: LD_VAR 0 3
36633: PPUSH
36634: LD_INT 3
36636: PUSH
36637: LD_VAR 0 3
36641: PUSH
36642: LD_INT 3
36644: ARRAY
36645: PUSH
36646: LD_INT 1
36648: PLUS
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PPUSH
36654: LD_VAR 0 2
36658: PPUSH
36659: CALL 3175 0 3
36663: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36664: LD_VAR 0 2
36668: PPUSH
36669: LD_INT 14
36671: PPUSH
36672: LD_INT 0
36674: PPUSH
36675: CALL_OW 49
// end ;
36679: GO 36596
36681: POP
36682: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36683: LD_ADDR_VAR 0 5
36687: PUSH
36688: LD_INT 148
36690: PUSH
36691: LD_INT 158
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 148
36700: PUSH
36701: LD_INT 158
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36712: LD_INT 3
36714: PPUSH
36715: LD_VAR 0 3
36719: PUSH
36720: LD_INT 3
36722: ARRAY
36723: PPUSH
36724: LD_VAR 0 5
36728: PPUSH
36729: LD_VAR 0 6
36733: PPUSH
36734: CALL 54531 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36738: LD_ADDR_VAR 0 1
36742: PUSH
36743: DOUBLE
36744: LD_INT 1
36746: DEC
36747: ST_TO_ADDR
36748: LD_INT 3
36750: PUSH
36751: LD_INT 4
36753: PUSH
36754: LD_INT 5
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: LIST
36761: PUSH
36762: LD_OWVAR 67
36766: ARRAY
36767: PUSH
36768: FOR_TO
36769: IFFALSE 36977
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36771: LD_INT 14
36773: PPUSH
36774: LD_INT 3
36776: PPUSH
36777: LD_INT 1
36779: PUSH
36780: LD_INT 5
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: PPUSH
36790: LD_INT 2
36792: PPUSH
36793: CALL_OW 12
36797: ARRAY
36798: PPUSH
36799: LD_INT 27
36801: PUSH
36802: LD_INT 26
36804: PUSH
36805: LD_INT 28
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PPUSH
36816: LD_INT 3
36818: PPUSH
36819: CALL_OW 12
36823: ARRAY
36824: PPUSH
36825: LD_INT 100
36827: PPUSH
36828: CALL 2003 0 5
// un := CreateVehicle ;
36832: LD_ADDR_VAR 0 2
36836: PUSH
36837: CALL_OW 45
36841: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36842: LD_ADDR_VAR 0 3
36846: PUSH
36847: LD_VAR 0 3
36851: PPUSH
36852: LD_INT 4
36854: PUSH
36855: LD_VAR 0 3
36859: PUSH
36860: LD_INT 4
36862: ARRAY
36863: PUSH
36864: LD_INT 1
36866: PLUS
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PPUSH
36872: LD_VAR 0 2
36876: PPUSH
36877: CALL 3175 0 3
36881: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36882: LD_VAR 0 2
36886: PPUSH
36887: LD_INT 5
36889: PPUSH
36890: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36894: LD_VAR 0 2
36898: PPUSH
36899: LD_INT 15
36901: PPUSH
36902: LD_INT 0
36904: PPUSH
36905: CALL_OW 49
// if GetControl ( un ) = control_manual then
36909: LD_VAR 0 2
36913: PPUSH
36914: CALL_OW 263
36918: PUSH
36919: LD_INT 1
36921: EQUAL
36922: IFFALSE 36953
// begin PrepareHuman ( false , 3 , skill ) ;
36924: LD_INT 0
36926: PPUSH
36927: LD_INT 3
36929: PPUSH
36930: LD_VAR 0 4
36934: PPUSH
36935: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36939: CALL_OW 44
36943: PPUSH
36944: LD_VAR 0 2
36948: PPUSH
36949: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36953: LD_VAR 0 2
36957: PPUSH
36958: LD_INT 179
36960: PPUSH
36961: LD_INT 135
36963: PPUSH
36964: CALL_OW 111
// wait ( 0 0$2 ) ;
36968: LD_INT 70
36970: PPUSH
36971: CALL_OW 67
// end ;
36975: GO 36768
36977: POP
36978: POP
// vc_chassis := 15 ;
36979: LD_ADDR_OWVAR 37
36983: PUSH
36984: LD_INT 15
36986: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: LD_VAR 0 3
36996: PPUSH
36997: LD_INT 4
36999: PUSH
37000: LD_VAR 0 3
37004: PUSH
37005: LD_INT 4
37007: ARRAY
37008: PUSH
37009: LD_INT 1
37011: PLUS
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PPUSH
37017: CALL_OW 45
37021: PPUSH
37022: CALL 3175 0 3
37026: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37027: LD_VAR 0 3
37031: PUSH
37032: LD_INT 4
37034: ARRAY
37035: PUSH
37036: LD_VAR 0 3
37040: PUSH
37041: LD_INT 4
37043: ARRAY
37044: ARRAY
37045: PPUSH
37046: LD_INT 15
37048: PPUSH
37049: LD_INT 0
37051: PPUSH
37052: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37056: LD_INT 0
37058: PPUSH
37059: LD_INT 11
37061: PPUSH
37062: LD_VAR 0 4
37066: PPUSH
37067: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37071: LD_ADDR_VAR 0 3
37075: PUSH
37076: LD_VAR 0 3
37080: PPUSH
37081: LD_INT 4
37083: PUSH
37084: LD_VAR 0 3
37088: PUSH
37089: LD_INT 4
37091: ARRAY
37092: PUSH
37093: LD_INT 1
37095: PLUS
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PPUSH
37101: CALL_OW 44
37105: PPUSH
37106: CALL 3175 0 3
37110: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37111: LD_VAR 0 3
37115: PUSH
37116: LD_INT 4
37118: ARRAY
37119: PUSH
37120: LD_VAR 0 3
37124: PUSH
37125: LD_INT 4
37127: ARRAY
37128: ARRAY
37129: PPUSH
37130: LD_VAR 0 3
37134: PUSH
37135: LD_INT 4
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 3
37143: PUSH
37144: LD_INT 4
37146: ARRAY
37147: PUSH
37148: LD_INT 1
37150: MINUS
37151: ARRAY
37152: PPUSH
37153: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37157: LD_ADDR_VAR 0 5
37161: PUSH
37162: LD_INT 148
37164: PUSH
37165: LD_INT 140
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: EMPTY
37173: LIST
37174: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37175: LD_INT 1
37177: PPUSH
37178: LD_VAR 0 3
37182: PUSH
37183: LD_INT 4
37185: ARRAY
37186: PPUSH
37187: LD_VAR 0 5
37191: PPUSH
37192: LD_VAR 0 6
37196: PPUSH
37197: CALL 54531 0 4
// if gensher_active then
37201: LD_EXP 17
37205: IFFALSE 37558
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37207: LD_EXP 42
37211: PPUSH
37212: LD_STRING D10-Diet-1
37214: PPUSH
37215: CALL_OW 94
// for i = 1 to 2 do
37219: LD_ADDR_VAR 0 1
37223: PUSH
37224: DOUBLE
37225: LD_INT 1
37227: DEC
37228: ST_TO_ADDR
37229: LD_INT 2
37231: PUSH
37232: FOR_TO
37233: IFFALSE 37355
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37235: LD_INT 13
37237: PPUSH
37238: LD_INT 3
37240: PPUSH
37241: LD_INT 5
37243: PPUSH
37244: LD_INT 29
37246: PPUSH
37247: LD_INT 100
37249: PPUSH
37250: CALL 2003 0 5
// un := CreateVehicle ;
37254: LD_ADDR_VAR 0 2
37258: PUSH
37259: CALL_OW 45
37263: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_VAR 0 3
37273: PPUSH
37274: LD_INT 5
37276: PUSH
37277: LD_VAR 0 3
37281: PUSH
37282: LD_INT 5
37284: ARRAY
37285: PUSH
37286: LD_INT 1
37288: PLUS
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PPUSH
37294: LD_VAR 0 2
37298: PPUSH
37299: CALL 3175 0 3
37303: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37304: LD_VAR 0 2
37308: PPUSH
37309: LD_INT 0
37311: PPUSH
37312: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37316: LD_VAR 0 2
37320: PPUSH
37321: LD_INT 23
37323: PPUSH
37324: LD_INT 0
37326: PPUSH
37327: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_INT 85
37338: PPUSH
37339: LD_INT 152
37341: PPUSH
37342: CALL_OW 111
// wait ( 0 0$2 ) ;
37346: LD_INT 70
37348: PPUSH
37349: CALL_OW 67
// end ;
37353: GO 37232
37355: POP
37356: POP
// for i = 1 to 3 do
37357: LD_ADDR_VAR 0 1
37361: PUSH
37362: DOUBLE
37363: LD_INT 1
37365: DEC
37366: ST_TO_ADDR
37367: LD_INT 3
37369: PUSH
37370: FOR_TO
37371: IFFALSE 37512
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37373: LD_INT 14
37375: PPUSH
37376: LD_INT 3
37378: PPUSH
37379: LD_INT 5
37381: PPUSH
37382: LD_INT 27
37384: PUSH
37385: LD_INT 28
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PPUSH
37395: LD_INT 2
37397: PPUSH
37398: CALL_OW 12
37402: ARRAY
37403: PPUSH
37404: LD_INT 100
37406: PPUSH
37407: CALL 2003 0 5
// un := CreateVehicle ;
37411: LD_ADDR_VAR 0 2
37415: PUSH
37416: CALL_OW 45
37420: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37421: LD_ADDR_VAR 0 3
37425: PUSH
37426: LD_VAR 0 3
37430: PPUSH
37431: LD_INT 5
37433: PUSH
37434: LD_VAR 0 3
37438: PUSH
37439: LD_INT 5
37441: ARRAY
37442: PUSH
37443: LD_INT 1
37445: PLUS
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PPUSH
37451: LD_VAR 0 2
37455: PPUSH
37456: CALL 3175 0 3
37460: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37461: LD_VAR 0 2
37465: PPUSH
37466: LD_INT 0
37468: PPUSH
37469: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37473: LD_VAR 0 2
37477: PPUSH
37478: LD_INT 23
37480: PPUSH
37481: LD_INT 0
37483: PPUSH
37484: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37488: LD_VAR 0 2
37492: PPUSH
37493: LD_INT 85
37495: PPUSH
37496: LD_INT 152
37498: PPUSH
37499: CALL_OW 111
// wait ( 0 0$2 ) ;
37503: LD_INT 70
37505: PPUSH
37506: CALL_OW 67
// end ;
37510: GO 37370
37512: POP
37513: POP
// coords := [ [ 97 , 143 ] ] ;
37514: LD_ADDR_VAR 0 5
37518: PUSH
37519: LD_INT 97
37521: PUSH
37522: LD_INT 143
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37532: LD_INT 1
37534: PPUSH
37535: LD_VAR 0 3
37539: PUSH
37540: LD_INT 5
37542: ARRAY
37543: PPUSH
37544: LD_VAR 0 5
37548: PPUSH
37549: LD_VAR 0 6
37553: PPUSH
37554: CALL 54531 0 4
// end ; Wait ( 10 10$00 ) ;
37558: LD_INT 21000
37560: PPUSH
37561: CALL_OW 67
// tmp := [ ] ;
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: EMPTY
37571: ST_TO_ADDR
// w := 1 ;
37572: LD_ADDR_VAR 0 7
37576: PUSH
37577: LD_INT 1
37579: ST_TO_ADDR
// repeat tmp := [ ] ;
37580: LD_ADDR_VAR 0 3
37584: PUSH
37585: EMPTY
37586: ST_TO_ADDR
// if w mod 4 = 0 then
37587: LD_VAR 0 7
37591: PUSH
37592: LD_INT 4
37594: MOD
37595: PUSH
37596: LD_INT 0
37598: EQUAL
37599: IFFALSE 37686
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37601: LD_ADDR_VAR 0 8
37605: PUSH
37606: LD_INT 11
37608: PUSH
37609: LD_INT 1
37611: PUSH
37612: LD_INT 2
37614: PUSH
37615: LD_INT 24
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 11
37626: PUSH
37627: LD_INT 1
37629: PUSH
37630: LD_INT 2
37632: PUSH
37633: LD_INT 24
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 11
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 2
37650: PUSH
37651: LD_INT 24
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 11
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 24
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: ST_TO_ADDR
37684: GO 37788
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37686: LD_ADDR_VAR 0 8
37690: PUSH
37691: LD_INT 14
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 28
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 14
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 25
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 14
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 28
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 14
37747: PUSH
37748: LD_INT 1
37750: PUSH
37751: LD_INT 2
37753: PUSH
37754: LD_INT 29
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 11
37765: PUSH
37766: LD_INT 1
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 24
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: ST_TO_ADDR
// if w mod 3 = 0 then
37788: LD_VAR 0 7
37792: PUSH
37793: LD_INT 3
37795: MOD
37796: PUSH
37797: LD_INT 0
37799: EQUAL
37800: IFFALSE 37876
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
37802: LD_ADDR_VAR 0 8
37806: PUSH
37807: LD_VAR 0 8
37811: PPUSH
37812: LD_INT 1
37814: PUSH
37815: LD_VAR 0 8
37819: PUSH
37820: LD_VAR 0 1
37824: ARRAY
37825: PUSH
37826: LD_INT 1
37828: PLUS
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PPUSH
37834: LD_INT 14
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 25
37845: PUSH
37846: LD_INT 28
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 1
37855: PPUSH
37856: LD_INT 2
37858: PPUSH
37859: CALL_OW 12
37863: ARRAY
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: PPUSH
37871: CALL 3175 0 3
37875: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
37876: LD_INT 1
37878: PPUSH
37879: LD_VAR 0 8
37883: PPUSH
37884: CALL 54435 0 2
// if GetSide ( ar_dep_w ) = 2 then
37888: LD_INT 45
37890: PPUSH
37891: CALL_OW 255
37895: PUSH
37896: LD_INT 2
37898: EQUAL
37899: IFFALSE 37984
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
37901: LD_ADDR_VAR 0 8
37905: PUSH
37906: LD_INT 14
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: LD_INT 28
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 14
37926: PUSH
37927: LD_INT 1
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 27
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 14
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: LD_INT 27
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
37965: LD_INT 2
37967: PPUSH
37968: LD_VAR 0 8
37972: PPUSH
37973: CALL 54435 0 2
// wait ( 0 0$50 ) ;
37977: LD_INT 1750
37979: PPUSH
37980: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
37984: LD_INT 35
37986: PPUSH
37987: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
37991: LD_EXP 61
37995: PUSH
37996: LD_INT 1
37998: ARRAY
37999: PPUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 34
38005: PUSH
38006: LD_INT 32
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PPUSH
38017: CALL_OW 72
38021: PUSH
38022: LD_INT 4
38024: GREATEREQUAL
38025: IFFALSE 37984
// wait ( 0 0$10 ) ;
38027: LD_INT 350
38029: PPUSH
38030: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_EXP 61
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_INT 3
38050: PUSH
38051: LD_INT 34
38053: PUSH
38054: LD_INT 32
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PPUSH
38065: CALL_OW 72
38069: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38070: LD_INT 100
38072: PPUSH
38073: CALL_OW 13
38077: PUSH
38078: LD_INT 50
38080: LESS
38081: IFFALSE 38114
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38083: LD_ADDR_VAR 0 5
38087: PUSH
38088: LD_INT 55
38090: PUSH
38091: LD_INT 7
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 75
38100: PUSH
38101: LD_INT 90
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: ST_TO_ADDR
38112: GO 38143
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38114: LD_ADDR_VAR 0 5
38118: PUSH
38119: LD_INT 128
38121: PUSH
38122: LD_INT 94
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 180
38131: PUSH
38132: LD_INT 135
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: ST_TO_ADDR
// if w mod 4 = 0 then
38143: LD_VAR 0 7
38147: PUSH
38148: LD_INT 4
38150: MOD
38151: PUSH
38152: LD_INT 0
38154: EQUAL
38155: IFFALSE 38186
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: LD_INT 91
38164: PUSH
38165: LD_INT 58
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 117
38174: PUSH
38175: LD_INT 107
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38186: LD_INT 1
38188: PPUSH
38189: LD_VAR 0 3
38193: PPUSH
38194: LD_VAR 0 5
38198: PPUSH
38199: LD_VAR 0 6
38203: PPUSH
38204: CALL 54531 0 4
// if mc_vehicles [ 2 ] then
38208: LD_EXP 61
38212: PUSH
38213: LD_INT 2
38215: ARRAY
38216: IFFALSE 38252
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38218: LD_INT 2
38220: PPUSH
38221: LD_EXP 61
38225: PUSH
38226: LD_INT 2
38228: ARRAY
38229: PPUSH
38230: LD_INT 73
38232: PUSH
38233: LD_INT 115
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: PPUSH
38243: LD_VAR 0 6
38247: PPUSH
38248: CALL 54531 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38252: LD_INT 19950
38254: PPUSH
38255: LD_INT 26250
38257: PPUSH
38258: CALL_OW 12
38262: PPUSH
38263: CALL_OW 67
// w := w + 1 ;
38267: LD_ADDR_VAR 0 7
38271: PUSH
38272: LD_VAR 0 7
38276: PUSH
38277: LD_INT 1
38279: PLUS
38280: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38281: LD_INT 94
38283: PPUSH
38284: CALL_OW 301
38288: PUSH
38289: LD_EXP 46
38293: PUSH
38294: LD_INT 1
38296: ARRAY
38297: PPUSH
38298: LD_INT 30
38300: PUSH
38301: LD_INT 3
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PPUSH
38308: CALL_OW 72
38312: NOT
38313: OR
38314: IFFALSE 37580
// end ;
38316: PPOPN 8
38318: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38319: LD_INT 69
38321: IFFALSE 38696
38323: GO 38325
38325: DISABLE
38326: LD_INT 0
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
// begin enable ;
38332: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38333: LD_INT 35
38335: PPUSH
38336: LD_INT 1190
38338: PPUSH
38339: CALL_OW 12
38343: PPUSH
38344: CALL_OW 67
// tmp := [ ] ;
38348: LD_ADDR_VAR 0 2
38352: PUSH
38353: EMPTY
38354: ST_TO_ADDR
// uc_side := 8 ;
38355: LD_ADDR_OWVAR 20
38359: PUSH
38360: LD_INT 8
38362: ST_TO_ADDR
// uc_nation := 2 ;
38363: LD_ADDR_OWVAR 21
38367: PUSH
38368: LD_INT 2
38370: ST_TO_ADDR
// InitHc ;
38371: CALL_OW 19
// for i = 1 to 3 do
38375: LD_ADDR_VAR 0 1
38379: PUSH
38380: DOUBLE
38381: LD_INT 1
38383: DEC
38384: ST_TO_ADDR
38385: LD_INT 3
38387: PUSH
38388: FOR_TO
38389: IFFALSE 38516
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38391: LD_INT 13
38393: PUSH
38394: LD_INT 14
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 1
38403: PPUSH
38404: LD_INT 2
38406: PPUSH
38407: CALL_OW 12
38411: ARRAY
38412: PPUSH
38413: LD_INT 3
38415: PPUSH
38416: LD_INT 5
38418: PPUSH
38419: LD_INT 27
38421: PUSH
38422: LD_INT 28
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PPUSH
38432: LD_INT 2
38434: PPUSH
38435: CALL_OW 12
38439: ARRAY
38440: PPUSH
38441: LD_INT 100
38443: PPUSH
38444: CALL 2003 0 5
// un := CreateVehicle ;
38448: LD_ADDR_VAR 0 3
38452: PUSH
38453: CALL_OW 45
38457: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38458: LD_VAR 0 3
38462: PPUSH
38463: LD_INT 4
38465: PPUSH
38466: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38470: LD_VAR 0 3
38474: PPUSH
38475: LD_INT 15
38477: PPUSH
38478: LD_INT 0
38480: PPUSH
38481: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38485: LD_ADDR_VAR 0 2
38489: PUSH
38490: LD_VAR 0 2
38494: PPUSH
38495: LD_VAR 0 2
38499: PUSH
38500: LD_INT 1
38502: PLUS
38503: PPUSH
38504: LD_VAR 0 3
38508: PPUSH
38509: CALL_OW 1
38513: ST_TO_ADDR
// end ;
38514: GO 38388
38516: POP
38517: POP
// for i = 1 to 4 do
38518: LD_ADDR_VAR 0 1
38522: PUSH
38523: DOUBLE
38524: LD_INT 1
38526: DEC
38527: ST_TO_ADDR
38528: LD_INT 4
38530: PUSH
38531: FOR_TO
38532: IFFALSE 38611
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38534: LD_INT 0
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: LD_INT 4
38542: PPUSH
38543: CALL_OW 12
38547: PPUSH
38548: LD_INT 6
38550: PPUSH
38551: CALL_OW 380
// un := CreateHuman ;
38555: LD_ADDR_VAR 0 3
38559: PUSH
38560: CALL_OW 44
38564: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38565: LD_VAR 0 3
38569: PPUSH
38570: LD_INT 15
38572: PPUSH
38573: LD_INT 0
38575: PPUSH
38576: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38580: LD_ADDR_VAR 0 2
38584: PUSH
38585: LD_VAR 0 2
38589: PPUSH
38590: LD_VAR 0 2
38594: PUSH
38595: LD_INT 1
38597: PLUS
38598: PPUSH
38599: LD_VAR 0 3
38603: PPUSH
38604: CALL_OW 1
38608: ST_TO_ADDR
// end ;
38609: GO 38531
38611: POP
38612: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38613: LD_VAR 0 2
38617: PPUSH
38618: LD_INT 210
38620: PPUSH
38621: LD_INT 177
38623: PPUSH
38624: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38628: LD_ADDR_VAR 0 4
38632: PUSH
38633: LD_INT 10
38635: PPUSH
38636: LD_INT 22
38638: PUSH
38639: LD_INT 8
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PPUSH
38646: CALL_OW 70
38650: ST_TO_ADDR
// if x then
38651: LD_VAR 0 4
38655: IFFALSE 38683
// for i in x do
38657: LD_ADDR_VAR 0 1
38661: PUSH
38662: LD_VAR 0 4
38666: PUSH
38667: FOR_IN
38668: IFFALSE 38681
// RemoveUnit ( i ) ;
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 64
38679: GO 38667
38681: POP
38682: POP
// wait ( 0 0$3 ) ;
38683: LD_INT 105
38685: PPUSH
38686: CALL_OW 67
// until tmp ;
38690: LD_VAR 0 2
38694: IFFALSE 38613
// end ; end_of_file
38696: PPOPN 4
38698: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38699: LD_INT 0
38701: PPUSH
38702: PPUSH
38703: PPUSH
38704: PPUSH
38705: PPUSH
38706: PPUSH
// InGameOn ;
38707: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38711: LD_EXP 18
38715: PPUSH
38716: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38720: LD_ADDR_VAR 0 2
38724: PUSH
38725: LD_INT 22
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 25
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PPUSH
38749: CALL_OW 69
38753: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
38754: LD_ADDR_VAR 0 4
38758: PUSH
38759: LD_INT 22
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 34
38771: PUSH
38772: LD_INT 11
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PPUSH
38783: CALL_OW 69
38787: PUSH
38788: LD_INT 1
38790: ARRAY
38791: ST_TO_ADDR
// for i = 1 to tmp do
38792: LD_ADDR_VAR 0 6
38796: PUSH
38797: DOUBLE
38798: LD_INT 1
38800: DEC
38801: ST_TO_ADDR
38802: LD_VAR 0 2
38806: PUSH
38807: FOR_TO
38808: IFFALSE 38855
// begin if i = 5 then
38810: LD_VAR 0 6
38814: PUSH
38815: LD_INT 5
38817: EQUAL
38818: IFFALSE 38822
// break ;
38820: GO 38855
// sols := Replace ( sols , i , tmp [ i ] ) ;
38822: LD_ADDR_VAR 0 5
38826: PUSH
38827: LD_VAR 0 5
38831: PPUSH
38832: LD_VAR 0 6
38836: PPUSH
38837: LD_VAR 0 2
38841: PUSH
38842: LD_VAR 0 6
38846: ARRAY
38847: PPUSH
38848: CALL_OW 1
38852: ST_TO_ADDR
// end ;
38853: GO 38807
38855: POP
38856: POP
// tmp := ar_force_tmp ;
38857: LD_ADDR_VAR 0 2
38861: PUSH
38862: LD_EXP 37
38866: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
38867: LD_VAR 0 2
38871: PUSH
38872: LD_INT 1
38874: ARRAY
38875: PPUSH
38876: LD_INT 108
38878: PPUSH
38879: LD_INT 139
38881: PPUSH
38882: LD_INT 0
38884: PPUSH
38885: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
38889: LD_VAR 0 2
38893: PUSH
38894: LD_INT 1
38896: ARRAY
38897: PPUSH
38898: LD_EXP 18
38902: PPUSH
38903: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
38907: LD_VAR 0 2
38911: PUSH
38912: LD_INT 2
38914: ARRAY
38915: PPUSH
38916: LD_INT 114
38918: PPUSH
38919: LD_INT 132
38921: PPUSH
38922: LD_INT 0
38924: PPUSH
38925: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 3
38936: ARRAY
38937: PPUSH
38938: LD_INT 115
38940: PPUSH
38941: LD_INT 132
38943: PPUSH
38944: LD_INT 0
38946: PPUSH
38947: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
38951: LD_VAR 0 2
38955: PUSH
38956: LD_INT 2
38958: ARRAY
38959: PUSH
38960: LD_VAR 0 2
38964: PUSH
38965: LD_INT 3
38967: ARRAY
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PPUSH
38973: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
38977: LD_VAR 0 4
38981: PPUSH
38982: LD_INT 83
38984: PPUSH
38985: LD_INT 123
38987: PPUSH
38988: CALL_OW 111
// Wait ( 0 0$01 ) ;
38992: LD_INT 35
38994: PPUSH
38995: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
38999: LD_INT 90
39001: PPUSH
39002: LD_INT 144
39004: PPUSH
39005: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39009: LD_VAR 0 5
39013: PPUSH
39014: LD_INT 88
39016: PPUSH
39017: LD_INT 129
39019: PPUSH
39020: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39024: LD_ADDR_VAR 0 3
39028: PUSH
39029: LD_INT 92
39031: PUSH
39032: LD_INT 131
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 88
39041: PUSH
39042: LD_INT 127
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 91
39051: PUSH
39052: LD_INT 132
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 92
39061: PUSH
39062: LD_INT 134
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// for i = 1 to sols do
39075: LD_ADDR_VAR 0 6
39079: PUSH
39080: DOUBLE
39081: LD_INT 1
39083: DEC
39084: ST_TO_ADDR
39085: LD_VAR 0 5
39089: PUSH
39090: FOR_TO
39091: IFFALSE 39164
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39093: LD_VAR 0 5
39097: PUSH
39098: LD_VAR 0 6
39102: ARRAY
39103: PPUSH
39104: LD_VAR 0 3
39108: PUSH
39109: LD_VAR 0 6
39113: ARRAY
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: PPUSH
39119: LD_VAR 0 3
39123: PUSH
39124: LD_VAR 0 6
39128: ARRAY
39129: PUSH
39130: LD_INT 2
39132: ARRAY
39133: PPUSH
39134: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39138: LD_VAR 0 5
39142: PUSH
39143: LD_VAR 0 6
39147: ARRAY
39148: PPUSH
39149: CALL_OW 197
// AddComHold ( sols ) ;
39153: LD_VAR 0 5
39157: PPUSH
39158: CALL_OW 200
// end ;
39162: GO 39090
39164: POP
39165: POP
// repeat wait ( 0 0$1 ) ;
39166: LD_INT 35
39168: PPUSH
39169: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39173: LD_VAR 0 5
39177: PUSH
39178: LD_INT 1
39180: ARRAY
39181: PPUSH
39182: LD_INT 92
39184: PPUSH
39185: LD_INT 131
39187: PPUSH
39188: CALL_OW 297
39192: PUSH
39193: LD_INT 4
39195: LESS
39196: IFFALSE 39166
// CenterOnXY ( 96 , 139 ) ;
39198: LD_INT 96
39200: PPUSH
39201: LD_INT 139
39203: PPUSH
39204: CALL_OW 84
// wait ( 0 0$3 ) ;
39208: LD_INT 105
39210: PPUSH
39211: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39215: LD_INT 111
39217: PPUSH
39218: LD_INT 135
39220: PPUSH
39221: LD_INT 1
39223: PPUSH
39224: LD_INT 25
39226: NEG
39227: PPUSH
39228: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39232: LD_VAR 0 2
39236: PUSH
39237: LD_INT 2
39239: ARRAY
39240: PPUSH
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PPUSH
39250: CALL_OW 250
39254: PUSH
39255: LD_INT 3
39257: PLUS
39258: PPUSH
39259: LD_VAR 0 2
39263: PUSH
39264: LD_INT 1
39266: ARRAY
39267: PPUSH
39268: CALL_OW 251
39272: PPUSH
39273: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39277: LD_VAR 0 2
39281: PUSH
39282: LD_INT 3
39284: ARRAY
39285: PPUSH
39286: LD_INT 7
39288: PPUSH
39289: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39293: LD_VAR 0 2
39297: PUSH
39298: LD_INT 2
39300: ARRAY
39301: PPUSH
39302: LD_VAR 0 2
39306: PUSH
39307: LD_INT 1
39309: ARRAY
39310: PPUSH
39311: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39315: LD_INT 35
39317: PPUSH
39318: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39322: LD_VAR 0 2
39326: PUSH
39327: LD_INT 1
39329: ARRAY
39330: PPUSH
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 2
39338: ARRAY
39339: PPUSH
39340: CALL_OW 296
39344: PUSH
39345: LD_INT 5
39347: LESS
39348: IFFALSE 39315
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: PPUSH
39359: LD_VAR 0 2
39363: PUSH
39364: LD_INT 2
39366: ARRAY
39367: PPUSH
39368: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39372: LD_VAR 0 2
39376: PUSH
39377: LD_INT 1
39379: ARRAY
39380: PPUSH
39381: LD_STRING D1a-Merc1-1
39383: PPUSH
39384: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39388: LD_VAR 0 2
39392: PUSH
39393: LD_INT 2
39395: ARRAY
39396: PPUSH
39397: LD_STRING D1a-FMerc2-1
39399: PPUSH
39400: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39404: LD_VAR 0 2
39408: PUSH
39409: LD_INT 2
39411: ARRAY
39412: PPUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_INT 1
39420: ARRAY
39421: PPUSH
39422: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39426: LD_VAR 0 2
39430: PUSH
39431: LD_INT 1
39433: ARRAY
39434: PPUSH
39435: LD_INT 500
39437: PPUSH
39438: CALL_OW 234
// wait ( 0 0$2 ) ;
39442: LD_INT 70
39444: PPUSH
39445: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39449: LD_VAR 0 2
39453: PUSH
39454: LD_INT 1
39456: ARRAY
39457: PPUSH
39458: LD_INT 2
39460: PPUSH
39461: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39465: LD_INT 10
39467: PPUSH
39468: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39472: LD_VAR 0 2
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: LD_STRING D1a-Merc1-2
39483: PPUSH
39484: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39488: LD_INT 7
39490: PPUSH
39491: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39495: LD_VAR 0 2
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39508: LD_VAR 0 2
39512: PUSH
39513: LD_INT 2
39515: ARRAY
39516: PPUSH
39517: LD_INT 10
39519: PPUSH
39520: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39524: LD_VAR 0 2
39528: PUSH
39529: LD_INT 2
39531: ARRAY
39532: PPUSH
39533: LD_STRING D1a-FMerc2-2
39535: PPUSH
39536: CALL_OW 88
// wait ( 0 0$1 ) ;
39540: LD_INT 35
39542: PPUSH
39543: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39547: LD_INT 7
39549: PPUSH
39550: CALL_OW 85
// wait ( 0 0$2 ) ;
39554: LD_INT 70
39556: PPUSH
39557: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39561: LD_EXP 41
39565: PPUSH
39566: LD_STRING D1a-Saliba-1
39568: PPUSH
39569: CALL_OW 91
// KillUnit ( Saliba ) ;
39573: LD_EXP 41
39577: PPUSH
39578: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39582: LD_VAR 0 2
39586: PUSH
39587: LD_INT 3
39589: ARRAY
39590: PPUSH
39591: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39595: LD_EXP 18
39599: PPUSH
39600: CALL_OW 85
// wait ( 0 0$1 ) ;
39604: LD_INT 35
39606: PPUSH
39607: CALL_OW 67
// InGameOff ;
39611: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39615: LD_STRING M1
39617: PPUSH
39618: CALL_OW 337
// game_speed := 4 ;
39622: LD_ADDR_OWVAR 65
39626: PUSH
39627: LD_INT 4
39629: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39630: LD_INT 111
39632: PPUSH
39633: LD_INT 135
39635: PPUSH
39636: LD_INT 1
39638: PPUSH
39639: CALL_OW 331
// SaveForQuickRestart ;
39643: CALL_OW 22
// ar_run := true ;
39647: LD_ADDR_EXP 5
39651: PUSH
39652: LD_INT 1
39654: ST_TO_ADDR
// end ;
39655: LD_VAR 0 1
39659: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39660: LD_EXP 5
39664: IFFALSE 40006
39666: GO 39668
39668: DISABLE
39669: LD_INT 0
39671: PPUSH
39672: PPUSH
39673: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
39674: LD_ADDR_VAR 0 2
39678: PUSH
39679: LD_EXP 37
39683: PUSH
39684: LD_EXP 34
39688: PPUSH
39689: LD_INT 21
39691: PUSH
39692: LD_INT 1
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PPUSH
39699: CALL_OW 72
39703: ADD
39704: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
39705: LD_VAR 0 2
39709: PPUSH
39710: LD_INT 5
39712: PPUSH
39713: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
39717: LD_INT 5
39719: PPUSH
39720: LD_INT 1
39722: PPUSH
39723: CALL_OW 343
// k := 1 ;
39727: LD_ADDR_VAR 0 3
39731: PUSH
39732: LD_INT 1
39734: ST_TO_ADDR
// for i in tmp do
39735: LD_ADDR_VAR 0 1
39739: PUSH
39740: LD_VAR 0 2
39744: PUSH
39745: FOR_IN
39746: IFFALSE 39831
// begin if IsInUnit ( i ) then
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 310
39757: IFFALSE 39768
// ComExitBuilding ( i ) ;
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 122
// if GetClass ( i ) = 3 then
39768: LD_VAR 0 1
39772: PPUSH
39773: CALL_OW 257
39777: PUSH
39778: LD_INT 3
39780: EQUAL
39781: IFFALSE 39817
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
39783: LD_VAR 0 1
39787: PPUSH
39788: LD_EXP 38
39792: PUSH
39793: LD_VAR 0 3
39797: ARRAY
39798: PPUSH
39799: CALL_OW 180
// k := k + 1 ;
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_VAR 0 3
39812: PUSH
39813: LD_INT 1
39815: PLUS
39816: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
39817: LD_VAR 0 1
39821: PPUSH
39822: LD_INT 10
39824: PPUSH
39825: CALL_OW 173
// end ;
39829: GO 39745
39831: POP
39832: POP
// ar_patrol := true ;
39833: LD_ADDR_EXP 7
39837: PUSH
39838: LD_INT 1
39840: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
39841: LD_INT 10
39843: PPUSH
39844: CALL_OW 67
// for i in tmp do
39848: LD_ADDR_VAR 0 1
39852: PUSH
39853: LD_VAR 0 2
39857: PUSH
39858: FOR_IN
39859: IFFALSE 39887
// if not HasTask ( i ) then
39861: LD_VAR 0 1
39865: PPUSH
39866: CALL_OW 314
39870: NOT
39871: IFFALSE 39885
// ComMoveToArea ( i , escape_area ) ;
39873: LD_VAR 0 1
39877: PPUSH
39878: LD_INT 10
39880: PPUSH
39881: CALL_OW 113
39885: GO 39858
39887: POP
39888: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_VAR 0 2
39898: PPUSH
39899: LD_INT 95
39901: PUSH
39902: LD_INT 10
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PPUSH
39909: CALL_OW 72
39913: ST_TO_ADDR
// if k then
39914: LD_VAR 0 3
39918: IFFALSE 39987
// for i in k do
39920: LD_ADDR_VAR 0 1
39924: PUSH
39925: LD_VAR 0 3
39929: PUSH
39930: FOR_IN
39931: IFFALSE 39985
// begin if IsInUnit ( i ) then
39933: LD_VAR 0 1
39937: PPUSH
39938: CALL_OW 310
39942: IFFALSE 39958
// RemoveUnit ( IsInUnit ( i ) ) ;
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 310
39953: PPUSH
39954: CALL_OW 64
// RemoveUnit ( i ) ;
39958: LD_VAR 0 1
39962: PPUSH
39963: CALL_OW 64
// tmp := tmp diff i ;
39967: LD_ADDR_VAR 0 2
39971: PUSH
39972: LD_VAR 0 2
39976: PUSH
39977: LD_VAR 0 1
39981: DIFF
39982: ST_TO_ADDR
// end ;
39983: GO 39930
39985: POP
39986: POP
// until tmp = [ ] ;
39987: LD_VAR 0 2
39991: PUSH
39992: EMPTY
39993: EQUAL
39994: IFFALSE 39841
// ChangeSideFog ( 5 , 5 ) ;
39996: LD_INT 5
39998: PPUSH
39999: LD_INT 5
40001: PPUSH
40002: CALL_OW 343
// end ;
40006: PPOPN 3
40008: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40009: LD_EXP 7
40013: IFFALSE 40303
40015: GO 40017
40017: DISABLE
40018: LD_INT 0
40020: PPUSH
40021: PPUSH
40022: PPUSH
// begin uc_side := 2 ;
40023: LD_ADDR_OWVAR 20
40027: PUSH
40028: LD_INT 2
40030: ST_TO_ADDR
// uc_nation := 2 ;
40031: LD_ADDR_OWVAR 21
40035: PUSH
40036: LD_INT 2
40038: ST_TO_ADDR
// InitHc ;
40039: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40043: LD_INT 1
40045: PPUSH
40046: LD_INT 1
40048: PPUSH
40049: LD_INT 6
40051: PPUSH
40052: CALL_OW 380
// un := CreateHuman ;
40056: LD_ADDR_VAR 0 2
40060: PUSH
40061: CALL_OW 44
40065: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40066: LD_INT 14
40068: PPUSH
40069: LD_INT 1
40071: PPUSH
40072: LD_INT 1
40074: PPUSH
40075: LD_INT 27
40077: PPUSH
40078: LD_INT 98
40080: PPUSH
40081: CALL 2003 0 5
// veh := CreateVehicle ;
40085: LD_ADDR_VAR 0 3
40089: PUSH
40090: CALL_OW 45
40094: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40095: LD_VAR 0 3
40099: PPUSH
40100: LD_INT 4
40102: PPUSH
40103: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40107: LD_VAR 0 3
40111: PPUSH
40112: LD_INT 179
40114: PPUSH
40115: LD_INT 135
40117: PPUSH
40118: LD_INT 0
40120: PPUSH
40121: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40125: LD_VAR 0 2
40129: PPUSH
40130: LD_VAR 0 3
40134: PPUSH
40135: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40139: LD_VAR 0 2
40143: PPUSH
40144: LD_INT 126
40146: PPUSH
40147: LD_INT 133
40149: PPUSH
40150: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40154: LD_INT 10
40156: PPUSH
40157: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40161: LD_INT 1
40163: PPUSH
40164: LD_VAR 0 3
40168: PPUSH
40169: CALL_OW 292
40173: PUSH
40174: LD_VAR 0 3
40178: PPUSH
40179: LD_INT 7
40181: PPUSH
40182: CALL_OW 296
40186: PUSH
40187: LD_INT 9
40189: LESS
40190: OR
40191: IFFALSE 40154
// ComHold ( veh ) ;
40193: LD_VAR 0 3
40197: PPUSH
40198: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40202: LD_VAR 0 2
40206: PPUSH
40207: LD_STRING D2aa-Ar1-1
40209: PPUSH
40210: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40214: LD_VAR 0 2
40218: PPUSH
40219: LD_INT 177
40221: PPUSH
40222: LD_INT 96
40224: PPUSH
40225: CALL_OW 111
// AddComExitVehicle ( un ) ;
40229: LD_VAR 0 2
40233: PPUSH
40234: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40238: LD_INT 35
40240: PPUSH
40241: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40245: LD_VAR 0 2
40249: PPUSH
40250: LD_INT 69
40252: PPUSH
40253: CALL_OW 296
40257: PUSH
40258: LD_INT 15
40260: LESS
40261: IFFALSE 40238
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40263: LD_ADDR_EXP 46
40267: PUSH
40268: LD_EXP 46
40272: PPUSH
40273: LD_INT 3
40275: PUSH
40276: LD_EXP 46
40280: PUSH
40281: LD_INT 3
40283: ARRAY
40284: PUSH
40285: LD_INT 1
40287: PLUS
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PPUSH
40293: LD_VAR 0 2
40297: PPUSH
40298: CALL 3175 0 3
40302: ST_TO_ADDR
// end ;
40303: PPOPN 3
40305: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40306: LD_INT 7
40308: PPUSH
40309: CALL_OW 255
40313: PUSH
40314: LD_INT 1
40316: EQUAL
40317: PUSH
40318: LD_INT 7
40320: PPUSH
40321: CALL_OW 301
40325: OR
40326: IFFALSE 42693
40328: GO 40330
40330: DISABLE
40331: LD_INT 0
40333: PPUSH
40334: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40335: LD_ADDR_VAR 0 2
40339: PUSH
40340: LD_INT 46
40342: PUSH
40343: LD_INT 41
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 50
40352: PUSH
40353: LD_INT 25
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 57
40362: PUSH
40363: LD_INT 75
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 75
40372: PUSH
40373: LD_INT 89
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 51
40382: PUSH
40383: LD_INT 45
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 95
40392: PUSH
40393: LD_INT 95
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 84
40402: PUSH
40403: LD_INT 77
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 101
40412: PUSH
40413: LD_INT 76
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 118
40422: PUSH
40423: LD_INT 81
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 139
40432: PUSH
40433: LD_INT 97
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 129
40442: PUSH
40443: LD_INT 114
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 154
40452: PUSH
40453: LD_INT 111
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// base_captured := true ;
40474: LD_ADDR_EXP 6
40478: PUSH
40479: LD_INT 1
40481: ST_TO_ADDR
// DialogueOn ;
40482: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40486: LD_EXP 18
40490: PPUSH
40491: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40495: LD_EXP 18
40499: PPUSH
40500: LD_STRING D2-JMM-1
40502: PPUSH
40503: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40507: LD_EXP 27
40511: PPUSH
40512: LD_STRING D2-Pow-1
40514: PPUSH
40515: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40519: LD_EXP 18
40523: PPUSH
40524: LD_STRING D2-JMM-2
40526: PPUSH
40527: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40531: LD_EXP 27
40535: PPUSH
40536: LD_STRING D2-Pow-2
40538: PPUSH
40539: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40543: LD_EXP 18
40547: PPUSH
40548: LD_STRING D2-JMM-3
40550: PPUSH
40551: CALL_OW 88
// DialogueOff ;
40555: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40559: LD_STRING M2
40561: PPUSH
40562: CALL_OW 337
// Wait ( 0 0$2 ) ;
40566: LD_INT 70
40568: PPUSH
40569: CALL_OW 67
// if IsOk ( Gary ) then
40573: LD_EXP 29
40577: PPUSH
40578: CALL_OW 302
40582: IFFALSE 40596
// Say ( Gary , D2a-Gary-1 ) ;
40584: LD_EXP 29
40588: PPUSH
40589: LD_STRING D2a-Gary-1
40591: PPUSH
40592: CALL_OW 88
// if IsOk ( Bobby ) then
40596: LD_EXP 21
40600: PPUSH
40601: CALL_OW 302
40605: IFFALSE 40619
// Say ( Bobby , D2a-Bobby-1 ) ;
40607: LD_EXP 21
40611: PPUSH
40612: LD_STRING D2a-Bobby-1
40614: PPUSH
40615: CALL_OW 88
// if IsOk ( Cyrus ) then
40619: LD_EXP 22
40623: PPUSH
40624: CALL_OW 302
40628: IFFALSE 40642
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40630: LD_EXP 22
40634: PPUSH
40635: LD_STRING D2a-Cyrus-1
40637: PPUSH
40638: CALL_OW 88
// if IsOk ( Lisa ) then
40642: LD_EXP 19
40646: PPUSH
40647: CALL_OW 302
40651: IFFALSE 40665
// Say ( Lisa , D2a-Lisa-1 ) ;
40653: LD_EXP 19
40657: PPUSH
40658: LD_STRING D2a-Lisa-1
40660: PPUSH
40661: CALL_OW 88
// if IsOk ( Frank ) then
40665: LD_EXP 30
40669: PPUSH
40670: CALL_OW 302
40674: IFFALSE 40688
// Say ( Frank , D2a-Frank-1 ) ;
40676: LD_EXP 30
40680: PPUSH
40681: LD_STRING D2a-Frank-1
40683: PPUSH
40684: CALL_OW 88
// if IsOk ( Cornel ) then
40688: LD_EXP 28
40692: PPUSH
40693: CALL_OW 302
40697: IFFALSE 40711
// Say ( Cornel , D2a-Corn-1 ) ;
40699: LD_EXP 28
40703: PPUSH
40704: LD_STRING D2a-Corn-1
40706: PPUSH
40707: CALL_OW 88
// if IsOk ( Donaldson ) then
40711: LD_EXP 20
40715: PPUSH
40716: CALL_OW 302
40720: IFFALSE 40734
// Say ( Donaldson , D2a-Don-1 ) ;
40722: LD_EXP 20
40726: PPUSH
40727: LD_STRING D2a-Don-1
40729: PPUSH
40730: CALL_OW 88
// if IsOk ( Brown ) then
40734: LD_EXP 24
40738: PPUSH
40739: CALL_OW 302
40743: IFFALSE 40757
// Say ( Brown , D2a-Brown-1 ) ;
40745: LD_EXP 24
40749: PPUSH
40750: LD_STRING D2a-Brown-1
40752: PPUSH
40753: CALL_OW 88
// Wait ( 0 0$30 ) ;
40757: LD_INT 1050
40759: PPUSH
40760: CALL_OW 67
// if IsOk ( Frank ) then
40764: LD_EXP 30
40768: PPUSH
40769: CALL_OW 302
40773: IFFALSE 41039
// begin DialogueOn ;
40775: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
40779: LD_EXP 18
40783: PUSH
40784: LD_EXP 30
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PPUSH
40793: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
40797: LD_EXP 30
40801: PPUSH
40802: LD_STRING D3F-Frank-1
40804: PPUSH
40805: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
40809: LD_EXP 18
40813: PPUSH
40814: LD_STRING D3F-JMM-1
40816: PPUSH
40817: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
40821: LD_EXP 30
40825: PPUSH
40826: LD_STRING D3F-Frank-2
40828: PPUSH
40829: CALL_OW 88
// case Query ( QFrank ) of 1 :
40833: LD_STRING QFrank
40835: PPUSH
40836: CALL_OW 97
40840: PUSH
40841: LD_INT 1
40843: DOUBLE
40844: EQUAL
40845: IFTRUE 40849
40847: GO 40872
40849: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
40850: LD_EXP 18
40854: PPUSH
40855: LD_STRING D3Fa-JMM-1
40857: PPUSH
40858: CALL_OW 88
// us_scout := 1 ;
40862: LD_ADDR_EXP 8
40866: PUSH
40867: LD_INT 1
40869: ST_TO_ADDR
// end ; 2 :
40870: GO 41035
40872: LD_INT 2
40874: DOUBLE
40875: EQUAL
40876: IFTRUE 40880
40878: GO 41002
40880: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
40881: LD_EXP 18
40885: PPUSH
40886: LD_STRING D3Fb-JMM-1
40888: PPUSH
40889: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
40893: LD_EXP 30
40897: PPUSH
40898: LD_STRING D3Fb-Frank-1
40900: PPUSH
40901: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
40905: LD_STRING QFrank2
40907: PPUSH
40908: CALL_OW 97
40912: PUSH
40913: LD_INT 1
40915: DOUBLE
40916: EQUAL
40917: IFTRUE 40921
40919: GO 40968
40921: POP
// begin us_scout := 2 ;
40922: LD_ADDR_EXP 8
40926: PUSH
40927: LD_INT 2
40929: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
40930: LD_EXP 18
40934: PPUSH
40935: LD_STRING D3Fba-JMM-1
40937: PPUSH
40938: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
40942: LD_EXP 30
40946: PPUSH
40947: LD_STRING D3Fba-Frank-1
40949: PPUSH
40950: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
40954: LD_EXP 18
40958: PPUSH
40959: LD_STRING D3Fba-JMM-2
40961: PPUSH
40962: CALL_OW 88
// end ; 2 :
40966: GO 41000
40968: LD_INT 2
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40976
40974: GO 40999
40976: POP
// begin us_scout := 0 ;
40977: LD_ADDR_EXP 8
40981: PUSH
40982: LD_INT 0
40984: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
40985: LD_EXP 18
40989: PPUSH
40990: LD_STRING D3Fbb-JMM-1
40992: PPUSH
40993: CALL_OW 88
// end ; end ;
40997: GO 41000
40999: POP
// end ; 3 :
41000: GO 41035
41002: LD_INT 3
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41034
41010: POP
// begin us_scout := - 1 ;
41011: LD_ADDR_EXP 8
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41020: LD_EXP 18
41024: PPUSH
41025: LD_STRING D3Fc-JMM-1
41027: PPUSH
41028: CALL_OW 88
// end ; end ;
41032: GO 41035
41034: POP
// DialogueOff ;
41035: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41039: LD_EXP 8
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: IN
41055: IFFALSE 41059
// exit ;
41057: GO 42693
// if us_scout in [ 1 , 2 ] then
41059: LD_EXP 8
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: IN
41074: IFFALSE 41775
// begin if IsInUnit ( Frank ) then
41076: LD_EXP 30
41080: PPUSH
41081: CALL_OW 310
41085: IFFALSE 41096
// ComExitBuilding ( Frank ) ;
41087: LD_EXP 30
41091: PPUSH
41092: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41096: LD_EXP 30
41100: PPUSH
41101: CALL_OW 311
41105: IFFALSE 41116
// ComExitVehicle ( Frank ) ;
41107: LD_EXP 30
41111: PPUSH
41112: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41116: LD_EXP 30
41120: PPUSH
41121: LD_INT 4
41123: PPUSH
41124: CALL_OW 235
// wait ( 0 0$1 ) ;
41128: LD_INT 35
41130: PPUSH
41131: CALL_OW 67
// if us_scout = 2 then
41135: LD_EXP 8
41139: PUSH
41140: LD_INT 2
41142: EQUAL
41143: IFFALSE 41511
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41145: LD_EXP 30
41149: PPUSH
41150: LD_INT 75
41152: PPUSH
41153: LD_INT 63
41155: PPUSH
41156: CALL_OW 111
// AddComHold ( Frank ) ;
41160: LD_EXP 30
41164: PPUSH
41165: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41169: LD_EXP 30
41173: PPUSH
41174: LD_INT 770
41176: PPUSH
41177: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41181: LD_EXP 30
41185: PPUSH
41186: LD_INT 100
41188: PPUSH
41189: LD_INT 75
41191: PPUSH
41192: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41196: LD_EXP 30
41200: PPUSH
41201: LD_INT 123
41203: PPUSH
41204: LD_INT 103
41206: PPUSH
41207: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41211: LD_EXP 30
41215: PPUSH
41216: LD_INT 138
41218: PPUSH
41219: LD_INT 108
41221: PPUSH
41222: CALL_OW 171
// AddComHold ( Frank ) ;
41226: LD_EXP 30
41230: PPUSH
41231: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41235: LD_INT 35
41237: PPUSH
41238: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41242: LD_EXP 30
41246: PPUSH
41247: LD_INT 138
41249: PPUSH
41250: LD_INT 108
41252: PPUSH
41253: CALL_OW 307
41257: IFFALSE 41235
// AddComMoveXY ( Frank , 125 , 132 ) ;
41259: LD_EXP 30
41263: PPUSH
41264: LD_INT 125
41266: PPUSH
41267: LD_INT 132
41269: PPUSH
41270: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41274: LD_INT 35
41276: PPUSH
41277: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41281: LD_INT 1
41283: PPUSH
41284: LD_EXP 30
41288: PPUSH
41289: CALL_OW 292
41293: PUSH
41294: LD_EXP 30
41298: PPUSH
41299: LD_INT 7
41301: PPUSH
41302: CALL_OW 296
41306: PUSH
41307: LD_INT 7
41309: LESS
41310: OR
41311: IFFALSE 41274
// DialogueOn ;
41313: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41317: LD_EXP 30
41321: PPUSH
41322: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41326: LD_INT 10
41328: PPUSH
41329: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41333: LD_EXP 18
41337: PPUSH
41338: LD_STRING D4Fa-JMM-1
41340: PPUSH
41341: CALL_OW 88
// for i in points do
41345: LD_ADDR_VAR 0 1
41349: PUSH
41350: LD_VAR 0 2
41354: PUSH
41355: FOR_IN
41356: IFFALSE 41414
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41358: LD_VAR 0 1
41362: PUSH
41363: LD_INT 1
41365: ARRAY
41366: PPUSH
41367: LD_VAR 0 1
41371: PUSH
41372: LD_INT 2
41374: ARRAY
41375: PPUSH
41376: LD_INT 1
41378: PPUSH
41379: LD_INT 20
41381: NEG
41382: PPUSH
41383: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41387: LD_VAR 0 1
41391: PUSH
41392: LD_INT 1
41394: ARRAY
41395: PPUSH
41396: LD_VAR 0 1
41400: PUSH
41401: LD_INT 2
41403: ARRAY
41404: PPUSH
41405: LD_INT 1
41407: PPUSH
41408: CALL_OW 331
// end ;
41412: GO 41355
41414: POP
41415: POP
// dwait ( 0 0$0.5 ) ;
41416: LD_INT 18
41418: PPUSH
41419: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41423: LD_INT 42
41425: PPUSH
41426: LD_INT 27
41428: PPUSH
41429: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41433: LD_EXP 30
41437: PPUSH
41438: LD_STRING D4Fa-Frank-1
41440: PPUSH
41441: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41445: LD_INT 18
41447: PPUSH
41448: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41452: LD_EXP 18
41456: PPUSH
41457: LD_STRING D4Fa-JMM-2
41459: PPUSH
41460: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41464: LD_INT 118
41466: PPUSH
41467: LD_INT 80
41469: PPUSH
41470: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41474: LD_EXP 30
41478: PPUSH
41479: LD_STRING D4Fa-Frank-2
41481: PPUSH
41482: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41486: LD_INT 10
41488: PPUSH
41489: CALL_OW 68
// DialogueOff ;
41493: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41497: LD_EXP 30
41501: PPUSH
41502: LD_INT 1
41504: PPUSH
41505: CALL_OW 235
// end else
41509: GO 41773
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41511: LD_INT 2
41513: PPUSH
41514: LD_INT 4
41516: PPUSH
41517: LD_INT 2
41519: PPUSH
41520: LD_INT 1
41522: PPUSH
41523: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41527: LD_EXP 30
41531: PPUSH
41532: LD_INT 75
41534: PPUSH
41535: LD_INT 63
41537: PPUSH
41538: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41542: LD_EXP 30
41546: PPUSH
41547: LD_INT 175
41549: PPUSH
41550: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41554: LD_EXP 30
41558: PPUSH
41559: LD_INT 102
41561: PPUSH
41562: LD_INT 76
41564: PPUSH
41565: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41569: LD_EXP 30
41573: PPUSH
41574: LD_INT 108
41576: PPUSH
41577: LD_INT 70
41579: PPUSH
41580: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41584: LD_INT 35
41586: PPUSH
41587: CALL_OW 67
// until See ( 2 , Frank ) ;
41591: LD_INT 2
41593: PPUSH
41594: LD_EXP 30
41598: PPUSH
41599: CALL_OW 292
41603: IFFALSE 41584
// ComMoveXY ( Frank , 112 , 118 ) ;
41605: LD_EXP 30
41609: PPUSH
41610: LD_INT 112
41612: PPUSH
41613: LD_INT 118
41615: PPUSH
41616: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41620: LD_EXP 30
41624: PPUSH
41625: CALL_OW 256
41629: PUSH
41630: LD_INT 750
41632: GREATEREQUAL
41633: IFFALSE 41647
// SetLives ( Frank , 700 ) ;
41635: LD_EXP 30
41639: PPUSH
41640: LD_INT 700
41642: PPUSH
41643: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41647: LD_INT 35
41649: PPUSH
41650: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
41654: LD_INT 1
41656: PPUSH
41657: LD_EXP 30
41661: PPUSH
41662: CALL_OW 292
41666: PUSH
41667: LD_EXP 30
41671: PPUSH
41672: LD_INT 7
41674: PPUSH
41675: CALL_OW 296
41679: PUSH
41680: LD_INT 17
41682: LESS
41683: OR
41684: IFFALSE 41647
// DialogueOn ;
41686: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41690: LD_EXP 30
41694: PPUSH
41695: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
41699: LD_EXP 30
41703: PPUSH
41704: LD_STRING D4Fb-Frank-1
41706: PPUSH
41707: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
41711: LD_EXP 18
41715: PPUSH
41716: LD_STRING D4Fb-JMM-1
41718: PPUSH
41719: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
41723: LD_INT 2
41725: PPUSH
41726: LD_STRING D4Fb-FSci1-1
41728: PPUSH
41729: CALL 2232 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
41733: LD_EXP 30
41737: PPUSH
41738: LD_STRING D4Fb-Frank-2
41740: PPUSH
41741: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
41745: LD_EXP 18
41749: PPUSH
41750: LD_STRING D4Fb-JMM-2
41752: PPUSH
41753: CALL_OW 88
// DialogueOff ;
41757: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41761: LD_EXP 30
41765: PPUSH
41766: LD_INT 1
41768: PPUSH
41769: CALL_OW 235
// end ; end else
41773: GO 41932
// if IsOk ( Kikuchi ) then
41775: LD_EXP 31
41779: PPUSH
41780: CALL_OW 302
41784: IFFALSE 41932
// begin DialogueOn ;
41786: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
41790: LD_EXP 18
41794: PUSH
41795: LD_EXP 31
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PPUSH
41804: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
41808: LD_EXP 31
41812: PPUSH
41813: LD_STRING D3Y-Yam-1
41815: PPUSH
41816: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
41820: LD_EXP 18
41824: PPUSH
41825: LD_STRING D3Y-JMM-1
41827: PPUSH
41828: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
41832: LD_EXP 31
41836: PPUSH
41837: LD_STRING D3Y-Yam-2
41839: PPUSH
41840: CALL_OW 88
// case Query ( QYamoko ) of 1 :
41844: LD_STRING QYamoko
41846: PPUSH
41847: CALL_OW 97
41851: PUSH
41852: LD_INT 1
41854: DOUBLE
41855: EQUAL
41856: IFTRUE 41860
41858: GO 41895
41860: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
41861: LD_EXP 18
41865: PPUSH
41866: LD_STRING D3Ya-JMM-1
41868: PPUSH
41869: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
41873: LD_EXP 31
41877: PPUSH
41878: LD_STRING D3Ya-Yam-1
41880: PPUSH
41881: CALL_OW 88
// us_scout := 1 ;
41885: LD_ADDR_EXP 8
41889: PUSH
41890: LD_INT 1
41892: ST_TO_ADDR
// end ; 2 :
41893: GO 41928
41895: LD_INT 2
41897: DOUBLE
41898: EQUAL
41899: IFTRUE 41903
41901: GO 41927
41903: POP
// begin us_scout := - 1 ;
41904: LD_ADDR_EXP 8
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
41913: LD_EXP 18
41917: PPUSH
41918: LD_STRING D3Yb-JMM-1
41920: PPUSH
41921: CALL_OW 88
// end ; end ;
41925: GO 41928
41927: POP
// DialogueOff ;
41928: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41932: LD_EXP 8
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: IN
41948: IFFALSE 41952
// exit ;
41950: GO 42693
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
41952: LD_ADDR_EXP 8
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 2
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: PUSH
41971: LD_OWVAR 67
41975: ARRAY
41976: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
41977: LD_EXP 8
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: IN
41992: IFFALSE 42693
// begin if IsInUnit ( Kikuchi ) then
41994: LD_EXP 31
41998: PPUSH
41999: CALL_OW 310
42003: IFFALSE 42014
// ComExitBuilding ( Kikuchi ) ;
42005: LD_EXP 31
42009: PPUSH
42010: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42014: LD_EXP 31
42018: PPUSH
42019: CALL_OW 311
42023: IFFALSE 42034
// ComExitVehicle ( Kikuchi ) ;
42025: LD_EXP 31
42029: PPUSH
42030: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42034: LD_EXP 31
42038: PPUSH
42039: LD_INT 4
42041: PPUSH
42042: CALL_OW 235
// wait ( 0 0$1 ) ;
42046: LD_INT 35
42048: PPUSH
42049: CALL_OW 67
// if us_scout = 2 then
42053: LD_EXP 8
42057: PUSH
42058: LD_INT 2
42060: EQUAL
42061: IFFALSE 42441
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42063: LD_EXP 31
42067: PPUSH
42068: LD_INT 75
42070: PPUSH
42071: LD_INT 63
42073: PPUSH
42074: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42078: LD_EXP 31
42082: PPUSH
42083: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42087: LD_EXP 31
42091: PPUSH
42092: LD_INT 770
42094: PPUSH
42095: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42099: LD_EXP 31
42103: PPUSH
42104: LD_INT 100
42106: PPUSH
42107: LD_INT 75
42109: PPUSH
42110: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42114: LD_EXP 31
42118: PPUSH
42119: LD_INT 123
42121: PPUSH
42122: LD_INT 103
42124: PPUSH
42125: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42129: LD_EXP 31
42133: PPUSH
42134: LD_INT 138
42136: PPUSH
42137: LD_INT 108
42139: PPUSH
42140: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42144: LD_EXP 31
42148: PPUSH
42149: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42153: LD_INT 35
42155: PPUSH
42156: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42160: LD_EXP 31
42164: PPUSH
42165: LD_INT 138
42167: PPUSH
42168: LD_INT 108
42170: PPUSH
42171: CALL_OW 307
42175: IFFALSE 42153
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42177: LD_EXP 31
42181: PPUSH
42182: LD_INT 125
42184: PPUSH
42185: LD_INT 132
42187: PPUSH
42188: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42192: LD_INT 35
42194: PPUSH
42195: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42199: LD_INT 1
42201: PPUSH
42202: LD_EXP 31
42206: PPUSH
42207: CALL_OW 292
42211: PUSH
42212: LD_EXP 31
42216: PPUSH
42217: LD_INT 7
42219: PPUSH
42220: CALL_OW 296
42224: PUSH
42225: LD_INT 7
42227: LESS
42228: OR
42229: IFFALSE 42192
// DialogueOn ;
42231: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42235: LD_EXP 31
42239: PPUSH
42240: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42244: LD_INT 10
42246: PPUSH
42247: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42251: LD_EXP 31
42255: PPUSH
42256: LD_STRING D4Ya-Yam-1
42258: PPUSH
42259: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42263: LD_EXP 18
42267: PPUSH
42268: LD_STRING D4Ya-JMM-1
42270: PPUSH
42271: CALL_OW 88
// for i in points do
42275: LD_ADDR_VAR 0 1
42279: PUSH
42280: LD_VAR 0 2
42284: PUSH
42285: FOR_IN
42286: IFFALSE 42344
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42288: LD_VAR 0 1
42292: PUSH
42293: LD_INT 1
42295: ARRAY
42296: PPUSH
42297: LD_VAR 0 1
42301: PUSH
42302: LD_INT 2
42304: ARRAY
42305: PPUSH
42306: LD_INT 1
42308: PPUSH
42309: LD_INT 20
42311: NEG
42312: PPUSH
42313: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42317: LD_VAR 0 1
42321: PUSH
42322: LD_INT 1
42324: ARRAY
42325: PPUSH
42326: LD_VAR 0 1
42330: PUSH
42331: LD_INT 2
42333: ARRAY
42334: PPUSH
42335: LD_INT 1
42337: PPUSH
42338: CALL_OW 331
// end ;
42342: GO 42285
42344: POP
42345: POP
// dwait ( 0 0$0.5 ) ;
42346: LD_INT 18
42348: PPUSH
42349: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42353: LD_INT 42
42355: PPUSH
42356: LD_INT 27
42358: PPUSH
42359: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42363: LD_EXP 31
42367: PPUSH
42368: LD_STRING D4Ya-Yam-2
42370: PPUSH
42371: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42375: LD_INT 18
42377: PPUSH
42378: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42382: LD_INT 118
42384: PPUSH
42385: LD_INT 80
42387: PPUSH
42388: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42392: LD_EXP 18
42396: PPUSH
42397: LD_STRING D4Ya-JMM-2
42399: PPUSH
42400: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42404: LD_EXP 31
42408: PPUSH
42409: LD_STRING D4Ya-Yam-3
42411: PPUSH
42412: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42416: LD_INT 10
42418: PPUSH
42419: CALL_OW 68
// DialogueOff ;
42423: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42427: LD_EXP 31
42431: PPUSH
42432: LD_INT 1
42434: PPUSH
42435: CALL_OW 235
// end else
42439: GO 42693
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42441: LD_INT 2
42443: PPUSH
42444: LD_INT 4
42446: PPUSH
42447: LD_INT 2
42449: PPUSH
42450: LD_INT 1
42452: PPUSH
42453: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42457: LD_EXP 31
42461: PPUSH
42462: LD_INT 75
42464: PPUSH
42465: LD_INT 63
42467: PPUSH
42468: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42472: LD_EXP 31
42476: PPUSH
42477: LD_INT 175
42479: PPUSH
42480: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42484: LD_EXP 31
42488: PPUSH
42489: LD_INT 102
42491: PPUSH
42492: LD_INT 76
42494: PPUSH
42495: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42499: LD_EXP 31
42503: PPUSH
42504: LD_INT 108
42506: PPUSH
42507: LD_INT 70
42509: PPUSH
42510: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42514: LD_INT 35
42516: PPUSH
42517: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42521: LD_INT 2
42523: PPUSH
42524: LD_EXP 31
42528: PPUSH
42529: CALL_OW 292
42533: IFFALSE 42514
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42535: LD_EXP 31
42539: PPUSH
42540: LD_INT 112
42542: PPUSH
42543: LD_INT 118
42545: PPUSH
42546: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42550: LD_EXP 31
42554: PPUSH
42555: CALL_OW 256
42559: PUSH
42560: LD_INT 750
42562: GREATEREQUAL
42563: IFFALSE 42577
// SetLives ( Kikuchi , 700 ) ;
42565: LD_EXP 31
42569: PPUSH
42570: LD_INT 700
42572: PPUSH
42573: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42577: LD_INT 35
42579: PPUSH
42580: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42584: LD_INT 1
42586: PPUSH
42587: LD_EXP 31
42591: PPUSH
42592: CALL_OW 292
42596: PUSH
42597: LD_EXP 31
42601: PPUSH
42602: LD_INT 7
42604: PPUSH
42605: CALL_OW 296
42609: PUSH
42610: LD_INT 17
42612: LESS
42613: OR
42614: IFFALSE 42577
// DialogueOn ;
42616: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42620: LD_EXP 31
42624: PPUSH
42625: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42629: LD_EXP 31
42633: PPUSH
42634: LD_STRING D4Yb-Yam-1
42636: PPUSH
42637: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
42641: LD_EXP 18
42645: PPUSH
42646: LD_STRING D4Yb-JMM-1
42648: PPUSH
42649: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
42653: LD_EXP 31
42657: PPUSH
42658: LD_STRING D4Yb-Yam-2
42660: PPUSH
42661: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
42665: LD_EXP 18
42669: PPUSH
42670: LD_STRING D4Yb-JMM-2
42672: PPUSH
42673: CALL_OW 88
// DialogueOff ;
42677: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42681: LD_EXP 31
42685: PPUSH
42686: LD_INT 1
42688: PPUSH
42689: CALL_OW 235
// end ; end ; end ;
42693: PPOPN 2
42695: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
42696: LD_EXP 6
42700: IFFALSE 43725
42702: GO 42704
42704: DISABLE
42705: LD_INT 0
42707: PPUSH
42708: PPUSH
42709: PPUSH
42710: PPUSH
// begin enable ;
42711: ENABLE
// if not seen [ 1 ] then
42712: LD_EXP 9
42716: PUSH
42717: LD_INT 1
42719: ARRAY
42720: NOT
42721: IFFALSE 42901
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
42723: LD_ADDR_VAR 0 2
42727: PUSH
42728: LD_INT 22
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 25
42743: PUSH
42744: LD_INT 11
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 33
42753: PUSH
42754: LD_INT 4
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PPUSH
42770: CALL_OW 69
42774: ST_TO_ADDR
// if tmp then
42775: LD_VAR 0 2
42779: IFFALSE 42901
// for i in tmp do
42781: LD_ADDR_VAR 0 1
42785: PUSH
42786: LD_VAR 0 2
42790: PUSH
42791: FOR_IN
42792: IFFALSE 42899
// if See ( 1 , i ) then
42794: LD_INT 1
42796: PPUSH
42797: LD_VAR 0 1
42801: PPUSH
42802: CALL_OW 292
42806: IFFALSE 42897
// begin seen := Replace ( seen , 1 , true ) ;
42808: LD_ADDR_EXP 9
42812: PUSH
42813: LD_EXP 9
42817: PPUSH
42818: LD_INT 1
42820: PPUSH
42821: LD_INT 1
42823: PPUSH
42824: CALL_OW 1
42828: ST_TO_ADDR
// if CanSayRand ( 1 ) then
42829: LD_INT 1
42831: PPUSH
42832: CALL 2061 0 1
42836: IFFALSE 42897
// begin DialogueOn ;
42838: CALL_OW 6
// CenterNowOnUnits ( i ) ;
42842: LD_VAR 0 1
42846: PPUSH
42847: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42851: LD_INT 10
42853: PPUSH
42854: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
42858: LD_ADDR_VAR 0 3
42862: PUSH
42863: LD_INT 1
42865: PPUSH
42866: LD_STRING D5a-Sol2-1
42868: PPUSH
42869: CALL 2232 0 2
42873: ST_TO_ADDR
// if not un then
42874: LD_VAR 0 3
42878: NOT
42879: IFFALSE 42891
// SayRand ( sex_female , D5a-FSol2-1 ) ;
42881: LD_INT 2
42883: PPUSH
42884: LD_STRING D5a-FSol2-1
42886: PPUSH
42887: CALL 2232 0 2
// DialogueOff ;
42891: CALL_OW 7
// break ;
42895: GO 42899
// end ; end ;
42897: GO 42791
42899: POP
42900: POP
// end ; if not seen [ 2 ] then
42901: LD_EXP 9
42905: PUSH
42906: LD_INT 2
42908: ARRAY
42909: NOT
42910: IFFALSE 43127
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
42912: LD_ADDR_VAR 0 2
42916: PUSH
42917: LD_INT 22
42919: PUSH
42920: LD_INT 2
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 25
42929: PUSH
42930: LD_INT 17
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PPUSH
42941: CALL_OW 69
42945: ST_TO_ADDR
// if tmp then
42946: LD_VAR 0 2
42950: IFFALSE 43127
// for i in tmp do
42952: LD_ADDR_VAR 0 1
42956: PUSH
42957: LD_VAR 0 2
42961: PUSH
42962: FOR_IN
42963: IFFALSE 43125
// if See ( 1 , i ) then
42965: LD_INT 1
42967: PPUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 292
42977: IFFALSE 43123
// begin seen := Replace ( seen , 2 , true ) ;
42979: LD_ADDR_EXP 9
42983: PUSH
42984: LD_EXP 9
42988: PPUSH
42989: LD_INT 2
42991: PPUSH
42992: LD_INT 1
42994: PPUSH
42995: CALL_OW 1
42999: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43000: LD_INT 1
43002: PPUSH
43003: CALL 2061 0 1
43007: IFFALSE 43123
// begin DialogueOn ;
43009: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43013: LD_VAR 0 1
43017: PPUSH
43018: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43022: LD_INT 10
43024: PPUSH
43025: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43029: LD_ADDR_VAR 0 3
43033: PUSH
43034: LD_INT 1
43036: PPUSH
43037: LD_STRING D5b-Sol1-1
43039: PPUSH
43040: CALL 2232 0 2
43044: ST_TO_ADDR
// if not un then
43045: LD_VAR 0 3
43049: NOT
43050: IFFALSE 43068
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43052: LD_ADDR_VAR 0 3
43056: PUSH
43057: LD_INT 2
43059: PPUSH
43060: LD_STRING D5b-FSol1-1
43062: PPUSH
43063: CALL 2232 0 2
43067: ST_TO_ADDR
// if un then
43068: LD_VAR 0 3
43072: IFFALSE 43117
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43074: LD_ADDR_VAR 0 4
43078: PUSH
43079: LD_INT 1
43081: PPUSH
43082: LD_STRING D5b-Sol2-1
43084: PPUSH
43085: LD_VAR 0 3
43089: PPUSH
43090: CALL 2451 0 3
43094: ST_TO_ADDR
// if not un2 then
43095: LD_VAR 0 4
43099: NOT
43100: IFFALSE 43117
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43102: LD_INT 2
43104: PPUSH
43105: LD_STRING D5b-FSol2-1
43107: PPUSH
43108: LD_VAR 0 3
43112: PPUSH
43113: CALL 2451 0 3
// end ; DialogueOff ;
43117: CALL_OW 7
// break ;
43121: GO 43125
// end ; end ;
43123: GO 42962
43125: POP
43126: POP
// end ; if not seen [ 3 ] then
43127: LD_EXP 9
43131: PUSH
43132: LD_INT 3
43134: ARRAY
43135: NOT
43136: IFFALSE 43310
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43138: LD_ADDR_VAR 0 2
43142: PUSH
43143: LD_INT 22
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 33
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PPUSH
43167: CALL_OW 69
43171: ST_TO_ADDR
// if tmp then
43172: LD_VAR 0 2
43176: IFFALSE 43310
// for i in tmp do
43178: LD_ADDR_VAR 0 1
43182: PUSH
43183: LD_VAR 0 2
43187: PUSH
43188: FOR_IN
43189: IFFALSE 43308
// if See ( 1 , i ) then
43191: LD_INT 1
43193: PPUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 292
43203: IFFALSE 43306
// begin seen := Replace ( seen , 3 , true ) ;
43205: LD_ADDR_EXP 9
43209: PUSH
43210: LD_EXP 9
43214: PPUSH
43215: LD_INT 3
43217: PPUSH
43218: LD_INT 1
43220: PPUSH
43221: CALL_OW 1
43225: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43226: LD_INT 1
43228: PPUSH
43229: CALL 2061 0 1
43233: IFFALSE 43306
// begin DialogueOn ;
43235: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43239: LD_VAR 0 1
43243: PPUSH
43244: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43248: LD_INT 10
43250: PPUSH
43251: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43255: LD_ADDR_VAR 0 3
43259: PUSH
43260: LD_INT 1
43262: PPUSH
43263: LD_STRING D8-Sol1-1
43265: PPUSH
43266: CALL 2232 0 2
43270: ST_TO_ADDR
// if not un then
43271: LD_VAR 0 3
43275: NOT
43276: IFFALSE 43288
// SayRand ( sex_female , D8-FSol1-1 ) ;
43278: LD_INT 2
43280: PPUSH
43281: LD_STRING D8-FSol1-1
43283: PPUSH
43284: CALL 2232 0 2
// Say ( JMM , D8-JMM-1 ) ;
43288: LD_EXP 18
43292: PPUSH
43293: LD_STRING D8-JMM-1
43295: PPUSH
43296: CALL_OW 88
// DialogueOff ;
43300: CALL_OW 7
// break ;
43304: GO 43308
// end ; end ;
43306: GO 43188
43308: POP
43309: POP
// end ; if not seen [ 4 ] then
43310: LD_EXP 9
43314: PUSH
43315: LD_INT 4
43317: ARRAY
43318: NOT
43319: IFFALSE 43481
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43321: LD_ADDR_VAR 0 2
43325: PUSH
43326: LD_INT 22
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 33
43338: PUSH
43339: LD_INT 5
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PPUSH
43350: CALL_OW 69
43354: ST_TO_ADDR
// if tmp then
43355: LD_VAR 0 2
43359: IFFALSE 43481
// for i in tmp do
43361: LD_ADDR_VAR 0 1
43365: PUSH
43366: LD_VAR 0 2
43370: PUSH
43371: FOR_IN
43372: IFFALSE 43479
// if See ( 1 , i ) then
43374: LD_INT 1
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 292
43386: IFFALSE 43477
// begin seen := Replace ( seen , 4 , true ) ;
43388: LD_ADDR_EXP 9
43392: PUSH
43393: LD_EXP 9
43397: PPUSH
43398: LD_INT 4
43400: PPUSH
43401: LD_INT 1
43403: PPUSH
43404: CALL_OW 1
43408: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43409: LD_INT 1
43411: PPUSH
43412: CALL 2061 0 1
43416: IFFALSE 43477
// begin DialogueOn ;
43418: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43422: LD_VAR 0 1
43426: PPUSH
43427: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43431: LD_INT 10
43433: PPUSH
43434: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_INT 1
43445: PPUSH
43446: LD_STRING D5a-Sol1-1
43448: PPUSH
43449: CALL 2232 0 2
43453: ST_TO_ADDR
// if not un then
43454: LD_VAR 0 3
43458: NOT
43459: IFFALSE 43471
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43461: LD_INT 2
43463: PPUSH
43464: LD_STRING D5a-FSol1-1
43466: PPUSH
43467: CALL 2232 0 2
// DialogueOff ;
43471: CALL_OW 7
// break ;
43475: GO 43479
// end ; end ;
43477: GO 43371
43479: POP
43480: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43481: LD_EXP 9
43485: PUSH
43486: LD_INT 5
43488: ARRAY
43489: NOT
43490: PUSH
43491: LD_EXP 9
43495: PUSH
43496: LD_INT 3
43498: ARRAY
43499: AND
43500: IFFALSE 43674
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43502: LD_ADDR_VAR 0 2
43506: PUSH
43507: LD_INT 22
43509: PUSH
43510: LD_INT 2
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 34
43519: PUSH
43520: LD_INT 31
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PPUSH
43531: CALL_OW 69
43535: ST_TO_ADDR
// if tmp then
43536: LD_VAR 0 2
43540: IFFALSE 43674
// for i in tmp do
43542: LD_ADDR_VAR 0 1
43546: PUSH
43547: LD_VAR 0 2
43551: PUSH
43552: FOR_IN
43553: IFFALSE 43672
// if See ( 1 , i ) then
43555: LD_INT 1
43557: PPUSH
43558: LD_VAR 0 1
43562: PPUSH
43563: CALL_OW 292
43567: IFFALSE 43670
// begin seen := Replace ( seen , 5 , true ) ;
43569: LD_ADDR_EXP 9
43573: PUSH
43574: LD_EXP 9
43578: PPUSH
43579: LD_INT 5
43581: PPUSH
43582: LD_INT 1
43584: PPUSH
43585: CALL_OW 1
43589: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43590: LD_INT 1
43592: PPUSH
43593: CALL 2061 0 1
43597: IFFALSE 43670
// begin DialogueOn ;
43599: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43612: LD_INT 10
43614: PPUSH
43615: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_INT 1
43626: PPUSH
43627: LD_STRING D8a-Sol2-1
43629: PPUSH
43630: CALL 2232 0 2
43634: ST_TO_ADDR
// if not un then
43635: LD_VAR 0 3
43639: NOT
43640: IFFALSE 43652
// SayRand ( sex_female , D8a-FSol2-1 ) ;
43642: LD_INT 2
43644: PPUSH
43645: LD_STRING D8a-FSol2-1
43647: PPUSH
43648: CALL 2232 0 2
// Say ( JMM , D8a-JMM-1 ) ;
43652: LD_EXP 18
43656: PPUSH
43657: LD_STRING D8a-JMM-1
43659: PPUSH
43660: CALL_OW 88
// DialogueOff ;
43664: CALL_OW 7
// break ;
43668: GO 43672
// end ; end ;
43670: GO 43552
43672: POP
43673: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
43674: LD_EXP 9
43678: PUSH
43679: LD_INT 1
43681: ARRAY
43682: PUSH
43683: LD_EXP 9
43687: PUSH
43688: LD_INT 2
43690: ARRAY
43691: AND
43692: PUSH
43693: LD_EXP 9
43697: PUSH
43698: LD_INT 3
43700: ARRAY
43701: AND
43702: PUSH
43703: LD_EXP 9
43707: PUSH
43708: LD_INT 4
43710: ARRAY
43711: AND
43712: PUSH
43713: LD_EXP 9
43717: PUSH
43718: LD_INT 5
43720: ARRAY
43721: AND
43722: IFFALSE 43725
// disable ;
43724: DISABLE
// end ;
43725: PPOPN 4
43727: END
// every 0 0$1 trigger kamikazed do var un ;
43728: LD_EXP 10
43732: IFFALSE 43930
43734: GO 43736
43736: DISABLE
43737: LD_INT 0
43739: PPUSH
// begin DialogueOn ;
43740: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
43744: LD_EXP 10
43748: PPUSH
43749: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
43753: LD_ADDR_VAR 0 1
43757: PUSH
43758: LD_INT 1
43760: PPUSH
43761: LD_STRING D5c-Sol1-1
43763: PPUSH
43764: CALL 2232 0 2
43768: ST_TO_ADDR
// if not un then
43769: LD_VAR 0 1
43773: NOT
43774: IFFALSE 43792
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
43776: LD_ADDR_VAR 0 1
43780: PUSH
43781: LD_INT 2
43783: PPUSH
43784: LD_STRING D5c-Sol1-1
43786: PPUSH
43787: CALL 2232 0 2
43791: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
43792: LD_EXP 18
43796: PPUSH
43797: LD_STRING D5c-JMM-1
43799: PPUSH
43800: CALL_OW 88
// if IsOk ( Lisa ) then
43804: LD_EXP 19
43808: PPUSH
43809: CALL_OW 302
43813: IFFALSE 43829
// Say ( Lisa , D5d-Lisa-1 ) else
43815: LD_EXP 19
43819: PPUSH
43820: LD_STRING D5d-Lisa-1
43822: PPUSH
43823: CALL_OW 88
43827: GO 43914
// if IsOk ( Cyrus ) then
43829: LD_EXP 22
43833: PPUSH
43834: CALL_OW 302
43838: IFFALSE 43854
// Say ( Cyrus , D5d-Cyrus-1 ) else
43840: LD_EXP 22
43844: PPUSH
43845: LD_STRING D5d-Cyrus-1
43847: PPUSH
43848: CALL_OW 88
43852: GO 43914
// if IsOk ( Gary ) then
43854: LD_EXP 29
43858: PPUSH
43859: CALL_OW 302
43863: IFFALSE 43879
// Say ( Gary , D5d-Gary-1 ) else
43865: LD_EXP 29
43869: PPUSH
43870: LD_STRING D5d-Gary-1
43872: PPUSH
43873: CALL_OW 88
43877: GO 43914
// if GetSex ( un ) = sex_male then
43879: LD_VAR 0 1
43883: PPUSH
43884: CALL_OW 258
43888: PUSH
43889: LD_INT 1
43891: EQUAL
43892: IFFALSE 43908
// Say ( un , D5d-Sol1-1 ) else
43894: LD_VAR 0 1
43898: PPUSH
43899: LD_STRING D5d-Sol1-1
43901: PPUSH
43902: CALL_OW 88
43906: GO 43914
// begin DialogueOff ;
43908: CALL_OW 7
// exit ;
43912: GO 43930
// end ; Say ( JMM , D5d-JMM-1 ) ;
43914: LD_EXP 18
43918: PPUSH
43919: LD_STRING D5d-JMM-1
43921: PPUSH
43922: CALL_OW 88
// DialogueOff ;
43926: CALL_OW 7
// end ;
43930: PPOPN 1
43932: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
43933: LD_INT 1
43935: PPUSH
43936: LD_INT 17
43938: PPUSH
43939: CALL_OW 294
43943: PUSH
43944: LD_INT 2
43946: GREATEREQUAL
43947: IFFALSE 44068
43949: GO 43951
43951: DISABLE
43952: LD_INT 0
43954: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
43955: LD_INT 10
43957: PPUSH
43958: LD_INT 5
43960: PPUSH
43961: LD_INT 1
43963: PPUSH
43964: LD_INT 10
43966: NEG
43967: PPUSH
43968: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
43972: LD_INT 10
43974: PPUSH
43975: LD_INT 5
43977: PPUSH
43978: LD_INT 1
43980: PPUSH
43981: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
43985: LD_INT 10
43987: PPUSH
43988: LD_INT 5
43990: PPUSH
43991: CALL_OW 86
// DialogueOn ;
43995: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
43999: LD_ADDR_VAR 0 1
44003: PUSH
44004: LD_INT 1
44006: PPUSH
44007: LD_STRING D6-Sci1-1
44009: PPUSH
44010: CALL 2232 0 2
44014: ST_TO_ADDR
// if un then
44015: LD_VAR 0 1
44019: IFFALSE 44057
// begin Say ( JMM , D6-JMM-1 ) ;
44021: LD_EXP 18
44025: PPUSH
44026: LD_STRING D6-JMM-1
44028: PPUSH
44029: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44033: LD_VAR 0 1
44037: PPUSH
44038: LD_STRING D6-Sci1-2
44040: PPUSH
44041: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44045: LD_EXP 18
44049: PPUSH
44050: LD_STRING D6-JMM-2
44052: PPUSH
44053: CALL_OW 88
// end ; DialogueOff ;
44057: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44061: LD_STRING M3
44063: PPUSH
44064: CALL_OW 337
// end ;
44068: PPOPN 1
44070: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44071: LD_OWVAR 1
44075: PUSH
44076: LD_INT 65100
44078: GREATEREQUAL
44079: PUSH
44080: LD_INT 2
44082: PPUSH
44083: LD_INT 169
44085: PPUSH
44086: LD_INT 90
44088: PPUSH
44089: LD_INT 40
44091: PPUSH
44092: CALL 3669 0 4
44096: PUSH
44097: LD_INT 4
44099: ARRAY
44100: PUSH
44101: LD_INT 0
44103: EQUAL
44104: AND
44105: IFFALSE 45139
44107: GO 44109
44109: DISABLE
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
44114: PPUSH
44115: PPUSH
// begin uc_side := 5 ;
44116: LD_ADDR_OWVAR 20
44120: PUSH
44121: LD_INT 5
44123: ST_TO_ADDR
// uc_nation := 2 ;
44124: LD_ADDR_OWVAR 21
44128: PUSH
44129: LD_INT 2
44131: ST_TO_ADDR
// InitHc ;
44132: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44136: LD_INT 1
44138: PPUSH
44139: LD_INT 3
44141: PPUSH
44142: LD_INT 8
44144: PPUSH
44145: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44149: LD_ADDR_OWVAR 29
44153: PUSH
44154: LD_INT 12
44156: PUSH
44157: LD_INT 12
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44164: LD_ADDR_OWVAR 33
44168: PUSH
44169: LD_STRING SecondCharsGal
44171: ST_TO_ADDR
// hc_face_number := 7 ;
44172: LD_ADDR_OWVAR 34
44176: PUSH
44177: LD_INT 7
44179: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44180: LD_ADDR_EXP 43
44184: PUSH
44185: CALL_OW 44
44189: ST_TO_ADDR
// InitHc ;
44190: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44194: LD_INT 1
44196: PPUSH
44197: LD_INT 16
44199: PPUSH
44200: LD_INT 2
44202: PPUSH
44203: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44207: LD_ADDR_OWVAR 29
44211: PUSH
44212: LD_INT 12
44214: PUSH
44215: LD_INT 12
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: ST_TO_ADDR
// hc_name := Livid ;
44222: LD_ADDR_OWVAR 26
44226: PUSH
44227: LD_STRING Livid
44229: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44230: LD_ADDR_EXP 44
44234: PUSH
44235: CALL_OW 44
44239: ST_TO_ADDR
// InitHc ;
44240: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44244: LD_INT 35
44246: PPUSH
44247: CALL_OW 67
// until not InBattle ( 1 ) ;
44251: LD_INT 1
44253: PPUSH
44254: CALL_OW 463
44258: NOT
44259: IFFALSE 44244
// wait ( 0 0$5 ) ;
44261: LD_INT 175
44263: PPUSH
44264: CALL_OW 67
// DialogueOn ;
44268: CALL_OW 6
// InGameOn ;
44272: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44276: LD_ADDR_VAR 0 1
44280: PUSH
44281: LD_EXP 32
44285: PUSH
44286: LD_EXP 19
44290: PUSH
44291: LD_EXP 20
44295: PUSH
44296: LD_EXP 21
44300: PUSH
44301: LD_EXP 22
44305: PUSH
44306: LD_EXP 23
44310: PUSH
44311: LD_EXP 24
44315: PUSH
44316: LD_EXP 25
44320: PUSH
44321: LD_EXP 26
44325: PUSH
44326: LD_EXP 28
44330: PUSH
44331: LD_EXP 29
44335: PUSH
44336: LD_EXP 30
44340: PUSH
44341: LD_EXP 31
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: DIFF
44360: PPUSH
44361: LD_INT 26
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PPUSH
44371: CALL_OW 72
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: ST_TO_ADDR
// if not un and Brown then
44380: LD_VAR 0 1
44384: NOT
44385: PUSH
44386: LD_EXP 24
44390: AND
44391: IFFALSE 44403
// un := Brown ;
44393: LD_ADDR_VAR 0 1
44397: PUSH
44398: LD_EXP 24
44402: ST_TO_ADDR
// if un then
44403: LD_VAR 0 1
44407: IFFALSE 44433
// begin Say ( un , D7-Sol1-1 ) ;
44409: LD_VAR 0 1
44413: PPUSH
44414: LD_STRING D7-Sol1-1
44416: PPUSH
44417: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44421: LD_EXP 18
44425: PPUSH
44426: LD_STRING D7-JMM-1
44428: PPUSH
44429: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44433: LD_EXP 43
44437: PPUSH
44438: LD_STRING D7-Ar1-1
44440: PPUSH
44441: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44445: LD_EXP 18
44449: PPUSH
44450: LD_STRING D7-JMM-2
44452: PPUSH
44453: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44457: LD_EXP 43
44461: PPUSH
44462: LD_STRING D7-Ar1-2
44464: PPUSH
44465: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44469: LD_EXP 18
44473: PPUSH
44474: LD_STRING D7-JMM-3
44476: PPUSH
44477: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44481: LD_EXP 43
44485: PPUSH
44486: LD_STRING D7-Ar1-3
44488: PPUSH
44489: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44493: LD_EXP 18
44497: PPUSH
44498: LD_STRING D7-JMM-4
44500: PPUSH
44501: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44505: LD_EXP 43
44509: PPUSH
44510: LD_STRING D7-Ar1-4
44512: PPUSH
44513: CALL_OW 94
// InGameOff ;
44517: CALL_OW 9
// DialogueOff ;
44521: CALL_OW 7
// case Query ( QCameras ) of 1 :
44525: LD_STRING QCameras
44527: PPUSH
44528: CALL_OW 97
44532: PUSH
44533: LD_INT 1
44535: DOUBLE
44536: EQUAL
44537: IFTRUE 44541
44539: GO 44544
44541: POP
// ; 2 :
44542: GO 44558
44544: LD_INT 2
44546: DOUBLE
44547: EQUAL
44548: IFTRUE 44552
44550: GO 44557
44552: POP
// exit ; end ;
44553: GO 45139
44555: GO 44558
44557: POP
// ChangeMissionObjectives ( MCar ) ;
44558: LD_STRING MCar
44560: PPUSH
44561: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
44565: LD_INT 124
44567: PPUSH
44568: LD_INT 90
44570: PPUSH
44571: LD_INT 1
44573: PPUSH
44574: LD_INT 6
44576: NEG
44577: PPUSH
44578: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
44582: LD_INT 124
44584: PPUSH
44585: LD_INT 90
44587: PPUSH
44588: LD_INT 1
44590: PPUSH
44591: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
44595: LD_INT 12
44597: PPUSH
44598: LD_INT 1
44600: PPUSH
44601: CALL_OW 424
// wait ( 3 ) ;
44605: LD_INT 3
44607: PPUSH
44608: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
44612: LD_INT 124
44614: PPUSH
44615: LD_INT 90
44617: PPUSH
44618: CALL_OW 86
// cargo := false ;
44622: LD_ADDR_VAR 0 3
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
44630: LD_INT 35
44632: PPUSH
44633: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
44637: LD_ADDR_VAR 0 3
44641: PUSH
44642: LD_INT 12
44644: PPUSH
44645: LD_INT 32
44647: PUSH
44648: LD_INT 3
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 34
44657: PUSH
44658: LD_INT 32
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 58
44667: PUSH
44668: EMPTY
44669: LIST
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: LIST
44675: PPUSH
44676: CALL_OW 70
44680: ST_TO_ADDR
// until cargo ;
44681: LD_VAR 0 3
44685: IFFALSE 44630
// cargo := cargo [ 1 ] ;
44687: LD_ADDR_VAR 0 3
44691: PUSH
44692: LD_VAR 0 3
44696: PUSH
44697: LD_INT 1
44699: ARRAY
44700: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
44701: LD_VAR 0 3
44705: PPUSH
44706: LD_INT 5
44708: PPUSH
44709: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
44713: LD_INT 12
44715: PPUSH
44716: LD_INT 0
44718: PPUSH
44719: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
44723: LD_EXP 43
44727: PPUSH
44728: LD_INT 11
44730: PPUSH
44731: LD_INT 0
44733: PPUSH
44734: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
44738: LD_EXP 44
44742: PPUSH
44743: LD_INT 11
44745: PPUSH
44746: LD_INT 0
44748: PPUSH
44749: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
44753: LD_EXP 43
44757: PUSH
44758: LD_EXP 44
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PPUSH
44767: LD_INT 12
44769: PPUSH
44770: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
44774: LD_EXP 43
44778: PPUSH
44779: LD_VAR 0 3
44783: PPUSH
44784: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44788: LD_EXP 43
44792: PUSH
44793: LD_EXP 44
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PPUSH
44802: LD_INT 209
44804: PPUSH
44805: LD_INT 178
44807: PPUSH
44808: CALL_OW 171
// while ( true ) do
44812: LD_INT 1
44814: IFFALSE 44968
// begin wait ( 0 0$1 ) ;
44816: LD_INT 35
44818: PPUSH
44819: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
44823: LD_EXP 43
44827: PPUSH
44828: CALL_OW 314
44832: NOT
44833: PUSH
44834: LD_EXP 44
44838: PPUSH
44839: CALL_OW 314
44843: NOT
44844: OR
44845: IFFALSE 44871
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
44847: LD_EXP 43
44851: PUSH
44852: LD_EXP 44
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PPUSH
44861: LD_INT 209
44863: PPUSH
44864: LD_INT 178
44866: PPUSH
44867: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
44871: LD_EXP 43
44875: PPUSH
44876: LD_INT 10
44878: PPUSH
44879: CALL_OW 308
44883: IFFALSE 44894
// RemoveUnit ( ar_mechanic ) ;
44885: LD_EXP 43
44889: PPUSH
44890: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
44894: LD_EXP 44
44898: PPUSH
44899: LD_INT 10
44901: PPUSH
44902: CALL_OW 308
44906: IFFALSE 44917
// RemoveUnit ( ar_mechanic_friend ) ;
44908: LD_EXP 44
44912: PPUSH
44913: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
44917: LD_VAR 0 3
44921: PPUSH
44922: LD_INT 10
44924: PPUSH
44925: CALL_OW 308
44929: IFFALSE 44940
// RemoveUnit ( cargo ) ;
44931: LD_VAR 0 3
44935: PPUSH
44936: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
44940: LD_EXP 43
44944: PPUSH
44945: CALL_OW 300
44949: NOT
44950: PUSH
44951: LD_EXP 44
44955: PPUSH
44956: CALL_OW 300
44960: NOT
44961: AND
44962: IFFALSE 44966
// break ;
44964: GO 44968
// end ;
44966: GO 44812
// wait ( 0 0$2 ) ;
44968: LD_INT 70
44970: PPUSH
44971: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
44975: LD_EXP 43
44979: PPUSH
44980: LD_STRING D7a-Ar1-1
44982: PPUSH
44983: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
44987: LD_ADDR_VAR 0 4
44991: PUSH
44992: LD_INT 129
44994: PUSH
44995: LD_INT 10
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 103
45004: PUSH
45005: LD_INT 6
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 148
45014: PUSH
45015: LD_INT 47
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 155
45024: PUSH
45025: LD_INT 16
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// if Difficulty = 1 then
45038: LD_OWVAR 67
45042: PUSH
45043: LD_INT 1
45045: EQUAL
45046: IFFALSE 45083
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45048: LD_ADDR_VAR 0 4
45052: PUSH
45053: LD_VAR 0 4
45057: PUSH
45058: LD_INT 78
45060: PUSH
45061: LD_INT 7
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 104
45070: PUSH
45071: LD_INT 43
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: ADD
45082: ST_TO_ADDR
// for i in tmp do
45083: LD_ADDR_VAR 0 2
45087: PUSH
45088: LD_VAR 0 4
45092: PUSH
45093: FOR_IN
45094: IFFALSE 45127
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45096: LD_VAR 0 2
45100: PUSH
45101: LD_INT 1
45103: ARRAY
45104: PPUSH
45105: LD_VAR 0 2
45109: PUSH
45110: LD_INT 2
45112: ARRAY
45113: PPUSH
45114: LD_INT 1
45116: PPUSH
45117: LD_INT 9
45119: NEG
45120: PPUSH
45121: CALL_OW 330
45125: GO 45093
45127: POP
45128: POP
// CenterOnXY ( 129 , 10 ) ;
45129: LD_INT 129
45131: PPUSH
45132: LD_INT 10
45134: PPUSH
45135: CALL_OW 84
// end ;
45139: PPOPN 4
45141: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45142: LD_EXP 14
45146: PUSH
45147: LD_INT 21000
45149: MINUS
45150: PUSH
45151: LD_OWVAR 1
45155: LESSEQUAL
45156: IFFALSE 45196
45158: GO 45160
45160: DISABLE
// begin powell_warn := true ;
45161: LD_ADDR_EXP 15
45165: PUSH
45166: LD_INT 1
45168: ST_TO_ADDR
// DialogueOn ;
45169: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45173: LD_EXP 27
45177: PPUSH
45178: LD_STRING D9-Pow-1
45180: PPUSH
45181: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45185: LD_INT 10
45187: PPUSH
45188: CALL_OW 68
// DialogueOff ;
45192: CALL_OW 7
// end ;
45196: END
// every 0 0$1 trigger game_time <= tick do
45197: LD_EXP 14
45201: PUSH
45202: LD_OWVAR 1
45206: LESSEQUAL
45207: IFFALSE 45246
45209: GO 45211
45211: DISABLE
// begin DialogueOn ;
45212: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45216: LD_EXP 27
45220: PPUSH
45221: LD_STRING D9a-Pow-1
45223: PPUSH
45224: CALL_OW 94
// dwait ( 0 0$2 ) ;
45228: LD_INT 70
45230: PPUSH
45231: CALL_OW 68
// DialogueOff ;
45235: CALL_OW 7
// YouLost ( Command ) ;
45239: LD_STRING Command
45241: PPUSH
45242: CALL_OW 104
// end ;
45246: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45247: LD_EXP 18
45251: PPUSH
45252: CALL_OW 301
45256: PUSH
45257: LD_EXP 5
45261: AND
45262: IFFALSE 45274
45264: GO 45266
45266: DISABLE
// YouLost ( JMM ) ;
45267: LD_STRING JMM
45269: PPUSH
45270: CALL_OW 104
45274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
45275: LD_INT 22
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 30
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PPUSH
45299: CALL_OW 69
45303: PUSH
45304: LD_INT 0
45306: EQUAL
45307: PUSH
45308: LD_EXP 18
45312: PPUSH
45313: CALL_OW 302
45317: AND
45318: IFFALSE 46059
45320: GO 45322
45322: DISABLE
// begin DialogueOn ;
45323: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45327: LD_OWVAR 1
45331: PUSH
45332: LD_INT 126000
45334: PUSH
45335: LD_INT 105000
45337: PUSH
45338: LD_INT 94500
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: LIST
45345: PUSH
45346: LD_OWVAR 67
45350: ARRAY
45351: LESS
45352: IFFALSE 45366
// AddMedal ( Time1 , 2 ) else
45354: LD_STRING Time1
45356: PPUSH
45357: LD_INT 2
45359: PPUSH
45360: CALL_OW 101
45364: GO 45396
// if not powell_warn then
45366: LD_EXP 15
45370: NOT
45371: IFFALSE 45385
// AddMedal ( Time1 , 1 ) else
45373: LD_STRING Time1
45375: PPUSH
45376: LD_INT 1
45378: PPUSH
45379: CALL_OW 101
45383: GO 45396
// AddMedal ( Time1 , - 1 ) ;
45385: LD_STRING Time1
45387: PPUSH
45388: LD_INT 1
45390: NEG
45391: PPUSH
45392: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45396: LD_EXP 16
45400: PUSH
45401: LD_INT 5
45403: PUSH
45404: LD_INT 4
45406: PUSH
45407: LD_INT 3
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: LIST
45414: PUSH
45415: LD_OWVAR 67
45419: ARRAY
45420: GREATEREQUAL
45421: IFFALSE 45436
// AddMedal ( Destroy , - 2 ) else
45423: LD_STRING Destroy
45425: PPUSH
45426: LD_INT 2
45428: NEG
45429: PPUSH
45430: CALL_OW 101
45434: GO 45553
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45436: LD_INT 22
45438: PUSH
45439: LD_INT 2
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 21
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 50
45458: PUSH
45459: EMPTY
45460: LIST
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: PPUSH
45467: CALL_OW 69
45471: PUSH
45472: LD_INT 20
45474: GREATEREQUAL
45475: IFFALSE 45490
// AddMedal ( Destroy , - 1 ) else
45477: LD_STRING Destroy
45479: PPUSH
45480: LD_INT 1
45482: NEG
45483: PPUSH
45484: CALL_OW 101
45488: GO 45553
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45490: LD_INT 22
45492: PUSH
45493: LD_INT 2
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 21
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 50
45512: PUSH
45513: EMPTY
45514: LIST
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: PPUSH
45521: CALL_OW 69
45525: PUSH
45526: LD_INT 10
45528: GREATEREQUAL
45529: IFFALSE 45543
// AddMedal ( Destroy , 1 ) else
45531: LD_STRING Destroy
45533: PPUSH
45534: LD_INT 1
45536: PPUSH
45537: CALL_OW 101
45541: GO 45553
// AddMedal ( Destroy , 2 ) ;
45543: LD_STRING Destroy
45545: PPUSH
45546: LD_INT 2
45548: PPUSH
45549: CALL_OW 101
// if artifact_get then
45553: LD_EXP 12
45557: IFFALSE 45571
// AddMedal ( Artefact , 1 ) else
45559: LD_STRING Artefact
45561: PPUSH
45562: LD_INT 1
45564: PPUSH
45565: CALL_OW 101
45569: GO 45582
// AddMedal ( Artefact , - 1 ) ;
45571: LD_STRING Artefact
45573: PPUSH
45574: LD_INT 1
45576: NEG
45577: PPUSH
45578: CALL_OW 101
// GiveMedals ( MAIN ) ;
45582: LD_STRING MAIN
45584: PPUSH
45585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
45589: LD_INT 22
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 25
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 25
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 25
45624: PUSH
45625: LD_INT 3
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 25
45634: PUSH
45635: LD_INT 4
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PPUSH
45653: CALL_OW 69
45657: PPUSH
45658: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
45662: LD_EXP 32
45666: PUSH
45667: LD_EXP 19
45671: PUSH
45672: LD_EXP 20
45676: PUSH
45677: LD_EXP 21
45681: PUSH
45682: LD_EXP 22
45686: PUSH
45687: LD_EXP 23
45691: PUSH
45692: LD_EXP 24
45696: PUSH
45697: LD_EXP 25
45701: PUSH
45702: LD_EXP 26
45706: PUSH
45707: LD_EXP 28
45711: PUSH
45712: LD_EXP 29
45716: PUSH
45717: LD_EXP 30
45721: PUSH
45722: LD_EXP 31
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: DIFF
45741: PPUSH
45742: LD_STRING 11c_others
45744: PPUSH
45745: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
45749: LD_EXP 18
45753: PPUSH
45754: LD_EXP 3
45758: PUSH
45759: LD_STRING JMM
45761: STR
45762: PPUSH
45763: CALL_OW 38
// if Lisa then
45767: LD_EXP 19
45771: IFFALSE 45791
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
45773: LD_EXP 19
45777: PPUSH
45778: LD_EXP 3
45782: PUSH
45783: LD_STRING Lisa
45785: STR
45786: PPUSH
45787: CALL_OW 38
// if Donaldson then
45791: LD_EXP 20
45795: IFFALSE 45815
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
45797: LD_EXP 20
45801: PPUSH
45802: LD_EXP 3
45806: PUSH
45807: LD_STRING Donaldson
45809: STR
45810: PPUSH
45811: CALL_OW 38
// if Bobby then
45815: LD_EXP 21
45819: IFFALSE 45839
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
45821: LD_EXP 21
45825: PPUSH
45826: LD_EXP 3
45830: PUSH
45831: LD_STRING Bobby
45833: STR
45834: PPUSH
45835: CALL_OW 38
// if Cyrus then
45839: LD_EXP 22
45843: IFFALSE 45863
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
45845: LD_EXP 22
45849: PPUSH
45850: LD_EXP 3
45854: PUSH
45855: LD_STRING Cyrus
45857: STR
45858: PPUSH
45859: CALL_OW 38
// if Denis then
45863: LD_EXP 23
45867: IFFALSE 45887
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
45869: LD_EXP 23
45873: PPUSH
45874: LD_EXP 3
45878: PUSH
45879: LD_STRING Denis
45881: STR
45882: PPUSH
45883: CALL_OW 38
// if Brown then
45887: LD_EXP 24
45891: IFFALSE 45911
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
45893: LD_EXP 24
45897: PPUSH
45898: LD_EXP 3
45902: PUSH
45903: LD_STRING Brown
45905: STR
45906: PPUSH
45907: CALL_OW 38
// if Gladstone then
45911: LD_EXP 25
45915: IFFALSE 45935
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
45917: LD_EXP 25
45921: PPUSH
45922: LD_EXP 3
45926: PUSH
45927: LD_STRING Gladstone
45929: STR
45930: PPUSH
45931: CALL_OW 38
// if Houten then
45935: LD_EXP 26
45939: IFFALSE 45959
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
45941: LD_EXP 26
45945: PPUSH
45946: LD_EXP 3
45950: PUSH
45951: LD_STRING Houten
45953: STR
45954: PPUSH
45955: CALL_OW 38
// if Cornel then
45959: LD_EXP 28
45963: IFFALSE 45983
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
45965: LD_EXP 28
45969: PPUSH
45970: LD_EXP 3
45974: PUSH
45975: LD_STRING Cornel
45977: STR
45978: PPUSH
45979: CALL_OW 38
// if Gary then
45983: LD_EXP 29
45987: IFFALSE 46007
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
45989: LD_EXP 29
45993: PPUSH
45994: LD_EXP 3
45998: PUSH
45999: LD_STRING Gary
46001: STR
46002: PPUSH
46003: CALL_OW 38
// if Frank then
46007: LD_EXP 30
46011: IFFALSE 46031
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46013: LD_EXP 30
46017: PPUSH
46018: LD_EXP 3
46022: PUSH
46023: LD_STRING Frank
46025: STR
46026: PPUSH
46027: CALL_OW 38
// if Kikuchi then
46031: LD_EXP 31
46035: IFFALSE 46055
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46037: LD_EXP 31
46041: PPUSH
46042: LD_EXP 3
46046: PUSH
46047: LD_STRING Kikuchi
46049: STR
46050: PPUSH
46051: CALL_OW 38
// YouWin ;
46055: CALL_OW 103
// end ; end_of_file
46059: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46060: LD_INT 0
46062: PPUSH
// skirmish := false ;
46063: LD_ADDR_EXP 45
46067: PUSH
46068: LD_INT 0
46070: ST_TO_ADDR
// mc_bases := [ ] ;
46071: LD_ADDR_EXP 46
46075: PUSH
46076: EMPTY
46077: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46078: LD_ADDR_EXP 47
46082: PUSH
46083: EMPTY
46084: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46085: LD_ADDR_EXP 48
46089: PUSH
46090: EMPTY
46091: ST_TO_ADDR
// mc_need_heal := [ ] ;
46092: LD_ADDR_EXP 49
46096: PUSH
46097: EMPTY
46098: ST_TO_ADDR
// mc_healers := [ ] ;
46099: LD_ADDR_EXP 50
46103: PUSH
46104: EMPTY
46105: ST_TO_ADDR
// mc_build_list := [ ] ;
46106: LD_ADDR_EXP 51
46110: PUSH
46111: EMPTY
46112: ST_TO_ADDR
// mc_builders := [ ] ;
46113: LD_ADDR_EXP 52
46117: PUSH
46118: EMPTY
46119: ST_TO_ADDR
// mc_construct_list := [ ] ;
46120: LD_ADDR_EXP 53
46124: PUSH
46125: EMPTY
46126: ST_TO_ADDR
// mc_turret_list := [ ] ;
46127: LD_ADDR_EXP 54
46131: PUSH
46132: EMPTY
46133: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46134: LD_ADDR_EXP 55
46138: PUSH
46139: EMPTY
46140: ST_TO_ADDR
// mc_miners := [ ] ;
46141: LD_ADDR_EXP 57
46145: PUSH
46146: EMPTY
46147: ST_TO_ADDR
// mc_mines := [ ] ;
46148: LD_ADDR_EXP 56
46152: PUSH
46153: EMPTY
46154: ST_TO_ADDR
// mc_minefields := [ ] ;
46155: LD_ADDR_EXP 58
46159: PUSH
46160: EMPTY
46161: ST_TO_ADDR
// mc_crates := [ ] ;
46162: LD_ADDR_EXP 59
46166: PUSH
46167: EMPTY
46168: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46169: LD_ADDR_EXP 60
46173: PUSH
46174: EMPTY
46175: ST_TO_ADDR
// mc_vehicles := [ ] ;
46176: LD_ADDR_EXP 61
46180: PUSH
46181: EMPTY
46182: ST_TO_ADDR
// mc_attack := [ ] ;
46183: LD_ADDR_EXP 62
46187: PUSH
46188: EMPTY
46189: ST_TO_ADDR
// mc_produce := [ ] ;
46190: LD_ADDR_EXP 63
46194: PUSH
46195: EMPTY
46196: ST_TO_ADDR
// mc_defender := [ ] ;
46197: LD_ADDR_EXP 64
46201: PUSH
46202: EMPTY
46203: ST_TO_ADDR
// mc_parking := [ ] ;
46204: LD_ADDR_EXP 66
46208: PUSH
46209: EMPTY
46210: ST_TO_ADDR
// mc_scan := [ ] ;
46211: LD_ADDR_EXP 65
46215: PUSH
46216: EMPTY
46217: ST_TO_ADDR
// end ;
46218: LD_VAR 0 1
46222: RET
// export function RunMacro ; var i ; begin
46223: LD_INT 0
46225: PPUSH
46226: PPUSH
// for i = 1 to mc_bases do
46227: LD_ADDR_VAR 0 2
46231: PUSH
46232: DOUBLE
46233: LD_INT 1
46235: DEC
46236: ST_TO_ADDR
46237: LD_EXP 46
46241: PUSH
46242: FOR_TO
46243: IFFALSE 46731
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46245: LD_ADDR_EXP 47
46249: PUSH
46250: LD_EXP 47
46254: PPUSH
46255: LD_VAR 0 2
46259: PPUSH
46260: EMPTY
46261: PPUSH
46262: CALL_OW 1
46266: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46267: LD_ADDR_EXP 48
46271: PUSH
46272: LD_EXP 48
46276: PPUSH
46277: LD_VAR 0 2
46281: PPUSH
46282: EMPTY
46283: PPUSH
46284: CALL_OW 1
46288: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46289: LD_ADDR_EXP 49
46293: PUSH
46294: LD_EXP 49
46298: PPUSH
46299: LD_VAR 0 2
46303: PPUSH
46304: EMPTY
46305: PPUSH
46306: CALL_OW 1
46310: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46311: LD_ADDR_EXP 50
46315: PUSH
46316: LD_EXP 50
46320: PPUSH
46321: LD_VAR 0 2
46325: PPUSH
46326: EMPTY
46327: PUSH
46328: EMPTY
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PPUSH
46334: CALL_OW 1
46338: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46339: LD_ADDR_EXP 51
46343: PUSH
46344: LD_EXP 51
46348: PPUSH
46349: LD_VAR 0 2
46353: PPUSH
46354: EMPTY
46355: PPUSH
46356: CALL_OW 1
46360: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46361: LD_ADDR_EXP 53
46365: PUSH
46366: LD_EXP 53
46370: PPUSH
46371: LD_VAR 0 2
46375: PPUSH
46376: EMPTY
46377: PPUSH
46378: CALL_OW 1
46382: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46383: LD_ADDR_EXP 54
46387: PUSH
46388: LD_EXP 54
46392: PPUSH
46393: LD_VAR 0 2
46397: PPUSH
46398: EMPTY
46399: PPUSH
46400: CALL_OW 1
46404: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46405: LD_ADDR_EXP 55
46409: PUSH
46410: LD_EXP 55
46414: PPUSH
46415: LD_VAR 0 2
46419: PPUSH
46420: EMPTY
46421: PPUSH
46422: CALL_OW 1
46426: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46427: LD_ADDR_EXP 55
46431: PUSH
46432: LD_EXP 55
46436: PPUSH
46437: LD_VAR 0 2
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PPUSH
46449: EMPTY
46450: PPUSH
46451: CALL 3175 0 3
46455: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46456: LD_ADDR_EXP 55
46460: PUSH
46461: LD_EXP 55
46465: PPUSH
46466: LD_VAR 0 2
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PPUSH
46478: EMPTY
46479: PPUSH
46480: CALL 3175 0 3
46484: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46485: LD_ADDR_EXP 57
46489: PUSH
46490: LD_EXP 57
46494: PPUSH
46495: LD_VAR 0 2
46499: PPUSH
46500: EMPTY
46501: PPUSH
46502: CALL_OW 1
46506: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
46507: LD_ADDR_EXP 56
46511: PUSH
46512: LD_EXP 56
46516: PPUSH
46517: LD_VAR 0 2
46521: PPUSH
46522: EMPTY
46523: PPUSH
46524: CALL_OW 1
46528: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
46529: LD_ADDR_EXP 58
46533: PUSH
46534: LD_EXP 58
46538: PPUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: EMPTY
46545: PPUSH
46546: CALL_OW 1
46550: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
46551: LD_ADDR_EXP 59
46555: PUSH
46556: LD_EXP 59
46560: PPUSH
46561: LD_VAR 0 2
46565: PPUSH
46566: EMPTY
46567: PPUSH
46568: CALL_OW 1
46572: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46573: LD_ADDR_EXP 60
46577: PUSH
46578: LD_EXP 60
46582: PPUSH
46583: LD_VAR 0 2
46587: PPUSH
46588: EMPTY
46589: PPUSH
46590: CALL_OW 1
46594: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
46595: LD_ADDR_EXP 61
46599: PUSH
46600: LD_EXP 61
46604: PPUSH
46605: LD_VAR 0 2
46609: PPUSH
46610: EMPTY
46611: PPUSH
46612: CALL_OW 1
46616: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
46617: LD_ADDR_EXP 62
46621: PUSH
46622: LD_EXP 62
46626: PPUSH
46627: LD_VAR 0 2
46631: PPUSH
46632: EMPTY
46633: PPUSH
46634: CALL_OW 1
46638: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
46639: LD_ADDR_EXP 63
46643: PUSH
46644: LD_EXP 63
46648: PPUSH
46649: LD_VAR 0 2
46653: PPUSH
46654: EMPTY
46655: PPUSH
46656: CALL_OW 1
46660: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
46661: LD_ADDR_EXP 64
46665: PUSH
46666: LD_EXP 64
46670: PPUSH
46671: LD_VAR 0 2
46675: PPUSH
46676: EMPTY
46677: PPUSH
46678: CALL_OW 1
46682: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
46683: LD_ADDR_EXP 66
46687: PUSH
46688: LD_EXP 66
46692: PPUSH
46693: LD_VAR 0 2
46697: PPUSH
46698: LD_INT 0
46700: PPUSH
46701: CALL_OW 1
46705: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
46706: LD_ADDR_EXP 65
46710: PUSH
46711: LD_EXP 65
46715: PPUSH
46716: LD_VAR 0 2
46720: PPUSH
46721: LD_INT 0
46723: PPUSH
46724: CALL_OW 1
46728: ST_TO_ADDR
// end ;
46729: GO 46242
46731: POP
46732: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
46733: LD_INT 1
46735: PPUSH
46736: LD_INT 8
46738: PUSH
46739: LD_INT 10
46741: PUSH
46742: LD_INT 12
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: LD_OWVAR 67
46754: ARRAY
46755: PPUSH
46756: LD_INT 3
46758: PPUSH
46759: CALL 54247 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
46763: LD_INT 2
46765: PPUSH
46766: LD_INT 6
46768: PUSH
46769: LD_INT 8
46771: PUSH
46772: LD_INT 9
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: PUSH
46780: LD_OWVAR 67
46784: ARRAY
46785: PPUSH
46786: LD_INT 2
46788: PPUSH
46789: CALL 54247 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
46793: LD_INT 3
46795: PPUSH
46796: LD_INT 6
46798: PUSH
46799: LD_INT 7
46801: PUSH
46802: LD_INT 9
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: PUSH
46810: LD_OWVAR 67
46814: ARRAY
46815: PPUSH
46816: LD_INT 1
46818: PPUSH
46819: CALL 54247 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
46823: LD_ADDR_EXP 66
46827: PUSH
46828: LD_INT 20
46830: PUSH
46831: LD_INT 21
46833: PUSH
46834: LD_INT 22
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// for i = 1 to mc_bases do
46842: LD_ADDR_VAR 0 2
46846: PUSH
46847: DOUBLE
46848: LD_INT 1
46850: DEC
46851: ST_TO_ADDR
46852: LD_EXP 46
46856: PUSH
46857: FOR_TO
46858: IFFALSE 46882
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
46860: LD_VAR 0 2
46864: PPUSH
46865: LD_EXP 40
46869: PUSH
46870: LD_VAR 0 2
46874: ARRAY
46875: PPUSH
46876: CALL 54483 0 2
46880: GO 46857
46882: POP
46883: POP
// skirmish := true ;
46884: LD_ADDR_EXP 45
46888: PUSH
46889: LD_INT 1
46891: ST_TO_ADDR
// end ;
46892: LD_VAR 0 1
46896: RET
// every 0 0$01 trigger skirmish do
46897: LD_EXP 45
46901: IFFALSE 46985
46903: GO 46905
46905: DISABLE
// begin enable ;
46906: ENABLE
// MC_CheckBuildings ( ) ;
46907: CALL 47346 0 0
// MC_CheckPeopleLife ( ) ;
46911: CALL 47564 0 0
// RaiseSailEvent ( 103 ) ;
46915: LD_INT 103
46917: PPUSH
46918: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
46922: LD_INT 104
46924: PPUSH
46925: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
46929: LD_INT 105
46931: PPUSH
46932: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
46936: LD_INT 106
46938: PPUSH
46939: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
46943: LD_INT 107
46945: PPUSH
46946: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
46950: LD_INT 108
46952: PPUSH
46953: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
46957: LD_INT 109
46959: PPUSH
46960: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
46964: LD_INT 110
46966: PPUSH
46967: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
46971: LD_INT 111
46973: PPUSH
46974: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
46978: LD_INT 200
46980: PPUSH
46981: CALL_OW 427
// end ;
46985: END
// every 10 trigger skirmish do var i ;
46986: LD_EXP 45
46990: IFFALSE 47089
46992: GO 46994
46994: DISABLE
46995: LD_INT 0
46997: PPUSH
// begin enable ;
46998: ENABLE
// if not mc_bases then
46999: LD_EXP 46
47003: NOT
47004: IFFALSE 47008
// exit ;
47006: GO 47089
// for i = 1 to mc_bases do
47008: LD_ADDR_VAR 0 1
47012: PUSH
47013: DOUBLE
47014: LD_INT 1
47016: DEC
47017: ST_TO_ADDR
47018: LD_EXP 46
47022: PUSH
47023: FOR_TO
47024: IFFALSE 47087
// if mc_mines [ i ] and mc_miners [ i ] then
47026: LD_EXP 56
47030: PUSH
47031: LD_VAR 0 1
47035: ARRAY
47036: PUSH
47037: LD_EXP 57
47041: PUSH
47042: LD_VAR 0 1
47046: ARRAY
47047: AND
47048: IFFALSE 47085
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47050: LD_EXP 57
47054: PUSH
47055: LD_VAR 0 1
47059: ARRAY
47060: PUSH
47061: LD_INT 1
47063: ARRAY
47064: PPUSH
47065: CALL_OW 255
47069: PPUSH
47070: LD_EXP 56
47074: PUSH
47075: LD_VAR 0 1
47079: ARRAY
47080: PPUSH
47081: CALL 33404 0 2
47085: GO 47023
47087: POP
47088: POP
// end ;
47089: PPOPN 1
47091: END
// on SailEvent ( event ) do begin if event = 101 then
47092: LD_VAR 0 1
47096: PUSH
47097: LD_INT 101
47099: EQUAL
47100: IFFALSE 47106
// MC_RepairBuildings ( ) ;
47102: CALL 48110 0 0
// if event = 102 then
47106: LD_VAR 0 1
47110: PUSH
47111: LD_INT 102
47113: EQUAL
47114: IFFALSE 47120
// MC_Heal ( ) ;
47116: CALL 48504 0 0
// if event = 103 then
47120: LD_VAR 0 1
47124: PUSH
47125: LD_INT 103
47127: EQUAL
47128: IFFALSE 47134
// MC_Build ( ) ;
47130: CALL 48889 0 0
// if event = 104 then
47134: LD_VAR 0 1
47138: PUSH
47139: LD_INT 104
47141: EQUAL
47142: IFFALSE 47148
// MC_TurretWeapon ( ) ;
47144: CALL 49657 0 0
// if event = 105 then
47148: LD_VAR 0 1
47152: PUSH
47153: LD_INT 105
47155: EQUAL
47156: IFFALSE 47162
// MC_TurretCrew ( ) ;
47158: CALL 49976 0 0
// if event = 106 then
47162: LD_VAR 0 1
47166: PUSH
47167: LD_INT 106
47169: EQUAL
47170: IFFALSE 47176
// MC_PlantMines ( ) ;
47172: CALL 50769 0 0
// if event = 107 then
47176: LD_VAR 0 1
47180: PUSH
47181: LD_INT 107
47183: EQUAL
47184: IFFALSE 47190
// MC_CollectCrates ( ) ;
47186: CALL 51601 0 0
// if event = 108 then
47190: LD_VAR 0 1
47194: PUSH
47195: LD_INT 108
47197: EQUAL
47198: IFFALSE 47204
// MC_LinkRemoteControl ( ) ;
47200: CALL 52398 0 0
// if event = 109 then
47204: LD_VAR 0 1
47208: PUSH
47209: LD_INT 109
47211: EQUAL
47212: IFFALSE 47218
// MC_ProduceVehicle ( ) ;
47214: CALL 52567 0 0
// if event = 110 then
47218: LD_VAR 0 1
47222: PUSH
47223: LD_INT 110
47225: EQUAL
47226: IFFALSE 47232
// MC_SendAttack ( ) ;
47228: CALL 52955 0 0
// if event = 111 then
47232: LD_VAR 0 1
47236: PUSH
47237: LD_INT 111
47239: EQUAL
47240: IFFALSE 47246
// MC_Defend ( ) ;
47242: CALL 53063 0 0
// if event = 200 then
47246: LD_VAR 0 1
47250: PUSH
47251: LD_INT 200
47253: EQUAL
47254: IFFALSE 47260
// MC_Idle ( ) ;
47256: CALL 53998 0 0
// end ;
47260: PPOPN 1
47262: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47263: LD_INT 0
47265: PPUSH
47266: PPUSH
// if not mc_bases [ base ] or not tag then
47267: LD_EXP 46
47271: PUSH
47272: LD_VAR 0 1
47276: ARRAY
47277: NOT
47278: PUSH
47279: LD_VAR 0 2
47283: NOT
47284: OR
47285: IFFALSE 47289
// exit ;
47287: GO 47341
// for i in mc_bases [ base ] do
47289: LD_ADDR_VAR 0 4
47293: PUSH
47294: LD_EXP 46
47298: PUSH
47299: LD_VAR 0 1
47303: ARRAY
47304: PUSH
47305: FOR_IN
47306: IFFALSE 47339
// if GetTag ( i ) = tag then
47308: LD_VAR 0 4
47312: PPUSH
47313: CALL_OW 110
47317: PUSH
47318: LD_VAR 0 2
47322: EQUAL
47323: IFFALSE 47337
// SetTag ( i , 0 ) ;
47325: LD_VAR 0 4
47329: PPUSH
47330: LD_INT 0
47332: PPUSH
47333: CALL_OW 109
47337: GO 47305
47339: POP
47340: POP
// end ;
47341: LD_VAR 0 3
47345: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47346: LD_INT 0
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
// if not mc_bases then
47352: LD_EXP 46
47356: NOT
47357: IFFALSE 47361
// exit ;
47359: GO 47559
// for i = 1 to mc_bases do
47361: LD_ADDR_VAR 0 2
47365: PUSH
47366: DOUBLE
47367: LD_INT 1
47369: DEC
47370: ST_TO_ADDR
47371: LD_EXP 46
47375: PUSH
47376: FOR_TO
47377: IFFALSE 47544
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47379: LD_ADDR_VAR 0 4
47383: PUSH
47384: LD_EXP 46
47388: PUSH
47389: LD_VAR 0 2
47393: ARRAY
47394: PPUSH
47395: LD_INT 21
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: LD_INT 24
47410: PUSH
47411: LD_INT 1000
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PPUSH
47426: CALL_OW 72
47430: ST_TO_ADDR
// if not tmp then
47431: LD_VAR 0 4
47435: NOT
47436: IFFALSE 47462
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47438: LD_ADDR_EXP 47
47442: PUSH
47443: LD_EXP 47
47447: PPUSH
47448: LD_VAR 0 2
47452: PPUSH
47453: EMPTY
47454: PPUSH
47455: CALL_OW 1
47459: ST_TO_ADDR
// continue ;
47460: GO 47376
// end ; for j in tmp do
47462: LD_ADDR_VAR 0 3
47466: PUSH
47467: LD_VAR 0 4
47471: PUSH
47472: FOR_IN
47473: IFFALSE 47540
// if not j in mc_building_need_repair [ i ] then
47475: LD_VAR 0 3
47479: PUSH
47480: LD_EXP 47
47484: PUSH
47485: LD_VAR 0 2
47489: ARRAY
47490: IN
47491: NOT
47492: IFFALSE 47538
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
47494: LD_ADDR_EXP 47
47498: PUSH
47499: LD_EXP 47
47503: PPUSH
47504: LD_VAR 0 2
47508: PUSH
47509: LD_EXP 47
47513: PUSH
47514: LD_VAR 0 2
47518: ARRAY
47519: PUSH
47520: LD_INT 1
47522: PLUS
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PPUSH
47528: LD_VAR 0 3
47532: PPUSH
47533: CALL 3175 0 3
47537: ST_TO_ADDR
47538: GO 47472
47540: POP
47541: POP
// end ;
47542: GO 47376
47544: POP
47545: POP
// if mc_building_need_repair then
47546: LD_EXP 47
47550: IFFALSE 47559
// RaiseSailEvent ( 101 ) ;
47552: LD_INT 101
47554: PPUSH
47555: CALL_OW 427
// end ;
47559: LD_VAR 0 1
47563: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47564: LD_INT 0
47566: PPUSH
47567: PPUSH
47568: PPUSH
47569: PPUSH
47570: PPUSH
47571: PPUSH
47572: PPUSH
// if not mc_bases then
47573: LD_EXP 46
47577: NOT
47578: IFFALSE 47582
// exit ;
47580: GO 48105
// for i = 1 to mc_bases do
47582: LD_ADDR_VAR 0 2
47586: PUSH
47587: DOUBLE
47588: LD_INT 1
47590: DEC
47591: ST_TO_ADDR
47592: LD_EXP 46
47596: PUSH
47597: FOR_TO
47598: IFFALSE 48096
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
47600: LD_ADDR_VAR 0 5
47604: PUSH
47605: LD_EXP 46
47609: PUSH
47610: LD_VAR 0 2
47614: ARRAY
47615: PPUSH
47616: LD_INT 21
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 54
47634: PUSH
47635: EMPTY
47636: LIST
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 24
47647: PUSH
47648: LD_INT 700
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PPUSH
47668: CALL_OW 72
47672: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
47673: LD_ADDR_VAR 0 6
47677: PUSH
47678: LD_EXP 46
47682: PUSH
47683: LD_VAR 0 2
47687: ARRAY
47688: PPUSH
47689: LD_INT 21
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: LD_INT 54
47707: PUSH
47708: EMPTY
47709: LIST
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 3
47717: PUSH
47718: LD_INT 24
47720: PUSH
47721: LD_INT 250
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PPUSH
47741: CALL_OW 72
47745: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
47746: LD_ADDR_VAR 0 7
47750: PUSH
47751: LD_VAR 0 5
47755: PUSH
47756: LD_VAR 0 6
47760: DIFF
47761: ST_TO_ADDR
// if not need_heal_1 then
47762: LD_VAR 0 6
47766: NOT
47767: IFFALSE 47800
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
47769: LD_ADDR_EXP 49
47773: PUSH
47774: LD_EXP 49
47778: PPUSH
47779: LD_VAR 0 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PPUSH
47791: EMPTY
47792: PPUSH
47793: CALL 3175 0 3
47797: ST_TO_ADDR
47798: GO 47832
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
47800: LD_ADDR_EXP 49
47804: PUSH
47805: LD_EXP 49
47809: PPUSH
47810: LD_VAR 0 2
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PPUSH
47822: LD_VAR 0 6
47826: PPUSH
47827: CALL 3175 0 3
47831: ST_TO_ADDR
// if not need_heal_2 then
47832: LD_VAR 0 7
47836: NOT
47837: IFFALSE 47870
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
47839: LD_ADDR_EXP 49
47843: PUSH
47844: LD_EXP 49
47848: PPUSH
47849: LD_VAR 0 2
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PPUSH
47861: EMPTY
47862: PPUSH
47863: CALL 3175 0 3
47867: ST_TO_ADDR
47868: GO 47902
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
47870: LD_ADDR_EXP 49
47874: PUSH
47875: LD_EXP 49
47879: PPUSH
47880: LD_VAR 0 2
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PPUSH
47892: LD_VAR 0 7
47896: PPUSH
47897: CALL 3175 0 3
47901: ST_TO_ADDR
// if need_heal_2 then
47902: LD_VAR 0 7
47906: IFFALSE 48078
// for j in need_heal_2 do
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_VAR 0 7
47917: PUSH
47918: FOR_IN
47919: IFFALSE 48076
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
47921: LD_ADDR_VAR 0 5
47925: PUSH
47926: LD_EXP 46
47930: PUSH
47931: LD_VAR 0 2
47935: ARRAY
47936: PPUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 30
47942: PUSH
47943: LD_INT 6
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 30
47952: PUSH
47953: LD_INT 7
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 30
47962: PUSH
47963: LD_INT 8
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 30
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 30
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 25
47992: PUSH
47993: LD_INT 4
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: PPUSH
48009: CALL_OW 72
48013: ST_TO_ADDR
// if tmp then
48014: LD_VAR 0 5
48018: IFFALSE 48074
// begin k := NearestUnitToUnit ( tmp , j ) ;
48020: LD_ADDR_VAR 0 4
48024: PUSH
48025: LD_VAR 0 5
48029: PPUSH
48030: LD_VAR 0 3
48034: PPUSH
48035: CALL_OW 74
48039: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48040: LD_VAR 0 3
48044: PPUSH
48045: LD_VAR 0 4
48049: PPUSH
48050: CALL_OW 296
48054: PUSH
48055: LD_INT 7
48057: GREATER
48058: IFFALSE 48074
// ComMoveUnit ( j , k ) ;
48060: LD_VAR 0 3
48064: PPUSH
48065: LD_VAR 0 4
48069: PPUSH
48070: CALL_OW 112
// end ; end ;
48074: GO 47918
48076: POP
48077: POP
// if not need_heal_1 and not need_heal_2 then
48078: LD_VAR 0 6
48082: NOT
48083: PUSH
48084: LD_VAR 0 7
48088: NOT
48089: AND
48090: IFFALSE 48094
// continue ;
48092: GO 47597
// end ;
48094: GO 47597
48096: POP
48097: POP
// RaiseSailEvent ( 102 ) ;
48098: LD_INT 102
48100: PPUSH
48101: CALL_OW 427
// end ;
48105: LD_VAR 0 1
48109: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48110: LD_INT 0
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
// if not mc_bases then
48117: LD_EXP 46
48121: NOT
48122: IFFALSE 48126
// exit ;
48124: GO 48499
// for i = 1 to mc_bases do
48126: LD_ADDR_VAR 0 2
48130: PUSH
48131: DOUBLE
48132: LD_INT 1
48134: DEC
48135: ST_TO_ADDR
48136: LD_EXP 46
48140: PUSH
48141: FOR_TO
48142: IFFALSE 48497
// begin if not mc_building_need_repair [ i ] then
48144: LD_EXP 47
48148: PUSH
48149: LD_VAR 0 2
48153: ARRAY
48154: NOT
48155: IFFALSE 48193
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48157: LD_ADDR_EXP 48
48161: PUSH
48162: LD_EXP 48
48166: PPUSH
48167: LD_VAR 0 2
48171: PPUSH
48172: EMPTY
48173: PPUSH
48174: CALL_OW 1
48178: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48179: LD_VAR 0 2
48183: PPUSH
48184: LD_INT 101
48186: PPUSH
48187: CALL 47263 0 2
// continue ;
48191: GO 48141
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48193: LD_ADDR_EXP 52
48197: PUSH
48198: LD_EXP 52
48202: PPUSH
48203: LD_VAR 0 2
48207: PPUSH
48208: EMPTY
48209: PPUSH
48210: CALL_OW 1
48214: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48215: LD_VAR 0 2
48219: PPUSH
48220: LD_INT 103
48222: PPUSH
48223: CALL 47263 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48227: LD_ADDR_VAR 0 5
48231: PUSH
48232: LD_EXP 46
48236: PUSH
48237: LD_VAR 0 2
48241: ARRAY
48242: PPUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 25
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 25
48258: PUSH
48259: LD_INT 16
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: PUSH
48271: EMPTY
48272: LIST
48273: PPUSH
48274: CALL_OW 72
48278: ST_TO_ADDR
// if not tmp then
48279: LD_VAR 0 5
48283: NOT
48284: IFFALSE 48288
// continue ;
48286: GO 48141
// for j in tmp do
48288: LD_ADDR_VAR 0 3
48292: PUSH
48293: LD_VAR 0 5
48297: PUSH
48298: FOR_IN
48299: IFFALSE 48493
// begin if mc_need_heal [ i ] then
48301: LD_EXP 49
48305: PUSH
48306: LD_VAR 0 2
48310: ARRAY
48311: IFFALSE 48359
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48313: LD_VAR 0 3
48317: PUSH
48318: LD_EXP 49
48322: PUSH
48323: LD_VAR 0 2
48327: ARRAY
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: IN
48333: PUSH
48334: LD_VAR 0 3
48338: PUSH
48339: LD_EXP 49
48343: PUSH
48344: LD_VAR 0 2
48348: ARRAY
48349: PUSH
48350: LD_INT 2
48352: ARRAY
48353: IN
48354: OR
48355: IFFALSE 48359
// continue ;
48357: GO 48298
// if IsInUnit ( j ) then
48359: LD_VAR 0 3
48363: PPUSH
48364: CALL_OW 310
48368: IFFALSE 48379
// ComExitBuilding ( j ) ;
48370: LD_VAR 0 3
48374: PPUSH
48375: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48379: LD_VAR 0 3
48383: PUSH
48384: LD_EXP 48
48388: PUSH
48389: LD_VAR 0 2
48393: ARRAY
48394: IN
48395: NOT
48396: IFFALSE 48454
// begin SetTag ( j , 101 ) ;
48398: LD_VAR 0 3
48402: PPUSH
48403: LD_INT 101
48405: PPUSH
48406: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48410: LD_ADDR_EXP 48
48414: PUSH
48415: LD_EXP 48
48419: PPUSH
48420: LD_VAR 0 2
48424: PUSH
48425: LD_EXP 48
48429: PUSH
48430: LD_VAR 0 2
48434: ARRAY
48435: PUSH
48436: LD_INT 1
48438: PLUS
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PPUSH
48444: LD_VAR 0 3
48448: PPUSH
48449: CALL 3175 0 3
48453: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48454: LD_INT 3
48456: PPUSH
48457: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48461: LD_VAR 0 3
48465: PPUSH
48466: LD_EXP 47
48470: PUSH
48471: LD_VAR 0 2
48475: ARRAY
48476: PPUSH
48477: LD_VAR 0 3
48481: PPUSH
48482: CALL_OW 74
48486: PPUSH
48487: CALL_OW 130
// end ;
48491: GO 48298
48493: POP
48494: POP
// end ;
48495: GO 48141
48497: POP
48498: POP
// end ;
48499: LD_VAR 0 1
48503: RET
// export function MC_Heal ; var i , j , tmp ; begin
48504: LD_INT 0
48506: PPUSH
48507: PPUSH
48508: PPUSH
48509: PPUSH
// if not mc_bases then
48510: LD_EXP 46
48514: NOT
48515: IFFALSE 48519
// exit ;
48517: GO 48884
// for i = 1 to mc_bases do
48519: LD_ADDR_VAR 0 2
48523: PUSH
48524: DOUBLE
48525: LD_INT 1
48527: DEC
48528: ST_TO_ADDR
48529: LD_EXP 46
48533: PUSH
48534: FOR_TO
48535: IFFALSE 48882
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48537: LD_EXP 49
48541: PUSH
48542: LD_VAR 0 2
48546: ARRAY
48547: PUSH
48548: LD_INT 1
48550: ARRAY
48551: NOT
48552: PUSH
48553: LD_EXP 49
48557: PUSH
48558: LD_VAR 0 2
48562: ARRAY
48563: PUSH
48564: LD_INT 2
48566: ARRAY
48567: NOT
48568: AND
48569: IFFALSE 48607
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48571: LD_ADDR_EXP 50
48575: PUSH
48576: LD_EXP 50
48580: PPUSH
48581: LD_VAR 0 2
48585: PPUSH
48586: EMPTY
48587: PPUSH
48588: CALL_OW 1
48592: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
48593: LD_VAR 0 2
48597: PPUSH
48598: LD_INT 102
48600: PPUSH
48601: CALL 47263 0 2
// continue ;
48605: GO 48534
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
48607: LD_ADDR_VAR 0 4
48611: PUSH
48612: LD_EXP 46
48616: PUSH
48617: LD_VAR 0 2
48621: ARRAY
48622: PPUSH
48623: LD_INT 25
48625: PUSH
48626: LD_INT 4
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PPUSH
48633: CALL_OW 72
48637: ST_TO_ADDR
// if not tmp then
48638: LD_VAR 0 4
48642: NOT
48643: IFFALSE 48647
// continue ;
48645: GO 48534
// for j in tmp do
48647: LD_ADDR_VAR 0 3
48651: PUSH
48652: LD_VAR 0 4
48656: PUSH
48657: FOR_IN
48658: IFFALSE 48878
// begin if IsInUnit ( j ) then
48660: LD_VAR 0 3
48664: PPUSH
48665: CALL_OW 310
48669: IFFALSE 48680
// ComExitBuilding ( j ) ;
48671: LD_VAR 0 3
48675: PPUSH
48676: CALL_OW 122
// if not j in mc_healers [ i ] then
48680: LD_VAR 0 3
48684: PUSH
48685: LD_EXP 50
48689: PUSH
48690: LD_VAR 0 2
48694: ARRAY
48695: IN
48696: NOT
48697: IFFALSE 48743
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
48699: LD_ADDR_EXP 50
48703: PUSH
48704: LD_EXP 50
48708: PPUSH
48709: LD_VAR 0 2
48713: PUSH
48714: LD_EXP 50
48718: PUSH
48719: LD_VAR 0 2
48723: ARRAY
48724: PUSH
48725: LD_INT 1
48727: PLUS
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PPUSH
48733: LD_VAR 0 3
48737: PPUSH
48738: CALL 3175 0 3
48742: ST_TO_ADDR
// if not GetTag ( j ) then
48743: LD_VAR 0 3
48747: PPUSH
48748: CALL_OW 110
48752: NOT
48753: IFFALSE 48767
// SetTag ( j , 102 ) ;
48755: LD_VAR 0 3
48759: PPUSH
48760: LD_INT 102
48762: PPUSH
48763: CALL_OW 109
// Wait ( 3 ) ;
48767: LD_INT 3
48769: PPUSH
48770: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
48774: LD_EXP 49
48778: PUSH
48779: LD_VAR 0 2
48783: ARRAY
48784: PUSH
48785: LD_INT 1
48787: ARRAY
48788: IFFALSE 48820
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
48790: LD_VAR 0 3
48794: PPUSH
48795: LD_EXP 49
48799: PUSH
48800: LD_VAR 0 2
48804: ARRAY
48805: PUSH
48806: LD_INT 1
48808: ARRAY
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PPUSH
48814: CALL_OW 128
48818: GO 48876
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
48820: LD_VAR 0 3
48824: PPUSH
48825: CALL_OW 314
48829: NOT
48830: PUSH
48831: LD_EXP 49
48835: PUSH
48836: LD_VAR 0 2
48840: ARRAY
48841: PUSH
48842: LD_INT 2
48844: ARRAY
48845: AND
48846: IFFALSE 48876
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
48848: LD_VAR 0 3
48852: PPUSH
48853: LD_EXP 49
48857: PUSH
48858: LD_VAR 0 2
48862: ARRAY
48863: PUSH
48864: LD_INT 2
48866: ARRAY
48867: PUSH
48868: LD_INT 1
48870: ARRAY
48871: PPUSH
48872: CALL_OW 128
// end ;
48876: GO 48657
48878: POP
48879: POP
// end ;
48880: GO 48534
48882: POP
48883: POP
// end ;
48884: LD_VAR 0 1
48888: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
48889: LD_INT 0
48891: PPUSH
48892: PPUSH
48893: PPUSH
48894: PPUSH
// if not mc_bases then
48895: LD_EXP 46
48899: NOT
48900: IFFALSE 48904
// exit ;
48902: GO 49652
// for i = 1 to mc_bases do
48904: LD_ADDR_VAR 0 2
48908: PUSH
48909: DOUBLE
48910: LD_INT 1
48912: DEC
48913: ST_TO_ADDR
48914: LD_EXP 46
48918: PUSH
48919: FOR_TO
48920: IFFALSE 49650
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
48922: LD_EXP 51
48926: PUSH
48927: LD_VAR 0 2
48931: ARRAY
48932: NOT
48933: PUSH
48934: LD_EXP 53
48938: PUSH
48939: LD_VAR 0 2
48943: ARRAY
48944: NOT
48945: AND
48946: IFFALSE 48984
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
48948: LD_ADDR_EXP 52
48952: PUSH
48953: LD_EXP 52
48957: PPUSH
48958: LD_VAR 0 2
48962: PPUSH
48963: EMPTY
48964: PPUSH
48965: CALL_OW 1
48969: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48970: LD_VAR 0 2
48974: PPUSH
48975: LD_INT 103
48977: PPUSH
48978: CALL 47263 0 2
// continue ;
48982: GO 48919
// end ; if mc_construct_list [ i ] then
48984: LD_EXP 53
48988: PUSH
48989: LD_VAR 0 2
48993: ARRAY
48994: IFFALSE 49199
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
48996: LD_ADDR_VAR 0 4
49000: PUSH
49001: LD_EXP 46
49005: PUSH
49006: LD_VAR 0 2
49010: ARRAY
49011: PPUSH
49012: LD_INT 25
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PPUSH
49022: CALL_OW 72
49026: PUSH
49027: LD_EXP 48
49031: PUSH
49032: LD_VAR 0 2
49036: ARRAY
49037: DIFF
49038: ST_TO_ADDR
// if not tmp then
49039: LD_VAR 0 4
49043: NOT
49044: IFFALSE 49048
// continue ;
49046: GO 48919
// for j in tmp do
49048: LD_ADDR_VAR 0 3
49052: PUSH
49053: LD_VAR 0 4
49057: PUSH
49058: FOR_IN
49059: IFFALSE 49195
// begin if not mc_builders [ i ] then
49061: LD_EXP 52
49065: PUSH
49066: LD_VAR 0 2
49070: ARRAY
49071: NOT
49072: IFFALSE 49130
// begin SetTag ( j , 103 ) ;
49074: LD_VAR 0 3
49078: PPUSH
49079: LD_INT 103
49081: PPUSH
49082: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49086: LD_ADDR_EXP 52
49090: PUSH
49091: LD_EXP 52
49095: PPUSH
49096: LD_VAR 0 2
49100: PUSH
49101: LD_EXP 52
49105: PUSH
49106: LD_VAR 0 2
49110: ARRAY
49111: PUSH
49112: LD_INT 1
49114: PLUS
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PPUSH
49120: LD_VAR 0 3
49124: PPUSH
49125: CALL 3175 0 3
49129: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49130: LD_VAR 0 3
49134: PPUSH
49135: CALL_OW 310
49139: IFFALSE 49150
// ComExitBuilding ( j ) ;
49141: LD_VAR 0 3
49145: PPUSH
49146: CALL_OW 122
// wait ( 3 ) ;
49150: LD_INT 3
49152: PPUSH
49153: CALL_OW 67
// if not HasTask ( j ) then
49157: LD_VAR 0 3
49161: PPUSH
49162: CALL_OW 314
49166: NOT
49167: IFFALSE 49193
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49169: LD_VAR 0 3
49173: PPUSH
49174: LD_EXP 53
49178: PUSH
49179: LD_VAR 0 2
49183: ARRAY
49184: PUSH
49185: LD_INT 1
49187: ARRAY
49188: PPUSH
49189: CALL 5575 0 2
// end ;
49193: GO 49058
49195: POP
49196: POP
// end else
49197: GO 49648
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49199: LD_EXP 51
49203: PUSH
49204: LD_VAR 0 2
49208: ARRAY
49209: PUSH
49210: LD_EXP 46
49214: PUSH
49215: LD_VAR 0 2
49219: ARRAY
49220: PPUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 30
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 30
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: PPUSH
49249: CALL_OW 72
49253: AND
49254: IFFALSE 49648
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49256: LD_EXP 46
49260: PUSH
49261: LD_VAR 0 2
49265: ARRAY
49266: PPUSH
49267: LD_INT 2
49269: PUSH
49270: LD_INT 30
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 30
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: PPUSH
49295: CALL_OW 72
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PPUSH
49304: LD_EXP 51
49308: PUSH
49309: LD_VAR 0 2
49313: ARRAY
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PUSH
49319: LD_INT 1
49321: ARRAY
49322: PPUSH
49323: LD_EXP 51
49327: PUSH
49328: LD_VAR 0 2
49332: ARRAY
49333: PUSH
49334: LD_INT 1
49336: ARRAY
49337: PUSH
49338: LD_INT 2
49340: ARRAY
49341: PPUSH
49342: LD_EXP 51
49346: PUSH
49347: LD_VAR 0 2
49351: ARRAY
49352: PUSH
49353: LD_INT 1
49355: ARRAY
49356: PUSH
49357: LD_INT 3
49359: ARRAY
49360: PPUSH
49361: LD_EXP 51
49365: PUSH
49366: LD_VAR 0 2
49370: ARRAY
49371: PUSH
49372: LD_INT 1
49374: ARRAY
49375: PUSH
49376: LD_INT 4
49378: ARRAY
49379: PPUSH
49380: CALL 8731 0 5
49384: IFFALSE 49648
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49386: LD_ADDR_VAR 0 4
49390: PUSH
49391: LD_EXP 46
49395: PUSH
49396: LD_VAR 0 2
49400: ARRAY
49401: PPUSH
49402: LD_INT 25
49404: PUSH
49405: LD_INT 2
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PPUSH
49412: CALL_OW 72
49416: PUSH
49417: LD_EXP 48
49421: PUSH
49422: LD_VAR 0 2
49426: ARRAY
49427: DIFF
49428: ST_TO_ADDR
// if not tmp then
49429: LD_VAR 0 4
49433: NOT
49434: IFFALSE 49438
// continue ;
49436: GO 48919
// for j in tmp do
49438: LD_ADDR_VAR 0 3
49442: PUSH
49443: LD_VAR 0 4
49447: PUSH
49448: FOR_IN
49449: IFFALSE 49646
// begin if not mc_builders [ i ] then
49451: LD_EXP 52
49455: PUSH
49456: LD_VAR 0 2
49460: ARRAY
49461: NOT
49462: IFFALSE 49520
// begin SetTag ( j , 103 ) ;
49464: LD_VAR 0 3
49468: PPUSH
49469: LD_INT 103
49471: PPUSH
49472: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49476: LD_ADDR_EXP 52
49480: PUSH
49481: LD_EXP 52
49485: PPUSH
49486: LD_VAR 0 2
49490: PUSH
49491: LD_EXP 52
49495: PUSH
49496: LD_VAR 0 2
49500: ARRAY
49501: PUSH
49502: LD_INT 1
49504: PLUS
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PPUSH
49510: LD_VAR 0 3
49514: PPUSH
49515: CALL 3175 0 3
49519: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49520: LD_VAR 0 3
49524: PPUSH
49525: CALL_OW 310
49529: IFFALSE 49540
// ComExitBuilding ( j ) ;
49531: LD_VAR 0 3
49535: PPUSH
49536: CALL_OW 122
// wait ( 3 ) ;
49540: LD_INT 3
49542: PPUSH
49543: CALL_OW 67
// if not HasTask ( j ) then
49547: LD_VAR 0 3
49551: PPUSH
49552: CALL_OW 314
49556: NOT
49557: IFFALSE 49644
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49559: LD_VAR 0 3
49563: PPUSH
49564: LD_EXP 51
49568: PUSH
49569: LD_VAR 0 2
49573: ARRAY
49574: PUSH
49575: LD_INT 1
49577: ARRAY
49578: PUSH
49579: LD_INT 1
49581: ARRAY
49582: PPUSH
49583: LD_EXP 51
49587: PUSH
49588: LD_VAR 0 2
49592: ARRAY
49593: PUSH
49594: LD_INT 1
49596: ARRAY
49597: PUSH
49598: LD_INT 2
49600: ARRAY
49601: PPUSH
49602: LD_EXP 51
49606: PUSH
49607: LD_VAR 0 2
49611: ARRAY
49612: PUSH
49613: LD_INT 1
49615: ARRAY
49616: PUSH
49617: LD_INT 3
49619: ARRAY
49620: PPUSH
49621: LD_EXP 51
49625: PUSH
49626: LD_VAR 0 2
49630: ARRAY
49631: PUSH
49632: LD_INT 1
49634: ARRAY
49635: PUSH
49636: LD_INT 4
49638: ARRAY
49639: PPUSH
49640: CALL_OW 145
// end ;
49644: GO 49448
49646: POP
49647: POP
// end ; end ;
49648: GO 48919
49650: POP
49651: POP
// end ;
49652: LD_VAR 0 1
49656: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
49657: LD_INT 0
49659: PPUSH
49660: PPUSH
49661: PPUSH
49662: PPUSH
49663: PPUSH
49664: PPUSH
49665: PPUSH
// if not mc_bases then
49666: LD_EXP 46
49670: NOT
49671: IFFALSE 49675
// exit ;
49673: GO 49971
// for i = 1 to mc_bases do
49675: LD_ADDR_VAR 0 2
49679: PUSH
49680: DOUBLE
49681: LD_INT 1
49683: DEC
49684: ST_TO_ADDR
49685: LD_EXP 46
49689: PUSH
49690: FOR_TO
49691: IFFALSE 49969
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
49693: LD_EXP 54
49697: PUSH
49698: LD_VAR 0 2
49702: ARRAY
49703: NOT
49704: PUSH
49705: LD_EXP 46
49709: PUSH
49710: LD_VAR 0 2
49714: ARRAY
49715: PPUSH
49716: LD_INT 30
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PPUSH
49726: CALL_OW 72
49730: NOT
49731: OR
49732: IFFALSE 49736
// continue ;
49734: GO 49690
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
49736: LD_EXP 54
49740: PUSH
49741: LD_VAR 0 2
49745: ARRAY
49746: PUSH
49747: LD_INT 1
49749: ARRAY
49750: PPUSH
49751: CALL_OW 269
49755: IFFALSE 49821
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
49757: LD_ADDR_VAR 0 4
49761: PUSH
49762: LD_EXP 54
49766: PUSH
49767: LD_VAR 0 2
49771: ARRAY
49772: PPUSH
49773: LD_INT 1
49775: PPUSH
49776: CALL_OW 3
49780: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
49781: LD_ADDR_EXP 54
49785: PUSH
49786: LD_EXP 54
49790: PPUSH
49791: LD_VAR 0 2
49795: PPUSH
49796: LD_VAR 0 4
49800: PPUSH
49801: CALL_OW 1
49805: ST_TO_ADDR
// if not mc_turret_list [ i ] then
49806: LD_EXP 54
49810: PUSH
49811: LD_VAR 0 2
49815: ARRAY
49816: NOT
49817: IFFALSE 49821
// continue ;
49819: GO 49690
// end ; busy := false ;
49821: LD_ADDR_VAR 0 6
49825: PUSH
49826: LD_INT 0
49828: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
49829: LD_ADDR_VAR 0 4
49833: PUSH
49834: LD_EXP 46
49838: PUSH
49839: LD_VAR 0 2
49843: ARRAY
49844: PPUSH
49845: LD_INT 30
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PPUSH
49855: CALL_OW 72
49859: ST_TO_ADDR
// for j in tmp do
49860: LD_ADDR_VAR 0 3
49864: PUSH
49865: LD_VAR 0 4
49869: PUSH
49870: FOR_IN
49871: IFFALSE 49899
// if not BuildingStatus ( j ) = bs_idle then
49873: LD_VAR 0 3
49877: PPUSH
49878: CALL_OW 461
49882: PUSH
49883: LD_INT 2
49885: EQUAL
49886: NOT
49887: IFFALSE 49897
// busy := true ;
49889: LD_ADDR_VAR 0 6
49893: PUSH
49894: LD_INT 1
49896: ST_TO_ADDR
49897: GO 49870
49899: POP
49900: POP
// if busy then
49901: LD_VAR 0 6
49905: IFFALSE 49909
// continue ;
49907: GO 49690
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
49909: LD_ADDR_VAR 0 7
49913: PUSH
49914: LD_EXP 54
49918: PUSH
49919: LD_VAR 0 2
49923: ARRAY
49924: PUSH
49925: LD_INT 1
49927: ARRAY
49928: PPUSH
49929: CALL 7136 0 1
49933: ST_TO_ADDR
// if not weapon then
49934: LD_VAR 0 7
49938: NOT
49939: IFFALSE 49943
// continue ;
49941: GO 49690
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
49943: LD_EXP 54
49947: PUSH
49948: LD_VAR 0 2
49952: ARRAY
49953: PUSH
49954: LD_INT 1
49956: ARRAY
49957: PPUSH
49958: LD_VAR 0 7
49962: PPUSH
49963: CALL_OW 148
// end ;
49967: GO 49690
49969: POP
49970: POP
// end ;
49971: LD_VAR 0 1
49975: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
49976: LD_INT 0
49978: PPUSH
49979: PPUSH
49980: PPUSH
49981: PPUSH
49982: PPUSH
49983: PPUSH
49984: PPUSH
// if not mc_bases then
49985: LD_EXP 46
49989: NOT
49990: IFFALSE 49994
// exit ;
49992: GO 50764
// for i = 1 to mc_bases do
49994: LD_ADDR_VAR 0 2
49998: PUSH
49999: DOUBLE
50000: LD_INT 1
50002: DEC
50003: ST_TO_ADDR
50004: LD_EXP 46
50008: PUSH
50009: FOR_TO
50010: IFFALSE 50762
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50012: LD_ADDR_VAR 0 7
50016: PUSH
50017: LD_EXP 46
50021: PUSH
50022: LD_VAR 0 2
50026: ARRAY
50027: PPUSH
50028: LD_INT 24
50030: PUSH
50031: LD_INT 375
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: LD_INT 30
50043: PUSH
50044: LD_INT 32
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 30
50053: PUSH
50054: LD_INT 31
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 58
50068: PUSH
50069: EMPTY
50070: LIST
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: LIST
50076: PPUSH
50077: CALL_OW 72
50081: ST_TO_ADDR
// if not x then
50082: LD_VAR 0 7
50086: NOT
50087: IFFALSE 50091
// continue ;
50089: GO 50009
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50091: LD_ADDR_EXP 55
50095: PUSH
50096: LD_EXP 55
50100: PPUSH
50101: LD_VAR 0 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PPUSH
50113: LD_VAR 0 7
50117: PPUSH
50118: CALL 3175 0 3
50122: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50123: LD_EXP 55
50127: PUSH
50128: LD_VAR 0 2
50132: ARRAY
50133: NOT
50134: PUSH
50135: LD_EXP 55
50139: PUSH
50140: LD_VAR 0 2
50144: ARRAY
50145: PUSH
50146: LD_INT 1
50148: ARRAY
50149: NOT
50150: OR
50151: IFFALSE 50155
// continue ;
50153: GO 50009
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50155: LD_EXP 55
50159: PUSH
50160: LD_VAR 0 2
50164: ARRAY
50165: PUSH
50166: LD_INT 1
50168: ARRAY
50169: PUSH
50170: LD_INT 1
50172: ARRAY
50173: PPUSH
50174: CALL_OW 313
50178: PUSH
50179: LD_INT 0
50181: EQUAL
50182: IFFALSE 50760
// if not mc_empty_turret_list [ i ] [ 2 ] then
50184: LD_EXP 55
50188: PUSH
50189: LD_VAR 0 2
50193: ARRAY
50194: PUSH
50195: LD_INT 2
50197: ARRAY
50198: NOT
50199: IFFALSE 50458
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50201: LD_ADDR_VAR 0 6
50205: PUSH
50206: LD_EXP 46
50210: PUSH
50211: LD_VAR 0 2
50215: ARRAY
50216: PUSH
50217: LD_EXP 62
50221: PUSH
50222: LD_VAR 0 2
50226: ARRAY
50227: DIFF
50228: PPUSH
50229: LD_INT 25
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 3
50241: PUSH
50242: LD_INT 54
50244: PUSH
50245: EMPTY
50246: LIST
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PPUSH
50256: CALL_OW 72
50260: ST_TO_ADDR
// if tmp2 then
50261: LD_VAR 0 6
50265: IFFALSE 50307
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50267: LD_ADDR_EXP 55
50271: PUSH
50272: LD_EXP 55
50276: PPUSH
50277: LD_VAR 0 2
50281: PUSH
50282: LD_INT 2
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PPUSH
50289: LD_VAR 0 6
50293: PUSH
50294: LD_INT 1
50296: ARRAY
50297: PPUSH
50298: CALL 3175 0 3
50302: ST_TO_ADDR
// break ;
50303: GO 50762
// end else
50305: GO 50456
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50307: LD_ADDR_VAR 0 5
50311: PUSH
50312: LD_EXP 46
50316: PUSH
50317: LD_VAR 0 2
50321: ARRAY
50322: PPUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 30
50328: PUSH
50329: LD_INT 4
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 30
50338: PUSH
50339: LD_INT 5
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: PPUSH
50351: CALL_OW 72
50355: ST_TO_ADDR
// if not tmp then
50356: LD_VAR 0 5
50360: NOT
50361: IFFALSE 50365
// continue ;
50363: GO 50009
// for j in tmp do
50365: LD_ADDR_VAR 0 3
50369: PUSH
50370: LD_VAR 0 5
50374: PUSH
50375: FOR_IN
50376: IFFALSE 50454
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50378: LD_ADDR_VAR 0 4
50382: PUSH
50383: LD_VAR 0 3
50387: PPUSH
50388: CALL_OW 313
50392: PPUSH
50393: LD_INT 25
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PPUSH
50403: CALL_OW 72
50407: ST_TO_ADDR
// if t then
50408: LD_VAR 0 4
50412: IFFALSE 50452
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50414: LD_ADDR_EXP 55
50418: PUSH
50419: LD_EXP 55
50423: PPUSH
50424: LD_VAR 0 2
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PPUSH
50436: LD_VAR 0 4
50440: PUSH
50441: LD_INT 1
50443: ARRAY
50444: PPUSH
50445: CALL 3175 0 3
50449: ST_TO_ADDR
// break ;
50450: GO 50454
// end ; end ;
50452: GO 50375
50454: POP
50455: POP
// end ; end else
50456: GO 50760
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50458: LD_EXP 55
50462: PUSH
50463: LD_VAR 0 2
50467: ARRAY
50468: PUSH
50469: LD_INT 2
50471: ARRAY
50472: PUSH
50473: LD_INT 1
50475: ARRAY
50476: PPUSH
50477: CALL_OW 301
50481: IFFALSE 50514
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50483: LD_ADDR_EXP 55
50487: PUSH
50488: LD_EXP 55
50492: PPUSH
50493: LD_VAR 0 2
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PPUSH
50505: EMPTY
50506: PPUSH
50507: CALL 3175 0 3
50511: ST_TO_ADDR
// break ;
50512: GO 50762
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
50514: LD_EXP 55
50518: PUSH
50519: LD_VAR 0 2
50523: ARRAY
50524: PUSH
50525: LD_INT 2
50527: ARRAY
50528: PUSH
50529: LD_INT 1
50531: ARRAY
50532: PPUSH
50533: CALL_OW 314
50537: NOT
50538: PUSH
50539: LD_EXP 55
50543: PUSH
50544: LD_VAR 0 2
50548: ARRAY
50549: PUSH
50550: LD_INT 2
50552: ARRAY
50553: PUSH
50554: LD_INT 1
50556: ARRAY
50557: PUSH
50558: LD_EXP 55
50562: PUSH
50563: LD_VAR 0 2
50567: ARRAY
50568: PUSH
50569: LD_INT 1
50571: ARRAY
50572: PUSH
50573: LD_INT 1
50575: ARRAY
50576: PPUSH
50577: CALL_OW 313
50581: IN
50582: NOT
50583: AND
50584: IFFALSE 50760
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50586: LD_EXP 55
50590: PUSH
50591: LD_VAR 0 2
50595: ARRAY
50596: PUSH
50597: LD_INT 2
50599: ARRAY
50600: PUSH
50601: LD_INT 1
50603: ARRAY
50604: PPUSH
50605: CALL_OW 310
50609: IFFALSE 50634
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50611: LD_EXP 55
50615: PUSH
50616: LD_VAR 0 2
50620: ARRAY
50621: PUSH
50622: LD_INT 2
50624: ARRAY
50625: PUSH
50626: LD_INT 1
50628: ARRAY
50629: PPUSH
50630: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
50634: LD_EXP 55
50638: PUSH
50639: LD_VAR 0 2
50643: ARRAY
50644: PUSH
50645: LD_INT 2
50647: ARRAY
50648: PUSH
50649: LD_INT 1
50651: ARRAY
50652: PPUSH
50653: LD_EXP 55
50657: PUSH
50658: LD_VAR 0 2
50662: ARRAY
50663: PUSH
50664: LD_INT 1
50666: ARRAY
50667: PUSH
50668: LD_INT 1
50670: ARRAY
50671: PPUSH
50672: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
50676: LD_INT 35
50678: PPUSH
50679: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
50683: LD_EXP 55
50687: PUSH
50688: LD_VAR 0 2
50692: ARRAY
50693: PUSH
50694: LD_INT 2
50696: ARRAY
50697: NOT
50698: IFFALSE 50702
// break ;
50700: GO 50727
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
50702: LD_EXP 55
50706: PUSH
50707: LD_VAR 0 2
50711: ARRAY
50712: PUSH
50713: LD_INT 2
50715: ARRAY
50716: PUSH
50717: LD_INT 1
50719: ARRAY
50720: PPUSH
50721: CALL_OW 310
50725: IFFALSE 50676
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50727: LD_ADDR_EXP 55
50731: PUSH
50732: LD_EXP 55
50736: PPUSH
50737: LD_VAR 0 2
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PPUSH
50749: EMPTY
50750: PPUSH
50751: CALL 3175 0 3
50755: ST_TO_ADDR
// exit ;
50756: POP
50757: POP
50758: GO 50764
// end ; end ; end ;
50760: GO 50009
50762: POP
50763: POP
// end ;
50764: LD_VAR 0 1
50768: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
50769: LD_INT 0
50771: PPUSH
50772: PPUSH
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
// if not mc_bases then
50777: LD_EXP 46
50781: NOT
50782: IFFALSE 50786
// exit ;
50784: GO 51596
// for i = 1 to mc_bases do
50786: LD_ADDR_VAR 0 2
50790: PUSH
50791: DOUBLE
50792: LD_INT 1
50794: DEC
50795: ST_TO_ADDR
50796: LD_EXP 46
50800: PUSH
50801: FOR_TO
50802: IFFALSE 51594
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
50804: LD_EXP 56
50808: PUSH
50809: LD_VAR 0 2
50813: ARRAY
50814: NOT
50815: PUSH
50816: LD_EXP 56
50820: PUSH
50821: LD_VAR 0 2
50825: ARRAY
50826: PUSH
50827: LD_EXP 57
50831: PUSH
50832: LD_VAR 0 2
50836: ARRAY
50837: EQUAL
50838: OR
50839: IFFALSE 50843
// continue ;
50841: GO 50801
// if mc_miners [ i ] then
50843: LD_EXP 57
50847: PUSH
50848: LD_VAR 0 2
50852: ARRAY
50853: IFFALSE 51281
// begin k := 1 ;
50855: LD_ADDR_VAR 0 4
50859: PUSH
50860: LD_INT 1
50862: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
50863: LD_ADDR_VAR 0 3
50867: PUSH
50868: DOUBLE
50869: LD_EXP 57
50873: PUSH
50874: LD_VAR 0 2
50878: ARRAY
50879: INC
50880: ST_TO_ADDR
50881: LD_INT 1
50883: PUSH
50884: FOR_DOWNTO
50885: IFFALSE 51279
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
50887: LD_EXP 57
50891: PUSH
50892: LD_VAR 0 2
50896: ARRAY
50897: PUSH
50898: LD_VAR 0 3
50902: ARRAY
50903: PPUSH
50904: CALL_OW 301
50908: IFFALSE 50971
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
50910: LD_ADDR_VAR 0 5
50914: PUSH
50915: LD_EXP 57
50919: PUSH
50920: LD_VAR 0 2
50924: ARRAY
50925: PUSH
50926: LD_EXP 57
50930: PUSH
50931: LD_VAR 0 2
50935: ARRAY
50936: PUSH
50937: LD_VAR 0 3
50941: ARRAY
50942: DIFF
50943: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
50944: LD_ADDR_EXP 57
50948: PUSH
50949: LD_EXP 57
50953: PPUSH
50954: LD_VAR 0 2
50958: PPUSH
50959: LD_VAR 0 5
50963: PPUSH
50964: CALL_OW 1
50968: ST_TO_ADDR
// continue ;
50969: GO 50884
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
50971: LD_EXP 57
50975: PUSH
50976: LD_VAR 0 2
50980: ARRAY
50981: PUSH
50982: LD_VAR 0 3
50986: ARRAY
50987: PPUSH
50988: CALL_OW 257
50992: PUSH
50993: LD_INT 1
50995: EQUAL
50996: PUSH
50997: LD_EXP 57
51001: PUSH
51002: LD_VAR 0 2
51006: ARRAY
51007: PUSH
51008: LD_VAR 0 3
51012: ARRAY
51013: PPUSH
51014: CALL_OW 459
51018: NOT
51019: AND
51020: PUSH
51021: LD_EXP 57
51025: PUSH
51026: LD_VAR 0 2
51030: ARRAY
51031: PUSH
51032: LD_VAR 0 3
51036: ARRAY
51037: PPUSH
51038: CALL_OW 255
51042: PPUSH
51043: LD_EXP 56
51047: PUSH
51048: LD_VAR 0 2
51052: ARRAY
51053: PUSH
51054: LD_VAR 0 3
51058: ARRAY
51059: PUSH
51060: LD_INT 1
51062: ARRAY
51063: PPUSH
51064: LD_EXP 56
51068: PUSH
51069: LD_VAR 0 2
51073: ARRAY
51074: PUSH
51075: LD_VAR 0 3
51079: ARRAY
51080: PUSH
51081: LD_INT 2
51083: ARRAY
51084: PPUSH
51085: LD_INT 12
51087: PPUSH
51088: CALL 3669 0 4
51092: PUSH
51093: LD_INT 4
51095: ARRAY
51096: PUSH
51097: LD_INT 0
51099: EQUAL
51100: AND
51101: IFFALSE 51277
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51103: LD_EXP 57
51107: PUSH
51108: LD_VAR 0 2
51112: ARRAY
51113: PUSH
51114: LD_VAR 0 3
51118: ARRAY
51119: PPUSH
51120: CALL_OW 310
51124: IFFALSE 51147
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51126: LD_EXP 57
51130: PUSH
51131: LD_VAR 0 2
51135: ARRAY
51136: PUSH
51137: LD_VAR 0 3
51141: ARRAY
51142: PPUSH
51143: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51147: LD_EXP 57
51151: PUSH
51152: LD_VAR 0 2
51156: ARRAY
51157: PUSH
51158: LD_VAR 0 3
51162: ARRAY
51163: PPUSH
51164: CALL_OW 314
51168: NOT
51169: IFFALSE 51237
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51171: LD_EXP 57
51175: PUSH
51176: LD_VAR 0 2
51180: ARRAY
51181: PUSH
51182: LD_VAR 0 3
51186: ARRAY
51187: PPUSH
51188: LD_EXP 56
51192: PUSH
51193: LD_VAR 0 2
51197: ARRAY
51198: PUSH
51199: LD_VAR 0 4
51203: ARRAY
51204: PUSH
51205: LD_INT 1
51207: ARRAY
51208: PPUSH
51209: LD_EXP 56
51213: PUSH
51214: LD_VAR 0 2
51218: ARRAY
51219: PUSH
51220: LD_VAR 0 4
51224: ARRAY
51225: PUSH
51226: LD_INT 2
51228: ARRAY
51229: PPUSH
51230: LD_INT 0
51232: PPUSH
51233: CALL_OW 193
// k := k + 1 ;
51237: LD_ADDR_VAR 0 4
51241: PUSH
51242: LD_VAR 0 4
51246: PUSH
51247: LD_INT 1
51249: PLUS
51250: ST_TO_ADDR
// if k > mc_mines [ i ] then
51251: LD_VAR 0 4
51255: PUSH
51256: LD_EXP 56
51260: PUSH
51261: LD_VAR 0 2
51265: ARRAY
51266: GREATER
51267: IFFALSE 51277
// k := 1 ;
51269: LD_ADDR_VAR 0 4
51273: PUSH
51274: LD_INT 1
51276: ST_TO_ADDR
// end ; end ;
51277: GO 50884
51279: POP
51280: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51281: LD_ADDR_VAR 0 5
51285: PUSH
51286: LD_EXP 46
51290: PUSH
51291: LD_VAR 0 2
51295: ARRAY
51296: PPUSH
51297: LD_INT 2
51299: PUSH
51300: LD_INT 30
51302: PUSH
51303: LD_INT 4
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 30
51312: PUSH
51313: LD_INT 5
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 30
51322: PUSH
51323: LD_INT 32
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: PPUSH
51336: CALL_OW 72
51340: ST_TO_ADDR
// if not tmp then
51341: LD_VAR 0 5
51345: NOT
51346: IFFALSE 51350
// continue ;
51348: GO 50801
// list := [ ] ;
51350: LD_ADDR_VAR 0 6
51354: PUSH
51355: EMPTY
51356: ST_TO_ADDR
// for j in tmp do
51357: LD_ADDR_VAR 0 3
51361: PUSH
51362: LD_VAR 0 5
51366: PUSH
51367: FOR_IN
51368: IFFALSE 51437
// begin for k in UnitsInside ( j ) do
51370: LD_ADDR_VAR 0 4
51374: PUSH
51375: LD_VAR 0 3
51379: PPUSH
51380: CALL_OW 313
51384: PUSH
51385: FOR_IN
51386: IFFALSE 51433
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51388: LD_VAR 0 4
51392: PPUSH
51393: CALL_OW 257
51397: PUSH
51398: LD_INT 1
51400: EQUAL
51401: PUSH
51402: LD_VAR 0 4
51406: PPUSH
51407: CALL_OW 459
51411: NOT
51412: AND
51413: IFFALSE 51431
// list := list ^ k ;
51415: LD_ADDR_VAR 0 6
51419: PUSH
51420: LD_VAR 0 6
51424: PUSH
51425: LD_VAR 0 4
51429: ADD
51430: ST_TO_ADDR
51431: GO 51385
51433: POP
51434: POP
// end ;
51435: GO 51367
51437: POP
51438: POP
// list := list diff mc_miners [ i ] ;
51439: LD_ADDR_VAR 0 6
51443: PUSH
51444: LD_VAR 0 6
51448: PUSH
51449: LD_EXP 57
51453: PUSH
51454: LD_VAR 0 2
51458: ARRAY
51459: DIFF
51460: ST_TO_ADDR
// if not list then
51461: LD_VAR 0 6
51465: NOT
51466: IFFALSE 51470
// continue ;
51468: GO 50801
// k := mc_mines [ i ] - mc_miners [ i ] ;
51470: LD_ADDR_VAR 0 4
51474: PUSH
51475: LD_EXP 56
51479: PUSH
51480: LD_VAR 0 2
51484: ARRAY
51485: PUSH
51486: LD_EXP 57
51490: PUSH
51491: LD_VAR 0 2
51495: ARRAY
51496: MINUS
51497: ST_TO_ADDR
// if k > list then
51498: LD_VAR 0 4
51502: PUSH
51503: LD_VAR 0 6
51507: GREATER
51508: IFFALSE 51520
// k := list ;
51510: LD_ADDR_VAR 0 4
51514: PUSH
51515: LD_VAR 0 6
51519: ST_TO_ADDR
// for j = 1 to k do
51520: LD_ADDR_VAR 0 3
51524: PUSH
51525: DOUBLE
51526: LD_INT 1
51528: DEC
51529: ST_TO_ADDR
51530: LD_VAR 0 4
51534: PUSH
51535: FOR_TO
51536: IFFALSE 51590
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
51538: LD_ADDR_EXP 57
51542: PUSH
51543: LD_EXP 57
51547: PPUSH
51548: LD_VAR 0 2
51552: PUSH
51553: LD_EXP 57
51557: PUSH
51558: LD_VAR 0 2
51562: ARRAY
51563: PUSH
51564: LD_INT 1
51566: PLUS
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PPUSH
51572: LD_VAR 0 6
51576: PUSH
51577: LD_VAR 0 3
51581: ARRAY
51582: PPUSH
51583: CALL 3175 0 3
51587: ST_TO_ADDR
51588: GO 51535
51590: POP
51591: POP
// end ;
51592: GO 50801
51594: POP
51595: POP
// end ;
51596: LD_VAR 0 1
51600: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
51601: LD_INT 0
51603: PPUSH
51604: PPUSH
51605: PPUSH
51606: PPUSH
51607: PPUSH
// if not mc_bases then
51608: LD_EXP 46
51612: NOT
51613: IFFALSE 51617
// exit ;
51615: GO 52393
// for i = 1 to mc_bases do
51617: LD_ADDR_VAR 0 2
51621: PUSH
51622: DOUBLE
51623: LD_INT 1
51625: DEC
51626: ST_TO_ADDR
51627: LD_EXP 46
51631: PUSH
51632: FOR_TO
51633: IFFALSE 52391
// begin if not mc_bases [ i ] then
51635: LD_EXP 46
51639: PUSH
51640: LD_VAR 0 2
51644: ARRAY
51645: NOT
51646: IFFALSE 51650
// continue ;
51648: GO 51632
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
51650: LD_EXP 59
51654: PUSH
51655: LD_VAR 0 2
51659: ARRAY
51660: NOT
51661: PUSH
51662: LD_EXP 60
51666: PUSH
51667: LD_VAR 0 2
51671: ARRAY
51672: AND
51673: IFFALSE 51711
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51675: LD_ADDR_EXP 60
51679: PUSH
51680: LD_EXP 60
51684: PPUSH
51685: LD_VAR 0 2
51689: PPUSH
51690: EMPTY
51691: PPUSH
51692: CALL_OW 1
51696: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
51697: LD_VAR 0 2
51701: PPUSH
51702: LD_INT 107
51704: PPUSH
51705: CALL 47263 0 2
// continue ;
51709: GO 51632
// end ; target := [ ] ;
51711: LD_ADDR_VAR 0 5
51715: PUSH
51716: EMPTY
51717: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
51718: LD_ADDR_VAR 0 3
51722: PUSH
51723: DOUBLE
51724: LD_EXP 59
51728: PUSH
51729: LD_VAR 0 2
51733: ARRAY
51734: INC
51735: ST_TO_ADDR
51736: LD_INT 1
51738: PUSH
51739: FOR_DOWNTO
51740: IFFALSE 52000
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
51742: LD_EXP 59
51746: PUSH
51747: LD_VAR 0 2
51751: ARRAY
51752: PUSH
51753: LD_VAR 0 3
51757: ARRAY
51758: PUSH
51759: LD_INT 2
51761: ARRAY
51762: PPUSH
51763: LD_EXP 59
51767: PUSH
51768: LD_VAR 0 2
51772: ARRAY
51773: PUSH
51774: LD_VAR 0 3
51778: ARRAY
51779: PUSH
51780: LD_INT 3
51782: ARRAY
51783: PPUSH
51784: CALL_OW 488
51788: PUSH
51789: LD_EXP 59
51793: PUSH
51794: LD_VAR 0 2
51798: ARRAY
51799: PUSH
51800: LD_VAR 0 3
51804: ARRAY
51805: PUSH
51806: LD_INT 2
51808: ARRAY
51809: PPUSH
51810: LD_EXP 59
51814: PUSH
51815: LD_VAR 0 2
51819: ARRAY
51820: PUSH
51821: LD_VAR 0 3
51825: ARRAY
51826: PUSH
51827: LD_INT 3
51829: ARRAY
51830: PPUSH
51831: CALL_OW 284
51835: PUSH
51836: LD_INT 0
51838: EQUAL
51839: AND
51840: IFFALSE 51895
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
51842: LD_ADDR_VAR 0 4
51846: PUSH
51847: LD_EXP 59
51851: PUSH
51852: LD_VAR 0 2
51856: ARRAY
51857: PPUSH
51858: LD_VAR 0 3
51862: PPUSH
51863: CALL_OW 3
51867: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
51868: LD_ADDR_EXP 59
51872: PUSH
51873: LD_EXP 59
51877: PPUSH
51878: LD_VAR 0 2
51882: PPUSH
51883: LD_VAR 0 4
51887: PPUSH
51888: CALL_OW 1
51892: ST_TO_ADDR
// continue ;
51893: GO 51739
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
51895: LD_EXP 46
51899: PUSH
51900: LD_VAR 0 2
51904: ARRAY
51905: PUSH
51906: LD_INT 1
51908: ARRAY
51909: PPUSH
51910: CALL_OW 255
51914: PPUSH
51915: LD_EXP 59
51919: PUSH
51920: LD_VAR 0 2
51924: ARRAY
51925: PUSH
51926: LD_VAR 0 3
51930: ARRAY
51931: PUSH
51932: LD_INT 2
51934: ARRAY
51935: PPUSH
51936: LD_EXP 59
51940: PUSH
51941: LD_VAR 0 2
51945: ARRAY
51946: PUSH
51947: LD_VAR 0 3
51951: ARRAY
51952: PUSH
51953: LD_INT 3
51955: ARRAY
51956: PPUSH
51957: LD_INT 20
51959: PPUSH
51960: CALL 3669 0 4
51964: PUSH
51965: LD_INT 4
51967: ARRAY
51968: PUSH
51969: LD_INT 0
51971: EQUAL
51972: IFFALSE 51998
// begin target := mc_crates [ i ] [ j ] ;
51974: LD_ADDR_VAR 0 5
51978: PUSH
51979: LD_EXP 59
51983: PUSH
51984: LD_VAR 0 2
51988: ARRAY
51989: PUSH
51990: LD_VAR 0 3
51994: ARRAY
51995: ST_TO_ADDR
// break ;
51996: GO 52000
// end ; end ;
51998: GO 51739
52000: POP
52001: POP
// if not target then
52002: LD_VAR 0 5
52006: NOT
52007: IFFALSE 52011
// continue ;
52009: GO 51632
// if mc_crates_collector [ i ] < 5 then
52011: LD_EXP 60
52015: PUSH
52016: LD_VAR 0 2
52020: ARRAY
52021: PUSH
52022: LD_INT 5
52024: LESS
52025: IFFALSE 52205
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52027: LD_ADDR_VAR 0 4
52031: PUSH
52032: LD_EXP 46
52036: PUSH
52037: LD_VAR 0 2
52041: ARRAY
52042: PPUSH
52043: LD_INT 2
52045: PUSH
52046: LD_INT 25
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 25
52058: PUSH
52059: LD_INT 16
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 24
52073: PUSH
52074: LD_INT 750
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PPUSH
52085: CALL_OW 72
52089: ST_TO_ADDR
// if not tmp then
52090: LD_VAR 0 4
52094: NOT
52095: IFFALSE 52099
// continue ;
52097: GO 51632
// for j in tmp do
52099: LD_ADDR_VAR 0 3
52103: PUSH
52104: LD_VAR 0 4
52108: PUSH
52109: FOR_IN
52110: IFFALSE 52203
// if GetTag ( j ) = 0 then
52112: LD_VAR 0 3
52116: PPUSH
52117: CALL_OW 110
52121: PUSH
52122: LD_INT 0
52124: EQUAL
52125: IFFALSE 52201
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52127: LD_ADDR_EXP 60
52131: PUSH
52132: LD_EXP 60
52136: PPUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_EXP 60
52146: PUSH
52147: LD_VAR 0 2
52151: ARRAY
52152: PUSH
52153: LD_INT 1
52155: PLUS
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PPUSH
52161: LD_VAR 0 3
52165: PPUSH
52166: CALL 3175 0 3
52170: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52171: LD_VAR 0 3
52175: PPUSH
52176: LD_INT 107
52178: PPUSH
52179: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52183: LD_EXP 60
52187: PUSH
52188: LD_VAR 0 2
52192: ARRAY
52193: PUSH
52194: LD_INT 5
52196: GREATER
52197: IFFALSE 52201
// break ;
52199: GO 52203
// end ;
52201: GO 52109
52203: POP
52204: POP
// end ; if mc_crates_collector [ i ] and target then
52205: LD_EXP 60
52209: PUSH
52210: LD_VAR 0 2
52214: ARRAY
52215: PUSH
52216: LD_VAR 0 5
52220: AND
52221: IFFALSE 52389
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52223: LD_EXP 60
52227: PUSH
52228: LD_VAR 0 2
52232: ARRAY
52233: PUSH
52234: LD_VAR 0 5
52238: PUSH
52239: LD_INT 1
52241: ARRAY
52242: LESS
52243: IFFALSE 52263
// tmp := mc_crates_collector [ i ] else
52245: LD_ADDR_VAR 0 4
52249: PUSH
52250: LD_EXP 60
52254: PUSH
52255: LD_VAR 0 2
52259: ARRAY
52260: ST_TO_ADDR
52261: GO 52277
// tmp := target [ 1 ] ;
52263: LD_ADDR_VAR 0 4
52267: PUSH
52268: LD_VAR 0 5
52272: PUSH
52273: LD_INT 1
52275: ARRAY
52276: ST_TO_ADDR
// for j = 1 to tmp do
52277: LD_ADDR_VAR 0 3
52281: PUSH
52282: DOUBLE
52283: LD_INT 1
52285: DEC
52286: ST_TO_ADDR
52287: LD_VAR 0 4
52291: PUSH
52292: FOR_TO
52293: IFFALSE 52387
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52295: LD_EXP 60
52299: PUSH
52300: LD_VAR 0 2
52304: ARRAY
52305: PUSH
52306: LD_VAR 0 3
52310: ARRAY
52311: PPUSH
52312: CALL_OW 310
52316: IFFALSE 52339
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52318: LD_EXP 60
52322: PUSH
52323: LD_VAR 0 2
52327: ARRAY
52328: PUSH
52329: LD_VAR 0 3
52333: ARRAY
52334: PPUSH
52335: CALL_OW 122
// wait ( 3 ) ;
52339: LD_INT 3
52341: PPUSH
52342: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
52346: LD_EXP 60
52350: PUSH
52351: LD_VAR 0 2
52355: ARRAY
52356: PUSH
52357: LD_VAR 0 3
52361: ARRAY
52362: PPUSH
52363: LD_VAR 0 5
52367: PUSH
52368: LD_INT 2
52370: ARRAY
52371: PPUSH
52372: LD_VAR 0 5
52376: PUSH
52377: LD_INT 3
52379: ARRAY
52380: PPUSH
52381: CALL_OW 117
// end ;
52385: GO 52292
52387: POP
52388: POP
// end ; end ;
52389: GO 51632
52391: POP
52392: POP
// end ;
52393: LD_VAR 0 1
52397: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
52398: LD_INT 0
52400: PPUSH
52401: PPUSH
52402: PPUSH
52403: PPUSH
// if not mc_bases then
52404: LD_EXP 46
52408: NOT
52409: IFFALSE 52413
// exit ;
52411: GO 52562
// for i = 1 to mc_bases do
52413: LD_ADDR_VAR 0 2
52417: PUSH
52418: DOUBLE
52419: LD_INT 1
52421: DEC
52422: ST_TO_ADDR
52423: LD_EXP 46
52427: PUSH
52428: FOR_TO
52429: IFFALSE 52560
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
52431: LD_ADDR_VAR 0 4
52435: PUSH
52436: LD_EXP 61
52440: PUSH
52441: LD_VAR 0 2
52445: ARRAY
52446: PPUSH
52447: LD_INT 33
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PPUSH
52457: CALL_OW 72
52461: ST_TO_ADDR
// if tmp then
52462: LD_VAR 0 4
52466: IFFALSE 52558
// for j in tmp do
52468: LD_ADDR_VAR 0 3
52472: PUSH
52473: LD_VAR 0 4
52477: PUSH
52478: FOR_IN
52479: IFFALSE 52556
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
52481: LD_VAR 0 3
52485: PPUSH
52486: CALL_OW 312
52490: NOT
52491: PUSH
52492: LD_VAR 0 3
52496: PPUSH
52497: CALL_OW 256
52501: PUSH
52502: LD_INT 250
52504: GREATEREQUAL
52505: AND
52506: IFFALSE 52519
// Connect ( j ) else
52508: LD_VAR 0 3
52512: PPUSH
52513: CALL 5657 0 1
52517: GO 52554
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
52519: LD_VAR 0 3
52523: PPUSH
52524: CALL_OW 256
52528: PUSH
52529: LD_INT 250
52531: LESS
52532: PUSH
52533: LD_VAR 0 3
52537: PPUSH
52538: CALL_OW 312
52542: AND
52543: IFFALSE 52554
// ComUnlink ( j ) ;
52545: LD_VAR 0 3
52549: PPUSH
52550: CALL_OW 136
52554: GO 52478
52556: POP
52557: POP
// end ;
52558: GO 52428
52560: POP
52561: POP
// end ;
52562: LD_VAR 0 1
52566: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
52567: LD_INT 0
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
// if not mc_bases then
52574: LD_EXP 46
52578: NOT
52579: IFFALSE 52583
// exit ;
52581: GO 52950
// for i = 1 to mc_bases do
52583: LD_ADDR_VAR 0 2
52587: PUSH
52588: DOUBLE
52589: LD_INT 1
52591: DEC
52592: ST_TO_ADDR
52593: LD_EXP 46
52597: PUSH
52598: FOR_TO
52599: IFFALSE 52948
// begin if not mc_produce [ i ] then
52601: LD_EXP 63
52605: PUSH
52606: LD_VAR 0 2
52610: ARRAY
52611: NOT
52612: IFFALSE 52616
// continue ;
52614: GO 52598
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
52616: LD_ADDR_VAR 0 5
52620: PUSH
52621: LD_EXP 46
52625: PUSH
52626: LD_VAR 0 2
52630: ARRAY
52631: PPUSH
52632: LD_INT 30
52634: PUSH
52635: LD_INT 3
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PPUSH
52642: CALL_OW 72
52646: ST_TO_ADDR
// if not fac then
52647: LD_VAR 0 5
52651: NOT
52652: IFFALSE 52656
// continue ;
52654: GO 52598
// for j in fac do
52656: LD_ADDR_VAR 0 3
52660: PUSH
52661: LD_VAR 0 5
52665: PUSH
52666: FOR_IN
52667: IFFALSE 52944
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
52669: LD_VAR 0 3
52673: PPUSH
52674: CALL_OW 461
52678: PUSH
52679: LD_INT 2
52681: NONEQUAL
52682: PUSH
52683: LD_VAR 0 3
52687: PPUSH
52688: LD_INT 20
52690: PPUSH
52691: CALL 5348 0 2
52695: PUSH
52696: LD_INT 4
52698: ARRAY
52699: OR
52700: PUSH
52701: LD_VAR 0 3
52705: PPUSH
52706: CALL_OW 313
52710: PUSH
52711: LD_INT 0
52713: EQUAL
52714: OR
52715: IFFALSE 52719
// continue ;
52717: GO 52666
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
52719: LD_VAR 0 3
52723: PPUSH
52724: LD_EXP 63
52728: PUSH
52729: LD_VAR 0 2
52733: ARRAY
52734: PUSH
52735: LD_INT 1
52737: ARRAY
52738: PUSH
52739: LD_INT 1
52741: ARRAY
52742: PPUSH
52743: LD_EXP 63
52747: PUSH
52748: LD_VAR 0 2
52752: ARRAY
52753: PUSH
52754: LD_INT 1
52756: ARRAY
52757: PUSH
52758: LD_INT 2
52760: ARRAY
52761: PPUSH
52762: LD_EXP 63
52766: PUSH
52767: LD_VAR 0 2
52771: ARRAY
52772: PUSH
52773: LD_INT 1
52775: ARRAY
52776: PUSH
52777: LD_INT 3
52779: ARRAY
52780: PPUSH
52781: LD_EXP 63
52785: PUSH
52786: LD_VAR 0 2
52790: ARRAY
52791: PUSH
52792: LD_INT 1
52794: ARRAY
52795: PUSH
52796: LD_INT 4
52798: ARRAY
52799: PPUSH
52800: CALL_OW 448
52804: IFFALSE 52942
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
52806: LD_VAR 0 3
52810: PPUSH
52811: LD_EXP 63
52815: PUSH
52816: LD_VAR 0 2
52820: ARRAY
52821: PUSH
52822: LD_INT 1
52824: ARRAY
52825: PUSH
52826: LD_INT 1
52828: ARRAY
52829: PPUSH
52830: LD_EXP 63
52834: PUSH
52835: LD_VAR 0 2
52839: ARRAY
52840: PUSH
52841: LD_INT 1
52843: ARRAY
52844: PUSH
52845: LD_INT 2
52847: ARRAY
52848: PPUSH
52849: LD_EXP 63
52853: PUSH
52854: LD_VAR 0 2
52858: ARRAY
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PUSH
52864: LD_INT 3
52866: ARRAY
52867: PPUSH
52868: LD_EXP 63
52872: PUSH
52873: LD_VAR 0 2
52877: ARRAY
52878: PUSH
52879: LD_INT 1
52881: ARRAY
52882: PUSH
52883: LD_INT 4
52885: ARRAY
52886: PPUSH
52887: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
52891: LD_ADDR_VAR 0 4
52895: PUSH
52896: LD_EXP 63
52900: PUSH
52901: LD_VAR 0 2
52905: ARRAY
52906: PPUSH
52907: LD_INT 1
52909: PPUSH
52910: CALL_OW 3
52914: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
52915: LD_ADDR_EXP 63
52919: PUSH
52920: LD_EXP 63
52924: PPUSH
52925: LD_VAR 0 2
52929: PPUSH
52930: LD_VAR 0 4
52934: PPUSH
52935: CALL_OW 1
52939: ST_TO_ADDR
// break ;
52940: GO 52944
// end ; end ;
52942: GO 52666
52944: POP
52945: POP
// end ;
52946: GO 52598
52948: POP
52949: POP
// end ;
52950: LD_VAR 0 1
52954: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
52955: LD_INT 0
52957: PPUSH
52958: PPUSH
52959: PPUSH
// if not mc_bases then
52960: LD_EXP 46
52964: NOT
52965: IFFALSE 52969
// exit ;
52967: GO 53058
// for i = 1 to mc_bases do
52969: LD_ADDR_VAR 0 2
52973: PUSH
52974: DOUBLE
52975: LD_INT 1
52977: DEC
52978: ST_TO_ADDR
52979: LD_EXP 46
52983: PUSH
52984: FOR_TO
52985: IFFALSE 53056
// begin if mc_attack [ i ] then
52987: LD_EXP 62
52991: PUSH
52992: LD_VAR 0 2
52996: ARRAY
52997: IFFALSE 53054
// begin tmp := mc_attack [ i ] [ 1 ] ;
52999: LD_ADDR_VAR 0 3
53003: PUSH
53004: LD_EXP 62
53008: PUSH
53009: LD_VAR 0 2
53013: ARRAY
53014: PUSH
53015: LD_INT 1
53017: ARRAY
53018: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53019: LD_ADDR_EXP 62
53023: PUSH
53024: LD_EXP 62
53028: PPUSH
53029: LD_VAR 0 2
53033: PPUSH
53034: EMPTY
53035: PPUSH
53036: CALL_OW 1
53040: ST_TO_ADDR
// Attack ( tmp ) ;
53041: LD_VAR 0 3
53045: PPUSH
53046: CALL 29360 0 1
// exit ;
53050: POP
53051: POP
53052: GO 53058
// end ; end ;
53054: GO 52984
53056: POP
53057: POP
// end ;
53058: LD_VAR 0 1
53062: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53063: LD_INT 0
53065: PPUSH
53066: PPUSH
53067: PPUSH
53068: PPUSH
53069: PPUSH
53070: PPUSH
53071: PPUSH
// if not mc_bases then
53072: LD_EXP 46
53076: NOT
53077: IFFALSE 53081
// exit ;
53079: GO 53498
// for i = 1 to mc_bases do
53081: LD_ADDR_VAR 0 2
53085: PUSH
53086: DOUBLE
53087: LD_INT 1
53089: DEC
53090: ST_TO_ADDR
53091: LD_EXP 46
53095: PUSH
53096: FOR_TO
53097: IFFALSE 53496
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53099: LD_ADDR_EXP 65
53103: PUSH
53104: LD_EXP 65
53108: PPUSH
53109: LD_VAR 0 2
53113: PPUSH
53114: LD_EXP 46
53118: PUSH
53119: LD_VAR 0 2
53123: ARRAY
53124: PPUSH
53125: CALL 33144 0 1
53129: PPUSH
53130: CALL_OW 1
53134: ST_TO_ADDR
// if not mc_scan [ i ] then
53135: LD_EXP 65
53139: PUSH
53140: LD_VAR 0 2
53144: ARRAY
53145: NOT
53146: IFFALSE 53257
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53148: LD_ADDR_VAR 0 4
53152: PUSH
53153: LD_EXP 46
53157: PUSH
53158: LD_VAR 0 2
53162: ARRAY
53163: PPUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 25
53169: PUSH
53170: LD_INT 5
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 25
53179: PUSH
53180: LD_INT 8
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 25
53189: PUSH
53190: LD_INT 9
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: PPUSH
53203: CALL_OW 72
53207: ST_TO_ADDR
// if not tmp then
53208: LD_VAR 0 4
53212: NOT
53213: IFFALSE 53217
// continue ;
53215: GO 53096
// for j in tmp do
53217: LD_ADDR_VAR 0 3
53221: PUSH
53222: LD_VAR 0 4
53226: PUSH
53227: FOR_IN
53228: IFFALSE 53255
// if IsInUnit ( j ) then
53230: LD_VAR 0 3
53234: PPUSH
53235: CALL_OW 310
53239: IFFALSE 53253
// SetClass ( j , 1 ) ;
53241: LD_VAR 0 3
53245: PPUSH
53246: LD_INT 1
53248: PPUSH
53249: CALL_OW 336
53253: GO 53227
53255: POP
53256: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53257: LD_EXP 65
53261: PUSH
53262: LD_VAR 0 2
53266: ARRAY
53267: PUSH
53268: LD_EXP 64
53272: PUSH
53273: LD_VAR 0 2
53277: ARRAY
53278: AND
53279: IFFALSE 53494
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53281: LD_ADDR_VAR 0 7
53285: PUSH
53286: LD_EXP 64
53290: PUSH
53291: LD_INT 1
53293: ARRAY
53294: PPUSH
53295: CALL 33251 0 1
53299: ST_TO_ADDR
// if class then
53300: LD_VAR 0 7
53304: IFFALSE 53427
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53306: LD_ADDR_VAR 0 4
53310: PUSH
53311: LD_EXP 46
53315: PUSH
53316: LD_VAR 0 2
53320: ARRAY
53321: PPUSH
53322: LD_INT 30
53324: PUSH
53325: LD_INT 5
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PPUSH
53332: CALL_OW 72
53336: ST_TO_ADDR
// if tmp then
53337: LD_VAR 0 4
53341: IFFALSE 53427
// begin for j in tmp do
53343: LD_ADDR_VAR 0 3
53347: PUSH
53348: LD_VAR 0 4
53352: PUSH
53353: FOR_IN
53354: IFFALSE 53425
// begin t := UnitsInside ( j ) ;
53356: LD_ADDR_VAR 0 5
53360: PUSH
53361: LD_VAR 0 3
53365: PPUSH
53366: CALL_OW 313
53370: ST_TO_ADDR
// if not t then
53371: LD_VAR 0 5
53375: NOT
53376: IFFALSE 53380
// continue ;
53378: GO 53353
// for x in t do
53380: LD_ADDR_VAR 0 6
53384: PUSH
53385: LD_VAR 0 5
53389: PUSH
53390: FOR_IN
53391: IFFALSE 53421
// if not MineOfUnit ( x ) then
53393: LD_VAR 0 6
53397: PPUSH
53398: CALL_OW 459
53402: NOT
53403: IFFALSE 53419
// SetClass ( x , class ) ;
53405: LD_VAR 0 6
53409: PPUSH
53410: LD_VAR 0 7
53414: PPUSH
53415: CALL_OW 336
53419: GO 53390
53421: POP
53422: POP
// end ;
53423: GO 53353
53425: POP
53426: POP
// end ; end ; tmp := mc_defender [ i ] ;
53427: LD_ADDR_VAR 0 4
53431: PUSH
53432: LD_EXP 64
53436: PUSH
53437: LD_VAR 0 2
53441: ARRAY
53442: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
53443: LD_ADDR_EXP 64
53447: PUSH
53448: LD_EXP 64
53452: PPUSH
53453: LD_VAR 0 2
53457: PPUSH
53458: EMPTY
53459: PPUSH
53460: CALL_OW 1
53464: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
53465: LD_VAR 0 2
53469: PPUSH
53470: LD_VAR 0 4
53474: PPUSH
53475: LD_EXP 65
53479: PUSH
53480: LD_VAR 0 2
53484: ARRAY
53485: PPUSH
53486: CALL 32597 0 3
// exit ;
53490: POP
53491: POP
53492: GO 53498
// end ; end ;
53494: GO 53096
53496: POP
53497: POP
// end ;
53498: LD_VAR 0 1
53502: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
53503: LD_INT 0
53505: PPUSH
53506: PPUSH
53507: PPUSH
53508: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
53509: LD_VAR 0 1
53513: NOT
53514: PUSH
53515: LD_VAR 0 2
53519: NOT
53520: OR
53521: PUSH
53522: LD_VAR 0 3
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: LD_INT 3
53535: PUSH
53536: LD_INT 4
53538: PUSH
53539: LD_INT 5
53541: PUSH
53542: LD_INT 8
53544: PUSH
53545: LD_INT 9
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: IN
53557: NOT
53558: OR
53559: PUSH
53560: LD_VAR 0 2
53564: PUSH
53565: LD_EXP 64
53569: PUSH
53570: LD_VAR 0 5
53574: ARRAY
53575: IN
53576: OR
53577: IFFALSE 53581
// exit ;
53579: GO 53993
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
53581: LD_ADDR_VAR 0 1
53585: PUSH
53586: LD_VAR 0 1
53590: PPUSH
53591: LD_INT 21
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 24
53603: PUSH
53604: LD_INT 250
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PPUSH
53615: CALL_OW 72
53619: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
53620: LD_VAR 0 3
53624: PUSH
53625: LD_INT 5
53627: PUSH
53628: LD_INT 8
53630: PUSH
53631: LD_INT 9
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: IN
53639: IFFALSE 53649
// class := 1 ;
53641: LD_ADDR_VAR 0 3
53645: PUSH
53646: LD_INT 1
53648: ST_TO_ADDR
// case class of 1 :
53649: LD_VAR 0 3
53653: PUSH
53654: LD_INT 1
53656: DOUBLE
53657: EQUAL
53658: IFTRUE 53662
53660: GO 53708
53662: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
53663: LD_ADDR_VAR 0 7
53667: PUSH
53668: LD_VAR 0 1
53672: PPUSH
53673: LD_INT 2
53675: PUSH
53676: LD_INT 30
53678: PUSH
53679: LD_INT 4
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 30
53688: PUSH
53689: LD_INT 5
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: LIST
53700: PPUSH
53701: CALL_OW 72
53705: ST_TO_ADDR
53706: GO 53882
53708: LD_INT 2
53710: DOUBLE
53711: EQUAL
53712: IFTRUE 53716
53714: GO 53762
53716: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
53717: LD_ADDR_VAR 0 7
53721: PUSH
53722: LD_VAR 0 1
53726: PPUSH
53727: LD_INT 2
53729: PUSH
53730: LD_INT 30
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 30
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: PPUSH
53755: CALL_OW 72
53759: ST_TO_ADDR
53760: GO 53882
53762: LD_INT 3
53764: DOUBLE
53765: EQUAL
53766: IFTRUE 53770
53768: GO 53816
53770: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
53771: LD_ADDR_VAR 0 7
53775: PUSH
53776: LD_VAR 0 1
53780: PPUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 30
53786: PUSH
53787: LD_INT 2
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 30
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: PPUSH
53809: CALL_OW 72
53813: ST_TO_ADDR
53814: GO 53882
53816: LD_INT 4
53818: DOUBLE
53819: EQUAL
53820: IFTRUE 53824
53822: GO 53881
53824: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
53825: LD_ADDR_VAR 0 7
53829: PUSH
53830: LD_VAR 0 1
53834: PPUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 30
53840: PUSH
53841: LD_INT 6
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 30
53850: PUSH
53851: LD_INT 7
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 30
53860: PUSH
53861: LD_INT 8
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: PPUSH
53874: CALL_OW 72
53878: ST_TO_ADDR
53879: GO 53882
53881: POP
// if not tmp then
53882: LD_VAR 0 7
53886: NOT
53887: IFFALSE 53891
// exit ;
53889: GO 53993
// for i in tmp do
53891: LD_ADDR_VAR 0 5
53895: PUSH
53896: LD_VAR 0 7
53900: PUSH
53901: FOR_IN
53902: IFFALSE 53971
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
53904: LD_VAR 0 5
53908: PPUSH
53909: CALL_OW 313
53913: PUSH
53914: LD_INT 6
53916: LESS
53917: PUSH
53918: LD_VAR 0 5
53922: PPUSH
53923: CALL_OW 266
53927: PUSH
53928: LD_INT 31
53930: PUSH
53931: LD_INT 32
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: IN
53938: NOT
53939: AND
53940: PUSH
53941: LD_VAR 0 5
53945: PPUSH
53946: CALL_OW 313
53950: PUSH
53951: LD_INT 0
53953: EQUAL
53954: OR
53955: IFFALSE 53969
// begin j := i ;
53957: LD_ADDR_VAR 0 6
53961: PUSH
53962: LD_VAR 0 5
53966: ST_TO_ADDR
// break ;
53967: GO 53971
// end ; end ;
53969: GO 53901
53971: POP
53972: POP
// if j then
53973: LD_VAR 0 6
53977: IFFALSE 53993
// ComEnterUnit ( unit , j ) ;
53979: LD_VAR 0 2
53983: PPUSH
53984: LD_VAR 0 6
53988: PPUSH
53989: CALL_OW 120
// end ;
53993: LD_VAR 0 4
53997: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
53998: LD_INT 0
54000: PPUSH
54001: PPUSH
54002: PPUSH
54003: PPUSH
// if not mc_bases then
54004: LD_EXP 46
54008: NOT
54009: IFFALSE 54013
// exit ;
54011: GO 54242
// for i = 1 to mc_bases do
54013: LD_ADDR_VAR 0 2
54017: PUSH
54018: DOUBLE
54019: LD_INT 1
54021: DEC
54022: ST_TO_ADDR
54023: LD_EXP 46
54027: PUSH
54028: FOR_TO
54029: IFFALSE 54240
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54031: LD_ADDR_VAR 0 4
54035: PUSH
54036: LD_EXP 46
54040: PUSH
54041: LD_VAR 0 2
54045: ARRAY
54046: PPUSH
54047: LD_INT 21
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PPUSH
54057: CALL_OW 72
54061: ST_TO_ADDR
// if not tmp then
54062: LD_VAR 0 4
54066: NOT
54067: IFFALSE 54073
// exit ;
54069: POP
54070: POP
54071: GO 54242
// for j in tmp do
54073: LD_ADDR_VAR 0 3
54077: PUSH
54078: LD_VAR 0 4
54082: PUSH
54083: FOR_IN
54084: IFFALSE 54236
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54086: LD_VAR 0 3
54090: PPUSH
54091: CALL_OW 257
54095: PUSH
54096: LD_INT 3
54098: EQUAL
54099: PUSH
54100: LD_EXP 65
54104: PUSH
54105: LD_VAR 0 2
54109: ARRAY
54110: AND
54111: IFFALSE 54115
// continue ;
54113: GO 54083
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54115: LD_VAR 0 3
54119: PPUSH
54120: CALL_OW 110
54124: NOT
54125: PUSH
54126: LD_VAR 0 3
54130: PPUSH
54131: CALL_OW 314
54135: NOT
54136: AND
54137: PUSH
54138: LD_VAR 0 3
54142: PPUSH
54143: CALL_OW 310
54147: NOT
54148: AND
54149: PUSH
54150: LD_EXP 49
54154: PUSH
54155: LD_VAR 0 2
54159: ARRAY
54160: PUSH
54161: LD_INT 1
54163: ARRAY
54164: NOT
54165: AND
54166: PUSH
54167: LD_EXP 49
54171: PUSH
54172: LD_VAR 0 2
54176: ARRAY
54177: PUSH
54178: LD_INT 2
54180: ARRAY
54181: NOT
54182: AND
54183: PUSH
54184: LD_VAR 0 3
54188: PUSH
54189: LD_EXP 55
54193: PUSH
54194: LD_VAR 0 2
54198: ARRAY
54199: IN
54200: NOT
54201: AND
54202: IFFALSE 54234
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54204: LD_EXP 46
54208: PUSH
54209: LD_VAR 0 2
54213: ARRAY
54214: PPUSH
54215: LD_VAR 0 3
54219: PPUSH
54220: LD_VAR 0 3
54224: PPUSH
54225: CALL_OW 257
54229: PPUSH
54230: CALL 53503 0 3
// end ;
54234: GO 54083
54236: POP
54237: POP
// end ;
54238: GO 54028
54240: POP
54241: POP
// end ;
54242: LD_VAR 0 1
54246: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54247: LD_INT 0
54249: PPUSH
54250: PPUSH
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
// if not mc_bases [ base ] then
54255: LD_EXP 46
54259: PUSH
54260: LD_VAR 0 1
54264: ARRAY
54265: NOT
54266: IFFALSE 54270
// exit ;
54268: GO 54430
// tmp := [ ] ;
54270: LD_ADDR_VAR 0 6
54274: PUSH
54275: EMPTY
54276: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54277: LD_ADDR_VAR 0 7
54281: PUSH
54282: LD_VAR 0 3
54286: PPUSH
54287: LD_INT 0
54289: PPUSH
54290: CALL_OW 517
54294: ST_TO_ADDR
// if not list then
54295: LD_VAR 0 7
54299: NOT
54300: IFFALSE 54304
// exit ;
54302: GO 54430
// for i = 1 to amount do
54304: LD_ADDR_VAR 0 5
54308: PUSH
54309: DOUBLE
54310: LD_INT 1
54312: DEC
54313: ST_TO_ADDR
54314: LD_VAR 0 2
54318: PUSH
54319: FOR_TO
54320: IFFALSE 54378
// tmp := Replace ( tmp , i , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
54322: LD_ADDR_VAR 0 6
54326: PUSH
54327: LD_VAR 0 6
54331: PPUSH
54332: LD_VAR 0 5
54336: PPUSH
54337: LD_VAR 0 7
54341: PUSH
54342: LD_INT 1
54344: ARRAY
54345: PUSH
54346: LD_VAR 0 5
54350: ARRAY
54351: PUSH
54352: LD_VAR 0 7
54356: PUSH
54357: LD_INT 2
54359: ARRAY
54360: PUSH
54361: LD_VAR 0 5
54365: ARRAY
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PPUSH
54371: CALL_OW 1
54375: ST_TO_ADDR
54376: GO 54319
54378: POP
54379: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54380: LD_ADDR_EXP 56
54384: PUSH
54385: LD_EXP 56
54389: PPUSH
54390: LD_VAR 0 1
54394: PPUSH
54395: LD_VAR 0 6
54399: PPUSH
54400: CALL_OW 1
54404: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
54405: LD_ADDR_EXP 58
54409: PUSH
54410: LD_EXP 58
54414: PPUSH
54415: LD_VAR 0 1
54419: PPUSH
54420: LD_VAR 0 3
54424: PPUSH
54425: CALL_OW 1
54429: ST_TO_ADDR
// end ;
54430: LD_VAR 0 4
54434: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
54435: LD_INT 0
54437: PPUSH
// if not mc_bases [ base ] then
54438: LD_EXP 46
54442: PUSH
54443: LD_VAR 0 1
54447: ARRAY
54448: NOT
54449: IFFALSE 54453
// exit ;
54451: GO 54478
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
54453: LD_ADDR_EXP 63
54457: PUSH
54458: LD_EXP 63
54462: PPUSH
54463: LD_VAR 0 1
54467: PPUSH
54468: LD_VAR 0 2
54472: PPUSH
54473: CALL_OW 1
54477: ST_TO_ADDR
// end ;
54478: LD_VAR 0 3
54482: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
54483: LD_INT 0
54485: PPUSH
// if not mc_bases [ base ] then
54486: LD_EXP 46
54490: PUSH
54491: LD_VAR 0 1
54495: ARRAY
54496: NOT
54497: IFFALSE 54501
// exit ;
54499: GO 54526
// mc_defender := Replace ( mc_defender , base , deflist ) ;
54501: LD_ADDR_EXP 64
54505: PUSH
54506: LD_EXP 64
54510: PPUSH
54511: LD_VAR 0 1
54515: PPUSH
54516: LD_VAR 0 2
54520: PPUSH
54521: CALL_OW 1
54525: ST_TO_ADDR
// end ;
54526: LD_VAR 0 3
54530: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
54531: LD_INT 0
54533: PPUSH
54534: PPUSH
54535: PPUSH
54536: PPUSH
// if not mc_bases [ base ] then
54537: LD_EXP 46
54541: PUSH
54542: LD_VAR 0 1
54546: ARRAY
54547: NOT
54548: IFFALSE 54552
// exit ;
54550: GO 54617
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
54552: LD_ADDR_EXP 62
54556: PUSH
54557: LD_EXP 62
54561: PPUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_EXP 62
54571: PUSH
54572: LD_VAR 0 1
54576: ARRAY
54577: PUSH
54578: LD_INT 1
54580: PLUS
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PPUSH
54586: LD_VAR 0 1
54590: PUSH
54591: LD_VAR 0 2
54595: PUSH
54596: LD_VAR 0 3
54600: PUSH
54601: LD_VAR 0 4
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: PPUSH
54612: CALL 3175 0 3
54616: ST_TO_ADDR
// end ;
54617: LD_VAR 0 5
54621: RET
// export function MC_GetMinesField ( base ) ; begin
54622: LD_INT 0
54624: PPUSH
// result := mc_mines [ base ] ;
54625: LD_ADDR_VAR 0 2
54629: PUSH
54630: LD_EXP 56
54634: PUSH
54635: LD_VAR 0 1
54639: ARRAY
54640: ST_TO_ADDR
// end ;
54641: LD_VAR 0 2
54645: RET
// export function MC_GetProduceList ( base ) ; begin
54646: LD_INT 0
54648: PPUSH
// result := mc_produce [ base ] ;
54649: LD_ADDR_VAR 0 2
54653: PUSH
54654: LD_EXP 63
54658: PUSH
54659: LD_VAR 0 1
54663: ARRAY
54664: ST_TO_ADDR
// end ; end_of_file
54665: LD_VAR 0 2
54669: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
54670: LD_VAR 0 1
54674: PPUSH
54675: CALL_OW 255
54679: PUSH
54680: LD_INT 1
54682: EQUAL
54683: IFFALSE 54693
// artifact_get := true ;
54685: LD_ADDR_EXP 12
54689: PUSH
54690: LD_INT 1
54692: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
54693: LD_VAR 0 1
54697: PPUSH
54698: CALL_OW 255
54702: PUSH
54703: LD_INT 2
54705: EQUAL
54706: IFFALSE 54724
// begin artifact_get := false ;
54708: LD_ADDR_EXP 12
54712: PUSH
54713: LD_INT 0
54715: ST_TO_ADDR
// artifact_stolen := true ;
54716: LD_ADDR_EXP 11
54720: PUSH
54721: LD_INT 1
54723: ST_TO_ADDR
// end ; artifact_oncargo := true ;
54724: LD_ADDR_EXP 13
54728: PUSH
54729: LD_INT 1
54731: ST_TO_ADDR
// end ;
54732: PPOPN 2
54734: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
54735: LD_ADDR_EXP 13
54739: PUSH
54740: LD_INT 0
54742: ST_TO_ADDR
// end ;
54743: PPOPN 2
54745: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
54746: LD_INT 0
54748: PPUSH
54749: PPUSH
54750: PPUSH
54751: PPUSH
54752: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
54753: LD_VAR 0 1
54757: PUSH
54758: LD_INT 22
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 21
54770: PUSH
54771: LD_INT 1
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 2
54780: PUSH
54781: LD_INT 25
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 25
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 25
54803: PUSH
54804: LD_INT 3
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 25
54813: PUSH
54814: LD_INT 4
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 25
54823: PUSH
54824: LD_INT 5
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 25
54833: PUSH
54834: LD_INT 8
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: LIST
54854: PPUSH
54855: CALL_OW 69
54859: IN
54860: IFFALSE 54876
// loses_counter := loses_counter + 1 ;
54862: LD_ADDR_EXP 16
54866: PUSH
54867: LD_EXP 16
54871: PUSH
54872: LD_INT 1
54874: PLUS
54875: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
54876: LD_VAR 0 1
54880: PUSH
54881: LD_INT 21
54883: PUSH
54884: LD_INT 3
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PPUSH
54891: CALL_OW 69
54895: IN
54896: IFFALSE 55412
// begin if not mc_bases then
54898: LD_EXP 46
54902: NOT
54903: IFFALSE 54907
// exit ;
54905: GO 55412
// pos := mc_build_list [ i ] + 1 ;
54907: LD_ADDR_VAR 0 5
54911: PUSH
54912: LD_EXP 51
54916: PUSH
54917: LD_VAR 0 2
54921: ARRAY
54922: PUSH
54923: LD_INT 1
54925: PLUS
54926: ST_TO_ADDR
// btype := GetBType ( un ) ;
54927: LD_ADDR_VAR 0 4
54931: PUSH
54932: LD_VAR 0 1
54936: PPUSH
54937: CALL_OW 266
54941: ST_TO_ADDR
// if btype = b_warehouse then
54942: LD_VAR 0 4
54946: PUSH
54947: LD_INT 1
54949: EQUAL
54950: IFFALSE 54968
// begin btype := b_depot ;
54952: LD_ADDR_VAR 0 4
54956: PUSH
54957: LD_INT 0
54959: ST_TO_ADDR
// pos := 1 ;
54960: LD_ADDR_VAR 0 5
54964: PUSH
54965: LD_INT 1
54967: ST_TO_ADDR
// end ; if btype = b_factory then
54968: LD_VAR 0 4
54972: PUSH
54973: LD_INT 3
54975: EQUAL
54976: IFFALSE 54994
// begin btype := b_workshop ;
54978: LD_ADDR_VAR 0 4
54982: PUSH
54983: LD_INT 2
54985: ST_TO_ADDR
// pos := 1 ;
54986: LD_ADDR_VAR 0 5
54990: PUSH
54991: LD_INT 1
54993: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
54994: LD_VAR 0 4
54998: PUSH
54999: LD_INT 7
55001: PUSH
55002: LD_INT 8
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: IN
55009: IFFALSE 55019
// btype := b_lab ;
55011: LD_ADDR_VAR 0 4
55015: PUSH
55016: LD_INT 6
55018: ST_TO_ADDR
// for i = 1 to mc_bases do
55019: LD_ADDR_VAR 0 2
55023: PUSH
55024: DOUBLE
55025: LD_INT 1
55027: DEC
55028: ST_TO_ADDR
55029: LD_EXP 46
55033: PUSH
55034: FOR_TO
55035: IFFALSE 55410
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55037: LD_VAR 0 1
55041: PUSH
55042: LD_EXP 46
55046: PUSH
55047: LD_VAR 0 2
55051: ARRAY
55052: IN
55053: PUSH
55054: LD_VAR 0 1
55058: PUSH
55059: LD_EXP 53
55063: PUSH
55064: LD_VAR 0 2
55068: ARRAY
55069: IN
55070: OR
55071: IFFALSE 55408
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55073: LD_ADDR_EXP 51
55077: PUSH
55078: LD_EXP 51
55082: PPUSH
55083: LD_VAR 0 2
55087: PUSH
55088: LD_EXP 51
55092: PUSH
55093: LD_VAR 0 2
55097: ARRAY
55098: PUSH
55099: LD_INT 1
55101: PLUS
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PPUSH
55107: LD_VAR 0 4
55111: PUSH
55112: LD_VAR 0 1
55116: PPUSH
55117: CALL_OW 250
55121: PUSH
55122: LD_VAR 0 1
55126: PPUSH
55127: CALL_OW 251
55131: PUSH
55132: LD_VAR 0 1
55136: PPUSH
55137: CALL_OW 254
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: PPUSH
55148: CALL 3175 0 3
55152: ST_TO_ADDR
// if pos = 1 then
55153: LD_VAR 0 5
55157: PUSH
55158: LD_INT 1
55160: EQUAL
55161: IFFALSE 55276
// begin tmp := mc_build_list [ i ] ;
55163: LD_ADDR_VAR 0 6
55167: PUSH
55168: LD_EXP 51
55172: PUSH
55173: LD_VAR 0 2
55177: ARRAY
55178: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55179: LD_VAR 0 6
55183: PPUSH
55184: LD_INT 2
55186: PUSH
55187: LD_INT 30
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 30
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: LIST
55211: PPUSH
55212: CALL_OW 72
55216: IFFALSE 55226
// pos := 2 ;
55218: LD_ADDR_VAR 0 5
55222: PUSH
55223: LD_INT 2
55225: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55226: LD_ADDR_VAR 0 6
55230: PUSH
55231: LD_VAR 0 6
55235: PPUSH
55236: LD_VAR 0 5
55240: PPUSH
55241: LD_VAR 0 6
55245: PPUSH
55246: CALL 3066 0 3
55250: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55251: LD_ADDR_EXP 51
55255: PUSH
55256: LD_EXP 51
55260: PPUSH
55261: LD_VAR 0 2
55265: PPUSH
55266: LD_VAR 0 6
55270: PPUSH
55271: CALL_OW 1
55275: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55276: LD_VAR 0 1
55280: PUSH
55281: LD_EXP 46
55285: PUSH
55286: LD_VAR 0 2
55290: ARRAY
55291: IN
55292: IFFALSE 55341
// begin tmp := mc_bases [ i ] diff un ;
55294: LD_ADDR_VAR 0 6
55298: PUSH
55299: LD_EXP 46
55303: PUSH
55304: LD_VAR 0 2
55308: ARRAY
55309: PUSH
55310: LD_VAR 0 1
55314: DIFF
55315: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55316: LD_ADDR_EXP 46
55320: PUSH
55321: LD_EXP 46
55325: PPUSH
55326: LD_VAR 0 2
55330: PPUSH
55331: LD_VAR 0 6
55335: PPUSH
55336: CALL_OW 1
55340: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55341: LD_VAR 0 1
55345: PUSH
55346: LD_EXP 53
55350: PUSH
55351: LD_VAR 0 2
55355: ARRAY
55356: IN
55357: IFFALSE 55406
// begin tmp := mc_construct_list [ i ] diff un ;
55359: LD_ADDR_VAR 0 6
55363: PUSH
55364: LD_EXP 53
55368: PUSH
55369: LD_VAR 0 2
55373: ARRAY
55374: PUSH
55375: LD_VAR 0 1
55379: DIFF
55380: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55381: LD_ADDR_EXP 53
55385: PUSH
55386: LD_EXP 53
55390: PPUSH
55391: LD_VAR 0 2
55395: PPUSH
55396: LD_VAR 0 6
55400: PPUSH
55401: CALL_OW 1
55405: ST_TO_ADDR
// end ; break ;
55406: GO 55410
// end ;
55408: GO 55034
55410: POP
55411: POP
// end ; end ;
55412: PPOPN 6
55414: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
55415: LD_INT 0
55417: PPUSH
55418: PPUSH
55419: PPUSH
55420: PPUSH
55421: PPUSH
55422: PPUSH
55423: PPUSH
// begin if not mc_bases then
55424: LD_EXP 46
55428: NOT
55429: IFFALSE 55433
// exit ;
55431: GO 55674
// btype := GetBType ( building ) ;
55433: LD_ADDR_VAR 0 6
55437: PUSH
55438: LD_VAR 0 1
55442: PPUSH
55443: CALL_OW 266
55447: ST_TO_ADDR
// x := GetX ( building ) ;
55448: LD_ADDR_VAR 0 7
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: CALL_OW 250
55462: ST_TO_ADDR
// y := GetY ( building ) ;
55463: LD_ADDR_VAR 0 8
55467: PUSH
55468: LD_VAR 0 1
55472: PPUSH
55473: CALL_OW 251
55477: ST_TO_ADDR
// d := GetDir ( building ) ;
55478: LD_ADDR_VAR 0 9
55482: PUSH
55483: LD_VAR 0 1
55487: PPUSH
55488: CALL_OW 254
55492: ST_TO_ADDR
// for i = 1 to mc_bases do
55493: LD_ADDR_VAR 0 3
55497: PUSH
55498: DOUBLE
55499: LD_INT 1
55501: DEC
55502: ST_TO_ADDR
55503: LD_EXP 46
55507: PUSH
55508: FOR_TO
55509: IFFALSE 55672
// begin if not mc_build_list [ i ] then
55511: LD_EXP 51
55515: PUSH
55516: LD_VAR 0 3
55520: ARRAY
55521: NOT
55522: IFFALSE 55526
// continue ;
55524: GO 55508
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
55526: LD_VAR 0 6
55530: PUSH
55531: LD_VAR 0 7
55535: PUSH
55536: LD_VAR 0 8
55540: PUSH
55541: LD_VAR 0 9
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: PPUSH
55552: LD_EXP 51
55556: PUSH
55557: LD_VAR 0 3
55561: ARRAY
55562: PUSH
55563: LD_INT 1
55565: ARRAY
55566: PPUSH
55567: CALL 8470 0 2
55571: IFFALSE 55670
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
55573: LD_ADDR_VAR 0 5
55577: PUSH
55578: LD_EXP 51
55582: PUSH
55583: LD_VAR 0 3
55587: ARRAY
55588: PPUSH
55589: LD_INT 1
55591: PPUSH
55592: CALL_OW 3
55596: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55597: LD_ADDR_EXP 51
55601: PUSH
55602: LD_EXP 51
55606: PPUSH
55607: LD_VAR 0 3
55611: PPUSH
55612: LD_VAR 0 5
55616: PPUSH
55617: CALL_OW 1
55621: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
55622: LD_ADDR_EXP 53
55626: PUSH
55627: LD_EXP 53
55631: PPUSH
55632: LD_VAR 0 3
55636: PUSH
55637: LD_EXP 53
55641: PUSH
55642: LD_VAR 0 3
55646: ARRAY
55647: PUSH
55648: LD_INT 1
55650: PLUS
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PPUSH
55656: LD_VAR 0 1
55660: PPUSH
55661: CALL 3175 0 3
55665: ST_TO_ADDR
// exit ;
55666: POP
55667: POP
55668: GO 55674
// end ; end ;
55670: GO 55508
55672: POP
55673: POP
// end ;
55674: PPOPN 9
55676: END
// on BuildingComplete ( building ) do var i , j , tmp ;
55677: LD_INT 0
55679: PPUSH
55680: PPUSH
55681: PPUSH
// begin if not mc_bases then
55682: LD_EXP 46
55686: NOT
55687: IFFALSE 55691
// exit ;
55689: GO 55892
// for i = 1 to mc_bases do
55691: LD_ADDR_VAR 0 2
55695: PUSH
55696: DOUBLE
55697: LD_INT 1
55699: DEC
55700: ST_TO_ADDR
55701: LD_EXP 46
55705: PUSH
55706: FOR_TO
55707: IFFALSE 55890
// begin if building in mc_construct_list [ i ] then
55709: LD_VAR 0 1
55713: PUSH
55714: LD_EXP 53
55718: PUSH
55719: LD_VAR 0 2
55723: ARRAY
55724: IN
55725: IFFALSE 55888
// begin tmp := mc_construct_list [ i ] diff building ;
55727: LD_ADDR_VAR 0 4
55731: PUSH
55732: LD_EXP 53
55736: PUSH
55737: LD_VAR 0 2
55741: ARRAY
55742: PUSH
55743: LD_VAR 0 1
55747: DIFF
55748: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55749: LD_ADDR_EXP 53
55753: PUSH
55754: LD_EXP 53
55758: PPUSH
55759: LD_VAR 0 2
55763: PPUSH
55764: LD_VAR 0 4
55768: PPUSH
55769: CALL_OW 1
55773: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
55774: LD_ADDR_EXP 46
55778: PUSH
55779: LD_EXP 46
55783: PPUSH
55784: LD_VAR 0 2
55788: PUSH
55789: LD_EXP 46
55793: PUSH
55794: LD_VAR 0 2
55798: ARRAY
55799: PUSH
55800: LD_INT 1
55802: PLUS
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PPUSH
55808: LD_VAR 0 1
55812: PPUSH
55813: CALL 3175 0 3
55817: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
55818: LD_VAR 0 1
55822: PPUSH
55823: CALL_OW 266
55827: PUSH
55828: LD_INT 32
55830: PUSH
55831: LD_INT 33
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: IN
55838: IFFALSE 55884
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
55840: LD_ADDR_EXP 54
55844: PUSH
55845: LD_EXP 54
55849: PPUSH
55850: LD_VAR 0 2
55854: PUSH
55855: LD_EXP 54
55859: PUSH
55860: LD_VAR 0 2
55864: ARRAY
55865: PUSH
55866: LD_INT 1
55868: PLUS
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PPUSH
55874: LD_VAR 0 1
55878: PPUSH
55879: CALL 3175 0 3
55883: ST_TO_ADDR
// exit ;
55884: POP
55885: POP
55886: GO 55892
// end ; end ;
55888: GO 55706
55890: POP
55891: POP
// end ;
55892: PPOPN 4
55894: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
55895: LD_INT 0
55897: PPUSH
55898: PPUSH
// begin if not mc_bases then
55899: LD_EXP 46
55903: NOT
55904: IFFALSE 55908
// exit ;
55906: GO 56123
// repeat wait ( 0 0$1 ) ;
55908: LD_INT 35
55910: PPUSH
55911: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
55915: LD_VAR 0 2
55919: PPUSH
55920: LD_VAR 0 3
55924: PPUSH
55925: CALL_OW 284
55929: IFFALSE 55908
// if GetResourceTypeXY ( x , y ) = mat_artefact then
55931: LD_VAR 0 2
55935: PPUSH
55936: LD_VAR 0 3
55940: PPUSH
55941: CALL_OW 283
55945: PUSH
55946: LD_INT 4
55948: EQUAL
55949: IFFALSE 55953
// exit ;
55951: GO 56123
// for i = 1 to mc_bases do
55953: LD_ADDR_VAR 0 6
55957: PUSH
55958: DOUBLE
55959: LD_INT 1
55961: DEC
55962: ST_TO_ADDR
55963: LD_EXP 46
55967: PUSH
55968: FOR_TO
55969: IFFALSE 56121
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
55971: LD_ADDR_VAR 0 7
55975: PUSH
55976: LD_EXP 46
55980: PUSH
55981: LD_VAR 0 6
55985: ARRAY
55986: PPUSH
55987: LD_INT 2
55989: PUSH
55990: LD_INT 30
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 30
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: PPUSH
56015: CALL_OW 72
56019: ST_TO_ADDR
// if not depot then
56020: LD_VAR 0 7
56024: NOT
56025: IFFALSE 56029
// continue ;
56027: GO 55968
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56029: LD_VAR 0 7
56033: PUSH
56034: LD_INT 1
56036: ARRAY
56037: PPUSH
56038: LD_VAR 0 2
56042: PPUSH
56043: LD_VAR 0 3
56047: PPUSH
56048: CALL_OW 297
56052: PUSH
56053: LD_INT 30
56055: LESS
56056: IFFALSE 56119
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56058: LD_ADDR_EXP 59
56062: PUSH
56063: LD_EXP 59
56067: PPUSH
56068: LD_VAR 0 6
56072: PUSH
56073: LD_EXP 59
56077: PUSH
56078: LD_VAR 0 6
56082: ARRAY
56083: PUSH
56084: LD_INT 1
56086: PLUS
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PPUSH
56092: LD_VAR 0 4
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: LD_VAR 0 3
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: LIST
56111: PPUSH
56112: CALL 3175 0 3
56116: ST_TO_ADDR
// break ;
56117: GO 56121
// end ; end ;
56119: GO 55968
56121: POP
56122: POP
// end ;
56123: PPOPN 7
56125: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56126: LD_INT 0
56128: PPUSH
56129: PPUSH
// begin if not mc_bases then
56130: LD_EXP 46
56134: NOT
56135: IFFALSE 56139
// exit ;
56137: GO 56227
// for i = 1 to mc_bases do
56139: LD_ADDR_VAR 0 3
56143: PUSH
56144: DOUBLE
56145: LD_INT 1
56147: DEC
56148: ST_TO_ADDR
56149: LD_EXP 46
56153: PUSH
56154: FOR_TO
56155: IFFALSE 56225
// begin if factory in mc_bases [ i ] then
56157: LD_VAR 0 2
56161: PUSH
56162: LD_EXP 46
56166: PUSH
56167: LD_VAR 0 3
56171: ARRAY
56172: IN
56173: IFFALSE 56223
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56175: LD_ADDR_EXP 61
56179: PUSH
56180: LD_EXP 61
56184: PPUSH
56185: LD_VAR 0 3
56189: PUSH
56190: LD_EXP 61
56194: PUSH
56195: LD_VAR 0 3
56199: ARRAY
56200: PUSH
56201: LD_INT 1
56203: PLUS
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PPUSH
56209: LD_VAR 0 1
56213: PPUSH
56214: CALL 3175 0 3
56218: ST_TO_ADDR
// exit ;
56219: POP
56220: POP
56221: GO 56227
// end ; end ;
56223: GO 56154
56225: POP
56226: POP
// end ;
56227: PPOPN 4
56229: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56230: LD_VAR 0 1
56234: PPUSH
56235: CALL_OW 247
56239: PUSH
56240: LD_INT 2
56242: EQUAL
56243: IFFALSE 56247
// exit ;
56245: GO 56264
// if not kamikazed then
56247: LD_EXP 10
56251: NOT
56252: IFFALSE 56264
// kamikazed := unit ;
56254: LD_ADDR_EXP 10
56258: PUSH
56259: LD_VAR 0 1
56263: ST_TO_ADDR
// end ; end_of_file
56264: PPOPN 1
56266: END
// every 0 0$1 trigger game do
56267: LD_EXP 2
56271: IFFALSE 56301
56273: GO 56275
56275: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
56276: LD_INT 7
56278: PUSH
56279: LD_INT 6
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 6
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: PPUSH
56294: LD_INT 1750
56296: PPUSH
56297: CALL 56302 0 2
56301: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
56302: LD_INT 0
56304: PPUSH
56305: PPUSH
56306: PPUSH
// if not areas then
56307: LD_VAR 0 1
56311: NOT
56312: IFFALSE 56316
// exit ;
56314: GO 56428
// repeat wait ( time ) ;
56316: LD_VAR 0 2
56320: PPUSH
56321: CALL_OW 67
// p := rand ( 1 , 90 ) ;
56325: LD_ADDR_VAR 0 5
56329: PUSH
56330: LD_INT 1
56332: PPUSH
56333: LD_INT 90
56335: PPUSH
56336: CALL_OW 12
56340: ST_TO_ADDR
// for i in areas do
56341: LD_ADDR_VAR 0 4
56345: PUSH
56346: LD_VAR 0 1
56350: PUSH
56351: FOR_IN
56352: IFFALSE 56405
// begin if Prob ( p ) then
56354: LD_VAR 0 5
56358: PPUSH
56359: CALL_OW 13
56363: IFFALSE 56403
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
56365: LD_INT 1
56367: PPUSH
56368: LD_INT 5
56370: PPUSH
56371: CALL_OW 12
56375: PPUSH
56376: LD_VAR 0 4
56380: PPUSH
56381: LD_INT 1
56383: PPUSH
56384: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
56388: LD_INT 455
56390: PPUSH
56391: LD_INT 595
56393: PPUSH
56394: CALL_OW 12
56398: PPUSH
56399: CALL_OW 67
// end ; end ;
56403: GO 56351
56405: POP
56406: POP
// time := time + 0 0$3 ;
56407: LD_ADDR_VAR 0 2
56411: PUSH
56412: LD_VAR 0 2
56416: PUSH
56417: LD_INT 105
56419: PLUS
56420: ST_TO_ADDR
// until not game ;
56421: LD_EXP 2
56425: NOT
56426: IFFALSE 56316
// end ;
56428: LD_VAR 0 3
56432: RET
