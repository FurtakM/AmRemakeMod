// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16595 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 78633 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2200 0 0
// MC_Start ( ) ;
  78: CALL 17742 0 0
// Action ;
  82: CALL 7576 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 100 100$00 , 90 90$00 , 85 85$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 210000
 212: PUSH
 213: LD_INT 189000
 215: PUSH
 216: LD_INT 178500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 74
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 75
 312: PUSH
 313: LD_INT 28
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 38220 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 38220 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 38220 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 50
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 43
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 38646 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 44210 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 44210 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 44210 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 44210 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 44210 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 44210 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 44210 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 44210 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 44210 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 44210 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 44210 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 44210 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 44210 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 44210 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 44210 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1468
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: IN
1452: IFFALSE 1466
// SetClass ( i , class_soldier ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: CALL_OW 336
1466: GO 1429
1468: POP
1469: POP
// if tmp < 12 then
1470: LD_VAR 0 5
1474: PUSH
1475: LD_INT 12
1477: LESS
1478: IFFALSE 1572
// begin k := 16 - tmp ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_INT 16
1487: PUSH
1488: LD_VAR 0 5
1492: MINUS
1493: ST_TO_ADDR
// for i = 1 to k do
1494: LD_ADDR_VAR 0 2
1498: PUSH
1499: DOUBLE
1500: LD_INT 1
1502: DEC
1503: ST_TO_ADDR
1504: LD_VAR 0 3
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1570
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1512: LD_INT 0
1514: PPUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 12
1543: ARRAY
1544: PPUSH
1545: LD_INT 6
1547: PPUSH
1548: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1552: LD_ADDR_VAR 0 5
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: CALL_OW 44
1566: ADD
1567: ST_TO_ADDR
// end ;
1568: GO 1509
1570: POP
1571: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1572: LD_ADDR_EXP 20
1576: PUSH
1577: LD_STRING 1
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT 12
1585: PPUSH
1586: LD_INT -5
1588: PUSH
1589: LD_EXP 21
1593: PUSH
1594: LD_INT -2
1596: PUSH
1597: LD_INT -3
1599: PUSH
1600: LD_INT -5
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: PUSH
1610: LD_VAR 0 5
1614: ADD
1615: PUSH
1616: LD_INT -6
1618: PUSH
1619: LD_INT -4
1621: PUSH
1622: LD_EXP 30
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: ADD
1632: PPUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 42
1695: ST_TO_ADDR
// others := tmp diff selected ;
1696: LD_ADDR_VAR 0 8
1700: PUSH
1701: LD_VAR 0 5
1705: PUSH
1706: LD_EXP 20
1710: DIFF
1711: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1712: LD_ADDR_VAR 0 8
1716: PUSH
1717: LD_VAR 0 5
1721: PUSH
1722: LD_EXP 22
1726: PUSH
1727: LD_EXP 23
1731: PUSH
1732: LD_EXP 24
1736: PUSH
1737: LD_EXP 25
1741: PUSH
1742: LD_EXP 26
1746: PUSH
1747: LD_EXP 27
1751: PUSH
1752: LD_EXP 28
1756: PUSH
1757: LD_EXP 29
1761: PUSH
1762: LD_EXP 31
1766: PUSH
1767: LD_EXP 32
1771: PUSH
1772: LD_EXP 33
1776: PUSH
1777: LD_EXP 34
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: DIFF
1796: ST_TO_ADDR
// no_selected := others ;
1797: LD_ADDR_EXP 19
1801: PUSH
1802: LD_VAR 0 8
1806: ST_TO_ADDR
// if no_selected then
1807: LD_EXP 19
1811: IFFALSE 1825
// SaveCharacters ( no_selected , 11_others ) ;
1813: LD_EXP 19
1817: PPUSH
1818: LD_STRING 11_others
1820: PPUSH
1821: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1825: LD_ADDR_VAR 0 6
1829: PUSH
1830: LD_INT 3
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: LD_INT 4
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 1
1856: PUSH
1857: LD_INT 5
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: LD_INT 7
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 3
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 7
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ST_TO_ADDR
// for i in JMM ^ selected do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_EXP 21
1936: PUSH
1937: LD_EXP 20
1941: ADD
1942: PUSH
1943: FOR_IN
1944: IFFALSE 2133
// begin if GetClass ( i ) = 3 then
1946: LD_VAR 0 2
1950: PPUSH
1951: CALL_OW 257
1955: PUSH
1956: LD_INT 3
1958: EQUAL
1959: IFFALSE 2116
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1961: LD_ADDR_OWVAR 37
1965: PUSH
1966: LD_VAR 0 6
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PUSH
1975: LD_INT 1
1977: ARRAY
1978: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1979: LD_ADDR_OWVAR 39
1983: PUSH
1984: LD_VAR 0 6
1988: PUSH
1989: LD_INT 1
1991: ARRAY
1992: PUSH
1993: LD_INT 2
1995: ARRAY
1996: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1997: LD_ADDR_OWVAR 38
2001: PUSH
2002: LD_VAR 0 6
2006: PUSH
2007: LD_INT 1
2009: ARRAY
2010: PUSH
2011: LD_INT 3
2013: ARRAY
2014: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2015: LD_ADDR_OWVAR 40
2019: PUSH
2020: LD_VAR 0 6
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PUSH
2029: LD_INT 4
2031: ARRAY
2032: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2033: LD_ADDR_VAR 0 6
2037: PUSH
2038: LD_VAR 0 6
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 3
2050: ST_TO_ADDR
// veh := CreateVehicle ;
2051: LD_ADDR_VAR 0 7
2055: PUSH
2056: CALL_OW 45
2060: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2061: LD_VAR 0 7
2065: PPUSH
2066: LD_INT 8
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_VAR 0 7
2085: PPUSH
2086: CALL_OW 52
// if i = JMM then
2090: LD_VAR 0 2
2094: PUSH
2095: LD_EXP 21
2099: EQUAL
2100: IFFALSE 2114
// SetMark ( veh , 1 ) ;
2102: LD_VAR 0 7
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL_OW 242
// end else
2114: GO 2131
// PlaceUnitArea ( i , am_hum_start , false ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 9
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 49
// end ;
2131: GO 1943
2133: POP
2134: POP
// vc_chassis := us_medium_tracked ;
2135: LD_ADDR_OWVAR 37
2139: PUSH
2140: LD_INT 3
2142: ST_TO_ADDR
// vc_engine := engine_solar ;
2143: LD_ADDR_OWVAR 39
2147: PUSH
2148: LD_INT 2
2150: ST_TO_ADDR
// vc_control := control_computer ;
2151: LD_ADDR_OWVAR 38
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// vc_weapon := us_radar ;
2159: LD_ADDR_OWVAR 40
2163: PUSH
2164: LD_INT 11
2166: ST_TO_ADDR
// veh := CreateVehicle ;
2167: LD_ADDR_VAR 0 7
2171: PUSH
2172: CALL_OW 45
2176: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2177: LD_VAR 0 7
2181: PPUSH
2182: LD_INT 87
2184: PPUSH
2185: LD_INT 142
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 48
// end ; end_of_file
2195: LD_VAR 0 1
2199: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2208: LD_ADDR_VAR 0 5
2212: PUSH
2213: LD_INT 6
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: LD_INT 8
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_OWVAR 67
2231: ARRAY
2232: ST_TO_ADDR
// uc_side := 2 ;
2233: LD_ADDR_OWVAR 20
2237: PUSH
2238: LD_INT 2
2240: ST_TO_ADDR
// uc_nation := 2 ;
2241: LD_ADDR_OWVAR 21
2245: PUSH
2246: LD_INT 2
2248: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2249: LD_ADDR_OWVAR 37
2253: PUSH
2254: LD_INT 14
2256: ST_TO_ADDR
// vc_engine := engine_siberite ;
2257: LD_ADDR_OWVAR 39
2261: PUSH
2262: LD_INT 3
2264: ST_TO_ADDR
// vc_control := control_manual ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 1
2272: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 31
2280: ST_TO_ADDR
// for i = 1 to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_INT 3
2293: PUSH
2294: FOR_TO
2295: IFFALSE 2379
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2297: LD_INT 0
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: LD_VAR 0 5
2307: PPUSH
2308: CALL_OW 380
// un := CreateVehicle ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: CALL_OW 45
2321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2322: LD_VAR 0 4
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: PPUSH
2338: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2342: LD_VAR 0 4
2346: PPUSH
2347: LD_INT 156
2349: PPUSH
2350: LD_INT 15
2352: PPUSH
2353: LD_INT 6
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PPUSH
2373: CALL_OW 52
// end ;
2377: GO 2294
2379: POP
2380: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2381: LD_ADDR_EXP 37
2385: PUSH
2386: LD_INT 94
2388: PPUSH
2389: LD_INT 28
2391: PPUSH
2392: LD_STRING dammam
2394: PPUSH
2395: LD_VAR 0 5
2399: PPUSH
2400: LD_INT 10000
2402: PUSH
2403: LD_INT 1000
2405: PUSH
2406: LD_INT 300
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: PPUSH
2414: LD_INT 1
2416: NEG
2417: PUSH
2418: LD_INT 5
2420: PUSH
2421: LD_INT 1
2423: NEG
2424: PUSH
2425: LD_INT 4
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL 54252 0 6
2438: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2439: LD_ADDR_EXP 37
2443: PUSH
2444: LD_EXP 37
2448: PUSH
2449: LD_INT 122
2451: PPUSH
2452: LD_INT 25
2454: PPUSH
2455: LD_STRING 
2457: PPUSH
2458: LD_VAR 0 5
2462: PPUSH
2463: LD_INT 500
2465: PUSH
2466: LD_INT 60
2468: PUSH
2469: LD_INT 0
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: PPUSH
2477: LD_INT 1
2479: NEG
2480: PUSH
2481: LD_INT 4
2483: PUSH
2484: LD_INT 2
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PPUSH
2496: CALL 54252 0 6
2500: UNION
2501: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2502: LD_ADDR_EXP 35
2506: PUSH
2507: LD_INT 45
2509: PPUSH
2510: LD_INT 24
2512: PPUSH
2513: LD_STRING jeddah
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 700
2523: PUSH
2524: LD_INT 300
2526: PUSH
2527: LD_INT 10
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PPUSH
2535: LD_INT 1
2537: NEG
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: PPUSH
2554: CALL 54252 0 6
2558: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2559: LD_ADDR_EXP 36
2563: PUSH
2564: LD_INT 7
2566: PPUSH
2567: LD_INT 27
2569: PPUSH
2570: LD_STRING riyadh
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 500
2580: PUSH
2581: LD_INT 60
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PPUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 2
2597: PUSH
2598: LD_INT 3
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL 54252 0 6
2614: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2615: LD_ADDR_EXP 39
2619: PUSH
2620: LD_INT 204
2622: PPUSH
2623: LD_INT 26
2625: PPUSH
2626: LD_STRING 
2628: PPUSH
2629: LD_VAR 0 5
2633: PPUSH
2634: LD_INT 500
2636: PUSH
2637: LD_INT 50
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: PPUSH
2648: LD_INT 1
2650: NEG
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: LD_INT 2
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL 54252 0 6
2671: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2672: LD_ADDR_EXP 50
2676: PUSH
2677: LD_EXP 37
2681: PUSH
2682: LD_EXP 35
2686: PUSH
2687: LD_EXP 39
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2697: LD_ADDR_VAR 0 2
2701: PUSH
2702: LD_INT 22
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 30
2714: PUSH
2715: LD_INT 31
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 58
2724: PUSH
2725: EMPTY
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2864
// begin if GetBase ( i ) then
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 274
2750: IFFALSE 2754
// continue ;
2752: GO 2738
// d := GetDir ( i ) ;
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PPUSH
2764: CALL_OW 254
2768: ST_TO_ADDR
// if d < 3 then
2769: LD_VAR 0 3
2773: PUSH
2774: LD_INT 3
2776: LESS
2777: IFFALSE 2795
// d := d + 3 else
2779: LD_ADDR_VAR 0 3
2783: PUSH
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 3
2791: PLUS
2792: ST_TO_ADDR
2793: GO 2809
// d := d - 3 ;
2795: LD_ADDR_VAR 0 3
2799: PUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 3
2807: MINUS
2808: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2809: LD_INT 0
2811: PPUSH
2812: LD_INT 8
2814: PPUSH
2815: LD_VAR 0 5
2819: PPUSH
2820: CALL_OW 380
// un := CreateHuman ;
2824: LD_ADDR_VAR 0 4
2828: PUSH
2829: CALL_OW 44
2833: ST_TO_ADDR
// SetDir ( un , d ) ;
2834: LD_VAR 0 4
2838: PPUSH
2839: LD_VAR 0 3
2843: PPUSH
2844: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2848: LD_VAR 0 4
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 52
// end ;
2862: GO 2738
2864: POP
2865: POP
// if Difficulty > 1 then
2866: LD_OWVAR 67
2870: PUSH
2871: LD_INT 1
2873: GREATER
2874: IFFALSE 3245
// begin ar_kamikadze := [ ] ;
2876: LD_ADDR_EXP 42
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2883: LD_INT 0
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: CALL_OW 380
// un := CreateHuman ;
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: CALL_OW 44
2907: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 23
2927: PPUSH
2928: LD_INT 44
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 48
// ComCrawl ( un ) ;
2938: LD_VAR 0 4
2942: PPUSH
2943: CALL_OW 137
// un := CreateHuman ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: CALL_OW 44
2956: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2957: LD_VAR 0 4
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 30
2976: PPUSH
2977: LD_INT 39
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 48
// ComCrawl ( un ) ;
2987: LD_VAR 0 4
2991: PPUSH
2992: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2996: LD_INT 0
2998: PPUSH
2999: LD_INT 17
3001: PPUSH
3002: LD_VAR 0 5
3006: PPUSH
3007: CALL_OW 380
// un := CreateHuman ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 45
3040: PPUSH
3041: LD_INT 86
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 48
// ComHold ( un ) ;
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3060: LD_ADDR_EXP 42
3064: PUSH
3065: LD_EXP 42
3069: PPUSH
3070: LD_EXP 42
3074: PUSH
3075: LD_INT 1
3077: PLUS
3078: PPUSH
3079: LD_VAR 0 4
3083: PPUSH
3084: CALL_OW 1
3088: ST_TO_ADDR
// un := CreateHuman ;
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3099: LD_VAR 0 4
3103: PPUSH
3104: LD_INT 3
3106: PPUSH
3107: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 60
3118: PPUSH
3119: LD_INT 85
3121: PPUSH
3122: LD_INT 0
3124: PPUSH
3125: CALL_OW 48
// ComHold ( un ) ;
3129: LD_VAR 0 4
3133: PPUSH
3134: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3138: LD_ADDR_EXP 42
3142: PUSH
3143: LD_EXP 42
3147: PPUSH
3148: LD_EXP 42
3152: PUSH
3153: LD_INT 1
3155: PLUS
3156: PPUSH
3157: LD_VAR 0 4
3161: PPUSH
3162: CALL_OW 1
3166: ST_TO_ADDR
// un := CreateHuman ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: CALL_OW 44
3176: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3177: LD_VAR 0 4
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 222
3196: PPUSH
3197: LD_INT 166
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 48
// ComHold ( un ) ;
3207: LD_VAR 0 4
3211: PPUSH
3212: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3216: LD_ADDR_EXP 42
3220: PUSH
3221: LD_EXP 42
3225: PPUSH
3226: LD_EXP 42
3230: PUSH
3231: LD_INT 1
3233: PLUS
3234: PPUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: CALL_OW 1
3244: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3245: LD_ADDR_EXP 40
3249: PUSH
3250: EMPTY
3251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_VAR 0 5
3262: PPUSH
3263: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3267: LD_ADDR_OWVAR 26
3271: PUSH
3272: LD_STRING Pavel Grigorovic
3274: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3275: LD_ADDR_OWVAR 33
3279: PUSH
3280: LD_STRING SecondCharsGal
3282: ST_TO_ADDR
// hc_face_number := 4 ;
3283: LD_ADDR_OWVAR 34
3287: PUSH
3288: LD_INT 4
3290: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3291: LD_ADDR_EXP 40
3295: PUSH
3296: LD_EXP 40
3300: PPUSH
3301: LD_INT 1
3303: PPUSH
3304: CALL_OW 44
3308: PPUSH
3309: CALL_OW 1
3313: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3314: LD_INT 2
3316: PPUSH
3317: LD_INT 4
3319: PPUSH
3320: LD_VAR 0 5
3324: PPUSH
3325: CALL_OW 380
// hc_name := Lucy Sebel ;
3329: LD_ADDR_OWVAR 26
3333: PUSH
3334: LD_STRING Lucy Sebel
3336: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3337: LD_ADDR_OWVAR 33
3341: PUSH
3342: LD_STRING SecondCharsGal
3344: ST_TO_ADDR
// hc_face_number := 15 ;
3345: LD_ADDR_OWVAR 34
3349: PUSH
3350: LD_INT 15
3352: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3353: LD_ADDR_EXP 40
3357: PUSH
3358: LD_EXP 40
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: CALL_OW 44
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3376: LD_INT 2
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_VAR 0 5
3386: PPUSH
3387: CALL_OW 380
// hc_gallery :=  ;
3391: LD_ADDR_OWVAR 33
3395: PUSH
3396: LD_STRING 
3398: ST_TO_ADDR
// hc_name :=  ;
3399: LD_ADDR_OWVAR 26
3403: PUSH
3404: LD_STRING 
3406: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3407: LD_ADDR_EXP 40
3411: PUSH
3412: LD_EXP 40
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 44
3424: PPUSH
3425: CALL_OW 1
3429: ST_TO_ADDR
// hc_sex := sex_male ;
3430: LD_ADDR_OWVAR 27
3434: PUSH
3435: LD_INT 1
3437: ST_TO_ADDR
// hc_class = 11 ;
3438: LD_ADDR_OWVAR 28
3442: PUSH
3443: LD_INT 11
3445: ST_TO_ADDR
// hc_gallery = sandar ;
3446: LD_ADDR_OWVAR 33
3450: PUSH
3451: LD_STRING sandar
3453: ST_TO_ADDR
// hc_face_number = 33 ;
3454: LD_ADDR_OWVAR 34
3458: PUSH
3459: LD_INT 33
3461: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3462: LD_ADDR_OWVAR 26
3466: PUSH
3467: LD_STRING Thabit Muhair Saliba
3469: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3470: LD_ADDR_OWVAR 31
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: LD_INT 0
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: ST_TO_ADDR
// Saliba = CreateHuman ;
3493: LD_ADDR_EXP 44
3497: PUSH
3498: CALL_OW 44
3502: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3503: LD_EXP 44
3507: PPUSH
3508: LD_INT 7
3510: PPUSH
3511: CALL_OW 52
// if gensher_active then
3515: LD_EXP 18
3519: IFFALSE 3546
// begin Gensher = NewCharacter ( Dietrich ) ;
3521: LD_ADDR_EXP 45
3525: PUSH
3526: LD_STRING Dietrich
3528: PPUSH
3529: CALL_OW 25
3533: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3534: LD_EXP 45
3538: PPUSH
3539: LD_INT 94
3541: PPUSH
3542: CALL_OW 52
// end ; InitHc ;
3546: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3550: LD_ADDR_EXP 41
3554: PUSH
3555: EMPTY
3556: ST_TO_ADDR
// for i = 1 to 5 do
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: DOUBLE
3563: LD_INT 1
3565: DEC
3566: ST_TO_ADDR
3567: LD_INT 5
3569: PUSH
3570: FOR_TO
3571: IFFALSE 3743
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3573: LD_INT 13
3575: PUSH
3576: LD_INT 14
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 12
3593: ARRAY
3594: PPUSH
3595: LD_INT 1
3597: PUSH
3598: LD_INT 2
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: CALL_OW 12
3615: ARRAY
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 25
3622: PUSH
3623: LD_INT 27
3625: PUSH
3626: LD_INT 26
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 1
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: CALL_OW 12
3644: ARRAY
3645: PPUSH
3646: LD_INT 60
3648: PPUSH
3649: LD_INT 100
3651: PPUSH
3652: CALL_OW 12
3656: PPUSH
3657: CALL 50843 0 5
// un := CreateVehicle ;
3661: LD_ADDR_VAR 0 4
3665: PUSH
3666: CALL_OW 45
3670: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3671: LD_ADDR_EXP 41
3675: PUSH
3676: LD_EXP 41
3680: PPUSH
3681: LD_EXP 41
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: PPUSH
3690: LD_VAR 0 4
3694: PPUSH
3695: CALL_OW 1
3699: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: CALL_OW 12
3715: PPUSH
3716: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_INT 124
3727: PPUSH
3728: LD_INT 141
3730: PPUSH
3731: LD_INT 8
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL_OW 50
// end ;
3741: GO 3570
3743: POP
3744: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3745: LD_ADDR_EXP 43
3749: PUSH
3750: EMPTY
3751: PUSH
3752: EMPTY
3753: PUSH
3754: EMPTY
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 3
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: FOR_TO
3792: IFFALSE 4006
// for i = 1 to 3 do
3794: LD_ADDR_VAR 0 2
3798: PUSH
3799: DOUBLE
3800: LD_INT 1
3802: DEC
3803: ST_TO_ADDR
3804: LD_INT 3
3806: PUSH
3807: FOR_TO
3808: IFFALSE 4002
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3810: LD_INT 14
3812: PPUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: PPUSH
3835: LD_INT 1
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: PPUSH
3857: LD_INT 25
3859: PUSH
3860: LD_INT 27
3862: PUSH
3863: LD_INT 26
3865: PUSH
3866: LD_INT 28
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 4
3880: PPUSH
3881: CALL_OW 12
3885: ARRAY
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL 50843 0 5
// un := CreateVehicle ;
3894: LD_ADDR_VAR 0 4
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3904: LD_ADDR_EXP 43
3908: PUSH
3909: LD_EXP 43
3913: PPUSH
3914: LD_VAR 0 2
3918: PUSH
3919: LD_EXP 43
3923: PUSH
3924: LD_VAR 0 2
3928: ARRAY
3929: PUSH
3930: LD_INT 1
3932: PLUS
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL 50965 0 3
3947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3948: LD_VAR 0 4
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 5
3958: PPUSH
3959: CALL_OW 12
3963: PPUSH
3964: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3968: LD_VAR 0 4
3972: PPUSH
3973: LD_INT 20
3975: PUSH
3976: LD_INT 21
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: LIST
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 49
// end ;
4000: GO 3807
4002: POP
4003: POP
4004: GO 3791
4006: POP
4007: POP
// InitHc ;
4008: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4012: LD_INT 4
4014: PPUSH
4015: LD_INT 5
4017: PPUSH
4018: LD_INT 10
4020: PPUSH
4021: LD_INT 5
4023: PPUSH
4024: LD_INT 0
4026: PPUSH
4027: CALL_OW 58
// end ;
4031: LD_VAR 0 1
4035: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4036: LD_EXP 42
4040: IFFALSE 4114
4042: GO 4044
4044: DISABLE
4045: LD_INT 0
4047: PPUSH
// begin enable ;
4048: ENABLE
// for i in ar_kamikadze do
4049: LD_ADDR_VAR 0 1
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: FOR_IN
4060: IFFALSE 4112
// if See ( 1 , i ) then
4062: LD_INT 1
4064: PPUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: CALL_OW 292
4074: IFFALSE 4110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_INT 81
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PPUSH
4091: CALL_OW 69
4095: PPUSH
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 74
4105: PPUSH
4106: CALL_OW 115
4110: GO 4059
4112: POP
4113: POP
// end ;
4114: PPOPN 1
4116: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4117: LD_EXP 13
4121: IFFALSE 4438
4123: GO 4125
4125: DISABLE
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4132: LD_INT 35
4134: PPUSH
4135: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4139: LD_INT 1
4141: PPUSH
4142: CALL 38992 0 1
4146: PUSH
4147: LD_INT 0
4149: EQUAL
4150: IFFALSE 4132
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 14
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: LD_INT 32
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: PPUSH
4176: CALL 38538 0 2
// repeat wait ( 0 0$1 ) ;
4180: LD_INT 35
4182: PPUSH
4183: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4187: LD_EXP 69
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: LD_INT 33
4198: PUSH
4199: LD_INT 2
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 32
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 72
4224: IFFALSE 4180
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: LD_EXP 69
4235: PUSH
4236: LD_INT 1
4238: ARRAY
4239: PPUSH
4240: LD_INT 33
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 34
4252: PUSH
4253: LD_INT 32
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PPUSH
4264: CALL_OW 72
4268: PUSH
4269: LD_INT 1
4271: ARRAY
4272: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4273: LD_ADDR_VAR 0 4
4277: PUSH
4278: LD_INT 5
4280: PPUSH
4281: CALL_OW 469
4285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4286: LD_INT 35
4288: PPUSH
4289: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4293: LD_ADDR_VAR 0 4
4297: PUSH
4298: LD_INT 5
4300: PPUSH
4301: CALL_OW 469
4305: ST_TO_ADDR
// tmp := 100 ;
4306: LD_ADDR_VAR 0 3
4310: PUSH
4311: LD_INT 100
4313: ST_TO_ADDR
// if pos then
4314: LD_VAR 0 4
4318: IFFALSE 4358
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PPUSH
4337: LD_VAR 0 4
4341: PUSH
4342: LD_INT 2
4344: ARRAY
4345: PPUSH
4346: LD_INT 20
4348: PPUSH
4349: CALL 51861 0 4
4353: PUSH
4354: LD_INT 4
4356: ARRAY
4357: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4358: LD_VAR 0 4
4362: PUSH
4363: LD_EXP 14
4367: NOT
4368: AND
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 10
4377: LESS
4378: AND
4379: IFFALSE 4286
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4381: LD_VAR 0 2
4385: PPUSH
4386: LD_VAR 0 4
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: PPUSH
4395: LD_VAR 0 4
4399: PUSH
4400: LD_INT 2
4402: ARRAY
4403: PPUSH
4404: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4408: LD_VAR 0 2
4412: PPUSH
4413: LD_INT 198
4415: PPUSH
4416: LD_INT 113
4418: PPUSH
4419: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4423: LD_VAR 0 2
4427: PPUSH
4428: LD_INT 124
4430: PPUSH
4431: LD_INT 7
4433: PPUSH
4434: CALL_OW 171
// end ;
4438: PPOPN 4
4440: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4441: LD_EXP 6
4445: IFFALSE 7102
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: LD_INT 6
4470: PUSH
4471: LD_INT 7
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: LD_OWVAR 67
4483: ARRAY
4484: ST_TO_ADDR
// coords := [ ] ;
4485: LD_ADDR_VAR 0 5
4489: PUSH
4490: EMPTY
4491: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4492: LD_ADDR_VAR 0 6
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: LD_INT 0
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 14
4544: PUSH
4545: LD_INT 1
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: LD_INT 28
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 14
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: LD_INT 25
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 14
4580: PUSH
4581: LD_INT 1
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 28
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 14
4598: PUSH
4599: LD_INT 1
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: LD_INT 29
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL 38538 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4624: LD_INT 21000
4626: PUSH
4627: LD_INT 19950
4629: PUSH
4630: LD_INT 18900
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: LD_OWVAR 67
4642: ARRAY
4643: PPUSH
4644: CALL_OW 67
// InitHc ;
4648: CALL_OW 19
// InitUc ;
4652: CALL_OW 18
// uc_side := 2 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 2
4663: ST_TO_ADDR
// uc_nation := 2 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 2
4671: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: EMPTY
4678: PUSH
4679: EMPTY
4680: PUSH
4681: EMPTY
4682: PUSH
4683: EMPTY
4684: PUSH
4685: EMPTY
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_VAR 0 3
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_EXP 69
4711: PUSH
4712: LD_INT 1
4714: ARRAY
4715: PUSH
4716: LD_INT 34
4718: PUSH
4719: LD_INT 32
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: DIFF
4731: PPUSH
4732: CALL_OW 1
4736: ST_TO_ADDR
// for i = 1 to Difficulty do
4737: LD_ADDR_VAR 0 1
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_OWVAR 67
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4891
// begin uc_side := 2 ;
4755: LD_ADDR_OWVAR 20
4759: PUSH
4760: LD_INT 2
4762: ST_TO_ADDR
// uc_nation := 2 ;
4763: LD_ADDR_OWVAR 21
4767: PUSH
4768: LD_INT 2
4770: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4771: LD_INT 13
4773: PPUSH
4774: LD_INT 3
4776: PPUSH
4777: LD_INT 5
4779: PPUSH
4780: LD_INT 29
4782: PPUSH
4783: LD_INT 100
4785: PPUSH
4786: CALL 50843 0 5
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: LD_VAR 0 3
4809: PPUSH
4810: LD_INT 1
4812: PUSH
4813: LD_VAR 0 3
4817: PUSH
4818: LD_INT 1
4820: ARRAY
4821: PUSH
4822: LD_INT 1
4824: PLUS
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PPUSH
4830: LD_VAR 0 2
4834: PPUSH
4835: CALL 50965 0 3
4839: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4840: LD_VAR 0 2
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 16
4859: PPUSH
4860: LD_INT 0
4862: PPUSH
4863: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4867: LD_VAR 0 2
4871: PPUSH
4872: LD_INT 51
4874: PPUSH
4875: LD_INT 10
4877: PPUSH
4878: CALL_OW 111
// wait ( 0 0$2 ) ;
4882: LD_INT 70
4884: PPUSH
4885: CALL_OW 67
// end ;
4889: GO 4752
4891: POP
4892: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4893: LD_ADDR_VAR 0 5
4897: PUSH
4898: LD_INT 51
4900: PUSH
4901: LD_INT 24
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 75
4910: PUSH
4911: LD_INT 90
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4922: LD_INT 1
4924: PPUSH
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 1
4932: ARRAY
4933: PPUSH
4934: LD_VAR 0 5
4938: PPUSH
4939: LD_VAR 0 6
4943: PPUSH
4944: CALL 38829 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4948: LD_ADDR_VAR 0 1
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 2
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_OWVAR 67
4976: ARRAY
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5079
// begin uc_side := 2 ;
4981: LD_ADDR_OWVAR 20
4985: PUSH
4986: LD_INT 2
4988: ST_TO_ADDR
// uc_nation := 2 ;
4989: LD_ADDR_OWVAR 21
4993: PUSH
4994: LD_INT 2
4996: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4997: LD_INT 0
4999: PPUSH
5000: LD_INT 17
5002: PPUSH
5003: LD_VAR 0 4
5007: PPUSH
5008: CALL_OW 380
// un := CreateHuman ;
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: CALL_OW 44
5021: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 2
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: PLUS
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL 50965 0 3
5061: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_INT 13
5069: PPUSH
5070: LD_INT 0
5072: PPUSH
5073: CALL_OW 49
// end ;
5077: GO 4978
5079: POP
5080: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 1
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 2
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5231
// begin uc_side := 2 ;
5114: LD_ADDR_OWVAR 20
5118: PUSH
5119: LD_INT 2
5121: ST_TO_ADDR
// uc_nation := 2 ;
5122: LD_ADDR_OWVAR 21
5126: PUSH
5127: LD_INT 2
5129: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 1
5135: PUSH
5136: LD_INT 8
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 1
5145: PPUSH
5146: LD_INT 2
5148: PPUSH
5149: CALL_OW 12
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: CALL_OW 380
// un := CreateHuman ;
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: CALL_OW 44
5173: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5174: LD_ADDR_VAR 0 3
5178: PUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 2
5186: PUSH
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 2
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: PLUS
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: LD_VAR 0 2
5208: PPUSH
5209: CALL 50965 0 3
5213: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5214: LD_VAR 0 2
5218: PPUSH
5219: LD_INT 13
5221: PPUSH
5222: LD_INT 0
5224: PPUSH
5225: CALL_OW 49
// end ;
5229: GO 5111
5231: POP
5232: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5233: LD_ADDR_VAR 0 5
5237: PUSH
5238: LD_INT 67
5240: PUSH
5241: LD_INT 112
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 85
5250: PUSH
5251: LD_INT 130
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5262: LD_INT 2
5264: PPUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 2
5272: ARRAY
5273: PPUSH
5274: LD_VAR 0 5
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL 38829 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5288: LD_ADDR_VAR 0 1
5292: PUSH
5293: DOUBLE
5294: LD_INT 1
5296: DEC
5297: ST_TO_ADDR
5298: LD_INT 1
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 3
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: PUSH
5312: LD_OWVAR 67
5316: ARRAY
5317: PUSH
5318: FOR_TO
5319: IFFALSE 5419
// begin uc_side := 2 ;
5321: LD_ADDR_OWVAR 20
5325: PUSH
5326: LD_INT 2
5328: ST_TO_ADDR
// uc_nation := 2 ;
5329: LD_ADDR_OWVAR 21
5333: PUSH
5334: LD_INT 2
5336: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 17
5342: PPUSH
5343: LD_VAR 0 4
5347: PPUSH
5348: CALL_OW 380
// un := CreateHuman ;
5352: LD_ADDR_VAR 0 2
5356: PUSH
5357: CALL_OW 44
5361: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_VAR 0 3
5371: PPUSH
5372: LD_INT 3
5374: PUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 3
5382: ARRAY
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL 50965 0 3
5401: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_INT 14
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// end ;
5417: GO 5318
5419: POP
5420: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5421: LD_ADDR_VAR 0 5
5425: PUSH
5426: LD_INT 148
5428: PUSH
5429: LD_INT 158
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 148
5438: PUSH
5439: LD_INT 158
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5450: LD_INT 3
5452: PPUSH
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 3
5460: ARRAY
5461: PPUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: LD_VAR 0 6
5471: PPUSH
5472: CALL 38829 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5476: LD_ADDR_VAR 0 1
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_INT 3
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: LD_INT 4
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: PUSH
5500: LD_OWVAR 67
5504: ARRAY
5505: PUSH
5506: FOR_TO
5507: IFFALSE 5731
// begin uc_side := 2 ;
5509: LD_ADDR_OWVAR 20
5513: PUSH
5514: LD_INT 2
5516: ST_TO_ADDR
// uc_nation := 2 ;
5517: LD_ADDR_OWVAR 21
5521: PUSH
5522: LD_INT 2
5524: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5525: LD_INT 14
5527: PPUSH
5528: LD_INT 3
5530: PPUSH
5531: LD_INT 1
5533: PUSH
5534: LD_INT 5
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 1
5543: PPUSH
5544: LD_INT 2
5546: PPUSH
5547: CALL_OW 12
5551: ARRAY
5552: PPUSH
5553: LD_INT 27
5555: PUSH
5556: LD_INT 26
5558: PUSH
5559: LD_INT 28
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 3
5572: PPUSH
5573: CALL_OW 12
5577: ARRAY
5578: PPUSH
5579: LD_INT 100
5581: PPUSH
5582: CALL 50843 0 5
// un := CreateVehicle ;
5586: LD_ADDR_VAR 0 2
5590: PUSH
5591: CALL_OW 45
5595: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_INT 4
5608: PUSH
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 4
5616: ARRAY
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL 50965 0 3
5635: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 5
5643: PPUSH
5644: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_INT 15
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 49
// if GetControl ( un ) = control_manual then
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 263
5672: PUSH
5673: LD_INT 1
5675: EQUAL
5676: IFFALSE 5707
// begin PrepareHuman ( false , 3 , skill ) ;
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 3
5683: PPUSH
5684: LD_VAR 0 4
5688: PPUSH
5689: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5693: CALL_OW 44
5697: PPUSH
5698: LD_VAR 0 2
5702: PPUSH
5703: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5707: LD_VAR 0 2
5711: PPUSH
5712: LD_INT 179
5714: PPUSH
5715: LD_INT 135
5717: PPUSH
5718: CALL_OW 111
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// end ;
5729: GO 5506
5731: POP
5732: POP
// vc_chassis := 15 ;
5733: LD_ADDR_OWVAR 37
5737: PUSH
5738: LD_INT 15
5740: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_VAR 0 3
5750: PPUSH
5751: LD_INT 4
5753: PUSH
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 4
5761: ARRAY
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PPUSH
5771: CALL_OW 45
5775: PPUSH
5776: CALL 50965 0 3
5780: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5781: LD_VAR 0 3
5785: PUSH
5786: LD_INT 4
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 4
5797: ARRAY
5798: ARRAY
5799: PPUSH
5800: LD_INT 15
5802: PPUSH
5803: LD_INT 0
5805: PPUSH
5806: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5810: LD_INT 0
5812: PPUSH
5813: LD_INT 11
5815: PPUSH
5816: LD_VAR 0 4
5820: PPUSH
5821: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5825: LD_ADDR_VAR 0 3
5829: PUSH
5830: LD_VAR 0 3
5834: PPUSH
5835: LD_INT 4
5837: PUSH
5838: LD_VAR 0 3
5842: PUSH
5843: LD_INT 4
5845: ARRAY
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PPUSH
5855: CALL_OW 44
5859: PPUSH
5860: CALL 50965 0 3
5864: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5865: LD_VAR 0 3
5869: PUSH
5870: LD_INT 4
5872: ARRAY
5873: PUSH
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: ARRAY
5883: PPUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 4
5891: ARRAY
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 4
5900: ARRAY
5901: PUSH
5902: LD_INT 1
5904: MINUS
5905: ARRAY
5906: PPUSH
5907: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5911: LD_ADDR_VAR 0 5
5915: PUSH
5916: LD_INT 148
5918: PUSH
5919: LD_INT 140
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5929: LD_INT 1
5931: PPUSH
5932: LD_VAR 0 3
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_VAR 0 5
5945: PPUSH
5946: LD_VAR 0 6
5950: PPUSH
5951: CALL 38829 0 4
// if gensher_active then
5955: LD_EXP 18
5959: IFFALSE 6344
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5961: LD_EXP 45
5965: PPUSH
5966: LD_STRING D10-Diet-1
5968: PPUSH
5969: CALL_OW 94
// for i = 1 to 2 do
5973: LD_ADDR_VAR 0 1
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_INT 2
5985: PUSH
5986: FOR_TO
5987: IFFALSE 6125
// begin uc_side := 2 ;
5989: LD_ADDR_OWVAR 20
5993: PUSH
5994: LD_INT 2
5996: ST_TO_ADDR
// uc_nation := 2 ;
5997: LD_ADDR_OWVAR 21
6001: PUSH
6002: LD_INT 2
6004: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6005: LD_INT 13
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 5
6013: PPUSH
6014: LD_INT 29
6016: PPUSH
6017: LD_INT 100
6019: PPUSH
6020: CALL 50843 0 5
// un := CreateVehicle ;
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: CALL_OW 45
6033: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6034: LD_ADDR_VAR 0 3
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: LD_INT 5
6046: PUSH
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 5
6054: ARRAY
6055: PUSH
6056: LD_INT 1
6058: PLUS
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PPUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: CALL 50965 0 3
6073: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 23
6093: PPUSH
6094: LD_INT 0
6096: PPUSH
6097: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: LD_INT 152
6111: PPUSH
6112: CALL_OW 111
// wait ( 0 0$2 ) ;
6116: LD_INT 70
6118: PPUSH
6119: CALL_OW 67
// end ;
6123: GO 5986
6125: POP
6126: POP
// for i = 1 to 3 do
6127: LD_ADDR_VAR 0 1
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_INT 3
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6298
// begin uc_side := 2 ;
6143: LD_ADDR_OWVAR 20
6147: PUSH
6148: LD_INT 2
6150: ST_TO_ADDR
// uc_nation := 2 ;
6151: LD_ADDR_OWVAR 21
6155: PUSH
6156: LD_INT 2
6158: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6159: LD_INT 14
6161: PPUSH
6162: LD_INT 3
6164: PPUSH
6165: LD_INT 5
6167: PPUSH
6168: LD_INT 27
6170: PUSH
6171: LD_INT 28
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 1
6180: PPUSH
6181: LD_INT 2
6183: PPUSH
6184: CALL_OW 12
6188: ARRAY
6189: PPUSH
6190: LD_INT 100
6192: PPUSH
6193: CALL 50843 0 5
// un := CreateVehicle ;
6197: LD_ADDR_VAR 0 2
6201: PUSH
6202: CALL_OW 45
6206: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_VAR 0 3
6216: PPUSH
6217: LD_INT 5
6219: PUSH
6220: LD_VAR 0 3
6224: PUSH
6225: LD_INT 5
6227: ARRAY
6228: PUSH
6229: LD_INT 1
6231: PLUS
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PPUSH
6237: LD_VAR 0 2
6241: PPUSH
6242: CALL 50965 0 3
6246: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6247: LD_VAR 0 2
6251: PPUSH
6252: LD_INT 0
6254: PPUSH
6255: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6259: LD_VAR 0 2
6263: PPUSH
6264: LD_INT 23
6266: PPUSH
6267: LD_INT 0
6269: PPUSH
6270: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 85
6281: PPUSH
6282: LD_INT 152
6284: PPUSH
6285: CALL_OW 111
// wait ( 0 0$2 ) ;
6289: LD_INT 70
6291: PPUSH
6292: CALL_OW 67
// end ;
6296: GO 6140
6298: POP
6299: POP
// coords := [ [ 97 , 143 ] ] ;
6300: LD_ADDR_VAR 0 5
6304: PUSH
6305: LD_INT 97
6307: PUSH
6308: LD_INT 143
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6318: LD_INT 1
6320: PPUSH
6321: LD_VAR 0 3
6325: PUSH
6326: LD_INT 5
6328: ARRAY
6329: PPUSH
6330: LD_VAR 0 5
6334: PPUSH
6335: LD_VAR 0 6
6339: PPUSH
6340: CALL 38829 0 4
// end ; Wait ( 13 13$00 ) ;
6344: LD_INT 27300
6346: PPUSH
6347: CALL_OW 67
// tmp := [ ] ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: EMPTY
6357: ST_TO_ADDR
// w := 1 ;
6358: LD_ADDR_VAR 0 7
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// repeat tmp := [ ] ;
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: EMPTY
6372: ST_TO_ADDR
// if w mod 4 = 0 then
6373: LD_VAR 0 7
6377: PUSH
6378: LD_INT 4
6380: MOD
6381: PUSH
6382: LD_INT 0
6384: EQUAL
6385: IFFALSE 6472
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6387: LD_ADDR_VAR 0 8
6391: PUSH
6392: LD_INT 11
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 11
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: LD_INT 2
6418: PUSH
6419: LD_INT 24
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 11
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 24
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 1
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 24
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6574
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: LD_INT 14
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 28
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 14
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 25
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 14
6515: PUSH
6516: LD_INT 1
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: LD_INT 28
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 14
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 29
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 11
6551: PUSH
6552: LD_INT 1
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: ST_TO_ADDR
// if w mod 3 = 0 then
6574: LD_VAR 0 7
6578: PUSH
6579: LD_INT 3
6581: MOD
6582: PUSH
6583: LD_INT 0
6585: EQUAL
6586: IFFALSE 6662
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6588: LD_ADDR_VAR 0 8
6592: PUSH
6593: LD_VAR 0 8
6597: PPUSH
6598: LD_INT 1
6600: PUSH
6601: LD_VAR 0 8
6605: PUSH
6606: LD_VAR 0 1
6610: ARRAY
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: LD_INT 14
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 28
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 1
6641: PPUSH
6642: LD_INT 2
6644: PPUSH
6645: CALL_OW 12
6649: ARRAY
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL 50965 0 3
6661: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6662: LD_INT 1
6664: PPUSH
6665: LD_VAR 0 8
6669: PPUSH
6670: CALL 38538 0 2
// if GetSide ( ar_dep_w ) = 2 then
6674: LD_INT 45
6676: PPUSH
6677: CALL_OW 255
6681: PUSH
6682: LD_INT 2
6684: EQUAL
6685: IFFALSE 6770
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6687: LD_ADDR_VAR 0 8
6691: PUSH
6692: LD_INT 14
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 28
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 14
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: LD_INT 27
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 14
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 27
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6751: LD_INT 2
6753: PPUSH
6754: LD_VAR 0 8
6758: PPUSH
6759: CALL 38538 0 2
// wait ( 0 0$50 ) ;
6763: LD_INT 1750
6765: PPUSH
6766: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6770: LD_INT 35
6772: PPUSH
6773: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6777: LD_EXP 69
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_INT 3
6788: PUSH
6789: LD_INT 34
6791: PUSH
6792: LD_INT 32
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_INT 4
6810: GREATEREQUAL
6811: IFFALSE 6770
// wait ( 0 0$10 ) ;
6813: LD_INT 350
6815: PPUSH
6816: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_EXP 69
6829: PUSH
6830: LD_INT 1
6832: ARRAY
6833: PPUSH
6834: LD_INT 3
6836: PUSH
6837: LD_INT 34
6839: PUSH
6840: LD_INT 32
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 72
6855: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6856: LD_INT 100
6858: PPUSH
6859: CALL_OW 13
6863: PUSH
6864: LD_INT 50
6866: LESS
6867: IFFALSE 6900
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6869: LD_ADDR_VAR 0 5
6873: PUSH
6874: LD_INT 55
6876: PUSH
6877: LD_INT 7
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 75
6886: PUSH
6887: LD_INT 90
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: ST_TO_ADDR
6898: GO 6929
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6900: LD_ADDR_VAR 0 5
6904: PUSH
6905: LD_INT 128
6907: PUSH
6908: LD_INT 94
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 180
6917: PUSH
6918: LD_INT 135
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
// if w mod 4 = 0 then
6929: LD_VAR 0 7
6933: PUSH
6934: LD_INT 4
6936: MOD
6937: PUSH
6938: LD_INT 0
6940: EQUAL
6941: IFFALSE 6972
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_INT 91
6950: PUSH
6951: LD_INT 58
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 117
6960: PUSH
6961: LD_INT 107
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6972: LD_INT 1
6974: PPUSH
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_VAR 0 5
6984: PPUSH
6985: LD_VAR 0 6
6989: PPUSH
6990: CALL 38829 0 4
// if mc_vehicles [ 2 ] then
6994: LD_EXP 69
6998: PUSH
6999: LD_INT 2
7001: ARRAY
7002: IFFALSE 7038
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7004: LD_INT 2
7006: PPUSH
7007: LD_EXP 69
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: PPUSH
7016: LD_INT 73
7018: PUSH
7019: LD_INT 115
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: PPUSH
7029: LD_VAR 0 6
7033: PPUSH
7034: CALL 38829 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
7038: LD_INT 19950
7040: PPUSH
7041: LD_INT 26250
7043: PPUSH
7044: CALL_OW 12
7048: PPUSH
7049: CALL_OW 67
// w := w + 1 ;
7053: LD_ADDR_VAR 0 7
7057: PUSH
7058: LD_VAR 0 7
7062: PUSH
7063: LD_INT 1
7065: PLUS
7066: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7067: LD_INT 94
7069: PPUSH
7070: CALL_OW 301
7074: PUSH
7075: LD_EXP 50
7079: PUSH
7080: LD_INT 1
7082: ARRAY
7083: PPUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 3
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PPUSH
7094: CALL_OW 72
7098: NOT
7099: OR
7100: IFFALSE 6366
// end ;
7102: PPOPN 8
7104: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7105: LD_INT 204
7107: IFFALSE 7482
7109: GO 7111
7111: DISABLE
7112: LD_INT 0
7114: PPUSH
7115: PPUSH
7116: PPUSH
7117: PPUSH
// begin enable ;
7118: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7119: LD_INT 35
7121: PPUSH
7122: LD_INT 1190
7124: PPUSH
7125: CALL_OW 12
7129: PPUSH
7130: CALL_OW 67
// tmp := [ ] ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: EMPTY
7140: ST_TO_ADDR
// uc_side := 8 ;
7141: LD_ADDR_OWVAR 20
7145: PUSH
7146: LD_INT 8
7148: ST_TO_ADDR
// uc_nation := 2 ;
7149: LD_ADDR_OWVAR 21
7153: PUSH
7154: LD_INT 2
7156: ST_TO_ADDR
// InitHc ;
7157: CALL_OW 19
// for i = 1 to 3 do
7161: LD_ADDR_VAR 0 1
7165: PUSH
7166: DOUBLE
7167: LD_INT 1
7169: DEC
7170: ST_TO_ADDR
7171: LD_INT 3
7173: PUSH
7174: FOR_TO
7175: IFFALSE 7302
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7177: LD_INT 13
7179: PUSH
7180: LD_INT 14
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_INT 2
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: PPUSH
7199: LD_INT 3
7201: PPUSH
7202: LD_INT 5
7204: PPUSH
7205: LD_INT 27
7207: PUSH
7208: LD_INT 28
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: CALL_OW 12
7225: ARRAY
7226: PPUSH
7227: LD_INT 100
7229: PPUSH
7230: CALL 50843 0 5
// un := CreateVehicle ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: CALL_OW 45
7243: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_INT 4
7251: PPUSH
7252: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 15
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: LD_VAR 0 2
7285: PUSH
7286: LD_INT 1
7288: PLUS
7289: PPUSH
7290: LD_VAR 0 3
7294: PPUSH
7295: CALL_OW 1
7299: ST_TO_ADDR
// end ;
7300: GO 7174
7302: POP
7303: POP
// for i = 1 to 4 do
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: DOUBLE
7310: LD_INT 1
7312: DEC
7313: ST_TO_ADDR
7314: LD_INT 4
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7397
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7320: LD_INT 0
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: LD_INT 4
7328: PPUSH
7329: CALL_OW 12
7333: PPUSH
7334: LD_INT 6
7336: PPUSH
7337: CALL_OW 380
// un := CreateHuman ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: CALL_OW 44
7350: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_INT 15
7358: PPUSH
7359: LD_INT 0
7361: PPUSH
7362: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7366: LD_ADDR_VAR 0 2
7370: PUSH
7371: LD_VAR 0 2
7375: PPUSH
7376: LD_VAR 0 2
7380: PUSH
7381: LD_INT 1
7383: PLUS
7384: PPUSH
7385: LD_VAR 0 3
7389: PPUSH
7390: CALL_OW 1
7394: ST_TO_ADDR
// end ;
7395: GO 7317
7397: POP
7398: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7399: LD_VAR 0 2
7403: PPUSH
7404: LD_INT 210
7406: PPUSH
7407: LD_INT 177
7409: PPUSH
7410: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7414: LD_ADDR_VAR 0 4
7418: PUSH
7419: LD_INT 10
7421: PPUSH
7422: LD_INT 22
7424: PUSH
7425: LD_INT 8
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PPUSH
7432: CALL_OW 70
7436: ST_TO_ADDR
// if x then
7437: LD_VAR 0 4
7441: IFFALSE 7469
// for i in x do
7443: LD_ADDR_VAR 0 1
7447: PUSH
7448: LD_VAR 0 4
7452: PUSH
7453: FOR_IN
7454: IFFALSE 7467
// RemoveUnit ( i ) ;
7456: LD_VAR 0 1
7460: PPUSH
7461: CALL_OW 64
7465: GO 7453
7467: POP
7468: POP
// wait ( 0 0$3 ) ;
7469: LD_INT 105
7471: PPUSH
7472: CALL_OW 67
// until tmp ;
7476: LD_VAR 0 2
7480: IFFALSE 7399
// end ;
7482: PPOPN 4
7484: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7485: LD_INT 22
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 34
7497: PUSH
7498: LD_INT 31
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 3
7507: PUSH
7508: LD_INT 24
7510: PUSH
7511: LD_INT 1000
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: PPUSH
7527: CALL_OW 69
7531: IFFALSE 7575
7533: GO 7535
7535: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7536: LD_INT 22
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 34
7548: PUSH
7549: LD_INT 31
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: PPUSH
7565: LD_INT 106
7567: PPUSH
7568: LD_INT 14
7570: PPUSH
7571: CALL_OW 111
// end ; end_of_file
7575: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7576: LD_INT 0
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
// InGameOn ;
7584: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7588: LD_EXP 21
7592: PPUSH
7593: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7597: LD_INT 2
7599: PPUSH
7600: LD_INT 1
7602: PPUSH
7603: LD_INT 1
7605: PPUSH
7606: LD_INT 1
7608: PPUSH
7609: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7613: LD_ADDR_VAR 0 2
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 1
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 25
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 69
7646: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7647: LD_ADDR_VAR 0 4
7651: PUSH
7652: LD_INT 22
7654: PUSH
7655: LD_INT 1
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PUSH
7662: LD_INT 34
7664: PUSH
7665: LD_INT 11
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PPUSH
7676: CALL_OW 69
7680: PUSH
7681: LD_INT 1
7683: ARRAY
7684: ST_TO_ADDR
// for i = 1 to tmp do
7685: LD_ADDR_VAR 0 6
7689: PUSH
7690: DOUBLE
7691: LD_INT 1
7693: DEC
7694: ST_TO_ADDR
7695: LD_VAR 0 2
7699: PUSH
7700: FOR_TO
7701: IFFALSE 7748
// begin if i = 5 then
7703: LD_VAR 0 6
7707: PUSH
7708: LD_INT 5
7710: EQUAL
7711: IFFALSE 7715
// break ;
7713: GO 7748
// sols := Replace ( sols , i , tmp [ i ] ) ;
7715: LD_ADDR_VAR 0 5
7719: PUSH
7720: LD_VAR 0 5
7724: PPUSH
7725: LD_VAR 0 6
7729: PPUSH
7730: LD_VAR 0 2
7734: PUSH
7735: LD_VAR 0 6
7739: ARRAY
7740: PPUSH
7741: CALL_OW 1
7745: ST_TO_ADDR
// end ;
7746: GO 7700
7748: POP
7749: POP
// tmp := ar_force_tmp ;
7750: LD_ADDR_VAR 0 2
7754: PUSH
7755: LD_EXP 40
7759: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 1
7767: ARRAY
7768: PPUSH
7769: LD_INT 108
7771: PPUSH
7772: LD_INT 139
7774: PPUSH
7775: LD_INT 0
7777: PPUSH
7778: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7782: LD_VAR 0 2
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: PPUSH
7791: LD_EXP 21
7795: PPUSH
7796: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7800: LD_VAR 0 2
7804: PUSH
7805: LD_INT 2
7807: ARRAY
7808: PPUSH
7809: LD_INT 114
7811: PPUSH
7812: LD_INT 132
7814: PPUSH
7815: LD_INT 0
7817: PPUSH
7818: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7822: LD_VAR 0 2
7826: PUSH
7827: LD_INT 3
7829: ARRAY
7830: PPUSH
7831: LD_INT 115
7833: PPUSH
7834: LD_INT 132
7836: PPUSH
7837: LD_INT 0
7839: PPUSH
7840: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7844: LD_VAR 0 2
7848: PUSH
7849: LD_INT 2
7851: ARRAY
7852: PUSH
7853: LD_VAR 0 2
7857: PUSH
7858: LD_INT 3
7860: ARRAY
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7870: LD_VAR 0 4
7874: PPUSH
7875: LD_INT 83
7877: PPUSH
7878: LD_INT 123
7880: PPUSH
7881: CALL_OW 111
// Wait ( 0 0$01 ) ;
7885: LD_INT 35
7887: PPUSH
7888: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7892: LD_INT 90
7894: PPUSH
7895: LD_INT 144
7897: PPUSH
7898: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7902: LD_VAR 0 5
7906: PPUSH
7907: LD_INT 88
7909: PPUSH
7910: LD_INT 129
7912: PPUSH
7913: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7917: LD_ADDR_VAR 0 3
7921: PUSH
7922: LD_INT 92
7924: PUSH
7925: LD_INT 131
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 88
7934: PUSH
7935: LD_INT 127
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 91
7944: PUSH
7945: LD_INT 132
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: LD_INT 92
7954: PUSH
7955: LD_INT 134
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: ST_TO_ADDR
// for i = 1 to sols do
7968: LD_ADDR_VAR 0 6
7972: PUSH
7973: DOUBLE
7974: LD_INT 1
7976: DEC
7977: ST_TO_ADDR
7978: LD_VAR 0 5
7982: PUSH
7983: FOR_TO
7984: IFFALSE 8057
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7986: LD_VAR 0 5
7990: PUSH
7991: LD_VAR 0 6
7995: ARRAY
7996: PPUSH
7997: LD_VAR 0 3
8001: PUSH
8002: LD_VAR 0 6
8006: ARRAY
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PPUSH
8012: LD_VAR 0 3
8016: PUSH
8017: LD_VAR 0 6
8021: ARRAY
8022: PUSH
8023: LD_INT 2
8025: ARRAY
8026: PPUSH
8027: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8031: LD_VAR 0 5
8035: PUSH
8036: LD_VAR 0 6
8040: ARRAY
8041: PPUSH
8042: CALL_OW 197
// AddComHold ( sols ) ;
8046: LD_VAR 0 5
8050: PPUSH
8051: CALL_OW 200
// end ;
8055: GO 7983
8057: POP
8058: POP
// repeat wait ( 0 0$1 ) ;
8059: LD_INT 35
8061: PPUSH
8062: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8066: LD_VAR 0 5
8070: PUSH
8071: LD_INT 1
8073: ARRAY
8074: PPUSH
8075: LD_INT 92
8077: PPUSH
8078: LD_INT 131
8080: PPUSH
8081: CALL_OW 297
8085: PUSH
8086: LD_INT 4
8088: LESS
8089: IFFALSE 8059
// CenterOnXY ( 96 , 139 ) ;
8091: LD_INT 96
8093: PPUSH
8094: LD_INT 139
8096: PPUSH
8097: CALL_OW 84
// wait ( 0 0$3 ) ;
8101: LD_INT 105
8103: PPUSH
8104: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8108: LD_INT 111
8110: PPUSH
8111: LD_INT 135
8113: PPUSH
8114: LD_INT 1
8116: PPUSH
8117: LD_INT 25
8119: NEG
8120: PPUSH
8121: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8125: LD_VAR 0 2
8129: PUSH
8130: LD_INT 2
8132: ARRAY
8133: PPUSH
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: CALL_OW 250
8147: PUSH
8148: LD_INT 3
8150: PLUS
8151: PPUSH
8152: LD_VAR 0 2
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: CALL_OW 251
8165: PPUSH
8166: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8170: LD_VAR 0 2
8174: PUSH
8175: LD_INT 3
8177: ARRAY
8178: PPUSH
8179: LD_INT 7
8181: PPUSH
8182: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_VAR 0 2
8199: PUSH
8200: LD_INT 1
8202: ARRAY
8203: PPUSH
8204: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8215: LD_VAR 0 2
8219: PUSH
8220: LD_INT 1
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 2
8228: PUSH
8229: LD_INT 2
8231: ARRAY
8232: PPUSH
8233: CALL_OW 296
8237: PUSH
8238: LD_INT 5
8240: LESS
8241: IFFALSE 8208
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8243: LD_VAR 0 2
8247: PUSH
8248: LD_INT 1
8250: ARRAY
8251: PPUSH
8252: LD_VAR 0 2
8256: PUSH
8257: LD_INT 2
8259: ARRAY
8260: PPUSH
8261: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8265: LD_VAR 0 2
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: LD_STRING D1a-Merc1-1
8276: PPUSH
8277: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8281: LD_VAR 0 2
8285: PUSH
8286: LD_INT 2
8288: ARRAY
8289: PPUSH
8290: LD_STRING D1a-FMerc2-1
8292: PPUSH
8293: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8297: LD_VAR 0 2
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 2
8310: PUSH
8311: LD_INT 1
8313: ARRAY
8314: PPUSH
8315: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: PPUSH
8328: LD_INT 500
8330: PPUSH
8331: CALL_OW 234
// wait ( 0 0$2 ) ;
8335: LD_INT 70
8337: PPUSH
8338: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8342: LD_VAR 0 2
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: LD_INT 2
8353: PPUSH
8354: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8358: LD_INT 10
8360: PPUSH
8361: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8365: LD_VAR 0 2
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D1a-Merc1-2
8376: PPUSH
8377: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8381: LD_INT 7
8383: PPUSH
8384: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8388: LD_VAR 0 2
8392: PUSH
8393: LD_INT 1
8395: ARRAY
8396: PPUSH
8397: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8401: LD_VAR 0 2
8405: PUSH
8406: LD_INT 2
8408: ARRAY
8409: PPUSH
8410: LD_INT 10
8412: PPUSH
8413: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8417: LD_VAR 0 2
8421: PUSH
8422: LD_INT 2
8424: ARRAY
8425: PPUSH
8426: LD_STRING D1a-FMerc2-2
8428: PPUSH
8429: CALL_OW 88
// wait ( 0 0$1 ) ;
8433: LD_INT 35
8435: PPUSH
8436: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8440: LD_INT 7
8442: PPUSH
8443: CALL_OW 85
// wait ( 0 0$2 ) ;
8447: LD_INT 70
8449: PPUSH
8450: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8454: LD_EXP 44
8458: PPUSH
8459: LD_STRING D1a-Saliba-1
8461: PPUSH
8462: CALL_OW 91
// KillUnit ( Saliba ) ;
8466: LD_EXP 44
8470: PPUSH
8471: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8475: LD_VAR 0 2
8479: PUSH
8480: LD_INT 3
8482: ARRAY
8483: PPUSH
8484: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8488: LD_EXP 21
8492: PPUSH
8493: CALL_OW 85
// wait ( 0 0$1 ) ;
8497: LD_INT 35
8499: PPUSH
8500: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8504: LD_VAR 0 5
8508: PPUSH
8509: LD_INT 88
8511: PPUSH
8512: LD_INT 141
8514: PPUSH
8515: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8519: LD_VAR 0 5
8523: PPUSH
8524: LD_INT 70
8526: PPUSH
8527: CALL_OW 202
// wait ( 0 0$2 ) ;
8531: LD_INT 70
8533: PPUSH
8534: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8538: LD_INT 2
8540: PPUSH
8541: LD_INT 1
8543: PPUSH
8544: LD_INT 2
8546: PPUSH
8547: LD_INT 1
8549: PPUSH
8550: CALL_OW 80
// InGameOff ;
8554: CALL_OW 9
// ComWalk ( sols ) ;
8558: LD_VAR 0 5
8562: PPUSH
8563: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8567: LD_STRING M1
8569: PPUSH
8570: CALL_OW 337
// game_speed := 4 ;
8574: LD_ADDR_OWVAR 65
8578: PUSH
8579: LD_INT 4
8581: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8582: LD_INT 111
8584: PPUSH
8585: LD_INT 135
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL_OW 331
// SaveForQuickRestart ;
8595: CALL_OW 22
// ar_run := true ;
8599: LD_ADDR_EXP 5
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8607: LD_INT 35
8609: PPUSH
8610: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8614: LD_INT 22
8616: PUSH
8617: LD_INT 1
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 91
8626: PUSH
8627: LD_INT 7
8629: PUSH
8630: LD_INT 10
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PPUSH
8642: CALL_OW 69
8646: PUSH
8647: LD_INT 7
8649: PPUSH
8650: CALL_OW 256
8654: PUSH
8655: LD_INT 999
8657: LESS
8658: OR
8659: IFFALSE 8607
// if GetSide ( ar_dep_s ) = 2 then
8661: LD_INT 7
8663: PPUSH
8664: CALL_OW 255
8668: PUSH
8669: LD_INT 2
8671: EQUAL
8672: IFFALSE 8684
// SetSide ( ar_dep_s , 1 ) ;
8674: LD_INT 7
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: CALL_OW 235
// end ;
8684: LD_VAR 0 1
8688: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8689: LD_EXP 5
8693: IFFALSE 9053
8695: GO 8697
8697: DISABLE
8698: LD_INT 0
8700: PPUSH
8701: PPUSH
8702: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8703: LD_ADDR_VAR 0 2
8707: PUSH
8708: LD_EXP 40
8712: PUSH
8713: LD_EXP 36
8717: PPUSH
8718: LD_INT 2
8720: PUSH
8721: LD_INT 21
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 21
8733: PUSH
8734: LD_INT 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: LIST
8745: PPUSH
8746: CALL_OW 72
8750: ADD
8751: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8752: LD_VAR 0 2
8756: PPUSH
8757: LD_INT 5
8759: PPUSH
8760: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8764: LD_INT 5
8766: PPUSH
8767: LD_INT 1
8769: PPUSH
8770: CALL_OW 343
// k := 1 ;
8774: LD_ADDR_VAR 0 3
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// for i in tmp do
8782: LD_ADDR_VAR 0 1
8786: PUSH
8787: LD_VAR 0 2
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8878
// begin if IsInUnit ( i ) then
8795: LD_VAR 0 1
8799: PPUSH
8800: CALL_OW 310
8804: IFFALSE 8815
// ComExitBuilding ( i ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 122
// if GetClass ( i ) = 3 then
8815: LD_VAR 0 1
8819: PPUSH
8820: CALL_OW 257
8824: PUSH
8825: LD_INT 3
8827: EQUAL
8828: IFFALSE 8864
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_EXP 41
8839: PUSH
8840: LD_VAR 0 3
8844: ARRAY
8845: PPUSH
8846: CALL_OW 180
// k := k + 1 ;
8850: LD_ADDR_VAR 0 3
8854: PUSH
8855: LD_VAR 0 3
8859: PUSH
8860: LD_INT 1
8862: PLUS
8863: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 10
8871: PPUSH
8872: CALL_OW 173
// end ;
8876: GO 8792
8878: POP
8879: POP
// ar_patrol := true ;
8880: LD_ADDR_EXP 7
8884: PUSH
8885: LD_INT 1
8887: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8888: LD_INT 10
8890: PPUSH
8891: CALL_OW 67
// for i in tmp do
8895: LD_ADDR_VAR 0 1
8899: PUSH
8900: LD_VAR 0 2
8904: PUSH
8905: FOR_IN
8906: IFFALSE 8934
// if not HasTask ( i ) then
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 314
8917: NOT
8918: IFFALSE 8932
// ComMoveToArea ( i , escape_area ) ;
8920: LD_VAR 0 1
8924: PPUSH
8925: LD_INT 10
8927: PPUSH
8928: CALL_OW 113
8932: GO 8905
8934: POP
8935: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8936: LD_ADDR_VAR 0 3
8940: PUSH
8941: LD_VAR 0 2
8945: PPUSH
8946: LD_INT 95
8948: PUSH
8949: LD_INT 10
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PPUSH
8956: CALL_OW 72
8960: ST_TO_ADDR
// if k then
8961: LD_VAR 0 3
8965: IFFALSE 9034
// for i in k do
8967: LD_ADDR_VAR 0 1
8971: PUSH
8972: LD_VAR 0 3
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9032
// begin if IsInUnit ( i ) then
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 310
8989: IFFALSE 9005
// RemoveUnit ( IsInUnit ( i ) ) ;
8991: LD_VAR 0 1
8995: PPUSH
8996: CALL_OW 310
9000: PPUSH
9001: CALL_OW 64
// RemoveUnit ( i ) ;
9005: LD_VAR 0 1
9009: PPUSH
9010: CALL_OW 64
// tmp := tmp diff i ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_VAR 0 2
9023: PUSH
9024: LD_VAR 0 1
9028: DIFF
9029: ST_TO_ADDR
// end ;
9030: GO 8977
9032: POP
9033: POP
// until tmp = [ ] ;
9034: LD_VAR 0 2
9038: PUSH
9039: EMPTY
9040: EQUAL
9041: IFFALSE 8888
// ChangeSideFog ( 5 , 5 ) ;
9043: LD_INT 5
9045: PPUSH
9046: LD_INT 5
9048: PPUSH
9049: CALL_OW 343
// end ;
9053: PPOPN 3
9055: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9056: LD_EXP 7
9060: IFFALSE 9350
9062: GO 9064
9064: DISABLE
9065: LD_INT 0
9067: PPUSH
9068: PPUSH
9069: PPUSH
// begin uc_side := 2 ;
9070: LD_ADDR_OWVAR 20
9074: PUSH
9075: LD_INT 2
9077: ST_TO_ADDR
// uc_nation := 2 ;
9078: LD_ADDR_OWVAR 21
9082: PUSH
9083: LD_INT 2
9085: ST_TO_ADDR
// InitHc ;
9086: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9090: LD_INT 1
9092: PPUSH
9093: LD_INT 1
9095: PPUSH
9096: LD_INT 6
9098: PPUSH
9099: CALL_OW 380
// un := CreateHuman ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: CALL_OW 44
9112: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9113: LD_INT 14
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: LD_INT 1
9121: PPUSH
9122: LD_INT 27
9124: PPUSH
9125: LD_INT 98
9127: PPUSH
9128: CALL 50843 0 5
// veh := CreateVehicle ;
9132: LD_ADDR_VAR 0 3
9136: PUSH
9137: CALL_OW 45
9141: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9142: LD_VAR 0 3
9146: PPUSH
9147: LD_INT 4
9149: PPUSH
9150: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9154: LD_VAR 0 3
9158: PPUSH
9159: LD_INT 179
9161: PPUSH
9162: LD_INT 135
9164: PPUSH
9165: LD_INT 0
9167: PPUSH
9168: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9172: LD_VAR 0 2
9176: PPUSH
9177: LD_VAR 0 3
9181: PPUSH
9182: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9186: LD_VAR 0 2
9190: PPUSH
9191: LD_INT 126
9193: PPUSH
9194: LD_INT 133
9196: PPUSH
9197: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9201: LD_INT 10
9203: PPUSH
9204: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9208: LD_INT 1
9210: PPUSH
9211: LD_VAR 0 3
9215: PPUSH
9216: CALL_OW 292
9220: PUSH
9221: LD_VAR 0 3
9225: PPUSH
9226: LD_INT 7
9228: PPUSH
9229: CALL_OW 296
9233: PUSH
9234: LD_INT 9
9236: LESS
9237: OR
9238: IFFALSE 9201
// ComHold ( veh ) ;
9240: LD_VAR 0 3
9244: PPUSH
9245: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9249: LD_VAR 0 2
9253: PPUSH
9254: LD_STRING D2aa-Ar1-1
9256: PPUSH
9257: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9261: LD_VAR 0 2
9265: PPUSH
9266: LD_INT 177
9268: PPUSH
9269: LD_INT 96
9271: PPUSH
9272: CALL_OW 111
// AddComExitVehicle ( un ) ;
9276: LD_VAR 0 2
9280: PPUSH
9281: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9285: LD_INT 35
9287: PPUSH
9288: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9292: LD_VAR 0 2
9296: PPUSH
9297: LD_INT 204
9299: PPUSH
9300: CALL_OW 296
9304: PUSH
9305: LD_INT 15
9307: LESS
9308: IFFALSE 9285
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9310: LD_ADDR_EXP 50
9314: PUSH
9315: LD_EXP 50
9319: PPUSH
9320: LD_INT 3
9322: PUSH
9323: LD_EXP 50
9327: PUSH
9328: LD_INT 3
9330: ARRAY
9331: PUSH
9332: LD_INT 1
9334: PLUS
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PPUSH
9340: LD_VAR 0 2
9344: PPUSH
9345: CALL 50965 0 3
9349: ST_TO_ADDR
// end ;
9350: PPOPN 3
9352: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9353: LD_INT 7
9355: PPUSH
9356: CALL_OW 255
9360: PUSH
9361: LD_INT 1
9363: EQUAL
9364: PUSH
9365: LD_INT 7
9367: PPUSH
9368: CALL_OW 301
9372: OR
9373: IFFALSE 11797
9375: GO 9377
9377: DISABLE
9378: LD_INT 0
9380: PPUSH
9381: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9382: LD_ADDR_VAR 0 1
9386: PUSH
9387: LD_EXP 36
9391: PPUSH
9392: LD_INT 21
9394: PUSH
9395: LD_INT 3
9397: PUSH
9398: EMPTY
9399: LIST
9400: LIST
9401: PPUSH
9402: CALL_OW 72
9406: PUSH
9407: FOR_IN
9408: IFFALSE 9424
// SetSide ( i , 1 ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: CALL_OW 235
9422: GO 9407
9424: POP
9425: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9426: LD_ADDR_VAR 0 2
9430: PUSH
9431: LD_INT 46
9433: PUSH
9434: LD_INT 41
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 50
9443: PUSH
9444: LD_INT 25
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 57
9453: PUSH
9454: LD_INT 75
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 75
9463: PUSH
9464: LD_INT 89
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 51
9473: PUSH
9474: LD_INT 45
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: PUSH
9481: LD_INT 95
9483: PUSH
9484: LD_INT 95
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 84
9493: PUSH
9494: LD_INT 77
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 101
9503: PUSH
9504: LD_INT 76
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 118
9513: PUSH
9514: LD_INT 81
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 139
9523: PUSH
9524: LD_INT 97
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 129
9533: PUSH
9534: LD_INT 114
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 154
9543: PUSH
9544: LD_INT 111
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: ST_TO_ADDR
// base_captured := true ;
9565: LD_ADDR_EXP 6
9569: PUSH
9570: LD_INT 1
9572: ST_TO_ADDR
// DialogueOn ;
9573: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9577: LD_EXP 21
9581: PPUSH
9582: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9586: LD_EXP 21
9590: PPUSH
9591: LD_STRING D2-JMM-1
9593: PPUSH
9594: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9598: LD_EXP 30
9602: PPUSH
9603: LD_STRING D2-Pow-1
9605: PPUSH
9606: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9610: LD_EXP 21
9614: PPUSH
9615: LD_STRING D2-JMM-2
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9622: LD_EXP 30
9626: PPUSH
9627: LD_STRING D2-Pow-2
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9634: LD_EXP 21
9638: PPUSH
9639: LD_STRING D2-JMM-3
9641: PPUSH
9642: CALL_OW 88
// DialogueOff ;
9646: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9650: LD_STRING M2
9652: PPUSH
9653: CALL_OW 337
// Wait ( 0 0$2 ) ;
9657: LD_INT 70
9659: PPUSH
9660: CALL_OW 67
// if IsOk ( Gary ) then
9664: LD_EXP 32
9668: PPUSH
9669: CALL_OW 302
9673: IFFALSE 9687
// Say ( Gary , D2a-Gary-1 ) ;
9675: LD_EXP 32
9679: PPUSH
9680: LD_STRING D2a-Gary-1
9682: PPUSH
9683: CALL_OW 88
// if IsOk ( Bobby ) then
9687: LD_EXP 24
9691: PPUSH
9692: CALL_OW 302
9696: IFFALSE 9710
// Say ( Bobby , D2a-Bobby-1 ) ;
9698: LD_EXP 24
9702: PPUSH
9703: LD_STRING D2a-Bobby-1
9705: PPUSH
9706: CALL_OW 88
// if IsOk ( Cyrus ) then
9710: LD_EXP 25
9714: PPUSH
9715: CALL_OW 302
9719: IFFALSE 9733
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9721: LD_EXP 25
9725: PPUSH
9726: LD_STRING D2a-Cyrus-1
9728: PPUSH
9729: CALL_OW 88
// if IsOk ( Lisa ) then
9733: LD_EXP 22
9737: PPUSH
9738: CALL_OW 302
9742: IFFALSE 9756
// Say ( Lisa , D2a-Lisa-1 ) ;
9744: LD_EXP 22
9748: PPUSH
9749: LD_STRING D2a-Lisa-1
9751: PPUSH
9752: CALL_OW 88
// if IsOk ( Frank ) then
9756: LD_EXP 33
9760: PPUSH
9761: CALL_OW 302
9765: IFFALSE 9779
// Say ( Frank , D2a-Frank-1 ) ;
9767: LD_EXP 33
9771: PPUSH
9772: LD_STRING D2a-Frank-1
9774: PPUSH
9775: CALL_OW 88
// if IsOk ( Cornel ) then
9779: LD_EXP 31
9783: PPUSH
9784: CALL_OW 302
9788: IFFALSE 9802
// Say ( Cornel , D2a-Corn-1 ) ;
9790: LD_EXP 31
9794: PPUSH
9795: LD_STRING D2a-Corn-1
9797: PPUSH
9798: CALL_OW 88
// if IsOk ( Donaldson ) then
9802: LD_EXP 23
9806: PPUSH
9807: CALL_OW 302
9811: IFFALSE 9825
// Say ( Donaldson , D2a-Don-1 ) ;
9813: LD_EXP 23
9817: PPUSH
9818: LD_STRING D2a-Don-1
9820: PPUSH
9821: CALL_OW 88
// if IsOk ( Brown ) then
9825: LD_EXP 27
9829: PPUSH
9830: CALL_OW 302
9834: IFFALSE 9848
// Say ( Brown , D2a-Brown-1 ) ;
9836: LD_EXP 27
9840: PPUSH
9841: LD_STRING D2a-Brown-1
9843: PPUSH
9844: CALL_OW 88
// Wait ( 0 0$30 ) ;
9848: LD_INT 1050
9850: PPUSH
9851: CALL_OW 67
// if IsOk ( Frank ) then
9855: LD_EXP 33
9859: PPUSH
9860: CALL_OW 302
9864: IFFALSE 10130
// begin DialogueOn ;
9866: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9870: LD_EXP 21
9874: PUSH
9875: LD_EXP 33
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9888: LD_EXP 33
9892: PPUSH
9893: LD_STRING D3F-Frank-1
9895: PPUSH
9896: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9900: LD_EXP 21
9904: PPUSH
9905: LD_STRING D3F-JMM-1
9907: PPUSH
9908: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9912: LD_EXP 33
9916: PPUSH
9917: LD_STRING D3F-Frank-2
9919: PPUSH
9920: CALL_OW 88
// case Query ( QFrank ) of 1 :
9924: LD_STRING QFrank
9926: PPUSH
9927: CALL_OW 97
9931: PUSH
9932: LD_INT 1
9934: DOUBLE
9935: EQUAL
9936: IFTRUE 9940
9938: GO 9963
9940: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9941: LD_EXP 21
9945: PPUSH
9946: LD_STRING D3Fa-JMM-1
9948: PPUSH
9949: CALL_OW 88
// us_scout := 1 ;
9953: LD_ADDR_EXP 8
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
// end ; 2 :
9961: GO 10126
9963: LD_INT 2
9965: DOUBLE
9966: EQUAL
9967: IFTRUE 9971
9969: GO 10093
9971: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9972: LD_EXP 21
9976: PPUSH
9977: LD_STRING D3Fb-JMM-1
9979: PPUSH
9980: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9984: LD_EXP 33
9988: PPUSH
9989: LD_STRING D3Fb-Frank-1
9991: PPUSH
9992: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
9996: LD_STRING QFrank2
9998: PPUSH
9999: CALL_OW 97
10003: PUSH
10004: LD_INT 1
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10059
10012: POP
// begin us_scout := 2 ;
10013: LD_ADDR_EXP 8
10017: PUSH
10018: LD_INT 2
10020: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10021: LD_EXP 21
10025: PPUSH
10026: LD_STRING D3Fba-JMM-1
10028: PPUSH
10029: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10033: LD_EXP 33
10037: PPUSH
10038: LD_STRING D3Fba-Frank-1
10040: PPUSH
10041: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10045: LD_EXP 21
10049: PPUSH
10050: LD_STRING D3Fba-JMM-2
10052: PPUSH
10053: CALL_OW 88
// end ; 2 :
10057: GO 10091
10059: LD_INT 2
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10090
10067: POP
// begin us_scout := 0 ;
10068: LD_ADDR_EXP 8
10072: PUSH
10073: LD_INT 0
10075: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10076: LD_EXP 21
10080: PPUSH
10081: LD_STRING D3Fbb-JMM-1
10083: PPUSH
10084: CALL_OW 88
// end ; end ;
10088: GO 10091
10090: POP
// end ; 3 :
10091: GO 10126
10093: LD_INT 3
10095: DOUBLE
10096: EQUAL
10097: IFTRUE 10101
10099: GO 10125
10101: POP
// begin us_scout := - 1 ;
10102: LD_ADDR_EXP 8
10106: PUSH
10107: LD_INT 1
10109: NEG
10110: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10111: LD_EXP 21
10115: PPUSH
10116: LD_STRING D3Fc-JMM-1
10118: PPUSH
10119: CALL_OW 88
// end ; end ;
10123: GO 10126
10125: POP
// DialogueOff ;
10126: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10130: LD_EXP 8
10134: PUSH
10135: LD_INT 1
10137: NEG
10138: PUSH
10139: LD_INT 0
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: IN
10146: IFFALSE 10150
// exit ;
10148: GO 11797
// if us_scout in [ 1 , 2 ] then
10150: LD_EXP 8
10154: PUSH
10155: LD_INT 1
10157: PUSH
10158: LD_INT 2
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: IN
10165: IFFALSE 10864
// begin if IsInUnit ( Frank ) then
10167: LD_EXP 33
10171: PPUSH
10172: CALL_OW 310
10176: IFFALSE 10187
// ComExitBuilding ( Frank ) ;
10178: LD_EXP 33
10182: PPUSH
10183: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10187: LD_EXP 33
10191: PPUSH
10192: CALL_OW 311
10196: IFFALSE 10207
// ComExitVehicle ( Frank ) ;
10198: LD_EXP 33
10202: PPUSH
10203: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10207: LD_EXP 33
10211: PPUSH
10212: LD_INT 4
10214: PPUSH
10215: CALL_OW 235
// wait ( 0 0$1 ) ;
10219: LD_INT 35
10221: PPUSH
10222: CALL_OW 67
// if us_scout = 2 then
10226: LD_EXP 8
10230: PUSH
10231: LD_INT 2
10233: EQUAL
10234: IFFALSE 10602
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10236: LD_EXP 33
10240: PPUSH
10241: LD_INT 75
10243: PPUSH
10244: LD_INT 63
10246: PPUSH
10247: CALL_OW 111
// AddComHold ( Frank ) ;
10251: LD_EXP 33
10255: PPUSH
10256: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10260: LD_EXP 33
10264: PPUSH
10265: LD_INT 770
10267: PPUSH
10268: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10272: LD_EXP 33
10276: PPUSH
10277: LD_INT 100
10279: PPUSH
10280: LD_INT 75
10282: PPUSH
10283: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10287: LD_EXP 33
10291: PPUSH
10292: LD_INT 123
10294: PPUSH
10295: LD_INT 103
10297: PPUSH
10298: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10302: LD_EXP 33
10306: PPUSH
10307: LD_INT 138
10309: PPUSH
10310: LD_INT 108
10312: PPUSH
10313: CALL_OW 171
// AddComHold ( Frank ) ;
10317: LD_EXP 33
10321: PPUSH
10322: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10326: LD_INT 35
10328: PPUSH
10329: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10333: LD_EXP 33
10337: PPUSH
10338: LD_INT 138
10340: PPUSH
10341: LD_INT 108
10343: PPUSH
10344: CALL_OW 307
10348: IFFALSE 10326
// AddComMoveXY ( Frank , 125 , 132 ) ;
10350: LD_EXP 33
10354: PPUSH
10355: LD_INT 125
10357: PPUSH
10358: LD_INT 132
10360: PPUSH
10361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10365: LD_INT 35
10367: PPUSH
10368: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10372: LD_INT 1
10374: PPUSH
10375: LD_EXP 33
10379: PPUSH
10380: CALL_OW 292
10384: PUSH
10385: LD_EXP 33
10389: PPUSH
10390: LD_INT 7
10392: PPUSH
10393: CALL_OW 296
10397: PUSH
10398: LD_INT 7
10400: LESS
10401: OR
10402: IFFALSE 10365
// DialogueOn ;
10404: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10408: LD_EXP 33
10412: PPUSH
10413: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10417: LD_INT 10
10419: PPUSH
10420: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10424: LD_EXP 21
10428: PPUSH
10429: LD_STRING D4Fa-JMM-1
10431: PPUSH
10432: CALL_OW 88
// for i in points do
10436: LD_ADDR_VAR 0 1
10440: PUSH
10441: LD_VAR 0 2
10445: PUSH
10446: FOR_IN
10447: IFFALSE 10505
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10449: LD_VAR 0 1
10453: PUSH
10454: LD_INT 1
10456: ARRAY
10457: PPUSH
10458: LD_VAR 0 1
10462: PUSH
10463: LD_INT 2
10465: ARRAY
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: LD_INT 20
10472: NEG
10473: PPUSH
10474: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10478: LD_VAR 0 1
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: LD_VAR 0 1
10491: PUSH
10492: LD_INT 2
10494: ARRAY
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 331
// end ;
10503: GO 10446
10505: POP
10506: POP
// dwait ( 0 0$0.5 ) ;
10507: LD_INT 18
10509: PPUSH
10510: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10514: LD_INT 42
10516: PPUSH
10517: LD_INT 27
10519: PPUSH
10520: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10524: LD_EXP 33
10528: PPUSH
10529: LD_STRING D4Fa-Frank-1
10531: PPUSH
10532: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10536: LD_INT 18
10538: PPUSH
10539: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10543: LD_EXP 21
10547: PPUSH
10548: LD_STRING D4Fa-JMM-2
10550: PPUSH
10551: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10555: LD_INT 118
10557: PPUSH
10558: LD_INT 80
10560: PPUSH
10561: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10565: LD_EXP 33
10569: PPUSH
10570: LD_STRING D4Fa-Frank-2
10572: PPUSH
10573: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10577: LD_INT 10
10579: PPUSH
10580: CALL_OW 68
// DialogueOff ;
10584: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10588: LD_EXP 33
10592: PPUSH
10593: LD_INT 1
10595: PPUSH
10596: CALL_OW 235
// end else
10600: GO 10864
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10602: LD_INT 2
10604: PPUSH
10605: LD_INT 4
10607: PPUSH
10608: LD_INT 2
10610: PPUSH
10611: LD_INT 1
10613: PPUSH
10614: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10618: LD_EXP 33
10622: PPUSH
10623: LD_INT 75
10625: PPUSH
10626: LD_INT 63
10628: PPUSH
10629: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10633: LD_EXP 33
10637: PPUSH
10638: LD_INT 175
10640: PPUSH
10641: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10645: LD_EXP 33
10649: PPUSH
10650: LD_INT 102
10652: PPUSH
10653: LD_INT 76
10655: PPUSH
10656: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10660: LD_EXP 33
10664: PPUSH
10665: LD_INT 108
10667: PPUSH
10668: LD_INT 70
10670: PPUSH
10671: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10675: LD_INT 35
10677: PPUSH
10678: CALL_OW 67
// until See ( 2 , Frank ) ;
10682: LD_INT 2
10684: PPUSH
10685: LD_EXP 33
10689: PPUSH
10690: CALL_OW 292
10694: IFFALSE 10675
// ComMoveXY ( Frank , 112 , 118 ) ;
10696: LD_EXP 33
10700: PPUSH
10701: LD_INT 112
10703: PPUSH
10704: LD_INT 118
10706: PPUSH
10707: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10711: LD_EXP 33
10715: PPUSH
10716: CALL_OW 256
10720: PUSH
10721: LD_INT 750
10723: GREATEREQUAL
10724: IFFALSE 10738
// SetLives ( Frank , 700 ) ;
10726: LD_EXP 33
10730: PPUSH
10731: LD_INT 700
10733: PPUSH
10734: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10738: LD_INT 35
10740: PPUSH
10741: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10745: LD_INT 1
10747: PPUSH
10748: LD_EXP 33
10752: PPUSH
10753: CALL_OW 292
10757: PUSH
10758: LD_EXP 33
10762: PPUSH
10763: LD_INT 7
10765: PPUSH
10766: CALL_OW 296
10770: PUSH
10771: LD_INT 17
10773: LESS
10774: OR
10775: IFFALSE 10738
// DialogueOn ;
10777: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10781: LD_EXP 33
10785: PPUSH
10786: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10790: LD_EXP 33
10794: PPUSH
10795: LD_STRING D4Fb-Frank-1
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10802: LD_EXP 21
10806: PPUSH
10807: LD_STRING D4Fb-JMM-1
10809: PPUSH
10810: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10814: LD_INT 2
10816: PPUSH
10817: LD_STRING D4Fb-FSci1-1
10819: PPUSH
10820: CALL 15445 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10824: LD_EXP 33
10828: PPUSH
10829: LD_STRING D4Fb-Frank-2
10831: PPUSH
10832: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10836: LD_EXP 21
10840: PPUSH
10841: LD_STRING D4Fb-JMM-2
10843: PPUSH
10844: CALL_OW 88
// DialogueOff ;
10848: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10852: LD_EXP 33
10856: PPUSH
10857: LD_INT 1
10859: PPUSH
10860: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10864: LD_EXP 34
10868: PPUSH
10869: CALL_OW 302
10873: PUSH
10874: LD_EXP 33
10878: NOT
10879: AND
10880: IFFALSE 11028
// begin DialogueOn ;
10882: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10886: LD_EXP 21
10890: PUSH
10891: LD_EXP 34
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10904: LD_EXP 34
10908: PPUSH
10909: LD_STRING D3Y-Yam-1
10911: PPUSH
10912: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10916: LD_EXP 21
10920: PPUSH
10921: LD_STRING D3Y-JMM-1
10923: PPUSH
10924: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10928: LD_EXP 34
10932: PPUSH
10933: LD_STRING D3Y-Yam-2
10935: PPUSH
10936: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10940: LD_STRING QYamoko
10942: PPUSH
10943: CALL_OW 97
10947: PUSH
10948: LD_INT 1
10950: DOUBLE
10951: EQUAL
10952: IFTRUE 10956
10954: GO 10991
10956: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10957: LD_EXP 21
10961: PPUSH
10962: LD_STRING D3Ya-JMM-1
10964: PPUSH
10965: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10969: LD_EXP 34
10973: PPUSH
10974: LD_STRING D3Ya-Yam-1
10976: PPUSH
10977: CALL_OW 88
// us_scout := 1 ;
10981: LD_ADDR_EXP 8
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// end ; 2 :
10989: GO 11024
10991: LD_INT 2
10993: DOUBLE
10994: EQUAL
10995: IFTRUE 10999
10997: GO 11023
10999: POP
// begin us_scout := - 1 ;
11000: LD_ADDR_EXP 8
11004: PUSH
11005: LD_INT 1
11007: NEG
11008: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11009: LD_EXP 21
11013: PPUSH
11014: LD_STRING D3Yb-JMM-1
11016: PPUSH
11017: CALL_OW 88
// end ; end ;
11021: GO 11024
11023: POP
// DialogueOff ;
11024: CALL_OW 7
// end ; if Frank then
11028: LD_EXP 33
11032: IFFALSE 11036
// exit ;
11034: GO 11797
// if us_scout in [ - 1 , 0 ] then
11036: LD_EXP 8
11040: PUSH
11041: LD_INT 1
11043: NEG
11044: PUSH
11045: LD_INT 0
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: IN
11052: IFFALSE 11056
// exit ;
11054: GO 11797
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11056: LD_ADDR_EXP 8
11060: PUSH
11061: LD_INT 2
11063: PUSH
11064: LD_INT 2
11066: PUSH
11067: LD_INT 1
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: LD_OWVAR 67
11079: ARRAY
11080: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11081: LD_EXP 8
11085: PUSH
11086: LD_INT 1
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: IN
11096: IFFALSE 11797
// begin if IsInUnit ( Kikuchi ) then
11098: LD_EXP 34
11102: PPUSH
11103: CALL_OW 310
11107: IFFALSE 11118
// ComExitBuilding ( Kikuchi ) ;
11109: LD_EXP 34
11113: PPUSH
11114: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11118: LD_EXP 34
11122: PPUSH
11123: CALL_OW 311
11127: IFFALSE 11138
// ComExitVehicle ( Kikuchi ) ;
11129: LD_EXP 34
11133: PPUSH
11134: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11138: LD_EXP 34
11142: PPUSH
11143: LD_INT 4
11145: PPUSH
11146: CALL_OW 235
// wait ( 0 0$1 ) ;
11150: LD_INT 35
11152: PPUSH
11153: CALL_OW 67
// if us_scout = 2 then
11157: LD_EXP 8
11161: PUSH
11162: LD_INT 2
11164: EQUAL
11165: IFFALSE 11545
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11167: LD_EXP 34
11171: PPUSH
11172: LD_INT 75
11174: PPUSH
11175: LD_INT 63
11177: PPUSH
11178: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11182: LD_EXP 34
11186: PPUSH
11187: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11191: LD_EXP 34
11195: PPUSH
11196: LD_INT 770
11198: PPUSH
11199: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11203: LD_EXP 34
11207: PPUSH
11208: LD_INT 100
11210: PPUSH
11211: LD_INT 75
11213: PPUSH
11214: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11218: LD_EXP 34
11222: PPUSH
11223: LD_INT 123
11225: PPUSH
11226: LD_INT 103
11228: PPUSH
11229: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11233: LD_EXP 34
11237: PPUSH
11238: LD_INT 138
11240: PPUSH
11241: LD_INT 108
11243: PPUSH
11244: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11248: LD_EXP 34
11252: PPUSH
11253: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11257: LD_INT 35
11259: PPUSH
11260: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11264: LD_EXP 34
11268: PPUSH
11269: LD_INT 138
11271: PPUSH
11272: LD_INT 108
11274: PPUSH
11275: CALL_OW 307
11279: IFFALSE 11257
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11281: LD_EXP 34
11285: PPUSH
11286: LD_INT 125
11288: PPUSH
11289: LD_INT 132
11291: PPUSH
11292: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11296: LD_INT 35
11298: PPUSH
11299: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11303: LD_INT 1
11305: PPUSH
11306: LD_EXP 34
11310: PPUSH
11311: CALL_OW 292
11315: PUSH
11316: LD_EXP 34
11320: PPUSH
11321: LD_INT 7
11323: PPUSH
11324: CALL_OW 296
11328: PUSH
11329: LD_INT 7
11331: LESS
11332: OR
11333: IFFALSE 11296
// DialogueOn ;
11335: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11339: LD_EXP 34
11343: PPUSH
11344: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11348: LD_INT 10
11350: PPUSH
11351: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11355: LD_EXP 34
11359: PPUSH
11360: LD_STRING D4Ya-Yam-1
11362: PPUSH
11363: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11367: LD_EXP 21
11371: PPUSH
11372: LD_STRING D4Ya-JMM-1
11374: PPUSH
11375: CALL_OW 88
// for i in points do
11379: LD_ADDR_VAR 0 1
11383: PUSH
11384: LD_VAR 0 2
11388: PUSH
11389: FOR_IN
11390: IFFALSE 11448
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11392: LD_VAR 0 1
11396: PUSH
11397: LD_INT 1
11399: ARRAY
11400: PPUSH
11401: LD_VAR 0 1
11405: PUSH
11406: LD_INT 2
11408: ARRAY
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: LD_INT 20
11415: NEG
11416: PPUSH
11417: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11421: LD_VAR 0 1
11425: PUSH
11426: LD_INT 1
11428: ARRAY
11429: PPUSH
11430: LD_VAR 0 1
11434: PUSH
11435: LD_INT 2
11437: ARRAY
11438: PPUSH
11439: LD_INT 1
11441: PPUSH
11442: CALL_OW 331
// end ;
11446: GO 11389
11448: POP
11449: POP
// dwait ( 0 0$0.5 ) ;
11450: LD_INT 18
11452: PPUSH
11453: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11457: LD_INT 42
11459: PPUSH
11460: LD_INT 27
11462: PPUSH
11463: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_STRING D4Ya-Yam-2
11474: PPUSH
11475: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11479: LD_INT 18
11481: PPUSH
11482: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11486: LD_INT 118
11488: PPUSH
11489: LD_INT 80
11491: PPUSH
11492: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11496: LD_EXP 21
11500: PPUSH
11501: LD_STRING D4Ya-JMM-2
11503: PPUSH
11504: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11508: LD_EXP 34
11512: PPUSH
11513: LD_STRING D4Ya-Yam-3
11515: PPUSH
11516: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11520: LD_INT 10
11522: PPUSH
11523: CALL_OW 68
// DialogueOff ;
11527: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11531: LD_EXP 34
11535: PPUSH
11536: LD_INT 1
11538: PPUSH
11539: CALL_OW 235
// end else
11543: GO 11797
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11545: LD_INT 2
11547: PPUSH
11548: LD_INT 4
11550: PPUSH
11551: LD_INT 2
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11561: LD_EXP 34
11565: PPUSH
11566: LD_INT 75
11568: PPUSH
11569: LD_INT 63
11571: PPUSH
11572: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11576: LD_EXP 34
11580: PPUSH
11581: LD_INT 175
11583: PPUSH
11584: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11588: LD_EXP 34
11592: PPUSH
11593: LD_INT 102
11595: PPUSH
11596: LD_INT 76
11598: PPUSH
11599: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11603: LD_EXP 34
11607: PPUSH
11608: LD_INT 108
11610: PPUSH
11611: LD_INT 70
11613: PPUSH
11614: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11618: LD_INT 35
11620: PPUSH
11621: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11625: LD_INT 2
11627: PPUSH
11628: LD_EXP 34
11632: PPUSH
11633: CALL_OW 292
11637: IFFALSE 11618
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11639: LD_EXP 34
11643: PPUSH
11644: LD_INT 112
11646: PPUSH
11647: LD_INT 118
11649: PPUSH
11650: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11654: LD_EXP 34
11658: PPUSH
11659: CALL_OW 256
11663: PUSH
11664: LD_INT 750
11666: GREATEREQUAL
11667: IFFALSE 11681
// SetLives ( Kikuchi , 700 ) ;
11669: LD_EXP 34
11673: PPUSH
11674: LD_INT 700
11676: PPUSH
11677: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11681: LD_INT 35
11683: PPUSH
11684: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11688: LD_INT 1
11690: PPUSH
11691: LD_EXP 34
11695: PPUSH
11696: CALL_OW 292
11700: PUSH
11701: LD_EXP 34
11705: PPUSH
11706: LD_INT 7
11708: PPUSH
11709: CALL_OW 296
11713: PUSH
11714: LD_INT 17
11716: LESS
11717: OR
11718: IFFALSE 11681
// DialogueOn ;
11720: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11724: LD_EXP 34
11728: PPUSH
11729: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11733: LD_EXP 34
11737: PPUSH
11738: LD_STRING D4Yb-Yam-1
11740: PPUSH
11741: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11745: LD_EXP 21
11749: PPUSH
11750: LD_STRING D4Yb-JMM-1
11752: PPUSH
11753: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11757: LD_EXP 34
11761: PPUSH
11762: LD_STRING D4Yb-Yam-2
11764: PPUSH
11765: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11769: LD_EXP 21
11773: PPUSH
11774: LD_STRING D4Yb-JMM-2
11776: PPUSH
11777: CALL_OW 88
// DialogueOff ;
11781: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11785: LD_EXP 34
11789: PPUSH
11790: LD_INT 1
11792: PPUSH
11793: CALL_OW 235
// end ; end ; end ;
11797: PPOPN 2
11799: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11800: LD_EXP 6
11804: IFFALSE 12837
11806: GO 11808
11808: DISABLE
11809: LD_INT 0
11811: PPUSH
11812: PPUSH
11813: PPUSH
11814: PPUSH
// begin enable ;
11815: ENABLE
// if not seen [ 1 ] then
11816: LD_EXP 9
11820: PUSH
11821: LD_INT 1
11823: ARRAY
11824: NOT
11825: IFFALSE 12005
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_INT 22
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 25
11847: PUSH
11848: LD_INT 11
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 33
11857: PUSH
11858: LD_INT 4
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PPUSH
11874: CALL_OW 69
11878: ST_TO_ADDR
// if tmp then
11879: LD_VAR 0 2
11883: IFFALSE 12005
// for i in tmp do
11885: LD_ADDR_VAR 0 1
11889: PUSH
11890: LD_VAR 0 2
11894: PUSH
11895: FOR_IN
11896: IFFALSE 12003
// if See ( 1 , i ) then
11898: LD_INT 1
11900: PPUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: CALL_OW 292
11910: IFFALSE 12001
// begin seen := Replace ( seen , 1 , true ) ;
11912: LD_ADDR_EXP 9
11916: PUSH
11917: LD_EXP 9
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: LD_INT 1
11927: PPUSH
11928: CALL_OW 1
11932: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11933: LD_INT 1
11935: PPUSH
11936: CALL 15267 0 1
11940: IFFALSE 12001
// begin DialogueOn ;
11942: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11946: LD_VAR 0 1
11950: PPUSH
11951: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11955: LD_INT 10
11957: PPUSH
11958: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11962: LD_ADDR_VAR 0 3
11966: PUSH
11967: LD_INT 1
11969: PPUSH
11970: LD_STRING D5a-Sol2-1
11972: PPUSH
11973: CALL 15445 0 2
11977: ST_TO_ADDR
// if not un then
11978: LD_VAR 0 3
11982: NOT
11983: IFFALSE 11995
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11985: LD_INT 2
11987: PPUSH
11988: LD_STRING D5a-FSol2-1
11990: PPUSH
11991: CALL 15445 0 2
// DialogueOff ;
11995: CALL_OW 7
// break ;
11999: GO 12003
// end ; end ;
12001: GO 11895
12003: POP
12004: POP
// end ; if not seen [ 2 ] then
12005: LD_EXP 9
12009: PUSH
12010: LD_INT 2
12012: ARRAY
12013: NOT
12014: IFFALSE 12239
// begin can_kamikazed := true ;
12016: LD_ADDR_EXP 10
12020: PUSH
12021: LD_INT 1
12023: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12024: LD_ADDR_VAR 0 2
12028: PUSH
12029: LD_INT 22
12031: PUSH
12032: LD_INT 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 25
12041: PUSH
12042: LD_INT 17
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PPUSH
12053: CALL_OW 69
12057: ST_TO_ADDR
// if tmp then
12058: LD_VAR 0 2
12062: IFFALSE 12239
// for i in tmp do
12064: LD_ADDR_VAR 0 1
12068: PUSH
12069: LD_VAR 0 2
12073: PUSH
12074: FOR_IN
12075: IFFALSE 12237
// if See ( 1 , i ) then
12077: LD_INT 1
12079: PPUSH
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 292
12089: IFFALSE 12235
// begin seen := Replace ( seen , 2 , true ) ;
12091: LD_ADDR_EXP 9
12095: PUSH
12096: LD_EXP 9
12100: PPUSH
12101: LD_INT 2
12103: PPUSH
12104: LD_INT 1
12106: PPUSH
12107: CALL_OW 1
12111: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12112: LD_INT 1
12114: PPUSH
12115: CALL 15267 0 1
12119: IFFALSE 12235
// begin DialogueOn ;
12121: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12125: LD_VAR 0 1
12129: PPUSH
12130: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12134: LD_INT 10
12136: PPUSH
12137: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12141: LD_ADDR_VAR 0 3
12145: PUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_STRING D5b-Sol1-1
12151: PPUSH
12152: CALL 15445 0 2
12156: ST_TO_ADDR
// if not un then
12157: LD_VAR 0 3
12161: NOT
12162: IFFALSE 12180
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12164: LD_ADDR_VAR 0 3
12168: PUSH
12169: LD_INT 2
12171: PPUSH
12172: LD_STRING D5b-FSol1-1
12174: PPUSH
12175: CALL 15445 0 2
12179: ST_TO_ADDR
// if un then
12180: LD_VAR 0 3
12184: IFFALSE 12229
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12186: LD_ADDR_VAR 0 4
12190: PUSH
12191: LD_INT 1
12193: PPUSH
12194: LD_STRING D5b-Sol2-1
12196: PPUSH
12197: LD_VAR 0 3
12201: PPUSH
12202: CALL 15671 0 3
12206: ST_TO_ADDR
// if not un2 then
12207: LD_VAR 0 4
12211: NOT
12212: IFFALSE 12229
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12214: LD_INT 2
12216: PPUSH
12217: LD_STRING D5b-FSol2-1
12219: PPUSH
12220: LD_VAR 0 3
12224: PPUSH
12225: CALL 15671 0 3
// end ; DialogueOff ;
12229: CALL_OW 7
// break ;
12233: GO 12237
// end ; end ;
12235: GO 12074
12237: POP
12238: POP
// end ; if not seen [ 3 ] then
12239: LD_EXP 9
12243: PUSH
12244: LD_INT 3
12246: ARRAY
12247: NOT
12248: IFFALSE 12422
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12250: LD_ADDR_VAR 0 2
12254: PUSH
12255: LD_INT 22
12257: PUSH
12258: LD_INT 2
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 33
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PPUSH
12279: CALL_OW 69
12283: ST_TO_ADDR
// if tmp then
12284: LD_VAR 0 2
12288: IFFALSE 12422
// for i in tmp do
12290: LD_ADDR_VAR 0 1
12294: PUSH
12295: LD_VAR 0 2
12299: PUSH
12300: FOR_IN
12301: IFFALSE 12420
// if See ( 1 , i ) then
12303: LD_INT 1
12305: PPUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 292
12315: IFFALSE 12418
// begin seen := Replace ( seen , 3 , true ) ;
12317: LD_ADDR_EXP 9
12321: PUSH
12322: LD_EXP 9
12326: PPUSH
12327: LD_INT 3
12329: PPUSH
12330: LD_INT 1
12332: PPUSH
12333: CALL_OW 1
12337: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12338: LD_INT 1
12340: PPUSH
12341: CALL 15267 0 1
12345: IFFALSE 12418
// begin DialogueOn ;
12347: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12351: LD_VAR 0 1
12355: PPUSH
12356: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12360: LD_INT 10
12362: PPUSH
12363: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12367: LD_ADDR_VAR 0 3
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_STRING D8-Sol1-1
12377: PPUSH
12378: CALL 15445 0 2
12382: ST_TO_ADDR
// if not un then
12383: LD_VAR 0 3
12387: NOT
12388: IFFALSE 12400
// SayRand ( sex_female , D8-FSol1-1 ) ;
12390: LD_INT 2
12392: PPUSH
12393: LD_STRING D8-FSol1-1
12395: PPUSH
12396: CALL 15445 0 2
// Say ( JMM , D8-JMM-1 ) ;
12400: LD_EXP 21
12404: PPUSH
12405: LD_STRING D8-JMM-1
12407: PPUSH
12408: CALL_OW 88
// DialogueOff ;
12412: CALL_OW 7
// break ;
12416: GO 12420
// end ; end ;
12418: GO 12300
12420: POP
12421: POP
// end ; if not seen [ 4 ] then
12422: LD_EXP 9
12426: PUSH
12427: LD_INT 4
12429: ARRAY
12430: NOT
12431: IFFALSE 12593
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12433: LD_ADDR_VAR 0 2
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_INT 2
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 33
12450: PUSH
12451: LD_INT 5
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PPUSH
12462: CALL_OW 69
12466: ST_TO_ADDR
// if tmp then
12467: LD_VAR 0 2
12471: IFFALSE 12593
// for i in tmp do
12473: LD_ADDR_VAR 0 1
12477: PUSH
12478: LD_VAR 0 2
12482: PUSH
12483: FOR_IN
12484: IFFALSE 12591
// if See ( 1 , i ) then
12486: LD_INT 1
12488: PPUSH
12489: LD_VAR 0 1
12493: PPUSH
12494: CALL_OW 292
12498: IFFALSE 12589
// begin seen := Replace ( seen , 4 , true ) ;
12500: LD_ADDR_EXP 9
12504: PUSH
12505: LD_EXP 9
12509: PPUSH
12510: LD_INT 4
12512: PPUSH
12513: LD_INT 1
12515: PPUSH
12516: CALL_OW 1
12520: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12521: LD_INT 1
12523: PPUSH
12524: CALL 15267 0 1
12528: IFFALSE 12589
// begin DialogueOn ;
12530: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12534: LD_VAR 0 1
12538: PPUSH
12539: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12543: LD_INT 10
12545: PPUSH
12546: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12550: LD_ADDR_VAR 0 3
12554: PUSH
12555: LD_INT 1
12557: PPUSH
12558: LD_STRING D5a-Sol1-1
12560: PPUSH
12561: CALL 15445 0 2
12565: ST_TO_ADDR
// if not un then
12566: LD_VAR 0 3
12570: NOT
12571: IFFALSE 12583
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12573: LD_INT 2
12575: PPUSH
12576: LD_STRING D5a-FSol1-1
12578: PPUSH
12579: CALL 15445 0 2
// DialogueOff ;
12583: CALL_OW 7
// break ;
12587: GO 12591
// end ; end ;
12589: GO 12483
12591: POP
12592: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12593: LD_EXP 9
12597: PUSH
12598: LD_INT 5
12600: ARRAY
12601: NOT
12602: PUSH
12603: LD_EXP 9
12607: PUSH
12608: LD_INT 3
12610: ARRAY
12611: AND
12612: IFFALSE 12786
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12614: LD_ADDR_VAR 0 2
12618: PUSH
12619: LD_INT 22
12621: PUSH
12622: LD_INT 2
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 34
12631: PUSH
12632: LD_INT 31
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 69
12647: ST_TO_ADDR
// if tmp then
12648: LD_VAR 0 2
12652: IFFALSE 12786
// for i in tmp do
12654: LD_ADDR_VAR 0 1
12658: PUSH
12659: LD_VAR 0 2
12663: PUSH
12664: FOR_IN
12665: IFFALSE 12784
// if See ( 1 , i ) then
12667: LD_INT 1
12669: PPUSH
12670: LD_VAR 0 1
12674: PPUSH
12675: CALL_OW 292
12679: IFFALSE 12782
// begin seen := Replace ( seen , 5 , true ) ;
12681: LD_ADDR_EXP 9
12685: PUSH
12686: LD_EXP 9
12690: PPUSH
12691: LD_INT 5
12693: PPUSH
12694: LD_INT 1
12696: PPUSH
12697: CALL_OW 1
12701: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12702: LD_INT 1
12704: PPUSH
12705: CALL 15267 0 1
12709: IFFALSE 12782
// begin DialogueOn ;
12711: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12715: LD_VAR 0 1
12719: PPUSH
12720: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12724: LD_INT 10
12726: PPUSH
12727: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: LD_INT 1
12738: PPUSH
12739: LD_STRING D8a-Sol2-1
12741: PPUSH
12742: CALL 15445 0 2
12746: ST_TO_ADDR
// if not un then
12747: LD_VAR 0 3
12751: NOT
12752: IFFALSE 12764
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12754: LD_INT 2
12756: PPUSH
12757: LD_STRING D8a-FSol2-1
12759: PPUSH
12760: CALL 15445 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12764: LD_EXP 21
12768: PPUSH
12769: LD_STRING D8a-JMM-1
12771: PPUSH
12772: CALL_OW 88
// DialogueOff ;
12776: CALL_OW 7
// break ;
12780: GO 12784
// end ; end ;
12782: GO 12664
12784: POP
12785: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12786: LD_EXP 9
12790: PUSH
12791: LD_INT 1
12793: ARRAY
12794: PUSH
12795: LD_EXP 9
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: AND
12804: PUSH
12805: LD_EXP 9
12809: PUSH
12810: LD_INT 3
12812: ARRAY
12813: AND
12814: PUSH
12815: LD_EXP 9
12819: PUSH
12820: LD_INT 4
12822: ARRAY
12823: AND
12824: PUSH
12825: LD_EXP 9
12829: PUSH
12830: LD_INT 5
12832: ARRAY
12833: AND
12834: IFFALSE 12837
// disable ;
12836: DISABLE
// end ;
12837: PPOPN 4
12839: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12840: LD_EXP 10
12844: PUSH
12845: LD_EXP 11
12849: AND
12850: IFFALSE 13048
12852: GO 12854
12854: DISABLE
12855: LD_INT 0
12857: PPUSH
// begin DialogueOn ;
12858: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12862: LD_EXP 11
12866: PPUSH
12867: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12871: LD_ADDR_VAR 0 1
12875: PUSH
12876: LD_INT 1
12878: PPUSH
12879: LD_STRING D5c-Sol1-1
12881: PPUSH
12882: CALL 15445 0 2
12886: ST_TO_ADDR
// if not un then
12887: LD_VAR 0 1
12891: NOT
12892: IFFALSE 12910
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12894: LD_ADDR_VAR 0 1
12898: PUSH
12899: LD_INT 2
12901: PPUSH
12902: LD_STRING D5c-FSol1-1
12904: PPUSH
12905: CALL 15445 0 2
12909: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12910: LD_EXP 21
12914: PPUSH
12915: LD_STRING D5c-JMM-1
12917: PPUSH
12918: CALL_OW 88
// if IsOk ( Lisa ) then
12922: LD_EXP 22
12926: PPUSH
12927: CALL_OW 302
12931: IFFALSE 12947
// Say ( Lisa , D5d-Lisa-1 ) else
12933: LD_EXP 22
12937: PPUSH
12938: LD_STRING D5d-Lisa-1
12940: PPUSH
12941: CALL_OW 88
12945: GO 13032
// if IsOk ( Cyrus ) then
12947: LD_EXP 25
12951: PPUSH
12952: CALL_OW 302
12956: IFFALSE 12972
// Say ( Cyrus , D5d-Cyrus-1 ) else
12958: LD_EXP 25
12962: PPUSH
12963: LD_STRING D5d-Cyrus-1
12965: PPUSH
12966: CALL_OW 88
12970: GO 13032
// if IsOk ( Gary ) then
12972: LD_EXP 32
12976: PPUSH
12977: CALL_OW 302
12981: IFFALSE 12997
// Say ( Gary , D5d-Gary-1 ) else
12983: LD_EXP 32
12987: PPUSH
12988: LD_STRING D5d-Gary-1
12990: PPUSH
12991: CALL_OW 88
12995: GO 13032
// if GetSex ( un ) = sex_male then
12997: LD_VAR 0 1
13001: PPUSH
13002: CALL_OW 258
13006: PUSH
13007: LD_INT 1
13009: EQUAL
13010: IFFALSE 13026
// Say ( un , D5d-Sol1-1 ) else
13012: LD_VAR 0 1
13016: PPUSH
13017: LD_STRING D5d-Sol1-1
13019: PPUSH
13020: CALL_OW 88
13024: GO 13032
// begin DialogueOff ;
13026: CALL_OW 7
// exit ;
13030: GO 13048
// end ; Say ( JMM , D5d-JMM-1 ) ;
13032: LD_EXP 21
13036: PPUSH
13037: LD_STRING D5d-JMM-1
13039: PPUSH
13040: CALL_OW 88
// DialogueOff ;
13044: CALL_OW 7
// end ;
13048: PPOPN 1
13050: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13051: LD_INT 1
13053: PPUSH
13054: LD_INT 17
13056: PPUSH
13057: CALL_OW 294
13061: PUSH
13062: LD_INT 2
13064: GREATEREQUAL
13065: IFFALSE 13186
13067: GO 13069
13069: DISABLE
13070: LD_INT 0
13072: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13073: LD_INT 10
13075: PPUSH
13076: LD_INT 5
13078: PPUSH
13079: LD_INT 1
13081: PPUSH
13082: LD_INT 10
13084: NEG
13085: PPUSH
13086: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13090: LD_INT 10
13092: PPUSH
13093: LD_INT 5
13095: PPUSH
13096: LD_INT 1
13098: PPUSH
13099: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13103: LD_INT 10
13105: PPUSH
13106: LD_INT 5
13108: PPUSH
13109: CALL_OW 86
// DialogueOn ;
13113: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13117: LD_ADDR_VAR 0 1
13121: PUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_STRING D6-Sci1-1
13127: PPUSH
13128: CALL 15445 0 2
13132: ST_TO_ADDR
// if un then
13133: LD_VAR 0 1
13137: IFFALSE 13175
// begin Say ( JMM , D6-JMM-1 ) ;
13139: LD_EXP 21
13143: PPUSH
13144: LD_STRING D6-JMM-1
13146: PPUSH
13147: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13151: LD_VAR 0 1
13155: PPUSH
13156: LD_STRING D6-Sci1-2
13158: PPUSH
13159: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13163: LD_EXP 21
13167: PPUSH
13168: LD_STRING D6-JMM-2
13170: PPUSH
13171: CALL_OW 88
// end ; DialogueOff ;
13175: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13179: LD_STRING M3
13181: PPUSH
13182: CALL_OW 337
// end ;
13186: PPOPN 1
13188: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13189: LD_OWVAR 1
13193: PUSH
13194: LD_INT 42000
13196: GREATEREQUAL
13197: PUSH
13198: LD_INT 2
13200: PPUSH
13201: LD_INT 169
13203: PPUSH
13204: LD_INT 90
13206: PPUSH
13207: LD_INT 10
13209: PPUSH
13210: CALL 51861 0 4
13214: PUSH
13215: LD_INT 4
13217: ARRAY
13218: PUSH
13219: LD_INT 0
13221: EQUAL
13222: PUSH
13223: LD_INT 45
13225: PPUSH
13226: CALL_OW 301
13230: OR
13231: PUSH
13232: LD_INT 45
13234: PPUSH
13235: CALL_OW 255
13239: PUSH
13240: LD_INT 1
13242: EQUAL
13243: OR
13244: AND
13245: PUSH
13246: LD_INT 94
13248: PPUSH
13249: CALL_OW 301
13253: NOT
13254: AND
13255: IFFALSE 14381
13257: GO 13259
13259: DISABLE
13260: LD_INT 0
13262: PPUSH
13263: PPUSH
13264: PPUSH
13265: PPUSH
// begin uc_side := 5 ;
13266: LD_ADDR_OWVAR 20
13270: PUSH
13271: LD_INT 5
13273: ST_TO_ADDR
// uc_nation := 2 ;
13274: LD_ADDR_OWVAR 21
13278: PUSH
13279: LD_INT 2
13281: ST_TO_ADDR
// InitHc ;
13282: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13286: LD_INT 1
13288: PPUSH
13289: LD_INT 3
13291: PPUSH
13292: LD_INT 8
13294: PPUSH
13295: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13299: LD_ADDR_OWVAR 29
13303: PUSH
13304: LD_INT 12
13306: PUSH
13307: LD_INT 12
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13314: LD_ADDR_OWVAR 33
13318: PUSH
13319: LD_STRING SecondCharsGal
13321: ST_TO_ADDR
// hc_face_number := 7 ;
13322: LD_ADDR_OWVAR 34
13326: PUSH
13327: LD_INT 7
13329: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13330: LD_ADDR_EXP 46
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// InitHc ;
13340: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13344: LD_INT 1
13346: PPUSH
13347: LD_INT 16
13349: PPUSH
13350: LD_INT 2
13352: PPUSH
13353: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13357: LD_ADDR_OWVAR 29
13361: PUSH
13362: LD_INT 12
13364: PUSH
13365: LD_INT 12
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: ST_TO_ADDR
// hc_name :=  ;
13372: LD_ADDR_OWVAR 26
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13380: LD_ADDR_EXP 47
13384: PUSH
13385: CALL_OW 44
13389: ST_TO_ADDR
// InitHc ;
13390: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13394: LD_INT 35
13396: PPUSH
13397: CALL_OW 67
// until not InBattle ( 1 ) ;
13401: LD_INT 1
13403: PPUSH
13404: CALL_OW 463
13408: NOT
13409: IFFALSE 13394
// wait ( 0 0$5 ) ;
13411: LD_INT 175
13413: PPUSH
13414: CALL_OW 67
// DialogueOn ;
13418: CALL_OW 6
// InGameOn ;
13422: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 25
13476: PUSH
13477: LD_INT 4
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 25
13486: PUSH
13487: LD_INT 5
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 25
13496: PUSH
13497: LD_INT 8
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 69
13521: PUSH
13522: LD_EXP 21
13526: PUSH
13527: LD_EXP 22
13531: PUSH
13532: LD_EXP 23
13536: PUSH
13537: LD_EXP 24
13541: PUSH
13542: LD_EXP 25
13546: PUSH
13547: LD_EXP 26
13551: PUSH
13552: LD_EXP 27
13556: PUSH
13557: LD_EXP 28
13561: PUSH
13562: LD_EXP 29
13566: PUSH
13567: LD_EXP 31
13571: PUSH
13572: LD_EXP 32
13576: PUSH
13577: LD_EXP 33
13581: PUSH
13582: LD_EXP 34
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: DIFF
13602: PPUSH
13603: LD_INT 26
13605: PUSH
13606: LD_INT 1
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 72
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: ST_TO_ADDR
// if not un and Brown then
13622: LD_VAR 0 1
13626: NOT
13627: PUSH
13628: LD_EXP 27
13632: AND
13633: IFFALSE 13645
// un := Brown ;
13635: LD_ADDR_VAR 0 1
13639: PUSH
13640: LD_EXP 27
13644: ST_TO_ADDR
// if un then
13645: LD_VAR 0 1
13649: IFFALSE 13675
// begin Say ( un , D7-Sol1-1 ) ;
13651: LD_VAR 0 1
13655: PPUSH
13656: LD_STRING D7-Sol1-1
13658: PPUSH
13659: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13663: LD_EXP 21
13667: PPUSH
13668: LD_STRING D7-JMM-1
13670: PPUSH
13671: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13675: LD_EXP 46
13679: PPUSH
13680: LD_STRING D7-Ar1-1
13682: PPUSH
13683: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13687: LD_EXP 21
13691: PPUSH
13692: LD_STRING D7-JMM-2
13694: PPUSH
13695: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13699: LD_EXP 46
13703: PPUSH
13704: LD_STRING D7-Ar1-2
13706: PPUSH
13707: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13711: LD_EXP 21
13715: PPUSH
13716: LD_STRING D7-JMM-3
13718: PPUSH
13719: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13723: LD_EXP 46
13727: PPUSH
13728: LD_STRING D7-Ar1-3
13730: PPUSH
13731: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13735: LD_EXP 21
13739: PPUSH
13740: LD_STRING D7-JMM-4
13742: PPUSH
13743: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13747: LD_EXP 46
13751: PPUSH
13752: LD_STRING D7-Ar1-4
13754: PPUSH
13755: CALL_OW 94
// InGameOff ;
13759: CALL_OW 9
// DialogueOff ;
13763: CALL_OW 7
// case Query ( QCameras ) of 1 :
13767: LD_STRING QCameras
13769: PPUSH
13770: CALL_OW 97
13774: PUSH
13775: LD_INT 1
13777: DOUBLE
13778: EQUAL
13779: IFTRUE 13783
13781: GO 13786
13783: POP
// ; 2 :
13784: GO 13800
13786: LD_INT 2
13788: DOUBLE
13789: EQUAL
13790: IFTRUE 13794
13792: GO 13799
13794: POP
// exit ; end ;
13795: GO 14381
13797: GO 13800
13799: POP
// ChangeMissionObjectives ( MCar ) ;
13800: LD_STRING MCar
13802: PPUSH
13803: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13807: LD_INT 124
13809: PPUSH
13810: LD_INT 90
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: LD_INT 6
13818: NEG
13819: PPUSH
13820: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13824: LD_INT 124
13826: PPUSH
13827: LD_INT 90
13829: PPUSH
13830: LD_INT 1
13832: PPUSH
13833: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13837: LD_INT 12
13839: PPUSH
13840: LD_INT 1
13842: PPUSH
13843: CALL_OW 424
// wait ( 3 ) ;
13847: LD_INT 3
13849: PPUSH
13850: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13854: LD_INT 124
13856: PPUSH
13857: LD_INT 90
13859: PPUSH
13860: CALL_OW 86
// cargo := false ;
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13872: LD_INT 35
13874: PPUSH
13875: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13879: LD_ADDR_VAR 0 3
13883: PUSH
13884: LD_INT 12
13886: PPUSH
13887: LD_INT 32
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 34
13899: PUSH
13900: LD_INT 32
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 58
13909: PUSH
13910: EMPTY
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: LIST
13917: PPUSH
13918: CALL_OW 70
13922: ST_TO_ADDR
// until cargo ;
13923: LD_VAR 0 3
13927: IFFALSE 13872
// cargo := cargo [ 1 ] ;
13929: LD_ADDR_VAR 0 3
13933: PUSH
13934: LD_VAR 0 3
13938: PUSH
13939: LD_INT 1
13941: ARRAY
13942: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13943: LD_VAR 0 3
13947: PPUSH
13948: LD_INT 5
13950: PPUSH
13951: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
13955: LD_INT 12
13957: PPUSH
13958: LD_INT 0
13960: PPUSH
13961: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13965: LD_EXP 46
13969: PPUSH
13970: LD_INT 11
13972: PPUSH
13973: LD_INT 0
13975: PPUSH
13976: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13980: LD_EXP 47
13984: PPUSH
13985: LD_INT 11
13987: PPUSH
13988: LD_INT 0
13990: PPUSH
13991: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
13995: LD_EXP 46
13999: PUSH
14000: LD_EXP 47
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: LD_INT 12
14011: PPUSH
14012: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14016: LD_EXP 46
14020: PPUSH
14021: LD_VAR 0 3
14025: PPUSH
14026: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14030: LD_EXP 46
14034: PUSH
14035: LD_EXP 47
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: LD_INT 209
14046: PPUSH
14047: LD_INT 178
14049: PPUSH
14050: CALL_OW 171
// while ( true ) do
14054: LD_INT 1
14056: IFFALSE 14210
// begin wait ( 0 0$1 ) ;
14058: LD_INT 35
14060: PPUSH
14061: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14065: LD_EXP 46
14069: PPUSH
14070: CALL_OW 314
14074: NOT
14075: PUSH
14076: LD_EXP 47
14080: PPUSH
14081: CALL_OW 314
14085: NOT
14086: OR
14087: IFFALSE 14113
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14089: LD_EXP 46
14093: PUSH
14094: LD_EXP 47
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: LD_INT 209
14105: PPUSH
14106: LD_INT 178
14108: PPUSH
14109: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14113: LD_EXP 46
14117: PPUSH
14118: LD_INT 10
14120: PPUSH
14121: CALL_OW 308
14125: IFFALSE 14136
// RemoveUnit ( ar_mechanic ) ;
14127: LD_EXP 46
14131: PPUSH
14132: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14136: LD_EXP 47
14140: PPUSH
14141: LD_INT 10
14143: PPUSH
14144: CALL_OW 308
14148: IFFALSE 14159
// RemoveUnit ( ar_mechanic_friend ) ;
14150: LD_EXP 47
14154: PPUSH
14155: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14159: LD_VAR 0 3
14163: PPUSH
14164: LD_INT 10
14166: PPUSH
14167: CALL_OW 308
14171: IFFALSE 14182
// RemoveUnit ( cargo ) ;
14173: LD_VAR 0 3
14177: PPUSH
14178: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14182: LD_EXP 46
14186: PPUSH
14187: CALL_OW 300
14191: NOT
14192: PUSH
14193: LD_EXP 47
14197: PPUSH
14198: CALL_OW 300
14202: NOT
14203: AND
14204: IFFALSE 14208
// break ;
14206: GO 14210
// end ;
14208: GO 14054
// wait ( 0 0$2 ) ;
14210: LD_INT 70
14212: PPUSH
14213: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14217: LD_EXP 46
14221: PPUSH
14222: LD_STRING D7a-Ar1-1
14224: PPUSH
14225: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14229: LD_ADDR_VAR 0 4
14233: PUSH
14234: LD_INT 129
14236: PUSH
14237: LD_INT 10
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 103
14246: PUSH
14247: LD_INT 6
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 148
14256: PUSH
14257: LD_INT 47
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 155
14266: PUSH
14267: LD_INT 16
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: ST_TO_ADDR
// if Difficulty = 1 then
14280: LD_OWVAR 67
14284: PUSH
14285: LD_INT 1
14287: EQUAL
14288: IFFALSE 14325
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14290: LD_ADDR_VAR 0 4
14294: PUSH
14295: LD_VAR 0 4
14299: PUSH
14300: LD_INT 78
14302: PUSH
14303: LD_INT 7
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 104
14312: PUSH
14313: LD_INT 43
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: ADD
14324: ST_TO_ADDR
// for i in tmp do
14325: LD_ADDR_VAR 0 2
14329: PUSH
14330: LD_VAR 0 4
14334: PUSH
14335: FOR_IN
14336: IFFALSE 14369
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14338: LD_VAR 0 2
14342: PUSH
14343: LD_INT 1
14345: ARRAY
14346: PPUSH
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 2
14354: ARRAY
14355: PPUSH
14356: LD_INT 1
14358: PPUSH
14359: LD_INT 9
14361: NEG
14362: PPUSH
14363: CALL_OW 330
14367: GO 14335
14369: POP
14370: POP
// CenterOnXY ( 129 , 10 ) ;
14371: LD_INT 129
14373: PPUSH
14374: LD_INT 10
14376: PPUSH
14377: CALL_OW 84
// end ;
14381: PPOPN 4
14383: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14384: LD_EXP 15
14388: PUSH
14389: LD_INT 21000
14391: MINUS
14392: PUSH
14393: LD_OWVAR 1
14397: LESSEQUAL
14398: IFFALSE 14438
14400: GO 14402
14402: DISABLE
// begin powell_warn := true ;
14403: LD_ADDR_EXP 16
14407: PUSH
14408: LD_INT 1
14410: ST_TO_ADDR
// DialogueOn ;
14411: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14415: LD_EXP 30
14419: PPUSH
14420: LD_STRING D9-Pow-1
14422: PPUSH
14423: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14427: LD_INT 10
14429: PPUSH
14430: CALL_OW 68
// DialogueOff ;
14434: CALL_OW 7
// end ;
14438: END
// every 0 0$1 trigger game_time <= tick do
14439: LD_EXP 15
14443: PUSH
14444: LD_OWVAR 1
14448: LESSEQUAL
14449: IFFALSE 14488
14451: GO 14453
14453: DISABLE
// begin DialogueOn ;
14454: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14458: LD_EXP 30
14462: PPUSH
14463: LD_STRING D9a-Pow-1
14465: PPUSH
14466: CALL_OW 94
// dwait ( 0 0$2 ) ;
14470: LD_INT 70
14472: PPUSH
14473: CALL_OW 68
// DialogueOff ;
14477: CALL_OW 7
// YouLost ( Command ) ;
14481: LD_STRING Command
14483: PPUSH
14484: CALL_OW 104
// end ;
14488: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14489: LD_INT 22
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: LD_INT 30
14501: PUSH
14502: LD_INT 1
14504: PUSH
14505: EMPTY
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 69
14517: PUSH
14518: LD_INT 0
14520: EQUAL
14521: PUSH
14522: LD_EXP 21
14526: PPUSH
14527: CALL_OW 302
14531: AND
14532: IFFALSE 15264
14534: GO 14536
14536: DISABLE
14537: LD_INT 0
14539: PPUSH
// begin if tick < [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] then
14540: LD_OWVAR 1
14544: PUSH
14545: LD_INT 189000
14547: PUSH
14548: LD_INT 168000
14550: PUSH
14551: LD_INT 157500
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: PUSH
14559: LD_OWVAR 67
14563: ARRAY
14564: LESS
14565: IFFALSE 14579
// AddMedal ( Time1 , 1 ) else
14567: LD_STRING Time1
14569: PPUSH
14570: LD_INT 1
14572: PPUSH
14573: CALL_OW 101
14577: GO 14610
// if not powell_warn then
14579: LD_EXP 16
14583: NOT
14584: IFFALSE 14599
// AddMedal ( Time1 , - 1 ) else
14586: LD_STRING Time1
14588: PPUSH
14589: LD_INT 1
14591: NEG
14592: PPUSH
14593: CALL_OW 101
14597: GO 14610
// AddMedal ( Time1 , - 2 ) ;
14599: LD_STRING Time1
14601: PPUSH
14602: LD_INT 2
14604: NEG
14605: PPUSH
14606: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14610: LD_EXP 17
14614: PUSH
14615: LD_INT 5
14617: PUSH
14618: LD_INT 4
14620: PUSH
14621: LD_INT 3
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: PUSH
14629: LD_OWVAR 67
14633: ARRAY
14634: GREATEREQUAL
14635: IFFALSE 14650
// AddMedal ( Destroy , - 2 ) else
14637: LD_STRING Destroy
14639: PPUSH
14640: LD_INT 2
14642: NEG
14643: PPUSH
14644: CALL_OW 101
14648: GO 14767
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14650: LD_INT 22
14652: PUSH
14653: LD_INT 2
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 21
14662: PUSH
14663: LD_INT 3
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PUSH
14670: LD_INT 50
14672: PUSH
14673: EMPTY
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PPUSH
14681: CALL_OW 69
14685: PUSH
14686: LD_INT 25
14688: GREATEREQUAL
14689: IFFALSE 14704
// AddMedal ( Destroy , - 1 ) else
14691: LD_STRING Destroy
14693: PPUSH
14694: LD_INT 1
14696: NEG
14697: PPUSH
14698: CALL_OW 101
14702: GO 14767
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14704: LD_INT 22
14706: PUSH
14707: LD_INT 2
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 21
14716: PUSH
14717: LD_INT 3
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 50
14726: PUSH
14727: EMPTY
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: PPUSH
14735: CALL_OW 69
14739: PUSH
14740: LD_INT 15
14742: GREATEREQUAL
14743: IFFALSE 14757
// AddMedal ( Destroy , 1 ) else
14745: LD_STRING Destroy
14747: PPUSH
14748: LD_INT 1
14750: PPUSH
14751: CALL_OW 101
14755: GO 14767
// AddMedal ( Destroy , 2 ) ;
14757: LD_STRING Destroy
14759: PPUSH
14760: LD_INT 2
14762: PPUSH
14763: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14767: LD_EXP 13
14771: PPUSH
14772: LD_STRING 11_artifact_captured
14774: PPUSH
14775: CALL_OW 39
// if artifact_get then
14779: LD_EXP 13
14783: IFFALSE 14797
// AddMedal ( Artefact , 1 ) else
14785: LD_STRING Artefact
14787: PPUSH
14788: LD_INT 1
14790: PPUSH
14791: CALL_OW 101
14795: GO 14808
// AddMedal ( Artefact , - 1 ) ;
14797: LD_STRING Artefact
14799: PPUSH
14800: LD_INT 1
14802: NEG
14803: PPUSH
14804: CALL_OW 101
// GiveMedals ( MAIN ) ;
14808: LD_STRING MAIN
14810: PPUSH
14811: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14815: LD_ADDR_EXP 20
14819: PUSH
14820: LD_EXP 20
14824: PPUSH
14825: LD_INT 51
14827: PUSH
14828: EMPTY
14829: LIST
14830: PPUSH
14831: CALL_OW 72
14835: ST_TO_ADDR
// tmp := JMM ^ selected ;
14836: LD_ADDR_VAR 0 1
14840: PUSH
14841: LD_EXP 21
14845: PUSH
14846: LD_EXP 20
14850: ADD
14851: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14852: LD_VAR 0 1
14856: PPUSH
14857: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14861: LD_VAR 0 1
14865: PUSH
14866: LD_EXP 21
14870: PUSH
14871: LD_EXP 22
14875: PUSH
14876: LD_EXP 23
14880: PUSH
14881: LD_EXP 24
14885: PUSH
14886: LD_EXP 25
14890: PUSH
14891: LD_EXP 26
14895: PUSH
14896: LD_EXP 27
14900: PUSH
14901: LD_EXP 28
14905: PUSH
14906: LD_EXP 29
14910: PUSH
14911: LD_EXP 31
14915: PUSH
14916: LD_EXP 32
14920: PUSH
14921: LD_EXP 33
14925: PUSH
14926: LD_EXP 34
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: DIFF
14946: PPUSH
14947: LD_STRING 11c_others
14949: PPUSH
14950: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14954: LD_EXP 21
14958: PPUSH
14959: LD_EXP 3
14963: PUSH
14964: LD_STRING JMM
14966: STR
14967: PPUSH
14968: CALL_OW 38
// if Lisa then
14972: LD_EXP 22
14976: IFFALSE 14996
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14978: LD_EXP 22
14982: PPUSH
14983: LD_EXP 3
14987: PUSH
14988: LD_STRING Lisa
14990: STR
14991: PPUSH
14992: CALL_OW 38
// if Donaldson then
14996: LD_EXP 23
15000: IFFALSE 15020
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15002: LD_EXP 23
15006: PPUSH
15007: LD_EXP 3
15011: PUSH
15012: LD_STRING Donaldson
15014: STR
15015: PPUSH
15016: CALL_OW 38
// if Bobby then
15020: LD_EXP 24
15024: IFFALSE 15044
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15026: LD_EXP 24
15030: PPUSH
15031: LD_EXP 3
15035: PUSH
15036: LD_STRING Bobby
15038: STR
15039: PPUSH
15040: CALL_OW 38
// if Cyrus then
15044: LD_EXP 25
15048: IFFALSE 15068
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15050: LD_EXP 25
15054: PPUSH
15055: LD_EXP 3
15059: PUSH
15060: LD_STRING Cyrus
15062: STR
15063: PPUSH
15064: CALL_OW 38
// if Denis then
15068: LD_EXP 26
15072: IFFALSE 15092
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15074: LD_EXP 26
15078: PPUSH
15079: LD_EXP 3
15083: PUSH
15084: LD_STRING Denis
15086: STR
15087: PPUSH
15088: CALL_OW 38
// if Brown then
15092: LD_EXP 27
15096: IFFALSE 15116
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15098: LD_EXP 27
15102: PPUSH
15103: LD_EXP 3
15107: PUSH
15108: LD_STRING Brown
15110: STR
15111: PPUSH
15112: CALL_OW 38
// if Gladstone then
15116: LD_EXP 28
15120: IFFALSE 15140
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15122: LD_EXP 28
15126: PPUSH
15127: LD_EXP 3
15131: PUSH
15132: LD_STRING Gladstone
15134: STR
15135: PPUSH
15136: CALL_OW 38
// if Houten then
15140: LD_EXP 29
15144: IFFALSE 15164
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15146: LD_EXP 29
15150: PPUSH
15151: LD_EXP 3
15155: PUSH
15156: LD_STRING Houten
15158: STR
15159: PPUSH
15160: CALL_OW 38
// if Cornel then
15164: LD_EXP 31
15168: IFFALSE 15188
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
15170: LD_EXP 31
15174: PPUSH
15175: LD_EXP 3
15179: PUSH
15180: LD_STRING Cornel
15182: STR
15183: PPUSH
15184: CALL_OW 38
// if Gary then
15188: LD_EXP 32
15192: IFFALSE 15212
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15194: LD_EXP 32
15198: PPUSH
15199: LD_EXP 3
15203: PUSH
15204: LD_STRING Gary
15206: STR
15207: PPUSH
15208: CALL_OW 38
// if Frank then
15212: LD_EXP 33
15216: IFFALSE 15236
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15218: LD_EXP 33
15222: PPUSH
15223: LD_EXP 3
15227: PUSH
15228: LD_STRING Frank
15230: STR
15231: PPUSH
15232: CALL_OW 38
// if Kikuchi then
15236: LD_EXP 34
15240: IFFALSE 15260
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15242: LD_EXP 34
15246: PPUSH
15247: LD_EXP 3
15251: PUSH
15252: LD_STRING Kikuchi
15254: STR
15255: PPUSH
15256: CALL_OW 38
// YouWin ;
15260: CALL_OW 103
// end ;
15264: PPOPN 1
15266: END
// export function CanSayRand ( side ) ; begin
15267: LD_INT 0
15269: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15270: LD_ADDR_VAR 0 2
15274: PUSH
15275: LD_INT 52
15277: PUSH
15278: EMPTY
15279: LIST
15280: PUSH
15281: LD_INT 22
15283: PUSH
15284: LD_VAR 0 1
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: LD_INT 25
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 25
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 4
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 69
15352: PUSH
15353: LD_EXP 21
15357: PUSH
15358: LD_EXP 33
15362: PUSH
15363: LD_EXP 22
15367: PUSH
15368: LD_EXP 23
15372: PUSH
15373: LD_EXP 24
15377: PUSH
15378: LD_EXP 25
15382: PUSH
15383: LD_EXP 26
15387: PUSH
15388: LD_EXP 27
15392: PUSH
15393: LD_EXP 28
15397: PUSH
15398: LD_EXP 29
15402: PUSH
15403: LD_EXP 30
15407: PUSH
15408: LD_EXP 31
15412: PUSH
15413: LD_EXP 32
15417: PUSH
15418: LD_EXP 34
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: DIFF
15439: ST_TO_ADDR
// end ;
15440: LD_VAR 0 2
15444: RET
// export function SayRand ( sex , dial ) ; begin
15445: LD_INT 0
15447: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15448: LD_ADDR_VAR 0 3
15452: PUSH
15453: LD_INT 52
15455: PUSH
15456: EMPTY
15457: LIST
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 1
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 26
15471: PUSH
15472: LD_VAR 0 1
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PUSH
15481: LD_INT 2
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 1
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: LD_INT 25
15496: PUSH
15497: LD_INT 2
15499: PUSH
15500: EMPTY
15501: LIST
15502: LIST
15503: PUSH
15504: LD_INT 25
15506: PUSH
15507: LD_INT 3
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 25
15516: PUSH
15517: LD_INT 4
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PPUSH
15537: CALL_OW 69
15541: PUSH
15542: LD_EXP 21
15546: PUSH
15547: LD_EXP 33
15551: PUSH
15552: LD_EXP 22
15556: PUSH
15557: LD_EXP 23
15561: PUSH
15562: LD_EXP 24
15566: PUSH
15567: LD_EXP 25
15571: PUSH
15572: LD_EXP 26
15576: PUSH
15577: LD_EXP 27
15581: PUSH
15582: LD_EXP 28
15586: PUSH
15587: LD_EXP 29
15591: PUSH
15592: LD_EXP 30
15596: PUSH
15597: LD_EXP 31
15601: PUSH
15602: LD_EXP 32
15606: PUSH
15607: LD_EXP 34
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: DIFF
15628: ST_TO_ADDR
// if not result then
15629: LD_VAR 0 3
15633: NOT
15634: IFFALSE 15638
// exit ;
15636: GO 15666
// result := result [ 1 ] ;
15638: LD_ADDR_VAR 0 3
15642: PUSH
15643: LD_VAR 0 3
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: ST_TO_ADDR
// Say ( result , dial ) ;
15652: LD_VAR 0 3
15656: PPUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: CALL_OW 88
// end ;
15666: LD_VAR 0 3
15670: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15671: LD_INT 0
15673: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15674: LD_ADDR_VAR 0 4
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 26
15691: PUSH
15692: LD_VAR 0 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 25
15706: PUSH
15707: LD_INT 1
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 25
15716: PUSH
15717: LD_INT 2
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 25
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: LD_INT 4
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: PUSH
15761: LD_EXP 21
15765: PUSH
15766: LD_EXP 33
15770: PUSH
15771: LD_EXP 22
15775: PUSH
15776: LD_EXP 23
15780: PUSH
15781: LD_EXP 24
15785: PUSH
15786: LD_EXP 25
15790: PUSH
15791: LD_EXP 26
15795: PUSH
15796: LD_EXP 27
15800: PUSH
15801: LD_EXP 28
15805: PUSH
15806: LD_EXP 29
15810: PUSH
15811: LD_EXP 30
15815: PUSH
15816: LD_EXP 31
15820: PUSH
15821: LD_EXP 32
15825: PUSH
15826: LD_EXP 34
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: LD_VAR 0 3
15851: ADD
15852: DIFF
15853: ST_TO_ADDR
// if not result then
15854: LD_VAR 0 4
15858: NOT
15859: IFFALSE 15863
// exit ;
15861: GO 15891
// result := result [ 1 ] ;
15863: LD_ADDR_VAR 0 4
15867: PUSH
15868: LD_VAR 0 4
15872: PUSH
15873: LD_INT 1
15875: ARRAY
15876: ST_TO_ADDR
// Say ( result , dial ) ;
15877: LD_VAR 0 4
15881: PPUSH
15882: LD_VAR 0 2
15886: PPUSH
15887: CALL_OW 88
// end ; end_of_file
15891: LD_VAR 0 4
15895: RET
// export function CustomEvent ( event ) ; begin
15896: LD_INT 0
15898: PPUSH
// end ;
15899: LD_VAR 0 2
15903: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15904: LD_VAR 0 1
15908: PPUSH
15909: CALL_OW 255
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: IFFALSE 15927
// artifact_get := true ;
15919: LD_ADDR_EXP 13
15923: PUSH
15924: LD_INT 1
15926: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 255
15936: PUSH
15937: LD_INT 2
15939: EQUAL
15940: IFFALSE 15958
// begin artifact_get := false ;
15942: LD_ADDR_EXP 13
15946: PUSH
15947: LD_INT 0
15949: ST_TO_ADDR
// artifact_stolen := true ;
15950: LD_ADDR_EXP 12
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15958: LD_ADDR_EXP 14
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// end ;
15966: PPOPN 2
15968: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15969: LD_ADDR_EXP 14
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// end ;
15977: PPOPN 2
15979: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15980: LD_VAR 0 1
15984: PUSH
15985: LD_EXP 21
15989: EQUAL
15990: IFFALSE 16001
// begin YouLost ( JMM ) ;
15992: LD_STRING JMM
15994: PPUSH
15995: CALL_OW 104
// exit ;
15999: GO 16133
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16001: LD_VAR 0 1
16005: PUSH
16006: LD_INT 22
16008: PUSH
16009: LD_INT 1
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 21
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 2
16028: PUSH
16029: LD_INT 25
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PUSH
16039: LD_INT 25
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 25
16051: PUSH
16052: LD_INT 3
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: PUSH
16059: LD_INT 25
16061: PUSH
16062: LD_INT 4
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 25
16071: PUSH
16072: LD_INT 5
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: LD_INT 25
16081: PUSH
16082: LD_INT 8
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: PPUSH
16103: CALL_OW 69
16107: IN
16108: IFFALSE 16124
// loses_counter := loses_counter + 1 ;
16110: LD_ADDR_EXP 17
16114: PUSH
16115: LD_EXP 17
16119: PUSH
16120: LD_INT 1
16122: PLUS
16123: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL 41728 0 1
// end ;
16133: PPOPN 1
16135: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16136: LD_VAR 0 1
16140: PPUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: CALL 43613 0 2
// end ;
16150: PPOPN 2
16152: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL 42929 0 1
// end ;
16162: PPOPN 1
16164: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: LD_VAR 0 4
16184: PPUSH
16185: LD_VAR 0 5
16189: PPUSH
16190: CALL 41067 0 5
// end ;
16194: PPOPN 5
16196: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16197: LD_VAR 0 1
16201: PPUSH
16202: LD_VAR 0 2
16206: PPUSH
16207: CALL 40664 0 2
// end ;
16211: PPOPN 2
16213: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 247
16223: PUSH
16224: LD_INT 2
16226: EQUAL
16227: IFFALSE 16231
// exit ;
16229: GO 16248
// if not kamikazed then
16231: LD_EXP 11
16235: NOT
16236: IFFALSE 16248
// kamikazed := unit ;
16238: LD_ADDR_EXP 11
16242: PUSH
16243: LD_VAR 0 1
16247: ST_TO_ADDR
// end ;
16248: PPOPN 1
16250: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16251: LD_INT 0
16253: PPUSH
16254: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16255: LD_VAR 0 1
16259: PPUSH
16260: LD_VAR 0 2
16264: PPUSH
16265: LD_VAR 0 3
16269: PPUSH
16270: LD_VAR 0 4
16274: PPUSH
16275: CALL 40509 0 4
// end ;
16279: PPOPN 6
16281: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16282: LD_VAR 0 1
16286: PPUSH
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_VAR 0 3
16296: PPUSH
16297: CALL 40291 0 3
// end ;
16301: PPOPN 3
16303: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_VAR 0 2
16313: PPUSH
16314: CALL 41440 0 2
// end ;
16318: PPOPN 2
16320: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16321: LD_VAR 0 1
16325: PPUSH
16326: LD_VAR 0 2
16330: PPUSH
16331: CALL 39999 0 2
// end ;
16335: PPOPN 2
16337: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16338: LD_VAR 0 1
16342: PPUSH
16343: LD_VAR 0 2
16347: PPUSH
16348: CALL 40183 0 2
// end ;
16352: PPOPN 2
16354: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16355: LD_VAR 0 1
16359: PPUSH
16360: CALL 42695 0 1
// end ;
16364: PPOPN 1
16366: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_VAR 0 2
16376: PPUSH
16377: CALL 43867 0 2
// end ;
16381: PPOPN 2
16383: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16384: LD_VAR 0 1
16388: PPUSH
16389: LD_VAR 0 2
16393: PPUSH
16394: LD_VAR 0 3
16398: PPUSH
16399: LD_VAR 0 4
16403: PPUSH
16404: CALL 44076 0 4
// end ; end_of_file
16408: PPOPN 4
16410: END
// every 0 0$1 trigger game do
16411: LD_EXP 2
16415: IFFALSE 16445
16417: GO 16419
16419: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16420: LD_INT 7
16422: PUSH
16423: LD_INT 6
16425: PUSH
16426: LD_INT 4
16428: PUSH
16429: LD_INT 6
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: PPUSH
16438: LD_INT 1750
16440: PPUSH
16441: CALL 16446 0 2
16445: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16446: LD_INT 0
16448: PPUSH
16449: PPUSH
16450: PPUSH
// if not areas then
16451: LD_VAR 0 1
16455: NOT
16456: IFFALSE 16460
// exit ;
16458: GO 16590
// repeat wait ( time ) ;
16460: LD_VAR 0 2
16464: PPUSH
16465: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16469: LD_ADDR_VAR 0 5
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_INT 90
16479: PPUSH
16480: CALL_OW 12
16484: ST_TO_ADDR
// for i in areas do
16485: LD_ADDR_VAR 0 4
16489: PUSH
16490: LD_VAR 0 1
16494: PUSH
16495: FOR_IN
16496: IFFALSE 16549
// begin if Prob ( p ) then
16498: LD_VAR 0 5
16502: PPUSH
16503: CALL_OW 13
16507: IFFALSE 16547
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16509: LD_INT 1
16511: PPUSH
16512: LD_INT 5
16514: PPUSH
16515: CALL_OW 12
16519: PPUSH
16520: LD_VAR 0 4
16524: PPUSH
16525: LD_INT 1
16527: PPUSH
16528: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16532: LD_INT 385
16534: PPUSH
16535: LD_INT 595
16537: PPUSH
16538: CALL_OW 12
16542: PPUSH
16543: CALL_OW 67
// end ; end ;
16547: GO 16495
16549: POP
16550: POP
// time := time + 0 0$3 ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_VAR 0 2
16560: PUSH
16561: LD_INT 105
16563: PLUS
16564: ST_TO_ADDR
// if time > 7 7$00 then
16565: LD_VAR 0 2
16569: PUSH
16570: LD_INT 14700
16572: GREATER
16573: IFFALSE 16583
// time := 0 0$40 ;
16575: LD_ADDR_VAR 0 2
16579: PUSH
16580: LD_INT 1400
16582: ST_TO_ADDR
// until not game ;
16583: LD_EXP 2
16587: NOT
16588: IFFALSE 16460
// end ; end_of_file
16590: LD_VAR 0 3
16594: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
// skirmish := false ;
16599: LD_ADDR_EXP 48
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// debug_mc := false ;
16607: LD_ADDR_EXP 49
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// mc_bases := [ ] ;
16615: LD_ADDR_EXP 50
16619: PUSH
16620: EMPTY
16621: ST_TO_ADDR
// mc_sides := [ ] ;
16622: LD_ADDR_EXP 76
16626: PUSH
16627: EMPTY
16628: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16629: LD_ADDR_EXP 51
16633: PUSH
16634: EMPTY
16635: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16636: LD_ADDR_EXP 52
16640: PUSH
16641: EMPTY
16642: ST_TO_ADDR
// mc_need_heal := [ ] ;
16643: LD_ADDR_EXP 53
16647: PUSH
16648: EMPTY
16649: ST_TO_ADDR
// mc_healers := [ ] ;
16650: LD_ADDR_EXP 54
16654: PUSH
16655: EMPTY
16656: ST_TO_ADDR
// mc_build_list := [ ] ;
16657: LD_ADDR_EXP 55
16661: PUSH
16662: EMPTY
16663: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16664: LD_ADDR_EXP 82
16668: PUSH
16669: EMPTY
16670: ST_TO_ADDR
// mc_builders := [ ] ;
16671: LD_ADDR_EXP 56
16675: PUSH
16676: EMPTY
16677: ST_TO_ADDR
// mc_construct_list := [ ] ;
16678: LD_ADDR_EXP 57
16682: PUSH
16683: EMPTY
16684: ST_TO_ADDR
// mc_turret_list := [ ] ;
16685: LD_ADDR_EXP 58
16689: PUSH
16690: EMPTY
16691: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16692: LD_ADDR_EXP 59
16696: PUSH
16697: EMPTY
16698: ST_TO_ADDR
// mc_miners := [ ] ;
16699: LD_ADDR_EXP 64
16703: PUSH
16704: EMPTY
16705: ST_TO_ADDR
// mc_mines := [ ] ;
16706: LD_ADDR_EXP 63
16710: PUSH
16711: EMPTY
16712: ST_TO_ADDR
// mc_minefields := [ ] ;
16713: LD_ADDR_EXP 65
16717: PUSH
16718: EMPTY
16719: ST_TO_ADDR
// mc_crates := [ ] ;
16720: LD_ADDR_EXP 66
16724: PUSH
16725: EMPTY
16726: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16727: LD_ADDR_EXP 67
16731: PUSH
16732: EMPTY
16733: ST_TO_ADDR
// mc_crates_area := [ ] ;
16734: LD_ADDR_EXP 68
16738: PUSH
16739: EMPTY
16740: ST_TO_ADDR
// mc_vehicles := [ ] ;
16741: LD_ADDR_EXP 69
16745: PUSH
16746: EMPTY
16747: ST_TO_ADDR
// mc_attack := [ ] ;
16748: LD_ADDR_EXP 70
16752: PUSH
16753: EMPTY
16754: ST_TO_ADDR
// mc_produce := [ ] ;
16755: LD_ADDR_EXP 71
16759: PUSH
16760: EMPTY
16761: ST_TO_ADDR
// mc_defender := [ ] ;
16762: LD_ADDR_EXP 72
16766: PUSH
16767: EMPTY
16768: ST_TO_ADDR
// mc_parking := [ ] ;
16769: LD_ADDR_EXP 74
16773: PUSH
16774: EMPTY
16775: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16776: LD_ADDR_EXP 60
16780: PUSH
16781: EMPTY
16782: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16783: LD_ADDR_EXP 62
16787: PUSH
16788: EMPTY
16789: ST_TO_ADDR
// mc_scan := [ ] ;
16790: LD_ADDR_EXP 73
16794: PUSH
16795: EMPTY
16796: ST_TO_ADDR
// mc_scan_area := [ ] ;
16797: LD_ADDR_EXP 75
16801: PUSH
16802: EMPTY
16803: ST_TO_ADDR
// mc_tech := [ ] ;
16804: LD_ADDR_EXP 77
16808: PUSH
16809: EMPTY
16810: ST_TO_ADDR
// mc_class := [ ] ;
16811: LD_ADDR_EXP 91
16815: PUSH
16816: EMPTY
16817: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16818: LD_ADDR_EXP 92
16822: PUSH
16823: EMPTY
16824: ST_TO_ADDR
// end ;
16825: LD_VAR 0 1
16829: RET
// export function MC_Kill ( base ) ; begin
16830: LD_INT 0
16832: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16833: LD_ADDR_EXP 50
16837: PUSH
16838: LD_EXP 50
16842: PPUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: EMPTY
16849: PPUSH
16850: CALL_OW 1
16854: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16855: LD_ADDR_EXP 51
16859: PUSH
16860: LD_EXP 51
16864: PPUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: EMPTY
16871: PPUSH
16872: CALL_OW 1
16876: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16877: LD_ADDR_EXP 52
16881: PUSH
16882: LD_EXP 52
16886: PPUSH
16887: LD_VAR 0 1
16891: PPUSH
16892: EMPTY
16893: PPUSH
16894: CALL_OW 1
16898: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16899: LD_ADDR_EXP 53
16903: PUSH
16904: LD_EXP 53
16908: PPUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: EMPTY
16915: PPUSH
16916: CALL_OW 1
16920: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16921: LD_ADDR_EXP 54
16925: PUSH
16926: LD_EXP 54
16930: PPUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: EMPTY
16937: PPUSH
16938: CALL_OW 1
16942: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16943: LD_ADDR_EXP 55
16947: PUSH
16948: LD_EXP 55
16952: PPUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: EMPTY
16959: PPUSH
16960: CALL_OW 1
16964: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16965: LD_ADDR_EXP 56
16969: PUSH
16970: LD_EXP 56
16974: PPUSH
16975: LD_VAR 0 1
16979: PPUSH
16980: EMPTY
16981: PPUSH
16982: CALL_OW 1
16986: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16987: LD_ADDR_EXP 57
16991: PUSH
16992: LD_EXP 57
16996: PPUSH
16997: LD_VAR 0 1
17001: PPUSH
17002: EMPTY
17003: PPUSH
17004: CALL_OW 1
17008: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17009: LD_ADDR_EXP 58
17013: PUSH
17014: LD_EXP 58
17018: PPUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: EMPTY
17025: PPUSH
17026: CALL_OW 1
17030: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17031: LD_ADDR_EXP 59
17035: PUSH
17036: LD_EXP 59
17040: PPUSH
17041: LD_VAR 0 1
17045: PPUSH
17046: EMPTY
17047: PPUSH
17048: CALL_OW 1
17052: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17053: LD_ADDR_EXP 60
17057: PUSH
17058: LD_EXP 60
17062: PPUSH
17063: LD_VAR 0 1
17067: PPUSH
17068: EMPTY
17069: PPUSH
17070: CALL_OW 1
17074: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17075: LD_ADDR_EXP 61
17079: PUSH
17080: LD_EXP 61
17084: PPUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 1
17097: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17098: LD_ADDR_EXP 62
17102: PUSH
17103: LD_EXP 62
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: EMPTY
17114: PPUSH
17115: CALL_OW 1
17119: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17120: LD_ADDR_EXP 63
17124: PUSH
17125: LD_EXP 63
17129: PPUSH
17130: LD_VAR 0 1
17134: PPUSH
17135: EMPTY
17136: PPUSH
17137: CALL_OW 1
17141: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17142: LD_ADDR_EXP 64
17146: PUSH
17147: LD_EXP 64
17151: PPUSH
17152: LD_VAR 0 1
17156: PPUSH
17157: EMPTY
17158: PPUSH
17159: CALL_OW 1
17163: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17164: LD_ADDR_EXP 65
17168: PUSH
17169: LD_EXP 65
17173: PPUSH
17174: LD_VAR 0 1
17178: PPUSH
17179: EMPTY
17180: PPUSH
17181: CALL_OW 1
17185: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17186: LD_ADDR_EXP 66
17190: PUSH
17191: LD_EXP 66
17195: PPUSH
17196: LD_VAR 0 1
17200: PPUSH
17201: EMPTY
17202: PPUSH
17203: CALL_OW 1
17207: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17208: LD_ADDR_EXP 67
17212: PUSH
17213: LD_EXP 67
17217: PPUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: EMPTY
17224: PPUSH
17225: CALL_OW 1
17229: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17230: LD_ADDR_EXP 68
17234: PUSH
17235: LD_EXP 68
17239: PPUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: EMPTY
17246: PPUSH
17247: CALL_OW 1
17251: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17252: LD_ADDR_EXP 69
17256: PUSH
17257: LD_EXP 69
17261: PPUSH
17262: LD_VAR 0 1
17266: PPUSH
17267: EMPTY
17268: PPUSH
17269: CALL_OW 1
17273: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17274: LD_ADDR_EXP 70
17278: PUSH
17279: LD_EXP 70
17283: PPUSH
17284: LD_VAR 0 1
17288: PPUSH
17289: EMPTY
17290: PPUSH
17291: CALL_OW 1
17295: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17296: LD_ADDR_EXP 71
17300: PUSH
17301: LD_EXP 71
17305: PPUSH
17306: LD_VAR 0 1
17310: PPUSH
17311: EMPTY
17312: PPUSH
17313: CALL_OW 1
17317: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17318: LD_ADDR_EXP 72
17322: PUSH
17323: LD_EXP 72
17327: PPUSH
17328: LD_VAR 0 1
17332: PPUSH
17333: EMPTY
17334: PPUSH
17335: CALL_OW 1
17339: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17340: LD_ADDR_EXP 73
17344: PUSH
17345: LD_EXP 73
17349: PPUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: EMPTY
17356: PPUSH
17357: CALL_OW 1
17361: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17362: LD_ADDR_EXP 74
17366: PUSH
17367: LD_EXP 74
17371: PPUSH
17372: LD_VAR 0 1
17376: PPUSH
17377: EMPTY
17378: PPUSH
17379: CALL_OW 1
17383: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17384: LD_ADDR_EXP 75
17388: PUSH
17389: LD_EXP 75
17393: PPUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: EMPTY
17400: PPUSH
17401: CALL_OW 1
17405: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17406: LD_ADDR_EXP 77
17410: PUSH
17411: LD_EXP 77
17415: PPUSH
17416: LD_VAR 0 1
17420: PPUSH
17421: EMPTY
17422: PPUSH
17423: CALL_OW 1
17427: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17428: LD_ADDR_EXP 79
17432: PUSH
17433: LD_EXP 79
17437: PPUSH
17438: LD_VAR 0 1
17442: PPUSH
17443: EMPTY
17444: PPUSH
17445: CALL_OW 1
17449: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17450: LD_ADDR_EXP 80
17454: PUSH
17455: LD_EXP 80
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: EMPTY
17466: PPUSH
17467: CALL_OW 1
17471: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17472: LD_ADDR_EXP 81
17476: PUSH
17477: LD_EXP 81
17481: PPUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: EMPTY
17488: PPUSH
17489: CALL_OW 1
17493: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17494: LD_ADDR_EXP 82
17498: PUSH
17499: LD_EXP 82
17503: PPUSH
17504: LD_VAR 0 1
17508: PPUSH
17509: EMPTY
17510: PPUSH
17511: CALL_OW 1
17515: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17516: LD_ADDR_EXP 83
17520: PUSH
17521: LD_EXP 83
17525: PPUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: EMPTY
17532: PPUSH
17533: CALL_OW 1
17537: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17538: LD_ADDR_EXP 84
17542: PUSH
17543: LD_EXP 84
17547: PPUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: EMPTY
17554: PPUSH
17555: CALL_OW 1
17559: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17560: LD_ADDR_EXP 85
17564: PUSH
17565: LD_EXP 85
17569: PPUSH
17570: LD_VAR 0 1
17574: PPUSH
17575: EMPTY
17576: PPUSH
17577: CALL_OW 1
17581: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17582: LD_ADDR_EXP 86
17586: PUSH
17587: LD_EXP 86
17591: PPUSH
17592: LD_VAR 0 1
17596: PPUSH
17597: EMPTY
17598: PPUSH
17599: CALL_OW 1
17603: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17604: LD_ADDR_EXP 87
17608: PUSH
17609: LD_EXP 87
17613: PPUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: EMPTY
17620: PPUSH
17621: CALL_OW 1
17625: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17626: LD_ADDR_EXP 88
17630: PUSH
17631: LD_EXP 88
17635: PPUSH
17636: LD_VAR 0 1
17640: PPUSH
17641: EMPTY
17642: PPUSH
17643: CALL_OW 1
17647: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17648: LD_ADDR_EXP 89
17652: PUSH
17653: LD_EXP 89
17657: PPUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: EMPTY
17664: PPUSH
17665: CALL_OW 1
17669: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17670: LD_ADDR_EXP 90
17674: PUSH
17675: LD_EXP 90
17679: PPUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: EMPTY
17686: PPUSH
17687: CALL_OW 1
17691: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17692: LD_ADDR_EXP 91
17696: PUSH
17697: LD_EXP 91
17701: PPUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: EMPTY
17708: PPUSH
17709: CALL_OW 1
17713: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17714: LD_ADDR_EXP 92
17718: PUSH
17719: LD_EXP 92
17723: PPUSH
17724: LD_VAR 0 1
17728: PPUSH
17729: LD_INT 0
17731: PPUSH
17732: CALL_OW 1
17736: ST_TO_ADDR
// end ;
17737: LD_VAR 0 2
17741: RET
// export function MC_Start ( ) ; var i ; begin
17742: LD_INT 0
17744: PPUSH
17745: PPUSH
// for i = 1 to mc_bases do
17746: LD_ADDR_VAR 0 2
17750: PUSH
17751: DOUBLE
17752: LD_INT 1
17754: DEC
17755: ST_TO_ADDR
17756: LD_EXP 50
17760: PUSH
17761: FOR_TO
17762: IFFALSE 18839
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17764: LD_ADDR_EXP 50
17768: PUSH
17769: LD_EXP 50
17773: PPUSH
17774: LD_VAR 0 2
17778: PPUSH
17779: LD_EXP 50
17783: PUSH
17784: LD_VAR 0 2
17788: ARRAY
17789: PUSH
17790: LD_INT 0
17792: DIFF
17793: PPUSH
17794: CALL_OW 1
17798: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17799: LD_ADDR_EXP 51
17803: PUSH
17804: LD_EXP 51
17808: PPUSH
17809: LD_VAR 0 2
17813: PPUSH
17814: EMPTY
17815: PPUSH
17816: CALL_OW 1
17820: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17821: LD_ADDR_EXP 52
17825: PUSH
17826: LD_EXP 52
17830: PPUSH
17831: LD_VAR 0 2
17835: PPUSH
17836: EMPTY
17837: PPUSH
17838: CALL_OW 1
17842: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17843: LD_ADDR_EXP 53
17847: PUSH
17848: LD_EXP 53
17852: PPUSH
17853: LD_VAR 0 2
17857: PPUSH
17858: EMPTY
17859: PPUSH
17860: CALL_OW 1
17864: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17865: LD_ADDR_EXP 54
17869: PUSH
17870: LD_EXP 54
17874: PPUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: EMPTY
17881: PUSH
17882: EMPTY
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PPUSH
17888: CALL_OW 1
17892: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17893: LD_ADDR_EXP 55
17897: PUSH
17898: LD_EXP 55
17902: PPUSH
17903: LD_VAR 0 2
17907: PPUSH
17908: EMPTY
17909: PPUSH
17910: CALL_OW 1
17914: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17915: LD_ADDR_EXP 82
17919: PUSH
17920: LD_EXP 82
17924: PPUSH
17925: LD_VAR 0 2
17929: PPUSH
17930: EMPTY
17931: PPUSH
17932: CALL_OW 1
17936: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17937: LD_ADDR_EXP 56
17941: PUSH
17942: LD_EXP 56
17946: PPUSH
17947: LD_VAR 0 2
17951: PPUSH
17952: EMPTY
17953: PPUSH
17954: CALL_OW 1
17958: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17959: LD_ADDR_EXP 57
17963: PUSH
17964: LD_EXP 57
17968: PPUSH
17969: LD_VAR 0 2
17973: PPUSH
17974: EMPTY
17975: PPUSH
17976: CALL_OW 1
17980: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
17981: LD_ADDR_EXP 58
17985: PUSH
17986: LD_EXP 58
17990: PPUSH
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_EXP 50
18000: PUSH
18001: LD_VAR 0 2
18005: ARRAY
18006: PPUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 30
18012: PUSH
18013: LD_INT 32
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 30
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: PPUSH
18035: CALL_OW 72
18039: PPUSH
18040: CALL_OW 1
18044: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
18045: LD_ADDR_EXP 59
18049: PUSH
18050: LD_EXP 59
18054: PPUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: LD_EXP 50
18064: PUSH
18065: LD_VAR 0 2
18069: ARRAY
18070: PPUSH
18071: LD_INT 2
18073: PUSH
18074: LD_INT 30
18076: PUSH
18077: LD_INT 32
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 30
18086: PUSH
18087: LD_INT 31
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 58
18101: PUSH
18102: EMPTY
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 72
18113: PPUSH
18114: CALL_OW 1
18118: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
18119: LD_ADDR_EXP 60
18123: PUSH
18124: LD_EXP 60
18128: PPUSH
18129: LD_VAR 0 2
18133: PPUSH
18134: EMPTY
18135: PPUSH
18136: CALL_OW 1
18140: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
18141: LD_ADDR_EXP 64
18145: PUSH
18146: LD_EXP 64
18150: PPUSH
18151: LD_VAR 0 2
18155: PPUSH
18156: EMPTY
18157: PPUSH
18158: CALL_OW 1
18162: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
18163: LD_ADDR_EXP 63
18167: PUSH
18168: LD_EXP 63
18172: PPUSH
18173: LD_VAR 0 2
18177: PPUSH
18178: EMPTY
18179: PPUSH
18180: CALL_OW 1
18184: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
18185: LD_ADDR_EXP 65
18189: PUSH
18190: LD_EXP 65
18194: PPUSH
18195: LD_VAR 0 2
18199: PPUSH
18200: EMPTY
18201: PPUSH
18202: CALL_OW 1
18206: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
18207: LD_ADDR_EXP 66
18211: PUSH
18212: LD_EXP 66
18216: PPUSH
18217: LD_VAR 0 2
18221: PPUSH
18222: EMPTY
18223: PPUSH
18224: CALL_OW 1
18228: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
18229: LD_ADDR_EXP 67
18233: PUSH
18234: LD_EXP 67
18238: PPUSH
18239: LD_VAR 0 2
18243: PPUSH
18244: EMPTY
18245: PPUSH
18246: CALL_OW 1
18250: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
18251: LD_ADDR_EXP 68
18255: PUSH
18256: LD_EXP 68
18260: PPUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: EMPTY
18267: PPUSH
18268: CALL_OW 1
18272: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
18273: LD_ADDR_EXP 69
18277: PUSH
18278: LD_EXP 69
18282: PPUSH
18283: LD_VAR 0 2
18287: PPUSH
18288: EMPTY
18289: PPUSH
18290: CALL_OW 1
18294: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
18295: LD_ADDR_EXP 70
18299: PUSH
18300: LD_EXP 70
18304: PPUSH
18305: LD_VAR 0 2
18309: PPUSH
18310: EMPTY
18311: PPUSH
18312: CALL_OW 1
18316: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
18317: LD_ADDR_EXP 71
18321: PUSH
18322: LD_EXP 71
18326: PPUSH
18327: LD_VAR 0 2
18331: PPUSH
18332: EMPTY
18333: PPUSH
18334: CALL_OW 1
18338: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
18339: LD_ADDR_EXP 72
18343: PUSH
18344: LD_EXP 72
18348: PPUSH
18349: LD_VAR 0 2
18353: PPUSH
18354: EMPTY
18355: PPUSH
18356: CALL_OW 1
18360: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18361: LD_ADDR_EXP 61
18365: PUSH
18366: LD_EXP 61
18370: PPUSH
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_INT 0
18378: PPUSH
18379: CALL_OW 1
18383: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18384: LD_ADDR_EXP 74
18388: PUSH
18389: LD_EXP 74
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: LD_INT 0
18401: PPUSH
18402: CALL_OW 1
18406: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18407: LD_ADDR_EXP 62
18411: PUSH
18412: LD_EXP 62
18416: PPUSH
18417: LD_VAR 0 2
18421: PPUSH
18422: EMPTY
18423: PPUSH
18424: CALL_OW 1
18428: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18429: LD_ADDR_EXP 73
18433: PUSH
18434: LD_EXP 73
18438: PPUSH
18439: LD_VAR 0 2
18443: PPUSH
18444: LD_INT 0
18446: PPUSH
18447: CALL_OW 1
18451: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18452: LD_ADDR_EXP 75
18456: PUSH
18457: LD_EXP 75
18461: PPUSH
18462: LD_VAR 0 2
18466: PPUSH
18467: EMPTY
18468: PPUSH
18469: CALL_OW 1
18473: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18474: LD_ADDR_EXP 78
18478: PUSH
18479: LD_EXP 78
18483: PPUSH
18484: LD_VAR 0 2
18488: PPUSH
18489: LD_INT 0
18491: PPUSH
18492: CALL_OW 1
18496: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18497: LD_ADDR_EXP 79
18501: PUSH
18502: LD_EXP 79
18506: PPUSH
18507: LD_VAR 0 2
18511: PPUSH
18512: EMPTY
18513: PPUSH
18514: CALL_OW 1
18518: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18519: LD_ADDR_EXP 80
18523: PUSH
18524: LD_EXP 80
18528: PPUSH
18529: LD_VAR 0 2
18533: PPUSH
18534: EMPTY
18535: PPUSH
18536: CALL_OW 1
18540: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18541: LD_ADDR_EXP 81
18545: PUSH
18546: LD_EXP 81
18550: PPUSH
18551: LD_VAR 0 2
18555: PPUSH
18556: EMPTY
18557: PPUSH
18558: CALL_OW 1
18562: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18563: LD_ADDR_EXP 83
18567: PUSH
18568: LD_EXP 83
18572: PPUSH
18573: LD_VAR 0 2
18577: PPUSH
18578: LD_EXP 50
18582: PUSH
18583: LD_VAR 0 2
18587: ARRAY
18588: PPUSH
18589: LD_INT 2
18591: PUSH
18592: LD_INT 30
18594: PUSH
18595: LD_INT 6
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 30
18604: PUSH
18605: LD_INT 7
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 30
18614: PUSH
18615: LD_INT 8
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 72
18632: PPUSH
18633: CALL_OW 1
18637: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18638: LD_ADDR_EXP 84
18642: PUSH
18643: LD_EXP 84
18647: PPUSH
18648: LD_VAR 0 2
18652: PPUSH
18653: EMPTY
18654: PPUSH
18655: CALL_OW 1
18659: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18660: LD_ADDR_EXP 85
18664: PUSH
18665: LD_EXP 85
18669: PPUSH
18670: LD_VAR 0 2
18674: PPUSH
18675: EMPTY
18676: PPUSH
18677: CALL_OW 1
18681: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
18682: LD_ADDR_EXP 86
18686: PUSH
18687: LD_EXP 86
18691: PPUSH
18692: LD_VAR 0 2
18696: PPUSH
18697: EMPTY
18698: PPUSH
18699: CALL_OW 1
18703: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18704: LD_ADDR_EXP 87
18708: PUSH
18709: LD_EXP 87
18713: PPUSH
18714: LD_VAR 0 2
18718: PPUSH
18719: EMPTY
18720: PPUSH
18721: CALL_OW 1
18725: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18726: LD_ADDR_EXP 88
18730: PUSH
18731: LD_EXP 88
18735: PPUSH
18736: LD_VAR 0 2
18740: PPUSH
18741: EMPTY
18742: PPUSH
18743: CALL_OW 1
18747: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18748: LD_ADDR_EXP 89
18752: PUSH
18753: LD_EXP 89
18757: PPUSH
18758: LD_VAR 0 2
18762: PPUSH
18763: EMPTY
18764: PPUSH
18765: CALL_OW 1
18769: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18770: LD_ADDR_EXP 90
18774: PUSH
18775: LD_EXP 90
18779: PPUSH
18780: LD_VAR 0 2
18784: PPUSH
18785: EMPTY
18786: PPUSH
18787: CALL_OW 1
18791: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18792: LD_ADDR_EXP 91
18796: PUSH
18797: LD_EXP 91
18801: PPUSH
18802: LD_VAR 0 2
18806: PPUSH
18807: EMPTY
18808: PPUSH
18809: CALL_OW 1
18813: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
18814: LD_ADDR_EXP 92
18818: PUSH
18819: LD_EXP 92
18823: PPUSH
18824: LD_VAR 0 2
18828: PPUSH
18829: LD_INT 0
18831: PPUSH
18832: CALL_OW 1
18836: ST_TO_ADDR
// end ;
18837: GO 17761
18839: POP
18840: POP
// MC_InitSides ( ) ;
18841: CALL 19127 0 0
// MC_InitResearch ( ) ;
18845: CALL 18866 0 0
// CustomInitMacro ( ) ;
18849: CALL 285 0 0
// skirmish := true ;
18853: LD_ADDR_EXP 48
18857: PUSH
18858: LD_INT 1
18860: ST_TO_ADDR
// end ;
18861: LD_VAR 0 1
18865: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
18870: PPUSH
18871: PPUSH
18872: PPUSH
18873: PPUSH
// if not mc_bases then
18874: LD_EXP 50
18878: NOT
18879: IFFALSE 18883
// exit ;
18881: GO 19122
// for i = 1 to 8 do
18883: LD_ADDR_VAR 0 2
18887: PUSH
18888: DOUBLE
18889: LD_INT 1
18891: DEC
18892: ST_TO_ADDR
18893: LD_INT 8
18895: PUSH
18896: FOR_TO
18897: IFFALSE 18923
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18899: LD_ADDR_EXP 77
18903: PUSH
18904: LD_EXP 77
18908: PPUSH
18909: LD_VAR 0 2
18913: PPUSH
18914: EMPTY
18915: PPUSH
18916: CALL_OW 1
18920: ST_TO_ADDR
18921: GO 18896
18923: POP
18924: POP
// tmp := [ ] ;
18925: LD_ADDR_VAR 0 5
18929: PUSH
18930: EMPTY
18931: ST_TO_ADDR
// for i = 1 to mc_sides do
18932: LD_ADDR_VAR 0 2
18936: PUSH
18937: DOUBLE
18938: LD_INT 1
18940: DEC
18941: ST_TO_ADDR
18942: LD_EXP 76
18946: PUSH
18947: FOR_TO
18948: IFFALSE 19006
// if not mc_sides [ i ] in tmp then
18950: LD_EXP 76
18954: PUSH
18955: LD_VAR 0 2
18959: ARRAY
18960: PUSH
18961: LD_VAR 0 5
18965: IN
18966: NOT
18967: IFFALSE 19004
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18969: LD_ADDR_VAR 0 5
18973: PUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: LD_VAR 0 5
18983: PUSH
18984: LD_INT 1
18986: PLUS
18987: PPUSH
18988: LD_EXP 76
18992: PUSH
18993: LD_VAR 0 2
18997: ARRAY
18998: PPUSH
18999: CALL_OW 2
19003: ST_TO_ADDR
19004: GO 18947
19006: POP
19007: POP
// if not tmp then
19008: LD_VAR 0 5
19012: NOT
19013: IFFALSE 19017
// exit ;
19015: GO 19122
// for j in tmp do
19017: LD_ADDR_VAR 0 3
19021: PUSH
19022: LD_VAR 0 5
19026: PUSH
19027: FOR_IN
19028: IFFALSE 19120
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
19030: LD_ADDR_VAR 0 6
19034: PUSH
19035: LD_INT 22
19037: PUSH
19038: LD_VAR 0 3
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 69
19051: ST_TO_ADDR
// if not un then
19052: LD_VAR 0 6
19056: NOT
19057: IFFALSE 19061
// continue ;
19059: GO 19027
// nation := GetNation ( un [ 1 ] ) ;
19061: LD_ADDR_VAR 0 4
19065: PUSH
19066: LD_VAR 0 6
19070: PUSH
19071: LD_INT 1
19073: ARRAY
19074: PPUSH
19075: CALL_OW 248
19079: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
19080: LD_ADDR_EXP 77
19084: PUSH
19085: LD_EXP 77
19089: PPUSH
19090: LD_VAR 0 3
19094: PPUSH
19095: LD_VAR 0 3
19099: PPUSH
19100: LD_VAR 0 4
19104: PPUSH
19105: LD_INT 1
19107: PPUSH
19108: CALL 44273 0 3
19112: PPUSH
19113: CALL_OW 1
19117: ST_TO_ADDR
// end ;
19118: GO 19027
19120: POP
19121: POP
// end ;
19122: LD_VAR 0 1
19126: RET
// export function MC_InitSides ( ) ; var i ; begin
19127: LD_INT 0
19129: PPUSH
19130: PPUSH
// if not mc_bases then
19131: LD_EXP 50
19135: NOT
19136: IFFALSE 19140
// exit ;
19138: GO 19214
// for i = 1 to mc_bases do
19140: LD_ADDR_VAR 0 2
19144: PUSH
19145: DOUBLE
19146: LD_INT 1
19148: DEC
19149: ST_TO_ADDR
19150: LD_EXP 50
19154: PUSH
19155: FOR_TO
19156: IFFALSE 19212
// if mc_bases [ i ] then
19158: LD_EXP 50
19162: PUSH
19163: LD_VAR 0 2
19167: ARRAY
19168: IFFALSE 19210
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
19170: LD_ADDR_EXP 76
19174: PUSH
19175: LD_EXP 76
19179: PPUSH
19180: LD_VAR 0 2
19184: PPUSH
19185: LD_EXP 50
19189: PUSH
19190: LD_VAR 0 2
19194: ARRAY
19195: PUSH
19196: LD_INT 1
19198: ARRAY
19199: PPUSH
19200: CALL_OW 255
19204: PPUSH
19205: CALL_OW 1
19209: ST_TO_ADDR
19210: GO 19155
19212: POP
19213: POP
// end ;
19214: LD_VAR 0 1
19218: RET
// every 0 0$01 trigger skirmish do
19219: LD_EXP 48
19223: IFFALSE 19377
19225: GO 19227
19227: DISABLE
// begin enable ;
19228: ENABLE
// MC_CheckBuildings ( ) ;
19229: CALL 23543 0 0
// MC_CheckPeopleLife ( ) ;
19233: CALL 23668 0 0
// RaiseSailEvent ( 100 ) ;
19237: LD_INT 100
19239: PPUSH
19240: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
19244: LD_INT 103
19246: PPUSH
19247: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
19251: LD_INT 104
19253: PPUSH
19254: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
19258: LD_INT 105
19260: PPUSH
19261: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
19265: LD_INT 106
19267: PPUSH
19268: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
19272: LD_INT 107
19274: PPUSH
19275: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
19279: LD_INT 108
19281: PPUSH
19282: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
19286: LD_INT 109
19288: PPUSH
19289: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
19293: LD_INT 110
19295: PPUSH
19296: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
19300: LD_INT 111
19302: PPUSH
19303: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
19307: LD_INT 112
19309: PPUSH
19310: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
19314: LD_INT 113
19316: PPUSH
19317: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
19321: LD_INT 120
19323: PPUSH
19324: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
19328: LD_INT 121
19330: PPUSH
19331: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
19335: LD_INT 122
19337: PPUSH
19338: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
19342: LD_INT 123
19344: PPUSH
19345: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
19349: LD_INT 124
19351: PPUSH
19352: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
19356: LD_INT 125
19358: PPUSH
19359: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
19363: LD_INT 126
19365: PPUSH
19366: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
19370: LD_INT 200
19372: PPUSH
19373: CALL_OW 427
// end ;
19377: END
// on SailEvent ( event ) do begin if event < 100 then
19378: LD_VAR 0 1
19382: PUSH
19383: LD_INT 100
19385: LESS
19386: IFFALSE 19397
// CustomEvent ( event ) ;
19388: LD_VAR 0 1
19392: PPUSH
19393: CALL 15896 0 1
// if event = 100 then
19397: LD_VAR 0 1
19401: PUSH
19402: LD_INT 100
19404: EQUAL
19405: IFFALSE 19411
// MC_ClassManager ( ) ;
19407: CALL 19803 0 0
// if event = 101 then
19411: LD_VAR 0 1
19415: PUSH
19416: LD_INT 101
19418: EQUAL
19419: IFFALSE 19425
// MC_RepairBuildings ( ) ;
19421: CALL 24264 0 0
// if event = 102 then
19425: LD_VAR 0 1
19429: PUSH
19430: LD_INT 102
19432: EQUAL
19433: IFFALSE 19439
// MC_Heal ( ) ;
19435: CALL 24670 0 0
// if event = 103 then
19439: LD_VAR 0 1
19443: PUSH
19444: LD_INT 103
19446: EQUAL
19447: IFFALSE 19453
// MC_Build ( ) ;
19449: CALL 25092 0 0
// if event = 104 then
19453: LD_VAR 0 1
19457: PUSH
19458: LD_INT 104
19460: EQUAL
19461: IFFALSE 19467
// MC_TurretWeapon ( ) ;
19463: CALL 26705 0 0
// if event = 105 then
19467: LD_VAR 0 1
19471: PUSH
19472: LD_INT 105
19474: EQUAL
19475: IFFALSE 19481
// MC_BuildUpgrade ( ) ;
19477: CALL 26256 0 0
// if event = 106 then
19481: LD_VAR 0 1
19485: PUSH
19486: LD_INT 106
19488: EQUAL
19489: IFFALSE 19495
// MC_PlantMines ( ) ;
19491: CALL 27135 0 0
// if event = 107 then
19495: LD_VAR 0 1
19499: PUSH
19500: LD_INT 107
19502: EQUAL
19503: IFFALSE 19509
// MC_CollectCrates ( ) ;
19505: CALL 28169 0 0
// if event = 108 then
19509: LD_VAR 0 1
19513: PUSH
19514: LD_INT 108
19516: EQUAL
19517: IFFALSE 19523
// MC_LinkRemoteControl ( ) ;
19519: CALL 29926 0 0
// if event = 109 then
19523: LD_VAR 0 1
19527: PUSH
19528: LD_INT 109
19530: EQUAL
19531: IFFALSE 19537
// MC_ProduceVehicle ( ) ;
19533: CALL 30107 0 0
// if event = 110 then
19537: LD_VAR 0 1
19541: PUSH
19542: LD_INT 110
19544: EQUAL
19545: IFFALSE 19551
// MC_SendAttack ( ) ;
19547: CALL 30588 0 0
// if event = 111 then
19551: LD_VAR 0 1
19555: PUSH
19556: LD_INT 111
19558: EQUAL
19559: IFFALSE 19565
// MC_Defend ( ) ;
19561: CALL 30696 0 0
// if event = 112 then
19565: LD_VAR 0 1
19569: PUSH
19570: LD_INT 112
19572: EQUAL
19573: IFFALSE 19579
// MC_Research ( ) ;
19575: CALL 31323 0 0
// if event = 113 then
19579: LD_VAR 0 1
19583: PUSH
19584: LD_INT 113
19586: EQUAL
19587: IFFALSE 19593
// MC_MinesTrigger ( ) ;
19589: CALL 32437 0 0
// if event = 120 then
19593: LD_VAR 0 1
19597: PUSH
19598: LD_INT 120
19600: EQUAL
19601: IFFALSE 19607
// MC_RepairVehicle ( ) ;
19603: CALL 32536 0 0
// if event = 121 then
19607: LD_VAR 0 1
19611: PUSH
19612: LD_INT 121
19614: EQUAL
19615: IFFALSE 19621
// MC_TameApe ( ) ;
19617: CALL 33279 0 0
// if event = 122 then
19621: LD_VAR 0 1
19625: PUSH
19626: LD_INT 122
19628: EQUAL
19629: IFFALSE 19635
// MC_ChangeApeClass ( ) ;
19631: CALL 34108 0 0
// if event = 123 then
19635: LD_VAR 0 1
19639: PUSH
19640: LD_INT 123
19642: EQUAL
19643: IFFALSE 19649
// MC_Bazooka ( ) ;
19645: CALL 34758 0 0
// if event = 124 then
19649: LD_VAR 0 1
19653: PUSH
19654: LD_INT 124
19656: EQUAL
19657: IFFALSE 19663
// MC_TeleportExit ( ) ;
19659: CALL 34956 0 0
// if event = 125 then
19663: LD_VAR 0 1
19667: PUSH
19668: LD_INT 125
19670: EQUAL
19671: IFFALSE 19677
// MC_Deposits ( ) ;
19673: CALL 35603 0 0
// if event = 126 then
19677: LD_VAR 0 1
19681: PUSH
19682: LD_INT 126
19684: EQUAL
19685: IFFALSE 19691
// MC_RemoteDriver ( ) ;
19687: CALL 36228 0 0
// if event = 200 then
19691: LD_VAR 0 1
19695: PUSH
19696: LD_INT 200
19698: EQUAL
19699: IFFALSE 19705
// MC_Idle ( ) ;
19701: CALL 37961 0 0
// end ;
19705: PPOPN 1
19707: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19708: LD_INT 0
19710: PPUSH
19711: PPUSH
// if not mc_bases [ base ] or not tag then
19712: LD_EXP 50
19716: PUSH
19717: LD_VAR 0 1
19721: ARRAY
19722: NOT
19723: PUSH
19724: LD_VAR 0 2
19728: NOT
19729: OR
19730: IFFALSE 19734
// exit ;
19732: GO 19798
// for i in mc_bases [ base ] union mc_ape [ base ] do
19734: LD_ADDR_VAR 0 4
19738: PUSH
19739: LD_EXP 50
19743: PUSH
19744: LD_VAR 0 1
19748: ARRAY
19749: PUSH
19750: LD_EXP 79
19754: PUSH
19755: LD_VAR 0 1
19759: ARRAY
19760: UNION
19761: PUSH
19762: FOR_IN
19763: IFFALSE 19796
// if GetTag ( i ) = tag then
19765: LD_VAR 0 4
19769: PPUSH
19770: CALL_OW 110
19774: PUSH
19775: LD_VAR 0 2
19779: EQUAL
19780: IFFALSE 19794
// SetTag ( i , 0 ) ;
19782: LD_VAR 0 4
19786: PPUSH
19787: LD_INT 0
19789: PPUSH
19790: CALL_OW 109
19794: GO 19762
19796: POP
19797: POP
// end ;
19798: LD_VAR 0 3
19802: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
19808: PPUSH
19809: PPUSH
19810: PPUSH
19811: PPUSH
19812: PPUSH
// if not mc_bases then
19813: LD_EXP 50
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 20280
// for i = 1 to mc_bases do
19822: LD_ADDR_VAR 0 2
19826: PUSH
19827: DOUBLE
19828: LD_INT 1
19830: DEC
19831: ST_TO_ADDR
19832: LD_EXP 50
19836: PUSH
19837: FOR_TO
19838: IFFALSE 20278
// begin tmp := MC_ClassCheckReq ( i ) ;
19840: LD_ADDR_VAR 0 4
19844: PUSH
19845: LD_VAR 0 2
19849: PPUSH
19850: CALL 20285 0 1
19854: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19855: LD_ADDR_EXP 91
19859: PUSH
19860: LD_EXP 91
19864: PPUSH
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 4
19874: PPUSH
19875: CALL_OW 1
19879: ST_TO_ADDR
// if not tmp then
19880: LD_VAR 0 4
19884: NOT
19885: IFFALSE 19889
// continue ;
19887: GO 19837
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19889: LD_ADDR_VAR 0 6
19893: PUSH
19894: LD_EXP 50
19898: PUSH
19899: LD_VAR 0 2
19903: ARRAY
19904: PPUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 4
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 5
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 72
19937: PUSH
19938: LD_EXP 50
19942: PUSH
19943: LD_VAR 0 2
19947: ARRAY
19948: PPUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 30
19954: PUSH
19955: LD_INT 0
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 30
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: PPUSH
19977: CALL_OW 72
19981: PUSH
19982: LD_EXP 50
19986: PUSH
19987: LD_VAR 0 2
19991: ARRAY
19992: PPUSH
19993: LD_INT 30
19995: PUSH
19996: LD_INT 3
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PPUSH
20003: CALL_OW 72
20007: PUSH
20008: LD_EXP 50
20012: PUSH
20013: LD_VAR 0 2
20017: ARRAY
20018: PPUSH
20019: LD_INT 2
20021: PUSH
20022: LD_INT 30
20024: PUSH
20025: LD_INT 6
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 30
20034: PUSH
20035: LD_INT 7
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: LD_INT 8
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 72
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: ST_TO_ADDR
// for j = 1 to 4 do
20069: LD_ADDR_VAR 0 3
20073: PUSH
20074: DOUBLE
20075: LD_INT 1
20077: DEC
20078: ST_TO_ADDR
20079: LD_INT 4
20081: PUSH
20082: FOR_TO
20083: IFFALSE 20274
// begin if not tmp [ j ] then
20085: LD_VAR 0 4
20089: PUSH
20090: LD_VAR 0 3
20094: ARRAY
20095: NOT
20096: IFFALSE 20100
// continue ;
20098: GO 20082
// for p in tmp [ j ] do
20100: LD_ADDR_VAR 0 5
20104: PUSH
20105: LD_VAR 0 4
20109: PUSH
20110: LD_VAR 0 3
20114: ARRAY
20115: PUSH
20116: FOR_IN
20117: IFFALSE 20270
// begin if not b [ j ] then
20119: LD_VAR 0 6
20123: PUSH
20124: LD_VAR 0 3
20128: ARRAY
20129: NOT
20130: IFFALSE 20134
// break ;
20132: GO 20270
// e := 0 ;
20134: LD_ADDR_VAR 0 7
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// for k in b [ j ] do
20142: LD_ADDR_VAR 0 8
20146: PUSH
20147: LD_VAR 0 6
20151: PUSH
20152: LD_VAR 0 3
20156: ARRAY
20157: PUSH
20158: FOR_IN
20159: IFFALSE 20186
// if IsNotFull ( k ) then
20161: LD_VAR 0 8
20165: PPUSH
20166: CALL 48299 0 1
20170: IFFALSE 20184
// begin e := k ;
20172: LD_ADDR_VAR 0 7
20176: PUSH
20177: LD_VAR 0 8
20181: ST_TO_ADDR
// break ;
20182: GO 20186
// end ;
20184: GO 20158
20186: POP
20187: POP
// if e and not UnitGoingToBuilding ( p , e ) then
20188: LD_VAR 0 7
20192: PUSH
20193: LD_VAR 0 5
20197: PPUSH
20198: LD_VAR 0 7
20202: PPUSH
20203: CALL 85287 0 2
20207: NOT
20208: AND
20209: IFFALSE 20268
// begin if IsInUnit ( p ) then
20211: LD_VAR 0 5
20215: PPUSH
20216: CALL_OW 310
20220: IFFALSE 20231
// ComExitBuilding ( p ) ;
20222: LD_VAR 0 5
20226: PPUSH
20227: CALL_OW 122
// ComEnterUnit ( p , e ) ;
20231: LD_VAR 0 5
20235: PPUSH
20236: LD_VAR 0 7
20240: PPUSH
20241: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
20245: LD_VAR 0 5
20249: PPUSH
20250: LD_VAR 0 3
20254: PPUSH
20255: CALL_OW 183
// AddComExitBuilding ( p ) ;
20259: LD_VAR 0 5
20263: PPUSH
20264: CALL_OW 182
// end ; end ;
20268: GO 20116
20270: POP
20271: POP
// end ;
20272: GO 20082
20274: POP
20275: POP
// end ;
20276: GO 19837
20278: POP
20279: POP
// end ;
20280: LD_VAR 0 1
20284: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20299: LD_VAR 0 1
20303: NOT
20304: PUSH
20305: LD_EXP 50
20309: PUSH
20310: LD_VAR 0 1
20314: ARRAY
20315: NOT
20316: OR
20317: PUSH
20318: LD_EXP 50
20322: PUSH
20323: LD_VAR 0 1
20327: ARRAY
20328: PPUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 30
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 30
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 72
20361: NOT
20362: OR
20363: IFFALSE 20367
// exit ;
20365: GO 23538
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20367: LD_ADDR_VAR 0 4
20371: PUSH
20372: LD_EXP 50
20376: PUSH
20377: LD_VAR 0 1
20381: ARRAY
20382: PPUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 25
20388: PUSH
20389: LD_INT 1
20391: PUSH
20392: EMPTY
20393: LIST
20394: LIST
20395: PUSH
20396: LD_INT 25
20398: PUSH
20399: LD_INT 2
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PUSH
20406: LD_INT 25
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 25
20418: PUSH
20419: LD_INT 4
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 25
20428: PUSH
20429: LD_INT 5
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 25
20438: PUSH
20439: LD_INT 8
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 25
20448: PUSH
20449: LD_INT 9
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: PPUSH
20466: CALL_OW 72
20470: ST_TO_ADDR
// for i in tmp do
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: LD_VAR 0 4
20480: PUSH
20481: FOR_IN
20482: IFFALSE 20513
// if GetTag ( i ) then
20484: LD_VAR 0 3
20488: PPUSH
20489: CALL_OW 110
20493: IFFALSE 20511
// tmp := tmp diff i ;
20495: LD_ADDR_VAR 0 4
20499: PUSH
20500: LD_VAR 0 4
20504: PUSH
20505: LD_VAR 0 3
20509: DIFF
20510: ST_TO_ADDR
20511: GO 20481
20513: POP
20514: POP
// if not tmp then
20515: LD_VAR 0 4
20519: NOT
20520: IFFALSE 20524
// exit ;
20522: GO 23538
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20524: LD_ADDR_VAR 0 5
20528: PUSH
20529: LD_EXP 50
20533: PUSH
20534: LD_VAR 0 1
20538: ARRAY
20539: PPUSH
20540: LD_INT 2
20542: PUSH
20543: LD_INT 25
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 25
20555: PUSH
20556: LD_INT 5
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 25
20565: PUSH
20566: LD_INT 8
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 25
20575: PUSH
20576: LD_INT 9
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: PPUSH
20590: CALL_OW 72
20594: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20595: LD_ADDR_VAR 0 6
20599: PUSH
20600: LD_EXP 50
20604: PUSH
20605: LD_VAR 0 1
20609: ARRAY
20610: PPUSH
20611: LD_INT 25
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PPUSH
20621: CALL_OW 72
20625: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20626: LD_ADDR_VAR 0 7
20630: PUSH
20631: LD_EXP 50
20635: PUSH
20636: LD_VAR 0 1
20640: ARRAY
20641: PPUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 3
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PPUSH
20652: CALL_OW 72
20656: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
20657: LD_ADDR_VAR 0 8
20661: PUSH
20662: LD_EXP 50
20666: PUSH
20667: LD_VAR 0 1
20671: ARRAY
20672: PPUSH
20673: LD_INT 25
20675: PUSH
20676: LD_INT 4
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 24
20685: PUSH
20686: LD_INT 251
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PPUSH
20697: CALL_OW 72
20701: ST_TO_ADDR
// if mc_scan [ base ] then
20702: LD_EXP 73
20706: PUSH
20707: LD_VAR 0 1
20711: ARRAY
20712: IFFALSE 21173
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
20714: LD_ADDR_EXP 92
20718: PUSH
20719: LD_EXP 92
20723: PPUSH
20724: LD_VAR 0 1
20728: PPUSH
20729: LD_INT 4
20731: PPUSH
20732: CALL_OW 1
20736: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20737: LD_ADDR_VAR 0 12
20741: PUSH
20742: LD_EXP 50
20746: PUSH
20747: LD_VAR 0 1
20751: ARRAY
20752: PPUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 30
20758: PUSH
20759: LD_INT 4
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 5
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 72
20785: ST_TO_ADDR
// if not b then
20786: LD_VAR 0 12
20790: NOT
20791: IFFALSE 20795
// exit ;
20793: GO 23538
// p := [ ] ;
20795: LD_ADDR_VAR 0 11
20799: PUSH
20800: EMPTY
20801: ST_TO_ADDR
// if sci >= 2 then
20802: LD_VAR 0 8
20806: PUSH
20807: LD_INT 2
20809: GREATEREQUAL
20810: IFFALSE 20841
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20812: LD_ADDR_VAR 0 8
20816: PUSH
20817: LD_VAR 0 8
20821: PUSH
20822: LD_INT 1
20824: ARRAY
20825: PUSH
20826: LD_VAR 0 8
20830: PUSH
20831: LD_INT 2
20833: ARRAY
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: ST_TO_ADDR
20839: GO 20902
// if sci = 1 then
20841: LD_VAR 0 8
20845: PUSH
20846: LD_INT 1
20848: EQUAL
20849: IFFALSE 20870
// sci := [ sci [ 1 ] ] else
20851: LD_ADDR_VAR 0 8
20855: PUSH
20856: LD_VAR 0 8
20860: PUSH
20861: LD_INT 1
20863: ARRAY
20864: PUSH
20865: EMPTY
20866: LIST
20867: ST_TO_ADDR
20868: GO 20902
// if sci = 0 then
20870: LD_VAR 0 8
20874: PUSH
20875: LD_INT 0
20877: EQUAL
20878: IFFALSE 20902
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20880: LD_ADDR_VAR 0 11
20884: PUSH
20885: LD_VAR 0 4
20889: PPUSH
20890: LD_INT 4
20892: PPUSH
20893: CALL 85150 0 2
20897: PUSH
20898: LD_INT 1
20900: ARRAY
20901: ST_TO_ADDR
// if eng > 4 then
20902: LD_VAR 0 6
20906: PUSH
20907: LD_INT 4
20909: GREATER
20910: IFFALSE 20956
// for i = eng downto 4 do
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: DOUBLE
20918: LD_VAR 0 6
20922: INC
20923: ST_TO_ADDR
20924: LD_INT 4
20926: PUSH
20927: FOR_DOWNTO
20928: IFFALSE 20954
// eng := eng diff eng [ i ] ;
20930: LD_ADDR_VAR 0 6
20934: PUSH
20935: LD_VAR 0 6
20939: PUSH
20940: LD_VAR 0 6
20944: PUSH
20945: LD_VAR 0 3
20949: ARRAY
20950: DIFF
20951: ST_TO_ADDR
20952: GO 20927
20954: POP
20955: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
20956: LD_ADDR_VAR 0 4
20960: PUSH
20961: LD_VAR 0 4
20965: PUSH
20966: LD_VAR 0 5
20970: PUSH
20971: LD_VAR 0 6
20975: UNION
20976: PUSH
20977: LD_VAR 0 7
20981: UNION
20982: PUSH
20983: LD_VAR 0 8
20987: UNION
20988: DIFF
20989: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
20990: LD_ADDR_VAR 0 13
20994: PUSH
20995: LD_EXP 50
20999: PUSH
21000: LD_VAR 0 1
21004: ARRAY
21005: PPUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 32
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 30
21021: PUSH
21022: LD_INT 31
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 72
21038: PUSH
21039: LD_EXP 50
21043: PUSH
21044: LD_VAR 0 1
21048: ARRAY
21049: PPUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 30
21055: PUSH
21056: LD_INT 4
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 30
21065: PUSH
21066: LD_INT 5
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 72
21082: PUSH
21083: LD_INT 6
21085: MUL
21086: PLUS
21087: ST_TO_ADDR
// if bcount < tmp then
21088: LD_VAR 0 13
21092: PUSH
21093: LD_VAR 0 4
21097: LESS
21098: IFFALSE 21144
// for i = tmp downto bcount do
21100: LD_ADDR_VAR 0 3
21104: PUSH
21105: DOUBLE
21106: LD_VAR 0 4
21110: INC
21111: ST_TO_ADDR
21112: LD_VAR 0 13
21116: PUSH
21117: FOR_DOWNTO
21118: IFFALSE 21142
// tmp := Delete ( tmp , tmp ) ;
21120: LD_ADDR_VAR 0 4
21124: PUSH
21125: LD_VAR 0 4
21129: PPUSH
21130: LD_VAR 0 4
21134: PPUSH
21135: CALL_OW 3
21139: ST_TO_ADDR
21140: GO 21117
21142: POP
21143: POP
// result := [ tmp , 0 , 0 , p ] ;
21144: LD_ADDR_VAR 0 2
21148: PUSH
21149: LD_VAR 0 4
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 0
21159: PUSH
21160: LD_VAR 0 11
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: ST_TO_ADDR
// exit ;
21171: GO 23538
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21173: LD_EXP 50
21177: PUSH
21178: LD_VAR 0 1
21182: ARRAY
21183: PPUSH
21184: LD_INT 2
21186: PUSH
21187: LD_INT 30
21189: PUSH
21190: LD_INT 6
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 30
21199: PUSH
21200: LD_INT 7
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 30
21209: PUSH
21210: LD_INT 8
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 72
21227: NOT
21228: PUSH
21229: LD_EXP 50
21233: PUSH
21234: LD_VAR 0 1
21238: ARRAY
21239: PPUSH
21240: LD_INT 30
21242: PUSH
21243: LD_INT 3
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: PPUSH
21250: CALL_OW 72
21254: NOT
21255: AND
21256: IFFALSE 21328
// begin if eng = tmp then
21258: LD_VAR 0 6
21262: PUSH
21263: LD_VAR 0 4
21267: EQUAL
21268: IFFALSE 21272
// exit ;
21270: GO 23538
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
21272: LD_ADDR_EXP 92
21276: PUSH
21277: LD_EXP 92
21281: PPUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: CALL_OW 1
21294: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
21295: LD_ADDR_VAR 0 2
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_VAR 0 4
21307: PUSH
21308: LD_VAR 0 6
21312: DIFF
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: LD_INT 0
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: ST_TO_ADDR
// exit ;
21326: GO 23538
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21328: LD_EXP 77
21332: PUSH
21333: LD_EXP 76
21337: PUSH
21338: LD_VAR 0 1
21342: ARRAY
21343: ARRAY
21344: PUSH
21345: LD_EXP 50
21349: PUSH
21350: LD_VAR 0 1
21354: ARRAY
21355: PPUSH
21356: LD_INT 2
21358: PUSH
21359: LD_INT 30
21361: PUSH
21362: LD_INT 6
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 30
21371: PUSH
21372: LD_INT 7
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 30
21381: PUSH
21382: LD_INT 8
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 72
21399: AND
21400: PUSH
21401: LD_EXP 50
21405: PUSH
21406: LD_VAR 0 1
21410: ARRAY
21411: PPUSH
21412: LD_INT 30
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PPUSH
21422: CALL_OW 72
21426: NOT
21427: AND
21428: IFFALSE 21642
// begin if sci >= 6 then
21430: LD_VAR 0 8
21434: PUSH
21435: LD_INT 6
21437: GREATEREQUAL
21438: IFFALSE 21442
// exit ;
21440: GO 23538
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
21442: LD_ADDR_EXP 92
21446: PUSH
21447: LD_EXP 92
21451: PPUSH
21452: LD_VAR 0 1
21456: PPUSH
21457: LD_INT 2
21459: PPUSH
21460: CALL_OW 1
21464: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
21465: LD_ADDR_VAR 0 9
21469: PUSH
21470: LD_VAR 0 4
21474: PUSH
21475: LD_VAR 0 8
21479: DIFF
21480: PPUSH
21481: LD_INT 4
21483: PPUSH
21484: CALL 85150 0 2
21488: ST_TO_ADDR
// p := [ ] ;
21489: LD_ADDR_VAR 0 11
21493: PUSH
21494: EMPTY
21495: ST_TO_ADDR
// if sci < 6 and sort > 6 then
21496: LD_VAR 0 8
21500: PUSH
21501: LD_INT 6
21503: LESS
21504: PUSH
21505: LD_VAR 0 9
21509: PUSH
21510: LD_INT 6
21512: GREATER
21513: AND
21514: IFFALSE 21595
// begin for i = 1 to 6 - sci do
21516: LD_ADDR_VAR 0 3
21520: PUSH
21521: DOUBLE
21522: LD_INT 1
21524: DEC
21525: ST_TO_ADDR
21526: LD_INT 6
21528: PUSH
21529: LD_VAR 0 8
21533: MINUS
21534: PUSH
21535: FOR_TO
21536: IFFALSE 21591
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21538: LD_ADDR_VAR 0 11
21542: PUSH
21543: LD_VAR 0 11
21547: PPUSH
21548: LD_VAR 0 11
21552: PUSH
21553: LD_INT 1
21555: PLUS
21556: PPUSH
21557: LD_VAR 0 9
21561: PUSH
21562: LD_INT 1
21564: ARRAY
21565: PPUSH
21566: CALL_OW 2
21570: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21571: LD_ADDR_VAR 0 9
21575: PUSH
21576: LD_VAR 0 9
21580: PPUSH
21581: LD_INT 1
21583: PPUSH
21584: CALL_OW 3
21588: ST_TO_ADDR
// end ;
21589: GO 21535
21591: POP
21592: POP
// end else
21593: GO 21615
// if sort then
21595: LD_VAR 0 9
21599: IFFALSE 21615
// p := sort [ 1 ] ;
21601: LD_ADDR_VAR 0 11
21605: PUSH
21606: LD_VAR 0 9
21610: PUSH
21611: LD_INT 1
21613: ARRAY
21614: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21615: LD_ADDR_VAR 0 2
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_VAR 0 11
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: ST_TO_ADDR
// exit ;
21640: GO 23538
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21642: LD_EXP 77
21646: PUSH
21647: LD_EXP 76
21651: PUSH
21652: LD_VAR 0 1
21656: ARRAY
21657: ARRAY
21658: PUSH
21659: LD_EXP 50
21663: PUSH
21664: LD_VAR 0 1
21668: ARRAY
21669: PPUSH
21670: LD_INT 2
21672: PUSH
21673: LD_INT 30
21675: PUSH
21676: LD_INT 6
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 30
21685: PUSH
21686: LD_INT 7
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 30
21695: PUSH
21696: LD_INT 8
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: PPUSH
21709: CALL_OW 72
21713: AND
21714: PUSH
21715: LD_EXP 50
21719: PUSH
21720: LD_VAR 0 1
21724: ARRAY
21725: PPUSH
21726: LD_INT 30
21728: PUSH
21729: LD_INT 3
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PPUSH
21736: CALL_OW 72
21740: AND
21741: IFFALSE 22268
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
21743: LD_ADDR_EXP 92
21747: PUSH
21748: LD_EXP 92
21752: PPUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: LD_INT 3
21760: PPUSH
21761: CALL_OW 1
21765: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 0
21779: PUSH
21780: LD_INT 0
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: ST_TO_ADDR
// if not eng then
21789: LD_VAR 0 6
21793: NOT
21794: IFFALSE 21857
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21796: LD_ADDR_VAR 0 11
21800: PUSH
21801: LD_VAR 0 4
21805: PPUSH
21806: LD_INT 2
21808: PPUSH
21809: CALL 85150 0 2
21813: PUSH
21814: LD_INT 1
21816: ARRAY
21817: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_VAR 0 2
21827: PPUSH
21828: LD_INT 2
21830: PPUSH
21831: LD_VAR 0 11
21835: PPUSH
21836: CALL_OW 1
21840: ST_TO_ADDR
// tmp := tmp diff p ;
21841: LD_ADDR_VAR 0 4
21845: PUSH
21846: LD_VAR 0 4
21850: PUSH
21851: LD_VAR 0 11
21855: DIFF
21856: ST_TO_ADDR
// end ; if not eng then
21857: LD_VAR 0 6
21861: NOT
21862: IFFALSE 21888
// tmp := tmp diff ( mech union sci ) else
21864: LD_ADDR_VAR 0 4
21868: PUSH
21869: LD_VAR 0 4
21873: PUSH
21874: LD_VAR 0 7
21878: PUSH
21879: LD_VAR 0 8
21883: UNION
21884: DIFF
21885: ST_TO_ADDR
21886: GO 21920
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
21888: LD_ADDR_VAR 0 4
21892: PUSH
21893: LD_VAR 0 4
21897: PUSH
21898: LD_VAR 0 6
21902: PUSH
21903: LD_INT 1
21905: ARRAY
21906: PUSH
21907: LD_VAR 0 7
21911: UNION
21912: PUSH
21913: LD_VAR 0 8
21917: UNION
21918: DIFF
21919: ST_TO_ADDR
// if tmp and sci < 6 then
21920: LD_VAR 0 4
21924: PUSH
21925: LD_VAR 0 8
21929: PUSH
21930: LD_INT 6
21932: LESS
21933: AND
21934: IFFALSE 22093
// begin sort := SortBySkill ( tmp , 4 ) ;
21936: LD_ADDR_VAR 0 9
21940: PUSH
21941: LD_VAR 0 4
21945: PPUSH
21946: LD_INT 4
21948: PPUSH
21949: CALL 85150 0 2
21953: ST_TO_ADDR
// p := [ ] ;
21954: LD_ADDR_VAR 0 11
21958: PUSH
21959: EMPTY
21960: ST_TO_ADDR
// if sort then
21961: LD_VAR 0 9
21965: IFFALSE 22064
// for i = 1 to 6 - sci do
21967: LD_ADDR_VAR 0 3
21971: PUSH
21972: DOUBLE
21973: LD_INT 1
21975: DEC
21976: ST_TO_ADDR
21977: LD_INT 6
21979: PUSH
21980: LD_VAR 0 8
21984: MINUS
21985: PUSH
21986: FOR_TO
21987: IFFALSE 22062
// begin if i = sort then
21989: LD_VAR 0 3
21993: PUSH
21994: LD_VAR 0 9
21998: EQUAL
21999: IFFALSE 22003
// break ;
22001: GO 22062
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22003: LD_ADDR_VAR 0 11
22007: PUSH
22008: LD_VAR 0 11
22012: PPUSH
22013: LD_VAR 0 11
22017: PUSH
22018: LD_INT 1
22020: PLUS
22021: PPUSH
22022: LD_VAR 0 9
22026: PUSH
22027: LD_VAR 0 3
22031: ARRAY
22032: PPUSH
22033: CALL_OW 2
22037: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22038: LD_ADDR_VAR 0 4
22042: PUSH
22043: LD_VAR 0 4
22047: PUSH
22048: LD_VAR 0 9
22052: PUSH
22053: LD_VAR 0 3
22057: ARRAY
22058: DIFF
22059: ST_TO_ADDR
// end ;
22060: GO 21986
22062: POP
22063: POP
// if p then
22064: LD_VAR 0 11
22068: IFFALSE 22093
// result := Replace ( result , 4 , p ) ;
22070: LD_ADDR_VAR 0 2
22074: PUSH
22075: LD_VAR 0 2
22079: PPUSH
22080: LD_INT 4
22082: PPUSH
22083: LD_VAR 0 11
22087: PPUSH
22088: CALL_OW 1
22092: ST_TO_ADDR
// end ; if tmp and mech < 6 then
22093: LD_VAR 0 4
22097: PUSH
22098: LD_VAR 0 7
22102: PUSH
22103: LD_INT 6
22105: LESS
22106: AND
22107: IFFALSE 22266
// begin sort := SortBySkill ( tmp , 3 ) ;
22109: LD_ADDR_VAR 0 9
22113: PUSH
22114: LD_VAR 0 4
22118: PPUSH
22119: LD_INT 3
22121: PPUSH
22122: CALL 85150 0 2
22126: ST_TO_ADDR
// p := [ ] ;
22127: LD_ADDR_VAR 0 11
22131: PUSH
22132: EMPTY
22133: ST_TO_ADDR
// if sort then
22134: LD_VAR 0 9
22138: IFFALSE 22237
// for i = 1 to 6 - mech do
22140: LD_ADDR_VAR 0 3
22144: PUSH
22145: DOUBLE
22146: LD_INT 1
22148: DEC
22149: ST_TO_ADDR
22150: LD_INT 6
22152: PUSH
22153: LD_VAR 0 7
22157: MINUS
22158: PUSH
22159: FOR_TO
22160: IFFALSE 22235
// begin if i = sort then
22162: LD_VAR 0 3
22166: PUSH
22167: LD_VAR 0 9
22171: EQUAL
22172: IFFALSE 22176
// break ;
22174: GO 22235
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22176: LD_ADDR_VAR 0 11
22180: PUSH
22181: LD_VAR 0 11
22185: PPUSH
22186: LD_VAR 0 11
22190: PUSH
22191: LD_INT 1
22193: PLUS
22194: PPUSH
22195: LD_VAR 0 9
22199: PUSH
22200: LD_VAR 0 3
22204: ARRAY
22205: PPUSH
22206: CALL_OW 2
22210: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22211: LD_ADDR_VAR 0 4
22215: PUSH
22216: LD_VAR 0 4
22220: PUSH
22221: LD_VAR 0 9
22225: PUSH
22226: LD_VAR 0 3
22230: ARRAY
22231: DIFF
22232: ST_TO_ADDR
// end ;
22233: GO 22159
22235: POP
22236: POP
// if p then
22237: LD_VAR 0 11
22241: IFFALSE 22266
// result := Replace ( result , 3 , p ) ;
22243: LD_ADDR_VAR 0 2
22247: PUSH
22248: LD_VAR 0 2
22252: PPUSH
22253: LD_INT 3
22255: PPUSH
22256: LD_VAR 0 11
22260: PPUSH
22261: CALL_OW 1
22265: ST_TO_ADDR
// end ; exit ;
22266: GO 23538
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
22268: LD_EXP 77
22272: PUSH
22273: LD_EXP 76
22277: PUSH
22278: LD_VAR 0 1
22282: ARRAY
22283: ARRAY
22284: NOT
22285: PUSH
22286: LD_EXP 50
22290: PUSH
22291: LD_VAR 0 1
22295: ARRAY
22296: PPUSH
22297: LD_INT 30
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 72
22311: AND
22312: PUSH
22313: LD_EXP 55
22317: PUSH
22318: LD_VAR 0 1
22322: ARRAY
22323: AND
22324: IFFALSE 22868
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
22326: LD_ADDR_EXP 92
22330: PUSH
22331: LD_EXP 92
22335: PPUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: LD_INT 5
22343: PPUSH
22344: CALL_OW 1
22348: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: LD_INT 0
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: ST_TO_ADDR
// if sci > 1 then
22372: LD_VAR 0 8
22376: PUSH
22377: LD_INT 1
22379: GREATER
22380: IFFALSE 22408
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
22382: LD_ADDR_VAR 0 4
22386: PUSH
22387: LD_VAR 0 4
22391: PUSH
22392: LD_VAR 0 8
22396: PUSH
22397: LD_VAR 0 8
22401: PUSH
22402: LD_INT 1
22404: ARRAY
22405: DIFF
22406: DIFF
22407: ST_TO_ADDR
// if tmp and not sci then
22408: LD_VAR 0 4
22412: PUSH
22413: LD_VAR 0 8
22417: NOT
22418: AND
22419: IFFALSE 22488
// begin sort := SortBySkill ( tmp , 4 ) ;
22421: LD_ADDR_VAR 0 9
22425: PUSH
22426: LD_VAR 0 4
22430: PPUSH
22431: LD_INT 4
22433: PPUSH
22434: CALL 85150 0 2
22438: ST_TO_ADDR
// if sort then
22439: LD_VAR 0 9
22443: IFFALSE 22459
// p := sort [ 1 ] ;
22445: LD_ADDR_VAR 0 11
22449: PUSH
22450: LD_VAR 0 9
22454: PUSH
22455: LD_INT 1
22457: ARRAY
22458: ST_TO_ADDR
// if p then
22459: LD_VAR 0 11
22463: IFFALSE 22488
// result := Replace ( result , 4 , p ) ;
22465: LD_ADDR_VAR 0 2
22469: PUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: LD_INT 4
22477: PPUSH
22478: LD_VAR 0 11
22482: PPUSH
22483: CALL_OW 1
22487: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
22488: LD_ADDR_VAR 0 4
22492: PUSH
22493: LD_VAR 0 4
22497: PUSH
22498: LD_VAR 0 7
22502: DIFF
22503: ST_TO_ADDR
// if tmp and mech < 6 then
22504: LD_VAR 0 4
22508: PUSH
22509: LD_VAR 0 7
22513: PUSH
22514: LD_INT 6
22516: LESS
22517: AND
22518: IFFALSE 22677
// begin sort := SortBySkill ( tmp , 3 ) ;
22520: LD_ADDR_VAR 0 9
22524: PUSH
22525: LD_VAR 0 4
22529: PPUSH
22530: LD_INT 3
22532: PPUSH
22533: CALL 85150 0 2
22537: ST_TO_ADDR
// p := [ ] ;
22538: LD_ADDR_VAR 0 11
22542: PUSH
22543: EMPTY
22544: ST_TO_ADDR
// if sort then
22545: LD_VAR 0 9
22549: IFFALSE 22648
// for i = 1 to 6 - mech do
22551: LD_ADDR_VAR 0 3
22555: PUSH
22556: DOUBLE
22557: LD_INT 1
22559: DEC
22560: ST_TO_ADDR
22561: LD_INT 6
22563: PUSH
22564: LD_VAR 0 7
22568: MINUS
22569: PUSH
22570: FOR_TO
22571: IFFALSE 22646
// begin if i = sort then
22573: LD_VAR 0 3
22577: PUSH
22578: LD_VAR 0 9
22582: EQUAL
22583: IFFALSE 22587
// break ;
22585: GO 22646
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22587: LD_ADDR_VAR 0 11
22591: PUSH
22592: LD_VAR 0 11
22596: PPUSH
22597: LD_VAR 0 11
22601: PUSH
22602: LD_INT 1
22604: PLUS
22605: PPUSH
22606: LD_VAR 0 9
22610: PUSH
22611: LD_VAR 0 3
22615: ARRAY
22616: PPUSH
22617: CALL_OW 2
22621: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22622: LD_ADDR_VAR 0 4
22626: PUSH
22627: LD_VAR 0 4
22631: PUSH
22632: LD_VAR 0 9
22636: PUSH
22637: LD_VAR 0 3
22641: ARRAY
22642: DIFF
22643: ST_TO_ADDR
// end ;
22644: GO 22570
22646: POP
22647: POP
// if p then
22648: LD_VAR 0 11
22652: IFFALSE 22677
// result := Replace ( result , 3 , p ) ;
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_VAR 0 2
22663: PPUSH
22664: LD_INT 3
22666: PPUSH
22667: LD_VAR 0 11
22671: PPUSH
22672: CALL_OW 1
22676: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
22677: LD_ADDR_VAR 0 4
22681: PUSH
22682: LD_VAR 0 4
22686: PUSH
22687: LD_VAR 0 6
22691: DIFF
22692: ST_TO_ADDR
// if tmp and eng < 6 then
22693: LD_VAR 0 4
22697: PUSH
22698: LD_VAR 0 6
22702: PUSH
22703: LD_INT 6
22705: LESS
22706: AND
22707: IFFALSE 22866
// begin sort := SortBySkill ( tmp , 2 ) ;
22709: LD_ADDR_VAR 0 9
22713: PUSH
22714: LD_VAR 0 4
22718: PPUSH
22719: LD_INT 2
22721: PPUSH
22722: CALL 85150 0 2
22726: ST_TO_ADDR
// p := [ ] ;
22727: LD_ADDR_VAR 0 11
22731: PUSH
22732: EMPTY
22733: ST_TO_ADDR
// if sort then
22734: LD_VAR 0 9
22738: IFFALSE 22837
// for i = 1 to 6 - eng do
22740: LD_ADDR_VAR 0 3
22744: PUSH
22745: DOUBLE
22746: LD_INT 1
22748: DEC
22749: ST_TO_ADDR
22750: LD_INT 6
22752: PUSH
22753: LD_VAR 0 6
22757: MINUS
22758: PUSH
22759: FOR_TO
22760: IFFALSE 22835
// begin if i = sort then
22762: LD_VAR 0 3
22766: PUSH
22767: LD_VAR 0 9
22771: EQUAL
22772: IFFALSE 22776
// break ;
22774: GO 22835
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22776: LD_ADDR_VAR 0 11
22780: PUSH
22781: LD_VAR 0 11
22785: PPUSH
22786: LD_VAR 0 11
22790: PUSH
22791: LD_INT 1
22793: PLUS
22794: PPUSH
22795: LD_VAR 0 9
22799: PUSH
22800: LD_VAR 0 3
22804: ARRAY
22805: PPUSH
22806: CALL_OW 2
22810: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22811: LD_ADDR_VAR 0 4
22815: PUSH
22816: LD_VAR 0 4
22820: PUSH
22821: LD_VAR 0 9
22825: PUSH
22826: LD_VAR 0 3
22830: ARRAY
22831: DIFF
22832: ST_TO_ADDR
// end ;
22833: GO 22759
22835: POP
22836: POP
// if p then
22837: LD_VAR 0 11
22841: IFFALSE 22866
// result := Replace ( result , 2 , p ) ;
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_VAR 0 2
22852: PPUSH
22853: LD_INT 2
22855: PPUSH
22856: LD_VAR 0 11
22860: PPUSH
22861: CALL_OW 1
22865: ST_TO_ADDR
// end ; exit ;
22866: GO 23538
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
22868: LD_EXP 77
22872: PUSH
22873: LD_EXP 76
22877: PUSH
22878: LD_VAR 0 1
22882: ARRAY
22883: ARRAY
22884: NOT
22885: PUSH
22886: LD_EXP 50
22890: PUSH
22891: LD_VAR 0 1
22895: ARRAY
22896: PPUSH
22897: LD_INT 30
22899: PUSH
22900: LD_INT 3
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 72
22911: AND
22912: PUSH
22913: LD_EXP 55
22917: PUSH
22918: LD_VAR 0 1
22922: ARRAY
22923: NOT
22924: AND
22925: IFFALSE 23538
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
22927: LD_ADDR_EXP 92
22931: PUSH
22932: LD_EXP 92
22936: PPUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: LD_INT 6
22944: PPUSH
22945: CALL_OW 1
22949: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22950: LD_ADDR_VAR 0 2
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: LD_INT 0
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: ST_TO_ADDR
// if sci >= 1 then
22973: LD_VAR 0 8
22977: PUSH
22978: LD_INT 1
22980: GREATEREQUAL
22981: IFFALSE 23003
// tmp := tmp diff sci [ 1 ] ;
22983: LD_ADDR_VAR 0 4
22987: PUSH
22988: LD_VAR 0 4
22992: PUSH
22993: LD_VAR 0 8
22997: PUSH
22998: LD_INT 1
23000: ARRAY
23001: DIFF
23002: ST_TO_ADDR
// if tmp and not sci then
23003: LD_VAR 0 4
23007: PUSH
23008: LD_VAR 0 8
23012: NOT
23013: AND
23014: IFFALSE 23083
// begin sort := SortBySkill ( tmp , 4 ) ;
23016: LD_ADDR_VAR 0 9
23020: PUSH
23021: LD_VAR 0 4
23025: PPUSH
23026: LD_INT 4
23028: PPUSH
23029: CALL 85150 0 2
23033: ST_TO_ADDR
// if sort then
23034: LD_VAR 0 9
23038: IFFALSE 23054
// p := sort [ 1 ] ;
23040: LD_ADDR_VAR 0 11
23044: PUSH
23045: LD_VAR 0 9
23049: PUSH
23050: LD_INT 1
23052: ARRAY
23053: ST_TO_ADDR
// if p then
23054: LD_VAR 0 11
23058: IFFALSE 23083
// result := Replace ( result , 4 , p ) ;
23060: LD_ADDR_VAR 0 2
23064: PUSH
23065: LD_VAR 0 2
23069: PPUSH
23070: LD_INT 4
23072: PPUSH
23073: LD_VAR 0 11
23077: PPUSH
23078: CALL_OW 1
23082: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23083: LD_ADDR_VAR 0 4
23087: PUSH
23088: LD_VAR 0 4
23092: PUSH
23093: LD_VAR 0 7
23097: DIFF
23098: ST_TO_ADDR
// if tmp and mech < 6 then
23099: LD_VAR 0 4
23103: PUSH
23104: LD_VAR 0 7
23108: PUSH
23109: LD_INT 6
23111: LESS
23112: AND
23113: IFFALSE 23272
// begin sort := SortBySkill ( tmp , 3 ) ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_VAR 0 4
23124: PPUSH
23125: LD_INT 3
23127: PPUSH
23128: CALL 85150 0 2
23132: ST_TO_ADDR
// p := [ ] ;
23133: LD_ADDR_VAR 0 11
23137: PUSH
23138: EMPTY
23139: ST_TO_ADDR
// if sort then
23140: LD_VAR 0 9
23144: IFFALSE 23243
// for i = 1 to 6 - mech do
23146: LD_ADDR_VAR 0 3
23150: PUSH
23151: DOUBLE
23152: LD_INT 1
23154: DEC
23155: ST_TO_ADDR
23156: LD_INT 6
23158: PUSH
23159: LD_VAR 0 7
23163: MINUS
23164: PUSH
23165: FOR_TO
23166: IFFALSE 23241
// begin if i = sort then
23168: LD_VAR 0 3
23172: PUSH
23173: LD_VAR 0 9
23177: EQUAL
23178: IFFALSE 23182
// break ;
23180: GO 23241
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23182: LD_ADDR_VAR 0 11
23186: PUSH
23187: LD_VAR 0 11
23191: PPUSH
23192: LD_VAR 0 11
23196: PUSH
23197: LD_INT 1
23199: PLUS
23200: PPUSH
23201: LD_VAR 0 9
23205: PUSH
23206: LD_VAR 0 3
23210: ARRAY
23211: PPUSH
23212: CALL_OW 2
23216: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23217: LD_ADDR_VAR 0 4
23221: PUSH
23222: LD_VAR 0 4
23226: PUSH
23227: LD_VAR 0 9
23231: PUSH
23232: LD_VAR 0 3
23236: ARRAY
23237: DIFF
23238: ST_TO_ADDR
// end ;
23239: GO 23165
23241: POP
23242: POP
// if p then
23243: LD_VAR 0 11
23247: IFFALSE 23272
// result := Replace ( result , 3 , p ) ;
23249: LD_ADDR_VAR 0 2
23253: PUSH
23254: LD_VAR 0 2
23258: PPUSH
23259: LD_INT 3
23261: PPUSH
23262: LD_VAR 0 11
23266: PPUSH
23267: CALL_OW 1
23271: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23272: LD_ADDR_VAR 0 4
23276: PUSH
23277: LD_VAR 0 4
23281: PUSH
23282: LD_VAR 0 6
23286: DIFF
23287: ST_TO_ADDR
// if tmp and eng < 4 then
23288: LD_VAR 0 4
23292: PUSH
23293: LD_VAR 0 6
23297: PUSH
23298: LD_INT 4
23300: LESS
23301: AND
23302: IFFALSE 23463
// begin sort := SortBySkill ( tmp , 2 ) ;
23304: LD_ADDR_VAR 0 9
23308: PUSH
23309: LD_VAR 0 4
23313: PPUSH
23314: LD_INT 2
23316: PPUSH
23317: CALL 85150 0 2
23321: ST_TO_ADDR
// p := [ ] ;
23322: LD_ADDR_VAR 0 11
23326: PUSH
23327: EMPTY
23328: ST_TO_ADDR
// if sort then
23329: LD_VAR 0 9
23333: IFFALSE 23432
// for i = 1 to 4 - eng do
23335: LD_ADDR_VAR 0 3
23339: PUSH
23340: DOUBLE
23341: LD_INT 1
23343: DEC
23344: ST_TO_ADDR
23345: LD_INT 4
23347: PUSH
23348: LD_VAR 0 6
23352: MINUS
23353: PUSH
23354: FOR_TO
23355: IFFALSE 23430
// begin if i = sort then
23357: LD_VAR 0 3
23361: PUSH
23362: LD_VAR 0 9
23366: EQUAL
23367: IFFALSE 23371
// break ;
23369: GO 23430
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23371: LD_ADDR_VAR 0 11
23375: PUSH
23376: LD_VAR 0 11
23380: PPUSH
23381: LD_VAR 0 11
23385: PUSH
23386: LD_INT 1
23388: PLUS
23389: PPUSH
23390: LD_VAR 0 9
23394: PUSH
23395: LD_VAR 0 3
23399: ARRAY
23400: PPUSH
23401: CALL_OW 2
23405: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23406: LD_ADDR_VAR 0 4
23410: PUSH
23411: LD_VAR 0 4
23415: PUSH
23416: LD_VAR 0 9
23420: PUSH
23421: LD_VAR 0 3
23425: ARRAY
23426: DIFF
23427: ST_TO_ADDR
// end ;
23428: GO 23354
23430: POP
23431: POP
// if p then
23432: LD_VAR 0 11
23436: IFFALSE 23461
// result := Replace ( result , 2 , p ) ;
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_VAR 0 2
23447: PPUSH
23448: LD_INT 2
23450: PPUSH
23451: LD_VAR 0 11
23455: PPUSH
23456: CALL_OW 1
23460: ST_TO_ADDR
// end else
23461: GO 23507
// for i = eng downto 5 do
23463: LD_ADDR_VAR 0 3
23467: PUSH
23468: DOUBLE
23469: LD_VAR 0 6
23473: INC
23474: ST_TO_ADDR
23475: LD_INT 5
23477: PUSH
23478: FOR_DOWNTO
23479: IFFALSE 23505
// tmp := tmp union eng [ i ] ;
23481: LD_ADDR_VAR 0 4
23485: PUSH
23486: LD_VAR 0 4
23490: PUSH
23491: LD_VAR 0 6
23495: PUSH
23496: LD_VAR 0 3
23500: ARRAY
23501: UNION
23502: ST_TO_ADDR
23503: GO 23478
23505: POP
23506: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
23507: LD_ADDR_VAR 0 2
23511: PUSH
23512: LD_VAR 0 2
23516: PPUSH
23517: LD_INT 1
23519: PPUSH
23520: LD_VAR 0 4
23524: PUSH
23525: LD_VAR 0 5
23529: DIFF
23530: PPUSH
23531: CALL_OW 1
23535: ST_TO_ADDR
// exit ;
23536: GO 23538
// end ; end ;
23538: LD_VAR 0 2
23542: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
23547: PPUSH
// if not mc_bases then
23548: LD_EXP 50
23552: NOT
23553: IFFALSE 23557
// exit ;
23555: GO 23663
// for i = 1 to mc_bases do
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: DOUBLE
23563: LD_INT 1
23565: DEC
23566: ST_TO_ADDR
23567: LD_EXP 50
23571: PUSH
23572: FOR_TO
23573: IFFALSE 23654
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_EXP 50
23584: PUSH
23585: LD_VAR 0 2
23589: ARRAY
23590: PPUSH
23591: LD_INT 21
23593: PUSH
23594: LD_INT 3
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 3
23603: PUSH
23604: LD_INT 24
23606: PUSH
23607: LD_INT 1000
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PPUSH
23622: CALL_OW 72
23626: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
23627: LD_ADDR_EXP 51
23631: PUSH
23632: LD_EXP 51
23636: PPUSH
23637: LD_VAR 0 2
23641: PPUSH
23642: LD_VAR 0 3
23646: PPUSH
23647: CALL_OW 1
23651: ST_TO_ADDR
// end ;
23652: GO 23572
23654: POP
23655: POP
// RaiseSailEvent ( 101 ) ;
23656: LD_INT 101
23658: PPUSH
23659: CALL_OW 427
// end ;
23663: LD_VAR 0 1
23667: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
23676: PPUSH
// if not mc_bases then
23677: LD_EXP 50
23681: NOT
23682: IFFALSE 23686
// exit ;
23684: GO 24259
// for i = 1 to mc_bases do
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: DOUBLE
23692: LD_INT 1
23694: DEC
23695: ST_TO_ADDR
23696: LD_EXP 50
23700: PUSH
23701: FOR_TO
23702: IFFALSE 24250
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
23704: LD_ADDR_VAR 0 5
23708: PUSH
23709: LD_EXP 50
23713: PUSH
23714: LD_VAR 0 2
23718: ARRAY
23719: PUSH
23720: LD_EXP 79
23724: PUSH
23725: LD_VAR 0 2
23729: ARRAY
23730: UNION
23731: PPUSH
23732: LD_INT 21
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: PUSH
23745: LD_INT 3
23747: PUSH
23748: LD_INT 54
23750: PUSH
23751: EMPTY
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: LD_INT 24
23763: PUSH
23764: LD_INT 750
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PPUSH
23784: CALL_OW 72
23788: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
23789: LD_ADDR_VAR 0 6
23793: PUSH
23794: LD_EXP 50
23798: PUSH
23799: LD_VAR 0 2
23803: ARRAY
23804: PPUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 1
23817: PUSH
23818: LD_INT 3
23820: PUSH
23821: LD_INT 54
23823: PUSH
23824: EMPTY
23825: LIST
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: LD_INT 24
23836: PUSH
23837: LD_INT 250
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PPUSH
23857: CALL_OW 72
23861: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
23862: LD_ADDR_VAR 0 7
23866: PUSH
23867: LD_VAR 0 5
23871: PUSH
23872: LD_VAR 0 6
23876: DIFF
23877: ST_TO_ADDR
// if not need_heal_1 then
23878: LD_VAR 0 6
23882: NOT
23883: IFFALSE 23916
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
23885: LD_ADDR_EXP 53
23889: PUSH
23890: LD_EXP 53
23894: PPUSH
23895: LD_VAR 0 2
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PPUSH
23907: EMPTY
23908: PPUSH
23909: CALL 50965 0 3
23913: ST_TO_ADDR
23914: GO 23986
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
23916: LD_ADDR_EXP 53
23920: PUSH
23921: LD_EXP 53
23925: PPUSH
23926: LD_VAR 0 2
23930: PUSH
23931: LD_INT 1
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PPUSH
23938: LD_EXP 53
23942: PUSH
23943: LD_VAR 0 2
23947: ARRAY
23948: PUSH
23949: LD_INT 1
23951: ARRAY
23952: PPUSH
23953: LD_INT 3
23955: PUSH
23956: LD_INT 24
23958: PUSH
23959: LD_INT 1000
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PPUSH
23970: CALL_OW 72
23974: PUSH
23975: LD_VAR 0 6
23979: UNION
23980: PPUSH
23981: CALL 50965 0 3
23985: ST_TO_ADDR
// if not need_heal_2 then
23986: LD_VAR 0 7
23990: NOT
23991: IFFALSE 24024
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
23993: LD_ADDR_EXP 53
23997: PUSH
23998: LD_EXP 53
24002: PPUSH
24003: LD_VAR 0 2
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PPUSH
24015: EMPTY
24016: PPUSH
24017: CALL 50965 0 3
24021: ST_TO_ADDR
24022: GO 24056
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
24024: LD_ADDR_EXP 53
24028: PUSH
24029: LD_EXP 53
24033: PPUSH
24034: LD_VAR 0 2
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PPUSH
24046: LD_VAR 0 7
24050: PPUSH
24051: CALL 50965 0 3
24055: ST_TO_ADDR
// if need_heal_2 then
24056: LD_VAR 0 7
24060: IFFALSE 24232
// for j in need_heal_2 do
24062: LD_ADDR_VAR 0 3
24066: PUSH
24067: LD_VAR 0 7
24071: PUSH
24072: FOR_IN
24073: IFFALSE 24230
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
24075: LD_ADDR_VAR 0 5
24079: PUSH
24080: LD_EXP 50
24084: PUSH
24085: LD_VAR 0 2
24089: ARRAY
24090: PPUSH
24091: LD_INT 2
24093: PUSH
24094: LD_INT 30
24096: PUSH
24097: LD_INT 6
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 30
24106: PUSH
24107: LD_INT 7
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 30
24116: PUSH
24117: LD_INT 8
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 30
24126: PUSH
24127: LD_INT 0
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 30
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 4
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 72
24167: ST_TO_ADDR
// if tmp then
24168: LD_VAR 0 5
24172: IFFALSE 24228
// begin k := NearestUnitToUnit ( tmp , j ) ;
24174: LD_ADDR_VAR 0 4
24178: PUSH
24179: LD_VAR 0 5
24183: PPUSH
24184: LD_VAR 0 3
24188: PPUSH
24189: CALL_OW 74
24193: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
24194: LD_VAR 0 3
24198: PPUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: CALL_OW 296
24208: PUSH
24209: LD_INT 7
24211: GREATER
24212: IFFALSE 24228
// ComMoveUnit ( j , k ) ;
24214: LD_VAR 0 3
24218: PPUSH
24219: LD_VAR 0 4
24223: PPUSH
24224: CALL_OW 112
// end ; end ;
24228: GO 24072
24230: POP
24231: POP
// if not need_heal_1 and not need_heal_2 then
24232: LD_VAR 0 6
24236: NOT
24237: PUSH
24238: LD_VAR 0 7
24242: NOT
24243: AND
24244: IFFALSE 24248
// continue ;
24246: GO 23701
// end ;
24248: GO 23701
24250: POP
24251: POP
// RaiseSailEvent ( 102 ) ;
24252: LD_INT 102
24254: PPUSH
24255: CALL_OW 427
// end ;
24259: LD_VAR 0 1
24263: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
24264: LD_INT 0
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
// if not mc_bases then
24271: LD_EXP 50
24275: NOT
24276: IFFALSE 24280
// exit ;
24278: GO 24665
// for i = 1 to mc_bases do
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: DOUBLE
24286: LD_INT 1
24288: DEC
24289: ST_TO_ADDR
24290: LD_EXP 50
24294: PUSH
24295: FOR_TO
24296: IFFALSE 24663
// begin if not mc_building_need_repair [ i ] then
24298: LD_EXP 51
24302: PUSH
24303: LD_VAR 0 2
24307: ARRAY
24308: NOT
24309: IFFALSE 24347
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24311: LD_ADDR_EXP 52
24315: PUSH
24316: LD_EXP 52
24320: PPUSH
24321: LD_VAR 0 2
24325: PPUSH
24326: EMPTY
24327: PPUSH
24328: CALL_OW 1
24332: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
24333: LD_VAR 0 2
24337: PPUSH
24338: LD_INT 101
24340: PPUSH
24341: CALL 19708 0 2
// continue ;
24345: GO 24295
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
24347: LD_ADDR_EXP 56
24351: PUSH
24352: LD_EXP 56
24356: PPUSH
24357: LD_VAR 0 2
24361: PPUSH
24362: EMPTY
24363: PPUSH
24364: CALL_OW 1
24368: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24369: LD_VAR 0 2
24373: PPUSH
24374: LD_INT 103
24376: PPUSH
24377: CALL 19708 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
24381: LD_ADDR_VAR 0 5
24385: PUSH
24386: LD_EXP 50
24390: PUSH
24391: LD_VAR 0 2
24395: ARRAY
24396: PUSH
24397: LD_EXP 79
24401: PUSH
24402: LD_VAR 0 2
24406: ARRAY
24407: UNION
24408: PPUSH
24409: LD_INT 2
24411: PUSH
24412: LD_INT 25
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 25
24424: PUSH
24425: LD_INT 16
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: LIST
24436: PUSH
24437: EMPTY
24438: LIST
24439: PPUSH
24440: CALL_OW 72
24444: ST_TO_ADDR
// if not tmp then
24445: LD_VAR 0 5
24449: NOT
24450: IFFALSE 24454
// continue ;
24452: GO 24295
// for j in tmp do
24454: LD_ADDR_VAR 0 3
24458: PUSH
24459: LD_VAR 0 5
24463: PUSH
24464: FOR_IN
24465: IFFALSE 24659
// begin if mc_need_heal [ i ] then
24467: LD_EXP 53
24471: PUSH
24472: LD_VAR 0 2
24476: ARRAY
24477: IFFALSE 24525
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
24479: LD_VAR 0 3
24483: PUSH
24484: LD_EXP 53
24488: PUSH
24489: LD_VAR 0 2
24493: ARRAY
24494: PUSH
24495: LD_INT 1
24497: ARRAY
24498: IN
24499: PUSH
24500: LD_VAR 0 3
24504: PUSH
24505: LD_EXP 53
24509: PUSH
24510: LD_VAR 0 2
24514: ARRAY
24515: PUSH
24516: LD_INT 2
24518: ARRAY
24519: IN
24520: OR
24521: IFFALSE 24525
// continue ;
24523: GO 24464
// if IsInUnit ( j ) then
24525: LD_VAR 0 3
24529: PPUSH
24530: CALL_OW 310
24534: IFFALSE 24545
// ComExitBuilding ( j ) ;
24536: LD_VAR 0 3
24540: PPUSH
24541: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
24545: LD_VAR 0 3
24549: PUSH
24550: LD_EXP 52
24554: PUSH
24555: LD_VAR 0 2
24559: ARRAY
24560: IN
24561: NOT
24562: IFFALSE 24620
// begin SetTag ( j , 101 ) ;
24564: LD_VAR 0 3
24568: PPUSH
24569: LD_INT 101
24571: PPUSH
24572: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
24576: LD_ADDR_EXP 52
24580: PUSH
24581: LD_EXP 52
24585: PPUSH
24586: LD_VAR 0 2
24590: PUSH
24591: LD_EXP 52
24595: PUSH
24596: LD_VAR 0 2
24600: ARRAY
24601: PUSH
24602: LD_INT 1
24604: PLUS
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PPUSH
24610: LD_VAR 0 3
24614: PPUSH
24615: CALL 50965 0 3
24619: ST_TO_ADDR
// end ; wait ( 1 ) ;
24620: LD_INT 1
24622: PPUSH
24623: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
24627: LD_VAR 0 3
24631: PPUSH
24632: LD_EXP 51
24636: PUSH
24637: LD_VAR 0 2
24641: ARRAY
24642: PPUSH
24643: LD_VAR 0 3
24647: PPUSH
24648: CALL_OW 74
24652: PPUSH
24653: CALL_OW 130
// end ;
24657: GO 24464
24659: POP
24660: POP
// end ;
24661: GO 24295
24663: POP
24664: POP
// end ;
24665: LD_VAR 0 1
24669: RET
// export function MC_Heal ; var i , j , tmp ; begin
24670: LD_INT 0
24672: PPUSH
24673: PPUSH
24674: PPUSH
24675: PPUSH
// if not mc_bases then
24676: LD_EXP 50
24680: NOT
24681: IFFALSE 24685
// exit ;
24683: GO 25087
// for i = 1 to mc_bases do
24685: LD_ADDR_VAR 0 2
24689: PUSH
24690: DOUBLE
24691: LD_INT 1
24693: DEC
24694: ST_TO_ADDR
24695: LD_EXP 50
24699: PUSH
24700: FOR_TO
24701: IFFALSE 25085
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
24703: LD_EXP 53
24707: PUSH
24708: LD_VAR 0 2
24712: ARRAY
24713: PUSH
24714: LD_INT 1
24716: ARRAY
24717: NOT
24718: PUSH
24719: LD_EXP 53
24723: PUSH
24724: LD_VAR 0 2
24728: ARRAY
24729: PUSH
24730: LD_INT 2
24732: ARRAY
24733: NOT
24734: AND
24735: IFFALSE 24773
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
24737: LD_ADDR_EXP 54
24741: PUSH
24742: LD_EXP 54
24746: PPUSH
24747: LD_VAR 0 2
24751: PPUSH
24752: EMPTY
24753: PPUSH
24754: CALL_OW 1
24758: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
24759: LD_VAR 0 2
24763: PPUSH
24764: LD_INT 102
24766: PPUSH
24767: CALL 19708 0 2
// continue ;
24771: GO 24700
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
24773: LD_ADDR_VAR 0 4
24777: PUSH
24778: LD_EXP 50
24782: PUSH
24783: LD_VAR 0 2
24787: ARRAY
24788: PPUSH
24789: LD_INT 25
24791: PUSH
24792: LD_INT 4
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PPUSH
24799: CALL_OW 72
24803: ST_TO_ADDR
// if not tmp then
24804: LD_VAR 0 4
24808: NOT
24809: IFFALSE 24813
// continue ;
24811: GO 24700
// if mc_taming [ i ] then
24813: LD_EXP 81
24817: PUSH
24818: LD_VAR 0 2
24822: ARRAY
24823: IFFALSE 24847
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
24825: LD_ADDR_EXP 81
24829: PUSH
24830: LD_EXP 81
24834: PPUSH
24835: LD_VAR 0 2
24839: PPUSH
24840: EMPTY
24841: PPUSH
24842: CALL_OW 1
24846: ST_TO_ADDR
// for j in tmp do
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: LD_VAR 0 4
24856: PUSH
24857: FOR_IN
24858: IFFALSE 25081
// begin if IsInUnit ( j ) then
24860: LD_VAR 0 3
24864: PPUSH
24865: CALL_OW 310
24869: IFFALSE 24880
// ComExitBuilding ( j ) ;
24871: LD_VAR 0 3
24875: PPUSH
24876: CALL_OW 122
// if not j in mc_healers [ i ] then
24880: LD_VAR 0 3
24884: PUSH
24885: LD_EXP 54
24889: PUSH
24890: LD_VAR 0 2
24894: ARRAY
24895: IN
24896: NOT
24897: IFFALSE 24943
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
24899: LD_ADDR_EXP 54
24903: PUSH
24904: LD_EXP 54
24908: PPUSH
24909: LD_VAR 0 2
24913: PUSH
24914: LD_EXP 54
24918: PUSH
24919: LD_VAR 0 2
24923: ARRAY
24924: PUSH
24925: LD_INT 1
24927: PLUS
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PPUSH
24933: LD_VAR 0 3
24937: PPUSH
24938: CALL 50965 0 3
24942: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
24943: LD_VAR 0 3
24947: PPUSH
24948: CALL_OW 110
24952: PUSH
24953: LD_INT 102
24955: NONEQUAL
24956: IFFALSE 24970
// SetTag ( j , 102 ) ;
24958: LD_VAR 0 3
24962: PPUSH
24963: LD_INT 102
24965: PPUSH
24966: CALL_OW 109
// Wait ( 3 ) ;
24970: LD_INT 3
24972: PPUSH
24973: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
24977: LD_EXP 53
24981: PUSH
24982: LD_VAR 0 2
24986: ARRAY
24987: PUSH
24988: LD_INT 1
24990: ARRAY
24991: IFFALSE 25023
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_EXP 53
25002: PUSH
25003: LD_VAR 0 2
25007: ARRAY
25008: PUSH
25009: LD_INT 1
25011: ARRAY
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PPUSH
25017: CALL_OW 128
25021: GO 25079
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
25023: LD_VAR 0 3
25027: PPUSH
25028: CALL_OW 314
25032: NOT
25033: PUSH
25034: LD_EXP 53
25038: PUSH
25039: LD_VAR 0 2
25043: ARRAY
25044: PUSH
25045: LD_INT 2
25047: ARRAY
25048: AND
25049: IFFALSE 25079
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
25051: LD_VAR 0 3
25055: PPUSH
25056: LD_EXP 53
25060: PUSH
25061: LD_VAR 0 2
25065: ARRAY
25066: PUSH
25067: LD_INT 2
25069: ARRAY
25070: PUSH
25071: LD_INT 1
25073: ARRAY
25074: PPUSH
25075: CALL_OW 128
// end ;
25079: GO 24857
25081: POP
25082: POP
// end ;
25083: GO 24700
25085: POP
25086: POP
// end ;
25087: LD_VAR 0 1
25091: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
25092: LD_INT 0
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
// if not mc_bases then
25099: LD_EXP 50
25103: NOT
25104: IFFALSE 25108
// exit ;
25106: GO 26251
// for i = 1 to mc_bases do
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: DOUBLE
25114: LD_INT 1
25116: DEC
25117: ST_TO_ADDR
25118: LD_EXP 50
25122: PUSH
25123: FOR_TO
25124: IFFALSE 26249
// begin if mc_scan [ i ] then
25126: LD_EXP 73
25130: PUSH
25131: LD_VAR 0 2
25135: ARRAY
25136: IFFALSE 25140
// continue ;
25138: GO 25123
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
25140: LD_EXP 55
25144: PUSH
25145: LD_VAR 0 2
25149: ARRAY
25150: NOT
25151: PUSH
25152: LD_EXP 57
25156: PUSH
25157: LD_VAR 0 2
25161: ARRAY
25162: NOT
25163: AND
25164: PUSH
25165: LD_EXP 56
25169: PUSH
25170: LD_VAR 0 2
25174: ARRAY
25175: AND
25176: IFFALSE 25214
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
25178: LD_ADDR_EXP 56
25182: PUSH
25183: LD_EXP 56
25187: PPUSH
25188: LD_VAR 0 2
25192: PPUSH
25193: EMPTY
25194: PPUSH
25195: CALL_OW 1
25199: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_INT 103
25207: PPUSH
25208: CALL 19708 0 2
// continue ;
25212: GO 25123
// end ; if mc_construct_list [ i ] then
25214: LD_EXP 57
25218: PUSH
25219: LD_VAR 0 2
25223: ARRAY
25224: IFFALSE 25444
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25226: LD_ADDR_VAR 0 4
25230: PUSH
25231: LD_EXP 50
25235: PUSH
25236: LD_VAR 0 2
25240: ARRAY
25241: PPUSH
25242: LD_INT 25
25244: PUSH
25245: LD_INT 2
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PPUSH
25252: CALL_OW 72
25256: PUSH
25257: LD_EXP 52
25261: PUSH
25262: LD_VAR 0 2
25266: ARRAY
25267: DIFF
25268: ST_TO_ADDR
// if not tmp then
25269: LD_VAR 0 4
25273: NOT
25274: IFFALSE 25278
// continue ;
25276: GO 25123
// for j in tmp do
25278: LD_ADDR_VAR 0 3
25282: PUSH
25283: LD_VAR 0 4
25287: PUSH
25288: FOR_IN
25289: IFFALSE 25440
// begin if not mc_builders [ i ] then
25291: LD_EXP 56
25295: PUSH
25296: LD_VAR 0 2
25300: ARRAY
25301: NOT
25302: IFFALSE 25360
// begin SetTag ( j , 103 ) ;
25304: LD_VAR 0 3
25308: PPUSH
25309: LD_INT 103
25311: PPUSH
25312: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25316: LD_ADDR_EXP 56
25320: PUSH
25321: LD_EXP 56
25325: PPUSH
25326: LD_VAR 0 2
25330: PUSH
25331: LD_EXP 56
25335: PUSH
25336: LD_VAR 0 2
25340: ARRAY
25341: PUSH
25342: LD_INT 1
25344: PLUS
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: LD_VAR 0 3
25354: PPUSH
25355: CALL 50965 0 3
25359: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25360: LD_VAR 0 3
25364: PPUSH
25365: CALL_OW 310
25369: IFFALSE 25380
// ComExitBuilding ( j ) ;
25371: LD_VAR 0 3
25375: PPUSH
25376: CALL_OW 122
// wait ( 3 ) ;
25380: LD_INT 3
25382: PPUSH
25383: CALL_OW 67
// if not mc_construct_list [ i ] then
25387: LD_EXP 57
25391: PUSH
25392: LD_VAR 0 2
25396: ARRAY
25397: NOT
25398: IFFALSE 25402
// break ;
25400: GO 25440
// if not HasTask ( j ) then
25402: LD_VAR 0 3
25406: PPUSH
25407: CALL_OW 314
25411: NOT
25412: IFFALSE 25438
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
25414: LD_VAR 0 3
25418: PPUSH
25419: LD_EXP 57
25423: PUSH
25424: LD_VAR 0 2
25428: ARRAY
25429: PUSH
25430: LD_INT 1
25432: ARRAY
25433: PPUSH
25434: CALL 53816 0 2
// end ;
25438: GO 25288
25440: POP
25441: POP
// end else
25442: GO 26247
// if mc_build_list [ i ] then
25444: LD_EXP 55
25448: PUSH
25449: LD_VAR 0 2
25453: ARRAY
25454: IFFALSE 26247
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
25456: LD_ADDR_VAR 0 5
25460: PUSH
25461: LD_EXP 50
25465: PUSH
25466: LD_VAR 0 2
25470: ARRAY
25471: PPUSH
25472: LD_INT 2
25474: PUSH
25475: LD_INT 30
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 30
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: PPUSH
25500: CALL_OW 72
25504: ST_TO_ADDR
// if depot then
25505: LD_VAR 0 5
25509: IFFALSE 25527
// depot := depot [ 1 ] else
25511: LD_ADDR_VAR 0 5
25515: PUSH
25516: LD_VAR 0 5
25520: PUSH
25521: LD_INT 1
25523: ARRAY
25524: ST_TO_ADDR
25525: GO 25535
// depot := 0 ;
25527: LD_ADDR_VAR 0 5
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
25535: LD_EXP 55
25539: PUSH
25540: LD_VAR 0 2
25544: ARRAY
25545: PUSH
25546: LD_INT 1
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: CALL 53646 0 1
25558: PUSH
25559: LD_EXP 50
25563: PUSH
25564: LD_VAR 0 2
25568: ARRAY
25569: PPUSH
25570: LD_INT 2
25572: PUSH
25573: LD_INT 30
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 30
25585: PUSH
25586: LD_INT 3
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: LIST
25597: PPUSH
25598: CALL_OW 72
25602: NOT
25603: AND
25604: IFFALSE 25709
// begin for j = 1 to mc_build_list [ i ] do
25606: LD_ADDR_VAR 0 3
25610: PUSH
25611: DOUBLE
25612: LD_INT 1
25614: DEC
25615: ST_TO_ADDR
25616: LD_EXP 55
25620: PUSH
25621: LD_VAR 0 2
25625: ARRAY
25626: PUSH
25627: FOR_TO
25628: IFFALSE 25707
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
25630: LD_EXP 55
25634: PUSH
25635: LD_VAR 0 2
25639: ARRAY
25640: PUSH
25641: LD_VAR 0 3
25645: ARRAY
25646: PUSH
25647: LD_INT 1
25649: ARRAY
25650: PUSH
25651: LD_INT 2
25653: EQUAL
25654: IFFALSE 25705
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
25656: LD_ADDR_EXP 55
25660: PUSH
25661: LD_EXP 55
25665: PPUSH
25666: LD_VAR 0 2
25670: PPUSH
25671: LD_EXP 55
25675: PUSH
25676: LD_VAR 0 2
25680: ARRAY
25681: PPUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: LD_INT 1
25689: PPUSH
25690: LD_INT 0
25692: PPUSH
25693: CALL 50383 0 4
25697: PPUSH
25698: CALL_OW 1
25702: ST_TO_ADDR
// break ;
25703: GO 25707
// end ;
25705: GO 25627
25707: POP
25708: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
25709: LD_EXP 55
25713: PUSH
25714: LD_VAR 0 2
25718: ARRAY
25719: PUSH
25720: LD_INT 1
25722: ARRAY
25723: PUSH
25724: LD_INT 1
25726: ARRAY
25727: PUSH
25728: LD_INT 0
25730: EQUAL
25731: PUSH
25732: LD_VAR 0 5
25736: PUSH
25737: LD_VAR 0 5
25741: PPUSH
25742: LD_EXP 55
25746: PUSH
25747: LD_VAR 0 2
25751: ARRAY
25752: PUSH
25753: LD_INT 1
25755: ARRAY
25756: PUSH
25757: LD_INT 1
25759: ARRAY
25760: PPUSH
25761: LD_EXP 55
25765: PUSH
25766: LD_VAR 0 2
25770: ARRAY
25771: PUSH
25772: LD_INT 1
25774: ARRAY
25775: PUSH
25776: LD_INT 2
25778: ARRAY
25779: PPUSH
25780: LD_EXP 55
25784: PUSH
25785: LD_VAR 0 2
25789: ARRAY
25790: PUSH
25791: LD_INT 1
25793: ARRAY
25794: PUSH
25795: LD_INT 3
25797: ARRAY
25798: PPUSH
25799: LD_EXP 55
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: PUSH
25810: LD_INT 1
25812: ARRAY
25813: PUSH
25814: LD_INT 4
25816: ARRAY
25817: PPUSH
25818: CALL 58362 0 5
25822: AND
25823: OR
25824: IFFALSE 26105
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: LD_EXP 50
25835: PUSH
25836: LD_VAR 0 2
25840: ARRAY
25841: PPUSH
25842: LD_INT 25
25844: PUSH
25845: LD_INT 2
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PPUSH
25852: CALL_OW 72
25856: PUSH
25857: LD_EXP 52
25861: PUSH
25862: LD_VAR 0 2
25866: ARRAY
25867: DIFF
25868: ST_TO_ADDR
// if not tmp then
25869: LD_VAR 0 4
25873: NOT
25874: IFFALSE 25878
// continue ;
25876: GO 25123
// for j in tmp do
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: LD_VAR 0 4
25887: PUSH
25888: FOR_IN
25889: IFFALSE 26101
// begin if not mc_builders [ i ] then
25891: LD_EXP 56
25895: PUSH
25896: LD_VAR 0 2
25900: ARRAY
25901: NOT
25902: IFFALSE 25960
// begin SetTag ( j , 103 ) ;
25904: LD_VAR 0 3
25908: PPUSH
25909: LD_INT 103
25911: PPUSH
25912: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25916: LD_ADDR_EXP 56
25920: PUSH
25921: LD_EXP 56
25925: PPUSH
25926: LD_VAR 0 2
25930: PUSH
25931: LD_EXP 56
25935: PUSH
25936: LD_VAR 0 2
25940: ARRAY
25941: PUSH
25942: LD_INT 1
25944: PLUS
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: LD_VAR 0 3
25954: PPUSH
25955: CALL 50965 0 3
25959: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25960: LD_VAR 0 3
25964: PPUSH
25965: CALL_OW 310
25969: IFFALSE 25980
// ComExitBuilding ( j ) ;
25971: LD_VAR 0 3
25975: PPUSH
25976: CALL_OW 122
// wait ( 3 ) ;
25980: LD_INT 3
25982: PPUSH
25983: CALL_OW 67
// if not mc_build_list [ i ] then
25987: LD_EXP 55
25991: PUSH
25992: LD_VAR 0 2
25996: ARRAY
25997: NOT
25998: IFFALSE 26002
// break ;
26000: GO 26101
// if not HasTask ( j ) then
26002: LD_VAR 0 3
26006: PPUSH
26007: CALL_OW 314
26011: NOT
26012: IFFALSE 26099
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
26014: LD_VAR 0 3
26018: PPUSH
26019: LD_EXP 55
26023: PUSH
26024: LD_VAR 0 2
26028: ARRAY
26029: PUSH
26030: LD_INT 1
26032: ARRAY
26033: PUSH
26034: LD_INT 1
26036: ARRAY
26037: PPUSH
26038: LD_EXP 55
26042: PUSH
26043: LD_VAR 0 2
26047: ARRAY
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: PUSH
26053: LD_INT 2
26055: ARRAY
26056: PPUSH
26057: LD_EXP 55
26061: PUSH
26062: LD_VAR 0 2
26066: ARRAY
26067: PUSH
26068: LD_INT 1
26070: ARRAY
26071: PUSH
26072: LD_INT 3
26074: ARRAY
26075: PPUSH
26076: LD_EXP 55
26080: PUSH
26081: LD_VAR 0 2
26085: ARRAY
26086: PUSH
26087: LD_INT 1
26089: ARRAY
26090: PUSH
26091: LD_INT 4
26093: ARRAY
26094: PPUSH
26095: CALL_OW 145
// end ;
26099: GO 25888
26101: POP
26102: POP
// end else
26103: GO 26247
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
26105: LD_EXP 50
26109: PUSH
26110: LD_VAR 0 2
26114: ARRAY
26115: PPUSH
26116: LD_EXP 55
26120: PUSH
26121: LD_VAR 0 2
26125: ARRAY
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PUSH
26131: LD_INT 1
26133: ARRAY
26134: PPUSH
26135: LD_EXP 55
26139: PUSH
26140: LD_VAR 0 2
26144: ARRAY
26145: PUSH
26146: LD_INT 1
26148: ARRAY
26149: PUSH
26150: LD_INT 2
26152: ARRAY
26153: PPUSH
26154: LD_EXP 55
26158: PUSH
26159: LD_VAR 0 2
26163: ARRAY
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PUSH
26169: LD_INT 3
26171: ARRAY
26172: PPUSH
26173: LD_EXP 55
26177: PUSH
26178: LD_VAR 0 2
26182: ARRAY
26183: PUSH
26184: LD_INT 1
26186: ARRAY
26187: PUSH
26188: LD_INT 4
26190: ARRAY
26191: PPUSH
26192: CALL 57716 0 5
26196: NOT
26197: IFFALSE 26247
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
26199: LD_ADDR_EXP 55
26203: PUSH
26204: LD_EXP 55
26208: PPUSH
26209: LD_VAR 0 2
26213: PPUSH
26214: LD_EXP 55
26218: PUSH
26219: LD_VAR 0 2
26223: ARRAY
26224: PPUSH
26225: LD_INT 1
26227: PPUSH
26228: LD_INT 1
26230: NEG
26231: PPUSH
26232: LD_INT 0
26234: PPUSH
26235: CALL 50383 0 4
26239: PPUSH
26240: CALL_OW 1
26244: ST_TO_ADDR
// continue ;
26245: GO 25123
// end ; end ; end ;
26247: GO 25123
26249: POP
26250: POP
// end ;
26251: LD_VAR 0 1
26255: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
26256: LD_INT 0
26258: PPUSH
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
26263: PPUSH
// if not mc_bases then
26264: LD_EXP 50
26268: NOT
26269: IFFALSE 26273
// exit ;
26271: GO 26700
// for i = 1 to mc_bases do
26273: LD_ADDR_VAR 0 2
26277: PUSH
26278: DOUBLE
26279: LD_INT 1
26281: DEC
26282: ST_TO_ADDR
26283: LD_EXP 50
26287: PUSH
26288: FOR_TO
26289: IFFALSE 26698
// begin tmp := mc_build_upgrade [ i ] ;
26291: LD_ADDR_VAR 0 4
26295: PUSH
26296: LD_EXP 82
26300: PUSH
26301: LD_VAR 0 2
26305: ARRAY
26306: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
26307: LD_ADDR_VAR 0 6
26311: PUSH
26312: LD_EXP 83
26316: PUSH
26317: LD_VAR 0 2
26321: ARRAY
26322: PPUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 30
26328: PUSH
26329: LD_INT 6
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 30
26338: PUSH
26339: LD_INT 7
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: LIST
26350: PPUSH
26351: CALL_OW 72
26355: ST_TO_ADDR
// if not tmp and not lab then
26356: LD_VAR 0 4
26360: NOT
26361: PUSH
26362: LD_VAR 0 6
26366: NOT
26367: AND
26368: IFFALSE 26372
// continue ;
26370: GO 26288
// if tmp then
26372: LD_VAR 0 4
26376: IFFALSE 26496
// for j in tmp do
26378: LD_ADDR_VAR 0 3
26382: PUSH
26383: LD_VAR 0 4
26387: PUSH
26388: FOR_IN
26389: IFFALSE 26494
// begin if UpgradeCost ( j ) then
26391: LD_VAR 0 3
26395: PPUSH
26396: CALL 57376 0 1
26400: IFFALSE 26492
// begin ComUpgrade ( j ) ;
26402: LD_VAR 0 3
26406: PPUSH
26407: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
26411: LD_ADDR_EXP 82
26415: PUSH
26416: LD_EXP 82
26420: PPUSH
26421: LD_VAR 0 2
26425: PPUSH
26426: LD_EXP 82
26430: PUSH
26431: LD_VAR 0 2
26435: ARRAY
26436: PUSH
26437: LD_VAR 0 3
26441: DIFF
26442: PPUSH
26443: CALL_OW 1
26447: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26448: LD_ADDR_EXP 57
26452: PUSH
26453: LD_EXP 57
26457: PPUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_EXP 57
26467: PUSH
26468: LD_VAR 0 2
26472: ARRAY
26473: PUSH
26474: LD_INT 1
26476: PLUS
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PPUSH
26482: LD_VAR 0 3
26486: PPUSH
26487: CALL 50965 0 3
26491: ST_TO_ADDR
// end ; end ;
26492: GO 26388
26494: POP
26495: POP
// if not lab or not mc_lab_upgrade [ i ] then
26496: LD_VAR 0 6
26500: NOT
26501: PUSH
26502: LD_EXP 84
26506: PUSH
26507: LD_VAR 0 2
26511: ARRAY
26512: NOT
26513: OR
26514: IFFALSE 26518
// continue ;
26516: GO 26288
// for j in lab do
26518: LD_ADDR_VAR 0 3
26522: PUSH
26523: LD_VAR 0 6
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26694
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
26531: LD_VAR 0 3
26535: PPUSH
26536: CALL_OW 266
26540: PUSH
26541: LD_INT 6
26543: PUSH
26544: LD_INT 7
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: IN
26551: PUSH
26552: LD_VAR 0 3
26556: PPUSH
26557: CALL_OW 461
26561: PUSH
26562: LD_INT 1
26564: NONEQUAL
26565: AND
26566: IFFALSE 26692
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
26568: LD_VAR 0 3
26572: PPUSH
26573: LD_EXP 84
26577: PUSH
26578: LD_VAR 0 2
26582: ARRAY
26583: PUSH
26584: LD_INT 1
26586: ARRAY
26587: PPUSH
26588: CALL 57581 0 2
26592: IFFALSE 26692
// begin ComCancel ( j ) ;
26594: LD_VAR 0 3
26598: PPUSH
26599: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
26603: LD_VAR 0 3
26607: PPUSH
26608: LD_EXP 84
26612: PUSH
26613: LD_VAR 0 2
26617: ARRAY
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: CALL_OW 207
// if not j in mc_construct_list [ i ] then
26627: LD_VAR 0 3
26631: PUSH
26632: LD_EXP 57
26636: PUSH
26637: LD_VAR 0 2
26641: ARRAY
26642: IN
26643: NOT
26644: IFFALSE 26690
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26646: LD_ADDR_EXP 57
26650: PUSH
26651: LD_EXP 57
26655: PPUSH
26656: LD_VAR 0 2
26660: PUSH
26661: LD_EXP 57
26665: PUSH
26666: LD_VAR 0 2
26670: ARRAY
26671: PUSH
26672: LD_INT 1
26674: PLUS
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PPUSH
26680: LD_VAR 0 3
26684: PPUSH
26685: CALL 50965 0 3
26689: ST_TO_ADDR
// break ;
26690: GO 26694
// end ; end ; end ;
26692: GO 26528
26694: POP
26695: POP
// end ;
26696: GO 26288
26698: POP
26699: POP
// end ;
26700: LD_VAR 0 1
26704: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
26705: LD_INT 0
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
// if not mc_bases then
26716: LD_EXP 50
26720: NOT
26721: IFFALSE 26725
// exit ;
26723: GO 27130
// for i = 1 to mc_bases do
26725: LD_ADDR_VAR 0 2
26729: PUSH
26730: DOUBLE
26731: LD_INT 1
26733: DEC
26734: ST_TO_ADDR
26735: LD_EXP 50
26739: PUSH
26740: FOR_TO
26741: IFFALSE 27128
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
26743: LD_EXP 58
26747: PUSH
26748: LD_VAR 0 2
26752: ARRAY
26753: NOT
26754: PUSH
26755: LD_EXP 50
26759: PUSH
26760: LD_VAR 0 2
26764: ARRAY
26765: PPUSH
26766: LD_INT 30
26768: PUSH
26769: LD_INT 3
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PPUSH
26776: CALL_OW 72
26780: NOT
26781: OR
26782: IFFALSE 26786
// continue ;
26784: GO 26740
// busy := false ;
26786: LD_ADDR_VAR 0 8
26790: PUSH
26791: LD_INT 0
26793: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26794: LD_ADDR_VAR 0 4
26798: PUSH
26799: LD_EXP 50
26803: PUSH
26804: LD_VAR 0 2
26808: ARRAY
26809: PPUSH
26810: LD_INT 30
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 72
26824: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
26825: LD_ADDR_VAR 0 6
26829: PUSH
26830: LD_EXP 58
26834: PUSH
26835: LD_VAR 0 2
26839: ARRAY
26840: PPUSH
26841: LD_INT 2
26843: PUSH
26844: LD_INT 30
26846: PUSH
26847: LD_INT 32
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 30
26856: PUSH
26857: LD_INT 33
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: LIST
26868: PPUSH
26869: CALL_OW 72
26873: ST_TO_ADDR
// if not t then
26874: LD_VAR 0 6
26878: NOT
26879: IFFALSE 26883
// continue ;
26881: GO 26740
// for j in tmp do
26883: LD_ADDR_VAR 0 3
26887: PUSH
26888: LD_VAR 0 4
26892: PUSH
26893: FOR_IN
26894: IFFALSE 26924
// if not BuildingStatus ( j ) = bs_idle then
26896: LD_VAR 0 3
26900: PPUSH
26901: CALL_OW 461
26905: PUSH
26906: LD_INT 2
26908: EQUAL
26909: NOT
26910: IFFALSE 26922
// begin busy := true ;
26912: LD_ADDR_VAR 0 8
26916: PUSH
26917: LD_INT 1
26919: ST_TO_ADDR
// break ;
26920: GO 26924
// end ;
26922: GO 26893
26924: POP
26925: POP
// if busy then
26926: LD_VAR 0 8
26930: IFFALSE 26934
// continue ;
26932: GO 26740
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
26934: LD_ADDR_VAR 0 7
26938: PUSH
26939: LD_VAR 0 6
26943: PPUSH
26944: LD_INT 35
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PPUSH
26954: CALL_OW 72
26958: ST_TO_ADDR
// if tw then
26959: LD_VAR 0 7
26963: IFFALSE 27040
// begin tw := tw [ 1 ] ;
26965: LD_ADDR_VAR 0 7
26969: PUSH
26970: LD_VAR 0 7
26974: PUSH
26975: LD_INT 1
26977: ARRAY
26978: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
26979: LD_ADDR_VAR 0 9
26983: PUSH
26984: LD_VAR 0 7
26988: PPUSH
26989: LD_EXP 75
26993: PUSH
26994: LD_VAR 0 2
26998: ARRAY
26999: PPUSH
27000: CALL 55935 0 2
27004: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
27005: LD_EXP 89
27009: PUSH
27010: LD_VAR 0 2
27014: ARRAY
27015: IFFALSE 27038
// if not weapon in mc_allowed_tower_weapons [ i ] then
27017: LD_VAR 0 9
27021: PUSH
27022: LD_EXP 89
27026: PUSH
27027: LD_VAR 0 2
27031: ARRAY
27032: IN
27033: NOT
27034: IFFALSE 27038
// continue ;
27036: GO 26740
// end else
27038: GO 27103
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
27040: LD_ADDR_VAR 0 5
27044: PUSH
27045: LD_EXP 58
27049: PUSH
27050: LD_VAR 0 2
27054: ARRAY
27055: PPUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL 86074 0 2
27065: ST_TO_ADDR
// if not tmp2 then
27066: LD_VAR 0 5
27070: NOT
27071: IFFALSE 27075
// continue ;
27073: GO 26740
// tw := tmp2 [ 1 ] ;
27075: LD_ADDR_VAR 0 7
27079: PUSH
27080: LD_VAR 0 5
27084: PUSH
27085: LD_INT 1
27087: ARRAY
27088: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
27089: LD_ADDR_VAR 0 9
27093: PUSH
27094: LD_VAR 0 5
27098: PUSH
27099: LD_INT 2
27101: ARRAY
27102: ST_TO_ADDR
// end ; if not weapon then
27103: LD_VAR 0 9
27107: NOT
27108: IFFALSE 27112
// continue ;
27110: GO 26740
// ComPlaceWeapon ( tw , weapon ) ;
27112: LD_VAR 0 7
27116: PPUSH
27117: LD_VAR 0 9
27121: PPUSH
27122: CALL_OW 148
// end ;
27126: GO 26740
27128: POP
27129: POP
// end ;
27130: LD_VAR 0 1
27134: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
27135: LD_INT 0
27137: PPUSH
27138: PPUSH
27139: PPUSH
27140: PPUSH
27141: PPUSH
27142: PPUSH
// if not mc_bases then
27143: LD_EXP 50
27147: NOT
27148: IFFALSE 27152
// exit ;
27150: GO 28164
// for i = 1 to mc_bases do
27152: LD_ADDR_VAR 0 2
27156: PUSH
27157: DOUBLE
27158: LD_INT 1
27160: DEC
27161: ST_TO_ADDR
27162: LD_EXP 50
27166: PUSH
27167: FOR_TO
27168: IFFALSE 28162
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
27170: LD_EXP 63
27174: PUSH
27175: LD_VAR 0 2
27179: ARRAY
27180: NOT
27181: PUSH
27182: LD_EXP 63
27186: PUSH
27187: LD_VAR 0 2
27191: ARRAY
27192: PUSH
27193: LD_EXP 64
27197: PUSH
27198: LD_VAR 0 2
27202: ARRAY
27203: EQUAL
27204: OR
27205: IFFALSE 27209
// continue ;
27207: GO 27167
// if mc_miners [ i ] then
27209: LD_EXP 64
27213: PUSH
27214: LD_VAR 0 2
27218: ARRAY
27219: IFFALSE 27849
// begin k := 1 ;
27221: LD_ADDR_VAR 0 4
27225: PUSH
27226: LD_INT 1
27228: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
27229: LD_ADDR_VAR 0 3
27233: PUSH
27234: DOUBLE
27235: LD_EXP 64
27239: PUSH
27240: LD_VAR 0 2
27244: ARRAY
27245: INC
27246: ST_TO_ADDR
27247: LD_INT 1
27249: PUSH
27250: FOR_DOWNTO
27251: IFFALSE 27847
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
27253: LD_EXP 64
27257: PUSH
27258: LD_VAR 0 2
27262: ARRAY
27263: PUSH
27264: LD_VAR 0 3
27268: ARRAY
27269: PPUSH
27270: CALL_OW 301
27274: PUSH
27275: LD_EXP 64
27279: PUSH
27280: LD_VAR 0 2
27284: ARRAY
27285: PUSH
27286: LD_VAR 0 3
27290: ARRAY
27291: PPUSH
27292: CALL_OW 257
27296: PUSH
27297: LD_INT 1
27299: NONEQUAL
27300: OR
27301: IFFALSE 27364
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
27303: LD_ADDR_VAR 0 5
27307: PUSH
27308: LD_EXP 64
27312: PUSH
27313: LD_VAR 0 2
27317: ARRAY
27318: PUSH
27319: LD_EXP 64
27323: PUSH
27324: LD_VAR 0 2
27328: ARRAY
27329: PUSH
27330: LD_VAR 0 3
27334: ARRAY
27335: DIFF
27336: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
27337: LD_ADDR_EXP 64
27341: PUSH
27342: LD_EXP 64
27346: PPUSH
27347: LD_VAR 0 2
27351: PPUSH
27352: LD_VAR 0 5
27356: PPUSH
27357: CALL_OW 1
27361: ST_TO_ADDR
// continue ;
27362: GO 27250
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
27364: LD_EXP 64
27368: PUSH
27369: LD_VAR 0 2
27373: ARRAY
27374: PUSH
27375: LD_VAR 0 3
27379: ARRAY
27380: PPUSH
27381: CALL 50901 0 1
27385: PUSH
27386: LD_EXP 64
27390: PUSH
27391: LD_VAR 0 2
27395: ARRAY
27396: PUSH
27397: LD_VAR 0 3
27401: ARRAY
27402: PPUSH
27403: CALL_OW 255
27407: PPUSH
27408: LD_EXP 63
27412: PUSH
27413: LD_VAR 0 2
27417: ARRAY
27418: PUSH
27419: LD_VAR 0 4
27423: ARRAY
27424: PUSH
27425: LD_INT 1
27427: ARRAY
27428: PPUSH
27429: LD_EXP 63
27433: PUSH
27434: LD_VAR 0 2
27438: ARRAY
27439: PUSH
27440: LD_VAR 0 4
27444: ARRAY
27445: PUSH
27446: LD_INT 2
27448: ARRAY
27449: PPUSH
27450: LD_INT 15
27452: PPUSH
27453: CALL 51861 0 4
27457: PUSH
27458: LD_INT 4
27460: ARRAY
27461: PUSH
27462: LD_EXP 64
27466: PUSH
27467: LD_VAR 0 2
27471: ARRAY
27472: PUSH
27473: LD_VAR 0 3
27477: ARRAY
27478: PPUSH
27479: LD_INT 10
27481: PPUSH
27482: CALL 53558 0 2
27486: PUSH
27487: LD_INT 4
27489: ARRAY
27490: OR
27491: AND
27492: IFFALSE 27515
// ComStop ( mc_miners [ i ] [ j ] ) ;
27494: LD_EXP 64
27498: PUSH
27499: LD_VAR 0 2
27503: ARRAY
27504: PUSH
27505: LD_VAR 0 3
27509: ARRAY
27510: PPUSH
27511: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
27515: LD_EXP 64
27519: PUSH
27520: LD_VAR 0 2
27524: ARRAY
27525: PUSH
27526: LD_VAR 0 3
27530: ARRAY
27531: PPUSH
27532: CALL_OW 257
27536: PUSH
27537: LD_INT 1
27539: EQUAL
27540: PUSH
27541: LD_EXP 64
27545: PUSH
27546: LD_VAR 0 2
27550: ARRAY
27551: PUSH
27552: LD_VAR 0 3
27556: ARRAY
27557: PPUSH
27558: CALL_OW 459
27562: NOT
27563: AND
27564: PUSH
27565: LD_EXP 64
27569: PUSH
27570: LD_VAR 0 2
27574: ARRAY
27575: PUSH
27576: LD_VAR 0 3
27580: ARRAY
27581: PPUSH
27582: CALL_OW 255
27586: PPUSH
27587: LD_EXP 63
27591: PUSH
27592: LD_VAR 0 2
27596: ARRAY
27597: PUSH
27598: LD_VAR 0 4
27602: ARRAY
27603: PUSH
27604: LD_INT 1
27606: ARRAY
27607: PPUSH
27608: LD_EXP 63
27612: PUSH
27613: LD_VAR 0 2
27617: ARRAY
27618: PUSH
27619: LD_VAR 0 4
27623: ARRAY
27624: PUSH
27625: LD_INT 2
27627: ARRAY
27628: PPUSH
27629: LD_INT 15
27631: PPUSH
27632: CALL 51861 0 4
27636: PUSH
27637: LD_INT 4
27639: ARRAY
27640: PUSH
27641: LD_INT 0
27643: EQUAL
27644: AND
27645: PUSH
27646: LD_EXP 64
27650: PUSH
27651: LD_VAR 0 2
27655: ARRAY
27656: PUSH
27657: LD_VAR 0 3
27661: ARRAY
27662: PPUSH
27663: CALL_OW 314
27667: NOT
27668: AND
27669: IFFALSE 27845
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
27671: LD_EXP 64
27675: PUSH
27676: LD_VAR 0 2
27680: ARRAY
27681: PUSH
27682: LD_VAR 0 3
27686: ARRAY
27687: PPUSH
27688: CALL_OW 310
27692: IFFALSE 27715
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
27694: LD_EXP 64
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: PUSH
27705: LD_VAR 0 3
27709: ARRAY
27710: PPUSH
27711: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
27715: LD_EXP 64
27719: PUSH
27720: LD_VAR 0 2
27724: ARRAY
27725: PUSH
27726: LD_VAR 0 3
27730: ARRAY
27731: PPUSH
27732: CALL_OW 314
27736: NOT
27737: IFFALSE 27805
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
27739: LD_EXP 64
27743: PUSH
27744: LD_VAR 0 2
27748: ARRAY
27749: PUSH
27750: LD_VAR 0 3
27754: ARRAY
27755: PPUSH
27756: LD_EXP 63
27760: PUSH
27761: LD_VAR 0 2
27765: ARRAY
27766: PUSH
27767: LD_VAR 0 4
27771: ARRAY
27772: PUSH
27773: LD_INT 1
27775: ARRAY
27776: PPUSH
27777: LD_EXP 63
27781: PUSH
27782: LD_VAR 0 2
27786: ARRAY
27787: PUSH
27788: LD_VAR 0 4
27792: ARRAY
27793: PUSH
27794: LD_INT 2
27796: ARRAY
27797: PPUSH
27798: LD_INT 0
27800: PPUSH
27801: CALL_OW 193
// k := k + 1 ;
27805: LD_ADDR_VAR 0 4
27809: PUSH
27810: LD_VAR 0 4
27814: PUSH
27815: LD_INT 1
27817: PLUS
27818: ST_TO_ADDR
// if k > mc_mines [ i ] then
27819: LD_VAR 0 4
27823: PUSH
27824: LD_EXP 63
27828: PUSH
27829: LD_VAR 0 2
27833: ARRAY
27834: GREATER
27835: IFFALSE 27845
// k := 1 ;
27837: LD_ADDR_VAR 0 4
27841: PUSH
27842: LD_INT 1
27844: ST_TO_ADDR
// end ; end ;
27845: GO 27250
27847: POP
27848: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
27849: LD_ADDR_VAR 0 5
27853: PUSH
27854: LD_EXP 50
27858: PUSH
27859: LD_VAR 0 2
27863: ARRAY
27864: PPUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 30
27870: PUSH
27871: LD_INT 4
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 30
27880: PUSH
27881: LD_INT 5
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: LD_INT 32
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: PPUSH
27904: CALL_OW 72
27908: ST_TO_ADDR
// if not tmp then
27909: LD_VAR 0 5
27913: NOT
27914: IFFALSE 27918
// continue ;
27916: GO 27167
// list := [ ] ;
27918: LD_ADDR_VAR 0 6
27922: PUSH
27923: EMPTY
27924: ST_TO_ADDR
// for j in tmp do
27925: LD_ADDR_VAR 0 3
27929: PUSH
27930: LD_VAR 0 5
27934: PUSH
27935: FOR_IN
27936: IFFALSE 28005
// begin for k in UnitsInside ( j ) do
27938: LD_ADDR_VAR 0 4
27942: PUSH
27943: LD_VAR 0 3
27947: PPUSH
27948: CALL_OW 313
27952: PUSH
27953: FOR_IN
27954: IFFALSE 28001
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
27956: LD_VAR 0 4
27960: PPUSH
27961: CALL_OW 257
27965: PUSH
27966: LD_INT 1
27968: EQUAL
27969: PUSH
27970: LD_VAR 0 4
27974: PPUSH
27975: CALL_OW 459
27979: NOT
27980: AND
27981: IFFALSE 27999
// list := list ^ k ;
27983: LD_ADDR_VAR 0 6
27987: PUSH
27988: LD_VAR 0 6
27992: PUSH
27993: LD_VAR 0 4
27997: ADD
27998: ST_TO_ADDR
27999: GO 27953
28001: POP
28002: POP
// end ;
28003: GO 27935
28005: POP
28006: POP
// list := list diff mc_miners [ i ] ;
28007: LD_ADDR_VAR 0 6
28011: PUSH
28012: LD_VAR 0 6
28016: PUSH
28017: LD_EXP 64
28021: PUSH
28022: LD_VAR 0 2
28026: ARRAY
28027: DIFF
28028: ST_TO_ADDR
// if not list then
28029: LD_VAR 0 6
28033: NOT
28034: IFFALSE 28038
// continue ;
28036: GO 27167
// k := mc_mines [ i ] - mc_miners [ i ] ;
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_EXP 63
28047: PUSH
28048: LD_VAR 0 2
28052: ARRAY
28053: PUSH
28054: LD_EXP 64
28058: PUSH
28059: LD_VAR 0 2
28063: ARRAY
28064: MINUS
28065: ST_TO_ADDR
// if k > list then
28066: LD_VAR 0 4
28070: PUSH
28071: LD_VAR 0 6
28075: GREATER
28076: IFFALSE 28088
// k := list ;
28078: LD_ADDR_VAR 0 4
28082: PUSH
28083: LD_VAR 0 6
28087: ST_TO_ADDR
// for j = 1 to k do
28088: LD_ADDR_VAR 0 3
28092: PUSH
28093: DOUBLE
28094: LD_INT 1
28096: DEC
28097: ST_TO_ADDR
28098: LD_VAR 0 4
28102: PUSH
28103: FOR_TO
28104: IFFALSE 28158
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
28106: LD_ADDR_EXP 64
28110: PUSH
28111: LD_EXP 64
28115: PPUSH
28116: LD_VAR 0 2
28120: PUSH
28121: LD_EXP 64
28125: PUSH
28126: LD_VAR 0 2
28130: ARRAY
28131: PUSH
28132: LD_INT 1
28134: PLUS
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PPUSH
28140: LD_VAR 0 6
28144: PUSH
28145: LD_VAR 0 3
28149: ARRAY
28150: PPUSH
28151: CALL 50965 0 3
28155: ST_TO_ADDR
28156: GO 28103
28158: POP
28159: POP
// end ;
28160: GO 27167
28162: POP
28163: POP
// end ;
28164: LD_VAR 0 1
28168: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
28169: LD_INT 0
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
// if not mc_bases then
28181: LD_EXP 50
28185: NOT
28186: IFFALSE 28190
// exit ;
28188: GO 29921
// for i = 1 to mc_bases do
28190: LD_ADDR_VAR 0 2
28194: PUSH
28195: DOUBLE
28196: LD_INT 1
28198: DEC
28199: ST_TO_ADDR
28200: LD_EXP 50
28204: PUSH
28205: FOR_TO
28206: IFFALSE 29919
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
28208: LD_EXP 50
28212: PUSH
28213: LD_VAR 0 2
28217: ARRAY
28218: NOT
28219: PUSH
28220: LD_EXP 57
28224: PUSH
28225: LD_VAR 0 2
28229: ARRAY
28230: OR
28231: IFFALSE 28235
// continue ;
28233: GO 28205
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
28235: LD_EXP 66
28239: PUSH
28240: LD_VAR 0 2
28244: ARRAY
28245: NOT
28246: PUSH
28247: LD_EXP 67
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: AND
28258: IFFALSE 28296
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
28260: LD_ADDR_EXP 67
28264: PUSH
28265: LD_EXP 67
28269: PPUSH
28270: LD_VAR 0 2
28274: PPUSH
28275: EMPTY
28276: PPUSH
28277: CALL_OW 1
28281: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
28282: LD_VAR 0 2
28286: PPUSH
28287: LD_INT 107
28289: PPUSH
28290: CALL 19708 0 2
// continue ;
28294: GO 28205
// end ; target := [ ] ;
28296: LD_ADDR_VAR 0 6
28300: PUSH
28301: EMPTY
28302: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
28303: LD_ADDR_VAR 0 3
28307: PUSH
28308: DOUBLE
28309: LD_EXP 66
28313: PUSH
28314: LD_VAR 0 2
28318: ARRAY
28319: INC
28320: ST_TO_ADDR
28321: LD_INT 1
28323: PUSH
28324: FOR_DOWNTO
28325: IFFALSE 28585
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
28327: LD_EXP 66
28331: PUSH
28332: LD_VAR 0 2
28336: ARRAY
28337: PUSH
28338: LD_VAR 0 3
28342: ARRAY
28343: PUSH
28344: LD_INT 2
28346: ARRAY
28347: PPUSH
28348: LD_EXP 66
28352: PUSH
28353: LD_VAR 0 2
28357: ARRAY
28358: PUSH
28359: LD_VAR 0 3
28363: ARRAY
28364: PUSH
28365: LD_INT 3
28367: ARRAY
28368: PPUSH
28369: CALL_OW 488
28373: PUSH
28374: LD_EXP 66
28378: PUSH
28379: LD_VAR 0 2
28383: ARRAY
28384: PUSH
28385: LD_VAR 0 3
28389: ARRAY
28390: PUSH
28391: LD_INT 2
28393: ARRAY
28394: PPUSH
28395: LD_EXP 66
28399: PUSH
28400: LD_VAR 0 2
28404: ARRAY
28405: PUSH
28406: LD_VAR 0 3
28410: ARRAY
28411: PUSH
28412: LD_INT 3
28414: ARRAY
28415: PPUSH
28416: CALL_OW 284
28420: PUSH
28421: LD_INT 0
28423: EQUAL
28424: AND
28425: IFFALSE 28480
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
28427: LD_ADDR_VAR 0 5
28431: PUSH
28432: LD_EXP 66
28436: PUSH
28437: LD_VAR 0 2
28441: ARRAY
28442: PPUSH
28443: LD_VAR 0 3
28447: PPUSH
28448: CALL_OW 3
28452: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
28453: LD_ADDR_EXP 66
28457: PUSH
28458: LD_EXP 66
28462: PPUSH
28463: LD_VAR 0 2
28467: PPUSH
28468: LD_VAR 0 5
28472: PPUSH
28473: CALL_OW 1
28477: ST_TO_ADDR
// continue ;
28478: GO 28324
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
28480: LD_EXP 50
28484: PUSH
28485: LD_VAR 0 2
28489: ARRAY
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: PPUSH
28495: CALL_OW 255
28499: PPUSH
28500: LD_EXP 66
28504: PUSH
28505: LD_VAR 0 2
28509: ARRAY
28510: PUSH
28511: LD_VAR 0 3
28515: ARRAY
28516: PUSH
28517: LD_INT 2
28519: ARRAY
28520: PPUSH
28521: LD_EXP 66
28525: PUSH
28526: LD_VAR 0 2
28530: ARRAY
28531: PUSH
28532: LD_VAR 0 3
28536: ARRAY
28537: PUSH
28538: LD_INT 3
28540: ARRAY
28541: PPUSH
28542: LD_INT 30
28544: PPUSH
28545: CALL 51861 0 4
28549: PUSH
28550: LD_INT 4
28552: ARRAY
28553: PUSH
28554: LD_INT 0
28556: EQUAL
28557: IFFALSE 28583
// begin target := mc_crates [ i ] [ j ] ;
28559: LD_ADDR_VAR 0 6
28563: PUSH
28564: LD_EXP 66
28568: PUSH
28569: LD_VAR 0 2
28573: ARRAY
28574: PUSH
28575: LD_VAR 0 3
28579: ARRAY
28580: ST_TO_ADDR
// break ;
28581: GO 28585
// end ; end ;
28583: GO 28324
28585: POP
28586: POP
// if not target then
28587: LD_VAR 0 6
28591: NOT
28592: IFFALSE 28596
// continue ;
28594: GO 28205
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
28596: LD_ADDR_VAR 0 7
28600: PUSH
28601: LD_EXP 69
28605: PUSH
28606: LD_VAR 0 2
28610: ARRAY
28611: PPUSH
28612: LD_INT 2
28614: PUSH
28615: LD_INT 3
28617: PUSH
28618: LD_INT 58
28620: PUSH
28621: EMPTY
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 61
28630: PUSH
28631: EMPTY
28632: LIST
28633: PUSH
28634: LD_INT 33
28636: PUSH
28637: LD_INT 5
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 33
28646: PUSH
28647: LD_INT 3
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 34
28666: PUSH
28667: LD_INT 32
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 34
28676: PUSH
28677: LD_INT 51
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 34
28686: PUSH
28687: LD_INT 12
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PPUSH
28704: CALL_OW 72
28708: ST_TO_ADDR
// if not cargo then
28709: LD_VAR 0 7
28713: NOT
28714: IFFALSE 29357
// begin if mc_crates_collector [ i ] < 5 then
28716: LD_EXP 67
28720: PUSH
28721: LD_VAR 0 2
28725: ARRAY
28726: PUSH
28727: LD_INT 5
28729: LESS
28730: IFFALSE 29096
// begin if mc_ape [ i ] then
28732: LD_EXP 79
28736: PUSH
28737: LD_VAR 0 2
28741: ARRAY
28742: IFFALSE 28789
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
28744: LD_ADDR_VAR 0 5
28748: PUSH
28749: LD_EXP 79
28753: PUSH
28754: LD_VAR 0 2
28758: ARRAY
28759: PPUSH
28760: LD_INT 25
28762: PUSH
28763: LD_INT 16
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 24
28772: PUSH
28773: LD_INT 750
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PPUSH
28784: CALL_OW 72
28788: ST_TO_ADDR
// if not tmp then
28789: LD_VAR 0 5
28793: NOT
28794: IFFALSE 28841
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
28796: LD_ADDR_VAR 0 5
28800: PUSH
28801: LD_EXP 50
28805: PUSH
28806: LD_VAR 0 2
28810: ARRAY
28811: PPUSH
28812: LD_INT 25
28814: PUSH
28815: LD_INT 2
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 24
28824: PUSH
28825: LD_INT 750
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PPUSH
28836: CALL_OW 72
28840: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
28841: LD_EXP 79
28845: PUSH
28846: LD_VAR 0 2
28850: ARRAY
28851: PUSH
28852: LD_EXP 50
28856: PUSH
28857: LD_VAR 0 2
28861: ARRAY
28862: PPUSH
28863: LD_INT 25
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 24
28875: PUSH
28876: LD_INT 750
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PPUSH
28887: CALL_OW 72
28891: AND
28892: PUSH
28893: LD_VAR 0 5
28897: PUSH
28898: LD_INT 5
28900: LESS
28901: AND
28902: IFFALSE 28984
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
28904: LD_ADDR_VAR 0 3
28908: PUSH
28909: LD_EXP 50
28913: PUSH
28914: LD_VAR 0 2
28918: ARRAY
28919: PPUSH
28920: LD_INT 25
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 24
28932: PUSH
28933: LD_INT 750
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PPUSH
28944: CALL_OW 72
28948: PUSH
28949: FOR_IN
28950: IFFALSE 28982
// begin tmp := tmp union j ;
28952: LD_ADDR_VAR 0 5
28956: PUSH
28957: LD_VAR 0 5
28961: PUSH
28962: LD_VAR 0 3
28966: UNION
28967: ST_TO_ADDR
// if tmp >= 5 then
28968: LD_VAR 0 5
28972: PUSH
28973: LD_INT 5
28975: GREATEREQUAL
28976: IFFALSE 28980
// break ;
28978: GO 28982
// end ;
28980: GO 28949
28982: POP
28983: POP
// end ; if not tmp then
28984: LD_VAR 0 5
28988: NOT
28989: IFFALSE 28993
// continue ;
28991: GO 28205
// for j in tmp do
28993: LD_ADDR_VAR 0 3
28997: PUSH
28998: LD_VAR 0 5
29002: PUSH
29003: FOR_IN
29004: IFFALSE 29094
// if not GetTag ( j ) then
29006: LD_VAR 0 3
29010: PPUSH
29011: CALL_OW 110
29015: NOT
29016: IFFALSE 29092
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
29018: LD_ADDR_EXP 67
29022: PUSH
29023: LD_EXP 67
29027: PPUSH
29028: LD_VAR 0 2
29032: PUSH
29033: LD_EXP 67
29037: PUSH
29038: LD_VAR 0 2
29042: ARRAY
29043: PUSH
29044: LD_INT 1
29046: PLUS
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PPUSH
29052: LD_VAR 0 3
29056: PPUSH
29057: CALL 50965 0 3
29061: ST_TO_ADDR
// SetTag ( j , 107 ) ;
29062: LD_VAR 0 3
29066: PPUSH
29067: LD_INT 107
29069: PPUSH
29070: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
29074: LD_EXP 67
29078: PUSH
29079: LD_VAR 0 2
29083: ARRAY
29084: PUSH
29085: LD_INT 5
29087: GREATEREQUAL
29088: IFFALSE 29092
// break ;
29090: GO 29094
// end ;
29092: GO 29003
29094: POP
29095: POP
// end ; if mc_crates_collector [ i ] and target then
29096: LD_EXP 67
29100: PUSH
29101: LD_VAR 0 2
29105: ARRAY
29106: PUSH
29107: LD_VAR 0 6
29111: AND
29112: IFFALSE 29355
// begin if mc_crates_collector [ i ] < target [ 1 ] then
29114: LD_EXP 67
29118: PUSH
29119: LD_VAR 0 2
29123: ARRAY
29124: PUSH
29125: LD_VAR 0 6
29129: PUSH
29130: LD_INT 1
29132: ARRAY
29133: LESS
29134: IFFALSE 29154
// tmp := mc_crates_collector [ i ] else
29136: LD_ADDR_VAR 0 5
29140: PUSH
29141: LD_EXP 67
29145: PUSH
29146: LD_VAR 0 2
29150: ARRAY
29151: ST_TO_ADDR
29152: GO 29168
// tmp := target [ 1 ] ;
29154: LD_ADDR_VAR 0 5
29158: PUSH
29159: LD_VAR 0 6
29163: PUSH
29164: LD_INT 1
29166: ARRAY
29167: ST_TO_ADDR
// k := 0 ;
29168: LD_ADDR_VAR 0 4
29172: PUSH
29173: LD_INT 0
29175: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
29176: LD_ADDR_VAR 0 3
29180: PUSH
29181: LD_EXP 67
29185: PUSH
29186: LD_VAR 0 2
29190: ARRAY
29191: PUSH
29192: FOR_IN
29193: IFFALSE 29353
// begin k := k + 1 ;
29195: LD_ADDR_VAR 0 4
29199: PUSH
29200: LD_VAR 0 4
29204: PUSH
29205: LD_INT 1
29207: PLUS
29208: ST_TO_ADDR
// if k > tmp then
29209: LD_VAR 0 4
29213: PUSH
29214: LD_VAR 0 5
29218: GREATER
29219: IFFALSE 29223
// break ;
29221: GO 29353
// if not GetClass ( j ) in [ 2 , 16 ] then
29223: LD_VAR 0 3
29227: PPUSH
29228: CALL_OW 257
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: LD_INT 16
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: IN
29243: NOT
29244: IFFALSE 29297
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
29246: LD_ADDR_EXP 67
29250: PUSH
29251: LD_EXP 67
29255: PPUSH
29256: LD_VAR 0 2
29260: PPUSH
29261: LD_EXP 67
29265: PUSH
29266: LD_VAR 0 2
29270: ARRAY
29271: PUSH
29272: LD_VAR 0 3
29276: DIFF
29277: PPUSH
29278: CALL_OW 1
29282: ST_TO_ADDR
// SetTag ( j , 0 ) ;
29283: LD_VAR 0 3
29287: PPUSH
29288: LD_INT 0
29290: PPUSH
29291: CALL_OW 109
// continue ;
29295: GO 29192
// end ; if IsInUnit ( j ) then
29297: LD_VAR 0 3
29301: PPUSH
29302: CALL_OW 310
29306: IFFALSE 29317
// ComExitBuilding ( j ) ;
29308: LD_VAR 0 3
29312: PPUSH
29313: CALL_OW 122
// wait ( 3 ) ;
29317: LD_INT 3
29319: PPUSH
29320: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29324: LD_VAR 0 3
29328: PPUSH
29329: LD_VAR 0 6
29333: PUSH
29334: LD_INT 2
29336: ARRAY
29337: PPUSH
29338: LD_VAR 0 6
29342: PUSH
29343: LD_INT 3
29345: ARRAY
29346: PPUSH
29347: CALL_OW 117
// end ;
29351: GO 29192
29353: POP
29354: POP
// end ; end else
29355: GO 29917
// begin for j in cargo do
29357: LD_ADDR_VAR 0 3
29361: PUSH
29362: LD_VAR 0 7
29366: PUSH
29367: FOR_IN
29368: IFFALSE 29915
// begin if GetTag ( j ) <> 0 then
29370: LD_VAR 0 3
29374: PPUSH
29375: CALL_OW 110
29379: PUSH
29380: LD_INT 0
29382: NONEQUAL
29383: IFFALSE 29387
// continue ;
29385: GO 29367
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
29387: LD_VAR 0 3
29391: PPUSH
29392: CALL_OW 256
29396: PUSH
29397: LD_INT 1000
29399: LESS
29400: PUSH
29401: LD_VAR 0 3
29405: PPUSH
29406: LD_EXP 74
29410: PUSH
29411: LD_VAR 0 2
29415: ARRAY
29416: PPUSH
29417: CALL_OW 308
29421: NOT
29422: AND
29423: IFFALSE 29445
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29425: LD_VAR 0 3
29429: PPUSH
29430: LD_EXP 74
29434: PUSH
29435: LD_VAR 0 2
29439: ARRAY
29440: PPUSH
29441: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
29445: LD_VAR 0 3
29449: PPUSH
29450: CALL_OW 256
29454: PUSH
29455: LD_INT 1000
29457: LESS
29458: PUSH
29459: LD_VAR 0 3
29463: PPUSH
29464: LD_EXP 74
29468: PUSH
29469: LD_VAR 0 2
29473: ARRAY
29474: PPUSH
29475: CALL_OW 308
29479: AND
29480: IFFALSE 29484
// continue ;
29482: GO 29367
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
29484: LD_VAR 0 3
29488: PPUSH
29489: CALL_OW 262
29493: PUSH
29494: LD_INT 2
29496: EQUAL
29497: PUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 261
29507: PUSH
29508: LD_INT 15
29510: LESS
29511: AND
29512: IFFALSE 29516
// continue ;
29514: GO 29367
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
29516: LD_VAR 0 3
29520: PPUSH
29521: CALL_OW 262
29525: PUSH
29526: LD_INT 1
29528: EQUAL
29529: PUSH
29530: LD_VAR 0 3
29534: PPUSH
29535: CALL_OW 261
29539: PUSH
29540: LD_INT 10
29542: LESS
29543: AND
29544: IFFALSE 29854
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29546: LD_ADDR_VAR 0 8
29550: PUSH
29551: LD_EXP 50
29555: PUSH
29556: LD_VAR 0 2
29560: ARRAY
29561: PPUSH
29562: LD_INT 2
29564: PUSH
29565: LD_INT 30
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 30
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: LIST
29589: PPUSH
29590: CALL_OW 72
29594: ST_TO_ADDR
// if not depot then
29595: LD_VAR 0 8
29599: NOT
29600: IFFALSE 29604
// continue ;
29602: GO 29367
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
29604: LD_VAR 0 3
29608: PPUSH
29609: LD_VAR 0 8
29613: PPUSH
29614: LD_VAR 0 3
29618: PPUSH
29619: CALL_OW 74
29623: PPUSH
29624: CALL_OW 296
29628: PUSH
29629: LD_INT 6
29631: LESS
29632: IFFALSE 29648
// SetFuel ( j , 100 ) else
29634: LD_VAR 0 3
29638: PPUSH
29639: LD_INT 100
29641: PPUSH
29642: CALL_OW 240
29646: GO 29854
// if GetFuel ( j ) = 0 then
29648: LD_VAR 0 3
29652: PPUSH
29653: CALL_OW 261
29657: PUSH
29658: LD_INT 0
29660: EQUAL
29661: IFFALSE 29854
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
29663: LD_ADDR_EXP 69
29667: PUSH
29668: LD_EXP 69
29672: PPUSH
29673: LD_VAR 0 2
29677: PPUSH
29678: LD_EXP 69
29682: PUSH
29683: LD_VAR 0 2
29687: ARRAY
29688: PUSH
29689: LD_VAR 0 3
29693: DIFF
29694: PPUSH
29695: CALL_OW 1
29699: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
29700: LD_VAR 0 3
29704: PPUSH
29705: CALL_OW 263
29709: PUSH
29710: LD_INT 1
29712: EQUAL
29713: IFFALSE 29729
// ComExitVehicle ( IsInUnit ( j ) ) ;
29715: LD_VAR 0 3
29719: PPUSH
29720: CALL_OW 310
29724: PPUSH
29725: CALL_OW 121
// if GetControl ( j ) = control_remote then
29729: LD_VAR 0 3
29733: PPUSH
29734: CALL_OW 263
29738: PUSH
29739: LD_INT 2
29741: EQUAL
29742: IFFALSE 29753
// ComUnlink ( j ) ;
29744: LD_VAR 0 3
29748: PPUSH
29749: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
29753: LD_ADDR_VAR 0 9
29757: PUSH
29758: LD_VAR 0 2
29762: PPUSH
29763: LD_INT 3
29765: PPUSH
29766: CALL 39016 0 2
29770: ST_TO_ADDR
// if fac then
29771: LD_VAR 0 9
29775: IFFALSE 29852
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
29777: LD_ADDR_VAR 0 10
29781: PUSH
29782: LD_VAR 0 9
29786: PPUSH
29787: LD_VAR 0 3
29791: PPUSH
29792: CALL_OW 265
29796: PPUSH
29797: LD_VAR 0 3
29801: PPUSH
29802: CALL_OW 262
29806: PPUSH
29807: LD_VAR 0 3
29811: PPUSH
29812: CALL_OW 263
29816: PPUSH
29817: LD_VAR 0 3
29821: PPUSH
29822: CALL_OW 264
29826: PPUSH
29827: CALL 48565 0 5
29831: ST_TO_ADDR
// if components then
29832: LD_VAR 0 10
29836: IFFALSE 29852
// MC_InsertProduceList ( i , components ) ;
29838: LD_VAR 0 2
29842: PPUSH
29843: LD_VAR 0 10
29847: PPUSH
29848: CALL 38586 0 2
// end ; continue ;
29852: GO 29367
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
29854: LD_VAR 0 3
29858: PPUSH
29859: LD_INT 1
29861: PPUSH
29862: CALL_OW 289
29866: PUSH
29867: LD_INT 100
29869: LESS
29870: PUSH
29871: LD_VAR 0 3
29875: PPUSH
29876: CALL_OW 314
29880: NOT
29881: AND
29882: IFFALSE 29911
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29884: LD_VAR 0 3
29888: PPUSH
29889: LD_VAR 0 6
29893: PUSH
29894: LD_INT 2
29896: ARRAY
29897: PPUSH
29898: LD_VAR 0 6
29902: PUSH
29903: LD_INT 3
29905: ARRAY
29906: PPUSH
29907: CALL_OW 117
// break ;
29911: GO 29915
// end ;
29913: GO 29367
29915: POP
29916: POP
// end ; end ;
29917: GO 28205
29919: POP
29920: POP
// end ;
29921: LD_VAR 0 1
29925: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
29926: LD_INT 0
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
// if not mc_bases then
29932: LD_EXP 50
29936: NOT
29937: IFFALSE 29941
// exit ;
29939: GO 30102
// for i = 1 to mc_bases do
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: DOUBLE
29947: LD_INT 1
29949: DEC
29950: ST_TO_ADDR
29951: LD_EXP 50
29955: PUSH
29956: FOR_TO
29957: IFFALSE 30100
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
29959: LD_ADDR_VAR 0 4
29963: PUSH
29964: LD_EXP 69
29968: PUSH
29969: LD_VAR 0 2
29973: ARRAY
29974: PUSH
29975: LD_EXP 72
29979: PUSH
29980: LD_VAR 0 2
29984: ARRAY
29985: UNION
29986: PPUSH
29987: LD_INT 33
29989: PUSH
29990: LD_INT 2
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PPUSH
29997: CALL_OW 72
30001: ST_TO_ADDR
// if tmp then
30002: LD_VAR 0 4
30006: IFFALSE 30098
// for j in tmp do
30008: LD_ADDR_VAR 0 3
30012: PUSH
30013: LD_VAR 0 4
30017: PUSH
30018: FOR_IN
30019: IFFALSE 30096
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
30021: LD_VAR 0 3
30025: PPUSH
30026: CALL_OW 312
30030: NOT
30031: PUSH
30032: LD_VAR 0 3
30036: PPUSH
30037: CALL_OW 256
30041: PUSH
30042: LD_INT 250
30044: GREATEREQUAL
30045: AND
30046: IFFALSE 30059
// Connect ( j ) else
30048: LD_VAR 0 3
30052: PPUSH
30053: CALL 53898 0 1
30057: GO 30094
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
30059: LD_VAR 0 3
30063: PPUSH
30064: CALL_OW 256
30068: PUSH
30069: LD_INT 250
30071: LESS
30072: PUSH
30073: LD_VAR 0 3
30077: PPUSH
30078: CALL_OW 312
30082: AND
30083: IFFALSE 30094
// ComUnlink ( j ) ;
30085: LD_VAR 0 3
30089: PPUSH
30090: CALL_OW 136
30094: GO 30018
30096: POP
30097: POP
// end ;
30098: GO 29956
30100: POP
30101: POP
// end ;
30102: LD_VAR 0 1
30106: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
30107: LD_INT 0
30109: PPUSH
30110: PPUSH
30111: PPUSH
30112: PPUSH
30113: PPUSH
// if not mc_bases then
30114: LD_EXP 50
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30583
// for i = 1 to mc_bases do
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_EXP 50
30137: PUSH
30138: FOR_TO
30139: IFFALSE 30581
// begin if not mc_produce [ i ] then
30141: LD_EXP 71
30145: PUSH
30146: LD_VAR 0 2
30150: ARRAY
30151: NOT
30152: IFFALSE 30156
// continue ;
30154: GO 30138
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30156: LD_ADDR_VAR 0 5
30160: PUSH
30161: LD_EXP 50
30165: PUSH
30166: LD_VAR 0 2
30170: ARRAY
30171: PPUSH
30172: LD_INT 30
30174: PUSH
30175: LD_INT 3
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL_OW 72
30186: ST_TO_ADDR
// if not fac then
30187: LD_VAR 0 5
30191: NOT
30192: IFFALSE 30196
// continue ;
30194: GO 30138
// for j in fac do
30196: LD_ADDR_VAR 0 3
30200: PUSH
30201: LD_VAR 0 5
30205: PUSH
30206: FOR_IN
30207: IFFALSE 30577
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
30209: LD_VAR 0 3
30213: PPUSH
30214: CALL_OW 461
30218: PUSH
30219: LD_INT 2
30221: NONEQUAL
30222: PUSH
30223: LD_VAR 0 3
30227: PPUSH
30228: LD_INT 15
30230: PPUSH
30231: CALL 53558 0 2
30235: PUSH
30236: LD_INT 4
30238: ARRAY
30239: OR
30240: PUSH
30241: LD_VAR 0 3
30245: PPUSH
30246: CALL_OW 313
30250: PUSH
30251: LD_INT 0
30253: EQUAL
30254: OR
30255: IFFALSE 30259
// continue ;
30257: GO 30206
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
30259: LD_VAR 0 3
30263: PPUSH
30264: LD_EXP 71
30268: PUSH
30269: LD_VAR 0 2
30273: ARRAY
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PUSH
30279: LD_INT 1
30281: ARRAY
30282: PPUSH
30283: LD_EXP 71
30287: PUSH
30288: LD_VAR 0 2
30292: ARRAY
30293: PUSH
30294: LD_INT 1
30296: ARRAY
30297: PUSH
30298: LD_INT 2
30300: ARRAY
30301: PPUSH
30302: LD_EXP 71
30306: PUSH
30307: LD_VAR 0 2
30311: ARRAY
30312: PUSH
30313: LD_INT 1
30315: ARRAY
30316: PUSH
30317: LD_INT 3
30319: ARRAY
30320: PPUSH
30321: LD_EXP 71
30325: PUSH
30326: LD_VAR 0 2
30330: ARRAY
30331: PUSH
30332: LD_INT 1
30334: ARRAY
30335: PUSH
30336: LD_INT 4
30338: ARRAY
30339: PPUSH
30340: CALL_OW 448
30344: PUSH
30345: LD_VAR 0 3
30349: PPUSH
30350: LD_EXP 71
30354: PUSH
30355: LD_VAR 0 2
30359: ARRAY
30360: PUSH
30361: LD_INT 1
30363: ARRAY
30364: PUSH
30365: LD_INT 1
30367: ARRAY
30368: PUSH
30369: LD_EXP 71
30373: PUSH
30374: LD_VAR 0 2
30378: ARRAY
30379: PUSH
30380: LD_INT 1
30382: ARRAY
30383: PUSH
30384: LD_INT 2
30386: ARRAY
30387: PUSH
30388: LD_EXP 71
30392: PUSH
30393: LD_VAR 0 2
30397: ARRAY
30398: PUSH
30399: LD_INT 1
30401: ARRAY
30402: PUSH
30403: LD_INT 3
30405: ARRAY
30406: PUSH
30407: LD_EXP 71
30411: PUSH
30412: LD_VAR 0 2
30416: ARRAY
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PUSH
30422: LD_INT 4
30424: ARRAY
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: PPUSH
30432: CALL 57229 0 2
30436: AND
30437: IFFALSE 30575
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
30439: LD_VAR 0 3
30443: PPUSH
30444: LD_EXP 71
30448: PUSH
30449: LD_VAR 0 2
30453: ARRAY
30454: PUSH
30455: LD_INT 1
30457: ARRAY
30458: PUSH
30459: LD_INT 1
30461: ARRAY
30462: PPUSH
30463: LD_EXP 71
30467: PUSH
30468: LD_VAR 0 2
30472: ARRAY
30473: PUSH
30474: LD_INT 1
30476: ARRAY
30477: PUSH
30478: LD_INT 2
30480: ARRAY
30481: PPUSH
30482: LD_EXP 71
30486: PUSH
30487: LD_VAR 0 2
30491: ARRAY
30492: PUSH
30493: LD_INT 1
30495: ARRAY
30496: PUSH
30497: LD_INT 3
30499: ARRAY
30500: PPUSH
30501: LD_EXP 71
30505: PUSH
30506: LD_VAR 0 2
30510: ARRAY
30511: PUSH
30512: LD_INT 1
30514: ARRAY
30515: PUSH
30516: LD_INT 4
30518: ARRAY
30519: PPUSH
30520: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
30524: LD_ADDR_VAR 0 4
30528: PUSH
30529: LD_EXP 71
30533: PUSH
30534: LD_VAR 0 2
30538: ARRAY
30539: PPUSH
30540: LD_INT 1
30542: PPUSH
30543: CALL_OW 3
30547: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
30548: LD_ADDR_EXP 71
30552: PUSH
30553: LD_EXP 71
30557: PPUSH
30558: LD_VAR 0 2
30562: PPUSH
30563: LD_VAR 0 4
30567: PPUSH
30568: CALL_OW 1
30572: ST_TO_ADDR
// break ;
30573: GO 30577
// end ; end ;
30575: GO 30206
30577: POP
30578: POP
// end ;
30579: GO 30138
30581: POP
30582: POP
// end ;
30583: LD_VAR 0 1
30587: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
30588: LD_INT 0
30590: PPUSH
30591: PPUSH
30592: PPUSH
// if not mc_bases then
30593: LD_EXP 50
30597: NOT
30598: IFFALSE 30602
// exit ;
30600: GO 30691
// for i = 1 to mc_bases do
30602: LD_ADDR_VAR 0 2
30606: PUSH
30607: DOUBLE
30608: LD_INT 1
30610: DEC
30611: ST_TO_ADDR
30612: LD_EXP 50
30616: PUSH
30617: FOR_TO
30618: IFFALSE 30689
// begin if mc_attack [ i ] then
30620: LD_EXP 70
30624: PUSH
30625: LD_VAR 0 2
30629: ARRAY
30630: IFFALSE 30687
// begin tmp := mc_attack [ i ] [ 1 ] ;
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_EXP 70
30641: PUSH
30642: LD_VAR 0 2
30646: ARRAY
30647: PUSH
30648: LD_INT 1
30650: ARRAY
30651: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
30652: LD_ADDR_EXP 70
30656: PUSH
30657: LD_EXP 70
30661: PPUSH
30662: LD_VAR 0 2
30666: PPUSH
30667: EMPTY
30668: PPUSH
30669: CALL_OW 1
30673: ST_TO_ADDR
// Attack ( tmp ) ;
30674: LD_VAR 0 3
30678: PPUSH
30679: CALL 79418 0 1
// exit ;
30683: POP
30684: POP
30685: GO 30691
// end ; end ;
30687: GO 30617
30689: POP
30690: POP
// end ;
30691: LD_VAR 0 1
30695: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
30696: LD_INT 0
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
// if not mc_bases then
30705: LD_EXP 50
30709: NOT
30710: IFFALSE 30714
// exit ;
30712: GO 31318
// for i = 1 to mc_bases do
30714: LD_ADDR_VAR 0 2
30718: PUSH
30719: DOUBLE
30720: LD_INT 1
30722: DEC
30723: ST_TO_ADDR
30724: LD_EXP 50
30728: PUSH
30729: FOR_TO
30730: IFFALSE 31316
// begin if not mc_bases [ i ] then
30732: LD_EXP 50
30736: PUSH
30737: LD_VAR 0 2
30741: ARRAY
30742: NOT
30743: IFFALSE 30747
// continue ;
30745: GO 30729
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
30747: LD_ADDR_VAR 0 7
30751: PUSH
30752: LD_EXP 50
30756: PUSH
30757: LD_VAR 0 2
30761: ARRAY
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: PPUSH
30767: CALL 47869 0 1
30771: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
30772: LD_ADDR_EXP 73
30776: PUSH
30777: LD_EXP 73
30781: PPUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_EXP 50
30791: PUSH
30792: LD_VAR 0 2
30796: ARRAY
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: PPUSH
30802: CALL_OW 255
30806: PPUSH
30807: LD_EXP 75
30811: PUSH
30812: LD_VAR 0 2
30816: ARRAY
30817: PPUSH
30818: CALL 45829 0 2
30822: PPUSH
30823: CALL_OW 1
30827: ST_TO_ADDR
// if not mc_scan [ i ] then
30828: LD_EXP 73
30832: PUSH
30833: LD_VAR 0 2
30837: ARRAY
30838: NOT
30839: IFFALSE 30994
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
30841: LD_ADDR_VAR 0 4
30845: PUSH
30846: LD_EXP 50
30850: PUSH
30851: LD_VAR 0 2
30855: ARRAY
30856: PPUSH
30857: LD_INT 2
30859: PUSH
30860: LD_INT 25
30862: PUSH
30863: LD_INT 5
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 25
30872: PUSH
30873: LD_INT 8
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 25
30882: PUSH
30883: LD_INT 9
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: PPUSH
30896: CALL_OW 72
30900: ST_TO_ADDR
// if not tmp then
30901: LD_VAR 0 4
30905: NOT
30906: IFFALSE 30910
// continue ;
30908: GO 30729
// for j in tmp do
30910: LD_ADDR_VAR 0 3
30914: PUSH
30915: LD_VAR 0 4
30919: PUSH
30920: FOR_IN
30921: IFFALSE 30992
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
30923: LD_VAR 0 3
30927: PPUSH
30928: CALL_OW 310
30932: PPUSH
30933: CALL_OW 266
30937: PUSH
30938: LD_INT 5
30940: EQUAL
30941: PUSH
30942: LD_VAR 0 3
30946: PPUSH
30947: CALL_OW 257
30951: PUSH
30952: LD_INT 1
30954: EQUAL
30955: AND
30956: PUSH
30957: LD_VAR 0 3
30961: PPUSH
30962: CALL_OW 459
30966: NOT
30967: AND
30968: PUSH
30969: LD_VAR 0 7
30973: AND
30974: IFFALSE 30990
// ComChangeProfession ( j , class ) ;
30976: LD_VAR 0 3
30980: PPUSH
30981: LD_VAR 0 7
30985: PPUSH
30986: CALL_OW 123
30990: GO 30920
30992: POP
30993: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
30994: LD_EXP 73
30998: PUSH
30999: LD_VAR 0 2
31003: ARRAY
31004: PUSH
31005: LD_EXP 72
31009: PUSH
31010: LD_VAR 0 2
31014: ARRAY
31015: NOT
31016: AND
31017: PUSH
31018: LD_EXP 50
31022: PUSH
31023: LD_VAR 0 2
31027: ARRAY
31028: PPUSH
31029: LD_INT 30
31031: PUSH
31032: LD_INT 32
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PPUSH
31039: CALL_OW 72
31043: NOT
31044: AND
31045: PUSH
31046: LD_EXP 50
31050: PUSH
31051: LD_VAR 0 2
31055: ARRAY
31056: PPUSH
31057: LD_INT 2
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 4
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 30
31072: PUSH
31073: LD_INT 5
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: LIST
31084: PPUSH
31085: CALL_OW 72
31089: NOT
31090: AND
31091: IFFALSE 31223
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31093: LD_ADDR_VAR 0 4
31097: PUSH
31098: LD_EXP 50
31102: PUSH
31103: LD_VAR 0 2
31107: ARRAY
31108: PPUSH
31109: LD_INT 2
31111: PUSH
31112: LD_INT 25
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 25
31124: PUSH
31125: LD_INT 5
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 25
31134: PUSH
31135: LD_INT 8
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 25
31144: PUSH
31145: LD_INT 9
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: PPUSH
31159: CALL_OW 72
31163: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
31164: LD_ADDR_VAR 0 4
31168: PUSH
31169: LD_VAR 0 4
31173: PUSH
31174: LD_VAR 0 4
31178: PPUSH
31179: LD_INT 18
31181: PPUSH
31182: CALL 84162 0 2
31186: DIFF
31187: ST_TO_ADDR
// if tmp then
31188: LD_VAR 0 4
31192: IFFALSE 31223
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
31194: LD_VAR 0 2
31198: PPUSH
31199: LD_VAR 0 4
31203: PPUSH
31204: LD_EXP 75
31208: PUSH
31209: LD_VAR 0 2
31213: ARRAY
31214: PPUSH
31215: CALL 45864 0 3
// exit ;
31219: POP
31220: POP
31221: GO 31318
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
31223: LD_EXP 73
31227: PUSH
31228: LD_VAR 0 2
31232: ARRAY
31233: PUSH
31234: LD_EXP 72
31238: PUSH
31239: LD_VAR 0 2
31243: ARRAY
31244: AND
31245: IFFALSE 31314
// begin tmp := mc_defender [ i ] ;
31247: LD_ADDR_VAR 0 4
31251: PUSH
31252: LD_EXP 72
31256: PUSH
31257: LD_VAR 0 2
31261: ARRAY
31262: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
31263: LD_ADDR_EXP 72
31267: PUSH
31268: LD_EXP 72
31272: PPUSH
31273: LD_VAR 0 2
31277: PPUSH
31278: EMPTY
31279: PPUSH
31280: CALL_OW 1
31284: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
31285: LD_VAR 0 2
31289: PPUSH
31290: LD_VAR 0 4
31294: PPUSH
31295: LD_EXP 73
31299: PUSH
31300: LD_VAR 0 2
31304: ARRAY
31305: PPUSH
31306: CALL 46362 0 3
// exit ;
31310: POP
31311: POP
31312: GO 31318
// end ; end ;
31314: GO 30729
31316: POP
31317: POP
// end ;
31318: LD_VAR 0 1
31322: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
31323: LD_INT 0
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
// if not mc_bases then
31336: LD_EXP 50
31340: NOT
31341: IFFALSE 31345
// exit ;
31343: GO 32432
// for i = 1 to mc_bases do
31345: LD_ADDR_VAR 0 2
31349: PUSH
31350: DOUBLE
31351: LD_INT 1
31353: DEC
31354: ST_TO_ADDR
31355: LD_EXP 50
31359: PUSH
31360: FOR_TO
31361: IFFALSE 32430
// begin tmp := mc_lab [ i ] ;
31363: LD_ADDR_VAR 0 6
31367: PUSH
31368: LD_EXP 83
31372: PUSH
31373: LD_VAR 0 2
31377: ARRAY
31378: ST_TO_ADDR
// if not tmp then
31379: LD_VAR 0 6
31383: NOT
31384: IFFALSE 31388
// continue ;
31386: GO 31360
// idle_lab := 0 ;
31388: LD_ADDR_VAR 0 11
31392: PUSH
31393: LD_INT 0
31395: ST_TO_ADDR
// for j in tmp do
31396: LD_ADDR_VAR 0 3
31400: PUSH
31401: LD_VAR 0 6
31405: PUSH
31406: FOR_IN
31407: IFFALSE 32426
// begin researching := false ;
31409: LD_ADDR_VAR 0 10
31413: PUSH
31414: LD_INT 0
31416: ST_TO_ADDR
// side := GetSide ( j ) ;
31417: LD_ADDR_VAR 0 4
31421: PUSH
31422: LD_VAR 0 3
31426: PPUSH
31427: CALL_OW 255
31431: ST_TO_ADDR
// if not mc_tech [ side ] then
31432: LD_EXP 77
31436: PUSH
31437: LD_VAR 0 4
31441: ARRAY
31442: NOT
31443: IFFALSE 31447
// continue ;
31445: GO 31406
// if BuildingStatus ( j ) = bs_idle then
31447: LD_VAR 0 3
31451: PPUSH
31452: CALL_OW 461
31456: PUSH
31457: LD_INT 2
31459: EQUAL
31460: IFFALSE 31648
// begin if idle_lab and UnitsInside ( j ) < 6 then
31462: LD_VAR 0 11
31466: PUSH
31467: LD_VAR 0 3
31471: PPUSH
31472: CALL_OW 313
31476: PUSH
31477: LD_INT 6
31479: LESS
31480: AND
31481: IFFALSE 31552
// begin tmp2 := UnitsInside ( idle_lab ) ;
31483: LD_ADDR_VAR 0 9
31487: PUSH
31488: LD_VAR 0 11
31492: PPUSH
31493: CALL_OW 313
31497: ST_TO_ADDR
// if tmp2 then
31498: LD_VAR 0 9
31502: IFFALSE 31544
// for x in tmp2 do
31504: LD_ADDR_VAR 0 7
31508: PUSH
31509: LD_VAR 0 9
31513: PUSH
31514: FOR_IN
31515: IFFALSE 31542
// begin ComExitBuilding ( x ) ;
31517: LD_VAR 0 7
31521: PPUSH
31522: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31526: LD_VAR 0 7
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: CALL_OW 180
// end ;
31540: GO 31514
31542: POP
31543: POP
// idle_lab := 0 ;
31544: LD_ADDR_VAR 0 11
31548: PUSH
31549: LD_INT 0
31551: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
31552: LD_ADDR_VAR 0 5
31556: PUSH
31557: LD_EXP 77
31561: PUSH
31562: LD_VAR 0 4
31566: ARRAY
31567: PUSH
31568: FOR_IN
31569: IFFALSE 31629
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
31571: LD_VAR 0 3
31575: PPUSH
31576: LD_VAR 0 5
31580: PPUSH
31581: CALL_OW 430
31585: PUSH
31586: LD_VAR 0 4
31590: PPUSH
31591: LD_VAR 0 5
31595: PPUSH
31596: CALL 44934 0 2
31600: AND
31601: IFFALSE 31627
// begin researching := true ;
31603: LD_ADDR_VAR 0 10
31607: PUSH
31608: LD_INT 1
31610: ST_TO_ADDR
// ComResearch ( j , t ) ;
31611: LD_VAR 0 3
31615: PPUSH
31616: LD_VAR 0 5
31620: PPUSH
31621: CALL_OW 124
// break ;
31625: GO 31629
// end ;
31627: GO 31568
31629: POP
31630: POP
// if not researching then
31631: LD_VAR 0 10
31635: NOT
31636: IFFALSE 31648
// idle_lab := j ;
31638: LD_ADDR_VAR 0 11
31642: PUSH
31643: LD_VAR 0 3
31647: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
31648: LD_VAR 0 3
31652: PPUSH
31653: CALL_OW 461
31657: PUSH
31658: LD_INT 10
31660: EQUAL
31661: IFFALSE 32249
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
31663: LD_EXP 79
31667: PUSH
31668: LD_VAR 0 2
31672: ARRAY
31673: NOT
31674: PUSH
31675: LD_EXP 80
31679: PUSH
31680: LD_VAR 0 2
31684: ARRAY
31685: NOT
31686: AND
31687: PUSH
31688: LD_EXP 77
31692: PUSH
31693: LD_VAR 0 4
31697: ARRAY
31698: PUSH
31699: LD_INT 1
31701: GREATER
31702: AND
31703: IFFALSE 31834
// begin ComCancel ( j ) ;
31705: LD_VAR 0 3
31709: PPUSH
31710: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
31714: LD_ADDR_EXP 77
31718: PUSH
31719: LD_EXP 77
31723: PPUSH
31724: LD_VAR 0 4
31728: PPUSH
31729: LD_EXP 77
31733: PUSH
31734: LD_VAR 0 4
31738: ARRAY
31739: PPUSH
31740: LD_EXP 77
31744: PUSH
31745: LD_VAR 0 4
31749: ARRAY
31750: PUSH
31751: LD_INT 1
31753: MINUS
31754: PPUSH
31755: LD_EXP 77
31759: PUSH
31760: LD_VAR 0 4
31764: ARRAY
31765: PPUSH
31766: LD_INT 0
31768: PPUSH
31769: CALL 50383 0 4
31773: PPUSH
31774: CALL_OW 1
31778: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
31779: LD_ADDR_EXP 77
31783: PUSH
31784: LD_EXP 77
31788: PPUSH
31789: LD_VAR 0 4
31793: PPUSH
31794: LD_EXP 77
31798: PUSH
31799: LD_VAR 0 4
31803: ARRAY
31804: PPUSH
31805: LD_EXP 77
31809: PUSH
31810: LD_VAR 0 4
31814: ARRAY
31815: PPUSH
31816: LD_INT 1
31818: PPUSH
31819: LD_INT 0
31821: PPUSH
31822: CALL 50383 0 4
31826: PPUSH
31827: CALL_OW 1
31831: ST_TO_ADDR
// continue ;
31832: GO 31406
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
31834: LD_EXP 79
31838: PUSH
31839: LD_VAR 0 2
31843: ARRAY
31844: PUSH
31845: LD_EXP 80
31849: PUSH
31850: LD_VAR 0 2
31854: ARRAY
31855: NOT
31856: AND
31857: IFFALSE 31984
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
31859: LD_ADDR_EXP 80
31863: PUSH
31864: LD_EXP 80
31868: PPUSH
31869: LD_VAR 0 2
31873: PUSH
31874: LD_EXP 80
31878: PUSH
31879: LD_VAR 0 2
31883: ARRAY
31884: PUSH
31885: LD_INT 1
31887: PLUS
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PPUSH
31893: LD_EXP 79
31897: PUSH
31898: LD_VAR 0 2
31902: ARRAY
31903: PUSH
31904: LD_INT 1
31906: ARRAY
31907: PPUSH
31908: CALL 50965 0 3
31912: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
31913: LD_EXP 79
31917: PUSH
31918: LD_VAR 0 2
31922: ARRAY
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: LD_INT 112
31930: PPUSH
31931: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
31935: LD_ADDR_VAR 0 9
31939: PUSH
31940: LD_EXP 79
31944: PUSH
31945: LD_VAR 0 2
31949: ARRAY
31950: PPUSH
31951: LD_INT 1
31953: PPUSH
31954: CALL_OW 3
31958: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
31959: LD_ADDR_EXP 79
31963: PUSH
31964: LD_EXP 79
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: LD_VAR 0 9
31978: PPUSH
31979: CALL_OW 1
31983: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
31984: LD_EXP 79
31988: PUSH
31989: LD_VAR 0 2
31993: ARRAY
31994: PUSH
31995: LD_EXP 80
31999: PUSH
32000: LD_VAR 0 2
32004: ARRAY
32005: AND
32006: PUSH
32007: LD_EXP 80
32011: PUSH
32012: LD_VAR 0 2
32016: ARRAY
32017: PUSH
32018: LD_INT 1
32020: ARRAY
32021: PPUSH
32022: CALL_OW 310
32026: NOT
32027: AND
32028: PUSH
32029: LD_VAR 0 3
32033: PPUSH
32034: CALL_OW 313
32038: PUSH
32039: LD_INT 6
32041: EQUAL
32042: AND
32043: IFFALSE 32099
// begin tmp2 := UnitsInside ( j ) ;
32045: LD_ADDR_VAR 0 9
32049: PUSH
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 313
32059: ST_TO_ADDR
// if tmp2 = 6 then
32060: LD_VAR 0 9
32064: PUSH
32065: LD_INT 6
32067: EQUAL
32068: IFFALSE 32099
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
32070: LD_VAR 0 9
32074: PUSH
32075: LD_INT 1
32077: ARRAY
32078: PPUSH
32079: LD_INT 112
32081: PPUSH
32082: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
32086: LD_VAR 0 9
32090: PUSH
32091: LD_INT 1
32093: ARRAY
32094: PPUSH
32095: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
32099: LD_EXP 80
32103: PUSH
32104: LD_VAR 0 2
32108: ARRAY
32109: PUSH
32110: LD_EXP 80
32114: PUSH
32115: LD_VAR 0 2
32119: ARRAY
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: CALL_OW 314
32129: NOT
32130: AND
32131: PUSH
32132: LD_EXP 80
32136: PUSH
32137: LD_VAR 0 2
32141: ARRAY
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: PPUSH
32147: CALL_OW 310
32151: NOT
32152: AND
32153: IFFALSE 32179
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
32155: LD_EXP 80
32159: PUSH
32160: LD_VAR 0 2
32164: ARRAY
32165: PUSH
32166: LD_INT 1
32168: ARRAY
32169: PPUSH
32170: LD_VAR 0 3
32174: PPUSH
32175: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
32179: LD_EXP 80
32183: PUSH
32184: LD_VAR 0 2
32188: ARRAY
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PPUSH
32194: CALL_OW 310
32198: PUSH
32199: LD_EXP 80
32203: PUSH
32204: LD_VAR 0 2
32208: ARRAY
32209: PUSH
32210: LD_INT 1
32212: ARRAY
32213: PPUSH
32214: CALL_OW 310
32218: PPUSH
32219: CALL_OW 461
32223: PUSH
32224: LD_INT 3
32226: NONEQUAL
32227: AND
32228: IFFALSE 32249
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
32230: LD_EXP 80
32234: PUSH
32235: LD_VAR 0 2
32239: ARRAY
32240: PUSH
32241: LD_INT 1
32243: ARRAY
32244: PPUSH
32245: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
32249: LD_VAR 0 3
32253: PPUSH
32254: CALL_OW 461
32258: PUSH
32259: LD_INT 6
32261: EQUAL
32262: PUSH
32263: LD_VAR 0 6
32267: PUSH
32268: LD_INT 1
32270: GREATER
32271: AND
32272: IFFALSE 32424
// begin sci := [ ] ;
32274: LD_ADDR_VAR 0 8
32278: PUSH
32279: EMPTY
32280: ST_TO_ADDR
// for x in ( tmp diff j ) do
32281: LD_ADDR_VAR 0 7
32285: PUSH
32286: LD_VAR 0 6
32290: PUSH
32291: LD_VAR 0 3
32295: DIFF
32296: PUSH
32297: FOR_IN
32298: IFFALSE 32350
// begin if sci = 6 then
32300: LD_VAR 0 8
32304: PUSH
32305: LD_INT 6
32307: EQUAL
32308: IFFALSE 32312
// break ;
32310: GO 32350
// if BuildingStatus ( x ) = bs_idle then
32312: LD_VAR 0 7
32316: PPUSH
32317: CALL_OW 461
32321: PUSH
32322: LD_INT 2
32324: EQUAL
32325: IFFALSE 32348
// sci := sci ^ UnitsInside ( x ) ;
32327: LD_ADDR_VAR 0 8
32331: PUSH
32332: LD_VAR 0 8
32336: PUSH
32337: LD_VAR 0 7
32341: PPUSH
32342: CALL_OW 313
32346: ADD
32347: ST_TO_ADDR
// end ;
32348: GO 32297
32350: POP
32351: POP
// if not sci then
32352: LD_VAR 0 8
32356: NOT
32357: IFFALSE 32361
// continue ;
32359: GO 31406
// for x in sci do
32361: LD_ADDR_VAR 0 7
32365: PUSH
32366: LD_VAR 0 8
32370: PUSH
32371: FOR_IN
32372: IFFALSE 32422
// if IsInUnit ( x ) and not HasTask ( x ) then
32374: LD_VAR 0 7
32378: PPUSH
32379: CALL_OW 310
32383: PUSH
32384: LD_VAR 0 7
32388: PPUSH
32389: CALL_OW 314
32393: NOT
32394: AND
32395: IFFALSE 32420
// begin ComExitBuilding ( x ) ;
32397: LD_VAR 0 7
32401: PPUSH
32402: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32406: LD_VAR 0 7
32410: PPUSH
32411: LD_VAR 0 3
32415: PPUSH
32416: CALL_OW 180
// end ;
32420: GO 32371
32422: POP
32423: POP
// end ; end ;
32424: GO 31406
32426: POP
32427: POP
// end ;
32428: GO 31360
32430: POP
32431: POP
// end ;
32432: LD_VAR 0 1
32436: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
32437: LD_INT 0
32439: PPUSH
32440: PPUSH
// if not mc_bases then
32441: LD_EXP 50
32445: NOT
32446: IFFALSE 32450
// exit ;
32448: GO 32531
// for i = 1 to mc_bases do
32450: LD_ADDR_VAR 0 2
32454: PUSH
32455: DOUBLE
32456: LD_INT 1
32458: DEC
32459: ST_TO_ADDR
32460: LD_EXP 50
32464: PUSH
32465: FOR_TO
32466: IFFALSE 32529
// if mc_mines [ i ] and mc_miners [ i ] then
32468: LD_EXP 63
32472: PUSH
32473: LD_VAR 0 2
32477: ARRAY
32478: PUSH
32479: LD_EXP 64
32483: PUSH
32484: LD_VAR 0 2
32488: ARRAY
32489: AND
32490: IFFALSE 32527
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
32492: LD_EXP 64
32496: PUSH
32497: LD_VAR 0 2
32501: ARRAY
32502: PUSH
32503: LD_INT 1
32505: ARRAY
32506: PPUSH
32507: CALL_OW 255
32511: PPUSH
32512: LD_EXP 63
32516: PUSH
32517: LD_VAR 0 2
32521: ARRAY
32522: PPUSH
32523: CALL 48022 0 2
32527: GO 32465
32529: POP
32530: POP
// end ;
32531: LD_VAR 0 1
32535: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
32536: LD_INT 0
32538: PPUSH
32539: PPUSH
32540: PPUSH
32541: PPUSH
32542: PPUSH
32543: PPUSH
32544: PPUSH
32545: PPUSH
// if not mc_bases or not mc_parking then
32546: LD_EXP 50
32550: NOT
32551: PUSH
32552: LD_EXP 74
32556: NOT
32557: OR
32558: IFFALSE 32562
// exit ;
32560: GO 33274
// for i = 1 to mc_bases do
32562: LD_ADDR_VAR 0 2
32566: PUSH
32567: DOUBLE
32568: LD_INT 1
32570: DEC
32571: ST_TO_ADDR
32572: LD_EXP 50
32576: PUSH
32577: FOR_TO
32578: IFFALSE 33272
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
32580: LD_EXP 50
32584: PUSH
32585: LD_VAR 0 2
32589: ARRAY
32590: NOT
32591: PUSH
32592: LD_EXP 74
32596: PUSH
32597: LD_VAR 0 2
32601: ARRAY
32602: NOT
32603: OR
32604: IFFALSE 32608
// continue ;
32606: GO 32577
// if mc_scan [ i ] then
32608: LD_EXP 73
32612: PUSH
32613: LD_VAR 0 2
32617: ARRAY
32618: IFFALSE 32644
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32620: LD_ADDR_EXP 62
32624: PUSH
32625: LD_EXP 62
32629: PPUSH
32630: LD_VAR 0 2
32634: PPUSH
32635: EMPTY
32636: PPUSH
32637: CALL_OW 1
32641: ST_TO_ADDR
// continue ;
32642: GO 32577
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
32644: LD_ADDR_VAR 0 5
32648: PUSH
32649: LD_EXP 50
32653: PUSH
32654: LD_VAR 0 2
32658: ARRAY
32659: PUSH
32660: LD_INT 1
32662: ARRAY
32663: PPUSH
32664: CALL_OW 255
32668: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32669: LD_ADDR_VAR 0 6
32673: PUSH
32674: LD_EXP 50
32678: PUSH
32679: LD_VAR 0 2
32683: ARRAY
32684: PPUSH
32685: LD_INT 30
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PPUSH
32695: CALL_OW 72
32699: ST_TO_ADDR
// if not fac then
32700: LD_VAR 0 6
32704: NOT
32705: IFFALSE 32756
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32707: LD_ADDR_VAR 0 6
32711: PUSH
32712: LD_EXP 50
32716: PUSH
32717: LD_VAR 0 2
32721: ARRAY
32722: PPUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 30
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 30
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: LIST
32750: PPUSH
32751: CALL_OW 72
32755: ST_TO_ADDR
// if not fac then
32756: LD_VAR 0 6
32760: NOT
32761: IFFALSE 32765
// continue ;
32763: GO 32577
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
32765: LD_ADDR_VAR 0 7
32769: PUSH
32770: LD_EXP 74
32774: PUSH
32775: LD_VAR 0 2
32779: ARRAY
32780: PPUSH
32781: LD_INT 22
32783: PUSH
32784: LD_VAR 0 5
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: LD_INT 24
32808: PUSH
32809: LD_INT 1000
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: LIST
32824: PPUSH
32825: CALL_OW 70
32829: PUSH
32830: LD_INT 22
32832: PUSH
32833: LD_VAR 0 5
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 91
32844: PUSH
32845: LD_VAR 0 6
32849: PUSH
32850: LD_INT 1
32852: ARRAY
32853: PUSH
32854: LD_INT 25
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 21
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 24
32877: PUSH
32878: LD_INT 1000
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: PPUSH
32895: CALL_OW 69
32899: UNION
32900: ST_TO_ADDR
// if not vehs then
32901: LD_VAR 0 7
32905: NOT
32906: IFFALSE 32932
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32908: LD_ADDR_EXP 62
32912: PUSH
32913: LD_EXP 62
32917: PPUSH
32918: LD_VAR 0 2
32922: PPUSH
32923: EMPTY
32924: PPUSH
32925: CALL_OW 1
32929: ST_TO_ADDR
// continue ;
32930: GO 32577
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32932: LD_ADDR_VAR 0 8
32936: PUSH
32937: LD_EXP 50
32941: PUSH
32942: LD_VAR 0 2
32946: ARRAY
32947: PPUSH
32948: LD_INT 30
32950: PUSH
32951: LD_INT 3
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 72
32962: ST_TO_ADDR
// if tmp then
32963: LD_VAR 0 8
32967: IFFALSE 33070
// begin for j in tmp do
32969: LD_ADDR_VAR 0 3
32973: PUSH
32974: LD_VAR 0 8
32978: PUSH
32979: FOR_IN
32980: IFFALSE 33068
// for k in UnitsInside ( j ) do
32982: LD_ADDR_VAR 0 4
32986: PUSH
32987: LD_VAR 0 3
32991: PPUSH
32992: CALL_OW 313
32996: PUSH
32997: FOR_IN
32998: IFFALSE 33064
// if k then
33000: LD_VAR 0 4
33004: IFFALSE 33062
// if not k in mc_repair_vehicle [ i ] then
33006: LD_VAR 0 4
33010: PUSH
33011: LD_EXP 62
33015: PUSH
33016: LD_VAR 0 2
33020: ARRAY
33021: IN
33022: NOT
33023: IFFALSE 33062
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
33025: LD_ADDR_EXP 62
33029: PUSH
33030: LD_EXP 62
33034: PPUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: LD_EXP 62
33044: PUSH
33045: LD_VAR 0 2
33049: ARRAY
33050: PUSH
33051: LD_VAR 0 4
33055: UNION
33056: PPUSH
33057: CALL_OW 1
33061: ST_TO_ADDR
33062: GO 32997
33064: POP
33065: POP
33066: GO 32979
33068: POP
33069: POP
// end ; if not mc_repair_vehicle [ i ] then
33070: LD_EXP 62
33074: PUSH
33075: LD_VAR 0 2
33079: ARRAY
33080: NOT
33081: IFFALSE 33085
// continue ;
33083: GO 32577
// for j in mc_repair_vehicle [ i ] do
33085: LD_ADDR_VAR 0 3
33089: PUSH
33090: LD_EXP 62
33094: PUSH
33095: LD_VAR 0 2
33099: ARRAY
33100: PUSH
33101: FOR_IN
33102: IFFALSE 33268
// begin if GetClass ( j ) <> 3 then
33104: LD_VAR 0 3
33108: PPUSH
33109: CALL_OW 257
33113: PUSH
33114: LD_INT 3
33116: NONEQUAL
33117: IFFALSE 33158
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
33119: LD_ADDR_EXP 62
33123: PUSH
33124: LD_EXP 62
33128: PPUSH
33129: LD_VAR 0 2
33133: PPUSH
33134: LD_EXP 62
33138: PUSH
33139: LD_VAR 0 2
33143: ARRAY
33144: PUSH
33145: LD_VAR 0 3
33149: DIFF
33150: PPUSH
33151: CALL_OW 1
33155: ST_TO_ADDR
// continue ;
33156: GO 33101
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33158: LD_VAR 0 3
33162: PPUSH
33163: CALL_OW 311
33167: NOT
33168: PUSH
33169: LD_VAR 0 3
33173: PUSH
33174: LD_EXP 53
33178: PUSH
33179: LD_VAR 0 2
33183: ARRAY
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: IN
33189: NOT
33190: AND
33191: PUSH
33192: LD_VAR 0 3
33196: PUSH
33197: LD_EXP 53
33201: PUSH
33202: LD_VAR 0 2
33206: ARRAY
33207: PUSH
33208: LD_INT 2
33210: ARRAY
33211: IN
33212: NOT
33213: AND
33214: IFFALSE 33266
// begin if IsInUnit ( j ) then
33216: LD_VAR 0 3
33220: PPUSH
33221: CALL_OW 310
33225: IFFALSE 33236
// ComExitBuilding ( j ) ;
33227: LD_VAR 0 3
33231: PPUSH
33232: CALL_OW 122
// if not HasTask ( j ) then
33236: LD_VAR 0 3
33240: PPUSH
33241: CALL_OW 314
33245: NOT
33246: IFFALSE 33266
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
33248: LD_VAR 0 3
33252: PPUSH
33253: LD_VAR 0 7
33257: PUSH
33258: LD_INT 1
33260: ARRAY
33261: PPUSH
33262: CALL_OW 189
// end ; end ;
33266: GO 33101
33268: POP
33269: POP
// end ;
33270: GO 32577
33272: POP
33273: POP
// end ;
33274: LD_VAR 0 1
33278: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
33279: LD_INT 0
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
// if not mc_bases then
33292: LD_EXP 50
33296: NOT
33297: IFFALSE 33301
// exit ;
33299: GO 34103
// for i = 1 to mc_bases do
33301: LD_ADDR_VAR 0 2
33305: PUSH
33306: DOUBLE
33307: LD_INT 1
33309: DEC
33310: ST_TO_ADDR
33311: LD_EXP 50
33315: PUSH
33316: FOR_TO
33317: IFFALSE 34101
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
33319: LD_EXP 78
33323: PUSH
33324: LD_VAR 0 2
33328: ARRAY
33329: NOT
33330: PUSH
33331: LD_EXP 53
33335: PUSH
33336: LD_VAR 0 2
33340: ARRAY
33341: PUSH
33342: LD_INT 1
33344: ARRAY
33345: OR
33346: PUSH
33347: LD_EXP 53
33351: PUSH
33352: LD_VAR 0 2
33356: ARRAY
33357: PUSH
33358: LD_INT 2
33360: ARRAY
33361: OR
33362: PUSH
33363: LD_EXP 76
33367: PUSH
33368: LD_VAR 0 2
33372: ARRAY
33373: PPUSH
33374: LD_INT 1
33376: PPUSH
33377: CALL_OW 325
33381: NOT
33382: OR
33383: PUSH
33384: LD_EXP 73
33388: PUSH
33389: LD_VAR 0 2
33393: ARRAY
33394: OR
33395: IFFALSE 33399
// continue ;
33397: GO 33316
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
33399: LD_ADDR_VAR 0 8
33403: PUSH
33404: LD_EXP 50
33408: PUSH
33409: LD_VAR 0 2
33413: ARRAY
33414: PPUSH
33415: LD_INT 25
33417: PUSH
33418: LD_INT 4
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 50
33427: PUSH
33428: EMPTY
33429: LIST
33430: PUSH
33431: LD_INT 3
33433: PUSH
33434: LD_INT 60
33436: PUSH
33437: EMPTY
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: PPUSH
33449: CALL_OW 72
33453: PUSH
33454: LD_EXP 54
33458: PUSH
33459: LD_VAR 0 2
33463: ARRAY
33464: DIFF
33465: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33466: LD_ADDR_VAR 0 9
33470: PUSH
33471: LD_EXP 50
33475: PUSH
33476: LD_VAR 0 2
33480: ARRAY
33481: PPUSH
33482: LD_INT 2
33484: PUSH
33485: LD_INT 30
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 30
33497: PUSH
33498: LD_INT 1
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: PPUSH
33510: CALL_OW 72
33514: ST_TO_ADDR
// if not tmp or not dep then
33515: LD_VAR 0 8
33519: NOT
33520: PUSH
33521: LD_VAR 0 9
33525: NOT
33526: OR
33527: IFFALSE 33531
// continue ;
33529: GO 33316
// side := GetSide ( tmp [ 1 ] ) ;
33531: LD_ADDR_VAR 0 11
33535: PUSH
33536: LD_VAR 0 8
33540: PUSH
33541: LD_INT 1
33543: ARRAY
33544: PPUSH
33545: CALL_OW 255
33549: ST_TO_ADDR
// dep := dep [ 1 ] ;
33550: LD_ADDR_VAR 0 9
33554: PUSH
33555: LD_VAR 0 9
33559: PUSH
33560: LD_INT 1
33562: ARRAY
33563: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
33564: LD_ADDR_VAR 0 7
33568: PUSH
33569: LD_EXP 78
33573: PUSH
33574: LD_VAR 0 2
33578: ARRAY
33579: PPUSH
33580: LD_INT 22
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 25
33592: PUSH
33593: LD_INT 12
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PPUSH
33604: CALL_OW 70
33608: PUSH
33609: LD_INT 22
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 25
33621: PUSH
33622: LD_INT 12
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 91
33631: PUSH
33632: LD_VAR 0 9
33636: PUSH
33637: LD_INT 20
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: LIST
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: PPUSH
33650: CALL_OW 69
33654: UNION
33655: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
33656: LD_ADDR_VAR 0 10
33660: PUSH
33661: LD_EXP 78
33665: PUSH
33666: LD_VAR 0 2
33670: ARRAY
33671: PPUSH
33672: LD_INT 81
33674: PUSH
33675: LD_VAR 0 11
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PPUSH
33684: CALL_OW 70
33688: ST_TO_ADDR
// if not apes or danger_at_area then
33689: LD_VAR 0 7
33693: NOT
33694: PUSH
33695: LD_VAR 0 10
33699: OR
33700: IFFALSE 33750
// begin if mc_taming [ i ] then
33702: LD_EXP 81
33706: PUSH
33707: LD_VAR 0 2
33711: ARRAY
33712: IFFALSE 33748
// begin MC_Reset ( i , 121 ) ;
33714: LD_VAR 0 2
33718: PPUSH
33719: LD_INT 121
33721: PPUSH
33722: CALL 19708 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33726: LD_ADDR_EXP 81
33730: PUSH
33731: LD_EXP 81
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: EMPTY
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
// end ; continue ;
33748: GO 33316
// end ; for j in tmp do
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_VAR 0 8
33759: PUSH
33760: FOR_IN
33761: IFFALSE 34097
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
33763: LD_VAR 0 3
33767: PUSH
33768: LD_EXP 81
33772: PUSH
33773: LD_VAR 0 2
33777: ARRAY
33778: IN
33779: NOT
33780: PUSH
33781: LD_EXP 81
33785: PUSH
33786: LD_VAR 0 2
33790: ARRAY
33791: PUSH
33792: LD_INT 3
33794: LESS
33795: AND
33796: IFFALSE 33854
// begin SetTag ( j , 121 ) ;
33798: LD_VAR 0 3
33802: PPUSH
33803: LD_INT 121
33805: PPUSH
33806: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
33810: LD_ADDR_EXP 81
33814: PUSH
33815: LD_EXP 81
33819: PPUSH
33820: LD_VAR 0 2
33824: PUSH
33825: LD_EXP 81
33829: PUSH
33830: LD_VAR 0 2
33834: ARRAY
33835: PUSH
33836: LD_INT 1
33838: PLUS
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PPUSH
33844: LD_VAR 0 3
33848: PPUSH
33849: CALL 50965 0 3
33853: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
33854: LD_VAR 0 3
33858: PUSH
33859: LD_EXP 81
33863: PUSH
33864: LD_VAR 0 2
33868: ARRAY
33869: IN
33870: IFFALSE 34095
// begin if GetClass ( j ) <> 4 then
33872: LD_VAR 0 3
33876: PPUSH
33877: CALL_OW 257
33881: PUSH
33882: LD_INT 4
33884: NONEQUAL
33885: IFFALSE 33938
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
33887: LD_ADDR_EXP 81
33891: PUSH
33892: LD_EXP 81
33896: PPUSH
33897: LD_VAR 0 2
33901: PPUSH
33902: LD_EXP 81
33906: PUSH
33907: LD_VAR 0 2
33911: ARRAY
33912: PUSH
33913: LD_VAR 0 3
33917: DIFF
33918: PPUSH
33919: CALL_OW 1
33923: ST_TO_ADDR
// SetTag ( j , 0 ) ;
33924: LD_VAR 0 3
33928: PPUSH
33929: LD_INT 0
33931: PPUSH
33932: CALL_OW 109
// continue ;
33936: GO 33760
// end ; if IsInUnit ( j ) then
33938: LD_VAR 0 3
33942: PPUSH
33943: CALL_OW 310
33947: IFFALSE 33958
// ComExitBuilding ( j ) ;
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
33958: LD_ADDR_VAR 0 6
33962: PUSH
33963: LD_VAR 0 7
33967: PPUSH
33968: LD_VAR 0 3
33972: PPUSH
33973: CALL_OW 74
33977: ST_TO_ADDR
// if not ape then
33978: LD_VAR 0 6
33982: NOT
33983: IFFALSE 33987
// break ;
33985: GO 34097
// x := GetX ( ape ) ;
33987: LD_ADDR_VAR 0 4
33991: PUSH
33992: LD_VAR 0 6
33996: PPUSH
33997: CALL_OW 250
34001: ST_TO_ADDR
// y := GetY ( ape ) ;
34002: LD_ADDR_VAR 0 5
34006: PUSH
34007: LD_VAR 0 6
34011: PPUSH
34012: CALL_OW 251
34016: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34017: LD_VAR 0 4
34021: PPUSH
34022: LD_VAR 0 5
34026: PPUSH
34027: CALL_OW 488
34031: NOT
34032: PUSH
34033: LD_VAR 0 11
34037: PPUSH
34038: LD_VAR 0 4
34042: PPUSH
34043: LD_VAR 0 5
34047: PPUSH
34048: LD_INT 20
34050: PPUSH
34051: CALL 51861 0 4
34055: PUSH
34056: LD_INT 4
34058: ARRAY
34059: OR
34060: IFFALSE 34064
// break ;
34062: GO 34097
// if not HasTask ( j ) then
34064: LD_VAR 0 3
34068: PPUSH
34069: CALL_OW 314
34073: NOT
34074: IFFALSE 34095
// ComTameXY ( j , x , y ) ;
34076: LD_VAR 0 3
34080: PPUSH
34081: LD_VAR 0 4
34085: PPUSH
34086: LD_VAR 0 5
34090: PPUSH
34091: CALL_OW 131
// end ; end ;
34095: GO 33760
34097: POP
34098: POP
// end ;
34099: GO 33316
34101: POP
34102: POP
// end ;
34103: LD_VAR 0 1
34107: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
34108: LD_INT 0
34110: PPUSH
34111: PPUSH
34112: PPUSH
34113: PPUSH
34114: PPUSH
34115: PPUSH
34116: PPUSH
34117: PPUSH
// if not mc_bases then
34118: LD_EXP 50
34122: NOT
34123: IFFALSE 34127
// exit ;
34125: GO 34753
// for i = 1 to mc_bases do
34127: LD_ADDR_VAR 0 2
34131: PUSH
34132: DOUBLE
34133: LD_INT 1
34135: DEC
34136: ST_TO_ADDR
34137: LD_EXP 50
34141: PUSH
34142: FOR_TO
34143: IFFALSE 34751
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
34145: LD_EXP 79
34149: PUSH
34150: LD_VAR 0 2
34154: ARRAY
34155: NOT
34156: PUSH
34157: LD_EXP 79
34161: PUSH
34162: LD_VAR 0 2
34166: ARRAY
34167: PPUSH
34168: LD_INT 25
34170: PUSH
34171: LD_INT 12
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PPUSH
34178: CALL_OW 72
34182: NOT
34183: OR
34184: IFFALSE 34188
// continue ;
34186: GO 34142
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
34188: LD_ADDR_VAR 0 5
34192: PUSH
34193: LD_EXP 79
34197: PUSH
34198: LD_VAR 0 2
34202: ARRAY
34203: PUSH
34204: LD_INT 1
34206: ARRAY
34207: PPUSH
34208: CALL_OW 255
34212: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
34213: LD_VAR 0 5
34217: PPUSH
34218: LD_INT 2
34220: PPUSH
34221: CALL_OW 325
34225: IFFALSE 34478
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34227: LD_ADDR_VAR 0 4
34231: PUSH
34232: LD_EXP 79
34236: PUSH
34237: LD_VAR 0 2
34241: ARRAY
34242: PPUSH
34243: LD_INT 25
34245: PUSH
34246: LD_INT 16
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PPUSH
34253: CALL_OW 72
34257: ST_TO_ADDR
// if tmp < 6 then
34258: LD_VAR 0 4
34262: PUSH
34263: LD_INT 6
34265: LESS
34266: IFFALSE 34478
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34268: LD_ADDR_VAR 0 6
34272: PUSH
34273: LD_EXP 50
34277: PUSH
34278: LD_VAR 0 2
34282: ARRAY
34283: PPUSH
34284: LD_INT 2
34286: PUSH
34287: LD_INT 30
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 30
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 72
34316: ST_TO_ADDR
// if depot then
34317: LD_VAR 0 6
34321: IFFALSE 34478
// begin selected := 0 ;
34323: LD_ADDR_VAR 0 7
34327: PUSH
34328: LD_INT 0
34330: ST_TO_ADDR
// for j in depot do
34331: LD_ADDR_VAR 0 3
34335: PUSH
34336: LD_VAR 0 6
34340: PUSH
34341: FOR_IN
34342: IFFALSE 34373
// begin if UnitsInside ( j ) < 6 then
34344: LD_VAR 0 3
34348: PPUSH
34349: CALL_OW 313
34353: PUSH
34354: LD_INT 6
34356: LESS
34357: IFFALSE 34371
// begin selected := j ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 3
34368: ST_TO_ADDR
// break ;
34369: GO 34373
// end ; end ;
34371: GO 34341
34373: POP
34374: POP
// if selected then
34375: LD_VAR 0 7
34379: IFFALSE 34478
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34381: LD_ADDR_VAR 0 3
34385: PUSH
34386: LD_EXP 79
34390: PUSH
34391: LD_VAR 0 2
34395: ARRAY
34396: PPUSH
34397: LD_INT 25
34399: PUSH
34400: LD_INT 12
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PPUSH
34407: CALL_OW 72
34411: PUSH
34412: FOR_IN
34413: IFFALSE 34476
// if not HasTask ( j ) then
34415: LD_VAR 0 3
34419: PPUSH
34420: CALL_OW 314
34424: NOT
34425: IFFALSE 34474
// begin if not IsInUnit ( j ) then
34427: LD_VAR 0 3
34431: PPUSH
34432: CALL_OW 310
34436: NOT
34437: IFFALSE 34453
// ComEnterUnit ( j , selected ) ;
34439: LD_VAR 0 3
34443: PPUSH
34444: LD_VAR 0 7
34448: PPUSH
34449: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
34453: LD_VAR 0 3
34457: PPUSH
34458: LD_INT 16
34460: PPUSH
34461: CALL_OW 183
// AddComExitBuilding ( j ) ;
34465: LD_VAR 0 3
34469: PPUSH
34470: CALL_OW 182
// end ;
34474: GO 34412
34476: POP
34477: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
34478: LD_VAR 0 5
34482: PPUSH
34483: LD_INT 11
34485: PPUSH
34486: CALL_OW 325
34490: IFFALSE 34749
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34492: LD_ADDR_VAR 0 4
34496: PUSH
34497: LD_EXP 79
34501: PUSH
34502: LD_VAR 0 2
34506: ARRAY
34507: PPUSH
34508: LD_INT 25
34510: PUSH
34511: LD_INT 16
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PPUSH
34518: CALL_OW 72
34522: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
34523: LD_VAR 0 4
34527: PUSH
34528: LD_INT 6
34530: GREATEREQUAL
34531: PUSH
34532: LD_VAR 0 5
34536: PPUSH
34537: LD_INT 2
34539: PPUSH
34540: CALL_OW 325
34544: NOT
34545: OR
34546: IFFALSE 34749
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
34548: LD_ADDR_VAR 0 8
34552: PUSH
34553: LD_EXP 50
34557: PUSH
34558: LD_VAR 0 2
34562: ARRAY
34563: PPUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 30
34569: PUSH
34570: LD_INT 4
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 30
34579: PUSH
34580: LD_INT 5
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: LIST
34591: PPUSH
34592: CALL_OW 72
34596: ST_TO_ADDR
// if barracks then
34597: LD_VAR 0 8
34601: IFFALSE 34749
// begin selected := 0 ;
34603: LD_ADDR_VAR 0 7
34607: PUSH
34608: LD_INT 0
34610: ST_TO_ADDR
// for j in barracks do
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_VAR 0 8
34620: PUSH
34621: FOR_IN
34622: IFFALSE 34653
// begin if UnitsInside ( j ) < 6 then
34624: LD_VAR 0 3
34628: PPUSH
34629: CALL_OW 313
34633: PUSH
34634: LD_INT 6
34636: LESS
34637: IFFALSE 34651
// begin selected := j ;
34639: LD_ADDR_VAR 0 7
34643: PUSH
34644: LD_VAR 0 3
34648: ST_TO_ADDR
// break ;
34649: GO 34653
// end ; end ;
34651: GO 34621
34653: POP
34654: POP
// if selected then
34655: LD_VAR 0 7
34659: IFFALSE 34749
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34661: LD_ADDR_VAR 0 3
34665: PUSH
34666: LD_EXP 79
34670: PUSH
34671: LD_VAR 0 2
34675: ARRAY
34676: PPUSH
34677: LD_INT 25
34679: PUSH
34680: LD_INT 12
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PPUSH
34687: CALL_OW 72
34691: PUSH
34692: FOR_IN
34693: IFFALSE 34747
// if not IsInUnit ( j ) and not HasTask ( j ) then
34695: LD_VAR 0 3
34699: PPUSH
34700: CALL_OW 310
34704: NOT
34705: PUSH
34706: LD_VAR 0 3
34710: PPUSH
34711: CALL_OW 314
34715: NOT
34716: AND
34717: IFFALSE 34745
// begin ComEnterUnit ( j , selected ) ;
34719: LD_VAR 0 3
34723: PPUSH
34724: LD_VAR 0 7
34728: PPUSH
34729: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
34733: LD_VAR 0 3
34737: PPUSH
34738: LD_INT 15
34740: PPUSH
34741: CALL_OW 183
// end ;
34745: GO 34692
34747: POP
34748: POP
// end ; end ; end ; end ; end ;
34749: GO 34142
34751: POP
34752: POP
// end ;
34753: LD_VAR 0 1
34757: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
34758: LD_INT 0
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
// if not mc_bases then
34764: LD_EXP 50
34768: NOT
34769: IFFALSE 34773
// exit ;
34771: GO 34951
// for i = 1 to mc_bases do
34773: LD_ADDR_VAR 0 2
34777: PUSH
34778: DOUBLE
34779: LD_INT 1
34781: DEC
34782: ST_TO_ADDR
34783: LD_EXP 50
34787: PUSH
34788: FOR_TO
34789: IFFALSE 34949
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
34791: LD_ADDR_VAR 0 4
34795: PUSH
34796: LD_EXP 50
34800: PUSH
34801: LD_VAR 0 2
34805: ARRAY
34806: PPUSH
34807: LD_INT 25
34809: PUSH
34810: LD_INT 9
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PPUSH
34817: CALL_OW 72
34821: ST_TO_ADDR
// if not tmp then
34822: LD_VAR 0 4
34826: NOT
34827: IFFALSE 34831
// continue ;
34829: GO 34788
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
34831: LD_EXP 76
34835: PUSH
34836: LD_VAR 0 2
34840: ARRAY
34841: PPUSH
34842: LD_INT 29
34844: PPUSH
34845: CALL_OW 325
34849: NOT
34850: PUSH
34851: LD_EXP 76
34855: PUSH
34856: LD_VAR 0 2
34860: ARRAY
34861: PPUSH
34862: LD_INT 28
34864: PPUSH
34865: CALL_OW 325
34869: NOT
34870: AND
34871: IFFALSE 34875
// continue ;
34873: GO 34788
// for j in tmp do
34875: LD_ADDR_VAR 0 3
34879: PUSH
34880: LD_VAR 0 4
34884: PUSH
34885: FOR_IN
34886: IFFALSE 34945
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34888: LD_VAR 0 3
34892: PUSH
34893: LD_EXP 53
34897: PUSH
34898: LD_VAR 0 2
34902: ARRAY
34903: PUSH
34904: LD_INT 1
34906: ARRAY
34907: IN
34908: NOT
34909: PUSH
34910: LD_VAR 0 3
34914: PUSH
34915: LD_EXP 53
34919: PUSH
34920: LD_VAR 0 2
34924: ARRAY
34925: PUSH
34926: LD_INT 2
34928: ARRAY
34929: IN
34930: NOT
34931: AND
34932: IFFALSE 34943
// ComSpaceTimeShoot ( j ) ;
34934: LD_VAR 0 3
34938: PPUSH
34939: CALL 45025 0 1
34943: GO 34885
34945: POP
34946: POP
// end ;
34947: GO 34788
34949: POP
34950: POP
// end ;
34951: LD_VAR 0 1
34955: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
34956: LD_INT 0
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
// if not mc_bases then
34967: LD_EXP 50
34971: NOT
34972: IFFALSE 34976
// exit ;
34974: GO 35598
// for i = 1 to mc_bases do
34976: LD_ADDR_VAR 0 2
34980: PUSH
34981: DOUBLE
34982: LD_INT 1
34984: DEC
34985: ST_TO_ADDR
34986: LD_EXP 50
34990: PUSH
34991: FOR_TO
34992: IFFALSE 35596
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
34994: LD_EXP 85
34998: PUSH
34999: LD_VAR 0 2
35003: ARRAY
35004: NOT
35005: PUSH
35006: LD_INT 38
35008: PPUSH
35009: LD_EXP 76
35013: PUSH
35014: LD_VAR 0 2
35018: ARRAY
35019: PPUSH
35020: CALL_OW 321
35024: PUSH
35025: LD_INT 2
35027: NONEQUAL
35028: OR
35029: IFFALSE 35033
// continue ;
35031: GO 34991
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
35033: LD_ADDR_VAR 0 8
35037: PUSH
35038: LD_EXP 50
35042: PUSH
35043: LD_VAR 0 2
35047: ARRAY
35048: PPUSH
35049: LD_INT 30
35051: PUSH
35052: LD_INT 34
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PPUSH
35059: CALL_OW 72
35063: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
35064: LD_ADDR_VAR 0 9
35068: PUSH
35069: LD_EXP 50
35073: PUSH
35074: LD_VAR 0 2
35078: ARRAY
35079: PPUSH
35080: LD_INT 25
35082: PUSH
35083: LD_INT 4
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PPUSH
35090: CALL_OW 72
35094: PPUSH
35095: LD_INT 0
35097: PPUSH
35098: CALL 84162 0 2
35102: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
35103: LD_VAR 0 9
35107: NOT
35108: PUSH
35109: LD_VAR 0 8
35113: NOT
35114: OR
35115: PUSH
35116: LD_EXP 50
35120: PUSH
35121: LD_VAR 0 2
35125: ARRAY
35126: PPUSH
35127: LD_INT 124
35129: PPUSH
35130: CALL 84162 0 2
35134: OR
35135: IFFALSE 35139
// continue ;
35137: GO 34991
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
35139: LD_EXP 86
35143: PUSH
35144: LD_VAR 0 2
35148: ARRAY
35149: PUSH
35150: LD_EXP 85
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: LESS
35161: PUSH
35162: LD_EXP 86
35166: PUSH
35167: LD_VAR 0 2
35171: ARRAY
35172: PUSH
35173: LD_VAR 0 8
35177: LESS
35178: AND
35179: IFFALSE 35594
// begin tmp := sci [ 1 ] ;
35181: LD_ADDR_VAR 0 7
35185: PUSH
35186: LD_VAR 0 9
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
35195: LD_VAR 0 7
35199: PPUSH
35200: LD_INT 124
35202: PPUSH
35203: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
35207: LD_ADDR_VAR 0 3
35211: PUSH
35212: DOUBLE
35213: LD_EXP 85
35217: PUSH
35218: LD_VAR 0 2
35222: ARRAY
35223: INC
35224: ST_TO_ADDR
35225: LD_EXP 85
35229: PUSH
35230: LD_VAR 0 2
35234: ARRAY
35235: PUSH
35236: FOR_DOWNTO
35237: IFFALSE 35580
// begin if IsInUnit ( tmp ) then
35239: LD_VAR 0 7
35243: PPUSH
35244: CALL_OW 310
35248: IFFALSE 35259
// ComExitBuilding ( tmp ) ;
35250: LD_VAR 0 7
35254: PPUSH
35255: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
35259: LD_INT 35
35261: PPUSH
35262: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
35266: LD_VAR 0 7
35270: PPUSH
35271: CALL_OW 310
35275: NOT
35276: PUSH
35277: LD_VAR 0 7
35281: PPUSH
35282: CALL_OW 314
35286: NOT
35287: AND
35288: IFFALSE 35259
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
35290: LD_ADDR_VAR 0 6
35294: PUSH
35295: LD_VAR 0 7
35299: PPUSH
35300: CALL_OW 250
35304: PUSH
35305: LD_VAR 0 7
35309: PPUSH
35310: CALL_OW 251
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35319: LD_INT 35
35321: PPUSH
35322: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
35326: LD_ADDR_VAR 0 4
35330: PUSH
35331: LD_EXP 85
35335: PUSH
35336: LD_VAR 0 2
35340: ARRAY
35341: PUSH
35342: LD_VAR 0 3
35346: ARRAY
35347: PUSH
35348: LD_INT 1
35350: ARRAY
35351: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
35352: LD_ADDR_VAR 0 5
35356: PUSH
35357: LD_EXP 85
35361: PUSH
35362: LD_VAR 0 2
35366: ARRAY
35367: PUSH
35368: LD_VAR 0 3
35372: ARRAY
35373: PUSH
35374: LD_INT 2
35376: ARRAY
35377: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
35378: LD_VAR 0 7
35382: PPUSH
35383: LD_INT 10
35385: PPUSH
35386: CALL 53558 0 2
35390: PUSH
35391: LD_INT 4
35393: ARRAY
35394: IFFALSE 35432
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
35396: LD_VAR 0 7
35400: PPUSH
35401: LD_VAR 0 6
35405: PUSH
35406: LD_INT 1
35408: ARRAY
35409: PPUSH
35410: LD_VAR 0 6
35414: PUSH
35415: LD_INT 2
35417: ARRAY
35418: PPUSH
35419: CALL_OW 111
// wait ( 0 0$10 ) ;
35423: LD_INT 350
35425: PPUSH
35426: CALL_OW 67
// end else
35430: GO 35458
// begin ComMoveXY ( tmp , x , y ) ;
35432: LD_VAR 0 7
35436: PPUSH
35437: LD_VAR 0 4
35441: PPUSH
35442: LD_VAR 0 5
35446: PPUSH
35447: CALL_OW 111
// wait ( 0 0$3 ) ;
35451: LD_INT 105
35453: PPUSH
35454: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
35458: LD_VAR 0 7
35462: PPUSH
35463: LD_VAR 0 4
35467: PPUSH
35468: LD_VAR 0 5
35472: PPUSH
35473: CALL_OW 307
35477: IFFALSE 35319
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
35479: LD_VAR 0 7
35483: PPUSH
35484: LD_VAR 0 4
35488: PPUSH
35489: LD_VAR 0 5
35493: PPUSH
35494: LD_VAR 0 8
35498: PUSH
35499: LD_VAR 0 3
35503: ARRAY
35504: PPUSH
35505: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
35509: LD_INT 35
35511: PPUSH
35512: CALL_OW 67
// until not HasTask ( tmp ) ;
35516: LD_VAR 0 7
35520: PPUSH
35521: CALL_OW 314
35525: NOT
35526: IFFALSE 35509
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
35528: LD_ADDR_EXP 86
35532: PUSH
35533: LD_EXP 86
35537: PPUSH
35538: LD_VAR 0 2
35542: PUSH
35543: LD_EXP 86
35547: PUSH
35548: LD_VAR 0 2
35552: ARRAY
35553: PUSH
35554: LD_INT 1
35556: PLUS
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PPUSH
35562: LD_VAR 0 8
35566: PUSH
35567: LD_VAR 0 3
35571: ARRAY
35572: PPUSH
35573: CALL 50965 0 3
35577: ST_TO_ADDR
// end ;
35578: GO 35236
35580: POP
35581: POP
// MC_Reset ( i , 124 ) ;
35582: LD_VAR 0 2
35586: PPUSH
35587: LD_INT 124
35589: PPUSH
35590: CALL 19708 0 2
// end ; end ;
35594: GO 34991
35596: POP
35597: POP
// end ;
35598: LD_VAR 0 1
35602: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
35603: LD_INT 0
35605: PPUSH
35606: PPUSH
35607: PPUSH
// if not mc_bases then
35608: LD_EXP 50
35612: NOT
35613: IFFALSE 35617
// exit ;
35615: GO 36223
// for i = 1 to mc_bases do
35617: LD_ADDR_VAR 0 2
35621: PUSH
35622: DOUBLE
35623: LD_INT 1
35625: DEC
35626: ST_TO_ADDR
35627: LD_EXP 50
35631: PUSH
35632: FOR_TO
35633: IFFALSE 36221
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
35635: LD_ADDR_VAR 0 3
35639: PUSH
35640: LD_EXP 50
35644: PUSH
35645: LD_VAR 0 2
35649: ARRAY
35650: PPUSH
35651: LD_INT 25
35653: PUSH
35654: LD_INT 4
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PPUSH
35661: CALL_OW 72
35665: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35666: LD_VAR 0 3
35670: NOT
35671: PUSH
35672: LD_EXP 87
35676: PUSH
35677: LD_VAR 0 2
35681: ARRAY
35682: NOT
35683: OR
35684: PUSH
35685: LD_EXP 50
35689: PUSH
35690: LD_VAR 0 2
35694: ARRAY
35695: PPUSH
35696: LD_INT 2
35698: PUSH
35699: LD_INT 30
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 30
35711: PUSH
35712: LD_INT 1
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PPUSH
35724: CALL_OW 72
35728: NOT
35729: OR
35730: IFFALSE 35780
// begin if mc_deposits_finder [ i ] then
35732: LD_EXP 88
35736: PUSH
35737: LD_VAR 0 2
35741: ARRAY
35742: IFFALSE 35778
// begin MC_Reset ( i , 125 ) ;
35744: LD_VAR 0 2
35748: PPUSH
35749: LD_INT 125
35751: PPUSH
35752: CALL 19708 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35756: LD_ADDR_EXP 88
35760: PUSH
35761: LD_EXP 88
35765: PPUSH
35766: LD_VAR 0 2
35770: PPUSH
35771: EMPTY
35772: PPUSH
35773: CALL_OW 1
35777: ST_TO_ADDR
// end ; continue ;
35778: GO 35632
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
35780: LD_EXP 87
35784: PUSH
35785: LD_VAR 0 2
35789: ARRAY
35790: PUSH
35791: LD_INT 1
35793: ARRAY
35794: PUSH
35795: LD_INT 3
35797: ARRAY
35798: PUSH
35799: LD_INT 1
35801: EQUAL
35802: PUSH
35803: LD_INT 20
35805: PPUSH
35806: LD_EXP 76
35810: PUSH
35811: LD_VAR 0 2
35815: ARRAY
35816: PPUSH
35817: CALL_OW 321
35821: PUSH
35822: LD_INT 2
35824: NONEQUAL
35825: AND
35826: IFFALSE 35876
// begin if mc_deposits_finder [ i ] then
35828: LD_EXP 88
35832: PUSH
35833: LD_VAR 0 2
35837: ARRAY
35838: IFFALSE 35874
// begin MC_Reset ( i , 125 ) ;
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_INT 125
35847: PPUSH
35848: CALL 19708 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35852: LD_ADDR_EXP 88
35856: PUSH
35857: LD_EXP 88
35861: PPUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: EMPTY
35868: PPUSH
35869: CALL_OW 1
35873: ST_TO_ADDR
// end ; continue ;
35874: GO 35632
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
35876: LD_EXP 87
35880: PUSH
35881: LD_VAR 0 2
35885: ARRAY
35886: PUSH
35887: LD_INT 1
35889: ARRAY
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: PPUSH
35895: LD_EXP 87
35899: PUSH
35900: LD_VAR 0 2
35904: ARRAY
35905: PUSH
35906: LD_INT 1
35908: ARRAY
35909: PUSH
35910: LD_INT 2
35912: ARRAY
35913: PPUSH
35914: LD_EXP 76
35918: PUSH
35919: LD_VAR 0 2
35923: ARRAY
35924: PPUSH
35925: CALL_OW 440
35929: IFFALSE 35972
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
35931: LD_ADDR_EXP 87
35935: PUSH
35936: LD_EXP 87
35940: PPUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_EXP 87
35950: PUSH
35951: LD_VAR 0 2
35955: ARRAY
35956: PPUSH
35957: LD_INT 1
35959: PPUSH
35960: CALL_OW 3
35964: PPUSH
35965: CALL_OW 1
35969: ST_TO_ADDR
35970: GO 36219
// begin if not mc_deposits_finder [ i ] then
35972: LD_EXP 88
35976: PUSH
35977: LD_VAR 0 2
35981: ARRAY
35982: NOT
35983: IFFALSE 36035
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
35985: LD_ADDR_EXP 88
35989: PUSH
35990: LD_EXP 88
35994: PPUSH
35995: LD_VAR 0 2
35999: PPUSH
36000: LD_VAR 0 3
36004: PUSH
36005: LD_INT 1
36007: ARRAY
36008: PUSH
36009: EMPTY
36010: LIST
36011: PPUSH
36012: CALL_OW 1
36016: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
36017: LD_VAR 0 3
36021: PUSH
36022: LD_INT 1
36024: ARRAY
36025: PPUSH
36026: LD_INT 125
36028: PPUSH
36029: CALL_OW 109
// end else
36033: GO 36219
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
36035: LD_EXP 88
36039: PUSH
36040: LD_VAR 0 2
36044: ARRAY
36045: PUSH
36046: LD_INT 1
36048: ARRAY
36049: PPUSH
36050: CALL_OW 310
36054: IFFALSE 36077
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
36056: LD_EXP 88
36060: PUSH
36061: LD_VAR 0 2
36065: ARRAY
36066: PUSH
36067: LD_INT 1
36069: ARRAY
36070: PPUSH
36071: CALL_OW 122
36075: GO 36219
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
36077: LD_EXP 88
36081: PUSH
36082: LD_VAR 0 2
36086: ARRAY
36087: PUSH
36088: LD_INT 1
36090: ARRAY
36091: PPUSH
36092: CALL_OW 314
36096: NOT
36097: PUSH
36098: LD_EXP 88
36102: PUSH
36103: LD_VAR 0 2
36107: ARRAY
36108: PUSH
36109: LD_INT 1
36111: ARRAY
36112: PPUSH
36113: LD_EXP 87
36117: PUSH
36118: LD_VAR 0 2
36122: ARRAY
36123: PUSH
36124: LD_INT 1
36126: ARRAY
36127: PUSH
36128: LD_INT 1
36130: ARRAY
36131: PPUSH
36132: LD_EXP 87
36136: PUSH
36137: LD_VAR 0 2
36141: ARRAY
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: PUSH
36147: LD_INT 2
36149: ARRAY
36150: PPUSH
36151: CALL_OW 297
36155: PUSH
36156: LD_INT 6
36158: GREATER
36159: AND
36160: IFFALSE 36219
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
36162: LD_EXP 88
36166: PUSH
36167: LD_VAR 0 2
36171: ARRAY
36172: PUSH
36173: LD_INT 1
36175: ARRAY
36176: PPUSH
36177: LD_EXP 87
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_INT 1
36190: ARRAY
36191: PUSH
36192: LD_INT 1
36194: ARRAY
36195: PPUSH
36196: LD_EXP 87
36200: PUSH
36201: LD_VAR 0 2
36205: ARRAY
36206: PUSH
36207: LD_INT 1
36209: ARRAY
36210: PUSH
36211: LD_INT 2
36213: ARRAY
36214: PPUSH
36215: CALL_OW 111
// end ; end ; end ;
36219: GO 35632
36221: POP
36222: POP
// end ;
36223: LD_VAR 0 1
36227: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
// if not mc_bases then
36241: LD_EXP 50
36245: NOT
36246: IFFALSE 36250
// exit ;
36248: GO 36974
// for i = 1 to mc_bases do
36250: LD_ADDR_VAR 0 2
36254: PUSH
36255: DOUBLE
36256: LD_INT 1
36258: DEC
36259: ST_TO_ADDR
36260: LD_EXP 50
36264: PUSH
36265: FOR_TO
36266: IFFALSE 36972
// begin if not mc_bases [ i ] then
36268: LD_EXP 50
36272: PUSH
36273: LD_VAR 0 2
36277: ARRAY
36278: NOT
36279: IFFALSE 36283
// continue ;
36281: GO 36265
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
36283: LD_ADDR_VAR 0 7
36287: PUSH
36288: LD_EXP 50
36292: PUSH
36293: LD_VAR 0 2
36297: ARRAY
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PPUSH
36303: CALL_OW 248
36307: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
36308: LD_VAR 0 7
36312: PUSH
36313: LD_INT 3
36315: EQUAL
36316: PUSH
36317: LD_EXP 69
36321: PUSH
36322: LD_VAR 0 2
36326: ARRAY
36327: PUSH
36328: LD_EXP 72
36332: PUSH
36333: LD_VAR 0 2
36337: ARRAY
36338: UNION
36339: PPUSH
36340: LD_INT 33
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PPUSH
36350: CALL_OW 72
36354: NOT
36355: OR
36356: IFFALSE 36360
// continue ;
36358: GO 36265
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
36360: LD_ADDR_VAR 0 9
36364: PUSH
36365: LD_EXP 50
36369: PUSH
36370: LD_VAR 0 2
36374: ARRAY
36375: PPUSH
36376: LD_INT 30
36378: PUSH
36379: LD_INT 36
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PPUSH
36386: CALL_OW 72
36390: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
36391: LD_ADDR_VAR 0 10
36395: PUSH
36396: LD_EXP 69
36400: PUSH
36401: LD_VAR 0 2
36405: ARRAY
36406: PPUSH
36407: LD_INT 34
36409: PUSH
36410: LD_INT 31
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PPUSH
36417: CALL_OW 72
36421: ST_TO_ADDR
// if not cts and not mcts then
36422: LD_VAR 0 9
36426: NOT
36427: PUSH
36428: LD_VAR 0 10
36432: NOT
36433: AND
36434: IFFALSE 36438
// continue ;
36436: GO 36265
// x := cts ;
36438: LD_ADDR_VAR 0 11
36442: PUSH
36443: LD_VAR 0 9
36447: ST_TO_ADDR
// if not x then
36448: LD_VAR 0 11
36452: NOT
36453: IFFALSE 36465
// x := mcts ;
36455: LD_ADDR_VAR 0 11
36459: PUSH
36460: LD_VAR 0 10
36464: ST_TO_ADDR
// if mc_remote_driver [ i ] then
36465: LD_EXP 90
36469: PUSH
36470: LD_VAR 0 2
36474: ARRAY
36475: IFFALSE 36744
// for j in mc_remote_driver [ i ] do
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_EXP 90
36486: PUSH
36487: LD_VAR 0 2
36491: ARRAY
36492: PUSH
36493: FOR_IN
36494: IFFALSE 36742
// begin if GetClass ( j ) <> 3 then
36496: LD_VAR 0 3
36500: PPUSH
36501: CALL_OW 257
36505: PUSH
36506: LD_INT 3
36508: NONEQUAL
36509: IFFALSE 36562
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
36511: LD_ADDR_EXP 90
36515: PUSH
36516: LD_EXP 90
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_EXP 90
36530: PUSH
36531: LD_VAR 0 2
36535: ARRAY
36536: PUSH
36537: LD_VAR 0 3
36541: DIFF
36542: PPUSH
36543: CALL_OW 1
36547: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36548: LD_VAR 0 3
36552: PPUSH
36553: LD_INT 0
36555: PPUSH
36556: CALL_OW 109
// continue ;
36560: GO 36493
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
36562: LD_VAR 0 3
36566: PPUSH
36567: CALL_OW 310
36571: NOT
36572: PUSH
36573: LD_VAR 0 3
36577: PPUSH
36578: CALL_OW 310
36582: PPUSH
36583: CALL_OW 266
36587: PUSH
36588: LD_INT 36
36590: NONEQUAL
36591: PUSH
36592: LD_VAR 0 3
36596: PPUSH
36597: CALL 84250 0 1
36601: NOT
36602: AND
36603: OR
36604: IFFALSE 36740
// begin if IsInUnit ( j ) then
36606: LD_VAR 0 3
36610: PPUSH
36611: CALL_OW 310
36615: IFFALSE 36626
// ComExitBuilding ( j ) ;
36617: LD_VAR 0 3
36621: PPUSH
36622: CALL_OW 122
// ct := 0 ;
36626: LD_ADDR_VAR 0 8
36630: PUSH
36631: LD_INT 0
36633: ST_TO_ADDR
// for k in x do
36634: LD_ADDR_VAR 0 4
36638: PUSH
36639: LD_VAR 0 11
36643: PUSH
36644: FOR_IN
36645: IFFALSE 36718
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
36647: LD_VAR 0 4
36651: PPUSH
36652: CALL_OW 264
36656: PUSH
36657: LD_INT 31
36659: EQUAL
36660: PUSH
36661: LD_VAR 0 4
36665: PPUSH
36666: CALL_OW 311
36670: NOT
36671: AND
36672: PUSH
36673: LD_VAR 0 4
36677: PPUSH
36678: CALL_OW 266
36682: PUSH
36683: LD_INT 36
36685: EQUAL
36686: PUSH
36687: LD_VAR 0 4
36691: PPUSH
36692: CALL_OW 313
36696: PUSH
36697: LD_INT 3
36699: LESS
36700: AND
36701: OR
36702: IFFALSE 36716
// begin ct := k ;
36704: LD_ADDR_VAR 0 8
36708: PUSH
36709: LD_VAR 0 4
36713: ST_TO_ADDR
// break ;
36714: GO 36718
// end ;
36716: GO 36644
36718: POP
36719: POP
// if ct then
36720: LD_VAR 0 8
36724: IFFALSE 36740
// ComEnterUnit ( j , ct ) ;
36726: LD_VAR 0 3
36730: PPUSH
36731: LD_VAR 0 8
36735: PPUSH
36736: CALL_OW 120
// end ; end ;
36740: GO 36493
36742: POP
36743: POP
// places := 0 ;
36744: LD_ADDR_VAR 0 5
36748: PUSH
36749: LD_INT 0
36751: ST_TO_ADDR
// for j = 1 to x do
36752: LD_ADDR_VAR 0 3
36756: PUSH
36757: DOUBLE
36758: LD_INT 1
36760: DEC
36761: ST_TO_ADDR
36762: LD_VAR 0 11
36766: PUSH
36767: FOR_TO
36768: IFFALSE 36823
// if GetWeapon ( x [ j ] ) = ar_control_tower then
36770: LD_VAR 0 11
36774: PUSH
36775: LD_VAR 0 3
36779: ARRAY
36780: PPUSH
36781: CALL_OW 264
36785: PUSH
36786: LD_INT 31
36788: EQUAL
36789: IFFALSE 36807
// places := places + 1 else
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_VAR 0 5
36800: PUSH
36801: LD_INT 1
36803: PLUS
36804: ST_TO_ADDR
36805: GO 36821
// places := places + 3 ;
36807: LD_ADDR_VAR 0 5
36811: PUSH
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 3
36819: PLUS
36820: ST_TO_ADDR
36821: GO 36767
36823: POP
36824: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
36825: LD_ADDR_VAR 0 6
36829: PUSH
36830: LD_EXP 50
36834: PUSH
36835: LD_VAR 0 2
36839: ARRAY
36840: PPUSH
36841: LD_INT 25
36843: PUSH
36844: LD_INT 3
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PPUSH
36851: CALL_OW 72
36855: PUSH
36856: LD_EXP 90
36860: PUSH
36861: LD_VAR 0 2
36865: ARRAY
36866: DIFF
36867: PPUSH
36868: LD_INT 3
36870: PPUSH
36871: CALL 85150 0 2
36875: ST_TO_ADDR
// if not tmp then
36876: LD_VAR 0 6
36880: NOT
36881: IFFALSE 36885
// continue ;
36883: GO 36265
// places := places - mc_remote_driver [ i ] ;
36885: LD_ADDR_VAR 0 5
36889: PUSH
36890: LD_VAR 0 5
36894: PUSH
36895: LD_EXP 90
36899: PUSH
36900: LD_VAR 0 2
36904: ARRAY
36905: MINUS
36906: ST_TO_ADDR
// if places then
36907: LD_VAR 0 5
36911: IFFALSE 36970
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
36913: LD_ADDR_EXP 90
36917: PUSH
36918: LD_EXP 90
36922: PPUSH
36923: LD_VAR 0 2
36927: PPUSH
36928: LD_EXP 90
36932: PUSH
36933: LD_VAR 0 2
36937: ARRAY
36938: PUSH
36939: LD_VAR 0 6
36943: PUSH
36944: LD_INT 1
36946: ARRAY
36947: UNION
36948: PPUSH
36949: CALL_OW 1
36953: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
36954: LD_VAR 0 6
36958: PUSH
36959: LD_INT 1
36961: ARRAY
36962: PPUSH
36963: LD_INT 126
36965: PPUSH
36966: CALL_OW 109
// end ; end ;
36970: GO 36265
36972: POP
36973: POP
// end ;
36974: LD_VAR 0 1
36978: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
36979: LD_INT 0
36981: PPUSH
36982: PPUSH
36983: PPUSH
36984: PPUSH
36985: PPUSH
36986: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
36987: LD_VAR 0 1
36991: NOT
36992: PUSH
36993: LD_VAR 0 2
36997: NOT
36998: OR
36999: PUSH
37000: LD_VAR 0 3
37004: NOT
37005: OR
37006: PUSH
37007: LD_VAR 0 4
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: LD_INT 4
37023: PUSH
37024: LD_INT 5
37026: PUSH
37027: LD_INT 8
37029: PUSH
37030: LD_INT 9
37032: PUSH
37033: LD_INT 15
37035: PUSH
37036: LD_INT 16
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: IN
37050: NOT
37051: OR
37052: IFFALSE 37056
// exit ;
37054: GO 37956
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
37056: LD_ADDR_VAR 0 2
37060: PUSH
37061: LD_VAR 0 2
37065: PPUSH
37066: LD_INT 21
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 24
37078: PUSH
37079: LD_INT 250
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PPUSH
37090: CALL_OW 72
37094: ST_TO_ADDR
// case class of 1 , 15 :
37095: LD_VAR 0 4
37099: PUSH
37100: LD_INT 1
37102: DOUBLE
37103: EQUAL
37104: IFTRUE 37114
37106: LD_INT 15
37108: DOUBLE
37109: EQUAL
37110: IFTRUE 37114
37112: GO 37199
37114: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
37115: LD_ADDR_VAR 0 8
37119: PUSH
37120: LD_VAR 0 2
37124: PPUSH
37125: LD_INT 2
37127: PUSH
37128: LD_INT 30
37130: PUSH
37131: LD_INT 32
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 30
37140: PUSH
37141: LD_INT 31
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: LIST
37152: PPUSH
37153: CALL_OW 72
37157: PUSH
37158: LD_VAR 0 2
37162: PPUSH
37163: LD_INT 2
37165: PUSH
37166: LD_INT 30
37168: PUSH
37169: LD_INT 4
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 30
37178: PUSH
37179: LD_INT 5
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: LIST
37190: PPUSH
37191: CALL_OW 72
37195: ADD
37196: ST_TO_ADDR
37197: GO 37445
37199: LD_INT 2
37201: DOUBLE
37202: EQUAL
37203: IFTRUE 37213
37205: LD_INT 16
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37259
37213: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
37214: LD_ADDR_VAR 0 8
37218: PUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 30
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 30
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: PPUSH
37252: CALL_OW 72
37256: ST_TO_ADDR
37257: GO 37445
37259: LD_INT 3
37261: DOUBLE
37262: EQUAL
37263: IFTRUE 37267
37265: GO 37313
37267: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
37268: LD_ADDR_VAR 0 8
37272: PUSH
37273: LD_VAR 0 2
37277: PPUSH
37278: LD_INT 2
37280: PUSH
37281: LD_INT 30
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 30
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: PPUSH
37306: CALL_OW 72
37310: ST_TO_ADDR
37311: GO 37445
37313: LD_INT 4
37315: DOUBLE
37316: EQUAL
37317: IFTRUE 37321
37319: GO 37378
37321: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
37322: LD_ADDR_VAR 0 8
37326: PUSH
37327: LD_VAR 0 2
37331: PPUSH
37332: LD_INT 2
37334: PUSH
37335: LD_INT 30
37337: PUSH
37338: LD_INT 6
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 30
37347: PUSH
37348: LD_INT 7
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 30
37357: PUSH
37358: LD_INT 8
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: PPUSH
37371: CALL_OW 72
37375: ST_TO_ADDR
37376: GO 37445
37378: LD_INT 5
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37398
37384: LD_INT 8
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37398
37390: LD_INT 9
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37398
37396: GO 37444
37398: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
37399: LD_ADDR_VAR 0 8
37403: PUSH
37404: LD_VAR 0 2
37408: PPUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 30
37414: PUSH
37415: LD_INT 4
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 30
37424: PUSH
37425: LD_INT 5
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: PPUSH
37437: CALL_OW 72
37441: ST_TO_ADDR
37442: GO 37445
37444: POP
// if not tmp then
37445: LD_VAR 0 8
37449: NOT
37450: IFFALSE 37454
// exit ;
37452: GO 37956
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
37454: LD_VAR 0 4
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: LD_INT 15
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: IN
37469: PUSH
37470: LD_EXP 59
37474: PUSH
37475: LD_VAR 0 1
37479: ARRAY
37480: AND
37481: IFFALSE 37637
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
37483: LD_ADDR_VAR 0 9
37487: PUSH
37488: LD_EXP 59
37492: PUSH
37493: LD_VAR 0 1
37497: ARRAY
37498: PUSH
37499: LD_INT 1
37501: ARRAY
37502: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
37503: LD_VAR 0 9
37507: PUSH
37508: LD_EXP 60
37512: PUSH
37513: LD_VAR 0 1
37517: ARRAY
37518: IN
37519: NOT
37520: IFFALSE 37635
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
37522: LD_ADDR_EXP 60
37526: PUSH
37527: LD_EXP 60
37531: PPUSH
37532: LD_VAR 0 1
37536: PUSH
37537: LD_EXP 60
37541: PUSH
37542: LD_VAR 0 1
37546: ARRAY
37547: PUSH
37548: LD_INT 1
37550: PLUS
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PPUSH
37556: LD_VAR 0 9
37560: PPUSH
37561: CALL 50965 0 3
37565: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
37566: LD_ADDR_EXP 59
37570: PUSH
37571: LD_EXP 59
37575: PPUSH
37576: LD_VAR 0 1
37580: PPUSH
37581: LD_EXP 59
37585: PUSH
37586: LD_VAR 0 1
37590: ARRAY
37591: PUSH
37592: LD_VAR 0 9
37596: DIFF
37597: PPUSH
37598: CALL_OW 1
37602: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
37603: LD_VAR 0 3
37607: PPUSH
37608: LD_EXP 60
37612: PUSH
37613: LD_VAR 0 1
37617: ARRAY
37618: PUSH
37619: LD_EXP 60
37623: PUSH
37624: LD_VAR 0 1
37628: ARRAY
37629: ARRAY
37630: PPUSH
37631: CALL_OW 120
// end ; exit ;
37635: GO 37956
// end ; if tmp > 1 then
37637: LD_VAR 0 8
37641: PUSH
37642: LD_INT 1
37644: GREATER
37645: IFFALSE 37749
// for i = 2 to tmp do
37647: LD_ADDR_VAR 0 6
37651: PUSH
37652: DOUBLE
37653: LD_INT 2
37655: DEC
37656: ST_TO_ADDR
37657: LD_VAR 0 8
37661: PUSH
37662: FOR_TO
37663: IFFALSE 37747
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
37665: LD_VAR 0 8
37669: PUSH
37670: LD_VAR 0 6
37674: ARRAY
37675: PPUSH
37676: CALL_OW 461
37680: PUSH
37681: LD_INT 6
37683: EQUAL
37684: IFFALSE 37745
// begin x := tmp [ i ] ;
37686: LD_ADDR_VAR 0 9
37690: PUSH
37691: LD_VAR 0 8
37695: PUSH
37696: LD_VAR 0 6
37700: ARRAY
37701: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
37702: LD_ADDR_VAR 0 8
37706: PUSH
37707: LD_VAR 0 8
37711: PPUSH
37712: LD_VAR 0 6
37716: PPUSH
37717: CALL_OW 3
37721: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
37722: LD_ADDR_VAR 0 8
37726: PUSH
37727: LD_VAR 0 8
37731: PPUSH
37732: LD_INT 1
37734: PPUSH
37735: LD_VAR 0 9
37739: PPUSH
37740: CALL_OW 2
37744: ST_TO_ADDR
// end ;
37745: GO 37662
37747: POP
37748: POP
// for i in tmp do
37749: LD_ADDR_VAR 0 6
37753: PUSH
37754: LD_VAR 0 8
37758: PUSH
37759: FOR_IN
37760: IFFALSE 37829
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
37762: LD_VAR 0 6
37766: PPUSH
37767: CALL_OW 313
37771: PUSH
37772: LD_INT 6
37774: LESS
37775: PUSH
37776: LD_VAR 0 6
37780: PPUSH
37781: CALL_OW 266
37785: PUSH
37786: LD_INT 31
37788: PUSH
37789: LD_INT 32
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: IN
37796: NOT
37797: AND
37798: PUSH
37799: LD_VAR 0 6
37803: PPUSH
37804: CALL_OW 313
37808: PUSH
37809: LD_INT 0
37811: EQUAL
37812: OR
37813: IFFALSE 37827
// begin j := i ;
37815: LD_ADDR_VAR 0 7
37819: PUSH
37820: LD_VAR 0 6
37824: ST_TO_ADDR
// break ;
37825: GO 37829
// end ; end ;
37827: GO 37759
37829: POP
37830: POP
// if j then
37831: LD_VAR 0 7
37835: IFFALSE 37853
// ComEnterUnit ( unit , j ) else
37837: LD_VAR 0 3
37841: PPUSH
37842: LD_VAR 0 7
37846: PPUSH
37847: CALL_OW 120
37851: GO 37956
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37853: LD_ADDR_VAR 0 10
37857: PUSH
37858: LD_VAR 0 2
37862: PPUSH
37863: LD_INT 2
37865: PUSH
37866: LD_INT 30
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 30
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: LIST
37890: PPUSH
37891: CALL_OW 72
37895: ST_TO_ADDR
// if depot then
37896: LD_VAR 0 10
37900: IFFALSE 37956
// begin depot := NearestUnitToUnit ( depot , unit ) ;
37902: LD_ADDR_VAR 0 10
37906: PUSH
37907: LD_VAR 0 10
37911: PPUSH
37912: LD_VAR 0 3
37916: PPUSH
37917: CALL_OW 74
37921: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
37922: LD_VAR 0 3
37926: PPUSH
37927: LD_VAR 0 10
37931: PPUSH
37932: CALL_OW 296
37936: PUSH
37937: LD_INT 10
37939: GREATER
37940: IFFALSE 37956
// ComStandNearbyBuilding ( unit , depot ) ;
37942: LD_VAR 0 3
37946: PPUSH
37947: LD_VAR 0 10
37951: PPUSH
37952: CALL 45642 0 2
// end ; end ; end ;
37956: LD_VAR 0 5
37960: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
37961: LD_INT 0
37963: PPUSH
37964: PPUSH
37965: PPUSH
37966: PPUSH
// if not mc_bases then
37967: LD_EXP 50
37971: NOT
37972: IFFALSE 37976
// exit ;
37974: GO 38215
// for i = 1 to mc_bases do
37976: LD_ADDR_VAR 0 2
37980: PUSH
37981: DOUBLE
37982: LD_INT 1
37984: DEC
37985: ST_TO_ADDR
37986: LD_EXP 50
37990: PUSH
37991: FOR_TO
37992: IFFALSE 38213
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
37994: LD_ADDR_VAR 0 4
37998: PUSH
37999: LD_EXP 50
38003: PUSH
38004: LD_VAR 0 2
38008: ARRAY
38009: PPUSH
38010: LD_INT 21
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PPUSH
38020: CALL_OW 72
38024: PUSH
38025: LD_EXP 79
38029: PUSH
38030: LD_VAR 0 2
38034: ARRAY
38035: UNION
38036: ST_TO_ADDR
// if not tmp then
38037: LD_VAR 0 4
38041: NOT
38042: IFFALSE 38046
// continue ;
38044: GO 37991
// for j in tmp do
38046: LD_ADDR_VAR 0 3
38050: PUSH
38051: LD_VAR 0 4
38055: PUSH
38056: FOR_IN
38057: IFFALSE 38209
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
38059: LD_VAR 0 3
38063: PPUSH
38064: CALL_OW 110
38068: NOT
38069: PUSH
38070: LD_VAR 0 3
38074: PPUSH
38075: CALL_OW 314
38079: NOT
38080: AND
38081: PUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: CALL_OW 311
38091: NOT
38092: AND
38093: PUSH
38094: LD_VAR 0 3
38098: PPUSH
38099: CALL_OW 310
38103: NOT
38104: AND
38105: PUSH
38106: LD_VAR 0 3
38110: PUSH
38111: LD_EXP 53
38115: PUSH
38116: LD_VAR 0 2
38120: ARRAY
38121: PUSH
38122: LD_INT 1
38124: ARRAY
38125: IN
38126: NOT
38127: AND
38128: PUSH
38129: LD_VAR 0 3
38133: PUSH
38134: LD_EXP 53
38138: PUSH
38139: LD_VAR 0 2
38143: ARRAY
38144: PUSH
38145: LD_INT 2
38147: ARRAY
38148: IN
38149: NOT
38150: AND
38151: PUSH
38152: LD_VAR 0 3
38156: PUSH
38157: LD_EXP 62
38161: PUSH
38162: LD_VAR 0 2
38166: ARRAY
38167: IN
38168: NOT
38169: AND
38170: IFFALSE 38207
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
38172: LD_VAR 0 2
38176: PPUSH
38177: LD_EXP 50
38181: PUSH
38182: LD_VAR 0 2
38186: ARRAY
38187: PPUSH
38188: LD_VAR 0 3
38192: PPUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: CALL_OW 257
38202: PPUSH
38203: CALL 36979 0 4
// end ;
38207: GO 38056
38209: POP
38210: POP
// end ;
38211: GO 37991
38213: POP
38214: POP
// end ;
38215: LD_VAR 0 1
38219: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
38220: LD_INT 0
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
// if not mc_bases [ base ] then
38228: LD_EXP 50
38232: PUSH
38233: LD_VAR 0 1
38237: ARRAY
38238: NOT
38239: IFFALSE 38243
// exit ;
38241: GO 38425
// tmp := [ ] ;
38243: LD_ADDR_VAR 0 6
38247: PUSH
38248: EMPTY
38249: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
38250: LD_ADDR_VAR 0 7
38254: PUSH
38255: LD_VAR 0 3
38259: PPUSH
38260: LD_INT 0
38262: PPUSH
38263: CALL_OW 517
38267: ST_TO_ADDR
// if not list then
38268: LD_VAR 0 7
38272: NOT
38273: IFFALSE 38277
// exit ;
38275: GO 38425
// for i = 1 to amount do
38277: LD_ADDR_VAR 0 5
38281: PUSH
38282: DOUBLE
38283: LD_INT 1
38285: DEC
38286: ST_TO_ADDR
38287: LD_VAR 0 2
38291: PUSH
38292: FOR_TO
38293: IFFALSE 38373
// begin x := rand ( 1 , list [ 1 ] ) ;
38295: LD_ADDR_VAR 0 8
38299: PUSH
38300: LD_INT 1
38302: PPUSH
38303: LD_VAR 0 7
38307: PUSH
38308: LD_INT 1
38310: ARRAY
38311: PPUSH
38312: CALL_OW 12
38316: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
38317: LD_ADDR_VAR 0 6
38321: PUSH
38322: LD_VAR 0 6
38326: PPUSH
38327: LD_VAR 0 5
38331: PPUSH
38332: LD_VAR 0 7
38336: PUSH
38337: LD_INT 1
38339: ARRAY
38340: PUSH
38341: LD_VAR 0 8
38345: ARRAY
38346: PUSH
38347: LD_VAR 0 7
38351: PUSH
38352: LD_INT 2
38354: ARRAY
38355: PUSH
38356: LD_VAR 0 8
38360: ARRAY
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PPUSH
38366: CALL_OW 1
38370: ST_TO_ADDR
// end ;
38371: GO 38292
38373: POP
38374: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
38375: LD_ADDR_EXP 63
38379: PUSH
38380: LD_EXP 63
38384: PPUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_VAR 0 6
38394: PPUSH
38395: CALL_OW 1
38399: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
38400: LD_ADDR_EXP 65
38404: PUSH
38405: LD_EXP 65
38409: PPUSH
38410: LD_VAR 0 1
38414: PPUSH
38415: LD_VAR 0 3
38419: PPUSH
38420: CALL_OW 1
38424: ST_TO_ADDR
// end ;
38425: LD_VAR 0 4
38429: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
38430: LD_INT 0
38432: PPUSH
// if not mc_bases [ base ] then
38433: LD_EXP 50
38437: PUSH
38438: LD_VAR 0 1
38442: ARRAY
38443: NOT
38444: IFFALSE 38448
// exit ;
38446: GO 38473
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
38448: LD_ADDR_EXP 55
38452: PUSH
38453: LD_EXP 55
38457: PPUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: LD_VAR 0 2
38467: PPUSH
38468: CALL_OW 1
38472: ST_TO_ADDR
// end ;
38473: LD_VAR 0 3
38477: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
38478: LD_INT 0
38480: PPUSH
// if not mc_bases [ base ] then
38481: LD_EXP 50
38485: PUSH
38486: LD_VAR 0 1
38490: ARRAY
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 38533
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
38496: LD_ADDR_EXP 55
38500: PUSH
38501: LD_EXP 55
38505: PPUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: LD_EXP 55
38515: PUSH
38516: LD_VAR 0 1
38520: ARRAY
38521: PUSH
38522: LD_VAR 0 2
38526: UNION
38527: PPUSH
38528: CALL_OW 1
38532: ST_TO_ADDR
// end ;
38533: LD_VAR 0 3
38537: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
38538: LD_INT 0
38540: PPUSH
// if not mc_bases [ base ] then
38541: LD_EXP 50
38545: PUSH
38546: LD_VAR 0 1
38550: ARRAY
38551: NOT
38552: IFFALSE 38556
// exit ;
38554: GO 38581
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
38556: LD_ADDR_EXP 71
38560: PUSH
38561: LD_EXP 71
38565: PPUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: LD_VAR 0 2
38575: PPUSH
38576: CALL_OW 1
38580: ST_TO_ADDR
// end ;
38581: LD_VAR 0 3
38585: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
38586: LD_INT 0
38588: PPUSH
// if not mc_bases [ base ] then
38589: LD_EXP 50
38593: PUSH
38594: LD_VAR 0 1
38598: ARRAY
38599: NOT
38600: IFFALSE 38604
// exit ;
38602: GO 38641
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
38604: LD_ADDR_EXP 71
38608: PUSH
38609: LD_EXP 71
38613: PPUSH
38614: LD_VAR 0 1
38618: PPUSH
38619: LD_EXP 71
38623: PUSH
38624: LD_VAR 0 1
38628: ARRAY
38629: PUSH
38630: LD_VAR 0 2
38634: UNION
38635: PPUSH
38636: CALL_OW 1
38640: ST_TO_ADDR
// end ;
38641: LD_VAR 0 3
38645: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
38646: LD_INT 0
38648: PPUSH
// if not mc_bases [ base ] then
38649: LD_EXP 50
38653: PUSH
38654: LD_VAR 0 1
38658: ARRAY
38659: NOT
38660: IFFALSE 38664
// exit ;
38662: GO 38776
// mc_defender := Replace ( mc_defender , base , deflist ) ;
38664: LD_ADDR_EXP 72
38668: PUSH
38669: LD_EXP 72
38673: PPUSH
38674: LD_VAR 0 1
38678: PPUSH
38679: LD_VAR 0 2
38683: PPUSH
38684: CALL_OW 1
38688: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
38689: LD_ADDR_EXP 61
38693: PUSH
38694: LD_EXP 61
38698: PPUSH
38699: LD_VAR 0 1
38703: PPUSH
38704: LD_VAR 0 2
38708: PUSH
38709: LD_INT 0
38711: PLUS
38712: PPUSH
38713: CALL_OW 1
38717: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
38718: LD_ADDR_EXP 69
38722: PUSH
38723: LD_EXP 69
38727: PPUSH
38728: LD_VAR 0 1
38732: PPUSH
38733: LD_EXP 69
38737: PUSH
38738: LD_VAR 0 1
38742: ARRAY
38743: PUSH
38744: LD_EXP 72
38748: PUSH
38749: LD_VAR 0 1
38753: ARRAY
38754: PPUSH
38755: LD_INT 21
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PPUSH
38765: CALL_OW 72
38769: UNION
38770: PPUSH
38771: CALL_OW 1
38775: ST_TO_ADDR
// end ;
38776: LD_VAR 0 3
38780: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
38781: LD_INT 0
38783: PPUSH
// if not mc_bases [ base ] then
38784: LD_EXP 50
38788: PUSH
38789: LD_VAR 0 1
38793: ARRAY
38794: NOT
38795: IFFALSE 38799
// exit ;
38797: GO 38824
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
38799: LD_ADDR_EXP 61
38803: PUSH
38804: LD_EXP 61
38808: PPUSH
38809: LD_VAR 0 1
38813: PPUSH
38814: LD_VAR 0 2
38818: PPUSH
38819: CALL_OW 1
38823: ST_TO_ADDR
// end ;
38824: LD_VAR 0 3
38828: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
38829: LD_INT 0
38831: PPUSH
38832: PPUSH
38833: PPUSH
38834: PPUSH
// if not mc_bases [ base ] then
38835: LD_EXP 50
38839: PUSH
38840: LD_VAR 0 1
38844: ARRAY
38845: NOT
38846: IFFALSE 38850
// exit ;
38848: GO 38915
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
38850: LD_ADDR_EXP 70
38854: PUSH
38855: LD_EXP 70
38859: PPUSH
38860: LD_VAR 0 1
38864: PUSH
38865: LD_EXP 70
38869: PUSH
38870: LD_VAR 0 1
38874: ARRAY
38875: PUSH
38876: LD_INT 1
38878: PLUS
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PPUSH
38884: LD_VAR 0 1
38888: PUSH
38889: LD_VAR 0 2
38893: PUSH
38894: LD_VAR 0 3
38898: PUSH
38899: LD_VAR 0 4
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL 50965 0 3
38914: ST_TO_ADDR
// end ;
38915: LD_VAR 0 5
38919: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
38920: LD_INT 0
38922: PPUSH
// if not mc_bases [ base ] then
38923: LD_EXP 50
38927: PUSH
38928: LD_VAR 0 1
38932: ARRAY
38933: NOT
38934: IFFALSE 38938
// exit ;
38936: GO 38963
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
38938: LD_ADDR_EXP 87
38942: PUSH
38943: LD_EXP 87
38947: PPUSH
38948: LD_VAR 0 1
38952: PPUSH
38953: LD_VAR 0 2
38957: PPUSH
38958: CALL_OW 1
38962: ST_TO_ADDR
// end ;
38963: LD_VAR 0 3
38967: RET
// export function MC_GetMinesField ( base ) ; begin
38968: LD_INT 0
38970: PPUSH
// result := mc_mines [ base ] ;
38971: LD_ADDR_VAR 0 2
38975: PUSH
38976: LD_EXP 63
38980: PUSH
38981: LD_VAR 0 1
38985: ARRAY
38986: ST_TO_ADDR
// end ;
38987: LD_VAR 0 2
38991: RET
// export function MC_GetProduceList ( base ) ; begin
38992: LD_INT 0
38994: PPUSH
// result := mc_produce [ base ] ;
38995: LD_ADDR_VAR 0 2
38999: PUSH
39000: LD_EXP 71
39004: PUSH
39005: LD_VAR 0 1
39009: ARRAY
39010: ST_TO_ADDR
// end ;
39011: LD_VAR 0 2
39015: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
39016: LD_INT 0
39018: PPUSH
39019: PPUSH
// if not mc_bases then
39020: LD_EXP 50
39024: NOT
39025: IFFALSE 39029
// exit ;
39027: GO 39094
// if mc_bases [ base ] then
39029: LD_EXP 50
39033: PUSH
39034: LD_VAR 0 1
39038: ARRAY
39039: IFFALSE 39094
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39041: LD_ADDR_VAR 0 3
39045: PUSH
39046: LD_EXP 50
39050: PUSH
39051: LD_VAR 0 1
39055: ARRAY
39056: PPUSH
39057: LD_INT 30
39059: PUSH
39060: LD_VAR 0 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PPUSH
39069: CALL_OW 72
39073: ST_TO_ADDR
// if result then
39074: LD_VAR 0 3
39078: IFFALSE 39094
// result := result [ 1 ] ;
39080: LD_ADDR_VAR 0 3
39084: PUSH
39085: LD_VAR 0 3
39089: PUSH
39090: LD_INT 1
39092: ARRAY
39093: ST_TO_ADDR
// end ; end ;
39094: LD_VAR 0 3
39098: RET
// export function MC_SetTame ( base , area ) ; begin
39099: LD_INT 0
39101: PPUSH
// if not mc_bases or not base then
39102: LD_EXP 50
39106: NOT
39107: PUSH
39108: LD_VAR 0 1
39112: NOT
39113: OR
39114: IFFALSE 39118
// exit ;
39116: GO 39143
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
39118: LD_ADDR_EXP 78
39122: PUSH
39123: LD_EXP 78
39127: PPUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: LD_VAR 0 2
39137: PPUSH
39138: CALL_OW 1
39142: ST_TO_ADDR
// end ;
39143: LD_VAR 0 3
39147: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
39148: LD_INT 0
39150: PPUSH
39151: PPUSH
// if not mc_bases or not base then
39152: LD_EXP 50
39156: NOT
39157: PUSH
39158: LD_VAR 0 1
39162: NOT
39163: OR
39164: IFFALSE 39168
// exit ;
39166: GO 39270
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_EXP 50
39177: PUSH
39178: LD_VAR 0 1
39182: ARRAY
39183: PPUSH
39184: LD_INT 30
39186: PUSH
39187: LD_VAR 0 2
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PPUSH
39196: CALL_OW 72
39200: ST_TO_ADDR
// if not tmp then
39201: LD_VAR 0 4
39205: NOT
39206: IFFALSE 39210
// exit ;
39208: GO 39270
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
39210: LD_ADDR_EXP 82
39214: PUSH
39215: LD_EXP 82
39219: PPUSH
39220: LD_VAR 0 1
39224: PPUSH
39225: LD_EXP 82
39229: PUSH
39230: LD_VAR 0 1
39234: ARRAY
39235: PPUSH
39236: LD_EXP 82
39240: PUSH
39241: LD_VAR 0 1
39245: ARRAY
39246: PUSH
39247: LD_INT 1
39249: PLUS
39250: PPUSH
39251: LD_VAR 0 4
39255: PUSH
39256: LD_INT 1
39258: ARRAY
39259: PPUSH
39260: CALL_OW 2
39264: PPUSH
39265: CALL_OW 1
39269: ST_TO_ADDR
// end ;
39270: LD_VAR 0 3
39274: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
39275: LD_INT 0
39277: PPUSH
39278: PPUSH
// if not mc_bases or not base or not kinds then
39279: LD_EXP 50
39283: NOT
39284: PUSH
39285: LD_VAR 0 1
39289: NOT
39290: OR
39291: PUSH
39292: LD_VAR 0 2
39296: NOT
39297: OR
39298: IFFALSE 39302
// exit ;
39300: GO 39363
// for i in kinds do
39302: LD_ADDR_VAR 0 4
39306: PUSH
39307: LD_VAR 0 2
39311: PUSH
39312: FOR_IN
39313: IFFALSE 39361
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
39315: LD_ADDR_EXP 84
39319: PUSH
39320: LD_EXP 84
39324: PPUSH
39325: LD_VAR 0 1
39329: PUSH
39330: LD_EXP 84
39334: PUSH
39335: LD_VAR 0 1
39339: ARRAY
39340: PUSH
39341: LD_INT 1
39343: PLUS
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PPUSH
39349: LD_VAR 0 4
39353: PPUSH
39354: CALL 50965 0 3
39358: ST_TO_ADDR
39359: GO 39312
39361: POP
39362: POP
// end ;
39363: LD_VAR 0 3
39367: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
39368: LD_INT 0
39370: PPUSH
// if not mc_bases or not base or not areas then
39371: LD_EXP 50
39375: NOT
39376: PUSH
39377: LD_VAR 0 1
39381: NOT
39382: OR
39383: PUSH
39384: LD_VAR 0 2
39388: NOT
39389: OR
39390: IFFALSE 39394
// exit ;
39392: GO 39419
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
39394: LD_ADDR_EXP 68
39398: PUSH
39399: LD_EXP 68
39403: PPUSH
39404: LD_VAR 0 1
39408: PPUSH
39409: LD_VAR 0 2
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// end ;
39419: LD_VAR 0 3
39423: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
39424: LD_INT 0
39426: PPUSH
// if not mc_bases or not base or not teleports_exit then
39427: LD_EXP 50
39431: NOT
39432: PUSH
39433: LD_VAR 0 1
39437: NOT
39438: OR
39439: PUSH
39440: LD_VAR 0 2
39444: NOT
39445: OR
39446: IFFALSE 39450
// exit ;
39448: GO 39475
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
39450: LD_ADDR_EXP 85
39454: PUSH
39455: LD_EXP 85
39459: PPUSH
39460: LD_VAR 0 1
39464: PPUSH
39465: LD_VAR 0 2
39469: PPUSH
39470: CALL_OW 1
39474: ST_TO_ADDR
// end ;
39475: LD_VAR 0 3
39479: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
39480: LD_INT 0
39482: PPUSH
39483: PPUSH
39484: PPUSH
// if not mc_bases or not base or not ext_list then
39485: LD_EXP 50
39489: NOT
39490: PUSH
39491: LD_VAR 0 1
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 5
39502: NOT
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 39681
// tmp := GetFacExtXYD ( x , y , d ) ;
39508: LD_ADDR_VAR 0 8
39512: PUSH
39513: LD_VAR 0 2
39517: PPUSH
39518: LD_VAR 0 3
39522: PPUSH
39523: LD_VAR 0 4
39527: PPUSH
39528: CALL 84280 0 3
39532: ST_TO_ADDR
// if not tmp then
39533: LD_VAR 0 8
39537: NOT
39538: IFFALSE 39542
// exit ;
39540: GO 39681
// for i in tmp do
39542: LD_ADDR_VAR 0 7
39546: PUSH
39547: LD_VAR 0 8
39551: PUSH
39552: FOR_IN
39553: IFFALSE 39679
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
39555: LD_ADDR_EXP 55
39559: PUSH
39560: LD_EXP 55
39564: PPUSH
39565: LD_VAR 0 1
39569: PPUSH
39570: LD_EXP 55
39574: PUSH
39575: LD_VAR 0 1
39579: ARRAY
39580: PPUSH
39581: LD_EXP 55
39585: PUSH
39586: LD_VAR 0 1
39590: ARRAY
39591: PUSH
39592: LD_INT 1
39594: PLUS
39595: PPUSH
39596: LD_VAR 0 5
39600: PUSH
39601: LD_INT 1
39603: ARRAY
39604: PUSH
39605: LD_VAR 0 7
39609: PUSH
39610: LD_INT 1
39612: ARRAY
39613: PUSH
39614: LD_VAR 0 7
39618: PUSH
39619: LD_INT 2
39621: ARRAY
39622: PUSH
39623: LD_VAR 0 7
39627: PUSH
39628: LD_INT 3
39630: ARRAY
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: PPUSH
39638: CALL_OW 2
39642: PPUSH
39643: CALL_OW 1
39647: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
39648: LD_ADDR_VAR 0 5
39652: PUSH
39653: LD_VAR 0 5
39657: PPUSH
39658: LD_INT 1
39660: PPUSH
39661: CALL_OW 3
39665: ST_TO_ADDR
// if not ext_list then
39666: LD_VAR 0 5
39670: NOT
39671: IFFALSE 39677
// exit ;
39673: POP
39674: POP
39675: GO 39681
// end ;
39677: GO 39552
39679: POP
39680: POP
// end ;
39681: LD_VAR 0 6
39685: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
39686: LD_INT 0
39688: PPUSH
// if not mc_bases or not base or not weapon_list then
39689: LD_EXP 50
39693: NOT
39694: PUSH
39695: LD_VAR 0 1
39699: NOT
39700: OR
39701: PUSH
39702: LD_VAR 0 2
39706: NOT
39707: OR
39708: IFFALSE 39712
// exit ;
39710: GO 39737
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
39712: LD_ADDR_EXP 89
39716: PUSH
39717: LD_EXP 89
39721: PPUSH
39722: LD_VAR 0 1
39726: PPUSH
39727: LD_VAR 0 2
39731: PPUSH
39732: CALL_OW 1
39736: ST_TO_ADDR
// end ;
39737: LD_VAR 0 3
39741: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
39742: LD_INT 0
39744: PPUSH
// if not mc_bases or not base or not tech_list then
39745: LD_EXP 50
39749: NOT
39750: PUSH
39751: LD_VAR 0 1
39755: NOT
39756: OR
39757: PUSH
39758: LD_VAR 0 2
39762: NOT
39763: OR
39764: IFFALSE 39768
// exit ;
39766: GO 39793
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
39768: LD_ADDR_EXP 77
39772: PUSH
39773: LD_EXP 77
39777: PPUSH
39778: LD_VAR 0 1
39782: PPUSH
39783: LD_VAR 0 2
39787: PPUSH
39788: CALL_OW 1
39792: ST_TO_ADDR
// end ;
39793: LD_VAR 0 3
39797: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
39798: LD_INT 0
39800: PPUSH
// if not mc_bases or not parking_area or not base then
39801: LD_EXP 50
39805: NOT
39806: PUSH
39807: LD_VAR 0 2
39811: NOT
39812: OR
39813: PUSH
39814: LD_VAR 0 1
39818: NOT
39819: OR
39820: IFFALSE 39824
// exit ;
39822: GO 39849
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
39824: LD_ADDR_EXP 74
39828: PUSH
39829: LD_EXP 74
39833: PPUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: LD_VAR 0 2
39843: PPUSH
39844: CALL_OW 1
39848: ST_TO_ADDR
// end ;
39849: LD_VAR 0 3
39853: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
39854: LD_INT 0
39856: PPUSH
// if not mc_bases or not base or not scan_area then
39857: LD_EXP 50
39861: NOT
39862: PUSH
39863: LD_VAR 0 1
39867: NOT
39868: OR
39869: PUSH
39870: LD_VAR 0 2
39874: NOT
39875: OR
39876: IFFALSE 39880
// exit ;
39878: GO 39905
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
39880: LD_ADDR_EXP 75
39884: PUSH
39885: LD_EXP 75
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: LD_VAR 0 2
39899: PPUSH
39900: CALL_OW 1
39904: ST_TO_ADDR
// end ;
39905: LD_VAR 0 3
39909: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
39910: LD_INT 0
39912: PPUSH
39913: PPUSH
// if not mc_bases or not base then
39914: LD_EXP 50
39918: NOT
39919: PUSH
39920: LD_VAR 0 1
39924: NOT
39925: OR
39926: IFFALSE 39930
// exit ;
39928: GO 39994
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: LD_INT 3
39943: PUSH
39944: LD_INT 4
39946: PUSH
39947: LD_INT 11
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
39957: LD_ADDR_EXP 77
39961: PUSH
39962: LD_EXP 77
39966: PPUSH
39967: LD_VAR 0 1
39971: PPUSH
39972: LD_EXP 77
39976: PUSH
39977: LD_VAR 0 1
39981: ARRAY
39982: PUSH
39983: LD_VAR 0 3
39987: DIFF
39988: PPUSH
39989: CALL_OW 1
39993: ST_TO_ADDR
// end ; end_of_file
39994: LD_VAR 0 2
39998: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
39999: LD_INT 0
40001: PPUSH
40002: PPUSH
40003: PPUSH
// if not mc_bases then
40004: LD_EXP 50
40008: NOT
40009: IFFALSE 40013
// exit ;
40011: GO 40178
// for i = 1 to mc_bases do
40013: LD_ADDR_VAR 0 4
40017: PUSH
40018: DOUBLE
40019: LD_INT 1
40021: DEC
40022: ST_TO_ADDR
40023: LD_EXP 50
40027: PUSH
40028: FOR_TO
40029: IFFALSE 40176
// begin if sci in mc_bases [ i ] then
40031: LD_VAR 0 2
40035: PUSH
40036: LD_EXP 50
40040: PUSH
40041: LD_VAR 0 4
40045: ARRAY
40046: IN
40047: IFFALSE 40174
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
40049: LD_ADDR_EXP 79
40053: PUSH
40054: LD_EXP 79
40058: PPUSH
40059: LD_VAR 0 4
40063: PUSH
40064: LD_EXP 79
40068: PUSH
40069: LD_VAR 0 4
40073: ARRAY
40074: PUSH
40075: LD_INT 1
40077: PLUS
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PPUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL 50965 0 3
40092: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
40093: LD_ADDR_VAR 0 5
40097: PUSH
40098: LD_EXP 50
40102: PUSH
40103: LD_VAR 0 4
40107: ARRAY
40108: PPUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 30
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: PPUSH
40137: CALL_OW 72
40141: PPUSH
40142: LD_VAR 0 1
40146: PPUSH
40147: CALL_OW 74
40151: ST_TO_ADDR
// if tmp then
40152: LD_VAR 0 5
40156: IFFALSE 40172
// ComStandNearbyBuilding ( ape , tmp ) ;
40158: LD_VAR 0 1
40162: PPUSH
40163: LD_VAR 0 5
40167: PPUSH
40168: CALL 45642 0 2
// break ;
40172: GO 40176
// end ; end ;
40174: GO 40028
40176: POP
40177: POP
// end ;
40178: LD_VAR 0 3
40182: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
40183: LD_INT 0
40185: PPUSH
40186: PPUSH
40187: PPUSH
// if not mc_bases then
40188: LD_EXP 50
40192: NOT
40193: IFFALSE 40197
// exit ;
40195: GO 40286
// for i = 1 to mc_bases do
40197: LD_ADDR_VAR 0 4
40201: PUSH
40202: DOUBLE
40203: LD_INT 1
40205: DEC
40206: ST_TO_ADDR
40207: LD_EXP 50
40211: PUSH
40212: FOR_TO
40213: IFFALSE 40284
// begin if building in mc_busy_turret_list [ i ] then
40215: LD_VAR 0 1
40219: PUSH
40220: LD_EXP 60
40224: PUSH
40225: LD_VAR 0 4
40229: ARRAY
40230: IN
40231: IFFALSE 40282
// begin tmp := mc_busy_turret_list [ i ] diff building ;
40233: LD_ADDR_VAR 0 5
40237: PUSH
40238: LD_EXP 60
40242: PUSH
40243: LD_VAR 0 4
40247: ARRAY
40248: PUSH
40249: LD_VAR 0 1
40253: DIFF
40254: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
40255: LD_ADDR_EXP 60
40259: PUSH
40260: LD_EXP 60
40264: PPUSH
40265: LD_VAR 0 4
40269: PPUSH
40270: LD_VAR 0 5
40274: PPUSH
40275: CALL_OW 1
40279: ST_TO_ADDR
// break ;
40280: GO 40284
// end ; end ;
40282: GO 40212
40284: POP
40285: POP
// end ;
40286: LD_VAR 0 3
40290: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
40291: LD_INT 0
40293: PPUSH
40294: PPUSH
40295: PPUSH
// if not mc_bases then
40296: LD_EXP 50
40300: NOT
40301: IFFALSE 40305
// exit ;
40303: GO 40504
// for i = 1 to mc_bases do
40305: LD_ADDR_VAR 0 5
40309: PUSH
40310: DOUBLE
40311: LD_INT 1
40313: DEC
40314: ST_TO_ADDR
40315: LD_EXP 50
40319: PUSH
40320: FOR_TO
40321: IFFALSE 40502
// if building in mc_bases [ i ] then
40323: LD_VAR 0 1
40327: PUSH
40328: LD_EXP 50
40332: PUSH
40333: LD_VAR 0 5
40337: ARRAY
40338: IN
40339: IFFALSE 40500
// begin tmp := mc_bases [ i ] diff building ;
40341: LD_ADDR_VAR 0 6
40345: PUSH
40346: LD_EXP 50
40350: PUSH
40351: LD_VAR 0 5
40355: ARRAY
40356: PUSH
40357: LD_VAR 0 1
40361: DIFF
40362: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
40363: LD_ADDR_EXP 50
40367: PUSH
40368: LD_EXP 50
40372: PPUSH
40373: LD_VAR 0 5
40377: PPUSH
40378: LD_VAR 0 6
40382: PPUSH
40383: CALL_OW 1
40387: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
40388: LD_VAR 0 1
40392: PUSH
40393: LD_EXP 58
40397: PUSH
40398: LD_VAR 0 5
40402: ARRAY
40403: IN
40404: IFFALSE 40443
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
40406: LD_ADDR_EXP 58
40410: PUSH
40411: LD_EXP 58
40415: PPUSH
40416: LD_VAR 0 5
40420: PPUSH
40421: LD_EXP 58
40425: PUSH
40426: LD_VAR 0 5
40430: ARRAY
40431: PUSH
40432: LD_VAR 0 1
40436: DIFF
40437: PPUSH
40438: CALL_OW 1
40442: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
40443: LD_VAR 0 1
40447: PUSH
40448: LD_EXP 59
40452: PUSH
40453: LD_VAR 0 5
40457: ARRAY
40458: IN
40459: IFFALSE 40498
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
40461: LD_ADDR_EXP 59
40465: PUSH
40466: LD_EXP 59
40470: PPUSH
40471: LD_VAR 0 5
40475: PPUSH
40476: LD_EXP 59
40480: PUSH
40481: LD_VAR 0 5
40485: ARRAY
40486: PUSH
40487: LD_VAR 0 1
40491: DIFF
40492: PPUSH
40493: CALL_OW 1
40497: ST_TO_ADDR
// break ;
40498: GO 40502
// end ;
40500: GO 40320
40502: POP
40503: POP
// end ;
40504: LD_VAR 0 4
40508: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
40509: LD_INT 0
40511: PPUSH
40512: PPUSH
40513: PPUSH
// if not mc_bases or not side in mc_sides then
40514: LD_EXP 50
40518: NOT
40519: PUSH
40520: LD_VAR 0 3
40524: PUSH
40525: LD_EXP 76
40529: IN
40530: NOT
40531: OR
40532: IFFALSE 40536
// exit ;
40534: GO 40659
// for i = 1 to mc_vehicles do
40536: LD_ADDR_VAR 0 6
40540: PUSH
40541: DOUBLE
40542: LD_INT 1
40544: DEC
40545: ST_TO_ADDR
40546: LD_EXP 69
40550: PUSH
40551: FOR_TO
40552: IFFALSE 40657
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
40554: LD_VAR 0 2
40558: PUSH
40559: LD_EXP 69
40563: PUSH
40564: LD_VAR 0 6
40568: ARRAY
40569: IN
40570: PUSH
40571: LD_VAR 0 1
40575: PUSH
40576: LD_EXP 69
40580: PUSH
40581: LD_VAR 0 6
40585: ARRAY
40586: IN
40587: OR
40588: IFFALSE 40655
// begin tmp := mc_vehicles [ i ] diff old ;
40590: LD_ADDR_VAR 0 7
40594: PUSH
40595: LD_EXP 69
40599: PUSH
40600: LD_VAR 0 6
40604: ARRAY
40605: PUSH
40606: LD_VAR 0 2
40610: DIFF
40611: ST_TO_ADDR
// tmp := tmp diff new ;
40612: LD_ADDR_VAR 0 7
40616: PUSH
40617: LD_VAR 0 7
40621: PUSH
40622: LD_VAR 0 1
40626: DIFF
40627: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
40628: LD_ADDR_EXP 69
40632: PUSH
40633: LD_EXP 69
40637: PPUSH
40638: LD_VAR 0 6
40642: PPUSH
40643: LD_VAR 0 7
40647: PPUSH
40648: CALL_OW 1
40652: ST_TO_ADDR
// break ;
40653: GO 40657
// end ;
40655: GO 40551
40657: POP
40658: POP
// end ;
40659: LD_VAR 0 5
40663: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
40664: LD_INT 0
40666: PPUSH
40667: PPUSH
40668: PPUSH
40669: PPUSH
// if not mc_bases then
40670: LD_EXP 50
40674: NOT
40675: IFFALSE 40679
// exit ;
40677: GO 41062
// side := GetSide ( vehicle ) ;
40679: LD_ADDR_VAR 0 5
40683: PUSH
40684: LD_VAR 0 1
40688: PPUSH
40689: CALL_OW 255
40693: ST_TO_ADDR
// for i = 1 to mc_bases do
40694: LD_ADDR_VAR 0 4
40698: PUSH
40699: DOUBLE
40700: LD_INT 1
40702: DEC
40703: ST_TO_ADDR
40704: LD_EXP 50
40708: PUSH
40709: FOR_TO
40710: IFFALSE 41060
// begin if factory in mc_bases [ i ] then
40712: LD_VAR 0 2
40716: PUSH
40717: LD_EXP 50
40721: PUSH
40722: LD_VAR 0 4
40726: ARRAY
40727: IN
40728: IFFALSE 41058
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
40730: LD_EXP 72
40734: PUSH
40735: LD_VAR 0 4
40739: ARRAY
40740: PUSH
40741: LD_EXP 61
40745: PUSH
40746: LD_VAR 0 4
40750: ARRAY
40751: LESS
40752: PUSH
40753: LD_VAR 0 1
40757: PPUSH
40758: CALL_OW 264
40762: PUSH
40763: LD_INT 31
40765: PUSH
40766: LD_INT 32
40768: PUSH
40769: LD_INT 51
40771: PUSH
40772: LD_EXP 94
40776: PUSH
40777: LD_INT 12
40779: PUSH
40780: LD_INT 30
40782: PUSH
40783: LD_EXP 93
40787: PUSH
40788: LD_INT 11
40790: PUSH
40791: LD_INT 53
40793: PUSH
40794: LD_INT 14
40796: PUSH
40797: LD_EXP 97
40801: PUSH
40802: LD_INT 29
40804: PUSH
40805: LD_EXP 95
40809: PUSH
40810: LD_INT 13
40812: PUSH
40813: LD_INT 52
40815: PUSH
40816: LD_INT 48
40818: PUSH
40819: LD_INT 8
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: IN
40841: NOT
40842: AND
40843: IFFALSE 40884
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
40845: LD_ADDR_EXP 72
40849: PUSH
40850: LD_EXP 72
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: LD_EXP 72
40864: PUSH
40865: LD_VAR 0 4
40869: ARRAY
40870: PUSH
40871: LD_VAR 0 1
40875: ADD
40876: PPUSH
40877: CALL_OW 1
40881: ST_TO_ADDR
40882: GO 40928
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
40884: LD_ADDR_EXP 69
40888: PUSH
40889: LD_EXP 69
40893: PPUSH
40894: LD_VAR 0 4
40898: PUSH
40899: LD_EXP 69
40903: PUSH
40904: LD_VAR 0 4
40908: ARRAY
40909: PUSH
40910: LD_INT 1
40912: PLUS
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PPUSH
40918: LD_VAR 0 1
40922: PPUSH
40923: CALL 50965 0 3
40927: ST_TO_ADDR
// if not mc_scan [ i ] then
40928: LD_EXP 73
40932: PUSH
40933: LD_VAR 0 4
40937: ARRAY
40938: NOT
40939: IFFALSE 41058
// begin if GetControl ( vehicle ) = control_remote then
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 263
40950: PUSH
40951: LD_INT 2
40953: EQUAL
40954: IFFALSE 40974
// repeat wait ( 0 0$1 ) ;
40956: LD_INT 35
40958: PPUSH
40959: CALL_OW 67
// until IsControledBy ( vehicle ) ;
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 312
40972: IFFALSE 40956
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
40974: LD_VAR 0 1
40978: PPUSH
40979: LD_EXP 74
40983: PUSH
40984: LD_VAR 0 4
40988: ARRAY
40989: PPUSH
40990: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 263
41003: PUSH
41004: LD_INT 1
41006: NONEQUAL
41007: IFFALSE 41011
// break ;
41009: GO 41060
// repeat wait ( 0 0$1 ) ;
41011: LD_INT 35
41013: PPUSH
41014: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
41018: LD_VAR 0 1
41022: PPUSH
41023: LD_EXP 74
41027: PUSH
41028: LD_VAR 0 4
41032: ARRAY
41033: PPUSH
41034: CALL_OW 308
41038: IFFALSE 41011
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
41040: LD_VAR 0 1
41044: PPUSH
41045: CALL_OW 311
41049: PPUSH
41050: CALL_OW 121
// exit ;
41054: POP
41055: POP
41056: GO 41062
// end ; end ; end ;
41058: GO 40709
41060: POP
41061: POP
// end ;
41062: LD_VAR 0 3
41066: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
41067: LD_INT 0
41069: PPUSH
41070: PPUSH
41071: PPUSH
41072: PPUSH
// if not mc_bases then
41073: LD_EXP 50
41077: NOT
41078: IFFALSE 41082
// exit ;
41080: GO 41435
// repeat wait ( 0 0$1 ) ;
41082: LD_INT 35
41084: PPUSH
41085: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
41089: LD_VAR 0 2
41093: PPUSH
41094: LD_VAR 0 3
41098: PPUSH
41099: CALL_OW 284
41103: IFFALSE 41082
// if GetResourceTypeXY ( x , y ) = mat_artefact then
41105: LD_VAR 0 2
41109: PPUSH
41110: LD_VAR 0 3
41114: PPUSH
41115: CALL_OW 283
41119: PUSH
41120: LD_INT 4
41122: EQUAL
41123: IFFALSE 41127
// exit ;
41125: GO 41435
// for i = 1 to mc_bases do
41127: LD_ADDR_VAR 0 7
41131: PUSH
41132: DOUBLE
41133: LD_INT 1
41135: DEC
41136: ST_TO_ADDR
41137: LD_EXP 50
41141: PUSH
41142: FOR_TO
41143: IFFALSE 41433
// begin if mc_crates_area [ i ] then
41145: LD_EXP 68
41149: PUSH
41150: LD_VAR 0 7
41154: ARRAY
41155: IFFALSE 41266
// for j in mc_crates_area [ i ] do
41157: LD_ADDR_VAR 0 8
41161: PUSH
41162: LD_EXP 68
41166: PUSH
41167: LD_VAR 0 7
41171: ARRAY
41172: PUSH
41173: FOR_IN
41174: IFFALSE 41264
// if InArea ( x , y , j ) then
41176: LD_VAR 0 2
41180: PPUSH
41181: LD_VAR 0 3
41185: PPUSH
41186: LD_VAR 0 8
41190: PPUSH
41191: CALL_OW 309
41195: IFFALSE 41262
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41197: LD_ADDR_EXP 66
41201: PUSH
41202: LD_EXP 66
41206: PPUSH
41207: LD_VAR 0 7
41211: PUSH
41212: LD_EXP 66
41216: PUSH
41217: LD_VAR 0 7
41221: ARRAY
41222: PUSH
41223: LD_INT 1
41225: PLUS
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PPUSH
41231: LD_VAR 0 4
41235: PUSH
41236: LD_VAR 0 2
41240: PUSH
41241: LD_VAR 0 3
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: LIST
41250: PPUSH
41251: CALL 50965 0 3
41255: ST_TO_ADDR
// exit ;
41256: POP
41257: POP
41258: POP
41259: POP
41260: GO 41435
// end ;
41262: GO 41173
41264: POP
41265: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41266: LD_ADDR_VAR 0 9
41270: PUSH
41271: LD_EXP 50
41275: PUSH
41276: LD_VAR 0 7
41280: ARRAY
41281: PPUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 30
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 30
41297: PUSH
41298: LD_INT 1
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: PPUSH
41310: CALL_OW 72
41314: ST_TO_ADDR
// if not depot then
41315: LD_VAR 0 9
41319: NOT
41320: IFFALSE 41324
// continue ;
41322: GO 41142
// for j in depot do
41324: LD_ADDR_VAR 0 8
41328: PUSH
41329: LD_VAR 0 9
41333: PUSH
41334: FOR_IN
41335: IFFALSE 41429
// if GetDistUnitXY ( j , x , y ) < 30 then
41337: LD_VAR 0 8
41341: PPUSH
41342: LD_VAR 0 2
41346: PPUSH
41347: LD_VAR 0 3
41351: PPUSH
41352: CALL_OW 297
41356: PUSH
41357: LD_INT 30
41359: LESS
41360: IFFALSE 41427
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41362: LD_ADDR_EXP 66
41366: PUSH
41367: LD_EXP 66
41371: PPUSH
41372: LD_VAR 0 7
41376: PUSH
41377: LD_EXP 66
41381: PUSH
41382: LD_VAR 0 7
41386: ARRAY
41387: PUSH
41388: LD_INT 1
41390: PLUS
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PPUSH
41396: LD_VAR 0 4
41400: PUSH
41401: LD_VAR 0 2
41405: PUSH
41406: LD_VAR 0 3
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: PPUSH
41416: CALL 50965 0 3
41420: ST_TO_ADDR
// exit ;
41421: POP
41422: POP
41423: POP
41424: POP
41425: GO 41435
// end ;
41427: GO 41334
41429: POP
41430: POP
// end ;
41431: GO 41142
41433: POP
41434: POP
// end ;
41435: LD_VAR 0 6
41439: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
41440: LD_INT 0
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
// side := GetSide ( lab ) ;
41446: LD_ADDR_VAR 0 4
41450: PUSH
41451: LD_VAR 0 2
41455: PPUSH
41456: CALL_OW 255
41460: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
41461: LD_VAR 0 4
41465: PUSH
41466: LD_EXP 76
41470: IN
41471: NOT
41472: PUSH
41473: LD_EXP 77
41477: NOT
41478: OR
41479: PUSH
41480: LD_EXP 50
41484: NOT
41485: OR
41486: IFFALSE 41490
// exit ;
41488: GO 41723
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
41490: LD_ADDR_EXP 77
41494: PUSH
41495: LD_EXP 77
41499: PPUSH
41500: LD_VAR 0 4
41504: PPUSH
41505: LD_EXP 77
41509: PUSH
41510: LD_VAR 0 4
41514: ARRAY
41515: PUSH
41516: LD_VAR 0 1
41520: DIFF
41521: PPUSH
41522: CALL_OW 1
41526: ST_TO_ADDR
// for i = 1 to mc_bases do
41527: LD_ADDR_VAR 0 5
41531: PUSH
41532: DOUBLE
41533: LD_INT 1
41535: DEC
41536: ST_TO_ADDR
41537: LD_EXP 50
41541: PUSH
41542: FOR_TO
41543: IFFALSE 41721
// begin if lab in mc_bases [ i ] then
41545: LD_VAR 0 2
41549: PUSH
41550: LD_EXP 50
41554: PUSH
41555: LD_VAR 0 5
41559: ARRAY
41560: IN
41561: IFFALSE 41719
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
41563: LD_VAR 0 1
41567: PUSH
41568: LD_INT 11
41570: PUSH
41571: LD_INT 4
41573: PUSH
41574: LD_INT 3
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: IN
41586: PUSH
41587: LD_EXP 80
41591: PUSH
41592: LD_VAR 0 5
41596: ARRAY
41597: AND
41598: IFFALSE 41719
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
41600: LD_ADDR_VAR 0 6
41604: PUSH
41605: LD_EXP 80
41609: PUSH
41610: LD_VAR 0 5
41614: ARRAY
41615: PUSH
41616: LD_INT 1
41618: ARRAY
41619: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41620: LD_ADDR_EXP 80
41624: PUSH
41625: LD_EXP 80
41629: PPUSH
41630: LD_VAR 0 5
41634: PPUSH
41635: EMPTY
41636: PPUSH
41637: CALL_OW 1
41641: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
41642: LD_VAR 0 6
41646: PPUSH
41647: LD_INT 0
41649: PPUSH
41650: CALL_OW 109
// ComExitBuilding ( tmp ) ;
41654: LD_VAR 0 6
41658: PPUSH
41659: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
41663: LD_ADDR_EXP 79
41667: PUSH
41668: LD_EXP 79
41672: PPUSH
41673: LD_VAR 0 5
41677: PPUSH
41678: LD_EXP 79
41682: PUSH
41683: LD_VAR 0 5
41687: ARRAY
41688: PPUSH
41689: LD_INT 1
41691: PPUSH
41692: LD_VAR 0 6
41696: PPUSH
41697: CALL_OW 2
41701: PPUSH
41702: CALL_OW 1
41706: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
41707: LD_VAR 0 5
41711: PPUSH
41712: LD_INT 112
41714: PPUSH
41715: CALL 19708 0 2
// end ; end ; end ;
41719: GO 41542
41721: POP
41722: POP
// end ;
41723: LD_VAR 0 3
41727: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
41728: LD_INT 0
41730: PPUSH
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
41737: PPUSH
// if not mc_bases then
41738: LD_EXP 50
41742: NOT
41743: IFFALSE 41747
// exit ;
41745: GO 42690
// for i = 1 to mc_bases do
41747: LD_ADDR_VAR 0 3
41751: PUSH
41752: DOUBLE
41753: LD_INT 1
41755: DEC
41756: ST_TO_ADDR
41757: LD_EXP 50
41761: PUSH
41762: FOR_TO
41763: IFFALSE 42688
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
41765: LD_VAR 0 1
41769: PUSH
41770: LD_EXP 50
41774: PUSH
41775: LD_VAR 0 3
41779: ARRAY
41780: IN
41781: PUSH
41782: LD_VAR 0 1
41786: PUSH
41787: LD_EXP 57
41791: PUSH
41792: LD_VAR 0 3
41796: ARRAY
41797: IN
41798: OR
41799: PUSH
41800: LD_VAR 0 1
41804: PUSH
41805: LD_EXP 69
41809: PUSH
41810: LD_VAR 0 3
41814: ARRAY
41815: IN
41816: OR
41817: PUSH
41818: LD_VAR 0 1
41822: PUSH
41823: LD_EXP 79
41827: PUSH
41828: LD_VAR 0 3
41832: ARRAY
41833: IN
41834: OR
41835: PUSH
41836: LD_VAR 0 1
41840: PUSH
41841: LD_EXP 80
41845: PUSH
41846: LD_VAR 0 3
41850: ARRAY
41851: IN
41852: OR
41853: IFFALSE 42686
// begin if un in mc_ape [ i ] then
41855: LD_VAR 0 1
41859: PUSH
41860: LD_EXP 79
41864: PUSH
41865: LD_VAR 0 3
41869: ARRAY
41870: IN
41871: IFFALSE 41910
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
41873: LD_ADDR_EXP 79
41877: PUSH
41878: LD_EXP 79
41882: PPUSH
41883: LD_VAR 0 3
41887: PPUSH
41888: LD_EXP 79
41892: PUSH
41893: LD_VAR 0 3
41897: ARRAY
41898: PUSH
41899: LD_VAR 0 1
41903: DIFF
41904: PPUSH
41905: CALL_OW 1
41909: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
41910: LD_VAR 0 1
41914: PUSH
41915: LD_EXP 80
41919: PUSH
41920: LD_VAR 0 3
41924: ARRAY
41925: IN
41926: IFFALSE 41950
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41928: LD_ADDR_EXP 80
41932: PUSH
41933: LD_EXP 80
41937: PPUSH
41938: LD_VAR 0 3
41942: PPUSH
41943: EMPTY
41944: PPUSH
41945: CALL_OW 1
41949: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
41950: LD_VAR 0 1
41954: PPUSH
41955: CALL_OW 247
41959: PUSH
41960: LD_INT 2
41962: EQUAL
41963: PUSH
41964: LD_VAR 0 1
41968: PPUSH
41969: CALL_OW 110
41973: PUSH
41974: LD_INT 20
41976: EQUAL
41977: AND
41978: IFFALSE 42081
// begin fac := MC_GetBuilding ( i , b_factory ) ;
41980: LD_ADDR_VAR 0 8
41984: PUSH
41985: LD_VAR 0 3
41989: PPUSH
41990: LD_INT 3
41992: PPUSH
41993: CALL 39016 0 2
41997: ST_TO_ADDR
// if fac then
41998: LD_VAR 0 8
42002: IFFALSE 42081
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
42004: LD_ADDR_VAR 0 9
42008: PUSH
42009: LD_VAR 0 8
42013: PPUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: CALL_OW 265
42023: PPUSH
42024: LD_VAR 0 1
42028: PPUSH
42029: CALL_OW 262
42033: PPUSH
42034: LD_VAR 0 1
42038: PPUSH
42039: CALL_OW 263
42043: PPUSH
42044: LD_VAR 0 1
42048: PPUSH
42049: CALL_OW 264
42053: PPUSH
42054: CALL 48565 0 5
42058: ST_TO_ADDR
// if components then
42059: LD_VAR 0 9
42063: IFFALSE 42079
// MC_InsertProduceList ( i , components ) ;
42065: LD_VAR 0 3
42069: PPUSH
42070: LD_VAR 0 9
42074: PPUSH
42075: CALL 38586 0 2
// break ;
42079: GO 42688
// end ; end ; if GetType ( un ) = unit_building then
42081: LD_VAR 0 1
42085: PPUSH
42086: CALL_OW 247
42090: PUSH
42091: LD_INT 3
42093: EQUAL
42094: IFFALSE 42409
// begin btype := GetBType ( un ) ;
42096: LD_ADDR_VAR 0 5
42100: PUSH
42101: LD_VAR 0 1
42105: PPUSH
42106: CALL_OW 266
42110: ST_TO_ADDR
// if btype = b_warehouse then
42111: LD_VAR 0 5
42115: PUSH
42116: LD_INT 1
42118: EQUAL
42119: IFFALSE 42137
// begin btype := b_depot ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_INT 0
42128: ST_TO_ADDR
// pos := 1 ;
42129: LD_ADDR_VAR 0 6
42133: PUSH
42134: LD_INT 1
42136: ST_TO_ADDR
// end ; if btype = b_factory then
42137: LD_VAR 0 5
42141: PUSH
42142: LD_INT 3
42144: EQUAL
42145: IFFALSE 42163
// begin btype := b_workshop ;
42147: LD_ADDR_VAR 0 5
42151: PUSH
42152: LD_INT 2
42154: ST_TO_ADDR
// pos := 1 ;
42155: LD_ADDR_VAR 0 6
42159: PUSH
42160: LD_INT 1
42162: ST_TO_ADDR
// end ; if btype = b_barracks then
42163: LD_VAR 0 5
42167: PUSH
42168: LD_INT 5
42170: EQUAL
42171: IFFALSE 42181
// btype := b_armoury ;
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: LD_INT 4
42180: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
42181: LD_VAR 0 5
42185: PUSH
42186: LD_INT 7
42188: PUSH
42189: LD_INT 8
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: IN
42196: IFFALSE 42206
// btype := b_lab ;
42198: LD_ADDR_VAR 0 5
42202: PUSH
42203: LD_INT 6
42205: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
42206: LD_ADDR_EXP 55
42210: PUSH
42211: LD_EXP 55
42215: PPUSH
42216: LD_VAR 0 3
42220: PUSH
42221: LD_EXP 55
42225: PUSH
42226: LD_VAR 0 3
42230: ARRAY
42231: PUSH
42232: LD_INT 1
42234: PLUS
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PPUSH
42240: LD_VAR 0 5
42244: PUSH
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 250
42254: PUSH
42255: LD_VAR 0 1
42259: PPUSH
42260: CALL_OW 251
42264: PUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 254
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: PPUSH
42281: CALL 50965 0 3
42285: ST_TO_ADDR
// if pos = 1 then
42286: LD_VAR 0 6
42290: PUSH
42291: LD_INT 1
42293: EQUAL
42294: IFFALSE 42409
// begin tmp := mc_build_list [ i ] ;
42296: LD_ADDR_VAR 0 7
42300: PUSH
42301: LD_EXP 55
42305: PUSH
42306: LD_VAR 0 3
42310: ARRAY
42311: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42312: LD_VAR 0 7
42316: PPUSH
42317: LD_INT 2
42319: PUSH
42320: LD_INT 30
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 30
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: PPUSH
42345: CALL_OW 72
42349: IFFALSE 42359
// pos := 2 ;
42351: LD_ADDR_VAR 0 6
42355: PUSH
42356: LD_INT 2
42358: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
42359: LD_ADDR_VAR 0 7
42363: PUSH
42364: LD_VAR 0 7
42368: PPUSH
42369: LD_VAR 0 6
42373: PPUSH
42374: LD_VAR 0 7
42378: PPUSH
42379: CALL 51291 0 3
42383: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
42384: LD_ADDR_EXP 55
42388: PUSH
42389: LD_EXP 55
42393: PPUSH
42394: LD_VAR 0 3
42398: PPUSH
42399: LD_VAR 0 7
42403: PPUSH
42404: CALL_OW 1
42408: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
42409: LD_VAR 0 1
42413: PUSH
42414: LD_EXP 50
42418: PUSH
42419: LD_VAR 0 3
42423: ARRAY
42424: IN
42425: IFFALSE 42464
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
42427: LD_ADDR_EXP 50
42431: PUSH
42432: LD_EXP 50
42436: PPUSH
42437: LD_VAR 0 3
42441: PPUSH
42442: LD_EXP 50
42446: PUSH
42447: LD_VAR 0 3
42451: ARRAY
42452: PUSH
42453: LD_VAR 0 1
42457: DIFF
42458: PPUSH
42459: CALL_OW 1
42463: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
42464: LD_VAR 0 1
42468: PUSH
42469: LD_EXP 57
42473: PUSH
42474: LD_VAR 0 3
42478: ARRAY
42479: IN
42480: IFFALSE 42519
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
42482: LD_ADDR_EXP 57
42486: PUSH
42487: LD_EXP 57
42491: PPUSH
42492: LD_VAR 0 3
42496: PPUSH
42497: LD_EXP 57
42501: PUSH
42502: LD_VAR 0 3
42506: ARRAY
42507: PUSH
42508: LD_VAR 0 1
42512: DIFF
42513: PPUSH
42514: CALL_OW 1
42518: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
42519: LD_VAR 0 1
42523: PUSH
42524: LD_EXP 69
42528: PUSH
42529: LD_VAR 0 3
42533: ARRAY
42534: IN
42535: IFFALSE 42574
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
42537: LD_ADDR_EXP 69
42541: PUSH
42542: LD_EXP 69
42546: PPUSH
42547: LD_VAR 0 3
42551: PPUSH
42552: LD_EXP 69
42556: PUSH
42557: LD_VAR 0 3
42561: ARRAY
42562: PUSH
42563: LD_VAR 0 1
42567: DIFF
42568: PPUSH
42569: CALL_OW 1
42573: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
42574: LD_VAR 0 1
42578: PUSH
42579: LD_EXP 59
42583: PUSH
42584: LD_VAR 0 3
42588: ARRAY
42589: IN
42590: IFFALSE 42629
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
42592: LD_ADDR_EXP 59
42596: PUSH
42597: LD_EXP 59
42601: PPUSH
42602: LD_VAR 0 3
42606: PPUSH
42607: LD_EXP 59
42611: PUSH
42612: LD_VAR 0 3
42616: ARRAY
42617: PUSH
42618: LD_VAR 0 1
42622: DIFF
42623: PPUSH
42624: CALL_OW 1
42628: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
42629: LD_VAR 0 1
42633: PUSH
42634: LD_EXP 58
42638: PUSH
42639: LD_VAR 0 3
42643: ARRAY
42644: IN
42645: IFFALSE 42684
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
42647: LD_ADDR_EXP 58
42651: PUSH
42652: LD_EXP 58
42656: PPUSH
42657: LD_VAR 0 3
42661: PPUSH
42662: LD_EXP 58
42666: PUSH
42667: LD_VAR 0 3
42671: ARRAY
42672: PUSH
42673: LD_VAR 0 1
42677: DIFF
42678: PPUSH
42679: CALL_OW 1
42683: ST_TO_ADDR
// end ; break ;
42684: GO 42688
// end ;
42686: GO 41762
42688: POP
42689: POP
// end ;
42690: LD_VAR 0 2
42694: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
42695: LD_INT 0
42697: PPUSH
42698: PPUSH
42699: PPUSH
// if not mc_bases then
42700: LD_EXP 50
42704: NOT
42705: IFFALSE 42709
// exit ;
42707: GO 42924
// for i = 1 to mc_bases do
42709: LD_ADDR_VAR 0 3
42713: PUSH
42714: DOUBLE
42715: LD_INT 1
42717: DEC
42718: ST_TO_ADDR
42719: LD_EXP 50
42723: PUSH
42724: FOR_TO
42725: IFFALSE 42922
// begin if building in mc_construct_list [ i ] then
42727: LD_VAR 0 1
42731: PUSH
42732: LD_EXP 57
42736: PUSH
42737: LD_VAR 0 3
42741: ARRAY
42742: IN
42743: IFFALSE 42920
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
42745: LD_ADDR_EXP 57
42749: PUSH
42750: LD_EXP 57
42754: PPUSH
42755: LD_VAR 0 3
42759: PPUSH
42760: LD_EXP 57
42764: PUSH
42765: LD_VAR 0 3
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 1
42775: DIFF
42776: PPUSH
42777: CALL_OW 1
42781: ST_TO_ADDR
// if building in mc_lab [ i ] then
42782: LD_VAR 0 1
42786: PUSH
42787: LD_EXP 83
42791: PUSH
42792: LD_VAR 0 3
42796: ARRAY
42797: IN
42798: IFFALSE 42853
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
42800: LD_ADDR_EXP 84
42804: PUSH
42805: LD_EXP 84
42809: PPUSH
42810: LD_VAR 0 3
42814: PPUSH
42815: LD_EXP 84
42819: PUSH
42820: LD_VAR 0 3
42824: ARRAY
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: LD_EXP 84
42833: PUSH
42834: LD_VAR 0 3
42838: ARRAY
42839: PPUSH
42840: LD_INT 0
42842: PPUSH
42843: CALL 50383 0 4
42847: PPUSH
42848: CALL_OW 1
42852: ST_TO_ADDR
// if not building in mc_bases [ i ] then
42853: LD_VAR 0 1
42857: PUSH
42858: LD_EXP 50
42862: PUSH
42863: LD_VAR 0 3
42867: ARRAY
42868: IN
42869: NOT
42870: IFFALSE 42916
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
42872: LD_ADDR_EXP 50
42876: PUSH
42877: LD_EXP 50
42881: PPUSH
42882: LD_VAR 0 3
42886: PUSH
42887: LD_EXP 50
42891: PUSH
42892: LD_VAR 0 3
42896: ARRAY
42897: PUSH
42898: LD_INT 1
42900: PLUS
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PPUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL 50965 0 3
42915: ST_TO_ADDR
// exit ;
42916: POP
42917: POP
42918: GO 42924
// end ; end ;
42920: GO 42724
42922: POP
42923: POP
// end ;
42924: LD_VAR 0 2
42928: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
42929: LD_INT 0
42931: PPUSH
42932: PPUSH
42933: PPUSH
42934: PPUSH
42935: PPUSH
42936: PPUSH
42937: PPUSH
// if not mc_bases then
42938: LD_EXP 50
42942: NOT
42943: IFFALSE 42947
// exit ;
42945: GO 43608
// for i = 1 to mc_bases do
42947: LD_ADDR_VAR 0 3
42951: PUSH
42952: DOUBLE
42953: LD_INT 1
42955: DEC
42956: ST_TO_ADDR
42957: LD_EXP 50
42961: PUSH
42962: FOR_TO
42963: IFFALSE 43606
// begin if building in mc_construct_list [ i ] then
42965: LD_VAR 0 1
42969: PUSH
42970: LD_EXP 57
42974: PUSH
42975: LD_VAR 0 3
42979: ARRAY
42980: IN
42981: IFFALSE 43604
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
42983: LD_ADDR_EXP 57
42987: PUSH
42988: LD_EXP 57
42992: PPUSH
42993: LD_VAR 0 3
42997: PPUSH
42998: LD_EXP 57
43002: PUSH
43003: LD_VAR 0 3
43007: ARRAY
43008: PUSH
43009: LD_VAR 0 1
43013: DIFF
43014: PPUSH
43015: CALL_OW 1
43019: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43020: LD_ADDR_EXP 50
43024: PUSH
43025: LD_EXP 50
43029: PPUSH
43030: LD_VAR 0 3
43034: PUSH
43035: LD_EXP 50
43039: PUSH
43040: LD_VAR 0 3
43044: ARRAY
43045: PUSH
43046: LD_INT 1
43048: PLUS
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PPUSH
43054: LD_VAR 0 1
43058: PPUSH
43059: CALL 50965 0 3
43063: ST_TO_ADDR
// btype := GetBType ( building ) ;
43064: LD_ADDR_VAR 0 5
43068: PUSH
43069: LD_VAR 0 1
43073: PPUSH
43074: CALL_OW 266
43078: ST_TO_ADDR
// side := GetSide ( building ) ;
43079: LD_ADDR_VAR 0 8
43083: PUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 255
43093: ST_TO_ADDR
// if btype = b_lab then
43094: LD_VAR 0 5
43098: PUSH
43099: LD_INT 6
43101: EQUAL
43102: IFFALSE 43152
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
43104: LD_ADDR_EXP 83
43108: PUSH
43109: LD_EXP 83
43113: PPUSH
43114: LD_VAR 0 3
43118: PUSH
43119: LD_EXP 83
43123: PUSH
43124: LD_VAR 0 3
43128: ARRAY
43129: PUSH
43130: LD_INT 1
43132: PLUS
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL 50965 0 3
43147: ST_TO_ADDR
// exit ;
43148: POP
43149: POP
43150: GO 43608
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
43152: LD_VAR 0 5
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: LIST
43170: IN
43171: IFFALSE 43295
// begin if btype = b_armoury then
43173: LD_VAR 0 5
43177: PUSH
43178: LD_INT 4
43180: EQUAL
43181: IFFALSE 43191
// btype := b_barracks ;
43183: LD_ADDR_VAR 0 5
43187: PUSH
43188: LD_INT 5
43190: ST_TO_ADDR
// if btype = b_depot then
43191: LD_VAR 0 5
43195: PUSH
43196: LD_INT 0
43198: EQUAL
43199: IFFALSE 43209
// btype := b_warehouse ;
43201: LD_ADDR_VAR 0 5
43205: PUSH
43206: LD_INT 1
43208: ST_TO_ADDR
// if btype = b_workshop then
43209: LD_VAR 0 5
43213: PUSH
43214: LD_INT 2
43216: EQUAL
43217: IFFALSE 43227
// btype := b_factory ;
43219: LD_ADDR_VAR 0 5
43223: PUSH
43224: LD_INT 3
43226: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
43227: LD_VAR 0 5
43231: PPUSH
43232: LD_VAR 0 8
43236: PPUSH
43237: CALL_OW 323
43241: PUSH
43242: LD_INT 1
43244: EQUAL
43245: IFFALSE 43291
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
43247: LD_ADDR_EXP 82
43251: PUSH
43252: LD_EXP 82
43256: PPUSH
43257: LD_VAR 0 3
43261: PUSH
43262: LD_EXP 82
43266: PUSH
43267: LD_VAR 0 3
43271: ARRAY
43272: PUSH
43273: LD_INT 1
43275: PLUS
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PPUSH
43281: LD_VAR 0 1
43285: PPUSH
43286: CALL 50965 0 3
43290: ST_TO_ADDR
// exit ;
43291: POP
43292: POP
43293: GO 43608
// end ; if btype in [ b_bunker , b_turret ] then
43295: LD_VAR 0 5
43299: PUSH
43300: LD_INT 32
43302: PUSH
43303: LD_INT 33
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: IN
43310: IFFALSE 43600
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
43312: LD_ADDR_EXP 58
43316: PUSH
43317: LD_EXP 58
43321: PPUSH
43322: LD_VAR 0 3
43326: PUSH
43327: LD_EXP 58
43331: PUSH
43332: LD_VAR 0 3
43336: ARRAY
43337: PUSH
43338: LD_INT 1
43340: PLUS
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PPUSH
43346: LD_VAR 0 1
43350: PPUSH
43351: CALL 50965 0 3
43355: ST_TO_ADDR
// if btype = b_bunker then
43356: LD_VAR 0 5
43360: PUSH
43361: LD_INT 32
43363: EQUAL
43364: IFFALSE 43600
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43366: LD_ADDR_EXP 59
43370: PUSH
43371: LD_EXP 59
43375: PPUSH
43376: LD_VAR 0 3
43380: PUSH
43381: LD_EXP 59
43385: PUSH
43386: LD_VAR 0 3
43390: ARRAY
43391: PUSH
43392: LD_INT 1
43394: PLUS
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PPUSH
43400: LD_VAR 0 1
43404: PPUSH
43405: CALL 50965 0 3
43409: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
43410: LD_ADDR_VAR 0 6
43414: PUSH
43415: LD_EXP 50
43419: PUSH
43420: LD_VAR 0 3
43424: ARRAY
43425: PPUSH
43426: LD_INT 25
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: LD_INT 54
43441: PUSH
43442: EMPTY
43443: LIST
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PPUSH
43453: CALL_OW 72
43457: ST_TO_ADDR
// if tmp then
43458: LD_VAR 0 6
43462: IFFALSE 43468
// exit ;
43464: POP
43465: POP
43466: GO 43608
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43468: LD_ADDR_VAR 0 6
43472: PUSH
43473: LD_EXP 50
43477: PUSH
43478: LD_VAR 0 3
43482: ARRAY
43483: PPUSH
43484: LD_INT 2
43486: PUSH
43487: LD_INT 30
43489: PUSH
43490: LD_INT 4
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 30
43499: PUSH
43500: LD_INT 5
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: LIST
43511: PPUSH
43512: CALL_OW 72
43516: ST_TO_ADDR
// if not tmp then
43517: LD_VAR 0 6
43521: NOT
43522: IFFALSE 43528
// exit ;
43524: POP
43525: POP
43526: GO 43608
// for j in tmp do
43528: LD_ADDR_VAR 0 4
43532: PUSH
43533: LD_VAR 0 6
43537: PUSH
43538: FOR_IN
43539: IFFALSE 43598
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
43541: LD_ADDR_VAR 0 7
43545: PUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: CALL_OW 313
43555: PPUSH
43556: LD_INT 25
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PPUSH
43566: CALL_OW 72
43570: ST_TO_ADDR
// if units then
43571: LD_VAR 0 7
43575: IFFALSE 43596
// begin ComExitBuilding ( units [ 1 ] ) ;
43577: LD_VAR 0 7
43581: PUSH
43582: LD_INT 1
43584: ARRAY
43585: PPUSH
43586: CALL_OW 122
// exit ;
43590: POP
43591: POP
43592: POP
43593: POP
43594: GO 43608
// end ; end ;
43596: GO 43538
43598: POP
43599: POP
// end ; end ; exit ;
43600: POP
43601: POP
43602: GO 43608
// end ; end ;
43604: GO 42962
43606: POP
43607: POP
// end ;
43608: LD_VAR 0 2
43612: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
// if not mc_bases then
43622: LD_EXP 50
43626: NOT
43627: IFFALSE 43631
// exit ;
43629: GO 43862
// btype := GetBType ( building ) ;
43631: LD_ADDR_VAR 0 6
43635: PUSH
43636: LD_VAR 0 1
43640: PPUSH
43641: CALL_OW 266
43645: ST_TO_ADDR
// x := GetX ( building ) ;
43646: LD_ADDR_VAR 0 7
43650: PUSH
43651: LD_VAR 0 1
43655: PPUSH
43656: CALL_OW 250
43660: ST_TO_ADDR
// y := GetY ( building ) ;
43661: LD_ADDR_VAR 0 8
43665: PUSH
43666: LD_VAR 0 1
43670: PPUSH
43671: CALL_OW 251
43675: ST_TO_ADDR
// d := GetDir ( building ) ;
43676: LD_ADDR_VAR 0 9
43680: PUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 254
43690: ST_TO_ADDR
// for i = 1 to mc_bases do
43691: LD_ADDR_VAR 0 4
43695: PUSH
43696: DOUBLE
43697: LD_INT 1
43699: DEC
43700: ST_TO_ADDR
43701: LD_EXP 50
43705: PUSH
43706: FOR_TO
43707: IFFALSE 43860
// begin if not mc_build_list [ i ] then
43709: LD_EXP 55
43713: PUSH
43714: LD_VAR 0 4
43718: ARRAY
43719: NOT
43720: IFFALSE 43724
// continue ;
43722: GO 43706
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
43724: LD_VAR 0 6
43728: PUSH
43729: LD_VAR 0 7
43733: PUSH
43734: LD_VAR 0 8
43738: PUSH
43739: LD_VAR 0 9
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: PPUSH
43750: LD_EXP 55
43754: PUSH
43755: LD_VAR 0 4
43759: ARRAY
43760: PUSH
43761: LD_INT 1
43763: ARRAY
43764: PPUSH
43765: CALL 57134 0 2
43769: IFFALSE 43858
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
43771: LD_ADDR_EXP 55
43775: PUSH
43776: LD_EXP 55
43780: PPUSH
43781: LD_VAR 0 4
43785: PPUSH
43786: LD_EXP 55
43790: PUSH
43791: LD_VAR 0 4
43795: ARRAY
43796: PPUSH
43797: LD_INT 1
43799: PPUSH
43800: CALL_OW 3
43804: PPUSH
43805: CALL_OW 1
43809: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
43810: LD_ADDR_EXP 57
43814: PUSH
43815: LD_EXP 57
43819: PPUSH
43820: LD_VAR 0 4
43824: PUSH
43825: LD_EXP 57
43829: PUSH
43830: LD_VAR 0 4
43834: ARRAY
43835: PUSH
43836: LD_INT 1
43838: PLUS
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PPUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL 50965 0 3
43853: ST_TO_ADDR
// exit ;
43854: POP
43855: POP
43856: GO 43862
// end ; end ;
43858: GO 43706
43860: POP
43861: POP
// end ;
43862: LD_VAR 0 3
43866: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
43867: LD_INT 0
43869: PPUSH
43870: PPUSH
43871: PPUSH
// if not mc_bases then
43872: LD_EXP 50
43876: NOT
43877: IFFALSE 43881
// exit ;
43879: GO 44071
// for i = 1 to mc_bases do
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: DOUBLE
43887: LD_INT 1
43889: DEC
43890: ST_TO_ADDR
43891: LD_EXP 50
43895: PUSH
43896: FOR_TO
43897: IFFALSE 43984
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
43899: LD_VAR 0 1
43903: PUSH
43904: LD_EXP 58
43908: PUSH
43909: LD_VAR 0 4
43913: ARRAY
43914: IN
43915: PUSH
43916: LD_VAR 0 1
43920: PUSH
43921: LD_EXP 59
43925: PUSH
43926: LD_VAR 0 4
43930: ARRAY
43931: IN
43932: NOT
43933: AND
43934: IFFALSE 43982
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43936: LD_ADDR_EXP 59
43940: PUSH
43941: LD_EXP 59
43945: PPUSH
43946: LD_VAR 0 4
43950: PUSH
43951: LD_EXP 59
43955: PUSH
43956: LD_VAR 0 4
43960: ARRAY
43961: PUSH
43962: LD_INT 1
43964: PLUS
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PPUSH
43970: LD_VAR 0 1
43974: PPUSH
43975: CALL 50965 0 3
43979: ST_TO_ADDR
// break ;
43980: GO 43984
// end ; end ;
43982: GO 43896
43984: POP
43985: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
43986: LD_VAR 0 1
43990: PPUSH
43991: CALL_OW 257
43995: PUSH
43996: LD_EXP 76
44000: IN
44001: PUSH
44002: LD_VAR 0 1
44006: PPUSH
44007: CALL_OW 266
44011: PUSH
44012: LD_INT 5
44014: EQUAL
44015: AND
44016: PUSH
44017: LD_VAR 0 2
44021: PPUSH
44022: CALL_OW 110
44026: PUSH
44027: LD_INT 18
44029: NONEQUAL
44030: AND
44031: IFFALSE 44071
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
44033: LD_VAR 0 2
44037: PPUSH
44038: CALL_OW 257
44042: PUSH
44043: LD_INT 5
44045: PUSH
44046: LD_INT 8
44048: PUSH
44049: LD_INT 9
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: LIST
44056: IN
44057: IFFALSE 44071
// SetClass ( unit , 1 ) ;
44059: LD_VAR 0 2
44063: PPUSH
44064: LD_INT 1
44066: PPUSH
44067: CALL_OW 336
// end ;
44071: LD_VAR 0 3
44075: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
44076: LD_INT 0
44078: PPUSH
44079: PPUSH
// if not mc_bases then
44080: LD_EXP 50
44084: NOT
44085: IFFALSE 44089
// exit ;
44087: GO 44205
// if GetLives ( abandoned_vehicle ) > 250 then
44089: LD_VAR 0 2
44093: PPUSH
44094: CALL_OW 256
44098: PUSH
44099: LD_INT 250
44101: GREATER
44102: IFFALSE 44106
// exit ;
44104: GO 44205
// for i = 1 to mc_bases do
44106: LD_ADDR_VAR 0 6
44110: PUSH
44111: DOUBLE
44112: LD_INT 1
44114: DEC
44115: ST_TO_ADDR
44116: LD_EXP 50
44120: PUSH
44121: FOR_TO
44122: IFFALSE 44203
// begin if driver in mc_bases [ i ] then
44124: LD_VAR 0 1
44128: PUSH
44129: LD_EXP 50
44133: PUSH
44134: LD_VAR 0 6
44138: ARRAY
44139: IN
44140: IFFALSE 44201
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
44142: LD_VAR 0 1
44146: PPUSH
44147: LD_EXP 50
44151: PUSH
44152: LD_VAR 0 6
44156: ARRAY
44157: PPUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 30
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 30
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: LIST
44185: PPUSH
44186: CALL_OW 72
44190: PUSH
44191: LD_INT 1
44193: ARRAY
44194: PPUSH
44195: CALL_OW 112
// break ;
44199: GO 44203
// end ; end ;
44201: GO 44121
44203: POP
44204: POP
// end ; end_of_file
44205: LD_VAR 0 5
44209: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44210: LD_INT 0
44212: PPUSH
44213: PPUSH
// if exist_mode then
44214: LD_VAR 0 2
44218: IFFALSE 44243
// unit := CreateCharacter ( prefix & ident ) else
44220: LD_ADDR_VAR 0 5
44224: PUSH
44225: LD_VAR 0 3
44229: PUSH
44230: LD_VAR 0 1
44234: STR
44235: PPUSH
44236: CALL_OW 34
44240: ST_TO_ADDR
44241: GO 44258
// unit := NewCharacter ( ident ) ;
44243: LD_ADDR_VAR 0 5
44247: PUSH
44248: LD_VAR 0 1
44252: PPUSH
44253: CALL_OW 25
44257: ST_TO_ADDR
// result := unit ;
44258: LD_ADDR_VAR 0 4
44262: PUSH
44263: LD_VAR 0 5
44267: ST_TO_ADDR
// end ;
44268: LD_VAR 0 4
44272: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44273: LD_INT 0
44275: PPUSH
44276: PPUSH
// if not side or not nation then
44277: LD_VAR 0 1
44281: NOT
44282: PUSH
44283: LD_VAR 0 2
44287: NOT
44288: OR
44289: IFFALSE 44293
// exit ;
44291: GO 44929
// case nation of nation_american :
44293: LD_VAR 0 2
44297: PUSH
44298: LD_INT 1
44300: DOUBLE
44301: EQUAL
44302: IFTRUE 44306
44304: GO 44476
44306: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
44307: LD_ADDR_VAR 0 4
44311: PUSH
44312: LD_INT 35
44314: PUSH
44315: LD_INT 45
44317: PUSH
44318: LD_INT 46
44320: PUSH
44321: LD_INT 47
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 6
44332: PUSH
44333: LD_INT 15
44335: PUSH
44336: LD_INT 16
44338: PUSH
44339: LD_INT 7
44341: PUSH
44342: LD_INT 12
44344: PUSH
44345: LD_INT 13
44347: PUSH
44348: LD_INT 10
44350: PUSH
44351: LD_INT 14
44353: PUSH
44354: LD_INT 20
44356: PUSH
44357: LD_INT 21
44359: PUSH
44360: LD_INT 22
44362: PUSH
44363: LD_INT 25
44365: PUSH
44366: LD_INT 32
44368: PUSH
44369: LD_INT 27
44371: PUSH
44372: LD_INT 36
44374: PUSH
44375: LD_INT 69
44377: PUSH
44378: LD_INT 39
44380: PUSH
44381: LD_INT 34
44383: PUSH
44384: LD_INT 40
44386: PUSH
44387: LD_INT 48
44389: PUSH
44390: LD_INT 49
44392: PUSH
44393: LD_INT 50
44395: PUSH
44396: LD_INT 51
44398: PUSH
44399: LD_INT 52
44401: PUSH
44402: LD_INT 53
44404: PUSH
44405: LD_INT 54
44407: PUSH
44408: LD_INT 55
44410: PUSH
44411: LD_INT 56
44413: PUSH
44414: LD_INT 57
44416: PUSH
44417: LD_INT 58
44419: PUSH
44420: LD_INT 59
44422: PUSH
44423: LD_INT 60
44425: PUSH
44426: LD_INT 61
44428: PUSH
44429: LD_INT 62
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: ST_TO_ADDR
44474: GO 44853
44476: LD_INT 2
44478: DOUBLE
44479: EQUAL
44480: IFTRUE 44484
44482: GO 44662
44484: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
44485: LD_ADDR_VAR 0 4
44489: PUSH
44490: LD_INT 35
44492: PUSH
44493: LD_INT 45
44495: PUSH
44496: LD_INT 46
44498: PUSH
44499: LD_INT 47
44501: PUSH
44502: LD_INT 70
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: LD_INT 11
44510: PUSH
44511: LD_INT 3
44513: PUSH
44514: LD_INT 4
44516: PUSH
44517: LD_INT 5
44519: PUSH
44520: LD_INT 6
44522: PUSH
44523: LD_INT 15
44525: PUSH
44526: LD_INT 18
44528: PUSH
44529: LD_INT 7
44531: PUSH
44532: LD_INT 17
44534: PUSH
44535: LD_INT 8
44537: PUSH
44538: LD_INT 20
44540: PUSH
44541: LD_INT 21
44543: PUSH
44544: LD_INT 22
44546: PUSH
44547: LD_INT 72
44549: PUSH
44550: LD_INT 26
44552: PUSH
44553: LD_INT 69
44555: PUSH
44556: LD_INT 39
44558: PUSH
44559: LD_INT 40
44561: PUSH
44562: LD_INT 41
44564: PUSH
44565: LD_INT 42
44567: PUSH
44568: LD_INT 43
44570: PUSH
44571: LD_INT 48
44573: PUSH
44574: LD_INT 49
44576: PUSH
44577: LD_INT 50
44579: PUSH
44580: LD_INT 51
44582: PUSH
44583: LD_INT 52
44585: PUSH
44586: LD_INT 53
44588: PUSH
44589: LD_INT 54
44591: PUSH
44592: LD_INT 55
44594: PUSH
44595: LD_INT 56
44597: PUSH
44598: LD_INT 60
44600: PUSH
44601: LD_INT 61
44603: PUSH
44604: LD_INT 62
44606: PUSH
44607: LD_INT 66
44609: PUSH
44610: LD_INT 67
44612: PUSH
44613: LD_INT 68
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: ST_TO_ADDR
44660: GO 44853
44662: LD_INT 3
44664: DOUBLE
44665: EQUAL
44666: IFTRUE 44670
44668: GO 44852
44670: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
44671: LD_ADDR_VAR 0 4
44675: PUSH
44676: LD_INT 46
44678: PUSH
44679: LD_INT 47
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: LD_INT 11
44690: PUSH
44691: LD_INT 9
44693: PUSH
44694: LD_INT 20
44696: PUSH
44697: LD_INT 19
44699: PUSH
44700: LD_INT 21
44702: PUSH
44703: LD_INT 24
44705: PUSH
44706: LD_INT 22
44708: PUSH
44709: LD_INT 25
44711: PUSH
44712: LD_INT 28
44714: PUSH
44715: LD_INT 29
44717: PUSH
44718: LD_INT 30
44720: PUSH
44721: LD_INT 31
44723: PUSH
44724: LD_INT 37
44726: PUSH
44727: LD_INT 38
44729: PUSH
44730: LD_INT 32
44732: PUSH
44733: LD_INT 27
44735: PUSH
44736: LD_INT 33
44738: PUSH
44739: LD_INT 69
44741: PUSH
44742: LD_INT 39
44744: PUSH
44745: LD_INT 34
44747: PUSH
44748: LD_INT 40
44750: PUSH
44751: LD_INT 71
44753: PUSH
44754: LD_INT 23
44756: PUSH
44757: LD_INT 44
44759: PUSH
44760: LD_INT 48
44762: PUSH
44763: LD_INT 49
44765: PUSH
44766: LD_INT 50
44768: PUSH
44769: LD_INT 51
44771: PUSH
44772: LD_INT 52
44774: PUSH
44775: LD_INT 53
44777: PUSH
44778: LD_INT 54
44780: PUSH
44781: LD_INT 55
44783: PUSH
44784: LD_INT 56
44786: PUSH
44787: LD_INT 57
44789: PUSH
44790: LD_INT 58
44792: PUSH
44793: LD_INT 59
44795: PUSH
44796: LD_INT 63
44798: PUSH
44799: LD_INT 64
44801: PUSH
44802: LD_INT 65
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
44850: GO 44853
44852: POP
// if state > - 1 and state < 3 then
44853: LD_VAR 0 3
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: GREATER
44862: PUSH
44863: LD_VAR 0 3
44867: PUSH
44868: LD_INT 3
44870: LESS
44871: AND
44872: IFFALSE 44929
// for i in result do
44874: LD_ADDR_VAR 0 5
44878: PUSH
44879: LD_VAR 0 4
44883: PUSH
44884: FOR_IN
44885: IFFALSE 44927
// if GetTech ( i , side ) <> state then
44887: LD_VAR 0 5
44891: PPUSH
44892: LD_VAR 0 1
44896: PPUSH
44897: CALL_OW 321
44901: PUSH
44902: LD_VAR 0 3
44906: NONEQUAL
44907: IFFALSE 44925
// result := result diff i ;
44909: LD_ADDR_VAR 0 4
44913: PUSH
44914: LD_VAR 0 4
44918: PUSH
44919: LD_VAR 0 5
44923: DIFF
44924: ST_TO_ADDR
44925: GO 44884
44927: POP
44928: POP
// end ;
44929: LD_VAR 0 4
44933: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44934: LD_INT 0
44936: PPUSH
44937: PPUSH
44938: PPUSH
// result := true ;
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: LD_INT 1
44946: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44947: LD_ADDR_VAR 0 5
44951: PUSH
44952: LD_VAR 0 2
44956: PPUSH
44957: CALL_OW 480
44961: ST_TO_ADDR
// if not tmp then
44962: LD_VAR 0 5
44966: NOT
44967: IFFALSE 44971
// exit ;
44969: GO 45020
// for i in tmp do
44971: LD_ADDR_VAR 0 4
44975: PUSH
44976: LD_VAR 0 5
44980: PUSH
44981: FOR_IN
44982: IFFALSE 45018
// if GetTech ( i , side ) <> state_researched then
44984: LD_VAR 0 4
44988: PPUSH
44989: LD_VAR 0 1
44993: PPUSH
44994: CALL_OW 321
44998: PUSH
44999: LD_INT 2
45001: NONEQUAL
45002: IFFALSE 45016
// begin result := false ;
45004: LD_ADDR_VAR 0 3
45008: PUSH
45009: LD_INT 0
45011: ST_TO_ADDR
// exit ;
45012: POP
45013: POP
45014: GO 45020
// end ;
45016: GO 44981
45018: POP
45019: POP
// end ;
45020: LD_VAR 0 3
45024: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45025: LD_INT 0
45027: PPUSH
45028: PPUSH
45029: PPUSH
45030: PPUSH
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
45035: PPUSH
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45040: LD_VAR 0 1
45044: NOT
45045: PUSH
45046: LD_VAR 0 1
45050: PPUSH
45051: CALL_OW 257
45055: PUSH
45056: LD_INT 9
45058: NONEQUAL
45059: OR
45060: IFFALSE 45064
// exit ;
45062: GO 45637
// side := GetSide ( unit ) ;
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: LD_VAR 0 1
45073: PPUSH
45074: CALL_OW 255
45078: ST_TO_ADDR
// tech_space := tech_spacanom ;
45079: LD_ADDR_VAR 0 12
45083: PUSH
45084: LD_INT 29
45086: ST_TO_ADDR
// tech_time := tech_taurad ;
45087: LD_ADDR_VAR 0 13
45091: PUSH
45092: LD_INT 28
45094: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45095: LD_ADDR_VAR 0 11
45099: PUSH
45100: LD_VAR 0 1
45104: PPUSH
45105: CALL_OW 310
45109: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45110: LD_VAR 0 11
45114: PPUSH
45115: CALL_OW 247
45119: PUSH
45120: LD_INT 2
45122: EQUAL
45123: IFFALSE 45127
// exit ;
45125: GO 45637
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45127: LD_ADDR_VAR 0 8
45131: PUSH
45132: LD_INT 81
45134: PUSH
45135: LD_VAR 0 9
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: LD_INT 21
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PPUSH
45165: CALL_OW 69
45169: ST_TO_ADDR
// if not tmp then
45170: LD_VAR 0 8
45174: NOT
45175: IFFALSE 45179
// exit ;
45177: GO 45637
// if in_unit then
45179: LD_VAR 0 11
45183: IFFALSE 45207
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45185: LD_ADDR_VAR 0 10
45189: PUSH
45190: LD_VAR 0 8
45194: PPUSH
45195: LD_VAR 0 11
45199: PPUSH
45200: CALL_OW 74
45204: ST_TO_ADDR
45205: GO 45227
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45207: LD_ADDR_VAR 0 10
45211: PUSH
45212: LD_VAR 0 8
45216: PPUSH
45217: LD_VAR 0 1
45221: PPUSH
45222: CALL_OW 74
45226: ST_TO_ADDR
// if not enemy then
45227: LD_VAR 0 10
45231: NOT
45232: IFFALSE 45236
// exit ;
45234: GO 45637
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45236: LD_VAR 0 11
45240: PUSH
45241: LD_VAR 0 11
45245: PPUSH
45246: LD_VAR 0 10
45250: PPUSH
45251: CALL_OW 296
45255: PUSH
45256: LD_INT 13
45258: GREATER
45259: AND
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: LD_VAR 0 10
45270: PPUSH
45271: CALL_OW 296
45275: PUSH
45276: LD_INT 12
45278: GREATER
45279: OR
45280: IFFALSE 45284
// exit ;
45282: GO 45637
// missile := [ 1 ] ;
45284: LD_ADDR_VAR 0 14
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45295: LD_VAR 0 9
45299: PPUSH
45300: LD_VAR 0 12
45304: PPUSH
45305: CALL_OW 325
45309: IFFALSE 45338
// missile := Insert ( missile , missile + 1 , 2 ) ;
45311: LD_ADDR_VAR 0 14
45315: PUSH
45316: LD_VAR 0 14
45320: PPUSH
45321: LD_VAR 0 14
45325: PUSH
45326: LD_INT 1
45328: PLUS
45329: PPUSH
45330: LD_INT 2
45332: PPUSH
45333: CALL_OW 2
45337: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45338: LD_VAR 0 9
45342: PPUSH
45343: LD_VAR 0 13
45347: PPUSH
45348: CALL_OW 325
45352: PUSH
45353: LD_VAR 0 10
45357: PPUSH
45358: CALL_OW 255
45362: PPUSH
45363: LD_VAR 0 13
45367: PPUSH
45368: CALL_OW 325
45372: NOT
45373: AND
45374: IFFALSE 45403
// missile := Insert ( missile , missile + 1 , 3 ) ;
45376: LD_ADDR_VAR 0 14
45380: PUSH
45381: LD_VAR 0 14
45385: PPUSH
45386: LD_VAR 0 14
45390: PUSH
45391: LD_INT 1
45393: PLUS
45394: PPUSH
45395: LD_INT 3
45397: PPUSH
45398: CALL_OW 2
45402: ST_TO_ADDR
// if missile < 2 then
45403: LD_VAR 0 14
45407: PUSH
45408: LD_INT 2
45410: LESS
45411: IFFALSE 45415
// exit ;
45413: GO 45637
// x := GetX ( enemy ) ;
45415: LD_ADDR_VAR 0 4
45419: PUSH
45420: LD_VAR 0 10
45424: PPUSH
45425: CALL_OW 250
45429: ST_TO_ADDR
// y := GetY ( enemy ) ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 10
45439: PPUSH
45440: CALL_OW 251
45444: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45445: LD_ADDR_VAR 0 6
45449: PUSH
45450: LD_VAR 0 4
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PPUSH
45459: LD_INT 1
45461: PPUSH
45462: CALL_OW 12
45466: PLUS
45467: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45468: LD_ADDR_VAR 0 7
45472: PUSH
45473: LD_VAR 0 5
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PPUSH
45482: LD_INT 1
45484: PPUSH
45485: CALL_OW 12
45489: PLUS
45490: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45491: LD_VAR 0 6
45495: PPUSH
45496: LD_VAR 0 7
45500: PPUSH
45501: CALL_OW 488
45505: NOT
45506: IFFALSE 45528
// begin _x := x ;
45508: LD_ADDR_VAR 0 6
45512: PUSH
45513: LD_VAR 0 4
45517: ST_TO_ADDR
// _y := y ;
45518: LD_ADDR_VAR 0 7
45522: PUSH
45523: LD_VAR 0 5
45527: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45528: LD_ADDR_VAR 0 3
45532: PUSH
45533: LD_INT 1
45535: PPUSH
45536: LD_VAR 0 14
45540: PPUSH
45541: CALL_OW 12
45545: ST_TO_ADDR
// case i of 1 :
45546: LD_VAR 0 3
45550: PUSH
45551: LD_INT 1
45553: DOUBLE
45554: EQUAL
45555: IFTRUE 45559
45557: GO 45576
45559: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45560: LD_VAR 0 1
45564: PPUSH
45565: LD_VAR 0 10
45569: PPUSH
45570: CALL_OW 115
45574: GO 45637
45576: LD_INT 2
45578: DOUBLE
45579: EQUAL
45580: IFTRUE 45584
45582: GO 45606
45584: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45585: LD_VAR 0 1
45589: PPUSH
45590: LD_VAR 0 6
45594: PPUSH
45595: LD_VAR 0 7
45599: PPUSH
45600: CALL_OW 153
45604: GO 45637
45606: LD_INT 3
45608: DOUBLE
45609: EQUAL
45610: IFTRUE 45614
45612: GO 45636
45614: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45615: LD_VAR 0 1
45619: PPUSH
45620: LD_VAR 0 6
45624: PPUSH
45625: LD_VAR 0 7
45629: PPUSH
45630: CALL_OW 154
45634: GO 45637
45636: POP
// end ;
45637: LD_VAR 0 2
45641: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45642: LD_INT 0
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
// if not unit or not building then
45650: LD_VAR 0 1
45654: NOT
45655: PUSH
45656: LD_VAR 0 2
45660: NOT
45661: OR
45662: IFFALSE 45666
// exit ;
45664: GO 45824
// x := GetX ( building ) ;
45666: LD_ADDR_VAR 0 5
45670: PUSH
45671: LD_VAR 0 2
45675: PPUSH
45676: CALL_OW 250
45680: ST_TO_ADDR
// y := GetY ( building ) ;
45681: LD_ADDR_VAR 0 6
45685: PUSH
45686: LD_VAR 0 2
45690: PPUSH
45691: CALL_OW 251
45695: ST_TO_ADDR
// for i = 0 to 5 do
45696: LD_ADDR_VAR 0 4
45700: PUSH
45701: DOUBLE
45702: LD_INT 0
45704: DEC
45705: ST_TO_ADDR
45706: LD_INT 5
45708: PUSH
45709: FOR_TO
45710: IFFALSE 45822
// begin _x := ShiftX ( x , i , 3 ) ;
45712: LD_ADDR_VAR 0 7
45716: PUSH
45717: LD_VAR 0 5
45721: PPUSH
45722: LD_VAR 0 4
45726: PPUSH
45727: LD_INT 3
45729: PPUSH
45730: CALL_OW 272
45734: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45735: LD_ADDR_VAR 0 8
45739: PUSH
45740: LD_VAR 0 6
45744: PPUSH
45745: LD_VAR 0 4
45749: PPUSH
45750: LD_INT 3
45752: PPUSH
45753: CALL_OW 273
45757: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45758: LD_VAR 0 7
45762: PPUSH
45763: LD_VAR 0 8
45767: PPUSH
45768: CALL_OW 488
45772: NOT
45773: IFFALSE 45777
// continue ;
45775: GO 45709
// if HexInfo ( _x , _y ) = 0 then
45777: LD_VAR 0 7
45781: PPUSH
45782: LD_VAR 0 8
45786: PPUSH
45787: CALL_OW 428
45791: PUSH
45792: LD_INT 0
45794: EQUAL
45795: IFFALSE 45820
// begin ComMoveXY ( unit , _x , _y ) ;
45797: LD_VAR 0 1
45801: PPUSH
45802: LD_VAR 0 7
45806: PPUSH
45807: LD_VAR 0 8
45811: PPUSH
45812: CALL_OW 111
// exit ;
45816: POP
45817: POP
45818: GO 45824
// end ; end ;
45820: GO 45709
45822: POP
45823: POP
// end ;
45824: LD_VAR 0 3
45828: RET
// export function ScanBase ( side , base_area ) ; begin
45829: LD_INT 0
45831: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45832: LD_ADDR_VAR 0 3
45836: PUSH
45837: LD_VAR 0 2
45841: PPUSH
45842: LD_INT 81
45844: PUSH
45845: LD_VAR 0 1
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PPUSH
45854: CALL_OW 70
45858: ST_TO_ADDR
// end ;
45859: LD_VAR 0 3
45863: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
45864: LD_INT 0
45866: PPUSH
45867: PPUSH
45868: PPUSH
45869: PPUSH
45870: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
45871: LD_VAR 0 1
45875: NOT
45876: PUSH
45877: LD_EXP 50
45881: PUSH
45882: LD_VAR 0 1
45886: ARRAY
45887: NOT
45888: OR
45889: PUSH
45890: LD_VAR 0 2
45894: NOT
45895: OR
45896: PUSH
45897: LD_VAR 0 3
45901: NOT
45902: OR
45903: IFFALSE 45907
// exit ;
45905: GO 46357
// side := mc_sides [ base ] ;
45907: LD_ADDR_VAR 0 6
45911: PUSH
45912: LD_EXP 76
45916: PUSH
45917: LD_VAR 0 1
45921: ARRAY
45922: ST_TO_ADDR
// if not side then
45923: LD_VAR 0 6
45927: NOT
45928: IFFALSE 45932
// exit ;
45930: GO 46357
// for i in solds do
45932: LD_ADDR_VAR 0 7
45936: PUSH
45937: LD_VAR 0 2
45941: PUSH
45942: FOR_IN
45943: IFFALSE 46004
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
45945: LD_VAR 0 7
45949: PPUSH
45950: CALL_OW 310
45954: PPUSH
45955: CALL_OW 266
45959: PUSH
45960: LD_INT 32
45962: PUSH
45963: LD_INT 31
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: IN
45970: IFFALSE 45990
// solds := solds diff i else
45972: LD_ADDR_VAR 0 2
45976: PUSH
45977: LD_VAR 0 2
45981: PUSH
45982: LD_VAR 0 7
45986: DIFF
45987: ST_TO_ADDR
45988: GO 46002
// SetTag ( i , 18 ) ;
45990: LD_VAR 0 7
45994: PPUSH
45995: LD_INT 18
45997: PPUSH
45998: CALL_OW 109
46002: GO 45942
46004: POP
46005: POP
// if not solds then
46006: LD_VAR 0 2
46010: NOT
46011: IFFALSE 46015
// exit ;
46013: GO 46357
// repeat wait ( 0 0$1 ) ;
46015: LD_INT 35
46017: PPUSH
46018: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
46022: LD_ADDR_VAR 0 5
46026: PUSH
46027: LD_VAR 0 6
46031: PPUSH
46032: LD_VAR 0 3
46036: PPUSH
46037: CALL 45829 0 2
46041: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
46042: LD_VAR 0 5
46046: NOT
46047: PUSH
46048: LD_VAR 0 5
46052: PUSH
46053: LD_INT 3
46055: GREATER
46056: OR
46057: PUSH
46058: LD_EXP 72
46062: PUSH
46063: LD_VAR 0 1
46067: ARRAY
46068: OR
46069: IFFALSE 46110
// begin for i in solds do
46071: LD_ADDR_VAR 0 7
46075: PUSH
46076: LD_VAR 0 2
46080: PUSH
46081: FOR_IN
46082: IFFALSE 46106
// if HasTask ( i ) then
46084: LD_VAR 0 7
46088: PPUSH
46089: CALL_OW 314
46093: IFFALSE 46104
// ComStop ( i ) ;
46095: LD_VAR 0 7
46099: PPUSH
46100: CALL_OW 141
46104: GO 46081
46106: POP
46107: POP
// break ;
46108: GO 46345
// end ; for i in solds do
46110: LD_ADDR_VAR 0 7
46114: PUSH
46115: LD_VAR 0 2
46119: PUSH
46120: FOR_IN
46121: IFFALSE 46337
// begin if IsInUnit ( i ) then
46123: LD_VAR 0 7
46127: PPUSH
46128: CALL_OW 310
46132: IFFALSE 46143
// ComExitBuilding ( i ) ;
46134: LD_VAR 0 7
46138: PPUSH
46139: CALL_OW 122
// if GetLives ( i ) > 333 then
46143: LD_VAR 0 7
46147: PPUSH
46148: CALL_OW 256
46152: PUSH
46153: LD_INT 333
46155: GREATER
46156: IFFALSE 46184
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46158: LD_VAR 0 7
46162: PPUSH
46163: LD_VAR 0 5
46167: PPUSH
46168: LD_VAR 0 7
46172: PPUSH
46173: CALL_OW 74
46177: PPUSH
46178: CALL_OW 115
46182: GO 46335
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
46184: LD_ADDR_VAR 0 8
46188: PUSH
46189: LD_EXP 50
46193: PUSH
46194: LD_VAR 0 1
46198: ARRAY
46199: PPUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 30
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 30
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 30
46225: PUSH
46226: LD_INT 6
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: PPUSH
46239: CALL_OW 72
46243: PPUSH
46244: LD_VAR 0 7
46248: PPUSH
46249: CALL_OW 74
46253: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
46254: LD_VAR 0 7
46258: PPUSH
46259: LD_VAR 0 8
46263: PPUSH
46264: CALL_OW 250
46268: PPUSH
46269: LD_INT 3
46271: PPUSH
46272: LD_INT 5
46274: PPUSH
46275: CALL_OW 272
46279: PPUSH
46280: LD_VAR 0 8
46284: PPUSH
46285: CALL_OW 251
46289: PPUSH
46290: LD_INT 3
46292: PPUSH
46293: LD_INT 5
46295: PPUSH
46296: CALL_OW 273
46300: PPUSH
46301: CALL_OW 111
// SetTag ( i , 0 ) ;
46305: LD_VAR 0 7
46309: PPUSH
46310: LD_INT 0
46312: PPUSH
46313: CALL_OW 109
// solds := solds diff i ;
46317: LD_ADDR_VAR 0 2
46321: PUSH
46322: LD_VAR 0 2
46326: PUSH
46327: LD_VAR 0 7
46331: DIFF
46332: ST_TO_ADDR
// continue ;
46333: GO 46120
// end ; end ;
46335: GO 46120
46337: POP
46338: POP
// until solds ;
46339: LD_VAR 0 2
46343: IFFALSE 46015
// MC_Reset ( base , 18 ) ;
46345: LD_VAR 0 1
46349: PPUSH
46350: LD_INT 18
46352: PPUSH
46353: CALL 19708 0 2
// end ;
46357: LD_VAR 0 4
46361: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
46362: LD_INT 0
46364: PPUSH
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
46374: PPUSH
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
46380: LD_ADDR_VAR 0 12
46384: PUSH
46385: LD_EXP 50
46389: PUSH
46390: LD_VAR 0 1
46394: ARRAY
46395: PPUSH
46396: LD_INT 25
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PPUSH
46406: CALL_OW 72
46410: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46411: LD_ADDR_VAR 0 8
46415: PUSH
46416: LD_EXP 50
46420: PUSH
46421: LD_VAR 0 1
46425: ARRAY
46426: PPUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 25
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 25
46442: PUSH
46443: LD_INT 5
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 25
46452: PUSH
46453: LD_INT 8
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 25
46462: PUSH
46463: LD_INT 9
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: PPUSH
46477: CALL_OW 72
46481: ST_TO_ADDR
// if not defenders and not solds then
46482: LD_VAR 0 2
46486: NOT
46487: PUSH
46488: LD_VAR 0 8
46492: NOT
46493: AND
46494: IFFALSE 46498
// exit ;
46496: GO 47864
// depot_under_attack := false ;
46498: LD_ADDR_VAR 0 16
46502: PUSH
46503: LD_INT 0
46505: ST_TO_ADDR
// sold_defenders := [ ] ;
46506: LD_ADDR_VAR 0 17
46510: PUSH
46511: EMPTY
46512: ST_TO_ADDR
// if mechs then
46513: LD_VAR 0 12
46517: IFFALSE 46646
// for i in defenders do
46519: LD_ADDR_VAR 0 5
46523: PUSH
46524: LD_VAR 0 2
46528: PUSH
46529: FOR_IN
46530: IFFALSE 46644
// begin SetTag ( i , 20 ) ;
46532: LD_VAR 0 5
46536: PPUSH
46537: LD_INT 20
46539: PPUSH
46540: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
46544: LD_VAR 0 5
46548: PPUSH
46549: CALL_OW 263
46553: PUSH
46554: LD_INT 1
46556: EQUAL
46557: PUSH
46558: LD_VAR 0 5
46562: PPUSH
46563: CALL_OW 311
46567: NOT
46568: AND
46569: PUSH
46570: LD_VAR 0 12
46574: AND
46575: IFFALSE 46642
// begin un := mechs [ 1 ] ;
46577: LD_ADDR_VAR 0 10
46581: PUSH
46582: LD_VAR 0 12
46586: PUSH
46587: LD_INT 1
46589: ARRAY
46590: ST_TO_ADDR
// ComExitBuilding ( un ) ;
46591: LD_VAR 0 10
46595: PPUSH
46596: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
46600: LD_VAR 0 10
46604: PPUSH
46605: LD_VAR 0 5
46609: PPUSH
46610: CALL_OW 180
// SetTag ( un , 19 ) ;
46614: LD_VAR 0 10
46618: PPUSH
46619: LD_INT 19
46621: PPUSH
46622: CALL_OW 109
// mechs := mechs diff un ;
46626: LD_ADDR_VAR 0 12
46630: PUSH
46631: LD_VAR 0 12
46635: PUSH
46636: LD_VAR 0 10
46640: DIFF
46641: ST_TO_ADDR
// end ; end ;
46642: GO 46529
46644: POP
46645: POP
// if solds then
46646: LD_VAR 0 8
46650: IFFALSE 46709
// for i in solds do
46652: LD_ADDR_VAR 0 5
46656: PUSH
46657: LD_VAR 0 8
46661: PUSH
46662: FOR_IN
46663: IFFALSE 46707
// if not GetTag ( i ) then
46665: LD_VAR 0 5
46669: PPUSH
46670: CALL_OW 110
46674: NOT
46675: IFFALSE 46705
// begin defenders := defenders union i ;
46677: LD_ADDR_VAR 0 2
46681: PUSH
46682: LD_VAR 0 2
46686: PUSH
46687: LD_VAR 0 5
46691: UNION
46692: ST_TO_ADDR
// SetTag ( i , 18 ) ;
46693: LD_VAR 0 5
46697: PPUSH
46698: LD_INT 18
46700: PPUSH
46701: CALL_OW 109
// end ;
46705: GO 46662
46707: POP
46708: POP
// repeat wait ( 0 0$1 ) ;
46709: LD_INT 35
46711: PPUSH
46712: CALL_OW 67
// enemy := mc_scan [ base ] ;
46716: LD_ADDR_VAR 0 3
46720: PUSH
46721: LD_EXP 73
46725: PUSH
46726: LD_VAR 0 1
46730: ARRAY
46731: ST_TO_ADDR
// for i in defenders do
46732: LD_ADDR_VAR 0 5
46736: PUSH
46737: LD_VAR 0 2
46741: PUSH
46742: FOR_IN
46743: IFFALSE 47428
// begin e := NearestUnitToUnit ( enemy , i ) ;
46745: LD_ADDR_VAR 0 13
46749: PUSH
46750: LD_VAR 0 3
46754: PPUSH
46755: LD_VAR 0 5
46759: PPUSH
46760: CALL_OW 74
46764: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
46765: LD_ADDR_VAR 0 16
46769: PUSH
46770: LD_EXP 50
46774: PUSH
46775: LD_VAR 0 1
46779: ARRAY
46780: PPUSH
46781: LD_INT 2
46783: PUSH
46784: LD_INT 30
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 30
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: EMPTY
46801: LIST
46802: LIST
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: PPUSH
46809: CALL_OW 72
46813: NOT
46814: PUSH
46815: LD_EXP 50
46819: PUSH
46820: LD_VAR 0 1
46824: ARRAY
46825: PPUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 30
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 30
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: LIST
46853: PPUSH
46854: CALL_OW 72
46858: PPUSH
46859: CALL_OW 256
46863: PUSH
46864: LD_INT 600
46866: LESS
46867: OR
46868: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
46869: LD_VAR 0 5
46873: PPUSH
46874: CALL_OW 247
46878: PUSH
46879: LD_INT 2
46881: DOUBLE
46882: EQUAL
46883: IFTRUE 46887
46885: GO 47134
46887: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
46888: LD_VAR 0 5
46892: PPUSH
46893: CALL_OW 256
46897: PUSH
46898: LD_INT 650
46900: GREATER
46901: PUSH
46902: LD_VAR 0 5
46906: PPUSH
46907: LD_VAR 0 13
46911: PPUSH
46912: CALL_OW 296
46916: PUSH
46917: LD_INT 40
46919: LESS
46920: AND
46921: IFFALSE 46939
// ComAttackUnit ( i , e ) else
46923: LD_VAR 0 5
46927: PPUSH
46928: LD_VAR 0 13
46932: PPUSH
46933: CALL_OW 115
46937: GO 47017
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
46939: LD_VAR 0 5
46943: PPUSH
46944: LD_VAR 0 13
46948: PPUSH
46949: CALL_OW 296
46953: PUSH
46954: LD_INT 30
46956: GREATEREQUAL
46957: PUSH
46958: LD_VAR 0 5
46962: PPUSH
46963: CALL_OW 256
46967: PUSH
46968: LD_INT 650
46970: LESSEQUAL
46971: OR
46972: PUSH
46973: LD_VAR 0 5
46977: PPUSH
46978: LD_EXP 74
46982: PUSH
46983: LD_VAR 0 1
46987: ARRAY
46988: PPUSH
46989: CALL_OW 308
46993: NOT
46994: AND
46995: IFFALSE 47017
// ComMoveToArea ( i , mc_parking [ base ] ) ;
46997: LD_VAR 0 5
47001: PPUSH
47002: LD_EXP 74
47006: PUSH
47007: LD_VAR 0 1
47011: ARRAY
47012: PPUSH
47013: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
47017: LD_VAR 0 5
47021: PPUSH
47022: CALL_OW 256
47026: PUSH
47027: LD_INT 998
47029: LESS
47030: PUSH
47031: LD_VAR 0 5
47035: PPUSH
47036: CALL_OW 263
47040: PUSH
47041: LD_INT 1
47043: EQUAL
47044: AND
47045: PUSH
47046: LD_VAR 0 5
47050: PPUSH
47051: CALL_OW 311
47055: AND
47056: PUSH
47057: LD_VAR 0 5
47061: PPUSH
47062: LD_EXP 74
47066: PUSH
47067: LD_VAR 0 1
47071: ARRAY
47072: PPUSH
47073: CALL_OW 308
47077: AND
47078: IFFALSE 47132
// begin mech := IsDrivenBy ( i ) ;
47080: LD_ADDR_VAR 0 9
47084: PUSH
47085: LD_VAR 0 5
47089: PPUSH
47090: CALL_OW 311
47094: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
47095: LD_VAR 0 9
47099: PPUSH
47100: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
47104: LD_VAR 0 9
47108: PPUSH
47109: LD_VAR 0 5
47113: PPUSH
47114: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
47118: LD_VAR 0 9
47122: PPUSH
47123: LD_VAR 0 5
47127: PPUSH
47128: CALL_OW 180
// end ; end ; unit_human :
47132: GO 47399
47134: LD_INT 1
47136: DOUBLE
47137: EQUAL
47138: IFTRUE 47142
47140: GO 47398
47142: POP
// begin b := IsInUnit ( i ) ;
47143: LD_ADDR_VAR 0 18
47147: PUSH
47148: LD_VAR 0 5
47152: PPUSH
47153: CALL_OW 310
47157: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
47158: LD_ADDR_VAR 0 19
47162: PUSH
47163: LD_VAR 0 18
47167: NOT
47168: PUSH
47169: LD_VAR 0 18
47173: PPUSH
47174: CALL_OW 266
47178: PUSH
47179: LD_INT 32
47181: PUSH
47182: LD_INT 31
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: IN
47189: OR
47190: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
47191: LD_VAR 0 16
47195: PUSH
47196: LD_VAR 0 2
47200: PPUSH
47201: LD_INT 21
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PPUSH
47211: CALL_OW 72
47215: PUSH
47216: LD_INT 1
47218: LESSEQUAL
47219: OR
47220: PUSH
47221: LD_VAR 0 19
47225: AND
47226: PUSH
47227: LD_VAR 0 5
47231: PUSH
47232: LD_VAR 0 17
47236: IN
47237: NOT
47238: AND
47239: IFFALSE 47332
// begin if b then
47241: LD_VAR 0 18
47245: IFFALSE 47294
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
47247: LD_VAR 0 18
47251: PPUSH
47252: LD_VAR 0 3
47256: PPUSH
47257: LD_VAR 0 18
47261: PPUSH
47262: CALL_OW 74
47266: PPUSH
47267: CALL_OW 296
47271: PUSH
47272: LD_INT 10
47274: LESS
47275: PUSH
47276: LD_VAR 0 18
47280: PPUSH
47281: CALL_OW 461
47285: PUSH
47286: LD_INT 7
47288: NONEQUAL
47289: AND
47290: IFFALSE 47294
// continue ;
47292: GO 46742
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
47294: LD_ADDR_VAR 0 17
47298: PUSH
47299: LD_VAR 0 17
47303: PPUSH
47304: LD_VAR 0 17
47308: PUSH
47309: LD_INT 1
47311: PLUS
47312: PPUSH
47313: LD_VAR 0 5
47317: PPUSH
47318: CALL_OW 1
47322: ST_TO_ADDR
// ComExitBuilding ( i ) ;
47323: LD_VAR 0 5
47327: PPUSH
47328: CALL_OW 122
// end ; if sold_defenders then
47332: LD_VAR 0 17
47336: IFFALSE 47396
// if i in sold_defenders then
47338: LD_VAR 0 5
47342: PUSH
47343: LD_VAR 0 17
47347: IN
47348: IFFALSE 47396
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
47350: LD_VAR 0 5
47354: PPUSH
47355: CALL_OW 314
47359: NOT
47360: PUSH
47361: LD_VAR 0 5
47365: PPUSH
47366: LD_VAR 0 13
47370: PPUSH
47371: CALL_OW 296
47375: PUSH
47376: LD_INT 30
47378: LESS
47379: AND
47380: IFFALSE 47396
// ComAttackUnit ( i , e ) ;
47382: LD_VAR 0 5
47386: PPUSH
47387: LD_VAR 0 13
47391: PPUSH
47392: CALL_OW 115
// end ; end ; end ;
47396: GO 47399
47398: POP
// if IsDead ( i ) then
47399: LD_VAR 0 5
47403: PPUSH
47404: CALL_OW 301
47408: IFFALSE 47426
// defenders := defenders diff i ;
47410: LD_ADDR_VAR 0 2
47414: PUSH
47415: LD_VAR 0 2
47419: PUSH
47420: LD_VAR 0 5
47424: DIFF
47425: ST_TO_ADDR
// end ;
47426: GO 46742
47428: POP
47429: POP
// until not enemy or not defenders ;
47430: LD_VAR 0 3
47434: NOT
47435: PUSH
47436: LD_VAR 0 2
47440: NOT
47441: OR
47442: IFFALSE 46709
// MC_Reset ( base , 18 ) ;
47444: LD_VAR 0 1
47448: PPUSH
47449: LD_INT 18
47451: PPUSH
47452: CALL 19708 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
47456: LD_ADDR_VAR 0 2
47460: PUSH
47461: LD_VAR 0 2
47465: PUSH
47466: LD_VAR 0 2
47470: PPUSH
47471: LD_INT 2
47473: PUSH
47474: LD_INT 25
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 25
47486: PUSH
47487: LD_INT 5
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 25
47496: PUSH
47497: LD_INT 8
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 25
47506: PUSH
47507: LD_INT 9
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: PPUSH
47521: CALL_OW 72
47525: DIFF
47526: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
47527: LD_VAR 0 3
47531: NOT
47532: PUSH
47533: LD_VAR 0 2
47537: PPUSH
47538: LD_INT 21
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PPUSH
47548: CALL_OW 72
47552: AND
47553: IFFALSE 47815
// begin tmp := FilterByTag ( defenders , 19 ) ;
47555: LD_ADDR_VAR 0 11
47559: PUSH
47560: LD_VAR 0 2
47564: PPUSH
47565: LD_INT 19
47567: PPUSH
47568: CALL 84162 0 2
47572: ST_TO_ADDR
// if tmp then
47573: LD_VAR 0 11
47577: IFFALSE 47647
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
47579: LD_ADDR_VAR 0 11
47583: PUSH
47584: LD_VAR 0 11
47588: PPUSH
47589: LD_INT 25
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PPUSH
47599: CALL_OW 72
47603: ST_TO_ADDR
// if tmp then
47604: LD_VAR 0 11
47608: IFFALSE 47647
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
47610: LD_ADDR_EXP 62
47614: PUSH
47615: LD_EXP 62
47619: PPUSH
47620: LD_VAR 0 1
47624: PPUSH
47625: LD_EXP 62
47629: PUSH
47630: LD_VAR 0 1
47634: ARRAY
47635: PUSH
47636: LD_VAR 0 11
47640: UNION
47641: PPUSH
47642: CALL_OW 1
47646: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
47647: LD_VAR 0 1
47651: PPUSH
47652: LD_INT 19
47654: PPUSH
47655: CALL 19708 0 2
// repeat wait ( 0 0$1 ) ;
47659: LD_INT 35
47661: PPUSH
47662: CALL_OW 67
// for i in defenders do
47666: LD_ADDR_VAR 0 5
47670: PUSH
47671: LD_VAR 0 2
47675: PUSH
47676: FOR_IN
47677: IFFALSE 47766
// begin if not IsInArea ( i , mc_parking [ base ] ) then
47679: LD_VAR 0 5
47683: PPUSH
47684: LD_EXP 74
47688: PUSH
47689: LD_VAR 0 1
47693: ARRAY
47694: PPUSH
47695: CALL_OW 308
47699: NOT
47700: IFFALSE 47724
// ComMoveToArea ( i , mc_parking [ base ] ) else
47702: LD_VAR 0 5
47706: PPUSH
47707: LD_EXP 74
47711: PUSH
47712: LD_VAR 0 1
47716: ARRAY
47717: PPUSH
47718: CALL_OW 113
47722: GO 47764
// if GetControl ( i ) = control_manual then
47724: LD_VAR 0 5
47728: PPUSH
47729: CALL_OW 263
47733: PUSH
47734: LD_INT 1
47736: EQUAL
47737: IFFALSE 47764
// if IsDrivenBy ( i ) then
47739: LD_VAR 0 5
47743: PPUSH
47744: CALL_OW 311
47748: IFFALSE 47764
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
47750: LD_VAR 0 5
47754: PPUSH
47755: CALL_OW 311
47759: PPUSH
47760: CALL_OW 121
// end ;
47764: GO 47676
47766: POP
47767: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
47768: LD_VAR 0 2
47772: PPUSH
47773: LD_INT 95
47775: PUSH
47776: LD_EXP 74
47780: PUSH
47781: LD_VAR 0 1
47785: ARRAY
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PPUSH
47791: CALL_OW 72
47795: PUSH
47796: LD_VAR 0 2
47800: EQUAL
47801: PUSH
47802: LD_EXP 73
47806: PUSH
47807: LD_VAR 0 1
47811: ARRAY
47812: OR
47813: IFFALSE 47659
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
47815: LD_ADDR_EXP 72
47819: PUSH
47820: LD_EXP 72
47824: PPUSH
47825: LD_VAR 0 1
47829: PPUSH
47830: LD_EXP 72
47834: PUSH
47835: LD_VAR 0 1
47839: ARRAY
47840: PUSH
47841: LD_VAR 0 2
47845: UNION
47846: PPUSH
47847: CALL_OW 1
47851: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
47852: LD_VAR 0 1
47856: PPUSH
47857: LD_INT 20
47859: PPUSH
47860: CALL 19708 0 2
// end ;
47864: LD_VAR 0 4
47868: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
47869: LD_INT 0
47871: PPUSH
47872: PPUSH
47873: PPUSH
47874: PPUSH
// result := false ;
47875: LD_ADDR_VAR 0 2
47879: PUSH
47880: LD_INT 0
47882: ST_TO_ADDR
// side := GetSide ( unit ) ;
47883: LD_ADDR_VAR 0 3
47887: PUSH
47888: LD_VAR 0 1
47892: PPUSH
47893: CALL_OW 255
47897: ST_TO_ADDR
// nat := GetNation ( unit ) ;
47898: LD_ADDR_VAR 0 4
47902: PUSH
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 248
47912: ST_TO_ADDR
// case nat of 1 :
47913: LD_VAR 0 4
47917: PUSH
47918: LD_INT 1
47920: DOUBLE
47921: EQUAL
47922: IFTRUE 47926
47924: GO 47937
47926: POP
// tech := tech_lassight ; 2 :
47927: LD_ADDR_VAR 0 5
47931: PUSH
47932: LD_INT 12
47934: ST_TO_ADDR
47935: GO 47976
47937: LD_INT 2
47939: DOUBLE
47940: EQUAL
47941: IFTRUE 47945
47943: GO 47956
47945: POP
// tech := tech_mortar ; 3 :
47946: LD_ADDR_VAR 0 5
47950: PUSH
47951: LD_INT 41
47953: ST_TO_ADDR
47954: GO 47976
47956: LD_INT 3
47958: DOUBLE
47959: EQUAL
47960: IFTRUE 47964
47962: GO 47975
47964: POP
// tech := tech_bazooka ; end ;
47965: LD_ADDR_VAR 0 5
47969: PUSH
47970: LD_INT 44
47972: ST_TO_ADDR
47973: GO 47976
47975: POP
// if Researched ( side , tech ) then
47976: LD_VAR 0 3
47980: PPUSH
47981: LD_VAR 0 5
47985: PPUSH
47986: CALL_OW 325
47990: IFFALSE 48017
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
47992: LD_ADDR_VAR 0 2
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: LD_INT 8
48002: PUSH
48003: LD_INT 9
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: LIST
48010: PUSH
48011: LD_VAR 0 4
48015: ARRAY
48016: ST_TO_ADDR
// end ;
48017: LD_VAR 0 2
48021: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48022: LD_INT 0
48024: PPUSH
48025: PPUSH
48026: PPUSH
// if not mines then
48027: LD_VAR 0 2
48031: NOT
48032: IFFALSE 48036
// exit ;
48034: GO 48180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48036: LD_ADDR_VAR 0 5
48040: PUSH
48041: LD_INT 81
48043: PUSH
48044: LD_VAR 0 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 21
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 69
48078: ST_TO_ADDR
// for i in mines do
48079: LD_ADDR_VAR 0 4
48083: PUSH
48084: LD_VAR 0 2
48088: PUSH
48089: FOR_IN
48090: IFFALSE 48178
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48092: LD_VAR 0 4
48096: PUSH
48097: LD_INT 1
48099: ARRAY
48100: PPUSH
48101: LD_VAR 0 4
48105: PUSH
48106: LD_INT 2
48108: ARRAY
48109: PPUSH
48110: CALL_OW 458
48114: NOT
48115: IFFALSE 48119
// continue ;
48117: GO 48089
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48119: LD_VAR 0 4
48123: PUSH
48124: LD_INT 1
48126: ARRAY
48127: PPUSH
48128: LD_VAR 0 4
48132: PUSH
48133: LD_INT 2
48135: ARRAY
48136: PPUSH
48137: CALL_OW 428
48141: PUSH
48142: LD_VAR 0 5
48146: IN
48147: IFFALSE 48176
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48149: LD_VAR 0 4
48153: PUSH
48154: LD_INT 1
48156: ARRAY
48157: PPUSH
48158: LD_VAR 0 4
48162: PUSH
48163: LD_INT 2
48165: ARRAY
48166: PPUSH
48167: LD_VAR 0 1
48171: PPUSH
48172: CALL_OW 456
// end ;
48176: GO 48089
48178: POP
48179: POP
// end ;
48180: LD_VAR 0 3
48184: RET
// export function Count ( array ) ; var i ; begin
48185: LD_INT 0
48187: PPUSH
48188: PPUSH
// result := 0 ;
48189: LD_ADDR_VAR 0 2
48193: PUSH
48194: LD_INT 0
48196: ST_TO_ADDR
// for i in array do
48197: LD_ADDR_VAR 0 3
48201: PUSH
48202: LD_VAR 0 1
48206: PUSH
48207: FOR_IN
48208: IFFALSE 48232
// if i then
48210: LD_VAR 0 3
48214: IFFALSE 48230
// result := result + 1 ;
48216: LD_ADDR_VAR 0 2
48220: PUSH
48221: LD_VAR 0 2
48225: PUSH
48226: LD_INT 1
48228: PLUS
48229: ST_TO_ADDR
48230: GO 48207
48232: POP
48233: POP
// end ;
48234: LD_VAR 0 2
48238: RET
// export function IsEmpty ( building ) ; begin
48239: LD_INT 0
48241: PPUSH
// if not building then
48242: LD_VAR 0 1
48246: NOT
48247: IFFALSE 48251
// exit ;
48249: GO 48294
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48251: LD_ADDR_VAR 0 2
48255: PUSH
48256: LD_VAR 0 1
48260: PUSH
48261: LD_INT 22
48263: PUSH
48264: LD_VAR 0 1
48268: PPUSH
48269: CALL_OW 255
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 58
48280: PUSH
48281: EMPTY
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PPUSH
48288: CALL_OW 69
48292: IN
48293: ST_TO_ADDR
// end ;
48294: LD_VAR 0 2
48298: RET
// export function IsNotFull ( building ) ; begin
48299: LD_INT 0
48301: PPUSH
// if not building then
48302: LD_VAR 0 1
48306: NOT
48307: IFFALSE 48311
// exit ;
48309: GO 48330
// result := UnitsInside ( building ) < 6 ;
48311: LD_ADDR_VAR 0 2
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 313
48325: PUSH
48326: LD_INT 6
48328: LESS
48329: ST_TO_ADDR
// end ;
48330: LD_VAR 0 2
48334: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48335: LD_INT 0
48337: PPUSH
48338: PPUSH
48339: PPUSH
48340: PPUSH
// tmp := [ ] ;
48341: LD_ADDR_VAR 0 3
48345: PUSH
48346: EMPTY
48347: ST_TO_ADDR
// list := [ ] ;
48348: LD_ADDR_VAR 0 5
48352: PUSH
48353: EMPTY
48354: ST_TO_ADDR
// for i = 16 to 25 do
48355: LD_ADDR_VAR 0 4
48359: PUSH
48360: DOUBLE
48361: LD_INT 16
48363: DEC
48364: ST_TO_ADDR
48365: LD_INT 25
48367: PUSH
48368: FOR_TO
48369: IFFALSE 48442
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48371: LD_ADDR_VAR 0 3
48375: PUSH
48376: LD_VAR 0 3
48380: PUSH
48381: LD_INT 22
48383: PUSH
48384: LD_VAR 0 1
48388: PPUSH
48389: CALL_OW 255
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 91
48400: PUSH
48401: LD_VAR 0 1
48405: PUSH
48406: LD_INT 6
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 30
48416: PUSH
48417: LD_VAR 0 4
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: PPUSH
48434: CALL_OW 69
48438: ADD
48439: ST_TO_ADDR
48440: GO 48368
48442: POP
48443: POP
// for i = 1 to tmp do
48444: LD_ADDR_VAR 0 4
48448: PUSH
48449: DOUBLE
48450: LD_INT 1
48452: DEC
48453: ST_TO_ADDR
48454: LD_VAR 0 3
48458: PUSH
48459: FOR_TO
48460: IFFALSE 48548
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48462: LD_ADDR_VAR 0 5
48466: PUSH
48467: LD_VAR 0 5
48471: PUSH
48472: LD_VAR 0 3
48476: PUSH
48477: LD_VAR 0 4
48481: ARRAY
48482: PPUSH
48483: CALL_OW 266
48487: PUSH
48488: LD_VAR 0 3
48492: PUSH
48493: LD_VAR 0 4
48497: ARRAY
48498: PPUSH
48499: CALL_OW 250
48503: PUSH
48504: LD_VAR 0 3
48508: PUSH
48509: LD_VAR 0 4
48513: ARRAY
48514: PPUSH
48515: CALL_OW 251
48519: PUSH
48520: LD_VAR 0 3
48524: PUSH
48525: LD_VAR 0 4
48529: ARRAY
48530: PPUSH
48531: CALL_OW 254
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: ADD
48545: ST_TO_ADDR
48546: GO 48459
48548: POP
48549: POP
// result := list ;
48550: LD_ADDR_VAR 0 2
48554: PUSH
48555: LD_VAR 0 5
48559: ST_TO_ADDR
// end ;
48560: LD_VAR 0 2
48564: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48565: LD_INT 0
48567: PPUSH
48568: PPUSH
48569: PPUSH
48570: PPUSH
48571: PPUSH
48572: PPUSH
48573: PPUSH
// if not factory then
48574: LD_VAR 0 1
48578: NOT
48579: IFFALSE 48583
// exit ;
48581: GO 49108
// if control = control_apeman then
48583: LD_VAR 0 4
48587: PUSH
48588: LD_INT 5
48590: EQUAL
48591: IFFALSE 48700
// begin tmp := UnitsInside ( factory ) ;
48593: LD_ADDR_VAR 0 8
48597: PUSH
48598: LD_VAR 0 1
48602: PPUSH
48603: CALL_OW 313
48607: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48608: LD_VAR 0 8
48612: PPUSH
48613: LD_INT 25
48615: PUSH
48616: LD_INT 12
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PPUSH
48623: CALL_OW 72
48627: NOT
48628: IFFALSE 48638
// control := control_manual ;
48630: LD_ADDR_VAR 0 4
48634: PUSH
48635: LD_INT 1
48637: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48638: LD_ADDR_VAR 0 8
48642: PUSH
48643: LD_VAR 0 1
48647: PPUSH
48648: CALL 48335 0 1
48652: ST_TO_ADDR
// if tmp then
48653: LD_VAR 0 8
48657: IFFALSE 48700
// begin for i in tmp do
48659: LD_ADDR_VAR 0 7
48663: PUSH
48664: LD_VAR 0 8
48668: PUSH
48669: FOR_IN
48670: IFFALSE 48698
// if i [ 1 ] = b_ext_radar then
48672: LD_VAR 0 7
48676: PUSH
48677: LD_INT 1
48679: ARRAY
48680: PUSH
48681: LD_INT 20
48683: EQUAL
48684: IFFALSE 48696
// begin control := control_remote ;
48686: LD_ADDR_VAR 0 4
48690: PUSH
48691: LD_INT 2
48693: ST_TO_ADDR
// break ;
48694: GO 48698
// end ;
48696: GO 48669
48698: POP
48699: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48700: LD_VAR 0 1
48704: PPUSH
48705: LD_VAR 0 2
48709: PPUSH
48710: LD_VAR 0 3
48714: PPUSH
48715: LD_VAR 0 4
48719: PPUSH
48720: LD_VAR 0 5
48724: PPUSH
48725: CALL_OW 448
48729: IFFALSE 48764
// begin result := [ chassis , engine , control , weapon ] ;
48731: LD_ADDR_VAR 0 6
48735: PUSH
48736: LD_VAR 0 2
48740: PUSH
48741: LD_VAR 0 3
48745: PUSH
48746: LD_VAR 0 4
48750: PUSH
48751: LD_VAR 0 5
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: ST_TO_ADDR
// exit ;
48762: GO 49108
// end ; _chassis := AvailableChassisList ( factory ) ;
48764: LD_ADDR_VAR 0 9
48768: PUSH
48769: LD_VAR 0 1
48773: PPUSH
48774: CALL_OW 475
48778: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48779: LD_ADDR_VAR 0 11
48783: PUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 476
48793: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48794: LD_ADDR_VAR 0 12
48798: PUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: CALL_OW 477
48808: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
48809: LD_ADDR_VAR 0 10
48813: PUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: CALL_OW 478
48823: ST_TO_ADDR
// if not chassis in _chassis then
48824: LD_VAR 0 2
48828: PUSH
48829: LD_VAR 0 9
48833: IN
48834: NOT
48835: IFFALSE 48861
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
48837: LD_ADDR_VAR 0 2
48841: PUSH
48842: LD_VAR 0 9
48846: PUSH
48847: LD_INT 1
48849: PPUSH
48850: LD_VAR 0 9
48854: PPUSH
48855: CALL_OW 12
48859: ARRAY
48860: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
48861: LD_VAR 0 2
48865: PPUSH
48866: LD_VAR 0 3
48870: PPUSH
48871: CALL 49113 0 2
48875: NOT
48876: IFFALSE 48935
// repeat engine := _engine [ 1 ] ;
48878: LD_ADDR_VAR 0 3
48882: PUSH
48883: LD_VAR 0 11
48887: PUSH
48888: LD_INT 1
48890: ARRAY
48891: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
48892: LD_ADDR_VAR 0 11
48896: PUSH
48897: LD_VAR 0 11
48901: PPUSH
48902: LD_INT 1
48904: PPUSH
48905: CALL_OW 3
48909: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
48910: LD_VAR 0 2
48914: PPUSH
48915: LD_VAR 0 3
48919: PPUSH
48920: CALL 49113 0 2
48924: PUSH
48925: LD_VAR 0 11
48929: PUSH
48930: EMPTY
48931: EQUAL
48932: OR
48933: IFFALSE 48878
// if not control in _control then
48935: LD_VAR 0 4
48939: PUSH
48940: LD_VAR 0 12
48944: IN
48945: NOT
48946: IFFALSE 48972
// control := _control [ rand ( 1 , _control ) ] ;
48948: LD_ADDR_VAR 0 4
48952: PUSH
48953: LD_VAR 0 12
48957: PUSH
48958: LD_INT 1
48960: PPUSH
48961: LD_VAR 0 12
48965: PPUSH
48966: CALL_OW 12
48970: ARRAY
48971: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
48972: LD_VAR 0 2
48976: PPUSH
48977: LD_VAR 0 5
48981: PPUSH
48982: CALL 49333 0 2
48986: NOT
48987: IFFALSE 49046
// repeat weapon := _weapon [ 1 ] ;
48989: LD_ADDR_VAR 0 5
48993: PUSH
48994: LD_VAR 0 10
48998: PUSH
48999: LD_INT 1
49001: ARRAY
49002: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49003: LD_ADDR_VAR 0 10
49007: PUSH
49008: LD_VAR 0 10
49012: PPUSH
49013: LD_INT 1
49015: PPUSH
49016: CALL_OW 3
49020: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49021: LD_VAR 0 2
49025: PPUSH
49026: LD_VAR 0 5
49030: PPUSH
49031: CALL 49333 0 2
49035: PUSH
49036: LD_VAR 0 10
49040: PUSH
49041: EMPTY
49042: EQUAL
49043: OR
49044: IFFALSE 48989
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49046: LD_VAR 0 1
49050: PPUSH
49051: LD_VAR 0 2
49055: PPUSH
49056: LD_VAR 0 3
49060: PPUSH
49061: LD_VAR 0 4
49065: PPUSH
49066: LD_VAR 0 5
49070: PPUSH
49071: CALL_OW 448
49075: IFFALSE 49108
// result := [ chassis , engine , control , weapon ] ;
49077: LD_ADDR_VAR 0 6
49081: PUSH
49082: LD_VAR 0 2
49086: PUSH
49087: LD_VAR 0 3
49091: PUSH
49092: LD_VAR 0 4
49096: PUSH
49097: LD_VAR 0 5
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: ST_TO_ADDR
// end ;
49108: LD_VAR 0 6
49112: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49113: LD_INT 0
49115: PPUSH
// if not chassis or not engine then
49116: LD_VAR 0 1
49120: NOT
49121: PUSH
49122: LD_VAR 0 2
49126: NOT
49127: OR
49128: IFFALSE 49132
// exit ;
49130: GO 49328
// case engine of engine_solar :
49132: LD_VAR 0 2
49136: PUSH
49137: LD_INT 2
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49145
49143: GO 49183
49145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49146: LD_ADDR_VAR 0 3
49150: PUSH
49151: LD_INT 11
49153: PUSH
49154: LD_INT 12
49156: PUSH
49157: LD_INT 13
49159: PUSH
49160: LD_INT 14
49162: PUSH
49163: LD_INT 1
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 3
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: ST_TO_ADDR
49181: GO 49312
49183: LD_INT 1
49185: DOUBLE
49186: EQUAL
49187: IFTRUE 49191
49189: GO 49253
49191: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49192: LD_ADDR_VAR 0 3
49196: PUSH
49197: LD_INT 11
49199: PUSH
49200: LD_INT 12
49202: PUSH
49203: LD_INT 13
49205: PUSH
49206: LD_INT 14
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 3
49217: PUSH
49218: LD_INT 4
49220: PUSH
49221: LD_INT 5
49223: PUSH
49224: LD_INT 21
49226: PUSH
49227: LD_INT 23
49229: PUSH
49230: LD_INT 22
49232: PUSH
49233: LD_INT 24
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: ST_TO_ADDR
49251: GO 49312
49253: LD_INT 3
49255: DOUBLE
49256: EQUAL
49257: IFTRUE 49261
49259: GO 49311
49261: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49262: LD_ADDR_VAR 0 3
49266: PUSH
49267: LD_INT 13
49269: PUSH
49270: LD_INT 14
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: LD_INT 3
49278: PUSH
49279: LD_INT 4
49281: PUSH
49282: LD_INT 5
49284: PUSH
49285: LD_INT 21
49287: PUSH
49288: LD_INT 22
49290: PUSH
49291: LD_INT 23
49293: PUSH
49294: LD_INT 24
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: ST_TO_ADDR
49309: GO 49312
49311: POP
// result := ( chassis in result ) ;
49312: LD_ADDR_VAR 0 3
49316: PUSH
49317: LD_VAR 0 1
49321: PUSH
49322: LD_VAR 0 3
49326: IN
49327: ST_TO_ADDR
// end ;
49328: LD_VAR 0 3
49332: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49333: LD_INT 0
49335: PPUSH
// if not chassis or not weapon then
49336: LD_VAR 0 1
49340: NOT
49341: PUSH
49342: LD_VAR 0 2
49346: NOT
49347: OR
49348: IFFALSE 49352
// exit ;
49350: GO 50378
// case weapon of us_machine_gun :
49352: LD_VAR 0 2
49356: PUSH
49357: LD_INT 2
49359: DOUBLE
49360: EQUAL
49361: IFTRUE 49365
49363: GO 49395
49365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49366: LD_ADDR_VAR 0 3
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: LD_INT 3
49379: PUSH
49380: LD_INT 4
49382: PUSH
49383: LD_INT 5
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: ST_TO_ADDR
49393: GO 50362
49395: LD_INT 3
49397: DOUBLE
49398: EQUAL
49399: IFTRUE 49403
49401: GO 49433
49403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49404: LD_ADDR_VAR 0 3
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: LD_INT 2
49414: PUSH
49415: LD_INT 3
49417: PUSH
49418: LD_INT 4
49420: PUSH
49421: LD_INT 5
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: ST_TO_ADDR
49431: GO 50362
49433: LD_INT 11
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49441
49439: GO 49471
49441: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49442: LD_ADDR_VAR 0 3
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: LD_INT 3
49455: PUSH
49456: LD_INT 4
49458: PUSH
49459: LD_INT 5
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: ST_TO_ADDR
49469: GO 50362
49471: LD_INT 4
49473: DOUBLE
49474: EQUAL
49475: IFTRUE 49479
49477: GO 49505
49479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49480: LD_ADDR_VAR 0 3
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: LD_INT 4
49493: PUSH
49494: LD_INT 5
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: ST_TO_ADDR
49503: GO 50362
49505: LD_INT 5
49507: DOUBLE
49508: EQUAL
49509: IFTRUE 49513
49511: GO 49539
49513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49514: LD_ADDR_VAR 0 3
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 4
49527: PUSH
49528: LD_INT 5
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: ST_TO_ADDR
49537: GO 50362
49539: LD_INT 9
49541: DOUBLE
49542: EQUAL
49543: IFTRUE 49547
49545: GO 49573
49547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49548: LD_ADDR_VAR 0 3
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: LD_INT 4
49561: PUSH
49562: LD_INT 5
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: ST_TO_ADDR
49571: GO 50362
49573: LD_INT 7
49575: DOUBLE
49576: EQUAL
49577: IFTRUE 49581
49579: GO 49607
49581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49582: LD_ADDR_VAR 0 3
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 4
49595: PUSH
49596: LD_INT 5
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
49605: GO 50362
49607: LD_INT 12
49609: DOUBLE
49610: EQUAL
49611: IFTRUE 49615
49613: GO 49641
49615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49616: LD_ADDR_VAR 0 3
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 3
49626: PUSH
49627: LD_INT 4
49629: PUSH
49630: LD_INT 5
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: ST_TO_ADDR
49639: GO 50362
49641: LD_INT 13
49643: DOUBLE
49644: EQUAL
49645: IFTRUE 49649
49647: GO 49675
49649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49650: LD_ADDR_VAR 0 3
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: LD_INT 4
49663: PUSH
49664: LD_INT 5
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
49673: GO 50362
49675: LD_INT 14
49677: DOUBLE
49678: EQUAL
49679: IFTRUE 49683
49681: GO 49701
49683: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49684: LD_ADDR_VAR 0 3
49688: PUSH
49689: LD_INT 4
49691: PUSH
49692: LD_INT 5
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: ST_TO_ADDR
49699: GO 50362
49701: LD_INT 6
49703: DOUBLE
49704: EQUAL
49705: IFTRUE 49709
49707: GO 49727
49709: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49710: LD_ADDR_VAR 0 3
49714: PUSH
49715: LD_INT 4
49717: PUSH
49718: LD_INT 5
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: ST_TO_ADDR
49725: GO 50362
49727: LD_INT 10
49729: DOUBLE
49730: EQUAL
49731: IFTRUE 49735
49733: GO 49753
49735: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49736: LD_ADDR_VAR 0 3
49740: PUSH
49741: LD_INT 4
49743: PUSH
49744: LD_INT 5
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: ST_TO_ADDR
49751: GO 50362
49753: LD_INT 22
49755: DOUBLE
49756: EQUAL
49757: IFTRUE 49761
49759: GO 49787
49761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49762: LD_ADDR_VAR 0 3
49766: PUSH
49767: LD_INT 11
49769: PUSH
49770: LD_INT 12
49772: PUSH
49773: LD_INT 13
49775: PUSH
49776: LD_INT 14
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: ST_TO_ADDR
49785: GO 50362
49787: LD_INT 23
49789: DOUBLE
49790: EQUAL
49791: IFTRUE 49795
49793: GO 49821
49795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_INT 11
49803: PUSH
49804: LD_INT 12
49806: PUSH
49807: LD_INT 13
49809: PUSH
49810: LD_INT 14
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: ST_TO_ADDR
49819: GO 50362
49821: LD_INT 24
49823: DOUBLE
49824: EQUAL
49825: IFTRUE 49829
49827: GO 49855
49829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
49830: LD_ADDR_VAR 0 3
49834: PUSH
49835: LD_INT 11
49837: PUSH
49838: LD_INT 12
49840: PUSH
49841: LD_INT 13
49843: PUSH
49844: LD_INT 14
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: ST_TO_ADDR
49853: GO 50362
49855: LD_INT 30
49857: DOUBLE
49858: EQUAL
49859: IFTRUE 49863
49861: GO 49889
49863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
49864: LD_ADDR_VAR 0 3
49868: PUSH
49869: LD_INT 11
49871: PUSH
49872: LD_INT 12
49874: PUSH
49875: LD_INT 13
49877: PUSH
49878: LD_INT 14
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: ST_TO_ADDR
49887: GO 50362
49889: LD_INT 25
49891: DOUBLE
49892: EQUAL
49893: IFTRUE 49897
49895: GO 49915
49897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
49898: LD_ADDR_VAR 0 3
49902: PUSH
49903: LD_INT 13
49905: PUSH
49906: LD_INT 14
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: ST_TO_ADDR
49913: GO 50362
49915: LD_INT 27
49917: DOUBLE
49918: EQUAL
49919: IFTRUE 49923
49921: GO 49941
49923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
49924: LD_ADDR_VAR 0 3
49928: PUSH
49929: LD_INT 13
49931: PUSH
49932: LD_INT 14
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: ST_TO_ADDR
49939: GO 50362
49941: LD_INT 28
49943: DOUBLE
49944: EQUAL
49945: IFTRUE 49949
49947: GO 49967
49949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
49950: LD_ADDR_VAR 0 3
49954: PUSH
49955: LD_INT 13
49957: PUSH
49958: LD_INT 14
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: ST_TO_ADDR
49965: GO 50362
49967: LD_INT 29
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49975
49973: GO 49993
49975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
49976: LD_ADDR_VAR 0 3
49980: PUSH
49981: LD_INT 13
49983: PUSH
49984: LD_INT 14
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: ST_TO_ADDR
49991: GO 50362
49993: LD_INT 31
49995: DOUBLE
49996: EQUAL
49997: IFTRUE 50001
49999: GO 50019
50001: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50002: LD_ADDR_VAR 0 3
50006: PUSH
50007: LD_INT 13
50009: PUSH
50010: LD_INT 14
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: ST_TO_ADDR
50017: GO 50362
50019: LD_INT 26
50021: DOUBLE
50022: EQUAL
50023: IFTRUE 50027
50025: GO 50045
50027: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50028: LD_ADDR_VAR 0 3
50032: PUSH
50033: LD_INT 13
50035: PUSH
50036: LD_INT 14
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: ST_TO_ADDR
50043: GO 50362
50045: LD_INT 42
50047: DOUBLE
50048: EQUAL
50049: IFTRUE 50053
50051: GO 50079
50053: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50054: LD_ADDR_VAR 0 3
50058: PUSH
50059: LD_INT 21
50061: PUSH
50062: LD_INT 22
50064: PUSH
50065: LD_INT 23
50067: PUSH
50068: LD_INT 24
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: ST_TO_ADDR
50077: GO 50362
50079: LD_INT 43
50081: DOUBLE
50082: EQUAL
50083: IFTRUE 50087
50085: GO 50113
50087: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50088: LD_ADDR_VAR 0 3
50092: PUSH
50093: LD_INT 21
50095: PUSH
50096: LD_INT 22
50098: PUSH
50099: LD_INT 23
50101: PUSH
50102: LD_INT 24
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: ST_TO_ADDR
50111: GO 50362
50113: LD_INT 44
50115: DOUBLE
50116: EQUAL
50117: IFTRUE 50121
50119: GO 50147
50121: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50122: LD_ADDR_VAR 0 3
50126: PUSH
50127: LD_INT 21
50129: PUSH
50130: LD_INT 22
50132: PUSH
50133: LD_INT 23
50135: PUSH
50136: LD_INT 24
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: ST_TO_ADDR
50145: GO 50362
50147: LD_INT 45
50149: DOUBLE
50150: EQUAL
50151: IFTRUE 50155
50153: GO 50181
50155: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50156: LD_ADDR_VAR 0 3
50160: PUSH
50161: LD_INT 21
50163: PUSH
50164: LD_INT 22
50166: PUSH
50167: LD_INT 23
50169: PUSH
50170: LD_INT 24
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
50179: GO 50362
50181: LD_INT 49
50183: DOUBLE
50184: EQUAL
50185: IFTRUE 50189
50187: GO 50215
50189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50190: LD_ADDR_VAR 0 3
50194: PUSH
50195: LD_INT 21
50197: PUSH
50198: LD_INT 22
50200: PUSH
50201: LD_INT 23
50203: PUSH
50204: LD_INT 24
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: ST_TO_ADDR
50213: GO 50362
50215: LD_INT 51
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50223
50221: GO 50249
50223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50224: LD_ADDR_VAR 0 3
50228: PUSH
50229: LD_INT 21
50231: PUSH
50232: LD_INT 22
50234: PUSH
50235: LD_INT 23
50237: PUSH
50238: LD_INT 24
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: ST_TO_ADDR
50247: GO 50362
50249: LD_INT 52
50251: DOUBLE
50252: EQUAL
50253: IFTRUE 50257
50255: GO 50283
50257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50258: LD_ADDR_VAR 0 3
50262: PUSH
50263: LD_INT 21
50265: PUSH
50266: LD_INT 22
50268: PUSH
50269: LD_INT 23
50271: PUSH
50272: LD_INT 24
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: ST_TO_ADDR
50281: GO 50362
50283: LD_INT 53
50285: DOUBLE
50286: EQUAL
50287: IFTRUE 50291
50289: GO 50309
50291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50292: LD_ADDR_VAR 0 3
50296: PUSH
50297: LD_INT 23
50299: PUSH
50300: LD_INT 24
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: ST_TO_ADDR
50307: GO 50362
50309: LD_INT 46
50311: DOUBLE
50312: EQUAL
50313: IFTRUE 50317
50315: GO 50335
50317: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50318: LD_ADDR_VAR 0 3
50322: PUSH
50323: LD_INT 23
50325: PUSH
50326: LD_INT 24
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: ST_TO_ADDR
50333: GO 50362
50335: LD_INT 47
50337: DOUBLE
50338: EQUAL
50339: IFTRUE 50343
50341: GO 50361
50343: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50344: LD_ADDR_VAR 0 3
50348: PUSH
50349: LD_INT 23
50351: PUSH
50352: LD_INT 24
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: ST_TO_ADDR
50359: GO 50362
50361: POP
// result := ( chassis in result ) ;
50362: LD_ADDR_VAR 0 3
50366: PUSH
50367: LD_VAR 0 1
50371: PUSH
50372: LD_VAR 0 3
50376: IN
50377: ST_TO_ADDR
// end ;
50378: LD_VAR 0 3
50382: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50383: LD_INT 0
50385: PPUSH
50386: PPUSH
50387: PPUSH
50388: PPUSH
50389: PPUSH
50390: PPUSH
50391: PPUSH
// result := array ;
50392: LD_ADDR_VAR 0 5
50396: PUSH
50397: LD_VAR 0 1
50401: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50402: LD_VAR 0 1
50406: NOT
50407: PUSH
50408: LD_VAR 0 2
50412: NOT
50413: OR
50414: PUSH
50415: LD_VAR 0 3
50419: NOT
50420: OR
50421: PUSH
50422: LD_VAR 0 2
50426: PUSH
50427: LD_VAR 0 1
50431: GREATER
50432: OR
50433: PUSH
50434: LD_VAR 0 3
50438: PUSH
50439: LD_VAR 0 1
50443: GREATER
50444: OR
50445: IFFALSE 50449
// exit ;
50447: GO 50745
// if direction then
50449: LD_VAR 0 4
50453: IFFALSE 50517
// begin d := 1 ;
50455: LD_ADDR_VAR 0 9
50459: PUSH
50460: LD_INT 1
50462: ST_TO_ADDR
// if i_from > i_to then
50463: LD_VAR 0 2
50467: PUSH
50468: LD_VAR 0 3
50472: GREATER
50473: IFFALSE 50499
// length := ( array - i_from ) + i_to else
50475: LD_ADDR_VAR 0 11
50479: PUSH
50480: LD_VAR 0 1
50484: PUSH
50485: LD_VAR 0 2
50489: MINUS
50490: PUSH
50491: LD_VAR 0 3
50495: PLUS
50496: ST_TO_ADDR
50497: GO 50515
// length := i_to - i_from ;
50499: LD_ADDR_VAR 0 11
50503: PUSH
50504: LD_VAR 0 3
50508: PUSH
50509: LD_VAR 0 2
50513: MINUS
50514: ST_TO_ADDR
// end else
50515: GO 50578
// begin d := - 1 ;
50517: LD_ADDR_VAR 0 9
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: ST_TO_ADDR
// if i_from > i_to then
50526: LD_VAR 0 2
50530: PUSH
50531: LD_VAR 0 3
50535: GREATER
50536: IFFALSE 50556
// length := i_from - i_to else
50538: LD_ADDR_VAR 0 11
50542: PUSH
50543: LD_VAR 0 2
50547: PUSH
50548: LD_VAR 0 3
50552: MINUS
50553: ST_TO_ADDR
50554: GO 50578
// length := ( array - i_to ) + i_from ;
50556: LD_ADDR_VAR 0 11
50560: PUSH
50561: LD_VAR 0 1
50565: PUSH
50566: LD_VAR 0 3
50570: MINUS
50571: PUSH
50572: LD_VAR 0 2
50576: PLUS
50577: ST_TO_ADDR
// end ; if not length then
50578: LD_VAR 0 11
50582: NOT
50583: IFFALSE 50587
// exit ;
50585: GO 50745
// tmp := array ;
50587: LD_ADDR_VAR 0 10
50591: PUSH
50592: LD_VAR 0 1
50596: ST_TO_ADDR
// for i = 1 to length do
50597: LD_ADDR_VAR 0 6
50601: PUSH
50602: DOUBLE
50603: LD_INT 1
50605: DEC
50606: ST_TO_ADDR
50607: LD_VAR 0 11
50611: PUSH
50612: FOR_TO
50613: IFFALSE 50733
// begin for j = 1 to array do
50615: LD_ADDR_VAR 0 7
50619: PUSH
50620: DOUBLE
50621: LD_INT 1
50623: DEC
50624: ST_TO_ADDR
50625: LD_VAR 0 1
50629: PUSH
50630: FOR_TO
50631: IFFALSE 50719
// begin k := j + d ;
50633: LD_ADDR_VAR 0 8
50637: PUSH
50638: LD_VAR 0 7
50642: PUSH
50643: LD_VAR 0 9
50647: PLUS
50648: ST_TO_ADDR
// if k > array then
50649: LD_VAR 0 8
50653: PUSH
50654: LD_VAR 0 1
50658: GREATER
50659: IFFALSE 50669
// k := 1 ;
50661: LD_ADDR_VAR 0 8
50665: PUSH
50666: LD_INT 1
50668: ST_TO_ADDR
// if not k then
50669: LD_VAR 0 8
50673: NOT
50674: IFFALSE 50686
// k := array ;
50676: LD_ADDR_VAR 0 8
50680: PUSH
50681: LD_VAR 0 1
50685: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50686: LD_ADDR_VAR 0 10
50690: PUSH
50691: LD_VAR 0 10
50695: PPUSH
50696: LD_VAR 0 8
50700: PPUSH
50701: LD_VAR 0 1
50705: PUSH
50706: LD_VAR 0 7
50710: ARRAY
50711: PPUSH
50712: CALL_OW 1
50716: ST_TO_ADDR
// end ;
50717: GO 50630
50719: POP
50720: POP
// array := tmp ;
50721: LD_ADDR_VAR 0 1
50725: PUSH
50726: LD_VAR 0 10
50730: ST_TO_ADDR
// end ;
50731: GO 50612
50733: POP
50734: POP
// result := array ;
50735: LD_ADDR_VAR 0 5
50739: PUSH
50740: LD_VAR 0 1
50744: ST_TO_ADDR
// end ;
50745: LD_VAR 0 5
50749: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
50750: LD_INT 0
50752: PPUSH
50753: PPUSH
// result := 0 ;
50754: LD_ADDR_VAR 0 3
50758: PUSH
50759: LD_INT 0
50761: ST_TO_ADDR
// if not array or not value in array then
50762: LD_VAR 0 1
50766: NOT
50767: PUSH
50768: LD_VAR 0 2
50772: PUSH
50773: LD_VAR 0 1
50777: IN
50778: NOT
50779: OR
50780: IFFALSE 50784
// exit ;
50782: GO 50838
// for i = 1 to array do
50784: LD_ADDR_VAR 0 4
50788: PUSH
50789: DOUBLE
50790: LD_INT 1
50792: DEC
50793: ST_TO_ADDR
50794: LD_VAR 0 1
50798: PUSH
50799: FOR_TO
50800: IFFALSE 50836
// if value = array [ i ] then
50802: LD_VAR 0 2
50806: PUSH
50807: LD_VAR 0 1
50811: PUSH
50812: LD_VAR 0 4
50816: ARRAY
50817: EQUAL
50818: IFFALSE 50834
// begin result := i ;
50820: LD_ADDR_VAR 0 3
50824: PUSH
50825: LD_VAR 0 4
50829: ST_TO_ADDR
// exit ;
50830: POP
50831: POP
50832: GO 50838
// end ;
50834: GO 50799
50836: POP
50837: POP
// end ;
50838: LD_VAR 0 3
50842: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
50843: LD_INT 0
50845: PPUSH
// vc_chassis := chassis ;
50846: LD_ADDR_OWVAR 37
50850: PUSH
50851: LD_VAR 0 1
50855: ST_TO_ADDR
// vc_engine := engine ;
50856: LD_ADDR_OWVAR 39
50860: PUSH
50861: LD_VAR 0 2
50865: ST_TO_ADDR
// vc_control := control ;
50866: LD_ADDR_OWVAR 38
50870: PUSH
50871: LD_VAR 0 3
50875: ST_TO_ADDR
// vc_weapon := weapon ;
50876: LD_ADDR_OWVAR 40
50880: PUSH
50881: LD_VAR 0 4
50885: ST_TO_ADDR
// vc_fuel_battery := fuel ;
50886: LD_ADDR_OWVAR 41
50890: PUSH
50891: LD_VAR 0 5
50895: ST_TO_ADDR
// end ;
50896: LD_VAR 0 6
50900: RET
// export function WantPlant ( unit ) ; var task ; begin
50901: LD_INT 0
50903: PPUSH
50904: PPUSH
// result := false ;
50905: LD_ADDR_VAR 0 2
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
50913: LD_ADDR_VAR 0 3
50917: PUSH
50918: LD_VAR 0 1
50922: PPUSH
50923: CALL_OW 437
50927: ST_TO_ADDR
// if task then
50928: LD_VAR 0 3
50932: IFFALSE 50960
// if task [ 1 ] [ 1 ] = p then
50934: LD_VAR 0 3
50938: PUSH
50939: LD_INT 1
50941: ARRAY
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: PUSH
50947: LD_STRING p
50949: EQUAL
50950: IFFALSE 50960
// result := true ;
50952: LD_ADDR_VAR 0 2
50956: PUSH
50957: LD_INT 1
50959: ST_TO_ADDR
// end ;
50960: LD_VAR 0 2
50964: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
50965: LD_INT 0
50967: PPUSH
50968: PPUSH
50969: PPUSH
50970: PPUSH
// if pos < 1 then
50971: LD_VAR 0 2
50975: PUSH
50976: LD_INT 1
50978: LESS
50979: IFFALSE 50983
// exit ;
50981: GO 51286
// if pos = 1 then
50983: LD_VAR 0 2
50987: PUSH
50988: LD_INT 1
50990: EQUAL
50991: IFFALSE 51024
// result := Replace ( arr , pos [ 1 ] , value ) else
50993: LD_ADDR_VAR 0 4
50997: PUSH
50998: LD_VAR 0 1
51002: PPUSH
51003: LD_VAR 0 2
51007: PUSH
51008: LD_INT 1
51010: ARRAY
51011: PPUSH
51012: LD_VAR 0 3
51016: PPUSH
51017: CALL_OW 1
51021: ST_TO_ADDR
51022: GO 51286
// begin tmp := arr ;
51024: LD_ADDR_VAR 0 6
51028: PUSH
51029: LD_VAR 0 1
51033: ST_TO_ADDR
// s_arr := [ tmp ] ;
51034: LD_ADDR_VAR 0 7
51038: PUSH
51039: LD_VAR 0 6
51043: PUSH
51044: EMPTY
51045: LIST
51046: ST_TO_ADDR
// for i = 1 to pos - 1 do
51047: LD_ADDR_VAR 0 5
51051: PUSH
51052: DOUBLE
51053: LD_INT 1
51055: DEC
51056: ST_TO_ADDR
51057: LD_VAR 0 2
51061: PUSH
51062: LD_INT 1
51064: MINUS
51065: PUSH
51066: FOR_TO
51067: IFFALSE 51112
// begin tmp := tmp [ pos [ i ] ] ;
51069: LD_ADDR_VAR 0 6
51073: PUSH
51074: LD_VAR 0 6
51078: PUSH
51079: LD_VAR 0 2
51083: PUSH
51084: LD_VAR 0 5
51088: ARRAY
51089: ARRAY
51090: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51091: LD_ADDR_VAR 0 7
51095: PUSH
51096: LD_VAR 0 7
51100: PUSH
51101: LD_VAR 0 6
51105: PUSH
51106: EMPTY
51107: LIST
51108: ADD
51109: ST_TO_ADDR
// end ;
51110: GO 51066
51112: POP
51113: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51114: LD_ADDR_VAR 0 6
51118: PUSH
51119: LD_VAR 0 6
51123: PPUSH
51124: LD_VAR 0 2
51128: PUSH
51129: LD_VAR 0 2
51133: ARRAY
51134: PPUSH
51135: LD_VAR 0 3
51139: PPUSH
51140: CALL_OW 1
51144: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51145: LD_ADDR_VAR 0 7
51149: PUSH
51150: LD_VAR 0 7
51154: PPUSH
51155: LD_VAR 0 7
51159: PPUSH
51160: LD_VAR 0 6
51164: PPUSH
51165: CALL_OW 1
51169: ST_TO_ADDR
// for i = s_arr downto 2 do
51170: LD_ADDR_VAR 0 5
51174: PUSH
51175: DOUBLE
51176: LD_VAR 0 7
51180: INC
51181: ST_TO_ADDR
51182: LD_INT 2
51184: PUSH
51185: FOR_DOWNTO
51186: IFFALSE 51270
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51188: LD_ADDR_VAR 0 6
51192: PUSH
51193: LD_VAR 0 7
51197: PUSH
51198: LD_VAR 0 5
51202: PUSH
51203: LD_INT 1
51205: MINUS
51206: ARRAY
51207: PPUSH
51208: LD_VAR 0 2
51212: PUSH
51213: LD_VAR 0 5
51217: PUSH
51218: LD_INT 1
51220: MINUS
51221: ARRAY
51222: PPUSH
51223: LD_VAR 0 7
51227: PUSH
51228: LD_VAR 0 5
51232: ARRAY
51233: PPUSH
51234: CALL_OW 1
51238: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51239: LD_ADDR_VAR 0 7
51243: PUSH
51244: LD_VAR 0 7
51248: PPUSH
51249: LD_VAR 0 5
51253: PUSH
51254: LD_INT 1
51256: MINUS
51257: PPUSH
51258: LD_VAR 0 6
51262: PPUSH
51263: CALL_OW 1
51267: ST_TO_ADDR
// end ;
51268: GO 51185
51270: POP
51271: POP
// result := s_arr [ 1 ] ;
51272: LD_ADDR_VAR 0 4
51276: PUSH
51277: LD_VAR 0 7
51281: PUSH
51282: LD_INT 1
51284: ARRAY
51285: ST_TO_ADDR
// end ; end ;
51286: LD_VAR 0 4
51290: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51291: LD_INT 0
51293: PPUSH
51294: PPUSH
// if not list then
51295: LD_VAR 0 1
51299: NOT
51300: IFFALSE 51304
// exit ;
51302: GO 51395
// i := list [ pos1 ] ;
51304: LD_ADDR_VAR 0 5
51308: PUSH
51309: LD_VAR 0 1
51313: PUSH
51314: LD_VAR 0 2
51318: ARRAY
51319: ST_TO_ADDR
// if not i then
51320: LD_VAR 0 5
51324: NOT
51325: IFFALSE 51329
// exit ;
51327: GO 51395
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51329: LD_ADDR_VAR 0 1
51333: PUSH
51334: LD_VAR 0 1
51338: PPUSH
51339: LD_VAR 0 2
51343: PPUSH
51344: LD_VAR 0 1
51348: PUSH
51349: LD_VAR 0 3
51353: ARRAY
51354: PPUSH
51355: CALL_OW 1
51359: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51360: LD_ADDR_VAR 0 1
51364: PUSH
51365: LD_VAR 0 1
51369: PPUSH
51370: LD_VAR 0 3
51374: PPUSH
51375: LD_VAR 0 5
51379: PPUSH
51380: CALL_OW 1
51384: ST_TO_ADDR
// result := list ;
51385: LD_ADDR_VAR 0 4
51389: PUSH
51390: LD_VAR 0 1
51394: ST_TO_ADDR
// end ;
51395: LD_VAR 0 4
51399: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51400: LD_INT 0
51402: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51403: LD_ADDR_VAR 0 5
51407: PUSH
51408: LD_VAR 0 1
51412: PPUSH
51413: CALL_OW 250
51417: PPUSH
51418: LD_VAR 0 1
51422: PPUSH
51423: CALL_OW 251
51427: PPUSH
51428: LD_VAR 0 2
51432: PPUSH
51433: LD_VAR 0 3
51437: PPUSH
51438: LD_VAR 0 4
51442: PPUSH
51443: CALL 51453 0 5
51447: ST_TO_ADDR
// end ;
51448: LD_VAR 0 5
51452: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51453: LD_INT 0
51455: PPUSH
51456: PPUSH
51457: PPUSH
51458: PPUSH
// if not list then
51459: LD_VAR 0 3
51463: NOT
51464: IFFALSE 51468
// exit ;
51466: GO 51856
// result := [ ] ;
51468: LD_ADDR_VAR 0 6
51472: PUSH
51473: EMPTY
51474: ST_TO_ADDR
// for i in list do
51475: LD_ADDR_VAR 0 7
51479: PUSH
51480: LD_VAR 0 3
51484: PUSH
51485: FOR_IN
51486: IFFALSE 51688
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51488: LD_ADDR_VAR 0 9
51492: PUSH
51493: LD_VAR 0 7
51497: PPUSH
51498: LD_VAR 0 1
51502: PPUSH
51503: LD_VAR 0 2
51507: PPUSH
51508: CALL_OW 297
51512: ST_TO_ADDR
// if not result then
51513: LD_VAR 0 6
51517: NOT
51518: IFFALSE 51544
// result := [ [ i , tmp ] ] else
51520: LD_ADDR_VAR 0 6
51524: PUSH
51525: LD_VAR 0 7
51529: PUSH
51530: LD_VAR 0 9
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: ST_TO_ADDR
51542: GO 51686
// begin if result [ result ] [ 2 ] < tmp then
51544: LD_VAR 0 6
51548: PUSH
51549: LD_VAR 0 6
51553: ARRAY
51554: PUSH
51555: LD_INT 2
51557: ARRAY
51558: PUSH
51559: LD_VAR 0 9
51563: LESS
51564: IFFALSE 51606
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51566: LD_ADDR_VAR 0 6
51570: PUSH
51571: LD_VAR 0 6
51575: PPUSH
51576: LD_VAR 0 6
51580: PUSH
51581: LD_INT 1
51583: PLUS
51584: PPUSH
51585: LD_VAR 0 7
51589: PUSH
51590: LD_VAR 0 9
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PPUSH
51599: CALL_OW 2
51603: ST_TO_ADDR
51604: GO 51686
// for j = 1 to result do
51606: LD_ADDR_VAR 0 8
51610: PUSH
51611: DOUBLE
51612: LD_INT 1
51614: DEC
51615: ST_TO_ADDR
51616: LD_VAR 0 6
51620: PUSH
51621: FOR_TO
51622: IFFALSE 51684
// begin if tmp < result [ j ] [ 2 ] then
51624: LD_VAR 0 9
51628: PUSH
51629: LD_VAR 0 6
51633: PUSH
51634: LD_VAR 0 8
51638: ARRAY
51639: PUSH
51640: LD_INT 2
51642: ARRAY
51643: LESS
51644: IFFALSE 51682
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51646: LD_ADDR_VAR 0 6
51650: PUSH
51651: LD_VAR 0 6
51655: PPUSH
51656: LD_VAR 0 8
51660: PPUSH
51661: LD_VAR 0 7
51665: PUSH
51666: LD_VAR 0 9
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PPUSH
51675: CALL_OW 2
51679: ST_TO_ADDR
// break ;
51680: GO 51684
// end ; end ;
51682: GO 51621
51684: POP
51685: POP
// end ; end ;
51686: GO 51485
51688: POP
51689: POP
// if result and not asc then
51690: LD_VAR 0 6
51694: PUSH
51695: LD_VAR 0 4
51699: NOT
51700: AND
51701: IFFALSE 51776
// begin tmp := result ;
51703: LD_ADDR_VAR 0 9
51707: PUSH
51708: LD_VAR 0 6
51712: ST_TO_ADDR
// for i = tmp downto 1 do
51713: LD_ADDR_VAR 0 7
51717: PUSH
51718: DOUBLE
51719: LD_VAR 0 9
51723: INC
51724: ST_TO_ADDR
51725: LD_INT 1
51727: PUSH
51728: FOR_DOWNTO
51729: IFFALSE 51774
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51731: LD_ADDR_VAR 0 6
51735: PUSH
51736: LD_VAR 0 6
51740: PPUSH
51741: LD_VAR 0 9
51745: PUSH
51746: LD_VAR 0 7
51750: MINUS
51751: PUSH
51752: LD_INT 1
51754: PLUS
51755: PPUSH
51756: LD_VAR 0 9
51760: PUSH
51761: LD_VAR 0 7
51765: ARRAY
51766: PPUSH
51767: CALL_OW 1
51771: ST_TO_ADDR
51772: GO 51728
51774: POP
51775: POP
// end ; tmp := [ ] ;
51776: LD_ADDR_VAR 0 9
51780: PUSH
51781: EMPTY
51782: ST_TO_ADDR
// if mode then
51783: LD_VAR 0 5
51787: IFFALSE 51856
// begin for i = 1 to result do
51789: LD_ADDR_VAR 0 7
51793: PUSH
51794: DOUBLE
51795: LD_INT 1
51797: DEC
51798: ST_TO_ADDR
51799: LD_VAR 0 6
51803: PUSH
51804: FOR_TO
51805: IFFALSE 51844
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
51807: LD_ADDR_VAR 0 9
51811: PUSH
51812: LD_VAR 0 9
51816: PPUSH
51817: LD_VAR 0 7
51821: PPUSH
51822: LD_VAR 0 6
51826: PUSH
51827: LD_VAR 0 7
51831: ARRAY
51832: PUSH
51833: LD_INT 1
51835: ARRAY
51836: PPUSH
51837: CALL_OW 1
51841: ST_TO_ADDR
51842: GO 51804
51844: POP
51845: POP
// result := tmp ;
51846: LD_ADDR_VAR 0 6
51850: PUSH
51851: LD_VAR 0 9
51855: ST_TO_ADDR
// end ; end ;
51856: LD_VAR 0 6
51860: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
51861: LD_INT 0
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
51869: LD_ADDR_VAR 0 5
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: LD_INT 0
51882: PUSH
51883: EMPTY
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: ST_TO_ADDR
// if not x or not y then
51891: LD_VAR 0 2
51895: NOT
51896: PUSH
51897: LD_VAR 0 3
51901: NOT
51902: OR
51903: IFFALSE 51907
// exit ;
51905: GO 53553
// if not range then
51907: LD_VAR 0 4
51911: NOT
51912: IFFALSE 51922
// range := 10 ;
51914: LD_ADDR_VAR 0 4
51918: PUSH
51919: LD_INT 10
51921: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51922: LD_ADDR_VAR 0 8
51926: PUSH
51927: LD_INT 81
51929: PUSH
51930: LD_VAR 0 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 92
51941: PUSH
51942: LD_VAR 0 2
51946: PUSH
51947: LD_VAR 0 3
51951: PUSH
51952: LD_VAR 0 4
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 21
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: PPUSH
51985: CALL_OW 69
51989: ST_TO_ADDR
// if not tmp then
51990: LD_VAR 0 8
51994: NOT
51995: IFFALSE 51999
// exit ;
51997: GO 53553
// for i in tmp do
51999: LD_ADDR_VAR 0 6
52003: PUSH
52004: LD_VAR 0 8
52008: PUSH
52009: FOR_IN
52010: IFFALSE 53528
// begin points := [ 0 , 0 , 0 ] ;
52012: LD_ADDR_VAR 0 9
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: ST_TO_ADDR
// bpoints := 1 ;
52031: LD_ADDR_VAR 0 10
52035: PUSH
52036: LD_INT 1
52038: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52039: LD_VAR 0 6
52043: PPUSH
52044: CALL_OW 247
52048: PUSH
52049: LD_INT 1
52051: DOUBLE
52052: EQUAL
52053: IFTRUE 52057
52055: GO 52635
52057: POP
// begin if GetClass ( i ) = 1 then
52058: LD_VAR 0 6
52062: PPUSH
52063: CALL_OW 257
52067: PUSH
52068: LD_INT 1
52070: EQUAL
52071: IFFALSE 52092
// points := [ 10 , 5 , 3 ] ;
52073: LD_ADDR_VAR 0 9
52077: PUSH
52078: LD_INT 10
52080: PUSH
52081: LD_INT 5
52083: PUSH
52084: LD_INT 3
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52092: LD_VAR 0 6
52096: PPUSH
52097: CALL_OW 257
52101: PUSH
52102: LD_INT 2
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 4
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: IN
52116: IFFALSE 52137
// points := [ 3 , 2 , 1 ] ;
52118: LD_ADDR_VAR 0 9
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52137: LD_VAR 0 6
52141: PPUSH
52142: CALL_OW 257
52146: PUSH
52147: LD_INT 5
52149: EQUAL
52150: IFFALSE 52171
// points := [ 130 , 5 , 2 ] ;
52152: LD_ADDR_VAR 0 9
52156: PUSH
52157: LD_INT 130
52159: PUSH
52160: LD_INT 5
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52171: LD_VAR 0 6
52175: PPUSH
52176: CALL_OW 257
52180: PUSH
52181: LD_INT 8
52183: EQUAL
52184: IFFALSE 52205
// points := [ 35 , 35 , 30 ] ;
52186: LD_ADDR_VAR 0 9
52190: PUSH
52191: LD_INT 35
52193: PUSH
52194: LD_INT 35
52196: PUSH
52197: LD_INT 30
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52205: LD_VAR 0 6
52209: PPUSH
52210: CALL_OW 257
52214: PUSH
52215: LD_INT 9
52217: EQUAL
52218: IFFALSE 52239
// points := [ 20 , 55 , 40 ] ;
52220: LD_ADDR_VAR 0 9
52224: PUSH
52225: LD_INT 20
52227: PUSH
52228: LD_INT 55
52230: PUSH
52231: LD_INT 40
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52239: LD_VAR 0 6
52243: PPUSH
52244: CALL_OW 257
52248: PUSH
52249: LD_INT 12
52251: PUSH
52252: LD_INT 16
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: IN
52259: IFFALSE 52280
// points := [ 5 , 3 , 2 ] ;
52261: LD_ADDR_VAR 0 9
52265: PUSH
52266: LD_INT 5
52268: PUSH
52269: LD_INT 3
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: LIST
52279: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52280: LD_VAR 0 6
52284: PPUSH
52285: CALL_OW 257
52289: PUSH
52290: LD_INT 17
52292: EQUAL
52293: IFFALSE 52314
// points := [ 100 , 50 , 75 ] ;
52295: LD_ADDR_VAR 0 9
52299: PUSH
52300: LD_INT 100
52302: PUSH
52303: LD_INT 50
52305: PUSH
52306: LD_INT 75
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52314: LD_VAR 0 6
52318: PPUSH
52319: CALL_OW 257
52323: PUSH
52324: LD_INT 15
52326: EQUAL
52327: IFFALSE 52348
// points := [ 10 , 5 , 3 ] ;
52329: LD_ADDR_VAR 0 9
52333: PUSH
52334: LD_INT 10
52336: PUSH
52337: LD_INT 5
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52348: LD_VAR 0 6
52352: PPUSH
52353: CALL_OW 257
52357: PUSH
52358: LD_INT 14
52360: EQUAL
52361: IFFALSE 52382
// points := [ 10 , 0 , 0 ] ;
52363: LD_ADDR_VAR 0 9
52367: PUSH
52368: LD_INT 10
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52382: LD_VAR 0 6
52386: PPUSH
52387: CALL_OW 257
52391: PUSH
52392: LD_INT 11
52394: EQUAL
52395: IFFALSE 52416
// points := [ 30 , 10 , 5 ] ;
52397: LD_ADDR_VAR 0 9
52401: PUSH
52402: LD_INT 30
52404: PUSH
52405: LD_INT 10
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52416: LD_VAR 0 1
52420: PPUSH
52421: LD_INT 5
52423: PPUSH
52424: CALL_OW 321
52428: PUSH
52429: LD_INT 2
52431: EQUAL
52432: IFFALSE 52449
// bpoints := bpoints * 1.8 ;
52434: LD_ADDR_VAR 0 10
52438: PUSH
52439: LD_VAR 0 10
52443: PUSH
52444: LD_REAL  1.80000000000000E+0000
52447: MUL
52448: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52449: LD_VAR 0 6
52453: PPUSH
52454: CALL_OW 257
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: IN
52477: PUSH
52478: LD_VAR 0 1
52482: PPUSH
52483: LD_INT 51
52485: PPUSH
52486: CALL_OW 321
52490: PUSH
52491: LD_INT 2
52493: EQUAL
52494: AND
52495: IFFALSE 52512
// bpoints := bpoints * 1.2 ;
52497: LD_ADDR_VAR 0 10
52501: PUSH
52502: LD_VAR 0 10
52506: PUSH
52507: LD_REAL  1.20000000000000E+0000
52510: MUL
52511: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52512: LD_VAR 0 6
52516: PPUSH
52517: CALL_OW 257
52521: PUSH
52522: LD_INT 5
52524: PUSH
52525: LD_INT 7
52527: PUSH
52528: LD_INT 9
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: LIST
52535: IN
52536: PUSH
52537: LD_VAR 0 1
52541: PPUSH
52542: LD_INT 52
52544: PPUSH
52545: CALL_OW 321
52549: PUSH
52550: LD_INT 2
52552: EQUAL
52553: AND
52554: IFFALSE 52571
// bpoints := bpoints * 1.5 ;
52556: LD_ADDR_VAR 0 10
52560: PUSH
52561: LD_VAR 0 10
52565: PUSH
52566: LD_REAL  1.50000000000000E+0000
52569: MUL
52570: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52571: LD_VAR 0 1
52575: PPUSH
52576: LD_INT 66
52578: PPUSH
52579: CALL_OW 321
52583: PUSH
52584: LD_INT 2
52586: EQUAL
52587: IFFALSE 52604
// bpoints := bpoints * 1.1 ;
52589: LD_ADDR_VAR 0 10
52593: PUSH
52594: LD_VAR 0 10
52598: PUSH
52599: LD_REAL  1.10000000000000E+0000
52602: MUL
52603: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52604: LD_ADDR_VAR 0 10
52608: PUSH
52609: LD_VAR 0 10
52613: PUSH
52614: LD_VAR 0 6
52618: PPUSH
52619: LD_INT 1
52621: PPUSH
52622: CALL_OW 259
52626: PUSH
52627: LD_REAL  1.15000000000000E+0000
52630: MUL
52631: MUL
52632: ST_TO_ADDR
// end ; unit_vehicle :
52633: GO 53457
52635: LD_INT 2
52637: DOUBLE
52638: EQUAL
52639: IFTRUE 52643
52641: GO 53445
52643: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52644: LD_VAR 0 6
52648: PPUSH
52649: CALL_OW 264
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 42
52659: PUSH
52660: LD_INT 24
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: IN
52668: IFFALSE 52689
// points := [ 25 , 5 , 3 ] ;
52670: LD_ADDR_VAR 0 9
52674: PUSH
52675: LD_INT 25
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52689: LD_VAR 0 6
52693: PPUSH
52694: CALL_OW 264
52698: PUSH
52699: LD_INT 4
52701: PUSH
52702: LD_INT 43
52704: PUSH
52705: LD_INT 25
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: IN
52713: IFFALSE 52734
// points := [ 40 , 15 , 5 ] ;
52715: LD_ADDR_VAR 0 9
52719: PUSH
52720: LD_INT 40
52722: PUSH
52723: LD_INT 15
52725: PUSH
52726: LD_INT 5
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52734: LD_VAR 0 6
52738: PPUSH
52739: CALL_OW 264
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: LD_INT 23
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: IN
52754: IFFALSE 52775
// points := [ 7 , 25 , 8 ] ;
52756: LD_ADDR_VAR 0 9
52760: PUSH
52761: LD_INT 7
52763: PUSH
52764: LD_INT 25
52766: PUSH
52767: LD_INT 8
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: LIST
52774: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
52775: LD_VAR 0 6
52779: PPUSH
52780: CALL_OW 264
52784: PUSH
52785: LD_INT 5
52787: PUSH
52788: LD_INT 27
52790: PUSH
52791: LD_INT 44
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: IN
52799: IFFALSE 52820
// points := [ 14 , 50 , 16 ] ;
52801: LD_ADDR_VAR 0 9
52805: PUSH
52806: LD_INT 14
52808: PUSH
52809: LD_INT 50
52811: PUSH
52812: LD_INT 16
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
52820: LD_VAR 0 6
52824: PPUSH
52825: CALL_OW 264
52829: PUSH
52830: LD_INT 6
52832: PUSH
52833: LD_INT 46
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: IN
52840: IFFALSE 52861
// points := [ 32 , 120 , 70 ] ;
52842: LD_ADDR_VAR 0 9
52846: PUSH
52847: LD_INT 32
52849: PUSH
52850: LD_INT 120
52852: PUSH
52853: LD_INT 70
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
52861: LD_VAR 0 6
52865: PPUSH
52866: CALL_OW 264
52870: PUSH
52871: LD_INT 7
52873: PUSH
52874: LD_INT 28
52876: PUSH
52877: LD_INT 45
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: IN
52885: IFFALSE 52906
// points := [ 35 , 20 , 45 ] ;
52887: LD_ADDR_VAR 0 9
52891: PUSH
52892: LD_INT 35
52894: PUSH
52895: LD_INT 20
52897: PUSH
52898: LD_INT 45
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
52906: LD_VAR 0 6
52910: PPUSH
52911: CALL_OW 264
52915: PUSH
52916: LD_INT 47
52918: PUSH
52919: EMPTY
52920: LIST
52921: IN
52922: IFFALSE 52943
// points := [ 67 , 45 , 75 ] ;
52924: LD_ADDR_VAR 0 9
52928: PUSH
52929: LD_INT 67
52931: PUSH
52932: LD_INT 45
52934: PUSH
52935: LD_INT 75
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
52943: LD_VAR 0 6
52947: PPUSH
52948: CALL_OW 264
52952: PUSH
52953: LD_INT 26
52955: PUSH
52956: EMPTY
52957: LIST
52958: IN
52959: IFFALSE 52980
// points := [ 120 , 30 , 80 ] ;
52961: LD_ADDR_VAR 0 9
52965: PUSH
52966: LD_INT 120
52968: PUSH
52969: LD_INT 30
52971: PUSH
52972: LD_INT 80
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
52980: LD_VAR 0 6
52984: PPUSH
52985: CALL_OW 264
52989: PUSH
52990: LD_INT 22
52992: PUSH
52993: EMPTY
52994: LIST
52995: IN
52996: IFFALSE 53017
// points := [ 40 , 1 , 1 ] ;
52998: LD_ADDR_VAR 0 9
53002: PUSH
53003: LD_INT 40
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 1
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53017: LD_VAR 0 6
53021: PPUSH
53022: CALL_OW 264
53026: PUSH
53027: LD_INT 29
53029: PUSH
53030: EMPTY
53031: LIST
53032: IN
53033: IFFALSE 53054
// points := [ 70 , 200 , 400 ] ;
53035: LD_ADDR_VAR 0 9
53039: PUSH
53040: LD_INT 70
53042: PUSH
53043: LD_INT 200
53045: PUSH
53046: LD_INT 400
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53054: LD_VAR 0 6
53058: PPUSH
53059: CALL_OW 264
53063: PUSH
53064: LD_INT 14
53066: PUSH
53067: LD_INT 53
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: IN
53074: IFFALSE 53095
// points := [ 40 , 10 , 20 ] ;
53076: LD_ADDR_VAR 0 9
53080: PUSH
53081: LD_INT 40
53083: PUSH
53084: LD_INT 10
53086: PUSH
53087: LD_INT 20
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53095: LD_VAR 0 6
53099: PPUSH
53100: CALL_OW 264
53104: PUSH
53105: LD_INT 9
53107: PUSH
53108: EMPTY
53109: LIST
53110: IN
53111: IFFALSE 53132
// points := [ 5 , 70 , 20 ] ;
53113: LD_ADDR_VAR 0 9
53117: PUSH
53118: LD_INT 5
53120: PUSH
53121: LD_INT 70
53123: PUSH
53124: LD_INT 20
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: LIST
53131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53132: LD_VAR 0 6
53136: PPUSH
53137: CALL_OW 264
53141: PUSH
53142: LD_INT 10
53144: PUSH
53145: EMPTY
53146: LIST
53147: IN
53148: IFFALSE 53169
// points := [ 35 , 110 , 70 ] ;
53150: LD_ADDR_VAR 0 9
53154: PUSH
53155: LD_INT 35
53157: PUSH
53158: LD_INT 110
53160: PUSH
53161: LD_INT 70
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53169: LD_VAR 0 6
53173: PPUSH
53174: CALL_OW 265
53178: PUSH
53179: LD_INT 25
53181: EQUAL
53182: IFFALSE 53203
// points := [ 80 , 65 , 100 ] ;
53184: LD_ADDR_VAR 0 9
53188: PUSH
53189: LD_INT 80
53191: PUSH
53192: LD_INT 65
53194: PUSH
53195: LD_INT 100
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: LIST
53202: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53203: LD_VAR 0 6
53207: PPUSH
53208: CALL_OW 263
53212: PUSH
53213: LD_INT 1
53215: EQUAL
53216: IFFALSE 53251
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53218: LD_ADDR_VAR 0 10
53222: PUSH
53223: LD_VAR 0 10
53227: PUSH
53228: LD_VAR 0 6
53232: PPUSH
53233: CALL_OW 311
53237: PPUSH
53238: LD_INT 3
53240: PPUSH
53241: CALL_OW 259
53245: PUSH
53246: LD_INT 4
53248: MUL
53249: MUL
53250: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53251: LD_VAR 0 6
53255: PPUSH
53256: CALL_OW 263
53260: PUSH
53261: LD_INT 2
53263: EQUAL
53264: IFFALSE 53315
// begin j := IsControledBy ( i ) ;
53266: LD_ADDR_VAR 0 7
53270: PUSH
53271: LD_VAR 0 6
53275: PPUSH
53276: CALL_OW 312
53280: ST_TO_ADDR
// if j then
53281: LD_VAR 0 7
53285: IFFALSE 53315
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53287: LD_ADDR_VAR 0 10
53291: PUSH
53292: LD_VAR 0 10
53296: PUSH
53297: LD_VAR 0 7
53301: PPUSH
53302: LD_INT 3
53304: PPUSH
53305: CALL_OW 259
53309: PUSH
53310: LD_INT 3
53312: MUL
53313: MUL
53314: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53315: LD_VAR 0 6
53319: PPUSH
53320: CALL_OW 264
53324: PUSH
53325: LD_INT 5
53327: PUSH
53328: LD_INT 6
53330: PUSH
53331: LD_INT 46
53333: PUSH
53334: LD_INT 44
53336: PUSH
53337: LD_INT 47
53339: PUSH
53340: LD_INT 45
53342: PUSH
53343: LD_INT 28
53345: PUSH
53346: LD_INT 7
53348: PUSH
53349: LD_INT 27
53351: PUSH
53352: LD_INT 29
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: IN
53367: PUSH
53368: LD_VAR 0 1
53372: PPUSH
53373: LD_INT 52
53375: PPUSH
53376: CALL_OW 321
53380: PUSH
53381: LD_INT 2
53383: EQUAL
53384: AND
53385: IFFALSE 53402
// bpoints := bpoints * 1.2 ;
53387: LD_ADDR_VAR 0 10
53391: PUSH
53392: LD_VAR 0 10
53396: PUSH
53397: LD_REAL  1.20000000000000E+0000
53400: MUL
53401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53402: LD_VAR 0 6
53406: PPUSH
53407: CALL_OW 264
53411: PUSH
53412: LD_INT 6
53414: PUSH
53415: LD_INT 46
53417: PUSH
53418: LD_INT 47
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: IN
53426: IFFALSE 53443
// bpoints := bpoints * 1.2 ;
53428: LD_ADDR_VAR 0 10
53432: PUSH
53433: LD_VAR 0 10
53437: PUSH
53438: LD_REAL  1.20000000000000E+0000
53441: MUL
53442: ST_TO_ADDR
// end ; unit_building :
53443: GO 53457
53445: LD_INT 3
53447: DOUBLE
53448: EQUAL
53449: IFTRUE 53453
53451: GO 53456
53453: POP
// ; end ;
53454: GO 53457
53456: POP
// for j = 1 to 3 do
53457: LD_ADDR_VAR 0 7
53461: PUSH
53462: DOUBLE
53463: LD_INT 1
53465: DEC
53466: ST_TO_ADDR
53467: LD_INT 3
53469: PUSH
53470: FOR_TO
53471: IFFALSE 53524
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53473: LD_ADDR_VAR 0 5
53477: PUSH
53478: LD_VAR 0 5
53482: PPUSH
53483: LD_VAR 0 7
53487: PPUSH
53488: LD_VAR 0 5
53492: PUSH
53493: LD_VAR 0 7
53497: ARRAY
53498: PUSH
53499: LD_VAR 0 9
53503: PUSH
53504: LD_VAR 0 7
53508: ARRAY
53509: PUSH
53510: LD_VAR 0 10
53514: MUL
53515: PLUS
53516: PPUSH
53517: CALL_OW 1
53521: ST_TO_ADDR
53522: GO 53470
53524: POP
53525: POP
// end ;
53526: GO 52009
53528: POP
53529: POP
// result := Replace ( result , 4 , tmp ) ;
53530: LD_ADDR_VAR 0 5
53534: PUSH
53535: LD_VAR 0 5
53539: PPUSH
53540: LD_INT 4
53542: PPUSH
53543: LD_VAR 0 8
53547: PPUSH
53548: CALL_OW 1
53552: ST_TO_ADDR
// end ;
53553: LD_VAR 0 5
53557: RET
// export function DangerAtRange ( unit , range ) ; begin
53558: LD_INT 0
53560: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53561: LD_ADDR_VAR 0 3
53565: PUSH
53566: LD_VAR 0 1
53570: PPUSH
53571: CALL_OW 255
53575: PPUSH
53576: LD_VAR 0 1
53580: PPUSH
53581: CALL_OW 250
53585: PPUSH
53586: LD_VAR 0 1
53590: PPUSH
53591: CALL_OW 251
53595: PPUSH
53596: LD_VAR 0 2
53600: PPUSH
53601: CALL 51861 0 4
53605: ST_TO_ADDR
// end ;
53606: LD_VAR 0 3
53610: RET
// export function DangerInArea ( side , area ) ; begin
53611: LD_INT 0
53613: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53614: LD_ADDR_VAR 0 3
53618: PUSH
53619: LD_VAR 0 2
53623: PPUSH
53624: LD_INT 81
53626: PUSH
53627: LD_VAR 0 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PPUSH
53636: CALL_OW 70
53640: ST_TO_ADDR
// end ;
53641: LD_VAR 0 3
53645: RET
// export function IsExtension ( b ) ; begin
53646: LD_INT 0
53648: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53649: LD_ADDR_VAR 0 2
53653: PUSH
53654: LD_VAR 0 1
53658: PUSH
53659: LD_INT 23
53661: PUSH
53662: LD_INT 20
53664: PUSH
53665: LD_INT 22
53667: PUSH
53668: LD_INT 17
53670: PUSH
53671: LD_INT 24
53673: PUSH
53674: LD_INT 21
53676: PUSH
53677: LD_INT 19
53679: PUSH
53680: LD_INT 16
53682: PUSH
53683: LD_INT 25
53685: PUSH
53686: LD_INT 18
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: IN
53701: ST_TO_ADDR
// end ;
53702: LD_VAR 0 2
53706: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
53707: LD_INT 0
53709: PPUSH
53710: PPUSH
53711: PPUSH
// result := [ ] ;
53712: LD_ADDR_VAR 0 3
53716: PUSH
53717: EMPTY
53718: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53719: LD_ADDR_VAR 0 4
53723: PUSH
53724: LD_VAR 0 2
53728: PPUSH
53729: LD_INT 21
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PPUSH
53739: CALL_OW 70
53743: ST_TO_ADDR
// if not tmp then
53744: LD_VAR 0 4
53748: NOT
53749: IFFALSE 53753
// exit ;
53751: GO 53811
// for i in tmp do
53753: LD_ADDR_VAR 0 5
53757: PUSH
53758: LD_VAR 0 4
53762: PUSH
53763: FOR_IN
53764: IFFALSE 53799
// if GetBase ( i ) <> base then
53766: LD_VAR 0 5
53770: PPUSH
53771: CALL_OW 274
53775: PUSH
53776: LD_VAR 0 1
53780: NONEQUAL
53781: IFFALSE 53797
// ComLinkToBase ( base , i ) ;
53783: LD_VAR 0 1
53787: PPUSH
53788: LD_VAR 0 5
53792: PPUSH
53793: CALL_OW 169
53797: GO 53763
53799: POP
53800: POP
// result := tmp ;
53801: LD_ADDR_VAR 0 3
53805: PUSH
53806: LD_VAR 0 4
53810: ST_TO_ADDR
// end ;
53811: LD_VAR 0 3
53815: RET
// export function ComComplete ( unit , b ) ; var i ; begin
53816: LD_INT 0
53818: PPUSH
53819: PPUSH
// if BuildingStatus ( b ) = bs_build then
53820: LD_VAR 0 2
53824: PPUSH
53825: CALL_OW 461
53829: PUSH
53830: LD_INT 1
53832: EQUAL
53833: IFFALSE 53893
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
53835: LD_VAR 0 1
53839: PPUSH
53840: LD_STRING h
53842: PUSH
53843: LD_VAR 0 2
53847: PPUSH
53848: CALL_OW 250
53852: PUSH
53853: LD_VAR 0 2
53857: PPUSH
53858: CALL_OW 251
53862: PUSH
53863: LD_VAR 0 2
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: PUSH
53886: EMPTY
53887: LIST
53888: PPUSH
53889: CALL_OW 446
// end ;
53893: LD_VAR 0 3
53897: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
53898: LD_INT 0
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
53906: LD_VAR 0 1
53910: NOT
53911: PUSH
53912: LD_VAR 0 1
53916: PPUSH
53917: CALL_OW 263
53921: PUSH
53922: LD_INT 2
53924: EQUAL
53925: NOT
53926: OR
53927: IFFALSE 53931
// exit ;
53929: GO 54247
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
53931: LD_ADDR_VAR 0 6
53935: PUSH
53936: LD_INT 22
53938: PUSH
53939: LD_VAR 0 1
53943: PPUSH
53944: CALL_OW 255
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 30
53958: PUSH
53959: LD_INT 36
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 34
53968: PUSH
53969: LD_INT 31
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PPUSH
53985: CALL_OW 69
53989: ST_TO_ADDR
// if not tmp then
53990: LD_VAR 0 6
53994: NOT
53995: IFFALSE 53999
// exit ;
53997: GO 54247
// result := [ ] ;
53999: LD_ADDR_VAR 0 2
54003: PUSH
54004: EMPTY
54005: ST_TO_ADDR
// for i in tmp do
54006: LD_ADDR_VAR 0 3
54010: PUSH
54011: LD_VAR 0 6
54015: PUSH
54016: FOR_IN
54017: IFFALSE 54088
// begin t := UnitsInside ( i ) ;
54019: LD_ADDR_VAR 0 4
54023: PUSH
54024: LD_VAR 0 3
54028: PPUSH
54029: CALL_OW 313
54033: ST_TO_ADDR
// if t then
54034: LD_VAR 0 4
54038: IFFALSE 54086
// for j in t do
54040: LD_ADDR_VAR 0 7
54044: PUSH
54045: LD_VAR 0 4
54049: PUSH
54050: FOR_IN
54051: IFFALSE 54084
// result := Insert ( result , result + 1 , j ) ;
54053: LD_ADDR_VAR 0 2
54057: PUSH
54058: LD_VAR 0 2
54062: PPUSH
54063: LD_VAR 0 2
54067: PUSH
54068: LD_INT 1
54070: PLUS
54071: PPUSH
54072: LD_VAR 0 7
54076: PPUSH
54077: CALL_OW 2
54081: ST_TO_ADDR
54082: GO 54050
54084: POP
54085: POP
// end ;
54086: GO 54016
54088: POP
54089: POP
// if not result then
54090: LD_VAR 0 2
54094: NOT
54095: IFFALSE 54099
// exit ;
54097: GO 54247
// mech := result [ 1 ] ;
54099: LD_ADDR_VAR 0 5
54103: PUSH
54104: LD_VAR 0 2
54108: PUSH
54109: LD_INT 1
54111: ARRAY
54112: ST_TO_ADDR
// if result > 1 then
54113: LD_VAR 0 2
54117: PUSH
54118: LD_INT 1
54120: GREATER
54121: IFFALSE 54233
// for i = 2 to result do
54123: LD_ADDR_VAR 0 3
54127: PUSH
54128: DOUBLE
54129: LD_INT 2
54131: DEC
54132: ST_TO_ADDR
54133: LD_VAR 0 2
54137: PUSH
54138: FOR_TO
54139: IFFALSE 54231
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54141: LD_ADDR_VAR 0 4
54145: PUSH
54146: LD_VAR 0 2
54150: PUSH
54151: LD_VAR 0 3
54155: ARRAY
54156: PPUSH
54157: LD_INT 3
54159: PPUSH
54160: CALL_OW 259
54164: PUSH
54165: LD_VAR 0 2
54169: PUSH
54170: LD_VAR 0 3
54174: ARRAY
54175: PPUSH
54176: CALL_OW 432
54180: MINUS
54181: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54182: LD_VAR 0 4
54186: PUSH
54187: LD_VAR 0 5
54191: PPUSH
54192: LD_INT 3
54194: PPUSH
54195: CALL_OW 259
54199: PUSH
54200: LD_VAR 0 5
54204: PPUSH
54205: CALL_OW 432
54209: MINUS
54210: GREATEREQUAL
54211: IFFALSE 54229
// mech := result [ i ] ;
54213: LD_ADDR_VAR 0 5
54217: PUSH
54218: LD_VAR 0 2
54222: PUSH
54223: LD_VAR 0 3
54227: ARRAY
54228: ST_TO_ADDR
// end ;
54229: GO 54138
54231: POP
54232: POP
// ComLinkTo ( vehicle , mech ) ;
54233: LD_VAR 0 1
54237: PPUSH
54238: LD_VAR 0 5
54242: PPUSH
54243: CALL_OW 135
// end ;
54247: LD_VAR 0 2
54251: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54252: LD_INT 0
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
// result := [ ] ;
54267: LD_ADDR_VAR 0 7
54271: PUSH
54272: EMPTY
54273: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54274: LD_VAR 0 1
54278: PPUSH
54279: CALL_OW 266
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: IN
54294: NOT
54295: IFFALSE 54299
// exit ;
54297: GO 55930
// if name then
54299: LD_VAR 0 3
54303: IFFALSE 54319
// SetBName ( base_dep , name ) ;
54305: LD_VAR 0 1
54309: PPUSH
54310: LD_VAR 0 3
54314: PPUSH
54315: CALL_OW 500
// base := GetBase ( base_dep ) ;
54319: LD_ADDR_VAR 0 15
54323: PUSH
54324: LD_VAR 0 1
54328: PPUSH
54329: CALL_OW 274
54333: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54334: LD_ADDR_VAR 0 16
54338: PUSH
54339: LD_VAR 0 1
54343: PPUSH
54344: CALL_OW 255
54348: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54349: LD_ADDR_VAR 0 17
54353: PUSH
54354: LD_VAR 0 1
54358: PPUSH
54359: CALL_OW 248
54363: ST_TO_ADDR
// if sources then
54364: LD_VAR 0 5
54368: IFFALSE 54415
// for i = 1 to 3 do
54370: LD_ADDR_VAR 0 8
54374: PUSH
54375: DOUBLE
54376: LD_INT 1
54378: DEC
54379: ST_TO_ADDR
54380: LD_INT 3
54382: PUSH
54383: FOR_TO
54384: IFFALSE 54413
// AddResourceType ( base , i , sources [ i ] ) ;
54386: LD_VAR 0 15
54390: PPUSH
54391: LD_VAR 0 8
54395: PPUSH
54396: LD_VAR 0 5
54400: PUSH
54401: LD_VAR 0 8
54405: ARRAY
54406: PPUSH
54407: CALL_OW 276
54411: GO 54383
54413: POP
54414: POP
// buildings := GetBaseBuildings ( base , area ) ;
54415: LD_ADDR_VAR 0 18
54419: PUSH
54420: LD_VAR 0 15
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: CALL 53707 0 2
54434: ST_TO_ADDR
// InitHc ;
54435: CALL_OW 19
// InitUc ;
54439: CALL_OW 18
// uc_side := side ;
54443: LD_ADDR_OWVAR 20
54447: PUSH
54448: LD_VAR 0 16
54452: ST_TO_ADDR
// uc_nation := nation ;
54453: LD_ADDR_OWVAR 21
54457: PUSH
54458: LD_VAR 0 17
54462: ST_TO_ADDR
// if buildings then
54463: LD_VAR 0 18
54467: IFFALSE 55789
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54469: LD_ADDR_VAR 0 19
54473: PUSH
54474: LD_VAR 0 18
54478: PPUSH
54479: LD_INT 2
54481: PUSH
54482: LD_INT 30
54484: PUSH
54485: LD_INT 29
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 30
54494: PUSH
54495: LD_INT 30
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: PPUSH
54507: CALL_OW 72
54511: ST_TO_ADDR
// if tmp then
54512: LD_VAR 0 19
54516: IFFALSE 54564
// for i in tmp do
54518: LD_ADDR_VAR 0 8
54522: PUSH
54523: LD_VAR 0 19
54527: PUSH
54528: FOR_IN
54529: IFFALSE 54562
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54531: LD_VAR 0 8
54535: PPUSH
54536: CALL_OW 250
54540: PPUSH
54541: LD_VAR 0 8
54545: PPUSH
54546: CALL_OW 251
54550: PPUSH
54551: LD_VAR 0 16
54555: PPUSH
54556: CALL_OW 441
54560: GO 54528
54562: POP
54563: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54564: LD_VAR 0 18
54568: PPUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 30
54574: PUSH
54575: LD_INT 32
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 30
54584: PUSH
54585: LD_INT 33
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: LIST
54596: PPUSH
54597: CALL_OW 72
54601: IFFALSE 54689
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54603: LD_ADDR_VAR 0 8
54607: PUSH
54608: LD_VAR 0 18
54612: PPUSH
54613: LD_INT 2
54615: PUSH
54616: LD_INT 30
54618: PUSH
54619: LD_INT 32
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 30
54628: PUSH
54629: LD_INT 33
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: PPUSH
54641: CALL_OW 72
54645: PUSH
54646: FOR_IN
54647: IFFALSE 54687
// begin if not GetBWeapon ( i ) then
54649: LD_VAR 0 8
54653: PPUSH
54654: CALL_OW 269
54658: NOT
54659: IFFALSE 54685
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54661: LD_VAR 0 8
54665: PPUSH
54666: LD_VAR 0 8
54670: PPUSH
54671: LD_VAR 0 2
54675: PPUSH
54676: CALL 55935 0 2
54680: PPUSH
54681: CALL_OW 431
// end ;
54685: GO 54646
54687: POP
54688: POP
// end ; for i = 1 to personel do
54689: LD_ADDR_VAR 0 8
54693: PUSH
54694: DOUBLE
54695: LD_INT 1
54697: DEC
54698: ST_TO_ADDR
54699: LD_VAR 0 6
54703: PUSH
54704: FOR_TO
54705: IFFALSE 55769
// begin if i > 4 then
54707: LD_VAR 0 8
54711: PUSH
54712: LD_INT 4
54714: GREATER
54715: IFFALSE 54719
// break ;
54717: GO 55769
// case i of 1 :
54719: LD_VAR 0 8
54723: PUSH
54724: LD_INT 1
54726: DOUBLE
54727: EQUAL
54728: IFTRUE 54732
54730: GO 54812
54732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
54733: LD_ADDR_VAR 0 12
54737: PUSH
54738: LD_VAR 0 18
54742: PPUSH
54743: LD_INT 22
54745: PUSH
54746: LD_VAR 0 16
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 58
54757: PUSH
54758: EMPTY
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: PUSH
54764: LD_INT 30
54766: PUSH
54767: LD_INT 32
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 30
54776: PUSH
54777: LD_INT 4
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 30
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: PPUSH
54805: CALL_OW 72
54809: ST_TO_ADDR
54810: GO 55034
54812: LD_INT 2
54814: DOUBLE
54815: EQUAL
54816: IFTRUE 54820
54818: GO 54882
54820: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
54821: LD_ADDR_VAR 0 12
54825: PUSH
54826: LD_VAR 0 18
54830: PPUSH
54831: LD_INT 22
54833: PUSH
54834: LD_VAR 0 16
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: LD_INT 30
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 30
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: LIST
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PPUSH
54875: CALL_OW 72
54879: ST_TO_ADDR
54880: GO 55034
54882: LD_INT 3
54884: DOUBLE
54885: EQUAL
54886: IFTRUE 54890
54888: GO 54952
54890: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
54891: LD_ADDR_VAR 0 12
54895: PUSH
54896: LD_VAR 0 18
54900: PPUSH
54901: LD_INT 22
54903: PUSH
54904: LD_VAR 0 16
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 30
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 30
54928: PUSH
54929: LD_INT 3
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PPUSH
54945: CALL_OW 72
54949: ST_TO_ADDR
54950: GO 55034
54952: LD_INT 4
54954: DOUBLE
54955: EQUAL
54956: IFTRUE 54960
54958: GO 55033
54960: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
54961: LD_ADDR_VAR 0 12
54965: PUSH
54966: LD_VAR 0 18
54970: PPUSH
54971: LD_INT 22
54973: PUSH
54974: LD_VAR 0 16
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 30
54988: PUSH
54989: LD_INT 6
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 30
54998: PUSH
54999: LD_INT 7
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 30
55008: PUSH
55009: LD_INT 8
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PPUSH
55026: CALL_OW 72
55030: ST_TO_ADDR
55031: GO 55034
55033: POP
// if i = 1 then
55034: LD_VAR 0 8
55038: PUSH
55039: LD_INT 1
55041: EQUAL
55042: IFFALSE 55153
// begin tmp := [ ] ;
55044: LD_ADDR_VAR 0 19
55048: PUSH
55049: EMPTY
55050: ST_TO_ADDR
// for j in f do
55051: LD_ADDR_VAR 0 9
55055: PUSH
55056: LD_VAR 0 12
55060: PUSH
55061: FOR_IN
55062: IFFALSE 55135
// if GetBType ( j ) = b_bunker then
55064: LD_VAR 0 9
55068: PPUSH
55069: CALL_OW 266
55073: PUSH
55074: LD_INT 32
55076: EQUAL
55077: IFFALSE 55104
// tmp := Insert ( tmp , 1 , j ) else
55079: LD_ADDR_VAR 0 19
55083: PUSH
55084: LD_VAR 0 19
55088: PPUSH
55089: LD_INT 1
55091: PPUSH
55092: LD_VAR 0 9
55096: PPUSH
55097: CALL_OW 2
55101: ST_TO_ADDR
55102: GO 55133
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55104: LD_ADDR_VAR 0 19
55108: PUSH
55109: LD_VAR 0 19
55113: PPUSH
55114: LD_VAR 0 19
55118: PUSH
55119: LD_INT 1
55121: PLUS
55122: PPUSH
55123: LD_VAR 0 9
55127: PPUSH
55128: CALL_OW 2
55132: ST_TO_ADDR
55133: GO 55061
55135: POP
55136: POP
// if tmp then
55137: LD_VAR 0 19
55141: IFFALSE 55153
// f := tmp ;
55143: LD_ADDR_VAR 0 12
55147: PUSH
55148: LD_VAR 0 19
55152: ST_TO_ADDR
// end ; x := personel [ i ] ;
55153: LD_ADDR_VAR 0 13
55157: PUSH
55158: LD_VAR 0 6
55162: PUSH
55163: LD_VAR 0 8
55167: ARRAY
55168: ST_TO_ADDR
// if x = - 1 then
55169: LD_VAR 0 13
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: EQUAL
55178: IFFALSE 55387
// begin for j in f do
55180: LD_ADDR_VAR 0 9
55184: PUSH
55185: LD_VAR 0 12
55189: PUSH
55190: FOR_IN
55191: IFFALSE 55383
// repeat InitHc ;
55193: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55197: LD_VAR 0 9
55201: PPUSH
55202: CALL_OW 266
55206: PUSH
55207: LD_INT 5
55209: EQUAL
55210: IFFALSE 55280
// begin if UnitsInside ( j ) < 3 then
55212: LD_VAR 0 9
55216: PPUSH
55217: CALL_OW 313
55221: PUSH
55222: LD_INT 3
55224: LESS
55225: IFFALSE 55261
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55227: LD_INT 0
55229: PPUSH
55230: LD_INT 5
55232: PUSH
55233: LD_INT 8
55235: PUSH
55236: LD_INT 9
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: PUSH
55244: LD_VAR 0 17
55248: ARRAY
55249: PPUSH
55250: LD_VAR 0 4
55254: PPUSH
55255: CALL_OW 380
55259: GO 55278
// PrepareHuman ( false , i , skill ) ;
55261: LD_INT 0
55263: PPUSH
55264: LD_VAR 0 8
55268: PPUSH
55269: LD_VAR 0 4
55273: PPUSH
55274: CALL_OW 380
// end else
55278: GO 55297
// PrepareHuman ( false , i , skill ) ;
55280: LD_INT 0
55282: PPUSH
55283: LD_VAR 0 8
55287: PPUSH
55288: LD_VAR 0 4
55292: PPUSH
55293: CALL_OW 380
// un := CreateHuman ;
55297: LD_ADDR_VAR 0 14
55301: PUSH
55302: CALL_OW 44
55306: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55307: LD_ADDR_VAR 0 7
55311: PUSH
55312: LD_VAR 0 7
55316: PPUSH
55317: LD_INT 1
55319: PPUSH
55320: LD_VAR 0 14
55324: PPUSH
55325: CALL_OW 2
55329: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55330: LD_VAR 0 14
55334: PPUSH
55335: LD_VAR 0 9
55339: PPUSH
55340: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55344: LD_VAR 0 9
55348: PPUSH
55349: CALL_OW 313
55353: PUSH
55354: LD_INT 6
55356: EQUAL
55357: PUSH
55358: LD_VAR 0 9
55362: PPUSH
55363: CALL_OW 266
55367: PUSH
55368: LD_INT 32
55370: PUSH
55371: LD_INT 31
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: IN
55378: OR
55379: IFFALSE 55193
55381: GO 55190
55383: POP
55384: POP
// end else
55385: GO 55767
// for j = 1 to x do
55387: LD_ADDR_VAR 0 9
55391: PUSH
55392: DOUBLE
55393: LD_INT 1
55395: DEC
55396: ST_TO_ADDR
55397: LD_VAR 0 13
55401: PUSH
55402: FOR_TO
55403: IFFALSE 55765
// begin InitHc ;
55405: CALL_OW 19
// if not f then
55409: LD_VAR 0 12
55413: NOT
55414: IFFALSE 55503
// begin PrepareHuman ( false , i , skill ) ;
55416: LD_INT 0
55418: PPUSH
55419: LD_VAR 0 8
55423: PPUSH
55424: LD_VAR 0 4
55428: PPUSH
55429: CALL_OW 380
// un := CreateHuman ;
55433: LD_ADDR_VAR 0 14
55437: PUSH
55438: CALL_OW 44
55442: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55443: LD_ADDR_VAR 0 7
55447: PUSH
55448: LD_VAR 0 7
55452: PPUSH
55453: LD_INT 1
55455: PPUSH
55456: LD_VAR 0 14
55460: PPUSH
55461: CALL_OW 2
55465: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55466: LD_VAR 0 14
55470: PPUSH
55471: LD_VAR 0 1
55475: PPUSH
55476: CALL_OW 250
55480: PPUSH
55481: LD_VAR 0 1
55485: PPUSH
55486: CALL_OW 251
55490: PPUSH
55491: LD_INT 10
55493: PPUSH
55494: LD_INT 0
55496: PPUSH
55497: CALL_OW 50
// continue ;
55501: GO 55402
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55503: LD_VAR 0 12
55507: PUSH
55508: LD_INT 1
55510: ARRAY
55511: PPUSH
55512: CALL_OW 313
55516: PUSH
55517: LD_VAR 0 12
55521: PUSH
55522: LD_INT 1
55524: ARRAY
55525: PPUSH
55526: CALL_OW 266
55530: PUSH
55531: LD_INT 32
55533: PUSH
55534: LD_INT 31
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: IN
55541: AND
55542: PUSH
55543: LD_VAR 0 12
55547: PUSH
55548: LD_INT 1
55550: ARRAY
55551: PPUSH
55552: CALL_OW 313
55556: PUSH
55557: LD_INT 6
55559: EQUAL
55560: OR
55561: IFFALSE 55581
// f := Delete ( f , 1 ) ;
55563: LD_ADDR_VAR 0 12
55567: PUSH
55568: LD_VAR 0 12
55572: PPUSH
55573: LD_INT 1
55575: PPUSH
55576: CALL_OW 3
55580: ST_TO_ADDR
// if not f then
55581: LD_VAR 0 12
55585: NOT
55586: IFFALSE 55604
// begin x := x + 2 ;
55588: LD_ADDR_VAR 0 13
55592: PUSH
55593: LD_VAR 0 13
55597: PUSH
55598: LD_INT 2
55600: PLUS
55601: ST_TO_ADDR
// continue ;
55602: GO 55402
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55604: LD_VAR 0 12
55608: PUSH
55609: LD_INT 1
55611: ARRAY
55612: PPUSH
55613: CALL_OW 266
55617: PUSH
55618: LD_INT 5
55620: EQUAL
55621: IFFALSE 55695
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55623: LD_VAR 0 12
55627: PUSH
55628: LD_INT 1
55630: ARRAY
55631: PPUSH
55632: CALL_OW 313
55636: PUSH
55637: LD_INT 3
55639: LESS
55640: IFFALSE 55676
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55642: LD_INT 0
55644: PPUSH
55645: LD_INT 5
55647: PUSH
55648: LD_INT 8
55650: PUSH
55651: LD_INT 9
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: PUSH
55659: LD_VAR 0 17
55663: ARRAY
55664: PPUSH
55665: LD_VAR 0 4
55669: PPUSH
55670: CALL_OW 380
55674: GO 55693
// PrepareHuman ( false , i , skill ) ;
55676: LD_INT 0
55678: PPUSH
55679: LD_VAR 0 8
55683: PPUSH
55684: LD_VAR 0 4
55688: PPUSH
55689: CALL_OW 380
// end else
55693: GO 55712
// PrepareHuman ( false , i , skill ) ;
55695: LD_INT 0
55697: PPUSH
55698: LD_VAR 0 8
55702: PPUSH
55703: LD_VAR 0 4
55707: PPUSH
55708: CALL_OW 380
// un := CreateHuman ;
55712: LD_ADDR_VAR 0 14
55716: PUSH
55717: CALL_OW 44
55721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55722: LD_ADDR_VAR 0 7
55726: PUSH
55727: LD_VAR 0 7
55731: PPUSH
55732: LD_INT 1
55734: PPUSH
55735: LD_VAR 0 14
55739: PPUSH
55740: CALL_OW 2
55744: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
55745: LD_VAR 0 14
55749: PPUSH
55750: LD_VAR 0 12
55754: PUSH
55755: LD_INT 1
55757: ARRAY
55758: PPUSH
55759: CALL_OW 52
// end ;
55763: GO 55402
55765: POP
55766: POP
// end ;
55767: GO 54704
55769: POP
55770: POP
// result := result ^ buildings ;
55771: LD_ADDR_VAR 0 7
55775: PUSH
55776: LD_VAR 0 7
55780: PUSH
55781: LD_VAR 0 18
55785: ADD
55786: ST_TO_ADDR
// end else
55787: GO 55930
// begin for i = 1 to personel do
55789: LD_ADDR_VAR 0 8
55793: PUSH
55794: DOUBLE
55795: LD_INT 1
55797: DEC
55798: ST_TO_ADDR
55799: LD_VAR 0 6
55803: PUSH
55804: FOR_TO
55805: IFFALSE 55928
// begin if i > 4 then
55807: LD_VAR 0 8
55811: PUSH
55812: LD_INT 4
55814: GREATER
55815: IFFALSE 55819
// break ;
55817: GO 55928
// x := personel [ i ] ;
55819: LD_ADDR_VAR 0 13
55823: PUSH
55824: LD_VAR 0 6
55828: PUSH
55829: LD_VAR 0 8
55833: ARRAY
55834: ST_TO_ADDR
// if x = - 1 then
55835: LD_VAR 0 13
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: EQUAL
55844: IFFALSE 55848
// continue ;
55846: GO 55804
// PrepareHuman ( false , i , skill ) ;
55848: LD_INT 0
55850: PPUSH
55851: LD_VAR 0 8
55855: PPUSH
55856: LD_VAR 0 4
55860: PPUSH
55861: CALL_OW 380
// un := CreateHuman ;
55865: LD_ADDR_VAR 0 14
55869: PUSH
55870: CALL_OW 44
55874: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55875: LD_VAR 0 14
55879: PPUSH
55880: LD_VAR 0 1
55884: PPUSH
55885: CALL_OW 250
55889: PPUSH
55890: LD_VAR 0 1
55894: PPUSH
55895: CALL_OW 251
55899: PPUSH
55900: LD_INT 10
55902: PPUSH
55903: LD_INT 0
55905: PPUSH
55906: CALL_OW 50
// result := result ^ un ;
55910: LD_ADDR_VAR 0 7
55914: PUSH
55915: LD_VAR 0 7
55919: PUSH
55920: LD_VAR 0 14
55924: ADD
55925: ST_TO_ADDR
// end ;
55926: GO 55804
55928: POP
55929: POP
// end ; end ;
55930: LD_VAR 0 7
55934: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
55935: LD_INT 0
55937: PPUSH
55938: PPUSH
55939: PPUSH
55940: PPUSH
55941: PPUSH
55942: PPUSH
55943: PPUSH
55944: PPUSH
55945: PPUSH
55946: PPUSH
55947: PPUSH
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
// result := false ;
55953: LD_ADDR_VAR 0 3
55957: PUSH
55958: LD_INT 0
55960: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
55961: LD_VAR 0 1
55965: NOT
55966: PUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: CALL_OW 266
55976: PUSH
55977: LD_INT 32
55979: PUSH
55980: LD_INT 33
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: IN
55987: NOT
55988: OR
55989: IFFALSE 55993
// exit ;
55991: GO 57129
// nat := GetNation ( tower ) ;
55993: LD_ADDR_VAR 0 12
55997: PUSH
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL_OW 248
56007: ST_TO_ADDR
// side := GetSide ( tower ) ;
56008: LD_ADDR_VAR 0 16
56012: PUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 255
56022: ST_TO_ADDR
// x := GetX ( tower ) ;
56023: LD_ADDR_VAR 0 10
56027: PUSH
56028: LD_VAR 0 1
56032: PPUSH
56033: CALL_OW 250
56037: ST_TO_ADDR
// y := GetY ( tower ) ;
56038: LD_ADDR_VAR 0 11
56042: PUSH
56043: LD_VAR 0 1
56047: PPUSH
56048: CALL_OW 251
56052: ST_TO_ADDR
// if not x or not y then
56053: LD_VAR 0 10
56057: NOT
56058: PUSH
56059: LD_VAR 0 11
56063: NOT
56064: OR
56065: IFFALSE 56069
// exit ;
56067: GO 57129
// weapon := 0 ;
56069: LD_ADDR_VAR 0 18
56073: PUSH
56074: LD_INT 0
56076: ST_TO_ADDR
// fac_list := [ ] ;
56077: LD_ADDR_VAR 0 17
56081: PUSH
56082: EMPTY
56083: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
56084: LD_ADDR_VAR 0 6
56088: PUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 274
56098: PPUSH
56099: LD_VAR 0 2
56103: PPUSH
56104: CALL 53707 0 2
56108: PPUSH
56109: LD_INT 30
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PPUSH
56119: CALL_OW 72
56123: ST_TO_ADDR
// if not factories then
56124: LD_VAR 0 6
56128: NOT
56129: IFFALSE 56133
// exit ;
56131: GO 57129
// for i in factories do
56133: LD_ADDR_VAR 0 8
56137: PUSH
56138: LD_VAR 0 6
56142: PUSH
56143: FOR_IN
56144: IFFALSE 56169
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56146: LD_ADDR_VAR 0 17
56150: PUSH
56151: LD_VAR 0 17
56155: PUSH
56156: LD_VAR 0 8
56160: PPUSH
56161: CALL_OW 478
56165: UNION
56166: ST_TO_ADDR
56167: GO 56143
56169: POP
56170: POP
// if not fac_list then
56171: LD_VAR 0 17
56175: NOT
56176: IFFALSE 56180
// exit ;
56178: GO 57129
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56180: LD_ADDR_VAR 0 5
56184: PUSH
56185: LD_INT 4
56187: PUSH
56188: LD_INT 5
56190: PUSH
56191: LD_INT 9
56193: PUSH
56194: LD_INT 10
56196: PUSH
56197: LD_INT 6
56199: PUSH
56200: LD_INT 7
56202: PUSH
56203: LD_INT 11
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 27
56217: PUSH
56218: LD_INT 28
56220: PUSH
56221: LD_INT 26
56223: PUSH
56224: LD_INT 30
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 43
56235: PUSH
56236: LD_INT 44
56238: PUSH
56239: LD_INT 46
56241: PUSH
56242: LD_INT 45
56244: PUSH
56245: LD_INT 47
56247: PUSH
56248: LD_INT 49
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: LIST
56263: PUSH
56264: LD_VAR 0 12
56268: ARRAY
56269: ST_TO_ADDR
// for i in list do
56270: LD_ADDR_VAR 0 8
56274: PUSH
56275: LD_VAR 0 5
56279: PUSH
56280: FOR_IN
56281: IFFALSE 56314
// if not i in fac_list then
56283: LD_VAR 0 8
56287: PUSH
56288: LD_VAR 0 17
56292: IN
56293: NOT
56294: IFFALSE 56312
// list := list diff i ;
56296: LD_ADDR_VAR 0 5
56300: PUSH
56301: LD_VAR 0 5
56305: PUSH
56306: LD_VAR 0 8
56310: DIFF
56311: ST_TO_ADDR
56312: GO 56280
56314: POP
56315: POP
// if not list then
56316: LD_VAR 0 5
56320: NOT
56321: IFFALSE 56325
// exit ;
56323: GO 57129
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56325: LD_VAR 0 12
56329: PUSH
56330: LD_INT 3
56332: EQUAL
56333: PUSH
56334: LD_INT 49
56336: PUSH
56337: LD_VAR 0 5
56341: IN
56342: AND
56343: PUSH
56344: LD_INT 31
56346: PPUSH
56347: LD_VAR 0 16
56351: PPUSH
56352: CALL_OW 321
56356: PUSH
56357: LD_INT 2
56359: EQUAL
56360: AND
56361: IFFALSE 56421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56363: LD_INT 22
56365: PUSH
56366: LD_VAR 0 16
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 35
56377: PUSH
56378: LD_INT 49
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 91
56387: PUSH
56388: LD_VAR 0 1
56392: PUSH
56393: LD_INT 10
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: LIST
56405: PPUSH
56406: CALL_OW 69
56410: NOT
56411: IFFALSE 56421
// weapon := ru_time_lapser ;
56413: LD_ADDR_VAR 0 18
56417: PUSH
56418: LD_INT 49
56420: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56421: LD_VAR 0 12
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: IN
56436: PUSH
56437: LD_INT 11
56439: PUSH
56440: LD_VAR 0 5
56444: IN
56445: PUSH
56446: LD_INT 30
56448: PUSH
56449: LD_VAR 0 5
56453: IN
56454: OR
56455: AND
56456: PUSH
56457: LD_INT 6
56459: PPUSH
56460: LD_VAR 0 16
56464: PPUSH
56465: CALL_OW 321
56469: PUSH
56470: LD_INT 2
56472: EQUAL
56473: AND
56474: IFFALSE 56639
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56476: LD_INT 22
56478: PUSH
56479: LD_VAR 0 16
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 35
56493: PUSH
56494: LD_INT 11
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 35
56503: PUSH
56504: LD_INT 30
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 91
56518: PUSH
56519: LD_VAR 0 1
56523: PUSH
56524: LD_INT 18
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: LIST
56536: PPUSH
56537: CALL_OW 69
56541: NOT
56542: PUSH
56543: LD_INT 22
56545: PUSH
56546: LD_VAR 0 16
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 30
56560: PUSH
56561: LD_INT 32
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 30
56570: PUSH
56571: LD_INT 33
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 91
56585: PUSH
56586: LD_VAR 0 1
56590: PUSH
56591: LD_INT 12
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: PPUSH
56607: CALL_OW 69
56611: PUSH
56612: LD_INT 2
56614: GREATER
56615: AND
56616: IFFALSE 56639
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56618: LD_ADDR_VAR 0 18
56622: PUSH
56623: LD_INT 11
56625: PUSH
56626: LD_INT 30
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_VAR 0 12
56637: ARRAY
56638: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56639: LD_VAR 0 18
56643: NOT
56644: PUSH
56645: LD_INT 40
56647: PPUSH
56648: LD_VAR 0 16
56652: PPUSH
56653: CALL_OW 321
56657: PUSH
56658: LD_INT 2
56660: EQUAL
56661: AND
56662: PUSH
56663: LD_INT 7
56665: PUSH
56666: LD_VAR 0 5
56670: IN
56671: PUSH
56672: LD_INT 28
56674: PUSH
56675: LD_VAR 0 5
56679: IN
56680: OR
56681: PUSH
56682: LD_INT 45
56684: PUSH
56685: LD_VAR 0 5
56689: IN
56690: OR
56691: AND
56692: IFFALSE 56946
// begin hex := GetHexInfo ( x , y ) ;
56694: LD_ADDR_VAR 0 4
56698: PUSH
56699: LD_VAR 0 10
56703: PPUSH
56704: LD_VAR 0 11
56708: PPUSH
56709: CALL_OW 546
56713: ST_TO_ADDR
// if hex [ 1 ] then
56714: LD_VAR 0 4
56718: PUSH
56719: LD_INT 1
56721: ARRAY
56722: IFFALSE 56726
// exit ;
56724: GO 57129
// height := hex [ 2 ] ;
56726: LD_ADDR_VAR 0 15
56730: PUSH
56731: LD_VAR 0 4
56735: PUSH
56736: LD_INT 2
56738: ARRAY
56739: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56740: LD_ADDR_VAR 0 14
56744: PUSH
56745: LD_INT 0
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 3
56753: PUSH
56754: LD_INT 5
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// for i in tmp do
56763: LD_ADDR_VAR 0 8
56767: PUSH
56768: LD_VAR 0 14
56772: PUSH
56773: FOR_IN
56774: IFFALSE 56944
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
56776: LD_ADDR_VAR 0 9
56780: PUSH
56781: LD_VAR 0 10
56785: PPUSH
56786: LD_VAR 0 8
56790: PPUSH
56791: LD_INT 5
56793: PPUSH
56794: CALL_OW 272
56798: PUSH
56799: LD_VAR 0 11
56803: PPUSH
56804: LD_VAR 0 8
56808: PPUSH
56809: LD_INT 5
56811: PPUSH
56812: CALL_OW 273
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
56821: LD_VAR 0 9
56825: PUSH
56826: LD_INT 1
56828: ARRAY
56829: PPUSH
56830: LD_VAR 0 9
56834: PUSH
56835: LD_INT 2
56837: ARRAY
56838: PPUSH
56839: CALL_OW 488
56843: IFFALSE 56942
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
56845: LD_ADDR_VAR 0 4
56849: PUSH
56850: LD_VAR 0 9
56854: PUSH
56855: LD_INT 1
56857: ARRAY
56858: PPUSH
56859: LD_VAR 0 9
56863: PUSH
56864: LD_INT 2
56866: ARRAY
56867: PPUSH
56868: CALL_OW 546
56872: ST_TO_ADDR
// if hex [ 1 ] then
56873: LD_VAR 0 4
56877: PUSH
56878: LD_INT 1
56880: ARRAY
56881: IFFALSE 56885
// continue ;
56883: GO 56773
// h := hex [ 2 ] ;
56885: LD_ADDR_VAR 0 13
56889: PUSH
56890: LD_VAR 0 4
56894: PUSH
56895: LD_INT 2
56897: ARRAY
56898: ST_TO_ADDR
// if h + 7 < height then
56899: LD_VAR 0 13
56903: PUSH
56904: LD_INT 7
56906: PLUS
56907: PUSH
56908: LD_VAR 0 15
56912: LESS
56913: IFFALSE 56942
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
56915: LD_ADDR_VAR 0 18
56919: PUSH
56920: LD_INT 7
56922: PUSH
56923: LD_INT 28
56925: PUSH
56926: LD_INT 45
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: PUSH
56934: LD_VAR 0 12
56938: ARRAY
56939: ST_TO_ADDR
// break ;
56940: GO 56944
// end ; end ; end ;
56942: GO 56773
56944: POP
56945: POP
// end ; if not weapon then
56946: LD_VAR 0 18
56950: NOT
56951: IFFALSE 57011
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
56953: LD_ADDR_VAR 0 5
56957: PUSH
56958: LD_VAR 0 5
56962: PUSH
56963: LD_INT 11
56965: PUSH
56966: LD_INT 30
56968: PUSH
56969: LD_INT 49
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: LIST
56976: DIFF
56977: ST_TO_ADDR
// if not list then
56978: LD_VAR 0 5
56982: NOT
56983: IFFALSE 56987
// exit ;
56985: GO 57129
// weapon := list [ rand ( 1 , list ) ] ;
56987: LD_ADDR_VAR 0 18
56991: PUSH
56992: LD_VAR 0 5
56996: PUSH
56997: LD_INT 1
56999: PPUSH
57000: LD_VAR 0 5
57004: PPUSH
57005: CALL_OW 12
57009: ARRAY
57010: ST_TO_ADDR
// end ; if weapon then
57011: LD_VAR 0 18
57015: IFFALSE 57129
// begin tmp := CostOfWeapon ( weapon ) ;
57017: LD_ADDR_VAR 0 14
57021: PUSH
57022: LD_VAR 0 18
57026: PPUSH
57027: CALL_OW 451
57031: ST_TO_ADDR
// j := GetBase ( tower ) ;
57032: LD_ADDR_VAR 0 9
57036: PUSH
57037: LD_VAR 0 1
57041: PPUSH
57042: CALL_OW 274
57046: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57047: LD_VAR 0 9
57051: PPUSH
57052: LD_INT 1
57054: PPUSH
57055: CALL_OW 275
57059: PUSH
57060: LD_VAR 0 14
57064: PUSH
57065: LD_INT 1
57067: ARRAY
57068: GREATEREQUAL
57069: PUSH
57070: LD_VAR 0 9
57074: PPUSH
57075: LD_INT 2
57077: PPUSH
57078: CALL_OW 275
57082: PUSH
57083: LD_VAR 0 14
57087: PUSH
57088: LD_INT 2
57090: ARRAY
57091: GREATEREQUAL
57092: AND
57093: PUSH
57094: LD_VAR 0 9
57098: PPUSH
57099: LD_INT 3
57101: PPUSH
57102: CALL_OW 275
57106: PUSH
57107: LD_VAR 0 14
57111: PUSH
57112: LD_INT 3
57114: ARRAY
57115: GREATEREQUAL
57116: AND
57117: IFFALSE 57129
// result := weapon ;
57119: LD_ADDR_VAR 0 3
57123: PUSH
57124: LD_VAR 0 18
57128: ST_TO_ADDR
// end ; end ;
57129: LD_VAR 0 3
57133: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57134: LD_INT 0
57136: PPUSH
57137: PPUSH
// result := true ;
57138: LD_ADDR_VAR 0 3
57142: PUSH
57143: LD_INT 1
57145: ST_TO_ADDR
// if array1 = array2 then
57146: LD_VAR 0 1
57150: PUSH
57151: LD_VAR 0 2
57155: EQUAL
57156: IFFALSE 57216
// begin for i = 1 to array1 do
57158: LD_ADDR_VAR 0 4
57162: PUSH
57163: DOUBLE
57164: LD_INT 1
57166: DEC
57167: ST_TO_ADDR
57168: LD_VAR 0 1
57172: PUSH
57173: FOR_TO
57174: IFFALSE 57212
// if array1 [ i ] <> array2 [ i ] then
57176: LD_VAR 0 1
57180: PUSH
57181: LD_VAR 0 4
57185: ARRAY
57186: PUSH
57187: LD_VAR 0 2
57191: PUSH
57192: LD_VAR 0 4
57196: ARRAY
57197: NONEQUAL
57198: IFFALSE 57210
// begin result := false ;
57200: LD_ADDR_VAR 0 3
57204: PUSH
57205: LD_INT 0
57207: ST_TO_ADDR
// break ;
57208: GO 57212
// end ;
57210: GO 57173
57212: POP
57213: POP
// end else
57214: GO 57224
// result := false ;
57216: LD_ADDR_VAR 0 3
57220: PUSH
57221: LD_INT 0
57223: ST_TO_ADDR
// end ;
57224: LD_VAR 0 3
57228: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57229: LD_INT 0
57231: PPUSH
57232: PPUSH
57233: PPUSH
// pom := GetBase ( fac ) ;
57234: LD_ADDR_VAR 0 5
57238: PUSH
57239: LD_VAR 0 1
57243: PPUSH
57244: CALL_OW 274
57248: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57249: LD_ADDR_VAR 0 4
57253: PUSH
57254: LD_VAR 0 2
57258: PUSH
57259: LD_INT 1
57261: ARRAY
57262: PPUSH
57263: LD_VAR 0 2
57267: PUSH
57268: LD_INT 2
57270: ARRAY
57271: PPUSH
57272: LD_VAR 0 2
57276: PUSH
57277: LD_INT 3
57279: ARRAY
57280: PPUSH
57281: LD_VAR 0 2
57285: PUSH
57286: LD_INT 4
57288: ARRAY
57289: PPUSH
57290: CALL_OW 449
57294: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57295: LD_ADDR_VAR 0 3
57299: PUSH
57300: LD_VAR 0 5
57304: PPUSH
57305: LD_INT 1
57307: PPUSH
57308: CALL_OW 275
57312: PUSH
57313: LD_VAR 0 4
57317: PUSH
57318: LD_INT 1
57320: ARRAY
57321: GREATEREQUAL
57322: PUSH
57323: LD_VAR 0 5
57327: PPUSH
57328: LD_INT 2
57330: PPUSH
57331: CALL_OW 275
57335: PUSH
57336: LD_VAR 0 4
57340: PUSH
57341: LD_INT 2
57343: ARRAY
57344: GREATEREQUAL
57345: AND
57346: PUSH
57347: LD_VAR 0 5
57351: PPUSH
57352: LD_INT 3
57354: PPUSH
57355: CALL_OW 275
57359: PUSH
57360: LD_VAR 0 4
57364: PUSH
57365: LD_INT 3
57367: ARRAY
57368: GREATEREQUAL
57369: AND
57370: ST_TO_ADDR
// end ;
57371: LD_VAR 0 3
57375: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57376: LD_INT 0
57378: PPUSH
57379: PPUSH
57380: PPUSH
57381: PPUSH
// pom := GetBase ( building ) ;
57382: LD_ADDR_VAR 0 3
57386: PUSH
57387: LD_VAR 0 1
57391: PPUSH
57392: CALL_OW 274
57396: ST_TO_ADDR
// if not pom then
57397: LD_VAR 0 3
57401: NOT
57402: IFFALSE 57406
// exit ;
57404: GO 57576
// btype := GetBType ( building ) ;
57406: LD_ADDR_VAR 0 5
57410: PUSH
57411: LD_VAR 0 1
57415: PPUSH
57416: CALL_OW 266
57420: ST_TO_ADDR
// if btype = b_armoury then
57421: LD_VAR 0 5
57425: PUSH
57426: LD_INT 4
57428: EQUAL
57429: IFFALSE 57439
// btype := b_barracks ;
57431: LD_ADDR_VAR 0 5
57435: PUSH
57436: LD_INT 5
57438: ST_TO_ADDR
// if btype = b_depot then
57439: LD_VAR 0 5
57443: PUSH
57444: LD_INT 0
57446: EQUAL
57447: IFFALSE 57457
// btype := b_warehouse ;
57449: LD_ADDR_VAR 0 5
57453: PUSH
57454: LD_INT 1
57456: ST_TO_ADDR
// if btype = b_workshop then
57457: LD_VAR 0 5
57461: PUSH
57462: LD_INT 2
57464: EQUAL
57465: IFFALSE 57475
// btype := b_factory ;
57467: LD_ADDR_VAR 0 5
57471: PUSH
57472: LD_INT 3
57474: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57475: LD_ADDR_VAR 0 4
57479: PUSH
57480: LD_VAR 0 5
57484: PPUSH
57485: LD_VAR 0 1
57489: PPUSH
57490: CALL_OW 248
57494: PPUSH
57495: CALL_OW 450
57499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57500: LD_ADDR_VAR 0 2
57504: PUSH
57505: LD_VAR 0 3
57509: PPUSH
57510: LD_INT 1
57512: PPUSH
57513: CALL_OW 275
57517: PUSH
57518: LD_VAR 0 4
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: GREATEREQUAL
57527: PUSH
57528: LD_VAR 0 3
57532: PPUSH
57533: LD_INT 2
57535: PPUSH
57536: CALL_OW 275
57540: PUSH
57541: LD_VAR 0 4
57545: PUSH
57546: LD_INT 2
57548: ARRAY
57549: GREATEREQUAL
57550: AND
57551: PUSH
57552: LD_VAR 0 3
57556: PPUSH
57557: LD_INT 3
57559: PPUSH
57560: CALL_OW 275
57564: PUSH
57565: LD_VAR 0 4
57569: PUSH
57570: LD_INT 3
57572: ARRAY
57573: GREATEREQUAL
57574: AND
57575: ST_TO_ADDR
// end ;
57576: LD_VAR 0 2
57580: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57581: LD_INT 0
57583: PPUSH
57584: PPUSH
57585: PPUSH
// pom := GetBase ( building ) ;
57586: LD_ADDR_VAR 0 4
57590: PUSH
57591: LD_VAR 0 1
57595: PPUSH
57596: CALL_OW 274
57600: ST_TO_ADDR
// if not pom then
57601: LD_VAR 0 4
57605: NOT
57606: IFFALSE 57610
// exit ;
57608: GO 57711
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57610: LD_ADDR_VAR 0 5
57614: PUSH
57615: LD_VAR 0 2
57619: PPUSH
57620: LD_VAR 0 1
57624: PPUSH
57625: CALL_OW 248
57629: PPUSH
57630: CALL_OW 450
57634: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57635: LD_ADDR_VAR 0 3
57639: PUSH
57640: LD_VAR 0 4
57644: PPUSH
57645: LD_INT 1
57647: PPUSH
57648: CALL_OW 275
57652: PUSH
57653: LD_VAR 0 5
57657: PUSH
57658: LD_INT 1
57660: ARRAY
57661: GREATEREQUAL
57662: PUSH
57663: LD_VAR 0 4
57667: PPUSH
57668: LD_INT 2
57670: PPUSH
57671: CALL_OW 275
57675: PUSH
57676: LD_VAR 0 5
57680: PUSH
57681: LD_INT 2
57683: ARRAY
57684: GREATEREQUAL
57685: AND
57686: PUSH
57687: LD_VAR 0 4
57691: PPUSH
57692: LD_INT 3
57694: PPUSH
57695: CALL_OW 275
57699: PUSH
57700: LD_VAR 0 5
57704: PUSH
57705: LD_INT 3
57707: ARRAY
57708: GREATEREQUAL
57709: AND
57710: ST_TO_ADDR
// end ;
57711: LD_VAR 0 3
57715: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
57716: LD_INT 0
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
// result := false ;
57728: LD_ADDR_VAR 0 6
57732: PUSH
57733: LD_INT 0
57735: ST_TO_ADDR
// if not base or not btype or not x or not y then
57736: LD_VAR 0 1
57740: NOT
57741: PUSH
57742: LD_VAR 0 2
57746: NOT
57747: OR
57748: PUSH
57749: LD_VAR 0 3
57753: NOT
57754: OR
57755: PUSH
57756: LD_VAR 0 4
57760: NOT
57761: OR
57762: IFFALSE 57766
// exit ;
57764: GO 58357
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
57766: LD_ADDR_VAR 0 12
57770: PUSH
57771: LD_VAR 0 2
57775: PPUSH
57776: LD_VAR 0 3
57780: PPUSH
57781: LD_VAR 0 4
57785: PPUSH
57786: LD_VAR 0 5
57790: PPUSH
57791: LD_VAR 0 1
57795: PUSH
57796: LD_INT 1
57798: ARRAY
57799: PPUSH
57800: CALL_OW 248
57804: PPUSH
57805: LD_INT 0
57807: PPUSH
57808: CALL 59194 0 6
57812: ST_TO_ADDR
// if not hexes then
57813: LD_VAR 0 12
57817: NOT
57818: IFFALSE 57822
// exit ;
57820: GO 58357
// for i = 1 to hexes do
57822: LD_ADDR_VAR 0 7
57826: PUSH
57827: DOUBLE
57828: LD_INT 1
57830: DEC
57831: ST_TO_ADDR
57832: LD_VAR 0 12
57836: PUSH
57837: FOR_TO
57838: IFFALSE 58355
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57840: LD_ADDR_VAR 0 11
57844: PUSH
57845: LD_VAR 0 12
57849: PUSH
57850: LD_VAR 0 7
57854: ARRAY
57855: PUSH
57856: LD_INT 1
57858: ARRAY
57859: PPUSH
57860: LD_VAR 0 12
57864: PUSH
57865: LD_VAR 0 7
57869: ARRAY
57870: PUSH
57871: LD_INT 2
57873: ARRAY
57874: PPUSH
57875: CALL_OW 428
57879: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
57880: LD_VAR 0 12
57884: PUSH
57885: LD_VAR 0 7
57889: ARRAY
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PPUSH
57895: LD_VAR 0 12
57899: PUSH
57900: LD_VAR 0 7
57904: ARRAY
57905: PUSH
57906: LD_INT 2
57908: ARRAY
57909: PPUSH
57910: CALL_OW 351
57914: PUSH
57915: LD_VAR 0 12
57919: PUSH
57920: LD_VAR 0 7
57924: ARRAY
57925: PUSH
57926: LD_INT 1
57928: ARRAY
57929: PPUSH
57930: LD_VAR 0 12
57934: PUSH
57935: LD_VAR 0 7
57939: ARRAY
57940: PUSH
57941: LD_INT 2
57943: ARRAY
57944: PPUSH
57945: CALL_OW 488
57949: NOT
57950: OR
57951: PUSH
57952: LD_VAR 0 11
57956: PPUSH
57957: CALL_OW 247
57961: PUSH
57962: LD_INT 3
57964: EQUAL
57965: OR
57966: IFFALSE 57972
// exit ;
57968: POP
57969: POP
57970: GO 58357
// if not tmp then
57972: LD_VAR 0 11
57976: NOT
57977: IFFALSE 57981
// continue ;
57979: GO 57837
// result := true ;
57981: LD_ADDR_VAR 0 6
57985: PUSH
57986: LD_INT 1
57988: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57989: LD_ADDR_VAR 0 15
57993: PUSH
57994: LD_INT 22
57996: PUSH
57997: LD_VAR 0 11
58001: PPUSH
58002: CALL_OW 255
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 2
58013: PUSH
58014: LD_INT 30
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 30
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PPUSH
58043: CALL_OW 69
58047: ST_TO_ADDR
// if dep then
58048: LD_VAR 0 15
58052: IFFALSE 58188
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58054: LD_ADDR_VAR 0 14
58058: PUSH
58059: LD_VAR 0 15
58063: PUSH
58064: LD_INT 1
58066: ARRAY
58067: PPUSH
58068: CALL_OW 250
58072: PPUSH
58073: LD_VAR 0 15
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: PPUSH
58082: CALL_OW 254
58086: PPUSH
58087: LD_INT 5
58089: PPUSH
58090: CALL_OW 272
58094: PUSH
58095: LD_VAR 0 15
58099: PUSH
58100: LD_INT 1
58102: ARRAY
58103: PPUSH
58104: CALL_OW 251
58108: PPUSH
58109: LD_VAR 0 15
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PPUSH
58118: CALL_OW 254
58122: PPUSH
58123: LD_INT 5
58125: PPUSH
58126: CALL_OW 273
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58135: LD_VAR 0 14
58139: PUSH
58140: LD_INT 1
58142: ARRAY
58143: PPUSH
58144: LD_VAR 0 14
58148: PUSH
58149: LD_INT 2
58151: ARRAY
58152: PPUSH
58153: CALL_OW 488
58157: IFFALSE 58188
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58159: LD_VAR 0 11
58163: PPUSH
58164: LD_VAR 0 14
58168: PUSH
58169: LD_INT 1
58171: ARRAY
58172: PPUSH
58173: LD_VAR 0 14
58177: PUSH
58178: LD_INT 2
58180: ARRAY
58181: PPUSH
58182: CALL_OW 111
// continue ;
58186: GO 57837
// end ; end ; r := GetDir ( tmp ) ;
58188: LD_ADDR_VAR 0 13
58192: PUSH
58193: LD_VAR 0 11
58197: PPUSH
58198: CALL_OW 254
58202: ST_TO_ADDR
// if r = 5 then
58203: LD_VAR 0 13
58207: PUSH
58208: LD_INT 5
58210: EQUAL
58211: IFFALSE 58221
// r := 0 ;
58213: LD_ADDR_VAR 0 13
58217: PUSH
58218: LD_INT 0
58220: ST_TO_ADDR
// for j = r to 5 do
58221: LD_ADDR_VAR 0 8
58225: PUSH
58226: DOUBLE
58227: LD_VAR 0 13
58231: DEC
58232: ST_TO_ADDR
58233: LD_INT 5
58235: PUSH
58236: FOR_TO
58237: IFFALSE 58351
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58239: LD_ADDR_VAR 0 9
58243: PUSH
58244: LD_VAR 0 11
58248: PPUSH
58249: CALL_OW 250
58253: PPUSH
58254: LD_VAR 0 8
58258: PPUSH
58259: LD_INT 2
58261: PPUSH
58262: CALL_OW 272
58266: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58267: LD_ADDR_VAR 0 10
58271: PUSH
58272: LD_VAR 0 11
58276: PPUSH
58277: CALL_OW 251
58281: PPUSH
58282: LD_VAR 0 8
58286: PPUSH
58287: LD_INT 2
58289: PPUSH
58290: CALL_OW 273
58294: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58295: LD_VAR 0 9
58299: PPUSH
58300: LD_VAR 0 10
58304: PPUSH
58305: CALL_OW 488
58309: PUSH
58310: LD_VAR 0 9
58314: PPUSH
58315: LD_VAR 0 10
58319: PPUSH
58320: CALL_OW 428
58324: NOT
58325: AND
58326: IFFALSE 58349
// begin ComMoveXY ( tmp , _x , _y ) ;
58328: LD_VAR 0 11
58332: PPUSH
58333: LD_VAR 0 9
58337: PPUSH
58338: LD_VAR 0 10
58342: PPUSH
58343: CALL_OW 111
// break ;
58347: GO 58351
// end ; end ;
58349: GO 58236
58351: POP
58352: POP
// end ;
58353: GO 57837
58355: POP
58356: POP
// end ;
58357: LD_VAR 0 6
58361: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
58362: LD_INT 0
58364: PPUSH
58365: PPUSH
58366: PPUSH
58367: PPUSH
58368: PPUSH
58369: PPUSH
58370: PPUSH
58371: PPUSH
58372: PPUSH
58373: PPUSH
// result := false ;
58374: LD_ADDR_VAR 0 6
58378: PUSH
58379: LD_INT 0
58381: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58382: LD_VAR 0 1
58386: NOT
58387: PUSH
58388: LD_VAR 0 1
58392: PPUSH
58393: CALL_OW 266
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: IN
58408: NOT
58409: OR
58410: PUSH
58411: LD_VAR 0 2
58415: NOT
58416: OR
58417: PUSH
58418: LD_VAR 0 5
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 3
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: IN
58449: NOT
58450: OR
58451: PUSH
58452: LD_VAR 0 3
58456: PPUSH
58457: LD_VAR 0 4
58461: PPUSH
58462: CALL_OW 488
58466: NOT
58467: OR
58468: IFFALSE 58472
// exit ;
58470: GO 59189
// pom := GetBase ( bdepot ) ;
58472: LD_ADDR_VAR 0 10
58476: PUSH
58477: LD_VAR 0 1
58481: PPUSH
58482: CALL_OW 274
58486: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
58487: LD_ADDR_VAR 0 11
58491: PUSH
58492: LD_VAR 0 2
58496: PPUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 248
58506: PPUSH
58507: CALL_OW 450
58511: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58512: LD_VAR 0 10
58516: PPUSH
58517: LD_INT 1
58519: PPUSH
58520: CALL_OW 275
58524: PUSH
58525: LD_VAR 0 11
58529: PUSH
58530: LD_INT 1
58532: ARRAY
58533: GREATEREQUAL
58534: PUSH
58535: LD_VAR 0 10
58539: PPUSH
58540: LD_INT 2
58542: PPUSH
58543: CALL_OW 275
58547: PUSH
58548: LD_VAR 0 11
58552: PUSH
58553: LD_INT 2
58555: ARRAY
58556: GREATEREQUAL
58557: AND
58558: PUSH
58559: LD_VAR 0 10
58563: PPUSH
58564: LD_INT 3
58566: PPUSH
58567: CALL_OW 275
58571: PUSH
58572: LD_VAR 0 11
58576: PUSH
58577: LD_INT 3
58579: ARRAY
58580: GREATEREQUAL
58581: AND
58582: NOT
58583: IFFALSE 58587
// exit ;
58585: GO 59189
// if GetBType ( bdepot ) = b_depot then
58587: LD_VAR 0 1
58591: PPUSH
58592: CALL_OW 266
58596: PUSH
58597: LD_INT 0
58599: EQUAL
58600: IFFALSE 58612
// dist := 28 else
58602: LD_ADDR_VAR 0 14
58606: PUSH
58607: LD_INT 28
58609: ST_TO_ADDR
58610: GO 58620
// dist := 36 ;
58612: LD_ADDR_VAR 0 14
58616: PUSH
58617: LD_INT 36
58619: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
58620: LD_VAR 0 1
58624: PPUSH
58625: LD_VAR 0 3
58629: PPUSH
58630: LD_VAR 0 4
58634: PPUSH
58635: CALL_OW 297
58639: PUSH
58640: LD_VAR 0 14
58644: GREATER
58645: IFFALSE 58649
// exit ;
58647: GO 59189
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
58649: LD_ADDR_VAR 0 12
58653: PUSH
58654: LD_VAR 0 2
58658: PPUSH
58659: LD_VAR 0 3
58663: PPUSH
58664: LD_VAR 0 4
58668: PPUSH
58669: LD_VAR 0 5
58673: PPUSH
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 248
58683: PPUSH
58684: LD_INT 0
58686: PPUSH
58687: CALL 59194 0 6
58691: ST_TO_ADDR
// if not hexes then
58692: LD_VAR 0 12
58696: NOT
58697: IFFALSE 58701
// exit ;
58699: GO 59189
// hex := GetHexInfo ( x , y ) ;
58701: LD_ADDR_VAR 0 15
58705: PUSH
58706: LD_VAR 0 3
58710: PPUSH
58711: LD_VAR 0 4
58715: PPUSH
58716: CALL_OW 546
58720: ST_TO_ADDR
// if hex [ 1 ] then
58721: LD_VAR 0 15
58725: PUSH
58726: LD_INT 1
58728: ARRAY
58729: IFFALSE 58733
// exit ;
58731: GO 59189
// height := hex [ 2 ] ;
58733: LD_ADDR_VAR 0 13
58737: PUSH
58738: LD_VAR 0 15
58742: PUSH
58743: LD_INT 2
58745: ARRAY
58746: ST_TO_ADDR
// for i = 1 to hexes do
58747: LD_ADDR_VAR 0 7
58751: PUSH
58752: DOUBLE
58753: LD_INT 1
58755: DEC
58756: ST_TO_ADDR
58757: LD_VAR 0 12
58761: PUSH
58762: FOR_TO
58763: IFFALSE 59093
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58765: LD_VAR 0 12
58769: PUSH
58770: LD_VAR 0 7
58774: ARRAY
58775: PUSH
58776: LD_INT 1
58778: ARRAY
58779: PPUSH
58780: LD_VAR 0 12
58784: PUSH
58785: LD_VAR 0 7
58789: ARRAY
58790: PUSH
58791: LD_INT 2
58793: ARRAY
58794: PPUSH
58795: CALL_OW 488
58799: NOT
58800: PUSH
58801: LD_VAR 0 12
58805: PUSH
58806: LD_VAR 0 7
58810: ARRAY
58811: PUSH
58812: LD_INT 1
58814: ARRAY
58815: PPUSH
58816: LD_VAR 0 12
58820: PUSH
58821: LD_VAR 0 7
58825: ARRAY
58826: PUSH
58827: LD_INT 2
58829: ARRAY
58830: PPUSH
58831: CALL_OW 428
58835: PUSH
58836: LD_INT 0
58838: GREATER
58839: OR
58840: PUSH
58841: LD_VAR 0 12
58845: PUSH
58846: LD_VAR 0 7
58850: ARRAY
58851: PUSH
58852: LD_INT 1
58854: ARRAY
58855: PPUSH
58856: LD_VAR 0 12
58860: PUSH
58861: LD_VAR 0 7
58865: ARRAY
58866: PUSH
58867: LD_INT 2
58869: ARRAY
58870: PPUSH
58871: CALL_OW 351
58875: OR
58876: IFFALSE 58882
// exit ;
58878: POP
58879: POP
58880: GO 59189
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58882: LD_ADDR_VAR 0 8
58886: PUSH
58887: LD_VAR 0 12
58891: PUSH
58892: LD_VAR 0 7
58896: ARRAY
58897: PUSH
58898: LD_INT 1
58900: ARRAY
58901: PPUSH
58902: LD_VAR 0 12
58906: PUSH
58907: LD_VAR 0 7
58911: ARRAY
58912: PUSH
58913: LD_INT 2
58915: ARRAY
58916: PPUSH
58917: CALL_OW 546
58921: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
58922: LD_VAR 0 8
58926: PUSH
58927: LD_INT 1
58929: ARRAY
58930: PUSH
58931: LD_VAR 0 8
58935: PUSH
58936: LD_INT 2
58938: ARRAY
58939: PUSH
58940: LD_VAR 0 13
58944: PUSH
58945: LD_INT 2
58947: PLUS
58948: GREATER
58949: OR
58950: PUSH
58951: LD_VAR 0 8
58955: PUSH
58956: LD_INT 2
58958: ARRAY
58959: PUSH
58960: LD_VAR 0 13
58964: PUSH
58965: LD_INT 2
58967: MINUS
58968: LESS
58969: OR
58970: PUSH
58971: LD_VAR 0 8
58975: PUSH
58976: LD_INT 3
58978: ARRAY
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 8
58985: PUSH
58986: LD_INT 9
58988: PUSH
58989: LD_INT 10
58991: PUSH
58992: LD_INT 11
58994: PUSH
58995: LD_INT 12
58997: PUSH
58998: LD_INT 13
59000: PUSH
59001: LD_INT 16
59003: PUSH
59004: LD_INT 17
59006: PUSH
59007: LD_INT 18
59009: PUSH
59010: LD_INT 19
59012: PUSH
59013: LD_INT 20
59015: PUSH
59016: LD_INT 21
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: IN
59034: NOT
59035: OR
59036: PUSH
59037: LD_VAR 0 8
59041: PUSH
59042: LD_INT 5
59044: ARRAY
59045: NOT
59046: OR
59047: PUSH
59048: LD_VAR 0 8
59052: PUSH
59053: LD_INT 6
59055: ARRAY
59056: PUSH
59057: LD_INT 1
59059: PUSH
59060: LD_INT 2
59062: PUSH
59063: LD_INT 7
59065: PUSH
59066: LD_INT 9
59068: PUSH
59069: LD_INT 10
59071: PUSH
59072: LD_INT 11
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: IN
59083: NOT
59084: OR
59085: IFFALSE 59091
// exit ;
59087: POP
59088: POP
59089: GO 59189
// end ;
59091: GO 58762
59093: POP
59094: POP
// side := GetSide ( bdepot ) ;
59095: LD_ADDR_VAR 0 9
59099: PUSH
59100: LD_VAR 0 1
59104: PPUSH
59105: CALL_OW 255
59109: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59110: LD_VAR 0 9
59114: PPUSH
59115: LD_VAR 0 3
59119: PPUSH
59120: LD_VAR 0 4
59124: PPUSH
59125: LD_INT 20
59127: PPUSH
59128: CALL 51861 0 4
59132: PUSH
59133: LD_INT 4
59135: ARRAY
59136: IFFALSE 59140
// exit ;
59138: GO 59189
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59140: LD_VAR 0 2
59144: PUSH
59145: LD_INT 29
59147: PUSH
59148: LD_INT 30
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: IN
59155: PUSH
59156: LD_VAR 0 3
59160: PPUSH
59161: LD_VAR 0 4
59165: PPUSH
59166: LD_VAR 0 9
59170: PPUSH
59171: CALL_OW 440
59175: NOT
59176: AND
59177: IFFALSE 59181
// exit ;
59179: GO 59189
// result := true ;
59181: LD_ADDR_VAR 0 6
59185: PUSH
59186: LD_INT 1
59188: ST_TO_ADDR
// end ;
59189: LD_VAR 0 6
59193: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
59194: LD_INT 0
59196: PPUSH
59197: PPUSH
59198: PPUSH
59199: PPUSH
59200: PPUSH
59201: PPUSH
59202: PPUSH
59203: PPUSH
59204: PPUSH
59205: PPUSH
59206: PPUSH
59207: PPUSH
59208: PPUSH
59209: PPUSH
59210: PPUSH
59211: PPUSH
59212: PPUSH
59213: PPUSH
59214: PPUSH
59215: PPUSH
59216: PPUSH
59217: PPUSH
59218: PPUSH
59219: PPUSH
59220: PPUSH
59221: PPUSH
59222: PPUSH
59223: PPUSH
59224: PPUSH
59225: PPUSH
59226: PPUSH
59227: PPUSH
59228: PPUSH
59229: PPUSH
59230: PPUSH
59231: PPUSH
59232: PPUSH
59233: PPUSH
59234: PPUSH
59235: PPUSH
59236: PPUSH
59237: PPUSH
59238: PPUSH
59239: PPUSH
59240: PPUSH
59241: PPUSH
59242: PPUSH
59243: PPUSH
59244: PPUSH
59245: PPUSH
59246: PPUSH
59247: PPUSH
59248: PPUSH
59249: PPUSH
59250: PPUSH
59251: PPUSH
59252: PPUSH
59253: PPUSH
// result = [ ] ;
59254: LD_ADDR_VAR 0 7
59258: PUSH
59259: EMPTY
59260: ST_TO_ADDR
// temp_list = [ ] ;
59261: LD_ADDR_VAR 0 9
59265: PUSH
59266: EMPTY
59267: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59268: LD_VAR 0 4
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: LD_INT 1
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: LD_INT 5
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: IN
59299: NOT
59300: PUSH
59301: LD_VAR 0 1
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: IN
59316: PUSH
59317: LD_VAR 0 5
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 3
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: IN
59336: NOT
59337: AND
59338: OR
59339: IFFALSE 59343
// exit ;
59341: GO 77728
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 6
59350: PUSH
59351: LD_INT 7
59353: PUSH
59354: LD_INT 8
59356: PUSH
59357: LD_INT 13
59359: PUSH
59360: LD_INT 12
59362: PUSH
59363: LD_INT 15
59365: PUSH
59366: LD_INT 11
59368: PUSH
59369: LD_INT 14
59371: PUSH
59372: LD_INT 10
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: IN
59386: IFFALSE 59396
// btype = b_lab ;
59388: LD_ADDR_VAR 0 1
59392: PUSH
59393: LD_INT 6
59395: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59396: LD_VAR 0 6
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: LD_INT 2
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: IN
59415: NOT
59416: PUSH
59417: LD_VAR 0 1
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: LD_INT 3
59433: PUSH
59434: LD_INT 6
59436: PUSH
59437: LD_INT 36
59439: PUSH
59440: LD_INT 4
59442: PUSH
59443: LD_INT 5
59445: PUSH
59446: LD_INT 31
59448: PUSH
59449: LD_INT 32
59451: PUSH
59452: LD_INT 33
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: IN
59468: NOT
59469: PUSH
59470: LD_VAR 0 6
59474: PUSH
59475: LD_INT 1
59477: EQUAL
59478: AND
59479: OR
59480: PUSH
59481: LD_VAR 0 1
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 3
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: IN
59496: NOT
59497: PUSH
59498: LD_VAR 0 6
59502: PUSH
59503: LD_INT 2
59505: EQUAL
59506: AND
59507: OR
59508: IFFALSE 59518
// mode = 0 ;
59510: LD_ADDR_VAR 0 6
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// case mode of 0 :
59518: LD_VAR 0 6
59522: PUSH
59523: LD_INT 0
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59531
59529: GO 70984
59531: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59532: LD_ADDR_VAR 0 11
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 1
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 2
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 1
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 1
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: LD_INT 3
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 2
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59725: LD_ADDR_VAR 0 12
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 1
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: NEG
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: LD_INT 1
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 3
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59921: LD_ADDR_VAR 0 13
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 2
60056: NEG
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: NEG
60069: PUSH
60070: LD_INT 3
60072: NEG
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: NEG
60081: PUSH
60082: LD_INT 2
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 3
60092: NEG
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60120: LD_ADDR_VAR 0 14
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 2
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60316: LD_ADDR_VAR 0 15
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 0
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 1
60385: NEG
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 2
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60509: LD_ADDR_VAR 0 16
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 2
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 1
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: LD_INT 2
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 3
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: LD_INT 3
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60702: LD_ADDR_VAR 0 17
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 1
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 1
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 1
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: LD_INT 1
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 2
60837: PUSH
60838: LD_INT 2
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 2
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: NEG
60879: PUSH
60880: LD_INT 0
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: LD_INT 1
60893: NEG
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 2
60901: NEG
60902: PUSH
60903: LD_INT 2
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60932: LD_ADDR_VAR 0 18
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 0
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: NEG
61002: PUSH
61003: LD_INT 1
61005: NEG
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: LD_INT 1
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: LD_INT 2
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 2
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: LD_INT 1
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: NEG
61132: PUSH
61133: LD_INT 2
61135: NEG
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61162: LD_ADDR_VAR 0 19
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: NEG
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 1
61231: NEG
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 1
61243: NEG
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 0
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 1
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 2
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: LD_INT 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: LD_INT 2
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: LD_INT 1
61353: NEG
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: PUSH
61359: LD_INT 2
61361: NEG
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61392: LD_ADDR_VAR 0 20
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 1
61461: NEG
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 2
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 2
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 2
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 1
61537: PUSH
61538: LD_INT 2
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 2
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 1
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 2
61579: NEG
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61622: LD_ADDR_VAR 0 21
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 0
61670: PUSH
61671: LD_INT 1
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 1
61680: NEG
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: LD_INT 1
61695: NEG
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 0
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 2
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 2
61798: NEG
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 2
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61852: LD_ADDR_VAR 0 22
61856: PUSH
61857: LD_INT 0
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: PUSH
61891: LD_INT 1
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 0
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 1
61933: NEG
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 0
61945: PUSH
61946: LD_INT 2
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 2
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 2
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 0
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 1
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 2
62028: NEG
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: NEG
62052: PUSH
62053: LD_INT 2
62055: NEG
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62082: LD_ADDR_VAR 0 23
62086: PUSH
62087: LD_INT 0
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 0
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 2
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 2
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: NEG
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 2
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: NEG
62282: PUSH
62283: LD_INT 2
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 2
62293: NEG
62294: PUSH
62295: LD_INT 3
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 1
62305: NEG
62306: PUSH
62307: LD_INT 3
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 1
62317: PUSH
62318: LD_INT 2
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62362: LD_ADDR_VAR 0 24
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 0
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 0
62379: PUSH
62380: LD_INT 1
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: LD_INT 0
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 1
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: LD_INT 1
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 1
62420: NEG
62421: PUSH
62422: LD_INT 0
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: NEG
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: LD_INT 2
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 1
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 2
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 2
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: LD_INT 2
62576: NEG
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 2
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 3
62605: PUSH
62606: LD_INT 2
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62638: LD_ADDR_VAR 0 25
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 1
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 1
62719: NEG
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 0
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 1
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: LD_INT 0
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: LD_INT 1
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 2
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 2
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 0
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 1
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: LD_INT 2
62837: NEG
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: PUSH
62850: LD_INT 1
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 3
62859: PUSH
62860: LD_INT 2
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: LD_INT 3
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62912: LD_ADDR_VAR 0 26
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 0
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 0
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 0
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: NEG
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 1
62985: NEG
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 1
62993: NEG
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 1
63016: PUSH
63017: LD_INT 1
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 2
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: PUSH
63058: LD_INT 2
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: LD_INT 2
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: LD_INT 2
63088: NEG
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 2
63099: NEG
63100: PUSH
63101: LD_INT 1
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 2
63111: NEG
63112: PUSH
63113: LD_INT 2
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 2
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: NEG
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63188: LD_ADDR_VAR 0 27
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 1
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 1
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 1
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 1
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: LD_INT 2
63273: NEG
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: LD_INT 2
63284: NEG
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 1
63295: NEG
63296: PUSH
63297: EMPTY
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: LD_INT 0
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: LD_INT 1
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 1
63333: PUSH
63334: LD_INT 2
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 1
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 2
63375: NEG
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 1
63399: NEG
63400: PUSH
63401: LD_INT 2
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 2
63410: NEG
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: LD_INT 1
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 3
63433: NEG
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63468: LD_ADDR_VAR 0 28
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 1
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 1
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: LD_INT 1
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 1
63526: NEG
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: LD_INT 1
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 1
63549: NEG
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 2
63564: NEG
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: LD_INT 1
63575: NEG
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 1
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: NEG
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 2
63644: NEG
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 2
63671: NEG
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: LD_INT 3
63683: NEG
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 1
63691: NEG
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: LD_INT 1
63707: NEG
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 3
63715: NEG
63716: PUSH
63717: LD_INT 2
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63750: LD_ADDR_VAR 0 29
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 1
63778: PUSH
63779: LD_INT 0
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: LD_INT 1
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 0
63798: PUSH
63799: LD_INT 1
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: NEG
63809: PUSH
63810: LD_INT 0
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: LD_INT 2
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 2
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 2
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: LD_INT 2
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 2
63928: NEG
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: LD_INT 3
63944: NEG
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 2
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 3
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 3
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 1
63983: NEG
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 2
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64029: LD_ADDR_VAR 0 30
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 2
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: LD_INT 2
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: PUSH
64175: LD_INT 2
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: LD_INT 0
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: LD_INT 1
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 1
64218: NEG
64219: PUSH
64220: LD_INT 3
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: LD_INT 2
64233: NEG
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 2
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64307: LD_ADDR_VAR 0 31
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 0
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 1
64376: NEG
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: LD_INT 1
64388: NEG
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 1
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: PUSH
64422: LD_INT 1
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 2
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 1
64441: PUSH
64442: LD_INT 2
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 0
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: NEG
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 2
64472: NEG
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 2
64484: NEG
64485: PUSH
64486: LD_INT 2
64488: NEG
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 2
64496: NEG
64497: PUSH
64498: LD_INT 3
64500: NEG
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 2
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 3
64519: PUSH
64520: LD_INT 1
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: PUSH
64530: LD_INT 3
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 1
64539: NEG
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 3
64550: NEG
64551: PUSH
64552: LD_INT 2
64554: NEG
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64585: LD_ADDR_VAR 0 32
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 0
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: LD_INT 0
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 1
64654: NEG
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: LD_INT 2
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 2
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 1
64689: PUSH
64690: LD_INT 1
64692: NEG
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 2
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 2
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 0
64730: PUSH
64731: LD_INT 2
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 1
64740: NEG
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 2
64751: NEG
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 2
64762: NEG
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: NEG
64775: PUSH
64776: LD_INT 3
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 1
64786: PUSH
64787: LD_INT 2
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 3
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 2
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: NEG
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64863: LD_ADDR_VAR 0 33
64867: PUSH
64868: LD_INT 0
64870: PUSH
64871: LD_INT 0
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 1
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 1
64921: NEG
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: NEG
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: NEG
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 1
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 2
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 2
64977: PUSH
64978: LD_INT 1
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: LD_INT 0
64997: PUSH
64998: LD_INT 2
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PUSH
65016: LD_INT 2
65018: NEG
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: LD_INT 2
65045: NEG
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 2
65053: NEG
65054: PUSH
65055: LD_INT 3
65057: NEG
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: LD_INT 1
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: LD_INT 3
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 1
65096: NEG
65097: PUSH
65098: LD_INT 2
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 3
65107: NEG
65108: PUSH
65109: LD_INT 2
65111: NEG
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65142: LD_ADDR_VAR 0 34
65146: PUSH
65147: LD_INT 0
65149: PUSH
65150: LD_INT 0
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 1
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: LD_INT 1
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 0
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: LD_INT 0
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 1
65211: NEG
65212: PUSH
65213: LD_INT 1
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 0
65235: PUSH
65236: LD_INT 2
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: LD_INT 1
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 2
65267: PUSH
65268: LD_INT 2
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: NEG
65299: PUSH
65300: LD_INT 0
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: NEG
65322: PUSH
65323: LD_INT 2
65325: NEG
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 3
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 2
65366: PUSH
65367: LD_INT 3
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 2
65376: NEG
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 3
65387: NEG
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: LIST
65412: LIST
65413: LIST
65414: LIST
65415: LIST
65416: LIST
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65422: LD_ADDR_VAR 0 35
65426: PUSH
65427: LD_INT 0
65429: PUSH
65430: LD_INT 0
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 1
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: LD_INT 1
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 0
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 1
65480: NEG
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 1
65491: NEG
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: LD_INT 1
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 2
65513: NEG
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65534: LD_ADDR_VAR 0 36
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 1
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: PUSH
65573: LD_INT 1
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 0
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 1
65592: NEG
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 1
65603: NEG
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 1
65615: NEG
65616: PUSH
65617: LD_INT 2
65619: NEG
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65646: LD_ADDR_VAR 0 37
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 0
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 1
65684: PUSH
65685: LD_INT 1
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 1
65738: NEG
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65758: LD_ADDR_VAR 0 38
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 0
65775: PUSH
65776: LD_INT 1
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 1
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: LD_INT 1
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 0
65806: PUSH
65807: LD_INT 1
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 0
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 1
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 2
65849: NEG
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65870: LD_ADDR_VAR 0 39
65874: PUSH
65875: LD_INT 0
65877: PUSH
65878: LD_INT 0
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 1
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 0
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: NEG
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: LD_INT 1
65943: NEG
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 1
65951: NEG
65952: PUSH
65953: LD_INT 2
65955: NEG
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 1
65963: PUSH
65964: LD_INT 2
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65982: LD_ADDR_VAR 0 40
65986: PUSH
65987: LD_INT 0
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 1
66055: NEG
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 1
66066: NEG
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: NEG
66075: PUSH
66076: LD_INT 1
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66094: LD_ADDR_VAR 0 41
66098: PUSH
66099: LD_INT 0
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 1
66122: PUSH
66123: LD_INT 0
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: LD_INT 0
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: NEG
66176: PUSH
66177: LD_INT 2
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 1
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 2
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: LD_INT 1
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 2
66218: PUSH
66219: LD_INT 2
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: NEG
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: NEG
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: LD_INT 1
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 3
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: LD_INT 3
66317: PUSH
66318: LD_INT 1
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 3
66327: PUSH
66328: LD_INT 2
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: PUSH
66335: LD_INT 3
66337: PUSH
66338: LD_INT 3
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 2
66347: PUSH
66348: LD_INT 3
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 2
66357: NEG
66358: PUSH
66359: LD_INT 1
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 3
66368: NEG
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 3
66379: NEG
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 2
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 3
66403: NEG
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66444: LD_ADDR_VAR 0 42
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 0
66461: PUSH
66462: LD_INT 1
66464: NEG
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: LD_INT 1
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 1
66502: NEG
66503: PUSH
66504: LD_INT 0
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: NEG
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 2
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 1
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 2
66559: PUSH
66560: LD_INT 1
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 2
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 2
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: LD_INT 1
66614: NEG
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: LD_INT 2
66626: NEG
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 3
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 1
66646: NEG
66647: PUSH
66648: LD_INT 3
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 3
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 2
66700: PUSH
66701: LD_INT 3
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: LD_INT 3
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 3
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 1
66730: NEG
66731: PUSH
66732: LD_INT 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: LD_INT 2
66745: NEG
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 3
66753: NEG
66754: PUSH
66755: LD_INT 3
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66794: LD_ADDR_VAR 0 43
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: LD_INT 0
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 0
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 0
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 0
66842: PUSH
66843: LD_INT 1
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 0
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: LD_INT 1
66863: NEG
66864: PUSH
66865: LD_INT 1
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 1
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 0
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: LD_INT 1
66901: NEG
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 2
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 2
66919: PUSH
66920: LD_INT 1
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: LD_INT 2
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 0
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: NEG
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 2
66960: NEG
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 2
66971: NEG
66972: PUSH
66973: LD_INT 1
66975: NEG
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: LD_INT 1
67020: NEG
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 3
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: PUSH
67049: LD_INT 3
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 0
67058: PUSH
67059: LD_INT 3
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 1
67068: NEG
67069: PUSH
67070: LD_INT 2
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 2
67079: NEG
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 3
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: NEG
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67142: LD_ADDR_VAR 0 44
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: LD_INT 0
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 0
67159: PUSH
67160: LD_INT 1
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 1
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 1
67200: NEG
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 1
67211: NEG
67212: PUSH
67213: LD_INT 1
67215: NEG
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 1
67223: NEG
67224: PUSH
67225: LD_INT 2
67227: NEG
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 2
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: LD_INT 2
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 1
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 2
67308: NEG
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 2
67320: NEG
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 2
67332: NEG
67333: PUSH
67334: LD_INT 3
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 2
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 3
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: EMPTY
67370: LIST
67371: LIST
67372: PUSH
67373: LD_INT 3
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: EMPTY
67380: LIST
67381: LIST
67382: PUSH
67383: LD_INT 3
67385: PUSH
67386: LD_INT 3
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 2
67395: PUSH
67396: LD_INT 3
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 2
67405: NEG
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 3
67427: NEG
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 3
67439: NEG
67440: PUSH
67441: LD_INT 2
67443: NEG
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 3
67451: NEG
67452: PUSH
67453: LD_INT 3
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67492: LD_ADDR_VAR 0 45
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: LD_INT 0
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 1
67530: PUSH
67531: LD_INT 1
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 0
67540: PUSH
67541: LD_INT 1
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: NEG
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 1
67561: NEG
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 2
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: LD_INT 1
67599: NEG
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: PUSH
67605: LD_INT 2
67607: PUSH
67608: LD_INT 1
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: LD_INT 2
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 1
67627: PUSH
67628: LD_INT 2
67630: PUSH
67631: EMPTY
67632: LIST
67633: LIST
67634: PUSH
67635: LD_INT 0
67637: PUSH
67638: LD_INT 2
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 1
67647: NEG
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 2
67658: NEG
67659: PUSH
67660: LD_INT 1
67662: NEG
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PUSH
67668: LD_INT 2
67670: NEG
67671: PUSH
67672: LD_INT 2
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: NEG
67683: PUSH
67684: LD_INT 3
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 1
67694: NEG
67695: PUSH
67696: LD_INT 3
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 0
67706: PUSH
67707: LD_INT 3
67709: NEG
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: PUSH
67718: LD_INT 2
67720: NEG
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 3
67728: PUSH
67729: LD_INT 2
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 3
67738: PUSH
67739: LD_INT 3
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 2
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: LD_INT 3
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: LD_INT 3
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 1
67778: NEG
67779: PUSH
67780: LD_INT 2
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: PUSH
67787: LD_INT 3
67789: NEG
67790: PUSH
67791: LD_INT 2
67793: NEG
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: LD_INT 3
67801: NEG
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: LIST
67828: LIST
67829: LIST
67830: LIST
67831: LIST
67832: LIST
67833: LIST
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67842: LD_ADDR_VAR 0 46
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: LD_INT 0
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: LD_INT 1
67862: NEG
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: PUSH
67881: LD_INT 1
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: LD_INT 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 1
67900: NEG
67901: PUSH
67902: LD_INT 0
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 1
67911: NEG
67912: PUSH
67913: LD_INT 1
67915: NEG
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 0
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: PUSH
67978: LD_INT 2
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 0
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 1
67997: NEG
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 2
68008: NEG
68009: PUSH
68010: LD_INT 0
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: PUSH
68017: LD_INT 2
68019: NEG
68020: PUSH
68021: LD_INT 1
68023: NEG
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 1
68031: NEG
68032: PUSH
68033: LD_INT 3
68035: NEG
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 0
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: LD_INT 2
68057: NEG
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: LD_INT 1
68068: NEG
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 3
68086: PUSH
68087: LD_INT 1
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 1
68096: PUSH
68097: LD_INT 3
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: LD_INT 2
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 2
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 3
68138: NEG
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 3
68149: NEG
68150: PUSH
68151: LD_INT 1
68153: NEG
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68190: LD_ADDR_VAR 0 47
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: LD_INT 1
68210: NEG
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 1
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 1
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 1
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: NEG
68249: PUSH
68250: LD_INT 0
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 1
68259: NEG
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 1
68271: NEG
68272: PUSH
68273: LD_INT 2
68275: NEG
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: LD_INT 2
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 1
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 2
68317: NEG
68318: PUSH
68319: LD_INT 2
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68341: LD_ADDR_VAR 0 48
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 0
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 1
68379: PUSH
68380: LD_INT 1
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 0
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 0
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: NEG
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 0
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68488: LD_ADDR_VAR 0 49
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: LD_INT 0
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 0
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 1
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 1
68561: NEG
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: PUSH
68570: LD_INT 1
68572: NEG
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: LD_INT 2
68580: PUSH
68581: LD_INT 0
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PUSH
68588: LD_INT 2
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: PUSH
68601: LD_INT 2
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 1
68610: PUSH
68611: LD_INT 2
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68632: LD_ADDR_VAR 0 50
68636: PUSH
68637: LD_INT 0
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 1
68660: PUSH
68661: LD_INT 0
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: LD_INT 1
68670: PUSH
68671: LD_INT 1
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 1
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 1
68690: NEG
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: PUSH
68703: LD_INT 1
68705: NEG
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: LD_INT 1
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: LD_INT 2
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: LD_INT 2
68736: PUSH
68737: EMPTY
68738: LIST
68739: LIST
68740: PUSH
68741: LD_INT 0
68743: PUSH
68744: LD_INT 2
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 1
68753: NEG
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68776: LD_ADDR_VAR 0 51
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 1
68796: NEG
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 1
68804: PUSH
68805: LD_INT 0
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 1
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 0
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 1
68834: NEG
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 1
68845: NEG
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: LD_INT 2
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 0
68867: PUSH
68868: LD_INT 2
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: LD_INT 1
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 2
68888: NEG
68889: PUSH
68890: LD_INT 0
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 2
68899: NEG
68900: PUSH
68901: LD_INT 1
68903: NEG
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68923: LD_ADDR_VAR 0 52
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 0
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: LD_INT 1
68943: NEG
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: LD_INT 1
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 1
68992: NEG
68993: PUSH
68994: LD_INT 1
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: LD_INT 2
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: NEG
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: NEG
69028: PUSH
69029: LD_INT 0
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: NEG
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 2
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: LIST
69070: LIST
69071: LIST
69072: LIST
69073: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69074: LD_ADDR_VAR 0 53
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 1
69102: PUSH
69103: LD_INT 0
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 1
69112: PUSH
69113: LD_INT 1
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PUSH
69120: LD_INT 0
69122: PUSH
69123: LD_INT 1
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: PUSH
69134: LD_INT 0
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: PUSH
69141: LD_INT 1
69143: NEG
69144: PUSH
69145: LD_INT 1
69147: NEG
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: LD_INT 2
69159: NEG
69160: PUSH
69161: EMPTY
69162: LIST
69163: LIST
69164: PUSH
69165: LD_INT 0
69167: PUSH
69168: LD_INT 2
69170: NEG
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 1
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: LD_INT 2
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: LD_INT 2
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: LD_INT 2
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: LD_INT 1
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 2
69250: NEG
69251: PUSH
69252: LD_INT 0
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: NEG
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 2
69273: NEG
69274: PUSH
69275: LD_INT 2
69277: NEG
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69304: LD_ADDR_VAR 0 54
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: LD_INT 1
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 1
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: LD_INT 1
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 0
69352: PUSH
69353: LD_INT 1
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: LD_INT 1
69377: NEG
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: LD_INT 2
69389: NEG
69390: PUSH
69391: EMPTY
69392: LIST
69393: LIST
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 2
69419: PUSH
69420: LD_INT 0
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: PUSH
69427: LD_INT 2
69429: PUSH
69430: LD_INT 1
69432: PUSH
69433: EMPTY
69434: LIST
69435: LIST
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: LD_INT 2
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 1
69449: PUSH
69450: LD_INT 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: LD_INT 2
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 1
69469: NEG
69470: PUSH
69471: LD_INT 1
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: LD_INT 1
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 2
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69534: LD_ADDR_VAR 0 55
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: LD_INT 0
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: LD_INT 1
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 0
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: EMPTY
69598: LIST
69599: LIST
69600: PUSH
69601: LD_INT 1
69603: NEG
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: LD_INT 2
69619: NEG
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 2
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: LD_INT 1
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 2
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: PUSH
69660: LD_INT 1
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 2
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 2
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: NEG
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 2
69733: NEG
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69764: LD_ADDR_VAR 0 56
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 0
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: LD_INT 1
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 1
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 1
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 1
69845: NEG
69846: PUSH
69847: LD_INT 2
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: LD_INT 2
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 1
69868: PUSH
69869: LD_INT 1
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 2
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: LD_INT 1
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 2
69899: PUSH
69900: LD_INT 2
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: LD_INT 2
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 0
69919: PUSH
69920: LD_INT 2
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: NEG
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 2
69940: NEG
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 2
69951: NEG
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 2
69963: NEG
69964: PUSH
69965: LD_INT 2
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: LIST
69993: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69994: LD_ADDR_VAR 0 57
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: LD_INT 0
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 1
70014: NEG
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: PUSH
70020: LD_INT 1
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: LD_INT 1
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: LD_INT 1
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 1
70052: NEG
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 1
70063: NEG
70064: PUSH
70065: LD_INT 1
70067: NEG
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 1
70075: NEG
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 0
70087: PUSH
70088: LD_INT 2
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 2
70109: PUSH
70110: LD_INT 0
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 2
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 2
70129: PUSH
70130: LD_INT 2
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 1
70139: PUSH
70140: LD_INT 2
70142: PUSH
70143: EMPTY
70144: LIST
70145: LIST
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: LD_INT 1
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 2
70170: NEG
70171: PUSH
70172: LD_INT 0
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 2
70181: NEG
70182: PUSH
70183: LD_INT 1
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 2
70193: NEG
70194: PUSH
70195: LD_INT 2
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70224: LD_ADDR_VAR 0 58
70228: PUSH
70229: LD_INT 0
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 1
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 1
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 1
70282: NEG
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 1
70293: NEG
70294: PUSH
70295: LD_INT 1
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: LD_INT 2
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 0
70317: PUSH
70318: LD_INT 2
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 1
70328: PUSH
70329: LD_INT 1
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 2
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 2
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 2
70359: PUSH
70360: LD_INT 2
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: LD_INT 2
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 0
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 1
70389: NEG
70390: PUSH
70391: LD_INT 1
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 2
70400: NEG
70401: PUSH
70402: LD_INT 0
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 2
70411: NEG
70412: PUSH
70413: LD_INT 1
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 2
70423: NEG
70424: PUSH
70425: LD_INT 2
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70454: LD_ADDR_VAR 0 59
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: LD_INT 0
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 1
70474: NEG
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 1
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: LD_INT 1
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 1
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: EMPTY
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70542: LD_ADDR_VAR 0 60
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: LD_INT 0
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: LD_INT 1
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: LD_INT 0
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: LD_INT 1
70583: PUSH
70584: EMPTY
70585: LIST
70586: LIST
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 1
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 1
70600: NEG
70601: PUSH
70602: LD_INT 0
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70630: LD_ADDR_VAR 0 61
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: LD_INT 0
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: LD_INT 1
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 1
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 1
70688: NEG
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: NEG
70700: PUSH
70701: LD_INT 1
70703: NEG
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70718: LD_ADDR_VAR 0 62
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: LD_INT 1
70738: NEG
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: LD_INT 0
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 1
70756: PUSH
70757: LD_INT 1
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_INT 1
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: NEG
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 1
70787: NEG
70788: PUSH
70789: LD_INT 1
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70806: LD_ADDR_VAR 0 63
70810: PUSH
70811: LD_INT 0
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 0
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 0
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: LD_INT 0
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 1
70875: NEG
70876: PUSH
70877: LD_INT 1
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: EMPTY
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70894: LD_ADDR_VAR 0 64
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 0
70911: PUSH
70912: LD_INT 1
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 1
70922: PUSH
70923: LD_INT 0
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: LD_INT 1
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 0
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 1
70952: NEG
70953: PUSH
70954: LD_INT 0
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 1
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: ST_TO_ADDR
// end ; 1 :
70982: GO 76879
70984: LD_INT 1
70986: DOUBLE
70987: EQUAL
70988: IFTRUE 70992
70990: GO 73615
70992: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70993: LD_ADDR_VAR 0 11
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: LD_INT 3
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: LD_INT 3
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 1
71023: PUSH
71024: LD_INT 2
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: LIST
71036: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71037: LD_ADDR_VAR 0 12
71041: PUSH
71042: LD_INT 2
71044: PUSH
71045: LD_INT 1
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 3
71055: PUSH
71056: LD_INT 0
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 3
71065: PUSH
71066: LD_INT 1
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71078: LD_ADDR_VAR 0 13
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: LD_INT 2
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 3
71095: PUSH
71096: LD_INT 3
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: LD_INT 3
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: EMPTY
71114: LIST
71115: LIST
71116: LIST
71117: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71118: LD_ADDR_VAR 0 14
71122: PUSH
71123: LD_INT 1
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: LD_INT 3
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 1
71145: NEG
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: LIST
71158: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71159: LD_ADDR_VAR 0 15
71163: PUSH
71164: LD_INT 2
71166: NEG
71167: PUSH
71168: LD_INT 1
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 3
71177: NEG
71178: PUSH
71179: LD_INT 0
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71203: LD_ADDR_VAR 0 16
71207: PUSH
71208: LD_INT 2
71210: NEG
71211: PUSH
71212: LD_INT 3
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: LD_INT 2
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 3
71234: NEG
71235: PUSH
71236: LD_INT 3
71238: NEG
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: LIST
71248: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71249: LD_ADDR_VAR 0 17
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: LD_INT 3
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 0
71268: PUSH
71269: LD_INT 3
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: PUSH
71280: LD_INT 2
71282: NEG
71283: PUSH
71284: EMPTY
71285: LIST
71286: LIST
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: LIST
71292: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71293: LD_ADDR_VAR 0 18
71297: PUSH
71298: LD_INT 2
71300: PUSH
71301: LD_INT 1
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 3
71311: PUSH
71312: LD_INT 0
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 3
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: LIST
71333: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71334: LD_ADDR_VAR 0 19
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: LD_INT 2
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 3
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: EMPTY
71356: LIST
71357: LIST
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: LD_INT 3
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: LIST
71373: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71374: LD_ADDR_VAR 0 20
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: LD_INT 3
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 3
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 1
71401: NEG
71402: PUSH
71403: LD_INT 2
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: LIST
71414: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71415: LD_ADDR_VAR 0 21
71419: PUSH
71420: LD_INT 2
71422: NEG
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 3
71433: NEG
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 3
71444: NEG
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: LIST
71458: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71459: LD_ADDR_VAR 0 22
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: LD_INT 3
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 3
71478: NEG
71479: PUSH
71480: LD_INT 2
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 3
71490: NEG
71491: PUSH
71492: LD_INT 3
71494: NEG
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: LIST
71504: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71505: LD_ADDR_VAR 0 23
71509: PUSH
71510: LD_INT 0
71512: PUSH
71513: LD_INT 3
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: LD_INT 4
71527: NEG
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: LD_INT 3
71538: NEG
71539: PUSH
71540: EMPTY
71541: LIST
71542: LIST
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: LIST
71548: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71549: LD_ADDR_VAR 0 24
71553: PUSH
71554: LD_INT 3
71556: PUSH
71557: LD_INT 0
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: PUSH
71567: LD_INT 1
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 4
71577: PUSH
71578: LD_INT 1
71580: PUSH
71581: EMPTY
71582: LIST
71583: LIST
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: LIST
71589: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71590: LD_ADDR_VAR 0 25
71594: PUSH
71595: LD_INT 3
71597: PUSH
71598: LD_INT 3
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: PUSH
71605: LD_INT 4
71607: PUSH
71608: LD_INT 3
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 3
71617: PUSH
71618: LD_INT 4
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71630: LD_ADDR_VAR 0 26
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: LD_INT 3
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 1
71647: PUSH
71648: LD_INT 4
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: NEG
71658: PUSH
71659: LD_INT 3
71661: PUSH
71662: EMPTY
71663: LIST
71664: LIST
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: LIST
71670: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71671: LD_ADDR_VAR 0 27
71675: PUSH
71676: LD_INT 3
71678: NEG
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: NEG
71690: PUSH
71691: LD_INT 1
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 4
71700: NEG
71701: PUSH
71702: LD_INT 1
71704: NEG
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: LIST
71714: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71715: LD_ADDR_VAR 0 28
71719: PUSH
71720: LD_INT 3
71722: NEG
71723: PUSH
71724: LD_INT 3
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 3
71734: NEG
71735: PUSH
71736: LD_INT 4
71738: NEG
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 4
71746: NEG
71747: PUSH
71748: LD_INT 3
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: LIST
71760: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71761: LD_ADDR_VAR 0 29
71765: PUSH
71766: LD_INT 1
71768: NEG
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 0
71780: PUSH
71781: LD_INT 3
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: LD_INT 1
71791: PUSH
71792: LD_INT 2
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 1
71802: NEG
71803: PUSH
71804: LD_INT 4
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 0
71814: PUSH
71815: LD_INT 4
71817: NEG
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 1
71825: PUSH
71826: LD_INT 3
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 1
71836: NEG
71837: PUSH
71838: LD_INT 5
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: LD_INT 5
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 4
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 1
71870: NEG
71871: PUSH
71872: LD_INT 6
71874: NEG
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 0
71882: PUSH
71883: LD_INT 6
71885: NEG
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: PUSH
71894: LD_INT 5
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
71916: LD_ADDR_VAR 0 30
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 3
71934: PUSH
71935: LD_INT 0
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 3
71944: PUSH
71945: LD_INT 1
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 3
71954: PUSH
71955: LD_INT 1
71957: NEG
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 4
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: PUSH
71973: LD_INT 4
71975: PUSH
71976: LD_INT 1
71978: PUSH
71979: EMPTY
71980: LIST
71981: LIST
71982: PUSH
71983: LD_INT 4
71985: PUSH
71986: LD_INT 1
71988: NEG
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 5
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: LD_INT 5
72006: PUSH
72007: LD_INT 1
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 5
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 6
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 6
72037: PUSH
72038: LD_INT 1
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: LIST
72049: LIST
72050: LIST
72051: LIST
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72059: LD_ADDR_VAR 0 31
72063: PUSH
72064: LD_INT 3
72066: PUSH
72067: LD_INT 2
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 3
72076: PUSH
72077: LD_INT 3
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: PUSH
72084: LD_INT 2
72086: PUSH
72087: LD_INT 3
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 4
72096: PUSH
72097: LD_INT 3
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 4
72106: PUSH
72107: LD_INT 4
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_INT 3
72116: PUSH
72117: LD_INT 4
72119: PUSH
72120: EMPTY
72121: LIST
72122: LIST
72123: PUSH
72124: LD_INT 5
72126: PUSH
72127: LD_INT 4
72129: PUSH
72130: EMPTY
72131: LIST
72132: LIST
72133: PUSH
72134: LD_INT 5
72136: PUSH
72137: LD_INT 5
72139: PUSH
72140: EMPTY
72141: LIST
72142: LIST
72143: PUSH
72144: LD_INT 4
72146: PUSH
72147: LD_INT 5
72149: PUSH
72150: EMPTY
72151: LIST
72152: LIST
72153: PUSH
72154: LD_INT 6
72156: PUSH
72157: LD_INT 5
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 6
72166: PUSH
72167: LD_INT 6
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 5
72176: PUSH
72177: LD_INT 6
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72198: LD_ADDR_VAR 0 32
72202: PUSH
72203: LD_INT 1
72205: PUSH
72206: LD_INT 3
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 0
72215: PUSH
72216: LD_INT 3
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 1
72225: NEG
72226: PUSH
72227: LD_INT 2
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 1
72236: PUSH
72237: LD_INT 4
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_INT 4
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 1
72267: PUSH
72268: LD_INT 5
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: LD_INT 5
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: NEG
72288: PUSH
72289: LD_INT 4
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 1
72298: PUSH
72299: LD_INT 6
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 0
72308: PUSH
72309: LD_INT 6
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 1
72318: NEG
72319: PUSH
72320: LD_INT 5
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72341: LD_ADDR_VAR 0 33
72345: PUSH
72346: LD_INT 2
72348: NEG
72349: PUSH
72350: LD_INT 1
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 3
72359: NEG
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: NEG
72371: PUSH
72372: LD_INT 1
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 3
72382: NEG
72383: PUSH
72384: LD_INT 1
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: PUSH
72391: LD_INT 4
72393: NEG
72394: PUSH
72395: LD_INT 0
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 4
72404: NEG
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: LD_INT 4
72416: NEG
72417: PUSH
72418: LD_INT 1
72420: PUSH
72421: EMPTY
72422: LIST
72423: LIST
72424: PUSH
72425: LD_INT 5
72427: NEG
72428: PUSH
72429: LD_INT 0
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 5
72438: NEG
72439: PUSH
72440: LD_INT 1
72442: NEG
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: LD_INT 5
72450: NEG
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 6
72461: NEG
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 6
72472: NEG
72473: PUSH
72474: LD_INT 1
72476: NEG
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72496: LD_ADDR_VAR 0 34
72500: PUSH
72501: LD_INT 2
72503: NEG
72504: PUSH
72505: LD_INT 3
72507: NEG
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 3
72515: NEG
72516: PUSH
72517: LD_INT 2
72519: NEG
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: PUSH
72525: LD_INT 3
72527: NEG
72528: PUSH
72529: LD_INT 3
72531: NEG
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: PUSH
72537: LD_INT 3
72539: NEG
72540: PUSH
72541: LD_INT 4
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 4
72551: NEG
72552: PUSH
72553: LD_INT 3
72555: NEG
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 4
72563: NEG
72564: PUSH
72565: LD_INT 4
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 4
72575: NEG
72576: PUSH
72577: LD_INT 5
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 5
72587: NEG
72588: PUSH
72589: LD_INT 4
72591: NEG
72592: PUSH
72593: EMPTY
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 5
72599: NEG
72600: PUSH
72601: LD_INT 5
72603: NEG
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 5
72611: NEG
72612: PUSH
72613: LD_INT 6
72615: NEG
72616: PUSH
72617: EMPTY
72618: LIST
72619: LIST
72620: PUSH
72621: LD_INT 6
72623: NEG
72624: PUSH
72625: LD_INT 5
72627: NEG
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 6
72635: NEG
72636: PUSH
72637: LD_INT 6
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: EMPTY
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72659: LD_ADDR_VAR 0 41
72663: PUSH
72664: LD_INT 0
72666: PUSH
72667: LD_INT 2
72669: NEG
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 1
72677: NEG
72678: PUSH
72679: LD_INT 3
72681: NEG
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 1
72689: PUSH
72690: LD_INT 2
72692: NEG
72693: PUSH
72694: EMPTY
72695: LIST
72696: LIST
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: LIST
72702: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72703: LD_ADDR_VAR 0 42
72707: PUSH
72708: LD_INT 2
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 2
72720: PUSH
72721: LD_INT 1
72723: NEG
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 3
72731: PUSH
72732: LD_INT 1
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72744: LD_ADDR_VAR 0 43
72748: PUSH
72749: LD_INT 2
72751: PUSH
72752: LD_INT 2
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 3
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72784: LD_ADDR_VAR 0 44
72788: PUSH
72789: LD_INT 0
72791: PUSH
72792: LD_INT 2
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 1
72801: PUSH
72802: LD_INT 3
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 1
72811: NEG
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: LIST
72824: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
72825: LD_ADDR_VAR 0 45
72829: PUSH
72830: LD_INT 2
72832: NEG
72833: PUSH
72834: LD_INT 0
72836: PUSH
72837: EMPTY
72838: LIST
72839: LIST
72840: PUSH
72841: LD_INT 2
72843: NEG
72844: PUSH
72845: LD_INT 1
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 3
72854: NEG
72855: PUSH
72856: LD_INT 1
72858: NEG
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: PUSH
72864: EMPTY
72865: LIST
72866: LIST
72867: LIST
72868: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
72869: LD_ADDR_VAR 0 46
72873: PUSH
72874: LD_INT 2
72876: NEG
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 2
72888: NEG
72889: PUSH
72890: LD_INT 3
72892: NEG
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 3
72900: NEG
72901: PUSH
72902: LD_INT 2
72904: NEG
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: LIST
72914: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
72915: LD_ADDR_VAR 0 47
72919: PUSH
72920: LD_INT 2
72922: NEG
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 1
72934: NEG
72935: PUSH
72936: LD_INT 3
72938: NEG
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72948: LD_ADDR_VAR 0 48
72952: PUSH
72953: LD_INT 1
72955: PUSH
72956: LD_INT 2
72958: NEG
72959: PUSH
72960: EMPTY
72961: LIST
72962: LIST
72963: PUSH
72964: LD_INT 2
72966: PUSH
72967: LD_INT 1
72969: NEG
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: EMPTY
72976: LIST
72977: LIST
72978: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
72979: LD_ADDR_VAR 0 49
72983: PUSH
72984: LD_INT 3
72986: PUSH
72987: LD_INT 1
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 3
72996: PUSH
72997: LD_INT 2
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73008: LD_ADDR_VAR 0 50
73012: PUSH
73013: LD_INT 2
73015: PUSH
73016: LD_INT 3
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 1
73025: PUSH
73026: LD_INT 3
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: EMPTY
73034: LIST
73035: LIST
73036: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73037: LD_ADDR_VAR 0 51
73041: PUSH
73042: LD_INT 1
73044: NEG
73045: PUSH
73046: LD_INT 2
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 2
73055: NEG
73056: PUSH
73057: LD_INT 1
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73068: LD_ADDR_VAR 0 52
73072: PUSH
73073: LD_INT 3
73075: NEG
73076: PUSH
73077: LD_INT 1
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 3
73087: NEG
73088: PUSH
73089: LD_INT 2
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73101: LD_ADDR_VAR 0 53
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: LD_INT 3
73112: NEG
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 0
73120: PUSH
73121: LD_INT 3
73123: NEG
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_INT 1
73131: PUSH
73132: LD_INT 2
73134: NEG
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: LIST
73144: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73145: LD_ADDR_VAR 0 54
73149: PUSH
73150: LD_INT 2
73152: PUSH
73153: LD_INT 1
73155: NEG
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 3
73163: PUSH
73164: LD_INT 0
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 3
73173: PUSH
73174: LD_INT 1
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: LIST
73185: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73186: LD_ADDR_VAR 0 55
73190: PUSH
73191: LD_INT 3
73193: PUSH
73194: LD_INT 2
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: LD_INT 3
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 2
73213: PUSH
73214: LD_INT 3
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: LIST
73225: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73226: LD_ADDR_VAR 0 56
73230: PUSH
73231: LD_INT 1
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 0
73243: PUSH
73244: LD_INT 3
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: LD_INT 2
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: EMPTY
73263: LIST
73264: LIST
73265: LIST
73266: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73267: LD_ADDR_VAR 0 57
73271: PUSH
73272: LD_INT 2
73274: NEG
73275: PUSH
73276: LD_INT 1
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: LD_INT 3
73285: NEG
73286: PUSH
73287: LD_INT 0
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 3
73296: NEG
73297: PUSH
73298: LD_INT 1
73300: NEG
73301: PUSH
73302: EMPTY
73303: LIST
73304: LIST
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: LIST
73310: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73311: LD_ADDR_VAR 0 58
73315: PUSH
73316: LD_INT 2
73318: NEG
73319: PUSH
73320: LD_INT 3
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 3
73330: NEG
73331: PUSH
73332: LD_INT 2
73334: NEG
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 3
73342: NEG
73343: PUSH
73344: LD_INT 3
73346: NEG
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: LIST
73356: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73357: LD_ADDR_VAR 0 59
73361: PUSH
73362: LD_INT 1
73364: NEG
73365: PUSH
73366: LD_INT 2
73368: NEG
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 0
73376: PUSH
73377: LD_INT 2
73379: NEG
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: LD_INT 1
73390: NEG
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: LIST
73400: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73401: LD_ADDR_VAR 0 60
73405: PUSH
73406: LD_INT 1
73408: PUSH
73409: LD_INT 1
73411: NEG
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 2
73419: PUSH
73420: LD_INT 0
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 2
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: LIST
73441: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73442: LD_ADDR_VAR 0 61
73446: PUSH
73447: LD_INT 2
73449: PUSH
73450: LD_INT 1
73452: PUSH
73453: EMPTY
73454: LIST
73455: LIST
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: LD_INT 2
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: PUSH
73467: LD_INT 1
73469: PUSH
73470: LD_INT 2
73472: PUSH
73473: EMPTY
73474: LIST
73475: LIST
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: LIST
73481: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73482: LD_ADDR_VAR 0 62
73486: PUSH
73487: LD_INT 1
73489: PUSH
73490: LD_INT 2
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 0
73499: PUSH
73500: LD_INT 2
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 1
73509: NEG
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: LIST
73522: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73523: LD_ADDR_VAR 0 63
73527: PUSH
73528: LD_INT 1
73530: NEG
73531: PUSH
73532: LD_INT 1
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 2
73552: NEG
73553: PUSH
73554: LD_INT 1
73556: NEG
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: LIST
73566: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73567: LD_ADDR_VAR 0 64
73571: PUSH
73572: LD_INT 1
73574: NEG
73575: PUSH
73576: LD_INT 2
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 2
73586: NEG
73587: PUSH
73588: LD_INT 1
73590: NEG
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: PUSH
73596: LD_INT 2
73598: NEG
73599: PUSH
73600: LD_INT 2
73602: NEG
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: LIST
73612: ST_TO_ADDR
// end ; 2 :
73613: GO 76879
73615: LD_INT 2
73617: DOUBLE
73618: EQUAL
73619: IFTRUE 73623
73621: GO 76878
73623: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73624: LD_ADDR_VAR 0 29
73628: PUSH
73629: LD_INT 4
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 4
73641: PUSH
73642: LD_INT 1
73644: NEG
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: LD_INT 5
73652: PUSH
73653: LD_INT 0
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 5
73662: PUSH
73663: LD_INT 1
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 4
73672: PUSH
73673: LD_INT 1
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: PUSH
73680: LD_INT 3
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 3
73692: PUSH
73693: LD_INT 1
73695: NEG
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 3
73703: PUSH
73704: LD_INT 2
73706: NEG
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 5
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 3
73724: PUSH
73725: LD_INT 3
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 3
73734: PUSH
73735: LD_INT 2
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 4
73744: PUSH
73745: LD_INT 3
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 4
73754: PUSH
73755: LD_INT 4
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 3
73764: PUSH
73765: LD_INT 4
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 2
73774: PUSH
73775: LD_INT 3
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 2
73784: PUSH
73785: LD_INT 2
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 4
73794: PUSH
73795: LD_INT 2
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: PUSH
73802: LD_INT 2
73804: PUSH
73805: LD_INT 4
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: PUSH
73812: LD_INT 0
73814: PUSH
73815: LD_INT 4
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: LD_INT 3
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 1
73834: PUSH
73835: LD_INT 4
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: LD_INT 5
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: LD_INT 5
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: PUSH
73862: LD_INT 1
73864: NEG
73865: PUSH
73866: LD_INT 4
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 1
73875: NEG
73876: PUSH
73877: LD_INT 3
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 2
73886: PUSH
73887: LD_INT 5
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 2
73896: NEG
73897: PUSH
73898: LD_INT 3
73900: PUSH
73901: EMPTY
73902: LIST
73903: LIST
73904: PUSH
73905: LD_INT 3
73907: NEG
73908: PUSH
73909: LD_INT 0
73911: PUSH
73912: EMPTY
73913: LIST
73914: LIST
73915: PUSH
73916: LD_INT 3
73918: NEG
73919: PUSH
73920: LD_INT 1
73922: NEG
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 2
73930: NEG
73931: PUSH
73932: LD_INT 0
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 2
73941: NEG
73942: PUSH
73943: LD_INT 1
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 3
73952: NEG
73953: PUSH
73954: LD_INT 1
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 4
73963: NEG
73964: PUSH
73965: LD_INT 0
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 4
73974: NEG
73975: PUSH
73976: LD_INT 1
73978: NEG
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 4
73986: NEG
73987: PUSH
73988: LD_INT 2
73990: NEG
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 2
73998: NEG
73999: PUSH
74000: LD_INT 2
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 4
74009: NEG
74010: PUSH
74011: LD_INT 4
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 4
74021: NEG
74022: PUSH
74023: LD_INT 5
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 3
74033: NEG
74034: PUSH
74035: LD_INT 4
74037: NEG
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 3
74045: NEG
74046: PUSH
74047: LD_INT 3
74049: NEG
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 4
74057: NEG
74058: PUSH
74059: LD_INT 3
74061: NEG
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 5
74069: NEG
74070: PUSH
74071: LD_INT 4
74073: NEG
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 5
74081: NEG
74082: PUSH
74083: LD_INT 5
74085: NEG
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 3
74093: NEG
74094: PUSH
74095: LD_INT 5
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 5
74105: NEG
74106: PUSH
74107: LD_INT 3
74109: NEG
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: LIST
74135: LIST
74136: LIST
74137: LIST
74138: LIST
74139: LIST
74140: LIST
74141: LIST
74142: LIST
74143: LIST
74144: LIST
74145: LIST
74146: LIST
74147: LIST
74148: LIST
74149: LIST
74150: LIST
74151: LIST
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: LIST
74157: LIST
74158: LIST
74159: LIST
74160: LIST
74161: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74162: LD_ADDR_VAR 0 30
74166: PUSH
74167: LD_INT 4
74169: PUSH
74170: LD_INT 4
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: PUSH
74177: LD_INT 4
74179: PUSH
74180: LD_INT 3
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 5
74189: PUSH
74190: LD_INT 4
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: LD_INT 5
74199: PUSH
74200: LD_INT 5
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PUSH
74207: LD_INT 4
74209: PUSH
74210: LD_INT 5
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 3
74219: PUSH
74220: LD_INT 4
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: PUSH
74227: LD_INT 3
74229: PUSH
74230: LD_INT 3
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 5
74239: PUSH
74240: LD_INT 3
74242: PUSH
74243: EMPTY
74244: LIST
74245: LIST
74246: PUSH
74247: LD_INT 3
74249: PUSH
74250: LD_INT 5
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 0
74259: PUSH
74260: LD_INT 3
74262: PUSH
74263: EMPTY
74264: LIST
74265: LIST
74266: PUSH
74267: LD_INT 0
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 1
74279: PUSH
74280: LD_INT 3
74282: PUSH
74283: EMPTY
74284: LIST
74285: LIST
74286: PUSH
74287: LD_INT 1
74289: PUSH
74290: LD_INT 4
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: LD_INT 4
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 1
74309: NEG
74310: PUSH
74311: LD_INT 3
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: PUSH
74322: LD_INT 2
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 2
74331: PUSH
74332: LD_INT 4
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 2
74341: NEG
74342: PUSH
74343: LD_INT 2
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 4
74352: NEG
74353: PUSH
74354: LD_INT 0
74356: PUSH
74357: EMPTY
74358: LIST
74359: LIST
74360: PUSH
74361: LD_INT 4
74363: NEG
74364: PUSH
74365: LD_INT 1
74367: NEG
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 3
74375: NEG
74376: PUSH
74377: LD_INT 0
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 3
74386: NEG
74387: PUSH
74388: LD_INT 1
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 4
74397: NEG
74398: PUSH
74399: LD_INT 1
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 5
74408: NEG
74409: PUSH
74410: LD_INT 0
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PUSH
74417: LD_INT 5
74419: NEG
74420: PUSH
74421: LD_INT 1
74423: NEG
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: PUSH
74429: LD_INT 5
74431: NEG
74432: PUSH
74433: LD_INT 2
74435: NEG
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PUSH
74441: LD_INT 3
74443: NEG
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 3
74454: NEG
74455: PUSH
74456: LD_INT 3
74458: NEG
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: LD_INT 3
74466: NEG
74467: PUSH
74468: LD_INT 4
74470: NEG
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 2
74478: NEG
74479: PUSH
74480: LD_INT 3
74482: NEG
74483: PUSH
74484: EMPTY
74485: LIST
74486: LIST
74487: PUSH
74488: LD_INT 2
74490: NEG
74491: PUSH
74492: LD_INT 2
74494: NEG
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: PUSH
74500: LD_INT 3
74502: NEG
74503: PUSH
74504: LD_INT 2
74506: NEG
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 4
74514: NEG
74515: PUSH
74516: LD_INT 3
74518: NEG
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 4
74526: NEG
74527: PUSH
74528: LD_INT 4
74530: NEG
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: LD_INT 2
74538: NEG
74539: PUSH
74540: LD_INT 4
74542: NEG
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 4
74550: NEG
74551: PUSH
74552: LD_INT 2
74554: NEG
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 0
74562: PUSH
74563: LD_INT 4
74565: NEG
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PUSH
74571: LD_INT 0
74573: PUSH
74574: LD_INT 5
74576: NEG
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PUSH
74582: LD_INT 1
74584: PUSH
74585: LD_INT 4
74587: NEG
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 1
74595: PUSH
74596: LD_INT 3
74598: NEG
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 0
74606: PUSH
74607: LD_INT 3
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 1
74617: NEG
74618: PUSH
74619: LD_INT 4
74621: NEG
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 1
74629: NEG
74630: PUSH
74631: LD_INT 5
74633: NEG
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 2
74641: PUSH
74642: LD_INT 3
74644: NEG
74645: PUSH
74646: EMPTY
74647: LIST
74648: LIST
74649: PUSH
74650: LD_INT 2
74652: NEG
74653: PUSH
74654: LD_INT 5
74656: NEG
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: LIST
74696: LIST
74697: LIST
74698: LIST
74699: LIST
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74709: LD_ADDR_VAR 0 31
74713: PUSH
74714: LD_INT 0
74716: PUSH
74717: LD_INT 4
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 0
74726: PUSH
74727: LD_INT 3
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 1
74736: PUSH
74737: LD_INT 4
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: LD_INT 1
74746: PUSH
74747: LD_INT 5
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: LD_INT 0
74756: PUSH
74757: LD_INT 5
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: PUSH
74764: LD_INT 1
74766: NEG
74767: PUSH
74768: LD_INT 4
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PUSH
74775: LD_INT 1
74777: NEG
74778: PUSH
74779: LD_INT 3
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 2
74788: PUSH
74789: LD_INT 5
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: LD_INT 2
74798: NEG
74799: PUSH
74800: LD_INT 3
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: PUSH
74807: LD_INT 3
74809: NEG
74810: PUSH
74811: LD_INT 0
74813: PUSH
74814: EMPTY
74815: LIST
74816: LIST
74817: PUSH
74818: LD_INT 3
74820: NEG
74821: PUSH
74822: LD_INT 1
74824: NEG
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 2
74832: NEG
74833: PUSH
74834: LD_INT 0
74836: PUSH
74837: EMPTY
74838: LIST
74839: LIST
74840: PUSH
74841: LD_INT 2
74843: NEG
74844: PUSH
74845: LD_INT 1
74847: PUSH
74848: EMPTY
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 3
74854: NEG
74855: PUSH
74856: LD_INT 1
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: PUSH
74863: LD_INT 4
74865: NEG
74866: PUSH
74867: LD_INT 0
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PUSH
74874: LD_INT 4
74876: NEG
74877: PUSH
74878: LD_INT 1
74880: NEG
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 4
74888: NEG
74889: PUSH
74890: LD_INT 2
74892: NEG
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: LD_INT 2
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 4
74911: NEG
74912: PUSH
74913: LD_INT 4
74915: NEG
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 4
74923: NEG
74924: PUSH
74925: LD_INT 5
74927: NEG
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 3
74935: NEG
74936: PUSH
74937: LD_INT 4
74939: NEG
74940: PUSH
74941: EMPTY
74942: LIST
74943: LIST
74944: PUSH
74945: LD_INT 3
74947: NEG
74948: PUSH
74949: LD_INT 3
74951: NEG
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 4
74959: NEG
74960: PUSH
74961: LD_INT 3
74963: NEG
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 5
74971: NEG
74972: PUSH
74973: LD_INT 4
74975: NEG
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 5
74983: NEG
74984: PUSH
74985: LD_INT 5
74987: NEG
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 3
74995: NEG
74996: PUSH
74997: LD_INT 5
74999: NEG
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 5
75007: NEG
75008: PUSH
75009: LD_INT 3
75011: NEG
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 0
75019: PUSH
75020: LD_INT 3
75022: NEG
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 0
75030: PUSH
75031: LD_INT 4
75033: NEG
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 1
75041: PUSH
75042: LD_INT 3
75044: NEG
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 1
75052: PUSH
75053: LD_INT 2
75055: NEG
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_INT 0
75063: PUSH
75064: LD_INT 2
75066: NEG
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 1
75074: NEG
75075: PUSH
75076: LD_INT 3
75078: NEG
75079: PUSH
75080: EMPTY
75081: LIST
75082: LIST
75083: PUSH
75084: LD_INT 1
75086: NEG
75087: PUSH
75088: LD_INT 4
75090: NEG
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: PUSH
75096: LD_INT 2
75098: PUSH
75099: LD_INT 2
75101: NEG
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 2
75109: NEG
75110: PUSH
75111: LD_INT 4
75113: NEG
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 4
75121: PUSH
75122: LD_INT 0
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 4
75131: PUSH
75132: LD_INT 1
75134: NEG
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 5
75142: PUSH
75143: LD_INT 0
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: PUSH
75150: LD_INT 5
75152: PUSH
75153: LD_INT 1
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 4
75162: PUSH
75163: LD_INT 1
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 3
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 3
75182: PUSH
75183: LD_INT 1
75185: NEG
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 3
75193: PUSH
75194: LD_INT 2
75196: NEG
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 5
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: LIST
75242: LIST
75243: LIST
75244: LIST
75245: LIST
75246: LIST
75247: LIST
75248: LIST
75249: LIST
75250: LIST
75251: LIST
75252: LIST
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75259: LD_ADDR_VAR 0 32
75263: PUSH
75264: LD_INT 4
75266: NEG
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 4
75277: NEG
75278: PUSH
75279: LD_INT 1
75281: NEG
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 3
75289: NEG
75290: PUSH
75291: LD_INT 0
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 3
75300: NEG
75301: PUSH
75302: LD_INT 1
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 4
75311: NEG
75312: PUSH
75313: LD_INT 1
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 5
75322: NEG
75323: PUSH
75324: LD_INT 0
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 5
75333: NEG
75334: PUSH
75335: LD_INT 1
75337: NEG
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 5
75345: NEG
75346: PUSH
75347: LD_INT 2
75349: NEG
75350: PUSH
75351: EMPTY
75352: LIST
75353: LIST
75354: PUSH
75355: LD_INT 3
75357: NEG
75358: PUSH
75359: LD_INT 2
75361: PUSH
75362: EMPTY
75363: LIST
75364: LIST
75365: PUSH
75366: LD_INT 3
75368: NEG
75369: PUSH
75370: LD_INT 3
75372: NEG
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PUSH
75378: LD_INT 3
75380: NEG
75381: PUSH
75382: LD_INT 4
75384: NEG
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 2
75392: NEG
75393: PUSH
75394: LD_INT 3
75396: NEG
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: PUSH
75402: LD_INT 2
75404: NEG
75405: PUSH
75406: LD_INT 2
75408: NEG
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 3
75416: NEG
75417: PUSH
75418: LD_INT 2
75420: NEG
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 4
75428: NEG
75429: PUSH
75430: LD_INT 3
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 4
75440: NEG
75441: PUSH
75442: LD_INT 4
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 2
75452: NEG
75453: PUSH
75454: LD_INT 4
75456: NEG
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 4
75464: NEG
75465: PUSH
75466: LD_INT 2
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: LD_INT 4
75479: NEG
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 0
75487: PUSH
75488: LD_INT 5
75490: NEG
75491: PUSH
75492: EMPTY
75493: LIST
75494: LIST
75495: PUSH
75496: LD_INT 1
75498: PUSH
75499: LD_INT 4
75501: NEG
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: LD_INT 3
75512: NEG
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 0
75520: PUSH
75521: LD_INT 3
75523: NEG
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 1
75531: NEG
75532: PUSH
75533: LD_INT 4
75535: NEG
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 1
75543: NEG
75544: PUSH
75545: LD_INT 5
75547: NEG
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 2
75555: PUSH
75556: LD_INT 3
75558: NEG
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 2
75566: NEG
75567: PUSH
75568: LD_INT 5
75570: NEG
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 3
75578: PUSH
75579: LD_INT 0
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 3
75588: PUSH
75589: LD_INT 1
75591: NEG
75592: PUSH
75593: EMPTY
75594: LIST
75595: LIST
75596: PUSH
75597: LD_INT 4
75599: PUSH
75600: LD_INT 0
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 4
75609: PUSH
75610: LD_INT 1
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 3
75619: PUSH
75620: LD_INT 1
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 2
75629: PUSH
75630: LD_INT 0
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 2
75639: PUSH
75640: LD_INT 1
75642: NEG
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: PUSH
75648: LD_INT 2
75650: PUSH
75651: LD_INT 2
75653: NEG
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 4
75661: PUSH
75662: LD_INT 2
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 4
75671: PUSH
75672: LD_INT 4
75674: PUSH
75675: EMPTY
75676: LIST
75677: LIST
75678: PUSH
75679: LD_INT 4
75681: PUSH
75682: LD_INT 3
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 5
75691: PUSH
75692: LD_INT 4
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: LD_INT 5
75701: PUSH
75702: LD_INT 5
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 4
75711: PUSH
75712: LD_INT 5
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 3
75721: PUSH
75722: LD_INT 4
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: PUSH
75729: LD_INT 3
75731: PUSH
75732: LD_INT 3
75734: PUSH
75735: EMPTY
75736: LIST
75737: LIST
75738: PUSH
75739: LD_INT 5
75741: PUSH
75742: LD_INT 3
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 3
75751: PUSH
75752: LD_INT 5
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: LIST
75772: LIST
75773: LIST
75774: LIST
75775: LIST
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
75806: LD_ADDR_VAR 0 33
75810: PUSH
75811: LD_INT 4
75813: NEG
75814: PUSH
75815: LD_INT 4
75817: NEG
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 4
75825: NEG
75826: PUSH
75827: LD_INT 5
75829: NEG
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 3
75837: NEG
75838: PUSH
75839: LD_INT 4
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 3
75849: NEG
75850: PUSH
75851: LD_INT 3
75853: NEG
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 4
75861: NEG
75862: PUSH
75863: LD_INT 3
75865: NEG
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 5
75873: NEG
75874: PUSH
75875: LD_INT 4
75877: NEG
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 5
75885: NEG
75886: PUSH
75887: LD_INT 5
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 3
75897: NEG
75898: PUSH
75899: LD_INT 5
75901: NEG
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: LD_INT 5
75909: NEG
75910: PUSH
75911: LD_INT 3
75913: NEG
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 3
75924: NEG
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: LD_INT 0
75932: PUSH
75933: LD_INT 4
75935: NEG
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 1
75943: PUSH
75944: LD_INT 3
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: LD_INT 2
75957: NEG
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: LD_INT 0
75965: PUSH
75966: LD_INT 2
75968: NEG
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PUSH
75974: LD_INT 1
75976: NEG
75977: PUSH
75978: LD_INT 3
75980: NEG
75981: PUSH
75982: EMPTY
75983: LIST
75984: LIST
75985: PUSH
75986: LD_INT 1
75988: NEG
75989: PUSH
75990: LD_INT 4
75992: NEG
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 2
76000: PUSH
76001: LD_INT 2
76003: NEG
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: LD_INT 4
76015: NEG
76016: PUSH
76017: EMPTY
76018: LIST
76019: LIST
76020: PUSH
76021: LD_INT 4
76023: PUSH
76024: LD_INT 0
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: PUSH
76031: LD_INT 4
76033: PUSH
76034: LD_INT 1
76036: NEG
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 5
76044: PUSH
76045: LD_INT 0
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 5
76054: PUSH
76055: LD_INT 1
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 4
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 3
76074: PUSH
76075: LD_INT 0
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PUSH
76082: LD_INT 3
76084: PUSH
76085: LD_INT 1
76087: NEG
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 3
76095: PUSH
76096: LD_INT 2
76098: NEG
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 5
76106: PUSH
76107: LD_INT 2
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 3
76116: PUSH
76117: LD_INT 3
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 3
76126: PUSH
76127: LD_INT 2
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 4
76136: PUSH
76137: LD_INT 3
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 4
76146: PUSH
76147: LD_INT 4
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 3
76156: PUSH
76157: LD_INT 4
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: LD_INT 2
76166: PUSH
76167: LD_INT 3
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 2
76176: PUSH
76177: LD_INT 2
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 4
76186: PUSH
76187: LD_INT 2
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 2
76196: PUSH
76197: LD_INT 4
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 0
76206: PUSH
76207: LD_INT 4
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: LD_INT 0
76216: PUSH
76217: LD_INT 3
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 1
76226: PUSH
76227: LD_INT 4
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: PUSH
76234: LD_INT 1
76236: PUSH
76237: LD_INT 5
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: LD_INT 5
76249: PUSH
76250: EMPTY
76251: LIST
76252: LIST
76253: PUSH
76254: LD_INT 1
76256: NEG
76257: PUSH
76258: LD_INT 4
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 1
76267: NEG
76268: PUSH
76269: LD_INT 3
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 2
76278: PUSH
76279: LD_INT 5
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 2
76288: NEG
76289: PUSH
76290: LD_INT 3
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: LIST
76329: LIST
76330: LIST
76331: LIST
76332: LIST
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76344: LD_ADDR_VAR 0 34
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 4
76354: NEG
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 0
76362: PUSH
76363: LD_INT 5
76365: NEG
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PUSH
76371: LD_INT 1
76373: PUSH
76374: LD_INT 4
76376: NEG
76377: PUSH
76378: EMPTY
76379: LIST
76380: LIST
76381: PUSH
76382: LD_INT 1
76384: PUSH
76385: LD_INT 3
76387: NEG
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 0
76395: PUSH
76396: LD_INT 3
76398: NEG
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 1
76406: NEG
76407: PUSH
76408: LD_INT 4
76410: NEG
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 1
76418: NEG
76419: PUSH
76420: LD_INT 5
76422: NEG
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 2
76430: PUSH
76431: LD_INT 3
76433: NEG
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 2
76441: NEG
76442: PUSH
76443: LD_INT 5
76445: NEG
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 3
76453: PUSH
76454: LD_INT 0
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 3
76463: PUSH
76464: LD_INT 1
76466: NEG
76467: PUSH
76468: EMPTY
76469: LIST
76470: LIST
76471: PUSH
76472: LD_INT 4
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 4
76484: PUSH
76485: LD_INT 1
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: LD_INT 1
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 2
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: LD_INT 2
76514: PUSH
76515: LD_INT 1
76517: NEG
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 2
76525: PUSH
76526: LD_INT 2
76528: NEG
76529: PUSH
76530: EMPTY
76531: LIST
76532: LIST
76533: PUSH
76534: LD_INT 4
76536: PUSH
76537: LD_INT 2
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: PUSH
76544: LD_INT 4
76546: PUSH
76547: LD_INT 4
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 4
76556: PUSH
76557: LD_INT 3
76559: PUSH
76560: EMPTY
76561: LIST
76562: LIST
76563: PUSH
76564: LD_INT 5
76566: PUSH
76567: LD_INT 4
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 5
76576: PUSH
76577: LD_INT 5
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: PUSH
76584: LD_INT 4
76586: PUSH
76587: LD_INT 5
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 3
76596: PUSH
76597: LD_INT 4
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: LD_INT 3
76606: PUSH
76607: LD_INT 3
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 5
76616: PUSH
76617: LD_INT 3
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 3
76626: PUSH
76627: LD_INT 5
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 0
76636: PUSH
76637: LD_INT 3
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: LD_INT 0
76646: PUSH
76647: LD_INT 2
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 1
76656: PUSH
76657: LD_INT 3
76659: PUSH
76660: EMPTY
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 1
76666: PUSH
76667: LD_INT 4
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 0
76676: PUSH
76677: LD_INT 4
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: LD_INT 1
76686: NEG
76687: PUSH
76688: LD_INT 3
76690: PUSH
76691: EMPTY
76692: LIST
76693: LIST
76694: PUSH
76695: LD_INT 1
76697: NEG
76698: PUSH
76699: LD_INT 2
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: PUSH
76706: LD_INT 2
76708: PUSH
76709: LD_INT 4
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 2
76718: NEG
76719: PUSH
76720: LD_INT 2
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: LD_INT 4
76729: NEG
76730: PUSH
76731: LD_INT 0
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 4
76740: NEG
76741: PUSH
76742: LD_INT 1
76744: NEG
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: PUSH
76750: LD_INT 3
76752: NEG
76753: PUSH
76754: LD_INT 0
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: LD_INT 3
76763: NEG
76764: PUSH
76765: LD_INT 1
76767: PUSH
76768: EMPTY
76769: LIST
76770: LIST
76771: PUSH
76772: LD_INT 4
76774: NEG
76775: PUSH
76776: LD_INT 1
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 5
76785: NEG
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 5
76796: NEG
76797: PUSH
76798: LD_INT 1
76800: NEG
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 5
76808: NEG
76809: PUSH
76810: LD_INT 2
76812: NEG
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 3
76820: NEG
76821: PUSH
76822: LD_INT 2
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: LIST
76833: LIST
76834: LIST
76835: LIST
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: ST_TO_ADDR
// end ; end ;
76876: GO 76879
76878: POP
// case btype of b_depot , b_warehouse :
76879: LD_VAR 0 1
76883: PUSH
76884: LD_INT 0
76886: DOUBLE
76887: EQUAL
76888: IFTRUE 76898
76890: LD_INT 1
76892: DOUBLE
76893: EQUAL
76894: IFTRUE 76898
76896: GO 77099
76898: POP
// case nation of nation_american :
76899: LD_VAR 0 5
76903: PUSH
76904: LD_INT 1
76906: DOUBLE
76907: EQUAL
76908: IFTRUE 76912
76910: GO 76968
76912: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
76913: LD_ADDR_VAR 0 9
76917: PUSH
76918: LD_VAR 0 11
76922: PUSH
76923: LD_VAR 0 12
76927: PUSH
76928: LD_VAR 0 13
76932: PUSH
76933: LD_VAR 0 14
76937: PUSH
76938: LD_VAR 0 15
76942: PUSH
76943: LD_VAR 0 16
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: PUSH
76956: LD_VAR 0 4
76960: PUSH
76961: LD_INT 1
76963: PLUS
76964: ARRAY
76965: ST_TO_ADDR
76966: GO 77097
76968: LD_INT 2
76970: DOUBLE
76971: EQUAL
76972: IFTRUE 76976
76974: GO 77032
76976: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
76977: LD_ADDR_VAR 0 9
76981: PUSH
76982: LD_VAR 0 17
76986: PUSH
76987: LD_VAR 0 18
76991: PUSH
76992: LD_VAR 0 19
76996: PUSH
76997: LD_VAR 0 20
77001: PUSH
77002: LD_VAR 0 21
77006: PUSH
77007: LD_VAR 0 22
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: PUSH
77020: LD_VAR 0 4
77024: PUSH
77025: LD_INT 1
77027: PLUS
77028: ARRAY
77029: ST_TO_ADDR
77030: GO 77097
77032: LD_INT 3
77034: DOUBLE
77035: EQUAL
77036: IFTRUE 77040
77038: GO 77096
77040: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77041: LD_ADDR_VAR 0 9
77045: PUSH
77046: LD_VAR 0 23
77050: PUSH
77051: LD_VAR 0 24
77055: PUSH
77056: LD_VAR 0 25
77060: PUSH
77061: LD_VAR 0 26
77065: PUSH
77066: LD_VAR 0 27
77070: PUSH
77071: LD_VAR 0 28
77075: PUSH
77076: EMPTY
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: PUSH
77084: LD_VAR 0 4
77088: PUSH
77089: LD_INT 1
77091: PLUS
77092: ARRAY
77093: ST_TO_ADDR
77094: GO 77097
77096: POP
77097: GO 77646
77099: LD_INT 2
77101: DOUBLE
77102: EQUAL
77103: IFTRUE 77113
77105: LD_INT 3
77107: DOUBLE
77108: EQUAL
77109: IFTRUE 77113
77111: GO 77169
77113: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77114: LD_ADDR_VAR 0 9
77118: PUSH
77119: LD_VAR 0 29
77123: PUSH
77124: LD_VAR 0 30
77128: PUSH
77129: LD_VAR 0 31
77133: PUSH
77134: LD_VAR 0 32
77138: PUSH
77139: LD_VAR 0 33
77143: PUSH
77144: LD_VAR 0 34
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: LIST
77155: LIST
77156: PUSH
77157: LD_VAR 0 4
77161: PUSH
77162: LD_INT 1
77164: PLUS
77165: ARRAY
77166: ST_TO_ADDR
77167: GO 77646
77169: LD_INT 16
77171: DOUBLE
77172: EQUAL
77173: IFTRUE 77225
77175: LD_INT 17
77177: DOUBLE
77178: EQUAL
77179: IFTRUE 77225
77181: LD_INT 18
77183: DOUBLE
77184: EQUAL
77185: IFTRUE 77225
77187: LD_INT 19
77189: DOUBLE
77190: EQUAL
77191: IFTRUE 77225
77193: LD_INT 20
77195: DOUBLE
77196: EQUAL
77197: IFTRUE 77225
77199: LD_INT 21
77201: DOUBLE
77202: EQUAL
77203: IFTRUE 77225
77205: LD_INT 23
77207: DOUBLE
77208: EQUAL
77209: IFTRUE 77225
77211: LD_INT 24
77213: DOUBLE
77214: EQUAL
77215: IFTRUE 77225
77217: LD_INT 25
77219: DOUBLE
77220: EQUAL
77221: IFTRUE 77225
77223: GO 77281
77225: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77226: LD_ADDR_VAR 0 9
77230: PUSH
77231: LD_VAR 0 35
77235: PUSH
77236: LD_VAR 0 36
77240: PUSH
77241: LD_VAR 0 37
77245: PUSH
77246: LD_VAR 0 38
77250: PUSH
77251: LD_VAR 0 39
77255: PUSH
77256: LD_VAR 0 40
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: PUSH
77269: LD_VAR 0 4
77273: PUSH
77274: LD_INT 1
77276: PLUS
77277: ARRAY
77278: ST_TO_ADDR
77279: GO 77646
77281: LD_INT 6
77283: DOUBLE
77284: EQUAL
77285: IFTRUE 77337
77287: LD_INT 7
77289: DOUBLE
77290: EQUAL
77291: IFTRUE 77337
77293: LD_INT 8
77295: DOUBLE
77296: EQUAL
77297: IFTRUE 77337
77299: LD_INT 13
77301: DOUBLE
77302: EQUAL
77303: IFTRUE 77337
77305: LD_INT 12
77307: DOUBLE
77308: EQUAL
77309: IFTRUE 77337
77311: LD_INT 15
77313: DOUBLE
77314: EQUAL
77315: IFTRUE 77337
77317: LD_INT 11
77319: DOUBLE
77320: EQUAL
77321: IFTRUE 77337
77323: LD_INT 14
77325: DOUBLE
77326: EQUAL
77327: IFTRUE 77337
77329: LD_INT 10
77331: DOUBLE
77332: EQUAL
77333: IFTRUE 77337
77335: GO 77393
77337: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
77338: LD_ADDR_VAR 0 9
77342: PUSH
77343: LD_VAR 0 41
77347: PUSH
77348: LD_VAR 0 42
77352: PUSH
77353: LD_VAR 0 43
77357: PUSH
77358: LD_VAR 0 44
77362: PUSH
77363: LD_VAR 0 45
77367: PUSH
77368: LD_VAR 0 46
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: PUSH
77381: LD_VAR 0 4
77385: PUSH
77386: LD_INT 1
77388: PLUS
77389: ARRAY
77390: ST_TO_ADDR
77391: GO 77646
77393: LD_INT 36
77395: DOUBLE
77396: EQUAL
77397: IFTRUE 77401
77399: GO 77457
77401: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77402: LD_ADDR_VAR 0 9
77406: PUSH
77407: LD_VAR 0 47
77411: PUSH
77412: LD_VAR 0 48
77416: PUSH
77417: LD_VAR 0 49
77421: PUSH
77422: LD_VAR 0 50
77426: PUSH
77427: LD_VAR 0 51
77431: PUSH
77432: LD_VAR 0 52
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: PUSH
77445: LD_VAR 0 4
77449: PUSH
77450: LD_INT 1
77452: PLUS
77453: ARRAY
77454: ST_TO_ADDR
77455: GO 77646
77457: LD_INT 4
77459: DOUBLE
77460: EQUAL
77461: IFTRUE 77483
77463: LD_INT 5
77465: DOUBLE
77466: EQUAL
77467: IFTRUE 77483
77469: LD_INT 34
77471: DOUBLE
77472: EQUAL
77473: IFTRUE 77483
77475: LD_INT 37
77477: DOUBLE
77478: EQUAL
77479: IFTRUE 77483
77481: GO 77539
77483: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77484: LD_ADDR_VAR 0 9
77488: PUSH
77489: LD_VAR 0 53
77493: PUSH
77494: LD_VAR 0 54
77498: PUSH
77499: LD_VAR 0 55
77503: PUSH
77504: LD_VAR 0 56
77508: PUSH
77509: LD_VAR 0 57
77513: PUSH
77514: LD_VAR 0 58
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: PUSH
77527: LD_VAR 0 4
77531: PUSH
77532: LD_INT 1
77534: PLUS
77535: ARRAY
77536: ST_TO_ADDR
77537: GO 77646
77539: LD_INT 31
77541: DOUBLE
77542: EQUAL
77543: IFTRUE 77589
77545: LD_INT 32
77547: DOUBLE
77548: EQUAL
77549: IFTRUE 77589
77551: LD_INT 33
77553: DOUBLE
77554: EQUAL
77555: IFTRUE 77589
77557: LD_INT 27
77559: DOUBLE
77560: EQUAL
77561: IFTRUE 77589
77563: LD_INT 26
77565: DOUBLE
77566: EQUAL
77567: IFTRUE 77589
77569: LD_INT 28
77571: DOUBLE
77572: EQUAL
77573: IFTRUE 77589
77575: LD_INT 29
77577: DOUBLE
77578: EQUAL
77579: IFTRUE 77589
77581: LD_INT 30
77583: DOUBLE
77584: EQUAL
77585: IFTRUE 77589
77587: GO 77645
77589: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
77590: LD_ADDR_VAR 0 9
77594: PUSH
77595: LD_VAR 0 59
77599: PUSH
77600: LD_VAR 0 60
77604: PUSH
77605: LD_VAR 0 61
77609: PUSH
77610: LD_VAR 0 62
77614: PUSH
77615: LD_VAR 0 63
77619: PUSH
77620: LD_VAR 0 64
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: PUSH
77633: LD_VAR 0 4
77637: PUSH
77638: LD_INT 1
77640: PLUS
77641: ARRAY
77642: ST_TO_ADDR
77643: GO 77646
77645: POP
// temp_list2 = [ ] ;
77646: LD_ADDR_VAR 0 10
77650: PUSH
77651: EMPTY
77652: ST_TO_ADDR
// for i in temp_list do
77653: LD_ADDR_VAR 0 8
77657: PUSH
77658: LD_VAR 0 9
77662: PUSH
77663: FOR_IN
77664: IFFALSE 77716
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77666: LD_ADDR_VAR 0 10
77670: PUSH
77671: LD_VAR 0 10
77675: PUSH
77676: LD_VAR 0 8
77680: PUSH
77681: LD_INT 1
77683: ARRAY
77684: PUSH
77685: LD_VAR 0 2
77689: PLUS
77690: PUSH
77691: LD_VAR 0 8
77695: PUSH
77696: LD_INT 2
77698: ARRAY
77699: PUSH
77700: LD_VAR 0 3
77704: PLUS
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PUSH
77710: EMPTY
77711: LIST
77712: ADD
77713: ST_TO_ADDR
77714: GO 77663
77716: POP
77717: POP
// result = temp_list2 ;
77718: LD_ADDR_VAR 0 7
77722: PUSH
77723: LD_VAR 0 10
77727: ST_TO_ADDR
// end ;
77728: LD_VAR 0 7
77732: RET
// export function EnemyInRange ( unit , dist ) ; begin
77733: LD_INT 0
77735: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77736: LD_ADDR_VAR 0 3
77740: PUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: CALL_OW 255
77750: PPUSH
77751: LD_VAR 0 1
77755: PPUSH
77756: CALL_OW 250
77760: PPUSH
77761: LD_VAR 0 1
77765: PPUSH
77766: CALL_OW 251
77770: PPUSH
77771: LD_VAR 0 2
77775: PPUSH
77776: CALL 51861 0 4
77780: PUSH
77781: LD_INT 4
77783: ARRAY
77784: ST_TO_ADDR
// end ;
77785: LD_VAR 0 3
77789: RET
// export function PlayerSeeMe ( unit ) ; begin
77790: LD_INT 0
77792: PPUSH
// result := See ( your_side , unit ) ;
77793: LD_ADDR_VAR 0 2
77797: PUSH
77798: LD_OWVAR 2
77802: PPUSH
77803: LD_VAR 0 1
77807: PPUSH
77808: CALL_OW 292
77812: ST_TO_ADDR
// end ;
77813: LD_VAR 0 2
77817: RET
// export function ReverseDir ( unit ) ; begin
77818: LD_INT 0
77820: PPUSH
// if not unit then
77821: LD_VAR 0 1
77825: NOT
77826: IFFALSE 77830
// exit ;
77828: GO 77876
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
77830: LD_ADDR_VAR 0 2
77834: PUSH
77835: LD_INT 3
77837: PUSH
77838: LD_INT 4
77840: PUSH
77841: LD_INT 5
77843: PUSH
77844: LD_INT 0
77846: PUSH
77847: LD_INT 1
77849: PUSH
77850: LD_INT 2
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: LIST
77857: LIST
77858: LIST
77859: LIST
77860: PUSH
77861: LD_VAR 0 1
77865: PPUSH
77866: CALL_OW 254
77870: PUSH
77871: LD_INT 1
77873: PLUS
77874: ARRAY
77875: ST_TO_ADDR
// end ;
77876: LD_VAR 0 2
77880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
77881: LD_INT 0
77883: PPUSH
77884: PPUSH
77885: PPUSH
77886: PPUSH
77887: PPUSH
// if not hexes then
77888: LD_VAR 0 2
77892: NOT
77893: IFFALSE 77897
// exit ;
77895: GO 78045
// dist := 9999 ;
77897: LD_ADDR_VAR 0 5
77901: PUSH
77902: LD_INT 9999
77904: ST_TO_ADDR
// for i = 1 to hexes do
77905: LD_ADDR_VAR 0 4
77909: PUSH
77910: DOUBLE
77911: LD_INT 1
77913: DEC
77914: ST_TO_ADDR
77915: LD_VAR 0 2
77919: PUSH
77920: FOR_TO
77921: IFFALSE 78033
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
77923: LD_VAR 0 1
77927: PPUSH
77928: LD_VAR 0 2
77932: PUSH
77933: LD_VAR 0 4
77937: ARRAY
77938: PUSH
77939: LD_INT 1
77941: ARRAY
77942: PPUSH
77943: LD_VAR 0 2
77947: PUSH
77948: LD_VAR 0 4
77952: ARRAY
77953: PUSH
77954: LD_INT 2
77956: ARRAY
77957: PPUSH
77958: CALL_OW 297
77962: PUSH
77963: LD_VAR 0 5
77967: LESS
77968: IFFALSE 78031
// begin hex := hexes [ i ] ;
77970: LD_ADDR_VAR 0 7
77974: PUSH
77975: LD_VAR 0 2
77979: PUSH
77980: LD_VAR 0 4
77984: ARRAY
77985: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
77986: LD_ADDR_VAR 0 5
77990: PUSH
77991: LD_VAR 0 1
77995: PPUSH
77996: LD_VAR 0 2
78000: PUSH
78001: LD_VAR 0 4
78005: ARRAY
78006: PUSH
78007: LD_INT 1
78009: ARRAY
78010: PPUSH
78011: LD_VAR 0 2
78015: PUSH
78016: LD_VAR 0 4
78020: ARRAY
78021: PUSH
78022: LD_INT 2
78024: ARRAY
78025: PPUSH
78026: CALL_OW 297
78030: ST_TO_ADDR
// end ; end ;
78031: GO 77920
78033: POP
78034: POP
// result := hex ;
78035: LD_ADDR_VAR 0 3
78039: PUSH
78040: LD_VAR 0 7
78044: ST_TO_ADDR
// end ;
78045: LD_VAR 0 3
78049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78050: LD_INT 0
78052: PPUSH
78053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78054: LD_VAR 0 1
78058: NOT
78059: PUSH
78060: LD_VAR 0 1
78064: PUSH
78065: LD_INT 21
78067: PUSH
78068: LD_INT 2
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 23
78077: PUSH
78078: LD_INT 2
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PPUSH
78089: CALL_OW 69
78093: IN
78094: NOT
78095: OR
78096: IFFALSE 78100
// exit ;
78098: GO 78147
// for i = 1 to 3 do
78100: LD_ADDR_VAR 0 3
78104: PUSH
78105: DOUBLE
78106: LD_INT 1
78108: DEC
78109: ST_TO_ADDR
78110: LD_INT 3
78112: PUSH
78113: FOR_TO
78114: IFFALSE 78145
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78116: LD_VAR 0 1
78120: PPUSH
78121: CALL_OW 250
78125: PPUSH
78126: LD_VAR 0 1
78130: PPUSH
78131: CALL_OW 251
78135: PPUSH
78136: LD_INT 1
78138: PPUSH
78139: CALL_OW 453
78143: GO 78113
78145: POP
78146: POP
// end ;
78147: LD_VAR 0 2
78151: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78152: LD_INT 0
78154: PPUSH
78155: PPUSH
78156: PPUSH
78157: PPUSH
78158: PPUSH
78159: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
78160: LD_VAR 0 1
78164: NOT
78165: PUSH
78166: LD_VAR 0 2
78170: NOT
78171: OR
78172: PUSH
78173: LD_VAR 0 1
78177: PPUSH
78178: CALL_OW 314
78182: OR
78183: IFFALSE 78187
// exit ;
78185: GO 78628
// x := GetX ( enemy_unit ) ;
78187: LD_ADDR_VAR 0 7
78191: PUSH
78192: LD_VAR 0 2
78196: PPUSH
78197: CALL_OW 250
78201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78202: LD_ADDR_VAR 0 8
78206: PUSH
78207: LD_VAR 0 2
78211: PPUSH
78212: CALL_OW 251
78216: ST_TO_ADDR
// if not x or not y then
78217: LD_VAR 0 7
78221: NOT
78222: PUSH
78223: LD_VAR 0 8
78227: NOT
78228: OR
78229: IFFALSE 78233
// exit ;
78231: GO 78628
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78233: LD_ADDR_VAR 0 6
78237: PUSH
78238: LD_VAR 0 7
78242: PPUSH
78243: LD_INT 0
78245: PPUSH
78246: LD_INT 4
78248: PPUSH
78249: CALL_OW 272
78253: PUSH
78254: LD_VAR 0 8
78258: PPUSH
78259: LD_INT 0
78261: PPUSH
78262: LD_INT 4
78264: PPUSH
78265: CALL_OW 273
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PUSH
78274: LD_VAR 0 7
78278: PPUSH
78279: LD_INT 1
78281: PPUSH
78282: LD_INT 4
78284: PPUSH
78285: CALL_OW 272
78289: PUSH
78290: LD_VAR 0 8
78294: PPUSH
78295: LD_INT 1
78297: PPUSH
78298: LD_INT 4
78300: PPUSH
78301: CALL_OW 273
78305: PUSH
78306: EMPTY
78307: LIST
78308: LIST
78309: PUSH
78310: LD_VAR 0 7
78314: PPUSH
78315: LD_INT 2
78317: PPUSH
78318: LD_INT 4
78320: PPUSH
78321: CALL_OW 272
78325: PUSH
78326: LD_VAR 0 8
78330: PPUSH
78331: LD_INT 2
78333: PPUSH
78334: LD_INT 4
78336: PPUSH
78337: CALL_OW 273
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_VAR 0 7
78350: PPUSH
78351: LD_INT 3
78353: PPUSH
78354: LD_INT 4
78356: PPUSH
78357: CALL_OW 272
78361: PUSH
78362: LD_VAR 0 8
78366: PPUSH
78367: LD_INT 3
78369: PPUSH
78370: LD_INT 4
78372: PPUSH
78373: CALL_OW 273
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_VAR 0 7
78386: PPUSH
78387: LD_INT 4
78389: PPUSH
78390: LD_INT 4
78392: PPUSH
78393: CALL_OW 272
78397: PUSH
78398: LD_VAR 0 8
78402: PPUSH
78403: LD_INT 4
78405: PPUSH
78406: LD_INT 4
78408: PPUSH
78409: CALL_OW 273
78413: PUSH
78414: EMPTY
78415: LIST
78416: LIST
78417: PUSH
78418: LD_VAR 0 7
78422: PPUSH
78423: LD_INT 5
78425: PPUSH
78426: LD_INT 4
78428: PPUSH
78429: CALL_OW 272
78433: PUSH
78434: LD_VAR 0 8
78438: PPUSH
78439: LD_INT 5
78441: PPUSH
78442: LD_INT 4
78444: PPUSH
78445: CALL_OW 273
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: LIST
78461: ST_TO_ADDR
// for i = tmp downto 1 do
78462: LD_ADDR_VAR 0 4
78466: PUSH
78467: DOUBLE
78468: LD_VAR 0 6
78472: INC
78473: ST_TO_ADDR
78474: LD_INT 1
78476: PUSH
78477: FOR_DOWNTO
78478: IFFALSE 78579
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78480: LD_VAR 0 6
78484: PUSH
78485: LD_VAR 0 4
78489: ARRAY
78490: PUSH
78491: LD_INT 1
78493: ARRAY
78494: PPUSH
78495: LD_VAR 0 6
78499: PUSH
78500: LD_VAR 0 4
78504: ARRAY
78505: PUSH
78506: LD_INT 2
78508: ARRAY
78509: PPUSH
78510: CALL_OW 488
78514: NOT
78515: PUSH
78516: LD_VAR 0 6
78520: PUSH
78521: LD_VAR 0 4
78525: ARRAY
78526: PUSH
78527: LD_INT 1
78529: ARRAY
78530: PPUSH
78531: LD_VAR 0 6
78535: PUSH
78536: LD_VAR 0 4
78540: ARRAY
78541: PUSH
78542: LD_INT 2
78544: ARRAY
78545: PPUSH
78546: CALL_OW 428
78550: PUSH
78551: LD_INT 0
78553: NONEQUAL
78554: OR
78555: IFFALSE 78577
// tmp := Delete ( tmp , i ) ;
78557: LD_ADDR_VAR 0 6
78561: PUSH
78562: LD_VAR 0 6
78566: PPUSH
78567: LD_VAR 0 4
78571: PPUSH
78572: CALL_OW 3
78576: ST_TO_ADDR
78577: GO 78477
78579: POP
78580: POP
// j := GetClosestHex ( unit , tmp ) ;
78581: LD_ADDR_VAR 0 5
78585: PUSH
78586: LD_VAR 0 1
78590: PPUSH
78591: LD_VAR 0 6
78595: PPUSH
78596: CALL 77881 0 2
78600: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78601: LD_VAR 0 1
78605: PPUSH
78606: LD_VAR 0 5
78610: PUSH
78611: LD_INT 1
78613: ARRAY
78614: PPUSH
78615: LD_VAR 0 5
78619: PUSH
78620: LD_INT 2
78622: ARRAY
78623: PPUSH
78624: CALL_OW 111
// end ;
78628: LD_VAR 0 3
78632: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78633: LD_INT 0
78635: PPUSH
78636: PPUSH
78637: PPUSH
// uc_side = 0 ;
78638: LD_ADDR_OWVAR 20
78642: PUSH
78643: LD_INT 0
78645: ST_TO_ADDR
// uc_nation = 0 ;
78646: LD_ADDR_OWVAR 21
78650: PUSH
78651: LD_INT 0
78653: ST_TO_ADDR
// InitHc ;
78654: CALL_OW 19
// InitVc ;
78658: CALL_OW 20
// if mastodonts then
78662: LD_VAR 0 6
78666: IFFALSE 78733
// for i = 1 to mastodonts do
78668: LD_ADDR_VAR 0 11
78672: PUSH
78673: DOUBLE
78674: LD_INT 1
78676: DEC
78677: ST_TO_ADDR
78678: LD_VAR 0 6
78682: PUSH
78683: FOR_TO
78684: IFFALSE 78731
// begin vc_chassis := 31 ;
78686: LD_ADDR_OWVAR 37
78690: PUSH
78691: LD_INT 31
78693: ST_TO_ADDR
// vc_control := control_rider ;
78694: LD_ADDR_OWVAR 38
78698: PUSH
78699: LD_INT 4
78701: ST_TO_ADDR
// animal := CreateVehicle ;
78702: LD_ADDR_VAR 0 12
78706: PUSH
78707: CALL_OW 45
78711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78712: LD_VAR 0 12
78716: PPUSH
78717: LD_VAR 0 8
78721: PPUSH
78722: LD_INT 0
78724: PPUSH
78725: CALL 85439 0 3
// end ;
78729: GO 78683
78731: POP
78732: POP
// if horses then
78733: LD_VAR 0 5
78737: IFFALSE 78804
// for i = 1 to horses do
78739: LD_ADDR_VAR 0 11
78743: PUSH
78744: DOUBLE
78745: LD_INT 1
78747: DEC
78748: ST_TO_ADDR
78749: LD_VAR 0 5
78753: PUSH
78754: FOR_TO
78755: IFFALSE 78802
// begin hc_class := 21 ;
78757: LD_ADDR_OWVAR 28
78761: PUSH
78762: LD_INT 21
78764: ST_TO_ADDR
// hc_gallery :=  ;
78765: LD_ADDR_OWVAR 33
78769: PUSH
78770: LD_STRING 
78772: ST_TO_ADDR
// animal := CreateHuman ;
78773: LD_ADDR_VAR 0 12
78777: PUSH
78778: CALL_OW 44
78782: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78783: LD_VAR 0 12
78787: PPUSH
78788: LD_VAR 0 8
78792: PPUSH
78793: LD_INT 0
78795: PPUSH
78796: CALL 85439 0 3
// end ;
78800: GO 78754
78802: POP
78803: POP
// if birds then
78804: LD_VAR 0 1
78808: IFFALSE 78875
// for i = 1 to birds do
78810: LD_ADDR_VAR 0 11
78814: PUSH
78815: DOUBLE
78816: LD_INT 1
78818: DEC
78819: ST_TO_ADDR
78820: LD_VAR 0 1
78824: PUSH
78825: FOR_TO
78826: IFFALSE 78873
// begin hc_class = 18 ;
78828: LD_ADDR_OWVAR 28
78832: PUSH
78833: LD_INT 18
78835: ST_TO_ADDR
// hc_gallery =  ;
78836: LD_ADDR_OWVAR 33
78840: PUSH
78841: LD_STRING 
78843: ST_TO_ADDR
// animal := CreateHuman ;
78844: LD_ADDR_VAR 0 12
78848: PUSH
78849: CALL_OW 44
78853: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78854: LD_VAR 0 12
78858: PPUSH
78859: LD_VAR 0 8
78863: PPUSH
78864: LD_INT 0
78866: PPUSH
78867: CALL 85439 0 3
// end ;
78871: GO 78825
78873: POP
78874: POP
// if tigers then
78875: LD_VAR 0 2
78879: IFFALSE 78963
// for i = 1 to tigers do
78881: LD_ADDR_VAR 0 11
78885: PUSH
78886: DOUBLE
78887: LD_INT 1
78889: DEC
78890: ST_TO_ADDR
78891: LD_VAR 0 2
78895: PUSH
78896: FOR_TO
78897: IFFALSE 78961
// begin hc_class = class_tiger ;
78899: LD_ADDR_OWVAR 28
78903: PUSH
78904: LD_INT 14
78906: ST_TO_ADDR
// hc_gallery =  ;
78907: LD_ADDR_OWVAR 33
78911: PUSH
78912: LD_STRING 
78914: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78915: LD_ADDR_OWVAR 35
78919: PUSH
78920: LD_INT 7
78922: NEG
78923: PPUSH
78924: LD_INT 7
78926: PPUSH
78927: CALL_OW 12
78931: ST_TO_ADDR
// animal := CreateHuman ;
78932: LD_ADDR_VAR 0 12
78936: PUSH
78937: CALL_OW 44
78941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78942: LD_VAR 0 12
78946: PPUSH
78947: LD_VAR 0 8
78951: PPUSH
78952: LD_INT 0
78954: PPUSH
78955: CALL 85439 0 3
// end ;
78959: GO 78896
78961: POP
78962: POP
// if apemans then
78963: LD_VAR 0 3
78967: IFFALSE 79090
// for i = 1 to apemans do
78969: LD_ADDR_VAR 0 11
78973: PUSH
78974: DOUBLE
78975: LD_INT 1
78977: DEC
78978: ST_TO_ADDR
78979: LD_VAR 0 3
78983: PUSH
78984: FOR_TO
78985: IFFALSE 79088
// begin hc_class = class_apeman ;
78987: LD_ADDR_OWVAR 28
78991: PUSH
78992: LD_INT 12
78994: ST_TO_ADDR
// hc_gallery =  ;
78995: LD_ADDR_OWVAR 33
78999: PUSH
79000: LD_STRING 
79002: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79003: LD_ADDR_OWVAR 35
79007: PUSH
79008: LD_INT 5
79010: NEG
79011: PPUSH
79012: LD_INT 5
79014: PPUSH
79015: CALL_OW 12
79019: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79020: LD_ADDR_OWVAR 31
79024: PUSH
79025: LD_INT 1
79027: PPUSH
79028: LD_INT 3
79030: PPUSH
79031: CALL_OW 12
79035: PUSH
79036: LD_INT 1
79038: PPUSH
79039: LD_INT 3
79041: PPUSH
79042: CALL_OW 12
79046: PUSH
79047: LD_INT 0
79049: PUSH
79050: LD_INT 0
79052: PUSH
79053: EMPTY
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: ST_TO_ADDR
// animal := CreateHuman ;
79059: LD_ADDR_VAR 0 12
79063: PUSH
79064: CALL_OW 44
79068: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79069: LD_VAR 0 12
79073: PPUSH
79074: LD_VAR 0 8
79078: PPUSH
79079: LD_INT 0
79081: PPUSH
79082: CALL 85439 0 3
// end ;
79086: GO 78984
79088: POP
79089: POP
// if enchidnas then
79090: LD_VAR 0 4
79094: IFFALSE 79161
// for i = 1 to enchidnas do
79096: LD_ADDR_VAR 0 11
79100: PUSH
79101: DOUBLE
79102: LD_INT 1
79104: DEC
79105: ST_TO_ADDR
79106: LD_VAR 0 4
79110: PUSH
79111: FOR_TO
79112: IFFALSE 79159
// begin hc_class = 13 ;
79114: LD_ADDR_OWVAR 28
79118: PUSH
79119: LD_INT 13
79121: ST_TO_ADDR
// hc_gallery =  ;
79122: LD_ADDR_OWVAR 33
79126: PUSH
79127: LD_STRING 
79129: ST_TO_ADDR
// animal := CreateHuman ;
79130: LD_ADDR_VAR 0 12
79134: PUSH
79135: CALL_OW 44
79139: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79140: LD_VAR 0 12
79144: PPUSH
79145: LD_VAR 0 8
79149: PPUSH
79150: LD_INT 0
79152: PPUSH
79153: CALL 85439 0 3
// end ;
79157: GO 79111
79159: POP
79160: POP
// if fishes then
79161: LD_VAR 0 7
79165: IFFALSE 79232
// for i = 1 to fishes do
79167: LD_ADDR_VAR 0 11
79171: PUSH
79172: DOUBLE
79173: LD_INT 1
79175: DEC
79176: ST_TO_ADDR
79177: LD_VAR 0 7
79181: PUSH
79182: FOR_TO
79183: IFFALSE 79230
// begin hc_class = 20 ;
79185: LD_ADDR_OWVAR 28
79189: PUSH
79190: LD_INT 20
79192: ST_TO_ADDR
// hc_gallery =  ;
79193: LD_ADDR_OWVAR 33
79197: PUSH
79198: LD_STRING 
79200: ST_TO_ADDR
// animal := CreateHuman ;
79201: LD_ADDR_VAR 0 12
79205: PUSH
79206: CALL_OW 44
79210: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
79211: LD_VAR 0 12
79215: PPUSH
79216: LD_VAR 0 9
79220: PPUSH
79221: LD_INT 0
79223: PPUSH
79224: CALL 85439 0 3
// end ;
79228: GO 79182
79230: POP
79231: POP
// end ;
79232: LD_VAR 0 10
79236: RET
// export function WantHeal ( sci , unit ) ; begin
79237: LD_INT 0
79239: PPUSH
// if GetTaskList ( sci ) > 0 then
79240: LD_VAR 0 1
79244: PPUSH
79245: CALL_OW 437
79249: PUSH
79250: LD_INT 0
79252: GREATER
79253: IFFALSE 79323
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79255: LD_VAR 0 1
79259: PPUSH
79260: CALL_OW 437
79264: PUSH
79265: LD_INT 1
79267: ARRAY
79268: PUSH
79269: LD_INT 1
79271: ARRAY
79272: PUSH
79273: LD_STRING l
79275: EQUAL
79276: PUSH
79277: LD_VAR 0 1
79281: PPUSH
79282: CALL_OW 437
79286: PUSH
79287: LD_INT 1
79289: ARRAY
79290: PUSH
79291: LD_INT 4
79293: ARRAY
79294: PUSH
79295: LD_VAR 0 2
79299: EQUAL
79300: AND
79301: IFFALSE 79313
// result := true else
79303: LD_ADDR_VAR 0 3
79307: PUSH
79308: LD_INT 1
79310: ST_TO_ADDR
79311: GO 79321
// result := false ;
79313: LD_ADDR_VAR 0 3
79317: PUSH
79318: LD_INT 0
79320: ST_TO_ADDR
// end else
79321: GO 79331
// result := false ;
79323: LD_ADDR_VAR 0 3
79327: PUSH
79328: LD_INT 0
79330: ST_TO_ADDR
// end ;
79331: LD_VAR 0 3
79335: RET
// export function HealTarget ( sci ) ; begin
79336: LD_INT 0
79338: PPUSH
// if not sci then
79339: LD_VAR 0 1
79343: NOT
79344: IFFALSE 79348
// exit ;
79346: GO 79413
// result := 0 ;
79348: LD_ADDR_VAR 0 2
79352: PUSH
79353: LD_INT 0
79355: ST_TO_ADDR
// if GetTaskList ( sci ) then
79356: LD_VAR 0 1
79360: PPUSH
79361: CALL_OW 437
79365: IFFALSE 79413
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79367: LD_VAR 0 1
79371: PPUSH
79372: CALL_OW 437
79376: PUSH
79377: LD_INT 1
79379: ARRAY
79380: PUSH
79381: LD_INT 1
79383: ARRAY
79384: PUSH
79385: LD_STRING l
79387: EQUAL
79388: IFFALSE 79413
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79390: LD_ADDR_VAR 0 2
79394: PUSH
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 437
79404: PUSH
79405: LD_INT 1
79407: ARRAY
79408: PUSH
79409: LD_INT 4
79411: ARRAY
79412: ST_TO_ADDR
// end ;
79413: LD_VAR 0 2
79417: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
79418: LD_INT 0
79420: PPUSH
79421: PPUSH
79422: PPUSH
79423: PPUSH
79424: PPUSH
79425: PPUSH
79426: PPUSH
79427: PPUSH
79428: PPUSH
79429: PPUSH
79430: PPUSH
79431: PPUSH
79432: PPUSH
79433: PPUSH
79434: PPUSH
79435: PPUSH
79436: PPUSH
79437: PPUSH
79438: PPUSH
79439: PPUSH
79440: PPUSH
79441: PPUSH
79442: PPUSH
79443: PPUSH
79444: PPUSH
79445: PPUSH
79446: PPUSH
79447: PPUSH
79448: PPUSH
79449: PPUSH
79450: PPUSH
79451: PPUSH
79452: PPUSH
// if not list then
79453: LD_VAR 0 1
79457: NOT
79458: IFFALSE 79462
// exit ;
79460: GO 84050
// base := list [ 1 ] ;
79462: LD_ADDR_VAR 0 3
79466: PUSH
79467: LD_VAR 0 1
79471: PUSH
79472: LD_INT 1
79474: ARRAY
79475: ST_TO_ADDR
// group := list [ 2 ] ;
79476: LD_ADDR_VAR 0 4
79480: PUSH
79481: LD_VAR 0 1
79485: PUSH
79486: LD_INT 2
79488: ARRAY
79489: ST_TO_ADDR
// path := list [ 3 ] ;
79490: LD_ADDR_VAR 0 5
79494: PUSH
79495: LD_VAR 0 1
79499: PUSH
79500: LD_INT 3
79502: ARRAY
79503: ST_TO_ADDR
// flags := list [ 4 ] ;
79504: LD_ADDR_VAR 0 6
79508: PUSH
79509: LD_VAR 0 1
79513: PUSH
79514: LD_INT 4
79516: ARRAY
79517: ST_TO_ADDR
// mined := [ ] ;
79518: LD_ADDR_VAR 0 27
79522: PUSH
79523: EMPTY
79524: ST_TO_ADDR
// bombed := [ ] ;
79525: LD_ADDR_VAR 0 28
79529: PUSH
79530: EMPTY
79531: ST_TO_ADDR
// healers := [ ] ;
79532: LD_ADDR_VAR 0 31
79536: PUSH
79537: EMPTY
79538: ST_TO_ADDR
// to_heal := [ ] ;
79539: LD_ADDR_VAR 0 30
79543: PUSH
79544: EMPTY
79545: ST_TO_ADDR
// repairs := [ ] ;
79546: LD_ADDR_VAR 0 33
79550: PUSH
79551: EMPTY
79552: ST_TO_ADDR
// to_repair := [ ] ;
79553: LD_ADDR_VAR 0 32
79557: PUSH
79558: EMPTY
79559: ST_TO_ADDR
// if not group or not path then
79560: LD_VAR 0 4
79564: NOT
79565: PUSH
79566: LD_VAR 0 5
79570: NOT
79571: OR
79572: IFFALSE 79576
// exit ;
79574: GO 84050
// if flags then
79576: LD_VAR 0 6
79580: IFFALSE 79724
// begin f_ignore_area := flags [ 1 ] ;
79582: LD_ADDR_VAR 0 17
79586: PUSH
79587: LD_VAR 0 6
79591: PUSH
79592: LD_INT 1
79594: ARRAY
79595: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
79596: LD_ADDR_VAR 0 18
79600: PUSH
79601: LD_VAR 0 6
79605: PUSH
79606: LD_INT 2
79608: ARRAY
79609: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
79610: LD_ADDR_VAR 0 19
79614: PUSH
79615: LD_VAR 0 6
79619: PUSH
79620: LD_INT 3
79622: ARRAY
79623: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
79624: LD_ADDR_VAR 0 20
79628: PUSH
79629: LD_VAR 0 6
79633: PUSH
79634: LD_INT 4
79636: ARRAY
79637: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
79638: LD_ADDR_VAR 0 21
79642: PUSH
79643: LD_VAR 0 6
79647: PUSH
79648: LD_INT 5
79650: ARRAY
79651: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
79652: LD_ADDR_VAR 0 22
79656: PUSH
79657: LD_VAR 0 6
79661: PUSH
79662: LD_INT 6
79664: ARRAY
79665: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
79666: LD_ADDR_VAR 0 23
79670: PUSH
79671: LD_VAR 0 6
79675: PUSH
79676: LD_INT 7
79678: ARRAY
79679: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
79680: LD_ADDR_VAR 0 24
79684: PUSH
79685: LD_VAR 0 6
79689: PUSH
79690: LD_INT 8
79692: ARRAY
79693: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
79694: LD_ADDR_VAR 0 25
79698: PUSH
79699: LD_VAR 0 6
79703: PUSH
79704: LD_INT 9
79706: ARRAY
79707: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
79708: LD_ADDR_VAR 0 26
79712: PUSH
79713: LD_VAR 0 6
79717: PUSH
79718: LD_INT 10
79720: ARRAY
79721: ST_TO_ADDR
// end else
79722: GO 79804
// begin f_ignore_area := false ;
79724: LD_ADDR_VAR 0 17
79728: PUSH
79729: LD_INT 0
79731: ST_TO_ADDR
// f_capture := false ;
79732: LD_ADDR_VAR 0 18
79736: PUSH
79737: LD_INT 0
79739: ST_TO_ADDR
// f_ignore_civ := false ;
79740: LD_ADDR_VAR 0 19
79744: PUSH
79745: LD_INT 0
79747: ST_TO_ADDR
// f_murder := false ;
79748: LD_ADDR_VAR 0 20
79752: PUSH
79753: LD_INT 0
79755: ST_TO_ADDR
// f_mines := false ;
79756: LD_ADDR_VAR 0 21
79760: PUSH
79761: LD_INT 0
79763: ST_TO_ADDR
// f_repair := false ;
79764: LD_ADDR_VAR 0 22
79768: PUSH
79769: LD_INT 0
79771: ST_TO_ADDR
// f_heal := false ;
79772: LD_ADDR_VAR 0 23
79776: PUSH
79777: LD_INT 0
79779: ST_TO_ADDR
// f_spacetime := false ;
79780: LD_ADDR_VAR 0 24
79784: PUSH
79785: LD_INT 0
79787: ST_TO_ADDR
// f_attack_depot := false ;
79788: LD_ADDR_VAR 0 25
79792: PUSH
79793: LD_INT 0
79795: ST_TO_ADDR
// f_crawl := false ;
79796: LD_ADDR_VAR 0 26
79800: PUSH
79801: LD_INT 0
79803: ST_TO_ADDR
// end ; if f_heal then
79804: LD_VAR 0 23
79808: IFFALSE 79835
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
79810: LD_ADDR_VAR 0 31
79814: PUSH
79815: LD_VAR 0 4
79819: PPUSH
79820: LD_INT 25
79822: PUSH
79823: LD_INT 4
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PPUSH
79830: CALL_OW 72
79834: ST_TO_ADDR
// if f_repair then
79835: LD_VAR 0 22
79839: IFFALSE 79866
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
79841: LD_ADDR_VAR 0 33
79845: PUSH
79846: LD_VAR 0 4
79850: PPUSH
79851: LD_INT 25
79853: PUSH
79854: LD_INT 3
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: PPUSH
79861: CALL_OW 72
79865: ST_TO_ADDR
// units_path := [ ] ;
79866: LD_ADDR_VAR 0 16
79870: PUSH
79871: EMPTY
79872: ST_TO_ADDR
// for i = 1 to group do
79873: LD_ADDR_VAR 0 7
79877: PUSH
79878: DOUBLE
79879: LD_INT 1
79881: DEC
79882: ST_TO_ADDR
79883: LD_VAR 0 4
79887: PUSH
79888: FOR_TO
79889: IFFALSE 79918
// units_path := Replace ( units_path , i , path ) ;
79891: LD_ADDR_VAR 0 16
79895: PUSH
79896: LD_VAR 0 16
79900: PPUSH
79901: LD_VAR 0 7
79905: PPUSH
79906: LD_VAR 0 5
79910: PPUSH
79911: CALL_OW 1
79915: ST_TO_ADDR
79916: GO 79888
79918: POP
79919: POP
// repeat for i = group downto 1 do
79920: LD_ADDR_VAR 0 7
79924: PUSH
79925: DOUBLE
79926: LD_VAR 0 4
79930: INC
79931: ST_TO_ADDR
79932: LD_INT 1
79934: PUSH
79935: FOR_DOWNTO
79936: IFFALSE 84032
// begin wait ( 5 ) ;
79938: LD_INT 5
79940: PPUSH
79941: CALL_OW 67
// tmp := [ ] ;
79945: LD_ADDR_VAR 0 14
79949: PUSH
79950: EMPTY
79951: ST_TO_ADDR
// attacking := false ;
79952: LD_ADDR_VAR 0 29
79956: PUSH
79957: LD_INT 0
79959: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
79960: LD_VAR 0 4
79964: PUSH
79965: LD_VAR 0 7
79969: ARRAY
79970: PPUSH
79971: CALL_OW 301
79975: PUSH
79976: LD_VAR 0 4
79980: PUSH
79981: LD_VAR 0 7
79985: ARRAY
79986: NOT
79987: OR
79988: IFFALSE 80097
// begin if GetType ( group [ i ] ) = unit_human then
79990: LD_VAR 0 4
79994: PUSH
79995: LD_VAR 0 7
79999: ARRAY
80000: PPUSH
80001: CALL_OW 247
80005: PUSH
80006: LD_INT 1
80008: EQUAL
80009: IFFALSE 80055
// begin to_heal := to_heal diff group [ i ] ;
80011: LD_ADDR_VAR 0 30
80015: PUSH
80016: LD_VAR 0 30
80020: PUSH
80021: LD_VAR 0 4
80025: PUSH
80026: LD_VAR 0 7
80030: ARRAY
80031: DIFF
80032: ST_TO_ADDR
// healers := healers diff group [ i ] ;
80033: LD_ADDR_VAR 0 31
80037: PUSH
80038: LD_VAR 0 31
80042: PUSH
80043: LD_VAR 0 4
80047: PUSH
80048: LD_VAR 0 7
80052: ARRAY
80053: DIFF
80054: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
80055: LD_ADDR_VAR 0 4
80059: PUSH
80060: LD_VAR 0 4
80064: PPUSH
80065: LD_VAR 0 7
80069: PPUSH
80070: CALL_OW 3
80074: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
80075: LD_ADDR_VAR 0 16
80079: PUSH
80080: LD_VAR 0 16
80084: PPUSH
80085: LD_VAR 0 7
80089: PPUSH
80090: CALL_OW 3
80094: ST_TO_ADDR
// continue ;
80095: GO 79935
// end ; if f_repair then
80097: LD_VAR 0 22
80101: IFFALSE 80590
// begin if GetType ( group [ i ] ) = unit_vehicle then
80103: LD_VAR 0 4
80107: PUSH
80108: LD_VAR 0 7
80112: ARRAY
80113: PPUSH
80114: CALL_OW 247
80118: PUSH
80119: LD_INT 2
80121: EQUAL
80122: IFFALSE 80312
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
80124: LD_VAR 0 4
80128: PUSH
80129: LD_VAR 0 7
80133: ARRAY
80134: PPUSH
80135: CALL_OW 256
80139: PUSH
80140: LD_INT 700
80142: LESS
80143: PUSH
80144: LD_VAR 0 4
80148: PUSH
80149: LD_VAR 0 7
80153: ARRAY
80154: PUSH
80155: LD_VAR 0 32
80159: IN
80160: NOT
80161: AND
80162: IFFALSE 80186
// to_repair := to_repair union group [ i ] ;
80164: LD_ADDR_VAR 0 32
80168: PUSH
80169: LD_VAR 0 32
80173: PUSH
80174: LD_VAR 0 4
80178: PUSH
80179: LD_VAR 0 7
80183: ARRAY
80184: UNION
80185: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
80186: LD_VAR 0 4
80190: PUSH
80191: LD_VAR 0 7
80195: ARRAY
80196: PPUSH
80197: CALL_OW 256
80201: PUSH
80202: LD_INT 1000
80204: EQUAL
80205: PUSH
80206: LD_VAR 0 4
80210: PUSH
80211: LD_VAR 0 7
80215: ARRAY
80216: PUSH
80217: LD_VAR 0 32
80221: IN
80222: AND
80223: IFFALSE 80247
// to_repair := to_repair diff group [ i ] ;
80225: LD_ADDR_VAR 0 32
80229: PUSH
80230: LD_VAR 0 32
80234: PUSH
80235: LD_VAR 0 4
80239: PUSH
80240: LD_VAR 0 7
80244: ARRAY
80245: DIFF
80246: ST_TO_ADDR
// if group [ i ] in to_repair then
80247: LD_VAR 0 4
80251: PUSH
80252: LD_VAR 0 7
80256: ARRAY
80257: PUSH
80258: LD_VAR 0 32
80262: IN
80263: IFFALSE 80310
// begin if not IsInArea ( group [ i ] , f_repair ) then
80265: LD_VAR 0 4
80269: PUSH
80270: LD_VAR 0 7
80274: ARRAY
80275: PPUSH
80276: LD_VAR 0 22
80280: PPUSH
80281: CALL_OW 308
80285: NOT
80286: IFFALSE 80308
// ComMoveToArea ( group [ i ] , f_repair ) ;
80288: LD_VAR 0 4
80292: PUSH
80293: LD_VAR 0 7
80297: ARRAY
80298: PPUSH
80299: LD_VAR 0 22
80303: PPUSH
80304: CALL_OW 113
// continue ;
80308: GO 79935
// end ; end else
80310: GO 80590
// if group [ i ] in repairs then
80312: LD_VAR 0 4
80316: PUSH
80317: LD_VAR 0 7
80321: ARRAY
80322: PUSH
80323: LD_VAR 0 33
80327: IN
80328: IFFALSE 80590
// begin if IsInUnit ( group [ i ] ) then
80330: LD_VAR 0 4
80334: PUSH
80335: LD_VAR 0 7
80339: ARRAY
80340: PPUSH
80341: CALL_OW 310
80345: IFFALSE 80413
// begin z := IsInUnit ( group [ i ] ) ;
80347: LD_ADDR_VAR 0 13
80351: PUSH
80352: LD_VAR 0 4
80356: PUSH
80357: LD_VAR 0 7
80361: ARRAY
80362: PPUSH
80363: CALL_OW 310
80367: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
80368: LD_VAR 0 13
80372: PUSH
80373: LD_VAR 0 32
80377: IN
80378: PUSH
80379: LD_VAR 0 13
80383: PPUSH
80384: LD_VAR 0 22
80388: PPUSH
80389: CALL_OW 308
80393: AND
80394: IFFALSE 80411
// ComExitVehicle ( group [ i ] ) ;
80396: LD_VAR 0 4
80400: PUSH
80401: LD_VAR 0 7
80405: ARRAY
80406: PPUSH
80407: CALL_OW 121
// end else
80411: GO 80590
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
80413: LD_ADDR_VAR 0 13
80417: PUSH
80418: LD_VAR 0 4
80422: PPUSH
80423: LD_INT 95
80425: PUSH
80426: LD_VAR 0 22
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: LD_INT 58
80437: PUSH
80438: EMPTY
80439: LIST
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PPUSH
80445: CALL_OW 72
80449: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
80450: LD_VAR 0 4
80454: PUSH
80455: LD_VAR 0 7
80459: ARRAY
80460: PPUSH
80461: CALL_OW 314
80465: NOT
80466: IFFALSE 80588
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
80468: LD_ADDR_VAR 0 10
80472: PUSH
80473: LD_VAR 0 13
80477: PPUSH
80478: LD_VAR 0 4
80482: PUSH
80483: LD_VAR 0 7
80487: ARRAY
80488: PPUSH
80489: CALL_OW 74
80493: ST_TO_ADDR
// if not x then
80494: LD_VAR 0 10
80498: NOT
80499: IFFALSE 80503
// continue ;
80501: GO 79935
// if GetLives ( x ) < 1000 then
80503: LD_VAR 0 10
80507: PPUSH
80508: CALL_OW 256
80512: PUSH
80513: LD_INT 1000
80515: LESS
80516: IFFALSE 80540
// ComRepairVehicle ( group [ i ] , x ) else
80518: LD_VAR 0 4
80522: PUSH
80523: LD_VAR 0 7
80527: ARRAY
80528: PPUSH
80529: LD_VAR 0 10
80533: PPUSH
80534: CALL_OW 129
80538: GO 80588
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
80540: LD_VAR 0 23
80544: PUSH
80545: LD_VAR 0 4
80549: PUSH
80550: LD_VAR 0 7
80554: ARRAY
80555: PPUSH
80556: CALL_OW 256
80560: PUSH
80561: LD_INT 1000
80563: LESS
80564: AND
80565: NOT
80566: IFFALSE 80588
// ComEnterUnit ( group [ i ] , x ) ;
80568: LD_VAR 0 4
80572: PUSH
80573: LD_VAR 0 7
80577: ARRAY
80578: PPUSH
80579: LD_VAR 0 10
80583: PPUSH
80584: CALL_OW 120
// end ; continue ;
80588: GO 79935
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
80590: LD_VAR 0 23
80594: PUSH
80595: LD_VAR 0 4
80599: PUSH
80600: LD_VAR 0 7
80604: ARRAY
80605: PPUSH
80606: CALL_OW 247
80610: PUSH
80611: LD_INT 1
80613: EQUAL
80614: AND
80615: IFFALSE 81093
// begin if group [ i ] in healers then
80617: LD_VAR 0 4
80621: PUSH
80622: LD_VAR 0 7
80626: ARRAY
80627: PUSH
80628: LD_VAR 0 31
80632: IN
80633: IFFALSE 80906
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
80635: LD_VAR 0 4
80639: PUSH
80640: LD_VAR 0 7
80644: ARRAY
80645: PPUSH
80646: LD_VAR 0 23
80650: PPUSH
80651: CALL_OW 308
80655: NOT
80656: PUSH
80657: LD_VAR 0 4
80661: PUSH
80662: LD_VAR 0 7
80666: ARRAY
80667: PPUSH
80668: CALL_OW 314
80672: NOT
80673: AND
80674: IFFALSE 80698
// ComMoveToArea ( group [ i ] , f_heal ) else
80676: LD_VAR 0 4
80680: PUSH
80681: LD_VAR 0 7
80685: ARRAY
80686: PPUSH
80687: LD_VAR 0 23
80691: PPUSH
80692: CALL_OW 113
80696: GO 80904
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
80698: LD_VAR 0 4
80702: PUSH
80703: LD_VAR 0 7
80707: ARRAY
80708: PPUSH
80709: CALL 79336 0 1
80713: PPUSH
80714: CALL_OW 256
80718: PUSH
80719: LD_INT 1000
80721: EQUAL
80722: IFFALSE 80741
// ComStop ( group [ i ] ) else
80724: LD_VAR 0 4
80728: PUSH
80729: LD_VAR 0 7
80733: ARRAY
80734: PPUSH
80735: CALL_OW 141
80739: GO 80904
// if not HasTask ( group [ i ] ) and to_heal then
80741: LD_VAR 0 4
80745: PUSH
80746: LD_VAR 0 7
80750: ARRAY
80751: PPUSH
80752: CALL_OW 314
80756: NOT
80757: PUSH
80758: LD_VAR 0 30
80762: AND
80763: IFFALSE 80904
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
80765: LD_ADDR_VAR 0 13
80769: PUSH
80770: LD_VAR 0 30
80774: PPUSH
80775: LD_INT 3
80777: PUSH
80778: LD_INT 54
80780: PUSH
80781: EMPTY
80782: LIST
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PPUSH
80788: CALL_OW 72
80792: PPUSH
80793: LD_VAR 0 4
80797: PUSH
80798: LD_VAR 0 7
80802: ARRAY
80803: PPUSH
80804: CALL_OW 74
80808: ST_TO_ADDR
// if z then
80809: LD_VAR 0 13
80813: IFFALSE 80904
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
80815: LD_INT 91
80817: PUSH
80818: LD_VAR 0 13
80822: PUSH
80823: LD_INT 10
80825: PUSH
80826: EMPTY
80827: LIST
80828: LIST
80829: LIST
80830: PUSH
80831: LD_INT 81
80833: PUSH
80834: LD_VAR 0 13
80838: PPUSH
80839: CALL_OW 255
80843: PUSH
80844: EMPTY
80845: LIST
80846: LIST
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: PPUSH
80852: CALL_OW 69
80856: PUSH
80857: LD_INT 0
80859: EQUAL
80860: IFFALSE 80884
// ComHeal ( group [ i ] , z ) else
80862: LD_VAR 0 4
80866: PUSH
80867: LD_VAR 0 7
80871: ARRAY
80872: PPUSH
80873: LD_VAR 0 13
80877: PPUSH
80878: CALL_OW 128
80882: GO 80904
// ComMoveToArea ( group [ i ] , f_heal ) ;
80884: LD_VAR 0 4
80888: PUSH
80889: LD_VAR 0 7
80893: ARRAY
80894: PPUSH
80895: LD_VAR 0 23
80899: PPUSH
80900: CALL_OW 113
// end ; continue ;
80904: GO 79935
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
80906: LD_VAR 0 4
80910: PUSH
80911: LD_VAR 0 7
80915: ARRAY
80916: PPUSH
80917: CALL_OW 256
80921: PUSH
80922: LD_INT 700
80924: LESS
80925: PUSH
80926: LD_VAR 0 4
80930: PUSH
80931: LD_VAR 0 7
80935: ARRAY
80936: PUSH
80937: LD_VAR 0 30
80941: IN
80942: NOT
80943: AND
80944: IFFALSE 80968
// to_heal := to_heal union group [ i ] ;
80946: LD_ADDR_VAR 0 30
80950: PUSH
80951: LD_VAR 0 30
80955: PUSH
80956: LD_VAR 0 4
80960: PUSH
80961: LD_VAR 0 7
80965: ARRAY
80966: UNION
80967: ST_TO_ADDR
// if group [ i ] in to_heal then
80968: LD_VAR 0 4
80972: PUSH
80973: LD_VAR 0 7
80977: ARRAY
80978: PUSH
80979: LD_VAR 0 30
80983: IN
80984: IFFALSE 81093
// begin if GetLives ( group [ i ] ) = 1000 then
80986: LD_VAR 0 4
80990: PUSH
80991: LD_VAR 0 7
80995: ARRAY
80996: PPUSH
80997: CALL_OW 256
81001: PUSH
81002: LD_INT 1000
81004: EQUAL
81005: IFFALSE 81031
// to_heal := to_heal diff group [ i ] else
81007: LD_ADDR_VAR 0 30
81011: PUSH
81012: LD_VAR 0 30
81016: PUSH
81017: LD_VAR 0 4
81021: PUSH
81022: LD_VAR 0 7
81026: ARRAY
81027: DIFF
81028: ST_TO_ADDR
81029: GO 81093
// begin if not IsInArea ( group [ i ] , to_heal ) then
81031: LD_VAR 0 4
81035: PUSH
81036: LD_VAR 0 7
81040: ARRAY
81041: PPUSH
81042: LD_VAR 0 30
81046: PPUSH
81047: CALL_OW 308
81051: NOT
81052: IFFALSE 81076
// ComMoveToArea ( group [ i ] , f_heal ) else
81054: LD_VAR 0 4
81058: PUSH
81059: LD_VAR 0 7
81063: ARRAY
81064: PPUSH
81065: LD_VAR 0 23
81069: PPUSH
81070: CALL_OW 113
81074: GO 81091
// ComHold ( group [ i ] ) ;
81076: LD_VAR 0 4
81080: PUSH
81081: LD_VAR 0 7
81085: ARRAY
81086: PPUSH
81087: CALL_OW 140
// continue ;
81091: GO 79935
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
81093: LD_VAR 0 4
81097: PUSH
81098: LD_VAR 0 7
81102: ARRAY
81103: PPUSH
81104: LD_INT 10
81106: PPUSH
81107: CALL 77733 0 2
81111: NOT
81112: PUSH
81113: LD_VAR 0 16
81117: PUSH
81118: LD_VAR 0 7
81122: ARRAY
81123: PUSH
81124: EMPTY
81125: EQUAL
81126: NOT
81127: AND
81128: IFFALSE 81394
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
81130: LD_VAR 0 4
81134: PUSH
81135: LD_VAR 0 7
81139: ARRAY
81140: PPUSH
81141: CALL_OW 262
81145: PUSH
81146: LD_INT 1
81148: PUSH
81149: LD_INT 2
81151: PUSH
81152: EMPTY
81153: LIST
81154: LIST
81155: IN
81156: IFFALSE 81197
// if GetFuel ( group [ i ] ) < 10 then
81158: LD_VAR 0 4
81162: PUSH
81163: LD_VAR 0 7
81167: ARRAY
81168: PPUSH
81169: CALL_OW 261
81173: PUSH
81174: LD_INT 10
81176: LESS
81177: IFFALSE 81197
// SetFuel ( group [ i ] , 12 ) ;
81179: LD_VAR 0 4
81183: PUSH
81184: LD_VAR 0 7
81188: ARRAY
81189: PPUSH
81190: LD_INT 12
81192: PPUSH
81193: CALL_OW 240
// if units_path [ i ] then
81197: LD_VAR 0 16
81201: PUSH
81202: LD_VAR 0 7
81206: ARRAY
81207: IFFALSE 81392
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
81209: LD_VAR 0 4
81213: PUSH
81214: LD_VAR 0 7
81218: ARRAY
81219: PPUSH
81220: LD_VAR 0 16
81224: PUSH
81225: LD_VAR 0 7
81229: ARRAY
81230: PUSH
81231: LD_INT 1
81233: ARRAY
81234: PUSH
81235: LD_INT 1
81237: ARRAY
81238: PPUSH
81239: LD_VAR 0 16
81243: PUSH
81244: LD_VAR 0 7
81248: ARRAY
81249: PUSH
81250: LD_INT 1
81252: ARRAY
81253: PUSH
81254: LD_INT 2
81256: ARRAY
81257: PPUSH
81258: CALL_OW 297
81262: PUSH
81263: LD_INT 6
81265: GREATER
81266: IFFALSE 81341
// begin if not HasTask ( group [ i ] ) then
81268: LD_VAR 0 4
81272: PUSH
81273: LD_VAR 0 7
81277: ARRAY
81278: PPUSH
81279: CALL_OW 314
81283: NOT
81284: IFFALSE 81339
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
81286: LD_VAR 0 4
81290: PUSH
81291: LD_VAR 0 7
81295: ARRAY
81296: PPUSH
81297: LD_VAR 0 16
81301: PUSH
81302: LD_VAR 0 7
81306: ARRAY
81307: PUSH
81308: LD_INT 1
81310: ARRAY
81311: PUSH
81312: LD_INT 1
81314: ARRAY
81315: PPUSH
81316: LD_VAR 0 16
81320: PUSH
81321: LD_VAR 0 7
81325: ARRAY
81326: PUSH
81327: LD_INT 1
81329: ARRAY
81330: PUSH
81331: LD_INT 2
81333: ARRAY
81334: PPUSH
81335: CALL_OW 114
// end else
81339: GO 81392
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
81341: LD_ADDR_VAR 0 15
81345: PUSH
81346: LD_VAR 0 16
81350: PUSH
81351: LD_VAR 0 7
81355: ARRAY
81356: PPUSH
81357: LD_INT 1
81359: PPUSH
81360: CALL_OW 3
81364: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
81365: LD_ADDR_VAR 0 16
81369: PUSH
81370: LD_VAR 0 16
81374: PPUSH
81375: LD_VAR 0 7
81379: PPUSH
81380: LD_VAR 0 15
81384: PPUSH
81385: CALL_OW 1
81389: ST_TO_ADDR
// continue ;
81390: GO 79935
// end ; end ; end else
81392: GO 84030
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
81394: LD_ADDR_VAR 0 14
81398: PUSH
81399: LD_INT 81
81401: PUSH
81402: LD_VAR 0 4
81406: PUSH
81407: LD_VAR 0 7
81411: ARRAY
81412: PPUSH
81413: CALL_OW 255
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: PPUSH
81422: CALL_OW 69
81426: ST_TO_ADDR
// if not tmp then
81427: LD_VAR 0 14
81431: NOT
81432: IFFALSE 81436
// continue ;
81434: GO 79935
// if f_ignore_area then
81436: LD_VAR 0 17
81440: IFFALSE 81528
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
81442: LD_ADDR_VAR 0 15
81446: PUSH
81447: LD_VAR 0 14
81451: PPUSH
81452: LD_INT 3
81454: PUSH
81455: LD_INT 92
81457: PUSH
81458: LD_VAR 0 17
81462: PUSH
81463: LD_INT 1
81465: ARRAY
81466: PUSH
81467: LD_VAR 0 17
81471: PUSH
81472: LD_INT 2
81474: ARRAY
81475: PUSH
81476: LD_VAR 0 17
81480: PUSH
81481: LD_INT 3
81483: ARRAY
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: LIST
81489: LIST
81490: PUSH
81491: EMPTY
81492: LIST
81493: LIST
81494: PPUSH
81495: CALL_OW 72
81499: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81500: LD_VAR 0 14
81504: PUSH
81505: LD_VAR 0 15
81509: DIFF
81510: IFFALSE 81528
// tmp := tmp diff tmp2 ;
81512: LD_ADDR_VAR 0 14
81516: PUSH
81517: LD_VAR 0 14
81521: PUSH
81522: LD_VAR 0 15
81526: DIFF
81527: ST_TO_ADDR
// end ; if not f_murder then
81528: LD_VAR 0 20
81532: NOT
81533: IFFALSE 81591
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
81535: LD_ADDR_VAR 0 15
81539: PUSH
81540: LD_VAR 0 14
81544: PPUSH
81545: LD_INT 3
81547: PUSH
81548: LD_INT 50
81550: PUSH
81551: EMPTY
81552: LIST
81553: PUSH
81554: EMPTY
81555: LIST
81556: LIST
81557: PPUSH
81558: CALL_OW 72
81562: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81563: LD_VAR 0 14
81567: PUSH
81568: LD_VAR 0 15
81572: DIFF
81573: IFFALSE 81591
// tmp := tmp diff tmp2 ;
81575: LD_ADDR_VAR 0 14
81579: PUSH
81580: LD_VAR 0 14
81584: PUSH
81585: LD_VAR 0 15
81589: DIFF
81590: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
81591: LD_ADDR_VAR 0 14
81595: PUSH
81596: LD_VAR 0 4
81600: PUSH
81601: LD_VAR 0 7
81605: ARRAY
81606: PPUSH
81607: LD_VAR 0 14
81611: PPUSH
81612: LD_INT 1
81614: PPUSH
81615: LD_INT 1
81617: PPUSH
81618: CALL 51400 0 4
81622: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
81623: LD_VAR 0 4
81627: PUSH
81628: LD_VAR 0 7
81632: ARRAY
81633: PPUSH
81634: CALL_OW 257
81638: PUSH
81639: LD_INT 1
81641: EQUAL
81642: IFFALSE 82090
// begin if WantPlant ( group [ i ] ) then
81644: LD_VAR 0 4
81648: PUSH
81649: LD_VAR 0 7
81653: ARRAY
81654: PPUSH
81655: CALL 50901 0 1
81659: IFFALSE 81663
// continue ;
81661: GO 79935
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
81663: LD_VAR 0 18
81667: PUSH
81668: LD_VAR 0 4
81672: PUSH
81673: LD_VAR 0 7
81677: ARRAY
81678: PPUSH
81679: CALL_OW 310
81683: NOT
81684: AND
81685: PUSH
81686: LD_VAR 0 14
81690: PUSH
81691: LD_INT 1
81693: ARRAY
81694: PUSH
81695: LD_VAR 0 14
81699: PPUSH
81700: LD_INT 21
81702: PUSH
81703: LD_INT 2
81705: PUSH
81706: EMPTY
81707: LIST
81708: LIST
81709: PUSH
81710: LD_INT 58
81712: PUSH
81713: EMPTY
81714: LIST
81715: PUSH
81716: EMPTY
81717: LIST
81718: LIST
81719: PPUSH
81720: CALL_OW 72
81724: IN
81725: AND
81726: IFFALSE 81762
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
81728: LD_VAR 0 4
81732: PUSH
81733: LD_VAR 0 7
81737: ARRAY
81738: PPUSH
81739: LD_VAR 0 14
81743: PUSH
81744: LD_INT 1
81746: ARRAY
81747: PPUSH
81748: CALL_OW 120
// attacking := true ;
81752: LD_ADDR_VAR 0 29
81756: PUSH
81757: LD_INT 1
81759: ST_TO_ADDR
// continue ;
81760: GO 79935
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
81762: LD_VAR 0 26
81766: PUSH
81767: LD_VAR 0 4
81771: PUSH
81772: LD_VAR 0 7
81776: ARRAY
81777: PPUSH
81778: CALL_OW 257
81782: PUSH
81783: LD_INT 1
81785: EQUAL
81786: AND
81787: PUSH
81788: LD_VAR 0 4
81792: PUSH
81793: LD_VAR 0 7
81797: ARRAY
81798: PPUSH
81799: CALL_OW 256
81803: PUSH
81804: LD_INT 800
81806: LESS
81807: AND
81808: PUSH
81809: LD_VAR 0 4
81813: PUSH
81814: LD_VAR 0 7
81818: ARRAY
81819: PPUSH
81820: CALL_OW 318
81824: NOT
81825: AND
81826: IFFALSE 81843
// ComCrawl ( group [ i ] ) ;
81828: LD_VAR 0 4
81832: PUSH
81833: LD_VAR 0 7
81837: ARRAY
81838: PPUSH
81839: CALL_OW 137
// if f_mines then
81843: LD_VAR 0 21
81847: IFFALSE 82090
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
81849: LD_VAR 0 14
81853: PUSH
81854: LD_INT 1
81856: ARRAY
81857: PPUSH
81858: CALL_OW 247
81862: PUSH
81863: LD_INT 3
81865: EQUAL
81866: PUSH
81867: LD_VAR 0 14
81871: PUSH
81872: LD_INT 1
81874: ARRAY
81875: PUSH
81876: LD_VAR 0 27
81880: IN
81881: NOT
81882: AND
81883: IFFALSE 82090
// begin x := GetX ( tmp [ 1 ] ) ;
81885: LD_ADDR_VAR 0 10
81889: PUSH
81890: LD_VAR 0 14
81894: PUSH
81895: LD_INT 1
81897: ARRAY
81898: PPUSH
81899: CALL_OW 250
81903: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
81904: LD_ADDR_VAR 0 11
81908: PUSH
81909: LD_VAR 0 14
81913: PUSH
81914: LD_INT 1
81916: ARRAY
81917: PPUSH
81918: CALL_OW 251
81922: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
81923: LD_ADDR_VAR 0 12
81927: PUSH
81928: LD_VAR 0 4
81932: PUSH
81933: LD_VAR 0 7
81937: ARRAY
81938: PPUSH
81939: CALL 77818 0 1
81943: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
81944: LD_VAR 0 4
81948: PUSH
81949: LD_VAR 0 7
81953: ARRAY
81954: PPUSH
81955: LD_VAR 0 10
81959: PPUSH
81960: LD_VAR 0 11
81964: PPUSH
81965: LD_VAR 0 14
81969: PUSH
81970: LD_INT 1
81972: ARRAY
81973: PPUSH
81974: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
81978: LD_VAR 0 4
81982: PUSH
81983: LD_VAR 0 7
81987: ARRAY
81988: PPUSH
81989: LD_VAR 0 10
81993: PPUSH
81994: LD_VAR 0 12
81998: PPUSH
81999: LD_INT 7
82001: PPUSH
82002: CALL_OW 272
82006: PPUSH
82007: LD_VAR 0 11
82011: PPUSH
82012: LD_VAR 0 12
82016: PPUSH
82017: LD_INT 7
82019: PPUSH
82020: CALL_OW 273
82024: PPUSH
82025: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
82029: LD_VAR 0 4
82033: PUSH
82034: LD_VAR 0 7
82038: ARRAY
82039: PPUSH
82040: LD_INT 71
82042: PPUSH
82043: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
82047: LD_ADDR_VAR 0 27
82051: PUSH
82052: LD_VAR 0 27
82056: PPUSH
82057: LD_VAR 0 27
82061: PUSH
82062: LD_INT 1
82064: PLUS
82065: PPUSH
82066: LD_VAR 0 14
82070: PUSH
82071: LD_INT 1
82073: ARRAY
82074: PPUSH
82075: CALL_OW 1
82079: ST_TO_ADDR
// attacking := true ;
82080: LD_ADDR_VAR 0 29
82084: PUSH
82085: LD_INT 1
82087: ST_TO_ADDR
// continue ;
82088: GO 79935
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
82090: LD_VAR 0 4
82094: PUSH
82095: LD_VAR 0 7
82099: ARRAY
82100: PPUSH
82101: CALL_OW 257
82105: PUSH
82106: LD_INT 17
82108: EQUAL
82109: PUSH
82110: LD_VAR 0 4
82114: PUSH
82115: LD_VAR 0 7
82119: ARRAY
82120: PPUSH
82121: CALL_OW 110
82125: PUSH
82126: LD_INT 71
82128: EQUAL
82129: NOT
82130: AND
82131: IFFALSE 82277
// begin attacking := false ;
82133: LD_ADDR_VAR 0 29
82137: PUSH
82138: LD_INT 0
82140: ST_TO_ADDR
// k := 5 ;
82141: LD_ADDR_VAR 0 9
82145: PUSH
82146: LD_INT 5
82148: ST_TO_ADDR
// if tmp < k then
82149: LD_VAR 0 14
82153: PUSH
82154: LD_VAR 0 9
82158: LESS
82159: IFFALSE 82171
// k := tmp ;
82161: LD_ADDR_VAR 0 9
82165: PUSH
82166: LD_VAR 0 14
82170: ST_TO_ADDR
// for j = 1 to k do
82171: LD_ADDR_VAR 0 8
82175: PUSH
82176: DOUBLE
82177: LD_INT 1
82179: DEC
82180: ST_TO_ADDR
82181: LD_VAR 0 9
82185: PUSH
82186: FOR_TO
82187: IFFALSE 82275
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
82189: LD_VAR 0 14
82193: PUSH
82194: LD_VAR 0 8
82198: ARRAY
82199: PUSH
82200: LD_VAR 0 14
82204: PPUSH
82205: LD_INT 58
82207: PUSH
82208: EMPTY
82209: LIST
82210: PPUSH
82211: CALL_OW 72
82215: IN
82216: NOT
82217: IFFALSE 82273
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
82219: LD_VAR 0 4
82223: PUSH
82224: LD_VAR 0 7
82228: ARRAY
82229: PPUSH
82230: LD_VAR 0 14
82234: PUSH
82235: LD_VAR 0 8
82239: ARRAY
82240: PPUSH
82241: CALL_OW 115
// attacking := true ;
82245: LD_ADDR_VAR 0 29
82249: PUSH
82250: LD_INT 1
82252: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
82253: LD_VAR 0 4
82257: PUSH
82258: LD_VAR 0 7
82262: ARRAY
82263: PPUSH
82264: LD_INT 71
82266: PPUSH
82267: CALL_OW 109
// continue ;
82271: GO 82186
// end ; end ;
82273: GO 82186
82275: POP
82276: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
82277: LD_VAR 0 4
82281: PUSH
82282: LD_VAR 0 7
82286: ARRAY
82287: PPUSH
82288: CALL_OW 257
82292: PUSH
82293: LD_INT 8
82295: EQUAL
82296: PUSH
82297: LD_VAR 0 4
82301: PUSH
82302: LD_VAR 0 7
82306: ARRAY
82307: PPUSH
82308: CALL_OW 264
82312: PUSH
82313: LD_INT 28
82315: PUSH
82316: LD_INT 45
82318: PUSH
82319: LD_INT 7
82321: PUSH
82322: LD_INT 47
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: IN
82331: OR
82332: IFFALSE 82562
// begin attacking := false ;
82334: LD_ADDR_VAR 0 29
82338: PUSH
82339: LD_INT 0
82341: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
82342: LD_VAR 0 14
82346: PUSH
82347: LD_INT 1
82349: ARRAY
82350: PPUSH
82351: CALL_OW 266
82355: PUSH
82356: LD_INT 32
82358: PUSH
82359: LD_INT 31
82361: PUSH
82362: LD_INT 33
82364: PUSH
82365: LD_INT 4
82367: PUSH
82368: LD_INT 5
82370: PUSH
82371: EMPTY
82372: LIST
82373: LIST
82374: LIST
82375: LIST
82376: LIST
82377: IN
82378: IFFALSE 82562
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
82380: LD_ADDR_VAR 0 9
82384: PUSH
82385: LD_VAR 0 14
82389: PUSH
82390: LD_INT 1
82392: ARRAY
82393: PPUSH
82394: CALL_OW 266
82398: PPUSH
82399: LD_VAR 0 14
82403: PUSH
82404: LD_INT 1
82406: ARRAY
82407: PPUSH
82408: CALL_OW 250
82412: PPUSH
82413: LD_VAR 0 14
82417: PUSH
82418: LD_INT 1
82420: ARRAY
82421: PPUSH
82422: CALL_OW 251
82426: PPUSH
82427: LD_VAR 0 14
82431: PUSH
82432: LD_INT 1
82434: ARRAY
82435: PPUSH
82436: CALL_OW 254
82440: PPUSH
82441: LD_VAR 0 14
82445: PUSH
82446: LD_INT 1
82448: ARRAY
82449: PPUSH
82450: CALL_OW 248
82454: PPUSH
82455: LD_INT 0
82457: PPUSH
82458: CALL 59194 0 6
82462: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
82463: LD_ADDR_VAR 0 8
82467: PUSH
82468: LD_VAR 0 4
82472: PUSH
82473: LD_VAR 0 7
82477: ARRAY
82478: PPUSH
82479: LD_VAR 0 9
82483: PPUSH
82484: CALL 77881 0 2
82488: ST_TO_ADDR
// if j then
82489: LD_VAR 0 8
82493: IFFALSE 82562
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
82495: LD_VAR 0 8
82499: PUSH
82500: LD_INT 1
82502: ARRAY
82503: PPUSH
82504: LD_VAR 0 8
82508: PUSH
82509: LD_INT 2
82511: ARRAY
82512: PPUSH
82513: CALL_OW 488
82517: IFFALSE 82562
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
82519: LD_VAR 0 4
82523: PUSH
82524: LD_VAR 0 7
82528: ARRAY
82529: PPUSH
82530: LD_VAR 0 8
82534: PUSH
82535: LD_INT 1
82537: ARRAY
82538: PPUSH
82539: LD_VAR 0 8
82543: PUSH
82544: LD_INT 2
82546: ARRAY
82547: PPUSH
82548: CALL_OW 116
// attacking := true ;
82552: LD_ADDR_VAR 0 29
82556: PUSH
82557: LD_INT 1
82559: ST_TO_ADDR
// continue ;
82560: GO 79935
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
82562: LD_VAR 0 4
82566: PUSH
82567: LD_VAR 0 7
82571: ARRAY
82572: PPUSH
82573: CALL_OW 265
82577: PUSH
82578: LD_INT 11
82580: EQUAL
82581: IFFALSE 82859
// begin k := 10 ;
82583: LD_ADDR_VAR 0 9
82587: PUSH
82588: LD_INT 10
82590: ST_TO_ADDR
// x := 0 ;
82591: LD_ADDR_VAR 0 10
82595: PUSH
82596: LD_INT 0
82598: ST_TO_ADDR
// if tmp < k then
82599: LD_VAR 0 14
82603: PUSH
82604: LD_VAR 0 9
82608: LESS
82609: IFFALSE 82621
// k := tmp ;
82611: LD_ADDR_VAR 0 9
82615: PUSH
82616: LD_VAR 0 14
82620: ST_TO_ADDR
// for j = k downto 1 do
82621: LD_ADDR_VAR 0 8
82625: PUSH
82626: DOUBLE
82627: LD_VAR 0 9
82631: INC
82632: ST_TO_ADDR
82633: LD_INT 1
82635: PUSH
82636: FOR_DOWNTO
82637: IFFALSE 82712
// begin if GetType ( tmp [ j ] ) = unit_human then
82639: LD_VAR 0 14
82643: PUSH
82644: LD_VAR 0 8
82648: ARRAY
82649: PPUSH
82650: CALL_OW 247
82654: PUSH
82655: LD_INT 1
82657: EQUAL
82658: IFFALSE 82710
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
82660: LD_VAR 0 4
82664: PUSH
82665: LD_VAR 0 7
82669: ARRAY
82670: PPUSH
82671: LD_VAR 0 14
82675: PUSH
82676: LD_VAR 0 8
82680: ARRAY
82681: PPUSH
82682: CALL 78152 0 2
// x := tmp [ j ] ;
82686: LD_ADDR_VAR 0 10
82690: PUSH
82691: LD_VAR 0 14
82695: PUSH
82696: LD_VAR 0 8
82700: ARRAY
82701: ST_TO_ADDR
// attacking := true ;
82702: LD_ADDR_VAR 0 29
82706: PUSH
82707: LD_INT 1
82709: ST_TO_ADDR
// end ; end ;
82710: GO 82636
82712: POP
82713: POP
// if not x then
82714: LD_VAR 0 10
82718: NOT
82719: IFFALSE 82859
// begin attacking := true ;
82721: LD_ADDR_VAR 0 29
82725: PUSH
82726: LD_INT 1
82728: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
82729: LD_VAR 0 4
82733: PUSH
82734: LD_VAR 0 7
82738: ARRAY
82739: PPUSH
82740: CALL_OW 250
82744: PPUSH
82745: LD_VAR 0 4
82749: PUSH
82750: LD_VAR 0 7
82754: ARRAY
82755: PPUSH
82756: CALL_OW 251
82760: PPUSH
82761: CALL_OW 546
82765: PUSH
82766: LD_INT 2
82768: ARRAY
82769: PUSH
82770: LD_VAR 0 14
82774: PUSH
82775: LD_INT 1
82777: ARRAY
82778: PPUSH
82779: CALL_OW 250
82783: PPUSH
82784: LD_VAR 0 14
82788: PUSH
82789: LD_INT 1
82791: ARRAY
82792: PPUSH
82793: CALL_OW 251
82797: PPUSH
82798: CALL_OW 546
82802: PUSH
82803: LD_INT 2
82805: ARRAY
82806: EQUAL
82807: IFFALSE 82835
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
82809: LD_VAR 0 4
82813: PUSH
82814: LD_VAR 0 7
82818: ARRAY
82819: PPUSH
82820: LD_VAR 0 14
82824: PUSH
82825: LD_INT 1
82827: ARRAY
82828: PPUSH
82829: CALL 78152 0 2
82833: GO 82859
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
82835: LD_VAR 0 4
82839: PUSH
82840: LD_VAR 0 7
82844: ARRAY
82845: PPUSH
82846: LD_VAR 0 14
82850: PUSH
82851: LD_INT 1
82853: ARRAY
82854: PPUSH
82855: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
82859: LD_VAR 0 4
82863: PUSH
82864: LD_VAR 0 7
82868: ARRAY
82869: PPUSH
82870: CALL_OW 264
82874: PUSH
82875: LD_INT 29
82877: EQUAL
82878: IFFALSE 83244
// begin if WantsToAttack ( group [ i ] ) in bombed then
82880: LD_VAR 0 4
82884: PUSH
82885: LD_VAR 0 7
82889: ARRAY
82890: PPUSH
82891: CALL_OW 319
82895: PUSH
82896: LD_VAR 0 28
82900: IN
82901: IFFALSE 82905
// continue ;
82903: GO 79935
// k := 8 ;
82905: LD_ADDR_VAR 0 9
82909: PUSH
82910: LD_INT 8
82912: ST_TO_ADDR
// x := 0 ;
82913: LD_ADDR_VAR 0 10
82917: PUSH
82918: LD_INT 0
82920: ST_TO_ADDR
// if tmp < k then
82921: LD_VAR 0 14
82925: PUSH
82926: LD_VAR 0 9
82930: LESS
82931: IFFALSE 82943
// k := tmp ;
82933: LD_ADDR_VAR 0 9
82937: PUSH
82938: LD_VAR 0 14
82942: ST_TO_ADDR
// for j = 1 to k do
82943: LD_ADDR_VAR 0 8
82947: PUSH
82948: DOUBLE
82949: LD_INT 1
82951: DEC
82952: ST_TO_ADDR
82953: LD_VAR 0 9
82957: PUSH
82958: FOR_TO
82959: IFFALSE 83091
// begin if GetType ( tmp [ j ] ) = unit_building then
82961: LD_VAR 0 14
82965: PUSH
82966: LD_VAR 0 8
82970: ARRAY
82971: PPUSH
82972: CALL_OW 247
82976: PUSH
82977: LD_INT 3
82979: EQUAL
82980: IFFALSE 83089
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
82982: LD_VAR 0 14
82986: PUSH
82987: LD_VAR 0 8
82991: ARRAY
82992: PUSH
82993: LD_VAR 0 28
82997: IN
82998: NOT
82999: PUSH
83000: LD_VAR 0 14
83004: PUSH
83005: LD_VAR 0 8
83009: ARRAY
83010: PPUSH
83011: CALL_OW 313
83015: AND
83016: IFFALSE 83089
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83018: LD_VAR 0 4
83022: PUSH
83023: LD_VAR 0 7
83027: ARRAY
83028: PPUSH
83029: LD_VAR 0 14
83033: PUSH
83034: LD_VAR 0 8
83038: ARRAY
83039: PPUSH
83040: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
83044: LD_ADDR_VAR 0 28
83048: PUSH
83049: LD_VAR 0 28
83053: PPUSH
83054: LD_VAR 0 28
83058: PUSH
83059: LD_INT 1
83061: PLUS
83062: PPUSH
83063: LD_VAR 0 14
83067: PUSH
83068: LD_VAR 0 8
83072: ARRAY
83073: PPUSH
83074: CALL_OW 1
83078: ST_TO_ADDR
// attacking := true ;
83079: LD_ADDR_VAR 0 29
83083: PUSH
83084: LD_INT 1
83086: ST_TO_ADDR
// break ;
83087: GO 83091
// end ; end ;
83089: GO 82958
83091: POP
83092: POP
// if not attacking and f_attack_depot then
83093: LD_VAR 0 29
83097: NOT
83098: PUSH
83099: LD_VAR 0 25
83103: AND
83104: IFFALSE 83199
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83106: LD_ADDR_VAR 0 13
83110: PUSH
83111: LD_VAR 0 14
83115: PPUSH
83116: LD_INT 2
83118: PUSH
83119: LD_INT 30
83121: PUSH
83122: LD_INT 0
83124: PUSH
83125: EMPTY
83126: LIST
83127: LIST
83128: PUSH
83129: LD_INT 30
83131: PUSH
83132: LD_INT 1
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: PUSH
83139: EMPTY
83140: LIST
83141: LIST
83142: LIST
83143: PPUSH
83144: CALL_OW 72
83148: ST_TO_ADDR
// if z then
83149: LD_VAR 0 13
83153: IFFALSE 83199
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
83155: LD_VAR 0 4
83159: PUSH
83160: LD_VAR 0 7
83164: ARRAY
83165: PPUSH
83166: LD_VAR 0 13
83170: PPUSH
83171: LD_VAR 0 4
83175: PUSH
83176: LD_VAR 0 7
83180: ARRAY
83181: PPUSH
83182: CALL_OW 74
83186: PPUSH
83187: CALL_OW 115
// attacking := true ;
83191: LD_ADDR_VAR 0 29
83195: PUSH
83196: LD_INT 1
83198: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
83199: LD_VAR 0 4
83203: PUSH
83204: LD_VAR 0 7
83208: ARRAY
83209: PPUSH
83210: CALL_OW 256
83214: PUSH
83215: LD_INT 500
83217: LESS
83218: IFFALSE 83244
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83220: LD_VAR 0 4
83224: PUSH
83225: LD_VAR 0 7
83229: ARRAY
83230: PPUSH
83231: LD_VAR 0 14
83235: PUSH
83236: LD_INT 1
83238: ARRAY
83239: PPUSH
83240: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
83244: LD_VAR 0 4
83248: PUSH
83249: LD_VAR 0 7
83253: ARRAY
83254: PPUSH
83255: CALL_OW 264
83259: PUSH
83260: LD_INT 49
83262: EQUAL
83263: IFFALSE 83384
// begin if not HasTask ( group [ i ] ) then
83265: LD_VAR 0 4
83269: PUSH
83270: LD_VAR 0 7
83274: ARRAY
83275: PPUSH
83276: CALL_OW 314
83280: NOT
83281: IFFALSE 83384
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
83283: LD_ADDR_VAR 0 9
83287: PUSH
83288: LD_INT 81
83290: PUSH
83291: LD_VAR 0 4
83295: PUSH
83296: LD_VAR 0 7
83300: ARRAY
83301: PPUSH
83302: CALL_OW 255
83306: PUSH
83307: EMPTY
83308: LIST
83309: LIST
83310: PPUSH
83311: CALL_OW 69
83315: PPUSH
83316: LD_VAR 0 4
83320: PUSH
83321: LD_VAR 0 7
83325: ARRAY
83326: PPUSH
83327: CALL_OW 74
83331: ST_TO_ADDR
// if k then
83332: LD_VAR 0 9
83336: IFFALSE 83384
// if GetDistUnits ( group [ i ] , k ) > 10 then
83338: LD_VAR 0 4
83342: PUSH
83343: LD_VAR 0 7
83347: ARRAY
83348: PPUSH
83349: LD_VAR 0 9
83353: PPUSH
83354: CALL_OW 296
83358: PUSH
83359: LD_INT 10
83361: GREATER
83362: IFFALSE 83384
// ComMoveUnit ( group [ i ] , k ) ;
83364: LD_VAR 0 4
83368: PUSH
83369: LD_VAR 0 7
83373: ARRAY
83374: PPUSH
83375: LD_VAR 0 9
83379: PPUSH
83380: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83384: LD_VAR 0 4
83388: PUSH
83389: LD_VAR 0 7
83393: ARRAY
83394: PPUSH
83395: CALL_OW 256
83399: PUSH
83400: LD_INT 250
83402: LESS
83403: PUSH
83404: LD_VAR 0 4
83408: PUSH
83409: LD_VAR 0 7
83413: ARRAY
83414: PUSH
83415: LD_INT 21
83417: PUSH
83418: LD_INT 2
83420: PUSH
83421: EMPTY
83422: LIST
83423: LIST
83424: PUSH
83425: LD_INT 23
83427: PUSH
83428: LD_INT 2
83430: PUSH
83431: EMPTY
83432: LIST
83433: LIST
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PPUSH
83439: CALL_OW 69
83443: IN
83444: AND
83445: IFFALSE 83570
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
83447: LD_ADDR_VAR 0 9
83451: PUSH
83452: LD_OWVAR 3
83456: PUSH
83457: LD_VAR 0 4
83461: PUSH
83462: LD_VAR 0 7
83466: ARRAY
83467: DIFF
83468: PPUSH
83469: LD_VAR 0 4
83473: PUSH
83474: LD_VAR 0 7
83478: ARRAY
83479: PPUSH
83480: CALL_OW 74
83484: ST_TO_ADDR
// if not k then
83485: LD_VAR 0 9
83489: NOT
83490: IFFALSE 83494
// continue ;
83492: GO 79935
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
83494: LD_VAR 0 9
83498: PUSH
83499: LD_INT 81
83501: PUSH
83502: LD_VAR 0 4
83506: PUSH
83507: LD_VAR 0 7
83511: ARRAY
83512: PPUSH
83513: CALL_OW 255
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PPUSH
83522: CALL_OW 69
83526: IN
83527: PUSH
83528: LD_VAR 0 9
83532: PPUSH
83533: LD_VAR 0 4
83537: PUSH
83538: LD_VAR 0 7
83542: ARRAY
83543: PPUSH
83544: CALL_OW 296
83548: PUSH
83549: LD_INT 5
83551: LESS
83552: AND
83553: IFFALSE 83570
// ComAutodestruct ( group [ i ] ) ;
83555: LD_VAR 0 4
83559: PUSH
83560: LD_VAR 0 7
83564: ARRAY
83565: PPUSH
83566: CALL 78050 0 1
// end ; if f_attack_depot then
83570: LD_VAR 0 25
83574: IFFALSE 83686
// begin k := 6 ;
83576: LD_ADDR_VAR 0 9
83580: PUSH
83581: LD_INT 6
83583: ST_TO_ADDR
// if tmp < k then
83584: LD_VAR 0 14
83588: PUSH
83589: LD_VAR 0 9
83593: LESS
83594: IFFALSE 83606
// k := tmp ;
83596: LD_ADDR_VAR 0 9
83600: PUSH
83601: LD_VAR 0 14
83605: ST_TO_ADDR
// for j = 1 to k do
83606: LD_ADDR_VAR 0 8
83610: PUSH
83611: DOUBLE
83612: LD_INT 1
83614: DEC
83615: ST_TO_ADDR
83616: LD_VAR 0 9
83620: PUSH
83621: FOR_TO
83622: IFFALSE 83684
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
83624: LD_VAR 0 8
83628: PPUSH
83629: CALL_OW 266
83633: PUSH
83634: LD_INT 0
83636: PUSH
83637: LD_INT 1
83639: PUSH
83640: EMPTY
83641: LIST
83642: LIST
83643: IN
83644: IFFALSE 83682
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83646: LD_VAR 0 4
83650: PUSH
83651: LD_VAR 0 7
83655: ARRAY
83656: PPUSH
83657: LD_VAR 0 14
83661: PUSH
83662: LD_VAR 0 8
83666: ARRAY
83667: PPUSH
83668: CALL_OW 115
// attacking := true ;
83672: LD_ADDR_VAR 0 29
83676: PUSH
83677: LD_INT 1
83679: ST_TO_ADDR
// break ;
83680: GO 83684
// end ;
83682: GO 83621
83684: POP
83685: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
83686: LD_VAR 0 4
83690: PUSH
83691: LD_VAR 0 7
83695: ARRAY
83696: PPUSH
83697: CALL_OW 302
83701: PUSH
83702: LD_VAR 0 29
83706: NOT
83707: AND
83708: IFFALSE 84030
// begin if GetTag ( group [ i ] ) = 71 then
83710: LD_VAR 0 4
83714: PUSH
83715: LD_VAR 0 7
83719: ARRAY
83720: PPUSH
83721: CALL_OW 110
83725: PUSH
83726: LD_INT 71
83728: EQUAL
83729: IFFALSE 83770
// begin if HasTask ( group [ i ] ) then
83731: LD_VAR 0 4
83735: PUSH
83736: LD_VAR 0 7
83740: ARRAY
83741: PPUSH
83742: CALL_OW 314
83746: IFFALSE 83752
// continue else
83748: GO 79935
83750: GO 83770
// SetTag ( group [ i ] , 0 ) ;
83752: LD_VAR 0 4
83756: PUSH
83757: LD_VAR 0 7
83761: ARRAY
83762: PPUSH
83763: LD_INT 0
83765: PPUSH
83766: CALL_OW 109
// end ; k := 8 ;
83770: LD_ADDR_VAR 0 9
83774: PUSH
83775: LD_INT 8
83777: ST_TO_ADDR
// x := 0 ;
83778: LD_ADDR_VAR 0 10
83782: PUSH
83783: LD_INT 0
83785: ST_TO_ADDR
// if tmp < k then
83786: LD_VAR 0 14
83790: PUSH
83791: LD_VAR 0 9
83795: LESS
83796: IFFALSE 83808
// k := tmp ;
83798: LD_ADDR_VAR 0 9
83802: PUSH
83803: LD_VAR 0 14
83807: ST_TO_ADDR
// for j = 1 to k do
83808: LD_ADDR_VAR 0 8
83812: PUSH
83813: DOUBLE
83814: LD_INT 1
83816: DEC
83817: ST_TO_ADDR
83818: LD_VAR 0 9
83822: PUSH
83823: FOR_TO
83824: IFFALSE 83922
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
83826: LD_VAR 0 14
83830: PUSH
83831: LD_VAR 0 8
83835: ARRAY
83836: PPUSH
83837: CALL_OW 247
83841: PUSH
83842: LD_INT 1
83844: EQUAL
83845: PUSH
83846: LD_VAR 0 14
83850: PUSH
83851: LD_VAR 0 8
83855: ARRAY
83856: PPUSH
83857: CALL_OW 256
83861: PUSH
83862: LD_INT 250
83864: LESS
83865: PUSH
83866: LD_VAR 0 20
83870: AND
83871: PUSH
83872: LD_VAR 0 20
83876: NOT
83877: PUSH
83878: LD_VAR 0 14
83882: PUSH
83883: LD_VAR 0 8
83887: ARRAY
83888: PPUSH
83889: CALL_OW 256
83893: PUSH
83894: LD_INT 250
83896: GREATEREQUAL
83897: AND
83898: OR
83899: AND
83900: IFFALSE 83920
// begin x := tmp [ j ] ;
83902: LD_ADDR_VAR 0 10
83906: PUSH
83907: LD_VAR 0 14
83911: PUSH
83912: LD_VAR 0 8
83916: ARRAY
83917: ST_TO_ADDR
// break ;
83918: GO 83922
// end ;
83920: GO 83823
83922: POP
83923: POP
// if x then
83924: LD_VAR 0 10
83928: IFFALSE 83952
// ComAttackUnit ( group [ i ] , x ) else
83930: LD_VAR 0 4
83934: PUSH
83935: LD_VAR 0 7
83939: ARRAY
83940: PPUSH
83941: LD_VAR 0 10
83945: PPUSH
83946: CALL_OW 115
83950: GO 83976
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83952: LD_VAR 0 4
83956: PUSH
83957: LD_VAR 0 7
83961: ARRAY
83962: PPUSH
83963: LD_VAR 0 14
83967: PUSH
83968: LD_INT 1
83970: ARRAY
83971: PPUSH
83972: CALL_OW 115
// if not HasTask ( group [ i ] ) then
83976: LD_VAR 0 4
83980: PUSH
83981: LD_VAR 0 7
83985: ARRAY
83986: PPUSH
83987: CALL_OW 314
83991: NOT
83992: IFFALSE 84030
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
83994: LD_VAR 0 4
83998: PUSH
83999: LD_VAR 0 7
84003: ARRAY
84004: PPUSH
84005: LD_VAR 0 14
84009: PPUSH
84010: LD_VAR 0 4
84014: PUSH
84015: LD_VAR 0 7
84019: ARRAY
84020: PPUSH
84021: CALL_OW 74
84025: PPUSH
84026: CALL_OW 115
// end ; end ; end ;
84030: GO 79935
84032: POP
84033: POP
// wait ( 0 0$1 ) ;
84034: LD_INT 35
84036: PPUSH
84037: CALL_OW 67
// until group = [ ] ;
84041: LD_VAR 0 4
84045: PUSH
84046: EMPTY
84047: EQUAL
84048: IFFALSE 79920
// end ;
84050: LD_VAR 0 2
84054: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84055: LD_INT 0
84057: PPUSH
84058: PPUSH
84059: PPUSH
84060: PPUSH
// if not base_units then
84061: LD_VAR 0 1
84065: NOT
84066: IFFALSE 84070
// exit ;
84068: GO 84157
// result := false ;
84070: LD_ADDR_VAR 0 2
84074: PUSH
84075: LD_INT 0
84077: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84078: LD_ADDR_VAR 0 5
84082: PUSH
84083: LD_VAR 0 1
84087: PPUSH
84088: LD_INT 21
84090: PUSH
84091: LD_INT 3
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PPUSH
84098: CALL_OW 72
84102: ST_TO_ADDR
// if not tmp then
84103: LD_VAR 0 5
84107: NOT
84108: IFFALSE 84112
// exit ;
84110: GO 84157
// for i in tmp do
84112: LD_ADDR_VAR 0 3
84116: PUSH
84117: LD_VAR 0 5
84121: PUSH
84122: FOR_IN
84123: IFFALSE 84155
// begin result := EnemyInRange ( i , 22 ) ;
84125: LD_ADDR_VAR 0 2
84129: PUSH
84130: LD_VAR 0 3
84134: PPUSH
84135: LD_INT 22
84137: PPUSH
84138: CALL 77733 0 2
84142: ST_TO_ADDR
// if result then
84143: LD_VAR 0 2
84147: IFFALSE 84153
// exit ;
84149: POP
84150: POP
84151: GO 84157
// end ;
84153: GO 84122
84155: POP
84156: POP
// end ;
84157: LD_VAR 0 2
84161: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84162: LD_INT 0
84164: PPUSH
84165: PPUSH
// if not units then
84166: LD_VAR 0 1
84170: NOT
84171: IFFALSE 84175
// exit ;
84173: GO 84245
// result := [ ] ;
84175: LD_ADDR_VAR 0 3
84179: PUSH
84180: EMPTY
84181: ST_TO_ADDR
// for i in units do
84182: LD_ADDR_VAR 0 4
84186: PUSH
84187: LD_VAR 0 1
84191: PUSH
84192: FOR_IN
84193: IFFALSE 84243
// if GetTag ( i ) = tag then
84195: LD_VAR 0 4
84199: PPUSH
84200: CALL_OW 110
84204: PUSH
84205: LD_VAR 0 2
84209: EQUAL
84210: IFFALSE 84241
// result := Insert ( result , result + 1 , i ) ;
84212: LD_ADDR_VAR 0 3
84216: PUSH
84217: LD_VAR 0 3
84221: PPUSH
84222: LD_VAR 0 3
84226: PUSH
84227: LD_INT 1
84229: PLUS
84230: PPUSH
84231: LD_VAR 0 4
84235: PPUSH
84236: CALL_OW 2
84240: ST_TO_ADDR
84241: GO 84192
84243: POP
84244: POP
// end ;
84245: LD_VAR 0 3
84249: RET
// export function IsDriver ( un ) ; begin
84250: LD_INT 0
84252: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84253: LD_ADDR_VAR 0 2
84257: PUSH
84258: LD_VAR 0 1
84262: PUSH
84263: LD_INT 55
84265: PUSH
84266: EMPTY
84267: LIST
84268: PPUSH
84269: CALL_OW 69
84273: IN
84274: ST_TO_ADDR
// end ;
84275: LD_VAR 0 2
84279: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84280: LD_INT 0
84282: PPUSH
84283: PPUSH
// list := [ ] ;
84284: LD_ADDR_VAR 0 5
84288: PUSH
84289: EMPTY
84290: ST_TO_ADDR
// case d of 0 :
84291: LD_VAR 0 3
84295: PUSH
84296: LD_INT 0
84298: DOUBLE
84299: EQUAL
84300: IFTRUE 84304
84302: GO 84437
84304: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84305: LD_ADDR_VAR 0 5
84309: PUSH
84310: LD_VAR 0 1
84314: PUSH
84315: LD_INT 4
84317: MINUS
84318: PUSH
84319: LD_VAR 0 2
84323: PUSH
84324: LD_INT 4
84326: MINUS
84327: PUSH
84328: LD_INT 2
84330: PUSH
84331: EMPTY
84332: LIST
84333: LIST
84334: LIST
84335: PUSH
84336: LD_VAR 0 1
84340: PUSH
84341: LD_INT 3
84343: MINUS
84344: PUSH
84345: LD_VAR 0 2
84349: PUSH
84350: LD_INT 1
84352: PUSH
84353: EMPTY
84354: LIST
84355: LIST
84356: LIST
84357: PUSH
84358: LD_VAR 0 1
84362: PUSH
84363: LD_INT 4
84365: PLUS
84366: PUSH
84367: LD_VAR 0 2
84371: PUSH
84372: LD_INT 4
84374: PUSH
84375: EMPTY
84376: LIST
84377: LIST
84378: LIST
84379: PUSH
84380: LD_VAR 0 1
84384: PUSH
84385: LD_INT 3
84387: PLUS
84388: PUSH
84389: LD_VAR 0 2
84393: PUSH
84394: LD_INT 3
84396: PLUS
84397: PUSH
84398: LD_INT 5
84400: PUSH
84401: EMPTY
84402: LIST
84403: LIST
84404: LIST
84405: PUSH
84406: LD_VAR 0 1
84410: PUSH
84411: LD_VAR 0 2
84415: PUSH
84416: LD_INT 4
84418: PLUS
84419: PUSH
84420: LD_INT 0
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: LIST
84427: PUSH
84428: EMPTY
84429: LIST
84430: LIST
84431: LIST
84432: LIST
84433: LIST
84434: ST_TO_ADDR
// end ; 1 :
84435: GO 85135
84437: LD_INT 1
84439: DOUBLE
84440: EQUAL
84441: IFTRUE 84445
84443: GO 84578
84445: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84446: LD_ADDR_VAR 0 5
84450: PUSH
84451: LD_VAR 0 1
84455: PUSH
84456: LD_VAR 0 2
84460: PUSH
84461: LD_INT 4
84463: MINUS
84464: PUSH
84465: LD_INT 3
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: LIST
84472: PUSH
84473: LD_VAR 0 1
84477: PUSH
84478: LD_INT 3
84480: MINUS
84481: PUSH
84482: LD_VAR 0 2
84486: PUSH
84487: LD_INT 3
84489: MINUS
84490: PUSH
84491: LD_INT 2
84493: PUSH
84494: EMPTY
84495: LIST
84496: LIST
84497: LIST
84498: PUSH
84499: LD_VAR 0 1
84503: PUSH
84504: LD_INT 4
84506: MINUS
84507: PUSH
84508: LD_VAR 0 2
84512: PUSH
84513: LD_INT 1
84515: PUSH
84516: EMPTY
84517: LIST
84518: LIST
84519: LIST
84520: PUSH
84521: LD_VAR 0 1
84525: PUSH
84526: LD_VAR 0 2
84530: PUSH
84531: LD_INT 3
84533: PLUS
84534: PUSH
84535: LD_INT 0
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: LIST
84542: PUSH
84543: LD_VAR 0 1
84547: PUSH
84548: LD_INT 4
84550: PLUS
84551: PUSH
84552: LD_VAR 0 2
84556: PUSH
84557: LD_INT 4
84559: PLUS
84560: PUSH
84561: LD_INT 5
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: LIST
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: LIST
84573: LIST
84574: LIST
84575: ST_TO_ADDR
// end ; 2 :
84576: GO 85135
84578: LD_INT 2
84580: DOUBLE
84581: EQUAL
84582: IFTRUE 84586
84584: GO 84715
84586: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84587: LD_ADDR_VAR 0 5
84591: PUSH
84592: LD_VAR 0 1
84596: PUSH
84597: LD_VAR 0 2
84601: PUSH
84602: LD_INT 3
84604: MINUS
84605: PUSH
84606: LD_INT 3
84608: PUSH
84609: EMPTY
84610: LIST
84611: LIST
84612: LIST
84613: PUSH
84614: LD_VAR 0 1
84618: PUSH
84619: LD_INT 4
84621: PLUS
84622: PUSH
84623: LD_VAR 0 2
84627: PUSH
84628: LD_INT 4
84630: PUSH
84631: EMPTY
84632: LIST
84633: LIST
84634: LIST
84635: PUSH
84636: LD_VAR 0 1
84640: PUSH
84641: LD_VAR 0 2
84645: PUSH
84646: LD_INT 4
84648: PLUS
84649: PUSH
84650: LD_INT 0
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: LIST
84657: PUSH
84658: LD_VAR 0 1
84662: PUSH
84663: LD_INT 3
84665: MINUS
84666: PUSH
84667: LD_VAR 0 2
84671: PUSH
84672: LD_INT 1
84674: PUSH
84675: EMPTY
84676: LIST
84677: LIST
84678: LIST
84679: PUSH
84680: LD_VAR 0 1
84684: PUSH
84685: LD_INT 4
84687: MINUS
84688: PUSH
84689: LD_VAR 0 2
84693: PUSH
84694: LD_INT 4
84696: MINUS
84697: PUSH
84698: LD_INT 2
84700: PUSH
84701: EMPTY
84702: LIST
84703: LIST
84704: LIST
84705: PUSH
84706: EMPTY
84707: LIST
84708: LIST
84709: LIST
84710: LIST
84711: LIST
84712: ST_TO_ADDR
// end ; 3 :
84713: GO 85135
84715: LD_INT 3
84717: DOUBLE
84718: EQUAL
84719: IFTRUE 84723
84721: GO 84856
84723: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84724: LD_ADDR_VAR 0 5
84728: PUSH
84729: LD_VAR 0 1
84733: PUSH
84734: LD_INT 3
84736: PLUS
84737: PUSH
84738: LD_VAR 0 2
84742: PUSH
84743: LD_INT 4
84745: PUSH
84746: EMPTY
84747: LIST
84748: LIST
84749: LIST
84750: PUSH
84751: LD_VAR 0 1
84755: PUSH
84756: LD_INT 4
84758: PLUS
84759: PUSH
84760: LD_VAR 0 2
84764: PUSH
84765: LD_INT 4
84767: PLUS
84768: PUSH
84769: LD_INT 5
84771: PUSH
84772: EMPTY
84773: LIST
84774: LIST
84775: LIST
84776: PUSH
84777: LD_VAR 0 1
84781: PUSH
84782: LD_INT 4
84784: MINUS
84785: PUSH
84786: LD_VAR 0 2
84790: PUSH
84791: LD_INT 1
84793: PUSH
84794: EMPTY
84795: LIST
84796: LIST
84797: LIST
84798: PUSH
84799: LD_VAR 0 1
84803: PUSH
84804: LD_VAR 0 2
84808: PUSH
84809: LD_INT 4
84811: MINUS
84812: PUSH
84813: LD_INT 3
84815: PUSH
84816: EMPTY
84817: LIST
84818: LIST
84819: LIST
84820: PUSH
84821: LD_VAR 0 1
84825: PUSH
84826: LD_INT 3
84828: MINUS
84829: PUSH
84830: LD_VAR 0 2
84834: PUSH
84835: LD_INT 3
84837: MINUS
84838: PUSH
84839: LD_INT 2
84841: PUSH
84842: EMPTY
84843: LIST
84844: LIST
84845: LIST
84846: PUSH
84847: EMPTY
84848: LIST
84849: LIST
84850: LIST
84851: LIST
84852: LIST
84853: ST_TO_ADDR
// end ; 4 :
84854: GO 85135
84856: LD_INT 4
84858: DOUBLE
84859: EQUAL
84860: IFTRUE 84864
84862: GO 84997
84864: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
84865: LD_ADDR_VAR 0 5
84869: PUSH
84870: LD_VAR 0 1
84874: PUSH
84875: LD_VAR 0 2
84879: PUSH
84880: LD_INT 4
84882: PLUS
84883: PUSH
84884: LD_INT 0
84886: PUSH
84887: EMPTY
84888: LIST
84889: LIST
84890: LIST
84891: PUSH
84892: LD_VAR 0 1
84896: PUSH
84897: LD_INT 3
84899: PLUS
84900: PUSH
84901: LD_VAR 0 2
84905: PUSH
84906: LD_INT 3
84908: PLUS
84909: PUSH
84910: LD_INT 5
84912: PUSH
84913: EMPTY
84914: LIST
84915: LIST
84916: LIST
84917: PUSH
84918: LD_VAR 0 1
84922: PUSH
84923: LD_INT 4
84925: PLUS
84926: PUSH
84927: LD_VAR 0 2
84931: PUSH
84932: LD_INT 4
84934: PUSH
84935: EMPTY
84936: LIST
84937: LIST
84938: LIST
84939: PUSH
84940: LD_VAR 0 1
84944: PUSH
84945: LD_VAR 0 2
84949: PUSH
84950: LD_INT 3
84952: MINUS
84953: PUSH
84954: LD_INT 3
84956: PUSH
84957: EMPTY
84958: LIST
84959: LIST
84960: LIST
84961: PUSH
84962: LD_VAR 0 1
84966: PUSH
84967: LD_INT 4
84969: MINUS
84970: PUSH
84971: LD_VAR 0 2
84975: PUSH
84976: LD_INT 4
84978: MINUS
84979: PUSH
84980: LD_INT 2
84982: PUSH
84983: EMPTY
84984: LIST
84985: LIST
84986: LIST
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: LIST
84992: LIST
84993: LIST
84994: ST_TO_ADDR
// end ; 5 :
84995: GO 85135
84997: LD_INT 5
84999: DOUBLE
85000: EQUAL
85001: IFTRUE 85005
85003: GO 85134
85005: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85006: LD_ADDR_VAR 0 5
85010: PUSH
85011: LD_VAR 0 1
85015: PUSH
85016: LD_INT 4
85018: MINUS
85019: PUSH
85020: LD_VAR 0 2
85024: PUSH
85025: LD_INT 1
85027: PUSH
85028: EMPTY
85029: LIST
85030: LIST
85031: LIST
85032: PUSH
85033: LD_VAR 0 1
85037: PUSH
85038: LD_VAR 0 2
85042: PUSH
85043: LD_INT 4
85045: MINUS
85046: PUSH
85047: LD_INT 3
85049: PUSH
85050: EMPTY
85051: LIST
85052: LIST
85053: LIST
85054: PUSH
85055: LD_VAR 0 1
85059: PUSH
85060: LD_INT 4
85062: PLUS
85063: PUSH
85064: LD_VAR 0 2
85068: PUSH
85069: LD_INT 4
85071: PLUS
85072: PUSH
85073: LD_INT 5
85075: PUSH
85076: EMPTY
85077: LIST
85078: LIST
85079: LIST
85080: PUSH
85081: LD_VAR 0 1
85085: PUSH
85086: LD_INT 3
85088: PLUS
85089: PUSH
85090: LD_VAR 0 2
85094: PUSH
85095: LD_INT 4
85097: PUSH
85098: EMPTY
85099: LIST
85100: LIST
85101: LIST
85102: PUSH
85103: LD_VAR 0 1
85107: PUSH
85108: LD_VAR 0 2
85112: PUSH
85113: LD_INT 3
85115: PLUS
85116: PUSH
85117: LD_INT 0
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: LIST
85124: PUSH
85125: EMPTY
85126: LIST
85127: LIST
85128: LIST
85129: LIST
85130: LIST
85131: ST_TO_ADDR
// end ; end ;
85132: GO 85135
85134: POP
// result := list ;
85135: LD_ADDR_VAR 0 4
85139: PUSH
85140: LD_VAR 0 5
85144: ST_TO_ADDR
// end ;
85145: LD_VAR 0 4
85149: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85150: LD_INT 0
85152: PPUSH
85153: PPUSH
85154: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85155: LD_VAR 0 1
85159: NOT
85160: PUSH
85161: LD_VAR 0 2
85165: PUSH
85166: LD_INT 1
85168: PUSH
85169: LD_INT 2
85171: PUSH
85172: LD_INT 3
85174: PUSH
85175: LD_INT 4
85177: PUSH
85178: EMPTY
85179: LIST
85180: LIST
85181: LIST
85182: LIST
85183: IN
85184: NOT
85185: OR
85186: IFFALSE 85190
// exit ;
85188: GO 85282
// tmp := [ ] ;
85190: LD_ADDR_VAR 0 5
85194: PUSH
85195: EMPTY
85196: ST_TO_ADDR
// for i in units do
85197: LD_ADDR_VAR 0 4
85201: PUSH
85202: LD_VAR 0 1
85206: PUSH
85207: FOR_IN
85208: IFFALSE 85251
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85210: LD_ADDR_VAR 0 5
85214: PUSH
85215: LD_VAR 0 5
85219: PPUSH
85220: LD_VAR 0 5
85224: PUSH
85225: LD_INT 1
85227: PLUS
85228: PPUSH
85229: LD_VAR 0 4
85233: PPUSH
85234: LD_VAR 0 2
85238: PPUSH
85239: CALL_OW 259
85243: PPUSH
85244: CALL_OW 2
85248: ST_TO_ADDR
85249: GO 85207
85251: POP
85252: POP
// if not tmp then
85253: LD_VAR 0 5
85257: NOT
85258: IFFALSE 85262
// exit ;
85260: GO 85282
// result := SortListByListDesc ( units , tmp ) ;
85262: LD_ADDR_VAR 0 3
85266: PUSH
85267: LD_VAR 0 1
85271: PPUSH
85272: LD_VAR 0 5
85276: PPUSH
85277: CALL_OW 77
85281: ST_TO_ADDR
// end ;
85282: LD_VAR 0 3
85286: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85287: LD_INT 0
85289: PPUSH
85290: PPUSH
85291: PPUSH
// x := GetX ( building ) ;
85292: LD_ADDR_VAR 0 4
85296: PUSH
85297: LD_VAR 0 2
85301: PPUSH
85302: CALL_OW 250
85306: ST_TO_ADDR
// y := GetY ( building ) ;
85307: LD_ADDR_VAR 0 5
85311: PUSH
85312: LD_VAR 0 2
85316: PPUSH
85317: CALL_OW 251
85321: ST_TO_ADDR
// if GetTaskList ( unit ) then
85322: LD_VAR 0 1
85326: PPUSH
85327: CALL_OW 437
85331: IFFALSE 85426
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85333: LD_STRING e
85335: PUSH
85336: LD_VAR 0 1
85340: PPUSH
85341: CALL_OW 437
85345: PUSH
85346: LD_INT 1
85348: ARRAY
85349: PUSH
85350: LD_INT 1
85352: ARRAY
85353: EQUAL
85354: PUSH
85355: LD_VAR 0 4
85359: PUSH
85360: LD_VAR 0 1
85364: PPUSH
85365: CALL_OW 437
85369: PUSH
85370: LD_INT 1
85372: ARRAY
85373: PUSH
85374: LD_INT 2
85376: ARRAY
85377: EQUAL
85378: AND
85379: PUSH
85380: LD_VAR 0 5
85384: PUSH
85385: LD_VAR 0 1
85389: PPUSH
85390: CALL_OW 437
85394: PUSH
85395: LD_INT 1
85397: ARRAY
85398: PUSH
85399: LD_INT 3
85401: ARRAY
85402: EQUAL
85403: AND
85404: IFFALSE 85416
// result := true else
85406: LD_ADDR_VAR 0 3
85410: PUSH
85411: LD_INT 1
85413: ST_TO_ADDR
85414: GO 85424
// result := false ;
85416: LD_ADDR_VAR 0 3
85420: PUSH
85421: LD_INT 0
85423: ST_TO_ADDR
// end else
85424: GO 85434
// result := false ;
85426: LD_ADDR_VAR 0 3
85430: PUSH
85431: LD_INT 0
85433: ST_TO_ADDR
// end ;
85434: LD_VAR 0 3
85438: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85439: LD_INT 0
85441: PPUSH
85442: PPUSH
85443: PPUSH
85444: PPUSH
// if not unit or not area then
85445: LD_VAR 0 1
85449: NOT
85450: PUSH
85451: LD_VAR 0 2
85455: NOT
85456: OR
85457: IFFALSE 85461
// exit ;
85459: GO 85626
// tmp := AreaToList ( area , i ) ;
85461: LD_ADDR_VAR 0 6
85465: PUSH
85466: LD_VAR 0 2
85470: PPUSH
85471: LD_VAR 0 5
85475: PPUSH
85476: CALL_OW 517
85480: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85481: LD_ADDR_VAR 0 5
85485: PUSH
85486: DOUBLE
85487: LD_INT 1
85489: DEC
85490: ST_TO_ADDR
85491: LD_VAR 0 6
85495: PUSH
85496: LD_INT 1
85498: ARRAY
85499: PUSH
85500: FOR_TO
85501: IFFALSE 85616
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85503: LD_ADDR_VAR 0 7
85507: PUSH
85508: LD_VAR 0 6
85512: PUSH
85513: LD_INT 1
85515: ARRAY
85516: PUSH
85517: LD_VAR 0 5
85521: ARRAY
85522: PUSH
85523: LD_VAR 0 6
85527: PUSH
85528: LD_INT 2
85530: ARRAY
85531: PUSH
85532: LD_VAR 0 5
85536: ARRAY
85537: PUSH
85538: EMPTY
85539: LIST
85540: LIST
85541: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85542: LD_VAR 0 7
85546: PUSH
85547: LD_INT 1
85549: ARRAY
85550: PPUSH
85551: LD_VAR 0 7
85555: PUSH
85556: LD_INT 2
85558: ARRAY
85559: PPUSH
85560: CALL_OW 428
85564: PUSH
85565: LD_INT 0
85567: EQUAL
85568: IFFALSE 85614
// begin result := true ;
85570: LD_ADDR_VAR 0 4
85574: PUSH
85575: LD_INT 1
85577: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85578: LD_VAR 0 1
85582: PPUSH
85583: LD_VAR 0 7
85587: PUSH
85588: LD_INT 1
85590: ARRAY
85591: PPUSH
85592: LD_VAR 0 7
85596: PUSH
85597: LD_INT 2
85599: ARRAY
85600: PPUSH
85601: LD_VAR 0 3
85605: PPUSH
85606: CALL_OW 48
// exit ;
85610: POP
85611: POP
85612: GO 85626
// end ; end ;
85614: GO 85500
85616: POP
85617: POP
// result := false ;
85618: LD_ADDR_VAR 0 4
85622: PUSH
85623: LD_INT 0
85625: ST_TO_ADDR
// end ;
85626: LD_VAR 0 4
85630: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85631: LD_INT 0
85633: PPUSH
85634: PPUSH
85635: PPUSH
// if not side or side > 8 then
85636: LD_VAR 0 1
85640: NOT
85641: PUSH
85642: LD_VAR 0 1
85646: PUSH
85647: LD_INT 8
85649: GREATER
85650: OR
85651: IFFALSE 85655
// exit ;
85653: GO 85842
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85655: LD_ADDR_VAR 0 4
85659: PUSH
85660: LD_INT 22
85662: PUSH
85663: LD_VAR 0 1
85667: PUSH
85668: EMPTY
85669: LIST
85670: LIST
85671: PUSH
85672: LD_INT 21
85674: PUSH
85675: LD_INT 3
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: PPUSH
85686: CALL_OW 69
85690: ST_TO_ADDR
// if not tmp then
85691: LD_VAR 0 4
85695: NOT
85696: IFFALSE 85700
// exit ;
85698: GO 85842
// enable_addtolog := true ;
85700: LD_ADDR_OWVAR 81
85704: PUSH
85705: LD_INT 1
85707: ST_TO_ADDR
// AddToLog ( [ ) ;
85708: LD_STRING [
85710: PPUSH
85711: CALL_OW 561
// for i in tmp do
85715: LD_ADDR_VAR 0 3
85719: PUSH
85720: LD_VAR 0 4
85724: PUSH
85725: FOR_IN
85726: IFFALSE 85833
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85728: LD_STRING [
85730: PUSH
85731: LD_VAR 0 3
85735: PPUSH
85736: CALL_OW 266
85740: STR
85741: PUSH
85742: LD_STRING , 
85744: STR
85745: PUSH
85746: LD_VAR 0 3
85750: PPUSH
85751: CALL_OW 250
85755: STR
85756: PUSH
85757: LD_STRING , 
85759: STR
85760: PUSH
85761: LD_VAR 0 3
85765: PPUSH
85766: CALL_OW 251
85770: STR
85771: PUSH
85772: LD_STRING , 
85774: STR
85775: PUSH
85776: LD_VAR 0 3
85780: PPUSH
85781: CALL_OW 254
85785: STR
85786: PUSH
85787: LD_STRING , 
85789: STR
85790: PUSH
85791: LD_VAR 0 3
85795: PPUSH
85796: LD_INT 1
85798: PPUSH
85799: CALL_OW 268
85803: STR
85804: PUSH
85805: LD_STRING , 
85807: STR
85808: PUSH
85809: LD_VAR 0 3
85813: PPUSH
85814: LD_INT 2
85816: PPUSH
85817: CALL_OW 268
85821: STR
85822: PUSH
85823: LD_STRING ],
85825: STR
85826: PPUSH
85827: CALL_OW 561
// end ;
85831: GO 85725
85833: POP
85834: POP
// AddToLog ( ]; ) ;
85835: LD_STRING ];
85837: PPUSH
85838: CALL_OW 561
// end ;
85842: LD_VAR 0 2
85846: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
85847: LD_INT 0
85849: PPUSH
85850: PPUSH
85851: PPUSH
85852: PPUSH
85853: PPUSH
// if not area or not rate or not max then
85854: LD_VAR 0 1
85858: NOT
85859: PUSH
85860: LD_VAR 0 2
85864: NOT
85865: OR
85866: PUSH
85867: LD_VAR 0 4
85871: NOT
85872: OR
85873: IFFALSE 85877
// exit ;
85875: GO 86069
// while 1 do
85877: LD_INT 1
85879: IFFALSE 86069
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
85881: LD_ADDR_VAR 0 9
85885: PUSH
85886: LD_VAR 0 1
85890: PPUSH
85891: LD_INT 1
85893: PPUSH
85894: CALL_OW 287
85898: PUSH
85899: LD_INT 10
85901: MUL
85902: ST_TO_ADDR
// r := rate / 10 ;
85903: LD_ADDR_VAR 0 7
85907: PUSH
85908: LD_VAR 0 2
85912: PUSH
85913: LD_INT 10
85915: DIVREAL
85916: ST_TO_ADDR
// time := 1 1$00 ;
85917: LD_ADDR_VAR 0 8
85921: PUSH
85922: LD_INT 2100
85924: ST_TO_ADDR
// if amount < min then
85925: LD_VAR 0 9
85929: PUSH
85930: LD_VAR 0 3
85934: LESS
85935: IFFALSE 85953
// r := r * 2 else
85937: LD_ADDR_VAR 0 7
85941: PUSH
85942: LD_VAR 0 7
85946: PUSH
85947: LD_INT 2
85949: MUL
85950: ST_TO_ADDR
85951: GO 85979
// if amount > max then
85953: LD_VAR 0 9
85957: PUSH
85958: LD_VAR 0 4
85962: GREATER
85963: IFFALSE 85979
// r := r / 2 ;
85965: LD_ADDR_VAR 0 7
85969: PUSH
85970: LD_VAR 0 7
85974: PUSH
85975: LD_INT 2
85977: DIVREAL
85978: ST_TO_ADDR
// time := time / r ;
85979: LD_ADDR_VAR 0 8
85983: PUSH
85984: LD_VAR 0 8
85988: PUSH
85989: LD_VAR 0 7
85993: DIVREAL
85994: ST_TO_ADDR
// if time < 0 then
85995: LD_VAR 0 8
85999: PUSH
86000: LD_INT 0
86002: LESS
86003: IFFALSE 86020
// time := time * - 1 ;
86005: LD_ADDR_VAR 0 8
86009: PUSH
86010: LD_VAR 0 8
86014: PUSH
86015: LD_INT 1
86017: NEG
86018: MUL
86019: ST_TO_ADDR
// wait ( time ) ;
86020: LD_VAR 0 8
86024: PPUSH
86025: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
86029: LD_INT 35
86031: PPUSH
86032: LD_INT 875
86034: PPUSH
86035: CALL_OW 12
86039: PPUSH
86040: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86044: LD_INT 1
86046: PPUSH
86047: LD_INT 5
86049: PPUSH
86050: CALL_OW 12
86054: PPUSH
86055: LD_VAR 0 1
86059: PPUSH
86060: LD_INT 1
86062: PPUSH
86063: CALL_OW 55
// end ;
86067: GO 85877
// end ;
86069: LD_VAR 0 5
86073: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86074: LD_INT 0
86076: PPUSH
86077: PPUSH
86078: PPUSH
86079: PPUSH
86080: PPUSH
86081: PPUSH
86082: PPUSH
86083: PPUSH
// if not turrets or not factories then
86084: LD_VAR 0 1
86088: NOT
86089: PUSH
86090: LD_VAR 0 2
86094: NOT
86095: OR
86096: IFFALSE 86100
// exit ;
86098: GO 86407
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86100: LD_ADDR_VAR 0 10
86104: PUSH
86105: LD_INT 5
86107: PUSH
86108: LD_INT 6
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: LD_INT 2
86117: PUSH
86118: LD_INT 4
86120: PUSH
86121: EMPTY
86122: LIST
86123: LIST
86124: PUSH
86125: LD_INT 3
86127: PUSH
86128: LD_INT 5
86130: PUSH
86131: EMPTY
86132: LIST
86133: LIST
86134: PUSH
86135: EMPTY
86136: LIST
86137: LIST
86138: LIST
86139: PUSH
86140: LD_INT 24
86142: PUSH
86143: LD_INT 25
86145: PUSH
86146: EMPTY
86147: LIST
86148: LIST
86149: PUSH
86150: LD_INT 23
86152: PUSH
86153: LD_INT 27
86155: PUSH
86156: EMPTY
86157: LIST
86158: LIST
86159: PUSH
86160: EMPTY
86161: LIST
86162: LIST
86163: PUSH
86164: LD_INT 42
86166: PUSH
86167: LD_INT 43
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: PUSH
86174: LD_INT 44
86176: PUSH
86177: LD_INT 46
86179: PUSH
86180: EMPTY
86181: LIST
86182: LIST
86183: PUSH
86184: LD_INT 45
86186: PUSH
86187: LD_INT 47
86189: PUSH
86190: EMPTY
86191: LIST
86192: LIST
86193: PUSH
86194: EMPTY
86195: LIST
86196: LIST
86197: LIST
86198: PUSH
86199: EMPTY
86200: LIST
86201: LIST
86202: LIST
86203: ST_TO_ADDR
// result := [ ] ;
86204: LD_ADDR_VAR 0 3
86208: PUSH
86209: EMPTY
86210: ST_TO_ADDR
// for i in turrets do
86211: LD_ADDR_VAR 0 4
86215: PUSH
86216: LD_VAR 0 1
86220: PUSH
86221: FOR_IN
86222: IFFALSE 86405
// begin nat := GetNation ( i ) ;
86224: LD_ADDR_VAR 0 7
86228: PUSH
86229: LD_VAR 0 4
86233: PPUSH
86234: CALL_OW 248
86238: ST_TO_ADDR
// weapon := 0 ;
86239: LD_ADDR_VAR 0 8
86243: PUSH
86244: LD_INT 0
86246: ST_TO_ADDR
// if not nat then
86247: LD_VAR 0 7
86251: NOT
86252: IFFALSE 86256
// continue ;
86254: GO 86221
// for j in list [ nat ] do
86256: LD_ADDR_VAR 0 5
86260: PUSH
86261: LD_VAR 0 10
86265: PUSH
86266: LD_VAR 0 7
86270: ARRAY
86271: PUSH
86272: FOR_IN
86273: IFFALSE 86314
// if GetBWeapon ( i ) = j [ 1 ] then
86275: LD_VAR 0 4
86279: PPUSH
86280: CALL_OW 269
86284: PUSH
86285: LD_VAR 0 5
86289: PUSH
86290: LD_INT 1
86292: ARRAY
86293: EQUAL
86294: IFFALSE 86312
// begin weapon := j [ 2 ] ;
86296: LD_ADDR_VAR 0 8
86300: PUSH
86301: LD_VAR 0 5
86305: PUSH
86306: LD_INT 2
86308: ARRAY
86309: ST_TO_ADDR
// break ;
86310: GO 86314
// end ;
86312: GO 86272
86314: POP
86315: POP
// if not weapon then
86316: LD_VAR 0 8
86320: NOT
86321: IFFALSE 86325
// continue ;
86323: GO 86221
// for k in factories do
86325: LD_ADDR_VAR 0 6
86329: PUSH
86330: LD_VAR 0 2
86334: PUSH
86335: FOR_IN
86336: IFFALSE 86401
// begin weapons := AvailableWeaponList ( k ) ;
86338: LD_ADDR_VAR 0 9
86342: PUSH
86343: LD_VAR 0 6
86347: PPUSH
86348: CALL_OW 478
86352: ST_TO_ADDR
// if not weapons then
86353: LD_VAR 0 9
86357: NOT
86358: IFFALSE 86362
// continue ;
86360: GO 86335
// if weapon in weapons then
86362: LD_VAR 0 8
86366: PUSH
86367: LD_VAR 0 9
86371: IN
86372: IFFALSE 86399
// begin result := [ i , weapon ] ;
86374: LD_ADDR_VAR 0 3
86378: PUSH
86379: LD_VAR 0 4
86383: PUSH
86384: LD_VAR 0 8
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: ST_TO_ADDR
// exit ;
86393: POP
86394: POP
86395: POP
86396: POP
86397: GO 86407
// end ; end ;
86399: GO 86335
86401: POP
86402: POP
// end ;
86403: GO 86221
86405: POP
86406: POP
// end ;
86407: LD_VAR 0 3
86411: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
86412: LD_INT 0
86414: PPUSH
// if not side or side > 8 then
86415: LD_VAR 0 3
86419: NOT
86420: PUSH
86421: LD_VAR 0 3
86425: PUSH
86426: LD_INT 8
86428: GREATER
86429: OR
86430: IFFALSE 86434
// exit ;
86432: GO 86493
// if not range then
86434: LD_VAR 0 4
86438: NOT
86439: IFFALSE 86450
// range := - 12 ;
86441: LD_ADDR_VAR 0 4
86445: PUSH
86446: LD_INT 12
86448: NEG
86449: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
86450: LD_VAR 0 1
86454: PPUSH
86455: LD_VAR 0 2
86459: PPUSH
86460: LD_VAR 0 3
86464: PPUSH
86465: LD_VAR 0 4
86469: PPUSH
86470: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
86474: LD_VAR 0 1
86478: PPUSH
86479: LD_VAR 0 2
86483: PPUSH
86484: LD_VAR 0 3
86488: PPUSH
86489: CALL_OW 331
// end ; end_of_file
86493: LD_VAR 0 5
86497: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
86498: GO 86500
86500: DISABLE
// begin ru_radar := 98 ;
86501: LD_ADDR_EXP 93
86505: PUSH
86506: LD_INT 98
86508: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
86509: LD_ADDR_EXP 94
86513: PUSH
86514: LD_INT 89
86516: ST_TO_ADDR
// us_hack := 99 ;
86517: LD_ADDR_EXP 95
86521: PUSH
86522: LD_INT 99
86524: ST_TO_ADDR
// us_artillery := 97 ;
86525: LD_ADDR_EXP 96
86529: PUSH
86530: LD_INT 97
86532: ST_TO_ADDR
// ar_bio_bomb := 91 ;
86533: LD_ADDR_EXP 97
86537: PUSH
86538: LD_INT 91
86540: ST_TO_ADDR
// end ;
86541: END
