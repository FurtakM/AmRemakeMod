// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16279 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 67924 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2208 0 0
// MC_Start ( ) ;
  78: CALL 16492 0 0
// Action ;
  82: CALL 7361 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 189000
 212: PUSH
 213: LD_INT 168000
 215: PUSH
 216: LD_INT 157500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 72
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 73
 312: PUSH
 313: LD_INT 25
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 29484 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 29484 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 29484 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 48
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 29853 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 34568 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 34568 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 34568 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 34568 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 34568 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 34568 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 34568 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 34568 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 34568 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 34568 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 34568 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 34568 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 34568 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 34568 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 34568 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1461
// if GetClass ( i ) = class_mortar then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: EQUAL
1445: IFFALSE 1459
// SetClass ( i , class_soldier ) ;
1447: LD_VAR 0 2
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL_OW 336
1459: GO 1429
1461: POP
1462: POP
// if tmp < 12 then
1463: LD_VAR 0 5
1467: PUSH
1468: LD_INT 12
1470: LESS
1471: IFFALSE 1569
// begin k := 16 - tmp ;
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: LD_INT 16
1480: PUSH
1481: LD_VAR 0 5
1485: MINUS
1486: ST_TO_ADDR
// for i = 1 to k do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_VAR 0 3
1501: PUSH
1502: FOR_TO
1503: IFFALSE 1567
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1505: LD_INT 0
1507: PPUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 1
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: LD_INT 4
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 5
1535: PPUSH
1536: CALL_OW 12
1540: ARRAY
1541: PPUSH
1542: LD_INT 6
1544: PPUSH
1545: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: CALL_OW 44
1563: ADD
1564: ST_TO_ADDR
// end ;
1565: GO 1502
1567: POP
1568: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1569: LD_ADDR_EXP 20
1573: PUSH
1574: LD_STRING 1
1576: PPUSH
1577: LD_INT 12
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT -5
1585: PUSH
1586: LD_EXP 21
1590: PUSH
1591: LD_INT -2
1593: PUSH
1594: LD_INT -3
1596: PUSH
1597: LD_INT -5
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_VAR 0 5
1611: ADD
1612: PUSH
1613: LD_INT -6
1615: PUSH
1616: LD_INT -4
1618: PUSH
1619: LD_EXP 30
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: ADD
1629: PPUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 42
1703: ST_TO_ADDR
// others := tmp diff selected ;
1704: LD_ADDR_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: LD_EXP 20
1718: DIFF
1719: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1720: LD_ADDR_VAR 0 8
1724: PUSH
1725: LD_VAR 0 5
1729: PUSH
1730: LD_EXP 22
1734: PUSH
1735: LD_EXP 23
1739: PUSH
1740: LD_EXP 24
1744: PUSH
1745: LD_EXP 25
1749: PUSH
1750: LD_EXP 26
1754: PUSH
1755: LD_EXP 27
1759: PUSH
1760: LD_EXP 28
1764: PUSH
1765: LD_EXP 29
1769: PUSH
1770: LD_EXP 31
1774: PUSH
1775: LD_EXP 32
1779: PUSH
1780: LD_EXP 33
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: DIFF
1804: ST_TO_ADDR
// no_selected := others ;
1805: LD_ADDR_EXP 19
1809: PUSH
1810: LD_VAR 0 8
1814: ST_TO_ADDR
// if no_selected then
1815: LD_EXP 19
1819: IFFALSE 1833
// SaveCharacters ( no_selected , 11_others ) ;
1821: LD_EXP 19
1825: PPUSH
1826: LD_STRING 11_others
1828: PPUSH
1829: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1833: LD_ADDR_VAR 0 6
1837: PUSH
1838: LD_INT 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 1
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 7
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: ST_TO_ADDR
// for i in JMM ^ selected do
1935: LD_ADDR_VAR 0 2
1939: PUSH
1940: LD_EXP 21
1944: PUSH
1945: LD_EXP 20
1949: ADD
1950: PUSH
1951: FOR_IN
1952: IFFALSE 2141
// begin if GetClass ( i ) = 3 then
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 257
1963: PUSH
1964: LD_INT 3
1966: EQUAL
1967: IFFALSE 2124
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1969: LD_ADDR_OWVAR 37
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1987: LD_ADDR_OWVAR 39
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 2
2003: ARRAY
2004: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2005: LD_ADDR_OWVAR 38
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2023: LD_ADDR_OWVAR 40
2027: PUSH
2028: LD_VAR 0 6
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PUSH
2037: LD_INT 4
2039: ARRAY
2040: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2041: LD_ADDR_VAR 0 6
2045: PUSH
2046: LD_VAR 0 6
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: CALL_OW 3
2058: ST_TO_ADDR
// veh := CreateVehicle ;
2059: LD_ADDR_VAR 0 7
2063: PUSH
2064: CALL_OW 45
2068: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2069: LD_VAR 0 7
2073: PPUSH
2074: LD_INT 8
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_VAR 0 7
2093: PPUSH
2094: CALL_OW 52
// if i = JMM then
2098: LD_VAR 0 2
2102: PUSH
2103: LD_EXP 21
2107: EQUAL
2108: IFFALSE 2122
// SetMark ( veh , 1 ) ;
2110: LD_VAR 0 7
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 242
// end else
2122: GO 2139
// PlaceUnitArea ( i , am_hum_start , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 9
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// end ;
2139: GO 1951
2141: POP
2142: POP
// vc_chassis := us_medium_tracked ;
2143: LD_ADDR_OWVAR 37
2147: PUSH
2148: LD_INT 3
2150: ST_TO_ADDR
// vc_engine := engine_solar ;
2151: LD_ADDR_OWVAR 39
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_control := control_computer ;
2159: LD_ADDR_OWVAR 38
2163: PUSH
2164: LD_INT 3
2166: ST_TO_ADDR
// vc_weapon := us_radar ;
2167: LD_ADDR_OWVAR 40
2171: PUSH
2172: LD_INT 11
2174: ST_TO_ADDR
// veh := CreateVehicle ;
2175: LD_ADDR_VAR 0 7
2179: PUSH
2180: CALL_OW 45
2184: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2185: LD_VAR 0 7
2189: PPUSH
2190: LD_INT 87
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 48
// end ; end_of_file
2203: LD_VAR 0 1
2207: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2215: LD_ADDR_VAR 0 5
2219: PUSH
2220: LD_INT 6
2222: PUSH
2223: LD_INT 7
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_OWVAR 67
2238: ARRAY
2239: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
2240: LD_INT 69
2242: PUSH
2243: EMPTY
2244: LIST
2245: PPUSH
2246: LD_INT 141
2248: PPUSH
2249: CALL_OW 169
// Wait ( 1 ) ;
2253: LD_INT 1
2255: PPUSH
2256: CALL_OW 67
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// uc_nation := 2 ;
2268: LD_ADDR_OWVAR 21
2272: PUSH
2273: LD_INT 2
2275: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2276: LD_ADDR_OWVAR 37
2280: PUSH
2281: LD_INT 14
2283: ST_TO_ADDR
// vc_engine := engine_siberite ;
2284: LD_ADDR_OWVAR 39
2288: PUSH
2289: LD_INT 3
2291: ST_TO_ADDR
// vc_control := control_manual ;
2292: LD_ADDR_OWVAR 38
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2300: LD_ADDR_OWVAR 40
2304: PUSH
2305: LD_INT 31
2307: ST_TO_ADDR
// for i = 1 to 3 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 3
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2406
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: LD_VAR 0 5
2334: PPUSH
2335: CALL_OW 380
// un := CreateVehicle ;
2339: LD_ADDR_VAR 0 4
2343: PUSH
2344: CALL_OW 45
2348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: CALL_OW 12
2364: PPUSH
2365: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 156
2376: PPUSH
2377: LD_INT 15
2379: PPUSH
2380: LD_INT 6
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2390: CALL_OW 44
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 52
// end ;
2404: GO 2321
2406: POP
2407: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2408: LD_ADDR_EXP 37
2412: PUSH
2413: LD_INT 94
2415: PPUSH
2416: LD_STRING dammam
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: LD_INT 10000
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: LD_INT 300
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PPUSH
2438: LD_INT 1
2440: NEG
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: LD_INT 1
2447: NEG
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL 44039 0 5
2462: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
2463: LD_ADDR_EXP 37
2467: PUSH
2468: LD_EXP 37
2472: PUSH
2473: LD_INT 122
2475: PPUSH
2476: LD_STRING 
2478: PPUSH
2479: LD_VAR 0 5
2483: PPUSH
2484: LD_INT 100
2486: PUSH
2487: LD_INT 60
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PPUSH
2498: LD_INT 1
2500: NEG
2501: PUSH
2502: LD_INT 4
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: LD_INT 0
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL 44039 0 5
2521: ADD
2522: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2523: LD_ADDR_EXP 35
2527: PUSH
2528: LD_INT 45
2530: PPUSH
2531: LD_STRING jeddah
2533: PPUSH
2534: LD_VAR 0 5
2538: PPUSH
2539: LD_INT 700
2541: PUSH
2542: LD_INT 300
2544: PUSH
2545: LD_INT 10
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PPUSH
2553: LD_INT 1
2555: NEG
2556: PUSH
2557: LD_INT 5
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 2
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL 44039 0 5
2576: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2577: LD_ADDR_EXP 36
2581: PUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_STRING riyadh
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 500
2595: PUSH
2596: LD_INT 60
2598: PUSH
2599: LD_INT 0
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL 44039 0 5
2629: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2630: LD_ADDR_EXP 38
2634: PUSH
2635: LD_INT 69
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: LD_VAR 0 5
2645: PPUSH
2646: LD_INT 500
2648: PUSH
2649: LD_INT 50
2651: PUSH
2652: LD_INT 0
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: PPUSH
2660: LD_INT 1
2662: NEG
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL 44039 0 5
2683: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2684: LD_ADDR_EXP 48
2688: PUSH
2689: LD_EXP 37
2693: PUSH
2694: LD_EXP 35
2698: PUSH
2699: LD_EXP 38
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 58
2736: PUSH
2737: EMPTY
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2876
// begin if GetBase ( i ) then
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 274
2762: IFFALSE 2766
// continue ;
2764: GO 2750
// d := GetDir ( i ) ;
2766: LD_ADDR_VAR 0 3
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL_OW 254
2780: ST_TO_ADDR
// if d < 3 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: LESS
2789: IFFALSE 2807
// d := d + 3 else
2791: LD_ADDR_VAR 0 3
2795: PUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 3
2803: PLUS
2804: ST_TO_ADDR
2805: GO 2821
// d := d - 3 ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 3
2819: MINUS
2820: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 8
2826: PPUSH
2827: LD_VAR 0 5
2831: PPUSH
2832: CALL_OW 380
// un := CreateHuman ;
2836: LD_ADDR_VAR 0 4
2840: PUSH
2841: CALL_OW 44
2845: ST_TO_ADDR
// SetDir ( un , d ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_VAR 0 3
2855: PPUSH
2856: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 52
// end ;
2874: GO 2750
2876: POP
2877: POP
// if Difficulty > 1 then
2878: LD_OWVAR 67
2882: PUSH
2883: LD_INT 1
2885: GREATER
2886: IFFALSE 3257
// begin ar_kamikadze := [ ] ;
2888: LD_ADDR_EXP 41
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2895: LD_INT 0
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: CALL_OW 380
// un := CreateHuman ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PPUSH
2928: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2932: LD_VAR 0 4
2936: PPUSH
2937: LD_INT 23
2939: PPUSH
2940: LD_INT 44
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 48
// ComCrawl ( un ) ;
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 137
// un := CreateHuman ;
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: CALL_OW 44
2968: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2981: LD_VAR 0 4
2985: PPUSH
2986: LD_INT 30
2988: PPUSH
2989: LD_INT 39
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 48
// ComCrawl ( un ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 17
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 380
// un := CreateHuman ;
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_INT 45
3052: PPUSH
3053: LD_INT 86
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// ComHold ( un ) ;
3063: LD_VAR 0 4
3067: PPUSH
3068: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3072: LD_ADDR_EXP 41
3076: PUSH
3077: LD_EXP 41
3081: PPUSH
3082: LD_EXP 41
3086: PUSH
3087: LD_INT 1
3089: PLUS
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
// un := CreateHuman ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: CALL_OW 44
3110: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3123: LD_VAR 0 4
3127: PPUSH
3128: LD_INT 60
3130: PPUSH
3131: LD_INT 85
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 48
// ComHold ( un ) ;
3141: LD_VAR 0 4
3145: PPUSH
3146: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3150: LD_ADDR_EXP 41
3154: PUSH
3155: LD_EXP 41
3159: PPUSH
3160: LD_EXP 41
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 4
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 222
3208: PPUSH
3209: LD_INT 166
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// ComHold ( un ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3228: LD_ADDR_EXP 41
3232: PUSH
3233: LD_EXP 41
3237: PPUSH
3238: LD_EXP 41
3242: PUSH
3243: LD_INT 1
3245: PLUS
3246: PPUSH
3247: LD_VAR 0 4
3251: PPUSH
3252: CALL_OW 1
3256: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3257: LD_ADDR_EXP 39
3261: PUSH
3262: EMPTY
3263: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 5
3274: PPUSH
3275: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING SecondCharsGal
3286: ST_TO_ADDR
// hc_face_number := 4 ;
3287: LD_ADDR_OWVAR 34
3291: PUSH
3292: LD_INT 4
3294: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3295: LD_ADDR_EXP 39
3299: PUSH
3300: LD_EXP 39
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 44
3312: PPUSH
3313: CALL_OW 1
3317: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3318: LD_INT 2
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3333: LD_ADDR_OWVAR 33
3337: PUSH
3338: LD_STRING SecondCharsGal
3340: ST_TO_ADDR
// hc_face_number := 15 ;
3341: LD_ADDR_OWVAR 34
3345: PUSH
3346: LD_INT 15
3348: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3349: LD_ADDR_EXP 39
3353: PUSH
3354: LD_EXP 39
3358: PPUSH
3359: LD_INT 2
3361: PPUSH
3362: CALL_OW 44
3366: PPUSH
3367: CALL_OW 1
3371: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3372: LD_INT 2
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_VAR 0 5
3382: PPUSH
3383: CALL_OW 380
// hc_gallery :=  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3395: LD_ADDR_EXP 39
3399: PUSH
3400: LD_EXP 39
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: CALL_OW 44
3412: PPUSH
3413: CALL_OW 1
3417: ST_TO_ADDR
// hc_sex := sex_male ;
3418: LD_ADDR_OWVAR 27
3422: PUSH
3423: LD_INT 1
3425: ST_TO_ADDR
// hc_class = 11 ;
3426: LD_ADDR_OWVAR 28
3430: PUSH
3431: LD_INT 11
3433: ST_TO_ADDR
// hc_gallery = sandar ;
3434: LD_ADDR_OWVAR 33
3438: PUSH
3439: LD_STRING sandar
3441: ST_TO_ADDR
// hc_face_number = 33 ;
3442: LD_ADDR_OWVAR 34
3446: PUSH
3447: LD_INT 33
3449: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3450: LD_ADDR_OWVAR 26
3454: PUSH
3455: LD_STRING Thabit Muhair Saliba
3457: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3458: LD_ADDR_OWVAR 31
3462: PUSH
3463: LD_INT 0
3465: PUSH
3466: LD_INT 0
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: ST_TO_ADDR
// Saliba = CreateHuman ;
3481: LD_ADDR_EXP 43
3485: PUSH
3486: CALL_OW 44
3490: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3491: LD_EXP 43
3495: PPUSH
3496: LD_INT 7
3498: PPUSH
3499: CALL_OW 52
// if gensher_active then
3503: LD_EXP 18
3507: IFFALSE 3534
// begin Gensher = NewCharacter ( Dietrich ) ;
3509: LD_ADDR_EXP 44
3513: PUSH
3514: LD_STRING Dietrich
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3522: LD_EXP 44
3526: PPUSH
3527: LD_INT 94
3529: PPUSH
3530: CALL_OW 52
// end ; InitHc ;
3534: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3538: LD_ADDR_EXP 40
3542: PUSH
3543: EMPTY
3544: ST_TO_ADDR
// for i = 1 to 4 do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 4
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3731
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3561: LD_INT 13
3563: PUSH
3564: LD_INT 14
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: PPUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 1
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 12
3603: ARRAY
3604: PPUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 27
3613: PUSH
3614: LD_INT 26
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: PPUSH
3634: LD_INT 60
3636: PPUSH
3637: LD_INT 100
3639: PPUSH
3640: CALL_OW 12
3644: PPUSH
3645: CALL 40640 0 5
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3659: LD_ADDR_EXP 40
3663: PUSH
3664: LD_EXP 40
3668: PPUSH
3669: LD_EXP 40
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: PPUSH
3678: LD_VAR 0 4
3682: PPUSH
3683: CALL_OW 1
3687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
3708: LD_VAR 0 4
3712: PPUSH
3713: LD_INT 124
3715: PPUSH
3716: LD_INT 141
3718: PPUSH
3719: LD_INT 6
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 50
// end ;
3729: GO 3558
3731: POP
3732: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3733: LD_ADDR_EXP 42
3737: PUSH
3738: EMPTY
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3994
// for i = 1 to 3 do
3782: LD_ADDR_VAR 0 2
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_INT 3
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3990
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3798: LD_INT 14
3800: PPUSH
3801: LD_INT 3
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ARRAY
3822: PPUSH
3823: LD_INT 1
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 25
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 26
3853: PUSH
3854: LD_INT 28
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: CALL_OW 12
3873: ARRAY
3874: PPUSH
3875: LD_INT 100
3877: PPUSH
3878: CALL 40640 0 5
// un := CreateVehicle ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: CALL_OW 45
3891: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3892: LD_ADDR_EXP 42
3896: PUSH
3897: LD_EXP 42
3901: PPUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_EXP 42
3911: PUSH
3912: LD_VAR 0 2
3916: ARRAY
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: CALL 41197 0 3
3935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 5
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_INT 20
3963: PUSH
3964: LD_INT 21
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: LD_VAR 0 2
3979: ARRAY
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ;
3988: GO 3795
3990: POP
3991: POP
3992: GO 3779
3994: POP
3995: POP
// InitHc ;
3996: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 10
4008: PPUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 0
4014: PPUSH
4015: CALL_OW 58
// end ;
4019: LD_VAR 0 1
4023: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4024: LD_EXP 41
4028: IFFALSE 4102
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin enable ;
4036: ENABLE
// for i in ar_kamikadze do
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_EXP 41
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4100
// if See ( 1 , i ) then
4050: LD_INT 1
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 292
4062: IFFALSE 4098
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 81
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PPUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 74
4093: PPUSH
4094: CALL_OW 115
4098: GO 4047
4100: POP
4101: POP
// end ;
4102: PPOPN 1
4104: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4105: LD_EXP 13
4109: IFFALSE 4426
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
4119: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4120: LD_INT 35
4122: PPUSH
4123: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4127: LD_INT 1
4129: PPUSH
4130: CALL 30103 0 1
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4120
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4140: LD_INT 1
4142: PPUSH
4143: LD_INT 14
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: LD_INT 32
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: PPUSH
4164: CALL 29742 0 2
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4175: LD_EXP 67
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 33
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 34
4196: PUSH
4197: LD_INT 32
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PPUSH
4208: CALL_OW 72
4212: IFFALSE 4168
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: LD_EXP 67
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: PPUSH
4228: LD_INT 33
4230: PUSH
4231: LD_INT 2
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 34
4240: PUSH
4241: LD_INT 32
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_INT 5
4268: PPUSH
4269: CALL_OW 469
4273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4274: LD_INT 35
4276: PPUSH
4277: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4281: LD_ADDR_VAR 0 4
4285: PUSH
4286: LD_INT 5
4288: PPUSH
4289: CALL_OW 469
4293: ST_TO_ADDR
// tmp := 100 ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 100
4301: ST_TO_ADDR
// if pos then
4302: LD_VAR 0 4
4306: IFFALSE 4346
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 20
4336: PPUSH
4337: CALL 41691 0 4
4341: PUSH
4342: LD_INT 4
4344: ARRAY
4345: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4346: LD_VAR 0 4
4350: PUSH
4351: LD_EXP 14
4355: NOT
4356: AND
4357: PUSH
4358: LD_VAR 0 3
4362: PUSH
4363: LD_INT 10
4365: LESS
4366: AND
4367: IFFALSE 4274
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4369: LD_VAR 0 2
4373: PPUSH
4374: LD_VAR 0 4
4378: PUSH
4379: LD_INT 1
4381: ARRAY
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 2
4390: ARRAY
4391: PPUSH
4392: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 198
4403: PPUSH
4404: LD_INT 113
4406: PPUSH
4407: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 124
4418: PPUSH
4419: LD_INT 7
4421: PPUSH
4422: CALL_OW 171
// end ;
4426: PPOPN 4
4428: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4429: LD_EXP 6
4433: IFFALSE 6978
4435: GO 4437
4437: DISABLE
4438: LD_INT 0
4440: PPUSH
4441: PPUSH
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4448: LD_ADDR_VAR 0 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: ST_TO_ADDR
// coords := [ ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4480: LD_ADDR_VAR 0 6
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 0
4490: PUSH
4491: LD_INT 0
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 14
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 28
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 25
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: LD_INT 28
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 14
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: LD_INT 29
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PPUSH
4608: CALL 29742 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
4612: LD_INT 21000
4614: PUSH
4615: LD_INT 19600
4617: PUSH
4618: LD_INT 18900
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PPUSH
4632: CALL_OW 67
// InitHc ;
4636: CALL_OW 19
// InitUc ;
4640: CALL_OW 18
// uc_side := 2 ;
4644: LD_ADDR_OWVAR 20
4648: PUSH
4649: LD_INT 2
4651: ST_TO_ADDR
// uc_nation := 2 ;
4652: LD_ADDR_OWVAR 21
4656: PUSH
4657: LD_INT 2
4659: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: EMPTY
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_EXP 67
4699: PUSH
4700: LD_INT 1
4702: ARRAY
4703: PUSH
4704: LD_INT 34
4706: PUSH
4707: LD_INT 32
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: DIFF
4719: PPUSH
4720: CALL_OW 1
4724: ST_TO_ADDR
// for i = 1 to Difficulty do
4725: LD_ADDR_VAR 0 1
4729: PUSH
4730: DOUBLE
4731: LD_INT 1
4733: DEC
4734: ST_TO_ADDR
4735: LD_OWVAR 67
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4863
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4743: LD_INT 13
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 5
4751: PPUSH
4752: LD_INT 29
4754: PPUSH
4755: LD_INT 100
4757: PPUSH
4758: CALL 40640 0 5
// un := CreateVehicle ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: CALL_OW 45
4771: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_VAR 0 3
4781: PPUSH
4782: LD_INT 1
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PUSH
4794: LD_INT 1
4796: PLUS
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_VAR 0 2
4806: PPUSH
4807: CALL 41197 0 3
4811: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 16
4831: PPUSH
4832: LD_INT 0
4834: PPUSH
4835: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 51
4846: PPUSH
4847: LD_INT 10
4849: PPUSH
4850: CALL_OW 111
// wait ( 0 0$2 ) ;
4854: LD_INT 70
4856: PPUSH
4857: CALL_OW 67
// end ;
4861: GO 4740
4863: POP
4864: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 51
4872: PUSH
4873: LD_INT 24
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 75
4882: PUSH
4883: LD_INT 90
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4894: LD_INT 1
4896: PPUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 5
4910: PPUSH
4911: LD_VAR 0 6
4915: PPUSH
4916: CALL 29988 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_INT 2
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_OWVAR 67
4948: ARRAY
4949: PUSH
4950: FOR_TO
4951: IFFALSE 5035
// begin PrepareHuman ( false , 17 , skill ) ;
4953: LD_INT 0
4955: PPUSH
4956: LD_INT 17
4958: PPUSH
4959: LD_VAR 0 4
4963: PPUSH
4964: CALL_OW 380
// un := CreateHuman ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_VAR 0 3
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 2
4998: ARRAY
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: CALL 41197 0 3
5017: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5018: LD_VAR 0 2
5022: PPUSH
5023: LD_INT 13
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4950
5035: POP
5036: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 2
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PUSH
5061: LD_OWVAR 67
5065: ARRAY
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5171
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5070: LD_INT 0
5072: PPUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 12
5093: ARRAY
5094: PPUSH
5095: LD_VAR 0 4
5099: PPUSH
5100: CALL_OW 380
// un := CreateHuman ;
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: CALL_OW 44
5113: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 41197 0 3
5153: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5154: LD_VAR 0 2
5158: PPUSH
5159: LD_INT 13
5161: PPUSH
5162: LD_INT 0
5164: PPUSH
5165: CALL_OW 49
// end ;
5169: GO 5067
5171: POP
5172: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_INT 67
5180: PUSH
5181: LD_INT 112
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 130
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5202: LD_INT 2
5204: PPUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 5
5218: PPUSH
5219: LD_VAR 0 6
5223: PPUSH
5224: CALL 29988 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 1
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_OWVAR 67
5256: ARRAY
5257: PUSH
5258: FOR_TO
5259: IFFALSE 5343
// begin PrepareHuman ( false , 17 , skill ) ;
5261: LD_INT 0
5263: PPUSH
5264: LD_INT 17
5266: PPUSH
5267: LD_VAR 0 4
5271: PPUSH
5272: CALL_OW 380
// un := CreateHuman ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: CALL_OW 44
5285: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_VAR 0 3
5295: PPUSH
5296: LD_INT 3
5298: PUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 3
5306: ARRAY
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: LD_VAR 0 2
5320: PPUSH
5321: CALL 41197 0 3
5325: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5326: LD_VAR 0 2
5330: PPUSH
5331: LD_INT 14
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// end ;
5341: GO 5258
5343: POP
5344: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 148
5352: PUSH
5353: LD_INT 158
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 148
5362: PUSH
5363: LD_INT 158
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5374: LD_INT 3
5376: PPUSH
5377: LD_VAR 0 3
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PPUSH
5391: LD_VAR 0 6
5395: PPUSH
5396: CALL 29988 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5639
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5433: LD_INT 14
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: LD_INT 1
5441: PUSH
5442: LD_INT 5
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: CALL_OW 12
5459: ARRAY
5460: PPUSH
5461: LD_INT 27
5463: PUSH
5464: LD_INT 26
5466: PUSH
5467: LD_INT 28
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 3
5480: PPUSH
5481: CALL_OW 12
5485: ARRAY
5486: PPUSH
5487: LD_INT 100
5489: PPUSH
5490: CALL 40640 0 5
// un := CreateVehicle ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: CALL_OW 45
5503: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_INT 4
5516: PUSH
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 4
5524: ARRAY
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: LD_VAR 0 2
5538: PPUSH
5539: CALL 41197 0 3
5543: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5544: LD_VAR 0 2
5548: PPUSH
5549: LD_INT 5
5551: PPUSH
5552: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5556: LD_VAR 0 2
5560: PPUSH
5561: LD_INT 15
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 49
// if GetControl ( un ) = control_manual then
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 263
5580: PUSH
5581: LD_INT 1
5583: EQUAL
5584: IFFALSE 5615
// begin PrepareHuman ( false , 3 , skill ) ;
5586: LD_INT 0
5588: PPUSH
5589: LD_INT 3
5591: PPUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5601: CALL_OW 44
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_INT 179
5622: PPUSH
5623: LD_INT 135
5625: PPUSH
5626: CALL_OW 111
// wait ( 0 0$2 ) ;
5630: LD_INT 70
5632: PPUSH
5633: CALL_OW 67
// end ;
5637: GO 5430
5639: POP
5640: POP
// vc_chassis := 15 ;
5641: LD_ADDR_OWVAR 37
5645: PUSH
5646: LD_INT 15
5648: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 4
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_INT 4
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: CALL_OW 45
5683: PPUSH
5684: CALL 41197 0 3
5688: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 4
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 3
5702: PUSH
5703: LD_INT 4
5705: ARRAY
5706: ARRAY
5707: PPUSH
5708: LD_INT 15
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5718: LD_INT 0
5720: PPUSH
5721: LD_INT 11
5723: PPUSH
5724: LD_VAR 0 4
5728: PPUSH
5729: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_VAR 0 3
5742: PPUSH
5743: LD_INT 4
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_INT 4
5753: ARRAY
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 44
5767: PPUSH
5768: CALL 41197 0 3
5772: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5773: LD_VAR 0 3
5777: PUSH
5778: LD_INT 4
5780: ARRAY
5781: PUSH
5782: LD_VAR 0 3
5786: PUSH
5787: LD_INT 4
5789: ARRAY
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 4
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 4
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: MINUS
5813: ARRAY
5814: PPUSH
5815: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5819: LD_ADDR_VAR 0 5
5823: PUSH
5824: LD_INT 148
5826: PUSH
5827: LD_INT 140
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5837: LD_INT 1
5839: PPUSH
5840: LD_VAR 0 3
5844: PUSH
5845: LD_INT 4
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 5
5853: PPUSH
5854: LD_VAR 0 6
5858: PPUSH
5859: CALL 29988 0 4
// if gensher_active then
5863: LD_EXP 18
5867: IFFALSE 6220
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5869: LD_EXP 44
5873: PPUSH
5874: LD_STRING D10-Diet-1
5876: PPUSH
5877: CALL_OW 94
// for i = 1 to 2 do
5881: LD_ADDR_VAR 0 1
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 2
5893: PUSH
5894: FOR_TO
5895: IFFALSE 6017
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5897: LD_INT 13
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: LD_INT 5
5905: PPUSH
5906: LD_INT 29
5908: PPUSH
5909: LD_INT 100
5911: PPUSH
5912: CALL 40640 0 5
// un := CreateVehicle ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: CALL_OW 45
5925: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 5
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: CALL 41197 0 3
5965: ST_TO_ADDR
// SetDir ( un , 0 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 23
5985: PPUSH
5986: LD_INT 0
5988: PPUSH
5989: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
5993: LD_VAR 0 2
5997: PPUSH
5998: LD_INT 85
6000: PPUSH
6001: LD_INT 152
6003: PPUSH
6004: CALL_OW 111
// wait ( 0 0$2 ) ;
6008: LD_INT 70
6010: PPUSH
6011: CALL_OW 67
// end ;
6015: GO 5894
6017: POP
6018: POP
// for i = 1 to 3 do
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_INT 3
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6174
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6035: LD_INT 14
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: LD_INT 5
6043: PPUSH
6044: LD_INT 27
6046: PUSH
6047: LD_INT 28
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 2
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 40640 0 5
// un := CreateVehicle ;
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 5
6095: PUSH
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 5
6103: ARRAY
6104: PUSH
6105: LD_INT 1
6107: PLUS
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL 41197 0 3
6122: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_INT 0
6130: PPUSH
6131: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 23
6142: PPUSH
6143: LD_INT 0
6145: PPUSH
6146: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: LD_INT 85
6157: PPUSH
6158: LD_INT 152
6160: PPUSH
6161: CALL_OW 111
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// end ;
6172: GO 6032
6174: POP
6175: POP
// coords := [ [ 97 , 143 ] ] ;
6176: LD_ADDR_VAR 0 5
6180: PUSH
6181: LD_INT 97
6183: PUSH
6184: LD_INT 143
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6194: LD_INT 1
6196: PPUSH
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 5
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 5
6210: PPUSH
6211: LD_VAR 0 6
6215: PPUSH
6216: CALL 29988 0 4
// end ; Wait ( 10 10$00 ) ;
6220: LD_INT 21000
6222: PPUSH
6223: CALL_OW 67
// tmp := [ ] ;
6227: LD_ADDR_VAR 0 3
6231: PUSH
6232: EMPTY
6233: ST_TO_ADDR
// w := 1 ;
6234: LD_ADDR_VAR 0 7
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// repeat tmp := [ ] ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: EMPTY
6248: ST_TO_ADDR
// if w mod 4 = 0 then
6249: LD_VAR 0 7
6253: PUSH
6254: LD_INT 4
6256: MOD
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: IFFALSE 6348
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6263: LD_ADDR_VAR 0 8
6267: PUSH
6268: LD_INT 11
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 11
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 24
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 11
6306: PUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 24
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 11
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: ST_TO_ADDR
6346: GO 6450
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6348: LD_ADDR_VAR 0 8
6352: PUSH
6353: LD_INT 14
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 28
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 14
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 14
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 28
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 14
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 29
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// if w mod 3 = 0 then
6450: LD_VAR 0 7
6454: PUSH
6455: LD_INT 3
6457: MOD
6458: PUSH
6459: LD_INT 0
6461: EQUAL
6462: IFFALSE 6538
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6464: LD_ADDR_VAR 0 8
6468: PUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: LD_INT 1
6476: PUSH
6477: LD_VAR 0 8
6481: PUSH
6482: LD_VAR 0 1
6486: ARRAY
6487: PUSH
6488: LD_INT 1
6490: PLUS
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: LD_INT 14
6498: PUSH
6499: LD_INT 1
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 25
6507: PUSH
6508: LD_INT 28
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 12
6525: ARRAY
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL 41197 0 3
6537: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6538: LD_INT 1
6540: PPUSH
6541: LD_VAR 0 8
6545: PPUSH
6546: CALL 29742 0 2
// if GetSide ( ar_dep_w ) = 2 then
6550: LD_INT 45
6552: PPUSH
6553: CALL_OW 255
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6646
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6563: LD_ADDR_VAR 0 8
6567: PUSH
6568: LD_INT 14
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 28
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 14
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 27
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 14
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 27
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6627: LD_INT 2
6629: PPUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL 29742 0 2
// wait ( 0 0$50 ) ;
6639: LD_INT 1750
6641: PPUSH
6642: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6653: LD_EXP 67
6657: PUSH
6658: LD_INT 1
6660: ARRAY
6661: PPUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: LD_INT 32
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 72
6683: PUSH
6684: LD_INT 4
6686: GREATEREQUAL
6687: IFFALSE 6646
// wait ( 0 0$10 ) ;
6689: LD_INT 350
6691: PPUSH
6692: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_EXP 67
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: LD_INT 3
6712: PUSH
6713: LD_INT 34
6715: PUSH
6716: LD_INT 32
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6732: LD_INT 100
6734: PPUSH
6735: CALL_OW 13
6739: PUSH
6740: LD_INT 50
6742: LESS
6743: IFFALSE 6776
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6745: LD_ADDR_VAR 0 5
6749: PUSH
6750: LD_INT 55
6752: PUSH
6753: LD_INT 7
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 75
6762: PUSH
6763: LD_INT 90
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 6805
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 128
6783: PUSH
6784: LD_INT 94
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 180
6793: PUSH
6794: LD_INT 135
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if w mod 4 = 0 then
6805: LD_VAR 0 7
6809: PUSH
6810: LD_INT 4
6812: MOD
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: IFFALSE 6848
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6819: LD_ADDR_VAR 0 5
6823: PUSH
6824: LD_INT 91
6826: PUSH
6827: LD_INT 58
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 117
6836: PUSH
6837: LD_INT 107
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6848: LD_INT 1
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: LD_VAR 0 5
6860: PPUSH
6861: LD_VAR 0 6
6865: PPUSH
6866: CALL 29988 0 4
// if mc_vehicles [ 2 ] then
6870: LD_EXP 67
6874: PUSH
6875: LD_INT 2
6877: ARRAY
6878: IFFALSE 6914
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_EXP 67
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_INT 73
6894: PUSH
6895: LD_INT 115
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PPUSH
6905: LD_VAR 0 6
6909: PPUSH
6910: CALL 29988 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
6914: LD_INT 19950
6916: PPUSH
6917: LD_INT 26250
6919: PPUSH
6920: CALL_OW 12
6924: PPUSH
6925: CALL_OW 67
// w := w + 1 ;
6929: LD_ADDR_VAR 0 7
6933: PUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_INT 1
6941: PLUS
6942: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
6943: LD_INT 94
6945: PPUSH
6946: CALL_OW 301
6950: PUSH
6951: LD_EXP 48
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PPUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 72
6974: NOT
6975: OR
6976: IFFALSE 6242
// end ;
6978: PPOPN 8
6980: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
6981: LD_INT 69
6983: IFFALSE 7358
6985: GO 6987
6987: DISABLE
6988: LD_INT 0
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
// begin enable ;
6994: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
6995: LD_INT 35
6997: PPUSH
6998: LD_INT 1190
7000: PPUSH
7001: CALL_OW 12
7005: PPUSH
7006: CALL_OW 67
// tmp := [ ] ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: EMPTY
7016: ST_TO_ADDR
// uc_side := 8 ;
7017: LD_ADDR_OWVAR 20
7021: PUSH
7022: LD_INT 8
7024: ST_TO_ADDR
// uc_nation := 2 ;
7025: LD_ADDR_OWVAR 21
7029: PUSH
7030: LD_INT 2
7032: ST_TO_ADDR
// InitHc ;
7033: CALL_OW 19
// for i = 1 to 3 do
7037: LD_ADDR_VAR 0 1
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_INT 3
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7178
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 12
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: LD_INT 27
7083: PUSH
7084: LD_INT 28
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 12
7101: ARRAY
7102: PPUSH
7103: LD_INT 100
7105: PPUSH
7106: CALL 40640 0 5
// un := CreateVehicle ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: CALL_OW 45
7119: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 15
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 2
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 1
7175: ST_TO_ADDR
// end ;
7176: GO 7050
7178: POP
7179: POP
// for i = 1 to 4 do
7180: LD_ADDR_VAR 0 1
7184: PUSH
7185: DOUBLE
7186: LD_INT 1
7188: DEC
7189: ST_TO_ADDR
7190: LD_INT 4
7192: PUSH
7193: FOR_TO
7194: IFFALSE 7273
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_INT 4
7204: PPUSH
7205: CALL_OW 12
7209: PPUSH
7210: LD_INT 6
7212: PPUSH
7213: CALL_OW 380
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_INT 15
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7242: LD_ADDR_VAR 0 2
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 1
7270: ST_TO_ADDR
// end ;
7271: GO 7193
7273: POP
7274: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_INT 210
7282: PPUSH
7283: LD_INT 177
7285: PPUSH
7286: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7290: LD_ADDR_VAR 0 4
7294: PUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 70
7312: ST_TO_ADDR
// if x then
7313: LD_VAR 0 4
7317: IFFALSE 7345
// for i in x do
7319: LD_ADDR_VAR 0 1
7323: PUSH
7324: LD_VAR 0 4
7328: PUSH
7329: FOR_IN
7330: IFFALSE 7343
// RemoveUnit ( i ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 64
7341: GO 7329
7343: POP
7344: POP
// wait ( 0 0$3 ) ;
7345: LD_INT 105
7347: PPUSH
7348: CALL_OW 67
// until tmp ;
7352: LD_VAR 0 2
7356: IFFALSE 7275
// end ; end_of_file
7358: PPOPN 4
7360: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// InGameOn ;
7369: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7373: LD_EXP 21
7377: PPUSH
7378: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7382: LD_ADDR_VAR 0 2
7386: PUSH
7387: LD_INT 22
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7416: LD_ADDR_VAR 0 4
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 1
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 34
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 69
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: ST_TO_ADDR
// for i = 1 to tmp do
7454: LD_ADDR_VAR 0 6
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_VAR 0 2
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7517
// begin if i = 5 then
7472: LD_VAR 0 6
7476: PUSH
7477: LD_INT 5
7479: EQUAL
7480: IFFALSE 7484
// break ;
7482: GO 7517
// sols := Replace ( sols , i , tmp [ i ] ) ;
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 5
7493: PPUSH
7494: LD_VAR 0 6
7498: PPUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_VAR 0 6
7508: ARRAY
7509: PPUSH
7510: CALL_OW 1
7514: ST_TO_ADDR
// end ;
7515: GO 7469
7517: POP
7518: POP
// tmp := ar_force_tmp ;
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_EXP 39
7528: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PPUSH
7538: LD_INT 108
7540: PPUSH
7541: LD_INT 139
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PPUSH
7578: LD_INT 114
7580: PPUSH
7581: LD_INT 132
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7591: LD_VAR 0 2
7595: PUSH
7596: LD_INT 3
7598: ARRAY
7599: PPUSH
7600: LD_INT 115
7602: PPUSH
7603: LD_INT 132
7605: PPUSH
7606: LD_INT 0
7608: PPUSH
7609: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7613: LD_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 3
7629: ARRAY
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7639: LD_VAR 0 4
7643: PPUSH
7644: LD_INT 83
7646: PPUSH
7647: LD_INT 123
7649: PPUSH
7650: CALL_OW 111
// Wait ( 0 0$01 ) ;
7654: LD_INT 35
7656: PPUSH
7657: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7661: LD_INT 90
7663: PPUSH
7664: LD_INT 144
7666: PPUSH
7667: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_INT 88
7678: PPUSH
7679: LD_INT 129
7681: PPUSH
7682: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7686: LD_ADDR_VAR 0 3
7690: PUSH
7691: LD_INT 92
7693: PUSH
7694: LD_INT 131
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 88
7703: PUSH
7704: LD_INT 127
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 91
7713: PUSH
7714: LD_INT 132
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 92
7723: PUSH
7724: LD_INT 134
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// for i = 1 to sols do
7737: LD_ADDR_VAR 0 6
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_VAR 0 5
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7826
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7755: LD_VAR 0 5
7759: PUSH
7760: LD_VAR 0 6
7764: ARRAY
7765: PPUSH
7766: LD_VAR 0 3
7770: PUSH
7771: LD_VAR 0 6
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 3
7785: PUSH
7786: LD_VAR 0 6
7790: ARRAY
7791: PUSH
7792: LD_INT 2
7794: ARRAY
7795: PPUSH
7796: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
7800: LD_VAR 0 5
7804: PUSH
7805: LD_VAR 0 6
7809: ARRAY
7810: PPUSH
7811: CALL_OW 197
// AddComHold ( sols ) ;
7815: LD_VAR 0 5
7819: PPUSH
7820: CALL_OW 200
// end ;
7824: GO 7752
7826: POP
7827: POP
// repeat wait ( 0 0$1 ) ;
7828: LD_INT 35
7830: PPUSH
7831: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
7835: LD_VAR 0 5
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: LD_INT 92
7846: PPUSH
7847: LD_INT 131
7849: PPUSH
7850: CALL_OW 297
7854: PUSH
7855: LD_INT 4
7857: LESS
7858: IFFALSE 7828
// CenterOnXY ( 96 , 139 ) ;
7860: LD_INT 96
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 84
// wait ( 0 0$3 ) ;
7870: LD_INT 105
7872: PPUSH
7873: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
7877: LD_INT 111
7879: PPUSH
7880: LD_INT 135
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 25
7888: NEG
7889: PPUSH
7890: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 2
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PPUSH
7912: CALL_OW 250
7916: PUSH
7917: LD_INT 3
7919: PLUS
7920: PPUSH
7921: LD_VAR 0 2
7925: PUSH
7926: LD_INT 1
7928: ARRAY
7929: PPUSH
7930: CALL_OW 251
7934: PPUSH
7935: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 3
7946: ARRAY
7947: PPUSH
7948: LD_INT 7
7950: PPUSH
7951: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
7955: LD_VAR 0 2
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PPUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PPUSH
7973: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
7977: LD_INT 35
7979: PPUSH
7980: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 2
8000: ARRAY
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 5
8009: LESS
8010: IFFALSE 7977
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8012: LD_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 2
8028: ARRAY
8029: PPUSH
8030: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: LD_STRING D1a-Merc1-1
8045: PPUSH
8046: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PPUSH
8059: LD_STRING D1a-FMerc2-1
8061: PPUSH
8062: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PPUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8088: LD_VAR 0 2
8092: PUSH
8093: LD_INT 1
8095: ARRAY
8096: PPUSH
8097: LD_INT 500
8099: PPUSH
8100: CALL_OW 234
// wait ( 0 0$2 ) ;
8104: LD_INT 70
8106: PPUSH
8107: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8111: LD_VAR 0 2
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_INT 2
8122: PPUSH
8123: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8127: LD_INT 10
8129: PPUSH
8130: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_STRING D1a-Merc1-2
8145: PPUSH
8146: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8150: LD_INT 7
8152: PPUSH
8153: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: ARRAY
8165: PPUSH
8166: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8170: LD_VAR 0 2
8174: PUSH
8175: LD_INT 2
8177: ARRAY
8178: PPUSH
8179: LD_INT 10
8181: PPUSH
8182: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_STRING D1a-FMerc2-2
8197: PPUSH
8198: CALL_OW 88
// wait ( 0 0$1 ) ;
8202: LD_INT 35
8204: PPUSH
8205: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8209: LD_INT 7
8211: PPUSH
8212: CALL_OW 85
// wait ( 0 0$2 ) ;
8216: LD_INT 70
8218: PPUSH
8219: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8223: LD_EXP 43
8227: PPUSH
8228: LD_STRING D1a-Saliba-1
8230: PPUSH
8231: CALL_OW 91
// KillUnit ( Saliba ) ;
8235: LD_EXP 43
8239: PPUSH
8240: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 3
8251: ARRAY
8252: PPUSH
8253: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8257: LD_EXP 21
8261: PPUSH
8262: CALL_OW 85
// wait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 67
// InGameOff ;
8273: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8277: LD_STRING M1
8279: PPUSH
8280: CALL_OW 337
// game_speed := 4 ;
8284: LD_ADDR_OWVAR 65
8288: PUSH
8289: LD_INT 4
8291: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8292: LD_INT 111
8294: PPUSH
8295: LD_INT 135
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: CALL_OW 331
// SaveForQuickRestart ;
8305: CALL_OW 22
// ar_run := true ;
8309: LD_ADDR_EXP 5
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8317: LD_INT 35
8319: PPUSH
8320: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8324: LD_INT 22
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 91
8336: PUSH
8337: LD_INT 7
8339: PUSH
8340: LD_INT 10
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 7
8359: PPUSH
8360: CALL_OW 256
8364: PUSH
8365: LD_INT 999
8367: LESS
8368: OR
8369: IFFALSE 8317
// if GetSide ( ar_dep_s ) = 2 then
8371: LD_INT 7
8373: PPUSH
8374: CALL_OW 255
8378: PUSH
8379: LD_INT 2
8381: EQUAL
8382: IFFALSE 8394
// SetSide ( ar_dep_s , 1 ) ;
8384: LD_INT 7
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 235
// end ;
8394: LD_VAR 0 1
8398: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8399: LD_EXP 5
8403: IFFALSE 8763
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_EXP 39
8422: PUSH
8423: LD_EXP 36
8427: PPUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ADD
8461: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_INT 5
8469: PPUSH
8470: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8474: LD_INT 5
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 343
// k := 1 ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// for i in tmp do
8492: LD_ADDR_VAR 0 1
8496: PUSH
8497: LD_VAR 0 2
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8588
// begin if IsInUnit ( i ) then
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 310
8514: IFFALSE 8525
// ComExitBuilding ( i ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 122
// if GetClass ( i ) = 3 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 257
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8574
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_EXP 40
8549: PUSH
8550: LD_VAR 0 3
8554: ARRAY
8555: PPUSH
8556: CALL_OW 180
// k := k + 1 ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 3
8569: PUSH
8570: LD_INT 1
8572: PLUS
8573: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8574: LD_VAR 0 1
8578: PPUSH
8579: LD_INT 10
8581: PPUSH
8582: CALL_OW 173
// end ;
8586: GO 8502
8588: POP
8589: POP
// ar_patrol := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8598: LD_INT 10
8600: PPUSH
8601: CALL_OW 67
// for i in tmp do
8605: LD_ADDR_VAR 0 1
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_IN
8616: IFFALSE 8644
// if not HasTask ( i ) then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 314
8627: NOT
8628: IFFALSE 8642
// ComMoveToArea ( i , escape_area ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 10
8637: PPUSH
8638: CALL_OW 113
8642: GO 8615
8644: POP
8645: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 95
8658: PUSH
8659: LD_INT 10
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// if k then
8671: LD_VAR 0 3
8675: IFFALSE 8744
// for i in k do
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8742
// begin if IsInUnit ( i ) then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 310
8699: IFFALSE 8715
// RemoveUnit ( IsInUnit ( i ) ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 310
8710: PPUSH
8711: CALL_OW 64
// RemoveUnit ( i ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 64
// tmp := tmp diff i ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 2
8733: PUSH
8734: LD_VAR 0 1
8738: DIFF
8739: ST_TO_ADDR
// end ;
8740: GO 8687
8742: POP
8743: POP
// until tmp = [ ] ;
8744: LD_VAR 0 2
8748: PUSH
8749: EMPTY
8750: EQUAL
8751: IFFALSE 8598
// ChangeSideFog ( 5 , 5 ) ;
8753: LD_INT 5
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 343
// end ;
8763: PPOPN 3
8765: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
8766: LD_EXP 7
8770: IFFALSE 9060
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// begin uc_side := 2 ;
8780: LD_ADDR_OWVAR 20
8784: PUSH
8785: LD_INT 2
8787: ST_TO_ADDR
// uc_nation := 2 ;
8788: LD_ADDR_OWVAR 21
8792: PUSH
8793: LD_INT 2
8795: ST_TO_ADDR
// InitHc ;
8796: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_INT 6
8808: PPUSH
8809: CALL_OW 380
// un := CreateHuman ;
8813: LD_ADDR_VAR 0 2
8817: PUSH
8818: CALL_OW 44
8822: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
8823: LD_INT 14
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_INT 27
8834: PPUSH
8835: LD_INT 98
8837: PPUSH
8838: CALL 40640 0 5
// veh := CreateVehicle ;
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: CALL_OW 45
8851: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 179
8871: PPUSH
8872: LD_INT 135
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 126
8903: PPUSH
8904: LD_INT 133
8906: PPUSH
8907: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
8911: LD_INT 10
8913: PPUSH
8914: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 3
8925: PPUSH
8926: CALL_OW 292
8930: PUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 9
8946: LESS
8947: OR
8948: IFFALSE 8911
// ComHold ( veh ) ;
8950: LD_VAR 0 3
8954: PPUSH
8955: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: LD_STRING D2aa-Ar1-1
8966: PPUSH
8967: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 177
8978: PPUSH
8979: LD_INT 96
8981: PPUSH
8982: CALL_OW 111
// AddComExitVehicle ( un ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8995: LD_INT 35
8997: PPUSH
8998: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 69
9009: PPUSH
9010: CALL_OW 296
9014: PUSH
9015: LD_INT 15
9017: LESS
9018: IFFALSE 8995
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9020: LD_ADDR_EXP 48
9024: PUSH
9025: LD_EXP 48
9029: PPUSH
9030: LD_INT 3
9032: PUSH
9033: LD_EXP 48
9037: PUSH
9038: LD_INT 3
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: PLUS
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL 41197 0 3
9059: ST_TO_ADDR
// end ;
9060: PPOPN 3
9062: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9063: LD_INT 7
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_INT 7
9077: PPUSH
9078: CALL_OW 301
9082: OR
9083: IFFALSE 11507
9085: GO 9087
9087: DISABLE
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_EXP 36
9101: PPUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 3
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: PUSH
9117: FOR_IN
9118: IFFALSE 9134
// SetSide ( i , 1 ) ;
9120: LD_VAR 0 1
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 235
9132: GO 9117
9134: POP
9135: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 46
9143: PUSH
9144: LD_INT 41
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 50
9153: PUSH
9154: LD_INT 25
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 57
9163: PUSH
9164: LD_INT 75
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 75
9173: PUSH
9174: LD_INT 89
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 51
9183: PUSH
9184: LD_INT 45
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 95
9193: PUSH
9194: LD_INT 95
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 77
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 101
9213: PUSH
9214: LD_INT 76
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 118
9223: PUSH
9224: LD_INT 81
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 139
9233: PUSH
9234: LD_INT 97
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 129
9243: PUSH
9244: LD_INT 114
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 154
9253: PUSH
9254: LD_INT 111
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// base_captured := true ;
9275: LD_ADDR_EXP 6
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// DialogueOn ;
9283: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9287: LD_EXP 21
9291: PPUSH
9292: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9296: LD_EXP 21
9300: PPUSH
9301: LD_STRING D2-JMM-1
9303: PPUSH
9304: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9308: LD_EXP 30
9312: PPUSH
9313: LD_STRING D2-Pow-1
9315: PPUSH
9316: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9320: LD_EXP 21
9324: PPUSH
9325: LD_STRING D2-JMM-2
9327: PPUSH
9328: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9332: LD_EXP 30
9336: PPUSH
9337: LD_STRING D2-Pow-2
9339: PPUSH
9340: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9344: LD_EXP 21
9348: PPUSH
9349: LD_STRING D2-JMM-3
9351: PPUSH
9352: CALL_OW 88
// DialogueOff ;
9356: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9360: LD_STRING M2
9362: PPUSH
9363: CALL_OW 337
// Wait ( 0 0$2 ) ;
9367: LD_INT 70
9369: PPUSH
9370: CALL_OW 67
// if IsOk ( Gary ) then
9374: LD_EXP 32
9378: PPUSH
9379: CALL_OW 302
9383: IFFALSE 9397
// Say ( Gary , D2a-Gary-1 ) ;
9385: LD_EXP 32
9389: PPUSH
9390: LD_STRING D2a-Gary-1
9392: PPUSH
9393: CALL_OW 88
// if IsOk ( Bobby ) then
9397: LD_EXP 24
9401: PPUSH
9402: CALL_OW 302
9406: IFFALSE 9420
// Say ( Bobby , D2a-Bobby-1 ) ;
9408: LD_EXP 24
9412: PPUSH
9413: LD_STRING D2a-Bobby-1
9415: PPUSH
9416: CALL_OW 88
// if IsOk ( Cyrus ) then
9420: LD_EXP 25
9424: PPUSH
9425: CALL_OW 302
9429: IFFALSE 9443
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING D2a-Cyrus-1
9438: PPUSH
9439: CALL_OW 88
// if IsOk ( Lisa ) then
9443: LD_EXP 22
9447: PPUSH
9448: CALL_OW 302
9452: IFFALSE 9466
// Say ( Lisa , D2a-Lisa-1 ) ;
9454: LD_EXP 22
9458: PPUSH
9459: LD_STRING D2a-Lisa-1
9461: PPUSH
9462: CALL_OW 88
// if IsOk ( Frank ) then
9466: LD_EXP 33
9470: PPUSH
9471: CALL_OW 302
9475: IFFALSE 9489
// Say ( Frank , D2a-Frank-1 ) ;
9477: LD_EXP 33
9481: PPUSH
9482: LD_STRING D2a-Frank-1
9484: PPUSH
9485: CALL_OW 88
// if IsOk ( Cornel ) then
9489: LD_EXP 31
9493: PPUSH
9494: CALL_OW 302
9498: IFFALSE 9512
// Say ( Cornel , D2a-Corn-1 ) ;
9500: LD_EXP 31
9504: PPUSH
9505: LD_STRING D2a-Corn-1
9507: PPUSH
9508: CALL_OW 88
// if IsOk ( Donaldson ) then
9512: LD_EXP 23
9516: PPUSH
9517: CALL_OW 302
9521: IFFALSE 9535
// Say ( Donaldson , D2a-Don-1 ) ;
9523: LD_EXP 23
9527: PPUSH
9528: LD_STRING D2a-Don-1
9530: PPUSH
9531: CALL_OW 88
// if IsOk ( Brown ) then
9535: LD_EXP 27
9539: PPUSH
9540: CALL_OW 302
9544: IFFALSE 9558
// Say ( Brown , D2a-Brown-1 ) ;
9546: LD_EXP 27
9550: PPUSH
9551: LD_STRING D2a-Brown-1
9553: PPUSH
9554: CALL_OW 88
// Wait ( 0 0$30 ) ;
9558: LD_INT 1050
9560: PPUSH
9561: CALL_OW 67
// if IsOk ( Frank ) then
9565: LD_EXP 33
9569: PPUSH
9570: CALL_OW 302
9574: IFFALSE 9840
// begin DialogueOn ;
9576: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9580: LD_EXP 21
9584: PUSH
9585: LD_EXP 33
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9598: LD_EXP 33
9602: PPUSH
9603: LD_STRING D3F-Frank-1
9605: PPUSH
9606: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9610: LD_EXP 21
9614: PPUSH
9615: LD_STRING D3F-JMM-1
9617: PPUSH
9618: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9622: LD_EXP 33
9626: PPUSH
9627: LD_STRING D3F-Frank-2
9629: PPUSH
9630: CALL_OW 88
// case Query ( QFrank ) of 1 :
9634: LD_STRING QFrank
9636: PPUSH
9637: CALL_OW 97
9641: PUSH
9642: LD_INT 1
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9673
9650: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9651: LD_EXP 21
9655: PPUSH
9656: LD_STRING D3Fa-JMM-1
9658: PPUSH
9659: CALL_OW 88
// us_scout := 1 ;
9663: LD_ADDR_EXP 8
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// end ; 2 :
9671: GO 9836
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9803
9681: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING D3Fb-JMM-1
9689: PPUSH
9690: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9694: LD_EXP 33
9698: PPUSH
9699: LD_STRING D3Fb-Frank-1
9701: PPUSH
9702: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
9706: LD_STRING QFrank2
9708: PPUSH
9709: CALL_OW 97
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9769
9722: POP
// begin us_scout := 2 ;
9723: LD_ADDR_EXP 8
9727: PUSH
9728: LD_INT 2
9730: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
9731: LD_EXP 21
9735: PPUSH
9736: LD_STRING D3Fba-JMM-1
9738: PPUSH
9739: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
9743: LD_EXP 33
9747: PPUSH
9748: LD_STRING D3Fba-Frank-1
9750: PPUSH
9751: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
9755: LD_EXP 21
9759: PPUSH
9760: LD_STRING D3Fba-JMM-2
9762: PPUSH
9763: CALL_OW 88
// end ; 2 :
9767: GO 9801
9769: LD_INT 2
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9800
9777: POP
// begin us_scout := 0 ;
9778: LD_ADDR_EXP 8
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
9786: LD_EXP 21
9790: PPUSH
9791: LD_STRING D3Fbb-JMM-1
9793: PPUSH
9794: CALL_OW 88
// end ; end ;
9798: GO 9801
9800: POP
// end ; 3 :
9801: GO 9836
9803: LD_INT 3
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9835
9811: POP
// begin us_scout := - 1 ;
9812: LD_ADDR_EXP 8
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
9821: LD_EXP 21
9825: PPUSH
9826: LD_STRING D3Fc-JMM-1
9828: PPUSH
9829: CALL_OW 88
// end ; end ;
9833: GO 9836
9835: POP
// DialogueOff ;
9836: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
9840: LD_EXP 8
9844: PUSH
9845: LD_INT 1
9847: NEG
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: IN
9856: IFFALSE 9860
// exit ;
9858: GO 11507
// if us_scout in [ 1 , 2 ] then
9860: LD_EXP 8
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: IN
9875: IFFALSE 10574
// begin if IsInUnit ( Frank ) then
9877: LD_EXP 33
9881: PPUSH
9882: CALL_OW 310
9886: IFFALSE 9897
// ComExitBuilding ( Frank ) ;
9888: LD_EXP 33
9892: PPUSH
9893: CALL_OW 122
// if IsDrivenBy ( Frank ) then
9897: LD_EXP 33
9901: PPUSH
9902: CALL_OW 311
9906: IFFALSE 9917
// ComExitVehicle ( Frank ) ;
9908: LD_EXP 33
9912: PPUSH
9913: CALL_OW 121
// SetSide ( Frank , 4 ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_INT 4
9924: PPUSH
9925: CALL_OW 235
// wait ( 0 0$1 ) ;
9929: LD_INT 35
9931: PPUSH
9932: CALL_OW 67
// if us_scout = 2 then
9936: LD_EXP 8
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: IFFALSE 10312
// begin ComMoveXY ( Frank , 75 , 63 ) ;
9946: LD_EXP 33
9950: PPUSH
9951: LD_INT 75
9953: PPUSH
9954: LD_INT 63
9956: PPUSH
9957: CALL_OW 111
// AddComHold ( Frank ) ;
9961: LD_EXP 33
9965: PPUSH
9966: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
9970: LD_EXP 33
9974: PPUSH
9975: LD_INT 770
9977: PPUSH
9978: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
9982: LD_EXP 33
9986: PPUSH
9987: LD_INT 100
9989: PPUSH
9990: LD_INT 75
9992: PPUSH
9993: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
9997: LD_EXP 33
10001: PPUSH
10002: LD_INT 123
10004: PPUSH
10005: LD_INT 103
10007: PPUSH
10008: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10012: LD_EXP 33
10016: PPUSH
10017: LD_INT 138
10019: PPUSH
10020: LD_INT 108
10022: PPUSH
10023: CALL_OW 171
// AddComHold ( Frank ) ;
10027: LD_EXP 33
10031: PPUSH
10032: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10036: LD_INT 35
10038: PPUSH
10039: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10043: LD_EXP 33
10047: PPUSH
10048: LD_INT 138
10050: PPUSH
10051: LD_INT 108
10053: PPUSH
10054: CALL_OW 307
10058: IFFALSE 10036
// AddComMoveXY ( Frank , 125 , 132 ) ;
10060: LD_EXP 33
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 132
10070: PPUSH
10071: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10075: LD_INT 35
10077: PPUSH
10078: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10082: LD_INT 1
10084: PPUSH
10085: LD_EXP 33
10089: PPUSH
10090: CALL_OW 292
10094: PUSH
10095: LD_EXP 33
10099: PPUSH
10100: LD_INT 7
10102: PPUSH
10103: CALL_OW 296
10107: PUSH
10108: LD_INT 7
10110: LESS
10111: OR
10112: IFFALSE 10075
// DialogueOn ;
10114: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10118: LD_EXP 33
10122: PPUSH
10123: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10127: LD_INT 10
10129: PPUSH
10130: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10134: LD_EXP 21
10138: PPUSH
10139: LD_STRING D4Fa-JMM-1
10141: PPUSH
10142: CALL_OW 88
// for i in points do
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_VAR 0 2
10155: PUSH
10156: FOR_IN
10157: IFFALSE 10215
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10159: LD_VAR 0 1
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_VAR 0 1
10172: PUSH
10173: LD_INT 2
10175: ARRAY
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: LD_INT 20
10182: NEG
10183: PPUSH
10184: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10188: LD_VAR 0 1
10192: PUSH
10193: LD_INT 1
10195: ARRAY
10196: PPUSH
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 2
10204: ARRAY
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 331
// end ;
10213: GO 10156
10215: POP
10216: POP
// dwait ( 0 0$0.5 ) ;
10217: LD_INT 18
10219: PPUSH
10220: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10224: LD_INT 42
10226: PPUSH
10227: LD_INT 27
10229: PPUSH
10230: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10234: LD_EXP 33
10238: PPUSH
10239: LD_STRING D4Fa-Frank-1
10241: PPUSH
10242: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10246: LD_INT 18
10248: PPUSH
10249: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10253: LD_EXP 21
10257: PPUSH
10258: LD_STRING D4Fa-JMM-2
10260: PPUSH
10261: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10265: LD_INT 118
10267: PPUSH
10268: LD_INT 80
10270: PPUSH
10271: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10275: LD_EXP 33
10279: PPUSH
10280: LD_STRING D4Fa-Frank-2
10282: PPUSH
10283: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10287: LD_INT 10
10289: PPUSH
10290: CALL_OW 68
// DialogueOff ;
10294: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10298: LD_EXP 33
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 235
// end else
10310: GO 10574
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 4
10317: PPUSH
10318: LD_INT 2
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10328: LD_EXP 33
10332: PPUSH
10333: LD_INT 75
10335: PPUSH
10336: LD_INT 63
10338: PPUSH
10339: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10343: LD_EXP 33
10347: PPUSH
10348: LD_INT 175
10350: PPUSH
10351: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10355: LD_EXP 33
10359: PPUSH
10360: LD_INT 102
10362: PPUSH
10363: LD_INT 76
10365: PPUSH
10366: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10370: LD_EXP 33
10374: PPUSH
10375: LD_INT 108
10377: PPUSH
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10385: LD_INT 35
10387: PPUSH
10388: CALL_OW 67
// until See ( 2 , Frank ) ;
10392: LD_INT 2
10394: PPUSH
10395: LD_EXP 33
10399: PPUSH
10400: CALL_OW 292
10404: IFFALSE 10385
// ComMoveXY ( Frank , 112 , 118 ) ;
10406: LD_EXP 33
10410: PPUSH
10411: LD_INT 112
10413: PPUSH
10414: LD_INT 118
10416: PPUSH
10417: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10421: LD_EXP 33
10425: PPUSH
10426: CALL_OW 256
10430: PUSH
10431: LD_INT 750
10433: GREATEREQUAL
10434: IFFALSE 10448
// SetLives ( Frank , 700 ) ;
10436: LD_EXP 33
10440: PPUSH
10441: LD_INT 700
10443: PPUSH
10444: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 33
10462: PPUSH
10463: CALL_OW 292
10467: PUSH
10468: LD_EXP 33
10472: PPUSH
10473: LD_INT 7
10475: PPUSH
10476: CALL_OW 296
10480: PUSH
10481: LD_INT 17
10483: LESS
10484: OR
10485: IFFALSE 10448
// DialogueOn ;
10487: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10491: LD_EXP 33
10495: PPUSH
10496: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10500: LD_EXP 33
10504: PPUSH
10505: LD_STRING D4Fb-Frank-1
10507: PPUSH
10508: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10512: LD_EXP 21
10516: PPUSH
10517: LD_STRING D4Fb-JMM-1
10519: PPUSH
10520: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10524: LD_INT 2
10526: PPUSH
10527: LD_STRING D4Fb-FSci1-1
10529: PPUSH
10530: CALL 15155 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10534: LD_EXP 33
10538: PPUSH
10539: LD_STRING D4Fb-Frank-2
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_STRING D4Fb-JMM-2
10553: PPUSH
10554: CALL_OW 88
// DialogueOff ;
10558: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10562: LD_EXP 33
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10574: LD_EXP 34
10578: PPUSH
10579: CALL_OW 302
10583: PUSH
10584: LD_EXP 33
10588: NOT
10589: AND
10590: IFFALSE 10738
// begin DialogueOn ;
10592: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10596: LD_EXP 21
10600: PUSH
10601: LD_EXP 34
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10614: LD_EXP 34
10618: PPUSH
10619: LD_STRING D3Y-Yam-1
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10626: LD_EXP 21
10630: PPUSH
10631: LD_STRING D3Y-JMM-1
10633: PPUSH
10634: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10638: LD_EXP 34
10642: PPUSH
10643: LD_STRING D3Y-Yam-2
10645: PPUSH
10646: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10650: LD_STRING QYamoko
10652: PPUSH
10653: CALL_OW 97
10657: PUSH
10658: LD_INT 1
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10701
10666: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10667: LD_EXP 21
10671: PPUSH
10672: LD_STRING D3Ya-JMM-1
10674: PPUSH
10675: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10679: LD_EXP 34
10683: PPUSH
10684: LD_STRING D3Ya-Yam-1
10686: PPUSH
10687: CALL_OW 88
// us_scout := 1 ;
10691: LD_ADDR_EXP 8
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// end ; 2 :
10699: GO 10734
10701: LD_INT 2
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10733
10709: POP
// begin us_scout := - 1 ;
10710: LD_ADDR_EXP 8
10714: PUSH
10715: LD_INT 1
10717: NEG
10718: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
10719: LD_EXP 21
10723: PPUSH
10724: LD_STRING D3Yb-JMM-1
10726: PPUSH
10727: CALL_OW 88
// end ; end ;
10731: GO 10734
10733: POP
// DialogueOff ;
10734: CALL_OW 7
// end ; if Frank then
10738: LD_EXP 33
10742: IFFALSE 10746
// exit ;
10744: GO 11507
// if us_scout in [ - 1 , 0 ] then
10746: LD_EXP 8
10750: PUSH
10751: LD_INT 1
10753: NEG
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: IN
10762: IFFALSE 10766
// exit ;
10764: GO 11507
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
10766: LD_ADDR_EXP 8
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_OWVAR 67
10789: ARRAY
10790: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
10791: LD_EXP 8
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: IN
10806: IFFALSE 11507
// begin if IsInUnit ( Kikuchi ) then
10808: LD_EXP 34
10812: PPUSH
10813: CALL_OW 310
10817: IFFALSE 10828
// ComExitBuilding ( Kikuchi ) ;
10819: LD_EXP 34
10823: PPUSH
10824: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
10828: LD_EXP 34
10832: PPUSH
10833: CALL_OW 311
10837: IFFALSE 10848
// ComExitVehicle ( Kikuchi ) ;
10839: LD_EXP 34
10843: PPUSH
10844: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
10848: LD_EXP 34
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 235
// wait ( 0 0$1 ) ;
10860: LD_INT 35
10862: PPUSH
10863: CALL_OW 67
// if us_scout = 2 then
10867: LD_EXP 8
10871: PUSH
10872: LD_INT 2
10874: EQUAL
10875: IFFALSE 11255
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
10877: LD_EXP 34
10881: PPUSH
10882: LD_INT 75
10884: PPUSH
10885: LD_INT 63
10887: PPUSH
10888: CALL_OW 111
// AddComHold ( Kikuchi ) ;
10892: LD_EXP 34
10896: PPUSH
10897: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
10901: LD_EXP 34
10905: PPUSH
10906: LD_INT 770
10908: PPUSH
10909: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
10913: LD_EXP 34
10917: PPUSH
10918: LD_INT 100
10920: PPUSH
10921: LD_INT 75
10923: PPUSH
10924: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
10928: LD_EXP 34
10932: PPUSH
10933: LD_INT 123
10935: PPUSH
10936: LD_INT 103
10938: PPUSH
10939: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
10943: LD_EXP 34
10947: PPUSH
10948: LD_INT 138
10950: PPUSH
10951: LD_INT 108
10953: PPUSH
10954: CALL_OW 171
// AddComHold ( Kikuchi ) ;
10958: LD_EXP 34
10962: PPUSH
10963: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10967: LD_INT 35
10969: PPUSH
10970: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
10974: LD_EXP 34
10978: PPUSH
10979: LD_INT 138
10981: PPUSH
10982: LD_INT 108
10984: PPUSH
10985: CALL_OW 307
10989: IFFALSE 10967
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
10991: LD_EXP 34
10995: PPUSH
10996: LD_INT 125
10998: PPUSH
10999: LD_INT 132
11001: PPUSH
11002: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11006: LD_INT 35
11008: PPUSH
11009: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11013: LD_INT 1
11015: PPUSH
11016: LD_EXP 34
11020: PPUSH
11021: CALL_OW 292
11025: PUSH
11026: LD_EXP 34
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: CALL_OW 296
11038: PUSH
11039: LD_INT 7
11041: LESS
11042: OR
11043: IFFALSE 11006
// DialogueOn ;
11045: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11049: LD_EXP 34
11053: PPUSH
11054: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11058: LD_INT 10
11060: PPUSH
11061: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11065: LD_EXP 34
11069: PPUSH
11070: LD_STRING D4Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11077: LD_EXP 21
11081: PPUSH
11082: LD_STRING D4Ya-JMM-1
11084: PPUSH
11085: CALL_OW 88
// for i in points do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11158
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 1
11109: ARRAY
11110: PPUSH
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 2
11118: ARRAY
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 331
// end ;
11156: GO 11099
11158: POP
11159: POP
// dwait ( 0 0$0.5 ) ;
11160: LD_INT 18
11162: PPUSH
11163: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11167: LD_INT 42
11169: PPUSH
11170: LD_INT 27
11172: PPUSH
11173: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11177: LD_EXP 34
11181: PPUSH
11182: LD_STRING D4Ya-Yam-2
11184: PPUSH
11185: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11189: LD_INT 18
11191: PPUSH
11192: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11196: LD_INT 118
11198: PPUSH
11199: LD_INT 80
11201: PPUSH
11202: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11206: LD_EXP 21
11210: PPUSH
11211: LD_STRING D4Ya-JMM-2
11213: PPUSH
11214: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11218: LD_EXP 34
11222: PPUSH
11223: LD_STRING D4Ya-Yam-3
11225: PPUSH
11226: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 68
// DialogueOff ;
11237: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11241: LD_EXP 34
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 235
// end else
11253: GO 11507
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11255: LD_INT 2
11257: PPUSH
11258: LD_INT 4
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11271: LD_EXP 34
11275: PPUSH
11276: LD_INT 75
11278: PPUSH
11279: LD_INT 63
11281: PPUSH
11282: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11286: LD_EXP 34
11290: PPUSH
11291: LD_INT 175
11293: PPUSH
11294: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11298: LD_EXP 34
11302: PPUSH
11303: LD_INT 102
11305: PPUSH
11306: LD_INT 76
11308: PPUSH
11309: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11313: LD_EXP 34
11317: PPUSH
11318: LD_INT 108
11320: PPUSH
11321: LD_INT 70
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11335: LD_INT 2
11337: PPUSH
11338: LD_EXP 34
11342: PPUSH
11343: CALL_OW 292
11347: IFFALSE 11328
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11349: LD_EXP 34
11353: PPUSH
11354: LD_INT 112
11356: PPUSH
11357: LD_INT 118
11359: PPUSH
11360: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11364: LD_EXP 34
11368: PPUSH
11369: CALL_OW 256
11373: PUSH
11374: LD_INT 750
11376: GREATEREQUAL
11377: IFFALSE 11391
// SetLives ( Kikuchi , 700 ) ;
11379: LD_EXP 34
11383: PPUSH
11384: LD_INT 700
11386: PPUSH
11387: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11398: LD_INT 1
11400: PPUSH
11401: LD_EXP 34
11405: PPUSH
11406: CALL_OW 292
11410: PUSH
11411: LD_EXP 34
11415: PPUSH
11416: LD_INT 7
11418: PPUSH
11419: CALL_OW 296
11423: PUSH
11424: LD_INT 17
11426: LESS
11427: OR
11428: IFFALSE 11391
// DialogueOn ;
11430: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11434: LD_EXP 34
11438: PPUSH
11439: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11443: LD_EXP 34
11447: PPUSH
11448: LD_STRING D4Yb-Yam-1
11450: PPUSH
11451: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING D4Yb-JMM-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_STRING D4Yb-Yam-2
11474: PPUSH
11475: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11479: LD_EXP 21
11483: PPUSH
11484: LD_STRING D4Yb-JMM-2
11486: PPUSH
11487: CALL_OW 88
// DialogueOff ;
11491: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11495: LD_EXP 34
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 235
// end ; end ; end ;
11507: PPOPN 2
11509: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11510: LD_EXP 6
11514: IFFALSE 12547
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// if not seen [ 1 ] then
11526: LD_EXP 9
11530: PUSH
11531: LD_INT 1
11533: ARRAY
11534: NOT
11535: IFFALSE 11715
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 11
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: ST_TO_ADDR
// if tmp then
11589: LD_VAR 0 2
11593: IFFALSE 11715
// for i in tmp do
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11713
// if See ( 1 , i ) then
11608: LD_INT 1
11610: PPUSH
11611: LD_VAR 0 1
11615: PPUSH
11616: CALL_OW 292
11620: IFFALSE 11711
// begin seen := Replace ( seen , 1 , true ) ;
11622: LD_ADDR_EXP 9
11626: PUSH
11627: LD_EXP 9
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 1
11642: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11643: LD_INT 1
11645: PPUSH
11646: CALL 14977 0 1
11650: IFFALSE 11711
// begin DialogueOn ;
11652: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11665: LD_INT 10
11667: PPUSH
11668: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_STRING D5a-Sol2-1
11682: PPUSH
11683: CALL 15155 0 2
11687: ST_TO_ADDR
// if not un then
11688: LD_VAR 0 3
11692: NOT
11693: IFFALSE 11705
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_STRING D5a-FSol2-1
11700: PPUSH
11701: CALL 15155 0 2
// DialogueOff ;
11705: CALL_OW 7
// break ;
11709: GO 11713
// end ; end ;
11711: GO 11605
11713: POP
11714: POP
// end ; if not seen [ 2 ] then
11715: LD_EXP 9
11719: PUSH
11720: LD_INT 2
11722: ARRAY
11723: NOT
11724: IFFALSE 11949
// begin can_kamikazed := true ;
11726: LD_ADDR_EXP 10
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 17
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: ST_TO_ADDR
// if tmp then
11768: LD_VAR 0 2
11772: IFFALSE 11949
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11947
// if See ( 1 , i ) then
11787: LD_INT 1
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 292
11799: IFFALSE 11945
// begin seen := Replace ( seen , 2 , true ) ;
11801: LD_ADDR_EXP 9
11805: PUSH
11806: LD_EXP 9
11810: PPUSH
11811: LD_INT 2
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11822: LD_INT 1
11824: PPUSH
11825: CALL 14977 0 1
11829: IFFALSE 11945
// begin DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_STRING D5b-Sol1-1
11861: PPUSH
11862: CALL 15155 0 2
11866: ST_TO_ADDR
// if not un then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11890
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 2
11881: PPUSH
11882: LD_STRING D5b-FSol1-1
11884: PPUSH
11885: CALL 15155 0 2
11889: ST_TO_ADDR
// if un then
11890: LD_VAR 0 3
11894: IFFALSE 11939
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
11896: LD_ADDR_VAR 0 4
11900: PUSH
11901: LD_INT 1
11903: PPUSH
11904: LD_STRING D5b-Sol2-1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL 15381 0 3
11916: ST_TO_ADDR
// if not un2 then
11917: LD_VAR 0 4
11921: NOT
11922: IFFALSE 11939
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
11924: LD_INT 2
11926: PPUSH
11927: LD_STRING D5b-FSol2-1
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: CALL 15381 0 3
// end ; DialogueOff ;
11939: CALL_OW 7
// break ;
11943: GO 11947
// end ; end ;
11945: GO 11784
11947: POP
11948: POP
// end ; if not seen [ 3 ] then
11949: LD_EXP 9
11953: PUSH
11954: LD_INT 3
11956: ARRAY
11957: NOT
11958: IFFALSE 12132
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// if tmp then
11994: LD_VAR 0 2
11998: IFFALSE 12132
// for i in tmp do
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_VAR 0 2
12009: PUSH
12010: FOR_IN
12011: IFFALSE 12130
// if See ( 1 , i ) then
12013: LD_INT 1
12015: PPUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 292
12025: IFFALSE 12128
// begin seen := Replace ( seen , 3 , true ) ;
12027: LD_ADDR_EXP 9
12031: PUSH
12032: LD_EXP 9
12036: PPUSH
12037: LD_INT 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12048: LD_INT 1
12050: PPUSH
12051: CALL 14977 0 1
12055: IFFALSE 12128
// begin DialogueOn ;
12057: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_STRING D8-Sol1-1
12087: PPUSH
12088: CALL 15155 0 2
12092: ST_TO_ADDR
// if not un then
12093: LD_VAR 0 3
12097: NOT
12098: IFFALSE 12110
// SayRand ( sex_female , D8-FSol1-1 ) ;
12100: LD_INT 2
12102: PPUSH
12103: LD_STRING D8-FSol1-1
12105: PPUSH
12106: CALL 15155 0 2
// Say ( JMM , D8-JMM-1 ) ;
12110: LD_EXP 21
12114: PPUSH
12115: LD_STRING D8-JMM-1
12117: PPUSH
12118: CALL_OW 88
// DialogueOff ;
12122: CALL_OW 7
// break ;
12126: GO 12130
// end ; end ;
12128: GO 12010
12130: POP
12131: POP
// end ; if not seen [ 4 ] then
12132: LD_EXP 9
12136: PUSH
12137: LD_INT 4
12139: ARRAY
12140: NOT
12141: IFFALSE 12303
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12143: LD_ADDR_VAR 0 2
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 33
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// if tmp then
12177: LD_VAR 0 2
12181: IFFALSE 12303
// for i in tmp do
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_VAR 0 2
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12301
// if See ( 1 , i ) then
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 292
12208: IFFALSE 12299
// begin seen := Replace ( seen , 4 , true ) ;
12210: LD_ADDR_EXP 9
12214: PUSH
12215: LD_EXP 9
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 1
12230: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12231: LD_INT 1
12233: PPUSH
12234: CALL 14977 0 1
12238: IFFALSE 12299
// begin DialogueOn ;
12240: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12253: LD_INT 10
12255: PPUSH
12256: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_STRING D5a-Sol1-1
12270: PPUSH
12271: CALL 15155 0 2
12275: ST_TO_ADDR
// if not un then
12276: LD_VAR 0 3
12280: NOT
12281: IFFALSE 12293
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12283: LD_INT 2
12285: PPUSH
12286: LD_STRING D5a-FSol1-1
12288: PPUSH
12289: CALL 15155 0 2
// DialogueOff ;
12293: CALL_OW 7
// break ;
12297: GO 12301
// end ; end ;
12299: GO 12193
12301: POP
12302: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12303: LD_EXP 9
12307: PUSH
12308: LD_INT 5
12310: ARRAY
12311: NOT
12312: PUSH
12313: LD_EXP 9
12317: PUSH
12318: LD_INT 3
12320: ARRAY
12321: AND
12322: IFFALSE 12496
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 34
12341: PUSH
12342: LD_INT 31
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: ST_TO_ADDR
// if tmp then
12358: LD_VAR 0 2
12362: IFFALSE 12496
// for i in tmp do
12364: LD_ADDR_VAR 0 1
12368: PUSH
12369: LD_VAR 0 2
12373: PUSH
12374: FOR_IN
12375: IFFALSE 12494
// if See ( 1 , i ) then
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 292
12389: IFFALSE 12492
// begin seen := Replace ( seen , 5 , true ) ;
12391: LD_ADDR_EXP 9
12395: PUSH
12396: LD_EXP 9
12400: PPUSH
12401: LD_INT 5
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 1
12411: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12412: LD_INT 1
12414: PPUSH
12415: CALL 14977 0 1
12419: IFFALSE 12492
// begin DialogueOn ;
12421: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12434: LD_INT 10
12436: PPUSH
12437: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 1
12448: PPUSH
12449: LD_STRING D8a-Sol2-1
12451: PPUSH
12452: CALL 15155 0 2
12456: ST_TO_ADDR
// if not un then
12457: LD_VAR 0 3
12461: NOT
12462: IFFALSE 12474
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12464: LD_INT 2
12466: PPUSH
12467: LD_STRING D8a-FSol2-1
12469: PPUSH
12470: CALL 15155 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12474: LD_EXP 21
12478: PPUSH
12479: LD_STRING D8a-JMM-1
12481: PPUSH
12482: CALL_OW 88
// DialogueOff ;
12486: CALL_OW 7
// break ;
12490: GO 12494
// end ; end ;
12492: GO 12374
12494: POP
12495: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12496: LD_EXP 9
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_EXP 9
12509: PUSH
12510: LD_INT 2
12512: ARRAY
12513: AND
12514: PUSH
12515: LD_EXP 9
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: AND
12524: PUSH
12525: LD_EXP 9
12529: PUSH
12530: LD_INT 4
12532: ARRAY
12533: AND
12534: PUSH
12535: LD_EXP 9
12539: PUSH
12540: LD_INT 5
12542: ARRAY
12543: AND
12544: IFFALSE 12547
// disable ;
12546: DISABLE
// end ;
12547: PPOPN 4
12549: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12550: LD_EXP 10
12554: PUSH
12555: LD_EXP 11
12559: AND
12560: IFFALSE 12758
12562: GO 12564
12564: DISABLE
12565: LD_INT 0
12567: PPUSH
// begin DialogueOn ;
12568: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12572: LD_EXP 11
12576: PPUSH
12577: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_STRING D5c-Sol1-1
12591: PPUSH
12592: CALL 15155 0 2
12596: ST_TO_ADDR
// if not un then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12620
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: PPUSH
12612: LD_STRING D5c-FSol1-1
12614: PPUSH
12615: CALL 15155 0 2
12619: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12620: LD_EXP 21
12624: PPUSH
12625: LD_STRING D5c-JMM-1
12627: PPUSH
12628: CALL_OW 88
// if IsOk ( Lisa ) then
12632: LD_EXP 22
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12657
// Say ( Lisa , D5d-Lisa-1 ) else
12643: LD_EXP 22
12647: PPUSH
12648: LD_STRING D5d-Lisa-1
12650: PPUSH
12651: CALL_OW 88
12655: GO 12742
// if IsOk ( Cyrus ) then
12657: LD_EXP 25
12661: PPUSH
12662: CALL_OW 302
12666: IFFALSE 12682
// Say ( Cyrus , D5d-Cyrus-1 ) else
12668: LD_EXP 25
12672: PPUSH
12673: LD_STRING D5d-Cyrus-1
12675: PPUSH
12676: CALL_OW 88
12680: GO 12742
// if IsOk ( Gary ) then
12682: LD_EXP 32
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// Say ( Gary , D5d-Gary-1 ) else
12693: LD_EXP 32
12697: PPUSH
12698: LD_STRING D5d-Gary-1
12700: PPUSH
12701: CALL_OW 88
12705: GO 12742
// if GetSex ( un ) = sex_male then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 258
12716: PUSH
12717: LD_INT 1
12719: EQUAL
12720: IFFALSE 12736
// Say ( un , D5d-Sol1-1 ) else
12722: LD_VAR 0 1
12726: PPUSH
12727: LD_STRING D5d-Sol1-1
12729: PPUSH
12730: CALL_OW 88
12734: GO 12742
// begin DialogueOff ;
12736: CALL_OW 7
// exit ;
12740: GO 12758
// end ; Say ( JMM , D5d-JMM-1 ) ;
12742: LD_EXP 21
12746: PPUSH
12747: LD_STRING D5d-JMM-1
12749: PPUSH
12750: CALL_OW 88
// DialogueOff ;
12754: CALL_OW 7
// end ;
12758: PPOPN 1
12760: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
12761: LD_INT 1
12763: PPUSH
12764: LD_INT 17
12766: PPUSH
12767: CALL_OW 294
12771: PUSH
12772: LD_INT 2
12774: GREATEREQUAL
12775: IFFALSE 12896
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
12783: LD_INT 10
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 10
12794: NEG
12795: PPUSH
12796: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
12800: LD_INT 10
12802: PPUSH
12803: LD_INT 5
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
12813: LD_INT 10
12815: PPUSH
12816: LD_INT 5
12818: PPUSH
12819: CALL_OW 86
// DialogueOn ;
12823: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D6-Sci1-1
12837: PPUSH
12838: CALL 15155 0 2
12842: ST_TO_ADDR
// if un then
12843: LD_VAR 0 1
12847: IFFALSE 12885
// begin Say ( JMM , D6-JMM-1 ) ;
12849: LD_EXP 21
12853: PPUSH
12854: LD_STRING D6-JMM-1
12856: PPUSH
12857: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_STRING D6-Sci1-2
12868: PPUSH
12869: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING D6-JMM-2
12880: PPUSH
12881: CALL_OW 88
// end ; DialogueOff ;
12885: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12889: LD_STRING M3
12891: PPUSH
12892: CALL_OW 337
// end ;
12896: PPOPN 1
12898: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
12899: LD_OWVAR 1
12903: PUSH
12904: LD_INT 42000
12906: GREATEREQUAL
12907: PUSH
12908: LD_INT 2
12910: PPUSH
12911: LD_INT 169
12913: PPUSH
12914: LD_INT 90
12916: PPUSH
12917: LD_INT 10
12919: PPUSH
12920: CALL 41691 0 4
12924: PUSH
12925: LD_INT 4
12927: ARRAY
12928: PUSH
12929: LD_INT 0
12931: EQUAL
12932: PUSH
12933: LD_INT 45
12935: PPUSH
12936: CALL_OW 301
12940: OR
12941: PUSH
12942: LD_INT 45
12944: PPUSH
12945: CALL_OW 255
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: OR
12954: AND
12955: PUSH
12956: LD_INT 94
12958: PPUSH
12959: CALL_OW 301
12963: NOT
12964: AND
12965: IFFALSE 14091
12967: GO 12969
12969: DISABLE
12970: LD_INT 0
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin uc_side := 5 ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_INT 5
12983: ST_TO_ADDR
// uc_nation := 2 ;
12984: LD_ADDR_OWVAR 21
12988: PUSH
12989: LD_INT 2
12991: ST_TO_ADDR
// InitHc ;
12992: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 3
13001: PPUSH
13002: LD_INT 8
13004: PPUSH
13005: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13009: LD_ADDR_OWVAR 29
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: LD_INT 12
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13024: LD_ADDR_OWVAR 33
13028: PUSH
13029: LD_STRING SecondCharsGal
13031: ST_TO_ADDR
// hc_face_number := 7 ;
13032: LD_ADDR_OWVAR 34
13036: PUSH
13037: LD_INT 7
13039: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13040: LD_ADDR_EXP 45
13044: PUSH
13045: CALL_OW 44
13049: ST_TO_ADDR
// InitHc ;
13050: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 16
13059: PPUSH
13060: LD_INT 2
13062: PPUSH
13063: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13067: LD_ADDR_OWVAR 29
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 12
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: ST_TO_ADDR
// hc_name :=  ;
13082: LD_ADDR_OWVAR 26
13086: PUSH
13087: LD_STRING 
13089: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13090: LD_ADDR_EXP 46
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// InitHc ;
13100: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13104: LD_INT 35
13106: PPUSH
13107: CALL_OW 67
// until not InBattle ( 1 ) ;
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 463
13118: NOT
13119: IFFALSE 13104
// wait ( 0 0$5 ) ;
13121: LD_INT 175
13123: PPUSH
13124: CALL_OW 67
// DialogueOn ;
13128: CALL_OW 6
// InGameOn ;
13132: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13136: LD_ADDR_VAR 0 1
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 25
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 25
13186: PUSH
13187: LD_INT 4
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_EXP 21
13236: PUSH
13237: LD_EXP 22
13241: PUSH
13242: LD_EXP 23
13246: PUSH
13247: LD_EXP 24
13251: PUSH
13252: LD_EXP 25
13256: PUSH
13257: LD_EXP 26
13261: PUSH
13262: LD_EXP 27
13266: PUSH
13267: LD_EXP 28
13271: PUSH
13272: LD_EXP 29
13276: PUSH
13277: LD_EXP 31
13281: PUSH
13282: LD_EXP 32
13286: PUSH
13287: LD_EXP 33
13291: PUSH
13292: LD_EXP 34
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: DIFF
13312: PPUSH
13313: LD_INT 26
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 72
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: ST_TO_ADDR
// if not un and Brown then
13332: LD_VAR 0 1
13336: NOT
13337: PUSH
13338: LD_EXP 27
13342: AND
13343: IFFALSE 13355
// un := Brown ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_EXP 27
13354: ST_TO_ADDR
// if un then
13355: LD_VAR 0 1
13359: IFFALSE 13385
// begin Say ( un , D7-Sol1-1 ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_STRING D7-Sol1-1
13368: PPUSH
13369: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13373: LD_EXP 21
13377: PPUSH
13378: LD_STRING D7-JMM-1
13380: PPUSH
13381: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13385: LD_EXP 45
13389: PPUSH
13390: LD_STRING D7-Ar1-1
13392: PPUSH
13393: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING D7-JMM-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13409: LD_EXP 45
13413: PPUSH
13414: LD_STRING D7-Ar1-2
13416: PPUSH
13417: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING D7-JMM-3
13428: PPUSH
13429: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13433: LD_EXP 45
13437: PPUSH
13438: LD_STRING D7-Ar1-3
13440: PPUSH
13441: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13445: LD_EXP 21
13449: PPUSH
13450: LD_STRING D7-JMM-4
13452: PPUSH
13453: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13457: LD_EXP 45
13461: PPUSH
13462: LD_STRING D7-Ar1-4
13464: PPUSH
13465: CALL_OW 94
// InGameOff ;
13469: CALL_OW 9
// DialogueOff ;
13473: CALL_OW 7
// case Query ( QCameras ) of 1 :
13477: LD_STRING QCameras
13479: PPUSH
13480: CALL_OW 97
13484: PUSH
13485: LD_INT 1
13487: DOUBLE
13488: EQUAL
13489: IFTRUE 13493
13491: GO 13496
13493: POP
// ; 2 :
13494: GO 13510
13496: LD_INT 2
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13509
13504: POP
// exit ; end ;
13505: GO 14091
13507: GO 13510
13509: POP
// ChangeMissionObjectives ( MCar ) ;
13510: LD_STRING MCar
13512: PPUSH
13513: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13517: LD_INT 124
13519: PPUSH
13520: LD_INT 90
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 6
13528: NEG
13529: PPUSH
13530: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13534: LD_INT 124
13536: PPUSH
13537: LD_INT 90
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
13547: LD_INT 12
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 424
// wait ( 3 ) ;
13557: LD_INT 3
13559: PPUSH
13560: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13564: LD_INT 124
13566: PPUSH
13567: LD_INT 90
13569: PPUSH
13570: CALL_OW 86
// cargo := false ;
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_INT 12
13596: PPUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 34
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 58
13619: PUSH
13620: EMPTY
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// until cargo ;
13633: LD_VAR 0 3
13637: IFFALSE 13582
// cargo := cargo [ 1 ] ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 5
13660: PPUSH
13661: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
13665: LD_INT 12
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13675: LD_EXP 45
13679: PPUSH
13680: LD_INT 11
13682: PPUSH
13683: LD_INT 0
13685: PPUSH
13686: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13690: LD_EXP 46
13694: PPUSH
13695: LD_INT 11
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
13705: LD_EXP 45
13709: PUSH
13710: LD_EXP 46
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: LD_INT 12
13721: PPUSH
13722: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
13726: LD_EXP 45
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13740: LD_EXP 45
13744: PUSH
13745: LD_EXP 46
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: LD_INT 209
13756: PPUSH
13757: LD_INT 178
13759: PPUSH
13760: CALL_OW 171
// while ( true ) do
13764: LD_INT 1
13766: IFFALSE 13920
// begin wait ( 0 0$1 ) ;
13768: LD_INT 35
13770: PPUSH
13771: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
13775: LD_EXP 45
13779: PPUSH
13780: CALL_OW 314
13784: NOT
13785: PUSH
13786: LD_EXP 46
13790: PPUSH
13791: CALL_OW 314
13795: NOT
13796: OR
13797: IFFALSE 13823
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13799: LD_EXP 45
13803: PUSH
13804: LD_EXP 46
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: LD_INT 209
13815: PPUSH
13816: LD_INT 178
13818: PPUSH
13819: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
13823: LD_EXP 45
13827: PPUSH
13828: LD_INT 10
13830: PPUSH
13831: CALL_OW 308
13835: IFFALSE 13846
// RemoveUnit ( ar_mechanic ) ;
13837: LD_EXP 45
13841: PPUSH
13842: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
13846: LD_EXP 46
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 308
13858: IFFALSE 13869
// RemoveUnit ( ar_mechanic_friend ) ;
13860: LD_EXP 46
13864: PPUSH
13865: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 10
13876: PPUSH
13877: CALL_OW 308
13881: IFFALSE 13892
// RemoveUnit ( cargo ) ;
13883: LD_VAR 0 3
13887: PPUSH
13888: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
13892: LD_EXP 45
13896: PPUSH
13897: CALL_OW 300
13901: NOT
13902: PUSH
13903: LD_EXP 46
13907: PPUSH
13908: CALL_OW 300
13912: NOT
13913: AND
13914: IFFALSE 13918
// break ;
13916: GO 13920
// end ;
13918: GO 13764
// wait ( 0 0$2 ) ;
13920: LD_INT 70
13922: PPUSH
13923: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
13927: LD_EXP 45
13931: PPUSH
13932: LD_STRING D7a-Ar1-1
13934: PPUSH
13935: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
13939: LD_ADDR_VAR 0 4
13943: PUSH
13944: LD_INT 129
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 103
13956: PUSH
13957: LD_INT 6
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 148
13966: PUSH
13967: LD_INT 47
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 155
13976: PUSH
13977: LD_INT 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if Difficulty = 1 then
13990: LD_OWVAR 67
13994: PUSH
13995: LD_INT 1
13997: EQUAL
13998: IFFALSE 14035
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 4
14009: PUSH
14010: LD_INT 78
14012: PUSH
14013: LD_INT 7
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 104
14022: PUSH
14023: LD_INT 43
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ADD
14034: ST_TO_ADDR
// for i in tmp do
14035: LD_ADDR_VAR 0 2
14039: PUSH
14040: LD_VAR 0 4
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14079
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 9
14071: NEG
14072: PPUSH
14073: CALL_OW 330
14077: GO 14045
14079: POP
14080: POP
// CenterOnXY ( 129 , 10 ) ;
14081: LD_INT 129
14083: PPUSH
14084: LD_INT 10
14086: PPUSH
14087: CALL_OW 84
// end ;
14091: PPOPN 4
14093: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14094: LD_EXP 15
14098: PUSH
14099: LD_INT 21000
14101: MINUS
14102: PUSH
14103: LD_OWVAR 1
14107: LESSEQUAL
14108: IFFALSE 14148
14110: GO 14112
14112: DISABLE
// begin powell_warn := true ;
14113: LD_ADDR_EXP 16
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// DialogueOn ;
14121: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14125: LD_EXP 30
14129: PPUSH
14130: LD_STRING D9-Pow-1
14132: PPUSH
14133: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14137: LD_INT 10
14139: PPUSH
14140: CALL_OW 68
// DialogueOff ;
14144: CALL_OW 7
// end ;
14148: END
// every 0 0$1 trigger game_time <= tick do
14149: LD_EXP 15
14153: PUSH
14154: LD_OWVAR 1
14158: LESSEQUAL
14159: IFFALSE 14198
14161: GO 14163
14163: DISABLE
// begin DialogueOn ;
14164: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14168: LD_EXP 30
14172: PPUSH
14173: LD_STRING D9a-Pow-1
14175: PPUSH
14176: CALL_OW 94
// dwait ( 0 0$2 ) ;
14180: LD_INT 70
14182: PPUSH
14183: CALL_OW 68
// DialogueOff ;
14187: CALL_OW 7
// YouLost ( Command ) ;
14191: LD_STRING Command
14193: PPUSH
14194: CALL_OW 104
// end ;
14198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14199: LD_INT 22
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PUSH
14228: LD_INT 0
14230: EQUAL
14231: PUSH
14232: LD_EXP 21
14236: PPUSH
14237: CALL_OW 302
14241: AND
14242: IFFALSE 14974
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
// begin if tick < [ 70 70$00 , 60 60$00 , 55 55$00 ] [ Difficulty ] then
14250: LD_OWVAR 1
14254: PUSH
14255: LD_INT 147000
14257: PUSH
14258: LD_INT 126000
14260: PUSH
14261: LD_INT 115500
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_OWVAR 67
14273: ARRAY
14274: LESS
14275: IFFALSE 14289
// AddMedal ( Time1 , 1 ) else
14277: LD_STRING Time1
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 101
14287: GO 14320
// if not powell_warn then
14289: LD_EXP 16
14293: NOT
14294: IFFALSE 14309
// AddMedal ( Time1 , - 1 ) else
14296: LD_STRING Time1
14298: PPUSH
14299: LD_INT 1
14301: NEG
14302: PPUSH
14303: CALL_OW 101
14307: GO 14320
// AddMedal ( Time1 , - 2 ) ;
14309: LD_STRING Time1
14311: PPUSH
14312: LD_INT 2
14314: NEG
14315: PPUSH
14316: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14320: LD_EXP 17
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_OWVAR 67
14343: ARRAY
14344: GREATEREQUAL
14345: IFFALSE 14360
// AddMedal ( Destroy , - 2 ) else
14347: LD_STRING Destroy
14349: PPUSH
14350: LD_INT 2
14352: NEG
14353: PPUSH
14354: CALL_OW 101
14358: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14360: LD_INT 22
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 50
14382: PUSH
14383: EMPTY
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PUSH
14396: LD_INT 25
14398: GREATEREQUAL
14399: IFFALSE 14414
// AddMedal ( Destroy , - 1 ) else
14401: LD_STRING Destroy
14403: PPUSH
14404: LD_INT 1
14406: NEG
14407: PPUSH
14408: CALL_OW 101
14412: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14414: LD_INT 22
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 3
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 50
14436: PUSH
14437: EMPTY
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PUSH
14450: LD_INT 15
14452: GREATEREQUAL
14453: IFFALSE 14467
// AddMedal ( Destroy , 1 ) else
14455: LD_STRING Destroy
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 101
14465: GO 14477
// AddMedal ( Destroy , 2 ) ;
14467: LD_STRING Destroy
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14477: LD_EXP 13
14481: PPUSH
14482: LD_STRING 11_artifact_captured
14484: PPUSH
14485: CALL_OW 39
// if artifact_get then
14489: LD_EXP 13
14493: IFFALSE 14507
// AddMedal ( Artefact , 1 ) else
14495: LD_STRING Artefact
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 101
14505: GO 14518
// AddMedal ( Artefact , - 1 ) ;
14507: LD_STRING Artefact
14509: PPUSH
14510: LD_INT 1
14512: NEG
14513: PPUSH
14514: CALL_OW 101
// GiveMedals ( MAIN ) ;
14518: LD_STRING MAIN
14520: PPUSH
14521: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14525: LD_ADDR_EXP 20
14529: PUSH
14530: LD_EXP 20
14534: PPUSH
14535: LD_INT 51
14537: PUSH
14538: EMPTY
14539: LIST
14540: PPUSH
14541: CALL_OW 72
14545: ST_TO_ADDR
// tmp := JMM ^ selected ;
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_EXP 21
14555: PUSH
14556: LD_EXP 20
14560: ADD
14561: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14571: LD_VAR 0 1
14575: PUSH
14576: LD_EXP 21
14580: PUSH
14581: LD_EXP 22
14585: PUSH
14586: LD_EXP 23
14590: PUSH
14591: LD_EXP 24
14595: PUSH
14596: LD_EXP 25
14600: PUSH
14601: LD_EXP 26
14605: PUSH
14606: LD_EXP 27
14610: PUSH
14611: LD_EXP 28
14615: PUSH
14616: LD_EXP 29
14620: PUSH
14621: LD_EXP 31
14625: PUSH
14626: LD_EXP 32
14630: PUSH
14631: LD_EXP 33
14635: PUSH
14636: LD_EXP 34
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: DIFF
14656: PPUSH
14657: LD_STRING 11c_others
14659: PPUSH
14660: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14664: LD_EXP 21
14668: PPUSH
14669: LD_EXP 3
14673: PUSH
14674: LD_STRING JMM
14676: STR
14677: PPUSH
14678: CALL_OW 38
// if Lisa then
14682: LD_EXP 22
14686: IFFALSE 14706
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14688: LD_EXP 22
14692: PPUSH
14693: LD_EXP 3
14697: PUSH
14698: LD_STRING Lisa
14700: STR
14701: PPUSH
14702: CALL_OW 38
// if Donaldson then
14706: LD_EXP 23
14710: IFFALSE 14730
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
14712: LD_EXP 23
14716: PPUSH
14717: LD_EXP 3
14721: PUSH
14722: LD_STRING Donaldson
14724: STR
14725: PPUSH
14726: CALL_OW 38
// if Bobby then
14730: LD_EXP 24
14734: IFFALSE 14754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14736: LD_EXP 24
14740: PPUSH
14741: LD_EXP 3
14745: PUSH
14746: LD_STRING Bobby
14748: STR
14749: PPUSH
14750: CALL_OW 38
// if Cyrus then
14754: LD_EXP 25
14758: IFFALSE 14778
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14760: LD_EXP 25
14764: PPUSH
14765: LD_EXP 3
14769: PUSH
14770: LD_STRING Cyrus
14772: STR
14773: PPUSH
14774: CALL_OW 38
// if Denis then
14778: LD_EXP 26
14782: IFFALSE 14802
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
14784: LD_EXP 26
14788: PPUSH
14789: LD_EXP 3
14793: PUSH
14794: LD_STRING Denis
14796: STR
14797: PPUSH
14798: CALL_OW 38
// if Brown then
14802: LD_EXP 27
14806: IFFALSE 14826
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_EXP 3
14817: PUSH
14818: LD_STRING Brown
14820: STR
14821: PPUSH
14822: CALL_OW 38
// if Gladstone then
14826: LD_EXP 28
14830: IFFALSE 14850
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
14832: LD_EXP 28
14836: PPUSH
14837: LD_EXP 3
14841: PUSH
14842: LD_STRING Gladstone
14844: STR
14845: PPUSH
14846: CALL_OW 38
// if Houten then
14850: LD_EXP 29
14854: IFFALSE 14874
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
14856: LD_EXP 29
14860: PPUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_STRING Houten
14868: STR
14869: PPUSH
14870: CALL_OW 38
// if Cornel then
14874: LD_EXP 31
14878: IFFALSE 14898
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
14880: LD_EXP 31
14884: PPUSH
14885: LD_EXP 3
14889: PUSH
14890: LD_STRING Cornel
14892: STR
14893: PPUSH
14894: CALL_OW 38
// if Gary then
14898: LD_EXP 32
14902: IFFALSE 14922
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
14904: LD_EXP 32
14908: PPUSH
14909: LD_EXP 3
14913: PUSH
14914: LD_STRING Gary
14916: STR
14917: PPUSH
14918: CALL_OW 38
// if Frank then
14922: LD_EXP 33
14926: IFFALSE 14946
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
14928: LD_EXP 33
14932: PPUSH
14933: LD_EXP 3
14937: PUSH
14938: LD_STRING Frank
14940: STR
14941: PPUSH
14942: CALL_OW 38
// if Kikuchi then
14946: LD_EXP 34
14950: IFFALSE 14970
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
14952: LD_EXP 34
14956: PPUSH
14957: LD_EXP 3
14961: PUSH
14962: LD_STRING Kikuchi
14964: STR
14965: PPUSH
14966: CALL_OW 38
// YouWin ;
14970: CALL_OW 103
// end ;
14974: PPOPN 1
14976: END
// export function CanSayRand ( side ) ; begin
14977: LD_INT 0
14979: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 52
14987: PUSH
14988: EMPTY
14989: LIST
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_VAR 0 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: LD_EXP 21
15067: PUSH
15068: LD_EXP 33
15072: PUSH
15073: LD_EXP 22
15077: PUSH
15078: LD_EXP 23
15082: PUSH
15083: LD_EXP 24
15087: PUSH
15088: LD_EXP 25
15092: PUSH
15093: LD_EXP 26
15097: PUSH
15098: LD_EXP 27
15102: PUSH
15103: LD_EXP 28
15107: PUSH
15108: LD_EXP 29
15112: PUSH
15113: LD_EXP 30
15117: PUSH
15118: LD_EXP 31
15122: PUSH
15123: LD_EXP 32
15127: PUSH
15128: LD_EXP 34
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: DIFF
15149: ST_TO_ADDR
// end ;
15150: LD_VAR 0 2
15154: RET
// export function SayRand ( sex , dial ) ; begin
15155: LD_INT 0
15157: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15158: LD_ADDR_VAR 0 3
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: EMPTY
15167: LIST
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 26
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 25
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_EXP 21
15256: PUSH
15257: LD_EXP 33
15261: PUSH
15262: LD_EXP 22
15266: PUSH
15267: LD_EXP 23
15271: PUSH
15272: LD_EXP 24
15276: PUSH
15277: LD_EXP 25
15281: PUSH
15282: LD_EXP 26
15286: PUSH
15287: LD_EXP 27
15291: PUSH
15292: LD_EXP 28
15296: PUSH
15297: LD_EXP 29
15301: PUSH
15302: LD_EXP 30
15306: PUSH
15307: LD_EXP 31
15311: PUSH
15312: LD_EXP 32
15316: PUSH
15317: LD_EXP 34
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: DIFF
15338: ST_TO_ADDR
// if not result then
15339: LD_VAR 0 3
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15376
// result := result [ 1 ] ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: ST_TO_ADDR
// Say ( result , dial ) ;
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 88
// end ;
15376: LD_VAR 0 3
15380: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15381: LD_INT 0
15383: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 26
15401: PUSH
15402: LD_VAR 0 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 3
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: LD_EXP 21
15475: PUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_EXP 22
15485: PUSH
15486: LD_EXP 23
15490: PUSH
15491: LD_EXP 24
15495: PUSH
15496: LD_EXP 25
15500: PUSH
15501: LD_EXP 26
15505: PUSH
15506: LD_EXP 27
15510: PUSH
15511: LD_EXP 28
15515: PUSH
15516: LD_EXP 29
15520: PUSH
15521: LD_EXP 30
15525: PUSH
15526: LD_EXP 31
15530: PUSH
15531: LD_EXP 32
15535: PUSH
15536: LD_EXP 34
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_VAR 0 3
15561: ADD
15562: DIFF
15563: ST_TO_ADDR
// if not result then
15564: LD_VAR 0 4
15568: NOT
15569: IFFALSE 15573
// exit ;
15571: GO 15601
// result := result [ 1 ] ;
15573: LD_ADDR_VAR 0 4
15577: PUSH
15578: LD_VAR 0 4
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: ST_TO_ADDR
// Say ( result , dial ) ;
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: CALL_OW 88
// end ; end_of_file
15601: LD_VAR 0 4
15605: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 255
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15629
// artifact_get := true ;
15621: LD_ADDR_EXP 13
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 255
15638: PUSH
15639: LD_INT 2
15641: EQUAL
15642: IFFALSE 15660
// begin artifact_get := false ;
15644: LD_ADDR_EXP 13
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// artifact_stolen := true ;
15652: LD_ADDR_EXP 12
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15660: LD_ADDR_EXP 14
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// end ;
15668: PPOPN 2
15670: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15671: LD_ADDR_EXP 14
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// end ;
15679: PPOPN 2
15681: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15682: LD_VAR 0 1
15686: PUSH
15687: LD_EXP 21
15691: EQUAL
15692: IFFALSE 15703
// begin YouLost ( JMM ) ;
15694: LD_STRING JMM
15696: PPUSH
15697: CALL_OW 104
// exit ;
15701: GO 15835
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 25
15773: PUSH
15774: LD_INT 5
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 8
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: IN
15810: IFFALSE 15826
// loses_counter := loses_counter + 1 ;
15812: LD_ADDR_EXP 17
15816: PUSH
15817: LD_EXP 17
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL 32104 0 1
// end ;
15835: PPOPN 1
15837: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: CALL 33971 0 2
// end ;
15852: PPOPN 2
15854: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL 33287 0 1
// end ;
15864: PPOPN 1
15866: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_VAR 0 4
15886: PPUSH
15887: LD_VAR 0 5
15891: PPUSH
15892: CALL 31443 0 5
// end ;
15896: PPOPN 5
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 31131 0 2
// end ;
15913: PPOPN 2
15915: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 15950
// if not kamikazed then
15933: LD_EXP 11
15937: NOT
15938: IFFALSE 15950
// kamikazed := unit ;
15940: LD_ADDR_EXP 11
15944: PUSH
15945: LD_VAR 0 1
15949: ST_TO_ADDR
// end ;
15950: PPOPN 1
15952: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
15957: LD_VAR 0 1
15961: PPUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: CALL 30976 0 4
// end ;
15981: PPOPN 6
15983: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: CALL 30758 0 3
// end ;
16003: PPOPN 3
16005: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16006: LD_VAR 0 1
16010: PPUSH
16011: LD_VAR 0 2
16015: PPUSH
16016: CALL 31816 0 2
// end ;
16020: PPOPN 2
16022: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL 30466 0 2
// end ;
16037: PPOPN 2
16039: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 30650 0 2
// end ;
16054: PPOPN 2
16056: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL 33053 0 1
// end ;
16066: PPOPN 1
16068: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL 34225 0 2
// end ;
16083: PPOPN 2
16085: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_VAR 0 4
16105: PPUSH
16106: CALL 34434 0 4
// end ; end_of_file
16110: PPOPN 4
16112: END
// every 0 0$1 trigger game do
16113: LD_EXP 2
16117: IFFALSE 16147
16119: GO 16121
16121: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16122: LD_INT 7
16124: PUSH
16125: LD_INT 6
16127: PUSH
16128: LD_INT 4
16130: PUSH
16131: LD_INT 6
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: LD_INT 1750
16142: PPUSH
16143: CALL 16148 0 2
16147: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// if not areas then
16153: LD_VAR 0 1
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16274
// repeat wait ( time ) ;
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_INT 90
16181: PPUSH
16182: CALL_OW 12
16186: ST_TO_ADDR
// for i in areas do
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16251
// begin if Prob ( p ) then
16200: LD_VAR 0 5
16204: PPUSH
16205: CALL_OW 13
16209: IFFALSE 16249
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16211: LD_INT 1
16213: PPUSH
16214: LD_INT 5
16216: PPUSH
16217: CALL_OW 12
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
16234: LD_INT 455
16236: PPUSH
16237: LD_INT 595
16239: PPUSH
16240: CALL_OW 12
16244: PPUSH
16245: CALL_OW 67
// end ; end ;
16249: GO 16197
16251: POP
16252: POP
// time := time + 0 0$3 ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 105
16265: PLUS
16266: ST_TO_ADDR
// until not game ;
16267: LD_EXP 2
16271: NOT
16272: IFFALSE 16162
// end ; end_of_file
16274: LD_VAR 0 3
16278: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit ; export function InitMacro ; var i ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
// skirmish := false ;
16283: LD_ADDR_EXP 47
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// mc_bases := [ ] ;
16291: LD_ADDR_EXP 48
16295: PUSH
16296: EMPTY
16297: ST_TO_ADDR
// mc_sides := [ ] ;
16298: LD_ADDR_EXP 74
16302: PUSH
16303: EMPTY
16304: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16305: LD_ADDR_EXP 49
16309: PUSH
16310: EMPTY
16311: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16312: LD_ADDR_EXP 50
16316: PUSH
16317: EMPTY
16318: ST_TO_ADDR
// mc_need_heal := [ ] ;
16319: LD_ADDR_EXP 51
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// mc_healers := [ ] ;
16326: LD_ADDR_EXP 52
16330: PUSH
16331: EMPTY
16332: ST_TO_ADDR
// mc_build_list := [ ] ;
16333: LD_ADDR_EXP 53
16337: PUSH
16338: EMPTY
16339: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16340: LD_ADDR_EXP 80
16344: PUSH
16345: EMPTY
16346: ST_TO_ADDR
// mc_builders := [ ] ;
16347: LD_ADDR_EXP 54
16351: PUSH
16352: EMPTY
16353: ST_TO_ADDR
// mc_construct_list := [ ] ;
16354: LD_ADDR_EXP 55
16358: PUSH
16359: EMPTY
16360: ST_TO_ADDR
// mc_turret_list := [ ] ;
16361: LD_ADDR_EXP 56
16365: PUSH
16366: EMPTY
16367: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16368: LD_ADDR_EXP 57
16372: PUSH
16373: EMPTY
16374: ST_TO_ADDR
// mc_miners := [ ] ;
16375: LD_ADDR_EXP 62
16379: PUSH
16380: EMPTY
16381: ST_TO_ADDR
// mc_mines := [ ] ;
16382: LD_ADDR_EXP 61
16386: PUSH
16387: EMPTY
16388: ST_TO_ADDR
// mc_minefields := [ ] ;
16389: LD_ADDR_EXP 63
16393: PUSH
16394: EMPTY
16395: ST_TO_ADDR
// mc_crates := [ ] ;
16396: LD_ADDR_EXP 64
16400: PUSH
16401: EMPTY
16402: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16403: LD_ADDR_EXP 65
16407: PUSH
16408: EMPTY
16409: ST_TO_ADDR
// mc_crates_area := [ ] ;
16410: LD_ADDR_EXP 66
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// mc_vehicles := [ ] ;
16417: LD_ADDR_EXP 67
16421: PUSH
16422: EMPTY
16423: ST_TO_ADDR
// mc_attack := [ ] ;
16424: LD_ADDR_EXP 68
16428: PUSH
16429: EMPTY
16430: ST_TO_ADDR
// mc_produce := [ ] ;
16431: LD_ADDR_EXP 69
16435: PUSH
16436: EMPTY
16437: ST_TO_ADDR
// mc_defender := [ ] ;
16438: LD_ADDR_EXP 70
16442: PUSH
16443: EMPTY
16444: ST_TO_ADDR
// mc_parking := [ ] ;
16445: LD_ADDR_EXP 72
16449: PUSH
16450: EMPTY
16451: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16452: LD_ADDR_EXP 58
16456: PUSH
16457: EMPTY
16458: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16459: LD_ADDR_EXP 60
16463: PUSH
16464: EMPTY
16465: ST_TO_ADDR
// mc_scan := [ ] ;
16466: LD_ADDR_EXP 71
16470: PUSH
16471: EMPTY
16472: ST_TO_ADDR
// mc_scan_area := [ ] ;
16473: LD_ADDR_EXP 73
16477: PUSH
16478: EMPTY
16479: ST_TO_ADDR
// mc_tech := [ ] ;
16480: LD_ADDR_EXP 75
16484: PUSH
16485: EMPTY
16486: ST_TO_ADDR
// end ;
16487: LD_VAR 0 1
16491: RET
// export function MC_Start ( ) ; var i ; begin
16492: LD_INT 0
16494: PPUSH
16495: PPUSH
// for i = 1 to mc_bases do
16496: LD_ADDR_VAR 0 2
16500: PUSH
16501: DOUBLE
16502: LD_INT 1
16504: DEC
16505: ST_TO_ADDR
16506: LD_EXP 48
16510: PUSH
16511: FOR_TO
16512: IFFALSE 17357
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
16514: LD_ADDR_EXP 49
16518: PUSH
16519: LD_EXP 49
16523: PPUSH
16524: LD_VAR 0 2
16528: PPUSH
16529: EMPTY
16530: PPUSH
16531: CALL_OW 1
16535: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
16536: LD_ADDR_EXP 50
16540: PUSH
16541: LD_EXP 50
16545: PPUSH
16546: LD_VAR 0 2
16550: PPUSH
16551: EMPTY
16552: PPUSH
16553: CALL_OW 1
16557: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
16558: LD_ADDR_EXP 51
16562: PUSH
16563: LD_EXP 51
16567: PPUSH
16568: LD_VAR 0 2
16572: PPUSH
16573: EMPTY
16574: PPUSH
16575: CALL_OW 1
16579: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
16580: LD_ADDR_EXP 52
16584: PUSH
16585: LD_EXP 52
16589: PPUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: EMPTY
16596: PUSH
16597: EMPTY
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 1
16607: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
16608: LD_ADDR_EXP 53
16612: PUSH
16613: LD_EXP 53
16617: PPUSH
16618: LD_VAR 0 2
16622: PPUSH
16623: EMPTY
16624: PPUSH
16625: CALL_OW 1
16629: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
16630: LD_ADDR_EXP 80
16634: PUSH
16635: LD_EXP 80
16639: PPUSH
16640: LD_VAR 0 2
16644: PPUSH
16645: EMPTY
16646: PPUSH
16647: CALL_OW 1
16651: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
16652: LD_ADDR_EXP 54
16656: PUSH
16657: LD_EXP 54
16661: PPUSH
16662: LD_VAR 0 2
16666: PPUSH
16667: EMPTY
16668: PPUSH
16669: CALL_OW 1
16673: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
16674: LD_ADDR_EXP 55
16678: PUSH
16679: LD_EXP 55
16683: PPUSH
16684: LD_VAR 0 2
16688: PPUSH
16689: EMPTY
16690: PPUSH
16691: CALL_OW 1
16695: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
16696: LD_ADDR_EXP 56
16700: PUSH
16701: LD_EXP 56
16705: PPUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: EMPTY
16712: PPUSH
16713: CALL_OW 1
16717: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
16718: LD_ADDR_EXP 57
16722: PUSH
16723: LD_EXP 57
16727: PPUSH
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_EXP 48
16737: PUSH
16738: LD_VAR 0 2
16742: ARRAY
16743: PPUSH
16744: LD_INT 2
16746: PUSH
16747: LD_INT 30
16749: PUSH
16750: LD_INT 32
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 30
16759: PUSH
16760: LD_INT 31
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 58
16774: PUSH
16775: EMPTY
16776: LIST
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PPUSH
16782: CALL_OW 72
16786: PPUSH
16787: CALL_OW 1
16791: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
16792: LD_ADDR_EXP 58
16796: PUSH
16797: LD_EXP 58
16801: PPUSH
16802: LD_VAR 0 2
16806: PPUSH
16807: EMPTY
16808: PPUSH
16809: CALL_OW 1
16813: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
16814: LD_ADDR_EXP 62
16818: PUSH
16819: LD_EXP 62
16823: PPUSH
16824: LD_VAR 0 2
16828: PPUSH
16829: EMPTY
16830: PPUSH
16831: CALL_OW 1
16835: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
16836: LD_ADDR_EXP 61
16840: PUSH
16841: LD_EXP 61
16845: PPUSH
16846: LD_VAR 0 2
16850: PPUSH
16851: EMPTY
16852: PPUSH
16853: CALL_OW 1
16857: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
16858: LD_ADDR_EXP 63
16862: PUSH
16863: LD_EXP 63
16867: PPUSH
16868: LD_VAR 0 2
16872: PPUSH
16873: EMPTY
16874: PPUSH
16875: CALL_OW 1
16879: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
16880: LD_ADDR_EXP 64
16884: PUSH
16885: LD_EXP 64
16889: PPUSH
16890: LD_VAR 0 2
16894: PPUSH
16895: EMPTY
16896: PPUSH
16897: CALL_OW 1
16901: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
16902: LD_ADDR_EXP 65
16906: PUSH
16907: LD_EXP 65
16911: PPUSH
16912: LD_VAR 0 2
16916: PPUSH
16917: EMPTY
16918: PPUSH
16919: CALL_OW 1
16923: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
16924: LD_ADDR_EXP 66
16928: PUSH
16929: LD_EXP 66
16933: PPUSH
16934: LD_VAR 0 2
16938: PPUSH
16939: EMPTY
16940: PPUSH
16941: CALL_OW 1
16945: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
16946: LD_ADDR_EXP 67
16950: PUSH
16951: LD_EXP 67
16955: PPUSH
16956: LD_VAR 0 2
16960: PPUSH
16961: EMPTY
16962: PPUSH
16963: CALL_OW 1
16967: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
16968: LD_ADDR_EXP 68
16972: PUSH
16973: LD_EXP 68
16977: PPUSH
16978: LD_VAR 0 2
16982: PPUSH
16983: EMPTY
16984: PPUSH
16985: CALL_OW 1
16989: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
16990: LD_ADDR_EXP 69
16994: PUSH
16995: LD_EXP 69
16999: PPUSH
17000: LD_VAR 0 2
17004: PPUSH
17005: EMPTY
17006: PPUSH
17007: CALL_OW 1
17011: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17012: LD_ADDR_EXP 70
17016: PUSH
17017: LD_EXP 70
17021: PPUSH
17022: LD_VAR 0 2
17026: PPUSH
17027: EMPTY
17028: PPUSH
17029: CALL_OW 1
17033: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
17034: LD_ADDR_EXP 59
17038: PUSH
17039: LD_EXP 59
17043: PPUSH
17044: LD_VAR 0 2
17048: PPUSH
17049: LD_INT 0
17051: PPUSH
17052: CALL_OW 1
17056: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
17057: LD_ADDR_EXP 72
17061: PUSH
17062: LD_EXP 72
17066: PPUSH
17067: LD_VAR 0 2
17071: PPUSH
17072: LD_INT 0
17074: PPUSH
17075: CALL_OW 1
17079: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17080: LD_ADDR_EXP 60
17084: PUSH
17085: LD_EXP 60
17089: PPUSH
17090: LD_VAR 0 2
17094: PPUSH
17095: EMPTY
17096: PPUSH
17097: CALL_OW 1
17101: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
17102: LD_ADDR_EXP 71
17106: PUSH
17107: LD_EXP 71
17111: PPUSH
17112: LD_VAR 0 2
17116: PPUSH
17117: LD_INT 0
17119: PPUSH
17120: CALL_OW 1
17124: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
17125: LD_ADDR_EXP 73
17129: PUSH
17130: LD_EXP 73
17134: PPUSH
17135: LD_VAR 0 2
17139: PPUSH
17140: EMPTY
17141: PPUSH
17142: CALL_OW 1
17146: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
17147: LD_ADDR_EXP 76
17151: PUSH
17152: LD_EXP 76
17156: PPUSH
17157: LD_VAR 0 2
17161: PPUSH
17162: LD_INT 0
17164: PPUSH
17165: CALL_OW 1
17169: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
17170: LD_ADDR_EXP 77
17174: PUSH
17175: LD_EXP 77
17179: PPUSH
17180: LD_VAR 0 2
17184: PPUSH
17185: EMPTY
17186: PPUSH
17187: CALL_OW 1
17191: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
17192: LD_ADDR_EXP 78
17196: PUSH
17197: LD_EXP 78
17201: PPUSH
17202: LD_VAR 0 2
17206: PPUSH
17207: EMPTY
17208: PPUSH
17209: CALL_OW 1
17213: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
17214: LD_ADDR_EXP 79
17218: PUSH
17219: LD_EXP 79
17223: PPUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: EMPTY
17230: PPUSH
17231: CALL_OW 1
17235: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
17236: LD_ADDR_EXP 81
17240: PUSH
17241: LD_EXP 81
17245: PPUSH
17246: LD_VAR 0 2
17250: PPUSH
17251: LD_EXP 48
17255: PUSH
17256: LD_VAR 0 2
17260: ARRAY
17261: PPUSH
17262: LD_INT 2
17264: PUSH
17265: LD_INT 30
17267: PUSH
17268: LD_INT 6
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 30
17277: PUSH
17278: LD_INT 7
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 30
17287: PUSH
17288: LD_INT 8
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 72
17305: PPUSH
17306: CALL_OW 1
17310: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
17311: LD_ADDR_EXP 82
17315: PUSH
17316: LD_EXP 82
17320: PPUSH
17321: LD_VAR 0 2
17325: PPUSH
17326: EMPTY
17327: PPUSH
17328: CALL_OW 1
17332: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
17333: LD_ADDR_EXP 83
17337: PUSH
17338: LD_EXP 83
17342: PPUSH
17343: LD_VAR 0 2
17347: PPUSH
17348: EMPTY
17349: PPUSH
17350: CALL_OW 1
17354: ST_TO_ADDR
// end ;
17355: GO 16511
17357: POP
17358: POP
// MC_InitSides ( ) ;
17359: CALL 25963 0 0
// MC_InitResearch ( ) ;
17363: CALL 25702 0 0
// CustomInitMacro ( ) ;
17367: CALL 285 0 0
// skirmish := true ;
17371: LD_ADDR_EXP 47
17375: PUSH
17376: LD_INT 1
17378: ST_TO_ADDR
// end ;
17379: LD_VAR 0 1
17383: RET
// every 0 0$01 trigger skirmish do
17384: LD_EXP 47
17388: IFFALSE 17507
17390: GO 17392
17392: DISABLE
// begin enable ;
17393: ENABLE
// MC_CheckBuildings ( ) ;
17394: CALL 17952 0 0
// MC_CheckPeopleLife ( ) ;
17398: CALL 18077 0 0
// RaiseSailEvent ( 103 ) ;
17402: LD_INT 103
17404: PPUSH
17405: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
17409: LD_INT 104
17411: PPUSH
17412: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
17416: LD_INT 105
17418: PPUSH
17419: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
17423: LD_INT 106
17425: PPUSH
17426: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
17430: LD_INT 107
17432: PPUSH
17433: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
17437: LD_INT 108
17439: PPUSH
17440: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
17444: LD_INT 109
17446: PPUSH
17447: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
17451: LD_INT 110
17453: PPUSH
17454: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
17458: LD_INT 111
17460: PPUSH
17461: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
17465: LD_INT 112
17467: PPUSH
17468: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
17472: LD_INT 120
17474: PPUSH
17475: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
17479: LD_INT 121
17481: PPUSH
17482: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
17486: LD_INT 122
17488: PPUSH
17489: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
17493: LD_INT 123
17495: PPUSH
17496: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
17500: LD_INT 200
17502: PPUSH
17503: CALL_OW 427
// end ;
17507: END
// every 10 trigger skirmish do var i ;
17508: LD_EXP 47
17512: IFFALSE 17611
17514: GO 17516
17516: DISABLE
17517: LD_INT 0
17519: PPUSH
// begin enable ;
17520: ENABLE
// if not mc_bases then
17521: LD_EXP 48
17525: NOT
17526: IFFALSE 17530
// exit ;
17528: GO 17611
// for i = 1 to mc_bases do
17530: LD_ADDR_VAR 0 1
17534: PUSH
17535: DOUBLE
17536: LD_INT 1
17538: DEC
17539: ST_TO_ADDR
17540: LD_EXP 48
17544: PUSH
17545: FOR_TO
17546: IFFALSE 17609
// if mc_mines [ i ] and mc_miners [ i ] then
17548: LD_EXP 61
17552: PUSH
17553: LD_VAR 0 1
17557: ARRAY
17558: PUSH
17559: LD_EXP 62
17563: PUSH
17564: LD_VAR 0 1
17568: ARRAY
17569: AND
17570: IFFALSE 17607
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
17572: LD_EXP 62
17576: PUSH
17577: LD_VAR 0 1
17581: ARRAY
17582: PUSH
17583: LD_INT 1
17585: ARRAY
17586: PPUSH
17587: CALL_OW 255
17591: PPUSH
17592: LD_EXP 61
17596: PUSH
17597: LD_VAR 0 1
17601: ARRAY
17602: PPUSH
17603: CALL 37855 0 2
17607: GO 17545
17609: POP
17610: POP
// end ;
17611: PPOPN 1
17613: END
// on SailEvent ( event ) do begin if event = 101 then
17614: LD_VAR 0 1
17618: PUSH
17619: LD_INT 101
17621: EQUAL
17622: IFFALSE 17628
// MC_RepairBuildings ( ) ;
17624: CALL 18635 0 0
// if event = 102 then
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 102
17635: EQUAL
17636: IFFALSE 17642
// MC_Heal ( ) ;
17638: CALL 19041 0 0
// if event = 103 then
17642: LD_VAR 0 1
17646: PUSH
17647: LD_INT 103
17649: EQUAL
17650: IFFALSE 17656
// MC_Build ( ) ;
17652: CALL 19463 0 0
// if event = 104 then
17656: LD_VAR 0 1
17660: PUSH
17661: LD_INT 104
17663: EQUAL
17664: IFFALSE 17670
// MC_TurretWeapon ( ) ;
17666: CALL 20829 0 0
// if event = 105 then
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 105
17677: EQUAL
17678: IFFALSE 17684
// MC_BuildUpgrade ( ) ;
17680: CALL 20380 0 0
// if event = 106 then
17684: LD_VAR 0 1
17688: PUSH
17689: LD_INT 106
17691: EQUAL
17692: IFFALSE 17698
// MC_PlantMines ( ) ;
17694: CALL 21148 0 0
// if event = 107 then
17698: LD_VAR 0 1
17702: PUSH
17703: LD_INT 107
17705: EQUAL
17706: IFFALSE 17712
// MC_CollectCrates ( ) ;
17708: CALL 22155 0 0
// if event = 108 then
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 108
17719: EQUAL
17720: IFFALSE 17726
// MC_LinkRemoteControl ( ) ;
17722: CALL 23565 0 0
// if event = 109 then
17726: LD_VAR 0 1
17730: PUSH
17731: LD_INT 109
17733: EQUAL
17734: IFFALSE 17740
// MC_ProduceVehicle ( ) ;
17736: CALL 23746 0 0
// if event = 110 then
17740: LD_VAR 0 1
17744: PUSH
17745: LD_INT 110
17747: EQUAL
17748: IFFALSE 17754
// MC_SendAttack ( ) ;
17750: CALL 24227 0 0
// if event = 111 then
17754: LD_VAR 0 1
17758: PUSH
17759: LD_INT 111
17761: EQUAL
17762: IFFALSE 17768
// MC_Defend ( ) ;
17764: CALL 24335 0 0
// if event = 112 then
17768: LD_VAR 0 1
17772: PUSH
17773: LD_INT 112
17775: EQUAL
17776: IFFALSE 17782
// MC_Research ( ) ;
17778: CALL 24733 0 0
// if event = 120 then
17782: LD_VAR 0 1
17786: PUSH
17787: LD_INT 120
17789: EQUAL
17790: IFFALSE 17796
// MC_RepairVehicle ( ) ;
17792: CALL 26055 0 0
// if event = 121 then
17796: LD_VAR 0 1
17800: PUSH
17801: LD_INT 121
17803: EQUAL
17804: IFFALSE 17810
// MC_TameApe ( ) ;
17806: CALL 26724 0 0
// if event = 122 then
17810: LD_VAR 0 1
17814: PUSH
17815: LD_INT 122
17817: EQUAL
17818: IFFALSE 17824
// MC_ChangeApeClass ( ) ;
17820: CALL 27369 0 0
// if event = 123 then
17824: LD_VAR 0 1
17828: PUSH
17829: LD_INT 123
17831: EQUAL
17832: IFFALSE 17838
// MC_Bazooka ( ) ;
17834: CALL 28003 0 0
// if event = 124 then
17838: LD_VAR 0 1
17842: PUSH
17843: LD_INT 124
17845: EQUAL
17846: IFFALSE 17852
// MC_TeleportExit ( ) ;
17848: CALL 28201 0 0
// if event = 200 then
17852: LD_VAR 0 1
17856: PUSH
17857: LD_INT 200
17859: EQUAL
17860: IFFALSE 17866
// MC_Idle ( ) ;
17862: CALL 29225 0 0
// end ;
17866: PPOPN 1
17868: END
// export function MC_Reset ( base , tag ) ; var i ; begin
17869: LD_INT 0
17871: PPUSH
17872: PPUSH
// if not mc_bases [ base ] or not tag then
17873: LD_EXP 48
17877: PUSH
17878: LD_VAR 0 1
17882: ARRAY
17883: NOT
17884: PUSH
17885: LD_VAR 0 2
17889: NOT
17890: OR
17891: IFFALSE 17895
// exit ;
17893: GO 17947
// for i in mc_bases [ base ] do
17895: LD_ADDR_VAR 0 4
17899: PUSH
17900: LD_EXP 48
17904: PUSH
17905: LD_VAR 0 1
17909: ARRAY
17910: PUSH
17911: FOR_IN
17912: IFFALSE 17945
// if GetTag ( i ) = tag then
17914: LD_VAR 0 4
17918: PPUSH
17919: CALL_OW 110
17923: PUSH
17924: LD_VAR 0 2
17928: EQUAL
17929: IFFALSE 17943
// SetTag ( i , 0 ) ;
17931: LD_VAR 0 4
17935: PPUSH
17936: LD_INT 0
17938: PPUSH
17939: CALL_OW 109
17943: GO 17911
17945: POP
17946: POP
// end ;
17947: LD_VAR 0 3
17951: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
17952: LD_INT 0
17954: PPUSH
17955: PPUSH
17956: PPUSH
// if not mc_bases then
17957: LD_EXP 48
17961: NOT
17962: IFFALSE 17966
// exit ;
17964: GO 18072
// for i = 1 to mc_bases do
17966: LD_ADDR_VAR 0 2
17970: PUSH
17971: DOUBLE
17972: LD_INT 1
17974: DEC
17975: ST_TO_ADDR
17976: LD_EXP 48
17980: PUSH
17981: FOR_TO
17982: IFFALSE 18063
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17984: LD_ADDR_VAR 0 3
17988: PUSH
17989: LD_EXP 48
17993: PUSH
17994: LD_VAR 0 2
17998: ARRAY
17999: PPUSH
18000: LD_INT 21
18002: PUSH
18003: LD_INT 3
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: LD_INT 24
18015: PUSH
18016: LD_INT 1000
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 72
18035: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
18036: LD_ADDR_EXP 49
18040: PUSH
18041: LD_EXP 49
18045: PPUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: CALL_OW 1
18060: ST_TO_ADDR
// end ;
18061: GO 17981
18063: POP
18064: POP
// RaiseSailEvent ( 101 ) ;
18065: LD_INT 101
18067: PPUSH
18068: CALL_OW 427
// end ;
18072: LD_VAR 0 1
18076: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
18077: LD_INT 0
18079: PPUSH
18080: PPUSH
18081: PPUSH
18082: PPUSH
18083: PPUSH
18084: PPUSH
18085: PPUSH
// if not mc_bases then
18086: LD_EXP 48
18090: NOT
18091: IFFALSE 18095
// exit ;
18093: GO 18630
// for i = 1 to mc_bases do
18095: LD_ADDR_VAR 0 2
18099: PUSH
18100: DOUBLE
18101: LD_INT 1
18103: DEC
18104: ST_TO_ADDR
18105: LD_EXP 48
18109: PUSH
18110: FOR_TO
18111: IFFALSE 18621
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
18113: LD_ADDR_VAR 0 5
18117: PUSH
18118: LD_EXP 48
18122: PUSH
18123: LD_VAR 0 2
18127: ARRAY
18128: PUSH
18129: LD_EXP 77
18133: PUSH
18134: LD_VAR 0 2
18138: ARRAY
18139: UNION
18140: PPUSH
18141: LD_INT 21
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 1
18153: PUSH
18154: LD_INT 3
18156: PUSH
18157: LD_INT 54
18159: PUSH
18160: EMPTY
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: PUSH
18167: LD_INT 3
18169: PUSH
18170: LD_INT 24
18172: PUSH
18173: LD_INT 700
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PPUSH
18193: CALL_OW 72
18197: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
18198: LD_ADDR_VAR 0 6
18202: PUSH
18203: LD_EXP 48
18207: PUSH
18208: LD_VAR 0 2
18212: ARRAY
18213: PPUSH
18214: LD_INT 21
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 1
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: LD_INT 54
18232: PUSH
18233: EMPTY
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 3
18242: PUSH
18243: LD_INT 24
18245: PUSH
18246: LD_INT 250
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PPUSH
18266: CALL_OW 72
18270: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
18271: LD_ADDR_VAR 0 7
18275: PUSH
18276: LD_VAR 0 5
18280: PUSH
18281: LD_VAR 0 6
18285: DIFF
18286: ST_TO_ADDR
// if not need_heal_1 then
18287: LD_VAR 0 6
18291: NOT
18292: IFFALSE 18325
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
18294: LD_ADDR_EXP 51
18298: PUSH
18299: LD_EXP 51
18303: PPUSH
18304: LD_VAR 0 2
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PPUSH
18316: EMPTY
18317: PPUSH
18318: CALL 41197 0 3
18322: ST_TO_ADDR
18323: GO 18357
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
18325: LD_ADDR_EXP 51
18329: PUSH
18330: LD_EXP 51
18334: PPUSH
18335: LD_VAR 0 2
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PPUSH
18347: LD_VAR 0 6
18351: PPUSH
18352: CALL 41197 0 3
18356: ST_TO_ADDR
// if not need_heal_2 then
18357: LD_VAR 0 7
18361: NOT
18362: IFFALSE 18395
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
18364: LD_ADDR_EXP 51
18368: PUSH
18369: LD_EXP 51
18373: PPUSH
18374: LD_VAR 0 2
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: EMPTY
18387: PPUSH
18388: CALL 41197 0 3
18392: ST_TO_ADDR
18393: GO 18427
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
18395: LD_ADDR_EXP 51
18399: PUSH
18400: LD_EXP 51
18404: PPUSH
18405: LD_VAR 0 2
18409: PUSH
18410: LD_INT 2
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: LD_VAR 0 7
18421: PPUSH
18422: CALL 41197 0 3
18426: ST_TO_ADDR
// if need_heal_2 then
18427: LD_VAR 0 7
18431: IFFALSE 18603
// for j in need_heal_2 do
18433: LD_ADDR_VAR 0 3
18437: PUSH
18438: LD_VAR 0 7
18442: PUSH
18443: FOR_IN
18444: IFFALSE 18601
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
18446: LD_ADDR_VAR 0 5
18450: PUSH
18451: LD_EXP 48
18455: PUSH
18456: LD_VAR 0 2
18460: ARRAY
18461: PPUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 30
18467: PUSH
18468: LD_INT 6
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 30
18477: PUSH
18478: LD_INT 7
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 30
18487: PUSH
18488: LD_INT 8
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 30
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 30
18507: PUSH
18508: LD_INT 1
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 25
18517: PUSH
18518: LD_INT 4
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PPUSH
18534: CALL_OW 72
18538: ST_TO_ADDR
// if tmp then
18539: LD_VAR 0 5
18543: IFFALSE 18599
// begin k := NearestUnitToUnit ( tmp , j ) ;
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: LD_VAR 0 5
18554: PPUSH
18555: LD_VAR 0 3
18559: PPUSH
18560: CALL_OW 74
18564: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
18565: LD_VAR 0 3
18569: PPUSH
18570: LD_VAR 0 4
18574: PPUSH
18575: CALL_OW 296
18579: PUSH
18580: LD_INT 7
18582: GREATER
18583: IFFALSE 18599
// ComMoveUnit ( j , k ) ;
18585: LD_VAR 0 3
18589: PPUSH
18590: LD_VAR 0 4
18594: PPUSH
18595: CALL_OW 112
// end ; end ;
18599: GO 18443
18601: POP
18602: POP
// if not need_heal_1 and not need_heal_2 then
18603: LD_VAR 0 6
18607: NOT
18608: PUSH
18609: LD_VAR 0 7
18613: NOT
18614: AND
18615: IFFALSE 18619
// continue ;
18617: GO 18110
// end ;
18619: GO 18110
18621: POP
18622: POP
// RaiseSailEvent ( 102 ) ;
18623: LD_INT 102
18625: PPUSH
18626: CALL_OW 427
// end ;
18630: LD_VAR 0 1
18634: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
18635: LD_INT 0
18637: PPUSH
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
// if not mc_bases then
18642: LD_EXP 48
18646: NOT
18647: IFFALSE 18651
// exit ;
18649: GO 19036
// for i = 1 to mc_bases do
18651: LD_ADDR_VAR 0 2
18655: PUSH
18656: DOUBLE
18657: LD_INT 1
18659: DEC
18660: ST_TO_ADDR
18661: LD_EXP 48
18665: PUSH
18666: FOR_TO
18667: IFFALSE 19034
// begin if not mc_building_need_repair [ i ] then
18669: LD_EXP 49
18673: PUSH
18674: LD_VAR 0 2
18678: ARRAY
18679: NOT
18680: IFFALSE 18718
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
18682: LD_ADDR_EXP 50
18686: PUSH
18687: LD_EXP 50
18691: PPUSH
18692: LD_VAR 0 2
18696: PPUSH
18697: EMPTY
18698: PPUSH
18699: CALL_OW 1
18703: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
18704: LD_VAR 0 2
18708: PPUSH
18709: LD_INT 101
18711: PPUSH
18712: CALL 17869 0 2
// continue ;
18716: GO 18666
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
18718: LD_ADDR_EXP 54
18722: PUSH
18723: LD_EXP 54
18727: PPUSH
18728: LD_VAR 0 2
18732: PPUSH
18733: EMPTY
18734: PPUSH
18735: CALL_OW 1
18739: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
18740: LD_VAR 0 2
18744: PPUSH
18745: LD_INT 103
18747: PPUSH
18748: CALL 17869 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
18752: LD_ADDR_VAR 0 5
18756: PUSH
18757: LD_EXP 48
18761: PUSH
18762: LD_VAR 0 2
18766: ARRAY
18767: PUSH
18768: LD_EXP 77
18772: PUSH
18773: LD_VAR 0 2
18777: ARRAY
18778: UNION
18779: PPUSH
18780: LD_INT 2
18782: PUSH
18783: LD_INT 25
18785: PUSH
18786: LD_INT 2
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 25
18795: PUSH
18796: LD_INT 16
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: PPUSH
18811: CALL_OW 72
18815: ST_TO_ADDR
// if not tmp then
18816: LD_VAR 0 5
18820: NOT
18821: IFFALSE 18825
// continue ;
18823: GO 18666
// for j in tmp do
18825: LD_ADDR_VAR 0 3
18829: PUSH
18830: LD_VAR 0 5
18834: PUSH
18835: FOR_IN
18836: IFFALSE 19030
// begin if mc_need_heal [ i ] then
18838: LD_EXP 51
18842: PUSH
18843: LD_VAR 0 2
18847: ARRAY
18848: IFFALSE 18896
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
18850: LD_VAR 0 3
18854: PUSH
18855: LD_EXP 51
18859: PUSH
18860: LD_VAR 0 2
18864: ARRAY
18865: PUSH
18866: LD_INT 1
18868: ARRAY
18869: IN
18870: PUSH
18871: LD_VAR 0 3
18875: PUSH
18876: LD_EXP 51
18880: PUSH
18881: LD_VAR 0 2
18885: ARRAY
18886: PUSH
18887: LD_INT 2
18889: ARRAY
18890: IN
18891: OR
18892: IFFALSE 18896
// continue ;
18894: GO 18835
// if IsInUnit ( j ) then
18896: LD_VAR 0 3
18900: PPUSH
18901: CALL_OW 310
18905: IFFALSE 18916
// ComExitBuilding ( j ) ;
18907: LD_VAR 0 3
18911: PPUSH
18912: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
18916: LD_VAR 0 3
18920: PUSH
18921: LD_EXP 50
18925: PUSH
18926: LD_VAR 0 2
18930: ARRAY
18931: IN
18932: NOT
18933: IFFALSE 18991
// begin SetTag ( j , 101 ) ;
18935: LD_VAR 0 3
18939: PPUSH
18940: LD_INT 101
18942: PPUSH
18943: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
18947: LD_ADDR_EXP 50
18951: PUSH
18952: LD_EXP 50
18956: PPUSH
18957: LD_VAR 0 2
18961: PUSH
18962: LD_EXP 50
18966: PUSH
18967: LD_VAR 0 2
18971: ARRAY
18972: PUSH
18973: LD_INT 1
18975: PLUS
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PPUSH
18981: LD_VAR 0 3
18985: PPUSH
18986: CALL 41197 0 3
18990: ST_TO_ADDR
// end ; Wait ( 3 ) ;
18991: LD_INT 3
18993: PPUSH
18994: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
18998: LD_VAR 0 3
19002: PPUSH
19003: LD_EXP 49
19007: PUSH
19008: LD_VAR 0 2
19012: ARRAY
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 74
19023: PPUSH
19024: CALL_OW 130
// end ;
19028: GO 18835
19030: POP
19031: POP
// end ;
19032: GO 18666
19034: POP
19035: POP
// end ;
19036: LD_VAR 0 1
19040: RET
// export function MC_Heal ; var i , j , tmp ; begin
19041: LD_INT 0
19043: PPUSH
19044: PPUSH
19045: PPUSH
19046: PPUSH
// if not mc_bases then
19047: LD_EXP 48
19051: NOT
19052: IFFALSE 19056
// exit ;
19054: GO 19458
// for i = 1 to mc_bases do
19056: LD_ADDR_VAR 0 2
19060: PUSH
19061: DOUBLE
19062: LD_INT 1
19064: DEC
19065: ST_TO_ADDR
19066: LD_EXP 48
19070: PUSH
19071: FOR_TO
19072: IFFALSE 19456
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
19074: LD_EXP 51
19078: PUSH
19079: LD_VAR 0 2
19083: ARRAY
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: NOT
19089: PUSH
19090: LD_EXP 51
19094: PUSH
19095: LD_VAR 0 2
19099: ARRAY
19100: PUSH
19101: LD_INT 2
19103: ARRAY
19104: NOT
19105: AND
19106: IFFALSE 19144
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
19108: LD_ADDR_EXP 52
19112: PUSH
19113: LD_EXP 52
19117: PPUSH
19118: LD_VAR 0 2
19122: PPUSH
19123: EMPTY
19124: PPUSH
19125: CALL_OW 1
19129: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
19130: LD_VAR 0 2
19134: PPUSH
19135: LD_INT 102
19137: PPUSH
19138: CALL 17869 0 2
// continue ;
19142: GO 19071
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
19144: LD_ADDR_VAR 0 4
19148: PUSH
19149: LD_EXP 48
19153: PUSH
19154: LD_VAR 0 2
19158: ARRAY
19159: PPUSH
19160: LD_INT 25
19162: PUSH
19163: LD_INT 4
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 72
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 4
19179: NOT
19180: IFFALSE 19184
// continue ;
19182: GO 19071
// if mc_taming [ i ] then
19184: LD_EXP 79
19188: PUSH
19189: LD_VAR 0 2
19193: ARRAY
19194: IFFALSE 19218
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
19196: LD_ADDR_EXP 79
19200: PUSH
19201: LD_EXP 79
19205: PPUSH
19206: LD_VAR 0 2
19210: PPUSH
19211: EMPTY
19212: PPUSH
19213: CALL_OW 1
19217: ST_TO_ADDR
// for j in tmp do
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_VAR 0 4
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19452
// begin if IsInUnit ( j ) then
19231: LD_VAR 0 3
19235: PPUSH
19236: CALL_OW 310
19240: IFFALSE 19251
// ComExitBuilding ( j ) ;
19242: LD_VAR 0 3
19246: PPUSH
19247: CALL_OW 122
// if not j in mc_healers [ i ] then
19251: LD_VAR 0 3
19255: PUSH
19256: LD_EXP 52
19260: PUSH
19261: LD_VAR 0 2
19265: ARRAY
19266: IN
19267: NOT
19268: IFFALSE 19314
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
19270: LD_ADDR_EXP 52
19274: PUSH
19275: LD_EXP 52
19279: PPUSH
19280: LD_VAR 0 2
19284: PUSH
19285: LD_EXP 52
19289: PUSH
19290: LD_VAR 0 2
19294: ARRAY
19295: PUSH
19296: LD_INT 1
19298: PLUS
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: LD_VAR 0 3
19308: PPUSH
19309: CALL 41197 0 3
19313: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 110
19323: PUSH
19324: LD_INT 102
19326: NONEQUAL
19327: IFFALSE 19341
// SetTag ( j , 102 ) ;
19329: LD_VAR 0 3
19333: PPUSH
19334: LD_INT 102
19336: PPUSH
19337: CALL_OW 109
// Wait ( 3 ) ;
19341: LD_INT 3
19343: PPUSH
19344: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
19348: LD_EXP 51
19352: PUSH
19353: LD_VAR 0 2
19357: ARRAY
19358: PUSH
19359: LD_INT 1
19361: ARRAY
19362: IFFALSE 19394
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
19364: LD_VAR 0 3
19368: PPUSH
19369: LD_EXP 51
19373: PUSH
19374: LD_VAR 0 2
19378: ARRAY
19379: PUSH
19380: LD_INT 1
19382: ARRAY
19383: PUSH
19384: LD_INT 1
19386: ARRAY
19387: PPUSH
19388: CALL_OW 128
19392: GO 19450
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 314
19403: NOT
19404: PUSH
19405: LD_EXP 51
19409: PUSH
19410: LD_VAR 0 2
19414: ARRAY
19415: PUSH
19416: LD_INT 2
19418: ARRAY
19419: AND
19420: IFFALSE 19450
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
19422: LD_VAR 0 3
19426: PPUSH
19427: LD_EXP 51
19431: PUSH
19432: LD_VAR 0 2
19436: ARRAY
19437: PUSH
19438: LD_INT 2
19440: ARRAY
19441: PUSH
19442: LD_INT 1
19444: ARRAY
19445: PPUSH
19446: CALL_OW 128
// end ;
19450: GO 19228
19452: POP
19453: POP
// end ;
19454: GO 19071
19456: POP
19457: POP
// end ;
19458: LD_VAR 0 1
19462: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
// if not mc_bases then
19469: LD_EXP 48
19473: NOT
19474: IFFALSE 19478
// exit ;
19476: GO 20375
// for i = 1 to mc_bases do
19478: LD_ADDR_VAR 0 2
19482: PUSH
19483: DOUBLE
19484: LD_INT 1
19486: DEC
19487: ST_TO_ADDR
19488: LD_EXP 48
19492: PUSH
19493: FOR_TO
19494: IFFALSE 20373
// begin if mc_scan [ i ] then
19496: LD_EXP 71
19500: PUSH
19501: LD_VAR 0 2
19505: ARRAY
19506: IFFALSE 19510
// continue ;
19508: GO 19493
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
19510: LD_EXP 53
19514: PUSH
19515: LD_VAR 0 2
19519: ARRAY
19520: NOT
19521: PUSH
19522: LD_EXP 55
19526: PUSH
19527: LD_VAR 0 2
19531: ARRAY
19532: NOT
19533: AND
19534: PUSH
19535: LD_EXP 54
19539: PUSH
19540: LD_VAR 0 2
19544: ARRAY
19545: AND
19546: IFFALSE 19584
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
19548: LD_ADDR_EXP 54
19552: PUSH
19553: LD_EXP 54
19557: PPUSH
19558: LD_VAR 0 2
19562: PPUSH
19563: EMPTY
19564: PPUSH
19565: CALL_OW 1
19569: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
19570: LD_VAR 0 2
19574: PPUSH
19575: LD_INT 103
19577: PPUSH
19578: CALL 17869 0 2
// continue ;
19582: GO 19493
// end ; if mc_construct_list [ i ] then
19584: LD_EXP 55
19588: PUSH
19589: LD_VAR 0 2
19593: ARRAY
19594: IFFALSE 19814
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
19596: LD_ADDR_VAR 0 4
19600: PUSH
19601: LD_EXP 48
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: PPUSH
19612: LD_INT 25
19614: PUSH
19615: LD_INT 2
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PPUSH
19622: CALL_OW 72
19626: PUSH
19627: LD_EXP 50
19631: PUSH
19632: LD_VAR 0 2
19636: ARRAY
19637: DIFF
19638: ST_TO_ADDR
// if not tmp then
19639: LD_VAR 0 4
19643: NOT
19644: IFFALSE 19648
// continue ;
19646: GO 19493
// for j in tmp do
19648: LD_ADDR_VAR 0 3
19652: PUSH
19653: LD_VAR 0 4
19657: PUSH
19658: FOR_IN
19659: IFFALSE 19810
// begin if not mc_builders [ i ] then
19661: LD_EXP 54
19665: PUSH
19666: LD_VAR 0 2
19670: ARRAY
19671: NOT
19672: IFFALSE 19730
// begin SetTag ( j , 103 ) ;
19674: LD_VAR 0 3
19678: PPUSH
19679: LD_INT 103
19681: PPUSH
19682: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
19686: LD_ADDR_EXP 54
19690: PUSH
19691: LD_EXP 54
19695: PPUSH
19696: LD_VAR 0 2
19700: PUSH
19701: LD_EXP 54
19705: PUSH
19706: LD_VAR 0 2
19710: ARRAY
19711: PUSH
19712: LD_INT 1
19714: PLUS
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: CALL 41197 0 3
19729: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
19730: LD_VAR 0 3
19734: PPUSH
19735: CALL_OW 310
19739: IFFALSE 19750
// ComExitBuilding ( j ) ;
19741: LD_VAR 0 3
19745: PPUSH
19746: CALL_OW 122
// wait ( 3 ) ;
19750: LD_INT 3
19752: PPUSH
19753: CALL_OW 67
// if not mc_construct_list [ i ] then
19757: LD_EXP 55
19761: PUSH
19762: LD_VAR 0 2
19766: ARRAY
19767: NOT
19768: IFFALSE 19772
// break ;
19770: GO 19810
// if not HasTask ( j ) then
19772: LD_VAR 0 3
19776: PPUSH
19777: CALL_OW 314
19781: NOT
19782: IFFALSE 19808
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
19784: LD_VAR 0 3
19788: PPUSH
19789: LD_EXP 55
19793: PUSH
19794: LD_VAR 0 2
19798: ARRAY
19799: PUSH
19800: LD_INT 1
19802: ARRAY
19803: PPUSH
19804: CALL 43603 0 2
// end ;
19808: GO 19658
19810: POP
19811: POP
// end else
19812: GO 20371
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
19814: LD_EXP 53
19818: PUSH
19819: LD_VAR 0 2
19823: ARRAY
19824: PUSH
19825: LD_EXP 48
19829: PUSH
19830: LD_VAR 0 2
19834: ARRAY
19835: PPUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 30
19841: PUSH
19842: LD_INT 0
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: LIST
19863: PPUSH
19864: CALL_OW 72
19868: AND
19869: IFFALSE 20371
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
19871: LD_EXP 48
19875: PUSH
19876: LD_VAR 0 2
19880: ARRAY
19881: PPUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 30
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: LIST
19909: PPUSH
19910: CALL_OW 72
19914: PUSH
19915: LD_INT 1
19917: ARRAY
19918: PPUSH
19919: LD_EXP 53
19923: PUSH
19924: LD_VAR 0 2
19928: ARRAY
19929: PUSH
19930: LD_INT 1
19932: ARRAY
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_EXP 53
19942: PUSH
19943: LD_VAR 0 2
19947: ARRAY
19948: PUSH
19949: LD_INT 1
19951: ARRAY
19952: PUSH
19953: LD_INT 2
19955: ARRAY
19956: PPUSH
19957: LD_EXP 53
19961: PUSH
19962: LD_VAR 0 2
19966: ARRAY
19967: PUSH
19968: LD_INT 1
19970: ARRAY
19971: PUSH
19972: LD_INT 3
19974: ARRAY
19975: PPUSH
19976: LD_EXP 53
19980: PUSH
19981: LD_VAR 0 2
19985: ARRAY
19986: PUSH
19987: LD_INT 1
19989: ARRAY
19990: PUSH
19991: LD_INT 4
19993: ARRAY
19994: PPUSH
19995: CALL 47707 0 5
19999: IFFALSE 20280
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
20001: LD_ADDR_VAR 0 4
20005: PUSH
20006: LD_EXP 48
20010: PUSH
20011: LD_VAR 0 2
20015: ARRAY
20016: PPUSH
20017: LD_INT 25
20019: PUSH
20020: LD_INT 2
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PPUSH
20027: CALL_OW 72
20031: PUSH
20032: LD_EXP 50
20036: PUSH
20037: LD_VAR 0 2
20041: ARRAY
20042: DIFF
20043: ST_TO_ADDR
// if not tmp then
20044: LD_VAR 0 4
20048: NOT
20049: IFFALSE 20053
// continue ;
20051: GO 19493
// for j in tmp do
20053: LD_ADDR_VAR 0 3
20057: PUSH
20058: LD_VAR 0 4
20062: PUSH
20063: FOR_IN
20064: IFFALSE 20276
// begin if not mc_builders [ i ] then
20066: LD_EXP 54
20070: PUSH
20071: LD_VAR 0 2
20075: ARRAY
20076: NOT
20077: IFFALSE 20135
// begin SetTag ( j , 103 ) ;
20079: LD_VAR 0 3
20083: PPUSH
20084: LD_INT 103
20086: PPUSH
20087: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
20091: LD_ADDR_EXP 54
20095: PUSH
20096: LD_EXP 54
20100: PPUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_EXP 54
20110: PUSH
20111: LD_VAR 0 2
20115: ARRAY
20116: PUSH
20117: LD_INT 1
20119: PLUS
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PPUSH
20125: LD_VAR 0 3
20129: PPUSH
20130: CALL 41197 0 3
20134: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
20135: LD_VAR 0 3
20139: PPUSH
20140: CALL_OW 310
20144: IFFALSE 20155
// ComExitBuilding ( j ) ;
20146: LD_VAR 0 3
20150: PPUSH
20151: CALL_OW 122
// wait ( 3 ) ;
20155: LD_INT 3
20157: PPUSH
20158: CALL_OW 67
// if not mc_build_list [ i ] then
20162: LD_EXP 53
20166: PUSH
20167: LD_VAR 0 2
20171: ARRAY
20172: NOT
20173: IFFALSE 20177
// break ;
20175: GO 20276
// if not HasTask ( j ) then
20177: LD_VAR 0 3
20181: PPUSH
20182: CALL_OW 314
20186: NOT
20187: IFFALSE 20274
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: LD_EXP 53
20198: PUSH
20199: LD_VAR 0 2
20203: ARRAY
20204: PUSH
20205: LD_INT 1
20207: ARRAY
20208: PUSH
20209: LD_INT 1
20211: ARRAY
20212: PPUSH
20213: LD_EXP 53
20217: PUSH
20218: LD_VAR 0 2
20222: ARRAY
20223: PUSH
20224: LD_INT 1
20226: ARRAY
20227: PUSH
20228: LD_INT 2
20230: ARRAY
20231: PPUSH
20232: LD_EXP 53
20236: PUSH
20237: LD_VAR 0 2
20241: ARRAY
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: PUSH
20247: LD_INT 3
20249: ARRAY
20250: PPUSH
20251: LD_EXP 53
20255: PUSH
20256: LD_VAR 0 2
20260: ARRAY
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PUSH
20266: LD_INT 4
20268: ARRAY
20269: PPUSH
20270: CALL_OW 145
// end ;
20274: GO 20063
20276: POP
20277: POP
// end else
20278: GO 20371
// TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
20280: LD_EXP 48
20284: PUSH
20285: LD_VAR 0 2
20289: ARRAY
20290: PPUSH
20291: LD_EXP 53
20295: PUSH
20296: LD_VAR 0 2
20300: ARRAY
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: PUSH
20306: LD_INT 1
20308: ARRAY
20309: PPUSH
20310: LD_EXP 53
20314: PUSH
20315: LD_VAR 0 2
20319: ARRAY
20320: PUSH
20321: LD_INT 1
20323: ARRAY
20324: PUSH
20325: LD_INT 2
20327: ARRAY
20328: PPUSH
20329: LD_EXP 53
20333: PUSH
20334: LD_VAR 0 2
20338: ARRAY
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: PUSH
20344: LD_INT 3
20346: ARRAY
20347: PPUSH
20348: LD_EXP 53
20352: PUSH
20353: LD_VAR 0 2
20357: ARRAY
20358: PUSH
20359: LD_INT 1
20361: ARRAY
20362: PUSH
20363: LD_INT 4
20365: ARRAY
20366: PPUSH
20367: CALL 47391 0 5
// end ;
20371: GO 19493
20373: POP
20374: POP
// end ;
20375: LD_VAR 0 1
20379: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
20380: LD_INT 0
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
// if not mc_bases then
20388: LD_EXP 48
20392: NOT
20393: IFFALSE 20397
// exit ;
20395: GO 20824
// for i = 1 to mc_bases do
20397: LD_ADDR_VAR 0 2
20401: PUSH
20402: DOUBLE
20403: LD_INT 1
20405: DEC
20406: ST_TO_ADDR
20407: LD_EXP 48
20411: PUSH
20412: FOR_TO
20413: IFFALSE 20822
// begin tmp := mc_build_upgrade [ i ] ;
20415: LD_ADDR_VAR 0 4
20419: PUSH
20420: LD_EXP 80
20424: PUSH
20425: LD_VAR 0 2
20429: ARRAY
20430: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
20431: LD_ADDR_VAR 0 6
20435: PUSH
20436: LD_EXP 81
20440: PUSH
20441: LD_VAR 0 2
20445: ARRAY
20446: PPUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 30
20452: PUSH
20453: LD_INT 6
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: PUSH
20460: LD_INT 30
20462: PUSH
20463: LD_INT 7
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: LIST
20474: PPUSH
20475: CALL_OW 72
20479: ST_TO_ADDR
// if not tmp and not lab then
20480: LD_VAR 0 4
20484: NOT
20485: PUSH
20486: LD_VAR 0 6
20490: NOT
20491: AND
20492: IFFALSE 20496
// continue ;
20494: GO 20412
// if tmp then
20496: LD_VAR 0 4
20500: IFFALSE 20620
// for j in tmp do
20502: LD_ADDR_VAR 0 3
20506: PUSH
20507: LD_VAR 0 4
20511: PUSH
20512: FOR_IN
20513: IFFALSE 20618
// begin if UpgradeCost ( j ) then
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL 47051 0 1
20524: IFFALSE 20616
// begin ComUpgrade ( j ) ;
20526: LD_VAR 0 3
20530: PPUSH
20531: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
20535: LD_ADDR_EXP 80
20539: PUSH
20540: LD_EXP 80
20544: PPUSH
20545: LD_VAR 0 2
20549: PPUSH
20550: LD_EXP 80
20554: PUSH
20555: LD_VAR 0 2
20559: ARRAY
20560: PUSH
20561: LD_VAR 0 3
20565: DIFF
20566: PPUSH
20567: CALL_OW 1
20571: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
20572: LD_ADDR_EXP 55
20576: PUSH
20577: LD_EXP 55
20581: PPUSH
20582: LD_VAR 0 2
20586: PUSH
20587: LD_EXP 55
20591: PUSH
20592: LD_VAR 0 2
20596: ARRAY
20597: PUSH
20598: LD_INT 1
20600: PLUS
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PPUSH
20606: LD_VAR 0 3
20610: PPUSH
20611: CALL 41197 0 3
20615: ST_TO_ADDR
// end ; end ;
20616: GO 20512
20618: POP
20619: POP
// if not lab or not mc_lab_upgrade [ i ] then
20620: LD_VAR 0 6
20624: NOT
20625: PUSH
20626: LD_EXP 82
20630: PUSH
20631: LD_VAR 0 2
20635: ARRAY
20636: NOT
20637: OR
20638: IFFALSE 20642
// continue ;
20640: GO 20412
// for j in lab do
20642: LD_ADDR_VAR 0 3
20646: PUSH
20647: LD_VAR 0 6
20651: PUSH
20652: FOR_IN
20653: IFFALSE 20818
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
20655: LD_VAR 0 3
20659: PPUSH
20660: CALL_OW 266
20664: PUSH
20665: LD_INT 6
20667: PUSH
20668: LD_INT 7
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: IN
20675: PUSH
20676: LD_VAR 0 3
20680: PPUSH
20681: CALL_OW 461
20685: PUSH
20686: LD_INT 1
20688: NONEQUAL
20689: AND
20690: IFFALSE 20816
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
20692: LD_VAR 0 3
20696: PPUSH
20697: LD_EXP 82
20701: PUSH
20702: LD_VAR 0 2
20706: ARRAY
20707: PUSH
20708: LD_INT 1
20710: ARRAY
20711: PPUSH
20712: CALL 47256 0 2
20716: IFFALSE 20816
// begin ComCancel ( j ) ;
20718: LD_VAR 0 3
20722: PPUSH
20723: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
20727: LD_VAR 0 3
20731: PPUSH
20732: LD_EXP 82
20736: PUSH
20737: LD_VAR 0 2
20741: ARRAY
20742: PUSH
20743: LD_INT 1
20745: ARRAY
20746: PPUSH
20747: CALL_OW 207
// if not j in mc_construct_list [ i ] then
20751: LD_VAR 0 3
20755: PUSH
20756: LD_EXP 55
20760: PUSH
20761: LD_VAR 0 2
20765: ARRAY
20766: IN
20767: NOT
20768: IFFALSE 20814
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
20770: LD_ADDR_EXP 55
20774: PUSH
20775: LD_EXP 55
20779: PPUSH
20780: LD_VAR 0 2
20784: PUSH
20785: LD_EXP 55
20789: PUSH
20790: LD_VAR 0 2
20794: ARRAY
20795: PUSH
20796: LD_INT 1
20798: PLUS
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: CALL 41197 0 3
20813: ST_TO_ADDR
// break ;
20814: GO 20818
// end ; end ; end ;
20816: GO 20652
20818: POP
20819: POP
// end ;
20820: GO 20412
20822: POP
20823: POP
// end ;
20824: LD_VAR 0 1
20828: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
20834: PPUSH
20835: PPUSH
20836: PPUSH
20837: PPUSH
// if not mc_bases then
20838: LD_EXP 48
20842: NOT
20843: IFFALSE 20847
// exit ;
20845: GO 21143
// for i = 1 to mc_bases do
20847: LD_ADDR_VAR 0 2
20851: PUSH
20852: DOUBLE
20853: LD_INT 1
20855: DEC
20856: ST_TO_ADDR
20857: LD_EXP 48
20861: PUSH
20862: FOR_TO
20863: IFFALSE 21141
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
20865: LD_EXP 56
20869: PUSH
20870: LD_VAR 0 2
20874: ARRAY
20875: NOT
20876: PUSH
20877: LD_EXP 48
20881: PUSH
20882: LD_VAR 0 2
20886: ARRAY
20887: PPUSH
20888: LD_INT 30
20890: PUSH
20891: LD_INT 3
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PPUSH
20898: CALL_OW 72
20902: NOT
20903: OR
20904: IFFALSE 20908
// continue ;
20906: GO 20862
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
20908: LD_EXP 56
20912: PUSH
20913: LD_VAR 0 2
20917: ARRAY
20918: PUSH
20919: LD_INT 1
20921: ARRAY
20922: PPUSH
20923: CALL_OW 269
20927: IFFALSE 20993
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
20929: LD_ADDR_VAR 0 4
20933: PUSH
20934: LD_EXP 56
20938: PUSH
20939: LD_VAR 0 2
20943: ARRAY
20944: PPUSH
20945: LD_INT 1
20947: PPUSH
20948: CALL_OW 3
20952: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
20953: LD_ADDR_EXP 56
20957: PUSH
20958: LD_EXP 56
20962: PPUSH
20963: LD_VAR 0 2
20967: PPUSH
20968: LD_VAR 0 4
20972: PPUSH
20973: CALL_OW 1
20977: ST_TO_ADDR
// if not mc_turret_list [ i ] then
20978: LD_EXP 56
20982: PUSH
20983: LD_VAR 0 2
20987: ARRAY
20988: NOT
20989: IFFALSE 20993
// continue ;
20991: GO 20862
// end ; busy := false ;
20993: LD_ADDR_VAR 0 6
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_EXP 48
21010: PUSH
21011: LD_VAR 0 2
21015: ARRAY
21016: PPUSH
21017: LD_INT 30
21019: PUSH
21020: LD_INT 3
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PPUSH
21027: CALL_OW 72
21031: ST_TO_ADDR
// for j in tmp do
21032: LD_ADDR_VAR 0 3
21036: PUSH
21037: LD_VAR 0 4
21041: PUSH
21042: FOR_IN
21043: IFFALSE 21071
// if not BuildingStatus ( j ) = bs_idle then
21045: LD_VAR 0 3
21049: PPUSH
21050: CALL_OW 461
21054: PUSH
21055: LD_INT 2
21057: EQUAL
21058: NOT
21059: IFFALSE 21069
// busy := true ;
21061: LD_ADDR_VAR 0 6
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
21069: GO 21042
21071: POP
21072: POP
// if busy then
21073: LD_VAR 0 6
21077: IFFALSE 21081
// continue ;
21079: GO 20862
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
21081: LD_ADDR_VAR 0 7
21085: PUSH
21086: LD_EXP 56
21090: PUSH
21091: LD_VAR 0 2
21095: ARRAY
21096: PUSH
21097: LD_INT 1
21099: ARRAY
21100: PPUSH
21101: CALL 45499 0 1
21105: ST_TO_ADDR
// if not weapon then
21106: LD_VAR 0 7
21110: NOT
21111: IFFALSE 21115
// continue ;
21113: GO 20862
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
21115: LD_EXP 56
21119: PUSH
21120: LD_VAR 0 2
21124: ARRAY
21125: PUSH
21126: LD_INT 1
21128: ARRAY
21129: PPUSH
21130: LD_VAR 0 7
21134: PPUSH
21135: CALL_OW 148
// end ;
21139: GO 20862
21141: POP
21142: POP
// end ;
21143: LD_VAR 0 1
21147: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
21148: LD_INT 0
21150: PPUSH
21151: PPUSH
21152: PPUSH
21153: PPUSH
21154: PPUSH
21155: PPUSH
// if not mc_bases then
21156: LD_EXP 48
21160: NOT
21161: IFFALSE 21165
// exit ;
21163: GO 22150
// for i = 1 to mc_bases do
21165: LD_ADDR_VAR 0 2
21169: PUSH
21170: DOUBLE
21171: LD_INT 1
21173: DEC
21174: ST_TO_ADDR
21175: LD_EXP 48
21179: PUSH
21180: FOR_TO
21181: IFFALSE 22148
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
21183: LD_EXP 61
21187: PUSH
21188: LD_VAR 0 2
21192: ARRAY
21193: NOT
21194: PUSH
21195: LD_EXP 61
21199: PUSH
21200: LD_VAR 0 2
21204: ARRAY
21205: PUSH
21206: LD_EXP 62
21210: PUSH
21211: LD_VAR 0 2
21215: ARRAY
21216: EQUAL
21217: OR
21218: IFFALSE 21222
// continue ;
21220: GO 21180
// if mc_miners [ i ] then
21222: LD_EXP 62
21226: PUSH
21227: LD_VAR 0 2
21231: ARRAY
21232: IFFALSE 21835
// begin k := 1 ;
21234: LD_ADDR_VAR 0 4
21238: PUSH
21239: LD_INT 1
21241: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
21242: LD_ADDR_VAR 0 3
21246: PUSH
21247: DOUBLE
21248: LD_EXP 62
21252: PUSH
21253: LD_VAR 0 2
21257: ARRAY
21258: INC
21259: ST_TO_ADDR
21260: LD_INT 1
21262: PUSH
21263: FOR_DOWNTO
21264: IFFALSE 21833
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
21266: LD_EXP 62
21270: PUSH
21271: LD_VAR 0 2
21275: ARRAY
21276: PUSH
21277: LD_VAR 0 3
21281: ARRAY
21282: PPUSH
21283: CALL_OW 301
21287: IFFALSE 21350
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: LD_EXP 62
21298: PUSH
21299: LD_VAR 0 2
21303: ARRAY
21304: PUSH
21305: LD_EXP 62
21309: PUSH
21310: LD_VAR 0 2
21314: ARRAY
21315: PUSH
21316: LD_VAR 0 3
21320: ARRAY
21321: DIFF
21322: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
21323: LD_ADDR_EXP 62
21327: PUSH
21328: LD_EXP 62
21332: PPUSH
21333: LD_VAR 0 2
21337: PPUSH
21338: LD_VAR 0 5
21342: PPUSH
21343: CALL_OW 1
21347: ST_TO_ADDR
// continue ;
21348: GO 21263
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
21350: LD_EXP 62
21354: PUSH
21355: LD_VAR 0 2
21359: ARRAY
21360: PUSH
21361: LD_VAR 0 3
21365: ARRAY
21366: PPUSH
21367: CALL 40698 0 1
21371: PUSH
21372: LD_EXP 62
21376: PUSH
21377: LD_VAR 0 2
21381: ARRAY
21382: PUSH
21383: LD_VAR 0 3
21387: ARRAY
21388: PPUSH
21389: CALL_OW 255
21393: PPUSH
21394: LD_EXP 61
21398: PUSH
21399: LD_VAR 0 2
21403: ARRAY
21404: PUSH
21405: LD_VAR 0 4
21409: ARRAY
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_EXP 61
21419: PUSH
21420: LD_VAR 0 2
21424: ARRAY
21425: PUSH
21426: LD_VAR 0 4
21430: ARRAY
21431: PUSH
21432: LD_INT 2
21434: ARRAY
21435: PPUSH
21436: LD_INT 15
21438: PPUSH
21439: CALL 41691 0 4
21443: PUSH
21444: LD_INT 4
21446: ARRAY
21447: PUSH
21448: LD_EXP 62
21452: PUSH
21453: LD_VAR 0 2
21457: ARRAY
21458: PUSH
21459: LD_VAR 0 3
21463: ARRAY
21464: PPUSH
21465: LD_INT 10
21467: PPUSH
21468: CALL 43388 0 2
21472: PUSH
21473: LD_INT 4
21475: ARRAY
21476: OR
21477: AND
21478: IFFALSE 21501
// ComStop ( mc_miners [ i ] [ j ] ) ;
21480: LD_EXP 62
21484: PUSH
21485: LD_VAR 0 2
21489: ARRAY
21490: PUSH
21491: LD_VAR 0 3
21495: ARRAY
21496: PPUSH
21497: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
21501: LD_EXP 62
21505: PUSH
21506: LD_VAR 0 2
21510: ARRAY
21511: PUSH
21512: LD_VAR 0 3
21516: ARRAY
21517: PPUSH
21518: CALL_OW 257
21522: PUSH
21523: LD_INT 1
21525: EQUAL
21526: PUSH
21527: LD_EXP 62
21531: PUSH
21532: LD_VAR 0 2
21536: ARRAY
21537: PUSH
21538: LD_VAR 0 3
21542: ARRAY
21543: PPUSH
21544: CALL_OW 459
21548: NOT
21549: AND
21550: PUSH
21551: LD_EXP 62
21555: PUSH
21556: LD_VAR 0 2
21560: ARRAY
21561: PUSH
21562: LD_VAR 0 3
21566: ARRAY
21567: PPUSH
21568: CALL_OW 255
21572: PPUSH
21573: LD_EXP 61
21577: PUSH
21578: LD_VAR 0 2
21582: ARRAY
21583: PUSH
21584: LD_VAR 0 4
21588: ARRAY
21589: PUSH
21590: LD_INT 1
21592: ARRAY
21593: PPUSH
21594: LD_EXP 61
21598: PUSH
21599: LD_VAR 0 2
21603: ARRAY
21604: PUSH
21605: LD_VAR 0 4
21609: ARRAY
21610: PUSH
21611: LD_INT 2
21613: ARRAY
21614: PPUSH
21615: LD_INT 15
21617: PPUSH
21618: CALL 41691 0 4
21622: PUSH
21623: LD_INT 4
21625: ARRAY
21626: PUSH
21627: LD_INT 0
21629: EQUAL
21630: AND
21631: PUSH
21632: LD_EXP 62
21636: PUSH
21637: LD_VAR 0 2
21641: ARRAY
21642: PUSH
21643: LD_VAR 0 3
21647: ARRAY
21648: PPUSH
21649: CALL_OW 314
21653: NOT
21654: AND
21655: IFFALSE 21831
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
21657: LD_EXP 62
21661: PUSH
21662: LD_VAR 0 2
21666: ARRAY
21667: PUSH
21668: LD_VAR 0 3
21672: ARRAY
21673: PPUSH
21674: CALL_OW 310
21678: IFFALSE 21701
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
21680: LD_EXP 62
21684: PUSH
21685: LD_VAR 0 2
21689: ARRAY
21690: PUSH
21691: LD_VAR 0 3
21695: ARRAY
21696: PPUSH
21697: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
21701: LD_EXP 62
21705: PUSH
21706: LD_VAR 0 2
21710: ARRAY
21711: PUSH
21712: LD_VAR 0 3
21716: ARRAY
21717: PPUSH
21718: CALL_OW 314
21722: NOT
21723: IFFALSE 21791
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
21725: LD_EXP 62
21729: PUSH
21730: LD_VAR 0 2
21734: ARRAY
21735: PUSH
21736: LD_VAR 0 3
21740: ARRAY
21741: PPUSH
21742: LD_EXP 61
21746: PUSH
21747: LD_VAR 0 2
21751: ARRAY
21752: PUSH
21753: LD_VAR 0 4
21757: ARRAY
21758: PUSH
21759: LD_INT 1
21761: ARRAY
21762: PPUSH
21763: LD_EXP 61
21767: PUSH
21768: LD_VAR 0 2
21772: ARRAY
21773: PUSH
21774: LD_VAR 0 4
21778: ARRAY
21779: PUSH
21780: LD_INT 2
21782: ARRAY
21783: PPUSH
21784: LD_INT 0
21786: PPUSH
21787: CALL_OW 193
// k := k + 1 ;
21791: LD_ADDR_VAR 0 4
21795: PUSH
21796: LD_VAR 0 4
21800: PUSH
21801: LD_INT 1
21803: PLUS
21804: ST_TO_ADDR
// if k > mc_mines [ i ] then
21805: LD_VAR 0 4
21809: PUSH
21810: LD_EXP 61
21814: PUSH
21815: LD_VAR 0 2
21819: ARRAY
21820: GREATER
21821: IFFALSE 21831
// k := 1 ;
21823: LD_ADDR_VAR 0 4
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// end ; end ;
21831: GO 21263
21833: POP
21834: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
21835: LD_ADDR_VAR 0 5
21839: PUSH
21840: LD_EXP 48
21844: PUSH
21845: LD_VAR 0 2
21849: ARRAY
21850: PPUSH
21851: LD_INT 2
21853: PUSH
21854: LD_INT 30
21856: PUSH
21857: LD_INT 4
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 30
21866: PUSH
21867: LD_INT 5
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 30
21876: PUSH
21877: LD_INT 32
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: PPUSH
21890: CALL_OW 72
21894: ST_TO_ADDR
// if not tmp then
21895: LD_VAR 0 5
21899: NOT
21900: IFFALSE 21904
// continue ;
21902: GO 21180
// list := [ ] ;
21904: LD_ADDR_VAR 0 6
21908: PUSH
21909: EMPTY
21910: ST_TO_ADDR
// for j in tmp do
21911: LD_ADDR_VAR 0 3
21915: PUSH
21916: LD_VAR 0 5
21920: PUSH
21921: FOR_IN
21922: IFFALSE 21991
// begin for k in UnitsInside ( j ) do
21924: LD_ADDR_VAR 0 4
21928: PUSH
21929: LD_VAR 0 3
21933: PPUSH
21934: CALL_OW 313
21938: PUSH
21939: FOR_IN
21940: IFFALSE 21987
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
21942: LD_VAR 0 4
21946: PPUSH
21947: CALL_OW 257
21951: PUSH
21952: LD_INT 1
21954: EQUAL
21955: PUSH
21956: LD_VAR 0 4
21960: PPUSH
21961: CALL_OW 459
21965: NOT
21966: AND
21967: IFFALSE 21985
// list := list ^ k ;
21969: LD_ADDR_VAR 0 6
21973: PUSH
21974: LD_VAR 0 6
21978: PUSH
21979: LD_VAR 0 4
21983: ADD
21984: ST_TO_ADDR
21985: GO 21939
21987: POP
21988: POP
// end ;
21989: GO 21921
21991: POP
21992: POP
// list := list diff mc_miners [ i ] ;
21993: LD_ADDR_VAR 0 6
21997: PUSH
21998: LD_VAR 0 6
22002: PUSH
22003: LD_EXP 62
22007: PUSH
22008: LD_VAR 0 2
22012: ARRAY
22013: DIFF
22014: ST_TO_ADDR
// if not list then
22015: LD_VAR 0 6
22019: NOT
22020: IFFALSE 22024
// continue ;
22022: GO 21180
// k := mc_mines [ i ] - mc_miners [ i ] ;
22024: LD_ADDR_VAR 0 4
22028: PUSH
22029: LD_EXP 61
22033: PUSH
22034: LD_VAR 0 2
22038: ARRAY
22039: PUSH
22040: LD_EXP 62
22044: PUSH
22045: LD_VAR 0 2
22049: ARRAY
22050: MINUS
22051: ST_TO_ADDR
// if k > list then
22052: LD_VAR 0 4
22056: PUSH
22057: LD_VAR 0 6
22061: GREATER
22062: IFFALSE 22074
// k := list ;
22064: LD_ADDR_VAR 0 4
22068: PUSH
22069: LD_VAR 0 6
22073: ST_TO_ADDR
// for j = 1 to k do
22074: LD_ADDR_VAR 0 3
22078: PUSH
22079: DOUBLE
22080: LD_INT 1
22082: DEC
22083: ST_TO_ADDR
22084: LD_VAR 0 4
22088: PUSH
22089: FOR_TO
22090: IFFALSE 22144
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
22092: LD_ADDR_EXP 62
22096: PUSH
22097: LD_EXP 62
22101: PPUSH
22102: LD_VAR 0 2
22106: PUSH
22107: LD_EXP 62
22111: PUSH
22112: LD_VAR 0 2
22116: ARRAY
22117: PUSH
22118: LD_INT 1
22120: PLUS
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PPUSH
22126: LD_VAR 0 6
22130: PUSH
22131: LD_VAR 0 3
22135: ARRAY
22136: PPUSH
22137: CALL 41197 0 3
22141: ST_TO_ADDR
22142: GO 22089
22144: POP
22145: POP
// end ;
22146: GO 21180
22148: POP
22149: POP
// end ;
22150: LD_VAR 0 1
22154: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
22155: LD_INT 0
22157: PPUSH
22158: PPUSH
22159: PPUSH
22160: PPUSH
22161: PPUSH
22162: PPUSH
22163: PPUSH
22164: PPUSH
22165: PPUSH
// if not mc_bases then
22166: LD_EXP 48
22170: NOT
22171: IFFALSE 22175
// exit ;
22173: GO 23560
// for i = 1 to mc_bases do
22175: LD_ADDR_VAR 0 2
22179: PUSH
22180: DOUBLE
22181: LD_INT 1
22183: DEC
22184: ST_TO_ADDR
22185: LD_EXP 48
22189: PUSH
22190: FOR_TO
22191: IFFALSE 23558
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
22193: LD_EXP 48
22197: PUSH
22198: LD_VAR 0 2
22202: ARRAY
22203: NOT
22204: PUSH
22205: LD_EXP 55
22209: PUSH
22210: LD_VAR 0 2
22214: ARRAY
22215: OR
22216: IFFALSE 22220
// continue ;
22218: GO 22190
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
22220: LD_EXP 64
22224: PUSH
22225: LD_VAR 0 2
22229: ARRAY
22230: NOT
22231: PUSH
22232: LD_EXP 65
22236: PUSH
22237: LD_VAR 0 2
22241: ARRAY
22242: AND
22243: IFFALSE 22281
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
22245: LD_ADDR_EXP 65
22249: PUSH
22250: LD_EXP 65
22254: PPUSH
22255: LD_VAR 0 2
22259: PPUSH
22260: EMPTY
22261: PPUSH
22262: CALL_OW 1
22266: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
22267: LD_VAR 0 2
22271: PPUSH
22272: LD_INT 107
22274: PPUSH
22275: CALL 17869 0 2
// continue ;
22279: GO 22190
// end ; target := [ ] ;
22281: LD_ADDR_VAR 0 5
22285: PUSH
22286: EMPTY
22287: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
22288: LD_ADDR_VAR 0 3
22292: PUSH
22293: DOUBLE
22294: LD_EXP 64
22298: PUSH
22299: LD_VAR 0 2
22303: ARRAY
22304: INC
22305: ST_TO_ADDR
22306: LD_INT 1
22308: PUSH
22309: FOR_DOWNTO
22310: IFFALSE 22570
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
22312: LD_EXP 64
22316: PUSH
22317: LD_VAR 0 2
22321: ARRAY
22322: PUSH
22323: LD_VAR 0 3
22327: ARRAY
22328: PUSH
22329: LD_INT 2
22331: ARRAY
22332: PPUSH
22333: LD_EXP 64
22337: PUSH
22338: LD_VAR 0 2
22342: ARRAY
22343: PUSH
22344: LD_VAR 0 3
22348: ARRAY
22349: PUSH
22350: LD_INT 3
22352: ARRAY
22353: PPUSH
22354: CALL_OW 488
22358: PUSH
22359: LD_EXP 64
22363: PUSH
22364: LD_VAR 0 2
22368: ARRAY
22369: PUSH
22370: LD_VAR 0 3
22374: ARRAY
22375: PUSH
22376: LD_INT 2
22378: ARRAY
22379: PPUSH
22380: LD_EXP 64
22384: PUSH
22385: LD_VAR 0 2
22389: ARRAY
22390: PUSH
22391: LD_VAR 0 3
22395: ARRAY
22396: PUSH
22397: LD_INT 3
22399: ARRAY
22400: PPUSH
22401: CALL_OW 284
22405: PUSH
22406: LD_INT 0
22408: EQUAL
22409: AND
22410: IFFALSE 22465
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
22412: LD_ADDR_VAR 0 4
22416: PUSH
22417: LD_EXP 64
22421: PUSH
22422: LD_VAR 0 2
22426: ARRAY
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 3
22437: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
22438: LD_ADDR_EXP 64
22442: PUSH
22443: LD_EXP 64
22447: PPUSH
22448: LD_VAR 0 2
22452: PPUSH
22453: LD_VAR 0 4
22457: PPUSH
22458: CALL_OW 1
22462: ST_TO_ADDR
// continue ;
22463: GO 22309
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
22465: LD_EXP 48
22469: PUSH
22470: LD_VAR 0 2
22474: ARRAY
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: CALL_OW 255
22484: PPUSH
22485: LD_EXP 64
22489: PUSH
22490: LD_VAR 0 2
22494: ARRAY
22495: PUSH
22496: LD_VAR 0 3
22500: ARRAY
22501: PUSH
22502: LD_INT 2
22504: ARRAY
22505: PPUSH
22506: LD_EXP 64
22510: PUSH
22511: LD_VAR 0 2
22515: ARRAY
22516: PUSH
22517: LD_VAR 0 3
22521: ARRAY
22522: PUSH
22523: LD_INT 3
22525: ARRAY
22526: PPUSH
22527: LD_INT 20
22529: PPUSH
22530: CALL 41691 0 4
22534: PUSH
22535: LD_INT 4
22537: ARRAY
22538: PUSH
22539: LD_INT 0
22541: EQUAL
22542: IFFALSE 22568
// begin target := mc_crates [ i ] [ j ] ;
22544: LD_ADDR_VAR 0 5
22548: PUSH
22549: LD_EXP 64
22553: PUSH
22554: LD_VAR 0 2
22558: ARRAY
22559: PUSH
22560: LD_VAR 0 3
22564: ARRAY
22565: ST_TO_ADDR
// break ;
22566: GO 22570
// end ; end ;
22568: GO 22309
22570: POP
22571: POP
// if not target then
22572: LD_VAR 0 5
22576: NOT
22577: IFFALSE 22581
// continue ;
22579: GO 22190
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
22581: LD_ADDR_VAR 0 6
22585: PUSH
22586: LD_EXP 67
22590: PUSH
22591: LD_VAR 0 2
22595: ARRAY
22596: PPUSH
22597: LD_INT 2
22599: PUSH
22600: LD_INT 3
22602: PUSH
22603: LD_INT 58
22605: PUSH
22606: EMPTY
22607: LIST
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 61
22615: PUSH
22616: EMPTY
22617: LIST
22618: PUSH
22619: LD_INT 33
22621: PUSH
22622: LD_INT 5
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 33
22631: PUSH
22632: LD_INT 3
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: LIST
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: LD_INT 34
22651: PUSH
22652: LD_INT 32
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 34
22661: PUSH
22662: LD_INT 51
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 34
22671: PUSH
22672: LD_INT 12
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PPUSH
22689: CALL_OW 72
22693: ST_TO_ADDR
// if not cargo then
22694: LD_VAR 0 6
22698: NOT
22699: IFFALSE 23093
// begin if mc_crates_collector [ i ] < 5 then
22701: LD_EXP 65
22705: PUSH
22706: LD_VAR 0 2
22710: ARRAY
22711: PUSH
22712: LD_INT 5
22714: LESS
22715: IFFALSE 22907
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_EXP 48
22726: PUSH
22727: LD_VAR 0 2
22731: ARRAY
22732: PUSH
22733: LD_EXP 77
22737: PUSH
22738: LD_VAR 0 2
22742: ARRAY
22743: UNION
22744: PPUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 25
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 25
22760: PUSH
22761: LD_INT 16
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 24
22775: PUSH
22776: LD_INT 750
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PPUSH
22787: CALL_OW 72
22791: ST_TO_ADDR
// if not tmp then
22792: LD_VAR 0 4
22796: NOT
22797: IFFALSE 22801
// continue ;
22799: GO 22190
// for j in tmp do
22801: LD_ADDR_VAR 0 3
22805: PUSH
22806: LD_VAR 0 4
22810: PUSH
22811: FOR_IN
22812: IFFALSE 22905
// if GetTag ( j ) = 0 then
22814: LD_VAR 0 3
22818: PPUSH
22819: CALL_OW 110
22823: PUSH
22824: LD_INT 0
22826: EQUAL
22827: IFFALSE 22903
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
22829: LD_ADDR_EXP 65
22833: PUSH
22834: LD_EXP 65
22838: PPUSH
22839: LD_VAR 0 2
22843: PUSH
22844: LD_EXP 65
22848: PUSH
22849: LD_VAR 0 2
22853: ARRAY
22854: PUSH
22855: LD_INT 1
22857: PLUS
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: LD_VAR 0 3
22867: PPUSH
22868: CALL 41197 0 3
22872: ST_TO_ADDR
// SetTag ( j , 107 ) ;
22873: LD_VAR 0 3
22877: PPUSH
22878: LD_INT 107
22880: PPUSH
22881: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
22885: LD_EXP 65
22889: PUSH
22890: LD_VAR 0 2
22894: ARRAY
22895: PUSH
22896: LD_INT 5
22898: GREATER
22899: IFFALSE 22903
// break ;
22901: GO 22905
// end ;
22903: GO 22811
22905: POP
22906: POP
// end ; if mc_crates_collector [ i ] and target then
22907: LD_EXP 65
22911: PUSH
22912: LD_VAR 0 2
22916: ARRAY
22917: PUSH
22918: LD_VAR 0 5
22922: AND
22923: IFFALSE 23091
// begin if mc_crates_collector [ i ] < target [ 1 ] then
22925: LD_EXP 65
22929: PUSH
22930: LD_VAR 0 2
22934: ARRAY
22935: PUSH
22936: LD_VAR 0 5
22940: PUSH
22941: LD_INT 1
22943: ARRAY
22944: LESS
22945: IFFALSE 22965
// tmp := mc_crates_collector [ i ] else
22947: LD_ADDR_VAR 0 4
22951: PUSH
22952: LD_EXP 65
22956: PUSH
22957: LD_VAR 0 2
22961: ARRAY
22962: ST_TO_ADDR
22963: GO 22979
// tmp := target [ 1 ] ;
22965: LD_ADDR_VAR 0 4
22969: PUSH
22970: LD_VAR 0 5
22974: PUSH
22975: LD_INT 1
22977: ARRAY
22978: ST_TO_ADDR
// for j = 1 to tmp do
22979: LD_ADDR_VAR 0 3
22983: PUSH
22984: DOUBLE
22985: LD_INT 1
22987: DEC
22988: ST_TO_ADDR
22989: LD_VAR 0 4
22993: PUSH
22994: FOR_TO
22995: IFFALSE 23089
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
22997: LD_EXP 65
23001: PUSH
23002: LD_VAR 0 2
23006: ARRAY
23007: PUSH
23008: LD_VAR 0 3
23012: ARRAY
23013: PPUSH
23014: CALL_OW 310
23018: IFFALSE 23041
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
23020: LD_EXP 65
23024: PUSH
23025: LD_VAR 0 2
23029: ARRAY
23030: PUSH
23031: LD_VAR 0 3
23035: ARRAY
23036: PPUSH
23037: CALL_OW 122
// wait ( 3 ) ;
23041: LD_INT 3
23043: PPUSH
23044: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
23048: LD_EXP 65
23052: PUSH
23053: LD_VAR 0 2
23057: ARRAY
23058: PUSH
23059: LD_VAR 0 3
23063: ARRAY
23064: PPUSH
23065: LD_VAR 0 5
23069: PUSH
23070: LD_INT 2
23072: ARRAY
23073: PPUSH
23074: LD_VAR 0 5
23078: PUSH
23079: LD_INT 3
23081: ARRAY
23082: PPUSH
23083: CALL_OW 117
// end ;
23087: GO 22994
23089: POP
23090: POP
// end ; end else
23091: GO 23556
// begin for j in cargo do
23093: LD_ADDR_VAR 0 3
23097: PUSH
23098: LD_VAR 0 6
23102: PUSH
23103: FOR_IN
23104: IFFALSE 23554
// begin if GetTag ( j ) <> 0 then
23106: LD_VAR 0 3
23110: PPUSH
23111: CALL_OW 110
23115: PUSH
23116: LD_INT 0
23118: NONEQUAL
23119: IFFALSE 23123
// continue ;
23121: GO 23103
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
23123: LD_VAR 0 3
23127: PPUSH
23128: CALL_OW 262
23132: PUSH
23133: LD_INT 2
23135: EQUAL
23136: PUSH
23137: LD_VAR 0 3
23141: PPUSH
23142: CALL_OW 261
23146: PUSH
23147: LD_INT 15
23149: LESS
23150: AND
23151: IFFALSE 23155
// continue ;
23153: GO 23103
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
23155: LD_VAR 0 3
23159: PPUSH
23160: CALL_OW 262
23164: PUSH
23165: LD_INT 1
23167: EQUAL
23168: PUSH
23169: LD_VAR 0 3
23173: PPUSH
23174: CALL_OW 261
23178: PUSH
23179: LD_INT 10
23181: LESS
23182: AND
23183: IFFALSE 23493
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
23185: LD_ADDR_VAR 0 7
23189: PUSH
23190: LD_EXP 48
23194: PUSH
23195: LD_VAR 0 2
23199: ARRAY
23200: PPUSH
23201: LD_INT 2
23203: PUSH
23204: LD_INT 30
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 30
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: PPUSH
23229: CALL_OW 72
23233: ST_TO_ADDR
// if not depot then
23234: LD_VAR 0 7
23238: NOT
23239: IFFALSE 23243
// continue ;
23241: GO 23103
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
23243: LD_VAR 0 3
23247: PPUSH
23248: LD_VAR 0 7
23252: PPUSH
23253: LD_VAR 0 3
23257: PPUSH
23258: CALL_OW 74
23262: PPUSH
23263: CALL_OW 296
23267: PUSH
23268: LD_INT 6
23270: LESS
23271: IFFALSE 23287
// SetFuel ( j , 100 ) else
23273: LD_VAR 0 3
23277: PPUSH
23278: LD_INT 100
23280: PPUSH
23281: CALL_OW 240
23285: GO 23493
// if GetFuel ( j ) = 0 then
23287: LD_VAR 0 3
23291: PPUSH
23292: CALL_OW 261
23296: PUSH
23297: LD_INT 0
23299: EQUAL
23300: IFFALSE 23493
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
23302: LD_ADDR_EXP 67
23306: PUSH
23307: LD_EXP 67
23311: PPUSH
23312: LD_VAR 0 2
23316: PPUSH
23317: LD_EXP 67
23321: PUSH
23322: LD_VAR 0 2
23326: ARRAY
23327: PUSH
23328: LD_VAR 0 3
23332: DIFF
23333: PPUSH
23334: CALL_OW 1
23338: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
23339: LD_VAR 0 3
23343: PPUSH
23344: CALL_OW 263
23348: PUSH
23349: LD_INT 1
23351: EQUAL
23352: IFFALSE 23368
// ComExitVehicle ( IsInUnit ( j ) ) ;
23354: LD_VAR 0 3
23358: PPUSH
23359: CALL_OW 310
23363: PPUSH
23364: CALL_OW 121
// if GetControl ( j ) = control_remote then
23368: LD_VAR 0 3
23372: PPUSH
23373: CALL_OW 263
23377: PUSH
23378: LD_INT 2
23380: EQUAL
23381: IFFALSE 23392
// ComUnlink ( j ) ;
23383: LD_VAR 0 3
23387: PPUSH
23388: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
23392: LD_ADDR_VAR 0 8
23396: PUSH
23397: LD_VAR 0 2
23401: PPUSH
23402: LD_INT 3
23404: PPUSH
23405: CALL 30127 0 2
23409: ST_TO_ADDR
// if fac then
23410: LD_VAR 0 8
23414: IFFALSE 23491
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
23416: LD_ADDR_VAR 0 9
23420: PUSH
23421: LD_VAR 0 8
23425: PPUSH
23426: LD_VAR 0 3
23430: PPUSH
23431: CALL_OW 265
23435: PPUSH
23436: LD_VAR 0 3
23440: PPUSH
23441: CALL_OW 262
23445: PPUSH
23446: LD_VAR 0 3
23450: PPUSH
23451: CALL_OW 263
23455: PPUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: CALL_OW 264
23465: PPUSH
23466: CALL 38362 0 5
23470: ST_TO_ADDR
// if components then
23471: LD_VAR 0 9
23475: IFFALSE 23491
// MC_InsertProduceList ( i , components ) ;
23477: LD_VAR 0 2
23481: PPUSH
23482: LD_VAR 0 9
23486: PPUSH
23487: CALL 29790 0 2
// end ; continue ;
23491: GO 23103
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
23493: LD_VAR 0 3
23497: PPUSH
23498: LD_INT 1
23500: PPUSH
23501: CALL_OW 289
23505: PUSH
23506: LD_INT 100
23508: LESS
23509: PUSH
23510: LD_VAR 0 3
23514: PPUSH
23515: CALL_OW 314
23519: NOT
23520: AND
23521: IFFALSE 23550
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
23523: LD_VAR 0 3
23527: PPUSH
23528: LD_VAR 0 5
23532: PUSH
23533: LD_INT 2
23535: ARRAY
23536: PPUSH
23537: LD_VAR 0 5
23541: PUSH
23542: LD_INT 3
23544: ARRAY
23545: PPUSH
23546: CALL_OW 117
// break ;
23550: GO 23554
// end ;
23552: GO 23103
23554: POP
23555: POP
// end ; end ;
23556: GO 22190
23558: POP
23559: POP
// end ;
23560: LD_VAR 0 1
23564: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
23565: LD_INT 0
23567: PPUSH
23568: PPUSH
23569: PPUSH
23570: PPUSH
// if not mc_bases then
23571: LD_EXP 48
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 23741
// for i = 1 to mc_bases do
23580: LD_ADDR_VAR 0 2
23584: PUSH
23585: DOUBLE
23586: LD_INT 1
23588: DEC
23589: ST_TO_ADDR
23590: LD_EXP 48
23594: PUSH
23595: FOR_TO
23596: IFFALSE 23739
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
23598: LD_ADDR_VAR 0 4
23602: PUSH
23603: LD_EXP 67
23607: PUSH
23608: LD_VAR 0 2
23612: ARRAY
23613: PUSH
23614: LD_EXP 70
23618: PUSH
23619: LD_VAR 0 2
23623: ARRAY
23624: ADD
23625: PPUSH
23626: LD_INT 33
23628: PUSH
23629: LD_INT 2
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PPUSH
23636: CALL_OW 72
23640: ST_TO_ADDR
// if tmp then
23641: LD_VAR 0 4
23645: IFFALSE 23737
// for j in tmp do
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_VAR 0 4
23656: PUSH
23657: FOR_IN
23658: IFFALSE 23735
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
23660: LD_VAR 0 3
23664: PPUSH
23665: CALL_OW 312
23669: NOT
23670: PUSH
23671: LD_VAR 0 3
23675: PPUSH
23676: CALL_OW 256
23680: PUSH
23681: LD_INT 250
23683: GREATEREQUAL
23684: AND
23685: IFFALSE 23698
// Connect ( j ) else
23687: LD_VAR 0 3
23691: PPUSH
23692: CALL 43685 0 1
23696: GO 23733
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
23698: LD_VAR 0 3
23702: PPUSH
23703: CALL_OW 256
23707: PUSH
23708: LD_INT 250
23710: LESS
23711: PUSH
23712: LD_VAR 0 3
23716: PPUSH
23717: CALL_OW 312
23721: AND
23722: IFFALSE 23733
// ComUnlink ( j ) ;
23724: LD_VAR 0 3
23728: PPUSH
23729: CALL_OW 136
23733: GO 23657
23735: POP
23736: POP
// end ;
23737: GO 23595
23739: POP
23740: POP
// end ;
23741: LD_VAR 0 1
23745: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
23746: LD_INT 0
23748: PPUSH
23749: PPUSH
23750: PPUSH
23751: PPUSH
23752: PPUSH
// if not mc_bases then
23753: LD_EXP 48
23757: NOT
23758: IFFALSE 23762
// exit ;
23760: GO 24222
// for i = 1 to mc_bases do
23762: LD_ADDR_VAR 0 2
23766: PUSH
23767: DOUBLE
23768: LD_INT 1
23770: DEC
23771: ST_TO_ADDR
23772: LD_EXP 48
23776: PUSH
23777: FOR_TO
23778: IFFALSE 24220
// begin if not mc_produce [ i ] then
23780: LD_EXP 69
23784: PUSH
23785: LD_VAR 0 2
23789: ARRAY
23790: NOT
23791: IFFALSE 23795
// continue ;
23793: GO 23777
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
23795: LD_ADDR_VAR 0 5
23799: PUSH
23800: LD_EXP 48
23804: PUSH
23805: LD_VAR 0 2
23809: ARRAY
23810: PPUSH
23811: LD_INT 30
23813: PUSH
23814: LD_INT 3
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PPUSH
23821: CALL_OW 72
23825: ST_TO_ADDR
// if not fac then
23826: LD_VAR 0 5
23830: NOT
23831: IFFALSE 23835
// continue ;
23833: GO 23777
// for j in fac do
23835: LD_ADDR_VAR 0 3
23839: PUSH
23840: LD_VAR 0 5
23844: PUSH
23845: FOR_IN
23846: IFFALSE 24216
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
23848: LD_VAR 0 3
23852: PPUSH
23853: CALL_OW 461
23857: PUSH
23858: LD_INT 2
23860: NONEQUAL
23861: PUSH
23862: LD_VAR 0 3
23866: PPUSH
23867: LD_INT 15
23869: PPUSH
23870: CALL 43388 0 2
23874: PUSH
23875: LD_INT 4
23877: ARRAY
23878: OR
23879: PUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 313
23889: PUSH
23890: LD_INT 0
23892: EQUAL
23893: OR
23894: IFFALSE 23898
// continue ;
23896: GO 23845
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
23898: LD_VAR 0 3
23902: PPUSH
23903: LD_EXP 69
23907: PUSH
23908: LD_VAR 0 2
23912: ARRAY
23913: PUSH
23914: LD_INT 1
23916: ARRAY
23917: PUSH
23918: LD_INT 1
23920: ARRAY
23921: PPUSH
23922: LD_EXP 69
23926: PUSH
23927: LD_VAR 0 2
23931: ARRAY
23932: PUSH
23933: LD_INT 1
23935: ARRAY
23936: PUSH
23937: LD_INT 2
23939: ARRAY
23940: PPUSH
23941: LD_EXP 69
23945: PUSH
23946: LD_VAR 0 2
23950: ARRAY
23951: PUSH
23952: LD_INT 1
23954: ARRAY
23955: PUSH
23956: LD_INT 3
23958: ARRAY
23959: PPUSH
23960: LD_EXP 69
23964: PUSH
23965: LD_VAR 0 2
23969: ARRAY
23970: PUSH
23971: LD_INT 1
23973: ARRAY
23974: PUSH
23975: LD_INT 4
23977: ARRAY
23978: PPUSH
23979: CALL_OW 448
23983: PUSH
23984: LD_VAR 0 3
23988: PPUSH
23989: LD_EXP 69
23993: PUSH
23994: LD_VAR 0 2
23998: ARRAY
23999: PUSH
24000: LD_INT 1
24002: ARRAY
24003: PUSH
24004: LD_INT 1
24006: ARRAY
24007: PUSH
24008: LD_EXP 69
24012: PUSH
24013: LD_VAR 0 2
24017: ARRAY
24018: PUSH
24019: LD_INT 1
24021: ARRAY
24022: PUSH
24023: LD_INT 2
24025: ARRAY
24026: PUSH
24027: LD_EXP 69
24031: PUSH
24032: LD_VAR 0 2
24036: ARRAY
24037: PUSH
24038: LD_INT 1
24040: ARRAY
24041: PUSH
24042: LD_INT 3
24044: ARRAY
24045: PUSH
24046: LD_EXP 69
24050: PUSH
24051: LD_VAR 0 2
24055: ARRAY
24056: PUSH
24057: LD_INT 1
24059: ARRAY
24060: PUSH
24061: LD_INT 4
24063: ARRAY
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: PPUSH
24071: CALL 46890 0 2
24075: AND
24076: IFFALSE 24214
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
24078: LD_VAR 0 3
24082: PPUSH
24083: LD_EXP 69
24087: PUSH
24088: LD_VAR 0 2
24092: ARRAY
24093: PUSH
24094: LD_INT 1
24096: ARRAY
24097: PUSH
24098: LD_INT 1
24100: ARRAY
24101: PPUSH
24102: LD_EXP 69
24106: PUSH
24107: LD_VAR 0 2
24111: ARRAY
24112: PUSH
24113: LD_INT 1
24115: ARRAY
24116: PUSH
24117: LD_INT 2
24119: ARRAY
24120: PPUSH
24121: LD_EXP 69
24125: PUSH
24126: LD_VAR 0 2
24130: ARRAY
24131: PUSH
24132: LD_INT 1
24134: ARRAY
24135: PUSH
24136: LD_INT 3
24138: ARRAY
24139: PPUSH
24140: LD_EXP 69
24144: PUSH
24145: LD_VAR 0 2
24149: ARRAY
24150: PUSH
24151: LD_INT 1
24153: ARRAY
24154: PUSH
24155: LD_INT 4
24157: ARRAY
24158: PPUSH
24159: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
24163: LD_ADDR_VAR 0 4
24167: PUSH
24168: LD_EXP 69
24172: PUSH
24173: LD_VAR 0 2
24177: ARRAY
24178: PPUSH
24179: LD_INT 1
24181: PPUSH
24182: CALL_OW 3
24186: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
24187: LD_ADDR_EXP 69
24191: PUSH
24192: LD_EXP 69
24196: PPUSH
24197: LD_VAR 0 2
24201: PPUSH
24202: LD_VAR 0 4
24206: PPUSH
24207: CALL_OW 1
24211: ST_TO_ADDR
// break ;
24212: GO 24216
// end ; end ;
24214: GO 23845
24216: POP
24217: POP
// end ;
24218: GO 23777
24220: POP
24221: POP
// end ;
24222: LD_VAR 0 1
24226: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
24227: LD_INT 0
24229: PPUSH
24230: PPUSH
24231: PPUSH
// if not mc_bases then
24232: LD_EXP 48
24236: NOT
24237: IFFALSE 24241
// exit ;
24239: GO 24330
// for i = 1 to mc_bases do
24241: LD_ADDR_VAR 0 2
24245: PUSH
24246: DOUBLE
24247: LD_INT 1
24249: DEC
24250: ST_TO_ADDR
24251: LD_EXP 48
24255: PUSH
24256: FOR_TO
24257: IFFALSE 24328
// begin if mc_attack [ i ] then
24259: LD_EXP 68
24263: PUSH
24264: LD_VAR 0 2
24268: ARRAY
24269: IFFALSE 24326
// begin tmp := mc_attack [ i ] [ 1 ] ;
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: LD_EXP 68
24280: PUSH
24281: LD_VAR 0 2
24285: ARRAY
24286: PUSH
24287: LD_INT 1
24289: ARRAY
24290: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
24291: LD_ADDR_EXP 68
24295: PUSH
24296: LD_EXP 68
24300: PPUSH
24301: LD_VAR 0 2
24305: PPUSH
24306: EMPTY
24307: PPUSH
24308: CALL_OW 1
24312: ST_TO_ADDR
// Attack ( tmp ) ;
24313: LD_VAR 0 3
24317: PPUSH
24318: CALL 68537 0 1
// exit ;
24322: POP
24323: POP
24324: GO 24330
// end ; end ;
24326: GO 24256
24328: POP
24329: POP
// end ;
24330: LD_VAR 0 1
24334: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
24335: LD_INT 0
24337: PPUSH
24338: PPUSH
24339: PPUSH
24340: PPUSH
24341: PPUSH
24342: PPUSH
24343: PPUSH
// if not mc_bases then
24344: LD_EXP 48
24348: NOT
24349: IFFALSE 24353
// exit ;
24351: GO 24728
// for i = 1 to mc_bases do
24353: LD_ADDR_VAR 0 2
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_EXP 48
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24726
// begin if not mc_bases [ i ] then
24371: LD_EXP 48
24375: PUSH
24376: LD_VAR 0 2
24380: ARRAY
24381: NOT
24382: IFFALSE 24386
// continue ;
24384: GO 24368
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
24386: LD_ADDR_VAR 0 7
24390: PUSH
24391: LD_EXP 48
24395: PUSH
24396: LD_VAR 0 2
24400: ARRAY
24401: PUSH
24402: LD_INT 1
24404: ARRAY
24405: PPUSH
24406: CALL 37702 0 1
24410: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
24411: LD_ADDR_EXP 71
24415: PUSH
24416: LD_EXP 71
24420: PPUSH
24421: LD_VAR 0 2
24425: PPUSH
24426: LD_EXP 48
24430: PUSH
24431: LD_VAR 0 2
24435: ARRAY
24436: PUSH
24437: LD_INT 1
24439: ARRAY
24440: PPUSH
24441: CALL_OW 255
24445: PPUSH
24446: LD_EXP 73
24450: PUSH
24451: LD_VAR 0 2
24455: ARRAY
24456: PPUSH
24457: CALL 36160 0 2
24461: PPUSH
24462: CALL_OW 1
24466: ST_TO_ADDR
// if not mc_scan [ i ] then
24467: LD_EXP 71
24471: PUSH
24472: LD_VAR 0 2
24476: ARRAY
24477: NOT
24478: IFFALSE 24633
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
24480: LD_ADDR_VAR 0 4
24484: PUSH
24485: LD_EXP 48
24489: PUSH
24490: LD_VAR 0 2
24494: ARRAY
24495: PPUSH
24496: LD_INT 2
24498: PUSH
24499: LD_INT 25
24501: PUSH
24502: LD_INT 5
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 25
24511: PUSH
24512: LD_INT 8
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 25
24521: PUSH
24522: LD_INT 9
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL_OW 72
24539: ST_TO_ADDR
// if not tmp then
24540: LD_VAR 0 4
24544: NOT
24545: IFFALSE 24549
// continue ;
24547: GO 24368
// for j in tmp do
24549: LD_ADDR_VAR 0 3
24553: PUSH
24554: LD_VAR 0 4
24558: PUSH
24559: FOR_IN
24560: IFFALSE 24631
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
24562: LD_VAR 0 3
24566: PPUSH
24567: CALL_OW 310
24571: PPUSH
24572: CALL_OW 266
24576: PUSH
24577: LD_INT 5
24579: EQUAL
24580: PUSH
24581: LD_VAR 0 3
24585: PPUSH
24586: CALL_OW 257
24590: PUSH
24591: LD_INT 1
24593: EQUAL
24594: AND
24595: PUSH
24596: LD_VAR 0 3
24600: PPUSH
24601: CALL_OW 459
24605: NOT
24606: AND
24607: PUSH
24608: LD_VAR 0 7
24612: AND
24613: IFFALSE 24629
// ComChangeProfession ( j , class ) ;
24615: LD_VAR 0 3
24619: PPUSH
24620: LD_VAR 0 7
24624: PPUSH
24625: CALL_OW 123
24629: GO 24559
24631: POP
24632: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
24633: LD_EXP 71
24637: PUSH
24638: LD_VAR 0 2
24642: ARRAY
24643: PUSH
24644: LD_EXP 70
24648: PUSH
24649: LD_VAR 0 2
24653: ARRAY
24654: AND
24655: IFFALSE 24724
// begin tmp := mc_defender [ i ] ;
24657: LD_ADDR_VAR 0 4
24661: PUSH
24662: LD_EXP 70
24666: PUSH
24667: LD_VAR 0 2
24671: ARRAY
24672: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
24673: LD_ADDR_EXP 70
24677: PUSH
24678: LD_EXP 70
24682: PPUSH
24683: LD_VAR 0 2
24687: PPUSH
24688: EMPTY
24689: PPUSH
24690: CALL_OW 1
24694: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_VAR 0 4
24704: PPUSH
24705: LD_EXP 71
24709: PUSH
24710: LD_VAR 0 2
24714: ARRAY
24715: PPUSH
24716: CALL 36195 0 3
// exit ;
24720: POP
24721: POP
24722: GO 24728
// end ; end ;
24724: GO 24368
24726: POP
24727: POP
// end ;
24728: LD_VAR 0 1
24732: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
24733: LD_INT 0
24735: PPUSH
24736: PPUSH
24737: PPUSH
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
// if not mc_bases then
24744: LD_EXP 48
24748: NOT
24749: IFFALSE 24753
// exit ;
24751: GO 25697
// for i = 1 to mc_bases do
24753: LD_ADDR_VAR 0 2
24757: PUSH
24758: DOUBLE
24759: LD_INT 1
24761: DEC
24762: ST_TO_ADDR
24763: LD_EXP 48
24767: PUSH
24768: FOR_TO
24769: IFFALSE 25695
// begin tmp := mc_lab [ i ] ;
24771: LD_ADDR_VAR 0 6
24775: PUSH
24776: LD_EXP 81
24780: PUSH
24781: LD_VAR 0 2
24785: ARRAY
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 6
24791: NOT
24792: IFFALSE 24796
// continue ;
24794: GO 24768
// for j in tmp do
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: LD_VAR 0 6
24805: PUSH
24806: FOR_IN
24807: IFFALSE 25691
// begin side := GetSide ( j ) ;
24809: LD_ADDR_VAR 0 4
24813: PUSH
24814: LD_VAR 0 3
24818: PPUSH
24819: CALL_OW 255
24823: ST_TO_ADDR
// if not mc_tech [ side ] then
24824: LD_EXP 75
24828: PUSH
24829: LD_VAR 0 4
24833: ARRAY
24834: NOT
24835: IFFALSE 24839
// continue ;
24837: GO 24806
// if BuildingStatus ( j ) = bs_idle then
24839: LD_VAR 0 3
24843: PPUSH
24844: CALL_OW 461
24848: PUSH
24849: LD_INT 2
24851: EQUAL
24852: IFFALSE 24925
// for t in mc_tech [ side ] do
24854: LD_ADDR_VAR 0 5
24858: PUSH
24859: LD_EXP 75
24863: PUSH
24864: LD_VAR 0 4
24868: ARRAY
24869: PUSH
24870: FOR_IN
24871: IFFALSE 24923
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
24873: LD_VAR 0 3
24877: PPUSH
24878: LD_VAR 0 5
24882: PPUSH
24883: CALL_OW 430
24887: PUSH
24888: LD_VAR 0 4
24892: PPUSH
24893: LD_VAR 0 5
24897: PPUSH
24898: CALL 35268 0 2
24902: AND
24903: IFFALSE 24921
// begin ComResearch ( j , t ) ;
24905: LD_VAR 0 3
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL_OW 124
// break ;
24919: GO 24923
// end ;
24921: GO 24870
24923: POP
24924: POP
// if BuildingStatus ( j ) = bs_need_ape then
24925: LD_VAR 0 3
24929: PPUSH
24930: CALL_OW 461
24934: PUSH
24935: LD_INT 10
24937: EQUAL
24938: IFFALSE 25526
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
24940: LD_EXP 77
24944: PUSH
24945: LD_VAR 0 2
24949: ARRAY
24950: NOT
24951: PUSH
24952: LD_EXP 78
24956: PUSH
24957: LD_VAR 0 2
24961: ARRAY
24962: NOT
24963: AND
24964: PUSH
24965: LD_EXP 75
24969: PUSH
24970: LD_VAR 0 4
24974: ARRAY
24975: PUSH
24976: LD_INT 1
24978: GREATER
24979: AND
24980: IFFALSE 25111
// begin ComCancel ( j ) ;
24982: LD_VAR 0 3
24986: PPUSH
24987: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
24991: LD_ADDR_EXP 75
24995: PUSH
24996: LD_EXP 75
25000: PPUSH
25001: LD_VAR 0 4
25005: PPUSH
25006: LD_EXP 75
25010: PUSH
25011: LD_VAR 0 4
25015: ARRAY
25016: PPUSH
25017: LD_EXP 75
25021: PUSH
25022: LD_VAR 0 4
25026: ARRAY
25027: PUSH
25028: LD_INT 1
25030: MINUS
25031: PPUSH
25032: LD_EXP 75
25036: PUSH
25037: LD_VAR 0 4
25041: ARRAY
25042: PPUSH
25043: LD_INT 0
25045: PPUSH
25046: CALL 40180 0 4
25050: PPUSH
25051: CALL_OW 1
25055: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
25056: LD_ADDR_EXP 75
25060: PUSH
25061: LD_EXP 75
25065: PPUSH
25066: LD_VAR 0 4
25070: PPUSH
25071: LD_EXP 75
25075: PUSH
25076: LD_VAR 0 4
25080: ARRAY
25081: PPUSH
25082: LD_EXP 75
25086: PUSH
25087: LD_VAR 0 4
25091: ARRAY
25092: PPUSH
25093: LD_INT 1
25095: PPUSH
25096: LD_INT 0
25098: PPUSH
25099: CALL 40180 0 4
25103: PPUSH
25104: CALL_OW 1
25108: ST_TO_ADDR
// continue ;
25109: GO 24806
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
25111: LD_EXP 77
25115: PUSH
25116: LD_VAR 0 2
25120: ARRAY
25121: PUSH
25122: LD_EXP 78
25126: PUSH
25127: LD_VAR 0 2
25131: ARRAY
25132: NOT
25133: AND
25134: IFFALSE 25261
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
25136: LD_ADDR_EXP 78
25140: PUSH
25141: LD_EXP 78
25145: PPUSH
25146: LD_VAR 0 2
25150: PUSH
25151: LD_EXP 78
25155: PUSH
25156: LD_VAR 0 2
25160: ARRAY
25161: PUSH
25162: LD_INT 1
25164: PLUS
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PPUSH
25170: LD_EXP 77
25174: PUSH
25175: LD_VAR 0 2
25179: ARRAY
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: PPUSH
25185: CALL 41197 0 3
25189: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
25190: LD_EXP 77
25194: PUSH
25195: LD_VAR 0 2
25199: ARRAY
25200: PUSH
25201: LD_INT 1
25203: ARRAY
25204: PPUSH
25205: LD_INT 112
25207: PPUSH
25208: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
25212: LD_ADDR_VAR 0 9
25216: PUSH
25217: LD_EXP 77
25221: PUSH
25222: LD_VAR 0 2
25226: ARRAY
25227: PPUSH
25228: LD_INT 1
25230: PPUSH
25231: CALL_OW 3
25235: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
25236: LD_ADDR_EXP 77
25240: PUSH
25241: LD_EXP 77
25245: PPUSH
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 9
25255: PPUSH
25256: CALL_OW 1
25260: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
25261: LD_EXP 77
25265: PUSH
25266: LD_VAR 0 2
25270: ARRAY
25271: PUSH
25272: LD_EXP 78
25276: PUSH
25277: LD_VAR 0 2
25281: ARRAY
25282: AND
25283: PUSH
25284: LD_EXP 78
25288: PUSH
25289: LD_VAR 0 2
25293: ARRAY
25294: PUSH
25295: LD_INT 1
25297: ARRAY
25298: PPUSH
25299: CALL_OW 310
25303: NOT
25304: AND
25305: PUSH
25306: LD_VAR 0 3
25310: PPUSH
25311: CALL_OW 313
25315: PUSH
25316: LD_INT 6
25318: EQUAL
25319: AND
25320: IFFALSE 25376
// begin tmp2 := UnitsInside ( j ) ;
25322: LD_ADDR_VAR 0 9
25326: PUSH
25327: LD_VAR 0 3
25331: PPUSH
25332: CALL_OW 313
25336: ST_TO_ADDR
// if tmp2 = 6 then
25337: LD_VAR 0 9
25341: PUSH
25342: LD_INT 6
25344: EQUAL
25345: IFFALSE 25376
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
25347: LD_VAR 0 9
25351: PUSH
25352: LD_INT 1
25354: ARRAY
25355: PPUSH
25356: LD_INT 112
25358: PPUSH
25359: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
25363: LD_VAR 0 9
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PPUSH
25372: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
25376: LD_EXP 78
25380: PUSH
25381: LD_VAR 0 2
25385: ARRAY
25386: PUSH
25387: LD_EXP 78
25391: PUSH
25392: LD_VAR 0 2
25396: ARRAY
25397: PUSH
25398: LD_INT 1
25400: ARRAY
25401: PPUSH
25402: CALL_OW 314
25406: NOT
25407: AND
25408: PUSH
25409: LD_EXP 78
25413: PUSH
25414: LD_VAR 0 2
25418: ARRAY
25419: PUSH
25420: LD_INT 1
25422: ARRAY
25423: PPUSH
25424: CALL_OW 310
25428: NOT
25429: AND
25430: IFFALSE 25456
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
25432: LD_EXP 78
25436: PUSH
25437: LD_VAR 0 2
25441: ARRAY
25442: PUSH
25443: LD_INT 1
25445: ARRAY
25446: PPUSH
25447: LD_VAR 0 3
25451: PPUSH
25452: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
25456: LD_EXP 78
25460: PUSH
25461: LD_VAR 0 2
25465: ARRAY
25466: PUSH
25467: LD_INT 1
25469: ARRAY
25470: PPUSH
25471: CALL_OW 310
25475: PUSH
25476: LD_EXP 78
25480: PUSH
25481: LD_VAR 0 2
25485: ARRAY
25486: PUSH
25487: LD_INT 1
25489: ARRAY
25490: PPUSH
25491: CALL_OW 310
25495: PPUSH
25496: CALL_OW 461
25500: PUSH
25501: LD_INT 3
25503: NONEQUAL
25504: AND
25505: IFFALSE 25526
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
25507: LD_EXP 78
25511: PUSH
25512: LD_VAR 0 2
25516: ARRAY
25517: PUSH
25518: LD_INT 1
25520: ARRAY
25521: PPUSH
25522: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
25526: LD_VAR 0 3
25530: PPUSH
25531: CALL_OW 461
25535: PUSH
25536: LD_INT 6
25538: EQUAL
25539: PUSH
25540: LD_VAR 0 6
25544: PUSH
25545: LD_INT 1
25547: GREATER
25548: AND
25549: IFFALSE 25689
// begin sci := [ ] ;
25551: LD_ADDR_VAR 0 8
25555: PUSH
25556: EMPTY
25557: ST_TO_ADDR
// for x in tmp diff j do
25558: LD_ADDR_VAR 0 7
25562: PUSH
25563: LD_VAR 0 6
25567: PUSH
25568: LD_VAR 0 3
25572: DIFF
25573: PUSH
25574: FOR_IN
25575: IFFALSE 25615
// begin if BuildingStatus ( x ) = bs_idle then
25577: LD_VAR 0 7
25581: PPUSH
25582: CALL_OW 461
25586: PUSH
25587: LD_INT 2
25589: EQUAL
25590: IFFALSE 25613
// sci := sci ^ UnitsInside ( x ) ;
25592: LD_ADDR_VAR 0 8
25596: PUSH
25597: LD_VAR 0 8
25601: PUSH
25602: LD_VAR 0 7
25606: PPUSH
25607: CALL_OW 313
25611: ADD
25612: ST_TO_ADDR
// end ;
25613: GO 25574
25615: POP
25616: POP
// if not sci then
25617: LD_VAR 0 8
25621: NOT
25622: IFFALSE 25626
// continue ;
25624: GO 24806
// for x in sci do
25626: LD_ADDR_VAR 0 7
25630: PUSH
25631: LD_VAR 0 8
25635: PUSH
25636: FOR_IN
25637: IFFALSE 25687
// if IsInUnit ( x ) and not HasTask ( x ) then
25639: LD_VAR 0 7
25643: PPUSH
25644: CALL_OW 310
25648: PUSH
25649: LD_VAR 0 7
25653: PPUSH
25654: CALL_OW 314
25658: NOT
25659: AND
25660: IFFALSE 25685
// begin ComExitBuilding ( x ) ;
25662: LD_VAR 0 7
25666: PPUSH
25667: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
25671: LD_VAR 0 7
25675: PPUSH
25676: LD_VAR 0 3
25680: PPUSH
25681: CALL_OW 180
// end ;
25685: GO 25636
25687: POP
25688: POP
// end ; end ;
25689: GO 24806
25691: POP
25692: POP
// end ;
25693: GO 24768
25695: POP
25696: POP
// end ;
25697: LD_VAR 0 1
25701: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
// if not mc_bases then
25710: LD_EXP 48
25714: NOT
25715: IFFALSE 25719
// exit ;
25717: GO 25958
// for i = 1 to 8 do
25719: LD_ADDR_VAR 0 2
25723: PUSH
25724: DOUBLE
25725: LD_INT 1
25727: DEC
25728: ST_TO_ADDR
25729: LD_INT 8
25731: PUSH
25732: FOR_TO
25733: IFFALSE 25759
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
25735: LD_ADDR_EXP 75
25739: PUSH
25740: LD_EXP 75
25744: PPUSH
25745: LD_VAR 0 2
25749: PPUSH
25750: EMPTY
25751: PPUSH
25752: CALL_OW 1
25756: ST_TO_ADDR
25757: GO 25732
25759: POP
25760: POP
// tmp := [ ] ;
25761: LD_ADDR_VAR 0 5
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// for i = 1 to mc_sides do
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: DOUBLE
25774: LD_INT 1
25776: DEC
25777: ST_TO_ADDR
25778: LD_EXP 74
25782: PUSH
25783: FOR_TO
25784: IFFALSE 25842
// if not mc_sides [ i ] in tmp then
25786: LD_EXP 74
25790: PUSH
25791: LD_VAR 0 2
25795: ARRAY
25796: PUSH
25797: LD_VAR 0 5
25801: IN
25802: NOT
25803: IFFALSE 25840
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
25805: LD_ADDR_VAR 0 5
25809: PUSH
25810: LD_VAR 0 5
25814: PPUSH
25815: LD_VAR 0 5
25819: PUSH
25820: LD_INT 1
25822: PLUS
25823: PPUSH
25824: LD_EXP 74
25828: PUSH
25829: LD_VAR 0 2
25833: ARRAY
25834: PPUSH
25835: CALL_OW 2
25839: ST_TO_ADDR
25840: GO 25783
25842: POP
25843: POP
// if not tmp then
25844: LD_VAR 0 5
25848: NOT
25849: IFFALSE 25853
// exit ;
25851: GO 25958
// for j in tmp do
25853: LD_ADDR_VAR 0 3
25857: PUSH
25858: LD_VAR 0 5
25862: PUSH
25863: FOR_IN
25864: IFFALSE 25956
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
25866: LD_ADDR_VAR 0 6
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_VAR 0 3
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PPUSH
25883: CALL_OW 69
25887: ST_TO_ADDR
// if not un then
25888: LD_VAR 0 6
25892: NOT
25893: IFFALSE 25897
// continue ;
25895: GO 25863
// nation := GetNation ( un [ 1 ] ) ;
25897: LD_ADDR_VAR 0 4
25901: PUSH
25902: LD_VAR 0 6
25906: PUSH
25907: LD_INT 1
25909: ARRAY
25910: PPUSH
25911: CALL_OW 248
25915: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
25916: LD_ADDR_EXP 75
25920: PUSH
25921: LD_EXP 75
25925: PPUSH
25926: LD_VAR 0 3
25930: PPUSH
25931: LD_VAR 0 3
25935: PPUSH
25936: LD_VAR 0 4
25940: PPUSH
25941: LD_INT 1
25943: PPUSH
25944: CALL 34631 0 3
25948: PPUSH
25949: CALL_OW 1
25953: ST_TO_ADDR
// end ;
25954: GO 25863
25956: POP
25957: POP
// end ;
25958: LD_VAR 0 1
25962: RET
// export function MC_InitSides ( ) ; var i ; begin
25963: LD_INT 0
25965: PPUSH
25966: PPUSH
// if not mc_bases then
25967: LD_EXP 48
25971: NOT
25972: IFFALSE 25976
// exit ;
25974: GO 26050
// for i = 1 to mc_bases do
25976: LD_ADDR_VAR 0 2
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_EXP 48
25990: PUSH
25991: FOR_TO
25992: IFFALSE 26048
// if mc_bases [ i ] then
25994: LD_EXP 48
25998: PUSH
25999: LD_VAR 0 2
26003: ARRAY
26004: IFFALSE 26046
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
26006: LD_ADDR_EXP 74
26010: PUSH
26011: LD_EXP 74
26015: PPUSH
26016: LD_VAR 0 2
26020: PPUSH
26021: LD_EXP 48
26025: PUSH
26026: LD_VAR 0 2
26030: ARRAY
26031: PUSH
26032: LD_INT 1
26034: ARRAY
26035: PPUSH
26036: CALL_OW 255
26040: PPUSH
26041: CALL_OW 1
26045: ST_TO_ADDR
26046: GO 25991
26048: POP
26049: POP
// end ;
26050: LD_VAR 0 1
26054: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
26059: PPUSH
26060: PPUSH
26061: PPUSH
26062: PPUSH
26063: PPUSH
26064: PPUSH
// if not mc_bases then
26065: LD_EXP 48
26069: NOT
26070: IFFALSE 26074
// exit ;
26072: GO 26719
// for i = 1 to mc_bases do
26074: LD_ADDR_VAR 0 2
26078: PUSH
26079: DOUBLE
26080: LD_INT 1
26082: DEC
26083: ST_TO_ADDR
26084: LD_EXP 48
26088: PUSH
26089: FOR_TO
26090: IFFALSE 26717
// begin if not mc_bases [ i ] then
26092: LD_EXP 48
26096: PUSH
26097: LD_VAR 0 2
26101: ARRAY
26102: NOT
26103: IFFALSE 26107
// continue ;
26105: GO 26089
// if mc_scan [ i ] then
26107: LD_EXP 71
26111: PUSH
26112: LD_VAR 0 2
26116: ARRAY
26117: IFFALSE 26143
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
26119: LD_ADDR_EXP 60
26123: PUSH
26124: LD_EXP 60
26128: PPUSH
26129: LD_VAR 0 2
26133: PPUSH
26134: EMPTY
26135: PPUSH
26136: CALL_OW 1
26140: ST_TO_ADDR
// continue ;
26141: GO 26089
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
26143: LD_ADDR_VAR 0 5
26147: PUSH
26148: LD_EXP 48
26152: PUSH
26153: LD_VAR 0 2
26157: ARRAY
26158: PUSH
26159: LD_INT 1
26161: ARRAY
26162: PPUSH
26163: CALL_OW 255
26167: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26168: LD_ADDR_VAR 0 6
26172: PUSH
26173: LD_EXP 48
26177: PUSH
26178: LD_VAR 0 2
26182: ARRAY
26183: PPUSH
26184: LD_INT 30
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PPUSH
26194: CALL_OW 72
26198: ST_TO_ADDR
// if not fac then
26199: LD_VAR 0 6
26203: NOT
26204: IFFALSE 26255
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
26206: LD_ADDR_VAR 0 6
26210: PUSH
26211: LD_EXP 48
26215: PUSH
26216: LD_VAR 0 2
26220: ARRAY
26221: PPUSH
26222: LD_INT 2
26224: PUSH
26225: LD_INT 30
26227: PUSH
26228: LD_INT 0
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 30
26237: PUSH
26238: LD_INT 1
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 72
26254: ST_TO_ADDR
// if not fac then
26255: LD_VAR 0 6
26259: NOT
26260: IFFALSE 26264
// continue ;
26262: GO 26089
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
26264: LD_ADDR_VAR 0 7
26268: PUSH
26269: LD_EXP 72
26273: PUSH
26274: LD_VAR 0 2
26278: ARRAY
26279: PPUSH
26280: LD_INT 22
26282: PUSH
26283: LD_VAR 0 5
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 21
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 3
26304: PUSH
26305: LD_INT 24
26307: PUSH
26308: LD_INT 1000
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: LIST
26323: PPUSH
26324: CALL_OW 70
26328: PUSH
26329: LD_INT 22
26331: PUSH
26332: LD_VAR 0 5
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 91
26343: PUSH
26344: LD_VAR 0 6
26348: PUSH
26349: LD_INT 1
26351: ARRAY
26352: PUSH
26353: LD_INT 25
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 21
26363: PUSH
26364: LD_INT 2
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 3
26373: PUSH
26374: LD_INT 24
26376: PUSH
26377: LD_INT 1000
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: UNION
26399: ST_TO_ADDR
// if not vehs then
26400: LD_VAR 0 7
26404: NOT
26405: IFFALSE 26431
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
26407: LD_ADDR_EXP 60
26411: PUSH
26412: LD_EXP 60
26416: PPUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: EMPTY
26423: PPUSH
26424: CALL_OW 1
26428: ST_TO_ADDR
// continue ;
26429: GO 26089
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26431: LD_ADDR_VAR 0 8
26435: PUSH
26436: LD_EXP 48
26440: PUSH
26441: LD_VAR 0 2
26445: ARRAY
26446: PPUSH
26447: LD_INT 30
26449: PUSH
26450: LD_INT 3
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: PPUSH
26457: CALL_OW 72
26461: ST_TO_ADDR
// if tmp then
26462: LD_VAR 0 8
26466: IFFALSE 26569
// begin for j in tmp do
26468: LD_ADDR_VAR 0 3
26472: PUSH
26473: LD_VAR 0 8
26477: PUSH
26478: FOR_IN
26479: IFFALSE 26567
// for k in UnitsInside ( j ) do
26481: LD_ADDR_VAR 0 4
26485: PUSH
26486: LD_VAR 0 3
26490: PPUSH
26491: CALL_OW 313
26495: PUSH
26496: FOR_IN
26497: IFFALSE 26563
// if k then
26499: LD_VAR 0 4
26503: IFFALSE 26561
// if not k in mc_repair_vehicle [ i ] then
26505: LD_VAR 0 4
26509: PUSH
26510: LD_EXP 60
26514: PUSH
26515: LD_VAR 0 2
26519: ARRAY
26520: IN
26521: NOT
26522: IFFALSE 26561
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
26524: LD_ADDR_EXP 60
26528: PUSH
26529: LD_EXP 60
26533: PPUSH
26534: LD_VAR 0 2
26538: PPUSH
26539: LD_EXP 60
26543: PUSH
26544: LD_VAR 0 2
26548: ARRAY
26549: PUSH
26550: LD_VAR 0 4
26554: UNION
26555: PPUSH
26556: CALL_OW 1
26560: ST_TO_ADDR
26561: GO 26496
26563: POP
26564: POP
26565: GO 26478
26567: POP
26568: POP
// end ; if not mc_repair_vehicle [ i ] then
26569: LD_EXP 60
26573: PUSH
26574: LD_VAR 0 2
26578: ARRAY
26579: NOT
26580: IFFALSE 26584
// continue ;
26582: GO 26089
// for j in mc_repair_vehicle [ i ] do
26584: LD_ADDR_VAR 0 3
26588: PUSH
26589: LD_EXP 60
26593: PUSH
26594: LD_VAR 0 2
26598: ARRAY
26599: PUSH
26600: FOR_IN
26601: IFFALSE 26713
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
26603: LD_VAR 0 3
26607: PPUSH
26608: CALL_OW 311
26612: NOT
26613: PUSH
26614: LD_VAR 0 3
26618: PUSH
26619: LD_EXP 51
26623: PUSH
26624: LD_VAR 0 2
26628: ARRAY
26629: PUSH
26630: LD_INT 1
26632: ARRAY
26633: IN
26634: NOT
26635: AND
26636: PUSH
26637: LD_VAR 0 3
26641: PUSH
26642: LD_EXP 51
26646: PUSH
26647: LD_VAR 0 2
26651: ARRAY
26652: PUSH
26653: LD_INT 2
26655: ARRAY
26656: IN
26657: NOT
26658: AND
26659: IFFALSE 26711
// begin if IsInUnit ( j ) then
26661: LD_VAR 0 3
26665: PPUSH
26666: CALL_OW 310
26670: IFFALSE 26681
// ComExitBuilding ( j ) ;
26672: LD_VAR 0 3
26676: PPUSH
26677: CALL_OW 122
// if not HasTask ( j ) then
26681: LD_VAR 0 3
26685: PPUSH
26686: CALL_OW 314
26690: NOT
26691: IFFALSE 26711
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
26693: LD_VAR 0 3
26697: PPUSH
26698: LD_VAR 0 7
26702: PUSH
26703: LD_INT 1
26705: ARRAY
26706: PPUSH
26707: CALL_OW 189
// end ; end ;
26711: GO 26600
26713: POP
26714: POP
// end ;
26715: GO 26089
26717: POP
26718: POP
// end ;
26719: LD_VAR 0 1
26723: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , danger_at_area , side ; begin
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
// if not mc_bases then
26736: LD_EXP 48
26740: NOT
26741: IFFALSE 26745
// exit ;
26743: GO 27364
// for i = 1 to mc_bases do
26745: LD_ADDR_VAR 0 2
26749: PUSH
26750: DOUBLE
26751: LD_INT 1
26753: DEC
26754: ST_TO_ADDR
26755: LD_EXP 48
26759: PUSH
26760: FOR_TO
26761: IFFALSE 27362
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
26763: LD_EXP 76
26767: PUSH
26768: LD_VAR 0 2
26772: ARRAY
26773: NOT
26774: PUSH
26775: LD_EXP 51
26779: PUSH
26780: LD_VAR 0 2
26784: ARRAY
26785: PUSH
26786: LD_INT 1
26788: ARRAY
26789: OR
26790: PUSH
26791: LD_EXP 51
26795: PUSH
26796: LD_VAR 0 2
26800: ARRAY
26801: PUSH
26802: LD_INT 2
26804: ARRAY
26805: OR
26806: PUSH
26807: LD_EXP 74
26811: PUSH
26812: LD_VAR 0 2
26816: ARRAY
26817: PPUSH
26818: LD_INT 1
26820: PPUSH
26821: CALL_OW 325
26825: NOT
26826: OR
26827: PUSH
26828: LD_EXP 71
26832: PUSH
26833: LD_VAR 0 2
26837: ARRAY
26838: OR
26839: IFFALSE 26843
// continue ;
26841: GO 26760
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
26843: LD_ADDR_VAR 0 8
26847: PUSH
26848: LD_EXP 48
26852: PUSH
26853: LD_VAR 0 2
26857: ARRAY
26858: PPUSH
26859: LD_INT 25
26861: PUSH
26862: LD_INT 4
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 50
26871: PUSH
26872: EMPTY
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: LD_INT 60
26880: PUSH
26881: EMPTY
26882: LIST
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: PPUSH
26893: CALL_OW 72
26897: PUSH
26898: LD_EXP 52
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: DIFF
26909: ST_TO_ADDR
// if not tmp then
26910: LD_VAR 0 8
26914: NOT
26915: IFFALSE 26919
// continue ;
26917: GO 26760
// side := GetSide ( tmp [ 1 ] ) ;
26919: LD_ADDR_VAR 0 10
26923: PUSH
26924: LD_VAR 0 8
26928: PUSH
26929: LD_INT 1
26931: ARRAY
26932: PPUSH
26933: CALL_OW 255
26937: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
26938: LD_ADDR_VAR 0 7
26942: PUSH
26943: LD_EXP 76
26947: PUSH
26948: LD_VAR 0 2
26952: ARRAY
26953: PPUSH
26954: LD_INT 22
26956: PUSH
26957: LD_INT 0
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PUSH
26964: LD_INT 25
26966: PUSH
26967: LD_INT 12
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PPUSH
26978: CALL_OW 70
26982: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
26983: LD_ADDR_VAR 0 9
26987: PUSH
26988: LD_EXP 76
26992: PUSH
26993: LD_VAR 0 2
26997: ARRAY
26998: PPUSH
26999: LD_INT 81
27001: PUSH
27002: LD_VAR 0 10
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: CALL_OW 70
27015: ST_TO_ADDR
// if not apes or danger_at_area then
27016: LD_VAR 0 7
27020: NOT
27021: PUSH
27022: LD_VAR 0 9
27026: OR
27027: IFFALSE 27077
// begin if mc_taming [ i ] then
27029: LD_EXP 79
27033: PUSH
27034: LD_VAR 0 2
27038: ARRAY
27039: IFFALSE 27075
// begin MC_Reset ( i , 121 ) ;
27041: LD_VAR 0 2
27045: PPUSH
27046: LD_INT 121
27048: PPUSH
27049: CALL 17869 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
27053: LD_ADDR_EXP 79
27057: PUSH
27058: LD_EXP 79
27062: PPUSH
27063: LD_VAR 0 2
27067: PPUSH
27068: EMPTY
27069: PPUSH
27070: CALL_OW 1
27074: ST_TO_ADDR
// end ; continue ;
27075: GO 26760
// end ; for j in tmp do
27077: LD_ADDR_VAR 0 3
27081: PUSH
27082: LD_VAR 0 8
27086: PUSH
27087: FOR_IN
27088: IFFALSE 27358
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
27090: LD_VAR 0 3
27094: PUSH
27095: LD_EXP 79
27099: PUSH
27100: LD_VAR 0 2
27104: ARRAY
27105: IN
27106: NOT
27107: PUSH
27108: LD_EXP 79
27112: PUSH
27113: LD_VAR 0 2
27117: ARRAY
27118: PUSH
27119: LD_INT 3
27121: LESS
27122: AND
27123: IFFALSE 27181
// begin SetTag ( j , 121 ) ;
27125: LD_VAR 0 3
27129: PPUSH
27130: LD_INT 121
27132: PPUSH
27133: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
27137: LD_ADDR_EXP 79
27141: PUSH
27142: LD_EXP 79
27146: PPUSH
27147: LD_VAR 0 2
27151: PUSH
27152: LD_EXP 79
27156: PUSH
27157: LD_VAR 0 2
27161: ARRAY
27162: PUSH
27163: LD_INT 1
27165: PLUS
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PPUSH
27171: LD_VAR 0 3
27175: PPUSH
27176: CALL 41197 0 3
27180: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
27181: LD_VAR 0 3
27185: PUSH
27186: LD_EXP 79
27190: PUSH
27191: LD_VAR 0 2
27195: ARRAY
27196: IN
27197: IFFALSE 27356
// begin if IsInUnit ( j ) then
27199: LD_VAR 0 3
27203: PPUSH
27204: CALL_OW 310
27208: IFFALSE 27219
// ComExitBuilding ( j ) ;
27210: LD_VAR 0 3
27214: PPUSH
27215: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
27219: LD_ADDR_VAR 0 6
27223: PUSH
27224: LD_VAR 0 7
27228: PPUSH
27229: LD_VAR 0 3
27233: PPUSH
27234: CALL_OW 74
27238: ST_TO_ADDR
// if not ape then
27239: LD_VAR 0 6
27243: NOT
27244: IFFALSE 27248
// break ;
27246: GO 27358
// x := GetX ( ape ) ;
27248: LD_ADDR_VAR 0 4
27252: PUSH
27253: LD_VAR 0 6
27257: PPUSH
27258: CALL_OW 250
27262: ST_TO_ADDR
// y := GetY ( ape ) ;
27263: LD_ADDR_VAR 0 5
27267: PUSH
27268: LD_VAR 0 6
27272: PPUSH
27273: CALL_OW 251
27277: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
27278: LD_VAR 0 4
27282: PPUSH
27283: LD_VAR 0 5
27287: PPUSH
27288: CALL_OW 488
27292: NOT
27293: PUSH
27294: LD_VAR 0 10
27298: PPUSH
27299: LD_VAR 0 4
27303: PPUSH
27304: LD_VAR 0 5
27308: PPUSH
27309: LD_INT 20
27311: PPUSH
27312: CALL 41691 0 4
27316: PUSH
27317: LD_INT 4
27319: ARRAY
27320: OR
27321: IFFALSE 27325
// break ;
27323: GO 27358
// if not HasTask ( j ) then
27325: LD_VAR 0 3
27329: PPUSH
27330: CALL_OW 314
27334: NOT
27335: IFFALSE 27356
// ComTameXY ( j , x , y ) ;
27337: LD_VAR 0 3
27341: PPUSH
27342: LD_VAR 0 4
27346: PPUSH
27347: LD_VAR 0 5
27351: PPUSH
27352: CALL_OW 131
// end ; end ;
27356: GO 27087
27358: POP
27359: POP
// end ;
27360: GO 26760
27362: POP
27363: POP
// end ;
27364: LD_VAR 0 1
27368: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
27369: LD_INT 0
27371: PPUSH
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
// if not mc_bases then
27379: LD_EXP 48
27383: NOT
27384: IFFALSE 27388
// exit ;
27386: GO 27998
// for i = 1 to mc_bases do
27388: LD_ADDR_VAR 0 2
27392: PUSH
27393: DOUBLE
27394: LD_INT 1
27396: DEC
27397: ST_TO_ADDR
27398: LD_EXP 48
27402: PUSH
27403: FOR_TO
27404: IFFALSE 27996
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
27406: LD_EXP 77
27410: PUSH
27411: LD_VAR 0 2
27415: ARRAY
27416: NOT
27417: PUSH
27418: LD_EXP 77
27422: PUSH
27423: LD_VAR 0 2
27427: ARRAY
27428: PPUSH
27429: LD_INT 25
27431: PUSH
27432: LD_INT 12
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 72
27443: NOT
27444: OR
27445: IFFALSE 27449
// continue ;
27447: GO 27403
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
27449: LD_ADDR_VAR 0 5
27453: PUSH
27454: LD_EXP 77
27458: PUSH
27459: LD_VAR 0 2
27463: ARRAY
27464: PUSH
27465: LD_INT 1
27467: ARRAY
27468: PPUSH
27469: CALL_OW 255
27473: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
27474: LD_VAR 0 5
27478: PPUSH
27479: LD_INT 2
27481: PPUSH
27482: CALL_OW 325
27486: IFFALSE 27731
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
27488: LD_ADDR_VAR 0 4
27492: PUSH
27493: LD_EXP 77
27497: PUSH
27498: LD_VAR 0 2
27502: ARRAY
27503: PPUSH
27504: LD_INT 25
27506: PUSH
27507: LD_INT 16
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PPUSH
27514: CALL_OW 72
27518: ST_TO_ADDR
// if tmp < 6 then
27519: LD_VAR 0 4
27523: PUSH
27524: LD_INT 6
27526: LESS
27527: IFFALSE 27731
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27529: LD_ADDR_VAR 0 6
27533: PUSH
27534: LD_EXP 48
27538: PUSH
27539: LD_VAR 0 2
27543: ARRAY
27544: PPUSH
27545: LD_INT 2
27547: PUSH
27548: LD_INT 30
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 30
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL_OW 72
27577: ST_TO_ADDR
// if depot then
27578: LD_VAR 0 6
27582: IFFALSE 27731
// begin for j in depot do
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_VAR 0 6
27593: PUSH
27594: FOR_IN
27595: IFFALSE 27626
// begin if UnitsInside ( j ) < 6 then
27597: LD_VAR 0 3
27601: PPUSH
27602: CALL_OW 313
27606: PUSH
27607: LD_INT 6
27609: LESS
27610: IFFALSE 27624
// begin selected := j ;
27612: LD_ADDR_VAR 0 7
27616: PUSH
27617: LD_VAR 0 3
27621: ST_TO_ADDR
// break ;
27622: GO 27626
// end ; end ;
27624: GO 27594
27626: POP
27627: POP
// if selected then
27628: LD_VAR 0 7
27632: IFFALSE 27731
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
27634: LD_ADDR_VAR 0 3
27638: PUSH
27639: LD_EXP 77
27643: PUSH
27644: LD_VAR 0 2
27648: ARRAY
27649: PPUSH
27650: LD_INT 25
27652: PUSH
27653: LD_INT 12
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PPUSH
27660: CALL_OW 72
27664: PUSH
27665: FOR_IN
27666: IFFALSE 27729
// if not HasTask ( j ) then
27668: LD_VAR 0 3
27672: PPUSH
27673: CALL_OW 314
27677: NOT
27678: IFFALSE 27727
// begin if not IsInUnit ( j ) then
27680: LD_VAR 0 3
27684: PPUSH
27685: CALL_OW 310
27689: NOT
27690: IFFALSE 27706
// ComEnterUnit ( j , selected ) ;
27692: LD_VAR 0 3
27696: PPUSH
27697: LD_VAR 0 7
27701: PPUSH
27702: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
27706: LD_VAR 0 3
27710: PPUSH
27711: LD_INT 16
27713: PPUSH
27714: CALL_OW 183
// AddComExitBuilding ( j ) ;
27718: LD_VAR 0 3
27722: PPUSH
27723: CALL_OW 182
// end ;
27727: GO 27665
27729: POP
27730: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
27731: LD_VAR 0 5
27735: PPUSH
27736: LD_INT 11
27738: PPUSH
27739: CALL_OW 325
27743: IFFALSE 27994
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
27745: LD_ADDR_VAR 0 4
27749: PUSH
27750: LD_EXP 77
27754: PUSH
27755: LD_VAR 0 2
27759: ARRAY
27760: PPUSH
27761: LD_INT 25
27763: PUSH
27764: LD_INT 16
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PPUSH
27771: CALL_OW 72
27775: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
27776: LD_VAR 0 4
27780: PUSH
27781: LD_INT 6
27783: GREATEREQUAL
27784: PUSH
27785: LD_VAR 0 5
27789: PPUSH
27790: LD_INT 2
27792: PPUSH
27793: CALL_OW 325
27797: NOT
27798: OR
27799: IFFALSE 27994
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
27801: LD_ADDR_VAR 0 8
27805: PUSH
27806: LD_EXP 48
27810: PUSH
27811: LD_VAR 0 2
27815: ARRAY
27816: PPUSH
27817: LD_INT 2
27819: PUSH
27820: LD_INT 30
27822: PUSH
27823: LD_INT 4
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 30
27832: PUSH
27833: LD_INT 5
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: LIST
27844: PPUSH
27845: CALL_OW 72
27849: ST_TO_ADDR
// if barracks then
27850: LD_VAR 0 8
27854: IFFALSE 27994
// begin for j in barracks do
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_VAR 0 8
27865: PUSH
27866: FOR_IN
27867: IFFALSE 27898
// begin if UnitsInside ( j ) < 6 then
27869: LD_VAR 0 3
27873: PPUSH
27874: CALL_OW 313
27878: PUSH
27879: LD_INT 6
27881: LESS
27882: IFFALSE 27896
// begin selected := j ;
27884: LD_ADDR_VAR 0 7
27888: PUSH
27889: LD_VAR 0 3
27893: ST_TO_ADDR
// break ;
27894: GO 27898
// end ; end ;
27896: GO 27866
27898: POP
27899: POP
// if selected then
27900: LD_VAR 0 7
27904: IFFALSE 27994
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
27906: LD_ADDR_VAR 0 3
27910: PUSH
27911: LD_EXP 77
27915: PUSH
27916: LD_VAR 0 2
27920: ARRAY
27921: PPUSH
27922: LD_INT 25
27924: PUSH
27925: LD_INT 12
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PPUSH
27932: CALL_OW 72
27936: PUSH
27937: FOR_IN
27938: IFFALSE 27992
// if not IsInUnit ( j ) and not HasTask ( j ) then
27940: LD_VAR 0 3
27944: PPUSH
27945: CALL_OW 310
27949: NOT
27950: PUSH
27951: LD_VAR 0 3
27955: PPUSH
27956: CALL_OW 314
27960: NOT
27961: AND
27962: IFFALSE 27990
// begin ComEnterUnit ( j , selected ) ;
27964: LD_VAR 0 3
27968: PPUSH
27969: LD_VAR 0 7
27973: PPUSH
27974: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
27978: LD_VAR 0 3
27982: PPUSH
27983: LD_INT 15
27985: PPUSH
27986: CALL_OW 183
// end ;
27990: GO 27937
27992: POP
27993: POP
// end ; end ; end ; end ; end ;
27994: GO 27403
27996: POP
27997: POP
// end ;
27998: LD_VAR 0 1
28002: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
28003: LD_INT 0
28005: PPUSH
28006: PPUSH
28007: PPUSH
28008: PPUSH
// if not mc_bases then
28009: LD_EXP 48
28013: NOT
28014: IFFALSE 28018
// exit ;
28016: GO 28196
// for i = 1 to mc_bases do
28018: LD_ADDR_VAR 0 2
28022: PUSH
28023: DOUBLE
28024: LD_INT 1
28026: DEC
28027: ST_TO_ADDR
28028: LD_EXP 48
28032: PUSH
28033: FOR_TO
28034: IFFALSE 28194
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
28036: LD_ADDR_VAR 0 4
28040: PUSH
28041: LD_EXP 48
28045: PUSH
28046: LD_VAR 0 2
28050: ARRAY
28051: PPUSH
28052: LD_INT 25
28054: PUSH
28055: LD_INT 9
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PPUSH
28062: CALL_OW 72
28066: ST_TO_ADDR
// if not tmp then
28067: LD_VAR 0 4
28071: NOT
28072: IFFALSE 28076
// continue ;
28074: GO 28033
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
28076: LD_EXP 74
28080: PUSH
28081: LD_VAR 0 2
28085: ARRAY
28086: PPUSH
28087: LD_INT 29
28089: PPUSH
28090: CALL_OW 325
28094: NOT
28095: PUSH
28096: LD_EXP 74
28100: PUSH
28101: LD_VAR 0 2
28105: ARRAY
28106: PPUSH
28107: LD_INT 28
28109: PPUSH
28110: CALL_OW 325
28114: NOT
28115: AND
28116: IFFALSE 28120
// continue ;
28118: GO 28033
// for j in tmp do
28120: LD_ADDR_VAR 0 3
28124: PUSH
28125: LD_VAR 0 4
28129: PUSH
28130: FOR_IN
28131: IFFALSE 28190
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
28133: LD_VAR 0 3
28137: PUSH
28138: LD_EXP 51
28142: PUSH
28143: LD_VAR 0 2
28147: ARRAY
28148: PUSH
28149: LD_INT 1
28151: ARRAY
28152: IN
28153: NOT
28154: PUSH
28155: LD_VAR 0 3
28159: PUSH
28160: LD_EXP 51
28164: PUSH
28165: LD_VAR 0 2
28169: ARRAY
28170: PUSH
28171: LD_INT 2
28173: ARRAY
28174: IN
28175: NOT
28176: AND
28177: IFFALSE 28188
// ComSpaceTimeShoot ( j ) ;
28179: LD_VAR 0 3
28183: PPUSH
28184: CALL 35359 0 1
28188: GO 28130
28190: POP
28191: POP
// end ;
28192: GO 28033
28194: POP
28195: POP
// end ;
28196: LD_VAR 0 1
28200: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
28201: LD_INT 0
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
// if not mc_bases then
28207: LD_EXP 48
28211: NOT
28212: IFFALSE 28216
// exit ;
28214: GO 28238
// for i = 1 to mc_bases do
28216: LD_ADDR_VAR 0 2
28220: PUSH
28221: DOUBLE
28222: LD_INT 1
28224: DEC
28225: ST_TO_ADDR
28226: LD_EXP 48
28230: PUSH
28231: FOR_TO
28232: IFFALSE 28236
// begin end ;
28234: GO 28231
28236: POP
28237: POP
// end ;
28238: LD_VAR 0 1
28242: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
28243: LD_INT 0
28245: PPUSH
28246: PPUSH
28247: PPUSH
28248: PPUSH
28249: PPUSH
28250: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
28251: LD_VAR 0 1
28255: NOT
28256: PUSH
28257: LD_VAR 0 2
28261: NOT
28262: OR
28263: PUSH
28264: LD_VAR 0 3
28268: NOT
28269: OR
28270: PUSH
28271: LD_VAR 0 4
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: LD_INT 4
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: LD_INT 8
28293: PUSH
28294: LD_INT 9
28296: PUSH
28297: LD_INT 15
28299: PUSH
28300: LD_INT 16
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: IN
28314: NOT
28315: OR
28316: IFFALSE 28320
// exit ;
28318: GO 29220
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
28320: LD_ADDR_VAR 0 2
28324: PUSH
28325: LD_VAR 0 2
28329: PPUSH
28330: LD_INT 21
28332: PUSH
28333: LD_INT 3
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 24
28342: PUSH
28343: LD_INT 250
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PPUSH
28354: CALL_OW 72
28358: ST_TO_ADDR
// case class of 1 , 15 :
28359: LD_VAR 0 4
28363: PUSH
28364: LD_INT 1
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28378
28370: LD_INT 15
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28463
28378: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
28379: LD_ADDR_VAR 0 8
28383: PUSH
28384: LD_VAR 0 2
28388: PPUSH
28389: LD_INT 2
28391: PUSH
28392: LD_INT 30
28394: PUSH
28395: LD_INT 32
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 30
28404: PUSH
28405: LD_INT 31
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: PPUSH
28417: CALL_OW 72
28421: PUSH
28422: LD_VAR 0 2
28426: PPUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 30
28432: PUSH
28433: LD_INT 4
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 30
28442: PUSH
28443: LD_INT 5
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: LIST
28454: PPUSH
28455: CALL_OW 72
28459: ADD
28460: ST_TO_ADDR
28461: GO 28709
28463: LD_INT 2
28465: DOUBLE
28466: EQUAL
28467: IFTRUE 28477
28469: LD_INT 16
28471: DOUBLE
28472: EQUAL
28473: IFTRUE 28477
28475: GO 28523
28477: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
28478: LD_ADDR_VAR 0 8
28482: PUSH
28483: LD_VAR 0 2
28487: PPUSH
28488: LD_INT 2
28490: PUSH
28491: LD_INT 30
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 30
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: LIST
28515: PPUSH
28516: CALL_OW 72
28520: ST_TO_ADDR
28521: GO 28709
28523: LD_INT 3
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28577
28531: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
28532: LD_ADDR_VAR 0 8
28536: PUSH
28537: LD_VAR 0 2
28541: PPUSH
28542: LD_INT 2
28544: PUSH
28545: LD_INT 30
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 30
28557: PUSH
28558: LD_INT 3
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: LIST
28569: PPUSH
28570: CALL_OW 72
28574: ST_TO_ADDR
28575: GO 28709
28577: LD_INT 4
28579: DOUBLE
28580: EQUAL
28581: IFTRUE 28585
28583: GO 28642
28585: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
28586: LD_ADDR_VAR 0 8
28590: PUSH
28591: LD_VAR 0 2
28595: PPUSH
28596: LD_INT 2
28598: PUSH
28599: LD_INT 30
28601: PUSH
28602: LD_INT 6
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 30
28611: PUSH
28612: LD_INT 7
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 30
28621: PUSH
28622: LD_INT 8
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: PPUSH
28635: CALL_OW 72
28639: ST_TO_ADDR
28640: GO 28709
28642: LD_INT 5
28644: DOUBLE
28645: EQUAL
28646: IFTRUE 28662
28648: LD_INT 8
28650: DOUBLE
28651: EQUAL
28652: IFTRUE 28662
28654: LD_INT 9
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28708
28662: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
28663: LD_ADDR_VAR 0 8
28667: PUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_INT 2
28675: PUSH
28676: LD_INT 30
28678: PUSH
28679: LD_INT 4
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: LD_INT 30
28688: PUSH
28689: LD_INT 5
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: PPUSH
28701: CALL_OW 72
28705: ST_TO_ADDR
28706: GO 28709
28708: POP
// if not tmp then
28709: LD_VAR 0 8
28713: NOT
28714: IFFALSE 28718
// exit ;
28716: GO 29220
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
28718: LD_VAR 0 4
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 15
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: IN
28733: PUSH
28734: LD_EXP 57
28738: PUSH
28739: LD_VAR 0 1
28743: ARRAY
28744: AND
28745: IFFALSE 28901
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
28747: LD_ADDR_VAR 0 9
28751: PUSH
28752: LD_EXP 57
28756: PUSH
28757: LD_VAR 0 1
28761: ARRAY
28762: PUSH
28763: LD_INT 1
28765: ARRAY
28766: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
28767: LD_VAR 0 9
28771: PUSH
28772: LD_EXP 58
28776: PUSH
28777: LD_VAR 0 1
28781: ARRAY
28782: IN
28783: NOT
28784: IFFALSE 28899
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
28786: LD_ADDR_EXP 58
28790: PUSH
28791: LD_EXP 58
28795: PPUSH
28796: LD_VAR 0 1
28800: PUSH
28801: LD_EXP 58
28805: PUSH
28806: LD_VAR 0 1
28810: ARRAY
28811: PUSH
28812: LD_INT 1
28814: PLUS
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PPUSH
28820: LD_VAR 0 9
28824: PPUSH
28825: CALL 41197 0 3
28829: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
28830: LD_ADDR_EXP 57
28834: PUSH
28835: LD_EXP 57
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: LD_EXP 57
28849: PUSH
28850: LD_VAR 0 1
28854: ARRAY
28855: PUSH
28856: LD_VAR 0 9
28860: DIFF
28861: PPUSH
28862: CALL_OW 1
28866: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
28867: LD_VAR 0 3
28871: PPUSH
28872: LD_EXP 58
28876: PUSH
28877: LD_VAR 0 1
28881: ARRAY
28882: PUSH
28883: LD_EXP 58
28887: PUSH
28888: LD_VAR 0 1
28892: ARRAY
28893: ARRAY
28894: PPUSH
28895: CALL_OW 120
// end ; exit ;
28899: GO 29220
// end ; if tmp > 1 then
28901: LD_VAR 0 8
28905: PUSH
28906: LD_INT 1
28908: GREATER
28909: IFFALSE 29013
// for i = 2 to tmp do
28911: LD_ADDR_VAR 0 6
28915: PUSH
28916: DOUBLE
28917: LD_INT 2
28919: DEC
28920: ST_TO_ADDR
28921: LD_VAR 0 8
28925: PUSH
28926: FOR_TO
28927: IFFALSE 29011
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
28929: LD_VAR 0 8
28933: PUSH
28934: LD_VAR 0 6
28938: ARRAY
28939: PPUSH
28940: CALL_OW 461
28944: PUSH
28945: LD_INT 6
28947: EQUAL
28948: IFFALSE 29009
// begin x := tmp [ i ] ;
28950: LD_ADDR_VAR 0 9
28954: PUSH
28955: LD_VAR 0 8
28959: PUSH
28960: LD_VAR 0 6
28964: ARRAY
28965: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
28966: LD_ADDR_VAR 0 8
28970: PUSH
28971: LD_VAR 0 8
28975: PPUSH
28976: LD_VAR 0 6
28980: PPUSH
28981: CALL_OW 3
28985: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
28986: LD_ADDR_VAR 0 8
28990: PUSH
28991: LD_VAR 0 8
28995: PPUSH
28996: LD_INT 1
28998: PPUSH
28999: LD_VAR 0 9
29003: PPUSH
29004: CALL_OW 2
29008: ST_TO_ADDR
// end ;
29009: GO 28926
29011: POP
29012: POP
// for i in tmp do
29013: LD_ADDR_VAR 0 6
29017: PUSH
29018: LD_VAR 0 8
29022: PUSH
29023: FOR_IN
29024: IFFALSE 29093
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
29026: LD_VAR 0 6
29030: PPUSH
29031: CALL_OW 313
29035: PUSH
29036: LD_INT 6
29038: LESS
29039: PUSH
29040: LD_VAR 0 6
29044: PPUSH
29045: CALL_OW 266
29049: PUSH
29050: LD_INT 31
29052: PUSH
29053: LD_INT 32
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: IN
29060: NOT
29061: AND
29062: PUSH
29063: LD_VAR 0 6
29067: PPUSH
29068: CALL_OW 313
29072: PUSH
29073: LD_INT 0
29075: EQUAL
29076: OR
29077: IFFALSE 29091
// begin j := i ;
29079: LD_ADDR_VAR 0 7
29083: PUSH
29084: LD_VAR 0 6
29088: ST_TO_ADDR
// break ;
29089: GO 29093
// end ; end ;
29091: GO 29023
29093: POP
29094: POP
// if j then
29095: LD_VAR 0 7
29099: IFFALSE 29117
// ComEnterUnit ( unit , j ) else
29101: LD_VAR 0 3
29105: PPUSH
29106: LD_VAR 0 7
29110: PPUSH
29111: CALL_OW 120
29115: GO 29220
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29117: LD_ADDR_VAR 0 10
29121: PUSH
29122: LD_VAR 0 2
29126: PPUSH
29127: LD_INT 2
29129: PUSH
29130: LD_INT 30
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 30
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: PPUSH
29155: CALL_OW 72
29159: ST_TO_ADDR
// if depot then
29160: LD_VAR 0 10
29164: IFFALSE 29220
// begin depot := NearestUnitToUnit ( depot , unit ) ;
29166: LD_ADDR_VAR 0 10
29170: PUSH
29171: LD_VAR 0 10
29175: PPUSH
29176: LD_VAR 0 3
29180: PPUSH
29181: CALL_OW 74
29185: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
29186: LD_VAR 0 3
29190: PPUSH
29191: LD_VAR 0 10
29195: PPUSH
29196: CALL_OW 296
29200: PUSH
29201: LD_INT 10
29203: GREATER
29204: IFFALSE 29220
// ComStandNearbyBuilding ( unit , depot ) ;
29206: LD_VAR 0 3
29210: PPUSH
29211: LD_VAR 0 10
29215: PPUSH
29216: CALL 35976 0 2
// end ; end ; end ;
29220: LD_VAR 0 5
29224: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
29225: LD_INT 0
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
// if not mc_bases then
29231: LD_EXP 48
29235: NOT
29236: IFFALSE 29240
// exit ;
29238: GO 29479
// for i = 1 to mc_bases do
29240: LD_ADDR_VAR 0 2
29244: PUSH
29245: DOUBLE
29246: LD_INT 1
29248: DEC
29249: ST_TO_ADDR
29250: LD_EXP 48
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29477
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
29258: LD_ADDR_VAR 0 4
29262: PUSH
29263: LD_EXP 48
29267: PUSH
29268: LD_VAR 0 2
29272: ARRAY
29273: PPUSH
29274: LD_INT 21
29276: PUSH
29277: LD_INT 1
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 72
29288: PUSH
29289: LD_EXP 77
29293: PUSH
29294: LD_VAR 0 2
29298: ARRAY
29299: UNION
29300: ST_TO_ADDR
// if not tmp then
29301: LD_VAR 0 4
29305: NOT
29306: IFFALSE 29310
// continue ;
29308: GO 29255
// for j in tmp do
29310: LD_ADDR_VAR 0 3
29314: PUSH
29315: LD_VAR 0 4
29319: PUSH
29320: FOR_IN
29321: IFFALSE 29473
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 110
29332: NOT
29333: PUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: CALL_OW 314
29343: NOT
29344: AND
29345: PUSH
29346: LD_VAR 0 3
29350: PPUSH
29351: CALL_OW 311
29355: NOT
29356: AND
29357: PUSH
29358: LD_VAR 0 3
29362: PPUSH
29363: CALL_OW 310
29367: NOT
29368: AND
29369: PUSH
29370: LD_VAR 0 3
29374: PUSH
29375: LD_EXP 51
29379: PUSH
29380: LD_VAR 0 2
29384: ARRAY
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: IN
29390: NOT
29391: AND
29392: PUSH
29393: LD_VAR 0 3
29397: PUSH
29398: LD_EXP 51
29402: PUSH
29403: LD_VAR 0 2
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: IN
29413: NOT
29414: AND
29415: PUSH
29416: LD_VAR 0 3
29420: PUSH
29421: LD_EXP 60
29425: PUSH
29426: LD_VAR 0 2
29430: ARRAY
29431: IN
29432: NOT
29433: AND
29434: IFFALSE 29471
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
29436: LD_VAR 0 2
29440: PPUSH
29441: LD_EXP 48
29445: PUSH
29446: LD_VAR 0 2
29450: ARRAY
29451: PPUSH
29452: LD_VAR 0 3
29456: PPUSH
29457: LD_VAR 0 3
29461: PPUSH
29462: CALL_OW 257
29466: PPUSH
29467: CALL 28243 0 4
// end ;
29471: GO 29320
29473: POP
29474: POP
// end ;
29475: GO 29255
29477: POP
29478: POP
// end ;
29479: LD_VAR 0 1
29483: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
29484: LD_INT 0
29486: PPUSH
29487: PPUSH
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// if not mc_bases [ base ] then
29492: LD_EXP 48
29496: PUSH
29497: LD_VAR 0 1
29501: ARRAY
29502: NOT
29503: IFFALSE 29507
// exit ;
29505: GO 29689
// tmp := [ ] ;
29507: LD_ADDR_VAR 0 6
29511: PUSH
29512: EMPTY
29513: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
29514: LD_ADDR_VAR 0 7
29518: PUSH
29519: LD_VAR 0 3
29523: PPUSH
29524: LD_INT 0
29526: PPUSH
29527: CALL_OW 517
29531: ST_TO_ADDR
// if not list then
29532: LD_VAR 0 7
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29689
// for i = 1 to amount do
29541: LD_ADDR_VAR 0 5
29545: PUSH
29546: DOUBLE
29547: LD_INT 1
29549: DEC
29550: ST_TO_ADDR
29551: LD_VAR 0 2
29555: PUSH
29556: FOR_TO
29557: IFFALSE 29637
// begin x := rand ( 1 , list [ 1 ] ) ;
29559: LD_ADDR_VAR 0 8
29563: PUSH
29564: LD_INT 1
29566: PPUSH
29567: LD_VAR 0 7
29571: PUSH
29572: LD_INT 1
29574: ARRAY
29575: PPUSH
29576: CALL_OW 12
29580: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
29581: LD_ADDR_VAR 0 6
29585: PUSH
29586: LD_VAR 0 6
29590: PPUSH
29591: LD_VAR 0 5
29595: PPUSH
29596: LD_VAR 0 7
29600: PUSH
29601: LD_INT 1
29603: ARRAY
29604: PUSH
29605: LD_VAR 0 8
29609: ARRAY
29610: PUSH
29611: LD_VAR 0 7
29615: PUSH
29616: LD_INT 2
29618: ARRAY
29619: PUSH
29620: LD_VAR 0 8
29624: ARRAY
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PPUSH
29630: CALL_OW 1
29634: ST_TO_ADDR
// end ;
29635: GO 29556
29637: POP
29638: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
29639: LD_ADDR_EXP 61
29643: PUSH
29644: LD_EXP 61
29648: PPUSH
29649: LD_VAR 0 1
29653: PPUSH
29654: LD_VAR 0 6
29658: PPUSH
29659: CALL_OW 1
29663: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
29664: LD_ADDR_EXP 63
29668: PUSH
29669: LD_EXP 63
29673: PPUSH
29674: LD_VAR 0 1
29678: PPUSH
29679: LD_VAR 0 3
29683: PPUSH
29684: CALL_OW 1
29688: ST_TO_ADDR
// end ;
29689: LD_VAR 0 4
29693: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
29694: LD_INT 0
29696: PPUSH
// if not mc_bases [ base ] then
29697: LD_EXP 48
29701: PUSH
29702: LD_VAR 0 1
29706: ARRAY
29707: NOT
29708: IFFALSE 29712
// exit ;
29710: GO 29737
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
29712: LD_ADDR_EXP 53
29716: PUSH
29717: LD_EXP 53
29721: PPUSH
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 1
29736: ST_TO_ADDR
// end ;
29737: LD_VAR 0 3
29741: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
29742: LD_INT 0
29744: PPUSH
// if not mc_bases [ base ] then
29745: LD_EXP 48
29749: PUSH
29750: LD_VAR 0 1
29754: ARRAY
29755: NOT
29756: IFFALSE 29760
// exit ;
29758: GO 29785
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
29760: LD_ADDR_EXP 69
29764: PUSH
29765: LD_EXP 69
29769: PPUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: LD_VAR 0 2
29779: PPUSH
29780: CALL_OW 1
29784: ST_TO_ADDR
// end ;
29785: LD_VAR 0 3
29789: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
29790: LD_INT 0
29792: PPUSH
// if not mc_bases [ base ] then
29793: LD_EXP 48
29797: PUSH
29798: LD_VAR 0 1
29802: ARRAY
29803: NOT
29804: IFFALSE 29808
// exit ;
29806: GO 29848
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
29808: LD_ADDR_EXP 69
29812: PUSH
29813: LD_EXP 69
29817: PPUSH
29818: LD_VAR 0 1
29822: PPUSH
29823: LD_EXP 69
29827: PUSH
29828: LD_VAR 0 1
29832: ARRAY
29833: PUSH
29834: LD_VAR 0 2
29838: PUSH
29839: EMPTY
29840: LIST
29841: ADD
29842: PPUSH
29843: CALL_OW 1
29847: ST_TO_ADDR
// end ;
29848: LD_VAR 0 3
29852: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
29853: LD_INT 0
29855: PPUSH
// if not mc_bases [ base ] then
29856: LD_EXP 48
29860: PUSH
29861: LD_VAR 0 1
29865: ARRAY
29866: NOT
29867: IFFALSE 29871
// exit ;
29869: GO 29983
// mc_defender := Replace ( mc_defender , base , deflist ) ;
29871: LD_ADDR_EXP 70
29875: PUSH
29876: LD_EXP 70
29880: PPUSH
29881: LD_VAR 0 1
29885: PPUSH
29886: LD_VAR 0 2
29890: PPUSH
29891: CALL_OW 1
29895: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
29896: LD_ADDR_EXP 59
29900: PUSH
29901: LD_EXP 59
29905: PPUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: LD_VAR 0 2
29915: PUSH
29916: LD_INT 0
29918: PLUS
29919: PPUSH
29920: CALL_OW 1
29924: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
29925: LD_ADDR_EXP 67
29929: PUSH
29930: LD_EXP 67
29934: PPUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: LD_EXP 67
29944: PUSH
29945: LD_VAR 0 1
29949: ARRAY
29950: PUSH
29951: LD_EXP 70
29955: PUSH
29956: LD_VAR 0 1
29960: ARRAY
29961: PPUSH
29962: LD_INT 21
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 72
29976: UNION
29977: PPUSH
29978: CALL_OW 1
29982: ST_TO_ADDR
// end ;
29983: LD_VAR 0 3
29987: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
29988: LD_INT 0
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
// if not mc_bases [ base ] then
29994: LD_EXP 48
29998: PUSH
29999: LD_VAR 0 1
30003: ARRAY
30004: NOT
30005: IFFALSE 30009
// exit ;
30007: GO 30074
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
30009: LD_ADDR_EXP 68
30013: PUSH
30014: LD_EXP 68
30018: PPUSH
30019: LD_VAR 0 1
30023: PUSH
30024: LD_EXP 68
30028: PUSH
30029: LD_VAR 0 1
30033: ARRAY
30034: PUSH
30035: LD_INT 1
30037: PLUS
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PPUSH
30043: LD_VAR 0 1
30047: PUSH
30048: LD_VAR 0 2
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_VAR 0 4
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: PPUSH
30069: CALL 41197 0 3
30073: ST_TO_ADDR
// end ;
30074: LD_VAR 0 5
30078: RET
// export function MC_GetMinesField ( base ) ; begin
30079: LD_INT 0
30081: PPUSH
// result := mc_mines [ base ] ;
30082: LD_ADDR_VAR 0 2
30086: PUSH
30087: LD_EXP 61
30091: PUSH
30092: LD_VAR 0 1
30096: ARRAY
30097: ST_TO_ADDR
// end ;
30098: LD_VAR 0 2
30102: RET
// export function MC_GetProduceList ( base ) ; begin
30103: LD_INT 0
30105: PPUSH
// result := mc_produce [ base ] ;
30106: LD_ADDR_VAR 0 2
30110: PUSH
30111: LD_EXP 69
30115: PUSH
30116: LD_VAR 0 1
30120: ARRAY
30121: ST_TO_ADDR
// end ;
30122: LD_VAR 0 2
30126: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
30127: LD_INT 0
30129: PPUSH
30130: PPUSH
// if not mc_bases then
30131: LD_EXP 48
30135: NOT
30136: IFFALSE 30140
// exit ;
30138: GO 30205
// if mc_bases [ base ] then
30140: LD_EXP 48
30144: PUSH
30145: LD_VAR 0 1
30149: ARRAY
30150: IFFALSE 30205
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_EXP 48
30161: PUSH
30162: LD_VAR 0 1
30166: ARRAY
30167: PPUSH
30168: LD_INT 30
30170: PUSH
30171: LD_VAR 0 2
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PPUSH
30180: CALL_OW 72
30184: ST_TO_ADDR
// if result then
30185: LD_VAR 0 3
30189: IFFALSE 30205
// result := result [ 1 ] ;
30191: LD_ADDR_VAR 0 3
30195: PUSH
30196: LD_VAR 0 3
30200: PUSH
30201: LD_INT 1
30203: ARRAY
30204: ST_TO_ADDR
// end ; end ;
30205: LD_VAR 0 3
30209: RET
// export function MC_SetTame ( base , area ) ; begin
30210: LD_INT 0
30212: PPUSH
// if not mc_bases or not base then
30213: LD_EXP 48
30217: NOT
30218: PUSH
30219: LD_VAR 0 1
30223: NOT
30224: OR
30225: IFFALSE 30229
// exit ;
30227: GO 30254
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
30229: LD_ADDR_EXP 76
30233: PUSH
30234: LD_EXP 76
30238: PPUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: LD_VAR 0 2
30248: PPUSH
30249: CALL_OW 1
30253: ST_TO_ADDR
// end ;
30254: LD_VAR 0 3
30258: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
30259: LD_INT 0
30261: PPUSH
30262: PPUSH
// if not mc_bases or not base or not kinds then
30263: LD_EXP 48
30267: NOT
30268: PUSH
30269: LD_VAR 0 1
30273: NOT
30274: OR
30275: PUSH
30276: LD_VAR 0 2
30280: NOT
30281: OR
30282: IFFALSE 30286
// exit ;
30284: GO 30347
// for i in kinds do
30286: LD_ADDR_VAR 0 4
30290: PUSH
30291: LD_VAR 0 2
30295: PUSH
30296: FOR_IN
30297: IFFALSE 30345
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
30299: LD_ADDR_EXP 82
30303: PUSH
30304: LD_EXP 82
30308: PPUSH
30309: LD_VAR 0 1
30313: PUSH
30314: LD_EXP 82
30318: PUSH
30319: LD_VAR 0 1
30323: ARRAY
30324: PUSH
30325: LD_INT 1
30327: PLUS
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: PPUSH
30333: LD_VAR 0 4
30337: PPUSH
30338: CALL 41197 0 3
30342: ST_TO_ADDR
30343: GO 30296
30345: POP
30346: POP
// end ;
30347: LD_VAR 0 3
30351: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
30352: LD_INT 0
30354: PPUSH
// if not mc_bases or not base or not areas then
30355: LD_EXP 48
30359: NOT
30360: PUSH
30361: LD_VAR 0 1
30365: NOT
30366: OR
30367: PUSH
30368: LD_VAR 0 2
30372: NOT
30373: OR
30374: IFFALSE 30378
// exit ;
30376: GO 30403
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
30378: LD_ADDR_EXP 66
30382: PUSH
30383: LD_EXP 66
30387: PPUSH
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_VAR 0 2
30397: PPUSH
30398: CALL_OW 1
30402: ST_TO_ADDR
// end ;
30403: LD_VAR 0 3
30407: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
30408: LD_INT 0
30410: PPUSH
// if not mc_bases or not base then
30411: LD_EXP 48
30415: NOT
30416: PUSH
30417: LD_VAR 0 1
30421: NOT
30422: OR
30423: IFFALSE 30427
// exit ;
30425: GO 30461
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
30427: LD_ADDR_EXP 83
30431: PUSH
30432: LD_EXP 83
30436: PPUSH
30437: LD_VAR 0 1
30441: PPUSH
30442: LD_VAR 0 2
30446: PUSH
30447: LD_VAR 0 3
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PPUSH
30456: CALL_OW 1
30460: ST_TO_ADDR
// end ; end_of_file
30461: LD_VAR 0 4
30465: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
30466: LD_INT 0
30468: PPUSH
30469: PPUSH
30470: PPUSH
// if not mc_bases then
30471: LD_EXP 48
30475: NOT
30476: IFFALSE 30480
// exit ;
30478: GO 30645
// for i = 1 to mc_bases do
30480: LD_ADDR_VAR 0 4
30484: PUSH
30485: DOUBLE
30486: LD_INT 1
30488: DEC
30489: ST_TO_ADDR
30490: LD_EXP 48
30494: PUSH
30495: FOR_TO
30496: IFFALSE 30643
// begin if sci in mc_bases [ i ] then
30498: LD_VAR 0 2
30502: PUSH
30503: LD_EXP 48
30507: PUSH
30508: LD_VAR 0 4
30512: ARRAY
30513: IN
30514: IFFALSE 30641
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
30516: LD_ADDR_EXP 77
30520: PUSH
30521: LD_EXP 77
30525: PPUSH
30526: LD_VAR 0 4
30530: PUSH
30531: LD_EXP 77
30535: PUSH
30536: LD_VAR 0 4
30540: ARRAY
30541: PUSH
30542: LD_INT 1
30544: PLUS
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PPUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: CALL 41197 0 3
30559: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
30560: LD_ADDR_VAR 0 5
30564: PUSH
30565: LD_EXP 48
30569: PUSH
30570: LD_VAR 0 4
30574: ARRAY
30575: PPUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 30
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 30
30591: PUSH
30592: LD_INT 1
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: PPUSH
30604: CALL_OW 72
30608: PPUSH
30609: LD_VAR 0 1
30613: PPUSH
30614: CALL_OW 74
30618: ST_TO_ADDR
// if tmp then
30619: LD_VAR 0 5
30623: IFFALSE 30639
// ComStandNearbyBuilding ( ape , tmp ) ;
30625: LD_VAR 0 1
30629: PPUSH
30630: LD_VAR 0 5
30634: PPUSH
30635: CALL 35976 0 2
// break ;
30639: GO 30643
// end ; end ;
30641: GO 30495
30643: POP
30644: POP
// end ;
30645: LD_VAR 0 3
30649: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
30650: LD_INT 0
30652: PPUSH
30653: PPUSH
30654: PPUSH
// if not mc_bases then
30655: LD_EXP 48
30659: NOT
30660: IFFALSE 30664
// exit ;
30662: GO 30753
// for i = 1 to mc_bases do
30664: LD_ADDR_VAR 0 4
30668: PUSH
30669: DOUBLE
30670: LD_INT 1
30672: DEC
30673: ST_TO_ADDR
30674: LD_EXP 48
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30751
// begin if building in mc_busy_turret_list [ i ] then
30682: LD_VAR 0 1
30686: PUSH
30687: LD_EXP 58
30691: PUSH
30692: LD_VAR 0 4
30696: ARRAY
30697: IN
30698: IFFALSE 30749
// begin tmp := mc_busy_turret_list [ i ] diff building ;
30700: LD_ADDR_VAR 0 5
30704: PUSH
30705: LD_EXP 58
30709: PUSH
30710: LD_VAR 0 4
30714: ARRAY
30715: PUSH
30716: LD_VAR 0 1
30720: DIFF
30721: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
30722: LD_ADDR_EXP 58
30726: PUSH
30727: LD_EXP 58
30731: PPUSH
30732: LD_VAR 0 4
30736: PPUSH
30737: LD_VAR 0 5
30741: PPUSH
30742: CALL_OW 1
30746: ST_TO_ADDR
// break ;
30747: GO 30751
// end ; end ;
30749: GO 30679
30751: POP
30752: POP
// end ;
30753: LD_VAR 0 3
30757: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
30758: LD_INT 0
30760: PPUSH
30761: PPUSH
30762: PPUSH
// if not mc_bases then
30763: LD_EXP 48
30767: NOT
30768: IFFALSE 30772
// exit ;
30770: GO 30971
// for i = 1 to mc_bases do
30772: LD_ADDR_VAR 0 5
30776: PUSH
30777: DOUBLE
30778: LD_INT 1
30780: DEC
30781: ST_TO_ADDR
30782: LD_EXP 48
30786: PUSH
30787: FOR_TO
30788: IFFALSE 30969
// if building in mc_bases [ i ] then
30790: LD_VAR 0 1
30794: PUSH
30795: LD_EXP 48
30799: PUSH
30800: LD_VAR 0 5
30804: ARRAY
30805: IN
30806: IFFALSE 30967
// begin tmp := mc_bases [ i ] diff building ;
30808: LD_ADDR_VAR 0 6
30812: PUSH
30813: LD_EXP 48
30817: PUSH
30818: LD_VAR 0 5
30822: ARRAY
30823: PUSH
30824: LD_VAR 0 1
30828: DIFF
30829: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
30830: LD_ADDR_EXP 48
30834: PUSH
30835: LD_EXP 48
30839: PPUSH
30840: LD_VAR 0 5
30844: PPUSH
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 1
30854: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
30855: LD_VAR 0 1
30859: PUSH
30860: LD_EXP 56
30864: PUSH
30865: LD_VAR 0 5
30869: ARRAY
30870: IN
30871: IFFALSE 30910
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
30873: LD_ADDR_EXP 56
30877: PUSH
30878: LD_EXP 56
30882: PPUSH
30883: LD_VAR 0 5
30887: PPUSH
30888: LD_EXP 56
30892: PUSH
30893: LD_VAR 0 5
30897: ARRAY
30898: PUSH
30899: LD_VAR 0 1
30903: DIFF
30904: PPUSH
30905: CALL_OW 1
30909: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
30910: LD_VAR 0 1
30914: PUSH
30915: LD_EXP 57
30919: PUSH
30920: LD_VAR 0 5
30924: ARRAY
30925: IN
30926: IFFALSE 30965
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
30928: LD_ADDR_EXP 57
30932: PUSH
30933: LD_EXP 57
30937: PPUSH
30938: LD_VAR 0 5
30942: PPUSH
30943: LD_EXP 57
30947: PUSH
30948: LD_VAR 0 5
30952: ARRAY
30953: PUSH
30954: LD_VAR 0 1
30958: DIFF
30959: PPUSH
30960: CALL_OW 1
30964: ST_TO_ADDR
// break ;
30965: GO 30969
// end ;
30967: GO 30787
30969: POP
30970: POP
// end ;
30971: LD_VAR 0 4
30975: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
30976: LD_INT 0
30978: PPUSH
30979: PPUSH
30980: PPUSH
// if not mc_bases or not side in mc_sides then
30981: LD_EXP 48
30985: NOT
30986: PUSH
30987: LD_VAR 0 3
30991: PUSH
30992: LD_EXP 74
30996: IN
30997: NOT
30998: OR
30999: IFFALSE 31003
// exit ;
31001: GO 31126
// for i = 1 to mc_vehicles do
31003: LD_ADDR_VAR 0 6
31007: PUSH
31008: DOUBLE
31009: LD_INT 1
31011: DEC
31012: ST_TO_ADDR
31013: LD_EXP 67
31017: PUSH
31018: FOR_TO
31019: IFFALSE 31124
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
31021: LD_VAR 0 2
31025: PUSH
31026: LD_EXP 67
31030: PUSH
31031: LD_VAR 0 6
31035: ARRAY
31036: IN
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: LD_EXP 67
31047: PUSH
31048: LD_VAR 0 6
31052: ARRAY
31053: IN
31054: OR
31055: IFFALSE 31122
// begin tmp := mc_vehicles [ i ] diff old ;
31057: LD_ADDR_VAR 0 7
31061: PUSH
31062: LD_EXP 67
31066: PUSH
31067: LD_VAR 0 6
31071: ARRAY
31072: PUSH
31073: LD_VAR 0 2
31077: DIFF
31078: ST_TO_ADDR
// tmp := tmp diff new ;
31079: LD_ADDR_VAR 0 7
31083: PUSH
31084: LD_VAR 0 7
31088: PUSH
31089: LD_VAR 0 1
31093: DIFF
31094: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
31095: LD_ADDR_EXP 67
31099: PUSH
31100: LD_EXP 67
31104: PPUSH
31105: LD_VAR 0 6
31109: PPUSH
31110: LD_VAR 0 7
31114: PPUSH
31115: CALL_OW 1
31119: ST_TO_ADDR
// break ;
31120: GO 31124
// end ;
31122: GO 31018
31124: POP
31125: POP
// end ;
31126: LD_VAR 0 5
31130: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
// if not mc_bases then
31137: LD_EXP 48
31141: NOT
31142: IFFALSE 31146
// exit ;
31144: GO 31438
// side := GetSide ( vehicle ) ;
31146: LD_ADDR_VAR 0 5
31150: PUSH
31151: LD_VAR 0 1
31155: PPUSH
31156: CALL_OW 255
31160: ST_TO_ADDR
// for i = 1 to mc_bases do
31161: LD_ADDR_VAR 0 4
31165: PUSH
31166: DOUBLE
31167: LD_INT 1
31169: DEC
31170: ST_TO_ADDR
31171: LD_EXP 48
31175: PUSH
31176: FOR_TO
31177: IFFALSE 31436
// begin if factory in mc_bases [ i ] then
31179: LD_VAR 0 2
31183: PUSH
31184: LD_EXP 48
31188: PUSH
31189: LD_VAR 0 4
31193: ARRAY
31194: IN
31195: IFFALSE 31434
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
31197: LD_EXP 70
31201: PUSH
31202: LD_VAR 0 4
31206: ARRAY
31207: PUSH
31208: LD_EXP 59
31212: PUSH
31213: LD_VAR 0 4
31217: ARRAY
31218: LESS
31219: IFFALSE 31390
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
31221: LD_ADDR_EXP 70
31225: PUSH
31226: LD_EXP 70
31230: PPUSH
31231: LD_VAR 0 4
31235: PPUSH
31236: LD_EXP 70
31240: PUSH
31241: LD_VAR 0 4
31245: ARRAY
31246: PUSH
31247: LD_VAR 0 1
31251: ADD
31252: PPUSH
31253: CALL_OW 1
31257: ST_TO_ADDR
// if not mc_scan [ i ] then
31258: LD_EXP 71
31262: PUSH
31263: LD_VAR 0 4
31267: ARRAY
31268: NOT
31269: IFFALSE 31388
// begin if GetControl ( vehicle ) = control_remote then
31271: LD_VAR 0 1
31275: PPUSH
31276: CALL_OW 263
31280: PUSH
31281: LD_INT 2
31283: EQUAL
31284: IFFALSE 31304
// repeat wait ( 0 0$1 ) ;
31286: LD_INT 35
31288: PPUSH
31289: CALL_OW 67
// until IsControledBy ( vehicle ) ;
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 312
31302: IFFALSE 31286
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
31304: LD_VAR 0 1
31308: PPUSH
31309: LD_EXP 72
31313: PUSH
31314: LD_VAR 0 4
31318: ARRAY
31319: PPUSH
31320: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 263
31333: PUSH
31334: LD_INT 1
31336: NONEQUAL
31337: IFFALSE 31341
// break ;
31339: GO 31436
// repeat wait ( 0 0$1 ) ;
31341: LD_INT 35
31343: PPUSH
31344: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
31348: LD_VAR 0 1
31352: PPUSH
31353: LD_EXP 72
31357: PUSH
31358: LD_VAR 0 4
31362: ARRAY
31363: PPUSH
31364: CALL_OW 308
31368: IFFALSE 31341
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL_OW 311
31379: PPUSH
31380: CALL_OW 121
// exit ;
31384: POP
31385: POP
31386: GO 31438
// end ; end else
31388: GO 31434
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
31390: LD_ADDR_EXP 67
31394: PUSH
31395: LD_EXP 67
31399: PPUSH
31400: LD_VAR 0 4
31404: PUSH
31405: LD_EXP 67
31409: PUSH
31410: LD_VAR 0 4
31414: ARRAY
31415: PUSH
31416: LD_INT 1
31418: PLUS
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PPUSH
31424: LD_VAR 0 1
31428: PPUSH
31429: CALL 41197 0 3
31433: ST_TO_ADDR
// end ; end ;
31434: GO 31176
31436: POP
31437: POP
// end ;
31438: LD_VAR 0 3
31442: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
31447: PPUSH
31448: PPUSH
// if not mc_bases then
31449: LD_EXP 48
31453: NOT
31454: IFFALSE 31458
// exit ;
31456: GO 31811
// repeat wait ( 0 0$1 ) ;
31458: LD_INT 35
31460: PPUSH
31461: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
31465: LD_VAR 0 2
31469: PPUSH
31470: LD_VAR 0 3
31474: PPUSH
31475: CALL_OW 284
31479: IFFALSE 31458
// if GetResourceTypeXY ( x , y ) = mat_artefact then
31481: LD_VAR 0 2
31485: PPUSH
31486: LD_VAR 0 3
31490: PPUSH
31491: CALL_OW 283
31495: PUSH
31496: LD_INT 4
31498: EQUAL
31499: IFFALSE 31503
// exit ;
31501: GO 31811
// for i = 1 to mc_bases do
31503: LD_ADDR_VAR 0 7
31507: PUSH
31508: DOUBLE
31509: LD_INT 1
31511: DEC
31512: ST_TO_ADDR
31513: LD_EXP 48
31517: PUSH
31518: FOR_TO
31519: IFFALSE 31809
// begin if mc_crates_area [ i ] then
31521: LD_EXP 66
31525: PUSH
31526: LD_VAR 0 7
31530: ARRAY
31531: IFFALSE 31642
// for j in mc_crates_area [ i ] do
31533: LD_ADDR_VAR 0 8
31537: PUSH
31538: LD_EXP 66
31542: PUSH
31543: LD_VAR 0 7
31547: ARRAY
31548: PUSH
31549: FOR_IN
31550: IFFALSE 31640
// if InArea ( x , y , j ) then
31552: LD_VAR 0 2
31556: PPUSH
31557: LD_VAR 0 3
31561: PPUSH
31562: LD_VAR 0 8
31566: PPUSH
31567: CALL_OW 309
31571: IFFALSE 31638
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
31573: LD_ADDR_EXP 64
31577: PUSH
31578: LD_EXP 64
31582: PPUSH
31583: LD_VAR 0 7
31587: PUSH
31588: LD_EXP 64
31592: PUSH
31593: LD_VAR 0 7
31597: ARRAY
31598: PUSH
31599: LD_INT 1
31601: PLUS
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PPUSH
31607: LD_VAR 0 4
31611: PUSH
31612: LD_VAR 0 2
31616: PUSH
31617: LD_VAR 0 3
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: PPUSH
31627: CALL 41197 0 3
31631: ST_TO_ADDR
// exit ;
31632: POP
31633: POP
31634: POP
31635: POP
31636: GO 31811
// end ;
31638: GO 31549
31640: POP
31641: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31642: LD_ADDR_VAR 0 9
31646: PUSH
31647: LD_EXP 48
31651: PUSH
31652: LD_VAR 0 7
31656: ARRAY
31657: PPUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 30
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 30
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: LIST
31685: PPUSH
31686: CALL_OW 72
31690: ST_TO_ADDR
// if not depot then
31691: LD_VAR 0 9
31695: NOT
31696: IFFALSE 31700
// continue ;
31698: GO 31518
// for j in depot do
31700: LD_ADDR_VAR 0 8
31704: PUSH
31705: LD_VAR 0 9
31709: PUSH
31710: FOR_IN
31711: IFFALSE 31805
// if GetDistUnitXY ( j , x , y ) < 30 then
31713: LD_VAR 0 8
31717: PPUSH
31718: LD_VAR 0 2
31722: PPUSH
31723: LD_VAR 0 3
31727: PPUSH
31728: CALL_OW 297
31732: PUSH
31733: LD_INT 30
31735: LESS
31736: IFFALSE 31803
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
31738: LD_ADDR_EXP 64
31742: PUSH
31743: LD_EXP 64
31747: PPUSH
31748: LD_VAR 0 7
31752: PUSH
31753: LD_EXP 64
31757: PUSH
31758: LD_VAR 0 7
31762: ARRAY
31763: PUSH
31764: LD_INT 1
31766: PLUS
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PPUSH
31772: LD_VAR 0 4
31776: PUSH
31777: LD_VAR 0 2
31781: PUSH
31782: LD_VAR 0 3
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: LIST
31791: PPUSH
31792: CALL 41197 0 3
31796: ST_TO_ADDR
// exit ;
31797: POP
31798: POP
31799: POP
31800: POP
31801: GO 31811
// end ;
31803: GO 31710
31805: POP
31806: POP
// end ;
31807: GO 31518
31809: POP
31810: POP
// end ;
31811: LD_VAR 0 6
31815: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
31816: LD_INT 0
31818: PPUSH
31819: PPUSH
31820: PPUSH
31821: PPUSH
// side := GetSide ( lab ) ;
31822: LD_ADDR_VAR 0 4
31826: PUSH
31827: LD_VAR 0 2
31831: PPUSH
31832: CALL_OW 255
31836: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
31837: LD_VAR 0 4
31841: PUSH
31842: LD_EXP 74
31846: IN
31847: NOT
31848: PUSH
31849: LD_EXP 75
31853: NOT
31854: OR
31855: PUSH
31856: LD_EXP 48
31860: NOT
31861: OR
31862: IFFALSE 31866
// exit ;
31864: GO 32099
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
31866: LD_ADDR_EXP 75
31870: PUSH
31871: LD_EXP 75
31875: PPUSH
31876: LD_VAR 0 4
31880: PPUSH
31881: LD_EXP 75
31885: PUSH
31886: LD_VAR 0 4
31890: ARRAY
31891: PUSH
31892: LD_VAR 0 1
31896: DIFF
31897: PPUSH
31898: CALL_OW 1
31902: ST_TO_ADDR
// for i = 1 to mc_bases do
31903: LD_ADDR_VAR 0 5
31907: PUSH
31908: DOUBLE
31909: LD_INT 1
31911: DEC
31912: ST_TO_ADDR
31913: LD_EXP 48
31917: PUSH
31918: FOR_TO
31919: IFFALSE 32097
// begin if lab in mc_bases [ i ] then
31921: LD_VAR 0 2
31925: PUSH
31926: LD_EXP 48
31930: PUSH
31931: LD_VAR 0 5
31935: ARRAY
31936: IN
31937: IFFALSE 32095
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
31939: LD_VAR 0 1
31943: PUSH
31944: LD_INT 11
31946: PUSH
31947: LD_INT 4
31949: PUSH
31950: LD_INT 3
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: IN
31962: PUSH
31963: LD_EXP 78
31967: PUSH
31968: LD_VAR 0 5
31972: ARRAY
31973: AND
31974: IFFALSE 32095
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
31976: LD_ADDR_VAR 0 6
31980: PUSH
31981: LD_EXP 78
31985: PUSH
31986: LD_VAR 0 5
31990: ARRAY
31991: PUSH
31992: LD_INT 1
31994: ARRAY
31995: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
31996: LD_ADDR_EXP 78
32000: PUSH
32001: LD_EXP 78
32005: PPUSH
32006: LD_VAR 0 5
32010: PPUSH
32011: EMPTY
32012: PPUSH
32013: CALL_OW 1
32017: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
32018: LD_VAR 0 6
32022: PPUSH
32023: LD_INT 0
32025: PPUSH
32026: CALL_OW 109
// ComExitBuilding ( tmp ) ;
32030: LD_VAR 0 6
32034: PPUSH
32035: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
32039: LD_ADDR_EXP 77
32043: PUSH
32044: LD_EXP 77
32048: PPUSH
32049: LD_VAR 0 5
32053: PPUSH
32054: LD_EXP 77
32058: PUSH
32059: LD_VAR 0 5
32063: ARRAY
32064: PPUSH
32065: LD_INT 1
32067: PPUSH
32068: LD_VAR 0 6
32072: PPUSH
32073: CALL_OW 2
32077: PPUSH
32078: CALL_OW 1
32082: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
32083: LD_VAR 0 5
32087: PPUSH
32088: LD_INT 112
32090: PPUSH
32091: CALL 17869 0 2
// end ; end ; end ;
32095: GO 31918
32097: POP
32098: POP
// end ;
32099: LD_VAR 0 3
32103: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
// if not mc_bases then
32114: LD_EXP 48
32118: NOT
32119: IFFALSE 32123
// exit ;
32121: GO 33048
// for i = 1 to mc_bases do
32123: LD_ADDR_VAR 0 3
32127: PUSH
32128: DOUBLE
32129: LD_INT 1
32131: DEC
32132: ST_TO_ADDR
32133: LD_EXP 48
32137: PUSH
32138: FOR_TO
32139: IFFALSE 33046
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
32141: LD_VAR 0 1
32145: PUSH
32146: LD_EXP 48
32150: PUSH
32151: LD_VAR 0 3
32155: ARRAY
32156: IN
32157: PUSH
32158: LD_VAR 0 1
32162: PUSH
32163: LD_EXP 55
32167: PUSH
32168: LD_VAR 0 3
32172: ARRAY
32173: IN
32174: OR
32175: PUSH
32176: LD_VAR 0 1
32180: PUSH
32181: LD_EXP 67
32185: PUSH
32186: LD_VAR 0 3
32190: ARRAY
32191: IN
32192: OR
32193: PUSH
32194: LD_VAR 0 1
32198: PUSH
32199: LD_EXP 77
32203: PUSH
32204: LD_VAR 0 3
32208: ARRAY
32209: IN
32210: OR
32211: PUSH
32212: LD_VAR 0 1
32216: PUSH
32217: LD_EXP 78
32221: PUSH
32222: LD_VAR 0 3
32226: ARRAY
32227: IN
32228: OR
32229: IFFALSE 33044
// begin if un in mc_ape [ i ] then
32231: LD_VAR 0 1
32235: PUSH
32236: LD_EXP 77
32240: PUSH
32241: LD_VAR 0 3
32245: ARRAY
32246: IN
32247: IFFALSE 32286
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
32249: LD_ADDR_EXP 77
32253: PUSH
32254: LD_EXP 77
32258: PPUSH
32259: LD_VAR 0 3
32263: PPUSH
32264: LD_EXP 77
32268: PUSH
32269: LD_VAR 0 3
32273: ARRAY
32274: PUSH
32275: LD_VAR 0 1
32279: DIFF
32280: PPUSH
32281: CALL_OW 1
32285: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
32286: LD_VAR 0 1
32290: PUSH
32291: LD_EXP 78
32295: PUSH
32296: LD_VAR 0 3
32300: ARRAY
32301: IN
32302: IFFALSE 32326
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
32304: LD_ADDR_EXP 78
32308: PUSH
32309: LD_EXP 78
32313: PPUSH
32314: LD_VAR 0 3
32318: PPUSH
32319: EMPTY
32320: PPUSH
32321: CALL_OW 1
32325: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
32326: LD_VAR 0 1
32330: PPUSH
32331: CALL_OW 247
32335: PUSH
32336: LD_INT 2
32338: EQUAL
32339: PUSH
32340: LD_VAR 0 1
32344: PPUSH
32345: CALL_OW 110
32349: PUSH
32350: LD_INT 20
32352: EQUAL
32353: AND
32354: IFFALSE 32457
// begin fac := MC_GetBuilding ( i , b_factory ) ;
32356: LD_ADDR_VAR 0 8
32360: PUSH
32361: LD_VAR 0 3
32365: PPUSH
32366: LD_INT 3
32368: PPUSH
32369: CALL 30127 0 2
32373: ST_TO_ADDR
// if fac then
32374: LD_VAR 0 8
32378: IFFALSE 32457
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
32380: LD_ADDR_VAR 0 9
32384: PUSH
32385: LD_VAR 0 8
32389: PPUSH
32390: LD_VAR 0 1
32394: PPUSH
32395: CALL_OW 265
32399: PPUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 262
32409: PPUSH
32410: LD_VAR 0 1
32414: PPUSH
32415: CALL_OW 263
32419: PPUSH
32420: LD_VAR 0 1
32424: PPUSH
32425: CALL_OW 264
32429: PPUSH
32430: CALL 38362 0 5
32434: ST_TO_ADDR
// if components then
32435: LD_VAR 0 9
32439: IFFALSE 32455
// MC_InsertProduceList ( i , components ) ;
32441: LD_VAR 0 3
32445: PPUSH
32446: LD_VAR 0 9
32450: PPUSH
32451: CALL 29790 0 2
// break ;
32455: GO 33046
// end ; end ; if GetType ( un ) = unit_building then
32457: LD_VAR 0 1
32461: PPUSH
32462: CALL_OW 247
32466: PUSH
32467: LD_INT 3
32469: EQUAL
32470: IFFALSE 32767
// begin btype := GetBType ( un ) ;
32472: LD_ADDR_VAR 0 5
32476: PUSH
32477: LD_VAR 0 1
32481: PPUSH
32482: CALL_OW 266
32486: ST_TO_ADDR
// if btype = b_warehouse then
32487: LD_VAR 0 5
32491: PUSH
32492: LD_INT 1
32494: EQUAL
32495: IFFALSE 32513
// begin btype := b_depot ;
32497: LD_ADDR_VAR 0 5
32501: PUSH
32502: LD_INT 0
32504: ST_TO_ADDR
// pos := 1 ;
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: LD_INT 1
32512: ST_TO_ADDR
// end ; if btype = b_factory then
32513: LD_VAR 0 5
32517: PUSH
32518: LD_INT 3
32520: EQUAL
32521: IFFALSE 32539
// begin btype := b_workshop ;
32523: LD_ADDR_VAR 0 5
32527: PUSH
32528: LD_INT 2
32530: ST_TO_ADDR
// pos := 1 ;
32531: LD_ADDR_VAR 0 6
32535: PUSH
32536: LD_INT 1
32538: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
32539: LD_VAR 0 5
32543: PUSH
32544: LD_INT 7
32546: PUSH
32547: LD_INT 8
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: IN
32554: IFFALSE 32564
// btype := b_lab ;
32556: LD_ADDR_VAR 0 5
32560: PUSH
32561: LD_INT 6
32563: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
32564: LD_ADDR_EXP 53
32568: PUSH
32569: LD_EXP 53
32573: PPUSH
32574: LD_VAR 0 3
32578: PUSH
32579: LD_EXP 53
32583: PUSH
32584: LD_VAR 0 3
32588: ARRAY
32589: PUSH
32590: LD_INT 1
32592: PLUS
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PPUSH
32598: LD_VAR 0 5
32602: PUSH
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 250
32612: PUSH
32613: LD_VAR 0 1
32617: PPUSH
32618: CALL_OW 251
32622: PUSH
32623: LD_VAR 0 1
32627: PPUSH
32628: CALL_OW 254
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: PPUSH
32639: CALL 41197 0 3
32643: ST_TO_ADDR
// if pos = 1 then
32644: LD_VAR 0 6
32648: PUSH
32649: LD_INT 1
32651: EQUAL
32652: IFFALSE 32767
// begin tmp := mc_build_list [ i ] ;
32654: LD_ADDR_VAR 0 7
32658: PUSH
32659: LD_EXP 53
32663: PUSH
32664: LD_VAR 0 3
32668: ARRAY
32669: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
32670: LD_VAR 0 7
32674: PPUSH
32675: LD_INT 2
32677: PUSH
32678: LD_INT 30
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 30
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: LIST
32702: PPUSH
32703: CALL_OW 72
32707: IFFALSE 32717
// pos := 2 ;
32709: LD_ADDR_VAR 0 6
32713: PUSH
32714: LD_INT 2
32716: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
32717: LD_ADDR_VAR 0 7
32721: PUSH
32722: LD_VAR 0 7
32726: PPUSH
32727: LD_VAR 0 6
32731: PPUSH
32732: LD_VAR 0 7
32736: PPUSH
32737: CALL 41088 0 3
32741: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
32742: LD_ADDR_EXP 53
32746: PUSH
32747: LD_EXP 53
32751: PPUSH
32752: LD_VAR 0 3
32756: PPUSH
32757: LD_VAR 0 7
32761: PPUSH
32762: CALL_OW 1
32766: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
32767: LD_VAR 0 1
32771: PUSH
32772: LD_EXP 48
32776: PUSH
32777: LD_VAR 0 3
32781: ARRAY
32782: IN
32783: IFFALSE 32822
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
32785: LD_ADDR_EXP 48
32789: PUSH
32790: LD_EXP 48
32794: PPUSH
32795: LD_VAR 0 3
32799: PPUSH
32800: LD_EXP 48
32804: PUSH
32805: LD_VAR 0 3
32809: ARRAY
32810: PUSH
32811: LD_VAR 0 1
32815: DIFF
32816: PPUSH
32817: CALL_OW 1
32821: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
32822: LD_VAR 0 1
32826: PUSH
32827: LD_EXP 55
32831: PUSH
32832: LD_VAR 0 3
32836: ARRAY
32837: IN
32838: IFFALSE 32877
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
32840: LD_ADDR_EXP 55
32844: PUSH
32845: LD_EXP 55
32849: PPUSH
32850: LD_VAR 0 3
32854: PPUSH
32855: LD_EXP 55
32859: PUSH
32860: LD_VAR 0 3
32864: ARRAY
32865: PUSH
32866: LD_VAR 0 1
32870: DIFF
32871: PPUSH
32872: CALL_OW 1
32876: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
32877: LD_VAR 0 1
32881: PUSH
32882: LD_EXP 67
32886: PUSH
32887: LD_VAR 0 3
32891: ARRAY
32892: IN
32893: IFFALSE 32932
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
32895: LD_ADDR_EXP 67
32899: PUSH
32900: LD_EXP 67
32904: PPUSH
32905: LD_VAR 0 3
32909: PPUSH
32910: LD_EXP 67
32914: PUSH
32915: LD_VAR 0 3
32919: ARRAY
32920: PUSH
32921: LD_VAR 0 1
32925: DIFF
32926: PPUSH
32927: CALL_OW 1
32931: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
32932: LD_VAR 0 1
32936: PUSH
32937: LD_EXP 57
32941: PUSH
32942: LD_VAR 0 3
32946: ARRAY
32947: IN
32948: IFFALSE 32987
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
32950: LD_ADDR_EXP 57
32954: PUSH
32955: LD_EXP 57
32959: PPUSH
32960: LD_VAR 0 3
32964: PPUSH
32965: LD_EXP 57
32969: PUSH
32970: LD_VAR 0 3
32974: ARRAY
32975: PUSH
32976: LD_VAR 0 1
32980: DIFF
32981: PPUSH
32982: CALL_OW 1
32986: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
32987: LD_VAR 0 1
32991: PUSH
32992: LD_EXP 56
32996: PUSH
32997: LD_VAR 0 3
33001: ARRAY
33002: IN
33003: IFFALSE 33042
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
33005: LD_ADDR_EXP 56
33009: PUSH
33010: LD_EXP 56
33014: PPUSH
33015: LD_VAR 0 3
33019: PPUSH
33020: LD_EXP 56
33024: PUSH
33025: LD_VAR 0 3
33029: ARRAY
33030: PUSH
33031: LD_VAR 0 1
33035: DIFF
33036: PPUSH
33037: CALL_OW 1
33041: ST_TO_ADDR
// end ; break ;
33042: GO 33046
// end ;
33044: GO 32138
33046: POP
33047: POP
// end ;
33048: LD_VAR 0 2
33052: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
33057: PPUSH
// if not mc_bases then
33058: LD_EXP 48
33062: NOT
33063: IFFALSE 33067
// exit ;
33065: GO 33282
// for i = 1 to mc_bases do
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: DOUBLE
33073: LD_INT 1
33075: DEC
33076: ST_TO_ADDR
33077: LD_EXP 48
33081: PUSH
33082: FOR_TO
33083: IFFALSE 33280
// begin if building in mc_construct_list [ i ] then
33085: LD_VAR 0 1
33089: PUSH
33090: LD_EXP 55
33094: PUSH
33095: LD_VAR 0 3
33099: ARRAY
33100: IN
33101: IFFALSE 33278
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
33103: LD_ADDR_EXP 55
33107: PUSH
33108: LD_EXP 55
33112: PPUSH
33113: LD_VAR 0 3
33117: PPUSH
33118: LD_EXP 55
33122: PUSH
33123: LD_VAR 0 3
33127: ARRAY
33128: PUSH
33129: LD_VAR 0 1
33133: DIFF
33134: PPUSH
33135: CALL_OW 1
33139: ST_TO_ADDR
// if building in mc_lab [ i ] then
33140: LD_VAR 0 1
33144: PUSH
33145: LD_EXP 81
33149: PUSH
33150: LD_VAR 0 3
33154: ARRAY
33155: IN
33156: IFFALSE 33211
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
33158: LD_ADDR_EXP 82
33162: PUSH
33163: LD_EXP 82
33167: PPUSH
33168: LD_VAR 0 3
33172: PPUSH
33173: LD_EXP 82
33177: PUSH
33178: LD_VAR 0 3
33182: ARRAY
33183: PPUSH
33184: LD_INT 1
33186: PPUSH
33187: LD_EXP 82
33191: PUSH
33192: LD_VAR 0 3
33196: ARRAY
33197: PPUSH
33198: LD_INT 0
33200: PPUSH
33201: CALL 40180 0 4
33205: PPUSH
33206: CALL_OW 1
33210: ST_TO_ADDR
// if not building in mc_bases [ i ] then
33211: LD_VAR 0 1
33215: PUSH
33216: LD_EXP 48
33220: PUSH
33221: LD_VAR 0 3
33225: ARRAY
33226: IN
33227: NOT
33228: IFFALSE 33274
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
33230: LD_ADDR_EXP 48
33234: PUSH
33235: LD_EXP 48
33239: PPUSH
33240: LD_VAR 0 3
33244: PUSH
33245: LD_EXP 48
33249: PUSH
33250: LD_VAR 0 3
33254: ARRAY
33255: PUSH
33256: LD_INT 1
33258: PLUS
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PPUSH
33264: LD_VAR 0 1
33268: PPUSH
33269: CALL 41197 0 3
33273: ST_TO_ADDR
// exit ;
33274: POP
33275: POP
33276: GO 33282
// end ; end ;
33278: GO 33082
33280: POP
33281: POP
// end ;
33282: LD_VAR 0 2
33286: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
33287: LD_INT 0
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
33293: PPUSH
33294: PPUSH
33295: PPUSH
// if not mc_bases then
33296: LD_EXP 48
33300: NOT
33301: IFFALSE 33305
// exit ;
33303: GO 33966
// for i = 1 to mc_bases do
33305: LD_ADDR_VAR 0 3
33309: PUSH
33310: DOUBLE
33311: LD_INT 1
33313: DEC
33314: ST_TO_ADDR
33315: LD_EXP 48
33319: PUSH
33320: FOR_TO
33321: IFFALSE 33964
// begin if building in mc_construct_list [ i ] then
33323: LD_VAR 0 1
33327: PUSH
33328: LD_EXP 55
33332: PUSH
33333: LD_VAR 0 3
33337: ARRAY
33338: IN
33339: IFFALSE 33962
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
33341: LD_ADDR_EXP 55
33345: PUSH
33346: LD_EXP 55
33350: PPUSH
33351: LD_VAR 0 3
33355: PPUSH
33356: LD_EXP 55
33360: PUSH
33361: LD_VAR 0 3
33365: ARRAY
33366: PUSH
33367: LD_VAR 0 1
33371: DIFF
33372: PPUSH
33373: CALL_OW 1
33377: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
33378: LD_ADDR_EXP 48
33382: PUSH
33383: LD_EXP 48
33387: PPUSH
33388: LD_VAR 0 3
33392: PUSH
33393: LD_EXP 48
33397: PUSH
33398: LD_VAR 0 3
33402: ARRAY
33403: PUSH
33404: LD_INT 1
33406: PLUS
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PPUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: CALL 41197 0 3
33421: ST_TO_ADDR
// btype := GetBType ( building ) ;
33422: LD_ADDR_VAR 0 5
33426: PUSH
33427: LD_VAR 0 1
33431: PPUSH
33432: CALL_OW 266
33436: ST_TO_ADDR
// side := GetSide ( building ) ;
33437: LD_ADDR_VAR 0 8
33441: PUSH
33442: LD_VAR 0 1
33446: PPUSH
33447: CALL_OW 255
33451: ST_TO_ADDR
// if btype = b_lab then
33452: LD_VAR 0 5
33456: PUSH
33457: LD_INT 6
33459: EQUAL
33460: IFFALSE 33510
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
33462: LD_ADDR_EXP 81
33466: PUSH
33467: LD_EXP 81
33471: PPUSH
33472: LD_VAR 0 3
33476: PUSH
33477: LD_EXP 81
33481: PUSH
33482: LD_VAR 0 3
33486: ARRAY
33487: PUSH
33488: LD_INT 1
33490: PLUS
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PPUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: CALL 41197 0 3
33505: ST_TO_ADDR
// exit ;
33506: POP
33507: POP
33508: GO 33966
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
33510: LD_VAR 0 5
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: LD_INT 4
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: IN
33529: IFFALSE 33653
// begin if btype = b_armoury then
33531: LD_VAR 0 5
33535: PUSH
33536: LD_INT 4
33538: EQUAL
33539: IFFALSE 33549
// btype := b_barracks ;
33541: LD_ADDR_VAR 0 5
33545: PUSH
33546: LD_INT 5
33548: ST_TO_ADDR
// if btype = b_depot then
33549: LD_VAR 0 5
33553: PUSH
33554: LD_INT 0
33556: EQUAL
33557: IFFALSE 33567
// btype := b_warehouse ;
33559: LD_ADDR_VAR 0 5
33563: PUSH
33564: LD_INT 1
33566: ST_TO_ADDR
// if btype = b_workshop then
33567: LD_VAR 0 5
33571: PUSH
33572: LD_INT 2
33574: EQUAL
33575: IFFALSE 33585
// btype := b_factory ;
33577: LD_ADDR_VAR 0 5
33581: PUSH
33582: LD_INT 3
33584: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
33585: LD_VAR 0 5
33589: PPUSH
33590: LD_VAR 0 8
33594: PPUSH
33595: CALL_OW 323
33599: PUSH
33600: LD_INT 1
33602: EQUAL
33603: IFFALSE 33649
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
33605: LD_ADDR_EXP 80
33609: PUSH
33610: LD_EXP 80
33614: PPUSH
33615: LD_VAR 0 3
33619: PUSH
33620: LD_EXP 80
33624: PUSH
33625: LD_VAR 0 3
33629: ARRAY
33630: PUSH
33631: LD_INT 1
33633: PLUS
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PPUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL 41197 0 3
33648: ST_TO_ADDR
// exit ;
33649: POP
33650: POP
33651: GO 33966
// end ; if btype in [ b_bunker , b_turret ] then
33653: LD_VAR 0 5
33657: PUSH
33658: LD_INT 32
33660: PUSH
33661: LD_INT 33
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: IN
33668: IFFALSE 33958
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
33670: LD_ADDR_EXP 56
33674: PUSH
33675: LD_EXP 56
33679: PPUSH
33680: LD_VAR 0 3
33684: PUSH
33685: LD_EXP 56
33689: PUSH
33690: LD_VAR 0 3
33694: ARRAY
33695: PUSH
33696: LD_INT 1
33698: PLUS
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PPUSH
33704: LD_VAR 0 1
33708: PPUSH
33709: CALL 41197 0 3
33713: ST_TO_ADDR
// if btype = b_bunker then
33714: LD_VAR 0 5
33718: PUSH
33719: LD_INT 32
33721: EQUAL
33722: IFFALSE 33958
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
33724: LD_ADDR_EXP 57
33728: PUSH
33729: LD_EXP 57
33733: PPUSH
33734: LD_VAR 0 3
33738: PUSH
33739: LD_EXP 57
33743: PUSH
33744: LD_VAR 0 3
33748: ARRAY
33749: PUSH
33750: LD_INT 1
33752: PLUS
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PPUSH
33758: LD_VAR 0 1
33762: PPUSH
33763: CALL 41197 0 3
33767: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
33768: LD_ADDR_VAR 0 6
33772: PUSH
33773: LD_EXP 48
33777: PUSH
33778: LD_VAR 0 3
33782: ARRAY
33783: PPUSH
33784: LD_INT 25
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 54
33799: PUSH
33800: EMPTY
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PPUSH
33811: CALL_OW 72
33815: ST_TO_ADDR
// if tmp then
33816: LD_VAR 0 6
33820: IFFALSE 33826
// exit ;
33822: POP
33823: POP
33824: GO 33966
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
33826: LD_ADDR_VAR 0 6
33830: PUSH
33831: LD_EXP 48
33835: PUSH
33836: LD_VAR 0 3
33840: ARRAY
33841: PPUSH
33842: LD_INT 2
33844: PUSH
33845: LD_INT 30
33847: PUSH
33848: LD_INT 4
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 30
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: LIST
33869: PPUSH
33870: CALL_OW 72
33874: ST_TO_ADDR
// if not tmp then
33875: LD_VAR 0 6
33879: NOT
33880: IFFALSE 33886
// exit ;
33882: POP
33883: POP
33884: GO 33966
// for j in tmp do
33886: LD_ADDR_VAR 0 4
33890: PUSH
33891: LD_VAR 0 6
33895: PUSH
33896: FOR_IN
33897: IFFALSE 33956
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
33899: LD_ADDR_VAR 0 7
33903: PUSH
33904: LD_VAR 0 4
33908: PPUSH
33909: CALL_OW 313
33913: PPUSH
33914: LD_INT 25
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PPUSH
33924: CALL_OW 72
33928: ST_TO_ADDR
// if units then
33929: LD_VAR 0 7
33933: IFFALSE 33954
// begin ComExitBuilding ( units [ 1 ] ) ;
33935: LD_VAR 0 7
33939: PUSH
33940: LD_INT 1
33942: ARRAY
33943: PPUSH
33944: CALL_OW 122
// exit ;
33948: POP
33949: POP
33950: POP
33951: POP
33952: GO 33966
// end ; end ;
33954: GO 33896
33956: POP
33957: POP
// end ; end ; exit ;
33958: POP
33959: POP
33960: GO 33966
// end ; end ;
33962: GO 33320
33964: POP
33965: POP
// end ;
33966: LD_VAR 0 2
33970: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
33971: LD_INT 0
33973: PPUSH
33974: PPUSH
33975: PPUSH
33976: PPUSH
33977: PPUSH
33978: PPUSH
33979: PPUSH
// if not mc_bases then
33980: LD_EXP 48
33984: NOT
33985: IFFALSE 33989
// exit ;
33987: GO 34220
// btype := GetBType ( building ) ;
33989: LD_ADDR_VAR 0 6
33993: PUSH
33994: LD_VAR 0 1
33998: PPUSH
33999: CALL_OW 266
34003: ST_TO_ADDR
// x := GetX ( building ) ;
34004: LD_ADDR_VAR 0 7
34008: PUSH
34009: LD_VAR 0 1
34013: PPUSH
34014: CALL_OW 250
34018: ST_TO_ADDR
// y := GetY ( building ) ;
34019: LD_ADDR_VAR 0 8
34023: PUSH
34024: LD_VAR 0 1
34028: PPUSH
34029: CALL_OW 251
34033: ST_TO_ADDR
// d := GetDir ( building ) ;
34034: LD_ADDR_VAR 0 9
34038: PUSH
34039: LD_VAR 0 1
34043: PPUSH
34044: CALL_OW 254
34048: ST_TO_ADDR
// for i = 1 to mc_bases do
34049: LD_ADDR_VAR 0 4
34053: PUSH
34054: DOUBLE
34055: LD_INT 1
34057: DEC
34058: ST_TO_ADDR
34059: LD_EXP 48
34063: PUSH
34064: FOR_TO
34065: IFFALSE 34218
// begin if not mc_build_list [ i ] then
34067: LD_EXP 53
34071: PUSH
34072: LD_VAR 0 4
34076: ARRAY
34077: NOT
34078: IFFALSE 34082
// continue ;
34080: GO 34064
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
34082: LD_VAR 0 6
34086: PUSH
34087: LD_VAR 0 7
34091: PUSH
34092: LD_VAR 0 8
34096: PUSH
34097: LD_VAR 0 9
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: PPUSH
34108: LD_EXP 53
34112: PUSH
34113: LD_VAR 0 4
34117: ARRAY
34118: PUSH
34119: LD_INT 1
34121: ARRAY
34122: PPUSH
34123: CALL 46795 0 2
34127: IFFALSE 34216
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
34129: LD_ADDR_EXP 53
34133: PUSH
34134: LD_EXP 53
34138: PPUSH
34139: LD_VAR 0 4
34143: PPUSH
34144: LD_EXP 53
34148: PUSH
34149: LD_VAR 0 4
34153: ARRAY
34154: PPUSH
34155: LD_INT 1
34157: PPUSH
34158: CALL_OW 3
34162: PPUSH
34163: CALL_OW 1
34167: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
34168: LD_ADDR_EXP 55
34172: PUSH
34173: LD_EXP 55
34177: PPUSH
34178: LD_VAR 0 4
34182: PUSH
34183: LD_EXP 55
34187: PUSH
34188: LD_VAR 0 4
34192: ARRAY
34193: PUSH
34194: LD_INT 1
34196: PLUS
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PPUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL 41197 0 3
34211: ST_TO_ADDR
// exit ;
34212: POP
34213: POP
34214: GO 34220
// end ; end ;
34216: GO 34064
34218: POP
34219: POP
// end ;
34220: LD_VAR 0 3
34224: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
34225: LD_INT 0
34227: PPUSH
34228: PPUSH
34229: PPUSH
// if not mc_bases then
34230: LD_EXP 48
34234: NOT
34235: IFFALSE 34239
// exit ;
34237: GO 34429
// for i = 1 to mc_bases do
34239: LD_ADDR_VAR 0 4
34243: PUSH
34244: DOUBLE
34245: LD_INT 1
34247: DEC
34248: ST_TO_ADDR
34249: LD_EXP 48
34253: PUSH
34254: FOR_TO
34255: IFFALSE 34342
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
34257: LD_VAR 0 1
34261: PUSH
34262: LD_EXP 56
34266: PUSH
34267: LD_VAR 0 4
34271: ARRAY
34272: IN
34273: PUSH
34274: LD_VAR 0 1
34278: PUSH
34279: LD_EXP 57
34283: PUSH
34284: LD_VAR 0 4
34288: ARRAY
34289: IN
34290: NOT
34291: AND
34292: IFFALSE 34340
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
34294: LD_ADDR_EXP 57
34298: PUSH
34299: LD_EXP 57
34303: PPUSH
34304: LD_VAR 0 4
34308: PUSH
34309: LD_EXP 57
34313: PUSH
34314: LD_VAR 0 4
34318: ARRAY
34319: PUSH
34320: LD_INT 1
34322: PLUS
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PPUSH
34328: LD_VAR 0 1
34332: PPUSH
34333: CALL 41197 0 3
34337: ST_TO_ADDR
// break ;
34338: GO 34342
// end ; end ;
34340: GO 34254
34342: POP
34343: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
34344: LD_VAR 0 1
34348: PPUSH
34349: CALL_OW 257
34353: PUSH
34354: LD_EXP 74
34358: IN
34359: PUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 266
34369: PUSH
34370: LD_INT 5
34372: EQUAL
34373: AND
34374: PUSH
34375: LD_VAR 0 2
34379: PPUSH
34380: CALL_OW 110
34384: PUSH
34385: LD_INT 18
34387: NONEQUAL
34388: AND
34389: IFFALSE 34429
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
34391: LD_VAR 0 2
34395: PPUSH
34396: CALL_OW 257
34400: PUSH
34401: LD_INT 5
34403: PUSH
34404: LD_INT 8
34406: PUSH
34407: LD_INT 9
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: IN
34415: IFFALSE 34429
// SetClass ( unit , 1 ) ;
34417: LD_VAR 0 2
34421: PPUSH
34422: LD_INT 1
34424: PPUSH
34425: CALL_OW 336
// end ;
34429: LD_VAR 0 3
34433: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
// if not mc_bases then
34438: LD_EXP 48
34442: NOT
34443: IFFALSE 34447
// exit ;
34445: GO 34563
// if GetLives ( abandoned_vehicle ) > 250 then
34447: LD_VAR 0 2
34451: PPUSH
34452: CALL_OW 256
34456: PUSH
34457: LD_INT 250
34459: GREATER
34460: IFFALSE 34464
// exit ;
34462: GO 34563
// for i = 1 to mc_bases do
34464: LD_ADDR_VAR 0 6
34468: PUSH
34469: DOUBLE
34470: LD_INT 1
34472: DEC
34473: ST_TO_ADDR
34474: LD_EXP 48
34478: PUSH
34479: FOR_TO
34480: IFFALSE 34561
// begin if driver in mc_bases [ i ] then
34482: LD_VAR 0 1
34486: PUSH
34487: LD_EXP 48
34491: PUSH
34492: LD_VAR 0 6
34496: ARRAY
34497: IN
34498: IFFALSE 34559
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
34500: LD_VAR 0 1
34504: PPUSH
34505: LD_EXP 48
34509: PUSH
34510: LD_VAR 0 6
34514: ARRAY
34515: PPUSH
34516: LD_INT 2
34518: PUSH
34519: LD_INT 30
34521: PUSH
34522: LD_INT 0
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 30
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 72
34548: PUSH
34549: LD_INT 1
34551: ARRAY
34552: PPUSH
34553: CALL_OW 112
// break ;
34557: GO 34561
// end ; end ;
34559: GO 34479
34561: POP
34562: POP
// end ; end_of_file
34563: LD_VAR 0 5
34567: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34568: LD_INT 0
34570: PPUSH
34571: PPUSH
// if exist_mode then
34572: LD_VAR 0 2
34576: IFFALSE 34601
// unit := CreateCharacter ( prefix & ident ) else
34578: LD_ADDR_VAR 0 5
34582: PUSH
34583: LD_VAR 0 3
34587: PUSH
34588: LD_VAR 0 1
34592: STR
34593: PPUSH
34594: CALL_OW 34
34598: ST_TO_ADDR
34599: GO 34616
// unit := NewCharacter ( ident ) ;
34601: LD_ADDR_VAR 0 5
34605: PUSH
34606: LD_VAR 0 1
34610: PPUSH
34611: CALL_OW 25
34615: ST_TO_ADDR
// result := unit ;
34616: LD_ADDR_VAR 0 4
34620: PUSH
34621: LD_VAR 0 5
34625: ST_TO_ADDR
// end ;
34626: LD_VAR 0 4
34630: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34631: LD_INT 0
34633: PPUSH
34634: PPUSH
// if not side or not nation then
34635: LD_VAR 0 1
34639: NOT
34640: PUSH
34641: LD_VAR 0 2
34645: NOT
34646: OR
34647: IFFALSE 34651
// exit ;
34649: GO 35263
// case nation of nation_american :
34651: LD_VAR 0 2
34655: PUSH
34656: LD_INT 1
34658: DOUBLE
34659: EQUAL
34660: IFTRUE 34664
34662: GO 34822
34664: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
34665: LD_ADDR_VAR 0 4
34669: PUSH
34670: LD_INT 35
34672: PUSH
34673: LD_INT 45
34675: PUSH
34676: LD_INT 46
34678: PUSH
34679: LD_INT 47
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 2
34687: PUSH
34688: LD_INT 6
34690: PUSH
34691: LD_INT 15
34693: PUSH
34694: LD_INT 16
34696: PUSH
34697: LD_INT 7
34699: PUSH
34700: LD_INT 12
34702: PUSH
34703: LD_INT 13
34705: PUSH
34706: LD_INT 10
34708: PUSH
34709: LD_INT 14
34711: PUSH
34712: LD_INT 20
34714: PUSH
34715: LD_INT 25
34717: PUSH
34718: LD_INT 36
34720: PUSH
34721: LD_INT 69
34723: PUSH
34724: LD_INT 39
34726: PUSH
34727: LD_INT 34
34729: PUSH
34730: LD_INT 40
34732: PUSH
34733: LD_INT 48
34735: PUSH
34736: LD_INT 49
34738: PUSH
34739: LD_INT 50
34741: PUSH
34742: LD_INT 51
34744: PUSH
34745: LD_INT 52
34747: PUSH
34748: LD_INT 53
34750: PUSH
34751: LD_INT 54
34753: PUSH
34754: LD_INT 55
34756: PUSH
34757: LD_INT 56
34759: PUSH
34760: LD_INT 57
34762: PUSH
34763: LD_INT 58
34765: PUSH
34766: LD_INT 59
34768: PUSH
34769: LD_INT 60
34771: PUSH
34772: LD_INT 61
34774: PUSH
34775: LD_INT 62
34777: PUSH
34778: LD_INT 80
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: ST_TO_ADDR
34820: GO 35187
34822: LD_INT 2
34824: DOUBLE
34825: EQUAL
34826: IFTRUE 34830
34828: GO 35000
34830: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
34831: LD_ADDR_VAR 0 4
34835: PUSH
34836: LD_INT 35
34838: PUSH
34839: LD_INT 45
34841: PUSH
34842: LD_INT 46
34844: PUSH
34845: LD_INT 47
34847: PUSH
34848: LD_INT 70
34850: PUSH
34851: LD_INT 1
34853: PUSH
34854: LD_INT 11
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 4
34862: PUSH
34863: LD_INT 5
34865: PUSH
34866: LD_INT 6
34868: PUSH
34869: LD_INT 15
34871: PUSH
34872: LD_INT 18
34874: PUSH
34875: LD_INT 7
34877: PUSH
34878: LD_INT 17
34880: PUSH
34881: LD_INT 8
34883: PUSH
34884: LD_INT 20
34886: PUSH
34887: LD_INT 72
34889: PUSH
34890: LD_INT 26
34892: PUSH
34893: LD_INT 69
34895: PUSH
34896: LD_INT 39
34898: PUSH
34899: LD_INT 40
34901: PUSH
34902: LD_INT 41
34904: PUSH
34905: LD_INT 42
34907: PUSH
34908: LD_INT 43
34910: PUSH
34911: LD_INT 48
34913: PUSH
34914: LD_INT 49
34916: PUSH
34917: LD_INT 50
34919: PUSH
34920: LD_INT 51
34922: PUSH
34923: LD_INT 52
34925: PUSH
34926: LD_INT 53
34928: PUSH
34929: LD_INT 54
34931: PUSH
34932: LD_INT 55
34934: PUSH
34935: LD_INT 56
34937: PUSH
34938: LD_INT 60
34940: PUSH
34941: LD_INT 61
34943: PUSH
34944: LD_INT 62
34946: PUSH
34947: LD_INT 66
34949: PUSH
34950: LD_INT 67
34952: PUSH
34953: LD_INT 68
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: ST_TO_ADDR
34998: GO 35187
35000: LD_INT 3
35002: DOUBLE
35003: EQUAL
35004: IFTRUE 35008
35006: GO 35186
35008: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
35009: LD_ADDR_VAR 0 4
35013: PUSH
35014: LD_INT 46
35016: PUSH
35017: LD_INT 47
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: LD_INT 11
35028: PUSH
35029: LD_INT 9
35031: PUSH
35032: LD_INT 20
35034: PUSH
35035: LD_INT 19
35037: PUSH
35038: LD_INT 21
35040: PUSH
35041: LD_INT 24
35043: PUSH
35044: LD_INT 22
35046: PUSH
35047: LD_INT 25
35049: PUSH
35050: LD_INT 28
35052: PUSH
35053: LD_INT 29
35055: PUSH
35056: LD_INT 31
35058: PUSH
35059: LD_INT 37
35061: PUSH
35062: LD_INT 38
35064: PUSH
35065: LD_INT 32
35067: PUSH
35068: LD_INT 27
35070: PUSH
35071: LD_INT 33
35073: PUSH
35074: LD_INT 69
35076: PUSH
35077: LD_INT 39
35079: PUSH
35080: LD_INT 34
35082: PUSH
35083: LD_INT 40
35085: PUSH
35086: LD_INT 71
35088: PUSH
35089: LD_INT 23
35091: PUSH
35092: LD_INT 44
35094: PUSH
35095: LD_INT 48
35097: PUSH
35098: LD_INT 49
35100: PUSH
35101: LD_INT 50
35103: PUSH
35104: LD_INT 51
35106: PUSH
35107: LD_INT 52
35109: PUSH
35110: LD_INT 53
35112: PUSH
35113: LD_INT 54
35115: PUSH
35116: LD_INT 55
35118: PUSH
35119: LD_INT 56
35121: PUSH
35122: LD_INT 57
35124: PUSH
35125: LD_INT 58
35127: PUSH
35128: LD_INT 59
35130: PUSH
35131: LD_INT 63
35133: PUSH
35134: LD_INT 64
35136: PUSH
35137: LD_INT 65
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: ST_TO_ADDR
35184: GO 35187
35186: POP
// if state > - 1 and state < 3 then
35187: LD_VAR 0 3
35191: PUSH
35192: LD_INT 1
35194: NEG
35195: GREATER
35196: PUSH
35197: LD_VAR 0 3
35201: PUSH
35202: LD_INT 3
35204: LESS
35205: AND
35206: IFFALSE 35263
// for i in result do
35208: LD_ADDR_VAR 0 5
35212: PUSH
35213: LD_VAR 0 4
35217: PUSH
35218: FOR_IN
35219: IFFALSE 35261
// if GetTech ( i , side ) <> state then
35221: LD_VAR 0 5
35225: PPUSH
35226: LD_VAR 0 1
35230: PPUSH
35231: CALL_OW 321
35235: PUSH
35236: LD_VAR 0 3
35240: NONEQUAL
35241: IFFALSE 35259
// result := result diff i ;
35243: LD_ADDR_VAR 0 4
35247: PUSH
35248: LD_VAR 0 4
35252: PUSH
35253: LD_VAR 0 5
35257: DIFF
35258: ST_TO_ADDR
35259: GO 35218
35261: POP
35262: POP
// end ;
35263: LD_VAR 0 4
35267: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35268: LD_INT 0
35270: PPUSH
35271: PPUSH
35272: PPUSH
// result := true ;
35273: LD_ADDR_VAR 0 3
35277: PUSH
35278: LD_INT 1
35280: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35281: LD_ADDR_VAR 0 5
35285: PUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: CALL_OW 480
35295: ST_TO_ADDR
// if not tmp then
35296: LD_VAR 0 5
35300: NOT
35301: IFFALSE 35305
// exit ;
35303: GO 35354
// for i in tmp do
35305: LD_ADDR_VAR 0 4
35309: PUSH
35310: LD_VAR 0 5
35314: PUSH
35315: FOR_IN
35316: IFFALSE 35352
// if GetTech ( i , side ) <> state_researched then
35318: LD_VAR 0 4
35322: PPUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 321
35332: PUSH
35333: LD_INT 2
35335: NONEQUAL
35336: IFFALSE 35350
// begin result := false ;
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// exit ;
35346: POP
35347: POP
35348: GO 35354
// end ;
35350: GO 35315
35352: POP
35353: POP
// end ;
35354: LD_VAR 0 3
35358: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35359: LD_INT 0
35361: PPUSH
35362: PPUSH
35363: PPUSH
35364: PPUSH
35365: PPUSH
35366: PPUSH
35367: PPUSH
35368: PPUSH
35369: PPUSH
35370: PPUSH
35371: PPUSH
35372: PPUSH
35373: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35374: LD_VAR 0 1
35378: NOT
35379: PUSH
35380: LD_VAR 0 1
35384: PPUSH
35385: CALL_OW 257
35389: PUSH
35390: LD_INT 9
35392: NONEQUAL
35393: OR
35394: IFFALSE 35398
// exit ;
35396: GO 35971
// side := GetSide ( unit ) ;
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 255
35412: ST_TO_ADDR
// tech_space := tech_spacanom ;
35413: LD_ADDR_VAR 0 12
35417: PUSH
35418: LD_INT 29
35420: ST_TO_ADDR
// tech_time := tech_taurad ;
35421: LD_ADDR_VAR 0 13
35425: PUSH
35426: LD_INT 28
35428: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35429: LD_ADDR_VAR 0 11
35433: PUSH
35434: LD_VAR 0 1
35438: PPUSH
35439: CALL_OW 310
35443: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35444: LD_VAR 0 11
35448: PPUSH
35449: CALL_OW 247
35453: PUSH
35454: LD_INT 2
35456: EQUAL
35457: IFFALSE 35461
// exit ;
35459: GO 35971
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35461: LD_ADDR_VAR 0 8
35465: PUSH
35466: LD_INT 81
35468: PUSH
35469: LD_VAR 0 9
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 3
35480: PUSH
35481: LD_INT 21
35483: PUSH
35484: LD_INT 3
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PPUSH
35499: CALL_OW 69
35503: ST_TO_ADDR
// if not tmp then
35504: LD_VAR 0 8
35508: NOT
35509: IFFALSE 35513
// exit ;
35511: GO 35971
// if in_unit then
35513: LD_VAR 0 11
35517: IFFALSE 35541
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35519: LD_ADDR_VAR 0 10
35523: PUSH
35524: LD_VAR 0 8
35528: PPUSH
35529: LD_VAR 0 11
35533: PPUSH
35534: CALL_OW 74
35538: ST_TO_ADDR
35539: GO 35561
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35541: LD_ADDR_VAR 0 10
35545: PUSH
35546: LD_VAR 0 8
35550: PPUSH
35551: LD_VAR 0 1
35555: PPUSH
35556: CALL_OW 74
35560: ST_TO_ADDR
// if not enemy then
35561: LD_VAR 0 10
35565: NOT
35566: IFFALSE 35570
// exit ;
35568: GO 35971
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35570: LD_VAR 0 11
35574: PUSH
35575: LD_VAR 0 11
35579: PPUSH
35580: LD_VAR 0 10
35584: PPUSH
35585: CALL_OW 296
35589: PUSH
35590: LD_INT 13
35592: GREATER
35593: AND
35594: PUSH
35595: LD_VAR 0 1
35599: PPUSH
35600: LD_VAR 0 10
35604: PPUSH
35605: CALL_OW 296
35609: PUSH
35610: LD_INT 12
35612: GREATER
35613: OR
35614: IFFALSE 35618
// exit ;
35616: GO 35971
// missile := [ 1 ] ;
35618: LD_ADDR_VAR 0 14
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35629: LD_VAR 0 9
35633: PPUSH
35634: LD_VAR 0 12
35638: PPUSH
35639: CALL_OW 325
35643: IFFALSE 35672
// missile := Insert ( missile , missile + 1 , 2 ) ;
35645: LD_ADDR_VAR 0 14
35649: PUSH
35650: LD_VAR 0 14
35654: PPUSH
35655: LD_VAR 0 14
35659: PUSH
35660: LD_INT 1
35662: PLUS
35663: PPUSH
35664: LD_INT 2
35666: PPUSH
35667: CALL_OW 2
35671: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35672: LD_VAR 0 9
35676: PPUSH
35677: LD_VAR 0 13
35681: PPUSH
35682: CALL_OW 325
35686: PUSH
35687: LD_VAR 0 10
35691: PPUSH
35692: CALL_OW 255
35696: PPUSH
35697: LD_VAR 0 13
35701: PPUSH
35702: CALL_OW 325
35706: NOT
35707: AND
35708: IFFALSE 35737
// missile := Insert ( missile , missile + 1 , 3 ) ;
35710: LD_ADDR_VAR 0 14
35714: PUSH
35715: LD_VAR 0 14
35719: PPUSH
35720: LD_VAR 0 14
35724: PUSH
35725: LD_INT 1
35727: PLUS
35728: PPUSH
35729: LD_INT 3
35731: PPUSH
35732: CALL_OW 2
35736: ST_TO_ADDR
// if missile < 2 then
35737: LD_VAR 0 14
35741: PUSH
35742: LD_INT 2
35744: LESS
35745: IFFALSE 35749
// exit ;
35747: GO 35971
// x := GetX ( enemy ) ;
35749: LD_ADDR_VAR 0 4
35753: PUSH
35754: LD_VAR 0 10
35758: PPUSH
35759: CALL_OW 250
35763: ST_TO_ADDR
// y := GetY ( enemy ) ;
35764: LD_ADDR_VAR 0 5
35768: PUSH
35769: LD_VAR 0 10
35773: PPUSH
35774: CALL_OW 251
35778: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35779: LD_ADDR_VAR 0 6
35783: PUSH
35784: LD_VAR 0 4
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PPUSH
35793: LD_INT 1
35795: PPUSH
35796: CALL_OW 12
35800: PLUS
35801: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35802: LD_ADDR_VAR 0 7
35806: PUSH
35807: LD_VAR 0 5
35811: PUSH
35812: LD_INT 1
35814: NEG
35815: PPUSH
35816: LD_INT 1
35818: PPUSH
35819: CALL_OW 12
35823: PLUS
35824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35825: LD_VAR 0 6
35829: PPUSH
35830: LD_VAR 0 7
35834: PPUSH
35835: CALL_OW 488
35839: NOT
35840: IFFALSE 35862
// begin _x := x ;
35842: LD_ADDR_VAR 0 6
35846: PUSH
35847: LD_VAR 0 4
35851: ST_TO_ADDR
// _y := y ;
35852: LD_ADDR_VAR 0 7
35856: PUSH
35857: LD_VAR 0 5
35861: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35862: LD_ADDR_VAR 0 3
35866: PUSH
35867: LD_INT 1
35869: PPUSH
35870: LD_VAR 0 14
35874: PPUSH
35875: CALL_OW 12
35879: ST_TO_ADDR
// case i of 1 :
35880: LD_VAR 0 3
35884: PUSH
35885: LD_INT 1
35887: DOUBLE
35888: EQUAL
35889: IFTRUE 35893
35891: GO 35910
35893: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35894: LD_VAR 0 1
35898: PPUSH
35899: LD_VAR 0 10
35903: PPUSH
35904: CALL_OW 115
35908: GO 35971
35910: LD_INT 2
35912: DOUBLE
35913: EQUAL
35914: IFTRUE 35918
35916: GO 35940
35918: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35919: LD_VAR 0 1
35923: PPUSH
35924: LD_VAR 0 6
35928: PPUSH
35929: LD_VAR 0 7
35933: PPUSH
35934: CALL_OW 153
35938: GO 35971
35940: LD_INT 3
35942: DOUBLE
35943: EQUAL
35944: IFTRUE 35948
35946: GO 35970
35948: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_VAR 0 6
35958: PPUSH
35959: LD_VAR 0 7
35963: PPUSH
35964: CALL_OW 154
35968: GO 35971
35970: POP
// end ;
35971: LD_VAR 0 2
35975: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35976: LD_INT 0
35978: PPUSH
35979: PPUSH
35980: PPUSH
35981: PPUSH
35982: PPUSH
35983: PPUSH
// if not unit or not building then
35984: LD_VAR 0 1
35988: NOT
35989: PUSH
35990: LD_VAR 0 2
35994: NOT
35995: OR
35996: IFFALSE 36000
// exit ;
35998: GO 36155
// x := GetX ( building ) ;
36000: LD_ADDR_VAR 0 5
36004: PUSH
36005: LD_VAR 0 2
36009: PPUSH
36010: CALL_OW 250
36014: ST_TO_ADDR
// y := GetY ( building ) ;
36015: LD_ADDR_VAR 0 6
36019: PUSH
36020: LD_VAR 0 2
36024: PPUSH
36025: CALL_OW 251
36029: ST_TO_ADDR
// for i = 0 to 5 do
36030: LD_ADDR_VAR 0 4
36034: PUSH
36035: DOUBLE
36036: LD_INT 0
36038: DEC
36039: ST_TO_ADDR
36040: LD_INT 5
36042: PUSH
36043: FOR_TO
36044: IFFALSE 36153
// begin _x := ShiftX ( x , i , 3 ) ;
36046: LD_ADDR_VAR 0 7
36050: PUSH
36051: LD_VAR 0 5
36055: PPUSH
36056: LD_VAR 0 4
36060: PPUSH
36061: LD_INT 3
36063: PPUSH
36064: CALL_OW 272
36068: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36069: LD_ADDR_VAR 0 8
36073: PUSH
36074: LD_VAR 0 6
36078: PPUSH
36079: LD_VAR 0 4
36083: PPUSH
36084: LD_INT 3
36086: PPUSH
36087: CALL_OW 273
36091: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
36092: LD_VAR 0 7
36096: PPUSH
36097: LD_VAR 0 8
36101: PPUSH
36102: CALL_OW 428
36106: PUSH
36107: LD_INT 0
36109: EQUAL
36110: PUSH
36111: LD_VAR 0 7
36115: PPUSH
36116: LD_VAR 0 8
36120: PPUSH
36121: CALL_OW 488
36125: AND
36126: IFFALSE 36151
// begin ComMoveXY ( unit , _x , _y ) ;
36128: LD_VAR 0 1
36132: PPUSH
36133: LD_VAR 0 7
36137: PPUSH
36138: LD_VAR 0 8
36142: PPUSH
36143: CALL_OW 111
// exit ;
36147: POP
36148: POP
36149: GO 36155
// end ; end ;
36151: GO 36043
36153: POP
36154: POP
// end ;
36155: LD_VAR 0 3
36159: RET
// export function ScanBase ( side , base_area ) ; begin
36160: LD_INT 0
36162: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36163: LD_ADDR_VAR 0 3
36167: PUSH
36168: LD_VAR 0 2
36172: PPUSH
36173: LD_INT 81
36175: PUSH
36176: LD_VAR 0 1
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PPUSH
36185: CALL_OW 70
36189: ST_TO_ADDR
// end ;
36190: LD_VAR 0 3
36194: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
36195: LD_INT 0
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
36213: LD_ADDR_VAR 0 12
36217: PUSH
36218: LD_EXP 48
36222: PUSH
36223: LD_VAR 0 1
36227: ARRAY
36228: PPUSH
36229: LD_INT 25
36231: PUSH
36232: LD_INT 3
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PPUSH
36239: CALL_OW 72
36243: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
36244: LD_ADDR_VAR 0 8
36248: PUSH
36249: LD_EXP 48
36253: PUSH
36254: LD_VAR 0 1
36258: ARRAY
36259: PPUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 25
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 25
36275: PUSH
36276: LD_INT 5
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 25
36285: PUSH
36286: LD_INT 8
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 25
36295: PUSH
36296: LD_INT 9
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: PPUSH
36310: CALL_OW 72
36314: ST_TO_ADDR
// if not defenders and not solds then
36315: LD_VAR 0 2
36319: NOT
36320: PUSH
36321: LD_VAR 0 8
36325: NOT
36326: AND
36327: IFFALSE 36331
// exit ;
36329: GO 37697
// depot_under_attack := false ;
36331: LD_ADDR_VAR 0 16
36335: PUSH
36336: LD_INT 0
36338: ST_TO_ADDR
// sold_defenders := [ ] ;
36339: LD_ADDR_VAR 0 17
36343: PUSH
36344: EMPTY
36345: ST_TO_ADDR
// if mechs then
36346: LD_VAR 0 12
36350: IFFALSE 36479
// for i in defenders do
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: LD_VAR 0 2
36361: PUSH
36362: FOR_IN
36363: IFFALSE 36477
// begin SetTag ( i , 20 ) ;
36365: LD_VAR 0 5
36369: PPUSH
36370: LD_INT 20
36372: PPUSH
36373: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
36377: LD_VAR 0 5
36381: PPUSH
36382: CALL_OW 263
36386: PUSH
36387: LD_INT 1
36389: EQUAL
36390: PUSH
36391: LD_VAR 0 5
36395: PPUSH
36396: CALL_OW 311
36400: NOT
36401: AND
36402: PUSH
36403: LD_VAR 0 12
36407: AND
36408: IFFALSE 36475
// begin un := mechs [ 1 ] ;
36410: LD_ADDR_VAR 0 10
36414: PUSH
36415: LD_VAR 0 12
36419: PUSH
36420: LD_INT 1
36422: ARRAY
36423: ST_TO_ADDR
// ComExitBuilding ( un ) ;
36424: LD_VAR 0 10
36428: PPUSH
36429: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
36433: LD_VAR 0 10
36437: PPUSH
36438: LD_VAR 0 5
36442: PPUSH
36443: CALL_OW 180
// SetTag ( un , 19 ) ;
36447: LD_VAR 0 10
36451: PPUSH
36452: LD_INT 19
36454: PPUSH
36455: CALL_OW 109
// mechs := mechs diff un ;
36459: LD_ADDR_VAR 0 12
36463: PUSH
36464: LD_VAR 0 12
36468: PUSH
36469: LD_VAR 0 10
36473: DIFF
36474: ST_TO_ADDR
// end ; end ;
36475: GO 36362
36477: POP
36478: POP
// if solds then
36479: LD_VAR 0 8
36483: IFFALSE 36542
// for i in solds do
36485: LD_ADDR_VAR 0 5
36489: PUSH
36490: LD_VAR 0 8
36494: PUSH
36495: FOR_IN
36496: IFFALSE 36540
// if not GetTag ( i ) then
36498: LD_VAR 0 5
36502: PPUSH
36503: CALL_OW 110
36507: NOT
36508: IFFALSE 36538
// begin defenders := defenders union i ;
36510: LD_ADDR_VAR 0 2
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_VAR 0 5
36524: UNION
36525: ST_TO_ADDR
// SetTag ( i , 18 ) ;
36526: LD_VAR 0 5
36530: PPUSH
36531: LD_INT 18
36533: PPUSH
36534: CALL_OW 109
// end ;
36538: GO 36495
36540: POP
36541: POP
// repeat wait ( 0 0$1 ) ;
36542: LD_INT 35
36544: PPUSH
36545: CALL_OW 67
// enemy := mc_scan [ base ] ;
36549: LD_ADDR_VAR 0 3
36553: PUSH
36554: LD_EXP 71
36558: PUSH
36559: LD_VAR 0 1
36563: ARRAY
36564: ST_TO_ADDR
// for i in defenders do
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_VAR 0 2
36574: PUSH
36575: FOR_IN
36576: IFFALSE 37261
// begin e := NearestUnitToUnit ( enemy , i ) ;
36578: LD_ADDR_VAR 0 13
36582: PUSH
36583: LD_VAR 0 3
36587: PPUSH
36588: LD_VAR 0 5
36592: PPUSH
36593: CALL_OW 74
36597: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
36598: LD_ADDR_VAR 0 16
36602: PUSH
36603: LD_EXP 48
36607: PUSH
36608: LD_VAR 0 1
36612: ARRAY
36613: PPUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 30
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 30
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: PPUSH
36642: CALL_OW 72
36646: NOT
36647: PUSH
36648: LD_EXP 48
36652: PUSH
36653: LD_VAR 0 1
36657: ARRAY
36658: PPUSH
36659: LD_INT 2
36661: PUSH
36662: LD_INT 30
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 30
36674: PUSH
36675: LD_INT 1
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: LIST
36686: PPUSH
36687: CALL_OW 72
36691: PPUSH
36692: CALL_OW 256
36696: PUSH
36697: LD_INT 600
36699: LESS
36700: OR
36701: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
36702: LD_VAR 0 5
36706: PPUSH
36707: CALL_OW 247
36711: PUSH
36712: LD_INT 2
36714: DOUBLE
36715: EQUAL
36716: IFTRUE 36720
36718: GO 36967
36720: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
36721: LD_VAR 0 5
36725: PPUSH
36726: CALL_OW 256
36730: PUSH
36731: LD_INT 650
36733: GREATER
36734: PUSH
36735: LD_VAR 0 5
36739: PPUSH
36740: LD_VAR 0 13
36744: PPUSH
36745: CALL_OW 296
36749: PUSH
36750: LD_INT 40
36752: LESS
36753: AND
36754: IFFALSE 36772
// ComAttackUnit ( i , e ) else
36756: LD_VAR 0 5
36760: PPUSH
36761: LD_VAR 0 13
36765: PPUSH
36766: CALL_OW 115
36770: GO 36850
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
36772: LD_VAR 0 5
36776: PPUSH
36777: LD_VAR 0 13
36781: PPUSH
36782: CALL_OW 296
36786: PUSH
36787: LD_INT 30
36789: GREATEREQUAL
36790: PUSH
36791: LD_VAR 0 5
36795: PPUSH
36796: CALL_OW 256
36800: PUSH
36801: LD_INT 650
36803: LESSEQUAL
36804: OR
36805: PUSH
36806: LD_VAR 0 5
36810: PPUSH
36811: LD_EXP 72
36815: PUSH
36816: LD_VAR 0 1
36820: ARRAY
36821: PPUSH
36822: CALL_OW 308
36826: NOT
36827: AND
36828: IFFALSE 36850
// ComMoveToArea ( i , mc_parking [ base ] ) ;
36830: LD_VAR 0 5
36834: PPUSH
36835: LD_EXP 72
36839: PUSH
36840: LD_VAR 0 1
36844: ARRAY
36845: PPUSH
36846: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
36850: LD_VAR 0 5
36854: PPUSH
36855: CALL_OW 256
36859: PUSH
36860: LD_INT 998
36862: LESS
36863: PUSH
36864: LD_VAR 0 5
36868: PPUSH
36869: CALL_OW 263
36873: PUSH
36874: LD_INT 1
36876: EQUAL
36877: AND
36878: PUSH
36879: LD_VAR 0 5
36883: PPUSH
36884: CALL_OW 311
36888: AND
36889: PUSH
36890: LD_VAR 0 5
36894: PPUSH
36895: LD_EXP 72
36899: PUSH
36900: LD_VAR 0 1
36904: ARRAY
36905: PPUSH
36906: CALL_OW 308
36910: AND
36911: IFFALSE 36965
// begin mech := IsDrivenBy ( i ) ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_VAR 0 5
36922: PPUSH
36923: CALL_OW 311
36927: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
36928: LD_VAR 0 9
36932: PPUSH
36933: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
36937: LD_VAR 0 9
36941: PPUSH
36942: LD_VAR 0 5
36946: PPUSH
36947: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
36951: LD_VAR 0 9
36955: PPUSH
36956: LD_VAR 0 5
36960: PPUSH
36961: CALL_OW 180
// end ; end ; unit_human :
36965: GO 37232
36967: LD_INT 1
36969: DOUBLE
36970: EQUAL
36971: IFTRUE 36975
36973: GO 37231
36975: POP
// begin b := IsInUnit ( i ) ;
36976: LD_ADDR_VAR 0 18
36980: PUSH
36981: LD_VAR 0 5
36985: PPUSH
36986: CALL_OW 310
36990: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
36991: LD_ADDR_VAR 0 19
36995: PUSH
36996: LD_VAR 0 18
37000: NOT
37001: PUSH
37002: LD_VAR 0 18
37006: PPUSH
37007: CALL_OW 266
37011: PUSH
37012: LD_INT 32
37014: PUSH
37015: LD_INT 31
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: IN
37022: OR
37023: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
37024: LD_VAR 0 16
37028: PUSH
37029: LD_VAR 0 2
37033: PPUSH
37034: LD_INT 21
37036: PUSH
37037: LD_INT 2
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PPUSH
37044: CALL_OW 72
37048: PUSH
37049: LD_INT 1
37051: LESSEQUAL
37052: OR
37053: PUSH
37054: LD_VAR 0 19
37058: AND
37059: PUSH
37060: LD_VAR 0 5
37064: PUSH
37065: LD_VAR 0 17
37069: IN
37070: NOT
37071: AND
37072: IFFALSE 37165
// begin if b then
37074: LD_VAR 0 18
37078: IFFALSE 37127
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
37080: LD_VAR 0 18
37084: PPUSH
37085: LD_VAR 0 3
37089: PPUSH
37090: LD_VAR 0 18
37094: PPUSH
37095: CALL_OW 74
37099: PPUSH
37100: CALL_OW 296
37104: PUSH
37105: LD_INT 10
37107: LESS
37108: PUSH
37109: LD_VAR 0 18
37113: PPUSH
37114: CALL_OW 461
37118: PUSH
37119: LD_INT 7
37121: NONEQUAL
37122: AND
37123: IFFALSE 37127
// continue ;
37125: GO 36575
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
37127: LD_ADDR_VAR 0 17
37131: PUSH
37132: LD_VAR 0 17
37136: PPUSH
37137: LD_VAR 0 17
37141: PUSH
37142: LD_INT 1
37144: PLUS
37145: PPUSH
37146: LD_VAR 0 5
37150: PPUSH
37151: CALL_OW 1
37155: ST_TO_ADDR
// ComExitBuilding ( i ) ;
37156: LD_VAR 0 5
37160: PPUSH
37161: CALL_OW 122
// end ; if sold_defenders then
37165: LD_VAR 0 17
37169: IFFALSE 37229
// if i in sold_defenders then
37171: LD_VAR 0 5
37175: PUSH
37176: LD_VAR 0 17
37180: IN
37181: IFFALSE 37229
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
37183: LD_VAR 0 5
37187: PPUSH
37188: CALL_OW 314
37192: NOT
37193: PUSH
37194: LD_VAR 0 5
37198: PPUSH
37199: LD_VAR 0 13
37203: PPUSH
37204: CALL_OW 296
37208: PUSH
37209: LD_INT 30
37211: LESS
37212: AND
37213: IFFALSE 37229
// ComAttackUnit ( i , e ) ;
37215: LD_VAR 0 5
37219: PPUSH
37220: LD_VAR 0 13
37224: PPUSH
37225: CALL_OW 115
// end ; end ; end ;
37229: GO 37232
37231: POP
// if IsDead ( i ) then
37232: LD_VAR 0 5
37236: PPUSH
37237: CALL_OW 301
37241: IFFALSE 37259
// defenders := defenders diff i ;
37243: LD_ADDR_VAR 0 2
37247: PUSH
37248: LD_VAR 0 2
37252: PUSH
37253: LD_VAR 0 5
37257: DIFF
37258: ST_TO_ADDR
// end ;
37259: GO 36575
37261: POP
37262: POP
// until not enemy or not defenders ;
37263: LD_VAR 0 3
37267: NOT
37268: PUSH
37269: LD_VAR 0 2
37273: NOT
37274: OR
37275: IFFALSE 36542
// MC_Reset ( base , 18 ) ;
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_INT 18
37284: PPUSH
37285: CALL 17869 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
37289: LD_ADDR_VAR 0 2
37293: PUSH
37294: LD_VAR 0 2
37298: PUSH
37299: LD_VAR 0 2
37303: PPUSH
37304: LD_INT 2
37306: PUSH
37307: LD_INT 25
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 25
37319: PUSH
37320: LD_INT 5
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 25
37329: PUSH
37330: LD_INT 8
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 25
37339: PUSH
37340: LD_INT 9
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: PPUSH
37354: CALL_OW 72
37358: DIFF
37359: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
37360: LD_VAR 0 3
37364: NOT
37365: PUSH
37366: LD_VAR 0 2
37370: PPUSH
37371: LD_INT 21
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PPUSH
37381: CALL_OW 72
37385: AND
37386: IFFALSE 37648
// begin tmp := FilterByTag ( defenders , 19 ) ;
37388: LD_ADDR_VAR 0 11
37392: PUSH
37393: LD_VAR 0 2
37397: PPUSH
37398: LD_INT 19
37400: PPUSH
37401: CALL 71985 0 2
37405: ST_TO_ADDR
// if tmp then
37406: LD_VAR 0 11
37410: IFFALSE 37480
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
37412: LD_ADDR_VAR 0 11
37416: PUSH
37417: LD_VAR 0 11
37421: PPUSH
37422: LD_INT 25
37424: PUSH
37425: LD_INT 3
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PPUSH
37432: CALL_OW 72
37436: ST_TO_ADDR
// if tmp then
37437: LD_VAR 0 11
37441: IFFALSE 37480
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
37443: LD_ADDR_EXP 60
37447: PUSH
37448: LD_EXP 60
37452: PPUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: LD_EXP 60
37462: PUSH
37463: LD_VAR 0 1
37467: ARRAY
37468: PUSH
37469: LD_VAR 0 11
37473: UNION
37474: PPUSH
37475: CALL_OW 1
37479: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
37480: LD_VAR 0 1
37484: PPUSH
37485: LD_INT 19
37487: PPUSH
37488: CALL 17869 0 2
// repeat wait ( 0 0$1 ) ;
37492: LD_INT 35
37494: PPUSH
37495: CALL_OW 67
// for i in defenders do
37499: LD_ADDR_VAR 0 5
37503: PUSH
37504: LD_VAR 0 2
37508: PUSH
37509: FOR_IN
37510: IFFALSE 37599
// begin if not IsInArea ( i , mc_parking [ base ] ) then
37512: LD_VAR 0 5
37516: PPUSH
37517: LD_EXP 72
37521: PUSH
37522: LD_VAR 0 1
37526: ARRAY
37527: PPUSH
37528: CALL_OW 308
37532: NOT
37533: IFFALSE 37557
// ComMoveToArea ( i , mc_parking [ base ] ) else
37535: LD_VAR 0 5
37539: PPUSH
37540: LD_EXP 72
37544: PUSH
37545: LD_VAR 0 1
37549: ARRAY
37550: PPUSH
37551: CALL_OW 113
37555: GO 37597
// if GetControl ( i ) = control_manual then
37557: LD_VAR 0 5
37561: PPUSH
37562: CALL_OW 263
37566: PUSH
37567: LD_INT 1
37569: EQUAL
37570: IFFALSE 37597
// if IsDrivenBy ( i ) then
37572: LD_VAR 0 5
37576: PPUSH
37577: CALL_OW 311
37581: IFFALSE 37597
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
37583: LD_VAR 0 5
37587: PPUSH
37588: CALL_OW 311
37592: PPUSH
37593: CALL_OW 121
// end ;
37597: GO 37509
37599: POP
37600: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
37601: LD_VAR 0 2
37605: PPUSH
37606: LD_INT 95
37608: PUSH
37609: LD_EXP 72
37613: PUSH
37614: LD_VAR 0 1
37618: ARRAY
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PPUSH
37624: CALL_OW 72
37628: PUSH
37629: LD_VAR 0 2
37633: EQUAL
37634: PUSH
37635: LD_EXP 71
37639: PUSH
37640: LD_VAR 0 1
37644: ARRAY
37645: OR
37646: IFFALSE 37492
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
37648: LD_ADDR_EXP 70
37652: PUSH
37653: LD_EXP 70
37657: PPUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: LD_EXP 70
37667: PUSH
37668: LD_VAR 0 1
37672: ARRAY
37673: PUSH
37674: LD_VAR 0 2
37678: UNION
37679: PPUSH
37680: CALL_OW 1
37684: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
37685: LD_VAR 0 1
37689: PPUSH
37690: LD_INT 20
37692: PPUSH
37693: CALL 17869 0 2
// end ;
37697: LD_VAR 0 4
37701: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37702: LD_INT 0
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
// result := false ;
37708: LD_ADDR_VAR 0 2
37712: PUSH
37713: LD_INT 0
37715: ST_TO_ADDR
// side := GetSide ( unit ) ;
37716: LD_ADDR_VAR 0 3
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 255
37730: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37731: LD_ADDR_VAR 0 4
37735: PUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 248
37745: ST_TO_ADDR
// case nat of 1 :
37746: LD_VAR 0 4
37750: PUSH
37751: LD_INT 1
37753: DOUBLE
37754: EQUAL
37755: IFTRUE 37759
37757: GO 37770
37759: POP
// tech := tech_lassight ; 2 :
37760: LD_ADDR_VAR 0 5
37764: PUSH
37765: LD_INT 12
37767: ST_TO_ADDR
37768: GO 37809
37770: LD_INT 2
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 37789
37778: POP
// tech := tech_mortar ; 3 :
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_INT 41
37786: ST_TO_ADDR
37787: GO 37809
37789: LD_INT 3
37791: DOUBLE
37792: EQUAL
37793: IFTRUE 37797
37795: GO 37808
37797: POP
// tech := tech_bazooka ; end ;
37798: LD_ADDR_VAR 0 5
37802: PUSH
37803: LD_INT 44
37805: ST_TO_ADDR
37806: GO 37809
37808: POP
// if Researched ( side , tech ) then
37809: LD_VAR 0 3
37813: PPUSH
37814: LD_VAR 0 5
37818: PPUSH
37819: CALL_OW 325
37823: IFFALSE 37850
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37825: LD_ADDR_VAR 0 2
37829: PUSH
37830: LD_INT 5
37832: PUSH
37833: LD_INT 8
37835: PUSH
37836: LD_INT 9
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: PUSH
37844: LD_VAR 0 4
37848: ARRAY
37849: ST_TO_ADDR
// end ;
37850: LD_VAR 0 2
37854: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37855: LD_INT 0
37857: PPUSH
37858: PPUSH
37859: PPUSH
// if not mines then
37860: LD_VAR 0 2
37864: NOT
37865: IFFALSE 37869
// exit ;
37867: GO 38013
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37869: LD_ADDR_VAR 0 5
37873: PUSH
37874: LD_INT 81
37876: PUSH
37877: LD_VAR 0 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: LD_INT 21
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PPUSH
37907: CALL_OW 69
37911: ST_TO_ADDR
// for i in mines do
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_VAR 0 2
37921: PUSH
37922: FOR_IN
37923: IFFALSE 38011
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37925: LD_VAR 0 4
37929: PUSH
37930: LD_INT 1
37932: ARRAY
37933: PPUSH
37934: LD_VAR 0 4
37938: PUSH
37939: LD_INT 2
37941: ARRAY
37942: PPUSH
37943: CALL_OW 458
37947: NOT
37948: IFFALSE 37952
// continue ;
37950: GO 37922
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37952: LD_VAR 0 4
37956: PUSH
37957: LD_INT 1
37959: ARRAY
37960: PPUSH
37961: LD_VAR 0 4
37965: PUSH
37966: LD_INT 2
37968: ARRAY
37969: PPUSH
37970: CALL_OW 428
37974: PUSH
37975: LD_VAR 0 5
37979: IN
37980: IFFALSE 38009
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37982: LD_VAR 0 4
37986: PUSH
37987: LD_INT 1
37989: ARRAY
37990: PPUSH
37991: LD_VAR 0 4
37995: PUSH
37996: LD_INT 2
37998: ARRAY
37999: PPUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 456
// end ;
38009: GO 37922
38011: POP
38012: POP
// end ;
38013: LD_VAR 0 3
38017: RET
// export function Count ( array ) ; var i ; begin
38018: LD_INT 0
38020: PPUSH
38021: PPUSH
// result := 0 ;
38022: LD_ADDR_VAR 0 2
38026: PUSH
38027: LD_INT 0
38029: ST_TO_ADDR
// for i in array do
38030: LD_ADDR_VAR 0 3
38034: PUSH
38035: LD_VAR 0 1
38039: PUSH
38040: FOR_IN
38041: IFFALSE 38065
// if i then
38043: LD_VAR 0 3
38047: IFFALSE 38063
// result := result + 1 ;
38049: LD_ADDR_VAR 0 2
38053: PUSH
38054: LD_VAR 0 2
38058: PUSH
38059: LD_INT 1
38061: PLUS
38062: ST_TO_ADDR
38063: GO 38040
38065: POP
38066: POP
// end ;
38067: LD_VAR 0 2
38071: RET
// export function IsEmpty ( building ) ; begin
38072: LD_INT 0
38074: PPUSH
// if not building then
38075: LD_VAR 0 1
38079: NOT
38080: IFFALSE 38084
// exit ;
38082: GO 38127
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38084: LD_ADDR_VAR 0 2
38088: PUSH
38089: LD_VAR 0 1
38093: PUSH
38094: LD_INT 22
38096: PUSH
38097: LD_VAR 0 1
38101: PPUSH
38102: CALL_OW 255
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 58
38113: PUSH
38114: EMPTY
38115: LIST
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PPUSH
38121: CALL_OW 69
38125: IN
38126: ST_TO_ADDR
// end ;
38127: LD_VAR 0 2
38131: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38132: LD_INT 0
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
// tmp := [ ] ;
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: EMPTY
38144: ST_TO_ADDR
// list := [ ] ;
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: EMPTY
38151: ST_TO_ADDR
// for i = 16 to 25 do
38152: LD_ADDR_VAR 0 4
38156: PUSH
38157: DOUBLE
38158: LD_INT 16
38160: DEC
38161: ST_TO_ADDR
38162: LD_INT 25
38164: PUSH
38165: FOR_TO
38166: IFFALSE 38239
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38168: LD_ADDR_VAR 0 3
38172: PUSH
38173: LD_VAR 0 3
38177: PUSH
38178: LD_INT 22
38180: PUSH
38181: LD_VAR 0 1
38185: PPUSH
38186: CALL_OW 255
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 91
38197: PUSH
38198: LD_VAR 0 1
38202: PUSH
38203: LD_INT 6
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 30
38213: PUSH
38214: LD_VAR 0 4
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: LIST
38227: PUSH
38228: EMPTY
38229: LIST
38230: PPUSH
38231: CALL_OW 69
38235: ADD
38236: ST_TO_ADDR
38237: GO 38165
38239: POP
38240: POP
// for i = 1 to tmp do
38241: LD_ADDR_VAR 0 4
38245: PUSH
38246: DOUBLE
38247: LD_INT 1
38249: DEC
38250: ST_TO_ADDR
38251: LD_VAR 0 3
38255: PUSH
38256: FOR_TO
38257: IFFALSE 38345
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38259: LD_ADDR_VAR 0 5
38263: PUSH
38264: LD_VAR 0 5
38268: PUSH
38269: LD_VAR 0 3
38273: PUSH
38274: LD_VAR 0 4
38278: ARRAY
38279: PPUSH
38280: CALL_OW 266
38284: PUSH
38285: LD_VAR 0 3
38289: PUSH
38290: LD_VAR 0 4
38294: ARRAY
38295: PPUSH
38296: CALL_OW 250
38300: PUSH
38301: LD_VAR 0 3
38305: PUSH
38306: LD_VAR 0 4
38310: ARRAY
38311: PPUSH
38312: CALL_OW 251
38316: PUSH
38317: LD_VAR 0 3
38321: PUSH
38322: LD_VAR 0 4
38326: ARRAY
38327: PPUSH
38328: CALL_OW 254
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: PUSH
38339: EMPTY
38340: LIST
38341: ADD
38342: ST_TO_ADDR
38343: GO 38256
38345: POP
38346: POP
// result := list ;
38347: LD_ADDR_VAR 0 2
38351: PUSH
38352: LD_VAR 0 5
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 2
38361: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38362: LD_INT 0
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
// if not factory then
38371: LD_VAR 0 1
38375: NOT
38376: IFFALSE 38380
// exit ;
38378: GO 38905
// if control = control_apeman then
38380: LD_VAR 0 4
38384: PUSH
38385: LD_INT 5
38387: EQUAL
38388: IFFALSE 38497
// begin tmp := UnitsInside ( factory ) ;
38390: LD_ADDR_VAR 0 8
38394: PUSH
38395: LD_VAR 0 1
38399: PPUSH
38400: CALL_OW 313
38404: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38405: LD_VAR 0 8
38409: PPUSH
38410: LD_INT 25
38412: PUSH
38413: LD_INT 12
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PPUSH
38420: CALL_OW 72
38424: NOT
38425: IFFALSE 38435
// control := control_manual ;
38427: LD_ADDR_VAR 0 4
38431: PUSH
38432: LD_INT 1
38434: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38435: LD_ADDR_VAR 0 8
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL 38132 0 1
38449: ST_TO_ADDR
// if tmp then
38450: LD_VAR 0 8
38454: IFFALSE 38497
// begin for i in tmp do
38456: LD_ADDR_VAR 0 7
38460: PUSH
38461: LD_VAR 0 8
38465: PUSH
38466: FOR_IN
38467: IFFALSE 38495
// if i [ 1 ] = b_ext_radar then
38469: LD_VAR 0 7
38473: PUSH
38474: LD_INT 1
38476: ARRAY
38477: PUSH
38478: LD_INT 20
38480: EQUAL
38481: IFFALSE 38493
// begin control := control_remote ;
38483: LD_ADDR_VAR 0 4
38487: PUSH
38488: LD_INT 2
38490: ST_TO_ADDR
// break ;
38491: GO 38495
// end ;
38493: GO 38466
38495: POP
38496: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38497: LD_VAR 0 1
38501: PPUSH
38502: LD_VAR 0 2
38506: PPUSH
38507: LD_VAR 0 3
38511: PPUSH
38512: LD_VAR 0 4
38516: PPUSH
38517: LD_VAR 0 5
38521: PPUSH
38522: CALL_OW 448
38526: IFFALSE 38561
// begin result := [ chassis , engine , control , weapon ] ;
38528: LD_ADDR_VAR 0 6
38532: PUSH
38533: LD_VAR 0 2
38537: PUSH
38538: LD_VAR 0 3
38542: PUSH
38543: LD_VAR 0 4
38547: PUSH
38548: LD_VAR 0 5
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// exit ;
38559: GO 38905
// end ; _chassis := AvailableChassisList ( factory ) ;
38561: LD_ADDR_VAR 0 9
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 475
38575: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38576: LD_ADDR_VAR 0 11
38580: PUSH
38581: LD_VAR 0 1
38585: PPUSH
38586: CALL_OW 476
38590: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38591: LD_ADDR_VAR 0 12
38595: PUSH
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 477
38605: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38606: LD_ADDR_VAR 0 10
38610: PUSH
38611: LD_VAR 0 1
38615: PPUSH
38616: CALL_OW 478
38620: ST_TO_ADDR
// if not chassis in _chassis then
38621: LD_VAR 0 2
38625: PUSH
38626: LD_VAR 0 9
38630: IN
38631: NOT
38632: IFFALSE 38658
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38634: LD_ADDR_VAR 0 2
38638: PUSH
38639: LD_VAR 0 9
38643: PUSH
38644: LD_INT 1
38646: PPUSH
38647: LD_VAR 0 9
38651: PPUSH
38652: CALL_OW 12
38656: ARRAY
38657: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38658: LD_VAR 0 2
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: CALL 38910 0 2
38672: NOT
38673: IFFALSE 38732
// repeat engine := _engine [ 1 ] ;
38675: LD_ADDR_VAR 0 3
38679: PUSH
38680: LD_VAR 0 11
38684: PUSH
38685: LD_INT 1
38687: ARRAY
38688: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38689: LD_ADDR_VAR 0 11
38693: PUSH
38694: LD_VAR 0 11
38698: PPUSH
38699: LD_INT 1
38701: PPUSH
38702: CALL_OW 3
38706: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38707: LD_VAR 0 2
38711: PPUSH
38712: LD_VAR 0 3
38716: PPUSH
38717: CALL 38910 0 2
38721: PUSH
38722: LD_VAR 0 11
38726: PUSH
38727: EMPTY
38728: EQUAL
38729: OR
38730: IFFALSE 38675
// if not control in _control then
38732: LD_VAR 0 4
38736: PUSH
38737: LD_VAR 0 12
38741: IN
38742: NOT
38743: IFFALSE 38769
// control := _control [ rand ( 1 , _control ) ] ;
38745: LD_ADDR_VAR 0 4
38749: PUSH
38750: LD_VAR 0 12
38754: PUSH
38755: LD_INT 1
38757: PPUSH
38758: LD_VAR 0 12
38762: PPUSH
38763: CALL_OW 12
38767: ARRAY
38768: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38769: LD_VAR 0 2
38773: PPUSH
38774: LD_VAR 0 5
38778: PPUSH
38779: CALL 39130 0 2
38783: NOT
38784: IFFALSE 38843
// repeat weapon := _weapon [ 1 ] ;
38786: LD_ADDR_VAR 0 5
38790: PUSH
38791: LD_VAR 0 10
38795: PUSH
38796: LD_INT 1
38798: ARRAY
38799: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38800: LD_ADDR_VAR 0 10
38804: PUSH
38805: LD_VAR 0 10
38809: PPUSH
38810: LD_INT 1
38812: PPUSH
38813: CALL_OW 3
38817: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38818: LD_VAR 0 2
38822: PPUSH
38823: LD_VAR 0 5
38827: PPUSH
38828: CALL 39130 0 2
38832: PUSH
38833: LD_VAR 0 10
38837: PUSH
38838: EMPTY
38839: EQUAL
38840: OR
38841: IFFALSE 38786
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38843: LD_VAR 0 1
38847: PPUSH
38848: LD_VAR 0 2
38852: PPUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: LD_VAR 0 4
38862: PPUSH
38863: LD_VAR 0 5
38867: PPUSH
38868: CALL_OW 448
38872: IFFALSE 38905
// result := [ chassis , engine , control , weapon ] ;
38874: LD_ADDR_VAR 0 6
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_VAR 0 3
38888: PUSH
38889: LD_VAR 0 4
38893: PUSH
38894: LD_VAR 0 5
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: ST_TO_ADDR
// end ;
38905: LD_VAR 0 6
38909: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38910: LD_INT 0
38912: PPUSH
// if not chassis or not engine then
38913: LD_VAR 0 1
38917: NOT
38918: PUSH
38919: LD_VAR 0 2
38923: NOT
38924: OR
38925: IFFALSE 38929
// exit ;
38927: GO 39125
// case engine of engine_solar :
38929: LD_VAR 0 2
38933: PUSH
38934: LD_INT 2
38936: DOUBLE
38937: EQUAL
38938: IFTRUE 38942
38940: GO 38980
38942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38943: LD_ADDR_VAR 0 3
38947: PUSH
38948: LD_INT 11
38950: PUSH
38951: LD_INT 12
38953: PUSH
38954: LD_INT 13
38956: PUSH
38957: LD_INT 14
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
38978: GO 39109
38980: LD_INT 1
38982: DOUBLE
38983: EQUAL
38984: IFTRUE 38988
38986: GO 39050
38988: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38989: LD_ADDR_VAR 0 3
38993: PUSH
38994: LD_INT 11
38996: PUSH
38997: LD_INT 12
38999: PUSH
39000: LD_INT 13
39002: PUSH
39003: LD_INT 14
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: LD_INT 2
39011: PUSH
39012: LD_INT 3
39014: PUSH
39015: LD_INT 4
39017: PUSH
39018: LD_INT 5
39020: PUSH
39021: LD_INT 21
39023: PUSH
39024: LD_INT 23
39026: PUSH
39027: LD_INT 22
39029: PUSH
39030: LD_INT 24
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: ST_TO_ADDR
39048: GO 39109
39050: LD_INT 3
39052: DOUBLE
39053: EQUAL
39054: IFTRUE 39058
39056: GO 39108
39058: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39059: LD_ADDR_VAR 0 3
39063: PUSH
39064: LD_INT 13
39066: PUSH
39067: LD_INT 14
39069: PUSH
39070: LD_INT 2
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: LD_INT 4
39078: PUSH
39079: LD_INT 5
39081: PUSH
39082: LD_INT 21
39084: PUSH
39085: LD_INT 22
39087: PUSH
39088: LD_INT 23
39090: PUSH
39091: LD_INT 24
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
39106: GO 39109
39108: POP
// result := ( chassis in result ) ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 1
39118: PUSH
39119: LD_VAR 0 3
39123: IN
39124: ST_TO_ADDR
// end ;
39125: LD_VAR 0 3
39129: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39130: LD_INT 0
39132: PPUSH
// if not chassis or not weapon then
39133: LD_VAR 0 1
39137: NOT
39138: PUSH
39139: LD_VAR 0 2
39143: NOT
39144: OR
39145: IFFALSE 39149
// exit ;
39147: GO 40175
// case weapon of us_machine_gun :
39149: LD_VAR 0 2
39153: PUSH
39154: LD_INT 2
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39162
39160: GO 39192
39162: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39163: LD_ADDR_VAR 0 3
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: LD_INT 2
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: LD_INT 4
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: ST_TO_ADDR
39190: GO 40159
39192: LD_INT 3
39194: DOUBLE
39195: EQUAL
39196: IFTRUE 39200
39198: GO 39230
39200: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39201: LD_ADDR_VAR 0 3
39205: PUSH
39206: LD_INT 1
39208: PUSH
39209: LD_INT 2
39211: PUSH
39212: LD_INT 3
39214: PUSH
39215: LD_INT 4
39217: PUSH
39218: LD_INT 5
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: ST_TO_ADDR
39228: GO 40159
39230: LD_INT 11
39232: DOUBLE
39233: EQUAL
39234: IFTRUE 39238
39236: GO 39268
39238: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39239: LD_ADDR_VAR 0 3
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: LD_INT 4
39255: PUSH
39256: LD_INT 5
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
39266: GO 40159
39268: LD_INT 4
39270: DOUBLE
39271: EQUAL
39272: IFTRUE 39276
39274: GO 39302
39276: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39277: LD_ADDR_VAR 0 3
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: LD_INT 3
39287: PUSH
39288: LD_INT 4
39290: PUSH
39291: LD_INT 5
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
39300: GO 40159
39302: LD_INT 5
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39336
39310: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_INT 2
39318: PUSH
39319: LD_INT 3
39321: PUSH
39322: LD_INT 4
39324: PUSH
39325: LD_INT 5
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
39334: GO 40159
39336: LD_INT 9
39338: DOUBLE
39339: EQUAL
39340: IFTRUE 39344
39342: GO 39370
39344: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39345: LD_ADDR_VAR 0 3
39349: PUSH
39350: LD_INT 2
39352: PUSH
39353: LD_INT 3
39355: PUSH
39356: LD_INT 4
39358: PUSH
39359: LD_INT 5
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
39368: GO 40159
39370: LD_INT 7
39372: DOUBLE
39373: EQUAL
39374: IFTRUE 39378
39376: GO 39404
39378: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39379: LD_ADDR_VAR 0 3
39383: PUSH
39384: LD_INT 2
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: LD_INT 4
39392: PUSH
39393: LD_INT 5
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
39402: GO 40159
39404: LD_INT 12
39406: DOUBLE
39407: EQUAL
39408: IFTRUE 39412
39410: GO 39438
39412: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39413: LD_ADDR_VAR 0 3
39417: PUSH
39418: LD_INT 2
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 4
39426: PUSH
39427: LD_INT 5
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
39436: GO 40159
39438: LD_INT 13
39440: DOUBLE
39441: EQUAL
39442: IFTRUE 39446
39444: GO 39472
39446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: LD_INT 4
39460: PUSH
39461: LD_INT 5
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
39470: GO 40159
39472: LD_INT 14
39474: DOUBLE
39475: EQUAL
39476: IFTRUE 39480
39478: GO 39498
39480: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39481: LD_ADDR_VAR 0 3
39485: PUSH
39486: LD_INT 4
39488: PUSH
39489: LD_INT 5
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: ST_TO_ADDR
39496: GO 40159
39498: LD_INT 6
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39524
39506: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: ST_TO_ADDR
39522: GO 40159
39524: LD_INT 10
39526: DOUBLE
39527: EQUAL
39528: IFTRUE 39532
39530: GO 39550
39532: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39533: LD_ADDR_VAR 0 3
39537: PUSH
39538: LD_INT 4
39540: PUSH
39541: LD_INT 5
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: ST_TO_ADDR
39548: GO 40159
39550: LD_INT 22
39552: DOUBLE
39553: EQUAL
39554: IFTRUE 39558
39556: GO 39584
39558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39559: LD_ADDR_VAR 0 3
39563: PUSH
39564: LD_INT 11
39566: PUSH
39567: LD_INT 12
39569: PUSH
39570: LD_INT 13
39572: PUSH
39573: LD_INT 14
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: ST_TO_ADDR
39582: GO 40159
39584: LD_INT 23
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39618
39592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 11
39600: PUSH
39601: LD_INT 12
39603: PUSH
39604: LD_INT 13
39606: PUSH
39607: LD_INT 14
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: ST_TO_ADDR
39616: GO 40159
39618: LD_INT 24
39620: DOUBLE
39621: EQUAL
39622: IFTRUE 39626
39624: GO 39652
39626: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39627: LD_ADDR_VAR 0 3
39631: PUSH
39632: LD_INT 11
39634: PUSH
39635: LD_INT 12
39637: PUSH
39638: LD_INT 13
39640: PUSH
39641: LD_INT 14
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: ST_TO_ADDR
39650: GO 40159
39652: LD_INT 30
39654: DOUBLE
39655: EQUAL
39656: IFTRUE 39660
39658: GO 39686
39660: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39661: LD_ADDR_VAR 0 3
39665: PUSH
39666: LD_INT 11
39668: PUSH
39669: LD_INT 12
39671: PUSH
39672: LD_INT 13
39674: PUSH
39675: LD_INT 14
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: ST_TO_ADDR
39684: GO 40159
39686: LD_INT 25
39688: DOUBLE
39689: EQUAL
39690: IFTRUE 39694
39692: GO 39712
39694: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39695: LD_ADDR_VAR 0 3
39699: PUSH
39700: LD_INT 13
39702: PUSH
39703: LD_INT 14
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: ST_TO_ADDR
39710: GO 40159
39712: LD_INT 27
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39738
39720: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 13
39728: PUSH
39729: LD_INT 14
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: ST_TO_ADDR
39736: GO 40159
39738: LD_INT 28
39740: DOUBLE
39741: EQUAL
39742: IFTRUE 39746
39744: GO 39764
39746: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_INT 13
39754: PUSH
39755: LD_INT 14
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: ST_TO_ADDR
39762: GO 40159
39764: LD_INT 29
39766: DOUBLE
39767: EQUAL
39768: IFTRUE 39772
39770: GO 39790
39772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39773: LD_ADDR_VAR 0 3
39777: PUSH
39778: LD_INT 13
39780: PUSH
39781: LD_INT 14
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: ST_TO_ADDR
39788: GO 40159
39790: LD_INT 31
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39816
39798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39799: LD_ADDR_VAR 0 3
39803: PUSH
39804: LD_INT 13
39806: PUSH
39807: LD_INT 14
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: ST_TO_ADDR
39814: GO 40159
39816: LD_INT 26
39818: DOUBLE
39819: EQUAL
39820: IFTRUE 39824
39822: GO 39842
39824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39825: LD_ADDR_VAR 0 3
39829: PUSH
39830: LD_INT 13
39832: PUSH
39833: LD_INT 14
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: ST_TO_ADDR
39840: GO 40159
39842: LD_INT 42
39844: DOUBLE
39845: EQUAL
39846: IFTRUE 39850
39848: GO 39876
39850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39851: LD_ADDR_VAR 0 3
39855: PUSH
39856: LD_INT 21
39858: PUSH
39859: LD_INT 22
39861: PUSH
39862: LD_INT 23
39864: PUSH
39865: LD_INT 24
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: ST_TO_ADDR
39874: GO 40159
39876: LD_INT 43
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39910
39884: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39885: LD_ADDR_VAR 0 3
39889: PUSH
39890: LD_INT 21
39892: PUSH
39893: LD_INT 22
39895: PUSH
39896: LD_INT 23
39898: PUSH
39899: LD_INT 24
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
39908: GO 40159
39910: LD_INT 44
39912: DOUBLE
39913: EQUAL
39914: IFTRUE 39918
39916: GO 39944
39918: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39919: LD_ADDR_VAR 0 3
39923: PUSH
39924: LD_INT 21
39926: PUSH
39927: LD_INT 22
39929: PUSH
39930: LD_INT 23
39932: PUSH
39933: LD_INT 24
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: ST_TO_ADDR
39942: GO 40159
39944: LD_INT 45
39946: DOUBLE
39947: EQUAL
39948: IFTRUE 39952
39950: GO 39978
39952: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39953: LD_ADDR_VAR 0 3
39957: PUSH
39958: LD_INT 21
39960: PUSH
39961: LD_INT 22
39963: PUSH
39964: LD_INT 23
39966: PUSH
39967: LD_INT 24
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
39976: GO 40159
39978: LD_INT 49
39980: DOUBLE
39981: EQUAL
39982: IFTRUE 39986
39984: GO 40012
39986: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39987: LD_ADDR_VAR 0 3
39991: PUSH
39992: LD_INT 21
39994: PUSH
39995: LD_INT 22
39997: PUSH
39998: LD_INT 23
40000: PUSH
40001: LD_INT 24
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
40010: GO 40159
40012: LD_INT 51
40014: DOUBLE
40015: EQUAL
40016: IFTRUE 40020
40018: GO 40046
40020: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40021: LD_ADDR_VAR 0 3
40025: PUSH
40026: LD_INT 21
40028: PUSH
40029: LD_INT 22
40031: PUSH
40032: LD_INT 23
40034: PUSH
40035: LD_INT 24
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: ST_TO_ADDR
40044: GO 40159
40046: LD_INT 52
40048: DOUBLE
40049: EQUAL
40050: IFTRUE 40054
40052: GO 40080
40054: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_INT 21
40062: PUSH
40063: LD_INT 22
40065: PUSH
40066: LD_INT 23
40068: PUSH
40069: LD_INT 24
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
40078: GO 40159
40080: LD_INT 53
40082: DOUBLE
40083: EQUAL
40084: IFTRUE 40088
40086: GO 40106
40088: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40089: LD_ADDR_VAR 0 3
40093: PUSH
40094: LD_INT 23
40096: PUSH
40097: LD_INT 24
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: ST_TO_ADDR
40104: GO 40159
40106: LD_INT 46
40108: DOUBLE
40109: EQUAL
40110: IFTRUE 40114
40112: GO 40132
40114: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40115: LD_ADDR_VAR 0 3
40119: PUSH
40120: LD_INT 23
40122: PUSH
40123: LD_INT 24
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: ST_TO_ADDR
40130: GO 40159
40132: LD_INT 47
40134: DOUBLE
40135: EQUAL
40136: IFTRUE 40140
40138: GO 40158
40140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40141: LD_ADDR_VAR 0 3
40145: PUSH
40146: LD_INT 23
40148: PUSH
40149: LD_INT 24
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: ST_TO_ADDR
40156: GO 40159
40158: POP
// result := ( chassis in result ) ;
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_VAR 0 1
40168: PUSH
40169: LD_VAR 0 3
40173: IN
40174: ST_TO_ADDR
// end ;
40175: LD_VAR 0 3
40179: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40180: LD_INT 0
40182: PPUSH
40183: PPUSH
40184: PPUSH
40185: PPUSH
40186: PPUSH
40187: PPUSH
40188: PPUSH
// result := array ;
40189: LD_ADDR_VAR 0 5
40193: PUSH
40194: LD_VAR 0 1
40198: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40199: LD_VAR 0 1
40203: NOT
40204: PUSH
40205: LD_VAR 0 2
40209: NOT
40210: OR
40211: PUSH
40212: LD_VAR 0 3
40216: NOT
40217: OR
40218: PUSH
40219: LD_VAR 0 2
40223: PUSH
40224: LD_VAR 0 1
40228: GREATER
40229: OR
40230: PUSH
40231: LD_VAR 0 3
40235: PUSH
40236: LD_VAR 0 1
40240: GREATER
40241: OR
40242: IFFALSE 40246
// exit ;
40244: GO 40542
// if direction then
40246: LD_VAR 0 4
40250: IFFALSE 40314
// begin d := 1 ;
40252: LD_ADDR_VAR 0 9
40256: PUSH
40257: LD_INT 1
40259: ST_TO_ADDR
// if i_from > i_to then
40260: LD_VAR 0 2
40264: PUSH
40265: LD_VAR 0 3
40269: GREATER
40270: IFFALSE 40296
// length := ( array - i_from ) + i_to else
40272: LD_ADDR_VAR 0 11
40276: PUSH
40277: LD_VAR 0 1
40281: PUSH
40282: LD_VAR 0 2
40286: MINUS
40287: PUSH
40288: LD_VAR 0 3
40292: PLUS
40293: ST_TO_ADDR
40294: GO 40312
// length := i_to - i_from ;
40296: LD_ADDR_VAR 0 11
40300: PUSH
40301: LD_VAR 0 3
40305: PUSH
40306: LD_VAR 0 2
40310: MINUS
40311: ST_TO_ADDR
// end else
40312: GO 40375
// begin d := - 1 ;
40314: LD_ADDR_VAR 0 9
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: ST_TO_ADDR
// if i_from > i_to then
40323: LD_VAR 0 2
40327: PUSH
40328: LD_VAR 0 3
40332: GREATER
40333: IFFALSE 40353
// length := i_from - i_to else
40335: LD_ADDR_VAR 0 11
40339: PUSH
40340: LD_VAR 0 2
40344: PUSH
40345: LD_VAR 0 3
40349: MINUS
40350: ST_TO_ADDR
40351: GO 40375
// length := ( array - i_to ) + i_from ;
40353: LD_ADDR_VAR 0 11
40357: PUSH
40358: LD_VAR 0 1
40362: PUSH
40363: LD_VAR 0 3
40367: MINUS
40368: PUSH
40369: LD_VAR 0 2
40373: PLUS
40374: ST_TO_ADDR
// end ; if not length then
40375: LD_VAR 0 11
40379: NOT
40380: IFFALSE 40384
// exit ;
40382: GO 40542
// tmp := array ;
40384: LD_ADDR_VAR 0 10
40388: PUSH
40389: LD_VAR 0 1
40393: ST_TO_ADDR
// for i = 1 to length do
40394: LD_ADDR_VAR 0 6
40398: PUSH
40399: DOUBLE
40400: LD_INT 1
40402: DEC
40403: ST_TO_ADDR
40404: LD_VAR 0 11
40408: PUSH
40409: FOR_TO
40410: IFFALSE 40530
// begin for j = 1 to array do
40412: LD_ADDR_VAR 0 7
40416: PUSH
40417: DOUBLE
40418: LD_INT 1
40420: DEC
40421: ST_TO_ADDR
40422: LD_VAR 0 1
40426: PUSH
40427: FOR_TO
40428: IFFALSE 40516
// begin k := j + d ;
40430: LD_ADDR_VAR 0 8
40434: PUSH
40435: LD_VAR 0 7
40439: PUSH
40440: LD_VAR 0 9
40444: PLUS
40445: ST_TO_ADDR
// if k > array then
40446: LD_VAR 0 8
40450: PUSH
40451: LD_VAR 0 1
40455: GREATER
40456: IFFALSE 40466
// k := 1 ;
40458: LD_ADDR_VAR 0 8
40462: PUSH
40463: LD_INT 1
40465: ST_TO_ADDR
// if not k then
40466: LD_VAR 0 8
40470: NOT
40471: IFFALSE 40483
// k := array ;
40473: LD_ADDR_VAR 0 8
40477: PUSH
40478: LD_VAR 0 1
40482: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40483: LD_ADDR_VAR 0 10
40487: PUSH
40488: LD_VAR 0 10
40492: PPUSH
40493: LD_VAR 0 8
40497: PPUSH
40498: LD_VAR 0 1
40502: PUSH
40503: LD_VAR 0 7
40507: ARRAY
40508: PPUSH
40509: CALL_OW 1
40513: ST_TO_ADDR
// end ;
40514: GO 40427
40516: POP
40517: POP
// array := tmp ;
40518: LD_ADDR_VAR 0 1
40522: PUSH
40523: LD_VAR 0 10
40527: ST_TO_ADDR
// end ;
40528: GO 40409
40530: POP
40531: POP
// result := array ;
40532: LD_ADDR_VAR 0 5
40536: PUSH
40537: LD_VAR 0 1
40541: ST_TO_ADDR
// end ;
40542: LD_VAR 0 5
40546: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40547: LD_INT 0
40549: PPUSH
40550: PPUSH
// result := 0 ;
40551: LD_ADDR_VAR 0 3
40555: PUSH
40556: LD_INT 0
40558: ST_TO_ADDR
// if not array or not value in array then
40559: LD_VAR 0 1
40563: NOT
40564: PUSH
40565: LD_VAR 0 2
40569: PUSH
40570: LD_VAR 0 1
40574: IN
40575: NOT
40576: OR
40577: IFFALSE 40581
// exit ;
40579: GO 40635
// for i = 1 to array do
40581: LD_ADDR_VAR 0 4
40585: PUSH
40586: DOUBLE
40587: LD_INT 1
40589: DEC
40590: ST_TO_ADDR
40591: LD_VAR 0 1
40595: PUSH
40596: FOR_TO
40597: IFFALSE 40633
// if value = array [ i ] then
40599: LD_VAR 0 2
40603: PUSH
40604: LD_VAR 0 1
40608: PUSH
40609: LD_VAR 0 4
40613: ARRAY
40614: EQUAL
40615: IFFALSE 40631
// begin result := i ;
40617: LD_ADDR_VAR 0 3
40621: PUSH
40622: LD_VAR 0 4
40626: ST_TO_ADDR
// exit ;
40627: POP
40628: POP
40629: GO 40635
// end ;
40631: GO 40596
40633: POP
40634: POP
// end ;
40635: LD_VAR 0 3
40639: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40640: LD_INT 0
40642: PPUSH
// vc_chassis := chassis ;
40643: LD_ADDR_OWVAR 37
40647: PUSH
40648: LD_VAR 0 1
40652: ST_TO_ADDR
// vc_engine := engine ;
40653: LD_ADDR_OWVAR 39
40657: PUSH
40658: LD_VAR 0 2
40662: ST_TO_ADDR
// vc_control := control ;
40663: LD_ADDR_OWVAR 38
40667: PUSH
40668: LD_VAR 0 3
40672: ST_TO_ADDR
// vc_weapon := weapon ;
40673: LD_ADDR_OWVAR 40
40677: PUSH
40678: LD_VAR 0 4
40682: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40683: LD_ADDR_OWVAR 41
40687: PUSH
40688: LD_VAR 0 5
40692: ST_TO_ADDR
// end ;
40693: LD_VAR 0 6
40697: RET
// export function WantPlant ( unit ) ; var task ; begin
40698: LD_INT 0
40700: PPUSH
40701: PPUSH
// result := false ;
40702: LD_ADDR_VAR 0 2
40706: PUSH
40707: LD_INT 0
40709: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 437
40724: ST_TO_ADDR
// if task then
40725: LD_VAR 0 3
40729: IFFALSE 40757
// if task [ 1 ] [ 1 ] = p then
40731: LD_VAR 0 3
40735: PUSH
40736: LD_INT 1
40738: ARRAY
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PUSH
40744: LD_STRING p
40746: EQUAL
40747: IFFALSE 40757
// result := true ;
40749: LD_ADDR_VAR 0 2
40753: PUSH
40754: LD_INT 1
40756: ST_TO_ADDR
// end ;
40757: LD_VAR 0 2
40761: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40762: LD_INT 0
40764: PPUSH
40765: PPUSH
40766: PPUSH
40767: PPUSH
// if pos < 1 then
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 1
40775: LESS
40776: IFFALSE 40780
// exit ;
40778: GO 41083
// if pos = 1 then
40780: LD_VAR 0 2
40784: PUSH
40785: LD_INT 1
40787: EQUAL
40788: IFFALSE 40821
// result := Replace ( arr , pos [ 1 ] , value ) else
40790: LD_ADDR_VAR 0 4
40794: PUSH
40795: LD_VAR 0 1
40799: PPUSH
40800: LD_VAR 0 2
40804: PUSH
40805: LD_INT 1
40807: ARRAY
40808: PPUSH
40809: LD_VAR 0 3
40813: PPUSH
40814: CALL_OW 1
40818: ST_TO_ADDR
40819: GO 41083
// begin tmp := arr ;
40821: LD_ADDR_VAR 0 6
40825: PUSH
40826: LD_VAR 0 1
40830: ST_TO_ADDR
// s_arr := [ tmp ] ;
40831: LD_ADDR_VAR 0 7
40835: PUSH
40836: LD_VAR 0 6
40840: PUSH
40841: EMPTY
40842: LIST
40843: ST_TO_ADDR
// for i = 1 to pos - 1 do
40844: LD_ADDR_VAR 0 5
40848: PUSH
40849: DOUBLE
40850: LD_INT 1
40852: DEC
40853: ST_TO_ADDR
40854: LD_VAR 0 2
40858: PUSH
40859: LD_INT 1
40861: MINUS
40862: PUSH
40863: FOR_TO
40864: IFFALSE 40909
// begin tmp := tmp [ pos [ i ] ] ;
40866: LD_ADDR_VAR 0 6
40870: PUSH
40871: LD_VAR 0 6
40875: PUSH
40876: LD_VAR 0 2
40880: PUSH
40881: LD_VAR 0 5
40885: ARRAY
40886: ARRAY
40887: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40888: LD_ADDR_VAR 0 7
40892: PUSH
40893: LD_VAR 0 7
40897: PUSH
40898: LD_VAR 0 6
40902: PUSH
40903: EMPTY
40904: LIST
40905: ADD
40906: ST_TO_ADDR
// end ;
40907: GO 40863
40909: POP
40910: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40911: LD_ADDR_VAR 0 6
40915: PUSH
40916: LD_VAR 0 6
40920: PPUSH
40921: LD_VAR 0 2
40925: PUSH
40926: LD_VAR 0 2
40930: ARRAY
40931: PPUSH
40932: LD_VAR 0 3
40936: PPUSH
40937: CALL_OW 1
40941: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40942: LD_ADDR_VAR 0 7
40946: PUSH
40947: LD_VAR 0 7
40951: PPUSH
40952: LD_VAR 0 7
40956: PPUSH
40957: LD_VAR 0 6
40961: PPUSH
40962: CALL_OW 1
40966: ST_TO_ADDR
// for i = s_arr downto 2 do
40967: LD_ADDR_VAR 0 5
40971: PUSH
40972: DOUBLE
40973: LD_VAR 0 7
40977: INC
40978: ST_TO_ADDR
40979: LD_INT 2
40981: PUSH
40982: FOR_DOWNTO
40983: IFFALSE 41067
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40985: LD_ADDR_VAR 0 6
40989: PUSH
40990: LD_VAR 0 7
40994: PUSH
40995: LD_VAR 0 5
40999: PUSH
41000: LD_INT 1
41002: MINUS
41003: ARRAY
41004: PPUSH
41005: LD_VAR 0 2
41009: PUSH
41010: LD_VAR 0 5
41014: PUSH
41015: LD_INT 1
41017: MINUS
41018: ARRAY
41019: PPUSH
41020: LD_VAR 0 7
41024: PUSH
41025: LD_VAR 0 5
41029: ARRAY
41030: PPUSH
41031: CALL_OW 1
41035: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41036: LD_ADDR_VAR 0 7
41040: PUSH
41041: LD_VAR 0 7
41045: PPUSH
41046: LD_VAR 0 5
41050: PUSH
41051: LD_INT 1
41053: MINUS
41054: PPUSH
41055: LD_VAR 0 6
41059: PPUSH
41060: CALL_OW 1
41064: ST_TO_ADDR
// end ;
41065: GO 40982
41067: POP
41068: POP
// result := s_arr [ 1 ] ;
41069: LD_ADDR_VAR 0 4
41073: PUSH
41074: LD_VAR 0 7
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: ST_TO_ADDR
// end ; end ;
41083: LD_VAR 0 4
41087: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41088: LD_INT 0
41090: PPUSH
41091: PPUSH
// if not list then
41092: LD_VAR 0 1
41096: NOT
41097: IFFALSE 41101
// exit ;
41099: GO 41192
// i := list [ pos1 ] ;
41101: LD_ADDR_VAR 0 5
41105: PUSH
41106: LD_VAR 0 1
41110: PUSH
41111: LD_VAR 0 2
41115: ARRAY
41116: ST_TO_ADDR
// if not i then
41117: LD_VAR 0 5
41121: NOT
41122: IFFALSE 41126
// exit ;
41124: GO 41192
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41126: LD_ADDR_VAR 0 1
41130: PUSH
41131: LD_VAR 0 1
41135: PPUSH
41136: LD_VAR 0 2
41140: PPUSH
41141: LD_VAR 0 1
41145: PUSH
41146: LD_VAR 0 3
41150: ARRAY
41151: PPUSH
41152: CALL_OW 1
41156: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41157: LD_ADDR_VAR 0 1
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: LD_VAR 0 3
41171: PPUSH
41172: LD_VAR 0 5
41176: PPUSH
41177: CALL_OW 1
41181: ST_TO_ADDR
// result := list ;
41182: LD_ADDR_VAR 0 4
41186: PUSH
41187: LD_VAR 0 1
41191: ST_TO_ADDR
// end ;
41192: LD_VAR 0 4
41196: RET
// export function Add ( list , pos , val ) ; begin
41197: LD_INT 0
41199: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
41200: LD_ADDR_VAR 0 4
41204: PUSH
41205: LD_VAR 0 1
41209: PPUSH
41210: LD_VAR 0 2
41214: PPUSH
41215: LD_VAR 0 3
41219: PPUSH
41220: CALL 40762 0 3
41224: ST_TO_ADDR
41225: LD_VAR 0 4
41229: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41230: LD_INT 0
41232: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41233: LD_ADDR_VAR 0 5
41237: PUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 250
41247: PPUSH
41248: LD_VAR 0 1
41252: PPUSH
41253: CALL_OW 251
41257: PPUSH
41258: LD_VAR 0 2
41262: PPUSH
41263: LD_VAR 0 3
41267: PPUSH
41268: LD_VAR 0 4
41272: PPUSH
41273: CALL 41283 0 5
41277: ST_TO_ADDR
// end ;
41278: LD_VAR 0 5
41282: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41283: LD_INT 0
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
// if not list then
41289: LD_VAR 0 3
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41686
// result := [ ] ;
41298: LD_ADDR_VAR 0 6
41302: PUSH
41303: EMPTY
41304: ST_TO_ADDR
// for i in list do
41305: LD_ADDR_VAR 0 7
41309: PUSH
41310: LD_VAR 0 3
41314: PUSH
41315: FOR_IN
41316: IFFALSE 41518
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41318: LD_ADDR_VAR 0 9
41322: PUSH
41323: LD_VAR 0 7
41327: PPUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_VAR 0 2
41337: PPUSH
41338: CALL_OW 297
41342: ST_TO_ADDR
// if not result then
41343: LD_VAR 0 6
41347: NOT
41348: IFFALSE 41374
// result := [ [ i , tmp ] ] else
41350: LD_ADDR_VAR 0 6
41354: PUSH
41355: LD_VAR 0 7
41359: PUSH
41360: LD_VAR 0 9
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: ST_TO_ADDR
41372: GO 41516
// begin if result [ result ] [ 2 ] < tmp then
41374: LD_VAR 0 6
41378: PUSH
41379: LD_VAR 0 6
41383: ARRAY
41384: PUSH
41385: LD_INT 2
41387: ARRAY
41388: PUSH
41389: LD_VAR 0 9
41393: LESS
41394: IFFALSE 41436
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41396: LD_ADDR_VAR 0 6
41400: PUSH
41401: LD_VAR 0 6
41405: PPUSH
41406: LD_VAR 0 6
41410: PUSH
41411: LD_INT 1
41413: PLUS
41414: PPUSH
41415: LD_VAR 0 7
41419: PUSH
41420: LD_VAR 0 9
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PPUSH
41429: CALL_OW 2
41433: ST_TO_ADDR
41434: GO 41516
// for j = 1 to result do
41436: LD_ADDR_VAR 0 8
41440: PUSH
41441: DOUBLE
41442: LD_INT 1
41444: DEC
41445: ST_TO_ADDR
41446: LD_VAR 0 6
41450: PUSH
41451: FOR_TO
41452: IFFALSE 41514
// begin if tmp < result [ j ] [ 2 ] then
41454: LD_VAR 0 9
41458: PUSH
41459: LD_VAR 0 6
41463: PUSH
41464: LD_VAR 0 8
41468: ARRAY
41469: PUSH
41470: LD_INT 2
41472: ARRAY
41473: LESS
41474: IFFALSE 41512
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41476: LD_ADDR_VAR 0 6
41480: PUSH
41481: LD_VAR 0 6
41485: PPUSH
41486: LD_VAR 0 8
41490: PPUSH
41491: LD_VAR 0 7
41495: PUSH
41496: LD_VAR 0 9
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PPUSH
41505: CALL_OW 2
41509: ST_TO_ADDR
// break ;
41510: GO 41514
// end ; end ;
41512: GO 41451
41514: POP
41515: POP
// end ; end ;
41516: GO 41315
41518: POP
41519: POP
// if result and not asc then
41520: LD_VAR 0 6
41524: PUSH
41525: LD_VAR 0 4
41529: NOT
41530: AND
41531: IFFALSE 41606
// begin tmp := result ;
41533: LD_ADDR_VAR 0 9
41537: PUSH
41538: LD_VAR 0 6
41542: ST_TO_ADDR
// for i = tmp downto 1 do
41543: LD_ADDR_VAR 0 7
41547: PUSH
41548: DOUBLE
41549: LD_VAR 0 9
41553: INC
41554: ST_TO_ADDR
41555: LD_INT 1
41557: PUSH
41558: FOR_DOWNTO
41559: IFFALSE 41604
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41561: LD_ADDR_VAR 0 6
41565: PUSH
41566: LD_VAR 0 6
41570: PPUSH
41571: LD_VAR 0 9
41575: PUSH
41576: LD_VAR 0 7
41580: MINUS
41581: PUSH
41582: LD_INT 1
41584: PLUS
41585: PPUSH
41586: LD_VAR 0 9
41590: PUSH
41591: LD_VAR 0 7
41595: ARRAY
41596: PPUSH
41597: CALL_OW 1
41601: ST_TO_ADDR
41602: GO 41558
41604: POP
41605: POP
// end ; tmp := [ ] ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: EMPTY
41612: ST_TO_ADDR
// if mode then
41613: LD_VAR 0 5
41617: IFFALSE 41686
// begin for i = 1 to result do
41619: LD_ADDR_VAR 0 7
41623: PUSH
41624: DOUBLE
41625: LD_INT 1
41627: DEC
41628: ST_TO_ADDR
41629: LD_VAR 0 6
41633: PUSH
41634: FOR_TO
41635: IFFALSE 41674
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41637: LD_ADDR_VAR 0 9
41641: PUSH
41642: LD_VAR 0 9
41646: PPUSH
41647: LD_VAR 0 7
41651: PPUSH
41652: LD_VAR 0 6
41656: PUSH
41657: LD_VAR 0 7
41661: ARRAY
41662: PUSH
41663: LD_INT 1
41665: ARRAY
41666: PPUSH
41667: CALL_OW 1
41671: ST_TO_ADDR
41672: GO 41634
41674: POP
41675: POP
// result := tmp ;
41676: LD_ADDR_VAR 0 6
41680: PUSH
41681: LD_VAR 0 9
41685: ST_TO_ADDR
// end ; end ;
41686: LD_VAR 0 6
41690: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41691: LD_INT 0
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41699: LD_ADDR_VAR 0 5
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: ST_TO_ADDR
// if not x or not y then
41721: LD_VAR 0 2
41725: NOT
41726: PUSH
41727: LD_VAR 0 3
41731: NOT
41732: OR
41733: IFFALSE 41737
// exit ;
41735: GO 43383
// if not range then
41737: LD_VAR 0 4
41741: NOT
41742: IFFALSE 41752
// range := 10 ;
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_INT 10
41751: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41752: LD_ADDR_VAR 0 8
41756: PUSH
41757: LD_INT 81
41759: PUSH
41760: LD_VAR 0 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 92
41771: PUSH
41772: LD_VAR 0 2
41776: PUSH
41777: LD_VAR 0 3
41781: PUSH
41782: LD_VAR 0 4
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 3
41795: PUSH
41796: LD_INT 21
41798: PUSH
41799: LD_INT 3
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: PPUSH
41815: CALL_OW 69
41819: ST_TO_ADDR
// if not tmp then
41820: LD_VAR 0 8
41824: NOT
41825: IFFALSE 41829
// exit ;
41827: GO 43383
// for i in tmp do
41829: LD_ADDR_VAR 0 6
41833: PUSH
41834: LD_VAR 0 8
41838: PUSH
41839: FOR_IN
41840: IFFALSE 43358
// begin points := [ 0 , 0 , 0 ] ;
41842: LD_ADDR_VAR 0 9
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 0
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// bpoints := 1 ;
41861: LD_ADDR_VAR 0 10
41865: PUSH
41866: LD_INT 1
41868: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41869: LD_VAR 0 6
41873: PPUSH
41874: CALL_OW 247
41878: PUSH
41879: LD_INT 1
41881: DOUBLE
41882: EQUAL
41883: IFTRUE 41887
41885: GO 42465
41887: POP
// begin if GetClass ( i ) = 1 then
41888: LD_VAR 0 6
41892: PPUSH
41893: CALL_OW 257
41897: PUSH
41898: LD_INT 1
41900: EQUAL
41901: IFFALSE 41922
// points := [ 10 , 5 , 3 ] ;
41903: LD_ADDR_VAR 0 9
41907: PUSH
41908: LD_INT 10
41910: PUSH
41911: LD_INT 5
41913: PUSH
41914: LD_INT 3
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41922: LD_VAR 0 6
41926: PPUSH
41927: CALL_OW 257
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: IN
41946: IFFALSE 41967
// points := [ 3 , 2 , 1 ] ;
41948: LD_ADDR_VAR 0 9
41952: PUSH
41953: LD_INT 3
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: LIST
41966: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41967: LD_VAR 0 6
41971: PPUSH
41972: CALL_OW 257
41976: PUSH
41977: LD_INT 5
41979: EQUAL
41980: IFFALSE 42001
// points := [ 130 , 5 , 2 ] ;
41982: LD_ADDR_VAR 0 9
41986: PUSH
41987: LD_INT 130
41989: PUSH
41990: LD_INT 5
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42001: LD_VAR 0 6
42005: PPUSH
42006: CALL_OW 257
42010: PUSH
42011: LD_INT 8
42013: EQUAL
42014: IFFALSE 42035
// points := [ 35 , 35 , 30 ] ;
42016: LD_ADDR_VAR 0 9
42020: PUSH
42021: LD_INT 35
42023: PUSH
42024: LD_INT 35
42026: PUSH
42027: LD_INT 30
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: LIST
42034: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42035: LD_VAR 0 6
42039: PPUSH
42040: CALL_OW 257
42044: PUSH
42045: LD_INT 9
42047: EQUAL
42048: IFFALSE 42069
// points := [ 20 , 55 , 40 ] ;
42050: LD_ADDR_VAR 0 9
42054: PUSH
42055: LD_INT 20
42057: PUSH
42058: LD_INT 55
42060: PUSH
42061: LD_INT 40
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42069: LD_VAR 0 6
42073: PPUSH
42074: CALL_OW 257
42078: PUSH
42079: LD_INT 12
42081: PUSH
42082: LD_INT 16
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: IN
42089: IFFALSE 42110
// points := [ 5 , 3 , 2 ] ;
42091: LD_ADDR_VAR 0 9
42095: PUSH
42096: LD_INT 5
42098: PUSH
42099: LD_INT 3
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42110: LD_VAR 0 6
42114: PPUSH
42115: CALL_OW 257
42119: PUSH
42120: LD_INT 17
42122: EQUAL
42123: IFFALSE 42144
// points := [ 100 , 50 , 75 ] ;
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_INT 100
42132: PUSH
42133: LD_INT 50
42135: PUSH
42136: LD_INT 75
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42144: LD_VAR 0 6
42148: PPUSH
42149: CALL_OW 257
42153: PUSH
42154: LD_INT 15
42156: EQUAL
42157: IFFALSE 42178
// points := [ 10 , 5 , 3 ] ;
42159: LD_ADDR_VAR 0 9
42163: PUSH
42164: LD_INT 10
42166: PUSH
42167: LD_INT 5
42169: PUSH
42170: LD_INT 3
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42178: LD_VAR 0 6
42182: PPUSH
42183: CALL_OW 257
42187: PUSH
42188: LD_INT 14
42190: EQUAL
42191: IFFALSE 42212
// points := [ 10 , 0 , 0 ] ;
42193: LD_ADDR_VAR 0 9
42197: PUSH
42198: LD_INT 10
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42212: LD_VAR 0 6
42216: PPUSH
42217: CALL_OW 257
42221: PUSH
42222: LD_INT 11
42224: EQUAL
42225: IFFALSE 42246
// points := [ 30 , 10 , 5 ] ;
42227: LD_ADDR_VAR 0 9
42231: PUSH
42232: LD_INT 30
42234: PUSH
42235: LD_INT 10
42237: PUSH
42238: LD_INT 5
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42246: LD_VAR 0 1
42250: PPUSH
42251: LD_INT 5
42253: PPUSH
42254: CALL_OW 321
42258: PUSH
42259: LD_INT 2
42261: EQUAL
42262: IFFALSE 42279
// bpoints := bpoints * 1.8 ;
42264: LD_ADDR_VAR 0 10
42268: PUSH
42269: LD_VAR 0 10
42273: PUSH
42274: LD_REAL  1.80000000000000E+0000
42277: MUL
42278: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42279: LD_VAR 0 6
42283: PPUSH
42284: CALL_OW 257
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: LD_INT 4
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: IN
42307: PUSH
42308: LD_VAR 0 1
42312: PPUSH
42313: LD_INT 51
42315: PPUSH
42316: CALL_OW 321
42320: PUSH
42321: LD_INT 2
42323: EQUAL
42324: AND
42325: IFFALSE 42342
// bpoints := bpoints * 1.2 ;
42327: LD_ADDR_VAR 0 10
42331: PUSH
42332: LD_VAR 0 10
42336: PUSH
42337: LD_REAL  1.20000000000000E+0000
42340: MUL
42341: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42342: LD_VAR 0 6
42346: PPUSH
42347: CALL_OW 257
42351: PUSH
42352: LD_INT 5
42354: PUSH
42355: LD_INT 7
42357: PUSH
42358: LD_INT 9
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: LIST
42365: IN
42366: PUSH
42367: LD_VAR 0 1
42371: PPUSH
42372: LD_INT 52
42374: PPUSH
42375: CALL_OW 321
42379: PUSH
42380: LD_INT 2
42382: EQUAL
42383: AND
42384: IFFALSE 42401
// bpoints := bpoints * 1.5 ;
42386: LD_ADDR_VAR 0 10
42390: PUSH
42391: LD_VAR 0 10
42395: PUSH
42396: LD_REAL  1.50000000000000E+0000
42399: MUL
42400: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42401: LD_VAR 0 1
42405: PPUSH
42406: LD_INT 66
42408: PPUSH
42409: CALL_OW 321
42413: PUSH
42414: LD_INT 2
42416: EQUAL
42417: IFFALSE 42434
// bpoints := bpoints * 1.1 ;
42419: LD_ADDR_VAR 0 10
42423: PUSH
42424: LD_VAR 0 10
42428: PUSH
42429: LD_REAL  1.10000000000000E+0000
42432: MUL
42433: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42434: LD_ADDR_VAR 0 10
42438: PUSH
42439: LD_VAR 0 10
42443: PUSH
42444: LD_VAR 0 6
42448: PPUSH
42449: LD_INT 1
42451: PPUSH
42452: CALL_OW 259
42456: PUSH
42457: LD_REAL  1.15000000000000E+0000
42460: MUL
42461: MUL
42462: ST_TO_ADDR
// end ; unit_vehicle :
42463: GO 43287
42465: LD_INT 2
42467: DOUBLE
42468: EQUAL
42469: IFTRUE 42473
42471: GO 43275
42473: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42474: LD_VAR 0 6
42478: PPUSH
42479: CALL_OW 264
42483: PUSH
42484: LD_INT 2
42486: PUSH
42487: LD_INT 42
42489: PUSH
42490: LD_INT 24
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: IN
42498: IFFALSE 42519
// points := [ 25 , 5 , 3 ] ;
42500: LD_ADDR_VAR 0 9
42504: PUSH
42505: LD_INT 25
42507: PUSH
42508: LD_INT 5
42510: PUSH
42511: LD_INT 3
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42519: LD_VAR 0 6
42523: PPUSH
42524: CALL_OW 264
42528: PUSH
42529: LD_INT 4
42531: PUSH
42532: LD_INT 43
42534: PUSH
42535: LD_INT 25
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: IN
42543: IFFALSE 42564
// points := [ 40 , 15 , 5 ] ;
42545: LD_ADDR_VAR 0 9
42549: PUSH
42550: LD_INT 40
42552: PUSH
42553: LD_INT 15
42555: PUSH
42556: LD_INT 5
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42564: LD_VAR 0 6
42568: PPUSH
42569: CALL_OW 264
42573: PUSH
42574: LD_INT 3
42576: PUSH
42577: LD_INT 23
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: IN
42584: IFFALSE 42605
// points := [ 7 , 25 , 8 ] ;
42586: LD_ADDR_VAR 0 9
42590: PUSH
42591: LD_INT 7
42593: PUSH
42594: LD_INT 25
42596: PUSH
42597: LD_INT 8
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42605: LD_VAR 0 6
42609: PPUSH
42610: CALL_OW 264
42614: PUSH
42615: LD_INT 5
42617: PUSH
42618: LD_INT 27
42620: PUSH
42621: LD_INT 44
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: IN
42629: IFFALSE 42650
// points := [ 14 , 50 , 16 ] ;
42631: LD_ADDR_VAR 0 9
42635: PUSH
42636: LD_INT 14
42638: PUSH
42639: LD_INT 50
42641: PUSH
42642: LD_INT 16
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42650: LD_VAR 0 6
42654: PPUSH
42655: CALL_OW 264
42659: PUSH
42660: LD_INT 6
42662: PUSH
42663: LD_INT 46
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: IN
42670: IFFALSE 42691
// points := [ 32 , 120 , 70 ] ;
42672: LD_ADDR_VAR 0 9
42676: PUSH
42677: LD_INT 32
42679: PUSH
42680: LD_INT 120
42682: PUSH
42683: LD_INT 70
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42691: LD_VAR 0 6
42695: PPUSH
42696: CALL_OW 264
42700: PUSH
42701: LD_INT 7
42703: PUSH
42704: LD_INT 28
42706: PUSH
42707: LD_INT 45
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: IN
42715: IFFALSE 42736
// points := [ 35 , 20 , 45 ] ;
42717: LD_ADDR_VAR 0 9
42721: PUSH
42722: LD_INT 35
42724: PUSH
42725: LD_INT 20
42727: PUSH
42728: LD_INT 45
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42736: LD_VAR 0 6
42740: PPUSH
42741: CALL_OW 264
42745: PUSH
42746: LD_INT 47
42748: PUSH
42749: EMPTY
42750: LIST
42751: IN
42752: IFFALSE 42773
// points := [ 67 , 45 , 75 ] ;
42754: LD_ADDR_VAR 0 9
42758: PUSH
42759: LD_INT 67
42761: PUSH
42762: LD_INT 45
42764: PUSH
42765: LD_INT 75
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: LIST
42772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42773: LD_VAR 0 6
42777: PPUSH
42778: CALL_OW 264
42782: PUSH
42783: LD_INT 26
42785: PUSH
42786: EMPTY
42787: LIST
42788: IN
42789: IFFALSE 42810
// points := [ 120 , 30 , 80 ] ;
42791: LD_ADDR_VAR 0 9
42795: PUSH
42796: LD_INT 120
42798: PUSH
42799: LD_INT 30
42801: PUSH
42802: LD_INT 80
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42810: LD_VAR 0 6
42814: PPUSH
42815: CALL_OW 264
42819: PUSH
42820: LD_INT 22
42822: PUSH
42823: EMPTY
42824: LIST
42825: IN
42826: IFFALSE 42847
// points := [ 40 , 1 , 1 ] ;
42828: LD_ADDR_VAR 0 9
42832: PUSH
42833: LD_INT 40
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: LD_INT 1
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42847: LD_VAR 0 6
42851: PPUSH
42852: CALL_OW 264
42856: PUSH
42857: LD_INT 29
42859: PUSH
42860: EMPTY
42861: LIST
42862: IN
42863: IFFALSE 42884
// points := [ 70 , 200 , 400 ] ;
42865: LD_ADDR_VAR 0 9
42869: PUSH
42870: LD_INT 70
42872: PUSH
42873: LD_INT 200
42875: PUSH
42876: LD_INT 400
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42884: LD_VAR 0 6
42888: PPUSH
42889: CALL_OW 264
42893: PUSH
42894: LD_INT 14
42896: PUSH
42897: LD_INT 53
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: IN
42904: IFFALSE 42925
// points := [ 40 , 10 , 20 ] ;
42906: LD_ADDR_VAR 0 9
42910: PUSH
42911: LD_INT 40
42913: PUSH
42914: LD_INT 10
42916: PUSH
42917: LD_INT 20
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42925: LD_VAR 0 6
42929: PPUSH
42930: CALL_OW 264
42934: PUSH
42935: LD_INT 9
42937: PUSH
42938: EMPTY
42939: LIST
42940: IN
42941: IFFALSE 42962
// points := [ 5 , 70 , 20 ] ;
42943: LD_ADDR_VAR 0 9
42947: PUSH
42948: LD_INT 5
42950: PUSH
42951: LD_INT 70
42953: PUSH
42954: LD_INT 20
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42962: LD_VAR 0 6
42966: PPUSH
42967: CALL_OW 264
42971: PUSH
42972: LD_INT 10
42974: PUSH
42975: EMPTY
42976: LIST
42977: IN
42978: IFFALSE 42999
// points := [ 35 , 110 , 70 ] ;
42980: LD_ADDR_VAR 0 9
42984: PUSH
42985: LD_INT 35
42987: PUSH
42988: LD_INT 110
42990: PUSH
42991: LD_INT 70
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42999: LD_VAR 0 6
43003: PPUSH
43004: CALL_OW 265
43008: PUSH
43009: LD_INT 25
43011: EQUAL
43012: IFFALSE 43033
// points := [ 80 , 65 , 100 ] ;
43014: LD_ADDR_VAR 0 9
43018: PUSH
43019: LD_INT 80
43021: PUSH
43022: LD_INT 65
43024: PUSH
43025: LD_INT 100
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43033: LD_VAR 0 6
43037: PPUSH
43038: CALL_OW 263
43042: PUSH
43043: LD_INT 1
43045: EQUAL
43046: IFFALSE 43081
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43048: LD_ADDR_VAR 0 10
43052: PUSH
43053: LD_VAR 0 10
43057: PUSH
43058: LD_VAR 0 6
43062: PPUSH
43063: CALL_OW 311
43067: PPUSH
43068: LD_INT 3
43070: PPUSH
43071: CALL_OW 259
43075: PUSH
43076: LD_INT 4
43078: MUL
43079: MUL
43080: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43081: LD_VAR 0 6
43085: PPUSH
43086: CALL_OW 263
43090: PUSH
43091: LD_INT 2
43093: EQUAL
43094: IFFALSE 43145
// begin j := IsControledBy ( i ) ;
43096: LD_ADDR_VAR 0 7
43100: PUSH
43101: LD_VAR 0 6
43105: PPUSH
43106: CALL_OW 312
43110: ST_TO_ADDR
// if j then
43111: LD_VAR 0 7
43115: IFFALSE 43145
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43117: LD_ADDR_VAR 0 10
43121: PUSH
43122: LD_VAR 0 10
43126: PUSH
43127: LD_VAR 0 7
43131: PPUSH
43132: LD_INT 3
43134: PPUSH
43135: CALL_OW 259
43139: PUSH
43140: LD_INT 3
43142: MUL
43143: MUL
43144: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43145: LD_VAR 0 6
43149: PPUSH
43150: CALL_OW 264
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: LD_INT 6
43160: PUSH
43161: LD_INT 46
43163: PUSH
43164: LD_INT 44
43166: PUSH
43167: LD_INT 47
43169: PUSH
43170: LD_INT 45
43172: PUSH
43173: LD_INT 28
43175: PUSH
43176: LD_INT 7
43178: PUSH
43179: LD_INT 27
43181: PUSH
43182: LD_INT 29
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: IN
43197: PUSH
43198: LD_VAR 0 1
43202: PPUSH
43203: LD_INT 52
43205: PPUSH
43206: CALL_OW 321
43210: PUSH
43211: LD_INT 2
43213: EQUAL
43214: AND
43215: IFFALSE 43232
// bpoints := bpoints * 1.2 ;
43217: LD_ADDR_VAR 0 10
43221: PUSH
43222: LD_VAR 0 10
43226: PUSH
43227: LD_REAL  1.20000000000000E+0000
43230: MUL
43231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43232: LD_VAR 0 6
43236: PPUSH
43237: CALL_OW 264
43241: PUSH
43242: LD_INT 6
43244: PUSH
43245: LD_INT 46
43247: PUSH
43248: LD_INT 47
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: IN
43256: IFFALSE 43273
// bpoints := bpoints * 1.2 ;
43258: LD_ADDR_VAR 0 10
43262: PUSH
43263: LD_VAR 0 10
43267: PUSH
43268: LD_REAL  1.20000000000000E+0000
43271: MUL
43272: ST_TO_ADDR
// end ; unit_building :
43273: GO 43287
43275: LD_INT 3
43277: DOUBLE
43278: EQUAL
43279: IFTRUE 43283
43281: GO 43286
43283: POP
// ; end ;
43284: GO 43287
43286: POP
// for j = 1 to 3 do
43287: LD_ADDR_VAR 0 7
43291: PUSH
43292: DOUBLE
43293: LD_INT 1
43295: DEC
43296: ST_TO_ADDR
43297: LD_INT 3
43299: PUSH
43300: FOR_TO
43301: IFFALSE 43354
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43303: LD_ADDR_VAR 0 5
43307: PUSH
43308: LD_VAR 0 5
43312: PPUSH
43313: LD_VAR 0 7
43317: PPUSH
43318: LD_VAR 0 5
43322: PUSH
43323: LD_VAR 0 7
43327: ARRAY
43328: PUSH
43329: LD_VAR 0 9
43333: PUSH
43334: LD_VAR 0 7
43338: ARRAY
43339: PUSH
43340: LD_VAR 0 10
43344: MUL
43345: PLUS
43346: PPUSH
43347: CALL_OW 1
43351: ST_TO_ADDR
43352: GO 43300
43354: POP
43355: POP
// end ;
43356: GO 41839
43358: POP
43359: POP
// result := Replace ( result , 4 , tmp ) ;
43360: LD_ADDR_VAR 0 5
43364: PUSH
43365: LD_VAR 0 5
43369: PPUSH
43370: LD_INT 4
43372: PPUSH
43373: LD_VAR 0 8
43377: PPUSH
43378: CALL_OW 1
43382: ST_TO_ADDR
// end ;
43383: LD_VAR 0 5
43387: RET
// export function DangerAtRange ( unit , range ) ; begin
43388: LD_INT 0
43390: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43391: LD_ADDR_VAR 0 3
43395: PUSH
43396: LD_VAR 0 1
43400: PPUSH
43401: CALL_OW 255
43405: PPUSH
43406: LD_VAR 0 1
43410: PPUSH
43411: CALL_OW 250
43415: PPUSH
43416: LD_VAR 0 1
43420: PPUSH
43421: CALL_OW 251
43425: PPUSH
43426: LD_VAR 0 2
43430: PPUSH
43431: CALL 41691 0 4
43435: ST_TO_ADDR
// end ;
43436: LD_VAR 0 3
43440: RET
// export function IsExtension ( b ) ; begin
43441: LD_INT 0
43443: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43444: LD_ADDR_VAR 0 2
43448: PUSH
43449: LD_VAR 0 1
43453: PPUSH
43454: CALL_OW 266
43458: PUSH
43459: LD_INT 23
43461: PUSH
43462: LD_INT 20
43464: PUSH
43465: LD_INT 22
43467: PUSH
43468: LD_INT 17
43470: PUSH
43471: LD_INT 24
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: LD_INT 19
43479: PUSH
43480: LD_INT 16
43482: PUSH
43483: LD_INT 25
43485: PUSH
43486: LD_INT 18
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: IN
43501: ST_TO_ADDR
// end ;
43502: LD_VAR 0 2
43506: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
43507: LD_INT 0
43509: PPUSH
43510: PPUSH
43511: PPUSH
// result := [ ] ;
43512: LD_ADDR_VAR 0 2
43516: PUSH
43517: EMPTY
43518: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
43519: LD_ADDR_VAR 0 3
43523: PUSH
43524: LD_INT 21
43526: PUSH
43527: LD_INT 3
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PPUSH
43534: CALL_OW 69
43538: ST_TO_ADDR
// if not tmp then
43539: LD_VAR 0 3
43543: NOT
43544: IFFALSE 43548
// exit ;
43546: GO 43598
// for i in tmp do
43548: LD_ADDR_VAR 0 4
43552: PUSH
43553: LD_VAR 0 3
43557: PUSH
43558: FOR_IN
43559: IFFALSE 43596
// if GetBase ( i ) = base then
43561: LD_VAR 0 4
43565: PPUSH
43566: CALL_OW 274
43570: PUSH
43571: LD_VAR 0 1
43575: EQUAL
43576: IFFALSE 43594
// result := result ^ i ;
43578: LD_ADDR_VAR 0 2
43582: PUSH
43583: LD_VAR 0 2
43587: PUSH
43588: LD_VAR 0 4
43592: ADD
43593: ST_TO_ADDR
43594: GO 43558
43596: POP
43597: POP
// end ;
43598: LD_VAR 0 2
43602: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43603: LD_INT 0
43605: PPUSH
43606: PPUSH
// if BuildingStatus ( b ) = bs_build then
43607: LD_VAR 0 2
43611: PPUSH
43612: CALL_OW 461
43616: PUSH
43617: LD_INT 1
43619: EQUAL
43620: IFFALSE 43680
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43622: LD_VAR 0 1
43626: PPUSH
43627: LD_STRING h
43629: PUSH
43630: LD_VAR 0 2
43634: PPUSH
43635: CALL_OW 250
43639: PUSH
43640: LD_VAR 0 2
43644: PPUSH
43645: CALL_OW 251
43649: PUSH
43650: LD_VAR 0 2
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: EMPTY
43674: LIST
43675: PPUSH
43676: CALL_OW 446
// end ;
43680: LD_VAR 0 3
43684: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43685: LD_INT 0
43687: PPUSH
43688: PPUSH
43689: PPUSH
43690: PPUSH
43691: PPUSH
43692: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43693: LD_VAR 0 1
43697: NOT
43698: PUSH
43699: LD_VAR 0 1
43703: PPUSH
43704: CALL_OW 263
43708: PUSH
43709: LD_INT 2
43711: EQUAL
43712: NOT
43713: OR
43714: IFFALSE 43718
// exit ;
43716: GO 44034
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43718: LD_ADDR_VAR 0 6
43722: PUSH
43723: LD_INT 22
43725: PUSH
43726: LD_VAR 0 1
43730: PPUSH
43731: CALL_OW 255
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: LD_INT 30
43745: PUSH
43746: LD_INT 36
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 34
43755: PUSH
43756: LD_INT 31
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PPUSH
43772: CALL_OW 69
43776: ST_TO_ADDR
// if not tmp then
43777: LD_VAR 0 6
43781: NOT
43782: IFFALSE 43786
// exit ;
43784: GO 44034
// result := [ ] ;
43786: LD_ADDR_VAR 0 2
43790: PUSH
43791: EMPTY
43792: ST_TO_ADDR
// for i in tmp do
43793: LD_ADDR_VAR 0 3
43797: PUSH
43798: LD_VAR 0 6
43802: PUSH
43803: FOR_IN
43804: IFFALSE 43875
// begin t := UnitsInside ( i ) ;
43806: LD_ADDR_VAR 0 4
43810: PUSH
43811: LD_VAR 0 3
43815: PPUSH
43816: CALL_OW 313
43820: ST_TO_ADDR
// if t then
43821: LD_VAR 0 4
43825: IFFALSE 43873
// for j in t do
43827: LD_ADDR_VAR 0 7
43831: PUSH
43832: LD_VAR 0 4
43836: PUSH
43837: FOR_IN
43838: IFFALSE 43871
// result := Insert ( result , result + 1 , j ) ;
43840: LD_ADDR_VAR 0 2
43844: PUSH
43845: LD_VAR 0 2
43849: PPUSH
43850: LD_VAR 0 2
43854: PUSH
43855: LD_INT 1
43857: PLUS
43858: PPUSH
43859: LD_VAR 0 7
43863: PPUSH
43864: CALL_OW 2
43868: ST_TO_ADDR
43869: GO 43837
43871: POP
43872: POP
// end ;
43873: GO 43803
43875: POP
43876: POP
// if not result then
43877: LD_VAR 0 2
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 44034
// mech := result [ 1 ] ;
43886: LD_ADDR_VAR 0 5
43890: PUSH
43891: LD_VAR 0 2
43895: PUSH
43896: LD_INT 1
43898: ARRAY
43899: ST_TO_ADDR
// if result > 1 then
43900: LD_VAR 0 2
43904: PUSH
43905: LD_INT 1
43907: GREATER
43908: IFFALSE 44020
// for i = 2 to result do
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: DOUBLE
43916: LD_INT 2
43918: DEC
43919: ST_TO_ADDR
43920: LD_VAR 0 2
43924: PUSH
43925: FOR_TO
43926: IFFALSE 44018
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43928: LD_ADDR_VAR 0 4
43932: PUSH
43933: LD_VAR 0 2
43937: PUSH
43938: LD_VAR 0 3
43942: ARRAY
43943: PPUSH
43944: LD_INT 3
43946: PPUSH
43947: CALL_OW 259
43951: PUSH
43952: LD_VAR 0 2
43956: PUSH
43957: LD_VAR 0 3
43961: ARRAY
43962: PPUSH
43963: CALL_OW 432
43967: MINUS
43968: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43969: LD_VAR 0 4
43973: PUSH
43974: LD_VAR 0 5
43978: PPUSH
43979: LD_INT 3
43981: PPUSH
43982: CALL_OW 259
43986: PUSH
43987: LD_VAR 0 5
43991: PPUSH
43992: CALL_OW 432
43996: MINUS
43997: GREATEREQUAL
43998: IFFALSE 44016
// mech := result [ i ] ;
44000: LD_ADDR_VAR 0 5
44004: PUSH
44005: LD_VAR 0 2
44009: PUSH
44010: LD_VAR 0 3
44014: ARRAY
44015: ST_TO_ADDR
// end ;
44016: GO 43925
44018: POP
44019: POP
// ComLinkTo ( vehicle , mech ) ;
44020: LD_VAR 0 1
44024: PPUSH
44025: LD_VAR 0 5
44029: PPUSH
44030: CALL_OW 135
// end ;
44034: LD_VAR 0 2
44038: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
44039: LD_INT 0
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
44051: PPUSH
44052: PPUSH
// result := [ ] ;
44053: LD_ADDR_VAR 0 6
44057: PUSH
44058: EMPTY
44059: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44060: LD_VAR 0 1
44064: PPUSH
44065: CALL_OW 266
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: IN
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 45494
// if name then
44085: LD_VAR 0 2
44089: IFFALSE 44105
// SetBName ( base_dep , name ) ;
44091: LD_VAR 0 1
44095: PPUSH
44096: LD_VAR 0 2
44100: PPUSH
44101: CALL_OW 500
// base := GetBase ( base_dep ) ;
44105: LD_ADDR_VAR 0 14
44109: PUSH
44110: LD_VAR 0 1
44114: PPUSH
44115: CALL_OW 274
44119: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44120: LD_ADDR_VAR 0 15
44124: PUSH
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 255
44134: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44135: LD_ADDR_VAR 0 16
44139: PUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 248
44149: ST_TO_ADDR
// if sources then
44150: LD_VAR 0 4
44154: IFFALSE 44201
// for i = 1 to 3 do
44156: LD_ADDR_VAR 0 7
44160: PUSH
44161: DOUBLE
44162: LD_INT 1
44164: DEC
44165: ST_TO_ADDR
44166: LD_INT 3
44168: PUSH
44169: FOR_TO
44170: IFFALSE 44199
// AddResourceType ( base , i , sources [ i ] ) ;
44172: LD_VAR 0 14
44176: PPUSH
44177: LD_VAR 0 7
44181: PPUSH
44182: LD_VAR 0 4
44186: PUSH
44187: LD_VAR 0 7
44191: ARRAY
44192: PPUSH
44193: CALL_OW 276
44197: GO 44169
44199: POP
44200: POP
// buildings := GetBaseBuildings ( base ) ;
44201: LD_ADDR_VAR 0 17
44205: PUSH
44206: LD_VAR 0 14
44210: PPUSH
44211: CALL 43507 0 1
44215: ST_TO_ADDR
// InitHc ;
44216: CALL_OW 19
// InitUc ;
44220: CALL_OW 18
// uc_side := side ;
44224: LD_ADDR_OWVAR 20
44228: PUSH
44229: LD_VAR 0 15
44233: ST_TO_ADDR
// uc_nation := nation ;
44234: LD_ADDR_OWVAR 21
44238: PUSH
44239: LD_VAR 0 16
44243: ST_TO_ADDR
// if buildings then
44244: LD_VAR 0 17
44248: IFFALSE 45353
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44250: LD_VAR 0 17
44254: PPUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 30
44260: PUSH
44261: LD_INT 32
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 30
44270: PUSH
44271: LD_INT 33
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: PPUSH
44283: CALL_OW 72
44287: IFFALSE 44370
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44289: LD_ADDR_VAR 0 7
44293: PUSH
44294: LD_VAR 0 17
44298: PPUSH
44299: LD_INT 2
44301: PUSH
44302: LD_INT 30
44304: PUSH
44305: LD_INT 32
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 30
44314: PUSH
44315: LD_INT 33
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: LIST
44326: PPUSH
44327: CALL_OW 72
44331: PUSH
44332: FOR_IN
44333: IFFALSE 44368
// begin if not GetBWeapon ( i ) then
44335: LD_VAR 0 7
44339: PPUSH
44340: CALL_OW 269
44344: NOT
44345: IFFALSE 44366
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
44347: LD_VAR 0 7
44351: PPUSH
44352: LD_VAR 0 7
44356: PPUSH
44357: CALL 45499 0 1
44361: PPUSH
44362: CALL_OW 431
// end ;
44366: GO 44332
44368: POP
44369: POP
// end ; for i = 1 to personel do
44370: LD_ADDR_VAR 0 7
44374: PUSH
44375: DOUBLE
44376: LD_INT 1
44378: DEC
44379: ST_TO_ADDR
44380: LD_VAR 0 5
44384: PUSH
44385: FOR_TO
44386: IFFALSE 45333
// begin if i > 4 then
44388: LD_VAR 0 7
44392: PUSH
44393: LD_INT 4
44395: GREATER
44396: IFFALSE 44400
// break ;
44398: GO 45333
// case i of 1 :
44400: LD_VAR 0 7
44404: PUSH
44405: LD_INT 1
44407: DOUBLE
44408: EQUAL
44409: IFTRUE 44413
44411: GO 44486
44413: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44414: LD_ADDR_VAR 0 11
44418: PUSH
44419: LD_VAR 0 17
44423: PPUSH
44424: LD_INT 22
44426: PUSH
44427: LD_VAR 0 15
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: LD_INT 30
44441: PUSH
44442: LD_INT 32
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: LD_INT 4
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 30
44461: PUSH
44462: LD_INT 5
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PPUSH
44479: CALL_OW 72
44483: ST_TO_ADDR
44484: GO 44708
44486: LD_INT 2
44488: DOUBLE
44489: EQUAL
44490: IFTRUE 44494
44492: GO 44556
44494: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44495: LD_ADDR_VAR 0 11
44499: PUSH
44500: LD_VAR 0 17
44504: PPUSH
44505: LD_INT 22
44507: PUSH
44508: LD_VAR 0 15
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 30
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 30
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PPUSH
44549: CALL_OW 72
44553: ST_TO_ADDR
44554: GO 44708
44556: LD_INT 3
44558: DOUBLE
44559: EQUAL
44560: IFTRUE 44564
44562: GO 44626
44564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44565: LD_ADDR_VAR 0 11
44569: PUSH
44570: LD_VAR 0 17
44574: PPUSH
44575: LD_INT 22
44577: PUSH
44578: LD_VAR 0 15
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 30
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 30
44602: PUSH
44603: LD_INT 3
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PPUSH
44619: CALL_OW 72
44623: ST_TO_ADDR
44624: GO 44708
44626: LD_INT 4
44628: DOUBLE
44629: EQUAL
44630: IFTRUE 44634
44632: GO 44707
44634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44635: LD_ADDR_VAR 0 11
44639: PUSH
44640: LD_VAR 0 17
44644: PPUSH
44645: LD_INT 22
44647: PUSH
44648: LD_VAR 0 15
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 30
44662: PUSH
44663: LD_INT 6
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 30
44672: PUSH
44673: LD_INT 7
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 30
44682: PUSH
44683: LD_INT 8
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PPUSH
44700: CALL_OW 72
44704: ST_TO_ADDR
44705: GO 44708
44707: POP
// if not f then
44708: LD_VAR 0 11
44712: NOT
44713: IFFALSE 44717
// continue ;
44715: GO 44385
// x := personel [ i ] ;
44717: LD_ADDR_VAR 0 12
44721: PUSH
44722: LD_VAR 0 5
44726: PUSH
44727: LD_VAR 0 7
44731: ARRAY
44732: ST_TO_ADDR
// if x = - 1 then
44733: LD_VAR 0 12
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: EQUAL
44742: IFFALSE 44951
// begin for j in f do
44744: LD_ADDR_VAR 0 8
44748: PUSH
44749: LD_VAR 0 11
44753: PUSH
44754: FOR_IN
44755: IFFALSE 44947
// repeat InitHc ;
44757: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44761: LD_VAR 0 8
44765: PPUSH
44766: CALL_OW 266
44770: PUSH
44771: LD_INT 5
44773: EQUAL
44774: IFFALSE 44844
// begin if UnitsInside ( j ) < 3 then
44776: LD_VAR 0 8
44780: PPUSH
44781: CALL_OW 313
44785: PUSH
44786: LD_INT 3
44788: LESS
44789: IFFALSE 44825
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44791: LD_INT 0
44793: PPUSH
44794: LD_INT 5
44796: PUSH
44797: LD_INT 8
44799: PUSH
44800: LD_INT 9
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: PUSH
44808: LD_VAR 0 16
44812: ARRAY
44813: PPUSH
44814: LD_VAR 0 3
44818: PPUSH
44819: CALL_OW 380
44823: GO 44842
// PrepareHuman ( false , i , skill ) ;
44825: LD_INT 0
44827: PPUSH
44828: LD_VAR 0 7
44832: PPUSH
44833: LD_VAR 0 3
44837: PPUSH
44838: CALL_OW 380
// end else
44842: GO 44861
// PrepareHuman ( false , i , skill ) ;
44844: LD_INT 0
44846: PPUSH
44847: LD_VAR 0 7
44851: PPUSH
44852: LD_VAR 0 3
44856: PPUSH
44857: CALL_OW 380
// un := CreateHuman ;
44861: LD_ADDR_VAR 0 13
44865: PUSH
44866: CALL_OW 44
44870: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44871: LD_ADDR_VAR 0 6
44875: PUSH
44876: LD_VAR 0 6
44880: PPUSH
44881: LD_INT 1
44883: PPUSH
44884: LD_VAR 0 13
44888: PPUSH
44889: CALL_OW 2
44893: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44894: LD_VAR 0 13
44898: PPUSH
44899: LD_VAR 0 8
44903: PPUSH
44904: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44908: LD_VAR 0 8
44912: PPUSH
44913: CALL_OW 313
44917: PUSH
44918: LD_INT 6
44920: EQUAL
44921: PUSH
44922: LD_VAR 0 8
44926: PPUSH
44927: CALL_OW 266
44931: PUSH
44932: LD_INT 32
44934: PUSH
44935: LD_INT 31
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: IN
44942: OR
44943: IFFALSE 44757
44945: GO 44754
44947: POP
44948: POP
// end else
44949: GO 45331
// for j = 1 to x do
44951: LD_ADDR_VAR 0 8
44955: PUSH
44956: DOUBLE
44957: LD_INT 1
44959: DEC
44960: ST_TO_ADDR
44961: LD_VAR 0 12
44965: PUSH
44966: FOR_TO
44967: IFFALSE 45329
// begin InitHc ;
44969: CALL_OW 19
// if not f then
44973: LD_VAR 0 11
44977: NOT
44978: IFFALSE 45067
// begin PrepareHuman ( false , i , skill ) ;
44980: LD_INT 0
44982: PPUSH
44983: LD_VAR 0 7
44987: PPUSH
44988: LD_VAR 0 3
44992: PPUSH
44993: CALL_OW 380
// un := CreateHuman ;
44997: LD_ADDR_VAR 0 13
45001: PUSH
45002: CALL_OW 44
45006: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45007: LD_ADDR_VAR 0 6
45011: PUSH
45012: LD_VAR 0 6
45016: PPUSH
45017: LD_INT 1
45019: PPUSH
45020: LD_VAR 0 13
45024: PPUSH
45025: CALL_OW 2
45029: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45030: LD_VAR 0 13
45034: PPUSH
45035: LD_VAR 0 1
45039: PPUSH
45040: CALL_OW 250
45044: PPUSH
45045: LD_VAR 0 1
45049: PPUSH
45050: CALL_OW 251
45054: PPUSH
45055: LD_INT 10
45057: PPUSH
45058: LD_INT 0
45060: PPUSH
45061: CALL_OW 50
// continue ;
45065: GO 44966
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45067: LD_VAR 0 11
45071: PUSH
45072: LD_INT 1
45074: ARRAY
45075: PPUSH
45076: CALL_OW 313
45080: PUSH
45081: LD_VAR 0 11
45085: PUSH
45086: LD_INT 1
45088: ARRAY
45089: PPUSH
45090: CALL_OW 266
45094: PUSH
45095: LD_INT 32
45097: PUSH
45098: LD_INT 31
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: IN
45105: AND
45106: PUSH
45107: LD_VAR 0 11
45111: PUSH
45112: LD_INT 1
45114: ARRAY
45115: PPUSH
45116: CALL_OW 313
45120: PUSH
45121: LD_INT 6
45123: EQUAL
45124: OR
45125: IFFALSE 45145
// f := Delete ( f , 1 ) ;
45127: LD_ADDR_VAR 0 11
45131: PUSH
45132: LD_VAR 0 11
45136: PPUSH
45137: LD_INT 1
45139: PPUSH
45140: CALL_OW 3
45144: ST_TO_ADDR
// if not f then
45145: LD_VAR 0 11
45149: NOT
45150: IFFALSE 45168
// begin x := x + 2 ;
45152: LD_ADDR_VAR 0 12
45156: PUSH
45157: LD_VAR 0 12
45161: PUSH
45162: LD_INT 2
45164: PLUS
45165: ST_TO_ADDR
// continue ;
45166: GO 44966
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45168: LD_VAR 0 11
45172: PUSH
45173: LD_INT 1
45175: ARRAY
45176: PPUSH
45177: CALL_OW 266
45181: PUSH
45182: LD_INT 5
45184: EQUAL
45185: IFFALSE 45259
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45187: LD_VAR 0 11
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PPUSH
45196: CALL_OW 313
45200: PUSH
45201: LD_INT 3
45203: LESS
45204: IFFALSE 45240
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45206: LD_INT 0
45208: PPUSH
45209: LD_INT 5
45211: PUSH
45212: LD_INT 8
45214: PUSH
45215: LD_INT 9
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: LIST
45222: PUSH
45223: LD_VAR 0 16
45227: ARRAY
45228: PPUSH
45229: LD_VAR 0 3
45233: PPUSH
45234: CALL_OW 380
45238: GO 45257
// PrepareHuman ( false , i , skill ) ;
45240: LD_INT 0
45242: PPUSH
45243: LD_VAR 0 7
45247: PPUSH
45248: LD_VAR 0 3
45252: PPUSH
45253: CALL_OW 380
// end else
45257: GO 45276
// PrepareHuman ( false , i , skill ) ;
45259: LD_INT 0
45261: PPUSH
45262: LD_VAR 0 7
45266: PPUSH
45267: LD_VAR 0 3
45271: PPUSH
45272: CALL_OW 380
// un := CreateHuman ;
45276: LD_ADDR_VAR 0 13
45280: PUSH
45281: CALL_OW 44
45285: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45286: LD_ADDR_VAR 0 6
45290: PUSH
45291: LD_VAR 0 6
45295: PPUSH
45296: LD_INT 1
45298: PPUSH
45299: LD_VAR 0 13
45303: PPUSH
45304: CALL_OW 2
45308: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45309: LD_VAR 0 13
45313: PPUSH
45314: LD_VAR 0 11
45318: PUSH
45319: LD_INT 1
45321: ARRAY
45322: PPUSH
45323: CALL_OW 52
// end ;
45327: GO 44966
45329: POP
45330: POP
// end ;
45331: GO 44385
45333: POP
45334: POP
// result := result ^ buildings ;
45335: LD_ADDR_VAR 0 6
45339: PUSH
45340: LD_VAR 0 6
45344: PUSH
45345: LD_VAR 0 17
45349: ADD
45350: ST_TO_ADDR
// end else
45351: GO 45494
// begin for i = 1 to personel do
45353: LD_ADDR_VAR 0 7
45357: PUSH
45358: DOUBLE
45359: LD_INT 1
45361: DEC
45362: ST_TO_ADDR
45363: LD_VAR 0 5
45367: PUSH
45368: FOR_TO
45369: IFFALSE 45492
// begin if i > 4 then
45371: LD_VAR 0 7
45375: PUSH
45376: LD_INT 4
45378: GREATER
45379: IFFALSE 45383
// break ;
45381: GO 45492
// x := personel [ i ] ;
45383: LD_ADDR_VAR 0 12
45387: PUSH
45388: LD_VAR 0 5
45392: PUSH
45393: LD_VAR 0 7
45397: ARRAY
45398: ST_TO_ADDR
// if x = - 1 then
45399: LD_VAR 0 12
45403: PUSH
45404: LD_INT 1
45406: NEG
45407: EQUAL
45408: IFFALSE 45412
// continue ;
45410: GO 45368
// PrepareHuman ( false , i , skill ) ;
45412: LD_INT 0
45414: PPUSH
45415: LD_VAR 0 7
45419: PPUSH
45420: LD_VAR 0 3
45424: PPUSH
45425: CALL_OW 380
// un := CreateHuman ;
45429: LD_ADDR_VAR 0 13
45433: PUSH
45434: CALL_OW 44
45438: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45439: LD_VAR 0 13
45443: PPUSH
45444: LD_VAR 0 1
45448: PPUSH
45449: CALL_OW 250
45453: PPUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: CALL_OW 251
45463: PPUSH
45464: LD_INT 10
45466: PPUSH
45467: LD_INT 0
45469: PPUSH
45470: CALL_OW 50
// result := result ^ un ;
45474: LD_ADDR_VAR 0 6
45478: PUSH
45479: LD_VAR 0 6
45483: PUSH
45484: LD_VAR 0 13
45488: ADD
45489: ST_TO_ADDR
// end ;
45490: GO 45368
45492: POP
45493: POP
// end ; end ;
45494: LD_VAR 0 6
45498: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45499: LD_INT 0
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
// result := false ;
45517: LD_ADDR_VAR 0 2
45521: PUSH
45522: LD_INT 0
45524: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45525: LD_VAR 0 1
45529: NOT
45530: PUSH
45531: LD_VAR 0 1
45535: PPUSH
45536: CALL_OW 266
45540: PUSH
45541: LD_INT 32
45543: PUSH
45544: LD_INT 33
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: IN
45551: NOT
45552: OR
45553: IFFALSE 45557
// exit ;
45555: GO 46790
// nat := GetNation ( tower ) ;
45557: LD_ADDR_VAR 0 11
45561: PUSH
45562: LD_VAR 0 1
45566: PPUSH
45567: CALL_OW 248
45571: ST_TO_ADDR
// side := GetSide ( tower ) ;
45572: LD_ADDR_VAR 0 15
45576: PUSH
45577: LD_VAR 0 1
45581: PPUSH
45582: CALL_OW 255
45586: ST_TO_ADDR
// x := GetX ( tower ) ;
45587: LD_ADDR_VAR 0 9
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 250
45601: ST_TO_ADDR
// y := GetY ( tower ) ;
45602: LD_ADDR_VAR 0 10
45606: PUSH
45607: LD_VAR 0 1
45611: PPUSH
45612: CALL_OW 251
45616: ST_TO_ADDR
// if not x or not y then
45617: LD_VAR 0 9
45621: NOT
45622: PUSH
45623: LD_VAR 0 10
45627: NOT
45628: OR
45629: IFFALSE 45633
// exit ;
45631: GO 46790
// weapon := 0 ;
45633: LD_ADDR_VAR 0 17
45637: PUSH
45638: LD_INT 0
45640: ST_TO_ADDR
// fac_list := [ ] ;
45641: LD_ADDR_VAR 0 16
45645: PUSH
45646: EMPTY
45647: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
45648: LD_ADDR_VAR 0 5
45652: PUSH
45653: LD_VAR 0 1
45657: PPUSH
45658: CALL_OW 274
45662: PPUSH
45663: CALL 43507 0 1
45667: PPUSH
45668: LD_INT 30
45670: PUSH
45671: LD_INT 3
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PPUSH
45678: CALL_OW 72
45682: ST_TO_ADDR
// if not factories then
45683: LD_VAR 0 5
45687: NOT
45688: IFFALSE 45692
// exit ;
45690: GO 46790
// for i in factories do
45692: LD_ADDR_VAR 0 7
45696: PUSH
45697: LD_VAR 0 5
45701: PUSH
45702: FOR_IN
45703: IFFALSE 45728
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45705: LD_ADDR_VAR 0 16
45709: PUSH
45710: LD_VAR 0 16
45714: PUSH
45715: LD_VAR 0 7
45719: PPUSH
45720: CALL_OW 478
45724: UNION
45725: ST_TO_ADDR
45726: GO 45702
45728: POP
45729: POP
// if not fac_list then
45730: LD_VAR 0 16
45734: NOT
45735: IFFALSE 45739
// exit ;
45737: GO 46790
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45739: LD_ADDR_VAR 0 4
45743: PUSH
45744: LD_INT 4
45746: PUSH
45747: LD_INT 5
45749: PUSH
45750: LD_INT 9
45752: PUSH
45753: LD_INT 10
45755: PUSH
45756: LD_INT 6
45758: PUSH
45759: LD_INT 7
45761: PUSH
45762: LD_INT 11
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 27
45776: PUSH
45777: LD_INT 28
45779: PUSH
45780: LD_INT 26
45782: PUSH
45783: LD_INT 30
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 43
45794: PUSH
45795: LD_INT 44
45797: PUSH
45798: LD_INT 46
45800: PUSH
45801: LD_INT 45
45803: PUSH
45804: LD_INT 47
45806: PUSH
45807: LD_INT 49
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: PUSH
45823: LD_VAR 0 11
45827: ARRAY
45828: ST_TO_ADDR
// for i in list do
45829: LD_ADDR_VAR 0 7
45833: PUSH
45834: LD_VAR 0 4
45838: PUSH
45839: FOR_IN
45840: IFFALSE 45873
// if not i in fac_list then
45842: LD_VAR 0 7
45846: PUSH
45847: LD_VAR 0 16
45851: IN
45852: NOT
45853: IFFALSE 45871
// list := list diff i ;
45855: LD_ADDR_VAR 0 4
45859: PUSH
45860: LD_VAR 0 4
45864: PUSH
45865: LD_VAR 0 7
45869: DIFF
45870: ST_TO_ADDR
45871: GO 45839
45873: POP
45874: POP
// if not list then
45875: LD_VAR 0 4
45879: NOT
45880: IFFALSE 45884
// exit ;
45882: GO 46790
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45884: LD_VAR 0 11
45888: PUSH
45889: LD_INT 3
45891: EQUAL
45892: PUSH
45893: LD_INT 49
45895: PUSH
45896: LD_VAR 0 4
45900: IN
45901: AND
45902: PUSH
45903: LD_INT 31
45905: PPUSH
45906: LD_VAR 0 15
45910: PPUSH
45911: CALL_OW 321
45915: PUSH
45916: LD_INT 2
45918: EQUAL
45919: AND
45920: IFFALSE 45980
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45922: LD_INT 22
45924: PUSH
45925: LD_VAR 0 15
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 35
45936: PUSH
45937: LD_INT 49
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 91
45946: PUSH
45947: LD_VAR 0 1
45951: PUSH
45952: LD_INT 10
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: PPUSH
45965: CALL_OW 69
45969: NOT
45970: IFFALSE 45980
// weapon := ru_time_lapser ;
45972: LD_ADDR_VAR 0 17
45976: PUSH
45977: LD_INT 49
45979: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45980: LD_VAR 0 11
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: IN
45995: PUSH
45996: LD_INT 11
45998: PUSH
45999: LD_VAR 0 4
46003: IN
46004: PUSH
46005: LD_INT 30
46007: PUSH
46008: LD_VAR 0 4
46012: IN
46013: OR
46014: AND
46015: PUSH
46016: LD_INT 6
46018: PPUSH
46019: LD_VAR 0 15
46023: PPUSH
46024: CALL_OW 321
46028: PUSH
46029: LD_INT 2
46031: EQUAL
46032: AND
46033: IFFALSE 46198
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46035: LD_INT 22
46037: PUSH
46038: LD_VAR 0 15
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 35
46052: PUSH
46053: LD_INT 11
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 35
46062: PUSH
46063: LD_INT 30
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 91
46077: PUSH
46078: LD_VAR 0 1
46082: PUSH
46083: LD_INT 18
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 69
46100: NOT
46101: PUSH
46102: LD_INT 22
46104: PUSH
46105: LD_VAR 0 15
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: LD_INT 30
46119: PUSH
46120: LD_INT 32
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 30
46129: PUSH
46130: LD_INT 33
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 91
46144: PUSH
46145: LD_VAR 0 1
46149: PUSH
46150: LD_INT 12
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: LIST
46162: PUSH
46163: EMPTY
46164: LIST
46165: PPUSH
46166: CALL_OW 69
46170: PUSH
46171: LD_INT 2
46173: GREATER
46174: AND
46175: IFFALSE 46198
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46177: LD_ADDR_VAR 0 17
46181: PUSH
46182: LD_INT 11
46184: PUSH
46185: LD_INT 30
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_VAR 0 11
46196: ARRAY
46197: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46198: LD_VAR 0 17
46202: NOT
46203: PUSH
46204: LD_INT 40
46206: PPUSH
46207: LD_VAR 0 15
46211: PPUSH
46212: CALL_OW 321
46216: PUSH
46217: LD_INT 2
46219: EQUAL
46220: AND
46221: PUSH
46222: LD_INT 7
46224: PUSH
46225: LD_VAR 0 4
46229: IN
46230: PUSH
46231: LD_INT 28
46233: PUSH
46234: LD_VAR 0 4
46238: IN
46239: OR
46240: PUSH
46241: LD_INT 45
46243: PUSH
46244: LD_VAR 0 4
46248: IN
46249: OR
46250: AND
46251: IFFALSE 46505
// begin hex := GetHexInfo ( x , y ) ;
46253: LD_ADDR_VAR 0 3
46257: PUSH
46258: LD_VAR 0 9
46262: PPUSH
46263: LD_VAR 0 10
46267: PPUSH
46268: CALL_OW 546
46272: ST_TO_ADDR
// if hex [ 1 ] then
46273: LD_VAR 0 3
46277: PUSH
46278: LD_INT 1
46280: ARRAY
46281: IFFALSE 46285
// exit ;
46283: GO 46790
// height := hex [ 2 ] ;
46285: LD_ADDR_VAR 0 14
46289: PUSH
46290: LD_VAR 0 3
46294: PUSH
46295: LD_INT 2
46297: ARRAY
46298: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46299: LD_ADDR_VAR 0 13
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: ST_TO_ADDR
// for i in tmp do
46322: LD_ADDR_VAR 0 7
46326: PUSH
46327: LD_VAR 0 13
46331: PUSH
46332: FOR_IN
46333: IFFALSE 46503
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46335: LD_ADDR_VAR 0 8
46339: PUSH
46340: LD_VAR 0 9
46344: PPUSH
46345: LD_VAR 0 7
46349: PPUSH
46350: LD_INT 5
46352: PPUSH
46353: CALL_OW 272
46357: PUSH
46358: LD_VAR 0 10
46362: PPUSH
46363: LD_VAR 0 7
46367: PPUSH
46368: LD_INT 5
46370: PPUSH
46371: CALL_OW 273
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46380: LD_VAR 0 8
46384: PUSH
46385: LD_INT 1
46387: ARRAY
46388: PPUSH
46389: LD_VAR 0 8
46393: PUSH
46394: LD_INT 2
46396: ARRAY
46397: PPUSH
46398: CALL_OW 488
46402: IFFALSE 46501
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46404: LD_ADDR_VAR 0 3
46408: PUSH
46409: LD_VAR 0 8
46413: PUSH
46414: LD_INT 1
46416: ARRAY
46417: PPUSH
46418: LD_VAR 0 8
46422: PUSH
46423: LD_INT 2
46425: ARRAY
46426: PPUSH
46427: CALL_OW 546
46431: ST_TO_ADDR
// if hex [ 1 ] then
46432: LD_VAR 0 3
46436: PUSH
46437: LD_INT 1
46439: ARRAY
46440: IFFALSE 46444
// continue ;
46442: GO 46332
// h := hex [ 2 ] ;
46444: LD_ADDR_VAR 0 12
46448: PUSH
46449: LD_VAR 0 3
46453: PUSH
46454: LD_INT 2
46456: ARRAY
46457: ST_TO_ADDR
// if h + 7 < height then
46458: LD_VAR 0 12
46462: PUSH
46463: LD_INT 7
46465: PLUS
46466: PUSH
46467: LD_VAR 0 14
46471: LESS
46472: IFFALSE 46501
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46474: LD_ADDR_VAR 0 17
46478: PUSH
46479: LD_INT 7
46481: PUSH
46482: LD_INT 28
46484: PUSH
46485: LD_INT 45
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: LD_VAR 0 11
46497: ARRAY
46498: ST_TO_ADDR
// break ;
46499: GO 46503
// end ; end ; end ;
46501: GO 46332
46503: POP
46504: POP
// end ; if not weapon then
46505: LD_VAR 0 17
46509: NOT
46510: IFFALSE 46672
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: LD_VAR 0 4
46521: PUSH
46522: LD_INT 11
46524: PUSH
46525: LD_INT 30
46527: PUSH
46528: LD_INT 49
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: DIFF
46536: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
46537: LD_ADDR_VAR 0 17
46541: PUSH
46542: LD_VAR 0 4
46546: PUSH
46547: LD_INT 1
46549: PPUSH
46550: LD_VAR 0 4
46554: PPUSH
46555: CALL_OW 12
46559: ARRAY
46560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
46561: LD_ADDR_VAR 0 13
46565: PUSH
46566: LD_INT 22
46568: PUSH
46569: LD_VAR 0 15
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 3
46580: PUSH
46581: LD_INT 35
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PPUSH
46599: CALL_OW 69
46603: ST_TO_ADDR
// for i in tmp do
46604: LD_ADDR_VAR 0 7
46608: PUSH
46609: LD_VAR 0 13
46613: PUSH
46614: FOR_IN
46615: IFFALSE 46640
// list := list diff GetBWeapon ( i ) ;
46617: LD_ADDR_VAR 0 4
46621: PUSH
46622: LD_VAR 0 4
46626: PUSH
46627: LD_VAR 0 7
46631: PPUSH
46632: CALL_OW 269
46636: DIFF
46637: ST_TO_ADDR
46638: GO 46614
46640: POP
46641: POP
// if list then
46642: LD_VAR 0 4
46646: IFFALSE 46672
// weapon := list [ rand ( 1 , list ) ] ;
46648: LD_ADDR_VAR 0 17
46652: PUSH
46653: LD_VAR 0 4
46657: PUSH
46658: LD_INT 1
46660: PPUSH
46661: LD_VAR 0 4
46665: PPUSH
46666: CALL_OW 12
46670: ARRAY
46671: ST_TO_ADDR
// end ; if weapon then
46672: LD_VAR 0 17
46676: IFFALSE 46790
// begin tmp := CostOfWeapon ( weapon ) ;
46678: LD_ADDR_VAR 0 13
46682: PUSH
46683: LD_VAR 0 17
46687: PPUSH
46688: CALL_OW 451
46692: ST_TO_ADDR
// j := GetBase ( tower ) ;
46693: LD_ADDR_VAR 0 8
46697: PUSH
46698: LD_VAR 0 1
46702: PPUSH
46703: CALL_OW 274
46707: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46708: LD_VAR 0 8
46712: PPUSH
46713: LD_INT 1
46715: PPUSH
46716: CALL_OW 275
46720: PUSH
46721: LD_VAR 0 13
46725: PUSH
46726: LD_INT 1
46728: ARRAY
46729: GREATEREQUAL
46730: PUSH
46731: LD_VAR 0 8
46735: PPUSH
46736: LD_INT 2
46738: PPUSH
46739: CALL_OW 275
46743: PUSH
46744: LD_VAR 0 13
46748: PUSH
46749: LD_INT 2
46751: ARRAY
46752: GREATEREQUAL
46753: AND
46754: PUSH
46755: LD_VAR 0 8
46759: PPUSH
46760: LD_INT 3
46762: PPUSH
46763: CALL_OW 275
46767: PUSH
46768: LD_VAR 0 13
46772: PUSH
46773: LD_INT 3
46775: ARRAY
46776: GREATEREQUAL
46777: AND
46778: IFFALSE 46790
// result := weapon ;
46780: LD_ADDR_VAR 0 2
46784: PUSH
46785: LD_VAR 0 17
46789: ST_TO_ADDR
// end ; end ;
46790: LD_VAR 0 2
46794: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46795: LD_INT 0
46797: PPUSH
46798: PPUSH
// result := true ;
46799: LD_ADDR_VAR 0 3
46803: PUSH
46804: LD_INT 1
46806: ST_TO_ADDR
// if array1 = array2 then
46807: LD_VAR 0 1
46811: PUSH
46812: LD_VAR 0 2
46816: EQUAL
46817: IFFALSE 46877
// begin for i = 1 to array1 do
46819: LD_ADDR_VAR 0 4
46823: PUSH
46824: DOUBLE
46825: LD_INT 1
46827: DEC
46828: ST_TO_ADDR
46829: LD_VAR 0 1
46833: PUSH
46834: FOR_TO
46835: IFFALSE 46873
// if array1 [ i ] <> array2 [ i ] then
46837: LD_VAR 0 1
46841: PUSH
46842: LD_VAR 0 4
46846: ARRAY
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_VAR 0 4
46857: ARRAY
46858: NONEQUAL
46859: IFFALSE 46871
// begin result := false ;
46861: LD_ADDR_VAR 0 3
46865: PUSH
46866: LD_INT 0
46868: ST_TO_ADDR
// break ;
46869: GO 46873
// end ;
46871: GO 46834
46873: POP
46874: POP
// end else
46875: GO 46885
// result := false ;
46877: LD_ADDR_VAR 0 3
46881: PUSH
46882: LD_INT 0
46884: ST_TO_ADDR
// end ;
46885: LD_VAR 0 3
46889: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46890: LD_INT 0
46892: PPUSH
46893: PPUSH
46894: PPUSH
// pom := GetBase ( fac ) ;
46895: LD_ADDR_VAR 0 5
46899: PUSH
46900: LD_VAR 0 1
46904: PPUSH
46905: CALL_OW 274
46909: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46910: LD_ADDR_VAR 0 4
46914: PUSH
46915: LD_VAR 0 2
46919: PUSH
46920: LD_INT 1
46922: ARRAY
46923: PPUSH
46924: LD_VAR 0 2
46928: PUSH
46929: LD_INT 2
46931: ARRAY
46932: PPUSH
46933: LD_VAR 0 2
46937: PUSH
46938: LD_INT 3
46940: ARRAY
46941: PPUSH
46942: LD_VAR 0 2
46946: PUSH
46947: LD_INT 4
46949: ARRAY
46950: PPUSH
46951: CALL_OW 449
46955: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
46956: LD_VAR 0 5
46960: PPUSH
46961: LD_INT 1
46963: PPUSH
46964: CALL_OW 275
46968: PUSH
46969: LD_VAR 0 4
46973: PUSH
46974: LD_INT 1
46976: ARRAY
46977: GREATEREQUAL
46978: PUSH
46979: LD_VAR 0 5
46983: PPUSH
46984: LD_INT 2
46986: PPUSH
46987: CALL_OW 275
46991: PUSH
46992: LD_VAR 0 4
46996: PUSH
46997: LD_INT 2
46999: ARRAY
47000: GREATEREQUAL
47001: AND
47002: PUSH
47003: LD_VAR 0 5
47007: PPUSH
47008: LD_INT 3
47010: PPUSH
47011: CALL_OW 275
47015: PUSH
47016: LD_VAR 0 4
47020: PUSH
47021: LD_INT 3
47023: ARRAY
47024: GREATEREQUAL
47025: AND
47026: IFFALSE 47038
// result := true else
47028: LD_ADDR_VAR 0 3
47032: PUSH
47033: LD_INT 1
47035: ST_TO_ADDR
47036: GO 47046
// result := false ;
47038: LD_ADDR_VAR 0 3
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// end ;
47046: LD_VAR 0 3
47050: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47051: LD_INT 0
47053: PPUSH
47054: PPUSH
47055: PPUSH
47056: PPUSH
// pom := GetBase ( building ) ;
47057: LD_ADDR_VAR 0 3
47061: PUSH
47062: LD_VAR 0 1
47066: PPUSH
47067: CALL_OW 274
47071: ST_TO_ADDR
// if not pom then
47072: LD_VAR 0 3
47076: NOT
47077: IFFALSE 47081
// exit ;
47079: GO 47251
// btype := GetBType ( building ) ;
47081: LD_ADDR_VAR 0 5
47085: PUSH
47086: LD_VAR 0 1
47090: PPUSH
47091: CALL_OW 266
47095: ST_TO_ADDR
// if btype = b_armoury then
47096: LD_VAR 0 5
47100: PUSH
47101: LD_INT 4
47103: EQUAL
47104: IFFALSE 47114
// btype := b_barracks ;
47106: LD_ADDR_VAR 0 5
47110: PUSH
47111: LD_INT 5
47113: ST_TO_ADDR
// if btype = b_depot then
47114: LD_VAR 0 5
47118: PUSH
47119: LD_INT 0
47121: EQUAL
47122: IFFALSE 47132
// btype := b_warehouse ;
47124: LD_ADDR_VAR 0 5
47128: PUSH
47129: LD_INT 1
47131: ST_TO_ADDR
// if btype = b_workshop then
47132: LD_VAR 0 5
47136: PUSH
47137: LD_INT 2
47139: EQUAL
47140: IFFALSE 47150
// btype := b_factory ;
47142: LD_ADDR_VAR 0 5
47146: PUSH
47147: LD_INT 3
47149: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47150: LD_ADDR_VAR 0 4
47154: PUSH
47155: LD_VAR 0 5
47159: PPUSH
47160: LD_VAR 0 1
47164: PPUSH
47165: CALL_OW 248
47169: PPUSH
47170: CALL_OW 450
47174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47175: LD_ADDR_VAR 0 2
47179: PUSH
47180: LD_VAR 0 3
47184: PPUSH
47185: LD_INT 1
47187: PPUSH
47188: CALL_OW 275
47192: PUSH
47193: LD_VAR 0 4
47197: PUSH
47198: LD_INT 1
47200: ARRAY
47201: GREATEREQUAL
47202: PUSH
47203: LD_VAR 0 3
47207: PPUSH
47208: LD_INT 2
47210: PPUSH
47211: CALL_OW 275
47215: PUSH
47216: LD_VAR 0 4
47220: PUSH
47221: LD_INT 2
47223: ARRAY
47224: GREATEREQUAL
47225: AND
47226: PUSH
47227: LD_VAR 0 3
47231: PPUSH
47232: LD_INT 3
47234: PPUSH
47235: CALL_OW 275
47239: PUSH
47240: LD_VAR 0 4
47244: PUSH
47245: LD_INT 3
47247: ARRAY
47248: GREATEREQUAL
47249: AND
47250: ST_TO_ADDR
// end ;
47251: LD_VAR 0 2
47255: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47256: LD_INT 0
47258: PPUSH
47259: PPUSH
47260: PPUSH
// pom := GetBase ( building ) ;
47261: LD_ADDR_VAR 0 4
47265: PUSH
47266: LD_VAR 0 1
47270: PPUSH
47271: CALL_OW 274
47275: ST_TO_ADDR
// if not pom then
47276: LD_VAR 0 4
47280: NOT
47281: IFFALSE 47285
// exit ;
47283: GO 47386
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47285: LD_ADDR_VAR 0 5
47289: PUSH
47290: LD_VAR 0 2
47294: PPUSH
47295: LD_VAR 0 1
47299: PPUSH
47300: CALL_OW 248
47304: PPUSH
47305: CALL_OW 450
47309: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: LD_VAR 0 4
47319: PPUSH
47320: LD_INT 1
47322: PPUSH
47323: CALL_OW 275
47327: PUSH
47328: LD_VAR 0 5
47332: PUSH
47333: LD_INT 1
47335: ARRAY
47336: GREATEREQUAL
47337: PUSH
47338: LD_VAR 0 4
47342: PPUSH
47343: LD_INT 2
47345: PPUSH
47346: CALL_OW 275
47350: PUSH
47351: LD_VAR 0 5
47355: PUSH
47356: LD_INT 2
47358: ARRAY
47359: GREATEREQUAL
47360: AND
47361: PUSH
47362: LD_VAR 0 4
47366: PPUSH
47367: LD_INT 3
47369: PPUSH
47370: CALL_OW 275
47374: PUSH
47375: LD_VAR 0 5
47379: PUSH
47380: LD_INT 3
47382: ARRAY
47383: GREATEREQUAL
47384: AND
47385: ST_TO_ADDR
// end ;
47386: LD_VAR 0 3
47390: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes ; begin
47391: LD_INT 0
47393: PPUSH
47394: PPUSH
47395: PPUSH
47396: PPUSH
47397: PPUSH
47398: PPUSH
47399: PPUSH
// if not base or not btype or not x or not y then
47400: LD_VAR 0 1
47404: NOT
47405: PUSH
47406: LD_VAR 0 2
47410: NOT
47411: OR
47412: PUSH
47413: LD_VAR 0 3
47417: NOT
47418: OR
47419: PUSH
47420: LD_VAR 0 4
47424: NOT
47425: OR
47426: IFFALSE 47430
// exit ;
47428: GO 47702
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47430: LD_ADDR_VAR 0 12
47434: PUSH
47435: LD_VAR 0 2
47439: PPUSH
47440: LD_VAR 0 3
47444: PPUSH
47445: LD_VAR 0 4
47449: PPUSH
47450: LD_VAR 0 5
47454: PPUSH
47455: LD_VAR 0 1
47459: PUSH
47460: LD_INT 1
47462: ARRAY
47463: PPUSH
47464: CALL_OW 248
47468: PPUSH
47469: LD_INT 0
47471: PPUSH
47472: CALL 48485 0 6
47476: ST_TO_ADDR
// if not hexes then
47477: LD_VAR 0 12
47481: NOT
47482: IFFALSE 47486
// exit ;
47484: GO 47702
// for i = 1 to hexes do
47486: LD_ADDR_VAR 0 7
47490: PUSH
47491: DOUBLE
47492: LD_INT 1
47494: DEC
47495: ST_TO_ADDR
47496: LD_VAR 0 12
47500: PUSH
47501: FOR_TO
47502: IFFALSE 47700
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47504: LD_ADDR_VAR 0 11
47508: PUSH
47509: LD_VAR 0 12
47513: PUSH
47514: LD_VAR 0 7
47518: ARRAY
47519: PUSH
47520: LD_INT 1
47522: ARRAY
47523: PPUSH
47524: LD_VAR 0 12
47528: PUSH
47529: LD_VAR 0 7
47533: ARRAY
47534: PUSH
47535: LD_INT 2
47537: ARRAY
47538: PPUSH
47539: CALL_OW 428
47543: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
47544: LD_VAR 0 11
47548: NOT
47549: PUSH
47550: LD_VAR 0 11
47554: PPUSH
47555: CALL_OW 247
47559: PUSH
47560: LD_INT 3
47562: EQUAL
47563: OR
47564: IFFALSE 47568
// continue ;
47566: GO 47501
// for j = 0 to 5 do
47568: LD_ADDR_VAR 0 8
47572: PUSH
47573: DOUBLE
47574: LD_INT 0
47576: DEC
47577: ST_TO_ADDR
47578: LD_INT 5
47580: PUSH
47581: FOR_TO
47582: IFFALSE 47696
// begin _x := ShiftX ( GetX ( tmp ) , j , 3 ) ;
47584: LD_ADDR_VAR 0 9
47588: PUSH
47589: LD_VAR 0 11
47593: PPUSH
47594: CALL_OW 250
47598: PPUSH
47599: LD_VAR 0 8
47603: PPUSH
47604: LD_INT 3
47606: PPUSH
47607: CALL_OW 272
47611: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 3 ) ;
47612: LD_ADDR_VAR 0 10
47616: PUSH
47617: LD_VAR 0 11
47621: PPUSH
47622: CALL_OW 251
47626: PPUSH
47627: LD_VAR 0 8
47631: PPUSH
47632: LD_INT 3
47634: PPUSH
47635: CALL_OW 273
47639: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47640: LD_VAR 0 9
47644: PPUSH
47645: LD_VAR 0 10
47649: PPUSH
47650: CALL_OW 488
47654: PUSH
47655: LD_VAR 0 9
47659: PPUSH
47660: LD_VAR 0 10
47664: PPUSH
47665: CALL_OW 428
47669: NOT
47670: AND
47671: IFFALSE 47694
// begin ComMoveXY ( tmp , _x , _y ) ;
47673: LD_VAR 0 11
47677: PPUSH
47678: LD_VAR 0 9
47682: PPUSH
47683: LD_VAR 0 10
47687: PPUSH
47688: CALL_OW 111
// break ;
47692: GO 47696
// end ; end ;
47694: GO 47581
47696: POP
47697: POP
// end ;
47698: GO 47501
47700: POP
47701: POP
// end ;
47702: LD_VAR 0 6
47706: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
47717: PPUSH
// result := false ;
47718: LD_ADDR_VAR 0 6
47722: PUSH
47723: LD_INT 0
47725: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47726: LD_VAR 0 1
47730: NOT
47731: PUSH
47732: LD_VAR 0 1
47736: PPUSH
47737: CALL_OW 266
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: IN
47752: NOT
47753: OR
47754: PUSH
47755: LD_VAR 0 2
47759: NOT
47760: OR
47761: PUSH
47762: LD_VAR 0 5
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: LD_INT 3
47778: PUSH
47779: LD_INT 4
47781: PUSH
47782: LD_INT 5
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: IN
47793: NOT
47794: OR
47795: PUSH
47796: LD_VAR 0 3
47800: PPUSH
47801: LD_VAR 0 4
47805: PPUSH
47806: CALL_OW 488
47810: NOT
47811: OR
47812: IFFALSE 47816
// exit ;
47814: GO 48480
// pom := GetBase ( bdepot ) ;
47816: LD_ADDR_VAR 0 9
47820: PUSH
47821: LD_VAR 0 1
47825: PPUSH
47826: CALL_OW 274
47830: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
47831: LD_ADDR_VAR 0 10
47835: PUSH
47836: LD_VAR 0 2
47840: PPUSH
47841: LD_VAR 0 1
47845: PPUSH
47846: CALL_OW 248
47850: PPUSH
47851: CALL_OW 450
47855: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47856: LD_VAR 0 9
47860: PPUSH
47861: LD_INT 1
47863: PPUSH
47864: CALL_OW 275
47868: PUSH
47869: LD_VAR 0 10
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: GREATEREQUAL
47878: PUSH
47879: LD_VAR 0 9
47883: PPUSH
47884: LD_INT 2
47886: PPUSH
47887: CALL_OW 275
47891: PUSH
47892: LD_VAR 0 10
47896: PUSH
47897: LD_INT 2
47899: ARRAY
47900: GREATEREQUAL
47901: AND
47902: PUSH
47903: LD_VAR 0 9
47907: PPUSH
47908: LD_INT 3
47910: PPUSH
47911: CALL_OW 275
47915: PUSH
47916: LD_VAR 0 10
47920: PUSH
47921: LD_INT 3
47923: ARRAY
47924: GREATEREQUAL
47925: AND
47926: NOT
47927: IFFALSE 47931
// exit ;
47929: GO 48480
// if GetBType ( bdepot ) = b_depot then
47931: LD_VAR 0 1
47935: PPUSH
47936: CALL_OW 266
47940: PUSH
47941: LD_INT 0
47943: EQUAL
47944: IFFALSE 47956
// dist := 28 else
47946: LD_ADDR_VAR 0 13
47950: PUSH
47951: LD_INT 28
47953: ST_TO_ADDR
47954: GO 47964
// dist := 36 ;
47956: LD_ADDR_VAR 0 13
47960: PUSH
47961: LD_INT 36
47963: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
47964: LD_VAR 0 1
47968: PPUSH
47969: LD_VAR 0 3
47973: PPUSH
47974: LD_VAR 0 4
47978: PPUSH
47979: CALL_OW 297
47983: PUSH
47984: LD_VAR 0 13
47988: GREATER
47989: IFFALSE 47993
// exit ;
47991: GO 48480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
47993: LD_ADDR_VAR 0 11
47997: PUSH
47998: LD_VAR 0 2
48002: PPUSH
48003: LD_VAR 0 3
48007: PPUSH
48008: LD_VAR 0 4
48012: PPUSH
48013: LD_VAR 0 5
48017: PPUSH
48018: LD_VAR 0 1
48022: PPUSH
48023: CALL_OW 248
48027: PPUSH
48028: LD_INT 0
48030: PPUSH
48031: CALL 48485 0 6
48035: ST_TO_ADDR
// if not hexes then
48036: LD_VAR 0 11
48040: NOT
48041: IFFALSE 48045
// exit ;
48043: GO 48480
// hex := GetHexInfo ( x , y ) ;
48045: LD_ADDR_VAR 0 14
48049: PUSH
48050: LD_VAR 0 3
48054: PPUSH
48055: LD_VAR 0 4
48059: PPUSH
48060: CALL_OW 546
48064: ST_TO_ADDR
// if hex [ 1 ] then
48065: LD_VAR 0 14
48069: PUSH
48070: LD_INT 1
48072: ARRAY
48073: IFFALSE 48077
// exit ;
48075: GO 48480
// height := hex [ 2 ] ;
48077: LD_ADDR_VAR 0 12
48081: PUSH
48082: LD_VAR 0 14
48086: PUSH
48087: LD_INT 2
48089: ARRAY
48090: ST_TO_ADDR
// for i = 1 to hexes do
48091: LD_ADDR_VAR 0 7
48095: PUSH
48096: DOUBLE
48097: LD_INT 1
48099: DEC
48100: ST_TO_ADDR
48101: LD_VAR 0 11
48105: PUSH
48106: FOR_TO
48107: IFFALSE 48435
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48109: LD_VAR 0 11
48113: PUSH
48114: LD_VAR 0 7
48118: ARRAY
48119: PUSH
48120: LD_INT 1
48122: ARRAY
48123: PPUSH
48124: LD_VAR 0 11
48128: PUSH
48129: LD_VAR 0 7
48133: ARRAY
48134: PUSH
48135: LD_INT 2
48137: ARRAY
48138: PPUSH
48139: CALL_OW 488
48143: NOT
48144: IFFALSE 48148
// continue ;
48146: GO 48106
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48148: LD_ADDR_VAR 0 8
48152: PUSH
48153: LD_VAR 0 11
48157: PUSH
48158: LD_VAR 0 7
48162: ARRAY
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: PPUSH
48168: LD_VAR 0 11
48172: PUSH
48173: LD_VAR 0 7
48177: ARRAY
48178: PUSH
48179: LD_INT 2
48181: ARRAY
48182: PPUSH
48183: CALL_OW 546
48187: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48188: LD_VAR 0 8
48192: PUSH
48193: LD_INT 1
48195: ARRAY
48196: PUSH
48197: LD_VAR 0 8
48201: PUSH
48202: LD_INT 2
48204: ARRAY
48205: PUSH
48206: LD_VAR 0 12
48210: PUSH
48211: LD_INT 2
48213: PLUS
48214: GREATER
48215: OR
48216: PUSH
48217: LD_VAR 0 8
48221: PUSH
48222: LD_INT 2
48224: ARRAY
48225: PUSH
48226: LD_VAR 0 12
48230: PUSH
48231: LD_INT 2
48233: MINUS
48234: LESS
48235: OR
48236: PUSH
48237: LD_VAR 0 8
48241: PUSH
48242: LD_INT 3
48244: ARRAY
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 8
48251: PUSH
48252: LD_INT 9
48254: PUSH
48255: LD_INT 10
48257: PUSH
48258: LD_INT 11
48260: PUSH
48261: LD_INT 12
48263: PUSH
48264: LD_INT 13
48266: PUSH
48267: LD_INT 16
48269: PUSH
48270: LD_INT 17
48272: PUSH
48273: LD_INT 18
48275: PUSH
48276: LD_INT 19
48278: PUSH
48279: LD_INT 20
48281: PUSH
48282: LD_INT 21
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: LIST
48299: IN
48300: NOT
48301: OR
48302: PUSH
48303: LD_VAR 0 8
48307: PUSH
48308: LD_INT 5
48310: ARRAY
48311: NOT
48312: OR
48313: PUSH
48314: LD_VAR 0 8
48318: PUSH
48319: LD_INT 6
48321: ARRAY
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: LD_INT 7
48331: PUSH
48332: LD_INT 9
48334: PUSH
48335: LD_INT 10
48337: PUSH
48338: LD_INT 11
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: IN
48349: NOT
48350: OR
48351: PUSH
48352: LD_VAR 0 11
48356: PUSH
48357: LD_VAR 0 7
48361: ARRAY
48362: PUSH
48363: LD_INT 1
48365: ARRAY
48366: PPUSH
48367: LD_VAR 0 11
48371: PUSH
48372: LD_VAR 0 7
48376: ARRAY
48377: PUSH
48378: LD_INT 2
48380: ARRAY
48381: PPUSH
48382: CALL_OW 428
48386: PUSH
48387: LD_INT 0
48389: GREATER
48390: OR
48391: PUSH
48392: LD_VAR 0 11
48396: PUSH
48397: LD_VAR 0 7
48401: ARRAY
48402: PUSH
48403: LD_INT 1
48405: ARRAY
48406: PPUSH
48407: LD_VAR 0 11
48411: PUSH
48412: LD_VAR 0 7
48416: ARRAY
48417: PUSH
48418: LD_INT 2
48420: ARRAY
48421: PPUSH
48422: CALL_OW 351
48426: OR
48427: IFFALSE 48433
// exit ;
48429: POP
48430: POP
48431: GO 48480
// end ;
48433: GO 48106
48435: POP
48436: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 255
48446: PPUSH
48447: LD_VAR 0 3
48451: PPUSH
48452: LD_VAR 0 4
48456: PPUSH
48457: LD_INT 20
48459: PPUSH
48460: CALL 41691 0 4
48464: PUSH
48465: LD_INT 4
48467: ARRAY
48468: IFFALSE 48472
// exit ;
48470: GO 48480
// result := true ;
48472: LD_ADDR_VAR 0 6
48476: PUSH
48477: LD_INT 1
48479: ST_TO_ADDR
// end ;
48480: LD_VAR 0 6
48484: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
48485: LD_INT 0
48487: PPUSH
48488: PPUSH
48489: PPUSH
48490: PPUSH
48491: PPUSH
48492: PPUSH
48493: PPUSH
48494: PPUSH
48495: PPUSH
48496: PPUSH
48497: PPUSH
48498: PPUSH
48499: PPUSH
48500: PPUSH
48501: PPUSH
48502: PPUSH
48503: PPUSH
48504: PPUSH
48505: PPUSH
48506: PPUSH
48507: PPUSH
48508: PPUSH
48509: PPUSH
48510: PPUSH
48511: PPUSH
48512: PPUSH
48513: PPUSH
48514: PPUSH
48515: PPUSH
48516: PPUSH
48517: PPUSH
48518: PPUSH
48519: PPUSH
48520: PPUSH
48521: PPUSH
48522: PPUSH
48523: PPUSH
48524: PPUSH
48525: PPUSH
48526: PPUSH
48527: PPUSH
48528: PPUSH
48529: PPUSH
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
48534: PPUSH
48535: PPUSH
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
48543: PPUSH
48544: PPUSH
// result = [ ] ;
48545: LD_ADDR_VAR 0 7
48549: PUSH
48550: EMPTY
48551: ST_TO_ADDR
// temp_list = [ ] ;
48552: LD_ADDR_VAR 0 9
48556: PUSH
48557: EMPTY
48558: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48559: LD_VAR 0 4
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: LD_INT 2
48572: PUSH
48573: LD_INT 3
48575: PUSH
48576: LD_INT 4
48578: PUSH
48579: LD_INT 5
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: IN
48590: NOT
48591: PUSH
48592: LD_VAR 0 1
48596: PUSH
48597: LD_INT 0
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: IN
48607: PUSH
48608: LD_VAR 0 5
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: LD_INT 3
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: IN
48627: NOT
48628: AND
48629: OR
48630: IFFALSE 48634
// exit ;
48632: GO 67019
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48634: LD_VAR 0 1
48638: PUSH
48639: LD_INT 6
48641: PUSH
48642: LD_INT 7
48644: PUSH
48645: LD_INT 8
48647: PUSH
48648: LD_INT 13
48650: PUSH
48651: LD_INT 12
48653: PUSH
48654: LD_INT 15
48656: PUSH
48657: LD_INT 11
48659: PUSH
48660: LD_INT 14
48662: PUSH
48663: LD_INT 10
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: IN
48677: IFFALSE 48687
// btype = b_lab ;
48679: LD_ADDR_VAR 0 1
48683: PUSH
48684: LD_INT 6
48686: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48687: LD_VAR 0 6
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: IN
48706: NOT
48707: PUSH
48708: LD_VAR 0 1
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 6
48727: PUSH
48728: LD_INT 36
48730: PUSH
48731: LD_INT 4
48733: PUSH
48734: LD_INT 5
48736: PUSH
48737: LD_INT 31
48739: PUSH
48740: LD_INT 32
48742: PUSH
48743: LD_INT 33
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: IN
48759: NOT
48760: PUSH
48761: LD_VAR 0 6
48765: PUSH
48766: LD_INT 1
48768: EQUAL
48769: AND
48770: OR
48771: PUSH
48772: LD_VAR 0 1
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: IN
48787: NOT
48788: PUSH
48789: LD_VAR 0 6
48793: PUSH
48794: LD_INT 2
48796: EQUAL
48797: AND
48798: OR
48799: IFFALSE 48809
// mode = 0 ;
48801: LD_ADDR_VAR 0 6
48805: PUSH
48806: LD_INT 0
48808: ST_TO_ADDR
// case mode of 0 :
48809: LD_VAR 0 6
48813: PUSH
48814: LD_INT 0
48816: DOUBLE
48817: EQUAL
48818: IFTRUE 48822
48820: GO 60275
48822: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48823: LD_ADDR_VAR 0 11
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 3
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: LD_INT 3
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49016: LD_ADDR_VAR 0 12
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 1
49100: NEG
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 3
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49212: LD_ADDR_VAR 0 13
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 2
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 3
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49411: LD_ADDR_VAR 0 14
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: NEG
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 1
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: PUSH
49527: LD_INT 2
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 2
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 3
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 2
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49607: LD_ADDR_VAR 0 15
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 3
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49800: LD_ADDR_VAR 0 16
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: LD_INT 2
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: PUSH
49958: LD_INT 3
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 2
49967: PUSH
49968: LD_INT 3
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49993: LD_ADDR_VAR 0 17
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 0
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: NEG
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 2
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50223: LD_ADDR_VAR 0 18
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: LD_INT 1
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 1
50281: NEG
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 2
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50453: LD_ADDR_VAR 0 19
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 1
50534: NEG
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 2
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 2
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 2
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 2
50629: NEG
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 2
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50683: LD_ADDR_VAR 0 20
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 2
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 2
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50913: LD_ADDR_VAR 0 21
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 2
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 0
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51143: LD_ADDR_VAR 0 22
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 0
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 1
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 2
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 2
51319: NEG
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51373: LD_ADDR_VAR 0 23
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 0
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: LD_INT 2
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: NEG
51585: PUSH
51586: LD_INT 3
51588: NEG
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 3
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51653: LD_ADDR_VAR 0 24
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 0
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 2
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 2
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 2
51840: NEG
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51929: LD_ADDR_VAR 0 25
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: NEG
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 2
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 2
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52203: LD_ADDR_VAR 0 26
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 0
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: LD_INT 1
52310: NEG
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 2
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 0
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: LD_INT 2
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52479: LD_ADDR_VAR 0 27
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: LD_INT 1
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 2
52614: PUSH
52615: LD_INT 2
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 2
52655: NEG
52656: PUSH
52657: LD_INT 0
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 2
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52759: LD_ADDR_VAR 0 28
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: LD_INT 1
52779: NEG
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 0
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 2
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: PUSH
52905: LD_INT 2
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 2
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 3
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 3
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 3
53006: NEG
53007: PUSH
53008: LD_INT 2
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53041: LD_ADDR_VAR 0 29
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 1
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 1
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 1
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 2
53231: NEG
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53320: LD_ADDR_VAR 0 30
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 3
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: LD_INT 3
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53598: LD_ADDR_VAR 0 31
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: LD_INT 2
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 2
53775: NEG
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: NEG
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 2
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53876: LD_ADDR_VAR 0 32
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 0
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: LD_INT 2
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: LD_INT 1
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: NEG
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 3
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54154: LD_ADDR_VAR 0 33
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 0
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: LD_INT 1
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 0
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 2
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: NEG
54345: PUSH
54346: LD_INT 3
54348: NEG
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: LD_INT 1
54359: NEG
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: LD_INT 2
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54433: LD_ADDR_VAR 0 34
54437: PUSH
54438: LD_INT 0
54440: PUSH
54441: LD_INT 0
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: LD_INT 1
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 1
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 2
54589: NEG
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 2
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: NEG
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 3
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: PUSH
54648: LD_INT 2
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54713: LD_ADDR_VAR 0 35
54717: PUSH
54718: LD_INT 0
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 2
54804: NEG
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54825: LD_ADDR_VAR 0 36
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54937: LD_ADDR_VAR 0 37
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55049: LD_ADDR_VAR 0 38
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 1
55069: NEG
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: NEG
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55161: LD_ADDR_VAR 0 39
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 0
55178: PUSH
55179: LD_INT 1
55181: NEG
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55273: LD_ADDR_VAR 0 40
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 1
55331: NEG
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 1
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55385: LD_ADDR_VAR 0 41
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 1
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 1
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 2
55540: NEG
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 2
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 3
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 3
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 3
55694: NEG
55695: PUSH
55696: LD_INT 3
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55735: LD_ADDR_VAR 0 42
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 2
55850: PUSH
55851: LD_INT 1
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 3
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: LD_INT 3
55952: NEG
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 1
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 3
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 3
56032: NEG
56033: PUSH
56034: LD_INT 2
56036: NEG
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: LD_INT 3
56044: NEG
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56085: LD_ADDR_VAR 0 43
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 1
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 1
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 3
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 0
56286: PUSH
56287: LD_INT 3
56289: NEG
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: LD_INT 2
56300: NEG
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 3
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 3
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 2
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 3
56392: NEG
56393: PUSH
56394: LD_INT 1
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56433: LD_ADDR_VAR 0 44
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 1
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: NEG
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 1
56514: NEG
56515: PUSH
56516: LD_INT 2
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 1
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 2
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: NEG
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 2
56588: NEG
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 2
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: LD_INT 2
56615: NEG
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: LD_INT 3
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: LD_INT 1
56638: NEG
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: LD_INT 0
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 3
56656: PUSH
56657: LD_INT 1
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 3
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: PUSH
56677: LD_INT 3
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 3
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: NEG
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: NEG
56719: PUSH
56720: LD_INT 1
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: NEG
56731: PUSH
56732: LD_INT 2
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56783: LD_ADDR_VAR 0 45
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 1
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 2
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: NEG
56950: PUSH
56951: LD_INT 1
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: LD_INT 3
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 3
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 3
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 3
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 3
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 3
57080: NEG
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 3
57092: NEG
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57133: LD_ADDR_VAR 0 46
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: LD_INT 1
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: NEG
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 2
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: LD_INT 2
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: LD_INT 2
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: LD_INT 1
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: LD_INT 3
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 3
57337: NEG
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: LD_INT 0
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 2
57418: NEG
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 3
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57481: LD_ADDR_VAR 0 47
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 1
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 2
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 2
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 2
57596: NEG
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57632: LD_ADDR_VAR 0 48
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 1
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: LD_INT 1
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: LD_INT 1
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: LD_INT 2
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 0
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 2
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 2
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57779: LD_ADDR_VAR 0 49
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: NEG
57849: PUSH
57850: LD_INT 1
57852: NEG
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 2
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57923: LD_ADDR_VAR 0 50
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 1
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 2
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 1
58044: NEG
58045: PUSH
58046: LD_INT 1
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58067: LD_ADDR_VAR 0 51
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: LD_INT 0
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 1
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 1
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58214: LD_ADDR_VAR 0 52
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 2
58329: NEG
58330: PUSH
58331: LD_INT 1
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58365: LD_ADDR_VAR 0 53
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: NEG
58447: PUSH
58448: LD_INT 2
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 2
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 2
58480: PUSH
58481: LD_INT 0
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: LD_INT 2
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 2
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 2
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58595: LD_ADDR_VAR 0 54
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: LD_INT 2
58691: NEG
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 2
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 2
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: LD_INT 2
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 2
58771: NEG
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: NEG
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58825: LD_ADDR_VAR 0 55
58829: PUSH
58830: LD_INT 0
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 1
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: LD_INT 1
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 1
58894: NEG
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: LD_INT 2
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 0
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 2
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: PUSH
58961: LD_INT 2
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: LD_INT 2
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: LD_INT 2
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 2
59001: NEG
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59055: LD_ADDR_VAR 0 56
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 1
59113: NEG
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 2
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 2
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: LD_INT 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 2
59231: NEG
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59285: LD_ADDR_VAR 0 57
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: LD_INT 0
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 1
59354: NEG
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 2
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 0
59378: PUSH
59379: LD_INT 2
59381: NEG
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 1
59430: PUSH
59431: LD_INT 2
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 2
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 1
59450: NEG
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 2
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 2
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59515: LD_ADDR_VAR 0 58
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: LD_INT 0
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: LD_INT 1
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: LD_INT 1
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 2
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 2
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 2
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 2
59650: PUSH
59651: LD_INT 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 2
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 2
59691: NEG
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 2
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: LD_INT 2
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59745: LD_ADDR_VAR 0 59
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59833: LD_ADDR_VAR 0 60
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59921: LD_ADDR_VAR 0 61
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 0
59969: PUSH
59970: LD_INT 1
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60009: LD_ADDR_VAR 0 62
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 1
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 1
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60097: LD_ADDR_VAR 0 63
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: LD_INT 0
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: LD_INT 1
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 1
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 1
60155: NEG
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60185: LD_ADDR_VAR 0 64
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: LD_INT 0
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: ST_TO_ADDR
// end ; 1 :
60273: GO 66170
60275: LD_INT 1
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60283
60281: GO 62906
60283: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60284: LD_ADDR_VAR 0 11
60288: PUSH
60289: LD_INT 1
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 3
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: LD_INT 2
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60328: LD_ADDR_VAR 0 12
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60369: LD_ADDR_VAR 0 13
60373: PUSH
60374: LD_INT 3
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 3
60386: PUSH
60387: LD_INT 3
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: PUSH
60397: LD_INT 3
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: LIST
60408: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60409: LD_ADDR_VAR 0 14
60413: PUSH
60414: LD_INT 1
60416: PUSH
60417: LD_INT 3
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 1
60436: NEG
60437: PUSH
60438: LD_INT 2
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: LIST
60449: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60450: LD_ADDR_VAR 0 15
60454: PUSH
60455: LD_INT 2
60457: NEG
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: NEG
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: LIST
60493: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60494: LD_ADDR_VAR 0 16
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: LD_INT 2
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60540: LD_ADDR_VAR 0 17
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 3
60562: NEG
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 1
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: LIST
60583: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60584: LD_ADDR_VAR 0 18
60588: PUSH
60589: LD_INT 2
60591: PUSH
60592: LD_INT 1
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 3
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 3
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60625: LD_ADDR_VAR 0 19
60629: PUSH
60630: LD_INT 3
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: LD_INT 3
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: LIST
60664: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60665: LD_ADDR_VAR 0 20
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60706: LD_ADDR_VAR 0 21
60710: PUSH
60711: LD_INT 2
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 3
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60750: LD_ADDR_VAR 0 22
60754: PUSH
60755: LD_INT 2
60757: NEG
60758: PUSH
60759: LD_INT 3
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 3
60769: NEG
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60796: LD_ADDR_VAR 0 23
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 3
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: LD_INT 4
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 3
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: LIST
60839: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60840: LD_ADDR_VAR 0 24
60844: PUSH
60845: LD_INT 3
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60881: LD_ADDR_VAR 0 25
60885: PUSH
60886: LD_INT 3
60888: PUSH
60889: LD_INT 3
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60921: LD_ADDR_VAR 0 26
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: LIST
60961: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60962: LD_ADDR_VAR 0 27
60966: PUSH
60967: LD_INT 3
60969: NEG
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 3
60980: NEG
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 4
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61006: LD_ADDR_VAR 0 28
61010: PUSH
61011: LD_INT 3
61013: NEG
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 4
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 4
61037: NEG
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61052: LD_ADDR_VAR 0 29
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 3
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 3
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 4
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 4
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 3
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 5
61131: NEG
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 5
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 1
61150: PUSH
61151: LD_INT 4
61153: NEG
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 6
61165: NEG
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 6
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 5
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61207: LD_ADDR_VAR 0 30
61211: PUSH
61212: LD_INT 2
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 4
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: LD_INT 1
61279: NEG
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 5
61287: PUSH
61288: LD_INT 0
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 5
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 6
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 6
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61350: LD_ADDR_VAR 0 31
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 4
61387: PUSH
61388: LD_INT 3
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 4
61397: PUSH
61398: LD_INT 4
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 3
61407: PUSH
61408: LD_INT 4
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 5
61417: PUSH
61418: LD_INT 4
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 5
61427: PUSH
61428: LD_INT 5
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: PUSH
61438: LD_INT 5
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 6
61447: PUSH
61448: LD_INT 5
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 6
61457: PUSH
61458: LD_INT 6
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 5
61467: PUSH
61468: LD_INT 6
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61489: LD_ADDR_VAR 0 32
61493: PUSH
61494: LD_INT 1
61496: PUSH
61497: LD_INT 3
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: LD_INT 4
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 0
61537: PUSH
61538: LD_INT 4
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: LD_INT 5
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 0
61568: PUSH
61569: LD_INT 5
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: LD_INT 4
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: LD_INT 6
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 6
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: LD_INT 5
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61632: LD_ADDR_VAR 0 33
61636: PUSH
61637: LD_INT 2
61639: NEG
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 3
61650: NEG
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 3
61661: NEG
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: NEG
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 4
61695: NEG
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 4
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 5
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 5
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 5
61741: NEG
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 6
61752: NEG
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 6
61763: NEG
61764: PUSH
61765: LD_INT 1
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61787: LD_ADDR_VAR 0 34
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: LD_INT 3
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: LD_INT 2
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 3
61830: NEG
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 4
61842: NEG
61843: PUSH
61844: LD_INT 3
61846: NEG
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 4
61854: NEG
61855: PUSH
61856: LD_INT 4
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 4
61866: NEG
61867: PUSH
61868: LD_INT 5
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 5
61878: NEG
61879: PUSH
61880: LD_INT 4
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 5
61890: NEG
61891: PUSH
61892: LD_INT 5
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 5
61902: NEG
61903: PUSH
61904: LD_INT 6
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 6
61914: NEG
61915: PUSH
61916: LD_INT 5
61918: NEG
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: PUSH
61924: LD_INT 6
61926: NEG
61927: PUSH
61928: LD_INT 6
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61950: LD_ADDR_VAR 0 41
61954: PUSH
61955: LD_INT 0
61957: PUSH
61958: LD_INT 2
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 3
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61994: LD_ADDR_VAR 0 42
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 1
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: LD_INT 1
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62035: LD_ADDR_VAR 0 43
62039: PUSH
62040: LD_INT 2
62042: PUSH
62043: LD_INT 2
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: PUSH
62050: LD_INT 3
62052: PUSH
62053: LD_INT 2
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: LIST
62074: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62075: LD_ADDR_VAR 0 44
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: LD_INT 3
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62116: LD_ADDR_VAR 0 45
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 2
62134: NEG
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: NEG
62146: PUSH
62147: LD_INT 1
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62160: LD_ADDR_VAR 0 46
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: LD_INT 2
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 2
62179: NEG
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62206: LD_ADDR_VAR 0 47
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62239: LD_ADDR_VAR 0 48
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: LD_INT 2
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 2
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62270: LD_ADDR_VAR 0 49
62274: PUSH
62275: LD_INT 3
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: PUSH
62285: LD_INT 3
62287: PUSH
62288: LD_INT 2
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62299: LD_ADDR_VAR 0 50
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 3
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 1
62316: PUSH
62317: LD_INT 3
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62328: LD_ADDR_VAR 0 51
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62359: LD_ADDR_VAR 0 52
62363: PUSH
62364: LD_INT 3
62366: NEG
62367: PUSH
62368: LD_INT 1
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 2
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62392: LD_ADDR_VAR 0 53
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: LD_INT 3
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 3
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: LD_INT 2
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: LIST
62435: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62436: LD_ADDR_VAR 0 54
62440: PUSH
62441: LD_INT 2
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 3
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: LIST
62476: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62477: LD_ADDR_VAR 0 55
62481: PUSH
62482: LD_INT 3
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 3
62494: PUSH
62495: LD_INT 3
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 3
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: LIST
62516: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62517: LD_ADDR_VAR 0 56
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: LD_INT 3
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: LIST
62557: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62558: LD_ADDR_VAR 0 57
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 3
62576: NEG
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 3
62587: NEG
62588: PUSH
62589: LD_INT 1
62591: NEG
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62602: LD_ADDR_VAR 0 58
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 3
62621: NEG
62622: PUSH
62623: LD_INT 2
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 3
62633: NEG
62634: PUSH
62635: LD_INT 3
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62648: LD_ADDR_VAR 0 59
62652: PUSH
62653: LD_INT 1
62655: NEG
62656: PUSH
62657: LD_INT 2
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 2
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62692: LD_ADDR_VAR 0 60
62696: PUSH
62697: LD_INT 1
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62733: LD_ADDR_VAR 0 61
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 1
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: LD_INT 2
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 1
62760: PUSH
62761: LD_INT 2
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62773: LD_ADDR_VAR 0 62
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: PUSH
62788: LD_INT 0
62790: PUSH
62791: LD_INT 2
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 1
62800: NEG
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62814: LD_ADDR_VAR 0 63
62818: PUSH
62819: LD_INT 1
62821: NEG
62822: PUSH
62823: LD_INT 1
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: NEG
62844: PUSH
62845: LD_INT 1
62847: NEG
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: LIST
62857: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62858: LD_ADDR_VAR 0 64
62862: PUSH
62863: LD_INT 1
62865: NEG
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 2
62877: NEG
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 2
62889: NEG
62890: PUSH
62891: LD_INT 2
62893: NEG
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: LIST
62903: ST_TO_ADDR
// end ; 2 :
62904: GO 66170
62906: LD_INT 2
62908: DOUBLE
62909: EQUAL
62910: IFTRUE 62914
62912: GO 66169
62914: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62915: LD_ADDR_VAR 0 29
62919: PUSH
62920: LD_INT 4
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 4
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 5
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 5
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 3
62983: PUSH
62984: LD_INT 1
62986: NEG
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: LD_INT 2
62997: NEG
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 5
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: LD_INT 3
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: LD_INT 2
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 4
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: LD_INT 4
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 4
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 2
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 4
63085: PUSH
63086: LD_INT 2
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: LD_INT 4
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: PUSH
63126: LD_INT 4
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: PUSH
63136: LD_INT 5
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 5
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 4
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 1
63166: NEG
63167: PUSH
63168: LD_INT 3
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 2
63177: PUSH
63178: LD_INT 5
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 3
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 2
63221: NEG
63222: PUSH
63223: LD_INT 0
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 3
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 4
63254: NEG
63255: PUSH
63256: LD_INT 0
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 4
63265: NEG
63266: PUSH
63267: LD_INT 1
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: NEG
63278: PUSH
63279: LD_INT 2
63281: NEG
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 4
63300: NEG
63301: PUSH
63302: LD_INT 4
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 4
63312: NEG
63313: PUSH
63314: LD_INT 5
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 3
63324: NEG
63325: PUSH
63326: LD_INT 4
63328: NEG
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 3
63336: NEG
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 4
63348: NEG
63349: PUSH
63350: LD_INT 3
63352: NEG
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 5
63360: NEG
63361: PUSH
63362: LD_INT 4
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 5
63372: NEG
63373: PUSH
63374: LD_INT 5
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 3
63384: NEG
63385: PUSH
63386: LD_INT 5
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 5
63396: NEG
63397: PUSH
63398: LD_INT 3
63400: NEG
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63453: LD_ADDR_VAR 0 30
63457: PUSH
63458: LD_INT 4
63460: PUSH
63461: LD_INT 4
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 4
63470: PUSH
63471: LD_INT 3
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 5
63480: PUSH
63481: LD_INT 4
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 5
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 4
63500: PUSH
63501: LD_INT 5
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 3
63510: PUSH
63511: LD_INT 4
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 3
63520: PUSH
63521: LD_INT 3
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 5
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: LD_INT 5
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: PUSH
63558: LD_INT 0
63560: PUSH
63561: LD_INT 2
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 1
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: LD_INT 3
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: NEG
63612: PUSH
63613: LD_INT 2
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 2
63622: PUSH
63623: LD_INT 4
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 2
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 4
63643: NEG
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 4
63654: NEG
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 3
63666: NEG
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: NEG
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 4
63688: NEG
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 5
63699: NEG
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 5
63710: NEG
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 5
63722: NEG
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: EMPTY
63729: LIST
63730: LIST
63731: PUSH
63732: LD_INT 3
63734: NEG
63735: PUSH
63736: LD_INT 2
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 3
63745: NEG
63746: PUSH
63747: LD_INT 3
63749: NEG
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: LD_INT 4
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 2
63785: NEG
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 3
63793: NEG
63794: PUSH
63795: LD_INT 2
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 4
63817: NEG
63818: PUSH
63819: LD_INT 4
63821: NEG
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: LD_INT 4
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 4
63841: NEG
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 5
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: LD_INT 3
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 4
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 3
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: LD_INT 5
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64000: LD_ADDR_VAR 0 31
64004: PUSH
64005: LD_INT 0
64007: PUSH
64008: LD_INT 4
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: LD_INT 3
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 4
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 5
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 5
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 4
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 3
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 2
64079: PUSH
64080: LD_INT 5
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 3
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 3
64100: NEG
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 3
64111: NEG
64112: PUSH
64113: LD_INT 1
64115: NEG
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: NEG
64124: PUSH
64125: LD_INT 0
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 3
64145: NEG
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 4
64156: NEG
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 4
64167: NEG
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 4
64179: NEG
64180: PUSH
64181: LD_INT 2
64183: NEG
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: LD_INT 2
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 4
64202: NEG
64203: PUSH
64204: LD_INT 4
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: NEG
64215: PUSH
64216: LD_INT 5
64218: NEG
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 3
64226: NEG
64227: PUSH
64228: LD_INT 4
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 3
64238: NEG
64239: PUSH
64240: LD_INT 3
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 4
64250: NEG
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 5
64262: NEG
64263: PUSH
64264: LD_INT 4
64266: NEG
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 5
64274: NEG
64275: PUSH
64276: LD_INT 5
64278: NEG
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 3
64286: NEG
64287: PUSH
64288: LD_INT 5
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 5
64298: NEG
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 0
64310: PUSH
64311: LD_INT 3
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 4
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 3
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 1
64343: PUSH
64344: LD_INT 2
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: LD_INT 3
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: LD_INT 4
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 2
64400: NEG
64401: PUSH
64402: LD_INT 4
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 4
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 4
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 5
64433: PUSH
64434: LD_INT 0
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 5
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 4
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 3
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 3
64484: PUSH
64485: LD_INT 2
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 5
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64550: LD_ADDR_VAR 0 32
64554: PUSH
64555: LD_INT 4
64557: NEG
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 4
64568: NEG
64569: PUSH
64570: LD_INT 1
64572: NEG
64573: PUSH
64574: EMPTY
64575: LIST
64576: LIST
64577: PUSH
64578: LD_INT 3
64580: NEG
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: NEG
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 4
64602: NEG
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 5
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 5
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 5
64636: NEG
64637: PUSH
64638: LD_INT 2
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 3
64659: NEG
64660: PUSH
64661: LD_INT 3
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: NEG
64672: PUSH
64673: LD_INT 4
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 3
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: LD_INT 2
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 4
64719: NEG
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 4
64731: NEG
64732: PUSH
64733: LD_INT 4
64735: NEG
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 4
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: LD_INT 2
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 0
64767: PUSH
64768: LD_INT 4
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 5
64781: NEG
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 4
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 0
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: NEG
64823: PUSH
64824: LD_INT 4
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 1
64834: NEG
64835: PUSH
64836: LD_INT 5
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: PUSH
64847: LD_INT 3
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 2
64857: NEG
64858: PUSH
64859: LD_INT 5
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 4
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 4
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: PUSH
64911: LD_INT 1
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 2
64930: PUSH
64931: LD_INT 1
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 2
64941: PUSH
64942: LD_INT 2
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 4
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 4
64962: PUSH
64963: LD_INT 4
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PUSH
64970: LD_INT 4
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: PUSH
64980: LD_INT 5
64982: PUSH
64983: LD_INT 4
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 5
64992: PUSH
64993: LD_INT 5
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 4
65002: PUSH
65003: LD_INT 5
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: LD_INT 4
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 3
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 5
65032: PUSH
65033: LD_INT 3
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: LD_INT 5
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65097: LD_ADDR_VAR 0 33
65101: PUSH
65102: LD_INT 4
65104: NEG
65105: PUSH
65106: LD_INT 4
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 4
65116: NEG
65117: PUSH
65118: LD_INT 5
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: NEG
65129: PUSH
65130: LD_INT 4
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 3
65140: NEG
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: NEG
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 5
65164: NEG
65165: PUSH
65166: LD_INT 4
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 5
65176: NEG
65177: PUSH
65178: LD_INT 5
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 3
65188: NEG
65189: PUSH
65190: LD_INT 5
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 0
65223: PUSH
65224: LD_INT 4
65226: NEG
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 1
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 2
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 4
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 4
65324: PUSH
65325: LD_INT 1
65327: NEG
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 5
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 5
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 4
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: LD_INT 0
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: PUSH
65373: LD_INT 3
65375: PUSH
65376: LD_INT 1
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 3
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 5
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: LD_INT 2
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 4
65427: PUSH
65428: LD_INT 3
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 4
65437: PUSH
65438: LD_INT 4
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 3
65447: PUSH
65448: LD_INT 4
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: PUSH
65458: LD_INT 3
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: PUSH
65468: LD_INT 2
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 4
65477: PUSH
65478: LD_INT 2
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 1
65517: PUSH
65518: LD_INT 4
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: LD_INT 4
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 3
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 5
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: LD_INT 2
65579: NEG
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65635: LD_ADDR_VAR 0 34
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 4
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 0
65653: PUSH
65654: LD_INT 5
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: LD_INT 4
65667: NEG
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 1
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: EMPTY
65681: LIST
65682: LIST
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: LD_INT 3
65689: NEG
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PUSH
65695: LD_INT 1
65697: NEG
65698: PUSH
65699: LD_INT 4
65701: NEG
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 1
65709: NEG
65710: PUSH
65711: LD_INT 5
65713: NEG
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: LD_INT 3
65724: NEG
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: PUSH
65730: LD_INT 2
65732: NEG
65733: PUSH
65734: LD_INT 5
65736: NEG
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 4
65765: PUSH
65766: LD_INT 0
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 4
65775: PUSH
65776: LD_INT 1
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 3
65785: PUSH
65786: LD_INT 1
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 2
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 1
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 2
65816: PUSH
65817: LD_INT 2
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 4
65827: PUSH
65828: LD_INT 2
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: LD_INT 4
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 4
65847: PUSH
65848: LD_INT 3
65850: PUSH
65851: EMPTY
65852: LIST
65853: LIST
65854: PUSH
65855: LD_INT 5
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: LD_INT 5
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: PUSH
65875: LD_INT 4
65877: PUSH
65878: LD_INT 5
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 3
65887: PUSH
65888: LD_INT 4
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 3
65897: PUSH
65898: LD_INT 3
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 5
65907: PUSH
65908: LD_INT 3
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: PUSH
65918: LD_INT 5
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 0
65927: PUSH
65928: LD_INT 3
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: LD_INT 2
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 1
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: LD_INT 4
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: LD_INT 4
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 1
65988: NEG
65989: PUSH
65990: LD_INT 2
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 2
65999: PUSH
66000: LD_INT 4
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 2
66009: NEG
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 4
66020: NEG
66021: PUSH
66022: LD_INT 0
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 4
66031: NEG
66032: PUSH
66033: LD_INT 1
66035: NEG
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 3
66043: NEG
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 3
66054: NEG
66055: PUSH
66056: LD_INT 1
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 4
66065: NEG
66066: PUSH
66067: LD_INT 1
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 5
66076: NEG
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 5
66087: NEG
66088: PUSH
66089: LD_INT 1
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 5
66099: NEG
66100: PUSH
66101: LD_INT 2
66103: NEG
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 3
66111: NEG
66112: PUSH
66113: LD_INT 2
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// end ; end ;
66167: GO 66170
66169: POP
// case btype of b_depot , b_warehouse :
66170: LD_VAR 0 1
66174: PUSH
66175: LD_INT 0
66177: DOUBLE
66178: EQUAL
66179: IFTRUE 66189
66181: LD_INT 1
66183: DOUBLE
66184: EQUAL
66185: IFTRUE 66189
66187: GO 66390
66189: POP
// case nation of nation_american :
66190: LD_VAR 0 5
66194: PUSH
66195: LD_INT 1
66197: DOUBLE
66198: EQUAL
66199: IFTRUE 66203
66201: GO 66259
66203: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
66204: LD_ADDR_VAR 0 9
66208: PUSH
66209: LD_VAR 0 11
66213: PUSH
66214: LD_VAR 0 12
66218: PUSH
66219: LD_VAR 0 13
66223: PUSH
66224: LD_VAR 0 14
66228: PUSH
66229: LD_VAR 0 15
66233: PUSH
66234: LD_VAR 0 16
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: PUSH
66247: LD_VAR 0 4
66251: PUSH
66252: LD_INT 1
66254: PLUS
66255: ARRAY
66256: ST_TO_ADDR
66257: GO 66388
66259: LD_INT 2
66261: DOUBLE
66262: EQUAL
66263: IFTRUE 66267
66265: GO 66323
66267: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
66268: LD_ADDR_VAR 0 9
66272: PUSH
66273: LD_VAR 0 17
66277: PUSH
66278: LD_VAR 0 18
66282: PUSH
66283: LD_VAR 0 19
66287: PUSH
66288: LD_VAR 0 20
66292: PUSH
66293: LD_VAR 0 21
66297: PUSH
66298: LD_VAR 0 22
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: PUSH
66311: LD_VAR 0 4
66315: PUSH
66316: LD_INT 1
66318: PLUS
66319: ARRAY
66320: ST_TO_ADDR
66321: GO 66388
66323: LD_INT 3
66325: DOUBLE
66326: EQUAL
66327: IFTRUE 66331
66329: GO 66387
66331: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66332: LD_ADDR_VAR 0 9
66336: PUSH
66337: LD_VAR 0 23
66341: PUSH
66342: LD_VAR 0 24
66346: PUSH
66347: LD_VAR 0 25
66351: PUSH
66352: LD_VAR 0 26
66356: PUSH
66357: LD_VAR 0 27
66361: PUSH
66362: LD_VAR 0 28
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: PUSH
66375: LD_VAR 0 4
66379: PUSH
66380: LD_INT 1
66382: PLUS
66383: ARRAY
66384: ST_TO_ADDR
66385: GO 66388
66387: POP
66388: GO 66937
66390: LD_INT 2
66392: DOUBLE
66393: EQUAL
66394: IFTRUE 66404
66396: LD_INT 3
66398: DOUBLE
66399: EQUAL
66400: IFTRUE 66404
66402: GO 66460
66404: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66405: LD_ADDR_VAR 0 9
66409: PUSH
66410: LD_VAR 0 29
66414: PUSH
66415: LD_VAR 0 30
66419: PUSH
66420: LD_VAR 0 31
66424: PUSH
66425: LD_VAR 0 32
66429: PUSH
66430: LD_VAR 0 33
66434: PUSH
66435: LD_VAR 0 34
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: PUSH
66448: LD_VAR 0 4
66452: PUSH
66453: LD_INT 1
66455: PLUS
66456: ARRAY
66457: ST_TO_ADDR
66458: GO 66937
66460: LD_INT 16
66462: DOUBLE
66463: EQUAL
66464: IFTRUE 66516
66466: LD_INT 17
66468: DOUBLE
66469: EQUAL
66470: IFTRUE 66516
66472: LD_INT 18
66474: DOUBLE
66475: EQUAL
66476: IFTRUE 66516
66478: LD_INT 19
66480: DOUBLE
66481: EQUAL
66482: IFTRUE 66516
66484: LD_INT 20
66486: DOUBLE
66487: EQUAL
66488: IFTRUE 66516
66490: LD_INT 21
66492: DOUBLE
66493: EQUAL
66494: IFTRUE 66516
66496: LD_INT 23
66498: DOUBLE
66499: EQUAL
66500: IFTRUE 66516
66502: LD_INT 24
66504: DOUBLE
66505: EQUAL
66506: IFTRUE 66516
66508: LD_INT 25
66510: DOUBLE
66511: EQUAL
66512: IFTRUE 66516
66514: GO 66572
66516: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66517: LD_ADDR_VAR 0 9
66521: PUSH
66522: LD_VAR 0 35
66526: PUSH
66527: LD_VAR 0 36
66531: PUSH
66532: LD_VAR 0 37
66536: PUSH
66537: LD_VAR 0 38
66541: PUSH
66542: LD_VAR 0 39
66546: PUSH
66547: LD_VAR 0 40
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: PUSH
66560: LD_VAR 0 4
66564: PUSH
66565: LD_INT 1
66567: PLUS
66568: ARRAY
66569: ST_TO_ADDR
66570: GO 66937
66572: LD_INT 6
66574: DOUBLE
66575: EQUAL
66576: IFTRUE 66628
66578: LD_INT 7
66580: DOUBLE
66581: EQUAL
66582: IFTRUE 66628
66584: LD_INT 8
66586: DOUBLE
66587: EQUAL
66588: IFTRUE 66628
66590: LD_INT 13
66592: DOUBLE
66593: EQUAL
66594: IFTRUE 66628
66596: LD_INT 12
66598: DOUBLE
66599: EQUAL
66600: IFTRUE 66628
66602: LD_INT 15
66604: DOUBLE
66605: EQUAL
66606: IFTRUE 66628
66608: LD_INT 11
66610: DOUBLE
66611: EQUAL
66612: IFTRUE 66628
66614: LD_INT 14
66616: DOUBLE
66617: EQUAL
66618: IFTRUE 66628
66620: LD_INT 10
66622: DOUBLE
66623: EQUAL
66624: IFTRUE 66628
66626: GO 66684
66628: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
66629: LD_ADDR_VAR 0 9
66633: PUSH
66634: LD_VAR 0 41
66638: PUSH
66639: LD_VAR 0 42
66643: PUSH
66644: LD_VAR 0 43
66648: PUSH
66649: LD_VAR 0 44
66653: PUSH
66654: LD_VAR 0 45
66658: PUSH
66659: LD_VAR 0 46
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 4
66676: PUSH
66677: LD_INT 1
66679: PLUS
66680: ARRAY
66681: ST_TO_ADDR
66682: GO 66937
66684: LD_INT 36
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66692
66690: GO 66748
66692: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66693: LD_ADDR_VAR 0 9
66697: PUSH
66698: LD_VAR 0 47
66702: PUSH
66703: LD_VAR 0 48
66707: PUSH
66708: LD_VAR 0 49
66712: PUSH
66713: LD_VAR 0 50
66717: PUSH
66718: LD_VAR 0 51
66722: PUSH
66723: LD_VAR 0 52
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: PUSH
66736: LD_VAR 0 4
66740: PUSH
66741: LD_INT 1
66743: PLUS
66744: ARRAY
66745: ST_TO_ADDR
66746: GO 66937
66748: LD_INT 4
66750: DOUBLE
66751: EQUAL
66752: IFTRUE 66774
66754: LD_INT 5
66756: DOUBLE
66757: EQUAL
66758: IFTRUE 66774
66760: LD_INT 34
66762: DOUBLE
66763: EQUAL
66764: IFTRUE 66774
66766: LD_INT 37
66768: DOUBLE
66769: EQUAL
66770: IFTRUE 66774
66772: GO 66830
66774: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66775: LD_ADDR_VAR 0 9
66779: PUSH
66780: LD_VAR 0 53
66784: PUSH
66785: LD_VAR 0 54
66789: PUSH
66790: LD_VAR 0 55
66794: PUSH
66795: LD_VAR 0 56
66799: PUSH
66800: LD_VAR 0 57
66804: PUSH
66805: LD_VAR 0 58
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: PUSH
66818: LD_VAR 0 4
66822: PUSH
66823: LD_INT 1
66825: PLUS
66826: ARRAY
66827: ST_TO_ADDR
66828: GO 66937
66830: LD_INT 31
66832: DOUBLE
66833: EQUAL
66834: IFTRUE 66880
66836: LD_INT 32
66838: DOUBLE
66839: EQUAL
66840: IFTRUE 66880
66842: LD_INT 33
66844: DOUBLE
66845: EQUAL
66846: IFTRUE 66880
66848: LD_INT 27
66850: DOUBLE
66851: EQUAL
66852: IFTRUE 66880
66854: LD_INT 26
66856: DOUBLE
66857: EQUAL
66858: IFTRUE 66880
66860: LD_INT 28
66862: DOUBLE
66863: EQUAL
66864: IFTRUE 66880
66866: LD_INT 29
66868: DOUBLE
66869: EQUAL
66870: IFTRUE 66880
66872: LD_INT 30
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66880
66878: GO 66936
66880: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
66881: LD_ADDR_VAR 0 9
66885: PUSH
66886: LD_VAR 0 59
66890: PUSH
66891: LD_VAR 0 60
66895: PUSH
66896: LD_VAR 0 61
66900: PUSH
66901: LD_VAR 0 62
66905: PUSH
66906: LD_VAR 0 63
66910: PUSH
66911: LD_VAR 0 64
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: LD_VAR 0 4
66928: PUSH
66929: LD_INT 1
66931: PLUS
66932: ARRAY
66933: ST_TO_ADDR
66934: GO 66937
66936: POP
// temp_list2 = [ ] ;
66937: LD_ADDR_VAR 0 10
66941: PUSH
66942: EMPTY
66943: ST_TO_ADDR
// for i in temp_list do
66944: LD_ADDR_VAR 0 8
66948: PUSH
66949: LD_VAR 0 9
66953: PUSH
66954: FOR_IN
66955: IFFALSE 67007
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66957: LD_ADDR_VAR 0 10
66961: PUSH
66962: LD_VAR 0 10
66966: PUSH
66967: LD_VAR 0 8
66971: PUSH
66972: LD_INT 1
66974: ARRAY
66975: PUSH
66976: LD_VAR 0 2
66980: PLUS
66981: PUSH
66982: LD_VAR 0 8
66986: PUSH
66987: LD_INT 2
66989: ARRAY
66990: PUSH
66991: LD_VAR 0 3
66995: PLUS
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: ADD
67004: ST_TO_ADDR
67005: GO 66954
67007: POP
67008: POP
// result = temp_list2 ;
67009: LD_ADDR_VAR 0 7
67013: PUSH
67014: LD_VAR 0 10
67018: ST_TO_ADDR
// end ;
67019: LD_VAR 0 7
67023: RET
// export function EnemyInRange ( unit , dist ) ; begin
67024: LD_INT 0
67026: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67027: LD_ADDR_VAR 0 3
67031: PUSH
67032: LD_VAR 0 1
67036: PPUSH
67037: CALL_OW 255
67041: PPUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 250
67051: PPUSH
67052: LD_VAR 0 1
67056: PPUSH
67057: CALL_OW 251
67061: PPUSH
67062: LD_VAR 0 2
67066: PPUSH
67067: CALL 41691 0 4
67071: PUSH
67072: LD_INT 4
67074: ARRAY
67075: ST_TO_ADDR
// end ;
67076: LD_VAR 0 3
67080: RET
// export function PlayerSeeMe ( unit ) ; begin
67081: LD_INT 0
67083: PPUSH
// result := See ( your_side , unit ) ;
67084: LD_ADDR_VAR 0 2
67088: PUSH
67089: LD_OWVAR 2
67093: PPUSH
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 292
67103: ST_TO_ADDR
// end ;
67104: LD_VAR 0 2
67108: RET
// export function ReverseDir ( unit ) ; begin
67109: LD_INT 0
67111: PPUSH
// if not unit then
67112: LD_VAR 0 1
67116: NOT
67117: IFFALSE 67121
// exit ;
67119: GO 67167
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
67121: LD_ADDR_VAR 0 2
67125: PUSH
67126: LD_INT 3
67128: PUSH
67129: LD_INT 4
67131: PUSH
67132: LD_INT 5
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: LD_INT 2
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: PUSH
67152: LD_VAR 0 1
67156: PPUSH
67157: CALL_OW 254
67161: PUSH
67162: LD_INT 1
67164: PLUS
67165: ARRAY
67166: ST_TO_ADDR
// end ;
67167: LD_VAR 0 2
67171: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67172: LD_INT 0
67174: PPUSH
67175: PPUSH
67176: PPUSH
67177: PPUSH
67178: PPUSH
// if not hexes then
67179: LD_VAR 0 2
67183: NOT
67184: IFFALSE 67188
// exit ;
67186: GO 67336
// dist := 9999 ;
67188: LD_ADDR_VAR 0 5
67192: PUSH
67193: LD_INT 9999
67195: ST_TO_ADDR
// for i = 1 to hexes do
67196: LD_ADDR_VAR 0 4
67200: PUSH
67201: DOUBLE
67202: LD_INT 1
67204: DEC
67205: ST_TO_ADDR
67206: LD_VAR 0 2
67210: PUSH
67211: FOR_TO
67212: IFFALSE 67324
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67214: LD_VAR 0 1
67218: PPUSH
67219: LD_VAR 0 2
67223: PUSH
67224: LD_VAR 0 4
67228: ARRAY
67229: PUSH
67230: LD_INT 1
67232: ARRAY
67233: PPUSH
67234: LD_VAR 0 2
67238: PUSH
67239: LD_VAR 0 4
67243: ARRAY
67244: PUSH
67245: LD_INT 2
67247: ARRAY
67248: PPUSH
67249: CALL_OW 297
67253: PUSH
67254: LD_VAR 0 5
67258: LESS
67259: IFFALSE 67322
// begin hex := hexes [ i ] ;
67261: LD_ADDR_VAR 0 7
67265: PUSH
67266: LD_VAR 0 2
67270: PUSH
67271: LD_VAR 0 4
67275: ARRAY
67276: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67277: LD_ADDR_VAR 0 5
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: LD_VAR 0 2
67291: PUSH
67292: LD_VAR 0 4
67296: ARRAY
67297: PUSH
67298: LD_INT 1
67300: ARRAY
67301: PPUSH
67302: LD_VAR 0 2
67306: PUSH
67307: LD_VAR 0 4
67311: ARRAY
67312: PUSH
67313: LD_INT 2
67315: ARRAY
67316: PPUSH
67317: CALL_OW 297
67321: ST_TO_ADDR
// end ; end ;
67322: GO 67211
67324: POP
67325: POP
// result := hex ;
67326: LD_ADDR_VAR 0 3
67330: PUSH
67331: LD_VAR 0 7
67335: ST_TO_ADDR
// end ;
67336: LD_VAR 0 3
67340: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67341: LD_INT 0
67343: PPUSH
67344: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67345: LD_VAR 0 1
67349: NOT
67350: PUSH
67351: LD_VAR 0 1
67355: PUSH
67356: LD_INT 21
67358: PUSH
67359: LD_INT 2
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 23
67368: PUSH
67369: LD_INT 2
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PPUSH
67380: CALL_OW 69
67384: IN
67385: NOT
67386: OR
67387: IFFALSE 67391
// exit ;
67389: GO 67438
// for i = 1 to 3 do
67391: LD_ADDR_VAR 0 3
67395: PUSH
67396: DOUBLE
67397: LD_INT 1
67399: DEC
67400: ST_TO_ADDR
67401: LD_INT 3
67403: PUSH
67404: FOR_TO
67405: IFFALSE 67436
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67407: LD_VAR 0 1
67411: PPUSH
67412: CALL_OW 250
67416: PPUSH
67417: LD_VAR 0 1
67421: PPUSH
67422: CALL_OW 251
67426: PPUSH
67427: LD_INT 1
67429: PPUSH
67430: CALL_OW 453
67434: GO 67404
67436: POP
67437: POP
// end ;
67438: LD_VAR 0 2
67442: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
67447: PPUSH
67448: PPUSH
67449: PPUSH
67450: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67451: LD_VAR 0 1
67455: NOT
67456: PUSH
67457: LD_VAR 0 2
67461: NOT
67462: OR
67463: PUSH
67464: LD_VAR 0 1
67468: PPUSH
67469: CALL_OW 314
67473: OR
67474: IFFALSE 67478
// exit ;
67476: GO 67919
// x := GetX ( enemy_unit ) ;
67478: LD_ADDR_VAR 0 7
67482: PUSH
67483: LD_VAR 0 2
67487: PPUSH
67488: CALL_OW 250
67492: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67493: LD_ADDR_VAR 0 8
67497: PUSH
67498: LD_VAR 0 2
67502: PPUSH
67503: CALL_OW 251
67507: ST_TO_ADDR
// if not x or not y then
67508: LD_VAR 0 7
67512: NOT
67513: PUSH
67514: LD_VAR 0 8
67518: NOT
67519: OR
67520: IFFALSE 67524
// exit ;
67522: GO 67919
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67524: LD_ADDR_VAR 0 6
67528: PUSH
67529: LD_VAR 0 7
67533: PPUSH
67534: LD_INT 0
67536: PPUSH
67537: LD_INT 4
67539: PPUSH
67540: CALL_OW 272
67544: PUSH
67545: LD_VAR 0 8
67549: PPUSH
67550: LD_INT 0
67552: PPUSH
67553: LD_INT 4
67555: PPUSH
67556: CALL_OW 273
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_VAR 0 7
67569: PPUSH
67570: LD_INT 1
67572: PPUSH
67573: LD_INT 4
67575: PPUSH
67576: CALL_OW 272
67580: PUSH
67581: LD_VAR 0 8
67585: PPUSH
67586: LD_INT 1
67588: PPUSH
67589: LD_INT 4
67591: PPUSH
67592: CALL_OW 273
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_VAR 0 7
67605: PPUSH
67606: LD_INT 2
67608: PPUSH
67609: LD_INT 4
67611: PPUSH
67612: CALL_OW 272
67616: PUSH
67617: LD_VAR 0 8
67621: PPUSH
67622: LD_INT 2
67624: PPUSH
67625: LD_INT 4
67627: PPUSH
67628: CALL_OW 273
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_VAR 0 7
67641: PPUSH
67642: LD_INT 3
67644: PPUSH
67645: LD_INT 4
67647: PPUSH
67648: CALL_OW 272
67652: PUSH
67653: LD_VAR 0 8
67657: PPUSH
67658: LD_INT 3
67660: PPUSH
67661: LD_INT 4
67663: PPUSH
67664: CALL_OW 273
67668: PUSH
67669: EMPTY
67670: LIST
67671: LIST
67672: PUSH
67673: LD_VAR 0 7
67677: PPUSH
67678: LD_INT 4
67680: PPUSH
67681: LD_INT 4
67683: PPUSH
67684: CALL_OW 272
67688: PUSH
67689: LD_VAR 0 8
67693: PPUSH
67694: LD_INT 4
67696: PPUSH
67697: LD_INT 4
67699: PPUSH
67700: CALL_OW 273
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_VAR 0 7
67713: PPUSH
67714: LD_INT 5
67716: PPUSH
67717: LD_INT 4
67719: PPUSH
67720: CALL_OW 272
67724: PUSH
67725: LD_VAR 0 8
67729: PPUSH
67730: LD_INT 5
67732: PPUSH
67733: LD_INT 4
67735: PPUSH
67736: CALL_OW 273
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: ST_TO_ADDR
// for i = tmp downto 1 do
67753: LD_ADDR_VAR 0 4
67757: PUSH
67758: DOUBLE
67759: LD_VAR 0 6
67763: INC
67764: ST_TO_ADDR
67765: LD_INT 1
67767: PUSH
67768: FOR_DOWNTO
67769: IFFALSE 67870
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67771: LD_VAR 0 6
67775: PUSH
67776: LD_VAR 0 4
67780: ARRAY
67781: PUSH
67782: LD_INT 1
67784: ARRAY
67785: PPUSH
67786: LD_VAR 0 6
67790: PUSH
67791: LD_VAR 0 4
67795: ARRAY
67796: PUSH
67797: LD_INT 2
67799: ARRAY
67800: PPUSH
67801: CALL_OW 488
67805: NOT
67806: PUSH
67807: LD_VAR 0 6
67811: PUSH
67812: LD_VAR 0 4
67816: ARRAY
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PPUSH
67822: LD_VAR 0 6
67826: PUSH
67827: LD_VAR 0 4
67831: ARRAY
67832: PUSH
67833: LD_INT 2
67835: ARRAY
67836: PPUSH
67837: CALL_OW 428
67841: PUSH
67842: LD_INT 0
67844: NONEQUAL
67845: OR
67846: IFFALSE 67868
// tmp := Delete ( tmp , i ) ;
67848: LD_ADDR_VAR 0 6
67852: PUSH
67853: LD_VAR 0 6
67857: PPUSH
67858: LD_VAR 0 4
67862: PPUSH
67863: CALL_OW 3
67867: ST_TO_ADDR
67868: GO 67768
67870: POP
67871: POP
// j := GetClosestHex ( unit , tmp ) ;
67872: LD_ADDR_VAR 0 5
67876: PUSH
67877: LD_VAR 0 1
67881: PPUSH
67882: LD_VAR 0 6
67886: PPUSH
67887: CALL 67172 0 2
67891: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67892: LD_VAR 0 1
67896: PPUSH
67897: LD_VAR 0 5
67901: PUSH
67902: LD_INT 1
67904: ARRAY
67905: PPUSH
67906: LD_VAR 0 5
67910: PUSH
67911: LD_INT 2
67913: ARRAY
67914: PPUSH
67915: CALL_OW 111
// end ;
67919: LD_VAR 0 3
67923: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67924: LD_INT 0
67926: PPUSH
67927: PPUSH
67928: PPUSH
// uc_side = 0 ;
67929: LD_ADDR_OWVAR 20
67933: PUSH
67934: LD_INT 0
67936: ST_TO_ADDR
// uc_nation = 0 ;
67937: LD_ADDR_OWVAR 21
67941: PUSH
67942: LD_INT 0
67944: ST_TO_ADDR
// InitHc ;
67945: CALL_OW 19
// InitVc ;
67949: CALL_OW 20
// if mastodonts then
67953: LD_VAR 0 6
67957: IFFALSE 68024
// for i = 1 to mastodonts do
67959: LD_ADDR_VAR 0 11
67963: PUSH
67964: DOUBLE
67965: LD_INT 1
67967: DEC
67968: ST_TO_ADDR
67969: LD_VAR 0 6
67973: PUSH
67974: FOR_TO
67975: IFFALSE 68022
// begin vc_chassis := 31 ;
67977: LD_ADDR_OWVAR 37
67981: PUSH
67982: LD_INT 31
67984: ST_TO_ADDR
// vc_control := control_rider ;
67985: LD_ADDR_OWVAR 38
67989: PUSH
67990: LD_INT 4
67992: ST_TO_ADDR
// animal := CreateVehicle ;
67993: LD_ADDR_VAR 0 12
67997: PUSH
67998: CALL_OW 45
68002: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68003: LD_VAR 0 12
68007: PPUSH
68008: LD_VAR 0 8
68012: PPUSH
68013: LD_INT 0
68015: PPUSH
68016: CALL_OW 49
// end ;
68020: GO 67974
68022: POP
68023: POP
// if horses then
68024: LD_VAR 0 5
68028: IFFALSE 68095
// for i = 1 to horses do
68030: LD_ADDR_VAR 0 11
68034: PUSH
68035: DOUBLE
68036: LD_INT 1
68038: DEC
68039: ST_TO_ADDR
68040: LD_VAR 0 5
68044: PUSH
68045: FOR_TO
68046: IFFALSE 68093
// begin hc_class := 21 ;
68048: LD_ADDR_OWVAR 28
68052: PUSH
68053: LD_INT 21
68055: ST_TO_ADDR
// hc_gallery :=  ;
68056: LD_ADDR_OWVAR 33
68060: PUSH
68061: LD_STRING 
68063: ST_TO_ADDR
// animal := CreateHuman ;
68064: LD_ADDR_VAR 0 12
68068: PUSH
68069: CALL_OW 44
68073: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68074: LD_VAR 0 12
68078: PPUSH
68079: LD_VAR 0 8
68083: PPUSH
68084: LD_INT 0
68086: PPUSH
68087: CALL_OW 49
// end ;
68091: GO 68045
68093: POP
68094: POP
// if birds then
68095: LD_VAR 0 1
68099: IFFALSE 68166
// for i = 1 to birds do
68101: LD_ADDR_VAR 0 11
68105: PUSH
68106: DOUBLE
68107: LD_INT 1
68109: DEC
68110: ST_TO_ADDR
68111: LD_VAR 0 1
68115: PUSH
68116: FOR_TO
68117: IFFALSE 68164
// begin hc_class = 18 ;
68119: LD_ADDR_OWVAR 28
68123: PUSH
68124: LD_INT 18
68126: ST_TO_ADDR
// hc_gallery =  ;
68127: LD_ADDR_OWVAR 33
68131: PUSH
68132: LD_STRING 
68134: ST_TO_ADDR
// animal := CreateHuman ;
68135: LD_ADDR_VAR 0 12
68139: PUSH
68140: CALL_OW 44
68144: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68145: LD_VAR 0 12
68149: PPUSH
68150: LD_VAR 0 8
68154: PPUSH
68155: LD_INT 0
68157: PPUSH
68158: CALL_OW 49
// end ;
68162: GO 68116
68164: POP
68165: POP
// if tigers then
68166: LD_VAR 0 2
68170: IFFALSE 68254
// for i = 1 to tigers do
68172: LD_ADDR_VAR 0 11
68176: PUSH
68177: DOUBLE
68178: LD_INT 1
68180: DEC
68181: ST_TO_ADDR
68182: LD_VAR 0 2
68186: PUSH
68187: FOR_TO
68188: IFFALSE 68252
// begin hc_class = class_tiger ;
68190: LD_ADDR_OWVAR 28
68194: PUSH
68195: LD_INT 14
68197: ST_TO_ADDR
// hc_gallery =  ;
68198: LD_ADDR_OWVAR 33
68202: PUSH
68203: LD_STRING 
68205: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68206: LD_ADDR_OWVAR 35
68210: PUSH
68211: LD_INT 7
68213: NEG
68214: PPUSH
68215: LD_INT 7
68217: PPUSH
68218: CALL_OW 12
68222: ST_TO_ADDR
// animal := CreateHuman ;
68223: LD_ADDR_VAR 0 12
68227: PUSH
68228: CALL_OW 44
68232: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68233: LD_VAR 0 12
68237: PPUSH
68238: LD_VAR 0 8
68242: PPUSH
68243: LD_INT 0
68245: PPUSH
68246: CALL_OW 49
// end ;
68250: GO 68187
68252: POP
68253: POP
// if apemans then
68254: LD_VAR 0 3
68258: IFFALSE 68381
// for i = 1 to apemans do
68260: LD_ADDR_VAR 0 11
68264: PUSH
68265: DOUBLE
68266: LD_INT 1
68268: DEC
68269: ST_TO_ADDR
68270: LD_VAR 0 3
68274: PUSH
68275: FOR_TO
68276: IFFALSE 68379
// begin hc_class = class_apeman ;
68278: LD_ADDR_OWVAR 28
68282: PUSH
68283: LD_INT 12
68285: ST_TO_ADDR
// hc_gallery =  ;
68286: LD_ADDR_OWVAR 33
68290: PUSH
68291: LD_STRING 
68293: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68294: LD_ADDR_OWVAR 35
68298: PUSH
68299: LD_INT 5
68301: NEG
68302: PPUSH
68303: LD_INT 5
68305: PPUSH
68306: CALL_OW 12
68310: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68311: LD_ADDR_OWVAR 31
68315: PUSH
68316: LD_INT 1
68318: PPUSH
68319: LD_INT 3
68321: PPUSH
68322: CALL_OW 12
68326: PUSH
68327: LD_INT 1
68329: PPUSH
68330: LD_INT 3
68332: PPUSH
68333: CALL_OW 12
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: ST_TO_ADDR
// animal := CreateHuman ;
68350: LD_ADDR_VAR 0 12
68354: PUSH
68355: CALL_OW 44
68359: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68360: LD_VAR 0 12
68364: PPUSH
68365: LD_VAR 0 8
68369: PPUSH
68370: LD_INT 0
68372: PPUSH
68373: CALL_OW 49
// end ;
68377: GO 68275
68379: POP
68380: POP
// if enchidnas then
68381: LD_VAR 0 4
68385: IFFALSE 68452
// for i = 1 to enchidnas do
68387: LD_ADDR_VAR 0 11
68391: PUSH
68392: DOUBLE
68393: LD_INT 1
68395: DEC
68396: ST_TO_ADDR
68397: LD_VAR 0 4
68401: PUSH
68402: FOR_TO
68403: IFFALSE 68450
// begin hc_class = 13 ;
68405: LD_ADDR_OWVAR 28
68409: PUSH
68410: LD_INT 13
68412: ST_TO_ADDR
// hc_gallery =  ;
68413: LD_ADDR_OWVAR 33
68417: PUSH
68418: LD_STRING 
68420: ST_TO_ADDR
// animal := CreateHuman ;
68421: LD_ADDR_VAR 0 12
68425: PUSH
68426: CALL_OW 44
68430: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
68431: LD_VAR 0 12
68435: PPUSH
68436: LD_VAR 0 8
68440: PPUSH
68441: LD_INT 0
68443: PPUSH
68444: CALL_OW 49
// end ;
68448: GO 68402
68450: POP
68451: POP
// if not wat_area then
68452: LD_VAR 0 9
68456: NOT
68457: IFFALSE 68461
// exit ;
68459: GO 68532
// if fishes then
68461: LD_VAR 0 7
68465: IFFALSE 68532
// for i = 1 to fishes do
68467: LD_ADDR_VAR 0 11
68471: PUSH
68472: DOUBLE
68473: LD_INT 1
68475: DEC
68476: ST_TO_ADDR
68477: LD_VAR 0 7
68481: PUSH
68482: FOR_TO
68483: IFFALSE 68530
// begin hc_class = 20 ;
68485: LD_ADDR_OWVAR 28
68489: PUSH
68490: LD_INT 20
68492: ST_TO_ADDR
// hc_gallery =  ;
68493: LD_ADDR_OWVAR 33
68497: PUSH
68498: LD_STRING 
68500: ST_TO_ADDR
// animal := CreateHuman ;
68501: LD_ADDR_VAR 0 12
68505: PUSH
68506: CALL_OW 44
68510: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
68511: LD_VAR 0 12
68515: PPUSH
68516: LD_VAR 0 9
68520: PPUSH
68521: LD_INT 0
68523: PPUSH
68524: CALL_OW 49
// end ;
68528: GO 68482
68530: POP
68531: POP
// end ;
68532: LD_VAR 0 10
68536: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
68537: LD_INT 0
68539: PPUSH
68540: PPUSH
68541: PPUSH
68542: PPUSH
68543: PPUSH
68544: PPUSH
68545: PPUSH
68546: PPUSH
68547: PPUSH
68548: PPUSH
68549: PPUSH
68550: PPUSH
68551: PPUSH
68552: PPUSH
68553: PPUSH
68554: PPUSH
68555: PPUSH
68556: PPUSH
68557: PPUSH
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
68564: PPUSH
68565: PPUSH
68566: PPUSH
// if not list then
68567: LD_VAR 0 1
68571: NOT
68572: IFFALSE 68576
// exit ;
68574: GO 71873
// base := list [ 1 ] ;
68576: LD_ADDR_VAR 0 3
68580: PUSH
68581: LD_VAR 0 1
68585: PUSH
68586: LD_INT 1
68588: ARRAY
68589: ST_TO_ADDR
// group := list [ 2 ] ;
68590: LD_ADDR_VAR 0 4
68594: PUSH
68595: LD_VAR 0 1
68599: PUSH
68600: LD_INT 2
68602: ARRAY
68603: ST_TO_ADDR
// path := list [ 3 ] ;
68604: LD_ADDR_VAR 0 5
68608: PUSH
68609: LD_VAR 0 1
68613: PUSH
68614: LD_INT 3
68616: ARRAY
68617: ST_TO_ADDR
// flags := list [ 4 ] ;
68618: LD_ADDR_VAR 0 6
68622: PUSH
68623: LD_VAR 0 1
68627: PUSH
68628: LD_INT 4
68630: ARRAY
68631: ST_TO_ADDR
// mined := [ ] ;
68632: LD_ADDR_VAR 0 27
68636: PUSH
68637: EMPTY
68638: ST_TO_ADDR
// bombed := [ ] ;
68639: LD_ADDR_VAR 0 28
68643: PUSH
68644: EMPTY
68645: ST_TO_ADDR
// if not group or not path then
68646: LD_VAR 0 4
68650: NOT
68651: PUSH
68652: LD_VAR 0 5
68656: NOT
68657: OR
68658: IFFALSE 68662
// exit ;
68660: GO 71873
// if flags then
68662: LD_VAR 0 6
68666: IFFALSE 68810
// begin f_ignore_area := flags [ 1 ] ;
68668: LD_ADDR_VAR 0 17
68672: PUSH
68673: LD_VAR 0 6
68677: PUSH
68678: LD_INT 1
68680: ARRAY
68681: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
68682: LD_ADDR_VAR 0 18
68686: PUSH
68687: LD_VAR 0 6
68691: PUSH
68692: LD_INT 2
68694: ARRAY
68695: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
68696: LD_ADDR_VAR 0 19
68700: PUSH
68701: LD_VAR 0 6
68705: PUSH
68706: LD_INT 3
68708: ARRAY
68709: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
68710: LD_ADDR_VAR 0 20
68714: PUSH
68715: LD_VAR 0 6
68719: PUSH
68720: LD_INT 4
68722: ARRAY
68723: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
68724: LD_ADDR_VAR 0 21
68728: PUSH
68729: LD_VAR 0 6
68733: PUSH
68734: LD_INT 5
68736: ARRAY
68737: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
68738: LD_ADDR_VAR 0 22
68742: PUSH
68743: LD_VAR 0 6
68747: PUSH
68748: LD_INT 6
68750: ARRAY
68751: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
68752: LD_ADDR_VAR 0 23
68756: PUSH
68757: LD_VAR 0 6
68761: PUSH
68762: LD_INT 7
68764: ARRAY
68765: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
68766: LD_ADDR_VAR 0 24
68770: PUSH
68771: LD_VAR 0 6
68775: PUSH
68776: LD_INT 8
68778: ARRAY
68779: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
68780: LD_ADDR_VAR 0 25
68784: PUSH
68785: LD_VAR 0 6
68789: PUSH
68790: LD_INT 9
68792: ARRAY
68793: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
68794: LD_ADDR_VAR 0 26
68798: PUSH
68799: LD_VAR 0 6
68803: PUSH
68804: LD_INT 10
68806: ARRAY
68807: ST_TO_ADDR
// end else
68808: GO 68890
// begin f_ignore_area := false ;
68810: LD_ADDR_VAR 0 17
68814: PUSH
68815: LD_INT 0
68817: ST_TO_ADDR
// f_capture := false ;
68818: LD_ADDR_VAR 0 18
68822: PUSH
68823: LD_INT 0
68825: ST_TO_ADDR
// f_ignore_civ := false ;
68826: LD_ADDR_VAR 0 19
68830: PUSH
68831: LD_INT 0
68833: ST_TO_ADDR
// f_murder := false ;
68834: LD_ADDR_VAR 0 20
68838: PUSH
68839: LD_INT 0
68841: ST_TO_ADDR
// f_mines := false ;
68842: LD_ADDR_VAR 0 21
68846: PUSH
68847: LD_INT 0
68849: ST_TO_ADDR
// f_repair := false ;
68850: LD_ADDR_VAR 0 22
68854: PUSH
68855: LD_INT 0
68857: ST_TO_ADDR
// f_heal := false ;
68858: LD_ADDR_VAR 0 23
68862: PUSH
68863: LD_INT 0
68865: ST_TO_ADDR
// f_spacetime := false ;
68866: LD_ADDR_VAR 0 24
68870: PUSH
68871: LD_INT 0
68873: ST_TO_ADDR
// f_attack_depot := false ;
68874: LD_ADDR_VAR 0 25
68878: PUSH
68879: LD_INT 0
68881: ST_TO_ADDR
// f_crawl := false ;
68882: LD_ADDR_VAR 0 26
68886: PUSH
68887: LD_INT 0
68889: ST_TO_ADDR
// end ; units_path := [ ] ;
68890: LD_ADDR_VAR 0 16
68894: PUSH
68895: EMPTY
68896: ST_TO_ADDR
// for i = 1 to group do
68897: LD_ADDR_VAR 0 7
68901: PUSH
68902: DOUBLE
68903: LD_INT 1
68905: DEC
68906: ST_TO_ADDR
68907: LD_VAR 0 4
68911: PUSH
68912: FOR_TO
68913: IFFALSE 68942
// begin units_path := Replace ( units_path , i , path ) ;
68915: LD_ADDR_VAR 0 16
68919: PUSH
68920: LD_VAR 0 16
68924: PPUSH
68925: LD_VAR 0 7
68929: PPUSH
68930: LD_VAR 0 5
68934: PPUSH
68935: CALL_OW 1
68939: ST_TO_ADDR
// end ;
68940: GO 68912
68942: POP
68943: POP
// repeat for i = group downto 1 do
68944: LD_ADDR_VAR 0 7
68948: PUSH
68949: DOUBLE
68950: LD_VAR 0 4
68954: INC
68955: ST_TO_ADDR
68956: LD_INT 1
68958: PUSH
68959: FOR_DOWNTO
68960: IFFALSE 71855
// begin wait ( 0 0$1 ) ;
68962: LD_INT 35
68964: PPUSH
68965: CALL_OW 67
// tmp := [ ] ;
68969: LD_ADDR_VAR 0 14
68973: PUSH
68974: EMPTY
68975: ST_TO_ADDR
// attacking := false ;
68976: LD_ADDR_VAR 0 29
68980: PUSH
68981: LD_INT 0
68983: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
68984: LD_VAR 0 4
68988: PUSH
68989: LD_VAR 0 7
68993: ARRAY
68994: PPUSH
68995: CALL_OW 301
68999: PUSH
69000: LD_VAR 0 4
69004: PUSH
69005: LD_VAR 0 7
69009: ARRAY
69010: NOT
69011: OR
69012: IFFALSE 69056
// begin group := Delete ( group , i ) ;
69014: LD_ADDR_VAR 0 4
69018: PUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: LD_VAR 0 7
69028: PPUSH
69029: CALL_OW 3
69033: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
69034: LD_ADDR_VAR 0 16
69038: PUSH
69039: LD_VAR 0 16
69043: PPUSH
69044: LD_VAR 0 7
69048: PPUSH
69049: CALL_OW 3
69053: ST_TO_ADDR
// continue ;
69054: GO 68959
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
69056: LD_VAR 0 4
69060: PUSH
69061: LD_VAR 0 7
69065: ARRAY
69066: PPUSH
69067: LD_INT 10
69069: PPUSH
69070: CALL 67024 0 2
69074: NOT
69075: PUSH
69076: LD_VAR 0 16
69080: PUSH
69081: LD_VAR 0 7
69085: ARRAY
69086: PUSH
69087: EMPTY
69088: EQUAL
69089: NOT
69090: AND
69091: IFFALSE 69357
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
69093: LD_VAR 0 4
69097: PUSH
69098: LD_VAR 0 7
69102: ARRAY
69103: PPUSH
69104: CALL_OW 262
69108: PUSH
69109: LD_INT 1
69111: PUSH
69112: LD_INT 2
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: IN
69119: IFFALSE 69160
// if GetFuel ( group [ i ] ) < 10 then
69121: LD_VAR 0 4
69125: PUSH
69126: LD_VAR 0 7
69130: ARRAY
69131: PPUSH
69132: CALL_OW 261
69136: PUSH
69137: LD_INT 10
69139: LESS
69140: IFFALSE 69160
// SetFuel ( group [ i ] , 12 ) ;
69142: LD_VAR 0 4
69146: PUSH
69147: LD_VAR 0 7
69151: ARRAY
69152: PPUSH
69153: LD_INT 12
69155: PPUSH
69156: CALL_OW 240
// if units_path [ i ] then
69160: LD_VAR 0 16
69164: PUSH
69165: LD_VAR 0 7
69169: ARRAY
69170: IFFALSE 69355
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
69172: LD_VAR 0 4
69176: PUSH
69177: LD_VAR 0 7
69181: ARRAY
69182: PPUSH
69183: LD_VAR 0 16
69187: PUSH
69188: LD_VAR 0 7
69192: ARRAY
69193: PUSH
69194: LD_INT 1
69196: ARRAY
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_VAR 0 16
69206: PUSH
69207: LD_VAR 0 7
69211: ARRAY
69212: PUSH
69213: LD_INT 1
69215: ARRAY
69216: PUSH
69217: LD_INT 2
69219: ARRAY
69220: PPUSH
69221: CALL_OW 297
69225: PUSH
69226: LD_INT 6
69228: GREATER
69229: IFFALSE 69304
// begin if not HasTask ( group [ i ] ) then
69231: LD_VAR 0 4
69235: PUSH
69236: LD_VAR 0 7
69240: ARRAY
69241: PPUSH
69242: CALL_OW 314
69246: NOT
69247: IFFALSE 69302
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
69249: LD_VAR 0 4
69253: PUSH
69254: LD_VAR 0 7
69258: ARRAY
69259: PPUSH
69260: LD_VAR 0 16
69264: PUSH
69265: LD_VAR 0 7
69269: ARRAY
69270: PUSH
69271: LD_INT 1
69273: ARRAY
69274: PUSH
69275: LD_INT 1
69277: ARRAY
69278: PPUSH
69279: LD_VAR 0 16
69283: PUSH
69284: LD_VAR 0 7
69288: ARRAY
69289: PUSH
69290: LD_INT 1
69292: ARRAY
69293: PUSH
69294: LD_INT 2
69296: ARRAY
69297: PPUSH
69298: CALL_OW 114
// end else
69302: GO 69355
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
69304: LD_ADDR_VAR 0 15
69308: PUSH
69309: LD_VAR 0 16
69313: PUSH
69314: LD_VAR 0 7
69318: ARRAY
69319: PPUSH
69320: LD_INT 1
69322: PPUSH
69323: CALL_OW 3
69327: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
69328: LD_ADDR_VAR 0 16
69332: PUSH
69333: LD_VAR 0 16
69337: PPUSH
69338: LD_VAR 0 7
69342: PPUSH
69343: LD_VAR 0 15
69347: PPUSH
69348: CALL_OW 1
69352: ST_TO_ADDR
// continue ;
69353: GO 68959
// end ; end ; end else
69355: GO 71853
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
69357: LD_ADDR_VAR 0 14
69361: PUSH
69362: LD_INT 81
69364: PUSH
69365: LD_VAR 0 4
69369: PUSH
69370: LD_VAR 0 7
69374: ARRAY
69375: PPUSH
69376: CALL_OW 255
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PPUSH
69385: CALL_OW 69
69389: ST_TO_ADDR
// if not tmp then
69390: LD_VAR 0 14
69394: NOT
69395: IFFALSE 69399
// continue ;
69397: GO 68959
// if f_ignore_area then
69399: LD_VAR 0 17
69403: IFFALSE 69491
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
69405: LD_ADDR_VAR 0 15
69409: PUSH
69410: LD_VAR 0 14
69414: PPUSH
69415: LD_INT 3
69417: PUSH
69418: LD_INT 92
69420: PUSH
69421: LD_VAR 0 17
69425: PUSH
69426: LD_INT 1
69428: ARRAY
69429: PUSH
69430: LD_VAR 0 17
69434: PUSH
69435: LD_INT 2
69437: ARRAY
69438: PUSH
69439: LD_VAR 0 17
69443: PUSH
69444: LD_INT 3
69446: ARRAY
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PPUSH
69458: CALL_OW 72
69462: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
69463: LD_VAR 0 14
69467: PUSH
69468: LD_VAR 0 15
69472: DIFF
69473: IFFALSE 69491
// tmp := tmp diff tmp2 ;
69475: LD_ADDR_VAR 0 14
69479: PUSH
69480: LD_VAR 0 14
69484: PUSH
69485: LD_VAR 0 15
69489: DIFF
69490: ST_TO_ADDR
// end ; if not f_murder then
69491: LD_VAR 0 20
69495: NOT
69496: IFFALSE 69554
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
69498: LD_ADDR_VAR 0 15
69502: PUSH
69503: LD_VAR 0 14
69507: PPUSH
69508: LD_INT 3
69510: PUSH
69511: LD_INT 50
69513: PUSH
69514: EMPTY
69515: LIST
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PPUSH
69521: CALL_OW 72
69525: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
69526: LD_VAR 0 14
69530: PUSH
69531: LD_VAR 0 15
69535: DIFF
69536: IFFALSE 69554
// tmp := tmp diff tmp2 ;
69538: LD_ADDR_VAR 0 14
69542: PUSH
69543: LD_VAR 0 14
69547: PUSH
69548: LD_VAR 0 15
69552: DIFF
69553: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
69554: LD_ADDR_VAR 0 14
69558: PUSH
69559: LD_VAR 0 4
69563: PUSH
69564: LD_VAR 0 7
69568: ARRAY
69569: PPUSH
69570: LD_VAR 0 14
69574: PPUSH
69575: LD_INT 1
69577: PPUSH
69578: LD_INT 1
69580: PPUSH
69581: CALL 41230 0 4
69585: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
69586: LD_VAR 0 4
69590: PUSH
69591: LD_VAR 0 7
69595: ARRAY
69596: PPUSH
69597: CALL_OW 257
69601: PUSH
69602: LD_INT 1
69604: EQUAL
69605: IFFALSE 70053
// begin if WantPlant ( group [ i ] ) then
69607: LD_VAR 0 4
69611: PUSH
69612: LD_VAR 0 7
69616: ARRAY
69617: PPUSH
69618: CALL 40698 0 1
69622: IFFALSE 69626
// continue ;
69624: GO 68959
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
69626: LD_VAR 0 18
69630: PUSH
69631: LD_VAR 0 4
69635: PUSH
69636: LD_VAR 0 7
69640: ARRAY
69641: PPUSH
69642: CALL_OW 310
69646: NOT
69647: AND
69648: PUSH
69649: LD_VAR 0 14
69653: PUSH
69654: LD_INT 1
69656: ARRAY
69657: PUSH
69658: LD_VAR 0 14
69662: PPUSH
69663: LD_INT 21
69665: PUSH
69666: LD_INT 2
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 58
69675: PUSH
69676: EMPTY
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PPUSH
69683: CALL_OW 72
69687: IN
69688: AND
69689: IFFALSE 69725
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
69691: LD_VAR 0 4
69695: PUSH
69696: LD_VAR 0 7
69700: ARRAY
69701: PPUSH
69702: LD_VAR 0 14
69706: PUSH
69707: LD_INT 1
69709: ARRAY
69710: PPUSH
69711: CALL_OW 120
// attacking := true ;
69715: LD_ADDR_VAR 0 29
69719: PUSH
69720: LD_INT 1
69722: ST_TO_ADDR
// continue ;
69723: GO 68959
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
69725: LD_VAR 0 26
69729: PUSH
69730: LD_VAR 0 4
69734: PUSH
69735: LD_VAR 0 7
69739: ARRAY
69740: PPUSH
69741: CALL_OW 257
69745: PUSH
69746: LD_INT 1
69748: EQUAL
69749: AND
69750: PUSH
69751: LD_VAR 0 4
69755: PUSH
69756: LD_VAR 0 7
69760: ARRAY
69761: PPUSH
69762: CALL_OW 256
69766: PUSH
69767: LD_INT 800
69769: LESS
69770: AND
69771: PUSH
69772: LD_VAR 0 4
69776: PUSH
69777: LD_VAR 0 7
69781: ARRAY
69782: PPUSH
69783: CALL_OW 318
69787: NOT
69788: AND
69789: IFFALSE 69806
// ComCrawl ( group [ i ] ) ;
69791: LD_VAR 0 4
69795: PUSH
69796: LD_VAR 0 7
69800: ARRAY
69801: PPUSH
69802: CALL_OW 137
// if f_mines then
69806: LD_VAR 0 21
69810: IFFALSE 70053
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
69812: LD_VAR 0 14
69816: PUSH
69817: LD_INT 1
69819: ARRAY
69820: PPUSH
69821: CALL_OW 247
69825: PUSH
69826: LD_INT 3
69828: EQUAL
69829: PUSH
69830: LD_VAR 0 14
69834: PUSH
69835: LD_INT 1
69837: ARRAY
69838: PUSH
69839: LD_VAR 0 27
69843: IN
69844: NOT
69845: AND
69846: IFFALSE 70053
// begin x := GetX ( tmp [ 1 ] ) ;
69848: LD_ADDR_VAR 0 10
69852: PUSH
69853: LD_VAR 0 14
69857: PUSH
69858: LD_INT 1
69860: ARRAY
69861: PPUSH
69862: CALL_OW 250
69866: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
69867: LD_ADDR_VAR 0 11
69871: PUSH
69872: LD_VAR 0 14
69876: PUSH
69877: LD_INT 1
69879: ARRAY
69880: PPUSH
69881: CALL_OW 251
69885: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
69886: LD_ADDR_VAR 0 12
69890: PUSH
69891: LD_VAR 0 4
69895: PUSH
69896: LD_VAR 0 7
69900: ARRAY
69901: PPUSH
69902: CALL 67109 0 1
69906: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
69907: LD_VAR 0 4
69911: PUSH
69912: LD_VAR 0 7
69916: ARRAY
69917: PPUSH
69918: LD_VAR 0 10
69922: PPUSH
69923: LD_VAR 0 11
69927: PPUSH
69928: LD_VAR 0 14
69932: PUSH
69933: LD_INT 1
69935: ARRAY
69936: PPUSH
69937: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
69941: LD_VAR 0 4
69945: PUSH
69946: LD_VAR 0 7
69950: ARRAY
69951: PPUSH
69952: LD_VAR 0 10
69956: PPUSH
69957: LD_VAR 0 12
69961: PPUSH
69962: LD_INT 7
69964: PPUSH
69965: CALL_OW 272
69969: PPUSH
69970: LD_VAR 0 11
69974: PPUSH
69975: LD_VAR 0 12
69979: PPUSH
69980: LD_INT 7
69982: PPUSH
69983: CALL_OW 273
69987: PPUSH
69988: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
69992: LD_VAR 0 4
69996: PUSH
69997: LD_VAR 0 7
70001: ARRAY
70002: PPUSH
70003: LD_INT 71
70005: PPUSH
70006: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
70010: LD_ADDR_VAR 0 27
70014: PUSH
70015: LD_VAR 0 27
70019: PPUSH
70020: LD_VAR 0 27
70024: PUSH
70025: LD_INT 1
70027: PLUS
70028: PPUSH
70029: LD_VAR 0 14
70033: PUSH
70034: LD_INT 1
70036: ARRAY
70037: PPUSH
70038: CALL_OW 1
70042: ST_TO_ADDR
// attacking := true ;
70043: LD_ADDR_VAR 0 29
70047: PUSH
70048: LD_INT 1
70050: ST_TO_ADDR
// continue ;
70051: GO 68959
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
70053: LD_VAR 0 4
70057: PUSH
70058: LD_VAR 0 7
70062: ARRAY
70063: PPUSH
70064: CALL_OW 257
70068: PUSH
70069: LD_INT 17
70071: EQUAL
70072: PUSH
70073: LD_VAR 0 4
70077: PUSH
70078: LD_VAR 0 7
70082: ARRAY
70083: PPUSH
70084: CALL_OW 110
70088: PUSH
70089: LD_INT 71
70091: EQUAL
70092: NOT
70093: AND
70094: IFFALSE 70240
// begin attacking := false ;
70096: LD_ADDR_VAR 0 29
70100: PUSH
70101: LD_INT 0
70103: ST_TO_ADDR
// k := 5 ;
70104: LD_ADDR_VAR 0 9
70108: PUSH
70109: LD_INT 5
70111: ST_TO_ADDR
// if tmp < k then
70112: LD_VAR 0 14
70116: PUSH
70117: LD_VAR 0 9
70121: LESS
70122: IFFALSE 70134
// k := tmp ;
70124: LD_ADDR_VAR 0 9
70128: PUSH
70129: LD_VAR 0 14
70133: ST_TO_ADDR
// for j = 1 to k do
70134: LD_ADDR_VAR 0 8
70138: PUSH
70139: DOUBLE
70140: LD_INT 1
70142: DEC
70143: ST_TO_ADDR
70144: LD_VAR 0 9
70148: PUSH
70149: FOR_TO
70150: IFFALSE 70238
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
70152: LD_VAR 0 14
70156: PUSH
70157: LD_VAR 0 8
70161: ARRAY
70162: PUSH
70163: LD_VAR 0 14
70167: PPUSH
70168: LD_INT 58
70170: PUSH
70171: EMPTY
70172: LIST
70173: PPUSH
70174: CALL_OW 72
70178: IN
70179: NOT
70180: IFFALSE 70236
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
70182: LD_VAR 0 4
70186: PUSH
70187: LD_VAR 0 7
70191: ARRAY
70192: PPUSH
70193: LD_VAR 0 14
70197: PUSH
70198: LD_VAR 0 8
70202: ARRAY
70203: PPUSH
70204: CALL_OW 115
// attacking := true ;
70208: LD_ADDR_VAR 0 29
70212: PUSH
70213: LD_INT 1
70215: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
70216: LD_VAR 0 4
70220: PUSH
70221: LD_VAR 0 7
70225: ARRAY
70226: PPUSH
70227: LD_INT 71
70229: PPUSH
70230: CALL_OW 109
// continue ;
70234: GO 70149
// end ; end ;
70236: GO 70149
70238: POP
70239: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
70240: LD_VAR 0 4
70244: PUSH
70245: LD_VAR 0 7
70249: ARRAY
70250: PPUSH
70251: CALL_OW 257
70255: PUSH
70256: LD_INT 8
70258: EQUAL
70259: PUSH
70260: LD_VAR 0 4
70264: PUSH
70265: LD_VAR 0 7
70269: ARRAY
70270: PPUSH
70271: CALL_OW 264
70275: PUSH
70276: LD_INT 28
70278: PUSH
70279: LD_INT 45
70281: PUSH
70282: LD_INT 7
70284: PUSH
70285: LD_INT 47
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: IN
70294: OR
70295: IFFALSE 70525
// begin attacking := false ;
70297: LD_ADDR_VAR 0 29
70301: PUSH
70302: LD_INT 0
70304: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
70305: LD_VAR 0 14
70309: PUSH
70310: LD_INT 1
70312: ARRAY
70313: PPUSH
70314: CALL_OW 266
70318: PUSH
70319: LD_INT 32
70321: PUSH
70322: LD_INT 31
70324: PUSH
70325: LD_INT 33
70327: PUSH
70328: LD_INT 4
70330: PUSH
70331: LD_INT 5
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: IN
70341: IFFALSE 70525
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
70343: LD_ADDR_VAR 0 9
70347: PUSH
70348: LD_VAR 0 14
70352: PUSH
70353: LD_INT 1
70355: ARRAY
70356: PPUSH
70357: CALL_OW 266
70361: PPUSH
70362: LD_VAR 0 14
70366: PUSH
70367: LD_INT 1
70369: ARRAY
70370: PPUSH
70371: CALL_OW 250
70375: PPUSH
70376: LD_VAR 0 14
70380: PUSH
70381: LD_INT 1
70383: ARRAY
70384: PPUSH
70385: CALL_OW 251
70389: PPUSH
70390: LD_VAR 0 14
70394: PUSH
70395: LD_INT 1
70397: ARRAY
70398: PPUSH
70399: CALL_OW 254
70403: PPUSH
70404: LD_VAR 0 14
70408: PUSH
70409: LD_INT 1
70411: ARRAY
70412: PPUSH
70413: CALL_OW 248
70417: PPUSH
70418: LD_INT 0
70420: PPUSH
70421: CALL 48485 0 6
70425: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
70426: LD_ADDR_VAR 0 8
70430: PUSH
70431: LD_VAR 0 4
70435: PUSH
70436: LD_VAR 0 7
70440: ARRAY
70441: PPUSH
70442: LD_VAR 0 9
70446: PPUSH
70447: CALL 67172 0 2
70451: ST_TO_ADDR
// if j then
70452: LD_VAR 0 8
70456: IFFALSE 70525
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
70458: LD_VAR 0 8
70462: PUSH
70463: LD_INT 1
70465: ARRAY
70466: PPUSH
70467: LD_VAR 0 8
70471: PUSH
70472: LD_INT 2
70474: ARRAY
70475: PPUSH
70476: CALL_OW 488
70480: IFFALSE 70525
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
70482: LD_VAR 0 4
70486: PUSH
70487: LD_VAR 0 7
70491: ARRAY
70492: PPUSH
70493: LD_VAR 0 8
70497: PUSH
70498: LD_INT 1
70500: ARRAY
70501: PPUSH
70502: LD_VAR 0 8
70506: PUSH
70507: LD_INT 2
70509: ARRAY
70510: PPUSH
70511: CALL_OW 116
// attacking := true ;
70515: LD_ADDR_VAR 0 29
70519: PUSH
70520: LD_INT 1
70522: ST_TO_ADDR
// continue ;
70523: GO 68959
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
70525: LD_VAR 0 4
70529: PUSH
70530: LD_VAR 0 7
70534: ARRAY
70535: PPUSH
70536: CALL_OW 265
70540: PUSH
70541: LD_INT 11
70543: EQUAL
70544: IFFALSE 70822
// begin k := 10 ;
70546: LD_ADDR_VAR 0 9
70550: PUSH
70551: LD_INT 10
70553: ST_TO_ADDR
// x := 0 ;
70554: LD_ADDR_VAR 0 10
70558: PUSH
70559: LD_INT 0
70561: ST_TO_ADDR
// if tmp < k then
70562: LD_VAR 0 14
70566: PUSH
70567: LD_VAR 0 9
70571: LESS
70572: IFFALSE 70584
// k := tmp ;
70574: LD_ADDR_VAR 0 9
70578: PUSH
70579: LD_VAR 0 14
70583: ST_TO_ADDR
// for j = k downto 1 do
70584: LD_ADDR_VAR 0 8
70588: PUSH
70589: DOUBLE
70590: LD_VAR 0 9
70594: INC
70595: ST_TO_ADDR
70596: LD_INT 1
70598: PUSH
70599: FOR_DOWNTO
70600: IFFALSE 70675
// begin if GetType ( tmp [ j ] ) = unit_human then
70602: LD_VAR 0 14
70606: PUSH
70607: LD_VAR 0 8
70611: ARRAY
70612: PPUSH
70613: CALL_OW 247
70617: PUSH
70618: LD_INT 1
70620: EQUAL
70621: IFFALSE 70673
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
70623: LD_VAR 0 4
70627: PUSH
70628: LD_VAR 0 7
70632: ARRAY
70633: PPUSH
70634: LD_VAR 0 14
70638: PUSH
70639: LD_VAR 0 8
70643: ARRAY
70644: PPUSH
70645: CALL 67443 0 2
// x := tmp [ j ] ;
70649: LD_ADDR_VAR 0 10
70653: PUSH
70654: LD_VAR 0 14
70658: PUSH
70659: LD_VAR 0 8
70663: ARRAY
70664: ST_TO_ADDR
// attacking := true ;
70665: LD_ADDR_VAR 0 29
70669: PUSH
70670: LD_INT 1
70672: ST_TO_ADDR
// end ; end ;
70673: GO 70599
70675: POP
70676: POP
// if not x then
70677: LD_VAR 0 10
70681: NOT
70682: IFFALSE 70822
// begin attacking := true ;
70684: LD_ADDR_VAR 0 29
70688: PUSH
70689: LD_INT 1
70691: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
70692: LD_VAR 0 4
70696: PUSH
70697: LD_VAR 0 7
70701: ARRAY
70702: PPUSH
70703: CALL_OW 250
70707: PPUSH
70708: LD_VAR 0 4
70712: PUSH
70713: LD_VAR 0 7
70717: ARRAY
70718: PPUSH
70719: CALL_OW 251
70723: PPUSH
70724: CALL_OW 546
70728: PUSH
70729: LD_INT 2
70731: ARRAY
70732: PUSH
70733: LD_VAR 0 14
70737: PUSH
70738: LD_INT 1
70740: ARRAY
70741: PPUSH
70742: CALL_OW 250
70746: PPUSH
70747: LD_VAR 0 14
70751: PUSH
70752: LD_INT 1
70754: ARRAY
70755: PPUSH
70756: CALL_OW 251
70760: PPUSH
70761: CALL_OW 546
70765: PUSH
70766: LD_INT 2
70768: ARRAY
70769: EQUAL
70770: IFFALSE 70798
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
70772: LD_VAR 0 4
70776: PUSH
70777: LD_VAR 0 7
70781: ARRAY
70782: PPUSH
70783: LD_VAR 0 14
70787: PUSH
70788: LD_INT 1
70790: ARRAY
70791: PPUSH
70792: CALL 67443 0 2
70796: GO 70822
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
70798: LD_VAR 0 4
70802: PUSH
70803: LD_VAR 0 7
70807: ARRAY
70808: PPUSH
70809: LD_VAR 0 14
70813: PUSH
70814: LD_INT 1
70816: ARRAY
70817: PPUSH
70818: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
70822: LD_VAR 0 4
70826: PUSH
70827: LD_VAR 0 7
70831: ARRAY
70832: PPUSH
70833: CALL_OW 264
70837: PUSH
70838: LD_INT 29
70840: EQUAL
70841: IFFALSE 71207
// begin if WantsToAttack ( group [ i ] ) in bombed then
70843: LD_VAR 0 4
70847: PUSH
70848: LD_VAR 0 7
70852: ARRAY
70853: PPUSH
70854: CALL_OW 319
70858: PUSH
70859: LD_VAR 0 28
70863: IN
70864: IFFALSE 70868
// continue ;
70866: GO 68959
// k := 8 ;
70868: LD_ADDR_VAR 0 9
70872: PUSH
70873: LD_INT 8
70875: ST_TO_ADDR
// x := 0 ;
70876: LD_ADDR_VAR 0 10
70880: PUSH
70881: LD_INT 0
70883: ST_TO_ADDR
// if tmp < k then
70884: LD_VAR 0 14
70888: PUSH
70889: LD_VAR 0 9
70893: LESS
70894: IFFALSE 70906
// k := tmp ;
70896: LD_ADDR_VAR 0 9
70900: PUSH
70901: LD_VAR 0 14
70905: ST_TO_ADDR
// for j = 1 to k do
70906: LD_ADDR_VAR 0 8
70910: PUSH
70911: DOUBLE
70912: LD_INT 1
70914: DEC
70915: ST_TO_ADDR
70916: LD_VAR 0 9
70920: PUSH
70921: FOR_TO
70922: IFFALSE 71054
// begin if GetType ( tmp [ j ] ) = unit_building then
70924: LD_VAR 0 14
70928: PUSH
70929: LD_VAR 0 8
70933: ARRAY
70934: PPUSH
70935: CALL_OW 247
70939: PUSH
70940: LD_INT 3
70942: EQUAL
70943: IFFALSE 71052
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
70945: LD_VAR 0 14
70949: PUSH
70950: LD_VAR 0 8
70954: ARRAY
70955: PUSH
70956: LD_VAR 0 28
70960: IN
70961: NOT
70962: PUSH
70963: LD_VAR 0 14
70967: PUSH
70968: LD_VAR 0 8
70972: ARRAY
70973: PPUSH
70974: CALL_OW 313
70978: AND
70979: IFFALSE 71052
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
70981: LD_VAR 0 4
70985: PUSH
70986: LD_VAR 0 7
70990: ARRAY
70991: PPUSH
70992: LD_VAR 0 14
70996: PUSH
70997: LD_VAR 0 8
71001: ARRAY
71002: PPUSH
71003: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
71007: LD_ADDR_VAR 0 28
71011: PUSH
71012: LD_VAR 0 28
71016: PPUSH
71017: LD_VAR 0 28
71021: PUSH
71022: LD_INT 1
71024: PLUS
71025: PPUSH
71026: LD_VAR 0 14
71030: PUSH
71031: LD_VAR 0 8
71035: ARRAY
71036: PPUSH
71037: CALL_OW 1
71041: ST_TO_ADDR
// attacking := true ;
71042: LD_ADDR_VAR 0 29
71046: PUSH
71047: LD_INT 1
71049: ST_TO_ADDR
// break ;
71050: GO 71054
// end ; end ;
71052: GO 70921
71054: POP
71055: POP
// if not attacking and f_attack_depot then
71056: LD_VAR 0 29
71060: NOT
71061: PUSH
71062: LD_VAR 0 25
71066: AND
71067: IFFALSE 71162
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71069: LD_ADDR_VAR 0 13
71073: PUSH
71074: LD_VAR 0 14
71078: PPUSH
71079: LD_INT 2
71081: PUSH
71082: LD_INT 30
71084: PUSH
71085: LD_INT 0
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 30
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: LIST
71106: PPUSH
71107: CALL_OW 72
71111: ST_TO_ADDR
// if z then
71112: LD_VAR 0 13
71116: IFFALSE 71162
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
71118: LD_VAR 0 4
71122: PUSH
71123: LD_VAR 0 7
71127: ARRAY
71128: PPUSH
71129: LD_VAR 0 13
71133: PPUSH
71134: LD_VAR 0 4
71138: PUSH
71139: LD_VAR 0 7
71143: ARRAY
71144: PPUSH
71145: CALL_OW 74
71149: PPUSH
71150: CALL_OW 115
// attacking := true ;
71154: LD_ADDR_VAR 0 29
71158: PUSH
71159: LD_INT 1
71161: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
71162: LD_VAR 0 4
71166: PUSH
71167: LD_VAR 0 7
71171: ARRAY
71172: PPUSH
71173: CALL_OW 256
71177: PUSH
71178: LD_INT 500
71180: LESS
71181: IFFALSE 71207
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
71183: LD_VAR 0 4
71187: PUSH
71188: LD_VAR 0 7
71192: ARRAY
71193: PPUSH
71194: LD_VAR 0 14
71198: PUSH
71199: LD_INT 1
71201: ARRAY
71202: PPUSH
71203: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71207: LD_VAR 0 4
71211: PUSH
71212: LD_VAR 0 7
71216: ARRAY
71217: PPUSH
71218: CALL_OW 256
71222: PUSH
71223: LD_INT 250
71225: LESS
71226: PUSH
71227: LD_VAR 0 4
71231: PUSH
71232: LD_VAR 0 7
71236: ARRAY
71237: PUSH
71238: LD_INT 21
71240: PUSH
71241: LD_INT 2
71243: PUSH
71244: EMPTY
71245: LIST
71246: LIST
71247: PUSH
71248: LD_INT 23
71250: PUSH
71251: LD_INT 2
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PPUSH
71262: CALL_OW 69
71266: IN
71267: AND
71268: IFFALSE 71393
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
71270: LD_ADDR_VAR 0 9
71274: PUSH
71275: LD_OWVAR 3
71279: PUSH
71280: LD_VAR 0 4
71284: PUSH
71285: LD_VAR 0 7
71289: ARRAY
71290: DIFF
71291: PPUSH
71292: LD_VAR 0 4
71296: PUSH
71297: LD_VAR 0 7
71301: ARRAY
71302: PPUSH
71303: CALL_OW 74
71307: ST_TO_ADDR
// if not k then
71308: LD_VAR 0 9
71312: NOT
71313: IFFALSE 71317
// continue ;
71315: GO 68959
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
71317: LD_VAR 0 9
71321: PUSH
71322: LD_INT 81
71324: PUSH
71325: LD_VAR 0 4
71329: PUSH
71330: LD_VAR 0 7
71334: ARRAY
71335: PPUSH
71336: CALL_OW 255
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PPUSH
71345: CALL_OW 69
71349: IN
71350: PUSH
71351: LD_VAR 0 9
71355: PPUSH
71356: LD_VAR 0 4
71360: PUSH
71361: LD_VAR 0 7
71365: ARRAY
71366: PPUSH
71367: CALL_OW 296
71371: PUSH
71372: LD_INT 5
71374: LESS
71375: AND
71376: IFFALSE 71393
// ComAutodestruct ( group [ i ] ) ;
71378: LD_VAR 0 4
71382: PUSH
71383: LD_VAR 0 7
71387: ARRAY
71388: PPUSH
71389: CALL 67341 0 1
// end ; if f_attack_depot then
71393: LD_VAR 0 25
71397: IFFALSE 71509
// begin k := 6 ;
71399: LD_ADDR_VAR 0 9
71403: PUSH
71404: LD_INT 6
71406: ST_TO_ADDR
// if tmp < k then
71407: LD_VAR 0 14
71411: PUSH
71412: LD_VAR 0 9
71416: LESS
71417: IFFALSE 71429
// k := tmp ;
71419: LD_ADDR_VAR 0 9
71423: PUSH
71424: LD_VAR 0 14
71428: ST_TO_ADDR
// for j = 1 to k do
71429: LD_ADDR_VAR 0 8
71433: PUSH
71434: DOUBLE
71435: LD_INT 1
71437: DEC
71438: ST_TO_ADDR
71439: LD_VAR 0 9
71443: PUSH
71444: FOR_TO
71445: IFFALSE 71507
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
71447: LD_VAR 0 8
71451: PPUSH
71452: CALL_OW 266
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: LD_INT 1
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: IN
71467: IFFALSE 71505
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
71469: LD_VAR 0 4
71473: PUSH
71474: LD_VAR 0 7
71478: ARRAY
71479: PPUSH
71480: LD_VAR 0 14
71484: PUSH
71485: LD_VAR 0 8
71489: ARRAY
71490: PPUSH
71491: CALL_OW 115
// attacking := true ;
71495: LD_ADDR_VAR 0 29
71499: PUSH
71500: LD_INT 1
71502: ST_TO_ADDR
// break ;
71503: GO 71507
// end ;
71505: GO 71444
71507: POP
71508: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
71509: LD_VAR 0 4
71513: PUSH
71514: LD_VAR 0 7
71518: ARRAY
71519: PPUSH
71520: CALL_OW 302
71524: PUSH
71525: LD_VAR 0 29
71529: NOT
71530: AND
71531: IFFALSE 71853
// begin if GetTag ( group [ i ] ) = 71 then
71533: LD_VAR 0 4
71537: PUSH
71538: LD_VAR 0 7
71542: ARRAY
71543: PPUSH
71544: CALL_OW 110
71548: PUSH
71549: LD_INT 71
71551: EQUAL
71552: IFFALSE 71593
// begin if HasTask ( group [ i ] ) then
71554: LD_VAR 0 4
71558: PUSH
71559: LD_VAR 0 7
71563: ARRAY
71564: PPUSH
71565: CALL_OW 314
71569: IFFALSE 71575
// continue else
71571: GO 68959
71573: GO 71593
// SetTag ( group [ i ] , 0 ) ;
71575: LD_VAR 0 4
71579: PUSH
71580: LD_VAR 0 7
71584: ARRAY
71585: PPUSH
71586: LD_INT 0
71588: PPUSH
71589: CALL_OW 109
// end ; k := 8 ;
71593: LD_ADDR_VAR 0 9
71597: PUSH
71598: LD_INT 8
71600: ST_TO_ADDR
// x := 0 ;
71601: LD_ADDR_VAR 0 10
71605: PUSH
71606: LD_INT 0
71608: ST_TO_ADDR
// if tmp < k then
71609: LD_VAR 0 14
71613: PUSH
71614: LD_VAR 0 9
71618: LESS
71619: IFFALSE 71631
// k := tmp ;
71621: LD_ADDR_VAR 0 9
71625: PUSH
71626: LD_VAR 0 14
71630: ST_TO_ADDR
// for j = 1 to k do
71631: LD_ADDR_VAR 0 8
71635: PUSH
71636: DOUBLE
71637: LD_INT 1
71639: DEC
71640: ST_TO_ADDR
71641: LD_VAR 0 9
71645: PUSH
71646: FOR_TO
71647: IFFALSE 71745
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
71649: LD_VAR 0 14
71653: PUSH
71654: LD_VAR 0 8
71658: ARRAY
71659: PPUSH
71660: CALL_OW 247
71664: PUSH
71665: LD_INT 1
71667: EQUAL
71668: PUSH
71669: LD_VAR 0 14
71673: PUSH
71674: LD_VAR 0 8
71678: ARRAY
71679: PPUSH
71680: CALL_OW 256
71684: PUSH
71685: LD_INT 250
71687: LESS
71688: PUSH
71689: LD_VAR 0 20
71693: AND
71694: PUSH
71695: LD_VAR 0 20
71699: NOT
71700: PUSH
71701: LD_VAR 0 14
71705: PUSH
71706: LD_VAR 0 8
71710: ARRAY
71711: PPUSH
71712: CALL_OW 256
71716: PUSH
71717: LD_INT 250
71719: GREATEREQUAL
71720: AND
71721: OR
71722: AND
71723: IFFALSE 71743
// begin x := tmp [ j ] ;
71725: LD_ADDR_VAR 0 10
71729: PUSH
71730: LD_VAR 0 14
71734: PUSH
71735: LD_VAR 0 8
71739: ARRAY
71740: ST_TO_ADDR
// break ;
71741: GO 71745
// end ;
71743: GO 71646
71745: POP
71746: POP
// if x then
71747: LD_VAR 0 10
71751: IFFALSE 71775
// ComAttackUnit ( group [ i ] , x ) else
71753: LD_VAR 0 4
71757: PUSH
71758: LD_VAR 0 7
71762: ARRAY
71763: PPUSH
71764: LD_VAR 0 10
71768: PPUSH
71769: CALL_OW 115
71773: GO 71799
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
71775: LD_VAR 0 4
71779: PUSH
71780: LD_VAR 0 7
71784: ARRAY
71785: PPUSH
71786: LD_VAR 0 14
71790: PUSH
71791: LD_INT 1
71793: ARRAY
71794: PPUSH
71795: CALL_OW 115
// if not HasTask ( group [ i ] ) then
71799: LD_VAR 0 4
71803: PUSH
71804: LD_VAR 0 7
71808: ARRAY
71809: PPUSH
71810: CALL_OW 314
71814: NOT
71815: IFFALSE 71853
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
71817: LD_VAR 0 4
71821: PUSH
71822: LD_VAR 0 7
71826: ARRAY
71827: PPUSH
71828: LD_VAR 0 14
71832: PPUSH
71833: LD_VAR 0 4
71837: PUSH
71838: LD_VAR 0 7
71842: ARRAY
71843: PPUSH
71844: CALL_OW 74
71848: PPUSH
71849: CALL_OW 115
// end ; end ; end ;
71853: GO 68959
71855: POP
71856: POP
// wait ( 0 0$1 ) ;
71857: LD_INT 35
71859: PPUSH
71860: CALL_OW 67
// until group = [ ] ;
71864: LD_VAR 0 4
71868: PUSH
71869: EMPTY
71870: EQUAL
71871: IFFALSE 68944
// end ;
71873: LD_VAR 0 2
71877: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71878: LD_INT 0
71880: PPUSH
71881: PPUSH
71882: PPUSH
71883: PPUSH
// if not base_units then
71884: LD_VAR 0 1
71888: NOT
71889: IFFALSE 71893
// exit ;
71891: GO 71980
// result := false ;
71893: LD_ADDR_VAR 0 2
71897: PUSH
71898: LD_INT 0
71900: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71901: LD_ADDR_VAR 0 5
71905: PUSH
71906: LD_VAR 0 1
71910: PPUSH
71911: LD_INT 21
71913: PUSH
71914: LD_INT 3
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PPUSH
71921: CALL_OW 72
71925: ST_TO_ADDR
// if not tmp then
71926: LD_VAR 0 5
71930: NOT
71931: IFFALSE 71935
// exit ;
71933: GO 71980
// for i in tmp do
71935: LD_ADDR_VAR 0 3
71939: PUSH
71940: LD_VAR 0 5
71944: PUSH
71945: FOR_IN
71946: IFFALSE 71978
// begin result := EnemyInRange ( i , 22 ) ;
71948: LD_ADDR_VAR 0 2
71952: PUSH
71953: LD_VAR 0 3
71957: PPUSH
71958: LD_INT 22
71960: PPUSH
71961: CALL 67024 0 2
71965: ST_TO_ADDR
// if result then
71966: LD_VAR 0 2
71970: IFFALSE 71976
// exit ;
71972: POP
71973: POP
71974: GO 71980
// end ;
71976: GO 71945
71978: POP
71979: POP
// end ;
71980: LD_VAR 0 2
71984: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
71985: LD_INT 0
71987: PPUSH
71988: PPUSH
// if not units then
71989: LD_VAR 0 1
71993: NOT
71994: IFFALSE 71998
// exit ;
71996: GO 72068
// result := [ ] ;
71998: LD_ADDR_VAR 0 3
72002: PUSH
72003: EMPTY
72004: ST_TO_ADDR
// for i in units do
72005: LD_ADDR_VAR 0 4
72009: PUSH
72010: LD_VAR 0 1
72014: PUSH
72015: FOR_IN
72016: IFFALSE 72066
// if GetTag ( i ) = tag then
72018: LD_VAR 0 4
72022: PPUSH
72023: CALL_OW 110
72027: PUSH
72028: LD_VAR 0 2
72032: EQUAL
72033: IFFALSE 72064
// result := Insert ( result , result + 1 , i ) ;
72035: LD_ADDR_VAR 0 3
72039: PUSH
72040: LD_VAR 0 3
72044: PPUSH
72045: LD_VAR 0 3
72049: PUSH
72050: LD_INT 1
72052: PLUS
72053: PPUSH
72054: LD_VAR 0 4
72058: PPUSH
72059: CALL_OW 2
72063: ST_TO_ADDR
72064: GO 72015
72066: POP
72067: POP
// end ;
72068: LD_VAR 0 3
72072: RET
// export function IsDriver ( un ) ; begin
72073: LD_INT 0
72075: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72076: LD_ADDR_VAR 0 2
72080: PUSH
72081: LD_VAR 0 1
72085: PUSH
72086: LD_INT 55
72088: PUSH
72089: EMPTY
72090: LIST
72091: PPUSH
72092: CALL_OW 69
72096: IN
72097: ST_TO_ADDR
// end ;
72098: LD_VAR 0 2
72102: RET
