// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 60 0 0
// InitMacro ;
  12: CALL 46616 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ;
  39: CALL 29199 0 0
// PrepareAmerican ;
  43: CALL 312 0 0
// PrepareArabian ;
  47: CALL 33878 0 0
// Action ;
  51: CALL 39031 0 0
// RunMacro ;
  55: CALL 46779 0 0
// end ;
  59: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  60: LD_INT 0
  62: PPUSH
// debug := false ;
  63: LD_ADDR_EXP 1
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// game := true ;
  71: LD_ADDR_EXP 2
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// mission_prefix := 11_ ;
  79: LD_ADDR_EXP 3
  83: PUSH
  84: LD_STRING 11_
  86: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  87: LD_ADDR_EXP 4
  91: PUSH
  92: LD_STRING 10c_
  94: ST_TO_ADDR
// ar_run := false ;
  95: LD_ADDR_EXP 5
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// ar_patrol := false ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// base_captured := false ;
 111: LD_ADDR_EXP 6
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// us_scout := 0 ;
 119: LD_ADDR_EXP 8
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 127: LD_ADDR_EXP 9
 131: PUSH
 132: LD_INT 0
 134: PUSH
 135: LD_INT 0
 137: PUSH
 138: LD_INT 0
 140: PUSH
 141: LD_INT 0
 143: PUSH
 144: LD_INT 0
 146: PUSH
 147: EMPTY
 148: LIST
 149: LIST
 150: LIST
 151: LIST
 152: LIST
 153: ST_TO_ADDR
// kamikazed := false ;
 154: LD_ADDR_EXP 11
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// artifact_stolen := false ;
 162: LD_ADDR_EXP 12
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// artifact_get := false ;
 170: LD_ADDR_EXP 13
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 178: LD_ADDR_EXP 15
 182: PUSH
 183: LD_INT 189000
 185: PUSH
 186: LD_INT 168000
 188: PUSH
 189: LD_INT 157500
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: LIST
 196: PUSH
 197: LD_OWVAR 67
 201: ARRAY
 202: ST_TO_ADDR
// powell_warn := false ;
 203: LD_ADDR_EXP 16
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// loses_counter := 0 ;
 211: LD_ADDR_EXP 17
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// artifact_oncargo := false ;
 219: LD_ADDR_EXP 14
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 227: LD_ADDR_EXP 18
 231: PUSH
 232: LD_STRING 10_GensherEscape_1
 234: PPUSH
 235: LD_EXP 1
 239: PPUSH
 240: CALL_OW 30
 244: ST_TO_ADDR
// can_kamikazed := false ;
 245: LD_ADDR_EXP 10
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// end ;
 253: LD_VAR 0 1
 257: RET
// function Debuger ; var i ; begin
 258: LD_INT 0
 260: PPUSH
 261: PPUSH
// if not debug then
 262: LD_EXP 1
 266: NOT
 267: IFFALSE 271
// exit ;
 269: GO 307
// game_speed := 5 ;
 271: LD_ADDR_OWVAR 65
 275: PUSH
 276: LD_INT 5
 278: ST_TO_ADDR
// uc_side := 1 ;
 279: LD_ADDR_OWVAR 20
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// uc_nation := 1 ;
 287: LD_ADDR_OWVAR 21
 291: PUSH
 292: LD_INT 1
 294: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 295: LD_EXP 36
 299: PPUSH
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 235
// end ; end_of_file
 307: LD_VAR 0 1
 311: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 312: LD_INT 0
 314: PPUSH
 315: PPUSH
 316: PPUSH
 317: PPUSH
 318: PPUSH
 319: PPUSH
 320: PPUSH
 321: PPUSH
// uc_side := 4 ;
 322: LD_ADDR_OWVAR 20
 326: PUSH
 327: LD_INT 4
 329: ST_TO_ADDR
// uc_nation := 1 ;
 330: LD_ADDR_OWVAR 21
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 338: LD_ADDR_EXP 30
 342: PUSH
 343: LD_STRING Powell
 345: PPUSH
 346: LD_INT 0
 348: PPUSH
 349: CALL 1929 0 2
 353: ST_TO_ADDR
// uc_side := 1 ;
 354: LD_ADDR_OWVAR 20
 358: PUSH
 359: LD_INT 1
 361: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 362: LD_ADDR_EXP 21
 366: PUSH
 367: LD_STRING JMM
 369: PPUSH
 370: LD_EXP 1
 374: NOT
 375: PPUSH
 376: CALL 1929 0 2
 380: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 381: LD_EXP 21
 385: PPUSH
 386: CALL_OW 257
 390: PUSH
 391: LD_INT 4
 393: GREATER
 394: IFFALSE 408
// SetClass ( JMM , 1 ) ;
 396: LD_EXP 21
 400: PPUSH
 401: LD_INT 1
 403: PPUSH
 404: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 408: LD_ADDR_EXP 22
 412: PUSH
 413: LD_STRING Lisa
 415: PPUSH
 416: LD_EXP 1
 420: NOT
 421: PPUSH
 422: CALL 1929 0 2
 426: ST_TO_ADDR
// if not Lisa then
 427: LD_EXP 22
 431: NOT
 432: IFFALSE 447
// Lisa := CreateCharacter ( 10_Lisa ) ;
 434: LD_ADDR_EXP 22
 438: PUSH
 439: LD_STRING 10_Lisa
 441: PPUSH
 442: CALL_OW 34
 446: ST_TO_ADDR
// if not Lisa then
 447: LD_EXP 22
 451: NOT
 452: IFFALSE 467
// Lisa := CreateCharacter ( 09_Lisa ) ;
 454: LD_ADDR_EXP 22
 458: PUSH
 459: LD_STRING 09_Lisa
 461: PPUSH
 462: CALL_OW 34
 466: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 467: LD_ADDR_EXP 31
 471: PUSH
 472: LD_STRING Cornel
 474: PPUSH
 475: LD_EXP 1
 479: NOT
 480: PPUSH
 481: CALL 1929 0 2
 485: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 486: LD_ADDR_EXP 23
 490: PUSH
 491: LD_STRING Donaldson
 493: PPUSH
 494: LD_EXP 1
 498: NOT
 499: PPUSH
 500: CALL 1929 0 2
 504: ST_TO_ADDR
// if not Donaldson then
 505: LD_EXP 23
 509: NOT
 510: IFFALSE 525
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 512: LD_ADDR_EXP 23
 516: PUSH
 517: LD_STRING 10_Donaldson
 519: PPUSH
 520: CALL_OW 34
 524: ST_TO_ADDR
// if not Donaldson then
 525: LD_EXP 23
 529: NOT
 530: IFFALSE 545
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 532: LD_ADDR_EXP 23
 536: PUSH
 537: LD_STRING 09_Donaldson
 539: PPUSH
 540: CALL_OW 34
 544: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 545: LD_ADDR_EXP 24
 549: PUSH
 550: LD_STRING Bobby
 552: PPUSH
 553: LD_EXP 1
 557: NOT
 558: PPUSH
 559: CALL 1929 0 2
 563: ST_TO_ADDR
// if not Bobby then
 564: LD_EXP 24
 568: NOT
 569: IFFALSE 584
// Bobby := CreateCharacter ( 10_Bobby ) ;
 571: LD_ADDR_EXP 24
 575: PUSH
 576: LD_STRING 10_Bobby
 578: PPUSH
 579: CALL_OW 34
 583: ST_TO_ADDR
// if not Bobby then
 584: LD_EXP 24
 588: NOT
 589: IFFALSE 604
// Bobby := CreateCharacter ( 09_Bobby ) ;
 591: LD_ADDR_EXP 24
 595: PUSH
 596: LD_STRING 09_Bobby
 598: PPUSH
 599: CALL_OW 34
 603: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 604: LD_ADDR_EXP 25
 608: PUSH
 609: LD_STRING Cyrus
 611: PPUSH
 612: LD_EXP 1
 616: NOT
 617: PPUSH
 618: CALL 1929 0 2
 622: ST_TO_ADDR
// if not Cyrus then
 623: LD_EXP 25
 627: NOT
 628: IFFALSE 643
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 630: LD_ADDR_EXP 25
 634: PUSH
 635: LD_STRING 10_Cyrus
 637: PPUSH
 638: CALL_OW 34
 642: ST_TO_ADDR
// if not Cyrus then
 643: LD_EXP 25
 647: NOT
 648: IFFALSE 663
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 650: LD_ADDR_EXP 25
 654: PUSH
 655: LD_STRING 09_Cyrus
 657: PPUSH
 658: CALL_OW 34
 662: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 663: LD_ADDR_EXP 26
 667: PUSH
 668: LD_STRING Denis
 670: PPUSH
 671: LD_EXP 1
 675: NOT
 676: PPUSH
 677: CALL 1929 0 2
 681: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 682: LD_ADDR_EXP 27
 686: PUSH
 687: LD_STRING Brown
 689: PPUSH
 690: LD_EXP 1
 694: NOT
 695: PPUSH
 696: CALL 1929 0 2
 700: ST_TO_ADDR
// if not Brown then
 701: LD_EXP 27
 705: NOT
 706: IFFALSE 721
// Brown := CreateCharacter ( 10_Brown ) ;
 708: LD_ADDR_EXP 27
 712: PUSH
 713: LD_STRING 10_Brown
 715: PPUSH
 716: CALL_OW 34
 720: ST_TO_ADDR
// if not Brown then
 721: LD_EXP 27
 725: NOT
 726: IFFALSE 741
// Brown := CreateCharacter ( 08_Brown ) ;
 728: LD_ADDR_EXP 27
 732: PUSH
 733: LD_STRING 08_Brown
 735: PPUSH
 736: CALL_OW 34
 740: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 741: LD_ADDR_EXP 28
 745: PUSH
 746: LD_STRING Gladstone
 748: PPUSH
 749: LD_EXP 1
 753: NOT
 754: PPUSH
 755: CALL 1929 0 2
 759: ST_TO_ADDR
// if not Gladstone then
 760: LD_EXP 28
 764: NOT
 765: IFFALSE 780
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 767: LD_ADDR_EXP 28
 771: PUSH
 772: LD_STRING 10_Gladstone
 774: PPUSH
 775: CALL_OW 34
 779: ST_TO_ADDR
// if not Gladstone then
 780: LD_EXP 28
 784: NOT
 785: IFFALSE 800
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 787: LD_ADDR_EXP 28
 791: PUSH
 792: LD_STRING 08_Gladstone
 794: PPUSH
 795: CALL_OW 34
 799: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 800: LD_ADDR_EXP 29
 804: PUSH
 805: LD_STRING Houten
 807: PPUSH
 808: LD_EXP 1
 812: NOT
 813: PPUSH
 814: CALL 1929 0 2
 818: ST_TO_ADDR
// if not Houten then
 819: LD_EXP 29
 823: NOT
 824: IFFALSE 839
// Houten := CreateCharacter ( 10_Houten ) ;
 826: LD_ADDR_EXP 29
 830: PUSH
 831: LD_STRING 10_Houten
 833: PPUSH
 834: CALL_OW 34
 838: ST_TO_ADDR
// if not Houten then
 839: LD_EXP 29
 843: NOT
 844: IFFALSE 859
// Houten := CreateCharacter ( 09_Houten ) ;
 846: LD_ADDR_EXP 29
 850: PUSH
 851: LD_STRING 09_Houten
 853: PPUSH
 854: CALL_OW 34
 858: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 859: LD_ADDR_EXP 31
 863: PUSH
 864: LD_STRING Cornel
 866: PPUSH
 867: LD_EXP 1
 871: NOT
 872: PPUSH
 873: CALL 1929 0 2
 877: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 878: LD_ADDR_EXP 32
 882: PUSH
 883: LD_STRING Gary
 885: PPUSH
 886: LD_EXP 1
 890: NOT
 891: PPUSH
 892: CALL 1929 0 2
 896: ST_TO_ADDR
// if not Gary then
 897: LD_EXP 32
 901: NOT
 902: IFFALSE 917
// Gary := CreateCharacter ( 10_Gary ) ;
 904: LD_ADDR_EXP 32
 908: PUSH
 909: LD_STRING 10_Gary
 911: PPUSH
 912: CALL_OW 34
 916: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 917: LD_ADDR_EXP 33
 921: PUSH
 922: LD_STRING Frank
 924: PPUSH
 925: LD_EXP 1
 929: NOT
 930: PPUSH
 931: CALL 1929 0 2
 935: ST_TO_ADDR
// if not Frank then
 936: LD_EXP 33
 940: NOT
 941: IFFALSE 956
// Frank := CreateCharacter ( 08_Frank ) ;
 943: LD_ADDR_EXP 33
 947: PUSH
 948: LD_STRING 08_Frank
 950: PPUSH
 951: CALL_OW 34
 955: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 956: LD_ADDR_EXP 34
 960: PUSH
 961: LD_STRING Kikuchi
 963: PPUSH
 964: LD_EXP 1
 968: NOT
 969: PPUSH
 970: CALL 1929 0 2
 974: ST_TO_ADDR
// if not Kikuchi then
 975: LD_EXP 34
 979: NOT
 980: IFFALSE 995
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 982: LD_ADDR_EXP 34
 986: PUSH
 987: LD_STRING 08_Kikuchi
 989: PPUSH
 990: CALL_OW 34
 994: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 995: LD_ADDR_VAR 0 5
 999: PUSH
1000: LD_EXP 22
1004: PUSH
1005: LD_EXP 23
1009: PUSH
1010: LD_EXP 24
1014: PUSH
1015: LD_EXP 25
1019: PUSH
1020: LD_EXP 26
1024: PUSH
1025: LD_EXP 27
1029: PUSH
1030: LD_EXP 28
1034: PUSH
1035: LD_EXP 29
1039: PUSH
1040: LD_EXP 31
1044: PUSH
1045: LD_EXP 32
1049: PUSH
1050: LD_EXP 33
1054: PUSH
1055: LD_EXP 34
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: ST_TO_ADDR
// tmp := tmp diff 0 ;
1074: LD_ADDR_VAR 0 5
1078: PUSH
1079: LD_VAR 0 5
1083: PUSH
1084: LD_INT 0
1086: DIFF
1087: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1088: LD_ADDR_VAR 0 5
1092: PUSH
1093: LD_VAR 0 5
1097: PUSH
1098: LD_STRING 10_lock
1100: PPUSH
1101: CALL_OW 31
1105: UNION
1106: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1107: LD_ADDR_VAR 0 5
1111: PUSH
1112: LD_VAR 0 5
1116: PUSH
1117: LD_STRING 10c_lock
1119: PPUSH
1120: CALL_OW 31
1124: UNION
1125: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1126: LD_STRING 10_lock
1128: PPUSH
1129: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1133: LD_STRING 10c_lock
1135: PPUSH
1136: CALL_OW 40
// for i in tmp do
1140: LD_ADDR_VAR 0 2
1144: PUSH
1145: LD_VAR 0 5
1149: PUSH
1150: FOR_IN
1151: IFFALSE 1182
// if GetClass ( i ) = class_mortar then
1153: LD_VAR 0 2
1157: PPUSH
1158: CALL_OW 257
1162: PUSH
1163: LD_INT 8
1165: EQUAL
1166: IFFALSE 1180
// SetClass ( i , class_soldier ) ;
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL_OW 336
1180: GO 1150
1182: POP
1183: POP
// if tmp < 12 then
1184: LD_VAR 0 5
1188: PUSH
1189: LD_INT 12
1191: LESS
1192: IFFALSE 1290
// begin k := 16 - tmp ;
1194: LD_ADDR_VAR 0 3
1198: PUSH
1199: LD_INT 16
1201: PUSH
1202: LD_VAR 0 5
1206: MINUS
1207: ST_TO_ADDR
// for i = 1 to k do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_VAR 0 3
1222: PUSH
1223: FOR_TO
1224: IFFALSE 1288
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1226: LD_INT 0
1228: PPUSH
1229: LD_INT 1
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 2
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: LD_INT 4
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 12
1261: ARRAY
1262: PPUSH
1263: LD_INT 6
1265: PPUSH
1266: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1270: LD_ADDR_VAR 0 5
1274: PUSH
1275: LD_VAR 0 5
1279: PUSH
1280: CALL_OW 44
1284: ADD
1285: ST_TO_ADDR
// end ;
1286: GO 1223
1288: POP
1289: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1290: LD_ADDR_EXP 20
1294: PUSH
1295: LD_STRING 1
1297: PPUSH
1298: LD_INT 12
1300: PPUSH
1301: LD_INT 12
1303: PPUSH
1304: LD_INT -5
1306: PUSH
1307: LD_EXP 21
1311: PUSH
1312: LD_INT -2
1314: PUSH
1315: LD_INT -3
1317: PUSH
1318: LD_INT -5
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: PUSH
1328: LD_VAR 0 5
1332: ADD
1333: PUSH
1334: LD_INT -6
1336: PUSH
1337: LD_INT -4
1339: PUSH
1340: LD_EXP 30
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: LIST
1349: ADD
1350: PPUSH
1351: LD_INT 1
1353: PUSH
1354: LD_INT 4
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 2
1363: PUSH
1364: LD_INT 1
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 0
1376: PUSH
1377: LD_INT 5
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 4
1387: PUSH
1388: LD_INT 0
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: EMPTY
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 5
1401: PUSH
1402: LD_INT 0
1404: PUSH
1405: LD_INT 2
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: LIST
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: LIST
1419: PPUSH
1420: CALL_OW 42
1424: ST_TO_ADDR
// others := tmp diff selected ;
1425: LD_ADDR_VAR 0 8
1429: PUSH
1430: LD_VAR 0 5
1434: PUSH
1435: LD_EXP 20
1439: DIFF
1440: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1441: LD_ADDR_VAR 0 8
1445: PUSH
1446: LD_VAR 0 5
1450: PUSH
1451: LD_EXP 22
1455: PUSH
1456: LD_EXP 23
1460: PUSH
1461: LD_EXP 24
1465: PUSH
1466: LD_EXP 25
1470: PUSH
1471: LD_EXP 26
1475: PUSH
1476: LD_EXP 27
1480: PUSH
1481: LD_EXP 28
1485: PUSH
1486: LD_EXP 29
1490: PUSH
1491: LD_EXP 31
1495: PUSH
1496: LD_EXP 32
1500: PUSH
1501: LD_EXP 33
1505: PUSH
1506: LD_EXP 34
1510: PUSH
1511: EMPTY
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: DIFF
1525: ST_TO_ADDR
// no_selected := others ;
1526: LD_ADDR_EXP 19
1530: PUSH
1531: LD_VAR 0 8
1535: ST_TO_ADDR
// if no_selected then
1536: LD_EXP 19
1540: IFFALSE 1554
// SaveCharacters ( no_selected , 11_others ) ;
1542: LD_EXP 19
1546: PPUSH
1547: LD_STRING 11_others
1549: PPUSH
1550: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1554: LD_ADDR_VAR 0 6
1558: PUSH
1559: LD_INT 3
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 1
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 1
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 4
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 5
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: LIST
1611: LIST
1612: PUSH
1613: LD_INT 2
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: LD_INT 7
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: PUSH
1631: LD_INT 3
1633: PUSH
1634: LD_INT 2
1636: PUSH
1637: LD_INT 1
1639: PUSH
1640: LD_INT 7
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: LIST
1653: LIST
1654: LIST
1655: ST_TO_ADDR
// for i in JMM ^ selected do
1656: LD_ADDR_VAR 0 2
1660: PUSH
1661: LD_EXP 21
1665: PUSH
1666: LD_EXP 20
1670: ADD
1671: PUSH
1672: FOR_IN
1673: IFFALSE 1862
// begin if GetClass ( i ) = 3 then
1675: LD_VAR 0 2
1679: PPUSH
1680: CALL_OW 257
1684: PUSH
1685: LD_INT 3
1687: EQUAL
1688: IFFALSE 1845
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1690: LD_ADDR_OWVAR 37
1694: PUSH
1695: LD_VAR 0 6
1699: PUSH
1700: LD_INT 1
1702: ARRAY
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1708: LD_ADDR_OWVAR 39
1712: PUSH
1713: LD_VAR 0 6
1717: PUSH
1718: LD_INT 1
1720: ARRAY
1721: PUSH
1722: LD_INT 2
1724: ARRAY
1725: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1726: LD_ADDR_OWVAR 38
1730: PUSH
1731: LD_VAR 0 6
1735: PUSH
1736: LD_INT 1
1738: ARRAY
1739: PUSH
1740: LD_INT 3
1742: ARRAY
1743: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1744: LD_ADDR_OWVAR 40
1748: PUSH
1749: LD_VAR 0 6
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PUSH
1758: LD_INT 4
1760: ARRAY
1761: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1762: LD_ADDR_VAR 0 6
1766: PUSH
1767: LD_VAR 0 6
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 3
1779: ST_TO_ADDR
// veh := CreateVehicle ;
1780: LD_ADDR_VAR 0 7
1784: PUSH
1785: CALL_OW 45
1789: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1790: LD_VAR 0 7
1794: PPUSH
1795: LD_INT 8
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1805: LD_VAR 0 2
1809: PPUSH
1810: LD_VAR 0 7
1814: PPUSH
1815: CALL_OW 52
// if i = JMM then
1819: LD_VAR 0 2
1823: PUSH
1824: LD_EXP 21
1828: EQUAL
1829: IFFALSE 1843
// SetMark ( veh , 1 ) ;
1831: LD_VAR 0 7
1835: PPUSH
1836: LD_INT 1
1838: PPUSH
1839: CALL_OW 242
// end else
1843: GO 1860
// PlaceUnitArea ( i , am_hum_start , false ) ;
1845: LD_VAR 0 2
1849: PPUSH
1850: LD_INT 9
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// end ;
1860: GO 1672
1862: POP
1863: POP
// vc_chassis := us_medium_tracked ;
1864: LD_ADDR_OWVAR 37
1868: PUSH
1869: LD_INT 3
1871: ST_TO_ADDR
// vc_engine := engine_solar ;
1872: LD_ADDR_OWVAR 39
1876: PUSH
1877: LD_INT 2
1879: ST_TO_ADDR
// vc_control := control_computer ;
1880: LD_ADDR_OWVAR 38
1884: PUSH
1885: LD_INT 3
1887: ST_TO_ADDR
// vc_weapon := us_radar ;
1888: LD_ADDR_OWVAR 40
1892: PUSH
1893: LD_INT 11
1895: ST_TO_ADDR
// veh := CreateVehicle ;
1896: LD_ADDR_VAR 0 7
1900: PUSH
1901: CALL_OW 45
1905: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1906: LD_VAR 0 7
1910: PPUSH
1911: LD_INT 87
1913: PPUSH
1914: LD_INT 142
1916: PPUSH
1917: LD_INT 0
1919: PPUSH
1920: CALL_OW 48
// end ; end_of_file
1924: LD_VAR 0 1
1928: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1929: LD_INT 0
1931: PPUSH
1932: PPUSH
// if exist_mode then
1933: LD_VAR 0 2
1937: IFFALSE 1962
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1939: LD_ADDR_VAR 0 4
1943: PUSH
1944: LD_EXP 4
1948: PUSH
1949: LD_VAR 0 1
1953: STR
1954: PPUSH
1955: CALL_OW 34
1959: ST_TO_ADDR
1960: GO 1977
// unit := NewCharacter ( ident ) ;
1962: LD_ADDR_VAR 0 4
1966: PUSH
1967: LD_VAR 0 1
1971: PPUSH
1972: CALL_OW 25
1976: ST_TO_ADDR
// result := unit ;
1977: LD_ADDR_VAR 0 3
1981: PUSH
1982: LD_VAR 0 4
1986: ST_TO_ADDR
// end ;
1987: LD_VAR 0 3
1991: RET
// export function _GetHexInfo ( x , y ) ; begin
1992: LD_INT 0
1994: PPUSH
// result := false ;
1995: LD_ADDR_VAR 0 3
1999: PUSH
2000: LD_INT 0
2002: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
2003: LD_VAR 0 1
2007: PPUSH
2008: LD_VAR 0 2
2012: PPUSH
2013: CALL_OW 488
2017: NOT
2018: PUSH
2019: LD_VAR 0 1
2023: NOT
2024: OR
2025: PUSH
2026: LD_VAR 0 2
2030: NOT
2031: OR
2032: IFFALSE 2036
// exit ;
2034: GO 2056
// result := GetHexInfo ( x , y ) ;
2036: LD_ADDR_VAR 0 3
2040: PUSH
2041: LD_VAR 0 1
2045: PPUSH
2046: LD_VAR 0 2
2050: PPUSH
2051: CALL_OW 546
2055: ST_TO_ADDR
// end ;
2056: LD_VAR 0 3
2060: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2061: LD_INT 0
2063: PPUSH
// vc_chassis := chassis ;
2064: LD_ADDR_OWVAR 37
2068: PUSH
2069: LD_VAR 0 1
2073: ST_TO_ADDR
// vc_engine := engine ;
2074: LD_ADDR_OWVAR 39
2078: PUSH
2079: LD_VAR 0 2
2083: ST_TO_ADDR
// vc_control := control ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_VAR 0 3
2093: ST_TO_ADDR
// vc_weapon := weapon ;
2094: LD_ADDR_OWVAR 40
2098: PUSH
2099: LD_VAR 0 4
2103: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2104: LD_ADDR_OWVAR 41
2108: PUSH
2109: LD_VAR 0 5
2113: ST_TO_ADDR
// end ;
2114: LD_VAR 0 6
2118: RET
// export function CanSayRand ( side ) ; begin
2119: LD_INT 0
2121: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2122: LD_ADDR_VAR 0 2
2126: PUSH
2127: LD_INT 52
2129: PUSH
2130: EMPTY
2131: LIST
2132: PUSH
2133: LD_INT 22
2135: PUSH
2136: LD_VAR 0 1
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 2
2147: PUSH
2148: LD_INT 25
2150: PUSH
2151: LD_INT 1
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 25
2160: PUSH
2161: LD_INT 2
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 25
2170: PUSH
2171: LD_INT 3
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: LD_INT 25
2180: PUSH
2181: LD_INT 4
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: PUSH
2188: EMPTY
2189: LIST
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PPUSH
2200: CALL_OW 69
2204: PUSH
2205: LD_EXP 21
2209: PUSH
2210: LD_EXP 33
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: LD_EXP 23
2224: PUSH
2225: LD_EXP 24
2229: PUSH
2230: LD_EXP 25
2234: PUSH
2235: LD_EXP 26
2239: PUSH
2240: LD_EXP 27
2244: PUSH
2245: LD_EXP 28
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_EXP 30
2259: PUSH
2260: LD_EXP 31
2264: PUSH
2265: LD_EXP 32
2269: PUSH
2270: LD_EXP 34
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: LIST
2281: LIST
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: LIST
2289: LIST
2290: DIFF
2291: ST_TO_ADDR
// end ;
2292: LD_VAR 0 2
2296: RET
// export function SayRand ( sex , dial ) ; begin
2297: LD_INT 0
2299: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2300: LD_ADDR_VAR 0 3
2304: PUSH
2305: LD_INT 52
2307: PUSH
2308: EMPTY
2309: LIST
2310: PUSH
2311: LD_INT 22
2313: PUSH
2314: LD_INT 1
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PUSH
2321: LD_INT 26
2323: PUSH
2324: LD_VAR 0 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: LD_INT 25
2338: PUSH
2339: LD_INT 1
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 25
2348: PUSH
2349: LD_INT 2
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 25
2358: PUSH
2359: LD_INT 3
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: LD_INT 25
2368: PUSH
2369: LD_INT 4
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: PUSH
2383: EMPTY
2384: LIST
2385: LIST
2386: LIST
2387: LIST
2388: PPUSH
2389: CALL_OW 69
2393: PUSH
2394: LD_EXP 21
2398: PUSH
2399: LD_EXP 33
2403: PUSH
2404: LD_EXP 22
2408: PUSH
2409: LD_EXP 23
2413: PUSH
2414: LD_EXP 24
2418: PUSH
2419: LD_EXP 25
2423: PUSH
2424: LD_EXP 26
2428: PUSH
2429: LD_EXP 27
2433: PUSH
2434: LD_EXP 28
2438: PUSH
2439: LD_EXP 29
2443: PUSH
2444: LD_EXP 30
2448: PUSH
2449: LD_EXP 31
2453: PUSH
2454: LD_EXP 32
2458: PUSH
2459: LD_EXP 34
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: DIFF
2480: ST_TO_ADDR
// if not result then
2481: LD_VAR 0 3
2485: NOT
2486: IFFALSE 2490
// exit ;
2488: GO 2518
// result := result [ 1 ] ;
2490: LD_ADDR_VAR 0 3
2494: PUSH
2495: LD_VAR 0 3
2499: PUSH
2500: LD_INT 1
2502: ARRAY
2503: ST_TO_ADDR
// Say ( result , dial ) ;
2504: LD_VAR 0 3
2508: PPUSH
2509: LD_VAR 0 2
2513: PPUSH
2514: CALL_OW 88
// end ;
2518: LD_VAR 0 3
2522: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2523: LD_INT 0
2525: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2526: LD_ADDR_VAR 0 4
2530: PUSH
2531: LD_INT 22
2533: PUSH
2534: LD_INT 1
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 26
2543: PUSH
2544: LD_VAR 0 1
2548: PUSH
2549: EMPTY
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 2
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 1
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 25
2568: PUSH
2569: LD_INT 2
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 25
2578: PUSH
2579: LD_INT 3
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: LD_INT 25
2588: PUSH
2589: LD_INT 4
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: PUSH
2596: EMPTY
2597: LIST
2598: LIST
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_EXP 33
2622: PUSH
2623: LD_EXP 22
2627: PUSH
2628: LD_EXP 23
2632: PUSH
2633: LD_EXP 24
2637: PUSH
2638: LD_EXP 25
2642: PUSH
2643: LD_EXP 26
2647: PUSH
2648: LD_EXP 27
2652: PUSH
2653: LD_EXP 28
2657: PUSH
2658: LD_EXP 29
2662: PUSH
2663: LD_EXP 30
2667: PUSH
2668: LD_EXP 31
2672: PUSH
2673: LD_EXP 32
2677: PUSH
2678: LD_EXP 34
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: LIST
2688: LIST
2689: LIST
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: LIST
2698: PUSH
2699: LD_VAR 0 3
2703: ADD
2704: DIFF
2705: ST_TO_ADDR
// if not result then
2706: LD_VAR 0 4
2710: NOT
2711: IFFALSE 2715
// exit ;
2713: GO 2743
// result := result [ 1 ] ;
2715: LD_ADDR_VAR 0 4
2719: PUSH
2720: LD_VAR 0 4
2724: PUSH
2725: LD_INT 1
2727: ARRAY
2728: ST_TO_ADDR
// Say ( result , dial ) ;
2729: LD_VAR 0 4
2733: PPUSH
2734: LD_VAR 0 2
2738: PPUSH
2739: CALL_OW 88
// end ;
2743: LD_VAR 0 4
2747: RET
// export function WantPlant ( unit ) ; var task ; begin
2748: LD_INT 0
2750: PPUSH
2751: PPUSH
// result := false ;
2752: LD_ADDR_VAR 0 2
2756: PUSH
2757: LD_INT 0
2759: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: LD_VAR 0 1
2769: PPUSH
2770: CALL_OW 437
2774: ST_TO_ADDR
// if task then
2775: LD_VAR 0 3
2779: IFFALSE 2807
// if task [ 1 ] [ 1 ] = p then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 1
2788: ARRAY
2789: PUSH
2790: LD_INT 1
2792: ARRAY
2793: PUSH
2794: LD_STRING p
2796: EQUAL
2797: IFFALSE 2807
// result := true ;
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// end ;
2807: LD_VAR 0 2
2811: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2812: LD_INT 0
2814: PPUSH
2815: PPUSH
2816: PPUSH
2817: PPUSH
// if pos < 1 then
2818: LD_VAR 0 2
2822: PUSH
2823: LD_INT 1
2825: LESS
2826: IFFALSE 2830
// exit ;
2828: GO 3133
// if pos = 1 then
2830: LD_VAR 0 2
2834: PUSH
2835: LD_INT 1
2837: EQUAL
2838: IFFALSE 2871
// result := Replace ( arr , pos [ 1 ] , value ) else
2840: LD_ADDR_VAR 0 4
2844: PUSH
2845: LD_VAR 0 1
2849: PPUSH
2850: LD_VAR 0 2
2854: PUSH
2855: LD_INT 1
2857: ARRAY
2858: PPUSH
2859: LD_VAR 0 3
2863: PPUSH
2864: CALL_OW 1
2868: ST_TO_ADDR
2869: GO 3133
// begin tmp := arr ;
2871: LD_ADDR_VAR 0 6
2875: PUSH
2876: LD_VAR 0 1
2880: ST_TO_ADDR
// s_arr := [ tmp ] ;
2881: LD_ADDR_VAR 0 7
2885: PUSH
2886: LD_VAR 0 6
2890: PUSH
2891: EMPTY
2892: LIST
2893: ST_TO_ADDR
// for i = 1 to pos - 1 do
2894: LD_ADDR_VAR 0 5
2898: PUSH
2899: DOUBLE
2900: LD_INT 1
2902: DEC
2903: ST_TO_ADDR
2904: LD_VAR 0 2
2908: PUSH
2909: LD_INT 1
2911: MINUS
2912: PUSH
2913: FOR_TO
2914: IFFALSE 2959
// begin tmp := tmp [ pos [ i ] ] ;
2916: LD_ADDR_VAR 0 6
2920: PUSH
2921: LD_VAR 0 6
2925: PUSH
2926: LD_VAR 0 2
2930: PUSH
2931: LD_VAR 0 5
2935: ARRAY
2936: ARRAY
2937: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2938: LD_ADDR_VAR 0 7
2942: PUSH
2943: LD_VAR 0 7
2947: PUSH
2948: LD_VAR 0 6
2952: PUSH
2953: EMPTY
2954: LIST
2955: ADD
2956: ST_TO_ADDR
// end ;
2957: GO 2913
2959: POP
2960: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2961: LD_ADDR_VAR 0 6
2965: PUSH
2966: LD_VAR 0 6
2970: PPUSH
2971: LD_VAR 0 2
2975: PUSH
2976: LD_VAR 0 2
2980: ARRAY
2981: PPUSH
2982: LD_VAR 0 3
2986: PPUSH
2987: CALL_OW 1
2991: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2992: LD_ADDR_VAR 0 7
2996: PUSH
2997: LD_VAR 0 7
3001: PPUSH
3002: LD_VAR 0 7
3006: PPUSH
3007: LD_VAR 0 6
3011: PPUSH
3012: CALL_OW 1
3016: ST_TO_ADDR
// for i = s_arr downto 2 do
3017: LD_ADDR_VAR 0 5
3021: PUSH
3022: DOUBLE
3023: LD_VAR 0 7
3027: INC
3028: ST_TO_ADDR
3029: LD_INT 2
3031: PUSH
3032: FOR_DOWNTO
3033: IFFALSE 3117
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
3035: LD_ADDR_VAR 0 6
3039: PUSH
3040: LD_VAR 0 7
3044: PUSH
3045: LD_VAR 0 5
3049: PUSH
3050: LD_INT 1
3052: MINUS
3053: ARRAY
3054: PPUSH
3055: LD_VAR 0 2
3059: PUSH
3060: LD_VAR 0 5
3064: PUSH
3065: LD_INT 1
3067: MINUS
3068: ARRAY
3069: PPUSH
3070: LD_VAR 0 7
3074: PUSH
3075: LD_VAR 0 5
3079: ARRAY
3080: PPUSH
3081: CALL_OW 1
3085: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3086: LD_ADDR_VAR 0 7
3090: PUSH
3091: LD_VAR 0 7
3095: PPUSH
3096: LD_VAR 0 5
3100: PUSH
3101: LD_INT 1
3103: MINUS
3104: PPUSH
3105: LD_VAR 0 6
3109: PPUSH
3110: CALL_OW 1
3114: ST_TO_ADDR
// end ;
3115: GO 3032
3117: POP
3118: POP
// result := s_arr [ 1 ] ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_VAR 0 7
3128: PUSH
3129: LD_INT 1
3131: ARRAY
3132: ST_TO_ADDR
// end ; end ;
3133: LD_VAR 0 4
3137: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3138: LD_INT 0
3140: PPUSH
3141: PPUSH
// if not list then
3142: LD_VAR 0 1
3146: NOT
3147: IFFALSE 3151
// exit ;
3149: GO 3242
// i := list [ pos1 ] ;
3151: LD_ADDR_VAR 0 5
3155: PUSH
3156: LD_VAR 0 1
3160: PUSH
3161: LD_VAR 0 2
3165: ARRAY
3166: ST_TO_ADDR
// if not i then
3167: LD_VAR 0 5
3171: NOT
3172: IFFALSE 3176
// exit ;
3174: GO 3242
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3176: LD_ADDR_VAR 0 1
3180: PUSH
3181: LD_VAR 0 1
3185: PPUSH
3186: LD_VAR 0 2
3190: PPUSH
3191: LD_VAR 0 1
3195: PUSH
3196: LD_VAR 0 3
3200: ARRAY
3201: PPUSH
3202: CALL_OW 1
3206: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3207: LD_ADDR_VAR 0 1
3211: PUSH
3212: LD_VAR 0 1
3216: PPUSH
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_VAR 0 5
3226: PPUSH
3227: CALL_OW 1
3231: ST_TO_ADDR
// result := list ;
3232: LD_ADDR_VAR 0 4
3236: PUSH
3237: LD_VAR 0 1
3241: ST_TO_ADDR
// end ;
3242: LD_VAR 0 4
3246: RET
// export function Add ( list , pos , val ) ; begin
3247: LD_INT 0
3249: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3250: LD_ADDR_VAR 0 4
3254: PUSH
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_VAR 0 2
3264: PPUSH
3265: LD_VAR 0 3
3269: PPUSH
3270: CALL 2812 0 3
3274: ST_TO_ADDR
3275: LD_VAR 0 4
3279: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3280: LD_INT 0
3282: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3283: LD_ADDR_VAR 0 5
3287: PUSH
3288: LD_VAR 0 1
3292: PPUSH
3293: CALL_OW 250
3297: PPUSH
3298: LD_VAR 0 1
3302: PPUSH
3303: CALL_OW 251
3307: PPUSH
3308: LD_VAR 0 2
3312: PPUSH
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_VAR 0 4
3322: PPUSH
3323: CALL 3333 0 5
3327: ST_TO_ADDR
// end ;
3328: LD_VAR 0 5
3332: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// if not list then
3339: LD_VAR 0 3
3343: NOT
3344: IFFALSE 3348
// exit ;
3346: GO 3736
// result := [ ] ;
3348: LD_ADDR_VAR 0 6
3352: PUSH
3353: EMPTY
3354: ST_TO_ADDR
// for i in list do
3355: LD_ADDR_VAR 0 7
3359: PUSH
3360: LD_VAR 0 3
3364: PUSH
3365: FOR_IN
3366: IFFALSE 3568
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3368: LD_ADDR_VAR 0 9
3372: PUSH
3373: LD_VAR 0 7
3377: PPUSH
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_VAR 0 2
3387: PPUSH
3388: CALL_OW 297
3392: ST_TO_ADDR
// if not result then
3393: LD_VAR 0 6
3397: NOT
3398: IFFALSE 3424
// result := [ [ i , tmp ] ] else
3400: LD_ADDR_VAR 0 6
3404: PUSH
3405: LD_VAR 0 7
3409: PUSH
3410: LD_VAR 0 9
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: PUSH
3419: EMPTY
3420: LIST
3421: ST_TO_ADDR
3422: GO 3566
// begin if result [ result ] [ 2 ] < tmp then
3424: LD_VAR 0 6
3428: PUSH
3429: LD_VAR 0 6
3433: ARRAY
3434: PUSH
3435: LD_INT 2
3437: ARRAY
3438: PUSH
3439: LD_VAR 0 9
3443: LESS
3444: IFFALSE 3486
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3446: LD_ADDR_VAR 0 6
3450: PUSH
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 6
3460: PUSH
3461: LD_INT 1
3463: PLUS
3464: PPUSH
3465: LD_VAR 0 7
3469: PUSH
3470: LD_VAR 0 9
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: PPUSH
3479: CALL_OW 2
3483: ST_TO_ADDR
3484: GO 3566
// for j = 1 to result do
3486: LD_ADDR_VAR 0 8
3490: PUSH
3491: DOUBLE
3492: LD_INT 1
3494: DEC
3495: ST_TO_ADDR
3496: LD_VAR 0 6
3500: PUSH
3501: FOR_TO
3502: IFFALSE 3564
// begin if tmp < result [ j ] [ 2 ] then
3504: LD_VAR 0 9
3508: PUSH
3509: LD_VAR 0 6
3513: PUSH
3514: LD_VAR 0 8
3518: ARRAY
3519: PUSH
3520: LD_INT 2
3522: ARRAY
3523: LESS
3524: IFFALSE 3562
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3526: LD_ADDR_VAR 0 6
3530: PUSH
3531: LD_VAR 0 6
3535: PPUSH
3536: LD_VAR 0 8
3540: PPUSH
3541: LD_VAR 0 7
3545: PUSH
3546: LD_VAR 0 9
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 2
3559: ST_TO_ADDR
// break ;
3560: GO 3564
// end ; end ;
3562: GO 3501
3564: POP
3565: POP
// end ; end ;
3566: GO 3365
3568: POP
3569: POP
// if result and not asc then
3570: LD_VAR 0 6
3574: PUSH
3575: LD_VAR 0 4
3579: NOT
3580: AND
3581: IFFALSE 3656
// begin tmp := result ;
3583: LD_ADDR_VAR 0 9
3587: PUSH
3588: LD_VAR 0 6
3592: ST_TO_ADDR
// for i = tmp downto 1 do
3593: LD_ADDR_VAR 0 7
3597: PUSH
3598: DOUBLE
3599: LD_VAR 0 9
3603: INC
3604: ST_TO_ADDR
3605: LD_INT 1
3607: PUSH
3608: FOR_DOWNTO
3609: IFFALSE 3654
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3611: LD_ADDR_VAR 0 6
3615: PUSH
3616: LD_VAR 0 6
3620: PPUSH
3621: LD_VAR 0 9
3625: PUSH
3626: LD_VAR 0 7
3630: MINUS
3631: PUSH
3632: LD_INT 1
3634: PLUS
3635: PPUSH
3636: LD_VAR 0 9
3640: PUSH
3641: LD_VAR 0 7
3645: ARRAY
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
3652: GO 3608
3654: POP
3655: POP
// end ; tmp := [ ] ;
3656: LD_ADDR_VAR 0 9
3660: PUSH
3661: EMPTY
3662: ST_TO_ADDR
// if mode then
3663: LD_VAR 0 5
3667: IFFALSE 3736
// begin for i = 1 to result do
3669: LD_ADDR_VAR 0 7
3673: PUSH
3674: DOUBLE
3675: LD_INT 1
3677: DEC
3678: ST_TO_ADDR
3679: LD_VAR 0 6
3683: PUSH
3684: FOR_TO
3685: IFFALSE 3724
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3687: LD_ADDR_VAR 0 9
3691: PUSH
3692: LD_VAR 0 9
3696: PPUSH
3697: LD_VAR 0 7
3701: PPUSH
3702: LD_VAR 0 6
3706: PUSH
3707: LD_VAR 0 7
3711: ARRAY
3712: PUSH
3713: LD_INT 1
3715: ARRAY
3716: PPUSH
3717: CALL_OW 1
3721: ST_TO_ADDR
3722: GO 3684
3724: POP
3725: POP
// result := tmp ;
3726: LD_ADDR_VAR 0 6
3730: PUSH
3731: LD_VAR 0 9
3735: ST_TO_ADDR
// end ; end ;
3736: LD_VAR 0 6
3740: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3749: LD_ADDR_VAR 0 5
3753: PUSH
3754: LD_INT 0
3756: PUSH
3757: LD_INT 0
3759: PUSH
3760: LD_INT 0
3762: PUSH
3763: EMPTY
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: ST_TO_ADDR
// if not x or not y then
3771: LD_VAR 0 2
3775: NOT
3776: PUSH
3777: LD_VAR 0 3
3781: NOT
3782: OR
3783: IFFALSE 3787
// exit ;
3785: GO 5433
// if not range then
3787: LD_VAR 0 4
3791: NOT
3792: IFFALSE 3802
// range := 10 ;
3794: LD_ADDR_VAR 0 4
3798: PUSH
3799: LD_INT 10
3801: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: LD_INT 81
3809: PUSH
3810: LD_VAR 0 1
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: PUSH
3819: LD_INT 92
3821: PUSH
3822: LD_VAR 0 2
3826: PUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 4
3836: PUSH
3837: EMPTY
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 3
3845: PUSH
3846: LD_INT 21
3848: PUSH
3849: LD_INT 3
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: PPUSH
3865: CALL_OW 69
3869: ST_TO_ADDR
// if not tmp then
3870: LD_VAR 0 8
3874: NOT
3875: IFFALSE 3879
// exit ;
3877: GO 5433
// for i in tmp do
3879: LD_ADDR_VAR 0 6
3883: PUSH
3884: LD_VAR 0 8
3888: PUSH
3889: FOR_IN
3890: IFFALSE 5408
// begin points := [ 0 , 0 , 0 ] ;
3892: LD_ADDR_VAR 0 9
3896: PUSH
3897: LD_INT 0
3899: PUSH
3900: LD_INT 0
3902: PUSH
3903: LD_INT 0
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: ST_TO_ADDR
// bpoints := 1 ;
3911: LD_ADDR_VAR 0 10
3915: PUSH
3916: LD_INT 1
3918: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3919: LD_VAR 0 6
3923: PPUSH
3924: CALL_OW 247
3928: PUSH
3929: LD_INT 1
3931: DOUBLE
3932: EQUAL
3933: IFTRUE 3937
3935: GO 4515
3937: POP
// begin if GetClass ( i ) = 1 then
3938: LD_VAR 0 6
3942: PPUSH
3943: CALL_OW 257
3947: PUSH
3948: LD_INT 1
3950: EQUAL
3951: IFFALSE 3972
// points := [ 10 , 5 , 3 ] ;
3953: LD_ADDR_VAR 0 9
3957: PUSH
3958: LD_INT 10
3960: PUSH
3961: LD_INT 5
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3972: LD_VAR 0 6
3976: PPUSH
3977: CALL_OW 257
3981: PUSH
3982: LD_INT 2
3984: PUSH
3985: LD_INT 3
3987: PUSH
3988: LD_INT 4
3990: PUSH
3991: EMPTY
3992: LIST
3993: LIST
3994: LIST
3995: IN
3996: IFFALSE 4017
// points := [ 3 , 2 , 1 ] ;
3998: LD_ADDR_VAR 0 9
4002: PUSH
4003: LD_INT 3
4005: PUSH
4006: LD_INT 2
4008: PUSH
4009: LD_INT 1
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: LIST
4016: ST_TO_ADDR
// if GetClass ( i ) = 5 then
4017: LD_VAR 0 6
4021: PPUSH
4022: CALL_OW 257
4026: PUSH
4027: LD_INT 5
4029: EQUAL
4030: IFFALSE 4051
// points := [ 130 , 5 , 2 ] ;
4032: LD_ADDR_VAR 0 9
4036: PUSH
4037: LD_INT 130
4039: PUSH
4040: LD_INT 5
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: ST_TO_ADDR
// if GetClass ( i ) = 8 then
4051: LD_VAR 0 6
4055: PPUSH
4056: CALL_OW 257
4060: PUSH
4061: LD_INT 8
4063: EQUAL
4064: IFFALSE 4085
// points := [ 35 , 35 , 30 ] ;
4066: LD_ADDR_VAR 0 9
4070: PUSH
4071: LD_INT 35
4073: PUSH
4074: LD_INT 35
4076: PUSH
4077: LD_INT 30
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4085: LD_VAR 0 6
4089: PPUSH
4090: CALL_OW 257
4094: PUSH
4095: LD_INT 9
4097: EQUAL
4098: IFFALSE 4119
// points := [ 20 , 55 , 40 ] ;
4100: LD_ADDR_VAR 0 9
4104: PUSH
4105: LD_INT 20
4107: PUSH
4108: LD_INT 55
4110: PUSH
4111: LD_INT 40
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: LIST
4118: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4119: LD_VAR 0 6
4123: PPUSH
4124: CALL_OW 257
4128: PUSH
4129: LD_INT 12
4131: PUSH
4132: LD_INT 16
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: IN
4139: IFFALSE 4160
// points := [ 5 , 3 , 2 ] ;
4141: LD_ADDR_VAR 0 9
4145: PUSH
4146: LD_INT 5
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4160: LD_VAR 0 6
4164: PPUSH
4165: CALL_OW 257
4169: PUSH
4170: LD_INT 17
4172: EQUAL
4173: IFFALSE 4194
// points := [ 100 , 50 , 75 ] ;
4175: LD_ADDR_VAR 0 9
4179: PUSH
4180: LD_INT 100
4182: PUSH
4183: LD_INT 50
4185: PUSH
4186: LD_INT 75
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: LIST
4193: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4194: LD_VAR 0 6
4198: PPUSH
4199: CALL_OW 257
4203: PUSH
4204: LD_INT 15
4206: EQUAL
4207: IFFALSE 4228
// points := [ 10 , 5 , 3 ] ;
4209: LD_ADDR_VAR 0 9
4213: PUSH
4214: LD_INT 10
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 3
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4228: LD_VAR 0 6
4232: PPUSH
4233: CALL_OW 257
4237: PUSH
4238: LD_INT 14
4240: EQUAL
4241: IFFALSE 4262
// points := [ 10 , 0 , 0 ] ;
4243: LD_ADDR_VAR 0 9
4247: PUSH
4248: LD_INT 10
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: LIST
4261: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4262: LD_VAR 0 6
4266: PPUSH
4267: CALL_OW 257
4271: PUSH
4272: LD_INT 11
4274: EQUAL
4275: IFFALSE 4296
// points := [ 30 , 10 , 5 ] ;
4277: LD_ADDR_VAR 0 9
4281: PUSH
4282: LD_INT 30
4284: PUSH
4285: LD_INT 10
4287: PUSH
4288: LD_INT 5
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: LIST
4295: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4296: LD_VAR 0 1
4300: PPUSH
4301: LD_INT 5
4303: PPUSH
4304: CALL_OW 321
4308: PUSH
4309: LD_INT 2
4311: EQUAL
4312: IFFALSE 4329
// bpoints := bpoints * 1.8 ;
4314: LD_ADDR_VAR 0 10
4318: PUSH
4319: LD_VAR 0 10
4323: PUSH
4324: LD_REAL  1.80000000000000E+0000
4327: MUL
4328: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4329: LD_VAR 0 6
4333: PPUSH
4334: CALL_OW 257
4338: PUSH
4339: LD_INT 1
4341: PUSH
4342: LD_INT 2
4344: PUSH
4345: LD_INT 3
4347: PUSH
4348: LD_INT 4
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: IN
4357: PUSH
4358: LD_VAR 0 1
4362: PPUSH
4363: LD_INT 51
4365: PPUSH
4366: CALL_OW 321
4370: PUSH
4371: LD_INT 2
4373: EQUAL
4374: AND
4375: IFFALSE 4392
// bpoints := bpoints * 1.2 ;
4377: LD_ADDR_VAR 0 10
4381: PUSH
4382: LD_VAR 0 10
4386: PUSH
4387: LD_REAL  1.20000000000000E+0000
4390: MUL
4391: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4392: LD_VAR 0 6
4396: PPUSH
4397: CALL_OW 257
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: LD_INT 7
4407: PUSH
4408: LD_INT 9
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: LIST
4415: IN
4416: PUSH
4417: LD_VAR 0 1
4421: PPUSH
4422: LD_INT 52
4424: PPUSH
4425: CALL_OW 321
4429: PUSH
4430: LD_INT 2
4432: EQUAL
4433: AND
4434: IFFALSE 4451
// bpoints := bpoints * 1.5 ;
4436: LD_ADDR_VAR 0 10
4440: PUSH
4441: LD_VAR 0 10
4445: PUSH
4446: LD_REAL  1.50000000000000E+0000
4449: MUL
4450: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4451: LD_VAR 0 1
4455: PPUSH
4456: LD_INT 66
4458: PPUSH
4459: CALL_OW 321
4463: PUSH
4464: LD_INT 2
4466: EQUAL
4467: IFFALSE 4484
// bpoints := bpoints * 1.1 ;
4469: LD_ADDR_VAR 0 10
4473: PUSH
4474: LD_VAR 0 10
4478: PUSH
4479: LD_REAL  1.10000000000000E+0000
4482: MUL
4483: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4484: LD_ADDR_VAR 0 10
4488: PUSH
4489: LD_VAR 0 10
4493: PUSH
4494: LD_VAR 0 6
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: CALL_OW 259
4506: PUSH
4507: LD_REAL  1.15000000000000E+0000
4510: MUL
4511: MUL
4512: ST_TO_ADDR
// end ; unit_vehicle :
4513: GO 5337
4515: LD_INT 2
4517: DOUBLE
4518: EQUAL
4519: IFTRUE 4523
4521: GO 5325
4523: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4524: LD_VAR 0 6
4528: PPUSH
4529: CALL_OW 264
4533: PUSH
4534: LD_INT 2
4536: PUSH
4537: LD_INT 42
4539: PUSH
4540: LD_INT 24
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: IN
4548: IFFALSE 4569
// points := [ 25 , 5 , 3 ] ;
4550: LD_ADDR_VAR 0 9
4554: PUSH
4555: LD_INT 25
4557: PUSH
4558: LD_INT 5
4560: PUSH
4561: LD_INT 3
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4569: LD_VAR 0 6
4573: PPUSH
4574: CALL_OW 264
4578: PUSH
4579: LD_INT 4
4581: PUSH
4582: LD_INT 43
4584: PUSH
4585: LD_INT 25
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: IN
4593: IFFALSE 4614
// points := [ 40 , 15 , 5 ] ;
4595: LD_ADDR_VAR 0 9
4599: PUSH
4600: LD_INT 40
4602: PUSH
4603: LD_INT 15
4605: PUSH
4606: LD_INT 5
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4614: LD_VAR 0 6
4618: PPUSH
4619: CALL_OW 264
4623: PUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 23
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: IN
4634: IFFALSE 4655
// points := [ 7 , 25 , 8 ] ;
4636: LD_ADDR_VAR 0 9
4640: PUSH
4641: LD_INT 7
4643: PUSH
4644: LD_INT 25
4646: PUSH
4647: LD_INT 8
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4655: LD_VAR 0 6
4659: PPUSH
4660: CALL_OW 264
4664: PUSH
4665: LD_INT 5
4667: PUSH
4668: LD_INT 27
4670: PUSH
4671: LD_INT 44
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: IN
4679: IFFALSE 4700
// points := [ 14 , 50 , 16 ] ;
4681: LD_ADDR_VAR 0 9
4685: PUSH
4686: LD_INT 14
4688: PUSH
4689: LD_INT 50
4691: PUSH
4692: LD_INT 16
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4700: LD_VAR 0 6
4704: PPUSH
4705: CALL_OW 264
4709: PUSH
4710: LD_INT 6
4712: PUSH
4713: LD_INT 46
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: IN
4720: IFFALSE 4741
// points := [ 32 , 120 , 70 ] ;
4722: LD_ADDR_VAR 0 9
4726: PUSH
4727: LD_INT 32
4729: PUSH
4730: LD_INT 120
4732: PUSH
4733: LD_INT 70
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4741: LD_VAR 0 6
4745: PPUSH
4746: CALL_OW 264
4750: PUSH
4751: LD_INT 7
4753: PUSH
4754: LD_INT 28
4756: PUSH
4757: LD_INT 45
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: IN
4765: IFFALSE 4786
// points := [ 35 , 20 , 45 ] ;
4767: LD_ADDR_VAR 0 9
4771: PUSH
4772: LD_INT 35
4774: PUSH
4775: LD_INT 20
4777: PUSH
4778: LD_INT 45
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4786: LD_VAR 0 6
4790: PPUSH
4791: CALL_OW 264
4795: PUSH
4796: LD_INT 47
4798: PUSH
4799: EMPTY
4800: LIST
4801: IN
4802: IFFALSE 4823
// points := [ 67 , 45 , 75 ] ;
4804: LD_ADDR_VAR 0 9
4808: PUSH
4809: LD_INT 67
4811: PUSH
4812: LD_INT 45
4814: PUSH
4815: LD_INT 75
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4823: LD_VAR 0 6
4827: PPUSH
4828: CALL_OW 264
4832: PUSH
4833: LD_INT 26
4835: PUSH
4836: EMPTY
4837: LIST
4838: IN
4839: IFFALSE 4860
// points := [ 120 , 30 , 80 ] ;
4841: LD_ADDR_VAR 0 9
4845: PUSH
4846: LD_INT 120
4848: PUSH
4849: LD_INT 30
4851: PUSH
4852: LD_INT 80
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4860: LD_VAR 0 6
4864: PPUSH
4865: CALL_OW 264
4869: PUSH
4870: LD_INT 22
4872: PUSH
4873: EMPTY
4874: LIST
4875: IN
4876: IFFALSE 4897
// points := [ 40 , 1 , 1 ] ;
4878: LD_ADDR_VAR 0 9
4882: PUSH
4883: LD_INT 40
4885: PUSH
4886: LD_INT 1
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: LIST
4896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4897: LD_VAR 0 6
4901: PPUSH
4902: CALL_OW 264
4906: PUSH
4907: LD_INT 29
4909: PUSH
4910: EMPTY
4911: LIST
4912: IN
4913: IFFALSE 4934
// points := [ 70 , 200 , 400 ] ;
4915: LD_ADDR_VAR 0 9
4919: PUSH
4920: LD_INT 70
4922: PUSH
4923: LD_INT 200
4925: PUSH
4926: LD_INT 400
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4934: LD_VAR 0 6
4938: PPUSH
4939: CALL_OW 264
4943: PUSH
4944: LD_INT 14
4946: PUSH
4947: LD_INT 53
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: IN
4954: IFFALSE 4975
// points := [ 40 , 10 , 20 ] ;
4956: LD_ADDR_VAR 0 9
4960: PUSH
4961: LD_INT 40
4963: PUSH
4964: LD_INT 10
4966: PUSH
4967: LD_INT 20
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4975: LD_VAR 0 6
4979: PPUSH
4980: CALL_OW 264
4984: PUSH
4985: LD_INT 9
4987: PUSH
4988: EMPTY
4989: LIST
4990: IN
4991: IFFALSE 5012
// points := [ 5 , 70 , 20 ] ;
4993: LD_ADDR_VAR 0 9
4997: PUSH
4998: LD_INT 5
5000: PUSH
5001: LD_INT 70
5003: PUSH
5004: LD_INT 20
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: LIST
5011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
5012: LD_VAR 0 6
5016: PPUSH
5017: CALL_OW 264
5021: PUSH
5022: LD_INT 10
5024: PUSH
5025: EMPTY
5026: LIST
5027: IN
5028: IFFALSE 5049
// points := [ 35 , 110 , 70 ] ;
5030: LD_ADDR_VAR 0 9
5034: PUSH
5035: LD_INT 35
5037: PUSH
5038: LD_INT 110
5040: PUSH
5041: LD_INT 70
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
5049: LD_VAR 0 6
5053: PPUSH
5054: CALL_OW 265
5058: PUSH
5059: LD_INT 25
5061: EQUAL
5062: IFFALSE 5083
// points := [ 80 , 65 , 100 ] ;
5064: LD_ADDR_VAR 0 9
5068: PUSH
5069: LD_INT 80
5071: PUSH
5072: LD_INT 65
5074: PUSH
5075: LD_INT 100
5077: PUSH
5078: EMPTY
5079: LIST
5080: LIST
5081: LIST
5082: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5083: LD_VAR 0 6
5087: PPUSH
5088: CALL_OW 263
5092: PUSH
5093: LD_INT 1
5095: EQUAL
5096: IFFALSE 5131
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5098: LD_ADDR_VAR 0 10
5102: PUSH
5103: LD_VAR 0 10
5107: PUSH
5108: LD_VAR 0 6
5112: PPUSH
5113: CALL_OW 311
5117: PPUSH
5118: LD_INT 3
5120: PPUSH
5121: CALL_OW 259
5125: PUSH
5126: LD_INT 4
5128: MUL
5129: MUL
5130: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5131: LD_VAR 0 6
5135: PPUSH
5136: CALL_OW 263
5140: PUSH
5141: LD_INT 2
5143: EQUAL
5144: IFFALSE 5195
// begin j := IsControledBy ( i ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_VAR 0 6
5155: PPUSH
5156: CALL_OW 312
5160: ST_TO_ADDR
// if j then
5161: LD_VAR 0 7
5165: IFFALSE 5195
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5167: LD_ADDR_VAR 0 10
5171: PUSH
5172: LD_VAR 0 10
5176: PUSH
5177: LD_VAR 0 7
5181: PPUSH
5182: LD_INT 3
5184: PPUSH
5185: CALL_OW 259
5189: PUSH
5190: LD_INT 3
5192: MUL
5193: MUL
5194: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 264
5204: PUSH
5205: LD_INT 5
5207: PUSH
5208: LD_INT 6
5210: PUSH
5211: LD_INT 46
5213: PUSH
5214: LD_INT 44
5216: PUSH
5217: LD_INT 47
5219: PUSH
5220: LD_INT 45
5222: PUSH
5223: LD_INT 28
5225: PUSH
5226: LD_INT 7
5228: PUSH
5229: LD_INT 27
5231: PUSH
5232: LD_INT 29
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: IN
5247: PUSH
5248: LD_VAR 0 1
5252: PPUSH
5253: LD_INT 52
5255: PPUSH
5256: CALL_OW 321
5260: PUSH
5261: LD_INT 2
5263: EQUAL
5264: AND
5265: IFFALSE 5282
// bpoints := bpoints * 1.2 ;
5267: LD_ADDR_VAR 0 10
5271: PUSH
5272: LD_VAR 0 10
5276: PUSH
5277: LD_REAL  1.20000000000000E+0000
5280: MUL
5281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5282: LD_VAR 0 6
5286: PPUSH
5287: CALL_OW 264
5291: PUSH
5292: LD_INT 6
5294: PUSH
5295: LD_INT 46
5297: PUSH
5298: LD_INT 47
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: IN
5306: IFFALSE 5323
// bpoints := bpoints * 1.2 ;
5308: LD_ADDR_VAR 0 10
5312: PUSH
5313: LD_VAR 0 10
5317: PUSH
5318: LD_REAL  1.20000000000000E+0000
5321: MUL
5322: ST_TO_ADDR
// end ; unit_building :
5323: GO 5337
5325: LD_INT 3
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5336
5333: POP
// ; end ;
5334: GO 5337
5336: POP
// for j = 1 to 3 do
5337: LD_ADDR_VAR 0 7
5341: PUSH
5342: DOUBLE
5343: LD_INT 1
5345: DEC
5346: ST_TO_ADDR
5347: LD_INT 3
5349: PUSH
5350: FOR_TO
5351: IFFALSE 5404
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5353: LD_ADDR_VAR 0 5
5357: PUSH
5358: LD_VAR 0 5
5362: PPUSH
5363: LD_VAR 0 7
5367: PPUSH
5368: LD_VAR 0 5
5372: PUSH
5373: LD_VAR 0 7
5377: ARRAY
5378: PUSH
5379: LD_VAR 0 9
5383: PUSH
5384: LD_VAR 0 7
5388: ARRAY
5389: PUSH
5390: LD_VAR 0 10
5394: MUL
5395: PLUS
5396: PPUSH
5397: CALL_OW 1
5401: ST_TO_ADDR
5402: GO 5350
5404: POP
5405: POP
// end ;
5406: GO 3889
5408: POP
5409: POP
// result := Replace ( result , 4 , tmp ) ;
5410: LD_ADDR_VAR 0 5
5414: PUSH
5415: LD_VAR 0 5
5419: PPUSH
5420: LD_INT 4
5422: PPUSH
5423: LD_VAR 0 8
5427: PPUSH
5428: CALL_OW 1
5432: ST_TO_ADDR
// end ;
5433: LD_VAR 0 5
5437: RET
// export function DangerAtRange ( unit , range ) ; begin
5438: LD_INT 0
5440: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5441: LD_ADDR_VAR 0 3
5445: PUSH
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 255
5455: PPUSH
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL_OW 250
5465: PPUSH
5466: LD_VAR 0 1
5470: PPUSH
5471: CALL_OW 251
5475: PPUSH
5476: LD_VAR 0 2
5480: PPUSH
5481: CALL 3741 0 4
5485: ST_TO_ADDR
// end ;
5486: LD_VAR 0 3
5490: RET
// export function IsExtension ( b ) ; begin
5491: LD_INT 0
5493: PPUSH
// result := false ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: LD_INT 0
5501: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 266
5511: PUSH
5512: LD_INT 23
5514: PUSH
5515: LD_INT 20
5517: PUSH
5518: LD_INT 22
5520: PUSH
5521: LD_INT 17
5523: PUSH
5524: LD_INT 24
5526: PUSH
5527: LD_INT 21
5529: PUSH
5530: LD_INT 19
5532: PUSH
5533: LD_INT 16
5535: PUSH
5536: LD_INT 25
5538: PUSH
5539: LD_INT 18
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: IN
5554: IFFALSE 5564
// result := true ;
5556: LD_ADDR_VAR 0 2
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// end ;
5564: LD_VAR 0 2
5568: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5569: LD_INT 0
5571: PPUSH
5572: PPUSH
5573: PPUSH
// result := [ ] ;
5574: LD_ADDR_VAR 0 2
5578: PUSH
5579: EMPTY
5580: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5581: LD_ADDR_VAR 0 3
5585: PUSH
5586: LD_INT 21
5588: PUSH
5589: LD_INT 3
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PPUSH
5596: CALL_OW 69
5600: ST_TO_ADDR
// if not tmp then
5601: LD_VAR 0 3
5605: NOT
5606: IFFALSE 5610
// exit ;
5608: GO 5660
// for i in tmp do
5610: LD_ADDR_VAR 0 4
5614: PUSH
5615: LD_VAR 0 3
5619: PUSH
5620: FOR_IN
5621: IFFALSE 5658
// if GetBase ( i ) = base then
5623: LD_VAR 0 4
5627: PPUSH
5628: CALL_OW 274
5632: PUSH
5633: LD_VAR 0 1
5637: EQUAL
5638: IFFALSE 5656
// result := result ^ i ;
5640: LD_ADDR_VAR 0 2
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_VAR 0 4
5654: ADD
5655: ST_TO_ADDR
5656: GO 5620
5658: POP
5659: POP
// end ;
5660: LD_VAR 0 2
5664: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5665: LD_INT 0
5667: PPUSH
5668: PPUSH
// if BuildingStatus ( b ) = bs_build then
5669: LD_VAR 0 2
5673: PPUSH
5674: CALL_OW 461
5678: PUSH
5679: LD_INT 1
5681: EQUAL
5682: IFFALSE 5742
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5684: LD_VAR 0 1
5688: PPUSH
5689: LD_STRING h
5691: PUSH
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 250
5701: PUSH
5702: LD_VAR 0 2
5706: PPUSH
5707: CALL_OW 251
5711: PUSH
5712: LD_VAR 0 2
5716: PUSH
5717: LD_INT 0
5719: PUSH
5720: LD_INT 0
5722: PUSH
5723: LD_INT 0
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: PUSH
5735: EMPTY
5736: LIST
5737: PPUSH
5738: CALL_OW 446
// end ;
5742: LD_VAR 0 3
5746: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5747: LD_INT 0
5749: PPUSH
5750: PPUSH
5751: PPUSH
5752: PPUSH
5753: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5754: LD_VAR 0 1
5758: NOT
5759: PUSH
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 263
5769: PUSH
5770: LD_INT 2
5772: EQUAL
5773: NOT
5774: OR
5775: IFFALSE 5779
// exit ;
5777: GO 6051
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5779: LD_ADDR_VAR 0 6
5783: PUSH
5784: LD_INT 22
5786: PUSH
5787: LD_VAR 0 1
5791: PPUSH
5792: CALL_OW 255
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PUSH
5801: LD_INT 2
5803: PUSH
5804: LD_INT 30
5806: PUSH
5807: LD_INT 36
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: LD_INT 34
5816: PUSH
5817: LD_INT 31
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 69
5837: ST_TO_ADDR
// if not tmp then
5838: LD_VAR 0 6
5842: NOT
5843: IFFALSE 5847
// exit ;
5845: GO 6051
// result := [ ] ;
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: EMPTY
5853: ST_TO_ADDR
// for i in tmp do
5854: LD_ADDR_VAR 0 3
5858: PUSH
5859: LD_VAR 0 6
5863: PUSH
5864: FOR_IN
5865: IFFALSE 5913
// begin t := UnitsInside ( i ) ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_VAR 0 3
5876: PPUSH
5877: CALL_OW 313
5881: ST_TO_ADDR
// if t then
5882: LD_VAR 0 4
5886: IFFALSE 5911
// result := Insert ( result , 1 , t ) ;
5888: LD_ADDR_VAR 0 2
5892: PUSH
5893: LD_VAR 0 2
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: LD_VAR 0 4
5905: PPUSH
5906: CALL_OW 2
5910: ST_TO_ADDR
// end ;
5911: GO 5864
5913: POP
5914: POP
// if not result then
5915: LD_VAR 0 2
5919: NOT
5920: IFFALSE 5924
// exit ;
5922: GO 6051
// mech := 0 ;
5924: LD_ADDR_VAR 0 5
5928: PUSH
5929: LD_INT 0
5931: ST_TO_ADDR
// for i in result do
5932: LD_ADDR_VAR 0 3
5936: PUSH
5937: LD_VAR 0 2
5941: PUSH
5942: FOR_IN
5943: IFFALSE 6025
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5945: LD_ADDR_VAR 0 4
5949: PUSH
5950: LD_VAR 0 3
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL_OW 259
5962: PUSH
5963: LD_VAR 0 3
5967: PPUSH
5968: CALL_OW 432
5972: MINUS
5973: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5974: LD_VAR 0 4
5978: PUSH
5979: LD_VAR 0 5
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PPUSH
5988: LD_INT 3
5990: PPUSH
5991: CALL_OW 259
5995: PUSH
5996: LD_VAR 0 5
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: CALL_OW 432
6009: MINUS
6010: GREATEREQUAL
6011: IFFALSE 6023
// mech := i ;
6013: LD_ADDR_VAR 0 5
6017: PUSH
6018: LD_VAR 0 3
6022: ST_TO_ADDR
// end ;
6023: GO 5942
6025: POP
6026: POP
// if mech then
6027: LD_VAR 0 5
6031: IFFALSE 6051
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_VAR 0 5
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: CALL_OW 135
// end ;
6051: LD_VAR 0 2
6055: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
6056: LD_INT 0
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
6064: PPUSH
6065: PPUSH
6066: PPUSH
6067: PPUSH
6068: PPUSH
6069: PPUSH
// result := [ ] ;
6070: LD_ADDR_VAR 0 6
6074: PUSH
6075: EMPTY
6076: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6077: LD_VAR 0 1
6081: PPUSH
6082: CALL_OW 266
6086: PUSH
6087: LD_INT 0
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: IN
6097: NOT
6098: IFFALSE 6102
// exit ;
6100: GO 7395
// if name then
6102: LD_VAR 0 2
6106: IFFALSE 6122
// SetBName ( base_dep , name ) ;
6108: LD_VAR 0 1
6112: PPUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 500
// base := GetBase ( base_dep ) ;
6122: LD_ADDR_VAR 0 14
6126: PUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 274
6136: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6137: LD_ADDR_VAR 0 15
6141: PUSH
6142: LD_VAR 0 1
6146: PPUSH
6147: CALL_OW 255
6151: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6152: LD_ADDR_VAR 0 16
6156: PUSH
6157: LD_VAR 0 1
6161: PPUSH
6162: CALL_OW 248
6166: ST_TO_ADDR
// if sources then
6167: LD_VAR 0 4
6171: IFFALSE 6218
// for i = 1 to 3 do
6173: LD_ADDR_VAR 0 7
6177: PUSH
6178: DOUBLE
6179: LD_INT 1
6181: DEC
6182: ST_TO_ADDR
6183: LD_INT 3
6185: PUSH
6186: FOR_TO
6187: IFFALSE 6216
// AddResourceType ( base , i , sources [ i ] ) ;
6189: LD_VAR 0 14
6193: PPUSH
6194: LD_VAR 0 7
6198: PPUSH
6199: LD_VAR 0 4
6203: PUSH
6204: LD_VAR 0 7
6208: ARRAY
6209: PPUSH
6210: CALL_OW 276
6214: GO 6186
6216: POP
6217: POP
// buildings := GetBaseBuildings ( base ) ;
6218: LD_ADDR_VAR 0 17
6222: PUSH
6223: LD_VAR 0 14
6227: PPUSH
6228: CALL 5569 0 1
6232: ST_TO_ADDR
// InitHc ;
6233: CALL_OW 19
// InitUc ;
6237: CALL_OW 18
// uc_side := side ;
6241: LD_ADDR_OWVAR 20
6245: PUSH
6246: LD_VAR 0 15
6250: ST_TO_ADDR
// uc_nation := nation ;
6251: LD_ADDR_OWVAR 21
6255: PUSH
6256: LD_VAR 0 16
6260: ST_TO_ADDR
// if buildings then
6261: LD_VAR 0 17
6265: IFFALSE 7254
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6267: LD_VAR 0 17
6271: PPUSH
6272: LD_INT 2
6274: PUSH
6275: LD_INT 30
6277: PUSH
6278: LD_INT 32
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: LD_INT 30
6287: PUSH
6288: LD_INT 33
6290: PUSH
6291: EMPTY
6292: LIST
6293: LIST
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: PPUSH
6300: CALL_OW 72
6304: IFFALSE 6387
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6306: LD_ADDR_VAR 0 7
6310: PUSH
6311: LD_VAR 0 17
6315: PPUSH
6316: LD_INT 2
6318: PUSH
6319: LD_INT 30
6321: PUSH
6322: LD_INT 32
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 30
6331: PUSH
6332: LD_INT 33
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 72
6348: PUSH
6349: FOR_IN
6350: IFFALSE 6385
// begin if not GetBWeapon ( i ) then
6352: LD_VAR 0 7
6356: PPUSH
6357: CALL_OW 269
6361: NOT
6362: IFFALSE 6383
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6364: LD_VAR 0 7
6368: PPUSH
6369: LD_VAR 0 7
6373: PPUSH
6374: CALL 7400 0 1
6378: PPUSH
6379: CALL_OW 431
// end ;
6383: GO 6349
6385: POP
6386: POP
// end ; for i = 1 to personel do
6387: LD_ADDR_VAR 0 7
6391: PUSH
6392: DOUBLE
6393: LD_INT 1
6395: DEC
6396: ST_TO_ADDR
6397: LD_VAR 0 5
6401: PUSH
6402: FOR_TO
6403: IFFALSE 7234
// begin if i > 4 then
6405: LD_VAR 0 7
6409: PUSH
6410: LD_INT 4
6412: GREATER
6413: IFFALSE 6417
// break ;
6415: GO 7234
// case i of 1 :
6417: LD_VAR 0 7
6421: PUSH
6422: LD_INT 1
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6503
6430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6431: LD_ADDR_VAR 0 11
6435: PUSH
6436: LD_VAR 0 17
6440: PPUSH
6441: LD_INT 22
6443: PUSH
6444: LD_VAR 0 15
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 2
6455: PUSH
6456: LD_INT 30
6458: PUSH
6459: LD_INT 32
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 4
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: LD_INT 30
6478: PUSH
6479: LD_INT 5
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL_OW 72
6500: ST_TO_ADDR
6501: GO 6725
6503: LD_INT 2
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6573
6511: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6512: LD_ADDR_VAR 0 11
6516: PUSH
6517: LD_VAR 0 17
6521: PPUSH
6522: LD_INT 22
6524: PUSH
6525: LD_VAR 0 15
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: LD_INT 2
6536: PUSH
6537: LD_INT 30
6539: PUSH
6540: LD_INT 0
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 30
6549: PUSH
6550: LD_INT 1
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 72
6570: ST_TO_ADDR
6571: GO 6725
6573: LD_INT 3
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6581
6579: GO 6643
6581: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6582: LD_ADDR_VAR 0 11
6586: PUSH
6587: LD_VAR 0 17
6591: PPUSH
6592: LD_INT 22
6594: PUSH
6595: LD_VAR 0 15
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 2
6606: PUSH
6607: LD_INT 30
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 30
6619: PUSH
6620: LD_INT 3
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 72
6640: ST_TO_ADDR
6641: GO 6725
6643: LD_INT 4
6645: DOUBLE
6646: EQUAL
6647: IFTRUE 6651
6649: GO 6724
6651: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6652: LD_ADDR_VAR 0 11
6656: PUSH
6657: LD_VAR 0 17
6661: PPUSH
6662: LD_INT 22
6664: PUSH
6665: LD_VAR 0 15
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 2
6676: PUSH
6677: LD_INT 30
6679: PUSH
6680: LD_INT 6
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 30
6689: PUSH
6690: LD_INT 7
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 30
6699: PUSH
6700: LD_INT 8
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PPUSH
6717: CALL_OW 72
6721: ST_TO_ADDR
6722: GO 6725
6724: POP
// if not f then
6725: LD_VAR 0 11
6729: NOT
6730: IFFALSE 6734
// continue ;
6732: GO 6402
// x := personel [ i ] ;
6734: LD_ADDR_VAR 0 12
6738: PUSH
6739: LD_VAR 0 5
6743: PUSH
6744: LD_VAR 0 7
6748: ARRAY
6749: ST_TO_ADDR
// if x = - 1 then
6750: LD_VAR 0 12
6754: PUSH
6755: LD_INT 1
6757: NEG
6758: EQUAL
6759: IFFALSE 6964
// begin for j in f do
6761: LD_ADDR_VAR 0 8
6765: PUSH
6766: LD_VAR 0 11
6770: PUSH
6771: FOR_IN
6772: IFFALSE 6960
// repeat if GetBType ( j ) = b_barracks then
6774: LD_VAR 0 8
6778: PPUSH
6779: CALL_OW 266
6783: PUSH
6784: LD_INT 5
6786: EQUAL
6787: IFFALSE 6857
// begin if UnitsInside ( j ) < 3 then
6789: LD_VAR 0 8
6793: PPUSH
6794: CALL_OW 313
6798: PUSH
6799: LD_INT 3
6801: LESS
6802: IFFALSE 6838
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
6804: LD_INT 0
6806: PPUSH
6807: LD_INT 5
6809: PUSH
6810: LD_INT 8
6812: PUSH
6813: LD_INT 9
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: LIST
6820: PUSH
6821: LD_VAR 0 16
6825: ARRAY
6826: PPUSH
6827: LD_VAR 0 3
6831: PPUSH
6832: CALL_OW 380
6836: GO 6855
// PrepareHuman ( false , i , skill ) ;
6838: LD_INT 0
6840: PPUSH
6841: LD_VAR 0 7
6845: PPUSH
6846: LD_VAR 0 3
6850: PPUSH
6851: CALL_OW 380
// end else
6855: GO 6874
// PrepareHuman ( false , i , skill ) ;
6857: LD_INT 0
6859: PPUSH
6860: LD_VAR 0 7
6864: PPUSH
6865: LD_VAR 0 3
6869: PPUSH
6870: CALL_OW 380
// un := CreateHuman ;
6874: LD_ADDR_VAR 0 13
6878: PUSH
6879: CALL_OW 44
6883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6884: LD_ADDR_VAR 0 6
6888: PUSH
6889: LD_VAR 0 6
6893: PPUSH
6894: LD_INT 1
6896: PPUSH
6897: LD_VAR 0 13
6901: PPUSH
6902: CALL_OW 2
6906: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6907: LD_VAR 0 13
6911: PPUSH
6912: LD_VAR 0 8
6916: PPUSH
6917: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6921: LD_VAR 0 8
6925: PPUSH
6926: CALL_OW 313
6930: PUSH
6931: LD_INT 6
6933: EQUAL
6934: PUSH
6935: LD_VAR 0 8
6939: PPUSH
6940: CALL_OW 266
6944: PUSH
6945: LD_INT 32
6947: PUSH
6948: LD_INT 31
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: IN
6955: OR
6956: IFFALSE 6774
6958: GO 6771
6960: POP
6961: POP
// end else
6962: GO 7232
// for j = 1 to x do
6964: LD_ADDR_VAR 0 8
6968: PUSH
6969: DOUBLE
6970: LD_INT 1
6972: DEC
6973: ST_TO_ADDR
6974: LD_VAR 0 12
6978: PUSH
6979: FOR_TO
6980: IFFALSE 7230
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6982: LD_VAR 0 11
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: PPUSH
6991: CALL_OW 313
6995: PUSH
6996: LD_VAR 0 11
7000: PUSH
7001: LD_INT 1
7003: ARRAY
7004: PPUSH
7005: CALL_OW 266
7009: PUSH
7010: LD_INT 32
7012: PUSH
7013: LD_INT 31
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: IN
7020: AND
7021: PUSH
7022: LD_VAR 0 11
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: PPUSH
7031: CALL_OW 313
7035: PUSH
7036: LD_INT 6
7038: EQUAL
7039: OR
7040: IFFALSE 7060
// f := Delete ( f , 1 ) ;
7042: LD_ADDR_VAR 0 11
7046: PUSH
7047: LD_VAR 0 11
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// if not f then
7060: LD_VAR 0 11
7064: NOT
7065: IFFALSE 7069
// break ;
7067: GO 7230
// if GetBType ( f [ 1 ] ) = b_barracks then
7069: LD_VAR 0 11
7073: PUSH
7074: LD_INT 1
7076: ARRAY
7077: PPUSH
7078: CALL_OW 266
7082: PUSH
7083: LD_INT 5
7085: EQUAL
7086: IFFALSE 7160
// begin if UnitsInside ( f [ 1 ] ) < 3 then
7088: LD_VAR 0 11
7092: PUSH
7093: LD_INT 1
7095: ARRAY
7096: PPUSH
7097: CALL_OW 313
7101: PUSH
7102: LD_INT 3
7104: LESS
7105: IFFALSE 7141
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
7107: LD_INT 0
7109: PPUSH
7110: LD_INT 5
7112: PUSH
7113: LD_INT 8
7115: PUSH
7116: LD_INT 9
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: LIST
7123: PUSH
7124: LD_VAR 0 16
7128: ARRAY
7129: PPUSH
7130: LD_VAR 0 3
7134: PPUSH
7135: CALL_OW 380
7139: GO 7158
// PrepareHuman ( false , i , skill ) ;
7141: LD_INT 0
7143: PPUSH
7144: LD_VAR 0 7
7148: PPUSH
7149: LD_VAR 0 3
7153: PPUSH
7154: CALL_OW 380
// end else
7158: GO 7177
// PrepareHuman ( false , i , skill ) ;
7160: LD_INT 0
7162: PPUSH
7163: LD_VAR 0 7
7167: PPUSH
7168: LD_VAR 0 3
7172: PPUSH
7173: CALL_OW 380
// un := CreateHuman ;
7177: LD_ADDR_VAR 0 13
7181: PUSH
7182: CALL_OW 44
7186: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
7187: LD_ADDR_VAR 0 6
7191: PUSH
7192: LD_VAR 0 6
7196: PPUSH
7197: LD_INT 1
7199: PPUSH
7200: LD_VAR 0 13
7204: PPUSH
7205: CALL_OW 2
7209: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
7210: LD_VAR 0 13
7214: PPUSH
7215: LD_VAR 0 11
7219: PUSH
7220: LD_INT 1
7222: ARRAY
7223: PPUSH
7224: CALL_OW 52
// end ;
7228: GO 6979
7230: POP
7231: POP
// end ;
7232: GO 6402
7234: POP
7235: POP
// result := result ^ buildings ;
7236: LD_ADDR_VAR 0 6
7240: PUSH
7241: LD_VAR 0 6
7245: PUSH
7246: LD_VAR 0 17
7250: ADD
7251: ST_TO_ADDR
// end else
7252: GO 7395
// begin for i = 1 to personel do
7254: LD_ADDR_VAR 0 7
7258: PUSH
7259: DOUBLE
7260: LD_INT 1
7262: DEC
7263: ST_TO_ADDR
7264: LD_VAR 0 5
7268: PUSH
7269: FOR_TO
7270: IFFALSE 7393
// begin if i > 4 then
7272: LD_VAR 0 7
7276: PUSH
7277: LD_INT 4
7279: GREATER
7280: IFFALSE 7284
// break ;
7282: GO 7393
// x := personel [ i ] ;
7284: LD_ADDR_VAR 0 12
7288: PUSH
7289: LD_VAR 0 5
7293: PUSH
7294: LD_VAR 0 7
7298: ARRAY
7299: ST_TO_ADDR
// if x = - 1 then
7300: LD_VAR 0 12
7304: PUSH
7305: LD_INT 1
7307: NEG
7308: EQUAL
7309: IFFALSE 7313
// continue ;
7311: GO 7269
// PrepareHuman ( false , i , skill ) ;
7313: LD_INT 0
7315: PPUSH
7316: LD_VAR 0 7
7320: PPUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: CALL_OW 380
// un := CreateHuman ;
7330: LD_ADDR_VAR 0 13
7334: PUSH
7335: CALL_OW 44
7339: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7340: LD_VAR 0 13
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: LD_VAR 0 1
7359: PPUSH
7360: CALL_OW 251
7364: PPUSH
7365: LD_INT 10
7367: PPUSH
7368: LD_INT 0
7370: PPUSH
7371: CALL_OW 50
// result := result ^ un ;
7375: LD_ADDR_VAR 0 6
7379: PUSH
7380: LD_VAR 0 6
7384: PUSH
7385: LD_VAR 0 13
7389: ADD
7390: ST_TO_ADDR
// end ;
7391: GO 7269
7393: POP
7394: POP
// end ; end ;
7395: LD_VAR 0 6
7399: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7400: LD_INT 0
7402: PPUSH
7403: PPUSH
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
7408: PPUSH
7409: PPUSH
7410: PPUSH
7411: PPUSH
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
7417: PPUSH
// result := false ;
7418: LD_ADDR_VAR 0 2
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7426: LD_VAR 0 1
7430: NOT
7431: PUSH
7432: LD_VAR 0 1
7436: PPUSH
7437: CALL_OW 266
7441: PUSH
7442: LD_INT 32
7444: PUSH
7445: LD_INT 33
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: IN
7452: NOT
7453: OR
7454: IFFALSE 7458
// exit ;
7456: GO 8691
// nat := GetNation ( tower ) ;
7458: LD_ADDR_VAR 0 11
7462: PUSH
7463: LD_VAR 0 1
7467: PPUSH
7468: CALL_OW 248
7472: ST_TO_ADDR
// side := GetSide ( tower ) ;
7473: LD_ADDR_VAR 0 15
7477: PUSH
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 255
7487: ST_TO_ADDR
// x := GetX ( tower ) ;
7488: LD_ADDR_VAR 0 9
7492: PUSH
7493: LD_VAR 0 1
7497: PPUSH
7498: CALL_OW 250
7502: ST_TO_ADDR
// y := GetY ( tower ) ;
7503: LD_ADDR_VAR 0 10
7507: PUSH
7508: LD_VAR 0 1
7512: PPUSH
7513: CALL_OW 251
7517: ST_TO_ADDR
// if not x or not y then
7518: LD_VAR 0 9
7522: NOT
7523: PUSH
7524: LD_VAR 0 10
7528: NOT
7529: OR
7530: IFFALSE 7534
// exit ;
7532: GO 8691
// weapon := 0 ;
7534: LD_ADDR_VAR 0 17
7538: PUSH
7539: LD_INT 0
7541: ST_TO_ADDR
// fac_list := [ ] ;
7542: LD_ADDR_VAR 0 16
7546: PUSH
7547: EMPTY
7548: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7549: LD_ADDR_VAR 0 5
7553: PUSH
7554: LD_VAR 0 1
7558: PPUSH
7559: CALL_OW 274
7563: PPUSH
7564: CALL 5569 0 1
7568: PPUSH
7569: LD_INT 30
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PPUSH
7579: CALL_OW 72
7583: ST_TO_ADDR
// if not factories then
7584: LD_VAR 0 5
7588: NOT
7589: IFFALSE 7593
// exit ;
7591: GO 8691
// for i in factories do
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_VAR 0 5
7602: PUSH
7603: FOR_IN
7604: IFFALSE 7629
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7606: LD_ADDR_VAR 0 16
7610: PUSH
7611: LD_VAR 0 16
7615: PUSH
7616: LD_VAR 0 7
7620: PPUSH
7621: CALL_OW 478
7625: UNION
7626: ST_TO_ADDR
7627: GO 7603
7629: POP
7630: POP
// if not fac_list then
7631: LD_VAR 0 16
7635: NOT
7636: IFFALSE 7640
// exit ;
7638: GO 8691
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: LD_INT 5
7650: PUSH
7651: LD_INT 9
7653: PUSH
7654: LD_INT 10
7656: PUSH
7657: LD_INT 6
7659: PUSH
7660: LD_INT 7
7662: PUSH
7663: LD_INT 11
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: PUSH
7675: LD_INT 27
7677: PUSH
7678: LD_INT 28
7680: PUSH
7681: LD_INT 26
7683: PUSH
7684: LD_INT 30
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: PUSH
7693: LD_INT 43
7695: PUSH
7696: LD_INT 44
7698: PUSH
7699: LD_INT 46
7701: PUSH
7702: LD_INT 45
7704: PUSH
7705: LD_INT 47
7707: PUSH
7708: LD_INT 49
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: PUSH
7724: LD_VAR 0 11
7728: ARRAY
7729: ST_TO_ADDR
// for i in list do
7730: LD_ADDR_VAR 0 7
7734: PUSH
7735: LD_VAR 0 4
7739: PUSH
7740: FOR_IN
7741: IFFALSE 7774
// if not i in fac_list then
7743: LD_VAR 0 7
7747: PUSH
7748: LD_VAR 0 16
7752: IN
7753: NOT
7754: IFFALSE 7772
// list := list diff i ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: LD_VAR 0 4
7765: PUSH
7766: LD_VAR 0 7
7770: DIFF
7771: ST_TO_ADDR
7772: GO 7740
7774: POP
7775: POP
// if not list then
7776: LD_VAR 0 4
7780: NOT
7781: IFFALSE 7785
// exit ;
7783: GO 8691
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7785: LD_VAR 0 11
7789: PUSH
7790: LD_INT 3
7792: EQUAL
7793: PUSH
7794: LD_INT 49
7796: PUSH
7797: LD_VAR 0 4
7801: IN
7802: AND
7803: PUSH
7804: LD_INT 31
7806: PPUSH
7807: LD_VAR 0 15
7811: PPUSH
7812: CALL_OW 321
7816: PUSH
7817: LD_INT 2
7819: EQUAL
7820: AND
7821: IFFALSE 7881
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7823: LD_INT 22
7825: PUSH
7826: LD_VAR 0 15
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 35
7837: PUSH
7838: LD_INT 49
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 91
7847: PUSH
7848: LD_VAR 0 1
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: LIST
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 69
7870: NOT
7871: IFFALSE 7881
// weapon := ru_time_lapser ;
7873: LD_ADDR_VAR 0 17
7877: PUSH
7878: LD_INT 49
7880: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7881: LD_VAR 0 11
7885: PUSH
7886: LD_INT 1
7888: PUSH
7889: LD_INT 2
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: IN
7896: PUSH
7897: LD_INT 11
7899: PUSH
7900: LD_VAR 0 4
7904: IN
7905: PUSH
7906: LD_INT 30
7908: PUSH
7909: LD_VAR 0 4
7913: IN
7914: OR
7915: AND
7916: PUSH
7917: LD_INT 6
7919: PPUSH
7920: LD_VAR 0 15
7924: PPUSH
7925: CALL_OW 321
7929: PUSH
7930: LD_INT 2
7932: EQUAL
7933: AND
7934: IFFALSE 8099
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7936: LD_INT 22
7938: PUSH
7939: LD_VAR 0 15
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: PUSH
7948: LD_INT 2
7950: PUSH
7951: LD_INT 35
7953: PUSH
7954: LD_INT 11
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 35
7963: PUSH
7964: LD_INT 30
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: PUSH
7976: LD_INT 91
7978: PUSH
7979: LD_VAR 0 1
7983: PUSH
7984: LD_INT 18
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: PPUSH
7997: CALL_OW 69
8001: NOT
8002: PUSH
8003: LD_INT 22
8005: PUSH
8006: LD_VAR 0 15
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 2
8017: PUSH
8018: LD_INT 30
8020: PUSH
8021: LD_INT 32
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 30
8030: PUSH
8031: LD_INT 33
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: LIST
8042: PUSH
8043: LD_INT 91
8045: PUSH
8046: LD_VAR 0 1
8050: PUSH
8051: LD_INT 12
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: PUSH
8064: EMPTY
8065: LIST
8066: PPUSH
8067: CALL_OW 69
8071: PUSH
8072: LD_INT 2
8074: GREATER
8075: AND
8076: IFFALSE 8099
// weapon := [ us_radar , ar_radar ] [ nat ] ;
8078: LD_ADDR_VAR 0 17
8082: PUSH
8083: LD_INT 11
8085: PUSH
8086: LD_INT 30
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: PUSH
8093: LD_VAR 0 11
8097: ARRAY
8098: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
8099: LD_VAR 0 17
8103: NOT
8104: PUSH
8105: LD_INT 40
8107: PPUSH
8108: LD_VAR 0 15
8112: PPUSH
8113: CALL_OW 321
8117: PUSH
8118: LD_INT 2
8120: EQUAL
8121: AND
8122: PUSH
8123: LD_INT 7
8125: PUSH
8126: LD_VAR 0 4
8130: IN
8131: PUSH
8132: LD_INT 28
8134: PUSH
8135: LD_VAR 0 4
8139: IN
8140: OR
8141: PUSH
8142: LD_INT 45
8144: PUSH
8145: LD_VAR 0 4
8149: IN
8150: OR
8151: AND
8152: IFFALSE 8406
// begin hex := _GetHexInfo ( x , y ) ;
8154: LD_ADDR_VAR 0 3
8158: PUSH
8159: LD_VAR 0 9
8163: PPUSH
8164: LD_VAR 0 10
8168: PPUSH
8169: CALL 1992 0 2
8173: ST_TO_ADDR
// if hex [ 1 ] then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 1
8181: ARRAY
8182: IFFALSE 8186
// exit ;
8184: GO 8691
// height := hex [ 2 ] ;
8186: LD_ADDR_VAR 0 14
8190: PUSH
8191: LD_VAR 0 3
8195: PUSH
8196: LD_INT 2
8198: ARRAY
8199: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
8200: LD_ADDR_VAR 0 13
8204: PUSH
8205: LD_INT 0
8207: PUSH
8208: LD_INT 2
8210: PUSH
8211: LD_INT 3
8213: PUSH
8214: LD_INT 5
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: ST_TO_ADDR
// for i in tmp do
8223: LD_ADDR_VAR 0 7
8227: PUSH
8228: LD_VAR 0 13
8232: PUSH
8233: FOR_IN
8234: IFFALSE 8404
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
8236: LD_ADDR_VAR 0 8
8240: PUSH
8241: LD_VAR 0 9
8245: PPUSH
8246: LD_VAR 0 7
8250: PPUSH
8251: LD_INT 5
8253: PPUSH
8254: CALL_OW 272
8258: PUSH
8259: LD_VAR 0 10
8263: PPUSH
8264: LD_VAR 0 7
8268: PPUSH
8269: LD_INT 5
8271: PPUSH
8272: CALL_OW 273
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8281: LD_VAR 0 8
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: LD_VAR 0 8
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PPUSH
8299: CALL_OW 488
8303: IFFALSE 8402
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8305: LD_ADDR_VAR 0 3
8309: PUSH
8310: LD_VAR 0 8
8314: PUSH
8315: LD_INT 1
8317: ARRAY
8318: PPUSH
8319: LD_VAR 0 8
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PPUSH
8328: CALL 1992 0 2
8332: ST_TO_ADDR
// if hex [ 1 ] then
8333: LD_VAR 0 3
8337: PUSH
8338: LD_INT 1
8340: ARRAY
8341: IFFALSE 8345
// continue ;
8343: GO 8233
// h := hex [ 2 ] ;
8345: LD_ADDR_VAR 0 12
8349: PUSH
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 2
8357: ARRAY
8358: ST_TO_ADDR
// if h + 7 < height then
8359: LD_VAR 0 12
8363: PUSH
8364: LD_INT 7
8366: PLUS
8367: PUSH
8368: LD_VAR 0 14
8372: LESS
8373: IFFALSE 8402
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8375: LD_ADDR_VAR 0 17
8379: PUSH
8380: LD_INT 7
8382: PUSH
8383: LD_INT 28
8385: PUSH
8386: LD_INT 45
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: LIST
8393: PUSH
8394: LD_VAR 0 11
8398: ARRAY
8399: ST_TO_ADDR
// break ;
8400: GO 8404
// end ; end ; end ;
8402: GO 8233
8404: POP
8405: POP
// end ; if not weapon then
8406: LD_VAR 0 17
8410: NOT
8411: IFFALSE 8573
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8413: LD_ADDR_VAR 0 4
8417: PUSH
8418: LD_VAR 0 4
8422: PUSH
8423: LD_INT 11
8425: PUSH
8426: LD_INT 30
8428: PUSH
8429: LD_INT 49
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: DIFF
8437: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8438: LD_ADDR_VAR 0 17
8442: PUSH
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 1
8450: PPUSH
8451: LD_VAR 0 4
8455: PPUSH
8456: CALL_OW 12
8460: ARRAY
8461: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8462: LD_ADDR_VAR 0 13
8466: PUSH
8467: LD_INT 22
8469: PUSH
8470: LD_VAR 0 15
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 3
8481: PUSH
8482: LD_INT 35
8484: PUSH
8485: LD_INT 0
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 69
8504: ST_TO_ADDR
// for i in tmp do
8505: LD_ADDR_VAR 0 7
8509: PUSH
8510: LD_VAR 0 13
8514: PUSH
8515: FOR_IN
8516: IFFALSE 8541
// list := list diff GetBWeapon ( i ) ;
8518: LD_ADDR_VAR 0 4
8522: PUSH
8523: LD_VAR 0 4
8527: PUSH
8528: LD_VAR 0 7
8532: PPUSH
8533: CALL_OW 269
8537: DIFF
8538: ST_TO_ADDR
8539: GO 8515
8541: POP
8542: POP
// if list then
8543: LD_VAR 0 4
8547: IFFALSE 8573
// weapon := list [ rand ( 1 , list ) ] ;
8549: LD_ADDR_VAR 0 17
8553: PUSH
8554: LD_VAR 0 4
8558: PUSH
8559: LD_INT 1
8561: PPUSH
8562: LD_VAR 0 4
8566: PPUSH
8567: CALL_OW 12
8571: ARRAY
8572: ST_TO_ADDR
// end ; if weapon then
8573: LD_VAR 0 17
8577: IFFALSE 8691
// begin tmp := CostOfWeapon ( weapon ) ;
8579: LD_ADDR_VAR 0 13
8583: PUSH
8584: LD_VAR 0 17
8588: PPUSH
8589: CALL_OW 451
8593: ST_TO_ADDR
// j := GetBase ( tower ) ;
8594: LD_ADDR_VAR 0 8
8598: PUSH
8599: LD_VAR 0 1
8603: PPUSH
8604: CALL_OW 274
8608: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8609: LD_VAR 0 8
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: CALL_OW 275
8621: PUSH
8622: LD_VAR 0 13
8626: PUSH
8627: LD_INT 1
8629: ARRAY
8630: GREATEREQUAL
8631: PUSH
8632: LD_VAR 0 8
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: CALL_OW 275
8644: PUSH
8645: LD_VAR 0 13
8649: PUSH
8650: LD_INT 2
8652: ARRAY
8653: GREATEREQUAL
8654: AND
8655: PUSH
8656: LD_VAR 0 8
8660: PPUSH
8661: LD_INT 3
8663: PPUSH
8664: CALL_OW 275
8668: PUSH
8669: LD_VAR 0 13
8673: PUSH
8674: LD_INT 3
8676: ARRAY
8677: GREATEREQUAL
8678: AND
8679: IFFALSE 8691
// result := weapon ;
8681: LD_ADDR_VAR 0 2
8685: PUSH
8686: LD_VAR 0 17
8690: ST_TO_ADDR
// end ; end ;
8691: LD_VAR 0 2
8695: RET
// export function Compare ( val1 , val2 ) ; begin
8696: LD_INT 0
8698: PPUSH
// if val1 = val2 then
8699: LD_VAR 0 1
8703: PUSH
8704: LD_VAR 0 2
8708: EQUAL
8709: IFFALSE 8721
// result := true else
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 1
8718: ST_TO_ADDR
8719: GO 8729
// result := false ;
8721: LD_ADDR_VAR 0 3
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// end ;
8729: LD_VAR 0 3
8733: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8734: LD_INT 0
8736: PPUSH
8737: PPUSH
// result := true ;
8738: LD_ADDR_VAR 0 3
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// if array1 = array2 then
8746: LD_VAR 0 1
8750: PUSH
8751: LD_VAR 0 2
8755: EQUAL
8756: IFFALSE 8821
// begin for i = 1 to array1 do
8758: LD_ADDR_VAR 0 4
8762: PUSH
8763: DOUBLE
8764: LD_INT 1
8766: DEC
8767: ST_TO_ADDR
8768: LD_VAR 0 1
8772: PUSH
8773: FOR_TO
8774: IFFALSE 8817
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8776: LD_VAR 0 1
8780: PUSH
8781: LD_VAR 0 4
8785: ARRAY
8786: PPUSH
8787: LD_VAR 0 2
8791: PUSH
8792: LD_VAR 0 4
8796: ARRAY
8797: PPUSH
8798: CALL 8696 0 2
8802: NOT
8803: IFFALSE 8815
// begin result := false ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// break ;
8813: GO 8817
// end ;
8815: GO 8773
8817: POP
8818: POP
// end else
8819: GO 8829
// result := false ;
8821: LD_ADDR_VAR 0 3
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// end ;
8829: LD_VAR 0 3
8833: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8834: LD_INT 0
8836: PPUSH
8837: PPUSH
8838: PPUSH
// pom := GetBase ( fac ) ;
8839: LD_ADDR_VAR 0 5
8843: PUSH
8844: LD_VAR 0 1
8848: PPUSH
8849: CALL_OW 274
8853: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8854: LD_ADDR_VAR 0 4
8858: PUSH
8859: LD_VAR 0 2
8863: PUSH
8864: LD_INT 1
8866: ARRAY
8867: PPUSH
8868: LD_VAR 0 2
8872: PUSH
8873: LD_INT 2
8875: ARRAY
8876: PPUSH
8877: LD_VAR 0 2
8881: PUSH
8882: LD_INT 3
8884: ARRAY
8885: PPUSH
8886: LD_VAR 0 2
8890: PUSH
8891: LD_INT 4
8893: ARRAY
8894: PPUSH
8895: CALL_OW 449
8899: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8900: LD_VAR 0 5
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: CALL_OW 275
8912: PUSH
8913: LD_VAR 0 4
8917: PUSH
8918: LD_INT 1
8920: ARRAY
8921: GREATEREQUAL
8922: PUSH
8923: LD_VAR 0 5
8927: PPUSH
8928: LD_INT 2
8930: PPUSH
8931: CALL_OW 275
8935: PUSH
8936: LD_VAR 0 4
8940: PUSH
8941: LD_INT 2
8943: ARRAY
8944: GREATEREQUAL
8945: AND
8946: PUSH
8947: LD_VAR 0 5
8951: PPUSH
8952: LD_INT 3
8954: PPUSH
8955: CALL_OW 275
8959: PUSH
8960: LD_VAR 0 4
8964: PUSH
8965: LD_INT 3
8967: ARRAY
8968: GREATEREQUAL
8969: AND
8970: IFFALSE 8982
// result := true else
8972: LD_ADDR_VAR 0 3
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
8980: GO 8990
// result := false ;
8982: LD_ADDR_VAR 0 3
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// end ;
8990: LD_VAR 0 3
8994: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8995: LD_INT 0
8997: PPUSH
8998: PPUSH
8999: PPUSH
9000: PPUSH
9001: PPUSH
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
// result := false ;
9006: LD_ADDR_VAR 0 6
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
9014: LD_VAR 0 1
9018: NOT
9019: PUSH
9020: LD_VAR 0 2
9024: NOT
9025: OR
9026: PUSH
9027: LD_VAR 0 5
9031: PUSH
9032: LD_INT 0
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: LD_INT 2
9040: PUSH
9041: LD_INT 3
9043: PUSH
9044: LD_INT 4
9046: PUSH
9047: LD_INT 5
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: IN
9058: NOT
9059: OR
9060: PUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_VAR 0 4
9070: PPUSH
9071: CALL_OW 488
9075: NOT
9076: OR
9077: IFFALSE 9081
// exit ;
9079: GO 9755
// pom := GetBase ( bdepot ) ;
9081: LD_ADDR_VAR 0 9
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 274
9095: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
9096: LD_ADDR_VAR 0 10
9100: PUSH
9101: LD_VAR 0 2
9105: PPUSH
9106: LD_VAR 0 1
9110: PPUSH
9111: CALL_OW 248
9115: PPUSH
9116: CALL_OW 450
9120: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
9121: LD_VAR 0 9
9125: PPUSH
9126: LD_INT 1
9128: PPUSH
9129: CALL_OW 275
9133: PUSH
9134: LD_VAR 0 10
9138: PUSH
9139: LD_INT 1
9141: ARRAY
9142: GREATEREQUAL
9143: PUSH
9144: LD_VAR 0 9
9148: PPUSH
9149: LD_INT 2
9151: PPUSH
9152: CALL_OW 275
9156: PUSH
9157: LD_VAR 0 10
9161: PUSH
9162: LD_INT 2
9164: ARRAY
9165: GREATEREQUAL
9166: AND
9167: PUSH
9168: LD_VAR 0 9
9172: PPUSH
9173: LD_INT 3
9175: PPUSH
9176: CALL_OW 275
9180: PUSH
9181: LD_VAR 0 10
9185: PUSH
9186: LD_INT 3
9188: ARRAY
9189: GREATEREQUAL
9190: AND
9191: NOT
9192: IFFALSE 9196
// exit ;
9194: GO 9755
// if GetBType ( bdepot ) = b_depot then
9196: LD_VAR 0 1
9200: PPUSH
9201: CALL_OW 266
9205: PUSH
9206: LD_INT 0
9208: EQUAL
9209: IFFALSE 9221
// dist := 28 else
9211: LD_ADDR_VAR 0 13
9215: PUSH
9216: LD_INT 28
9218: ST_TO_ADDR
9219: GO 9229
// dist := 36 ;
9221: LD_ADDR_VAR 0 13
9225: PUSH
9226: LD_INT 36
9228: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
9229: LD_VAR 0 1
9233: PPUSH
9234: LD_VAR 0 3
9238: PPUSH
9239: LD_VAR 0 4
9243: PPUSH
9244: CALL_OW 297
9248: PUSH
9249: LD_VAR 0 13
9253: GREATER
9254: IFFALSE 9258
// exit ;
9256: GO 9755
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
9258: LD_ADDR_VAR 0 11
9262: PUSH
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_VAR 0 3
9272: PPUSH
9273: LD_VAR 0 4
9277: PPUSH
9278: LD_VAR 0 5
9282: PPUSH
9283: LD_VAR 0 1
9287: PPUSH
9288: CALL_OW 248
9292: PPUSH
9293: LD_INT 0
9295: PPUSH
9296: CALL 9760 0 6
9300: ST_TO_ADDR
// if not hexes then
9301: LD_VAR 0 11
9305: NOT
9306: IFFALSE 9310
// exit ;
9308: GO 9755
// hex := _GetHexInfo ( x , y ) ;
9310: LD_ADDR_VAR 0 14
9314: PUSH
9315: LD_VAR 0 3
9319: PPUSH
9320: LD_VAR 0 4
9324: PPUSH
9325: CALL 1992 0 2
9329: ST_TO_ADDR
// if hex [ 1 ] then
9330: LD_VAR 0 14
9334: PUSH
9335: LD_INT 1
9337: ARRAY
9338: IFFALSE 9342
// exit ;
9340: GO 9755
// height := hex [ 2 ] ;
9342: LD_ADDR_VAR 0 12
9346: PUSH
9347: LD_VAR 0 14
9351: PUSH
9352: LD_INT 2
9354: ARRAY
9355: ST_TO_ADDR
// for i = 1 to hexes do
9356: LD_ADDR_VAR 0 7
9360: PUSH
9361: DOUBLE
9362: LD_INT 1
9364: DEC
9365: ST_TO_ADDR
9366: LD_VAR 0 11
9370: PUSH
9371: FOR_TO
9372: IFFALSE 9710
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9374: LD_VAR 0 11
9378: PUSH
9379: LD_VAR 0 7
9383: ARRAY
9384: PUSH
9385: LD_INT 1
9387: ARRAY
9388: PPUSH
9389: LD_VAR 0 11
9393: PUSH
9394: LD_VAR 0 7
9398: ARRAY
9399: PUSH
9400: LD_INT 2
9402: ARRAY
9403: PPUSH
9404: CALL_OW 488
9408: NOT
9409: IFFALSE 9413
// continue ;
9411: GO 9371
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9413: LD_ADDR_VAR 0 8
9417: PUSH
9418: LD_VAR 0 11
9422: PUSH
9423: LD_VAR 0 7
9427: ARRAY
9428: PUSH
9429: LD_INT 1
9431: ARRAY
9432: PPUSH
9433: LD_VAR 0 11
9437: PUSH
9438: LD_VAR 0 7
9442: ARRAY
9443: PUSH
9444: LD_INT 2
9446: ARRAY
9447: PPUSH
9448: CALL 1992 0 2
9452: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9453: LD_VAR 0 8
9457: PUSH
9458: LD_INT 1
9460: ARRAY
9461: PUSH
9462: LD_VAR 0 8
9466: PUSH
9467: LD_INT 2
9469: ARRAY
9470: PUSH
9471: LD_VAR 0 12
9475: PUSH
9476: LD_INT 2
9478: PLUS
9479: GREATER
9480: OR
9481: PUSH
9482: LD_VAR 0 8
9486: PUSH
9487: LD_INT 2
9489: ARRAY
9490: PUSH
9491: LD_VAR 0 12
9495: PUSH
9496: LD_INT 2
9498: MINUS
9499: LESS
9500: OR
9501: PUSH
9502: LD_VAR 0 8
9506: PUSH
9507: LD_INT 3
9509: ARRAY
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: LD_INT 8
9516: PUSH
9517: LD_INT 9
9519: PUSH
9520: LD_INT 10
9522: PUSH
9523: LD_INT 11
9525: PUSH
9526: LD_INT 12
9528: PUSH
9529: LD_INT 13
9531: PUSH
9532: LD_INT 16
9534: PUSH
9535: LD_INT 17
9537: PUSH
9538: LD_INT 18
9540: PUSH
9541: LD_INT 19
9543: PUSH
9544: LD_INT 20
9546: PUSH
9547: LD_INT 21
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: IN
9565: NOT
9566: OR
9567: PUSH
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 4
9575: ARRAY
9576: OR
9577: PUSH
9578: LD_VAR 0 8
9582: PUSH
9583: LD_INT 5
9585: ARRAY
9586: NOT
9587: OR
9588: PUSH
9589: LD_VAR 0 8
9593: PUSH
9594: LD_INT 6
9596: ARRAY
9597: PUSH
9598: LD_INT 1
9600: PUSH
9601: LD_INT 2
9603: PUSH
9604: LD_INT 7
9606: PUSH
9607: LD_INT 9
9609: PUSH
9610: LD_INT 10
9612: PUSH
9613: LD_INT 11
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: IN
9624: NOT
9625: OR
9626: PUSH
9627: LD_VAR 0 11
9631: PUSH
9632: LD_VAR 0 7
9636: ARRAY
9637: PUSH
9638: LD_INT 1
9640: ARRAY
9641: PPUSH
9642: LD_VAR 0 11
9646: PUSH
9647: LD_VAR 0 7
9651: ARRAY
9652: PUSH
9653: LD_INT 2
9655: ARRAY
9656: PPUSH
9657: CALL_OW 428
9661: PUSH
9662: LD_INT 0
9664: GREATER
9665: OR
9666: PUSH
9667: LD_VAR 0 11
9671: PUSH
9672: LD_VAR 0 7
9676: ARRAY
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: LD_VAR 0 11
9686: PUSH
9687: LD_VAR 0 7
9691: ARRAY
9692: PUSH
9693: LD_INT 2
9695: ARRAY
9696: PPUSH
9697: CALL_OW 351
9701: OR
9702: IFFALSE 9708
// exit ;
9704: POP
9705: POP
9706: GO 9755
// end ;
9708: GO 9371
9710: POP
9711: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 255
9721: PPUSH
9722: LD_VAR 0 3
9726: PPUSH
9727: LD_VAR 0 4
9731: PPUSH
9732: LD_INT 20
9734: PPUSH
9735: CALL 3741 0 4
9739: PUSH
9740: LD_INT 4
9742: ARRAY
9743: IFFALSE 9747
// exit ;
9745: GO 9755
// result := true ;
9747: LD_ADDR_VAR 0 6
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// end ;
9755: LD_VAR 0 6
9759: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9760: LD_INT 0
9762: PPUSH
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
9792: PPUSH
9793: PPUSH
9794: PPUSH
9795: PPUSH
9796: PPUSH
9797: PPUSH
9798: PPUSH
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
9810: PPUSH
9811: PPUSH
9812: PPUSH
9813: PPUSH
9814: PPUSH
9815: PPUSH
9816: PPUSH
9817: PPUSH
9818: PPUSH
9819: PPUSH
// result = [ ] ;
9820: LD_ADDR_VAR 0 7
9824: PUSH
9825: EMPTY
9826: ST_TO_ADDR
// temp_list = [ ] ;
9827: LD_ADDR_VAR 0 9
9831: PUSH
9832: EMPTY
9833: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9834: LD_VAR 0 4
9838: PUSH
9839: LD_INT 0
9841: PUSH
9842: LD_INT 1
9844: PUSH
9845: LD_INT 2
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 4
9853: PUSH
9854: LD_INT 5
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: IN
9865: NOT
9866: PUSH
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 0
9874: PUSH
9875: LD_INT 1
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: IN
9882: PUSH
9883: LD_VAR 0 5
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: LD_INT 3
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: LIST
9901: IN
9902: NOT
9903: AND
9904: OR
9905: IFFALSE 9909
// exit ;
9907: GO 28294
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9909: LD_VAR 0 1
9913: PUSH
9914: LD_INT 6
9916: PUSH
9917: LD_INT 7
9919: PUSH
9920: LD_INT 8
9922: PUSH
9923: LD_INT 13
9925: PUSH
9926: LD_INT 12
9928: PUSH
9929: LD_INT 15
9931: PUSH
9932: LD_INT 11
9934: PUSH
9935: LD_INT 14
9937: PUSH
9938: LD_INT 10
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: IN
9952: IFFALSE 9962
// btype = b_lab ;
9954: LD_ADDR_VAR 0 1
9958: PUSH
9959: LD_INT 6
9961: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9962: LD_VAR 0 6
9966: PUSH
9967: LD_INT 0
9969: PUSH
9970: LD_INT 1
9972: PUSH
9973: LD_INT 2
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: IN
9981: NOT
9982: PUSH
9983: LD_VAR 0 1
9987: PUSH
9988: LD_INT 0
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 2
9996: PUSH
9997: LD_INT 3
9999: PUSH
10000: LD_INT 6
10002: PUSH
10003: LD_INT 36
10005: PUSH
10006: LD_INT 4
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_INT 31
10014: PUSH
10015: LD_INT 32
10017: PUSH
10018: LD_INT 33
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: IN
10034: NOT
10035: PUSH
10036: LD_VAR 0 6
10040: PUSH
10041: LD_INT 1
10043: EQUAL
10044: AND
10045: OR
10046: PUSH
10047: LD_VAR 0 1
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 3
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: IN
10062: NOT
10063: PUSH
10064: LD_VAR 0 6
10068: PUSH
10069: LD_INT 2
10071: EQUAL
10072: AND
10073: OR
10074: IFFALSE 10084
// mode = 0 ;
10076: LD_ADDR_VAR 0 6
10080: PUSH
10081: LD_INT 0
10083: ST_TO_ADDR
// case mode of 0 :
10084: LD_VAR 0 6
10088: PUSH
10089: LD_INT 0
10091: DOUBLE
10092: EQUAL
10093: IFTRUE 10097
10095: GO 21550
10097: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
10098: LD_ADDR_VAR 0 11
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: LD_INT 0
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PUSH
10113: LD_INT 0
10115: PUSH
10116: LD_INT 1
10118: NEG
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 1
10126: PUSH
10127: LD_INT 0
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 0
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 1
10156: NEG
10157: PUSH
10158: LD_INT 0
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: PUSH
10165: LD_INT 1
10167: NEG
10168: PUSH
10169: LD_INT 1
10171: NEG
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 1
10179: NEG
10180: PUSH
10181: LD_INT 2
10183: NEG
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 0
10191: PUSH
10192: LD_INT 2
10194: NEG
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 1
10202: PUSH
10203: LD_INT 1
10205: NEG
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 1
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 0
10223: PUSH
10224: LD_INT 2
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 1
10233: NEG
10234: PUSH
10235: LD_INT 1
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: LD_INT 3
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 0
10254: PUSH
10255: LD_INT 3
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 1
10264: NEG
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10291: LD_ADDR_VAR 0 12
10295: PUSH
10296: LD_INT 0
10298: PUSH
10299: LD_INT 0
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 0
10308: PUSH
10309: LD_INT 1
10311: NEG
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: LD_INT 0
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 1
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 0
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 1
10349: NEG
10350: PUSH
10351: LD_INT 0
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 1
10360: NEG
10361: PUSH
10362: LD_INT 1
10364: NEG
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: LD_INT 1
10375: NEG
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 0
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 2
10393: PUSH
10394: LD_INT 1
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 1
10403: NEG
10404: PUSH
10405: LD_INT 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: NEG
10415: PUSH
10416: LD_INT 0
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PUSH
10423: LD_INT 2
10425: NEG
10426: PUSH
10427: LD_INT 1
10429: NEG
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 2
10437: NEG
10438: PUSH
10439: LD_INT 1
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: LD_INT 3
10448: NEG
10449: PUSH
10450: LD_INT 0
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 3
10459: NEG
10460: PUSH
10461: LD_INT 1
10463: NEG
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10487: LD_ADDR_VAR 0 13
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: LD_INT 0
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 0
10504: PUSH
10505: LD_INT 1
10507: NEG
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: LD_INT 0
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 1
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 0
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 1
10545: NEG
10546: PUSH
10547: LD_INT 0
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 1
10556: NEG
10557: PUSH
10558: LD_INT 1
10560: NEG
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 1
10568: NEG
10569: PUSH
10570: LD_INT 2
10572: NEG
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 1
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 2
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: LD_INT 2
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 2
10610: NEG
10611: PUSH
10612: LD_INT 1
10614: NEG
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 2
10622: NEG
10623: PUSH
10624: LD_INT 2
10626: NEG
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: NEG
10635: PUSH
10636: LD_INT 3
10638: NEG
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 3
10646: NEG
10647: PUSH
10648: LD_INT 2
10650: NEG
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 3
10658: NEG
10659: PUSH
10660: LD_INT 3
10662: NEG
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10686: LD_ADDR_VAR 0 14
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 0
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: LD_INT 1
10706: NEG
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: LD_INT 0
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 1
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 0
10734: PUSH
10735: LD_INT 1
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 1
10744: NEG
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 1
10755: NEG
10756: PUSH
10757: LD_INT 1
10759: NEG
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 1
10767: NEG
10768: PUSH
10769: LD_INT 2
10771: NEG
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 0
10779: PUSH
10780: LD_INT 2
10782: NEG
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 1
10790: PUSH
10791: LD_INT 1
10793: NEG
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 0
10811: PUSH
10812: LD_INT 2
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 1
10821: NEG
10822: PUSH
10823: LD_INT 1
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 1
10832: NEG
10833: PUSH
10834: LD_INT 3
10836: NEG
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: LD_INT 3
10847: NEG
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: LD_INT 2
10858: NEG
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10882: LD_ADDR_VAR 0 15
10886: PUSH
10887: LD_INT 0
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 0
10899: PUSH
10900: LD_INT 1
10902: NEG
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 1
10910: PUSH
10911: LD_INT 0
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 1
10920: PUSH
10921: LD_INT 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 0
10930: PUSH
10931: LD_INT 1
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 1
10940: NEG
10941: PUSH
10942: LD_INT 0
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 1
10951: NEG
10952: PUSH
10953: LD_INT 1
10955: NEG
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: LD_INT 1
10966: NEG
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 0
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: LD_INT 1
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 1
10994: NEG
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 2
11005: NEG
11006: PUSH
11007: LD_INT 0
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 2
11016: NEG
11017: PUSH
11018: LD_INT 1
11020: NEG
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 2
11028: PUSH
11029: LD_INT 1
11031: NEG
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 0
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
11075: LD_ADDR_VAR 0 16
11079: PUSH
11080: LD_INT 0
11082: PUSH
11083: LD_INT 0
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 0
11092: PUSH
11093: LD_INT 1
11095: NEG
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: LD_INT 0
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 1
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 0
11123: PUSH
11124: LD_INT 1
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 1
11133: NEG
11134: PUSH
11135: LD_INT 0
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 1
11144: NEG
11145: PUSH
11146: LD_INT 1
11148: NEG
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 1
11156: NEG
11157: PUSH
11158: LD_INT 2
11160: NEG
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 2
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 2
11198: NEG
11199: PUSH
11200: LD_INT 1
11202: NEG
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 2
11210: NEG
11211: PUSH
11212: LD_INT 2
11214: NEG
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: LD_INT 3
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11268: LD_ADDR_VAR 0 17
11272: PUSH
11273: LD_INT 0
11275: PUSH
11276: LD_INT 0
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 0
11285: PUSH
11286: LD_INT 1
11288: NEG
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 0
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 1
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 0
11316: PUSH
11317: LD_INT 1
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 1
11326: NEG
11327: PUSH
11328: LD_INT 0
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 1
11337: NEG
11338: PUSH
11339: LD_INT 1
11341: NEG
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 1
11349: NEG
11350: PUSH
11351: LD_INT 2
11353: NEG
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 0
11361: PUSH
11362: LD_INT 2
11364: NEG
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 1
11372: PUSH
11373: LD_INT 1
11375: NEG
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 0
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: LD_INT 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 2
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 1
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 0
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 1
11433: NEG
11434: PUSH
11435: LD_INT 1
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 2
11444: NEG
11445: PUSH
11446: LD_INT 0
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 2
11455: NEG
11456: PUSH
11457: LD_INT 1
11459: NEG
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 2
11467: NEG
11468: PUSH
11469: LD_INT 2
11471: NEG
11472: PUSH
11473: EMPTY
11474: LIST
11475: LIST
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11498: LD_ADDR_VAR 0 18
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: LD_INT 0
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 0
11515: PUSH
11516: LD_INT 1
11518: NEG
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 0
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 0
11546: PUSH
11547: LD_INT 1
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 1
11556: NEG
11557: PUSH
11558: LD_INT 0
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 1
11567: NEG
11568: PUSH
11569: LD_INT 1
11571: NEG
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 1
11579: NEG
11580: PUSH
11581: LD_INT 2
11583: NEG
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 0
11591: PUSH
11592: LD_INT 2
11594: NEG
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: LD_INT 1
11605: NEG
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: LD_INT 0
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: LD_INT 1
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 0
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 1
11663: NEG
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 2
11674: NEG
11675: PUSH
11676: LD_INT 0
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: LD_INT 2
11685: NEG
11686: PUSH
11687: LD_INT 1
11689: NEG
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 2
11697: NEG
11698: PUSH
11699: LD_INT 2
11701: NEG
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11728: LD_ADDR_VAR 0 19
11732: PUSH
11733: LD_INT 0
11735: PUSH
11736: LD_INT 0
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 0
11745: PUSH
11746: LD_INT 1
11748: NEG
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: LD_INT 0
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 1
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 0
11776: PUSH
11777: LD_INT 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 1
11786: NEG
11787: PUSH
11788: LD_INT 0
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 1
11797: NEG
11798: PUSH
11799: LD_INT 1
11801: NEG
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 1
11809: NEG
11810: PUSH
11811: LD_INT 2
11813: NEG
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 0
11821: PUSH
11822: LD_INT 2
11824: NEG
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 1
11832: PUSH
11833: LD_INT 1
11835: NEG
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: LD_INT 0
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 2
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 1
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 0
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 1
11893: NEG
11894: PUSH
11895: LD_INT 1
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: NEG
11905: PUSH
11906: LD_INT 0
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 2
11915: NEG
11916: PUSH
11917: LD_INT 1
11919: NEG
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 2
11927: NEG
11928: PUSH
11929: LD_INT 2
11931: NEG
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11958: LD_ADDR_VAR 0 20
11962: PUSH
11963: LD_INT 0
11965: PUSH
11966: LD_INT 0
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 0
11975: PUSH
11976: LD_INT 1
11978: NEG
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: LD_INT 0
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 0
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 1
12016: NEG
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 1
12027: NEG
12028: PUSH
12029: LD_INT 1
12031: NEG
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 1
12039: NEG
12040: PUSH
12041: LD_INT 2
12043: NEG
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 0
12051: PUSH
12052: LD_INT 2
12054: NEG
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 1
12062: PUSH
12063: LD_INT 1
12065: NEG
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 0
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 1
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 2
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 1
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 0
12113: PUSH
12114: LD_INT 2
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 1
12123: NEG
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 2
12134: NEG
12135: PUSH
12136: LD_INT 0
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 2
12145: NEG
12146: PUSH
12147: LD_INT 1
12149: NEG
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 2
12157: NEG
12158: PUSH
12159: LD_INT 2
12161: NEG
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12188: LD_ADDR_VAR 0 21
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: LD_INT 0
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 0
12205: PUSH
12206: LD_INT 1
12208: NEG
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: LD_INT 0
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 1
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 0
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 1
12246: NEG
12247: PUSH
12248: LD_INT 0
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: LD_INT 1
12257: NEG
12258: PUSH
12259: LD_INT 1
12261: NEG
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 1
12269: NEG
12270: PUSH
12271: LD_INT 2
12273: NEG
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 0
12281: PUSH
12282: LD_INT 2
12284: NEG
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: LD_INT 1
12295: NEG
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 0
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 1
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 1
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 0
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 1
12353: NEG
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 2
12364: NEG
12365: PUSH
12366: LD_INT 0
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 2
12375: NEG
12376: PUSH
12377: LD_INT 1
12379: NEG
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 2
12387: NEG
12388: PUSH
12389: LD_INT 2
12391: NEG
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12418: LD_ADDR_VAR 0 22
12422: PUSH
12423: LD_INT 0
12425: PUSH
12426: LD_INT 0
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: LD_INT 1
12438: NEG
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: LD_INT 0
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 1
12456: PUSH
12457: LD_INT 1
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 0
12466: PUSH
12467: LD_INT 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 1
12476: NEG
12477: PUSH
12478: LD_INT 0
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 1
12487: NEG
12488: PUSH
12489: LD_INT 1
12491: NEG
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: PUSH
12497: LD_INT 1
12499: NEG
12500: PUSH
12501: LD_INT 2
12503: NEG
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 0
12511: PUSH
12512: LD_INT 2
12514: NEG
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 1
12522: PUSH
12523: LD_INT 1
12525: NEG
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 0
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 1
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 2
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 1
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 0
12573: PUSH
12574: LD_INT 2
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 1
12583: NEG
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 2
12594: NEG
12595: PUSH
12596: LD_INT 0
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: LD_INT 2
12605: NEG
12606: PUSH
12607: LD_INT 1
12609: NEG
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 2
12617: NEG
12618: PUSH
12619: LD_INT 2
12621: NEG
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12648: LD_ADDR_VAR 0 23
12652: PUSH
12653: LD_INT 0
12655: PUSH
12656: LD_INT 0
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 0
12665: PUSH
12666: LD_INT 1
12668: NEG
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: LD_INT 0
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 1
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 0
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 1
12706: NEG
12707: PUSH
12708: LD_INT 0
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 1
12717: NEG
12718: PUSH
12719: LD_INT 1
12721: NEG
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: LD_INT 1
12729: NEG
12730: PUSH
12731: LD_INT 2
12733: NEG
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 0
12741: PUSH
12742: LD_INT 2
12744: NEG
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: LD_INT 1
12755: NEG
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 2
12763: PUSH
12764: LD_INT 0
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 1
12793: PUSH
12794: LD_INT 2
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 0
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 1
12813: NEG
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 2
12824: NEG
12825: PUSH
12826: LD_INT 0
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 2
12835: NEG
12836: PUSH
12837: LD_INT 1
12839: NEG
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 2
12847: NEG
12848: PUSH
12849: LD_INT 2
12851: NEG
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 2
12859: NEG
12860: PUSH
12861: LD_INT 3
12863: NEG
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 1
12871: NEG
12872: PUSH
12873: LD_INT 3
12875: NEG
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 1
12883: PUSH
12884: LD_INT 2
12886: NEG
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: LD_INT 1
12897: NEG
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12928: LD_ADDR_VAR 0 24
12932: PUSH
12933: LD_INT 0
12935: PUSH
12936: LD_INT 0
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: LD_INT 0
12945: PUSH
12946: LD_INT 1
12948: NEG
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 1
12956: PUSH
12957: LD_INT 0
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 1
12966: PUSH
12967: LD_INT 1
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 0
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 1
12986: NEG
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 1
12997: NEG
12998: PUSH
12999: LD_INT 1
13001: NEG
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 1
13009: NEG
13010: PUSH
13011: LD_INT 2
13013: NEG
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 0
13021: PUSH
13022: LD_INT 2
13024: NEG
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: LD_INT 1
13035: NEG
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: LD_INT 0
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 1
13073: PUSH
13074: LD_INT 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 0
13083: PUSH
13084: LD_INT 2
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 1
13093: NEG
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: LD_INT 2
13104: NEG
13105: PUSH
13106: LD_INT 0
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: LD_INT 2
13115: NEG
13116: PUSH
13117: LD_INT 1
13119: NEG
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 2
13127: NEG
13128: PUSH
13129: LD_INT 2
13131: NEG
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: LD_INT 2
13142: NEG
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: PUSH
13151: LD_INT 1
13153: NEG
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 3
13161: PUSH
13162: LD_INT 1
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: LD_INT 2
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
13204: LD_ADDR_VAR 0 25
13208: PUSH
13209: LD_INT 0
13211: PUSH
13212: LD_INT 0
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 0
13221: PUSH
13222: LD_INT 1
13224: NEG
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: LD_INT 0
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 1
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 0
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 1
13262: NEG
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 1
13273: NEG
13274: PUSH
13275: LD_INT 1
13277: NEG
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 1
13285: NEG
13286: PUSH
13287: LD_INT 2
13289: NEG
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 0
13297: PUSH
13298: LD_INT 2
13300: NEG
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 1
13308: PUSH
13309: LD_INT 1
13311: NEG
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: LD_INT 0
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 2
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 0
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 1
13369: NEG
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 2
13380: NEG
13381: PUSH
13382: LD_INT 0
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 2
13391: NEG
13392: PUSH
13393: LD_INT 1
13395: NEG
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 2
13403: NEG
13404: PUSH
13405: LD_INT 2
13407: NEG
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: LD_INT 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 2
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 2
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: LD_INT 3
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13478: LD_ADDR_VAR 0 26
13482: PUSH
13483: LD_INT 0
13485: PUSH
13486: LD_INT 0
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 1
13498: NEG
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: LD_INT 0
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 0
13526: PUSH
13527: LD_INT 1
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 1
13536: NEG
13537: PUSH
13538: LD_INT 0
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 1
13547: NEG
13548: PUSH
13549: LD_INT 1
13551: NEG
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 1
13559: NEG
13560: PUSH
13561: LD_INT 2
13563: NEG
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 0
13571: PUSH
13572: LD_INT 2
13574: NEG
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 1
13582: PUSH
13583: LD_INT 1
13585: NEG
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 0
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 1
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 1
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 0
13633: PUSH
13634: LD_INT 2
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 1
13643: NEG
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 2
13654: NEG
13655: PUSH
13656: LD_INT 0
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 2
13665: NEG
13666: PUSH
13667: LD_INT 1
13669: NEG
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 2
13677: NEG
13678: PUSH
13679: LD_INT 2
13681: NEG
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 2
13689: PUSH
13690: LD_INT 3
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 1
13699: PUSH
13700: LD_INT 3
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 1
13709: NEG
13710: PUSH
13711: LD_INT 2
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 2
13720: NEG
13721: PUSH
13722: LD_INT 1
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13754: LD_ADDR_VAR 0 27
13758: PUSH
13759: LD_INT 0
13761: PUSH
13762: LD_INT 0
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 0
13771: PUSH
13772: LD_INT 1
13774: NEG
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 1
13782: PUSH
13783: LD_INT 0
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 0
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 1
13812: NEG
13813: PUSH
13814: LD_INT 0
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 1
13823: NEG
13824: PUSH
13825: LD_INT 1
13827: NEG
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 1
13835: NEG
13836: PUSH
13837: LD_INT 2
13839: NEG
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 0
13847: PUSH
13848: LD_INT 2
13850: NEG
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 1
13858: PUSH
13859: LD_INT 1
13861: NEG
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: LD_INT 0
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: LD_INT 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 1
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 0
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 1
13919: NEG
13920: PUSH
13921: LD_INT 1
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 2
13930: NEG
13931: PUSH
13932: LD_INT 0
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: PUSH
13939: LD_INT 2
13941: NEG
13942: PUSH
13943: LD_INT 1
13945: NEG
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 2
13953: NEG
13954: PUSH
13955: LD_INT 2
13957: NEG
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 1
13965: NEG
13966: PUSH
13967: LD_INT 2
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 2
13976: NEG
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 3
13987: NEG
13988: PUSH
13989: LD_INT 1
13991: NEG
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 3
13999: NEG
14000: PUSH
14001: LD_INT 2
14003: NEG
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
14034: LD_ADDR_VAR 0 28
14038: PUSH
14039: LD_INT 0
14041: PUSH
14042: LD_INT 0
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 0
14051: PUSH
14052: LD_INT 1
14054: NEG
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: LD_INT 0
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 1
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 0
14082: PUSH
14083: LD_INT 1
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 1
14092: NEG
14093: PUSH
14094: LD_INT 0
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 1
14103: NEG
14104: PUSH
14105: LD_INT 1
14107: NEG
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 1
14115: NEG
14116: PUSH
14117: LD_INT 2
14119: NEG
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 0
14127: PUSH
14128: LD_INT 2
14130: NEG
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: LD_INT 1
14141: NEG
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 0
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: LD_INT 1
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 2
14169: PUSH
14170: LD_INT 2
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: LD_INT 2
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 0
14189: PUSH
14190: LD_INT 2
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 1
14199: NEG
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 2
14210: NEG
14211: PUSH
14212: LD_INT 0
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: LD_INT 2
14221: NEG
14222: PUSH
14223: LD_INT 1
14225: NEG
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 2
14233: NEG
14234: PUSH
14235: LD_INT 2
14237: NEG
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 2
14245: NEG
14246: PUSH
14247: LD_INT 3
14249: NEG
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 1
14257: NEG
14258: PUSH
14259: LD_INT 3
14261: NEG
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 3
14269: NEG
14270: PUSH
14271: LD_INT 1
14273: NEG
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 3
14281: NEG
14282: PUSH
14283: LD_INT 2
14285: NEG
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14316: LD_ADDR_VAR 0 29
14320: PUSH
14321: LD_INT 0
14323: PUSH
14324: LD_INT 0
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 0
14333: PUSH
14334: LD_INT 1
14336: NEG
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: LD_INT 0
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 1
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: LD_INT 1
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: PUSH
14372: LD_INT 1
14374: NEG
14375: PUSH
14376: LD_INT 0
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: LD_INT 1
14385: NEG
14386: PUSH
14387: LD_INT 1
14389: NEG
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 1
14397: NEG
14398: PUSH
14399: LD_INT 2
14401: NEG
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 0
14409: PUSH
14410: LD_INT 2
14412: NEG
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 1
14420: PUSH
14421: LD_INT 1
14423: NEG
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: LD_INT 0
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 1
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 0
14461: PUSH
14462: LD_INT 2
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 1
14471: NEG
14472: PUSH
14473: LD_INT 1
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: LD_INT 2
14482: NEG
14483: PUSH
14484: LD_INT 1
14486: NEG
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: LD_INT 2
14494: NEG
14495: PUSH
14496: LD_INT 2
14498: NEG
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 2
14506: NEG
14507: PUSH
14508: LD_INT 3
14510: NEG
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: LD_INT 1
14521: NEG
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 3
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 1
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 1
14549: NEG
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 3
14560: NEG
14561: PUSH
14562: LD_INT 2
14564: NEG
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14595: LD_ADDR_VAR 0 30
14599: PUSH
14600: LD_INT 0
14602: PUSH
14603: LD_INT 0
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: LD_INT 1
14615: NEG
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: LD_INT 0
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 1
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 0
14643: PUSH
14644: LD_INT 1
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 1
14653: NEG
14654: PUSH
14655: LD_INT 0
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 1
14664: NEG
14665: PUSH
14666: LD_INT 1
14668: NEG
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 1
14676: NEG
14677: PUSH
14678: LD_INT 2
14680: NEG
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: LD_INT 2
14691: NEG
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 1
14699: PUSH
14700: LD_INT 1
14702: NEG
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 0
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 2
14720: PUSH
14721: LD_INT 1
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 2
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 1
14740: PUSH
14741: LD_INT 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 1
14750: NEG
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 2
14761: NEG
14762: PUSH
14763: LD_INT 0
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: LD_INT 2
14772: NEG
14773: PUSH
14774: LD_INT 1
14776: NEG
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 1
14784: NEG
14785: PUSH
14786: LD_INT 3
14788: NEG
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 1
14796: PUSH
14797: LD_INT 2
14799: NEG
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 3
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 2
14817: PUSH
14818: LD_INT 3
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PUSH
14825: LD_INT 2
14827: NEG
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 3
14838: NEG
14839: PUSH
14840: LD_INT 1
14842: NEG
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: LIST
14872: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14873: LD_ADDR_VAR 0 31
14877: PUSH
14878: LD_INT 0
14880: PUSH
14881: LD_INT 0
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 0
14890: PUSH
14891: LD_INT 1
14893: NEG
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 1
14901: PUSH
14902: LD_INT 0
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 1
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 0
14921: PUSH
14922: LD_INT 1
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 1
14931: NEG
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: LD_INT 1
14942: NEG
14943: PUSH
14944: LD_INT 1
14946: NEG
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 1
14954: NEG
14955: PUSH
14956: LD_INT 2
14958: NEG
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: PUSH
14967: LD_INT 1
14969: NEG
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 0
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 2
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 2
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 1
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 0
15017: PUSH
15018: LD_INT 2
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 1
15027: NEG
15028: PUSH
15029: LD_INT 1
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 2
15038: NEG
15039: PUSH
15040: LD_INT 1
15042: NEG
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 2
15050: NEG
15051: PUSH
15052: LD_INT 2
15054: NEG
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 2
15062: NEG
15063: PUSH
15064: LD_INT 3
15066: NEG
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: LD_INT 1
15077: NEG
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 3
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: LD_INT 3
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: PUSH
15103: LD_INT 1
15105: NEG
15106: PUSH
15107: LD_INT 2
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 3
15116: NEG
15117: PUSH
15118: LD_INT 2
15120: NEG
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15151: LD_ADDR_VAR 0 32
15155: PUSH
15156: LD_INT 0
15158: PUSH
15159: LD_INT 0
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 0
15168: PUSH
15169: LD_INT 1
15171: NEG
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: LD_INT 0
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 1
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 0
15199: PUSH
15200: LD_INT 1
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 1
15209: NEG
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 1
15220: NEG
15221: PUSH
15222: LD_INT 1
15224: NEG
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 1
15232: NEG
15233: PUSH
15234: LD_INT 2
15236: NEG
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: LD_INT 0
15244: PUSH
15245: LD_INT 2
15247: NEG
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: LD_INT 1
15258: NEG
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 2
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: LD_INT 2
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 1
15306: NEG
15307: PUSH
15308: LD_INT 1
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 2
15317: NEG
15318: PUSH
15319: LD_INT 0
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 2
15328: NEG
15329: PUSH
15330: LD_INT 1
15332: NEG
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 1
15340: NEG
15341: PUSH
15342: LD_INT 3
15344: NEG
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 1
15352: PUSH
15353: LD_INT 2
15355: NEG
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: PUSH
15374: LD_INT 3
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 2
15383: NEG
15384: PUSH
15385: LD_INT 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 3
15394: NEG
15395: PUSH
15396: LD_INT 1
15398: NEG
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15429: LD_ADDR_VAR 0 33
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 0
15446: PUSH
15447: LD_INT 1
15449: NEG
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 0
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: EMPTY
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 1
15487: NEG
15488: PUSH
15489: LD_INT 0
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 1
15498: NEG
15499: PUSH
15500: LD_INT 1
15502: NEG
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 1
15510: NEG
15511: PUSH
15512: LD_INT 2
15514: NEG
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 1
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 0
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 1
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 1
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 0
15563: PUSH
15564: LD_INT 2
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: LD_INT 1
15573: NEG
15574: PUSH
15575: LD_INT 1
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: LD_INT 2
15584: NEG
15585: PUSH
15586: LD_INT 0
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 2
15595: NEG
15596: PUSH
15597: LD_INT 1
15599: NEG
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: LD_INT 2
15607: NEG
15608: PUSH
15609: LD_INT 2
15611: NEG
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: PUSH
15617: LD_INT 2
15619: NEG
15620: PUSH
15621: LD_INT 3
15623: NEG
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 2
15631: PUSH
15632: LD_INT 1
15634: NEG
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: LD_INT 1
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: LD_INT 3
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 1
15662: NEG
15663: PUSH
15664: LD_INT 2
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: LD_INT 3
15673: NEG
15674: PUSH
15675: LD_INT 2
15677: NEG
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15708: LD_ADDR_VAR 0 34
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: LD_INT 0
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: LD_INT 1
15728: NEG
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 0
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 1
15746: PUSH
15747: LD_INT 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 0
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: EMPTY
15761: LIST
15762: LIST
15763: PUSH
15764: LD_INT 1
15766: NEG
15767: PUSH
15768: LD_INT 0
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 1
15777: NEG
15778: PUSH
15779: LD_INT 1
15781: NEG
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 1
15789: NEG
15790: PUSH
15791: LD_INT 2
15793: NEG
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 0
15801: PUSH
15802: LD_INT 2
15804: NEG
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: LD_INT 1
15815: NEG
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 2
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 2
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: LD_INT 2
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 1
15853: NEG
15854: PUSH
15855: LD_INT 1
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 2
15864: NEG
15865: PUSH
15866: LD_INT 0
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PUSH
15873: LD_INT 2
15875: NEG
15876: PUSH
15877: LD_INT 1
15879: NEG
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 2
15887: NEG
15888: PUSH
15889: LD_INT 2
15891: NEG
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 1
15899: NEG
15900: PUSH
15901: LD_INT 3
15903: NEG
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 2
15914: NEG
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 3
15922: PUSH
15923: LD_INT 2
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 2
15932: PUSH
15933: LD_INT 3
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: NEG
15943: PUSH
15944: LD_INT 1
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 3
15953: NEG
15954: PUSH
15955: LD_INT 1
15957: NEG
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15988: LD_ADDR_VAR 0 35
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: LD_INT 0
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 0
16005: PUSH
16006: LD_INT 1
16008: NEG
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: LD_INT 0
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 1
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 0
16036: PUSH
16037: LD_INT 1
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: LD_INT 1
16046: NEG
16047: PUSH
16048: LD_INT 0
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 1
16057: NEG
16058: PUSH
16059: LD_INT 1
16061: NEG
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 2
16079: NEG
16080: PUSH
16081: LD_INT 1
16083: NEG
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16100: LD_ADDR_VAR 0 36
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: LD_INT 0
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 0
16117: PUSH
16118: LD_INT 1
16120: NEG
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: LD_INT 0
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 0
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 1
16158: NEG
16159: PUSH
16160: LD_INT 0
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 1
16169: NEG
16170: PUSH
16171: LD_INT 1
16173: NEG
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 1
16181: NEG
16182: PUSH
16183: LD_INT 2
16185: NEG
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: LD_INT 2
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16212: LD_ADDR_VAR 0 37
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 0
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: LD_INT 0
16229: PUSH
16230: LD_INT 1
16232: NEG
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 0
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: LD_INT 1
16270: NEG
16271: PUSH
16272: LD_INT 0
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: LD_INT 1
16281: NEG
16282: PUSH
16283: LD_INT 1
16285: NEG
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 1
16296: NEG
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 1
16304: NEG
16305: PUSH
16306: LD_INT 1
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16324: LD_ADDR_VAR 0 38
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: LD_INT 0
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 0
16341: PUSH
16342: LD_INT 1
16344: NEG
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 0
16372: PUSH
16373: LD_INT 1
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 1
16382: NEG
16383: PUSH
16384: LD_INT 0
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 1
16393: NEG
16394: PUSH
16395: LD_INT 1
16397: NEG
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 1
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: NEG
16416: PUSH
16417: LD_INT 1
16419: NEG
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16436: LD_ADDR_VAR 0 39
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: LD_INT 0
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 0
16453: PUSH
16454: LD_INT 1
16456: NEG
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 1
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 0
16484: PUSH
16485: LD_INT 1
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 1
16494: NEG
16495: PUSH
16496: LD_INT 0
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 1
16505: NEG
16506: PUSH
16507: LD_INT 1
16509: NEG
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: NEG
16518: PUSH
16519: LD_INT 2
16521: NEG
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: LD_INT 2
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16548: LD_ADDR_VAR 0 40
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: LD_INT 0
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 0
16565: PUSH
16566: LD_INT 1
16568: NEG
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: LD_INT 0
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 0
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 1
16606: NEG
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 1
16617: NEG
16618: PUSH
16619: LD_INT 1
16621: NEG
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 1
16629: PUSH
16630: LD_INT 1
16632: NEG
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 1
16640: NEG
16641: PUSH
16642: LD_INT 1
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16660: LD_ADDR_VAR 0 41
16664: PUSH
16665: LD_INT 0
16667: PUSH
16668: LD_INT 0
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 0
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: LD_INT 0
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 1
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 0
16708: PUSH
16709: LD_INT 1
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: LD_INT 1
16718: NEG
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 1
16729: NEG
16730: PUSH
16731: LD_INT 1
16733: NEG
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 1
16741: NEG
16742: PUSH
16743: LD_INT 2
16745: NEG
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: LD_INT 1
16753: PUSH
16754: LD_INT 1
16756: NEG
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: LD_INT 0
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 2
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: PUSH
16795: LD_INT 2
16797: PUSH
16798: EMPTY
16799: LIST
16800: LIST
16801: PUSH
16802: LD_INT 1
16804: NEG
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: LD_INT 2
16815: NEG
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 2
16826: NEG
16827: PUSH
16828: LD_INT 1
16830: NEG
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 2
16838: NEG
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 2
16850: NEG
16851: PUSH
16852: LD_INT 3
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 2
16862: PUSH
16863: LD_INT 1
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 2
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 3
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 3
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 2
16923: NEG
16924: PUSH
16925: LD_INT 1
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: PUSH
16932: LD_INT 3
16934: NEG
16935: PUSH
16936: LD_INT 0
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 3
16945: NEG
16946: PUSH
16947: LD_INT 1
16949: NEG
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: PUSH
16955: LD_INT 3
16957: NEG
16958: PUSH
16959: LD_INT 2
16961: NEG
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 3
16969: NEG
16970: PUSH
16971: LD_INT 3
16973: NEG
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17010: LD_ADDR_VAR 0 42
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: LD_INT 0
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 0
17027: PUSH
17028: LD_INT 1
17030: NEG
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: LD_INT 0
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 1
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: LD_INT 1
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 1
17079: NEG
17080: PUSH
17081: LD_INT 1
17083: NEG
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 1
17091: NEG
17092: PUSH
17093: LD_INT 2
17095: NEG
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: LD_INT 2
17106: NEG
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: LD_INT 1
17117: NEG
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: LD_INT 1
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: LD_INT 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: LD_INT 2
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PUSH
17163: LD_INT 1
17165: NEG
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 2
17176: NEG
17177: PUSH
17178: LD_INT 1
17180: NEG
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 2
17188: NEG
17189: PUSH
17190: LD_INT 2
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: LD_INT 3
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: LD_INT 3
17216: NEG
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 3
17227: NEG
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: PUSH
17236: LD_INT 2
17238: NEG
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: LD_INT 2
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 3
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 2
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 1
17296: NEG
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 3
17307: NEG
17308: PUSH
17309: LD_INT 2
17311: NEG
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 3
17319: NEG
17320: PUSH
17321: LD_INT 3
17323: NEG
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17360: LD_ADDR_VAR 0 43
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 0
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 0
17377: PUSH
17378: LD_INT 1
17380: NEG
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 0
17408: PUSH
17409: LD_INT 1
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: LD_INT 0
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 1
17429: NEG
17430: PUSH
17431: LD_INT 1
17433: NEG
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 1
17441: NEG
17442: PUSH
17443: LD_INT 2
17445: NEG
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: LD_INT 2
17456: NEG
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: LD_INT 1
17467: NEG
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 2
17475: PUSH
17476: LD_INT 0
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 2
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 0
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 1
17515: NEG
17516: PUSH
17517: LD_INT 1
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: LD_INT 2
17526: NEG
17527: PUSH
17528: LD_INT 0
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 2
17537: NEG
17538: PUSH
17539: LD_INT 1
17541: NEG
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: NEG
17550: PUSH
17551: LD_INT 3
17553: NEG
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 0
17561: PUSH
17562: LD_INT 3
17564: NEG
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 1
17572: PUSH
17573: LD_INT 2
17575: NEG
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 1
17586: NEG
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 0
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 3
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 1
17614: PUSH
17615: LD_INT 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: LD_INT 3
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: LD_INT 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 2
17645: NEG
17646: PUSH
17647: LD_INT 1
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 3
17656: NEG
17657: PUSH
17658: LD_INT 0
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: LD_INT 3
17667: NEG
17668: PUSH
17669: LD_INT 1
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17708: LD_ADDR_VAR 0 44
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 0
17718: PUSH
17719: EMPTY
17720: LIST
17721: LIST
17722: PUSH
17723: LD_INT 0
17725: PUSH
17726: LD_INT 1
17728: NEG
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: LD_INT 0
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 0
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: LD_INT 0
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 1
17777: NEG
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 1
17789: NEG
17790: PUSH
17791: LD_INT 2
17793: NEG
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: LD_INT 1
17804: NEG
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: LD_INT 1
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 2
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 1
17852: NEG
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 2
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 2
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 2
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: NEG
17899: PUSH
17900: LD_INT 3
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 3
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: LD_INT 3
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: NEG
17972: PUSH
17973: LD_INT 1
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 3
17982: NEG
17983: PUSH
17984: LD_INT 0
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 3
17993: NEG
17994: PUSH
17995: LD_INT 1
17997: NEG
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 3
18005: NEG
18006: PUSH
18007: LD_INT 2
18009: NEG
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 3
18017: NEG
18018: PUSH
18019: LD_INT 3
18021: NEG
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18058: LD_ADDR_VAR 0 45
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 0
18075: PUSH
18076: LD_INT 1
18078: NEG
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 0
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 0
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 1
18127: NEG
18128: PUSH
18129: LD_INT 1
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: NEG
18140: PUSH
18141: LD_INT 2
18143: NEG
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 0
18151: PUSH
18152: LD_INT 2
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 1
18162: PUSH
18163: LD_INT 1
18165: NEG
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 1
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 2
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 1
18213: NEG
18214: PUSH
18215: LD_INT 1
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 2
18236: NEG
18237: PUSH
18238: LD_INT 2
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 2
18248: NEG
18249: PUSH
18250: LD_INT 3
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 1
18260: NEG
18261: PUSH
18262: LD_INT 3
18264: NEG
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 3
18275: NEG
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: LD_INT 2
18286: NEG
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 3
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 1
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 0
18334: PUSH
18335: LD_INT 3
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 1
18344: NEG
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 3
18355: NEG
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 3
18367: NEG
18368: PUSH
18369: LD_INT 3
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18408: LD_ADDR_VAR 0 46
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 1
18428: NEG
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: NEG
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 1
18477: NEG
18478: PUSH
18479: LD_INT 1
18481: NEG
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 1
18489: NEG
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: LD_INT 0
18501: PUSH
18502: LD_INT 2
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 1
18512: PUSH
18513: LD_INT 1
18515: NEG
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 0
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 2
18533: PUSH
18534: LD_INT 1
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: LD_INT 1
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: PUSH
18572: LD_INT 2
18574: NEG
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 2
18585: NEG
18586: PUSH
18587: LD_INT 1
18589: NEG
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 3
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 0
18609: PUSH
18610: LD_INT 3
18612: NEG
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 3
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 1
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 0
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 1
18682: NEG
18683: PUSH
18684: LD_INT 2
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 2
18693: NEG
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 3
18704: NEG
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 3
18715: NEG
18716: PUSH
18717: LD_INT 1
18719: NEG
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: LIST
18754: LIST
18755: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18756: LD_ADDR_VAR 0 47
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: LD_INT 1
18776: NEG
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 0
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: LD_INT 1
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PUSH
18812: LD_INT 1
18814: NEG
18815: PUSH
18816: LD_INT 0
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: LD_INT 1
18829: NEG
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 2
18841: NEG
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: LD_INT 2
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: LD_INT 1
18863: NEG
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 2
18871: NEG
18872: PUSH
18873: LD_INT 1
18875: NEG
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: LD_INT 2
18883: NEG
18884: PUSH
18885: LD_INT 2
18887: NEG
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18907: LD_ADDR_VAR 0 48
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 0
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 0
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 1
18965: NEG
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: NEG
18977: PUSH
18978: LD_INT 1
18980: NEG
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 1
18988: NEG
18989: PUSH
18990: LD_INT 2
18992: NEG
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 2
19003: NEG
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 0
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 2
19032: PUSH
19033: LD_INT 1
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
19054: LD_ADDR_VAR 0 49
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 0
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 0
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 0
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: LD_INT 1
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: PUSH
19110: LD_INT 1
19112: NEG
19113: PUSH
19114: LD_INT 0
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 1
19123: NEG
19124: PUSH
19125: LD_INT 1
19127: NEG
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 1
19135: PUSH
19136: LD_INT 1
19138: NEG
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 2
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
19198: LD_ADDR_VAR 0 50
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: LD_INT 0
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 0
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 0
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 0
19246: PUSH
19247: LD_INT 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: NEG
19257: PUSH
19258: LD_INT 0
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 1
19267: NEG
19268: PUSH
19269: LD_INT 1
19271: NEG
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 1
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 0
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 1
19319: NEG
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19342: LD_ADDR_VAR 0 51
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 0
19359: PUSH
19360: LD_INT 1
19362: NEG
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 0
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 1
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 1
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: NEG
19444: PUSH
19445: LD_INT 1
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 2
19454: NEG
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: LD_INT 1
19469: NEG
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19489: LD_ADDR_VAR 0 52
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 0
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: LD_INT 0
19506: PUSH
19507: LD_INT 1
19509: NEG
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: LD_INT 1
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: NEG
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: NEG
19559: PUSH
19560: LD_INT 1
19562: NEG
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: LD_INT 2
19574: NEG
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 1
19582: NEG
19583: PUSH
19584: LD_INT 1
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 2
19593: NEG
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 2
19604: NEG
19605: PUSH
19606: LD_INT 1
19608: NEG
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 2
19616: NEG
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19640: LD_ADDR_VAR 0 53
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 0
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 0
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 0
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PUSH
19707: LD_INT 1
19709: NEG
19710: PUSH
19711: LD_INT 1
19713: NEG
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 0
19733: PUSH
19734: LD_INT 2
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: LD_INT 1
19747: NEG
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 0
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 1
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 1
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 0
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 1
19805: NEG
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: NEG
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 2
19839: NEG
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19870: LD_ADDR_VAR 0 54
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 0
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 1
19939: NEG
19940: PUSH
19941: LD_INT 1
19943: NEG
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: NEG
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 0
19963: PUSH
19964: LD_INT 2
19966: NEG
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 1
19974: PUSH
19975: LD_INT 1
19977: NEG
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 0
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 1
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: NEG
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 2
20057: NEG
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 2
20069: NEG
20070: PUSH
20071: LD_INT 2
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20100: LD_ADDR_VAR 0 55
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 0
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 0
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 0
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 1
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: LD_INT 0
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: LD_INT 1
20169: NEG
20170: PUSH
20171: LD_INT 1
20173: NEG
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 2
20196: NEG
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: LD_INT 1
20207: NEG
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 0
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 1
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 0
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 1
20265: NEG
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 2
20276: NEG
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 2
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 2
20299: NEG
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20330: LD_ADDR_VAR 0 56
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 0
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 0
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 0
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 1
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: LD_INT 0
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 1
20399: NEG
20400: PUSH
20401: LD_INT 1
20403: NEG
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 0
20423: PUSH
20424: LD_INT 2
20426: NEG
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 1
20434: PUSH
20435: LD_INT 1
20437: NEG
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 0
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 2
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 0
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 1
20495: NEG
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: NEG
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 2
20517: NEG
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 2
20529: NEG
20530: PUSH
20531: LD_INT 2
20533: NEG
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20560: LD_ADDR_VAR 0 57
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 0
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 0
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 0
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 1
20629: NEG
20630: PUSH
20631: LD_INT 1
20633: NEG
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 0
20653: PUSH
20654: LD_INT 2
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 1
20664: PUSH
20665: LD_INT 1
20667: NEG
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 0
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 1
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 2
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: NEG
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 2
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: EMPTY
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20790: LD_ADDR_VAR 0 58
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 0
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 0
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 0
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: LD_INT 0
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 1
20859: NEG
20860: PUSH
20861: LD_INT 1
20863: NEG
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: LD_INT 2
20875: NEG
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: PUSH
20881: LD_INT 0
20883: PUSH
20884: LD_INT 2
20886: NEG
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 1
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 0
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: LD_INT 1
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 2
20966: NEG
20967: PUSH
20968: LD_INT 0
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 2
20977: NEG
20978: PUSH
20979: LD_INT 1
20981: NEG
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: LD_INT 2
20989: NEG
20990: PUSH
20991: LD_INT 2
20993: NEG
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21020: LD_ADDR_VAR 0 59
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 0
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: LD_INT 0
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 1
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 1
21078: NEG
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 1
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21108: LD_ADDR_VAR 0 60
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: LD_INT 1
21128: NEG
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: NEG
21178: PUSH
21179: LD_INT 1
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21196: LD_ADDR_VAR 0 61
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 0
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: LD_INT 1
21216: NEG
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 1
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PUSH
21267: LD_INT 1
21269: NEG
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21284: LD_ADDR_VAR 0 62
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 0
21301: PUSH
21302: LD_INT 1
21304: NEG
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 0
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 0
21332: PUSH
21333: LD_INT 1
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: LD_INT 0
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 1
21353: NEG
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21372: LD_ADDR_VAR 0 63
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 1
21392: NEG
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 0
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 1
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 0
21420: PUSH
21421: LD_INT 1
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: NEG
21431: PUSH
21432: LD_INT 0
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: NEG
21442: PUSH
21443: LD_INT 1
21445: NEG
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21460: LD_ADDR_VAR 0 64
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: ST_TO_ADDR
// end ; 1 :
21548: GO 27445
21550: LD_INT 1
21552: DOUBLE
21553: EQUAL
21554: IFTRUE 21558
21556: GO 24181
21558: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21559: LD_ADDR_VAR 0 11
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 3
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 0
21578: PUSH
21579: LD_INT 3
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: PUSH
21590: LD_INT 2
21592: NEG
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21603: LD_ADDR_VAR 0 12
21607: PUSH
21608: LD_INT 2
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: LD_INT 0
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 3
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: LIST
21643: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21644: LD_ADDR_VAR 0 13
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: LD_INT 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 3
21661: PUSH
21662: LD_INT 3
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 2
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21684: LD_ADDR_VAR 0 14
21688: PUSH
21689: LD_INT 1
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 0
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 1
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: LIST
21724: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21725: LD_ADDR_VAR 0 15
21729: PUSH
21730: LD_INT 2
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 3
21743: NEG
21744: PUSH
21745: LD_INT 0
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 3
21754: NEG
21755: PUSH
21756: LD_INT 1
21758: NEG
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21769: LD_ADDR_VAR 0 16
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: LD_INT 3
21780: NEG
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 3
21788: NEG
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 3
21800: NEG
21801: PUSH
21802: LD_INT 3
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21815: LD_ADDR_VAR 0 17
21819: PUSH
21820: LD_INT 1
21822: NEG
21823: PUSH
21824: LD_INT 3
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 0
21834: PUSH
21835: LD_INT 3
21837: NEG
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: LIST
21858: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21859: LD_ADDR_VAR 0 18
21863: PUSH
21864: LD_INT 2
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: LD_INT 0
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 3
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: LIST
21899: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21900: LD_ADDR_VAR 0 19
21904: PUSH
21905: LD_INT 3
21907: PUSH
21908: LD_INT 2
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: LD_INT 3
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 2
21927: PUSH
21928: LD_INT 3
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: LIST
21939: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21940: LD_ADDR_VAR 0 20
21944: PUSH
21945: LD_INT 1
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 0
21957: PUSH
21958: LD_INT 3
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 2
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21981: LD_ADDR_VAR 0 21
21985: PUSH
21986: LD_INT 2
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: NEG
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 3
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22025: LD_ADDR_VAR 0 22
22029: PUSH
22030: LD_INT 2
22032: NEG
22033: PUSH
22034: LD_INT 3
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 3
22044: NEG
22045: PUSH
22046: LD_INT 2
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 3
22056: NEG
22057: PUSH
22058: LD_INT 3
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
22071: LD_ADDR_VAR 0 23
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 3
22081: NEG
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: LD_INT 4
22093: NEG
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: LD_INT 3
22104: NEG
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
22115: LD_ADDR_VAR 0 24
22119: PUSH
22120: LD_INT 3
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 3
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: LIST
22155: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
22156: LD_ADDR_VAR 0 25
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 4
22173: PUSH
22174: LD_INT 3
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 3
22183: PUSH
22184: LD_INT 4
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: LIST
22195: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
22196: LD_ADDR_VAR 0 26
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 4
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 1
22223: NEG
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
22237: LD_ADDR_VAR 0 27
22241: PUSH
22242: LD_INT 3
22244: NEG
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 3
22255: NEG
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 4
22266: NEG
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: LIST
22280: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22281: LD_ADDR_VAR 0 28
22285: PUSH
22286: LD_INT 3
22288: NEG
22289: PUSH
22290: LD_INT 3
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 3
22300: NEG
22301: PUSH
22302: LD_INT 4
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 4
22312: NEG
22313: PUSH
22314: LD_INT 3
22316: NEG
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22327: LD_ADDR_VAR 0 29
22331: PUSH
22332: LD_INT 1
22334: NEG
22335: PUSH
22336: LD_INT 3
22338: NEG
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 0
22346: PUSH
22347: LD_INT 3
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 1
22357: PUSH
22358: LD_INT 2
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: NEG
22369: PUSH
22370: LD_INT 4
22372: NEG
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: LD_INT 4
22383: NEG
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: LD_INT 3
22394: NEG
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: NEG
22403: PUSH
22404: LD_INT 5
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 5
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 4
22428: NEG
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: LD_INT 6
22440: NEG
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PUSH
22446: LD_INT 0
22448: PUSH
22449: LD_INT 6
22451: NEG
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: PUSH
22457: LD_INT 1
22459: PUSH
22460: LD_INT 5
22462: NEG
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22482: LD_ADDR_VAR 0 30
22486: PUSH
22487: LD_INT 2
22489: PUSH
22490: LD_INT 1
22492: NEG
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: LD_INT 0
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 1
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 3
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 4
22531: PUSH
22532: LD_INT 0
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 4
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 4
22551: PUSH
22552: LD_INT 1
22554: NEG
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 5
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 5
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 5
22582: PUSH
22583: LD_INT 1
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 6
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 6
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22625: LD_ADDR_VAR 0 31
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: LD_INT 3
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 3
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 4
22672: PUSH
22673: LD_INT 4
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 3
22682: PUSH
22683: LD_INT 4
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 5
22692: PUSH
22693: LD_INT 4
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 5
22702: PUSH
22703: LD_INT 5
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 4
22712: PUSH
22713: LD_INT 5
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 6
22722: PUSH
22723: LD_INT 5
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 6
22732: PUSH
22733: LD_INT 6
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 5
22742: PUSH
22743: LD_INT 6
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22764: LD_ADDR_VAR 0 32
22768: PUSH
22769: LD_INT 1
22771: PUSH
22772: LD_INT 3
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: LD_INT 3
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: LD_INT 4
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 0
22812: PUSH
22813: LD_INT 4
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 3
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 1
22833: PUSH
22834: LD_INT 5
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 0
22843: PUSH
22844: LD_INT 5
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 1
22853: NEG
22854: PUSH
22855: LD_INT 4
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: LD_INT 6
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 0
22874: PUSH
22875: LD_INT 6
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: LD_INT 5
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22907: LD_ADDR_VAR 0 33
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: LD_INT 1
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: LD_INT 0
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 3
22936: NEG
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 3
22948: NEG
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 4
22959: NEG
22960: PUSH
22961: LD_INT 0
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 4
22970: NEG
22971: PUSH
22972: LD_INT 1
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 4
22982: NEG
22983: PUSH
22984: LD_INT 1
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 5
22993: NEG
22994: PUSH
22995: LD_INT 0
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 5
23004: NEG
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 5
23016: NEG
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 6
23027: NEG
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 6
23038: NEG
23039: PUSH
23040: LD_INT 1
23042: NEG
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
23062: LD_ADDR_VAR 0 34
23066: PUSH
23067: LD_INT 2
23069: NEG
23070: PUSH
23071: LD_INT 3
23073: NEG
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PUSH
23079: LD_INT 3
23081: NEG
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 3
23093: NEG
23094: PUSH
23095: LD_INT 3
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 3
23105: NEG
23106: PUSH
23107: LD_INT 4
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 4
23117: NEG
23118: PUSH
23119: LD_INT 3
23121: NEG
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 4
23129: NEG
23130: PUSH
23131: LD_INT 4
23133: NEG
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 4
23141: NEG
23142: PUSH
23143: LD_INT 5
23145: NEG
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 5
23153: NEG
23154: PUSH
23155: LD_INT 4
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 5
23165: NEG
23166: PUSH
23167: LD_INT 5
23169: NEG
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 5
23177: NEG
23178: PUSH
23179: LD_INT 6
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 6
23189: NEG
23190: PUSH
23191: LD_INT 5
23193: NEG
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 6
23201: NEG
23202: PUSH
23203: LD_INT 6
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
23225: LD_ADDR_VAR 0 41
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: LD_INT 3
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 2
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23269: LD_ADDR_VAR 0 42
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 3
23297: PUSH
23298: LD_INT 1
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: LIST
23309: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23310: LD_ADDR_VAR 0 43
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 3
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: LIST
23349: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23350: LD_ADDR_VAR 0 44
23354: PUSH
23355: LD_INT 0
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: NEG
23378: PUSH
23379: LD_INT 2
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23391: LD_ADDR_VAR 0 45
23395: PUSH
23396: LD_INT 2
23398: NEG
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: EMPTY
23404: LIST
23405: LIST
23406: PUSH
23407: LD_INT 2
23409: NEG
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 3
23420: NEG
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23435: LD_ADDR_VAR 0 46
23439: PUSH
23440: LD_INT 2
23442: NEG
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 3
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 3
23466: NEG
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23481: LD_ADDR_VAR 0 47
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: LD_INT 3
23492: NEG
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 1
23500: NEG
23501: PUSH
23502: LD_INT 3
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23514: LD_ADDR_VAR 0 48
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23545: LD_ADDR_VAR 0 49
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: LD_INT 1
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: LD_INT 3
23562: PUSH
23563: LD_INT 2
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23574: LD_ADDR_VAR 0 50
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 3
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23603: LD_ADDR_VAR 0 51
23607: PUSH
23608: LD_INT 1
23610: NEG
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23634: LD_ADDR_VAR 0 52
23638: PUSH
23639: LD_INT 3
23641: NEG
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: LD_INT 2
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23667: LD_ADDR_VAR 0 53
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: LD_INT 3
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 0
23686: PUSH
23687: LD_INT 3
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 2
23700: NEG
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23711: LD_ADDR_VAR 0 54
23715: PUSH
23716: LD_INT 2
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 3
23739: PUSH
23740: LD_INT 1
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23752: LD_ADDR_VAR 0 55
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 3
23769: PUSH
23770: LD_INT 3
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: LD_INT 3
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23792: LD_ADDR_VAR 0 56
23796: PUSH
23797: LD_INT 1
23799: PUSH
23800: LD_INT 3
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23833: LD_ADDR_VAR 0 57
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: LD_INT 1
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: NEG
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 3
23862: NEG
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: LIST
23876: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23877: LD_ADDR_VAR 0 58
23881: PUSH
23882: LD_INT 2
23884: NEG
23885: PUSH
23886: LD_INT 3
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 3
23896: NEG
23897: PUSH
23898: LD_INT 2
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 3
23908: NEG
23909: PUSH
23910: LD_INT 3
23912: NEG
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: LIST
23922: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23923: LD_ADDR_VAR 0 59
23927: PUSH
23928: LD_INT 1
23930: NEG
23931: PUSH
23932: LD_INT 2
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 2
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: LIST
23966: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23967: LD_ADDR_VAR 0 60
23971: PUSH
23972: LD_INT 1
23974: PUSH
23975: LD_INT 1
23977: NEG
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 2
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24008: LD_ADDR_VAR 0 61
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24048: LD_ADDR_VAR 0 62
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: LD_INT 1
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: LIST
24088: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24089: LD_ADDR_VAR 0 63
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: NEG
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24133: LD_ADDR_VAR 0 64
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: LD_INT 2
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 2
24152: NEG
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: PUSH
24162: LD_INT 2
24164: NEG
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: ST_TO_ADDR
// end ; 2 :
24179: GO 27445
24181: LD_INT 2
24183: DOUBLE
24184: EQUAL
24185: IFTRUE 24189
24187: GO 27444
24189: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
24190: LD_ADDR_VAR 0 29
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: LD_INT 4
24207: PUSH
24208: LD_INT 1
24210: NEG
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 5
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 5
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 4
24238: PUSH
24239: LD_INT 1
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 3
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: LD_INT 2
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 5
24280: PUSH
24281: LD_INT 2
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: LD_INT 3
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 3
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 4
24310: PUSH
24311: LD_INT 3
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 4
24320: PUSH
24321: LD_INT 4
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: LD_INT 4
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: LD_INT 3
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 4
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 4
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: LD_INT 3
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 4
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: LD_INT 5
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 0
24420: PUSH
24421: LD_INT 5
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 4
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: NEG
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: PUSH
24453: LD_INT 5
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 2
24462: NEG
24463: PUSH
24464: LD_INT 3
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 3
24473: NEG
24474: PUSH
24475: LD_INT 0
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 3
24484: NEG
24485: PUSH
24486: LD_INT 1
24488: NEG
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 2
24496: NEG
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 3
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 4
24529: NEG
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 4
24540: NEG
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 4
24552: NEG
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: NEG
24565: PUSH
24566: LD_INT 2
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 4
24575: NEG
24576: PUSH
24577: LD_INT 4
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 4
24587: NEG
24588: PUSH
24589: LD_INT 5
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 3
24599: NEG
24600: PUSH
24601: LD_INT 4
24603: NEG
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 3
24611: NEG
24612: PUSH
24613: LD_INT 3
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 4
24623: NEG
24624: PUSH
24625: LD_INT 3
24627: NEG
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 5
24635: NEG
24636: PUSH
24637: LD_INT 4
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 5
24647: NEG
24648: PUSH
24649: LD_INT 5
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 3
24659: NEG
24660: PUSH
24661: LD_INT 5
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 5
24671: NEG
24672: PUSH
24673: LD_INT 3
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24728: LD_ADDR_VAR 0 30
24732: PUSH
24733: LD_INT 4
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 4
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 4
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 5
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 4
24775: PUSH
24776: LD_INT 5
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: PUSH
24786: LD_INT 4
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 3
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 5
24805: PUSH
24806: LD_INT 3
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: LD_INT 5
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 3
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 3
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 4
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 4
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: NEG
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 4
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 4
24918: NEG
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 4
24929: NEG
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 3
24941: NEG
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 3
24952: NEG
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 4
24963: NEG
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 5
24974: NEG
24975: PUSH
24976: LD_INT 0
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 5
24985: NEG
24986: PUSH
24987: LD_INT 1
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 5
24997: NEG
24998: PUSH
24999: LD_INT 2
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 3
25009: NEG
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: LD_INT 3
25020: NEG
25021: PUSH
25022: LD_INT 3
25024: NEG
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 3
25032: NEG
25033: PUSH
25034: LD_INT 4
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: NEG
25045: PUSH
25046: LD_INT 3
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 3
25068: NEG
25069: PUSH
25070: LD_INT 2
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 4
25080: NEG
25081: PUSH
25082: LD_INT 3
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 4
25092: NEG
25093: PUSH
25094: LD_INT 4
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 4
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 4
25116: NEG
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 4
25131: NEG
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 5
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: PUSH
25151: LD_INT 4
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 0
25172: PUSH
25173: LD_INT 3
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 4
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 5
25199: NEG
25200: PUSH
25201: EMPTY
25202: LIST
25203: LIST
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: LD_INT 3
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 5
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25275: LD_ADDR_VAR 0 31
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 4
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 3
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 4
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: LD_INT 5
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: LD_INT 5
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: LD_INT 4
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: LD_INT 3
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 5
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 2
25364: NEG
25365: PUSH
25366: LD_INT 3
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 3
25375: NEG
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 3
25386: NEG
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 2
25398: NEG
25399: PUSH
25400: LD_INT 0
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 3
25420: NEG
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 4
25431: NEG
25432: PUSH
25433: LD_INT 0
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 4
25442: NEG
25443: PUSH
25444: LD_INT 1
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 4
25454: NEG
25455: PUSH
25456: LD_INT 2
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 4
25477: NEG
25478: PUSH
25479: LD_INT 4
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 4
25489: NEG
25490: PUSH
25491: LD_INT 5
25493: NEG
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 3
25501: NEG
25502: PUSH
25503: LD_INT 4
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 3
25513: NEG
25514: PUSH
25515: LD_INT 3
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 4
25525: NEG
25526: PUSH
25527: LD_INT 3
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 5
25537: NEG
25538: PUSH
25539: LD_INT 4
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 5
25549: NEG
25550: PUSH
25551: LD_INT 5
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: NEG
25562: PUSH
25563: LD_INT 5
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 5
25573: NEG
25574: PUSH
25575: LD_INT 3
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 3
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 4
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: PUSH
25608: LD_INT 3
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 4
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 2
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 4
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 4
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 4
25697: PUSH
25698: LD_INT 1
25700: NEG
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 5
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 5
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 4
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 3
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 3
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 5
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25825: LD_ADDR_VAR 0 32
25829: PUSH
25830: LD_INT 4
25832: NEG
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 4
25843: NEG
25844: PUSH
25845: LD_INT 1
25847: NEG
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_INT 3
25855: NEG
25856: PUSH
25857: LD_INT 0
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: LD_INT 3
25866: NEG
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 4
25877: NEG
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 5
25888: NEG
25889: PUSH
25890: LD_INT 0
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 5
25899: NEG
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 5
25911: NEG
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 3
25923: NEG
25924: PUSH
25925: LD_INT 2
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 3
25934: NEG
25935: PUSH
25936: LD_INT 3
25938: NEG
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 3
25946: NEG
25947: PUSH
25948: LD_INT 4
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 3
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: NEG
25971: PUSH
25972: LD_INT 2
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 3
25982: NEG
25983: PUSH
25984: LD_INT 2
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 4
25994: NEG
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 4
26006: NEG
26007: PUSH
26008: LD_INT 4
26010: NEG
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: LD_INT 4
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 4
26030: NEG
26031: PUSH
26032: LD_INT 2
26034: NEG
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: LD_INT 4
26045: NEG
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 5
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 4
26067: NEG
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: LD_INT 3
26078: NEG
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 4
26101: NEG
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: LD_INT 5
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 3
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: LD_INT 5
26136: NEG
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 3
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 4
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 4
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 3
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 2
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: LD_INT 2
26219: NEG
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 4
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 4
26237: PUSH
26238: LD_INT 4
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 4
26247: PUSH
26248: LD_INT 3
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 5
26257: PUSH
26258: LD_INT 4
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 5
26267: PUSH
26268: LD_INT 5
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 4
26277: PUSH
26278: LD_INT 5
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 3
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 3
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 5
26307: PUSH
26308: LD_INT 3
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 3
26317: PUSH
26318: LD_INT 5
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26372: LD_ADDR_VAR 0 33
26376: PUSH
26377: LD_INT 4
26379: NEG
26380: PUSH
26381: LD_INT 4
26383: NEG
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 4
26391: NEG
26392: PUSH
26393: LD_INT 5
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 3
26403: NEG
26404: PUSH
26405: LD_INT 4
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 3
26415: NEG
26416: PUSH
26417: LD_INT 3
26419: NEG
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 4
26427: NEG
26428: PUSH
26429: LD_INT 3
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 5
26439: NEG
26440: PUSH
26441: LD_INT 4
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 5
26451: NEG
26452: PUSH
26453: LD_INT 5
26455: NEG
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PUSH
26461: LD_INT 3
26463: NEG
26464: PUSH
26465: LD_INT 5
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 5
26475: NEG
26476: PUSH
26477: LD_INT 3
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: LD_INT 3
26490: NEG
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 4
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 3
26512: NEG
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: NEG
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: LD_INT 4
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: LD_INT 2
26569: NEG
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: LD_INT 4
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 4
26599: PUSH
26600: LD_INT 1
26602: NEG
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 5
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 5
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 4
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 3
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 3
26661: PUSH
26662: LD_INT 2
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 5
26672: PUSH
26673: LD_INT 2
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 3
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 3
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 4
26712: PUSH
26713: LD_INT 4
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 3
26722: PUSH
26723: LD_INT 4
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 3
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 4
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 2
26762: PUSH
26763: LD_INT 4
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 4
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: LD_INT 3
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 4
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 5
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 5
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 4
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 3
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 5
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 2
26854: NEG
26855: PUSH
26856: LD_INT 3
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26910: LD_ADDR_VAR 0 34
26914: PUSH
26915: LD_INT 0
26917: PUSH
26918: LD_INT 4
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 5
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 4
26942: NEG
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 1
26950: PUSH
26951: LD_INT 3
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 3
26964: NEG
26965: PUSH
26966: EMPTY
26967: LIST
26968: LIST
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: LD_INT 4
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 5
26988: NEG
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: LD_INT 3
26999: NEG
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: LD_INT 5
27011: NEG
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 3
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 3
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 4
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 3
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 4
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 4
27112: PUSH
27113: LD_INT 4
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 4
27122: PUSH
27123: LD_INT 3
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 5
27132: PUSH
27133: LD_INT 4
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 5
27142: PUSH
27143: LD_INT 5
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 4
27152: PUSH
27153: LD_INT 5
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: LD_INT 4
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 5
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 5
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 3
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 3
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 4
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: LD_INT 4
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: LD_INT 3
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 2
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: PUSH
27275: LD_INT 4
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 2
27284: NEG
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 4
27295: NEG
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 4
27306: NEG
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 3
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 3
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 4
27340: NEG
27341: PUSH
27342: LD_INT 1
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 5
27351: NEG
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 5
27362: NEG
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 5
27374: NEG
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: ST_TO_ADDR
// end ; end ;
27442: GO 27445
27444: POP
// case btype of b_depot , b_warehouse :
27445: LD_VAR 0 1
27449: PUSH
27450: LD_INT 0
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27464
27456: LD_INT 1
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27665
27464: POP
// case nation of nation_american :
27465: LD_VAR 0 5
27469: PUSH
27470: LD_INT 1
27472: DOUBLE
27473: EQUAL
27474: IFTRUE 27478
27476: GO 27534
27478: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_VAR 0 11
27488: PUSH
27489: LD_VAR 0 12
27493: PUSH
27494: LD_VAR 0 13
27498: PUSH
27499: LD_VAR 0 14
27503: PUSH
27504: LD_VAR 0 15
27508: PUSH
27509: LD_VAR 0 16
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: PUSH
27522: LD_VAR 0 4
27526: PUSH
27527: LD_INT 1
27529: PLUS
27530: ARRAY
27531: ST_TO_ADDR
27532: GO 27663
27534: LD_INT 2
27536: DOUBLE
27537: EQUAL
27538: IFTRUE 27542
27540: GO 27598
27542: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27543: LD_ADDR_VAR 0 9
27547: PUSH
27548: LD_VAR 0 17
27552: PUSH
27553: LD_VAR 0 18
27557: PUSH
27558: LD_VAR 0 19
27562: PUSH
27563: LD_VAR 0 20
27567: PUSH
27568: LD_VAR 0 21
27572: PUSH
27573: LD_VAR 0 22
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: PUSH
27586: LD_VAR 0 4
27590: PUSH
27591: LD_INT 1
27593: PLUS
27594: ARRAY
27595: ST_TO_ADDR
27596: GO 27663
27598: LD_INT 3
27600: DOUBLE
27601: EQUAL
27602: IFTRUE 27606
27604: GO 27662
27606: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27607: LD_ADDR_VAR 0 9
27611: PUSH
27612: LD_VAR 0 23
27616: PUSH
27617: LD_VAR 0 24
27621: PUSH
27622: LD_VAR 0 25
27626: PUSH
27627: LD_VAR 0 26
27631: PUSH
27632: LD_VAR 0 27
27636: PUSH
27637: LD_VAR 0 28
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: PUSH
27650: LD_VAR 0 4
27654: PUSH
27655: LD_INT 1
27657: PLUS
27658: ARRAY
27659: ST_TO_ADDR
27660: GO 27663
27662: POP
27663: GO 28212
27665: LD_INT 2
27667: DOUBLE
27668: EQUAL
27669: IFTRUE 27679
27671: LD_INT 3
27673: DOUBLE
27674: EQUAL
27675: IFTRUE 27679
27677: GO 27735
27679: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27680: LD_ADDR_VAR 0 9
27684: PUSH
27685: LD_VAR 0 29
27689: PUSH
27690: LD_VAR 0 30
27694: PUSH
27695: LD_VAR 0 31
27699: PUSH
27700: LD_VAR 0 32
27704: PUSH
27705: LD_VAR 0 33
27709: PUSH
27710: LD_VAR 0 34
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: PUSH
27723: LD_VAR 0 4
27727: PUSH
27728: LD_INT 1
27730: PLUS
27731: ARRAY
27732: ST_TO_ADDR
27733: GO 28212
27735: LD_INT 16
27737: DOUBLE
27738: EQUAL
27739: IFTRUE 27791
27741: LD_INT 17
27743: DOUBLE
27744: EQUAL
27745: IFTRUE 27791
27747: LD_INT 18
27749: DOUBLE
27750: EQUAL
27751: IFTRUE 27791
27753: LD_INT 19
27755: DOUBLE
27756: EQUAL
27757: IFTRUE 27791
27759: LD_INT 20
27761: DOUBLE
27762: EQUAL
27763: IFTRUE 27791
27765: LD_INT 21
27767: DOUBLE
27768: EQUAL
27769: IFTRUE 27791
27771: LD_INT 23
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27791
27777: LD_INT 24
27779: DOUBLE
27780: EQUAL
27781: IFTRUE 27791
27783: LD_INT 25
27785: DOUBLE
27786: EQUAL
27787: IFTRUE 27791
27789: GO 27847
27791: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27792: LD_ADDR_VAR 0 9
27796: PUSH
27797: LD_VAR 0 35
27801: PUSH
27802: LD_VAR 0 36
27806: PUSH
27807: LD_VAR 0 37
27811: PUSH
27812: LD_VAR 0 38
27816: PUSH
27817: LD_VAR 0 39
27821: PUSH
27822: LD_VAR 0 40
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: PUSH
27835: LD_VAR 0 4
27839: PUSH
27840: LD_INT 1
27842: PLUS
27843: ARRAY
27844: ST_TO_ADDR
27845: GO 28212
27847: LD_INT 6
27849: DOUBLE
27850: EQUAL
27851: IFTRUE 27903
27853: LD_INT 7
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27903
27859: LD_INT 8
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27903
27865: LD_INT 13
27867: DOUBLE
27868: EQUAL
27869: IFTRUE 27903
27871: LD_INT 12
27873: DOUBLE
27874: EQUAL
27875: IFTRUE 27903
27877: LD_INT 15
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27903
27883: LD_INT 11
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27903
27889: LD_INT 14
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27903
27895: LD_INT 10
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27903
27901: GO 27959
27903: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27904: LD_ADDR_VAR 0 9
27908: PUSH
27909: LD_VAR 0 41
27913: PUSH
27914: LD_VAR 0 42
27918: PUSH
27919: LD_VAR 0 43
27923: PUSH
27924: LD_VAR 0 44
27928: PUSH
27929: LD_VAR 0 45
27933: PUSH
27934: LD_VAR 0 46
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: PUSH
27947: LD_VAR 0 4
27951: PUSH
27952: LD_INT 1
27954: PLUS
27955: ARRAY
27956: ST_TO_ADDR
27957: GO 28212
27959: LD_INT 36
27961: DOUBLE
27962: EQUAL
27963: IFTRUE 27967
27965: GO 28023
27967: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27968: LD_ADDR_VAR 0 9
27972: PUSH
27973: LD_VAR 0 47
27977: PUSH
27978: LD_VAR 0 48
27982: PUSH
27983: LD_VAR 0 49
27987: PUSH
27988: LD_VAR 0 50
27992: PUSH
27993: LD_VAR 0 51
27997: PUSH
27998: LD_VAR 0 52
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: PUSH
28011: LD_VAR 0 4
28015: PUSH
28016: LD_INT 1
28018: PLUS
28019: ARRAY
28020: ST_TO_ADDR
28021: GO 28212
28023: LD_INT 4
28025: DOUBLE
28026: EQUAL
28027: IFTRUE 28049
28029: LD_INT 5
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28049
28035: LD_INT 34
28037: DOUBLE
28038: EQUAL
28039: IFTRUE 28049
28041: LD_INT 37
28043: DOUBLE
28044: EQUAL
28045: IFTRUE 28049
28047: GO 28105
28049: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
28050: LD_ADDR_VAR 0 9
28054: PUSH
28055: LD_VAR 0 53
28059: PUSH
28060: LD_VAR 0 54
28064: PUSH
28065: LD_VAR 0 55
28069: PUSH
28070: LD_VAR 0 56
28074: PUSH
28075: LD_VAR 0 57
28079: PUSH
28080: LD_VAR 0 58
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: PUSH
28093: LD_VAR 0 4
28097: PUSH
28098: LD_INT 1
28100: PLUS
28101: ARRAY
28102: ST_TO_ADDR
28103: GO 28212
28105: LD_INT 31
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28155
28111: LD_INT 32
28113: DOUBLE
28114: EQUAL
28115: IFTRUE 28155
28117: LD_INT 33
28119: DOUBLE
28120: EQUAL
28121: IFTRUE 28155
28123: LD_INT 27
28125: DOUBLE
28126: EQUAL
28127: IFTRUE 28155
28129: LD_INT 26
28131: DOUBLE
28132: EQUAL
28133: IFTRUE 28155
28135: LD_INT 28
28137: DOUBLE
28138: EQUAL
28139: IFTRUE 28155
28141: LD_INT 29
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28155
28147: LD_INT 30
28149: DOUBLE
28150: EQUAL
28151: IFTRUE 28155
28153: GO 28211
28155: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
28156: LD_ADDR_VAR 0 9
28160: PUSH
28161: LD_VAR 0 59
28165: PUSH
28166: LD_VAR 0 60
28170: PUSH
28171: LD_VAR 0 61
28175: PUSH
28176: LD_VAR 0 62
28180: PUSH
28181: LD_VAR 0 63
28185: PUSH
28186: LD_VAR 0 64
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: PUSH
28199: LD_VAR 0 4
28203: PUSH
28204: LD_INT 1
28206: PLUS
28207: ARRAY
28208: ST_TO_ADDR
28209: GO 28212
28211: POP
// temp_list2 = [ ] ;
28212: LD_ADDR_VAR 0 10
28216: PUSH
28217: EMPTY
28218: ST_TO_ADDR
// for i in temp_list do
28219: LD_ADDR_VAR 0 8
28223: PUSH
28224: LD_VAR 0 9
28228: PUSH
28229: FOR_IN
28230: IFFALSE 28282
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
28232: LD_ADDR_VAR 0 10
28236: PUSH
28237: LD_VAR 0 10
28241: PUSH
28242: LD_VAR 0 8
28246: PUSH
28247: LD_INT 1
28249: ARRAY
28250: PUSH
28251: LD_VAR 0 2
28255: PLUS
28256: PUSH
28257: LD_VAR 0 8
28261: PUSH
28262: LD_INT 2
28264: ARRAY
28265: PUSH
28266: LD_VAR 0 3
28270: PLUS
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: EMPTY
28277: LIST
28278: ADD
28279: ST_TO_ADDR
28280: GO 28229
28282: POP
28283: POP
// result = temp_list2 ;
28284: LD_ADDR_VAR 0 7
28288: PUSH
28289: LD_VAR 0 10
28293: ST_TO_ADDR
// end ;
28294: LD_VAR 0 7
28298: RET
// export function EnemyInRange ( unit , dist ) ; begin
28299: LD_INT 0
28301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28302: LD_ADDR_VAR 0 3
28306: PUSH
28307: LD_VAR 0 1
28311: PPUSH
28312: CALL_OW 255
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 250
28326: PPUSH
28327: LD_VAR 0 1
28331: PPUSH
28332: CALL_OW 251
28336: PPUSH
28337: LD_VAR 0 2
28341: PPUSH
28342: CALL 3741 0 4
28346: PUSH
28347: LD_INT 4
28349: ARRAY
28350: ST_TO_ADDR
// end ;
28351: LD_VAR 0 3
28355: RET
// export function PlayerSeeMe ( unit ) ; begin
28356: LD_INT 0
28358: PPUSH
// result := See ( your_side , unit ) ;
28359: LD_ADDR_VAR 0 2
28363: PUSH
28364: LD_OWVAR 2
28368: PPUSH
28369: LD_VAR 0 1
28373: PPUSH
28374: CALL_OW 292
28378: ST_TO_ADDR
// end ;
28379: LD_VAR 0 2
28383: RET
// export function ReverseDir ( unit ) ; begin
28384: LD_INT 0
28386: PPUSH
// if not unit then
28387: LD_VAR 0 1
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28442
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28396: LD_ADDR_VAR 0 2
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: LD_INT 4
28406: PUSH
28407: LD_INT 5
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: LD_INT 1
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: PUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 254
28436: PUSH
28437: LD_INT 1
28439: PLUS
28440: ARRAY
28441: ST_TO_ADDR
// end ;
28442: LD_VAR 0 2
28446: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28447: LD_INT 0
28449: PPUSH
28450: PPUSH
28451: PPUSH
28452: PPUSH
28453: PPUSH
// if not hexes then
28454: LD_VAR 0 2
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28611
// dist := 9999 ;
28463: LD_ADDR_VAR 0 5
28467: PUSH
28468: LD_INT 9999
28470: ST_TO_ADDR
// for i = 1 to hexes do
28471: LD_ADDR_VAR 0 4
28475: PUSH
28476: DOUBLE
28477: LD_INT 1
28479: DEC
28480: ST_TO_ADDR
28481: LD_VAR 0 2
28485: PUSH
28486: FOR_TO
28487: IFFALSE 28599
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28489: LD_VAR 0 1
28493: PPUSH
28494: LD_VAR 0 2
28498: PUSH
28499: LD_VAR 0 4
28503: ARRAY
28504: PUSH
28505: LD_INT 1
28507: ARRAY
28508: PPUSH
28509: LD_VAR 0 2
28513: PUSH
28514: LD_VAR 0 4
28518: ARRAY
28519: PUSH
28520: LD_INT 2
28522: ARRAY
28523: PPUSH
28524: CALL_OW 297
28528: PUSH
28529: LD_VAR 0 5
28533: LESS
28534: IFFALSE 28597
// begin hex := hexes [ i ] ;
28536: LD_ADDR_VAR 0 7
28540: PUSH
28541: LD_VAR 0 2
28545: PUSH
28546: LD_VAR 0 4
28550: ARRAY
28551: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28552: LD_ADDR_VAR 0 5
28556: PUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: LD_VAR 0 2
28566: PUSH
28567: LD_VAR 0 4
28571: ARRAY
28572: PUSH
28573: LD_INT 1
28575: ARRAY
28576: PPUSH
28577: LD_VAR 0 2
28581: PUSH
28582: LD_VAR 0 4
28586: ARRAY
28587: PUSH
28588: LD_INT 2
28590: ARRAY
28591: PPUSH
28592: CALL_OW 297
28596: ST_TO_ADDR
// end ; end ;
28597: GO 28486
28599: POP
28600: POP
// result := hex ;
28601: LD_ADDR_VAR 0 3
28605: PUSH
28606: LD_VAR 0 7
28610: ST_TO_ADDR
// end ;
28611: LD_VAR 0 3
28615: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28616: LD_INT 0
28618: PPUSH
28619: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28620: LD_VAR 0 1
28624: NOT
28625: PUSH
28626: LD_VAR 0 1
28630: PUSH
28631: LD_INT 21
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 23
28643: PUSH
28644: LD_INT 2
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PPUSH
28655: CALL_OW 69
28659: IN
28660: NOT
28661: OR
28662: IFFALSE 28666
// exit ;
28664: GO 28713
// for i = 1 to 3 do
28666: LD_ADDR_VAR 0 3
28670: PUSH
28671: DOUBLE
28672: LD_INT 1
28674: DEC
28675: ST_TO_ADDR
28676: LD_INT 3
28678: PUSH
28679: FOR_TO
28680: IFFALSE 28711
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 250
28691: PPUSH
28692: LD_VAR 0 1
28696: PPUSH
28697: CALL_OW 251
28701: PPUSH
28702: LD_INT 1
28704: PPUSH
28705: CALL_OW 453
28709: GO 28679
28711: POP
28712: POP
// end ;
28713: LD_VAR 0 2
28717: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28718: LD_INT 0
28720: PPUSH
28721: PPUSH
28722: PPUSH
28723: PPUSH
28724: PPUSH
28725: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28726: LD_VAR 0 1
28730: NOT
28731: PUSH
28732: LD_VAR 0 2
28736: NOT
28737: OR
28738: PUSH
28739: LD_VAR 0 1
28743: PPUSH
28744: CALL_OW 314
28748: OR
28749: IFFALSE 28753
// exit ;
28751: GO 29194
// x := GetX ( enemy_unit ) ;
28753: LD_ADDR_VAR 0 7
28757: PUSH
28758: LD_VAR 0 2
28762: PPUSH
28763: CALL_OW 250
28767: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28768: LD_ADDR_VAR 0 8
28772: PUSH
28773: LD_VAR 0 2
28777: PPUSH
28778: CALL_OW 251
28782: ST_TO_ADDR
// if not x or not y then
28783: LD_VAR 0 7
28787: NOT
28788: PUSH
28789: LD_VAR 0 8
28793: NOT
28794: OR
28795: IFFALSE 28799
// exit ;
28797: GO 29194
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28799: LD_ADDR_VAR 0 6
28803: PUSH
28804: LD_VAR 0 7
28808: PPUSH
28809: LD_INT 0
28811: PPUSH
28812: LD_INT 4
28814: PPUSH
28815: CALL_OW 272
28819: PUSH
28820: LD_VAR 0 8
28824: PPUSH
28825: LD_INT 0
28827: PPUSH
28828: LD_INT 4
28830: PPUSH
28831: CALL_OW 273
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_VAR 0 7
28844: PPUSH
28845: LD_INT 1
28847: PPUSH
28848: LD_INT 4
28850: PPUSH
28851: CALL_OW 272
28855: PUSH
28856: LD_VAR 0 8
28860: PPUSH
28861: LD_INT 1
28863: PPUSH
28864: LD_INT 4
28866: PPUSH
28867: CALL_OW 273
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_VAR 0 7
28880: PPUSH
28881: LD_INT 2
28883: PPUSH
28884: LD_INT 4
28886: PPUSH
28887: CALL_OW 272
28891: PUSH
28892: LD_VAR 0 8
28896: PPUSH
28897: LD_INT 2
28899: PPUSH
28900: LD_INT 4
28902: PPUSH
28903: CALL_OW 273
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_VAR 0 7
28916: PPUSH
28917: LD_INT 3
28919: PPUSH
28920: LD_INT 4
28922: PPUSH
28923: CALL_OW 272
28927: PUSH
28928: LD_VAR 0 8
28932: PPUSH
28933: LD_INT 3
28935: PPUSH
28936: LD_INT 4
28938: PPUSH
28939: CALL_OW 273
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_VAR 0 7
28952: PPUSH
28953: LD_INT 4
28955: PPUSH
28956: LD_INT 4
28958: PPUSH
28959: CALL_OW 272
28963: PUSH
28964: LD_VAR 0 8
28968: PPUSH
28969: LD_INT 4
28971: PPUSH
28972: LD_INT 4
28974: PPUSH
28975: CALL_OW 273
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_VAR 0 7
28988: PPUSH
28989: LD_INT 5
28991: PPUSH
28992: LD_INT 4
28994: PPUSH
28995: CALL_OW 272
28999: PUSH
29000: LD_VAR 0 8
29004: PPUSH
29005: LD_INT 5
29007: PPUSH
29008: LD_INT 4
29010: PPUSH
29011: CALL_OW 273
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: ST_TO_ADDR
// for i = tmp downto 1 do
29028: LD_ADDR_VAR 0 4
29032: PUSH
29033: DOUBLE
29034: LD_VAR 0 6
29038: INC
29039: ST_TO_ADDR
29040: LD_INT 1
29042: PUSH
29043: FOR_DOWNTO
29044: IFFALSE 29145
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
29046: LD_VAR 0 6
29050: PUSH
29051: LD_VAR 0 4
29055: ARRAY
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PPUSH
29061: LD_VAR 0 6
29065: PUSH
29066: LD_VAR 0 4
29070: ARRAY
29071: PUSH
29072: LD_INT 2
29074: ARRAY
29075: PPUSH
29076: CALL_OW 488
29080: NOT
29081: PUSH
29082: LD_VAR 0 6
29086: PUSH
29087: LD_VAR 0 4
29091: ARRAY
29092: PUSH
29093: LD_INT 1
29095: ARRAY
29096: PPUSH
29097: LD_VAR 0 6
29101: PUSH
29102: LD_VAR 0 4
29106: ARRAY
29107: PUSH
29108: LD_INT 2
29110: ARRAY
29111: PPUSH
29112: CALL_OW 428
29116: PUSH
29117: LD_INT 0
29119: NONEQUAL
29120: OR
29121: IFFALSE 29143
// tmp := Delete ( tmp , i ) ;
29123: LD_ADDR_VAR 0 6
29127: PUSH
29128: LD_VAR 0 6
29132: PPUSH
29133: LD_VAR 0 4
29137: PPUSH
29138: CALL_OW 3
29142: ST_TO_ADDR
29143: GO 29043
29145: POP
29146: POP
// j := GetClosestHex ( unit , tmp ) ;
29147: LD_ADDR_VAR 0 5
29151: PUSH
29152: LD_VAR 0 1
29156: PPUSH
29157: LD_VAR 0 6
29161: PPUSH
29162: CALL 28447 0 2
29166: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
29167: LD_VAR 0 1
29171: PPUSH
29172: LD_VAR 0 5
29176: PUSH
29177: LD_INT 1
29179: ARRAY
29180: PPUSH
29181: LD_VAR 0 5
29185: PUSH
29186: LD_INT 2
29188: ARRAY
29189: PPUSH
29190: CALL_OW 111
// end ;
29194: LD_VAR 0 3
29198: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
29203: PPUSH
29204: PPUSH
// uc_side = 0 ;
29205: LD_ADDR_OWVAR 20
29209: PUSH
29210: LD_INT 0
29212: ST_TO_ADDR
// uc_nation = 0 ;
29213: LD_ADDR_OWVAR 21
29217: PUSH
29218: LD_INT 0
29220: ST_TO_ADDR
// nat_area := natureArea ;
29221: LD_ADDR_VAR 0 4
29225: PUSH
29226: LD_INT 18
29228: ST_TO_ADDR
// InitHc ;
29229: CALL_OW 19
// for i = 1 to 4 do
29233: LD_ADDR_VAR 0 2
29237: PUSH
29238: DOUBLE
29239: LD_INT 1
29241: DEC
29242: ST_TO_ADDR
29243: LD_INT 4
29245: PUSH
29246: FOR_TO
29247: IFFALSE 29294
// begin hc_class = 18 ;
29249: LD_ADDR_OWVAR 28
29253: PUSH
29254: LD_INT 18
29256: ST_TO_ADDR
// hc_gallery =  ;
29257: LD_ADDR_OWVAR 33
29261: PUSH
29262: LD_STRING 
29264: ST_TO_ADDR
// animal := CreateHuman ;
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: CALL_OW 44
29274: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29275: LD_VAR 0 3
29279: PPUSH
29280: LD_VAR 0 4
29284: PPUSH
29285: LD_INT 0
29287: PPUSH
29288: CALL_OW 49
// end ;
29292: GO 29246
29294: POP
29295: POP
// for i = 1 to 3 do
29296: LD_ADDR_VAR 0 2
29300: PUSH
29301: DOUBLE
29302: LD_INT 1
29304: DEC
29305: ST_TO_ADDR
29306: LD_INT 3
29308: PUSH
29309: FOR_TO
29310: IFFALSE 29374
// begin hc_class = class_tiger ;
29312: LD_ADDR_OWVAR 28
29316: PUSH
29317: LD_INT 14
29319: ST_TO_ADDR
// hc_gallery =  ;
29320: LD_ADDR_OWVAR 33
29324: PUSH
29325: LD_STRING 
29327: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29328: LD_ADDR_OWVAR 35
29332: PUSH
29333: LD_INT 5
29335: NEG
29336: PPUSH
29337: LD_INT 5
29339: PPUSH
29340: CALL_OW 12
29344: ST_TO_ADDR
// animal := CreateHuman ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: CALL_OW 44
29354: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29355: LD_VAR 0 3
29359: PPUSH
29360: LD_VAR 0 4
29364: PPUSH
29365: LD_INT 0
29367: PPUSH
29368: CALL_OW 49
// end ;
29372: GO 29309
29374: POP
29375: POP
// for i = 1 to 5 do
29376: LD_ADDR_VAR 0 2
29380: PUSH
29381: DOUBLE
29382: LD_INT 1
29384: DEC
29385: ST_TO_ADDR
29386: LD_INT 5
29388: PUSH
29389: FOR_TO
29390: IFFALSE 29493
// begin hc_class = class_apeman ;
29392: LD_ADDR_OWVAR 28
29396: PUSH
29397: LD_INT 12
29399: ST_TO_ADDR
// hc_gallery =  ;
29400: LD_ADDR_OWVAR 33
29404: PUSH
29405: LD_STRING 
29407: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29408: LD_ADDR_OWVAR 35
29412: PUSH
29413: LD_INT 2
29415: NEG
29416: PPUSH
29417: LD_INT 2
29419: PPUSH
29420: CALL_OW 12
29424: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29425: LD_ADDR_OWVAR 31
29429: PUSH
29430: LD_INT 1
29432: PPUSH
29433: LD_INT 3
29435: PPUSH
29436: CALL_OW 12
29440: PUSH
29441: LD_INT 1
29443: PPUSH
29444: LD_INT 3
29446: PPUSH
29447: CALL_OW 12
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: LD_INT 0
29457: PUSH
29458: EMPTY
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: ST_TO_ADDR
// animal := CreateHuman ;
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: CALL_OW 44
29473: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29474: LD_VAR 0 3
29478: PPUSH
29479: LD_VAR 0 4
29483: PPUSH
29484: LD_INT 0
29486: PPUSH
29487: CALL_OW 49
// end ;
29491: GO 29389
29493: POP
29494: POP
// for i = 1 to 3 do
29495: LD_ADDR_VAR 0 2
29499: PUSH
29500: DOUBLE
29501: LD_INT 1
29503: DEC
29504: ST_TO_ADDR
29505: LD_INT 3
29507: PUSH
29508: FOR_TO
29509: IFFALSE 29556
// begin hc_class = 13 ;
29511: LD_ADDR_OWVAR 28
29515: PUSH
29516: LD_INT 13
29518: ST_TO_ADDR
// hc_gallery =  ;
29519: LD_ADDR_OWVAR 33
29523: PUSH
29524: LD_STRING 
29526: ST_TO_ADDR
// animal := CreateHuman ;
29527: LD_ADDR_VAR 0 3
29531: PUSH
29532: CALL_OW 44
29536: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29537: LD_VAR 0 3
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: LD_INT 0
29549: PPUSH
29550: CALL_OW 49
// end ;
29554: GO 29508
29556: POP
29557: POP
// for i = 1 to 7 do
29558: LD_ADDR_VAR 0 2
29562: PUSH
29563: DOUBLE
29564: LD_INT 1
29566: DEC
29567: ST_TO_ADDR
29568: LD_INT 7
29570: PUSH
29571: FOR_TO
29572: IFFALSE 29617
// begin hc_class = 20 ;
29574: LD_ADDR_OWVAR 28
29578: PUSH
29579: LD_INT 20
29581: ST_TO_ADDR
// hc_gallery =  ;
29582: LD_ADDR_OWVAR 33
29586: PUSH
29587: LD_STRING 
29589: ST_TO_ADDR
// animal := CreateHuman ;
29590: LD_ADDR_VAR 0 3
29594: PUSH
29595: CALL_OW 44
29599: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29600: LD_VAR 0 3
29604: PPUSH
29605: LD_INT 19
29607: PPUSH
29608: LD_INT 0
29610: PPUSH
29611: CALL_OW 49
// end ;
29615: GO 29571
29617: POP
29618: POP
// end ;
29619: LD_VAR 0 1
29623: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29624: LD_INT 0
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
29644: PPUSH
29645: PPUSH
29646: PPUSH
29647: PPUSH
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
// if not list then
29654: LD_VAR 0 1
29658: NOT
29659: IFFALSE 29663
// exit ;
29661: GO 32917
// base := list [ 1 ] ;
29663: LD_ADDR_VAR 0 3
29667: PUSH
29668: LD_VAR 0 1
29672: PUSH
29673: LD_INT 1
29675: ARRAY
29676: ST_TO_ADDR
// group := list [ 2 ] ;
29677: LD_ADDR_VAR 0 4
29681: PUSH
29682: LD_VAR 0 1
29686: PUSH
29687: LD_INT 2
29689: ARRAY
29690: ST_TO_ADDR
// path := list [ 3 ] ;
29691: LD_ADDR_VAR 0 5
29695: PUSH
29696: LD_VAR 0 1
29700: PUSH
29701: LD_INT 3
29703: ARRAY
29704: ST_TO_ADDR
// flags := list [ 4 ] ;
29705: LD_ADDR_VAR 0 6
29709: PUSH
29710: LD_VAR 0 1
29714: PUSH
29715: LD_INT 4
29717: ARRAY
29718: ST_TO_ADDR
// mined := [ ] ;
29719: LD_ADDR_VAR 0 27
29723: PUSH
29724: EMPTY
29725: ST_TO_ADDR
// bombed := [ ] ;
29726: LD_ADDR_VAR 0 28
29730: PUSH
29731: EMPTY
29732: ST_TO_ADDR
// if not group or not path then
29733: LD_VAR 0 4
29737: NOT
29738: PUSH
29739: LD_VAR 0 5
29743: NOT
29744: OR
29745: IFFALSE 29749
// exit ;
29747: GO 32917
// if flags then
29749: LD_VAR 0 6
29753: IFFALSE 29897
// begin f_ignore_area := flags [ 1 ] ;
29755: LD_ADDR_VAR 0 17
29759: PUSH
29760: LD_VAR 0 6
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29769: LD_ADDR_VAR 0 18
29773: PUSH
29774: LD_VAR 0 6
29778: PUSH
29779: LD_INT 2
29781: ARRAY
29782: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29783: LD_ADDR_VAR 0 19
29787: PUSH
29788: LD_VAR 0 6
29792: PUSH
29793: LD_INT 3
29795: ARRAY
29796: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29797: LD_ADDR_VAR 0 20
29801: PUSH
29802: LD_VAR 0 6
29806: PUSH
29807: LD_INT 4
29809: ARRAY
29810: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29811: LD_ADDR_VAR 0 21
29815: PUSH
29816: LD_VAR 0 6
29820: PUSH
29821: LD_INT 5
29823: ARRAY
29824: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29825: LD_ADDR_VAR 0 22
29829: PUSH
29830: LD_VAR 0 6
29834: PUSH
29835: LD_INT 6
29837: ARRAY
29838: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29839: LD_ADDR_VAR 0 23
29843: PUSH
29844: LD_VAR 0 6
29848: PUSH
29849: LD_INT 7
29851: ARRAY
29852: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29853: LD_ADDR_VAR 0 24
29857: PUSH
29858: LD_VAR 0 6
29862: PUSH
29863: LD_INT 8
29865: ARRAY
29866: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29867: LD_ADDR_VAR 0 25
29871: PUSH
29872: LD_VAR 0 6
29876: PUSH
29877: LD_INT 9
29879: ARRAY
29880: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29881: LD_ADDR_VAR 0 26
29885: PUSH
29886: LD_VAR 0 6
29890: PUSH
29891: LD_INT 10
29893: ARRAY
29894: ST_TO_ADDR
// end else
29895: GO 29977
// begin f_ignore_area := false ;
29897: LD_ADDR_VAR 0 17
29901: PUSH
29902: LD_INT 0
29904: ST_TO_ADDR
// f_capture := false ;
29905: LD_ADDR_VAR 0 18
29909: PUSH
29910: LD_INT 0
29912: ST_TO_ADDR
// f_ignore_civ := false ;
29913: LD_ADDR_VAR 0 19
29917: PUSH
29918: LD_INT 0
29920: ST_TO_ADDR
// f_murder := false ;
29921: LD_ADDR_VAR 0 20
29925: PUSH
29926: LD_INT 0
29928: ST_TO_ADDR
// f_mines := false ;
29929: LD_ADDR_VAR 0 21
29933: PUSH
29934: LD_INT 0
29936: ST_TO_ADDR
// f_repair := false ;
29937: LD_ADDR_VAR 0 22
29941: PUSH
29942: LD_INT 0
29944: ST_TO_ADDR
// f_heal := false ;
29945: LD_ADDR_VAR 0 23
29949: PUSH
29950: LD_INT 0
29952: ST_TO_ADDR
// f_spacetime := false ;
29953: LD_ADDR_VAR 0 24
29957: PUSH
29958: LD_INT 0
29960: ST_TO_ADDR
// f_attack_depot := false ;
29961: LD_ADDR_VAR 0 25
29965: PUSH
29966: LD_INT 0
29968: ST_TO_ADDR
// f_crawl := false ;
29969: LD_ADDR_VAR 0 26
29973: PUSH
29974: LD_INT 0
29976: ST_TO_ADDR
// end ; units_path := [ ] ;
29977: LD_ADDR_VAR 0 16
29981: PUSH
29982: EMPTY
29983: ST_TO_ADDR
// for i = 1 to group do
29984: LD_ADDR_VAR 0 7
29988: PUSH
29989: DOUBLE
29990: LD_INT 1
29992: DEC
29993: ST_TO_ADDR
29994: LD_VAR 0 4
29998: PUSH
29999: FOR_TO
30000: IFFALSE 30029
// begin units_path := Replace ( units_path , i , path ) ;
30002: LD_ADDR_VAR 0 16
30006: PUSH
30007: LD_VAR 0 16
30011: PPUSH
30012: LD_VAR 0 7
30016: PPUSH
30017: LD_VAR 0 5
30021: PPUSH
30022: CALL_OW 1
30026: ST_TO_ADDR
// end ;
30027: GO 29999
30029: POP
30030: POP
// repeat for i = group downto 1 do
30031: LD_ADDR_VAR 0 7
30035: PUSH
30036: DOUBLE
30037: LD_VAR 0 4
30041: INC
30042: ST_TO_ADDR
30043: LD_INT 1
30045: PUSH
30046: FOR_DOWNTO
30047: IFFALSE 32899
// begin tmp := [ ] ;
30049: LD_ADDR_VAR 0 14
30053: PUSH
30054: EMPTY
30055: ST_TO_ADDR
// attacking := false ;
30056: LD_ADDR_VAR 0 29
30060: PUSH
30061: LD_INT 0
30063: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
30064: LD_VAR 0 4
30068: PUSH
30069: LD_VAR 0 7
30073: ARRAY
30074: PPUSH
30075: CALL_OW 301
30079: PUSH
30080: LD_VAR 0 4
30084: PUSH
30085: LD_VAR 0 7
30089: ARRAY
30090: NOT
30091: OR
30092: IFFALSE 30136
// begin group := Delete ( group , i ) ;
30094: LD_ADDR_VAR 0 4
30098: PUSH
30099: LD_VAR 0 4
30103: PPUSH
30104: LD_VAR 0 7
30108: PPUSH
30109: CALL_OW 3
30113: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
30114: LD_ADDR_VAR 0 16
30118: PUSH
30119: LD_VAR 0 16
30123: PPUSH
30124: LD_VAR 0 7
30128: PPUSH
30129: CALL_OW 3
30133: ST_TO_ADDR
// continue ;
30134: GO 30046
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
30136: LD_VAR 0 4
30140: PUSH
30141: LD_VAR 0 7
30145: ARRAY
30146: PPUSH
30147: LD_INT 10
30149: PPUSH
30150: CALL 28299 0 2
30154: NOT
30155: PUSH
30156: LD_VAR 0 16
30160: PUSH
30161: LD_VAR 0 7
30165: ARRAY
30166: PUSH
30167: EMPTY
30168: EQUAL
30169: NOT
30170: AND
30171: IFFALSE 30455
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
30173: LD_VAR 0 4
30177: PUSH
30178: LD_VAR 0 7
30182: ARRAY
30183: PPUSH
30184: CALL_OW 262
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: IN
30199: IFFALSE 30258
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
30201: LD_VAR 0 4
30205: PUSH
30206: LD_VAR 0 7
30210: ARRAY
30211: PPUSH
30212: CALL_OW 261
30216: PUSH
30217: LD_INT 10
30219: LESS
30220: PUSH
30221: LD_VAR 0 4
30225: PUSH
30226: LD_VAR 0 7
30230: ARRAY
30231: PPUSH
30232: CALL 28356 0 1
30236: NOT
30237: AND
30238: IFFALSE 30258
// SetFuel ( group [ i ] , 12 ) ;
30240: LD_VAR 0 4
30244: PUSH
30245: LD_VAR 0 7
30249: ARRAY
30250: PPUSH
30251: LD_INT 12
30253: PPUSH
30254: CALL_OW 240
// if units_path [ i ] then
30258: LD_VAR 0 16
30262: PUSH
30263: LD_VAR 0 7
30267: ARRAY
30268: IFFALSE 30453
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30270: LD_VAR 0 4
30274: PUSH
30275: LD_VAR 0 7
30279: ARRAY
30280: PPUSH
30281: LD_VAR 0 16
30285: PUSH
30286: LD_VAR 0 7
30290: ARRAY
30291: PUSH
30292: LD_INT 1
30294: ARRAY
30295: PUSH
30296: LD_INT 1
30298: ARRAY
30299: PPUSH
30300: LD_VAR 0 16
30304: PUSH
30305: LD_VAR 0 7
30309: ARRAY
30310: PUSH
30311: LD_INT 1
30313: ARRAY
30314: PUSH
30315: LD_INT 2
30317: ARRAY
30318: PPUSH
30319: CALL_OW 297
30323: PUSH
30324: LD_INT 6
30326: GREATER
30327: IFFALSE 30402
// begin if not HasTask ( group [ i ] ) then
30329: LD_VAR 0 4
30333: PUSH
30334: LD_VAR 0 7
30338: ARRAY
30339: PPUSH
30340: CALL_OW 314
30344: NOT
30345: IFFALSE 30400
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30347: LD_VAR 0 4
30351: PUSH
30352: LD_VAR 0 7
30356: ARRAY
30357: PPUSH
30358: LD_VAR 0 16
30362: PUSH
30363: LD_VAR 0 7
30367: ARRAY
30368: PUSH
30369: LD_INT 1
30371: ARRAY
30372: PUSH
30373: LD_INT 1
30375: ARRAY
30376: PPUSH
30377: LD_VAR 0 16
30381: PUSH
30382: LD_VAR 0 7
30386: ARRAY
30387: PUSH
30388: LD_INT 1
30390: ARRAY
30391: PUSH
30392: LD_INT 2
30394: ARRAY
30395: PPUSH
30396: CALL_OW 114
// end else
30400: GO 30453
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30402: LD_ADDR_VAR 0 15
30406: PUSH
30407: LD_VAR 0 16
30411: PUSH
30412: LD_VAR 0 7
30416: ARRAY
30417: PPUSH
30418: LD_INT 1
30420: PPUSH
30421: CALL_OW 3
30425: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30426: LD_ADDR_VAR 0 16
30430: PUSH
30431: LD_VAR 0 16
30435: PPUSH
30436: LD_VAR 0 7
30440: PPUSH
30441: LD_VAR 0 15
30445: PPUSH
30446: CALL_OW 1
30450: ST_TO_ADDR
// continue ;
30451: GO 30046
// end ; end ; end else
30453: GO 32897
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30455: LD_ADDR_VAR 0 14
30459: PUSH
30460: LD_INT 81
30462: PUSH
30463: LD_VAR 0 4
30467: PUSH
30468: LD_VAR 0 7
30472: ARRAY
30473: PPUSH
30474: CALL_OW 255
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PPUSH
30483: CALL_OW 69
30487: ST_TO_ADDR
// if not tmp then
30488: LD_VAR 0 14
30492: NOT
30493: IFFALSE 30497
// continue ;
30495: GO 30046
// if f_ignore_area then
30497: LD_VAR 0 17
30501: IFFALSE 30589
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30503: LD_ADDR_VAR 0 15
30507: PUSH
30508: LD_VAR 0 14
30512: PPUSH
30513: LD_INT 3
30515: PUSH
30516: LD_INT 92
30518: PUSH
30519: LD_VAR 0 17
30523: PUSH
30524: LD_INT 1
30526: ARRAY
30527: PUSH
30528: LD_VAR 0 17
30532: PUSH
30533: LD_INT 2
30535: ARRAY
30536: PUSH
30537: LD_VAR 0 17
30541: PUSH
30542: LD_INT 3
30544: ARRAY
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PPUSH
30556: CALL_OW 72
30560: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30561: LD_VAR 0 14
30565: PUSH
30566: LD_VAR 0 15
30570: DIFF
30571: IFFALSE 30589
// tmp := tmp diff tmp2 ;
30573: LD_ADDR_VAR 0 14
30577: PUSH
30578: LD_VAR 0 14
30582: PUSH
30583: LD_VAR 0 15
30587: DIFF
30588: ST_TO_ADDR
// end ; if not f_murder then
30589: LD_VAR 0 20
30593: NOT
30594: IFFALSE 30652
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30596: LD_ADDR_VAR 0 15
30600: PUSH
30601: LD_VAR 0 14
30605: PPUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 50
30611: PUSH
30612: EMPTY
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PPUSH
30619: CALL_OW 72
30623: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30624: LD_VAR 0 14
30628: PUSH
30629: LD_VAR 0 15
30633: DIFF
30634: IFFALSE 30652
// tmp := tmp diff tmp2 ;
30636: LD_ADDR_VAR 0 14
30640: PUSH
30641: LD_VAR 0 14
30645: PUSH
30646: LD_VAR 0 15
30650: DIFF
30651: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30652: LD_ADDR_VAR 0 14
30656: PUSH
30657: LD_VAR 0 4
30661: PUSH
30662: LD_VAR 0 7
30666: ARRAY
30667: PPUSH
30668: LD_VAR 0 14
30672: PPUSH
30673: LD_INT 1
30675: PPUSH
30676: LD_INT 1
30678: PPUSH
30679: CALL 3280 0 4
30683: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30684: LD_VAR 0 4
30688: PUSH
30689: LD_VAR 0 7
30693: ARRAY
30694: PPUSH
30695: CALL_OW 257
30699: PUSH
30700: LD_INT 1
30702: EQUAL
30703: IFFALSE 31151
// begin if WantPlant ( group [ i ] ) then
30705: LD_VAR 0 4
30709: PUSH
30710: LD_VAR 0 7
30714: ARRAY
30715: PPUSH
30716: CALL 2748 0 1
30720: IFFALSE 30724
// continue ;
30722: GO 30046
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30724: LD_VAR 0 18
30728: PUSH
30729: LD_VAR 0 4
30733: PUSH
30734: LD_VAR 0 7
30738: ARRAY
30739: PPUSH
30740: CALL_OW 310
30744: NOT
30745: AND
30746: PUSH
30747: LD_VAR 0 14
30751: PUSH
30752: LD_INT 1
30754: ARRAY
30755: PUSH
30756: LD_VAR 0 14
30760: PPUSH
30761: LD_INT 21
30763: PUSH
30764: LD_INT 2
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 58
30773: PUSH
30774: EMPTY
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 72
30785: IN
30786: AND
30787: IFFALSE 30823
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30789: LD_VAR 0 4
30793: PUSH
30794: LD_VAR 0 7
30798: ARRAY
30799: PPUSH
30800: LD_VAR 0 14
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: CALL_OW 120
// attacking := true ;
30813: LD_ADDR_VAR 0 29
30817: PUSH
30818: LD_INT 1
30820: ST_TO_ADDR
// continue ;
30821: GO 30046
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30823: LD_VAR 0 26
30827: PUSH
30828: LD_VAR 0 4
30832: PUSH
30833: LD_VAR 0 7
30837: ARRAY
30838: PPUSH
30839: CALL_OW 257
30843: PUSH
30844: LD_INT 1
30846: EQUAL
30847: AND
30848: PUSH
30849: LD_VAR 0 4
30853: PUSH
30854: LD_VAR 0 7
30858: ARRAY
30859: PPUSH
30860: CALL_OW 256
30864: PUSH
30865: LD_INT 800
30867: LESS
30868: AND
30869: PUSH
30870: LD_VAR 0 4
30874: PUSH
30875: LD_VAR 0 7
30879: ARRAY
30880: PPUSH
30881: CALL_OW 318
30885: NOT
30886: AND
30887: IFFALSE 30904
// ComCrawl ( group [ i ] ) ;
30889: LD_VAR 0 4
30893: PUSH
30894: LD_VAR 0 7
30898: ARRAY
30899: PPUSH
30900: CALL_OW 137
// if f_mines then
30904: LD_VAR 0 21
30908: IFFALSE 31151
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30910: LD_VAR 0 14
30914: PUSH
30915: LD_INT 1
30917: ARRAY
30918: PPUSH
30919: CALL_OW 247
30923: PUSH
30924: LD_INT 3
30926: EQUAL
30927: PUSH
30928: LD_VAR 0 14
30932: PUSH
30933: LD_INT 1
30935: ARRAY
30936: PUSH
30937: LD_VAR 0 27
30941: IN
30942: NOT
30943: AND
30944: IFFALSE 31151
// begin x := GetX ( tmp [ 1 ] ) ;
30946: LD_ADDR_VAR 0 10
30950: PUSH
30951: LD_VAR 0 14
30955: PUSH
30956: LD_INT 1
30958: ARRAY
30959: PPUSH
30960: CALL_OW 250
30964: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30965: LD_ADDR_VAR 0 11
30969: PUSH
30970: LD_VAR 0 14
30974: PUSH
30975: LD_INT 1
30977: ARRAY
30978: PPUSH
30979: CALL_OW 251
30983: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30984: LD_ADDR_VAR 0 12
30988: PUSH
30989: LD_VAR 0 4
30993: PUSH
30994: LD_VAR 0 7
30998: ARRAY
30999: PPUSH
31000: CALL 28384 0 1
31004: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
31005: LD_VAR 0 4
31009: PUSH
31010: LD_VAR 0 7
31014: ARRAY
31015: PPUSH
31016: LD_VAR 0 10
31020: PPUSH
31021: LD_VAR 0 11
31025: PPUSH
31026: LD_VAR 0 14
31030: PUSH
31031: LD_INT 1
31033: ARRAY
31034: PPUSH
31035: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
31039: LD_VAR 0 4
31043: PUSH
31044: LD_VAR 0 7
31048: ARRAY
31049: PPUSH
31050: LD_VAR 0 10
31054: PPUSH
31055: LD_VAR 0 12
31059: PPUSH
31060: LD_INT 7
31062: PPUSH
31063: CALL_OW 272
31067: PPUSH
31068: LD_VAR 0 11
31072: PPUSH
31073: LD_VAR 0 12
31077: PPUSH
31078: LD_INT 7
31080: PPUSH
31081: CALL_OW 273
31085: PPUSH
31086: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
31090: LD_VAR 0 4
31094: PUSH
31095: LD_VAR 0 7
31099: ARRAY
31100: PPUSH
31101: LD_INT 71
31103: PPUSH
31104: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
31108: LD_ADDR_VAR 0 27
31112: PUSH
31113: LD_VAR 0 27
31117: PPUSH
31118: LD_VAR 0 27
31122: PUSH
31123: LD_INT 1
31125: PLUS
31126: PPUSH
31127: LD_VAR 0 14
31131: PUSH
31132: LD_INT 1
31134: ARRAY
31135: PPUSH
31136: CALL_OW 1
31140: ST_TO_ADDR
// attacking := true ;
31141: LD_ADDR_VAR 0 29
31145: PUSH
31146: LD_INT 1
31148: ST_TO_ADDR
// continue ;
31149: GO 30046
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
31151: LD_VAR 0 4
31155: PUSH
31156: LD_VAR 0 7
31160: ARRAY
31161: PPUSH
31162: CALL_OW 257
31166: PUSH
31167: LD_INT 17
31169: EQUAL
31170: PUSH
31171: LD_VAR 0 4
31175: PUSH
31176: LD_VAR 0 7
31180: ARRAY
31181: PPUSH
31182: CALL_OW 110
31186: PUSH
31187: LD_INT 71
31189: EQUAL
31190: NOT
31191: AND
31192: IFFALSE 31338
// begin attacking := false ;
31194: LD_ADDR_VAR 0 29
31198: PUSH
31199: LD_INT 0
31201: ST_TO_ADDR
// k := 5 ;
31202: LD_ADDR_VAR 0 9
31206: PUSH
31207: LD_INT 5
31209: ST_TO_ADDR
// if tmp < k then
31210: LD_VAR 0 14
31214: PUSH
31215: LD_VAR 0 9
31219: LESS
31220: IFFALSE 31232
// k := tmp ;
31222: LD_ADDR_VAR 0 9
31226: PUSH
31227: LD_VAR 0 14
31231: ST_TO_ADDR
// for j = 1 to k do
31232: LD_ADDR_VAR 0 8
31236: PUSH
31237: DOUBLE
31238: LD_INT 1
31240: DEC
31241: ST_TO_ADDR
31242: LD_VAR 0 9
31246: PUSH
31247: FOR_TO
31248: IFFALSE 31336
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
31250: LD_VAR 0 14
31254: PUSH
31255: LD_VAR 0 8
31259: ARRAY
31260: PUSH
31261: LD_VAR 0 14
31265: PPUSH
31266: LD_INT 58
31268: PUSH
31269: EMPTY
31270: LIST
31271: PPUSH
31272: CALL_OW 72
31276: IN
31277: NOT
31278: IFFALSE 31334
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31280: LD_VAR 0 4
31284: PUSH
31285: LD_VAR 0 7
31289: ARRAY
31290: PPUSH
31291: LD_VAR 0 14
31295: PUSH
31296: LD_VAR 0 8
31300: ARRAY
31301: PPUSH
31302: CALL_OW 115
// attacking := true ;
31306: LD_ADDR_VAR 0 29
31310: PUSH
31311: LD_INT 1
31313: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
31314: LD_VAR 0 4
31318: PUSH
31319: LD_VAR 0 7
31323: ARRAY
31324: PPUSH
31325: LD_INT 71
31327: PPUSH
31328: CALL_OW 109
// continue ;
31332: GO 31247
// end ; end ;
31334: GO 31247
31336: POP
31337: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31338: LD_VAR 0 4
31342: PUSH
31343: LD_VAR 0 7
31347: ARRAY
31348: PPUSH
31349: CALL_OW 257
31353: PUSH
31354: LD_INT 8
31356: EQUAL
31357: PUSH
31358: LD_VAR 0 4
31362: PUSH
31363: LD_VAR 0 7
31367: ARRAY
31368: PPUSH
31369: CALL_OW 264
31373: PUSH
31374: LD_INT 28
31376: PUSH
31377: LD_INT 45
31379: PUSH
31380: LD_INT 7
31382: PUSH
31383: LD_INT 47
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: IN
31392: OR
31393: IFFALSE 31623
// begin attacking := false ;
31395: LD_ADDR_VAR 0 29
31399: PUSH
31400: LD_INT 0
31402: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31403: LD_VAR 0 14
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: CALL_OW 266
31416: PUSH
31417: LD_INT 32
31419: PUSH
31420: LD_INT 31
31422: PUSH
31423: LD_INT 33
31425: PUSH
31426: LD_INT 4
31428: PUSH
31429: LD_INT 5
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: IN
31439: IFFALSE 31623
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_VAR 0 14
31450: PUSH
31451: LD_INT 1
31453: ARRAY
31454: PPUSH
31455: CALL_OW 266
31459: PPUSH
31460: LD_VAR 0 14
31464: PUSH
31465: LD_INT 1
31467: ARRAY
31468: PPUSH
31469: CALL_OW 250
31473: PPUSH
31474: LD_VAR 0 14
31478: PUSH
31479: LD_INT 1
31481: ARRAY
31482: PPUSH
31483: CALL_OW 251
31487: PPUSH
31488: LD_VAR 0 14
31492: PUSH
31493: LD_INT 1
31495: ARRAY
31496: PPUSH
31497: CALL_OW 254
31501: PPUSH
31502: LD_VAR 0 14
31506: PUSH
31507: LD_INT 1
31509: ARRAY
31510: PPUSH
31511: CALL_OW 248
31515: PPUSH
31516: LD_INT 0
31518: PPUSH
31519: CALL 9760 0 6
31523: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31524: LD_ADDR_VAR 0 8
31528: PUSH
31529: LD_VAR 0 4
31533: PUSH
31534: LD_VAR 0 7
31538: ARRAY
31539: PPUSH
31540: LD_VAR 0 9
31544: PPUSH
31545: CALL 28447 0 2
31549: ST_TO_ADDR
// if j then
31550: LD_VAR 0 8
31554: IFFALSE 31623
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31556: LD_VAR 0 8
31560: PUSH
31561: LD_INT 1
31563: ARRAY
31564: PPUSH
31565: LD_VAR 0 8
31569: PUSH
31570: LD_INT 2
31572: ARRAY
31573: PPUSH
31574: CALL_OW 488
31578: IFFALSE 31623
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31580: LD_VAR 0 4
31584: PUSH
31585: LD_VAR 0 7
31589: ARRAY
31590: PPUSH
31591: LD_VAR 0 8
31595: PUSH
31596: LD_INT 1
31598: ARRAY
31599: PPUSH
31600: LD_VAR 0 8
31604: PUSH
31605: LD_INT 2
31607: ARRAY
31608: PPUSH
31609: CALL_OW 116
// attacking := true ;
31613: LD_ADDR_VAR 0 29
31617: PUSH
31618: LD_INT 1
31620: ST_TO_ADDR
// continue ;
31621: GO 30046
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31623: LD_VAR 0 4
31627: PUSH
31628: LD_VAR 0 7
31632: ARRAY
31633: PPUSH
31634: CALL_OW 265
31638: PUSH
31639: LD_INT 11
31641: EQUAL
31642: IFFALSE 31920
// begin k := 10 ;
31644: LD_ADDR_VAR 0 9
31648: PUSH
31649: LD_INT 10
31651: ST_TO_ADDR
// x := 0 ;
31652: LD_ADDR_VAR 0 10
31656: PUSH
31657: LD_INT 0
31659: ST_TO_ADDR
// if tmp < k then
31660: LD_VAR 0 14
31664: PUSH
31665: LD_VAR 0 9
31669: LESS
31670: IFFALSE 31682
// k := tmp ;
31672: LD_ADDR_VAR 0 9
31676: PUSH
31677: LD_VAR 0 14
31681: ST_TO_ADDR
// for j = k downto 1 do
31682: LD_ADDR_VAR 0 8
31686: PUSH
31687: DOUBLE
31688: LD_VAR 0 9
31692: INC
31693: ST_TO_ADDR
31694: LD_INT 1
31696: PUSH
31697: FOR_DOWNTO
31698: IFFALSE 31773
// begin if GetType ( tmp [ j ] ) = unit_human then
31700: LD_VAR 0 14
31704: PUSH
31705: LD_VAR 0 8
31709: ARRAY
31710: PPUSH
31711: CALL_OW 247
31715: PUSH
31716: LD_INT 1
31718: EQUAL
31719: IFFALSE 31771
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31721: LD_VAR 0 4
31725: PUSH
31726: LD_VAR 0 7
31730: ARRAY
31731: PPUSH
31732: LD_VAR 0 14
31736: PUSH
31737: LD_VAR 0 8
31741: ARRAY
31742: PPUSH
31743: CALL 28718 0 2
// x := tmp [ j ] ;
31747: LD_ADDR_VAR 0 10
31751: PUSH
31752: LD_VAR 0 14
31756: PUSH
31757: LD_VAR 0 8
31761: ARRAY
31762: ST_TO_ADDR
// attacking := true ;
31763: LD_ADDR_VAR 0 29
31767: PUSH
31768: LD_INT 1
31770: ST_TO_ADDR
// end ; end ;
31771: GO 31697
31773: POP
31774: POP
// if not x then
31775: LD_VAR 0 10
31779: NOT
31780: IFFALSE 31920
// begin attacking := true ;
31782: LD_ADDR_VAR 0 29
31786: PUSH
31787: LD_INT 1
31789: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31790: LD_VAR 0 4
31794: PUSH
31795: LD_VAR 0 7
31799: ARRAY
31800: PPUSH
31801: CALL_OW 250
31805: PPUSH
31806: LD_VAR 0 4
31810: PUSH
31811: LD_VAR 0 7
31815: ARRAY
31816: PPUSH
31817: CALL_OW 251
31821: PPUSH
31822: CALL 1992 0 2
31826: PUSH
31827: LD_INT 2
31829: ARRAY
31830: PUSH
31831: LD_VAR 0 14
31835: PUSH
31836: LD_INT 1
31838: ARRAY
31839: PPUSH
31840: CALL_OW 250
31844: PPUSH
31845: LD_VAR 0 14
31849: PUSH
31850: LD_INT 1
31852: ARRAY
31853: PPUSH
31854: CALL_OW 251
31858: PPUSH
31859: CALL 1992 0 2
31863: PUSH
31864: LD_INT 2
31866: ARRAY
31867: EQUAL
31868: IFFALSE 31896
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31870: LD_VAR 0 4
31874: PUSH
31875: LD_VAR 0 7
31879: ARRAY
31880: PPUSH
31881: LD_VAR 0 14
31885: PUSH
31886: LD_INT 1
31888: ARRAY
31889: PPUSH
31890: CALL 28718 0 2
31894: GO 31920
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31896: LD_VAR 0 4
31900: PUSH
31901: LD_VAR 0 7
31905: ARRAY
31906: PPUSH
31907: LD_VAR 0 14
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31920: LD_VAR 0 4
31924: PUSH
31925: LD_VAR 0 7
31929: ARRAY
31930: PPUSH
31931: CALL_OW 264
31935: PUSH
31936: LD_INT 29
31938: EQUAL
31939: IFFALSE 32305
// begin if WantsToAttack ( group [ i ] ) in bombed then
31941: LD_VAR 0 4
31945: PUSH
31946: LD_VAR 0 7
31950: ARRAY
31951: PPUSH
31952: CALL_OW 319
31956: PUSH
31957: LD_VAR 0 28
31961: IN
31962: IFFALSE 31966
// continue ;
31964: GO 30046
// k := 8 ;
31966: LD_ADDR_VAR 0 9
31970: PUSH
31971: LD_INT 8
31973: ST_TO_ADDR
// x := 0 ;
31974: LD_ADDR_VAR 0 10
31978: PUSH
31979: LD_INT 0
31981: ST_TO_ADDR
// if tmp < k then
31982: LD_VAR 0 14
31986: PUSH
31987: LD_VAR 0 9
31991: LESS
31992: IFFALSE 32004
// k := tmp ;
31994: LD_ADDR_VAR 0 9
31998: PUSH
31999: LD_VAR 0 14
32003: ST_TO_ADDR
// for j = 1 to k do
32004: LD_ADDR_VAR 0 8
32008: PUSH
32009: DOUBLE
32010: LD_INT 1
32012: DEC
32013: ST_TO_ADDR
32014: LD_VAR 0 9
32018: PUSH
32019: FOR_TO
32020: IFFALSE 32152
// begin if GetType ( tmp [ j ] ) = unit_building then
32022: LD_VAR 0 14
32026: PUSH
32027: LD_VAR 0 8
32031: ARRAY
32032: PPUSH
32033: CALL_OW 247
32037: PUSH
32038: LD_INT 3
32040: EQUAL
32041: IFFALSE 32150
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
32043: LD_VAR 0 14
32047: PUSH
32048: LD_VAR 0 8
32052: ARRAY
32053: PUSH
32054: LD_VAR 0 28
32058: IN
32059: NOT
32060: PUSH
32061: LD_VAR 0 14
32065: PUSH
32066: LD_VAR 0 8
32070: ARRAY
32071: PPUSH
32072: CALL_OW 313
32076: AND
32077: IFFALSE 32150
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32079: LD_VAR 0 4
32083: PUSH
32084: LD_VAR 0 7
32088: ARRAY
32089: PPUSH
32090: LD_VAR 0 14
32094: PUSH
32095: LD_VAR 0 8
32099: ARRAY
32100: PPUSH
32101: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
32105: LD_ADDR_VAR 0 28
32109: PUSH
32110: LD_VAR 0 28
32114: PPUSH
32115: LD_VAR 0 28
32119: PUSH
32120: LD_INT 1
32122: PLUS
32123: PPUSH
32124: LD_VAR 0 14
32128: PUSH
32129: LD_VAR 0 8
32133: ARRAY
32134: PPUSH
32135: CALL_OW 1
32139: ST_TO_ADDR
// attacking := true ;
32140: LD_ADDR_VAR 0 29
32144: PUSH
32145: LD_INT 1
32147: ST_TO_ADDR
// break ;
32148: GO 32152
// end ; end ;
32150: GO 32019
32152: POP
32153: POP
// if not attacking and f_attack_depot then
32154: LD_VAR 0 29
32158: NOT
32159: PUSH
32160: LD_VAR 0 25
32164: AND
32165: IFFALSE 32260
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32167: LD_ADDR_VAR 0 13
32171: PUSH
32172: LD_VAR 0 14
32176: PPUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 30
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 30
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: PPUSH
32205: CALL_OW 72
32209: ST_TO_ADDR
// if z then
32210: LD_VAR 0 13
32214: IFFALSE 32260
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
32216: LD_VAR 0 4
32220: PUSH
32221: LD_VAR 0 7
32225: ARRAY
32226: PPUSH
32227: LD_VAR 0 13
32231: PPUSH
32232: LD_VAR 0 4
32236: PUSH
32237: LD_VAR 0 7
32241: ARRAY
32242: PPUSH
32243: CALL_OW 74
32247: PPUSH
32248: CALL_OW 115
// attacking := true ;
32252: LD_ADDR_VAR 0 29
32256: PUSH
32257: LD_INT 1
32259: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
32260: LD_VAR 0 4
32264: PUSH
32265: LD_VAR 0 7
32269: ARRAY
32270: PPUSH
32271: CALL_OW 256
32275: PUSH
32276: LD_INT 500
32278: LESS
32279: IFFALSE 32305
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32281: LD_VAR 0 4
32285: PUSH
32286: LD_VAR 0 7
32290: ARRAY
32291: PPUSH
32292: LD_VAR 0 14
32296: PUSH
32297: LD_INT 1
32299: ARRAY
32300: PPUSH
32301: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32305: LD_VAR 0 4
32309: PUSH
32310: LD_VAR 0 7
32314: ARRAY
32315: PPUSH
32316: CALL_OW 256
32320: PUSH
32321: LD_INT 250
32323: LESS
32324: PUSH
32325: LD_VAR 0 4
32329: PUSH
32330: LD_VAR 0 7
32334: ARRAY
32335: PUSH
32336: LD_INT 21
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 23
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PPUSH
32360: CALL_OW 69
32364: IN
32365: AND
32366: IFFALSE 32491
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32368: LD_ADDR_VAR 0 9
32372: PUSH
32373: LD_OWVAR 3
32377: PUSH
32378: LD_VAR 0 4
32382: PUSH
32383: LD_VAR 0 7
32387: ARRAY
32388: DIFF
32389: PPUSH
32390: LD_VAR 0 4
32394: PUSH
32395: LD_VAR 0 7
32399: ARRAY
32400: PPUSH
32401: CALL_OW 74
32405: ST_TO_ADDR
// if not k then
32406: LD_VAR 0 9
32410: NOT
32411: IFFALSE 32415
// continue ;
32413: GO 30046
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32415: LD_VAR 0 9
32419: PUSH
32420: LD_INT 81
32422: PUSH
32423: LD_VAR 0 4
32427: PUSH
32428: LD_VAR 0 7
32432: ARRAY
32433: PPUSH
32434: CALL_OW 255
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PPUSH
32443: CALL_OW 69
32447: IN
32448: PUSH
32449: LD_VAR 0 9
32453: PPUSH
32454: LD_VAR 0 4
32458: PUSH
32459: LD_VAR 0 7
32463: ARRAY
32464: PPUSH
32465: CALL_OW 296
32469: PUSH
32470: LD_INT 5
32472: LESS
32473: AND
32474: IFFALSE 32491
// ComAutodestruct ( group [ i ] ) ;
32476: LD_VAR 0 4
32480: PUSH
32481: LD_VAR 0 7
32485: ARRAY
32486: PPUSH
32487: CALL 28616 0 1
// end ; if f_attack_depot then
32491: LD_VAR 0 25
32495: IFFALSE 32607
// begin k := 6 ;
32497: LD_ADDR_VAR 0 9
32501: PUSH
32502: LD_INT 6
32504: ST_TO_ADDR
// if tmp < k then
32505: LD_VAR 0 14
32509: PUSH
32510: LD_VAR 0 9
32514: LESS
32515: IFFALSE 32527
// k := tmp ;
32517: LD_ADDR_VAR 0 9
32521: PUSH
32522: LD_VAR 0 14
32526: ST_TO_ADDR
// for j = 1 to k do
32527: LD_ADDR_VAR 0 8
32531: PUSH
32532: DOUBLE
32533: LD_INT 1
32535: DEC
32536: ST_TO_ADDR
32537: LD_VAR 0 9
32541: PUSH
32542: FOR_TO
32543: IFFALSE 32605
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32545: LD_VAR 0 8
32549: PPUSH
32550: CALL_OW 266
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: IN
32565: IFFALSE 32603
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32567: LD_VAR 0 4
32571: PUSH
32572: LD_VAR 0 7
32576: ARRAY
32577: PPUSH
32578: LD_VAR 0 14
32582: PUSH
32583: LD_VAR 0 8
32587: ARRAY
32588: PPUSH
32589: CALL_OW 115
// attacking := true ;
32593: LD_ADDR_VAR 0 29
32597: PUSH
32598: LD_INT 1
32600: ST_TO_ADDR
// break ;
32601: GO 32605
// end ;
32603: GO 32542
32605: POP
32606: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32607: LD_VAR 0 4
32611: PUSH
32612: LD_VAR 0 7
32616: ARRAY
32617: PPUSH
32618: CALL_OW 302
32622: PUSH
32623: LD_VAR 0 29
32627: NOT
32628: AND
32629: IFFALSE 32897
// begin if GetTag ( group [ i ] ) = 71 then
32631: LD_VAR 0 4
32635: PUSH
32636: LD_VAR 0 7
32640: ARRAY
32641: PPUSH
32642: CALL_OW 110
32646: PUSH
32647: LD_INT 71
32649: EQUAL
32650: IFFALSE 32691
// begin if HasTask ( group [ i ] ) then
32652: LD_VAR 0 4
32656: PUSH
32657: LD_VAR 0 7
32661: ARRAY
32662: PPUSH
32663: CALL_OW 314
32667: IFFALSE 32673
// continue else
32669: GO 30046
32671: GO 32691
// SetTag ( group [ i ] , 0 ) ;
32673: LD_VAR 0 4
32677: PUSH
32678: LD_VAR 0 7
32682: ARRAY
32683: PPUSH
32684: LD_INT 0
32686: PPUSH
32687: CALL_OW 109
// end ; k := 8 ;
32691: LD_ADDR_VAR 0 9
32695: PUSH
32696: LD_INT 8
32698: ST_TO_ADDR
// x := 0 ;
32699: LD_ADDR_VAR 0 10
32703: PUSH
32704: LD_INT 0
32706: ST_TO_ADDR
// if tmp < k then
32707: LD_VAR 0 14
32711: PUSH
32712: LD_VAR 0 9
32716: LESS
32717: IFFALSE 32729
// k := tmp ;
32719: LD_ADDR_VAR 0 9
32723: PUSH
32724: LD_VAR 0 14
32728: ST_TO_ADDR
// for j = 1 to k do
32729: LD_ADDR_VAR 0 8
32733: PUSH
32734: DOUBLE
32735: LD_INT 1
32737: DEC
32738: ST_TO_ADDR
32739: LD_VAR 0 9
32743: PUSH
32744: FOR_TO
32745: IFFALSE 32843
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32747: LD_VAR 0 14
32751: PUSH
32752: LD_VAR 0 8
32756: ARRAY
32757: PPUSH
32758: CALL_OW 247
32762: PUSH
32763: LD_INT 1
32765: EQUAL
32766: PUSH
32767: LD_VAR 0 14
32771: PUSH
32772: LD_VAR 0 8
32776: ARRAY
32777: PPUSH
32778: CALL_OW 256
32782: PUSH
32783: LD_INT 250
32785: LESS
32786: PUSH
32787: LD_VAR 0 20
32791: AND
32792: PUSH
32793: LD_VAR 0 20
32797: NOT
32798: PUSH
32799: LD_VAR 0 14
32803: PUSH
32804: LD_VAR 0 8
32808: ARRAY
32809: PPUSH
32810: CALL_OW 256
32814: PUSH
32815: LD_INT 250
32817: GREATEREQUAL
32818: AND
32819: OR
32820: AND
32821: IFFALSE 32841
// begin x := tmp [ j ] ;
32823: LD_ADDR_VAR 0 10
32827: PUSH
32828: LD_VAR 0 14
32832: PUSH
32833: LD_VAR 0 8
32837: ARRAY
32838: ST_TO_ADDR
// break ;
32839: GO 32843
// end ;
32841: GO 32744
32843: POP
32844: POP
// if x then
32845: LD_VAR 0 10
32849: IFFALSE 32873
// ComAttackUnit ( group [ i ] , x ) else
32851: LD_VAR 0 4
32855: PUSH
32856: LD_VAR 0 7
32860: ARRAY
32861: PPUSH
32862: LD_VAR 0 10
32866: PPUSH
32867: CALL_OW 115
32871: GO 32897
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32873: LD_VAR 0 4
32877: PUSH
32878: LD_VAR 0 7
32882: ARRAY
32883: PPUSH
32884: LD_VAR 0 14
32888: PUSH
32889: LD_INT 1
32891: ARRAY
32892: PPUSH
32893: CALL_OW 115
// end ; end ; end ;
32897: GO 30046
32899: POP
32900: POP
// wait ( 0 0$1 ) ;
32901: LD_INT 35
32903: PPUSH
32904: CALL_OW 67
// until group = [ ] ;
32908: LD_VAR 0 4
32912: PUSH
32913: EMPTY
32914: EQUAL
32915: IFFALSE 30031
// end ;
32917: LD_VAR 0 2
32921: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32922: LD_INT 0
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
// if not defenders then
32931: LD_VAR 0 2
32935: NOT
32936: IFFALSE 32940
// exit ;
32938: GO 33471
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32940: LD_ADDR_VAR 0 9
32944: PUSH
32945: LD_EXP 48
32949: PUSH
32950: LD_VAR 0 1
32954: ARRAY
32955: PPUSH
32956: LD_INT 25
32958: PUSH
32959: LD_INT 3
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PPUSH
32966: CALL_OW 72
32970: ST_TO_ADDR
// if mechs then
32971: LD_VAR 0 9
32975: IFFALSE 33074
// for i in defenders do
32977: LD_ADDR_VAR 0 5
32981: PUSH
32982: LD_VAR 0 2
32986: PUSH
32987: FOR_IN
32988: IFFALSE 33072
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL_OW 263
32999: PUSH
33000: LD_INT 1
33002: EQUAL
33003: PUSH
33004: LD_VAR 0 5
33008: PPUSH
33009: CALL_OW 311
33013: NOT
33014: AND
33015: IFFALSE 33070
// begin un := mechs [ 1 ] ;
33017: LD_ADDR_VAR 0 7
33021: PUSH
33022: LD_VAR 0 9
33026: PUSH
33027: LD_INT 1
33029: ARRAY
33030: ST_TO_ADDR
// ComExitBuilding ( un ) ;
33031: LD_VAR 0 7
33035: PPUSH
33036: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
33040: LD_VAR 0 7
33044: PPUSH
33045: LD_VAR 0 5
33049: PPUSH
33050: CALL_OW 180
// mechs := mechs diff un ;
33054: LD_ADDR_VAR 0 9
33058: PUSH
33059: LD_VAR 0 9
33063: PUSH
33064: LD_VAR 0 7
33068: DIFF
33069: ST_TO_ADDR
// end ;
33070: GO 32987
33072: POP
33073: POP
// repeat wait ( 0 0$1 ) ;
33074: LD_INT 35
33076: PPUSH
33077: CALL_OW 67
// enemy := mc_scan [ base ] ;
33081: LD_ADDR_VAR 0 3
33085: PUSH
33086: LD_EXP 67
33090: PUSH
33091: LD_VAR 0 1
33095: ARRAY
33096: ST_TO_ADDR
// for i in defenders do
33097: LD_ADDR_VAR 0 5
33101: PUSH
33102: LD_VAR 0 2
33106: PUSH
33107: FOR_IN
33108: IFFALSE 33261
// begin e := NearestUnitToUnit ( enemy , i ) ;
33110: LD_ADDR_VAR 0 10
33114: PUSH
33115: LD_VAR 0 3
33119: PPUSH
33120: LD_VAR 0 5
33124: PPUSH
33125: CALL_OW 74
33129: ST_TO_ADDR
// if GetLives ( i ) > 600 and GetDistUnits ( i , e ) < 30 then
33130: LD_VAR 0 5
33134: PPUSH
33135: CALL_OW 256
33139: PUSH
33140: LD_INT 600
33142: GREATER
33143: PUSH
33144: LD_VAR 0 5
33148: PPUSH
33149: LD_VAR 0 10
33153: PPUSH
33154: CALL_OW 296
33158: PUSH
33159: LD_INT 30
33161: LESS
33162: AND
33163: IFFALSE 33181
// ComAttackUnit ( i , e ) else
33165: LD_VAR 0 5
33169: PPUSH
33170: LD_VAR 0 10
33174: PPUSH
33175: CALL_OW 115
33179: GO 33259
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 600 ) and not IsInArea ( i , mc_parking [ base ] ) then
33181: LD_VAR 0 5
33185: PPUSH
33186: LD_VAR 0 10
33190: PPUSH
33191: CALL_OW 296
33195: PUSH
33196: LD_INT 30
33198: GREATEREQUAL
33199: PUSH
33200: LD_VAR 0 5
33204: PPUSH
33205: CALL_OW 256
33209: PUSH
33210: LD_INT 600
33212: LESSEQUAL
33213: OR
33214: PUSH
33215: LD_VAR 0 5
33219: PPUSH
33220: LD_EXP 68
33224: PUSH
33225: LD_VAR 0 1
33229: ARRAY
33230: PPUSH
33231: CALL_OW 308
33235: NOT
33236: AND
33237: IFFALSE 33259
// ComMoveToArea ( i , mc_parking [ base ] ) ;
33239: LD_VAR 0 5
33243: PPUSH
33244: LD_EXP 68
33248: PUSH
33249: LD_VAR 0 1
33253: ARRAY
33254: PPUSH
33255: CALL_OW 113
// end ;
33259: GO 33107
33261: POP
33262: POP
// until not enemy or not defenders ;
33263: LD_VAR 0 3
33267: NOT
33268: PUSH
33269: LD_VAR 0 2
33273: NOT
33274: OR
33275: IFFALSE 33074
// if not enemy and defenders then
33277: LD_VAR 0 3
33281: NOT
33282: PUSH
33283: LD_VAR 0 2
33287: AND
33288: IFFALSE 33446
// repeat wait ( 0 0$1 ) ;
33290: LD_INT 35
33292: PPUSH
33293: CALL_OW 67
// for i in defenders do
33297: LD_ADDR_VAR 0 5
33301: PUSH
33302: LD_VAR 0 2
33306: PUSH
33307: FOR_IN
33308: IFFALSE 33397
// begin if not IsInArea ( i , mc_parking [ base ] ) then
33310: LD_VAR 0 5
33314: PPUSH
33315: LD_EXP 68
33319: PUSH
33320: LD_VAR 0 1
33324: ARRAY
33325: PPUSH
33326: CALL_OW 308
33330: NOT
33331: IFFALSE 33355
// ComMoveToArea ( i , mc_parking [ base ] ) else
33333: LD_VAR 0 5
33337: PPUSH
33338: LD_EXP 68
33342: PUSH
33343: LD_VAR 0 1
33347: ARRAY
33348: PPUSH
33349: CALL_OW 113
33353: GO 33395
// if GetControl ( i ) = control_manual then
33355: LD_VAR 0 5
33359: PPUSH
33360: CALL_OW 263
33364: PUSH
33365: LD_INT 1
33367: EQUAL
33368: IFFALSE 33395
// if IsDrivenBy ( i ) then
33370: LD_VAR 0 5
33374: PPUSH
33375: CALL_OW 311
33379: IFFALSE 33395
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33381: LD_VAR 0 5
33385: PPUSH
33386: CALL_OW 311
33390: PPUSH
33391: CALL_OW 121
// end ;
33395: GO 33307
33397: POP
33398: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33399: LD_VAR 0 2
33403: PPUSH
33404: LD_INT 95
33406: PUSH
33407: LD_EXP 68
33411: PUSH
33412: LD_VAR 0 1
33416: ARRAY
33417: PUSH
33418: EMPTY
33419: LIST
33420: LIST
33421: PPUSH
33422: CALL_OW 72
33426: PUSH
33427: LD_VAR 0 2
33431: EQUAL
33432: PUSH
33433: LD_EXP 67
33437: PUSH
33438: LD_VAR 0 1
33442: ARRAY
33443: OR
33444: IFFALSE 33290
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33446: LD_ADDR_EXP 66
33450: PUSH
33451: LD_EXP 66
33455: PPUSH
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_VAR 0 2
33465: PPUSH
33466: CALL_OW 1
33470: ST_TO_ADDR
// end ;
33471: LD_VAR 0 4
33475: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33476: LD_INT 0
33478: PPUSH
33479: PPUSH
33480: PPUSH
33481: PPUSH
// if not base_units then
33482: LD_VAR 0 1
33486: NOT
33487: IFFALSE 33491
// exit ;
33489: GO 33578
// result := false ;
33491: LD_ADDR_VAR 0 2
33495: PUSH
33496: LD_INT 0
33498: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33499: LD_ADDR_VAR 0 5
33503: PUSH
33504: LD_VAR 0 1
33508: PPUSH
33509: LD_INT 21
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 72
33523: ST_TO_ADDR
// if not tmp then
33524: LD_VAR 0 5
33528: NOT
33529: IFFALSE 33533
// exit ;
33531: GO 33578
// for i in tmp do
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_VAR 0 5
33542: PUSH
33543: FOR_IN
33544: IFFALSE 33576
// begin result := EnemyInRange ( i , 18 ) ;
33546: LD_ADDR_VAR 0 2
33550: PUSH
33551: LD_VAR 0 3
33555: PPUSH
33556: LD_INT 18
33558: PPUSH
33559: CALL 28299 0 2
33563: ST_TO_ADDR
// if result then
33564: LD_VAR 0 2
33568: IFFALSE 33574
// exit ;
33570: POP
33571: POP
33572: GO 33578
// end ;
33574: GO 33543
33576: POP
33577: POP
// end ;
33578: LD_VAR 0 2
33582: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33583: LD_INT 0
33585: PPUSH
33586: PPUSH
33587: PPUSH
33588: PPUSH
// result := false ;
33589: LD_ADDR_VAR 0 2
33593: PUSH
33594: LD_INT 0
33596: ST_TO_ADDR
// side := GetSide ( unit ) ;
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_VAR 0 1
33606: PPUSH
33607: CALL_OW 255
33611: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33612: LD_ADDR_VAR 0 4
33616: PUSH
33617: LD_VAR 0 1
33621: PPUSH
33622: CALL_OW 248
33626: ST_TO_ADDR
// case nat of 1 :
33627: LD_VAR 0 4
33631: PUSH
33632: LD_INT 1
33634: DOUBLE
33635: EQUAL
33636: IFTRUE 33640
33638: GO 33651
33640: POP
// tech := tech_lassight ; 2 :
33641: LD_ADDR_VAR 0 5
33645: PUSH
33646: LD_INT 12
33648: ST_TO_ADDR
33649: GO 33690
33651: LD_INT 2
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33670
33659: POP
// tech := tech_mortar ; 3 :
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_INT 41
33667: ST_TO_ADDR
33668: GO 33690
33670: LD_INT 3
33672: DOUBLE
33673: EQUAL
33674: IFTRUE 33678
33676: GO 33689
33678: POP
// tech := tech_bazooka ; end ;
33679: LD_ADDR_VAR 0 5
33683: PUSH
33684: LD_INT 44
33686: ST_TO_ADDR
33687: GO 33690
33689: POP
// if Researched ( side , tech ) then
33690: LD_VAR 0 3
33694: PPUSH
33695: LD_VAR 0 5
33699: PPUSH
33700: CALL_OW 325
33704: IFFALSE 33731
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33706: LD_ADDR_VAR 0 2
33710: PUSH
33711: LD_INT 5
33713: PUSH
33714: LD_INT 8
33716: PUSH
33717: LD_INT 9
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: LIST
33724: PUSH
33725: LD_VAR 0 4
33729: ARRAY
33730: ST_TO_ADDR
// end ;
33731: LD_VAR 0 2
33735: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33736: LD_INT 0
33738: PPUSH
33739: PPUSH
33740: PPUSH
// if not mines then
33741: LD_VAR 0 2
33745: NOT
33746: IFFALSE 33750
// exit ;
33748: GO 33873
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33750: LD_ADDR_VAR 0 5
33754: PUSH
33755: LD_INT 81
33757: PUSH
33758: LD_VAR 0 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PPUSH
33767: CALL_OW 69
33771: ST_TO_ADDR
// for i in mines do
33772: LD_ADDR_VAR 0 4
33776: PUSH
33777: LD_VAR 0 2
33781: PUSH
33782: FOR_IN
33783: IFFALSE 33871
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33785: LD_VAR 0 4
33789: PUSH
33790: LD_INT 1
33792: ARRAY
33793: PPUSH
33794: LD_VAR 0 4
33798: PUSH
33799: LD_INT 2
33801: ARRAY
33802: PPUSH
33803: CALL_OW 458
33807: NOT
33808: IFFALSE 33812
// continue ;
33810: GO 33782
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33812: LD_VAR 0 4
33816: PUSH
33817: LD_INT 1
33819: ARRAY
33820: PPUSH
33821: LD_VAR 0 4
33825: PUSH
33826: LD_INT 2
33828: ARRAY
33829: PPUSH
33830: CALL_OW 428
33834: PUSH
33835: LD_VAR 0 5
33839: IN
33840: IFFALSE 33869
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33842: LD_VAR 0 4
33846: PUSH
33847: LD_INT 1
33849: ARRAY
33850: PPUSH
33851: LD_VAR 0 4
33855: PUSH
33856: LD_INT 2
33858: ARRAY
33859: PPUSH
33860: LD_VAR 0 1
33864: PPUSH
33865: CALL_OW 456
// end ;
33869: GO 33782
33871: POP
33872: POP
// end ; end_of_file
33873: LD_VAR 0 3
33877: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33878: LD_INT 0
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33885: LD_ADDR_VAR 0 5
33889: PUSH
33890: LD_INT 6
33892: PUSH
33893: LD_INT 7
33895: PUSH
33896: LD_INT 8
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: LIST
33903: PUSH
33904: LD_OWVAR 67
33908: ARRAY
33909: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33910: LD_INT 69
33912: PUSH
33913: EMPTY
33914: LIST
33915: PPUSH
33916: LD_INT 141
33918: PPUSH
33919: CALL_OW 169
// Wait ( 1 ) ;
33923: LD_INT 1
33925: PPUSH
33926: CALL_OW 67
// uc_side := 2 ;
33930: LD_ADDR_OWVAR 20
33934: PUSH
33935: LD_INT 2
33937: ST_TO_ADDR
// uc_nation := 2 ;
33938: LD_ADDR_OWVAR 21
33942: PUSH
33943: LD_INT 2
33945: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33946: LD_ADDR_OWVAR 37
33950: PUSH
33951: LD_INT 14
33953: ST_TO_ADDR
// vc_engine := engine_siberite ;
33954: LD_ADDR_OWVAR 39
33958: PUSH
33959: LD_INT 3
33961: ST_TO_ADDR
// vc_control := control_manual ;
33962: LD_ADDR_OWVAR 38
33966: PUSH
33967: LD_INT 1
33969: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33970: LD_ADDR_OWVAR 40
33974: PUSH
33975: LD_INT 31
33977: ST_TO_ADDR
// for i = 1 to 3 do
33978: LD_ADDR_VAR 0 2
33982: PUSH
33983: DOUBLE
33984: LD_INT 1
33986: DEC
33987: ST_TO_ADDR
33988: LD_INT 3
33990: PUSH
33991: FOR_TO
33992: IFFALSE 34076
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33994: LD_INT 0
33996: PPUSH
33997: LD_INT 3
33999: PPUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: CALL_OW 380
// un := CreateVehicle ;
34009: LD_ADDR_VAR 0 4
34013: PUSH
34014: CALL_OW 45
34018: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34019: LD_VAR 0 4
34023: PPUSH
34024: LD_INT 0
34026: PPUSH
34027: LD_INT 5
34029: PPUSH
34030: CALL_OW 12
34034: PPUSH
34035: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
34039: LD_VAR 0 4
34043: PPUSH
34044: LD_INT 156
34046: PPUSH
34047: LD_INT 15
34049: PPUSH
34050: LD_INT 6
34052: PPUSH
34053: LD_INT 0
34055: PPUSH
34056: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
34060: CALL_OW 44
34064: PPUSH
34065: LD_VAR 0 4
34069: PPUSH
34070: CALL_OW 52
// end ;
34074: GO 33991
34076: POP
34077: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
34078: LD_ADDR_EXP 37
34082: PUSH
34083: LD_INT 94
34085: PPUSH
34086: LD_STRING dammam
34088: PPUSH
34089: LD_VAR 0 5
34093: PPUSH
34094: LD_INT 10000
34096: PUSH
34097: LD_INT 1000
34099: PUSH
34100: LD_INT 300
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: PPUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 5
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 4
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: PPUSH
34128: CALL 6056 0 5
34132: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
34133: LD_ADDR_EXP 37
34137: PUSH
34138: LD_EXP 37
34142: PUSH
34143: LD_INT 122
34145: PPUSH
34146: LD_STRING 
34148: PPUSH
34149: LD_VAR 0 5
34153: PPUSH
34154: LD_INT 100
34156: PUSH
34157: LD_INT 60
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: PPUSH
34168: LD_INT 1
34170: NEG
34171: PUSH
34172: LD_INT 4
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: PPUSH
34187: CALL 6056 0 5
34191: ADD
34192: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
34193: LD_ADDR_EXP 35
34197: PUSH
34198: LD_INT 45
34200: PPUSH
34201: LD_STRING jeddah
34203: PPUSH
34204: LD_VAR 0 5
34208: PPUSH
34209: LD_INT 700
34211: PUSH
34212: LD_INT 300
34214: PUSH
34215: LD_INT 10
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: PPUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 5
34229: PUSH
34230: LD_INT 3
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: PPUSH
34242: CALL 6056 0 5
34246: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
34247: LD_ADDR_EXP 36
34251: PUSH
34252: LD_INT 7
34254: PPUSH
34255: LD_STRING riyadh
34257: PPUSH
34258: LD_VAR 0 5
34262: PPUSH
34263: LD_INT 500
34265: PUSH
34266: LD_INT 60
34268: PUSH
34269: LD_INT 0
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: PPUSH
34277: LD_INT 4
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: LD_INT 3
34285: PUSH
34286: LD_INT 1
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: PPUSH
34295: CALL 6056 0 5
34299: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
34300: LD_ADDR_EXP 38
34304: PUSH
34305: LD_INT 69
34307: PPUSH
34308: LD_STRING 
34310: PPUSH
34311: LD_VAR 0 5
34315: PPUSH
34316: LD_INT 500
34318: PUSH
34319: LD_INT 50
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: LIST
34329: PPUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 3
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: PPUSH
34349: CALL 6056 0 5
34353: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34354: LD_ADDR_EXP 48
34358: PUSH
34359: LD_EXP 37
34363: PUSH
34364: LD_EXP 35
34368: PUSH
34369: LD_EXP 38
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34379: LD_ADDR_VAR 0 2
34383: PUSH
34384: LD_INT 22
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 30
34396: PUSH
34397: LD_INT 31
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 58
34406: PUSH
34407: EMPTY
34408: LIST
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: LIST
34414: PPUSH
34415: CALL_OW 69
34419: PUSH
34420: FOR_IN
34421: IFFALSE 34546
// begin if GetBase ( i ) then
34423: LD_VAR 0 2
34427: PPUSH
34428: CALL_OW 274
34432: IFFALSE 34436
// continue ;
34434: GO 34420
// d := GetDir ( i ) ;
34436: LD_ADDR_VAR 0 3
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 254
34450: ST_TO_ADDR
// if d < 3 then
34451: LD_VAR 0 3
34455: PUSH
34456: LD_INT 3
34458: LESS
34459: IFFALSE 34477
// d := d + 3 else
34461: LD_ADDR_VAR 0 3
34465: PUSH
34466: LD_VAR 0 3
34470: PUSH
34471: LD_INT 3
34473: PLUS
34474: ST_TO_ADDR
34475: GO 34491
// d := d - 3 ;
34477: LD_ADDR_VAR 0 3
34481: PUSH
34482: LD_VAR 0 3
34486: PUSH
34487: LD_INT 3
34489: MINUS
34490: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34491: LD_INT 0
34493: PPUSH
34494: LD_INT 8
34496: PPUSH
34497: LD_VAR 0 5
34501: PPUSH
34502: CALL_OW 380
// un := CreateHuman ;
34506: LD_ADDR_VAR 0 4
34510: PUSH
34511: CALL_OW 44
34515: ST_TO_ADDR
// SetDir ( un , d ) ;
34516: LD_VAR 0 4
34520: PPUSH
34521: LD_VAR 0 3
34525: PPUSH
34526: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34530: LD_VAR 0 4
34534: PPUSH
34535: LD_VAR 0 2
34539: PPUSH
34540: CALL_OW 52
// end ;
34544: GO 34420
34546: POP
34547: POP
// if Difficulty > 1 then
34548: LD_OWVAR 67
34552: PUSH
34553: LD_INT 1
34555: GREATER
34556: IFFALSE 34927
// begin ar_kamikadze := [ ] ;
34558: LD_ADDR_EXP 41
34562: PUSH
34563: EMPTY
34564: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34565: LD_INT 0
34567: PPUSH
34568: LD_INT 1
34570: PPUSH
34571: LD_VAR 0 5
34575: PPUSH
34576: CALL_OW 380
// un := CreateHuman ;
34580: LD_ADDR_VAR 0 4
34584: PUSH
34585: CALL_OW 44
34589: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34590: LD_VAR 0 4
34594: PPUSH
34595: LD_INT 3
34597: PPUSH
34598: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34602: LD_VAR 0 4
34606: PPUSH
34607: LD_INT 23
34609: PPUSH
34610: LD_INT 44
34612: PPUSH
34613: LD_INT 0
34615: PPUSH
34616: CALL_OW 48
// ComCrawl ( un ) ;
34620: LD_VAR 0 4
34624: PPUSH
34625: CALL_OW 137
// un := CreateHuman ;
34629: LD_ADDR_VAR 0 4
34633: PUSH
34634: CALL_OW 44
34638: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34639: LD_VAR 0 4
34643: PPUSH
34644: LD_INT 3
34646: PPUSH
34647: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34651: LD_VAR 0 4
34655: PPUSH
34656: LD_INT 30
34658: PPUSH
34659: LD_INT 39
34661: PPUSH
34662: LD_INT 0
34664: PPUSH
34665: CALL_OW 48
// ComCrawl ( un ) ;
34669: LD_VAR 0 4
34673: PPUSH
34674: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34678: LD_INT 0
34680: PPUSH
34681: LD_INT 17
34683: PPUSH
34684: LD_VAR 0 5
34688: PPUSH
34689: CALL_OW 380
// un := CreateHuman ;
34693: LD_ADDR_VAR 0 4
34697: PUSH
34698: CALL_OW 44
34702: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34703: LD_VAR 0 4
34707: PPUSH
34708: LD_INT 3
34710: PPUSH
34711: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34715: LD_VAR 0 4
34719: PPUSH
34720: LD_INT 45
34722: PPUSH
34723: LD_INT 86
34725: PPUSH
34726: LD_INT 0
34728: PPUSH
34729: CALL_OW 48
// ComHold ( un ) ;
34733: LD_VAR 0 4
34737: PPUSH
34738: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34742: LD_ADDR_EXP 41
34746: PUSH
34747: LD_EXP 41
34751: PPUSH
34752: LD_EXP 41
34756: PUSH
34757: LD_INT 1
34759: PLUS
34760: PPUSH
34761: LD_VAR 0 4
34765: PPUSH
34766: CALL_OW 1
34770: ST_TO_ADDR
// un := CreateHuman ;
34771: LD_ADDR_VAR 0 4
34775: PUSH
34776: CALL_OW 44
34780: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34781: LD_VAR 0 4
34785: PPUSH
34786: LD_INT 3
34788: PPUSH
34789: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34793: LD_VAR 0 4
34797: PPUSH
34798: LD_INT 60
34800: PPUSH
34801: LD_INT 85
34803: PPUSH
34804: LD_INT 0
34806: PPUSH
34807: CALL_OW 48
// ComHold ( un ) ;
34811: LD_VAR 0 4
34815: PPUSH
34816: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34820: LD_ADDR_EXP 41
34824: PUSH
34825: LD_EXP 41
34829: PPUSH
34830: LD_EXP 41
34834: PUSH
34835: LD_INT 1
34837: PLUS
34838: PPUSH
34839: LD_VAR 0 4
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
// un := CreateHuman ;
34849: LD_ADDR_VAR 0 4
34853: PUSH
34854: CALL_OW 44
34858: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34859: LD_VAR 0 4
34863: PPUSH
34864: LD_INT 3
34866: PPUSH
34867: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34871: LD_VAR 0 4
34875: PPUSH
34876: LD_INT 222
34878: PPUSH
34879: LD_INT 166
34881: PPUSH
34882: LD_INT 0
34884: PPUSH
34885: CALL_OW 48
// ComHold ( un ) ;
34889: LD_VAR 0 4
34893: PPUSH
34894: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34898: LD_ADDR_EXP 41
34902: PUSH
34903: LD_EXP 41
34907: PPUSH
34908: LD_EXP 41
34912: PUSH
34913: LD_INT 1
34915: PLUS
34916: PPUSH
34917: LD_VAR 0 4
34921: PPUSH
34922: CALL_OW 1
34926: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34927: LD_ADDR_EXP 39
34931: PUSH
34932: EMPTY
34933: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34934: LD_INT 1
34936: PPUSH
34937: LD_INT 1
34939: PPUSH
34940: LD_VAR 0 5
34944: PPUSH
34945: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34949: LD_ADDR_OWVAR 33
34953: PUSH
34954: LD_STRING SecondCharsGal
34956: ST_TO_ADDR
// hc_face_number := 4 ;
34957: LD_ADDR_OWVAR 34
34961: PUSH
34962: LD_INT 4
34964: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34965: LD_ADDR_EXP 39
34969: PUSH
34970: LD_EXP 39
34974: PPUSH
34975: LD_INT 1
34977: PPUSH
34978: CALL_OW 44
34982: PPUSH
34983: CALL_OW 1
34987: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34988: LD_INT 2
34990: PPUSH
34991: LD_INT 4
34993: PPUSH
34994: LD_VAR 0 5
34998: PPUSH
34999: CALL_OW 380
// hc_gallery := SecondCharsGal ;
35003: LD_ADDR_OWVAR 33
35007: PUSH
35008: LD_STRING SecondCharsGal
35010: ST_TO_ADDR
// hc_face_number := 15 ;
35011: LD_ADDR_OWVAR 34
35015: PUSH
35016: LD_INT 15
35018: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
35019: LD_ADDR_EXP 39
35023: PUSH
35024: LD_EXP 39
35028: PPUSH
35029: LD_INT 2
35031: PPUSH
35032: CALL_OW 44
35036: PPUSH
35037: CALL_OW 1
35041: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
35042: LD_INT 2
35044: PPUSH
35045: LD_INT 4
35047: PPUSH
35048: LD_VAR 0 5
35052: PPUSH
35053: CALL_OW 380
// hc_gallery :=  ;
35057: LD_ADDR_OWVAR 33
35061: PUSH
35062: LD_STRING 
35064: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
35065: LD_ADDR_EXP 39
35069: PUSH
35070: LD_EXP 39
35074: PPUSH
35075: LD_INT 3
35077: PPUSH
35078: CALL_OW 44
35082: PPUSH
35083: CALL_OW 1
35087: ST_TO_ADDR
// hc_sex := sex_male ;
35088: LD_ADDR_OWVAR 27
35092: PUSH
35093: LD_INT 1
35095: ST_TO_ADDR
// hc_class = 11 ;
35096: LD_ADDR_OWVAR 28
35100: PUSH
35101: LD_INT 11
35103: ST_TO_ADDR
// hc_gallery = sandar ;
35104: LD_ADDR_OWVAR 33
35108: PUSH
35109: LD_STRING sandar
35111: ST_TO_ADDR
// hc_face_number = 33 ;
35112: LD_ADDR_OWVAR 34
35116: PUSH
35117: LD_INT 33
35119: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
35120: LD_ADDR_OWVAR 26
35124: PUSH
35125: LD_STRING Thabit Muhair Saliba
35127: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
35128: LD_ADDR_OWVAR 31
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 0
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: ST_TO_ADDR
// Saliba = CreateHuman ;
35151: LD_ADDR_EXP 43
35155: PUSH
35156: CALL_OW 44
35160: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
35161: LD_EXP 43
35165: PPUSH
35166: LD_INT 7
35168: PPUSH
35169: CALL_OW 52
// if gensher_active then
35173: LD_EXP 18
35177: IFFALSE 35204
// begin Gensher = NewCharacter ( Dietrich ) ;
35179: LD_ADDR_EXP 44
35183: PUSH
35184: LD_STRING Dietrich
35186: PPUSH
35187: CALL_OW 25
35191: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
35192: LD_EXP 44
35196: PPUSH
35197: LD_INT 94
35199: PPUSH
35200: CALL_OW 52
// end ; InitHc ;
35204: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
35208: LD_ADDR_EXP 40
35212: PUSH
35213: EMPTY
35214: ST_TO_ADDR
// for i = 1 to 4 do
35215: LD_ADDR_VAR 0 2
35219: PUSH
35220: DOUBLE
35221: LD_INT 1
35223: DEC
35224: ST_TO_ADDR
35225: LD_INT 4
35227: PUSH
35228: FOR_TO
35229: IFFALSE 35401
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
35231: LD_INT 13
35233: PUSH
35234: LD_INT 14
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: PPUSH
35244: LD_INT 2
35246: PPUSH
35247: CALL_OW 12
35251: ARRAY
35252: PPUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PPUSH
35266: LD_INT 2
35268: PPUSH
35269: CALL_OW 12
35273: ARRAY
35274: PPUSH
35275: LD_INT 1
35277: PPUSH
35278: LD_INT 25
35280: PUSH
35281: LD_INT 27
35283: PUSH
35284: LD_INT 26
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 1
35294: PPUSH
35295: LD_INT 3
35297: PPUSH
35298: CALL_OW 12
35302: ARRAY
35303: PPUSH
35304: LD_INT 60
35306: PPUSH
35307: LD_INT 100
35309: PPUSH
35310: CALL_OW 12
35314: PPUSH
35315: CALL 2061 0 5
// un := CreateVehicle ;
35319: LD_ADDR_VAR 0 4
35323: PUSH
35324: CALL_OW 45
35328: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
35329: LD_ADDR_EXP 40
35333: PUSH
35334: LD_EXP 40
35338: PPUSH
35339: LD_EXP 40
35343: PUSH
35344: LD_INT 1
35346: PLUS
35347: PPUSH
35348: LD_VAR 0 4
35352: PPUSH
35353: CALL_OW 1
35357: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35358: LD_VAR 0 4
35362: PPUSH
35363: LD_INT 0
35365: PPUSH
35366: LD_INT 5
35368: PPUSH
35369: CALL_OW 12
35373: PPUSH
35374: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35378: LD_VAR 0 4
35382: PPUSH
35383: LD_INT 124
35385: PPUSH
35386: LD_INT 141
35388: PPUSH
35389: LD_INT 6
35391: PPUSH
35392: LD_INT 0
35394: PPUSH
35395: CALL_OW 50
// end ;
35399: GO 35228
35401: POP
35402: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35403: LD_ADDR_EXP 42
35407: PUSH
35408: EMPTY
35409: PUSH
35410: EMPTY
35411: PUSH
35412: EMPTY
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35419: LD_ADDR_VAR 0 3
35423: PUSH
35424: DOUBLE
35425: LD_INT 1
35427: DEC
35428: ST_TO_ADDR
35429: LD_INT 3
35431: PUSH
35432: LD_INT 3
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: LD_OWVAR 67
35447: ARRAY
35448: PUSH
35449: FOR_TO
35450: IFFALSE 35664
// for i = 1 to 3 do
35452: LD_ADDR_VAR 0 2
35456: PUSH
35457: DOUBLE
35458: LD_INT 1
35460: DEC
35461: ST_TO_ADDR
35462: LD_INT 3
35464: PUSH
35465: FOR_TO
35466: IFFALSE 35660
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35468: LD_INT 14
35470: PPUSH
35471: LD_INT 3
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: PPUSH
35484: LD_INT 2
35486: PPUSH
35487: CALL_OW 12
35491: ARRAY
35492: PPUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 5
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: PPUSH
35506: LD_INT 2
35508: PPUSH
35509: CALL_OW 12
35513: ARRAY
35514: PPUSH
35515: LD_INT 25
35517: PUSH
35518: LD_INT 27
35520: PUSH
35521: LD_INT 26
35523: PUSH
35524: LD_INT 28
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: PPUSH
35536: LD_INT 4
35538: PPUSH
35539: CALL_OW 12
35543: ARRAY
35544: PPUSH
35545: LD_INT 100
35547: PPUSH
35548: CALL 2061 0 5
// un := CreateVehicle ;
35552: LD_ADDR_VAR 0 4
35556: PUSH
35557: CALL_OW 45
35561: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35562: LD_ADDR_EXP 42
35566: PUSH
35567: LD_EXP 42
35571: PPUSH
35572: LD_VAR 0 2
35576: PUSH
35577: LD_EXP 42
35581: PUSH
35582: LD_VAR 0 2
35586: ARRAY
35587: PUSH
35588: LD_INT 1
35590: PLUS
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PPUSH
35596: LD_VAR 0 4
35600: PPUSH
35601: CALL 3247 0 3
35605: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35606: LD_VAR 0 4
35610: PPUSH
35611: LD_INT 0
35613: PPUSH
35614: LD_INT 5
35616: PPUSH
35617: CALL_OW 12
35621: PPUSH
35622: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35626: LD_VAR 0 4
35630: PPUSH
35631: LD_INT 20
35633: PUSH
35634: LD_INT 21
35636: PUSH
35637: LD_INT 22
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: PUSH
35645: LD_VAR 0 2
35649: ARRAY
35650: PPUSH
35651: LD_INT 0
35653: PPUSH
35654: CALL_OW 49
// end ;
35658: GO 35465
35660: POP
35661: POP
35662: GO 35449
35664: POP
35665: POP
// InitHc ;
35666: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35670: LD_INT 4
35672: PPUSH
35673: LD_INT 5
35675: PPUSH
35676: LD_INT 10
35678: PPUSH
35679: LD_INT 5
35681: PPUSH
35682: LD_INT 0
35684: PPUSH
35685: CALL_OW 58
// end ;
35689: LD_VAR 0 1
35693: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35694: LD_EXP 41
35698: IFFALSE 35772
35700: GO 35702
35702: DISABLE
35703: LD_INT 0
35705: PPUSH
// begin enable ;
35706: ENABLE
// for i in ar_kamikadze do
35707: LD_ADDR_VAR 0 1
35711: PUSH
35712: LD_EXP 41
35716: PUSH
35717: FOR_IN
35718: IFFALSE 35770
// if See ( 1 , i ) then
35720: LD_INT 1
35722: PPUSH
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 292
35732: IFFALSE 35768
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35734: LD_VAR 0 1
35738: PPUSH
35739: LD_INT 81
35741: PUSH
35742: LD_INT 2
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PPUSH
35749: CALL_OW 69
35753: PPUSH
35754: LD_VAR 0 1
35758: PPUSH
35759: CALL_OW 74
35763: PPUSH
35764: CALL_OW 115
35768: GO 35717
35770: POP
35771: POP
// end ;
35772: PPOPN 1
35774: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35775: LD_EXP 13
35779: IFFALSE 36096
35781: GO 35783
35783: DISABLE
35784: LD_INT 0
35786: PPUSH
35787: PPUSH
35788: PPUSH
35789: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35790: LD_INT 35
35792: PPUSH
35793: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35797: LD_INT 1
35799: PPUSH
35800: CALL 55375 0 1
35804: PUSH
35805: LD_INT 0
35807: EQUAL
35808: IFFALSE 35790
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35810: LD_INT 1
35812: PPUSH
35813: LD_INT 14
35815: PUSH
35816: LD_INT 3
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: LD_INT 32
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: PPUSH
35834: CALL 55164 0 2
// repeat wait ( 0 0$1 ) ;
35838: LD_INT 35
35840: PPUSH
35841: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35845: LD_EXP 63
35849: PUSH
35850: LD_INT 1
35852: ARRAY
35853: PPUSH
35854: LD_INT 33
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 34
35866: PUSH
35867: LD_INT 32
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PPUSH
35878: CALL_OW 72
35882: IFFALSE 35838
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35884: LD_ADDR_VAR 0 2
35888: PUSH
35889: LD_EXP 63
35893: PUSH
35894: LD_INT 1
35896: ARRAY
35897: PPUSH
35898: LD_INT 33
35900: PUSH
35901: LD_INT 2
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 34
35910: PUSH
35911: LD_INT 32
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PPUSH
35922: CALL_OW 72
35926: PUSH
35927: LD_INT 1
35929: ARRAY
35930: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35931: LD_ADDR_VAR 0 4
35935: PUSH
35936: LD_INT 5
35938: PPUSH
35939: CALL_OW 469
35943: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35944: LD_INT 35
35946: PPUSH
35947: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35951: LD_ADDR_VAR 0 4
35955: PUSH
35956: LD_INT 5
35958: PPUSH
35959: CALL_OW 469
35963: ST_TO_ADDR
// tmp := 100 ;
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: LD_INT 100
35971: ST_TO_ADDR
// if pos then
35972: LD_VAR 0 4
35976: IFFALSE 36016
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_INT 2
35985: PPUSH
35986: LD_VAR 0 4
35990: PUSH
35991: LD_INT 1
35993: ARRAY
35994: PPUSH
35995: LD_VAR 0 4
35999: PUSH
36000: LD_INT 2
36002: ARRAY
36003: PPUSH
36004: LD_INT 20
36006: PPUSH
36007: CALL 3741 0 4
36011: PUSH
36012: LD_INT 4
36014: ARRAY
36015: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
36016: LD_VAR 0 4
36020: PUSH
36021: LD_EXP 14
36025: NOT
36026: AND
36027: PUSH
36028: LD_VAR 0 3
36032: PUSH
36033: LD_INT 10
36035: LESS
36036: AND
36037: IFFALSE 35944
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
36039: LD_VAR 0 2
36043: PPUSH
36044: LD_VAR 0 4
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: PPUSH
36053: LD_VAR 0 4
36057: PUSH
36058: LD_INT 2
36060: ARRAY
36061: PPUSH
36062: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
36066: LD_VAR 0 2
36070: PPUSH
36071: LD_INT 198
36073: PPUSH
36074: LD_INT 113
36076: PPUSH
36077: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
36081: LD_VAR 0 2
36085: PPUSH
36086: LD_INT 124
36088: PPUSH
36089: LD_INT 7
36091: PPUSH
36092: CALL_OW 171
// end ;
36096: PPOPN 4
36098: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
36099: LD_EXP 6
36103: IFFALSE 38648
36105: GO 36107
36107: DISABLE
36108: LD_INT 0
36110: PPUSH
36111: PPUSH
36112: PPUSH
36113: PPUSH
36114: PPUSH
36115: PPUSH
36116: PPUSH
36117: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
36118: LD_ADDR_VAR 0 4
36122: PUSH
36123: LD_INT 5
36125: PUSH
36126: LD_INT 6
36128: PUSH
36129: LD_INT 7
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: PUSH
36137: LD_OWVAR 67
36141: ARRAY
36142: ST_TO_ADDR
// coords := [ ] ;
36143: LD_ADDR_VAR 0 5
36147: PUSH
36148: EMPTY
36149: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
36150: LD_ADDR_VAR 0 6
36154: PUSH
36155: LD_INT 0
36157: PUSH
36158: LD_INT 0
36160: PUSH
36161: LD_INT 0
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
36197: LD_INT 1
36199: PPUSH
36200: LD_INT 14
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 28
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 14
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: LD_INT 25
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 14
36238: PUSH
36239: LD_INT 1
36241: PUSH
36242: LD_INT 2
36244: PUSH
36245: LD_INT 28
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 14
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 29
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: PPUSH
36278: CALL 55164 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
36282: LD_INT 21000
36284: PUSH
36285: LD_INT 19600
36287: PUSH
36288: LD_INT 18900
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: PUSH
36296: LD_OWVAR 67
36300: ARRAY
36301: PPUSH
36302: CALL_OW 67
// InitHc ;
36306: CALL_OW 19
// InitUc ;
36310: CALL_OW 18
// uc_side := 2 ;
36314: LD_ADDR_OWVAR 20
36318: PUSH
36319: LD_INT 2
36321: ST_TO_ADDR
// uc_nation := 2 ;
36322: LD_ADDR_OWVAR 21
36326: PUSH
36327: LD_INT 2
36329: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: EMPTY
36336: PUSH
36337: EMPTY
36338: PUSH
36339: EMPTY
36340: PUSH
36341: EMPTY
36342: PUSH
36343: EMPTY
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36352: LD_ADDR_VAR 0 3
36356: PUSH
36357: LD_VAR 0 3
36361: PPUSH
36362: LD_INT 1
36364: PPUSH
36365: LD_EXP 63
36369: PUSH
36370: LD_INT 1
36372: ARRAY
36373: PUSH
36374: LD_INT 34
36376: PUSH
36377: LD_INT 32
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PPUSH
36384: CALL_OW 69
36388: DIFF
36389: PPUSH
36390: CALL_OW 1
36394: ST_TO_ADDR
// for i = 1 to Difficulty do
36395: LD_ADDR_VAR 0 1
36399: PUSH
36400: DOUBLE
36401: LD_INT 1
36403: DEC
36404: ST_TO_ADDR
36405: LD_OWVAR 67
36409: PUSH
36410: FOR_TO
36411: IFFALSE 36533
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36413: LD_INT 13
36415: PPUSH
36416: LD_INT 3
36418: PPUSH
36419: LD_INT 5
36421: PPUSH
36422: LD_INT 29
36424: PPUSH
36425: LD_INT 100
36427: PPUSH
36428: CALL 2061 0 5
// un := CreateVehicle ;
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: CALL_OW 45
36441: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36442: LD_ADDR_VAR 0 3
36446: PUSH
36447: LD_VAR 0 3
36451: PPUSH
36452: LD_INT 1
36454: PUSH
36455: LD_VAR 0 3
36459: PUSH
36460: LD_INT 1
36462: ARRAY
36463: PUSH
36464: LD_INT 1
36466: PLUS
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PPUSH
36472: LD_VAR 0 2
36476: PPUSH
36477: CALL 3247 0 3
36481: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36482: LD_VAR 0 2
36486: PPUSH
36487: LD_INT 3
36489: PPUSH
36490: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_INT 16
36501: PPUSH
36502: LD_INT 0
36504: PPUSH
36505: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36509: LD_VAR 0 2
36513: PPUSH
36514: LD_INT 51
36516: PPUSH
36517: LD_INT 10
36519: PPUSH
36520: CALL_OW 111
// wait ( 0 0$2 ) ;
36524: LD_INT 70
36526: PPUSH
36527: CALL_OW 67
// end ;
36531: GO 36410
36533: POP
36534: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36535: LD_ADDR_VAR 0 5
36539: PUSH
36540: LD_INT 51
36542: PUSH
36543: LD_INT 24
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 75
36552: PUSH
36553: LD_INT 90
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36564: LD_INT 1
36566: PPUSH
36567: LD_VAR 0 3
36571: PUSH
36572: LD_INT 1
36574: ARRAY
36575: PPUSH
36576: LD_VAR 0 5
36580: PPUSH
36581: LD_VAR 0 6
36585: PPUSH
36586: CALL 55260 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36590: LD_ADDR_VAR 0 1
36594: PUSH
36595: DOUBLE
36596: LD_INT 1
36598: DEC
36599: ST_TO_ADDR
36600: LD_INT 2
36602: PUSH
36603: LD_INT 3
36605: PUSH
36606: LD_INT 3
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: PUSH
36614: LD_OWVAR 67
36618: ARRAY
36619: PUSH
36620: FOR_TO
36621: IFFALSE 36705
// begin PrepareHuman ( false , 17 , skill ) ;
36623: LD_INT 0
36625: PPUSH
36626: LD_INT 17
36628: PPUSH
36629: LD_VAR 0 4
36633: PPUSH
36634: CALL_OW 380
// un := CreateHuman ;
36638: LD_ADDR_VAR 0 2
36642: PUSH
36643: CALL_OW 44
36647: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36648: LD_ADDR_VAR 0 3
36652: PUSH
36653: LD_VAR 0 3
36657: PPUSH
36658: LD_INT 2
36660: PUSH
36661: LD_VAR 0 3
36665: PUSH
36666: LD_INT 2
36668: ARRAY
36669: PUSH
36670: LD_INT 1
36672: PLUS
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PPUSH
36678: LD_VAR 0 2
36682: PPUSH
36683: CALL 3247 0 3
36687: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36688: LD_VAR 0 2
36692: PPUSH
36693: LD_INT 13
36695: PPUSH
36696: LD_INT 0
36698: PPUSH
36699: CALL_OW 49
// end ;
36703: GO 36620
36705: POP
36706: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36707: LD_ADDR_VAR 0 1
36711: PUSH
36712: DOUBLE
36713: LD_INT 1
36715: DEC
36716: ST_TO_ADDR
36717: LD_INT 2
36719: PUSH
36720: LD_INT 3
36722: PUSH
36723: LD_INT 3
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: PUSH
36731: LD_OWVAR 67
36735: ARRAY
36736: PUSH
36737: FOR_TO
36738: IFFALSE 36841
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36740: LD_INT 0
36742: PPUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 8
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PPUSH
36756: LD_INT 2
36758: PPUSH
36759: CALL_OW 12
36763: ARRAY
36764: PPUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: CALL_OW 380
// un := CreateHuman ;
36774: LD_ADDR_VAR 0 2
36778: PUSH
36779: CALL_OW 44
36783: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36784: LD_ADDR_VAR 0 3
36788: PUSH
36789: LD_VAR 0 3
36793: PPUSH
36794: LD_INT 2
36796: PUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PUSH
36806: LD_INT 1
36808: PLUS
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PPUSH
36814: LD_VAR 0 2
36818: PPUSH
36819: CALL 3247 0 3
36823: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36824: LD_VAR 0 2
36828: PPUSH
36829: LD_INT 13
36831: PPUSH
36832: LD_INT 0
36834: PPUSH
36835: CALL_OW 49
// end ;
36839: GO 36737
36841: POP
36842: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36843: LD_ADDR_VAR 0 5
36847: PUSH
36848: LD_INT 67
36850: PUSH
36851: LD_INT 112
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 85
36860: PUSH
36861: LD_INT 130
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36872: LD_INT 2
36874: PPUSH
36875: LD_VAR 0 3
36879: PUSH
36880: LD_INT 2
36882: ARRAY
36883: PPUSH
36884: LD_VAR 0 5
36888: PPUSH
36889: LD_VAR 0 6
36893: PPUSH
36894: CALL 55260 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36898: LD_ADDR_VAR 0 1
36902: PUSH
36903: DOUBLE
36904: LD_INT 1
36906: DEC
36907: ST_TO_ADDR
36908: LD_INT 1
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: LD_INT 3
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: PUSH
36922: LD_OWVAR 67
36926: ARRAY
36927: PUSH
36928: FOR_TO
36929: IFFALSE 37013
// begin PrepareHuman ( false , 17 , skill ) ;
36931: LD_INT 0
36933: PPUSH
36934: LD_INT 17
36936: PPUSH
36937: LD_VAR 0 4
36941: PPUSH
36942: CALL_OW 380
// un := CreateHuman ;
36946: LD_ADDR_VAR 0 2
36950: PUSH
36951: CALL_OW 44
36955: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36956: LD_ADDR_VAR 0 3
36960: PUSH
36961: LD_VAR 0 3
36965: PPUSH
36966: LD_INT 3
36968: PUSH
36969: LD_VAR 0 3
36973: PUSH
36974: LD_INT 3
36976: ARRAY
36977: PUSH
36978: LD_INT 1
36980: PLUS
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PPUSH
36986: LD_VAR 0 2
36990: PPUSH
36991: CALL 3247 0 3
36995: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_INT 14
37003: PPUSH
37004: LD_INT 0
37006: PPUSH
37007: CALL_OW 49
// end ;
37011: GO 36928
37013: POP
37014: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
37015: LD_ADDR_VAR 0 5
37019: PUSH
37020: LD_INT 148
37022: PUSH
37023: LD_INT 158
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 148
37032: PUSH
37033: LD_INT 158
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
37044: LD_INT 3
37046: PPUSH
37047: LD_VAR 0 3
37051: PUSH
37052: LD_INT 3
37054: ARRAY
37055: PPUSH
37056: LD_VAR 0 5
37060: PPUSH
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL 55260 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
37070: LD_ADDR_VAR 0 1
37074: PUSH
37075: DOUBLE
37076: LD_INT 1
37078: DEC
37079: ST_TO_ADDR
37080: LD_INT 3
37082: PUSH
37083: LD_INT 4
37085: PUSH
37086: LD_INT 4
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: PUSH
37094: LD_OWVAR 67
37098: ARRAY
37099: PUSH
37100: FOR_TO
37101: IFFALSE 37309
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
37103: LD_INT 14
37105: PPUSH
37106: LD_INT 3
37108: PPUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 5
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PPUSH
37122: LD_INT 2
37124: PPUSH
37125: CALL_OW 12
37129: ARRAY
37130: PPUSH
37131: LD_INT 27
37133: PUSH
37134: LD_INT 26
37136: PUSH
37137: LD_INT 28
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: PPUSH
37148: LD_INT 3
37150: PPUSH
37151: CALL_OW 12
37155: ARRAY
37156: PPUSH
37157: LD_INT 100
37159: PPUSH
37160: CALL 2061 0 5
// un := CreateVehicle ;
37164: LD_ADDR_VAR 0 2
37168: PUSH
37169: CALL_OW 45
37173: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
37174: LD_ADDR_VAR 0 3
37178: PUSH
37179: LD_VAR 0 3
37183: PPUSH
37184: LD_INT 4
37186: PUSH
37187: LD_VAR 0 3
37191: PUSH
37192: LD_INT 4
37194: ARRAY
37195: PUSH
37196: LD_INT 1
37198: PLUS
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PPUSH
37204: LD_VAR 0 2
37208: PPUSH
37209: CALL 3247 0 3
37213: ST_TO_ADDR
// SetDir ( un , 5 ) ;
37214: LD_VAR 0 2
37218: PPUSH
37219: LD_INT 5
37221: PPUSH
37222: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
37226: LD_VAR 0 2
37230: PPUSH
37231: LD_INT 15
37233: PPUSH
37234: LD_INT 0
37236: PPUSH
37237: CALL_OW 49
// if GetControl ( un ) = control_manual then
37241: LD_VAR 0 2
37245: PPUSH
37246: CALL_OW 263
37250: PUSH
37251: LD_INT 1
37253: EQUAL
37254: IFFALSE 37285
// begin PrepareHuman ( false , 3 , skill ) ;
37256: LD_INT 0
37258: PPUSH
37259: LD_INT 3
37261: PPUSH
37262: LD_VAR 0 4
37266: PPUSH
37267: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
37271: CALL_OW 44
37275: PPUSH
37276: LD_VAR 0 2
37280: PPUSH
37281: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
37285: LD_VAR 0 2
37289: PPUSH
37290: LD_INT 179
37292: PPUSH
37293: LD_INT 135
37295: PPUSH
37296: CALL_OW 111
// wait ( 0 0$2 ) ;
37300: LD_INT 70
37302: PPUSH
37303: CALL_OW 67
// end ;
37307: GO 37100
37309: POP
37310: POP
// vc_chassis := 15 ;
37311: LD_ADDR_OWVAR 37
37315: PUSH
37316: LD_INT 15
37318: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
37319: LD_ADDR_VAR 0 3
37323: PUSH
37324: LD_VAR 0 3
37328: PPUSH
37329: LD_INT 4
37331: PUSH
37332: LD_VAR 0 3
37336: PUSH
37337: LD_INT 4
37339: ARRAY
37340: PUSH
37341: LD_INT 1
37343: PLUS
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 45
37353: PPUSH
37354: CALL 3247 0 3
37358: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37359: LD_VAR 0 3
37363: PUSH
37364: LD_INT 4
37366: ARRAY
37367: PUSH
37368: LD_VAR 0 3
37372: PUSH
37373: LD_INT 4
37375: ARRAY
37376: ARRAY
37377: PPUSH
37378: LD_INT 15
37380: PPUSH
37381: LD_INT 0
37383: PPUSH
37384: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37388: LD_INT 0
37390: PPUSH
37391: LD_INT 11
37393: PPUSH
37394: LD_VAR 0 4
37398: PPUSH
37399: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37403: LD_ADDR_VAR 0 3
37407: PUSH
37408: LD_VAR 0 3
37412: PPUSH
37413: LD_INT 4
37415: PUSH
37416: LD_VAR 0 3
37420: PUSH
37421: LD_INT 4
37423: ARRAY
37424: PUSH
37425: LD_INT 1
37427: PLUS
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PPUSH
37433: CALL_OW 44
37437: PPUSH
37438: CALL 3247 0 3
37442: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37443: LD_VAR 0 3
37447: PUSH
37448: LD_INT 4
37450: ARRAY
37451: PUSH
37452: LD_VAR 0 3
37456: PUSH
37457: LD_INT 4
37459: ARRAY
37460: ARRAY
37461: PPUSH
37462: LD_VAR 0 3
37466: PUSH
37467: LD_INT 4
37469: ARRAY
37470: PUSH
37471: LD_VAR 0 3
37475: PUSH
37476: LD_INT 4
37478: ARRAY
37479: PUSH
37480: LD_INT 1
37482: MINUS
37483: ARRAY
37484: PPUSH
37485: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37489: LD_ADDR_VAR 0 5
37493: PUSH
37494: LD_INT 148
37496: PUSH
37497: LD_INT 140
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: EMPTY
37505: LIST
37506: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37507: LD_INT 1
37509: PPUSH
37510: LD_VAR 0 3
37514: PUSH
37515: LD_INT 4
37517: ARRAY
37518: PPUSH
37519: LD_VAR 0 5
37523: PPUSH
37524: LD_VAR 0 6
37528: PPUSH
37529: CALL 55260 0 4
// if gensher_active then
37533: LD_EXP 18
37537: IFFALSE 37890
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37539: LD_EXP 44
37543: PPUSH
37544: LD_STRING D10-Diet-1
37546: PPUSH
37547: CALL_OW 94
// for i = 1 to 2 do
37551: LD_ADDR_VAR 0 1
37555: PUSH
37556: DOUBLE
37557: LD_INT 1
37559: DEC
37560: ST_TO_ADDR
37561: LD_INT 2
37563: PUSH
37564: FOR_TO
37565: IFFALSE 37687
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37567: LD_INT 13
37569: PPUSH
37570: LD_INT 3
37572: PPUSH
37573: LD_INT 5
37575: PPUSH
37576: LD_INT 29
37578: PPUSH
37579: LD_INT 100
37581: PPUSH
37582: CALL 2061 0 5
// un := CreateVehicle ;
37586: LD_ADDR_VAR 0 2
37590: PUSH
37591: CALL_OW 45
37595: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37596: LD_ADDR_VAR 0 3
37600: PUSH
37601: LD_VAR 0 3
37605: PPUSH
37606: LD_INT 5
37608: PUSH
37609: LD_VAR 0 3
37613: PUSH
37614: LD_INT 5
37616: ARRAY
37617: PUSH
37618: LD_INT 1
37620: PLUS
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PPUSH
37626: LD_VAR 0 2
37630: PPUSH
37631: CALL 3247 0 3
37635: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37636: LD_VAR 0 2
37640: PPUSH
37641: LD_INT 0
37643: PPUSH
37644: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37648: LD_VAR 0 2
37652: PPUSH
37653: LD_INT 23
37655: PPUSH
37656: LD_INT 0
37658: PPUSH
37659: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37663: LD_VAR 0 2
37667: PPUSH
37668: LD_INT 85
37670: PPUSH
37671: LD_INT 152
37673: PPUSH
37674: CALL_OW 111
// wait ( 0 0$2 ) ;
37678: LD_INT 70
37680: PPUSH
37681: CALL_OW 67
// end ;
37685: GO 37564
37687: POP
37688: POP
// for i = 1 to 3 do
37689: LD_ADDR_VAR 0 1
37693: PUSH
37694: DOUBLE
37695: LD_INT 1
37697: DEC
37698: ST_TO_ADDR
37699: LD_INT 3
37701: PUSH
37702: FOR_TO
37703: IFFALSE 37844
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37705: LD_INT 14
37707: PPUSH
37708: LD_INT 3
37710: PPUSH
37711: LD_INT 5
37713: PPUSH
37714: LD_INT 27
37716: PUSH
37717: LD_INT 28
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PPUSH
37727: LD_INT 2
37729: PPUSH
37730: CALL_OW 12
37734: ARRAY
37735: PPUSH
37736: LD_INT 100
37738: PPUSH
37739: CALL 2061 0 5
// un := CreateVehicle ;
37743: LD_ADDR_VAR 0 2
37747: PUSH
37748: CALL_OW 45
37752: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37753: LD_ADDR_VAR 0 3
37757: PUSH
37758: LD_VAR 0 3
37762: PPUSH
37763: LD_INT 5
37765: PUSH
37766: LD_VAR 0 3
37770: PUSH
37771: LD_INT 5
37773: ARRAY
37774: PUSH
37775: LD_INT 1
37777: PLUS
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PPUSH
37783: LD_VAR 0 2
37787: PPUSH
37788: CALL 3247 0 3
37792: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37793: LD_VAR 0 2
37797: PPUSH
37798: LD_INT 0
37800: PPUSH
37801: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37805: LD_VAR 0 2
37809: PPUSH
37810: LD_INT 23
37812: PPUSH
37813: LD_INT 0
37815: PPUSH
37816: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37820: LD_VAR 0 2
37824: PPUSH
37825: LD_INT 85
37827: PPUSH
37828: LD_INT 152
37830: PPUSH
37831: CALL_OW 111
// wait ( 0 0$2 ) ;
37835: LD_INT 70
37837: PPUSH
37838: CALL_OW 67
// end ;
37842: GO 37702
37844: POP
37845: POP
// coords := [ [ 97 , 143 ] ] ;
37846: LD_ADDR_VAR 0 5
37850: PUSH
37851: LD_INT 97
37853: PUSH
37854: LD_INT 143
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: EMPTY
37862: LIST
37863: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37864: LD_INT 1
37866: PPUSH
37867: LD_VAR 0 3
37871: PUSH
37872: LD_INT 5
37874: ARRAY
37875: PPUSH
37876: LD_VAR 0 5
37880: PPUSH
37881: LD_VAR 0 6
37885: PPUSH
37886: CALL 55260 0 4
// end ; Wait ( 10 10$00 ) ;
37890: LD_INT 21000
37892: PPUSH
37893: CALL_OW 67
// tmp := [ ] ;
37897: LD_ADDR_VAR 0 3
37901: PUSH
37902: EMPTY
37903: ST_TO_ADDR
// w := 1 ;
37904: LD_ADDR_VAR 0 7
37908: PUSH
37909: LD_INT 1
37911: ST_TO_ADDR
// repeat tmp := [ ] ;
37912: LD_ADDR_VAR 0 3
37916: PUSH
37917: EMPTY
37918: ST_TO_ADDR
// if w mod 4 = 0 then
37919: LD_VAR 0 7
37923: PUSH
37924: LD_INT 4
37926: MOD
37927: PUSH
37928: LD_INT 0
37930: EQUAL
37931: IFFALSE 38018
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37933: LD_ADDR_VAR 0 8
37937: PUSH
37938: LD_INT 11
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 24
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 11
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 24
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 11
37976: PUSH
37977: LD_INT 1
37979: PUSH
37980: LD_INT 2
37982: PUSH
37983: LD_INT 24
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 11
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 24
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: ST_TO_ADDR
38016: GO 38120
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
38018: LD_ADDR_VAR 0 8
38022: PUSH
38023: LD_INT 14
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 28
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 14
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 2
38049: PUSH
38050: LD_INT 25
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 14
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 28
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 14
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 29
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 11
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: LD_INT 24
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: ST_TO_ADDR
// if w mod 3 = 0 then
38120: LD_VAR 0 7
38124: PUSH
38125: LD_INT 3
38127: MOD
38128: PUSH
38129: LD_INT 0
38131: EQUAL
38132: IFFALSE 38208
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
38134: LD_ADDR_VAR 0 8
38138: PUSH
38139: LD_VAR 0 8
38143: PPUSH
38144: LD_INT 1
38146: PUSH
38147: LD_VAR 0 8
38151: PUSH
38152: LD_VAR 0 1
38156: ARRAY
38157: PUSH
38158: LD_INT 1
38160: PLUS
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PPUSH
38166: LD_INT 14
38168: PUSH
38169: LD_INT 1
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 25
38177: PUSH
38178: LD_INT 28
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: PPUSH
38188: LD_INT 2
38190: PPUSH
38191: CALL_OW 12
38195: ARRAY
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: PPUSH
38203: CALL 3247 0 3
38207: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
38208: LD_INT 1
38210: PPUSH
38211: LD_VAR 0 8
38215: PPUSH
38216: CALL 55164 0 2
// if GetSide ( ar_dep_w ) = 2 then
38220: LD_INT 45
38222: PPUSH
38223: CALL_OW 255
38227: PUSH
38228: LD_INT 2
38230: EQUAL
38231: IFFALSE 38316
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
38233: LD_ADDR_VAR 0 8
38237: PUSH
38238: LD_INT 14
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: LD_INT 28
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 14
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 27
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 14
38276: PUSH
38277: LD_INT 1
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: LD_INT 27
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
38297: LD_INT 2
38299: PPUSH
38300: LD_VAR 0 8
38304: PPUSH
38305: CALL 55164 0 2
// wait ( 0 0$50 ) ;
38309: LD_INT 1750
38311: PPUSH
38312: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
38316: LD_INT 35
38318: PPUSH
38319: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
38323: LD_EXP 63
38327: PUSH
38328: LD_INT 1
38330: ARRAY
38331: PPUSH
38332: LD_INT 3
38334: PUSH
38335: LD_INT 34
38337: PUSH
38338: LD_INT 32
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PPUSH
38349: CALL_OW 72
38353: PUSH
38354: LD_INT 4
38356: GREATEREQUAL
38357: IFFALSE 38316
// wait ( 0 0$10 ) ;
38359: LD_INT 350
38361: PPUSH
38362: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38366: LD_ADDR_VAR 0 3
38370: PUSH
38371: LD_EXP 63
38375: PUSH
38376: LD_INT 1
38378: ARRAY
38379: PPUSH
38380: LD_INT 3
38382: PUSH
38383: LD_INT 34
38385: PUSH
38386: LD_INT 32
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PPUSH
38397: CALL_OW 72
38401: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38402: LD_INT 100
38404: PPUSH
38405: CALL_OW 13
38409: PUSH
38410: LD_INT 50
38412: LESS
38413: IFFALSE 38446
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38415: LD_ADDR_VAR 0 5
38419: PUSH
38420: LD_INT 55
38422: PUSH
38423: LD_INT 7
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: LD_INT 75
38432: PUSH
38433: LD_INT 90
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: ST_TO_ADDR
38444: GO 38475
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38446: LD_ADDR_VAR 0 5
38450: PUSH
38451: LD_INT 128
38453: PUSH
38454: LD_INT 94
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 180
38463: PUSH
38464: LD_INT 135
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: ST_TO_ADDR
// if w mod 4 = 0 then
38475: LD_VAR 0 7
38479: PUSH
38480: LD_INT 4
38482: MOD
38483: PUSH
38484: LD_INT 0
38486: EQUAL
38487: IFFALSE 38518
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38489: LD_ADDR_VAR 0 5
38493: PUSH
38494: LD_INT 91
38496: PUSH
38497: LD_INT 58
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 117
38506: PUSH
38507: LD_INT 107
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38518: LD_INT 1
38520: PPUSH
38521: LD_VAR 0 3
38525: PPUSH
38526: LD_VAR 0 5
38530: PPUSH
38531: LD_VAR 0 6
38535: PPUSH
38536: CALL 55260 0 4
// if mc_vehicles [ 2 ] then
38540: LD_EXP 63
38544: PUSH
38545: LD_INT 2
38547: ARRAY
38548: IFFALSE 38584
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38550: LD_INT 2
38552: PPUSH
38553: LD_EXP 63
38557: PUSH
38558: LD_INT 2
38560: ARRAY
38561: PPUSH
38562: LD_INT 73
38564: PUSH
38565: LD_INT 115
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: EMPTY
38573: LIST
38574: PPUSH
38575: LD_VAR 0 6
38579: PPUSH
38580: CALL 55260 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38584: LD_INT 19950
38586: PPUSH
38587: LD_INT 26250
38589: PPUSH
38590: CALL_OW 12
38594: PPUSH
38595: CALL_OW 67
// w := w + 1 ;
38599: LD_ADDR_VAR 0 7
38603: PUSH
38604: LD_VAR 0 7
38608: PUSH
38609: LD_INT 1
38611: PLUS
38612: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38613: LD_INT 94
38615: PPUSH
38616: CALL_OW 301
38620: PUSH
38621: LD_EXP 48
38625: PUSH
38626: LD_INT 1
38628: ARRAY
38629: PPUSH
38630: LD_INT 30
38632: PUSH
38633: LD_INT 3
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PPUSH
38640: CALL_OW 72
38644: NOT
38645: OR
38646: IFFALSE 37912
// end ;
38648: PPOPN 8
38650: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38651: LD_INT 69
38653: IFFALSE 39028
38655: GO 38657
38657: DISABLE
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
// begin enable ;
38664: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38665: LD_INT 35
38667: PPUSH
38668: LD_INT 1190
38670: PPUSH
38671: CALL_OW 12
38675: PPUSH
38676: CALL_OW 67
// tmp := [ ] ;
38680: LD_ADDR_VAR 0 2
38684: PUSH
38685: EMPTY
38686: ST_TO_ADDR
// uc_side := 8 ;
38687: LD_ADDR_OWVAR 20
38691: PUSH
38692: LD_INT 8
38694: ST_TO_ADDR
// uc_nation := 2 ;
38695: LD_ADDR_OWVAR 21
38699: PUSH
38700: LD_INT 2
38702: ST_TO_ADDR
// InitHc ;
38703: CALL_OW 19
// for i = 1 to 3 do
38707: LD_ADDR_VAR 0 1
38711: PUSH
38712: DOUBLE
38713: LD_INT 1
38715: DEC
38716: ST_TO_ADDR
38717: LD_INT 3
38719: PUSH
38720: FOR_TO
38721: IFFALSE 38848
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38723: LD_INT 13
38725: PUSH
38726: LD_INT 14
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PPUSH
38736: LD_INT 2
38738: PPUSH
38739: CALL_OW 12
38743: ARRAY
38744: PPUSH
38745: LD_INT 3
38747: PPUSH
38748: LD_INT 5
38750: PPUSH
38751: LD_INT 27
38753: PUSH
38754: LD_INT 28
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PPUSH
38764: LD_INT 2
38766: PPUSH
38767: CALL_OW 12
38771: ARRAY
38772: PPUSH
38773: LD_INT 100
38775: PPUSH
38776: CALL 2061 0 5
// un := CreateVehicle ;
38780: LD_ADDR_VAR 0 3
38784: PUSH
38785: CALL_OW 45
38789: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38790: LD_VAR 0 3
38794: PPUSH
38795: LD_INT 4
38797: PPUSH
38798: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38802: LD_VAR 0 3
38806: PPUSH
38807: LD_INT 15
38809: PPUSH
38810: LD_INT 0
38812: PPUSH
38813: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38817: LD_ADDR_VAR 0 2
38821: PUSH
38822: LD_VAR 0 2
38826: PPUSH
38827: LD_VAR 0 2
38831: PUSH
38832: LD_INT 1
38834: PLUS
38835: PPUSH
38836: LD_VAR 0 3
38840: PPUSH
38841: CALL_OW 1
38845: ST_TO_ADDR
// end ;
38846: GO 38720
38848: POP
38849: POP
// for i = 1 to 4 do
38850: LD_ADDR_VAR 0 1
38854: PUSH
38855: DOUBLE
38856: LD_INT 1
38858: DEC
38859: ST_TO_ADDR
38860: LD_INT 4
38862: PUSH
38863: FOR_TO
38864: IFFALSE 38943
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38866: LD_INT 0
38868: PPUSH
38869: LD_INT 1
38871: PPUSH
38872: LD_INT 4
38874: PPUSH
38875: CALL_OW 12
38879: PPUSH
38880: LD_INT 6
38882: PPUSH
38883: CALL_OW 380
// un := CreateHuman ;
38887: LD_ADDR_VAR 0 3
38891: PUSH
38892: CALL_OW 44
38896: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38897: LD_VAR 0 3
38901: PPUSH
38902: LD_INT 15
38904: PPUSH
38905: LD_INT 0
38907: PPUSH
38908: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38912: LD_ADDR_VAR 0 2
38916: PUSH
38917: LD_VAR 0 2
38921: PPUSH
38922: LD_VAR 0 2
38926: PUSH
38927: LD_INT 1
38929: PLUS
38930: PPUSH
38931: LD_VAR 0 3
38935: PPUSH
38936: CALL_OW 1
38940: ST_TO_ADDR
// end ;
38941: GO 38863
38943: POP
38944: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38945: LD_VAR 0 2
38949: PPUSH
38950: LD_INT 210
38952: PPUSH
38953: LD_INT 177
38955: PPUSH
38956: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38960: LD_ADDR_VAR 0 4
38964: PUSH
38965: LD_INT 10
38967: PPUSH
38968: LD_INT 22
38970: PUSH
38971: LD_INT 8
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 70
38982: ST_TO_ADDR
// if x then
38983: LD_VAR 0 4
38987: IFFALSE 39015
// for i in x do
38989: LD_ADDR_VAR 0 1
38993: PUSH
38994: LD_VAR 0 4
38998: PUSH
38999: FOR_IN
39000: IFFALSE 39013
// RemoveUnit ( i ) ;
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 64
39011: GO 38999
39013: POP
39014: POP
// wait ( 0 0$3 ) ;
39015: LD_INT 105
39017: PPUSH
39018: CALL_OW 67
// until tmp ;
39022: LD_VAR 0 2
39026: IFFALSE 38945
// end ; end_of_file
39028: PPOPN 4
39030: END
// export function Action ; var tmp , p , radar , sols , i ; begin
39031: LD_INT 0
39033: PPUSH
39034: PPUSH
39035: PPUSH
39036: PPUSH
39037: PPUSH
39038: PPUSH
// InGameOn ;
39039: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
39043: LD_EXP 21
39047: PPUSH
39048: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
39052: LD_ADDR_VAR 0 2
39056: PUSH
39057: LD_INT 22
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 25
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PPUSH
39081: CALL_OW 69
39085: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
39086: LD_ADDR_VAR 0 4
39090: PUSH
39091: LD_INT 22
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 34
39103: PUSH
39104: LD_INT 11
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PPUSH
39115: CALL_OW 69
39119: PUSH
39120: LD_INT 1
39122: ARRAY
39123: ST_TO_ADDR
// for i = 1 to tmp do
39124: LD_ADDR_VAR 0 6
39128: PUSH
39129: DOUBLE
39130: LD_INT 1
39132: DEC
39133: ST_TO_ADDR
39134: LD_VAR 0 2
39138: PUSH
39139: FOR_TO
39140: IFFALSE 39187
// begin if i = 5 then
39142: LD_VAR 0 6
39146: PUSH
39147: LD_INT 5
39149: EQUAL
39150: IFFALSE 39154
// break ;
39152: GO 39187
// sols := Replace ( sols , i , tmp [ i ] ) ;
39154: LD_ADDR_VAR 0 5
39158: PUSH
39159: LD_VAR 0 5
39163: PPUSH
39164: LD_VAR 0 6
39168: PPUSH
39169: LD_VAR 0 2
39173: PUSH
39174: LD_VAR 0 6
39178: ARRAY
39179: PPUSH
39180: CALL_OW 1
39184: ST_TO_ADDR
// end ;
39185: GO 39139
39187: POP
39188: POP
// tmp := ar_force_tmp ;
39189: LD_ADDR_VAR 0 2
39193: PUSH
39194: LD_EXP 39
39198: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 1
39206: ARRAY
39207: PPUSH
39208: LD_INT 108
39210: PPUSH
39211: LD_INT 139
39213: PPUSH
39214: LD_INT 0
39216: PPUSH
39217: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
39221: LD_VAR 0 2
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PPUSH
39230: LD_EXP 21
39234: PPUSH
39235: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
39239: LD_VAR 0 2
39243: PUSH
39244: LD_INT 2
39246: ARRAY
39247: PPUSH
39248: LD_INT 114
39250: PPUSH
39251: LD_INT 132
39253: PPUSH
39254: LD_INT 0
39256: PPUSH
39257: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
39261: LD_VAR 0 2
39265: PUSH
39266: LD_INT 3
39268: ARRAY
39269: PPUSH
39270: LD_INT 115
39272: PPUSH
39273: LD_INT 132
39275: PPUSH
39276: LD_INT 0
39278: PPUSH
39279: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
39283: LD_VAR 0 2
39287: PUSH
39288: LD_INT 2
39290: ARRAY
39291: PUSH
39292: LD_VAR 0 2
39296: PUSH
39297: LD_INT 3
39299: ARRAY
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PPUSH
39305: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
39309: LD_VAR 0 4
39313: PPUSH
39314: LD_INT 83
39316: PPUSH
39317: LD_INT 123
39319: PPUSH
39320: CALL_OW 111
// Wait ( 0 0$01 ) ;
39324: LD_INT 35
39326: PPUSH
39327: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
39331: LD_INT 90
39333: PPUSH
39334: LD_INT 144
39336: PPUSH
39337: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39341: LD_VAR 0 5
39345: PPUSH
39346: LD_INT 88
39348: PPUSH
39349: LD_INT 129
39351: PPUSH
39352: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_INT 92
39363: PUSH
39364: LD_INT 131
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 88
39373: PUSH
39374: LD_INT 127
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 91
39383: PUSH
39384: LD_INT 132
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 92
39393: PUSH
39394: LD_INT 134
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: ST_TO_ADDR
// for i = 1 to sols do
39407: LD_ADDR_VAR 0 6
39411: PUSH
39412: DOUBLE
39413: LD_INT 1
39415: DEC
39416: ST_TO_ADDR
39417: LD_VAR 0 5
39421: PUSH
39422: FOR_TO
39423: IFFALSE 39496
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39425: LD_VAR 0 5
39429: PUSH
39430: LD_VAR 0 6
39434: ARRAY
39435: PPUSH
39436: LD_VAR 0 3
39440: PUSH
39441: LD_VAR 0 6
39445: ARRAY
39446: PUSH
39447: LD_INT 1
39449: ARRAY
39450: PPUSH
39451: LD_VAR 0 3
39455: PUSH
39456: LD_VAR 0 6
39460: ARRAY
39461: PUSH
39462: LD_INT 2
39464: ARRAY
39465: PPUSH
39466: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39470: LD_VAR 0 5
39474: PUSH
39475: LD_VAR 0 6
39479: ARRAY
39480: PPUSH
39481: CALL_OW 197
// AddComHold ( sols ) ;
39485: LD_VAR 0 5
39489: PPUSH
39490: CALL_OW 200
// end ;
39494: GO 39422
39496: POP
39497: POP
// repeat wait ( 0 0$1 ) ;
39498: LD_INT 35
39500: PPUSH
39501: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39505: LD_VAR 0 5
39509: PUSH
39510: LD_INT 1
39512: ARRAY
39513: PPUSH
39514: LD_INT 92
39516: PPUSH
39517: LD_INT 131
39519: PPUSH
39520: CALL_OW 297
39524: PUSH
39525: LD_INT 4
39527: LESS
39528: IFFALSE 39498
// CenterOnXY ( 96 , 139 ) ;
39530: LD_INT 96
39532: PPUSH
39533: LD_INT 139
39535: PPUSH
39536: CALL_OW 84
// wait ( 0 0$3 ) ;
39540: LD_INT 105
39542: PPUSH
39543: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39547: LD_INT 111
39549: PPUSH
39550: LD_INT 135
39552: PPUSH
39553: LD_INT 1
39555: PPUSH
39556: LD_INT 25
39558: NEG
39559: PPUSH
39560: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39564: LD_VAR 0 2
39568: PUSH
39569: LD_INT 2
39571: ARRAY
39572: PPUSH
39573: LD_VAR 0 2
39577: PUSH
39578: LD_INT 1
39580: ARRAY
39581: PPUSH
39582: CALL_OW 250
39586: PUSH
39587: LD_INT 3
39589: PLUS
39590: PPUSH
39591: LD_VAR 0 2
39595: PUSH
39596: LD_INT 1
39598: ARRAY
39599: PPUSH
39600: CALL_OW 251
39604: PPUSH
39605: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39609: LD_VAR 0 2
39613: PUSH
39614: LD_INT 3
39616: ARRAY
39617: PPUSH
39618: LD_INT 7
39620: PPUSH
39621: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39625: LD_VAR 0 2
39629: PUSH
39630: LD_INT 2
39632: ARRAY
39633: PPUSH
39634: LD_VAR 0 2
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PPUSH
39643: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39647: LD_INT 35
39649: PPUSH
39650: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39654: LD_VAR 0 2
39658: PUSH
39659: LD_INT 1
39661: ARRAY
39662: PPUSH
39663: LD_VAR 0 2
39667: PUSH
39668: LD_INT 2
39670: ARRAY
39671: PPUSH
39672: CALL_OW 296
39676: PUSH
39677: LD_INT 5
39679: LESS
39680: IFFALSE 39647
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39682: LD_VAR 0 2
39686: PUSH
39687: LD_INT 1
39689: ARRAY
39690: PPUSH
39691: LD_VAR 0 2
39695: PUSH
39696: LD_INT 2
39698: ARRAY
39699: PPUSH
39700: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39704: LD_VAR 0 2
39708: PUSH
39709: LD_INT 1
39711: ARRAY
39712: PPUSH
39713: LD_STRING D1a-Merc1-1
39715: PPUSH
39716: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39720: LD_VAR 0 2
39724: PUSH
39725: LD_INT 2
39727: ARRAY
39728: PPUSH
39729: LD_STRING D1a-FMerc2-1
39731: PPUSH
39732: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39736: LD_VAR 0 2
39740: PUSH
39741: LD_INT 2
39743: ARRAY
39744: PPUSH
39745: LD_VAR 0 2
39749: PUSH
39750: LD_INT 1
39752: ARRAY
39753: PPUSH
39754: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39758: LD_VAR 0 2
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: LD_INT 500
39769: PPUSH
39770: CALL_OW 234
// wait ( 0 0$2 ) ;
39774: LD_INT 70
39776: PPUSH
39777: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39781: LD_VAR 0 2
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_INT 2
39792: PPUSH
39793: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39797: LD_INT 10
39799: PPUSH
39800: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39804: LD_VAR 0 2
39808: PUSH
39809: LD_INT 1
39811: ARRAY
39812: PPUSH
39813: LD_STRING D1a-Merc1-2
39815: PPUSH
39816: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39820: LD_INT 7
39822: PPUSH
39823: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39827: LD_VAR 0 2
39831: PUSH
39832: LD_INT 1
39834: ARRAY
39835: PPUSH
39836: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 2
39847: ARRAY
39848: PPUSH
39849: LD_INT 10
39851: PPUSH
39852: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39856: LD_VAR 0 2
39860: PUSH
39861: LD_INT 2
39863: ARRAY
39864: PPUSH
39865: LD_STRING D1a-FMerc2-2
39867: PPUSH
39868: CALL_OW 88
// wait ( 0 0$1 ) ;
39872: LD_INT 35
39874: PPUSH
39875: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39879: LD_INT 7
39881: PPUSH
39882: CALL_OW 85
// wait ( 0 0$2 ) ;
39886: LD_INT 70
39888: PPUSH
39889: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39893: LD_EXP 43
39897: PPUSH
39898: LD_STRING D1a-Saliba-1
39900: PPUSH
39901: CALL_OW 91
// KillUnit ( Saliba ) ;
39905: LD_EXP 43
39909: PPUSH
39910: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39914: LD_VAR 0 2
39918: PUSH
39919: LD_INT 3
39921: ARRAY
39922: PPUSH
39923: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39927: LD_EXP 21
39931: PPUSH
39932: CALL_OW 85
// wait ( 0 0$1 ) ;
39936: LD_INT 35
39938: PPUSH
39939: CALL_OW 67
// InGameOff ;
39943: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39947: LD_STRING M1
39949: PPUSH
39950: CALL_OW 337
// game_speed := 4 ;
39954: LD_ADDR_OWVAR 65
39958: PUSH
39959: LD_INT 4
39961: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39962: LD_INT 111
39964: PPUSH
39965: LD_INT 135
39967: PPUSH
39968: LD_INT 1
39970: PPUSH
39971: CALL_OW 331
// SaveForQuickRestart ;
39975: CALL_OW 22
// ar_run := true ;
39979: LD_ADDR_EXP 5
39983: PUSH
39984: LD_INT 1
39986: ST_TO_ADDR
// wait ( 0 0$45 ) ;
39987: LD_INT 1575
39989: PPUSH
39990: CALL_OW 67
// if GetSide ( ar_dep_s ) = 2 then
39994: LD_INT 7
39996: PPUSH
39997: CALL_OW 255
40001: PUSH
40002: LD_INT 2
40004: EQUAL
40005: IFFALSE 40017
// SetSide ( ar_dep_s , 1 ) ;
40007: LD_INT 7
40009: PPUSH
40010: LD_INT 1
40012: PPUSH
40013: CALL_OW 235
// end ;
40017: LD_VAR 0 1
40021: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
40022: LD_EXP 5
40026: IFFALSE 40386
40028: GO 40030
40030: DISABLE
40031: LD_INT 0
40033: PPUSH
40034: PPUSH
40035: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
40036: LD_ADDR_VAR 0 2
40040: PUSH
40041: LD_EXP 39
40045: PUSH
40046: LD_EXP 36
40050: PPUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 21
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 21
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: PPUSH
40079: CALL_OW 72
40083: ADD
40084: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
40085: LD_VAR 0 2
40089: PPUSH
40090: LD_INT 5
40092: PPUSH
40093: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
40097: LD_INT 5
40099: PPUSH
40100: LD_INT 1
40102: PPUSH
40103: CALL_OW 343
// k := 1 ;
40107: LD_ADDR_VAR 0 3
40111: PUSH
40112: LD_INT 1
40114: ST_TO_ADDR
// for i in tmp do
40115: LD_ADDR_VAR 0 1
40119: PUSH
40120: LD_VAR 0 2
40124: PUSH
40125: FOR_IN
40126: IFFALSE 40211
// begin if IsInUnit ( i ) then
40128: LD_VAR 0 1
40132: PPUSH
40133: CALL_OW 310
40137: IFFALSE 40148
// ComExitBuilding ( i ) ;
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 122
// if GetClass ( i ) = 3 then
40148: LD_VAR 0 1
40152: PPUSH
40153: CALL_OW 257
40157: PUSH
40158: LD_INT 3
40160: EQUAL
40161: IFFALSE 40197
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
40163: LD_VAR 0 1
40167: PPUSH
40168: LD_EXP 40
40172: PUSH
40173: LD_VAR 0 3
40177: ARRAY
40178: PPUSH
40179: CALL_OW 180
// k := k + 1 ;
40183: LD_ADDR_VAR 0 3
40187: PUSH
40188: LD_VAR 0 3
40192: PUSH
40193: LD_INT 1
40195: PLUS
40196: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
40197: LD_VAR 0 1
40201: PPUSH
40202: LD_INT 10
40204: PPUSH
40205: CALL_OW 173
// end ;
40209: GO 40125
40211: POP
40212: POP
// ar_patrol := true ;
40213: LD_ADDR_EXP 7
40217: PUSH
40218: LD_INT 1
40220: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
40221: LD_INT 10
40223: PPUSH
40224: CALL_OW 67
// for i in tmp do
40228: LD_ADDR_VAR 0 1
40232: PUSH
40233: LD_VAR 0 2
40237: PUSH
40238: FOR_IN
40239: IFFALSE 40267
// if not HasTask ( i ) then
40241: LD_VAR 0 1
40245: PPUSH
40246: CALL_OW 314
40250: NOT
40251: IFFALSE 40265
// ComMoveToArea ( i , escape_area ) ;
40253: LD_VAR 0 1
40257: PPUSH
40258: LD_INT 10
40260: PPUSH
40261: CALL_OW 113
40265: GO 40238
40267: POP
40268: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
40269: LD_ADDR_VAR 0 3
40273: PUSH
40274: LD_VAR 0 2
40278: PPUSH
40279: LD_INT 95
40281: PUSH
40282: LD_INT 10
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PPUSH
40289: CALL_OW 72
40293: ST_TO_ADDR
// if k then
40294: LD_VAR 0 3
40298: IFFALSE 40367
// for i in k do
40300: LD_ADDR_VAR 0 1
40304: PUSH
40305: LD_VAR 0 3
40309: PUSH
40310: FOR_IN
40311: IFFALSE 40365
// begin if IsInUnit ( i ) then
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 310
40322: IFFALSE 40338
// RemoveUnit ( IsInUnit ( i ) ) ;
40324: LD_VAR 0 1
40328: PPUSH
40329: CALL_OW 310
40333: PPUSH
40334: CALL_OW 64
// RemoveUnit ( i ) ;
40338: LD_VAR 0 1
40342: PPUSH
40343: CALL_OW 64
// tmp := tmp diff i ;
40347: LD_ADDR_VAR 0 2
40351: PUSH
40352: LD_VAR 0 2
40356: PUSH
40357: LD_VAR 0 1
40361: DIFF
40362: ST_TO_ADDR
// end ;
40363: GO 40310
40365: POP
40366: POP
// until tmp = [ ] ;
40367: LD_VAR 0 2
40371: PUSH
40372: EMPTY
40373: EQUAL
40374: IFFALSE 40221
// ChangeSideFog ( 5 , 5 ) ;
40376: LD_INT 5
40378: PPUSH
40379: LD_INT 5
40381: PPUSH
40382: CALL_OW 343
// end ;
40386: PPOPN 3
40388: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40389: LD_EXP 7
40393: IFFALSE 40683
40395: GO 40397
40397: DISABLE
40398: LD_INT 0
40400: PPUSH
40401: PPUSH
40402: PPUSH
// begin uc_side := 2 ;
40403: LD_ADDR_OWVAR 20
40407: PUSH
40408: LD_INT 2
40410: ST_TO_ADDR
// uc_nation := 2 ;
40411: LD_ADDR_OWVAR 21
40415: PUSH
40416: LD_INT 2
40418: ST_TO_ADDR
// InitHc ;
40419: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40423: LD_INT 1
40425: PPUSH
40426: LD_INT 1
40428: PPUSH
40429: LD_INT 6
40431: PPUSH
40432: CALL_OW 380
// un := CreateHuman ;
40436: LD_ADDR_VAR 0 2
40440: PUSH
40441: CALL_OW 44
40445: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40446: LD_INT 14
40448: PPUSH
40449: LD_INT 1
40451: PPUSH
40452: LD_INT 1
40454: PPUSH
40455: LD_INT 27
40457: PPUSH
40458: LD_INT 98
40460: PPUSH
40461: CALL 2061 0 5
// veh := CreateVehicle ;
40465: LD_ADDR_VAR 0 3
40469: PUSH
40470: CALL_OW 45
40474: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40475: LD_VAR 0 3
40479: PPUSH
40480: LD_INT 4
40482: PPUSH
40483: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40487: LD_VAR 0 3
40491: PPUSH
40492: LD_INT 179
40494: PPUSH
40495: LD_INT 135
40497: PPUSH
40498: LD_INT 0
40500: PPUSH
40501: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40505: LD_VAR 0 2
40509: PPUSH
40510: LD_VAR 0 3
40514: PPUSH
40515: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40519: LD_VAR 0 2
40523: PPUSH
40524: LD_INT 126
40526: PPUSH
40527: LD_INT 133
40529: PPUSH
40530: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40534: LD_INT 10
40536: PPUSH
40537: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40541: LD_INT 1
40543: PPUSH
40544: LD_VAR 0 3
40548: PPUSH
40549: CALL_OW 292
40553: PUSH
40554: LD_VAR 0 3
40558: PPUSH
40559: LD_INT 7
40561: PPUSH
40562: CALL_OW 296
40566: PUSH
40567: LD_INT 9
40569: LESS
40570: OR
40571: IFFALSE 40534
// ComHold ( veh ) ;
40573: LD_VAR 0 3
40577: PPUSH
40578: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40582: LD_VAR 0 2
40586: PPUSH
40587: LD_STRING D2aa-Ar1-1
40589: PPUSH
40590: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40594: LD_VAR 0 2
40598: PPUSH
40599: LD_INT 177
40601: PPUSH
40602: LD_INT 96
40604: PPUSH
40605: CALL_OW 111
// AddComExitVehicle ( un ) ;
40609: LD_VAR 0 2
40613: PPUSH
40614: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40618: LD_INT 35
40620: PPUSH
40621: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40625: LD_VAR 0 2
40629: PPUSH
40630: LD_INT 69
40632: PPUSH
40633: CALL_OW 296
40637: PUSH
40638: LD_INT 15
40640: LESS
40641: IFFALSE 40618
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40643: LD_ADDR_EXP 48
40647: PUSH
40648: LD_EXP 48
40652: PPUSH
40653: LD_INT 3
40655: PUSH
40656: LD_EXP 48
40660: PUSH
40661: LD_INT 3
40663: ARRAY
40664: PUSH
40665: LD_INT 1
40667: PLUS
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PPUSH
40673: LD_VAR 0 2
40677: PPUSH
40678: CALL 3247 0 3
40682: ST_TO_ADDR
// end ;
40683: PPOPN 3
40685: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40686: LD_INT 7
40688: PPUSH
40689: CALL_OW 255
40693: PUSH
40694: LD_INT 1
40696: EQUAL
40697: PUSH
40698: LD_INT 7
40700: PPUSH
40701: CALL_OW 301
40705: OR
40706: IFFALSE 43130
40708: GO 40710
40710: DISABLE
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
40715: LD_ADDR_VAR 0 1
40719: PUSH
40720: LD_EXP 36
40724: PPUSH
40725: LD_INT 21
40727: PUSH
40728: LD_INT 3
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PPUSH
40735: CALL_OW 72
40739: PUSH
40740: FOR_IN
40741: IFFALSE 40757
// SetSide ( i , 1 ) ;
40743: LD_VAR 0 1
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 235
40755: GO 40740
40757: POP
40758: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40759: LD_ADDR_VAR 0 2
40763: PUSH
40764: LD_INT 46
40766: PUSH
40767: LD_INT 41
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 50
40776: PUSH
40777: LD_INT 25
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 57
40786: PUSH
40787: LD_INT 75
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 75
40796: PUSH
40797: LD_INT 89
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 51
40806: PUSH
40807: LD_INT 45
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 95
40816: PUSH
40817: LD_INT 95
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 84
40826: PUSH
40827: LD_INT 77
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 101
40836: PUSH
40837: LD_INT 76
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 118
40846: PUSH
40847: LD_INT 81
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 139
40856: PUSH
40857: LD_INT 97
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 129
40866: PUSH
40867: LD_INT 114
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 154
40876: PUSH
40877: LD_INT 111
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: ST_TO_ADDR
// base_captured := true ;
40898: LD_ADDR_EXP 6
40902: PUSH
40903: LD_INT 1
40905: ST_TO_ADDR
// DialogueOn ;
40906: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40910: LD_EXP 21
40914: PPUSH
40915: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40919: LD_EXP 21
40923: PPUSH
40924: LD_STRING D2-JMM-1
40926: PPUSH
40927: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40931: LD_EXP 30
40935: PPUSH
40936: LD_STRING D2-Pow-1
40938: PPUSH
40939: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40943: LD_EXP 21
40947: PPUSH
40948: LD_STRING D2-JMM-2
40950: PPUSH
40951: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40955: LD_EXP 30
40959: PPUSH
40960: LD_STRING D2-Pow-2
40962: PPUSH
40963: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40967: LD_EXP 21
40971: PPUSH
40972: LD_STRING D2-JMM-3
40974: PPUSH
40975: CALL_OW 88
// DialogueOff ;
40979: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40983: LD_STRING M2
40985: PPUSH
40986: CALL_OW 337
// Wait ( 0 0$2 ) ;
40990: LD_INT 70
40992: PPUSH
40993: CALL_OW 67
// if IsOk ( Gary ) then
40997: LD_EXP 32
41001: PPUSH
41002: CALL_OW 302
41006: IFFALSE 41020
// Say ( Gary , D2a-Gary-1 ) ;
41008: LD_EXP 32
41012: PPUSH
41013: LD_STRING D2a-Gary-1
41015: PPUSH
41016: CALL_OW 88
// if IsOk ( Bobby ) then
41020: LD_EXP 24
41024: PPUSH
41025: CALL_OW 302
41029: IFFALSE 41043
// Say ( Bobby , D2a-Bobby-1 ) ;
41031: LD_EXP 24
41035: PPUSH
41036: LD_STRING D2a-Bobby-1
41038: PPUSH
41039: CALL_OW 88
// if IsOk ( Cyrus ) then
41043: LD_EXP 25
41047: PPUSH
41048: CALL_OW 302
41052: IFFALSE 41066
// Say ( Cyrus , D2a-Cyrus-1 ) ;
41054: LD_EXP 25
41058: PPUSH
41059: LD_STRING D2a-Cyrus-1
41061: PPUSH
41062: CALL_OW 88
// if IsOk ( Lisa ) then
41066: LD_EXP 22
41070: PPUSH
41071: CALL_OW 302
41075: IFFALSE 41089
// Say ( Lisa , D2a-Lisa-1 ) ;
41077: LD_EXP 22
41081: PPUSH
41082: LD_STRING D2a-Lisa-1
41084: PPUSH
41085: CALL_OW 88
// if IsOk ( Frank ) then
41089: LD_EXP 33
41093: PPUSH
41094: CALL_OW 302
41098: IFFALSE 41112
// Say ( Frank , D2a-Frank-1 ) ;
41100: LD_EXP 33
41104: PPUSH
41105: LD_STRING D2a-Frank-1
41107: PPUSH
41108: CALL_OW 88
// if IsOk ( Cornel ) then
41112: LD_EXP 31
41116: PPUSH
41117: CALL_OW 302
41121: IFFALSE 41135
// Say ( Cornel , D2a-Corn-1 ) ;
41123: LD_EXP 31
41127: PPUSH
41128: LD_STRING D2a-Corn-1
41130: PPUSH
41131: CALL_OW 88
// if IsOk ( Donaldson ) then
41135: LD_EXP 23
41139: PPUSH
41140: CALL_OW 302
41144: IFFALSE 41158
// Say ( Donaldson , D2a-Don-1 ) ;
41146: LD_EXP 23
41150: PPUSH
41151: LD_STRING D2a-Don-1
41153: PPUSH
41154: CALL_OW 88
// if IsOk ( Brown ) then
41158: LD_EXP 27
41162: PPUSH
41163: CALL_OW 302
41167: IFFALSE 41181
// Say ( Brown , D2a-Brown-1 ) ;
41169: LD_EXP 27
41173: PPUSH
41174: LD_STRING D2a-Brown-1
41176: PPUSH
41177: CALL_OW 88
// Wait ( 0 0$30 ) ;
41181: LD_INT 1050
41183: PPUSH
41184: CALL_OW 67
// if IsOk ( Frank ) then
41188: LD_EXP 33
41192: PPUSH
41193: CALL_OW 302
41197: IFFALSE 41463
// begin DialogueOn ;
41199: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
41203: LD_EXP 21
41207: PUSH
41208: LD_EXP 33
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PPUSH
41217: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
41221: LD_EXP 33
41225: PPUSH
41226: LD_STRING D3F-Frank-1
41228: PPUSH
41229: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
41233: LD_EXP 21
41237: PPUSH
41238: LD_STRING D3F-JMM-1
41240: PPUSH
41241: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
41245: LD_EXP 33
41249: PPUSH
41250: LD_STRING D3F-Frank-2
41252: PPUSH
41253: CALL_OW 88
// case Query ( QFrank ) of 1 :
41257: LD_STRING QFrank
41259: PPUSH
41260: CALL_OW 97
41264: PUSH
41265: LD_INT 1
41267: DOUBLE
41268: EQUAL
41269: IFTRUE 41273
41271: GO 41296
41273: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
41274: LD_EXP 21
41278: PPUSH
41279: LD_STRING D3Fa-JMM-1
41281: PPUSH
41282: CALL_OW 88
// us_scout := 1 ;
41286: LD_ADDR_EXP 8
41290: PUSH
41291: LD_INT 1
41293: ST_TO_ADDR
// end ; 2 :
41294: GO 41459
41296: LD_INT 2
41298: DOUBLE
41299: EQUAL
41300: IFTRUE 41304
41302: GO 41426
41304: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
41305: LD_EXP 21
41309: PPUSH
41310: LD_STRING D3Fb-JMM-1
41312: PPUSH
41313: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
41317: LD_EXP 33
41321: PPUSH
41322: LD_STRING D3Fb-Frank-1
41324: PPUSH
41325: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
41329: LD_STRING QFrank2
41331: PPUSH
41332: CALL_OW 97
41336: PUSH
41337: LD_INT 1
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41345
41343: GO 41392
41345: POP
// begin us_scout := 2 ;
41346: LD_ADDR_EXP 8
41350: PUSH
41351: LD_INT 2
41353: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
41354: LD_EXP 21
41358: PPUSH
41359: LD_STRING D3Fba-JMM-1
41361: PPUSH
41362: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
41366: LD_EXP 33
41370: PPUSH
41371: LD_STRING D3Fba-Frank-1
41373: PPUSH
41374: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
41378: LD_EXP 21
41382: PPUSH
41383: LD_STRING D3Fba-JMM-2
41385: PPUSH
41386: CALL_OW 88
// end ; 2 :
41390: GO 41424
41392: LD_INT 2
41394: DOUBLE
41395: EQUAL
41396: IFTRUE 41400
41398: GO 41423
41400: POP
// begin us_scout := 0 ;
41401: LD_ADDR_EXP 8
41405: PUSH
41406: LD_INT 0
41408: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
41409: LD_EXP 21
41413: PPUSH
41414: LD_STRING D3Fbb-JMM-1
41416: PPUSH
41417: CALL_OW 88
// end ; end ;
41421: GO 41424
41423: POP
// end ; 3 :
41424: GO 41459
41426: LD_INT 3
41428: DOUBLE
41429: EQUAL
41430: IFTRUE 41434
41432: GO 41458
41434: POP
// begin us_scout := - 1 ;
41435: LD_ADDR_EXP 8
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41444: LD_EXP 21
41448: PPUSH
41449: LD_STRING D3Fc-JMM-1
41451: PPUSH
41452: CALL_OW 88
// end ; end ;
41456: GO 41459
41458: POP
// DialogueOff ;
41459: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41463: LD_EXP 8
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: IN
41479: IFFALSE 41483
// exit ;
41481: GO 43130
// if us_scout in [ 1 , 2 ] then
41483: LD_EXP 8
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: IN
41498: IFFALSE 42197
// begin if IsInUnit ( Frank ) then
41500: LD_EXP 33
41504: PPUSH
41505: CALL_OW 310
41509: IFFALSE 41520
// ComExitBuilding ( Frank ) ;
41511: LD_EXP 33
41515: PPUSH
41516: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41520: LD_EXP 33
41524: PPUSH
41525: CALL_OW 311
41529: IFFALSE 41540
// ComExitVehicle ( Frank ) ;
41531: LD_EXP 33
41535: PPUSH
41536: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41540: LD_EXP 33
41544: PPUSH
41545: LD_INT 4
41547: PPUSH
41548: CALL_OW 235
// wait ( 0 0$1 ) ;
41552: LD_INT 35
41554: PPUSH
41555: CALL_OW 67
// if us_scout = 2 then
41559: LD_EXP 8
41563: PUSH
41564: LD_INT 2
41566: EQUAL
41567: IFFALSE 41935
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41569: LD_EXP 33
41573: PPUSH
41574: LD_INT 75
41576: PPUSH
41577: LD_INT 63
41579: PPUSH
41580: CALL_OW 111
// AddComHold ( Frank ) ;
41584: LD_EXP 33
41588: PPUSH
41589: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41593: LD_EXP 33
41597: PPUSH
41598: LD_INT 770
41600: PPUSH
41601: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41605: LD_EXP 33
41609: PPUSH
41610: LD_INT 100
41612: PPUSH
41613: LD_INT 75
41615: PPUSH
41616: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41620: LD_EXP 33
41624: PPUSH
41625: LD_INT 123
41627: PPUSH
41628: LD_INT 103
41630: PPUSH
41631: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41635: LD_EXP 33
41639: PPUSH
41640: LD_INT 138
41642: PPUSH
41643: LD_INT 108
41645: PPUSH
41646: CALL_OW 171
// AddComHold ( Frank ) ;
41650: LD_EXP 33
41654: PPUSH
41655: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41659: LD_INT 35
41661: PPUSH
41662: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41666: LD_EXP 33
41670: PPUSH
41671: LD_INT 138
41673: PPUSH
41674: LD_INT 108
41676: PPUSH
41677: CALL_OW 307
41681: IFFALSE 41659
// AddComMoveXY ( Frank , 125 , 132 ) ;
41683: LD_EXP 33
41687: PPUSH
41688: LD_INT 125
41690: PPUSH
41691: LD_INT 132
41693: PPUSH
41694: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41698: LD_INT 35
41700: PPUSH
41701: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41705: LD_INT 1
41707: PPUSH
41708: LD_EXP 33
41712: PPUSH
41713: CALL_OW 292
41717: PUSH
41718: LD_EXP 33
41722: PPUSH
41723: LD_INT 7
41725: PPUSH
41726: CALL_OW 296
41730: PUSH
41731: LD_INT 7
41733: LESS
41734: OR
41735: IFFALSE 41698
// DialogueOn ;
41737: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41741: LD_EXP 33
41745: PPUSH
41746: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41750: LD_INT 10
41752: PPUSH
41753: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41757: LD_EXP 21
41761: PPUSH
41762: LD_STRING D4Fa-JMM-1
41764: PPUSH
41765: CALL_OW 88
// for i in points do
41769: LD_ADDR_VAR 0 1
41773: PUSH
41774: LD_VAR 0 2
41778: PUSH
41779: FOR_IN
41780: IFFALSE 41838
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41782: LD_VAR 0 1
41786: PUSH
41787: LD_INT 1
41789: ARRAY
41790: PPUSH
41791: LD_VAR 0 1
41795: PUSH
41796: LD_INT 2
41798: ARRAY
41799: PPUSH
41800: LD_INT 1
41802: PPUSH
41803: LD_INT 20
41805: NEG
41806: PPUSH
41807: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41811: LD_VAR 0 1
41815: PUSH
41816: LD_INT 1
41818: ARRAY
41819: PPUSH
41820: LD_VAR 0 1
41824: PUSH
41825: LD_INT 2
41827: ARRAY
41828: PPUSH
41829: LD_INT 1
41831: PPUSH
41832: CALL_OW 331
// end ;
41836: GO 41779
41838: POP
41839: POP
// dwait ( 0 0$0.5 ) ;
41840: LD_INT 18
41842: PPUSH
41843: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41847: LD_INT 42
41849: PPUSH
41850: LD_INT 27
41852: PPUSH
41853: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41857: LD_EXP 33
41861: PPUSH
41862: LD_STRING D4Fa-Frank-1
41864: PPUSH
41865: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41869: LD_INT 18
41871: PPUSH
41872: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41876: LD_EXP 21
41880: PPUSH
41881: LD_STRING D4Fa-JMM-2
41883: PPUSH
41884: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41888: LD_INT 118
41890: PPUSH
41891: LD_INT 80
41893: PPUSH
41894: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41898: LD_EXP 33
41902: PPUSH
41903: LD_STRING D4Fa-Frank-2
41905: PPUSH
41906: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41910: LD_INT 10
41912: PPUSH
41913: CALL_OW 68
// DialogueOff ;
41917: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41921: LD_EXP 33
41925: PPUSH
41926: LD_INT 1
41928: PPUSH
41929: CALL_OW 235
// end else
41933: GO 42197
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41935: LD_INT 2
41937: PPUSH
41938: LD_INT 4
41940: PPUSH
41941: LD_INT 2
41943: PPUSH
41944: LD_INT 1
41946: PPUSH
41947: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41951: LD_EXP 33
41955: PPUSH
41956: LD_INT 75
41958: PPUSH
41959: LD_INT 63
41961: PPUSH
41962: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41966: LD_EXP 33
41970: PPUSH
41971: LD_INT 175
41973: PPUSH
41974: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41978: LD_EXP 33
41982: PPUSH
41983: LD_INT 102
41985: PPUSH
41986: LD_INT 76
41988: PPUSH
41989: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41993: LD_EXP 33
41997: PPUSH
41998: LD_INT 108
42000: PPUSH
42001: LD_INT 70
42003: PPUSH
42004: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42008: LD_INT 35
42010: PPUSH
42011: CALL_OW 67
// until See ( 2 , Frank ) ;
42015: LD_INT 2
42017: PPUSH
42018: LD_EXP 33
42022: PPUSH
42023: CALL_OW 292
42027: IFFALSE 42008
// ComMoveXY ( Frank , 112 , 118 ) ;
42029: LD_EXP 33
42033: PPUSH
42034: LD_INT 112
42036: PPUSH
42037: LD_INT 118
42039: PPUSH
42040: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
42044: LD_EXP 33
42048: PPUSH
42049: CALL_OW 256
42053: PUSH
42054: LD_INT 750
42056: GREATEREQUAL
42057: IFFALSE 42071
// SetLives ( Frank , 700 ) ;
42059: LD_EXP 33
42063: PPUSH
42064: LD_INT 700
42066: PPUSH
42067: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42071: LD_INT 35
42073: PPUSH
42074: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
42078: LD_INT 1
42080: PPUSH
42081: LD_EXP 33
42085: PPUSH
42086: CALL_OW 292
42090: PUSH
42091: LD_EXP 33
42095: PPUSH
42096: LD_INT 7
42098: PPUSH
42099: CALL_OW 296
42103: PUSH
42104: LD_INT 17
42106: LESS
42107: OR
42108: IFFALSE 42071
// DialogueOn ;
42110: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
42114: LD_EXP 33
42118: PPUSH
42119: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
42123: LD_EXP 33
42127: PPUSH
42128: LD_STRING D4Fb-Frank-1
42130: PPUSH
42131: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
42135: LD_EXP 21
42139: PPUSH
42140: LD_STRING D4Fb-JMM-1
42142: PPUSH
42143: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
42147: LD_INT 2
42149: PPUSH
42150: LD_STRING D4Fb-FSci1-1
42152: PPUSH
42153: CALL 2297 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
42157: LD_EXP 33
42161: PPUSH
42162: LD_STRING D4Fb-Frank-2
42164: PPUSH
42165: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
42169: LD_EXP 21
42173: PPUSH
42174: LD_STRING D4Fb-JMM-2
42176: PPUSH
42177: CALL_OW 88
// DialogueOff ;
42181: CALL_OW 7
// SetSide ( Frank , 1 ) ;
42185: LD_EXP 33
42189: PPUSH
42190: LD_INT 1
42192: PPUSH
42193: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
42197: LD_EXP 34
42201: PPUSH
42202: CALL_OW 302
42206: PUSH
42207: LD_EXP 33
42211: NOT
42212: AND
42213: IFFALSE 42361
// begin DialogueOn ;
42215: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
42219: LD_EXP 21
42223: PUSH
42224: LD_EXP 34
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PPUSH
42233: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
42237: LD_EXP 34
42241: PPUSH
42242: LD_STRING D3Y-Yam-1
42244: PPUSH
42245: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
42249: LD_EXP 21
42253: PPUSH
42254: LD_STRING D3Y-JMM-1
42256: PPUSH
42257: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
42261: LD_EXP 34
42265: PPUSH
42266: LD_STRING D3Y-Yam-2
42268: PPUSH
42269: CALL_OW 88
// case Query ( QYamoko ) of 1 :
42273: LD_STRING QYamoko
42275: PPUSH
42276: CALL_OW 97
42280: PUSH
42281: LD_INT 1
42283: DOUBLE
42284: EQUAL
42285: IFTRUE 42289
42287: GO 42324
42289: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
42290: LD_EXP 21
42294: PPUSH
42295: LD_STRING D3Ya-JMM-1
42297: PPUSH
42298: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
42302: LD_EXP 34
42306: PPUSH
42307: LD_STRING D3Ya-Yam-1
42309: PPUSH
42310: CALL_OW 88
// us_scout := 1 ;
42314: LD_ADDR_EXP 8
42318: PUSH
42319: LD_INT 1
42321: ST_TO_ADDR
// end ; 2 :
42322: GO 42357
42324: LD_INT 2
42326: DOUBLE
42327: EQUAL
42328: IFTRUE 42332
42330: GO 42356
42332: POP
// begin us_scout := - 1 ;
42333: LD_ADDR_EXP 8
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
42342: LD_EXP 21
42346: PPUSH
42347: LD_STRING D3Yb-JMM-1
42349: PPUSH
42350: CALL_OW 88
// end ; end ;
42354: GO 42357
42356: POP
// DialogueOff ;
42357: CALL_OW 7
// end ; if Frank then
42361: LD_EXP 33
42365: IFFALSE 42369
// exit ;
42367: GO 43130
// if us_scout in [ - 1 , 0 ] then
42369: LD_EXP 8
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: IN
42385: IFFALSE 42389
// exit ;
42387: GO 43130
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
42389: LD_ADDR_EXP 8
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: LIST
42407: PUSH
42408: LD_OWVAR 67
42412: ARRAY
42413: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
42414: LD_EXP 8
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: IN
42429: IFFALSE 43130
// begin if IsInUnit ( Kikuchi ) then
42431: LD_EXP 34
42435: PPUSH
42436: CALL_OW 310
42440: IFFALSE 42451
// ComExitBuilding ( Kikuchi ) ;
42442: LD_EXP 34
42446: PPUSH
42447: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42451: LD_EXP 34
42455: PPUSH
42456: CALL_OW 311
42460: IFFALSE 42471
// ComExitVehicle ( Kikuchi ) ;
42462: LD_EXP 34
42466: PPUSH
42467: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42471: LD_EXP 34
42475: PPUSH
42476: LD_INT 4
42478: PPUSH
42479: CALL_OW 235
// wait ( 0 0$1 ) ;
42483: LD_INT 35
42485: PPUSH
42486: CALL_OW 67
// if us_scout = 2 then
42490: LD_EXP 8
42494: PUSH
42495: LD_INT 2
42497: EQUAL
42498: IFFALSE 42878
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42500: LD_EXP 34
42504: PPUSH
42505: LD_INT 75
42507: PPUSH
42508: LD_INT 63
42510: PPUSH
42511: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42515: LD_EXP 34
42519: PPUSH
42520: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42524: LD_EXP 34
42528: PPUSH
42529: LD_INT 770
42531: PPUSH
42532: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42536: LD_EXP 34
42540: PPUSH
42541: LD_INT 100
42543: PPUSH
42544: LD_INT 75
42546: PPUSH
42547: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42551: LD_EXP 34
42555: PPUSH
42556: LD_INT 123
42558: PPUSH
42559: LD_INT 103
42561: PPUSH
42562: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42566: LD_EXP 34
42570: PPUSH
42571: LD_INT 138
42573: PPUSH
42574: LD_INT 108
42576: PPUSH
42577: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42581: LD_EXP 34
42585: PPUSH
42586: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42590: LD_INT 35
42592: PPUSH
42593: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42597: LD_EXP 34
42601: PPUSH
42602: LD_INT 138
42604: PPUSH
42605: LD_INT 108
42607: PPUSH
42608: CALL_OW 307
42612: IFFALSE 42590
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42614: LD_EXP 34
42618: PPUSH
42619: LD_INT 125
42621: PPUSH
42622: LD_INT 132
42624: PPUSH
42625: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42629: LD_INT 35
42631: PPUSH
42632: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42636: LD_INT 1
42638: PPUSH
42639: LD_EXP 34
42643: PPUSH
42644: CALL_OW 292
42648: PUSH
42649: LD_EXP 34
42653: PPUSH
42654: LD_INT 7
42656: PPUSH
42657: CALL_OW 296
42661: PUSH
42662: LD_INT 7
42664: LESS
42665: OR
42666: IFFALSE 42629
// DialogueOn ;
42668: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42672: LD_EXP 34
42676: PPUSH
42677: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42681: LD_INT 10
42683: PPUSH
42684: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42688: LD_EXP 34
42692: PPUSH
42693: LD_STRING D4Ya-Yam-1
42695: PPUSH
42696: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42700: LD_EXP 21
42704: PPUSH
42705: LD_STRING D4Ya-JMM-1
42707: PPUSH
42708: CALL_OW 88
// for i in points do
42712: LD_ADDR_VAR 0 1
42716: PUSH
42717: LD_VAR 0 2
42721: PUSH
42722: FOR_IN
42723: IFFALSE 42781
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42725: LD_VAR 0 1
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PPUSH
42734: LD_VAR 0 1
42738: PUSH
42739: LD_INT 2
42741: ARRAY
42742: PPUSH
42743: LD_INT 1
42745: PPUSH
42746: LD_INT 20
42748: NEG
42749: PPUSH
42750: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42754: LD_VAR 0 1
42758: PUSH
42759: LD_INT 1
42761: ARRAY
42762: PPUSH
42763: LD_VAR 0 1
42767: PUSH
42768: LD_INT 2
42770: ARRAY
42771: PPUSH
42772: LD_INT 1
42774: PPUSH
42775: CALL_OW 331
// end ;
42779: GO 42722
42781: POP
42782: POP
// dwait ( 0 0$0.5 ) ;
42783: LD_INT 18
42785: PPUSH
42786: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42790: LD_INT 42
42792: PPUSH
42793: LD_INT 27
42795: PPUSH
42796: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42800: LD_EXP 34
42804: PPUSH
42805: LD_STRING D4Ya-Yam-2
42807: PPUSH
42808: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42812: LD_INT 18
42814: PPUSH
42815: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42819: LD_INT 118
42821: PPUSH
42822: LD_INT 80
42824: PPUSH
42825: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42829: LD_EXP 21
42833: PPUSH
42834: LD_STRING D4Ya-JMM-2
42836: PPUSH
42837: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42841: LD_EXP 34
42845: PPUSH
42846: LD_STRING D4Ya-Yam-3
42848: PPUSH
42849: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42853: LD_INT 10
42855: PPUSH
42856: CALL_OW 68
// DialogueOff ;
42860: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42864: LD_EXP 34
42868: PPUSH
42869: LD_INT 1
42871: PPUSH
42872: CALL_OW 235
// end else
42876: GO 43130
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42878: LD_INT 2
42880: PPUSH
42881: LD_INT 4
42883: PPUSH
42884: LD_INT 2
42886: PPUSH
42887: LD_INT 1
42889: PPUSH
42890: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42894: LD_EXP 34
42898: PPUSH
42899: LD_INT 75
42901: PPUSH
42902: LD_INT 63
42904: PPUSH
42905: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42909: LD_EXP 34
42913: PPUSH
42914: LD_INT 175
42916: PPUSH
42917: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42921: LD_EXP 34
42925: PPUSH
42926: LD_INT 102
42928: PPUSH
42929: LD_INT 76
42931: PPUSH
42932: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42936: LD_EXP 34
42940: PPUSH
42941: LD_INT 108
42943: PPUSH
42944: LD_INT 70
42946: PPUSH
42947: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42951: LD_INT 35
42953: PPUSH
42954: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42958: LD_INT 2
42960: PPUSH
42961: LD_EXP 34
42965: PPUSH
42966: CALL_OW 292
42970: IFFALSE 42951
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42972: LD_EXP 34
42976: PPUSH
42977: LD_INT 112
42979: PPUSH
42980: LD_INT 118
42982: PPUSH
42983: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42987: LD_EXP 34
42991: PPUSH
42992: CALL_OW 256
42996: PUSH
42997: LD_INT 750
42999: GREATEREQUAL
43000: IFFALSE 43014
// SetLives ( Kikuchi , 700 ) ;
43002: LD_EXP 34
43006: PPUSH
43007: LD_INT 700
43009: PPUSH
43010: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
43014: LD_INT 35
43016: PPUSH
43017: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
43021: LD_INT 1
43023: PPUSH
43024: LD_EXP 34
43028: PPUSH
43029: CALL_OW 292
43033: PUSH
43034: LD_EXP 34
43038: PPUSH
43039: LD_INT 7
43041: PPUSH
43042: CALL_OW 296
43046: PUSH
43047: LD_INT 17
43049: LESS
43050: OR
43051: IFFALSE 43014
// DialogueOn ;
43053: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
43057: LD_EXP 34
43061: PPUSH
43062: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
43066: LD_EXP 34
43070: PPUSH
43071: LD_STRING D4Yb-Yam-1
43073: PPUSH
43074: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
43078: LD_EXP 21
43082: PPUSH
43083: LD_STRING D4Yb-JMM-1
43085: PPUSH
43086: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
43090: LD_EXP 34
43094: PPUSH
43095: LD_STRING D4Yb-Yam-2
43097: PPUSH
43098: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
43102: LD_EXP 21
43106: PPUSH
43107: LD_STRING D4Yb-JMM-2
43109: PPUSH
43110: CALL_OW 88
// DialogueOff ;
43114: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
43118: LD_EXP 34
43122: PPUSH
43123: LD_INT 1
43125: PPUSH
43126: CALL_OW 235
// end ; end ; end ;
43130: PPOPN 2
43132: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
43133: LD_EXP 6
43137: IFFALSE 44170
43139: GO 43141
43141: DISABLE
43142: LD_INT 0
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
// begin enable ;
43148: ENABLE
// if not seen [ 1 ] then
43149: LD_EXP 9
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: NOT
43158: IFFALSE 43338
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
43160: LD_ADDR_VAR 0 2
43164: PUSH
43165: LD_INT 22
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 25
43180: PUSH
43181: LD_INT 11
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 33
43190: PUSH
43191: LD_INT 4
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PPUSH
43207: CALL_OW 69
43211: ST_TO_ADDR
// if tmp then
43212: LD_VAR 0 2
43216: IFFALSE 43338
// for i in tmp do
43218: LD_ADDR_VAR 0 1
43222: PUSH
43223: LD_VAR 0 2
43227: PUSH
43228: FOR_IN
43229: IFFALSE 43336
// if See ( 1 , i ) then
43231: LD_INT 1
43233: PPUSH
43234: LD_VAR 0 1
43238: PPUSH
43239: CALL_OW 292
43243: IFFALSE 43334
// begin seen := Replace ( seen , 1 , true ) ;
43245: LD_ADDR_EXP 9
43249: PUSH
43250: LD_EXP 9
43254: PPUSH
43255: LD_INT 1
43257: PPUSH
43258: LD_INT 1
43260: PPUSH
43261: CALL_OW 1
43265: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43266: LD_INT 1
43268: PPUSH
43269: CALL 2119 0 1
43273: IFFALSE 43334
// begin DialogueOn ;
43275: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43279: LD_VAR 0 1
43283: PPUSH
43284: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43288: LD_INT 10
43290: PPUSH
43291: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
43295: LD_ADDR_VAR 0 3
43299: PUSH
43300: LD_INT 1
43302: PPUSH
43303: LD_STRING D5a-Sol2-1
43305: PPUSH
43306: CALL 2297 0 2
43310: ST_TO_ADDR
// if not un then
43311: LD_VAR 0 3
43315: NOT
43316: IFFALSE 43328
// SayRand ( sex_female , D5a-FSol2-1 ) ;
43318: LD_INT 2
43320: PPUSH
43321: LD_STRING D5a-FSol2-1
43323: PPUSH
43324: CALL 2297 0 2
// DialogueOff ;
43328: CALL_OW 7
// break ;
43332: GO 43336
// end ; end ;
43334: GO 43228
43336: POP
43337: POP
// end ; if not seen [ 2 ] then
43338: LD_EXP 9
43342: PUSH
43343: LD_INT 2
43345: ARRAY
43346: NOT
43347: IFFALSE 43572
// begin can_kamikazed := true ;
43349: LD_ADDR_EXP 10
43353: PUSH
43354: LD_INT 1
43356: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
43357: LD_ADDR_VAR 0 2
43361: PUSH
43362: LD_INT 22
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 25
43374: PUSH
43375: LD_INT 17
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PPUSH
43386: CALL_OW 69
43390: ST_TO_ADDR
// if tmp then
43391: LD_VAR 0 2
43395: IFFALSE 43572
// for i in tmp do
43397: LD_ADDR_VAR 0 1
43401: PUSH
43402: LD_VAR 0 2
43406: PUSH
43407: FOR_IN
43408: IFFALSE 43570
// if See ( 1 , i ) then
43410: LD_INT 1
43412: PPUSH
43413: LD_VAR 0 1
43417: PPUSH
43418: CALL_OW 292
43422: IFFALSE 43568
// begin seen := Replace ( seen , 2 , true ) ;
43424: LD_ADDR_EXP 9
43428: PUSH
43429: LD_EXP 9
43433: PPUSH
43434: LD_INT 2
43436: PPUSH
43437: LD_INT 1
43439: PPUSH
43440: CALL_OW 1
43444: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43445: LD_INT 1
43447: PPUSH
43448: CALL 2119 0 1
43452: IFFALSE 43568
// begin DialogueOn ;
43454: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43458: LD_VAR 0 1
43462: PPUSH
43463: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43467: LD_INT 10
43469: PPUSH
43470: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43474: LD_ADDR_VAR 0 3
43478: PUSH
43479: LD_INT 1
43481: PPUSH
43482: LD_STRING D5b-Sol1-1
43484: PPUSH
43485: CALL 2297 0 2
43489: ST_TO_ADDR
// if not un then
43490: LD_VAR 0 3
43494: NOT
43495: IFFALSE 43513
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43497: LD_ADDR_VAR 0 3
43501: PUSH
43502: LD_INT 2
43504: PPUSH
43505: LD_STRING D5b-FSol1-1
43507: PPUSH
43508: CALL 2297 0 2
43512: ST_TO_ADDR
// if un then
43513: LD_VAR 0 3
43517: IFFALSE 43562
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43519: LD_ADDR_VAR 0 4
43523: PUSH
43524: LD_INT 1
43526: PPUSH
43527: LD_STRING D5b-Sol2-1
43529: PPUSH
43530: LD_VAR 0 3
43534: PPUSH
43535: CALL 2523 0 3
43539: ST_TO_ADDR
// if not un2 then
43540: LD_VAR 0 4
43544: NOT
43545: IFFALSE 43562
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43547: LD_INT 2
43549: PPUSH
43550: LD_STRING D5b-FSol2-1
43552: PPUSH
43553: LD_VAR 0 3
43557: PPUSH
43558: CALL 2523 0 3
// end ; DialogueOff ;
43562: CALL_OW 7
// break ;
43566: GO 43570
// end ; end ;
43568: GO 43407
43570: POP
43571: POP
// end ; if not seen [ 3 ] then
43572: LD_EXP 9
43576: PUSH
43577: LD_INT 3
43579: ARRAY
43580: NOT
43581: IFFALSE 43755
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43583: LD_ADDR_VAR 0 2
43587: PUSH
43588: LD_INT 22
43590: PUSH
43591: LD_INT 2
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 33
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PPUSH
43612: CALL_OW 69
43616: ST_TO_ADDR
// if tmp then
43617: LD_VAR 0 2
43621: IFFALSE 43755
// for i in tmp do
43623: LD_ADDR_VAR 0 1
43627: PUSH
43628: LD_VAR 0 2
43632: PUSH
43633: FOR_IN
43634: IFFALSE 43753
// if See ( 1 , i ) then
43636: LD_INT 1
43638: PPUSH
43639: LD_VAR 0 1
43643: PPUSH
43644: CALL_OW 292
43648: IFFALSE 43751
// begin seen := Replace ( seen , 3 , true ) ;
43650: LD_ADDR_EXP 9
43654: PUSH
43655: LD_EXP 9
43659: PPUSH
43660: LD_INT 3
43662: PPUSH
43663: LD_INT 1
43665: PPUSH
43666: CALL_OW 1
43670: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43671: LD_INT 1
43673: PPUSH
43674: CALL 2119 0 1
43678: IFFALSE 43751
// begin DialogueOn ;
43680: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43684: LD_VAR 0 1
43688: PPUSH
43689: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43693: LD_INT 10
43695: PPUSH
43696: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_INT 1
43707: PPUSH
43708: LD_STRING D8-Sol1-1
43710: PPUSH
43711: CALL 2297 0 2
43715: ST_TO_ADDR
// if not un then
43716: LD_VAR 0 3
43720: NOT
43721: IFFALSE 43733
// SayRand ( sex_female , D8-FSol1-1 ) ;
43723: LD_INT 2
43725: PPUSH
43726: LD_STRING D8-FSol1-1
43728: PPUSH
43729: CALL 2297 0 2
// Say ( JMM , D8-JMM-1 ) ;
43733: LD_EXP 21
43737: PPUSH
43738: LD_STRING D8-JMM-1
43740: PPUSH
43741: CALL_OW 88
// DialogueOff ;
43745: CALL_OW 7
// break ;
43749: GO 43753
// end ; end ;
43751: GO 43633
43753: POP
43754: POP
// end ; if not seen [ 4 ] then
43755: LD_EXP 9
43759: PUSH
43760: LD_INT 4
43762: ARRAY
43763: NOT
43764: IFFALSE 43926
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43766: LD_ADDR_VAR 0 2
43770: PUSH
43771: LD_INT 22
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 33
43783: PUSH
43784: LD_INT 5
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PPUSH
43795: CALL_OW 69
43799: ST_TO_ADDR
// if tmp then
43800: LD_VAR 0 2
43804: IFFALSE 43926
// for i in tmp do
43806: LD_ADDR_VAR 0 1
43810: PUSH
43811: LD_VAR 0 2
43815: PUSH
43816: FOR_IN
43817: IFFALSE 43924
// if See ( 1 , i ) then
43819: LD_INT 1
43821: PPUSH
43822: LD_VAR 0 1
43826: PPUSH
43827: CALL_OW 292
43831: IFFALSE 43922
// begin seen := Replace ( seen , 4 , true ) ;
43833: LD_ADDR_EXP 9
43837: PUSH
43838: LD_EXP 9
43842: PPUSH
43843: LD_INT 4
43845: PPUSH
43846: LD_INT 1
43848: PPUSH
43849: CALL_OW 1
43853: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43854: LD_INT 1
43856: PPUSH
43857: CALL 2119 0 1
43861: IFFALSE 43922
// begin DialogueOn ;
43863: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43867: LD_VAR 0 1
43871: PPUSH
43872: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43876: LD_INT 10
43878: PPUSH
43879: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 1
43890: PPUSH
43891: LD_STRING D5a-Sol1-1
43893: PPUSH
43894: CALL 2297 0 2
43898: ST_TO_ADDR
// if not un then
43899: LD_VAR 0 3
43903: NOT
43904: IFFALSE 43916
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43906: LD_INT 2
43908: PPUSH
43909: LD_STRING D5a-FSol1-1
43911: PPUSH
43912: CALL 2297 0 2
// DialogueOff ;
43916: CALL_OW 7
// break ;
43920: GO 43924
// end ; end ;
43922: GO 43816
43924: POP
43925: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43926: LD_EXP 9
43930: PUSH
43931: LD_INT 5
43933: ARRAY
43934: NOT
43935: PUSH
43936: LD_EXP 9
43940: PUSH
43941: LD_INT 3
43943: ARRAY
43944: AND
43945: IFFALSE 44119
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43947: LD_ADDR_VAR 0 2
43951: PUSH
43952: LD_INT 22
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 34
43964: PUSH
43965: LD_INT 31
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL_OW 69
43980: ST_TO_ADDR
// if tmp then
43981: LD_VAR 0 2
43985: IFFALSE 44119
// for i in tmp do
43987: LD_ADDR_VAR 0 1
43991: PUSH
43992: LD_VAR 0 2
43996: PUSH
43997: FOR_IN
43998: IFFALSE 44117
// if See ( 1 , i ) then
44000: LD_INT 1
44002: PPUSH
44003: LD_VAR 0 1
44007: PPUSH
44008: CALL_OW 292
44012: IFFALSE 44115
// begin seen := Replace ( seen , 5 , true ) ;
44014: LD_ADDR_EXP 9
44018: PUSH
44019: LD_EXP 9
44023: PPUSH
44024: LD_INT 5
44026: PPUSH
44027: LD_INT 1
44029: PPUSH
44030: CALL_OW 1
44034: ST_TO_ADDR
// if CanSayRand ( 1 ) then
44035: LD_INT 1
44037: PPUSH
44038: CALL 2119 0 1
44042: IFFALSE 44115
// begin DialogueOn ;
44044: CALL_OW 6
// CenterNowOnUnits ( i ) ;
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
44057: LD_INT 10
44059: PPUSH
44060: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
44064: LD_ADDR_VAR 0 3
44068: PUSH
44069: LD_INT 1
44071: PPUSH
44072: LD_STRING D8a-Sol2-1
44074: PPUSH
44075: CALL 2297 0 2
44079: ST_TO_ADDR
// if not un then
44080: LD_VAR 0 3
44084: NOT
44085: IFFALSE 44097
// SayRand ( sex_female , D8a-FSol2-1 ) ;
44087: LD_INT 2
44089: PPUSH
44090: LD_STRING D8a-FSol2-1
44092: PPUSH
44093: CALL 2297 0 2
// Say ( JMM , D8a-JMM-1 ) ;
44097: LD_EXP 21
44101: PPUSH
44102: LD_STRING D8a-JMM-1
44104: PPUSH
44105: CALL_OW 88
// DialogueOff ;
44109: CALL_OW 7
// break ;
44113: GO 44117
// end ; end ;
44115: GO 43997
44117: POP
44118: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
44119: LD_EXP 9
44123: PUSH
44124: LD_INT 1
44126: ARRAY
44127: PUSH
44128: LD_EXP 9
44132: PUSH
44133: LD_INT 2
44135: ARRAY
44136: AND
44137: PUSH
44138: LD_EXP 9
44142: PUSH
44143: LD_INT 3
44145: ARRAY
44146: AND
44147: PUSH
44148: LD_EXP 9
44152: PUSH
44153: LD_INT 4
44155: ARRAY
44156: AND
44157: PUSH
44158: LD_EXP 9
44162: PUSH
44163: LD_INT 5
44165: ARRAY
44166: AND
44167: IFFALSE 44170
// disable ;
44169: DISABLE
// end ;
44170: PPOPN 4
44172: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
44173: LD_EXP 10
44177: PUSH
44178: LD_EXP 11
44182: AND
44183: IFFALSE 44381
44185: GO 44187
44187: DISABLE
44188: LD_INT 0
44190: PPUSH
// begin DialogueOn ;
44191: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
44195: LD_EXP 11
44199: PPUSH
44200: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
44204: LD_ADDR_VAR 0 1
44208: PUSH
44209: LD_INT 1
44211: PPUSH
44212: LD_STRING D5c-Sol1-1
44214: PPUSH
44215: CALL 2297 0 2
44219: ST_TO_ADDR
// if not un then
44220: LD_VAR 0 1
44224: NOT
44225: IFFALSE 44243
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
44227: LD_ADDR_VAR 0 1
44231: PUSH
44232: LD_INT 2
44234: PPUSH
44235: LD_STRING D5c-FSol1-1
44237: PPUSH
44238: CALL 2297 0 2
44242: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
44243: LD_EXP 21
44247: PPUSH
44248: LD_STRING D5c-JMM-1
44250: PPUSH
44251: CALL_OW 88
// if IsOk ( Lisa ) then
44255: LD_EXP 22
44259: PPUSH
44260: CALL_OW 302
44264: IFFALSE 44280
// Say ( Lisa , D5d-Lisa-1 ) else
44266: LD_EXP 22
44270: PPUSH
44271: LD_STRING D5d-Lisa-1
44273: PPUSH
44274: CALL_OW 88
44278: GO 44365
// if IsOk ( Cyrus ) then
44280: LD_EXP 25
44284: PPUSH
44285: CALL_OW 302
44289: IFFALSE 44305
// Say ( Cyrus , D5d-Cyrus-1 ) else
44291: LD_EXP 25
44295: PPUSH
44296: LD_STRING D5d-Cyrus-1
44298: PPUSH
44299: CALL_OW 88
44303: GO 44365
// if IsOk ( Gary ) then
44305: LD_EXP 32
44309: PPUSH
44310: CALL_OW 302
44314: IFFALSE 44330
// Say ( Gary , D5d-Gary-1 ) else
44316: LD_EXP 32
44320: PPUSH
44321: LD_STRING D5d-Gary-1
44323: PPUSH
44324: CALL_OW 88
44328: GO 44365
// if GetSex ( un ) = sex_male then
44330: LD_VAR 0 1
44334: PPUSH
44335: CALL_OW 258
44339: PUSH
44340: LD_INT 1
44342: EQUAL
44343: IFFALSE 44359
// Say ( un , D5d-Sol1-1 ) else
44345: LD_VAR 0 1
44349: PPUSH
44350: LD_STRING D5d-Sol1-1
44352: PPUSH
44353: CALL_OW 88
44357: GO 44365
// begin DialogueOff ;
44359: CALL_OW 7
// exit ;
44363: GO 44381
// end ; Say ( JMM , D5d-JMM-1 ) ;
44365: LD_EXP 21
44369: PPUSH
44370: LD_STRING D5d-JMM-1
44372: PPUSH
44373: CALL_OW 88
// DialogueOff ;
44377: CALL_OW 7
// end ;
44381: PPOPN 1
44383: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
44384: LD_INT 1
44386: PPUSH
44387: LD_INT 17
44389: PPUSH
44390: CALL_OW 294
44394: PUSH
44395: LD_INT 2
44397: GREATEREQUAL
44398: IFFALSE 44519
44400: GO 44402
44402: DISABLE
44403: LD_INT 0
44405: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
44406: LD_INT 10
44408: PPUSH
44409: LD_INT 5
44411: PPUSH
44412: LD_INT 1
44414: PPUSH
44415: LD_INT 10
44417: NEG
44418: PPUSH
44419: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
44423: LD_INT 10
44425: PPUSH
44426: LD_INT 5
44428: PPUSH
44429: LD_INT 1
44431: PPUSH
44432: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
44436: LD_INT 10
44438: PPUSH
44439: LD_INT 5
44441: PPUSH
44442: CALL_OW 86
// DialogueOn ;
44446: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
44450: LD_ADDR_VAR 0 1
44454: PUSH
44455: LD_INT 1
44457: PPUSH
44458: LD_STRING D6-Sci1-1
44460: PPUSH
44461: CALL 2297 0 2
44465: ST_TO_ADDR
// if un then
44466: LD_VAR 0 1
44470: IFFALSE 44508
// begin Say ( JMM , D6-JMM-1 ) ;
44472: LD_EXP 21
44476: PPUSH
44477: LD_STRING D6-JMM-1
44479: PPUSH
44480: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44484: LD_VAR 0 1
44488: PPUSH
44489: LD_STRING D6-Sci1-2
44491: PPUSH
44492: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44496: LD_EXP 21
44500: PPUSH
44501: LD_STRING D6-JMM-2
44503: PPUSH
44504: CALL_OW 88
// end ; DialogueOff ;
44508: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44512: LD_STRING M3
44514: PPUSH
44515: CALL_OW 337
// end ;
44519: PPOPN 1
44521: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
44522: LD_OWVAR 1
44526: PUSH
44527: LD_INT 42000
44529: GREATEREQUAL
44530: PUSH
44531: LD_INT 2
44533: PPUSH
44534: LD_INT 169
44536: PPUSH
44537: LD_INT 90
44539: PPUSH
44540: LD_INT 10
44542: PPUSH
44543: CALL 3741 0 4
44547: PUSH
44548: LD_INT 4
44550: ARRAY
44551: PUSH
44552: LD_INT 0
44554: EQUAL
44555: PUSH
44556: LD_INT 45
44558: PPUSH
44559: CALL_OW 301
44563: OR
44564: PUSH
44565: LD_INT 45
44567: PPUSH
44568: CALL_OW 255
44572: PUSH
44573: LD_INT 1
44575: EQUAL
44576: OR
44577: AND
44578: PUSH
44579: LD_INT 94
44581: PPUSH
44582: CALL_OW 301
44586: NOT
44587: AND
44588: IFFALSE 45714
44590: GO 44592
44592: DISABLE
44593: LD_INT 0
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
// begin uc_side := 5 ;
44599: LD_ADDR_OWVAR 20
44603: PUSH
44604: LD_INT 5
44606: ST_TO_ADDR
// uc_nation := 2 ;
44607: LD_ADDR_OWVAR 21
44611: PUSH
44612: LD_INT 2
44614: ST_TO_ADDR
// InitHc ;
44615: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44619: LD_INT 1
44621: PPUSH
44622: LD_INT 3
44624: PPUSH
44625: LD_INT 8
44627: PPUSH
44628: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44632: LD_ADDR_OWVAR 29
44636: PUSH
44637: LD_INT 12
44639: PUSH
44640: LD_INT 12
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44647: LD_ADDR_OWVAR 33
44651: PUSH
44652: LD_STRING SecondCharsGal
44654: ST_TO_ADDR
// hc_face_number := 7 ;
44655: LD_ADDR_OWVAR 34
44659: PUSH
44660: LD_INT 7
44662: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44663: LD_ADDR_EXP 45
44667: PUSH
44668: CALL_OW 44
44672: ST_TO_ADDR
// InitHc ;
44673: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44677: LD_INT 1
44679: PPUSH
44680: LD_INT 16
44682: PPUSH
44683: LD_INT 2
44685: PPUSH
44686: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44690: LD_ADDR_OWVAR 29
44694: PUSH
44695: LD_INT 12
44697: PUSH
44698: LD_INT 12
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: ST_TO_ADDR
// hc_name :=  ;
44705: LD_ADDR_OWVAR 26
44709: PUSH
44710: LD_STRING 
44712: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44713: LD_ADDR_EXP 46
44717: PUSH
44718: CALL_OW 44
44722: ST_TO_ADDR
// InitHc ;
44723: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44727: LD_INT 35
44729: PPUSH
44730: CALL_OW 67
// until not InBattle ( 1 ) ;
44734: LD_INT 1
44736: PPUSH
44737: CALL_OW 463
44741: NOT
44742: IFFALSE 44727
// wait ( 0 0$5 ) ;
44744: LD_INT 175
44746: PPUSH
44747: CALL_OW 67
// DialogueOn ;
44751: CALL_OW 6
// InGameOn ;
44755: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44759: LD_ADDR_VAR 0 1
44763: PUSH
44764: LD_INT 22
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 25
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 25
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 25
44799: PUSH
44800: LD_INT 3
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 25
44809: PUSH
44810: LD_INT 4
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 25
44819: PUSH
44820: LD_INT 5
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 25
44829: PUSH
44830: LD_INT 8
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PPUSH
44850: CALL_OW 69
44854: PUSH
44855: LD_EXP 21
44859: PUSH
44860: LD_EXP 22
44864: PUSH
44865: LD_EXP 23
44869: PUSH
44870: LD_EXP 24
44874: PUSH
44875: LD_EXP 25
44879: PUSH
44880: LD_EXP 26
44884: PUSH
44885: LD_EXP 27
44889: PUSH
44890: LD_EXP 28
44894: PUSH
44895: LD_EXP 29
44899: PUSH
44900: LD_EXP 31
44904: PUSH
44905: LD_EXP 32
44909: PUSH
44910: LD_EXP 33
44914: PUSH
44915: LD_EXP 34
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: DIFF
44935: PPUSH
44936: LD_INT 26
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PPUSH
44946: CALL_OW 72
44950: PUSH
44951: LD_INT 1
44953: ARRAY
44954: ST_TO_ADDR
// if not un and Brown then
44955: LD_VAR 0 1
44959: NOT
44960: PUSH
44961: LD_EXP 27
44965: AND
44966: IFFALSE 44978
// un := Brown ;
44968: LD_ADDR_VAR 0 1
44972: PUSH
44973: LD_EXP 27
44977: ST_TO_ADDR
// if un then
44978: LD_VAR 0 1
44982: IFFALSE 45008
// begin Say ( un , D7-Sol1-1 ) ;
44984: LD_VAR 0 1
44988: PPUSH
44989: LD_STRING D7-Sol1-1
44991: PPUSH
44992: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44996: LD_EXP 21
45000: PPUSH
45001: LD_STRING D7-JMM-1
45003: PPUSH
45004: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
45008: LD_EXP 45
45012: PPUSH
45013: LD_STRING D7-Ar1-1
45015: PPUSH
45016: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
45020: LD_EXP 21
45024: PPUSH
45025: LD_STRING D7-JMM-2
45027: PPUSH
45028: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
45032: LD_EXP 45
45036: PPUSH
45037: LD_STRING D7-Ar1-2
45039: PPUSH
45040: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
45044: LD_EXP 21
45048: PPUSH
45049: LD_STRING D7-JMM-3
45051: PPUSH
45052: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
45056: LD_EXP 45
45060: PPUSH
45061: LD_STRING D7-Ar1-3
45063: PPUSH
45064: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
45068: LD_EXP 21
45072: PPUSH
45073: LD_STRING D7-JMM-4
45075: PPUSH
45076: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
45080: LD_EXP 45
45084: PPUSH
45085: LD_STRING D7-Ar1-4
45087: PPUSH
45088: CALL_OW 94
// InGameOff ;
45092: CALL_OW 9
// DialogueOff ;
45096: CALL_OW 7
// case Query ( QCameras ) of 1 :
45100: LD_STRING QCameras
45102: PPUSH
45103: CALL_OW 97
45107: PUSH
45108: LD_INT 1
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45116
45114: GO 45119
45116: POP
// ; 2 :
45117: GO 45133
45119: LD_INT 2
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 45132
45127: POP
// exit ; end ;
45128: GO 45714
45130: GO 45133
45132: POP
// ChangeMissionObjectives ( MCar ) ;
45133: LD_STRING MCar
45135: PPUSH
45136: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
45140: LD_INT 124
45142: PPUSH
45143: LD_INT 90
45145: PPUSH
45146: LD_INT 1
45148: PPUSH
45149: LD_INT 6
45151: NEG
45152: PPUSH
45153: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
45157: LD_INT 124
45159: PPUSH
45160: LD_INT 90
45162: PPUSH
45163: LD_INT 1
45165: PPUSH
45166: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
45170: LD_INT 12
45172: PPUSH
45173: LD_INT 1
45175: PPUSH
45176: CALL_OW 424
// wait ( 3 ) ;
45180: LD_INT 3
45182: PPUSH
45183: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
45187: LD_INT 124
45189: PPUSH
45190: LD_INT 90
45192: PPUSH
45193: CALL_OW 86
// cargo := false ;
45197: LD_ADDR_VAR 0 3
45201: PUSH
45202: LD_INT 0
45204: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45205: LD_INT 35
45207: PPUSH
45208: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
45212: LD_ADDR_VAR 0 3
45216: PUSH
45217: LD_INT 12
45219: PPUSH
45220: LD_INT 32
45222: PUSH
45223: LD_INT 3
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 34
45232: PUSH
45233: LD_INT 32
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 58
45242: PUSH
45243: EMPTY
45244: LIST
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: LIST
45250: PPUSH
45251: CALL_OW 70
45255: ST_TO_ADDR
// until cargo ;
45256: LD_VAR 0 3
45260: IFFALSE 45205
// cargo := cargo [ 1 ] ;
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_VAR 0 3
45271: PUSH
45272: LD_INT 1
45274: ARRAY
45275: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
45276: LD_VAR 0 3
45280: PPUSH
45281: LD_INT 5
45283: PPUSH
45284: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
45288: LD_INT 12
45290: PPUSH
45291: LD_INT 0
45293: PPUSH
45294: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
45298: LD_EXP 45
45302: PPUSH
45303: LD_INT 11
45305: PPUSH
45306: LD_INT 0
45308: PPUSH
45309: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
45313: LD_EXP 46
45317: PPUSH
45318: LD_INT 11
45320: PPUSH
45321: LD_INT 0
45323: PPUSH
45324: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
45328: LD_EXP 45
45332: PUSH
45333: LD_EXP 46
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PPUSH
45342: LD_INT 12
45344: PPUSH
45345: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
45349: LD_EXP 45
45353: PPUSH
45354: LD_VAR 0 3
45358: PPUSH
45359: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45363: LD_EXP 45
45367: PUSH
45368: LD_EXP 46
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PPUSH
45377: LD_INT 209
45379: PPUSH
45380: LD_INT 178
45382: PPUSH
45383: CALL_OW 171
// while ( true ) do
45387: LD_INT 1
45389: IFFALSE 45543
// begin wait ( 0 0$1 ) ;
45391: LD_INT 35
45393: PPUSH
45394: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
45398: LD_EXP 45
45402: PPUSH
45403: CALL_OW 314
45407: NOT
45408: PUSH
45409: LD_EXP 46
45413: PPUSH
45414: CALL_OW 314
45418: NOT
45419: OR
45420: IFFALSE 45446
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45422: LD_EXP 45
45426: PUSH
45427: LD_EXP 46
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PPUSH
45436: LD_INT 209
45438: PPUSH
45439: LD_INT 178
45441: PPUSH
45442: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
45446: LD_EXP 45
45450: PPUSH
45451: LD_INT 10
45453: PPUSH
45454: CALL_OW 308
45458: IFFALSE 45469
// RemoveUnit ( ar_mechanic ) ;
45460: LD_EXP 45
45464: PPUSH
45465: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
45469: LD_EXP 46
45473: PPUSH
45474: LD_INT 10
45476: PPUSH
45477: CALL_OW 308
45481: IFFALSE 45492
// RemoveUnit ( ar_mechanic_friend ) ;
45483: LD_EXP 46
45487: PPUSH
45488: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
45492: LD_VAR 0 3
45496: PPUSH
45497: LD_INT 10
45499: PPUSH
45500: CALL_OW 308
45504: IFFALSE 45515
// RemoveUnit ( cargo ) ;
45506: LD_VAR 0 3
45510: PPUSH
45511: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
45515: LD_EXP 45
45519: PPUSH
45520: CALL_OW 300
45524: NOT
45525: PUSH
45526: LD_EXP 46
45530: PPUSH
45531: CALL_OW 300
45535: NOT
45536: AND
45537: IFFALSE 45541
// break ;
45539: GO 45543
// end ;
45541: GO 45387
// wait ( 0 0$2 ) ;
45543: LD_INT 70
45545: PPUSH
45546: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
45550: LD_EXP 45
45554: PPUSH
45555: LD_STRING D7a-Ar1-1
45557: PPUSH
45558: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
45562: LD_ADDR_VAR 0 4
45566: PUSH
45567: LD_INT 129
45569: PUSH
45570: LD_INT 10
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 103
45579: PUSH
45580: LD_INT 6
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 148
45589: PUSH
45590: LD_INT 47
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 155
45599: PUSH
45600: LD_INT 16
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// if Difficulty = 1 then
45613: LD_OWVAR 67
45617: PUSH
45618: LD_INT 1
45620: EQUAL
45621: IFFALSE 45658
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45623: LD_ADDR_VAR 0 4
45627: PUSH
45628: LD_VAR 0 4
45632: PUSH
45633: LD_INT 78
45635: PUSH
45636: LD_INT 7
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 104
45645: PUSH
45646: LD_INT 43
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: ADD
45657: ST_TO_ADDR
// for i in tmp do
45658: LD_ADDR_VAR 0 2
45662: PUSH
45663: LD_VAR 0 4
45667: PUSH
45668: FOR_IN
45669: IFFALSE 45702
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45671: LD_VAR 0 2
45675: PUSH
45676: LD_INT 1
45678: ARRAY
45679: PPUSH
45680: LD_VAR 0 2
45684: PUSH
45685: LD_INT 2
45687: ARRAY
45688: PPUSH
45689: LD_INT 1
45691: PPUSH
45692: LD_INT 9
45694: NEG
45695: PPUSH
45696: CALL_OW 330
45700: GO 45668
45702: POP
45703: POP
// CenterOnXY ( 129 , 10 ) ;
45704: LD_INT 129
45706: PPUSH
45707: LD_INT 10
45709: PPUSH
45710: CALL_OW 84
// end ;
45714: PPOPN 4
45716: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45717: LD_EXP 15
45721: PUSH
45722: LD_INT 21000
45724: MINUS
45725: PUSH
45726: LD_OWVAR 1
45730: LESSEQUAL
45731: IFFALSE 45771
45733: GO 45735
45735: DISABLE
// begin powell_warn := true ;
45736: LD_ADDR_EXP 16
45740: PUSH
45741: LD_INT 1
45743: ST_TO_ADDR
// DialogueOn ;
45744: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45748: LD_EXP 30
45752: PPUSH
45753: LD_STRING D9-Pow-1
45755: PPUSH
45756: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45760: LD_INT 10
45762: PPUSH
45763: CALL_OW 68
// DialogueOff ;
45767: CALL_OW 7
// end ;
45771: END
// every 0 0$1 trigger game_time <= tick do
45772: LD_EXP 15
45776: PUSH
45777: LD_OWVAR 1
45781: LESSEQUAL
45782: IFFALSE 45821
45784: GO 45786
45786: DISABLE
// begin DialogueOn ;
45787: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45791: LD_EXP 30
45795: PPUSH
45796: LD_STRING D9a-Pow-1
45798: PPUSH
45799: CALL_OW 94
// dwait ( 0 0$2 ) ;
45803: LD_INT 70
45805: PPUSH
45806: CALL_OW 68
// DialogueOff ;
45810: CALL_OW 7
// YouLost ( Command ) ;
45814: LD_STRING Command
45816: PPUSH
45817: CALL_OW 104
// end ;
45821: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45822: LD_EXP 21
45826: PPUSH
45827: CALL_OW 301
45831: PUSH
45832: LD_EXP 5
45836: AND
45837: IFFALSE 45849
45839: GO 45841
45841: DISABLE
// YouLost ( JMM ) ;
45842: LD_STRING JMM
45844: PPUSH
45845: CALL_OW 104
45849: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
45850: LD_INT 22
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 30
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 69
45878: PUSH
45879: LD_INT 0
45881: EQUAL
45882: PUSH
45883: LD_EXP 21
45887: PPUSH
45888: CALL_OW 302
45892: AND
45893: IFFALSE 46613
45895: GO 45897
45897: DISABLE
45898: LD_INT 0
45900: PPUSH
// begin if tick < [ 70 70$00 , 60 60$00 , 55 55$00 ] [ Difficulty ] then
45901: LD_OWVAR 1
45905: PUSH
45906: LD_INT 147000
45908: PUSH
45909: LD_INT 126000
45911: PUSH
45912: LD_INT 115500
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: PUSH
45920: LD_OWVAR 67
45924: ARRAY
45925: LESS
45926: IFFALSE 45940
// AddMedal ( Time1 , 1 ) else
45928: LD_STRING Time1
45930: PPUSH
45931: LD_INT 1
45933: PPUSH
45934: CALL_OW 101
45938: GO 45971
// if not powell_warn then
45940: LD_EXP 16
45944: NOT
45945: IFFALSE 45960
// AddMedal ( Time1 , - 1 ) else
45947: LD_STRING Time1
45949: PPUSH
45950: LD_INT 1
45952: NEG
45953: PPUSH
45954: CALL_OW 101
45958: GO 45971
// AddMedal ( Time1 , - 2 ) ;
45960: LD_STRING Time1
45962: PPUSH
45963: LD_INT 2
45965: NEG
45966: PPUSH
45967: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45971: LD_EXP 17
45975: PUSH
45976: LD_INT 5
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: PUSH
45990: LD_OWVAR 67
45994: ARRAY
45995: GREATEREQUAL
45996: IFFALSE 46011
// AddMedal ( Destroy , - 2 ) else
45998: LD_STRING Destroy
46000: PPUSH
46001: LD_INT 2
46003: NEG
46004: PPUSH
46005: CALL_OW 101
46009: GO 46128
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
46011: LD_INT 22
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 21
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 50
46033: PUSH
46034: EMPTY
46035: LIST
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: LIST
46041: PPUSH
46042: CALL_OW 69
46046: PUSH
46047: LD_INT 25
46049: GREATEREQUAL
46050: IFFALSE 46065
// AddMedal ( Destroy , - 1 ) else
46052: LD_STRING Destroy
46054: PPUSH
46055: LD_INT 1
46057: NEG
46058: PPUSH
46059: CALL_OW 101
46063: GO 46128
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
46065: LD_INT 22
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 21
46077: PUSH
46078: LD_INT 3
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 50
46087: PUSH
46088: EMPTY
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: PPUSH
46096: CALL_OW 69
46100: PUSH
46101: LD_INT 15
46103: GREATEREQUAL
46104: IFFALSE 46118
// AddMedal ( Destroy , 1 ) else
46106: LD_STRING Destroy
46108: PPUSH
46109: LD_INT 1
46111: PPUSH
46112: CALL_OW 101
46116: GO 46128
// AddMedal ( Destroy , 2 ) ;
46118: LD_STRING Destroy
46120: PPUSH
46121: LD_INT 2
46123: PPUSH
46124: CALL_OW 101
// if artifact_get then
46128: LD_EXP 13
46132: IFFALSE 46146
// AddMedal ( Artefact , 1 ) else
46134: LD_STRING Artefact
46136: PPUSH
46137: LD_INT 1
46139: PPUSH
46140: CALL_OW 101
46144: GO 46157
// AddMedal ( Artefact , - 1 ) ;
46146: LD_STRING Artefact
46148: PPUSH
46149: LD_INT 1
46151: NEG
46152: PPUSH
46153: CALL_OW 101
// GiveMedals ( MAIN ) ;
46157: LD_STRING MAIN
46159: PPUSH
46160: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
46164: LD_ADDR_EXP 20
46168: PUSH
46169: LD_EXP 20
46173: PPUSH
46174: LD_INT 51
46176: PUSH
46177: EMPTY
46178: LIST
46179: PPUSH
46180: CALL_OW 72
46184: ST_TO_ADDR
// tmp := JMM ^ selected ;
46185: LD_ADDR_VAR 0 1
46189: PUSH
46190: LD_EXP 21
46194: PUSH
46195: LD_EXP 20
46199: ADD
46200: ST_TO_ADDR
// RewardPeople ( tmp ) ;
46201: LD_VAR 0 1
46205: PPUSH
46206: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
46210: LD_VAR 0 1
46214: PUSH
46215: LD_EXP 21
46219: PUSH
46220: LD_EXP 22
46224: PUSH
46225: LD_EXP 23
46229: PUSH
46230: LD_EXP 24
46234: PUSH
46235: LD_EXP 25
46239: PUSH
46240: LD_EXP 26
46244: PUSH
46245: LD_EXP 27
46249: PUSH
46250: LD_EXP 28
46254: PUSH
46255: LD_EXP 29
46259: PUSH
46260: LD_EXP 31
46264: PUSH
46265: LD_EXP 32
46269: PUSH
46270: LD_EXP 33
46274: PUSH
46275: LD_EXP 34
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: DIFF
46295: PPUSH
46296: LD_STRING 11c_others
46298: PPUSH
46299: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
46303: LD_EXP 21
46307: PPUSH
46308: LD_EXP 3
46312: PUSH
46313: LD_STRING JMM
46315: STR
46316: PPUSH
46317: CALL_OW 38
// if Lisa then
46321: LD_EXP 22
46325: IFFALSE 46345
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
46327: LD_EXP 22
46331: PPUSH
46332: LD_EXP 3
46336: PUSH
46337: LD_STRING Lisa
46339: STR
46340: PPUSH
46341: CALL_OW 38
// if Donaldson then
46345: LD_EXP 23
46349: IFFALSE 46369
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
46351: LD_EXP 23
46355: PPUSH
46356: LD_EXP 3
46360: PUSH
46361: LD_STRING Donaldson
46363: STR
46364: PPUSH
46365: CALL_OW 38
// if Bobby then
46369: LD_EXP 24
46373: IFFALSE 46393
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
46375: LD_EXP 24
46379: PPUSH
46380: LD_EXP 3
46384: PUSH
46385: LD_STRING Bobby
46387: STR
46388: PPUSH
46389: CALL_OW 38
// if Cyrus then
46393: LD_EXP 25
46397: IFFALSE 46417
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
46399: LD_EXP 25
46403: PPUSH
46404: LD_EXP 3
46408: PUSH
46409: LD_STRING Cyrus
46411: STR
46412: PPUSH
46413: CALL_OW 38
// if Denis then
46417: LD_EXP 26
46421: IFFALSE 46441
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
46423: LD_EXP 26
46427: PPUSH
46428: LD_EXP 3
46432: PUSH
46433: LD_STRING Denis
46435: STR
46436: PPUSH
46437: CALL_OW 38
// if Brown then
46441: LD_EXP 27
46445: IFFALSE 46465
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
46447: LD_EXP 27
46451: PPUSH
46452: LD_EXP 3
46456: PUSH
46457: LD_STRING Brown
46459: STR
46460: PPUSH
46461: CALL_OW 38
// if Gladstone then
46465: LD_EXP 28
46469: IFFALSE 46489
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
46471: LD_EXP 28
46475: PPUSH
46476: LD_EXP 3
46480: PUSH
46481: LD_STRING Gladstone
46483: STR
46484: PPUSH
46485: CALL_OW 38
// if Houten then
46489: LD_EXP 29
46493: IFFALSE 46513
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
46495: LD_EXP 29
46499: PPUSH
46500: LD_EXP 3
46504: PUSH
46505: LD_STRING Houten
46507: STR
46508: PPUSH
46509: CALL_OW 38
// if Cornel then
46513: LD_EXP 31
46517: IFFALSE 46537
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
46519: LD_EXP 31
46523: PPUSH
46524: LD_EXP 3
46528: PUSH
46529: LD_STRING Cornel
46531: STR
46532: PPUSH
46533: CALL_OW 38
// if Gary then
46537: LD_EXP 32
46541: IFFALSE 46561
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
46543: LD_EXP 32
46547: PPUSH
46548: LD_EXP 3
46552: PUSH
46553: LD_STRING Gary
46555: STR
46556: PPUSH
46557: CALL_OW 38
// if Frank then
46561: LD_EXP 33
46565: IFFALSE 46585
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46567: LD_EXP 33
46571: PPUSH
46572: LD_EXP 3
46576: PUSH
46577: LD_STRING Frank
46579: STR
46580: PPUSH
46581: CALL_OW 38
// if Kikuchi then
46585: LD_EXP 34
46589: IFFALSE 46609
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46591: LD_EXP 34
46595: PPUSH
46596: LD_EXP 3
46600: PUSH
46601: LD_STRING Kikuchi
46603: STR
46604: PPUSH
46605: CALL_OW 38
// YouWin ;
46609: CALL_OW 103
// end ; end_of_file
46613: PPOPN 1
46615: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46616: LD_INT 0
46618: PPUSH
// skirmish := false ;
46619: LD_ADDR_EXP 47
46623: PUSH
46624: LD_INT 0
46626: ST_TO_ADDR
// mc_bases := [ ] ;
46627: LD_ADDR_EXP 48
46631: PUSH
46632: EMPTY
46633: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46634: LD_ADDR_EXP 49
46638: PUSH
46639: EMPTY
46640: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46641: LD_ADDR_EXP 50
46645: PUSH
46646: EMPTY
46647: ST_TO_ADDR
// mc_need_heal := [ ] ;
46648: LD_ADDR_EXP 51
46652: PUSH
46653: EMPTY
46654: ST_TO_ADDR
// mc_healers := [ ] ;
46655: LD_ADDR_EXP 52
46659: PUSH
46660: EMPTY
46661: ST_TO_ADDR
// mc_build_list := [ ] ;
46662: LD_ADDR_EXP 53
46666: PUSH
46667: EMPTY
46668: ST_TO_ADDR
// mc_builders := [ ] ;
46669: LD_ADDR_EXP 54
46673: PUSH
46674: EMPTY
46675: ST_TO_ADDR
// mc_construct_list := [ ] ;
46676: LD_ADDR_EXP 55
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// mc_turret_list := [ ] ;
46683: LD_ADDR_EXP 56
46687: PUSH
46688: EMPTY
46689: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46690: LD_ADDR_EXP 57
46694: PUSH
46695: EMPTY
46696: ST_TO_ADDR
// mc_miners := [ ] ;
46697: LD_ADDR_EXP 59
46701: PUSH
46702: EMPTY
46703: ST_TO_ADDR
// mc_mines := [ ] ;
46704: LD_ADDR_EXP 58
46708: PUSH
46709: EMPTY
46710: ST_TO_ADDR
// mc_minefields := [ ] ;
46711: LD_ADDR_EXP 60
46715: PUSH
46716: EMPTY
46717: ST_TO_ADDR
// mc_crates := [ ] ;
46718: LD_ADDR_EXP 61
46722: PUSH
46723: EMPTY
46724: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46725: LD_ADDR_EXP 62
46729: PUSH
46730: EMPTY
46731: ST_TO_ADDR
// mc_vehicles := [ ] ;
46732: LD_ADDR_EXP 63
46736: PUSH
46737: EMPTY
46738: ST_TO_ADDR
// mc_attack := [ ] ;
46739: LD_ADDR_EXP 64
46743: PUSH
46744: EMPTY
46745: ST_TO_ADDR
// mc_produce := [ ] ;
46746: LD_ADDR_EXP 65
46750: PUSH
46751: EMPTY
46752: ST_TO_ADDR
// mc_defender := [ ] ;
46753: LD_ADDR_EXP 66
46757: PUSH
46758: EMPTY
46759: ST_TO_ADDR
// mc_parking := [ ] ;
46760: LD_ADDR_EXP 68
46764: PUSH
46765: EMPTY
46766: ST_TO_ADDR
// mc_scan := [ ] ;
46767: LD_ADDR_EXP 67
46771: PUSH
46772: EMPTY
46773: ST_TO_ADDR
// end ;
46774: LD_VAR 0 1
46778: RET
// export function RunMacro ; var i ; begin
46779: LD_INT 0
46781: PPUSH
46782: PPUSH
// for i = 1 to mc_bases do
46783: LD_ADDR_VAR 0 2
46787: PUSH
46788: DOUBLE
46789: LD_INT 1
46791: DEC
46792: ST_TO_ADDR
46793: LD_EXP 48
46797: PUSH
46798: FOR_TO
46799: IFFALSE 47287
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46801: LD_ADDR_EXP 49
46805: PUSH
46806: LD_EXP 49
46810: PPUSH
46811: LD_VAR 0 2
46815: PPUSH
46816: EMPTY
46817: PPUSH
46818: CALL_OW 1
46822: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46823: LD_ADDR_EXP 50
46827: PUSH
46828: LD_EXP 50
46832: PPUSH
46833: LD_VAR 0 2
46837: PPUSH
46838: EMPTY
46839: PPUSH
46840: CALL_OW 1
46844: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46845: LD_ADDR_EXP 51
46849: PUSH
46850: LD_EXP 51
46854: PPUSH
46855: LD_VAR 0 2
46859: PPUSH
46860: EMPTY
46861: PPUSH
46862: CALL_OW 1
46866: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46867: LD_ADDR_EXP 52
46871: PUSH
46872: LD_EXP 52
46876: PPUSH
46877: LD_VAR 0 2
46881: PPUSH
46882: EMPTY
46883: PUSH
46884: EMPTY
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PPUSH
46890: CALL_OW 1
46894: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46895: LD_ADDR_EXP 53
46899: PUSH
46900: LD_EXP 53
46904: PPUSH
46905: LD_VAR 0 2
46909: PPUSH
46910: EMPTY
46911: PPUSH
46912: CALL_OW 1
46916: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46917: LD_ADDR_EXP 55
46921: PUSH
46922: LD_EXP 55
46926: PPUSH
46927: LD_VAR 0 2
46931: PPUSH
46932: EMPTY
46933: PPUSH
46934: CALL_OW 1
46938: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46939: LD_ADDR_EXP 56
46943: PUSH
46944: LD_EXP 56
46948: PPUSH
46949: LD_VAR 0 2
46953: PPUSH
46954: EMPTY
46955: PPUSH
46956: CALL_OW 1
46960: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46961: LD_ADDR_EXP 57
46965: PUSH
46966: LD_EXP 57
46970: PPUSH
46971: LD_VAR 0 2
46975: PPUSH
46976: EMPTY
46977: PPUSH
46978: CALL_OW 1
46982: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46983: LD_ADDR_EXP 57
46987: PUSH
46988: LD_EXP 57
46992: PPUSH
46993: LD_VAR 0 2
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PPUSH
47005: EMPTY
47006: PPUSH
47007: CALL 3247 0 3
47011: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
47012: LD_ADDR_EXP 57
47016: PUSH
47017: LD_EXP 57
47021: PPUSH
47022: LD_VAR 0 2
47026: PUSH
47027: LD_INT 2
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PPUSH
47034: EMPTY
47035: PPUSH
47036: CALL 3247 0 3
47040: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
47041: LD_ADDR_EXP 59
47045: PUSH
47046: LD_EXP 59
47050: PPUSH
47051: LD_VAR 0 2
47055: PPUSH
47056: EMPTY
47057: PPUSH
47058: CALL_OW 1
47062: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
47063: LD_ADDR_EXP 58
47067: PUSH
47068: LD_EXP 58
47072: PPUSH
47073: LD_VAR 0 2
47077: PPUSH
47078: EMPTY
47079: PPUSH
47080: CALL_OW 1
47084: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
47085: LD_ADDR_EXP 60
47089: PUSH
47090: LD_EXP 60
47094: PPUSH
47095: LD_VAR 0 2
47099: PPUSH
47100: EMPTY
47101: PPUSH
47102: CALL_OW 1
47106: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
47107: LD_ADDR_EXP 61
47111: PUSH
47112: LD_EXP 61
47116: PPUSH
47117: LD_VAR 0 2
47121: PPUSH
47122: EMPTY
47123: PPUSH
47124: CALL_OW 1
47128: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47129: LD_ADDR_EXP 62
47133: PUSH
47134: LD_EXP 62
47138: PPUSH
47139: LD_VAR 0 2
47143: PPUSH
47144: EMPTY
47145: PPUSH
47146: CALL_OW 1
47150: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
47151: LD_ADDR_EXP 63
47155: PUSH
47156: LD_EXP 63
47160: PPUSH
47161: LD_VAR 0 2
47165: PPUSH
47166: EMPTY
47167: PPUSH
47168: CALL_OW 1
47172: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
47173: LD_ADDR_EXP 64
47177: PUSH
47178: LD_EXP 64
47182: PPUSH
47183: LD_VAR 0 2
47187: PPUSH
47188: EMPTY
47189: PPUSH
47190: CALL_OW 1
47194: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
47195: LD_ADDR_EXP 65
47199: PUSH
47200: LD_EXP 65
47204: PPUSH
47205: LD_VAR 0 2
47209: PPUSH
47210: EMPTY
47211: PPUSH
47212: CALL_OW 1
47216: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
47217: LD_ADDR_EXP 66
47221: PUSH
47222: LD_EXP 66
47226: PPUSH
47227: LD_VAR 0 2
47231: PPUSH
47232: EMPTY
47233: PPUSH
47234: CALL_OW 1
47238: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
47239: LD_ADDR_EXP 68
47243: PUSH
47244: LD_EXP 68
47248: PPUSH
47249: LD_VAR 0 2
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: CALL_OW 1
47261: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
47262: LD_ADDR_EXP 67
47266: PUSH
47267: LD_EXP 67
47271: PPUSH
47272: LD_VAR 0 2
47276: PPUSH
47277: LD_INT 0
47279: PPUSH
47280: CALL_OW 1
47284: ST_TO_ADDR
// end ;
47285: GO 46798
47287: POP
47288: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
47289: LD_INT 1
47291: PPUSH
47292: LD_INT 8
47294: PUSH
47295: LD_INT 10
47297: PUSH
47298: LD_INT 12
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: LIST
47305: PUSH
47306: LD_OWVAR 67
47310: ARRAY
47311: PPUSH
47312: LD_INT 3
47314: PPUSH
47315: CALL 54954 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
47319: LD_INT 2
47321: PPUSH
47322: LD_INT 6
47324: PUSH
47325: LD_INT 8
47327: PUSH
47328: LD_INT 9
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: PUSH
47336: LD_OWVAR 67
47340: ARRAY
47341: PPUSH
47342: LD_INT 2
47344: PPUSH
47345: CALL 54954 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
47349: LD_INT 3
47351: PPUSH
47352: LD_INT 6
47354: PUSH
47355: LD_INT 7
47357: PUSH
47358: LD_INT 9
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: LD_OWVAR 67
47370: ARRAY
47371: PPUSH
47372: LD_INT 1
47374: PPUSH
47375: CALL 54954 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
47379: LD_ADDR_EXP 68
47383: PUSH
47384: LD_INT 20
47386: PUSH
47387: LD_INT 21
47389: PUSH
47390: LD_INT 22
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: ST_TO_ADDR
// for i = 1 to mc_bases do
47398: LD_ADDR_VAR 0 2
47402: PUSH
47403: DOUBLE
47404: LD_INT 1
47406: DEC
47407: ST_TO_ADDR
47408: LD_EXP 48
47412: PUSH
47413: FOR_TO
47414: IFFALSE 47438
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_EXP 42
47425: PUSH
47426: LD_VAR 0 2
47430: ARRAY
47431: PPUSH
47432: CALL 55212 0 2
47436: GO 47413
47438: POP
47439: POP
// skirmish := true ;
47440: LD_ADDR_EXP 47
47444: PUSH
47445: LD_INT 1
47447: ST_TO_ADDR
// end ;
47448: LD_VAR 0 1
47452: RET
// every 0 0$01 trigger skirmish do
47453: LD_EXP 47
47457: IFFALSE 47541
47459: GO 47461
47461: DISABLE
// begin enable ;
47462: ENABLE
// MC_CheckBuildings ( ) ;
47463: CALL 47902 0 0
// MC_CheckPeopleLife ( ) ;
47467: CALL 48120 0 0
// RaiseSailEvent ( 103 ) ;
47471: LD_INT 103
47473: PPUSH
47474: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47478: LD_INT 104
47480: PPUSH
47481: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47485: LD_INT 105
47487: PPUSH
47488: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47492: LD_INT 106
47494: PPUSH
47495: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47499: LD_INT 107
47501: PPUSH
47502: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47506: LD_INT 108
47508: PPUSH
47509: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47513: LD_INT 109
47515: PPUSH
47516: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47520: LD_INT 110
47522: PPUSH
47523: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47527: LD_INT 111
47529: PPUSH
47530: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47534: LD_INT 200
47536: PPUSH
47537: CALL_OW 427
// end ;
47541: END
// every 10 trigger skirmish do var i ;
47542: LD_EXP 47
47546: IFFALSE 47645
47548: GO 47550
47550: DISABLE
47551: LD_INT 0
47553: PPUSH
// begin enable ;
47554: ENABLE
// if not mc_bases then
47555: LD_EXP 48
47559: NOT
47560: IFFALSE 47564
// exit ;
47562: GO 47645
// for i = 1 to mc_bases do
47564: LD_ADDR_VAR 0 1
47568: PUSH
47569: DOUBLE
47570: LD_INT 1
47572: DEC
47573: ST_TO_ADDR
47574: LD_EXP 48
47578: PUSH
47579: FOR_TO
47580: IFFALSE 47643
// if mc_mines [ i ] and mc_miners [ i ] then
47582: LD_EXP 58
47586: PUSH
47587: LD_VAR 0 1
47591: ARRAY
47592: PUSH
47593: LD_EXP 59
47597: PUSH
47598: LD_VAR 0 1
47602: ARRAY
47603: AND
47604: IFFALSE 47641
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47606: LD_EXP 59
47610: PUSH
47611: LD_VAR 0 1
47615: ARRAY
47616: PUSH
47617: LD_INT 1
47619: ARRAY
47620: PPUSH
47621: CALL_OW 255
47625: PPUSH
47626: LD_EXP 58
47630: PUSH
47631: LD_VAR 0 1
47635: ARRAY
47636: PPUSH
47637: CALL 33736 0 2
47641: GO 47579
47643: POP
47644: POP
// end ;
47645: PPOPN 1
47647: END
// on SailEvent ( event ) do begin if event = 101 then
47648: LD_VAR 0 1
47652: PUSH
47653: LD_INT 101
47655: EQUAL
47656: IFFALSE 47662
// MC_RepairBuildings ( ) ;
47658: CALL 48666 0 0
// if event = 102 then
47662: LD_VAR 0 1
47666: PUSH
47667: LD_INT 102
47669: EQUAL
47670: IFFALSE 47676
// MC_Heal ( ) ;
47672: CALL 49060 0 0
// if event = 103 then
47676: LD_VAR 0 1
47680: PUSH
47681: LD_INT 103
47683: EQUAL
47684: IFFALSE 47690
// MC_Build ( ) ;
47686: CALL 49445 0 0
// if event = 104 then
47690: LD_VAR 0 1
47694: PUSH
47695: LD_INT 104
47697: EQUAL
47698: IFFALSE 47704
// MC_TurretWeapon ( ) ;
47700: CALL 50213 0 0
// if event = 105 then
47704: LD_VAR 0 1
47708: PUSH
47709: LD_INT 105
47711: EQUAL
47712: IFFALSE 47718
// MC_TurretCrew ( ) ;
47714: CALL 50532 0 0
// if event = 106 then
47718: LD_VAR 0 1
47722: PUSH
47723: LD_INT 106
47725: EQUAL
47726: IFFALSE 47732
// MC_PlantMines ( ) ;
47728: CALL 51325 0 0
// if event = 107 then
47732: LD_VAR 0 1
47736: PUSH
47737: LD_INT 107
47739: EQUAL
47740: IFFALSE 47746
// MC_CollectCrates ( ) ;
47742: CALL 52308 0 0
// if event = 108 then
47746: LD_VAR 0 1
47750: PUSH
47751: LD_INT 108
47753: EQUAL
47754: IFFALSE 47760
// MC_LinkRemoteControl ( ) ;
47756: CALL 53105 0 0
// if event = 109 then
47760: LD_VAR 0 1
47764: PUSH
47765: LD_INT 109
47767: EQUAL
47768: IFFALSE 47774
// MC_ProduceVehicle ( ) ;
47770: CALL 53274 0 0
// if event = 110 then
47774: LD_VAR 0 1
47778: PUSH
47779: LD_INT 110
47781: EQUAL
47782: IFFALSE 47788
// MC_SendAttack ( ) ;
47784: CALL 53662 0 0
// if event = 111 then
47788: LD_VAR 0 1
47792: PUSH
47793: LD_INT 111
47795: EQUAL
47796: IFFALSE 47802
// MC_Defend ( ) ;
47798: CALL 53770 0 0
// if event = 200 then
47802: LD_VAR 0 1
47806: PUSH
47807: LD_INT 200
47809: EQUAL
47810: IFFALSE 47816
// MC_Idle ( ) ;
47812: CALL 54705 0 0
// end ;
47816: PPOPN 1
47818: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47819: LD_INT 0
47821: PPUSH
47822: PPUSH
// if not mc_bases [ base ] or not tag then
47823: LD_EXP 48
47827: PUSH
47828: LD_VAR 0 1
47832: ARRAY
47833: NOT
47834: PUSH
47835: LD_VAR 0 2
47839: NOT
47840: OR
47841: IFFALSE 47845
// exit ;
47843: GO 47897
// for i in mc_bases [ base ] do
47845: LD_ADDR_VAR 0 4
47849: PUSH
47850: LD_EXP 48
47854: PUSH
47855: LD_VAR 0 1
47859: ARRAY
47860: PUSH
47861: FOR_IN
47862: IFFALSE 47895
// if GetTag ( i ) = tag then
47864: LD_VAR 0 4
47868: PPUSH
47869: CALL_OW 110
47873: PUSH
47874: LD_VAR 0 2
47878: EQUAL
47879: IFFALSE 47893
// SetTag ( i , 0 ) ;
47881: LD_VAR 0 4
47885: PPUSH
47886: LD_INT 0
47888: PPUSH
47889: CALL_OW 109
47893: GO 47861
47895: POP
47896: POP
// end ;
47897: LD_VAR 0 3
47901: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47902: LD_INT 0
47904: PPUSH
47905: PPUSH
47906: PPUSH
47907: PPUSH
// if not mc_bases then
47908: LD_EXP 48
47912: NOT
47913: IFFALSE 47917
// exit ;
47915: GO 48115
// for i = 1 to mc_bases do
47917: LD_ADDR_VAR 0 2
47921: PUSH
47922: DOUBLE
47923: LD_INT 1
47925: DEC
47926: ST_TO_ADDR
47927: LD_EXP 48
47931: PUSH
47932: FOR_TO
47933: IFFALSE 48100
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47935: LD_ADDR_VAR 0 4
47939: PUSH
47940: LD_EXP 48
47944: PUSH
47945: LD_VAR 0 2
47949: ARRAY
47950: PPUSH
47951: LD_INT 21
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: LD_INT 24
47966: PUSH
47967: LD_INT 1000
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PPUSH
47982: CALL_OW 72
47986: ST_TO_ADDR
// if not tmp then
47987: LD_VAR 0 4
47991: NOT
47992: IFFALSE 48018
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47994: LD_ADDR_EXP 49
47998: PUSH
47999: LD_EXP 49
48003: PPUSH
48004: LD_VAR 0 2
48008: PPUSH
48009: EMPTY
48010: PPUSH
48011: CALL_OW 1
48015: ST_TO_ADDR
// continue ;
48016: GO 47932
// end ; for j in tmp do
48018: LD_ADDR_VAR 0 3
48022: PUSH
48023: LD_VAR 0 4
48027: PUSH
48028: FOR_IN
48029: IFFALSE 48096
// if not j in mc_building_need_repair [ i ] then
48031: LD_VAR 0 3
48035: PUSH
48036: LD_EXP 49
48040: PUSH
48041: LD_VAR 0 2
48045: ARRAY
48046: IN
48047: NOT
48048: IFFALSE 48094
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
48050: LD_ADDR_EXP 49
48054: PUSH
48055: LD_EXP 49
48059: PPUSH
48060: LD_VAR 0 2
48064: PUSH
48065: LD_EXP 49
48069: PUSH
48070: LD_VAR 0 2
48074: ARRAY
48075: PUSH
48076: LD_INT 1
48078: PLUS
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PPUSH
48084: LD_VAR 0 3
48088: PPUSH
48089: CALL 3247 0 3
48093: ST_TO_ADDR
48094: GO 48028
48096: POP
48097: POP
// end ;
48098: GO 47932
48100: POP
48101: POP
// if mc_building_need_repair then
48102: LD_EXP 49
48106: IFFALSE 48115
// RaiseSailEvent ( 101 ) ;
48108: LD_INT 101
48110: PPUSH
48111: CALL_OW 427
// end ;
48115: LD_VAR 0 1
48119: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
48120: LD_INT 0
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
// if not mc_bases then
48129: LD_EXP 48
48133: NOT
48134: IFFALSE 48138
// exit ;
48136: GO 48661
// for i = 1 to mc_bases do
48138: LD_ADDR_VAR 0 2
48142: PUSH
48143: DOUBLE
48144: LD_INT 1
48146: DEC
48147: ST_TO_ADDR
48148: LD_EXP 48
48152: PUSH
48153: FOR_TO
48154: IFFALSE 48652
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
48156: LD_ADDR_VAR 0 5
48160: PUSH
48161: LD_EXP 48
48165: PUSH
48166: LD_VAR 0 2
48170: ARRAY
48171: PPUSH
48172: LD_INT 21
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 54
48190: PUSH
48191: EMPTY
48192: LIST
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: LD_INT 24
48203: PUSH
48204: LD_INT 700
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PPUSH
48224: CALL_OW 72
48228: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
48229: LD_ADDR_VAR 0 6
48233: PUSH
48234: LD_EXP 48
48238: PUSH
48239: LD_VAR 0 2
48243: ARRAY
48244: PPUSH
48245: LD_INT 21
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: LD_INT 54
48263: PUSH
48264: EMPTY
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 3
48273: PUSH
48274: LD_INT 24
48276: PUSH
48277: LD_INT 250
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: LIST
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PPUSH
48297: CALL_OW 72
48301: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
48302: LD_ADDR_VAR 0 7
48306: PUSH
48307: LD_VAR 0 5
48311: PUSH
48312: LD_VAR 0 6
48316: DIFF
48317: ST_TO_ADDR
// if not need_heal_1 then
48318: LD_VAR 0 6
48322: NOT
48323: IFFALSE 48356
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
48325: LD_ADDR_EXP 51
48329: PUSH
48330: LD_EXP 51
48334: PPUSH
48335: LD_VAR 0 2
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PPUSH
48347: EMPTY
48348: PPUSH
48349: CALL 3247 0 3
48353: ST_TO_ADDR
48354: GO 48388
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
48356: LD_ADDR_EXP 51
48360: PUSH
48361: LD_EXP 51
48365: PPUSH
48366: LD_VAR 0 2
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PPUSH
48378: LD_VAR 0 6
48382: PPUSH
48383: CALL 3247 0 3
48387: ST_TO_ADDR
// if not need_heal_2 then
48388: LD_VAR 0 7
48392: NOT
48393: IFFALSE 48426
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
48395: LD_ADDR_EXP 51
48399: PUSH
48400: LD_EXP 51
48404: PPUSH
48405: LD_VAR 0 2
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PPUSH
48417: EMPTY
48418: PPUSH
48419: CALL 3247 0 3
48423: ST_TO_ADDR
48424: GO 48458
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48426: LD_ADDR_EXP 51
48430: PUSH
48431: LD_EXP 51
48435: PPUSH
48436: LD_VAR 0 2
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PPUSH
48448: LD_VAR 0 7
48452: PPUSH
48453: CALL 3247 0 3
48457: ST_TO_ADDR
// if need_heal_2 then
48458: LD_VAR 0 7
48462: IFFALSE 48634
// for j in need_heal_2 do
48464: LD_ADDR_VAR 0 3
48468: PUSH
48469: LD_VAR 0 7
48473: PUSH
48474: FOR_IN
48475: IFFALSE 48632
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48477: LD_ADDR_VAR 0 5
48481: PUSH
48482: LD_EXP 48
48486: PUSH
48487: LD_VAR 0 2
48491: ARRAY
48492: PPUSH
48493: LD_INT 2
48495: PUSH
48496: LD_INT 30
48498: PUSH
48499: LD_INT 6
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 30
48508: PUSH
48509: LD_INT 7
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 30
48518: PUSH
48519: LD_INT 8
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 30
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 30
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 25
48548: PUSH
48549: LD_INT 4
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: PPUSH
48565: CALL_OW 72
48569: ST_TO_ADDR
// if tmp then
48570: LD_VAR 0 5
48574: IFFALSE 48630
// begin k := NearestUnitToUnit ( tmp , j ) ;
48576: LD_ADDR_VAR 0 4
48580: PUSH
48581: LD_VAR 0 5
48585: PPUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 74
48595: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48596: LD_VAR 0 3
48600: PPUSH
48601: LD_VAR 0 4
48605: PPUSH
48606: CALL_OW 296
48610: PUSH
48611: LD_INT 7
48613: GREATER
48614: IFFALSE 48630
// ComMoveUnit ( j , k ) ;
48616: LD_VAR 0 3
48620: PPUSH
48621: LD_VAR 0 4
48625: PPUSH
48626: CALL_OW 112
// end ; end ;
48630: GO 48474
48632: POP
48633: POP
// if not need_heal_1 and not need_heal_2 then
48634: LD_VAR 0 6
48638: NOT
48639: PUSH
48640: LD_VAR 0 7
48644: NOT
48645: AND
48646: IFFALSE 48650
// continue ;
48648: GO 48153
// end ;
48650: GO 48153
48652: POP
48653: POP
// RaiseSailEvent ( 102 ) ;
48654: LD_INT 102
48656: PPUSH
48657: CALL_OW 427
// end ;
48661: LD_VAR 0 1
48665: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48666: LD_INT 0
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
// if not mc_bases then
48673: LD_EXP 48
48677: NOT
48678: IFFALSE 48682
// exit ;
48680: GO 49055
// for i = 1 to mc_bases do
48682: LD_ADDR_VAR 0 2
48686: PUSH
48687: DOUBLE
48688: LD_INT 1
48690: DEC
48691: ST_TO_ADDR
48692: LD_EXP 48
48696: PUSH
48697: FOR_TO
48698: IFFALSE 49053
// begin if not mc_building_need_repair [ i ] then
48700: LD_EXP 49
48704: PUSH
48705: LD_VAR 0 2
48709: ARRAY
48710: NOT
48711: IFFALSE 48749
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48713: LD_ADDR_EXP 50
48717: PUSH
48718: LD_EXP 50
48722: PPUSH
48723: LD_VAR 0 2
48727: PPUSH
48728: EMPTY
48729: PPUSH
48730: CALL_OW 1
48734: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48735: LD_VAR 0 2
48739: PPUSH
48740: LD_INT 101
48742: PPUSH
48743: CALL 47819 0 2
// continue ;
48747: GO 48697
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48749: LD_ADDR_EXP 54
48753: PUSH
48754: LD_EXP 54
48758: PPUSH
48759: LD_VAR 0 2
48763: PPUSH
48764: EMPTY
48765: PPUSH
48766: CALL_OW 1
48770: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48771: LD_VAR 0 2
48775: PPUSH
48776: LD_INT 103
48778: PPUSH
48779: CALL 47819 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48783: LD_ADDR_VAR 0 5
48787: PUSH
48788: LD_EXP 48
48792: PUSH
48793: LD_VAR 0 2
48797: ARRAY
48798: PPUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 25
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 25
48814: PUSH
48815: LD_INT 16
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: LIST
48826: PUSH
48827: EMPTY
48828: LIST
48829: PPUSH
48830: CALL_OW 72
48834: ST_TO_ADDR
// if not tmp then
48835: LD_VAR 0 5
48839: NOT
48840: IFFALSE 48844
// continue ;
48842: GO 48697
// for j in tmp do
48844: LD_ADDR_VAR 0 3
48848: PUSH
48849: LD_VAR 0 5
48853: PUSH
48854: FOR_IN
48855: IFFALSE 49049
// begin if mc_need_heal [ i ] then
48857: LD_EXP 51
48861: PUSH
48862: LD_VAR 0 2
48866: ARRAY
48867: IFFALSE 48915
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48869: LD_VAR 0 3
48873: PUSH
48874: LD_EXP 51
48878: PUSH
48879: LD_VAR 0 2
48883: ARRAY
48884: PUSH
48885: LD_INT 1
48887: ARRAY
48888: IN
48889: PUSH
48890: LD_VAR 0 3
48894: PUSH
48895: LD_EXP 51
48899: PUSH
48900: LD_VAR 0 2
48904: ARRAY
48905: PUSH
48906: LD_INT 2
48908: ARRAY
48909: IN
48910: OR
48911: IFFALSE 48915
// continue ;
48913: GO 48854
// if IsInUnit ( j ) then
48915: LD_VAR 0 3
48919: PPUSH
48920: CALL_OW 310
48924: IFFALSE 48935
// ComExitBuilding ( j ) ;
48926: LD_VAR 0 3
48930: PPUSH
48931: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48935: LD_VAR 0 3
48939: PUSH
48940: LD_EXP 50
48944: PUSH
48945: LD_VAR 0 2
48949: ARRAY
48950: IN
48951: NOT
48952: IFFALSE 49010
// begin SetTag ( j , 101 ) ;
48954: LD_VAR 0 3
48958: PPUSH
48959: LD_INT 101
48961: PPUSH
48962: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48966: LD_ADDR_EXP 50
48970: PUSH
48971: LD_EXP 50
48975: PPUSH
48976: LD_VAR 0 2
48980: PUSH
48981: LD_EXP 50
48985: PUSH
48986: LD_VAR 0 2
48990: ARRAY
48991: PUSH
48992: LD_INT 1
48994: PLUS
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PPUSH
49000: LD_VAR 0 3
49004: PPUSH
49005: CALL 3247 0 3
49009: ST_TO_ADDR
// end ; Wait ( 3 ) ;
49010: LD_INT 3
49012: PPUSH
49013: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
49017: LD_VAR 0 3
49021: PPUSH
49022: LD_EXP 49
49026: PUSH
49027: LD_VAR 0 2
49031: ARRAY
49032: PPUSH
49033: LD_VAR 0 3
49037: PPUSH
49038: CALL_OW 74
49042: PPUSH
49043: CALL_OW 130
// end ;
49047: GO 48854
49049: POP
49050: POP
// end ;
49051: GO 48697
49053: POP
49054: POP
// end ;
49055: LD_VAR 0 1
49059: RET
// export function MC_Heal ; var i , j , tmp ; begin
49060: LD_INT 0
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
// if not mc_bases then
49066: LD_EXP 48
49070: NOT
49071: IFFALSE 49075
// exit ;
49073: GO 49440
// for i = 1 to mc_bases do
49075: LD_ADDR_VAR 0 2
49079: PUSH
49080: DOUBLE
49081: LD_INT 1
49083: DEC
49084: ST_TO_ADDR
49085: LD_EXP 48
49089: PUSH
49090: FOR_TO
49091: IFFALSE 49438
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
49093: LD_EXP 51
49097: PUSH
49098: LD_VAR 0 2
49102: ARRAY
49103: PUSH
49104: LD_INT 1
49106: ARRAY
49107: NOT
49108: PUSH
49109: LD_EXP 51
49113: PUSH
49114: LD_VAR 0 2
49118: ARRAY
49119: PUSH
49120: LD_INT 2
49122: ARRAY
49123: NOT
49124: AND
49125: IFFALSE 49163
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
49127: LD_ADDR_EXP 52
49131: PUSH
49132: LD_EXP 52
49136: PPUSH
49137: LD_VAR 0 2
49141: PPUSH
49142: EMPTY
49143: PPUSH
49144: CALL_OW 1
49148: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
49149: LD_VAR 0 2
49153: PPUSH
49154: LD_INT 102
49156: PPUSH
49157: CALL 47819 0 2
// continue ;
49161: GO 49090
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
49163: LD_ADDR_VAR 0 4
49167: PUSH
49168: LD_EXP 48
49172: PUSH
49173: LD_VAR 0 2
49177: ARRAY
49178: PPUSH
49179: LD_INT 25
49181: PUSH
49182: LD_INT 4
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PPUSH
49189: CALL_OW 72
49193: ST_TO_ADDR
// if not tmp then
49194: LD_VAR 0 4
49198: NOT
49199: IFFALSE 49203
// continue ;
49201: GO 49090
// for j in tmp do
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: LD_VAR 0 4
49212: PUSH
49213: FOR_IN
49214: IFFALSE 49434
// begin if IsInUnit ( j ) then
49216: LD_VAR 0 3
49220: PPUSH
49221: CALL_OW 310
49225: IFFALSE 49236
// ComExitBuilding ( j ) ;
49227: LD_VAR 0 3
49231: PPUSH
49232: CALL_OW 122
// if not j in mc_healers [ i ] then
49236: LD_VAR 0 3
49240: PUSH
49241: LD_EXP 52
49245: PUSH
49246: LD_VAR 0 2
49250: ARRAY
49251: IN
49252: NOT
49253: IFFALSE 49299
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
49255: LD_ADDR_EXP 52
49259: PUSH
49260: LD_EXP 52
49264: PPUSH
49265: LD_VAR 0 2
49269: PUSH
49270: LD_EXP 52
49274: PUSH
49275: LD_VAR 0 2
49279: ARRAY
49280: PUSH
49281: LD_INT 1
49283: PLUS
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PPUSH
49289: LD_VAR 0 3
49293: PPUSH
49294: CALL 3247 0 3
49298: ST_TO_ADDR
// if not GetTag ( j ) then
49299: LD_VAR 0 3
49303: PPUSH
49304: CALL_OW 110
49308: NOT
49309: IFFALSE 49323
// SetTag ( j , 102 ) ;
49311: LD_VAR 0 3
49315: PPUSH
49316: LD_INT 102
49318: PPUSH
49319: CALL_OW 109
// Wait ( 3 ) ;
49323: LD_INT 3
49325: PPUSH
49326: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
49330: LD_EXP 51
49334: PUSH
49335: LD_VAR 0 2
49339: ARRAY
49340: PUSH
49341: LD_INT 1
49343: ARRAY
49344: IFFALSE 49376
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
49346: LD_VAR 0 3
49350: PPUSH
49351: LD_EXP 51
49355: PUSH
49356: LD_VAR 0 2
49360: ARRAY
49361: PUSH
49362: LD_INT 1
49364: ARRAY
49365: PUSH
49366: LD_INT 1
49368: ARRAY
49369: PPUSH
49370: CALL_OW 128
49374: GO 49432
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49376: LD_VAR 0 3
49380: PPUSH
49381: CALL_OW 314
49385: NOT
49386: PUSH
49387: LD_EXP 51
49391: PUSH
49392: LD_VAR 0 2
49396: ARRAY
49397: PUSH
49398: LD_INT 2
49400: ARRAY
49401: AND
49402: IFFALSE 49432
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49404: LD_VAR 0 3
49408: PPUSH
49409: LD_EXP 51
49413: PUSH
49414: LD_VAR 0 2
49418: ARRAY
49419: PUSH
49420: LD_INT 2
49422: ARRAY
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PPUSH
49428: CALL_OW 128
// end ;
49432: GO 49213
49434: POP
49435: POP
// end ;
49436: GO 49090
49438: POP
49439: POP
// end ;
49440: LD_VAR 0 1
49444: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49445: LD_INT 0
49447: PPUSH
49448: PPUSH
49449: PPUSH
49450: PPUSH
// if not mc_bases then
49451: LD_EXP 48
49455: NOT
49456: IFFALSE 49460
// exit ;
49458: GO 50208
// for i = 1 to mc_bases do
49460: LD_ADDR_VAR 0 2
49464: PUSH
49465: DOUBLE
49466: LD_INT 1
49468: DEC
49469: ST_TO_ADDR
49470: LD_EXP 48
49474: PUSH
49475: FOR_TO
49476: IFFALSE 50206
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
49478: LD_EXP 53
49482: PUSH
49483: LD_VAR 0 2
49487: ARRAY
49488: NOT
49489: PUSH
49490: LD_EXP 55
49494: PUSH
49495: LD_VAR 0 2
49499: ARRAY
49500: NOT
49501: AND
49502: IFFALSE 49540
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49504: LD_ADDR_EXP 54
49508: PUSH
49509: LD_EXP 54
49513: PPUSH
49514: LD_VAR 0 2
49518: PPUSH
49519: EMPTY
49520: PPUSH
49521: CALL_OW 1
49525: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49526: LD_VAR 0 2
49530: PPUSH
49531: LD_INT 103
49533: PPUSH
49534: CALL 47819 0 2
// continue ;
49538: GO 49475
// end ; if mc_construct_list [ i ] then
49540: LD_EXP 55
49544: PUSH
49545: LD_VAR 0 2
49549: ARRAY
49550: IFFALSE 49755
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49552: LD_ADDR_VAR 0 4
49556: PUSH
49557: LD_EXP 48
49561: PUSH
49562: LD_VAR 0 2
49566: ARRAY
49567: PPUSH
49568: LD_INT 25
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PPUSH
49578: CALL_OW 72
49582: PUSH
49583: LD_EXP 50
49587: PUSH
49588: LD_VAR 0 2
49592: ARRAY
49593: DIFF
49594: ST_TO_ADDR
// if not tmp then
49595: LD_VAR 0 4
49599: NOT
49600: IFFALSE 49604
// continue ;
49602: GO 49475
// for j in tmp do
49604: LD_ADDR_VAR 0 3
49608: PUSH
49609: LD_VAR 0 4
49613: PUSH
49614: FOR_IN
49615: IFFALSE 49751
// begin if not mc_builders [ i ] then
49617: LD_EXP 54
49621: PUSH
49622: LD_VAR 0 2
49626: ARRAY
49627: NOT
49628: IFFALSE 49686
// begin SetTag ( j , 103 ) ;
49630: LD_VAR 0 3
49634: PPUSH
49635: LD_INT 103
49637: PPUSH
49638: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49642: LD_ADDR_EXP 54
49646: PUSH
49647: LD_EXP 54
49651: PPUSH
49652: LD_VAR 0 2
49656: PUSH
49657: LD_EXP 54
49661: PUSH
49662: LD_VAR 0 2
49666: ARRAY
49667: PUSH
49668: LD_INT 1
49670: PLUS
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PPUSH
49676: LD_VAR 0 3
49680: PPUSH
49681: CALL 3247 0 3
49685: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49686: LD_VAR 0 3
49690: PPUSH
49691: CALL_OW 310
49695: IFFALSE 49706
// ComExitBuilding ( j ) ;
49697: LD_VAR 0 3
49701: PPUSH
49702: CALL_OW 122
// wait ( 3 ) ;
49706: LD_INT 3
49708: PPUSH
49709: CALL_OW 67
// if not HasTask ( j ) then
49713: LD_VAR 0 3
49717: PPUSH
49718: CALL_OW 314
49722: NOT
49723: IFFALSE 49749
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49725: LD_VAR 0 3
49729: PPUSH
49730: LD_EXP 55
49734: PUSH
49735: LD_VAR 0 2
49739: ARRAY
49740: PUSH
49741: LD_INT 1
49743: ARRAY
49744: PPUSH
49745: CALL 5665 0 2
// end ;
49749: GO 49614
49751: POP
49752: POP
// end else
49753: GO 50204
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49755: LD_EXP 53
49759: PUSH
49760: LD_VAR 0 2
49764: ARRAY
49765: PUSH
49766: LD_EXP 48
49770: PUSH
49771: LD_VAR 0 2
49775: ARRAY
49776: PPUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 30
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 30
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: PPUSH
49805: CALL_OW 72
49809: AND
49810: IFFALSE 50204
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49812: LD_EXP 48
49816: PUSH
49817: LD_VAR 0 2
49821: ARRAY
49822: PPUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 30
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 30
49838: PUSH
49839: LD_INT 1
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: LIST
49850: PPUSH
49851: CALL_OW 72
49855: PUSH
49856: LD_INT 1
49858: ARRAY
49859: PPUSH
49860: LD_EXP 53
49864: PUSH
49865: LD_VAR 0 2
49869: ARRAY
49870: PUSH
49871: LD_INT 1
49873: ARRAY
49874: PUSH
49875: LD_INT 1
49877: ARRAY
49878: PPUSH
49879: LD_EXP 53
49883: PUSH
49884: LD_VAR 0 2
49888: ARRAY
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: PUSH
49894: LD_INT 2
49896: ARRAY
49897: PPUSH
49898: LD_EXP 53
49902: PUSH
49903: LD_VAR 0 2
49907: ARRAY
49908: PUSH
49909: LD_INT 1
49911: ARRAY
49912: PUSH
49913: LD_INT 3
49915: ARRAY
49916: PPUSH
49917: LD_EXP 53
49921: PUSH
49922: LD_VAR 0 2
49926: ARRAY
49927: PUSH
49928: LD_INT 1
49930: ARRAY
49931: PUSH
49932: LD_INT 4
49934: ARRAY
49935: PPUSH
49936: CALL 8995 0 5
49940: IFFALSE 50204
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49942: LD_ADDR_VAR 0 4
49946: PUSH
49947: LD_EXP 48
49951: PUSH
49952: LD_VAR 0 2
49956: ARRAY
49957: PPUSH
49958: LD_INT 25
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PPUSH
49968: CALL_OW 72
49972: PUSH
49973: LD_EXP 50
49977: PUSH
49978: LD_VAR 0 2
49982: ARRAY
49983: DIFF
49984: ST_TO_ADDR
// if not tmp then
49985: LD_VAR 0 4
49989: NOT
49990: IFFALSE 49994
// continue ;
49992: GO 49475
// for j in tmp do
49994: LD_ADDR_VAR 0 3
49998: PUSH
49999: LD_VAR 0 4
50003: PUSH
50004: FOR_IN
50005: IFFALSE 50202
// begin if not mc_builders [ i ] then
50007: LD_EXP 54
50011: PUSH
50012: LD_VAR 0 2
50016: ARRAY
50017: NOT
50018: IFFALSE 50076
// begin SetTag ( j , 103 ) ;
50020: LD_VAR 0 3
50024: PPUSH
50025: LD_INT 103
50027: PPUSH
50028: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
50032: LD_ADDR_EXP 54
50036: PUSH
50037: LD_EXP 54
50041: PPUSH
50042: LD_VAR 0 2
50046: PUSH
50047: LD_EXP 54
50051: PUSH
50052: LD_VAR 0 2
50056: ARRAY
50057: PUSH
50058: LD_INT 1
50060: PLUS
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PPUSH
50066: LD_VAR 0 3
50070: PPUSH
50071: CALL 3247 0 3
50075: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
50076: LD_VAR 0 3
50080: PPUSH
50081: CALL_OW 310
50085: IFFALSE 50096
// ComExitBuilding ( j ) ;
50087: LD_VAR 0 3
50091: PPUSH
50092: CALL_OW 122
// wait ( 3 ) ;
50096: LD_INT 3
50098: PPUSH
50099: CALL_OW 67
// if not HasTask ( j ) then
50103: LD_VAR 0 3
50107: PPUSH
50108: CALL_OW 314
50112: NOT
50113: IFFALSE 50200
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
50115: LD_VAR 0 3
50119: PPUSH
50120: LD_EXP 53
50124: PUSH
50125: LD_VAR 0 2
50129: ARRAY
50130: PUSH
50131: LD_INT 1
50133: ARRAY
50134: PUSH
50135: LD_INT 1
50137: ARRAY
50138: PPUSH
50139: LD_EXP 53
50143: PUSH
50144: LD_VAR 0 2
50148: ARRAY
50149: PUSH
50150: LD_INT 1
50152: ARRAY
50153: PUSH
50154: LD_INT 2
50156: ARRAY
50157: PPUSH
50158: LD_EXP 53
50162: PUSH
50163: LD_VAR 0 2
50167: ARRAY
50168: PUSH
50169: LD_INT 1
50171: ARRAY
50172: PUSH
50173: LD_INT 3
50175: ARRAY
50176: PPUSH
50177: LD_EXP 53
50181: PUSH
50182: LD_VAR 0 2
50186: ARRAY
50187: PUSH
50188: LD_INT 1
50190: ARRAY
50191: PUSH
50192: LD_INT 4
50194: ARRAY
50195: PPUSH
50196: CALL_OW 145
// end ;
50200: GO 50004
50202: POP
50203: POP
// end ; end ;
50204: GO 49475
50206: POP
50207: POP
// end ;
50208: LD_VAR 0 1
50212: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
50213: LD_INT 0
50215: PPUSH
50216: PPUSH
50217: PPUSH
50218: PPUSH
50219: PPUSH
50220: PPUSH
50221: PPUSH
// if not mc_bases then
50222: LD_EXP 48
50226: NOT
50227: IFFALSE 50231
// exit ;
50229: GO 50527
// for i = 1 to mc_bases do
50231: LD_ADDR_VAR 0 2
50235: PUSH
50236: DOUBLE
50237: LD_INT 1
50239: DEC
50240: ST_TO_ADDR
50241: LD_EXP 48
50245: PUSH
50246: FOR_TO
50247: IFFALSE 50525
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
50249: LD_EXP 56
50253: PUSH
50254: LD_VAR 0 2
50258: ARRAY
50259: NOT
50260: PUSH
50261: LD_EXP 48
50265: PUSH
50266: LD_VAR 0 2
50270: ARRAY
50271: PPUSH
50272: LD_INT 30
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PPUSH
50282: CALL_OW 72
50286: NOT
50287: OR
50288: IFFALSE 50292
// continue ;
50290: GO 50246
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
50292: LD_EXP 56
50296: PUSH
50297: LD_VAR 0 2
50301: ARRAY
50302: PUSH
50303: LD_INT 1
50305: ARRAY
50306: PPUSH
50307: CALL_OW 269
50311: IFFALSE 50377
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
50313: LD_ADDR_VAR 0 4
50317: PUSH
50318: LD_EXP 56
50322: PUSH
50323: LD_VAR 0 2
50327: ARRAY
50328: PPUSH
50329: LD_INT 1
50331: PPUSH
50332: CALL_OW 3
50336: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
50337: LD_ADDR_EXP 56
50341: PUSH
50342: LD_EXP 56
50346: PPUSH
50347: LD_VAR 0 2
50351: PPUSH
50352: LD_VAR 0 4
50356: PPUSH
50357: CALL_OW 1
50361: ST_TO_ADDR
// if not mc_turret_list [ i ] then
50362: LD_EXP 56
50366: PUSH
50367: LD_VAR 0 2
50371: ARRAY
50372: NOT
50373: IFFALSE 50377
// continue ;
50375: GO 50246
// end ; busy := false ;
50377: LD_ADDR_VAR 0 6
50381: PUSH
50382: LD_INT 0
50384: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50385: LD_ADDR_VAR 0 4
50389: PUSH
50390: LD_EXP 48
50394: PUSH
50395: LD_VAR 0 2
50399: ARRAY
50400: PPUSH
50401: LD_INT 30
50403: PUSH
50404: LD_INT 3
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PPUSH
50411: CALL_OW 72
50415: ST_TO_ADDR
// for j in tmp do
50416: LD_ADDR_VAR 0 3
50420: PUSH
50421: LD_VAR 0 4
50425: PUSH
50426: FOR_IN
50427: IFFALSE 50455
// if not BuildingStatus ( j ) = bs_idle then
50429: LD_VAR 0 3
50433: PPUSH
50434: CALL_OW 461
50438: PUSH
50439: LD_INT 2
50441: EQUAL
50442: NOT
50443: IFFALSE 50453
// busy := true ;
50445: LD_ADDR_VAR 0 6
50449: PUSH
50450: LD_INT 1
50452: ST_TO_ADDR
50453: GO 50426
50455: POP
50456: POP
// if busy then
50457: LD_VAR 0 6
50461: IFFALSE 50465
// continue ;
50463: GO 50246
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
50465: LD_ADDR_VAR 0 7
50469: PUSH
50470: LD_EXP 56
50474: PUSH
50475: LD_VAR 0 2
50479: ARRAY
50480: PUSH
50481: LD_INT 1
50483: ARRAY
50484: PPUSH
50485: CALL 7400 0 1
50489: ST_TO_ADDR
// if not weapon then
50490: LD_VAR 0 7
50494: NOT
50495: IFFALSE 50499
// continue ;
50497: GO 50246
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
50499: LD_EXP 56
50503: PUSH
50504: LD_VAR 0 2
50508: ARRAY
50509: PUSH
50510: LD_INT 1
50512: ARRAY
50513: PPUSH
50514: LD_VAR 0 7
50518: PPUSH
50519: CALL_OW 148
// end ;
50523: GO 50246
50525: POP
50526: POP
// end ;
50527: LD_VAR 0 1
50531: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
50532: LD_INT 0
50534: PPUSH
50535: PPUSH
50536: PPUSH
50537: PPUSH
50538: PPUSH
50539: PPUSH
50540: PPUSH
// if not mc_bases then
50541: LD_EXP 48
50545: NOT
50546: IFFALSE 50550
// exit ;
50548: GO 51320
// for i = 1 to mc_bases do
50550: LD_ADDR_VAR 0 2
50554: PUSH
50555: DOUBLE
50556: LD_INT 1
50558: DEC
50559: ST_TO_ADDR
50560: LD_EXP 48
50564: PUSH
50565: FOR_TO
50566: IFFALSE 51318
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50568: LD_ADDR_VAR 0 7
50572: PUSH
50573: LD_EXP 48
50577: PUSH
50578: LD_VAR 0 2
50582: ARRAY
50583: PPUSH
50584: LD_INT 24
50586: PUSH
50587: LD_INT 375
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: PUSH
50597: LD_INT 30
50599: PUSH
50600: LD_INT 32
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 30
50609: PUSH
50610: LD_INT 31
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 58
50624: PUSH
50625: EMPTY
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: PPUSH
50633: CALL_OW 72
50637: ST_TO_ADDR
// if not x then
50638: LD_VAR 0 7
50642: NOT
50643: IFFALSE 50647
// continue ;
50645: GO 50565
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50647: LD_ADDR_EXP 57
50651: PUSH
50652: LD_EXP 57
50656: PPUSH
50657: LD_VAR 0 2
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PPUSH
50669: LD_VAR 0 7
50673: PPUSH
50674: CALL 3247 0 3
50678: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50679: LD_EXP 57
50683: PUSH
50684: LD_VAR 0 2
50688: ARRAY
50689: NOT
50690: PUSH
50691: LD_EXP 57
50695: PUSH
50696: LD_VAR 0 2
50700: ARRAY
50701: PUSH
50702: LD_INT 1
50704: ARRAY
50705: NOT
50706: OR
50707: IFFALSE 50711
// continue ;
50709: GO 50565
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50711: LD_EXP 57
50715: PUSH
50716: LD_VAR 0 2
50720: ARRAY
50721: PUSH
50722: LD_INT 1
50724: ARRAY
50725: PUSH
50726: LD_INT 1
50728: ARRAY
50729: PPUSH
50730: CALL_OW 313
50734: PUSH
50735: LD_INT 0
50737: EQUAL
50738: IFFALSE 51316
// if not mc_empty_turret_list [ i ] [ 2 ] then
50740: LD_EXP 57
50744: PUSH
50745: LD_VAR 0 2
50749: ARRAY
50750: PUSH
50751: LD_INT 2
50753: ARRAY
50754: NOT
50755: IFFALSE 51014
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50757: LD_ADDR_VAR 0 6
50761: PUSH
50762: LD_EXP 48
50766: PUSH
50767: LD_VAR 0 2
50771: ARRAY
50772: PUSH
50773: LD_EXP 64
50777: PUSH
50778: LD_VAR 0 2
50782: ARRAY
50783: DIFF
50784: PPUSH
50785: LD_INT 25
50787: PUSH
50788: LD_INT 1
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: LD_INT 54
50800: PUSH
50801: EMPTY
50802: LIST
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PPUSH
50812: CALL_OW 72
50816: ST_TO_ADDR
// if tmp2 then
50817: LD_VAR 0 6
50821: IFFALSE 50863
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50823: LD_ADDR_EXP 57
50827: PUSH
50828: LD_EXP 57
50832: PPUSH
50833: LD_VAR 0 2
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PPUSH
50845: LD_VAR 0 6
50849: PUSH
50850: LD_INT 1
50852: ARRAY
50853: PPUSH
50854: CALL 3247 0 3
50858: ST_TO_ADDR
// break ;
50859: GO 51318
// end else
50861: GO 51012
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50863: LD_ADDR_VAR 0 5
50867: PUSH
50868: LD_EXP 48
50872: PUSH
50873: LD_VAR 0 2
50877: ARRAY
50878: PPUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 30
50884: PUSH
50885: LD_INT 4
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 30
50894: PUSH
50895: LD_INT 5
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: PPUSH
50907: CALL_OW 72
50911: ST_TO_ADDR
// if not tmp then
50912: LD_VAR 0 5
50916: NOT
50917: IFFALSE 50921
// continue ;
50919: GO 50565
// for j in tmp do
50921: LD_ADDR_VAR 0 3
50925: PUSH
50926: LD_VAR 0 5
50930: PUSH
50931: FOR_IN
50932: IFFALSE 51010
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50934: LD_ADDR_VAR 0 4
50938: PUSH
50939: LD_VAR 0 3
50943: PPUSH
50944: CALL_OW 313
50948: PPUSH
50949: LD_INT 25
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PPUSH
50959: CALL_OW 72
50963: ST_TO_ADDR
// if t then
50964: LD_VAR 0 4
50968: IFFALSE 51008
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50970: LD_ADDR_EXP 57
50974: PUSH
50975: LD_EXP 57
50979: PPUSH
50980: LD_VAR 0 2
50984: PUSH
50985: LD_INT 2
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PPUSH
50992: LD_VAR 0 4
50996: PUSH
50997: LD_INT 1
50999: ARRAY
51000: PPUSH
51001: CALL 3247 0 3
51005: ST_TO_ADDR
// break ;
51006: GO 51010
// end ; end ;
51008: GO 50931
51010: POP
51011: POP
// end ; end else
51012: GO 51316
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
51014: LD_EXP 57
51018: PUSH
51019: LD_VAR 0 2
51023: ARRAY
51024: PUSH
51025: LD_INT 2
51027: ARRAY
51028: PUSH
51029: LD_INT 1
51031: ARRAY
51032: PPUSH
51033: CALL_OW 301
51037: IFFALSE 51070
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
51039: LD_ADDR_EXP 57
51043: PUSH
51044: LD_EXP 57
51048: PPUSH
51049: LD_VAR 0 2
51053: PUSH
51054: LD_INT 2
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PPUSH
51061: EMPTY
51062: PPUSH
51063: CALL 3247 0 3
51067: ST_TO_ADDR
// break ;
51068: GO 51318
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
51070: LD_EXP 57
51074: PUSH
51075: LD_VAR 0 2
51079: ARRAY
51080: PUSH
51081: LD_INT 2
51083: ARRAY
51084: PUSH
51085: LD_INT 1
51087: ARRAY
51088: PPUSH
51089: CALL_OW 314
51093: NOT
51094: PUSH
51095: LD_EXP 57
51099: PUSH
51100: LD_VAR 0 2
51104: ARRAY
51105: PUSH
51106: LD_INT 2
51108: ARRAY
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: PUSH
51114: LD_EXP 57
51118: PUSH
51119: LD_VAR 0 2
51123: ARRAY
51124: PUSH
51125: LD_INT 1
51127: ARRAY
51128: PUSH
51129: LD_INT 1
51131: ARRAY
51132: PPUSH
51133: CALL_OW 313
51137: IN
51138: NOT
51139: AND
51140: IFFALSE 51316
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
51142: LD_EXP 57
51146: PUSH
51147: LD_VAR 0 2
51151: ARRAY
51152: PUSH
51153: LD_INT 2
51155: ARRAY
51156: PUSH
51157: LD_INT 1
51159: ARRAY
51160: PPUSH
51161: CALL_OW 310
51165: IFFALSE 51190
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51167: LD_EXP 57
51171: PUSH
51172: LD_VAR 0 2
51176: ARRAY
51177: PUSH
51178: LD_INT 2
51180: ARRAY
51181: PUSH
51182: LD_INT 1
51184: ARRAY
51185: PPUSH
51186: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
51190: LD_EXP 57
51194: PUSH
51195: LD_VAR 0 2
51199: ARRAY
51200: PUSH
51201: LD_INT 2
51203: ARRAY
51204: PUSH
51205: LD_INT 1
51207: ARRAY
51208: PPUSH
51209: LD_EXP 57
51213: PUSH
51214: LD_VAR 0 2
51218: ARRAY
51219: PUSH
51220: LD_INT 1
51222: ARRAY
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: PPUSH
51228: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
51232: LD_INT 35
51234: PPUSH
51235: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
51239: LD_EXP 57
51243: PUSH
51244: LD_VAR 0 2
51248: ARRAY
51249: PUSH
51250: LD_INT 2
51252: ARRAY
51253: NOT
51254: IFFALSE 51258
// break ;
51256: GO 51283
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51258: LD_EXP 57
51262: PUSH
51263: LD_VAR 0 2
51267: ARRAY
51268: PUSH
51269: LD_INT 2
51271: ARRAY
51272: PUSH
51273: LD_INT 1
51275: ARRAY
51276: PPUSH
51277: CALL_OW 310
51281: IFFALSE 51232
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
51283: LD_ADDR_EXP 57
51287: PUSH
51288: LD_EXP 57
51292: PPUSH
51293: LD_VAR 0 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PPUSH
51305: EMPTY
51306: PPUSH
51307: CALL 3247 0 3
51311: ST_TO_ADDR
// exit ;
51312: POP
51313: POP
51314: GO 51320
// end ; end ; end ;
51316: GO 50565
51318: POP
51319: POP
// end ;
51320: LD_VAR 0 1
51324: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
51325: LD_INT 0
51327: PPUSH
51328: PPUSH
51329: PPUSH
51330: PPUSH
51331: PPUSH
51332: PPUSH
// if not mc_bases then
51333: LD_EXP 48
51337: NOT
51338: IFFALSE 51342
// exit ;
51340: GO 52303
// for i = 1 to mc_bases do
51342: LD_ADDR_VAR 0 2
51346: PUSH
51347: DOUBLE
51348: LD_INT 1
51350: DEC
51351: ST_TO_ADDR
51352: LD_EXP 48
51356: PUSH
51357: FOR_TO
51358: IFFALSE 52301
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
51360: LD_EXP 58
51364: PUSH
51365: LD_VAR 0 2
51369: ARRAY
51370: NOT
51371: PUSH
51372: LD_EXP 58
51376: PUSH
51377: LD_VAR 0 2
51381: ARRAY
51382: PUSH
51383: LD_EXP 59
51387: PUSH
51388: LD_VAR 0 2
51392: ARRAY
51393: EQUAL
51394: OR
51395: IFFALSE 51399
// continue ;
51397: GO 51357
// if mc_miners [ i ] then
51399: LD_EXP 59
51403: PUSH
51404: LD_VAR 0 2
51408: ARRAY
51409: IFFALSE 51988
// begin k := 1 ;
51411: LD_ADDR_VAR 0 4
51415: PUSH
51416: LD_INT 1
51418: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
51419: LD_ADDR_VAR 0 3
51423: PUSH
51424: DOUBLE
51425: LD_EXP 59
51429: PUSH
51430: LD_VAR 0 2
51434: ARRAY
51435: INC
51436: ST_TO_ADDR
51437: LD_INT 1
51439: PUSH
51440: FOR_DOWNTO
51441: IFFALSE 51986
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51443: LD_EXP 59
51447: PUSH
51448: LD_VAR 0 2
51452: ARRAY
51453: PUSH
51454: LD_VAR 0 3
51458: ARRAY
51459: PPUSH
51460: CALL_OW 301
51464: IFFALSE 51527
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51466: LD_ADDR_VAR 0 5
51470: PUSH
51471: LD_EXP 59
51475: PUSH
51476: LD_VAR 0 2
51480: ARRAY
51481: PUSH
51482: LD_EXP 59
51486: PUSH
51487: LD_VAR 0 2
51491: ARRAY
51492: PUSH
51493: LD_VAR 0 3
51497: ARRAY
51498: DIFF
51499: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51500: LD_ADDR_EXP 59
51504: PUSH
51505: LD_EXP 59
51509: PPUSH
51510: LD_VAR 0 2
51514: PPUSH
51515: LD_VAR 0 5
51519: PPUSH
51520: CALL_OW 1
51524: ST_TO_ADDR
// continue ;
51525: GO 51440
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
51527: LD_EXP 59
51531: PUSH
51532: LD_VAR 0 2
51536: ARRAY
51537: PUSH
51538: LD_VAR 0 3
51542: ARRAY
51543: PPUSH
51544: CALL 2748 0 1
51548: PUSH
51549: LD_EXP 59
51553: PUSH
51554: LD_VAR 0 2
51558: ARRAY
51559: PUSH
51560: LD_VAR 0 3
51564: ARRAY
51565: PPUSH
51566: CALL_OW 255
51570: PPUSH
51571: LD_EXP 58
51575: PUSH
51576: LD_VAR 0 2
51580: ARRAY
51581: PUSH
51582: LD_VAR 0 4
51586: ARRAY
51587: PUSH
51588: LD_INT 1
51590: ARRAY
51591: PPUSH
51592: LD_EXP 58
51596: PUSH
51597: LD_VAR 0 2
51601: ARRAY
51602: PUSH
51603: LD_VAR 0 4
51607: ARRAY
51608: PUSH
51609: LD_INT 2
51611: ARRAY
51612: PPUSH
51613: LD_INT 15
51615: PPUSH
51616: CALL 3741 0 4
51620: PUSH
51621: LD_INT 4
51623: ARRAY
51624: PUSH
51625: LD_EXP 59
51629: PUSH
51630: LD_VAR 0 2
51634: ARRAY
51635: PUSH
51636: LD_VAR 0 3
51640: ARRAY
51641: PPUSH
51642: LD_INT 10
51644: PPUSH
51645: CALL 5438 0 2
51649: PUSH
51650: LD_INT 4
51652: ARRAY
51653: OR
51654: AND
51655: IFFALSE 51678
// ComStop ( mc_miners [ i ] [ j ] ) ;
51657: LD_EXP 59
51661: PUSH
51662: LD_VAR 0 2
51666: ARRAY
51667: PUSH
51668: LD_VAR 0 3
51672: ARRAY
51673: PPUSH
51674: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 then
51678: LD_EXP 59
51682: PUSH
51683: LD_VAR 0 2
51687: ARRAY
51688: PUSH
51689: LD_VAR 0 3
51693: ARRAY
51694: PPUSH
51695: CALL_OW 257
51699: PUSH
51700: LD_INT 1
51702: EQUAL
51703: PUSH
51704: LD_EXP 59
51708: PUSH
51709: LD_VAR 0 2
51713: ARRAY
51714: PUSH
51715: LD_VAR 0 3
51719: ARRAY
51720: PPUSH
51721: CALL_OW 459
51725: NOT
51726: AND
51727: PUSH
51728: LD_EXP 59
51732: PUSH
51733: LD_VAR 0 2
51737: ARRAY
51738: PUSH
51739: LD_VAR 0 3
51743: ARRAY
51744: PPUSH
51745: CALL_OW 255
51749: PPUSH
51750: LD_EXP 58
51754: PUSH
51755: LD_VAR 0 2
51759: ARRAY
51760: PUSH
51761: LD_VAR 0 4
51765: ARRAY
51766: PUSH
51767: LD_INT 1
51769: ARRAY
51770: PPUSH
51771: LD_EXP 58
51775: PUSH
51776: LD_VAR 0 2
51780: ARRAY
51781: PUSH
51782: LD_VAR 0 4
51786: ARRAY
51787: PUSH
51788: LD_INT 2
51790: ARRAY
51791: PPUSH
51792: LD_INT 15
51794: PPUSH
51795: CALL 3741 0 4
51799: PUSH
51800: LD_INT 4
51802: ARRAY
51803: PUSH
51804: LD_INT 0
51806: EQUAL
51807: AND
51808: IFFALSE 51984
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51810: LD_EXP 59
51814: PUSH
51815: LD_VAR 0 2
51819: ARRAY
51820: PUSH
51821: LD_VAR 0 3
51825: ARRAY
51826: PPUSH
51827: CALL_OW 310
51831: IFFALSE 51854
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51833: LD_EXP 59
51837: PUSH
51838: LD_VAR 0 2
51842: ARRAY
51843: PUSH
51844: LD_VAR 0 3
51848: ARRAY
51849: PPUSH
51850: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51854: LD_EXP 59
51858: PUSH
51859: LD_VAR 0 2
51863: ARRAY
51864: PUSH
51865: LD_VAR 0 3
51869: ARRAY
51870: PPUSH
51871: CALL_OW 314
51875: NOT
51876: IFFALSE 51944
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51878: LD_EXP 59
51882: PUSH
51883: LD_VAR 0 2
51887: ARRAY
51888: PUSH
51889: LD_VAR 0 3
51893: ARRAY
51894: PPUSH
51895: LD_EXP 58
51899: PUSH
51900: LD_VAR 0 2
51904: ARRAY
51905: PUSH
51906: LD_VAR 0 4
51910: ARRAY
51911: PUSH
51912: LD_INT 1
51914: ARRAY
51915: PPUSH
51916: LD_EXP 58
51920: PUSH
51921: LD_VAR 0 2
51925: ARRAY
51926: PUSH
51927: LD_VAR 0 4
51931: ARRAY
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: PPUSH
51937: LD_INT 0
51939: PPUSH
51940: CALL_OW 193
// k := k + 1 ;
51944: LD_ADDR_VAR 0 4
51948: PUSH
51949: LD_VAR 0 4
51953: PUSH
51954: LD_INT 1
51956: PLUS
51957: ST_TO_ADDR
// if k > mc_mines [ i ] then
51958: LD_VAR 0 4
51962: PUSH
51963: LD_EXP 58
51967: PUSH
51968: LD_VAR 0 2
51972: ARRAY
51973: GREATER
51974: IFFALSE 51984
// k := 1 ;
51976: LD_ADDR_VAR 0 4
51980: PUSH
51981: LD_INT 1
51983: ST_TO_ADDR
// end ; end ;
51984: GO 51440
51986: POP
51987: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51988: LD_ADDR_VAR 0 5
51992: PUSH
51993: LD_EXP 48
51997: PUSH
51998: LD_VAR 0 2
52002: ARRAY
52003: PPUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 30
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 30
52019: PUSH
52020: LD_INT 5
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 30
52029: PUSH
52030: LD_INT 32
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: PPUSH
52043: CALL_OW 72
52047: ST_TO_ADDR
// if not tmp then
52048: LD_VAR 0 5
52052: NOT
52053: IFFALSE 52057
// continue ;
52055: GO 51357
// list := [ ] ;
52057: LD_ADDR_VAR 0 6
52061: PUSH
52062: EMPTY
52063: ST_TO_ADDR
// for j in tmp do
52064: LD_ADDR_VAR 0 3
52068: PUSH
52069: LD_VAR 0 5
52073: PUSH
52074: FOR_IN
52075: IFFALSE 52144
// begin for k in UnitsInside ( j ) do
52077: LD_ADDR_VAR 0 4
52081: PUSH
52082: LD_VAR 0 3
52086: PPUSH
52087: CALL_OW 313
52091: PUSH
52092: FOR_IN
52093: IFFALSE 52140
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
52095: LD_VAR 0 4
52099: PPUSH
52100: CALL_OW 257
52104: PUSH
52105: LD_INT 1
52107: EQUAL
52108: PUSH
52109: LD_VAR 0 4
52113: PPUSH
52114: CALL_OW 459
52118: NOT
52119: AND
52120: IFFALSE 52138
// list := list ^ k ;
52122: LD_ADDR_VAR 0 6
52126: PUSH
52127: LD_VAR 0 6
52131: PUSH
52132: LD_VAR 0 4
52136: ADD
52137: ST_TO_ADDR
52138: GO 52092
52140: POP
52141: POP
// end ;
52142: GO 52074
52144: POP
52145: POP
// list := list diff mc_miners [ i ] ;
52146: LD_ADDR_VAR 0 6
52150: PUSH
52151: LD_VAR 0 6
52155: PUSH
52156: LD_EXP 59
52160: PUSH
52161: LD_VAR 0 2
52165: ARRAY
52166: DIFF
52167: ST_TO_ADDR
// if not list then
52168: LD_VAR 0 6
52172: NOT
52173: IFFALSE 52177
// continue ;
52175: GO 51357
// k := mc_mines [ i ] - mc_miners [ i ] ;
52177: LD_ADDR_VAR 0 4
52181: PUSH
52182: LD_EXP 58
52186: PUSH
52187: LD_VAR 0 2
52191: ARRAY
52192: PUSH
52193: LD_EXP 59
52197: PUSH
52198: LD_VAR 0 2
52202: ARRAY
52203: MINUS
52204: ST_TO_ADDR
// if k > list then
52205: LD_VAR 0 4
52209: PUSH
52210: LD_VAR 0 6
52214: GREATER
52215: IFFALSE 52227
// k := list ;
52217: LD_ADDR_VAR 0 4
52221: PUSH
52222: LD_VAR 0 6
52226: ST_TO_ADDR
// for j = 1 to k do
52227: LD_ADDR_VAR 0 3
52231: PUSH
52232: DOUBLE
52233: LD_INT 1
52235: DEC
52236: ST_TO_ADDR
52237: LD_VAR 0 4
52241: PUSH
52242: FOR_TO
52243: IFFALSE 52297
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
52245: LD_ADDR_EXP 59
52249: PUSH
52250: LD_EXP 59
52254: PPUSH
52255: LD_VAR 0 2
52259: PUSH
52260: LD_EXP 59
52264: PUSH
52265: LD_VAR 0 2
52269: ARRAY
52270: PUSH
52271: LD_INT 1
52273: PLUS
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PPUSH
52279: LD_VAR 0 6
52283: PUSH
52284: LD_VAR 0 3
52288: ARRAY
52289: PPUSH
52290: CALL 3247 0 3
52294: ST_TO_ADDR
52295: GO 52242
52297: POP
52298: POP
// end ;
52299: GO 51357
52301: POP
52302: POP
// end ;
52303: LD_VAR 0 1
52307: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
52308: LD_INT 0
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
// if not mc_bases then
52315: LD_EXP 48
52319: NOT
52320: IFFALSE 52324
// exit ;
52322: GO 53100
// for i = 1 to mc_bases do
52324: LD_ADDR_VAR 0 2
52328: PUSH
52329: DOUBLE
52330: LD_INT 1
52332: DEC
52333: ST_TO_ADDR
52334: LD_EXP 48
52338: PUSH
52339: FOR_TO
52340: IFFALSE 53098
// begin if not mc_bases [ i ] then
52342: LD_EXP 48
52346: PUSH
52347: LD_VAR 0 2
52351: ARRAY
52352: NOT
52353: IFFALSE 52357
// continue ;
52355: GO 52339
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
52357: LD_EXP 61
52361: PUSH
52362: LD_VAR 0 2
52366: ARRAY
52367: NOT
52368: PUSH
52369: LD_EXP 62
52373: PUSH
52374: LD_VAR 0 2
52378: ARRAY
52379: AND
52380: IFFALSE 52418
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52382: LD_ADDR_EXP 62
52386: PUSH
52387: LD_EXP 62
52391: PPUSH
52392: LD_VAR 0 2
52396: PPUSH
52397: EMPTY
52398: PPUSH
52399: CALL_OW 1
52403: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
52404: LD_VAR 0 2
52408: PPUSH
52409: LD_INT 107
52411: PPUSH
52412: CALL 47819 0 2
// continue ;
52416: GO 52339
// end ; target := [ ] ;
52418: LD_ADDR_VAR 0 5
52422: PUSH
52423: EMPTY
52424: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
52425: LD_ADDR_VAR 0 3
52429: PUSH
52430: DOUBLE
52431: LD_EXP 61
52435: PUSH
52436: LD_VAR 0 2
52440: ARRAY
52441: INC
52442: ST_TO_ADDR
52443: LD_INT 1
52445: PUSH
52446: FOR_DOWNTO
52447: IFFALSE 52707
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
52449: LD_EXP 61
52453: PUSH
52454: LD_VAR 0 2
52458: ARRAY
52459: PUSH
52460: LD_VAR 0 3
52464: ARRAY
52465: PUSH
52466: LD_INT 2
52468: ARRAY
52469: PPUSH
52470: LD_EXP 61
52474: PUSH
52475: LD_VAR 0 2
52479: ARRAY
52480: PUSH
52481: LD_VAR 0 3
52485: ARRAY
52486: PUSH
52487: LD_INT 3
52489: ARRAY
52490: PPUSH
52491: CALL_OW 488
52495: PUSH
52496: LD_EXP 61
52500: PUSH
52501: LD_VAR 0 2
52505: ARRAY
52506: PUSH
52507: LD_VAR 0 3
52511: ARRAY
52512: PUSH
52513: LD_INT 2
52515: ARRAY
52516: PPUSH
52517: LD_EXP 61
52521: PUSH
52522: LD_VAR 0 2
52526: ARRAY
52527: PUSH
52528: LD_VAR 0 3
52532: ARRAY
52533: PUSH
52534: LD_INT 3
52536: ARRAY
52537: PPUSH
52538: CALL_OW 284
52542: PUSH
52543: LD_INT 0
52545: EQUAL
52546: AND
52547: IFFALSE 52602
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52549: LD_ADDR_VAR 0 4
52553: PUSH
52554: LD_EXP 61
52558: PUSH
52559: LD_VAR 0 2
52563: ARRAY
52564: PPUSH
52565: LD_VAR 0 3
52569: PPUSH
52570: CALL_OW 3
52574: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52575: LD_ADDR_EXP 61
52579: PUSH
52580: LD_EXP 61
52584: PPUSH
52585: LD_VAR 0 2
52589: PPUSH
52590: LD_VAR 0 4
52594: PPUSH
52595: CALL_OW 1
52599: ST_TO_ADDR
// continue ;
52600: GO 52446
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52602: LD_EXP 48
52606: PUSH
52607: LD_VAR 0 2
52611: ARRAY
52612: PUSH
52613: LD_INT 1
52615: ARRAY
52616: PPUSH
52617: CALL_OW 255
52621: PPUSH
52622: LD_EXP 61
52626: PUSH
52627: LD_VAR 0 2
52631: ARRAY
52632: PUSH
52633: LD_VAR 0 3
52637: ARRAY
52638: PUSH
52639: LD_INT 2
52641: ARRAY
52642: PPUSH
52643: LD_EXP 61
52647: PUSH
52648: LD_VAR 0 2
52652: ARRAY
52653: PUSH
52654: LD_VAR 0 3
52658: ARRAY
52659: PUSH
52660: LD_INT 3
52662: ARRAY
52663: PPUSH
52664: LD_INT 20
52666: PPUSH
52667: CALL 3741 0 4
52671: PUSH
52672: LD_INT 4
52674: ARRAY
52675: PUSH
52676: LD_INT 0
52678: EQUAL
52679: IFFALSE 52705
// begin target := mc_crates [ i ] [ j ] ;
52681: LD_ADDR_VAR 0 5
52685: PUSH
52686: LD_EXP 61
52690: PUSH
52691: LD_VAR 0 2
52695: ARRAY
52696: PUSH
52697: LD_VAR 0 3
52701: ARRAY
52702: ST_TO_ADDR
// break ;
52703: GO 52707
// end ; end ;
52705: GO 52446
52707: POP
52708: POP
// if not target then
52709: LD_VAR 0 5
52713: NOT
52714: IFFALSE 52718
// continue ;
52716: GO 52339
// if mc_crates_collector [ i ] < 5 then
52718: LD_EXP 62
52722: PUSH
52723: LD_VAR 0 2
52727: ARRAY
52728: PUSH
52729: LD_INT 5
52731: LESS
52732: IFFALSE 52912
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52734: LD_ADDR_VAR 0 4
52738: PUSH
52739: LD_EXP 48
52743: PUSH
52744: LD_VAR 0 2
52748: ARRAY
52749: PPUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 25
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 25
52765: PUSH
52766: LD_INT 16
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 24
52780: PUSH
52781: LD_INT 750
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PPUSH
52792: CALL_OW 72
52796: ST_TO_ADDR
// if not tmp then
52797: LD_VAR 0 4
52801: NOT
52802: IFFALSE 52806
// continue ;
52804: GO 52339
// for j in tmp do
52806: LD_ADDR_VAR 0 3
52810: PUSH
52811: LD_VAR 0 4
52815: PUSH
52816: FOR_IN
52817: IFFALSE 52910
// if GetTag ( j ) = 0 then
52819: LD_VAR 0 3
52823: PPUSH
52824: CALL_OW 110
52828: PUSH
52829: LD_INT 0
52831: EQUAL
52832: IFFALSE 52908
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52834: LD_ADDR_EXP 62
52838: PUSH
52839: LD_EXP 62
52843: PPUSH
52844: LD_VAR 0 2
52848: PUSH
52849: LD_EXP 62
52853: PUSH
52854: LD_VAR 0 2
52858: ARRAY
52859: PUSH
52860: LD_INT 1
52862: PLUS
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PPUSH
52868: LD_VAR 0 3
52872: PPUSH
52873: CALL 3247 0 3
52877: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52878: LD_VAR 0 3
52882: PPUSH
52883: LD_INT 107
52885: PPUSH
52886: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52890: LD_EXP 62
52894: PUSH
52895: LD_VAR 0 2
52899: ARRAY
52900: PUSH
52901: LD_INT 5
52903: GREATER
52904: IFFALSE 52908
// break ;
52906: GO 52910
// end ;
52908: GO 52816
52910: POP
52911: POP
// end ; if mc_crates_collector [ i ] and target then
52912: LD_EXP 62
52916: PUSH
52917: LD_VAR 0 2
52921: ARRAY
52922: PUSH
52923: LD_VAR 0 5
52927: AND
52928: IFFALSE 53096
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52930: LD_EXP 62
52934: PUSH
52935: LD_VAR 0 2
52939: ARRAY
52940: PUSH
52941: LD_VAR 0 5
52945: PUSH
52946: LD_INT 1
52948: ARRAY
52949: LESS
52950: IFFALSE 52970
// tmp := mc_crates_collector [ i ] else
52952: LD_ADDR_VAR 0 4
52956: PUSH
52957: LD_EXP 62
52961: PUSH
52962: LD_VAR 0 2
52966: ARRAY
52967: ST_TO_ADDR
52968: GO 52984
// tmp := target [ 1 ] ;
52970: LD_ADDR_VAR 0 4
52974: PUSH
52975: LD_VAR 0 5
52979: PUSH
52980: LD_INT 1
52982: ARRAY
52983: ST_TO_ADDR
// for j = 1 to tmp do
52984: LD_ADDR_VAR 0 3
52988: PUSH
52989: DOUBLE
52990: LD_INT 1
52992: DEC
52993: ST_TO_ADDR
52994: LD_VAR 0 4
52998: PUSH
52999: FOR_TO
53000: IFFALSE 53094
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
53002: LD_EXP 62
53006: PUSH
53007: LD_VAR 0 2
53011: ARRAY
53012: PUSH
53013: LD_VAR 0 3
53017: ARRAY
53018: PPUSH
53019: CALL_OW 310
53023: IFFALSE 53046
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
53025: LD_EXP 62
53029: PUSH
53030: LD_VAR 0 2
53034: ARRAY
53035: PUSH
53036: LD_VAR 0 3
53040: ARRAY
53041: PPUSH
53042: CALL_OW 122
// wait ( 3 ) ;
53046: LD_INT 3
53048: PPUSH
53049: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
53053: LD_EXP 62
53057: PUSH
53058: LD_VAR 0 2
53062: ARRAY
53063: PUSH
53064: LD_VAR 0 3
53068: ARRAY
53069: PPUSH
53070: LD_VAR 0 5
53074: PUSH
53075: LD_INT 2
53077: ARRAY
53078: PPUSH
53079: LD_VAR 0 5
53083: PUSH
53084: LD_INT 3
53086: ARRAY
53087: PPUSH
53088: CALL_OW 117
// end ;
53092: GO 52999
53094: POP
53095: POP
// end ; end ;
53096: GO 52339
53098: POP
53099: POP
// end ;
53100: LD_VAR 0 1
53104: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
53105: LD_INT 0
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
// if not mc_bases then
53111: LD_EXP 48
53115: NOT
53116: IFFALSE 53120
// exit ;
53118: GO 53269
// for i = 1 to mc_bases do
53120: LD_ADDR_VAR 0 2
53124: PUSH
53125: DOUBLE
53126: LD_INT 1
53128: DEC
53129: ST_TO_ADDR
53130: LD_EXP 48
53134: PUSH
53135: FOR_TO
53136: IFFALSE 53267
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
53138: LD_ADDR_VAR 0 4
53142: PUSH
53143: LD_EXP 63
53147: PUSH
53148: LD_VAR 0 2
53152: ARRAY
53153: PPUSH
53154: LD_INT 33
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PPUSH
53164: CALL_OW 72
53168: ST_TO_ADDR
// if tmp then
53169: LD_VAR 0 4
53173: IFFALSE 53265
// for j in tmp do
53175: LD_ADDR_VAR 0 3
53179: PUSH
53180: LD_VAR 0 4
53184: PUSH
53185: FOR_IN
53186: IFFALSE 53263
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
53188: LD_VAR 0 3
53192: PPUSH
53193: CALL_OW 312
53197: NOT
53198: PUSH
53199: LD_VAR 0 3
53203: PPUSH
53204: CALL_OW 256
53208: PUSH
53209: LD_INT 250
53211: GREATEREQUAL
53212: AND
53213: IFFALSE 53226
// Connect ( j ) else
53215: LD_VAR 0 3
53219: PPUSH
53220: CALL 5747 0 1
53224: GO 53261
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
53226: LD_VAR 0 3
53230: PPUSH
53231: CALL_OW 256
53235: PUSH
53236: LD_INT 250
53238: LESS
53239: PUSH
53240: LD_VAR 0 3
53244: PPUSH
53245: CALL_OW 312
53249: AND
53250: IFFALSE 53261
// ComUnlink ( j ) ;
53252: LD_VAR 0 3
53256: PPUSH
53257: CALL_OW 136
53261: GO 53185
53263: POP
53264: POP
// end ;
53265: GO 53135
53267: POP
53268: POP
// end ;
53269: LD_VAR 0 1
53273: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
53274: LD_INT 0
53276: PPUSH
53277: PPUSH
53278: PPUSH
53279: PPUSH
53280: PPUSH
// if not mc_bases then
53281: LD_EXP 48
53285: NOT
53286: IFFALSE 53290
// exit ;
53288: GO 53657
// for i = 1 to mc_bases do
53290: LD_ADDR_VAR 0 2
53294: PUSH
53295: DOUBLE
53296: LD_INT 1
53298: DEC
53299: ST_TO_ADDR
53300: LD_EXP 48
53304: PUSH
53305: FOR_TO
53306: IFFALSE 53655
// begin if not mc_produce [ i ] then
53308: LD_EXP 65
53312: PUSH
53313: LD_VAR 0 2
53317: ARRAY
53318: NOT
53319: IFFALSE 53323
// continue ;
53321: GO 53305
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53323: LD_ADDR_VAR 0 5
53327: PUSH
53328: LD_EXP 48
53332: PUSH
53333: LD_VAR 0 2
53337: ARRAY
53338: PPUSH
53339: LD_INT 30
53341: PUSH
53342: LD_INT 3
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PPUSH
53349: CALL_OW 72
53353: ST_TO_ADDR
// if not fac then
53354: LD_VAR 0 5
53358: NOT
53359: IFFALSE 53363
// continue ;
53361: GO 53305
// for j in fac do
53363: LD_ADDR_VAR 0 3
53367: PUSH
53368: LD_VAR 0 5
53372: PUSH
53373: FOR_IN
53374: IFFALSE 53651
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
53376: LD_VAR 0 3
53380: PPUSH
53381: CALL_OW 461
53385: PUSH
53386: LD_INT 2
53388: NONEQUAL
53389: PUSH
53390: LD_VAR 0 3
53394: PPUSH
53395: LD_INT 20
53397: PPUSH
53398: CALL 5438 0 2
53402: PUSH
53403: LD_INT 4
53405: ARRAY
53406: OR
53407: PUSH
53408: LD_VAR 0 3
53412: PPUSH
53413: CALL_OW 313
53417: PUSH
53418: LD_INT 0
53420: EQUAL
53421: OR
53422: IFFALSE 53426
// continue ;
53424: GO 53373
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
53426: LD_VAR 0 3
53430: PPUSH
53431: LD_EXP 65
53435: PUSH
53436: LD_VAR 0 2
53440: ARRAY
53441: PUSH
53442: LD_INT 1
53444: ARRAY
53445: PUSH
53446: LD_INT 1
53448: ARRAY
53449: PPUSH
53450: LD_EXP 65
53454: PUSH
53455: LD_VAR 0 2
53459: ARRAY
53460: PUSH
53461: LD_INT 1
53463: ARRAY
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PPUSH
53469: LD_EXP 65
53473: PUSH
53474: LD_VAR 0 2
53478: ARRAY
53479: PUSH
53480: LD_INT 1
53482: ARRAY
53483: PUSH
53484: LD_INT 3
53486: ARRAY
53487: PPUSH
53488: LD_EXP 65
53492: PUSH
53493: LD_VAR 0 2
53497: ARRAY
53498: PUSH
53499: LD_INT 1
53501: ARRAY
53502: PUSH
53503: LD_INT 4
53505: ARRAY
53506: PPUSH
53507: CALL_OW 448
53511: IFFALSE 53649
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
53513: LD_VAR 0 3
53517: PPUSH
53518: LD_EXP 65
53522: PUSH
53523: LD_VAR 0 2
53527: ARRAY
53528: PUSH
53529: LD_INT 1
53531: ARRAY
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: PPUSH
53537: LD_EXP 65
53541: PUSH
53542: LD_VAR 0 2
53546: ARRAY
53547: PUSH
53548: LD_INT 1
53550: ARRAY
53551: PUSH
53552: LD_INT 2
53554: ARRAY
53555: PPUSH
53556: LD_EXP 65
53560: PUSH
53561: LD_VAR 0 2
53565: ARRAY
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: PUSH
53571: LD_INT 3
53573: ARRAY
53574: PPUSH
53575: LD_EXP 65
53579: PUSH
53580: LD_VAR 0 2
53584: ARRAY
53585: PUSH
53586: LD_INT 1
53588: ARRAY
53589: PUSH
53590: LD_INT 4
53592: ARRAY
53593: PPUSH
53594: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
53598: LD_ADDR_VAR 0 4
53602: PUSH
53603: LD_EXP 65
53607: PUSH
53608: LD_VAR 0 2
53612: ARRAY
53613: PPUSH
53614: LD_INT 1
53616: PPUSH
53617: CALL_OW 3
53621: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
53622: LD_ADDR_EXP 65
53626: PUSH
53627: LD_EXP 65
53631: PPUSH
53632: LD_VAR 0 2
53636: PPUSH
53637: LD_VAR 0 4
53641: PPUSH
53642: CALL_OW 1
53646: ST_TO_ADDR
// break ;
53647: GO 53651
// end ; end ;
53649: GO 53373
53651: POP
53652: POP
// end ;
53653: GO 53305
53655: POP
53656: POP
// end ;
53657: LD_VAR 0 1
53661: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
53662: LD_INT 0
53664: PPUSH
53665: PPUSH
53666: PPUSH
// if not mc_bases then
53667: LD_EXP 48
53671: NOT
53672: IFFALSE 53676
// exit ;
53674: GO 53765
// for i = 1 to mc_bases do
53676: LD_ADDR_VAR 0 2
53680: PUSH
53681: DOUBLE
53682: LD_INT 1
53684: DEC
53685: ST_TO_ADDR
53686: LD_EXP 48
53690: PUSH
53691: FOR_TO
53692: IFFALSE 53763
// begin if mc_attack [ i ] then
53694: LD_EXP 64
53698: PUSH
53699: LD_VAR 0 2
53703: ARRAY
53704: IFFALSE 53761
// begin tmp := mc_attack [ i ] [ 1 ] ;
53706: LD_ADDR_VAR 0 3
53710: PUSH
53711: LD_EXP 64
53715: PUSH
53716: LD_VAR 0 2
53720: ARRAY
53721: PUSH
53722: LD_INT 1
53724: ARRAY
53725: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53726: LD_ADDR_EXP 64
53730: PUSH
53731: LD_EXP 64
53735: PPUSH
53736: LD_VAR 0 2
53740: PPUSH
53741: EMPTY
53742: PPUSH
53743: CALL_OW 1
53747: ST_TO_ADDR
// Attack ( tmp ) ;
53748: LD_VAR 0 3
53752: PPUSH
53753: CALL 29624 0 1
// exit ;
53757: POP
53758: POP
53759: GO 53765
// end ; end ;
53761: GO 53691
53763: POP
53764: POP
// end ;
53765: LD_VAR 0 1
53769: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53770: LD_INT 0
53772: PPUSH
53773: PPUSH
53774: PPUSH
53775: PPUSH
53776: PPUSH
53777: PPUSH
53778: PPUSH
// if not mc_bases then
53779: LD_EXP 48
53783: NOT
53784: IFFALSE 53788
// exit ;
53786: GO 54205
// for i = 1 to mc_bases do
53788: LD_ADDR_VAR 0 2
53792: PUSH
53793: DOUBLE
53794: LD_INT 1
53796: DEC
53797: ST_TO_ADDR
53798: LD_EXP 48
53802: PUSH
53803: FOR_TO
53804: IFFALSE 54203
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53806: LD_ADDR_EXP 67
53810: PUSH
53811: LD_EXP 67
53815: PPUSH
53816: LD_VAR 0 2
53820: PPUSH
53821: LD_EXP 48
53825: PUSH
53826: LD_VAR 0 2
53830: ARRAY
53831: PPUSH
53832: CALL 33476 0 1
53836: PPUSH
53837: CALL_OW 1
53841: ST_TO_ADDR
// if not mc_scan [ i ] then
53842: LD_EXP 67
53846: PUSH
53847: LD_VAR 0 2
53851: ARRAY
53852: NOT
53853: IFFALSE 53964
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53855: LD_ADDR_VAR 0 4
53859: PUSH
53860: LD_EXP 48
53864: PUSH
53865: LD_VAR 0 2
53869: ARRAY
53870: PPUSH
53871: LD_INT 2
53873: PUSH
53874: LD_INT 25
53876: PUSH
53877: LD_INT 5
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 25
53886: PUSH
53887: LD_INT 8
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 25
53896: PUSH
53897: LD_INT 9
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: PPUSH
53910: CALL_OW 72
53914: ST_TO_ADDR
// if not tmp then
53915: LD_VAR 0 4
53919: NOT
53920: IFFALSE 53924
// continue ;
53922: GO 53803
// for j in tmp do
53924: LD_ADDR_VAR 0 3
53928: PUSH
53929: LD_VAR 0 4
53933: PUSH
53934: FOR_IN
53935: IFFALSE 53962
// if IsInUnit ( j ) then
53937: LD_VAR 0 3
53941: PPUSH
53942: CALL_OW 310
53946: IFFALSE 53960
// SetClass ( j , 1 ) ;
53948: LD_VAR 0 3
53952: PPUSH
53953: LD_INT 1
53955: PPUSH
53956: CALL_OW 336
53960: GO 53934
53962: POP
53963: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53964: LD_EXP 67
53968: PUSH
53969: LD_VAR 0 2
53973: ARRAY
53974: PUSH
53975: LD_EXP 66
53979: PUSH
53980: LD_VAR 0 2
53984: ARRAY
53985: AND
53986: IFFALSE 54201
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53988: LD_ADDR_VAR 0 7
53992: PUSH
53993: LD_EXP 66
53997: PUSH
53998: LD_INT 1
54000: ARRAY
54001: PPUSH
54002: CALL 33583 0 1
54006: ST_TO_ADDR
// if class then
54007: LD_VAR 0 7
54011: IFFALSE 54134
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
54013: LD_ADDR_VAR 0 4
54017: PUSH
54018: LD_EXP 48
54022: PUSH
54023: LD_VAR 0 2
54027: ARRAY
54028: PPUSH
54029: LD_INT 30
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PPUSH
54039: CALL_OW 72
54043: ST_TO_ADDR
// if tmp then
54044: LD_VAR 0 4
54048: IFFALSE 54134
// begin for j in tmp do
54050: LD_ADDR_VAR 0 3
54054: PUSH
54055: LD_VAR 0 4
54059: PUSH
54060: FOR_IN
54061: IFFALSE 54132
// begin t := UnitsInside ( j ) ;
54063: LD_ADDR_VAR 0 5
54067: PUSH
54068: LD_VAR 0 3
54072: PPUSH
54073: CALL_OW 313
54077: ST_TO_ADDR
// if not t then
54078: LD_VAR 0 5
54082: NOT
54083: IFFALSE 54087
// continue ;
54085: GO 54060
// for x in t do
54087: LD_ADDR_VAR 0 6
54091: PUSH
54092: LD_VAR 0 5
54096: PUSH
54097: FOR_IN
54098: IFFALSE 54128
// if not MineOfUnit ( x ) then
54100: LD_VAR 0 6
54104: PPUSH
54105: CALL_OW 459
54109: NOT
54110: IFFALSE 54126
// SetClass ( x , class ) ;
54112: LD_VAR 0 6
54116: PPUSH
54117: LD_VAR 0 7
54121: PPUSH
54122: CALL_OW 336
54126: GO 54097
54128: POP
54129: POP
// end ;
54130: GO 54060
54132: POP
54133: POP
// end ; end ; tmp := mc_defender [ i ] ;
54134: LD_ADDR_VAR 0 4
54138: PUSH
54139: LD_EXP 66
54143: PUSH
54144: LD_VAR 0 2
54148: ARRAY
54149: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
54150: LD_ADDR_EXP 66
54154: PUSH
54155: LD_EXP 66
54159: PPUSH
54160: LD_VAR 0 2
54164: PPUSH
54165: EMPTY
54166: PPUSH
54167: CALL_OW 1
54171: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
54172: LD_VAR 0 2
54176: PPUSH
54177: LD_VAR 0 4
54181: PPUSH
54182: LD_EXP 67
54186: PUSH
54187: LD_VAR 0 2
54191: ARRAY
54192: PPUSH
54193: CALL 32922 0 3
// exit ;
54197: POP
54198: POP
54199: GO 54205
// end ; end ;
54201: GO 53803
54203: POP
54204: POP
// end ;
54205: LD_VAR 0 1
54209: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
54210: LD_INT 0
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
54216: LD_VAR 0 1
54220: NOT
54221: PUSH
54222: LD_VAR 0 2
54226: NOT
54227: OR
54228: PUSH
54229: LD_VAR 0 3
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: LD_INT 4
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: LD_INT 8
54251: PUSH
54252: LD_INT 9
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: IN
54264: NOT
54265: OR
54266: PUSH
54267: LD_VAR 0 2
54271: PUSH
54272: LD_EXP 66
54276: PUSH
54277: LD_VAR 0 5
54281: ARRAY
54282: IN
54283: OR
54284: IFFALSE 54288
// exit ;
54286: GO 54700
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
54288: LD_ADDR_VAR 0 1
54292: PUSH
54293: LD_VAR 0 1
54297: PPUSH
54298: LD_INT 21
54300: PUSH
54301: LD_INT 3
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 24
54310: PUSH
54311: LD_INT 250
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PPUSH
54322: CALL_OW 72
54326: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
54327: LD_VAR 0 3
54331: PUSH
54332: LD_INT 5
54334: PUSH
54335: LD_INT 8
54337: PUSH
54338: LD_INT 9
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: LIST
54345: IN
54346: IFFALSE 54356
// class := 1 ;
54348: LD_ADDR_VAR 0 3
54352: PUSH
54353: LD_INT 1
54355: ST_TO_ADDR
// case class of 1 :
54356: LD_VAR 0 3
54360: PUSH
54361: LD_INT 1
54363: DOUBLE
54364: EQUAL
54365: IFTRUE 54369
54367: GO 54415
54369: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
54370: LD_ADDR_VAR 0 7
54374: PUSH
54375: LD_VAR 0 1
54379: PPUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 30
54385: PUSH
54386: LD_INT 4
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 30
54395: PUSH
54396: LD_INT 5
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: PPUSH
54408: CALL_OW 72
54412: ST_TO_ADDR
54413: GO 54589
54415: LD_INT 2
54417: DOUBLE
54418: EQUAL
54419: IFTRUE 54423
54421: GO 54469
54423: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
54424: LD_ADDR_VAR 0 7
54428: PUSH
54429: LD_VAR 0 1
54433: PPUSH
54434: LD_INT 2
54436: PUSH
54437: LD_INT 30
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 30
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: PPUSH
54462: CALL_OW 72
54466: ST_TO_ADDR
54467: GO 54589
54469: LD_INT 3
54471: DOUBLE
54472: EQUAL
54473: IFTRUE 54477
54475: GO 54523
54477: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
54478: LD_ADDR_VAR 0 7
54482: PUSH
54483: LD_VAR 0 1
54487: PPUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 30
54493: PUSH
54494: LD_INT 2
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 30
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: PPUSH
54516: CALL_OW 72
54520: ST_TO_ADDR
54521: GO 54589
54523: LD_INT 4
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54531
54529: GO 54588
54531: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
54532: LD_ADDR_VAR 0 7
54536: PUSH
54537: LD_VAR 0 1
54541: PPUSH
54542: LD_INT 2
54544: PUSH
54545: LD_INT 30
54547: PUSH
54548: LD_INT 6
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 30
54557: PUSH
54558: LD_INT 7
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 30
54567: PUSH
54568: LD_INT 8
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: PPUSH
54581: CALL_OW 72
54585: ST_TO_ADDR
54586: GO 54589
54588: POP
// if not tmp then
54589: LD_VAR 0 7
54593: NOT
54594: IFFALSE 54598
// exit ;
54596: GO 54700
// for i in tmp do
54598: LD_ADDR_VAR 0 5
54602: PUSH
54603: LD_VAR 0 7
54607: PUSH
54608: FOR_IN
54609: IFFALSE 54678
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54611: LD_VAR 0 5
54615: PPUSH
54616: CALL_OW 313
54620: PUSH
54621: LD_INT 6
54623: LESS
54624: PUSH
54625: LD_VAR 0 5
54629: PPUSH
54630: CALL_OW 266
54634: PUSH
54635: LD_INT 31
54637: PUSH
54638: LD_INT 32
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: IN
54645: NOT
54646: AND
54647: PUSH
54648: LD_VAR 0 5
54652: PPUSH
54653: CALL_OW 313
54657: PUSH
54658: LD_INT 0
54660: EQUAL
54661: OR
54662: IFFALSE 54676
// begin j := i ;
54664: LD_ADDR_VAR 0 6
54668: PUSH
54669: LD_VAR 0 5
54673: ST_TO_ADDR
// break ;
54674: GO 54678
// end ; end ;
54676: GO 54608
54678: POP
54679: POP
// if j then
54680: LD_VAR 0 6
54684: IFFALSE 54700
// ComEnterUnit ( unit , j ) ;
54686: LD_VAR 0 2
54690: PPUSH
54691: LD_VAR 0 6
54695: PPUSH
54696: CALL_OW 120
// end ;
54700: LD_VAR 0 4
54704: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54705: LD_INT 0
54707: PPUSH
54708: PPUSH
54709: PPUSH
54710: PPUSH
// if not mc_bases then
54711: LD_EXP 48
54715: NOT
54716: IFFALSE 54720
// exit ;
54718: GO 54949
// for i = 1 to mc_bases do
54720: LD_ADDR_VAR 0 2
54724: PUSH
54725: DOUBLE
54726: LD_INT 1
54728: DEC
54729: ST_TO_ADDR
54730: LD_EXP 48
54734: PUSH
54735: FOR_TO
54736: IFFALSE 54947
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54738: LD_ADDR_VAR 0 4
54742: PUSH
54743: LD_EXP 48
54747: PUSH
54748: LD_VAR 0 2
54752: ARRAY
54753: PPUSH
54754: LD_INT 21
54756: PUSH
54757: LD_INT 1
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PPUSH
54764: CALL_OW 72
54768: ST_TO_ADDR
// if not tmp then
54769: LD_VAR 0 4
54773: NOT
54774: IFFALSE 54780
// exit ;
54776: POP
54777: POP
54778: GO 54949
// for j in tmp do
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_VAR 0 4
54789: PUSH
54790: FOR_IN
54791: IFFALSE 54943
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54793: LD_VAR 0 3
54797: PPUSH
54798: CALL_OW 257
54802: PUSH
54803: LD_INT 3
54805: EQUAL
54806: PUSH
54807: LD_EXP 67
54811: PUSH
54812: LD_VAR 0 2
54816: ARRAY
54817: AND
54818: IFFALSE 54822
// continue ;
54820: GO 54790
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54822: LD_VAR 0 3
54826: PPUSH
54827: CALL_OW 110
54831: NOT
54832: PUSH
54833: LD_VAR 0 3
54837: PPUSH
54838: CALL_OW 314
54842: NOT
54843: AND
54844: PUSH
54845: LD_VAR 0 3
54849: PPUSH
54850: CALL_OW 310
54854: NOT
54855: AND
54856: PUSH
54857: LD_EXP 51
54861: PUSH
54862: LD_VAR 0 2
54866: ARRAY
54867: PUSH
54868: LD_INT 1
54870: ARRAY
54871: NOT
54872: AND
54873: PUSH
54874: LD_EXP 51
54878: PUSH
54879: LD_VAR 0 2
54883: ARRAY
54884: PUSH
54885: LD_INT 2
54887: ARRAY
54888: NOT
54889: AND
54890: PUSH
54891: LD_VAR 0 3
54895: PUSH
54896: LD_EXP 57
54900: PUSH
54901: LD_VAR 0 2
54905: ARRAY
54906: IN
54907: NOT
54908: AND
54909: IFFALSE 54941
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54911: LD_EXP 48
54915: PUSH
54916: LD_VAR 0 2
54920: ARRAY
54921: PPUSH
54922: LD_VAR 0 3
54926: PPUSH
54927: LD_VAR 0 3
54931: PPUSH
54932: CALL_OW 257
54936: PPUSH
54937: CALL 54210 0 3
// end ;
54941: GO 54790
54943: POP
54944: POP
// end ;
54945: GO 54735
54947: POP
54948: POP
// end ;
54949: LD_VAR 0 1
54953: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54954: LD_INT 0
54956: PPUSH
54957: PPUSH
54958: PPUSH
54959: PPUSH
54960: PPUSH
54961: PPUSH
// if not mc_bases [ base ] then
54962: LD_EXP 48
54966: PUSH
54967: LD_VAR 0 1
54971: ARRAY
54972: NOT
54973: IFFALSE 54977
// exit ;
54975: GO 55159
// tmp := [ ] ;
54977: LD_ADDR_VAR 0 6
54981: PUSH
54982: EMPTY
54983: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54984: LD_ADDR_VAR 0 7
54988: PUSH
54989: LD_VAR 0 3
54993: PPUSH
54994: LD_INT 0
54996: PPUSH
54997: CALL_OW 517
55001: ST_TO_ADDR
// if not list then
55002: LD_VAR 0 7
55006: NOT
55007: IFFALSE 55011
// exit ;
55009: GO 55159
// for i = 1 to amount do
55011: LD_ADDR_VAR 0 5
55015: PUSH
55016: DOUBLE
55017: LD_INT 1
55019: DEC
55020: ST_TO_ADDR
55021: LD_VAR 0 2
55025: PUSH
55026: FOR_TO
55027: IFFALSE 55107
// begin x := rand ( 1 , list [ 1 ] ) ;
55029: LD_ADDR_VAR 0 8
55033: PUSH
55034: LD_INT 1
55036: PPUSH
55037: LD_VAR 0 7
55041: PUSH
55042: LD_INT 1
55044: ARRAY
55045: PPUSH
55046: CALL_OW 12
55050: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
55051: LD_ADDR_VAR 0 6
55055: PUSH
55056: LD_VAR 0 6
55060: PPUSH
55061: LD_VAR 0 5
55065: PPUSH
55066: LD_VAR 0 7
55070: PUSH
55071: LD_INT 1
55073: ARRAY
55074: PUSH
55075: LD_VAR 0 8
55079: ARRAY
55080: PUSH
55081: LD_VAR 0 7
55085: PUSH
55086: LD_INT 2
55088: ARRAY
55089: PUSH
55090: LD_VAR 0 8
55094: ARRAY
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PPUSH
55100: CALL_OW 1
55104: ST_TO_ADDR
// end ;
55105: GO 55026
55107: POP
55108: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
55109: LD_ADDR_EXP 58
55113: PUSH
55114: LD_EXP 58
55118: PPUSH
55119: LD_VAR 0 1
55123: PPUSH
55124: LD_VAR 0 6
55128: PPUSH
55129: CALL_OW 1
55133: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
55134: LD_ADDR_EXP 60
55138: PUSH
55139: LD_EXP 60
55143: PPUSH
55144: LD_VAR 0 1
55148: PPUSH
55149: LD_VAR 0 3
55153: PPUSH
55154: CALL_OW 1
55158: ST_TO_ADDR
// end ;
55159: LD_VAR 0 4
55163: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55164: LD_INT 0
55166: PPUSH
// if not mc_bases [ base ] then
55167: LD_EXP 48
55171: PUSH
55172: LD_VAR 0 1
55176: ARRAY
55177: NOT
55178: IFFALSE 55182
// exit ;
55180: GO 55207
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
55182: LD_ADDR_EXP 65
55186: PUSH
55187: LD_EXP 65
55191: PPUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: LD_VAR 0 2
55201: PPUSH
55202: CALL_OW 1
55206: ST_TO_ADDR
// end ;
55207: LD_VAR 0 3
55211: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
55212: LD_INT 0
55214: PPUSH
// if not mc_bases [ base ] then
55215: LD_EXP 48
55219: PUSH
55220: LD_VAR 0 1
55224: ARRAY
55225: NOT
55226: IFFALSE 55230
// exit ;
55228: GO 55255
// mc_defender := Replace ( mc_defender , base , deflist ) ;
55230: LD_ADDR_EXP 66
55234: PUSH
55235: LD_EXP 66
55239: PPUSH
55240: LD_VAR 0 1
55244: PPUSH
55245: LD_VAR 0 2
55249: PPUSH
55250: CALL_OW 1
55254: ST_TO_ADDR
// end ;
55255: LD_VAR 0 3
55259: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
55260: LD_INT 0
55262: PPUSH
55263: PPUSH
55264: PPUSH
55265: PPUSH
// if not mc_bases [ base ] then
55266: LD_EXP 48
55270: PUSH
55271: LD_VAR 0 1
55275: ARRAY
55276: NOT
55277: IFFALSE 55281
// exit ;
55279: GO 55346
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
55281: LD_ADDR_EXP 64
55285: PUSH
55286: LD_EXP 64
55290: PPUSH
55291: LD_VAR 0 1
55295: PUSH
55296: LD_EXP 64
55300: PUSH
55301: LD_VAR 0 1
55305: ARRAY
55306: PUSH
55307: LD_INT 1
55309: PLUS
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PPUSH
55315: LD_VAR 0 1
55319: PUSH
55320: LD_VAR 0 2
55324: PUSH
55325: LD_VAR 0 3
55329: PUSH
55330: LD_VAR 0 4
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: PPUSH
55341: CALL 3247 0 3
55345: ST_TO_ADDR
// end ;
55346: LD_VAR 0 5
55350: RET
// export function MC_GetMinesField ( base ) ; begin
55351: LD_INT 0
55353: PPUSH
// result := mc_mines [ base ] ;
55354: LD_ADDR_VAR 0 2
55358: PUSH
55359: LD_EXP 58
55363: PUSH
55364: LD_VAR 0 1
55368: ARRAY
55369: ST_TO_ADDR
// end ;
55370: LD_VAR 0 2
55374: RET
// export function MC_GetProduceList ( base ) ; begin
55375: LD_INT 0
55377: PPUSH
// result := mc_produce [ base ] ;
55378: LD_ADDR_VAR 0 2
55382: PUSH
55383: LD_EXP 65
55387: PUSH
55388: LD_VAR 0 1
55392: ARRAY
55393: ST_TO_ADDR
// end ; end_of_file
55394: LD_VAR 0 2
55398: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
55399: LD_VAR 0 1
55403: PPUSH
55404: CALL_OW 255
55408: PUSH
55409: LD_INT 1
55411: EQUAL
55412: IFFALSE 55422
// artifact_get := true ;
55414: LD_ADDR_EXP 13
55418: PUSH
55419: LD_INT 1
55421: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
55422: LD_VAR 0 1
55426: PPUSH
55427: CALL_OW 255
55431: PUSH
55432: LD_INT 2
55434: EQUAL
55435: IFFALSE 55453
// begin artifact_get := false ;
55437: LD_ADDR_EXP 13
55441: PUSH
55442: LD_INT 0
55444: ST_TO_ADDR
// artifact_stolen := true ;
55445: LD_ADDR_EXP 12
55449: PUSH
55450: LD_INT 1
55452: ST_TO_ADDR
// end ; artifact_oncargo := true ;
55453: LD_ADDR_EXP 14
55457: PUSH
55458: LD_INT 1
55460: ST_TO_ADDR
// end ;
55461: PPOPN 2
55463: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
55464: LD_ADDR_EXP 14
55468: PUSH
55469: LD_INT 0
55471: ST_TO_ADDR
// end ;
55472: PPOPN 2
55474: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
55475: LD_INT 0
55477: PPUSH
55478: PPUSH
55479: PPUSH
55480: PPUSH
55481: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
55482: LD_VAR 0 1
55486: PUSH
55487: LD_INT 22
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 21
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 25
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 25
55522: PUSH
55523: LD_INT 2
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 25
55532: PUSH
55533: LD_INT 3
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 25
55542: PUSH
55543: LD_INT 4
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 25
55552: PUSH
55553: LD_INT 5
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 25
55562: PUSH
55563: LD_INT 8
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: LIST
55583: PPUSH
55584: CALL_OW 69
55588: IN
55589: IFFALSE 55605
// loses_counter := loses_counter + 1 ;
55591: LD_ADDR_EXP 17
55595: PUSH
55596: LD_EXP 17
55600: PUSH
55601: LD_INT 1
55603: PLUS
55604: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
55605: LD_VAR 0 1
55609: PUSH
55610: LD_INT 21
55612: PUSH
55613: LD_INT 3
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PPUSH
55620: CALL_OW 69
55624: IN
55625: IFFALSE 56141
// begin if not mc_bases then
55627: LD_EXP 48
55631: NOT
55632: IFFALSE 55636
// exit ;
55634: GO 56141
// pos := mc_build_list [ i ] + 1 ;
55636: LD_ADDR_VAR 0 5
55640: PUSH
55641: LD_EXP 53
55645: PUSH
55646: LD_VAR 0 2
55650: ARRAY
55651: PUSH
55652: LD_INT 1
55654: PLUS
55655: ST_TO_ADDR
// btype := GetBType ( un ) ;
55656: LD_ADDR_VAR 0 4
55660: PUSH
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 266
55670: ST_TO_ADDR
// if btype = b_warehouse then
55671: LD_VAR 0 4
55675: PUSH
55676: LD_INT 1
55678: EQUAL
55679: IFFALSE 55697
// begin btype := b_depot ;
55681: LD_ADDR_VAR 0 4
55685: PUSH
55686: LD_INT 0
55688: ST_TO_ADDR
// pos := 1 ;
55689: LD_ADDR_VAR 0 5
55693: PUSH
55694: LD_INT 1
55696: ST_TO_ADDR
// end ; if btype = b_factory then
55697: LD_VAR 0 4
55701: PUSH
55702: LD_INT 3
55704: EQUAL
55705: IFFALSE 55723
// begin btype := b_workshop ;
55707: LD_ADDR_VAR 0 4
55711: PUSH
55712: LD_INT 2
55714: ST_TO_ADDR
// pos := 1 ;
55715: LD_ADDR_VAR 0 5
55719: PUSH
55720: LD_INT 1
55722: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55723: LD_VAR 0 4
55727: PUSH
55728: LD_INT 7
55730: PUSH
55731: LD_INT 8
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: IN
55738: IFFALSE 55748
// btype := b_lab ;
55740: LD_ADDR_VAR 0 4
55744: PUSH
55745: LD_INT 6
55747: ST_TO_ADDR
// for i = 1 to mc_bases do
55748: LD_ADDR_VAR 0 2
55752: PUSH
55753: DOUBLE
55754: LD_INT 1
55756: DEC
55757: ST_TO_ADDR
55758: LD_EXP 48
55762: PUSH
55763: FOR_TO
55764: IFFALSE 56139
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55766: LD_VAR 0 1
55770: PUSH
55771: LD_EXP 48
55775: PUSH
55776: LD_VAR 0 2
55780: ARRAY
55781: IN
55782: PUSH
55783: LD_VAR 0 1
55787: PUSH
55788: LD_EXP 55
55792: PUSH
55793: LD_VAR 0 2
55797: ARRAY
55798: IN
55799: OR
55800: IFFALSE 56137
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55802: LD_ADDR_EXP 53
55806: PUSH
55807: LD_EXP 53
55811: PPUSH
55812: LD_VAR 0 2
55816: PUSH
55817: LD_EXP 53
55821: PUSH
55822: LD_VAR 0 2
55826: ARRAY
55827: PUSH
55828: LD_INT 1
55830: PLUS
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PPUSH
55836: LD_VAR 0 4
55840: PUSH
55841: LD_VAR 0 1
55845: PPUSH
55846: CALL_OW 250
55850: PUSH
55851: LD_VAR 0 1
55855: PPUSH
55856: CALL_OW 251
55860: PUSH
55861: LD_VAR 0 1
55865: PPUSH
55866: CALL_OW 254
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: PPUSH
55877: CALL 3247 0 3
55881: ST_TO_ADDR
// if pos = 1 then
55882: LD_VAR 0 5
55886: PUSH
55887: LD_INT 1
55889: EQUAL
55890: IFFALSE 56005
// begin tmp := mc_build_list [ i ] ;
55892: LD_ADDR_VAR 0 6
55896: PUSH
55897: LD_EXP 53
55901: PUSH
55902: LD_VAR 0 2
55906: ARRAY
55907: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55908: LD_VAR 0 6
55912: PPUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 30
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 30
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: PPUSH
55941: CALL_OW 72
55945: IFFALSE 55955
// pos := 2 ;
55947: LD_ADDR_VAR 0 5
55951: PUSH
55952: LD_INT 2
55954: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55955: LD_ADDR_VAR 0 6
55959: PUSH
55960: LD_VAR 0 6
55964: PPUSH
55965: LD_VAR 0 5
55969: PPUSH
55970: LD_VAR 0 6
55974: PPUSH
55975: CALL 3138 0 3
55979: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55980: LD_ADDR_EXP 53
55984: PUSH
55985: LD_EXP 53
55989: PPUSH
55990: LD_VAR 0 2
55994: PPUSH
55995: LD_VAR 0 6
55999: PPUSH
56000: CALL_OW 1
56004: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
56005: LD_VAR 0 1
56009: PUSH
56010: LD_EXP 48
56014: PUSH
56015: LD_VAR 0 2
56019: ARRAY
56020: IN
56021: IFFALSE 56070
// begin tmp := mc_bases [ i ] diff un ;
56023: LD_ADDR_VAR 0 6
56027: PUSH
56028: LD_EXP 48
56032: PUSH
56033: LD_VAR 0 2
56037: ARRAY
56038: PUSH
56039: LD_VAR 0 1
56043: DIFF
56044: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
56045: LD_ADDR_EXP 48
56049: PUSH
56050: LD_EXP 48
56054: PPUSH
56055: LD_VAR 0 2
56059: PPUSH
56060: LD_VAR 0 6
56064: PPUSH
56065: CALL_OW 1
56069: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
56070: LD_VAR 0 1
56074: PUSH
56075: LD_EXP 55
56079: PUSH
56080: LD_VAR 0 2
56084: ARRAY
56085: IN
56086: IFFALSE 56135
// begin tmp := mc_construct_list [ i ] diff un ;
56088: LD_ADDR_VAR 0 6
56092: PUSH
56093: LD_EXP 55
56097: PUSH
56098: LD_VAR 0 2
56102: ARRAY
56103: PUSH
56104: LD_VAR 0 1
56108: DIFF
56109: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
56110: LD_ADDR_EXP 55
56114: PUSH
56115: LD_EXP 55
56119: PPUSH
56120: LD_VAR 0 2
56124: PPUSH
56125: LD_VAR 0 6
56129: PPUSH
56130: CALL_OW 1
56134: ST_TO_ADDR
// end ; break ;
56135: GO 56139
// end ;
56137: GO 55763
56139: POP
56140: POP
// end ; end ;
56141: PPOPN 6
56143: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
56144: LD_INT 0
56146: PPUSH
56147: PPUSH
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
56152: PPUSH
// begin if not mc_bases then
56153: LD_EXP 48
56157: NOT
56158: IFFALSE 56162
// exit ;
56160: GO 56403
// btype := GetBType ( building ) ;
56162: LD_ADDR_VAR 0 6
56166: PUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 266
56176: ST_TO_ADDR
// x := GetX ( building ) ;
56177: LD_ADDR_VAR 0 7
56181: PUSH
56182: LD_VAR 0 1
56186: PPUSH
56187: CALL_OW 250
56191: ST_TO_ADDR
// y := GetY ( building ) ;
56192: LD_ADDR_VAR 0 8
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: CALL_OW 251
56206: ST_TO_ADDR
// d := GetDir ( building ) ;
56207: LD_ADDR_VAR 0 9
56211: PUSH
56212: LD_VAR 0 1
56216: PPUSH
56217: CALL_OW 254
56221: ST_TO_ADDR
// for i = 1 to mc_bases do
56222: LD_ADDR_VAR 0 3
56226: PUSH
56227: DOUBLE
56228: LD_INT 1
56230: DEC
56231: ST_TO_ADDR
56232: LD_EXP 48
56236: PUSH
56237: FOR_TO
56238: IFFALSE 56401
// begin if not mc_build_list [ i ] then
56240: LD_EXP 53
56244: PUSH
56245: LD_VAR 0 3
56249: ARRAY
56250: NOT
56251: IFFALSE 56255
// continue ;
56253: GO 56237
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
56255: LD_VAR 0 6
56259: PUSH
56260: LD_VAR 0 7
56264: PUSH
56265: LD_VAR 0 8
56269: PUSH
56270: LD_VAR 0 9
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: PPUSH
56281: LD_EXP 53
56285: PUSH
56286: LD_VAR 0 3
56290: ARRAY
56291: PUSH
56292: LD_INT 1
56294: ARRAY
56295: PPUSH
56296: CALL 8734 0 2
56300: IFFALSE 56399
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
56302: LD_ADDR_VAR 0 5
56306: PUSH
56307: LD_EXP 53
56311: PUSH
56312: LD_VAR 0 3
56316: ARRAY
56317: PPUSH
56318: LD_INT 1
56320: PPUSH
56321: CALL_OW 3
56325: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
56326: LD_ADDR_EXP 53
56330: PUSH
56331: LD_EXP 53
56335: PPUSH
56336: LD_VAR 0 3
56340: PPUSH
56341: LD_VAR 0 5
56345: PPUSH
56346: CALL_OW 1
56350: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
56351: LD_ADDR_EXP 55
56355: PUSH
56356: LD_EXP 55
56360: PPUSH
56361: LD_VAR 0 3
56365: PUSH
56366: LD_EXP 55
56370: PUSH
56371: LD_VAR 0 3
56375: ARRAY
56376: PUSH
56377: LD_INT 1
56379: PLUS
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PPUSH
56385: LD_VAR 0 1
56389: PPUSH
56390: CALL 3247 0 3
56394: ST_TO_ADDR
// exit ;
56395: POP
56396: POP
56397: GO 56403
// end ; end ;
56399: GO 56237
56401: POP
56402: POP
// end ;
56403: PPOPN 9
56405: END
// on BuildingComplete ( building ) do var i , j , tmp ;
56406: LD_INT 0
56408: PPUSH
56409: PPUSH
56410: PPUSH
// begin if not mc_bases then
56411: LD_EXP 48
56415: NOT
56416: IFFALSE 56420
// exit ;
56418: GO 56621
// for i = 1 to mc_bases do
56420: LD_ADDR_VAR 0 2
56424: PUSH
56425: DOUBLE
56426: LD_INT 1
56428: DEC
56429: ST_TO_ADDR
56430: LD_EXP 48
56434: PUSH
56435: FOR_TO
56436: IFFALSE 56619
// begin if building in mc_construct_list [ i ] then
56438: LD_VAR 0 1
56442: PUSH
56443: LD_EXP 55
56447: PUSH
56448: LD_VAR 0 2
56452: ARRAY
56453: IN
56454: IFFALSE 56617
// begin tmp := mc_construct_list [ i ] diff building ;
56456: LD_ADDR_VAR 0 4
56460: PUSH
56461: LD_EXP 55
56465: PUSH
56466: LD_VAR 0 2
56470: ARRAY
56471: PUSH
56472: LD_VAR 0 1
56476: DIFF
56477: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
56478: LD_ADDR_EXP 55
56482: PUSH
56483: LD_EXP 55
56487: PPUSH
56488: LD_VAR 0 2
56492: PPUSH
56493: LD_VAR 0 4
56497: PPUSH
56498: CALL_OW 1
56502: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
56503: LD_ADDR_EXP 48
56507: PUSH
56508: LD_EXP 48
56512: PPUSH
56513: LD_VAR 0 2
56517: PUSH
56518: LD_EXP 48
56522: PUSH
56523: LD_VAR 0 2
56527: ARRAY
56528: PUSH
56529: LD_INT 1
56531: PLUS
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PPUSH
56537: LD_VAR 0 1
56541: PPUSH
56542: CALL 3247 0 3
56546: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
56547: LD_VAR 0 1
56551: PPUSH
56552: CALL_OW 266
56556: PUSH
56557: LD_INT 32
56559: PUSH
56560: LD_INT 33
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: IN
56567: IFFALSE 56613
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
56569: LD_ADDR_EXP 56
56573: PUSH
56574: LD_EXP 56
56578: PPUSH
56579: LD_VAR 0 2
56583: PUSH
56584: LD_EXP 56
56588: PUSH
56589: LD_VAR 0 2
56593: ARRAY
56594: PUSH
56595: LD_INT 1
56597: PLUS
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PPUSH
56603: LD_VAR 0 1
56607: PPUSH
56608: CALL 3247 0 3
56612: ST_TO_ADDR
// exit ;
56613: POP
56614: POP
56615: GO 56621
// end ; end ;
56617: GO 56435
56619: POP
56620: POP
// end ;
56621: PPOPN 4
56623: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56624: LD_INT 0
56626: PPUSH
56627: PPUSH
// begin if not mc_bases then
56628: LD_EXP 48
56632: NOT
56633: IFFALSE 56637
// exit ;
56635: GO 56852
// repeat wait ( 0 0$1 ) ;
56637: LD_INT 35
56639: PPUSH
56640: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56644: LD_VAR 0 2
56648: PPUSH
56649: LD_VAR 0 3
56653: PPUSH
56654: CALL_OW 284
56658: IFFALSE 56637
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56660: LD_VAR 0 2
56664: PPUSH
56665: LD_VAR 0 3
56669: PPUSH
56670: CALL_OW 283
56674: PUSH
56675: LD_INT 4
56677: EQUAL
56678: IFFALSE 56682
// exit ;
56680: GO 56852
// for i = 1 to mc_bases do
56682: LD_ADDR_VAR 0 6
56686: PUSH
56687: DOUBLE
56688: LD_INT 1
56690: DEC
56691: ST_TO_ADDR
56692: LD_EXP 48
56696: PUSH
56697: FOR_TO
56698: IFFALSE 56850
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56700: LD_ADDR_VAR 0 7
56704: PUSH
56705: LD_EXP 48
56709: PUSH
56710: LD_VAR 0 6
56714: ARRAY
56715: PPUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 30
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 30
56731: PUSH
56732: LD_INT 1
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: LIST
56743: PPUSH
56744: CALL_OW 72
56748: ST_TO_ADDR
// if not depot then
56749: LD_VAR 0 7
56753: NOT
56754: IFFALSE 56758
// continue ;
56756: GO 56697
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56758: LD_VAR 0 7
56762: PUSH
56763: LD_INT 1
56765: ARRAY
56766: PPUSH
56767: LD_VAR 0 2
56771: PPUSH
56772: LD_VAR 0 3
56776: PPUSH
56777: CALL_OW 297
56781: PUSH
56782: LD_INT 30
56784: LESS
56785: IFFALSE 56848
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56787: LD_ADDR_EXP 61
56791: PUSH
56792: LD_EXP 61
56796: PPUSH
56797: LD_VAR 0 6
56801: PUSH
56802: LD_EXP 61
56806: PUSH
56807: LD_VAR 0 6
56811: ARRAY
56812: PUSH
56813: LD_INT 1
56815: PLUS
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PPUSH
56821: LD_VAR 0 4
56825: PUSH
56826: LD_VAR 0 2
56830: PUSH
56831: LD_VAR 0 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: PPUSH
56841: CALL 3247 0 3
56845: ST_TO_ADDR
// break ;
56846: GO 56850
// end ; end ;
56848: GO 56697
56850: POP
56851: POP
// end ;
56852: PPOPN 7
56854: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56855: LD_INT 0
56857: PPUSH
56858: PPUSH
// begin if not mc_bases then
56859: LD_EXP 48
56863: NOT
56864: IFFALSE 56868
// exit ;
56866: GO 56956
// for i = 1 to mc_bases do
56868: LD_ADDR_VAR 0 3
56872: PUSH
56873: DOUBLE
56874: LD_INT 1
56876: DEC
56877: ST_TO_ADDR
56878: LD_EXP 48
56882: PUSH
56883: FOR_TO
56884: IFFALSE 56954
// begin if factory in mc_bases [ i ] then
56886: LD_VAR 0 2
56890: PUSH
56891: LD_EXP 48
56895: PUSH
56896: LD_VAR 0 3
56900: ARRAY
56901: IN
56902: IFFALSE 56952
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56904: LD_ADDR_EXP 63
56908: PUSH
56909: LD_EXP 63
56913: PPUSH
56914: LD_VAR 0 3
56918: PUSH
56919: LD_EXP 63
56923: PUSH
56924: LD_VAR 0 3
56928: ARRAY
56929: PUSH
56930: LD_INT 1
56932: PLUS
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PPUSH
56938: LD_VAR 0 1
56942: PPUSH
56943: CALL 3247 0 3
56947: ST_TO_ADDR
// exit ;
56948: POP
56949: POP
56950: GO 56956
// end ; end ;
56952: GO 56883
56954: POP
56955: POP
// end ;
56956: PPOPN 4
56958: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL_OW 247
56968: PUSH
56969: LD_INT 2
56971: EQUAL
56972: IFFALSE 56976
// exit ;
56974: GO 56993
// if not kamikazed then
56976: LD_EXP 11
56980: NOT
56981: IFFALSE 56993
// kamikazed := unit ;
56983: LD_ADDR_EXP 11
56987: PUSH
56988: LD_VAR 0 1
56992: ST_TO_ADDR
// end ;
56993: PPOPN 1
56995: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
56996: LD_INT 0
56998: PPUSH
56999: PPUSH
// begin if side <> 2 then
57000: LD_VAR 0 3
57004: PUSH
57005: LD_INT 2
57007: NONEQUAL
57008: IFFALSE 57012
// exit ;
57010: GO 57135
// for i = 1 to mc_vehicles do
57012: LD_ADDR_VAR 0 5
57016: PUSH
57017: DOUBLE
57018: LD_INT 1
57020: DEC
57021: ST_TO_ADDR
57022: LD_EXP 63
57026: PUSH
57027: FOR_TO
57028: IFFALSE 57133
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
57030: LD_VAR 0 2
57034: PUSH
57035: LD_EXP 63
57039: PUSH
57040: LD_VAR 0 5
57044: ARRAY
57045: IN
57046: PUSH
57047: LD_VAR 0 1
57051: PUSH
57052: LD_EXP 63
57056: PUSH
57057: LD_VAR 0 5
57061: ARRAY
57062: IN
57063: OR
57064: IFFALSE 57131
// begin tmp := mc_vehicles [ i ] diff old ;
57066: LD_ADDR_VAR 0 6
57070: PUSH
57071: LD_EXP 63
57075: PUSH
57076: LD_VAR 0 5
57080: ARRAY
57081: PUSH
57082: LD_VAR 0 2
57086: DIFF
57087: ST_TO_ADDR
// tmp := tmp diff new ;
57088: LD_ADDR_VAR 0 6
57092: PUSH
57093: LD_VAR 0 6
57097: PUSH
57098: LD_VAR 0 1
57102: DIFF
57103: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
57104: LD_ADDR_EXP 63
57108: PUSH
57109: LD_EXP 63
57113: PPUSH
57114: LD_VAR 0 5
57118: PPUSH
57119: LD_VAR 0 6
57123: PPUSH
57124: CALL_OW 1
57128: ST_TO_ADDR
// break ;
57129: GO 57133
// end ;
57131: GO 57027
57133: POP
57134: POP
// end ;
57135: PPOPN 6
57137: END
// on BuildingCaptured ( building , side , capturning_unit ) do var i , tmp ;
57138: LD_INT 0
57140: PPUSH
57141: PPUSH
// begin if side <> 2 then
57142: LD_VAR 0 2
57146: PUSH
57147: LD_INT 2
57149: NONEQUAL
57150: IFFALSE 57154
// exit ;
57152: GO 57243
// for i = 1 to mc_bases do
57154: LD_ADDR_VAR 0 4
57158: PUSH
57159: DOUBLE
57160: LD_INT 1
57162: DEC
57163: ST_TO_ADDR
57164: LD_EXP 48
57168: PUSH
57169: FOR_TO
57170: IFFALSE 57241
// if building in mc_bases [ i ] then
57172: LD_VAR 0 1
57176: PUSH
57177: LD_EXP 48
57181: PUSH
57182: LD_VAR 0 4
57186: ARRAY
57187: IN
57188: IFFALSE 57239
// begin tmp := mc_bases [ i ] diff building ;
57190: LD_ADDR_VAR 0 5
57194: PUSH
57195: LD_EXP 48
57199: PUSH
57200: LD_VAR 0 4
57204: ARRAY
57205: PUSH
57206: LD_VAR 0 1
57210: DIFF
57211: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
57212: LD_ADDR_EXP 48
57216: PUSH
57217: LD_EXP 48
57221: PPUSH
57222: LD_VAR 0 4
57226: PPUSH
57227: LD_VAR 0 5
57231: PPUSH
57232: CALL_OW 1
57236: ST_TO_ADDR
// break ;
57237: GO 57241
// end ;
57239: GO 57169
57241: POP
57242: POP
// end ; end_of_file
57243: PPOPN 5
57245: END
// every 0 0$1 trigger game do
57246: LD_EXP 2
57250: IFFALSE 57280
57252: GO 57254
57254: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
57255: LD_INT 7
57257: PUSH
57258: LD_INT 6
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 6
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: PPUSH
57273: LD_INT 1750
57275: PPUSH
57276: CALL 57281 0 2
57280: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
57281: LD_INT 0
57283: PPUSH
57284: PPUSH
57285: PPUSH
// if not areas then
57286: LD_VAR 0 1
57290: NOT
57291: IFFALSE 57295
// exit ;
57293: GO 57407
// repeat wait ( time ) ;
57295: LD_VAR 0 2
57299: PPUSH
57300: CALL_OW 67
// p := rand ( 1 , 90 ) ;
57304: LD_ADDR_VAR 0 5
57308: PUSH
57309: LD_INT 1
57311: PPUSH
57312: LD_INT 90
57314: PPUSH
57315: CALL_OW 12
57319: ST_TO_ADDR
// for i in areas do
57320: LD_ADDR_VAR 0 4
57324: PUSH
57325: LD_VAR 0 1
57329: PUSH
57330: FOR_IN
57331: IFFALSE 57384
// begin if Prob ( p ) then
57333: LD_VAR 0 5
57337: PPUSH
57338: CALL_OW 13
57342: IFFALSE 57382
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
57344: LD_INT 1
57346: PPUSH
57347: LD_INT 5
57349: PPUSH
57350: CALL_OW 12
57354: PPUSH
57355: LD_VAR 0 4
57359: PPUSH
57360: LD_INT 1
57362: PPUSH
57363: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
57367: LD_INT 455
57369: PPUSH
57370: LD_INT 595
57372: PPUSH
57373: CALL_OW 12
57377: PPUSH
57378: CALL_OW 67
// end ; end ;
57382: GO 57330
57384: POP
57385: POP
// time := time + 0 0$3 ;
57386: LD_ADDR_VAR 0 2
57390: PUSH
57391: LD_VAR 0 2
57395: PUSH
57396: LD_INT 105
57398: PLUS
57399: ST_TO_ADDR
// until not game ;
57400: LD_EXP 2
57404: NOT
57405: IFFALSE 57295
// end ;
57407: LD_VAR 0 3
57411: RET
