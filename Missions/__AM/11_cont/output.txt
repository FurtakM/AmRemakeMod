// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16694 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 78832 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2200 0 0
// MC_Start ( ) ;
  78: CALL 17841 0 0
// Action ;
  82: CALL 7675 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 110 110$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 231000
 212: PUSH
 213: LD_INT 210000
 215: PUSH
 216: LD_INT 199500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 74
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 75
 312: PUSH
 313: LD_INT 28
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 6
 332: PUSH
 333: LD_INT 8
 335: PUSH
 336: LD_INT 9
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 38319 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 38319 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 38319 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 50
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 43
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 38745 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 44409 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 44409 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 44409 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 44409 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 44409 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 44409 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 44409 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 44409 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 44409 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 44409 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 44409 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 44409 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 44409 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 44409 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 44409 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1468
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: PUSH
1445: LD_INT 2
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: IN
1452: IFFALSE 1466
// SetClass ( i , class_soldier ) ;
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: CALL_OW 336
1466: GO 1429
1468: POP
1469: POP
// if tmp < 12 then
1470: LD_VAR 0 5
1474: PUSH
1475: LD_INT 12
1477: LESS
1478: IFFALSE 1572
// begin k := 16 - tmp ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_INT 16
1487: PUSH
1488: LD_VAR 0 5
1492: MINUS
1493: ST_TO_ADDR
// for i = 1 to k do
1494: LD_ADDR_VAR 0 2
1498: PUSH
1499: DOUBLE
1500: LD_INT 1
1502: DEC
1503: ST_TO_ADDR
1504: LD_VAR 0 3
1508: PUSH
1509: FOR_TO
1510: IFFALSE 1570
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1512: LD_INT 0
1514: PPUSH
1515: LD_INT 1
1517: PUSH
1518: LD_INT 1
1520: PUSH
1521: LD_INT 3
1523: PUSH
1524: LD_INT 4
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: PUSH
1533: LD_INT 1
1535: PPUSH
1536: LD_INT 4
1538: PPUSH
1539: CALL_OW 12
1543: ARRAY
1544: PPUSH
1545: LD_INT 6
1547: PPUSH
1548: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1552: LD_ADDR_VAR 0 5
1556: PUSH
1557: LD_VAR 0 5
1561: PUSH
1562: CALL_OW 44
1566: ADD
1567: ST_TO_ADDR
// end ;
1568: GO 1509
1570: POP
1571: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1572: LD_ADDR_EXP 20
1576: PUSH
1577: LD_STRING 1
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT 12
1585: PPUSH
1586: LD_INT -5
1588: PUSH
1589: LD_EXP 21
1593: PUSH
1594: LD_INT -2
1596: PUSH
1597: LD_INT -3
1599: PUSH
1600: LD_INT -5
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: LIST
1609: PUSH
1610: LD_VAR 0 5
1614: ADD
1615: PUSH
1616: LD_INT -6
1618: PUSH
1619: LD_INT -4
1621: PUSH
1622: LD_EXP 30
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: ADD
1632: PPUSH
1633: LD_INT 1
1635: PUSH
1636: LD_INT 4
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 3
1645: PUSH
1646: LD_INT 0
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: PUSH
1657: LD_INT 4
1659: PUSH
1660: LD_INT 0
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: LIST
1670: PUSH
1671: LD_INT 5
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 2
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 42
1695: ST_TO_ADDR
// others := tmp diff selected ;
1696: LD_ADDR_VAR 0 8
1700: PUSH
1701: LD_VAR 0 5
1705: PUSH
1706: LD_EXP 20
1710: DIFF
1711: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1712: LD_ADDR_VAR 0 8
1716: PUSH
1717: LD_VAR 0 5
1721: PUSH
1722: LD_EXP 22
1726: PUSH
1727: LD_EXP 23
1731: PUSH
1732: LD_EXP 24
1736: PUSH
1737: LD_EXP 25
1741: PUSH
1742: LD_EXP 26
1746: PUSH
1747: LD_EXP 27
1751: PUSH
1752: LD_EXP 28
1756: PUSH
1757: LD_EXP 29
1761: PUSH
1762: LD_EXP 31
1766: PUSH
1767: LD_EXP 32
1771: PUSH
1772: LD_EXP 33
1776: PUSH
1777: LD_EXP 34
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: DIFF
1796: ST_TO_ADDR
// no_selected := others ;
1797: LD_ADDR_EXP 19
1801: PUSH
1802: LD_VAR 0 8
1806: ST_TO_ADDR
// if no_selected then
1807: LD_EXP 19
1811: IFFALSE 1825
// SaveCharacters ( no_selected , 11_others ) ;
1813: LD_EXP 19
1817: PPUSH
1818: LD_STRING 11_others
1820: PPUSH
1821: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1825: LD_ADDR_VAR 0 6
1829: PUSH
1830: LD_INT 3
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 1
1838: PUSH
1839: LD_INT 4
1841: PUSH
1842: EMPTY
1843: LIST
1844: LIST
1845: LIST
1846: LIST
1847: PUSH
1848: LD_INT 2
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 1
1856: PUSH
1857: LD_INT 5
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: LIST
1865: PUSH
1866: LD_INT 4
1868: PUSH
1869: LD_INT 1
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 5
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 2
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: LD_INT 7
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 3
1904: PUSH
1905: LD_INT 2
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 7
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ST_TO_ADDR
// for i in JMM ^ selected do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_EXP 21
1936: PUSH
1937: LD_EXP 20
1941: ADD
1942: PUSH
1943: FOR_IN
1944: IFFALSE 2133
// begin if GetClass ( i ) = 3 then
1946: LD_VAR 0 2
1950: PPUSH
1951: CALL_OW 257
1955: PUSH
1956: LD_INT 3
1958: EQUAL
1959: IFFALSE 2116
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1961: LD_ADDR_OWVAR 37
1965: PUSH
1966: LD_VAR 0 6
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PUSH
1975: LD_INT 1
1977: ARRAY
1978: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1979: LD_ADDR_OWVAR 39
1983: PUSH
1984: LD_VAR 0 6
1988: PUSH
1989: LD_INT 1
1991: ARRAY
1992: PUSH
1993: LD_INT 2
1995: ARRAY
1996: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1997: LD_ADDR_OWVAR 38
2001: PUSH
2002: LD_VAR 0 6
2006: PUSH
2007: LD_INT 1
2009: ARRAY
2010: PUSH
2011: LD_INT 3
2013: ARRAY
2014: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2015: LD_ADDR_OWVAR 40
2019: PUSH
2020: LD_VAR 0 6
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PUSH
2029: LD_INT 4
2031: ARRAY
2032: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2033: LD_ADDR_VAR 0 6
2037: PUSH
2038: LD_VAR 0 6
2042: PPUSH
2043: LD_INT 1
2045: PPUSH
2046: CALL_OW 3
2050: ST_TO_ADDR
// veh := CreateVehicle ;
2051: LD_ADDR_VAR 0 7
2055: PUSH
2056: CALL_OW 45
2060: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2061: LD_VAR 0 7
2065: PPUSH
2066: LD_INT 8
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2076: LD_VAR 0 2
2080: PPUSH
2081: LD_VAR 0 7
2085: PPUSH
2086: CALL_OW 52
// if i = JMM then
2090: LD_VAR 0 2
2094: PUSH
2095: LD_EXP 21
2099: EQUAL
2100: IFFALSE 2114
// SetMark ( veh , 1 ) ;
2102: LD_VAR 0 7
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: CALL_OW 242
// end else
2114: GO 2131
// PlaceUnitArea ( i , am_hum_start , false ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 9
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 49
// end ;
2131: GO 1943
2133: POP
2134: POP
// vc_chassis := us_medium_tracked ;
2135: LD_ADDR_OWVAR 37
2139: PUSH
2140: LD_INT 3
2142: ST_TO_ADDR
// vc_engine := engine_solar ;
2143: LD_ADDR_OWVAR 39
2147: PUSH
2148: LD_INT 2
2150: ST_TO_ADDR
// vc_control := control_computer ;
2151: LD_ADDR_OWVAR 38
2155: PUSH
2156: LD_INT 3
2158: ST_TO_ADDR
// vc_weapon := us_radar ;
2159: LD_ADDR_OWVAR 40
2163: PUSH
2164: LD_INT 11
2166: ST_TO_ADDR
// veh := CreateVehicle ;
2167: LD_ADDR_VAR 0 7
2171: PUSH
2172: CALL_OW 45
2176: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2177: LD_VAR 0 7
2181: PPUSH
2182: LD_INT 87
2184: PPUSH
2185: LD_INT 142
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 48
// end ; end_of_file
2195: LD_VAR 0 1
2199: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
// skill := [ 6 , 7 , 7 ] [ Difficulty ] ;
2208: LD_ADDR_VAR 0 5
2212: PUSH
2213: LD_INT 6
2215: PUSH
2216: LD_INT 7
2218: PUSH
2219: LD_INT 7
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: LIST
2226: PUSH
2227: LD_OWVAR 67
2231: ARRAY
2232: ST_TO_ADDR
// uc_side := 2 ;
2233: LD_ADDR_OWVAR 20
2237: PUSH
2238: LD_INT 2
2240: ST_TO_ADDR
// uc_nation := 2 ;
2241: LD_ADDR_OWVAR 21
2245: PUSH
2246: LD_INT 2
2248: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2249: LD_ADDR_OWVAR 37
2253: PUSH
2254: LD_INT 14
2256: ST_TO_ADDR
// vc_engine := engine_siberite ;
2257: LD_ADDR_OWVAR 39
2261: PUSH
2262: LD_INT 3
2264: ST_TO_ADDR
// vc_control := control_manual ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 1
2272: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 31
2280: ST_TO_ADDR
// for i = 1 to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_INT 1
2289: DEC
2290: ST_TO_ADDR
2291: LD_INT 3
2293: PUSH
2294: FOR_TO
2295: IFFALSE 2379
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2297: LD_INT 0
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: LD_VAR 0 5
2307: PPUSH
2308: CALL_OW 380
// un := CreateVehicle ;
2312: LD_ADDR_VAR 0 4
2316: PUSH
2317: CALL_OW 45
2321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2322: LD_VAR 0 4
2326: PPUSH
2327: LD_INT 0
2329: PPUSH
2330: LD_INT 5
2332: PPUSH
2333: CALL_OW 12
2337: PPUSH
2338: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2342: LD_VAR 0 4
2346: PPUSH
2347: LD_INT 156
2349: PPUSH
2350: LD_INT 15
2352: PPUSH
2353: LD_INT 6
2355: PPUSH
2356: LD_INT 0
2358: PPUSH
2359: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2363: CALL_OW 44
2367: PPUSH
2368: LD_VAR 0 4
2372: PPUSH
2373: CALL_OW 52
// end ;
2377: GO 2294
2379: POP
2380: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2381: LD_ADDR_EXP 37
2385: PUSH
2386: LD_INT 94
2388: PPUSH
2389: LD_INT 28
2391: PPUSH
2392: LD_STRING dammam
2394: PPUSH
2395: LD_VAR 0 5
2399: PPUSH
2400: LD_INT 10000
2402: PUSH
2403: LD_INT 1000
2405: PUSH
2406: LD_INT 300
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: PPUSH
2414: LD_INT 1
2416: NEG
2417: PUSH
2418: LD_INT 5
2420: PUSH
2421: LD_INT 1
2423: NEG
2424: PUSH
2425: LD_INT 4
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PPUSH
2434: CALL 54451 0 6
2438: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , 4 , 2 , 0 ] ) ;
2439: LD_ADDR_EXP 37
2443: PUSH
2444: LD_EXP 37
2448: PUSH
2449: LD_INT 122
2451: PPUSH
2452: LD_INT 25
2454: PPUSH
2455: LD_STRING 
2457: PPUSH
2458: LD_VAR 0 5
2462: PPUSH
2463: LD_INT 500
2465: PUSH
2466: LD_INT 60
2468: PUSH
2469: LD_INT 0
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: LIST
2476: PPUSH
2477: LD_INT 1
2479: NEG
2480: PUSH
2481: LD_INT 4
2483: PUSH
2484: LD_INT 2
2486: PUSH
2487: LD_INT 0
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: LIST
2495: PPUSH
2496: CALL 54451 0 6
2500: UNION
2501: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2502: LD_ADDR_EXP 35
2506: PUSH
2507: LD_INT 45
2509: PPUSH
2510: LD_INT 24
2512: PPUSH
2513: LD_STRING jeddah
2515: PPUSH
2516: LD_VAR 0 5
2520: PPUSH
2521: LD_INT 700
2523: PUSH
2524: LD_INT 300
2526: PUSH
2527: LD_INT 10
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PPUSH
2535: LD_INT 1
2537: NEG
2538: PUSH
2539: LD_INT 5
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: LD_INT 2
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: PPUSH
2554: CALL 54451 0 6
2558: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2559: LD_ADDR_EXP 36
2563: PUSH
2564: LD_INT 7
2566: PPUSH
2567: LD_INT 27
2569: PPUSH
2570: LD_STRING riyadh
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 500
2580: PUSH
2581: LD_INT 60
2583: PUSH
2584: LD_INT 0
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PPUSH
2592: LD_INT 4
2594: PUSH
2595: LD_INT 2
2597: PUSH
2598: LD_INT 3
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: LIST
2609: PPUSH
2610: CALL 54451 0 6
2614: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2615: LD_ADDR_EXP 39
2619: PUSH
2620: LD_INT 204
2622: PPUSH
2623: LD_INT 26
2625: PPUSH
2626: LD_STRING 
2628: PPUSH
2629: LD_VAR 0 5
2633: PPUSH
2634: LD_INT 500
2636: PUSH
2637: LD_INT 50
2639: PUSH
2640: LD_INT 0
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: PPUSH
2648: LD_INT 1
2650: NEG
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: LD_INT 2
2660: PUSH
2661: EMPTY
2662: LIST
2663: LIST
2664: LIST
2665: LIST
2666: PPUSH
2667: CALL 54451 0 6
2671: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2672: LD_ADDR_EXP 50
2676: PUSH
2677: LD_EXP 37
2681: PUSH
2682: LD_EXP 35
2686: PUSH
2687: LD_EXP 39
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2697: LD_ADDR_VAR 0 2
2701: PUSH
2702: LD_INT 22
2704: PUSH
2705: LD_INT 2
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 30
2714: PUSH
2715: LD_INT 31
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 58
2724: PUSH
2725: EMPTY
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PPUSH
2733: CALL_OW 69
2737: PUSH
2738: FOR_IN
2739: IFFALSE 2864
// begin if GetBase ( i ) then
2741: LD_VAR 0 2
2745: PPUSH
2746: CALL_OW 274
2750: IFFALSE 2754
// continue ;
2752: GO 2738
// d := GetDir ( i ) ;
2754: LD_ADDR_VAR 0 3
2758: PUSH
2759: LD_VAR 0 2
2763: PPUSH
2764: CALL_OW 254
2768: ST_TO_ADDR
// if d < 3 then
2769: LD_VAR 0 3
2773: PUSH
2774: LD_INT 3
2776: LESS
2777: IFFALSE 2795
// d := d + 3 else
2779: LD_ADDR_VAR 0 3
2783: PUSH
2784: LD_VAR 0 3
2788: PUSH
2789: LD_INT 3
2791: PLUS
2792: ST_TO_ADDR
2793: GO 2809
// d := d - 3 ;
2795: LD_ADDR_VAR 0 3
2799: PUSH
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 3
2807: MINUS
2808: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2809: LD_INT 0
2811: PPUSH
2812: LD_INT 8
2814: PPUSH
2815: LD_VAR 0 5
2819: PPUSH
2820: CALL_OW 380
// un := CreateHuman ;
2824: LD_ADDR_VAR 0 4
2828: PUSH
2829: CALL_OW 44
2833: ST_TO_ADDR
// SetDir ( un , d ) ;
2834: LD_VAR 0 4
2838: PPUSH
2839: LD_VAR 0 3
2843: PPUSH
2844: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2848: LD_VAR 0 4
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 52
// end ;
2862: GO 2738
2864: POP
2865: POP
// if Difficulty > 1 then
2866: LD_OWVAR 67
2870: PUSH
2871: LD_INT 1
2873: GREATER
2874: IFFALSE 3245
// begin ar_kamikadze := [ ] ;
2876: LD_ADDR_EXP 42
2880: PUSH
2881: EMPTY
2882: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2883: LD_INT 0
2885: PPUSH
2886: LD_INT 1
2888: PPUSH
2889: LD_VAR 0 5
2893: PPUSH
2894: CALL_OW 380
// un := CreateHuman ;
2898: LD_ADDR_VAR 0 4
2902: PUSH
2903: CALL_OW 44
2907: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2908: LD_VAR 0 4
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 23
2927: PPUSH
2928: LD_INT 44
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 48
// ComCrawl ( un ) ;
2938: LD_VAR 0 4
2942: PPUSH
2943: CALL_OW 137
// un := CreateHuman ;
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: CALL_OW 44
2956: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2957: LD_VAR 0 4
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 30
2976: PPUSH
2977: LD_INT 39
2979: PPUSH
2980: LD_INT 0
2982: PPUSH
2983: CALL_OW 48
// ComCrawl ( un ) ;
2987: LD_VAR 0 4
2991: PPUSH
2992: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
2996: LD_INT 0
2998: PPUSH
2999: LD_INT 17
3001: PPUSH
3002: LD_VAR 0 5
3006: PPUSH
3007: CALL_OW 380
// un := CreateHuman ;
3011: LD_ADDR_VAR 0 4
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3021: LD_VAR 0 4
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 45
3040: PPUSH
3041: LD_INT 86
3043: PPUSH
3044: LD_INT 0
3046: PPUSH
3047: CALL_OW 48
// ComHold ( un ) ;
3051: LD_VAR 0 4
3055: PPUSH
3056: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3060: LD_ADDR_EXP 42
3064: PUSH
3065: LD_EXP 42
3069: PPUSH
3070: LD_EXP 42
3074: PUSH
3075: LD_INT 1
3077: PLUS
3078: PPUSH
3079: LD_VAR 0 4
3083: PPUSH
3084: CALL_OW 1
3088: ST_TO_ADDR
// un := CreateHuman ;
3089: LD_ADDR_VAR 0 4
3093: PUSH
3094: CALL_OW 44
3098: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3099: LD_VAR 0 4
3103: PPUSH
3104: LD_INT 3
3106: PPUSH
3107: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 60
3118: PPUSH
3119: LD_INT 85
3121: PPUSH
3122: LD_INT 0
3124: PPUSH
3125: CALL_OW 48
// ComHold ( un ) ;
3129: LD_VAR 0 4
3133: PPUSH
3134: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3138: LD_ADDR_EXP 42
3142: PUSH
3143: LD_EXP 42
3147: PPUSH
3148: LD_EXP 42
3152: PUSH
3153: LD_INT 1
3155: PLUS
3156: PPUSH
3157: LD_VAR 0 4
3161: PPUSH
3162: CALL_OW 1
3166: ST_TO_ADDR
// un := CreateHuman ;
3167: LD_ADDR_VAR 0 4
3171: PUSH
3172: CALL_OW 44
3176: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3177: LD_VAR 0 4
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 222
3196: PPUSH
3197: LD_INT 166
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: CALL_OW 48
// ComHold ( un ) ;
3207: LD_VAR 0 4
3211: PPUSH
3212: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3216: LD_ADDR_EXP 42
3220: PUSH
3221: LD_EXP 42
3225: PPUSH
3226: LD_EXP 42
3230: PUSH
3231: LD_INT 1
3233: PLUS
3234: PPUSH
3235: LD_VAR 0 4
3239: PPUSH
3240: CALL_OW 1
3244: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3245: LD_ADDR_EXP 40
3249: PUSH
3250: EMPTY
3251: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_VAR 0 5
3262: PPUSH
3263: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3267: LD_ADDR_OWVAR 26
3271: PUSH
3272: LD_STRING Pavel Grigorovic
3274: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3275: LD_ADDR_OWVAR 33
3279: PUSH
3280: LD_STRING SecondCharsGal
3282: ST_TO_ADDR
// hc_face_number := 4 ;
3283: LD_ADDR_OWVAR 34
3287: PUSH
3288: LD_INT 4
3290: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3291: LD_ADDR_EXP 40
3295: PUSH
3296: LD_EXP 40
3300: PPUSH
3301: LD_INT 1
3303: PPUSH
3304: CALL_OW 44
3308: PPUSH
3309: CALL_OW 1
3313: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3314: LD_INT 2
3316: PPUSH
3317: LD_INT 4
3319: PPUSH
3320: LD_VAR 0 5
3324: PPUSH
3325: CALL_OW 380
// hc_name := Lucy Sebel ;
3329: LD_ADDR_OWVAR 26
3333: PUSH
3334: LD_STRING Lucy Sebel
3336: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3337: LD_ADDR_OWVAR 33
3341: PUSH
3342: LD_STRING SecondCharsGal
3344: ST_TO_ADDR
// hc_face_number := 15 ;
3345: LD_ADDR_OWVAR 34
3349: PUSH
3350: LD_INT 15
3352: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3353: LD_ADDR_EXP 40
3357: PUSH
3358: LD_EXP 40
3362: PPUSH
3363: LD_INT 2
3365: PPUSH
3366: CALL_OW 44
3370: PPUSH
3371: CALL_OW 1
3375: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3376: LD_INT 2
3378: PPUSH
3379: LD_INT 4
3381: PPUSH
3382: LD_VAR 0 5
3386: PPUSH
3387: CALL_OW 380
// hc_gallery :=  ;
3391: LD_ADDR_OWVAR 33
3395: PUSH
3396: LD_STRING 
3398: ST_TO_ADDR
// hc_name :=  ;
3399: LD_ADDR_OWVAR 26
3403: PUSH
3404: LD_STRING 
3406: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3407: LD_ADDR_EXP 40
3411: PUSH
3412: LD_EXP 40
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 44
3424: PPUSH
3425: CALL_OW 1
3429: ST_TO_ADDR
// hc_sex := sex_male ;
3430: LD_ADDR_OWVAR 27
3434: PUSH
3435: LD_INT 1
3437: ST_TO_ADDR
// hc_class = 11 ;
3438: LD_ADDR_OWVAR 28
3442: PUSH
3443: LD_INT 11
3445: ST_TO_ADDR
// hc_gallery = sandar ;
3446: LD_ADDR_OWVAR 33
3450: PUSH
3451: LD_STRING sandar
3453: ST_TO_ADDR
// hc_face_number = 33 ;
3454: LD_ADDR_OWVAR 34
3458: PUSH
3459: LD_INT 33
3461: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3462: LD_ADDR_OWVAR 26
3466: PUSH
3467: LD_STRING Thabit Muhair Saliba
3469: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3470: LD_ADDR_OWVAR 31
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: LD_INT 0
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: LIST
3491: LIST
3492: ST_TO_ADDR
// Saliba = CreateHuman ;
3493: LD_ADDR_EXP 44
3497: PUSH
3498: CALL_OW 44
3502: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3503: LD_EXP 44
3507: PPUSH
3508: LD_INT 7
3510: PPUSH
3511: CALL_OW 52
// if gensher_active then
3515: LD_EXP 18
3519: IFFALSE 3546
// begin Gensher = NewCharacter ( Dietrich ) ;
3521: LD_ADDR_EXP 45
3525: PUSH
3526: LD_STRING Dietrich
3528: PPUSH
3529: CALL_OW 25
3533: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3534: LD_EXP 45
3538: PPUSH
3539: LD_INT 94
3541: PPUSH
3542: CALL_OW 52
// end ; InitHc ;
3546: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3550: LD_ADDR_EXP 41
3554: PUSH
3555: EMPTY
3556: ST_TO_ADDR
// for i = 1 to 5 do
3557: LD_ADDR_VAR 0 2
3561: PUSH
3562: DOUBLE
3563: LD_INT 1
3565: DEC
3566: ST_TO_ADDR
3567: LD_INT 5
3569: PUSH
3570: FOR_TO
3571: IFFALSE 3743
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3573: LD_INT 13
3575: PUSH
3576: LD_INT 14
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 1
3585: PPUSH
3586: LD_INT 2
3588: PPUSH
3589: CALL_OW 12
3593: ARRAY
3594: PPUSH
3595: LD_INT 1
3597: PUSH
3598: LD_INT 2
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 2
3610: PPUSH
3611: CALL_OW 12
3615: ARRAY
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: LD_INT 25
3622: PUSH
3623: LD_INT 27
3625: PUSH
3626: LD_INT 26
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: LIST
3633: PUSH
3634: LD_INT 1
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: CALL_OW 12
3644: ARRAY
3645: PPUSH
3646: LD_INT 60
3648: PPUSH
3649: LD_INT 100
3651: PPUSH
3652: CALL_OW 12
3656: PPUSH
3657: CALL 51042 0 5
// un := CreateVehicle ;
3661: LD_ADDR_VAR 0 4
3665: PUSH
3666: CALL_OW 45
3670: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3671: LD_ADDR_EXP 41
3675: PUSH
3676: LD_EXP 41
3680: PPUSH
3681: LD_EXP 41
3685: PUSH
3686: LD_INT 1
3688: PLUS
3689: PPUSH
3690: LD_VAR 0 4
3694: PPUSH
3695: CALL_OW 1
3699: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3700: LD_VAR 0 4
3704: PPUSH
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 5
3710: PPUSH
3711: CALL_OW 12
3715: PPUSH
3716: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3720: LD_VAR 0 4
3724: PPUSH
3725: LD_INT 124
3727: PPUSH
3728: LD_INT 141
3730: PPUSH
3731: LD_INT 8
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL_OW 50
// end ;
3741: GO 3570
3743: POP
3744: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3745: LD_ADDR_EXP 43
3749: PUSH
3750: EMPTY
3751: PUSH
3752: EMPTY
3753: PUSH
3754: EMPTY
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: LIST
3760: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 3
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 3
3773: PUSH
3774: LD_INT 3
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: FOR_TO
3792: IFFALSE 4006
// for i = 1 to 3 do
3794: LD_ADDR_VAR 0 2
3798: PUSH
3799: DOUBLE
3800: LD_INT 1
3802: DEC
3803: ST_TO_ADDR
3804: LD_INT 3
3806: PUSH
3807: FOR_TO
3808: IFFALSE 4002
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3810: LD_INT 14
3812: PPUSH
3813: LD_INT 3
3815: PUSH
3816: LD_INT 2
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PUSH
3823: LD_INT 1
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: CALL_OW 12
3833: ARRAY
3834: PPUSH
3835: LD_INT 1
3837: PUSH
3838: LD_INT 5
3840: PUSH
3841: EMPTY
3842: LIST
3843: LIST
3844: PUSH
3845: LD_INT 1
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 12
3855: ARRAY
3856: PPUSH
3857: LD_INT 25
3859: PUSH
3860: LD_INT 27
3862: PUSH
3863: LD_INT 26
3865: PUSH
3866: LD_INT 28
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_INT 1
3877: PPUSH
3878: LD_INT 4
3880: PPUSH
3881: CALL_OW 12
3885: ARRAY
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL 51042 0 5
// un := CreateVehicle ;
3894: LD_ADDR_VAR 0 4
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3904: LD_ADDR_EXP 43
3908: PUSH
3909: LD_EXP 43
3913: PPUSH
3914: LD_VAR 0 2
3918: PUSH
3919: LD_EXP 43
3923: PUSH
3924: LD_VAR 0 2
3928: ARRAY
3929: PUSH
3930: LD_INT 1
3932: PLUS
3933: PUSH
3934: EMPTY
3935: LIST
3936: LIST
3937: PPUSH
3938: LD_VAR 0 4
3942: PPUSH
3943: CALL 51164 0 3
3947: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3948: LD_VAR 0 4
3952: PPUSH
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 5
3958: PPUSH
3959: CALL_OW 12
3963: PPUSH
3964: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3968: LD_VAR 0 4
3972: PPUSH
3973: LD_INT 20
3975: PUSH
3976: LD_INT 21
3978: PUSH
3979: LD_INT 22
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: LIST
3986: PUSH
3987: LD_VAR 0 2
3991: ARRAY
3992: PPUSH
3993: LD_INT 0
3995: PPUSH
3996: CALL_OW 49
// end ;
4000: GO 3807
4002: POP
4003: POP
4004: GO 3791
4006: POP
4007: POP
// InitHc ;
4008: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4012: LD_INT 4
4014: PPUSH
4015: LD_INT 5
4017: PPUSH
4018: LD_INT 10
4020: PPUSH
4021: LD_INT 5
4023: PPUSH
4024: LD_INT 0
4026: PPUSH
4027: CALL_OW 58
// end ;
4031: LD_VAR 0 1
4035: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4036: LD_EXP 42
4040: IFFALSE 4114
4042: GO 4044
4044: DISABLE
4045: LD_INT 0
4047: PPUSH
// begin enable ;
4048: ENABLE
// for i in ar_kamikadze do
4049: LD_ADDR_VAR 0 1
4053: PUSH
4054: LD_EXP 42
4058: PUSH
4059: FOR_IN
4060: IFFALSE 4112
// if See ( 1 , i ) then
4062: LD_INT 1
4064: PPUSH
4065: LD_VAR 0 1
4069: PPUSH
4070: CALL_OW 292
4074: IFFALSE 4110
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4076: LD_VAR 0 1
4080: PPUSH
4081: LD_INT 81
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PPUSH
4091: CALL_OW 69
4095: PPUSH
4096: LD_VAR 0 1
4100: PPUSH
4101: CALL_OW 74
4105: PPUSH
4106: CALL_OW 115
4110: GO 4059
4112: POP
4113: POP
// end ;
4114: PPOPN 1
4116: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4117: LD_EXP 13
4121: IFFALSE 4438
4123: GO 4125
4125: DISABLE
4126: LD_INT 0
4128: PPUSH
4129: PPUSH
4130: PPUSH
4131: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4132: LD_INT 35
4134: PPUSH
4135: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4139: LD_INT 1
4141: PPUSH
4142: CALL 39091 0 1
4146: PUSH
4147: LD_INT 0
4149: EQUAL
4150: IFFALSE 4132
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 14
4157: PUSH
4158: LD_INT 3
4160: PUSH
4161: LD_INT 2
4163: PUSH
4164: LD_INT 32
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: LIST
4171: LIST
4172: PUSH
4173: EMPTY
4174: LIST
4175: PPUSH
4176: CALL 38637 0 2
// repeat wait ( 0 0$1 ) ;
4180: LD_INT 35
4182: PPUSH
4183: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4187: LD_EXP 69
4191: PUSH
4192: LD_INT 1
4194: ARRAY
4195: PPUSH
4196: LD_INT 33
4198: PUSH
4199: LD_INT 2
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 34
4208: PUSH
4209: LD_INT 32
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PPUSH
4220: CALL_OW 72
4224: IFFALSE 4180
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4226: LD_ADDR_VAR 0 2
4230: PUSH
4231: LD_EXP 69
4235: PUSH
4236: LD_INT 1
4238: ARRAY
4239: PPUSH
4240: LD_INT 33
4242: PUSH
4243: LD_INT 2
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: LD_INT 34
4252: PUSH
4253: LD_INT 32
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: PPUSH
4264: CALL_OW 72
4268: PUSH
4269: LD_INT 1
4271: ARRAY
4272: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4273: LD_ADDR_VAR 0 4
4277: PUSH
4278: LD_INT 5
4280: PPUSH
4281: CALL_OW 469
4285: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4286: LD_INT 35
4288: PPUSH
4289: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4293: LD_ADDR_VAR 0 4
4297: PUSH
4298: LD_INT 5
4300: PPUSH
4301: CALL_OW 469
4305: ST_TO_ADDR
// tmp := 100 ;
4306: LD_ADDR_VAR 0 3
4310: PUSH
4311: LD_INT 100
4313: ST_TO_ADDR
// if pos then
4314: LD_VAR 0 4
4318: IFFALSE 4358
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4320: LD_ADDR_VAR 0 3
4324: PUSH
4325: LD_INT 2
4327: PPUSH
4328: LD_VAR 0 4
4332: PUSH
4333: LD_INT 1
4335: ARRAY
4336: PPUSH
4337: LD_VAR 0 4
4341: PUSH
4342: LD_INT 2
4344: ARRAY
4345: PPUSH
4346: LD_INT 20
4348: PPUSH
4349: CALL 52060 0 4
4353: PUSH
4354: LD_INT 4
4356: ARRAY
4357: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4358: LD_VAR 0 4
4362: PUSH
4363: LD_EXP 14
4367: NOT
4368: AND
4369: PUSH
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 10
4377: LESS
4378: AND
4379: IFFALSE 4286
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4381: LD_VAR 0 2
4385: PPUSH
4386: LD_VAR 0 4
4390: PUSH
4391: LD_INT 1
4393: ARRAY
4394: PPUSH
4395: LD_VAR 0 4
4399: PUSH
4400: LD_INT 2
4402: ARRAY
4403: PPUSH
4404: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4408: LD_VAR 0 2
4412: PPUSH
4413: LD_INT 198
4415: PPUSH
4416: LD_INT 113
4418: PPUSH
4419: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4423: LD_VAR 0 2
4427: PPUSH
4428: LD_INT 124
4430: PPUSH
4431: LD_INT 7
4433: PPUSH
4434: CALL_OW 171
// end ;
4438: PPOPN 4
4440: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4441: LD_EXP 6
4445: IFFALSE 7102
4447: GO 4449
4449: DISABLE
4450: LD_INT 0
4452: PPUSH
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
4457: PPUSH
4458: PPUSH
4459: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: LD_INT 6
4470: PUSH
4471: LD_INT 7
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: LIST
4478: PUSH
4479: LD_OWVAR 67
4483: ARRAY
4484: ST_TO_ADDR
// coords := [ ] ;
4485: LD_ADDR_VAR 0 5
4489: PUSH
4490: EMPTY
4491: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4492: LD_ADDR_VAR 0 6
4496: PUSH
4497: LD_INT 0
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: LD_INT 1
4523: PUSH
4524: LD_INT 0
4526: PUSH
4527: EMPTY
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 14
4544: PUSH
4545: LD_INT 1
4547: PUSH
4548: LD_INT 2
4550: PUSH
4551: LD_INT 28
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 14
4562: PUSH
4563: LD_INT 1
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: LD_INT 25
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 14
4580: PUSH
4581: LD_INT 1
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 28
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: PUSH
4596: LD_INT 14
4598: PUSH
4599: LD_INT 1
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: LD_INT 29
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: EMPTY
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL 38637 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4624: LD_INT 21000
4626: PUSH
4627: LD_INT 19950
4629: PUSH
4630: LD_INT 18900
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: LD_OWVAR 67
4642: ARRAY
4643: PPUSH
4644: CALL_OW 67
// InitHc ;
4648: CALL_OW 19
// InitUc ;
4652: CALL_OW 18
// uc_side := 2 ;
4656: LD_ADDR_OWVAR 20
4660: PUSH
4661: LD_INT 2
4663: ST_TO_ADDR
// uc_nation := 2 ;
4664: LD_ADDR_OWVAR 21
4668: PUSH
4669: LD_INT 2
4671: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4672: LD_ADDR_VAR 0 3
4676: PUSH
4677: EMPTY
4678: PUSH
4679: EMPTY
4680: PUSH
4681: EMPTY
4682: PUSH
4683: EMPTY
4684: PUSH
4685: EMPTY
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_VAR 0 3
4703: PPUSH
4704: LD_INT 1
4706: PPUSH
4707: LD_EXP 69
4711: PUSH
4712: LD_INT 1
4714: ARRAY
4715: PUSH
4716: LD_INT 34
4718: PUSH
4719: LD_INT 32
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: PPUSH
4726: CALL_OW 69
4730: DIFF
4731: PPUSH
4732: CALL_OW 1
4736: ST_TO_ADDR
// for i = 1 to Difficulty do
4737: LD_ADDR_VAR 0 1
4741: PUSH
4742: DOUBLE
4743: LD_INT 1
4745: DEC
4746: ST_TO_ADDR
4747: LD_OWVAR 67
4751: PUSH
4752: FOR_TO
4753: IFFALSE 4891
// begin uc_side := 2 ;
4755: LD_ADDR_OWVAR 20
4759: PUSH
4760: LD_INT 2
4762: ST_TO_ADDR
// uc_nation := 2 ;
4763: LD_ADDR_OWVAR 21
4767: PUSH
4768: LD_INT 2
4770: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4771: LD_INT 13
4773: PPUSH
4774: LD_INT 3
4776: PPUSH
4777: LD_INT 5
4779: PPUSH
4780: LD_INT 29
4782: PPUSH
4783: LD_INT 100
4785: PPUSH
4786: CALL 51042 0 5
// un := CreateVehicle ;
4790: LD_ADDR_VAR 0 2
4794: PUSH
4795: CALL_OW 45
4799: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: LD_VAR 0 3
4809: PPUSH
4810: LD_INT 1
4812: PUSH
4813: LD_VAR 0 3
4817: PUSH
4818: LD_INT 1
4820: ARRAY
4821: PUSH
4822: LD_INT 1
4824: PLUS
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PPUSH
4830: LD_VAR 0 2
4834: PPUSH
4835: CALL 51164 0 3
4839: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4840: LD_VAR 0 2
4844: PPUSH
4845: LD_INT 3
4847: PPUSH
4848: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4852: LD_VAR 0 2
4856: PPUSH
4857: LD_INT 16
4859: PPUSH
4860: LD_INT 0
4862: PPUSH
4863: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4867: LD_VAR 0 2
4871: PPUSH
4872: LD_INT 51
4874: PPUSH
4875: LD_INT 10
4877: PPUSH
4878: CALL_OW 111
// wait ( 0 0$2 ) ;
4882: LD_INT 70
4884: PPUSH
4885: CALL_OW 67
// end ;
4889: GO 4752
4891: POP
4892: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4893: LD_ADDR_VAR 0 5
4897: PUSH
4898: LD_INT 51
4900: PUSH
4901: LD_INT 24
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 75
4910: PUSH
4911: LD_INT 90
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4922: LD_INT 1
4924: PPUSH
4925: LD_VAR 0 3
4929: PUSH
4930: LD_INT 1
4932: ARRAY
4933: PPUSH
4934: LD_VAR 0 5
4938: PPUSH
4939: LD_VAR 0 6
4943: PPUSH
4944: CALL 38928 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4948: LD_ADDR_VAR 0 1
4952: PUSH
4953: DOUBLE
4954: LD_INT 1
4956: DEC
4957: ST_TO_ADDR
4958: LD_INT 2
4960: PUSH
4961: LD_INT 3
4963: PUSH
4964: LD_INT 3
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_OWVAR 67
4976: ARRAY
4977: PUSH
4978: FOR_TO
4979: IFFALSE 5079
// begin uc_side := 2 ;
4981: LD_ADDR_OWVAR 20
4985: PUSH
4986: LD_INT 2
4988: ST_TO_ADDR
// uc_nation := 2 ;
4989: LD_ADDR_OWVAR 21
4993: PUSH
4994: LD_INT 2
4996: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
4997: LD_INT 0
4999: PPUSH
5000: LD_INT 17
5002: PPUSH
5003: LD_VAR 0 4
5007: PPUSH
5008: CALL_OW 380
// un := CreateHuman ;
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: CALL_OW 44
5021: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 2
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: PLUS
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL 51164 0 3
5061: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_INT 13
5069: PPUSH
5070: LD_INT 0
5072: PPUSH
5073: CALL_OW 49
// end ;
5077: GO 4978
5079: POP
5080: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5081: LD_ADDR_VAR 0 1
5085: PUSH
5086: DOUBLE
5087: LD_INT 1
5089: DEC
5090: ST_TO_ADDR
5091: LD_INT 2
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: LD_INT 3
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: LIST
5104: PUSH
5105: LD_OWVAR 67
5109: ARRAY
5110: PUSH
5111: FOR_TO
5112: IFFALSE 5231
// begin uc_side := 2 ;
5114: LD_ADDR_OWVAR 20
5118: PUSH
5119: LD_INT 2
5121: ST_TO_ADDR
// uc_nation := 2 ;
5122: LD_ADDR_OWVAR 21
5126: PUSH
5127: LD_INT 2
5129: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5130: LD_INT 0
5132: PPUSH
5133: LD_INT 1
5135: PUSH
5136: LD_INT 8
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 1
5145: PPUSH
5146: LD_INT 2
5148: PPUSH
5149: CALL_OW 12
5153: ARRAY
5154: PPUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: CALL_OW 380
// un := CreateHuman ;
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: CALL_OW 44
5173: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5174: LD_ADDR_VAR 0 3
5178: PUSH
5179: LD_VAR 0 3
5183: PPUSH
5184: LD_INT 2
5186: PUSH
5187: LD_VAR 0 3
5191: PUSH
5192: LD_INT 2
5194: ARRAY
5195: PUSH
5196: LD_INT 1
5198: PLUS
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: LD_VAR 0 2
5208: PPUSH
5209: CALL 51164 0 3
5213: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5214: LD_VAR 0 2
5218: PPUSH
5219: LD_INT 13
5221: PPUSH
5222: LD_INT 0
5224: PPUSH
5225: CALL_OW 49
// end ;
5229: GO 5111
5231: POP
5232: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5233: LD_ADDR_VAR 0 5
5237: PUSH
5238: LD_INT 67
5240: PUSH
5241: LD_INT 112
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 85
5250: PUSH
5251: LD_INT 130
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5262: LD_INT 2
5264: PPUSH
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 2
5272: ARRAY
5273: PPUSH
5274: LD_VAR 0 5
5278: PPUSH
5279: LD_VAR 0 6
5283: PPUSH
5284: CALL 38928 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5288: LD_ADDR_VAR 0 1
5292: PUSH
5293: DOUBLE
5294: LD_INT 1
5296: DEC
5297: ST_TO_ADDR
5298: LD_INT 1
5300: PUSH
5301: LD_INT 2
5303: PUSH
5304: LD_INT 3
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: PUSH
5312: LD_OWVAR 67
5316: ARRAY
5317: PUSH
5318: FOR_TO
5319: IFFALSE 5419
// begin uc_side := 2 ;
5321: LD_ADDR_OWVAR 20
5325: PUSH
5326: LD_INT 2
5328: ST_TO_ADDR
// uc_nation := 2 ;
5329: LD_ADDR_OWVAR 21
5333: PUSH
5334: LD_INT 2
5336: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5337: LD_INT 0
5339: PPUSH
5340: LD_INT 17
5342: PPUSH
5343: LD_VAR 0 4
5347: PPUSH
5348: CALL_OW 380
// un := CreateHuman ;
5352: LD_ADDR_VAR 0 2
5356: PUSH
5357: CALL_OW 44
5361: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5362: LD_ADDR_VAR 0 3
5366: PUSH
5367: LD_VAR 0 3
5371: PPUSH
5372: LD_INT 3
5374: PUSH
5375: LD_VAR 0 3
5379: PUSH
5380: LD_INT 3
5382: ARRAY
5383: PUSH
5384: LD_INT 1
5386: PLUS
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PPUSH
5392: LD_VAR 0 2
5396: PPUSH
5397: CALL 51164 0 3
5401: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_INT 14
5409: PPUSH
5410: LD_INT 0
5412: PPUSH
5413: CALL_OW 49
// end ;
5417: GO 5318
5419: POP
5420: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5421: LD_ADDR_VAR 0 5
5425: PUSH
5426: LD_INT 148
5428: PUSH
5429: LD_INT 158
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 148
5438: PUSH
5439: LD_INT 158
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PUSH
5446: EMPTY
5447: LIST
5448: LIST
5449: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5450: LD_INT 3
5452: PPUSH
5453: LD_VAR 0 3
5457: PUSH
5458: LD_INT 3
5460: ARRAY
5461: PPUSH
5462: LD_VAR 0 5
5466: PPUSH
5467: LD_VAR 0 6
5471: PPUSH
5472: CALL 38928 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5476: LD_ADDR_VAR 0 1
5480: PUSH
5481: DOUBLE
5482: LD_INT 1
5484: DEC
5485: ST_TO_ADDR
5486: LD_INT 3
5488: PUSH
5489: LD_INT 4
5491: PUSH
5492: LD_INT 4
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: PUSH
5500: LD_OWVAR 67
5504: ARRAY
5505: PUSH
5506: FOR_TO
5507: IFFALSE 5731
// begin uc_side := 2 ;
5509: LD_ADDR_OWVAR 20
5513: PUSH
5514: LD_INT 2
5516: ST_TO_ADDR
// uc_nation := 2 ;
5517: LD_ADDR_OWVAR 21
5521: PUSH
5522: LD_INT 2
5524: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5525: LD_INT 14
5527: PPUSH
5528: LD_INT 3
5530: PPUSH
5531: LD_INT 1
5533: PUSH
5534: LD_INT 5
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PUSH
5541: LD_INT 1
5543: PPUSH
5544: LD_INT 2
5546: PPUSH
5547: CALL_OW 12
5551: ARRAY
5552: PPUSH
5553: LD_INT 27
5555: PUSH
5556: LD_INT 26
5558: PUSH
5559: LD_INT 28
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 1
5569: PPUSH
5570: LD_INT 3
5572: PPUSH
5573: CALL_OW 12
5577: ARRAY
5578: PPUSH
5579: LD_INT 100
5581: PPUSH
5582: CALL 51042 0 5
// un := CreateVehicle ;
5586: LD_ADDR_VAR 0 2
5590: PUSH
5591: CALL_OW 45
5595: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5596: LD_ADDR_VAR 0 3
5600: PUSH
5601: LD_VAR 0 3
5605: PPUSH
5606: LD_INT 4
5608: PUSH
5609: LD_VAR 0 3
5613: PUSH
5614: LD_INT 4
5616: ARRAY
5617: PUSH
5618: LD_INT 1
5620: PLUS
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL 51164 0 3
5635: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5636: LD_VAR 0 2
5640: PPUSH
5641: LD_INT 5
5643: PPUSH
5644: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5648: LD_VAR 0 2
5652: PPUSH
5653: LD_INT 15
5655: PPUSH
5656: LD_INT 0
5658: PPUSH
5659: CALL_OW 49
// if GetControl ( un ) = control_manual then
5663: LD_VAR 0 2
5667: PPUSH
5668: CALL_OW 263
5672: PUSH
5673: LD_INT 1
5675: EQUAL
5676: IFFALSE 5707
// begin PrepareHuman ( false , 3 , skill ) ;
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 3
5683: PPUSH
5684: LD_VAR 0 4
5688: PPUSH
5689: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5693: CALL_OW 44
5697: PPUSH
5698: LD_VAR 0 2
5702: PPUSH
5703: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5707: LD_VAR 0 2
5711: PPUSH
5712: LD_INT 179
5714: PPUSH
5715: LD_INT 135
5717: PPUSH
5718: CALL_OW 111
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// end ;
5729: GO 5506
5731: POP
5732: POP
// vc_chassis := 15 ;
5733: LD_ADDR_OWVAR 37
5737: PUSH
5738: LD_INT 15
5740: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5741: LD_ADDR_VAR 0 3
5745: PUSH
5746: LD_VAR 0 3
5750: PPUSH
5751: LD_INT 4
5753: PUSH
5754: LD_VAR 0 3
5758: PUSH
5759: LD_INT 4
5761: ARRAY
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: PPUSH
5771: CALL_OW 45
5775: PPUSH
5776: CALL 51164 0 3
5780: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5781: LD_VAR 0 3
5785: PUSH
5786: LD_INT 4
5788: ARRAY
5789: PUSH
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 4
5797: ARRAY
5798: ARRAY
5799: PPUSH
5800: LD_INT 15
5802: PPUSH
5803: LD_INT 0
5805: PPUSH
5806: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5810: LD_INT 0
5812: PPUSH
5813: LD_INT 11
5815: PPUSH
5816: LD_VAR 0 4
5820: PPUSH
5821: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5825: LD_ADDR_VAR 0 3
5829: PUSH
5830: LD_VAR 0 3
5834: PPUSH
5835: LD_INT 4
5837: PUSH
5838: LD_VAR 0 3
5842: PUSH
5843: LD_INT 4
5845: ARRAY
5846: PUSH
5847: LD_INT 1
5849: PLUS
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PPUSH
5855: CALL_OW 44
5859: PPUSH
5860: CALL 51164 0 3
5864: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5865: LD_VAR 0 3
5869: PUSH
5870: LD_INT 4
5872: ARRAY
5873: PUSH
5874: LD_VAR 0 3
5878: PUSH
5879: LD_INT 4
5881: ARRAY
5882: ARRAY
5883: PPUSH
5884: LD_VAR 0 3
5888: PUSH
5889: LD_INT 4
5891: ARRAY
5892: PUSH
5893: LD_VAR 0 3
5897: PUSH
5898: LD_INT 4
5900: ARRAY
5901: PUSH
5902: LD_INT 1
5904: MINUS
5905: ARRAY
5906: PPUSH
5907: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5911: LD_ADDR_VAR 0 5
5915: PUSH
5916: LD_INT 148
5918: PUSH
5919: LD_INT 140
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5929: LD_INT 1
5931: PPUSH
5932: LD_VAR 0 3
5936: PUSH
5937: LD_INT 4
5939: ARRAY
5940: PPUSH
5941: LD_VAR 0 5
5945: PPUSH
5946: LD_VAR 0 6
5950: PPUSH
5951: CALL 38928 0 4
// if gensher_active then
5955: LD_EXP 18
5959: IFFALSE 6344
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5961: LD_EXP 45
5965: PPUSH
5966: LD_STRING D10-Diet-1
5968: PPUSH
5969: CALL_OW 94
// for i = 1 to 2 do
5973: LD_ADDR_VAR 0 1
5977: PUSH
5978: DOUBLE
5979: LD_INT 1
5981: DEC
5982: ST_TO_ADDR
5983: LD_INT 2
5985: PUSH
5986: FOR_TO
5987: IFFALSE 6125
// begin uc_side := 2 ;
5989: LD_ADDR_OWVAR 20
5993: PUSH
5994: LD_INT 2
5996: ST_TO_ADDR
// uc_nation := 2 ;
5997: LD_ADDR_OWVAR 21
6001: PUSH
6002: LD_INT 2
6004: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6005: LD_INT 13
6007: PPUSH
6008: LD_INT 3
6010: PPUSH
6011: LD_INT 5
6013: PPUSH
6014: LD_INT 29
6016: PPUSH
6017: LD_INT 100
6019: PPUSH
6020: CALL 51042 0 5
// un := CreateVehicle ;
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: CALL_OW 45
6033: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6034: LD_ADDR_VAR 0 3
6038: PUSH
6039: LD_VAR 0 3
6043: PPUSH
6044: LD_INT 5
6046: PUSH
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 5
6054: ARRAY
6055: PUSH
6056: LD_INT 1
6058: PLUS
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PPUSH
6064: LD_VAR 0 2
6068: PPUSH
6069: CALL 51164 0 3
6073: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 23
6093: PPUSH
6094: LD_INT 0
6096: PPUSH
6097: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 85
6108: PPUSH
6109: LD_INT 152
6111: PPUSH
6112: CALL_OW 111
// wait ( 0 0$2 ) ;
6116: LD_INT 70
6118: PPUSH
6119: CALL_OW 67
// end ;
6123: GO 5986
6125: POP
6126: POP
// for i = 1 to 3 do
6127: LD_ADDR_VAR 0 1
6131: PUSH
6132: DOUBLE
6133: LD_INT 1
6135: DEC
6136: ST_TO_ADDR
6137: LD_INT 3
6139: PUSH
6140: FOR_TO
6141: IFFALSE 6298
// begin uc_side := 2 ;
6143: LD_ADDR_OWVAR 20
6147: PUSH
6148: LD_INT 2
6150: ST_TO_ADDR
// uc_nation := 2 ;
6151: LD_ADDR_OWVAR 21
6155: PUSH
6156: LD_INT 2
6158: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6159: LD_INT 14
6161: PPUSH
6162: LD_INT 3
6164: PPUSH
6165: LD_INT 5
6167: PPUSH
6168: LD_INT 27
6170: PUSH
6171: LD_INT 28
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 1
6180: PPUSH
6181: LD_INT 2
6183: PPUSH
6184: CALL_OW 12
6188: ARRAY
6189: PPUSH
6190: LD_INT 100
6192: PPUSH
6193: CALL 51042 0 5
// un := CreateVehicle ;
6197: LD_ADDR_VAR 0 2
6201: PUSH
6202: CALL_OW 45
6206: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6207: LD_ADDR_VAR 0 3
6211: PUSH
6212: LD_VAR 0 3
6216: PPUSH
6217: LD_INT 5
6219: PUSH
6220: LD_VAR 0 3
6224: PUSH
6225: LD_INT 5
6227: ARRAY
6228: PUSH
6229: LD_INT 1
6231: PLUS
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PPUSH
6237: LD_VAR 0 2
6241: PPUSH
6242: CALL 51164 0 3
6246: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6247: LD_VAR 0 2
6251: PPUSH
6252: LD_INT 0
6254: PPUSH
6255: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6259: LD_VAR 0 2
6263: PPUSH
6264: LD_INT 23
6266: PPUSH
6267: LD_INT 0
6269: PPUSH
6270: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 85
6281: PPUSH
6282: LD_INT 152
6284: PPUSH
6285: CALL_OW 111
// wait ( 0 0$2 ) ;
6289: LD_INT 70
6291: PPUSH
6292: CALL_OW 67
// end ;
6296: GO 6140
6298: POP
6299: POP
// coords := [ [ 97 , 143 ] ] ;
6300: LD_ADDR_VAR 0 5
6304: PUSH
6305: LD_INT 97
6307: PUSH
6308: LD_INT 143
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6318: LD_INT 1
6320: PPUSH
6321: LD_VAR 0 3
6325: PUSH
6326: LD_INT 5
6328: ARRAY
6329: PPUSH
6330: LD_VAR 0 5
6334: PPUSH
6335: LD_VAR 0 6
6339: PPUSH
6340: CALL 38928 0 4
// end ; Wait ( 13 13$00 ) ;
6344: LD_INT 27300
6346: PPUSH
6347: CALL_OW 67
// tmp := [ ] ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: EMPTY
6357: ST_TO_ADDR
// w := 1 ;
6358: LD_ADDR_VAR 0 7
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// repeat tmp := [ ] ;
6366: LD_ADDR_VAR 0 3
6370: PUSH
6371: EMPTY
6372: ST_TO_ADDR
// if w mod 4 = 0 then
6373: LD_VAR 0 7
6377: PUSH
6378: LD_INT 4
6380: MOD
6381: PUSH
6382: LD_INT 0
6384: EQUAL
6385: IFFALSE 6472
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6387: LD_ADDR_VAR 0 8
6391: PUSH
6392: LD_INT 11
6394: PUSH
6395: LD_INT 1
6397: PUSH
6398: LD_INT 2
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 11
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: LD_INT 2
6418: PUSH
6419: LD_INT 24
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 11
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 2
6436: PUSH
6437: LD_INT 24
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 11
6448: PUSH
6449: LD_INT 1
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 24
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: ST_TO_ADDR
6470: GO 6574
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6472: LD_ADDR_VAR 0 8
6476: PUSH
6477: LD_INT 14
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: LD_INT 2
6485: PUSH
6486: LD_INT 28
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 14
6497: PUSH
6498: LD_INT 1
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: LD_INT 25
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 14
6515: PUSH
6516: LD_INT 1
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: LD_INT 28
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: PUSH
6531: LD_INT 14
6533: PUSH
6534: LD_INT 1
6536: PUSH
6537: LD_INT 2
6539: PUSH
6540: LD_INT 29
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: PUSH
6549: LD_INT 11
6551: PUSH
6552: LD_INT 1
6554: PUSH
6555: LD_INT 2
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: ST_TO_ADDR
// if w mod 3 = 0 then
6574: LD_VAR 0 7
6578: PUSH
6579: LD_INT 3
6581: MOD
6582: PUSH
6583: LD_INT 0
6585: EQUAL
6586: IFFALSE 6662
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6588: LD_ADDR_VAR 0 8
6592: PUSH
6593: LD_VAR 0 8
6597: PPUSH
6598: LD_INT 1
6600: PUSH
6601: LD_VAR 0 8
6605: PUSH
6606: LD_VAR 0 1
6610: ARRAY
6611: PUSH
6612: LD_INT 1
6614: PLUS
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PPUSH
6620: LD_INT 14
6622: PUSH
6623: LD_INT 1
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: LD_INT 25
6631: PUSH
6632: LD_INT 28
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 1
6641: PPUSH
6642: LD_INT 2
6644: PPUSH
6645: CALL_OW 12
6649: ARRAY
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL 51164 0 3
6661: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6662: LD_INT 1
6664: PPUSH
6665: LD_VAR 0 8
6669: PPUSH
6670: CALL 38637 0 2
// if GetSide ( ar_dep_w ) = 2 then
6674: LD_INT 45
6676: PPUSH
6677: CALL_OW 255
6681: PUSH
6682: LD_INT 2
6684: EQUAL
6685: IFFALSE 6770
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6687: LD_ADDR_VAR 0 8
6691: PUSH
6692: LD_INT 14
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: LD_INT 2
6700: PUSH
6701: LD_INT 28
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 14
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: LD_INT 2
6718: PUSH
6719: LD_INT 27
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 14
6730: PUSH
6731: LD_INT 1
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 27
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6751: LD_INT 2
6753: PPUSH
6754: LD_VAR 0 8
6758: PPUSH
6759: CALL 38637 0 2
// wait ( 0 0$50 ) ;
6763: LD_INT 1750
6765: PPUSH
6766: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6770: LD_INT 35
6772: PPUSH
6773: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6777: LD_EXP 69
6781: PUSH
6782: LD_INT 1
6784: ARRAY
6785: PPUSH
6786: LD_INT 3
6788: PUSH
6789: LD_INT 34
6791: PUSH
6792: LD_INT 32
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_INT 4
6810: GREATEREQUAL
6811: IFFALSE 6770
// wait ( 0 0$10 ) ;
6813: LD_INT 350
6815: PPUSH
6816: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6820: LD_ADDR_VAR 0 3
6824: PUSH
6825: LD_EXP 69
6829: PUSH
6830: LD_INT 1
6832: ARRAY
6833: PPUSH
6834: LD_INT 3
6836: PUSH
6837: LD_INT 34
6839: PUSH
6840: LD_INT 32
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: PPUSH
6851: CALL_OW 72
6855: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6856: LD_INT 100
6858: PPUSH
6859: CALL_OW 13
6863: PUSH
6864: LD_INT 50
6866: LESS
6867: IFFALSE 6900
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6869: LD_ADDR_VAR 0 5
6873: PUSH
6874: LD_INT 55
6876: PUSH
6877: LD_INT 7
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 75
6886: PUSH
6887: LD_INT 90
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: ST_TO_ADDR
6898: GO 6929
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6900: LD_ADDR_VAR 0 5
6904: PUSH
6905: LD_INT 128
6907: PUSH
6908: LD_INT 94
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 180
6917: PUSH
6918: LD_INT 135
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: ST_TO_ADDR
// if w mod 4 = 0 then
6929: LD_VAR 0 7
6933: PUSH
6934: LD_INT 4
6936: MOD
6937: PUSH
6938: LD_INT 0
6940: EQUAL
6941: IFFALSE 6972
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6943: LD_ADDR_VAR 0 5
6947: PUSH
6948: LD_INT 91
6950: PUSH
6951: LD_INT 58
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 117
6960: PUSH
6961: LD_INT 107
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6972: LD_INT 1
6974: PPUSH
6975: LD_VAR 0 3
6979: PPUSH
6980: LD_VAR 0 5
6984: PPUSH
6985: LD_VAR 0 6
6989: PPUSH
6990: CALL 38928 0 4
// if mc_vehicles [ 2 ] then
6994: LD_EXP 69
6998: PUSH
6999: LD_INT 2
7001: ARRAY
7002: IFFALSE 7038
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
7004: LD_INT 2
7006: PPUSH
7007: LD_EXP 69
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: PPUSH
7016: LD_INT 73
7018: PUSH
7019: LD_INT 115
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: PPUSH
7029: LD_VAR 0 6
7033: PPUSH
7034: CALL 38928 0 4
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7038: LD_INT 22050
7040: PPUSH
7041: LD_INT 28350
7043: PPUSH
7044: CALL_OW 12
7048: PPUSH
7049: CALL_OW 67
// w := w + 1 ;
7053: LD_ADDR_VAR 0 7
7057: PUSH
7058: LD_VAR 0 7
7062: PUSH
7063: LD_INT 1
7065: PLUS
7066: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7067: LD_INT 94
7069: PPUSH
7070: CALL_OW 301
7074: PUSH
7075: LD_EXP 50
7079: PUSH
7080: LD_INT 1
7082: ARRAY
7083: PPUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 3
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PPUSH
7094: CALL_OW 72
7098: NOT
7099: OR
7100: IFFALSE 6366
// end ;
7102: PPOPN 8
7104: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7105: LD_INT 204
7107: IFFALSE 7581
7109: GO 7111
7111: DISABLE
7112: LD_INT 0
7114: PPUSH
7115: PPUSH
7116: PPUSH
7117: PPUSH
// begin enable ;
7118: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7119: LD_INT 35
7121: PPUSH
7122: LD_INT 1190
7124: PPUSH
7125: CALL_OW 12
7129: PPUSH
7130: CALL_OW 67
// tmp := [ ] ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: EMPTY
7140: ST_TO_ADDR
// uc_side := 8 ;
7141: LD_ADDR_OWVAR 20
7145: PUSH
7146: LD_INT 8
7148: ST_TO_ADDR
// uc_nation := 2 ;
7149: LD_ADDR_OWVAR 21
7153: PUSH
7154: LD_INT 2
7156: ST_TO_ADDR
// InitHc ;
7157: CALL_OW 19
// for i = 1 to 3 do
7161: LD_ADDR_VAR 0 1
7165: PUSH
7166: DOUBLE
7167: LD_INT 1
7169: DEC
7170: ST_TO_ADDR
7171: LD_INT 3
7173: PUSH
7174: FOR_TO
7175: IFFALSE 7302
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7177: LD_INT 13
7179: PUSH
7180: LD_INT 14
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_INT 2
7192: PPUSH
7193: CALL_OW 12
7197: ARRAY
7198: PPUSH
7199: LD_INT 3
7201: PPUSH
7202: LD_INT 5
7204: PPUSH
7205: LD_INT 27
7207: PUSH
7208: LD_INT 28
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: PUSH
7215: LD_INT 1
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: CALL_OW 12
7225: ARRAY
7226: PPUSH
7227: LD_INT 100
7229: PPUSH
7230: CALL 51042 0 5
// un := CreateVehicle ;
7234: LD_ADDR_VAR 0 3
7238: PUSH
7239: CALL_OW 45
7243: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7244: LD_VAR 0 3
7248: PPUSH
7249: LD_INT 4
7251: PPUSH
7252: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7256: LD_VAR 0 3
7260: PPUSH
7261: LD_INT 15
7263: PPUSH
7264: LD_INT 0
7266: PPUSH
7267: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7271: LD_ADDR_VAR 0 2
7275: PUSH
7276: LD_VAR 0 2
7280: PPUSH
7281: LD_VAR 0 2
7285: PUSH
7286: LD_INT 1
7288: PLUS
7289: PPUSH
7290: LD_VAR 0 3
7294: PPUSH
7295: CALL_OW 1
7299: ST_TO_ADDR
// end ;
7300: GO 7174
7302: POP
7303: POP
// for i = 1 to 4 do
7304: LD_ADDR_VAR 0 1
7308: PUSH
7309: DOUBLE
7310: LD_INT 1
7312: DEC
7313: ST_TO_ADDR
7314: LD_INT 4
7316: PUSH
7317: FOR_TO
7318: IFFALSE 7397
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7320: LD_INT 0
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: LD_INT 4
7328: PPUSH
7329: CALL_OW 12
7333: PPUSH
7334: LD_INT 6
7336: PPUSH
7337: CALL_OW 380
// un := CreateHuman ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: CALL_OW 44
7350: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7351: LD_VAR 0 3
7355: PPUSH
7356: LD_INT 15
7358: PPUSH
7359: LD_INT 0
7361: PPUSH
7362: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7366: LD_ADDR_VAR 0 2
7370: PUSH
7371: LD_VAR 0 2
7375: PPUSH
7376: LD_VAR 0 2
7380: PUSH
7381: LD_INT 1
7383: PLUS
7384: PPUSH
7385: LD_VAR 0 3
7389: PPUSH
7390: CALL_OW 1
7394: ST_TO_ADDR
// end ;
7395: GO 7317
7397: POP
7398: POP
// wait ( 0 0$3 ) ;
7399: LD_INT 105
7401: PPUSH
7402: CALL_OW 67
// for i in tmp do
7406: LD_ADDR_VAR 0 1
7410: PUSH
7411: LD_VAR 0 2
7415: PUSH
7416: FOR_IN
7417: IFFALSE 7485
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7419: LD_VAR 0 1
7423: PPUSH
7424: CALL_OW 257
7428: PUSH
7429: LD_INT 1
7431: EQUAL
7432: PUSH
7433: LD_VAR 0 1
7437: PPUSH
7438: CALL_OW 247
7442: PUSH
7443: LD_INT 2
7445: EQUAL
7446: OR
7447: IFFALSE 7483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7449: LD_VAR 0 1
7453: PPUSH
7454: LD_INT 81
7456: PUSH
7457: LD_INT 8
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: PPUSH
7469: LD_VAR 0 1
7473: PPUSH
7474: CALL_OW 74
7478: PPUSH
7479: CALL_OW 115
7483: GO 7416
7485: POP
7486: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7487: LD_VAR 0 2
7491: PPUSH
7492: LD_INT 210
7494: PPUSH
7495: LD_INT 178
7497: PPUSH
7498: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7502: LD_ADDR_VAR 0 4
7506: PUSH
7507: LD_INT 10
7509: PPUSH
7510: LD_INT 22
7512: PUSH
7513: LD_INT 8
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 70
7524: ST_TO_ADDR
// if x then
7525: LD_VAR 0 4
7529: IFFALSE 7557
// for i in x do
7531: LD_ADDR_VAR 0 1
7535: PUSH
7536: LD_VAR 0 4
7540: PUSH
7541: FOR_IN
7542: IFFALSE 7555
// RemoveUnit ( i ) ;
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 64
7553: GO 7541
7555: POP
7556: POP
// wait ( 0 0$1 ) ;
7557: LD_INT 35
7559: PPUSH
7560: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7564: LD_INT 22
7566: PUSH
7567: LD_INT 8
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 69
7578: NOT
7579: IFFALSE 7487
// end ;
7581: PPOPN 4
7583: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7584: LD_INT 22
7586: PUSH
7587: LD_INT 2
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 34
7596: PUSH
7597: LD_INT 31
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: LD_INT 24
7609: PUSH
7610: LD_INT 1000
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 69
7630: IFFALSE 7674
7632: GO 7634
7634: DISABLE
// begin ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
7635: LD_INT 22
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 34
7647: PUSH
7648: LD_INT 31
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 69
7663: PPUSH
7664: LD_INT 106
7666: PPUSH
7667: LD_INT 14
7669: PPUSH
7670: CALL_OW 111
// end ; end_of_file
7674: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7675: LD_INT 0
7677: PPUSH
7678: PPUSH
7679: PPUSH
7680: PPUSH
7681: PPUSH
7682: PPUSH
// InGameOn ;
7683: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7687: LD_EXP 21
7691: PPUSH
7692: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
7696: LD_INT 2
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 1
7707: PPUSH
7708: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7712: LD_ADDR_VAR 0 2
7716: PUSH
7717: LD_INT 22
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: LD_INT 25
7729: PUSH
7730: LD_INT 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PPUSH
7741: CALL_OW 69
7745: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: LD_INT 22
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 34
7763: PUSH
7764: LD_INT 11
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PPUSH
7775: CALL_OW 69
7779: PUSH
7780: LD_INT 1
7782: ARRAY
7783: ST_TO_ADDR
// for i = 1 to tmp do
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: DOUBLE
7790: LD_INT 1
7792: DEC
7793: ST_TO_ADDR
7794: LD_VAR 0 2
7798: PUSH
7799: FOR_TO
7800: IFFALSE 7847
// begin if i = 5 then
7802: LD_VAR 0 6
7806: PUSH
7807: LD_INT 5
7809: EQUAL
7810: IFFALSE 7814
// break ;
7812: GO 7847
// sols := Replace ( sols , i , tmp [ i ] ) ;
7814: LD_ADDR_VAR 0 5
7818: PUSH
7819: LD_VAR 0 5
7823: PPUSH
7824: LD_VAR 0 6
7828: PPUSH
7829: LD_VAR 0 2
7833: PUSH
7834: LD_VAR 0 6
7838: ARRAY
7839: PPUSH
7840: CALL_OW 1
7844: ST_TO_ADDR
// end ;
7845: GO 7799
7847: POP
7848: POP
// tmp := ar_force_tmp ;
7849: LD_ADDR_VAR 0 2
7853: PUSH
7854: LD_EXP 40
7858: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7859: LD_VAR 0 2
7863: PUSH
7864: LD_INT 1
7866: ARRAY
7867: PPUSH
7868: LD_INT 108
7870: PPUSH
7871: LD_INT 139
7873: PPUSH
7874: LD_INT 0
7876: PPUSH
7877: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 1
7888: ARRAY
7889: PPUSH
7890: LD_EXP 21
7894: PPUSH
7895: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7899: LD_VAR 0 2
7903: PUSH
7904: LD_INT 2
7906: ARRAY
7907: PPUSH
7908: LD_INT 114
7910: PPUSH
7911: LD_INT 132
7913: PPUSH
7914: LD_INT 0
7916: PPUSH
7917: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7921: LD_VAR 0 2
7925: PUSH
7926: LD_INT 3
7928: ARRAY
7929: PPUSH
7930: LD_INT 115
7932: PPUSH
7933: LD_INT 132
7935: PPUSH
7936: LD_INT 0
7938: PPUSH
7939: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7943: LD_VAR 0 2
7947: PUSH
7948: LD_INT 2
7950: ARRAY
7951: PUSH
7952: LD_VAR 0 2
7956: PUSH
7957: LD_INT 3
7959: ARRAY
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PPUSH
7965: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7969: LD_VAR 0 4
7973: PPUSH
7974: LD_INT 83
7976: PPUSH
7977: LD_INT 123
7979: PPUSH
7980: CALL_OW 111
// Wait ( 0 0$01 ) ;
7984: LD_INT 35
7986: PPUSH
7987: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7991: LD_INT 90
7993: PPUSH
7994: LD_INT 144
7996: PPUSH
7997: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
8001: LD_VAR 0 5
8005: PPUSH
8006: LD_INT 88
8008: PPUSH
8009: LD_INT 129
8011: PPUSH
8012: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8016: LD_ADDR_VAR 0 3
8020: PUSH
8021: LD_INT 92
8023: PUSH
8024: LD_INT 131
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 88
8033: PUSH
8034: LD_INT 127
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 91
8043: PUSH
8044: LD_INT 132
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 92
8053: PUSH
8054: LD_INT 134
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: ST_TO_ADDR
// for i = 1 to sols do
8067: LD_ADDR_VAR 0 6
8071: PUSH
8072: DOUBLE
8073: LD_INT 1
8075: DEC
8076: ST_TO_ADDR
8077: LD_VAR 0 5
8081: PUSH
8082: FOR_TO
8083: IFFALSE 8156
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8085: LD_VAR 0 5
8089: PUSH
8090: LD_VAR 0 6
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 3
8100: PUSH
8101: LD_VAR 0 6
8105: ARRAY
8106: PUSH
8107: LD_INT 1
8109: ARRAY
8110: PPUSH
8111: LD_VAR 0 3
8115: PUSH
8116: LD_VAR 0 6
8120: ARRAY
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PPUSH
8126: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8130: LD_VAR 0 5
8134: PUSH
8135: LD_VAR 0 6
8139: ARRAY
8140: PPUSH
8141: CALL_OW 197
// AddComHold ( sols ) ;
8145: LD_VAR 0 5
8149: PPUSH
8150: CALL_OW 200
// end ;
8154: GO 8082
8156: POP
8157: POP
// repeat wait ( 0 0$1 ) ;
8158: LD_INT 35
8160: PPUSH
8161: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8165: LD_VAR 0 5
8169: PUSH
8170: LD_INT 1
8172: ARRAY
8173: PPUSH
8174: LD_INT 92
8176: PPUSH
8177: LD_INT 131
8179: PPUSH
8180: CALL_OW 297
8184: PUSH
8185: LD_INT 4
8187: LESS
8188: IFFALSE 8158
// CenterOnXY ( 96 , 139 ) ;
8190: LD_INT 96
8192: PPUSH
8193: LD_INT 139
8195: PPUSH
8196: CALL_OW 84
// wait ( 0 0$3 ) ;
8200: LD_INT 105
8202: PPUSH
8203: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8207: LD_INT 111
8209: PPUSH
8210: LD_INT 135
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: LD_INT 25
8218: NEG
8219: PPUSH
8220: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8224: LD_VAR 0 2
8228: PUSH
8229: LD_INT 2
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 2
8237: PUSH
8238: LD_INT 1
8240: ARRAY
8241: PPUSH
8242: CALL_OW 250
8246: PUSH
8247: LD_INT 3
8249: PLUS
8250: PPUSH
8251: LD_VAR 0 2
8255: PUSH
8256: LD_INT 1
8258: ARRAY
8259: PPUSH
8260: CALL_OW 251
8264: PPUSH
8265: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8269: LD_VAR 0 2
8273: PUSH
8274: LD_INT 3
8276: ARRAY
8277: PPUSH
8278: LD_INT 7
8280: PPUSH
8281: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8285: LD_VAR 0 2
8289: PUSH
8290: LD_INT 2
8292: ARRAY
8293: PPUSH
8294: LD_VAR 0 2
8298: PUSH
8299: LD_INT 1
8301: ARRAY
8302: PPUSH
8303: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8307: LD_INT 35
8309: PPUSH
8310: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8314: LD_VAR 0 2
8318: PUSH
8319: LD_INT 1
8321: ARRAY
8322: PPUSH
8323: LD_VAR 0 2
8327: PUSH
8328: LD_INT 2
8330: ARRAY
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 5
8339: LESS
8340: IFFALSE 8307
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8342: LD_VAR 0 2
8346: PUSH
8347: LD_INT 1
8349: ARRAY
8350: PPUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_INT 2
8358: ARRAY
8359: PPUSH
8360: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8364: LD_VAR 0 2
8368: PUSH
8369: LD_INT 1
8371: ARRAY
8372: PPUSH
8373: LD_STRING D1a-Merc1-1
8375: PPUSH
8376: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 2
8387: ARRAY
8388: PPUSH
8389: LD_STRING D1a-FMerc2-1
8391: PPUSH
8392: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8396: LD_VAR 0 2
8400: PUSH
8401: LD_INT 2
8403: ARRAY
8404: PPUSH
8405: LD_VAR 0 2
8409: PUSH
8410: LD_INT 1
8412: ARRAY
8413: PPUSH
8414: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8418: LD_VAR 0 2
8422: PUSH
8423: LD_INT 1
8425: ARRAY
8426: PPUSH
8427: LD_INT 500
8429: PPUSH
8430: CALL_OW 234
// wait ( 0 0$2 ) ;
8434: LD_INT 70
8436: PPUSH
8437: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 1
8448: ARRAY
8449: PPUSH
8450: LD_INT 2
8452: PPUSH
8453: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8457: LD_INT 10
8459: PPUSH
8460: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8464: LD_VAR 0 2
8468: PUSH
8469: LD_INT 1
8471: ARRAY
8472: PPUSH
8473: LD_STRING D1a-Merc1-2
8475: PPUSH
8476: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8480: LD_INT 7
8482: PPUSH
8483: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8487: LD_VAR 0 2
8491: PUSH
8492: LD_INT 1
8494: ARRAY
8495: PPUSH
8496: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8500: LD_VAR 0 2
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PPUSH
8509: LD_INT 10
8511: PPUSH
8512: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8516: LD_VAR 0 2
8520: PUSH
8521: LD_INT 2
8523: ARRAY
8524: PPUSH
8525: LD_STRING D1a-FMerc2-2
8527: PPUSH
8528: CALL_OW 88
// wait ( 0 0$1 ) ;
8532: LD_INT 35
8534: PPUSH
8535: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8539: LD_INT 7
8541: PPUSH
8542: CALL_OW 85
// wait ( 0 0$2 ) ;
8546: LD_INT 70
8548: PPUSH
8549: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8553: LD_EXP 44
8557: PPUSH
8558: LD_STRING D1a-Saliba-1
8560: PPUSH
8561: CALL_OW 91
// KillUnit ( Saliba ) ;
8565: LD_EXP 44
8569: PPUSH
8570: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8574: LD_VAR 0 2
8578: PUSH
8579: LD_INT 3
8581: ARRAY
8582: PPUSH
8583: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8587: LD_EXP 21
8591: PPUSH
8592: CALL_OW 85
// wait ( 0 0$1 ) ;
8596: LD_INT 35
8598: PPUSH
8599: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
8603: LD_VAR 0 5
8607: PPUSH
8608: LD_INT 88
8610: PPUSH
8611: LD_INT 141
8613: PPUSH
8614: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
8618: LD_VAR 0 5
8622: PPUSH
8623: LD_INT 70
8625: PPUSH
8626: CALL_OW 202
// wait ( 0 0$2 ) ;
8630: LD_INT 70
8632: PPUSH
8633: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: LD_INT 2
8645: PPUSH
8646: LD_INT 1
8648: PPUSH
8649: CALL_OW 80
// InGameOff ;
8653: CALL_OW 9
// ComWalk ( sols ) ;
8657: LD_VAR 0 5
8661: PPUSH
8662: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
8666: LD_STRING M1
8668: PPUSH
8669: CALL_OW 337
// game_speed := 4 ;
8673: LD_ADDR_OWVAR 65
8677: PUSH
8678: LD_INT 4
8680: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8681: LD_INT 111
8683: PPUSH
8684: LD_INT 135
8686: PPUSH
8687: LD_INT 1
8689: PPUSH
8690: CALL_OW 331
// SaveForQuickRestart ;
8694: CALL_OW 22
// ar_run := true ;
8698: LD_ADDR_EXP 5
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8706: LD_INT 35
8708: PPUSH
8709: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8713: LD_INT 22
8715: PUSH
8716: LD_INT 1
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 91
8725: PUSH
8726: LD_INT 7
8728: PUSH
8729: LD_INT 10
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PPUSH
8741: CALL_OW 69
8745: PUSH
8746: LD_INT 7
8748: PPUSH
8749: CALL_OW 256
8753: PUSH
8754: LD_INT 999
8756: LESS
8757: OR
8758: IFFALSE 8706
// if GetSide ( ar_dep_s ) = 2 then
8760: LD_INT 7
8762: PPUSH
8763: CALL_OW 255
8767: PUSH
8768: LD_INT 2
8770: EQUAL
8771: IFFALSE 8783
// SetSide ( ar_dep_s , 1 ) ;
8773: LD_INT 7
8775: PPUSH
8776: LD_INT 1
8778: PPUSH
8779: CALL_OW 235
// end ;
8783: LD_VAR 0 1
8787: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8788: LD_EXP 5
8792: IFFALSE 9152
8794: GO 8796
8796: DISABLE
8797: LD_INT 0
8799: PPUSH
8800: PPUSH
8801: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8802: LD_ADDR_VAR 0 2
8806: PUSH
8807: LD_EXP 40
8811: PUSH
8812: LD_EXP 36
8816: PPUSH
8817: LD_INT 2
8819: PUSH
8820: LD_INT 21
8822: PUSH
8823: LD_INT 2
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 21
8832: PUSH
8833: LD_INT 1
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: LIST
8844: PPUSH
8845: CALL_OW 72
8849: ADD
8850: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8851: LD_VAR 0 2
8855: PPUSH
8856: LD_INT 5
8858: PPUSH
8859: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8863: LD_INT 5
8865: PPUSH
8866: LD_INT 1
8868: PPUSH
8869: CALL_OW 343
// k := 1 ;
8873: LD_ADDR_VAR 0 3
8877: PUSH
8878: LD_INT 1
8880: ST_TO_ADDR
// for i in tmp do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: LD_VAR 0 2
8890: PUSH
8891: FOR_IN
8892: IFFALSE 8977
// begin if IsInUnit ( i ) then
8894: LD_VAR 0 1
8898: PPUSH
8899: CALL_OW 310
8903: IFFALSE 8914
// ComExitBuilding ( i ) ;
8905: LD_VAR 0 1
8909: PPUSH
8910: CALL_OW 122
// if GetClass ( i ) = 3 then
8914: LD_VAR 0 1
8918: PPUSH
8919: CALL_OW 257
8923: PUSH
8924: LD_INT 3
8926: EQUAL
8927: IFFALSE 8963
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8929: LD_VAR 0 1
8933: PPUSH
8934: LD_EXP 41
8938: PUSH
8939: LD_VAR 0 3
8943: ARRAY
8944: PPUSH
8945: CALL_OW 180
// k := k + 1 ;
8949: LD_ADDR_VAR 0 3
8953: PUSH
8954: LD_VAR 0 3
8958: PUSH
8959: LD_INT 1
8961: PLUS
8962: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8963: LD_VAR 0 1
8967: PPUSH
8968: LD_INT 10
8970: PPUSH
8971: CALL_OW 173
// end ;
8975: GO 8891
8977: POP
8978: POP
// ar_patrol := true ;
8979: LD_ADDR_EXP 7
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8987: LD_INT 10
8989: PPUSH
8990: CALL_OW 67
// for i in tmp do
8994: LD_ADDR_VAR 0 1
8998: PUSH
8999: LD_VAR 0 2
9003: PUSH
9004: FOR_IN
9005: IFFALSE 9033
// if not HasTask ( i ) then
9007: LD_VAR 0 1
9011: PPUSH
9012: CALL_OW 314
9016: NOT
9017: IFFALSE 9031
// ComMoveToArea ( i , escape_area ) ;
9019: LD_VAR 0 1
9023: PPUSH
9024: LD_INT 10
9026: PPUSH
9027: CALL_OW 113
9031: GO 9004
9033: POP
9034: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9035: LD_ADDR_VAR 0 3
9039: PUSH
9040: LD_VAR 0 2
9044: PPUSH
9045: LD_INT 95
9047: PUSH
9048: LD_INT 10
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: PPUSH
9055: CALL_OW 72
9059: ST_TO_ADDR
// if k then
9060: LD_VAR 0 3
9064: IFFALSE 9133
// for i in k do
9066: LD_ADDR_VAR 0 1
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: FOR_IN
9077: IFFALSE 9131
// begin if IsInUnit ( i ) then
9079: LD_VAR 0 1
9083: PPUSH
9084: CALL_OW 310
9088: IFFALSE 9104
// RemoveUnit ( IsInUnit ( i ) ) ;
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 310
9099: PPUSH
9100: CALL_OW 64
// RemoveUnit ( i ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 64
// tmp := tmp diff i ;
9113: LD_ADDR_VAR 0 2
9117: PUSH
9118: LD_VAR 0 2
9122: PUSH
9123: LD_VAR 0 1
9127: DIFF
9128: ST_TO_ADDR
// end ;
9129: GO 9076
9131: POP
9132: POP
// until tmp = [ ] ;
9133: LD_VAR 0 2
9137: PUSH
9138: EMPTY
9139: EQUAL
9140: IFFALSE 8987
// ChangeSideFog ( 5 , 5 ) ;
9142: LD_INT 5
9144: PPUSH
9145: LD_INT 5
9147: PPUSH
9148: CALL_OW 343
// end ;
9152: PPOPN 3
9154: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9155: LD_EXP 7
9159: IFFALSE 9449
9161: GO 9163
9163: DISABLE
9164: LD_INT 0
9166: PPUSH
9167: PPUSH
9168: PPUSH
// begin uc_side := 2 ;
9169: LD_ADDR_OWVAR 20
9173: PUSH
9174: LD_INT 2
9176: ST_TO_ADDR
// uc_nation := 2 ;
9177: LD_ADDR_OWVAR 21
9181: PUSH
9182: LD_INT 2
9184: ST_TO_ADDR
// InitHc ;
9185: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 1
9194: PPUSH
9195: LD_INT 6
9197: PPUSH
9198: CALL_OW 380
// un := CreateHuman ;
9202: LD_ADDR_VAR 0 2
9206: PUSH
9207: CALL_OW 44
9211: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9212: LD_INT 14
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: LD_INT 27
9223: PPUSH
9224: LD_INT 98
9226: PPUSH
9227: CALL 51042 0 5
// veh := CreateVehicle ;
9231: LD_ADDR_VAR 0 3
9235: PUSH
9236: CALL_OW 45
9240: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9241: LD_VAR 0 3
9245: PPUSH
9246: LD_INT 4
9248: PPUSH
9249: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9253: LD_VAR 0 3
9257: PPUSH
9258: LD_INT 179
9260: PPUSH
9261: LD_INT 135
9263: PPUSH
9264: LD_INT 0
9266: PPUSH
9267: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9271: LD_VAR 0 2
9275: PPUSH
9276: LD_VAR 0 3
9280: PPUSH
9281: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9285: LD_VAR 0 2
9289: PPUSH
9290: LD_INT 126
9292: PPUSH
9293: LD_INT 133
9295: PPUSH
9296: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9300: LD_INT 10
9302: PPUSH
9303: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9307: LD_INT 1
9309: PPUSH
9310: LD_VAR 0 3
9314: PPUSH
9315: CALL_OW 292
9319: PUSH
9320: LD_VAR 0 3
9324: PPUSH
9325: LD_INT 7
9327: PPUSH
9328: CALL_OW 296
9332: PUSH
9333: LD_INT 9
9335: LESS
9336: OR
9337: IFFALSE 9300
// ComHold ( veh ) ;
9339: LD_VAR 0 3
9343: PPUSH
9344: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9348: LD_VAR 0 2
9352: PPUSH
9353: LD_STRING D2aa-Ar1-1
9355: PPUSH
9356: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9360: LD_VAR 0 2
9364: PPUSH
9365: LD_INT 177
9367: PPUSH
9368: LD_INT 96
9370: PPUSH
9371: CALL_OW 111
// AddComExitVehicle ( un ) ;
9375: LD_VAR 0 2
9379: PPUSH
9380: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9384: LD_INT 35
9386: PPUSH
9387: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9391: LD_VAR 0 2
9395: PPUSH
9396: LD_INT 204
9398: PPUSH
9399: CALL_OW 296
9403: PUSH
9404: LD_INT 15
9406: LESS
9407: IFFALSE 9384
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9409: LD_ADDR_EXP 50
9413: PUSH
9414: LD_EXP 50
9418: PPUSH
9419: LD_INT 3
9421: PUSH
9422: LD_EXP 50
9426: PUSH
9427: LD_INT 3
9429: ARRAY
9430: PUSH
9431: LD_INT 1
9433: PLUS
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: LD_VAR 0 2
9443: PPUSH
9444: CALL 51164 0 3
9448: ST_TO_ADDR
// end ;
9449: PPOPN 3
9451: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9452: LD_INT 7
9454: PPUSH
9455: CALL_OW 255
9459: PUSH
9460: LD_INT 1
9462: EQUAL
9463: PUSH
9464: LD_INT 7
9466: PPUSH
9467: CALL_OW 301
9471: OR
9472: IFFALSE 11896
9474: GO 9476
9476: DISABLE
9477: LD_INT 0
9479: PPUSH
9480: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9481: LD_ADDR_VAR 0 1
9485: PUSH
9486: LD_EXP 36
9490: PPUSH
9491: LD_INT 21
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PPUSH
9501: CALL_OW 72
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9523
// SetSide ( i , 1 ) ;
9509: LD_VAR 0 1
9513: PPUSH
9514: LD_INT 1
9516: PPUSH
9517: CALL_OW 235
9521: GO 9506
9523: POP
9524: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9525: LD_ADDR_VAR 0 2
9529: PUSH
9530: LD_INT 46
9532: PUSH
9533: LD_INT 41
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 50
9542: PUSH
9543: LD_INT 25
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 57
9552: PUSH
9553: LD_INT 75
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: LD_INT 75
9562: PUSH
9563: LD_INT 89
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 51
9572: PUSH
9573: LD_INT 45
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 95
9582: PUSH
9583: LD_INT 95
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: LD_INT 84
9592: PUSH
9593: LD_INT 77
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 101
9602: PUSH
9603: LD_INT 76
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 118
9612: PUSH
9613: LD_INT 81
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 139
9622: PUSH
9623: LD_INT 97
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 129
9632: PUSH
9633: LD_INT 114
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: LD_INT 154
9642: PUSH
9643: LD_INT 111
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: ST_TO_ADDR
// base_captured := true ;
9664: LD_ADDR_EXP 6
9668: PUSH
9669: LD_INT 1
9671: ST_TO_ADDR
// DialogueOn ;
9672: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9676: LD_EXP 21
9680: PPUSH
9681: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9685: LD_EXP 21
9689: PPUSH
9690: LD_STRING D2-JMM-1
9692: PPUSH
9693: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9697: LD_EXP 30
9701: PPUSH
9702: LD_STRING D2-Pow-1
9704: PPUSH
9705: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9709: LD_EXP 21
9713: PPUSH
9714: LD_STRING D2-JMM-2
9716: PPUSH
9717: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9721: LD_EXP 30
9725: PPUSH
9726: LD_STRING D2-Pow-2
9728: PPUSH
9729: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9733: LD_EXP 21
9737: PPUSH
9738: LD_STRING D2-JMM-3
9740: PPUSH
9741: CALL_OW 88
// DialogueOff ;
9745: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9749: LD_STRING M2
9751: PPUSH
9752: CALL_OW 337
// Wait ( 0 0$2 ) ;
9756: LD_INT 70
9758: PPUSH
9759: CALL_OW 67
// if IsOk ( Gary ) then
9763: LD_EXP 32
9767: PPUSH
9768: CALL_OW 302
9772: IFFALSE 9786
// Say ( Gary , D2a-Gary-1 ) ;
9774: LD_EXP 32
9778: PPUSH
9779: LD_STRING D2a-Gary-1
9781: PPUSH
9782: CALL_OW 88
// if IsOk ( Bobby ) then
9786: LD_EXP 24
9790: PPUSH
9791: CALL_OW 302
9795: IFFALSE 9809
// Say ( Bobby , D2a-Bobby-1 ) ;
9797: LD_EXP 24
9801: PPUSH
9802: LD_STRING D2a-Bobby-1
9804: PPUSH
9805: CALL_OW 88
// if IsOk ( Cyrus ) then
9809: LD_EXP 25
9813: PPUSH
9814: CALL_OW 302
9818: IFFALSE 9832
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9820: LD_EXP 25
9824: PPUSH
9825: LD_STRING D2a-Cyrus-1
9827: PPUSH
9828: CALL_OW 88
// if IsOk ( Lisa ) then
9832: LD_EXP 22
9836: PPUSH
9837: CALL_OW 302
9841: IFFALSE 9855
// Say ( Lisa , D2a-Lisa-1 ) ;
9843: LD_EXP 22
9847: PPUSH
9848: LD_STRING D2a-Lisa-1
9850: PPUSH
9851: CALL_OW 88
// if IsOk ( Frank ) then
9855: LD_EXP 33
9859: PPUSH
9860: CALL_OW 302
9864: IFFALSE 9878
// Say ( Frank , D2a-Frank-1 ) ;
9866: LD_EXP 33
9870: PPUSH
9871: LD_STRING D2a-Frank-1
9873: PPUSH
9874: CALL_OW 88
// if IsOk ( Cornel ) then
9878: LD_EXP 31
9882: PPUSH
9883: CALL_OW 302
9887: IFFALSE 9901
// Say ( Cornel , D2a-Corn-1 ) ;
9889: LD_EXP 31
9893: PPUSH
9894: LD_STRING D2a-Corn-1
9896: PPUSH
9897: CALL_OW 88
// if IsOk ( Donaldson ) then
9901: LD_EXP 23
9905: PPUSH
9906: CALL_OW 302
9910: IFFALSE 9924
// Say ( Donaldson , D2a-Don-1 ) ;
9912: LD_EXP 23
9916: PPUSH
9917: LD_STRING D2a-Don-1
9919: PPUSH
9920: CALL_OW 88
// if IsOk ( Brown ) then
9924: LD_EXP 27
9928: PPUSH
9929: CALL_OW 302
9933: IFFALSE 9947
// Say ( Brown , D2a-Brown-1 ) ;
9935: LD_EXP 27
9939: PPUSH
9940: LD_STRING D2a-Brown-1
9942: PPUSH
9943: CALL_OW 88
// Wait ( 0 0$30 ) ;
9947: LD_INT 1050
9949: PPUSH
9950: CALL_OW 67
// if IsOk ( Frank ) then
9954: LD_EXP 33
9958: PPUSH
9959: CALL_OW 302
9963: IFFALSE 10229
// begin DialogueOn ;
9965: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9969: LD_EXP 21
9973: PUSH
9974: LD_EXP 33
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9987: LD_EXP 33
9991: PPUSH
9992: LD_STRING D3F-Frank-1
9994: PPUSH
9995: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9999: LD_EXP 21
10003: PPUSH
10004: LD_STRING D3F-JMM-1
10006: PPUSH
10007: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10011: LD_EXP 33
10015: PPUSH
10016: LD_STRING D3F-Frank-2
10018: PPUSH
10019: CALL_OW 88
// case Query ( QFrank ) of 1 :
10023: LD_STRING QFrank
10025: PPUSH
10026: CALL_OW 97
10030: PUSH
10031: LD_INT 1
10033: DOUBLE
10034: EQUAL
10035: IFTRUE 10039
10037: GO 10062
10039: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10040: LD_EXP 21
10044: PPUSH
10045: LD_STRING D3Fa-JMM-1
10047: PPUSH
10048: CALL_OW 88
// us_scout := 1 ;
10052: LD_ADDR_EXP 8
10056: PUSH
10057: LD_INT 1
10059: ST_TO_ADDR
// end ; 2 :
10060: GO 10225
10062: LD_INT 2
10064: DOUBLE
10065: EQUAL
10066: IFTRUE 10070
10068: GO 10192
10070: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10071: LD_EXP 21
10075: PPUSH
10076: LD_STRING D3Fb-JMM-1
10078: PPUSH
10079: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10083: LD_EXP 33
10087: PPUSH
10088: LD_STRING D3Fb-Frank-1
10090: PPUSH
10091: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10095: LD_STRING QFrank2
10097: PPUSH
10098: CALL_OW 97
10102: PUSH
10103: LD_INT 1
10105: DOUBLE
10106: EQUAL
10107: IFTRUE 10111
10109: GO 10158
10111: POP
// begin us_scout := 2 ;
10112: LD_ADDR_EXP 8
10116: PUSH
10117: LD_INT 2
10119: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10120: LD_EXP 21
10124: PPUSH
10125: LD_STRING D3Fba-JMM-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10132: LD_EXP 33
10136: PPUSH
10137: LD_STRING D3Fba-Frank-1
10139: PPUSH
10140: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10144: LD_EXP 21
10148: PPUSH
10149: LD_STRING D3Fba-JMM-2
10151: PPUSH
10152: CALL_OW 88
// end ; 2 :
10156: GO 10190
10158: LD_INT 2
10160: DOUBLE
10161: EQUAL
10162: IFTRUE 10166
10164: GO 10189
10166: POP
// begin us_scout := 0 ;
10167: LD_ADDR_EXP 8
10171: PUSH
10172: LD_INT 0
10174: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10175: LD_EXP 21
10179: PPUSH
10180: LD_STRING D3Fbb-JMM-1
10182: PPUSH
10183: CALL_OW 88
// end ; end ;
10187: GO 10190
10189: POP
// end ; 3 :
10190: GO 10225
10192: LD_INT 3
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10224
10200: POP
// begin us_scout := - 1 ;
10201: LD_ADDR_EXP 8
10205: PUSH
10206: LD_INT 1
10208: NEG
10209: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10210: LD_EXP 21
10214: PPUSH
10215: LD_STRING D3Fc-JMM-1
10217: PPUSH
10218: CALL_OW 88
// end ; end ;
10222: GO 10225
10224: POP
// DialogueOff ;
10225: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10229: LD_EXP 8
10233: PUSH
10234: LD_INT 1
10236: NEG
10237: PUSH
10238: LD_INT 0
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: IN
10245: IFFALSE 10249
// exit ;
10247: GO 11896
// if us_scout in [ 1 , 2 ] then
10249: LD_EXP 8
10253: PUSH
10254: LD_INT 1
10256: PUSH
10257: LD_INT 2
10259: PUSH
10260: EMPTY
10261: LIST
10262: LIST
10263: IN
10264: IFFALSE 10963
// begin if IsInUnit ( Frank ) then
10266: LD_EXP 33
10270: PPUSH
10271: CALL_OW 310
10275: IFFALSE 10286
// ComExitBuilding ( Frank ) ;
10277: LD_EXP 33
10281: PPUSH
10282: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10286: LD_EXP 33
10290: PPUSH
10291: CALL_OW 311
10295: IFFALSE 10306
// ComExitVehicle ( Frank ) ;
10297: LD_EXP 33
10301: PPUSH
10302: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10306: LD_EXP 33
10310: PPUSH
10311: LD_INT 4
10313: PPUSH
10314: CALL_OW 235
// wait ( 0 0$1 ) ;
10318: LD_INT 35
10320: PPUSH
10321: CALL_OW 67
// if us_scout = 2 then
10325: LD_EXP 8
10329: PUSH
10330: LD_INT 2
10332: EQUAL
10333: IFFALSE 10701
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10335: LD_EXP 33
10339: PPUSH
10340: LD_INT 75
10342: PPUSH
10343: LD_INT 63
10345: PPUSH
10346: CALL_OW 111
// AddComHold ( Frank ) ;
10350: LD_EXP 33
10354: PPUSH
10355: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10359: LD_EXP 33
10363: PPUSH
10364: LD_INT 770
10366: PPUSH
10367: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10371: LD_EXP 33
10375: PPUSH
10376: LD_INT 100
10378: PPUSH
10379: LD_INT 75
10381: PPUSH
10382: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10386: LD_EXP 33
10390: PPUSH
10391: LD_INT 123
10393: PPUSH
10394: LD_INT 103
10396: PPUSH
10397: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10401: LD_EXP 33
10405: PPUSH
10406: LD_INT 138
10408: PPUSH
10409: LD_INT 108
10411: PPUSH
10412: CALL_OW 171
// AddComHold ( Frank ) ;
10416: LD_EXP 33
10420: PPUSH
10421: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10425: LD_INT 35
10427: PPUSH
10428: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10432: LD_EXP 33
10436: PPUSH
10437: LD_INT 138
10439: PPUSH
10440: LD_INT 108
10442: PPUSH
10443: CALL_OW 307
10447: IFFALSE 10425
// AddComMoveXY ( Frank , 125 , 132 ) ;
10449: LD_EXP 33
10453: PPUSH
10454: LD_INT 125
10456: PPUSH
10457: LD_INT 132
10459: PPUSH
10460: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10464: LD_INT 35
10466: PPUSH
10467: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10471: LD_INT 1
10473: PPUSH
10474: LD_EXP 33
10478: PPUSH
10479: CALL_OW 292
10483: PUSH
10484: LD_EXP 33
10488: PPUSH
10489: LD_INT 7
10491: PPUSH
10492: CALL_OW 296
10496: PUSH
10497: LD_INT 7
10499: LESS
10500: OR
10501: IFFALSE 10464
// DialogueOn ;
10503: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10507: LD_EXP 33
10511: PPUSH
10512: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10516: LD_INT 10
10518: PPUSH
10519: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10523: LD_EXP 21
10527: PPUSH
10528: LD_STRING D4Fa-JMM-1
10530: PPUSH
10531: CALL_OW 88
// for i in points do
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: LD_VAR 0 2
10544: PUSH
10545: FOR_IN
10546: IFFALSE 10604
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10548: LD_VAR 0 1
10552: PUSH
10553: LD_INT 1
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 1
10561: PUSH
10562: LD_INT 2
10564: ARRAY
10565: PPUSH
10566: LD_INT 1
10568: PPUSH
10569: LD_INT 20
10571: NEG
10572: PPUSH
10573: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10577: LD_VAR 0 1
10581: PUSH
10582: LD_INT 1
10584: ARRAY
10585: PPUSH
10586: LD_VAR 0 1
10590: PUSH
10591: LD_INT 2
10593: ARRAY
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 331
// end ;
10602: GO 10545
10604: POP
10605: POP
// dwait ( 0 0$0.5 ) ;
10606: LD_INT 18
10608: PPUSH
10609: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10613: LD_INT 42
10615: PPUSH
10616: LD_INT 27
10618: PPUSH
10619: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10623: LD_EXP 33
10627: PPUSH
10628: LD_STRING D4Fa-Frank-1
10630: PPUSH
10631: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10635: LD_INT 18
10637: PPUSH
10638: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10642: LD_EXP 21
10646: PPUSH
10647: LD_STRING D4Fa-JMM-2
10649: PPUSH
10650: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10654: LD_INT 118
10656: PPUSH
10657: LD_INT 80
10659: PPUSH
10660: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10664: LD_EXP 33
10668: PPUSH
10669: LD_STRING D4Fa-Frank-2
10671: PPUSH
10672: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10676: LD_INT 10
10678: PPUSH
10679: CALL_OW 68
// DialogueOff ;
10683: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10687: LD_EXP 33
10691: PPUSH
10692: LD_INT 1
10694: PPUSH
10695: CALL_OW 235
// end else
10699: GO 10963
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10701: LD_INT 2
10703: PPUSH
10704: LD_INT 4
10706: PPUSH
10707: LD_INT 2
10709: PPUSH
10710: LD_INT 1
10712: PPUSH
10713: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10717: LD_EXP 33
10721: PPUSH
10722: LD_INT 75
10724: PPUSH
10725: LD_INT 63
10727: PPUSH
10728: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10732: LD_EXP 33
10736: PPUSH
10737: LD_INT 175
10739: PPUSH
10740: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10744: LD_EXP 33
10748: PPUSH
10749: LD_INT 102
10751: PPUSH
10752: LD_INT 76
10754: PPUSH
10755: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10759: LD_EXP 33
10763: PPUSH
10764: LD_INT 108
10766: PPUSH
10767: LD_INT 70
10769: PPUSH
10770: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10774: LD_INT 35
10776: PPUSH
10777: CALL_OW 67
// until See ( 2 , Frank ) ;
10781: LD_INT 2
10783: PPUSH
10784: LD_EXP 33
10788: PPUSH
10789: CALL_OW 292
10793: IFFALSE 10774
// ComMoveXY ( Frank , 112 , 118 ) ;
10795: LD_EXP 33
10799: PPUSH
10800: LD_INT 112
10802: PPUSH
10803: LD_INT 118
10805: PPUSH
10806: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10810: LD_EXP 33
10814: PPUSH
10815: CALL_OW 256
10819: PUSH
10820: LD_INT 750
10822: GREATEREQUAL
10823: IFFALSE 10837
// SetLives ( Frank , 700 ) ;
10825: LD_EXP 33
10829: PPUSH
10830: LD_INT 700
10832: PPUSH
10833: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10837: LD_INT 35
10839: PPUSH
10840: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10844: LD_INT 1
10846: PPUSH
10847: LD_EXP 33
10851: PPUSH
10852: CALL_OW 292
10856: PUSH
10857: LD_EXP 33
10861: PPUSH
10862: LD_INT 7
10864: PPUSH
10865: CALL_OW 296
10869: PUSH
10870: LD_INT 17
10872: LESS
10873: OR
10874: IFFALSE 10837
// DialogueOn ;
10876: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10880: LD_EXP 33
10884: PPUSH
10885: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10889: LD_EXP 33
10893: PPUSH
10894: LD_STRING D4Fb-Frank-1
10896: PPUSH
10897: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10901: LD_EXP 21
10905: PPUSH
10906: LD_STRING D4Fb-JMM-1
10908: PPUSH
10909: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10913: LD_INT 2
10915: PPUSH
10916: LD_STRING D4Fb-FSci1-1
10918: PPUSH
10919: CALL 15544 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10923: LD_EXP 33
10927: PPUSH
10928: LD_STRING D4Fb-Frank-2
10930: PPUSH
10931: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10935: LD_EXP 21
10939: PPUSH
10940: LD_STRING D4Fb-JMM-2
10942: PPUSH
10943: CALL_OW 88
// DialogueOff ;
10947: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10951: LD_EXP 33
10955: PPUSH
10956: LD_INT 1
10958: PPUSH
10959: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10963: LD_EXP 34
10967: PPUSH
10968: CALL_OW 302
10972: PUSH
10973: LD_EXP 33
10977: NOT
10978: AND
10979: IFFALSE 11127
// begin DialogueOn ;
10981: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10985: LD_EXP 21
10989: PUSH
10990: LD_EXP 34
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11003: LD_EXP 34
11007: PPUSH
11008: LD_STRING D3Y-Yam-1
11010: PPUSH
11011: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11015: LD_EXP 21
11019: PPUSH
11020: LD_STRING D3Y-JMM-1
11022: PPUSH
11023: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11027: LD_EXP 34
11031: PPUSH
11032: LD_STRING D3Y-Yam-2
11034: PPUSH
11035: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11039: LD_STRING QYamoko
11041: PPUSH
11042: CALL_OW 97
11046: PUSH
11047: LD_INT 1
11049: DOUBLE
11050: EQUAL
11051: IFTRUE 11055
11053: GO 11090
11055: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11056: LD_EXP 21
11060: PPUSH
11061: LD_STRING D3Ya-JMM-1
11063: PPUSH
11064: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11068: LD_EXP 34
11072: PPUSH
11073: LD_STRING D3Ya-Yam-1
11075: PPUSH
11076: CALL_OW 88
// us_scout := 1 ;
11080: LD_ADDR_EXP 8
11084: PUSH
11085: LD_INT 1
11087: ST_TO_ADDR
// end ; 2 :
11088: GO 11123
11090: LD_INT 2
11092: DOUBLE
11093: EQUAL
11094: IFTRUE 11098
11096: GO 11122
11098: POP
// begin us_scout := - 1 ;
11099: LD_ADDR_EXP 8
11103: PUSH
11104: LD_INT 1
11106: NEG
11107: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11108: LD_EXP 21
11112: PPUSH
11113: LD_STRING D3Yb-JMM-1
11115: PPUSH
11116: CALL_OW 88
// end ; end ;
11120: GO 11123
11122: POP
// DialogueOff ;
11123: CALL_OW 7
// end ; if Frank then
11127: LD_EXP 33
11131: IFFALSE 11135
// exit ;
11133: GO 11896
// if us_scout in [ - 1 , 0 ] then
11135: LD_EXP 8
11139: PUSH
11140: LD_INT 1
11142: NEG
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: IN
11151: IFFALSE 11155
// exit ;
11153: GO 11896
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11155: LD_ADDR_EXP 8
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: LD_OWVAR 67
11178: ARRAY
11179: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11180: LD_EXP 8
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: LD_INT 2
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: IN
11195: IFFALSE 11896
// begin if IsInUnit ( Kikuchi ) then
11197: LD_EXP 34
11201: PPUSH
11202: CALL_OW 310
11206: IFFALSE 11217
// ComExitBuilding ( Kikuchi ) ;
11208: LD_EXP 34
11212: PPUSH
11213: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11217: LD_EXP 34
11221: PPUSH
11222: CALL_OW 311
11226: IFFALSE 11237
// ComExitVehicle ( Kikuchi ) ;
11228: LD_EXP 34
11232: PPUSH
11233: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11237: LD_EXP 34
11241: PPUSH
11242: LD_INT 4
11244: PPUSH
11245: CALL_OW 235
// wait ( 0 0$1 ) ;
11249: LD_INT 35
11251: PPUSH
11252: CALL_OW 67
// if us_scout = 2 then
11256: LD_EXP 8
11260: PUSH
11261: LD_INT 2
11263: EQUAL
11264: IFFALSE 11644
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11266: LD_EXP 34
11270: PPUSH
11271: LD_INT 75
11273: PPUSH
11274: LD_INT 63
11276: PPUSH
11277: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11281: LD_EXP 34
11285: PPUSH
11286: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11290: LD_EXP 34
11294: PPUSH
11295: LD_INT 770
11297: PPUSH
11298: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11302: LD_EXP 34
11306: PPUSH
11307: LD_INT 100
11309: PPUSH
11310: LD_INT 75
11312: PPUSH
11313: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11317: LD_EXP 34
11321: PPUSH
11322: LD_INT 123
11324: PPUSH
11325: LD_INT 103
11327: PPUSH
11328: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11332: LD_EXP 34
11336: PPUSH
11337: LD_INT 138
11339: PPUSH
11340: LD_INT 108
11342: PPUSH
11343: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11347: LD_EXP 34
11351: PPUSH
11352: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11356: LD_INT 35
11358: PPUSH
11359: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11363: LD_EXP 34
11367: PPUSH
11368: LD_INT 138
11370: PPUSH
11371: LD_INT 108
11373: PPUSH
11374: CALL_OW 307
11378: IFFALSE 11356
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11380: LD_EXP 34
11384: PPUSH
11385: LD_INT 125
11387: PPUSH
11388: LD_INT 132
11390: PPUSH
11391: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11395: LD_INT 35
11397: PPUSH
11398: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11402: LD_INT 1
11404: PPUSH
11405: LD_EXP 34
11409: PPUSH
11410: CALL_OW 292
11414: PUSH
11415: LD_EXP 34
11419: PPUSH
11420: LD_INT 7
11422: PPUSH
11423: CALL_OW 296
11427: PUSH
11428: LD_INT 7
11430: LESS
11431: OR
11432: IFFALSE 11395
// DialogueOn ;
11434: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11438: LD_EXP 34
11442: PPUSH
11443: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11447: LD_INT 10
11449: PPUSH
11450: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11454: LD_EXP 34
11458: PPUSH
11459: LD_STRING D4Ya-Yam-1
11461: PPUSH
11462: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11466: LD_EXP 21
11470: PPUSH
11471: LD_STRING D4Ya-JMM-1
11473: PPUSH
11474: CALL_OW 88
// for i in points do
11478: LD_ADDR_VAR 0 1
11482: PUSH
11483: LD_VAR 0 2
11487: PUSH
11488: FOR_IN
11489: IFFALSE 11547
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11491: LD_VAR 0 1
11495: PUSH
11496: LD_INT 1
11498: ARRAY
11499: PPUSH
11500: LD_VAR 0 1
11504: PUSH
11505: LD_INT 2
11507: ARRAY
11508: PPUSH
11509: LD_INT 1
11511: PPUSH
11512: LD_INT 20
11514: NEG
11515: PPUSH
11516: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11520: LD_VAR 0 1
11524: PUSH
11525: LD_INT 1
11527: ARRAY
11528: PPUSH
11529: LD_VAR 0 1
11533: PUSH
11534: LD_INT 2
11536: ARRAY
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 331
// end ;
11545: GO 11488
11547: POP
11548: POP
// dwait ( 0 0$0.5 ) ;
11549: LD_INT 18
11551: PPUSH
11552: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11556: LD_INT 42
11558: PPUSH
11559: LD_INT 27
11561: PPUSH
11562: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11566: LD_EXP 34
11570: PPUSH
11571: LD_STRING D4Ya-Yam-2
11573: PPUSH
11574: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11578: LD_INT 18
11580: PPUSH
11581: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11585: LD_INT 118
11587: PPUSH
11588: LD_INT 80
11590: PPUSH
11591: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11595: LD_EXP 21
11599: PPUSH
11600: LD_STRING D4Ya-JMM-2
11602: PPUSH
11603: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11607: LD_EXP 34
11611: PPUSH
11612: LD_STRING D4Ya-Yam-3
11614: PPUSH
11615: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11619: LD_INT 10
11621: PPUSH
11622: CALL_OW 68
// DialogueOff ;
11626: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11630: LD_EXP 34
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 235
// end else
11642: GO 11896
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11644: LD_INT 2
11646: PPUSH
11647: LD_INT 4
11649: PPUSH
11650: LD_INT 2
11652: PPUSH
11653: LD_INT 1
11655: PPUSH
11656: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11660: LD_EXP 34
11664: PPUSH
11665: LD_INT 75
11667: PPUSH
11668: LD_INT 63
11670: PPUSH
11671: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11675: LD_EXP 34
11679: PPUSH
11680: LD_INT 175
11682: PPUSH
11683: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11687: LD_EXP 34
11691: PPUSH
11692: LD_INT 102
11694: PPUSH
11695: LD_INT 76
11697: PPUSH
11698: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11702: LD_EXP 34
11706: PPUSH
11707: LD_INT 108
11709: PPUSH
11710: LD_INT 70
11712: PPUSH
11713: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11717: LD_INT 35
11719: PPUSH
11720: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11724: LD_INT 2
11726: PPUSH
11727: LD_EXP 34
11731: PPUSH
11732: CALL_OW 292
11736: IFFALSE 11717
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11738: LD_EXP 34
11742: PPUSH
11743: LD_INT 112
11745: PPUSH
11746: LD_INT 118
11748: PPUSH
11749: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11753: LD_EXP 34
11757: PPUSH
11758: CALL_OW 256
11762: PUSH
11763: LD_INT 750
11765: GREATEREQUAL
11766: IFFALSE 11780
// SetLives ( Kikuchi , 700 ) ;
11768: LD_EXP 34
11772: PPUSH
11773: LD_INT 700
11775: PPUSH
11776: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11780: LD_INT 35
11782: PPUSH
11783: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11787: LD_INT 1
11789: PPUSH
11790: LD_EXP 34
11794: PPUSH
11795: CALL_OW 292
11799: PUSH
11800: LD_EXP 34
11804: PPUSH
11805: LD_INT 7
11807: PPUSH
11808: CALL_OW 296
11812: PUSH
11813: LD_INT 17
11815: LESS
11816: OR
11817: IFFALSE 11780
// DialogueOn ;
11819: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11823: LD_EXP 34
11827: PPUSH
11828: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11832: LD_EXP 34
11836: PPUSH
11837: LD_STRING D4Yb-Yam-1
11839: PPUSH
11840: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11844: LD_EXP 21
11848: PPUSH
11849: LD_STRING D4Yb-JMM-1
11851: PPUSH
11852: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11856: LD_EXP 34
11860: PPUSH
11861: LD_STRING D4Yb-Yam-2
11863: PPUSH
11864: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11868: LD_EXP 21
11872: PPUSH
11873: LD_STRING D4Yb-JMM-2
11875: PPUSH
11876: CALL_OW 88
// DialogueOff ;
11880: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11884: LD_EXP 34
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 235
// end ; end ; end ;
11896: PPOPN 2
11898: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11899: LD_EXP 6
11903: IFFALSE 12936
11905: GO 11907
11907: DISABLE
11908: LD_INT 0
11910: PPUSH
11911: PPUSH
11912: PPUSH
11913: PPUSH
// begin enable ;
11914: ENABLE
// if not seen [ 1 ] then
11915: LD_EXP 9
11919: PUSH
11920: LD_INT 1
11922: ARRAY
11923: NOT
11924: IFFALSE 12104
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11926: LD_ADDR_VAR 0 2
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_INT 2
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 25
11946: PUSH
11947: LD_INT 11
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 33
11956: PUSH
11957: LD_INT 4
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 69
11977: ST_TO_ADDR
// if tmp then
11978: LD_VAR 0 2
11982: IFFALSE 12104
// for i in tmp do
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_VAR 0 2
11993: PUSH
11994: FOR_IN
11995: IFFALSE 12102
// if See ( 1 , i ) then
11997: LD_INT 1
11999: PPUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 292
12009: IFFALSE 12100
// begin seen := Replace ( seen , 1 , true ) ;
12011: LD_ADDR_EXP 9
12015: PUSH
12016: LD_EXP 9
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: CALL_OW 1
12031: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12032: LD_INT 1
12034: PPUSH
12035: CALL 15366 0 1
12039: IFFALSE 12100
// begin DialogueOn ;
12041: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12054: LD_INT 10
12056: PPUSH
12057: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12061: LD_ADDR_VAR 0 3
12065: PUSH
12066: LD_INT 1
12068: PPUSH
12069: LD_STRING D5a-Sol2-1
12071: PPUSH
12072: CALL 15544 0 2
12076: ST_TO_ADDR
// if not un then
12077: LD_VAR 0 3
12081: NOT
12082: IFFALSE 12094
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12084: LD_INT 2
12086: PPUSH
12087: LD_STRING D5a-FSol2-1
12089: PPUSH
12090: CALL 15544 0 2
// DialogueOff ;
12094: CALL_OW 7
// break ;
12098: GO 12102
// end ; end ;
12100: GO 11994
12102: POP
12103: POP
// end ; if not seen [ 2 ] then
12104: LD_EXP 9
12108: PUSH
12109: LD_INT 2
12111: ARRAY
12112: NOT
12113: IFFALSE 12338
// begin can_kamikazed := true ;
12115: LD_ADDR_EXP 10
12119: PUSH
12120: LD_INT 1
12122: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_INT 22
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 25
12140: PUSH
12141: LD_INT 17
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PPUSH
12152: CALL_OW 69
12156: ST_TO_ADDR
// if tmp then
12157: LD_VAR 0 2
12161: IFFALSE 12338
// for i in tmp do
12163: LD_ADDR_VAR 0 1
12167: PUSH
12168: LD_VAR 0 2
12172: PUSH
12173: FOR_IN
12174: IFFALSE 12336
// if See ( 1 , i ) then
12176: LD_INT 1
12178: PPUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 292
12188: IFFALSE 12334
// begin seen := Replace ( seen , 2 , true ) ;
12190: LD_ADDR_EXP 9
12194: PUSH
12195: LD_EXP 9
12199: PPUSH
12200: LD_INT 2
12202: PPUSH
12203: LD_INT 1
12205: PPUSH
12206: CALL_OW 1
12210: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12211: LD_INT 1
12213: PPUSH
12214: CALL 15366 0 1
12218: IFFALSE 12334
// begin DialogueOn ;
12220: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12224: LD_VAR 0 1
12228: PPUSH
12229: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12233: LD_INT 10
12235: PPUSH
12236: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12240: LD_ADDR_VAR 0 3
12244: PUSH
12245: LD_INT 1
12247: PPUSH
12248: LD_STRING D5b-Sol1-1
12250: PPUSH
12251: CALL 15544 0 2
12255: ST_TO_ADDR
// if not un then
12256: LD_VAR 0 3
12260: NOT
12261: IFFALSE 12279
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12263: LD_ADDR_VAR 0 3
12267: PUSH
12268: LD_INT 2
12270: PPUSH
12271: LD_STRING D5b-FSol1-1
12273: PPUSH
12274: CALL 15544 0 2
12278: ST_TO_ADDR
// if un then
12279: LD_VAR 0 3
12283: IFFALSE 12328
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12285: LD_ADDR_VAR 0 4
12289: PUSH
12290: LD_INT 1
12292: PPUSH
12293: LD_STRING D5b-Sol2-1
12295: PPUSH
12296: LD_VAR 0 3
12300: PPUSH
12301: CALL 15770 0 3
12305: ST_TO_ADDR
// if not un2 then
12306: LD_VAR 0 4
12310: NOT
12311: IFFALSE 12328
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12313: LD_INT 2
12315: PPUSH
12316: LD_STRING D5b-FSol2-1
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: CALL 15770 0 3
// end ; DialogueOff ;
12328: CALL_OW 7
// break ;
12332: GO 12336
// end ; end ;
12334: GO 12173
12336: POP
12337: POP
// end ; if not seen [ 3 ] then
12338: LD_EXP 9
12342: PUSH
12343: LD_INT 3
12345: ARRAY
12346: NOT
12347: IFFALSE 12521
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12349: LD_ADDR_VAR 0 2
12353: PUSH
12354: LD_INT 22
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 33
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: ST_TO_ADDR
// if tmp then
12383: LD_VAR 0 2
12387: IFFALSE 12521
// for i in tmp do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: LD_VAR 0 2
12398: PUSH
12399: FOR_IN
12400: IFFALSE 12519
// if See ( 1 , i ) then
12402: LD_INT 1
12404: PPUSH
12405: LD_VAR 0 1
12409: PPUSH
12410: CALL_OW 292
12414: IFFALSE 12517
// begin seen := Replace ( seen , 3 , true ) ;
12416: LD_ADDR_EXP 9
12420: PUSH
12421: LD_EXP 9
12425: PPUSH
12426: LD_INT 3
12428: PPUSH
12429: LD_INT 1
12431: PPUSH
12432: CALL_OW 1
12436: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12437: LD_INT 1
12439: PPUSH
12440: CALL 15366 0 1
12444: IFFALSE 12517
// begin DialogueOn ;
12446: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12459: LD_INT 10
12461: PPUSH
12462: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: LD_INT 1
12473: PPUSH
12474: LD_STRING D8-Sol1-1
12476: PPUSH
12477: CALL 15544 0 2
12481: ST_TO_ADDR
// if not un then
12482: LD_VAR 0 3
12486: NOT
12487: IFFALSE 12499
// SayRand ( sex_female , D8-FSol1-1 ) ;
12489: LD_INT 2
12491: PPUSH
12492: LD_STRING D8-FSol1-1
12494: PPUSH
12495: CALL 15544 0 2
// Say ( JMM , D8-JMM-1 ) ;
12499: LD_EXP 21
12503: PPUSH
12504: LD_STRING D8-JMM-1
12506: PPUSH
12507: CALL_OW 88
// DialogueOff ;
12511: CALL_OW 7
// break ;
12515: GO 12519
// end ; end ;
12517: GO 12399
12519: POP
12520: POP
// end ; if not seen [ 4 ] then
12521: LD_EXP 9
12525: PUSH
12526: LD_INT 4
12528: ARRAY
12529: NOT
12530: IFFALSE 12692
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_INT 22
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 33
12549: PUSH
12550: LD_INT 5
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PPUSH
12561: CALL_OW 69
12565: ST_TO_ADDR
// if tmp then
12566: LD_VAR 0 2
12570: IFFALSE 12692
// for i in tmp do
12572: LD_ADDR_VAR 0 1
12576: PUSH
12577: LD_VAR 0 2
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12690
// if See ( 1 , i ) then
12585: LD_INT 1
12587: PPUSH
12588: LD_VAR 0 1
12592: PPUSH
12593: CALL_OW 292
12597: IFFALSE 12688
// begin seen := Replace ( seen , 4 , true ) ;
12599: LD_ADDR_EXP 9
12603: PUSH
12604: LD_EXP 9
12608: PPUSH
12609: LD_INT 4
12611: PPUSH
12612: LD_INT 1
12614: PPUSH
12615: CALL_OW 1
12619: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12620: LD_INT 1
12622: PPUSH
12623: CALL 15366 0 1
12627: IFFALSE 12688
// begin DialogueOn ;
12629: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12633: LD_VAR 0 1
12637: PPUSH
12638: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12642: LD_INT 10
12644: PPUSH
12645: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12649: LD_ADDR_VAR 0 3
12653: PUSH
12654: LD_INT 1
12656: PPUSH
12657: LD_STRING D5a-Sol1-1
12659: PPUSH
12660: CALL 15544 0 2
12664: ST_TO_ADDR
// if not un then
12665: LD_VAR 0 3
12669: NOT
12670: IFFALSE 12682
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12672: LD_INT 2
12674: PPUSH
12675: LD_STRING D5a-FSol1-1
12677: PPUSH
12678: CALL 15544 0 2
// DialogueOff ;
12682: CALL_OW 7
// break ;
12686: GO 12690
// end ; end ;
12688: GO 12582
12690: POP
12691: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12692: LD_EXP 9
12696: PUSH
12697: LD_INT 5
12699: ARRAY
12700: NOT
12701: PUSH
12702: LD_EXP 9
12706: PUSH
12707: LD_INT 3
12709: ARRAY
12710: AND
12711: IFFALSE 12885
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_INT 22
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 34
12730: PUSH
12731: LD_INT 31
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 69
12746: ST_TO_ADDR
// if tmp then
12747: LD_VAR 0 2
12751: IFFALSE 12885
// for i in tmp do
12753: LD_ADDR_VAR 0 1
12757: PUSH
12758: LD_VAR 0 2
12762: PUSH
12763: FOR_IN
12764: IFFALSE 12883
// if See ( 1 , i ) then
12766: LD_INT 1
12768: PPUSH
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL_OW 292
12778: IFFALSE 12881
// begin seen := Replace ( seen , 5 , true ) ;
12780: LD_ADDR_EXP 9
12784: PUSH
12785: LD_EXP 9
12789: PPUSH
12790: LD_INT 5
12792: PPUSH
12793: LD_INT 1
12795: PPUSH
12796: CALL_OW 1
12800: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12801: LD_INT 1
12803: PPUSH
12804: CALL 15366 0 1
12808: IFFALSE 12881
// begin DialogueOn ;
12810: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12823: LD_INT 10
12825: PPUSH
12826: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: LD_INT 1
12837: PPUSH
12838: LD_STRING D8a-Sol2-1
12840: PPUSH
12841: CALL 15544 0 2
12845: ST_TO_ADDR
// if not un then
12846: LD_VAR 0 3
12850: NOT
12851: IFFALSE 12863
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12853: LD_INT 2
12855: PPUSH
12856: LD_STRING D8a-FSol2-1
12858: PPUSH
12859: CALL 15544 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12863: LD_EXP 21
12867: PPUSH
12868: LD_STRING D8a-JMM-1
12870: PPUSH
12871: CALL_OW 88
// DialogueOff ;
12875: CALL_OW 7
// break ;
12879: GO 12883
// end ; end ;
12881: GO 12763
12883: POP
12884: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12885: LD_EXP 9
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PUSH
12894: LD_EXP 9
12898: PUSH
12899: LD_INT 2
12901: ARRAY
12902: AND
12903: PUSH
12904: LD_EXP 9
12908: PUSH
12909: LD_INT 3
12911: ARRAY
12912: AND
12913: PUSH
12914: LD_EXP 9
12918: PUSH
12919: LD_INT 4
12921: ARRAY
12922: AND
12923: PUSH
12924: LD_EXP 9
12928: PUSH
12929: LD_INT 5
12931: ARRAY
12932: AND
12933: IFFALSE 12936
// disable ;
12935: DISABLE
// end ;
12936: PPOPN 4
12938: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12939: LD_EXP 10
12943: PUSH
12944: LD_EXP 11
12948: AND
12949: IFFALSE 13147
12951: GO 12953
12953: DISABLE
12954: LD_INT 0
12956: PPUSH
// begin DialogueOn ;
12957: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12961: LD_EXP 11
12965: PPUSH
12966: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12970: LD_ADDR_VAR 0 1
12974: PUSH
12975: LD_INT 1
12977: PPUSH
12978: LD_STRING D5c-Sol1-1
12980: PPUSH
12981: CALL 15544 0 2
12985: ST_TO_ADDR
// if not un then
12986: LD_VAR 0 1
12990: NOT
12991: IFFALSE 13009
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12993: LD_ADDR_VAR 0 1
12997: PUSH
12998: LD_INT 2
13000: PPUSH
13001: LD_STRING D5c-FSol1-1
13003: PPUSH
13004: CALL 15544 0 2
13008: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13009: LD_EXP 21
13013: PPUSH
13014: LD_STRING D5c-JMM-1
13016: PPUSH
13017: CALL_OW 88
// if IsOk ( Lisa ) then
13021: LD_EXP 22
13025: PPUSH
13026: CALL_OW 302
13030: IFFALSE 13046
// Say ( Lisa , D5d-Lisa-1 ) else
13032: LD_EXP 22
13036: PPUSH
13037: LD_STRING D5d-Lisa-1
13039: PPUSH
13040: CALL_OW 88
13044: GO 13131
// if IsOk ( Cyrus ) then
13046: LD_EXP 25
13050: PPUSH
13051: CALL_OW 302
13055: IFFALSE 13071
// Say ( Cyrus , D5d-Cyrus-1 ) else
13057: LD_EXP 25
13061: PPUSH
13062: LD_STRING D5d-Cyrus-1
13064: PPUSH
13065: CALL_OW 88
13069: GO 13131
// if IsOk ( Gary ) then
13071: LD_EXP 32
13075: PPUSH
13076: CALL_OW 302
13080: IFFALSE 13096
// Say ( Gary , D5d-Gary-1 ) else
13082: LD_EXP 32
13086: PPUSH
13087: LD_STRING D5d-Gary-1
13089: PPUSH
13090: CALL_OW 88
13094: GO 13131
// if GetSex ( un ) = sex_male then
13096: LD_VAR 0 1
13100: PPUSH
13101: CALL_OW 258
13105: PUSH
13106: LD_INT 1
13108: EQUAL
13109: IFFALSE 13125
// Say ( un , D5d-Sol1-1 ) else
13111: LD_VAR 0 1
13115: PPUSH
13116: LD_STRING D5d-Sol1-1
13118: PPUSH
13119: CALL_OW 88
13123: GO 13131
// begin DialogueOff ;
13125: CALL_OW 7
// exit ;
13129: GO 13147
// end ; Say ( JMM , D5d-JMM-1 ) ;
13131: LD_EXP 21
13135: PPUSH
13136: LD_STRING D5d-JMM-1
13138: PPUSH
13139: CALL_OW 88
// DialogueOff ;
13143: CALL_OW 7
// end ;
13147: PPOPN 1
13149: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13150: LD_INT 1
13152: PPUSH
13153: LD_INT 17
13155: PPUSH
13156: CALL_OW 294
13160: PUSH
13161: LD_INT 2
13163: GREATEREQUAL
13164: IFFALSE 13285
13166: GO 13168
13168: DISABLE
13169: LD_INT 0
13171: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13172: LD_INT 10
13174: PPUSH
13175: LD_INT 5
13177: PPUSH
13178: LD_INT 1
13180: PPUSH
13181: LD_INT 10
13183: NEG
13184: PPUSH
13185: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13189: LD_INT 10
13191: PPUSH
13192: LD_INT 5
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13202: LD_INT 10
13204: PPUSH
13205: LD_INT 5
13207: PPUSH
13208: CALL_OW 86
// DialogueOn ;
13212: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13216: LD_ADDR_VAR 0 1
13220: PUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_STRING D6-Sci1-1
13226: PPUSH
13227: CALL 15544 0 2
13231: ST_TO_ADDR
// if un then
13232: LD_VAR 0 1
13236: IFFALSE 13274
// begin Say ( JMM , D6-JMM-1 ) ;
13238: LD_EXP 21
13242: PPUSH
13243: LD_STRING D6-JMM-1
13245: PPUSH
13246: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13250: LD_VAR 0 1
13254: PPUSH
13255: LD_STRING D6-Sci1-2
13257: PPUSH
13258: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13262: LD_EXP 21
13266: PPUSH
13267: LD_STRING D6-JMM-2
13269: PPUSH
13270: CALL_OW 88
// end ; DialogueOff ;
13274: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13278: LD_STRING M3
13280: PPUSH
13281: CALL_OW 337
// end ;
13285: PPOPN 1
13287: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
13288: LD_OWVAR 1
13292: PUSH
13293: LD_INT 42000
13295: GREATEREQUAL
13296: PUSH
13297: LD_INT 2
13299: PPUSH
13300: LD_INT 169
13302: PPUSH
13303: LD_INT 90
13305: PPUSH
13306: LD_INT 10
13308: PPUSH
13309: CALL 52060 0 4
13313: PUSH
13314: LD_INT 4
13316: ARRAY
13317: PUSH
13318: LD_INT 0
13320: EQUAL
13321: PUSH
13322: LD_INT 45
13324: PPUSH
13325: CALL_OW 301
13329: OR
13330: PUSH
13331: LD_INT 45
13333: PPUSH
13334: CALL_OW 255
13338: PUSH
13339: LD_INT 1
13341: EQUAL
13342: OR
13343: AND
13344: PUSH
13345: LD_INT 94
13347: PPUSH
13348: CALL_OW 301
13352: NOT
13353: AND
13354: IFFALSE 14480
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
13362: PPUSH
13363: PPUSH
13364: PPUSH
// begin uc_side := 5 ;
13365: LD_ADDR_OWVAR 20
13369: PUSH
13370: LD_INT 5
13372: ST_TO_ADDR
// uc_nation := 2 ;
13373: LD_ADDR_OWVAR 21
13377: PUSH
13378: LD_INT 2
13380: ST_TO_ADDR
// InitHc ;
13381: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13385: LD_INT 1
13387: PPUSH
13388: LD_INT 3
13390: PPUSH
13391: LD_INT 8
13393: PPUSH
13394: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13398: LD_ADDR_OWVAR 29
13402: PUSH
13403: LD_INT 12
13405: PUSH
13406: LD_INT 12
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13413: LD_ADDR_OWVAR 33
13417: PUSH
13418: LD_STRING SecondCharsGal
13420: ST_TO_ADDR
// hc_face_number := 7 ;
13421: LD_ADDR_OWVAR 34
13425: PUSH
13426: LD_INT 7
13428: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13429: LD_ADDR_EXP 46
13433: PUSH
13434: CALL_OW 44
13438: ST_TO_ADDR
// InitHc ;
13439: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13443: LD_INT 1
13445: PPUSH
13446: LD_INT 16
13448: PPUSH
13449: LD_INT 2
13451: PPUSH
13452: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13456: LD_ADDR_OWVAR 29
13460: PUSH
13461: LD_INT 12
13463: PUSH
13464: LD_INT 12
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: ST_TO_ADDR
// hc_name :=  ;
13471: LD_ADDR_OWVAR 26
13475: PUSH
13476: LD_STRING 
13478: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13479: LD_ADDR_EXP 47
13483: PUSH
13484: CALL_OW 44
13488: ST_TO_ADDR
// InitHc ;
13489: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13493: LD_INT 35
13495: PPUSH
13496: CALL_OW 67
// until not InBattle ( 1 ) ;
13500: LD_INT 1
13502: PPUSH
13503: CALL_OW 463
13507: NOT
13508: IFFALSE 13493
// wait ( 0 0$5 ) ;
13510: LD_INT 175
13512: PPUSH
13513: CALL_OW 67
// DialogueOn ;
13517: CALL_OW 6
// InGameOn ;
13521: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13525: LD_ADDR_VAR 0 1
13529: PUSH
13530: LD_INT 22
13532: PUSH
13533: LD_INT 1
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: LD_INT 25
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 25
13555: PUSH
13556: LD_INT 2
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 3
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 25
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 5
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 25
13595: PUSH
13596: LD_INT 8
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PPUSH
13616: CALL_OW 69
13620: PUSH
13621: LD_EXP 21
13625: PUSH
13626: LD_EXP 22
13630: PUSH
13631: LD_EXP 23
13635: PUSH
13636: LD_EXP 24
13640: PUSH
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 26
13650: PUSH
13651: LD_EXP 27
13655: PUSH
13656: LD_EXP 28
13660: PUSH
13661: LD_EXP 29
13665: PUSH
13666: LD_EXP 31
13670: PUSH
13671: LD_EXP 32
13675: PUSH
13676: LD_EXP 33
13680: PUSH
13681: LD_EXP 34
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: DIFF
13701: PPUSH
13702: LD_INT 26
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PPUSH
13712: CALL_OW 72
13716: PUSH
13717: LD_INT 1
13719: ARRAY
13720: ST_TO_ADDR
// if not un and Brown then
13721: LD_VAR 0 1
13725: NOT
13726: PUSH
13727: LD_EXP 27
13731: AND
13732: IFFALSE 13744
// un := Brown ;
13734: LD_ADDR_VAR 0 1
13738: PUSH
13739: LD_EXP 27
13743: ST_TO_ADDR
// if un then
13744: LD_VAR 0 1
13748: IFFALSE 13774
// begin Say ( un , D7-Sol1-1 ) ;
13750: LD_VAR 0 1
13754: PPUSH
13755: LD_STRING D7-Sol1-1
13757: PPUSH
13758: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13762: LD_EXP 21
13766: PPUSH
13767: LD_STRING D7-JMM-1
13769: PPUSH
13770: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13774: LD_EXP 46
13778: PPUSH
13779: LD_STRING D7-Ar1-1
13781: PPUSH
13782: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13786: LD_EXP 21
13790: PPUSH
13791: LD_STRING D7-JMM-2
13793: PPUSH
13794: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13798: LD_EXP 46
13802: PPUSH
13803: LD_STRING D7-Ar1-2
13805: PPUSH
13806: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13810: LD_EXP 21
13814: PPUSH
13815: LD_STRING D7-JMM-3
13817: PPUSH
13818: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13822: LD_EXP 46
13826: PPUSH
13827: LD_STRING D7-Ar1-3
13829: PPUSH
13830: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13834: LD_EXP 21
13838: PPUSH
13839: LD_STRING D7-JMM-4
13841: PPUSH
13842: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13846: LD_EXP 46
13850: PPUSH
13851: LD_STRING D7-Ar1-4
13853: PPUSH
13854: CALL_OW 94
// InGameOff ;
13858: CALL_OW 9
// DialogueOff ;
13862: CALL_OW 7
// case Query ( QCameras ) of 1 :
13866: LD_STRING QCameras
13868: PPUSH
13869: CALL_OW 97
13873: PUSH
13874: LD_INT 1
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13885
13882: POP
// ; 2 :
13883: GO 13899
13885: LD_INT 2
13887: DOUBLE
13888: EQUAL
13889: IFTRUE 13893
13891: GO 13898
13893: POP
// exit ; end ;
13894: GO 14480
13896: GO 13899
13898: POP
// ChangeMissionObjectives ( MCar ) ;
13899: LD_STRING MCar
13901: PPUSH
13902: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13906: LD_INT 124
13908: PPUSH
13909: LD_INT 90
13911: PPUSH
13912: LD_INT 1
13914: PPUSH
13915: LD_INT 6
13917: NEG
13918: PPUSH
13919: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13923: LD_INT 124
13925: PPUSH
13926: LD_INT 90
13928: PPUSH
13929: LD_INT 1
13931: PPUSH
13932: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13936: LD_INT 12
13938: PPUSH
13939: LD_INT 1
13941: PPUSH
13942: CALL_OW 424
// wait ( 3 ) ;
13946: LD_INT 3
13948: PPUSH
13949: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13953: LD_INT 124
13955: PPUSH
13956: LD_INT 90
13958: PPUSH
13959: CALL_OW 86
// cargo := false ;
13963: LD_ADDR_VAR 0 3
13967: PUSH
13968: LD_INT 0
13970: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13971: LD_INT 35
13973: PPUSH
13974: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13978: LD_ADDR_VAR 0 3
13982: PUSH
13983: LD_INT 12
13985: PPUSH
13986: LD_INT 32
13988: PUSH
13989: LD_INT 3
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 34
13998: PUSH
13999: LD_INT 32
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: PUSH
14006: LD_INT 58
14008: PUSH
14009: EMPTY
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 70
14021: ST_TO_ADDR
// until cargo ;
14022: LD_VAR 0 3
14026: IFFALSE 13971
// cargo := cargo [ 1 ] ;
14028: LD_ADDR_VAR 0 3
14032: PUSH
14033: LD_VAR 0 3
14037: PUSH
14038: LD_INT 1
14040: ARRAY
14041: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14042: LD_VAR 0 3
14046: PPUSH
14047: LD_INT 5
14049: PPUSH
14050: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14054: LD_INT 12
14056: PPUSH
14057: LD_INT 0
14059: PPUSH
14060: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14064: LD_EXP 46
14068: PPUSH
14069: LD_INT 11
14071: PPUSH
14072: LD_INT 0
14074: PPUSH
14075: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14079: LD_EXP 47
14083: PPUSH
14084: LD_INT 11
14086: PPUSH
14087: LD_INT 0
14089: PPUSH
14090: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14094: LD_EXP 46
14098: PUSH
14099: LD_EXP 47
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PPUSH
14108: LD_INT 12
14110: PPUSH
14111: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14115: LD_EXP 46
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14129: LD_EXP 46
14133: PUSH
14134: LD_EXP 47
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PPUSH
14143: LD_INT 209
14145: PPUSH
14146: LD_INT 178
14148: PPUSH
14149: CALL_OW 171
// while ( true ) do
14153: LD_INT 1
14155: IFFALSE 14309
// begin wait ( 0 0$1 ) ;
14157: LD_INT 35
14159: PPUSH
14160: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14164: LD_EXP 46
14168: PPUSH
14169: CALL_OW 314
14173: NOT
14174: PUSH
14175: LD_EXP 47
14179: PPUSH
14180: CALL_OW 314
14184: NOT
14185: OR
14186: IFFALSE 14212
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14188: LD_EXP 46
14192: PUSH
14193: LD_EXP 47
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: LD_INT 209
14204: PPUSH
14205: LD_INT 178
14207: PPUSH
14208: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14212: LD_EXP 46
14216: PPUSH
14217: LD_INT 10
14219: PPUSH
14220: CALL_OW 308
14224: IFFALSE 14235
// RemoveUnit ( ar_mechanic ) ;
14226: LD_EXP 46
14230: PPUSH
14231: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
14235: LD_EXP 47
14239: PPUSH
14240: LD_INT 10
14242: PPUSH
14243: CALL_OW 308
14247: IFFALSE 14258
// RemoveUnit ( ar_mechanic_friend ) ;
14249: LD_EXP 47
14253: PPUSH
14254: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
14258: LD_VAR 0 3
14262: PPUSH
14263: LD_INT 10
14265: PPUSH
14266: CALL_OW 308
14270: IFFALSE 14281
// RemoveUnit ( cargo ) ;
14272: LD_VAR 0 3
14276: PPUSH
14277: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
14281: LD_EXP 46
14285: PPUSH
14286: CALL_OW 300
14290: NOT
14291: PUSH
14292: LD_EXP 47
14296: PPUSH
14297: CALL_OW 300
14301: NOT
14302: AND
14303: IFFALSE 14307
// break ;
14305: GO 14309
// end ;
14307: GO 14153
// wait ( 0 0$2 ) ;
14309: LD_INT 70
14311: PPUSH
14312: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14316: LD_EXP 46
14320: PPUSH
14321: LD_STRING D7a-Ar1-1
14323: PPUSH
14324: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14328: LD_ADDR_VAR 0 4
14332: PUSH
14333: LD_INT 129
14335: PUSH
14336: LD_INT 10
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 103
14345: PUSH
14346: LD_INT 6
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 148
14355: PUSH
14356: LD_INT 47
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 155
14365: PUSH
14366: LD_INT 16
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: ST_TO_ADDR
// if Difficulty = 1 then
14379: LD_OWVAR 67
14383: PUSH
14384: LD_INT 1
14386: EQUAL
14387: IFFALSE 14424
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14389: LD_ADDR_VAR 0 4
14393: PUSH
14394: LD_VAR 0 4
14398: PUSH
14399: LD_INT 78
14401: PUSH
14402: LD_INT 7
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 104
14411: PUSH
14412: LD_INT 43
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: ADD
14423: ST_TO_ADDR
// for i in tmp do
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_VAR 0 4
14433: PUSH
14434: FOR_IN
14435: IFFALSE 14468
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14437: LD_VAR 0 2
14441: PUSH
14442: LD_INT 1
14444: ARRAY
14445: PPUSH
14446: LD_VAR 0 2
14450: PUSH
14451: LD_INT 2
14453: ARRAY
14454: PPUSH
14455: LD_INT 1
14457: PPUSH
14458: LD_INT 9
14460: NEG
14461: PPUSH
14462: CALL_OW 330
14466: GO 14434
14468: POP
14469: POP
// CenterOnXY ( 129 , 10 ) ;
14470: LD_INT 129
14472: PPUSH
14473: LD_INT 10
14475: PPUSH
14476: CALL_OW 84
// end ;
14480: PPOPN 4
14482: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14483: LD_EXP 15
14487: PUSH
14488: LD_INT 21000
14490: MINUS
14491: PUSH
14492: LD_OWVAR 1
14496: LESSEQUAL
14497: IFFALSE 14537
14499: GO 14501
14501: DISABLE
// begin powell_warn := true ;
14502: LD_ADDR_EXP 16
14506: PUSH
14507: LD_INT 1
14509: ST_TO_ADDR
// DialogueOn ;
14510: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14514: LD_EXP 30
14518: PPUSH
14519: LD_STRING D9-Pow-1
14521: PPUSH
14522: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14526: LD_INT 10
14528: PPUSH
14529: CALL_OW 68
// DialogueOff ;
14533: CALL_OW 7
// end ;
14537: END
// every 0 0$1 trigger game_time <= tick do
14538: LD_EXP 15
14542: PUSH
14543: LD_OWVAR 1
14547: LESSEQUAL
14548: IFFALSE 14587
14550: GO 14552
14552: DISABLE
// begin DialogueOn ;
14553: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14557: LD_EXP 30
14561: PPUSH
14562: LD_STRING D9a-Pow-1
14564: PPUSH
14565: CALL_OW 94
// dwait ( 0 0$2 ) ;
14569: LD_INT 70
14571: PPUSH
14572: CALL_OW 68
// DialogueOff ;
14576: CALL_OW 7
// YouLost ( Command ) ;
14580: LD_STRING Command
14582: PPUSH
14583: CALL_OW 104
// end ;
14587: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14588: LD_INT 22
14590: PUSH
14591: LD_INT 2
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: LD_INT 30
14600: PUSH
14601: LD_INT 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: PUSH
14617: LD_INT 0
14619: EQUAL
14620: PUSH
14621: LD_EXP 21
14625: PPUSH
14626: CALL_OW 302
14630: AND
14631: IFFALSE 15363
14633: GO 14635
14635: DISABLE
14636: LD_INT 0
14638: PPUSH
// begin if tick < [ 95 95$00 , 85 85$00 , 80 80$00 ] [ Difficulty ] then
14639: LD_OWVAR 1
14643: PUSH
14644: LD_INT 199500
14646: PUSH
14647: LD_INT 178500
14649: PUSH
14650: LD_INT 168000
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: LD_OWVAR 67
14662: ARRAY
14663: LESS
14664: IFFALSE 14678
// AddMedal ( Time1 , 1 ) else
14666: LD_STRING Time1
14668: PPUSH
14669: LD_INT 1
14671: PPUSH
14672: CALL_OW 101
14676: GO 14709
// if not powell_warn then
14678: LD_EXP 16
14682: NOT
14683: IFFALSE 14698
// AddMedal ( Time1 , - 1 ) else
14685: LD_STRING Time1
14687: PPUSH
14688: LD_INT 1
14690: NEG
14691: PPUSH
14692: CALL_OW 101
14696: GO 14709
// AddMedal ( Time1 , - 2 ) ;
14698: LD_STRING Time1
14700: PPUSH
14701: LD_INT 2
14703: NEG
14704: PPUSH
14705: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14709: LD_EXP 17
14713: PUSH
14714: LD_INT 5
14716: PUSH
14717: LD_INT 4
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: LD_OWVAR 67
14732: ARRAY
14733: GREATEREQUAL
14734: IFFALSE 14749
// AddMedal ( Destroy , - 2 ) else
14736: LD_STRING Destroy
14738: PPUSH
14739: LD_INT 2
14741: NEG
14742: PPUSH
14743: CALL_OW 101
14747: GO 14866
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14749: LD_INT 22
14751: PUSH
14752: LD_INT 2
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 3
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 50
14771: PUSH
14772: EMPTY
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PUSH
14785: LD_INT 25
14787: GREATEREQUAL
14788: IFFALSE 14803
// AddMedal ( Destroy , - 1 ) else
14790: LD_STRING Destroy
14792: PPUSH
14793: LD_INT 1
14795: NEG
14796: PPUSH
14797: CALL_OW 101
14801: GO 14866
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14803: LD_INT 22
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 21
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 50
14825: PUSH
14826: EMPTY
14827: LIST
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 69
14838: PUSH
14839: LD_INT 15
14841: GREATEREQUAL
14842: IFFALSE 14856
// AddMedal ( Destroy , 1 ) else
14844: LD_STRING Destroy
14846: PPUSH
14847: LD_INT 1
14849: PPUSH
14850: CALL_OW 101
14854: GO 14866
// AddMedal ( Destroy , 2 ) ;
14856: LD_STRING Destroy
14858: PPUSH
14859: LD_INT 2
14861: PPUSH
14862: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14866: LD_EXP 13
14870: PPUSH
14871: LD_STRING 11_artifact_captured
14873: PPUSH
14874: CALL_OW 39
// if artifact_get then
14878: LD_EXP 13
14882: IFFALSE 14896
// AddMedal ( Artefact , 1 ) else
14884: LD_STRING Artefact
14886: PPUSH
14887: LD_INT 1
14889: PPUSH
14890: CALL_OW 101
14894: GO 14907
// AddMedal ( Artefact , - 1 ) ;
14896: LD_STRING Artefact
14898: PPUSH
14899: LD_INT 1
14901: NEG
14902: PPUSH
14903: CALL_OW 101
// GiveMedals ( MAIN ) ;
14907: LD_STRING MAIN
14909: PPUSH
14910: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14914: LD_ADDR_EXP 20
14918: PUSH
14919: LD_EXP 20
14923: PPUSH
14924: LD_INT 51
14926: PUSH
14927: EMPTY
14928: LIST
14929: PPUSH
14930: CALL_OW 72
14934: ST_TO_ADDR
// tmp := JMM ^ selected ;
14935: LD_ADDR_VAR 0 1
14939: PUSH
14940: LD_EXP 21
14944: PUSH
14945: LD_EXP 20
14949: ADD
14950: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14960: LD_VAR 0 1
14964: PUSH
14965: LD_EXP 21
14969: PUSH
14970: LD_EXP 22
14974: PUSH
14975: LD_EXP 23
14979: PUSH
14980: LD_EXP 24
14984: PUSH
14985: LD_EXP 25
14989: PUSH
14990: LD_EXP 26
14994: PUSH
14995: LD_EXP 27
14999: PUSH
15000: LD_EXP 28
15004: PUSH
15005: LD_EXP 29
15009: PUSH
15010: LD_EXP 31
15014: PUSH
15015: LD_EXP 32
15019: PUSH
15020: LD_EXP 33
15024: PUSH
15025: LD_EXP 34
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: DIFF
15045: PPUSH
15046: LD_STRING 11c_others
15048: PPUSH
15049: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15053: LD_EXP 21
15057: PPUSH
15058: LD_EXP 3
15062: PUSH
15063: LD_STRING JMM
15065: STR
15066: PPUSH
15067: CALL_OW 38
// if Lisa then
15071: LD_EXP 22
15075: IFFALSE 15095
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15077: LD_EXP 22
15081: PPUSH
15082: LD_EXP 3
15086: PUSH
15087: LD_STRING Lisa
15089: STR
15090: PPUSH
15091: CALL_OW 38
// if Donaldson then
15095: LD_EXP 23
15099: IFFALSE 15119
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15101: LD_EXP 23
15105: PPUSH
15106: LD_EXP 3
15110: PUSH
15111: LD_STRING Donaldson
15113: STR
15114: PPUSH
15115: CALL_OW 38
// if Bobby then
15119: LD_EXP 24
15123: IFFALSE 15143
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15125: LD_EXP 24
15129: PPUSH
15130: LD_EXP 3
15134: PUSH
15135: LD_STRING Bobby
15137: STR
15138: PPUSH
15139: CALL_OW 38
// if Cyrus then
15143: LD_EXP 25
15147: IFFALSE 15167
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15149: LD_EXP 25
15153: PPUSH
15154: LD_EXP 3
15158: PUSH
15159: LD_STRING Cyrus
15161: STR
15162: PPUSH
15163: CALL_OW 38
// if Denis then
15167: LD_EXP 26
15171: IFFALSE 15191
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15173: LD_EXP 26
15177: PPUSH
15178: LD_EXP 3
15182: PUSH
15183: LD_STRING Denis
15185: STR
15186: PPUSH
15187: CALL_OW 38
// if Brown then
15191: LD_EXP 27
15195: IFFALSE 15215
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15197: LD_EXP 27
15201: PPUSH
15202: LD_EXP 3
15206: PUSH
15207: LD_STRING Brown
15209: STR
15210: PPUSH
15211: CALL_OW 38
// if Gladstone then
15215: LD_EXP 28
15219: IFFALSE 15239
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15221: LD_EXP 28
15225: PPUSH
15226: LD_EXP 3
15230: PUSH
15231: LD_STRING Gladstone
15233: STR
15234: PPUSH
15235: CALL_OW 38
// if Houten then
15239: LD_EXP 29
15243: IFFALSE 15263
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15245: LD_EXP 29
15249: PPUSH
15250: LD_EXP 3
15254: PUSH
15255: LD_STRING Houten
15257: STR
15258: PPUSH
15259: CALL_OW 38
// if Cornel then
15263: LD_EXP 31
15267: IFFALSE 15287
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
15269: LD_EXP 31
15273: PPUSH
15274: LD_EXP 3
15278: PUSH
15279: LD_STRING Cornel
15281: STR
15282: PPUSH
15283: CALL_OW 38
// if Gary then
15287: LD_EXP 32
15291: IFFALSE 15311
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15293: LD_EXP 32
15297: PPUSH
15298: LD_EXP 3
15302: PUSH
15303: LD_STRING Gary
15305: STR
15306: PPUSH
15307: CALL_OW 38
// if Frank then
15311: LD_EXP 33
15315: IFFALSE 15335
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15317: LD_EXP 33
15321: PPUSH
15322: LD_EXP 3
15326: PUSH
15327: LD_STRING Frank
15329: STR
15330: PPUSH
15331: CALL_OW 38
// if Kikuchi then
15335: LD_EXP 34
15339: IFFALSE 15359
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15341: LD_EXP 34
15345: PPUSH
15346: LD_EXP 3
15350: PUSH
15351: LD_STRING Kikuchi
15353: STR
15354: PPUSH
15355: CALL_OW 38
// YouWin ;
15359: CALL_OW 103
// end ;
15363: PPOPN 1
15365: END
// export function CanSayRand ( side ) ; begin
15366: LD_INT 0
15368: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15369: LD_ADDR_VAR 0 2
15373: PUSH
15374: LD_INT 52
15376: PUSH
15377: EMPTY
15378: LIST
15379: PUSH
15380: LD_INT 22
15382: PUSH
15383: LD_VAR 0 1
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: LD_INT 25
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: LD_INT 25
15407: PUSH
15408: LD_INT 2
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 25
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PUSH
15425: LD_INT 25
15427: PUSH
15428: LD_INT 4
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: PPUSH
15447: CALL_OW 69
15451: PUSH
15452: LD_EXP 21
15456: PUSH
15457: LD_EXP 33
15461: PUSH
15462: LD_EXP 22
15466: PUSH
15467: LD_EXP 23
15471: PUSH
15472: LD_EXP 24
15476: PUSH
15477: LD_EXP 25
15481: PUSH
15482: LD_EXP 26
15486: PUSH
15487: LD_EXP 27
15491: PUSH
15492: LD_EXP 28
15496: PUSH
15497: LD_EXP 29
15501: PUSH
15502: LD_EXP 30
15506: PUSH
15507: LD_EXP 31
15511: PUSH
15512: LD_EXP 32
15516: PUSH
15517: LD_EXP 34
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: DIFF
15538: ST_TO_ADDR
// end ;
15539: LD_VAR 0 2
15543: RET
// export function SayRand ( sex , dial ) ; begin
15544: LD_INT 0
15546: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_INT 52
15554: PUSH
15555: EMPTY
15556: LIST
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_INT 1
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PUSH
15568: LD_INT 26
15570: PUSH
15571: LD_VAR 0 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: LD_INT 25
15585: PUSH
15586: LD_INT 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 25
15605: PUSH
15606: LD_INT 3
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 25
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: EMPTY
15620: LIST
15621: LIST
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 69
15640: PUSH
15641: LD_EXP 21
15645: PUSH
15646: LD_EXP 33
15650: PUSH
15651: LD_EXP 22
15655: PUSH
15656: LD_EXP 23
15660: PUSH
15661: LD_EXP 24
15665: PUSH
15666: LD_EXP 25
15670: PUSH
15671: LD_EXP 26
15675: PUSH
15676: LD_EXP 27
15680: PUSH
15681: LD_EXP 28
15685: PUSH
15686: LD_EXP 29
15690: PUSH
15691: LD_EXP 30
15695: PUSH
15696: LD_EXP 31
15700: PUSH
15701: LD_EXP 32
15705: PUSH
15706: LD_EXP 34
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: DIFF
15727: ST_TO_ADDR
// if not result then
15728: LD_VAR 0 3
15732: NOT
15733: IFFALSE 15737
// exit ;
15735: GO 15765
// result := result [ 1 ] ;
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: LD_VAR 0 3
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: ST_TO_ADDR
// Say ( result , dial ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_VAR 0 2
15760: PPUSH
15761: CALL_OW 88
// end ;
15765: LD_VAR 0 3
15769: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15770: LD_INT 0
15772: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15773: LD_ADDR_VAR 0 4
15777: PUSH
15778: LD_INT 22
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 26
15790: PUSH
15791: LD_VAR 0 1
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: LD_INT 25
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 25
15815: PUSH
15816: LD_INT 2
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: LD_INT 25
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 25
15835: PUSH
15836: LD_INT 4
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PUSH
15860: LD_EXP 21
15864: PUSH
15865: LD_EXP 33
15869: PUSH
15870: LD_EXP 22
15874: PUSH
15875: LD_EXP 23
15879: PUSH
15880: LD_EXP 24
15884: PUSH
15885: LD_EXP 25
15889: PUSH
15890: LD_EXP 26
15894: PUSH
15895: LD_EXP 27
15899: PUSH
15900: LD_EXP 28
15904: PUSH
15905: LD_EXP 29
15909: PUSH
15910: LD_EXP 30
15914: PUSH
15915: LD_EXP 31
15919: PUSH
15920: LD_EXP 32
15924: PUSH
15925: LD_EXP 34
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: PUSH
15946: LD_VAR 0 3
15950: ADD
15951: DIFF
15952: ST_TO_ADDR
// if not result then
15953: LD_VAR 0 4
15957: NOT
15958: IFFALSE 15962
// exit ;
15960: GO 15990
// result := result [ 1 ] ;
15962: LD_ADDR_VAR 0 4
15966: PUSH
15967: LD_VAR 0 4
15971: PUSH
15972: LD_INT 1
15974: ARRAY
15975: ST_TO_ADDR
// Say ( result , dial ) ;
15976: LD_VAR 0 4
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 88
// end ; end_of_file
15990: LD_VAR 0 4
15994: RET
// export function CustomEvent ( event ) ; begin
15995: LD_INT 0
15997: PPUSH
// end ;
15998: LD_VAR 0 2
16002: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 255
16012: PUSH
16013: LD_INT 1
16015: EQUAL
16016: IFFALSE 16026
// artifact_get := true ;
16018: LD_ADDR_EXP 13
16022: PUSH
16023: LD_INT 1
16025: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16026: LD_VAR 0 1
16030: PPUSH
16031: CALL_OW 255
16035: PUSH
16036: LD_INT 2
16038: EQUAL
16039: IFFALSE 16057
// begin artifact_get := false ;
16041: LD_ADDR_EXP 13
16045: PUSH
16046: LD_INT 0
16048: ST_TO_ADDR
// artifact_stolen := true ;
16049: LD_ADDR_EXP 12
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16057: LD_ADDR_EXP 14
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// end ;
16065: PPOPN 2
16067: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16068: LD_ADDR_EXP 14
16072: PUSH
16073: LD_INT 0
16075: ST_TO_ADDR
// end ;
16076: PPOPN 2
16078: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16079: LD_VAR 0 1
16083: PUSH
16084: LD_EXP 21
16088: EQUAL
16089: IFFALSE 16100
// begin YouLost ( JMM ) ;
16091: LD_STRING JMM
16093: PPUSH
16094: CALL_OW 104
// exit ;
16098: GO 16232
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16100: LD_VAR 0 1
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 21
16117: PUSH
16118: LD_INT 1
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 2
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 25
16140: PUSH
16141: LD_INT 2
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 25
16150: PUSH
16151: LD_INT 3
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 25
16160: PUSH
16161: LD_INT 4
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 25
16170: PUSH
16171: LD_INT 5
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 25
16180: PUSH
16181: LD_INT 8
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: IN
16207: IFFALSE 16223
// loses_counter := loses_counter + 1 ;
16209: LD_ADDR_EXP 17
16213: PUSH
16214: LD_EXP 17
16218: PUSH
16219: LD_INT 1
16221: PLUS
16222: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16223: LD_VAR 0 1
16227: PPUSH
16228: CALL 41885 0 1
// end ;
16232: PPOPN 1
16234: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16235: LD_VAR 0 1
16239: PPUSH
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL 43791 0 2
// end ;
16249: PPOPN 2
16251: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: CALL 43100 0 1
// end ;
16261: PPOPN 1
16263: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_VAR 0 2
16273: PPUSH
16274: LD_VAR 0 3
16278: PPUSH
16279: LD_VAR 0 4
16283: PPUSH
16284: LD_VAR 0 5
16288: PPUSH
16289: CALL 41201 0 5
// end ;
16293: PPOPN 5
16295: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: LD_VAR 0 2
16305: PPUSH
16306: CALL 40791 0 2
// end ;
16310: PPOPN 2
16312: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16313: LD_VAR 0 1
16317: PPUSH
16318: CALL_OW 247
16322: PUSH
16323: LD_INT 2
16325: EQUAL
16326: IFFALSE 16330
// exit ;
16328: GO 16347
// if not kamikazed then
16330: LD_EXP 11
16334: NOT
16335: IFFALSE 16347
// kamikazed := unit ;
16337: LD_ADDR_EXP 11
16341: PUSH
16342: LD_VAR 0 1
16346: ST_TO_ADDR
// end ;
16347: PPOPN 1
16349: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
16350: LD_INT 0
16352: PPUSH
16353: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
16354: LD_VAR 0 1
16358: PPUSH
16359: LD_VAR 0 2
16363: PPUSH
16364: LD_VAR 0 3
16368: PPUSH
16369: LD_VAR 0 4
16373: PPUSH
16374: CALL 40629 0 4
// end ;
16378: PPOPN 6
16380: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
16381: LD_VAR 0 1
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL 40404 0 3
// end ;
16400: PPOPN 3
16402: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: CALL 41581 0 2
// end ;
16417: PPOPN 2
16419: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16420: LD_VAR 0 1
16424: PPUSH
16425: LD_VAR 0 2
16429: PPUSH
16430: CALL 40098 0 2
// end ;
16434: PPOPN 2
16436: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16437: LD_VAR 0 1
16441: PPUSH
16442: LD_VAR 0 2
16446: PPUSH
16447: CALL 40289 0 2
// end ;
16451: PPOPN 2
16453: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL 42859 0 1
// end ;
16463: PPOPN 1
16465: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16466: LD_VAR 0 1
16470: PPUSH
16471: LD_VAR 0 2
16475: PPUSH
16476: CALL 44052 0 2
// end ;
16480: PPOPN 2
16482: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16483: LD_VAR 0 1
16487: PPUSH
16488: LD_VAR 0 2
16492: PPUSH
16493: LD_VAR 0 3
16497: PPUSH
16498: LD_VAR 0 4
16502: PPUSH
16503: CALL 44268 0 4
// end ; end_of_file
16507: PPOPN 4
16509: END
// every 0 0$1 trigger game do
16510: LD_EXP 2
16514: IFFALSE 16544
16516: GO 16518
16518: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16519: LD_INT 7
16521: PUSH
16522: LD_INT 6
16524: PUSH
16525: LD_INT 4
16527: PUSH
16528: LD_INT 6
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: PPUSH
16537: LD_INT 1750
16539: PPUSH
16540: CALL 16545 0 2
16544: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16545: LD_INT 0
16547: PPUSH
16548: PPUSH
16549: PPUSH
// if not areas then
16550: LD_VAR 0 1
16554: NOT
16555: IFFALSE 16559
// exit ;
16557: GO 16689
// repeat wait ( time ) ;
16559: LD_VAR 0 2
16563: PPUSH
16564: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16568: LD_ADDR_VAR 0 5
16572: PUSH
16573: LD_INT 1
16575: PPUSH
16576: LD_INT 90
16578: PPUSH
16579: CALL_OW 12
16583: ST_TO_ADDR
// for i in areas do
16584: LD_ADDR_VAR 0 4
16588: PUSH
16589: LD_VAR 0 1
16593: PUSH
16594: FOR_IN
16595: IFFALSE 16648
// begin if Prob ( p ) then
16597: LD_VAR 0 5
16601: PPUSH
16602: CALL_OW 13
16606: IFFALSE 16646
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16608: LD_INT 1
16610: PPUSH
16611: LD_INT 5
16613: PPUSH
16614: CALL_OW 12
16618: PPUSH
16619: LD_VAR 0 4
16623: PPUSH
16624: LD_INT 1
16626: PPUSH
16627: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
16631: LD_INT 385
16633: PPUSH
16634: LD_INT 595
16636: PPUSH
16637: CALL_OW 12
16641: PPUSH
16642: CALL_OW 67
// end ; end ;
16646: GO 16594
16648: POP
16649: POP
// time := time + 0 0$3 ;
16650: LD_ADDR_VAR 0 2
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: LD_INT 105
16662: PLUS
16663: ST_TO_ADDR
// if time > 7 7$00 then
16664: LD_VAR 0 2
16668: PUSH
16669: LD_INT 14700
16671: GREATER
16672: IFFALSE 16682
// time := 0 0$40 ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_INT 1400
16681: ST_TO_ADDR
// until not game ;
16682: LD_EXP 2
16686: NOT
16687: IFFALSE 16559
// end ; end_of_file
16689: LD_VAR 0 3
16693: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
16694: LD_INT 0
16696: PPUSH
16697: PPUSH
// skirmish := false ;
16698: LD_ADDR_EXP 48
16702: PUSH
16703: LD_INT 0
16705: ST_TO_ADDR
// debug_mc := false ;
16706: LD_ADDR_EXP 49
16710: PUSH
16711: LD_INT 0
16713: ST_TO_ADDR
// mc_bases := [ ] ;
16714: LD_ADDR_EXP 50
16718: PUSH
16719: EMPTY
16720: ST_TO_ADDR
// mc_sides := [ ] ;
16721: LD_ADDR_EXP 76
16725: PUSH
16726: EMPTY
16727: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16728: LD_ADDR_EXP 51
16732: PUSH
16733: EMPTY
16734: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16735: LD_ADDR_EXP 52
16739: PUSH
16740: EMPTY
16741: ST_TO_ADDR
// mc_need_heal := [ ] ;
16742: LD_ADDR_EXP 53
16746: PUSH
16747: EMPTY
16748: ST_TO_ADDR
// mc_healers := [ ] ;
16749: LD_ADDR_EXP 54
16753: PUSH
16754: EMPTY
16755: ST_TO_ADDR
// mc_build_list := [ ] ;
16756: LD_ADDR_EXP 55
16760: PUSH
16761: EMPTY
16762: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16763: LD_ADDR_EXP 82
16767: PUSH
16768: EMPTY
16769: ST_TO_ADDR
// mc_builders := [ ] ;
16770: LD_ADDR_EXP 56
16774: PUSH
16775: EMPTY
16776: ST_TO_ADDR
// mc_construct_list := [ ] ;
16777: LD_ADDR_EXP 57
16781: PUSH
16782: EMPTY
16783: ST_TO_ADDR
// mc_turret_list := [ ] ;
16784: LD_ADDR_EXP 58
16788: PUSH
16789: EMPTY
16790: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16791: LD_ADDR_EXP 59
16795: PUSH
16796: EMPTY
16797: ST_TO_ADDR
// mc_miners := [ ] ;
16798: LD_ADDR_EXP 64
16802: PUSH
16803: EMPTY
16804: ST_TO_ADDR
// mc_mines := [ ] ;
16805: LD_ADDR_EXP 63
16809: PUSH
16810: EMPTY
16811: ST_TO_ADDR
// mc_minefields := [ ] ;
16812: LD_ADDR_EXP 65
16816: PUSH
16817: EMPTY
16818: ST_TO_ADDR
// mc_crates := [ ] ;
16819: LD_ADDR_EXP 66
16823: PUSH
16824: EMPTY
16825: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16826: LD_ADDR_EXP 67
16830: PUSH
16831: EMPTY
16832: ST_TO_ADDR
// mc_crates_area := [ ] ;
16833: LD_ADDR_EXP 68
16837: PUSH
16838: EMPTY
16839: ST_TO_ADDR
// mc_vehicles := [ ] ;
16840: LD_ADDR_EXP 69
16844: PUSH
16845: EMPTY
16846: ST_TO_ADDR
// mc_attack := [ ] ;
16847: LD_ADDR_EXP 70
16851: PUSH
16852: EMPTY
16853: ST_TO_ADDR
// mc_produce := [ ] ;
16854: LD_ADDR_EXP 71
16858: PUSH
16859: EMPTY
16860: ST_TO_ADDR
// mc_defender := [ ] ;
16861: LD_ADDR_EXP 72
16865: PUSH
16866: EMPTY
16867: ST_TO_ADDR
// mc_parking := [ ] ;
16868: LD_ADDR_EXP 74
16872: PUSH
16873: EMPTY
16874: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16875: LD_ADDR_EXP 60
16879: PUSH
16880: EMPTY
16881: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16882: LD_ADDR_EXP 62
16886: PUSH
16887: EMPTY
16888: ST_TO_ADDR
// mc_scan := [ ] ;
16889: LD_ADDR_EXP 73
16893: PUSH
16894: EMPTY
16895: ST_TO_ADDR
// mc_scan_area := [ ] ;
16896: LD_ADDR_EXP 75
16900: PUSH
16901: EMPTY
16902: ST_TO_ADDR
// mc_tech := [ ] ;
16903: LD_ADDR_EXP 77
16907: PUSH
16908: EMPTY
16909: ST_TO_ADDR
// mc_class := [ ] ;
16910: LD_ADDR_EXP 91
16914: PUSH
16915: EMPTY
16916: ST_TO_ADDR
// mc_class_case_use := [ ] ;
16917: LD_ADDR_EXP 92
16921: PUSH
16922: EMPTY
16923: ST_TO_ADDR
// end ;
16924: LD_VAR 0 1
16928: RET
// export function MC_Kill ( base ) ; begin
16929: LD_INT 0
16931: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16932: LD_ADDR_EXP 50
16936: PUSH
16937: LD_EXP 50
16941: PPUSH
16942: LD_VAR 0 1
16946: PPUSH
16947: EMPTY
16948: PPUSH
16949: CALL_OW 1
16953: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16954: LD_ADDR_EXP 51
16958: PUSH
16959: LD_EXP 51
16963: PPUSH
16964: LD_VAR 0 1
16968: PPUSH
16969: EMPTY
16970: PPUSH
16971: CALL_OW 1
16975: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16976: LD_ADDR_EXP 52
16980: PUSH
16981: LD_EXP 52
16985: PPUSH
16986: LD_VAR 0 1
16990: PPUSH
16991: EMPTY
16992: PPUSH
16993: CALL_OW 1
16997: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16998: LD_ADDR_EXP 53
17002: PUSH
17003: LD_EXP 53
17007: PPUSH
17008: LD_VAR 0 1
17012: PPUSH
17013: EMPTY
17014: PPUSH
17015: CALL_OW 1
17019: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17020: LD_ADDR_EXP 54
17024: PUSH
17025: LD_EXP 54
17029: PPUSH
17030: LD_VAR 0 1
17034: PPUSH
17035: EMPTY
17036: PPUSH
17037: CALL_OW 1
17041: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17042: LD_ADDR_EXP 55
17046: PUSH
17047: LD_EXP 55
17051: PPUSH
17052: LD_VAR 0 1
17056: PPUSH
17057: EMPTY
17058: PPUSH
17059: CALL_OW 1
17063: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17064: LD_ADDR_EXP 56
17068: PUSH
17069: LD_EXP 56
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: EMPTY
17080: PPUSH
17081: CALL_OW 1
17085: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17086: LD_ADDR_EXP 57
17090: PUSH
17091: LD_EXP 57
17095: PPUSH
17096: LD_VAR 0 1
17100: PPUSH
17101: EMPTY
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17108: LD_ADDR_EXP 58
17112: PUSH
17113: LD_EXP 58
17117: PPUSH
17118: LD_VAR 0 1
17122: PPUSH
17123: EMPTY
17124: PPUSH
17125: CALL_OW 1
17129: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17130: LD_ADDR_EXP 59
17134: PUSH
17135: LD_EXP 59
17139: PPUSH
17140: LD_VAR 0 1
17144: PPUSH
17145: EMPTY
17146: PPUSH
17147: CALL_OW 1
17151: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17152: LD_ADDR_EXP 60
17156: PUSH
17157: LD_EXP 60
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: EMPTY
17168: PPUSH
17169: CALL_OW 1
17173: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17174: LD_ADDR_EXP 61
17178: PUSH
17179: LD_EXP 61
17183: PPUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: LD_INT 0
17191: PPUSH
17192: CALL_OW 1
17196: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17197: LD_ADDR_EXP 62
17201: PUSH
17202: LD_EXP 62
17206: PPUSH
17207: LD_VAR 0 1
17211: PPUSH
17212: EMPTY
17213: PPUSH
17214: CALL_OW 1
17218: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17219: LD_ADDR_EXP 63
17223: PUSH
17224: LD_EXP 63
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: EMPTY
17235: PPUSH
17236: CALL_OW 1
17240: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17241: LD_ADDR_EXP 64
17245: PUSH
17246: LD_EXP 64
17250: PPUSH
17251: LD_VAR 0 1
17255: PPUSH
17256: EMPTY
17257: PPUSH
17258: CALL_OW 1
17262: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17263: LD_ADDR_EXP 65
17267: PUSH
17268: LD_EXP 65
17272: PPUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: EMPTY
17279: PPUSH
17280: CALL_OW 1
17284: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17285: LD_ADDR_EXP 66
17289: PUSH
17290: LD_EXP 66
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: EMPTY
17301: PPUSH
17302: CALL_OW 1
17306: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17307: LD_ADDR_EXP 67
17311: PUSH
17312: LD_EXP 67
17316: PPUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: EMPTY
17323: PPUSH
17324: CALL_OW 1
17328: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
17329: LD_ADDR_EXP 68
17333: PUSH
17334: LD_EXP 68
17338: PPUSH
17339: LD_VAR 0 1
17343: PPUSH
17344: EMPTY
17345: PPUSH
17346: CALL_OW 1
17350: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
17351: LD_ADDR_EXP 69
17355: PUSH
17356: LD_EXP 69
17360: PPUSH
17361: LD_VAR 0 1
17365: PPUSH
17366: EMPTY
17367: PPUSH
17368: CALL_OW 1
17372: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
17373: LD_ADDR_EXP 70
17377: PUSH
17378: LD_EXP 70
17382: PPUSH
17383: LD_VAR 0 1
17387: PPUSH
17388: EMPTY
17389: PPUSH
17390: CALL_OW 1
17394: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
17395: LD_ADDR_EXP 71
17399: PUSH
17400: LD_EXP 71
17404: PPUSH
17405: LD_VAR 0 1
17409: PPUSH
17410: EMPTY
17411: PPUSH
17412: CALL_OW 1
17416: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
17417: LD_ADDR_EXP 72
17421: PUSH
17422: LD_EXP 72
17426: PPUSH
17427: LD_VAR 0 1
17431: PPUSH
17432: EMPTY
17433: PPUSH
17434: CALL_OW 1
17438: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17439: LD_ADDR_EXP 73
17443: PUSH
17444: LD_EXP 73
17448: PPUSH
17449: LD_VAR 0 1
17453: PPUSH
17454: EMPTY
17455: PPUSH
17456: CALL_OW 1
17460: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17461: LD_ADDR_EXP 74
17465: PUSH
17466: LD_EXP 74
17470: PPUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: EMPTY
17477: PPUSH
17478: CALL_OW 1
17482: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17483: LD_ADDR_EXP 75
17487: PUSH
17488: LD_EXP 75
17492: PPUSH
17493: LD_VAR 0 1
17497: PPUSH
17498: EMPTY
17499: PPUSH
17500: CALL_OW 1
17504: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17505: LD_ADDR_EXP 77
17509: PUSH
17510: LD_EXP 77
17514: PPUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: EMPTY
17521: PPUSH
17522: CALL_OW 1
17526: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17527: LD_ADDR_EXP 79
17531: PUSH
17532: LD_EXP 79
17536: PPUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: EMPTY
17543: PPUSH
17544: CALL_OW 1
17548: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17549: LD_ADDR_EXP 80
17553: PUSH
17554: LD_EXP 80
17558: PPUSH
17559: LD_VAR 0 1
17563: PPUSH
17564: EMPTY
17565: PPUSH
17566: CALL_OW 1
17570: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17571: LD_ADDR_EXP 81
17575: PUSH
17576: LD_EXP 81
17580: PPUSH
17581: LD_VAR 0 1
17585: PPUSH
17586: EMPTY
17587: PPUSH
17588: CALL_OW 1
17592: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17593: LD_ADDR_EXP 82
17597: PUSH
17598: LD_EXP 82
17602: PPUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: EMPTY
17609: PPUSH
17610: CALL_OW 1
17614: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17615: LD_ADDR_EXP 83
17619: PUSH
17620: LD_EXP 83
17624: PPUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: EMPTY
17631: PPUSH
17632: CALL_OW 1
17636: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17637: LD_ADDR_EXP 84
17641: PUSH
17642: LD_EXP 84
17646: PPUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: EMPTY
17653: PPUSH
17654: CALL_OW 1
17658: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17659: LD_ADDR_EXP 85
17663: PUSH
17664: LD_EXP 85
17668: PPUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: EMPTY
17675: PPUSH
17676: CALL_OW 1
17680: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
17681: LD_ADDR_EXP 86
17685: PUSH
17686: LD_EXP 86
17690: PPUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: EMPTY
17697: PPUSH
17698: CALL_OW 1
17702: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17703: LD_ADDR_EXP 87
17707: PUSH
17708: LD_EXP 87
17712: PPUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: EMPTY
17719: PPUSH
17720: CALL_OW 1
17724: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17725: LD_ADDR_EXP 88
17729: PUSH
17730: LD_EXP 88
17734: PPUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: EMPTY
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17747: LD_ADDR_EXP 89
17751: PUSH
17752: LD_EXP 89
17756: PPUSH
17757: LD_VAR 0 1
17761: PPUSH
17762: EMPTY
17763: PPUSH
17764: CALL_OW 1
17768: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17769: LD_ADDR_EXP 90
17773: PUSH
17774: LD_EXP 90
17778: PPUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: EMPTY
17785: PPUSH
17786: CALL_OW 1
17790: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
17791: LD_ADDR_EXP 91
17795: PUSH
17796: LD_EXP 91
17800: PPUSH
17801: LD_VAR 0 1
17805: PPUSH
17806: EMPTY
17807: PPUSH
17808: CALL_OW 1
17812: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
17813: LD_ADDR_EXP 92
17817: PUSH
17818: LD_EXP 92
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_INT 0
17830: PPUSH
17831: CALL_OW 1
17835: ST_TO_ADDR
// end ;
17836: LD_VAR 0 2
17840: RET
// export function MC_Start ( ) ; var i ; begin
17841: LD_INT 0
17843: PPUSH
17844: PPUSH
// for i = 1 to mc_bases do
17845: LD_ADDR_VAR 0 2
17849: PUSH
17850: DOUBLE
17851: LD_INT 1
17853: DEC
17854: ST_TO_ADDR
17855: LD_EXP 50
17859: PUSH
17860: FOR_TO
17861: IFFALSE 18938
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
17863: LD_ADDR_EXP 50
17867: PUSH
17868: LD_EXP 50
17872: PPUSH
17873: LD_VAR 0 2
17877: PPUSH
17878: LD_EXP 50
17882: PUSH
17883: LD_VAR 0 2
17887: ARRAY
17888: PUSH
17889: LD_INT 0
17891: DIFF
17892: PPUSH
17893: CALL_OW 1
17897: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17898: LD_ADDR_EXP 51
17902: PUSH
17903: LD_EXP 51
17907: PPUSH
17908: LD_VAR 0 2
17912: PPUSH
17913: EMPTY
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17920: LD_ADDR_EXP 52
17924: PUSH
17925: LD_EXP 52
17929: PPUSH
17930: LD_VAR 0 2
17934: PPUSH
17935: EMPTY
17936: PPUSH
17937: CALL_OW 1
17941: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17942: LD_ADDR_EXP 53
17946: PUSH
17947: LD_EXP 53
17951: PPUSH
17952: LD_VAR 0 2
17956: PPUSH
17957: EMPTY
17958: PPUSH
17959: CALL_OW 1
17963: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17964: LD_ADDR_EXP 54
17968: PUSH
17969: LD_EXP 54
17973: PPUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: EMPTY
17980: PUSH
17981: EMPTY
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 1
17991: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17992: LD_ADDR_EXP 55
17996: PUSH
17997: LD_EXP 55
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: EMPTY
18008: PPUSH
18009: CALL_OW 1
18013: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
18014: LD_ADDR_EXP 82
18018: PUSH
18019: LD_EXP 82
18023: PPUSH
18024: LD_VAR 0 2
18028: PPUSH
18029: EMPTY
18030: PPUSH
18031: CALL_OW 1
18035: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
18036: LD_ADDR_EXP 56
18040: PUSH
18041: LD_EXP 56
18045: PPUSH
18046: LD_VAR 0 2
18050: PPUSH
18051: EMPTY
18052: PPUSH
18053: CALL_OW 1
18057: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
18058: LD_ADDR_EXP 57
18062: PUSH
18063: LD_EXP 57
18067: PPUSH
18068: LD_VAR 0 2
18072: PPUSH
18073: EMPTY
18074: PPUSH
18075: CALL_OW 1
18079: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
18080: LD_ADDR_EXP 58
18084: PUSH
18085: LD_EXP 58
18089: PPUSH
18090: LD_VAR 0 2
18094: PPUSH
18095: LD_EXP 50
18099: PUSH
18100: LD_VAR 0 2
18104: ARRAY
18105: PPUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 30
18111: PUSH
18112: LD_INT 32
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 30
18121: PUSH
18122: LD_INT 33
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: PPUSH
18134: CALL_OW 72
18138: PPUSH
18139: CALL_OW 1
18143: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
18144: LD_ADDR_EXP 59
18148: PUSH
18149: LD_EXP 59
18153: PPUSH
18154: LD_VAR 0 2
18158: PPUSH
18159: LD_EXP 50
18163: PUSH
18164: LD_VAR 0 2
18168: ARRAY
18169: PPUSH
18170: LD_INT 2
18172: PUSH
18173: LD_INT 30
18175: PUSH
18176: LD_INT 32
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 30
18185: PUSH
18186: LD_INT 31
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 58
18200: PUSH
18201: EMPTY
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PPUSH
18208: CALL_OW 72
18212: PPUSH
18213: CALL_OW 1
18217: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
18218: LD_ADDR_EXP 60
18222: PUSH
18223: LD_EXP 60
18227: PPUSH
18228: LD_VAR 0 2
18232: PPUSH
18233: EMPTY
18234: PPUSH
18235: CALL_OW 1
18239: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
18240: LD_ADDR_EXP 64
18244: PUSH
18245: LD_EXP 64
18249: PPUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: EMPTY
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
18262: LD_ADDR_EXP 63
18266: PUSH
18267: LD_EXP 63
18271: PPUSH
18272: LD_VAR 0 2
18276: PPUSH
18277: EMPTY
18278: PPUSH
18279: CALL_OW 1
18283: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
18284: LD_ADDR_EXP 65
18288: PUSH
18289: LD_EXP 65
18293: PPUSH
18294: LD_VAR 0 2
18298: PPUSH
18299: EMPTY
18300: PPUSH
18301: CALL_OW 1
18305: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
18306: LD_ADDR_EXP 66
18310: PUSH
18311: LD_EXP 66
18315: PPUSH
18316: LD_VAR 0 2
18320: PPUSH
18321: EMPTY
18322: PPUSH
18323: CALL_OW 1
18327: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
18328: LD_ADDR_EXP 67
18332: PUSH
18333: LD_EXP 67
18337: PPUSH
18338: LD_VAR 0 2
18342: PPUSH
18343: EMPTY
18344: PPUSH
18345: CALL_OW 1
18349: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
18350: LD_ADDR_EXP 68
18354: PUSH
18355: LD_EXP 68
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: EMPTY
18366: PPUSH
18367: CALL_OW 1
18371: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
18372: LD_ADDR_EXP 69
18376: PUSH
18377: LD_EXP 69
18381: PPUSH
18382: LD_VAR 0 2
18386: PPUSH
18387: EMPTY
18388: PPUSH
18389: CALL_OW 1
18393: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
18394: LD_ADDR_EXP 70
18398: PUSH
18399: LD_EXP 70
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: EMPTY
18410: PPUSH
18411: CALL_OW 1
18415: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
18416: LD_ADDR_EXP 71
18420: PUSH
18421: LD_EXP 71
18425: PPUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: EMPTY
18432: PPUSH
18433: CALL_OW 1
18437: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
18438: LD_ADDR_EXP 72
18442: PUSH
18443: LD_EXP 72
18447: PPUSH
18448: LD_VAR 0 2
18452: PPUSH
18453: EMPTY
18454: PPUSH
18455: CALL_OW 1
18459: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
18460: LD_ADDR_EXP 61
18464: PUSH
18465: LD_EXP 61
18469: PPUSH
18470: LD_VAR 0 2
18474: PPUSH
18475: LD_INT 0
18477: PPUSH
18478: CALL_OW 1
18482: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
18483: LD_ADDR_EXP 74
18487: PUSH
18488: LD_EXP 74
18492: PPUSH
18493: LD_VAR 0 2
18497: PPUSH
18498: LD_INT 0
18500: PPUSH
18501: CALL_OW 1
18505: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
18506: LD_ADDR_EXP 62
18510: PUSH
18511: LD_EXP 62
18515: PPUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: EMPTY
18522: PPUSH
18523: CALL_OW 1
18527: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
18528: LD_ADDR_EXP 73
18532: PUSH
18533: LD_EXP 73
18537: PPUSH
18538: LD_VAR 0 2
18542: PPUSH
18543: LD_INT 0
18545: PPUSH
18546: CALL_OW 1
18550: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
18551: LD_ADDR_EXP 75
18555: PUSH
18556: LD_EXP 75
18560: PPUSH
18561: LD_VAR 0 2
18565: PPUSH
18566: EMPTY
18567: PPUSH
18568: CALL_OW 1
18572: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
18573: LD_ADDR_EXP 78
18577: PUSH
18578: LD_EXP 78
18582: PPUSH
18583: LD_VAR 0 2
18587: PPUSH
18588: LD_INT 0
18590: PPUSH
18591: CALL_OW 1
18595: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18596: LD_ADDR_EXP 79
18600: PUSH
18601: LD_EXP 79
18605: PPUSH
18606: LD_VAR 0 2
18610: PPUSH
18611: EMPTY
18612: PPUSH
18613: CALL_OW 1
18617: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18618: LD_ADDR_EXP 80
18622: PUSH
18623: LD_EXP 80
18627: PPUSH
18628: LD_VAR 0 2
18632: PPUSH
18633: EMPTY
18634: PPUSH
18635: CALL_OW 1
18639: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18640: LD_ADDR_EXP 81
18644: PUSH
18645: LD_EXP 81
18649: PPUSH
18650: LD_VAR 0 2
18654: PPUSH
18655: EMPTY
18656: PPUSH
18657: CALL_OW 1
18661: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18662: LD_ADDR_EXP 83
18666: PUSH
18667: LD_EXP 83
18671: PPUSH
18672: LD_VAR 0 2
18676: PPUSH
18677: LD_EXP 50
18681: PUSH
18682: LD_VAR 0 2
18686: ARRAY
18687: PPUSH
18688: LD_INT 2
18690: PUSH
18691: LD_INT 30
18693: PUSH
18694: LD_INT 6
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 30
18703: PUSH
18704: LD_INT 7
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: LD_INT 8
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: PPUSH
18727: CALL_OW 72
18731: PPUSH
18732: CALL_OW 1
18736: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18737: LD_ADDR_EXP 84
18741: PUSH
18742: LD_EXP 84
18746: PPUSH
18747: LD_VAR 0 2
18751: PPUSH
18752: EMPTY
18753: PPUSH
18754: CALL_OW 1
18758: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18759: LD_ADDR_EXP 85
18763: PUSH
18764: LD_EXP 85
18768: PPUSH
18769: LD_VAR 0 2
18773: PPUSH
18774: EMPTY
18775: PPUSH
18776: CALL_OW 1
18780: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
18781: LD_ADDR_EXP 86
18785: PUSH
18786: LD_EXP 86
18790: PPUSH
18791: LD_VAR 0 2
18795: PPUSH
18796: EMPTY
18797: PPUSH
18798: CALL_OW 1
18802: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18803: LD_ADDR_EXP 87
18807: PUSH
18808: LD_EXP 87
18812: PPUSH
18813: LD_VAR 0 2
18817: PPUSH
18818: EMPTY
18819: PPUSH
18820: CALL_OW 1
18824: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18825: LD_ADDR_EXP 88
18829: PUSH
18830: LD_EXP 88
18834: PPUSH
18835: LD_VAR 0 2
18839: PPUSH
18840: EMPTY
18841: PPUSH
18842: CALL_OW 1
18846: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18847: LD_ADDR_EXP 89
18851: PUSH
18852: LD_EXP 89
18856: PPUSH
18857: LD_VAR 0 2
18861: PPUSH
18862: EMPTY
18863: PPUSH
18864: CALL_OW 1
18868: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18869: LD_ADDR_EXP 90
18873: PUSH
18874: LD_EXP 90
18878: PPUSH
18879: LD_VAR 0 2
18883: PPUSH
18884: EMPTY
18885: PPUSH
18886: CALL_OW 1
18890: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
18891: LD_ADDR_EXP 91
18895: PUSH
18896: LD_EXP 91
18900: PPUSH
18901: LD_VAR 0 2
18905: PPUSH
18906: EMPTY
18907: PPUSH
18908: CALL_OW 1
18912: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
18913: LD_ADDR_EXP 92
18917: PUSH
18918: LD_EXP 92
18922: PPUSH
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 0
18930: PPUSH
18931: CALL_OW 1
18935: ST_TO_ADDR
// end ;
18936: GO 17860
18938: POP
18939: POP
// MC_InitSides ( ) ;
18940: CALL 19226 0 0
// MC_InitResearch ( ) ;
18944: CALL 18965 0 0
// CustomInitMacro ( ) ;
18948: CALL 285 0 0
// skirmish := true ;
18952: LD_ADDR_EXP 48
18956: PUSH
18957: LD_INT 1
18959: ST_TO_ADDR
// end ;
18960: LD_VAR 0 1
18964: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18965: LD_INT 0
18967: PPUSH
18968: PPUSH
18969: PPUSH
18970: PPUSH
18971: PPUSH
18972: PPUSH
// if not mc_bases then
18973: LD_EXP 50
18977: NOT
18978: IFFALSE 18982
// exit ;
18980: GO 19221
// for i = 1 to 8 do
18982: LD_ADDR_VAR 0 2
18986: PUSH
18987: DOUBLE
18988: LD_INT 1
18990: DEC
18991: ST_TO_ADDR
18992: LD_INT 8
18994: PUSH
18995: FOR_TO
18996: IFFALSE 19022
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18998: LD_ADDR_EXP 77
19002: PUSH
19003: LD_EXP 77
19007: PPUSH
19008: LD_VAR 0 2
19012: PPUSH
19013: EMPTY
19014: PPUSH
19015: CALL_OW 1
19019: ST_TO_ADDR
19020: GO 18995
19022: POP
19023: POP
// tmp := [ ] ;
19024: LD_ADDR_VAR 0 5
19028: PUSH
19029: EMPTY
19030: ST_TO_ADDR
// for i = 1 to mc_sides do
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: DOUBLE
19037: LD_INT 1
19039: DEC
19040: ST_TO_ADDR
19041: LD_EXP 76
19045: PUSH
19046: FOR_TO
19047: IFFALSE 19105
// if not mc_sides [ i ] in tmp then
19049: LD_EXP 76
19053: PUSH
19054: LD_VAR 0 2
19058: ARRAY
19059: PUSH
19060: LD_VAR 0 5
19064: IN
19065: NOT
19066: IFFALSE 19103
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
19068: LD_ADDR_VAR 0 5
19072: PUSH
19073: LD_VAR 0 5
19077: PPUSH
19078: LD_VAR 0 5
19082: PUSH
19083: LD_INT 1
19085: PLUS
19086: PPUSH
19087: LD_EXP 76
19091: PUSH
19092: LD_VAR 0 2
19096: ARRAY
19097: PPUSH
19098: CALL_OW 2
19102: ST_TO_ADDR
19103: GO 19046
19105: POP
19106: POP
// if not tmp then
19107: LD_VAR 0 5
19111: NOT
19112: IFFALSE 19116
// exit ;
19114: GO 19221
// for j in tmp do
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: LD_VAR 0 5
19125: PUSH
19126: FOR_IN
19127: IFFALSE 19219
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
19129: LD_ADDR_VAR 0 6
19133: PUSH
19134: LD_INT 22
19136: PUSH
19137: LD_VAR 0 3
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PPUSH
19146: CALL_OW 69
19150: ST_TO_ADDR
// if not un then
19151: LD_VAR 0 6
19155: NOT
19156: IFFALSE 19160
// continue ;
19158: GO 19126
// nation := GetNation ( un [ 1 ] ) ;
19160: LD_ADDR_VAR 0 4
19164: PUSH
19165: LD_VAR 0 6
19169: PUSH
19170: LD_INT 1
19172: ARRAY
19173: PPUSH
19174: CALL_OW 248
19178: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
19179: LD_ADDR_EXP 77
19183: PUSH
19184: LD_EXP 77
19188: PPUSH
19189: LD_VAR 0 3
19193: PPUSH
19194: LD_VAR 0 3
19198: PPUSH
19199: LD_VAR 0 4
19203: PPUSH
19204: LD_INT 1
19206: PPUSH
19207: CALL 44472 0 3
19211: PPUSH
19212: CALL_OW 1
19216: ST_TO_ADDR
// end ;
19217: GO 19126
19219: POP
19220: POP
// end ;
19221: LD_VAR 0 1
19225: RET
// export function MC_InitSides ( ) ; var i ; begin
19226: LD_INT 0
19228: PPUSH
19229: PPUSH
// if not mc_bases then
19230: LD_EXP 50
19234: NOT
19235: IFFALSE 19239
// exit ;
19237: GO 19313
// for i = 1 to mc_bases do
19239: LD_ADDR_VAR 0 2
19243: PUSH
19244: DOUBLE
19245: LD_INT 1
19247: DEC
19248: ST_TO_ADDR
19249: LD_EXP 50
19253: PUSH
19254: FOR_TO
19255: IFFALSE 19311
// if mc_bases [ i ] then
19257: LD_EXP 50
19261: PUSH
19262: LD_VAR 0 2
19266: ARRAY
19267: IFFALSE 19309
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
19269: LD_ADDR_EXP 76
19273: PUSH
19274: LD_EXP 76
19278: PPUSH
19279: LD_VAR 0 2
19283: PPUSH
19284: LD_EXP 50
19288: PUSH
19289: LD_VAR 0 2
19293: ARRAY
19294: PUSH
19295: LD_INT 1
19297: ARRAY
19298: PPUSH
19299: CALL_OW 255
19303: PPUSH
19304: CALL_OW 1
19308: ST_TO_ADDR
19309: GO 19254
19311: POP
19312: POP
// end ;
19313: LD_VAR 0 1
19317: RET
// every 0 0$01 trigger skirmish do
19318: LD_EXP 48
19322: IFFALSE 19476
19324: GO 19326
19326: DISABLE
// begin enable ;
19327: ENABLE
// MC_CheckBuildings ( ) ;
19328: CALL 23642 0 0
// MC_CheckPeopleLife ( ) ;
19332: CALL 23767 0 0
// RaiseSailEvent ( 100 ) ;
19336: LD_INT 100
19338: PPUSH
19339: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
19343: LD_INT 103
19345: PPUSH
19346: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
19350: LD_INT 104
19352: PPUSH
19353: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
19357: LD_INT 105
19359: PPUSH
19360: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
19364: LD_INT 106
19366: PPUSH
19367: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
19371: LD_INT 107
19373: PPUSH
19374: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
19378: LD_INT 108
19380: PPUSH
19381: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
19385: LD_INT 109
19387: PPUSH
19388: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
19392: LD_INT 110
19394: PPUSH
19395: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
19399: LD_INT 111
19401: PPUSH
19402: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
19406: LD_INT 112
19408: PPUSH
19409: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
19413: LD_INT 113
19415: PPUSH
19416: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
19420: LD_INT 120
19422: PPUSH
19423: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
19427: LD_INT 121
19429: PPUSH
19430: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
19434: LD_INT 122
19436: PPUSH
19437: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
19441: LD_INT 123
19443: PPUSH
19444: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
19448: LD_INT 124
19450: PPUSH
19451: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
19455: LD_INT 125
19457: PPUSH
19458: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
19462: LD_INT 126
19464: PPUSH
19465: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
19469: LD_INT 200
19471: PPUSH
19472: CALL_OW 427
// end ;
19476: END
// on SailEvent ( event ) do begin if event < 100 then
19477: LD_VAR 0 1
19481: PUSH
19482: LD_INT 100
19484: LESS
19485: IFFALSE 19496
// CustomEvent ( event ) ;
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL 15995 0 1
// if event = 100 then
19496: LD_VAR 0 1
19500: PUSH
19501: LD_INT 100
19503: EQUAL
19504: IFFALSE 19510
// MC_ClassManager ( ) ;
19506: CALL 19902 0 0
// if event = 101 then
19510: LD_VAR 0 1
19514: PUSH
19515: LD_INT 101
19517: EQUAL
19518: IFFALSE 19524
// MC_RepairBuildings ( ) ;
19520: CALL 24363 0 0
// if event = 102 then
19524: LD_VAR 0 1
19528: PUSH
19529: LD_INT 102
19531: EQUAL
19532: IFFALSE 19538
// MC_Heal ( ) ;
19534: CALL 24769 0 0
// if event = 103 then
19538: LD_VAR 0 1
19542: PUSH
19543: LD_INT 103
19545: EQUAL
19546: IFFALSE 19552
// MC_Build ( ) ;
19548: CALL 25191 0 0
// if event = 104 then
19552: LD_VAR 0 1
19556: PUSH
19557: LD_INT 104
19559: EQUAL
19560: IFFALSE 19566
// MC_TurretWeapon ( ) ;
19562: CALL 26804 0 0
// if event = 105 then
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 105
19573: EQUAL
19574: IFFALSE 19580
// MC_BuildUpgrade ( ) ;
19576: CALL 26355 0 0
// if event = 106 then
19580: LD_VAR 0 1
19584: PUSH
19585: LD_INT 106
19587: EQUAL
19588: IFFALSE 19594
// MC_PlantMines ( ) ;
19590: CALL 27234 0 0
// if event = 107 then
19594: LD_VAR 0 1
19598: PUSH
19599: LD_INT 107
19601: EQUAL
19602: IFFALSE 19608
// MC_CollectCrates ( ) ;
19604: CALL 28268 0 0
// if event = 108 then
19608: LD_VAR 0 1
19612: PUSH
19613: LD_INT 108
19615: EQUAL
19616: IFFALSE 19622
// MC_LinkRemoteControl ( ) ;
19618: CALL 30025 0 0
// if event = 109 then
19622: LD_VAR 0 1
19626: PUSH
19627: LD_INT 109
19629: EQUAL
19630: IFFALSE 19636
// MC_ProduceVehicle ( ) ;
19632: CALL 30206 0 0
// if event = 110 then
19636: LD_VAR 0 1
19640: PUSH
19641: LD_INT 110
19643: EQUAL
19644: IFFALSE 19650
// MC_SendAttack ( ) ;
19646: CALL 30687 0 0
// if event = 111 then
19650: LD_VAR 0 1
19654: PUSH
19655: LD_INT 111
19657: EQUAL
19658: IFFALSE 19664
// MC_Defend ( ) ;
19660: CALL 30795 0 0
// if event = 112 then
19664: LD_VAR 0 1
19668: PUSH
19669: LD_INT 112
19671: EQUAL
19672: IFFALSE 19678
// MC_Research ( ) ;
19674: CALL 31422 0 0
// if event = 113 then
19678: LD_VAR 0 1
19682: PUSH
19683: LD_INT 113
19685: EQUAL
19686: IFFALSE 19692
// MC_MinesTrigger ( ) ;
19688: CALL 32536 0 0
// if event = 120 then
19692: LD_VAR 0 1
19696: PUSH
19697: LD_INT 120
19699: EQUAL
19700: IFFALSE 19706
// MC_RepairVehicle ( ) ;
19702: CALL 32635 0 0
// if event = 121 then
19706: LD_VAR 0 1
19710: PUSH
19711: LD_INT 121
19713: EQUAL
19714: IFFALSE 19720
// MC_TameApe ( ) ;
19716: CALL 33378 0 0
// if event = 122 then
19720: LD_VAR 0 1
19724: PUSH
19725: LD_INT 122
19727: EQUAL
19728: IFFALSE 19734
// MC_ChangeApeClass ( ) ;
19730: CALL 34207 0 0
// if event = 123 then
19734: LD_VAR 0 1
19738: PUSH
19739: LD_INT 123
19741: EQUAL
19742: IFFALSE 19748
// MC_Bazooka ( ) ;
19744: CALL 34857 0 0
// if event = 124 then
19748: LD_VAR 0 1
19752: PUSH
19753: LD_INT 124
19755: EQUAL
19756: IFFALSE 19762
// MC_TeleportExit ( ) ;
19758: CALL 35055 0 0
// if event = 125 then
19762: LD_VAR 0 1
19766: PUSH
19767: LD_INT 125
19769: EQUAL
19770: IFFALSE 19776
// MC_Deposits ( ) ;
19772: CALL 35702 0 0
// if event = 126 then
19776: LD_VAR 0 1
19780: PUSH
19781: LD_INT 126
19783: EQUAL
19784: IFFALSE 19790
// MC_RemoteDriver ( ) ;
19786: CALL 36327 0 0
// if event = 200 then
19790: LD_VAR 0 1
19794: PUSH
19795: LD_INT 200
19797: EQUAL
19798: IFFALSE 19804
// MC_Idle ( ) ;
19800: CALL 38060 0 0
// end ;
19804: PPOPN 1
19806: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19807: LD_INT 0
19809: PPUSH
19810: PPUSH
// if not mc_bases [ base ] or not tag then
19811: LD_EXP 50
19815: PUSH
19816: LD_VAR 0 1
19820: ARRAY
19821: NOT
19822: PUSH
19823: LD_VAR 0 2
19827: NOT
19828: OR
19829: IFFALSE 19833
// exit ;
19831: GO 19897
// for i in mc_bases [ base ] union mc_ape [ base ] do
19833: LD_ADDR_VAR 0 4
19837: PUSH
19838: LD_EXP 50
19842: PUSH
19843: LD_VAR 0 1
19847: ARRAY
19848: PUSH
19849: LD_EXP 79
19853: PUSH
19854: LD_VAR 0 1
19858: ARRAY
19859: UNION
19860: PUSH
19861: FOR_IN
19862: IFFALSE 19895
// if GetTag ( i ) = tag then
19864: LD_VAR 0 4
19868: PPUSH
19869: CALL_OW 110
19873: PUSH
19874: LD_VAR 0 2
19878: EQUAL
19879: IFFALSE 19893
// SetTag ( i , 0 ) ;
19881: LD_VAR 0 4
19885: PPUSH
19886: LD_INT 0
19888: PPUSH
19889: CALL_OW 109
19893: GO 19861
19895: POP
19896: POP
// end ;
19897: LD_VAR 0 3
19901: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
19902: LD_INT 0
19904: PPUSH
19905: PPUSH
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
19911: PPUSH
// if not mc_bases then
19912: LD_EXP 50
19916: NOT
19917: IFFALSE 19921
// exit ;
19919: GO 20379
// for i = 1 to mc_bases do
19921: LD_ADDR_VAR 0 2
19925: PUSH
19926: DOUBLE
19927: LD_INT 1
19929: DEC
19930: ST_TO_ADDR
19931: LD_EXP 50
19935: PUSH
19936: FOR_TO
19937: IFFALSE 20377
// begin tmp := MC_ClassCheckReq ( i ) ;
19939: LD_ADDR_VAR 0 4
19943: PUSH
19944: LD_VAR 0 2
19948: PPUSH
19949: CALL 20384 0 1
19953: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
19954: LD_ADDR_EXP 91
19958: PUSH
19959: LD_EXP 91
19963: PPUSH
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_VAR 0 4
19973: PPUSH
19974: CALL_OW 1
19978: ST_TO_ADDR
// if not tmp then
19979: LD_VAR 0 4
19983: NOT
19984: IFFALSE 19988
// continue ;
19986: GO 19936
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
19988: LD_ADDR_VAR 0 6
19992: PUSH
19993: LD_EXP 50
19997: PUSH
19998: LD_VAR 0 2
20002: ARRAY
20003: PPUSH
20004: LD_INT 2
20006: PUSH
20007: LD_INT 30
20009: PUSH
20010: LD_INT 4
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 30
20019: PUSH
20020: LD_INT 5
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 72
20036: PUSH
20037: LD_EXP 50
20041: PUSH
20042: LD_VAR 0 2
20046: ARRAY
20047: PPUSH
20048: LD_INT 2
20050: PUSH
20051: LD_INT 30
20053: PUSH
20054: LD_INT 0
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 30
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: PPUSH
20076: CALL_OW 72
20080: PUSH
20081: LD_EXP 50
20085: PUSH
20086: LD_VAR 0 2
20090: ARRAY
20091: PPUSH
20092: LD_INT 30
20094: PUSH
20095: LD_INT 3
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 72
20106: PUSH
20107: LD_EXP 50
20111: PUSH
20112: LD_VAR 0 2
20116: ARRAY
20117: PPUSH
20118: LD_INT 2
20120: PUSH
20121: LD_INT 30
20123: PUSH
20124: LD_INT 6
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 30
20133: PUSH
20134: LD_INT 7
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 30
20143: PUSH
20144: LD_INT 8
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: PPUSH
20157: CALL_OW 72
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: ST_TO_ADDR
// for j = 1 to 4 do
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: DOUBLE
20174: LD_INT 1
20176: DEC
20177: ST_TO_ADDR
20178: LD_INT 4
20180: PUSH
20181: FOR_TO
20182: IFFALSE 20373
// begin if not tmp [ j ] then
20184: LD_VAR 0 4
20188: PUSH
20189: LD_VAR 0 3
20193: ARRAY
20194: NOT
20195: IFFALSE 20199
// continue ;
20197: GO 20181
// for p in tmp [ j ] do
20199: LD_ADDR_VAR 0 5
20203: PUSH
20204: LD_VAR 0 4
20208: PUSH
20209: LD_VAR 0 3
20213: ARRAY
20214: PUSH
20215: FOR_IN
20216: IFFALSE 20369
// begin if not b [ j ] then
20218: LD_VAR 0 6
20222: PUSH
20223: LD_VAR 0 3
20227: ARRAY
20228: NOT
20229: IFFALSE 20233
// break ;
20231: GO 20369
// e := 0 ;
20233: LD_ADDR_VAR 0 7
20237: PUSH
20238: LD_INT 0
20240: ST_TO_ADDR
// for k in b [ j ] do
20241: LD_ADDR_VAR 0 8
20245: PUSH
20246: LD_VAR 0 6
20250: PUSH
20251: LD_VAR 0 3
20255: ARRAY
20256: PUSH
20257: FOR_IN
20258: IFFALSE 20285
// if IsNotFull ( k ) then
20260: LD_VAR 0 8
20264: PPUSH
20265: CALL 48498 0 1
20269: IFFALSE 20283
// begin e := k ;
20271: LD_ADDR_VAR 0 7
20275: PUSH
20276: LD_VAR 0 8
20280: ST_TO_ADDR
// break ;
20281: GO 20285
// end ;
20283: GO 20257
20285: POP
20286: POP
// if e and not UnitGoingToBuilding ( p , e ) then
20287: LD_VAR 0 7
20291: PUSH
20292: LD_VAR 0 5
20296: PPUSH
20297: LD_VAR 0 7
20301: PPUSH
20302: CALL 85486 0 2
20306: NOT
20307: AND
20308: IFFALSE 20367
// begin if IsInUnit ( p ) then
20310: LD_VAR 0 5
20314: PPUSH
20315: CALL_OW 310
20319: IFFALSE 20330
// ComExitBuilding ( p ) ;
20321: LD_VAR 0 5
20325: PPUSH
20326: CALL_OW 122
// ComEnterUnit ( p , e ) ;
20330: LD_VAR 0 5
20334: PPUSH
20335: LD_VAR 0 7
20339: PPUSH
20340: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
20344: LD_VAR 0 5
20348: PPUSH
20349: LD_VAR 0 3
20353: PPUSH
20354: CALL_OW 183
// AddComExitBuilding ( p ) ;
20358: LD_VAR 0 5
20362: PPUSH
20363: CALL_OW 182
// end ; end ;
20367: GO 20215
20369: POP
20370: POP
// end ;
20371: GO 20181
20373: POP
20374: POP
// end ;
20375: GO 19936
20377: POP
20378: POP
// end ;
20379: LD_VAR 0 1
20383: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
20384: LD_INT 0
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
20395: PPUSH
20396: PPUSH
20397: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
20398: LD_VAR 0 1
20402: NOT
20403: PUSH
20404: LD_EXP 50
20408: PUSH
20409: LD_VAR 0 1
20413: ARRAY
20414: NOT
20415: OR
20416: PUSH
20417: LD_EXP 50
20421: PUSH
20422: LD_VAR 0 1
20426: ARRAY
20427: PPUSH
20428: LD_INT 2
20430: PUSH
20431: LD_INT 30
20433: PUSH
20434: LD_INT 0
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 30
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 72
20460: NOT
20461: OR
20462: IFFALSE 20466
// exit ;
20464: GO 23637
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20466: LD_ADDR_VAR 0 4
20470: PUSH
20471: LD_EXP 50
20475: PUSH
20476: LD_VAR 0 1
20480: ARRAY
20481: PPUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 25
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 25
20497: PUSH
20498: LD_INT 2
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 25
20507: PUSH
20508: LD_INT 3
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 25
20517: PUSH
20518: LD_INT 4
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 25
20527: PUSH
20528: LD_INT 5
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 25
20537: PUSH
20538: LD_INT 8
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 25
20547: PUSH
20548: LD_INT 9
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: PPUSH
20565: CALL_OW 72
20569: ST_TO_ADDR
// for i in tmp do
20570: LD_ADDR_VAR 0 3
20574: PUSH
20575: LD_VAR 0 4
20579: PUSH
20580: FOR_IN
20581: IFFALSE 20612
// if GetTag ( i ) then
20583: LD_VAR 0 3
20587: PPUSH
20588: CALL_OW 110
20592: IFFALSE 20610
// tmp := tmp diff i ;
20594: LD_ADDR_VAR 0 4
20598: PUSH
20599: LD_VAR 0 4
20603: PUSH
20604: LD_VAR 0 3
20608: DIFF
20609: ST_TO_ADDR
20610: GO 20580
20612: POP
20613: POP
// if not tmp then
20614: LD_VAR 0 4
20618: NOT
20619: IFFALSE 20623
// exit ;
20621: GO 23637
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_EXP 50
20632: PUSH
20633: LD_VAR 0 1
20637: ARRAY
20638: PPUSH
20639: LD_INT 2
20641: PUSH
20642: LD_INT 25
20644: PUSH
20645: LD_INT 1
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 25
20654: PUSH
20655: LD_INT 5
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 25
20664: PUSH
20665: LD_INT 8
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 25
20674: PUSH
20675: LD_INT 9
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: PPUSH
20689: CALL_OW 72
20693: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
20694: LD_ADDR_VAR 0 6
20698: PUSH
20699: LD_EXP 50
20703: PUSH
20704: LD_VAR 0 1
20708: ARRAY
20709: PPUSH
20710: LD_INT 25
20712: PUSH
20713: LD_INT 2
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 72
20724: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
20725: LD_ADDR_VAR 0 7
20729: PUSH
20730: LD_EXP 50
20734: PUSH
20735: LD_VAR 0 1
20739: ARRAY
20740: PPUSH
20741: LD_INT 25
20743: PUSH
20744: LD_INT 3
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PPUSH
20751: CALL_OW 72
20755: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
20756: LD_ADDR_VAR 0 8
20760: PUSH
20761: LD_EXP 50
20765: PUSH
20766: LD_VAR 0 1
20770: ARRAY
20771: PPUSH
20772: LD_INT 25
20774: PUSH
20775: LD_INT 4
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 24
20784: PUSH
20785: LD_INT 251
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PPUSH
20796: CALL_OW 72
20800: ST_TO_ADDR
// if mc_scan [ base ] then
20801: LD_EXP 73
20805: PUSH
20806: LD_VAR 0 1
20810: ARRAY
20811: IFFALSE 21272
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
20813: LD_ADDR_EXP 92
20817: PUSH
20818: LD_EXP 92
20822: PPUSH
20823: LD_VAR 0 1
20827: PPUSH
20828: LD_INT 4
20830: PPUSH
20831: CALL_OW 1
20835: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
20836: LD_ADDR_VAR 0 12
20840: PUSH
20841: LD_EXP 50
20845: PUSH
20846: LD_VAR 0 1
20850: ARRAY
20851: PPUSH
20852: LD_INT 2
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 4
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 30
20867: PUSH
20868: LD_INT 5
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: LIST
20879: PPUSH
20880: CALL_OW 72
20884: ST_TO_ADDR
// if not b then
20885: LD_VAR 0 12
20889: NOT
20890: IFFALSE 20894
// exit ;
20892: GO 23637
// p := [ ] ;
20894: LD_ADDR_VAR 0 11
20898: PUSH
20899: EMPTY
20900: ST_TO_ADDR
// if sci >= 2 then
20901: LD_VAR 0 8
20905: PUSH
20906: LD_INT 2
20908: GREATEREQUAL
20909: IFFALSE 20940
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
20911: LD_ADDR_VAR 0 8
20915: PUSH
20916: LD_VAR 0 8
20920: PUSH
20921: LD_INT 1
20923: ARRAY
20924: PUSH
20925: LD_VAR 0 8
20929: PUSH
20930: LD_INT 2
20932: ARRAY
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: ST_TO_ADDR
20938: GO 21001
// if sci = 1 then
20940: LD_VAR 0 8
20944: PUSH
20945: LD_INT 1
20947: EQUAL
20948: IFFALSE 20969
// sci := [ sci [ 1 ] ] else
20950: LD_ADDR_VAR 0 8
20954: PUSH
20955: LD_VAR 0 8
20959: PUSH
20960: LD_INT 1
20962: ARRAY
20963: PUSH
20964: EMPTY
20965: LIST
20966: ST_TO_ADDR
20967: GO 21001
// if sci = 0 then
20969: LD_VAR 0 8
20973: PUSH
20974: LD_INT 0
20976: EQUAL
20977: IFFALSE 21001
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
20979: LD_ADDR_VAR 0 11
20983: PUSH
20984: LD_VAR 0 4
20988: PPUSH
20989: LD_INT 4
20991: PPUSH
20992: CALL 85349 0 2
20996: PUSH
20997: LD_INT 1
20999: ARRAY
21000: ST_TO_ADDR
// if eng > 4 then
21001: LD_VAR 0 6
21005: PUSH
21006: LD_INT 4
21008: GREATER
21009: IFFALSE 21055
// for i = eng downto 4 do
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: DOUBLE
21017: LD_VAR 0 6
21021: INC
21022: ST_TO_ADDR
21023: LD_INT 4
21025: PUSH
21026: FOR_DOWNTO
21027: IFFALSE 21053
// eng := eng diff eng [ i ] ;
21029: LD_ADDR_VAR 0 6
21033: PUSH
21034: LD_VAR 0 6
21038: PUSH
21039: LD_VAR 0 6
21043: PUSH
21044: LD_VAR 0 3
21048: ARRAY
21049: DIFF
21050: ST_TO_ADDR
21051: GO 21026
21053: POP
21054: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
21055: LD_ADDR_VAR 0 4
21059: PUSH
21060: LD_VAR 0 4
21064: PUSH
21065: LD_VAR 0 5
21069: PUSH
21070: LD_VAR 0 6
21074: UNION
21075: PUSH
21076: LD_VAR 0 7
21080: UNION
21081: PUSH
21082: LD_VAR 0 8
21086: UNION
21087: DIFF
21088: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
21089: LD_ADDR_VAR 0 13
21093: PUSH
21094: LD_EXP 50
21098: PUSH
21099: LD_VAR 0 1
21103: ARRAY
21104: PPUSH
21105: LD_INT 2
21107: PUSH
21108: LD_INT 30
21110: PUSH
21111: LD_INT 32
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 30
21120: PUSH
21121: LD_INT 31
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: PPUSH
21133: CALL_OW 72
21137: PUSH
21138: LD_EXP 50
21142: PUSH
21143: LD_VAR 0 1
21147: ARRAY
21148: PPUSH
21149: LD_INT 2
21151: PUSH
21152: LD_INT 30
21154: PUSH
21155: LD_INT 4
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 30
21164: PUSH
21165: LD_INT 5
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 72
21181: PUSH
21182: LD_INT 6
21184: MUL
21185: PLUS
21186: ST_TO_ADDR
// if bcount < tmp then
21187: LD_VAR 0 13
21191: PUSH
21192: LD_VAR 0 4
21196: LESS
21197: IFFALSE 21243
// for i = tmp downto bcount do
21199: LD_ADDR_VAR 0 3
21203: PUSH
21204: DOUBLE
21205: LD_VAR 0 4
21209: INC
21210: ST_TO_ADDR
21211: LD_VAR 0 13
21215: PUSH
21216: FOR_DOWNTO
21217: IFFALSE 21241
// tmp := Delete ( tmp , tmp ) ;
21219: LD_ADDR_VAR 0 4
21223: PUSH
21224: LD_VAR 0 4
21228: PPUSH
21229: LD_VAR 0 4
21233: PPUSH
21234: CALL_OW 3
21238: ST_TO_ADDR
21239: GO 21216
21241: POP
21242: POP
// result := [ tmp , 0 , 0 , p ] ;
21243: LD_ADDR_VAR 0 2
21247: PUSH
21248: LD_VAR 0 4
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 0
21258: PUSH
21259: LD_VAR 0 11
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: ST_TO_ADDR
// exit ;
21270: GO 23637
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21272: LD_EXP 50
21276: PUSH
21277: LD_VAR 0 1
21281: ARRAY
21282: PPUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 30
21288: PUSH
21289: LD_INT 6
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 30
21298: PUSH
21299: LD_INT 7
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 30
21308: PUSH
21309: LD_INT 8
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: PPUSH
21322: CALL_OW 72
21326: NOT
21327: PUSH
21328: LD_EXP 50
21332: PUSH
21333: LD_VAR 0 1
21337: ARRAY
21338: PPUSH
21339: LD_INT 30
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 72
21353: NOT
21354: AND
21355: IFFALSE 21427
// begin if eng = tmp then
21357: LD_VAR 0 6
21361: PUSH
21362: LD_VAR 0 4
21366: EQUAL
21367: IFFALSE 21371
// exit ;
21369: GO 23637
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
21371: LD_ADDR_EXP 92
21375: PUSH
21376: LD_EXP 92
21380: PPUSH
21381: LD_VAR 0 1
21385: PPUSH
21386: LD_INT 1
21388: PPUSH
21389: CALL_OW 1
21393: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_VAR 0 4
21406: PUSH
21407: LD_VAR 0 6
21411: DIFF
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: ST_TO_ADDR
// exit ;
21425: GO 23637
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21427: LD_EXP 77
21431: PUSH
21432: LD_EXP 76
21436: PUSH
21437: LD_VAR 0 1
21441: ARRAY
21442: ARRAY
21443: PUSH
21444: LD_EXP 50
21448: PUSH
21449: LD_VAR 0 1
21453: ARRAY
21454: PPUSH
21455: LD_INT 2
21457: PUSH
21458: LD_INT 30
21460: PUSH
21461: LD_INT 6
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 30
21470: PUSH
21471: LD_INT 7
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 30
21480: PUSH
21481: LD_INT 8
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PPUSH
21494: CALL_OW 72
21498: AND
21499: PUSH
21500: LD_EXP 50
21504: PUSH
21505: LD_VAR 0 1
21509: ARRAY
21510: PPUSH
21511: LD_INT 30
21513: PUSH
21514: LD_INT 3
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PPUSH
21521: CALL_OW 72
21525: NOT
21526: AND
21527: IFFALSE 21741
// begin if sci >= 6 then
21529: LD_VAR 0 8
21533: PUSH
21534: LD_INT 6
21536: GREATEREQUAL
21537: IFFALSE 21541
// exit ;
21539: GO 23637
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
21541: LD_ADDR_EXP 92
21545: PUSH
21546: LD_EXP 92
21550: PPUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: LD_INT 2
21558: PPUSH
21559: CALL_OW 1
21563: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
21564: LD_ADDR_VAR 0 9
21568: PUSH
21569: LD_VAR 0 4
21573: PUSH
21574: LD_VAR 0 8
21578: DIFF
21579: PPUSH
21580: LD_INT 4
21582: PPUSH
21583: CALL 85349 0 2
21587: ST_TO_ADDR
// p := [ ] ;
21588: LD_ADDR_VAR 0 11
21592: PUSH
21593: EMPTY
21594: ST_TO_ADDR
// if sci < 6 and sort > 6 then
21595: LD_VAR 0 8
21599: PUSH
21600: LD_INT 6
21602: LESS
21603: PUSH
21604: LD_VAR 0 9
21608: PUSH
21609: LD_INT 6
21611: GREATER
21612: AND
21613: IFFALSE 21694
// begin for i = 1 to 6 - sci do
21615: LD_ADDR_VAR 0 3
21619: PUSH
21620: DOUBLE
21621: LD_INT 1
21623: DEC
21624: ST_TO_ADDR
21625: LD_INT 6
21627: PUSH
21628: LD_VAR 0 8
21632: MINUS
21633: PUSH
21634: FOR_TO
21635: IFFALSE 21690
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
21637: LD_ADDR_VAR 0 11
21641: PUSH
21642: LD_VAR 0 11
21646: PPUSH
21647: LD_VAR 0 11
21651: PUSH
21652: LD_INT 1
21654: PLUS
21655: PPUSH
21656: LD_VAR 0 9
21660: PUSH
21661: LD_INT 1
21663: ARRAY
21664: PPUSH
21665: CALL_OW 2
21669: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
21670: LD_ADDR_VAR 0 9
21674: PUSH
21675: LD_VAR 0 9
21679: PPUSH
21680: LD_INT 1
21682: PPUSH
21683: CALL_OW 3
21687: ST_TO_ADDR
// end ;
21688: GO 21634
21690: POP
21691: POP
// end else
21692: GO 21714
// if sort then
21694: LD_VAR 0 9
21698: IFFALSE 21714
// p := sort [ 1 ] ;
21700: LD_ADDR_VAR 0 11
21704: PUSH
21705: LD_VAR 0 9
21709: PUSH
21710: LD_INT 1
21712: ARRAY
21713: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: LD_INT 0
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: LD_VAR 0 11
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: ST_TO_ADDR
// exit ;
21739: GO 23637
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
21741: LD_EXP 77
21745: PUSH
21746: LD_EXP 76
21750: PUSH
21751: LD_VAR 0 1
21755: ARRAY
21756: ARRAY
21757: PUSH
21758: LD_EXP 50
21762: PUSH
21763: LD_VAR 0 1
21767: ARRAY
21768: PPUSH
21769: LD_INT 2
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 6
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 30
21784: PUSH
21785: LD_INT 7
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 30
21794: PUSH
21795: LD_INT 8
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 72
21812: AND
21813: PUSH
21814: LD_EXP 50
21818: PUSH
21819: LD_VAR 0 1
21823: ARRAY
21824: PPUSH
21825: LD_INT 30
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PPUSH
21835: CALL_OW 72
21839: AND
21840: IFFALSE 22367
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
21842: LD_ADDR_EXP 92
21846: PUSH
21847: LD_EXP 92
21851: PPUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: LD_INT 3
21859: PPUSH
21860: CALL_OW 1
21864: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: ST_TO_ADDR
// if not eng then
21888: LD_VAR 0 6
21892: NOT
21893: IFFALSE 21956
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
21895: LD_ADDR_VAR 0 11
21899: PUSH
21900: LD_VAR 0 4
21904: PPUSH
21905: LD_INT 2
21907: PPUSH
21908: CALL 85349 0 2
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
21917: LD_ADDR_VAR 0 2
21921: PUSH
21922: LD_VAR 0 2
21926: PPUSH
21927: LD_INT 2
21929: PPUSH
21930: LD_VAR 0 11
21934: PPUSH
21935: CALL_OW 1
21939: ST_TO_ADDR
// tmp := tmp diff p ;
21940: LD_ADDR_VAR 0 4
21944: PUSH
21945: LD_VAR 0 4
21949: PUSH
21950: LD_VAR 0 11
21954: DIFF
21955: ST_TO_ADDR
// end ; if not eng then
21956: LD_VAR 0 6
21960: NOT
21961: IFFALSE 21987
// tmp := tmp diff ( mech union sci ) else
21963: LD_ADDR_VAR 0 4
21967: PUSH
21968: LD_VAR 0 4
21972: PUSH
21973: LD_VAR 0 7
21977: PUSH
21978: LD_VAR 0 8
21982: UNION
21983: DIFF
21984: ST_TO_ADDR
21985: GO 22019
// tmp := tmp diff ( eng [ 1 ] union mech union sci ) ;
21987: LD_ADDR_VAR 0 4
21991: PUSH
21992: LD_VAR 0 4
21996: PUSH
21997: LD_VAR 0 6
22001: PUSH
22002: LD_INT 1
22004: ARRAY
22005: PUSH
22006: LD_VAR 0 7
22010: UNION
22011: PUSH
22012: LD_VAR 0 8
22016: UNION
22017: DIFF
22018: ST_TO_ADDR
// if tmp and sci < 6 then
22019: LD_VAR 0 4
22023: PUSH
22024: LD_VAR 0 8
22028: PUSH
22029: LD_INT 6
22031: LESS
22032: AND
22033: IFFALSE 22192
// begin sort := SortBySkill ( tmp , 4 ) ;
22035: LD_ADDR_VAR 0 9
22039: PUSH
22040: LD_VAR 0 4
22044: PPUSH
22045: LD_INT 4
22047: PPUSH
22048: CALL 85349 0 2
22052: ST_TO_ADDR
// p := [ ] ;
22053: LD_ADDR_VAR 0 11
22057: PUSH
22058: EMPTY
22059: ST_TO_ADDR
// if sort then
22060: LD_VAR 0 9
22064: IFFALSE 22163
// for i = 1 to 6 - sci do
22066: LD_ADDR_VAR 0 3
22070: PUSH
22071: DOUBLE
22072: LD_INT 1
22074: DEC
22075: ST_TO_ADDR
22076: LD_INT 6
22078: PUSH
22079: LD_VAR 0 8
22083: MINUS
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22161
// begin if i = sort then
22088: LD_VAR 0 3
22092: PUSH
22093: LD_VAR 0 9
22097: EQUAL
22098: IFFALSE 22102
// break ;
22100: GO 22161
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22102: LD_ADDR_VAR 0 11
22106: PUSH
22107: LD_VAR 0 11
22111: PPUSH
22112: LD_VAR 0 11
22116: PUSH
22117: LD_INT 1
22119: PLUS
22120: PPUSH
22121: LD_VAR 0 9
22125: PUSH
22126: LD_VAR 0 3
22130: ARRAY
22131: PPUSH
22132: CALL_OW 2
22136: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22137: LD_ADDR_VAR 0 4
22141: PUSH
22142: LD_VAR 0 4
22146: PUSH
22147: LD_VAR 0 9
22151: PUSH
22152: LD_VAR 0 3
22156: ARRAY
22157: DIFF
22158: ST_TO_ADDR
// end ;
22159: GO 22085
22161: POP
22162: POP
// if p then
22163: LD_VAR 0 11
22167: IFFALSE 22192
// result := Replace ( result , 4 , p ) ;
22169: LD_ADDR_VAR 0 2
22173: PUSH
22174: LD_VAR 0 2
22178: PPUSH
22179: LD_INT 4
22181: PPUSH
22182: LD_VAR 0 11
22186: PPUSH
22187: CALL_OW 1
22191: ST_TO_ADDR
// end ; if tmp and mech < 6 then
22192: LD_VAR 0 4
22196: PUSH
22197: LD_VAR 0 7
22201: PUSH
22202: LD_INT 6
22204: LESS
22205: AND
22206: IFFALSE 22365
// begin sort := SortBySkill ( tmp , 3 ) ;
22208: LD_ADDR_VAR 0 9
22212: PUSH
22213: LD_VAR 0 4
22217: PPUSH
22218: LD_INT 3
22220: PPUSH
22221: CALL 85349 0 2
22225: ST_TO_ADDR
// p := [ ] ;
22226: LD_ADDR_VAR 0 11
22230: PUSH
22231: EMPTY
22232: ST_TO_ADDR
// if sort then
22233: LD_VAR 0 9
22237: IFFALSE 22336
// for i = 1 to 6 - mech do
22239: LD_ADDR_VAR 0 3
22243: PUSH
22244: DOUBLE
22245: LD_INT 1
22247: DEC
22248: ST_TO_ADDR
22249: LD_INT 6
22251: PUSH
22252: LD_VAR 0 7
22256: MINUS
22257: PUSH
22258: FOR_TO
22259: IFFALSE 22334
// begin if i = sort then
22261: LD_VAR 0 3
22265: PUSH
22266: LD_VAR 0 9
22270: EQUAL
22271: IFFALSE 22275
// break ;
22273: GO 22334
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22275: LD_ADDR_VAR 0 11
22279: PUSH
22280: LD_VAR 0 11
22284: PPUSH
22285: LD_VAR 0 11
22289: PUSH
22290: LD_INT 1
22292: PLUS
22293: PPUSH
22294: LD_VAR 0 9
22298: PUSH
22299: LD_VAR 0 3
22303: ARRAY
22304: PPUSH
22305: CALL_OW 2
22309: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22310: LD_ADDR_VAR 0 4
22314: PUSH
22315: LD_VAR 0 4
22319: PUSH
22320: LD_VAR 0 9
22324: PUSH
22325: LD_VAR 0 3
22329: ARRAY
22330: DIFF
22331: ST_TO_ADDR
// end ;
22332: GO 22258
22334: POP
22335: POP
// if p then
22336: LD_VAR 0 11
22340: IFFALSE 22365
// result := Replace ( result , 3 , p ) ;
22342: LD_ADDR_VAR 0 2
22346: PUSH
22347: LD_VAR 0 2
22351: PPUSH
22352: LD_INT 3
22354: PPUSH
22355: LD_VAR 0 11
22359: PPUSH
22360: CALL_OW 1
22364: ST_TO_ADDR
// end ; exit ;
22365: GO 23637
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
22367: LD_EXP 77
22371: PUSH
22372: LD_EXP 76
22376: PUSH
22377: LD_VAR 0 1
22381: ARRAY
22382: ARRAY
22383: NOT
22384: PUSH
22385: LD_EXP 50
22389: PUSH
22390: LD_VAR 0 1
22394: ARRAY
22395: PPUSH
22396: LD_INT 30
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 72
22410: AND
22411: PUSH
22412: LD_EXP 55
22416: PUSH
22417: LD_VAR 0 1
22421: ARRAY
22422: AND
22423: IFFALSE 22967
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
22425: LD_ADDR_EXP 92
22429: PUSH
22430: LD_EXP 92
22434: PPUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: LD_INT 5
22442: PPUSH
22443: CALL_OW 1
22447: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
22448: LD_ADDR_VAR 0 2
22452: PUSH
22453: LD_INT 0
22455: PUSH
22456: LD_INT 0
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// if sci > 1 then
22471: LD_VAR 0 8
22475: PUSH
22476: LD_INT 1
22478: GREATER
22479: IFFALSE 22507
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
22481: LD_ADDR_VAR 0 4
22485: PUSH
22486: LD_VAR 0 4
22490: PUSH
22491: LD_VAR 0 8
22495: PUSH
22496: LD_VAR 0 8
22500: PUSH
22501: LD_INT 1
22503: ARRAY
22504: DIFF
22505: DIFF
22506: ST_TO_ADDR
// if tmp and not sci then
22507: LD_VAR 0 4
22511: PUSH
22512: LD_VAR 0 8
22516: NOT
22517: AND
22518: IFFALSE 22587
// begin sort := SortBySkill ( tmp , 4 ) ;
22520: LD_ADDR_VAR 0 9
22524: PUSH
22525: LD_VAR 0 4
22529: PPUSH
22530: LD_INT 4
22532: PPUSH
22533: CALL 85349 0 2
22537: ST_TO_ADDR
// if sort then
22538: LD_VAR 0 9
22542: IFFALSE 22558
// p := sort [ 1 ] ;
22544: LD_ADDR_VAR 0 11
22548: PUSH
22549: LD_VAR 0 9
22553: PUSH
22554: LD_INT 1
22556: ARRAY
22557: ST_TO_ADDR
// if p then
22558: LD_VAR 0 11
22562: IFFALSE 22587
// result := Replace ( result , 4 , p ) ;
22564: LD_ADDR_VAR 0 2
22568: PUSH
22569: LD_VAR 0 2
22573: PPUSH
22574: LD_INT 4
22576: PPUSH
22577: LD_VAR 0 11
22581: PPUSH
22582: CALL_OW 1
22586: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
22587: LD_ADDR_VAR 0 4
22591: PUSH
22592: LD_VAR 0 4
22596: PUSH
22597: LD_VAR 0 7
22601: DIFF
22602: ST_TO_ADDR
// if tmp and mech < 6 then
22603: LD_VAR 0 4
22607: PUSH
22608: LD_VAR 0 7
22612: PUSH
22613: LD_INT 6
22615: LESS
22616: AND
22617: IFFALSE 22776
// begin sort := SortBySkill ( tmp , 3 ) ;
22619: LD_ADDR_VAR 0 9
22623: PUSH
22624: LD_VAR 0 4
22628: PPUSH
22629: LD_INT 3
22631: PPUSH
22632: CALL 85349 0 2
22636: ST_TO_ADDR
// p := [ ] ;
22637: LD_ADDR_VAR 0 11
22641: PUSH
22642: EMPTY
22643: ST_TO_ADDR
// if sort then
22644: LD_VAR 0 9
22648: IFFALSE 22747
// for i = 1 to 6 - mech do
22650: LD_ADDR_VAR 0 3
22654: PUSH
22655: DOUBLE
22656: LD_INT 1
22658: DEC
22659: ST_TO_ADDR
22660: LD_INT 6
22662: PUSH
22663: LD_VAR 0 7
22667: MINUS
22668: PUSH
22669: FOR_TO
22670: IFFALSE 22745
// begin if i = sort then
22672: LD_VAR 0 3
22676: PUSH
22677: LD_VAR 0 9
22681: EQUAL
22682: IFFALSE 22686
// break ;
22684: GO 22745
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22686: LD_ADDR_VAR 0 11
22690: PUSH
22691: LD_VAR 0 11
22695: PPUSH
22696: LD_VAR 0 11
22700: PUSH
22701: LD_INT 1
22703: PLUS
22704: PPUSH
22705: LD_VAR 0 9
22709: PUSH
22710: LD_VAR 0 3
22714: ARRAY
22715: PPUSH
22716: CALL_OW 2
22720: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22721: LD_ADDR_VAR 0 4
22725: PUSH
22726: LD_VAR 0 4
22730: PUSH
22731: LD_VAR 0 9
22735: PUSH
22736: LD_VAR 0 3
22740: ARRAY
22741: DIFF
22742: ST_TO_ADDR
// end ;
22743: GO 22669
22745: POP
22746: POP
// if p then
22747: LD_VAR 0 11
22751: IFFALSE 22776
// result := Replace ( result , 3 , p ) ;
22753: LD_ADDR_VAR 0 2
22757: PUSH
22758: LD_VAR 0 2
22762: PPUSH
22763: LD_INT 3
22765: PPUSH
22766: LD_VAR 0 11
22770: PPUSH
22771: CALL_OW 1
22775: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
22776: LD_ADDR_VAR 0 4
22780: PUSH
22781: LD_VAR 0 4
22785: PUSH
22786: LD_VAR 0 6
22790: DIFF
22791: ST_TO_ADDR
// if tmp and eng < 6 then
22792: LD_VAR 0 4
22796: PUSH
22797: LD_VAR 0 6
22801: PUSH
22802: LD_INT 6
22804: LESS
22805: AND
22806: IFFALSE 22965
// begin sort := SortBySkill ( tmp , 2 ) ;
22808: LD_ADDR_VAR 0 9
22812: PUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: LD_INT 2
22820: PPUSH
22821: CALL 85349 0 2
22825: ST_TO_ADDR
// p := [ ] ;
22826: LD_ADDR_VAR 0 11
22830: PUSH
22831: EMPTY
22832: ST_TO_ADDR
// if sort then
22833: LD_VAR 0 9
22837: IFFALSE 22936
// for i = 1 to 6 - eng do
22839: LD_ADDR_VAR 0 3
22843: PUSH
22844: DOUBLE
22845: LD_INT 1
22847: DEC
22848: ST_TO_ADDR
22849: LD_INT 6
22851: PUSH
22852: LD_VAR 0 6
22856: MINUS
22857: PUSH
22858: FOR_TO
22859: IFFALSE 22934
// begin if i = sort then
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 9
22870: EQUAL
22871: IFFALSE 22875
// break ;
22873: GO 22934
// p := Insert ( p , p + 1 , sort [ i ] ) ;
22875: LD_ADDR_VAR 0 11
22879: PUSH
22880: LD_VAR 0 11
22884: PPUSH
22885: LD_VAR 0 11
22889: PUSH
22890: LD_INT 1
22892: PLUS
22893: PPUSH
22894: LD_VAR 0 9
22898: PUSH
22899: LD_VAR 0 3
22903: ARRAY
22904: PPUSH
22905: CALL_OW 2
22909: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
22910: LD_ADDR_VAR 0 4
22914: PUSH
22915: LD_VAR 0 4
22919: PUSH
22920: LD_VAR 0 9
22924: PUSH
22925: LD_VAR 0 3
22929: ARRAY
22930: DIFF
22931: ST_TO_ADDR
// end ;
22932: GO 22858
22934: POP
22935: POP
// if p then
22936: LD_VAR 0 11
22940: IFFALSE 22965
// result := Replace ( result , 2 , p ) ;
22942: LD_ADDR_VAR 0 2
22946: PUSH
22947: LD_VAR 0 2
22951: PPUSH
22952: LD_INT 2
22954: PPUSH
22955: LD_VAR 0 11
22959: PPUSH
22960: CALL_OW 1
22964: ST_TO_ADDR
// end ; exit ;
22965: GO 23637
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
22967: LD_EXP 77
22971: PUSH
22972: LD_EXP 76
22976: PUSH
22977: LD_VAR 0 1
22981: ARRAY
22982: ARRAY
22983: NOT
22984: PUSH
22985: LD_EXP 50
22989: PUSH
22990: LD_VAR 0 1
22994: ARRAY
22995: PPUSH
22996: LD_INT 30
22998: PUSH
22999: LD_INT 3
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PPUSH
23006: CALL_OW 72
23010: AND
23011: PUSH
23012: LD_EXP 55
23016: PUSH
23017: LD_VAR 0 1
23021: ARRAY
23022: NOT
23023: AND
23024: IFFALSE 23637
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
23026: LD_ADDR_EXP 92
23030: PUSH
23031: LD_EXP 92
23035: PPUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: LD_INT 6
23043: PPUSH
23044: CALL_OW 1
23048: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23049: LD_ADDR_VAR 0 2
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: LD_INT 0
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: ST_TO_ADDR
// if sci >= 1 then
23072: LD_VAR 0 8
23076: PUSH
23077: LD_INT 1
23079: GREATEREQUAL
23080: IFFALSE 23102
// tmp := tmp diff sci [ 1 ] ;
23082: LD_ADDR_VAR 0 4
23086: PUSH
23087: LD_VAR 0 4
23091: PUSH
23092: LD_VAR 0 8
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: DIFF
23101: ST_TO_ADDR
// if tmp and not sci then
23102: LD_VAR 0 4
23106: PUSH
23107: LD_VAR 0 8
23111: NOT
23112: AND
23113: IFFALSE 23182
// begin sort := SortBySkill ( tmp , 4 ) ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_VAR 0 4
23124: PPUSH
23125: LD_INT 4
23127: PPUSH
23128: CALL 85349 0 2
23132: ST_TO_ADDR
// if sort then
23133: LD_VAR 0 9
23137: IFFALSE 23153
// p := sort [ 1 ] ;
23139: LD_ADDR_VAR 0 11
23143: PUSH
23144: LD_VAR 0 9
23148: PUSH
23149: LD_INT 1
23151: ARRAY
23152: ST_TO_ADDR
// if p then
23153: LD_VAR 0 11
23157: IFFALSE 23182
// result := Replace ( result , 4 , p ) ;
23159: LD_ADDR_VAR 0 2
23163: PUSH
23164: LD_VAR 0 2
23168: PPUSH
23169: LD_INT 4
23171: PPUSH
23172: LD_VAR 0 11
23176: PPUSH
23177: CALL_OW 1
23181: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
23182: LD_ADDR_VAR 0 4
23186: PUSH
23187: LD_VAR 0 4
23191: PUSH
23192: LD_VAR 0 7
23196: DIFF
23197: ST_TO_ADDR
// if tmp and mech < 6 then
23198: LD_VAR 0 4
23202: PUSH
23203: LD_VAR 0 7
23207: PUSH
23208: LD_INT 6
23210: LESS
23211: AND
23212: IFFALSE 23371
// begin sort := SortBySkill ( tmp , 3 ) ;
23214: LD_ADDR_VAR 0 9
23218: PUSH
23219: LD_VAR 0 4
23223: PPUSH
23224: LD_INT 3
23226: PPUSH
23227: CALL 85349 0 2
23231: ST_TO_ADDR
// p := [ ] ;
23232: LD_ADDR_VAR 0 11
23236: PUSH
23237: EMPTY
23238: ST_TO_ADDR
// if sort then
23239: LD_VAR 0 9
23243: IFFALSE 23342
// for i = 1 to 6 - mech do
23245: LD_ADDR_VAR 0 3
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 6
23257: PUSH
23258: LD_VAR 0 7
23262: MINUS
23263: PUSH
23264: FOR_TO
23265: IFFALSE 23340
// begin if i = sort then
23267: LD_VAR 0 3
23271: PUSH
23272: LD_VAR 0 9
23276: EQUAL
23277: IFFALSE 23281
// break ;
23279: GO 23340
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23281: LD_ADDR_VAR 0 11
23285: PUSH
23286: LD_VAR 0 11
23290: PPUSH
23291: LD_VAR 0 11
23295: PUSH
23296: LD_INT 1
23298: PLUS
23299: PPUSH
23300: LD_VAR 0 9
23304: PUSH
23305: LD_VAR 0 3
23309: ARRAY
23310: PPUSH
23311: CALL_OW 2
23315: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23316: LD_ADDR_VAR 0 4
23320: PUSH
23321: LD_VAR 0 4
23325: PUSH
23326: LD_VAR 0 9
23330: PUSH
23331: LD_VAR 0 3
23335: ARRAY
23336: DIFF
23337: ST_TO_ADDR
// end ;
23338: GO 23264
23340: POP
23341: POP
// if p then
23342: LD_VAR 0 11
23346: IFFALSE 23371
// result := Replace ( result , 3 , p ) ;
23348: LD_ADDR_VAR 0 2
23352: PUSH
23353: LD_VAR 0 2
23357: PPUSH
23358: LD_INT 3
23360: PPUSH
23361: LD_VAR 0 11
23365: PPUSH
23366: CALL_OW 1
23370: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
23371: LD_ADDR_VAR 0 4
23375: PUSH
23376: LD_VAR 0 4
23380: PUSH
23381: LD_VAR 0 6
23385: DIFF
23386: ST_TO_ADDR
// if tmp and eng < 4 then
23387: LD_VAR 0 4
23391: PUSH
23392: LD_VAR 0 6
23396: PUSH
23397: LD_INT 4
23399: LESS
23400: AND
23401: IFFALSE 23562
// begin sort := SortBySkill ( tmp , 2 ) ;
23403: LD_ADDR_VAR 0 9
23407: PUSH
23408: LD_VAR 0 4
23412: PPUSH
23413: LD_INT 2
23415: PPUSH
23416: CALL 85349 0 2
23420: ST_TO_ADDR
// p := [ ] ;
23421: LD_ADDR_VAR 0 11
23425: PUSH
23426: EMPTY
23427: ST_TO_ADDR
// if sort then
23428: LD_VAR 0 9
23432: IFFALSE 23531
// for i = 1 to 4 - eng do
23434: LD_ADDR_VAR 0 3
23438: PUSH
23439: DOUBLE
23440: LD_INT 1
23442: DEC
23443: ST_TO_ADDR
23444: LD_INT 4
23446: PUSH
23447: LD_VAR 0 6
23451: MINUS
23452: PUSH
23453: FOR_TO
23454: IFFALSE 23529
// begin if i = sort then
23456: LD_VAR 0 3
23460: PUSH
23461: LD_VAR 0 9
23465: EQUAL
23466: IFFALSE 23470
// break ;
23468: GO 23529
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23470: LD_ADDR_VAR 0 11
23474: PUSH
23475: LD_VAR 0 11
23479: PPUSH
23480: LD_VAR 0 11
23484: PUSH
23485: LD_INT 1
23487: PLUS
23488: PPUSH
23489: LD_VAR 0 9
23493: PUSH
23494: LD_VAR 0 3
23498: ARRAY
23499: PPUSH
23500: CALL_OW 2
23504: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23505: LD_ADDR_VAR 0 4
23509: PUSH
23510: LD_VAR 0 4
23514: PUSH
23515: LD_VAR 0 9
23519: PUSH
23520: LD_VAR 0 3
23524: ARRAY
23525: DIFF
23526: ST_TO_ADDR
// end ;
23527: GO 23453
23529: POP
23530: POP
// if p then
23531: LD_VAR 0 11
23535: IFFALSE 23560
// result := Replace ( result , 2 , p ) ;
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_VAR 0 2
23546: PPUSH
23547: LD_INT 2
23549: PPUSH
23550: LD_VAR 0 11
23554: PPUSH
23555: CALL_OW 1
23559: ST_TO_ADDR
// end else
23560: GO 23606
// for i = eng downto 5 do
23562: LD_ADDR_VAR 0 3
23566: PUSH
23567: DOUBLE
23568: LD_VAR 0 6
23572: INC
23573: ST_TO_ADDR
23574: LD_INT 5
23576: PUSH
23577: FOR_DOWNTO
23578: IFFALSE 23604
// tmp := tmp union eng [ i ] ;
23580: LD_ADDR_VAR 0 4
23584: PUSH
23585: LD_VAR 0 4
23589: PUSH
23590: LD_VAR 0 6
23594: PUSH
23595: LD_VAR 0 3
23599: ARRAY
23600: UNION
23601: ST_TO_ADDR
23602: GO 23577
23604: POP
23605: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
23606: LD_ADDR_VAR 0 2
23610: PUSH
23611: LD_VAR 0 2
23615: PPUSH
23616: LD_INT 1
23618: PPUSH
23619: LD_VAR 0 4
23623: PUSH
23624: LD_VAR 0 5
23628: DIFF
23629: PPUSH
23630: CALL_OW 1
23634: ST_TO_ADDR
// exit ;
23635: GO 23637
// end ; end ;
23637: LD_VAR 0 2
23641: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
23646: PPUSH
// if not mc_bases then
23647: LD_EXP 50
23651: NOT
23652: IFFALSE 23656
// exit ;
23654: GO 23762
// for i = 1 to mc_bases do
23656: LD_ADDR_VAR 0 2
23660: PUSH
23661: DOUBLE
23662: LD_INT 1
23664: DEC
23665: ST_TO_ADDR
23666: LD_EXP 50
23670: PUSH
23671: FOR_TO
23672: IFFALSE 23753
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23674: LD_ADDR_VAR 0 3
23678: PUSH
23679: LD_EXP 50
23683: PUSH
23684: LD_VAR 0 2
23688: ARRAY
23689: PPUSH
23690: LD_INT 21
23692: PUSH
23693: LD_INT 3
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: LD_INT 24
23705: PUSH
23706: LD_INT 1000
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PPUSH
23721: CALL_OW 72
23725: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
23726: LD_ADDR_EXP 51
23730: PUSH
23731: LD_EXP 51
23735: PPUSH
23736: LD_VAR 0 2
23740: PPUSH
23741: LD_VAR 0 3
23745: PPUSH
23746: CALL_OW 1
23750: ST_TO_ADDR
// end ;
23751: GO 23671
23753: POP
23754: POP
// RaiseSailEvent ( 101 ) ;
23755: LD_INT 101
23757: PPUSH
23758: CALL_OW 427
// end ;
23762: LD_VAR 0 1
23766: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
23767: LD_INT 0
23769: PPUSH
23770: PPUSH
23771: PPUSH
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
// if not mc_bases then
23776: LD_EXP 50
23780: NOT
23781: IFFALSE 23785
// exit ;
23783: GO 24358
// for i = 1 to mc_bases do
23785: LD_ADDR_VAR 0 2
23789: PUSH
23790: DOUBLE
23791: LD_INT 1
23793: DEC
23794: ST_TO_ADDR
23795: LD_EXP 50
23799: PUSH
23800: FOR_TO
23801: IFFALSE 24349
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
23803: LD_ADDR_VAR 0 5
23807: PUSH
23808: LD_EXP 50
23812: PUSH
23813: LD_VAR 0 2
23817: ARRAY
23818: PUSH
23819: LD_EXP 79
23823: PUSH
23824: LD_VAR 0 2
23828: ARRAY
23829: UNION
23830: PPUSH
23831: LD_INT 21
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 1
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 54
23849: PUSH
23850: EMPTY
23851: LIST
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 3
23859: PUSH
23860: LD_INT 24
23862: PUSH
23863: LD_INT 750
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PPUSH
23883: CALL_OW 72
23887: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
23888: LD_ADDR_VAR 0 6
23892: PUSH
23893: LD_EXP 50
23897: PUSH
23898: LD_VAR 0 2
23902: ARRAY
23903: PPUSH
23904: LD_INT 21
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 54
23922: PUSH
23923: EMPTY
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 3
23932: PUSH
23933: LD_INT 24
23935: PUSH
23936: LD_INT 250
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PPUSH
23956: CALL_OW 72
23960: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
23961: LD_ADDR_VAR 0 7
23965: PUSH
23966: LD_VAR 0 5
23970: PUSH
23971: LD_VAR 0 6
23975: DIFF
23976: ST_TO_ADDR
// if not need_heal_1 then
23977: LD_VAR 0 6
23981: NOT
23982: IFFALSE 24015
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
23984: LD_ADDR_EXP 53
23988: PUSH
23989: LD_EXP 53
23993: PPUSH
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PPUSH
24006: EMPTY
24007: PPUSH
24008: CALL 51164 0 3
24012: ST_TO_ADDR
24013: GO 24085
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
24015: LD_ADDR_EXP 53
24019: PUSH
24020: LD_EXP 53
24024: PPUSH
24025: LD_VAR 0 2
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PPUSH
24037: LD_EXP 53
24041: PUSH
24042: LD_VAR 0 2
24046: ARRAY
24047: PUSH
24048: LD_INT 1
24050: ARRAY
24051: PPUSH
24052: LD_INT 3
24054: PUSH
24055: LD_INT 24
24057: PUSH
24058: LD_INT 1000
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 72
24073: PUSH
24074: LD_VAR 0 6
24078: UNION
24079: PPUSH
24080: CALL 51164 0 3
24084: ST_TO_ADDR
// if not need_heal_2 then
24085: LD_VAR 0 7
24089: NOT
24090: IFFALSE 24123
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
24092: LD_ADDR_EXP 53
24096: PUSH
24097: LD_EXP 53
24101: PPUSH
24102: LD_VAR 0 2
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PPUSH
24114: EMPTY
24115: PPUSH
24116: CALL 51164 0 3
24120: ST_TO_ADDR
24121: GO 24155
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
24123: LD_ADDR_EXP 53
24127: PUSH
24128: LD_EXP 53
24132: PPUSH
24133: LD_VAR 0 2
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PPUSH
24145: LD_VAR 0 7
24149: PPUSH
24150: CALL 51164 0 3
24154: ST_TO_ADDR
// if need_heal_2 then
24155: LD_VAR 0 7
24159: IFFALSE 24331
// for j in need_heal_2 do
24161: LD_ADDR_VAR 0 3
24165: PUSH
24166: LD_VAR 0 7
24170: PUSH
24171: FOR_IN
24172: IFFALSE 24329
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
24174: LD_ADDR_VAR 0 5
24178: PUSH
24179: LD_EXP 50
24183: PUSH
24184: LD_VAR 0 2
24188: ARRAY
24189: PPUSH
24190: LD_INT 2
24192: PUSH
24193: LD_INT 30
24195: PUSH
24196: LD_INT 6
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 30
24205: PUSH
24206: LD_INT 7
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 30
24215: PUSH
24216: LD_INT 8
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 30
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 4
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: PPUSH
24262: CALL_OW 72
24266: ST_TO_ADDR
// if tmp then
24267: LD_VAR 0 5
24271: IFFALSE 24327
// begin k := NearestUnitToUnit ( tmp , j ) ;
24273: LD_ADDR_VAR 0 4
24277: PUSH
24278: LD_VAR 0 5
24282: PPUSH
24283: LD_VAR 0 3
24287: PPUSH
24288: CALL_OW 74
24292: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
24293: LD_VAR 0 3
24297: PPUSH
24298: LD_VAR 0 4
24302: PPUSH
24303: CALL_OW 296
24307: PUSH
24308: LD_INT 7
24310: GREATER
24311: IFFALSE 24327
// ComMoveUnit ( j , k ) ;
24313: LD_VAR 0 3
24317: PPUSH
24318: LD_VAR 0 4
24322: PPUSH
24323: CALL_OW 112
// end ; end ;
24327: GO 24171
24329: POP
24330: POP
// if not need_heal_1 and not need_heal_2 then
24331: LD_VAR 0 6
24335: NOT
24336: PUSH
24337: LD_VAR 0 7
24341: NOT
24342: AND
24343: IFFALSE 24347
// continue ;
24345: GO 23800
// end ;
24347: GO 23800
24349: POP
24350: POP
// RaiseSailEvent ( 102 ) ;
24351: LD_INT 102
24353: PPUSH
24354: CALL_OW 427
// end ;
24358: LD_VAR 0 1
24362: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
24363: LD_INT 0
24365: PPUSH
24366: PPUSH
24367: PPUSH
24368: PPUSH
24369: PPUSH
// if not mc_bases then
24370: LD_EXP 50
24374: NOT
24375: IFFALSE 24379
// exit ;
24377: GO 24764
// for i = 1 to mc_bases do
24379: LD_ADDR_VAR 0 2
24383: PUSH
24384: DOUBLE
24385: LD_INT 1
24387: DEC
24388: ST_TO_ADDR
24389: LD_EXP 50
24393: PUSH
24394: FOR_TO
24395: IFFALSE 24762
// begin if not mc_building_need_repair [ i ] then
24397: LD_EXP 51
24401: PUSH
24402: LD_VAR 0 2
24406: ARRAY
24407: NOT
24408: IFFALSE 24446
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
24410: LD_ADDR_EXP 52
24414: PUSH
24415: LD_EXP 52
24419: PPUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: EMPTY
24426: PPUSH
24427: CALL_OW 1
24431: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_INT 101
24439: PPUSH
24440: CALL 19807 0 2
// continue ;
24444: GO 24394
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
24446: LD_ADDR_EXP 56
24450: PUSH
24451: LD_EXP 56
24455: PPUSH
24456: LD_VAR 0 2
24460: PPUSH
24461: EMPTY
24462: PPUSH
24463: CALL_OW 1
24467: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
24468: LD_VAR 0 2
24472: PPUSH
24473: LD_INT 103
24475: PPUSH
24476: CALL 19807 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
24480: LD_ADDR_VAR 0 5
24484: PUSH
24485: LD_EXP 50
24489: PUSH
24490: LD_VAR 0 2
24494: ARRAY
24495: PUSH
24496: LD_EXP 79
24500: PUSH
24501: LD_VAR 0 2
24505: ARRAY
24506: UNION
24507: PPUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 25
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 25
24523: PUSH
24524: LD_INT 16
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: PPUSH
24539: CALL_OW 72
24543: ST_TO_ADDR
// if not tmp then
24544: LD_VAR 0 5
24548: NOT
24549: IFFALSE 24553
// continue ;
24551: GO 24394
// for j in tmp do
24553: LD_ADDR_VAR 0 3
24557: PUSH
24558: LD_VAR 0 5
24562: PUSH
24563: FOR_IN
24564: IFFALSE 24758
// begin if mc_need_heal [ i ] then
24566: LD_EXP 53
24570: PUSH
24571: LD_VAR 0 2
24575: ARRAY
24576: IFFALSE 24624
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
24578: LD_VAR 0 3
24582: PUSH
24583: LD_EXP 53
24587: PUSH
24588: LD_VAR 0 2
24592: ARRAY
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: IN
24598: PUSH
24599: LD_VAR 0 3
24603: PUSH
24604: LD_EXP 53
24608: PUSH
24609: LD_VAR 0 2
24613: ARRAY
24614: PUSH
24615: LD_INT 2
24617: ARRAY
24618: IN
24619: OR
24620: IFFALSE 24624
// continue ;
24622: GO 24563
// if IsInUnit ( j ) then
24624: LD_VAR 0 3
24628: PPUSH
24629: CALL_OW 310
24633: IFFALSE 24644
// ComExitBuilding ( j ) ;
24635: LD_VAR 0 3
24639: PPUSH
24640: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
24644: LD_VAR 0 3
24648: PUSH
24649: LD_EXP 52
24653: PUSH
24654: LD_VAR 0 2
24658: ARRAY
24659: IN
24660: NOT
24661: IFFALSE 24719
// begin SetTag ( j , 101 ) ;
24663: LD_VAR 0 3
24667: PPUSH
24668: LD_INT 101
24670: PPUSH
24671: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
24675: LD_ADDR_EXP 52
24679: PUSH
24680: LD_EXP 52
24684: PPUSH
24685: LD_VAR 0 2
24689: PUSH
24690: LD_EXP 52
24694: PUSH
24695: LD_VAR 0 2
24699: ARRAY
24700: PUSH
24701: LD_INT 1
24703: PLUS
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: LD_VAR 0 3
24713: PPUSH
24714: CALL 51164 0 3
24718: ST_TO_ADDR
// end ; wait ( 1 ) ;
24719: LD_INT 1
24721: PPUSH
24722: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
24726: LD_VAR 0 3
24730: PPUSH
24731: LD_EXP 51
24735: PUSH
24736: LD_VAR 0 2
24740: ARRAY
24741: PPUSH
24742: LD_VAR 0 3
24746: PPUSH
24747: CALL_OW 74
24751: PPUSH
24752: CALL_OW 130
// end ;
24756: GO 24563
24758: POP
24759: POP
// end ;
24760: GO 24394
24762: POP
24763: POP
// end ;
24764: LD_VAR 0 1
24768: RET
// export function MC_Heal ; var i , j , tmp ; begin
24769: LD_INT 0
24771: PPUSH
24772: PPUSH
24773: PPUSH
24774: PPUSH
// if not mc_bases then
24775: LD_EXP 50
24779: NOT
24780: IFFALSE 24784
// exit ;
24782: GO 25186
// for i = 1 to mc_bases do
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: DOUBLE
24790: LD_INT 1
24792: DEC
24793: ST_TO_ADDR
24794: LD_EXP 50
24798: PUSH
24799: FOR_TO
24800: IFFALSE 25184
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
24802: LD_EXP 53
24806: PUSH
24807: LD_VAR 0 2
24811: ARRAY
24812: PUSH
24813: LD_INT 1
24815: ARRAY
24816: NOT
24817: PUSH
24818: LD_EXP 53
24822: PUSH
24823: LD_VAR 0 2
24827: ARRAY
24828: PUSH
24829: LD_INT 2
24831: ARRAY
24832: NOT
24833: AND
24834: IFFALSE 24872
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
24836: LD_ADDR_EXP 54
24840: PUSH
24841: LD_EXP 54
24845: PPUSH
24846: LD_VAR 0 2
24850: PPUSH
24851: EMPTY
24852: PPUSH
24853: CALL_OW 1
24857: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
24858: LD_VAR 0 2
24862: PPUSH
24863: LD_INT 102
24865: PPUSH
24866: CALL 19807 0 2
// continue ;
24870: GO 24799
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
24872: LD_ADDR_VAR 0 4
24876: PUSH
24877: LD_EXP 50
24881: PUSH
24882: LD_VAR 0 2
24886: ARRAY
24887: PPUSH
24888: LD_INT 25
24890: PUSH
24891: LD_INT 4
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 72
24902: ST_TO_ADDR
// if not tmp then
24903: LD_VAR 0 4
24907: NOT
24908: IFFALSE 24912
// continue ;
24910: GO 24799
// if mc_taming [ i ] then
24912: LD_EXP 81
24916: PUSH
24917: LD_VAR 0 2
24921: ARRAY
24922: IFFALSE 24946
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
24924: LD_ADDR_EXP 81
24928: PUSH
24929: LD_EXP 81
24933: PPUSH
24934: LD_VAR 0 2
24938: PPUSH
24939: EMPTY
24940: PPUSH
24941: CALL_OW 1
24945: ST_TO_ADDR
// for j in tmp do
24946: LD_ADDR_VAR 0 3
24950: PUSH
24951: LD_VAR 0 4
24955: PUSH
24956: FOR_IN
24957: IFFALSE 25180
// begin if IsInUnit ( j ) then
24959: LD_VAR 0 3
24963: PPUSH
24964: CALL_OW 310
24968: IFFALSE 24979
// ComExitBuilding ( j ) ;
24970: LD_VAR 0 3
24974: PPUSH
24975: CALL_OW 122
// if not j in mc_healers [ i ] then
24979: LD_VAR 0 3
24983: PUSH
24984: LD_EXP 54
24988: PUSH
24989: LD_VAR 0 2
24993: ARRAY
24994: IN
24995: NOT
24996: IFFALSE 25042
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
24998: LD_ADDR_EXP 54
25002: PUSH
25003: LD_EXP 54
25007: PPUSH
25008: LD_VAR 0 2
25012: PUSH
25013: LD_EXP 54
25017: PUSH
25018: LD_VAR 0 2
25022: ARRAY
25023: PUSH
25024: LD_INT 1
25026: PLUS
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PPUSH
25032: LD_VAR 0 3
25036: PPUSH
25037: CALL 51164 0 3
25041: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
25042: LD_VAR 0 3
25046: PPUSH
25047: CALL_OW 110
25051: PUSH
25052: LD_INT 102
25054: NONEQUAL
25055: IFFALSE 25069
// SetTag ( j , 102 ) ;
25057: LD_VAR 0 3
25061: PPUSH
25062: LD_INT 102
25064: PPUSH
25065: CALL_OW 109
// Wait ( 3 ) ;
25069: LD_INT 3
25071: PPUSH
25072: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
25076: LD_EXP 53
25080: PUSH
25081: LD_VAR 0 2
25085: ARRAY
25086: PUSH
25087: LD_INT 1
25089: ARRAY
25090: IFFALSE 25122
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
25092: LD_VAR 0 3
25096: PPUSH
25097: LD_EXP 53
25101: PUSH
25102: LD_VAR 0 2
25106: ARRAY
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PUSH
25112: LD_INT 1
25114: ARRAY
25115: PPUSH
25116: CALL_OW 128
25120: GO 25178
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
25122: LD_VAR 0 3
25126: PPUSH
25127: CALL_OW 314
25131: NOT
25132: PUSH
25133: LD_EXP 53
25137: PUSH
25138: LD_VAR 0 2
25142: ARRAY
25143: PUSH
25144: LD_INT 2
25146: ARRAY
25147: AND
25148: IFFALSE 25178
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
25150: LD_VAR 0 3
25154: PPUSH
25155: LD_EXP 53
25159: PUSH
25160: LD_VAR 0 2
25164: ARRAY
25165: PUSH
25166: LD_INT 2
25168: ARRAY
25169: PUSH
25170: LD_INT 1
25172: ARRAY
25173: PPUSH
25174: CALL_OW 128
// end ;
25178: GO 24956
25180: POP
25181: POP
// end ;
25182: GO 24799
25184: POP
25185: POP
// end ;
25186: LD_VAR 0 1
25190: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
25191: LD_INT 0
25193: PPUSH
25194: PPUSH
25195: PPUSH
25196: PPUSH
25197: PPUSH
// if not mc_bases then
25198: LD_EXP 50
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 26350
// for i = 1 to mc_bases do
25207: LD_ADDR_VAR 0 2
25211: PUSH
25212: DOUBLE
25213: LD_INT 1
25215: DEC
25216: ST_TO_ADDR
25217: LD_EXP 50
25221: PUSH
25222: FOR_TO
25223: IFFALSE 26348
// begin if mc_scan [ i ] then
25225: LD_EXP 73
25229: PUSH
25230: LD_VAR 0 2
25234: ARRAY
25235: IFFALSE 25239
// continue ;
25237: GO 25222
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
25239: LD_EXP 55
25243: PUSH
25244: LD_VAR 0 2
25248: ARRAY
25249: NOT
25250: PUSH
25251: LD_EXP 57
25255: PUSH
25256: LD_VAR 0 2
25260: ARRAY
25261: NOT
25262: AND
25263: PUSH
25264: LD_EXP 56
25268: PUSH
25269: LD_VAR 0 2
25273: ARRAY
25274: AND
25275: IFFALSE 25313
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
25277: LD_ADDR_EXP 56
25281: PUSH
25282: LD_EXP 56
25286: PPUSH
25287: LD_VAR 0 2
25291: PPUSH
25292: EMPTY
25293: PPUSH
25294: CALL_OW 1
25298: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
25299: LD_VAR 0 2
25303: PPUSH
25304: LD_INT 103
25306: PPUSH
25307: CALL 19807 0 2
// continue ;
25311: GO 25222
// end ; if mc_construct_list [ i ] then
25313: LD_EXP 57
25317: PUSH
25318: LD_VAR 0 2
25322: ARRAY
25323: IFFALSE 25543
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25325: LD_ADDR_VAR 0 4
25329: PUSH
25330: LD_EXP 50
25334: PUSH
25335: LD_VAR 0 2
25339: ARRAY
25340: PPUSH
25341: LD_INT 25
25343: PUSH
25344: LD_INT 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 72
25355: PUSH
25356: LD_EXP 52
25360: PUSH
25361: LD_VAR 0 2
25365: ARRAY
25366: DIFF
25367: ST_TO_ADDR
// if not tmp then
25368: LD_VAR 0 4
25372: NOT
25373: IFFALSE 25377
// continue ;
25375: GO 25222
// for j in tmp do
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_VAR 0 4
25386: PUSH
25387: FOR_IN
25388: IFFALSE 25539
// begin if not mc_builders [ i ] then
25390: LD_EXP 56
25394: PUSH
25395: LD_VAR 0 2
25399: ARRAY
25400: NOT
25401: IFFALSE 25459
// begin SetTag ( j , 103 ) ;
25403: LD_VAR 0 3
25407: PPUSH
25408: LD_INT 103
25410: PPUSH
25411: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
25415: LD_ADDR_EXP 56
25419: PUSH
25420: LD_EXP 56
25424: PPUSH
25425: LD_VAR 0 2
25429: PUSH
25430: LD_EXP 56
25434: PUSH
25435: LD_VAR 0 2
25439: ARRAY
25440: PUSH
25441: LD_INT 1
25443: PLUS
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PPUSH
25449: LD_VAR 0 3
25453: PPUSH
25454: CALL 51164 0 3
25458: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
25459: LD_VAR 0 3
25463: PPUSH
25464: CALL_OW 310
25468: IFFALSE 25479
// ComExitBuilding ( j ) ;
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 122
// wait ( 3 ) ;
25479: LD_INT 3
25481: PPUSH
25482: CALL_OW 67
// if not mc_construct_list [ i ] then
25486: LD_EXP 57
25490: PUSH
25491: LD_VAR 0 2
25495: ARRAY
25496: NOT
25497: IFFALSE 25501
// break ;
25499: GO 25539
// if not HasTask ( j ) then
25501: LD_VAR 0 3
25505: PPUSH
25506: CALL_OW 314
25510: NOT
25511: IFFALSE 25537
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
25513: LD_VAR 0 3
25517: PPUSH
25518: LD_EXP 57
25522: PUSH
25523: LD_VAR 0 2
25527: ARRAY
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: CALL 54015 0 2
// end ;
25537: GO 25387
25539: POP
25540: POP
// end else
25541: GO 26346
// if mc_build_list [ i ] then
25543: LD_EXP 55
25547: PUSH
25548: LD_VAR 0 2
25552: ARRAY
25553: IFFALSE 26346
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
25555: LD_ADDR_VAR 0 5
25559: PUSH
25560: LD_EXP 50
25564: PUSH
25565: LD_VAR 0 2
25569: ARRAY
25570: PPUSH
25571: LD_INT 2
25573: PUSH
25574: LD_INT 30
25576: PUSH
25577: LD_INT 0
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 30
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: PPUSH
25599: CALL_OW 72
25603: ST_TO_ADDR
// if depot then
25604: LD_VAR 0 5
25608: IFFALSE 25626
// depot := depot [ 1 ] else
25610: LD_ADDR_VAR 0 5
25614: PUSH
25615: LD_VAR 0 5
25619: PUSH
25620: LD_INT 1
25622: ARRAY
25623: ST_TO_ADDR
25624: GO 25634
// depot := 0 ;
25626: LD_ADDR_VAR 0 5
25630: PUSH
25631: LD_INT 0
25633: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
25634: LD_EXP 55
25638: PUSH
25639: LD_VAR 0 2
25643: ARRAY
25644: PUSH
25645: LD_INT 1
25647: ARRAY
25648: PUSH
25649: LD_INT 1
25651: ARRAY
25652: PPUSH
25653: CALL 53845 0 1
25657: PUSH
25658: LD_EXP 50
25662: PUSH
25663: LD_VAR 0 2
25667: ARRAY
25668: PPUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 30
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 30
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: LIST
25696: PPUSH
25697: CALL_OW 72
25701: NOT
25702: AND
25703: IFFALSE 25808
// begin for j = 1 to mc_build_list [ i ] do
25705: LD_ADDR_VAR 0 3
25709: PUSH
25710: DOUBLE
25711: LD_INT 1
25713: DEC
25714: ST_TO_ADDR
25715: LD_EXP 55
25719: PUSH
25720: LD_VAR 0 2
25724: ARRAY
25725: PUSH
25726: FOR_TO
25727: IFFALSE 25806
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
25729: LD_EXP 55
25733: PUSH
25734: LD_VAR 0 2
25738: ARRAY
25739: PUSH
25740: LD_VAR 0 3
25744: ARRAY
25745: PUSH
25746: LD_INT 1
25748: ARRAY
25749: PUSH
25750: LD_INT 2
25752: EQUAL
25753: IFFALSE 25804
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
25755: LD_ADDR_EXP 55
25759: PUSH
25760: LD_EXP 55
25764: PPUSH
25765: LD_VAR 0 2
25769: PPUSH
25770: LD_EXP 55
25774: PUSH
25775: LD_VAR 0 2
25779: ARRAY
25780: PPUSH
25781: LD_VAR 0 3
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: LD_INT 0
25791: PPUSH
25792: CALL 50582 0 4
25796: PPUSH
25797: CALL_OW 1
25801: ST_TO_ADDR
// break ;
25802: GO 25806
// end ;
25804: GO 25726
25806: POP
25807: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
25808: LD_EXP 55
25812: PUSH
25813: LD_VAR 0 2
25817: ARRAY
25818: PUSH
25819: LD_INT 1
25821: ARRAY
25822: PUSH
25823: LD_INT 1
25825: ARRAY
25826: PUSH
25827: LD_INT 0
25829: EQUAL
25830: PUSH
25831: LD_VAR 0 5
25835: PUSH
25836: LD_VAR 0 5
25840: PPUSH
25841: LD_EXP 55
25845: PUSH
25846: LD_VAR 0 2
25850: ARRAY
25851: PUSH
25852: LD_INT 1
25854: ARRAY
25855: PUSH
25856: LD_INT 1
25858: ARRAY
25859: PPUSH
25860: LD_EXP 55
25864: PUSH
25865: LD_VAR 0 2
25869: ARRAY
25870: PUSH
25871: LD_INT 1
25873: ARRAY
25874: PUSH
25875: LD_INT 2
25877: ARRAY
25878: PPUSH
25879: LD_EXP 55
25883: PUSH
25884: LD_VAR 0 2
25888: ARRAY
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PUSH
25894: LD_INT 3
25896: ARRAY
25897: PPUSH
25898: LD_EXP 55
25902: PUSH
25903: LD_VAR 0 2
25907: ARRAY
25908: PUSH
25909: LD_INT 1
25911: ARRAY
25912: PUSH
25913: LD_INT 4
25915: ARRAY
25916: PPUSH
25917: CALL 58561 0 5
25921: AND
25922: OR
25923: IFFALSE 26204
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
25925: LD_ADDR_VAR 0 4
25929: PUSH
25930: LD_EXP 50
25934: PUSH
25935: LD_VAR 0 2
25939: ARRAY
25940: PPUSH
25941: LD_INT 25
25943: PUSH
25944: LD_INT 2
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PPUSH
25951: CALL_OW 72
25955: PUSH
25956: LD_EXP 52
25960: PUSH
25961: LD_VAR 0 2
25965: ARRAY
25966: DIFF
25967: ST_TO_ADDR
// if not tmp then
25968: LD_VAR 0 4
25972: NOT
25973: IFFALSE 25977
// continue ;
25975: GO 25222
// for j in tmp do
25977: LD_ADDR_VAR 0 3
25981: PUSH
25982: LD_VAR 0 4
25986: PUSH
25987: FOR_IN
25988: IFFALSE 26200
// begin if not mc_builders [ i ] then
25990: LD_EXP 56
25994: PUSH
25995: LD_VAR 0 2
25999: ARRAY
26000: NOT
26001: IFFALSE 26059
// begin SetTag ( j , 103 ) ;
26003: LD_VAR 0 3
26007: PPUSH
26008: LD_INT 103
26010: PPUSH
26011: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
26015: LD_ADDR_EXP 56
26019: PUSH
26020: LD_EXP 56
26024: PPUSH
26025: LD_VAR 0 2
26029: PUSH
26030: LD_EXP 56
26034: PUSH
26035: LD_VAR 0 2
26039: ARRAY
26040: PUSH
26041: LD_INT 1
26043: PLUS
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL 51164 0 3
26058: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
26059: LD_VAR 0 3
26063: PPUSH
26064: CALL_OW 310
26068: IFFALSE 26079
// ComExitBuilding ( j ) ;
26070: LD_VAR 0 3
26074: PPUSH
26075: CALL_OW 122
// wait ( 3 ) ;
26079: LD_INT 3
26081: PPUSH
26082: CALL_OW 67
// if not mc_build_list [ i ] then
26086: LD_EXP 55
26090: PUSH
26091: LD_VAR 0 2
26095: ARRAY
26096: NOT
26097: IFFALSE 26101
// break ;
26099: GO 26200
// if not HasTask ( j ) then
26101: LD_VAR 0 3
26105: PPUSH
26106: CALL_OW 314
26110: NOT
26111: IFFALSE 26198
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
26113: LD_VAR 0 3
26117: PPUSH
26118: LD_EXP 55
26122: PUSH
26123: LD_VAR 0 2
26127: ARRAY
26128: PUSH
26129: LD_INT 1
26131: ARRAY
26132: PUSH
26133: LD_INT 1
26135: ARRAY
26136: PPUSH
26137: LD_EXP 55
26141: PUSH
26142: LD_VAR 0 2
26146: ARRAY
26147: PUSH
26148: LD_INT 1
26150: ARRAY
26151: PUSH
26152: LD_INT 2
26154: ARRAY
26155: PPUSH
26156: LD_EXP 55
26160: PUSH
26161: LD_VAR 0 2
26165: ARRAY
26166: PUSH
26167: LD_INT 1
26169: ARRAY
26170: PUSH
26171: LD_INT 3
26173: ARRAY
26174: PPUSH
26175: LD_EXP 55
26179: PUSH
26180: LD_VAR 0 2
26184: ARRAY
26185: PUSH
26186: LD_INT 1
26188: ARRAY
26189: PUSH
26190: LD_INT 4
26192: ARRAY
26193: PPUSH
26194: CALL_OW 145
// end ;
26198: GO 25987
26200: POP
26201: POP
// end else
26202: GO 26346
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
26204: LD_EXP 50
26208: PUSH
26209: LD_VAR 0 2
26213: ARRAY
26214: PPUSH
26215: LD_EXP 55
26219: PUSH
26220: LD_VAR 0 2
26224: ARRAY
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: PUSH
26230: LD_INT 1
26232: ARRAY
26233: PPUSH
26234: LD_EXP 55
26238: PUSH
26239: LD_VAR 0 2
26243: ARRAY
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: PUSH
26249: LD_INT 2
26251: ARRAY
26252: PPUSH
26253: LD_EXP 55
26257: PUSH
26258: LD_VAR 0 2
26262: ARRAY
26263: PUSH
26264: LD_INT 1
26266: ARRAY
26267: PUSH
26268: LD_INT 3
26270: ARRAY
26271: PPUSH
26272: LD_EXP 55
26276: PUSH
26277: LD_VAR 0 2
26281: ARRAY
26282: PUSH
26283: LD_INT 1
26285: ARRAY
26286: PUSH
26287: LD_INT 4
26289: ARRAY
26290: PPUSH
26291: CALL 57915 0 5
26295: NOT
26296: IFFALSE 26346
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
26298: LD_ADDR_EXP 55
26302: PUSH
26303: LD_EXP 55
26307: PPUSH
26308: LD_VAR 0 2
26312: PPUSH
26313: LD_EXP 55
26317: PUSH
26318: LD_VAR 0 2
26322: ARRAY
26323: PPUSH
26324: LD_INT 1
26326: PPUSH
26327: LD_INT 1
26329: NEG
26330: PPUSH
26331: LD_INT 0
26333: PPUSH
26334: CALL 50582 0 4
26338: PPUSH
26339: CALL_OW 1
26343: ST_TO_ADDR
// continue ;
26344: GO 25222
// end ; end ; end ;
26346: GO 25222
26348: POP
26349: POP
// end ;
26350: LD_VAR 0 1
26354: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
26355: LD_INT 0
26357: PPUSH
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
26362: PPUSH
// if not mc_bases then
26363: LD_EXP 50
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26799
// for i = 1 to mc_bases do
26372: LD_ADDR_VAR 0 2
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_EXP 50
26386: PUSH
26387: FOR_TO
26388: IFFALSE 26797
// begin tmp := mc_build_upgrade [ i ] ;
26390: LD_ADDR_VAR 0 4
26394: PUSH
26395: LD_EXP 82
26399: PUSH
26400: LD_VAR 0 2
26404: ARRAY
26405: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
26406: LD_ADDR_VAR 0 6
26410: PUSH
26411: LD_EXP 83
26415: PUSH
26416: LD_VAR 0 2
26420: ARRAY
26421: PPUSH
26422: LD_INT 2
26424: PUSH
26425: LD_INT 30
26427: PUSH
26428: LD_INT 6
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 30
26437: PUSH
26438: LD_INT 7
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: LIST
26449: PPUSH
26450: CALL_OW 72
26454: ST_TO_ADDR
// if not tmp and not lab then
26455: LD_VAR 0 4
26459: NOT
26460: PUSH
26461: LD_VAR 0 6
26465: NOT
26466: AND
26467: IFFALSE 26471
// continue ;
26469: GO 26387
// if tmp then
26471: LD_VAR 0 4
26475: IFFALSE 26595
// for j in tmp do
26477: LD_ADDR_VAR 0 3
26481: PUSH
26482: LD_VAR 0 4
26486: PUSH
26487: FOR_IN
26488: IFFALSE 26593
// begin if UpgradeCost ( j ) then
26490: LD_VAR 0 3
26494: PPUSH
26495: CALL 57575 0 1
26499: IFFALSE 26591
// begin ComUpgrade ( j ) ;
26501: LD_VAR 0 3
26505: PPUSH
26506: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
26510: LD_ADDR_EXP 82
26514: PUSH
26515: LD_EXP 82
26519: PPUSH
26520: LD_VAR 0 2
26524: PPUSH
26525: LD_EXP 82
26529: PUSH
26530: LD_VAR 0 2
26534: ARRAY
26535: PUSH
26536: LD_VAR 0 3
26540: DIFF
26541: PPUSH
26542: CALL_OW 1
26546: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26547: LD_ADDR_EXP 57
26551: PUSH
26552: LD_EXP 57
26556: PPUSH
26557: LD_VAR 0 2
26561: PUSH
26562: LD_EXP 57
26566: PUSH
26567: LD_VAR 0 2
26571: ARRAY
26572: PUSH
26573: LD_INT 1
26575: PLUS
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PPUSH
26581: LD_VAR 0 3
26585: PPUSH
26586: CALL 51164 0 3
26590: ST_TO_ADDR
// end ; end ;
26591: GO 26487
26593: POP
26594: POP
// if not lab or not mc_lab_upgrade [ i ] then
26595: LD_VAR 0 6
26599: NOT
26600: PUSH
26601: LD_EXP 84
26605: PUSH
26606: LD_VAR 0 2
26610: ARRAY
26611: NOT
26612: OR
26613: IFFALSE 26617
// continue ;
26615: GO 26387
// for j in lab do
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_VAR 0 6
26626: PUSH
26627: FOR_IN
26628: IFFALSE 26793
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
26630: LD_VAR 0 3
26634: PPUSH
26635: CALL_OW 266
26639: PUSH
26640: LD_INT 6
26642: PUSH
26643: LD_INT 7
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: IN
26650: PUSH
26651: LD_VAR 0 3
26655: PPUSH
26656: CALL_OW 461
26660: PUSH
26661: LD_INT 1
26663: NONEQUAL
26664: AND
26665: IFFALSE 26791
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
26667: LD_VAR 0 3
26671: PPUSH
26672: LD_EXP 84
26676: PUSH
26677: LD_VAR 0 2
26681: ARRAY
26682: PUSH
26683: LD_INT 1
26685: ARRAY
26686: PPUSH
26687: CALL 57780 0 2
26691: IFFALSE 26791
// begin ComCancel ( j ) ;
26693: LD_VAR 0 3
26697: PPUSH
26698: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
26702: LD_VAR 0 3
26706: PPUSH
26707: LD_EXP 84
26711: PUSH
26712: LD_VAR 0 2
26716: ARRAY
26717: PUSH
26718: LD_INT 1
26720: ARRAY
26721: PPUSH
26722: CALL_OW 207
// if not j in mc_construct_list [ i ] then
26726: LD_VAR 0 3
26730: PUSH
26731: LD_EXP 57
26735: PUSH
26736: LD_VAR 0 2
26740: ARRAY
26741: IN
26742: NOT
26743: IFFALSE 26789
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
26745: LD_ADDR_EXP 57
26749: PUSH
26750: LD_EXP 57
26754: PPUSH
26755: LD_VAR 0 2
26759: PUSH
26760: LD_EXP 57
26764: PUSH
26765: LD_VAR 0 2
26769: ARRAY
26770: PUSH
26771: LD_INT 1
26773: PLUS
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL 51164 0 3
26788: ST_TO_ADDR
// break ;
26789: GO 26793
// end ; end ; end ;
26791: GO 26627
26793: POP
26794: POP
// end ;
26795: GO 26387
26797: POP
26798: POP
// end ;
26799: LD_VAR 0 1
26803: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
26804: LD_INT 0
26806: PPUSH
26807: PPUSH
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
26812: PPUSH
26813: PPUSH
26814: PPUSH
// if not mc_bases then
26815: LD_EXP 50
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 27229
// for i = 1 to mc_bases do
26824: LD_ADDR_VAR 0 2
26828: PUSH
26829: DOUBLE
26830: LD_INT 1
26832: DEC
26833: ST_TO_ADDR
26834: LD_EXP 50
26838: PUSH
26839: FOR_TO
26840: IFFALSE 27227
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
26842: LD_EXP 58
26846: PUSH
26847: LD_VAR 0 2
26851: ARRAY
26852: NOT
26853: PUSH
26854: LD_EXP 50
26858: PUSH
26859: LD_VAR 0 2
26863: ARRAY
26864: PPUSH
26865: LD_INT 30
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PPUSH
26875: CALL_OW 72
26879: NOT
26880: OR
26881: IFFALSE 26885
// continue ;
26883: GO 26839
// busy := false ;
26885: LD_ADDR_VAR 0 8
26889: PUSH
26890: LD_INT 0
26892: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
26893: LD_ADDR_VAR 0 4
26897: PUSH
26898: LD_EXP 50
26902: PUSH
26903: LD_VAR 0 2
26907: ARRAY
26908: PPUSH
26909: LD_INT 30
26911: PUSH
26912: LD_INT 3
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PPUSH
26919: CALL_OW 72
26923: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
26924: LD_ADDR_VAR 0 6
26928: PUSH
26929: LD_EXP 58
26933: PUSH
26934: LD_VAR 0 2
26938: ARRAY
26939: PPUSH
26940: LD_INT 2
26942: PUSH
26943: LD_INT 30
26945: PUSH
26946: LD_INT 32
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 30
26955: PUSH
26956: LD_INT 33
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 72
26972: ST_TO_ADDR
// if not t then
26973: LD_VAR 0 6
26977: NOT
26978: IFFALSE 26982
// continue ;
26980: GO 26839
// for j in tmp do
26982: LD_ADDR_VAR 0 3
26986: PUSH
26987: LD_VAR 0 4
26991: PUSH
26992: FOR_IN
26993: IFFALSE 27023
// if not BuildingStatus ( j ) = bs_idle then
26995: LD_VAR 0 3
26999: PPUSH
27000: CALL_OW 461
27004: PUSH
27005: LD_INT 2
27007: EQUAL
27008: NOT
27009: IFFALSE 27021
// begin busy := true ;
27011: LD_ADDR_VAR 0 8
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// break ;
27019: GO 27023
// end ;
27021: GO 26992
27023: POP
27024: POP
// if busy then
27025: LD_VAR 0 8
27029: IFFALSE 27033
// continue ;
27031: GO 26839
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
27033: LD_ADDR_VAR 0 7
27037: PUSH
27038: LD_VAR 0 6
27042: PPUSH
27043: LD_INT 35
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PPUSH
27053: CALL_OW 72
27057: ST_TO_ADDR
// if tw then
27058: LD_VAR 0 7
27062: IFFALSE 27139
// begin tw := tw [ 1 ] ;
27064: LD_ADDR_VAR 0 7
27068: PUSH
27069: LD_VAR 0 7
27073: PUSH
27074: LD_INT 1
27076: ARRAY
27077: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
27078: LD_ADDR_VAR 0 9
27082: PUSH
27083: LD_VAR 0 7
27087: PPUSH
27088: LD_EXP 75
27092: PUSH
27093: LD_VAR 0 2
27097: ARRAY
27098: PPUSH
27099: CALL 56134 0 2
27103: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
27104: LD_EXP 89
27108: PUSH
27109: LD_VAR 0 2
27113: ARRAY
27114: IFFALSE 27137
// if not weapon in mc_allowed_tower_weapons [ i ] then
27116: LD_VAR 0 9
27120: PUSH
27121: LD_EXP 89
27125: PUSH
27126: LD_VAR 0 2
27130: ARRAY
27131: IN
27132: NOT
27133: IFFALSE 27137
// continue ;
27135: GO 26839
// end else
27137: GO 27202
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
27139: LD_ADDR_VAR 0 5
27143: PUSH
27144: LD_EXP 58
27148: PUSH
27149: LD_VAR 0 2
27153: ARRAY
27154: PPUSH
27155: LD_VAR 0 4
27159: PPUSH
27160: CALL 86273 0 2
27164: ST_TO_ADDR
// if not tmp2 then
27165: LD_VAR 0 5
27169: NOT
27170: IFFALSE 27174
// continue ;
27172: GO 26839
// tw := tmp2 [ 1 ] ;
27174: LD_ADDR_VAR 0 7
27178: PUSH
27179: LD_VAR 0 5
27183: PUSH
27184: LD_INT 1
27186: ARRAY
27187: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
27188: LD_ADDR_VAR 0 9
27192: PUSH
27193: LD_VAR 0 5
27197: PUSH
27198: LD_INT 2
27200: ARRAY
27201: ST_TO_ADDR
// end ; if not weapon then
27202: LD_VAR 0 9
27206: NOT
27207: IFFALSE 27211
// continue ;
27209: GO 26839
// ComPlaceWeapon ( tw , weapon ) ;
27211: LD_VAR 0 7
27215: PPUSH
27216: LD_VAR 0 9
27220: PPUSH
27221: CALL_OW 148
// end ;
27225: GO 26839
27227: POP
27228: POP
// end ;
27229: LD_VAR 0 1
27233: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
27234: LD_INT 0
27236: PPUSH
27237: PPUSH
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not mc_bases then
27242: LD_EXP 50
27246: NOT
27247: IFFALSE 27251
// exit ;
27249: GO 28263
// for i = 1 to mc_bases do
27251: LD_ADDR_VAR 0 2
27255: PUSH
27256: DOUBLE
27257: LD_INT 1
27259: DEC
27260: ST_TO_ADDR
27261: LD_EXP 50
27265: PUSH
27266: FOR_TO
27267: IFFALSE 28261
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
27269: LD_EXP 63
27273: PUSH
27274: LD_VAR 0 2
27278: ARRAY
27279: NOT
27280: PUSH
27281: LD_EXP 63
27285: PUSH
27286: LD_VAR 0 2
27290: ARRAY
27291: PUSH
27292: LD_EXP 64
27296: PUSH
27297: LD_VAR 0 2
27301: ARRAY
27302: EQUAL
27303: OR
27304: IFFALSE 27308
// continue ;
27306: GO 27266
// if mc_miners [ i ] then
27308: LD_EXP 64
27312: PUSH
27313: LD_VAR 0 2
27317: ARRAY
27318: IFFALSE 27948
// begin k := 1 ;
27320: LD_ADDR_VAR 0 4
27324: PUSH
27325: LD_INT 1
27327: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
27328: LD_ADDR_VAR 0 3
27332: PUSH
27333: DOUBLE
27334: LD_EXP 64
27338: PUSH
27339: LD_VAR 0 2
27343: ARRAY
27344: INC
27345: ST_TO_ADDR
27346: LD_INT 1
27348: PUSH
27349: FOR_DOWNTO
27350: IFFALSE 27946
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
27352: LD_EXP 64
27356: PUSH
27357: LD_VAR 0 2
27361: ARRAY
27362: PUSH
27363: LD_VAR 0 3
27367: ARRAY
27368: PPUSH
27369: CALL_OW 301
27373: PUSH
27374: LD_EXP 64
27378: PUSH
27379: LD_VAR 0 2
27383: ARRAY
27384: PUSH
27385: LD_VAR 0 3
27389: ARRAY
27390: PPUSH
27391: CALL_OW 257
27395: PUSH
27396: LD_INT 1
27398: NONEQUAL
27399: OR
27400: IFFALSE 27463
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
27402: LD_ADDR_VAR 0 5
27406: PUSH
27407: LD_EXP 64
27411: PUSH
27412: LD_VAR 0 2
27416: ARRAY
27417: PUSH
27418: LD_EXP 64
27422: PUSH
27423: LD_VAR 0 2
27427: ARRAY
27428: PUSH
27429: LD_VAR 0 3
27433: ARRAY
27434: DIFF
27435: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
27436: LD_ADDR_EXP 64
27440: PUSH
27441: LD_EXP 64
27445: PPUSH
27446: LD_VAR 0 2
27450: PPUSH
27451: LD_VAR 0 5
27455: PPUSH
27456: CALL_OW 1
27460: ST_TO_ADDR
// continue ;
27461: GO 27349
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
27463: LD_EXP 64
27467: PUSH
27468: LD_VAR 0 2
27472: ARRAY
27473: PUSH
27474: LD_VAR 0 3
27478: ARRAY
27479: PPUSH
27480: CALL 51100 0 1
27484: PUSH
27485: LD_EXP 64
27489: PUSH
27490: LD_VAR 0 2
27494: ARRAY
27495: PUSH
27496: LD_VAR 0 3
27500: ARRAY
27501: PPUSH
27502: CALL_OW 255
27506: PPUSH
27507: LD_EXP 63
27511: PUSH
27512: LD_VAR 0 2
27516: ARRAY
27517: PUSH
27518: LD_VAR 0 4
27522: ARRAY
27523: PUSH
27524: LD_INT 1
27526: ARRAY
27527: PPUSH
27528: LD_EXP 63
27532: PUSH
27533: LD_VAR 0 2
27537: ARRAY
27538: PUSH
27539: LD_VAR 0 4
27543: ARRAY
27544: PUSH
27545: LD_INT 2
27547: ARRAY
27548: PPUSH
27549: LD_INT 15
27551: PPUSH
27552: CALL 52060 0 4
27556: PUSH
27557: LD_INT 4
27559: ARRAY
27560: PUSH
27561: LD_EXP 64
27565: PUSH
27566: LD_VAR 0 2
27570: ARRAY
27571: PUSH
27572: LD_VAR 0 3
27576: ARRAY
27577: PPUSH
27578: LD_INT 10
27580: PPUSH
27581: CALL 53757 0 2
27585: PUSH
27586: LD_INT 4
27588: ARRAY
27589: OR
27590: AND
27591: IFFALSE 27614
// ComStop ( mc_miners [ i ] [ j ] ) ;
27593: LD_EXP 64
27597: PUSH
27598: LD_VAR 0 2
27602: ARRAY
27603: PUSH
27604: LD_VAR 0 3
27608: ARRAY
27609: PPUSH
27610: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
27614: LD_EXP 64
27618: PUSH
27619: LD_VAR 0 2
27623: ARRAY
27624: PUSH
27625: LD_VAR 0 3
27629: ARRAY
27630: PPUSH
27631: CALL_OW 257
27635: PUSH
27636: LD_INT 1
27638: EQUAL
27639: PUSH
27640: LD_EXP 64
27644: PUSH
27645: LD_VAR 0 2
27649: ARRAY
27650: PUSH
27651: LD_VAR 0 3
27655: ARRAY
27656: PPUSH
27657: CALL_OW 459
27661: NOT
27662: AND
27663: PUSH
27664: LD_EXP 64
27668: PUSH
27669: LD_VAR 0 2
27673: ARRAY
27674: PUSH
27675: LD_VAR 0 3
27679: ARRAY
27680: PPUSH
27681: CALL_OW 255
27685: PPUSH
27686: LD_EXP 63
27690: PUSH
27691: LD_VAR 0 2
27695: ARRAY
27696: PUSH
27697: LD_VAR 0 4
27701: ARRAY
27702: PUSH
27703: LD_INT 1
27705: ARRAY
27706: PPUSH
27707: LD_EXP 63
27711: PUSH
27712: LD_VAR 0 2
27716: ARRAY
27717: PUSH
27718: LD_VAR 0 4
27722: ARRAY
27723: PUSH
27724: LD_INT 2
27726: ARRAY
27727: PPUSH
27728: LD_INT 15
27730: PPUSH
27731: CALL 52060 0 4
27735: PUSH
27736: LD_INT 4
27738: ARRAY
27739: PUSH
27740: LD_INT 0
27742: EQUAL
27743: AND
27744: PUSH
27745: LD_EXP 64
27749: PUSH
27750: LD_VAR 0 2
27754: ARRAY
27755: PUSH
27756: LD_VAR 0 3
27760: ARRAY
27761: PPUSH
27762: CALL_OW 314
27766: NOT
27767: AND
27768: IFFALSE 27944
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
27770: LD_EXP 64
27774: PUSH
27775: LD_VAR 0 2
27779: ARRAY
27780: PUSH
27781: LD_VAR 0 3
27785: ARRAY
27786: PPUSH
27787: CALL_OW 310
27791: IFFALSE 27814
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
27793: LD_EXP 64
27797: PUSH
27798: LD_VAR 0 2
27802: ARRAY
27803: PUSH
27804: LD_VAR 0 3
27808: ARRAY
27809: PPUSH
27810: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
27814: LD_EXP 64
27818: PUSH
27819: LD_VAR 0 2
27823: ARRAY
27824: PUSH
27825: LD_VAR 0 3
27829: ARRAY
27830: PPUSH
27831: CALL_OW 314
27835: NOT
27836: IFFALSE 27904
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
27838: LD_EXP 64
27842: PUSH
27843: LD_VAR 0 2
27847: ARRAY
27848: PUSH
27849: LD_VAR 0 3
27853: ARRAY
27854: PPUSH
27855: LD_EXP 63
27859: PUSH
27860: LD_VAR 0 2
27864: ARRAY
27865: PUSH
27866: LD_VAR 0 4
27870: ARRAY
27871: PUSH
27872: LD_INT 1
27874: ARRAY
27875: PPUSH
27876: LD_EXP 63
27880: PUSH
27881: LD_VAR 0 2
27885: ARRAY
27886: PUSH
27887: LD_VAR 0 4
27891: ARRAY
27892: PUSH
27893: LD_INT 2
27895: ARRAY
27896: PPUSH
27897: LD_INT 0
27899: PPUSH
27900: CALL_OW 193
// k := k + 1 ;
27904: LD_ADDR_VAR 0 4
27908: PUSH
27909: LD_VAR 0 4
27913: PUSH
27914: LD_INT 1
27916: PLUS
27917: ST_TO_ADDR
// if k > mc_mines [ i ] then
27918: LD_VAR 0 4
27922: PUSH
27923: LD_EXP 63
27927: PUSH
27928: LD_VAR 0 2
27932: ARRAY
27933: GREATER
27934: IFFALSE 27944
// k := 1 ;
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: LD_INT 1
27943: ST_TO_ADDR
// end ; end ;
27944: GO 27349
27946: POP
27947: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
27948: LD_ADDR_VAR 0 5
27952: PUSH
27953: LD_EXP 50
27957: PUSH
27958: LD_VAR 0 2
27962: ARRAY
27963: PPUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 30
27969: PUSH
27970: LD_INT 4
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: PUSH
27977: LD_INT 30
27979: PUSH
27980: LD_INT 5
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 30
27989: PUSH
27990: LD_INT 32
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: PPUSH
28003: CALL_OW 72
28007: ST_TO_ADDR
// if not tmp then
28008: LD_VAR 0 5
28012: NOT
28013: IFFALSE 28017
// continue ;
28015: GO 27266
// list := [ ] ;
28017: LD_ADDR_VAR 0 6
28021: PUSH
28022: EMPTY
28023: ST_TO_ADDR
// for j in tmp do
28024: LD_ADDR_VAR 0 3
28028: PUSH
28029: LD_VAR 0 5
28033: PUSH
28034: FOR_IN
28035: IFFALSE 28104
// begin for k in UnitsInside ( j ) do
28037: LD_ADDR_VAR 0 4
28041: PUSH
28042: LD_VAR 0 3
28046: PPUSH
28047: CALL_OW 313
28051: PUSH
28052: FOR_IN
28053: IFFALSE 28100
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
28055: LD_VAR 0 4
28059: PPUSH
28060: CALL_OW 257
28064: PUSH
28065: LD_INT 1
28067: EQUAL
28068: PUSH
28069: LD_VAR 0 4
28073: PPUSH
28074: CALL_OW 459
28078: NOT
28079: AND
28080: IFFALSE 28098
// list := list ^ k ;
28082: LD_ADDR_VAR 0 6
28086: PUSH
28087: LD_VAR 0 6
28091: PUSH
28092: LD_VAR 0 4
28096: ADD
28097: ST_TO_ADDR
28098: GO 28052
28100: POP
28101: POP
// end ;
28102: GO 28034
28104: POP
28105: POP
// list := list diff mc_miners [ i ] ;
28106: LD_ADDR_VAR 0 6
28110: PUSH
28111: LD_VAR 0 6
28115: PUSH
28116: LD_EXP 64
28120: PUSH
28121: LD_VAR 0 2
28125: ARRAY
28126: DIFF
28127: ST_TO_ADDR
// if not list then
28128: LD_VAR 0 6
28132: NOT
28133: IFFALSE 28137
// continue ;
28135: GO 27266
// k := mc_mines [ i ] - mc_miners [ i ] ;
28137: LD_ADDR_VAR 0 4
28141: PUSH
28142: LD_EXP 63
28146: PUSH
28147: LD_VAR 0 2
28151: ARRAY
28152: PUSH
28153: LD_EXP 64
28157: PUSH
28158: LD_VAR 0 2
28162: ARRAY
28163: MINUS
28164: ST_TO_ADDR
// if k > list then
28165: LD_VAR 0 4
28169: PUSH
28170: LD_VAR 0 6
28174: GREATER
28175: IFFALSE 28187
// k := list ;
28177: LD_ADDR_VAR 0 4
28181: PUSH
28182: LD_VAR 0 6
28186: ST_TO_ADDR
// for j = 1 to k do
28187: LD_ADDR_VAR 0 3
28191: PUSH
28192: DOUBLE
28193: LD_INT 1
28195: DEC
28196: ST_TO_ADDR
28197: LD_VAR 0 4
28201: PUSH
28202: FOR_TO
28203: IFFALSE 28257
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
28205: LD_ADDR_EXP 64
28209: PUSH
28210: LD_EXP 64
28214: PPUSH
28215: LD_VAR 0 2
28219: PUSH
28220: LD_EXP 64
28224: PUSH
28225: LD_VAR 0 2
28229: ARRAY
28230: PUSH
28231: LD_INT 1
28233: PLUS
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PPUSH
28239: LD_VAR 0 6
28243: PUSH
28244: LD_VAR 0 3
28248: ARRAY
28249: PPUSH
28250: CALL 51164 0 3
28254: ST_TO_ADDR
28255: GO 28202
28257: POP
28258: POP
// end ;
28259: GO 27266
28261: POP
28262: POP
// end ;
28263: LD_VAR 0 1
28267: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
28268: LD_INT 0
28270: PPUSH
28271: PPUSH
28272: PPUSH
28273: PPUSH
28274: PPUSH
28275: PPUSH
28276: PPUSH
28277: PPUSH
28278: PPUSH
28279: PPUSH
// if not mc_bases then
28280: LD_EXP 50
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 30020
// for i = 1 to mc_bases do
28289: LD_ADDR_VAR 0 2
28293: PUSH
28294: DOUBLE
28295: LD_INT 1
28297: DEC
28298: ST_TO_ADDR
28299: LD_EXP 50
28303: PUSH
28304: FOR_TO
28305: IFFALSE 30018
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
28307: LD_EXP 50
28311: PUSH
28312: LD_VAR 0 2
28316: ARRAY
28317: NOT
28318: PUSH
28319: LD_EXP 57
28323: PUSH
28324: LD_VAR 0 2
28328: ARRAY
28329: OR
28330: IFFALSE 28334
// continue ;
28332: GO 28304
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
28334: LD_EXP 66
28338: PUSH
28339: LD_VAR 0 2
28343: ARRAY
28344: NOT
28345: PUSH
28346: LD_EXP 67
28350: PUSH
28351: LD_VAR 0 2
28355: ARRAY
28356: AND
28357: IFFALSE 28395
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
28359: LD_ADDR_EXP 67
28363: PUSH
28364: LD_EXP 67
28368: PPUSH
28369: LD_VAR 0 2
28373: PPUSH
28374: EMPTY
28375: PPUSH
28376: CALL_OW 1
28380: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
28381: LD_VAR 0 2
28385: PPUSH
28386: LD_INT 107
28388: PPUSH
28389: CALL 19807 0 2
// continue ;
28393: GO 28304
// end ; target := [ ] ;
28395: LD_ADDR_VAR 0 6
28399: PUSH
28400: EMPTY
28401: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: DOUBLE
28408: LD_EXP 66
28412: PUSH
28413: LD_VAR 0 2
28417: ARRAY
28418: INC
28419: ST_TO_ADDR
28420: LD_INT 1
28422: PUSH
28423: FOR_DOWNTO
28424: IFFALSE 28684
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
28426: LD_EXP 66
28430: PUSH
28431: LD_VAR 0 2
28435: ARRAY
28436: PUSH
28437: LD_VAR 0 3
28441: ARRAY
28442: PUSH
28443: LD_INT 2
28445: ARRAY
28446: PPUSH
28447: LD_EXP 66
28451: PUSH
28452: LD_VAR 0 2
28456: ARRAY
28457: PUSH
28458: LD_VAR 0 3
28462: ARRAY
28463: PUSH
28464: LD_INT 3
28466: ARRAY
28467: PPUSH
28468: CALL_OW 488
28472: PUSH
28473: LD_EXP 66
28477: PUSH
28478: LD_VAR 0 2
28482: ARRAY
28483: PUSH
28484: LD_VAR 0 3
28488: ARRAY
28489: PUSH
28490: LD_INT 2
28492: ARRAY
28493: PPUSH
28494: LD_EXP 66
28498: PUSH
28499: LD_VAR 0 2
28503: ARRAY
28504: PUSH
28505: LD_VAR 0 3
28509: ARRAY
28510: PUSH
28511: LD_INT 3
28513: ARRAY
28514: PPUSH
28515: CALL_OW 284
28519: PUSH
28520: LD_INT 0
28522: EQUAL
28523: AND
28524: IFFALSE 28579
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
28526: LD_ADDR_VAR 0 5
28530: PUSH
28531: LD_EXP 66
28535: PUSH
28536: LD_VAR 0 2
28540: ARRAY
28541: PPUSH
28542: LD_VAR 0 3
28546: PPUSH
28547: CALL_OW 3
28551: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
28552: LD_ADDR_EXP 66
28556: PUSH
28557: LD_EXP 66
28561: PPUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: LD_VAR 0 5
28571: PPUSH
28572: CALL_OW 1
28576: ST_TO_ADDR
// continue ;
28577: GO 28423
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
28579: LD_EXP 50
28583: PUSH
28584: LD_VAR 0 2
28588: ARRAY
28589: PUSH
28590: LD_INT 1
28592: ARRAY
28593: PPUSH
28594: CALL_OW 255
28598: PPUSH
28599: LD_EXP 66
28603: PUSH
28604: LD_VAR 0 2
28608: ARRAY
28609: PUSH
28610: LD_VAR 0 3
28614: ARRAY
28615: PUSH
28616: LD_INT 2
28618: ARRAY
28619: PPUSH
28620: LD_EXP 66
28624: PUSH
28625: LD_VAR 0 2
28629: ARRAY
28630: PUSH
28631: LD_VAR 0 3
28635: ARRAY
28636: PUSH
28637: LD_INT 3
28639: ARRAY
28640: PPUSH
28641: LD_INT 30
28643: PPUSH
28644: CALL 52060 0 4
28648: PUSH
28649: LD_INT 4
28651: ARRAY
28652: PUSH
28653: LD_INT 0
28655: EQUAL
28656: IFFALSE 28682
// begin target := mc_crates [ i ] [ j ] ;
28658: LD_ADDR_VAR 0 6
28662: PUSH
28663: LD_EXP 66
28667: PUSH
28668: LD_VAR 0 2
28672: ARRAY
28673: PUSH
28674: LD_VAR 0 3
28678: ARRAY
28679: ST_TO_ADDR
// break ;
28680: GO 28684
// end ; end ;
28682: GO 28423
28684: POP
28685: POP
// if not target then
28686: LD_VAR 0 6
28690: NOT
28691: IFFALSE 28695
// continue ;
28693: GO 28304
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
28695: LD_ADDR_VAR 0 7
28699: PUSH
28700: LD_EXP 69
28704: PUSH
28705: LD_VAR 0 2
28709: ARRAY
28710: PPUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: LD_INT 58
28719: PUSH
28720: EMPTY
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 61
28729: PUSH
28730: EMPTY
28731: LIST
28732: PUSH
28733: LD_INT 33
28735: PUSH
28736: LD_INT 5
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 33
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 34
28765: PUSH
28766: LD_INT 32
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 34
28775: PUSH
28776: LD_INT 51
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 34
28785: PUSH
28786: LD_INT 12
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PPUSH
28803: CALL_OW 72
28807: ST_TO_ADDR
// if not cargo then
28808: LD_VAR 0 7
28812: NOT
28813: IFFALSE 29456
// begin if mc_crates_collector [ i ] < 5 then
28815: LD_EXP 67
28819: PUSH
28820: LD_VAR 0 2
28824: ARRAY
28825: PUSH
28826: LD_INT 5
28828: LESS
28829: IFFALSE 29195
// begin if mc_ape [ i ] then
28831: LD_EXP 79
28835: PUSH
28836: LD_VAR 0 2
28840: ARRAY
28841: IFFALSE 28888
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
28843: LD_ADDR_VAR 0 5
28847: PUSH
28848: LD_EXP 79
28852: PUSH
28853: LD_VAR 0 2
28857: ARRAY
28858: PPUSH
28859: LD_INT 25
28861: PUSH
28862: LD_INT 16
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 24
28871: PUSH
28872: LD_INT 750
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PPUSH
28883: CALL_OW 72
28887: ST_TO_ADDR
// if not tmp then
28888: LD_VAR 0 5
28892: NOT
28893: IFFALSE 28940
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
28895: LD_ADDR_VAR 0 5
28899: PUSH
28900: LD_EXP 50
28904: PUSH
28905: LD_VAR 0 2
28909: ARRAY
28910: PPUSH
28911: LD_INT 25
28913: PUSH
28914: LD_INT 2
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 24
28923: PUSH
28924: LD_INT 750
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PPUSH
28935: CALL_OW 72
28939: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
28940: LD_EXP 79
28944: PUSH
28945: LD_VAR 0 2
28949: ARRAY
28950: PUSH
28951: LD_EXP 50
28955: PUSH
28956: LD_VAR 0 2
28960: ARRAY
28961: PPUSH
28962: LD_INT 25
28964: PUSH
28965: LD_INT 2
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 24
28974: PUSH
28975: LD_INT 750
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PPUSH
28986: CALL_OW 72
28990: AND
28991: PUSH
28992: LD_VAR 0 5
28996: PUSH
28997: LD_INT 5
28999: LESS
29000: AND
29001: IFFALSE 29083
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
29003: LD_ADDR_VAR 0 3
29007: PUSH
29008: LD_EXP 50
29012: PUSH
29013: LD_VAR 0 2
29017: ARRAY
29018: PPUSH
29019: LD_INT 25
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 24
29031: PUSH
29032: LD_INT 750
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PPUSH
29043: CALL_OW 72
29047: PUSH
29048: FOR_IN
29049: IFFALSE 29081
// begin tmp := tmp union j ;
29051: LD_ADDR_VAR 0 5
29055: PUSH
29056: LD_VAR 0 5
29060: PUSH
29061: LD_VAR 0 3
29065: UNION
29066: ST_TO_ADDR
// if tmp >= 5 then
29067: LD_VAR 0 5
29071: PUSH
29072: LD_INT 5
29074: GREATEREQUAL
29075: IFFALSE 29079
// break ;
29077: GO 29081
// end ;
29079: GO 29048
29081: POP
29082: POP
// end ; if not tmp then
29083: LD_VAR 0 5
29087: NOT
29088: IFFALSE 29092
// continue ;
29090: GO 28304
// for j in tmp do
29092: LD_ADDR_VAR 0 3
29096: PUSH
29097: LD_VAR 0 5
29101: PUSH
29102: FOR_IN
29103: IFFALSE 29193
// if not GetTag ( j ) then
29105: LD_VAR 0 3
29109: PPUSH
29110: CALL_OW 110
29114: NOT
29115: IFFALSE 29191
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
29117: LD_ADDR_EXP 67
29121: PUSH
29122: LD_EXP 67
29126: PPUSH
29127: LD_VAR 0 2
29131: PUSH
29132: LD_EXP 67
29136: PUSH
29137: LD_VAR 0 2
29141: ARRAY
29142: PUSH
29143: LD_INT 1
29145: PLUS
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PPUSH
29151: LD_VAR 0 3
29155: PPUSH
29156: CALL 51164 0 3
29160: ST_TO_ADDR
// SetTag ( j , 107 ) ;
29161: LD_VAR 0 3
29165: PPUSH
29166: LD_INT 107
29168: PPUSH
29169: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
29173: LD_EXP 67
29177: PUSH
29178: LD_VAR 0 2
29182: ARRAY
29183: PUSH
29184: LD_INT 5
29186: GREATEREQUAL
29187: IFFALSE 29191
// break ;
29189: GO 29193
// end ;
29191: GO 29102
29193: POP
29194: POP
// end ; if mc_crates_collector [ i ] and target then
29195: LD_EXP 67
29199: PUSH
29200: LD_VAR 0 2
29204: ARRAY
29205: PUSH
29206: LD_VAR 0 6
29210: AND
29211: IFFALSE 29454
// begin if mc_crates_collector [ i ] < target [ 1 ] then
29213: LD_EXP 67
29217: PUSH
29218: LD_VAR 0 2
29222: ARRAY
29223: PUSH
29224: LD_VAR 0 6
29228: PUSH
29229: LD_INT 1
29231: ARRAY
29232: LESS
29233: IFFALSE 29253
// tmp := mc_crates_collector [ i ] else
29235: LD_ADDR_VAR 0 5
29239: PUSH
29240: LD_EXP 67
29244: PUSH
29245: LD_VAR 0 2
29249: ARRAY
29250: ST_TO_ADDR
29251: GO 29267
// tmp := target [ 1 ] ;
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_VAR 0 6
29262: PUSH
29263: LD_INT 1
29265: ARRAY
29266: ST_TO_ADDR
// k := 0 ;
29267: LD_ADDR_VAR 0 4
29271: PUSH
29272: LD_INT 0
29274: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
29275: LD_ADDR_VAR 0 3
29279: PUSH
29280: LD_EXP 67
29284: PUSH
29285: LD_VAR 0 2
29289: ARRAY
29290: PUSH
29291: FOR_IN
29292: IFFALSE 29452
// begin k := k + 1 ;
29294: LD_ADDR_VAR 0 4
29298: PUSH
29299: LD_VAR 0 4
29303: PUSH
29304: LD_INT 1
29306: PLUS
29307: ST_TO_ADDR
// if k > tmp then
29308: LD_VAR 0 4
29312: PUSH
29313: LD_VAR 0 5
29317: GREATER
29318: IFFALSE 29322
// break ;
29320: GO 29452
// if not GetClass ( j ) in [ 2 , 16 ] then
29322: LD_VAR 0 3
29326: PPUSH
29327: CALL_OW 257
29331: PUSH
29332: LD_INT 2
29334: PUSH
29335: LD_INT 16
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: IN
29342: NOT
29343: IFFALSE 29396
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
29345: LD_ADDR_EXP 67
29349: PUSH
29350: LD_EXP 67
29354: PPUSH
29355: LD_VAR 0 2
29359: PPUSH
29360: LD_EXP 67
29364: PUSH
29365: LD_VAR 0 2
29369: ARRAY
29370: PUSH
29371: LD_VAR 0 3
29375: DIFF
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
// SetTag ( j , 0 ) ;
29382: LD_VAR 0 3
29386: PPUSH
29387: LD_INT 0
29389: PPUSH
29390: CALL_OW 109
// continue ;
29394: GO 29291
// end ; if IsInUnit ( j ) then
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 310
29405: IFFALSE 29416
// ComExitBuilding ( j ) ;
29407: LD_VAR 0 3
29411: PPUSH
29412: CALL_OW 122
// wait ( 3 ) ;
29416: LD_INT 3
29418: PPUSH
29419: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29423: LD_VAR 0 3
29427: PPUSH
29428: LD_VAR 0 6
29432: PUSH
29433: LD_INT 2
29435: ARRAY
29436: PPUSH
29437: LD_VAR 0 6
29441: PUSH
29442: LD_INT 3
29444: ARRAY
29445: PPUSH
29446: CALL_OW 117
// end ;
29450: GO 29291
29452: POP
29453: POP
// end ; end else
29454: GO 30016
// begin for j in cargo do
29456: LD_ADDR_VAR 0 3
29460: PUSH
29461: LD_VAR 0 7
29465: PUSH
29466: FOR_IN
29467: IFFALSE 30014
// begin if GetTag ( j ) <> 0 then
29469: LD_VAR 0 3
29473: PPUSH
29474: CALL_OW 110
29478: PUSH
29479: LD_INT 0
29481: NONEQUAL
29482: IFFALSE 29486
// continue ;
29484: GO 29466
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
29486: LD_VAR 0 3
29490: PPUSH
29491: CALL_OW 256
29495: PUSH
29496: LD_INT 1000
29498: LESS
29499: PUSH
29500: LD_VAR 0 3
29504: PPUSH
29505: LD_EXP 74
29509: PUSH
29510: LD_VAR 0 2
29514: ARRAY
29515: PPUSH
29516: CALL_OW 308
29520: NOT
29521: AND
29522: IFFALSE 29544
// ComMoveToArea ( j , mc_parking [ i ] ) ;
29524: LD_VAR 0 3
29528: PPUSH
29529: LD_EXP 74
29533: PUSH
29534: LD_VAR 0 2
29538: ARRAY
29539: PPUSH
29540: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
29544: LD_VAR 0 3
29548: PPUSH
29549: CALL_OW 256
29553: PUSH
29554: LD_INT 1000
29556: LESS
29557: PUSH
29558: LD_VAR 0 3
29562: PPUSH
29563: LD_EXP 74
29567: PUSH
29568: LD_VAR 0 2
29572: ARRAY
29573: PPUSH
29574: CALL_OW 308
29578: AND
29579: IFFALSE 29583
// continue ;
29581: GO 29466
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
29583: LD_VAR 0 3
29587: PPUSH
29588: CALL_OW 262
29592: PUSH
29593: LD_INT 2
29595: EQUAL
29596: PUSH
29597: LD_VAR 0 3
29601: PPUSH
29602: CALL_OW 261
29606: PUSH
29607: LD_INT 15
29609: LESS
29610: AND
29611: IFFALSE 29615
// continue ;
29613: GO 29466
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
29615: LD_VAR 0 3
29619: PPUSH
29620: CALL_OW 262
29624: PUSH
29625: LD_INT 1
29627: EQUAL
29628: PUSH
29629: LD_VAR 0 3
29633: PPUSH
29634: CALL_OW 261
29638: PUSH
29639: LD_INT 10
29641: LESS
29642: AND
29643: IFFALSE 29953
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
29645: LD_ADDR_VAR 0 8
29649: PUSH
29650: LD_EXP 50
29654: PUSH
29655: LD_VAR 0 2
29659: ARRAY
29660: PPUSH
29661: LD_INT 2
29663: PUSH
29664: LD_INT 30
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 30
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 72
29693: ST_TO_ADDR
// if not depot then
29694: LD_VAR 0 8
29698: NOT
29699: IFFALSE 29703
// continue ;
29701: GO 29466
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
29703: LD_VAR 0 3
29707: PPUSH
29708: LD_VAR 0 8
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: CALL_OW 74
29722: PPUSH
29723: CALL_OW 296
29727: PUSH
29728: LD_INT 6
29730: LESS
29731: IFFALSE 29747
// SetFuel ( j , 100 ) else
29733: LD_VAR 0 3
29737: PPUSH
29738: LD_INT 100
29740: PPUSH
29741: CALL_OW 240
29745: GO 29953
// if GetFuel ( j ) = 0 then
29747: LD_VAR 0 3
29751: PPUSH
29752: CALL_OW 261
29756: PUSH
29757: LD_INT 0
29759: EQUAL
29760: IFFALSE 29953
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
29762: LD_ADDR_EXP 69
29766: PUSH
29767: LD_EXP 69
29771: PPUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_EXP 69
29781: PUSH
29782: LD_VAR 0 2
29786: ARRAY
29787: PUSH
29788: LD_VAR 0 3
29792: DIFF
29793: PPUSH
29794: CALL_OW 1
29798: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
29799: LD_VAR 0 3
29803: PPUSH
29804: CALL_OW 263
29808: PUSH
29809: LD_INT 1
29811: EQUAL
29812: IFFALSE 29828
// ComExitVehicle ( IsInUnit ( j ) ) ;
29814: LD_VAR 0 3
29818: PPUSH
29819: CALL_OW 310
29823: PPUSH
29824: CALL_OW 121
// if GetControl ( j ) = control_remote then
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 263
29837: PUSH
29838: LD_INT 2
29840: EQUAL
29841: IFFALSE 29852
// ComUnlink ( j ) ;
29843: LD_VAR 0 3
29847: PPUSH
29848: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
29852: LD_ADDR_VAR 0 9
29856: PUSH
29857: LD_VAR 0 2
29861: PPUSH
29862: LD_INT 3
29864: PPUSH
29865: CALL 39115 0 2
29869: ST_TO_ADDR
// if fac then
29870: LD_VAR 0 9
29874: IFFALSE 29951
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
29876: LD_ADDR_VAR 0 10
29880: PUSH
29881: LD_VAR 0 9
29885: PPUSH
29886: LD_VAR 0 3
29890: PPUSH
29891: CALL_OW 265
29895: PPUSH
29896: LD_VAR 0 3
29900: PPUSH
29901: CALL_OW 262
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 263
29915: PPUSH
29916: LD_VAR 0 3
29920: PPUSH
29921: CALL_OW 264
29925: PPUSH
29926: CALL 48764 0 5
29930: ST_TO_ADDR
// if components then
29931: LD_VAR 0 10
29935: IFFALSE 29951
// MC_InsertProduceList ( i , components ) ;
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_VAR 0 10
29946: PPUSH
29947: CALL 38685 0 2
// end ; continue ;
29951: GO 29466
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
29953: LD_VAR 0 3
29957: PPUSH
29958: LD_INT 1
29960: PPUSH
29961: CALL_OW 289
29965: PUSH
29966: LD_INT 100
29968: LESS
29969: PUSH
29970: LD_VAR 0 3
29974: PPUSH
29975: CALL_OW 314
29979: NOT
29980: AND
29981: IFFALSE 30010
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
29983: LD_VAR 0 3
29987: PPUSH
29988: LD_VAR 0 6
29992: PUSH
29993: LD_INT 2
29995: ARRAY
29996: PPUSH
29997: LD_VAR 0 6
30001: PUSH
30002: LD_INT 3
30004: ARRAY
30005: PPUSH
30006: CALL_OW 117
// break ;
30010: GO 30014
// end ;
30012: GO 29466
30014: POP
30015: POP
// end ; end ;
30016: GO 28304
30018: POP
30019: POP
// end ;
30020: LD_VAR 0 1
30024: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
30025: LD_INT 0
30027: PPUSH
30028: PPUSH
30029: PPUSH
30030: PPUSH
// if not mc_bases then
30031: LD_EXP 50
30035: NOT
30036: IFFALSE 30040
// exit ;
30038: GO 30201
// for i = 1 to mc_bases do
30040: LD_ADDR_VAR 0 2
30044: PUSH
30045: DOUBLE
30046: LD_INT 1
30048: DEC
30049: ST_TO_ADDR
30050: LD_EXP 50
30054: PUSH
30055: FOR_TO
30056: IFFALSE 30199
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
30058: LD_ADDR_VAR 0 4
30062: PUSH
30063: LD_EXP 69
30067: PUSH
30068: LD_VAR 0 2
30072: ARRAY
30073: PUSH
30074: LD_EXP 72
30078: PUSH
30079: LD_VAR 0 2
30083: ARRAY
30084: UNION
30085: PPUSH
30086: LD_INT 33
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PPUSH
30096: CALL_OW 72
30100: ST_TO_ADDR
// if tmp then
30101: LD_VAR 0 4
30105: IFFALSE 30197
// for j in tmp do
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_VAR 0 4
30116: PUSH
30117: FOR_IN
30118: IFFALSE 30195
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 312
30129: NOT
30130: PUSH
30131: LD_VAR 0 3
30135: PPUSH
30136: CALL_OW 256
30140: PUSH
30141: LD_INT 250
30143: GREATEREQUAL
30144: AND
30145: IFFALSE 30158
// Connect ( j ) else
30147: LD_VAR 0 3
30151: PPUSH
30152: CALL 54097 0 1
30156: GO 30193
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
30158: LD_VAR 0 3
30162: PPUSH
30163: CALL_OW 256
30167: PUSH
30168: LD_INT 250
30170: LESS
30171: PUSH
30172: LD_VAR 0 3
30176: PPUSH
30177: CALL_OW 312
30181: AND
30182: IFFALSE 30193
// ComUnlink ( j ) ;
30184: LD_VAR 0 3
30188: PPUSH
30189: CALL_OW 136
30193: GO 30117
30195: POP
30196: POP
// end ;
30197: GO 30055
30199: POP
30200: POP
// end ;
30201: LD_VAR 0 1
30205: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
30206: LD_INT 0
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
// if not mc_bases then
30213: LD_EXP 50
30217: NOT
30218: IFFALSE 30222
// exit ;
30220: GO 30682
// for i = 1 to mc_bases do
30222: LD_ADDR_VAR 0 2
30226: PUSH
30227: DOUBLE
30228: LD_INT 1
30230: DEC
30231: ST_TO_ADDR
30232: LD_EXP 50
30236: PUSH
30237: FOR_TO
30238: IFFALSE 30680
// begin if not mc_produce [ i ] then
30240: LD_EXP 71
30244: PUSH
30245: LD_VAR 0 2
30249: ARRAY
30250: NOT
30251: IFFALSE 30255
// continue ;
30253: GO 30237
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30255: LD_ADDR_VAR 0 5
30259: PUSH
30260: LD_EXP 50
30264: PUSH
30265: LD_VAR 0 2
30269: ARRAY
30270: PPUSH
30271: LD_INT 30
30273: PUSH
30274: LD_INT 3
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PPUSH
30281: CALL_OW 72
30285: ST_TO_ADDR
// if not fac then
30286: LD_VAR 0 5
30290: NOT
30291: IFFALSE 30295
// continue ;
30293: GO 30237
// for j in fac do
30295: LD_ADDR_VAR 0 3
30299: PUSH
30300: LD_VAR 0 5
30304: PUSH
30305: FOR_IN
30306: IFFALSE 30676
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
30308: LD_VAR 0 3
30312: PPUSH
30313: CALL_OW 461
30317: PUSH
30318: LD_INT 2
30320: NONEQUAL
30321: PUSH
30322: LD_VAR 0 3
30326: PPUSH
30327: LD_INT 15
30329: PPUSH
30330: CALL 53757 0 2
30334: PUSH
30335: LD_INT 4
30337: ARRAY
30338: OR
30339: PUSH
30340: LD_VAR 0 3
30344: PPUSH
30345: CALL_OW 313
30349: PUSH
30350: LD_INT 0
30352: EQUAL
30353: OR
30354: IFFALSE 30358
// continue ;
30356: GO 30305
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
30358: LD_VAR 0 3
30362: PPUSH
30363: LD_EXP 71
30367: PUSH
30368: LD_VAR 0 2
30372: ARRAY
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PPUSH
30382: LD_EXP 71
30386: PUSH
30387: LD_VAR 0 2
30391: ARRAY
30392: PUSH
30393: LD_INT 1
30395: ARRAY
30396: PUSH
30397: LD_INT 2
30399: ARRAY
30400: PPUSH
30401: LD_EXP 71
30405: PUSH
30406: LD_VAR 0 2
30410: ARRAY
30411: PUSH
30412: LD_INT 1
30414: ARRAY
30415: PUSH
30416: LD_INT 3
30418: ARRAY
30419: PPUSH
30420: LD_EXP 71
30424: PUSH
30425: LD_VAR 0 2
30429: ARRAY
30430: PUSH
30431: LD_INT 1
30433: ARRAY
30434: PUSH
30435: LD_INT 4
30437: ARRAY
30438: PPUSH
30439: CALL_OW 448
30443: PUSH
30444: LD_VAR 0 3
30448: PPUSH
30449: LD_EXP 71
30453: PUSH
30454: LD_VAR 0 2
30458: ARRAY
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PUSH
30464: LD_INT 1
30466: ARRAY
30467: PUSH
30468: LD_EXP 71
30472: PUSH
30473: LD_VAR 0 2
30477: ARRAY
30478: PUSH
30479: LD_INT 1
30481: ARRAY
30482: PUSH
30483: LD_INT 2
30485: ARRAY
30486: PUSH
30487: LD_EXP 71
30491: PUSH
30492: LD_VAR 0 2
30496: ARRAY
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: PUSH
30502: LD_INT 3
30504: ARRAY
30505: PUSH
30506: LD_EXP 71
30510: PUSH
30511: LD_VAR 0 2
30515: ARRAY
30516: PUSH
30517: LD_INT 1
30519: ARRAY
30520: PUSH
30521: LD_INT 4
30523: ARRAY
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: PPUSH
30531: CALL 57428 0 2
30535: AND
30536: IFFALSE 30674
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
30538: LD_VAR 0 3
30542: PPUSH
30543: LD_EXP 71
30547: PUSH
30548: LD_VAR 0 2
30552: ARRAY
30553: PUSH
30554: LD_INT 1
30556: ARRAY
30557: PUSH
30558: LD_INT 1
30560: ARRAY
30561: PPUSH
30562: LD_EXP 71
30566: PUSH
30567: LD_VAR 0 2
30571: ARRAY
30572: PUSH
30573: LD_INT 1
30575: ARRAY
30576: PUSH
30577: LD_INT 2
30579: ARRAY
30580: PPUSH
30581: LD_EXP 71
30585: PUSH
30586: LD_VAR 0 2
30590: ARRAY
30591: PUSH
30592: LD_INT 1
30594: ARRAY
30595: PUSH
30596: LD_INT 3
30598: ARRAY
30599: PPUSH
30600: LD_EXP 71
30604: PUSH
30605: LD_VAR 0 2
30609: ARRAY
30610: PUSH
30611: LD_INT 1
30613: ARRAY
30614: PUSH
30615: LD_INT 4
30617: ARRAY
30618: PPUSH
30619: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
30623: LD_ADDR_VAR 0 4
30627: PUSH
30628: LD_EXP 71
30632: PUSH
30633: LD_VAR 0 2
30637: ARRAY
30638: PPUSH
30639: LD_INT 1
30641: PPUSH
30642: CALL_OW 3
30646: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
30647: LD_ADDR_EXP 71
30651: PUSH
30652: LD_EXP 71
30656: PPUSH
30657: LD_VAR 0 2
30661: PPUSH
30662: LD_VAR 0 4
30666: PPUSH
30667: CALL_OW 1
30671: ST_TO_ADDR
// break ;
30672: GO 30676
// end ; end ;
30674: GO 30305
30676: POP
30677: POP
// end ;
30678: GO 30237
30680: POP
30681: POP
// end ;
30682: LD_VAR 0 1
30686: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
30687: LD_INT 0
30689: PPUSH
30690: PPUSH
30691: PPUSH
// if not mc_bases then
30692: LD_EXP 50
30696: NOT
30697: IFFALSE 30701
// exit ;
30699: GO 30790
// for i = 1 to mc_bases do
30701: LD_ADDR_VAR 0 2
30705: PUSH
30706: DOUBLE
30707: LD_INT 1
30709: DEC
30710: ST_TO_ADDR
30711: LD_EXP 50
30715: PUSH
30716: FOR_TO
30717: IFFALSE 30788
// begin if mc_attack [ i ] then
30719: LD_EXP 70
30723: PUSH
30724: LD_VAR 0 2
30728: ARRAY
30729: IFFALSE 30786
// begin tmp := mc_attack [ i ] [ 1 ] ;
30731: LD_ADDR_VAR 0 3
30735: PUSH
30736: LD_EXP 70
30740: PUSH
30741: LD_VAR 0 2
30745: ARRAY
30746: PUSH
30747: LD_INT 1
30749: ARRAY
30750: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
30751: LD_ADDR_EXP 70
30755: PUSH
30756: LD_EXP 70
30760: PPUSH
30761: LD_VAR 0 2
30765: PPUSH
30766: EMPTY
30767: PPUSH
30768: CALL_OW 1
30772: ST_TO_ADDR
// Attack ( tmp ) ;
30773: LD_VAR 0 3
30777: PPUSH
30778: CALL 79617 0 1
// exit ;
30782: POP
30783: POP
30784: GO 30790
// end ; end ;
30786: GO 30716
30788: POP
30789: POP
// end ;
30790: LD_VAR 0 1
30794: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
30795: LD_INT 0
30797: PPUSH
30798: PPUSH
30799: PPUSH
30800: PPUSH
30801: PPUSH
30802: PPUSH
30803: PPUSH
// if not mc_bases then
30804: LD_EXP 50
30808: NOT
30809: IFFALSE 30813
// exit ;
30811: GO 31417
// for i = 1 to mc_bases do
30813: LD_ADDR_VAR 0 2
30817: PUSH
30818: DOUBLE
30819: LD_INT 1
30821: DEC
30822: ST_TO_ADDR
30823: LD_EXP 50
30827: PUSH
30828: FOR_TO
30829: IFFALSE 31415
// begin if not mc_bases [ i ] then
30831: LD_EXP 50
30835: PUSH
30836: LD_VAR 0 2
30840: ARRAY
30841: NOT
30842: IFFALSE 30846
// continue ;
30844: GO 30828
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
30846: LD_ADDR_VAR 0 7
30850: PUSH
30851: LD_EXP 50
30855: PUSH
30856: LD_VAR 0 2
30860: ARRAY
30861: PUSH
30862: LD_INT 1
30864: ARRAY
30865: PPUSH
30866: CALL 48068 0 1
30870: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
30871: LD_ADDR_EXP 73
30875: PUSH
30876: LD_EXP 73
30880: PPUSH
30881: LD_VAR 0 2
30885: PPUSH
30886: LD_EXP 50
30890: PUSH
30891: LD_VAR 0 2
30895: ARRAY
30896: PUSH
30897: LD_INT 1
30899: ARRAY
30900: PPUSH
30901: CALL_OW 255
30905: PPUSH
30906: LD_EXP 75
30910: PUSH
30911: LD_VAR 0 2
30915: ARRAY
30916: PPUSH
30917: CALL 46028 0 2
30921: PPUSH
30922: CALL_OW 1
30926: ST_TO_ADDR
// if not mc_scan [ i ] then
30927: LD_EXP 73
30931: PUSH
30932: LD_VAR 0 2
30936: ARRAY
30937: NOT
30938: IFFALSE 31093
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
30940: LD_ADDR_VAR 0 4
30944: PUSH
30945: LD_EXP 50
30949: PUSH
30950: LD_VAR 0 2
30954: ARRAY
30955: PPUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 25
30961: PUSH
30962: LD_INT 5
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 25
30971: PUSH
30972: LD_INT 8
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 25
30981: PUSH
30982: LD_INT 9
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: PPUSH
30995: CALL_OW 72
30999: ST_TO_ADDR
// if not tmp then
31000: LD_VAR 0 4
31004: NOT
31005: IFFALSE 31009
// continue ;
31007: GO 30828
// for j in tmp do
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_VAR 0 4
31018: PUSH
31019: FOR_IN
31020: IFFALSE 31091
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
31022: LD_VAR 0 3
31026: PPUSH
31027: CALL_OW 310
31031: PPUSH
31032: CALL_OW 266
31036: PUSH
31037: LD_INT 5
31039: EQUAL
31040: PUSH
31041: LD_VAR 0 3
31045: PPUSH
31046: CALL_OW 257
31050: PUSH
31051: LD_INT 1
31053: EQUAL
31054: AND
31055: PUSH
31056: LD_VAR 0 3
31060: PPUSH
31061: CALL_OW 459
31065: NOT
31066: AND
31067: PUSH
31068: LD_VAR 0 7
31072: AND
31073: IFFALSE 31089
// ComChangeProfession ( j , class ) ;
31075: LD_VAR 0 3
31079: PPUSH
31080: LD_VAR 0 7
31084: PPUSH
31085: CALL_OW 123
31089: GO 31019
31091: POP
31092: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
31093: LD_EXP 73
31097: PUSH
31098: LD_VAR 0 2
31102: ARRAY
31103: PUSH
31104: LD_EXP 72
31108: PUSH
31109: LD_VAR 0 2
31113: ARRAY
31114: NOT
31115: AND
31116: PUSH
31117: LD_EXP 50
31121: PUSH
31122: LD_VAR 0 2
31126: ARRAY
31127: PPUSH
31128: LD_INT 30
31130: PUSH
31131: LD_INT 32
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PPUSH
31138: CALL_OW 72
31142: NOT
31143: AND
31144: PUSH
31145: LD_EXP 50
31149: PUSH
31150: LD_VAR 0 2
31154: ARRAY
31155: PPUSH
31156: LD_INT 2
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 4
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 30
31171: PUSH
31172: LD_INT 5
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: PPUSH
31184: CALL_OW 72
31188: NOT
31189: AND
31190: IFFALSE 31322
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
31192: LD_ADDR_VAR 0 4
31196: PUSH
31197: LD_EXP 50
31201: PUSH
31202: LD_VAR 0 2
31206: ARRAY
31207: PPUSH
31208: LD_INT 2
31210: PUSH
31211: LD_INT 25
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 25
31223: PUSH
31224: LD_INT 5
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 25
31233: PUSH
31234: LD_INT 8
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 25
31243: PUSH
31244: LD_INT 9
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: PPUSH
31258: CALL_OW 72
31262: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
31263: LD_ADDR_VAR 0 4
31267: PUSH
31268: LD_VAR 0 4
31272: PUSH
31273: LD_VAR 0 4
31277: PPUSH
31278: LD_INT 18
31280: PPUSH
31281: CALL 84361 0 2
31285: DIFF
31286: ST_TO_ADDR
// if tmp then
31287: LD_VAR 0 4
31291: IFFALSE 31322
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
31293: LD_VAR 0 2
31297: PPUSH
31298: LD_VAR 0 4
31302: PPUSH
31303: LD_EXP 75
31307: PUSH
31308: LD_VAR 0 2
31312: ARRAY
31313: PPUSH
31314: CALL 46063 0 3
// exit ;
31318: POP
31319: POP
31320: GO 31417
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
31322: LD_EXP 73
31326: PUSH
31327: LD_VAR 0 2
31331: ARRAY
31332: PUSH
31333: LD_EXP 72
31337: PUSH
31338: LD_VAR 0 2
31342: ARRAY
31343: AND
31344: IFFALSE 31413
// begin tmp := mc_defender [ i ] ;
31346: LD_ADDR_VAR 0 4
31350: PUSH
31351: LD_EXP 72
31355: PUSH
31356: LD_VAR 0 2
31360: ARRAY
31361: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
31362: LD_ADDR_EXP 72
31366: PUSH
31367: LD_EXP 72
31371: PPUSH
31372: LD_VAR 0 2
31376: PPUSH
31377: EMPTY
31378: PPUSH
31379: CALL_OW 1
31383: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
31384: LD_VAR 0 2
31388: PPUSH
31389: LD_VAR 0 4
31393: PPUSH
31394: LD_EXP 73
31398: PUSH
31399: LD_VAR 0 2
31403: ARRAY
31404: PPUSH
31405: CALL 46561 0 3
// exit ;
31409: POP
31410: POP
31411: GO 31417
// end ; end ;
31413: GO 30828
31415: POP
31416: POP
// end ;
31417: LD_VAR 0 1
31421: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
31422: LD_INT 0
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
31429: PPUSH
31430: PPUSH
31431: PPUSH
31432: PPUSH
31433: PPUSH
31434: PPUSH
// if not mc_bases then
31435: LD_EXP 50
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 32531
// for i = 1 to mc_bases do
31444: LD_ADDR_VAR 0 2
31448: PUSH
31449: DOUBLE
31450: LD_INT 1
31452: DEC
31453: ST_TO_ADDR
31454: LD_EXP 50
31458: PUSH
31459: FOR_TO
31460: IFFALSE 32529
// begin tmp := mc_lab [ i ] ;
31462: LD_ADDR_VAR 0 6
31466: PUSH
31467: LD_EXP 83
31471: PUSH
31472: LD_VAR 0 2
31476: ARRAY
31477: ST_TO_ADDR
// if not tmp then
31478: LD_VAR 0 6
31482: NOT
31483: IFFALSE 31487
// continue ;
31485: GO 31459
// idle_lab := 0 ;
31487: LD_ADDR_VAR 0 11
31491: PUSH
31492: LD_INT 0
31494: ST_TO_ADDR
// for j in tmp do
31495: LD_ADDR_VAR 0 3
31499: PUSH
31500: LD_VAR 0 6
31504: PUSH
31505: FOR_IN
31506: IFFALSE 32525
// begin researching := false ;
31508: LD_ADDR_VAR 0 10
31512: PUSH
31513: LD_INT 0
31515: ST_TO_ADDR
// side := GetSide ( j ) ;
31516: LD_ADDR_VAR 0 4
31520: PUSH
31521: LD_VAR 0 3
31525: PPUSH
31526: CALL_OW 255
31530: ST_TO_ADDR
// if not mc_tech [ side ] then
31531: LD_EXP 77
31535: PUSH
31536: LD_VAR 0 4
31540: ARRAY
31541: NOT
31542: IFFALSE 31546
// continue ;
31544: GO 31505
// if BuildingStatus ( j ) = bs_idle then
31546: LD_VAR 0 3
31550: PPUSH
31551: CALL_OW 461
31555: PUSH
31556: LD_INT 2
31558: EQUAL
31559: IFFALSE 31747
// begin if idle_lab and UnitsInside ( j ) < 6 then
31561: LD_VAR 0 11
31565: PUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: CALL_OW 313
31575: PUSH
31576: LD_INT 6
31578: LESS
31579: AND
31580: IFFALSE 31651
// begin tmp2 := UnitsInside ( idle_lab ) ;
31582: LD_ADDR_VAR 0 9
31586: PUSH
31587: LD_VAR 0 11
31591: PPUSH
31592: CALL_OW 313
31596: ST_TO_ADDR
// if tmp2 then
31597: LD_VAR 0 9
31601: IFFALSE 31643
// for x in tmp2 do
31603: LD_ADDR_VAR 0 7
31607: PUSH
31608: LD_VAR 0 9
31612: PUSH
31613: FOR_IN
31614: IFFALSE 31641
// begin ComExitBuilding ( x ) ;
31616: LD_VAR 0 7
31620: PPUSH
31621: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
31625: LD_VAR 0 7
31629: PPUSH
31630: LD_VAR 0 3
31634: PPUSH
31635: CALL_OW 180
// end ;
31639: GO 31613
31641: POP
31642: POP
// idle_lab := 0 ;
31643: LD_ADDR_VAR 0 11
31647: PUSH
31648: LD_INT 0
31650: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
31651: LD_ADDR_VAR 0 5
31655: PUSH
31656: LD_EXP 77
31660: PUSH
31661: LD_VAR 0 4
31665: ARRAY
31666: PUSH
31667: FOR_IN
31668: IFFALSE 31728
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
31670: LD_VAR 0 3
31674: PPUSH
31675: LD_VAR 0 5
31679: PPUSH
31680: CALL_OW 430
31684: PUSH
31685: LD_VAR 0 4
31689: PPUSH
31690: LD_VAR 0 5
31694: PPUSH
31695: CALL 45133 0 2
31699: AND
31700: IFFALSE 31726
// begin researching := true ;
31702: LD_ADDR_VAR 0 10
31706: PUSH
31707: LD_INT 1
31709: ST_TO_ADDR
// ComResearch ( j , t ) ;
31710: LD_VAR 0 3
31714: PPUSH
31715: LD_VAR 0 5
31719: PPUSH
31720: CALL_OW 124
// break ;
31724: GO 31728
// end ;
31726: GO 31667
31728: POP
31729: POP
// if not researching then
31730: LD_VAR 0 10
31734: NOT
31735: IFFALSE 31747
// idle_lab := j ;
31737: LD_ADDR_VAR 0 11
31741: PUSH
31742: LD_VAR 0 3
31746: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
31747: LD_VAR 0 3
31751: PPUSH
31752: CALL_OW 461
31756: PUSH
31757: LD_INT 10
31759: EQUAL
31760: IFFALSE 32348
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
31762: LD_EXP 79
31766: PUSH
31767: LD_VAR 0 2
31771: ARRAY
31772: NOT
31773: PUSH
31774: LD_EXP 80
31778: PUSH
31779: LD_VAR 0 2
31783: ARRAY
31784: NOT
31785: AND
31786: PUSH
31787: LD_EXP 77
31791: PUSH
31792: LD_VAR 0 4
31796: ARRAY
31797: PUSH
31798: LD_INT 1
31800: GREATER
31801: AND
31802: IFFALSE 31933
// begin ComCancel ( j ) ;
31804: LD_VAR 0 3
31808: PPUSH
31809: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
31813: LD_ADDR_EXP 77
31817: PUSH
31818: LD_EXP 77
31822: PPUSH
31823: LD_VAR 0 4
31827: PPUSH
31828: LD_EXP 77
31832: PUSH
31833: LD_VAR 0 4
31837: ARRAY
31838: PPUSH
31839: LD_EXP 77
31843: PUSH
31844: LD_VAR 0 4
31848: ARRAY
31849: PUSH
31850: LD_INT 1
31852: MINUS
31853: PPUSH
31854: LD_EXP 77
31858: PUSH
31859: LD_VAR 0 4
31863: ARRAY
31864: PPUSH
31865: LD_INT 0
31867: PPUSH
31868: CALL 50582 0 4
31872: PPUSH
31873: CALL_OW 1
31877: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
31878: LD_ADDR_EXP 77
31882: PUSH
31883: LD_EXP 77
31887: PPUSH
31888: LD_VAR 0 4
31892: PPUSH
31893: LD_EXP 77
31897: PUSH
31898: LD_VAR 0 4
31902: ARRAY
31903: PPUSH
31904: LD_EXP 77
31908: PUSH
31909: LD_VAR 0 4
31913: ARRAY
31914: PPUSH
31915: LD_INT 1
31917: PPUSH
31918: LD_INT 0
31920: PPUSH
31921: CALL 50582 0 4
31925: PPUSH
31926: CALL_OW 1
31930: ST_TO_ADDR
// continue ;
31931: GO 31505
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
31933: LD_EXP 79
31937: PUSH
31938: LD_VAR 0 2
31942: ARRAY
31943: PUSH
31944: LD_EXP 80
31948: PUSH
31949: LD_VAR 0 2
31953: ARRAY
31954: NOT
31955: AND
31956: IFFALSE 32083
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
31958: LD_ADDR_EXP 80
31962: PUSH
31963: LD_EXP 80
31967: PPUSH
31968: LD_VAR 0 2
31972: PUSH
31973: LD_EXP 80
31977: PUSH
31978: LD_VAR 0 2
31982: ARRAY
31983: PUSH
31984: LD_INT 1
31986: PLUS
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PPUSH
31992: LD_EXP 79
31996: PUSH
31997: LD_VAR 0 2
32001: ARRAY
32002: PUSH
32003: LD_INT 1
32005: ARRAY
32006: PPUSH
32007: CALL 51164 0 3
32011: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
32012: LD_EXP 79
32016: PUSH
32017: LD_VAR 0 2
32021: ARRAY
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: PPUSH
32027: LD_INT 112
32029: PPUSH
32030: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
32034: LD_ADDR_VAR 0 9
32038: PUSH
32039: LD_EXP 79
32043: PUSH
32044: LD_VAR 0 2
32048: ARRAY
32049: PPUSH
32050: LD_INT 1
32052: PPUSH
32053: CALL_OW 3
32057: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
32058: LD_ADDR_EXP 79
32062: PUSH
32063: LD_EXP 79
32067: PPUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_VAR 0 9
32077: PPUSH
32078: CALL_OW 1
32082: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
32083: LD_EXP 79
32087: PUSH
32088: LD_VAR 0 2
32092: ARRAY
32093: PUSH
32094: LD_EXP 80
32098: PUSH
32099: LD_VAR 0 2
32103: ARRAY
32104: AND
32105: PUSH
32106: LD_EXP 80
32110: PUSH
32111: LD_VAR 0 2
32115: ARRAY
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: PPUSH
32121: CALL_OW 310
32125: NOT
32126: AND
32127: PUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: CALL_OW 313
32137: PUSH
32138: LD_INT 6
32140: EQUAL
32141: AND
32142: IFFALSE 32198
// begin tmp2 := UnitsInside ( j ) ;
32144: LD_ADDR_VAR 0 9
32148: PUSH
32149: LD_VAR 0 3
32153: PPUSH
32154: CALL_OW 313
32158: ST_TO_ADDR
// if tmp2 = 6 then
32159: LD_VAR 0 9
32163: PUSH
32164: LD_INT 6
32166: EQUAL
32167: IFFALSE 32198
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
32169: LD_VAR 0 9
32173: PUSH
32174: LD_INT 1
32176: ARRAY
32177: PPUSH
32178: LD_INT 112
32180: PPUSH
32181: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
32185: LD_VAR 0 9
32189: PUSH
32190: LD_INT 1
32192: ARRAY
32193: PPUSH
32194: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
32198: LD_EXP 80
32202: PUSH
32203: LD_VAR 0 2
32207: ARRAY
32208: PUSH
32209: LD_EXP 80
32213: PUSH
32214: LD_VAR 0 2
32218: ARRAY
32219: PUSH
32220: LD_INT 1
32222: ARRAY
32223: PPUSH
32224: CALL_OW 314
32228: NOT
32229: AND
32230: PUSH
32231: LD_EXP 80
32235: PUSH
32236: LD_VAR 0 2
32240: ARRAY
32241: PUSH
32242: LD_INT 1
32244: ARRAY
32245: PPUSH
32246: CALL_OW 310
32250: NOT
32251: AND
32252: IFFALSE 32278
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
32254: LD_EXP 80
32258: PUSH
32259: LD_VAR 0 2
32263: ARRAY
32264: PUSH
32265: LD_INT 1
32267: ARRAY
32268: PPUSH
32269: LD_VAR 0 3
32273: PPUSH
32274: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
32278: LD_EXP 80
32282: PUSH
32283: LD_VAR 0 2
32287: ARRAY
32288: PUSH
32289: LD_INT 1
32291: ARRAY
32292: PPUSH
32293: CALL_OW 310
32297: PUSH
32298: LD_EXP 80
32302: PUSH
32303: LD_VAR 0 2
32307: ARRAY
32308: PUSH
32309: LD_INT 1
32311: ARRAY
32312: PPUSH
32313: CALL_OW 310
32317: PPUSH
32318: CALL_OW 461
32322: PUSH
32323: LD_INT 3
32325: NONEQUAL
32326: AND
32327: IFFALSE 32348
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
32329: LD_EXP 80
32333: PUSH
32334: LD_VAR 0 2
32338: ARRAY
32339: PUSH
32340: LD_INT 1
32342: ARRAY
32343: PPUSH
32344: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
32348: LD_VAR 0 3
32352: PPUSH
32353: CALL_OW 461
32357: PUSH
32358: LD_INT 6
32360: EQUAL
32361: PUSH
32362: LD_VAR 0 6
32366: PUSH
32367: LD_INT 1
32369: GREATER
32370: AND
32371: IFFALSE 32523
// begin sci := [ ] ;
32373: LD_ADDR_VAR 0 8
32377: PUSH
32378: EMPTY
32379: ST_TO_ADDR
// for x in ( tmp diff j ) do
32380: LD_ADDR_VAR 0 7
32384: PUSH
32385: LD_VAR 0 6
32389: PUSH
32390: LD_VAR 0 3
32394: DIFF
32395: PUSH
32396: FOR_IN
32397: IFFALSE 32449
// begin if sci = 6 then
32399: LD_VAR 0 8
32403: PUSH
32404: LD_INT 6
32406: EQUAL
32407: IFFALSE 32411
// break ;
32409: GO 32449
// if BuildingStatus ( x ) = bs_idle then
32411: LD_VAR 0 7
32415: PPUSH
32416: CALL_OW 461
32420: PUSH
32421: LD_INT 2
32423: EQUAL
32424: IFFALSE 32447
// sci := sci ^ UnitsInside ( x ) ;
32426: LD_ADDR_VAR 0 8
32430: PUSH
32431: LD_VAR 0 8
32435: PUSH
32436: LD_VAR 0 7
32440: PPUSH
32441: CALL_OW 313
32445: ADD
32446: ST_TO_ADDR
// end ;
32447: GO 32396
32449: POP
32450: POP
// if not sci then
32451: LD_VAR 0 8
32455: NOT
32456: IFFALSE 32460
// continue ;
32458: GO 31505
// for x in sci do
32460: LD_ADDR_VAR 0 7
32464: PUSH
32465: LD_VAR 0 8
32469: PUSH
32470: FOR_IN
32471: IFFALSE 32521
// if IsInUnit ( x ) and not HasTask ( x ) then
32473: LD_VAR 0 7
32477: PPUSH
32478: CALL_OW 310
32482: PUSH
32483: LD_VAR 0 7
32487: PPUSH
32488: CALL_OW 314
32492: NOT
32493: AND
32494: IFFALSE 32519
// begin ComExitBuilding ( x ) ;
32496: LD_VAR 0 7
32500: PPUSH
32501: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
32505: LD_VAR 0 7
32509: PPUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: CALL_OW 180
// end ;
32519: GO 32470
32521: POP
32522: POP
// end ; end ;
32523: GO 31505
32525: POP
32526: POP
// end ;
32527: GO 31459
32529: POP
32530: POP
// end ;
32531: LD_VAR 0 1
32535: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
32536: LD_INT 0
32538: PPUSH
32539: PPUSH
// if not mc_bases then
32540: LD_EXP 50
32544: NOT
32545: IFFALSE 32549
// exit ;
32547: GO 32630
// for i = 1 to mc_bases do
32549: LD_ADDR_VAR 0 2
32553: PUSH
32554: DOUBLE
32555: LD_INT 1
32557: DEC
32558: ST_TO_ADDR
32559: LD_EXP 50
32563: PUSH
32564: FOR_TO
32565: IFFALSE 32628
// if mc_mines [ i ] and mc_miners [ i ] then
32567: LD_EXP 63
32571: PUSH
32572: LD_VAR 0 2
32576: ARRAY
32577: PUSH
32578: LD_EXP 64
32582: PUSH
32583: LD_VAR 0 2
32587: ARRAY
32588: AND
32589: IFFALSE 32626
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
32591: LD_EXP 64
32595: PUSH
32596: LD_VAR 0 2
32600: ARRAY
32601: PUSH
32602: LD_INT 1
32604: ARRAY
32605: PPUSH
32606: CALL_OW 255
32610: PPUSH
32611: LD_EXP 63
32615: PUSH
32616: LD_VAR 0 2
32620: ARRAY
32621: PPUSH
32622: CALL 48221 0 2
32626: GO 32564
32628: POP
32629: POP
// end ;
32630: LD_VAR 0 1
32634: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
32635: LD_INT 0
32637: PPUSH
32638: PPUSH
32639: PPUSH
32640: PPUSH
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
// if not mc_bases or not mc_parking then
32645: LD_EXP 50
32649: NOT
32650: PUSH
32651: LD_EXP 74
32655: NOT
32656: OR
32657: IFFALSE 32661
// exit ;
32659: GO 33373
// for i = 1 to mc_bases do
32661: LD_ADDR_VAR 0 2
32665: PUSH
32666: DOUBLE
32667: LD_INT 1
32669: DEC
32670: ST_TO_ADDR
32671: LD_EXP 50
32675: PUSH
32676: FOR_TO
32677: IFFALSE 33371
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
32679: LD_EXP 50
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: NOT
32690: PUSH
32691: LD_EXP 74
32695: PUSH
32696: LD_VAR 0 2
32700: ARRAY
32701: NOT
32702: OR
32703: IFFALSE 32707
// continue ;
32705: GO 32676
// if mc_scan [ i ] then
32707: LD_EXP 73
32711: PUSH
32712: LD_VAR 0 2
32716: ARRAY
32717: IFFALSE 32743
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
32719: LD_ADDR_EXP 62
32723: PUSH
32724: LD_EXP 62
32728: PPUSH
32729: LD_VAR 0 2
32733: PPUSH
32734: EMPTY
32735: PPUSH
32736: CALL_OW 1
32740: ST_TO_ADDR
// continue ;
32741: GO 32676
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
32743: LD_ADDR_VAR 0 5
32747: PUSH
32748: LD_EXP 50
32752: PUSH
32753: LD_VAR 0 2
32757: ARRAY
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PPUSH
32763: CALL_OW 255
32767: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: LD_EXP 50
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PPUSH
32784: LD_INT 30
32786: PUSH
32787: LD_INT 3
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PPUSH
32794: CALL_OW 72
32798: ST_TO_ADDR
// if not fac then
32799: LD_VAR 0 6
32803: NOT
32804: IFFALSE 32855
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32806: LD_ADDR_VAR 0 6
32810: PUSH
32811: LD_EXP 50
32815: PUSH
32816: LD_VAR 0 2
32820: ARRAY
32821: PPUSH
32822: LD_INT 2
32824: PUSH
32825: LD_INT 30
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 30
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: LIST
32849: PPUSH
32850: CALL_OW 72
32854: ST_TO_ADDR
// if not fac then
32855: LD_VAR 0 6
32859: NOT
32860: IFFALSE 32864
// continue ;
32862: GO 32676
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
32864: LD_ADDR_VAR 0 7
32868: PUSH
32869: LD_EXP 74
32873: PUSH
32874: LD_VAR 0 2
32878: ARRAY
32879: PPUSH
32880: LD_INT 22
32882: PUSH
32883: LD_VAR 0 5
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 21
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 24
32907: PUSH
32908: LD_INT 1000
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: PPUSH
32924: CALL_OW 70
32928: PUSH
32929: LD_INT 22
32931: PUSH
32932: LD_VAR 0 5
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 91
32943: PUSH
32944: LD_VAR 0 6
32948: PUSH
32949: LD_INT 1
32951: ARRAY
32952: PUSH
32953: LD_INT 25
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 21
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 3
32973: PUSH
32974: LD_INT 24
32976: PUSH
32977: LD_INT 1000
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: PPUSH
32994: CALL_OW 69
32998: UNION
32999: ST_TO_ADDR
// if not vehs then
33000: LD_VAR 0 7
33004: NOT
33005: IFFALSE 33031
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
33007: LD_ADDR_EXP 62
33011: PUSH
33012: LD_EXP 62
33016: PPUSH
33017: LD_VAR 0 2
33021: PPUSH
33022: EMPTY
33023: PPUSH
33024: CALL_OW 1
33028: ST_TO_ADDR
// continue ;
33029: GO 32676
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
33031: LD_ADDR_VAR 0 8
33035: PUSH
33036: LD_EXP 50
33040: PUSH
33041: LD_VAR 0 2
33045: ARRAY
33046: PPUSH
33047: LD_INT 30
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PPUSH
33057: CALL_OW 72
33061: ST_TO_ADDR
// if tmp then
33062: LD_VAR 0 8
33066: IFFALSE 33169
// begin for j in tmp do
33068: LD_ADDR_VAR 0 3
33072: PUSH
33073: LD_VAR 0 8
33077: PUSH
33078: FOR_IN
33079: IFFALSE 33167
// for k in UnitsInside ( j ) do
33081: LD_ADDR_VAR 0 4
33085: PUSH
33086: LD_VAR 0 3
33090: PPUSH
33091: CALL_OW 313
33095: PUSH
33096: FOR_IN
33097: IFFALSE 33163
// if k then
33099: LD_VAR 0 4
33103: IFFALSE 33161
// if not k in mc_repair_vehicle [ i ] then
33105: LD_VAR 0 4
33109: PUSH
33110: LD_EXP 62
33114: PUSH
33115: LD_VAR 0 2
33119: ARRAY
33120: IN
33121: NOT
33122: IFFALSE 33161
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
33124: LD_ADDR_EXP 62
33128: PUSH
33129: LD_EXP 62
33133: PPUSH
33134: LD_VAR 0 2
33138: PPUSH
33139: LD_EXP 62
33143: PUSH
33144: LD_VAR 0 2
33148: ARRAY
33149: PUSH
33150: LD_VAR 0 4
33154: UNION
33155: PPUSH
33156: CALL_OW 1
33160: ST_TO_ADDR
33161: GO 33096
33163: POP
33164: POP
33165: GO 33078
33167: POP
33168: POP
// end ; if not mc_repair_vehicle [ i ] then
33169: LD_EXP 62
33173: PUSH
33174: LD_VAR 0 2
33178: ARRAY
33179: NOT
33180: IFFALSE 33184
// continue ;
33182: GO 32676
// for j in mc_repair_vehicle [ i ] do
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_EXP 62
33193: PUSH
33194: LD_VAR 0 2
33198: ARRAY
33199: PUSH
33200: FOR_IN
33201: IFFALSE 33367
// begin if GetClass ( j ) <> 3 then
33203: LD_VAR 0 3
33207: PPUSH
33208: CALL_OW 257
33212: PUSH
33213: LD_INT 3
33215: NONEQUAL
33216: IFFALSE 33257
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
33218: LD_ADDR_EXP 62
33222: PUSH
33223: LD_EXP 62
33227: PPUSH
33228: LD_VAR 0 2
33232: PPUSH
33233: LD_EXP 62
33237: PUSH
33238: LD_VAR 0 2
33242: ARRAY
33243: PUSH
33244: LD_VAR 0 3
33248: DIFF
33249: PPUSH
33250: CALL_OW 1
33254: ST_TO_ADDR
// continue ;
33255: GO 33200
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
33257: LD_VAR 0 3
33261: PPUSH
33262: CALL_OW 311
33266: NOT
33267: PUSH
33268: LD_VAR 0 3
33272: PUSH
33273: LD_EXP 53
33277: PUSH
33278: LD_VAR 0 2
33282: ARRAY
33283: PUSH
33284: LD_INT 1
33286: ARRAY
33287: IN
33288: NOT
33289: AND
33290: PUSH
33291: LD_VAR 0 3
33295: PUSH
33296: LD_EXP 53
33300: PUSH
33301: LD_VAR 0 2
33305: ARRAY
33306: PUSH
33307: LD_INT 2
33309: ARRAY
33310: IN
33311: NOT
33312: AND
33313: IFFALSE 33365
// begin if IsInUnit ( j ) then
33315: LD_VAR 0 3
33319: PPUSH
33320: CALL_OW 310
33324: IFFALSE 33335
// ComExitBuilding ( j ) ;
33326: LD_VAR 0 3
33330: PPUSH
33331: CALL_OW 122
// if not HasTask ( j ) then
33335: LD_VAR 0 3
33339: PPUSH
33340: CALL_OW 314
33344: NOT
33345: IFFALSE 33365
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
33347: LD_VAR 0 3
33351: PPUSH
33352: LD_VAR 0 7
33356: PUSH
33357: LD_INT 1
33359: ARRAY
33360: PPUSH
33361: CALL_OW 189
// end ; end ;
33365: GO 33200
33367: POP
33368: POP
// end ;
33369: GO 32676
33371: POP
33372: POP
// end ;
33373: LD_VAR 0 1
33377: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
33378: LD_INT 0
33380: PPUSH
33381: PPUSH
33382: PPUSH
33383: PPUSH
33384: PPUSH
33385: PPUSH
33386: PPUSH
33387: PPUSH
33388: PPUSH
33389: PPUSH
33390: PPUSH
// if not mc_bases then
33391: LD_EXP 50
33395: NOT
33396: IFFALSE 33400
// exit ;
33398: GO 34202
// for i = 1 to mc_bases do
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: DOUBLE
33406: LD_INT 1
33408: DEC
33409: ST_TO_ADDR
33410: LD_EXP 50
33414: PUSH
33415: FOR_TO
33416: IFFALSE 34200
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
33418: LD_EXP 78
33422: PUSH
33423: LD_VAR 0 2
33427: ARRAY
33428: NOT
33429: PUSH
33430: LD_EXP 53
33434: PUSH
33435: LD_VAR 0 2
33439: ARRAY
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: OR
33445: PUSH
33446: LD_EXP 53
33450: PUSH
33451: LD_VAR 0 2
33455: ARRAY
33456: PUSH
33457: LD_INT 2
33459: ARRAY
33460: OR
33461: PUSH
33462: LD_EXP 76
33466: PUSH
33467: LD_VAR 0 2
33471: ARRAY
33472: PPUSH
33473: LD_INT 1
33475: PPUSH
33476: CALL_OW 325
33480: NOT
33481: OR
33482: PUSH
33483: LD_EXP 73
33487: PUSH
33488: LD_VAR 0 2
33492: ARRAY
33493: OR
33494: IFFALSE 33498
// continue ;
33496: GO 33415
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
33498: LD_ADDR_VAR 0 8
33502: PUSH
33503: LD_EXP 50
33507: PUSH
33508: LD_VAR 0 2
33512: ARRAY
33513: PPUSH
33514: LD_INT 25
33516: PUSH
33517: LD_INT 4
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 50
33526: PUSH
33527: EMPTY
33528: LIST
33529: PUSH
33530: LD_INT 3
33532: PUSH
33533: LD_INT 60
33535: PUSH
33536: EMPTY
33537: LIST
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: PPUSH
33548: CALL_OW 72
33552: PUSH
33553: LD_EXP 54
33557: PUSH
33558: LD_VAR 0 2
33562: ARRAY
33563: DIFF
33564: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
33565: LD_ADDR_VAR 0 9
33569: PUSH
33570: LD_EXP 50
33574: PUSH
33575: LD_VAR 0 2
33579: ARRAY
33580: PPUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 30
33586: PUSH
33587: LD_INT 0
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 30
33596: PUSH
33597: LD_INT 1
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: LIST
33608: PPUSH
33609: CALL_OW 72
33613: ST_TO_ADDR
// if not tmp or not dep then
33614: LD_VAR 0 8
33618: NOT
33619: PUSH
33620: LD_VAR 0 9
33624: NOT
33625: OR
33626: IFFALSE 33630
// continue ;
33628: GO 33415
// side := GetSide ( tmp [ 1 ] ) ;
33630: LD_ADDR_VAR 0 11
33634: PUSH
33635: LD_VAR 0 8
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: PPUSH
33644: CALL_OW 255
33648: ST_TO_ADDR
// dep := dep [ 1 ] ;
33649: LD_ADDR_VAR 0 9
33653: PUSH
33654: LD_VAR 0 9
33658: PUSH
33659: LD_INT 1
33661: ARRAY
33662: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
33663: LD_ADDR_VAR 0 7
33667: PUSH
33668: LD_EXP 78
33672: PUSH
33673: LD_VAR 0 2
33677: ARRAY
33678: PPUSH
33679: LD_INT 22
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 25
33691: PUSH
33692: LD_INT 12
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PPUSH
33703: CALL_OW 70
33707: PUSH
33708: LD_INT 22
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 25
33720: PUSH
33721: LD_INT 12
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 91
33730: PUSH
33731: LD_VAR 0 9
33735: PUSH
33736: LD_INT 20
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: PPUSH
33749: CALL_OW 69
33753: UNION
33754: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
33755: LD_ADDR_VAR 0 10
33759: PUSH
33760: LD_EXP 78
33764: PUSH
33765: LD_VAR 0 2
33769: ARRAY
33770: PPUSH
33771: LD_INT 81
33773: PUSH
33774: LD_VAR 0 11
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PPUSH
33783: CALL_OW 70
33787: ST_TO_ADDR
// if not apes or danger_at_area then
33788: LD_VAR 0 7
33792: NOT
33793: PUSH
33794: LD_VAR 0 10
33798: OR
33799: IFFALSE 33849
// begin if mc_taming [ i ] then
33801: LD_EXP 81
33805: PUSH
33806: LD_VAR 0 2
33810: ARRAY
33811: IFFALSE 33847
// begin MC_Reset ( i , 121 ) ;
33813: LD_VAR 0 2
33817: PPUSH
33818: LD_INT 121
33820: PPUSH
33821: CALL 19807 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
33825: LD_ADDR_EXP 81
33829: PUSH
33830: LD_EXP 81
33834: PPUSH
33835: LD_VAR 0 2
33839: PPUSH
33840: EMPTY
33841: PPUSH
33842: CALL_OW 1
33846: ST_TO_ADDR
// end ; continue ;
33847: GO 33415
// end ; for j in tmp do
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_VAR 0 8
33858: PUSH
33859: FOR_IN
33860: IFFALSE 34196
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
33862: LD_VAR 0 3
33866: PUSH
33867: LD_EXP 81
33871: PUSH
33872: LD_VAR 0 2
33876: ARRAY
33877: IN
33878: NOT
33879: PUSH
33880: LD_EXP 81
33884: PUSH
33885: LD_VAR 0 2
33889: ARRAY
33890: PUSH
33891: LD_INT 3
33893: LESS
33894: AND
33895: IFFALSE 33953
// begin SetTag ( j , 121 ) ;
33897: LD_VAR 0 3
33901: PPUSH
33902: LD_INT 121
33904: PPUSH
33905: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
33909: LD_ADDR_EXP 81
33913: PUSH
33914: LD_EXP 81
33918: PPUSH
33919: LD_VAR 0 2
33923: PUSH
33924: LD_EXP 81
33928: PUSH
33929: LD_VAR 0 2
33933: ARRAY
33934: PUSH
33935: LD_INT 1
33937: PLUS
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PPUSH
33943: LD_VAR 0 3
33947: PPUSH
33948: CALL 51164 0 3
33952: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
33953: LD_VAR 0 3
33957: PUSH
33958: LD_EXP 81
33962: PUSH
33963: LD_VAR 0 2
33967: ARRAY
33968: IN
33969: IFFALSE 34194
// begin if GetClass ( j ) <> 4 then
33971: LD_VAR 0 3
33975: PPUSH
33976: CALL_OW 257
33980: PUSH
33981: LD_INT 4
33983: NONEQUAL
33984: IFFALSE 34037
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
33986: LD_ADDR_EXP 81
33990: PUSH
33991: LD_EXP 81
33995: PPUSH
33996: LD_VAR 0 2
34000: PPUSH
34001: LD_EXP 81
34005: PUSH
34006: LD_VAR 0 2
34010: ARRAY
34011: PUSH
34012: LD_VAR 0 3
34016: DIFF
34017: PPUSH
34018: CALL_OW 1
34022: ST_TO_ADDR
// SetTag ( j , 0 ) ;
34023: LD_VAR 0 3
34027: PPUSH
34028: LD_INT 0
34030: PPUSH
34031: CALL_OW 109
// continue ;
34035: GO 33859
// end ; if IsInUnit ( j ) then
34037: LD_VAR 0 3
34041: PPUSH
34042: CALL_OW 310
34046: IFFALSE 34057
// ComExitBuilding ( j ) ;
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
34057: LD_ADDR_VAR 0 6
34061: PUSH
34062: LD_VAR 0 7
34066: PPUSH
34067: LD_VAR 0 3
34071: PPUSH
34072: CALL_OW 74
34076: ST_TO_ADDR
// if not ape then
34077: LD_VAR 0 6
34081: NOT
34082: IFFALSE 34086
// break ;
34084: GO 34196
// x := GetX ( ape ) ;
34086: LD_ADDR_VAR 0 4
34090: PUSH
34091: LD_VAR 0 6
34095: PPUSH
34096: CALL_OW 250
34100: ST_TO_ADDR
// y := GetY ( ape ) ;
34101: LD_ADDR_VAR 0 5
34105: PUSH
34106: LD_VAR 0 6
34110: PPUSH
34111: CALL_OW 251
34115: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34116: LD_VAR 0 4
34120: PPUSH
34121: LD_VAR 0 5
34125: PPUSH
34126: CALL_OW 488
34130: NOT
34131: PUSH
34132: LD_VAR 0 11
34136: PPUSH
34137: LD_VAR 0 4
34141: PPUSH
34142: LD_VAR 0 5
34146: PPUSH
34147: LD_INT 20
34149: PPUSH
34150: CALL 52060 0 4
34154: PUSH
34155: LD_INT 4
34157: ARRAY
34158: OR
34159: IFFALSE 34163
// break ;
34161: GO 34196
// if not HasTask ( j ) then
34163: LD_VAR 0 3
34167: PPUSH
34168: CALL_OW 314
34172: NOT
34173: IFFALSE 34194
// ComTameXY ( j , x , y ) ;
34175: LD_VAR 0 3
34179: PPUSH
34180: LD_VAR 0 4
34184: PPUSH
34185: LD_VAR 0 5
34189: PPUSH
34190: CALL_OW 131
// end ; end ;
34194: GO 33859
34196: POP
34197: POP
// end ;
34198: GO 33415
34200: POP
34201: POP
// end ;
34202: LD_VAR 0 1
34206: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
34207: LD_INT 0
34209: PPUSH
34210: PPUSH
34211: PPUSH
34212: PPUSH
34213: PPUSH
34214: PPUSH
34215: PPUSH
34216: PPUSH
// if not mc_bases then
34217: LD_EXP 50
34221: NOT
34222: IFFALSE 34226
// exit ;
34224: GO 34852
// for i = 1 to mc_bases do
34226: LD_ADDR_VAR 0 2
34230: PUSH
34231: DOUBLE
34232: LD_INT 1
34234: DEC
34235: ST_TO_ADDR
34236: LD_EXP 50
34240: PUSH
34241: FOR_TO
34242: IFFALSE 34850
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
34244: LD_EXP 79
34248: PUSH
34249: LD_VAR 0 2
34253: ARRAY
34254: NOT
34255: PUSH
34256: LD_EXP 79
34260: PUSH
34261: LD_VAR 0 2
34265: ARRAY
34266: PPUSH
34267: LD_INT 25
34269: PUSH
34270: LD_INT 12
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PPUSH
34277: CALL_OW 72
34281: NOT
34282: OR
34283: IFFALSE 34287
// continue ;
34285: GO 34241
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
34287: LD_ADDR_VAR 0 5
34291: PUSH
34292: LD_EXP 79
34296: PUSH
34297: LD_VAR 0 2
34301: ARRAY
34302: PUSH
34303: LD_INT 1
34305: ARRAY
34306: PPUSH
34307: CALL_OW 255
34311: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
34312: LD_VAR 0 5
34316: PPUSH
34317: LD_INT 2
34319: PPUSH
34320: CALL_OW 325
34324: IFFALSE 34577
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34326: LD_ADDR_VAR 0 4
34330: PUSH
34331: LD_EXP 79
34335: PUSH
34336: LD_VAR 0 2
34340: ARRAY
34341: PPUSH
34342: LD_INT 25
34344: PUSH
34345: LD_INT 16
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PPUSH
34352: CALL_OW 72
34356: ST_TO_ADDR
// if tmp < 6 then
34357: LD_VAR 0 4
34361: PUSH
34362: LD_INT 6
34364: LESS
34365: IFFALSE 34577
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34367: LD_ADDR_VAR 0 6
34371: PUSH
34372: LD_EXP 50
34376: PUSH
34377: LD_VAR 0 2
34381: ARRAY
34382: PPUSH
34383: LD_INT 2
34385: PUSH
34386: LD_INT 30
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 30
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: LIST
34410: PPUSH
34411: CALL_OW 72
34415: ST_TO_ADDR
// if depot then
34416: LD_VAR 0 6
34420: IFFALSE 34577
// begin selected := 0 ;
34422: LD_ADDR_VAR 0 7
34426: PUSH
34427: LD_INT 0
34429: ST_TO_ADDR
// for j in depot do
34430: LD_ADDR_VAR 0 3
34434: PUSH
34435: LD_VAR 0 6
34439: PUSH
34440: FOR_IN
34441: IFFALSE 34472
// begin if UnitsInside ( j ) < 6 then
34443: LD_VAR 0 3
34447: PPUSH
34448: CALL_OW 313
34452: PUSH
34453: LD_INT 6
34455: LESS
34456: IFFALSE 34470
// begin selected := j ;
34458: LD_ADDR_VAR 0 7
34462: PUSH
34463: LD_VAR 0 3
34467: ST_TO_ADDR
// break ;
34468: GO 34472
// end ; end ;
34470: GO 34440
34472: POP
34473: POP
// if selected then
34474: LD_VAR 0 7
34478: IFFALSE 34577
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34480: LD_ADDR_VAR 0 3
34484: PUSH
34485: LD_EXP 79
34489: PUSH
34490: LD_VAR 0 2
34494: ARRAY
34495: PPUSH
34496: LD_INT 25
34498: PUSH
34499: LD_INT 12
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PPUSH
34506: CALL_OW 72
34510: PUSH
34511: FOR_IN
34512: IFFALSE 34575
// if not HasTask ( j ) then
34514: LD_VAR 0 3
34518: PPUSH
34519: CALL_OW 314
34523: NOT
34524: IFFALSE 34573
// begin if not IsInUnit ( j ) then
34526: LD_VAR 0 3
34530: PPUSH
34531: CALL_OW 310
34535: NOT
34536: IFFALSE 34552
// ComEnterUnit ( j , selected ) ;
34538: LD_VAR 0 3
34542: PPUSH
34543: LD_VAR 0 7
34547: PPUSH
34548: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
34552: LD_VAR 0 3
34556: PPUSH
34557: LD_INT 16
34559: PPUSH
34560: CALL_OW 183
// AddComExitBuilding ( j ) ;
34564: LD_VAR 0 3
34568: PPUSH
34569: CALL_OW 182
// end ;
34573: GO 34511
34575: POP
34576: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
34577: LD_VAR 0 5
34581: PPUSH
34582: LD_INT 11
34584: PPUSH
34585: CALL_OW 325
34589: IFFALSE 34848
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
34591: LD_ADDR_VAR 0 4
34595: PUSH
34596: LD_EXP 79
34600: PUSH
34601: LD_VAR 0 2
34605: ARRAY
34606: PPUSH
34607: LD_INT 25
34609: PUSH
34610: LD_INT 16
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PPUSH
34617: CALL_OW 72
34621: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
34622: LD_VAR 0 4
34626: PUSH
34627: LD_INT 6
34629: GREATEREQUAL
34630: PUSH
34631: LD_VAR 0 5
34635: PPUSH
34636: LD_INT 2
34638: PPUSH
34639: CALL_OW 325
34643: NOT
34644: OR
34645: IFFALSE 34848
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
34647: LD_ADDR_VAR 0 8
34651: PUSH
34652: LD_EXP 50
34656: PUSH
34657: LD_VAR 0 2
34661: ARRAY
34662: PPUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 30
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 30
34678: PUSH
34679: LD_INT 5
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: PPUSH
34691: CALL_OW 72
34695: ST_TO_ADDR
// if barracks then
34696: LD_VAR 0 8
34700: IFFALSE 34848
// begin selected := 0 ;
34702: LD_ADDR_VAR 0 7
34706: PUSH
34707: LD_INT 0
34709: ST_TO_ADDR
// for j in barracks do
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_VAR 0 8
34719: PUSH
34720: FOR_IN
34721: IFFALSE 34752
// begin if UnitsInside ( j ) < 6 then
34723: LD_VAR 0 3
34727: PPUSH
34728: CALL_OW 313
34732: PUSH
34733: LD_INT 6
34735: LESS
34736: IFFALSE 34750
// begin selected := j ;
34738: LD_ADDR_VAR 0 7
34742: PUSH
34743: LD_VAR 0 3
34747: ST_TO_ADDR
// break ;
34748: GO 34752
// end ; end ;
34750: GO 34720
34752: POP
34753: POP
// if selected then
34754: LD_VAR 0 7
34758: IFFALSE 34848
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
34760: LD_ADDR_VAR 0 3
34764: PUSH
34765: LD_EXP 79
34769: PUSH
34770: LD_VAR 0 2
34774: ARRAY
34775: PPUSH
34776: LD_INT 25
34778: PUSH
34779: LD_INT 12
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PPUSH
34786: CALL_OW 72
34790: PUSH
34791: FOR_IN
34792: IFFALSE 34846
// if not IsInUnit ( j ) and not HasTask ( j ) then
34794: LD_VAR 0 3
34798: PPUSH
34799: CALL_OW 310
34803: NOT
34804: PUSH
34805: LD_VAR 0 3
34809: PPUSH
34810: CALL_OW 314
34814: NOT
34815: AND
34816: IFFALSE 34844
// begin ComEnterUnit ( j , selected ) ;
34818: LD_VAR 0 3
34822: PPUSH
34823: LD_VAR 0 7
34827: PPUSH
34828: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
34832: LD_VAR 0 3
34836: PPUSH
34837: LD_INT 15
34839: PPUSH
34840: CALL_OW 183
// end ;
34844: GO 34791
34846: POP
34847: POP
// end ; end ; end ; end ; end ;
34848: GO 34241
34850: POP
34851: POP
// end ;
34852: LD_VAR 0 1
34856: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
34861: PPUSH
34862: PPUSH
// if not mc_bases then
34863: LD_EXP 50
34867: NOT
34868: IFFALSE 34872
// exit ;
34870: GO 35050
// for i = 1 to mc_bases do
34872: LD_ADDR_VAR 0 2
34876: PUSH
34877: DOUBLE
34878: LD_INT 1
34880: DEC
34881: ST_TO_ADDR
34882: LD_EXP 50
34886: PUSH
34887: FOR_TO
34888: IFFALSE 35048
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
34890: LD_ADDR_VAR 0 4
34894: PUSH
34895: LD_EXP 50
34899: PUSH
34900: LD_VAR 0 2
34904: ARRAY
34905: PPUSH
34906: LD_INT 25
34908: PUSH
34909: LD_INT 9
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PPUSH
34916: CALL_OW 72
34920: ST_TO_ADDR
// if not tmp then
34921: LD_VAR 0 4
34925: NOT
34926: IFFALSE 34930
// continue ;
34928: GO 34887
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
34930: LD_EXP 76
34934: PUSH
34935: LD_VAR 0 2
34939: ARRAY
34940: PPUSH
34941: LD_INT 29
34943: PPUSH
34944: CALL_OW 325
34948: NOT
34949: PUSH
34950: LD_EXP 76
34954: PUSH
34955: LD_VAR 0 2
34959: ARRAY
34960: PPUSH
34961: LD_INT 28
34963: PPUSH
34964: CALL_OW 325
34968: NOT
34969: AND
34970: IFFALSE 34974
// continue ;
34972: GO 34887
// for j in tmp do
34974: LD_ADDR_VAR 0 3
34978: PUSH
34979: LD_VAR 0 4
34983: PUSH
34984: FOR_IN
34985: IFFALSE 35044
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
34987: LD_VAR 0 3
34991: PUSH
34992: LD_EXP 53
34996: PUSH
34997: LD_VAR 0 2
35001: ARRAY
35002: PUSH
35003: LD_INT 1
35005: ARRAY
35006: IN
35007: NOT
35008: PUSH
35009: LD_VAR 0 3
35013: PUSH
35014: LD_EXP 53
35018: PUSH
35019: LD_VAR 0 2
35023: ARRAY
35024: PUSH
35025: LD_INT 2
35027: ARRAY
35028: IN
35029: NOT
35030: AND
35031: IFFALSE 35042
// ComSpaceTimeShoot ( j ) ;
35033: LD_VAR 0 3
35037: PPUSH
35038: CALL 45224 0 1
35042: GO 34984
35044: POP
35045: POP
// end ;
35046: GO 34887
35048: POP
35049: POP
// end ;
35050: LD_VAR 0 1
35054: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
35055: LD_INT 0
35057: PPUSH
35058: PPUSH
35059: PPUSH
35060: PPUSH
35061: PPUSH
35062: PPUSH
35063: PPUSH
35064: PPUSH
35065: PPUSH
// if not mc_bases then
35066: LD_EXP 50
35070: NOT
35071: IFFALSE 35075
// exit ;
35073: GO 35697
// for i = 1 to mc_bases do
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: DOUBLE
35081: LD_INT 1
35083: DEC
35084: ST_TO_ADDR
35085: LD_EXP 50
35089: PUSH
35090: FOR_TO
35091: IFFALSE 35695
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
35093: LD_EXP 85
35097: PUSH
35098: LD_VAR 0 2
35102: ARRAY
35103: NOT
35104: PUSH
35105: LD_INT 38
35107: PPUSH
35108: LD_EXP 76
35112: PUSH
35113: LD_VAR 0 2
35117: ARRAY
35118: PPUSH
35119: CALL_OW 321
35123: PUSH
35124: LD_INT 2
35126: NONEQUAL
35127: OR
35128: IFFALSE 35132
// continue ;
35130: GO 35090
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
35132: LD_ADDR_VAR 0 8
35136: PUSH
35137: LD_EXP 50
35141: PUSH
35142: LD_VAR 0 2
35146: ARRAY
35147: PPUSH
35148: LD_INT 30
35150: PUSH
35151: LD_INT 34
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PPUSH
35158: CALL_OW 72
35162: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
35163: LD_ADDR_VAR 0 9
35167: PUSH
35168: LD_EXP 50
35172: PUSH
35173: LD_VAR 0 2
35177: ARRAY
35178: PPUSH
35179: LD_INT 25
35181: PUSH
35182: LD_INT 4
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PPUSH
35189: CALL_OW 72
35193: PPUSH
35194: LD_INT 0
35196: PPUSH
35197: CALL 84361 0 2
35201: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
35202: LD_VAR 0 9
35206: NOT
35207: PUSH
35208: LD_VAR 0 8
35212: NOT
35213: OR
35214: PUSH
35215: LD_EXP 50
35219: PUSH
35220: LD_VAR 0 2
35224: ARRAY
35225: PPUSH
35226: LD_INT 124
35228: PPUSH
35229: CALL 84361 0 2
35233: OR
35234: IFFALSE 35238
// continue ;
35236: GO 35090
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
35238: LD_EXP 86
35242: PUSH
35243: LD_VAR 0 2
35247: ARRAY
35248: PUSH
35249: LD_EXP 85
35253: PUSH
35254: LD_VAR 0 2
35258: ARRAY
35259: LESS
35260: PUSH
35261: LD_EXP 86
35265: PUSH
35266: LD_VAR 0 2
35270: ARRAY
35271: PUSH
35272: LD_VAR 0 8
35276: LESS
35277: AND
35278: IFFALSE 35693
// begin tmp := sci [ 1 ] ;
35280: LD_ADDR_VAR 0 7
35284: PUSH
35285: LD_VAR 0 9
35289: PUSH
35290: LD_INT 1
35292: ARRAY
35293: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
35294: LD_VAR 0 7
35298: PPUSH
35299: LD_INT 124
35301: PPUSH
35302: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
35306: LD_ADDR_VAR 0 3
35310: PUSH
35311: DOUBLE
35312: LD_EXP 85
35316: PUSH
35317: LD_VAR 0 2
35321: ARRAY
35322: INC
35323: ST_TO_ADDR
35324: LD_EXP 85
35328: PUSH
35329: LD_VAR 0 2
35333: ARRAY
35334: PUSH
35335: FOR_DOWNTO
35336: IFFALSE 35679
// begin if IsInUnit ( tmp ) then
35338: LD_VAR 0 7
35342: PPUSH
35343: CALL_OW 310
35347: IFFALSE 35358
// ComExitBuilding ( tmp ) ;
35349: LD_VAR 0 7
35353: PPUSH
35354: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
35358: LD_INT 35
35360: PPUSH
35361: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
35365: LD_VAR 0 7
35369: PPUSH
35370: CALL_OW 310
35374: NOT
35375: PUSH
35376: LD_VAR 0 7
35380: PPUSH
35381: CALL_OW 314
35385: NOT
35386: AND
35387: IFFALSE 35358
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
35389: LD_ADDR_VAR 0 6
35393: PUSH
35394: LD_VAR 0 7
35398: PPUSH
35399: CALL_OW 250
35403: PUSH
35404: LD_VAR 0 7
35408: PPUSH
35409: CALL_OW 251
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35418: LD_INT 35
35420: PPUSH
35421: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
35425: LD_ADDR_VAR 0 4
35429: PUSH
35430: LD_EXP 85
35434: PUSH
35435: LD_VAR 0 2
35439: ARRAY
35440: PUSH
35441: LD_VAR 0 3
35445: ARRAY
35446: PUSH
35447: LD_INT 1
35449: ARRAY
35450: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
35451: LD_ADDR_VAR 0 5
35455: PUSH
35456: LD_EXP 85
35460: PUSH
35461: LD_VAR 0 2
35465: ARRAY
35466: PUSH
35467: LD_VAR 0 3
35471: ARRAY
35472: PUSH
35473: LD_INT 2
35475: ARRAY
35476: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
35477: LD_VAR 0 7
35481: PPUSH
35482: LD_INT 10
35484: PPUSH
35485: CALL 53757 0 2
35489: PUSH
35490: LD_INT 4
35492: ARRAY
35493: IFFALSE 35531
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
35495: LD_VAR 0 7
35499: PPUSH
35500: LD_VAR 0 6
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PPUSH
35509: LD_VAR 0 6
35513: PUSH
35514: LD_INT 2
35516: ARRAY
35517: PPUSH
35518: CALL_OW 111
// wait ( 0 0$10 ) ;
35522: LD_INT 350
35524: PPUSH
35525: CALL_OW 67
// end else
35529: GO 35557
// begin ComMoveXY ( tmp , x , y ) ;
35531: LD_VAR 0 7
35535: PPUSH
35536: LD_VAR 0 4
35540: PPUSH
35541: LD_VAR 0 5
35545: PPUSH
35546: CALL_OW 111
// wait ( 0 0$3 ) ;
35550: LD_INT 105
35552: PPUSH
35553: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
35557: LD_VAR 0 7
35561: PPUSH
35562: LD_VAR 0 4
35566: PPUSH
35567: LD_VAR 0 5
35571: PPUSH
35572: CALL_OW 307
35576: IFFALSE 35418
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
35578: LD_VAR 0 7
35582: PPUSH
35583: LD_VAR 0 4
35587: PPUSH
35588: LD_VAR 0 5
35592: PPUSH
35593: LD_VAR 0 8
35597: PUSH
35598: LD_VAR 0 3
35602: ARRAY
35603: PPUSH
35604: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
35608: LD_INT 35
35610: PPUSH
35611: CALL_OW 67
// until not HasTask ( tmp ) ;
35615: LD_VAR 0 7
35619: PPUSH
35620: CALL_OW 314
35624: NOT
35625: IFFALSE 35608
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
35627: LD_ADDR_EXP 86
35631: PUSH
35632: LD_EXP 86
35636: PPUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_EXP 86
35646: PUSH
35647: LD_VAR 0 2
35651: ARRAY
35652: PUSH
35653: LD_INT 1
35655: PLUS
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PPUSH
35661: LD_VAR 0 8
35665: PUSH
35666: LD_VAR 0 3
35670: ARRAY
35671: PPUSH
35672: CALL 51164 0 3
35676: ST_TO_ADDR
// end ;
35677: GO 35335
35679: POP
35680: POP
// MC_Reset ( i , 124 ) ;
35681: LD_VAR 0 2
35685: PPUSH
35686: LD_INT 124
35688: PPUSH
35689: CALL 19807 0 2
// end ; end ;
35693: GO 35090
35695: POP
35696: POP
// end ;
35697: LD_VAR 0 1
35701: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
35702: LD_INT 0
35704: PPUSH
35705: PPUSH
35706: PPUSH
// if not mc_bases then
35707: LD_EXP 50
35711: NOT
35712: IFFALSE 35716
// exit ;
35714: GO 36322
// for i = 1 to mc_bases do
35716: LD_ADDR_VAR 0 2
35720: PUSH
35721: DOUBLE
35722: LD_INT 1
35724: DEC
35725: ST_TO_ADDR
35726: LD_EXP 50
35730: PUSH
35731: FOR_TO
35732: IFFALSE 36320
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
35734: LD_ADDR_VAR 0 3
35738: PUSH
35739: LD_EXP 50
35743: PUSH
35744: LD_VAR 0 2
35748: ARRAY
35749: PPUSH
35750: LD_INT 25
35752: PUSH
35753: LD_INT 4
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PPUSH
35760: CALL_OW 72
35764: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35765: LD_VAR 0 3
35769: NOT
35770: PUSH
35771: LD_EXP 87
35775: PUSH
35776: LD_VAR 0 2
35780: ARRAY
35781: NOT
35782: OR
35783: PUSH
35784: LD_EXP 50
35788: PUSH
35789: LD_VAR 0 2
35793: ARRAY
35794: PPUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 30
35810: PUSH
35811: LD_INT 1
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PPUSH
35823: CALL_OW 72
35827: NOT
35828: OR
35829: IFFALSE 35879
// begin if mc_deposits_finder [ i ] then
35831: LD_EXP 88
35835: PUSH
35836: LD_VAR 0 2
35840: ARRAY
35841: IFFALSE 35877
// begin MC_Reset ( i , 125 ) ;
35843: LD_VAR 0 2
35847: PPUSH
35848: LD_INT 125
35850: PPUSH
35851: CALL 19807 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35855: LD_ADDR_EXP 88
35859: PUSH
35860: LD_EXP 88
35864: PPUSH
35865: LD_VAR 0 2
35869: PPUSH
35870: EMPTY
35871: PPUSH
35872: CALL_OW 1
35876: ST_TO_ADDR
// end ; continue ;
35877: GO 35731
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
35879: LD_EXP 87
35883: PUSH
35884: LD_VAR 0 2
35888: ARRAY
35889: PUSH
35890: LD_INT 1
35892: ARRAY
35893: PUSH
35894: LD_INT 3
35896: ARRAY
35897: PUSH
35898: LD_INT 1
35900: EQUAL
35901: PUSH
35902: LD_INT 20
35904: PPUSH
35905: LD_EXP 76
35909: PUSH
35910: LD_VAR 0 2
35914: ARRAY
35915: PPUSH
35916: CALL_OW 321
35920: PUSH
35921: LD_INT 2
35923: NONEQUAL
35924: AND
35925: IFFALSE 35975
// begin if mc_deposits_finder [ i ] then
35927: LD_EXP 88
35931: PUSH
35932: LD_VAR 0 2
35936: ARRAY
35937: IFFALSE 35973
// begin MC_Reset ( i , 125 ) ;
35939: LD_VAR 0 2
35943: PPUSH
35944: LD_INT 125
35946: PPUSH
35947: CALL 19807 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
35951: LD_ADDR_EXP 88
35955: PUSH
35956: LD_EXP 88
35960: PPUSH
35961: LD_VAR 0 2
35965: PPUSH
35966: EMPTY
35967: PPUSH
35968: CALL_OW 1
35972: ST_TO_ADDR
// end ; continue ;
35973: GO 35731
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
35975: LD_EXP 87
35979: PUSH
35980: LD_VAR 0 2
35984: ARRAY
35985: PUSH
35986: LD_INT 1
35988: ARRAY
35989: PUSH
35990: LD_INT 1
35992: ARRAY
35993: PPUSH
35994: LD_EXP 87
35998: PUSH
35999: LD_VAR 0 2
36003: ARRAY
36004: PUSH
36005: LD_INT 1
36007: ARRAY
36008: PUSH
36009: LD_INT 2
36011: ARRAY
36012: PPUSH
36013: LD_EXP 76
36017: PUSH
36018: LD_VAR 0 2
36022: ARRAY
36023: PPUSH
36024: CALL_OW 440
36028: IFFALSE 36071
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
36030: LD_ADDR_EXP 87
36034: PUSH
36035: LD_EXP 87
36039: PPUSH
36040: LD_VAR 0 2
36044: PPUSH
36045: LD_EXP 87
36049: PUSH
36050: LD_VAR 0 2
36054: ARRAY
36055: PPUSH
36056: LD_INT 1
36058: PPUSH
36059: CALL_OW 3
36063: PPUSH
36064: CALL_OW 1
36068: ST_TO_ADDR
36069: GO 36318
// begin if not mc_deposits_finder [ i ] then
36071: LD_EXP 88
36075: PUSH
36076: LD_VAR 0 2
36080: ARRAY
36081: NOT
36082: IFFALSE 36134
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
36084: LD_ADDR_EXP 88
36088: PUSH
36089: LD_EXP 88
36093: PPUSH
36094: LD_VAR 0 2
36098: PPUSH
36099: LD_VAR 0 3
36103: PUSH
36104: LD_INT 1
36106: ARRAY
36107: PUSH
36108: EMPTY
36109: LIST
36110: PPUSH
36111: CALL_OW 1
36115: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
36116: LD_VAR 0 3
36120: PUSH
36121: LD_INT 1
36123: ARRAY
36124: PPUSH
36125: LD_INT 125
36127: PPUSH
36128: CALL_OW 109
// end else
36132: GO 36318
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
36134: LD_EXP 88
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: PUSH
36145: LD_INT 1
36147: ARRAY
36148: PPUSH
36149: CALL_OW 310
36153: IFFALSE 36176
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
36155: LD_EXP 88
36159: PUSH
36160: LD_VAR 0 2
36164: ARRAY
36165: PUSH
36166: LD_INT 1
36168: ARRAY
36169: PPUSH
36170: CALL_OW 122
36174: GO 36318
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
36176: LD_EXP 88
36180: PUSH
36181: LD_VAR 0 2
36185: ARRAY
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PPUSH
36191: CALL_OW 314
36195: NOT
36196: PUSH
36197: LD_EXP 88
36201: PUSH
36202: LD_VAR 0 2
36206: ARRAY
36207: PUSH
36208: LD_INT 1
36210: ARRAY
36211: PPUSH
36212: LD_EXP 87
36216: PUSH
36217: LD_VAR 0 2
36221: ARRAY
36222: PUSH
36223: LD_INT 1
36225: ARRAY
36226: PUSH
36227: LD_INT 1
36229: ARRAY
36230: PPUSH
36231: LD_EXP 87
36235: PUSH
36236: LD_VAR 0 2
36240: ARRAY
36241: PUSH
36242: LD_INT 1
36244: ARRAY
36245: PUSH
36246: LD_INT 2
36248: ARRAY
36249: PPUSH
36250: CALL_OW 297
36254: PUSH
36255: LD_INT 6
36257: GREATER
36258: AND
36259: IFFALSE 36318
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
36261: LD_EXP 88
36265: PUSH
36266: LD_VAR 0 2
36270: ARRAY
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PPUSH
36276: LD_EXP 87
36280: PUSH
36281: LD_VAR 0 2
36285: ARRAY
36286: PUSH
36287: LD_INT 1
36289: ARRAY
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_EXP 87
36299: PUSH
36300: LD_VAR 0 2
36304: ARRAY
36305: PUSH
36306: LD_INT 1
36308: ARRAY
36309: PUSH
36310: LD_INT 2
36312: ARRAY
36313: PPUSH
36314: CALL_OW 111
// end ; end ; end ;
36318: GO 35731
36320: POP
36321: POP
// end ;
36322: LD_VAR 0 1
36326: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
36331: PPUSH
36332: PPUSH
36333: PPUSH
36334: PPUSH
36335: PPUSH
36336: PPUSH
36337: PPUSH
36338: PPUSH
36339: PPUSH
// if not mc_bases then
36340: LD_EXP 50
36344: NOT
36345: IFFALSE 36349
// exit ;
36347: GO 37073
// for i = 1 to mc_bases do
36349: LD_ADDR_VAR 0 2
36353: PUSH
36354: DOUBLE
36355: LD_INT 1
36357: DEC
36358: ST_TO_ADDR
36359: LD_EXP 50
36363: PUSH
36364: FOR_TO
36365: IFFALSE 37071
// begin if not mc_bases [ i ] then
36367: LD_EXP 50
36371: PUSH
36372: LD_VAR 0 2
36376: ARRAY
36377: NOT
36378: IFFALSE 36382
// continue ;
36380: GO 36364
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
36382: LD_ADDR_VAR 0 7
36386: PUSH
36387: LD_EXP 50
36391: PUSH
36392: LD_VAR 0 2
36396: ARRAY
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PPUSH
36402: CALL_OW 248
36406: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
36407: LD_VAR 0 7
36411: PUSH
36412: LD_INT 3
36414: EQUAL
36415: PUSH
36416: LD_EXP 69
36420: PUSH
36421: LD_VAR 0 2
36425: ARRAY
36426: PUSH
36427: LD_EXP 72
36431: PUSH
36432: LD_VAR 0 2
36436: ARRAY
36437: UNION
36438: PPUSH
36439: LD_INT 33
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PPUSH
36449: CALL_OW 72
36453: NOT
36454: OR
36455: IFFALSE 36459
// continue ;
36457: GO 36364
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
36459: LD_ADDR_VAR 0 9
36463: PUSH
36464: LD_EXP 50
36468: PUSH
36469: LD_VAR 0 2
36473: ARRAY
36474: PPUSH
36475: LD_INT 30
36477: PUSH
36478: LD_INT 36
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PPUSH
36485: CALL_OW 72
36489: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
36490: LD_ADDR_VAR 0 10
36494: PUSH
36495: LD_EXP 69
36499: PUSH
36500: LD_VAR 0 2
36504: ARRAY
36505: PPUSH
36506: LD_INT 34
36508: PUSH
36509: LD_INT 31
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL_OW 72
36520: ST_TO_ADDR
// if not cts and not mcts then
36521: LD_VAR 0 9
36525: NOT
36526: PUSH
36527: LD_VAR 0 10
36531: NOT
36532: AND
36533: IFFALSE 36537
// continue ;
36535: GO 36364
// x := cts ;
36537: LD_ADDR_VAR 0 11
36541: PUSH
36542: LD_VAR 0 9
36546: ST_TO_ADDR
// if not x then
36547: LD_VAR 0 11
36551: NOT
36552: IFFALSE 36564
// x := mcts ;
36554: LD_ADDR_VAR 0 11
36558: PUSH
36559: LD_VAR 0 10
36563: ST_TO_ADDR
// if mc_remote_driver [ i ] then
36564: LD_EXP 90
36568: PUSH
36569: LD_VAR 0 2
36573: ARRAY
36574: IFFALSE 36843
// for j in mc_remote_driver [ i ] do
36576: LD_ADDR_VAR 0 3
36580: PUSH
36581: LD_EXP 90
36585: PUSH
36586: LD_VAR 0 2
36590: ARRAY
36591: PUSH
36592: FOR_IN
36593: IFFALSE 36841
// begin if GetClass ( j ) <> 3 then
36595: LD_VAR 0 3
36599: PPUSH
36600: CALL_OW 257
36604: PUSH
36605: LD_INT 3
36607: NONEQUAL
36608: IFFALSE 36661
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
36610: LD_ADDR_EXP 90
36614: PUSH
36615: LD_EXP 90
36619: PPUSH
36620: LD_VAR 0 2
36624: PPUSH
36625: LD_EXP 90
36629: PUSH
36630: LD_VAR 0 2
36634: ARRAY
36635: PUSH
36636: LD_VAR 0 3
36640: DIFF
36641: PPUSH
36642: CALL_OW 1
36646: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36647: LD_VAR 0 3
36651: PPUSH
36652: LD_INT 0
36654: PPUSH
36655: CALL_OW 109
// continue ;
36659: GO 36592
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
36661: LD_VAR 0 3
36665: PPUSH
36666: CALL_OW 310
36670: NOT
36671: PUSH
36672: LD_VAR 0 3
36676: PPUSH
36677: CALL_OW 310
36681: PPUSH
36682: CALL_OW 266
36686: PUSH
36687: LD_INT 36
36689: NONEQUAL
36690: PUSH
36691: LD_VAR 0 3
36695: PPUSH
36696: CALL 84449 0 1
36700: NOT
36701: AND
36702: OR
36703: IFFALSE 36839
// begin if IsInUnit ( j ) then
36705: LD_VAR 0 3
36709: PPUSH
36710: CALL_OW 310
36714: IFFALSE 36725
// ComExitBuilding ( j ) ;
36716: LD_VAR 0 3
36720: PPUSH
36721: CALL_OW 122
// ct := 0 ;
36725: LD_ADDR_VAR 0 8
36729: PUSH
36730: LD_INT 0
36732: ST_TO_ADDR
// for k in x do
36733: LD_ADDR_VAR 0 4
36737: PUSH
36738: LD_VAR 0 11
36742: PUSH
36743: FOR_IN
36744: IFFALSE 36817
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
36746: LD_VAR 0 4
36750: PPUSH
36751: CALL_OW 264
36755: PUSH
36756: LD_INT 31
36758: EQUAL
36759: PUSH
36760: LD_VAR 0 4
36764: PPUSH
36765: CALL_OW 311
36769: NOT
36770: AND
36771: PUSH
36772: LD_VAR 0 4
36776: PPUSH
36777: CALL_OW 266
36781: PUSH
36782: LD_INT 36
36784: EQUAL
36785: PUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: CALL_OW 313
36795: PUSH
36796: LD_INT 3
36798: LESS
36799: AND
36800: OR
36801: IFFALSE 36815
// begin ct := k ;
36803: LD_ADDR_VAR 0 8
36807: PUSH
36808: LD_VAR 0 4
36812: ST_TO_ADDR
// break ;
36813: GO 36817
// end ;
36815: GO 36743
36817: POP
36818: POP
// if ct then
36819: LD_VAR 0 8
36823: IFFALSE 36839
// ComEnterUnit ( j , ct ) ;
36825: LD_VAR 0 3
36829: PPUSH
36830: LD_VAR 0 8
36834: PPUSH
36835: CALL_OW 120
// end ; end ;
36839: GO 36592
36841: POP
36842: POP
// places := 0 ;
36843: LD_ADDR_VAR 0 5
36847: PUSH
36848: LD_INT 0
36850: ST_TO_ADDR
// for j = 1 to x do
36851: LD_ADDR_VAR 0 3
36855: PUSH
36856: DOUBLE
36857: LD_INT 1
36859: DEC
36860: ST_TO_ADDR
36861: LD_VAR 0 11
36865: PUSH
36866: FOR_TO
36867: IFFALSE 36922
// if GetWeapon ( x [ j ] ) = ar_control_tower then
36869: LD_VAR 0 11
36873: PUSH
36874: LD_VAR 0 3
36878: ARRAY
36879: PPUSH
36880: CALL_OW 264
36884: PUSH
36885: LD_INT 31
36887: EQUAL
36888: IFFALSE 36906
// places := places + 1 else
36890: LD_ADDR_VAR 0 5
36894: PUSH
36895: LD_VAR 0 5
36899: PUSH
36900: LD_INT 1
36902: PLUS
36903: ST_TO_ADDR
36904: GO 36920
// places := places + 3 ;
36906: LD_ADDR_VAR 0 5
36910: PUSH
36911: LD_VAR 0 5
36915: PUSH
36916: LD_INT 3
36918: PLUS
36919: ST_TO_ADDR
36920: GO 36866
36922: POP
36923: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
36924: LD_ADDR_VAR 0 6
36928: PUSH
36929: LD_EXP 50
36933: PUSH
36934: LD_VAR 0 2
36938: ARRAY
36939: PPUSH
36940: LD_INT 25
36942: PUSH
36943: LD_INT 3
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PPUSH
36950: CALL_OW 72
36954: PUSH
36955: LD_EXP 90
36959: PUSH
36960: LD_VAR 0 2
36964: ARRAY
36965: DIFF
36966: PPUSH
36967: LD_INT 3
36969: PPUSH
36970: CALL 85349 0 2
36974: ST_TO_ADDR
// if not tmp then
36975: LD_VAR 0 6
36979: NOT
36980: IFFALSE 36984
// continue ;
36982: GO 36364
// places := places - mc_remote_driver [ i ] ;
36984: LD_ADDR_VAR 0 5
36988: PUSH
36989: LD_VAR 0 5
36993: PUSH
36994: LD_EXP 90
36998: PUSH
36999: LD_VAR 0 2
37003: ARRAY
37004: MINUS
37005: ST_TO_ADDR
// if places then
37006: LD_VAR 0 5
37010: IFFALSE 37069
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
37012: LD_ADDR_EXP 90
37016: PUSH
37017: LD_EXP 90
37021: PPUSH
37022: LD_VAR 0 2
37026: PPUSH
37027: LD_EXP 90
37031: PUSH
37032: LD_VAR 0 2
37036: ARRAY
37037: PUSH
37038: LD_VAR 0 6
37042: PUSH
37043: LD_INT 1
37045: ARRAY
37046: UNION
37047: PPUSH
37048: CALL_OW 1
37052: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
37053: LD_VAR 0 6
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: LD_INT 126
37064: PPUSH
37065: CALL_OW 109
// end ; end ;
37069: GO 36364
37071: POP
37072: POP
// end ;
37073: LD_VAR 0 1
37077: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
37078: LD_INT 0
37080: PPUSH
37081: PPUSH
37082: PPUSH
37083: PPUSH
37084: PPUSH
37085: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
37086: LD_VAR 0 1
37090: NOT
37091: PUSH
37092: LD_VAR 0 2
37096: NOT
37097: OR
37098: PUSH
37099: LD_VAR 0 3
37103: NOT
37104: OR
37105: PUSH
37106: LD_VAR 0 4
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 2
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: LD_INT 4
37122: PUSH
37123: LD_INT 5
37125: PUSH
37126: LD_INT 8
37128: PUSH
37129: LD_INT 9
37131: PUSH
37132: LD_INT 15
37134: PUSH
37135: LD_INT 16
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: IN
37149: NOT
37150: OR
37151: IFFALSE 37155
// exit ;
37153: GO 38055
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
37155: LD_ADDR_VAR 0 2
37159: PUSH
37160: LD_VAR 0 2
37164: PPUSH
37165: LD_INT 21
37167: PUSH
37168: LD_INT 3
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 24
37177: PUSH
37178: LD_INT 250
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PPUSH
37189: CALL_OW 72
37193: ST_TO_ADDR
// case class of 1 , 15 :
37194: LD_VAR 0 4
37198: PUSH
37199: LD_INT 1
37201: DOUBLE
37202: EQUAL
37203: IFTRUE 37213
37205: LD_INT 15
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37298
37213: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
37214: LD_ADDR_VAR 0 8
37218: PUSH
37219: LD_VAR 0 2
37223: PPUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 30
37229: PUSH
37230: LD_INT 32
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 30
37239: PUSH
37240: LD_INT 31
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: PPUSH
37252: CALL_OW 72
37256: PUSH
37257: LD_VAR 0 2
37261: PPUSH
37262: LD_INT 2
37264: PUSH
37265: LD_INT 30
37267: PUSH
37268: LD_INT 4
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 30
37277: PUSH
37278: LD_INT 5
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: LIST
37289: PPUSH
37290: CALL_OW 72
37294: ADD
37295: ST_TO_ADDR
37296: GO 37544
37298: LD_INT 2
37300: DOUBLE
37301: EQUAL
37302: IFTRUE 37312
37304: LD_INT 16
37306: DOUBLE
37307: EQUAL
37308: IFTRUE 37312
37310: GO 37358
37312: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
37313: LD_ADDR_VAR 0 8
37317: PUSH
37318: LD_VAR 0 2
37322: PPUSH
37323: LD_INT 2
37325: PUSH
37326: LD_INT 30
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 30
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 72
37355: ST_TO_ADDR
37356: GO 37544
37358: LD_INT 3
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37412
37366: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
37367: LD_ADDR_VAR 0 8
37371: PUSH
37372: LD_VAR 0 2
37376: PPUSH
37377: LD_INT 2
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 2
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 30
37392: PUSH
37393: LD_INT 3
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: PPUSH
37405: CALL_OW 72
37409: ST_TO_ADDR
37410: GO 37544
37412: LD_INT 4
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37477
37420: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
37421: LD_ADDR_VAR 0 8
37425: PUSH
37426: LD_VAR 0 2
37430: PPUSH
37431: LD_INT 2
37433: PUSH
37434: LD_INT 30
37436: PUSH
37437: LD_INT 6
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 30
37446: PUSH
37447: LD_INT 7
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 30
37456: PUSH
37457: LD_INT 8
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: PPUSH
37470: CALL_OW 72
37474: ST_TO_ADDR
37475: GO 37544
37477: LD_INT 5
37479: DOUBLE
37480: EQUAL
37481: IFTRUE 37497
37483: LD_INT 8
37485: DOUBLE
37486: EQUAL
37487: IFTRUE 37497
37489: LD_INT 9
37491: DOUBLE
37492: EQUAL
37493: IFTRUE 37497
37495: GO 37543
37497: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
37498: LD_ADDR_VAR 0 8
37502: PUSH
37503: LD_VAR 0 2
37507: PPUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 30
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 30
37523: PUSH
37524: LD_INT 5
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: PPUSH
37536: CALL_OW 72
37540: ST_TO_ADDR
37541: GO 37544
37543: POP
// if not tmp then
37544: LD_VAR 0 8
37548: NOT
37549: IFFALSE 37553
// exit ;
37551: GO 38055
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
37553: LD_VAR 0 4
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 15
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: IN
37568: PUSH
37569: LD_EXP 59
37573: PUSH
37574: LD_VAR 0 1
37578: ARRAY
37579: AND
37580: IFFALSE 37736
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
37582: LD_ADDR_VAR 0 9
37586: PUSH
37587: LD_EXP 59
37591: PUSH
37592: LD_VAR 0 1
37596: ARRAY
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
37602: LD_VAR 0 9
37606: PUSH
37607: LD_EXP 60
37611: PUSH
37612: LD_VAR 0 1
37616: ARRAY
37617: IN
37618: NOT
37619: IFFALSE 37734
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
37621: LD_ADDR_EXP 60
37625: PUSH
37626: LD_EXP 60
37630: PPUSH
37631: LD_VAR 0 1
37635: PUSH
37636: LD_EXP 60
37640: PUSH
37641: LD_VAR 0 1
37645: ARRAY
37646: PUSH
37647: LD_INT 1
37649: PLUS
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PPUSH
37655: LD_VAR 0 9
37659: PPUSH
37660: CALL 51164 0 3
37664: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
37665: LD_ADDR_EXP 59
37669: PUSH
37670: LD_EXP 59
37674: PPUSH
37675: LD_VAR 0 1
37679: PPUSH
37680: LD_EXP 59
37684: PUSH
37685: LD_VAR 0 1
37689: ARRAY
37690: PUSH
37691: LD_VAR 0 9
37695: DIFF
37696: PPUSH
37697: CALL_OW 1
37701: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
37702: LD_VAR 0 3
37706: PPUSH
37707: LD_EXP 60
37711: PUSH
37712: LD_VAR 0 1
37716: ARRAY
37717: PUSH
37718: LD_EXP 60
37722: PUSH
37723: LD_VAR 0 1
37727: ARRAY
37728: ARRAY
37729: PPUSH
37730: CALL_OW 120
// end ; exit ;
37734: GO 38055
// end ; if tmp > 1 then
37736: LD_VAR 0 8
37740: PUSH
37741: LD_INT 1
37743: GREATER
37744: IFFALSE 37848
// for i = 2 to tmp do
37746: LD_ADDR_VAR 0 6
37750: PUSH
37751: DOUBLE
37752: LD_INT 2
37754: DEC
37755: ST_TO_ADDR
37756: LD_VAR 0 8
37760: PUSH
37761: FOR_TO
37762: IFFALSE 37846
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
37764: LD_VAR 0 8
37768: PUSH
37769: LD_VAR 0 6
37773: ARRAY
37774: PPUSH
37775: CALL_OW 461
37779: PUSH
37780: LD_INT 6
37782: EQUAL
37783: IFFALSE 37844
// begin x := tmp [ i ] ;
37785: LD_ADDR_VAR 0 9
37789: PUSH
37790: LD_VAR 0 8
37794: PUSH
37795: LD_VAR 0 6
37799: ARRAY
37800: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
37801: LD_ADDR_VAR 0 8
37805: PUSH
37806: LD_VAR 0 8
37810: PPUSH
37811: LD_VAR 0 6
37815: PPUSH
37816: CALL_OW 3
37820: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
37821: LD_ADDR_VAR 0 8
37825: PUSH
37826: LD_VAR 0 8
37830: PPUSH
37831: LD_INT 1
37833: PPUSH
37834: LD_VAR 0 9
37838: PPUSH
37839: CALL_OW 2
37843: ST_TO_ADDR
// end ;
37844: GO 37761
37846: POP
37847: POP
// for i in tmp do
37848: LD_ADDR_VAR 0 6
37852: PUSH
37853: LD_VAR 0 8
37857: PUSH
37858: FOR_IN
37859: IFFALSE 37928
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
37861: LD_VAR 0 6
37865: PPUSH
37866: CALL_OW 313
37870: PUSH
37871: LD_INT 6
37873: LESS
37874: PUSH
37875: LD_VAR 0 6
37879: PPUSH
37880: CALL_OW 266
37884: PUSH
37885: LD_INT 31
37887: PUSH
37888: LD_INT 32
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: IN
37895: NOT
37896: AND
37897: PUSH
37898: LD_VAR 0 6
37902: PPUSH
37903: CALL_OW 313
37907: PUSH
37908: LD_INT 0
37910: EQUAL
37911: OR
37912: IFFALSE 37926
// begin j := i ;
37914: LD_ADDR_VAR 0 7
37918: PUSH
37919: LD_VAR 0 6
37923: ST_TO_ADDR
// break ;
37924: GO 37928
// end ; end ;
37926: GO 37858
37928: POP
37929: POP
// if j then
37930: LD_VAR 0 7
37934: IFFALSE 37952
// ComEnterUnit ( unit , j ) else
37936: LD_VAR 0 3
37940: PPUSH
37941: LD_VAR 0 7
37945: PPUSH
37946: CALL_OW 120
37950: GO 38055
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
37952: LD_ADDR_VAR 0 10
37956: PUSH
37957: LD_VAR 0 2
37961: PPUSH
37962: LD_INT 2
37964: PUSH
37965: LD_INT 30
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 30
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: LIST
37989: PPUSH
37990: CALL_OW 72
37994: ST_TO_ADDR
// if depot then
37995: LD_VAR 0 10
37999: IFFALSE 38055
// begin depot := NearestUnitToUnit ( depot , unit ) ;
38001: LD_ADDR_VAR 0 10
38005: PUSH
38006: LD_VAR 0 10
38010: PPUSH
38011: LD_VAR 0 3
38015: PPUSH
38016: CALL_OW 74
38020: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
38021: LD_VAR 0 3
38025: PPUSH
38026: LD_VAR 0 10
38030: PPUSH
38031: CALL_OW 296
38035: PUSH
38036: LD_INT 10
38038: GREATER
38039: IFFALSE 38055
// ComStandNearbyBuilding ( unit , depot ) ;
38041: LD_VAR 0 3
38045: PPUSH
38046: LD_VAR 0 10
38050: PPUSH
38051: CALL 45841 0 2
// end ; end ; end ;
38055: LD_VAR 0 5
38059: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
38060: LD_INT 0
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
// if not mc_bases then
38066: LD_EXP 50
38070: NOT
38071: IFFALSE 38075
// exit ;
38073: GO 38314
// for i = 1 to mc_bases do
38075: LD_ADDR_VAR 0 2
38079: PUSH
38080: DOUBLE
38081: LD_INT 1
38083: DEC
38084: ST_TO_ADDR
38085: LD_EXP 50
38089: PUSH
38090: FOR_TO
38091: IFFALSE 38312
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
38093: LD_ADDR_VAR 0 4
38097: PUSH
38098: LD_EXP 50
38102: PUSH
38103: LD_VAR 0 2
38107: ARRAY
38108: PPUSH
38109: LD_INT 21
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PPUSH
38119: CALL_OW 72
38123: PUSH
38124: LD_EXP 79
38128: PUSH
38129: LD_VAR 0 2
38133: ARRAY
38134: UNION
38135: ST_TO_ADDR
// if not tmp then
38136: LD_VAR 0 4
38140: NOT
38141: IFFALSE 38145
// continue ;
38143: GO 38090
// for j in tmp do
38145: LD_ADDR_VAR 0 3
38149: PUSH
38150: LD_VAR 0 4
38154: PUSH
38155: FOR_IN
38156: IFFALSE 38308
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
38158: LD_VAR 0 3
38162: PPUSH
38163: CALL_OW 110
38167: NOT
38168: PUSH
38169: LD_VAR 0 3
38173: PPUSH
38174: CALL_OW 314
38178: NOT
38179: AND
38180: PUSH
38181: LD_VAR 0 3
38185: PPUSH
38186: CALL_OW 311
38190: NOT
38191: AND
38192: PUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: CALL_OW 310
38202: NOT
38203: AND
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_EXP 53
38214: PUSH
38215: LD_VAR 0 2
38219: ARRAY
38220: PUSH
38221: LD_INT 1
38223: ARRAY
38224: IN
38225: NOT
38226: AND
38227: PUSH
38228: LD_VAR 0 3
38232: PUSH
38233: LD_EXP 53
38237: PUSH
38238: LD_VAR 0 2
38242: ARRAY
38243: PUSH
38244: LD_INT 2
38246: ARRAY
38247: IN
38248: NOT
38249: AND
38250: PUSH
38251: LD_VAR 0 3
38255: PUSH
38256: LD_EXP 62
38260: PUSH
38261: LD_VAR 0 2
38265: ARRAY
38266: IN
38267: NOT
38268: AND
38269: IFFALSE 38306
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
38271: LD_VAR 0 2
38275: PPUSH
38276: LD_EXP 50
38280: PUSH
38281: LD_VAR 0 2
38285: ARRAY
38286: PPUSH
38287: LD_VAR 0 3
38291: PPUSH
38292: LD_VAR 0 3
38296: PPUSH
38297: CALL_OW 257
38301: PPUSH
38302: CALL 37078 0 4
// end ;
38306: GO 38155
38308: POP
38309: POP
// end ;
38310: GO 38090
38312: POP
38313: POP
// end ;
38314: LD_VAR 0 1
38318: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
38319: LD_INT 0
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
// if not mc_bases [ base ] then
38327: LD_EXP 50
38331: PUSH
38332: LD_VAR 0 1
38336: ARRAY
38337: NOT
38338: IFFALSE 38342
// exit ;
38340: GO 38524
// tmp := [ ] ;
38342: LD_ADDR_VAR 0 6
38346: PUSH
38347: EMPTY
38348: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
38349: LD_ADDR_VAR 0 7
38353: PUSH
38354: LD_VAR 0 3
38358: PPUSH
38359: LD_INT 0
38361: PPUSH
38362: CALL_OW 517
38366: ST_TO_ADDR
// if not list then
38367: LD_VAR 0 7
38371: NOT
38372: IFFALSE 38376
// exit ;
38374: GO 38524
// for i = 1 to amount do
38376: LD_ADDR_VAR 0 5
38380: PUSH
38381: DOUBLE
38382: LD_INT 1
38384: DEC
38385: ST_TO_ADDR
38386: LD_VAR 0 2
38390: PUSH
38391: FOR_TO
38392: IFFALSE 38472
// begin x := rand ( 1 , list [ 1 ] ) ;
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_INT 1
38401: PPUSH
38402: LD_VAR 0 7
38406: PUSH
38407: LD_INT 1
38409: ARRAY
38410: PPUSH
38411: CALL_OW 12
38415: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
38416: LD_ADDR_VAR 0 6
38420: PUSH
38421: LD_VAR 0 6
38425: PPUSH
38426: LD_VAR 0 5
38430: PPUSH
38431: LD_VAR 0 7
38435: PUSH
38436: LD_INT 1
38438: ARRAY
38439: PUSH
38440: LD_VAR 0 8
38444: ARRAY
38445: PUSH
38446: LD_VAR 0 7
38450: PUSH
38451: LD_INT 2
38453: ARRAY
38454: PUSH
38455: LD_VAR 0 8
38459: ARRAY
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PPUSH
38465: CALL_OW 1
38469: ST_TO_ADDR
// end ;
38470: GO 38391
38472: POP
38473: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
38474: LD_ADDR_EXP 63
38478: PUSH
38479: LD_EXP 63
38483: PPUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: LD_VAR 0 6
38493: PPUSH
38494: CALL_OW 1
38498: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
38499: LD_ADDR_EXP 65
38503: PUSH
38504: LD_EXP 65
38508: PPUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: LD_VAR 0 3
38518: PPUSH
38519: CALL_OW 1
38523: ST_TO_ADDR
// end ;
38524: LD_VAR 0 4
38528: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
38529: LD_INT 0
38531: PPUSH
// if not mc_bases [ base ] then
38532: LD_EXP 50
38536: PUSH
38537: LD_VAR 0 1
38541: ARRAY
38542: NOT
38543: IFFALSE 38547
// exit ;
38545: GO 38572
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
38547: LD_ADDR_EXP 55
38551: PUSH
38552: LD_EXP 55
38556: PPUSH
38557: LD_VAR 0 1
38561: PPUSH
38562: LD_VAR 0 2
38566: PPUSH
38567: CALL_OW 1
38571: ST_TO_ADDR
// end ;
38572: LD_VAR 0 3
38576: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
38577: LD_INT 0
38579: PPUSH
// if not mc_bases [ base ] then
38580: LD_EXP 50
38584: PUSH
38585: LD_VAR 0 1
38589: ARRAY
38590: NOT
38591: IFFALSE 38595
// exit ;
38593: GO 38632
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
38595: LD_ADDR_EXP 55
38599: PUSH
38600: LD_EXP 55
38604: PPUSH
38605: LD_VAR 0 1
38609: PPUSH
38610: LD_EXP 55
38614: PUSH
38615: LD_VAR 0 1
38619: ARRAY
38620: PUSH
38621: LD_VAR 0 2
38625: UNION
38626: PPUSH
38627: CALL_OW 1
38631: ST_TO_ADDR
// end ;
38632: LD_VAR 0 3
38636: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
38637: LD_INT 0
38639: PPUSH
// if not mc_bases [ base ] then
38640: LD_EXP 50
38644: PUSH
38645: LD_VAR 0 1
38649: ARRAY
38650: NOT
38651: IFFALSE 38655
// exit ;
38653: GO 38680
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
38655: LD_ADDR_EXP 71
38659: PUSH
38660: LD_EXP 71
38664: PPUSH
38665: LD_VAR 0 1
38669: PPUSH
38670: LD_VAR 0 2
38674: PPUSH
38675: CALL_OW 1
38679: ST_TO_ADDR
// end ;
38680: LD_VAR 0 3
38684: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
38685: LD_INT 0
38687: PPUSH
// if not mc_bases [ base ] then
38688: LD_EXP 50
38692: PUSH
38693: LD_VAR 0 1
38697: ARRAY
38698: NOT
38699: IFFALSE 38703
// exit ;
38701: GO 38740
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] union compontents ) ;
38703: LD_ADDR_EXP 71
38707: PUSH
38708: LD_EXP 71
38712: PPUSH
38713: LD_VAR 0 1
38717: PPUSH
38718: LD_EXP 71
38722: PUSH
38723: LD_VAR 0 1
38727: ARRAY
38728: PUSH
38729: LD_VAR 0 2
38733: UNION
38734: PPUSH
38735: CALL_OW 1
38739: ST_TO_ADDR
// end ;
38740: LD_VAR 0 3
38744: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
38745: LD_INT 0
38747: PPUSH
// if not mc_bases [ base ] then
38748: LD_EXP 50
38752: PUSH
38753: LD_VAR 0 1
38757: ARRAY
38758: NOT
38759: IFFALSE 38763
// exit ;
38761: GO 38875
// mc_defender := Replace ( mc_defender , base , deflist ) ;
38763: LD_ADDR_EXP 72
38767: PUSH
38768: LD_EXP 72
38772: PPUSH
38773: LD_VAR 0 1
38777: PPUSH
38778: LD_VAR 0 2
38782: PPUSH
38783: CALL_OW 1
38787: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
38788: LD_ADDR_EXP 61
38792: PUSH
38793: LD_EXP 61
38797: PPUSH
38798: LD_VAR 0 1
38802: PPUSH
38803: LD_VAR 0 2
38807: PUSH
38808: LD_INT 0
38810: PLUS
38811: PPUSH
38812: CALL_OW 1
38816: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
38817: LD_ADDR_EXP 69
38821: PUSH
38822: LD_EXP 69
38826: PPUSH
38827: LD_VAR 0 1
38831: PPUSH
38832: LD_EXP 69
38836: PUSH
38837: LD_VAR 0 1
38841: ARRAY
38842: PUSH
38843: LD_EXP 72
38847: PUSH
38848: LD_VAR 0 1
38852: ARRAY
38853: PPUSH
38854: LD_INT 21
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PPUSH
38864: CALL_OW 72
38868: UNION
38869: PPUSH
38870: CALL_OW 1
38874: ST_TO_ADDR
// end ;
38875: LD_VAR 0 3
38879: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
38880: LD_INT 0
38882: PPUSH
// if not mc_bases [ base ] then
38883: LD_EXP 50
38887: PUSH
38888: LD_VAR 0 1
38892: ARRAY
38893: NOT
38894: IFFALSE 38898
// exit ;
38896: GO 38923
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
38898: LD_ADDR_EXP 61
38902: PUSH
38903: LD_EXP 61
38907: PPUSH
38908: LD_VAR 0 1
38912: PPUSH
38913: LD_VAR 0 2
38917: PPUSH
38918: CALL_OW 1
38922: ST_TO_ADDR
// end ;
38923: LD_VAR 0 3
38927: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
38928: LD_INT 0
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
// if not mc_bases [ base ] then
38934: LD_EXP 50
38938: PUSH
38939: LD_VAR 0 1
38943: ARRAY
38944: NOT
38945: IFFALSE 38949
// exit ;
38947: GO 39014
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
38949: LD_ADDR_EXP 70
38953: PUSH
38954: LD_EXP 70
38958: PPUSH
38959: LD_VAR 0 1
38963: PUSH
38964: LD_EXP 70
38968: PUSH
38969: LD_VAR 0 1
38973: ARRAY
38974: PUSH
38975: LD_INT 1
38977: PLUS
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PPUSH
38983: LD_VAR 0 1
38987: PUSH
38988: LD_VAR 0 2
38992: PUSH
38993: LD_VAR 0 3
38997: PUSH
38998: LD_VAR 0 4
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: PPUSH
39009: CALL 51164 0 3
39013: ST_TO_ADDR
// end ;
39014: LD_VAR 0 5
39018: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
39019: LD_INT 0
39021: PPUSH
// if not mc_bases [ base ] then
39022: LD_EXP 50
39026: PUSH
39027: LD_VAR 0 1
39031: ARRAY
39032: NOT
39033: IFFALSE 39037
// exit ;
39035: GO 39062
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
39037: LD_ADDR_EXP 87
39041: PUSH
39042: LD_EXP 87
39046: PPUSH
39047: LD_VAR 0 1
39051: PPUSH
39052: LD_VAR 0 2
39056: PPUSH
39057: CALL_OW 1
39061: ST_TO_ADDR
// end ;
39062: LD_VAR 0 3
39066: RET
// export function MC_GetMinesField ( base ) ; begin
39067: LD_INT 0
39069: PPUSH
// result := mc_mines [ base ] ;
39070: LD_ADDR_VAR 0 2
39074: PUSH
39075: LD_EXP 63
39079: PUSH
39080: LD_VAR 0 1
39084: ARRAY
39085: ST_TO_ADDR
// end ;
39086: LD_VAR 0 2
39090: RET
// export function MC_GetProduceList ( base ) ; begin
39091: LD_INT 0
39093: PPUSH
// result := mc_produce [ base ] ;
39094: LD_ADDR_VAR 0 2
39098: PUSH
39099: LD_EXP 71
39103: PUSH
39104: LD_VAR 0 1
39108: ARRAY
39109: ST_TO_ADDR
// end ;
39110: LD_VAR 0 2
39114: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
39115: LD_INT 0
39117: PPUSH
39118: PPUSH
// if not mc_bases then
39119: LD_EXP 50
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39193
// if mc_bases [ base ] then
39128: LD_EXP 50
39132: PUSH
39133: LD_VAR 0 1
39137: ARRAY
39138: IFFALSE 39193
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39140: LD_ADDR_VAR 0 3
39144: PUSH
39145: LD_EXP 50
39149: PUSH
39150: LD_VAR 0 1
39154: ARRAY
39155: PPUSH
39156: LD_INT 30
39158: PUSH
39159: LD_VAR 0 2
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PPUSH
39168: CALL_OW 72
39172: ST_TO_ADDR
// if result then
39173: LD_VAR 0 3
39177: IFFALSE 39193
// result := result [ 1 ] ;
39179: LD_ADDR_VAR 0 3
39183: PUSH
39184: LD_VAR 0 3
39188: PUSH
39189: LD_INT 1
39191: ARRAY
39192: ST_TO_ADDR
// end ; end ;
39193: LD_VAR 0 3
39197: RET
// export function MC_SetTame ( base , area ) ; begin
39198: LD_INT 0
39200: PPUSH
// if not mc_bases or not base then
39201: LD_EXP 50
39205: NOT
39206: PUSH
39207: LD_VAR 0 1
39211: NOT
39212: OR
39213: IFFALSE 39217
// exit ;
39215: GO 39242
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
39217: LD_ADDR_EXP 78
39221: PUSH
39222: LD_EXP 78
39226: PPUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: LD_VAR 0 2
39236: PPUSH
39237: CALL_OW 1
39241: ST_TO_ADDR
// end ;
39242: LD_VAR 0 3
39246: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
39247: LD_INT 0
39249: PPUSH
39250: PPUSH
// if not mc_bases or not base then
39251: LD_EXP 50
39255: NOT
39256: PUSH
39257: LD_VAR 0 1
39261: NOT
39262: OR
39263: IFFALSE 39267
// exit ;
39265: GO 39369
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_EXP 50
39276: PUSH
39277: LD_VAR 0 1
39281: ARRAY
39282: PPUSH
39283: LD_INT 30
39285: PUSH
39286: LD_VAR 0 2
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PPUSH
39295: CALL_OW 72
39299: ST_TO_ADDR
// if not tmp then
39300: LD_VAR 0 4
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 39369
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
39309: LD_ADDR_EXP 82
39313: PUSH
39314: LD_EXP 82
39318: PPUSH
39319: LD_VAR 0 1
39323: PPUSH
39324: LD_EXP 82
39328: PUSH
39329: LD_VAR 0 1
39333: ARRAY
39334: PPUSH
39335: LD_EXP 82
39339: PUSH
39340: LD_VAR 0 1
39344: ARRAY
39345: PUSH
39346: LD_INT 1
39348: PLUS
39349: PPUSH
39350: LD_VAR 0 4
39354: PUSH
39355: LD_INT 1
39357: ARRAY
39358: PPUSH
39359: CALL_OW 2
39363: PPUSH
39364: CALL_OW 1
39368: ST_TO_ADDR
// end ;
39369: LD_VAR 0 3
39373: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
39374: LD_INT 0
39376: PPUSH
39377: PPUSH
// if not mc_bases or not base or not kinds then
39378: LD_EXP 50
39382: NOT
39383: PUSH
39384: LD_VAR 0 1
39388: NOT
39389: OR
39390: PUSH
39391: LD_VAR 0 2
39395: NOT
39396: OR
39397: IFFALSE 39401
// exit ;
39399: GO 39462
// for i in kinds do
39401: LD_ADDR_VAR 0 4
39405: PUSH
39406: LD_VAR 0 2
39410: PUSH
39411: FOR_IN
39412: IFFALSE 39460
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
39414: LD_ADDR_EXP 84
39418: PUSH
39419: LD_EXP 84
39423: PPUSH
39424: LD_VAR 0 1
39428: PUSH
39429: LD_EXP 84
39433: PUSH
39434: LD_VAR 0 1
39438: ARRAY
39439: PUSH
39440: LD_INT 1
39442: PLUS
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PPUSH
39448: LD_VAR 0 4
39452: PPUSH
39453: CALL 51164 0 3
39457: ST_TO_ADDR
39458: GO 39411
39460: POP
39461: POP
// end ;
39462: LD_VAR 0 3
39466: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
39467: LD_INT 0
39469: PPUSH
// if not mc_bases or not base or not areas then
39470: LD_EXP 50
39474: NOT
39475: PUSH
39476: LD_VAR 0 1
39480: NOT
39481: OR
39482: PUSH
39483: LD_VAR 0 2
39487: NOT
39488: OR
39489: IFFALSE 39493
// exit ;
39491: GO 39518
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
39493: LD_ADDR_EXP 68
39497: PUSH
39498: LD_EXP 68
39502: PPUSH
39503: LD_VAR 0 1
39507: PPUSH
39508: LD_VAR 0 2
39512: PPUSH
39513: CALL_OW 1
39517: ST_TO_ADDR
// end ;
39518: LD_VAR 0 3
39522: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
39523: LD_INT 0
39525: PPUSH
// if not mc_bases or not base or not teleports_exit then
39526: LD_EXP 50
39530: NOT
39531: PUSH
39532: LD_VAR 0 1
39536: NOT
39537: OR
39538: PUSH
39539: LD_VAR 0 2
39543: NOT
39544: OR
39545: IFFALSE 39549
// exit ;
39547: GO 39574
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
39549: LD_ADDR_EXP 85
39553: PUSH
39554: LD_EXP 85
39558: PPUSH
39559: LD_VAR 0 1
39563: PPUSH
39564: LD_VAR 0 2
39568: PPUSH
39569: CALL_OW 1
39573: ST_TO_ADDR
// end ;
39574: LD_VAR 0 3
39578: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
39579: LD_INT 0
39581: PPUSH
39582: PPUSH
39583: PPUSH
// if not mc_bases or not base or not ext_list then
39584: LD_EXP 50
39588: NOT
39589: PUSH
39590: LD_VAR 0 1
39594: NOT
39595: OR
39596: PUSH
39597: LD_VAR 0 5
39601: NOT
39602: OR
39603: IFFALSE 39607
// exit ;
39605: GO 39780
// tmp := GetFacExtXYD ( x , y , d ) ;
39607: LD_ADDR_VAR 0 8
39611: PUSH
39612: LD_VAR 0 2
39616: PPUSH
39617: LD_VAR 0 3
39621: PPUSH
39622: LD_VAR 0 4
39626: PPUSH
39627: CALL 84479 0 3
39631: ST_TO_ADDR
// if not tmp then
39632: LD_VAR 0 8
39636: NOT
39637: IFFALSE 39641
// exit ;
39639: GO 39780
// for i in tmp do
39641: LD_ADDR_VAR 0 7
39645: PUSH
39646: LD_VAR 0 8
39650: PUSH
39651: FOR_IN
39652: IFFALSE 39778
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
39654: LD_ADDR_EXP 55
39658: PUSH
39659: LD_EXP 55
39663: PPUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: LD_EXP 55
39673: PUSH
39674: LD_VAR 0 1
39678: ARRAY
39679: PPUSH
39680: LD_EXP 55
39684: PUSH
39685: LD_VAR 0 1
39689: ARRAY
39690: PUSH
39691: LD_INT 1
39693: PLUS
39694: PPUSH
39695: LD_VAR 0 5
39699: PUSH
39700: LD_INT 1
39702: ARRAY
39703: PUSH
39704: LD_VAR 0 7
39708: PUSH
39709: LD_INT 1
39711: ARRAY
39712: PUSH
39713: LD_VAR 0 7
39717: PUSH
39718: LD_INT 2
39720: ARRAY
39721: PUSH
39722: LD_VAR 0 7
39726: PUSH
39727: LD_INT 3
39729: ARRAY
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: PPUSH
39737: CALL_OW 2
39741: PPUSH
39742: CALL_OW 1
39746: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
39747: LD_ADDR_VAR 0 5
39751: PUSH
39752: LD_VAR 0 5
39756: PPUSH
39757: LD_INT 1
39759: PPUSH
39760: CALL_OW 3
39764: ST_TO_ADDR
// if not ext_list then
39765: LD_VAR 0 5
39769: NOT
39770: IFFALSE 39776
// exit ;
39772: POP
39773: POP
39774: GO 39780
// end ;
39776: GO 39651
39778: POP
39779: POP
// end ;
39780: LD_VAR 0 6
39784: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
39785: LD_INT 0
39787: PPUSH
// if not mc_bases or not base or not weapon_list then
39788: LD_EXP 50
39792: NOT
39793: PUSH
39794: LD_VAR 0 1
39798: NOT
39799: OR
39800: PUSH
39801: LD_VAR 0 2
39805: NOT
39806: OR
39807: IFFALSE 39811
// exit ;
39809: GO 39836
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
39811: LD_ADDR_EXP 89
39815: PUSH
39816: LD_EXP 89
39820: PPUSH
39821: LD_VAR 0 1
39825: PPUSH
39826: LD_VAR 0 2
39830: PPUSH
39831: CALL_OW 1
39835: ST_TO_ADDR
// end ;
39836: LD_VAR 0 3
39840: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
39841: LD_INT 0
39843: PPUSH
// if not mc_bases or not base or not tech_list then
39844: LD_EXP 50
39848: NOT
39849: PUSH
39850: LD_VAR 0 1
39854: NOT
39855: OR
39856: PUSH
39857: LD_VAR 0 2
39861: NOT
39862: OR
39863: IFFALSE 39867
// exit ;
39865: GO 39892
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
39867: LD_ADDR_EXP 77
39871: PUSH
39872: LD_EXP 77
39876: PPUSH
39877: LD_VAR 0 1
39881: PPUSH
39882: LD_VAR 0 2
39886: PPUSH
39887: CALL_OW 1
39891: ST_TO_ADDR
// end ;
39892: LD_VAR 0 3
39896: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
39897: LD_INT 0
39899: PPUSH
// if not mc_bases or not parking_area or not base then
39900: LD_EXP 50
39904: NOT
39905: PUSH
39906: LD_VAR 0 2
39910: NOT
39911: OR
39912: PUSH
39913: LD_VAR 0 1
39917: NOT
39918: OR
39919: IFFALSE 39923
// exit ;
39921: GO 39948
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
39923: LD_ADDR_EXP 74
39927: PUSH
39928: LD_EXP 74
39932: PPUSH
39933: LD_VAR 0 1
39937: PPUSH
39938: LD_VAR 0 2
39942: PPUSH
39943: CALL_OW 1
39947: ST_TO_ADDR
// end ;
39948: LD_VAR 0 3
39952: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
39953: LD_INT 0
39955: PPUSH
// if not mc_bases or not base or not scan_area then
39956: LD_EXP 50
39960: NOT
39961: PUSH
39962: LD_VAR 0 1
39966: NOT
39967: OR
39968: PUSH
39969: LD_VAR 0 2
39973: NOT
39974: OR
39975: IFFALSE 39979
// exit ;
39977: GO 40004
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
39979: LD_ADDR_EXP 75
39983: PUSH
39984: LD_EXP 75
39988: PPUSH
39989: LD_VAR 0 1
39993: PPUSH
39994: LD_VAR 0 2
39998: PPUSH
39999: CALL_OW 1
40003: ST_TO_ADDR
// end ;
40004: LD_VAR 0 3
40008: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
40009: LD_INT 0
40011: PPUSH
40012: PPUSH
// if not mc_bases or not base then
40013: LD_EXP 50
40017: NOT
40018: PUSH
40019: LD_VAR 0 1
40023: NOT
40024: OR
40025: IFFALSE 40029
// exit ;
40027: GO 40093
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 4
40045: PUSH
40046: LD_INT 11
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
40056: LD_ADDR_EXP 77
40060: PUSH
40061: LD_EXP 77
40065: PPUSH
40066: LD_VAR 0 1
40070: PPUSH
40071: LD_EXP 77
40075: PUSH
40076: LD_VAR 0 1
40080: ARRAY
40081: PUSH
40082: LD_VAR 0 3
40086: DIFF
40087: PPUSH
40088: CALL_OW 1
40092: ST_TO_ADDR
// end ; end_of_file
40093: LD_VAR 0 2
40097: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
40098: LD_INT 0
40100: PPUSH
40101: PPUSH
40102: PPUSH
// if not mc_bases or not skirmish then
40103: LD_EXP 50
40107: NOT
40108: PUSH
40109: LD_EXP 48
40113: NOT
40114: OR
40115: IFFALSE 40119
// exit ;
40117: GO 40284
// for i = 1 to mc_bases do
40119: LD_ADDR_VAR 0 4
40123: PUSH
40124: DOUBLE
40125: LD_INT 1
40127: DEC
40128: ST_TO_ADDR
40129: LD_EXP 50
40133: PUSH
40134: FOR_TO
40135: IFFALSE 40282
// begin if sci in mc_bases [ i ] then
40137: LD_VAR 0 2
40141: PUSH
40142: LD_EXP 50
40146: PUSH
40147: LD_VAR 0 4
40151: ARRAY
40152: IN
40153: IFFALSE 40280
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
40155: LD_ADDR_EXP 79
40159: PUSH
40160: LD_EXP 79
40164: PPUSH
40165: LD_VAR 0 4
40169: PUSH
40170: LD_EXP 79
40174: PUSH
40175: LD_VAR 0 4
40179: ARRAY
40180: PUSH
40181: LD_INT 1
40183: PLUS
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PPUSH
40189: LD_VAR 0 1
40193: PPUSH
40194: CALL 51164 0 3
40198: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
40199: LD_ADDR_VAR 0 5
40203: PUSH
40204: LD_EXP 50
40208: PUSH
40209: LD_VAR 0 4
40213: ARRAY
40214: PPUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 30
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: LIST
40242: PPUSH
40243: CALL_OW 72
40247: PPUSH
40248: LD_VAR 0 1
40252: PPUSH
40253: CALL_OW 74
40257: ST_TO_ADDR
// if tmp then
40258: LD_VAR 0 5
40262: IFFALSE 40278
// ComStandNearbyBuilding ( ape , tmp ) ;
40264: LD_VAR 0 1
40268: PPUSH
40269: LD_VAR 0 5
40273: PPUSH
40274: CALL 45841 0 2
// break ;
40278: GO 40282
// end ; end ;
40280: GO 40134
40282: POP
40283: POP
// end ;
40284: LD_VAR 0 3
40288: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
40289: LD_INT 0
40291: PPUSH
40292: PPUSH
40293: PPUSH
// if not mc_bases or not skirmish then
40294: LD_EXP 50
40298: NOT
40299: PUSH
40300: LD_EXP 48
40304: NOT
40305: OR
40306: IFFALSE 40310
// exit ;
40308: GO 40399
// for i = 1 to mc_bases do
40310: LD_ADDR_VAR 0 4
40314: PUSH
40315: DOUBLE
40316: LD_INT 1
40318: DEC
40319: ST_TO_ADDR
40320: LD_EXP 50
40324: PUSH
40325: FOR_TO
40326: IFFALSE 40397
// begin if building in mc_busy_turret_list [ i ] then
40328: LD_VAR 0 1
40332: PUSH
40333: LD_EXP 60
40337: PUSH
40338: LD_VAR 0 4
40342: ARRAY
40343: IN
40344: IFFALSE 40395
// begin tmp := mc_busy_turret_list [ i ] diff building ;
40346: LD_ADDR_VAR 0 5
40350: PUSH
40351: LD_EXP 60
40355: PUSH
40356: LD_VAR 0 4
40360: ARRAY
40361: PUSH
40362: LD_VAR 0 1
40366: DIFF
40367: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
40368: LD_ADDR_EXP 60
40372: PUSH
40373: LD_EXP 60
40377: PPUSH
40378: LD_VAR 0 4
40382: PPUSH
40383: LD_VAR 0 5
40387: PPUSH
40388: CALL_OW 1
40392: ST_TO_ADDR
// break ;
40393: GO 40397
// end ; end ;
40395: GO 40325
40397: POP
40398: POP
// end ;
40399: LD_VAR 0 3
40403: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
40404: LD_INT 0
40406: PPUSH
40407: PPUSH
40408: PPUSH
// if not mc_bases or not skirmish then
40409: LD_EXP 50
40413: NOT
40414: PUSH
40415: LD_EXP 48
40419: NOT
40420: OR
40421: IFFALSE 40425
// exit ;
40423: GO 40624
// for i = 1 to mc_bases do
40425: LD_ADDR_VAR 0 5
40429: PUSH
40430: DOUBLE
40431: LD_INT 1
40433: DEC
40434: ST_TO_ADDR
40435: LD_EXP 50
40439: PUSH
40440: FOR_TO
40441: IFFALSE 40622
// if building in mc_bases [ i ] then
40443: LD_VAR 0 1
40447: PUSH
40448: LD_EXP 50
40452: PUSH
40453: LD_VAR 0 5
40457: ARRAY
40458: IN
40459: IFFALSE 40620
// begin tmp := mc_bases [ i ] diff building ;
40461: LD_ADDR_VAR 0 6
40465: PUSH
40466: LD_EXP 50
40470: PUSH
40471: LD_VAR 0 5
40475: ARRAY
40476: PUSH
40477: LD_VAR 0 1
40481: DIFF
40482: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
40483: LD_ADDR_EXP 50
40487: PUSH
40488: LD_EXP 50
40492: PPUSH
40493: LD_VAR 0 5
40497: PPUSH
40498: LD_VAR 0 6
40502: PPUSH
40503: CALL_OW 1
40507: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
40508: LD_VAR 0 1
40512: PUSH
40513: LD_EXP 58
40517: PUSH
40518: LD_VAR 0 5
40522: ARRAY
40523: IN
40524: IFFALSE 40563
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
40526: LD_ADDR_EXP 58
40530: PUSH
40531: LD_EXP 58
40535: PPUSH
40536: LD_VAR 0 5
40540: PPUSH
40541: LD_EXP 58
40545: PUSH
40546: LD_VAR 0 5
40550: ARRAY
40551: PUSH
40552: LD_VAR 0 1
40556: DIFF
40557: PPUSH
40558: CALL_OW 1
40562: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
40563: LD_VAR 0 1
40567: PUSH
40568: LD_EXP 59
40572: PUSH
40573: LD_VAR 0 5
40577: ARRAY
40578: IN
40579: IFFALSE 40618
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
40581: LD_ADDR_EXP 59
40585: PUSH
40586: LD_EXP 59
40590: PPUSH
40591: LD_VAR 0 5
40595: PPUSH
40596: LD_EXP 59
40600: PUSH
40601: LD_VAR 0 5
40605: ARRAY
40606: PUSH
40607: LD_VAR 0 1
40611: DIFF
40612: PPUSH
40613: CALL_OW 1
40617: ST_TO_ADDR
// break ;
40618: GO 40622
// end ;
40620: GO 40440
40622: POP
40623: POP
// end ;
40624: LD_VAR 0 4
40628: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
40629: LD_INT 0
40631: PPUSH
40632: PPUSH
40633: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
40634: LD_EXP 50
40638: NOT
40639: PUSH
40640: LD_EXP 48
40644: NOT
40645: OR
40646: PUSH
40647: LD_VAR 0 3
40651: PUSH
40652: LD_EXP 76
40656: IN
40657: NOT
40658: OR
40659: IFFALSE 40663
// exit ;
40661: GO 40786
// for i = 1 to mc_vehicles do
40663: LD_ADDR_VAR 0 6
40667: PUSH
40668: DOUBLE
40669: LD_INT 1
40671: DEC
40672: ST_TO_ADDR
40673: LD_EXP 69
40677: PUSH
40678: FOR_TO
40679: IFFALSE 40784
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
40681: LD_VAR 0 2
40685: PUSH
40686: LD_EXP 69
40690: PUSH
40691: LD_VAR 0 6
40695: ARRAY
40696: IN
40697: PUSH
40698: LD_VAR 0 1
40702: PUSH
40703: LD_EXP 69
40707: PUSH
40708: LD_VAR 0 6
40712: ARRAY
40713: IN
40714: OR
40715: IFFALSE 40782
// begin tmp := mc_vehicles [ i ] diff old ;
40717: LD_ADDR_VAR 0 7
40721: PUSH
40722: LD_EXP 69
40726: PUSH
40727: LD_VAR 0 6
40731: ARRAY
40732: PUSH
40733: LD_VAR 0 2
40737: DIFF
40738: ST_TO_ADDR
// tmp := tmp diff new ;
40739: LD_ADDR_VAR 0 7
40743: PUSH
40744: LD_VAR 0 7
40748: PUSH
40749: LD_VAR 0 1
40753: DIFF
40754: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
40755: LD_ADDR_EXP 69
40759: PUSH
40760: LD_EXP 69
40764: PPUSH
40765: LD_VAR 0 6
40769: PPUSH
40770: LD_VAR 0 7
40774: PPUSH
40775: CALL_OW 1
40779: ST_TO_ADDR
// break ;
40780: GO 40784
// end ;
40782: GO 40678
40784: POP
40785: POP
// end ;
40786: LD_VAR 0 5
40790: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
40791: LD_INT 0
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
// if not mc_bases or not skirmish then
40797: LD_EXP 50
40801: NOT
40802: PUSH
40803: LD_EXP 48
40807: NOT
40808: OR
40809: IFFALSE 40813
// exit ;
40811: GO 41196
// side := GetSide ( vehicle ) ;
40813: LD_ADDR_VAR 0 5
40817: PUSH
40818: LD_VAR 0 1
40822: PPUSH
40823: CALL_OW 255
40827: ST_TO_ADDR
// for i = 1 to mc_bases do
40828: LD_ADDR_VAR 0 4
40832: PUSH
40833: DOUBLE
40834: LD_INT 1
40836: DEC
40837: ST_TO_ADDR
40838: LD_EXP 50
40842: PUSH
40843: FOR_TO
40844: IFFALSE 41194
// begin if factory in mc_bases [ i ] then
40846: LD_VAR 0 2
40850: PUSH
40851: LD_EXP 50
40855: PUSH
40856: LD_VAR 0 4
40860: ARRAY
40861: IN
40862: IFFALSE 41192
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
40864: LD_EXP 72
40868: PUSH
40869: LD_VAR 0 4
40873: ARRAY
40874: PUSH
40875: LD_EXP 61
40879: PUSH
40880: LD_VAR 0 4
40884: ARRAY
40885: LESS
40886: PUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 264
40896: PUSH
40897: LD_INT 31
40899: PUSH
40900: LD_INT 32
40902: PUSH
40903: LD_INT 51
40905: PUSH
40906: LD_EXP 94
40910: PUSH
40911: LD_INT 12
40913: PUSH
40914: LD_INT 30
40916: PUSH
40917: LD_EXP 93
40921: PUSH
40922: LD_INT 11
40924: PUSH
40925: LD_INT 53
40927: PUSH
40928: LD_INT 14
40930: PUSH
40931: LD_EXP 97
40935: PUSH
40936: LD_INT 29
40938: PUSH
40939: LD_EXP 95
40943: PUSH
40944: LD_INT 13
40946: PUSH
40947: LD_INT 52
40949: PUSH
40950: LD_INT 48
40952: PUSH
40953: LD_INT 8
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: IN
40975: NOT
40976: AND
40977: IFFALSE 41018
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
40979: LD_ADDR_EXP 72
40983: PUSH
40984: LD_EXP 72
40988: PPUSH
40989: LD_VAR 0 4
40993: PPUSH
40994: LD_EXP 72
40998: PUSH
40999: LD_VAR 0 4
41003: ARRAY
41004: PUSH
41005: LD_VAR 0 1
41009: ADD
41010: PPUSH
41011: CALL_OW 1
41015: ST_TO_ADDR
41016: GO 41062
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
41018: LD_ADDR_EXP 69
41022: PUSH
41023: LD_EXP 69
41027: PPUSH
41028: LD_VAR 0 4
41032: PUSH
41033: LD_EXP 69
41037: PUSH
41038: LD_VAR 0 4
41042: ARRAY
41043: PUSH
41044: LD_INT 1
41046: PLUS
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PPUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL 51164 0 3
41061: ST_TO_ADDR
// if not mc_scan [ i ] then
41062: LD_EXP 73
41066: PUSH
41067: LD_VAR 0 4
41071: ARRAY
41072: NOT
41073: IFFALSE 41192
// begin if GetControl ( vehicle ) = control_remote then
41075: LD_VAR 0 1
41079: PPUSH
41080: CALL_OW 263
41084: PUSH
41085: LD_INT 2
41087: EQUAL
41088: IFFALSE 41108
// repeat wait ( 0 0$1 ) ;
41090: LD_INT 35
41092: PPUSH
41093: CALL_OW 67
// until IsControledBy ( vehicle ) ;
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 312
41106: IFFALSE 41090
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
41108: LD_VAR 0 1
41112: PPUSH
41113: LD_EXP 74
41117: PUSH
41118: LD_VAR 0 4
41122: ARRAY
41123: PPUSH
41124: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
41128: LD_VAR 0 1
41132: PPUSH
41133: CALL_OW 263
41137: PUSH
41138: LD_INT 1
41140: NONEQUAL
41141: IFFALSE 41145
// break ;
41143: GO 41194
// repeat wait ( 0 0$1 ) ;
41145: LD_INT 35
41147: PPUSH
41148: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
41152: LD_VAR 0 1
41156: PPUSH
41157: LD_EXP 74
41161: PUSH
41162: LD_VAR 0 4
41166: ARRAY
41167: PPUSH
41168: CALL_OW 308
41172: IFFALSE 41145
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 311
41183: PPUSH
41184: CALL_OW 121
// exit ;
41188: POP
41189: POP
41190: GO 41196
// end ; end ; end ;
41192: GO 40843
41194: POP
41195: POP
// end ;
41196: LD_VAR 0 3
41200: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
41201: LD_INT 0
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
// if not mc_bases or not skirmish then
41207: LD_EXP 50
41211: NOT
41212: PUSH
41213: LD_EXP 48
41217: NOT
41218: OR
41219: IFFALSE 41223
// exit ;
41221: GO 41576
// repeat wait ( 0 0$1 ) ;
41223: LD_INT 35
41225: PPUSH
41226: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
41230: LD_VAR 0 2
41234: PPUSH
41235: LD_VAR 0 3
41239: PPUSH
41240: CALL_OW 284
41244: IFFALSE 41223
// if GetResourceTypeXY ( x , y ) = mat_artefact then
41246: LD_VAR 0 2
41250: PPUSH
41251: LD_VAR 0 3
41255: PPUSH
41256: CALL_OW 283
41260: PUSH
41261: LD_INT 4
41263: EQUAL
41264: IFFALSE 41268
// exit ;
41266: GO 41576
// for i = 1 to mc_bases do
41268: LD_ADDR_VAR 0 7
41272: PUSH
41273: DOUBLE
41274: LD_INT 1
41276: DEC
41277: ST_TO_ADDR
41278: LD_EXP 50
41282: PUSH
41283: FOR_TO
41284: IFFALSE 41574
// begin if mc_crates_area [ i ] then
41286: LD_EXP 68
41290: PUSH
41291: LD_VAR 0 7
41295: ARRAY
41296: IFFALSE 41407
// for j in mc_crates_area [ i ] do
41298: LD_ADDR_VAR 0 8
41302: PUSH
41303: LD_EXP 68
41307: PUSH
41308: LD_VAR 0 7
41312: ARRAY
41313: PUSH
41314: FOR_IN
41315: IFFALSE 41405
// if InArea ( x , y , j ) then
41317: LD_VAR 0 2
41321: PPUSH
41322: LD_VAR 0 3
41326: PPUSH
41327: LD_VAR 0 8
41331: PPUSH
41332: CALL_OW 309
41336: IFFALSE 41403
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41338: LD_ADDR_EXP 66
41342: PUSH
41343: LD_EXP 66
41347: PPUSH
41348: LD_VAR 0 7
41352: PUSH
41353: LD_EXP 66
41357: PUSH
41358: LD_VAR 0 7
41362: ARRAY
41363: PUSH
41364: LD_INT 1
41366: PLUS
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: LD_VAR 0 4
41376: PUSH
41377: LD_VAR 0 2
41381: PUSH
41382: LD_VAR 0 3
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: LIST
41391: PPUSH
41392: CALL 51164 0 3
41396: ST_TO_ADDR
// exit ;
41397: POP
41398: POP
41399: POP
41400: POP
41401: GO 41576
// end ;
41403: GO 41314
41405: POP
41406: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
41407: LD_ADDR_VAR 0 9
41411: PUSH
41412: LD_EXP 50
41416: PUSH
41417: LD_VAR 0 7
41421: ARRAY
41422: PPUSH
41423: LD_INT 2
41425: PUSH
41426: LD_INT 30
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 30
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: PPUSH
41451: CALL_OW 72
41455: ST_TO_ADDR
// if not depot then
41456: LD_VAR 0 9
41460: NOT
41461: IFFALSE 41465
// continue ;
41463: GO 41283
// for j in depot do
41465: LD_ADDR_VAR 0 8
41469: PUSH
41470: LD_VAR 0 9
41474: PUSH
41475: FOR_IN
41476: IFFALSE 41570
// if GetDistUnitXY ( j , x , y ) < 30 then
41478: LD_VAR 0 8
41482: PPUSH
41483: LD_VAR 0 2
41487: PPUSH
41488: LD_VAR 0 3
41492: PPUSH
41493: CALL_OW 297
41497: PUSH
41498: LD_INT 30
41500: LESS
41501: IFFALSE 41568
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
41503: LD_ADDR_EXP 66
41507: PUSH
41508: LD_EXP 66
41512: PPUSH
41513: LD_VAR 0 7
41517: PUSH
41518: LD_EXP 66
41522: PUSH
41523: LD_VAR 0 7
41527: ARRAY
41528: PUSH
41529: LD_INT 1
41531: PLUS
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PPUSH
41537: LD_VAR 0 4
41541: PUSH
41542: LD_VAR 0 2
41546: PUSH
41547: LD_VAR 0 3
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: LIST
41556: PPUSH
41557: CALL 51164 0 3
41561: ST_TO_ADDR
// exit ;
41562: POP
41563: POP
41564: POP
41565: POP
41566: GO 41576
// end ;
41568: GO 41475
41570: POP
41571: POP
// end ;
41572: GO 41283
41574: POP
41575: POP
// end ;
41576: LD_VAR 0 6
41580: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
41581: LD_INT 0
41583: PPUSH
41584: PPUSH
41585: PPUSH
41586: PPUSH
// if not mc_bases or not skirmish then
41587: LD_EXP 50
41591: NOT
41592: PUSH
41593: LD_EXP 48
41597: NOT
41598: OR
41599: IFFALSE 41603
// exit ;
41601: GO 41880
// side := GetSide ( lab ) ;
41603: LD_ADDR_VAR 0 4
41607: PUSH
41608: LD_VAR 0 2
41612: PPUSH
41613: CALL_OW 255
41617: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
41618: LD_VAR 0 4
41622: PUSH
41623: LD_EXP 76
41627: IN
41628: NOT
41629: PUSH
41630: LD_EXP 77
41634: NOT
41635: OR
41636: PUSH
41637: LD_EXP 50
41641: NOT
41642: OR
41643: IFFALSE 41647
// exit ;
41645: GO 41880
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
41647: LD_ADDR_EXP 77
41651: PUSH
41652: LD_EXP 77
41656: PPUSH
41657: LD_VAR 0 4
41661: PPUSH
41662: LD_EXP 77
41666: PUSH
41667: LD_VAR 0 4
41671: ARRAY
41672: PUSH
41673: LD_VAR 0 1
41677: DIFF
41678: PPUSH
41679: CALL_OW 1
41683: ST_TO_ADDR
// for i = 1 to mc_bases do
41684: LD_ADDR_VAR 0 5
41688: PUSH
41689: DOUBLE
41690: LD_INT 1
41692: DEC
41693: ST_TO_ADDR
41694: LD_EXP 50
41698: PUSH
41699: FOR_TO
41700: IFFALSE 41878
// begin if lab in mc_bases [ i ] then
41702: LD_VAR 0 2
41706: PUSH
41707: LD_EXP 50
41711: PUSH
41712: LD_VAR 0 5
41716: ARRAY
41717: IN
41718: IFFALSE 41876
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
41720: LD_VAR 0 1
41724: PUSH
41725: LD_INT 11
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: LD_INT 3
41733: PUSH
41734: LD_INT 2
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: IN
41743: PUSH
41744: LD_EXP 80
41748: PUSH
41749: LD_VAR 0 5
41753: ARRAY
41754: AND
41755: IFFALSE 41876
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
41757: LD_ADDR_VAR 0 6
41761: PUSH
41762: LD_EXP 80
41766: PUSH
41767: LD_VAR 0 5
41771: ARRAY
41772: PUSH
41773: LD_INT 1
41775: ARRAY
41776: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
41777: LD_ADDR_EXP 80
41781: PUSH
41782: LD_EXP 80
41786: PPUSH
41787: LD_VAR 0 5
41791: PPUSH
41792: EMPTY
41793: PPUSH
41794: CALL_OW 1
41798: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
41799: LD_VAR 0 6
41803: PPUSH
41804: LD_INT 0
41806: PPUSH
41807: CALL_OW 109
// ComExitBuilding ( tmp ) ;
41811: LD_VAR 0 6
41815: PPUSH
41816: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
41820: LD_ADDR_EXP 79
41824: PUSH
41825: LD_EXP 79
41829: PPUSH
41830: LD_VAR 0 5
41834: PPUSH
41835: LD_EXP 79
41839: PUSH
41840: LD_VAR 0 5
41844: ARRAY
41845: PPUSH
41846: LD_INT 1
41848: PPUSH
41849: LD_VAR 0 6
41853: PPUSH
41854: CALL_OW 2
41858: PPUSH
41859: CALL_OW 1
41863: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
41864: LD_VAR 0 5
41868: PPUSH
41869: LD_INT 112
41871: PPUSH
41872: CALL 19807 0 2
// end ; end ; end ;
41876: GO 41699
41878: POP
41879: POP
// end ;
41880: LD_VAR 0 3
41884: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
41885: LD_INT 0
41887: PPUSH
41888: PPUSH
41889: PPUSH
41890: PPUSH
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
// if not mc_bases or not skirmish then
41895: LD_EXP 50
41899: NOT
41900: PUSH
41901: LD_EXP 48
41905: NOT
41906: OR
41907: IFFALSE 41911
// exit ;
41909: GO 42854
// for i = 1 to mc_bases do
41911: LD_ADDR_VAR 0 3
41915: PUSH
41916: DOUBLE
41917: LD_INT 1
41919: DEC
41920: ST_TO_ADDR
41921: LD_EXP 50
41925: PUSH
41926: FOR_TO
41927: IFFALSE 42852
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
41929: LD_VAR 0 1
41933: PUSH
41934: LD_EXP 50
41938: PUSH
41939: LD_VAR 0 3
41943: ARRAY
41944: IN
41945: PUSH
41946: LD_VAR 0 1
41950: PUSH
41951: LD_EXP 57
41955: PUSH
41956: LD_VAR 0 3
41960: ARRAY
41961: IN
41962: OR
41963: PUSH
41964: LD_VAR 0 1
41968: PUSH
41969: LD_EXP 69
41973: PUSH
41974: LD_VAR 0 3
41978: ARRAY
41979: IN
41980: OR
41981: PUSH
41982: LD_VAR 0 1
41986: PUSH
41987: LD_EXP 79
41991: PUSH
41992: LD_VAR 0 3
41996: ARRAY
41997: IN
41998: OR
41999: PUSH
42000: LD_VAR 0 1
42004: PUSH
42005: LD_EXP 80
42009: PUSH
42010: LD_VAR 0 3
42014: ARRAY
42015: IN
42016: OR
42017: IFFALSE 42850
// begin if un in mc_ape [ i ] then
42019: LD_VAR 0 1
42023: PUSH
42024: LD_EXP 79
42028: PUSH
42029: LD_VAR 0 3
42033: ARRAY
42034: IN
42035: IFFALSE 42074
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
42037: LD_ADDR_EXP 79
42041: PUSH
42042: LD_EXP 79
42046: PPUSH
42047: LD_VAR 0 3
42051: PPUSH
42052: LD_EXP 79
42056: PUSH
42057: LD_VAR 0 3
42061: ARRAY
42062: PUSH
42063: LD_VAR 0 1
42067: DIFF
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
42074: LD_VAR 0 1
42078: PUSH
42079: LD_EXP 80
42083: PUSH
42084: LD_VAR 0 3
42088: ARRAY
42089: IN
42090: IFFALSE 42114
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
42092: LD_ADDR_EXP 80
42096: PUSH
42097: LD_EXP 80
42101: PPUSH
42102: LD_VAR 0 3
42106: PPUSH
42107: EMPTY
42108: PPUSH
42109: CALL_OW 1
42113: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 247
42123: PUSH
42124: LD_INT 2
42126: EQUAL
42127: PUSH
42128: LD_VAR 0 1
42132: PPUSH
42133: CALL_OW 110
42137: PUSH
42138: LD_INT 20
42140: EQUAL
42141: AND
42142: IFFALSE 42245
// begin fac := MC_GetBuilding ( i , b_factory ) ;
42144: LD_ADDR_VAR 0 8
42148: PUSH
42149: LD_VAR 0 3
42153: PPUSH
42154: LD_INT 3
42156: PPUSH
42157: CALL 39115 0 2
42161: ST_TO_ADDR
// if fac then
42162: LD_VAR 0 8
42166: IFFALSE 42245
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
42168: LD_ADDR_VAR 0 9
42172: PUSH
42173: LD_VAR 0 8
42177: PPUSH
42178: LD_VAR 0 1
42182: PPUSH
42183: CALL_OW 265
42187: PPUSH
42188: LD_VAR 0 1
42192: PPUSH
42193: CALL_OW 262
42197: PPUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 263
42207: PPUSH
42208: LD_VAR 0 1
42212: PPUSH
42213: CALL_OW 264
42217: PPUSH
42218: CALL 48764 0 5
42222: ST_TO_ADDR
// if components then
42223: LD_VAR 0 9
42227: IFFALSE 42243
// MC_InsertProduceList ( i , components ) ;
42229: LD_VAR 0 3
42233: PPUSH
42234: LD_VAR 0 9
42238: PPUSH
42239: CALL 38685 0 2
// break ;
42243: GO 42852
// end ; end ; if GetType ( un ) = unit_building then
42245: LD_VAR 0 1
42249: PPUSH
42250: CALL_OW 247
42254: PUSH
42255: LD_INT 3
42257: EQUAL
42258: IFFALSE 42573
// begin btype := GetBType ( un ) ;
42260: LD_ADDR_VAR 0 5
42264: PUSH
42265: LD_VAR 0 1
42269: PPUSH
42270: CALL_OW 266
42274: ST_TO_ADDR
// if btype = b_warehouse then
42275: LD_VAR 0 5
42279: PUSH
42280: LD_INT 1
42282: EQUAL
42283: IFFALSE 42301
// begin btype := b_depot ;
42285: LD_ADDR_VAR 0 5
42289: PUSH
42290: LD_INT 0
42292: ST_TO_ADDR
// pos := 1 ;
42293: LD_ADDR_VAR 0 6
42297: PUSH
42298: LD_INT 1
42300: ST_TO_ADDR
// end ; if btype = b_factory then
42301: LD_VAR 0 5
42305: PUSH
42306: LD_INT 3
42308: EQUAL
42309: IFFALSE 42327
// begin btype := b_workshop ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_INT 2
42318: ST_TO_ADDR
// pos := 1 ;
42319: LD_ADDR_VAR 0 6
42323: PUSH
42324: LD_INT 1
42326: ST_TO_ADDR
// end ; if btype = b_barracks then
42327: LD_VAR 0 5
42331: PUSH
42332: LD_INT 5
42334: EQUAL
42335: IFFALSE 42345
// btype := b_armoury ;
42337: LD_ADDR_VAR 0 5
42341: PUSH
42342: LD_INT 4
42344: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
42345: LD_VAR 0 5
42349: PUSH
42350: LD_INT 7
42352: PUSH
42353: LD_INT 8
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: IN
42360: IFFALSE 42370
// btype := b_lab ;
42362: LD_ADDR_VAR 0 5
42366: PUSH
42367: LD_INT 6
42369: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
42370: LD_ADDR_EXP 55
42374: PUSH
42375: LD_EXP 55
42379: PPUSH
42380: LD_VAR 0 3
42384: PUSH
42385: LD_EXP 55
42389: PUSH
42390: LD_VAR 0 3
42394: ARRAY
42395: PUSH
42396: LD_INT 1
42398: PLUS
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PPUSH
42404: LD_VAR 0 5
42408: PUSH
42409: LD_VAR 0 1
42413: PPUSH
42414: CALL_OW 250
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: CALL_OW 251
42428: PUSH
42429: LD_VAR 0 1
42433: PPUSH
42434: CALL_OW 254
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: PPUSH
42445: CALL 51164 0 3
42449: ST_TO_ADDR
// if pos = 1 then
42450: LD_VAR 0 6
42454: PUSH
42455: LD_INT 1
42457: EQUAL
42458: IFFALSE 42573
// begin tmp := mc_build_list [ i ] ;
42460: LD_ADDR_VAR 0 7
42464: PUSH
42465: LD_EXP 55
42469: PUSH
42470: LD_VAR 0 3
42474: ARRAY
42475: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
42476: LD_VAR 0 7
42480: PPUSH
42481: LD_INT 2
42483: PUSH
42484: LD_INT 30
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 30
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: PPUSH
42509: CALL_OW 72
42513: IFFALSE 42523
// pos := 2 ;
42515: LD_ADDR_VAR 0 6
42519: PUSH
42520: LD_INT 2
42522: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
42523: LD_ADDR_VAR 0 7
42527: PUSH
42528: LD_VAR 0 7
42532: PPUSH
42533: LD_VAR 0 6
42537: PPUSH
42538: LD_VAR 0 7
42542: PPUSH
42543: CALL 51490 0 3
42547: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
42548: LD_ADDR_EXP 55
42552: PUSH
42553: LD_EXP 55
42557: PPUSH
42558: LD_VAR 0 3
42562: PPUSH
42563: LD_VAR 0 7
42567: PPUSH
42568: CALL_OW 1
42572: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
42573: LD_VAR 0 1
42577: PUSH
42578: LD_EXP 50
42582: PUSH
42583: LD_VAR 0 3
42587: ARRAY
42588: IN
42589: IFFALSE 42628
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
42591: LD_ADDR_EXP 50
42595: PUSH
42596: LD_EXP 50
42600: PPUSH
42601: LD_VAR 0 3
42605: PPUSH
42606: LD_EXP 50
42610: PUSH
42611: LD_VAR 0 3
42615: ARRAY
42616: PUSH
42617: LD_VAR 0 1
42621: DIFF
42622: PPUSH
42623: CALL_OW 1
42627: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
42628: LD_VAR 0 1
42632: PUSH
42633: LD_EXP 57
42637: PUSH
42638: LD_VAR 0 3
42642: ARRAY
42643: IN
42644: IFFALSE 42683
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
42646: LD_ADDR_EXP 57
42650: PUSH
42651: LD_EXP 57
42655: PPUSH
42656: LD_VAR 0 3
42660: PPUSH
42661: LD_EXP 57
42665: PUSH
42666: LD_VAR 0 3
42670: ARRAY
42671: PUSH
42672: LD_VAR 0 1
42676: DIFF
42677: PPUSH
42678: CALL_OW 1
42682: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
42683: LD_VAR 0 1
42687: PUSH
42688: LD_EXP 69
42692: PUSH
42693: LD_VAR 0 3
42697: ARRAY
42698: IN
42699: IFFALSE 42738
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
42701: LD_ADDR_EXP 69
42705: PUSH
42706: LD_EXP 69
42710: PPUSH
42711: LD_VAR 0 3
42715: PPUSH
42716: LD_EXP 69
42720: PUSH
42721: LD_VAR 0 3
42725: ARRAY
42726: PUSH
42727: LD_VAR 0 1
42731: DIFF
42732: PPUSH
42733: CALL_OW 1
42737: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
42738: LD_VAR 0 1
42742: PUSH
42743: LD_EXP 59
42747: PUSH
42748: LD_VAR 0 3
42752: ARRAY
42753: IN
42754: IFFALSE 42793
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
42756: LD_ADDR_EXP 59
42760: PUSH
42761: LD_EXP 59
42765: PPUSH
42766: LD_VAR 0 3
42770: PPUSH
42771: LD_EXP 59
42775: PUSH
42776: LD_VAR 0 3
42780: ARRAY
42781: PUSH
42782: LD_VAR 0 1
42786: DIFF
42787: PPUSH
42788: CALL_OW 1
42792: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
42793: LD_VAR 0 1
42797: PUSH
42798: LD_EXP 58
42802: PUSH
42803: LD_VAR 0 3
42807: ARRAY
42808: IN
42809: IFFALSE 42848
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
42811: LD_ADDR_EXP 58
42815: PUSH
42816: LD_EXP 58
42820: PPUSH
42821: LD_VAR 0 3
42825: PPUSH
42826: LD_EXP 58
42830: PUSH
42831: LD_VAR 0 3
42835: ARRAY
42836: PUSH
42837: LD_VAR 0 1
42841: DIFF
42842: PPUSH
42843: CALL_OW 1
42847: ST_TO_ADDR
// end ; break ;
42848: GO 42852
// end ;
42850: GO 41926
42852: POP
42853: POP
// end ;
42854: LD_VAR 0 2
42858: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
42859: LD_INT 0
42861: PPUSH
42862: PPUSH
42863: PPUSH
// if not mc_bases or not skirmish then
42864: LD_EXP 50
42868: NOT
42869: PUSH
42870: LD_EXP 48
42874: NOT
42875: OR
42876: IFFALSE 42880
// exit ;
42878: GO 43095
// for i = 1 to mc_bases do
42880: LD_ADDR_VAR 0 3
42884: PUSH
42885: DOUBLE
42886: LD_INT 1
42888: DEC
42889: ST_TO_ADDR
42890: LD_EXP 50
42894: PUSH
42895: FOR_TO
42896: IFFALSE 43093
// begin if building in mc_construct_list [ i ] then
42898: LD_VAR 0 1
42902: PUSH
42903: LD_EXP 57
42907: PUSH
42908: LD_VAR 0 3
42912: ARRAY
42913: IN
42914: IFFALSE 43091
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
42916: LD_ADDR_EXP 57
42920: PUSH
42921: LD_EXP 57
42925: PPUSH
42926: LD_VAR 0 3
42930: PPUSH
42931: LD_EXP 57
42935: PUSH
42936: LD_VAR 0 3
42940: ARRAY
42941: PUSH
42942: LD_VAR 0 1
42946: DIFF
42947: PPUSH
42948: CALL_OW 1
42952: ST_TO_ADDR
// if building in mc_lab [ i ] then
42953: LD_VAR 0 1
42957: PUSH
42958: LD_EXP 83
42962: PUSH
42963: LD_VAR 0 3
42967: ARRAY
42968: IN
42969: IFFALSE 43024
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
42971: LD_ADDR_EXP 84
42975: PUSH
42976: LD_EXP 84
42980: PPUSH
42981: LD_VAR 0 3
42985: PPUSH
42986: LD_EXP 84
42990: PUSH
42991: LD_VAR 0 3
42995: ARRAY
42996: PPUSH
42997: LD_INT 1
42999: PPUSH
43000: LD_EXP 84
43004: PUSH
43005: LD_VAR 0 3
43009: ARRAY
43010: PPUSH
43011: LD_INT 0
43013: PPUSH
43014: CALL 50582 0 4
43018: PPUSH
43019: CALL_OW 1
43023: ST_TO_ADDR
// if not building in mc_bases [ i ] then
43024: LD_VAR 0 1
43028: PUSH
43029: LD_EXP 50
43033: PUSH
43034: LD_VAR 0 3
43038: ARRAY
43039: IN
43040: NOT
43041: IFFALSE 43087
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43043: LD_ADDR_EXP 50
43047: PUSH
43048: LD_EXP 50
43052: PPUSH
43053: LD_VAR 0 3
43057: PUSH
43058: LD_EXP 50
43062: PUSH
43063: LD_VAR 0 3
43067: ARRAY
43068: PUSH
43069: LD_INT 1
43071: PLUS
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PPUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL 51164 0 3
43086: ST_TO_ADDR
// exit ;
43087: POP
43088: POP
43089: GO 43095
// end ; end ;
43091: GO 42895
43093: POP
43094: POP
// end ;
43095: LD_VAR 0 2
43099: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
43100: LD_INT 0
43102: PPUSH
43103: PPUSH
43104: PPUSH
43105: PPUSH
43106: PPUSH
43107: PPUSH
43108: PPUSH
// if not mc_bases or not skirmish then
43109: LD_EXP 50
43113: NOT
43114: PUSH
43115: LD_EXP 48
43119: NOT
43120: OR
43121: IFFALSE 43125
// exit ;
43123: GO 43786
// for i = 1 to mc_bases do
43125: LD_ADDR_VAR 0 3
43129: PUSH
43130: DOUBLE
43131: LD_INT 1
43133: DEC
43134: ST_TO_ADDR
43135: LD_EXP 50
43139: PUSH
43140: FOR_TO
43141: IFFALSE 43784
// begin if building in mc_construct_list [ i ] then
43143: LD_VAR 0 1
43147: PUSH
43148: LD_EXP 57
43152: PUSH
43153: LD_VAR 0 3
43157: ARRAY
43158: IN
43159: IFFALSE 43782
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
43161: LD_ADDR_EXP 57
43165: PUSH
43166: LD_EXP 57
43170: PPUSH
43171: LD_VAR 0 3
43175: PPUSH
43176: LD_EXP 57
43180: PUSH
43181: LD_VAR 0 3
43185: ARRAY
43186: PUSH
43187: LD_VAR 0 1
43191: DIFF
43192: PPUSH
43193: CALL_OW 1
43197: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
43198: LD_ADDR_EXP 50
43202: PUSH
43203: LD_EXP 50
43207: PPUSH
43208: LD_VAR 0 3
43212: PUSH
43213: LD_EXP 50
43217: PUSH
43218: LD_VAR 0 3
43222: ARRAY
43223: PUSH
43224: LD_INT 1
43226: PLUS
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PPUSH
43232: LD_VAR 0 1
43236: PPUSH
43237: CALL 51164 0 3
43241: ST_TO_ADDR
// btype := GetBType ( building ) ;
43242: LD_ADDR_VAR 0 5
43246: PUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: CALL_OW 266
43256: ST_TO_ADDR
// side := GetSide ( building ) ;
43257: LD_ADDR_VAR 0 8
43261: PUSH
43262: LD_VAR 0 1
43266: PPUSH
43267: CALL_OW 255
43271: ST_TO_ADDR
// if btype = b_lab then
43272: LD_VAR 0 5
43276: PUSH
43277: LD_INT 6
43279: EQUAL
43280: IFFALSE 43330
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
43282: LD_ADDR_EXP 83
43286: PUSH
43287: LD_EXP 83
43291: PPUSH
43292: LD_VAR 0 3
43296: PUSH
43297: LD_EXP 83
43301: PUSH
43302: LD_VAR 0 3
43306: ARRAY
43307: PUSH
43308: LD_INT 1
43310: PLUS
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PPUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL 51164 0 3
43325: ST_TO_ADDR
// exit ;
43326: POP
43327: POP
43328: GO 43786
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
43330: LD_VAR 0 5
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 4
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: IN
43349: IFFALSE 43473
// begin if btype = b_armoury then
43351: LD_VAR 0 5
43355: PUSH
43356: LD_INT 4
43358: EQUAL
43359: IFFALSE 43369
// btype := b_barracks ;
43361: LD_ADDR_VAR 0 5
43365: PUSH
43366: LD_INT 5
43368: ST_TO_ADDR
// if btype = b_depot then
43369: LD_VAR 0 5
43373: PUSH
43374: LD_INT 0
43376: EQUAL
43377: IFFALSE 43387
// btype := b_warehouse ;
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: LD_INT 1
43386: ST_TO_ADDR
// if btype = b_workshop then
43387: LD_VAR 0 5
43391: PUSH
43392: LD_INT 2
43394: EQUAL
43395: IFFALSE 43405
// btype := b_factory ;
43397: LD_ADDR_VAR 0 5
43401: PUSH
43402: LD_INT 3
43404: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
43405: LD_VAR 0 5
43409: PPUSH
43410: LD_VAR 0 8
43414: PPUSH
43415: CALL_OW 323
43419: PUSH
43420: LD_INT 1
43422: EQUAL
43423: IFFALSE 43469
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
43425: LD_ADDR_EXP 82
43429: PUSH
43430: LD_EXP 82
43434: PPUSH
43435: LD_VAR 0 3
43439: PUSH
43440: LD_EXP 82
43444: PUSH
43445: LD_VAR 0 3
43449: ARRAY
43450: PUSH
43451: LD_INT 1
43453: PLUS
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PPUSH
43459: LD_VAR 0 1
43463: PPUSH
43464: CALL 51164 0 3
43468: ST_TO_ADDR
// exit ;
43469: POP
43470: POP
43471: GO 43786
// end ; if btype in [ b_bunker , b_turret ] then
43473: LD_VAR 0 5
43477: PUSH
43478: LD_INT 32
43480: PUSH
43481: LD_INT 33
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: IN
43488: IFFALSE 43778
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
43490: LD_ADDR_EXP 58
43494: PUSH
43495: LD_EXP 58
43499: PPUSH
43500: LD_VAR 0 3
43504: PUSH
43505: LD_EXP 58
43509: PUSH
43510: LD_VAR 0 3
43514: ARRAY
43515: PUSH
43516: LD_INT 1
43518: PLUS
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PPUSH
43524: LD_VAR 0 1
43528: PPUSH
43529: CALL 51164 0 3
43533: ST_TO_ADDR
// if btype = b_bunker then
43534: LD_VAR 0 5
43538: PUSH
43539: LD_INT 32
43541: EQUAL
43542: IFFALSE 43778
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
43544: LD_ADDR_EXP 59
43548: PUSH
43549: LD_EXP 59
43553: PPUSH
43554: LD_VAR 0 3
43558: PUSH
43559: LD_EXP 59
43563: PUSH
43564: LD_VAR 0 3
43568: ARRAY
43569: PUSH
43570: LD_INT 1
43572: PLUS
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PPUSH
43578: LD_VAR 0 1
43582: PPUSH
43583: CALL 51164 0 3
43587: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
43588: LD_ADDR_VAR 0 6
43592: PUSH
43593: LD_EXP 50
43597: PUSH
43598: LD_VAR 0 3
43602: ARRAY
43603: PPUSH
43604: LD_INT 25
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 3
43616: PUSH
43617: LD_INT 54
43619: PUSH
43620: EMPTY
43621: LIST
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PPUSH
43631: CALL_OW 72
43635: ST_TO_ADDR
// if tmp then
43636: LD_VAR 0 6
43640: IFFALSE 43646
// exit ;
43642: POP
43643: POP
43644: GO 43786
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
43646: LD_ADDR_VAR 0 6
43650: PUSH
43651: LD_EXP 50
43655: PUSH
43656: LD_VAR 0 3
43660: ARRAY
43661: PPUSH
43662: LD_INT 2
43664: PUSH
43665: LD_INT 30
43667: PUSH
43668: LD_INT 4
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 30
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: PPUSH
43690: CALL_OW 72
43694: ST_TO_ADDR
// if not tmp then
43695: LD_VAR 0 6
43699: NOT
43700: IFFALSE 43706
// exit ;
43702: POP
43703: POP
43704: GO 43786
// for j in tmp do
43706: LD_ADDR_VAR 0 4
43710: PUSH
43711: LD_VAR 0 6
43715: PUSH
43716: FOR_IN
43717: IFFALSE 43776
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
43719: LD_ADDR_VAR 0 7
43723: PUSH
43724: LD_VAR 0 4
43728: PPUSH
43729: CALL_OW 313
43733: PPUSH
43734: LD_INT 25
43736: PUSH
43737: LD_INT 1
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PPUSH
43744: CALL_OW 72
43748: ST_TO_ADDR
// if units then
43749: LD_VAR 0 7
43753: IFFALSE 43774
// begin ComExitBuilding ( units [ 1 ] ) ;
43755: LD_VAR 0 7
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PPUSH
43764: CALL_OW 122
// exit ;
43768: POP
43769: POP
43770: POP
43771: POP
43772: GO 43786
// end ; end ;
43774: GO 43716
43776: POP
43777: POP
// end ; end ; exit ;
43778: POP
43779: POP
43780: GO 43786
// end ; end ;
43782: GO 43140
43784: POP
43785: POP
// end ;
43786: LD_VAR 0 2
43790: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
43791: LD_INT 0
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
// if not mc_bases or not skirmish then
43800: LD_EXP 50
43804: NOT
43805: PUSH
43806: LD_EXP 48
43810: NOT
43811: OR
43812: IFFALSE 43816
// exit ;
43814: GO 44047
// btype := GetBType ( building ) ;
43816: LD_ADDR_VAR 0 6
43820: PUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: CALL_OW 266
43830: ST_TO_ADDR
// x := GetX ( building ) ;
43831: LD_ADDR_VAR 0 7
43835: PUSH
43836: LD_VAR 0 1
43840: PPUSH
43841: CALL_OW 250
43845: ST_TO_ADDR
// y := GetY ( building ) ;
43846: LD_ADDR_VAR 0 8
43850: PUSH
43851: LD_VAR 0 1
43855: PPUSH
43856: CALL_OW 251
43860: ST_TO_ADDR
// d := GetDir ( building ) ;
43861: LD_ADDR_VAR 0 9
43865: PUSH
43866: LD_VAR 0 1
43870: PPUSH
43871: CALL_OW 254
43875: ST_TO_ADDR
// for i = 1 to mc_bases do
43876: LD_ADDR_VAR 0 4
43880: PUSH
43881: DOUBLE
43882: LD_INT 1
43884: DEC
43885: ST_TO_ADDR
43886: LD_EXP 50
43890: PUSH
43891: FOR_TO
43892: IFFALSE 44045
// begin if not mc_build_list [ i ] then
43894: LD_EXP 55
43898: PUSH
43899: LD_VAR 0 4
43903: ARRAY
43904: NOT
43905: IFFALSE 43909
// continue ;
43907: GO 43891
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
43909: LD_VAR 0 6
43913: PUSH
43914: LD_VAR 0 7
43918: PUSH
43919: LD_VAR 0 8
43923: PUSH
43924: LD_VAR 0 9
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: PPUSH
43935: LD_EXP 55
43939: PUSH
43940: LD_VAR 0 4
43944: ARRAY
43945: PUSH
43946: LD_INT 1
43948: ARRAY
43949: PPUSH
43950: CALL 57333 0 2
43954: IFFALSE 44043
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
43956: LD_ADDR_EXP 55
43960: PUSH
43961: LD_EXP 55
43965: PPUSH
43966: LD_VAR 0 4
43970: PPUSH
43971: LD_EXP 55
43975: PUSH
43976: LD_VAR 0 4
43980: ARRAY
43981: PPUSH
43982: LD_INT 1
43984: PPUSH
43985: CALL_OW 3
43989: PPUSH
43990: CALL_OW 1
43994: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
43995: LD_ADDR_EXP 57
43999: PUSH
44000: LD_EXP 57
44004: PPUSH
44005: LD_VAR 0 4
44009: PUSH
44010: LD_EXP 57
44014: PUSH
44015: LD_VAR 0 4
44019: ARRAY
44020: PUSH
44021: LD_INT 1
44023: PLUS
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PPUSH
44029: LD_VAR 0 1
44033: PPUSH
44034: CALL 51164 0 3
44038: ST_TO_ADDR
// exit ;
44039: POP
44040: POP
44041: GO 44047
// end ; end ;
44043: GO 43891
44045: POP
44046: POP
// end ;
44047: LD_VAR 0 3
44051: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
44052: LD_INT 0
44054: PPUSH
44055: PPUSH
44056: PPUSH
// if not mc_bases or not skirmish then
44057: LD_EXP 50
44061: NOT
44062: PUSH
44063: LD_EXP 48
44067: NOT
44068: OR
44069: IFFALSE 44073
// exit ;
44071: GO 44263
// for i = 1 to mc_bases do
44073: LD_ADDR_VAR 0 4
44077: PUSH
44078: DOUBLE
44079: LD_INT 1
44081: DEC
44082: ST_TO_ADDR
44083: LD_EXP 50
44087: PUSH
44088: FOR_TO
44089: IFFALSE 44176
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
44091: LD_VAR 0 1
44095: PUSH
44096: LD_EXP 58
44100: PUSH
44101: LD_VAR 0 4
44105: ARRAY
44106: IN
44107: PUSH
44108: LD_VAR 0 1
44112: PUSH
44113: LD_EXP 59
44117: PUSH
44118: LD_VAR 0 4
44122: ARRAY
44123: IN
44124: NOT
44125: AND
44126: IFFALSE 44174
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
44128: LD_ADDR_EXP 59
44132: PUSH
44133: LD_EXP 59
44137: PPUSH
44138: LD_VAR 0 4
44142: PUSH
44143: LD_EXP 59
44147: PUSH
44148: LD_VAR 0 4
44152: ARRAY
44153: PUSH
44154: LD_INT 1
44156: PLUS
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PPUSH
44162: LD_VAR 0 1
44166: PPUSH
44167: CALL 51164 0 3
44171: ST_TO_ADDR
// break ;
44172: GO 44176
// end ; end ;
44174: GO 44088
44176: POP
44177: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
44178: LD_VAR 0 1
44182: PPUSH
44183: CALL_OW 257
44187: PUSH
44188: LD_EXP 76
44192: IN
44193: PUSH
44194: LD_VAR 0 1
44198: PPUSH
44199: CALL_OW 266
44203: PUSH
44204: LD_INT 5
44206: EQUAL
44207: AND
44208: PUSH
44209: LD_VAR 0 2
44213: PPUSH
44214: CALL_OW 110
44218: PUSH
44219: LD_INT 18
44221: NONEQUAL
44222: AND
44223: IFFALSE 44263
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
44225: LD_VAR 0 2
44229: PPUSH
44230: CALL_OW 257
44234: PUSH
44235: LD_INT 5
44237: PUSH
44238: LD_INT 8
44240: PUSH
44241: LD_INT 9
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: LIST
44248: IN
44249: IFFALSE 44263
// SetClass ( unit , 1 ) ;
44251: LD_VAR 0 2
44255: PPUSH
44256: LD_INT 1
44258: PPUSH
44259: CALL_OW 336
// end ;
44263: LD_VAR 0 3
44267: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
44268: LD_INT 0
44270: PPUSH
44271: PPUSH
// if not mc_bases or not skirmish then
44272: LD_EXP 50
44276: NOT
44277: PUSH
44278: LD_EXP 48
44282: NOT
44283: OR
44284: IFFALSE 44288
// exit ;
44286: GO 44404
// if GetLives ( abandoned_vehicle ) > 250 then
44288: LD_VAR 0 2
44292: PPUSH
44293: CALL_OW 256
44297: PUSH
44298: LD_INT 250
44300: GREATER
44301: IFFALSE 44305
// exit ;
44303: GO 44404
// for i = 1 to mc_bases do
44305: LD_ADDR_VAR 0 6
44309: PUSH
44310: DOUBLE
44311: LD_INT 1
44313: DEC
44314: ST_TO_ADDR
44315: LD_EXP 50
44319: PUSH
44320: FOR_TO
44321: IFFALSE 44402
// begin if driver in mc_bases [ i ] then
44323: LD_VAR 0 1
44327: PUSH
44328: LD_EXP 50
44332: PUSH
44333: LD_VAR 0 6
44337: ARRAY
44338: IN
44339: IFFALSE 44400
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
44341: LD_VAR 0 1
44345: PPUSH
44346: LD_EXP 50
44350: PUSH
44351: LD_VAR 0 6
44355: ARRAY
44356: PPUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 30
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 30
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: PPUSH
44385: CALL_OW 72
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: PPUSH
44394: CALL_OW 112
// break ;
44398: GO 44402
// end ; end ;
44400: GO 44320
44402: POP
44403: POP
// end ; end_of_file
44404: LD_VAR 0 5
44408: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
44409: LD_INT 0
44411: PPUSH
44412: PPUSH
// if exist_mode then
44413: LD_VAR 0 2
44417: IFFALSE 44442
// unit := CreateCharacter ( prefix & ident ) else
44419: LD_ADDR_VAR 0 5
44423: PUSH
44424: LD_VAR 0 3
44428: PUSH
44429: LD_VAR 0 1
44433: STR
44434: PPUSH
44435: CALL_OW 34
44439: ST_TO_ADDR
44440: GO 44457
// unit := NewCharacter ( ident ) ;
44442: LD_ADDR_VAR 0 5
44446: PUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 25
44456: ST_TO_ADDR
// result := unit ;
44457: LD_ADDR_VAR 0 4
44461: PUSH
44462: LD_VAR 0 5
44466: ST_TO_ADDR
// end ;
44467: LD_VAR 0 4
44471: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
44472: LD_INT 0
44474: PPUSH
44475: PPUSH
// if not side or not nation then
44476: LD_VAR 0 1
44480: NOT
44481: PUSH
44482: LD_VAR 0 2
44486: NOT
44487: OR
44488: IFFALSE 44492
// exit ;
44490: GO 45128
// case nation of nation_american :
44492: LD_VAR 0 2
44496: PUSH
44497: LD_INT 1
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44675
44505: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
44506: LD_ADDR_VAR 0 4
44510: PUSH
44511: LD_INT 35
44513: PUSH
44514: LD_INT 45
44516: PUSH
44517: LD_INT 46
44519: PUSH
44520: LD_INT 47
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: LD_INT 6
44531: PUSH
44532: LD_INT 15
44534: PUSH
44535: LD_INT 16
44537: PUSH
44538: LD_INT 7
44540: PUSH
44541: LD_INT 12
44543: PUSH
44544: LD_INT 13
44546: PUSH
44547: LD_INT 10
44549: PUSH
44550: LD_INT 14
44552: PUSH
44553: LD_INT 20
44555: PUSH
44556: LD_INT 21
44558: PUSH
44559: LD_INT 22
44561: PUSH
44562: LD_INT 25
44564: PUSH
44565: LD_INT 32
44567: PUSH
44568: LD_INT 27
44570: PUSH
44571: LD_INT 36
44573: PUSH
44574: LD_INT 69
44576: PUSH
44577: LD_INT 39
44579: PUSH
44580: LD_INT 34
44582: PUSH
44583: LD_INT 40
44585: PUSH
44586: LD_INT 48
44588: PUSH
44589: LD_INT 49
44591: PUSH
44592: LD_INT 50
44594: PUSH
44595: LD_INT 51
44597: PUSH
44598: LD_INT 52
44600: PUSH
44601: LD_INT 53
44603: PUSH
44604: LD_INT 54
44606: PUSH
44607: LD_INT 55
44609: PUSH
44610: LD_INT 56
44612: PUSH
44613: LD_INT 57
44615: PUSH
44616: LD_INT 58
44618: PUSH
44619: LD_INT 59
44621: PUSH
44622: LD_INT 60
44624: PUSH
44625: LD_INT 61
44627: PUSH
44628: LD_INT 62
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: ST_TO_ADDR
44673: GO 45052
44675: LD_INT 2
44677: DOUBLE
44678: EQUAL
44679: IFTRUE 44683
44681: GO 44861
44683: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
44684: LD_ADDR_VAR 0 4
44688: PUSH
44689: LD_INT 35
44691: PUSH
44692: LD_INT 45
44694: PUSH
44695: LD_INT 46
44697: PUSH
44698: LD_INT 47
44700: PUSH
44701: LD_INT 70
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 11
44709: PUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 4
44715: PUSH
44716: LD_INT 5
44718: PUSH
44719: LD_INT 6
44721: PUSH
44722: LD_INT 15
44724: PUSH
44725: LD_INT 18
44727: PUSH
44728: LD_INT 7
44730: PUSH
44731: LD_INT 17
44733: PUSH
44734: LD_INT 8
44736: PUSH
44737: LD_INT 20
44739: PUSH
44740: LD_INT 21
44742: PUSH
44743: LD_INT 22
44745: PUSH
44746: LD_INT 72
44748: PUSH
44749: LD_INT 26
44751: PUSH
44752: LD_INT 69
44754: PUSH
44755: LD_INT 39
44757: PUSH
44758: LD_INT 40
44760: PUSH
44761: LD_INT 41
44763: PUSH
44764: LD_INT 42
44766: PUSH
44767: LD_INT 43
44769: PUSH
44770: LD_INT 48
44772: PUSH
44773: LD_INT 49
44775: PUSH
44776: LD_INT 50
44778: PUSH
44779: LD_INT 51
44781: PUSH
44782: LD_INT 52
44784: PUSH
44785: LD_INT 53
44787: PUSH
44788: LD_INT 54
44790: PUSH
44791: LD_INT 55
44793: PUSH
44794: LD_INT 56
44796: PUSH
44797: LD_INT 60
44799: PUSH
44800: LD_INT 61
44802: PUSH
44803: LD_INT 62
44805: PUSH
44806: LD_INT 66
44808: PUSH
44809: LD_INT 67
44811: PUSH
44812: LD_INT 68
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: ST_TO_ADDR
44859: GO 45052
44861: LD_INT 3
44863: DOUBLE
44864: EQUAL
44865: IFTRUE 44869
44867: GO 45051
44869: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
44870: LD_ADDR_VAR 0 4
44874: PUSH
44875: LD_INT 46
44877: PUSH
44878: LD_INT 47
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 11
44889: PUSH
44890: LD_INT 9
44892: PUSH
44893: LD_INT 20
44895: PUSH
44896: LD_INT 19
44898: PUSH
44899: LD_INT 21
44901: PUSH
44902: LD_INT 24
44904: PUSH
44905: LD_INT 22
44907: PUSH
44908: LD_INT 25
44910: PUSH
44911: LD_INT 28
44913: PUSH
44914: LD_INT 29
44916: PUSH
44917: LD_INT 30
44919: PUSH
44920: LD_INT 31
44922: PUSH
44923: LD_INT 37
44925: PUSH
44926: LD_INT 38
44928: PUSH
44929: LD_INT 32
44931: PUSH
44932: LD_INT 27
44934: PUSH
44935: LD_INT 33
44937: PUSH
44938: LD_INT 69
44940: PUSH
44941: LD_INT 39
44943: PUSH
44944: LD_INT 34
44946: PUSH
44947: LD_INT 40
44949: PUSH
44950: LD_INT 71
44952: PUSH
44953: LD_INT 23
44955: PUSH
44956: LD_INT 44
44958: PUSH
44959: LD_INT 48
44961: PUSH
44962: LD_INT 49
44964: PUSH
44965: LD_INT 50
44967: PUSH
44968: LD_INT 51
44970: PUSH
44971: LD_INT 52
44973: PUSH
44974: LD_INT 53
44976: PUSH
44977: LD_INT 54
44979: PUSH
44980: LD_INT 55
44982: PUSH
44983: LD_INT 56
44985: PUSH
44986: LD_INT 57
44988: PUSH
44989: LD_INT 58
44991: PUSH
44992: LD_INT 59
44994: PUSH
44995: LD_INT 63
44997: PUSH
44998: LD_INT 64
45000: PUSH
45001: LD_INT 65
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: LIST
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: ST_TO_ADDR
45049: GO 45052
45051: POP
// if state > - 1 and state < 3 then
45052: LD_VAR 0 3
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: GREATER
45061: PUSH
45062: LD_VAR 0 3
45066: PUSH
45067: LD_INT 3
45069: LESS
45070: AND
45071: IFFALSE 45128
// for i in result do
45073: LD_ADDR_VAR 0 5
45077: PUSH
45078: LD_VAR 0 4
45082: PUSH
45083: FOR_IN
45084: IFFALSE 45126
// if GetTech ( i , side ) <> state then
45086: LD_VAR 0 5
45090: PPUSH
45091: LD_VAR 0 1
45095: PPUSH
45096: CALL_OW 321
45100: PUSH
45101: LD_VAR 0 3
45105: NONEQUAL
45106: IFFALSE 45124
// result := result diff i ;
45108: LD_ADDR_VAR 0 4
45112: PUSH
45113: LD_VAR 0 4
45117: PUSH
45118: LD_VAR 0 5
45122: DIFF
45123: ST_TO_ADDR
45124: GO 45083
45126: POP
45127: POP
// end ;
45128: LD_VAR 0 4
45132: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
45133: LD_INT 0
45135: PPUSH
45136: PPUSH
45137: PPUSH
// result := true ;
45138: LD_ADDR_VAR 0 3
45142: PUSH
45143: LD_INT 1
45145: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
45146: LD_ADDR_VAR 0 5
45150: PUSH
45151: LD_VAR 0 2
45155: PPUSH
45156: CALL_OW 480
45160: ST_TO_ADDR
// if not tmp then
45161: LD_VAR 0 5
45165: NOT
45166: IFFALSE 45170
// exit ;
45168: GO 45219
// for i in tmp do
45170: LD_ADDR_VAR 0 4
45174: PUSH
45175: LD_VAR 0 5
45179: PUSH
45180: FOR_IN
45181: IFFALSE 45217
// if GetTech ( i , side ) <> state_researched then
45183: LD_VAR 0 4
45187: PPUSH
45188: LD_VAR 0 1
45192: PPUSH
45193: CALL_OW 321
45197: PUSH
45198: LD_INT 2
45200: NONEQUAL
45201: IFFALSE 45215
// begin result := false ;
45203: LD_ADDR_VAR 0 3
45207: PUSH
45208: LD_INT 0
45210: ST_TO_ADDR
// exit ;
45211: POP
45212: POP
45213: GO 45219
// end ;
45215: GO 45180
45217: POP
45218: POP
// end ;
45219: LD_VAR 0 3
45223: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
45224: LD_INT 0
45226: PPUSH
45227: PPUSH
45228: PPUSH
45229: PPUSH
45230: PPUSH
45231: PPUSH
45232: PPUSH
45233: PPUSH
45234: PPUSH
45235: PPUSH
45236: PPUSH
45237: PPUSH
45238: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
45239: LD_VAR 0 1
45243: NOT
45244: PUSH
45245: LD_VAR 0 1
45249: PPUSH
45250: CALL_OW 257
45254: PUSH
45255: LD_INT 9
45257: NONEQUAL
45258: OR
45259: IFFALSE 45263
// exit ;
45261: GO 45836
// side := GetSide ( unit ) ;
45263: LD_ADDR_VAR 0 9
45267: PUSH
45268: LD_VAR 0 1
45272: PPUSH
45273: CALL_OW 255
45277: ST_TO_ADDR
// tech_space := tech_spacanom ;
45278: LD_ADDR_VAR 0 12
45282: PUSH
45283: LD_INT 29
45285: ST_TO_ADDR
// tech_time := tech_taurad ;
45286: LD_ADDR_VAR 0 13
45290: PUSH
45291: LD_INT 28
45293: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
45294: LD_ADDR_VAR 0 11
45298: PUSH
45299: LD_VAR 0 1
45303: PPUSH
45304: CALL_OW 310
45308: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
45309: LD_VAR 0 11
45313: PPUSH
45314: CALL_OW 247
45318: PUSH
45319: LD_INT 2
45321: EQUAL
45322: IFFALSE 45326
// exit ;
45324: GO 45836
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45326: LD_ADDR_VAR 0 8
45330: PUSH
45331: LD_INT 81
45333: PUSH
45334: LD_VAR 0 9
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: LD_INT 21
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PPUSH
45364: CALL_OW 69
45368: ST_TO_ADDR
// if not tmp then
45369: LD_VAR 0 8
45373: NOT
45374: IFFALSE 45378
// exit ;
45376: GO 45836
// if in_unit then
45378: LD_VAR 0 11
45382: IFFALSE 45406
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
45384: LD_ADDR_VAR 0 10
45388: PUSH
45389: LD_VAR 0 8
45393: PPUSH
45394: LD_VAR 0 11
45398: PPUSH
45399: CALL_OW 74
45403: ST_TO_ADDR
45404: GO 45426
// enemy := NearestUnitToUnit ( tmp , unit ) ;
45406: LD_ADDR_VAR 0 10
45410: PUSH
45411: LD_VAR 0 8
45415: PPUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 74
45425: ST_TO_ADDR
// if not enemy then
45426: LD_VAR 0 10
45430: NOT
45431: IFFALSE 45435
// exit ;
45433: GO 45836
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
45435: LD_VAR 0 11
45439: PUSH
45440: LD_VAR 0 11
45444: PPUSH
45445: LD_VAR 0 10
45449: PPUSH
45450: CALL_OW 296
45454: PUSH
45455: LD_INT 13
45457: GREATER
45458: AND
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: LD_VAR 0 10
45469: PPUSH
45470: CALL_OW 296
45474: PUSH
45475: LD_INT 12
45477: GREATER
45478: OR
45479: IFFALSE 45483
// exit ;
45481: GO 45836
// missile := [ 1 ] ;
45483: LD_ADDR_VAR 0 14
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: ST_TO_ADDR
// if Researched ( side , tech_space ) then
45494: LD_VAR 0 9
45498: PPUSH
45499: LD_VAR 0 12
45503: PPUSH
45504: CALL_OW 325
45508: IFFALSE 45537
// missile := Insert ( missile , missile + 1 , 2 ) ;
45510: LD_ADDR_VAR 0 14
45514: PUSH
45515: LD_VAR 0 14
45519: PPUSH
45520: LD_VAR 0 14
45524: PUSH
45525: LD_INT 1
45527: PLUS
45528: PPUSH
45529: LD_INT 2
45531: PPUSH
45532: CALL_OW 2
45536: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
45537: LD_VAR 0 9
45541: PPUSH
45542: LD_VAR 0 13
45546: PPUSH
45547: CALL_OW 325
45551: PUSH
45552: LD_VAR 0 10
45556: PPUSH
45557: CALL_OW 255
45561: PPUSH
45562: LD_VAR 0 13
45566: PPUSH
45567: CALL_OW 325
45571: NOT
45572: AND
45573: IFFALSE 45602
// missile := Insert ( missile , missile + 1 , 3 ) ;
45575: LD_ADDR_VAR 0 14
45579: PUSH
45580: LD_VAR 0 14
45584: PPUSH
45585: LD_VAR 0 14
45589: PUSH
45590: LD_INT 1
45592: PLUS
45593: PPUSH
45594: LD_INT 3
45596: PPUSH
45597: CALL_OW 2
45601: ST_TO_ADDR
// if missile < 2 then
45602: LD_VAR 0 14
45606: PUSH
45607: LD_INT 2
45609: LESS
45610: IFFALSE 45614
// exit ;
45612: GO 45836
// x := GetX ( enemy ) ;
45614: LD_ADDR_VAR 0 4
45618: PUSH
45619: LD_VAR 0 10
45623: PPUSH
45624: CALL_OW 250
45628: ST_TO_ADDR
// y := GetY ( enemy ) ;
45629: LD_ADDR_VAR 0 5
45633: PUSH
45634: LD_VAR 0 10
45638: PPUSH
45639: CALL_OW 251
45643: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45644: LD_ADDR_VAR 0 6
45648: PUSH
45649: LD_VAR 0 4
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PPUSH
45658: LD_INT 1
45660: PPUSH
45661: CALL_OW 12
45665: PLUS
45666: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45667: LD_ADDR_VAR 0 7
45671: PUSH
45672: LD_VAR 0 5
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PPUSH
45681: LD_INT 1
45683: PPUSH
45684: CALL_OW 12
45688: PLUS
45689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45690: LD_VAR 0 6
45694: PPUSH
45695: LD_VAR 0 7
45699: PPUSH
45700: CALL_OW 488
45704: NOT
45705: IFFALSE 45727
// begin _x := x ;
45707: LD_ADDR_VAR 0 6
45711: PUSH
45712: LD_VAR 0 4
45716: ST_TO_ADDR
// _y := y ;
45717: LD_ADDR_VAR 0 7
45721: PUSH
45722: LD_VAR 0 5
45726: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45727: LD_ADDR_VAR 0 3
45731: PUSH
45732: LD_INT 1
45734: PPUSH
45735: LD_VAR 0 14
45739: PPUSH
45740: CALL_OW 12
45744: ST_TO_ADDR
// case i of 1 :
45745: LD_VAR 0 3
45749: PUSH
45750: LD_INT 1
45752: DOUBLE
45753: EQUAL
45754: IFTRUE 45758
45756: GO 45775
45758: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45759: LD_VAR 0 1
45763: PPUSH
45764: LD_VAR 0 10
45768: PPUSH
45769: CALL_OW 115
45773: GO 45836
45775: LD_INT 2
45777: DOUBLE
45778: EQUAL
45779: IFTRUE 45783
45781: GO 45805
45783: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45784: LD_VAR 0 1
45788: PPUSH
45789: LD_VAR 0 6
45793: PPUSH
45794: LD_VAR 0 7
45798: PPUSH
45799: CALL_OW 153
45803: GO 45836
45805: LD_INT 3
45807: DOUBLE
45808: EQUAL
45809: IFTRUE 45813
45811: GO 45835
45813: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45814: LD_VAR 0 1
45818: PPUSH
45819: LD_VAR 0 6
45823: PPUSH
45824: LD_VAR 0 7
45828: PPUSH
45829: CALL_OW 154
45833: GO 45836
45835: POP
// end ;
45836: LD_VAR 0 2
45840: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45841: LD_INT 0
45843: PPUSH
45844: PPUSH
45845: PPUSH
45846: PPUSH
45847: PPUSH
45848: PPUSH
// if not unit or not building then
45849: LD_VAR 0 1
45853: NOT
45854: PUSH
45855: LD_VAR 0 2
45859: NOT
45860: OR
45861: IFFALSE 45865
// exit ;
45863: GO 46023
// x := GetX ( building ) ;
45865: LD_ADDR_VAR 0 5
45869: PUSH
45870: LD_VAR 0 2
45874: PPUSH
45875: CALL_OW 250
45879: ST_TO_ADDR
// y := GetY ( building ) ;
45880: LD_ADDR_VAR 0 6
45884: PUSH
45885: LD_VAR 0 2
45889: PPUSH
45890: CALL_OW 251
45894: ST_TO_ADDR
// for i = 0 to 5 do
45895: LD_ADDR_VAR 0 4
45899: PUSH
45900: DOUBLE
45901: LD_INT 0
45903: DEC
45904: ST_TO_ADDR
45905: LD_INT 5
45907: PUSH
45908: FOR_TO
45909: IFFALSE 46021
// begin _x := ShiftX ( x , i , 3 ) ;
45911: LD_ADDR_VAR 0 7
45915: PUSH
45916: LD_VAR 0 5
45920: PPUSH
45921: LD_VAR 0 4
45925: PPUSH
45926: LD_INT 3
45928: PPUSH
45929: CALL_OW 272
45933: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45934: LD_ADDR_VAR 0 8
45938: PUSH
45939: LD_VAR 0 6
45943: PPUSH
45944: LD_VAR 0 4
45948: PPUSH
45949: LD_INT 3
45951: PPUSH
45952: CALL_OW 273
45956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45957: LD_VAR 0 7
45961: PPUSH
45962: LD_VAR 0 8
45966: PPUSH
45967: CALL_OW 488
45971: NOT
45972: IFFALSE 45976
// continue ;
45974: GO 45908
// if HexInfo ( _x , _y ) = 0 then
45976: LD_VAR 0 7
45980: PPUSH
45981: LD_VAR 0 8
45985: PPUSH
45986: CALL_OW 428
45990: PUSH
45991: LD_INT 0
45993: EQUAL
45994: IFFALSE 46019
// begin ComMoveXY ( unit , _x , _y ) ;
45996: LD_VAR 0 1
46000: PPUSH
46001: LD_VAR 0 7
46005: PPUSH
46006: LD_VAR 0 8
46010: PPUSH
46011: CALL_OW 111
// exit ;
46015: POP
46016: POP
46017: GO 46023
// end ; end ;
46019: GO 45908
46021: POP
46022: POP
// end ;
46023: LD_VAR 0 3
46027: RET
// export function ScanBase ( side , base_area ) ; begin
46028: LD_INT 0
46030: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
46031: LD_ADDR_VAR 0 3
46035: PUSH
46036: LD_VAR 0 2
46040: PPUSH
46041: LD_INT 81
46043: PUSH
46044: LD_VAR 0 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PPUSH
46053: CALL_OW 70
46057: ST_TO_ADDR
// end ;
46058: LD_VAR 0 3
46062: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
46063: LD_INT 0
46065: PPUSH
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
46070: LD_VAR 0 1
46074: NOT
46075: PUSH
46076: LD_EXP 50
46080: PUSH
46081: LD_VAR 0 1
46085: ARRAY
46086: NOT
46087: OR
46088: PUSH
46089: LD_VAR 0 2
46093: NOT
46094: OR
46095: PUSH
46096: LD_VAR 0 3
46100: NOT
46101: OR
46102: IFFALSE 46106
// exit ;
46104: GO 46556
// side := mc_sides [ base ] ;
46106: LD_ADDR_VAR 0 6
46110: PUSH
46111: LD_EXP 76
46115: PUSH
46116: LD_VAR 0 1
46120: ARRAY
46121: ST_TO_ADDR
// if not side then
46122: LD_VAR 0 6
46126: NOT
46127: IFFALSE 46131
// exit ;
46129: GO 46556
// for i in solds do
46131: LD_ADDR_VAR 0 7
46135: PUSH
46136: LD_VAR 0 2
46140: PUSH
46141: FOR_IN
46142: IFFALSE 46203
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
46144: LD_VAR 0 7
46148: PPUSH
46149: CALL_OW 310
46153: PPUSH
46154: CALL_OW 266
46158: PUSH
46159: LD_INT 32
46161: PUSH
46162: LD_INT 31
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: IN
46169: IFFALSE 46189
// solds := solds diff i else
46171: LD_ADDR_VAR 0 2
46175: PUSH
46176: LD_VAR 0 2
46180: PUSH
46181: LD_VAR 0 7
46185: DIFF
46186: ST_TO_ADDR
46187: GO 46201
// SetTag ( i , 18 ) ;
46189: LD_VAR 0 7
46193: PPUSH
46194: LD_INT 18
46196: PPUSH
46197: CALL_OW 109
46201: GO 46141
46203: POP
46204: POP
// if not solds then
46205: LD_VAR 0 2
46209: NOT
46210: IFFALSE 46214
// exit ;
46212: GO 46556
// repeat wait ( 0 0$1 ) ;
46214: LD_INT 35
46216: PPUSH
46217: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
46221: LD_ADDR_VAR 0 5
46225: PUSH
46226: LD_VAR 0 6
46230: PPUSH
46231: LD_VAR 0 3
46235: PPUSH
46236: CALL 46028 0 2
46240: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
46241: LD_VAR 0 5
46245: NOT
46246: PUSH
46247: LD_VAR 0 5
46251: PUSH
46252: LD_INT 3
46254: GREATER
46255: OR
46256: PUSH
46257: LD_EXP 72
46261: PUSH
46262: LD_VAR 0 1
46266: ARRAY
46267: OR
46268: IFFALSE 46309
// begin for i in solds do
46270: LD_ADDR_VAR 0 7
46274: PUSH
46275: LD_VAR 0 2
46279: PUSH
46280: FOR_IN
46281: IFFALSE 46305
// if HasTask ( i ) then
46283: LD_VAR 0 7
46287: PPUSH
46288: CALL_OW 314
46292: IFFALSE 46303
// ComStop ( i ) ;
46294: LD_VAR 0 7
46298: PPUSH
46299: CALL_OW 141
46303: GO 46280
46305: POP
46306: POP
// break ;
46307: GO 46544
// end ; for i in solds do
46309: LD_ADDR_VAR 0 7
46313: PUSH
46314: LD_VAR 0 2
46318: PUSH
46319: FOR_IN
46320: IFFALSE 46536
// begin if IsInUnit ( i ) then
46322: LD_VAR 0 7
46326: PPUSH
46327: CALL_OW 310
46331: IFFALSE 46342
// ComExitBuilding ( i ) ;
46333: LD_VAR 0 7
46337: PPUSH
46338: CALL_OW 122
// if GetLives ( i ) > 333 then
46342: LD_VAR 0 7
46346: PPUSH
46347: CALL_OW 256
46351: PUSH
46352: LD_INT 333
46354: GREATER
46355: IFFALSE 46383
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46357: LD_VAR 0 7
46361: PPUSH
46362: LD_VAR 0 5
46366: PPUSH
46367: LD_VAR 0 7
46371: PPUSH
46372: CALL_OW 74
46376: PPUSH
46377: CALL_OW 115
46381: GO 46534
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
46383: LD_ADDR_VAR 0 8
46387: PUSH
46388: LD_EXP 50
46392: PUSH
46393: LD_VAR 0 1
46397: ARRAY
46398: PPUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 30
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 30
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 30
46424: PUSH
46425: LD_INT 6
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: PPUSH
46438: CALL_OW 72
46442: PPUSH
46443: LD_VAR 0 7
46447: PPUSH
46448: CALL_OW 74
46452: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
46453: LD_VAR 0 7
46457: PPUSH
46458: LD_VAR 0 8
46462: PPUSH
46463: CALL_OW 250
46467: PPUSH
46468: LD_INT 3
46470: PPUSH
46471: LD_INT 5
46473: PPUSH
46474: CALL_OW 272
46478: PPUSH
46479: LD_VAR 0 8
46483: PPUSH
46484: CALL_OW 251
46488: PPUSH
46489: LD_INT 3
46491: PPUSH
46492: LD_INT 5
46494: PPUSH
46495: CALL_OW 273
46499: PPUSH
46500: CALL_OW 111
// SetTag ( i , 0 ) ;
46504: LD_VAR 0 7
46508: PPUSH
46509: LD_INT 0
46511: PPUSH
46512: CALL_OW 109
// solds := solds diff i ;
46516: LD_ADDR_VAR 0 2
46520: PUSH
46521: LD_VAR 0 2
46525: PUSH
46526: LD_VAR 0 7
46530: DIFF
46531: ST_TO_ADDR
// continue ;
46532: GO 46319
// end ; end ;
46534: GO 46319
46536: POP
46537: POP
// until solds ;
46538: LD_VAR 0 2
46542: IFFALSE 46214
// MC_Reset ( base , 18 ) ;
46544: LD_VAR 0 1
46548: PPUSH
46549: LD_INT 18
46551: PPUSH
46552: CALL 19807 0 2
// end ;
46556: LD_VAR 0 4
46560: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
46561: LD_INT 0
46563: PPUSH
46564: PPUSH
46565: PPUSH
46566: PPUSH
46567: PPUSH
46568: PPUSH
46569: PPUSH
46570: PPUSH
46571: PPUSH
46572: PPUSH
46573: PPUSH
46574: PPUSH
46575: PPUSH
46576: PPUSH
46577: PPUSH
46578: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
46579: LD_ADDR_VAR 0 12
46583: PUSH
46584: LD_EXP 50
46588: PUSH
46589: LD_VAR 0 1
46593: ARRAY
46594: PPUSH
46595: LD_INT 25
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PPUSH
46605: CALL_OW 72
46609: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
46610: LD_ADDR_VAR 0 8
46614: PUSH
46615: LD_EXP 50
46619: PUSH
46620: LD_VAR 0 1
46624: ARRAY
46625: PPUSH
46626: LD_INT 2
46628: PUSH
46629: LD_INT 25
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 25
46641: PUSH
46642: LD_INT 5
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 25
46651: PUSH
46652: LD_INT 8
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 25
46661: PUSH
46662: LD_INT 9
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: PPUSH
46676: CALL_OW 72
46680: ST_TO_ADDR
// if not defenders and not solds then
46681: LD_VAR 0 2
46685: NOT
46686: PUSH
46687: LD_VAR 0 8
46691: NOT
46692: AND
46693: IFFALSE 46697
// exit ;
46695: GO 48063
// depot_under_attack := false ;
46697: LD_ADDR_VAR 0 16
46701: PUSH
46702: LD_INT 0
46704: ST_TO_ADDR
// sold_defenders := [ ] ;
46705: LD_ADDR_VAR 0 17
46709: PUSH
46710: EMPTY
46711: ST_TO_ADDR
// if mechs then
46712: LD_VAR 0 12
46716: IFFALSE 46845
// for i in defenders do
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 2
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46843
// begin SetTag ( i , 20 ) ;
46731: LD_VAR 0 5
46735: PPUSH
46736: LD_INT 20
46738: PPUSH
46739: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
46743: LD_VAR 0 5
46747: PPUSH
46748: CALL_OW 263
46752: PUSH
46753: LD_INT 1
46755: EQUAL
46756: PUSH
46757: LD_VAR 0 5
46761: PPUSH
46762: CALL_OW 311
46766: NOT
46767: AND
46768: PUSH
46769: LD_VAR 0 12
46773: AND
46774: IFFALSE 46841
// begin un := mechs [ 1 ] ;
46776: LD_ADDR_VAR 0 10
46780: PUSH
46781: LD_VAR 0 12
46785: PUSH
46786: LD_INT 1
46788: ARRAY
46789: ST_TO_ADDR
// ComExitBuilding ( un ) ;
46790: LD_VAR 0 10
46794: PPUSH
46795: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
46799: LD_VAR 0 10
46803: PPUSH
46804: LD_VAR 0 5
46808: PPUSH
46809: CALL_OW 180
// SetTag ( un , 19 ) ;
46813: LD_VAR 0 10
46817: PPUSH
46818: LD_INT 19
46820: PPUSH
46821: CALL_OW 109
// mechs := mechs diff un ;
46825: LD_ADDR_VAR 0 12
46829: PUSH
46830: LD_VAR 0 12
46834: PUSH
46835: LD_VAR 0 10
46839: DIFF
46840: ST_TO_ADDR
// end ; end ;
46841: GO 46728
46843: POP
46844: POP
// if solds then
46845: LD_VAR 0 8
46849: IFFALSE 46908
// for i in solds do
46851: LD_ADDR_VAR 0 5
46855: PUSH
46856: LD_VAR 0 8
46860: PUSH
46861: FOR_IN
46862: IFFALSE 46906
// if not GetTag ( i ) then
46864: LD_VAR 0 5
46868: PPUSH
46869: CALL_OW 110
46873: NOT
46874: IFFALSE 46904
// begin defenders := defenders union i ;
46876: LD_ADDR_VAR 0 2
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_VAR 0 5
46890: UNION
46891: ST_TO_ADDR
// SetTag ( i , 18 ) ;
46892: LD_VAR 0 5
46896: PPUSH
46897: LD_INT 18
46899: PPUSH
46900: CALL_OW 109
// end ;
46904: GO 46861
46906: POP
46907: POP
// repeat wait ( 0 0$1 ) ;
46908: LD_INT 35
46910: PPUSH
46911: CALL_OW 67
// enemy := mc_scan [ base ] ;
46915: LD_ADDR_VAR 0 3
46919: PUSH
46920: LD_EXP 73
46924: PUSH
46925: LD_VAR 0 1
46929: ARRAY
46930: ST_TO_ADDR
// for i in defenders do
46931: LD_ADDR_VAR 0 5
46935: PUSH
46936: LD_VAR 0 2
46940: PUSH
46941: FOR_IN
46942: IFFALSE 47627
// begin e := NearestUnitToUnit ( enemy , i ) ;
46944: LD_ADDR_VAR 0 13
46948: PUSH
46949: LD_VAR 0 3
46953: PPUSH
46954: LD_VAR 0 5
46958: PPUSH
46959: CALL_OW 74
46963: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
46964: LD_ADDR_VAR 0 16
46968: PUSH
46969: LD_EXP 50
46973: PUSH
46974: LD_VAR 0 1
46978: ARRAY
46979: PPUSH
46980: LD_INT 2
46982: PUSH
46983: LD_INT 30
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 30
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: PPUSH
47008: CALL_OW 72
47012: NOT
47013: PUSH
47014: LD_EXP 50
47018: PUSH
47019: LD_VAR 0 1
47023: ARRAY
47024: PPUSH
47025: LD_INT 2
47027: PUSH
47028: LD_INT 30
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 30
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: PPUSH
47053: CALL_OW 72
47057: PPUSH
47058: CALL_OW 256
47062: PUSH
47063: LD_INT 600
47065: LESS
47066: OR
47067: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
47068: LD_VAR 0 5
47072: PPUSH
47073: CALL_OW 247
47077: PUSH
47078: LD_INT 2
47080: DOUBLE
47081: EQUAL
47082: IFTRUE 47086
47084: GO 47333
47086: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
47087: LD_VAR 0 5
47091: PPUSH
47092: CALL_OW 256
47096: PUSH
47097: LD_INT 650
47099: GREATER
47100: PUSH
47101: LD_VAR 0 5
47105: PPUSH
47106: LD_VAR 0 13
47110: PPUSH
47111: CALL_OW 296
47115: PUSH
47116: LD_INT 40
47118: LESS
47119: AND
47120: IFFALSE 47138
// ComAttackUnit ( i , e ) else
47122: LD_VAR 0 5
47126: PPUSH
47127: LD_VAR 0 13
47131: PPUSH
47132: CALL_OW 115
47136: GO 47216
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
47138: LD_VAR 0 5
47142: PPUSH
47143: LD_VAR 0 13
47147: PPUSH
47148: CALL_OW 296
47152: PUSH
47153: LD_INT 30
47155: GREATEREQUAL
47156: PUSH
47157: LD_VAR 0 5
47161: PPUSH
47162: CALL_OW 256
47166: PUSH
47167: LD_INT 650
47169: LESSEQUAL
47170: OR
47171: PUSH
47172: LD_VAR 0 5
47176: PPUSH
47177: LD_EXP 74
47181: PUSH
47182: LD_VAR 0 1
47186: ARRAY
47187: PPUSH
47188: CALL_OW 308
47192: NOT
47193: AND
47194: IFFALSE 47216
// ComMoveToArea ( i , mc_parking [ base ] ) ;
47196: LD_VAR 0 5
47200: PPUSH
47201: LD_EXP 74
47205: PUSH
47206: LD_VAR 0 1
47210: ARRAY
47211: PPUSH
47212: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
47216: LD_VAR 0 5
47220: PPUSH
47221: CALL_OW 256
47225: PUSH
47226: LD_INT 998
47228: LESS
47229: PUSH
47230: LD_VAR 0 5
47234: PPUSH
47235: CALL_OW 263
47239: PUSH
47240: LD_INT 1
47242: EQUAL
47243: AND
47244: PUSH
47245: LD_VAR 0 5
47249: PPUSH
47250: CALL_OW 311
47254: AND
47255: PUSH
47256: LD_VAR 0 5
47260: PPUSH
47261: LD_EXP 74
47265: PUSH
47266: LD_VAR 0 1
47270: ARRAY
47271: PPUSH
47272: CALL_OW 308
47276: AND
47277: IFFALSE 47331
// begin mech := IsDrivenBy ( i ) ;
47279: LD_ADDR_VAR 0 9
47283: PUSH
47284: LD_VAR 0 5
47288: PPUSH
47289: CALL_OW 311
47293: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
47294: LD_VAR 0 9
47298: PPUSH
47299: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
47303: LD_VAR 0 9
47307: PPUSH
47308: LD_VAR 0 5
47312: PPUSH
47313: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
47317: LD_VAR 0 9
47321: PPUSH
47322: LD_VAR 0 5
47326: PPUSH
47327: CALL_OW 180
// end ; end ; unit_human :
47331: GO 47598
47333: LD_INT 1
47335: DOUBLE
47336: EQUAL
47337: IFTRUE 47341
47339: GO 47597
47341: POP
// begin b := IsInUnit ( i ) ;
47342: LD_ADDR_VAR 0 18
47346: PUSH
47347: LD_VAR 0 5
47351: PPUSH
47352: CALL_OW 310
47356: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
47357: LD_ADDR_VAR 0 19
47361: PUSH
47362: LD_VAR 0 18
47366: NOT
47367: PUSH
47368: LD_VAR 0 18
47372: PPUSH
47373: CALL_OW 266
47377: PUSH
47378: LD_INT 32
47380: PUSH
47381: LD_INT 31
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: IN
47388: OR
47389: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
47390: LD_VAR 0 16
47394: PUSH
47395: LD_VAR 0 2
47399: PPUSH
47400: LD_INT 21
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PPUSH
47410: CALL_OW 72
47414: PUSH
47415: LD_INT 1
47417: LESSEQUAL
47418: OR
47419: PUSH
47420: LD_VAR 0 19
47424: AND
47425: PUSH
47426: LD_VAR 0 5
47430: PUSH
47431: LD_VAR 0 17
47435: IN
47436: NOT
47437: AND
47438: IFFALSE 47531
// begin if b then
47440: LD_VAR 0 18
47444: IFFALSE 47493
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
47446: LD_VAR 0 18
47450: PPUSH
47451: LD_VAR 0 3
47455: PPUSH
47456: LD_VAR 0 18
47460: PPUSH
47461: CALL_OW 74
47465: PPUSH
47466: CALL_OW 296
47470: PUSH
47471: LD_INT 10
47473: LESS
47474: PUSH
47475: LD_VAR 0 18
47479: PPUSH
47480: CALL_OW 461
47484: PUSH
47485: LD_INT 7
47487: NONEQUAL
47488: AND
47489: IFFALSE 47493
// continue ;
47491: GO 46941
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
47493: LD_ADDR_VAR 0 17
47497: PUSH
47498: LD_VAR 0 17
47502: PPUSH
47503: LD_VAR 0 17
47507: PUSH
47508: LD_INT 1
47510: PLUS
47511: PPUSH
47512: LD_VAR 0 5
47516: PPUSH
47517: CALL_OW 1
47521: ST_TO_ADDR
// ComExitBuilding ( i ) ;
47522: LD_VAR 0 5
47526: PPUSH
47527: CALL_OW 122
// end ; if sold_defenders then
47531: LD_VAR 0 17
47535: IFFALSE 47595
// if i in sold_defenders then
47537: LD_VAR 0 5
47541: PUSH
47542: LD_VAR 0 17
47546: IN
47547: IFFALSE 47595
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
47549: LD_VAR 0 5
47553: PPUSH
47554: CALL_OW 314
47558: NOT
47559: PUSH
47560: LD_VAR 0 5
47564: PPUSH
47565: LD_VAR 0 13
47569: PPUSH
47570: CALL_OW 296
47574: PUSH
47575: LD_INT 30
47577: LESS
47578: AND
47579: IFFALSE 47595
// ComAttackUnit ( i , e ) ;
47581: LD_VAR 0 5
47585: PPUSH
47586: LD_VAR 0 13
47590: PPUSH
47591: CALL_OW 115
// end ; end ; end ;
47595: GO 47598
47597: POP
// if IsDead ( i ) then
47598: LD_VAR 0 5
47602: PPUSH
47603: CALL_OW 301
47607: IFFALSE 47625
// defenders := defenders diff i ;
47609: LD_ADDR_VAR 0 2
47613: PUSH
47614: LD_VAR 0 2
47618: PUSH
47619: LD_VAR 0 5
47623: DIFF
47624: ST_TO_ADDR
// end ;
47625: GO 46941
47627: POP
47628: POP
// until not enemy or not defenders ;
47629: LD_VAR 0 3
47633: NOT
47634: PUSH
47635: LD_VAR 0 2
47639: NOT
47640: OR
47641: IFFALSE 46908
// MC_Reset ( base , 18 ) ;
47643: LD_VAR 0 1
47647: PPUSH
47648: LD_INT 18
47650: PPUSH
47651: CALL 19807 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
47655: LD_ADDR_VAR 0 2
47659: PUSH
47660: LD_VAR 0 2
47664: PUSH
47665: LD_VAR 0 2
47669: PPUSH
47670: LD_INT 2
47672: PUSH
47673: LD_INT 25
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 25
47685: PUSH
47686: LD_INT 5
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 25
47695: PUSH
47696: LD_INT 8
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 25
47705: PUSH
47706: LD_INT 9
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: PPUSH
47720: CALL_OW 72
47724: DIFF
47725: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
47726: LD_VAR 0 3
47730: NOT
47731: PUSH
47732: LD_VAR 0 2
47736: PPUSH
47737: LD_INT 21
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PPUSH
47747: CALL_OW 72
47751: AND
47752: IFFALSE 48014
// begin tmp := FilterByTag ( defenders , 19 ) ;
47754: LD_ADDR_VAR 0 11
47758: PUSH
47759: LD_VAR 0 2
47763: PPUSH
47764: LD_INT 19
47766: PPUSH
47767: CALL 84361 0 2
47771: ST_TO_ADDR
// if tmp then
47772: LD_VAR 0 11
47776: IFFALSE 47846
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
47778: LD_ADDR_VAR 0 11
47782: PUSH
47783: LD_VAR 0 11
47787: PPUSH
47788: LD_INT 25
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PPUSH
47798: CALL_OW 72
47802: ST_TO_ADDR
// if tmp then
47803: LD_VAR 0 11
47807: IFFALSE 47846
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
47809: LD_ADDR_EXP 62
47813: PUSH
47814: LD_EXP 62
47818: PPUSH
47819: LD_VAR 0 1
47823: PPUSH
47824: LD_EXP 62
47828: PUSH
47829: LD_VAR 0 1
47833: ARRAY
47834: PUSH
47835: LD_VAR 0 11
47839: UNION
47840: PPUSH
47841: CALL_OW 1
47845: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
47846: LD_VAR 0 1
47850: PPUSH
47851: LD_INT 19
47853: PPUSH
47854: CALL 19807 0 2
// repeat wait ( 0 0$1 ) ;
47858: LD_INT 35
47860: PPUSH
47861: CALL_OW 67
// for i in defenders do
47865: LD_ADDR_VAR 0 5
47869: PUSH
47870: LD_VAR 0 2
47874: PUSH
47875: FOR_IN
47876: IFFALSE 47965
// begin if not IsInArea ( i , mc_parking [ base ] ) then
47878: LD_VAR 0 5
47882: PPUSH
47883: LD_EXP 74
47887: PUSH
47888: LD_VAR 0 1
47892: ARRAY
47893: PPUSH
47894: CALL_OW 308
47898: NOT
47899: IFFALSE 47923
// ComMoveToArea ( i , mc_parking [ base ] ) else
47901: LD_VAR 0 5
47905: PPUSH
47906: LD_EXP 74
47910: PUSH
47911: LD_VAR 0 1
47915: ARRAY
47916: PPUSH
47917: CALL_OW 113
47921: GO 47963
// if GetControl ( i ) = control_manual then
47923: LD_VAR 0 5
47927: PPUSH
47928: CALL_OW 263
47932: PUSH
47933: LD_INT 1
47935: EQUAL
47936: IFFALSE 47963
// if IsDrivenBy ( i ) then
47938: LD_VAR 0 5
47942: PPUSH
47943: CALL_OW 311
47947: IFFALSE 47963
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
47949: LD_VAR 0 5
47953: PPUSH
47954: CALL_OW 311
47958: PPUSH
47959: CALL_OW 121
// end ;
47963: GO 47875
47965: POP
47966: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
47967: LD_VAR 0 2
47971: PPUSH
47972: LD_INT 95
47974: PUSH
47975: LD_EXP 74
47979: PUSH
47980: LD_VAR 0 1
47984: ARRAY
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PPUSH
47990: CALL_OW 72
47994: PUSH
47995: LD_VAR 0 2
47999: EQUAL
48000: PUSH
48001: LD_EXP 73
48005: PUSH
48006: LD_VAR 0 1
48010: ARRAY
48011: OR
48012: IFFALSE 47858
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
48014: LD_ADDR_EXP 72
48018: PUSH
48019: LD_EXP 72
48023: PPUSH
48024: LD_VAR 0 1
48028: PPUSH
48029: LD_EXP 72
48033: PUSH
48034: LD_VAR 0 1
48038: ARRAY
48039: PUSH
48040: LD_VAR 0 2
48044: UNION
48045: PPUSH
48046: CALL_OW 1
48050: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
48051: LD_VAR 0 1
48055: PPUSH
48056: LD_INT 20
48058: PPUSH
48059: CALL 19807 0 2
// end ;
48063: LD_VAR 0 4
48067: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48068: LD_INT 0
48070: PPUSH
48071: PPUSH
48072: PPUSH
48073: PPUSH
// result := false ;
48074: LD_ADDR_VAR 0 2
48078: PUSH
48079: LD_INT 0
48081: ST_TO_ADDR
// side := GetSide ( unit ) ;
48082: LD_ADDR_VAR 0 3
48086: PUSH
48087: LD_VAR 0 1
48091: PPUSH
48092: CALL_OW 255
48096: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48097: LD_ADDR_VAR 0 4
48101: PUSH
48102: LD_VAR 0 1
48106: PPUSH
48107: CALL_OW 248
48111: ST_TO_ADDR
// case nat of 1 :
48112: LD_VAR 0 4
48116: PUSH
48117: LD_INT 1
48119: DOUBLE
48120: EQUAL
48121: IFTRUE 48125
48123: GO 48136
48125: POP
// tech := tech_lassight ; 2 :
48126: LD_ADDR_VAR 0 5
48130: PUSH
48131: LD_INT 12
48133: ST_TO_ADDR
48134: GO 48175
48136: LD_INT 2
48138: DOUBLE
48139: EQUAL
48140: IFTRUE 48144
48142: GO 48155
48144: POP
// tech := tech_mortar ; 3 :
48145: LD_ADDR_VAR 0 5
48149: PUSH
48150: LD_INT 41
48152: ST_TO_ADDR
48153: GO 48175
48155: LD_INT 3
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48163
48161: GO 48174
48163: POP
// tech := tech_bazooka ; end ;
48164: LD_ADDR_VAR 0 5
48168: PUSH
48169: LD_INT 44
48171: ST_TO_ADDR
48172: GO 48175
48174: POP
// if Researched ( side , tech ) then
48175: LD_VAR 0 3
48179: PPUSH
48180: LD_VAR 0 5
48184: PPUSH
48185: CALL_OW 325
48189: IFFALSE 48216
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48191: LD_ADDR_VAR 0 2
48195: PUSH
48196: LD_INT 5
48198: PUSH
48199: LD_INT 8
48201: PUSH
48202: LD_INT 9
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: PUSH
48210: LD_VAR 0 4
48214: ARRAY
48215: ST_TO_ADDR
// end ;
48216: LD_VAR 0 2
48220: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48221: LD_INT 0
48223: PPUSH
48224: PPUSH
48225: PPUSH
// if not mines then
48226: LD_VAR 0 2
48230: NOT
48231: IFFALSE 48235
// exit ;
48233: GO 48379
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48235: LD_ADDR_VAR 0 5
48239: PUSH
48240: LD_INT 81
48242: PUSH
48243: LD_VAR 0 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 21
48257: PUSH
48258: LD_INT 3
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PPUSH
48273: CALL_OW 69
48277: ST_TO_ADDR
// for i in mines do
48278: LD_ADDR_VAR 0 4
48282: PUSH
48283: LD_VAR 0 2
48287: PUSH
48288: FOR_IN
48289: IFFALSE 48377
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48291: LD_VAR 0 4
48295: PUSH
48296: LD_INT 1
48298: ARRAY
48299: PPUSH
48300: LD_VAR 0 4
48304: PUSH
48305: LD_INT 2
48307: ARRAY
48308: PPUSH
48309: CALL_OW 458
48313: NOT
48314: IFFALSE 48318
// continue ;
48316: GO 48288
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
48318: LD_VAR 0 4
48322: PUSH
48323: LD_INT 1
48325: ARRAY
48326: PPUSH
48327: LD_VAR 0 4
48331: PUSH
48332: LD_INT 2
48334: ARRAY
48335: PPUSH
48336: CALL_OW 428
48340: PUSH
48341: LD_VAR 0 5
48345: IN
48346: IFFALSE 48375
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
48348: LD_VAR 0 4
48352: PUSH
48353: LD_INT 1
48355: ARRAY
48356: PPUSH
48357: LD_VAR 0 4
48361: PUSH
48362: LD_INT 2
48364: ARRAY
48365: PPUSH
48366: LD_VAR 0 1
48370: PPUSH
48371: CALL_OW 456
// end ;
48375: GO 48288
48377: POP
48378: POP
// end ;
48379: LD_VAR 0 3
48383: RET
// export function Count ( array ) ; var i ; begin
48384: LD_INT 0
48386: PPUSH
48387: PPUSH
// result := 0 ;
48388: LD_ADDR_VAR 0 2
48392: PUSH
48393: LD_INT 0
48395: ST_TO_ADDR
// for i in array do
48396: LD_ADDR_VAR 0 3
48400: PUSH
48401: LD_VAR 0 1
48405: PUSH
48406: FOR_IN
48407: IFFALSE 48431
// if i then
48409: LD_VAR 0 3
48413: IFFALSE 48429
// result := result + 1 ;
48415: LD_ADDR_VAR 0 2
48419: PUSH
48420: LD_VAR 0 2
48424: PUSH
48425: LD_INT 1
48427: PLUS
48428: ST_TO_ADDR
48429: GO 48406
48431: POP
48432: POP
// end ;
48433: LD_VAR 0 2
48437: RET
// export function IsEmpty ( building ) ; begin
48438: LD_INT 0
48440: PPUSH
// if not building then
48441: LD_VAR 0 1
48445: NOT
48446: IFFALSE 48450
// exit ;
48448: GO 48493
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
48450: LD_ADDR_VAR 0 2
48454: PUSH
48455: LD_VAR 0 1
48459: PUSH
48460: LD_INT 22
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 255
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 58
48479: PUSH
48480: EMPTY
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PPUSH
48487: CALL_OW 69
48491: IN
48492: ST_TO_ADDR
// end ;
48493: LD_VAR 0 2
48497: RET
// export function IsNotFull ( building ) ; begin
48498: LD_INT 0
48500: PPUSH
// if not building then
48501: LD_VAR 0 1
48505: NOT
48506: IFFALSE 48510
// exit ;
48508: GO 48529
// result := UnitsInside ( building ) < 6 ;
48510: LD_ADDR_VAR 0 2
48514: PUSH
48515: LD_VAR 0 1
48519: PPUSH
48520: CALL_OW 313
48524: PUSH
48525: LD_INT 6
48527: LESS
48528: ST_TO_ADDR
// end ;
48529: LD_VAR 0 2
48533: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
48534: LD_INT 0
48536: PPUSH
48537: PPUSH
48538: PPUSH
48539: PPUSH
// tmp := [ ] ;
48540: LD_ADDR_VAR 0 3
48544: PUSH
48545: EMPTY
48546: ST_TO_ADDR
// list := [ ] ;
48547: LD_ADDR_VAR 0 5
48551: PUSH
48552: EMPTY
48553: ST_TO_ADDR
// for i = 16 to 25 do
48554: LD_ADDR_VAR 0 4
48558: PUSH
48559: DOUBLE
48560: LD_INT 16
48562: DEC
48563: ST_TO_ADDR
48564: LD_INT 25
48566: PUSH
48567: FOR_TO
48568: IFFALSE 48641
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
48570: LD_ADDR_VAR 0 3
48574: PUSH
48575: LD_VAR 0 3
48579: PUSH
48580: LD_INT 22
48582: PUSH
48583: LD_VAR 0 1
48587: PPUSH
48588: CALL_OW 255
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 91
48599: PUSH
48600: LD_VAR 0 1
48604: PUSH
48605: LD_INT 6
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 30
48615: PUSH
48616: LD_VAR 0 4
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: LIST
48629: PUSH
48630: EMPTY
48631: LIST
48632: PPUSH
48633: CALL_OW 69
48637: ADD
48638: ST_TO_ADDR
48639: GO 48567
48641: POP
48642: POP
// for i = 1 to tmp do
48643: LD_ADDR_VAR 0 4
48647: PUSH
48648: DOUBLE
48649: LD_INT 1
48651: DEC
48652: ST_TO_ADDR
48653: LD_VAR 0 3
48657: PUSH
48658: FOR_TO
48659: IFFALSE 48747
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
48661: LD_ADDR_VAR 0 5
48665: PUSH
48666: LD_VAR 0 5
48670: PUSH
48671: LD_VAR 0 3
48675: PUSH
48676: LD_VAR 0 4
48680: ARRAY
48681: PPUSH
48682: CALL_OW 266
48686: PUSH
48687: LD_VAR 0 3
48691: PUSH
48692: LD_VAR 0 4
48696: ARRAY
48697: PPUSH
48698: CALL_OW 250
48702: PUSH
48703: LD_VAR 0 3
48707: PUSH
48708: LD_VAR 0 4
48712: ARRAY
48713: PPUSH
48714: CALL_OW 251
48718: PUSH
48719: LD_VAR 0 3
48723: PUSH
48724: LD_VAR 0 4
48728: ARRAY
48729: PPUSH
48730: CALL_OW 254
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: PUSH
48741: EMPTY
48742: LIST
48743: ADD
48744: ST_TO_ADDR
48745: GO 48658
48747: POP
48748: POP
// result := list ;
48749: LD_ADDR_VAR 0 2
48753: PUSH
48754: LD_VAR 0 5
48758: ST_TO_ADDR
// end ;
48759: LD_VAR 0 2
48763: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
48764: LD_INT 0
48766: PPUSH
48767: PPUSH
48768: PPUSH
48769: PPUSH
48770: PPUSH
48771: PPUSH
48772: PPUSH
// if not factory then
48773: LD_VAR 0 1
48777: NOT
48778: IFFALSE 48782
// exit ;
48780: GO 49307
// if control = control_apeman then
48782: LD_VAR 0 4
48786: PUSH
48787: LD_INT 5
48789: EQUAL
48790: IFFALSE 48899
// begin tmp := UnitsInside ( factory ) ;
48792: LD_ADDR_VAR 0 8
48796: PUSH
48797: LD_VAR 0 1
48801: PPUSH
48802: CALL_OW 313
48806: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
48807: LD_VAR 0 8
48811: PPUSH
48812: LD_INT 25
48814: PUSH
48815: LD_INT 12
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PPUSH
48822: CALL_OW 72
48826: NOT
48827: IFFALSE 48837
// control := control_manual ;
48829: LD_ADDR_VAR 0 4
48833: PUSH
48834: LD_INT 1
48836: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
48837: LD_ADDR_VAR 0 8
48841: PUSH
48842: LD_VAR 0 1
48846: PPUSH
48847: CALL 48534 0 1
48851: ST_TO_ADDR
// if tmp then
48852: LD_VAR 0 8
48856: IFFALSE 48899
// begin for i in tmp do
48858: LD_ADDR_VAR 0 7
48862: PUSH
48863: LD_VAR 0 8
48867: PUSH
48868: FOR_IN
48869: IFFALSE 48897
// if i [ 1 ] = b_ext_radar then
48871: LD_VAR 0 7
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: PUSH
48880: LD_INT 20
48882: EQUAL
48883: IFFALSE 48895
// begin control := control_remote ;
48885: LD_ADDR_VAR 0 4
48889: PUSH
48890: LD_INT 2
48892: ST_TO_ADDR
// break ;
48893: GO 48897
// end ;
48895: GO 48868
48897: POP
48898: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
48899: LD_VAR 0 1
48903: PPUSH
48904: LD_VAR 0 2
48908: PPUSH
48909: LD_VAR 0 3
48913: PPUSH
48914: LD_VAR 0 4
48918: PPUSH
48919: LD_VAR 0 5
48923: PPUSH
48924: CALL_OW 448
48928: IFFALSE 48963
// begin result := [ chassis , engine , control , weapon ] ;
48930: LD_ADDR_VAR 0 6
48934: PUSH
48935: LD_VAR 0 2
48939: PUSH
48940: LD_VAR 0 3
48944: PUSH
48945: LD_VAR 0 4
48949: PUSH
48950: LD_VAR 0 5
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: ST_TO_ADDR
// exit ;
48961: GO 49307
// end ; _chassis := AvailableChassisList ( factory ) ;
48963: LD_ADDR_VAR 0 9
48967: PUSH
48968: LD_VAR 0 1
48972: PPUSH
48973: CALL_OW 475
48977: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
48978: LD_ADDR_VAR 0 11
48982: PUSH
48983: LD_VAR 0 1
48987: PPUSH
48988: CALL_OW 476
48992: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
48993: LD_ADDR_VAR 0 12
48997: PUSH
48998: LD_VAR 0 1
49002: PPUSH
49003: CALL_OW 477
49007: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49008: LD_ADDR_VAR 0 10
49012: PUSH
49013: LD_VAR 0 1
49017: PPUSH
49018: CALL_OW 478
49022: ST_TO_ADDR
// if not chassis in _chassis then
49023: LD_VAR 0 2
49027: PUSH
49028: LD_VAR 0 9
49032: IN
49033: NOT
49034: IFFALSE 49060
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49036: LD_ADDR_VAR 0 2
49040: PUSH
49041: LD_VAR 0 9
49045: PUSH
49046: LD_INT 1
49048: PPUSH
49049: LD_VAR 0 9
49053: PPUSH
49054: CALL_OW 12
49058: ARRAY
49059: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49060: LD_VAR 0 2
49064: PPUSH
49065: LD_VAR 0 3
49069: PPUSH
49070: CALL 49312 0 2
49074: NOT
49075: IFFALSE 49134
// repeat engine := _engine [ 1 ] ;
49077: LD_ADDR_VAR 0 3
49081: PUSH
49082: LD_VAR 0 11
49086: PUSH
49087: LD_INT 1
49089: ARRAY
49090: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49091: LD_ADDR_VAR 0 11
49095: PUSH
49096: LD_VAR 0 11
49100: PPUSH
49101: LD_INT 1
49103: PPUSH
49104: CALL_OW 3
49108: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49109: LD_VAR 0 2
49113: PPUSH
49114: LD_VAR 0 3
49118: PPUSH
49119: CALL 49312 0 2
49123: PUSH
49124: LD_VAR 0 11
49128: PUSH
49129: EMPTY
49130: EQUAL
49131: OR
49132: IFFALSE 49077
// if not control in _control then
49134: LD_VAR 0 4
49138: PUSH
49139: LD_VAR 0 12
49143: IN
49144: NOT
49145: IFFALSE 49171
// control := _control [ rand ( 1 , _control ) ] ;
49147: LD_ADDR_VAR 0 4
49151: PUSH
49152: LD_VAR 0 12
49156: PUSH
49157: LD_INT 1
49159: PPUSH
49160: LD_VAR 0 12
49164: PPUSH
49165: CALL_OW 12
49169: ARRAY
49170: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49171: LD_VAR 0 2
49175: PPUSH
49176: LD_VAR 0 5
49180: PPUSH
49181: CALL 49532 0 2
49185: NOT
49186: IFFALSE 49245
// repeat weapon := _weapon [ 1 ] ;
49188: LD_ADDR_VAR 0 5
49192: PUSH
49193: LD_VAR 0 10
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49202: LD_ADDR_VAR 0 10
49206: PUSH
49207: LD_VAR 0 10
49211: PPUSH
49212: LD_INT 1
49214: PPUSH
49215: CALL_OW 3
49219: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49220: LD_VAR 0 2
49224: PPUSH
49225: LD_VAR 0 5
49229: PPUSH
49230: CALL 49532 0 2
49234: PUSH
49235: LD_VAR 0 10
49239: PUSH
49240: EMPTY
49241: EQUAL
49242: OR
49243: IFFALSE 49188
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49245: LD_VAR 0 1
49249: PPUSH
49250: LD_VAR 0 2
49254: PPUSH
49255: LD_VAR 0 3
49259: PPUSH
49260: LD_VAR 0 4
49264: PPUSH
49265: LD_VAR 0 5
49269: PPUSH
49270: CALL_OW 448
49274: IFFALSE 49307
// result := [ chassis , engine , control , weapon ] ;
49276: LD_ADDR_VAR 0 6
49280: PUSH
49281: LD_VAR 0 2
49285: PUSH
49286: LD_VAR 0 3
49290: PUSH
49291: LD_VAR 0 4
49295: PUSH
49296: LD_VAR 0 5
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: ST_TO_ADDR
// end ;
49307: LD_VAR 0 6
49311: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
49312: LD_INT 0
49314: PPUSH
// if not chassis or not engine then
49315: LD_VAR 0 1
49319: NOT
49320: PUSH
49321: LD_VAR 0 2
49325: NOT
49326: OR
49327: IFFALSE 49331
// exit ;
49329: GO 49527
// case engine of engine_solar :
49331: LD_VAR 0 2
49335: PUSH
49336: LD_INT 2
49338: DOUBLE
49339: EQUAL
49340: IFTRUE 49344
49342: GO 49382
49344: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
49345: LD_ADDR_VAR 0 3
49349: PUSH
49350: LD_INT 11
49352: PUSH
49353: LD_INT 12
49355: PUSH
49356: LD_INT 13
49358: PUSH
49359: LD_INT 14
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 3
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: ST_TO_ADDR
49380: GO 49511
49382: LD_INT 1
49384: DOUBLE
49385: EQUAL
49386: IFTRUE 49390
49388: GO 49452
49390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
49391: LD_ADDR_VAR 0 3
49395: PUSH
49396: LD_INT 11
49398: PUSH
49399: LD_INT 12
49401: PUSH
49402: LD_INT 13
49404: PUSH
49405: LD_INT 14
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 4
49419: PUSH
49420: LD_INT 5
49422: PUSH
49423: LD_INT 21
49425: PUSH
49426: LD_INT 23
49428: PUSH
49429: LD_INT 22
49431: PUSH
49432: LD_INT 24
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
49450: GO 49511
49452: LD_INT 3
49454: DOUBLE
49455: EQUAL
49456: IFTRUE 49460
49458: GO 49510
49460: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
49461: LD_ADDR_VAR 0 3
49465: PUSH
49466: LD_INT 13
49468: PUSH
49469: LD_INT 14
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 4
49480: PUSH
49481: LD_INT 5
49483: PUSH
49484: LD_INT 21
49486: PUSH
49487: LD_INT 22
49489: PUSH
49490: LD_INT 23
49492: PUSH
49493: LD_INT 24
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
49508: GO 49511
49510: POP
// result := ( chassis in result ) ;
49511: LD_ADDR_VAR 0 3
49515: PUSH
49516: LD_VAR 0 1
49520: PUSH
49521: LD_VAR 0 3
49525: IN
49526: ST_TO_ADDR
// end ;
49527: LD_VAR 0 3
49531: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
49532: LD_INT 0
49534: PPUSH
// if not chassis or not weapon then
49535: LD_VAR 0 1
49539: NOT
49540: PUSH
49541: LD_VAR 0 2
49545: NOT
49546: OR
49547: IFFALSE 49551
// exit ;
49549: GO 50577
// case weapon of us_machine_gun :
49551: LD_VAR 0 2
49555: PUSH
49556: LD_INT 2
49558: DOUBLE
49559: EQUAL
49560: IFTRUE 49564
49562: GO 49594
49564: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
49565: LD_ADDR_VAR 0 3
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 3
49578: PUSH
49579: LD_INT 4
49581: PUSH
49582: LD_INT 5
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
49592: GO 50561
49594: LD_INT 3
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49632
49602: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
49603: LD_ADDR_VAR 0 3
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: LD_INT 4
49619: PUSH
49620: LD_INT 5
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: ST_TO_ADDR
49630: GO 50561
49632: LD_INT 11
49634: DOUBLE
49635: EQUAL
49636: IFTRUE 49640
49638: GO 49670
49640: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
49641: LD_ADDR_VAR 0 3
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 4
49657: PUSH
49658: LD_INT 5
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
49668: GO 50561
49670: LD_INT 4
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49678
49676: GO 49704
49678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
49679: LD_ADDR_VAR 0 3
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: LD_INT 3
49689: PUSH
49690: LD_INT 4
49692: PUSH
49693: LD_INT 5
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: ST_TO_ADDR
49702: GO 50561
49704: LD_INT 5
49706: DOUBLE
49707: EQUAL
49708: IFTRUE 49712
49710: GO 49738
49712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
49713: LD_ADDR_VAR 0 3
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: LD_INT 4
49726: PUSH
49727: LD_INT 5
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
49736: GO 50561
49738: LD_INT 9
49740: DOUBLE
49741: EQUAL
49742: IFTRUE 49746
49744: GO 49772
49746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
49747: LD_ADDR_VAR 0 3
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: LD_INT 3
49757: PUSH
49758: LD_INT 4
49760: PUSH
49761: LD_INT 5
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: ST_TO_ADDR
49770: GO 50561
49772: LD_INT 7
49774: DOUBLE
49775: EQUAL
49776: IFTRUE 49780
49778: GO 49806
49780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
49781: LD_ADDR_VAR 0 3
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 4
49794: PUSH
49795: LD_INT 5
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
49804: GO 50561
49806: LD_INT 12
49808: DOUBLE
49809: EQUAL
49810: IFTRUE 49814
49812: GO 49840
49814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
49815: LD_ADDR_VAR 0 3
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 4
49828: PUSH
49829: LD_INT 5
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: ST_TO_ADDR
49838: GO 50561
49840: LD_INT 13
49842: DOUBLE
49843: EQUAL
49844: IFTRUE 49848
49846: GO 49874
49848: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
49849: LD_ADDR_VAR 0 3
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: LD_INT 5
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: ST_TO_ADDR
49872: GO 50561
49874: LD_INT 14
49876: DOUBLE
49877: EQUAL
49878: IFTRUE 49882
49880: GO 49900
49882: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
49883: LD_ADDR_VAR 0 3
49887: PUSH
49888: LD_INT 4
49890: PUSH
49891: LD_INT 5
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: ST_TO_ADDR
49898: GO 50561
49900: LD_INT 6
49902: DOUBLE
49903: EQUAL
49904: IFTRUE 49908
49906: GO 49926
49908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
49909: LD_ADDR_VAR 0 3
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: LD_INT 5
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: ST_TO_ADDR
49924: GO 50561
49926: LD_INT 10
49928: DOUBLE
49929: EQUAL
49930: IFTRUE 49934
49932: GO 49952
49934: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: LD_INT 4
49942: PUSH
49943: LD_INT 5
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: ST_TO_ADDR
49950: GO 50561
49952: LD_INT 22
49954: DOUBLE
49955: EQUAL
49956: IFTRUE 49960
49958: GO 49986
49960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
49961: LD_ADDR_VAR 0 3
49965: PUSH
49966: LD_INT 11
49968: PUSH
49969: LD_INT 12
49971: PUSH
49972: LD_INT 13
49974: PUSH
49975: LD_INT 14
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
49984: GO 50561
49986: LD_INT 23
49988: DOUBLE
49989: EQUAL
49990: IFTRUE 49994
49992: GO 50020
49994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
49995: LD_ADDR_VAR 0 3
49999: PUSH
50000: LD_INT 11
50002: PUSH
50003: LD_INT 12
50005: PUSH
50006: LD_INT 13
50008: PUSH
50009: LD_INT 14
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: ST_TO_ADDR
50018: GO 50561
50020: LD_INT 24
50022: DOUBLE
50023: EQUAL
50024: IFTRUE 50028
50026: GO 50054
50028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50029: LD_ADDR_VAR 0 3
50033: PUSH
50034: LD_INT 11
50036: PUSH
50037: LD_INT 12
50039: PUSH
50040: LD_INT 13
50042: PUSH
50043: LD_INT 14
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: ST_TO_ADDR
50052: GO 50561
50054: LD_INT 30
50056: DOUBLE
50057: EQUAL
50058: IFTRUE 50062
50060: GO 50088
50062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50063: LD_ADDR_VAR 0 3
50067: PUSH
50068: LD_INT 11
50070: PUSH
50071: LD_INT 12
50073: PUSH
50074: LD_INT 13
50076: PUSH
50077: LD_INT 14
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: ST_TO_ADDR
50086: GO 50561
50088: LD_INT 25
50090: DOUBLE
50091: EQUAL
50092: IFTRUE 50096
50094: GO 50114
50096: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50097: LD_ADDR_VAR 0 3
50101: PUSH
50102: LD_INT 13
50104: PUSH
50105: LD_INT 14
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: ST_TO_ADDR
50112: GO 50561
50114: LD_INT 27
50116: DOUBLE
50117: EQUAL
50118: IFTRUE 50122
50120: GO 50140
50122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50123: LD_ADDR_VAR 0 3
50127: PUSH
50128: LD_INT 13
50130: PUSH
50131: LD_INT 14
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: ST_TO_ADDR
50138: GO 50561
50140: LD_INT 28
50142: DOUBLE
50143: EQUAL
50144: IFTRUE 50148
50146: GO 50166
50148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50149: LD_ADDR_VAR 0 3
50153: PUSH
50154: LD_INT 13
50156: PUSH
50157: LD_INT 14
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: ST_TO_ADDR
50164: GO 50561
50166: LD_INT 29
50168: DOUBLE
50169: EQUAL
50170: IFTRUE 50174
50172: GO 50192
50174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50175: LD_ADDR_VAR 0 3
50179: PUSH
50180: LD_INT 13
50182: PUSH
50183: LD_INT 14
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: ST_TO_ADDR
50190: GO 50561
50192: LD_INT 31
50194: DOUBLE
50195: EQUAL
50196: IFTRUE 50200
50198: GO 50218
50200: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50201: LD_ADDR_VAR 0 3
50205: PUSH
50206: LD_INT 13
50208: PUSH
50209: LD_INT 14
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: ST_TO_ADDR
50216: GO 50561
50218: LD_INT 26
50220: DOUBLE
50221: EQUAL
50222: IFTRUE 50226
50224: GO 50244
50226: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50227: LD_ADDR_VAR 0 3
50231: PUSH
50232: LD_INT 13
50234: PUSH
50235: LD_INT 14
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: ST_TO_ADDR
50242: GO 50561
50244: LD_INT 42
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50278
50252: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
50253: LD_ADDR_VAR 0 3
50257: PUSH
50258: LD_INT 21
50260: PUSH
50261: LD_INT 22
50263: PUSH
50264: LD_INT 23
50266: PUSH
50267: LD_INT 24
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: ST_TO_ADDR
50276: GO 50561
50278: LD_INT 43
50280: DOUBLE
50281: EQUAL
50282: IFTRUE 50286
50284: GO 50312
50286: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
50287: LD_ADDR_VAR 0 3
50291: PUSH
50292: LD_INT 21
50294: PUSH
50295: LD_INT 22
50297: PUSH
50298: LD_INT 23
50300: PUSH
50301: LD_INT 24
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: ST_TO_ADDR
50310: GO 50561
50312: LD_INT 44
50314: DOUBLE
50315: EQUAL
50316: IFTRUE 50320
50318: GO 50346
50320: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
50321: LD_ADDR_VAR 0 3
50325: PUSH
50326: LD_INT 21
50328: PUSH
50329: LD_INT 22
50331: PUSH
50332: LD_INT 23
50334: PUSH
50335: LD_INT 24
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: ST_TO_ADDR
50344: GO 50561
50346: LD_INT 45
50348: DOUBLE
50349: EQUAL
50350: IFTRUE 50354
50352: GO 50380
50354: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
50355: LD_ADDR_VAR 0 3
50359: PUSH
50360: LD_INT 21
50362: PUSH
50363: LD_INT 22
50365: PUSH
50366: LD_INT 23
50368: PUSH
50369: LD_INT 24
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
50378: GO 50561
50380: LD_INT 49
50382: DOUBLE
50383: EQUAL
50384: IFTRUE 50388
50386: GO 50414
50388: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
50389: LD_ADDR_VAR 0 3
50393: PUSH
50394: LD_INT 21
50396: PUSH
50397: LD_INT 22
50399: PUSH
50400: LD_INT 23
50402: PUSH
50403: LD_INT 24
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: ST_TO_ADDR
50412: GO 50561
50414: LD_INT 51
50416: DOUBLE
50417: EQUAL
50418: IFTRUE 50422
50420: GO 50448
50422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
50423: LD_ADDR_VAR 0 3
50427: PUSH
50428: LD_INT 21
50430: PUSH
50431: LD_INT 22
50433: PUSH
50434: LD_INT 23
50436: PUSH
50437: LD_INT 24
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
50446: GO 50561
50448: LD_INT 52
50450: DOUBLE
50451: EQUAL
50452: IFTRUE 50456
50454: GO 50482
50456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
50457: LD_ADDR_VAR 0 3
50461: PUSH
50462: LD_INT 21
50464: PUSH
50465: LD_INT 22
50467: PUSH
50468: LD_INT 23
50470: PUSH
50471: LD_INT 24
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: ST_TO_ADDR
50480: GO 50561
50482: LD_INT 53
50484: DOUBLE
50485: EQUAL
50486: IFTRUE 50490
50488: GO 50508
50490: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
50491: LD_ADDR_VAR 0 3
50495: PUSH
50496: LD_INT 23
50498: PUSH
50499: LD_INT 24
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: ST_TO_ADDR
50506: GO 50561
50508: LD_INT 46
50510: DOUBLE
50511: EQUAL
50512: IFTRUE 50516
50514: GO 50534
50516: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
50517: LD_ADDR_VAR 0 3
50521: PUSH
50522: LD_INT 23
50524: PUSH
50525: LD_INT 24
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: ST_TO_ADDR
50532: GO 50561
50534: LD_INT 47
50536: DOUBLE
50537: EQUAL
50538: IFTRUE 50542
50540: GO 50560
50542: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50543: LD_ADDR_VAR 0 3
50547: PUSH
50548: LD_INT 23
50550: PUSH
50551: LD_INT 24
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: ST_TO_ADDR
50558: GO 50561
50560: POP
// result := ( chassis in result ) ;
50561: LD_ADDR_VAR 0 3
50565: PUSH
50566: LD_VAR 0 1
50570: PUSH
50571: LD_VAR 0 3
50575: IN
50576: ST_TO_ADDR
// end ;
50577: LD_VAR 0 3
50581: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
50582: LD_INT 0
50584: PPUSH
50585: PPUSH
50586: PPUSH
50587: PPUSH
50588: PPUSH
50589: PPUSH
50590: PPUSH
// result := array ;
50591: LD_ADDR_VAR 0 5
50595: PUSH
50596: LD_VAR 0 1
50600: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
50601: LD_VAR 0 1
50605: NOT
50606: PUSH
50607: LD_VAR 0 2
50611: NOT
50612: OR
50613: PUSH
50614: LD_VAR 0 3
50618: NOT
50619: OR
50620: PUSH
50621: LD_VAR 0 2
50625: PUSH
50626: LD_VAR 0 1
50630: GREATER
50631: OR
50632: PUSH
50633: LD_VAR 0 3
50637: PUSH
50638: LD_VAR 0 1
50642: GREATER
50643: OR
50644: IFFALSE 50648
// exit ;
50646: GO 50944
// if direction then
50648: LD_VAR 0 4
50652: IFFALSE 50716
// begin d := 1 ;
50654: LD_ADDR_VAR 0 9
50658: PUSH
50659: LD_INT 1
50661: ST_TO_ADDR
// if i_from > i_to then
50662: LD_VAR 0 2
50666: PUSH
50667: LD_VAR 0 3
50671: GREATER
50672: IFFALSE 50698
// length := ( array - i_from ) + i_to else
50674: LD_ADDR_VAR 0 11
50678: PUSH
50679: LD_VAR 0 1
50683: PUSH
50684: LD_VAR 0 2
50688: MINUS
50689: PUSH
50690: LD_VAR 0 3
50694: PLUS
50695: ST_TO_ADDR
50696: GO 50714
// length := i_to - i_from ;
50698: LD_ADDR_VAR 0 11
50702: PUSH
50703: LD_VAR 0 3
50707: PUSH
50708: LD_VAR 0 2
50712: MINUS
50713: ST_TO_ADDR
// end else
50714: GO 50777
// begin d := - 1 ;
50716: LD_ADDR_VAR 0 9
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: ST_TO_ADDR
// if i_from > i_to then
50725: LD_VAR 0 2
50729: PUSH
50730: LD_VAR 0 3
50734: GREATER
50735: IFFALSE 50755
// length := i_from - i_to else
50737: LD_ADDR_VAR 0 11
50741: PUSH
50742: LD_VAR 0 2
50746: PUSH
50747: LD_VAR 0 3
50751: MINUS
50752: ST_TO_ADDR
50753: GO 50777
// length := ( array - i_to ) + i_from ;
50755: LD_ADDR_VAR 0 11
50759: PUSH
50760: LD_VAR 0 1
50764: PUSH
50765: LD_VAR 0 3
50769: MINUS
50770: PUSH
50771: LD_VAR 0 2
50775: PLUS
50776: ST_TO_ADDR
// end ; if not length then
50777: LD_VAR 0 11
50781: NOT
50782: IFFALSE 50786
// exit ;
50784: GO 50944
// tmp := array ;
50786: LD_ADDR_VAR 0 10
50790: PUSH
50791: LD_VAR 0 1
50795: ST_TO_ADDR
// for i = 1 to length do
50796: LD_ADDR_VAR 0 6
50800: PUSH
50801: DOUBLE
50802: LD_INT 1
50804: DEC
50805: ST_TO_ADDR
50806: LD_VAR 0 11
50810: PUSH
50811: FOR_TO
50812: IFFALSE 50932
// begin for j = 1 to array do
50814: LD_ADDR_VAR 0 7
50818: PUSH
50819: DOUBLE
50820: LD_INT 1
50822: DEC
50823: ST_TO_ADDR
50824: LD_VAR 0 1
50828: PUSH
50829: FOR_TO
50830: IFFALSE 50918
// begin k := j + d ;
50832: LD_ADDR_VAR 0 8
50836: PUSH
50837: LD_VAR 0 7
50841: PUSH
50842: LD_VAR 0 9
50846: PLUS
50847: ST_TO_ADDR
// if k > array then
50848: LD_VAR 0 8
50852: PUSH
50853: LD_VAR 0 1
50857: GREATER
50858: IFFALSE 50868
// k := 1 ;
50860: LD_ADDR_VAR 0 8
50864: PUSH
50865: LD_INT 1
50867: ST_TO_ADDR
// if not k then
50868: LD_VAR 0 8
50872: NOT
50873: IFFALSE 50885
// k := array ;
50875: LD_ADDR_VAR 0 8
50879: PUSH
50880: LD_VAR 0 1
50884: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
50885: LD_ADDR_VAR 0 10
50889: PUSH
50890: LD_VAR 0 10
50894: PPUSH
50895: LD_VAR 0 8
50899: PPUSH
50900: LD_VAR 0 1
50904: PUSH
50905: LD_VAR 0 7
50909: ARRAY
50910: PPUSH
50911: CALL_OW 1
50915: ST_TO_ADDR
// end ;
50916: GO 50829
50918: POP
50919: POP
// array := tmp ;
50920: LD_ADDR_VAR 0 1
50924: PUSH
50925: LD_VAR 0 10
50929: ST_TO_ADDR
// end ;
50930: GO 50811
50932: POP
50933: POP
// result := array ;
50934: LD_ADDR_VAR 0 5
50938: PUSH
50939: LD_VAR 0 1
50943: ST_TO_ADDR
// end ;
50944: LD_VAR 0 5
50948: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
50949: LD_INT 0
50951: PPUSH
50952: PPUSH
// result := 0 ;
50953: LD_ADDR_VAR 0 3
50957: PUSH
50958: LD_INT 0
50960: ST_TO_ADDR
// if not array or not value in array then
50961: LD_VAR 0 1
50965: NOT
50966: PUSH
50967: LD_VAR 0 2
50971: PUSH
50972: LD_VAR 0 1
50976: IN
50977: NOT
50978: OR
50979: IFFALSE 50983
// exit ;
50981: GO 51037
// for i = 1 to array do
50983: LD_ADDR_VAR 0 4
50987: PUSH
50988: DOUBLE
50989: LD_INT 1
50991: DEC
50992: ST_TO_ADDR
50993: LD_VAR 0 1
50997: PUSH
50998: FOR_TO
50999: IFFALSE 51035
// if value = array [ i ] then
51001: LD_VAR 0 2
51005: PUSH
51006: LD_VAR 0 1
51010: PUSH
51011: LD_VAR 0 4
51015: ARRAY
51016: EQUAL
51017: IFFALSE 51033
// begin result := i ;
51019: LD_ADDR_VAR 0 3
51023: PUSH
51024: LD_VAR 0 4
51028: ST_TO_ADDR
// exit ;
51029: POP
51030: POP
51031: GO 51037
// end ;
51033: GO 50998
51035: POP
51036: POP
// end ;
51037: LD_VAR 0 3
51041: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51042: LD_INT 0
51044: PPUSH
// vc_chassis := chassis ;
51045: LD_ADDR_OWVAR 37
51049: PUSH
51050: LD_VAR 0 1
51054: ST_TO_ADDR
// vc_engine := engine ;
51055: LD_ADDR_OWVAR 39
51059: PUSH
51060: LD_VAR 0 2
51064: ST_TO_ADDR
// vc_control := control ;
51065: LD_ADDR_OWVAR 38
51069: PUSH
51070: LD_VAR 0 3
51074: ST_TO_ADDR
// vc_weapon := weapon ;
51075: LD_ADDR_OWVAR 40
51079: PUSH
51080: LD_VAR 0 4
51084: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51085: LD_ADDR_OWVAR 41
51089: PUSH
51090: LD_VAR 0 5
51094: ST_TO_ADDR
// end ;
51095: LD_VAR 0 6
51099: RET
// export function WantPlant ( unit ) ; var task ; begin
51100: LD_INT 0
51102: PPUSH
51103: PPUSH
// result := false ;
51104: LD_ADDR_VAR 0 2
51108: PUSH
51109: LD_INT 0
51111: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51112: LD_ADDR_VAR 0 3
51116: PUSH
51117: LD_VAR 0 1
51121: PPUSH
51122: CALL_OW 437
51126: ST_TO_ADDR
// if task then
51127: LD_VAR 0 3
51131: IFFALSE 51159
// if task [ 1 ] [ 1 ] = p then
51133: LD_VAR 0 3
51137: PUSH
51138: LD_INT 1
51140: ARRAY
51141: PUSH
51142: LD_INT 1
51144: ARRAY
51145: PUSH
51146: LD_STRING p
51148: EQUAL
51149: IFFALSE 51159
// result := true ;
51151: LD_ADDR_VAR 0 2
51155: PUSH
51156: LD_INT 1
51158: ST_TO_ADDR
// end ;
51159: LD_VAR 0 2
51163: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51164: LD_INT 0
51166: PPUSH
51167: PPUSH
51168: PPUSH
51169: PPUSH
// if pos < 1 then
51170: LD_VAR 0 2
51174: PUSH
51175: LD_INT 1
51177: LESS
51178: IFFALSE 51182
// exit ;
51180: GO 51485
// if pos = 1 then
51182: LD_VAR 0 2
51186: PUSH
51187: LD_INT 1
51189: EQUAL
51190: IFFALSE 51223
// result := Replace ( arr , pos [ 1 ] , value ) else
51192: LD_ADDR_VAR 0 4
51196: PUSH
51197: LD_VAR 0 1
51201: PPUSH
51202: LD_VAR 0 2
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: PPUSH
51211: LD_VAR 0 3
51215: PPUSH
51216: CALL_OW 1
51220: ST_TO_ADDR
51221: GO 51485
// begin tmp := arr ;
51223: LD_ADDR_VAR 0 6
51227: PUSH
51228: LD_VAR 0 1
51232: ST_TO_ADDR
// s_arr := [ tmp ] ;
51233: LD_ADDR_VAR 0 7
51237: PUSH
51238: LD_VAR 0 6
51242: PUSH
51243: EMPTY
51244: LIST
51245: ST_TO_ADDR
// for i = 1 to pos - 1 do
51246: LD_ADDR_VAR 0 5
51250: PUSH
51251: DOUBLE
51252: LD_INT 1
51254: DEC
51255: ST_TO_ADDR
51256: LD_VAR 0 2
51260: PUSH
51261: LD_INT 1
51263: MINUS
51264: PUSH
51265: FOR_TO
51266: IFFALSE 51311
// begin tmp := tmp [ pos [ i ] ] ;
51268: LD_ADDR_VAR 0 6
51272: PUSH
51273: LD_VAR 0 6
51277: PUSH
51278: LD_VAR 0 2
51282: PUSH
51283: LD_VAR 0 5
51287: ARRAY
51288: ARRAY
51289: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
51290: LD_ADDR_VAR 0 7
51294: PUSH
51295: LD_VAR 0 7
51299: PUSH
51300: LD_VAR 0 6
51304: PUSH
51305: EMPTY
51306: LIST
51307: ADD
51308: ST_TO_ADDR
// end ;
51309: GO 51265
51311: POP
51312: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
51313: LD_ADDR_VAR 0 6
51317: PUSH
51318: LD_VAR 0 6
51322: PPUSH
51323: LD_VAR 0 2
51327: PUSH
51328: LD_VAR 0 2
51332: ARRAY
51333: PPUSH
51334: LD_VAR 0 3
51338: PPUSH
51339: CALL_OW 1
51343: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
51344: LD_ADDR_VAR 0 7
51348: PUSH
51349: LD_VAR 0 7
51353: PPUSH
51354: LD_VAR 0 7
51358: PPUSH
51359: LD_VAR 0 6
51363: PPUSH
51364: CALL_OW 1
51368: ST_TO_ADDR
// for i = s_arr downto 2 do
51369: LD_ADDR_VAR 0 5
51373: PUSH
51374: DOUBLE
51375: LD_VAR 0 7
51379: INC
51380: ST_TO_ADDR
51381: LD_INT 2
51383: PUSH
51384: FOR_DOWNTO
51385: IFFALSE 51469
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
51387: LD_ADDR_VAR 0 6
51391: PUSH
51392: LD_VAR 0 7
51396: PUSH
51397: LD_VAR 0 5
51401: PUSH
51402: LD_INT 1
51404: MINUS
51405: ARRAY
51406: PPUSH
51407: LD_VAR 0 2
51411: PUSH
51412: LD_VAR 0 5
51416: PUSH
51417: LD_INT 1
51419: MINUS
51420: ARRAY
51421: PPUSH
51422: LD_VAR 0 7
51426: PUSH
51427: LD_VAR 0 5
51431: ARRAY
51432: PPUSH
51433: CALL_OW 1
51437: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
51438: LD_ADDR_VAR 0 7
51442: PUSH
51443: LD_VAR 0 7
51447: PPUSH
51448: LD_VAR 0 5
51452: PUSH
51453: LD_INT 1
51455: MINUS
51456: PPUSH
51457: LD_VAR 0 6
51461: PPUSH
51462: CALL_OW 1
51466: ST_TO_ADDR
// end ;
51467: GO 51384
51469: POP
51470: POP
// result := s_arr [ 1 ] ;
51471: LD_ADDR_VAR 0 4
51475: PUSH
51476: LD_VAR 0 7
51480: PUSH
51481: LD_INT 1
51483: ARRAY
51484: ST_TO_ADDR
// end ; end ;
51485: LD_VAR 0 4
51489: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
51490: LD_INT 0
51492: PPUSH
51493: PPUSH
// if not list then
51494: LD_VAR 0 1
51498: NOT
51499: IFFALSE 51503
// exit ;
51501: GO 51594
// i := list [ pos1 ] ;
51503: LD_ADDR_VAR 0 5
51507: PUSH
51508: LD_VAR 0 1
51512: PUSH
51513: LD_VAR 0 2
51517: ARRAY
51518: ST_TO_ADDR
// if not i then
51519: LD_VAR 0 5
51523: NOT
51524: IFFALSE 51528
// exit ;
51526: GO 51594
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
51528: LD_ADDR_VAR 0 1
51532: PUSH
51533: LD_VAR 0 1
51537: PPUSH
51538: LD_VAR 0 2
51542: PPUSH
51543: LD_VAR 0 1
51547: PUSH
51548: LD_VAR 0 3
51552: ARRAY
51553: PPUSH
51554: CALL_OW 1
51558: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
51559: LD_ADDR_VAR 0 1
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: LD_VAR 0 3
51573: PPUSH
51574: LD_VAR 0 5
51578: PPUSH
51579: CALL_OW 1
51583: ST_TO_ADDR
// result := list ;
51584: LD_ADDR_VAR 0 4
51588: PUSH
51589: LD_VAR 0 1
51593: ST_TO_ADDR
// end ;
51594: LD_VAR 0 4
51598: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
51599: LD_INT 0
51601: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
51602: LD_ADDR_VAR 0 5
51606: PUSH
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 250
51616: PPUSH
51617: LD_VAR 0 1
51621: PPUSH
51622: CALL_OW 251
51626: PPUSH
51627: LD_VAR 0 2
51631: PPUSH
51632: LD_VAR 0 3
51636: PPUSH
51637: LD_VAR 0 4
51641: PPUSH
51642: CALL 51652 0 5
51646: ST_TO_ADDR
// end ;
51647: LD_VAR 0 5
51651: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
51652: LD_INT 0
51654: PPUSH
51655: PPUSH
51656: PPUSH
51657: PPUSH
// if not list then
51658: LD_VAR 0 3
51662: NOT
51663: IFFALSE 51667
// exit ;
51665: GO 52055
// result := [ ] ;
51667: LD_ADDR_VAR 0 6
51671: PUSH
51672: EMPTY
51673: ST_TO_ADDR
// for i in list do
51674: LD_ADDR_VAR 0 7
51678: PUSH
51679: LD_VAR 0 3
51683: PUSH
51684: FOR_IN
51685: IFFALSE 51887
// begin tmp := GetDistUnitXY ( i , x , y ) ;
51687: LD_ADDR_VAR 0 9
51691: PUSH
51692: LD_VAR 0 7
51696: PPUSH
51697: LD_VAR 0 1
51701: PPUSH
51702: LD_VAR 0 2
51706: PPUSH
51707: CALL_OW 297
51711: ST_TO_ADDR
// if not result then
51712: LD_VAR 0 6
51716: NOT
51717: IFFALSE 51743
// result := [ [ i , tmp ] ] else
51719: LD_ADDR_VAR 0 6
51723: PUSH
51724: LD_VAR 0 7
51728: PUSH
51729: LD_VAR 0 9
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: ST_TO_ADDR
51741: GO 51885
// begin if result [ result ] [ 2 ] < tmp then
51743: LD_VAR 0 6
51747: PUSH
51748: LD_VAR 0 6
51752: ARRAY
51753: PUSH
51754: LD_INT 2
51756: ARRAY
51757: PUSH
51758: LD_VAR 0 9
51762: LESS
51763: IFFALSE 51805
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
51765: LD_ADDR_VAR 0 6
51769: PUSH
51770: LD_VAR 0 6
51774: PPUSH
51775: LD_VAR 0 6
51779: PUSH
51780: LD_INT 1
51782: PLUS
51783: PPUSH
51784: LD_VAR 0 7
51788: PUSH
51789: LD_VAR 0 9
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PPUSH
51798: CALL_OW 2
51802: ST_TO_ADDR
51803: GO 51885
// for j = 1 to result do
51805: LD_ADDR_VAR 0 8
51809: PUSH
51810: DOUBLE
51811: LD_INT 1
51813: DEC
51814: ST_TO_ADDR
51815: LD_VAR 0 6
51819: PUSH
51820: FOR_TO
51821: IFFALSE 51883
// begin if tmp < result [ j ] [ 2 ] then
51823: LD_VAR 0 9
51827: PUSH
51828: LD_VAR 0 6
51832: PUSH
51833: LD_VAR 0 8
51837: ARRAY
51838: PUSH
51839: LD_INT 2
51841: ARRAY
51842: LESS
51843: IFFALSE 51881
// begin result := Insert ( result , j , [ i , tmp ] ) ;
51845: LD_ADDR_VAR 0 6
51849: PUSH
51850: LD_VAR 0 6
51854: PPUSH
51855: LD_VAR 0 8
51859: PPUSH
51860: LD_VAR 0 7
51864: PUSH
51865: LD_VAR 0 9
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PPUSH
51874: CALL_OW 2
51878: ST_TO_ADDR
// break ;
51879: GO 51883
// end ; end ;
51881: GO 51820
51883: POP
51884: POP
// end ; end ;
51885: GO 51684
51887: POP
51888: POP
// if result and not asc then
51889: LD_VAR 0 6
51893: PUSH
51894: LD_VAR 0 4
51898: NOT
51899: AND
51900: IFFALSE 51975
// begin tmp := result ;
51902: LD_ADDR_VAR 0 9
51906: PUSH
51907: LD_VAR 0 6
51911: ST_TO_ADDR
// for i = tmp downto 1 do
51912: LD_ADDR_VAR 0 7
51916: PUSH
51917: DOUBLE
51918: LD_VAR 0 9
51922: INC
51923: ST_TO_ADDR
51924: LD_INT 1
51926: PUSH
51927: FOR_DOWNTO
51928: IFFALSE 51973
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
51930: LD_ADDR_VAR 0 6
51934: PUSH
51935: LD_VAR 0 6
51939: PPUSH
51940: LD_VAR 0 9
51944: PUSH
51945: LD_VAR 0 7
51949: MINUS
51950: PUSH
51951: LD_INT 1
51953: PLUS
51954: PPUSH
51955: LD_VAR 0 9
51959: PUSH
51960: LD_VAR 0 7
51964: ARRAY
51965: PPUSH
51966: CALL_OW 1
51970: ST_TO_ADDR
51971: GO 51927
51973: POP
51974: POP
// end ; tmp := [ ] ;
51975: LD_ADDR_VAR 0 9
51979: PUSH
51980: EMPTY
51981: ST_TO_ADDR
// if mode then
51982: LD_VAR 0 5
51986: IFFALSE 52055
// begin for i = 1 to result do
51988: LD_ADDR_VAR 0 7
51992: PUSH
51993: DOUBLE
51994: LD_INT 1
51996: DEC
51997: ST_TO_ADDR
51998: LD_VAR 0 6
52002: PUSH
52003: FOR_TO
52004: IFFALSE 52043
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52006: LD_ADDR_VAR 0 9
52010: PUSH
52011: LD_VAR 0 9
52015: PPUSH
52016: LD_VAR 0 7
52020: PPUSH
52021: LD_VAR 0 6
52025: PUSH
52026: LD_VAR 0 7
52030: ARRAY
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: CALL_OW 1
52040: ST_TO_ADDR
52041: GO 52003
52043: POP
52044: POP
// result := tmp ;
52045: LD_ADDR_VAR 0 6
52049: PUSH
52050: LD_VAR 0 9
52054: ST_TO_ADDR
// end ; end ;
52055: LD_VAR 0 6
52059: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52060: LD_INT 0
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52068: LD_ADDR_VAR 0 5
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// if not x or not y then
52090: LD_VAR 0 2
52094: NOT
52095: PUSH
52096: LD_VAR 0 3
52100: NOT
52101: OR
52102: IFFALSE 52106
// exit ;
52104: GO 53752
// if not range then
52106: LD_VAR 0 4
52110: NOT
52111: IFFALSE 52121
// range := 10 ;
52113: LD_ADDR_VAR 0 4
52117: PUSH
52118: LD_INT 10
52120: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52121: LD_ADDR_VAR 0 8
52125: PUSH
52126: LD_INT 81
52128: PUSH
52129: LD_VAR 0 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 92
52140: PUSH
52141: LD_VAR 0 2
52145: PUSH
52146: LD_VAR 0 3
52150: PUSH
52151: LD_VAR 0 4
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 21
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: LIST
52183: PPUSH
52184: CALL_OW 69
52188: ST_TO_ADDR
// if not tmp then
52189: LD_VAR 0 8
52193: NOT
52194: IFFALSE 52198
// exit ;
52196: GO 53752
// for i in tmp do
52198: LD_ADDR_VAR 0 6
52202: PUSH
52203: LD_VAR 0 8
52207: PUSH
52208: FOR_IN
52209: IFFALSE 53727
// begin points := [ 0 , 0 , 0 ] ;
52211: LD_ADDR_VAR 0 9
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: ST_TO_ADDR
// bpoints := 1 ;
52230: LD_ADDR_VAR 0 10
52234: PUSH
52235: LD_INT 1
52237: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52238: LD_VAR 0 6
52242: PPUSH
52243: CALL_OW 247
52247: PUSH
52248: LD_INT 1
52250: DOUBLE
52251: EQUAL
52252: IFTRUE 52256
52254: GO 52834
52256: POP
// begin if GetClass ( i ) = 1 then
52257: LD_VAR 0 6
52261: PPUSH
52262: CALL_OW 257
52266: PUSH
52267: LD_INT 1
52269: EQUAL
52270: IFFALSE 52291
// points := [ 10 , 5 , 3 ] ;
52272: LD_ADDR_VAR 0 9
52276: PUSH
52277: LD_INT 10
52279: PUSH
52280: LD_INT 5
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
52291: LD_VAR 0 6
52295: PPUSH
52296: CALL_OW 257
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 4
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: IN
52315: IFFALSE 52336
// points := [ 3 , 2 , 1 ] ;
52317: LD_ADDR_VAR 0 9
52321: PUSH
52322: LD_INT 3
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: ST_TO_ADDR
// if GetClass ( i ) = 5 then
52336: LD_VAR 0 6
52340: PPUSH
52341: CALL_OW 257
52345: PUSH
52346: LD_INT 5
52348: EQUAL
52349: IFFALSE 52370
// points := [ 130 , 5 , 2 ] ;
52351: LD_ADDR_VAR 0 9
52355: PUSH
52356: LD_INT 130
52358: PUSH
52359: LD_INT 5
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// if GetClass ( i ) = 8 then
52370: LD_VAR 0 6
52374: PPUSH
52375: CALL_OW 257
52379: PUSH
52380: LD_INT 8
52382: EQUAL
52383: IFFALSE 52404
// points := [ 35 , 35 , 30 ] ;
52385: LD_ADDR_VAR 0 9
52389: PUSH
52390: LD_INT 35
52392: PUSH
52393: LD_INT 35
52395: PUSH
52396: LD_INT 30
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// if GetClass ( i ) = 9 then
52404: LD_VAR 0 6
52408: PPUSH
52409: CALL_OW 257
52413: PUSH
52414: LD_INT 9
52416: EQUAL
52417: IFFALSE 52438
// points := [ 20 , 55 , 40 ] ;
52419: LD_ADDR_VAR 0 9
52423: PUSH
52424: LD_INT 20
52426: PUSH
52427: LD_INT 55
52429: PUSH
52430: LD_INT 40
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
52438: LD_VAR 0 6
52442: PPUSH
52443: CALL_OW 257
52447: PUSH
52448: LD_INT 12
52450: PUSH
52451: LD_INT 16
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: IN
52458: IFFALSE 52479
// points := [ 5 , 3 , 2 ] ;
52460: LD_ADDR_VAR 0 9
52464: PUSH
52465: LD_INT 5
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// if GetClass ( i ) = 17 then
52479: LD_VAR 0 6
52483: PPUSH
52484: CALL_OW 257
52488: PUSH
52489: LD_INT 17
52491: EQUAL
52492: IFFALSE 52513
// points := [ 100 , 50 , 75 ] ;
52494: LD_ADDR_VAR 0 9
52498: PUSH
52499: LD_INT 100
52501: PUSH
52502: LD_INT 50
52504: PUSH
52505: LD_INT 75
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// if GetClass ( i ) = 15 then
52513: LD_VAR 0 6
52517: PPUSH
52518: CALL_OW 257
52522: PUSH
52523: LD_INT 15
52525: EQUAL
52526: IFFALSE 52547
// points := [ 10 , 5 , 3 ] ;
52528: LD_ADDR_VAR 0 9
52532: PUSH
52533: LD_INT 10
52535: PUSH
52536: LD_INT 5
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: ST_TO_ADDR
// if GetClass ( i ) = 14 then
52547: LD_VAR 0 6
52551: PPUSH
52552: CALL_OW 257
52556: PUSH
52557: LD_INT 14
52559: EQUAL
52560: IFFALSE 52581
// points := [ 10 , 0 , 0 ] ;
52562: LD_ADDR_VAR 0 9
52566: PUSH
52567: LD_INT 10
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// if GetClass ( i ) = 11 then
52581: LD_VAR 0 6
52585: PPUSH
52586: CALL_OW 257
52590: PUSH
52591: LD_INT 11
52593: EQUAL
52594: IFFALSE 52615
// points := [ 30 , 10 , 5 ] ;
52596: LD_ADDR_VAR 0 9
52600: PUSH
52601: LD_INT 30
52603: PUSH
52604: LD_INT 10
52606: PUSH
52607: LD_INT 5
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: LIST
52614: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
52615: LD_VAR 0 1
52619: PPUSH
52620: LD_INT 5
52622: PPUSH
52623: CALL_OW 321
52627: PUSH
52628: LD_INT 2
52630: EQUAL
52631: IFFALSE 52648
// bpoints := bpoints * 1.8 ;
52633: LD_ADDR_VAR 0 10
52637: PUSH
52638: LD_VAR 0 10
52642: PUSH
52643: LD_REAL  1.80000000000000E+0000
52646: MUL
52647: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
52648: LD_VAR 0 6
52652: PPUSH
52653: CALL_OW 257
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: LD_INT 4
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: IN
52676: PUSH
52677: LD_VAR 0 1
52681: PPUSH
52682: LD_INT 51
52684: PPUSH
52685: CALL_OW 321
52689: PUSH
52690: LD_INT 2
52692: EQUAL
52693: AND
52694: IFFALSE 52711
// bpoints := bpoints * 1.2 ;
52696: LD_ADDR_VAR 0 10
52700: PUSH
52701: LD_VAR 0 10
52705: PUSH
52706: LD_REAL  1.20000000000000E+0000
52709: MUL
52710: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
52711: LD_VAR 0 6
52715: PPUSH
52716: CALL_OW 257
52720: PUSH
52721: LD_INT 5
52723: PUSH
52724: LD_INT 7
52726: PUSH
52727: LD_INT 9
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: IN
52735: PUSH
52736: LD_VAR 0 1
52740: PPUSH
52741: LD_INT 52
52743: PPUSH
52744: CALL_OW 321
52748: PUSH
52749: LD_INT 2
52751: EQUAL
52752: AND
52753: IFFALSE 52770
// bpoints := bpoints * 1.5 ;
52755: LD_ADDR_VAR 0 10
52759: PUSH
52760: LD_VAR 0 10
52764: PUSH
52765: LD_REAL  1.50000000000000E+0000
52768: MUL
52769: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
52770: LD_VAR 0 1
52774: PPUSH
52775: LD_INT 66
52777: PPUSH
52778: CALL_OW 321
52782: PUSH
52783: LD_INT 2
52785: EQUAL
52786: IFFALSE 52803
// bpoints := bpoints * 1.1 ;
52788: LD_ADDR_VAR 0 10
52792: PUSH
52793: LD_VAR 0 10
52797: PUSH
52798: LD_REAL  1.10000000000000E+0000
52801: MUL
52802: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
52803: LD_ADDR_VAR 0 10
52807: PUSH
52808: LD_VAR 0 10
52812: PUSH
52813: LD_VAR 0 6
52817: PPUSH
52818: LD_INT 1
52820: PPUSH
52821: CALL_OW 259
52825: PUSH
52826: LD_REAL  1.15000000000000E+0000
52829: MUL
52830: MUL
52831: ST_TO_ADDR
// end ; unit_vehicle :
52832: GO 53656
52834: LD_INT 2
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 53644
52842: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
52843: LD_VAR 0 6
52847: PPUSH
52848: CALL_OW 264
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 42
52858: PUSH
52859: LD_INT 24
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: IN
52867: IFFALSE 52888
// points := [ 25 , 5 , 3 ] ;
52869: LD_ADDR_VAR 0 9
52873: PUSH
52874: LD_INT 25
52876: PUSH
52877: LD_INT 5
52879: PUSH
52880: LD_INT 3
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
52888: LD_VAR 0 6
52892: PPUSH
52893: CALL_OW 264
52897: PUSH
52898: LD_INT 4
52900: PUSH
52901: LD_INT 43
52903: PUSH
52904: LD_INT 25
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: IN
52912: IFFALSE 52933
// points := [ 40 , 15 , 5 ] ;
52914: LD_ADDR_VAR 0 9
52918: PUSH
52919: LD_INT 40
52921: PUSH
52922: LD_INT 15
52924: PUSH
52925: LD_INT 5
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
52933: LD_VAR 0 6
52937: PPUSH
52938: CALL_OW 264
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 23
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: IN
52953: IFFALSE 52974
// points := [ 7 , 25 , 8 ] ;
52955: LD_ADDR_VAR 0 9
52959: PUSH
52960: LD_INT 7
52962: PUSH
52963: LD_INT 25
52965: PUSH
52966: LD_INT 8
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
52974: LD_VAR 0 6
52978: PPUSH
52979: CALL_OW 264
52983: PUSH
52984: LD_INT 5
52986: PUSH
52987: LD_INT 27
52989: PUSH
52990: LD_INT 44
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: IN
52998: IFFALSE 53019
// points := [ 14 , 50 , 16 ] ;
53000: LD_ADDR_VAR 0 9
53004: PUSH
53005: LD_INT 14
53007: PUSH
53008: LD_INT 50
53010: PUSH
53011: LD_INT 16
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: LIST
53018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53019: LD_VAR 0 6
53023: PPUSH
53024: CALL_OW 264
53028: PUSH
53029: LD_INT 6
53031: PUSH
53032: LD_INT 46
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: IN
53039: IFFALSE 53060
// points := [ 32 , 120 , 70 ] ;
53041: LD_ADDR_VAR 0 9
53045: PUSH
53046: LD_INT 32
53048: PUSH
53049: LD_INT 120
53051: PUSH
53052: LD_INT 70
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: LIST
53059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53060: LD_VAR 0 6
53064: PPUSH
53065: CALL_OW 264
53069: PUSH
53070: LD_INT 7
53072: PUSH
53073: LD_INT 28
53075: PUSH
53076: LD_INT 45
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: IN
53084: IFFALSE 53105
// points := [ 35 , 20 , 45 ] ;
53086: LD_ADDR_VAR 0 9
53090: PUSH
53091: LD_INT 35
53093: PUSH
53094: LD_INT 20
53096: PUSH
53097: LD_INT 45
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53105: LD_VAR 0 6
53109: PPUSH
53110: CALL_OW 264
53114: PUSH
53115: LD_INT 47
53117: PUSH
53118: EMPTY
53119: LIST
53120: IN
53121: IFFALSE 53142
// points := [ 67 , 45 , 75 ] ;
53123: LD_ADDR_VAR 0 9
53127: PUSH
53128: LD_INT 67
53130: PUSH
53131: LD_INT 45
53133: PUSH
53134: LD_INT 75
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53142: LD_VAR 0 6
53146: PPUSH
53147: CALL_OW 264
53151: PUSH
53152: LD_INT 26
53154: PUSH
53155: EMPTY
53156: LIST
53157: IN
53158: IFFALSE 53179
// points := [ 120 , 30 , 80 ] ;
53160: LD_ADDR_VAR 0 9
53164: PUSH
53165: LD_INT 120
53167: PUSH
53168: LD_INT 30
53170: PUSH
53171: LD_INT 80
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53179: LD_VAR 0 6
53183: PPUSH
53184: CALL_OW 264
53188: PUSH
53189: LD_INT 22
53191: PUSH
53192: EMPTY
53193: LIST
53194: IN
53195: IFFALSE 53216
// points := [ 40 , 1 , 1 ] ;
53197: LD_ADDR_VAR 0 9
53201: PUSH
53202: LD_INT 40
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53216: LD_VAR 0 6
53220: PPUSH
53221: CALL_OW 264
53225: PUSH
53226: LD_INT 29
53228: PUSH
53229: EMPTY
53230: LIST
53231: IN
53232: IFFALSE 53253
// points := [ 70 , 200 , 400 ] ;
53234: LD_ADDR_VAR 0 9
53238: PUSH
53239: LD_INT 70
53241: PUSH
53242: LD_INT 200
53244: PUSH
53245: LD_INT 400
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
53253: LD_VAR 0 6
53257: PPUSH
53258: CALL_OW 264
53262: PUSH
53263: LD_INT 14
53265: PUSH
53266: LD_INT 53
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: IN
53273: IFFALSE 53294
// points := [ 40 , 10 , 20 ] ;
53275: LD_ADDR_VAR 0 9
53279: PUSH
53280: LD_INT 40
53282: PUSH
53283: LD_INT 10
53285: PUSH
53286: LD_INT 20
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
53294: LD_VAR 0 6
53298: PPUSH
53299: CALL_OW 264
53303: PUSH
53304: LD_INT 9
53306: PUSH
53307: EMPTY
53308: LIST
53309: IN
53310: IFFALSE 53331
// points := [ 5 , 70 , 20 ] ;
53312: LD_ADDR_VAR 0 9
53316: PUSH
53317: LD_INT 5
53319: PUSH
53320: LD_INT 70
53322: PUSH
53323: LD_INT 20
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
53331: LD_VAR 0 6
53335: PPUSH
53336: CALL_OW 264
53340: PUSH
53341: LD_INT 10
53343: PUSH
53344: EMPTY
53345: LIST
53346: IN
53347: IFFALSE 53368
// points := [ 35 , 110 , 70 ] ;
53349: LD_ADDR_VAR 0 9
53353: PUSH
53354: LD_INT 35
53356: PUSH
53357: LD_INT 110
53359: PUSH
53360: LD_INT 70
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
53368: LD_VAR 0 6
53372: PPUSH
53373: CALL_OW 265
53377: PUSH
53378: LD_INT 25
53380: EQUAL
53381: IFFALSE 53402
// points := [ 80 , 65 , 100 ] ;
53383: LD_ADDR_VAR 0 9
53387: PUSH
53388: LD_INT 80
53390: PUSH
53391: LD_INT 65
53393: PUSH
53394: LD_INT 100
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
53402: LD_VAR 0 6
53406: PPUSH
53407: CALL_OW 263
53411: PUSH
53412: LD_INT 1
53414: EQUAL
53415: IFFALSE 53450
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
53417: LD_ADDR_VAR 0 10
53421: PUSH
53422: LD_VAR 0 10
53426: PUSH
53427: LD_VAR 0 6
53431: PPUSH
53432: CALL_OW 311
53436: PPUSH
53437: LD_INT 3
53439: PPUSH
53440: CALL_OW 259
53444: PUSH
53445: LD_INT 4
53447: MUL
53448: MUL
53449: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
53450: LD_VAR 0 6
53454: PPUSH
53455: CALL_OW 263
53459: PUSH
53460: LD_INT 2
53462: EQUAL
53463: IFFALSE 53514
// begin j := IsControledBy ( i ) ;
53465: LD_ADDR_VAR 0 7
53469: PUSH
53470: LD_VAR 0 6
53474: PPUSH
53475: CALL_OW 312
53479: ST_TO_ADDR
// if j then
53480: LD_VAR 0 7
53484: IFFALSE 53514
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
53486: LD_ADDR_VAR 0 10
53490: PUSH
53491: LD_VAR 0 10
53495: PUSH
53496: LD_VAR 0 7
53500: PPUSH
53501: LD_INT 3
53503: PPUSH
53504: CALL_OW 259
53508: PUSH
53509: LD_INT 3
53511: MUL
53512: MUL
53513: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
53514: LD_VAR 0 6
53518: PPUSH
53519: CALL_OW 264
53523: PUSH
53524: LD_INT 5
53526: PUSH
53527: LD_INT 6
53529: PUSH
53530: LD_INT 46
53532: PUSH
53533: LD_INT 44
53535: PUSH
53536: LD_INT 47
53538: PUSH
53539: LD_INT 45
53541: PUSH
53542: LD_INT 28
53544: PUSH
53545: LD_INT 7
53547: PUSH
53548: LD_INT 27
53550: PUSH
53551: LD_INT 29
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: IN
53566: PUSH
53567: LD_VAR 0 1
53571: PPUSH
53572: LD_INT 52
53574: PPUSH
53575: CALL_OW 321
53579: PUSH
53580: LD_INT 2
53582: EQUAL
53583: AND
53584: IFFALSE 53601
// bpoints := bpoints * 1.2 ;
53586: LD_ADDR_VAR 0 10
53590: PUSH
53591: LD_VAR 0 10
53595: PUSH
53596: LD_REAL  1.20000000000000E+0000
53599: MUL
53600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
53601: LD_VAR 0 6
53605: PPUSH
53606: CALL_OW 264
53610: PUSH
53611: LD_INT 6
53613: PUSH
53614: LD_INT 46
53616: PUSH
53617: LD_INT 47
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: LIST
53624: IN
53625: IFFALSE 53642
// bpoints := bpoints * 1.2 ;
53627: LD_ADDR_VAR 0 10
53631: PUSH
53632: LD_VAR 0 10
53636: PUSH
53637: LD_REAL  1.20000000000000E+0000
53640: MUL
53641: ST_TO_ADDR
// end ; unit_building :
53642: GO 53656
53644: LD_INT 3
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53652
53650: GO 53655
53652: POP
// ; end ;
53653: GO 53656
53655: POP
// for j = 1 to 3 do
53656: LD_ADDR_VAR 0 7
53660: PUSH
53661: DOUBLE
53662: LD_INT 1
53664: DEC
53665: ST_TO_ADDR
53666: LD_INT 3
53668: PUSH
53669: FOR_TO
53670: IFFALSE 53723
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
53672: LD_ADDR_VAR 0 5
53676: PUSH
53677: LD_VAR 0 5
53681: PPUSH
53682: LD_VAR 0 7
53686: PPUSH
53687: LD_VAR 0 5
53691: PUSH
53692: LD_VAR 0 7
53696: ARRAY
53697: PUSH
53698: LD_VAR 0 9
53702: PUSH
53703: LD_VAR 0 7
53707: ARRAY
53708: PUSH
53709: LD_VAR 0 10
53713: MUL
53714: PLUS
53715: PPUSH
53716: CALL_OW 1
53720: ST_TO_ADDR
53721: GO 53669
53723: POP
53724: POP
// end ;
53725: GO 52208
53727: POP
53728: POP
// result := Replace ( result , 4 , tmp ) ;
53729: LD_ADDR_VAR 0 5
53733: PUSH
53734: LD_VAR 0 5
53738: PPUSH
53739: LD_INT 4
53741: PPUSH
53742: LD_VAR 0 8
53746: PPUSH
53747: CALL_OW 1
53751: ST_TO_ADDR
// end ;
53752: LD_VAR 0 5
53756: RET
// export function DangerAtRange ( unit , range ) ; begin
53757: LD_INT 0
53759: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
53760: LD_ADDR_VAR 0 3
53764: PUSH
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 255
53774: PPUSH
53775: LD_VAR 0 1
53779: PPUSH
53780: CALL_OW 250
53784: PPUSH
53785: LD_VAR 0 1
53789: PPUSH
53790: CALL_OW 251
53794: PPUSH
53795: LD_VAR 0 2
53799: PPUSH
53800: CALL 52060 0 4
53804: ST_TO_ADDR
// end ;
53805: LD_VAR 0 3
53809: RET
// export function DangerInArea ( side , area ) ; begin
53810: LD_INT 0
53812: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
53813: LD_ADDR_VAR 0 3
53817: PUSH
53818: LD_VAR 0 2
53822: PPUSH
53823: LD_INT 81
53825: PUSH
53826: LD_VAR 0 1
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PPUSH
53835: CALL_OW 70
53839: ST_TO_ADDR
// end ;
53840: LD_VAR 0 3
53844: RET
// export function IsExtension ( b ) ; begin
53845: LD_INT 0
53847: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
53848: LD_ADDR_VAR 0 2
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: LD_INT 23
53860: PUSH
53861: LD_INT 20
53863: PUSH
53864: LD_INT 22
53866: PUSH
53867: LD_INT 17
53869: PUSH
53870: LD_INT 24
53872: PUSH
53873: LD_INT 21
53875: PUSH
53876: LD_INT 19
53878: PUSH
53879: LD_INT 16
53881: PUSH
53882: LD_INT 25
53884: PUSH
53885: LD_INT 18
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: IN
53900: ST_TO_ADDR
// end ;
53901: LD_VAR 0 2
53905: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
53906: LD_INT 0
53908: PPUSH
53909: PPUSH
53910: PPUSH
// result := [ ] ;
53911: LD_ADDR_VAR 0 3
53915: PUSH
53916: EMPTY
53917: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
53918: LD_ADDR_VAR 0 4
53922: PUSH
53923: LD_VAR 0 2
53927: PPUSH
53928: LD_INT 21
53930: PUSH
53931: LD_INT 3
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PPUSH
53938: CALL_OW 70
53942: ST_TO_ADDR
// if not tmp then
53943: LD_VAR 0 4
53947: NOT
53948: IFFALSE 53952
// exit ;
53950: GO 54010
// for i in tmp do
53952: LD_ADDR_VAR 0 5
53956: PUSH
53957: LD_VAR 0 4
53961: PUSH
53962: FOR_IN
53963: IFFALSE 53998
// if GetBase ( i ) <> base then
53965: LD_VAR 0 5
53969: PPUSH
53970: CALL_OW 274
53974: PUSH
53975: LD_VAR 0 1
53979: NONEQUAL
53980: IFFALSE 53996
// ComLinkToBase ( base , i ) ;
53982: LD_VAR 0 1
53986: PPUSH
53987: LD_VAR 0 5
53991: PPUSH
53992: CALL_OW 169
53996: GO 53962
53998: POP
53999: POP
// result := tmp ;
54000: LD_ADDR_VAR 0 3
54004: PUSH
54005: LD_VAR 0 4
54009: ST_TO_ADDR
// end ;
54010: LD_VAR 0 3
54014: RET
// export function ComComplete ( unit , b ) ; var i ; begin
54015: LD_INT 0
54017: PPUSH
54018: PPUSH
// if BuildingStatus ( b ) = bs_build then
54019: LD_VAR 0 2
54023: PPUSH
54024: CALL_OW 461
54028: PUSH
54029: LD_INT 1
54031: EQUAL
54032: IFFALSE 54092
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54034: LD_VAR 0 1
54038: PPUSH
54039: LD_STRING h
54041: PUSH
54042: LD_VAR 0 2
54046: PPUSH
54047: CALL_OW 250
54051: PUSH
54052: LD_VAR 0 2
54056: PPUSH
54057: CALL_OW 251
54061: PUSH
54062: LD_VAR 0 2
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: PUSH
54085: EMPTY
54086: LIST
54087: PPUSH
54088: CALL_OW 446
// end ;
54092: LD_VAR 0 3
54096: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54097: LD_INT 0
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54105: LD_VAR 0 1
54109: NOT
54110: PUSH
54111: LD_VAR 0 1
54115: PPUSH
54116: CALL_OW 263
54120: PUSH
54121: LD_INT 2
54123: EQUAL
54124: NOT
54125: OR
54126: IFFALSE 54130
// exit ;
54128: GO 54446
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54130: LD_ADDR_VAR 0 6
54134: PUSH
54135: LD_INT 22
54137: PUSH
54138: LD_VAR 0 1
54142: PPUSH
54143: CALL_OW 255
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: LD_INT 30
54157: PUSH
54158: LD_INT 36
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 34
54167: PUSH
54168: LD_INT 31
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PPUSH
54184: CALL_OW 69
54188: ST_TO_ADDR
// if not tmp then
54189: LD_VAR 0 6
54193: NOT
54194: IFFALSE 54198
// exit ;
54196: GO 54446
// result := [ ] ;
54198: LD_ADDR_VAR 0 2
54202: PUSH
54203: EMPTY
54204: ST_TO_ADDR
// for i in tmp do
54205: LD_ADDR_VAR 0 3
54209: PUSH
54210: LD_VAR 0 6
54214: PUSH
54215: FOR_IN
54216: IFFALSE 54287
// begin t := UnitsInside ( i ) ;
54218: LD_ADDR_VAR 0 4
54222: PUSH
54223: LD_VAR 0 3
54227: PPUSH
54228: CALL_OW 313
54232: ST_TO_ADDR
// if t then
54233: LD_VAR 0 4
54237: IFFALSE 54285
// for j in t do
54239: LD_ADDR_VAR 0 7
54243: PUSH
54244: LD_VAR 0 4
54248: PUSH
54249: FOR_IN
54250: IFFALSE 54283
// result := Insert ( result , result + 1 , j ) ;
54252: LD_ADDR_VAR 0 2
54256: PUSH
54257: LD_VAR 0 2
54261: PPUSH
54262: LD_VAR 0 2
54266: PUSH
54267: LD_INT 1
54269: PLUS
54270: PPUSH
54271: LD_VAR 0 7
54275: PPUSH
54276: CALL_OW 2
54280: ST_TO_ADDR
54281: GO 54249
54283: POP
54284: POP
// end ;
54285: GO 54215
54287: POP
54288: POP
// if not result then
54289: LD_VAR 0 2
54293: NOT
54294: IFFALSE 54298
// exit ;
54296: GO 54446
// mech := result [ 1 ] ;
54298: LD_ADDR_VAR 0 5
54302: PUSH
54303: LD_VAR 0 2
54307: PUSH
54308: LD_INT 1
54310: ARRAY
54311: ST_TO_ADDR
// if result > 1 then
54312: LD_VAR 0 2
54316: PUSH
54317: LD_INT 1
54319: GREATER
54320: IFFALSE 54432
// for i = 2 to result do
54322: LD_ADDR_VAR 0 3
54326: PUSH
54327: DOUBLE
54328: LD_INT 2
54330: DEC
54331: ST_TO_ADDR
54332: LD_VAR 0 2
54336: PUSH
54337: FOR_TO
54338: IFFALSE 54430
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
54340: LD_ADDR_VAR 0 4
54344: PUSH
54345: LD_VAR 0 2
54349: PUSH
54350: LD_VAR 0 3
54354: ARRAY
54355: PPUSH
54356: LD_INT 3
54358: PPUSH
54359: CALL_OW 259
54363: PUSH
54364: LD_VAR 0 2
54368: PUSH
54369: LD_VAR 0 3
54373: ARRAY
54374: PPUSH
54375: CALL_OW 432
54379: MINUS
54380: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
54381: LD_VAR 0 4
54385: PUSH
54386: LD_VAR 0 5
54390: PPUSH
54391: LD_INT 3
54393: PPUSH
54394: CALL_OW 259
54398: PUSH
54399: LD_VAR 0 5
54403: PPUSH
54404: CALL_OW 432
54408: MINUS
54409: GREATEREQUAL
54410: IFFALSE 54428
// mech := result [ i ] ;
54412: LD_ADDR_VAR 0 5
54416: PUSH
54417: LD_VAR 0 2
54421: PUSH
54422: LD_VAR 0 3
54426: ARRAY
54427: ST_TO_ADDR
// end ;
54428: GO 54337
54430: POP
54431: POP
// ComLinkTo ( vehicle , mech ) ;
54432: LD_VAR 0 1
54436: PPUSH
54437: LD_VAR 0 5
54441: PPUSH
54442: CALL_OW 135
// end ;
54446: LD_VAR 0 2
54450: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
54451: LD_INT 0
54453: PPUSH
54454: PPUSH
54455: PPUSH
54456: PPUSH
54457: PPUSH
54458: PPUSH
54459: PPUSH
54460: PPUSH
54461: PPUSH
54462: PPUSH
54463: PPUSH
54464: PPUSH
54465: PPUSH
// result := [ ] ;
54466: LD_ADDR_VAR 0 7
54470: PUSH
54471: EMPTY
54472: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
54473: LD_VAR 0 1
54477: PPUSH
54478: CALL_OW 266
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: IN
54493: NOT
54494: IFFALSE 54498
// exit ;
54496: GO 56129
// if name then
54498: LD_VAR 0 3
54502: IFFALSE 54518
// SetBName ( base_dep , name ) ;
54504: LD_VAR 0 1
54508: PPUSH
54509: LD_VAR 0 3
54513: PPUSH
54514: CALL_OW 500
// base := GetBase ( base_dep ) ;
54518: LD_ADDR_VAR 0 15
54522: PUSH
54523: LD_VAR 0 1
54527: PPUSH
54528: CALL_OW 274
54532: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
54533: LD_ADDR_VAR 0 16
54537: PUSH
54538: LD_VAR 0 1
54542: PPUSH
54543: CALL_OW 255
54547: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
54548: LD_ADDR_VAR 0 17
54552: PUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: CALL_OW 248
54562: ST_TO_ADDR
// if sources then
54563: LD_VAR 0 5
54567: IFFALSE 54614
// for i = 1 to 3 do
54569: LD_ADDR_VAR 0 8
54573: PUSH
54574: DOUBLE
54575: LD_INT 1
54577: DEC
54578: ST_TO_ADDR
54579: LD_INT 3
54581: PUSH
54582: FOR_TO
54583: IFFALSE 54612
// AddResourceType ( base , i , sources [ i ] ) ;
54585: LD_VAR 0 15
54589: PPUSH
54590: LD_VAR 0 8
54594: PPUSH
54595: LD_VAR 0 5
54599: PUSH
54600: LD_VAR 0 8
54604: ARRAY
54605: PPUSH
54606: CALL_OW 276
54610: GO 54582
54612: POP
54613: POP
// buildings := GetBaseBuildings ( base , area ) ;
54614: LD_ADDR_VAR 0 18
54618: PUSH
54619: LD_VAR 0 15
54623: PPUSH
54624: LD_VAR 0 2
54628: PPUSH
54629: CALL 53906 0 2
54633: ST_TO_ADDR
// InitHc ;
54634: CALL_OW 19
// InitUc ;
54638: CALL_OW 18
// uc_side := side ;
54642: LD_ADDR_OWVAR 20
54646: PUSH
54647: LD_VAR 0 16
54651: ST_TO_ADDR
// uc_nation := nation ;
54652: LD_ADDR_OWVAR 21
54656: PUSH
54657: LD_VAR 0 17
54661: ST_TO_ADDR
// if buildings then
54662: LD_VAR 0 18
54666: IFFALSE 55988
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
54668: LD_ADDR_VAR 0 19
54672: PUSH
54673: LD_VAR 0 18
54677: PPUSH
54678: LD_INT 2
54680: PUSH
54681: LD_INT 30
54683: PUSH
54684: LD_INT 29
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 30
54693: PUSH
54694: LD_INT 30
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: PPUSH
54706: CALL_OW 72
54710: ST_TO_ADDR
// if tmp then
54711: LD_VAR 0 19
54715: IFFALSE 54763
// for i in tmp do
54717: LD_ADDR_VAR 0 8
54721: PUSH
54722: LD_VAR 0 19
54726: PUSH
54727: FOR_IN
54728: IFFALSE 54761
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
54730: LD_VAR 0 8
54734: PPUSH
54735: CALL_OW 250
54739: PPUSH
54740: LD_VAR 0 8
54744: PPUSH
54745: CALL_OW 251
54749: PPUSH
54750: LD_VAR 0 16
54754: PPUSH
54755: CALL_OW 441
54759: GO 54727
54761: POP
54762: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
54763: LD_VAR 0 18
54767: PPUSH
54768: LD_INT 2
54770: PUSH
54771: LD_INT 30
54773: PUSH
54774: LD_INT 32
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 30
54783: PUSH
54784: LD_INT 33
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: PPUSH
54796: CALL_OW 72
54800: IFFALSE 54888
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
54802: LD_ADDR_VAR 0 8
54806: PUSH
54807: LD_VAR 0 18
54811: PPUSH
54812: LD_INT 2
54814: PUSH
54815: LD_INT 30
54817: PUSH
54818: LD_INT 32
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 30
54827: PUSH
54828: LD_INT 33
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: PPUSH
54840: CALL_OW 72
54844: PUSH
54845: FOR_IN
54846: IFFALSE 54886
// begin if not GetBWeapon ( i ) then
54848: LD_VAR 0 8
54852: PPUSH
54853: CALL_OW 269
54857: NOT
54858: IFFALSE 54884
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
54860: LD_VAR 0 8
54864: PPUSH
54865: LD_VAR 0 8
54869: PPUSH
54870: LD_VAR 0 2
54874: PPUSH
54875: CALL 56134 0 2
54879: PPUSH
54880: CALL_OW 431
// end ;
54884: GO 54845
54886: POP
54887: POP
// end ; for i = 1 to personel do
54888: LD_ADDR_VAR 0 8
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_VAR 0 6
54902: PUSH
54903: FOR_TO
54904: IFFALSE 55968
// begin if i > 4 then
54906: LD_VAR 0 8
54910: PUSH
54911: LD_INT 4
54913: GREATER
54914: IFFALSE 54918
// break ;
54916: GO 55968
// case i of 1 :
54918: LD_VAR 0 8
54922: PUSH
54923: LD_INT 1
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 55011
54931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
54932: LD_ADDR_VAR 0 12
54936: PUSH
54937: LD_VAR 0 18
54941: PPUSH
54942: LD_INT 22
54944: PUSH
54945: LD_VAR 0 16
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 58
54956: PUSH
54957: EMPTY
54958: LIST
54959: PUSH
54960: LD_INT 2
54962: PUSH
54963: LD_INT 30
54965: PUSH
54966: LD_INT 32
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 30
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 30
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: LIST
55003: PPUSH
55004: CALL_OW 72
55008: ST_TO_ADDR
55009: GO 55233
55011: LD_INT 2
55013: DOUBLE
55014: EQUAL
55015: IFTRUE 55019
55017: GO 55081
55019: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55020: LD_ADDR_VAR 0 12
55024: PUSH
55025: LD_VAR 0 18
55029: PPUSH
55030: LD_INT 22
55032: PUSH
55033: LD_VAR 0 16
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: LD_INT 30
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 30
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: LIST
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PPUSH
55074: CALL_OW 72
55078: ST_TO_ADDR
55079: GO 55233
55081: LD_INT 3
55083: DOUBLE
55084: EQUAL
55085: IFTRUE 55089
55087: GO 55151
55089: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55090: LD_ADDR_VAR 0 12
55094: PUSH
55095: LD_VAR 0 18
55099: PPUSH
55100: LD_INT 22
55102: PUSH
55103: LD_VAR 0 16
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: PUSH
55115: LD_INT 30
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 30
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PPUSH
55144: CALL_OW 72
55148: ST_TO_ADDR
55149: GO 55233
55151: LD_INT 4
55153: DOUBLE
55154: EQUAL
55155: IFTRUE 55159
55157: GO 55232
55159: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55160: LD_ADDR_VAR 0 12
55164: PUSH
55165: LD_VAR 0 18
55169: PPUSH
55170: LD_INT 22
55172: PUSH
55173: LD_VAR 0 16
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 30
55187: PUSH
55188: LD_INT 6
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 30
55197: PUSH
55198: LD_INT 7
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 30
55207: PUSH
55208: LD_INT 8
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PPUSH
55225: CALL_OW 72
55229: ST_TO_ADDR
55230: GO 55233
55232: POP
// if i = 1 then
55233: LD_VAR 0 8
55237: PUSH
55238: LD_INT 1
55240: EQUAL
55241: IFFALSE 55352
// begin tmp := [ ] ;
55243: LD_ADDR_VAR 0 19
55247: PUSH
55248: EMPTY
55249: ST_TO_ADDR
// for j in f do
55250: LD_ADDR_VAR 0 9
55254: PUSH
55255: LD_VAR 0 12
55259: PUSH
55260: FOR_IN
55261: IFFALSE 55334
// if GetBType ( j ) = b_bunker then
55263: LD_VAR 0 9
55267: PPUSH
55268: CALL_OW 266
55272: PUSH
55273: LD_INT 32
55275: EQUAL
55276: IFFALSE 55303
// tmp := Insert ( tmp , 1 , j ) else
55278: LD_ADDR_VAR 0 19
55282: PUSH
55283: LD_VAR 0 19
55287: PPUSH
55288: LD_INT 1
55290: PPUSH
55291: LD_VAR 0 9
55295: PPUSH
55296: CALL_OW 2
55300: ST_TO_ADDR
55301: GO 55332
// tmp := Insert ( tmp , tmp + 1 , j ) ;
55303: LD_ADDR_VAR 0 19
55307: PUSH
55308: LD_VAR 0 19
55312: PPUSH
55313: LD_VAR 0 19
55317: PUSH
55318: LD_INT 1
55320: PLUS
55321: PPUSH
55322: LD_VAR 0 9
55326: PPUSH
55327: CALL_OW 2
55331: ST_TO_ADDR
55332: GO 55260
55334: POP
55335: POP
// if tmp then
55336: LD_VAR 0 19
55340: IFFALSE 55352
// f := tmp ;
55342: LD_ADDR_VAR 0 12
55346: PUSH
55347: LD_VAR 0 19
55351: ST_TO_ADDR
// end ; x := personel [ i ] ;
55352: LD_ADDR_VAR 0 13
55356: PUSH
55357: LD_VAR 0 6
55361: PUSH
55362: LD_VAR 0 8
55366: ARRAY
55367: ST_TO_ADDR
// if x = - 1 then
55368: LD_VAR 0 13
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: EQUAL
55377: IFFALSE 55586
// begin for j in f do
55379: LD_ADDR_VAR 0 9
55383: PUSH
55384: LD_VAR 0 12
55388: PUSH
55389: FOR_IN
55390: IFFALSE 55582
// repeat InitHc ;
55392: CALL_OW 19
// if GetBType ( j ) = b_barracks then
55396: LD_VAR 0 9
55400: PPUSH
55401: CALL_OW 266
55405: PUSH
55406: LD_INT 5
55408: EQUAL
55409: IFFALSE 55479
// begin if UnitsInside ( j ) < 3 then
55411: LD_VAR 0 9
55415: PPUSH
55416: CALL_OW 313
55420: PUSH
55421: LD_INT 3
55423: LESS
55424: IFFALSE 55460
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55426: LD_INT 0
55428: PPUSH
55429: LD_INT 5
55431: PUSH
55432: LD_INT 8
55434: PUSH
55435: LD_INT 9
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: LIST
55442: PUSH
55443: LD_VAR 0 17
55447: ARRAY
55448: PPUSH
55449: LD_VAR 0 4
55453: PPUSH
55454: CALL_OW 380
55458: GO 55477
// PrepareHuman ( false , i , skill ) ;
55460: LD_INT 0
55462: PPUSH
55463: LD_VAR 0 8
55467: PPUSH
55468: LD_VAR 0 4
55472: PPUSH
55473: CALL_OW 380
// end else
55477: GO 55496
// PrepareHuman ( false , i , skill ) ;
55479: LD_INT 0
55481: PPUSH
55482: LD_VAR 0 8
55486: PPUSH
55487: LD_VAR 0 4
55491: PPUSH
55492: CALL_OW 380
// un := CreateHuman ;
55496: LD_ADDR_VAR 0 14
55500: PUSH
55501: CALL_OW 44
55505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55506: LD_ADDR_VAR 0 7
55510: PUSH
55511: LD_VAR 0 7
55515: PPUSH
55516: LD_INT 1
55518: PPUSH
55519: LD_VAR 0 14
55523: PPUSH
55524: CALL_OW 2
55528: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
55529: LD_VAR 0 14
55533: PPUSH
55534: LD_VAR 0 9
55538: PPUSH
55539: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
55543: LD_VAR 0 9
55547: PPUSH
55548: CALL_OW 313
55552: PUSH
55553: LD_INT 6
55555: EQUAL
55556: PUSH
55557: LD_VAR 0 9
55561: PPUSH
55562: CALL_OW 266
55566: PUSH
55567: LD_INT 32
55569: PUSH
55570: LD_INT 31
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: IN
55577: OR
55578: IFFALSE 55392
55580: GO 55389
55582: POP
55583: POP
// end else
55584: GO 55966
// for j = 1 to x do
55586: LD_ADDR_VAR 0 9
55590: PUSH
55591: DOUBLE
55592: LD_INT 1
55594: DEC
55595: ST_TO_ADDR
55596: LD_VAR 0 13
55600: PUSH
55601: FOR_TO
55602: IFFALSE 55964
// begin InitHc ;
55604: CALL_OW 19
// if not f then
55608: LD_VAR 0 12
55612: NOT
55613: IFFALSE 55702
// begin PrepareHuman ( false , i , skill ) ;
55615: LD_INT 0
55617: PPUSH
55618: LD_VAR 0 8
55622: PPUSH
55623: LD_VAR 0 4
55627: PPUSH
55628: CALL_OW 380
// un := CreateHuman ;
55632: LD_ADDR_VAR 0 14
55636: PUSH
55637: CALL_OW 44
55641: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55642: LD_ADDR_VAR 0 7
55646: PUSH
55647: LD_VAR 0 7
55651: PPUSH
55652: LD_INT 1
55654: PPUSH
55655: LD_VAR 0 14
55659: PPUSH
55660: CALL_OW 2
55664: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
55665: LD_VAR 0 14
55669: PPUSH
55670: LD_VAR 0 1
55674: PPUSH
55675: CALL_OW 250
55679: PPUSH
55680: LD_VAR 0 1
55684: PPUSH
55685: CALL_OW 251
55689: PPUSH
55690: LD_INT 10
55692: PPUSH
55693: LD_INT 0
55695: PPUSH
55696: CALL_OW 50
// continue ;
55700: GO 55601
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
55702: LD_VAR 0 12
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PPUSH
55711: CALL_OW 313
55715: PUSH
55716: LD_VAR 0 12
55720: PUSH
55721: LD_INT 1
55723: ARRAY
55724: PPUSH
55725: CALL_OW 266
55729: PUSH
55730: LD_INT 32
55732: PUSH
55733: LD_INT 31
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: IN
55740: AND
55741: PUSH
55742: LD_VAR 0 12
55746: PUSH
55747: LD_INT 1
55749: ARRAY
55750: PPUSH
55751: CALL_OW 313
55755: PUSH
55756: LD_INT 6
55758: EQUAL
55759: OR
55760: IFFALSE 55780
// f := Delete ( f , 1 ) ;
55762: LD_ADDR_VAR 0 12
55766: PUSH
55767: LD_VAR 0 12
55771: PPUSH
55772: LD_INT 1
55774: PPUSH
55775: CALL_OW 3
55779: ST_TO_ADDR
// if not f then
55780: LD_VAR 0 12
55784: NOT
55785: IFFALSE 55803
// begin x := x + 2 ;
55787: LD_ADDR_VAR 0 13
55791: PUSH
55792: LD_VAR 0 13
55796: PUSH
55797: LD_INT 2
55799: PLUS
55800: ST_TO_ADDR
// continue ;
55801: GO 55601
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
55803: LD_VAR 0 12
55807: PUSH
55808: LD_INT 1
55810: ARRAY
55811: PPUSH
55812: CALL_OW 266
55816: PUSH
55817: LD_INT 5
55819: EQUAL
55820: IFFALSE 55894
// begin if UnitsInside ( f [ 1 ] ) < 3 then
55822: LD_VAR 0 12
55826: PUSH
55827: LD_INT 1
55829: ARRAY
55830: PPUSH
55831: CALL_OW 313
55835: PUSH
55836: LD_INT 3
55838: LESS
55839: IFFALSE 55875
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
55841: LD_INT 0
55843: PPUSH
55844: LD_INT 5
55846: PUSH
55847: LD_INT 8
55849: PUSH
55850: LD_INT 9
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: PUSH
55858: LD_VAR 0 17
55862: ARRAY
55863: PPUSH
55864: LD_VAR 0 4
55868: PPUSH
55869: CALL_OW 380
55873: GO 55892
// PrepareHuman ( false , i , skill ) ;
55875: LD_INT 0
55877: PPUSH
55878: LD_VAR 0 8
55882: PPUSH
55883: LD_VAR 0 4
55887: PPUSH
55888: CALL_OW 380
// end else
55892: GO 55911
// PrepareHuman ( false , i , skill ) ;
55894: LD_INT 0
55896: PPUSH
55897: LD_VAR 0 8
55901: PPUSH
55902: LD_VAR 0 4
55906: PPUSH
55907: CALL_OW 380
// un := CreateHuman ;
55911: LD_ADDR_VAR 0 14
55915: PUSH
55916: CALL_OW 44
55920: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
55921: LD_ADDR_VAR 0 7
55925: PUSH
55926: LD_VAR 0 7
55930: PPUSH
55931: LD_INT 1
55933: PPUSH
55934: LD_VAR 0 14
55938: PPUSH
55939: CALL_OW 2
55943: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
55944: LD_VAR 0 14
55948: PPUSH
55949: LD_VAR 0 12
55953: PUSH
55954: LD_INT 1
55956: ARRAY
55957: PPUSH
55958: CALL_OW 52
// end ;
55962: GO 55601
55964: POP
55965: POP
// end ;
55966: GO 54903
55968: POP
55969: POP
// result := result ^ buildings ;
55970: LD_ADDR_VAR 0 7
55974: PUSH
55975: LD_VAR 0 7
55979: PUSH
55980: LD_VAR 0 18
55984: ADD
55985: ST_TO_ADDR
// end else
55986: GO 56129
// begin for i = 1 to personel do
55988: LD_ADDR_VAR 0 8
55992: PUSH
55993: DOUBLE
55994: LD_INT 1
55996: DEC
55997: ST_TO_ADDR
55998: LD_VAR 0 6
56002: PUSH
56003: FOR_TO
56004: IFFALSE 56127
// begin if i > 4 then
56006: LD_VAR 0 8
56010: PUSH
56011: LD_INT 4
56013: GREATER
56014: IFFALSE 56018
// break ;
56016: GO 56127
// x := personel [ i ] ;
56018: LD_ADDR_VAR 0 13
56022: PUSH
56023: LD_VAR 0 6
56027: PUSH
56028: LD_VAR 0 8
56032: ARRAY
56033: ST_TO_ADDR
// if x = - 1 then
56034: LD_VAR 0 13
56038: PUSH
56039: LD_INT 1
56041: NEG
56042: EQUAL
56043: IFFALSE 56047
// continue ;
56045: GO 56003
// PrepareHuman ( false , i , skill ) ;
56047: LD_INT 0
56049: PPUSH
56050: LD_VAR 0 8
56054: PPUSH
56055: LD_VAR 0 4
56059: PPUSH
56060: CALL_OW 380
// un := CreateHuman ;
56064: LD_ADDR_VAR 0 14
56068: PUSH
56069: CALL_OW 44
56073: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56074: LD_VAR 0 14
56078: PPUSH
56079: LD_VAR 0 1
56083: PPUSH
56084: CALL_OW 250
56088: PPUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: CALL_OW 251
56098: PPUSH
56099: LD_INT 10
56101: PPUSH
56102: LD_INT 0
56104: PPUSH
56105: CALL_OW 50
// result := result ^ un ;
56109: LD_ADDR_VAR 0 7
56113: PUSH
56114: LD_VAR 0 7
56118: PUSH
56119: LD_VAR 0 14
56123: ADD
56124: ST_TO_ADDR
// end ;
56125: GO 56003
56127: POP
56128: POP
// end ; end ;
56129: LD_VAR 0 7
56133: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56134: LD_INT 0
56136: PPUSH
56137: PPUSH
56138: PPUSH
56139: PPUSH
56140: PPUSH
56141: PPUSH
56142: PPUSH
56143: PPUSH
56144: PPUSH
56145: PPUSH
56146: PPUSH
56147: PPUSH
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
// result := false ;
56152: LD_ADDR_VAR 0 3
56156: PUSH
56157: LD_INT 0
56159: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56160: LD_VAR 0 1
56164: NOT
56165: PUSH
56166: LD_VAR 0 1
56170: PPUSH
56171: CALL_OW 266
56175: PUSH
56176: LD_INT 32
56178: PUSH
56179: LD_INT 33
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: IN
56186: NOT
56187: OR
56188: IFFALSE 56192
// exit ;
56190: GO 57328
// nat := GetNation ( tower ) ;
56192: LD_ADDR_VAR 0 12
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: CALL_OW 248
56206: ST_TO_ADDR
// side := GetSide ( tower ) ;
56207: LD_ADDR_VAR 0 16
56211: PUSH
56212: LD_VAR 0 1
56216: PPUSH
56217: CALL_OW 255
56221: ST_TO_ADDR
// x := GetX ( tower ) ;
56222: LD_ADDR_VAR 0 10
56226: PUSH
56227: LD_VAR 0 1
56231: PPUSH
56232: CALL_OW 250
56236: ST_TO_ADDR
// y := GetY ( tower ) ;
56237: LD_ADDR_VAR 0 11
56241: PUSH
56242: LD_VAR 0 1
56246: PPUSH
56247: CALL_OW 251
56251: ST_TO_ADDR
// if not x or not y then
56252: LD_VAR 0 10
56256: NOT
56257: PUSH
56258: LD_VAR 0 11
56262: NOT
56263: OR
56264: IFFALSE 56268
// exit ;
56266: GO 57328
// weapon := 0 ;
56268: LD_ADDR_VAR 0 18
56272: PUSH
56273: LD_INT 0
56275: ST_TO_ADDR
// fac_list := [ ] ;
56276: LD_ADDR_VAR 0 17
56280: PUSH
56281: EMPTY
56282: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
56283: LD_ADDR_VAR 0 6
56287: PUSH
56288: LD_VAR 0 1
56292: PPUSH
56293: CALL_OW 274
56297: PPUSH
56298: LD_VAR 0 2
56302: PPUSH
56303: CALL 53906 0 2
56307: PPUSH
56308: LD_INT 30
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PPUSH
56318: CALL_OW 72
56322: ST_TO_ADDR
// if not factories then
56323: LD_VAR 0 6
56327: NOT
56328: IFFALSE 56332
// exit ;
56330: GO 57328
// for i in factories do
56332: LD_ADDR_VAR 0 8
56336: PUSH
56337: LD_VAR 0 6
56341: PUSH
56342: FOR_IN
56343: IFFALSE 56368
// fac_list := fac_list union AvailableWeaponList ( i ) ;
56345: LD_ADDR_VAR 0 17
56349: PUSH
56350: LD_VAR 0 17
56354: PUSH
56355: LD_VAR 0 8
56359: PPUSH
56360: CALL_OW 478
56364: UNION
56365: ST_TO_ADDR
56366: GO 56342
56368: POP
56369: POP
// if not fac_list then
56370: LD_VAR 0 17
56374: NOT
56375: IFFALSE 56379
// exit ;
56377: GO 57328
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
56379: LD_ADDR_VAR 0 5
56383: PUSH
56384: LD_INT 4
56386: PUSH
56387: LD_INT 5
56389: PUSH
56390: LD_INT 9
56392: PUSH
56393: LD_INT 10
56395: PUSH
56396: LD_INT 6
56398: PUSH
56399: LD_INT 7
56401: PUSH
56402: LD_INT 11
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 27
56416: PUSH
56417: LD_INT 28
56419: PUSH
56420: LD_INT 26
56422: PUSH
56423: LD_INT 30
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 43
56434: PUSH
56435: LD_INT 44
56437: PUSH
56438: LD_INT 46
56440: PUSH
56441: LD_INT 45
56443: PUSH
56444: LD_INT 47
56446: PUSH
56447: LD_INT 49
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: LIST
56462: PUSH
56463: LD_VAR 0 12
56467: ARRAY
56468: ST_TO_ADDR
// for i in list do
56469: LD_ADDR_VAR 0 8
56473: PUSH
56474: LD_VAR 0 5
56478: PUSH
56479: FOR_IN
56480: IFFALSE 56513
// if not i in fac_list then
56482: LD_VAR 0 8
56486: PUSH
56487: LD_VAR 0 17
56491: IN
56492: NOT
56493: IFFALSE 56511
// list := list diff i ;
56495: LD_ADDR_VAR 0 5
56499: PUSH
56500: LD_VAR 0 5
56504: PUSH
56505: LD_VAR 0 8
56509: DIFF
56510: ST_TO_ADDR
56511: GO 56479
56513: POP
56514: POP
// if not list then
56515: LD_VAR 0 5
56519: NOT
56520: IFFALSE 56524
// exit ;
56522: GO 57328
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
56524: LD_VAR 0 12
56528: PUSH
56529: LD_INT 3
56531: EQUAL
56532: PUSH
56533: LD_INT 49
56535: PUSH
56536: LD_VAR 0 5
56540: IN
56541: AND
56542: PUSH
56543: LD_INT 31
56545: PPUSH
56546: LD_VAR 0 16
56550: PPUSH
56551: CALL_OW 321
56555: PUSH
56556: LD_INT 2
56558: EQUAL
56559: AND
56560: IFFALSE 56620
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
56562: LD_INT 22
56564: PUSH
56565: LD_VAR 0 16
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 35
56576: PUSH
56577: LD_INT 49
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 91
56586: PUSH
56587: LD_VAR 0 1
56591: PUSH
56592: LD_INT 10
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: PPUSH
56605: CALL_OW 69
56609: NOT
56610: IFFALSE 56620
// weapon := ru_time_lapser ;
56612: LD_ADDR_VAR 0 18
56616: PUSH
56617: LD_INT 49
56619: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
56620: LD_VAR 0 12
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 2
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: IN
56635: PUSH
56636: LD_INT 11
56638: PUSH
56639: LD_VAR 0 5
56643: IN
56644: PUSH
56645: LD_INT 30
56647: PUSH
56648: LD_VAR 0 5
56652: IN
56653: OR
56654: AND
56655: PUSH
56656: LD_INT 6
56658: PPUSH
56659: LD_VAR 0 16
56663: PPUSH
56664: CALL_OW 321
56668: PUSH
56669: LD_INT 2
56671: EQUAL
56672: AND
56673: IFFALSE 56838
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
56675: LD_INT 22
56677: PUSH
56678: LD_VAR 0 16
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: LD_INT 35
56692: PUSH
56693: LD_INT 11
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 35
56702: PUSH
56703: LD_INT 30
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 91
56717: PUSH
56718: LD_VAR 0 1
56722: PUSH
56723: LD_INT 18
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: PPUSH
56736: CALL_OW 69
56740: NOT
56741: PUSH
56742: LD_INT 22
56744: PUSH
56745: LD_VAR 0 16
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 30
56759: PUSH
56760: LD_INT 32
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 30
56769: PUSH
56770: LD_INT 33
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 91
56784: PUSH
56785: LD_VAR 0 1
56789: PUSH
56790: LD_INT 12
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: LIST
56802: PUSH
56803: EMPTY
56804: LIST
56805: PPUSH
56806: CALL_OW 69
56810: PUSH
56811: LD_INT 2
56813: GREATER
56814: AND
56815: IFFALSE 56838
// weapon := [ us_radar , ar_radar ] [ nat ] ;
56817: LD_ADDR_VAR 0 18
56821: PUSH
56822: LD_INT 11
56824: PUSH
56825: LD_INT 30
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_VAR 0 12
56836: ARRAY
56837: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
56838: LD_VAR 0 18
56842: NOT
56843: PUSH
56844: LD_INT 40
56846: PPUSH
56847: LD_VAR 0 16
56851: PPUSH
56852: CALL_OW 321
56856: PUSH
56857: LD_INT 2
56859: EQUAL
56860: AND
56861: PUSH
56862: LD_INT 7
56864: PUSH
56865: LD_VAR 0 5
56869: IN
56870: PUSH
56871: LD_INT 28
56873: PUSH
56874: LD_VAR 0 5
56878: IN
56879: OR
56880: PUSH
56881: LD_INT 45
56883: PUSH
56884: LD_VAR 0 5
56888: IN
56889: OR
56890: AND
56891: IFFALSE 57145
// begin hex := GetHexInfo ( x , y ) ;
56893: LD_ADDR_VAR 0 4
56897: PUSH
56898: LD_VAR 0 10
56902: PPUSH
56903: LD_VAR 0 11
56907: PPUSH
56908: CALL_OW 546
56912: ST_TO_ADDR
// if hex [ 1 ] then
56913: LD_VAR 0 4
56917: PUSH
56918: LD_INT 1
56920: ARRAY
56921: IFFALSE 56925
// exit ;
56923: GO 57328
// height := hex [ 2 ] ;
56925: LD_ADDR_VAR 0 15
56929: PUSH
56930: LD_VAR 0 4
56934: PUSH
56935: LD_INT 2
56937: ARRAY
56938: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
56939: LD_ADDR_VAR 0 14
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: LD_INT 5
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: ST_TO_ADDR
// for i in tmp do
56962: LD_ADDR_VAR 0 8
56966: PUSH
56967: LD_VAR 0 14
56971: PUSH
56972: FOR_IN
56973: IFFALSE 57143
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
56975: LD_ADDR_VAR 0 9
56979: PUSH
56980: LD_VAR 0 10
56984: PPUSH
56985: LD_VAR 0 8
56989: PPUSH
56990: LD_INT 5
56992: PPUSH
56993: CALL_OW 272
56997: PUSH
56998: LD_VAR 0 11
57002: PPUSH
57003: LD_VAR 0 8
57007: PPUSH
57008: LD_INT 5
57010: PPUSH
57011: CALL_OW 273
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57020: LD_VAR 0 9
57024: PUSH
57025: LD_INT 1
57027: ARRAY
57028: PPUSH
57029: LD_VAR 0 9
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PPUSH
57038: CALL_OW 488
57042: IFFALSE 57141
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57044: LD_ADDR_VAR 0 4
57048: PUSH
57049: LD_VAR 0 9
57053: PUSH
57054: LD_INT 1
57056: ARRAY
57057: PPUSH
57058: LD_VAR 0 9
57062: PUSH
57063: LD_INT 2
57065: ARRAY
57066: PPUSH
57067: CALL_OW 546
57071: ST_TO_ADDR
// if hex [ 1 ] then
57072: LD_VAR 0 4
57076: PUSH
57077: LD_INT 1
57079: ARRAY
57080: IFFALSE 57084
// continue ;
57082: GO 56972
// h := hex [ 2 ] ;
57084: LD_ADDR_VAR 0 13
57088: PUSH
57089: LD_VAR 0 4
57093: PUSH
57094: LD_INT 2
57096: ARRAY
57097: ST_TO_ADDR
// if h + 7 < height then
57098: LD_VAR 0 13
57102: PUSH
57103: LD_INT 7
57105: PLUS
57106: PUSH
57107: LD_VAR 0 15
57111: LESS
57112: IFFALSE 57141
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57114: LD_ADDR_VAR 0 18
57118: PUSH
57119: LD_INT 7
57121: PUSH
57122: LD_INT 28
57124: PUSH
57125: LD_INT 45
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: LIST
57132: PUSH
57133: LD_VAR 0 12
57137: ARRAY
57138: ST_TO_ADDR
// break ;
57139: GO 57143
// end ; end ; end ;
57141: GO 56972
57143: POP
57144: POP
// end ; if not weapon then
57145: LD_VAR 0 18
57149: NOT
57150: IFFALSE 57210
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57152: LD_ADDR_VAR 0 5
57156: PUSH
57157: LD_VAR 0 5
57161: PUSH
57162: LD_INT 11
57164: PUSH
57165: LD_INT 30
57167: PUSH
57168: LD_INT 49
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: DIFF
57176: ST_TO_ADDR
// if not list then
57177: LD_VAR 0 5
57181: NOT
57182: IFFALSE 57186
// exit ;
57184: GO 57328
// weapon := list [ rand ( 1 , list ) ] ;
57186: LD_ADDR_VAR 0 18
57190: PUSH
57191: LD_VAR 0 5
57195: PUSH
57196: LD_INT 1
57198: PPUSH
57199: LD_VAR 0 5
57203: PPUSH
57204: CALL_OW 12
57208: ARRAY
57209: ST_TO_ADDR
// end ; if weapon then
57210: LD_VAR 0 18
57214: IFFALSE 57328
// begin tmp := CostOfWeapon ( weapon ) ;
57216: LD_ADDR_VAR 0 14
57220: PUSH
57221: LD_VAR 0 18
57225: PPUSH
57226: CALL_OW 451
57230: ST_TO_ADDR
// j := GetBase ( tower ) ;
57231: LD_ADDR_VAR 0 9
57235: PUSH
57236: LD_VAR 0 1
57240: PPUSH
57241: CALL_OW 274
57245: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
57246: LD_VAR 0 9
57250: PPUSH
57251: LD_INT 1
57253: PPUSH
57254: CALL_OW 275
57258: PUSH
57259: LD_VAR 0 14
57263: PUSH
57264: LD_INT 1
57266: ARRAY
57267: GREATEREQUAL
57268: PUSH
57269: LD_VAR 0 9
57273: PPUSH
57274: LD_INT 2
57276: PPUSH
57277: CALL_OW 275
57281: PUSH
57282: LD_VAR 0 14
57286: PUSH
57287: LD_INT 2
57289: ARRAY
57290: GREATEREQUAL
57291: AND
57292: PUSH
57293: LD_VAR 0 9
57297: PPUSH
57298: LD_INT 3
57300: PPUSH
57301: CALL_OW 275
57305: PUSH
57306: LD_VAR 0 14
57310: PUSH
57311: LD_INT 3
57313: ARRAY
57314: GREATEREQUAL
57315: AND
57316: IFFALSE 57328
// result := weapon ;
57318: LD_ADDR_VAR 0 3
57322: PUSH
57323: LD_VAR 0 18
57327: ST_TO_ADDR
// end ; end ;
57328: LD_VAR 0 3
57332: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
57333: LD_INT 0
57335: PPUSH
57336: PPUSH
// result := true ;
57337: LD_ADDR_VAR 0 3
57341: PUSH
57342: LD_INT 1
57344: ST_TO_ADDR
// if array1 = array2 then
57345: LD_VAR 0 1
57349: PUSH
57350: LD_VAR 0 2
57354: EQUAL
57355: IFFALSE 57415
// begin for i = 1 to array1 do
57357: LD_ADDR_VAR 0 4
57361: PUSH
57362: DOUBLE
57363: LD_INT 1
57365: DEC
57366: ST_TO_ADDR
57367: LD_VAR 0 1
57371: PUSH
57372: FOR_TO
57373: IFFALSE 57411
// if array1 [ i ] <> array2 [ i ] then
57375: LD_VAR 0 1
57379: PUSH
57380: LD_VAR 0 4
57384: ARRAY
57385: PUSH
57386: LD_VAR 0 2
57390: PUSH
57391: LD_VAR 0 4
57395: ARRAY
57396: NONEQUAL
57397: IFFALSE 57409
// begin result := false ;
57399: LD_ADDR_VAR 0 3
57403: PUSH
57404: LD_INT 0
57406: ST_TO_ADDR
// break ;
57407: GO 57411
// end ;
57409: GO 57372
57411: POP
57412: POP
// end else
57413: GO 57423
// result := false ;
57415: LD_ADDR_VAR 0 3
57419: PUSH
57420: LD_INT 0
57422: ST_TO_ADDR
// end ;
57423: LD_VAR 0 3
57427: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
57428: LD_INT 0
57430: PPUSH
57431: PPUSH
57432: PPUSH
// pom := GetBase ( fac ) ;
57433: LD_ADDR_VAR 0 5
57437: PUSH
57438: LD_VAR 0 1
57442: PPUSH
57443: CALL_OW 274
57447: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
57448: LD_ADDR_VAR 0 4
57452: PUSH
57453: LD_VAR 0 2
57457: PUSH
57458: LD_INT 1
57460: ARRAY
57461: PPUSH
57462: LD_VAR 0 2
57466: PUSH
57467: LD_INT 2
57469: ARRAY
57470: PPUSH
57471: LD_VAR 0 2
57475: PUSH
57476: LD_INT 3
57478: ARRAY
57479: PPUSH
57480: LD_VAR 0 2
57484: PUSH
57485: LD_INT 4
57487: ARRAY
57488: PPUSH
57489: CALL_OW 449
57493: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57494: LD_ADDR_VAR 0 3
57498: PUSH
57499: LD_VAR 0 5
57503: PPUSH
57504: LD_INT 1
57506: PPUSH
57507: CALL_OW 275
57511: PUSH
57512: LD_VAR 0 4
57516: PUSH
57517: LD_INT 1
57519: ARRAY
57520: GREATEREQUAL
57521: PUSH
57522: LD_VAR 0 5
57526: PPUSH
57527: LD_INT 2
57529: PPUSH
57530: CALL_OW 275
57534: PUSH
57535: LD_VAR 0 4
57539: PUSH
57540: LD_INT 2
57542: ARRAY
57543: GREATEREQUAL
57544: AND
57545: PUSH
57546: LD_VAR 0 5
57550: PPUSH
57551: LD_INT 3
57553: PPUSH
57554: CALL_OW 275
57558: PUSH
57559: LD_VAR 0 4
57563: PUSH
57564: LD_INT 3
57566: ARRAY
57567: GREATEREQUAL
57568: AND
57569: ST_TO_ADDR
// end ;
57570: LD_VAR 0 3
57574: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
57575: LD_INT 0
57577: PPUSH
57578: PPUSH
57579: PPUSH
57580: PPUSH
// pom := GetBase ( building ) ;
57581: LD_ADDR_VAR 0 3
57585: PUSH
57586: LD_VAR 0 1
57590: PPUSH
57591: CALL_OW 274
57595: ST_TO_ADDR
// if not pom then
57596: LD_VAR 0 3
57600: NOT
57601: IFFALSE 57605
// exit ;
57603: GO 57775
// btype := GetBType ( building ) ;
57605: LD_ADDR_VAR 0 5
57609: PUSH
57610: LD_VAR 0 1
57614: PPUSH
57615: CALL_OW 266
57619: ST_TO_ADDR
// if btype = b_armoury then
57620: LD_VAR 0 5
57624: PUSH
57625: LD_INT 4
57627: EQUAL
57628: IFFALSE 57638
// btype := b_barracks ;
57630: LD_ADDR_VAR 0 5
57634: PUSH
57635: LD_INT 5
57637: ST_TO_ADDR
// if btype = b_depot then
57638: LD_VAR 0 5
57642: PUSH
57643: LD_INT 0
57645: EQUAL
57646: IFFALSE 57656
// btype := b_warehouse ;
57648: LD_ADDR_VAR 0 5
57652: PUSH
57653: LD_INT 1
57655: ST_TO_ADDR
// if btype = b_workshop then
57656: LD_VAR 0 5
57660: PUSH
57661: LD_INT 2
57663: EQUAL
57664: IFFALSE 57674
// btype := b_factory ;
57666: LD_ADDR_VAR 0 5
57670: PUSH
57671: LD_INT 3
57673: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57674: LD_ADDR_VAR 0 4
57678: PUSH
57679: LD_VAR 0 5
57683: PPUSH
57684: LD_VAR 0 1
57688: PPUSH
57689: CALL_OW 248
57693: PPUSH
57694: CALL_OW 450
57698: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57699: LD_ADDR_VAR 0 2
57703: PUSH
57704: LD_VAR 0 3
57708: PPUSH
57709: LD_INT 1
57711: PPUSH
57712: CALL_OW 275
57716: PUSH
57717: LD_VAR 0 4
57721: PUSH
57722: LD_INT 1
57724: ARRAY
57725: GREATEREQUAL
57726: PUSH
57727: LD_VAR 0 3
57731: PPUSH
57732: LD_INT 2
57734: PPUSH
57735: CALL_OW 275
57739: PUSH
57740: LD_VAR 0 4
57744: PUSH
57745: LD_INT 2
57747: ARRAY
57748: GREATEREQUAL
57749: AND
57750: PUSH
57751: LD_VAR 0 3
57755: PPUSH
57756: LD_INT 3
57758: PPUSH
57759: CALL_OW 275
57763: PUSH
57764: LD_VAR 0 4
57768: PUSH
57769: LD_INT 3
57771: ARRAY
57772: GREATEREQUAL
57773: AND
57774: ST_TO_ADDR
// end ;
57775: LD_VAR 0 2
57779: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
57780: LD_INT 0
57782: PPUSH
57783: PPUSH
57784: PPUSH
// pom := GetBase ( building ) ;
57785: LD_ADDR_VAR 0 4
57789: PUSH
57790: LD_VAR 0 1
57794: PPUSH
57795: CALL_OW 274
57799: ST_TO_ADDR
// if not pom then
57800: LD_VAR 0 4
57804: NOT
57805: IFFALSE 57809
// exit ;
57807: GO 57910
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
57809: LD_ADDR_VAR 0 5
57813: PUSH
57814: LD_VAR 0 2
57818: PPUSH
57819: LD_VAR 0 1
57823: PPUSH
57824: CALL_OW 248
57828: PPUSH
57829: CALL_OW 450
57833: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
57834: LD_ADDR_VAR 0 3
57838: PUSH
57839: LD_VAR 0 4
57843: PPUSH
57844: LD_INT 1
57846: PPUSH
57847: CALL_OW 275
57851: PUSH
57852: LD_VAR 0 5
57856: PUSH
57857: LD_INT 1
57859: ARRAY
57860: GREATEREQUAL
57861: PUSH
57862: LD_VAR 0 4
57866: PPUSH
57867: LD_INT 2
57869: PPUSH
57870: CALL_OW 275
57874: PUSH
57875: LD_VAR 0 5
57879: PUSH
57880: LD_INT 2
57882: ARRAY
57883: GREATEREQUAL
57884: AND
57885: PUSH
57886: LD_VAR 0 4
57890: PPUSH
57891: LD_INT 3
57893: PPUSH
57894: CALL_OW 275
57898: PUSH
57899: LD_VAR 0 5
57903: PUSH
57904: LD_INT 3
57906: ARRAY
57907: GREATEREQUAL
57908: AND
57909: ST_TO_ADDR
// end ;
57910: LD_VAR 0 3
57914: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
57915: LD_INT 0
57917: PPUSH
57918: PPUSH
57919: PPUSH
57920: PPUSH
57921: PPUSH
57922: PPUSH
57923: PPUSH
57924: PPUSH
57925: PPUSH
57926: PPUSH
// result := false ;
57927: LD_ADDR_VAR 0 6
57931: PUSH
57932: LD_INT 0
57934: ST_TO_ADDR
// if not base or not btype or not x or not y then
57935: LD_VAR 0 1
57939: NOT
57940: PUSH
57941: LD_VAR 0 2
57945: NOT
57946: OR
57947: PUSH
57948: LD_VAR 0 3
57952: NOT
57953: OR
57954: PUSH
57955: LD_VAR 0 4
57959: NOT
57960: OR
57961: IFFALSE 57965
// exit ;
57963: GO 58556
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
57965: LD_ADDR_VAR 0 12
57969: PUSH
57970: LD_VAR 0 2
57974: PPUSH
57975: LD_VAR 0 3
57979: PPUSH
57980: LD_VAR 0 4
57984: PPUSH
57985: LD_VAR 0 5
57989: PPUSH
57990: LD_VAR 0 1
57994: PUSH
57995: LD_INT 1
57997: ARRAY
57998: PPUSH
57999: CALL_OW 248
58003: PPUSH
58004: LD_INT 0
58006: PPUSH
58007: CALL 59393 0 6
58011: ST_TO_ADDR
// if not hexes then
58012: LD_VAR 0 12
58016: NOT
58017: IFFALSE 58021
// exit ;
58019: GO 58556
// for i = 1 to hexes do
58021: LD_ADDR_VAR 0 7
58025: PUSH
58026: DOUBLE
58027: LD_INT 1
58029: DEC
58030: ST_TO_ADDR
58031: LD_VAR 0 12
58035: PUSH
58036: FOR_TO
58037: IFFALSE 58554
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58039: LD_ADDR_VAR 0 11
58043: PUSH
58044: LD_VAR 0 12
58048: PUSH
58049: LD_VAR 0 7
58053: ARRAY
58054: PUSH
58055: LD_INT 1
58057: ARRAY
58058: PPUSH
58059: LD_VAR 0 12
58063: PUSH
58064: LD_VAR 0 7
58068: ARRAY
58069: PUSH
58070: LD_INT 2
58072: ARRAY
58073: PPUSH
58074: CALL_OW 428
58078: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58079: LD_VAR 0 12
58083: PUSH
58084: LD_VAR 0 7
58088: ARRAY
58089: PUSH
58090: LD_INT 1
58092: ARRAY
58093: PPUSH
58094: LD_VAR 0 12
58098: PUSH
58099: LD_VAR 0 7
58103: ARRAY
58104: PUSH
58105: LD_INT 2
58107: ARRAY
58108: PPUSH
58109: CALL_OW 351
58113: PUSH
58114: LD_VAR 0 12
58118: PUSH
58119: LD_VAR 0 7
58123: ARRAY
58124: PUSH
58125: LD_INT 1
58127: ARRAY
58128: PPUSH
58129: LD_VAR 0 12
58133: PUSH
58134: LD_VAR 0 7
58138: ARRAY
58139: PUSH
58140: LD_INT 2
58142: ARRAY
58143: PPUSH
58144: CALL_OW 488
58148: NOT
58149: OR
58150: PUSH
58151: LD_VAR 0 11
58155: PPUSH
58156: CALL_OW 247
58160: PUSH
58161: LD_INT 3
58163: EQUAL
58164: OR
58165: IFFALSE 58171
// exit ;
58167: POP
58168: POP
58169: GO 58556
// if not tmp then
58171: LD_VAR 0 11
58175: NOT
58176: IFFALSE 58180
// continue ;
58178: GO 58036
// result := true ;
58180: LD_ADDR_VAR 0 6
58184: PUSH
58185: LD_INT 1
58187: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58188: LD_ADDR_VAR 0 15
58192: PUSH
58193: LD_INT 22
58195: PUSH
58196: LD_VAR 0 11
58200: PPUSH
58201: CALL_OW 255
58205: PUSH
58206: EMPTY
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 2
58212: PUSH
58213: LD_INT 30
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 30
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: LIST
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PPUSH
58242: CALL_OW 69
58246: ST_TO_ADDR
// if dep then
58247: LD_VAR 0 15
58251: IFFALSE 58387
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
58253: LD_ADDR_VAR 0 14
58257: PUSH
58258: LD_VAR 0 15
58262: PUSH
58263: LD_INT 1
58265: ARRAY
58266: PPUSH
58267: CALL_OW 250
58271: PPUSH
58272: LD_VAR 0 15
58276: PUSH
58277: LD_INT 1
58279: ARRAY
58280: PPUSH
58281: CALL_OW 254
58285: PPUSH
58286: LD_INT 5
58288: PPUSH
58289: CALL_OW 272
58293: PUSH
58294: LD_VAR 0 15
58298: PUSH
58299: LD_INT 1
58301: ARRAY
58302: PPUSH
58303: CALL_OW 251
58307: PPUSH
58308: LD_VAR 0 15
58312: PUSH
58313: LD_INT 1
58315: ARRAY
58316: PPUSH
58317: CALL_OW 254
58321: PPUSH
58322: LD_INT 5
58324: PPUSH
58325: CALL_OW 273
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
58334: LD_VAR 0 14
58338: PUSH
58339: LD_INT 1
58341: ARRAY
58342: PPUSH
58343: LD_VAR 0 14
58347: PUSH
58348: LD_INT 2
58350: ARRAY
58351: PPUSH
58352: CALL_OW 488
58356: IFFALSE 58387
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
58358: LD_VAR 0 11
58362: PPUSH
58363: LD_VAR 0 14
58367: PUSH
58368: LD_INT 1
58370: ARRAY
58371: PPUSH
58372: LD_VAR 0 14
58376: PUSH
58377: LD_INT 2
58379: ARRAY
58380: PPUSH
58381: CALL_OW 111
// continue ;
58385: GO 58036
// end ; end ; r := GetDir ( tmp ) ;
58387: LD_ADDR_VAR 0 13
58391: PUSH
58392: LD_VAR 0 11
58396: PPUSH
58397: CALL_OW 254
58401: ST_TO_ADDR
// if r = 5 then
58402: LD_VAR 0 13
58406: PUSH
58407: LD_INT 5
58409: EQUAL
58410: IFFALSE 58420
// r := 0 ;
58412: LD_ADDR_VAR 0 13
58416: PUSH
58417: LD_INT 0
58419: ST_TO_ADDR
// for j = r to 5 do
58420: LD_ADDR_VAR 0 8
58424: PUSH
58425: DOUBLE
58426: LD_VAR 0 13
58430: DEC
58431: ST_TO_ADDR
58432: LD_INT 5
58434: PUSH
58435: FOR_TO
58436: IFFALSE 58550
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
58438: LD_ADDR_VAR 0 9
58442: PUSH
58443: LD_VAR 0 11
58447: PPUSH
58448: CALL_OW 250
58452: PPUSH
58453: LD_VAR 0 8
58457: PPUSH
58458: LD_INT 2
58460: PPUSH
58461: CALL_OW 272
58465: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
58466: LD_ADDR_VAR 0 10
58470: PUSH
58471: LD_VAR 0 11
58475: PPUSH
58476: CALL_OW 251
58480: PPUSH
58481: LD_VAR 0 8
58485: PPUSH
58486: LD_INT 2
58488: PPUSH
58489: CALL_OW 273
58493: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
58494: LD_VAR 0 9
58498: PPUSH
58499: LD_VAR 0 10
58503: PPUSH
58504: CALL_OW 488
58508: PUSH
58509: LD_VAR 0 9
58513: PPUSH
58514: LD_VAR 0 10
58518: PPUSH
58519: CALL_OW 428
58523: NOT
58524: AND
58525: IFFALSE 58548
// begin ComMoveXY ( tmp , _x , _y ) ;
58527: LD_VAR 0 11
58531: PPUSH
58532: LD_VAR 0 9
58536: PPUSH
58537: LD_VAR 0 10
58541: PPUSH
58542: CALL_OW 111
// break ;
58546: GO 58550
// end ; end ;
58548: GO 58435
58550: POP
58551: POP
// end ;
58552: GO 58036
58554: POP
58555: POP
// end ;
58556: LD_VAR 0 6
58560: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
58561: LD_INT 0
58563: PPUSH
58564: PPUSH
58565: PPUSH
58566: PPUSH
58567: PPUSH
58568: PPUSH
58569: PPUSH
58570: PPUSH
58571: PPUSH
58572: PPUSH
// result := false ;
58573: LD_ADDR_VAR 0 6
58577: PUSH
58578: LD_INT 0
58580: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
58581: LD_VAR 0 1
58585: NOT
58586: PUSH
58587: LD_VAR 0 1
58591: PPUSH
58592: CALL_OW 266
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: IN
58607: NOT
58608: OR
58609: PUSH
58610: LD_VAR 0 2
58614: NOT
58615: OR
58616: PUSH
58617: LD_VAR 0 5
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: LD_INT 3
58633: PUSH
58634: LD_INT 4
58636: PUSH
58637: LD_INT 5
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: IN
58648: NOT
58649: OR
58650: PUSH
58651: LD_VAR 0 3
58655: PPUSH
58656: LD_VAR 0 4
58660: PPUSH
58661: CALL_OW 488
58665: NOT
58666: OR
58667: IFFALSE 58671
// exit ;
58669: GO 59388
// pom := GetBase ( bdepot ) ;
58671: LD_ADDR_VAR 0 10
58675: PUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 274
58685: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
58686: LD_ADDR_VAR 0 11
58690: PUSH
58691: LD_VAR 0 2
58695: PPUSH
58696: LD_VAR 0 1
58700: PPUSH
58701: CALL_OW 248
58705: PPUSH
58706: CALL_OW 450
58710: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
58711: LD_VAR 0 10
58715: PPUSH
58716: LD_INT 1
58718: PPUSH
58719: CALL_OW 275
58723: PUSH
58724: LD_VAR 0 11
58728: PUSH
58729: LD_INT 1
58731: ARRAY
58732: GREATEREQUAL
58733: PUSH
58734: LD_VAR 0 10
58738: PPUSH
58739: LD_INT 2
58741: PPUSH
58742: CALL_OW 275
58746: PUSH
58747: LD_VAR 0 11
58751: PUSH
58752: LD_INT 2
58754: ARRAY
58755: GREATEREQUAL
58756: AND
58757: PUSH
58758: LD_VAR 0 10
58762: PPUSH
58763: LD_INT 3
58765: PPUSH
58766: CALL_OW 275
58770: PUSH
58771: LD_VAR 0 11
58775: PUSH
58776: LD_INT 3
58778: ARRAY
58779: GREATEREQUAL
58780: AND
58781: NOT
58782: IFFALSE 58786
// exit ;
58784: GO 59388
// if GetBType ( bdepot ) = b_depot then
58786: LD_VAR 0 1
58790: PPUSH
58791: CALL_OW 266
58795: PUSH
58796: LD_INT 0
58798: EQUAL
58799: IFFALSE 58811
// dist := 28 else
58801: LD_ADDR_VAR 0 14
58805: PUSH
58806: LD_INT 28
58808: ST_TO_ADDR
58809: GO 58819
// dist := 36 ;
58811: LD_ADDR_VAR 0 14
58815: PUSH
58816: LD_INT 36
58818: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
58819: LD_VAR 0 1
58823: PPUSH
58824: LD_VAR 0 3
58828: PPUSH
58829: LD_VAR 0 4
58833: PPUSH
58834: CALL_OW 297
58838: PUSH
58839: LD_VAR 0 14
58843: GREATER
58844: IFFALSE 58848
// exit ;
58846: GO 59388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
58848: LD_ADDR_VAR 0 12
58852: PUSH
58853: LD_VAR 0 2
58857: PPUSH
58858: LD_VAR 0 3
58862: PPUSH
58863: LD_VAR 0 4
58867: PPUSH
58868: LD_VAR 0 5
58872: PPUSH
58873: LD_VAR 0 1
58877: PPUSH
58878: CALL_OW 248
58882: PPUSH
58883: LD_INT 0
58885: PPUSH
58886: CALL 59393 0 6
58890: ST_TO_ADDR
// if not hexes then
58891: LD_VAR 0 12
58895: NOT
58896: IFFALSE 58900
// exit ;
58898: GO 59388
// hex := GetHexInfo ( x , y ) ;
58900: LD_ADDR_VAR 0 15
58904: PUSH
58905: LD_VAR 0 3
58909: PPUSH
58910: LD_VAR 0 4
58914: PPUSH
58915: CALL_OW 546
58919: ST_TO_ADDR
// if hex [ 1 ] then
58920: LD_VAR 0 15
58924: PUSH
58925: LD_INT 1
58927: ARRAY
58928: IFFALSE 58932
// exit ;
58930: GO 59388
// height := hex [ 2 ] ;
58932: LD_ADDR_VAR 0 13
58936: PUSH
58937: LD_VAR 0 15
58941: PUSH
58942: LD_INT 2
58944: ARRAY
58945: ST_TO_ADDR
// for i = 1 to hexes do
58946: LD_ADDR_VAR 0 7
58950: PUSH
58951: DOUBLE
58952: LD_INT 1
58954: DEC
58955: ST_TO_ADDR
58956: LD_VAR 0 12
58960: PUSH
58961: FOR_TO
58962: IFFALSE 59292
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
58964: LD_VAR 0 12
58968: PUSH
58969: LD_VAR 0 7
58973: ARRAY
58974: PUSH
58975: LD_INT 1
58977: ARRAY
58978: PPUSH
58979: LD_VAR 0 12
58983: PUSH
58984: LD_VAR 0 7
58988: ARRAY
58989: PUSH
58990: LD_INT 2
58992: ARRAY
58993: PPUSH
58994: CALL_OW 488
58998: NOT
58999: PUSH
59000: LD_VAR 0 12
59004: PUSH
59005: LD_VAR 0 7
59009: ARRAY
59010: PUSH
59011: LD_INT 1
59013: ARRAY
59014: PPUSH
59015: LD_VAR 0 12
59019: PUSH
59020: LD_VAR 0 7
59024: ARRAY
59025: PUSH
59026: LD_INT 2
59028: ARRAY
59029: PPUSH
59030: CALL_OW 428
59034: PUSH
59035: LD_INT 0
59037: GREATER
59038: OR
59039: PUSH
59040: LD_VAR 0 12
59044: PUSH
59045: LD_VAR 0 7
59049: ARRAY
59050: PUSH
59051: LD_INT 1
59053: ARRAY
59054: PPUSH
59055: LD_VAR 0 12
59059: PUSH
59060: LD_VAR 0 7
59064: ARRAY
59065: PUSH
59066: LD_INT 2
59068: ARRAY
59069: PPUSH
59070: CALL_OW 351
59074: OR
59075: IFFALSE 59081
// exit ;
59077: POP
59078: POP
59079: GO 59388
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59081: LD_ADDR_VAR 0 8
59085: PUSH
59086: LD_VAR 0 12
59090: PUSH
59091: LD_VAR 0 7
59095: ARRAY
59096: PUSH
59097: LD_INT 1
59099: ARRAY
59100: PPUSH
59101: LD_VAR 0 12
59105: PUSH
59106: LD_VAR 0 7
59110: ARRAY
59111: PUSH
59112: LD_INT 2
59114: ARRAY
59115: PPUSH
59116: CALL_OW 546
59120: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59121: LD_VAR 0 8
59125: PUSH
59126: LD_INT 1
59128: ARRAY
59129: PUSH
59130: LD_VAR 0 8
59134: PUSH
59135: LD_INT 2
59137: ARRAY
59138: PUSH
59139: LD_VAR 0 13
59143: PUSH
59144: LD_INT 2
59146: PLUS
59147: GREATER
59148: OR
59149: PUSH
59150: LD_VAR 0 8
59154: PUSH
59155: LD_INT 2
59157: ARRAY
59158: PUSH
59159: LD_VAR 0 13
59163: PUSH
59164: LD_INT 2
59166: MINUS
59167: LESS
59168: OR
59169: PUSH
59170: LD_VAR 0 8
59174: PUSH
59175: LD_INT 3
59177: ARRAY
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 8
59184: PUSH
59185: LD_INT 9
59187: PUSH
59188: LD_INT 10
59190: PUSH
59191: LD_INT 11
59193: PUSH
59194: LD_INT 12
59196: PUSH
59197: LD_INT 13
59199: PUSH
59200: LD_INT 16
59202: PUSH
59203: LD_INT 17
59205: PUSH
59206: LD_INT 18
59208: PUSH
59209: LD_INT 19
59211: PUSH
59212: LD_INT 20
59214: PUSH
59215: LD_INT 21
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: IN
59233: NOT
59234: OR
59235: PUSH
59236: LD_VAR 0 8
59240: PUSH
59241: LD_INT 5
59243: ARRAY
59244: NOT
59245: OR
59246: PUSH
59247: LD_VAR 0 8
59251: PUSH
59252: LD_INT 6
59254: ARRAY
59255: PUSH
59256: LD_INT 1
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 7
59264: PUSH
59265: LD_INT 9
59267: PUSH
59268: LD_INT 10
59270: PUSH
59271: LD_INT 11
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: IN
59282: NOT
59283: OR
59284: IFFALSE 59290
// exit ;
59286: POP
59287: POP
59288: GO 59388
// end ;
59290: GO 58961
59292: POP
59293: POP
// side := GetSide ( bdepot ) ;
59294: LD_ADDR_VAR 0 9
59298: PUSH
59299: LD_VAR 0 1
59303: PPUSH
59304: CALL_OW 255
59308: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
59309: LD_VAR 0 9
59313: PPUSH
59314: LD_VAR 0 3
59318: PPUSH
59319: LD_VAR 0 4
59323: PPUSH
59324: LD_INT 20
59326: PPUSH
59327: CALL 52060 0 4
59331: PUSH
59332: LD_INT 4
59334: ARRAY
59335: IFFALSE 59339
// exit ;
59337: GO 59388
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
59339: LD_VAR 0 2
59343: PUSH
59344: LD_INT 29
59346: PUSH
59347: LD_INT 30
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: IN
59354: PUSH
59355: LD_VAR 0 3
59359: PPUSH
59360: LD_VAR 0 4
59364: PPUSH
59365: LD_VAR 0 9
59369: PPUSH
59370: CALL_OW 440
59374: NOT
59375: AND
59376: IFFALSE 59380
// exit ;
59378: GO 59388
// result := true ;
59380: LD_ADDR_VAR 0 6
59384: PUSH
59385: LD_INT 1
59387: ST_TO_ADDR
// end ;
59388: LD_VAR 0 6
59392: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
59393: LD_INT 0
59395: PPUSH
59396: PPUSH
59397: PPUSH
59398: PPUSH
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
59404: PPUSH
59405: PPUSH
59406: PPUSH
59407: PPUSH
59408: PPUSH
59409: PPUSH
59410: PPUSH
59411: PPUSH
59412: PPUSH
59413: PPUSH
59414: PPUSH
59415: PPUSH
59416: PPUSH
59417: PPUSH
59418: PPUSH
59419: PPUSH
59420: PPUSH
59421: PPUSH
59422: PPUSH
59423: PPUSH
59424: PPUSH
59425: PPUSH
59426: PPUSH
59427: PPUSH
59428: PPUSH
59429: PPUSH
59430: PPUSH
59431: PPUSH
59432: PPUSH
59433: PPUSH
59434: PPUSH
59435: PPUSH
59436: PPUSH
59437: PPUSH
59438: PPUSH
59439: PPUSH
59440: PPUSH
59441: PPUSH
59442: PPUSH
59443: PPUSH
59444: PPUSH
59445: PPUSH
59446: PPUSH
59447: PPUSH
59448: PPUSH
59449: PPUSH
59450: PPUSH
59451: PPUSH
59452: PPUSH
// result = [ ] ;
59453: LD_ADDR_VAR 0 7
59457: PUSH
59458: EMPTY
59459: ST_TO_ADDR
// temp_list = [ ] ;
59460: LD_ADDR_VAR 0 9
59464: PUSH
59465: EMPTY
59466: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
59467: LD_VAR 0 4
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 2
59480: PUSH
59481: LD_INT 3
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: IN
59498: NOT
59499: PUSH
59500: LD_VAR 0 1
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 1
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: IN
59515: PUSH
59516: LD_VAR 0 5
59520: PUSH
59521: LD_INT 1
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 3
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: LIST
59534: IN
59535: NOT
59536: AND
59537: OR
59538: IFFALSE 59542
// exit ;
59540: GO 77927
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
59542: LD_VAR 0 1
59546: PUSH
59547: LD_INT 6
59549: PUSH
59550: LD_INT 7
59552: PUSH
59553: LD_INT 8
59555: PUSH
59556: LD_INT 13
59558: PUSH
59559: LD_INT 12
59561: PUSH
59562: LD_INT 15
59564: PUSH
59565: LD_INT 11
59567: PUSH
59568: LD_INT 14
59570: PUSH
59571: LD_INT 10
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: IN
59585: IFFALSE 59595
// btype = b_lab ;
59587: LD_ADDR_VAR 0 1
59591: PUSH
59592: LD_INT 6
59594: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
59595: LD_VAR 0 6
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 2
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: LIST
59613: IN
59614: NOT
59615: PUSH
59616: LD_VAR 0 1
59620: PUSH
59621: LD_INT 0
59623: PUSH
59624: LD_INT 1
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 6
59635: PUSH
59636: LD_INT 36
59638: PUSH
59639: LD_INT 4
59641: PUSH
59642: LD_INT 5
59644: PUSH
59645: LD_INT 31
59647: PUSH
59648: LD_INT 32
59650: PUSH
59651: LD_INT 33
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: IN
59667: NOT
59668: PUSH
59669: LD_VAR 0 6
59673: PUSH
59674: LD_INT 1
59676: EQUAL
59677: AND
59678: OR
59679: PUSH
59680: LD_VAR 0 1
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: IN
59695: NOT
59696: PUSH
59697: LD_VAR 0 6
59701: PUSH
59702: LD_INT 2
59704: EQUAL
59705: AND
59706: OR
59707: IFFALSE 59717
// mode = 0 ;
59709: LD_ADDR_VAR 0 6
59713: PUSH
59714: LD_INT 0
59716: ST_TO_ADDR
// case mode of 0 :
59717: LD_VAR 0 6
59721: PUSH
59722: LD_INT 0
59724: DOUBLE
59725: EQUAL
59726: IFTRUE 59730
59728: GO 71183
59730: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59731: LD_ADDR_VAR 0 11
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: NEG
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: LD_INT 2
59827: NEG
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 2
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 3
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 0
59887: PUSH
59888: LD_INT 3
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59924: LD_ADDR_VAR 0 12
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 0
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 2
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 3
60092: NEG
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60120: LD_ADDR_VAR 0 13
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: NEG
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: PUSH
60159: LD_INT 1
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 0
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 1
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 2
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 3
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60319: LD_ADDR_VAR 0 14
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 0
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 3
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 3
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60515: LD_ADDR_VAR 0 15
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 0
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: PUSH
60554: LD_INT 1
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: PUSH
60608: LD_INT 0
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: LD_INT 1
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 2
60638: NEG
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 2
60661: PUSH
60662: LD_INT 1
60664: NEG
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: LD_INT 1
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60708: LD_ADDR_VAR 0 16
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: NEG
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 2
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 3
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60901: LD_ADDR_VAR 0 17
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 1
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 0
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 1
60959: NEG
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: LD_INT 1
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 0
60994: PUSH
60995: LD_INT 2
60997: NEG
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 1
61005: PUSH
61006: LD_INT 1
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 2
61036: PUSH
61037: LD_INT 2
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 1
61046: PUSH
61047: LD_INT 2
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 0
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: NEG
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 2
61100: NEG
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61131: LD_ADDR_VAR 0 18
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 0
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 2
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 0
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: NEG
61331: PUSH
61332: LD_INT 2
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61361: LD_ADDR_VAR 0 19
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: EMPTY
61394: LIST
61395: LIST
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: LD_INT 1
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: LD_INT 1
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 1
61419: NEG
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 1
61442: NEG
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 2
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 2
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61591: LD_ADDR_VAR 0 20
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: NEG
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: LD_INT 0
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61821: LD_ADDR_VAR 0 21
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 2
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 1
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 0
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 2
61997: NEG
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 2
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62051: LD_ADDR_VAR 0 22
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 0
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 1
62089: PUSH
62090: LD_INT 1
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 1
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 1
62109: NEG
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: LD_INT 1
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: LD_INT 2
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 0
62144: PUSH
62145: LD_INT 2
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 1
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: LD_INT 0
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: LD_INT 1
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 1
62196: PUSH
62197: LD_INT 2
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 0
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 1
62216: NEG
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 2
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 2
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62281: LD_ADDR_VAR 0 23
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 0
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 0
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: LD_INT 1
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 0
62329: PUSH
62330: LD_INT 1
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 1
62339: NEG
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: LD_INT 1
62350: NEG
62351: PUSH
62352: LD_INT 1
62354: NEG
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 1
62362: NEG
62363: PUSH
62364: LD_INT 2
62366: NEG
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 0
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 1
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 2
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 2
62416: PUSH
62417: LD_INT 2
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 3
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
62561: LD_ADDR_VAR 0 24
62565: PUSH
62566: LD_INT 0
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 0
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: LD_INT 1
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 1
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 2
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: PUSH
62666: LD_INT 1
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 2
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: PUSH
62697: LD_INT 2
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: LD_INT 2
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 2
62737: NEG
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 2
62748: NEG
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: PUSH
62758: LD_INT 2
62760: NEG
62761: PUSH
62762: LD_INT 2
62764: NEG
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: PUSH
62773: LD_INT 2
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: PUSH
62784: LD_INT 1
62786: NEG
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 3
62794: PUSH
62795: LD_INT 1
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: PUSH
62805: LD_INT 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
62837: LD_ADDR_VAR 0 25
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 1
62857: NEG
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 1
62865: PUSH
62866: LD_INT 0
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 1
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 2
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: LD_INT 0
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 2
62962: PUSH
62963: LD_INT 1
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 2
62972: PUSH
62973: LD_INT 2
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 0
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 2
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: LD_INT 2
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 3
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63111: LD_ADDR_VAR 0 26
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: LD_INT 1
63131: NEG
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: LD_INT 0
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: LD_INT 1
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 0
63159: PUSH
63160: LD_INT 1
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: NEG
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 1
63192: NEG
63193: PUSH
63194: LD_INT 2
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 0
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 2
63236: PUSH
63237: LD_INT 1
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 2
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: LD_INT 2
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 0
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: LD_INT 1
63302: NEG
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 2
63310: NEG
63311: PUSH
63312: LD_INT 2
63314: NEG
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: LD_INT 3
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 2
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 2
63353: NEG
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63387: LD_ADDR_VAR 0 27
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 0
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 1
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 0
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 1
63445: NEG
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 1
63468: NEG
63469: PUSH
63470: LD_INT 2
63472: NEG
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 2
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 1
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: PUSH
63513: LD_INT 1
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 2
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: LD_INT 2
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 1
63552: NEG
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 2
63563: NEG
63564: PUSH
63565: LD_INT 0
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 2
63586: NEG
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 1
63598: NEG
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: LD_INT 1
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: LD_INT 1
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 3
63632: NEG
63633: PUSH
63634: LD_INT 2
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63667: LD_ADDR_VAR 0 28
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 0
63684: PUSH
63685: LD_INT 1
63687: NEG
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 1
63736: NEG
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: NEG
63749: PUSH
63750: LD_INT 2
63752: NEG
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 2
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 1
63774: NEG
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: LD_INT 2
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 2
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 2
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 1
63832: NEG
63833: PUSH
63834: LD_INT 1
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: LD_INT 2
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 1
63890: NEG
63891: PUSH
63892: LD_INT 3
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 3
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63949: LD_ADDR_VAR 0 29
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: LD_INT 1
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 1
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 1
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 1
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 1
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 0
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: LD_INT 1
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 1
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 2
64115: NEG
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 2
64127: NEG
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 3
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 2
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 3
64162: PUSH
64163: LD_INT 1
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 3
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: LD_INT 2
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 3
64193: NEG
64194: PUSH
64195: LD_INT 2
64197: NEG
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64228: LD_ADDR_VAR 0 30
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 0
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 1
64286: NEG
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 1
64309: NEG
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: LD_INT 2
64324: NEG
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 2
64353: PUSH
64354: LD_INT 1
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 2
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: PUSH
64374: LD_INT 2
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: LD_INT 1
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 2
64405: NEG
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: LD_INT 3
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: LD_INT 2
64432: NEG
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: LD_INT 2
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: LD_INT 3
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 3
64471: NEG
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64506: LD_ADDR_VAR 0 31
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 1
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: PUSH
64535: LD_INT 0
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 1
64544: PUSH
64545: LD_INT 1
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: NEG
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: LD_INT 2
64591: NEG
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 1
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 2
64610: PUSH
64611: LD_INT 0
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: LD_INT 1
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: LD_INT 2
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 2
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 1
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 2
64683: NEG
64684: PUSH
64685: LD_INT 2
64687: NEG
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 2
64695: NEG
64696: PUSH
64697: LD_INT 3
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 3
64718: PUSH
64719: LD_INT 1
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 1
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 3
64749: NEG
64750: PUSH
64751: LD_INT 2
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
64784: LD_ADDR_VAR 0 32
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 0
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 1
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 0
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 1
64865: NEG
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 0
64877: PUSH
64878: LD_INT 2
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: PUSH
64889: LD_INT 1
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 2
64899: PUSH
64900: LD_INT 1
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 2
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 2
64961: NEG
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: LD_INT 3
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: PUSH
64986: LD_INT 2
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 3
64996: PUSH
64997: LD_INT 2
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: LD_INT 3
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65062: LD_ADDR_VAR 0 33
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 1
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: LD_INT 0
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: LD_INT 2
65147: NEG
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: LD_INT 0
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 0
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 1
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: LD_INT 2
65217: NEG
65218: PUSH
65219: LD_INT 0
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 2
65240: NEG
65241: PUSH
65242: LD_INT 2
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 2
65252: NEG
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 3
65275: PUSH
65276: LD_INT 1
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 3
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: NEG
65296: PUSH
65297: LD_INT 2
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: LD_INT 2
65310: NEG
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: LIST
65338: LIST
65339: LIST
65340: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65341: LD_ADDR_VAR 0 34
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 1
65361: NEG
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: PUSH
65380: LD_INT 1
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 1
65399: NEG
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: LD_INT 1
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: LD_INT 2
65437: NEG
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: PUSH
65446: LD_INT 1
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: PUSH
65457: LD_INT 1
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 1
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 1
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 2
65497: NEG
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: NEG
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: LD_INT 2
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 2
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 3
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 2
65565: PUSH
65566: LD_INT 3
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 2
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 3
65586: NEG
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65621: LD_ADDR_VAR 0 35
65625: PUSH
65626: LD_INT 0
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 1
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 1
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 0
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 1
65679: NEG
65680: PUSH
65681: LD_INT 0
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 2
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 2
65712: NEG
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
65733: LD_ADDR_VAR 0 36
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 0
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 1
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 1
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 1
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: LD_INT 2
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: LD_INT 2
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
65845: LD_ADDR_VAR 0 37
65849: PUSH
65850: LD_INT 0
65852: PUSH
65853: LD_INT 0
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 1
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 1
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 1
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: LD_INT 1
65929: NEG
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
65957: LD_ADDR_VAR 0 38
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 0
65974: PUSH
65975: LD_INT 1
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 0
66005: PUSH
66006: LD_INT 1
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: NEG
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 2
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: EMPTY
66043: LIST
66044: LIST
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 1
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66069: LD_ADDR_VAR 0 39
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 0
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 0
66086: PUSH
66087: LD_INT 1
66089: NEG
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 0
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 1
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 1
66127: NEG
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: NEG
66151: PUSH
66152: LD_INT 2
66154: NEG
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66181: LD_ADDR_VAR 0 40
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 0
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: LD_INT 1
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 1
66209: PUSH
66210: LD_INT 0
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 1
66219: PUSH
66220: LD_INT 1
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: NEG
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: LD_INT 1
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: LIST
66287: LIST
66288: LIST
66289: LIST
66290: LIST
66291: LIST
66292: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66293: LD_ADDR_VAR 0 41
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: LD_INT 0
66324: PUSH
66325: EMPTY
66326: LIST
66327: LIST
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 0
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: NEG
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: NEG
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: LD_INT 1
66389: NEG
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 2
66407: PUSH
66408: LD_INT 1
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: LD_INT 2
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: LD_INT 2
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: NEG
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: LD_INT 0
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: PUSH
66457: LD_INT 2
66459: NEG
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 2
66471: NEG
66472: PUSH
66473: LD_INT 2
66475: NEG
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: LD_INT 3
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 2
66495: PUSH
66496: LD_INT 1
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 3
66516: PUSH
66517: LD_INT 1
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 3
66526: PUSH
66527: LD_INT 2
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 3
66536: PUSH
66537: LD_INT 3
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 2
66546: PUSH
66547: LD_INT 3
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 2
66556: NEG
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: PUSH
66565: LD_INT 3
66567: NEG
66568: PUSH
66569: LD_INT 0
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 3
66578: NEG
66579: PUSH
66580: LD_INT 1
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 3
66590: NEG
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: LD_INT 3
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66643: LD_ADDR_VAR 0 42
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 1
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 0
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 1
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 1
66724: NEG
66725: PUSH
66726: LD_INT 2
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: LD_INT 2
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 2
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 2
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 1
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 2
66809: NEG
66810: PUSH
66811: LD_INT 1
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 2
66821: NEG
66822: PUSH
66823: LD_INT 2
66825: NEG
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 2
66833: NEG
66834: PUSH
66835: LD_INT 3
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: LD_INT 3
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: PUSH
66869: LD_INT 2
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 3
66889: PUSH
66890: LD_INT 3
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 1
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: NEG
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: NEG
66941: PUSH
66942: LD_INT 2
66944: NEG
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: NEG
66953: PUSH
66954: LD_INT 3
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: LIST
66976: LIST
66977: LIST
66978: LIST
66979: LIST
66980: LIST
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: LIST
66988: LIST
66989: LIST
66990: LIST
66991: LIST
66992: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66993: LD_ADDR_VAR 0 43
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: LD_INT 0
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 0
67010: PUSH
67011: LD_INT 1
67013: NEG
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 1
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 1
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: NEG
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 1
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 0
67086: PUSH
67087: LD_INT 2
67089: NEG
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: LD_INT 2
67108: PUSH
67109: LD_INT 0
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: PUSH
67119: LD_INT 1
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 2
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 1
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 2
67159: NEG
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: LD_INT 1
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: LD_INT 3
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 1
67205: PUSH
67206: LD_INT 2
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 2
67216: PUSH
67217: LD_INT 1
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: LD_INT 3
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 0
67257: PUSH
67258: LD_INT 3
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: NEG
67268: PUSH
67269: LD_INT 2
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: LD_INT 2
67278: NEG
67279: PUSH
67280: LD_INT 1
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 3
67289: NEG
67290: PUSH
67291: LD_INT 0
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 3
67300: NEG
67301: PUSH
67302: LD_INT 1
67304: NEG
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67341: LD_ADDR_VAR 0 44
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 1
67361: NEG
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: LD_INT 1
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: LD_INT 1
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 1
67422: NEG
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: PUSH
67443: LD_INT 2
67445: PUSH
67446: LD_INT 0
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: EMPTY
67460: LIST
67461: LIST
67462: PUSH
67463: LD_INT 2
67465: PUSH
67466: LD_INT 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: PUSH
67476: LD_INT 2
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: LD_INT 1
67485: NEG
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 2
67496: NEG
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 2
67507: NEG
67508: PUSH
67509: LD_INT 1
67511: NEG
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 2
67519: NEG
67520: PUSH
67521: LD_INT 2
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: LD_INT 3
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 3
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 2
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 3
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 2
67594: PUSH
67595: LD_INT 3
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 3
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 3
67638: NEG
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 3
67650: NEG
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67691: LD_ADDR_VAR 0 45
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 1
67711: NEG
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: LD_INT 0
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 1
67729: PUSH
67730: LD_INT 1
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 0
67739: PUSH
67740: LD_INT 1
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: NEG
67750: PUSH
67751: LD_INT 0
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 1
67760: NEG
67761: PUSH
67762: LD_INT 1
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: LD_INT 2
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 0
67784: PUSH
67785: LD_INT 2
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: PUSH
67796: LD_INT 1
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 2
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 2
67816: PUSH
67817: LD_INT 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: LD_INT 2
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 0
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 2
67857: NEG
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 2
67869: NEG
67870: PUSH
67871: LD_INT 2
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 2
67881: NEG
67882: PUSH
67883: LD_INT 3
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 1
67893: NEG
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: LD_INT 3
67908: NEG
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: PUSH
67917: LD_INT 2
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 3
67927: PUSH
67928: LD_INT 2
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 3
67937: PUSH
67938: LD_INT 3
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: LD_INT 3
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: LD_INT 3
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: LD_INT 3
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 1
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 3
67988: NEG
67989: PUSH
67990: LD_INT 2
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 3
68000: NEG
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68041: LD_ADDR_VAR 0 46
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 1
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 1
68079: PUSH
68080: LD_INT 1
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: LD_INT 1
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 1
68099: NEG
68100: PUSH
68101: LD_INT 0
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 1
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: LD_INT 2
68126: NEG
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 2
68137: NEG
68138: PUSH
68139: EMPTY
68140: LIST
68141: LIST
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 2
68156: PUSH
68157: LD_INT 0
68159: PUSH
68160: EMPTY
68161: LIST
68162: LIST
68163: PUSH
68164: LD_INT 2
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: EMPTY
68171: LIST
68172: LIST
68173: PUSH
68174: LD_INT 1
68176: PUSH
68177: LD_INT 2
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: EMPTY
68191: LIST
68192: LIST
68193: PUSH
68194: LD_INT 1
68196: NEG
68197: PUSH
68198: LD_INT 1
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 2
68207: NEG
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 2
68218: NEG
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 1
68230: NEG
68231: PUSH
68232: LD_INT 3
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 0
68242: PUSH
68243: LD_INT 3
68245: NEG
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: PUSH
68254: LD_INT 2
68256: NEG
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 2
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 3
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 3
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 1
68295: PUSH
68296: LD_INT 3
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 0
68305: PUSH
68306: LD_INT 3
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 2
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 2
68326: NEG
68327: PUSH
68328: LD_INT 1
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 3
68337: NEG
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 3
68348: NEG
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68389: LD_ADDR_VAR 0 47
68393: PUSH
68394: LD_INT 0
68396: PUSH
68397: LD_INT 0
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: LD_INT 1
68409: NEG
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 1
68417: PUSH
68418: LD_INT 0
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 1
68427: PUSH
68428: LD_INT 1
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: LD_INT 1
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: NEG
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: LD_INT 2
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 1
68493: PUSH
68494: LD_INT 1
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 2
68504: NEG
68505: PUSH
68506: LD_INT 1
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: NEG
68517: PUSH
68518: LD_INT 2
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68540: LD_ADDR_VAR 0 48
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 0
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: LD_INT 1
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 1
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 1
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 0
68588: PUSH
68589: LD_INT 1
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 1
68598: NEG
68599: PUSH
68600: LD_INT 0
68602: PUSH
68603: EMPTY
68604: LIST
68605: LIST
68606: PUSH
68607: LD_INT 1
68609: NEG
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: LD_INT 2
68625: NEG
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: LD_INT 2
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: PUSH
68645: LD_INT 1
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68687: LD_ADDR_VAR 0 49
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 0
68704: PUSH
68705: LD_INT 1
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 0
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 1
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 1
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 1
68768: PUSH
68769: LD_INT 1
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 2
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 2
68789: PUSH
68790: LD_INT 1
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 2
68799: PUSH
68800: LD_INT 2
68802: PUSH
68803: EMPTY
68804: LIST
68805: LIST
68806: PUSH
68807: LD_INT 1
68809: PUSH
68810: LD_INT 2
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68831: LD_ADDR_VAR 0 50
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 0
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: LD_INT 1
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: PUSH
68870: LD_INT 1
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 0
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: LD_INT 0
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 1
68900: NEG
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 2
68912: PUSH
68913: LD_INT 1
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 2
68922: PUSH
68923: LD_INT 2
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: LD_INT 2
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 0
68942: PUSH
68943: LD_INT 2
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: PUSH
68950: LD_INT 1
68952: NEG
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68975: LD_ADDR_VAR 0 51
68979: PUSH
68980: LD_INT 0
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 0
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: PUSH
69001: LD_INT 1
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 0
69023: PUSH
69024: LD_INT 1
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 1
69033: NEG
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: NEG
69045: PUSH
69046: LD_INT 1
69048: NEG
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: LD_INT 2
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 0
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: LD_INT 1
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 2
69087: NEG
69088: PUSH
69089: LD_INT 0
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69122: LD_ADDR_VAR 0 52
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 0
69139: PUSH
69140: LD_INT 1
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: LD_INT 1
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 1
69180: NEG
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: NEG
69192: PUSH
69193: LD_INT 1
69195: NEG
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: PUSH
69201: LD_INT 1
69203: NEG
69204: PUSH
69205: LD_INT 2
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: LD_INT 1
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 2
69226: NEG
69227: PUSH
69228: LD_INT 0
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 2
69237: NEG
69238: PUSH
69239: LD_INT 1
69241: NEG
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: LD_INT 2
69253: NEG
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69273: LD_ADDR_VAR 0 53
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: LD_INT 0
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 1
69301: PUSH
69302: LD_INT 0
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: PUSH
69312: LD_INT 1
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 0
69321: PUSH
69322: LD_INT 1
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: NEG
69332: PUSH
69333: LD_INT 0
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: LD_INT 1
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 1
69354: NEG
69355: PUSH
69356: LD_INT 2
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: LD_INT 2
69369: NEG
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 1
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: LD_INT 0
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 2
69398: PUSH
69399: LD_INT 1
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 2
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: LD_INT 2
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 0
69428: PUSH
69429: LD_INT 2
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: NEG
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: PUSH
69447: LD_INT 2
69449: NEG
69450: PUSH
69451: LD_INT 0
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 2
69460: NEG
69461: PUSH
69462: LD_INT 1
69464: NEG
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 2
69472: NEG
69473: PUSH
69474: LD_INT 2
69476: NEG
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69503: LD_ADDR_VAR 0 54
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 0
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 0
69520: PUSH
69521: LD_INT 1
69523: NEG
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 1
69531: PUSH
69532: LD_INT 0
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 1
69541: PUSH
69542: LD_INT 1
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: LD_INT 1
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: PUSH
69570: LD_INT 1
69572: NEG
69573: PUSH
69574: LD_INT 1
69576: NEG
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: NEG
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 2
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 2
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 2
69638: PUSH
69639: LD_INT 2
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 1
69648: PUSH
69649: LD_INT 2
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 2
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: NEG
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 2
69690: NEG
69691: PUSH
69692: LD_INT 1
69694: NEG
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: LD_INT 2
69702: NEG
69703: PUSH
69704: LD_INT 2
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69733: LD_ADDR_VAR 0 55
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: LD_INT 1
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: LD_INT 1
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 1
69802: NEG
69803: PUSH
69804: LD_INT 1
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: LD_INT 2
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: LD_INT 2
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: LD_INT 1
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 2
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: LD_INT 1
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 2
69868: PUSH
69869: LD_INT 2
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 1
69878: PUSH
69879: LD_INT 2
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 0
69888: PUSH
69889: LD_INT 2
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 1
69898: NEG
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 2
69909: NEG
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 2
69920: NEG
69921: PUSH
69922: LD_INT 1
69924: NEG
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 2
69932: NEG
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69963: LD_ADDR_VAR 0 56
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: LD_INT 0
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: LD_INT 1
69983: NEG
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 1
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 1
70001: PUSH
70002: LD_INT 1
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 0
70011: PUSH
70012: LD_INT 1
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: EMPTY
70027: LIST
70028: LIST
70029: PUSH
70030: LD_INT 1
70032: NEG
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 1
70044: NEG
70045: PUSH
70046: LD_INT 2
70048: NEG
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: LD_INT 2
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 1
70067: PUSH
70068: LD_INT 1
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 2
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 2
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: LD_INT 2
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 2
70150: NEG
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: NEG
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70193: LD_ADDR_VAR 0 57
70197: PUSH
70198: LD_INT 0
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: EMPTY
70205: LIST
70206: LIST
70207: PUSH
70208: LD_INT 0
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 1
70221: PUSH
70222: LD_INT 0
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 1
70231: PUSH
70232: LD_INT 1
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: LD_INT 1
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 1
70274: NEG
70275: PUSH
70276: LD_INT 2
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 2
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: LD_INT 1
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 0
70311: PUSH
70312: EMPTY
70313: LIST
70314: LIST
70315: PUSH
70316: LD_INT 2
70318: PUSH
70319: LD_INT 1
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: LD_INT 2
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 1
70338: PUSH
70339: LD_INT 2
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: EMPTY
70353: LIST
70354: LIST
70355: PUSH
70356: LD_INT 1
70358: NEG
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 2
70369: NEG
70370: PUSH
70371: LD_INT 0
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 2
70380: NEG
70381: PUSH
70382: LD_INT 1
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 2
70392: NEG
70393: PUSH
70394: LD_INT 2
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70423: LD_ADDR_VAR 0 58
70427: PUSH
70428: LD_INT 0
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: LD_INT 0
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: LD_INT 1
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 0
70471: PUSH
70472: LD_INT 1
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: NEG
70482: PUSH
70483: LD_INT 0
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: NEG
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 1
70504: NEG
70505: PUSH
70506: LD_INT 2
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: LD_INT 2
70519: NEG
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: LD_INT 1
70530: NEG
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 2
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 2
70548: PUSH
70549: LD_INT 1
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 2
70558: PUSH
70559: LD_INT 2
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: LD_INT 2
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: PUSH
70576: LD_INT 0
70578: PUSH
70579: LD_INT 2
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 1
70588: NEG
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 2
70599: NEG
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 2
70610: NEG
70611: PUSH
70612: LD_INT 1
70614: NEG
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 2
70622: NEG
70623: PUSH
70624: LD_INT 2
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70653: LD_ADDR_VAR 0 59
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: LD_INT 0
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: LD_INT 1
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 0
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 1
70711: NEG
70712: PUSH
70713: LD_INT 0
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 1
70722: NEG
70723: PUSH
70724: LD_INT 1
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70741: LD_ADDR_VAR 0 60
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 0
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 0
70758: PUSH
70759: LD_INT 1
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: PUSH
70770: LD_INT 0
70772: PUSH
70773: EMPTY
70774: LIST
70775: LIST
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: LD_INT 1
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 0
70789: PUSH
70790: LD_INT 1
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 1
70799: NEG
70800: PUSH
70801: LD_INT 0
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 1
70810: NEG
70811: PUSH
70812: LD_INT 1
70814: NEG
70815: PUSH
70816: EMPTY
70817: LIST
70818: LIST
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70829: LD_ADDR_VAR 0 61
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 1
70849: NEG
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: LD_INT 0
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 1
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 0
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: NEG
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: LD_INT 1
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
70917: LD_ADDR_VAR 0 62
70921: PUSH
70922: LD_INT 0
70924: PUSH
70925: LD_INT 0
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 1
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 1
70955: PUSH
70956: LD_INT 1
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 1
70975: NEG
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 1
70986: NEG
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71005: LD_ADDR_VAR 0 63
71009: PUSH
71010: LD_INT 0
71012: PUSH
71013: LD_INT 0
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 0
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 1
71033: PUSH
71034: LD_INT 0
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 1
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 0
71053: PUSH
71054: LD_INT 1
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 1
71074: NEG
71075: PUSH
71076: LD_INT 1
71078: NEG
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71093: LD_ADDR_VAR 0 64
71097: PUSH
71098: LD_INT 0
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 1
71121: PUSH
71122: LD_INT 0
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 1
71131: PUSH
71132: LD_INT 1
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 0
71141: PUSH
71142: LD_INT 1
71144: PUSH
71145: EMPTY
71146: LIST
71147: LIST
71148: PUSH
71149: LD_INT 1
71151: NEG
71152: PUSH
71153: LD_INT 0
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 1
71162: NEG
71163: PUSH
71164: LD_INT 1
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: ST_TO_ADDR
// end ; 1 :
71181: GO 77078
71183: LD_INT 1
71185: DOUBLE
71186: EQUAL
71187: IFTRUE 71191
71189: GO 73814
71191: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71192: LD_ADDR_VAR 0 11
71196: PUSH
71197: LD_INT 1
71199: NEG
71200: PUSH
71201: LD_INT 3
71203: NEG
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: PUSH
71209: LD_INT 0
71211: PUSH
71212: LD_INT 3
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 1
71222: PUSH
71223: LD_INT 2
71225: NEG
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71236: LD_ADDR_VAR 0 12
71240: PUSH
71241: LD_INT 2
71243: PUSH
71244: LD_INT 1
71246: NEG
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 3
71254: PUSH
71255: LD_INT 0
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 3
71264: PUSH
71265: LD_INT 1
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: LIST
71276: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71277: LD_ADDR_VAR 0 13
71281: PUSH
71282: LD_INT 3
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 3
71294: PUSH
71295: LD_INT 3
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 2
71304: PUSH
71305: LD_INT 3
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: LIST
71316: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71317: LD_ADDR_VAR 0 14
71321: PUSH
71322: LD_INT 1
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 0
71334: PUSH
71335: LD_INT 3
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 2
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: LIST
71357: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71358: LD_ADDR_VAR 0 15
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: LD_INT 1
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 3
71376: NEG
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 3
71387: NEG
71388: PUSH
71389: LD_INT 1
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71402: LD_ADDR_VAR 0 16
71406: PUSH
71407: LD_INT 2
71409: NEG
71410: PUSH
71411: LD_INT 3
71413: NEG
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: PUSH
71419: LD_INT 3
71421: NEG
71422: PUSH
71423: LD_INT 2
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 3
71433: NEG
71434: PUSH
71435: LD_INT 3
71437: NEG
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71448: LD_ADDR_VAR 0 17
71452: PUSH
71453: LD_INT 1
71455: NEG
71456: PUSH
71457: LD_INT 3
71459: NEG
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: LD_INT 3
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: PUSH
71479: LD_INT 2
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: LIST
71491: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71492: LD_ADDR_VAR 0 18
71496: PUSH
71497: LD_INT 2
71499: PUSH
71500: LD_INT 1
71502: NEG
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 3
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 3
71520: PUSH
71521: LD_INT 1
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: LIST
71532: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71533: LD_ADDR_VAR 0 19
71537: PUSH
71538: LD_INT 3
71540: PUSH
71541: LD_INT 2
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 3
71550: PUSH
71551: LD_INT 3
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 2
71560: PUSH
71561: LD_INT 3
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: LIST
71572: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71573: LD_ADDR_VAR 0 20
71577: PUSH
71578: LD_INT 1
71580: PUSH
71581: LD_INT 3
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 0
71590: PUSH
71591: LD_INT 3
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 1
71600: NEG
71601: PUSH
71602: LD_INT 2
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: LIST
71613: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71614: LD_ADDR_VAR 0 21
71618: PUSH
71619: LD_INT 2
71621: NEG
71622: PUSH
71623: LD_INT 1
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 3
71632: NEG
71633: PUSH
71634: LD_INT 0
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: EMPTY
71650: LIST
71651: LIST
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: LIST
71657: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71658: LD_ADDR_VAR 0 22
71662: PUSH
71663: LD_INT 2
71665: NEG
71666: PUSH
71667: LD_INT 3
71669: NEG
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 3
71677: NEG
71678: PUSH
71679: LD_INT 2
71681: NEG
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: PUSH
71687: LD_INT 3
71689: NEG
71690: PUSH
71691: LD_INT 3
71693: NEG
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: LIST
71703: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
71704: LD_ADDR_VAR 0 23
71708: PUSH
71709: LD_INT 0
71711: PUSH
71712: LD_INT 3
71714: NEG
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: PUSH
71720: LD_INT 1
71722: NEG
71723: PUSH
71724: LD_INT 4
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 1
71734: PUSH
71735: LD_INT 3
71737: NEG
71738: PUSH
71739: EMPTY
71740: LIST
71741: LIST
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: LIST
71747: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
71748: LD_ADDR_VAR 0 24
71752: PUSH
71753: LD_INT 3
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: LD_INT 1
71768: NEG
71769: PUSH
71770: EMPTY
71771: LIST
71772: LIST
71773: PUSH
71774: LD_INT 4
71776: PUSH
71777: LD_INT 1
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: LIST
71788: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
71789: LD_ADDR_VAR 0 25
71793: PUSH
71794: LD_INT 3
71796: PUSH
71797: LD_INT 3
71799: PUSH
71800: EMPTY
71801: LIST
71802: LIST
71803: PUSH
71804: LD_INT 4
71806: PUSH
71807: LD_INT 3
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 3
71816: PUSH
71817: LD_INT 4
71819: PUSH
71820: EMPTY
71821: LIST
71822: LIST
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: LIST
71828: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
71829: LD_ADDR_VAR 0 26
71833: PUSH
71834: LD_INT 0
71836: PUSH
71837: LD_INT 3
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 1
71846: PUSH
71847: LD_INT 4
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 1
71856: NEG
71857: PUSH
71858: LD_INT 3
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: LIST
71869: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
71870: LD_ADDR_VAR 0 27
71874: PUSH
71875: LD_INT 3
71877: NEG
71878: PUSH
71879: LD_INT 0
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 3
71888: NEG
71889: PUSH
71890: LD_INT 1
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 4
71899: NEG
71900: PUSH
71901: LD_INT 1
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: LIST
71913: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
71914: LD_ADDR_VAR 0 28
71918: PUSH
71919: LD_INT 3
71921: NEG
71922: PUSH
71923: LD_INT 3
71925: NEG
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: PUSH
71931: LD_INT 3
71933: NEG
71934: PUSH
71935: LD_INT 4
71937: NEG
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 4
71945: NEG
71946: PUSH
71947: LD_INT 3
71949: NEG
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: LIST
71959: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
71960: LD_ADDR_VAR 0 29
71964: PUSH
71965: LD_INT 1
71967: NEG
71968: PUSH
71969: LD_INT 3
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 0
71979: PUSH
71980: LD_INT 3
71982: NEG
71983: PUSH
71984: EMPTY
71985: LIST
71986: LIST
71987: PUSH
71988: LD_INT 1
71990: PUSH
71991: LD_INT 2
71993: NEG
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 1
72001: NEG
72002: PUSH
72003: LD_INT 4
72005: NEG
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: LD_INT 4
72016: NEG
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: LD_INT 3
72027: NEG
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: NEG
72036: PUSH
72037: LD_INT 5
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 0
72047: PUSH
72048: LD_INT 5
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: LD_INT 4
72061: NEG
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 1
72069: NEG
72070: PUSH
72071: LD_INT 6
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: LD_INT 6
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 1
72092: PUSH
72093: LD_INT 5
72095: NEG
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72115: LD_ADDR_VAR 0 30
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: LD_INT 1
72125: NEG
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 3
72133: PUSH
72134: LD_INT 0
72136: PUSH
72137: EMPTY
72138: LIST
72139: LIST
72140: PUSH
72141: LD_INT 3
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 3
72153: PUSH
72154: LD_INT 1
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 4
72164: PUSH
72165: LD_INT 0
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_INT 4
72174: PUSH
72175: LD_INT 1
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 4
72184: PUSH
72185: LD_INT 1
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 5
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 5
72205: PUSH
72206: LD_INT 1
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: LD_INT 5
72215: PUSH
72216: LD_INT 1
72218: NEG
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 6
72226: PUSH
72227: LD_INT 0
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 6
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: EMPTY
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
72258: LD_ADDR_VAR 0 31
72262: PUSH
72263: LD_INT 3
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 3
72275: PUSH
72276: LD_INT 3
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 2
72285: PUSH
72286: LD_INT 3
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 4
72295: PUSH
72296: LD_INT 3
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: LD_INT 4
72305: PUSH
72306: LD_INT 4
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: PUSH
72313: LD_INT 3
72315: PUSH
72316: LD_INT 4
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 5
72325: PUSH
72326: LD_INT 4
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 5
72335: PUSH
72336: LD_INT 5
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 4
72345: PUSH
72346: LD_INT 5
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 6
72355: PUSH
72356: LD_INT 5
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 6
72365: PUSH
72366: LD_INT 6
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 5
72375: PUSH
72376: LD_INT 6
72378: PUSH
72379: EMPTY
72380: LIST
72381: LIST
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
72397: LD_ADDR_VAR 0 32
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: LD_INT 3
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: LD_INT 3
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 1
72424: NEG
72425: PUSH
72426: LD_INT 2
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 1
72435: PUSH
72436: LD_INT 4
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: PUSH
72443: LD_INT 0
72445: PUSH
72446: LD_INT 4
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: LD_INT 3
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 1
72466: PUSH
72467: LD_INT 5
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 0
72476: PUSH
72477: LD_INT 5
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 1
72486: NEG
72487: PUSH
72488: LD_INT 4
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 1
72497: PUSH
72498: LD_INT 6
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: LD_INT 6
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: NEG
72518: PUSH
72519: LD_INT 5
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: LIST
72533: LIST
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
72540: LD_ADDR_VAR 0 33
72544: PUSH
72545: LD_INT 2
72547: NEG
72548: PUSH
72549: LD_INT 1
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 3
72558: NEG
72559: PUSH
72560: LD_INT 0
72562: PUSH
72563: EMPTY
72564: LIST
72565: LIST
72566: PUSH
72567: LD_INT 3
72569: NEG
72570: PUSH
72571: LD_INT 1
72573: NEG
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 3
72581: NEG
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: EMPTY
72587: LIST
72588: LIST
72589: PUSH
72590: LD_INT 4
72592: NEG
72593: PUSH
72594: LD_INT 0
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 4
72603: NEG
72604: PUSH
72605: LD_INT 1
72607: NEG
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 4
72615: NEG
72616: PUSH
72617: LD_INT 1
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 5
72626: NEG
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 5
72637: NEG
72638: PUSH
72639: LD_INT 1
72641: NEG
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 5
72649: NEG
72650: PUSH
72651: LD_INT 1
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 6
72660: NEG
72661: PUSH
72662: LD_INT 0
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PUSH
72669: LD_INT 6
72671: NEG
72672: PUSH
72673: LD_INT 1
72675: NEG
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: LIST
72694: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
72695: LD_ADDR_VAR 0 34
72699: PUSH
72700: LD_INT 2
72702: NEG
72703: PUSH
72704: LD_INT 3
72706: NEG
72707: PUSH
72708: EMPTY
72709: LIST
72710: LIST
72711: PUSH
72712: LD_INT 3
72714: NEG
72715: PUSH
72716: LD_INT 2
72718: NEG
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: LD_INT 3
72730: NEG
72731: PUSH
72732: EMPTY
72733: LIST
72734: LIST
72735: PUSH
72736: LD_INT 3
72738: NEG
72739: PUSH
72740: LD_INT 4
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 4
72750: NEG
72751: PUSH
72752: LD_INT 3
72754: NEG
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 4
72762: NEG
72763: PUSH
72764: LD_INT 4
72766: NEG
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 4
72774: NEG
72775: PUSH
72776: LD_INT 5
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 5
72786: NEG
72787: PUSH
72788: LD_INT 4
72790: NEG
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 5
72798: NEG
72799: PUSH
72800: LD_INT 5
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 5
72810: NEG
72811: PUSH
72812: LD_INT 6
72814: NEG
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 6
72822: NEG
72823: PUSH
72824: LD_INT 5
72826: NEG
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 6
72834: NEG
72835: PUSH
72836: LD_INT 6
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
72858: LD_ADDR_VAR 0 41
72862: PUSH
72863: LD_INT 0
72865: PUSH
72866: LD_INT 2
72868: NEG
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 1
72876: NEG
72877: PUSH
72878: LD_INT 3
72880: NEG
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: LD_INT 2
72891: NEG
72892: PUSH
72893: EMPTY
72894: LIST
72895: LIST
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: LIST
72901: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
72902: LD_ADDR_VAR 0 42
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 0
72912: PUSH
72913: EMPTY
72914: LIST
72915: LIST
72916: PUSH
72917: LD_INT 2
72919: PUSH
72920: LD_INT 1
72922: NEG
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: PUSH
72931: LD_INT 1
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: LIST
72942: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
72943: LD_ADDR_VAR 0 43
72947: PUSH
72948: LD_INT 2
72950: PUSH
72951: LD_INT 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 3
72960: PUSH
72961: LD_INT 2
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: LIST
72982: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
72983: LD_ADDR_VAR 0 44
72987: PUSH
72988: LD_INT 0
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 1
73000: PUSH
73001: LD_INT 3
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 1
73010: NEG
73011: PUSH
73012: LD_INT 2
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73024: LD_ADDR_VAR 0 45
73028: PUSH
73029: LD_INT 2
73031: NEG
73032: PUSH
73033: LD_INT 0
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 2
73042: NEG
73043: PUSH
73044: LD_INT 1
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 3
73053: NEG
73054: PUSH
73055: LD_INT 1
73057: NEG
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: LIST
73067: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73068: LD_ADDR_VAR 0 46
73072: PUSH
73073: LD_INT 2
73075: NEG
73076: PUSH
73077: LD_INT 2
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 2
73087: NEG
73088: PUSH
73089: LD_INT 3
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 3
73099: NEG
73100: PUSH
73101: LD_INT 2
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: LIST
73113: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73114: LD_ADDR_VAR 0 47
73118: PUSH
73119: LD_INT 2
73121: NEG
73122: PUSH
73123: LD_INT 3
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 1
73133: NEG
73134: PUSH
73135: LD_INT 3
73137: NEG
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73147: LD_ADDR_VAR 0 48
73151: PUSH
73152: LD_INT 1
73154: PUSH
73155: LD_INT 2
73157: NEG
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 2
73165: PUSH
73166: LD_INT 1
73168: NEG
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73178: LD_ADDR_VAR 0 49
73182: PUSH
73183: LD_INT 3
73185: PUSH
73186: LD_INT 1
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: LD_INT 3
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73207: LD_ADDR_VAR 0 50
73211: PUSH
73212: LD_INT 2
73214: PUSH
73215: LD_INT 3
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 1
73224: PUSH
73225: LD_INT 3
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73236: LD_ADDR_VAR 0 51
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: LD_INT 2
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 2
73254: NEG
73255: PUSH
73256: LD_INT 1
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73267: LD_ADDR_VAR 0 52
73271: PUSH
73272: LD_INT 3
73274: NEG
73275: PUSH
73276: LD_INT 1
73278: NEG
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 3
73286: NEG
73287: PUSH
73288: LD_INT 2
73290: NEG
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: PUSH
73296: EMPTY
73297: LIST
73298: LIST
73299: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73300: LD_ADDR_VAR 0 53
73304: PUSH
73305: LD_INT 1
73307: NEG
73308: PUSH
73309: LD_INT 3
73311: NEG
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 0
73319: PUSH
73320: LD_INT 3
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 1
73330: PUSH
73331: LD_INT 2
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: LIST
73343: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73344: LD_ADDR_VAR 0 54
73348: PUSH
73349: LD_INT 2
73351: PUSH
73352: LD_INT 1
73354: NEG
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 3
73362: PUSH
73363: LD_INT 0
73365: PUSH
73366: EMPTY
73367: LIST
73368: LIST
73369: PUSH
73370: LD_INT 3
73372: PUSH
73373: LD_INT 1
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: LIST
73384: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73385: LD_ADDR_VAR 0 55
73389: PUSH
73390: LD_INT 3
73392: PUSH
73393: LD_INT 2
73395: PUSH
73396: EMPTY
73397: LIST
73398: LIST
73399: PUSH
73400: LD_INT 3
73402: PUSH
73403: LD_INT 3
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 2
73412: PUSH
73413: LD_INT 3
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: EMPTY
73421: LIST
73422: LIST
73423: LIST
73424: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73425: LD_ADDR_VAR 0 56
73429: PUSH
73430: LD_INT 1
73432: PUSH
73433: LD_INT 3
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: LD_INT 3
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 1
73452: NEG
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: LIST
73465: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73466: LD_ADDR_VAR 0 57
73470: PUSH
73471: LD_INT 2
73473: NEG
73474: PUSH
73475: LD_INT 1
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 3
73484: NEG
73485: PUSH
73486: LD_INT 0
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 3
73495: NEG
73496: PUSH
73497: LD_INT 1
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: LIST
73509: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73510: LD_ADDR_VAR 0 58
73514: PUSH
73515: LD_INT 2
73517: NEG
73518: PUSH
73519: LD_INT 3
73521: NEG
73522: PUSH
73523: EMPTY
73524: LIST
73525: LIST
73526: PUSH
73527: LD_INT 3
73529: NEG
73530: PUSH
73531: LD_INT 2
73533: NEG
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 3
73541: NEG
73542: PUSH
73543: LD_INT 3
73545: NEG
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: LIST
73555: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
73556: LD_ADDR_VAR 0 59
73560: PUSH
73561: LD_INT 1
73563: NEG
73564: PUSH
73565: LD_INT 2
73567: NEG
73568: PUSH
73569: EMPTY
73570: LIST
73571: LIST
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: LD_INT 2
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 1
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: LIST
73599: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73600: LD_ADDR_VAR 0 60
73604: PUSH
73605: LD_INT 1
73607: PUSH
73608: LD_INT 1
73610: NEG
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 2
73618: PUSH
73619: LD_INT 0
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 2
73628: PUSH
73629: LD_INT 1
73631: PUSH
73632: EMPTY
73633: LIST
73634: LIST
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: LIST
73640: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73641: LD_ADDR_VAR 0 61
73645: PUSH
73646: LD_INT 2
73648: PUSH
73649: LD_INT 1
73651: PUSH
73652: EMPTY
73653: LIST
73654: LIST
73655: PUSH
73656: LD_INT 2
73658: PUSH
73659: LD_INT 2
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PUSH
73666: LD_INT 1
73668: PUSH
73669: LD_INT 2
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: LIST
73680: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73681: LD_ADDR_VAR 0 62
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: LD_INT 2
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 0
73698: PUSH
73699: LD_INT 2
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 1
73708: NEG
73709: PUSH
73710: LD_INT 1
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: LIST
73721: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73722: LD_ADDR_VAR 0 63
73726: PUSH
73727: LD_INT 1
73729: NEG
73730: PUSH
73731: LD_INT 1
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 2
73740: NEG
73741: PUSH
73742: LD_INT 0
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 2
73751: NEG
73752: PUSH
73753: LD_INT 1
73755: NEG
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: LIST
73765: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73766: LD_ADDR_VAR 0 64
73770: PUSH
73771: LD_INT 1
73773: NEG
73774: PUSH
73775: LD_INT 2
73777: NEG
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 2
73785: NEG
73786: PUSH
73787: LD_INT 1
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 2
73797: NEG
73798: PUSH
73799: LD_INT 2
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: LIST
73811: ST_TO_ADDR
// end ; 2 :
73812: GO 77078
73814: LD_INT 2
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73822
73820: GO 77077
73822: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
73823: LD_ADDR_VAR 0 29
73827: PUSH
73828: LD_INT 4
73830: PUSH
73831: LD_INT 0
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 4
73840: PUSH
73841: LD_INT 1
73843: NEG
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 5
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 5
73861: PUSH
73862: LD_INT 1
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 4
73871: PUSH
73872: LD_INT 1
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 3
73881: PUSH
73882: LD_INT 0
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 3
73891: PUSH
73892: LD_INT 1
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 3
73902: PUSH
73903: LD_INT 2
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 5
73913: PUSH
73914: LD_INT 2
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 3
73923: PUSH
73924: LD_INT 3
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 3
73933: PUSH
73934: LD_INT 2
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 4
73943: PUSH
73944: LD_INT 3
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 4
73953: PUSH
73954: LD_INT 4
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 3
73963: PUSH
73964: LD_INT 4
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: LD_INT 3
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 2
73983: PUSH
73984: LD_INT 2
73986: PUSH
73987: EMPTY
73988: LIST
73989: LIST
73990: PUSH
73991: LD_INT 4
73993: PUSH
73994: LD_INT 2
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 2
74003: PUSH
74004: LD_INT 4
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: LD_INT 0
74013: PUSH
74014: LD_INT 4
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 0
74023: PUSH
74024: LD_INT 3
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 1
74033: PUSH
74034: LD_INT 4
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 1
74043: PUSH
74044: LD_INT 5
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 5
74056: PUSH
74057: EMPTY
74058: LIST
74059: LIST
74060: PUSH
74061: LD_INT 1
74063: NEG
74064: PUSH
74065: LD_INT 4
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 1
74074: NEG
74075: PUSH
74076: LD_INT 3
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 2
74085: PUSH
74086: LD_INT 5
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: LD_INT 2
74095: NEG
74096: PUSH
74097: LD_INT 3
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 3
74106: NEG
74107: PUSH
74108: LD_INT 0
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 3
74117: NEG
74118: PUSH
74119: LD_INT 1
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 2
74129: NEG
74130: PUSH
74131: LD_INT 0
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 2
74140: NEG
74141: PUSH
74142: LD_INT 1
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 3
74151: NEG
74152: PUSH
74153: LD_INT 1
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 4
74162: NEG
74163: PUSH
74164: LD_INT 0
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 4
74173: NEG
74174: PUSH
74175: LD_INT 1
74177: NEG
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 4
74185: NEG
74186: PUSH
74187: LD_INT 2
74189: NEG
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 2
74197: NEG
74198: PUSH
74199: LD_INT 2
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 4
74208: NEG
74209: PUSH
74210: LD_INT 4
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 4
74220: NEG
74221: PUSH
74222: LD_INT 5
74224: NEG
74225: PUSH
74226: EMPTY
74227: LIST
74228: LIST
74229: PUSH
74230: LD_INT 3
74232: NEG
74233: PUSH
74234: LD_INT 4
74236: NEG
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 3
74244: NEG
74245: PUSH
74246: LD_INT 3
74248: NEG
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 4
74256: NEG
74257: PUSH
74258: LD_INT 3
74260: NEG
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 5
74268: NEG
74269: PUSH
74270: LD_INT 4
74272: NEG
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 5
74280: NEG
74281: PUSH
74282: LD_INT 5
74284: NEG
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 3
74292: NEG
74293: PUSH
74294: LD_INT 5
74296: NEG
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 5
74304: NEG
74305: PUSH
74306: LD_INT 3
74308: NEG
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: LIST
74335: LIST
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: LIST
74360: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
74361: LD_ADDR_VAR 0 30
74365: PUSH
74366: LD_INT 4
74368: PUSH
74369: LD_INT 4
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 4
74378: PUSH
74379: LD_INT 3
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 5
74388: PUSH
74389: LD_INT 4
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 5
74398: PUSH
74399: LD_INT 5
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 4
74408: PUSH
74409: LD_INT 5
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 3
74418: PUSH
74419: LD_INT 4
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 3
74428: PUSH
74429: LD_INT 3
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 5
74438: PUSH
74439: LD_INT 3
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 3
74448: PUSH
74449: LD_INT 5
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 0
74458: PUSH
74459: LD_INT 3
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 0
74468: PUSH
74469: LD_INT 2
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: LD_INT 3
74481: PUSH
74482: EMPTY
74483: LIST
74484: LIST
74485: PUSH
74486: LD_INT 1
74488: PUSH
74489: LD_INT 4
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 0
74498: PUSH
74499: LD_INT 4
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 1
74508: NEG
74509: PUSH
74510: LD_INT 3
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 1
74519: NEG
74520: PUSH
74521: LD_INT 2
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 2
74530: PUSH
74531: LD_INT 4
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 2
74540: NEG
74541: PUSH
74542: LD_INT 2
74544: PUSH
74545: EMPTY
74546: LIST
74547: LIST
74548: PUSH
74549: LD_INT 4
74551: NEG
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: EMPTY
74557: LIST
74558: LIST
74559: PUSH
74560: LD_INT 4
74562: NEG
74563: PUSH
74564: LD_INT 1
74566: NEG
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: PUSH
74572: LD_INT 3
74574: NEG
74575: PUSH
74576: LD_INT 0
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: PUSH
74583: LD_INT 3
74585: NEG
74586: PUSH
74587: LD_INT 1
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 4
74596: NEG
74597: PUSH
74598: LD_INT 1
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 5
74607: NEG
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 5
74618: NEG
74619: PUSH
74620: LD_INT 1
74622: NEG
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 5
74630: NEG
74631: PUSH
74632: LD_INT 2
74634: NEG
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 3
74642: NEG
74643: PUSH
74644: LD_INT 2
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 3
74653: NEG
74654: PUSH
74655: LD_INT 3
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: LD_INT 3
74665: NEG
74666: PUSH
74667: LD_INT 4
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 2
74677: NEG
74678: PUSH
74679: LD_INT 3
74681: NEG
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 2
74689: NEG
74690: PUSH
74691: LD_INT 2
74693: NEG
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 3
74701: NEG
74702: PUSH
74703: LD_INT 2
74705: NEG
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 4
74713: NEG
74714: PUSH
74715: LD_INT 3
74717: NEG
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: PUSH
74723: LD_INT 4
74725: NEG
74726: PUSH
74727: LD_INT 4
74729: NEG
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 2
74737: NEG
74738: PUSH
74739: LD_INT 4
74741: NEG
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 4
74749: NEG
74750: PUSH
74751: LD_INT 2
74753: NEG
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_INT 4
74764: NEG
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: LD_INT 5
74775: NEG
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 1
74783: PUSH
74784: LD_INT 4
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 1
74794: PUSH
74795: LD_INT 3
74797: NEG
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 0
74805: PUSH
74806: LD_INT 3
74808: NEG
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: PUSH
74814: LD_INT 1
74816: NEG
74817: PUSH
74818: LD_INT 4
74820: NEG
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 1
74828: NEG
74829: PUSH
74830: LD_INT 5
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 2
74840: PUSH
74841: LD_INT 3
74843: NEG
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 2
74851: NEG
74852: PUSH
74853: LD_INT 5
74855: NEG
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: LIST
74873: LIST
74874: LIST
74875: LIST
74876: LIST
74877: LIST
74878: LIST
74879: LIST
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
74908: LD_ADDR_VAR 0 31
74912: PUSH
74913: LD_INT 0
74915: PUSH
74916: LD_INT 4
74918: PUSH
74919: EMPTY
74920: LIST
74921: LIST
74922: PUSH
74923: LD_INT 0
74925: PUSH
74926: LD_INT 3
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: LD_INT 1
74935: PUSH
74936: LD_INT 4
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 1
74945: PUSH
74946: LD_INT 5
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: PUSH
74953: LD_INT 0
74955: PUSH
74956: LD_INT 5
74958: PUSH
74959: EMPTY
74960: LIST
74961: LIST
74962: PUSH
74963: LD_INT 1
74965: NEG
74966: PUSH
74967: LD_INT 4
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: LD_INT 1
74976: NEG
74977: PUSH
74978: LD_INT 3
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 2
74987: PUSH
74988: LD_INT 5
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 2
74997: NEG
74998: PUSH
74999: LD_INT 3
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 3
75008: NEG
75009: PUSH
75010: LD_INT 0
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 3
75019: NEG
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 2
75031: NEG
75032: PUSH
75033: LD_INT 0
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 2
75042: NEG
75043: PUSH
75044: LD_INT 1
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 3
75053: NEG
75054: PUSH
75055: LD_INT 1
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 4
75064: NEG
75065: PUSH
75066: LD_INT 0
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 4
75075: NEG
75076: PUSH
75077: LD_INT 1
75079: NEG
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 4
75087: NEG
75088: PUSH
75089: LD_INT 2
75091: NEG
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 2
75099: NEG
75100: PUSH
75101: LD_INT 2
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 4
75110: NEG
75111: PUSH
75112: LD_INT 4
75114: NEG
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 4
75122: NEG
75123: PUSH
75124: LD_INT 5
75126: NEG
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 3
75134: NEG
75135: PUSH
75136: LD_INT 4
75138: NEG
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 3
75146: NEG
75147: PUSH
75148: LD_INT 3
75150: NEG
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 4
75158: NEG
75159: PUSH
75160: LD_INT 3
75162: NEG
75163: PUSH
75164: EMPTY
75165: LIST
75166: LIST
75167: PUSH
75168: LD_INT 5
75170: NEG
75171: PUSH
75172: LD_INT 4
75174: NEG
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 5
75182: NEG
75183: PUSH
75184: LD_INT 5
75186: NEG
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 3
75194: NEG
75195: PUSH
75196: LD_INT 5
75198: NEG
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: PUSH
75204: LD_INT 5
75206: NEG
75207: PUSH
75208: LD_INT 3
75210: NEG
75211: PUSH
75212: EMPTY
75213: LIST
75214: LIST
75215: PUSH
75216: LD_INT 0
75218: PUSH
75219: LD_INT 3
75221: NEG
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: LD_INT 4
75232: NEG
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: PUSH
75238: LD_INT 1
75240: PUSH
75241: LD_INT 3
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 1
75251: PUSH
75252: LD_INT 2
75254: NEG
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 0
75262: PUSH
75263: LD_INT 2
75265: NEG
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 1
75273: NEG
75274: PUSH
75275: LD_INT 3
75277: NEG
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 1
75285: NEG
75286: PUSH
75287: LD_INT 4
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 2
75297: PUSH
75298: LD_INT 2
75300: NEG
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 2
75308: NEG
75309: PUSH
75310: LD_INT 4
75312: NEG
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 4
75320: PUSH
75321: LD_INT 0
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 4
75330: PUSH
75331: LD_INT 1
75333: NEG
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: LD_INT 5
75341: PUSH
75342: LD_INT 0
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: PUSH
75349: LD_INT 5
75351: PUSH
75352: LD_INT 1
75354: PUSH
75355: EMPTY
75356: LIST
75357: LIST
75358: PUSH
75359: LD_INT 4
75361: PUSH
75362: LD_INT 1
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 3
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 3
75381: PUSH
75382: LD_INT 1
75384: NEG
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 3
75392: PUSH
75393: LD_INT 2
75395: NEG
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 5
75403: PUSH
75404: LD_INT 2
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
75458: LD_ADDR_VAR 0 32
75462: PUSH
75463: LD_INT 4
75465: NEG
75466: PUSH
75467: LD_INT 0
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 4
75476: NEG
75477: PUSH
75478: LD_INT 1
75480: NEG
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 3
75488: NEG
75489: PUSH
75490: LD_INT 0
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 3
75499: NEG
75500: PUSH
75501: LD_INT 1
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 4
75510: NEG
75511: PUSH
75512: LD_INT 1
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 5
75521: NEG
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: PUSH
75530: LD_INT 5
75532: NEG
75533: PUSH
75534: LD_INT 1
75536: NEG
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: PUSH
75542: LD_INT 5
75544: NEG
75545: PUSH
75546: LD_INT 2
75548: NEG
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 3
75556: NEG
75557: PUSH
75558: LD_INT 2
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 3
75567: NEG
75568: PUSH
75569: LD_INT 3
75571: NEG
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 3
75579: NEG
75580: PUSH
75581: LD_INT 4
75583: NEG
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 2
75591: NEG
75592: PUSH
75593: LD_INT 3
75595: NEG
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 2
75603: NEG
75604: PUSH
75605: LD_INT 2
75607: NEG
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PUSH
75613: LD_INT 3
75615: NEG
75616: PUSH
75617: LD_INT 2
75619: NEG
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 4
75627: NEG
75628: PUSH
75629: LD_INT 3
75631: NEG
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 4
75639: NEG
75640: PUSH
75641: LD_INT 4
75643: NEG
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: LD_INT 2
75651: NEG
75652: PUSH
75653: LD_INT 4
75655: NEG
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 4
75663: NEG
75664: PUSH
75665: LD_INT 2
75667: NEG
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: LD_INT 4
75678: NEG
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: PUSH
75684: LD_INT 0
75686: PUSH
75687: LD_INT 5
75689: NEG
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 1
75697: PUSH
75698: LD_INT 4
75700: NEG
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 1
75708: PUSH
75709: LD_INT 3
75711: NEG
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 0
75719: PUSH
75720: LD_INT 3
75722: NEG
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 1
75730: NEG
75731: PUSH
75732: LD_INT 4
75734: NEG
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: PUSH
75740: LD_INT 1
75742: NEG
75743: PUSH
75744: LD_INT 5
75746: NEG
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: PUSH
75752: LD_INT 2
75754: PUSH
75755: LD_INT 3
75757: NEG
75758: PUSH
75759: EMPTY
75760: LIST
75761: LIST
75762: PUSH
75763: LD_INT 2
75765: NEG
75766: PUSH
75767: LD_INT 5
75769: NEG
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 3
75777: PUSH
75778: LD_INT 0
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 3
75787: PUSH
75788: LD_INT 1
75790: NEG
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 4
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: LD_INT 4
75808: PUSH
75809: LD_INT 1
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PUSH
75816: LD_INT 3
75818: PUSH
75819: LD_INT 1
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 2
75828: PUSH
75829: LD_INT 0
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: LD_INT 2
75838: PUSH
75839: LD_INT 1
75841: NEG
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 2
75849: PUSH
75850: LD_INT 2
75852: NEG
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: LD_INT 4
75860: PUSH
75861: LD_INT 2
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 4
75870: PUSH
75871: LD_INT 4
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 4
75880: PUSH
75881: LD_INT 3
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 5
75890: PUSH
75891: LD_INT 4
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 5
75900: PUSH
75901: LD_INT 5
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 4
75910: PUSH
75911: LD_INT 5
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 3
75920: PUSH
75921: LD_INT 4
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 3
75930: PUSH
75931: LD_INT 3
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: LD_INT 5
75940: PUSH
75941: LD_INT 3
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: PUSH
75948: LD_INT 3
75950: PUSH
75951: LD_INT 5
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: LIST
75999: LIST
76000: LIST
76001: LIST
76002: LIST
76003: LIST
76004: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76005: LD_ADDR_VAR 0 33
76009: PUSH
76010: LD_INT 4
76012: NEG
76013: PUSH
76014: LD_INT 4
76016: NEG
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 4
76024: NEG
76025: PUSH
76026: LD_INT 5
76028: NEG
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: LD_INT 3
76036: NEG
76037: PUSH
76038: LD_INT 4
76040: NEG
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 3
76048: NEG
76049: PUSH
76050: LD_INT 3
76052: NEG
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 4
76060: NEG
76061: PUSH
76062: LD_INT 3
76064: NEG
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 5
76072: NEG
76073: PUSH
76074: LD_INT 4
76076: NEG
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PUSH
76082: LD_INT 5
76084: NEG
76085: PUSH
76086: LD_INT 5
76088: NEG
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: LD_INT 3
76096: NEG
76097: PUSH
76098: LD_INT 5
76100: NEG
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 5
76108: NEG
76109: PUSH
76110: LD_INT 3
76112: NEG
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 0
76120: PUSH
76121: LD_INT 3
76123: NEG
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: PUSH
76129: LD_INT 0
76131: PUSH
76132: LD_INT 4
76134: NEG
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: LD_INT 3
76145: NEG
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 1
76153: PUSH
76154: LD_INT 2
76156: NEG
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: PUSH
76162: LD_INT 0
76164: PUSH
76165: LD_INT 2
76167: NEG
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 1
76175: NEG
76176: PUSH
76177: LD_INT 3
76179: NEG
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 1
76187: NEG
76188: PUSH
76189: LD_INT 4
76191: NEG
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 2
76199: PUSH
76200: LD_INT 2
76202: NEG
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 2
76210: NEG
76211: PUSH
76212: LD_INT 4
76214: NEG
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 4
76222: PUSH
76223: LD_INT 0
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 4
76232: PUSH
76233: LD_INT 1
76235: NEG
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 5
76243: PUSH
76244: LD_INT 0
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 5
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 4
76263: PUSH
76264: LD_INT 1
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 3
76273: PUSH
76274: LD_INT 0
76276: PUSH
76277: EMPTY
76278: LIST
76279: LIST
76280: PUSH
76281: LD_INT 3
76283: PUSH
76284: LD_INT 1
76286: NEG
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PUSH
76292: LD_INT 3
76294: PUSH
76295: LD_INT 2
76297: NEG
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PUSH
76303: LD_INT 5
76305: PUSH
76306: LD_INT 2
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 3
76315: PUSH
76316: LD_INT 3
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 3
76325: PUSH
76326: LD_INT 2
76328: PUSH
76329: EMPTY
76330: LIST
76331: LIST
76332: PUSH
76333: LD_INT 4
76335: PUSH
76336: LD_INT 3
76338: PUSH
76339: EMPTY
76340: LIST
76341: LIST
76342: PUSH
76343: LD_INT 4
76345: PUSH
76346: LD_INT 4
76348: PUSH
76349: EMPTY
76350: LIST
76351: LIST
76352: PUSH
76353: LD_INT 3
76355: PUSH
76356: LD_INT 4
76358: PUSH
76359: EMPTY
76360: LIST
76361: LIST
76362: PUSH
76363: LD_INT 2
76365: PUSH
76366: LD_INT 3
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 2
76375: PUSH
76376: LD_INT 2
76378: PUSH
76379: EMPTY
76380: LIST
76381: LIST
76382: PUSH
76383: LD_INT 4
76385: PUSH
76386: LD_INT 2
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: PUSH
76393: LD_INT 2
76395: PUSH
76396: LD_INT 4
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 0
76405: PUSH
76406: LD_INT 4
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 0
76415: PUSH
76416: LD_INT 3
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 1
76425: PUSH
76426: LD_INT 4
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PUSH
76433: LD_INT 1
76435: PUSH
76436: LD_INT 5
76438: PUSH
76439: EMPTY
76440: LIST
76441: LIST
76442: PUSH
76443: LD_INT 0
76445: PUSH
76446: LD_INT 5
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 1
76455: NEG
76456: PUSH
76457: LD_INT 4
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 1
76466: NEG
76467: PUSH
76468: LD_INT 3
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PUSH
76475: LD_INT 2
76477: PUSH
76478: LD_INT 5
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 2
76487: NEG
76488: PUSH
76489: LD_INT 3
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: LIST
76541: LIST
76542: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
76543: LD_ADDR_VAR 0 34
76547: PUSH
76548: LD_INT 0
76550: PUSH
76551: LD_INT 4
76553: NEG
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 0
76561: PUSH
76562: LD_INT 5
76564: NEG
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 1
76572: PUSH
76573: LD_INT 4
76575: NEG
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 1
76583: PUSH
76584: LD_INT 3
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 0
76594: PUSH
76595: LD_INT 3
76597: NEG
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 1
76605: NEG
76606: PUSH
76607: LD_INT 4
76609: NEG
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 1
76617: NEG
76618: PUSH
76619: LD_INT 5
76621: NEG
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: PUSH
76630: LD_INT 3
76632: NEG
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: LD_INT 2
76640: NEG
76641: PUSH
76642: LD_INT 5
76644: NEG
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: LD_INT 3
76652: PUSH
76653: LD_INT 0
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PUSH
76660: LD_INT 3
76662: PUSH
76663: LD_INT 1
76665: NEG
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: LD_INT 4
76673: PUSH
76674: LD_INT 0
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: LD_INT 4
76683: PUSH
76684: LD_INT 1
76686: PUSH
76687: EMPTY
76688: LIST
76689: LIST
76690: PUSH
76691: LD_INT 3
76693: PUSH
76694: LD_INT 1
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: PUSH
76701: LD_INT 2
76703: PUSH
76704: LD_INT 0
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: PUSH
76711: LD_INT 2
76713: PUSH
76714: LD_INT 1
76716: NEG
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 2
76724: PUSH
76725: LD_INT 2
76727: NEG
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PUSH
76733: LD_INT 4
76735: PUSH
76736: LD_INT 2
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: PUSH
76743: LD_INT 4
76745: PUSH
76746: LD_INT 4
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 4
76755: PUSH
76756: LD_INT 3
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 5
76765: PUSH
76766: LD_INT 4
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 5
76775: PUSH
76776: LD_INT 5
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 4
76785: PUSH
76786: LD_INT 5
76788: PUSH
76789: EMPTY
76790: LIST
76791: LIST
76792: PUSH
76793: LD_INT 3
76795: PUSH
76796: LD_INT 4
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 3
76805: PUSH
76806: LD_INT 3
76808: PUSH
76809: EMPTY
76810: LIST
76811: LIST
76812: PUSH
76813: LD_INT 5
76815: PUSH
76816: LD_INT 3
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 3
76825: PUSH
76826: LD_INT 5
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 0
76835: PUSH
76836: LD_INT 3
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: PUSH
76843: LD_INT 0
76845: PUSH
76846: LD_INT 2
76848: PUSH
76849: EMPTY
76850: LIST
76851: LIST
76852: PUSH
76853: LD_INT 1
76855: PUSH
76856: LD_INT 3
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: LD_INT 4
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 0
76875: PUSH
76876: LD_INT 4
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: PUSH
76883: LD_INT 1
76885: NEG
76886: PUSH
76887: LD_INT 3
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 1
76896: NEG
76897: PUSH
76898: LD_INT 2
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 2
76907: PUSH
76908: LD_INT 4
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 2
76917: NEG
76918: PUSH
76919: LD_INT 2
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 4
76928: NEG
76929: PUSH
76930: LD_INT 0
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 4
76939: NEG
76940: PUSH
76941: LD_INT 1
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 3
76951: NEG
76952: PUSH
76953: LD_INT 0
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 3
76962: NEG
76963: PUSH
76964: LD_INT 1
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 4
76973: NEG
76974: PUSH
76975: LD_INT 1
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 5
76984: NEG
76985: PUSH
76986: LD_INT 0
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 5
76995: NEG
76996: PUSH
76997: LD_INT 1
76999: NEG
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 5
77007: NEG
77008: PUSH
77009: LD_INT 2
77011: NEG
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 3
77019: NEG
77020: PUSH
77021: LD_INT 2
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: ST_TO_ADDR
// end ; end ;
77075: GO 77078
77077: POP
// case btype of b_depot , b_warehouse :
77078: LD_VAR 0 1
77082: PUSH
77083: LD_INT 0
77085: DOUBLE
77086: EQUAL
77087: IFTRUE 77097
77089: LD_INT 1
77091: DOUBLE
77092: EQUAL
77093: IFTRUE 77097
77095: GO 77298
77097: POP
// case nation of nation_american :
77098: LD_VAR 0 5
77102: PUSH
77103: LD_INT 1
77105: DOUBLE
77106: EQUAL
77107: IFTRUE 77111
77109: GO 77167
77111: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
77112: LD_ADDR_VAR 0 9
77116: PUSH
77117: LD_VAR 0 11
77121: PUSH
77122: LD_VAR 0 12
77126: PUSH
77127: LD_VAR 0 13
77131: PUSH
77132: LD_VAR 0 14
77136: PUSH
77137: LD_VAR 0 15
77141: PUSH
77142: LD_VAR 0 16
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: LIST
77151: LIST
77152: LIST
77153: LIST
77154: PUSH
77155: LD_VAR 0 4
77159: PUSH
77160: LD_INT 1
77162: PLUS
77163: ARRAY
77164: ST_TO_ADDR
77165: GO 77296
77167: LD_INT 2
77169: DOUBLE
77170: EQUAL
77171: IFTRUE 77175
77173: GO 77231
77175: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
77176: LD_ADDR_VAR 0 9
77180: PUSH
77181: LD_VAR 0 17
77185: PUSH
77186: LD_VAR 0 18
77190: PUSH
77191: LD_VAR 0 19
77195: PUSH
77196: LD_VAR 0 20
77200: PUSH
77201: LD_VAR 0 21
77205: PUSH
77206: LD_VAR 0 22
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: PUSH
77219: LD_VAR 0 4
77223: PUSH
77224: LD_INT 1
77226: PLUS
77227: ARRAY
77228: ST_TO_ADDR
77229: GO 77296
77231: LD_INT 3
77233: DOUBLE
77234: EQUAL
77235: IFTRUE 77239
77237: GO 77295
77239: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
77240: LD_ADDR_VAR 0 9
77244: PUSH
77245: LD_VAR 0 23
77249: PUSH
77250: LD_VAR 0 24
77254: PUSH
77255: LD_VAR 0 25
77259: PUSH
77260: LD_VAR 0 26
77264: PUSH
77265: LD_VAR 0 27
77269: PUSH
77270: LD_VAR 0 28
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: PUSH
77283: LD_VAR 0 4
77287: PUSH
77288: LD_INT 1
77290: PLUS
77291: ARRAY
77292: ST_TO_ADDR
77293: GO 77296
77295: POP
77296: GO 77845
77298: LD_INT 2
77300: DOUBLE
77301: EQUAL
77302: IFTRUE 77312
77304: LD_INT 3
77306: DOUBLE
77307: EQUAL
77308: IFTRUE 77312
77310: GO 77368
77312: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
77313: LD_ADDR_VAR 0 9
77317: PUSH
77318: LD_VAR 0 29
77322: PUSH
77323: LD_VAR 0 30
77327: PUSH
77328: LD_VAR 0 31
77332: PUSH
77333: LD_VAR 0 32
77337: PUSH
77338: LD_VAR 0 33
77342: PUSH
77343: LD_VAR 0 34
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: PUSH
77356: LD_VAR 0 4
77360: PUSH
77361: LD_INT 1
77363: PLUS
77364: ARRAY
77365: ST_TO_ADDR
77366: GO 77845
77368: LD_INT 16
77370: DOUBLE
77371: EQUAL
77372: IFTRUE 77424
77374: LD_INT 17
77376: DOUBLE
77377: EQUAL
77378: IFTRUE 77424
77380: LD_INT 18
77382: DOUBLE
77383: EQUAL
77384: IFTRUE 77424
77386: LD_INT 19
77388: DOUBLE
77389: EQUAL
77390: IFTRUE 77424
77392: LD_INT 20
77394: DOUBLE
77395: EQUAL
77396: IFTRUE 77424
77398: LD_INT 21
77400: DOUBLE
77401: EQUAL
77402: IFTRUE 77424
77404: LD_INT 23
77406: DOUBLE
77407: EQUAL
77408: IFTRUE 77424
77410: LD_INT 24
77412: DOUBLE
77413: EQUAL
77414: IFTRUE 77424
77416: LD_INT 25
77418: DOUBLE
77419: EQUAL
77420: IFTRUE 77424
77422: GO 77480
77424: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
77425: LD_ADDR_VAR 0 9
77429: PUSH
77430: LD_VAR 0 35
77434: PUSH
77435: LD_VAR 0 36
77439: PUSH
77440: LD_VAR 0 37
77444: PUSH
77445: LD_VAR 0 38
77449: PUSH
77450: LD_VAR 0 39
77454: PUSH
77455: LD_VAR 0 40
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: PUSH
77468: LD_VAR 0 4
77472: PUSH
77473: LD_INT 1
77475: PLUS
77476: ARRAY
77477: ST_TO_ADDR
77478: GO 77845
77480: LD_INT 6
77482: DOUBLE
77483: EQUAL
77484: IFTRUE 77536
77486: LD_INT 7
77488: DOUBLE
77489: EQUAL
77490: IFTRUE 77536
77492: LD_INT 8
77494: DOUBLE
77495: EQUAL
77496: IFTRUE 77536
77498: LD_INT 13
77500: DOUBLE
77501: EQUAL
77502: IFTRUE 77536
77504: LD_INT 12
77506: DOUBLE
77507: EQUAL
77508: IFTRUE 77536
77510: LD_INT 15
77512: DOUBLE
77513: EQUAL
77514: IFTRUE 77536
77516: LD_INT 11
77518: DOUBLE
77519: EQUAL
77520: IFTRUE 77536
77522: LD_INT 14
77524: DOUBLE
77525: EQUAL
77526: IFTRUE 77536
77528: LD_INT 10
77530: DOUBLE
77531: EQUAL
77532: IFTRUE 77536
77534: GO 77592
77536: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
77537: LD_ADDR_VAR 0 9
77541: PUSH
77542: LD_VAR 0 41
77546: PUSH
77547: LD_VAR 0 42
77551: PUSH
77552: LD_VAR 0 43
77556: PUSH
77557: LD_VAR 0 44
77561: PUSH
77562: LD_VAR 0 45
77566: PUSH
77567: LD_VAR 0 46
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: PUSH
77580: LD_VAR 0 4
77584: PUSH
77585: LD_INT 1
77587: PLUS
77588: ARRAY
77589: ST_TO_ADDR
77590: GO 77845
77592: LD_INT 36
77594: DOUBLE
77595: EQUAL
77596: IFTRUE 77600
77598: GO 77656
77600: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
77601: LD_ADDR_VAR 0 9
77605: PUSH
77606: LD_VAR 0 47
77610: PUSH
77611: LD_VAR 0 48
77615: PUSH
77616: LD_VAR 0 49
77620: PUSH
77621: LD_VAR 0 50
77625: PUSH
77626: LD_VAR 0 51
77630: PUSH
77631: LD_VAR 0 52
77635: PUSH
77636: EMPTY
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: PUSH
77644: LD_VAR 0 4
77648: PUSH
77649: LD_INT 1
77651: PLUS
77652: ARRAY
77653: ST_TO_ADDR
77654: GO 77845
77656: LD_INT 4
77658: DOUBLE
77659: EQUAL
77660: IFTRUE 77682
77662: LD_INT 5
77664: DOUBLE
77665: EQUAL
77666: IFTRUE 77682
77668: LD_INT 34
77670: DOUBLE
77671: EQUAL
77672: IFTRUE 77682
77674: LD_INT 37
77676: DOUBLE
77677: EQUAL
77678: IFTRUE 77682
77680: GO 77738
77682: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
77683: LD_ADDR_VAR 0 9
77687: PUSH
77688: LD_VAR 0 53
77692: PUSH
77693: LD_VAR 0 54
77697: PUSH
77698: LD_VAR 0 55
77702: PUSH
77703: LD_VAR 0 56
77707: PUSH
77708: LD_VAR 0 57
77712: PUSH
77713: LD_VAR 0 58
77717: PUSH
77718: EMPTY
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: PUSH
77726: LD_VAR 0 4
77730: PUSH
77731: LD_INT 1
77733: PLUS
77734: ARRAY
77735: ST_TO_ADDR
77736: GO 77845
77738: LD_INT 31
77740: DOUBLE
77741: EQUAL
77742: IFTRUE 77788
77744: LD_INT 32
77746: DOUBLE
77747: EQUAL
77748: IFTRUE 77788
77750: LD_INT 33
77752: DOUBLE
77753: EQUAL
77754: IFTRUE 77788
77756: LD_INT 27
77758: DOUBLE
77759: EQUAL
77760: IFTRUE 77788
77762: LD_INT 26
77764: DOUBLE
77765: EQUAL
77766: IFTRUE 77788
77768: LD_INT 28
77770: DOUBLE
77771: EQUAL
77772: IFTRUE 77788
77774: LD_INT 29
77776: DOUBLE
77777: EQUAL
77778: IFTRUE 77788
77780: LD_INT 30
77782: DOUBLE
77783: EQUAL
77784: IFTRUE 77788
77786: GO 77844
77788: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
77789: LD_ADDR_VAR 0 9
77793: PUSH
77794: LD_VAR 0 59
77798: PUSH
77799: LD_VAR 0 60
77803: PUSH
77804: LD_VAR 0 61
77808: PUSH
77809: LD_VAR 0 62
77813: PUSH
77814: LD_VAR 0 63
77818: PUSH
77819: LD_VAR 0 64
77823: PUSH
77824: EMPTY
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: PUSH
77832: LD_VAR 0 4
77836: PUSH
77837: LD_INT 1
77839: PLUS
77840: ARRAY
77841: ST_TO_ADDR
77842: GO 77845
77844: POP
// temp_list2 = [ ] ;
77845: LD_ADDR_VAR 0 10
77849: PUSH
77850: EMPTY
77851: ST_TO_ADDR
// for i in temp_list do
77852: LD_ADDR_VAR 0 8
77856: PUSH
77857: LD_VAR 0 9
77861: PUSH
77862: FOR_IN
77863: IFFALSE 77915
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
77865: LD_ADDR_VAR 0 10
77869: PUSH
77870: LD_VAR 0 10
77874: PUSH
77875: LD_VAR 0 8
77879: PUSH
77880: LD_INT 1
77882: ARRAY
77883: PUSH
77884: LD_VAR 0 2
77888: PLUS
77889: PUSH
77890: LD_VAR 0 8
77894: PUSH
77895: LD_INT 2
77897: ARRAY
77898: PUSH
77899: LD_VAR 0 3
77903: PLUS
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: PUSH
77909: EMPTY
77910: LIST
77911: ADD
77912: ST_TO_ADDR
77913: GO 77862
77915: POP
77916: POP
// result = temp_list2 ;
77917: LD_ADDR_VAR 0 7
77921: PUSH
77922: LD_VAR 0 10
77926: ST_TO_ADDR
// end ;
77927: LD_VAR 0 7
77931: RET
// export function EnemyInRange ( unit , dist ) ; begin
77932: LD_INT 0
77934: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
77935: LD_ADDR_VAR 0 3
77939: PUSH
77940: LD_VAR 0 1
77944: PPUSH
77945: CALL_OW 255
77949: PPUSH
77950: LD_VAR 0 1
77954: PPUSH
77955: CALL_OW 250
77959: PPUSH
77960: LD_VAR 0 1
77964: PPUSH
77965: CALL_OW 251
77969: PPUSH
77970: LD_VAR 0 2
77974: PPUSH
77975: CALL 52060 0 4
77979: PUSH
77980: LD_INT 4
77982: ARRAY
77983: ST_TO_ADDR
// end ;
77984: LD_VAR 0 3
77988: RET
// export function PlayerSeeMe ( unit ) ; begin
77989: LD_INT 0
77991: PPUSH
// result := See ( your_side , unit ) ;
77992: LD_ADDR_VAR 0 2
77996: PUSH
77997: LD_OWVAR 2
78001: PPUSH
78002: LD_VAR 0 1
78006: PPUSH
78007: CALL_OW 292
78011: ST_TO_ADDR
// end ;
78012: LD_VAR 0 2
78016: RET
// export function ReverseDir ( unit ) ; begin
78017: LD_INT 0
78019: PPUSH
// if not unit then
78020: LD_VAR 0 1
78024: NOT
78025: IFFALSE 78029
// exit ;
78027: GO 78075
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
78029: LD_ADDR_VAR 0 2
78033: PUSH
78034: LD_INT 3
78036: PUSH
78037: LD_INT 4
78039: PUSH
78040: LD_INT 5
78042: PUSH
78043: LD_INT 0
78045: PUSH
78046: LD_INT 1
78048: PUSH
78049: LD_INT 2
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: PUSH
78060: LD_VAR 0 1
78064: PPUSH
78065: CALL_OW 254
78069: PUSH
78070: LD_INT 1
78072: PLUS
78073: ARRAY
78074: ST_TO_ADDR
// end ;
78075: LD_VAR 0 2
78079: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78080: LD_INT 0
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
// if not hexes then
78087: LD_VAR 0 2
78091: NOT
78092: IFFALSE 78096
// exit ;
78094: GO 78244
// dist := 9999 ;
78096: LD_ADDR_VAR 0 5
78100: PUSH
78101: LD_INT 9999
78103: ST_TO_ADDR
// for i = 1 to hexes do
78104: LD_ADDR_VAR 0 4
78108: PUSH
78109: DOUBLE
78110: LD_INT 1
78112: DEC
78113: ST_TO_ADDR
78114: LD_VAR 0 2
78118: PUSH
78119: FOR_TO
78120: IFFALSE 78232
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_VAR 0 2
78131: PUSH
78132: LD_VAR 0 4
78136: ARRAY
78137: PUSH
78138: LD_INT 1
78140: ARRAY
78141: PPUSH
78142: LD_VAR 0 2
78146: PUSH
78147: LD_VAR 0 4
78151: ARRAY
78152: PUSH
78153: LD_INT 2
78155: ARRAY
78156: PPUSH
78157: CALL_OW 297
78161: PUSH
78162: LD_VAR 0 5
78166: LESS
78167: IFFALSE 78230
// begin hex := hexes [ i ] ;
78169: LD_ADDR_VAR 0 7
78173: PUSH
78174: LD_VAR 0 2
78178: PUSH
78179: LD_VAR 0 4
78183: ARRAY
78184: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78185: LD_ADDR_VAR 0 5
78189: PUSH
78190: LD_VAR 0 1
78194: PPUSH
78195: LD_VAR 0 2
78199: PUSH
78200: LD_VAR 0 4
78204: ARRAY
78205: PUSH
78206: LD_INT 1
78208: ARRAY
78209: PPUSH
78210: LD_VAR 0 2
78214: PUSH
78215: LD_VAR 0 4
78219: ARRAY
78220: PUSH
78221: LD_INT 2
78223: ARRAY
78224: PPUSH
78225: CALL_OW 297
78229: ST_TO_ADDR
// end ; end ;
78230: GO 78119
78232: POP
78233: POP
// result := hex ;
78234: LD_ADDR_VAR 0 3
78238: PUSH
78239: LD_VAR 0 7
78243: ST_TO_ADDR
// end ;
78244: LD_VAR 0 3
78248: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
78249: LD_INT 0
78251: PPUSH
78252: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
78253: LD_VAR 0 1
78257: NOT
78258: PUSH
78259: LD_VAR 0 1
78263: PUSH
78264: LD_INT 21
78266: PUSH
78267: LD_INT 2
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PUSH
78274: LD_INT 23
78276: PUSH
78277: LD_INT 2
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PPUSH
78288: CALL_OW 69
78292: IN
78293: NOT
78294: OR
78295: IFFALSE 78299
// exit ;
78297: GO 78346
// for i = 1 to 3 do
78299: LD_ADDR_VAR 0 3
78303: PUSH
78304: DOUBLE
78305: LD_INT 1
78307: DEC
78308: ST_TO_ADDR
78309: LD_INT 3
78311: PUSH
78312: FOR_TO
78313: IFFALSE 78344
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
78315: LD_VAR 0 1
78319: PPUSH
78320: CALL_OW 250
78324: PPUSH
78325: LD_VAR 0 1
78329: PPUSH
78330: CALL_OW 251
78334: PPUSH
78335: LD_INT 1
78337: PPUSH
78338: CALL_OW 453
78342: GO 78312
78344: POP
78345: POP
// end ;
78346: LD_VAR 0 2
78350: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
78351: LD_INT 0
78353: PPUSH
78354: PPUSH
78355: PPUSH
78356: PPUSH
78357: PPUSH
78358: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
78359: LD_VAR 0 1
78363: NOT
78364: PUSH
78365: LD_VAR 0 2
78369: NOT
78370: OR
78371: PUSH
78372: LD_VAR 0 1
78376: PPUSH
78377: CALL_OW 314
78381: OR
78382: IFFALSE 78386
// exit ;
78384: GO 78827
// x := GetX ( enemy_unit ) ;
78386: LD_ADDR_VAR 0 7
78390: PUSH
78391: LD_VAR 0 2
78395: PPUSH
78396: CALL_OW 250
78400: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
78401: LD_ADDR_VAR 0 8
78405: PUSH
78406: LD_VAR 0 2
78410: PPUSH
78411: CALL_OW 251
78415: ST_TO_ADDR
// if not x or not y then
78416: LD_VAR 0 7
78420: NOT
78421: PUSH
78422: LD_VAR 0 8
78426: NOT
78427: OR
78428: IFFALSE 78432
// exit ;
78430: GO 78827
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
78432: LD_ADDR_VAR 0 6
78436: PUSH
78437: LD_VAR 0 7
78441: PPUSH
78442: LD_INT 0
78444: PPUSH
78445: LD_INT 4
78447: PPUSH
78448: CALL_OW 272
78452: PUSH
78453: LD_VAR 0 8
78457: PPUSH
78458: LD_INT 0
78460: PPUSH
78461: LD_INT 4
78463: PPUSH
78464: CALL_OW 273
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_VAR 0 7
78477: PPUSH
78478: LD_INT 1
78480: PPUSH
78481: LD_INT 4
78483: PPUSH
78484: CALL_OW 272
78488: PUSH
78489: LD_VAR 0 8
78493: PPUSH
78494: LD_INT 1
78496: PPUSH
78497: LD_INT 4
78499: PPUSH
78500: CALL_OW 273
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_VAR 0 7
78513: PPUSH
78514: LD_INT 2
78516: PPUSH
78517: LD_INT 4
78519: PPUSH
78520: CALL_OW 272
78524: PUSH
78525: LD_VAR 0 8
78529: PPUSH
78530: LD_INT 2
78532: PPUSH
78533: LD_INT 4
78535: PPUSH
78536: CALL_OW 273
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PUSH
78545: LD_VAR 0 7
78549: PPUSH
78550: LD_INT 3
78552: PPUSH
78553: LD_INT 4
78555: PPUSH
78556: CALL_OW 272
78560: PUSH
78561: LD_VAR 0 8
78565: PPUSH
78566: LD_INT 3
78568: PPUSH
78569: LD_INT 4
78571: PPUSH
78572: CALL_OW 273
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_VAR 0 7
78585: PPUSH
78586: LD_INT 4
78588: PPUSH
78589: LD_INT 4
78591: PPUSH
78592: CALL_OW 272
78596: PUSH
78597: LD_VAR 0 8
78601: PPUSH
78602: LD_INT 4
78604: PPUSH
78605: LD_INT 4
78607: PPUSH
78608: CALL_OW 273
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_VAR 0 7
78621: PPUSH
78622: LD_INT 5
78624: PPUSH
78625: LD_INT 4
78627: PPUSH
78628: CALL_OW 272
78632: PUSH
78633: LD_VAR 0 8
78637: PPUSH
78638: LD_INT 5
78640: PPUSH
78641: LD_INT 4
78643: PPUSH
78644: CALL_OW 273
78648: PUSH
78649: EMPTY
78650: LIST
78651: LIST
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: LIST
78660: ST_TO_ADDR
// for i = tmp downto 1 do
78661: LD_ADDR_VAR 0 4
78665: PUSH
78666: DOUBLE
78667: LD_VAR 0 6
78671: INC
78672: ST_TO_ADDR
78673: LD_INT 1
78675: PUSH
78676: FOR_DOWNTO
78677: IFFALSE 78778
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
78679: LD_VAR 0 6
78683: PUSH
78684: LD_VAR 0 4
78688: ARRAY
78689: PUSH
78690: LD_INT 1
78692: ARRAY
78693: PPUSH
78694: LD_VAR 0 6
78698: PUSH
78699: LD_VAR 0 4
78703: ARRAY
78704: PUSH
78705: LD_INT 2
78707: ARRAY
78708: PPUSH
78709: CALL_OW 488
78713: NOT
78714: PUSH
78715: LD_VAR 0 6
78719: PUSH
78720: LD_VAR 0 4
78724: ARRAY
78725: PUSH
78726: LD_INT 1
78728: ARRAY
78729: PPUSH
78730: LD_VAR 0 6
78734: PUSH
78735: LD_VAR 0 4
78739: ARRAY
78740: PUSH
78741: LD_INT 2
78743: ARRAY
78744: PPUSH
78745: CALL_OW 428
78749: PUSH
78750: LD_INT 0
78752: NONEQUAL
78753: OR
78754: IFFALSE 78776
// tmp := Delete ( tmp , i ) ;
78756: LD_ADDR_VAR 0 6
78760: PUSH
78761: LD_VAR 0 6
78765: PPUSH
78766: LD_VAR 0 4
78770: PPUSH
78771: CALL_OW 3
78775: ST_TO_ADDR
78776: GO 78676
78778: POP
78779: POP
// j := GetClosestHex ( unit , tmp ) ;
78780: LD_ADDR_VAR 0 5
78784: PUSH
78785: LD_VAR 0 1
78789: PPUSH
78790: LD_VAR 0 6
78794: PPUSH
78795: CALL 78080 0 2
78799: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
78800: LD_VAR 0 1
78804: PPUSH
78805: LD_VAR 0 5
78809: PUSH
78810: LD_INT 1
78812: ARRAY
78813: PPUSH
78814: LD_VAR 0 5
78818: PUSH
78819: LD_INT 2
78821: ARRAY
78822: PPUSH
78823: CALL_OW 111
// end ;
78827: LD_VAR 0 3
78831: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
78832: LD_INT 0
78834: PPUSH
78835: PPUSH
78836: PPUSH
// uc_side = 0 ;
78837: LD_ADDR_OWVAR 20
78841: PUSH
78842: LD_INT 0
78844: ST_TO_ADDR
// uc_nation = 0 ;
78845: LD_ADDR_OWVAR 21
78849: PUSH
78850: LD_INT 0
78852: ST_TO_ADDR
// InitHc ;
78853: CALL_OW 19
// InitVc ;
78857: CALL_OW 20
// if mastodonts then
78861: LD_VAR 0 6
78865: IFFALSE 78932
// for i = 1 to mastodonts do
78867: LD_ADDR_VAR 0 11
78871: PUSH
78872: DOUBLE
78873: LD_INT 1
78875: DEC
78876: ST_TO_ADDR
78877: LD_VAR 0 6
78881: PUSH
78882: FOR_TO
78883: IFFALSE 78930
// begin vc_chassis := 31 ;
78885: LD_ADDR_OWVAR 37
78889: PUSH
78890: LD_INT 31
78892: ST_TO_ADDR
// vc_control := control_rider ;
78893: LD_ADDR_OWVAR 38
78897: PUSH
78898: LD_INT 4
78900: ST_TO_ADDR
// animal := CreateVehicle ;
78901: LD_ADDR_VAR 0 12
78905: PUSH
78906: CALL_OW 45
78910: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78911: LD_VAR 0 12
78915: PPUSH
78916: LD_VAR 0 8
78920: PPUSH
78921: LD_INT 0
78923: PPUSH
78924: CALL 85638 0 3
// end ;
78928: GO 78882
78930: POP
78931: POP
// if horses then
78932: LD_VAR 0 5
78936: IFFALSE 79003
// for i = 1 to horses do
78938: LD_ADDR_VAR 0 11
78942: PUSH
78943: DOUBLE
78944: LD_INT 1
78946: DEC
78947: ST_TO_ADDR
78948: LD_VAR 0 5
78952: PUSH
78953: FOR_TO
78954: IFFALSE 79001
// begin hc_class := 21 ;
78956: LD_ADDR_OWVAR 28
78960: PUSH
78961: LD_INT 21
78963: ST_TO_ADDR
// hc_gallery :=  ;
78964: LD_ADDR_OWVAR 33
78968: PUSH
78969: LD_STRING 
78971: ST_TO_ADDR
// animal := CreateHuman ;
78972: LD_ADDR_VAR 0 12
78976: PUSH
78977: CALL_OW 44
78981: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78982: LD_VAR 0 12
78986: PPUSH
78987: LD_VAR 0 8
78991: PPUSH
78992: LD_INT 0
78994: PPUSH
78995: CALL 85638 0 3
// end ;
78999: GO 78953
79001: POP
79002: POP
// if birds then
79003: LD_VAR 0 1
79007: IFFALSE 79074
// for i = 1 to birds do
79009: LD_ADDR_VAR 0 11
79013: PUSH
79014: DOUBLE
79015: LD_INT 1
79017: DEC
79018: ST_TO_ADDR
79019: LD_VAR 0 1
79023: PUSH
79024: FOR_TO
79025: IFFALSE 79072
// begin hc_class = 18 ;
79027: LD_ADDR_OWVAR 28
79031: PUSH
79032: LD_INT 18
79034: ST_TO_ADDR
// hc_gallery =  ;
79035: LD_ADDR_OWVAR 33
79039: PUSH
79040: LD_STRING 
79042: ST_TO_ADDR
// animal := CreateHuman ;
79043: LD_ADDR_VAR 0 12
79047: PUSH
79048: CALL_OW 44
79052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79053: LD_VAR 0 12
79057: PPUSH
79058: LD_VAR 0 8
79062: PPUSH
79063: LD_INT 0
79065: PPUSH
79066: CALL 85638 0 3
// end ;
79070: GO 79024
79072: POP
79073: POP
// if tigers then
79074: LD_VAR 0 2
79078: IFFALSE 79162
// for i = 1 to tigers do
79080: LD_ADDR_VAR 0 11
79084: PUSH
79085: DOUBLE
79086: LD_INT 1
79088: DEC
79089: ST_TO_ADDR
79090: LD_VAR 0 2
79094: PUSH
79095: FOR_TO
79096: IFFALSE 79160
// begin hc_class = class_tiger ;
79098: LD_ADDR_OWVAR 28
79102: PUSH
79103: LD_INT 14
79105: ST_TO_ADDR
// hc_gallery =  ;
79106: LD_ADDR_OWVAR 33
79110: PUSH
79111: LD_STRING 
79113: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79114: LD_ADDR_OWVAR 35
79118: PUSH
79119: LD_INT 7
79121: NEG
79122: PPUSH
79123: LD_INT 7
79125: PPUSH
79126: CALL_OW 12
79130: ST_TO_ADDR
// animal := CreateHuman ;
79131: LD_ADDR_VAR 0 12
79135: PUSH
79136: CALL_OW 44
79140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79141: LD_VAR 0 12
79145: PPUSH
79146: LD_VAR 0 8
79150: PPUSH
79151: LD_INT 0
79153: PPUSH
79154: CALL 85638 0 3
// end ;
79158: GO 79095
79160: POP
79161: POP
// if apemans then
79162: LD_VAR 0 3
79166: IFFALSE 79289
// for i = 1 to apemans do
79168: LD_ADDR_VAR 0 11
79172: PUSH
79173: DOUBLE
79174: LD_INT 1
79176: DEC
79177: ST_TO_ADDR
79178: LD_VAR 0 3
79182: PUSH
79183: FOR_TO
79184: IFFALSE 79287
// begin hc_class = class_apeman ;
79186: LD_ADDR_OWVAR 28
79190: PUSH
79191: LD_INT 12
79193: ST_TO_ADDR
// hc_gallery =  ;
79194: LD_ADDR_OWVAR 33
79198: PUSH
79199: LD_STRING 
79201: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79202: LD_ADDR_OWVAR 35
79206: PUSH
79207: LD_INT 5
79209: NEG
79210: PPUSH
79211: LD_INT 5
79213: PPUSH
79214: CALL_OW 12
79218: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79219: LD_ADDR_OWVAR 31
79223: PUSH
79224: LD_INT 1
79226: PPUSH
79227: LD_INT 3
79229: PPUSH
79230: CALL_OW 12
79234: PUSH
79235: LD_INT 1
79237: PPUSH
79238: LD_INT 3
79240: PPUSH
79241: CALL_OW 12
79245: PUSH
79246: LD_INT 0
79248: PUSH
79249: LD_INT 0
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: LIST
79256: LIST
79257: ST_TO_ADDR
// animal := CreateHuman ;
79258: LD_ADDR_VAR 0 12
79262: PUSH
79263: CALL_OW 44
79267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79268: LD_VAR 0 12
79272: PPUSH
79273: LD_VAR 0 8
79277: PPUSH
79278: LD_INT 0
79280: PPUSH
79281: CALL 85638 0 3
// end ;
79285: GO 79183
79287: POP
79288: POP
// if enchidnas then
79289: LD_VAR 0 4
79293: IFFALSE 79360
// for i = 1 to enchidnas do
79295: LD_ADDR_VAR 0 11
79299: PUSH
79300: DOUBLE
79301: LD_INT 1
79303: DEC
79304: ST_TO_ADDR
79305: LD_VAR 0 4
79309: PUSH
79310: FOR_TO
79311: IFFALSE 79358
// begin hc_class = 13 ;
79313: LD_ADDR_OWVAR 28
79317: PUSH
79318: LD_INT 13
79320: ST_TO_ADDR
// hc_gallery =  ;
79321: LD_ADDR_OWVAR 33
79325: PUSH
79326: LD_STRING 
79328: ST_TO_ADDR
// animal := CreateHuman ;
79329: LD_ADDR_VAR 0 12
79333: PUSH
79334: CALL_OW 44
79338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79339: LD_VAR 0 12
79343: PPUSH
79344: LD_VAR 0 8
79348: PPUSH
79349: LD_INT 0
79351: PPUSH
79352: CALL 85638 0 3
// end ;
79356: GO 79310
79358: POP
79359: POP
// if fishes then
79360: LD_VAR 0 7
79364: IFFALSE 79431
// for i = 1 to fishes do
79366: LD_ADDR_VAR 0 11
79370: PUSH
79371: DOUBLE
79372: LD_INT 1
79374: DEC
79375: ST_TO_ADDR
79376: LD_VAR 0 7
79380: PUSH
79381: FOR_TO
79382: IFFALSE 79429
// begin hc_class = 20 ;
79384: LD_ADDR_OWVAR 28
79388: PUSH
79389: LD_INT 20
79391: ST_TO_ADDR
// hc_gallery =  ;
79392: LD_ADDR_OWVAR 33
79396: PUSH
79397: LD_STRING 
79399: ST_TO_ADDR
// animal := CreateHuman ;
79400: LD_ADDR_VAR 0 12
79404: PUSH
79405: CALL_OW 44
79409: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
79410: LD_VAR 0 12
79414: PPUSH
79415: LD_VAR 0 9
79419: PPUSH
79420: LD_INT 0
79422: PPUSH
79423: CALL 85638 0 3
// end ;
79427: GO 79381
79429: POP
79430: POP
// end ;
79431: LD_VAR 0 10
79435: RET
// export function WantHeal ( sci , unit ) ; begin
79436: LD_INT 0
79438: PPUSH
// if GetTaskList ( sci ) > 0 then
79439: LD_VAR 0 1
79443: PPUSH
79444: CALL_OW 437
79448: PUSH
79449: LD_INT 0
79451: GREATER
79452: IFFALSE 79522
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
79454: LD_VAR 0 1
79458: PPUSH
79459: CALL_OW 437
79463: PUSH
79464: LD_INT 1
79466: ARRAY
79467: PUSH
79468: LD_INT 1
79470: ARRAY
79471: PUSH
79472: LD_STRING l
79474: EQUAL
79475: PUSH
79476: LD_VAR 0 1
79480: PPUSH
79481: CALL_OW 437
79485: PUSH
79486: LD_INT 1
79488: ARRAY
79489: PUSH
79490: LD_INT 4
79492: ARRAY
79493: PUSH
79494: LD_VAR 0 2
79498: EQUAL
79499: AND
79500: IFFALSE 79512
// result := true else
79502: LD_ADDR_VAR 0 3
79506: PUSH
79507: LD_INT 1
79509: ST_TO_ADDR
79510: GO 79520
// result := false ;
79512: LD_ADDR_VAR 0 3
79516: PUSH
79517: LD_INT 0
79519: ST_TO_ADDR
// end else
79520: GO 79530
// result := false ;
79522: LD_ADDR_VAR 0 3
79526: PUSH
79527: LD_INT 0
79529: ST_TO_ADDR
// end ;
79530: LD_VAR 0 3
79534: RET
// export function HealTarget ( sci ) ; begin
79535: LD_INT 0
79537: PPUSH
// if not sci then
79538: LD_VAR 0 1
79542: NOT
79543: IFFALSE 79547
// exit ;
79545: GO 79612
// result := 0 ;
79547: LD_ADDR_VAR 0 2
79551: PUSH
79552: LD_INT 0
79554: ST_TO_ADDR
// if GetTaskList ( sci ) then
79555: LD_VAR 0 1
79559: PPUSH
79560: CALL_OW 437
79564: IFFALSE 79612
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
79566: LD_VAR 0 1
79570: PPUSH
79571: CALL_OW 437
79575: PUSH
79576: LD_INT 1
79578: ARRAY
79579: PUSH
79580: LD_INT 1
79582: ARRAY
79583: PUSH
79584: LD_STRING l
79586: EQUAL
79587: IFFALSE 79612
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
79589: LD_ADDR_VAR 0 2
79593: PUSH
79594: LD_VAR 0 1
79598: PPUSH
79599: CALL_OW 437
79603: PUSH
79604: LD_INT 1
79606: ARRAY
79607: PUSH
79608: LD_INT 4
79610: ARRAY
79611: ST_TO_ADDR
// end ;
79612: LD_VAR 0 2
79616: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs ; begin
79617: LD_INT 0
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
79624: PPUSH
79625: PPUSH
79626: PPUSH
79627: PPUSH
79628: PPUSH
79629: PPUSH
79630: PPUSH
79631: PPUSH
79632: PPUSH
79633: PPUSH
79634: PPUSH
79635: PPUSH
79636: PPUSH
79637: PPUSH
79638: PPUSH
79639: PPUSH
79640: PPUSH
79641: PPUSH
79642: PPUSH
79643: PPUSH
79644: PPUSH
79645: PPUSH
79646: PPUSH
79647: PPUSH
79648: PPUSH
79649: PPUSH
79650: PPUSH
79651: PPUSH
// if not list then
79652: LD_VAR 0 1
79656: NOT
79657: IFFALSE 79661
// exit ;
79659: GO 84249
// base := list [ 1 ] ;
79661: LD_ADDR_VAR 0 3
79665: PUSH
79666: LD_VAR 0 1
79670: PUSH
79671: LD_INT 1
79673: ARRAY
79674: ST_TO_ADDR
// group := list [ 2 ] ;
79675: LD_ADDR_VAR 0 4
79679: PUSH
79680: LD_VAR 0 1
79684: PUSH
79685: LD_INT 2
79687: ARRAY
79688: ST_TO_ADDR
// path := list [ 3 ] ;
79689: LD_ADDR_VAR 0 5
79693: PUSH
79694: LD_VAR 0 1
79698: PUSH
79699: LD_INT 3
79701: ARRAY
79702: ST_TO_ADDR
// flags := list [ 4 ] ;
79703: LD_ADDR_VAR 0 6
79707: PUSH
79708: LD_VAR 0 1
79712: PUSH
79713: LD_INT 4
79715: ARRAY
79716: ST_TO_ADDR
// mined := [ ] ;
79717: LD_ADDR_VAR 0 27
79721: PUSH
79722: EMPTY
79723: ST_TO_ADDR
// bombed := [ ] ;
79724: LD_ADDR_VAR 0 28
79728: PUSH
79729: EMPTY
79730: ST_TO_ADDR
// healers := [ ] ;
79731: LD_ADDR_VAR 0 31
79735: PUSH
79736: EMPTY
79737: ST_TO_ADDR
// to_heal := [ ] ;
79738: LD_ADDR_VAR 0 30
79742: PUSH
79743: EMPTY
79744: ST_TO_ADDR
// repairs := [ ] ;
79745: LD_ADDR_VAR 0 33
79749: PUSH
79750: EMPTY
79751: ST_TO_ADDR
// to_repair := [ ] ;
79752: LD_ADDR_VAR 0 32
79756: PUSH
79757: EMPTY
79758: ST_TO_ADDR
// if not group or not path then
79759: LD_VAR 0 4
79763: NOT
79764: PUSH
79765: LD_VAR 0 5
79769: NOT
79770: OR
79771: IFFALSE 79775
// exit ;
79773: GO 84249
// if flags then
79775: LD_VAR 0 6
79779: IFFALSE 79923
// begin f_ignore_area := flags [ 1 ] ;
79781: LD_ADDR_VAR 0 17
79785: PUSH
79786: LD_VAR 0 6
79790: PUSH
79791: LD_INT 1
79793: ARRAY
79794: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
79795: LD_ADDR_VAR 0 18
79799: PUSH
79800: LD_VAR 0 6
79804: PUSH
79805: LD_INT 2
79807: ARRAY
79808: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
79809: LD_ADDR_VAR 0 19
79813: PUSH
79814: LD_VAR 0 6
79818: PUSH
79819: LD_INT 3
79821: ARRAY
79822: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
79823: LD_ADDR_VAR 0 20
79827: PUSH
79828: LD_VAR 0 6
79832: PUSH
79833: LD_INT 4
79835: ARRAY
79836: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
79837: LD_ADDR_VAR 0 21
79841: PUSH
79842: LD_VAR 0 6
79846: PUSH
79847: LD_INT 5
79849: ARRAY
79850: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
79851: LD_ADDR_VAR 0 22
79855: PUSH
79856: LD_VAR 0 6
79860: PUSH
79861: LD_INT 6
79863: ARRAY
79864: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
79865: LD_ADDR_VAR 0 23
79869: PUSH
79870: LD_VAR 0 6
79874: PUSH
79875: LD_INT 7
79877: ARRAY
79878: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
79879: LD_ADDR_VAR 0 24
79883: PUSH
79884: LD_VAR 0 6
79888: PUSH
79889: LD_INT 8
79891: ARRAY
79892: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
79893: LD_ADDR_VAR 0 25
79897: PUSH
79898: LD_VAR 0 6
79902: PUSH
79903: LD_INT 9
79905: ARRAY
79906: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
79907: LD_ADDR_VAR 0 26
79911: PUSH
79912: LD_VAR 0 6
79916: PUSH
79917: LD_INT 10
79919: ARRAY
79920: ST_TO_ADDR
// end else
79921: GO 80003
// begin f_ignore_area := false ;
79923: LD_ADDR_VAR 0 17
79927: PUSH
79928: LD_INT 0
79930: ST_TO_ADDR
// f_capture := false ;
79931: LD_ADDR_VAR 0 18
79935: PUSH
79936: LD_INT 0
79938: ST_TO_ADDR
// f_ignore_civ := false ;
79939: LD_ADDR_VAR 0 19
79943: PUSH
79944: LD_INT 0
79946: ST_TO_ADDR
// f_murder := false ;
79947: LD_ADDR_VAR 0 20
79951: PUSH
79952: LD_INT 0
79954: ST_TO_ADDR
// f_mines := false ;
79955: LD_ADDR_VAR 0 21
79959: PUSH
79960: LD_INT 0
79962: ST_TO_ADDR
// f_repair := false ;
79963: LD_ADDR_VAR 0 22
79967: PUSH
79968: LD_INT 0
79970: ST_TO_ADDR
// f_heal := false ;
79971: LD_ADDR_VAR 0 23
79975: PUSH
79976: LD_INT 0
79978: ST_TO_ADDR
// f_spacetime := false ;
79979: LD_ADDR_VAR 0 24
79983: PUSH
79984: LD_INT 0
79986: ST_TO_ADDR
// f_attack_depot := false ;
79987: LD_ADDR_VAR 0 25
79991: PUSH
79992: LD_INT 0
79994: ST_TO_ADDR
// f_crawl := false ;
79995: LD_ADDR_VAR 0 26
79999: PUSH
80000: LD_INT 0
80002: ST_TO_ADDR
// end ; if f_heal then
80003: LD_VAR 0 23
80007: IFFALSE 80034
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
80009: LD_ADDR_VAR 0 31
80013: PUSH
80014: LD_VAR 0 4
80018: PPUSH
80019: LD_INT 25
80021: PUSH
80022: LD_INT 4
80024: PUSH
80025: EMPTY
80026: LIST
80027: LIST
80028: PPUSH
80029: CALL_OW 72
80033: ST_TO_ADDR
// if f_repair then
80034: LD_VAR 0 22
80038: IFFALSE 80065
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
80040: LD_ADDR_VAR 0 33
80044: PUSH
80045: LD_VAR 0 4
80049: PPUSH
80050: LD_INT 25
80052: PUSH
80053: LD_INT 3
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: PPUSH
80060: CALL_OW 72
80064: ST_TO_ADDR
// units_path := [ ] ;
80065: LD_ADDR_VAR 0 16
80069: PUSH
80070: EMPTY
80071: ST_TO_ADDR
// for i = 1 to group do
80072: LD_ADDR_VAR 0 7
80076: PUSH
80077: DOUBLE
80078: LD_INT 1
80080: DEC
80081: ST_TO_ADDR
80082: LD_VAR 0 4
80086: PUSH
80087: FOR_TO
80088: IFFALSE 80117
// units_path := Replace ( units_path , i , path ) ;
80090: LD_ADDR_VAR 0 16
80094: PUSH
80095: LD_VAR 0 16
80099: PPUSH
80100: LD_VAR 0 7
80104: PPUSH
80105: LD_VAR 0 5
80109: PPUSH
80110: CALL_OW 1
80114: ST_TO_ADDR
80115: GO 80087
80117: POP
80118: POP
// repeat for i = group downto 1 do
80119: LD_ADDR_VAR 0 7
80123: PUSH
80124: DOUBLE
80125: LD_VAR 0 4
80129: INC
80130: ST_TO_ADDR
80131: LD_INT 1
80133: PUSH
80134: FOR_DOWNTO
80135: IFFALSE 84231
// begin wait ( 5 ) ;
80137: LD_INT 5
80139: PPUSH
80140: CALL_OW 67
// tmp := [ ] ;
80144: LD_ADDR_VAR 0 14
80148: PUSH
80149: EMPTY
80150: ST_TO_ADDR
// attacking := false ;
80151: LD_ADDR_VAR 0 29
80155: PUSH
80156: LD_INT 0
80158: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
80159: LD_VAR 0 4
80163: PUSH
80164: LD_VAR 0 7
80168: ARRAY
80169: PPUSH
80170: CALL_OW 301
80174: PUSH
80175: LD_VAR 0 4
80179: PUSH
80180: LD_VAR 0 7
80184: ARRAY
80185: NOT
80186: OR
80187: IFFALSE 80296
// begin if GetType ( group [ i ] ) = unit_human then
80189: LD_VAR 0 4
80193: PUSH
80194: LD_VAR 0 7
80198: ARRAY
80199: PPUSH
80200: CALL_OW 247
80204: PUSH
80205: LD_INT 1
80207: EQUAL
80208: IFFALSE 80254
// begin to_heal := to_heal diff group [ i ] ;
80210: LD_ADDR_VAR 0 30
80214: PUSH
80215: LD_VAR 0 30
80219: PUSH
80220: LD_VAR 0 4
80224: PUSH
80225: LD_VAR 0 7
80229: ARRAY
80230: DIFF
80231: ST_TO_ADDR
// healers := healers diff group [ i ] ;
80232: LD_ADDR_VAR 0 31
80236: PUSH
80237: LD_VAR 0 31
80241: PUSH
80242: LD_VAR 0 4
80246: PUSH
80247: LD_VAR 0 7
80251: ARRAY
80252: DIFF
80253: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
80254: LD_ADDR_VAR 0 4
80258: PUSH
80259: LD_VAR 0 4
80263: PPUSH
80264: LD_VAR 0 7
80268: PPUSH
80269: CALL_OW 3
80273: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
80274: LD_ADDR_VAR 0 16
80278: PUSH
80279: LD_VAR 0 16
80283: PPUSH
80284: LD_VAR 0 7
80288: PPUSH
80289: CALL_OW 3
80293: ST_TO_ADDR
// continue ;
80294: GO 80134
// end ; if f_repair then
80296: LD_VAR 0 22
80300: IFFALSE 80789
// begin if GetType ( group [ i ] ) = unit_vehicle then
80302: LD_VAR 0 4
80306: PUSH
80307: LD_VAR 0 7
80311: ARRAY
80312: PPUSH
80313: CALL_OW 247
80317: PUSH
80318: LD_INT 2
80320: EQUAL
80321: IFFALSE 80511
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
80323: LD_VAR 0 4
80327: PUSH
80328: LD_VAR 0 7
80332: ARRAY
80333: PPUSH
80334: CALL_OW 256
80338: PUSH
80339: LD_INT 700
80341: LESS
80342: PUSH
80343: LD_VAR 0 4
80347: PUSH
80348: LD_VAR 0 7
80352: ARRAY
80353: PUSH
80354: LD_VAR 0 32
80358: IN
80359: NOT
80360: AND
80361: IFFALSE 80385
// to_repair := to_repair union group [ i ] ;
80363: LD_ADDR_VAR 0 32
80367: PUSH
80368: LD_VAR 0 32
80372: PUSH
80373: LD_VAR 0 4
80377: PUSH
80378: LD_VAR 0 7
80382: ARRAY
80383: UNION
80384: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
80385: LD_VAR 0 4
80389: PUSH
80390: LD_VAR 0 7
80394: ARRAY
80395: PPUSH
80396: CALL_OW 256
80400: PUSH
80401: LD_INT 1000
80403: EQUAL
80404: PUSH
80405: LD_VAR 0 4
80409: PUSH
80410: LD_VAR 0 7
80414: ARRAY
80415: PUSH
80416: LD_VAR 0 32
80420: IN
80421: AND
80422: IFFALSE 80446
// to_repair := to_repair diff group [ i ] ;
80424: LD_ADDR_VAR 0 32
80428: PUSH
80429: LD_VAR 0 32
80433: PUSH
80434: LD_VAR 0 4
80438: PUSH
80439: LD_VAR 0 7
80443: ARRAY
80444: DIFF
80445: ST_TO_ADDR
// if group [ i ] in to_repair then
80446: LD_VAR 0 4
80450: PUSH
80451: LD_VAR 0 7
80455: ARRAY
80456: PUSH
80457: LD_VAR 0 32
80461: IN
80462: IFFALSE 80509
// begin if not IsInArea ( group [ i ] , f_repair ) then
80464: LD_VAR 0 4
80468: PUSH
80469: LD_VAR 0 7
80473: ARRAY
80474: PPUSH
80475: LD_VAR 0 22
80479: PPUSH
80480: CALL_OW 308
80484: NOT
80485: IFFALSE 80507
// ComMoveToArea ( group [ i ] , f_repair ) ;
80487: LD_VAR 0 4
80491: PUSH
80492: LD_VAR 0 7
80496: ARRAY
80497: PPUSH
80498: LD_VAR 0 22
80502: PPUSH
80503: CALL_OW 113
// continue ;
80507: GO 80134
// end ; end else
80509: GO 80789
// if group [ i ] in repairs then
80511: LD_VAR 0 4
80515: PUSH
80516: LD_VAR 0 7
80520: ARRAY
80521: PUSH
80522: LD_VAR 0 33
80526: IN
80527: IFFALSE 80789
// begin if IsInUnit ( group [ i ] ) then
80529: LD_VAR 0 4
80533: PUSH
80534: LD_VAR 0 7
80538: ARRAY
80539: PPUSH
80540: CALL_OW 310
80544: IFFALSE 80612
// begin z := IsInUnit ( group [ i ] ) ;
80546: LD_ADDR_VAR 0 13
80550: PUSH
80551: LD_VAR 0 4
80555: PUSH
80556: LD_VAR 0 7
80560: ARRAY
80561: PPUSH
80562: CALL_OW 310
80566: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
80567: LD_VAR 0 13
80571: PUSH
80572: LD_VAR 0 32
80576: IN
80577: PUSH
80578: LD_VAR 0 13
80582: PPUSH
80583: LD_VAR 0 22
80587: PPUSH
80588: CALL_OW 308
80592: AND
80593: IFFALSE 80610
// ComExitVehicle ( group [ i ] ) ;
80595: LD_VAR 0 4
80599: PUSH
80600: LD_VAR 0 7
80604: ARRAY
80605: PPUSH
80606: CALL_OW 121
// end else
80610: GO 80789
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
80612: LD_ADDR_VAR 0 13
80616: PUSH
80617: LD_VAR 0 4
80621: PPUSH
80622: LD_INT 95
80624: PUSH
80625: LD_VAR 0 22
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: LD_INT 58
80636: PUSH
80637: EMPTY
80638: LIST
80639: PUSH
80640: EMPTY
80641: LIST
80642: LIST
80643: PPUSH
80644: CALL_OW 72
80648: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
80649: LD_VAR 0 4
80653: PUSH
80654: LD_VAR 0 7
80658: ARRAY
80659: PPUSH
80660: CALL_OW 314
80664: NOT
80665: IFFALSE 80787
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
80667: LD_ADDR_VAR 0 10
80671: PUSH
80672: LD_VAR 0 13
80676: PPUSH
80677: LD_VAR 0 4
80681: PUSH
80682: LD_VAR 0 7
80686: ARRAY
80687: PPUSH
80688: CALL_OW 74
80692: ST_TO_ADDR
// if not x then
80693: LD_VAR 0 10
80697: NOT
80698: IFFALSE 80702
// continue ;
80700: GO 80134
// if GetLives ( x ) < 1000 then
80702: LD_VAR 0 10
80706: PPUSH
80707: CALL_OW 256
80711: PUSH
80712: LD_INT 1000
80714: LESS
80715: IFFALSE 80739
// ComRepairVehicle ( group [ i ] , x ) else
80717: LD_VAR 0 4
80721: PUSH
80722: LD_VAR 0 7
80726: ARRAY
80727: PPUSH
80728: LD_VAR 0 10
80732: PPUSH
80733: CALL_OW 129
80737: GO 80787
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
80739: LD_VAR 0 23
80743: PUSH
80744: LD_VAR 0 4
80748: PUSH
80749: LD_VAR 0 7
80753: ARRAY
80754: PPUSH
80755: CALL_OW 256
80759: PUSH
80760: LD_INT 1000
80762: LESS
80763: AND
80764: NOT
80765: IFFALSE 80787
// ComEnterUnit ( group [ i ] , x ) ;
80767: LD_VAR 0 4
80771: PUSH
80772: LD_VAR 0 7
80776: ARRAY
80777: PPUSH
80778: LD_VAR 0 10
80782: PPUSH
80783: CALL_OW 120
// end ; continue ;
80787: GO 80134
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
80789: LD_VAR 0 23
80793: PUSH
80794: LD_VAR 0 4
80798: PUSH
80799: LD_VAR 0 7
80803: ARRAY
80804: PPUSH
80805: CALL_OW 247
80809: PUSH
80810: LD_INT 1
80812: EQUAL
80813: AND
80814: IFFALSE 81292
// begin if group [ i ] in healers then
80816: LD_VAR 0 4
80820: PUSH
80821: LD_VAR 0 7
80825: ARRAY
80826: PUSH
80827: LD_VAR 0 31
80831: IN
80832: IFFALSE 81105
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
80834: LD_VAR 0 4
80838: PUSH
80839: LD_VAR 0 7
80843: ARRAY
80844: PPUSH
80845: LD_VAR 0 23
80849: PPUSH
80850: CALL_OW 308
80854: NOT
80855: PUSH
80856: LD_VAR 0 4
80860: PUSH
80861: LD_VAR 0 7
80865: ARRAY
80866: PPUSH
80867: CALL_OW 314
80871: NOT
80872: AND
80873: IFFALSE 80897
// ComMoveToArea ( group [ i ] , f_heal ) else
80875: LD_VAR 0 4
80879: PUSH
80880: LD_VAR 0 7
80884: ARRAY
80885: PPUSH
80886: LD_VAR 0 23
80890: PPUSH
80891: CALL_OW 113
80895: GO 81103
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
80897: LD_VAR 0 4
80901: PUSH
80902: LD_VAR 0 7
80906: ARRAY
80907: PPUSH
80908: CALL 79535 0 1
80912: PPUSH
80913: CALL_OW 256
80917: PUSH
80918: LD_INT 1000
80920: EQUAL
80921: IFFALSE 80940
// ComStop ( group [ i ] ) else
80923: LD_VAR 0 4
80927: PUSH
80928: LD_VAR 0 7
80932: ARRAY
80933: PPUSH
80934: CALL_OW 141
80938: GO 81103
// if not HasTask ( group [ i ] ) and to_heal then
80940: LD_VAR 0 4
80944: PUSH
80945: LD_VAR 0 7
80949: ARRAY
80950: PPUSH
80951: CALL_OW 314
80955: NOT
80956: PUSH
80957: LD_VAR 0 30
80961: AND
80962: IFFALSE 81103
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
80964: LD_ADDR_VAR 0 13
80968: PUSH
80969: LD_VAR 0 30
80973: PPUSH
80974: LD_INT 3
80976: PUSH
80977: LD_INT 54
80979: PUSH
80980: EMPTY
80981: LIST
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PPUSH
80987: CALL_OW 72
80991: PPUSH
80992: LD_VAR 0 4
80996: PUSH
80997: LD_VAR 0 7
81001: ARRAY
81002: PPUSH
81003: CALL_OW 74
81007: ST_TO_ADDR
// if z then
81008: LD_VAR 0 13
81012: IFFALSE 81103
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
81014: LD_INT 91
81016: PUSH
81017: LD_VAR 0 13
81021: PUSH
81022: LD_INT 10
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: LIST
81029: PUSH
81030: LD_INT 81
81032: PUSH
81033: LD_VAR 0 13
81037: PPUSH
81038: CALL_OW 255
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: PPUSH
81051: CALL_OW 69
81055: PUSH
81056: LD_INT 0
81058: EQUAL
81059: IFFALSE 81083
// ComHeal ( group [ i ] , z ) else
81061: LD_VAR 0 4
81065: PUSH
81066: LD_VAR 0 7
81070: ARRAY
81071: PPUSH
81072: LD_VAR 0 13
81076: PPUSH
81077: CALL_OW 128
81081: GO 81103
// ComMoveToArea ( group [ i ] , f_heal ) ;
81083: LD_VAR 0 4
81087: PUSH
81088: LD_VAR 0 7
81092: ARRAY
81093: PPUSH
81094: LD_VAR 0 23
81098: PPUSH
81099: CALL_OW 113
// end ; continue ;
81103: GO 80134
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
81105: LD_VAR 0 4
81109: PUSH
81110: LD_VAR 0 7
81114: ARRAY
81115: PPUSH
81116: CALL_OW 256
81120: PUSH
81121: LD_INT 700
81123: LESS
81124: PUSH
81125: LD_VAR 0 4
81129: PUSH
81130: LD_VAR 0 7
81134: ARRAY
81135: PUSH
81136: LD_VAR 0 30
81140: IN
81141: NOT
81142: AND
81143: IFFALSE 81167
// to_heal := to_heal union group [ i ] ;
81145: LD_ADDR_VAR 0 30
81149: PUSH
81150: LD_VAR 0 30
81154: PUSH
81155: LD_VAR 0 4
81159: PUSH
81160: LD_VAR 0 7
81164: ARRAY
81165: UNION
81166: ST_TO_ADDR
// if group [ i ] in to_heal then
81167: LD_VAR 0 4
81171: PUSH
81172: LD_VAR 0 7
81176: ARRAY
81177: PUSH
81178: LD_VAR 0 30
81182: IN
81183: IFFALSE 81292
// begin if GetLives ( group [ i ] ) = 1000 then
81185: LD_VAR 0 4
81189: PUSH
81190: LD_VAR 0 7
81194: ARRAY
81195: PPUSH
81196: CALL_OW 256
81200: PUSH
81201: LD_INT 1000
81203: EQUAL
81204: IFFALSE 81230
// to_heal := to_heal diff group [ i ] else
81206: LD_ADDR_VAR 0 30
81210: PUSH
81211: LD_VAR 0 30
81215: PUSH
81216: LD_VAR 0 4
81220: PUSH
81221: LD_VAR 0 7
81225: ARRAY
81226: DIFF
81227: ST_TO_ADDR
81228: GO 81292
// begin if not IsInArea ( group [ i ] , to_heal ) then
81230: LD_VAR 0 4
81234: PUSH
81235: LD_VAR 0 7
81239: ARRAY
81240: PPUSH
81241: LD_VAR 0 30
81245: PPUSH
81246: CALL_OW 308
81250: NOT
81251: IFFALSE 81275
// ComMoveToArea ( group [ i ] , f_heal ) else
81253: LD_VAR 0 4
81257: PUSH
81258: LD_VAR 0 7
81262: ARRAY
81263: PPUSH
81264: LD_VAR 0 23
81268: PPUSH
81269: CALL_OW 113
81273: GO 81290
// ComHold ( group [ i ] ) ;
81275: LD_VAR 0 4
81279: PUSH
81280: LD_VAR 0 7
81284: ARRAY
81285: PPUSH
81286: CALL_OW 140
// continue ;
81290: GO 80134
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
81292: LD_VAR 0 4
81296: PUSH
81297: LD_VAR 0 7
81301: ARRAY
81302: PPUSH
81303: LD_INT 10
81305: PPUSH
81306: CALL 77932 0 2
81310: NOT
81311: PUSH
81312: LD_VAR 0 16
81316: PUSH
81317: LD_VAR 0 7
81321: ARRAY
81322: PUSH
81323: EMPTY
81324: EQUAL
81325: NOT
81326: AND
81327: IFFALSE 81593
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
81329: LD_VAR 0 4
81333: PUSH
81334: LD_VAR 0 7
81338: ARRAY
81339: PPUSH
81340: CALL_OW 262
81344: PUSH
81345: LD_INT 1
81347: PUSH
81348: LD_INT 2
81350: PUSH
81351: EMPTY
81352: LIST
81353: LIST
81354: IN
81355: IFFALSE 81396
// if GetFuel ( group [ i ] ) < 10 then
81357: LD_VAR 0 4
81361: PUSH
81362: LD_VAR 0 7
81366: ARRAY
81367: PPUSH
81368: CALL_OW 261
81372: PUSH
81373: LD_INT 10
81375: LESS
81376: IFFALSE 81396
// SetFuel ( group [ i ] , 12 ) ;
81378: LD_VAR 0 4
81382: PUSH
81383: LD_VAR 0 7
81387: ARRAY
81388: PPUSH
81389: LD_INT 12
81391: PPUSH
81392: CALL_OW 240
// if units_path [ i ] then
81396: LD_VAR 0 16
81400: PUSH
81401: LD_VAR 0 7
81405: ARRAY
81406: IFFALSE 81591
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
81408: LD_VAR 0 4
81412: PUSH
81413: LD_VAR 0 7
81417: ARRAY
81418: PPUSH
81419: LD_VAR 0 16
81423: PUSH
81424: LD_VAR 0 7
81428: ARRAY
81429: PUSH
81430: LD_INT 1
81432: ARRAY
81433: PUSH
81434: LD_INT 1
81436: ARRAY
81437: PPUSH
81438: LD_VAR 0 16
81442: PUSH
81443: LD_VAR 0 7
81447: ARRAY
81448: PUSH
81449: LD_INT 1
81451: ARRAY
81452: PUSH
81453: LD_INT 2
81455: ARRAY
81456: PPUSH
81457: CALL_OW 297
81461: PUSH
81462: LD_INT 6
81464: GREATER
81465: IFFALSE 81540
// begin if not HasTask ( group [ i ] ) then
81467: LD_VAR 0 4
81471: PUSH
81472: LD_VAR 0 7
81476: ARRAY
81477: PPUSH
81478: CALL_OW 314
81482: NOT
81483: IFFALSE 81538
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
81485: LD_VAR 0 4
81489: PUSH
81490: LD_VAR 0 7
81494: ARRAY
81495: PPUSH
81496: LD_VAR 0 16
81500: PUSH
81501: LD_VAR 0 7
81505: ARRAY
81506: PUSH
81507: LD_INT 1
81509: ARRAY
81510: PUSH
81511: LD_INT 1
81513: ARRAY
81514: PPUSH
81515: LD_VAR 0 16
81519: PUSH
81520: LD_VAR 0 7
81524: ARRAY
81525: PUSH
81526: LD_INT 1
81528: ARRAY
81529: PUSH
81530: LD_INT 2
81532: ARRAY
81533: PPUSH
81534: CALL_OW 114
// end else
81538: GO 81591
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
81540: LD_ADDR_VAR 0 15
81544: PUSH
81545: LD_VAR 0 16
81549: PUSH
81550: LD_VAR 0 7
81554: ARRAY
81555: PPUSH
81556: LD_INT 1
81558: PPUSH
81559: CALL_OW 3
81563: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
81564: LD_ADDR_VAR 0 16
81568: PUSH
81569: LD_VAR 0 16
81573: PPUSH
81574: LD_VAR 0 7
81578: PPUSH
81579: LD_VAR 0 15
81583: PPUSH
81584: CALL_OW 1
81588: ST_TO_ADDR
// continue ;
81589: GO 80134
// end ; end ; end else
81591: GO 84229
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
81593: LD_ADDR_VAR 0 14
81597: PUSH
81598: LD_INT 81
81600: PUSH
81601: LD_VAR 0 4
81605: PUSH
81606: LD_VAR 0 7
81610: ARRAY
81611: PPUSH
81612: CALL_OW 255
81616: PUSH
81617: EMPTY
81618: LIST
81619: LIST
81620: PPUSH
81621: CALL_OW 69
81625: ST_TO_ADDR
// if not tmp then
81626: LD_VAR 0 14
81630: NOT
81631: IFFALSE 81635
// continue ;
81633: GO 80134
// if f_ignore_area then
81635: LD_VAR 0 17
81639: IFFALSE 81727
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
81641: LD_ADDR_VAR 0 15
81645: PUSH
81646: LD_VAR 0 14
81650: PPUSH
81651: LD_INT 3
81653: PUSH
81654: LD_INT 92
81656: PUSH
81657: LD_VAR 0 17
81661: PUSH
81662: LD_INT 1
81664: ARRAY
81665: PUSH
81666: LD_VAR 0 17
81670: PUSH
81671: LD_INT 2
81673: ARRAY
81674: PUSH
81675: LD_VAR 0 17
81679: PUSH
81680: LD_INT 3
81682: ARRAY
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: LIST
81688: LIST
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PPUSH
81694: CALL_OW 72
81698: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81699: LD_VAR 0 14
81703: PUSH
81704: LD_VAR 0 15
81708: DIFF
81709: IFFALSE 81727
// tmp := tmp diff tmp2 ;
81711: LD_ADDR_VAR 0 14
81715: PUSH
81716: LD_VAR 0 14
81720: PUSH
81721: LD_VAR 0 15
81725: DIFF
81726: ST_TO_ADDR
// end ; if not f_murder then
81727: LD_VAR 0 20
81731: NOT
81732: IFFALSE 81790
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
81734: LD_ADDR_VAR 0 15
81738: PUSH
81739: LD_VAR 0 14
81743: PPUSH
81744: LD_INT 3
81746: PUSH
81747: LD_INT 50
81749: PUSH
81750: EMPTY
81751: LIST
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: PPUSH
81757: CALL_OW 72
81761: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
81762: LD_VAR 0 14
81766: PUSH
81767: LD_VAR 0 15
81771: DIFF
81772: IFFALSE 81790
// tmp := tmp diff tmp2 ;
81774: LD_ADDR_VAR 0 14
81778: PUSH
81779: LD_VAR 0 14
81783: PUSH
81784: LD_VAR 0 15
81788: DIFF
81789: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
81790: LD_ADDR_VAR 0 14
81794: PUSH
81795: LD_VAR 0 4
81799: PUSH
81800: LD_VAR 0 7
81804: ARRAY
81805: PPUSH
81806: LD_VAR 0 14
81810: PPUSH
81811: LD_INT 1
81813: PPUSH
81814: LD_INT 1
81816: PPUSH
81817: CALL 51599 0 4
81821: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
81822: LD_VAR 0 4
81826: PUSH
81827: LD_VAR 0 7
81831: ARRAY
81832: PPUSH
81833: CALL_OW 257
81837: PUSH
81838: LD_INT 1
81840: EQUAL
81841: IFFALSE 82289
// begin if WantPlant ( group [ i ] ) then
81843: LD_VAR 0 4
81847: PUSH
81848: LD_VAR 0 7
81852: ARRAY
81853: PPUSH
81854: CALL 51100 0 1
81858: IFFALSE 81862
// continue ;
81860: GO 80134
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
81862: LD_VAR 0 18
81866: PUSH
81867: LD_VAR 0 4
81871: PUSH
81872: LD_VAR 0 7
81876: ARRAY
81877: PPUSH
81878: CALL_OW 310
81882: NOT
81883: AND
81884: PUSH
81885: LD_VAR 0 14
81889: PUSH
81890: LD_INT 1
81892: ARRAY
81893: PUSH
81894: LD_VAR 0 14
81898: PPUSH
81899: LD_INT 21
81901: PUSH
81902: LD_INT 2
81904: PUSH
81905: EMPTY
81906: LIST
81907: LIST
81908: PUSH
81909: LD_INT 58
81911: PUSH
81912: EMPTY
81913: LIST
81914: PUSH
81915: EMPTY
81916: LIST
81917: LIST
81918: PPUSH
81919: CALL_OW 72
81923: IN
81924: AND
81925: IFFALSE 81961
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
81927: LD_VAR 0 4
81931: PUSH
81932: LD_VAR 0 7
81936: ARRAY
81937: PPUSH
81938: LD_VAR 0 14
81942: PUSH
81943: LD_INT 1
81945: ARRAY
81946: PPUSH
81947: CALL_OW 120
// attacking := true ;
81951: LD_ADDR_VAR 0 29
81955: PUSH
81956: LD_INT 1
81958: ST_TO_ADDR
// continue ;
81959: GO 80134
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
81961: LD_VAR 0 26
81965: PUSH
81966: LD_VAR 0 4
81970: PUSH
81971: LD_VAR 0 7
81975: ARRAY
81976: PPUSH
81977: CALL_OW 257
81981: PUSH
81982: LD_INT 1
81984: EQUAL
81985: AND
81986: PUSH
81987: LD_VAR 0 4
81991: PUSH
81992: LD_VAR 0 7
81996: ARRAY
81997: PPUSH
81998: CALL_OW 256
82002: PUSH
82003: LD_INT 800
82005: LESS
82006: AND
82007: PUSH
82008: LD_VAR 0 4
82012: PUSH
82013: LD_VAR 0 7
82017: ARRAY
82018: PPUSH
82019: CALL_OW 318
82023: NOT
82024: AND
82025: IFFALSE 82042
// ComCrawl ( group [ i ] ) ;
82027: LD_VAR 0 4
82031: PUSH
82032: LD_VAR 0 7
82036: ARRAY
82037: PPUSH
82038: CALL_OW 137
// if f_mines then
82042: LD_VAR 0 21
82046: IFFALSE 82289
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
82048: LD_VAR 0 14
82052: PUSH
82053: LD_INT 1
82055: ARRAY
82056: PPUSH
82057: CALL_OW 247
82061: PUSH
82062: LD_INT 3
82064: EQUAL
82065: PUSH
82066: LD_VAR 0 14
82070: PUSH
82071: LD_INT 1
82073: ARRAY
82074: PUSH
82075: LD_VAR 0 27
82079: IN
82080: NOT
82081: AND
82082: IFFALSE 82289
// begin x := GetX ( tmp [ 1 ] ) ;
82084: LD_ADDR_VAR 0 10
82088: PUSH
82089: LD_VAR 0 14
82093: PUSH
82094: LD_INT 1
82096: ARRAY
82097: PPUSH
82098: CALL_OW 250
82102: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
82103: LD_ADDR_VAR 0 11
82107: PUSH
82108: LD_VAR 0 14
82112: PUSH
82113: LD_INT 1
82115: ARRAY
82116: PPUSH
82117: CALL_OW 251
82121: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
82122: LD_ADDR_VAR 0 12
82126: PUSH
82127: LD_VAR 0 4
82131: PUSH
82132: LD_VAR 0 7
82136: ARRAY
82137: PPUSH
82138: CALL 78017 0 1
82142: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
82143: LD_VAR 0 4
82147: PUSH
82148: LD_VAR 0 7
82152: ARRAY
82153: PPUSH
82154: LD_VAR 0 10
82158: PPUSH
82159: LD_VAR 0 11
82163: PPUSH
82164: LD_VAR 0 14
82168: PUSH
82169: LD_INT 1
82171: ARRAY
82172: PPUSH
82173: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
82177: LD_VAR 0 4
82181: PUSH
82182: LD_VAR 0 7
82186: ARRAY
82187: PPUSH
82188: LD_VAR 0 10
82192: PPUSH
82193: LD_VAR 0 12
82197: PPUSH
82198: LD_INT 7
82200: PPUSH
82201: CALL_OW 272
82205: PPUSH
82206: LD_VAR 0 11
82210: PPUSH
82211: LD_VAR 0 12
82215: PPUSH
82216: LD_INT 7
82218: PPUSH
82219: CALL_OW 273
82223: PPUSH
82224: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
82228: LD_VAR 0 4
82232: PUSH
82233: LD_VAR 0 7
82237: ARRAY
82238: PPUSH
82239: LD_INT 71
82241: PPUSH
82242: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
82246: LD_ADDR_VAR 0 27
82250: PUSH
82251: LD_VAR 0 27
82255: PPUSH
82256: LD_VAR 0 27
82260: PUSH
82261: LD_INT 1
82263: PLUS
82264: PPUSH
82265: LD_VAR 0 14
82269: PUSH
82270: LD_INT 1
82272: ARRAY
82273: PPUSH
82274: CALL_OW 1
82278: ST_TO_ADDR
// attacking := true ;
82279: LD_ADDR_VAR 0 29
82283: PUSH
82284: LD_INT 1
82286: ST_TO_ADDR
// continue ;
82287: GO 80134
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
82289: LD_VAR 0 4
82293: PUSH
82294: LD_VAR 0 7
82298: ARRAY
82299: PPUSH
82300: CALL_OW 257
82304: PUSH
82305: LD_INT 17
82307: EQUAL
82308: PUSH
82309: LD_VAR 0 4
82313: PUSH
82314: LD_VAR 0 7
82318: ARRAY
82319: PPUSH
82320: CALL_OW 110
82324: PUSH
82325: LD_INT 71
82327: EQUAL
82328: NOT
82329: AND
82330: IFFALSE 82476
// begin attacking := false ;
82332: LD_ADDR_VAR 0 29
82336: PUSH
82337: LD_INT 0
82339: ST_TO_ADDR
// k := 5 ;
82340: LD_ADDR_VAR 0 9
82344: PUSH
82345: LD_INT 5
82347: ST_TO_ADDR
// if tmp < k then
82348: LD_VAR 0 14
82352: PUSH
82353: LD_VAR 0 9
82357: LESS
82358: IFFALSE 82370
// k := tmp ;
82360: LD_ADDR_VAR 0 9
82364: PUSH
82365: LD_VAR 0 14
82369: ST_TO_ADDR
// for j = 1 to k do
82370: LD_ADDR_VAR 0 8
82374: PUSH
82375: DOUBLE
82376: LD_INT 1
82378: DEC
82379: ST_TO_ADDR
82380: LD_VAR 0 9
82384: PUSH
82385: FOR_TO
82386: IFFALSE 82474
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
82388: LD_VAR 0 14
82392: PUSH
82393: LD_VAR 0 8
82397: ARRAY
82398: PUSH
82399: LD_VAR 0 14
82403: PPUSH
82404: LD_INT 58
82406: PUSH
82407: EMPTY
82408: LIST
82409: PPUSH
82410: CALL_OW 72
82414: IN
82415: NOT
82416: IFFALSE 82472
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
82418: LD_VAR 0 4
82422: PUSH
82423: LD_VAR 0 7
82427: ARRAY
82428: PPUSH
82429: LD_VAR 0 14
82433: PUSH
82434: LD_VAR 0 8
82438: ARRAY
82439: PPUSH
82440: CALL_OW 115
// attacking := true ;
82444: LD_ADDR_VAR 0 29
82448: PUSH
82449: LD_INT 1
82451: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
82452: LD_VAR 0 4
82456: PUSH
82457: LD_VAR 0 7
82461: ARRAY
82462: PPUSH
82463: LD_INT 71
82465: PPUSH
82466: CALL_OW 109
// continue ;
82470: GO 82385
// end ; end ;
82472: GO 82385
82474: POP
82475: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
82476: LD_VAR 0 4
82480: PUSH
82481: LD_VAR 0 7
82485: ARRAY
82486: PPUSH
82487: CALL_OW 257
82491: PUSH
82492: LD_INT 8
82494: EQUAL
82495: PUSH
82496: LD_VAR 0 4
82500: PUSH
82501: LD_VAR 0 7
82505: ARRAY
82506: PPUSH
82507: CALL_OW 264
82511: PUSH
82512: LD_INT 28
82514: PUSH
82515: LD_INT 45
82517: PUSH
82518: LD_INT 7
82520: PUSH
82521: LD_INT 47
82523: PUSH
82524: EMPTY
82525: LIST
82526: LIST
82527: LIST
82528: LIST
82529: IN
82530: OR
82531: IFFALSE 82761
// begin attacking := false ;
82533: LD_ADDR_VAR 0 29
82537: PUSH
82538: LD_INT 0
82540: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
82541: LD_VAR 0 14
82545: PUSH
82546: LD_INT 1
82548: ARRAY
82549: PPUSH
82550: CALL_OW 266
82554: PUSH
82555: LD_INT 32
82557: PUSH
82558: LD_INT 31
82560: PUSH
82561: LD_INT 33
82563: PUSH
82564: LD_INT 4
82566: PUSH
82567: LD_INT 5
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: IN
82577: IFFALSE 82761
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
82579: LD_ADDR_VAR 0 9
82583: PUSH
82584: LD_VAR 0 14
82588: PUSH
82589: LD_INT 1
82591: ARRAY
82592: PPUSH
82593: CALL_OW 266
82597: PPUSH
82598: LD_VAR 0 14
82602: PUSH
82603: LD_INT 1
82605: ARRAY
82606: PPUSH
82607: CALL_OW 250
82611: PPUSH
82612: LD_VAR 0 14
82616: PUSH
82617: LD_INT 1
82619: ARRAY
82620: PPUSH
82621: CALL_OW 251
82625: PPUSH
82626: LD_VAR 0 14
82630: PUSH
82631: LD_INT 1
82633: ARRAY
82634: PPUSH
82635: CALL_OW 254
82639: PPUSH
82640: LD_VAR 0 14
82644: PUSH
82645: LD_INT 1
82647: ARRAY
82648: PPUSH
82649: CALL_OW 248
82653: PPUSH
82654: LD_INT 0
82656: PPUSH
82657: CALL 59393 0 6
82661: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
82662: LD_ADDR_VAR 0 8
82666: PUSH
82667: LD_VAR 0 4
82671: PUSH
82672: LD_VAR 0 7
82676: ARRAY
82677: PPUSH
82678: LD_VAR 0 9
82682: PPUSH
82683: CALL 78080 0 2
82687: ST_TO_ADDR
// if j then
82688: LD_VAR 0 8
82692: IFFALSE 82761
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
82694: LD_VAR 0 8
82698: PUSH
82699: LD_INT 1
82701: ARRAY
82702: PPUSH
82703: LD_VAR 0 8
82707: PUSH
82708: LD_INT 2
82710: ARRAY
82711: PPUSH
82712: CALL_OW 488
82716: IFFALSE 82761
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
82718: LD_VAR 0 4
82722: PUSH
82723: LD_VAR 0 7
82727: ARRAY
82728: PPUSH
82729: LD_VAR 0 8
82733: PUSH
82734: LD_INT 1
82736: ARRAY
82737: PPUSH
82738: LD_VAR 0 8
82742: PUSH
82743: LD_INT 2
82745: ARRAY
82746: PPUSH
82747: CALL_OW 116
// attacking := true ;
82751: LD_ADDR_VAR 0 29
82755: PUSH
82756: LD_INT 1
82758: ST_TO_ADDR
// continue ;
82759: GO 80134
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
82761: LD_VAR 0 4
82765: PUSH
82766: LD_VAR 0 7
82770: ARRAY
82771: PPUSH
82772: CALL_OW 265
82776: PUSH
82777: LD_INT 11
82779: EQUAL
82780: IFFALSE 83058
// begin k := 10 ;
82782: LD_ADDR_VAR 0 9
82786: PUSH
82787: LD_INT 10
82789: ST_TO_ADDR
// x := 0 ;
82790: LD_ADDR_VAR 0 10
82794: PUSH
82795: LD_INT 0
82797: ST_TO_ADDR
// if tmp < k then
82798: LD_VAR 0 14
82802: PUSH
82803: LD_VAR 0 9
82807: LESS
82808: IFFALSE 82820
// k := tmp ;
82810: LD_ADDR_VAR 0 9
82814: PUSH
82815: LD_VAR 0 14
82819: ST_TO_ADDR
// for j = k downto 1 do
82820: LD_ADDR_VAR 0 8
82824: PUSH
82825: DOUBLE
82826: LD_VAR 0 9
82830: INC
82831: ST_TO_ADDR
82832: LD_INT 1
82834: PUSH
82835: FOR_DOWNTO
82836: IFFALSE 82911
// begin if GetType ( tmp [ j ] ) = unit_human then
82838: LD_VAR 0 14
82842: PUSH
82843: LD_VAR 0 8
82847: ARRAY
82848: PPUSH
82849: CALL_OW 247
82853: PUSH
82854: LD_INT 1
82856: EQUAL
82857: IFFALSE 82909
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
82859: LD_VAR 0 4
82863: PUSH
82864: LD_VAR 0 7
82868: ARRAY
82869: PPUSH
82870: LD_VAR 0 14
82874: PUSH
82875: LD_VAR 0 8
82879: ARRAY
82880: PPUSH
82881: CALL 78351 0 2
// x := tmp [ j ] ;
82885: LD_ADDR_VAR 0 10
82889: PUSH
82890: LD_VAR 0 14
82894: PUSH
82895: LD_VAR 0 8
82899: ARRAY
82900: ST_TO_ADDR
// attacking := true ;
82901: LD_ADDR_VAR 0 29
82905: PUSH
82906: LD_INT 1
82908: ST_TO_ADDR
// end ; end ;
82909: GO 82835
82911: POP
82912: POP
// if not x then
82913: LD_VAR 0 10
82917: NOT
82918: IFFALSE 83058
// begin attacking := true ;
82920: LD_ADDR_VAR 0 29
82924: PUSH
82925: LD_INT 1
82927: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
82928: LD_VAR 0 4
82932: PUSH
82933: LD_VAR 0 7
82937: ARRAY
82938: PPUSH
82939: CALL_OW 250
82943: PPUSH
82944: LD_VAR 0 4
82948: PUSH
82949: LD_VAR 0 7
82953: ARRAY
82954: PPUSH
82955: CALL_OW 251
82959: PPUSH
82960: CALL_OW 546
82964: PUSH
82965: LD_INT 2
82967: ARRAY
82968: PUSH
82969: LD_VAR 0 14
82973: PUSH
82974: LD_INT 1
82976: ARRAY
82977: PPUSH
82978: CALL_OW 250
82982: PPUSH
82983: LD_VAR 0 14
82987: PUSH
82988: LD_INT 1
82990: ARRAY
82991: PPUSH
82992: CALL_OW 251
82996: PPUSH
82997: CALL_OW 546
83001: PUSH
83002: LD_INT 2
83004: ARRAY
83005: EQUAL
83006: IFFALSE 83034
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
83008: LD_VAR 0 4
83012: PUSH
83013: LD_VAR 0 7
83017: ARRAY
83018: PPUSH
83019: LD_VAR 0 14
83023: PUSH
83024: LD_INT 1
83026: ARRAY
83027: PPUSH
83028: CALL 78351 0 2
83032: GO 83058
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83034: LD_VAR 0 4
83038: PUSH
83039: LD_VAR 0 7
83043: ARRAY
83044: PPUSH
83045: LD_VAR 0 14
83049: PUSH
83050: LD_INT 1
83052: ARRAY
83053: PPUSH
83054: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
83058: LD_VAR 0 4
83062: PUSH
83063: LD_VAR 0 7
83067: ARRAY
83068: PPUSH
83069: CALL_OW 264
83073: PUSH
83074: LD_INT 29
83076: EQUAL
83077: IFFALSE 83443
// begin if WantsToAttack ( group [ i ] ) in bombed then
83079: LD_VAR 0 4
83083: PUSH
83084: LD_VAR 0 7
83088: ARRAY
83089: PPUSH
83090: CALL_OW 319
83094: PUSH
83095: LD_VAR 0 28
83099: IN
83100: IFFALSE 83104
// continue ;
83102: GO 80134
// k := 8 ;
83104: LD_ADDR_VAR 0 9
83108: PUSH
83109: LD_INT 8
83111: ST_TO_ADDR
// x := 0 ;
83112: LD_ADDR_VAR 0 10
83116: PUSH
83117: LD_INT 0
83119: ST_TO_ADDR
// if tmp < k then
83120: LD_VAR 0 14
83124: PUSH
83125: LD_VAR 0 9
83129: LESS
83130: IFFALSE 83142
// k := tmp ;
83132: LD_ADDR_VAR 0 9
83136: PUSH
83137: LD_VAR 0 14
83141: ST_TO_ADDR
// for j = 1 to k do
83142: LD_ADDR_VAR 0 8
83146: PUSH
83147: DOUBLE
83148: LD_INT 1
83150: DEC
83151: ST_TO_ADDR
83152: LD_VAR 0 9
83156: PUSH
83157: FOR_TO
83158: IFFALSE 83290
// begin if GetType ( tmp [ j ] ) = unit_building then
83160: LD_VAR 0 14
83164: PUSH
83165: LD_VAR 0 8
83169: ARRAY
83170: PPUSH
83171: CALL_OW 247
83175: PUSH
83176: LD_INT 3
83178: EQUAL
83179: IFFALSE 83288
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
83181: LD_VAR 0 14
83185: PUSH
83186: LD_VAR 0 8
83190: ARRAY
83191: PUSH
83192: LD_VAR 0 28
83196: IN
83197: NOT
83198: PUSH
83199: LD_VAR 0 14
83203: PUSH
83204: LD_VAR 0 8
83208: ARRAY
83209: PPUSH
83210: CALL_OW 313
83214: AND
83215: IFFALSE 83288
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83217: LD_VAR 0 4
83221: PUSH
83222: LD_VAR 0 7
83226: ARRAY
83227: PPUSH
83228: LD_VAR 0 14
83232: PUSH
83233: LD_VAR 0 8
83237: ARRAY
83238: PPUSH
83239: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
83243: LD_ADDR_VAR 0 28
83247: PUSH
83248: LD_VAR 0 28
83252: PPUSH
83253: LD_VAR 0 28
83257: PUSH
83258: LD_INT 1
83260: PLUS
83261: PPUSH
83262: LD_VAR 0 14
83266: PUSH
83267: LD_VAR 0 8
83271: ARRAY
83272: PPUSH
83273: CALL_OW 1
83277: ST_TO_ADDR
// attacking := true ;
83278: LD_ADDR_VAR 0 29
83282: PUSH
83283: LD_INT 1
83285: ST_TO_ADDR
// break ;
83286: GO 83290
// end ; end ;
83288: GO 83157
83290: POP
83291: POP
// if not attacking and f_attack_depot then
83292: LD_VAR 0 29
83296: NOT
83297: PUSH
83298: LD_VAR 0 25
83302: AND
83303: IFFALSE 83398
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83305: LD_ADDR_VAR 0 13
83309: PUSH
83310: LD_VAR 0 14
83314: PPUSH
83315: LD_INT 2
83317: PUSH
83318: LD_INT 30
83320: PUSH
83321: LD_INT 0
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: PUSH
83328: LD_INT 30
83330: PUSH
83331: LD_INT 1
83333: PUSH
83334: EMPTY
83335: LIST
83336: LIST
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: LIST
83342: PPUSH
83343: CALL_OW 72
83347: ST_TO_ADDR
// if z then
83348: LD_VAR 0 13
83352: IFFALSE 83398
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
83354: LD_VAR 0 4
83358: PUSH
83359: LD_VAR 0 7
83363: ARRAY
83364: PPUSH
83365: LD_VAR 0 13
83369: PPUSH
83370: LD_VAR 0 4
83374: PUSH
83375: LD_VAR 0 7
83379: ARRAY
83380: PPUSH
83381: CALL_OW 74
83385: PPUSH
83386: CALL_OW 115
// attacking := true ;
83390: LD_ADDR_VAR 0 29
83394: PUSH
83395: LD_INT 1
83397: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
83398: LD_VAR 0 4
83402: PUSH
83403: LD_VAR 0 7
83407: ARRAY
83408: PPUSH
83409: CALL_OW 256
83413: PUSH
83414: LD_INT 500
83416: LESS
83417: IFFALSE 83443
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
83419: LD_VAR 0 4
83423: PUSH
83424: LD_VAR 0 7
83428: ARRAY
83429: PPUSH
83430: LD_VAR 0 14
83434: PUSH
83435: LD_INT 1
83437: ARRAY
83438: PPUSH
83439: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
83443: LD_VAR 0 4
83447: PUSH
83448: LD_VAR 0 7
83452: ARRAY
83453: PPUSH
83454: CALL_OW 264
83458: PUSH
83459: LD_INT 49
83461: EQUAL
83462: IFFALSE 83583
// begin if not HasTask ( group [ i ] ) then
83464: LD_VAR 0 4
83468: PUSH
83469: LD_VAR 0 7
83473: ARRAY
83474: PPUSH
83475: CALL_OW 314
83479: NOT
83480: IFFALSE 83583
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
83482: LD_ADDR_VAR 0 9
83486: PUSH
83487: LD_INT 81
83489: PUSH
83490: LD_VAR 0 4
83494: PUSH
83495: LD_VAR 0 7
83499: ARRAY
83500: PPUSH
83501: CALL_OW 255
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: PPUSH
83510: CALL_OW 69
83514: PPUSH
83515: LD_VAR 0 4
83519: PUSH
83520: LD_VAR 0 7
83524: ARRAY
83525: PPUSH
83526: CALL_OW 74
83530: ST_TO_ADDR
// if k then
83531: LD_VAR 0 9
83535: IFFALSE 83583
// if GetDistUnits ( group [ i ] , k ) > 10 then
83537: LD_VAR 0 4
83541: PUSH
83542: LD_VAR 0 7
83546: ARRAY
83547: PPUSH
83548: LD_VAR 0 9
83552: PPUSH
83553: CALL_OW 296
83557: PUSH
83558: LD_INT 10
83560: GREATER
83561: IFFALSE 83583
// ComMoveUnit ( group [ i ] , k ) ;
83563: LD_VAR 0 4
83567: PUSH
83568: LD_VAR 0 7
83572: ARRAY
83573: PPUSH
83574: LD_VAR 0 9
83578: PPUSH
83579: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83583: LD_VAR 0 4
83587: PUSH
83588: LD_VAR 0 7
83592: ARRAY
83593: PPUSH
83594: CALL_OW 256
83598: PUSH
83599: LD_INT 250
83601: LESS
83602: PUSH
83603: LD_VAR 0 4
83607: PUSH
83608: LD_VAR 0 7
83612: ARRAY
83613: PUSH
83614: LD_INT 21
83616: PUSH
83617: LD_INT 2
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: PUSH
83624: LD_INT 23
83626: PUSH
83627: LD_INT 2
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PUSH
83634: EMPTY
83635: LIST
83636: LIST
83637: PPUSH
83638: CALL_OW 69
83642: IN
83643: AND
83644: IFFALSE 83769
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
83646: LD_ADDR_VAR 0 9
83650: PUSH
83651: LD_OWVAR 3
83655: PUSH
83656: LD_VAR 0 4
83660: PUSH
83661: LD_VAR 0 7
83665: ARRAY
83666: DIFF
83667: PPUSH
83668: LD_VAR 0 4
83672: PUSH
83673: LD_VAR 0 7
83677: ARRAY
83678: PPUSH
83679: CALL_OW 74
83683: ST_TO_ADDR
// if not k then
83684: LD_VAR 0 9
83688: NOT
83689: IFFALSE 83693
// continue ;
83691: GO 80134
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
83693: LD_VAR 0 9
83697: PUSH
83698: LD_INT 81
83700: PUSH
83701: LD_VAR 0 4
83705: PUSH
83706: LD_VAR 0 7
83710: ARRAY
83711: PPUSH
83712: CALL_OW 255
83716: PUSH
83717: EMPTY
83718: LIST
83719: LIST
83720: PPUSH
83721: CALL_OW 69
83725: IN
83726: PUSH
83727: LD_VAR 0 9
83731: PPUSH
83732: LD_VAR 0 4
83736: PUSH
83737: LD_VAR 0 7
83741: ARRAY
83742: PPUSH
83743: CALL_OW 296
83747: PUSH
83748: LD_INT 5
83750: LESS
83751: AND
83752: IFFALSE 83769
// ComAutodestruct ( group [ i ] ) ;
83754: LD_VAR 0 4
83758: PUSH
83759: LD_VAR 0 7
83763: ARRAY
83764: PPUSH
83765: CALL 78249 0 1
// end ; if f_attack_depot then
83769: LD_VAR 0 25
83773: IFFALSE 83885
// begin k := 6 ;
83775: LD_ADDR_VAR 0 9
83779: PUSH
83780: LD_INT 6
83782: ST_TO_ADDR
// if tmp < k then
83783: LD_VAR 0 14
83787: PUSH
83788: LD_VAR 0 9
83792: LESS
83793: IFFALSE 83805
// k := tmp ;
83795: LD_ADDR_VAR 0 9
83799: PUSH
83800: LD_VAR 0 14
83804: ST_TO_ADDR
// for j = 1 to k do
83805: LD_ADDR_VAR 0 8
83809: PUSH
83810: DOUBLE
83811: LD_INT 1
83813: DEC
83814: ST_TO_ADDR
83815: LD_VAR 0 9
83819: PUSH
83820: FOR_TO
83821: IFFALSE 83883
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
83823: LD_VAR 0 8
83827: PPUSH
83828: CALL_OW 266
83832: PUSH
83833: LD_INT 0
83835: PUSH
83836: LD_INT 1
83838: PUSH
83839: EMPTY
83840: LIST
83841: LIST
83842: IN
83843: IFFALSE 83881
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
83845: LD_VAR 0 4
83849: PUSH
83850: LD_VAR 0 7
83854: ARRAY
83855: PPUSH
83856: LD_VAR 0 14
83860: PUSH
83861: LD_VAR 0 8
83865: ARRAY
83866: PPUSH
83867: CALL_OW 115
// attacking := true ;
83871: LD_ADDR_VAR 0 29
83875: PUSH
83876: LD_INT 1
83878: ST_TO_ADDR
// break ;
83879: GO 83883
// end ;
83881: GO 83820
83883: POP
83884: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
83885: LD_VAR 0 4
83889: PUSH
83890: LD_VAR 0 7
83894: ARRAY
83895: PPUSH
83896: CALL_OW 302
83900: PUSH
83901: LD_VAR 0 29
83905: NOT
83906: AND
83907: IFFALSE 84229
// begin if GetTag ( group [ i ] ) = 71 then
83909: LD_VAR 0 4
83913: PUSH
83914: LD_VAR 0 7
83918: ARRAY
83919: PPUSH
83920: CALL_OW 110
83924: PUSH
83925: LD_INT 71
83927: EQUAL
83928: IFFALSE 83969
// begin if HasTask ( group [ i ] ) then
83930: LD_VAR 0 4
83934: PUSH
83935: LD_VAR 0 7
83939: ARRAY
83940: PPUSH
83941: CALL_OW 314
83945: IFFALSE 83951
// continue else
83947: GO 80134
83949: GO 83969
// SetTag ( group [ i ] , 0 ) ;
83951: LD_VAR 0 4
83955: PUSH
83956: LD_VAR 0 7
83960: ARRAY
83961: PPUSH
83962: LD_INT 0
83964: PPUSH
83965: CALL_OW 109
// end ; k := 8 ;
83969: LD_ADDR_VAR 0 9
83973: PUSH
83974: LD_INT 8
83976: ST_TO_ADDR
// x := 0 ;
83977: LD_ADDR_VAR 0 10
83981: PUSH
83982: LD_INT 0
83984: ST_TO_ADDR
// if tmp < k then
83985: LD_VAR 0 14
83989: PUSH
83990: LD_VAR 0 9
83994: LESS
83995: IFFALSE 84007
// k := tmp ;
83997: LD_ADDR_VAR 0 9
84001: PUSH
84002: LD_VAR 0 14
84006: ST_TO_ADDR
// for j = 1 to k do
84007: LD_ADDR_VAR 0 8
84011: PUSH
84012: DOUBLE
84013: LD_INT 1
84015: DEC
84016: ST_TO_ADDR
84017: LD_VAR 0 9
84021: PUSH
84022: FOR_TO
84023: IFFALSE 84121
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
84025: LD_VAR 0 14
84029: PUSH
84030: LD_VAR 0 8
84034: ARRAY
84035: PPUSH
84036: CALL_OW 247
84040: PUSH
84041: LD_INT 1
84043: EQUAL
84044: PUSH
84045: LD_VAR 0 14
84049: PUSH
84050: LD_VAR 0 8
84054: ARRAY
84055: PPUSH
84056: CALL_OW 256
84060: PUSH
84061: LD_INT 250
84063: LESS
84064: PUSH
84065: LD_VAR 0 20
84069: AND
84070: PUSH
84071: LD_VAR 0 20
84075: NOT
84076: PUSH
84077: LD_VAR 0 14
84081: PUSH
84082: LD_VAR 0 8
84086: ARRAY
84087: PPUSH
84088: CALL_OW 256
84092: PUSH
84093: LD_INT 250
84095: GREATEREQUAL
84096: AND
84097: OR
84098: AND
84099: IFFALSE 84119
// begin x := tmp [ j ] ;
84101: LD_ADDR_VAR 0 10
84105: PUSH
84106: LD_VAR 0 14
84110: PUSH
84111: LD_VAR 0 8
84115: ARRAY
84116: ST_TO_ADDR
// break ;
84117: GO 84121
// end ;
84119: GO 84022
84121: POP
84122: POP
// if x then
84123: LD_VAR 0 10
84127: IFFALSE 84151
// ComAttackUnit ( group [ i ] , x ) else
84129: LD_VAR 0 4
84133: PUSH
84134: LD_VAR 0 7
84138: ARRAY
84139: PPUSH
84140: LD_VAR 0 10
84144: PPUSH
84145: CALL_OW 115
84149: GO 84175
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
84151: LD_VAR 0 4
84155: PUSH
84156: LD_VAR 0 7
84160: ARRAY
84161: PPUSH
84162: LD_VAR 0 14
84166: PUSH
84167: LD_INT 1
84169: ARRAY
84170: PPUSH
84171: CALL_OW 115
// if not HasTask ( group [ i ] ) then
84175: LD_VAR 0 4
84179: PUSH
84180: LD_VAR 0 7
84184: ARRAY
84185: PPUSH
84186: CALL_OW 314
84190: NOT
84191: IFFALSE 84229
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
84193: LD_VAR 0 4
84197: PUSH
84198: LD_VAR 0 7
84202: ARRAY
84203: PPUSH
84204: LD_VAR 0 14
84208: PPUSH
84209: LD_VAR 0 4
84213: PUSH
84214: LD_VAR 0 7
84218: ARRAY
84219: PPUSH
84220: CALL_OW 74
84224: PPUSH
84225: CALL_OW 115
// end ; end ; end ;
84229: GO 80134
84231: POP
84232: POP
// wait ( 0 0$1 ) ;
84233: LD_INT 35
84235: PPUSH
84236: CALL_OW 67
// until group = [ ] ;
84240: LD_VAR 0 4
84244: PUSH
84245: EMPTY
84246: EQUAL
84247: IFFALSE 80119
// end ;
84249: LD_VAR 0 2
84253: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84254: LD_INT 0
84256: PPUSH
84257: PPUSH
84258: PPUSH
84259: PPUSH
// if not base_units then
84260: LD_VAR 0 1
84264: NOT
84265: IFFALSE 84269
// exit ;
84267: GO 84356
// result := false ;
84269: LD_ADDR_VAR 0 2
84273: PUSH
84274: LD_INT 0
84276: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84277: LD_ADDR_VAR 0 5
84281: PUSH
84282: LD_VAR 0 1
84286: PPUSH
84287: LD_INT 21
84289: PUSH
84290: LD_INT 3
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: PPUSH
84297: CALL_OW 72
84301: ST_TO_ADDR
// if not tmp then
84302: LD_VAR 0 5
84306: NOT
84307: IFFALSE 84311
// exit ;
84309: GO 84356
// for i in tmp do
84311: LD_ADDR_VAR 0 3
84315: PUSH
84316: LD_VAR 0 5
84320: PUSH
84321: FOR_IN
84322: IFFALSE 84354
// begin result := EnemyInRange ( i , 22 ) ;
84324: LD_ADDR_VAR 0 2
84328: PUSH
84329: LD_VAR 0 3
84333: PPUSH
84334: LD_INT 22
84336: PPUSH
84337: CALL 77932 0 2
84341: ST_TO_ADDR
// if result then
84342: LD_VAR 0 2
84346: IFFALSE 84352
// exit ;
84348: POP
84349: POP
84350: GO 84356
// end ;
84352: GO 84321
84354: POP
84355: POP
// end ;
84356: LD_VAR 0 2
84360: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
84361: LD_INT 0
84363: PPUSH
84364: PPUSH
// if not units then
84365: LD_VAR 0 1
84369: NOT
84370: IFFALSE 84374
// exit ;
84372: GO 84444
// result := [ ] ;
84374: LD_ADDR_VAR 0 3
84378: PUSH
84379: EMPTY
84380: ST_TO_ADDR
// for i in units do
84381: LD_ADDR_VAR 0 4
84385: PUSH
84386: LD_VAR 0 1
84390: PUSH
84391: FOR_IN
84392: IFFALSE 84442
// if GetTag ( i ) = tag then
84394: LD_VAR 0 4
84398: PPUSH
84399: CALL_OW 110
84403: PUSH
84404: LD_VAR 0 2
84408: EQUAL
84409: IFFALSE 84440
// result := Insert ( result , result + 1 , i ) ;
84411: LD_ADDR_VAR 0 3
84415: PUSH
84416: LD_VAR 0 3
84420: PPUSH
84421: LD_VAR 0 3
84425: PUSH
84426: LD_INT 1
84428: PLUS
84429: PPUSH
84430: LD_VAR 0 4
84434: PPUSH
84435: CALL_OW 2
84439: ST_TO_ADDR
84440: GO 84391
84442: POP
84443: POP
// end ;
84444: LD_VAR 0 3
84448: RET
// export function IsDriver ( un ) ; begin
84449: LD_INT 0
84451: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84452: LD_ADDR_VAR 0 2
84456: PUSH
84457: LD_VAR 0 1
84461: PUSH
84462: LD_INT 55
84464: PUSH
84465: EMPTY
84466: LIST
84467: PPUSH
84468: CALL_OW 69
84472: IN
84473: ST_TO_ADDR
// end ;
84474: LD_VAR 0 2
84478: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84479: LD_INT 0
84481: PPUSH
84482: PPUSH
// list := [ ] ;
84483: LD_ADDR_VAR 0 5
84487: PUSH
84488: EMPTY
84489: ST_TO_ADDR
// case d of 0 :
84490: LD_VAR 0 3
84494: PUSH
84495: LD_INT 0
84497: DOUBLE
84498: EQUAL
84499: IFTRUE 84503
84501: GO 84636
84503: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84504: LD_ADDR_VAR 0 5
84508: PUSH
84509: LD_VAR 0 1
84513: PUSH
84514: LD_INT 4
84516: MINUS
84517: PUSH
84518: LD_VAR 0 2
84522: PUSH
84523: LD_INT 4
84525: MINUS
84526: PUSH
84527: LD_INT 2
84529: PUSH
84530: EMPTY
84531: LIST
84532: LIST
84533: LIST
84534: PUSH
84535: LD_VAR 0 1
84539: PUSH
84540: LD_INT 3
84542: MINUS
84543: PUSH
84544: LD_VAR 0 2
84548: PUSH
84549: LD_INT 1
84551: PUSH
84552: EMPTY
84553: LIST
84554: LIST
84555: LIST
84556: PUSH
84557: LD_VAR 0 1
84561: PUSH
84562: LD_INT 4
84564: PLUS
84565: PUSH
84566: LD_VAR 0 2
84570: PUSH
84571: LD_INT 4
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: LIST
84578: PUSH
84579: LD_VAR 0 1
84583: PUSH
84584: LD_INT 3
84586: PLUS
84587: PUSH
84588: LD_VAR 0 2
84592: PUSH
84593: LD_INT 3
84595: PLUS
84596: PUSH
84597: LD_INT 5
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: LIST
84604: PUSH
84605: LD_VAR 0 1
84609: PUSH
84610: LD_VAR 0 2
84614: PUSH
84615: LD_INT 4
84617: PLUS
84618: PUSH
84619: LD_INT 0
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: LIST
84626: PUSH
84627: EMPTY
84628: LIST
84629: LIST
84630: LIST
84631: LIST
84632: LIST
84633: ST_TO_ADDR
// end ; 1 :
84634: GO 85334
84636: LD_INT 1
84638: DOUBLE
84639: EQUAL
84640: IFTRUE 84644
84642: GO 84777
84644: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
84645: LD_ADDR_VAR 0 5
84649: PUSH
84650: LD_VAR 0 1
84654: PUSH
84655: LD_VAR 0 2
84659: PUSH
84660: LD_INT 4
84662: MINUS
84663: PUSH
84664: LD_INT 3
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: LIST
84671: PUSH
84672: LD_VAR 0 1
84676: PUSH
84677: LD_INT 3
84679: MINUS
84680: PUSH
84681: LD_VAR 0 2
84685: PUSH
84686: LD_INT 3
84688: MINUS
84689: PUSH
84690: LD_INT 2
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: LIST
84697: PUSH
84698: LD_VAR 0 1
84702: PUSH
84703: LD_INT 4
84705: MINUS
84706: PUSH
84707: LD_VAR 0 2
84711: PUSH
84712: LD_INT 1
84714: PUSH
84715: EMPTY
84716: LIST
84717: LIST
84718: LIST
84719: PUSH
84720: LD_VAR 0 1
84724: PUSH
84725: LD_VAR 0 2
84729: PUSH
84730: LD_INT 3
84732: PLUS
84733: PUSH
84734: LD_INT 0
84736: PUSH
84737: EMPTY
84738: LIST
84739: LIST
84740: LIST
84741: PUSH
84742: LD_VAR 0 1
84746: PUSH
84747: LD_INT 4
84749: PLUS
84750: PUSH
84751: LD_VAR 0 2
84755: PUSH
84756: LD_INT 4
84758: PLUS
84759: PUSH
84760: LD_INT 5
84762: PUSH
84763: EMPTY
84764: LIST
84765: LIST
84766: LIST
84767: PUSH
84768: EMPTY
84769: LIST
84770: LIST
84771: LIST
84772: LIST
84773: LIST
84774: ST_TO_ADDR
// end ; 2 :
84775: GO 85334
84777: LD_INT 2
84779: DOUBLE
84780: EQUAL
84781: IFTRUE 84785
84783: GO 84914
84785: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
84786: LD_ADDR_VAR 0 5
84790: PUSH
84791: LD_VAR 0 1
84795: PUSH
84796: LD_VAR 0 2
84800: PUSH
84801: LD_INT 3
84803: MINUS
84804: PUSH
84805: LD_INT 3
84807: PUSH
84808: EMPTY
84809: LIST
84810: LIST
84811: LIST
84812: PUSH
84813: LD_VAR 0 1
84817: PUSH
84818: LD_INT 4
84820: PLUS
84821: PUSH
84822: LD_VAR 0 2
84826: PUSH
84827: LD_INT 4
84829: PUSH
84830: EMPTY
84831: LIST
84832: LIST
84833: LIST
84834: PUSH
84835: LD_VAR 0 1
84839: PUSH
84840: LD_VAR 0 2
84844: PUSH
84845: LD_INT 4
84847: PLUS
84848: PUSH
84849: LD_INT 0
84851: PUSH
84852: EMPTY
84853: LIST
84854: LIST
84855: LIST
84856: PUSH
84857: LD_VAR 0 1
84861: PUSH
84862: LD_INT 3
84864: MINUS
84865: PUSH
84866: LD_VAR 0 2
84870: PUSH
84871: LD_INT 1
84873: PUSH
84874: EMPTY
84875: LIST
84876: LIST
84877: LIST
84878: PUSH
84879: LD_VAR 0 1
84883: PUSH
84884: LD_INT 4
84886: MINUS
84887: PUSH
84888: LD_VAR 0 2
84892: PUSH
84893: LD_INT 4
84895: MINUS
84896: PUSH
84897: LD_INT 2
84899: PUSH
84900: EMPTY
84901: LIST
84902: LIST
84903: LIST
84904: PUSH
84905: EMPTY
84906: LIST
84907: LIST
84908: LIST
84909: LIST
84910: LIST
84911: ST_TO_ADDR
// end ; 3 :
84912: GO 85334
84914: LD_INT 3
84916: DOUBLE
84917: EQUAL
84918: IFTRUE 84922
84920: GO 85055
84922: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84923: LD_ADDR_VAR 0 5
84927: PUSH
84928: LD_VAR 0 1
84932: PUSH
84933: LD_INT 3
84935: PLUS
84936: PUSH
84937: LD_VAR 0 2
84941: PUSH
84942: LD_INT 4
84944: PUSH
84945: EMPTY
84946: LIST
84947: LIST
84948: LIST
84949: PUSH
84950: LD_VAR 0 1
84954: PUSH
84955: LD_INT 4
84957: PLUS
84958: PUSH
84959: LD_VAR 0 2
84963: PUSH
84964: LD_INT 4
84966: PLUS
84967: PUSH
84968: LD_INT 5
84970: PUSH
84971: EMPTY
84972: LIST
84973: LIST
84974: LIST
84975: PUSH
84976: LD_VAR 0 1
84980: PUSH
84981: LD_INT 4
84983: MINUS
84984: PUSH
84985: LD_VAR 0 2
84989: PUSH
84990: LD_INT 1
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: LIST
84997: PUSH
84998: LD_VAR 0 1
85002: PUSH
85003: LD_VAR 0 2
85007: PUSH
85008: LD_INT 4
85010: MINUS
85011: PUSH
85012: LD_INT 3
85014: PUSH
85015: EMPTY
85016: LIST
85017: LIST
85018: LIST
85019: PUSH
85020: LD_VAR 0 1
85024: PUSH
85025: LD_INT 3
85027: MINUS
85028: PUSH
85029: LD_VAR 0 2
85033: PUSH
85034: LD_INT 3
85036: MINUS
85037: PUSH
85038: LD_INT 2
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: LIST
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: LIST
85050: LIST
85051: LIST
85052: ST_TO_ADDR
// end ; 4 :
85053: GO 85334
85055: LD_INT 4
85057: DOUBLE
85058: EQUAL
85059: IFTRUE 85063
85061: GO 85196
85063: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85064: LD_ADDR_VAR 0 5
85068: PUSH
85069: LD_VAR 0 1
85073: PUSH
85074: LD_VAR 0 2
85078: PUSH
85079: LD_INT 4
85081: PLUS
85082: PUSH
85083: LD_INT 0
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: LIST
85090: PUSH
85091: LD_VAR 0 1
85095: PUSH
85096: LD_INT 3
85098: PLUS
85099: PUSH
85100: LD_VAR 0 2
85104: PUSH
85105: LD_INT 3
85107: PLUS
85108: PUSH
85109: LD_INT 5
85111: PUSH
85112: EMPTY
85113: LIST
85114: LIST
85115: LIST
85116: PUSH
85117: LD_VAR 0 1
85121: PUSH
85122: LD_INT 4
85124: PLUS
85125: PUSH
85126: LD_VAR 0 2
85130: PUSH
85131: LD_INT 4
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: LIST
85138: PUSH
85139: LD_VAR 0 1
85143: PUSH
85144: LD_VAR 0 2
85148: PUSH
85149: LD_INT 3
85151: MINUS
85152: PUSH
85153: LD_INT 3
85155: PUSH
85156: EMPTY
85157: LIST
85158: LIST
85159: LIST
85160: PUSH
85161: LD_VAR 0 1
85165: PUSH
85166: LD_INT 4
85168: MINUS
85169: PUSH
85170: LD_VAR 0 2
85174: PUSH
85175: LD_INT 4
85177: MINUS
85178: PUSH
85179: LD_INT 2
85181: PUSH
85182: EMPTY
85183: LIST
85184: LIST
85185: LIST
85186: PUSH
85187: EMPTY
85188: LIST
85189: LIST
85190: LIST
85191: LIST
85192: LIST
85193: ST_TO_ADDR
// end ; 5 :
85194: GO 85334
85196: LD_INT 5
85198: DOUBLE
85199: EQUAL
85200: IFTRUE 85204
85202: GO 85333
85204: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85205: LD_ADDR_VAR 0 5
85209: PUSH
85210: LD_VAR 0 1
85214: PUSH
85215: LD_INT 4
85217: MINUS
85218: PUSH
85219: LD_VAR 0 2
85223: PUSH
85224: LD_INT 1
85226: PUSH
85227: EMPTY
85228: LIST
85229: LIST
85230: LIST
85231: PUSH
85232: LD_VAR 0 1
85236: PUSH
85237: LD_VAR 0 2
85241: PUSH
85242: LD_INT 4
85244: MINUS
85245: PUSH
85246: LD_INT 3
85248: PUSH
85249: EMPTY
85250: LIST
85251: LIST
85252: LIST
85253: PUSH
85254: LD_VAR 0 1
85258: PUSH
85259: LD_INT 4
85261: PLUS
85262: PUSH
85263: LD_VAR 0 2
85267: PUSH
85268: LD_INT 4
85270: PLUS
85271: PUSH
85272: LD_INT 5
85274: PUSH
85275: EMPTY
85276: LIST
85277: LIST
85278: LIST
85279: PUSH
85280: LD_VAR 0 1
85284: PUSH
85285: LD_INT 3
85287: PLUS
85288: PUSH
85289: LD_VAR 0 2
85293: PUSH
85294: LD_INT 4
85296: PUSH
85297: EMPTY
85298: LIST
85299: LIST
85300: LIST
85301: PUSH
85302: LD_VAR 0 1
85306: PUSH
85307: LD_VAR 0 2
85311: PUSH
85312: LD_INT 3
85314: PLUS
85315: PUSH
85316: LD_INT 0
85318: PUSH
85319: EMPTY
85320: LIST
85321: LIST
85322: LIST
85323: PUSH
85324: EMPTY
85325: LIST
85326: LIST
85327: LIST
85328: LIST
85329: LIST
85330: ST_TO_ADDR
// end ; end ;
85331: GO 85334
85333: POP
// result := list ;
85334: LD_ADDR_VAR 0 4
85338: PUSH
85339: LD_VAR 0 5
85343: ST_TO_ADDR
// end ;
85344: LD_VAR 0 4
85348: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85349: LD_INT 0
85351: PPUSH
85352: PPUSH
85353: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85354: LD_VAR 0 1
85358: NOT
85359: PUSH
85360: LD_VAR 0 2
85364: PUSH
85365: LD_INT 1
85367: PUSH
85368: LD_INT 2
85370: PUSH
85371: LD_INT 3
85373: PUSH
85374: LD_INT 4
85376: PUSH
85377: EMPTY
85378: LIST
85379: LIST
85380: LIST
85381: LIST
85382: IN
85383: NOT
85384: OR
85385: IFFALSE 85389
// exit ;
85387: GO 85481
// tmp := [ ] ;
85389: LD_ADDR_VAR 0 5
85393: PUSH
85394: EMPTY
85395: ST_TO_ADDR
// for i in units do
85396: LD_ADDR_VAR 0 4
85400: PUSH
85401: LD_VAR 0 1
85405: PUSH
85406: FOR_IN
85407: IFFALSE 85450
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85409: LD_ADDR_VAR 0 5
85413: PUSH
85414: LD_VAR 0 5
85418: PPUSH
85419: LD_VAR 0 5
85423: PUSH
85424: LD_INT 1
85426: PLUS
85427: PPUSH
85428: LD_VAR 0 4
85432: PPUSH
85433: LD_VAR 0 2
85437: PPUSH
85438: CALL_OW 259
85442: PPUSH
85443: CALL_OW 2
85447: ST_TO_ADDR
85448: GO 85406
85450: POP
85451: POP
// if not tmp then
85452: LD_VAR 0 5
85456: NOT
85457: IFFALSE 85461
// exit ;
85459: GO 85481
// result := SortListByListDesc ( units , tmp ) ;
85461: LD_ADDR_VAR 0 3
85465: PUSH
85466: LD_VAR 0 1
85470: PPUSH
85471: LD_VAR 0 5
85475: PPUSH
85476: CALL_OW 77
85480: ST_TO_ADDR
// end ;
85481: LD_VAR 0 3
85485: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85486: LD_INT 0
85488: PPUSH
85489: PPUSH
85490: PPUSH
// x := GetX ( building ) ;
85491: LD_ADDR_VAR 0 4
85495: PUSH
85496: LD_VAR 0 2
85500: PPUSH
85501: CALL_OW 250
85505: ST_TO_ADDR
// y := GetY ( building ) ;
85506: LD_ADDR_VAR 0 5
85510: PUSH
85511: LD_VAR 0 2
85515: PPUSH
85516: CALL_OW 251
85520: ST_TO_ADDR
// if GetTaskList ( unit ) then
85521: LD_VAR 0 1
85525: PPUSH
85526: CALL_OW 437
85530: IFFALSE 85625
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
85532: LD_STRING e
85534: PUSH
85535: LD_VAR 0 1
85539: PPUSH
85540: CALL_OW 437
85544: PUSH
85545: LD_INT 1
85547: ARRAY
85548: PUSH
85549: LD_INT 1
85551: ARRAY
85552: EQUAL
85553: PUSH
85554: LD_VAR 0 4
85558: PUSH
85559: LD_VAR 0 1
85563: PPUSH
85564: CALL_OW 437
85568: PUSH
85569: LD_INT 1
85571: ARRAY
85572: PUSH
85573: LD_INT 2
85575: ARRAY
85576: EQUAL
85577: AND
85578: PUSH
85579: LD_VAR 0 5
85583: PUSH
85584: LD_VAR 0 1
85588: PPUSH
85589: CALL_OW 437
85593: PUSH
85594: LD_INT 1
85596: ARRAY
85597: PUSH
85598: LD_INT 3
85600: ARRAY
85601: EQUAL
85602: AND
85603: IFFALSE 85615
// result := true else
85605: LD_ADDR_VAR 0 3
85609: PUSH
85610: LD_INT 1
85612: ST_TO_ADDR
85613: GO 85623
// result := false ;
85615: LD_ADDR_VAR 0 3
85619: PUSH
85620: LD_INT 0
85622: ST_TO_ADDR
// end else
85623: GO 85633
// result := false ;
85625: LD_ADDR_VAR 0 3
85629: PUSH
85630: LD_INT 0
85632: ST_TO_ADDR
// end ;
85633: LD_VAR 0 3
85637: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
85638: LD_INT 0
85640: PPUSH
85641: PPUSH
85642: PPUSH
85643: PPUSH
// if not unit or not area then
85644: LD_VAR 0 1
85648: NOT
85649: PUSH
85650: LD_VAR 0 2
85654: NOT
85655: OR
85656: IFFALSE 85660
// exit ;
85658: GO 85825
// tmp := AreaToList ( area , i ) ;
85660: LD_ADDR_VAR 0 6
85664: PUSH
85665: LD_VAR 0 2
85669: PPUSH
85670: LD_VAR 0 5
85674: PPUSH
85675: CALL_OW 517
85679: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
85680: LD_ADDR_VAR 0 5
85684: PUSH
85685: DOUBLE
85686: LD_INT 1
85688: DEC
85689: ST_TO_ADDR
85690: LD_VAR 0 6
85694: PUSH
85695: LD_INT 1
85697: ARRAY
85698: PUSH
85699: FOR_TO
85700: IFFALSE 85815
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
85702: LD_ADDR_VAR 0 7
85706: PUSH
85707: LD_VAR 0 6
85711: PUSH
85712: LD_INT 1
85714: ARRAY
85715: PUSH
85716: LD_VAR 0 5
85720: ARRAY
85721: PUSH
85722: LD_VAR 0 6
85726: PUSH
85727: LD_INT 2
85729: ARRAY
85730: PUSH
85731: LD_VAR 0 5
85735: ARRAY
85736: PUSH
85737: EMPTY
85738: LIST
85739: LIST
85740: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
85741: LD_VAR 0 7
85745: PUSH
85746: LD_INT 1
85748: ARRAY
85749: PPUSH
85750: LD_VAR 0 7
85754: PUSH
85755: LD_INT 2
85757: ARRAY
85758: PPUSH
85759: CALL_OW 428
85763: PUSH
85764: LD_INT 0
85766: EQUAL
85767: IFFALSE 85813
// begin result := true ;
85769: LD_ADDR_VAR 0 4
85773: PUSH
85774: LD_INT 1
85776: ST_TO_ADDR
// PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85777: LD_VAR 0 1
85781: PPUSH
85782: LD_VAR 0 7
85786: PUSH
85787: LD_INT 1
85789: ARRAY
85790: PPUSH
85791: LD_VAR 0 7
85795: PUSH
85796: LD_INT 2
85798: ARRAY
85799: PPUSH
85800: LD_VAR 0 3
85804: PPUSH
85805: CALL_OW 48
// exit ;
85809: POP
85810: POP
85811: GO 85825
// end ; end ;
85813: GO 85699
85815: POP
85816: POP
// result := false ;
85817: LD_ADDR_VAR 0 4
85821: PUSH
85822: LD_INT 0
85824: ST_TO_ADDR
// end ;
85825: LD_VAR 0 4
85829: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85830: LD_INT 0
85832: PPUSH
85833: PPUSH
85834: PPUSH
// if not side or side > 8 then
85835: LD_VAR 0 1
85839: NOT
85840: PUSH
85841: LD_VAR 0 1
85845: PUSH
85846: LD_INT 8
85848: GREATER
85849: OR
85850: IFFALSE 85854
// exit ;
85852: GO 86041
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85854: LD_ADDR_VAR 0 4
85858: PUSH
85859: LD_INT 22
85861: PUSH
85862: LD_VAR 0 1
85866: PUSH
85867: EMPTY
85868: LIST
85869: LIST
85870: PUSH
85871: LD_INT 21
85873: PUSH
85874: LD_INT 3
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: PPUSH
85885: CALL_OW 69
85889: ST_TO_ADDR
// if not tmp then
85890: LD_VAR 0 4
85894: NOT
85895: IFFALSE 85899
// exit ;
85897: GO 86041
// enable_addtolog := true ;
85899: LD_ADDR_OWVAR 81
85903: PUSH
85904: LD_INT 1
85906: ST_TO_ADDR
// AddToLog ( [ ) ;
85907: LD_STRING [
85909: PPUSH
85910: CALL_OW 561
// for i in tmp do
85914: LD_ADDR_VAR 0 3
85918: PUSH
85919: LD_VAR 0 4
85923: PUSH
85924: FOR_IN
85925: IFFALSE 86032
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85927: LD_STRING [
85929: PUSH
85930: LD_VAR 0 3
85934: PPUSH
85935: CALL_OW 266
85939: STR
85940: PUSH
85941: LD_STRING , 
85943: STR
85944: PUSH
85945: LD_VAR 0 3
85949: PPUSH
85950: CALL_OW 250
85954: STR
85955: PUSH
85956: LD_STRING , 
85958: STR
85959: PUSH
85960: LD_VAR 0 3
85964: PPUSH
85965: CALL_OW 251
85969: STR
85970: PUSH
85971: LD_STRING , 
85973: STR
85974: PUSH
85975: LD_VAR 0 3
85979: PPUSH
85980: CALL_OW 254
85984: STR
85985: PUSH
85986: LD_STRING , 
85988: STR
85989: PUSH
85990: LD_VAR 0 3
85994: PPUSH
85995: LD_INT 1
85997: PPUSH
85998: CALL_OW 268
86002: STR
86003: PUSH
86004: LD_STRING , 
86006: STR
86007: PUSH
86008: LD_VAR 0 3
86012: PPUSH
86013: LD_INT 2
86015: PPUSH
86016: CALL_OW 268
86020: STR
86021: PUSH
86022: LD_STRING ],
86024: STR
86025: PPUSH
86026: CALL_OW 561
// end ;
86030: GO 85924
86032: POP
86033: POP
// AddToLog ( ]; ) ;
86034: LD_STRING ];
86036: PPUSH
86037: CALL_OW 561
// end ;
86041: LD_VAR 0 2
86045: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86046: LD_INT 0
86048: PPUSH
86049: PPUSH
86050: PPUSH
86051: PPUSH
86052: PPUSH
// if not area or not rate or not max then
86053: LD_VAR 0 1
86057: NOT
86058: PUSH
86059: LD_VAR 0 2
86063: NOT
86064: OR
86065: PUSH
86066: LD_VAR 0 4
86070: NOT
86071: OR
86072: IFFALSE 86076
// exit ;
86074: GO 86268
// while 1 do
86076: LD_INT 1
86078: IFFALSE 86268
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86080: LD_ADDR_VAR 0 9
86084: PUSH
86085: LD_VAR 0 1
86089: PPUSH
86090: LD_INT 1
86092: PPUSH
86093: CALL_OW 287
86097: PUSH
86098: LD_INT 10
86100: MUL
86101: ST_TO_ADDR
// r := rate / 10 ;
86102: LD_ADDR_VAR 0 7
86106: PUSH
86107: LD_VAR 0 2
86111: PUSH
86112: LD_INT 10
86114: DIVREAL
86115: ST_TO_ADDR
// time := 1 1$00 ;
86116: LD_ADDR_VAR 0 8
86120: PUSH
86121: LD_INT 2100
86123: ST_TO_ADDR
// if amount < min then
86124: LD_VAR 0 9
86128: PUSH
86129: LD_VAR 0 3
86133: LESS
86134: IFFALSE 86152
// r := r * 2 else
86136: LD_ADDR_VAR 0 7
86140: PUSH
86141: LD_VAR 0 7
86145: PUSH
86146: LD_INT 2
86148: MUL
86149: ST_TO_ADDR
86150: GO 86178
// if amount > max then
86152: LD_VAR 0 9
86156: PUSH
86157: LD_VAR 0 4
86161: GREATER
86162: IFFALSE 86178
// r := r / 2 ;
86164: LD_ADDR_VAR 0 7
86168: PUSH
86169: LD_VAR 0 7
86173: PUSH
86174: LD_INT 2
86176: DIVREAL
86177: ST_TO_ADDR
// time := time / r ;
86178: LD_ADDR_VAR 0 8
86182: PUSH
86183: LD_VAR 0 8
86187: PUSH
86188: LD_VAR 0 7
86192: DIVREAL
86193: ST_TO_ADDR
// if time < 0 then
86194: LD_VAR 0 8
86198: PUSH
86199: LD_INT 0
86201: LESS
86202: IFFALSE 86219
// time := time * - 1 ;
86204: LD_ADDR_VAR 0 8
86208: PUSH
86209: LD_VAR 0 8
86213: PUSH
86214: LD_INT 1
86216: NEG
86217: MUL
86218: ST_TO_ADDR
// wait ( time ) ;
86219: LD_VAR 0 8
86223: PPUSH
86224: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
86228: LD_INT 35
86230: PPUSH
86231: LD_INT 875
86233: PPUSH
86234: CALL_OW 12
86238: PPUSH
86239: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86243: LD_INT 1
86245: PPUSH
86246: LD_INT 5
86248: PPUSH
86249: CALL_OW 12
86253: PPUSH
86254: LD_VAR 0 1
86258: PPUSH
86259: LD_INT 1
86261: PPUSH
86262: CALL_OW 55
// end ;
86266: GO 86076
// end ;
86268: LD_VAR 0 5
86272: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86273: LD_INT 0
86275: PPUSH
86276: PPUSH
86277: PPUSH
86278: PPUSH
86279: PPUSH
86280: PPUSH
86281: PPUSH
86282: PPUSH
// if not turrets or not factories then
86283: LD_VAR 0 1
86287: NOT
86288: PUSH
86289: LD_VAR 0 2
86293: NOT
86294: OR
86295: IFFALSE 86299
// exit ;
86297: GO 86606
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86299: LD_ADDR_VAR 0 10
86303: PUSH
86304: LD_INT 5
86306: PUSH
86307: LD_INT 6
86309: PUSH
86310: EMPTY
86311: LIST
86312: LIST
86313: PUSH
86314: LD_INT 2
86316: PUSH
86317: LD_INT 4
86319: PUSH
86320: EMPTY
86321: LIST
86322: LIST
86323: PUSH
86324: LD_INT 3
86326: PUSH
86327: LD_INT 5
86329: PUSH
86330: EMPTY
86331: LIST
86332: LIST
86333: PUSH
86334: EMPTY
86335: LIST
86336: LIST
86337: LIST
86338: PUSH
86339: LD_INT 24
86341: PUSH
86342: LD_INT 25
86344: PUSH
86345: EMPTY
86346: LIST
86347: LIST
86348: PUSH
86349: LD_INT 23
86351: PUSH
86352: LD_INT 27
86354: PUSH
86355: EMPTY
86356: LIST
86357: LIST
86358: PUSH
86359: EMPTY
86360: LIST
86361: LIST
86362: PUSH
86363: LD_INT 42
86365: PUSH
86366: LD_INT 43
86368: PUSH
86369: EMPTY
86370: LIST
86371: LIST
86372: PUSH
86373: LD_INT 44
86375: PUSH
86376: LD_INT 46
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: PUSH
86383: LD_INT 45
86385: PUSH
86386: LD_INT 47
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: EMPTY
86394: LIST
86395: LIST
86396: LIST
86397: PUSH
86398: EMPTY
86399: LIST
86400: LIST
86401: LIST
86402: ST_TO_ADDR
// result := [ ] ;
86403: LD_ADDR_VAR 0 3
86407: PUSH
86408: EMPTY
86409: ST_TO_ADDR
// for i in turrets do
86410: LD_ADDR_VAR 0 4
86414: PUSH
86415: LD_VAR 0 1
86419: PUSH
86420: FOR_IN
86421: IFFALSE 86604
// begin nat := GetNation ( i ) ;
86423: LD_ADDR_VAR 0 7
86427: PUSH
86428: LD_VAR 0 4
86432: PPUSH
86433: CALL_OW 248
86437: ST_TO_ADDR
// weapon := 0 ;
86438: LD_ADDR_VAR 0 8
86442: PUSH
86443: LD_INT 0
86445: ST_TO_ADDR
// if not nat then
86446: LD_VAR 0 7
86450: NOT
86451: IFFALSE 86455
// continue ;
86453: GO 86420
// for j in list [ nat ] do
86455: LD_ADDR_VAR 0 5
86459: PUSH
86460: LD_VAR 0 10
86464: PUSH
86465: LD_VAR 0 7
86469: ARRAY
86470: PUSH
86471: FOR_IN
86472: IFFALSE 86513
// if GetBWeapon ( i ) = j [ 1 ] then
86474: LD_VAR 0 4
86478: PPUSH
86479: CALL_OW 269
86483: PUSH
86484: LD_VAR 0 5
86488: PUSH
86489: LD_INT 1
86491: ARRAY
86492: EQUAL
86493: IFFALSE 86511
// begin weapon := j [ 2 ] ;
86495: LD_ADDR_VAR 0 8
86499: PUSH
86500: LD_VAR 0 5
86504: PUSH
86505: LD_INT 2
86507: ARRAY
86508: ST_TO_ADDR
// break ;
86509: GO 86513
// end ;
86511: GO 86471
86513: POP
86514: POP
// if not weapon then
86515: LD_VAR 0 8
86519: NOT
86520: IFFALSE 86524
// continue ;
86522: GO 86420
// for k in factories do
86524: LD_ADDR_VAR 0 6
86528: PUSH
86529: LD_VAR 0 2
86533: PUSH
86534: FOR_IN
86535: IFFALSE 86600
// begin weapons := AvailableWeaponList ( k ) ;
86537: LD_ADDR_VAR 0 9
86541: PUSH
86542: LD_VAR 0 6
86546: PPUSH
86547: CALL_OW 478
86551: ST_TO_ADDR
// if not weapons then
86552: LD_VAR 0 9
86556: NOT
86557: IFFALSE 86561
// continue ;
86559: GO 86534
// if weapon in weapons then
86561: LD_VAR 0 8
86565: PUSH
86566: LD_VAR 0 9
86570: IN
86571: IFFALSE 86598
// begin result := [ i , weapon ] ;
86573: LD_ADDR_VAR 0 3
86577: PUSH
86578: LD_VAR 0 4
86582: PUSH
86583: LD_VAR 0 8
86587: PUSH
86588: EMPTY
86589: LIST
86590: LIST
86591: ST_TO_ADDR
// exit ;
86592: POP
86593: POP
86594: POP
86595: POP
86596: GO 86606
// end ; end ;
86598: GO 86534
86600: POP
86601: POP
// end ;
86602: GO 86420
86604: POP
86605: POP
// end ;
86606: LD_VAR 0 3
86610: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
86611: LD_INT 0
86613: PPUSH
// if not side or side > 8 then
86614: LD_VAR 0 3
86618: NOT
86619: PUSH
86620: LD_VAR 0 3
86624: PUSH
86625: LD_INT 8
86627: GREATER
86628: OR
86629: IFFALSE 86633
// exit ;
86631: GO 86692
// if not range then
86633: LD_VAR 0 4
86637: NOT
86638: IFFALSE 86649
// range := - 12 ;
86640: LD_ADDR_VAR 0 4
86644: PUSH
86645: LD_INT 12
86647: NEG
86648: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
86649: LD_VAR 0 1
86653: PPUSH
86654: LD_VAR 0 2
86658: PPUSH
86659: LD_VAR 0 3
86663: PPUSH
86664: LD_VAR 0 4
86668: PPUSH
86669: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
86673: LD_VAR 0 1
86677: PPUSH
86678: LD_VAR 0 2
86682: PPUSH
86683: LD_VAR 0 3
86687: PPUSH
86688: CALL_OW 331
// end ;
86692: LD_VAR 0 5
86696: RET
// export function Video ( mode ) ; begin
86697: LD_INT 0
86699: PPUSH
// ingame_video = mode ;
86700: LD_ADDR_OWVAR 52
86704: PUSH
86705: LD_VAR 0 1
86709: ST_TO_ADDR
// interface_hidden = mode ;
86710: LD_ADDR_OWVAR 54
86714: PUSH
86715: LD_VAR 0 1
86719: ST_TO_ADDR
// end ;
86720: LD_VAR 0 2
86724: RET
// export function Join ( array , element ) ; begin
86725: LD_INT 0
86727: PPUSH
// result := array ^ element ;
86728: LD_ADDR_VAR 0 3
86732: PUSH
86733: LD_VAR 0 1
86737: PUSH
86738: LD_VAR 0 2
86742: ADD
86743: ST_TO_ADDR
// end ;
86744: LD_VAR 0 3
86748: RET
// export function JoinUnion ( array , element ) ; begin
86749: LD_INT 0
86751: PPUSH
// result := array union element ;
86752: LD_ADDR_VAR 0 3
86756: PUSH
86757: LD_VAR 0 1
86761: PUSH
86762: LD_VAR 0 2
86766: UNION
86767: ST_TO_ADDR
// end ;
86768: LD_VAR 0 3
86772: RET
// export function GetBehemoths ( side ) ; begin
86773: LD_INT 0
86775: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
86776: LD_ADDR_VAR 0 2
86780: PUSH
86781: LD_INT 22
86783: PUSH
86784: LD_VAR 0 1
86788: PUSH
86789: EMPTY
86790: LIST
86791: LIST
86792: PUSH
86793: LD_INT 31
86795: PUSH
86796: LD_INT 25
86798: PUSH
86799: EMPTY
86800: LIST
86801: LIST
86802: PUSH
86803: EMPTY
86804: LIST
86805: LIST
86806: PPUSH
86807: CALL_OW 69
86811: ST_TO_ADDR
// end ; end_of_file
86812: LD_VAR 0 2
86816: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
86817: GO 86819
86819: DISABLE
// begin ru_radar := 98 ;
86820: LD_ADDR_EXP 93
86824: PUSH
86825: LD_INT 98
86827: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
86828: LD_ADDR_EXP 94
86832: PUSH
86833: LD_INT 89
86835: ST_TO_ADDR
// us_hack := 99 ;
86836: LD_ADDR_EXP 95
86840: PUSH
86841: LD_INT 99
86843: ST_TO_ADDR
// us_artillery := 97 ;
86844: LD_ADDR_EXP 96
86848: PUSH
86849: LD_INT 97
86851: ST_TO_ADDR
// ar_bio_bomb := 91 ;
86852: LD_ADDR_EXP 97
86856: PUSH
86857: LD_INT 91
86859: ST_TO_ADDR
// end ;
86860: END
