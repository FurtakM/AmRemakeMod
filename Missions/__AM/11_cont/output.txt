// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 46 0 0
// InitMacro ;
  12: CALL 42077 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareAmerican ;
  29: CALL 345 0 0
// PrepareArabian ;
  33: CALL 30999 0 0
// Action ;
  37: CALL 34827 0 0
// RunMacro ;
  41: CALL 42227 0 0
// end ;
  45: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter ; function InitVariables ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// mission_prefix := 11_ ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 11_
  72: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  73: LD_ADDR_EXP 4
  77: PUSH
  78: LD_STRING 10c_
  80: ST_TO_ADDR
// ar_run := false ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// ar_patrol := false ;
  89: LD_ADDR_EXP 7
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_captured := false ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// us_scout := 0 ;
 105: LD_ADDR_EXP 8
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 113: LD_ADDR_EXP 9
 117: PUSH
 118: LD_INT 0
 120: PUSH
 121: LD_INT 0
 123: PUSH
 124: LD_INT 0
 126: PUSH
 127: LD_INT 0
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: LIST
 138: LIST
 139: ST_TO_ADDR
// kamikazed := false ;
 140: LD_ADDR_EXP 10
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// artifact_stolen := false ;
 148: LD_ADDR_EXP 11
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// artifact_get := false ;
 156: LD_ADDR_EXP 12
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 14
 168: PUSH
 169: LD_INT 189000
 171: PUSH
 172: LD_INT 168000
 174: PUSH
 175: LD_INT 157500
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// powell_warn := false ;
 189: LD_ADDR_EXP 15
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// loses_counter := 0 ;
 197: LD_ADDR_EXP 16
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// artifact_oncargo := false ;
 205: LD_ADDR_EXP 13
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function Debuger ; var i ; begin
 218: LD_INT 0
 220: PPUSH
 221: PPUSH
// if not debug then
 222: LD_EXP 1
 226: NOT
 227: IFFALSE 231
// exit ;
 229: GO 340
// game_speed := 7 ;
 231: LD_ADDR_OWVAR 65
 235: PUSH
 236: LD_INT 7
 238: ST_TO_ADDR
// uc_side := 1 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 1
 246: ST_TO_ADDR
// uc_nation := 1 ;
 247: LD_ADDR_OWVAR 21
 251: PUSH
 252: LD_INT 1
 254: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 255: LD_ADDR_OWVAR 37
 259: PUSH
 260: LD_INT 2
 262: ST_TO_ADDR
// vc_control := control_computer ;
 263: LD_ADDR_OWVAR 38
 267: PUSH
 268: LD_INT 3
 270: ST_TO_ADDR
// vc_engine := engine_combustion ;
 271: LD_ADDR_OWVAR 39
 275: PUSH
 276: LD_INT 1
 278: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 279: LD_ADDR_OWVAR 40
 283: PUSH
 284: LD_INT 7
 286: ST_TO_ADDR
// for i = 1 to 4 do
 287: LD_ADDR_VAR 0 2
 291: PUSH
 292: DOUBLE
 293: LD_INT 1
 295: DEC
 296: ST_TO_ADDR
 297: LD_INT 4
 299: PUSH
 300: FOR_TO
 301: IFFALSE 326
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 303: CALL_OW 45
 307: PPUSH
 308: LD_INT 137
 310: PPUSH
 311: LD_INT 91
 313: PPUSH
 314: LD_INT 6
 316: PPUSH
 317: LD_INT 0
 319: PPUSH
 320: CALL_OW 50
 324: GO 300
 326: POP
 327: POP
// SetSide ( ar_force_south , 1 ) ;
 328: LD_EXP 33
 332: PPUSH
 333: LD_INT 1
 335: PPUSH
 336: CALL_OW 235
// end ; end_of_file
 340: LD_VAR 0 1
 344: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 345: LD_INT 0
 347: PPUSH
 348: PPUSH
 349: PPUSH
 350: PPUSH
 351: PPUSH
 352: PPUSH
 353: PPUSH
 354: PPUSH
 355: PPUSH
// uc_side := 4 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 4
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 372: LD_ADDR_EXP 26
 376: PUSH
 377: LD_STRING Powell
 379: PPUSH
 380: LD_INT 0
 382: PPUSH
 383: CALL 1563 0 2
 387: ST_TO_ADDR
// uc_side := 1 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 1
 395: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 396: LD_ADDR_EXP 17
 400: PUSH
 401: LD_STRING JMM
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: CALL 1563 0 2
 414: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 415: LD_ADDR_EXP 18
 419: PUSH
 420: LD_STRING Lisa
 422: PPUSH
 423: LD_EXP 1
 427: NOT
 428: PPUSH
 429: CALL 1563 0 2
 433: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 434: LD_ADDR_EXP 19
 438: PUSH
 439: LD_STRING Donaldson
 441: PPUSH
 442: LD_EXP 1
 446: NOT
 447: PPUSH
 448: CALL 1563 0 2
 452: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 453: LD_ADDR_EXP 20
 457: PUSH
 458: LD_STRING Bobby
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: CALL 1563 0 2
 471: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 472: LD_ADDR_EXP 21
 476: PUSH
 477: LD_STRING Cyrus
 479: PPUSH
 480: LD_EXP 1
 484: NOT
 485: PPUSH
 486: CALL 1563 0 2
 490: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 491: LD_ADDR_EXP 22
 495: PUSH
 496: LD_STRING Denis
 498: PPUSH
 499: LD_EXP 1
 503: NOT
 504: PPUSH
 505: CALL 1563 0 2
 509: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 510: LD_ADDR_EXP 23
 514: PUSH
 515: LD_STRING Brown
 517: PPUSH
 518: LD_EXP 1
 522: NOT
 523: PPUSH
 524: CALL 1563 0 2
 528: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 529: LD_ADDR_EXP 24
 533: PUSH
 534: LD_STRING Gladstone
 536: PPUSH
 537: LD_EXP 1
 541: NOT
 542: PPUSH
 543: CALL 1563 0 2
 547: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 548: LD_ADDR_EXP 25
 552: PUSH
 553: LD_STRING Houten
 555: PPUSH
 556: LD_EXP 1
 560: NOT
 561: PPUSH
 562: CALL 1563 0 2
 566: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 567: LD_ADDR_EXP 27
 571: PUSH
 572: LD_STRING Cornel
 574: PPUSH
 575: LD_EXP 1
 579: NOT
 580: PPUSH
 581: CALL 1563 0 2
 585: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 586: LD_ADDR_EXP 28
 590: PUSH
 591: LD_STRING Gary
 593: PPUSH
 594: LD_EXP 1
 598: NOT
 599: PPUSH
 600: CALL 1563 0 2
 604: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 605: LD_ADDR_EXP 29
 609: PUSH
 610: LD_STRING Frank
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: CALL 1563 0 2
 623: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 624: LD_ADDR_EXP 30
 628: PUSH
 629: LD_STRING Kikuchi
 631: PPUSH
 632: LD_EXP 1
 636: NOT
 637: PPUSH
 638: CALL 1563 0 2
 642: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 643: LD_ADDR_VAR 0 5
 647: PUSH
 648: LD_EXP 18
 652: PUSH
 653: LD_EXP 19
 657: PUSH
 658: LD_EXP 20
 662: PUSH
 663: LD_EXP 21
 667: PUSH
 668: LD_EXP 22
 672: PUSH
 673: LD_EXP 23
 677: PUSH
 678: LD_EXP 24
 682: PUSH
 683: LD_EXP 25
 687: PUSH
 688: LD_EXP 27
 692: PUSH
 693: LD_EXP 28
 697: PUSH
 698: LD_EXP 29
 702: PUSH
 703: LD_EXP 30
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: ST_TO_ADDR
// tmp := tmp diff 0 ;
 722: LD_ADDR_VAR 0 5
 726: PUSH
 727: LD_VAR 0 5
 731: PUSH
 732: LD_INT 0
 734: DIFF
 735: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
 736: LD_ADDR_VAR 0 5
 740: PUSH
 741: LD_VAR 0 5
 745: PUSH
 746: LD_STRING 10_lock
 748: PPUSH
 749: CALL_OW 31
 753: UNION
 754: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
 755: LD_ADDR_VAR 0 5
 759: PUSH
 760: LD_VAR 0 5
 764: PUSH
 765: LD_STRING 10c_lock
 767: PPUSH
 768: CALL_OW 31
 772: UNION
 773: ST_TO_ADDR
// for i in tmp do
 774: LD_ADDR_VAR 0 2
 778: PUSH
 779: LD_VAR 0 5
 783: PUSH
 784: FOR_IN
 785: IFFALSE 816
// if GetClass ( i ) = class_mortar then
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 257
 796: PUSH
 797: LD_INT 8
 799: EQUAL
 800: IFFALSE 814
// SetClass ( i , class_soldier ) ;
 802: LD_VAR 0 2
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: CALL_OW 336
 814: GO 784
 816: POP
 817: POP
// if tmp < 12 then
 818: LD_VAR 0 5
 822: PUSH
 823: LD_INT 12
 825: LESS
 826: IFFALSE 924
// begin k := 16 - tmp ;
 828: LD_ADDR_VAR 0 3
 832: PUSH
 833: LD_INT 16
 835: PUSH
 836: LD_VAR 0 5
 840: MINUS
 841: ST_TO_ADDR
// for i = 1 to k do
 842: LD_ADDR_VAR 0 2
 846: PUSH
 847: DOUBLE
 848: LD_INT 1
 850: DEC
 851: ST_TO_ADDR
 852: LD_VAR 0 3
 856: PUSH
 857: FOR_TO
 858: IFFALSE 922
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
 860: LD_INT 0
 862: PPUSH
 863: LD_INT 1
 865: PUSH
 866: LD_INT 1
 868: PUSH
 869: LD_INT 2
 871: PUSH
 872: LD_INT 3
 874: PUSH
 875: LD_INT 4
 877: PUSH
 878: EMPTY
 879: LIST
 880: LIST
 881: LIST
 882: LIST
 883: LIST
 884: PUSH
 885: LD_INT 1
 887: PPUSH
 888: LD_INT 5
 890: PPUSH
 891: CALL_OW 12
 895: ARRAY
 896: PPUSH
 897: LD_INT 6
 899: PPUSH
 900: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
 904: LD_ADDR_VAR 0 5
 908: PUSH
 909: LD_VAR 0 5
 913: PUSH
 914: CALL_OW 44
 918: ADD
 919: ST_TO_ADDR
// end ;
 920: GO 857
 922: POP
 923: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
 924: LD_ADDR_VAR 0 6
 928: PUSH
 929: LD_STRING 1
 931: PPUSH
 932: LD_INT 12
 934: PPUSH
 935: LD_INT 12
 937: PPUSH
 938: LD_INT -5
 940: PUSH
 941: LD_EXP 17
 945: PUSH
 946: LD_INT -2
 948: PUSH
 949: LD_INT -3
 951: PUSH
 952: LD_INT -5
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: PUSH
 962: LD_VAR 0 5
 966: ADD
 967: PUSH
 968: LD_INT -6
 970: PUSH
 971: LD_INT -4
 973: PUSH
 974: LD_EXP 26
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: LIST
 983: ADD
 984: PPUSH
 985: LD_INT 1
 987: PUSH
 988: LD_INT 4
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: LD_INT 1
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 3
1007: PUSH
1008: LD_INT 0
1010: PUSH
1011: LD_INT 5
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 4
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: LD_INT 3
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: LD_INT 5
1035: PUSH
1036: LD_INT 0
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 42
1058: ST_TO_ADDR
// others := tmp diff selected ;
1059: LD_ADDR_VAR 0 9
1063: PUSH
1064: LD_VAR 0 5
1068: PUSH
1069: LD_VAR 0 6
1073: DIFF
1074: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1075: LD_ADDR_VAR 0 9
1079: PUSH
1080: LD_VAR 0 5
1084: PUSH
1085: LD_EXP 18
1089: PUSH
1090: LD_EXP 19
1094: PUSH
1095: LD_EXP 20
1099: PUSH
1100: LD_EXP 21
1104: PUSH
1105: LD_EXP 22
1109: PUSH
1110: LD_EXP 23
1114: PUSH
1115: LD_EXP 24
1119: PUSH
1120: LD_EXP 25
1124: PUSH
1125: LD_EXP 27
1129: PUSH
1130: LD_EXP 28
1134: PUSH
1135: LD_EXP 29
1139: PUSH
1140: LD_EXP 30
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: LIST
1152: LIST
1153: LIST
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: DIFF
1159: ST_TO_ADDR
// if others then
1160: LD_VAR 0 9
1164: IFFALSE 1178
// SaveCharacters ( others , 11_others ) ;
1166: LD_VAR 0 9
1170: PPUSH
1171: LD_STRING 11_others
1173: PPUSH
1174: CALL_OW 38
// us_team := tmp ;
1178: LD_ADDR_EXP 31
1182: PUSH
1183: LD_VAR 0 5
1187: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1188: LD_ADDR_VAR 0 7
1192: PUSH
1193: LD_INT 3
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: LD_INT 4
1204: PUSH
1205: EMPTY
1206: LIST
1207: LIST
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 2
1213: PUSH
1214: LD_INT 2
1216: PUSH
1217: LD_INT 1
1219: PUSH
1220: LD_INT 5
1222: PUSH
1223: EMPTY
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 1
1234: PUSH
1235: LD_INT 1
1237: PUSH
1238: LD_INT 5
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 2
1249: PUSH
1250: LD_INT 1
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_INT 3
1267: PUSH
1268: LD_INT 2
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 7
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// for i in JMM ^ selected do
1290: LD_ADDR_VAR 0 2
1294: PUSH
1295: LD_EXP 17
1299: PUSH
1300: LD_VAR 0 6
1304: ADD
1305: PUSH
1306: FOR_IN
1307: IFFALSE 1496
// begin if GetClass ( i ) = 3 then
1309: LD_VAR 0 2
1313: PPUSH
1314: CALL_OW 257
1318: PUSH
1319: LD_INT 3
1321: EQUAL
1322: IFFALSE 1479
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1324: LD_ADDR_OWVAR 37
1328: PUSH
1329: LD_VAR 0 7
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PUSH
1338: LD_INT 1
1340: ARRAY
1341: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1342: LD_ADDR_OWVAR 39
1346: PUSH
1347: LD_VAR 0 7
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: PUSH
1356: LD_INT 2
1358: ARRAY
1359: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1360: LD_ADDR_OWVAR 38
1364: PUSH
1365: LD_VAR 0 7
1369: PUSH
1370: LD_INT 1
1372: ARRAY
1373: PUSH
1374: LD_INT 3
1376: ARRAY
1377: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1378: LD_ADDR_OWVAR 40
1382: PUSH
1383: LD_VAR 0 7
1387: PUSH
1388: LD_INT 1
1390: ARRAY
1391: PUSH
1392: LD_INT 4
1394: ARRAY
1395: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1396: LD_ADDR_VAR 0 7
1400: PUSH
1401: LD_VAR 0 7
1405: PPUSH
1406: LD_INT 1
1408: PPUSH
1409: CALL_OW 3
1413: ST_TO_ADDR
// veh := CreateVehicle ;
1414: LD_ADDR_VAR 0 8
1418: PUSH
1419: CALL_OW 45
1423: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1424: LD_VAR 0 8
1428: PPUSH
1429: LD_INT 8
1431: PPUSH
1432: LD_INT 0
1434: PPUSH
1435: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1439: LD_VAR 0 2
1443: PPUSH
1444: LD_VAR 0 8
1448: PPUSH
1449: CALL_OW 52
// if i = JMM then
1453: LD_VAR 0 2
1457: PUSH
1458: LD_EXP 17
1462: EQUAL
1463: IFFALSE 1477
// SetMark ( veh , 1 ) ;
1465: LD_VAR 0 8
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: CALL_OW 242
// end else
1477: GO 1494
// PlaceUnitArea ( i , am_hum_start , false ) ;
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_INT 9
1486: PPUSH
1487: LD_INT 0
1489: PPUSH
1490: CALL_OW 49
// end ;
1494: GO 1306
1496: POP
1497: POP
// vc_chassis := us_medium_tracked ;
1498: LD_ADDR_OWVAR 37
1502: PUSH
1503: LD_INT 3
1505: ST_TO_ADDR
// vc_engine := engine_solar ;
1506: LD_ADDR_OWVAR 39
1510: PUSH
1511: LD_INT 2
1513: ST_TO_ADDR
// vc_control := control_computer ;
1514: LD_ADDR_OWVAR 38
1518: PUSH
1519: LD_INT 3
1521: ST_TO_ADDR
// vc_weapon := us_radar ;
1522: LD_ADDR_OWVAR 40
1526: PUSH
1527: LD_INT 11
1529: ST_TO_ADDR
// veh := CreateVehicle ;
1530: LD_ADDR_VAR 0 8
1534: PUSH
1535: CALL_OW 45
1539: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1540: LD_VAR 0 8
1544: PPUSH
1545: LD_INT 87
1547: PPUSH
1548: LD_INT 142
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 48
// end ; end_of_file
1558: LD_VAR 0 1
1562: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
// if exist_mode then
1567: LD_VAR 0 2
1571: IFFALSE 1596
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1573: LD_ADDR_VAR 0 4
1577: PUSH
1578: LD_EXP 4
1582: PUSH
1583: LD_VAR 0 1
1587: STR
1588: PPUSH
1589: CALL_OW 34
1593: ST_TO_ADDR
1594: GO 1611
// unit := NewCharacter ( ident ) ;
1596: LD_ADDR_VAR 0 4
1600: PUSH
1601: LD_VAR 0 1
1605: PPUSH
1606: CALL_OW 25
1610: ST_TO_ADDR
// result := unit ;
1611: LD_ADDR_VAR 0 3
1615: PUSH
1616: LD_VAR 0 4
1620: ST_TO_ADDR
// end ;
1621: LD_VAR 0 3
1625: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
1626: LD_INT 0
1628: PPUSH
// vc_chassis := chassis ;
1629: LD_ADDR_OWVAR 37
1633: PUSH
1634: LD_VAR 0 1
1638: ST_TO_ADDR
// vc_engine := engine ;
1639: LD_ADDR_OWVAR 39
1643: PUSH
1644: LD_VAR 0 2
1648: ST_TO_ADDR
// vc_control := control ;
1649: LD_ADDR_OWVAR 38
1653: PUSH
1654: LD_VAR 0 3
1658: ST_TO_ADDR
// vc_weapon := weapon ;
1659: LD_ADDR_OWVAR 40
1663: PUSH
1664: LD_VAR 0 4
1668: ST_TO_ADDR
// vc_fuel_battery := fuel ;
1669: LD_ADDR_OWVAR 41
1673: PUSH
1674: LD_VAR 0 5
1678: ST_TO_ADDR
// end ;
1679: LD_VAR 0 6
1683: RET
// export function CanSayRand ( side ) ; begin
1684: LD_INT 0
1686: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
1687: LD_ADDR_VAR 0 2
1691: PUSH
1692: LD_INT 22
1694: PUSH
1695: LD_VAR 0 1
1699: PUSH
1700: EMPTY
1701: LIST
1702: LIST
1703: PUSH
1704: LD_INT 2
1706: PUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 1
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PUSH
1717: LD_INT 25
1719: PUSH
1720: LD_INT 2
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 25
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 25
1739: PUSH
1740: LD_INT 4
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: PUSH
1763: LD_EXP 17
1767: PUSH
1768: LD_EXP 18
1772: PUSH
1773: LD_EXP 19
1777: PUSH
1778: LD_EXP 20
1782: PUSH
1783: LD_EXP 21
1787: PUSH
1788: LD_EXP 22
1792: PUSH
1793: LD_EXP 23
1797: PUSH
1798: LD_EXP 24
1802: PUSH
1803: LD_EXP 25
1807: PUSH
1808: LD_EXP 26
1812: PUSH
1813: LD_EXP 27
1817: PUSH
1818: LD_EXP 28
1822: PUSH
1823: LD_EXP 30
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: LIST
1841: LIST
1842: DIFF
1843: ST_TO_ADDR
// end ;
1844: LD_VAR 0 2
1848: RET
// export function SayRand ( sex , dial ) ; begin
1849: LD_INT 0
1851: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
1852: LD_ADDR_VAR 0 3
1856: PUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: LD_INT 26
1869: PUSH
1870: LD_VAR 0 1
1874: PUSH
1875: EMPTY
1876: LIST
1877: LIST
1878: PUSH
1879: LD_INT 2
1881: PUSH
1882: LD_INT 25
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 25
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: EMPTY
1899: LIST
1900: LIST
1901: PUSH
1902: LD_INT 25
1904: PUSH
1905: LD_INT 3
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 25
1914: PUSH
1915: LD_INT 4
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: LIST
1928: PUSH
1929: EMPTY
1930: LIST
1931: LIST
1932: LIST
1933: PPUSH
1934: CALL_OW 69
1938: PUSH
1939: LD_EXP 17
1943: PUSH
1944: LD_EXP 18
1948: PUSH
1949: LD_EXP 19
1953: PUSH
1954: LD_EXP 20
1958: PUSH
1959: LD_EXP 21
1963: PUSH
1964: LD_EXP 22
1968: PUSH
1969: LD_EXP 23
1973: PUSH
1974: LD_EXP 24
1978: PUSH
1979: LD_EXP 25
1983: PUSH
1984: LD_EXP 26
1988: PUSH
1989: LD_EXP 27
1993: PUSH
1994: LD_EXP 28
1998: PUSH
1999: LD_EXP 30
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: LIST
2008: LIST
2009: LIST
2010: LIST
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: LIST
2018: DIFF
2019: ST_TO_ADDR
// if not result then
2020: LD_VAR 0 3
2024: NOT
2025: IFFALSE 2029
// exit ;
2027: GO 2057
// result := result [ 1 ] ;
2029: LD_ADDR_VAR 0 3
2033: PUSH
2034: LD_VAR 0 3
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: ST_TO_ADDR
// Say ( result , dial ) ;
2043: LD_VAR 0 3
2047: PPUSH
2048: LD_VAR 0 2
2052: PPUSH
2053: CALL_OW 88
// end ;
2057: LD_VAR 0 3
2061: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2062: LD_INT 0
2064: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 22
2072: PUSH
2073: LD_INT 1
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 26
2082: PUSH
2083: LD_VAR 0 1
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 2
2094: PUSH
2095: LD_INT 25
2097: PUSH
2098: LD_INT 1
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 25
2107: PUSH
2108: LD_INT 2
2110: PUSH
2111: EMPTY
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 25
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 25
2127: PUSH
2128: LD_INT 4
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: LIST
2146: PPUSH
2147: CALL_OW 69
2151: PUSH
2152: LD_EXP 17
2156: PUSH
2157: LD_EXP 18
2161: PUSH
2162: LD_EXP 19
2166: PUSH
2167: LD_EXP 20
2171: PUSH
2172: LD_EXP 21
2176: PUSH
2177: LD_EXP 22
2181: PUSH
2182: LD_EXP 23
2186: PUSH
2187: LD_EXP 24
2191: PUSH
2192: LD_EXP 25
2196: PUSH
2197: LD_EXP 26
2201: PUSH
2202: LD_EXP 27
2206: PUSH
2207: LD_EXP 28
2211: PUSH
2212: LD_EXP 30
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: LIST
2221: LIST
2222: LIST
2223: LIST
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: LIST
2231: PUSH
2232: LD_VAR 0 3
2236: ADD
2237: DIFF
2238: ST_TO_ADDR
// if not result then
2239: LD_VAR 0 4
2243: NOT
2244: IFFALSE 2248
// exit ;
2246: GO 2276
// result := result [ 1 ] ;
2248: LD_ADDR_VAR 0 4
2252: PUSH
2253: LD_VAR 0 4
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: ST_TO_ADDR
// Say ( result , dial ) ;
2262: LD_VAR 0 4
2266: PPUSH
2267: LD_VAR 0 2
2271: PPUSH
2272: CALL_OW 88
// end ;
2276: LD_VAR 0 4
2280: RET
// export function WantPlant ( unit ) ; var task ; begin
2281: LD_INT 0
2283: PPUSH
2284: PPUSH
// result := false ;
2285: LD_ADDR_VAR 0 2
2289: PUSH
2290: LD_INT 0
2292: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2293: LD_ADDR_VAR 0 3
2297: PUSH
2298: LD_VAR 0 1
2302: PPUSH
2303: CALL_OW 437
2307: ST_TO_ADDR
// if task then
2308: LD_VAR 0 3
2312: IFFALSE 2340
// if task [ 1 ] [ 1 ] = p then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 1
2321: ARRAY
2322: PUSH
2323: LD_INT 1
2325: ARRAY
2326: PUSH
2327: LD_STRING p
2329: EQUAL
2330: IFFALSE 2340
// result := true ;
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// end ;
2340: LD_VAR 0 2
2344: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2345: LD_INT 0
2347: PPUSH
2348: PPUSH
2349: PPUSH
2350: PPUSH
// if pos < 1 then
2351: LD_VAR 0 2
2355: PUSH
2356: LD_INT 1
2358: LESS
2359: IFFALSE 2363
// exit ;
2361: GO 2666
// if pos = 1 then
2363: LD_VAR 0 2
2367: PUSH
2368: LD_INT 1
2370: EQUAL
2371: IFFALSE 2404
// result := Replace ( arr , pos [ 1 ] , value ) else
2373: LD_ADDR_VAR 0 4
2377: PUSH
2378: LD_VAR 0 1
2382: PPUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 1
2390: ARRAY
2391: PPUSH
2392: LD_VAR 0 3
2396: PPUSH
2397: CALL_OW 1
2401: ST_TO_ADDR
2402: GO 2666
// begin tmp := arr ;
2404: LD_ADDR_VAR 0 6
2408: PUSH
2409: LD_VAR 0 1
2413: ST_TO_ADDR
// s_arr := [ tmp ] ;
2414: LD_ADDR_VAR 0 7
2418: PUSH
2419: LD_VAR 0 6
2423: PUSH
2424: EMPTY
2425: LIST
2426: ST_TO_ADDR
// for i = 1 to pos - 1 do
2427: LD_ADDR_VAR 0 5
2431: PUSH
2432: DOUBLE
2433: LD_INT 1
2435: DEC
2436: ST_TO_ADDR
2437: LD_VAR 0 2
2441: PUSH
2442: LD_INT 1
2444: MINUS
2445: PUSH
2446: FOR_TO
2447: IFFALSE 2492
// begin tmp := tmp [ pos [ i ] ] ;
2449: LD_ADDR_VAR 0 6
2453: PUSH
2454: LD_VAR 0 6
2458: PUSH
2459: LD_VAR 0 2
2463: PUSH
2464: LD_VAR 0 5
2468: ARRAY
2469: ARRAY
2470: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2471: LD_ADDR_VAR 0 7
2475: PUSH
2476: LD_VAR 0 7
2480: PUSH
2481: LD_VAR 0 6
2485: PUSH
2486: EMPTY
2487: LIST
2488: ADD
2489: ST_TO_ADDR
// end ;
2490: GO 2446
2492: POP
2493: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2494: LD_ADDR_VAR 0 6
2498: PUSH
2499: LD_VAR 0 6
2503: PPUSH
2504: LD_VAR 0 2
2508: PUSH
2509: LD_VAR 0 2
2513: ARRAY
2514: PPUSH
2515: LD_VAR 0 3
2519: PPUSH
2520: CALL_OW 1
2524: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2525: LD_ADDR_VAR 0 7
2529: PUSH
2530: LD_VAR 0 7
2534: PPUSH
2535: LD_VAR 0 7
2539: PPUSH
2540: LD_VAR 0 6
2544: PPUSH
2545: CALL_OW 1
2549: ST_TO_ADDR
// for i = s_arr downto 2 do
2550: LD_ADDR_VAR 0 5
2554: PUSH
2555: DOUBLE
2556: LD_VAR 0 7
2560: INC
2561: ST_TO_ADDR
2562: LD_INT 2
2564: PUSH
2565: FOR_DOWNTO
2566: IFFALSE 2650
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2568: LD_ADDR_VAR 0 6
2572: PUSH
2573: LD_VAR 0 7
2577: PUSH
2578: LD_VAR 0 5
2582: PUSH
2583: LD_INT 1
2585: MINUS
2586: ARRAY
2587: PPUSH
2588: LD_VAR 0 2
2592: PUSH
2593: LD_VAR 0 5
2597: PUSH
2598: LD_INT 1
2600: MINUS
2601: ARRAY
2602: PPUSH
2603: LD_VAR 0 7
2607: PUSH
2608: LD_VAR 0 5
2612: ARRAY
2613: PPUSH
2614: CALL_OW 1
2618: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
2619: LD_ADDR_VAR 0 7
2623: PUSH
2624: LD_VAR 0 7
2628: PPUSH
2629: LD_VAR 0 5
2633: PUSH
2634: LD_INT 1
2636: MINUS
2637: PPUSH
2638: LD_VAR 0 6
2642: PPUSH
2643: CALL_OW 1
2647: ST_TO_ADDR
// end ;
2648: GO 2565
2650: POP
2651: POP
// result := s_arr [ 1 ] ;
2652: LD_ADDR_VAR 0 4
2656: PUSH
2657: LD_VAR 0 7
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: ST_TO_ADDR
// end ; end ;
2666: LD_VAR 0 4
2670: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
2671: LD_INT 0
2673: PPUSH
2674: PPUSH
// if not list then
2675: LD_VAR 0 1
2679: NOT
2680: IFFALSE 2684
// exit ;
2682: GO 2775
// i := list [ pos1 ] ;
2684: LD_ADDR_VAR 0 5
2688: PUSH
2689: LD_VAR 0 1
2693: PUSH
2694: LD_VAR 0 2
2698: ARRAY
2699: ST_TO_ADDR
// if not i then
2700: LD_VAR 0 5
2704: NOT
2705: IFFALSE 2709
// exit ;
2707: GO 2775
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
2709: LD_ADDR_VAR 0 1
2713: PUSH
2714: LD_VAR 0 1
2718: PPUSH
2719: LD_VAR 0 2
2723: PPUSH
2724: LD_VAR 0 1
2728: PUSH
2729: LD_VAR 0 3
2733: ARRAY
2734: PPUSH
2735: CALL_OW 1
2739: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
2740: LD_ADDR_VAR 0 1
2744: PUSH
2745: LD_VAR 0 1
2749: PPUSH
2750: LD_VAR 0 3
2754: PPUSH
2755: LD_VAR 0 5
2759: PPUSH
2760: CALL_OW 1
2764: ST_TO_ADDR
// result := list ;
2765: LD_ADDR_VAR 0 4
2769: PUSH
2770: LD_VAR 0 1
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 4
2779: RET
// export function Add ( list , pos , val ) ; begin
2780: LD_INT 0
2782: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
2783: LD_ADDR_VAR 0 4
2787: PUSH
2788: LD_VAR 0 1
2792: PPUSH
2793: LD_VAR 0 2
2797: PPUSH
2798: LD_VAR 0 3
2802: PPUSH
2803: CALL 2345 0 3
2807: ST_TO_ADDR
2808: LD_VAR 0 4
2812: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
2813: LD_INT 0
2815: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
2816: LD_ADDR_VAR 0 5
2820: PUSH
2821: LD_VAR 0 1
2825: PPUSH
2826: CALL_OW 250
2830: PPUSH
2831: LD_VAR 0 1
2835: PPUSH
2836: CALL_OW 251
2840: PPUSH
2841: LD_VAR 0 2
2845: PPUSH
2846: LD_VAR 0 3
2850: PPUSH
2851: LD_VAR 0 4
2855: PPUSH
2856: CALL 2866 0 5
2860: ST_TO_ADDR
// end ;
2861: LD_VAR 0 5
2865: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
2866: LD_INT 0
2868: PPUSH
2869: PPUSH
2870: PPUSH
2871: PPUSH
// if not list then
2872: LD_VAR 0 3
2876: NOT
2877: IFFALSE 2881
// exit ;
2879: GO 3269
// result := [ ] ;
2881: LD_ADDR_VAR 0 6
2885: PUSH
2886: EMPTY
2887: ST_TO_ADDR
// for i in list do
2888: LD_ADDR_VAR 0 7
2892: PUSH
2893: LD_VAR 0 3
2897: PUSH
2898: FOR_IN
2899: IFFALSE 3101
// begin tmp := GetDistUnitXY ( i , x , y ) ;
2901: LD_ADDR_VAR 0 9
2905: PUSH
2906: LD_VAR 0 7
2910: PPUSH
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL_OW 297
2925: ST_TO_ADDR
// if not result then
2926: LD_VAR 0 6
2930: NOT
2931: IFFALSE 2957
// result := [ [ i , tmp ] ] else
2933: LD_ADDR_VAR 0 6
2937: PUSH
2938: LD_VAR 0 7
2942: PUSH
2943: LD_VAR 0 9
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PUSH
2952: EMPTY
2953: LIST
2954: ST_TO_ADDR
2955: GO 3099
// begin if result [ result ] [ 2 ] < tmp then
2957: LD_VAR 0 6
2961: PUSH
2962: LD_VAR 0 6
2966: ARRAY
2967: PUSH
2968: LD_INT 2
2970: ARRAY
2971: PUSH
2972: LD_VAR 0 9
2976: LESS
2977: IFFALSE 3019
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
2979: LD_ADDR_VAR 0 6
2983: PUSH
2984: LD_VAR 0 6
2988: PPUSH
2989: LD_VAR 0 6
2993: PUSH
2994: LD_INT 1
2996: PLUS
2997: PPUSH
2998: LD_VAR 0 7
3002: PUSH
3003: LD_VAR 0 9
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PPUSH
3012: CALL_OW 2
3016: ST_TO_ADDR
3017: GO 3099
// for j = 1 to result do
3019: LD_ADDR_VAR 0 8
3023: PUSH
3024: DOUBLE
3025: LD_INT 1
3027: DEC
3028: ST_TO_ADDR
3029: LD_VAR 0 6
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3097
// begin if tmp < result [ j ] [ 2 ] then
3037: LD_VAR 0 9
3041: PUSH
3042: LD_VAR 0 6
3046: PUSH
3047: LD_VAR 0 8
3051: ARRAY
3052: PUSH
3053: LD_INT 2
3055: ARRAY
3056: LESS
3057: IFFALSE 3095
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3059: LD_ADDR_VAR 0 6
3063: PUSH
3064: LD_VAR 0 6
3068: PPUSH
3069: LD_VAR 0 8
3073: PPUSH
3074: LD_VAR 0 7
3078: PUSH
3079: LD_VAR 0 9
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PPUSH
3088: CALL_OW 2
3092: ST_TO_ADDR
// break ;
3093: GO 3097
// end ; end ;
3095: GO 3034
3097: POP
3098: POP
// end ; end ;
3099: GO 2898
3101: POP
3102: POP
// if result and not asc then
3103: LD_VAR 0 6
3107: PUSH
3108: LD_VAR 0 4
3112: NOT
3113: AND
3114: IFFALSE 3189
// begin tmp := result ;
3116: LD_ADDR_VAR 0 9
3120: PUSH
3121: LD_VAR 0 6
3125: ST_TO_ADDR
// for i = tmp downto 1 do
3126: LD_ADDR_VAR 0 7
3130: PUSH
3131: DOUBLE
3132: LD_VAR 0 9
3136: INC
3137: ST_TO_ADDR
3138: LD_INT 1
3140: PUSH
3141: FOR_DOWNTO
3142: IFFALSE 3187
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3144: LD_ADDR_VAR 0 6
3148: PUSH
3149: LD_VAR 0 6
3153: PPUSH
3154: LD_VAR 0 9
3158: PUSH
3159: LD_VAR 0 7
3163: MINUS
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 9
3173: PUSH
3174: LD_VAR 0 7
3178: ARRAY
3179: PPUSH
3180: CALL_OW 1
3184: ST_TO_ADDR
3185: GO 3141
3187: POP
3188: POP
// end ; tmp := [ ] ;
3189: LD_ADDR_VAR 0 9
3193: PUSH
3194: EMPTY
3195: ST_TO_ADDR
// if mode then
3196: LD_VAR 0 5
3200: IFFALSE 3269
// begin for i = 1 to result do
3202: LD_ADDR_VAR 0 7
3206: PUSH
3207: DOUBLE
3208: LD_INT 1
3210: DEC
3211: ST_TO_ADDR
3212: LD_VAR 0 6
3216: PUSH
3217: FOR_TO
3218: IFFALSE 3257
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3220: LD_ADDR_VAR 0 9
3224: PUSH
3225: LD_VAR 0 9
3229: PPUSH
3230: LD_VAR 0 7
3234: PPUSH
3235: LD_VAR 0 6
3239: PUSH
3240: LD_VAR 0 7
3244: ARRAY
3245: PUSH
3246: LD_INT 1
3248: ARRAY
3249: PPUSH
3250: CALL_OW 1
3254: ST_TO_ADDR
3255: GO 3217
3257: POP
3258: POP
// result := tmp ;
3259: LD_ADDR_VAR 0 6
3263: PUSH
3264: LD_VAR 0 9
3268: ST_TO_ADDR
// end ; end ;
3269: LD_VAR 0 6
3273: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3274: LD_INT 0
3276: PPUSH
3277: PPUSH
3278: PPUSH
3279: PPUSH
3280: PPUSH
3281: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
3282: LD_ADDR_VAR 0 5
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: LD_INT 0
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: ST_TO_ADDR
// if not x or not y then
3305: LD_VAR 0 2
3309: NOT
3310: PUSH
3311: LD_VAR 0 3
3315: NOT
3316: OR
3317: IFFALSE 3321
// exit ;
3319: GO 4949
// if not range then
3321: LD_VAR 0 4
3325: NOT
3326: IFFALSE 3336
// range := 10 ;
3328: LD_ADDR_VAR 0 4
3332: PUSH
3333: LD_INT 10
3335: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3336: LD_ADDR_VAR 0 8
3340: PUSH
3341: LD_INT 81
3343: PUSH
3344: LD_VAR 0 1
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 92
3355: PUSH
3356: LD_VAR 0 2
3360: PUSH
3361: LD_VAR 0 3
3365: PUSH
3366: LD_VAR 0 4
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PPUSH
3381: CALL_OW 69
3385: ST_TO_ADDR
// if not tmp then
3386: LD_VAR 0 8
3390: NOT
3391: IFFALSE 3395
// exit ;
3393: GO 4949
// for i in tmp do
3395: LD_ADDR_VAR 0 6
3399: PUSH
3400: LD_VAR 0 8
3404: PUSH
3405: FOR_IN
3406: IFFALSE 4924
// begin points := [ 0 , 0 , 0 ] ;
3408: LD_ADDR_VAR 0 9
3412: PUSH
3413: LD_INT 0
3415: PUSH
3416: LD_INT 0
3418: PUSH
3419: LD_INT 0
3421: PUSH
3422: EMPTY
3423: LIST
3424: LIST
3425: LIST
3426: ST_TO_ADDR
// bpoints := 1 ;
3427: LD_ADDR_VAR 0 10
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3435: LD_VAR 0 6
3439: PPUSH
3440: CALL_OW 247
3444: PUSH
3445: LD_INT 1
3447: DOUBLE
3448: EQUAL
3449: IFTRUE 3453
3451: GO 4031
3453: POP
// begin if GetClass ( i ) = 1 then
3454: LD_VAR 0 6
3458: PPUSH
3459: CALL_OW 257
3463: PUSH
3464: LD_INT 1
3466: EQUAL
3467: IFFALSE 3488
// points := [ 10 , 5 , 3 ] ;
3469: LD_ADDR_VAR 0 9
3473: PUSH
3474: LD_INT 10
3476: PUSH
3477: LD_INT 5
3479: PUSH
3480: LD_INT 3
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: LIST
3487: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3488: LD_VAR 0 6
3492: PPUSH
3493: CALL_OW 257
3497: PUSH
3498: LD_INT 2
3500: PUSH
3501: LD_INT 3
3503: PUSH
3504: LD_INT 4
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: IN
3512: IFFALSE 3533
// points := [ 3 , 2 , 1 ] ;
3514: LD_ADDR_VAR 0 9
3518: PUSH
3519: LD_INT 3
3521: PUSH
3522: LD_INT 2
3524: PUSH
3525: LD_INT 1
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: LIST
3532: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3533: LD_VAR 0 6
3537: PPUSH
3538: CALL_OW 257
3542: PUSH
3543: LD_INT 5
3545: EQUAL
3546: IFFALSE 3567
// points := [ 130 , 5 , 2 ] ;
3548: LD_ADDR_VAR 0 9
3552: PUSH
3553: LD_INT 130
3555: PUSH
3556: LD_INT 5
3558: PUSH
3559: LD_INT 2
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3567: LD_VAR 0 6
3571: PPUSH
3572: CALL_OW 257
3576: PUSH
3577: LD_INT 8
3579: EQUAL
3580: IFFALSE 3601
// points := [ 35 , 35 , 30 ] ;
3582: LD_ADDR_VAR 0 9
3586: PUSH
3587: LD_INT 35
3589: PUSH
3590: LD_INT 35
3592: PUSH
3593: LD_INT 30
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: ST_TO_ADDR
// if GetClass ( i ) = 9 then
3601: LD_VAR 0 6
3605: PPUSH
3606: CALL_OW 257
3610: PUSH
3611: LD_INT 9
3613: EQUAL
3614: IFFALSE 3635
// points := [ 20 , 55 , 40 ] ;
3616: LD_ADDR_VAR 0 9
3620: PUSH
3621: LD_INT 20
3623: PUSH
3624: LD_INT 55
3626: PUSH
3627: LD_INT 40
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: LIST
3634: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
3635: LD_VAR 0 6
3639: PPUSH
3640: CALL_OW 257
3644: PUSH
3645: LD_INT 12
3647: PUSH
3648: LD_INT 16
3650: PUSH
3651: EMPTY
3652: LIST
3653: LIST
3654: IN
3655: IFFALSE 3676
// points := [ 5 , 3 , 2 ] ;
3657: LD_ADDR_VAR 0 9
3661: PUSH
3662: LD_INT 5
3664: PUSH
3665: LD_INT 3
3667: PUSH
3668: LD_INT 2
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: ST_TO_ADDR
// if GetClass ( i ) = 17 then
3676: LD_VAR 0 6
3680: PPUSH
3681: CALL_OW 257
3685: PUSH
3686: LD_INT 17
3688: EQUAL
3689: IFFALSE 3710
// points := [ 100 , 50 , 75 ] ;
3691: LD_ADDR_VAR 0 9
3695: PUSH
3696: LD_INT 100
3698: PUSH
3699: LD_INT 50
3701: PUSH
3702: LD_INT 75
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: LIST
3709: ST_TO_ADDR
// if GetClass ( i ) = 15 then
3710: LD_VAR 0 6
3714: PPUSH
3715: CALL_OW 257
3719: PUSH
3720: LD_INT 15
3722: EQUAL
3723: IFFALSE 3744
// points := [ 10 , 5 , 3 ] ;
3725: LD_ADDR_VAR 0 9
3729: PUSH
3730: LD_INT 10
3732: PUSH
3733: LD_INT 5
3735: PUSH
3736: LD_INT 3
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: ST_TO_ADDR
// if GetClass ( i ) = 14 then
3744: LD_VAR 0 6
3748: PPUSH
3749: CALL_OW 257
3753: PUSH
3754: LD_INT 14
3756: EQUAL
3757: IFFALSE 3778
// points := [ 10 , 0 , 0 ] ;
3759: LD_ADDR_VAR 0 9
3763: PUSH
3764: LD_INT 10
3766: PUSH
3767: LD_INT 0
3769: PUSH
3770: LD_INT 0
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: LIST
3777: ST_TO_ADDR
// if GetClass ( i ) = 11 then
3778: LD_VAR 0 6
3782: PPUSH
3783: CALL_OW 257
3787: PUSH
3788: LD_INT 11
3790: EQUAL
3791: IFFALSE 3812
// points := [ 30 , 10 , 5 ] ;
3793: LD_ADDR_VAR 0 9
3797: PUSH
3798: LD_INT 30
3800: PUSH
3801: LD_INT 10
3803: PUSH
3804: LD_INT 5
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: LIST
3811: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
3812: LD_VAR 0 1
3816: PPUSH
3817: LD_INT 5
3819: PPUSH
3820: CALL_OW 321
3824: PUSH
3825: LD_INT 2
3827: EQUAL
3828: IFFALSE 3845
// bpoints := bpoints * 1.8 ;
3830: LD_ADDR_VAR 0 10
3834: PUSH
3835: LD_VAR 0 10
3839: PUSH
3840: LD_REAL  1.80000000000000E+0000
3843: MUL
3844: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
3845: LD_VAR 0 6
3849: PPUSH
3850: CALL_OW 257
3854: PUSH
3855: LD_INT 1
3857: PUSH
3858: LD_INT 2
3860: PUSH
3861: LD_INT 3
3863: PUSH
3864: LD_INT 4
3866: PUSH
3867: EMPTY
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: IN
3873: PUSH
3874: LD_VAR 0 1
3878: PPUSH
3879: LD_INT 51
3881: PPUSH
3882: CALL_OW 321
3886: PUSH
3887: LD_INT 2
3889: EQUAL
3890: AND
3891: IFFALSE 3908
// bpoints := bpoints * 1.2 ;
3893: LD_ADDR_VAR 0 10
3897: PUSH
3898: LD_VAR 0 10
3902: PUSH
3903: LD_REAL  1.20000000000000E+0000
3906: MUL
3907: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
3908: LD_VAR 0 6
3912: PPUSH
3913: CALL_OW 257
3917: PUSH
3918: LD_INT 5
3920: PUSH
3921: LD_INT 7
3923: PUSH
3924: LD_INT 9
3926: PUSH
3927: EMPTY
3928: LIST
3929: LIST
3930: LIST
3931: IN
3932: PUSH
3933: LD_VAR 0 1
3937: PPUSH
3938: LD_INT 52
3940: PPUSH
3941: CALL_OW 321
3945: PUSH
3946: LD_INT 2
3948: EQUAL
3949: AND
3950: IFFALSE 3967
// bpoints := bpoints * 1.5 ;
3952: LD_ADDR_VAR 0 10
3956: PUSH
3957: LD_VAR 0 10
3961: PUSH
3962: LD_REAL  1.50000000000000E+0000
3965: MUL
3966: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
3967: LD_VAR 0 1
3971: PPUSH
3972: LD_INT 66
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: EQUAL
3983: IFFALSE 4000
// bpoints := bpoints * 1.1 ;
3985: LD_ADDR_VAR 0 10
3989: PUSH
3990: LD_VAR 0 10
3994: PUSH
3995: LD_REAL  1.10000000000000E+0000
3998: MUL
3999: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4000: LD_ADDR_VAR 0 10
4004: PUSH
4005: LD_VAR 0 10
4009: PUSH
4010: LD_VAR 0 6
4014: PPUSH
4015: LD_INT 1
4017: PPUSH
4018: CALL_OW 259
4022: PUSH
4023: LD_REAL  1.15000000000000E+0000
4026: MUL
4027: MUL
4028: ST_TO_ADDR
// end ; unit_vehicle :
4029: GO 4853
4031: LD_INT 2
4033: DOUBLE
4034: EQUAL
4035: IFTRUE 4039
4037: GO 4841
4039: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4040: LD_VAR 0 6
4044: PPUSH
4045: CALL_OW 264
4049: PUSH
4050: LD_INT 2
4052: PUSH
4053: LD_INT 42
4055: PUSH
4056: LD_INT 24
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: LIST
4063: IN
4064: IFFALSE 4085
// points := [ 25 , 5 , 3 ] ;
4066: LD_ADDR_VAR 0 9
4070: PUSH
4071: LD_INT 25
4073: PUSH
4074: LD_INT 5
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4085: LD_VAR 0 6
4089: PPUSH
4090: CALL_OW 264
4094: PUSH
4095: LD_INT 4
4097: PUSH
4098: LD_INT 43
4100: PUSH
4101: LD_INT 25
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: IN
4109: IFFALSE 4130
// points := [ 40 , 15 , 5 ] ;
4111: LD_ADDR_VAR 0 9
4115: PUSH
4116: LD_INT 40
4118: PUSH
4119: LD_INT 15
4121: PUSH
4122: LD_INT 5
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: LIST
4129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4130: LD_VAR 0 6
4134: PPUSH
4135: CALL_OW 264
4139: PUSH
4140: LD_INT 3
4142: PUSH
4143: LD_INT 23
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: IN
4150: IFFALSE 4171
// points := [ 7 , 25 , 8 ] ;
4152: LD_ADDR_VAR 0 9
4156: PUSH
4157: LD_INT 7
4159: PUSH
4160: LD_INT 25
4162: PUSH
4163: LD_INT 8
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: LIST
4170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4171: LD_VAR 0 6
4175: PPUSH
4176: CALL_OW 264
4180: PUSH
4181: LD_INT 5
4183: PUSH
4184: LD_INT 27
4186: PUSH
4187: LD_INT 44
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: LIST
4194: IN
4195: IFFALSE 4216
// points := [ 14 , 50 , 16 ] ;
4197: LD_ADDR_VAR 0 9
4201: PUSH
4202: LD_INT 14
4204: PUSH
4205: LD_INT 50
4207: PUSH
4208: LD_INT 16
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4216: LD_VAR 0 6
4220: PPUSH
4221: CALL_OW 264
4225: PUSH
4226: LD_INT 6
4228: PUSH
4229: LD_INT 46
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: IN
4236: IFFALSE 4257
// points := [ 32 , 120 , 70 ] ;
4238: LD_ADDR_VAR 0 9
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 120
4248: PUSH
4249: LD_INT 70
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4257: LD_VAR 0 6
4261: PPUSH
4262: CALL_OW 264
4266: PUSH
4267: LD_INT 7
4269: PUSH
4270: LD_INT 28
4272: PUSH
4273: LD_INT 45
4275: PUSH
4276: EMPTY
4277: LIST
4278: LIST
4279: LIST
4280: IN
4281: IFFALSE 4302
// points := [ 35 , 20 , 45 ] ;
4283: LD_ADDR_VAR 0 9
4287: PUSH
4288: LD_INT 35
4290: PUSH
4291: LD_INT 20
4293: PUSH
4294: LD_INT 45
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4302: LD_VAR 0 6
4306: PPUSH
4307: CALL_OW 264
4311: PUSH
4312: LD_INT 47
4314: PUSH
4315: EMPTY
4316: LIST
4317: IN
4318: IFFALSE 4339
// points := [ 67 , 45 , 75 ] ;
4320: LD_ADDR_VAR 0 9
4324: PUSH
4325: LD_INT 67
4327: PUSH
4328: LD_INT 45
4330: PUSH
4331: LD_INT 75
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4339: LD_VAR 0 6
4343: PPUSH
4344: CALL_OW 264
4348: PUSH
4349: LD_INT 26
4351: PUSH
4352: EMPTY
4353: LIST
4354: IN
4355: IFFALSE 4376
// points := [ 120 , 30 , 80 ] ;
4357: LD_ADDR_VAR 0 9
4361: PUSH
4362: LD_INT 120
4364: PUSH
4365: LD_INT 30
4367: PUSH
4368: LD_INT 80
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4376: LD_VAR 0 6
4380: PPUSH
4381: CALL_OW 264
4385: PUSH
4386: LD_INT 22
4388: PUSH
4389: EMPTY
4390: LIST
4391: IN
4392: IFFALSE 4413
// points := [ 40 , 1 , 1 ] ;
4394: LD_ADDR_VAR 0 9
4398: PUSH
4399: LD_INT 40
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: LD_INT 1
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4413: LD_VAR 0 6
4417: PPUSH
4418: CALL_OW 264
4422: PUSH
4423: LD_INT 29
4425: PUSH
4426: EMPTY
4427: LIST
4428: IN
4429: IFFALSE 4450
// points := [ 70 , 200 , 400 ] ;
4431: LD_ADDR_VAR 0 9
4435: PUSH
4436: LD_INT 70
4438: PUSH
4439: LD_INT 200
4441: PUSH
4442: LD_INT 400
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4450: LD_VAR 0 6
4454: PPUSH
4455: CALL_OW 264
4459: PUSH
4460: LD_INT 14
4462: PUSH
4463: LD_INT 53
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: IN
4470: IFFALSE 4491
// points := [ 40 , 10 , 20 ] ;
4472: LD_ADDR_VAR 0 9
4476: PUSH
4477: LD_INT 40
4479: PUSH
4480: LD_INT 10
4482: PUSH
4483: LD_INT 20
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4491: LD_VAR 0 6
4495: PPUSH
4496: CALL_OW 264
4500: PUSH
4501: LD_INT 9
4503: PUSH
4504: EMPTY
4505: LIST
4506: IN
4507: IFFALSE 4528
// points := [ 5 , 70 , 20 ] ;
4509: LD_ADDR_VAR 0 9
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: LD_INT 70
4519: PUSH
4520: LD_INT 20
4522: PUSH
4523: EMPTY
4524: LIST
4525: LIST
4526: LIST
4527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4528: LD_VAR 0 6
4532: PPUSH
4533: CALL_OW 264
4537: PUSH
4538: LD_INT 10
4540: PUSH
4541: EMPTY
4542: LIST
4543: IN
4544: IFFALSE 4565
// points := [ 35 , 110 , 70 ] ;
4546: LD_ADDR_VAR 0 9
4550: PUSH
4551: LD_INT 35
4553: PUSH
4554: LD_INT 110
4556: PUSH
4557: LD_INT 70
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4565: LD_VAR 0 6
4569: PPUSH
4570: CALL_OW 265
4574: PUSH
4575: LD_INT 25
4577: EQUAL
4578: IFFALSE 4599
// points := [ 80 , 65 , 100 ] ;
4580: LD_ADDR_VAR 0 9
4584: PUSH
4585: LD_INT 80
4587: PUSH
4588: LD_INT 65
4590: PUSH
4591: LD_INT 100
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: LIST
4598: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
4599: LD_VAR 0 6
4603: PPUSH
4604: CALL_OW 263
4608: PUSH
4609: LD_INT 1
4611: EQUAL
4612: IFFALSE 4647
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
4614: LD_ADDR_VAR 0 10
4618: PUSH
4619: LD_VAR 0 10
4623: PUSH
4624: LD_VAR 0 6
4628: PPUSH
4629: CALL_OW 311
4633: PPUSH
4634: LD_INT 3
4636: PPUSH
4637: CALL_OW 259
4641: PUSH
4642: LD_INT 4
4644: MUL
4645: MUL
4646: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
4647: LD_VAR 0 6
4651: PPUSH
4652: CALL_OW 263
4656: PUSH
4657: LD_INT 2
4659: EQUAL
4660: IFFALSE 4711
// begin j := IsControledBy ( i ) ;
4662: LD_ADDR_VAR 0 7
4666: PUSH
4667: LD_VAR 0 6
4671: PPUSH
4672: CALL_OW 312
4676: ST_TO_ADDR
// if j then
4677: LD_VAR 0 7
4681: IFFALSE 4711
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
4683: LD_ADDR_VAR 0 10
4687: PUSH
4688: LD_VAR 0 10
4692: PUSH
4693: LD_VAR 0 7
4697: PPUSH
4698: LD_INT 3
4700: PPUSH
4701: CALL_OW 259
4705: PUSH
4706: LD_INT 3
4708: MUL
4709: MUL
4710: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
4711: LD_VAR 0 6
4715: PPUSH
4716: CALL_OW 264
4720: PUSH
4721: LD_INT 5
4723: PUSH
4724: LD_INT 6
4726: PUSH
4727: LD_INT 46
4729: PUSH
4730: LD_INT 44
4732: PUSH
4733: LD_INT 47
4735: PUSH
4736: LD_INT 45
4738: PUSH
4739: LD_INT 28
4741: PUSH
4742: LD_INT 7
4744: PUSH
4745: LD_INT 27
4747: PUSH
4748: LD_INT 29
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: IN
4763: PUSH
4764: LD_VAR 0 1
4768: PPUSH
4769: LD_INT 52
4771: PPUSH
4772: CALL_OW 321
4776: PUSH
4777: LD_INT 2
4779: EQUAL
4780: AND
4781: IFFALSE 4798
// bpoints := bpoints * 1.2 ;
4783: LD_ADDR_VAR 0 10
4787: PUSH
4788: LD_VAR 0 10
4792: PUSH
4793: LD_REAL  1.20000000000000E+0000
4796: MUL
4797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
4798: LD_VAR 0 6
4802: PPUSH
4803: CALL_OW 264
4807: PUSH
4808: LD_INT 6
4810: PUSH
4811: LD_INT 46
4813: PUSH
4814: LD_INT 47
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: IN
4822: IFFALSE 4839
// bpoints := bpoints * 1.2 ;
4824: LD_ADDR_VAR 0 10
4828: PUSH
4829: LD_VAR 0 10
4833: PUSH
4834: LD_REAL  1.20000000000000E+0000
4837: MUL
4838: ST_TO_ADDR
// end ; unit_building :
4839: GO 4853
4841: LD_INT 3
4843: DOUBLE
4844: EQUAL
4845: IFTRUE 4849
4847: GO 4852
4849: POP
// ; end ;
4850: GO 4853
4852: POP
// for i = 1 to 3 do
4853: LD_ADDR_VAR 0 6
4857: PUSH
4858: DOUBLE
4859: LD_INT 1
4861: DEC
4862: ST_TO_ADDR
4863: LD_INT 3
4865: PUSH
4866: FOR_TO
4867: IFFALSE 4920
// result := Replace ( result , i , result [ i ] + ( points [ i ] * bpoints ) ) ;
4869: LD_ADDR_VAR 0 5
4873: PUSH
4874: LD_VAR 0 5
4878: PPUSH
4879: LD_VAR 0 6
4883: PPUSH
4884: LD_VAR 0 5
4888: PUSH
4889: LD_VAR 0 6
4893: ARRAY
4894: PUSH
4895: LD_VAR 0 9
4899: PUSH
4900: LD_VAR 0 6
4904: ARRAY
4905: PUSH
4906: LD_VAR 0 10
4910: MUL
4911: PLUS
4912: PPUSH
4913: CALL_OW 1
4917: ST_TO_ADDR
4918: GO 4866
4920: POP
4921: POP
// end ;
4922: GO 3405
4924: POP
4925: POP
// result := Replace ( result , 4 , tmp ) ;
4926: LD_ADDR_VAR 0 5
4930: PUSH
4931: LD_VAR 0 5
4935: PPUSH
4936: LD_INT 4
4938: PPUSH
4939: LD_VAR 0 8
4943: PPUSH
4944: CALL_OW 1
4948: ST_TO_ADDR
// end ;
4949: LD_VAR 0 5
4953: RET
// export function DangerAtRange ( unit , range ) ; begin
4954: LD_INT 0
4956: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
4957: LD_ADDR_VAR 0 3
4961: PUSH
4962: LD_VAR 0 1
4966: PPUSH
4967: CALL_OW 255
4971: PPUSH
4972: LD_VAR 0 1
4976: PPUSH
4977: CALL_OW 250
4981: PPUSH
4982: LD_VAR 0 1
4986: PPUSH
4987: CALL_OW 251
4991: PPUSH
4992: LD_VAR 0 2
4996: PPUSH
4997: CALL 3274 0 4
5001: ST_TO_ADDR
// end ;
5002: LD_VAR 0 3
5006: RET
// export function IsExtension ( b ) ; begin
5007: LD_INT 0
5009: PPUSH
// result := false ;
5010: LD_ADDR_VAR 0 2
5014: PUSH
5015: LD_INT 0
5017: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5018: LD_VAR 0 1
5022: PPUSH
5023: CALL_OW 266
5027: PUSH
5028: LD_INT 23
5030: PUSH
5031: LD_INT 20
5033: PUSH
5034: LD_INT 22
5036: PUSH
5037: LD_INT 17
5039: PUSH
5040: LD_INT 24
5042: PUSH
5043: LD_INT 21
5045: PUSH
5046: LD_INT 19
5048: PUSH
5049: LD_INT 16
5051: PUSH
5052: LD_INT 25
5054: PUSH
5055: LD_INT 18
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: LIST
5069: IN
5070: IFFALSE 5080
// result := true ;
5072: LD_ADDR_VAR 0 2
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// end ;
5080: LD_VAR 0 2
5084: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5085: LD_INT 0
5087: PPUSH
5088: PPUSH
5089: PPUSH
// result := [ ] ;
5090: LD_ADDR_VAR 0 2
5094: PUSH
5095: EMPTY
5096: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5097: LD_ADDR_VAR 0 3
5101: PUSH
5102: LD_INT 21
5104: PUSH
5105: LD_INT 3
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 69
5116: ST_TO_ADDR
// if not tmp then
5117: LD_VAR 0 3
5121: NOT
5122: IFFALSE 5126
// exit ;
5124: GO 5176
// for i in tmp do
5126: LD_ADDR_VAR 0 4
5130: PUSH
5131: LD_VAR 0 3
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5174
// if GetBase ( i ) = base then
5139: LD_VAR 0 4
5143: PPUSH
5144: CALL_OW 274
5148: PUSH
5149: LD_VAR 0 1
5153: EQUAL
5154: IFFALSE 5172
// result := result ^ i ;
5156: LD_ADDR_VAR 0 2
5160: PUSH
5161: LD_VAR 0 2
5165: PUSH
5166: LD_VAR 0 4
5170: ADD
5171: ST_TO_ADDR
5172: GO 5136
5174: POP
5175: POP
// end ;
5176: LD_VAR 0 2
5180: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5181: LD_INT 0
5183: PPUSH
5184: PPUSH
// if BuildingStatus ( b ) = bs_build then
5185: LD_VAR 0 2
5189: PPUSH
5190: CALL_OW 461
5194: PUSH
5195: LD_INT 1
5197: EQUAL
5198: IFFALSE 5258
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5200: LD_VAR 0 1
5204: PPUSH
5205: LD_STRING h
5207: PUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 250
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: CALL_OW 251
5227: PUSH
5228: LD_VAR 0 2
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: LD_INT 0
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: EMPTY
5252: LIST
5253: PPUSH
5254: CALL_OW 446
// end ;
5258: LD_VAR 0 3
5262: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5270: LD_VAR 0 1
5274: NOT
5275: PUSH
5276: LD_VAR 0 1
5280: PPUSH
5281: CALL_OW 263
5285: PUSH
5286: LD_INT 2
5288: EQUAL
5289: NOT
5290: OR
5291: IFFALSE 5295
// exit ;
5293: GO 5567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5295: LD_ADDR_VAR 0 6
5299: PUSH
5300: LD_INT 22
5302: PUSH
5303: LD_VAR 0 1
5307: PPUSH
5308: CALL_OW 255
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: PUSH
5317: LD_INT 2
5319: PUSH
5320: LD_INT 30
5322: PUSH
5323: LD_INT 36
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: LD_INT 34
5332: PUSH
5333: LD_INT 31
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PPUSH
5349: CALL_OW 69
5353: ST_TO_ADDR
// if not tmp then
5354: LD_VAR 0 6
5358: NOT
5359: IFFALSE 5363
// exit ;
5361: GO 5567
// result := [ ] ;
5363: LD_ADDR_VAR 0 2
5367: PUSH
5368: EMPTY
5369: ST_TO_ADDR
// for i in tmp do
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 6
5379: PUSH
5380: FOR_IN
5381: IFFALSE 5429
// begin t := UnitsInside ( i ) ;
5383: LD_ADDR_VAR 0 4
5387: PUSH
5388: LD_VAR 0 3
5392: PPUSH
5393: CALL_OW 313
5397: ST_TO_ADDR
// if t then
5398: LD_VAR 0 4
5402: IFFALSE 5427
// result := Insert ( result , 1 , t ) ;
5404: LD_ADDR_VAR 0 2
5408: PUSH
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_VAR 0 4
5421: PPUSH
5422: CALL_OW 2
5426: ST_TO_ADDR
// end ;
5427: GO 5380
5429: POP
5430: POP
// if not result then
5431: LD_VAR 0 2
5435: NOT
5436: IFFALSE 5440
// exit ;
5438: GO 5567
// mech := 0 ;
5440: LD_ADDR_VAR 0 5
5444: PUSH
5445: LD_INT 0
5447: ST_TO_ADDR
// for i in result do
5448: LD_ADDR_VAR 0 3
5452: PUSH
5453: LD_VAR 0 2
5457: PUSH
5458: FOR_IN
5459: IFFALSE 5541
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5461: LD_ADDR_VAR 0 4
5465: PUSH
5466: LD_VAR 0 3
5470: PPUSH
5471: LD_INT 3
5473: PPUSH
5474: CALL_OW 259
5478: PUSH
5479: LD_VAR 0 3
5483: PPUSH
5484: CALL_OW 432
5488: MINUS
5489: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5490: LD_VAR 0 4
5494: PUSH
5495: LD_VAR 0 5
5499: PUSH
5500: LD_INT 1
5502: ARRAY
5503: PPUSH
5504: LD_INT 3
5506: PPUSH
5507: CALL_OW 259
5511: PUSH
5512: LD_VAR 0 5
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: CALL_OW 432
5525: MINUS
5526: GREATEREQUAL
5527: IFFALSE 5539
// mech := i ;
5529: LD_ADDR_VAR 0 5
5533: PUSH
5534: LD_VAR 0 3
5538: ST_TO_ADDR
// end ;
5539: GO 5458
5541: POP
5542: POP
// if mech then
5543: LD_VAR 0 5
5547: IFFALSE 5567
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5549: LD_VAR 0 1
5553: PPUSH
5554: LD_VAR 0 5
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: CALL_OW 135
// end ;
5567: LD_VAR 0 2
5571: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , f , x , un , base , side , nation , buildings ; begin
5572: LD_INT 0
5574: PPUSH
5575: PPUSH
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// result := [ ] ;
5584: LD_ADDR_VAR 0 6
5588: PUSH
5589: EMPTY
5590: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
5591: LD_VAR 0 1
5595: PPUSH
5596: CALL_OW 266
5600: PUSH
5601: LD_INT 0
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: IN
5611: NOT
5612: IFFALSE 5616
// exit ;
5614: GO 6711
// if name then
5616: LD_VAR 0 2
5620: IFFALSE 5636
// SetBName ( base_dep , name ) ;
5622: LD_VAR 0 1
5626: PPUSH
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 500
// base := GetBase ( base_dep ) ;
5636: LD_ADDR_VAR 0 12
5640: PUSH
5641: LD_VAR 0 1
5645: PPUSH
5646: CALL_OW 274
5650: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
5651: LD_ADDR_VAR 0 13
5655: PUSH
5656: LD_VAR 0 1
5660: PPUSH
5661: CALL_OW 255
5665: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
5666: LD_ADDR_VAR 0 14
5670: PUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: CALL_OW 248
5680: ST_TO_ADDR
// if sources then
5681: LD_VAR 0 4
5685: IFFALSE 5732
// for i = 1 to 3 do
5687: LD_ADDR_VAR 0 7
5691: PUSH
5692: DOUBLE
5693: LD_INT 1
5695: DEC
5696: ST_TO_ADDR
5697: LD_INT 3
5699: PUSH
5700: FOR_TO
5701: IFFALSE 5730
// AddResourceType ( base , i , sources [ i ] ) ;
5703: LD_VAR 0 12
5707: PPUSH
5708: LD_VAR 0 7
5712: PPUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_VAR 0 7
5722: ARRAY
5723: PPUSH
5724: CALL_OW 276
5728: GO 5700
5730: POP
5731: POP
// buildings := GetBaseBuildings ( base ) ;
5732: LD_ADDR_VAR 0 15
5736: PUSH
5737: LD_VAR 0 12
5741: PPUSH
5742: CALL 5085 0 1
5746: ST_TO_ADDR
// InitHc ;
5747: CALL_OW 19
// InitUc ;
5751: CALL_OW 18
// uc_side := side ;
5755: LD_ADDR_OWVAR 20
5759: PUSH
5760: LD_VAR 0 13
5764: ST_TO_ADDR
// uc_nation := nation ;
5765: LD_ADDR_OWVAR 21
5769: PUSH
5770: LD_VAR 0 14
5774: ST_TO_ADDR
// if buildings then
5775: LD_VAR 0 15
5779: IFFALSE 6582
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
5781: LD_VAR 0 15
5785: PPUSH
5786: LD_INT 2
5788: PUSH
5789: LD_INT 30
5791: PUSH
5792: LD_INT 32
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 30
5801: PUSH
5802: LD_INT 33
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 72
5818: IFFALSE 5901
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
5820: LD_ADDR_VAR 0 7
5824: PUSH
5825: LD_VAR 0 15
5829: PPUSH
5830: LD_INT 2
5832: PUSH
5833: LD_INT 30
5835: PUSH
5836: LD_INT 32
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: PUSH
5843: LD_INT 30
5845: PUSH
5846: LD_INT 33
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: LIST
5857: PPUSH
5858: CALL_OW 72
5862: PUSH
5863: FOR_IN
5864: IFFALSE 5899
// if not GetBWeapon ( i ) then
5866: LD_VAR 0 7
5870: PPUSH
5871: CALL_OW 269
5875: NOT
5876: IFFALSE 5897
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
5878: LD_VAR 0 7
5882: PPUSH
5883: LD_VAR 0 7
5887: PPUSH
5888: CALL 6716 0 1
5892: PPUSH
5893: CALL_OW 431
5897: GO 5863
5899: POP
5900: POP
// end ; for i = 1 to personel do
5901: LD_ADDR_VAR 0 7
5905: PUSH
5906: DOUBLE
5907: LD_INT 1
5909: DEC
5910: ST_TO_ADDR
5911: LD_VAR 0 5
5915: PUSH
5916: FOR_TO
5917: IFFALSE 6562
// begin case i of 1 :
5919: LD_VAR 0 7
5923: PUSH
5924: LD_INT 1
5926: DOUBLE
5927: EQUAL
5928: IFTRUE 5932
5930: GO 6005
5932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
5933: LD_ADDR_VAR 0 9
5937: PUSH
5938: LD_VAR 0 15
5942: PPUSH
5943: LD_INT 22
5945: PUSH
5946: LD_VAR 0 13
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PUSH
5955: LD_INT 2
5957: PUSH
5958: LD_INT 30
5960: PUSH
5961: LD_INT 32
5963: PUSH
5964: EMPTY
5965: LIST
5966: LIST
5967: PUSH
5968: LD_INT 30
5970: PUSH
5971: LD_INT 4
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 30
5980: PUSH
5981: LD_INT 5
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PPUSH
5998: CALL_OW 72
6002: ST_TO_ADDR
6003: GO 6227
6005: LD_INT 2
6007: DOUBLE
6008: EQUAL
6009: IFTRUE 6013
6011: GO 6075
6013: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6014: LD_ADDR_VAR 0 9
6018: PUSH
6019: LD_VAR 0 15
6023: PPUSH
6024: LD_INT 22
6026: PUSH
6027: LD_VAR 0 13
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 2
6038: PUSH
6039: LD_INT 30
6041: PUSH
6042: LD_INT 0
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: LD_INT 30
6051: PUSH
6052: LD_INT 1
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PPUSH
6068: CALL_OW 72
6072: ST_TO_ADDR
6073: GO 6227
6075: LD_INT 3
6077: DOUBLE
6078: EQUAL
6079: IFTRUE 6083
6081: GO 6145
6083: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6084: LD_ADDR_VAR 0 9
6088: PUSH
6089: LD_VAR 0 15
6093: PPUSH
6094: LD_INT 22
6096: PUSH
6097: LD_VAR 0 13
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: LD_INT 30
6111: PUSH
6112: LD_INT 2
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PUSH
6119: LD_INT 30
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PPUSH
6138: CALL_OW 72
6142: ST_TO_ADDR
6143: GO 6227
6145: LD_INT 4
6147: DOUBLE
6148: EQUAL
6149: IFTRUE 6153
6151: GO 6226
6153: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6154: LD_ADDR_VAR 0 9
6158: PUSH
6159: LD_VAR 0 15
6163: PPUSH
6164: LD_INT 22
6166: PUSH
6167: LD_VAR 0 13
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: LD_INT 30
6181: PUSH
6182: LD_INT 6
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 30
6191: PUSH
6192: LD_INT 7
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 30
6201: PUSH
6202: LD_INT 8
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PPUSH
6219: CALL_OW 72
6223: ST_TO_ADDR
6224: GO 6227
6226: POP
// if not f then
6227: LD_VAR 0 9
6231: NOT
6232: IFFALSE 6236
// continue ;
6234: GO 5916
// x := personel [ i ] ;
6236: LD_ADDR_VAR 0 10
6240: PUSH
6241: LD_VAR 0 5
6245: PUSH
6246: LD_VAR 0 7
6250: ARRAY
6251: ST_TO_ADDR
// if x = - 1 then
6252: LD_VAR 0 10
6256: PUSH
6257: LD_INT 1
6259: NEG
6260: EQUAL
6261: IFFALSE 6383
// begin for j in f do
6263: LD_ADDR_VAR 0 8
6267: PUSH
6268: LD_VAR 0 9
6272: PUSH
6273: FOR_IN
6274: IFFALSE 6379
// repeat PrepareHuman ( false , i , skill ) ;
6276: LD_INT 0
6278: PPUSH
6279: LD_VAR 0 7
6283: PPUSH
6284: LD_VAR 0 3
6288: PPUSH
6289: CALL_OW 380
// un := CreateHuman ;
6293: LD_ADDR_VAR 0 11
6297: PUSH
6298: CALL_OW 44
6302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6303: LD_ADDR_VAR 0 6
6307: PUSH
6308: LD_VAR 0 6
6312: PPUSH
6313: LD_INT 1
6315: PPUSH
6316: LD_VAR 0 11
6320: PPUSH
6321: CALL_OW 2
6325: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6326: LD_VAR 0 11
6330: PPUSH
6331: LD_VAR 0 8
6335: PPUSH
6336: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6340: LD_VAR 0 8
6344: PPUSH
6345: CALL_OW 313
6349: PUSH
6350: LD_INT 6
6352: EQUAL
6353: PUSH
6354: LD_VAR 0 8
6358: PPUSH
6359: CALL_OW 266
6363: PUSH
6364: LD_INT 32
6366: PUSH
6367: LD_INT 31
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: IN
6374: OR
6375: IFFALSE 6276
6377: GO 6273
6379: POP
6380: POP
// end else
6381: GO 6560
// for j = 1 to x do
6383: LD_ADDR_VAR 0 8
6387: PUSH
6388: DOUBLE
6389: LD_INT 1
6391: DEC
6392: ST_TO_ADDR
6393: LD_VAR 0 10
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6558
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6401: LD_VAR 0 9
6405: PUSH
6406: LD_INT 1
6408: ARRAY
6409: PPUSH
6410: CALL_OW 313
6414: PUSH
6415: LD_VAR 0 9
6419: PUSH
6420: LD_INT 1
6422: ARRAY
6423: PPUSH
6424: CALL_OW 266
6428: PUSH
6429: LD_INT 32
6431: PUSH
6432: LD_INT 31
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: IN
6439: AND
6440: PUSH
6441: LD_VAR 0 9
6445: PUSH
6446: LD_INT 1
6448: ARRAY
6449: PPUSH
6450: CALL_OW 313
6454: PUSH
6455: LD_INT 6
6457: EQUAL
6458: OR
6459: IFFALSE 6479
// f := Delete ( f , 1 ) ;
6461: LD_ADDR_VAR 0 9
6465: PUSH
6466: LD_VAR 0 9
6470: PPUSH
6471: LD_INT 1
6473: PPUSH
6474: CALL_OW 3
6478: ST_TO_ADDR
// if not f then
6479: LD_VAR 0 9
6483: NOT
6484: IFFALSE 6488
// break ;
6486: GO 6558
// PrepareHuman ( false , i , skill ) ;
6488: LD_INT 0
6490: PPUSH
6491: LD_VAR 0 7
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 380
// un := CreateHuman ;
6505: LD_ADDR_VAR 0 11
6509: PUSH
6510: CALL_OW 44
6514: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6515: LD_ADDR_VAR 0 6
6519: PUSH
6520: LD_VAR 0 6
6524: PPUSH
6525: LD_INT 1
6527: PPUSH
6528: LD_VAR 0 11
6532: PPUSH
6533: CALL_OW 2
6537: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6538: LD_VAR 0 11
6542: PPUSH
6543: LD_VAR 0 9
6547: PUSH
6548: LD_INT 1
6550: ARRAY
6551: PPUSH
6552: CALL_OW 52
// end ;
6556: GO 6398
6558: POP
6559: POP
// end ;
6560: GO 5916
6562: POP
6563: POP
// result := result ^ buildings ;
6564: LD_ADDR_VAR 0 6
6568: PUSH
6569: LD_VAR 0 6
6573: PUSH
6574: LD_VAR 0 15
6578: ADD
6579: ST_TO_ADDR
// end else
6580: GO 6711
// begin for i = 1 to personel do
6582: LD_ADDR_VAR 0 7
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_VAR 0 5
6596: PUSH
6597: FOR_TO
6598: IFFALSE 6709
// begin x := personel [ i ] ;
6600: LD_ADDR_VAR 0 10
6604: PUSH
6605: LD_VAR 0 5
6609: PUSH
6610: LD_VAR 0 7
6614: ARRAY
6615: ST_TO_ADDR
// if x = - 1 then
6616: LD_VAR 0 10
6620: PUSH
6621: LD_INT 1
6623: NEG
6624: EQUAL
6625: IFFALSE 6629
// continue ;
6627: GO 6597
// PrepareHuman ( false , i , skill ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_VAR 0 7
6636: PPUSH
6637: LD_VAR 0 3
6641: PPUSH
6642: CALL_OW 380
// un := CreateHuman ;
6646: LD_ADDR_VAR 0 11
6650: PUSH
6651: CALL_OW 44
6655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
6656: LD_VAR 0 11
6660: PPUSH
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL_OW 250
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 251
6680: PPUSH
6681: LD_INT 10
6683: PPUSH
6684: LD_INT 0
6686: PPUSH
6687: CALL_OW 50
// result := result ^ un ;
6691: LD_ADDR_VAR 0 6
6695: PUSH
6696: LD_VAR 0 6
6700: PUSH
6701: LD_VAR 0 11
6705: ADD
6706: ST_TO_ADDR
// end ;
6707: GO 6597
6709: POP
6710: POP
// end ; end ;
6711: LD_VAR 0 6
6715: RET
// export function GetTurretWeapon ( tower ) ; var list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
6716: LD_INT 0
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
6722: PPUSH
6723: PPUSH
6724: PPUSH
6725: PPUSH
6726: PPUSH
6727: PPUSH
6728: PPUSH
6729: PPUSH
6730: PPUSH
6731: PPUSH
6732: PPUSH
// result := false ;
6733: LD_ADDR_VAR 0 2
6737: PUSH
6738: LD_INT 0
6740: ST_TO_ADDR
// if not tower then
6741: LD_VAR 0 1
6745: NOT
6746: IFFALSE 6750
// exit ;
6748: GO 7923
// nat := GetNation ( tower ) ;
6750: LD_ADDR_VAR 0 10
6754: PUSH
6755: LD_VAR 0 1
6759: PPUSH
6760: CALL_OW 248
6764: ST_TO_ADDR
// side := GetSide ( tower ) ;
6765: LD_ADDR_VAR 0 14
6769: PUSH
6770: LD_VAR 0 1
6774: PPUSH
6775: CALL_OW 255
6779: ST_TO_ADDR
// x := GetX ( tower ) ;
6780: LD_ADDR_VAR 0 8
6784: PUSH
6785: LD_VAR 0 1
6789: PPUSH
6790: CALL_OW 250
6794: ST_TO_ADDR
// y := GetY ( tower ) ;
6795: LD_ADDR_VAR 0 9
6799: PUSH
6800: LD_VAR 0 1
6804: PPUSH
6805: CALL_OW 251
6809: ST_TO_ADDR
// weapon := 0 ;
6810: LD_ADDR_VAR 0 16
6814: PUSH
6815: LD_INT 0
6817: ST_TO_ADDR
// fac_list := [ ] ;
6818: LD_ADDR_VAR 0 15
6822: PUSH
6823: EMPTY
6824: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
6825: LD_ADDR_VAR 0 4
6829: PUSH
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 274
6839: PPUSH
6840: CALL 5085 0 1
6844: PPUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 3
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 72
6859: ST_TO_ADDR
// if not factories then
6860: LD_VAR 0 4
6864: NOT
6865: IFFALSE 6869
// exit ;
6867: GO 7923
// for i in factories do
6869: LD_ADDR_VAR 0 6
6873: PUSH
6874: LD_VAR 0 4
6878: PUSH
6879: FOR_IN
6880: IFFALSE 6905
// fac_list := fac_list union AvailableWeaponList ( i ) ;
6882: LD_ADDR_VAR 0 15
6886: PUSH
6887: LD_VAR 0 15
6891: PUSH
6892: LD_VAR 0 6
6896: PPUSH
6897: CALL_OW 478
6901: UNION
6902: ST_TO_ADDR
6903: GO 6879
6905: POP
6906: POP
// if not fac_list then
6907: LD_VAR 0 15
6911: NOT
6912: IFFALSE 6916
// exit ;
6914: GO 7923
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
6916: LD_ADDR_VAR 0 3
6920: PUSH
6921: LD_INT 4
6923: PUSH
6924: LD_INT 5
6926: PUSH
6927: LD_INT 9
6929: PUSH
6930: LD_INT 10
6932: PUSH
6933: LD_INT 6
6935: PUSH
6936: LD_INT 7
6938: PUSH
6939: LD_INT 11
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 27
6953: PUSH
6954: LD_INT 28
6956: PUSH
6957: LD_INT 26
6959: PUSH
6960: LD_INT 30
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 43
6971: PUSH
6972: LD_INT 44
6974: PUSH
6975: LD_INT 46
6977: PUSH
6978: LD_INT 45
6980: PUSH
6981: LD_INT 47
6983: PUSH
6984: LD_INT 49
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_VAR 0 10
7004: ARRAY
7005: ST_TO_ADDR
// for i in list do
7006: LD_ADDR_VAR 0 6
7010: PUSH
7011: LD_VAR 0 3
7015: PUSH
7016: FOR_IN
7017: IFFALSE 7050
// if not i in fac_list then
7019: LD_VAR 0 6
7023: PUSH
7024: LD_VAR 0 15
7028: IN
7029: NOT
7030: IFFALSE 7048
// list := list diff i ;
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_VAR 0 3
7041: PUSH
7042: LD_VAR 0 6
7046: DIFF
7047: ST_TO_ADDR
7048: GO 7016
7050: POP
7051: POP
// if not list then
7052: LD_VAR 0 3
7056: NOT
7057: IFFALSE 7061
// exit ;
7059: GO 7923
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7061: LD_VAR 0 10
7065: PUSH
7066: LD_INT 3
7068: EQUAL
7069: PUSH
7070: LD_INT 49
7072: PUSH
7073: LD_VAR 0 3
7077: IN
7078: AND
7079: PUSH
7080: LD_INT 31
7082: PPUSH
7083: LD_VAR 0 14
7087: PPUSH
7088: CALL_OW 321
7092: PUSH
7093: LD_INT 2
7095: EQUAL
7096: AND
7097: IFFALSE 7157
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7099: LD_INT 22
7101: PUSH
7102: LD_VAR 0 14
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 35
7113: PUSH
7114: LD_INT 49
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 91
7123: PUSH
7124: LD_VAR 0 1
7128: PUSH
7129: LD_INT 10
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: LIST
7141: PPUSH
7142: CALL_OW 69
7146: NOT
7147: IFFALSE 7157
// weapon := ru_time_lapser ;
7149: LD_ADDR_VAR 0 16
7153: PUSH
7154: LD_INT 49
7156: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7157: LD_VAR 0 10
7161: PUSH
7162: LD_INT 1
7164: PUSH
7165: LD_INT 2
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: IN
7172: PUSH
7173: LD_INT 11
7175: PUSH
7176: LD_VAR 0 3
7180: IN
7181: PUSH
7182: LD_INT 30
7184: PUSH
7185: LD_VAR 0 3
7189: IN
7190: OR
7191: AND
7192: PUSH
7193: LD_INT 6
7195: PPUSH
7196: LD_VAR 0 14
7200: PPUSH
7201: CALL_OW 321
7205: PUSH
7206: LD_INT 2
7208: EQUAL
7209: AND
7210: IFFALSE 7375
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7212: LD_INT 22
7214: PUSH
7215: LD_VAR 0 14
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 2
7226: PUSH
7227: LD_INT 35
7229: PUSH
7230: LD_INT 11
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 35
7239: PUSH
7240: LD_INT 30
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 91
7254: PUSH
7255: LD_VAR 0 1
7259: PUSH
7260: LD_INT 15
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: NOT
7278: PUSH
7279: LD_INT 22
7281: PUSH
7282: LD_VAR 0 14
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 2
7293: PUSH
7294: LD_INT 30
7296: PUSH
7297: LD_INT 32
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 33
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: PUSH
7319: LD_INT 91
7321: PUSH
7322: LD_VAR 0 1
7326: PUSH
7327: LD_INT 12
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: LIST
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: PUSH
7348: LD_INT 1
7350: GREATER
7351: AND
7352: IFFALSE 7375
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7354: LD_ADDR_VAR 0 16
7358: PUSH
7359: LD_INT 11
7361: PUSH
7362: LD_INT 30
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: PUSH
7369: LD_VAR 0 10
7373: ARRAY
7374: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
7375: LD_VAR 0 16
7379: NOT
7380: PUSH
7381: LD_INT 40
7383: PPUSH
7384: LD_VAR 0 14
7388: PPUSH
7389: CALL_OW 321
7393: PUSH
7394: LD_INT 2
7396: EQUAL
7397: AND
7398: PUSH
7399: LD_INT 7
7401: PUSH
7402: LD_VAR 0 3
7406: IN
7407: PUSH
7408: LD_INT 28
7410: PUSH
7411: LD_VAR 0 3
7415: IN
7416: OR
7417: PUSH
7418: LD_INT 45
7420: PUSH
7421: LD_VAR 0 3
7425: IN
7426: OR
7427: AND
7428: IFFALSE 7638
// begin height := GetHexInfo ( x , y ) [ 2 ] ;
7430: LD_ADDR_VAR 0 13
7434: PUSH
7435: LD_VAR 0 8
7439: PPUSH
7440: LD_VAR 0 9
7444: PPUSH
7445: CALL_OW 546
7449: PUSH
7450: LD_INT 2
7452: ARRAY
7453: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
7454: LD_ADDR_VAR 0 12
7458: PUSH
7459: LD_INT 0
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: LD_INT 5
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: ST_TO_ADDR
// for i in tmp do
7477: LD_ADDR_VAR 0 6
7481: PUSH
7482: LD_VAR 0 12
7486: PUSH
7487: FOR_IN
7488: IFFALSE 7636
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
7490: LD_ADDR_VAR 0 7
7494: PUSH
7495: LD_VAR 0 8
7499: PPUSH
7500: LD_VAR 0 6
7504: PPUSH
7505: LD_INT 5
7507: PPUSH
7508: CALL_OW 272
7512: PUSH
7513: LD_VAR 0 9
7517: PPUSH
7518: LD_VAR 0 6
7522: PPUSH
7523: LD_INT 5
7525: PPUSH
7526: CALL_OW 273
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
7535: LD_VAR 0 7
7539: PUSH
7540: LD_INT 1
7542: ARRAY
7543: PPUSH
7544: LD_VAR 0 7
7548: PUSH
7549: LD_INT 2
7551: ARRAY
7552: PPUSH
7553: CALL_OW 488
7557: IFFALSE 7634
// begin h := GetHexInfo ( j [ 1 ] , j [ 2 ] ) [ 2 ] ;
7559: LD_ADDR_VAR 0 11
7563: PUSH
7564: LD_VAR 0 7
7568: PUSH
7569: LD_INT 1
7571: ARRAY
7572: PPUSH
7573: LD_VAR 0 7
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 546
7586: PUSH
7587: LD_INT 2
7589: ARRAY
7590: ST_TO_ADDR
// if h + 7 < height then
7591: LD_VAR 0 11
7595: PUSH
7596: LD_INT 7
7598: PLUS
7599: PUSH
7600: LD_VAR 0 13
7604: LESS
7605: IFFALSE 7634
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
7607: LD_ADDR_VAR 0 16
7611: PUSH
7612: LD_INT 7
7614: PUSH
7615: LD_INT 28
7617: PUSH
7618: LD_INT 45
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_VAR 0 10
7630: ARRAY
7631: ST_TO_ADDR
// break ;
7632: GO 7636
// end ; end ; end ;
7634: GO 7487
7636: POP
7637: POP
// end ; if not weapon then
7638: LD_VAR 0 16
7642: NOT
7643: IFFALSE 7805
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
7645: LD_ADDR_VAR 0 3
7649: PUSH
7650: LD_VAR 0 3
7654: PUSH
7655: LD_INT 11
7657: PUSH
7658: LD_INT 30
7660: PUSH
7661: LD_INT 49
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: DIFF
7669: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
7670: LD_ADDR_VAR 0 16
7674: PUSH
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 1
7682: PPUSH
7683: LD_VAR 0 3
7687: PPUSH
7688: CALL_OW 12
7692: ARRAY
7693: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
7694: LD_ADDR_VAR 0 12
7698: PUSH
7699: LD_INT 22
7701: PUSH
7702: LD_VAR 0 14
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 3
7713: PUSH
7714: LD_INT 35
7716: PUSH
7717: LD_INT 0
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 69
7736: ST_TO_ADDR
// for i in tmp do
7737: LD_ADDR_VAR 0 6
7741: PUSH
7742: LD_VAR 0 12
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7773
// list := list diff GetBWeapon ( i ) ;
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_VAR 0 3
7759: PUSH
7760: LD_VAR 0 6
7764: PPUSH
7765: CALL_OW 269
7769: DIFF
7770: ST_TO_ADDR
7771: GO 7747
7773: POP
7774: POP
// if list then
7775: LD_VAR 0 3
7779: IFFALSE 7805
// weapon := list [ rand ( 1 , list ) ] ;
7781: LD_ADDR_VAR 0 16
7785: PUSH
7786: LD_VAR 0 3
7790: PUSH
7791: LD_INT 1
7793: PPUSH
7794: LD_VAR 0 3
7798: PPUSH
7799: CALL_OW 12
7803: ARRAY
7804: ST_TO_ADDR
// end ; if weapon then
7805: LD_VAR 0 16
7809: IFFALSE 7923
// begin tmp := CostOfWeapon ( weapon ) ;
7811: LD_ADDR_VAR 0 12
7815: PUSH
7816: LD_VAR 0 16
7820: PPUSH
7821: CALL_OW 451
7825: ST_TO_ADDR
// j := GetBase ( tower ) ;
7826: LD_ADDR_VAR 0 7
7830: PUSH
7831: LD_VAR 0 1
7835: PPUSH
7836: CALL_OW 274
7840: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
7841: LD_VAR 0 7
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 275
7853: PUSH
7854: LD_VAR 0 12
7858: PUSH
7859: LD_INT 1
7861: ARRAY
7862: GREATEREQUAL
7863: PUSH
7864: LD_VAR 0 7
7868: PPUSH
7869: LD_INT 2
7871: PPUSH
7872: CALL_OW 275
7876: PUSH
7877: LD_VAR 0 12
7881: PUSH
7882: LD_INT 2
7884: ARRAY
7885: GREATEREQUAL
7886: AND
7887: PUSH
7888: LD_VAR 0 7
7892: PPUSH
7893: LD_INT 3
7895: PPUSH
7896: CALL_OW 275
7900: PUSH
7901: LD_VAR 0 12
7905: PUSH
7906: LD_INT 3
7908: ARRAY
7909: GREATEREQUAL
7910: AND
7911: IFFALSE 7923
// result := weapon ;
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_VAR 0 16
7922: ST_TO_ADDR
// end ; end ;
7923: LD_VAR 0 2
7927: RET
// export function Compare ( val1 , val2 ) ; begin
7928: LD_INT 0
7930: PPUSH
// if val1 = val2 then
7931: LD_VAR 0 1
7935: PUSH
7936: LD_VAR 0 2
7940: EQUAL
7941: IFFALSE 7953
// result := true else
7943: LD_ADDR_VAR 0 3
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
7951: GO 7961
// result := false ;
7953: LD_ADDR_VAR 0 3
7957: PUSH
7958: LD_INT 0
7960: ST_TO_ADDR
// end ;
7961: LD_VAR 0 3
7965: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
7966: LD_INT 0
7968: PPUSH
7969: PPUSH
// result := true ;
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if array1 = array2 then
7978: LD_VAR 0 1
7982: PUSH
7983: LD_VAR 0 2
7987: EQUAL
7988: IFFALSE 8053
// begin for i = 1 to array1 do
7990: LD_ADDR_VAR 0 4
7994: PUSH
7995: DOUBLE
7996: LD_INT 1
7998: DEC
7999: ST_TO_ADDR
8000: LD_VAR 0 1
8004: PUSH
8005: FOR_TO
8006: IFFALSE 8049
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8008: LD_VAR 0 1
8012: PUSH
8013: LD_VAR 0 4
8017: ARRAY
8018: PPUSH
8019: LD_VAR 0 2
8023: PUSH
8024: LD_VAR 0 4
8028: ARRAY
8029: PPUSH
8030: CALL 7928 0 2
8034: NOT
8035: IFFALSE 8047
// begin result := false ;
8037: LD_ADDR_VAR 0 3
8041: PUSH
8042: LD_INT 0
8044: ST_TO_ADDR
// break ;
8045: GO 8049
// end ;
8047: GO 8005
8049: POP
8050: POP
// end else
8051: GO 8061
// result := false ;
8053: LD_ADDR_VAR 0 3
8057: PUSH
8058: LD_INT 0
8060: ST_TO_ADDR
// end ;
8061: LD_VAR 0 3
8065: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// pom := GetBase ( fac ) ;
8071: LD_ADDR_VAR 0 5
8075: PUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 274
8085: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_VAR 0 2
8095: PUSH
8096: LD_INT 1
8098: ARRAY
8099: PPUSH
8100: LD_VAR 0 2
8104: PUSH
8105: LD_INT 2
8107: ARRAY
8108: PPUSH
8109: LD_VAR 0 2
8113: PUSH
8114: LD_INT 3
8116: ARRAY
8117: PPUSH
8118: LD_VAR 0 2
8122: PUSH
8123: LD_INT 4
8125: ARRAY
8126: PPUSH
8127: CALL_OW 449
8131: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8132: LD_VAR 0 5
8136: PPUSH
8137: LD_INT 1
8139: PPUSH
8140: CALL_OW 275
8144: PUSH
8145: LD_VAR 0 4
8149: PUSH
8150: LD_INT 1
8152: ARRAY
8153: GREATEREQUAL
8154: PUSH
8155: LD_VAR 0 5
8159: PPUSH
8160: LD_INT 2
8162: PPUSH
8163: CALL_OW 275
8167: PUSH
8168: LD_VAR 0 4
8172: PUSH
8173: LD_INT 2
8175: ARRAY
8176: GREATEREQUAL
8177: AND
8178: PUSH
8179: LD_VAR 0 5
8183: PPUSH
8184: LD_INT 3
8186: PPUSH
8187: CALL_OW 275
8191: PUSH
8192: LD_VAR 0 4
8196: PUSH
8197: LD_INT 3
8199: ARRAY
8200: GREATEREQUAL
8201: AND
8202: IFFALSE 8214
// result := true else
8204: LD_ADDR_VAR 0 3
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
8212: GO 8222
// result := false ;
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: LD_INT 0
8221: ST_TO_ADDR
// end ;
8222: LD_VAR 0 3
8226: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist ; begin
8227: LD_INT 0
8229: PPUSH
8230: PPUSH
8231: PPUSH
8232: PPUSH
8233: PPUSH
8234: PPUSH
8235: PPUSH
8236: PPUSH
// result := false ;
8237: LD_ADDR_VAR 0 6
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8245: LD_VAR 0 1
8249: NOT
8250: PUSH
8251: LD_VAR 0 2
8255: NOT
8256: OR
8257: PUSH
8258: LD_VAR 0 5
8262: PUSH
8263: LD_INT 0
8265: PUSH
8266: LD_INT 1
8268: PUSH
8269: LD_INT 2
8271: PUSH
8272: LD_INT 3
8274: PUSH
8275: LD_INT 4
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: IN
8289: NOT
8290: OR
8291: PUSH
8292: LD_VAR 0 3
8296: PPUSH
8297: LD_VAR 0 4
8301: PPUSH
8302: CALL_OW 488
8306: NOT
8307: OR
8308: IFFALSE 8312
// exit ;
8310: GO 8995
// pom := GetBase ( bdepot ) ;
8312: LD_ADDR_VAR 0 9
8316: PUSH
8317: LD_VAR 0 1
8321: PPUSH
8322: CALL_OW 274
8326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8327: LD_ADDR_VAR 0 10
8331: PUSH
8332: LD_VAR 0 2
8336: PPUSH
8337: LD_VAR 0 1
8341: PPUSH
8342: CALL_OW 248
8346: PPUSH
8347: CALL_OW 450
8351: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8352: LD_VAR 0 9
8356: PPUSH
8357: LD_INT 1
8359: PPUSH
8360: CALL_OW 275
8364: PUSH
8365: LD_VAR 0 10
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: GREATEREQUAL
8374: PUSH
8375: LD_VAR 0 9
8379: PPUSH
8380: LD_INT 2
8382: PPUSH
8383: CALL_OW 275
8387: PUSH
8388: LD_VAR 0 10
8392: PUSH
8393: LD_INT 2
8395: ARRAY
8396: GREATEREQUAL
8397: AND
8398: PUSH
8399: LD_VAR 0 9
8403: PPUSH
8404: LD_INT 3
8406: PPUSH
8407: CALL_OW 275
8411: PUSH
8412: LD_VAR 0 10
8416: PUSH
8417: LD_INT 3
8419: ARRAY
8420: GREATEREQUAL
8421: AND
8422: IFFALSE 8434
// result := true else
8424: LD_ADDR_VAR 0 6
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
8432: GO 8436
// exit ;
8434: GO 8995
// if GetBType ( bdepot ) = b_depot then
8436: LD_VAR 0 1
8440: PPUSH
8441: CALL_OW 266
8445: PUSH
8446: LD_INT 0
8448: EQUAL
8449: IFFALSE 8461
// dist := 28 else
8451: LD_ADDR_VAR 0 13
8455: PUSH
8456: LD_INT 28
8458: ST_TO_ADDR
8459: GO 8469
// dist := 36 ;
8461: LD_ADDR_VAR 0 13
8465: PUSH
8466: LD_INT 36
8468: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_VAR 0 3
8478: PPUSH
8479: LD_VAR 0 4
8483: PPUSH
8484: CALL_OW 297
8488: PUSH
8489: LD_VAR 0 13
8493: GREATER
8494: IFFALSE 8506
// begin result := false ;
8496: LD_ADDR_VAR 0 6
8500: PUSH
8501: LD_INT 0
8503: ST_TO_ADDR
// exit ;
8504: GO 8995
// end ; hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8506: LD_ADDR_VAR 0 11
8510: PUSH
8511: LD_VAR 0 2
8515: PPUSH
8516: LD_VAR 0 3
8520: PPUSH
8521: LD_VAR 0 4
8525: PPUSH
8526: LD_VAR 0 5
8530: PPUSH
8531: LD_VAR 0 1
8535: PPUSH
8536: CALL_OW 248
8540: PPUSH
8541: LD_INT 0
8543: PPUSH
8544: CALL 9000 0 6
8548: ST_TO_ADDR
// if not hexes then
8549: LD_VAR 0 11
8553: NOT
8554: IFFALSE 8566
// begin result := false ;
8556: LD_ADDR_VAR 0 6
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// exit ;
8564: GO 8995
// end ; height := GetHexInfo ( x , y ) [ 2 ] ;
8566: LD_ADDR_VAR 0 12
8570: PUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: LD_VAR 0 4
8580: PPUSH
8581: CALL_OW 546
8585: PUSH
8586: LD_INT 2
8588: ARRAY
8589: ST_TO_ADDR
// for i = 1 to hexes do
8590: LD_ADDR_VAR 0 7
8594: PUSH
8595: DOUBLE
8596: LD_INT 1
8598: DEC
8599: ST_TO_ADDR
8600: LD_VAR 0 11
8604: PUSH
8605: FOR_TO
8606: IFFALSE 8952
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
8608: LD_VAR 0 11
8612: PUSH
8613: LD_VAR 0 7
8617: ARRAY
8618: PUSH
8619: LD_INT 1
8621: ARRAY
8622: PPUSH
8623: LD_VAR 0 11
8627: PUSH
8628: LD_VAR 0 7
8632: ARRAY
8633: PUSH
8634: LD_INT 2
8636: ARRAY
8637: PPUSH
8638: CALL_OW 488
8642: NOT
8643: IFFALSE 8647
// continue ;
8645: GO 8605
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
8647: LD_ADDR_VAR 0 8
8651: PUSH
8652: LD_VAR 0 11
8656: PUSH
8657: LD_VAR 0 7
8661: ARRAY
8662: PUSH
8663: LD_INT 1
8665: ARRAY
8666: PPUSH
8667: LD_VAR 0 11
8671: PUSH
8672: LD_VAR 0 7
8676: ARRAY
8677: PUSH
8678: LD_INT 2
8680: ARRAY
8681: PPUSH
8682: CALL_OW 546
8686: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
8687: LD_VAR 0 8
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PUSH
8696: LD_VAR 0 8
8700: PUSH
8701: LD_INT 2
8703: ARRAY
8704: PUSH
8705: LD_VAR 0 12
8709: PUSH
8710: LD_INT 2
8712: PLUS
8713: GREATER
8714: OR
8715: PUSH
8716: LD_VAR 0 8
8720: PUSH
8721: LD_INT 2
8723: ARRAY
8724: PUSH
8725: LD_VAR 0 12
8729: PUSH
8730: LD_INT 2
8732: MINUS
8733: LESS
8734: OR
8735: PUSH
8736: LD_VAR 0 8
8740: PUSH
8741: LD_INT 3
8743: ARRAY
8744: PUSH
8745: LD_INT 0
8747: PUSH
8748: LD_INT 8
8750: PUSH
8751: LD_INT 9
8753: PUSH
8754: LD_INT 10
8756: PUSH
8757: LD_INT 11
8759: PUSH
8760: LD_INT 12
8762: PUSH
8763: LD_INT 13
8765: PUSH
8766: LD_INT 16
8768: PUSH
8769: LD_INT 17
8771: PUSH
8772: LD_INT 18
8774: PUSH
8775: LD_INT 19
8777: PUSH
8778: LD_INT 20
8780: PUSH
8781: LD_INT 21
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: IN
8799: NOT
8800: OR
8801: PUSH
8802: LD_VAR 0 8
8806: PUSH
8807: LD_INT 4
8809: ARRAY
8810: OR
8811: PUSH
8812: LD_VAR 0 8
8816: PUSH
8817: LD_INT 5
8819: ARRAY
8820: NOT
8821: OR
8822: PUSH
8823: LD_VAR 0 8
8827: PUSH
8828: LD_INT 6
8830: ARRAY
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: LD_INT 2
8837: PUSH
8838: LD_INT 7
8840: PUSH
8841: LD_INT 9
8843: PUSH
8844: LD_INT 10
8846: PUSH
8847: LD_INT 11
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: IN
8858: NOT
8859: OR
8860: PUSH
8861: LD_VAR 0 11
8865: PUSH
8866: LD_VAR 0 7
8870: ARRAY
8871: PUSH
8872: LD_INT 1
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 11
8880: PUSH
8881: LD_VAR 0 7
8885: ARRAY
8886: PUSH
8887: LD_INT 2
8889: ARRAY
8890: PPUSH
8891: CALL_OW 428
8895: PUSH
8896: LD_INT 0
8898: GREATER
8899: OR
8900: PUSH
8901: LD_VAR 0 11
8905: PUSH
8906: LD_VAR 0 7
8910: ARRAY
8911: PUSH
8912: LD_INT 1
8914: ARRAY
8915: PPUSH
8916: LD_VAR 0 11
8920: PUSH
8921: LD_VAR 0 7
8925: ARRAY
8926: PUSH
8927: LD_INT 2
8929: ARRAY
8930: PPUSH
8931: CALL_OW 351
8935: OR
8936: IFFALSE 8950
// begin result := false ;
8938: LD_ADDR_VAR 0 6
8942: PUSH
8943: LD_INT 0
8945: ST_TO_ADDR
// exit ;
8946: POP
8947: POP
8948: GO 8995
// end ; end ;
8950: GO 8605
8952: POP
8953: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
8954: LD_VAR 0 1
8958: PPUSH
8959: CALL_OW 255
8963: PPUSH
8964: LD_VAR 0 3
8968: PPUSH
8969: LD_VAR 0 4
8973: PPUSH
8974: LD_INT 20
8976: PPUSH
8977: CALL 3274 0 4
8981: PUSH
8982: LD_INT 4
8984: ARRAY
8985: IFFALSE 8995
// result := false ;
8987: LD_ADDR_VAR 0 6
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// end ;
8995: LD_VAR 0 6
8999: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9000: LD_INT 0
9002: PPUSH
9003: PPUSH
9004: PPUSH
9005: PPUSH
9006: PPUSH
9007: PPUSH
9008: PPUSH
9009: PPUSH
9010: PPUSH
9011: PPUSH
9012: PPUSH
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
9029: PPUSH
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
9046: PPUSH
9047: PPUSH
9048: PPUSH
9049: PPUSH
9050: PPUSH
9051: PPUSH
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
// result = [ ] ;
9060: LD_ADDR_VAR 0 7
9064: PUSH
9065: EMPTY
9066: ST_TO_ADDR
// temp_list = [ ] ;
9067: LD_ADDR_VAR 0 9
9071: PUSH
9072: EMPTY
9073: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9074: LD_VAR 0 4
9078: PUSH
9079: LD_INT 0
9081: PUSH
9082: LD_INT 1
9084: PUSH
9085: LD_INT 2
9087: PUSH
9088: LD_INT 3
9090: PUSH
9091: LD_INT 4
9093: PUSH
9094: LD_INT 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: IN
9105: NOT
9106: PUSH
9107: LD_VAR 0 1
9111: PUSH
9112: LD_INT 0
9114: PUSH
9115: LD_INT 1
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: IN
9122: PUSH
9123: LD_VAR 0 5
9127: PUSH
9128: LD_INT 1
9130: PUSH
9131: LD_INT 2
9133: PUSH
9134: LD_INT 3
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: IN
9142: NOT
9143: AND
9144: OR
9145: IFFALSE 9149
// exit ;
9147: GO 27534
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9149: LD_VAR 0 1
9153: PUSH
9154: LD_INT 6
9156: PUSH
9157: LD_INT 7
9159: PUSH
9160: LD_INT 8
9162: PUSH
9163: LD_INT 13
9165: PUSH
9166: LD_INT 12
9168: PUSH
9169: LD_INT 15
9171: PUSH
9172: LD_INT 11
9174: PUSH
9175: LD_INT 14
9177: PUSH
9178: LD_INT 10
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: IN
9192: IFFALSE 9202
// btype = b_lab ;
9194: LD_ADDR_VAR 0 1
9198: PUSH
9199: LD_INT 6
9201: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9202: LD_VAR 0 6
9206: PUSH
9207: LD_INT 0
9209: PUSH
9210: LD_INT 1
9212: PUSH
9213: LD_INT 2
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: IN
9221: NOT
9222: PUSH
9223: LD_VAR 0 1
9227: PUSH
9228: LD_INT 0
9230: PUSH
9231: LD_INT 1
9233: PUSH
9234: LD_INT 2
9236: PUSH
9237: LD_INT 3
9239: PUSH
9240: LD_INT 6
9242: PUSH
9243: LD_INT 36
9245: PUSH
9246: LD_INT 4
9248: PUSH
9249: LD_INT 5
9251: PUSH
9252: LD_INT 31
9254: PUSH
9255: LD_INT 32
9257: PUSH
9258: LD_INT 33
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: IN
9274: NOT
9275: PUSH
9276: LD_VAR 0 6
9280: PUSH
9281: LD_INT 1
9283: EQUAL
9284: AND
9285: OR
9286: PUSH
9287: LD_VAR 0 1
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: LD_INT 3
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: IN
9302: NOT
9303: PUSH
9304: LD_VAR 0 6
9308: PUSH
9309: LD_INT 2
9311: EQUAL
9312: AND
9313: OR
9314: IFFALSE 9324
// mode = 0 ;
9316: LD_ADDR_VAR 0 6
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// case mode of 0 :
9324: LD_VAR 0 6
9328: PUSH
9329: LD_INT 0
9331: DOUBLE
9332: EQUAL
9333: IFTRUE 9337
9335: GO 20790
9337: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9338: LD_ADDR_VAR 0 11
9342: PUSH
9343: LD_INT 0
9345: PUSH
9346: LD_INT 0
9348: PUSH
9349: EMPTY
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 0
9355: PUSH
9356: LD_INT 1
9358: NEG
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 1
9366: PUSH
9367: LD_INT 0
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: LD_INT 1
9376: PUSH
9377: LD_INT 1
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 0
9386: PUSH
9387: LD_INT 1
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 1
9396: NEG
9397: PUSH
9398: LD_INT 0
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PUSH
9405: LD_INT 1
9407: NEG
9408: PUSH
9409: LD_INT 1
9411: NEG
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: LD_INT 1
9419: NEG
9420: PUSH
9421: LD_INT 2
9423: NEG
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 0
9431: PUSH
9432: LD_INT 2
9434: NEG
9435: PUSH
9436: EMPTY
9437: LIST
9438: LIST
9439: PUSH
9440: LD_INT 1
9442: PUSH
9443: LD_INT 1
9445: NEG
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 0
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: LD_INT 1
9473: NEG
9474: PUSH
9475: LD_INT 1
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: LD_INT 1
9484: PUSH
9485: LD_INT 3
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PUSH
9492: LD_INT 0
9494: PUSH
9495: LD_INT 3
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 1
9504: NEG
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
9531: LD_ADDR_VAR 0 12
9535: PUSH
9536: LD_INT 0
9538: PUSH
9539: LD_INT 0
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 0
9548: PUSH
9549: LD_INT 1
9551: NEG
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 1
9559: PUSH
9560: LD_INT 0
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 0
9579: PUSH
9580: LD_INT 1
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 1
9589: NEG
9590: PUSH
9591: LD_INT 0
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 1
9600: NEG
9601: PUSH
9602: LD_INT 1
9604: NEG
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 1
9612: PUSH
9613: LD_INT 1
9615: NEG
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 0
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 2
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 1
9643: NEG
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 2
9654: NEG
9655: PUSH
9656: LD_INT 0
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 2
9665: NEG
9666: PUSH
9667: LD_INT 1
9669: NEG
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: LD_INT 2
9677: NEG
9678: PUSH
9679: LD_INT 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: LD_INT 3
9688: NEG
9689: PUSH
9690: LD_INT 0
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 3
9699: NEG
9700: PUSH
9701: LD_INT 1
9703: NEG
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
9727: LD_ADDR_VAR 0 13
9731: PUSH
9732: LD_INT 0
9734: PUSH
9735: LD_INT 0
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 0
9744: PUSH
9745: LD_INT 1
9747: NEG
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 1
9755: PUSH
9756: LD_INT 0
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 1
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 0
9775: PUSH
9776: LD_INT 1
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 1
9785: NEG
9786: PUSH
9787: LD_INT 0
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 1
9796: NEG
9797: PUSH
9798: LD_INT 1
9800: NEG
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: LD_INT 1
9808: NEG
9809: PUSH
9810: LD_INT 2
9812: NEG
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 2
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 2
9830: PUSH
9831: LD_INT 2
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 2
9850: NEG
9851: PUSH
9852: LD_INT 1
9854: NEG
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 2
9862: NEG
9863: PUSH
9864: LD_INT 2
9866: NEG
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 2
9874: NEG
9875: PUSH
9876: LD_INT 3
9878: NEG
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: LD_INT 3
9886: NEG
9887: PUSH
9888: LD_INT 2
9890: NEG
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 3
9898: NEG
9899: PUSH
9900: LD_INT 3
9902: NEG
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
9926: LD_ADDR_VAR 0 14
9930: PUSH
9931: LD_INT 0
9933: PUSH
9934: LD_INT 0
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: PUSH
9941: LD_INT 0
9943: PUSH
9944: LD_INT 1
9946: NEG
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 1
9954: PUSH
9955: LD_INT 0
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 1
9964: PUSH
9965: LD_INT 1
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: PUSH
9972: LD_INT 0
9974: PUSH
9975: LD_INT 1
9977: PUSH
9978: EMPTY
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 1
9984: NEG
9985: PUSH
9986: LD_INT 0
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 1
9995: NEG
9996: PUSH
9997: LD_INT 1
9999: NEG
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 1
10007: NEG
10008: PUSH
10009: LD_INT 2
10011: NEG
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 0
10019: PUSH
10020: LD_INT 2
10022: NEG
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 1
10030: PUSH
10031: LD_INT 1
10033: NEG
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PUSH
10049: LD_INT 0
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PUSH
10059: LD_INT 1
10061: NEG
10062: PUSH
10063: LD_INT 1
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 1
10072: NEG
10073: PUSH
10074: LD_INT 3
10076: NEG
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 0
10084: PUSH
10085: LD_INT 3
10087: NEG
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 1
10095: PUSH
10096: LD_INT 2
10098: NEG
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10122: LD_ADDR_VAR 0 15
10126: PUSH
10127: LD_INT 0
10129: PUSH
10130: LD_INT 0
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PUSH
10137: LD_INT 0
10139: PUSH
10140: LD_INT 1
10142: NEG
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: LD_INT 0
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: LD_INT 1
10160: PUSH
10161: LD_INT 1
10163: PUSH
10164: EMPTY
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 0
10170: PUSH
10171: LD_INT 1
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: LD_INT 1
10180: NEG
10181: PUSH
10182: LD_INT 0
10184: PUSH
10185: EMPTY
10186: LIST
10187: LIST
10188: PUSH
10189: LD_INT 1
10191: NEG
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: LD_INT 1
10206: NEG
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 2
10214: PUSH
10215: LD_INT 0
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 2
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 1
10234: NEG
10235: PUSH
10236: LD_INT 1
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: LD_INT 2
10245: NEG
10246: PUSH
10247: LD_INT 0
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 2
10256: NEG
10257: PUSH
10258: LD_INT 1
10260: NEG
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: PUSH
10266: LD_INT 2
10268: PUSH
10269: LD_INT 1
10271: NEG
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 3
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 3
10289: PUSH
10290: LD_INT 1
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10315: LD_ADDR_VAR 0 16
10319: PUSH
10320: LD_INT 0
10322: PUSH
10323: LD_INT 0
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 0
10332: PUSH
10333: LD_INT 1
10335: NEG
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 0
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 0
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 1
10373: NEG
10374: PUSH
10375: LD_INT 0
10377: PUSH
10378: EMPTY
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 1
10384: NEG
10385: PUSH
10386: LD_INT 1
10388: NEG
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 1
10396: NEG
10397: PUSH
10398: LD_INT 2
10400: NEG
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 2
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 2
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: LD_INT 2
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 2
10438: NEG
10439: PUSH
10440: LD_INT 1
10442: NEG
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 2
10450: NEG
10451: PUSH
10452: LD_INT 2
10454: NEG
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 3
10462: PUSH
10463: LD_INT 2
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 3
10472: PUSH
10473: LD_INT 3
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 3
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10508: LD_ADDR_VAR 0 17
10512: PUSH
10513: LD_INT 0
10515: PUSH
10516: LD_INT 0
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 0
10525: PUSH
10526: LD_INT 1
10528: NEG
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 1
10536: PUSH
10537: LD_INT 0
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 1
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 0
10556: PUSH
10557: LD_INT 1
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 1
10566: NEG
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 1
10577: NEG
10578: PUSH
10579: LD_INT 1
10581: NEG
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 1
10589: NEG
10590: PUSH
10591: LD_INT 2
10593: NEG
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 0
10601: PUSH
10602: LD_INT 2
10604: NEG
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 1
10612: PUSH
10613: LD_INT 1
10615: NEG
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: LD_INT 0
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 2
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 0
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: LD_INT 1
10673: NEG
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 2
10684: NEG
10685: PUSH
10686: LD_INT 0
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 2
10695: NEG
10696: PUSH
10697: LD_INT 1
10699: NEG
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 2
10707: NEG
10708: PUSH
10709: LD_INT 2
10711: NEG
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10738: LD_ADDR_VAR 0 18
10742: PUSH
10743: LD_INT 0
10745: PUSH
10746: LD_INT 0
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 0
10755: PUSH
10756: LD_INT 1
10758: NEG
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 1
10766: PUSH
10767: LD_INT 0
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PUSH
10784: LD_INT 0
10786: PUSH
10787: LD_INT 1
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 1
10796: NEG
10797: PUSH
10798: LD_INT 0
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 1
10807: NEG
10808: PUSH
10809: LD_INT 1
10811: NEG
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 1
10819: NEG
10820: PUSH
10821: LD_INT 2
10823: NEG
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 0
10831: PUSH
10832: LD_INT 2
10834: NEG
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: LD_INT 1
10842: PUSH
10843: LD_INT 1
10845: NEG
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: LD_INT 2
10853: PUSH
10854: LD_INT 0
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 2
10863: PUSH
10864: LD_INT 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PUSH
10871: LD_INT 2
10873: PUSH
10874: LD_INT 2
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: LD_INT 2
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 0
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 1
10903: NEG
10904: PUSH
10905: LD_INT 1
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: NEG
10915: PUSH
10916: LD_INT 0
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 2
10925: NEG
10926: PUSH
10927: LD_INT 1
10929: NEG
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 2
10937: NEG
10938: PUSH
10939: LD_INT 2
10941: NEG
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10968: LD_ADDR_VAR 0 19
10972: PUSH
10973: LD_INT 0
10975: PUSH
10976: LD_INT 0
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: PUSH
10983: LD_INT 0
10985: PUSH
10986: LD_INT 1
10988: NEG
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 1
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 1
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 0
11016: PUSH
11017: LD_INT 1
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 1
11026: NEG
11027: PUSH
11028: LD_INT 0
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 1
11037: NEG
11038: PUSH
11039: LD_INT 1
11041: NEG
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 1
11049: NEG
11050: PUSH
11051: LD_INT 2
11053: NEG
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 0
11061: PUSH
11062: LD_INT 2
11064: NEG
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: LD_INT 1
11075: NEG
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 2
11083: PUSH
11084: LD_INT 0
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: LD_INT 1
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 2
11103: PUSH
11104: LD_INT 2
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 1
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 0
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 1
11133: NEG
11134: PUSH
11135: LD_INT 1
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 2
11144: NEG
11145: PUSH
11146: LD_INT 0
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PUSH
11153: LD_INT 2
11155: NEG
11156: PUSH
11157: LD_INT 1
11159: NEG
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 2
11167: NEG
11168: PUSH
11169: LD_INT 2
11171: NEG
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11198: LD_ADDR_VAR 0 20
11202: PUSH
11203: LD_INT 0
11205: PUSH
11206: LD_INT 0
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 0
11215: PUSH
11216: LD_INT 1
11218: NEG
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: LD_INT 0
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 1
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 0
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 1
11256: NEG
11257: PUSH
11258: LD_INT 0
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 1
11267: NEG
11268: PUSH
11269: LD_INT 1
11271: NEG
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: LD_INT 1
11279: NEG
11280: PUSH
11281: LD_INT 2
11283: NEG
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: PUSH
11289: LD_INT 0
11291: PUSH
11292: LD_INT 2
11294: NEG
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 1
11302: PUSH
11303: LD_INT 1
11305: NEG
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 0
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 1
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 2
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: LD_INT 0
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: PUSH
11361: LD_INT 1
11363: NEG
11364: PUSH
11365: LD_INT 1
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: NEG
11375: PUSH
11376: LD_INT 0
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 2
11385: NEG
11386: PUSH
11387: LD_INT 1
11389: NEG
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 2
11397: NEG
11398: PUSH
11399: LD_INT 2
11401: NEG
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11428: LD_ADDR_VAR 0 21
11432: PUSH
11433: LD_INT 0
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 0
11445: PUSH
11446: LD_INT 1
11448: NEG
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 1
11456: PUSH
11457: LD_INT 0
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 1
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 0
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 1
11486: NEG
11487: PUSH
11488: LD_INT 0
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 1
11497: NEG
11498: PUSH
11499: LD_INT 1
11501: NEG
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 1
11509: NEG
11510: PUSH
11511: LD_INT 2
11513: NEG
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 0
11521: PUSH
11522: LD_INT 2
11524: NEG
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 1
11532: PUSH
11533: LD_INT 1
11535: NEG
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 2
11543: PUSH
11544: LD_INT 0
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 2
11553: PUSH
11554: LD_INT 1
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 1
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 0
11583: PUSH
11584: LD_INT 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 1
11593: NEG
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 2
11604: NEG
11605: PUSH
11606: LD_INT 0
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 2
11615: NEG
11616: PUSH
11617: LD_INT 1
11619: NEG
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 2
11627: NEG
11628: PUSH
11629: LD_INT 2
11631: NEG
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11658: LD_ADDR_VAR 0 22
11662: PUSH
11663: LD_INT 0
11665: PUSH
11666: LD_INT 0
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 0
11675: PUSH
11676: LD_INT 1
11678: NEG
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: LD_INT 0
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PUSH
11704: LD_INT 0
11706: PUSH
11707: LD_INT 1
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 1
11716: NEG
11717: PUSH
11718: LD_INT 0
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 1
11727: NEG
11728: PUSH
11729: LD_INT 1
11731: NEG
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 1
11739: NEG
11740: PUSH
11741: LD_INT 2
11743: NEG
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 0
11751: PUSH
11752: LD_INT 2
11754: NEG
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 1
11762: PUSH
11763: LD_INT 1
11765: NEG
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 2
11773: PUSH
11774: LD_INT 0
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 2
11783: PUSH
11784: LD_INT 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 2
11793: PUSH
11794: LD_INT 2
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 1
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 0
11813: PUSH
11814: LD_INT 2
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 1
11823: NEG
11824: PUSH
11825: LD_INT 1
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 2
11834: NEG
11835: PUSH
11836: LD_INT 0
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: PUSH
11843: LD_INT 2
11845: NEG
11846: PUSH
11847: LD_INT 1
11849: NEG
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: LD_INT 2
11857: NEG
11858: PUSH
11859: LD_INT 2
11861: NEG
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
11888: LD_ADDR_VAR 0 23
11892: PUSH
11893: LD_INT 0
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 0
11905: PUSH
11906: LD_INT 1
11908: NEG
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: LD_INT 0
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: LD_INT 1
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 0
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 1
11946: NEG
11947: PUSH
11948: LD_INT 0
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 1
11957: NEG
11958: PUSH
11959: LD_INT 1
11961: NEG
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: PUSH
11967: LD_INT 1
11969: NEG
11970: PUSH
11971: LD_INT 2
11973: NEG
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 0
11981: PUSH
11982: LD_INT 2
11984: NEG
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PUSH
11990: LD_INT 1
11992: PUSH
11993: LD_INT 1
11995: NEG
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: LD_INT 0
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: LD_INT 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 2
12023: PUSH
12024: LD_INT 2
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 1
12033: PUSH
12034: LD_INT 2
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: LD_INT 0
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 1
12053: NEG
12054: PUSH
12055: LD_INT 1
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 2
12064: NEG
12065: PUSH
12066: LD_INT 0
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PUSH
12073: LD_INT 2
12075: NEG
12076: PUSH
12077: LD_INT 1
12079: NEG
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 2
12087: NEG
12088: PUSH
12089: LD_INT 2
12091: NEG
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 2
12099: NEG
12100: PUSH
12101: LD_INT 3
12103: NEG
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 1
12111: NEG
12112: PUSH
12113: LD_INT 3
12115: NEG
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 1
12123: PUSH
12124: LD_INT 2
12126: NEG
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 2
12134: PUSH
12135: LD_INT 1
12137: NEG
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12168: LD_ADDR_VAR 0 24
12172: PUSH
12173: LD_INT 0
12175: PUSH
12176: LD_INT 0
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 0
12185: PUSH
12186: LD_INT 1
12188: NEG
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: LD_INT 0
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: LD_INT 1
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 0
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 1
12226: NEG
12227: PUSH
12228: LD_INT 0
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 1
12237: NEG
12238: PUSH
12239: LD_INT 1
12241: NEG
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 1
12249: NEG
12250: PUSH
12251: LD_INT 2
12253: NEG
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 0
12261: PUSH
12262: LD_INT 2
12264: NEG
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: LD_INT 1
12275: NEG
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: PUSH
12281: LD_INT 2
12283: PUSH
12284: LD_INT 0
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 2
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 1
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 0
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 1
12333: NEG
12334: PUSH
12335: LD_INT 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 2
12344: NEG
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 2
12355: NEG
12356: PUSH
12357: LD_INT 1
12359: NEG
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 2
12367: NEG
12368: PUSH
12369: LD_INT 2
12371: NEG
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 1
12379: PUSH
12380: LD_INT 2
12382: NEG
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: LD_INT 1
12393: NEG
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 3
12401: PUSH
12402: LD_INT 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 3
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12444: LD_ADDR_VAR 0 25
12448: PUSH
12449: LD_INT 0
12451: PUSH
12452: LD_INT 0
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 0
12461: PUSH
12462: LD_INT 1
12464: NEG
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 1
12472: PUSH
12473: LD_INT 0
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 1
12482: PUSH
12483: LD_INT 1
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 0
12492: PUSH
12493: LD_INT 1
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 1
12502: NEG
12503: PUSH
12504: LD_INT 0
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 1
12513: NEG
12514: PUSH
12515: LD_INT 1
12517: NEG
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 1
12525: NEG
12526: PUSH
12527: LD_INT 2
12529: NEG
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: LD_INT 2
12540: NEG
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 1
12548: PUSH
12549: LD_INT 1
12551: NEG
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: LD_INT 0
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: LD_INT 2
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PUSH
12587: LD_INT 1
12589: PUSH
12590: LD_INT 2
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 1
12609: NEG
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 2
12620: NEG
12621: PUSH
12622: LD_INT 0
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 2
12631: NEG
12632: PUSH
12633: LD_INT 1
12635: NEG
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 2
12643: NEG
12644: PUSH
12645: LD_INT 2
12647: NEG
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 3
12655: PUSH
12656: LD_INT 1
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 3
12665: PUSH
12666: LD_INT 2
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: PUSH
12673: LD_INT 2
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: PUSH
12683: LD_INT 1
12685: PUSH
12686: LD_INT 3
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
12718: LD_ADDR_VAR 0 26
12722: PUSH
12723: LD_INT 0
12725: PUSH
12726: LD_INT 0
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 0
12735: PUSH
12736: LD_INT 1
12738: NEG
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 1
12746: PUSH
12747: LD_INT 0
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 0
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 1
12776: NEG
12777: PUSH
12778: LD_INT 0
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 1
12787: NEG
12788: PUSH
12789: LD_INT 1
12791: NEG
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 1
12799: NEG
12800: PUSH
12801: LD_INT 2
12803: NEG
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 0
12811: PUSH
12812: LD_INT 2
12814: NEG
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: LD_INT 1
12825: NEG
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: LD_INT 0
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 1
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: LD_INT 2
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 1
12863: PUSH
12864: LD_INT 2
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 0
12873: PUSH
12874: LD_INT 2
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 1
12883: NEG
12884: PUSH
12885: LD_INT 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 2
12894: NEG
12895: PUSH
12896: LD_INT 0
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 2
12905: NEG
12906: PUSH
12907: LD_INT 1
12909: NEG
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 2
12917: NEG
12918: PUSH
12919: LD_INT 2
12921: NEG
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 1
12949: NEG
12950: PUSH
12951: LD_INT 2
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 2
12960: NEG
12961: PUSH
12962: LD_INT 1
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
12994: LD_ADDR_VAR 0 27
12998: PUSH
12999: LD_INT 0
13001: PUSH
13002: LD_INT 0
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: LD_INT 1
13014: NEG
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 1
13022: PUSH
13023: LD_INT 0
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: LD_INT 1
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 0
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 1
13052: NEG
13053: PUSH
13054: LD_INT 0
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 1
13063: NEG
13064: PUSH
13065: LD_INT 1
13067: NEG
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 1
13075: NEG
13076: PUSH
13077: LD_INT 2
13079: NEG
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 0
13087: PUSH
13088: LD_INT 2
13090: NEG
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 1
13098: PUSH
13099: LD_INT 1
13101: NEG
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: PUSH
13107: LD_INT 2
13109: PUSH
13110: LD_INT 0
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 2
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: LD_INT 2
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 0
13149: PUSH
13150: LD_INT 2
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 1
13159: NEG
13160: PUSH
13161: LD_INT 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 2
13170: NEG
13171: PUSH
13172: LD_INT 0
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 2
13181: NEG
13182: PUSH
13183: LD_INT 1
13185: NEG
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 2
13193: NEG
13194: PUSH
13195: LD_INT 2
13197: NEG
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 1
13205: NEG
13206: PUSH
13207: LD_INT 2
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 2
13216: NEG
13217: PUSH
13218: LD_INT 1
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 3
13227: NEG
13228: PUSH
13229: LD_INT 1
13231: NEG
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 3
13239: NEG
13240: PUSH
13241: LD_INT 2
13243: NEG
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13274: LD_ADDR_VAR 0 28
13278: PUSH
13279: LD_INT 0
13281: PUSH
13282: LD_INT 0
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 0
13291: PUSH
13292: LD_INT 1
13294: NEG
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 1
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 1
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 0
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 1
13332: NEG
13333: PUSH
13334: LD_INT 0
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 1
13343: NEG
13344: PUSH
13345: LD_INT 1
13347: NEG
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 1
13355: NEG
13356: PUSH
13357: LD_INT 2
13359: NEG
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 0
13367: PUSH
13368: LD_INT 2
13370: NEG
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 1
13378: PUSH
13379: LD_INT 1
13381: NEG
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 2
13389: PUSH
13390: LD_INT 0
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: LD_INT 1
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: LD_INT 2
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: LD_INT 0
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 1
13439: NEG
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 2
13450: NEG
13451: PUSH
13452: LD_INT 0
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 2
13461: NEG
13462: PUSH
13463: LD_INT 1
13465: NEG
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 2
13473: NEG
13474: PUSH
13475: LD_INT 2
13477: NEG
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 2
13485: NEG
13486: PUSH
13487: LD_INT 3
13489: NEG
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 1
13497: NEG
13498: PUSH
13499: LD_INT 3
13501: NEG
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: LD_INT 3
13509: NEG
13510: PUSH
13511: LD_INT 1
13513: NEG
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 3
13521: NEG
13522: PUSH
13523: LD_INT 2
13525: NEG
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13556: LD_ADDR_VAR 0 29
13560: PUSH
13561: LD_INT 0
13563: PUSH
13564: LD_INT 0
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 0
13573: PUSH
13574: LD_INT 1
13576: NEG
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 1
13584: PUSH
13585: LD_INT 0
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 1
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 0
13604: PUSH
13605: LD_INT 1
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 1
13614: NEG
13615: PUSH
13616: LD_INT 0
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 1
13625: NEG
13626: PUSH
13627: LD_INT 1
13629: NEG
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 1
13637: NEG
13638: PUSH
13639: LD_INT 2
13641: NEG
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 0
13649: PUSH
13650: LD_INT 2
13652: NEG
13653: PUSH
13654: EMPTY
13655: LIST
13656: LIST
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: LD_INT 1
13663: NEG
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 2
13671: PUSH
13672: LD_INT 0
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: PUSH
13679: LD_INT 2
13681: PUSH
13682: LD_INT 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 1
13691: PUSH
13692: LD_INT 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 0
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 1
13711: NEG
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 2
13722: NEG
13723: PUSH
13724: LD_INT 1
13726: NEG
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 2
13734: NEG
13735: PUSH
13736: LD_INT 2
13738: NEG
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 2
13746: NEG
13747: PUSH
13748: LD_INT 3
13750: NEG
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 2
13758: PUSH
13759: LD_INT 1
13761: NEG
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: LD_INT 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 1
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 1
13789: NEG
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 3
13800: NEG
13801: PUSH
13802: LD_INT 2
13804: NEG
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
13835: LD_ADDR_VAR 0 30
13839: PUSH
13840: LD_INT 0
13842: PUSH
13843: LD_INT 0
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 0
13852: PUSH
13853: LD_INT 1
13855: NEG
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: LD_INT 0
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 1
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 0
13883: PUSH
13884: LD_INT 1
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 1
13893: NEG
13894: PUSH
13895: LD_INT 0
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 1
13904: NEG
13905: PUSH
13906: LD_INT 1
13908: NEG
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 1
13916: NEG
13917: PUSH
13918: LD_INT 2
13920: NEG
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 0
13928: PUSH
13929: LD_INT 2
13931: NEG
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: LD_INT 1
13942: NEG
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: LD_INT 0
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: LD_INT 1
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 2
13970: PUSH
13971: LD_INT 2
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 1
13990: NEG
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 2
14001: NEG
14002: PUSH
14003: LD_INT 0
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 2
14012: NEG
14013: PUSH
14014: LD_INT 1
14016: NEG
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 1
14024: NEG
14025: PUSH
14026: LD_INT 3
14028: NEG
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: LD_INT 2
14039: NEG
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 3
14047: PUSH
14048: LD_INT 2
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 2
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 2
14067: NEG
14068: PUSH
14069: LD_INT 1
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: LD_INT 3
14078: NEG
14079: PUSH
14080: LD_INT 1
14082: NEG
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14113: LD_ADDR_VAR 0 31
14117: PUSH
14118: LD_INT 0
14120: PUSH
14121: LD_INT 0
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 0
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 1
14141: PUSH
14142: LD_INT 0
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 1
14151: PUSH
14152: LD_INT 1
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 0
14161: PUSH
14162: LD_INT 1
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 1
14171: NEG
14172: PUSH
14173: LD_INT 0
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 1
14182: NEG
14183: PUSH
14184: LD_INT 1
14186: NEG
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: LD_INT 1
14194: NEG
14195: PUSH
14196: LD_INT 2
14198: NEG
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 1
14206: PUSH
14207: LD_INT 1
14209: NEG
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 2
14217: PUSH
14218: LD_INT 0
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 2
14227: PUSH
14228: LD_INT 1
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: LD_INT 2
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: LD_INT 2
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 0
14257: PUSH
14258: LD_INT 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 1
14267: NEG
14268: PUSH
14269: LD_INT 1
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 2
14278: NEG
14279: PUSH
14280: LD_INT 1
14282: NEG
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 2
14290: NEG
14291: PUSH
14292: LD_INT 2
14294: NEG
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 2
14302: NEG
14303: PUSH
14304: LD_INT 3
14306: NEG
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 1
14317: NEG
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: LD_INT 3
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 1
14345: NEG
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 3
14356: NEG
14357: PUSH
14358: LD_INT 2
14360: NEG
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14391: LD_ADDR_VAR 0 32
14395: PUSH
14396: LD_INT 0
14398: PUSH
14399: LD_INT 0
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: LD_INT 1
14411: NEG
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 1
14419: PUSH
14420: LD_INT 0
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 0
14439: PUSH
14440: LD_INT 1
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 1
14449: NEG
14450: PUSH
14451: LD_INT 0
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 1
14460: NEG
14461: PUSH
14462: LD_INT 1
14464: NEG
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 1
14472: NEG
14473: PUSH
14474: LD_INT 2
14476: NEG
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 0
14484: PUSH
14485: LD_INT 2
14487: NEG
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 1
14495: PUSH
14496: LD_INT 1
14498: NEG
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 2
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: LD_INT 2
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 1
14526: PUSH
14527: LD_INT 2
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 0
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PUSH
14544: LD_INT 1
14546: NEG
14547: PUSH
14548: LD_INT 1
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 2
14557: NEG
14558: PUSH
14559: LD_INT 0
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 2
14568: NEG
14569: PUSH
14570: LD_INT 1
14572: NEG
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 1
14580: NEG
14581: PUSH
14582: LD_INT 3
14584: NEG
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 1
14592: PUSH
14593: LD_INT 2
14595: NEG
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: PUSH
14601: LD_INT 3
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: LD_INT 3
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 2
14623: NEG
14624: PUSH
14625: LD_INT 1
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 3
14634: NEG
14635: PUSH
14636: LD_INT 1
14638: NEG
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14669: LD_ADDR_VAR 0 33
14673: PUSH
14674: LD_INT 0
14676: PUSH
14677: LD_INT 0
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 0
14686: PUSH
14687: LD_INT 1
14689: NEG
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 1
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: LD_INT 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 0
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 1
14727: NEG
14728: PUSH
14729: LD_INT 0
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PUSH
14736: LD_INT 1
14738: NEG
14739: PUSH
14740: LD_INT 1
14742: NEG
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 1
14750: NEG
14751: PUSH
14752: LD_INT 2
14754: NEG
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 1
14762: PUSH
14763: LD_INT 1
14765: NEG
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 2
14773: PUSH
14774: LD_INT 0
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 2
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 0
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 1
14813: NEG
14814: PUSH
14815: LD_INT 1
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 2
14824: NEG
14825: PUSH
14826: LD_INT 0
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: NEG
14836: PUSH
14837: LD_INT 1
14839: NEG
14840: PUSH
14841: EMPTY
14842: LIST
14843: LIST
14844: PUSH
14845: LD_INT 2
14847: NEG
14848: PUSH
14849: LD_INT 2
14851: NEG
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: LD_INT 2
14859: NEG
14860: PUSH
14861: LD_INT 3
14863: NEG
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: LD_INT 1
14874: NEG
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 3
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: LD_INT 3
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PUSH
14900: LD_INT 1
14902: NEG
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: NEG
14914: PUSH
14915: LD_INT 2
14917: NEG
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14948: LD_ADDR_VAR 0 34
14952: PUSH
14953: LD_INT 0
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 0
14965: PUSH
14966: LD_INT 1
14968: NEG
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: LD_INT 0
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 1
14986: PUSH
14987: LD_INT 1
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: LD_INT 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 1
15006: NEG
15007: PUSH
15008: LD_INT 0
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 1
15021: NEG
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 1
15029: NEG
15030: PUSH
15031: LD_INT 2
15033: NEG
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 0
15041: PUSH
15042: LD_INT 2
15044: NEG
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 1
15052: PUSH
15053: LD_INT 1
15055: NEG
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 2
15063: PUSH
15064: LD_INT 1
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 2
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 1
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: LD_INT 1
15093: NEG
15094: PUSH
15095: LD_INT 1
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 2
15104: NEG
15105: PUSH
15106: LD_INT 0
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: PUSH
15113: LD_INT 2
15115: NEG
15116: PUSH
15117: LD_INT 1
15119: NEG
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 2
15127: NEG
15128: PUSH
15129: LD_INT 2
15131: NEG
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 1
15139: NEG
15140: PUSH
15141: LD_INT 3
15143: NEG
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 1
15151: PUSH
15152: LD_INT 2
15154: NEG
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 3
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 2
15172: PUSH
15173: LD_INT 3
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 2
15182: NEG
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 3
15193: NEG
15194: PUSH
15195: LD_INT 1
15197: NEG
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15228: LD_ADDR_VAR 0 35
15232: PUSH
15233: LD_INT 0
15235: PUSH
15236: LD_INT 0
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 0
15245: PUSH
15246: LD_INT 1
15248: NEG
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 1
15256: PUSH
15257: LD_INT 0
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 1
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 0
15276: PUSH
15277: LD_INT 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 1
15286: NEG
15287: PUSH
15288: LD_INT 0
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: LD_INT 1
15297: NEG
15298: PUSH
15299: LD_INT 1
15301: NEG
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 2
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 2
15319: NEG
15320: PUSH
15321: LD_INT 1
15323: NEG
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15340: LD_ADDR_VAR 0 36
15344: PUSH
15345: LD_INT 0
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: LD_INT 1
15360: NEG
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 1
15368: PUSH
15369: LD_INT 0
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 1
15378: PUSH
15379: LD_INT 1
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PUSH
15386: LD_INT 0
15388: PUSH
15389: LD_INT 1
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: PUSH
15396: LD_INT 1
15398: NEG
15399: PUSH
15400: LD_INT 0
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 1
15409: NEG
15410: PUSH
15411: LD_INT 1
15413: NEG
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 1
15421: NEG
15422: PUSH
15423: LD_INT 2
15425: NEG
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 1
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15452: LD_ADDR_VAR 0 37
15456: PUSH
15457: LD_INT 0
15459: PUSH
15460: LD_INT 0
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 0
15469: PUSH
15470: LD_INT 1
15472: NEG
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: LD_INT 1
15480: PUSH
15481: LD_INT 0
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 1
15490: PUSH
15491: LD_INT 1
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 0
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 1
15510: NEG
15511: PUSH
15512: LD_INT 0
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 1
15521: NEG
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 1
15533: PUSH
15534: LD_INT 1
15536: NEG
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15564: LD_ADDR_VAR 0 38
15568: PUSH
15569: LD_INT 0
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: LD_INT 1
15584: NEG
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 1
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 0
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 1
15622: NEG
15623: PUSH
15624: LD_INT 0
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 1
15633: NEG
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 2
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 2
15655: NEG
15656: PUSH
15657: LD_INT 1
15659: NEG
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15676: LD_ADDR_VAR 0 39
15680: PUSH
15681: LD_INT 0
15683: PUSH
15684: LD_INT 0
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 0
15693: PUSH
15694: LD_INT 1
15696: NEG
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: LD_INT 0
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 1
15714: PUSH
15715: LD_INT 1
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 0
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 1
15734: NEG
15735: PUSH
15736: LD_INT 0
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 1
15745: NEG
15746: PUSH
15747: LD_INT 1
15749: NEG
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PUSH
15755: LD_INT 1
15757: NEG
15758: PUSH
15759: LD_INT 2
15761: NEG
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 1
15769: PUSH
15770: LD_INT 2
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15788: LD_ADDR_VAR 0 40
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: LD_INT 0
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: LD_INT 1
15808: NEG
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: LD_INT 0
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 1
15826: PUSH
15827: LD_INT 1
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 0
15836: PUSH
15837: LD_INT 1
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 1
15846: NEG
15847: PUSH
15848: LD_INT 0
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 1
15857: NEG
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: LD_INT 1
15869: PUSH
15870: LD_INT 1
15872: NEG
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: LD_INT 1
15880: NEG
15881: PUSH
15882: LD_INT 1
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15900: LD_ADDR_VAR 0 41
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 0
15917: PUSH
15918: LD_INT 1
15920: NEG
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: LD_INT 0
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 1
15958: NEG
15959: PUSH
15960: LD_INT 0
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 1
15969: NEG
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: NEG
15982: PUSH
15983: LD_INT 2
15985: NEG
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 1
15993: PUSH
15994: LD_INT 1
15996: NEG
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 2
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 2
16014: PUSH
16015: LD_INT 1
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 1
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 1
16044: NEG
16045: PUSH
16046: LD_INT 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 2
16055: NEG
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: LD_INT 2
16066: NEG
16067: PUSH
16068: LD_INT 1
16070: NEG
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PUSH
16076: LD_INT 2
16078: NEG
16079: PUSH
16080: LD_INT 2
16082: NEG
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 2
16090: NEG
16091: PUSH
16092: LD_INT 3
16094: NEG
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 2
16102: PUSH
16103: LD_INT 1
16105: NEG
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 3
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 3
16123: PUSH
16124: LD_INT 1
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PUSH
16131: LD_INT 3
16133: PUSH
16134: LD_INT 2
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 3
16143: PUSH
16144: LD_INT 3
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 2
16153: PUSH
16154: LD_INT 3
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: LD_INT 2
16163: NEG
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 3
16174: NEG
16175: PUSH
16176: LD_INT 0
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 3
16185: NEG
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 3
16197: NEG
16198: PUSH
16199: LD_INT 2
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 3
16209: NEG
16210: PUSH
16211: LD_INT 3
16213: NEG
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16250: LD_ADDR_VAR 0 42
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: LD_INT 0
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: LD_INT 1
16270: NEG
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 1
16278: PUSH
16279: LD_INT 0
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 0
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: LD_INT 1
16308: NEG
16309: PUSH
16310: LD_INT 0
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 1
16319: NEG
16320: PUSH
16321: LD_INT 1
16323: NEG
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 1
16331: NEG
16332: PUSH
16333: LD_INT 2
16335: NEG
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 2
16346: NEG
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: LD_INT 1
16357: NEG
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 2
16365: PUSH
16366: LD_INT 1
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 2
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 0
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 1
16405: NEG
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 2
16416: NEG
16417: PUSH
16418: LD_INT 1
16420: NEG
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 2
16428: NEG
16429: PUSH
16430: LD_INT 2
16432: NEG
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: LD_INT 2
16440: NEG
16441: PUSH
16442: LD_INT 3
16444: NEG
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 1
16452: NEG
16453: PUSH
16454: LD_INT 3
16456: NEG
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 0
16464: PUSH
16465: LD_INT 3
16467: NEG
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PUSH
16473: LD_INT 1
16475: PUSH
16476: LD_INT 2
16478: NEG
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 3
16486: PUSH
16487: LD_INT 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 3
16496: PUSH
16497: LD_INT 3
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: LD_INT 3
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: NEG
16537: PUSH
16538: LD_INT 2
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 3
16547: NEG
16548: PUSH
16549: LD_INT 2
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 3
16559: NEG
16560: PUSH
16561: LD_INT 3
16563: NEG
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16600: LD_ADDR_VAR 0 43
16604: PUSH
16605: LD_INT 0
16607: PUSH
16608: LD_INT 0
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: LD_INT 0
16617: PUSH
16618: LD_INT 1
16620: NEG
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 0
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: LD_INT 1
16638: PUSH
16639: LD_INT 1
16641: PUSH
16642: EMPTY
16643: LIST
16644: LIST
16645: PUSH
16646: LD_INT 0
16648: PUSH
16649: LD_INT 1
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 1
16658: NEG
16659: PUSH
16660: LD_INT 0
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 1
16669: NEG
16670: PUSH
16671: LD_INT 1
16673: NEG
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 1
16681: NEG
16682: PUSH
16683: LD_INT 2
16685: NEG
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 0
16693: PUSH
16694: LD_INT 2
16696: NEG
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 1
16704: PUSH
16705: LD_INT 1
16707: NEG
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: PUSH
16723: LD_INT 2
16725: PUSH
16726: LD_INT 1
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 0
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 1
16755: NEG
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 2
16766: NEG
16767: PUSH
16768: LD_INT 0
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: LD_INT 2
16777: NEG
16778: PUSH
16779: LD_INT 1
16781: NEG
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 1
16789: NEG
16790: PUSH
16791: LD_INT 3
16793: NEG
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 0
16801: PUSH
16802: LD_INT 3
16804: NEG
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 1
16812: PUSH
16813: LD_INT 2
16815: NEG
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 1
16826: NEG
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: LD_INT 3
16834: PUSH
16835: LD_INT 0
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: LD_INT 3
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 0
16864: PUSH
16865: LD_INT 3
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: LD_INT 1
16874: NEG
16875: PUSH
16876: LD_INT 2
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 2
16885: NEG
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 3
16896: NEG
16897: PUSH
16898: LD_INT 0
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 3
16907: NEG
16908: PUSH
16909: LD_INT 1
16911: NEG
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16948: LD_ADDR_VAR 0 44
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: LD_INT 0
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 0
16965: PUSH
16966: LD_INT 1
16968: NEG
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 1
16976: PUSH
16977: LD_INT 0
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: PUSH
16984: LD_INT 1
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 0
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 1
17006: NEG
17007: PUSH
17008: LD_INT 0
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 1
17017: NEG
17018: PUSH
17019: LD_INT 1
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 1
17029: NEG
17030: PUSH
17031: LD_INT 2
17033: NEG
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: LD_INT 1
17044: NEG
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 2
17052: PUSH
17053: LD_INT 0
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: LD_INT 1
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: LD_INT 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 1
17092: NEG
17093: PUSH
17094: LD_INT 1
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PUSH
17101: LD_INT 2
17103: NEG
17104: PUSH
17105: LD_INT 0
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 2
17114: NEG
17115: PUSH
17116: LD_INT 1
17118: NEG
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 2
17126: NEG
17127: PUSH
17128: LD_INT 2
17130: NEG
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 2
17138: NEG
17139: PUSH
17140: LD_INT 3
17142: NEG
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 1
17153: NEG
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: PUSH
17159: LD_INT 3
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 3
17171: PUSH
17172: LD_INT 1
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PUSH
17179: LD_INT 3
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: LD_INT 3
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: LD_INT 3
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: LD_INT 1
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 3
17222: NEG
17223: PUSH
17224: LD_INT 0
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: LD_INT 3
17233: NEG
17234: PUSH
17235: LD_INT 1
17237: NEG
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 3
17245: NEG
17246: PUSH
17247: LD_INT 2
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 3
17257: NEG
17258: PUSH
17259: LD_INT 3
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17298: LD_ADDR_VAR 0 45
17302: PUSH
17303: LD_INT 0
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: LD_INT 1
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 1
17326: PUSH
17327: LD_INT 0
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: LD_INT 1
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 0
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 1
17356: NEG
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 1
17367: NEG
17368: PUSH
17369: LD_INT 1
17371: NEG
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: PUSH
17377: LD_INT 1
17379: NEG
17380: PUSH
17381: LD_INT 2
17383: NEG
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: LD_INT 2
17394: NEG
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: LD_INT 1
17405: NEG
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 2
17423: PUSH
17424: LD_INT 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 1
17433: PUSH
17434: LD_INT 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: NEG
17454: PUSH
17455: LD_INT 1
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PUSH
17462: LD_INT 2
17464: NEG
17465: PUSH
17466: LD_INT 1
17468: NEG
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 2
17476: NEG
17477: PUSH
17478: LD_INT 2
17480: NEG
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 2
17488: NEG
17489: PUSH
17490: LD_INT 3
17492: NEG
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 1
17500: NEG
17501: PUSH
17502: LD_INT 3
17504: NEG
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 0
17512: PUSH
17513: LD_INT 3
17515: NEG
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: LD_INT 2
17526: NEG
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 3
17534: PUSH
17535: LD_INT 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 3
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: LD_INT 3
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 3
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 3
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 2
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 3
17595: NEG
17596: PUSH
17597: LD_INT 2
17599: NEG
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 3
17607: NEG
17608: PUSH
17609: LD_INT 3
17611: NEG
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: LIST
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17648: LD_ADDR_VAR 0 46
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: LD_INT 1
17755: NEG
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 2
17763: PUSH
17764: LD_INT 0
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 1
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 2
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: PUSH
17801: LD_INT 1
17803: NEG
17804: PUSH
17805: LD_INT 1
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 2
17814: NEG
17815: PUSH
17816: LD_INT 0
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 2
17825: NEG
17826: PUSH
17827: LD_INT 1
17829: NEG
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: LD_INT 3
17841: NEG
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 0
17849: PUSH
17850: LD_INT 3
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: LD_INT 2
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 2
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 3
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 3
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 3
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: LD_INT 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 2
17933: NEG
17934: PUSH
17935: LD_INT 1
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 3
17944: NEG
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 3
17955: NEG
17956: PUSH
17957: LD_INT 1
17959: NEG
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17996: LD_ADDR_VAR 0 47
18000: PUSH
18001: LD_INT 0
18003: PUSH
18004: LD_INT 0
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 0
18013: PUSH
18014: LD_INT 1
18016: NEG
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 1
18024: PUSH
18025: LD_INT 0
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: LD_INT 1
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: NEG
18055: PUSH
18056: LD_INT 0
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: LD_INT 1
18069: NEG
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 1
18077: NEG
18078: PUSH
18079: LD_INT 2
18081: NEG
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: PUSH
18087: LD_INT 0
18089: PUSH
18090: LD_INT 2
18092: NEG
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 2
18111: NEG
18112: PUSH
18113: LD_INT 1
18115: NEG
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 2
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: NEG
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18147: LD_ADDR_VAR 0 48
18151: PUSH
18152: LD_INT 0
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: LD_INT 1
18167: NEG
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 1
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: NEG
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 1
18216: NEG
18217: PUSH
18218: LD_INT 1
18220: NEG
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: LD_INT 2
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: LD_INT 2
18243: NEG
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: LD_INT 1
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 2
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 2
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18294: LD_ADDR_VAR 0 49
18298: PUSH
18299: LD_INT 0
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: LD_INT 1
18314: NEG
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 0
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 1
18352: NEG
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 1
18363: NEG
18364: PUSH
18365: LD_INT 1
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: LD_INT 1
18378: NEG
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 2
18386: PUSH
18387: LD_INT 0
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 2
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: LD_INT 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: LD_INT 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18438: LD_ADDR_VAR 0 50
18442: PUSH
18443: LD_INT 0
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 0
18455: PUSH
18456: LD_INT 1
18458: NEG
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: LD_INT 0
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 1
18496: NEG
18497: PUSH
18498: LD_INT 0
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: LD_INT 1
18507: NEG
18508: PUSH
18509: LD_INT 1
18511: NEG
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: LD_INT 2
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 0
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 1
18559: NEG
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
18582: LD_ADDR_VAR 0 51
18586: PUSH
18587: LD_INT 0
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 1
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: LD_INT 0
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 0
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 1
18640: NEG
18641: PUSH
18642: LD_INT 0
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: LD_INT 1
18655: NEG
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 1
18683: NEG
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 2
18694: NEG
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 2
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18729: LD_ADDR_VAR 0 52
18733: PUSH
18734: LD_INT 0
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 1
18749: NEG
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: LD_INT 0
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: LD_INT 0
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 1
18798: NEG
18799: PUSH
18800: LD_INT 1
18802: NEG
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: LD_INT 2
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: NEG
18823: PUSH
18824: LD_INT 1
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: NEG
18834: PUSH
18835: LD_INT 0
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 2
18844: NEG
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 2
18856: NEG
18857: PUSH
18858: LD_INT 2
18860: NEG
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18880: LD_ADDR_VAR 0 53
18884: PUSH
18885: LD_INT 0
18887: PUSH
18888: LD_INT 0
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: LD_INT 1
18900: NEG
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: LD_INT 1
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 1
18949: NEG
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: LD_INT 2
18965: NEG
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 0
18973: PUSH
18974: LD_INT 2
18976: NEG
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: LD_INT 0
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 2
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 2
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: LD_INT 2
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 0
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: LD_INT 1
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 2
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19110: LD_ADDR_VAR 0 54
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: NEG
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: LD_INT 2
19195: NEG
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: LD_INT 2
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 2
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19340: LD_ADDR_VAR 0 55
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: LD_INT 2
19425: NEG
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 2
19436: NEG
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: NEG
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: NEG
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19570: LD_ADDR_VAR 0 56
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: LD_INT 2
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: LD_INT 2
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: LD_INT 1
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: LD_INT 2
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19800: LD_ADDR_VAR 0 57
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: LD_INT 2
19896: NEG
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: NEG
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20030: LD_ADDR_VAR 0 58
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: LD_INT 2
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20260: LD_ADDR_VAR 0 59
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20348: LD_ADDR_VAR 0 60
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 0
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: LD_INT 1
20368: NEG
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 0
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: LD_INT 1
20406: NEG
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 1
20417: NEG
20418: PUSH
20419: LD_INT 1
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20436: LD_ADDR_VAR 0 61
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 0
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 0
20453: PUSH
20454: LD_INT 1
20456: NEG
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 0
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: LD_INT 1
20494: NEG
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 1
20505: NEG
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20524: LD_ADDR_VAR 0 62
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 0
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 1
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 1
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20612: LD_ADDR_VAR 0 63
20616: PUSH
20617: LD_INT 0
20619: PUSH
20620: LD_INT 0
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_INT 0
20629: PUSH
20630: LD_INT 1
20632: NEG
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PUSH
20638: LD_INT 1
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 1
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 1
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 1
20670: NEG
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: LD_INT 1
20685: NEG
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20700: LD_ADDR_VAR 0 64
20704: PUSH
20705: LD_INT 0
20707: PUSH
20708: LD_INT 0
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 1
20720: NEG
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: LD_INT 0
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 1
20738: PUSH
20739: LD_INT 1
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 1
20758: NEG
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 1
20769: NEG
20770: PUSH
20771: LD_INT 1
20773: NEG
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: ST_TO_ADDR
// end ; 1 :
20788: GO 26685
20790: LD_INT 1
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 23421
20798: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
20799: LD_ADDR_VAR 0 11
20803: PUSH
20804: LD_INT 1
20806: NEG
20807: PUSH
20808: LD_INT 3
20810: NEG
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: LD_INT 3
20821: NEG
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 1
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: LIST
20842: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
20843: LD_ADDR_VAR 0 12
20847: PUSH
20848: LD_INT 2
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 3
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 3
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
20884: LD_ADDR_VAR 0 13
20888: PUSH
20889: LD_INT 3
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 3
20901: PUSH
20902: LD_INT 3
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 2
20911: PUSH
20912: LD_INT 3
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20924: LD_ADDR_VAR 0 14
20928: PUSH
20929: LD_INT 1
20931: PUSH
20932: LD_INT 3
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: LD_INT 0
20941: PUSH
20942: LD_INT 3
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: LD_INT 1
20951: NEG
20952: PUSH
20953: LD_INT 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20965: LD_ADDR_VAR 0 15
20969: PUSH
20970: LD_INT 2
20972: NEG
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 3
20983: NEG
20984: PUSH
20985: LD_INT 0
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 3
20994: NEG
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21009: LD_ADDR_VAR 0 16
21013: PUSH
21014: LD_INT 2
21016: NEG
21017: PUSH
21018: LD_INT 3
21020: NEG
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 3
21028: NEG
21029: PUSH
21030: LD_INT 2
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 3
21040: NEG
21041: PUSH
21042: LD_INT 3
21044: NEG
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: LIST
21054: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21055: LD_ADDR_VAR 0 17
21059: PUSH
21060: LD_INT 1
21062: NEG
21063: PUSH
21064: LD_INT 3
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: LD_INT 3
21077: NEG
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 2
21088: NEG
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21099: LD_ADDR_VAR 0 18
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 3
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21140: LD_ADDR_VAR 0 19
21144: PUSH
21145: LD_INT 3
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 3
21157: PUSH
21158: LD_INT 3
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 3
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21180: LD_ADDR_VAR 0 20
21184: PUSH
21185: LD_INT 1
21187: PUSH
21188: LD_INT 3
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 0
21197: PUSH
21198: LD_INT 3
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: NEG
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21221: LD_ADDR_VAR 0 21
21225: PUSH
21226: LD_INT 2
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 3
21239: NEG
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 3
21250: NEG
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21265: LD_ADDR_VAR 0 22
21269: PUSH
21270: LD_INT 2
21272: NEG
21273: PUSH
21274: LD_INT 3
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 3
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 3
21296: NEG
21297: PUSH
21298: LD_INT 3
21300: NEG
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: LIST
21310: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21311: LD_ADDR_VAR 0 23
21315: PUSH
21316: LD_INT 0
21318: PUSH
21319: LD_INT 3
21321: NEG
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 1
21329: NEG
21330: PUSH
21331: LD_INT 4
21333: NEG
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: LD_INT 3
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21355: LD_ADDR_VAR 0 24
21359: PUSH
21360: LD_INT 3
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: PUSH
21370: LD_INT 3
21372: PUSH
21373: LD_INT 1
21375: NEG
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 4
21383: PUSH
21384: LD_INT 1
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21396: LD_ADDR_VAR 0 25
21400: PUSH
21401: LD_INT 3
21403: PUSH
21404: LD_INT 3
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 4
21413: PUSH
21414: LD_INT 3
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 3
21423: PUSH
21424: LD_INT 4
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21436: LD_ADDR_VAR 0 26
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: LD_INT 4
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 1
21463: NEG
21464: PUSH
21465: LD_INT 3
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21477: LD_ADDR_VAR 0 27
21481: PUSH
21482: LD_INT 3
21484: NEG
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 3
21495: NEG
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: LD_INT 4
21506: NEG
21507: PUSH
21508: LD_INT 1
21510: NEG
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: LIST
21520: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
21521: LD_ADDR_VAR 0 28
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: LD_INT 3
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 3
21540: NEG
21541: PUSH
21542: LD_INT 4
21544: NEG
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 4
21552: NEG
21553: PUSH
21554: LD_INT 3
21556: NEG
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
21567: LD_ADDR_VAR 0 29
21571: PUSH
21572: LD_INT 1
21574: NEG
21575: PUSH
21576: LD_INT 3
21578: NEG
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: LD_INT 3
21589: NEG
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: LD_INT 2
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: LD_INT 4
21612: NEG
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 4
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 3
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 1
21642: NEG
21643: PUSH
21644: LD_INT 5
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 0
21654: PUSH
21655: LD_INT 5
21657: NEG
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 4
21668: NEG
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 1
21676: NEG
21677: PUSH
21678: LD_INT 6
21680: NEG
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: LD_INT 6
21691: NEG
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 1
21699: PUSH
21700: LD_INT 5
21702: NEG
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
21722: LD_ADDR_VAR 0 30
21726: PUSH
21727: LD_INT 2
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 3
21740: PUSH
21741: LD_INT 0
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: LD_INT 1
21763: NEG
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 4
21771: PUSH
21772: LD_INT 0
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 4
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 4
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 5
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 5
21812: PUSH
21813: LD_INT 1
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 5
21822: PUSH
21823: LD_INT 1
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: LD_INT 6
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PUSH
21841: LD_INT 6
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
21865: LD_ADDR_VAR 0 31
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: LD_INT 3
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 4
21902: PUSH
21903: LD_INT 3
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 4
21912: PUSH
21913: LD_INT 4
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 5
21932: PUSH
21933: LD_INT 4
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 5
21942: PUSH
21943: LD_INT 5
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 4
21952: PUSH
21953: LD_INT 5
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 6
21962: PUSH
21963: LD_INT 5
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 6
21972: PUSH
21973: LD_INT 6
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 5
21982: PUSH
21983: LD_INT 6
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22004: LD_ADDR_VAR 0 32
22008: PUSH
22009: LD_INT 1
22011: PUSH
22012: LD_INT 3
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 0
22021: PUSH
22022: LD_INT 3
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 1
22031: NEG
22032: PUSH
22033: LD_INT 2
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: LD_INT 4
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: LD_INT 5
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: LD_INT 5
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: LD_INT 4
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 1
22104: PUSH
22105: LD_INT 6
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 0
22114: PUSH
22115: LD_INT 6
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 1
22124: NEG
22125: PUSH
22126: LD_INT 5
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22147: LD_ADDR_VAR 0 33
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 3
22165: NEG
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 3
22176: NEG
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 3
22188: NEG
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 4
22199: NEG
22200: PUSH
22201: LD_INT 0
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 4
22210: NEG
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 4
22222: NEG
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 5
22233: NEG
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 5
22244: NEG
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 5
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 6
22267: NEG
22268: PUSH
22269: LD_INT 0
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 6
22278: NEG
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22302: LD_ADDR_VAR 0 34
22306: PUSH
22307: LD_INT 2
22309: NEG
22310: PUSH
22311: LD_INT 3
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: NEG
22322: PUSH
22323: LD_INT 2
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 3
22333: NEG
22334: PUSH
22335: LD_INT 3
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 3
22345: NEG
22346: PUSH
22347: LD_INT 4
22349: NEG
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 4
22357: NEG
22358: PUSH
22359: LD_INT 3
22361: NEG
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 4
22369: NEG
22370: PUSH
22371: LD_INT 4
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 4
22381: NEG
22382: PUSH
22383: LD_INT 5
22385: NEG
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 5
22393: NEG
22394: PUSH
22395: LD_INT 4
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 5
22405: NEG
22406: PUSH
22407: LD_INT 5
22409: NEG
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 5
22417: NEG
22418: PUSH
22419: LD_INT 6
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 6
22429: NEG
22430: PUSH
22431: LD_INT 5
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 6
22441: NEG
22442: PUSH
22443: LD_INT 6
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22465: LD_ADDR_VAR 0 41
22469: PUSH
22470: LD_INT 0
22472: PUSH
22473: LD_INT 2
22475: NEG
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: NEG
22484: PUSH
22485: LD_INT 3
22487: NEG
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: LD_INT 2
22498: NEG
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
22509: LD_ADDR_VAR 0 42
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 2
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 3
22537: PUSH
22538: LD_INT 1
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
22550: LD_ADDR_VAR 0 43
22554: PUSH
22555: LD_INT 2
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: LD_INT 3
22567: PUSH
22568: LD_INT 2
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: LD_INT 2
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
22590: LD_ADDR_VAR 0 44
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: LD_INT 3
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 1
22617: NEG
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22631: LD_ADDR_VAR 0 45
22635: PUSH
22636: LD_INT 2
22638: NEG
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 2
22649: NEG
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 3
22660: NEG
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
22675: LD_ADDR_VAR 0 46
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 2
22694: NEG
22695: PUSH
22696: LD_INT 3
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
22721: LD_ADDR_VAR 0 47
22725: PUSH
22726: LD_INT 2
22728: NEG
22729: PUSH
22730: LD_INT 3
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 1
22740: NEG
22741: PUSH
22742: LD_INT 3
22744: NEG
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22754: LD_ADDR_VAR 0 48
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: LD_INT 1
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
22785: LD_ADDR_VAR 0 49
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: LD_INT 1
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 3
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
22814: LD_ADDR_VAR 0 50
22818: PUSH
22819: LD_INT 2
22821: PUSH
22822: LD_INT 3
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: LD_INT 1
22831: PUSH
22832: LD_INT 3
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22843: LD_ADDR_VAR 0 51
22847: PUSH
22848: LD_INT 1
22850: NEG
22851: PUSH
22852: LD_INT 2
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 2
22861: NEG
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22874: LD_ADDR_VAR 0 52
22878: PUSH
22879: LD_INT 3
22881: NEG
22882: PUSH
22883: LD_INT 1
22885: NEG
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 3
22893: NEG
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22907: LD_ADDR_VAR 0 53
22911: PUSH
22912: LD_INT 1
22914: NEG
22915: PUSH
22916: LD_INT 3
22918: NEG
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 3
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22951: LD_ADDR_VAR 0 54
22955: PUSH
22956: LD_INT 2
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: LD_INT 0
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22992: LD_ADDR_VAR 0 55
22996: PUSH
22997: LD_INT 3
22999: PUSH
23000: LD_INT 2
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 3
23009: PUSH
23010: LD_INT 3
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 3
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23032: LD_ADDR_VAR 0 56
23036: PUSH
23037: LD_INT 1
23039: PUSH
23040: LD_INT 3
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: LD_INT 2
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: LIST
23072: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23073: LD_ADDR_VAR 0 57
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: LD_INT 1
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 3
23091: NEG
23092: PUSH
23093: LD_INT 0
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 3
23102: NEG
23103: PUSH
23104: LD_INT 1
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23117: LD_ADDR_VAR 0 58
23121: PUSH
23122: LD_INT 2
23124: NEG
23125: PUSH
23126: LD_INT 3
23128: NEG
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 3
23136: NEG
23137: PUSH
23138: LD_INT 2
23140: NEG
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 3
23148: NEG
23149: PUSH
23150: LD_INT 3
23152: NEG
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23163: LD_ADDR_VAR 0 59
23167: PUSH
23168: LD_INT 1
23170: NEG
23171: PUSH
23172: LD_INT 2
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 2
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 1
23193: PUSH
23194: LD_INT 1
23196: NEG
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23207: LD_ADDR_VAR 0 60
23211: PUSH
23212: LD_INT 1
23214: PUSH
23215: LD_INT 1
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: LD_INT 0
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 2
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23248: LD_ADDR_VAR 0 61
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 2
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: LD_INT 2
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23288: LD_ADDR_VAR 0 62
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 2
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 1
23315: NEG
23316: PUSH
23317: LD_INT 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: LIST
23328: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23329: LD_ADDR_VAR 0 63
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: NEG
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23373: LD_ADDR_VAR 0 64
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: LD_INT 2
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: NEG
23393: PUSH
23394: LD_INT 1
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: NEG
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: ST_TO_ADDR
// end ; 2 :
23419: GO 26685
23421: LD_INT 2
23423: DOUBLE
23424: EQUAL
23425: IFTRUE 23429
23427: GO 26684
23429: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23430: LD_ADDR_VAR 0 29
23434: PUSH
23435: LD_INT 4
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 4
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 5
23458: PUSH
23459: LD_INT 0
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 5
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 4
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 3
23509: PUSH
23510: LD_INT 2
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 5
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 3
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 4
23550: PUSH
23551: LD_INT 3
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 4
23560: PUSH
23561: LD_INT 4
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 3
23570: PUSH
23571: LD_INT 4
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: LD_INT 3
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 4
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 2
23610: PUSH
23611: LD_INT 4
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 0
23620: PUSH
23621: LD_INT 4
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 3
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: PUSH
23641: LD_INT 4
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 5
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 5
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: LD_INT 4
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 5
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 2
23702: NEG
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 3
23713: NEG
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 3
23724: NEG
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: NEG
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: NEG
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 3
23758: NEG
23759: PUSH
23760: LD_INT 1
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 4
23769: NEG
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 4
23780: NEG
23781: PUSH
23782: LD_INT 1
23784: NEG
23785: PUSH
23786: EMPTY
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 4
23792: NEG
23793: PUSH
23794: LD_INT 2
23796: NEG
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 4
23815: NEG
23816: PUSH
23817: LD_INT 4
23819: NEG
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 4
23827: NEG
23828: PUSH
23829: LD_INT 5
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: LD_INT 4
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 3
23851: NEG
23852: PUSH
23853: LD_INT 3
23855: NEG
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 4
23863: NEG
23864: PUSH
23865: LD_INT 3
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 5
23875: NEG
23876: PUSH
23877: LD_INT 4
23879: NEG
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: LD_INT 5
23887: NEG
23888: PUSH
23889: LD_INT 5
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 3
23899: NEG
23900: PUSH
23901: LD_INT 5
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 5
23911: NEG
23912: PUSH
23913: LD_INT 3
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
23968: LD_ADDR_VAR 0 30
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 4
23985: PUSH
23986: LD_INT 3
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 5
23995: PUSH
23996: LD_INT 4
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 5
24005: PUSH
24006: LD_INT 5
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 4
24015: PUSH
24016: LD_INT 5
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: LD_INT 4
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: LD_INT 3
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 5
24045: PUSH
24046: LD_INT 3
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 3
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 3
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 3
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: LD_INT 4
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 1
24115: NEG
24116: PUSH
24117: LD_INT 3
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 4
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: NEG
24148: PUSH
24149: LD_INT 2
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 4
24158: NEG
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 4
24169: NEG
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 3
24181: NEG
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 3
24192: NEG
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 4
24203: NEG
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 5
24214: NEG
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 5
24225: NEG
24226: PUSH
24227: LD_INT 1
24229: NEG
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 5
24237: NEG
24238: PUSH
24239: LD_INT 2
24241: NEG
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: PUSH
24247: LD_INT 3
24249: NEG
24250: PUSH
24251: LD_INT 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 3
24260: NEG
24261: PUSH
24262: LD_INT 3
24264: NEG
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PUSH
24270: LD_INT 3
24272: NEG
24273: PUSH
24274: LD_INT 4
24276: NEG
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: LD_INT 3
24288: NEG
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 2
24296: NEG
24297: PUSH
24298: LD_INT 2
24300: NEG
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 3
24308: NEG
24309: PUSH
24310: LD_INT 2
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 4
24320: NEG
24321: PUSH
24322: LD_INT 3
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 4
24332: NEG
24333: PUSH
24334: LD_INT 4
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 2
24344: NEG
24345: PUSH
24346: LD_INT 4
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 4
24356: NEG
24357: PUSH
24358: LD_INT 2
24360: NEG
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: LD_INT 4
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 5
24382: NEG
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: LD_INT 4
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: LD_INT 3
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: LD_INT 3
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: LD_INT 4
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: LD_INT 5
24439: NEG
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 3
24450: NEG
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 2
24458: NEG
24459: PUSH
24460: LD_INT 5
24462: NEG
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
24515: LD_ADDR_VAR 0 31
24519: PUSH
24520: LD_INT 0
24522: PUSH
24523: LD_INT 4
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 0
24532: PUSH
24533: LD_INT 3
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: PUSH
24543: LD_INT 4
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: LD_INT 5
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 5
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 1
24572: NEG
24573: PUSH
24574: LD_INT 4
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 5
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 3
24615: NEG
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 3
24626: NEG
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 3
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 4
24671: NEG
24672: PUSH
24673: LD_INT 0
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 4
24682: NEG
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 4
24694: NEG
24695: PUSH
24696: LD_INT 2
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: LD_INT 2
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 4
24717: NEG
24718: PUSH
24719: LD_INT 4
24721: NEG
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PUSH
24727: LD_INT 4
24729: NEG
24730: PUSH
24731: LD_INT 5
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 3
24741: NEG
24742: PUSH
24743: LD_INT 4
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 3
24753: NEG
24754: PUSH
24755: LD_INT 3
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 4
24765: NEG
24766: PUSH
24767: LD_INT 3
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 5
24777: NEG
24778: PUSH
24779: LD_INT 4
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 5
24789: NEG
24790: PUSH
24791: LD_INT 5
24793: NEG
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 3
24801: NEG
24802: PUSH
24803: LD_INT 5
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 5
24813: NEG
24814: PUSH
24815: LD_INT 3
24817: NEG
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 0
24836: PUSH
24837: LD_INT 4
24839: NEG
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: LD_INT 3
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: LD_INT 2
24861: NEG
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: LD_INT 3
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 4
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 2
24915: NEG
24916: PUSH
24917: LD_INT 4
24919: NEG
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 4
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 4
24937: PUSH
24938: LD_INT 1
24940: NEG
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 5
24948: PUSH
24949: LD_INT 0
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 5
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 1
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: LD_INT 0
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: PUSH
25000: LD_INT 2
25002: NEG
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 5
25010: PUSH
25011: LD_INT 2
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25065: LD_ADDR_VAR 0 32
25069: PUSH
25070: LD_INT 4
25072: NEG
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 4
25083: NEG
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 3
25095: NEG
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 3
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 4
25117: NEG
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 5
25128: NEG
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 5
25139: NEG
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 5
25151: NEG
25152: PUSH
25153: LD_INT 2
25155: NEG
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 3
25163: NEG
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 3
25174: NEG
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 3
25186: NEG
25187: PUSH
25188: LD_INT 4
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: LD_INT 3
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 3
25222: NEG
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 4
25234: NEG
25235: PUSH
25236: LD_INT 3
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 4
25246: NEG
25247: PUSH
25248: LD_INT 4
25250: NEG
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 2
25258: NEG
25259: PUSH
25260: LD_INT 4
25262: NEG
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 4
25270: NEG
25271: PUSH
25272: LD_INT 2
25274: NEG
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 4
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: LD_INT 0
25293: PUSH
25294: LD_INT 5
25296: NEG
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 4
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: LD_INT 3
25318: NEG
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: LD_INT 3
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: LD_INT 4
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 1
25349: NEG
25350: PUSH
25351: LD_INT 5
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 2
25361: PUSH
25362: LD_INT 3
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 5
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 4
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 4
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 2
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: PUSH
25457: LD_INT 2
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 4
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 4
25477: PUSH
25478: LD_INT 4
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 4
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 5
25497: PUSH
25498: LD_INT 4
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 5
25507: PUSH
25508: LD_INT 5
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 4
25517: PUSH
25518: LD_INT 5
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 3
25527: PUSH
25528: LD_INT 4
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 3
25537: PUSH
25538: LD_INT 3
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 5
25547: PUSH
25548: LD_INT 3
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 3
25557: PUSH
25558: LD_INT 5
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
25612: LD_ADDR_VAR 0 33
25616: PUSH
25617: LD_INT 4
25619: NEG
25620: PUSH
25621: LD_INT 4
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 4
25631: NEG
25632: PUSH
25633: LD_INT 5
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 3
25643: NEG
25644: PUSH
25645: LD_INT 4
25647: NEG
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 3
25655: NEG
25656: PUSH
25657: LD_INT 3
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 4
25667: NEG
25668: PUSH
25669: LD_INT 3
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 5
25679: NEG
25680: PUSH
25681: LD_INT 4
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 5
25691: NEG
25692: PUSH
25693: LD_INT 5
25695: NEG
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 3
25703: NEG
25704: PUSH
25705: LD_INT 5
25707: NEG
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 5
25715: NEG
25716: PUSH
25717: LD_INT 3
25719: NEG
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: LD_INT 3
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 4
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: LD_INT 3
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: PUSH
25761: LD_INT 2
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 0
25771: PUSH
25772: LD_INT 2
25774: NEG
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 3
25786: NEG
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: NEG
25795: PUSH
25796: LD_INT 4
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: NEG
25818: PUSH
25819: LD_INT 4
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 4
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 4
25839: PUSH
25840: LD_INT 1
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 5
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 5
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 4
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 3
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 3
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 3
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 5
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 3
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: LD_INT 2
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 4
25942: PUSH
25943: LD_INT 3
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 4
25952: PUSH
25953: LD_INT 4
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 3
25962: PUSH
25963: LD_INT 4
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: LD_INT 3
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 4
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: LD_INT 4
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 4
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 0
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 1
26032: PUSH
26033: LD_INT 4
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 5
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 0
26052: PUSH
26053: LD_INT 5
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: LD_INT 4
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 3
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: LD_INT 5
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: LD_INT 3
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26150: LD_ADDR_VAR 0 34
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 4
26160: NEG
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 5
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: LD_INT 4
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 3
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 3
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 4
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: LD_INT 5
26228: NEG
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 3
26239: NEG
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: LD_INT 5
26251: NEG
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 3
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 4
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: LD_INT 1
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: LD_INT 0
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: PUSH
26332: LD_INT 2
26334: NEG
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 4
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 4
26352: PUSH
26353: LD_INT 4
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 4
26362: PUSH
26363: LD_INT 3
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 5
26372: PUSH
26373: LD_INT 4
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 5
26382: PUSH
26383: LD_INT 5
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 4
26392: PUSH
26393: LD_INT 5
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: LD_INT 4
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 3
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 5
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 3
26432: PUSH
26433: LD_INT 5
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 0
26442: PUSH
26443: LD_INT 3
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 0
26452: PUSH
26453: LD_INT 2
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 3
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: LD_INT 4
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: LD_INT 4
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 3
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 4
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: NEG
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 4
26535: NEG
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 4
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: NEG
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 3
26569: NEG
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 4
26580: NEG
26581: PUSH
26582: LD_INT 1
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 5
26591: NEG
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 5
26602: NEG
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 5
26614: NEG
26615: PUSH
26616: LD_INT 2
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 3
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// end ; end ;
26682: GO 26685
26684: POP
// case btype of b_depot , b_warehouse :
26685: LD_VAR 0 1
26689: PUSH
26690: LD_INT 0
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26704
26696: LD_INT 1
26698: DOUBLE
26699: EQUAL
26700: IFTRUE 26704
26702: GO 26905
26704: POP
// case nation of nation_american :
26705: LD_VAR 0 5
26709: PUSH
26710: LD_INT 1
26712: DOUBLE
26713: EQUAL
26714: IFTRUE 26718
26716: GO 26774
26718: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
26719: LD_ADDR_VAR 0 9
26723: PUSH
26724: LD_VAR 0 11
26728: PUSH
26729: LD_VAR 0 12
26733: PUSH
26734: LD_VAR 0 13
26738: PUSH
26739: LD_VAR 0 14
26743: PUSH
26744: LD_VAR 0 15
26748: PUSH
26749: LD_VAR 0 16
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: PUSH
26762: LD_VAR 0 4
26766: PUSH
26767: LD_INT 1
26769: PLUS
26770: ARRAY
26771: ST_TO_ADDR
26772: GO 26903
26774: LD_INT 2
26776: DOUBLE
26777: EQUAL
26778: IFTRUE 26782
26780: GO 26838
26782: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
26783: LD_ADDR_VAR 0 9
26787: PUSH
26788: LD_VAR 0 17
26792: PUSH
26793: LD_VAR 0 18
26797: PUSH
26798: LD_VAR 0 19
26802: PUSH
26803: LD_VAR 0 20
26807: PUSH
26808: LD_VAR 0 21
26812: PUSH
26813: LD_VAR 0 22
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: PUSH
26826: LD_VAR 0 4
26830: PUSH
26831: LD_INT 1
26833: PLUS
26834: ARRAY
26835: ST_TO_ADDR
26836: GO 26903
26838: LD_INT 3
26840: DOUBLE
26841: EQUAL
26842: IFTRUE 26846
26844: GO 26902
26846: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
26847: LD_ADDR_VAR 0 9
26851: PUSH
26852: LD_VAR 0 23
26856: PUSH
26857: LD_VAR 0 24
26861: PUSH
26862: LD_VAR 0 25
26866: PUSH
26867: LD_VAR 0 26
26871: PUSH
26872: LD_VAR 0 27
26876: PUSH
26877: LD_VAR 0 28
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: PUSH
26890: LD_VAR 0 4
26894: PUSH
26895: LD_INT 1
26897: PLUS
26898: ARRAY
26899: ST_TO_ADDR
26900: GO 26903
26902: POP
26903: GO 27452
26905: LD_INT 2
26907: DOUBLE
26908: EQUAL
26909: IFTRUE 26919
26911: LD_INT 3
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26919
26917: GO 26975
26919: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
26920: LD_ADDR_VAR 0 9
26924: PUSH
26925: LD_VAR 0 29
26929: PUSH
26930: LD_VAR 0 30
26934: PUSH
26935: LD_VAR 0 31
26939: PUSH
26940: LD_VAR 0 32
26944: PUSH
26945: LD_VAR 0 33
26949: PUSH
26950: LD_VAR 0 34
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: PUSH
26963: LD_VAR 0 4
26967: PUSH
26968: LD_INT 1
26970: PLUS
26971: ARRAY
26972: ST_TO_ADDR
26973: GO 27452
26975: LD_INT 16
26977: DOUBLE
26978: EQUAL
26979: IFTRUE 27031
26981: LD_INT 17
26983: DOUBLE
26984: EQUAL
26985: IFTRUE 27031
26987: LD_INT 18
26989: DOUBLE
26990: EQUAL
26991: IFTRUE 27031
26993: LD_INT 19
26995: DOUBLE
26996: EQUAL
26997: IFTRUE 27031
26999: LD_INT 20
27001: DOUBLE
27002: EQUAL
27003: IFTRUE 27031
27005: LD_INT 21
27007: DOUBLE
27008: EQUAL
27009: IFTRUE 27031
27011: LD_INT 23
27013: DOUBLE
27014: EQUAL
27015: IFTRUE 27031
27017: LD_INT 24
27019: DOUBLE
27020: EQUAL
27021: IFTRUE 27031
27023: LD_INT 25
27025: DOUBLE
27026: EQUAL
27027: IFTRUE 27031
27029: GO 27087
27031: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27032: LD_ADDR_VAR 0 9
27036: PUSH
27037: LD_VAR 0 35
27041: PUSH
27042: LD_VAR 0 36
27046: PUSH
27047: LD_VAR 0 37
27051: PUSH
27052: LD_VAR 0 38
27056: PUSH
27057: LD_VAR 0 39
27061: PUSH
27062: LD_VAR 0 40
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: PUSH
27075: LD_VAR 0 4
27079: PUSH
27080: LD_INT 1
27082: PLUS
27083: ARRAY
27084: ST_TO_ADDR
27085: GO 27452
27087: LD_INT 6
27089: DOUBLE
27090: EQUAL
27091: IFTRUE 27143
27093: LD_INT 7
27095: DOUBLE
27096: EQUAL
27097: IFTRUE 27143
27099: LD_INT 8
27101: DOUBLE
27102: EQUAL
27103: IFTRUE 27143
27105: LD_INT 13
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27143
27111: LD_INT 12
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27143
27117: LD_INT 15
27119: DOUBLE
27120: EQUAL
27121: IFTRUE 27143
27123: LD_INT 11
27125: DOUBLE
27126: EQUAL
27127: IFTRUE 27143
27129: LD_INT 14
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27143
27135: LD_INT 10
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27143
27141: GO 27199
27143: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27144: LD_ADDR_VAR 0 9
27148: PUSH
27149: LD_VAR 0 41
27153: PUSH
27154: LD_VAR 0 42
27158: PUSH
27159: LD_VAR 0 43
27163: PUSH
27164: LD_VAR 0 44
27168: PUSH
27169: LD_VAR 0 45
27173: PUSH
27174: LD_VAR 0 46
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: PUSH
27187: LD_VAR 0 4
27191: PUSH
27192: LD_INT 1
27194: PLUS
27195: ARRAY
27196: ST_TO_ADDR
27197: GO 27452
27199: LD_INT 36
27201: DOUBLE
27202: EQUAL
27203: IFTRUE 27207
27205: GO 27263
27207: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27208: LD_ADDR_VAR 0 9
27212: PUSH
27213: LD_VAR 0 47
27217: PUSH
27218: LD_VAR 0 48
27222: PUSH
27223: LD_VAR 0 49
27227: PUSH
27228: LD_VAR 0 50
27232: PUSH
27233: LD_VAR 0 51
27237: PUSH
27238: LD_VAR 0 52
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: PUSH
27251: LD_VAR 0 4
27255: PUSH
27256: LD_INT 1
27258: PLUS
27259: ARRAY
27260: ST_TO_ADDR
27261: GO 27452
27263: LD_INT 4
27265: DOUBLE
27266: EQUAL
27267: IFTRUE 27289
27269: LD_INT 5
27271: DOUBLE
27272: EQUAL
27273: IFTRUE 27289
27275: LD_INT 34
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27289
27281: LD_INT 37
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27289
27287: GO 27345
27289: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27290: LD_ADDR_VAR 0 9
27294: PUSH
27295: LD_VAR 0 53
27299: PUSH
27300: LD_VAR 0 54
27304: PUSH
27305: LD_VAR 0 55
27309: PUSH
27310: LD_VAR 0 56
27314: PUSH
27315: LD_VAR 0 57
27319: PUSH
27320: LD_VAR 0 58
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: PUSH
27333: LD_VAR 0 4
27337: PUSH
27338: LD_INT 1
27340: PLUS
27341: ARRAY
27342: ST_TO_ADDR
27343: GO 27452
27345: LD_INT 31
27347: DOUBLE
27348: EQUAL
27349: IFTRUE 27395
27351: LD_INT 32
27353: DOUBLE
27354: EQUAL
27355: IFTRUE 27395
27357: LD_INT 33
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27395
27363: LD_INT 27
27365: DOUBLE
27366: EQUAL
27367: IFTRUE 27395
27369: LD_INT 26
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27395
27375: LD_INT 28
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27395
27381: LD_INT 29
27383: DOUBLE
27384: EQUAL
27385: IFTRUE 27395
27387: LD_INT 30
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 27451
27395: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27396: LD_ADDR_VAR 0 9
27400: PUSH
27401: LD_VAR 0 59
27405: PUSH
27406: LD_VAR 0 60
27410: PUSH
27411: LD_VAR 0 61
27415: PUSH
27416: LD_VAR 0 62
27420: PUSH
27421: LD_VAR 0 63
27425: PUSH
27426: LD_VAR 0 64
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: PUSH
27439: LD_VAR 0 4
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: ARRAY
27448: ST_TO_ADDR
27449: GO 27452
27451: POP
// temp_list2 = [ ] ;
27452: LD_ADDR_VAR 0 10
27456: PUSH
27457: EMPTY
27458: ST_TO_ADDR
// for i in temp_list do
27459: LD_ADDR_VAR 0 8
27463: PUSH
27464: LD_VAR 0 9
27468: PUSH
27469: FOR_IN
27470: IFFALSE 27522
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27472: LD_ADDR_VAR 0 10
27476: PUSH
27477: LD_VAR 0 10
27481: PUSH
27482: LD_VAR 0 8
27486: PUSH
27487: LD_INT 1
27489: ARRAY
27490: PUSH
27491: LD_VAR 0 2
27495: PLUS
27496: PUSH
27497: LD_VAR 0 8
27501: PUSH
27502: LD_INT 2
27504: ARRAY
27505: PUSH
27506: LD_VAR 0 3
27510: PLUS
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: ADD
27519: ST_TO_ADDR
27520: GO 27469
27522: POP
27523: POP
// result = temp_list2 ;
27524: LD_ADDR_VAR 0 7
27528: PUSH
27529: LD_VAR 0 10
27533: ST_TO_ADDR
// end ;
27534: LD_VAR 0 7
27538: RET
// export function EnemyInRange ( unit , dist ) ; begin
27539: LD_INT 0
27541: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 255
27556: PPUSH
27557: LD_VAR 0 1
27561: PPUSH
27562: CALL_OW 250
27566: PPUSH
27567: LD_VAR 0 1
27571: PPUSH
27572: CALL_OW 251
27576: PPUSH
27577: LD_VAR 0 2
27581: PPUSH
27582: CALL 3274 0 4
27586: PUSH
27587: LD_INT 4
27589: ARRAY
27590: ST_TO_ADDR
// end ;
27591: LD_VAR 0 3
27595: RET
// export function PlayerSeeMe ( unit ) ; begin
27596: LD_INT 0
27598: PPUSH
// result := See ( your_side , unit ) ;
27599: LD_ADDR_VAR 0 2
27603: PUSH
27604: LD_OWVAR 2
27608: PPUSH
27609: LD_VAR 0 1
27613: PPUSH
27614: CALL_OW 292
27618: ST_TO_ADDR
// end ;
27619: LD_VAR 0 2
27623: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
27624: LD_INT 0
27626: PPUSH
27627: PPUSH
27628: PPUSH
27629: PPUSH
27630: PPUSH
// if not hexes then
27631: LD_VAR 0 2
27635: NOT
27636: IFFALSE 27640
// exit ;
27638: GO 27788
// dist := 9999 ;
27640: LD_ADDR_VAR 0 5
27644: PUSH
27645: LD_INT 9999
27647: ST_TO_ADDR
// for i = 1 to hexes do
27648: LD_ADDR_VAR 0 4
27652: PUSH
27653: DOUBLE
27654: LD_INT 1
27656: DEC
27657: ST_TO_ADDR
27658: LD_VAR 0 2
27662: PUSH
27663: FOR_TO
27664: IFFALSE 27776
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
27666: LD_VAR 0 1
27670: PPUSH
27671: LD_VAR 0 2
27675: PUSH
27676: LD_VAR 0 4
27680: ARRAY
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 2
27690: PUSH
27691: LD_VAR 0 4
27695: ARRAY
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: PPUSH
27701: CALL_OW 297
27705: PUSH
27706: LD_VAR 0 5
27710: LESS
27711: IFFALSE 27774
// begin hex := hexes [ i ] ;
27713: LD_ADDR_VAR 0 7
27717: PUSH
27718: LD_VAR 0 2
27722: PUSH
27723: LD_VAR 0 4
27727: ARRAY
27728: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27729: LD_ADDR_VAR 0 5
27733: PUSH
27734: LD_VAR 0 1
27738: PPUSH
27739: LD_VAR 0 2
27743: PUSH
27744: LD_VAR 0 4
27748: ARRAY
27749: PUSH
27750: LD_INT 1
27752: ARRAY
27753: PPUSH
27754: LD_VAR 0 2
27758: PUSH
27759: LD_VAR 0 4
27763: ARRAY
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: PPUSH
27769: CALL_OW 297
27773: ST_TO_ADDR
// end ; end ;
27774: GO 27663
27776: POP
27777: POP
// result := hex ;
27778: LD_ADDR_VAR 0 3
27782: PUSH
27783: LD_VAR 0 7
27787: ST_TO_ADDR
// end ;
27788: LD_VAR 0 3
27792: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
27793: LD_INT 0
27795: PPUSH
27796: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
27797: LD_VAR 0 1
27801: NOT
27802: PUSH
27803: LD_VAR 0 1
27807: PUSH
27808: LD_INT 21
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 23
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PPUSH
27832: CALL_OW 69
27836: IN
27837: NOT
27838: OR
27839: IFFALSE 27843
// exit ;
27841: GO 27890
// for i = 1 to 3 do
27843: LD_ADDR_VAR 0 3
27847: PUSH
27848: DOUBLE
27849: LD_INT 1
27851: DEC
27852: ST_TO_ADDR
27853: LD_INT 3
27855: PUSH
27856: FOR_TO
27857: IFFALSE 27888
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 250
27868: PPUSH
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 251
27878: PPUSH
27879: LD_INT 1
27881: PPUSH
27882: CALL_OW 453
27886: GO 27856
27888: POP
27889: POP
// end ;
27890: LD_VAR 0 2
27894: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
27895: LD_INT 0
27897: PPUSH
27898: PPUSH
27899: PPUSH
27900: PPUSH
27901: PPUSH
27902: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
27903: LD_VAR 0 1
27907: NOT
27908: PUSH
27909: LD_VAR 0 2
27913: NOT
27914: OR
27915: PUSH
27916: LD_VAR 0 1
27920: PPUSH
27921: CALL_OW 314
27925: OR
27926: IFFALSE 27930
// exit ;
27928: GO 28371
// x := GetX ( enemy_unit ) ;
27930: LD_ADDR_VAR 0 7
27934: PUSH
27935: LD_VAR 0 2
27939: PPUSH
27940: CALL_OW 250
27944: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
27945: LD_ADDR_VAR 0 8
27949: PUSH
27950: LD_VAR 0 2
27954: PPUSH
27955: CALL_OW 251
27959: ST_TO_ADDR
// if not x or not y then
27960: LD_VAR 0 7
27964: NOT
27965: PUSH
27966: LD_VAR 0 8
27970: NOT
27971: OR
27972: IFFALSE 27976
// exit ;
27974: GO 28371
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
27976: LD_ADDR_VAR 0 6
27980: PUSH
27981: LD_VAR 0 7
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: LD_INT 4
27991: PPUSH
27992: CALL_OW 272
27996: PUSH
27997: LD_VAR 0 8
28001: PPUSH
28002: LD_INT 0
28004: PPUSH
28005: LD_INT 4
28007: PPUSH
28008: CALL_OW 273
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_VAR 0 7
28021: PPUSH
28022: LD_INT 1
28024: PPUSH
28025: LD_INT 4
28027: PPUSH
28028: CALL_OW 272
28032: PUSH
28033: LD_VAR 0 8
28037: PPUSH
28038: LD_INT 1
28040: PPUSH
28041: LD_INT 4
28043: PPUSH
28044: CALL_OW 273
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_VAR 0 7
28057: PPUSH
28058: LD_INT 2
28060: PPUSH
28061: LD_INT 4
28063: PPUSH
28064: CALL_OW 272
28068: PUSH
28069: LD_VAR 0 8
28073: PPUSH
28074: LD_INT 2
28076: PPUSH
28077: LD_INT 4
28079: PPUSH
28080: CALL_OW 273
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_VAR 0 7
28093: PPUSH
28094: LD_INT 3
28096: PPUSH
28097: LD_INT 4
28099: PPUSH
28100: CALL_OW 272
28104: PUSH
28105: LD_VAR 0 8
28109: PPUSH
28110: LD_INT 3
28112: PPUSH
28113: LD_INT 4
28115: PPUSH
28116: CALL_OW 273
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_VAR 0 7
28129: PPUSH
28130: LD_INT 4
28132: PPUSH
28133: LD_INT 4
28135: PPUSH
28136: CALL_OW 272
28140: PUSH
28141: LD_VAR 0 8
28145: PPUSH
28146: LD_INT 4
28148: PPUSH
28149: LD_INT 4
28151: PPUSH
28152: CALL_OW 273
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_VAR 0 7
28165: PPUSH
28166: LD_INT 5
28168: PPUSH
28169: LD_INT 4
28171: PPUSH
28172: CALL_OW 272
28176: PUSH
28177: LD_VAR 0 8
28181: PPUSH
28182: LD_INT 5
28184: PPUSH
28185: LD_INT 4
28187: PPUSH
28188: CALL_OW 273
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// for i = tmp downto 1 do
28205: LD_ADDR_VAR 0 4
28209: PUSH
28210: DOUBLE
28211: LD_VAR 0 6
28215: INC
28216: ST_TO_ADDR
28217: LD_INT 1
28219: PUSH
28220: FOR_DOWNTO
28221: IFFALSE 28322
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28223: LD_VAR 0 6
28227: PUSH
28228: LD_VAR 0 4
28232: ARRAY
28233: PUSH
28234: LD_INT 1
28236: ARRAY
28237: PPUSH
28238: LD_VAR 0 6
28242: PUSH
28243: LD_VAR 0 4
28247: ARRAY
28248: PUSH
28249: LD_INT 2
28251: ARRAY
28252: PPUSH
28253: CALL_OW 488
28257: NOT
28258: PUSH
28259: LD_VAR 0 6
28263: PUSH
28264: LD_VAR 0 4
28268: ARRAY
28269: PUSH
28270: LD_INT 1
28272: ARRAY
28273: PPUSH
28274: LD_VAR 0 6
28278: PUSH
28279: LD_VAR 0 4
28283: ARRAY
28284: PUSH
28285: LD_INT 2
28287: ARRAY
28288: PPUSH
28289: CALL_OW 428
28293: PUSH
28294: LD_INT 0
28296: NONEQUAL
28297: OR
28298: IFFALSE 28320
// tmp := Delete ( tmp , i ) ;
28300: LD_ADDR_VAR 0 6
28304: PUSH
28305: LD_VAR 0 6
28309: PPUSH
28310: LD_VAR 0 4
28314: PPUSH
28315: CALL_OW 3
28319: ST_TO_ADDR
28320: GO 28220
28322: POP
28323: POP
// j := GetClosestHex ( unit , tmp ) ;
28324: LD_ADDR_VAR 0 5
28328: PUSH
28329: LD_VAR 0 1
28333: PPUSH
28334: LD_VAR 0 6
28338: PPUSH
28339: CALL 27624 0 2
28343: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: LD_VAR 0 5
28353: PUSH
28354: LD_INT 1
28356: ARRAY
28357: PPUSH
28358: LD_VAR 0 5
28362: PUSH
28363: LD_INT 2
28365: ARRAY
28366: PPUSH
28367: CALL_OW 111
// end ;
28371: LD_VAR 0 3
28375: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
28376: LD_INT 0
28378: PPUSH
28379: PPUSH
28380: PPUSH
28381: PPUSH
28382: PPUSH
28383: PPUSH
28384: PPUSH
28385: PPUSH
28386: PPUSH
28387: PPUSH
28388: PPUSH
28389: PPUSH
28390: PPUSH
28391: PPUSH
28392: PPUSH
28393: PPUSH
28394: PPUSH
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
28401: PPUSH
28402: PPUSH
28403: PPUSH
// if not list then
28404: LD_VAR 0 1
28408: NOT
28409: IFFALSE 28413
// exit ;
28411: GO 30994
// base := list [ 1 ] ;
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_VAR 0 1
28422: PUSH
28423: LD_INT 1
28425: ARRAY
28426: ST_TO_ADDR
// group := list [ 2 ] ;
28427: LD_ADDR_VAR 0 4
28431: PUSH
28432: LD_VAR 0 1
28436: PUSH
28437: LD_INT 2
28439: ARRAY
28440: ST_TO_ADDR
// path := list [ 3 ] ;
28441: LD_ADDR_VAR 0 5
28445: PUSH
28446: LD_VAR 0 1
28450: PUSH
28451: LD_INT 3
28453: ARRAY
28454: ST_TO_ADDR
// flags := list [ 4 ] ;
28455: LD_ADDR_VAR 0 6
28459: PUSH
28460: LD_VAR 0 1
28464: PUSH
28465: LD_INT 4
28467: ARRAY
28468: ST_TO_ADDR
// mined := [ ] ;
28469: LD_ADDR_VAR 0 25
28473: PUSH
28474: EMPTY
28475: ST_TO_ADDR
// bombed := [ ] ;
28476: LD_ADDR_VAR 0 26
28480: PUSH
28481: EMPTY
28482: ST_TO_ADDR
// if not group or not path then
28483: LD_VAR 0 4
28487: NOT
28488: PUSH
28489: LD_VAR 0 5
28493: NOT
28494: OR
28495: IFFALSE 28499
// exit ;
28497: GO 30994
// if flags then
28499: LD_VAR 0 6
28503: IFFALSE 28647
// begin f_ignore_area := flags [ 1 ] ;
28505: LD_ADDR_VAR 0 15
28509: PUSH
28510: LD_VAR 0 6
28514: PUSH
28515: LD_INT 1
28517: ARRAY
28518: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
28519: LD_ADDR_VAR 0 16
28523: PUSH
28524: LD_VAR 0 6
28528: PUSH
28529: LD_INT 2
28531: ARRAY
28532: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
28533: LD_ADDR_VAR 0 17
28537: PUSH
28538: LD_VAR 0 6
28542: PUSH
28543: LD_INT 3
28545: ARRAY
28546: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
28547: LD_ADDR_VAR 0 18
28551: PUSH
28552: LD_VAR 0 6
28556: PUSH
28557: LD_INT 4
28559: ARRAY
28560: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
28561: LD_ADDR_VAR 0 19
28565: PUSH
28566: LD_VAR 0 6
28570: PUSH
28571: LD_INT 5
28573: ARRAY
28574: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
28575: LD_ADDR_VAR 0 20
28579: PUSH
28580: LD_VAR 0 6
28584: PUSH
28585: LD_INT 6
28587: ARRAY
28588: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
28589: LD_ADDR_VAR 0 21
28593: PUSH
28594: LD_VAR 0 6
28598: PUSH
28599: LD_INT 7
28601: ARRAY
28602: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
28603: LD_ADDR_VAR 0 22
28607: PUSH
28608: LD_VAR 0 6
28612: PUSH
28613: LD_INT 8
28615: ARRAY
28616: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
28617: LD_ADDR_VAR 0 23
28621: PUSH
28622: LD_VAR 0 6
28626: PUSH
28627: LD_INT 9
28629: ARRAY
28630: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
28631: LD_ADDR_VAR 0 24
28635: PUSH
28636: LD_VAR 0 6
28640: PUSH
28641: LD_INT 10
28643: ARRAY
28644: ST_TO_ADDR
// end else
28645: GO 28727
// begin f_ignore_area := false ;
28647: LD_ADDR_VAR 0 15
28651: PUSH
28652: LD_INT 0
28654: ST_TO_ADDR
// f_capture := false ;
28655: LD_ADDR_VAR 0 16
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// f_ignore_civ := false ;
28663: LD_ADDR_VAR 0 17
28667: PUSH
28668: LD_INT 0
28670: ST_TO_ADDR
// f_murder := false ;
28671: LD_ADDR_VAR 0 18
28675: PUSH
28676: LD_INT 0
28678: ST_TO_ADDR
// f_mines := false ;
28679: LD_ADDR_VAR 0 19
28683: PUSH
28684: LD_INT 0
28686: ST_TO_ADDR
// f_repair := false ;
28687: LD_ADDR_VAR 0 20
28691: PUSH
28692: LD_INT 0
28694: ST_TO_ADDR
// f_heal := false ;
28695: LD_ADDR_VAR 0 21
28699: PUSH
28700: LD_INT 0
28702: ST_TO_ADDR
// f_spacetime := false ;
28703: LD_ADDR_VAR 0 22
28707: PUSH
28708: LD_INT 0
28710: ST_TO_ADDR
// f_attack_depot := false ;
28711: LD_ADDR_VAR 0 23
28715: PUSH
28716: LD_INT 0
28718: ST_TO_ADDR
// f_crawl := false ;
28719: LD_ADDR_VAR 0 24
28723: PUSH
28724: LD_INT 0
28726: ST_TO_ADDR
// end ; units_path := [ ] ;
28727: LD_ADDR_VAR 0 14
28731: PUSH
28732: EMPTY
28733: ST_TO_ADDR
// for i = 1 to group do
28734: LD_ADDR_VAR 0 7
28738: PUSH
28739: DOUBLE
28740: LD_INT 1
28742: DEC
28743: ST_TO_ADDR
28744: LD_VAR 0 4
28748: PUSH
28749: FOR_TO
28750: IFFALSE 28779
// begin units_path := Replace ( units_path , i , path ) ;
28752: LD_ADDR_VAR 0 14
28756: PUSH
28757: LD_VAR 0 14
28761: PPUSH
28762: LD_VAR 0 7
28766: PPUSH
28767: LD_VAR 0 5
28771: PPUSH
28772: CALL_OW 1
28776: ST_TO_ADDR
// end ;
28777: GO 28749
28779: POP
28780: POP
// repeat for i = group downto 1 do
28781: LD_ADDR_VAR 0 7
28785: PUSH
28786: DOUBLE
28787: LD_VAR 0 4
28791: INC
28792: ST_TO_ADDR
28793: LD_INT 1
28795: PUSH
28796: FOR_DOWNTO
28797: IFFALSE 30976
// begin tmp := [ ] ;
28799: LD_ADDR_VAR 0 12
28803: PUSH
28804: EMPTY
28805: ST_TO_ADDR
// attacking := false ;
28806: LD_ADDR_VAR 0 27
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
28814: LD_VAR 0 4
28818: PUSH
28819: LD_VAR 0 7
28823: ARRAY
28824: PPUSH
28825: CALL_OW 301
28829: PUSH
28830: LD_VAR 0 4
28834: PUSH
28835: LD_VAR 0 7
28839: ARRAY
28840: NOT
28841: OR
28842: IFFALSE 28886
// begin group := Delete ( group , i ) ;
28844: LD_ADDR_VAR 0 4
28848: PUSH
28849: LD_VAR 0 4
28853: PPUSH
28854: LD_VAR 0 7
28858: PPUSH
28859: CALL_OW 3
28863: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
28864: LD_ADDR_VAR 0 14
28868: PUSH
28869: LD_VAR 0 14
28873: PPUSH
28874: LD_VAR 0 7
28878: PPUSH
28879: CALL_OW 3
28883: ST_TO_ADDR
// continue ;
28884: GO 28796
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
28886: LD_VAR 0 4
28890: PUSH
28891: LD_VAR 0 7
28895: ARRAY
28896: PPUSH
28897: LD_INT 10
28899: PPUSH
28900: CALL 27539 0 2
28904: NOT
28905: PUSH
28906: LD_VAR 0 14
28910: PUSH
28911: LD_VAR 0 7
28915: ARRAY
28916: PUSH
28917: EMPTY
28918: EQUAL
28919: NOT
28920: AND
28921: IFFALSE 29205
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
28923: LD_VAR 0 4
28927: PUSH
28928: LD_VAR 0 7
28932: ARRAY
28933: PPUSH
28934: CALL_OW 262
28938: PUSH
28939: LD_INT 1
28941: PUSH
28942: LD_INT 2
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: IN
28949: IFFALSE 29008
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
28951: LD_VAR 0 4
28955: PUSH
28956: LD_VAR 0 7
28960: ARRAY
28961: PPUSH
28962: CALL_OW 261
28966: PUSH
28967: LD_INT 10
28969: LESS
28970: PUSH
28971: LD_VAR 0 4
28975: PUSH
28976: LD_VAR 0 7
28980: ARRAY
28981: PPUSH
28982: CALL 27596 0 1
28986: NOT
28987: AND
28988: IFFALSE 29008
// SetFuel ( group [ i ] , 12 ) ;
28990: LD_VAR 0 4
28994: PUSH
28995: LD_VAR 0 7
28999: ARRAY
29000: PPUSH
29001: LD_INT 12
29003: PPUSH
29004: CALL_OW 240
// if units_path [ i ] then
29008: LD_VAR 0 14
29012: PUSH
29013: LD_VAR 0 7
29017: ARRAY
29018: IFFALSE 29203
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29020: LD_VAR 0 4
29024: PUSH
29025: LD_VAR 0 7
29029: ARRAY
29030: PPUSH
29031: LD_VAR 0 14
29035: PUSH
29036: LD_VAR 0 7
29040: ARRAY
29041: PUSH
29042: LD_INT 1
29044: ARRAY
29045: PUSH
29046: LD_INT 1
29048: ARRAY
29049: PPUSH
29050: LD_VAR 0 14
29054: PUSH
29055: LD_VAR 0 7
29059: ARRAY
29060: PUSH
29061: LD_INT 1
29063: ARRAY
29064: PUSH
29065: LD_INT 2
29067: ARRAY
29068: PPUSH
29069: CALL_OW 297
29073: PUSH
29074: LD_INT 6
29076: GREATER
29077: IFFALSE 29152
// begin if not HasTask ( group [ i ] ) then
29079: LD_VAR 0 4
29083: PUSH
29084: LD_VAR 0 7
29088: ARRAY
29089: PPUSH
29090: CALL_OW 314
29094: NOT
29095: IFFALSE 29150
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
29097: LD_VAR 0 4
29101: PUSH
29102: LD_VAR 0 7
29106: ARRAY
29107: PPUSH
29108: LD_VAR 0 14
29112: PUSH
29113: LD_VAR 0 7
29117: ARRAY
29118: PUSH
29119: LD_INT 1
29121: ARRAY
29122: PUSH
29123: LD_INT 1
29125: ARRAY
29126: PPUSH
29127: LD_VAR 0 14
29131: PUSH
29132: LD_VAR 0 7
29136: ARRAY
29137: PUSH
29138: LD_INT 1
29140: ARRAY
29141: PUSH
29142: LD_INT 2
29144: ARRAY
29145: PPUSH
29146: CALL_OW 114
// end else
29150: GO 29203
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
29152: LD_ADDR_VAR 0 13
29156: PUSH
29157: LD_VAR 0 14
29161: PUSH
29162: LD_VAR 0 7
29166: ARRAY
29167: PPUSH
29168: LD_INT 1
29170: PPUSH
29171: CALL_OW 3
29175: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
29176: LD_ADDR_VAR 0 14
29180: PUSH
29181: LD_VAR 0 14
29185: PPUSH
29186: LD_VAR 0 7
29190: PPUSH
29191: LD_VAR 0 13
29195: PPUSH
29196: CALL_OW 1
29200: ST_TO_ADDR
// continue ;
29201: GO 28796
// end ; end ; end else
29203: GO 30974
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
29205: LD_ADDR_VAR 0 12
29209: PUSH
29210: LD_INT 81
29212: PUSH
29213: LD_VAR 0 4
29217: PUSH
29218: LD_VAR 0 7
29222: ARRAY
29223: PPUSH
29224: CALL_OW 255
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PPUSH
29233: CALL_OW 69
29237: ST_TO_ADDR
// if not tmp then
29238: LD_VAR 0 12
29242: NOT
29243: IFFALSE 29247
// continue ;
29245: GO 28796
// if f_ignore_area then
29247: LD_VAR 0 15
29251: IFFALSE 29339
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
29253: LD_ADDR_VAR 0 13
29257: PUSH
29258: LD_VAR 0 12
29262: PPUSH
29263: LD_INT 3
29265: PUSH
29266: LD_INT 92
29268: PUSH
29269: LD_VAR 0 15
29273: PUSH
29274: LD_INT 1
29276: ARRAY
29277: PUSH
29278: LD_VAR 0 15
29282: PUSH
29283: LD_INT 2
29285: ARRAY
29286: PUSH
29287: LD_VAR 0 15
29291: PUSH
29292: LD_INT 3
29294: ARRAY
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PPUSH
29306: CALL_OW 72
29310: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
29311: LD_VAR 0 12
29315: PUSH
29316: LD_VAR 0 13
29320: DIFF
29321: IFFALSE 29339
// tmp := tmp diff tmp2 ;
29323: LD_ADDR_VAR 0 12
29327: PUSH
29328: LD_VAR 0 12
29332: PUSH
29333: LD_VAR 0 13
29337: DIFF
29338: ST_TO_ADDR
// end ; if not f_murder then
29339: LD_VAR 0 18
29343: NOT
29344: IFFALSE 29402
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
29346: LD_ADDR_VAR 0 13
29350: PUSH
29351: LD_VAR 0 12
29355: PPUSH
29356: LD_INT 3
29358: PUSH
29359: LD_INT 50
29361: PUSH
29362: EMPTY
29363: LIST
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PPUSH
29369: CALL_OW 72
29373: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
29374: LD_VAR 0 12
29378: PUSH
29379: LD_VAR 0 13
29383: DIFF
29384: IFFALSE 29402
// tmp := tmp diff tmp2 ;
29386: LD_ADDR_VAR 0 12
29390: PUSH
29391: LD_VAR 0 12
29395: PUSH
29396: LD_VAR 0 13
29400: DIFF
29401: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
29402: LD_ADDR_VAR 0 12
29406: PUSH
29407: LD_VAR 0 4
29411: PUSH
29412: LD_VAR 0 7
29416: ARRAY
29417: PPUSH
29418: LD_VAR 0 12
29422: PPUSH
29423: LD_INT 1
29425: PPUSH
29426: LD_INT 1
29428: PPUSH
29429: CALL 2813 0 4
29433: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 17 then
29434: LD_VAR 0 4
29438: PUSH
29439: LD_VAR 0 7
29443: ARRAY
29444: PPUSH
29445: CALL_OW 257
29449: PUSH
29450: LD_INT 17
29452: EQUAL
29453: IFFALSE 29581
// begin attacking := false ;
29455: LD_ADDR_VAR 0 27
29459: PUSH
29460: LD_INT 0
29462: ST_TO_ADDR
// k := 5 ;
29463: LD_ADDR_VAR 0 9
29467: PUSH
29468: LD_INT 5
29470: ST_TO_ADDR
// if tmp < k then
29471: LD_VAR 0 12
29475: PUSH
29476: LD_VAR 0 9
29480: LESS
29481: IFFALSE 29493
// k := tmp ;
29483: LD_ADDR_VAR 0 9
29487: PUSH
29488: LD_VAR 0 12
29492: ST_TO_ADDR
// for j = 1 to k do
29493: LD_ADDR_VAR 0 8
29497: PUSH
29498: DOUBLE
29499: LD_INT 1
29501: DEC
29502: ST_TO_ADDR
29503: LD_VAR 0 9
29507: PUSH
29508: FOR_TO
29509: IFFALSE 29579
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
29511: LD_VAR 0 12
29515: PUSH
29516: LD_VAR 0 8
29520: ARRAY
29521: PUSH
29522: LD_VAR 0 12
29526: PPUSH
29527: LD_INT 58
29529: PUSH
29530: EMPTY
29531: LIST
29532: PPUSH
29533: CALL_OW 72
29537: IN
29538: NOT
29539: IFFALSE 29577
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
29541: LD_VAR 0 4
29545: PUSH
29546: LD_VAR 0 7
29550: ARRAY
29551: PPUSH
29552: LD_VAR 0 12
29556: PUSH
29557: LD_VAR 0 8
29561: ARRAY
29562: PPUSH
29563: CALL_OW 115
// attacking := true ;
29567: LD_ADDR_VAR 0 27
29571: PUSH
29572: LD_INT 1
29574: ST_TO_ADDR
// continue ;
29575: GO 29508
// end ; end ;
29577: GO 29508
29579: POP
29580: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
29581: LD_VAR 0 4
29585: PUSH
29586: LD_VAR 0 7
29590: ARRAY
29591: PPUSH
29592: CALL_OW 257
29596: PUSH
29597: LD_INT 8
29599: EQUAL
29600: PUSH
29601: LD_VAR 0 4
29605: PUSH
29606: LD_VAR 0 7
29610: ARRAY
29611: PPUSH
29612: CALL_OW 264
29616: PUSH
29617: LD_INT 28
29619: PUSH
29620: LD_INT 45
29622: PUSH
29623: LD_INT 7
29625: PUSH
29626: LD_INT 47
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: IN
29635: OR
29636: IFFALSE 29866
// begin attacking := false ;
29638: LD_ADDR_VAR 0 27
29642: PUSH
29643: LD_INT 0
29645: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
29646: LD_VAR 0 12
29650: PUSH
29651: LD_INT 1
29653: ARRAY
29654: PPUSH
29655: CALL_OW 266
29659: PUSH
29660: LD_INT 32
29662: PUSH
29663: LD_INT 31
29665: PUSH
29666: LD_INT 33
29668: PUSH
29669: LD_INT 4
29671: PUSH
29672: LD_INT 5
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: IN
29682: IFFALSE 29866
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
29684: LD_ADDR_VAR 0 9
29688: PUSH
29689: LD_VAR 0 12
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: CALL_OW 266
29702: PPUSH
29703: LD_VAR 0 12
29707: PUSH
29708: LD_INT 1
29710: ARRAY
29711: PPUSH
29712: CALL_OW 250
29716: PPUSH
29717: LD_VAR 0 12
29721: PUSH
29722: LD_INT 1
29724: ARRAY
29725: PPUSH
29726: CALL_OW 251
29730: PPUSH
29731: LD_VAR 0 12
29735: PUSH
29736: LD_INT 1
29738: ARRAY
29739: PPUSH
29740: CALL_OW 254
29744: PPUSH
29745: LD_VAR 0 12
29749: PUSH
29750: LD_INT 1
29752: ARRAY
29753: PPUSH
29754: CALL_OW 248
29758: PPUSH
29759: LD_INT 0
29761: PPUSH
29762: CALL 9000 0 6
29766: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
29767: LD_ADDR_VAR 0 8
29771: PUSH
29772: LD_VAR 0 4
29776: PUSH
29777: LD_VAR 0 7
29781: ARRAY
29782: PPUSH
29783: LD_VAR 0 9
29787: PPUSH
29788: CALL 27624 0 2
29792: ST_TO_ADDR
// if j then
29793: LD_VAR 0 8
29797: IFFALSE 29866
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29799: LD_VAR 0 8
29803: PUSH
29804: LD_INT 1
29806: ARRAY
29807: PPUSH
29808: LD_VAR 0 8
29812: PUSH
29813: LD_INT 2
29815: ARRAY
29816: PPUSH
29817: CALL_OW 488
29821: IFFALSE 29866
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
29823: LD_VAR 0 4
29827: PUSH
29828: LD_VAR 0 7
29832: ARRAY
29833: PPUSH
29834: LD_VAR 0 8
29838: PUSH
29839: LD_INT 1
29841: ARRAY
29842: PPUSH
29843: LD_VAR 0 8
29847: PUSH
29848: LD_INT 2
29850: ARRAY
29851: PPUSH
29852: CALL_OW 116
// attacking := true ;
29856: LD_ADDR_VAR 0 27
29860: PUSH
29861: LD_INT 1
29863: ST_TO_ADDR
// continue ;
29864: GO 28796
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
29866: LD_VAR 0 4
29870: PUSH
29871: LD_VAR 0 7
29875: ARRAY
29876: PPUSH
29877: CALL_OW 265
29881: PUSH
29882: LD_INT 11
29884: EQUAL
29885: IFFALSE 30163
// begin k := 10 ;
29887: LD_ADDR_VAR 0 9
29891: PUSH
29892: LD_INT 10
29894: ST_TO_ADDR
// x := 0 ;
29895: LD_ADDR_VAR 0 10
29899: PUSH
29900: LD_INT 0
29902: ST_TO_ADDR
// if tmp < k then
29903: LD_VAR 0 12
29907: PUSH
29908: LD_VAR 0 9
29912: LESS
29913: IFFALSE 29925
// k := tmp ;
29915: LD_ADDR_VAR 0 9
29919: PUSH
29920: LD_VAR 0 12
29924: ST_TO_ADDR
// for j = k downto 1 do
29925: LD_ADDR_VAR 0 8
29929: PUSH
29930: DOUBLE
29931: LD_VAR 0 9
29935: INC
29936: ST_TO_ADDR
29937: LD_INT 1
29939: PUSH
29940: FOR_DOWNTO
29941: IFFALSE 30016
// begin if GetType ( tmp [ j ] ) = unit_human then
29943: LD_VAR 0 12
29947: PUSH
29948: LD_VAR 0 8
29952: ARRAY
29953: PPUSH
29954: CALL_OW 247
29958: PUSH
29959: LD_INT 1
29961: EQUAL
29962: IFFALSE 30014
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
29964: LD_VAR 0 4
29968: PUSH
29969: LD_VAR 0 7
29973: ARRAY
29974: PPUSH
29975: LD_VAR 0 12
29979: PUSH
29980: LD_VAR 0 8
29984: ARRAY
29985: PPUSH
29986: CALL 27895 0 2
// x := tmp [ j ] ;
29990: LD_ADDR_VAR 0 10
29994: PUSH
29995: LD_VAR 0 12
29999: PUSH
30000: LD_VAR 0 8
30004: ARRAY
30005: ST_TO_ADDR
// attacking := true ;
30006: LD_ADDR_VAR 0 27
30010: PUSH
30011: LD_INT 1
30013: ST_TO_ADDR
// end ; end ;
30014: GO 29940
30016: POP
30017: POP
// if not x then
30018: LD_VAR 0 10
30022: NOT
30023: IFFALSE 30163
// begin attacking := true ;
30025: LD_ADDR_VAR 0 27
30029: PUSH
30030: LD_INT 1
30032: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
30033: LD_VAR 0 4
30037: PUSH
30038: LD_VAR 0 7
30042: ARRAY
30043: PPUSH
30044: CALL_OW 250
30048: PPUSH
30049: LD_VAR 0 4
30053: PUSH
30054: LD_VAR 0 7
30058: ARRAY
30059: PPUSH
30060: CALL_OW 251
30064: PPUSH
30065: CALL_OW 546
30069: PUSH
30070: LD_INT 2
30072: ARRAY
30073: PUSH
30074: LD_VAR 0 12
30078: PUSH
30079: LD_INT 1
30081: ARRAY
30082: PPUSH
30083: CALL_OW 250
30087: PPUSH
30088: LD_VAR 0 12
30092: PUSH
30093: LD_INT 1
30095: ARRAY
30096: PPUSH
30097: CALL_OW 251
30101: PPUSH
30102: CALL_OW 546
30106: PUSH
30107: LD_INT 2
30109: ARRAY
30110: EQUAL
30111: IFFALSE 30139
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
30113: LD_VAR 0 4
30117: PUSH
30118: LD_VAR 0 7
30122: ARRAY
30123: PPUSH
30124: LD_VAR 0 12
30128: PUSH
30129: LD_INT 1
30131: ARRAY
30132: PPUSH
30133: CALL 27895 0 2
30137: GO 30163
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
30139: LD_VAR 0 4
30143: PUSH
30144: LD_VAR 0 7
30148: ARRAY
30149: PPUSH
30150: LD_VAR 0 12
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PPUSH
30159: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
30163: LD_VAR 0 4
30167: PUSH
30168: LD_VAR 0 7
30172: ARRAY
30173: PPUSH
30174: CALL_OW 264
30178: PUSH
30179: LD_INT 29
30181: EQUAL
30182: IFFALSE 30442
// begin if WantsToAttack ( group [ i ] ) in bombed then
30184: LD_VAR 0 4
30188: PUSH
30189: LD_VAR 0 7
30193: ARRAY
30194: PPUSH
30195: CALL_OW 319
30199: PUSH
30200: LD_VAR 0 26
30204: IN
30205: IFFALSE 30209
// continue ;
30207: GO 28796
// k := 8 ;
30209: LD_ADDR_VAR 0 9
30213: PUSH
30214: LD_INT 8
30216: ST_TO_ADDR
// x := 0 ;
30217: LD_ADDR_VAR 0 10
30221: PUSH
30222: LD_INT 0
30224: ST_TO_ADDR
// if tmp < k then
30225: LD_VAR 0 12
30229: PUSH
30230: LD_VAR 0 9
30234: LESS
30235: IFFALSE 30247
// k := tmp ;
30237: LD_ADDR_VAR 0 9
30241: PUSH
30242: LD_VAR 0 12
30246: ST_TO_ADDR
// for j = 1 to k do
30247: LD_ADDR_VAR 0 8
30251: PUSH
30252: DOUBLE
30253: LD_INT 1
30255: DEC
30256: ST_TO_ADDR
30257: LD_VAR 0 9
30261: PUSH
30262: FOR_TO
30263: IFFALSE 30387
// begin if GetType ( tmp [ j ] ) = unit_building then
30265: LD_VAR 0 12
30269: PUSH
30270: LD_VAR 0 8
30274: ARRAY
30275: PPUSH
30276: CALL_OW 247
30280: PUSH
30281: LD_INT 3
30283: EQUAL
30284: IFFALSE 30385
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
30286: LD_VAR 0 12
30290: PUSH
30291: LD_VAR 0 8
30295: ARRAY
30296: PUSH
30297: LD_VAR 0 26
30301: IN
30302: NOT
30303: PUSH
30304: LD_VAR 0 12
30308: PUSH
30309: LD_VAR 0 8
30313: ARRAY
30314: PPUSH
30315: CALL_OW 313
30319: AND
30320: IFFALSE 30385
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30322: LD_VAR 0 4
30326: PUSH
30327: LD_VAR 0 7
30331: ARRAY
30332: PPUSH
30333: LD_VAR 0 12
30337: PUSH
30338: LD_VAR 0 8
30342: ARRAY
30343: PPUSH
30344: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
30348: LD_ADDR_VAR 0 26
30352: PUSH
30353: LD_VAR 0 26
30357: PPUSH
30358: LD_VAR 0 26
30362: PUSH
30363: LD_INT 1
30365: PLUS
30366: PPUSH
30367: LD_VAR 0 12
30371: PUSH
30372: LD_VAR 0 8
30376: ARRAY
30377: PPUSH
30378: CALL_OW 1
30382: ST_TO_ADDR
// break ;
30383: GO 30387
// end ; end ;
30385: GO 30262
30387: POP
30388: POP
// attacking := true ;
30389: LD_ADDR_VAR 0 27
30393: PUSH
30394: LD_INT 1
30396: ST_TO_ADDR
// if GetLives ( group [ i ] ) < 500 then
30397: LD_VAR 0 4
30401: PUSH
30402: LD_VAR 0 7
30406: ARRAY
30407: PPUSH
30408: CALL_OW 256
30412: PUSH
30413: LD_INT 500
30415: LESS
30416: IFFALSE 30442
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
30418: LD_VAR 0 4
30422: PUSH
30423: LD_VAR 0 7
30427: ARRAY
30428: PPUSH
30429: LD_VAR 0 12
30433: PUSH
30434: LD_INT 1
30436: ARRAY
30437: PPUSH
30438: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
30442: LD_VAR 0 4
30446: PUSH
30447: LD_VAR 0 7
30451: ARRAY
30452: PPUSH
30453: CALL_OW 256
30457: PUSH
30458: LD_INT 250
30460: LESS
30461: PUSH
30462: LD_VAR 0 4
30466: PUSH
30467: LD_VAR 0 7
30471: ARRAY
30472: PUSH
30473: LD_INT 21
30475: PUSH
30476: LD_INT 2
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 23
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PPUSH
30497: CALL_OW 69
30501: IN
30502: AND
30503: IFFALSE 30628
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
30505: LD_ADDR_VAR 0 9
30509: PUSH
30510: LD_OWVAR 3
30514: PUSH
30515: LD_VAR 0 4
30519: PUSH
30520: LD_VAR 0 7
30524: ARRAY
30525: DIFF
30526: PPUSH
30527: LD_VAR 0 4
30531: PUSH
30532: LD_VAR 0 7
30536: ARRAY
30537: PPUSH
30538: CALL_OW 74
30542: ST_TO_ADDR
// if not k then
30543: LD_VAR 0 9
30547: NOT
30548: IFFALSE 30552
// continue ;
30550: GO 28796
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
30552: LD_VAR 0 9
30556: PUSH
30557: LD_INT 81
30559: PUSH
30560: LD_VAR 0 4
30564: PUSH
30565: LD_VAR 0 7
30569: ARRAY
30570: PPUSH
30571: CALL_OW 255
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PPUSH
30580: CALL_OW 69
30584: IN
30585: PUSH
30586: LD_VAR 0 9
30590: PPUSH
30591: LD_VAR 0 4
30595: PUSH
30596: LD_VAR 0 7
30600: ARRAY
30601: PPUSH
30602: CALL_OW 296
30606: PUSH
30607: LD_INT 5
30609: LESS
30610: AND
30611: IFFALSE 30628
// ComAutodestruct ( group [ i ] ) ;
30613: LD_VAR 0 4
30617: PUSH
30618: LD_VAR 0 7
30622: ARRAY
30623: PPUSH
30624: CALL 27793 0 1
// end ; if f_attack_depot then
30628: LD_VAR 0 23
30632: IFFALSE 30744
// begin k := 6 ;
30634: LD_ADDR_VAR 0 9
30638: PUSH
30639: LD_INT 6
30641: ST_TO_ADDR
// if tmp < k then
30642: LD_VAR 0 12
30646: PUSH
30647: LD_VAR 0 9
30651: LESS
30652: IFFALSE 30664
// k := tmp ;
30654: LD_ADDR_VAR 0 9
30658: PUSH
30659: LD_VAR 0 12
30663: ST_TO_ADDR
// for j = 1 to k do
30664: LD_ADDR_VAR 0 8
30668: PUSH
30669: DOUBLE
30670: LD_INT 1
30672: DEC
30673: ST_TO_ADDR
30674: LD_VAR 0 9
30678: PUSH
30679: FOR_TO
30680: IFFALSE 30742
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
30682: LD_VAR 0 8
30686: PPUSH
30687: CALL_OW 266
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: IN
30702: IFFALSE 30740
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30704: LD_VAR 0 4
30708: PUSH
30709: LD_VAR 0 7
30713: ARRAY
30714: PPUSH
30715: LD_VAR 0 12
30719: PUSH
30720: LD_VAR 0 8
30724: ARRAY
30725: PPUSH
30726: CALL_OW 115
// attacking := true ;
30730: LD_ADDR_VAR 0 27
30734: PUSH
30735: LD_INT 1
30737: ST_TO_ADDR
// break ;
30738: GO 30742
// end ;
30740: GO 30679
30742: POP
30743: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
30744: LD_VAR 0 4
30748: PUSH
30749: LD_VAR 0 7
30753: ARRAY
30754: PPUSH
30755: CALL_OW 302
30759: PUSH
30760: LD_VAR 0 27
30764: NOT
30765: AND
30766: IFFALSE 30974
// begin k := 8 ;
30768: LD_ADDR_VAR 0 9
30772: PUSH
30773: LD_INT 8
30775: ST_TO_ADDR
// x := 0 ;
30776: LD_ADDR_VAR 0 10
30780: PUSH
30781: LD_INT 0
30783: ST_TO_ADDR
// if tmp < k then
30784: LD_VAR 0 12
30788: PUSH
30789: LD_VAR 0 9
30793: LESS
30794: IFFALSE 30806
// k := tmp ;
30796: LD_ADDR_VAR 0 9
30800: PUSH
30801: LD_VAR 0 12
30805: ST_TO_ADDR
// for j = 1 to k do
30806: LD_ADDR_VAR 0 8
30810: PUSH
30811: DOUBLE
30812: LD_INT 1
30814: DEC
30815: ST_TO_ADDR
30816: LD_VAR 0 9
30820: PUSH
30821: FOR_TO
30822: IFFALSE 30920
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
30824: LD_VAR 0 12
30828: PUSH
30829: LD_VAR 0 8
30833: ARRAY
30834: PPUSH
30835: CALL_OW 247
30839: PUSH
30840: LD_INT 1
30842: EQUAL
30843: PUSH
30844: LD_VAR 0 12
30848: PUSH
30849: LD_VAR 0 8
30853: ARRAY
30854: PPUSH
30855: CALL_OW 256
30859: PUSH
30860: LD_INT 250
30862: LESS
30863: PUSH
30864: LD_VAR 0 18
30868: AND
30869: PUSH
30870: LD_VAR 0 18
30874: NOT
30875: PUSH
30876: LD_VAR 0 12
30880: PUSH
30881: LD_VAR 0 8
30885: ARRAY
30886: PPUSH
30887: CALL_OW 256
30891: PUSH
30892: LD_INT 250
30894: GREATEREQUAL
30895: AND
30896: OR
30897: AND
30898: IFFALSE 30918
// begin x := tmp [ j ] ;
30900: LD_ADDR_VAR 0 10
30904: PUSH
30905: LD_VAR 0 12
30909: PUSH
30910: LD_VAR 0 8
30914: ARRAY
30915: ST_TO_ADDR
// break ;
30916: GO 30920
// end ;
30918: GO 30821
30920: POP
30921: POP
// if x then
30922: LD_VAR 0 10
30926: IFFALSE 30950
// ComAttackUnit ( group [ i ] , x ) else
30928: LD_VAR 0 4
30932: PUSH
30933: LD_VAR 0 7
30937: ARRAY
30938: PPUSH
30939: LD_VAR 0 10
30943: PPUSH
30944: CALL_OW 115
30948: GO 30974
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
30950: LD_VAR 0 4
30954: PUSH
30955: LD_VAR 0 7
30959: ARRAY
30960: PPUSH
30961: LD_VAR 0 12
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: PPUSH
30970: CALL_OW 115
// end ; end ; end ;
30974: GO 28796
30976: POP
30977: POP
// wait ( 0 0$1 ) ;
30978: LD_INT 35
30980: PPUSH
30981: CALL_OW 67
// until group = [ ] ;
30985: LD_VAR 0 4
30989: PUSH
30990: EMPTY
30991: EQUAL
30992: IFFALSE 28781
// end ; end_of_file
30994: LD_VAR 0 2
30998: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze ; export Saliba ; export function PrepareArabian ; var i , d , un , skill ; begin
30999: LD_INT 0
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
31006: LD_ADDR_VAR 0 5
31010: PUSH
31011: LD_INT 6
31013: PUSH
31014: LD_INT 7
31016: PUSH
31017: LD_INT 8
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: PUSH
31025: LD_OWVAR 67
31029: ARRAY
31030: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
31031: LD_INT 69
31033: PUSH
31034: EMPTY
31035: LIST
31036: PPUSH
31037: LD_INT 141
31039: PPUSH
31040: CALL_OW 169
// Wait ( 1 ) ;
31044: LD_INT 1
31046: PPUSH
31047: CALL_OW 67
// uc_side := 2 ;
31051: LD_ADDR_OWVAR 20
31055: PUSH
31056: LD_INT 2
31058: ST_TO_ADDR
// uc_nation := 2 ;
31059: LD_ADDR_OWVAR 21
31063: PUSH
31064: LD_INT 2
31066: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
31067: LD_ADDR_OWVAR 37
31071: PUSH
31072: LD_INT 14
31074: ST_TO_ADDR
// vc_engine := engine_siberite ;
31075: LD_ADDR_OWVAR 39
31079: PUSH
31080: LD_INT 3
31082: ST_TO_ADDR
// vc_control := control_manual ;
31083: LD_ADDR_OWVAR 38
31087: PUSH
31088: LD_INT 1
31090: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
31091: LD_ADDR_OWVAR 40
31095: PUSH
31096: LD_INT 31
31098: ST_TO_ADDR
// for i = 1 to 3 do
31099: LD_ADDR_VAR 0 2
31103: PUSH
31104: DOUBLE
31105: LD_INT 1
31107: DEC
31108: ST_TO_ADDR
31109: LD_INT 3
31111: PUSH
31112: FOR_TO
31113: IFFALSE 31197
// begin PrepareHuman ( false , class_mechanic , skill ) ;
31115: LD_INT 0
31117: PPUSH
31118: LD_INT 3
31120: PPUSH
31121: LD_VAR 0 5
31125: PPUSH
31126: CALL_OW 380
// un := CreateVehicle ;
31130: LD_ADDR_VAR 0 4
31134: PUSH
31135: CALL_OW 45
31139: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
31140: LD_VAR 0 4
31144: PPUSH
31145: LD_INT 0
31147: PPUSH
31148: LD_INT 5
31150: PPUSH
31151: CALL_OW 12
31155: PPUSH
31156: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
31160: LD_VAR 0 4
31164: PPUSH
31165: LD_INT 156
31167: PPUSH
31168: LD_INT 15
31170: PPUSH
31171: LD_INT 6
31173: PPUSH
31174: LD_INT 0
31176: PPUSH
31177: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
31181: CALL_OW 44
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: CALL_OW 52
// end ;
31195: GO 31112
31197: POP
31198: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
31199: LD_ADDR_EXP 34
31203: PUSH
31204: LD_INT 94
31206: PPUSH
31207: LD_STRING dammam
31209: PPUSH
31210: LD_VAR 0 5
31214: PPUSH
31215: LD_INT 10000
31217: PUSH
31218: LD_INT 1000
31220: PUSH
31221: LD_INT 300
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: LIST
31228: PPUSH
31229: LD_INT 1
31231: NEG
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: LD_INT 1
31239: NEG
31240: PUSH
31241: LD_INT 4
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL 5572 0 5
31254: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
31255: LD_ADDR_EXP 34
31259: PUSH
31260: LD_EXP 34
31264: PUSH
31265: LD_INT 122
31267: PPUSH
31268: LD_STRING 
31270: PPUSH
31271: LD_VAR 0 5
31275: PPUSH
31276: LD_INT 100
31278: PUSH
31279: LD_INT 60
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: PPUSH
31290: LD_INT 1
31292: NEG
31293: PUSH
31294: LD_INT 4
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: PPUSH
31309: CALL 5572 0 5
31313: ADD
31314: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 0 , 2 ] ) ;
31315: LD_ADDR_EXP 32
31319: PUSH
31320: LD_INT 45
31322: PPUSH
31323: LD_STRING jeddah
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: LD_INT 700
31333: PUSH
31334: LD_INT 300
31336: PUSH
31337: LD_INT 10
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: LIST
31344: PPUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: LD_INT 5
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: PPUSH
31364: CALL 5572 0 5
31368: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
31369: LD_ADDR_EXP 33
31373: PUSH
31374: LD_INT 7
31376: PPUSH
31377: LD_STRING riyadh
31379: PPUSH
31380: LD_VAR 0 5
31384: PPUSH
31385: LD_INT 500
31387: PUSH
31388: LD_INT 60
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: PPUSH
31399: LD_INT 4
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 3
31407: PUSH
31408: LD_INT 1
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: PPUSH
31417: CALL 5572 0 5
31421: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 1 , 2 ] ) ;
31422: LD_ADDR_EXP 35
31426: PUSH
31427: LD_INT 69
31429: PPUSH
31430: LD_STRING 
31432: PPUSH
31433: LD_VAR 0 5
31437: PPUSH
31438: LD_INT 500
31440: PUSH
31441: LD_INT 50
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: PPUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: LD_INT 1
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: PPUSH
31471: CALL 5572 0 5
31475: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
31476: LD_ADDR_EXP 44
31480: PUSH
31481: LD_EXP 34
31485: PUSH
31486: LD_EXP 32
31490: PUSH
31491: LD_EXP 35
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
31501: LD_ADDR_VAR 0 2
31505: PUSH
31506: LD_INT 22
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 30
31518: PUSH
31519: LD_INT 31
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 58
31528: PUSH
31529: EMPTY
31530: LIST
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 69
31541: PUSH
31542: FOR_IN
31543: IFFALSE 31668
// begin if GetBase ( i ) then
31545: LD_VAR 0 2
31549: PPUSH
31550: CALL_OW 274
31554: IFFALSE 31558
// continue ;
31556: GO 31542
// d := GetDir ( i ) ;
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_VAR 0 2
31567: PPUSH
31568: CALL_OW 254
31572: ST_TO_ADDR
// if d < 3 then
31573: LD_VAR 0 3
31577: PUSH
31578: LD_INT 3
31580: LESS
31581: IFFALSE 31599
// d := d + 3 else
31583: LD_ADDR_VAR 0 3
31587: PUSH
31588: LD_VAR 0 3
31592: PUSH
31593: LD_INT 3
31595: PLUS
31596: ST_TO_ADDR
31597: GO 31613
// d := d - 3 ;
31599: LD_ADDR_VAR 0 3
31603: PUSH
31604: LD_VAR 0 3
31608: PUSH
31609: LD_INT 3
31611: MINUS
31612: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
31613: LD_INT 0
31615: PPUSH
31616: LD_INT 8
31618: PPUSH
31619: LD_VAR 0 5
31623: PPUSH
31624: CALL_OW 380
// un := CreateHuman ;
31628: LD_ADDR_VAR 0 4
31632: PUSH
31633: CALL_OW 44
31637: ST_TO_ADDR
// SetDir ( un , d ) ;
31638: LD_VAR 0 4
31642: PPUSH
31643: LD_VAR 0 3
31647: PPUSH
31648: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
31652: LD_VAR 0 4
31656: PPUSH
31657: LD_VAR 0 2
31661: PPUSH
31662: CALL_OW 52
// end ;
31666: GO 31542
31668: POP
31669: POP
// if Difficulty > 1 then
31670: LD_OWVAR 67
31674: PUSH
31675: LD_INT 1
31677: GREATER
31678: IFFALSE 32049
// begin ar_kamikadze := [ ] ;
31680: LD_ADDR_EXP 38
31684: PUSH
31685: EMPTY
31686: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
31687: LD_INT 0
31689: PPUSH
31690: LD_INT 1
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: CALL_OW 380
// un := CreateHuman ;
31702: LD_ADDR_VAR 0 4
31706: PUSH
31707: CALL_OW 44
31711: ST_TO_ADDR
// SetDir ( un , 3 ) ;
31712: LD_VAR 0 4
31716: PPUSH
31717: LD_INT 3
31719: PPUSH
31720: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
31724: LD_VAR 0 4
31728: PPUSH
31729: LD_INT 23
31731: PPUSH
31732: LD_INT 44
31734: PPUSH
31735: LD_INT 0
31737: PPUSH
31738: CALL_OW 48
// ComCrawl ( un ) ;
31742: LD_VAR 0 4
31746: PPUSH
31747: CALL_OW 137
// un := CreateHuman ;
31751: LD_ADDR_VAR 0 4
31755: PUSH
31756: CALL_OW 44
31760: ST_TO_ADDR
// SetDir ( un , 3 ) ;
31761: LD_VAR 0 4
31765: PPUSH
31766: LD_INT 3
31768: PPUSH
31769: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
31773: LD_VAR 0 4
31777: PPUSH
31778: LD_INT 30
31780: PPUSH
31781: LD_INT 39
31783: PPUSH
31784: LD_INT 0
31786: PPUSH
31787: CALL_OW 48
// ComCrawl ( un ) ;
31791: LD_VAR 0 4
31795: PPUSH
31796: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
31800: LD_INT 0
31802: PPUSH
31803: LD_INT 17
31805: PPUSH
31806: LD_VAR 0 5
31810: PPUSH
31811: CALL_OW 380
// un := CreateHuman ;
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: CALL_OW 44
31824: ST_TO_ADDR
// SetDir ( un , 3 ) ;
31825: LD_VAR 0 4
31829: PPUSH
31830: LD_INT 3
31832: PPUSH
31833: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
31837: LD_VAR 0 4
31841: PPUSH
31842: LD_INT 45
31844: PPUSH
31845: LD_INT 86
31847: PPUSH
31848: LD_INT 0
31850: PPUSH
31851: CALL_OW 48
// ComHold ( un ) ;
31855: LD_VAR 0 4
31859: PPUSH
31860: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
31864: LD_ADDR_EXP 38
31868: PUSH
31869: LD_EXP 38
31873: PPUSH
31874: LD_EXP 38
31878: PUSH
31879: LD_INT 1
31881: PLUS
31882: PPUSH
31883: LD_VAR 0 4
31887: PPUSH
31888: CALL_OW 1
31892: ST_TO_ADDR
// un := CreateHuman ;
31893: LD_ADDR_VAR 0 4
31897: PUSH
31898: CALL_OW 44
31902: ST_TO_ADDR
// SetDir ( un , 3 ) ;
31903: LD_VAR 0 4
31907: PPUSH
31908: LD_INT 3
31910: PPUSH
31911: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
31915: LD_VAR 0 4
31919: PPUSH
31920: LD_INT 60
31922: PPUSH
31923: LD_INT 85
31925: PPUSH
31926: LD_INT 0
31928: PPUSH
31929: CALL_OW 48
// ComHold ( un ) ;
31933: LD_VAR 0 4
31937: PPUSH
31938: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
31942: LD_ADDR_EXP 38
31946: PUSH
31947: LD_EXP 38
31951: PPUSH
31952: LD_EXP 38
31956: PUSH
31957: LD_INT 1
31959: PLUS
31960: PPUSH
31961: LD_VAR 0 4
31965: PPUSH
31966: CALL_OW 1
31970: ST_TO_ADDR
// un := CreateHuman ;
31971: LD_ADDR_VAR 0 4
31975: PUSH
31976: CALL_OW 44
31980: ST_TO_ADDR
// SetDir ( un , 3 ) ;
31981: LD_VAR 0 4
31985: PPUSH
31986: LD_INT 3
31988: PPUSH
31989: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
31993: LD_VAR 0 4
31997: PPUSH
31998: LD_INT 222
32000: PPUSH
32001: LD_INT 166
32003: PPUSH
32004: LD_INT 0
32006: PPUSH
32007: CALL_OW 48
// ComHold ( un ) ;
32011: LD_VAR 0 4
32015: PPUSH
32016: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
32020: LD_ADDR_EXP 38
32024: PUSH
32025: LD_EXP 38
32029: PPUSH
32030: LD_EXP 38
32034: PUSH
32035: LD_INT 1
32037: PLUS
32038: PPUSH
32039: LD_VAR 0 4
32043: PPUSH
32044: CALL_OW 1
32048: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
32049: LD_ADDR_EXP 36
32053: PUSH
32054: EMPTY
32055: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
32056: LD_INT 1
32058: PPUSH
32059: LD_INT 1
32061: PPUSH
32062: LD_VAR 0 5
32066: PPUSH
32067: CALL_OW 380
// hc_gallery := SecondCharsGal ;
32071: LD_ADDR_OWVAR 33
32075: PUSH
32076: LD_STRING SecondCharsGal
32078: ST_TO_ADDR
// hc_face_number := 4 ;
32079: LD_ADDR_OWVAR 34
32083: PUSH
32084: LD_INT 4
32086: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
32087: LD_ADDR_EXP 36
32091: PUSH
32092: LD_EXP 36
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 44
32104: PPUSH
32105: CALL_OW 1
32109: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
32110: LD_INT 2
32112: PPUSH
32113: LD_INT 4
32115: PPUSH
32116: LD_VAR 0 5
32120: PPUSH
32121: CALL_OW 380
// hc_gallery := SecondCharsGal ;
32125: LD_ADDR_OWVAR 33
32129: PUSH
32130: LD_STRING SecondCharsGal
32132: ST_TO_ADDR
// hc_face_number := 15 ;
32133: LD_ADDR_OWVAR 34
32137: PUSH
32138: LD_INT 15
32140: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
32141: LD_ADDR_EXP 36
32145: PUSH
32146: LD_EXP 36
32150: PPUSH
32151: LD_INT 2
32153: PPUSH
32154: CALL_OW 44
32158: PPUSH
32159: CALL_OW 1
32163: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
32164: LD_INT 2
32166: PPUSH
32167: LD_INT 4
32169: PPUSH
32170: LD_VAR 0 5
32174: PPUSH
32175: CALL_OW 380
// hc_gallery :=  ;
32179: LD_ADDR_OWVAR 33
32183: PUSH
32184: LD_STRING 
32186: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
32187: LD_ADDR_EXP 36
32191: PUSH
32192: LD_EXP 36
32196: PPUSH
32197: LD_INT 3
32199: PPUSH
32200: CALL_OW 44
32204: PPUSH
32205: CALL_OW 1
32209: ST_TO_ADDR
// hc_sex := sex_male ;
32210: LD_ADDR_OWVAR 27
32214: PUSH
32215: LD_INT 1
32217: ST_TO_ADDR
// hc_class = 11 ;
32218: LD_ADDR_OWVAR 28
32222: PUSH
32223: LD_INT 11
32225: ST_TO_ADDR
// hc_gallery = sandar ;
32226: LD_ADDR_OWVAR 33
32230: PUSH
32231: LD_STRING sandar
32233: ST_TO_ADDR
// hc_face_number = 33 ;
32234: LD_ADDR_OWVAR 34
32238: PUSH
32239: LD_INT 33
32241: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
32242: LD_ADDR_OWVAR 26
32246: PUSH
32247: LD_STRING Thabit Muhair Saliba
32249: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
32250: LD_ADDR_OWVAR 31
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: ST_TO_ADDR
// Saliba = CreateHuman ;
32273: LD_ADDR_EXP 39
32277: PUSH
32278: CALL_OW 44
32282: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
32283: LD_EXP 39
32287: PPUSH
32288: LD_INT 7
32290: PPUSH
32291: CALL_OW 52
// ar_vehicles_tmp := [ ] ;
32295: LD_ADDR_EXP 37
32299: PUSH
32300: EMPTY
32301: ST_TO_ADDR
// for i = 1 to 4 do
32302: LD_ADDR_VAR 0 2
32306: PUSH
32307: DOUBLE
32308: LD_INT 1
32310: DEC
32311: ST_TO_ADDR
32312: LD_INT 4
32314: PUSH
32315: FOR_TO
32316: IFFALSE 32488
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
32318: LD_INT 13
32320: PUSH
32321: LD_INT 14
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: PPUSH
32331: LD_INT 2
32333: PPUSH
32334: CALL_OW 12
32338: ARRAY
32339: PPUSH
32340: LD_INT 1
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PPUSH
32353: LD_INT 2
32355: PPUSH
32356: CALL_OW 12
32360: ARRAY
32361: PPUSH
32362: LD_INT 1
32364: PPUSH
32365: LD_INT 25
32367: PUSH
32368: LD_INT 27
32370: PUSH
32371: LD_INT 26
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: PPUSH
32382: LD_INT 3
32384: PPUSH
32385: CALL_OW 12
32389: ARRAY
32390: PPUSH
32391: LD_INT 60
32393: PPUSH
32394: LD_INT 100
32396: PPUSH
32397: CALL_OW 12
32401: PPUSH
32402: CALL 1626 0 5
// un := CreateVehicle ;
32406: LD_ADDR_VAR 0 4
32410: PUSH
32411: CALL_OW 45
32415: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
32416: LD_ADDR_EXP 37
32420: PUSH
32421: LD_EXP 37
32425: PPUSH
32426: LD_EXP 37
32430: PUSH
32431: LD_INT 1
32433: PLUS
32434: PPUSH
32435: LD_VAR 0 4
32439: PPUSH
32440: CALL_OW 1
32444: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32445: LD_VAR 0 4
32449: PPUSH
32450: LD_INT 0
32452: PPUSH
32453: LD_INT 5
32455: PPUSH
32456: CALL_OW 12
32460: PPUSH
32461: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
32465: LD_VAR 0 4
32469: PPUSH
32470: LD_INT 124
32472: PPUSH
32473: LD_INT 141
32475: PPUSH
32476: LD_INT 6
32478: PPUSH
32479: LD_INT 0
32481: PPUSH
32482: CALL_OW 50
// end ;
32486: GO 32315
32488: POP
32489: POP
// InitHc ;
32490: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
32494: LD_INT 4
32496: PPUSH
32497: LD_INT 5
32499: PPUSH
32500: LD_INT 10
32502: PPUSH
32503: LD_INT 5
32505: PPUSH
32506: LD_INT 0
32508: PPUSH
32509: CALL_OW 58
// end ;
32513: LD_VAR 0 1
32517: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
32518: LD_EXP 38
32522: IFFALSE 32596
32524: GO 32526
32526: DISABLE
32527: LD_INT 0
32529: PPUSH
// begin enable ;
32530: ENABLE
// for i in ar_kamikadze do
32531: LD_ADDR_VAR 0 1
32535: PUSH
32536: LD_EXP 38
32540: PUSH
32541: FOR_IN
32542: IFFALSE 32594
// if See ( 1 , i ) then
32544: LD_INT 1
32546: PPUSH
32547: LD_VAR 0 1
32551: PPUSH
32552: CALL_OW 292
32556: IFFALSE 32592
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
32558: LD_VAR 0 1
32562: PPUSH
32563: LD_INT 22
32565: PUSH
32566: LD_INT 1
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PPUSH
32573: CALL_OW 69
32577: PPUSH
32578: LD_VAR 0 1
32582: PPUSH
32583: CALL_OW 74
32587: PPUSH
32588: CALL_OW 115
32592: GO 32541
32594: POP
32595: POP
// end ;
32596: PPOPN 1
32598: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
32599: LD_EXP 12
32603: IFFALSE 32920
32605: GO 32607
32607: DISABLE
32608: LD_INT 0
32610: PPUSH
32611: PPUSH
32612: PPUSH
32613: PPUSH
// begin repeat wait ( 0 0$1 ) ;
32614: LD_INT 35
32616: PPUSH
32617: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
32621: LD_INT 1
32623: PPUSH
32624: CALL 49850 0 1
32628: PUSH
32629: LD_INT 0
32631: EQUAL
32632: IFFALSE 32614
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
32634: LD_INT 1
32636: PPUSH
32637: LD_INT 14
32639: PUSH
32640: LD_INT 3
32642: PUSH
32643: LD_INT 2
32645: PUSH
32646: LD_INT 32
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: PUSH
32655: EMPTY
32656: LIST
32657: PPUSH
32658: CALL 49687 0 2
// repeat wait ( 0 0$1 ) ;
32662: LD_INT 35
32664: PPUSH
32665: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
32669: LD_EXP 59
32673: PUSH
32674: LD_INT 1
32676: ARRAY
32677: PPUSH
32678: LD_INT 33
32680: PUSH
32681: LD_INT 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 34
32690: PUSH
32691: LD_INT 32
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 72
32706: IFFALSE 32662
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_EXP 59
32717: PUSH
32718: LD_INT 1
32720: ARRAY
32721: PPUSH
32722: LD_INT 33
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 34
32734: PUSH
32735: LD_INT 32
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PPUSH
32746: CALL_OW 72
32750: PUSH
32751: LD_INT 1
32753: ARRAY
32754: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
32755: LD_ADDR_VAR 0 4
32759: PUSH
32760: LD_INT 5
32762: PPUSH
32763: CALL_OW 469
32767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32768: LD_INT 35
32770: PPUSH
32771: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
32775: LD_ADDR_VAR 0 4
32779: PUSH
32780: LD_INT 5
32782: PPUSH
32783: CALL_OW 469
32787: ST_TO_ADDR
// tmp := 100 ;
32788: LD_ADDR_VAR 0 3
32792: PUSH
32793: LD_INT 100
32795: ST_TO_ADDR
// if pos then
32796: LD_VAR 0 4
32800: IFFALSE 32840
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
32802: LD_ADDR_VAR 0 3
32806: PUSH
32807: LD_INT 2
32809: PPUSH
32810: LD_VAR 0 4
32814: PUSH
32815: LD_INT 1
32817: ARRAY
32818: PPUSH
32819: LD_VAR 0 4
32823: PUSH
32824: LD_INT 2
32826: ARRAY
32827: PPUSH
32828: LD_INT 20
32830: PPUSH
32831: CALL 3274 0 4
32835: PUSH
32836: LD_INT 4
32838: ARRAY
32839: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
32840: LD_VAR 0 4
32844: PUSH
32845: LD_EXP 13
32849: NOT
32850: AND
32851: PUSH
32852: LD_VAR 0 3
32856: PUSH
32857: LD_INT 10
32859: LESS
32860: AND
32861: IFFALSE 32768
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
32863: LD_VAR 0 2
32867: PPUSH
32868: LD_VAR 0 4
32872: PUSH
32873: LD_INT 1
32875: ARRAY
32876: PPUSH
32877: LD_VAR 0 4
32881: PUSH
32882: LD_INT 2
32884: ARRAY
32885: PPUSH
32886: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
32890: LD_VAR 0 2
32894: PPUSH
32895: LD_INT 198
32897: PPUSH
32898: LD_INT 113
32900: PPUSH
32901: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_INT 124
32912: PPUSH
32913: LD_INT 7
32915: PPUSH
32916: CALL_OW 171
// end ;
32920: PPOPN 4
32922: END
// every 12 12$00 do
32923: GO 32925
32925: DISABLE
// begin end ;
32926: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
32927: LD_EXP 6
32931: IFFALSE 34824
32933: GO 32935
32935: DISABLE
32936: LD_INT 0
32938: PPUSH
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
32946: LD_ADDR_VAR 0 4
32950: PUSH
32951: LD_INT 5
32953: PUSH
32954: LD_INT 6
32956: PUSH
32957: LD_INT 7
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: LIST
32964: PUSH
32965: LD_OWVAR 67
32969: ARRAY
32970: ST_TO_ADDR
// coords := [ ] ;
32971: LD_ADDR_VAR 0 5
32975: PUSH
32976: EMPTY
32977: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
32978: LD_ADDR_VAR 0 6
32982: PUSH
32983: LD_INT 0
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
33025: LD_INT 1
33027: PPUSH
33028: LD_INT 14
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 28
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 14
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: LD_INT 25
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 14
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: LD_INT 2
33072: PUSH
33073: LD_INT 28
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 14
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 2
33090: PUSH
33091: LD_INT 29
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: PPUSH
33106: CALL 49687 0 2
// wait ( [ 9 9$00 , 8 8$00 , 7 7$20 ] [ Difficulty ] ) ;
33110: LD_INT 18900
33112: PUSH
33113: LD_INT 16800
33115: PUSH
33116: LD_INT 15400
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: PUSH
33124: LD_OWVAR 67
33128: ARRAY
33129: PPUSH
33130: CALL_OW 67
// InitHc ;
33134: CALL_OW 19
// InitUc ;
33138: CALL_OW 18
// uc_side := 2 ;
33142: LD_ADDR_OWVAR 20
33146: PUSH
33147: LD_INT 2
33149: ST_TO_ADDR
// uc_nation := 2 ;
33150: LD_ADDR_OWVAR 21
33154: PUSH
33155: LD_INT 2
33157: ST_TO_ADDR
// tmp := mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ;
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_EXP 59
33167: PUSH
33168: LD_INT 1
33170: ARRAY
33171: PUSH
33172: LD_INT 34
33174: PUSH
33175: LD_INT 32
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PPUSH
33182: CALL_OW 69
33186: DIFF
33187: ST_TO_ADDR
// for i = 1 to Difficulty do
33188: LD_ADDR_VAR 0 1
33192: PUSH
33193: DOUBLE
33194: LD_INT 1
33196: DEC
33197: ST_TO_ADDR
33198: LD_OWVAR 67
33202: PUSH
33203: FOR_TO
33204: IFFALSE 33323
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
33206: LD_INT 13
33208: PPUSH
33209: LD_INT 3
33211: PPUSH
33212: LD_INT 5
33214: PPUSH
33215: LD_INT 29
33217: PPUSH
33218: LD_INT 100
33220: PPUSH
33221: CALL 1626 0 5
// tmp := Replace ( tmp , tmp + 1 , CreateVehicle ) ;
33225: LD_ADDR_VAR 0 3
33229: PUSH
33230: LD_VAR 0 3
33234: PPUSH
33235: LD_VAR 0 3
33239: PUSH
33240: LD_INT 1
33242: PLUS
33243: PPUSH
33244: CALL_OW 45
33248: PPUSH
33249: CALL_OW 1
33253: ST_TO_ADDR
// SetDir ( tmp [ tmp ] , 3 ) ;
33254: LD_VAR 0 3
33258: PUSH
33259: LD_VAR 0 3
33263: ARRAY
33264: PPUSH
33265: LD_INT 3
33267: PPUSH
33268: CALL_OW 233
// PlaceUnitArea ( tmp [ tmp ] , north_attack_spawn , false ) ;
33272: LD_VAR 0 3
33276: PUSH
33277: LD_VAR 0 3
33281: ARRAY
33282: PPUSH
33283: LD_INT 16
33285: PPUSH
33286: LD_INT 0
33288: PPUSH
33289: CALL_OW 49
// ComMoveXY ( tmp [ tmp ] , 51 , 10 ) ;
33293: LD_VAR 0 3
33297: PUSH
33298: LD_VAR 0 3
33302: ARRAY
33303: PPUSH
33304: LD_INT 51
33306: PPUSH
33307: LD_INT 10
33309: PPUSH
33310: CALL_OW 111
// wait ( 0 0$2 ) ;
33314: LD_INT 70
33316: PPUSH
33317: CALL_OW 67
// end ;
33321: GO 33203
33323: POP
33324: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
33325: LD_ADDR_VAR 0 5
33329: PUSH
33330: LD_INT 51
33332: PUSH
33333: LD_INT 24
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 75
33342: PUSH
33343: LD_INT 90
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
33354: LD_INT 1
33356: PPUSH
33357: LD_VAR 0 3
33361: PPUSH
33362: LD_VAR 0 5
33366: PPUSH
33367: LD_VAR 0 6
33371: PPUSH
33372: CALL 49735 0 4
// tmp := [ ] ;
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: EMPTY
33382: ST_TO_ADDR
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
33383: LD_ADDR_VAR 0 1
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_INT 2
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: LIST
33406: PUSH
33407: LD_OWVAR 67
33411: ARRAY
33412: PUSH
33413: FOR_TO
33414: IFFALSE 33487
// begin PrepareHuman ( false , 17 , skill ) ;
33416: LD_INT 0
33418: PPUSH
33419: LD_INT 17
33421: PPUSH
33422: LD_VAR 0 4
33426: PPUSH
33427: CALL_OW 380
// un := CreateHuman ;
33431: LD_ADDR_VAR 0 2
33435: PUSH
33436: CALL_OW 44
33440: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_VAR 0 3
33450: PPUSH
33451: LD_VAR 0 3
33455: PUSH
33456: LD_INT 1
33458: PLUS
33459: PPUSH
33460: LD_VAR 0 2
33464: PPUSH
33465: CALL_OW 1
33469: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
33470: LD_VAR 0 2
33474: PPUSH
33475: LD_INT 13
33477: PPUSH
33478: LD_INT 0
33480: PPUSH
33481: CALL_OW 49
// end ;
33485: GO 33413
33487: POP
33488: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
33489: LD_ADDR_VAR 0 1
33493: PUSH
33494: DOUBLE
33495: LD_INT 1
33497: DEC
33498: ST_TO_ADDR
33499: LD_INT 3
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: PUSH
33513: LD_OWVAR 67
33517: ARRAY
33518: PUSH
33519: FOR_TO
33520: IFFALSE 33612
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
33522: LD_INT 0
33524: PPUSH
33525: LD_INT 1
33527: PUSH
33528: LD_INT 8
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: PPUSH
33538: LD_INT 2
33540: PPUSH
33541: CALL_OW 12
33545: ARRAY
33546: PPUSH
33547: LD_VAR 0 4
33551: PPUSH
33552: CALL_OW 380
// un := CreateHuman ;
33556: LD_ADDR_VAR 0 2
33560: PUSH
33561: CALL_OW 44
33565: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
33566: LD_ADDR_VAR 0 3
33570: PUSH
33571: LD_VAR 0 3
33575: PPUSH
33576: LD_VAR 0 3
33580: PUSH
33581: LD_INT 1
33583: PLUS
33584: PPUSH
33585: LD_VAR 0 2
33589: PPUSH
33590: CALL_OW 1
33594: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_INT 13
33602: PPUSH
33603: LD_INT 0
33605: PPUSH
33606: CALL_OW 49
// end ;
33610: GO 33519
33612: POP
33613: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
33614: LD_ADDR_VAR 0 5
33618: PUSH
33619: LD_INT 51
33621: PUSH
33622: LD_INT 24
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 75
33631: PUSH
33632: LD_INT 90
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
33643: LD_INT 1
33645: PPUSH
33646: LD_VAR 0 3
33650: PPUSH
33651: LD_VAR 0 5
33655: PPUSH
33656: LD_VAR 0 6
33660: PPUSH
33661: CALL 49735 0 4
// tmp := [ ] ;
33665: LD_ADDR_VAR 0 3
33669: PUSH
33670: EMPTY
33671: ST_TO_ADDR
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
33672: LD_ADDR_VAR 0 1
33676: PUSH
33677: DOUBLE
33678: LD_INT 1
33680: DEC
33681: ST_TO_ADDR
33682: LD_INT 1
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 3
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: LIST
33695: PUSH
33696: LD_OWVAR 67
33700: ARRAY
33701: PUSH
33702: FOR_TO
33703: IFFALSE 33776
// begin PrepareHuman ( false , 17 , skill ) ;
33705: LD_INT 0
33707: PPUSH
33708: LD_INT 17
33710: PPUSH
33711: LD_VAR 0 4
33715: PPUSH
33716: CALL_OW 380
// un := CreateHuman ;
33720: LD_ADDR_VAR 0 2
33724: PUSH
33725: CALL_OW 44
33729: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: LD_VAR 0 3
33739: PPUSH
33740: LD_VAR 0 3
33744: PUSH
33745: LD_INT 1
33747: PLUS
33748: PPUSH
33749: LD_VAR 0 2
33753: PPUSH
33754: CALL_OW 1
33758: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
33759: LD_VAR 0 2
33763: PPUSH
33764: LD_INT 14
33766: PPUSH
33767: LD_INT 0
33769: PPUSH
33770: CALL_OW 49
// end ;
33774: GO 33702
33776: POP
33777: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
33778: LD_ADDR_VAR 0 5
33782: PUSH
33783: LD_INT 148
33785: PUSH
33786: LD_INT 158
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 148
33795: PUSH
33796: LD_INT 158
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
33807: LD_INT 1
33809: PPUSH
33810: LD_VAR 0 3
33814: PPUSH
33815: LD_VAR 0 5
33819: PPUSH
33820: LD_VAR 0 6
33824: PPUSH
33825: CALL 49735 0 4
// tmp := [ ] ;
33829: LD_ADDR_VAR 0 3
33833: PUSH
33834: EMPTY
33835: ST_TO_ADDR
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
33836: LD_ADDR_VAR 0 1
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_INT 3
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: LD_INT 5
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: LIST
33859: PUSH
33860: LD_OWVAR 67
33864: ARRAY
33865: PUSH
33866: FOR_TO
33867: IFFALSE 34084
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
33869: LD_INT 14
33871: PPUSH
33872: LD_INT 3
33874: PPUSH
33875: LD_INT 1
33877: PUSH
33878: LD_INT 5
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 1
33887: PPUSH
33888: LD_INT 2
33890: PPUSH
33891: CALL_OW 12
33895: ARRAY
33896: PPUSH
33897: LD_INT 27
33899: PUSH
33900: LD_INT 26
33902: PUSH
33903: LD_INT 28
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: PPUSH
33914: LD_INT 3
33916: PPUSH
33917: CALL_OW 12
33921: ARRAY
33922: PPUSH
33923: LD_INT 100
33925: PPUSH
33926: CALL 1626 0 5
// tmp := Replace ( tmp , tmp + 1 , CreateVehicle ) ;
33930: LD_ADDR_VAR 0 3
33934: PUSH
33935: LD_VAR 0 3
33939: PPUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_INT 1
33947: PLUS
33948: PPUSH
33949: CALL_OW 45
33953: PPUSH
33954: CALL_OW 1
33958: ST_TO_ADDR
// SetDir ( tmp [ tmp ] , 5 ) ;
33959: LD_VAR 0 3
33963: PUSH
33964: LD_VAR 0 3
33968: ARRAY
33969: PPUSH
33970: LD_INT 5
33972: PPUSH
33973: CALL_OW 233
// PlaceUnitArea ( tmp [ tmp ] , east_attack_spawn , false ) ;
33977: LD_VAR 0 3
33981: PUSH
33982: LD_VAR 0 3
33986: ARRAY
33987: PPUSH
33988: LD_INT 15
33990: PPUSH
33991: LD_INT 0
33993: PPUSH
33994: CALL_OW 49
// if GetControl ( tmp [ tmp ] ) = control_manual then
33998: LD_VAR 0 3
34002: PUSH
34003: LD_VAR 0 3
34007: ARRAY
34008: PPUSH
34009: CALL_OW 263
34013: PUSH
34014: LD_INT 1
34016: EQUAL
34017: IFFALSE 34054
// begin PrepareHuman ( false , 3 , skill ) ;
34019: LD_INT 0
34021: PPUSH
34022: LD_INT 3
34024: PPUSH
34025: LD_VAR 0 4
34029: PPUSH
34030: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , tmp [ tmp ] ) ;
34034: CALL_OW 44
34038: PPUSH
34039: LD_VAR 0 3
34043: PUSH
34044: LD_VAR 0 3
34048: ARRAY
34049: PPUSH
34050: CALL_OW 52
// end ; ComMoveXY ( tmp [ tmp ] , 179 , 135 ) ;
34054: LD_VAR 0 3
34058: PUSH
34059: LD_VAR 0 3
34063: ARRAY
34064: PPUSH
34065: LD_INT 179
34067: PPUSH
34068: LD_INT 135
34070: PPUSH
34071: CALL_OW 111
// wait ( 0 0$2 ) ;
34075: LD_INT 70
34077: PPUSH
34078: CALL_OW 67
// end ;
34082: GO 33866
34084: POP
34085: POP
// vc_chassis := 15 ;
34086: LD_ADDR_OWVAR 37
34090: PUSH
34091: LD_INT 15
34093: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , CreateVehicle ) ;
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_VAR 0 3
34103: PPUSH
34104: LD_VAR 0 3
34108: PUSH
34109: LD_INT 1
34111: PLUS
34112: PPUSH
34113: CALL_OW 45
34117: PPUSH
34118: CALL_OW 1
34122: ST_TO_ADDR
// PlaceUnitArea ( tmp [ tmp ] , east_attack_spawn , false ) ;
34123: LD_VAR 0 3
34127: PUSH
34128: LD_VAR 0 3
34132: ARRAY
34133: PPUSH
34134: LD_INT 15
34136: PPUSH
34137: LD_INT 0
34139: PPUSH
34140: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
34144: LD_INT 0
34146: PPUSH
34147: LD_INT 11
34149: PPUSH
34150: LD_VAR 0 4
34154: PPUSH
34155: CALL_OW 380
// tmp := Replace ( tmp , tmp + 1 , CreateHuman ) ;
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_VAR 0 3
34168: PPUSH
34169: LD_VAR 0 3
34173: PUSH
34174: LD_INT 1
34176: PLUS
34177: PPUSH
34178: CALL_OW 44
34182: PPUSH
34183: CALL_OW 1
34187: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ tmp ] , tmp [ tmp - 1 ] ) ;
34188: LD_VAR 0 3
34192: PUSH
34193: LD_VAR 0 3
34197: ARRAY
34198: PPUSH
34199: LD_VAR 0 3
34203: PUSH
34204: LD_VAR 0 3
34208: PUSH
34209: LD_INT 1
34211: MINUS
34212: ARRAY
34213: PPUSH
34214: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
34218: LD_ADDR_VAR 0 5
34222: PUSH
34223: LD_INT 148
34225: PUSH
34226: LD_INT 140
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: EMPTY
34234: LIST
34235: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
34236: LD_INT 1
34238: PPUSH
34239: LD_VAR 0 3
34243: PPUSH
34244: LD_VAR 0 5
34248: PPUSH
34249: LD_VAR 0 6
34253: PPUSH
34254: CALL 49735 0 4
// Wait ( 10 10$00 ) ;
34258: LD_INT 21000
34260: PPUSH
34261: CALL_OW 67
// w := 1 ;
34265: LD_ADDR_VAR 0 7
34269: PUSH
34270: LD_INT 1
34272: ST_TO_ADDR
// repeat tmp := [ ] ;
34273: LD_ADDR_VAR 0 3
34277: PUSH
34278: EMPTY
34279: ST_TO_ADDR
// if w mod 4 = 0 then
34280: LD_VAR 0 7
34284: PUSH
34285: LD_INT 4
34287: MOD
34288: PUSH
34289: LD_INT 0
34291: EQUAL
34292: IFFALSE 34379
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] ] else
34294: LD_ADDR_VAR 0 8
34298: PUSH
34299: LD_INT 11
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: LD_INT 27
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 11
34319: PUSH
34320: LD_INT 1
34322: PUSH
34323: LD_INT 2
34325: PUSH
34326: LD_INT 27
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 11
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: LD_INT 27
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 11
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 2
34361: PUSH
34362: LD_INT 27
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
34377: GO 34462
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
34379: LD_ADDR_VAR 0 8
34383: PUSH
34384: LD_INT 14
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 28
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 14
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: LD_INT 25
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 14
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 28
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 14
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: LD_INT 29
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: ST_TO_ADDR
// if w mod 3 = 0 then
34462: LD_VAR 0 7
34466: PUSH
34467: LD_INT 3
34469: MOD
34470: PUSH
34471: LD_INT 0
34473: EQUAL
34474: IFFALSE 34550
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
34476: LD_ADDR_VAR 0 8
34480: PUSH
34481: LD_VAR 0 8
34485: PPUSH
34486: LD_INT 1
34488: PUSH
34489: LD_VAR 0 8
34493: PUSH
34494: LD_VAR 0 1
34498: ARRAY
34499: PUSH
34500: LD_INT 1
34502: PLUS
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PPUSH
34508: LD_INT 14
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 2
34516: PUSH
34517: LD_INT 25
34519: PUSH
34520: LD_INT 28
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PPUSH
34530: LD_INT 2
34532: PPUSH
34533: CALL_OW 12
34537: ARRAY
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: PPUSH
34545: CALL 2780 0 3
34549: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
34550: LD_INT 1
34552: PPUSH
34553: LD_VAR 0 8
34557: PPUSH
34558: CALL 49687 0 2
// repeat wait ( 0 0$1 ) ;
34562: LD_INT 35
34564: PPUSH
34565: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
34569: LD_EXP 59
34573: PUSH
34574: LD_INT 1
34576: ARRAY
34577: PPUSH
34578: LD_INT 3
34580: PUSH
34581: LD_INT 34
34583: PUSH
34584: LD_INT 32
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PPUSH
34595: CALL_OW 72
34599: PUSH
34600: LD_INT 4
34602: GREATEREQUAL
34603: IFFALSE 34562
// wait ( 0 0$10 ) ;
34605: LD_INT 350
34607: PPUSH
34608: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
34612: LD_ADDR_VAR 0 3
34616: PUSH
34617: LD_EXP 59
34621: PUSH
34622: LD_INT 1
34624: ARRAY
34625: PPUSH
34626: LD_INT 3
34628: PUSH
34629: LD_INT 34
34631: PUSH
34632: LD_INT 32
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PPUSH
34643: CALL_OW 72
34647: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
34648: LD_INT 100
34650: PPUSH
34651: CALL_OW 13
34655: PUSH
34656: LD_INT 50
34658: LESS
34659: IFFALSE 34692
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] else
34661: LD_ADDR_VAR 0 5
34665: PUSH
34666: LD_INT 51
34668: PUSH
34669: LD_INT 24
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 75
34678: PUSH
34679: LD_INT 90
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: ST_TO_ADDR
34690: GO 34721
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
34692: LD_ADDR_VAR 0 5
34696: PUSH
34697: LD_INT 128
34699: PUSH
34700: LD_INT 94
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 180
34709: PUSH
34710: LD_INT 135
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: ST_TO_ADDR
// if w mod 4 = 0 then
34721: LD_VAR 0 7
34725: PUSH
34726: LD_INT 4
34728: MOD
34729: PUSH
34730: LD_INT 0
34732: EQUAL
34733: IFFALSE 34764
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
34735: LD_ADDR_VAR 0 5
34739: PUSH
34740: LD_INT 91
34742: PUSH
34743: LD_INT 58
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 117
34752: PUSH
34753: LD_INT 107
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
34764: LD_INT 1
34766: PPUSH
34767: LD_VAR 0 3
34771: PPUSH
34772: LD_VAR 0 5
34776: PPUSH
34777: LD_VAR 0 6
34781: PPUSH
34782: CALL 49735 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
34786: LD_INT 19950
34788: PPUSH
34789: LD_INT 26250
34791: PPUSH
34792: CALL_OW 12
34796: PPUSH
34797: CALL_OW 67
// w := w + 1 ;
34801: LD_ADDR_VAR 0 7
34805: PUSH
34806: LD_VAR 0 7
34810: PUSH
34811: LD_INT 1
34813: PLUS
34814: ST_TO_ADDR
// until IsDead ( ar_dep_n ) ;
34815: LD_INT 94
34817: PPUSH
34818: CALL_OW 301
34822: IFFALSE 34273
// end ; end_of_file
34824: PPOPN 8
34826: END
// export function Action ; var tmp , p , radar , sols , i ; begin
34827: LD_INT 0
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
// InGameOn ;
34835: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
34839: LD_EXP 17
34843: PPUSH
34844: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
34848: LD_ADDR_VAR 0 2
34852: PUSH
34853: LD_INT 22
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 25
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PPUSH
34877: CALL_OW 69
34881: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
34882: LD_ADDR_VAR 0 4
34886: PUSH
34887: LD_INT 22
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 34
34899: PUSH
34900: LD_INT 11
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PPUSH
34911: CALL_OW 69
34915: PUSH
34916: LD_INT 1
34918: ARRAY
34919: ST_TO_ADDR
// for i = 1 to tmp do
34920: LD_ADDR_VAR 0 6
34924: PUSH
34925: DOUBLE
34926: LD_INT 1
34928: DEC
34929: ST_TO_ADDR
34930: LD_VAR 0 2
34934: PUSH
34935: FOR_TO
34936: IFFALSE 34983
// begin if i = 5 then
34938: LD_VAR 0 6
34942: PUSH
34943: LD_INT 5
34945: EQUAL
34946: IFFALSE 34950
// break ;
34948: GO 34983
// sols := Replace ( sols , i , tmp [ i ] ) ;
34950: LD_ADDR_VAR 0 5
34954: PUSH
34955: LD_VAR 0 5
34959: PPUSH
34960: LD_VAR 0 6
34964: PPUSH
34965: LD_VAR 0 2
34969: PUSH
34970: LD_VAR 0 6
34974: ARRAY
34975: PPUSH
34976: CALL_OW 1
34980: ST_TO_ADDR
// end ;
34981: GO 34935
34983: POP
34984: POP
// tmp := ar_force_tmp ;
34985: LD_ADDR_VAR 0 2
34989: PUSH
34990: LD_EXP 36
34994: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
34995: LD_VAR 0 2
34999: PUSH
35000: LD_INT 1
35002: ARRAY
35003: PPUSH
35004: LD_INT 108
35006: PPUSH
35007: LD_INT 139
35009: PPUSH
35010: LD_INT 0
35012: PPUSH
35013: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
35017: LD_VAR 0 2
35021: PUSH
35022: LD_INT 1
35024: ARRAY
35025: PPUSH
35026: LD_EXP 17
35030: PPUSH
35031: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
35035: LD_VAR 0 2
35039: PUSH
35040: LD_INT 2
35042: ARRAY
35043: PPUSH
35044: LD_INT 114
35046: PPUSH
35047: LD_INT 132
35049: PPUSH
35050: LD_INT 0
35052: PPUSH
35053: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
35057: LD_VAR 0 2
35061: PUSH
35062: LD_INT 3
35064: ARRAY
35065: PPUSH
35066: LD_INT 115
35068: PPUSH
35069: LD_INT 132
35071: PPUSH
35072: LD_INT 0
35074: PPUSH
35075: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
35079: LD_VAR 0 2
35083: PUSH
35084: LD_INT 2
35086: ARRAY
35087: PUSH
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 3
35095: ARRAY
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PPUSH
35101: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
35105: LD_VAR 0 4
35109: PPUSH
35110: LD_INT 83
35112: PPUSH
35113: LD_INT 123
35115: PPUSH
35116: CALL_OW 111
// Wait ( 0 0$01 ) ;
35120: LD_INT 35
35122: PPUSH
35123: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
35127: LD_INT 90
35129: PPUSH
35130: LD_INT 144
35132: PPUSH
35133: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
35137: LD_VAR 0 5
35141: PPUSH
35142: LD_INT 88
35144: PPUSH
35145: LD_INT 129
35147: PPUSH
35148: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
35152: LD_ADDR_VAR 0 3
35156: PUSH
35157: LD_INT 92
35159: PUSH
35160: LD_INT 131
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 88
35169: PUSH
35170: LD_INT 127
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 91
35179: PUSH
35180: LD_INT 132
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 92
35189: PUSH
35190: LD_INT 134
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// for i = 1 to sols do
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: DOUBLE
35209: LD_INT 1
35211: DEC
35212: ST_TO_ADDR
35213: LD_VAR 0 5
35217: PUSH
35218: FOR_TO
35219: IFFALSE 35292
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
35221: LD_VAR 0 5
35225: PUSH
35226: LD_VAR 0 6
35230: ARRAY
35231: PPUSH
35232: LD_VAR 0 3
35236: PUSH
35237: LD_VAR 0 6
35241: ARRAY
35242: PUSH
35243: LD_INT 1
35245: ARRAY
35246: PPUSH
35247: LD_VAR 0 3
35251: PUSH
35252: LD_VAR 0 6
35256: ARRAY
35257: PUSH
35258: LD_INT 2
35260: ARRAY
35261: PPUSH
35262: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
35266: LD_VAR 0 5
35270: PUSH
35271: LD_VAR 0 6
35275: ARRAY
35276: PPUSH
35277: CALL_OW 197
// AddComHold ( sols ) ;
35281: LD_VAR 0 5
35285: PPUSH
35286: CALL_OW 200
// end ;
35290: GO 35218
35292: POP
35293: POP
// repeat wait ( 0 0$1 ) ;
35294: LD_INT 35
35296: PPUSH
35297: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
35301: LD_VAR 0 5
35305: PUSH
35306: LD_INT 1
35308: ARRAY
35309: PPUSH
35310: LD_INT 92
35312: PPUSH
35313: LD_INT 131
35315: PPUSH
35316: CALL_OW 297
35320: PUSH
35321: LD_INT 4
35323: LESS
35324: IFFALSE 35294
// CenterOnXY ( 96 , 139 ) ;
35326: LD_INT 96
35328: PPUSH
35329: LD_INT 139
35331: PPUSH
35332: CALL_OW 84
// wait ( 0 0$3 ) ;
35336: LD_INT 105
35338: PPUSH
35339: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
35343: LD_INT 111
35345: PPUSH
35346: LD_INT 135
35348: PPUSH
35349: LD_INT 1
35351: PPUSH
35352: LD_INT 25
35354: NEG
35355: PPUSH
35356: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
35360: LD_VAR 0 2
35364: PUSH
35365: LD_INT 2
35367: ARRAY
35368: PPUSH
35369: LD_VAR 0 2
35373: PUSH
35374: LD_INT 1
35376: ARRAY
35377: PPUSH
35378: CALL_OW 250
35382: PUSH
35383: LD_INT 3
35385: PLUS
35386: PPUSH
35387: LD_VAR 0 2
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: PPUSH
35396: CALL_OW 251
35400: PPUSH
35401: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
35405: LD_VAR 0 2
35409: PUSH
35410: LD_INT 3
35412: ARRAY
35413: PPUSH
35414: LD_INT 7
35416: PPUSH
35417: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
35421: LD_VAR 0 2
35425: PUSH
35426: LD_INT 2
35428: ARRAY
35429: PPUSH
35430: LD_VAR 0 2
35434: PUSH
35435: LD_INT 1
35437: ARRAY
35438: PPUSH
35439: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
35443: LD_INT 35
35445: PPUSH
35446: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
35450: LD_VAR 0 2
35454: PUSH
35455: LD_INT 1
35457: ARRAY
35458: PPUSH
35459: LD_VAR 0 2
35463: PUSH
35464: LD_INT 2
35466: ARRAY
35467: PPUSH
35468: CALL_OW 296
35472: PUSH
35473: LD_INT 5
35475: LESS
35476: IFFALSE 35443
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
35478: LD_VAR 0 2
35482: PUSH
35483: LD_INT 1
35485: ARRAY
35486: PPUSH
35487: LD_VAR 0 2
35491: PUSH
35492: LD_INT 2
35494: ARRAY
35495: PPUSH
35496: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
35500: LD_VAR 0 2
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PPUSH
35509: LD_STRING D1a-Merc1-1
35511: PPUSH
35512: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
35516: LD_VAR 0 2
35520: PUSH
35521: LD_INT 2
35523: ARRAY
35524: PPUSH
35525: LD_STRING D1a-FMerc2-1
35527: PPUSH
35528: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
35532: LD_VAR 0 2
35536: PUSH
35537: LD_INT 2
35539: ARRAY
35540: PPUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_INT 1
35548: ARRAY
35549: PPUSH
35550: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
35554: LD_VAR 0 2
35558: PUSH
35559: LD_INT 1
35561: ARRAY
35562: PPUSH
35563: LD_INT 500
35565: PPUSH
35566: CALL_OW 234
// wait ( 0 0$2 ) ;
35570: LD_INT 70
35572: PPUSH
35573: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
35577: LD_VAR 0 2
35581: PUSH
35582: LD_INT 1
35584: ARRAY
35585: PPUSH
35586: LD_INT 2
35588: PPUSH
35589: CALL_OW 234
// wait ( 0 0$0.3 ) ;
35593: LD_INT 10
35595: PPUSH
35596: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
35600: LD_VAR 0 2
35604: PUSH
35605: LD_INT 1
35607: ARRAY
35608: PPUSH
35609: LD_STRING D1a-Merc1-2
35611: PPUSH
35612: CALL_OW 91
// wait ( 0 0$0.2 ) ;
35616: LD_INT 7
35618: PPUSH
35619: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
35623: LD_VAR 0 2
35627: PUSH
35628: LD_INT 1
35630: ARRAY
35631: PPUSH
35632: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
35636: LD_VAR 0 2
35640: PUSH
35641: LD_INT 2
35643: ARRAY
35644: PPUSH
35645: LD_INT 10
35647: PPUSH
35648: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
35652: LD_VAR 0 2
35656: PUSH
35657: LD_INT 2
35659: ARRAY
35660: PPUSH
35661: LD_STRING D1a-FMerc2-2
35663: PPUSH
35664: CALL_OW 88
// wait ( 0 0$1 ) ;
35668: LD_INT 35
35670: PPUSH
35671: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
35675: LD_INT 7
35677: PPUSH
35678: CALL_OW 85
// wait ( 0 0$2 ) ;
35682: LD_INT 70
35684: PPUSH
35685: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
35689: LD_EXP 39
35693: PPUSH
35694: LD_STRING D1a-Saliba-1
35696: PPUSH
35697: CALL_OW 91
// KillUnit ( Saliba ) ;
35701: LD_EXP 39
35705: PPUSH
35706: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
35710: LD_VAR 0 2
35714: PUSH
35715: LD_INT 3
35717: ARRAY
35718: PPUSH
35719: CALL_OW 122
// CenterOnUnits ( JMM ) ;
35723: LD_EXP 17
35727: PPUSH
35728: CALL_OW 85
// wait ( 0 0$1 ) ;
35732: LD_INT 35
35734: PPUSH
35735: CALL_OW 67
// InGameOff ;
35739: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
35743: LD_STRING M1
35745: PPUSH
35746: CALL_OW 337
// game_speed := 5 ;
35750: LD_ADDR_OWVAR 65
35754: PUSH
35755: LD_INT 5
35757: ST_TO_ADDR
// SaveForQuickRestart ;
35758: CALL_OW 22
// ar_run := true ;
35762: LD_ADDR_EXP 5
35766: PUSH
35767: LD_INT 1
35769: ST_TO_ADDR
// end ;
35770: LD_VAR 0 1
35774: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
35775: LD_EXP 5
35779: IFFALSE 36111
35781: GO 35783
35783: DISABLE
35784: LD_INT 0
35786: PPUSH
35787: PPUSH
35788: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
35789: LD_ADDR_VAR 0 2
35793: PUSH
35794: LD_EXP 36
35798: PUSH
35799: LD_EXP 33
35803: PPUSH
35804: LD_INT 21
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PPUSH
35814: CALL_OW 72
35818: ADD
35819: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
35820: LD_VAR 0 2
35824: PPUSH
35825: LD_INT 5
35827: PPUSH
35828: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
35832: LD_INT 5
35834: PPUSH
35835: LD_INT 1
35837: PPUSH
35838: CALL_OW 343
// k := 1 ;
35842: LD_ADDR_VAR 0 3
35846: PUSH
35847: LD_INT 1
35849: ST_TO_ADDR
// for i in tmp do
35850: LD_ADDR_VAR 0 1
35854: PUSH
35855: LD_VAR 0 2
35859: PUSH
35860: FOR_IN
35861: IFFALSE 35946
// begin if IsInUnit ( i ) then
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 310
35872: IFFALSE 35883
// ComExitBuilding ( i ) ;
35874: LD_VAR 0 1
35878: PPUSH
35879: CALL_OW 122
// if GetClass ( i ) = 3 then
35883: LD_VAR 0 1
35887: PPUSH
35888: CALL_OW 257
35892: PUSH
35893: LD_INT 3
35895: EQUAL
35896: IFFALSE 35932
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
35898: LD_VAR 0 1
35902: PPUSH
35903: LD_EXP 37
35907: PUSH
35908: LD_VAR 0 3
35912: ARRAY
35913: PPUSH
35914: CALL_OW 180
// k := k + 1 ;
35918: LD_ADDR_VAR 0 3
35922: PUSH
35923: LD_VAR 0 3
35927: PUSH
35928: LD_INT 1
35930: PLUS
35931: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
35932: LD_VAR 0 1
35936: PPUSH
35937: LD_INT 10
35939: PPUSH
35940: CALL_OW 173
// end ;
35944: GO 35860
35946: POP
35947: POP
// ar_patrol := true ;
35948: LD_ADDR_EXP 7
35952: PUSH
35953: LD_INT 1
35955: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
35956: LD_INT 10
35958: PPUSH
35959: CALL_OW 67
// for i in tmp do
35963: LD_ADDR_VAR 0 1
35967: PUSH
35968: LD_VAR 0 2
35972: PUSH
35973: FOR_IN
35974: IFFALSE 36002
// if not HasTask ( i ) then
35976: LD_VAR 0 1
35980: PPUSH
35981: CALL_OW 314
35985: NOT
35986: IFFALSE 36000
// ComMoveToArea ( i , escape_area ) ;
35988: LD_VAR 0 1
35992: PPUSH
35993: LD_INT 10
35995: PPUSH
35996: CALL_OW 113
36000: GO 35973
36002: POP
36003: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_VAR 0 2
36013: PPUSH
36014: LD_INT 95
36016: PUSH
36017: LD_INT 10
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PPUSH
36024: CALL_OW 72
36028: ST_TO_ADDR
// if k then
36029: LD_VAR 0 3
36033: IFFALSE 36102
// for i in k do
36035: LD_ADDR_VAR 0 1
36039: PUSH
36040: LD_VAR 0 3
36044: PUSH
36045: FOR_IN
36046: IFFALSE 36100
// begin if IsInUnit ( i ) then
36048: LD_VAR 0 1
36052: PPUSH
36053: CALL_OW 310
36057: IFFALSE 36073
// RemoveUnit ( IsInUnit ( i ) ) ;
36059: LD_VAR 0 1
36063: PPUSH
36064: CALL_OW 310
36068: PPUSH
36069: CALL_OW 64
// RemoveUnit ( i ) ;
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 64
// tmp := tmp diff i ;
36082: LD_ADDR_VAR 0 2
36086: PUSH
36087: LD_VAR 0 2
36091: PUSH
36092: LD_VAR 0 1
36096: DIFF
36097: ST_TO_ADDR
// end ;
36098: GO 36045
36100: POP
36101: POP
// until tmp = [ ] ;
36102: LD_VAR 0 2
36106: PUSH
36107: EMPTY
36108: EQUAL
36109: IFFALSE 35956
// end ;
36111: PPOPN 3
36113: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
36114: LD_EXP 7
36118: IFFALSE 36408
36120: GO 36122
36122: DISABLE
36123: LD_INT 0
36125: PPUSH
36126: PPUSH
36127: PPUSH
// begin uc_side := 2 ;
36128: LD_ADDR_OWVAR 20
36132: PUSH
36133: LD_INT 2
36135: ST_TO_ADDR
// uc_nation := 2 ;
36136: LD_ADDR_OWVAR 21
36140: PUSH
36141: LD_INT 2
36143: ST_TO_ADDR
// InitHc ;
36144: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
36148: LD_INT 1
36150: PPUSH
36151: LD_INT 1
36153: PPUSH
36154: LD_INT 6
36156: PPUSH
36157: CALL_OW 380
// un := CreateHuman ;
36161: LD_ADDR_VAR 0 2
36165: PUSH
36166: CALL_OW 44
36170: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
36171: LD_INT 14
36173: PPUSH
36174: LD_INT 1
36176: PPUSH
36177: LD_INT 1
36179: PPUSH
36180: LD_INT 27
36182: PPUSH
36183: LD_INT 98
36185: PPUSH
36186: CALL 1626 0 5
// veh := CreateVehicle ;
36190: LD_ADDR_VAR 0 3
36194: PUSH
36195: CALL_OW 45
36199: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
36200: LD_VAR 0 3
36204: PPUSH
36205: LD_INT 4
36207: PPUSH
36208: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
36212: LD_VAR 0 3
36216: PPUSH
36217: LD_INT 179
36219: PPUSH
36220: LD_INT 135
36222: PPUSH
36223: LD_INT 0
36225: PPUSH
36226: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
36230: LD_VAR 0 2
36234: PPUSH
36235: LD_VAR 0 3
36239: PPUSH
36240: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
36244: LD_VAR 0 2
36248: PPUSH
36249: LD_INT 126
36251: PPUSH
36252: LD_INT 133
36254: PPUSH
36255: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
36259: LD_INT 10
36261: PPUSH
36262: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
36266: LD_INT 1
36268: PPUSH
36269: LD_VAR 0 3
36273: PPUSH
36274: CALL_OW 292
36278: PUSH
36279: LD_VAR 0 3
36283: PPUSH
36284: LD_INT 7
36286: PPUSH
36287: CALL_OW 296
36291: PUSH
36292: LD_INT 9
36294: LESS
36295: OR
36296: IFFALSE 36259
// ComHold ( veh ) ;
36298: LD_VAR 0 3
36302: PPUSH
36303: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
36307: LD_VAR 0 2
36311: PPUSH
36312: LD_STRING D2aa-Ar1-1
36314: PPUSH
36315: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
36319: LD_VAR 0 2
36323: PPUSH
36324: LD_INT 177
36326: PPUSH
36327: LD_INT 96
36329: PPUSH
36330: CALL_OW 111
// AddComExitVehicle ( un ) ;
36334: LD_VAR 0 2
36338: PPUSH
36339: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
36343: LD_INT 35
36345: PPUSH
36346: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
36350: LD_VAR 0 2
36354: PPUSH
36355: LD_INT 69
36357: PPUSH
36358: CALL_OW 296
36362: PUSH
36363: LD_INT 15
36365: LESS
36366: IFFALSE 36343
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
36368: LD_ADDR_EXP 44
36372: PUSH
36373: LD_EXP 44
36377: PPUSH
36378: LD_INT 3
36380: PUSH
36381: LD_EXP 44
36385: PUSH
36386: LD_INT 3
36388: ARRAY
36389: PUSH
36390: LD_INT 1
36392: PLUS
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PPUSH
36398: LD_VAR 0 2
36402: PPUSH
36403: CALL 2780 0 3
36407: ST_TO_ADDR
// end ;
36408: PPOPN 3
36410: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
36411: LD_INT 7
36413: PPUSH
36414: CALL_OW 255
36418: PUSH
36419: LD_INT 1
36421: EQUAL
36422: PUSH
36423: LD_INT 7
36425: PPUSH
36426: CALL_OW 301
36430: OR
36431: IFFALSE 38798
36433: GO 36435
36435: DISABLE
36436: LD_INT 0
36438: PPUSH
36439: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
36440: LD_ADDR_VAR 0 2
36444: PUSH
36445: LD_INT 46
36447: PUSH
36448: LD_INT 41
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 50
36457: PUSH
36458: LD_INT 25
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 57
36467: PUSH
36468: LD_INT 75
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 75
36477: PUSH
36478: LD_INT 89
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 51
36487: PUSH
36488: LD_INT 45
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 95
36497: PUSH
36498: LD_INT 95
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 84
36507: PUSH
36508: LD_INT 77
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 101
36517: PUSH
36518: LD_INT 76
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: LD_INT 118
36527: PUSH
36528: LD_INT 81
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 139
36537: PUSH
36538: LD_INT 97
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 129
36547: PUSH
36548: LD_INT 114
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 154
36557: PUSH
36558: LD_INT 111
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
// base_captured := true ;
36579: LD_ADDR_EXP 6
36583: PUSH
36584: LD_INT 1
36586: ST_TO_ADDR
// DialogueOn ;
36587: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
36591: LD_EXP 17
36595: PPUSH
36596: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
36600: LD_EXP 17
36604: PPUSH
36605: LD_STRING D2-JMM-1
36607: PPUSH
36608: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
36612: LD_EXP 26
36616: PPUSH
36617: LD_STRING D2-Pow-1
36619: PPUSH
36620: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
36624: LD_EXP 17
36628: PPUSH
36629: LD_STRING D2-JMM-2
36631: PPUSH
36632: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
36636: LD_EXP 26
36640: PPUSH
36641: LD_STRING D2-Pow-2
36643: PPUSH
36644: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
36648: LD_EXP 17
36652: PPUSH
36653: LD_STRING D2-JMM-3
36655: PPUSH
36656: CALL_OW 88
// DialogueOff ;
36660: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
36664: LD_STRING M2
36666: PPUSH
36667: CALL_OW 337
// Wait ( 0 0$2 ) ;
36671: LD_INT 70
36673: PPUSH
36674: CALL_OW 67
// if IsOk ( Gary ) then
36678: LD_EXP 28
36682: PPUSH
36683: CALL_OW 302
36687: IFFALSE 36701
// Say ( Gary , D2a-Gary-1 ) ;
36689: LD_EXP 28
36693: PPUSH
36694: LD_STRING D2a-Gary-1
36696: PPUSH
36697: CALL_OW 88
// if IsOk ( Bobby ) then
36701: LD_EXP 20
36705: PPUSH
36706: CALL_OW 302
36710: IFFALSE 36724
// Say ( Bobby , D2a-Bobby-1 ) ;
36712: LD_EXP 20
36716: PPUSH
36717: LD_STRING D2a-Bobby-1
36719: PPUSH
36720: CALL_OW 88
// if IsOk ( Cyrus ) then
36724: LD_EXP 21
36728: PPUSH
36729: CALL_OW 302
36733: IFFALSE 36747
// Say ( Cyrus , D2a-Cyrus-1 ) ;
36735: LD_EXP 21
36739: PPUSH
36740: LD_STRING D2a-Cyrus-1
36742: PPUSH
36743: CALL_OW 88
// if IsOk ( Lisa ) then
36747: LD_EXP 18
36751: PPUSH
36752: CALL_OW 302
36756: IFFALSE 36770
// Say ( Lisa , D2a-Lisa-1 ) ;
36758: LD_EXP 18
36762: PPUSH
36763: LD_STRING D2a-Lisa-1
36765: PPUSH
36766: CALL_OW 88
// if IsOk ( Frank ) then
36770: LD_EXP 29
36774: PPUSH
36775: CALL_OW 302
36779: IFFALSE 36793
// Say ( Frank , D2a-Frank-1 ) ;
36781: LD_EXP 29
36785: PPUSH
36786: LD_STRING D2a-Frank-1
36788: PPUSH
36789: CALL_OW 88
// if IsOk ( Cornel ) then
36793: LD_EXP 27
36797: PPUSH
36798: CALL_OW 302
36802: IFFALSE 36816
// Say ( Cornel , D2a-Corn-1 ) ;
36804: LD_EXP 27
36808: PPUSH
36809: LD_STRING D2a-Corn-1
36811: PPUSH
36812: CALL_OW 88
// if IsOk ( Donaldson ) then
36816: LD_EXP 19
36820: PPUSH
36821: CALL_OW 302
36825: IFFALSE 36839
// Say ( Donaldson , D2a-Don-1 ) ;
36827: LD_EXP 19
36831: PPUSH
36832: LD_STRING D2a-Don-1
36834: PPUSH
36835: CALL_OW 88
// if IsOk ( Brown ) then
36839: LD_EXP 23
36843: PPUSH
36844: CALL_OW 302
36848: IFFALSE 36862
// Say ( Brown , D2a-Brown-1 ) ;
36850: LD_EXP 23
36854: PPUSH
36855: LD_STRING D2a-Brown-1
36857: PPUSH
36858: CALL_OW 88
// Wait ( 0 0$30 ) ;
36862: LD_INT 1050
36864: PPUSH
36865: CALL_OW 67
// if IsOk ( Frank ) then
36869: LD_EXP 29
36873: PPUSH
36874: CALL_OW 302
36878: IFFALSE 37144
// begin DialogueOn ;
36880: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
36884: LD_EXP 17
36888: PUSH
36889: LD_EXP 29
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PPUSH
36898: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
36902: LD_EXP 29
36906: PPUSH
36907: LD_STRING D3F-Frank-1
36909: PPUSH
36910: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
36914: LD_EXP 17
36918: PPUSH
36919: LD_STRING D3F-JMM-1
36921: PPUSH
36922: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
36926: LD_EXP 29
36930: PPUSH
36931: LD_STRING D3F-Frank-2
36933: PPUSH
36934: CALL_OW 88
// case Query ( QFrank ) of 1 :
36938: LD_STRING QFrank
36940: PPUSH
36941: CALL_OW 97
36945: PUSH
36946: LD_INT 1
36948: DOUBLE
36949: EQUAL
36950: IFTRUE 36954
36952: GO 36977
36954: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
36955: LD_EXP 17
36959: PPUSH
36960: LD_STRING D3Fa-JMM-1
36962: PPUSH
36963: CALL_OW 88
// us_scout := 1 ;
36967: LD_ADDR_EXP 8
36971: PUSH
36972: LD_INT 1
36974: ST_TO_ADDR
// end ; 2 :
36975: GO 37140
36977: LD_INT 2
36979: DOUBLE
36980: EQUAL
36981: IFTRUE 36985
36983: GO 37107
36985: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
36986: LD_EXP 17
36990: PPUSH
36991: LD_STRING D3Fb-JMM-1
36993: PPUSH
36994: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
36998: LD_EXP 29
37002: PPUSH
37003: LD_STRING D3Fb-Frank-1
37005: PPUSH
37006: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
37010: LD_STRING QFrank2
37012: PPUSH
37013: CALL_OW 97
37017: PUSH
37018: LD_INT 1
37020: DOUBLE
37021: EQUAL
37022: IFTRUE 37026
37024: GO 37073
37026: POP
// begin us_scout := 2 ;
37027: LD_ADDR_EXP 8
37031: PUSH
37032: LD_INT 2
37034: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
37035: LD_EXP 17
37039: PPUSH
37040: LD_STRING D3Fba-JMM-1
37042: PPUSH
37043: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
37047: LD_EXP 29
37051: PPUSH
37052: LD_STRING D3Fba-Frank-1
37054: PPUSH
37055: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
37059: LD_EXP 17
37063: PPUSH
37064: LD_STRING D3Fba-JMM-2
37066: PPUSH
37067: CALL_OW 88
// end ; 2 :
37071: GO 37105
37073: LD_INT 2
37075: DOUBLE
37076: EQUAL
37077: IFTRUE 37081
37079: GO 37104
37081: POP
// begin us_scout := 0 ;
37082: LD_ADDR_EXP 8
37086: PUSH
37087: LD_INT 0
37089: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
37090: LD_EXP 17
37094: PPUSH
37095: LD_STRING D3Fbb-JMM-1
37097: PPUSH
37098: CALL_OW 88
// end ; end ;
37102: GO 37105
37104: POP
// end ; 3 :
37105: GO 37140
37107: LD_INT 3
37109: DOUBLE
37110: EQUAL
37111: IFTRUE 37115
37113: GO 37139
37115: POP
// begin us_scout := - 1 ;
37116: LD_ADDR_EXP 8
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
37125: LD_EXP 17
37129: PPUSH
37130: LD_STRING D3Fc-JMM-1
37132: PPUSH
37133: CALL_OW 88
// end ; end ;
37137: GO 37140
37139: POP
// DialogueOff ;
37140: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
37144: LD_EXP 8
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: IN
37160: IFFALSE 37164
// exit ;
37162: GO 38798
// if us_scout in [ 1 , 2 ] then
37164: LD_EXP 8
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: IN
37179: IFFALSE 37880
// begin if IsInUnit ( Frank ) then
37181: LD_EXP 29
37185: PPUSH
37186: CALL_OW 310
37190: IFFALSE 37201
// ComExitBuilding ( Frank ) ;
37192: LD_EXP 29
37196: PPUSH
37197: CALL_OW 122
// if IsDrivenBy ( Frank ) then
37201: LD_EXP 29
37205: PPUSH
37206: CALL_OW 311
37210: IFFALSE 37221
// ComExitVehicle ( Frank ) ;
37212: LD_EXP 29
37216: PPUSH
37217: CALL_OW 121
// SetSide ( Frank , 4 ) ;
37221: LD_EXP 29
37225: PPUSH
37226: LD_INT 4
37228: PPUSH
37229: CALL_OW 235
// wait ( 0 0$1 ) ;
37233: LD_INT 35
37235: PPUSH
37236: CALL_OW 67
// if us_scout = 2 then
37240: LD_EXP 8
37244: PUSH
37245: LD_INT 2
37247: EQUAL
37248: IFFALSE 37616
// begin ComMoveXY ( Frank , 75 , 63 ) ;
37250: LD_EXP 29
37254: PPUSH
37255: LD_INT 75
37257: PPUSH
37258: LD_INT 63
37260: PPUSH
37261: CALL_OW 111
// AddComHold ( Frank ) ;
37265: LD_EXP 29
37269: PPUSH
37270: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
37274: LD_EXP 29
37278: PPUSH
37279: LD_INT 770
37281: PPUSH
37282: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
37286: LD_EXP 29
37290: PPUSH
37291: LD_INT 100
37293: PPUSH
37294: LD_INT 75
37296: PPUSH
37297: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
37301: LD_EXP 29
37305: PPUSH
37306: LD_INT 123
37308: PPUSH
37309: LD_INT 103
37311: PPUSH
37312: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
37316: LD_EXP 29
37320: PPUSH
37321: LD_INT 138
37323: PPUSH
37324: LD_INT 108
37326: PPUSH
37327: CALL_OW 171
// AddComHold ( Frank ) ;
37331: LD_EXP 29
37335: PPUSH
37336: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
37340: LD_INT 35
37342: PPUSH
37343: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
37347: LD_EXP 29
37351: PPUSH
37352: LD_INT 138
37354: PPUSH
37355: LD_INT 108
37357: PPUSH
37358: CALL_OW 307
37362: IFFALSE 37340
// AddComMoveXY ( Frank , 125 , 132 ) ;
37364: LD_EXP 29
37368: PPUSH
37369: LD_INT 125
37371: PPUSH
37372: LD_INT 132
37374: PPUSH
37375: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
37379: LD_INT 35
37381: PPUSH
37382: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
37386: LD_INT 1
37388: PPUSH
37389: LD_EXP 29
37393: PPUSH
37394: CALL_OW 292
37398: PUSH
37399: LD_EXP 29
37403: PPUSH
37404: LD_INT 7
37406: PPUSH
37407: CALL_OW 296
37411: PUSH
37412: LD_INT 7
37414: LESS
37415: OR
37416: IFFALSE 37379
// DialogueOn ;
37418: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
37422: LD_EXP 29
37426: PPUSH
37427: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
37431: LD_INT 10
37433: PPUSH
37434: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
37438: LD_EXP 17
37442: PPUSH
37443: LD_STRING D4Fa-JMM-1
37445: PPUSH
37446: CALL_OW 88
// for i in points do
37450: LD_ADDR_VAR 0 1
37454: PUSH
37455: LD_VAR 0 2
37459: PUSH
37460: FOR_IN
37461: IFFALSE 37519
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
37463: LD_VAR 0 1
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PPUSH
37472: LD_VAR 0 1
37476: PUSH
37477: LD_INT 2
37479: ARRAY
37480: PPUSH
37481: LD_INT 1
37483: PPUSH
37484: LD_INT 20
37486: NEG
37487: PPUSH
37488: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
37492: LD_VAR 0 1
37496: PUSH
37497: LD_INT 1
37499: ARRAY
37500: PPUSH
37501: LD_VAR 0 1
37505: PUSH
37506: LD_INT 2
37508: ARRAY
37509: PPUSH
37510: LD_INT 1
37512: PPUSH
37513: CALL_OW 331
// end ;
37517: GO 37460
37519: POP
37520: POP
// dwait ( 0 0$0.5 ) ;
37521: LD_INT 18
37523: PPUSH
37524: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
37528: LD_INT 42
37530: PPUSH
37531: LD_INT 27
37533: PPUSH
37534: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
37538: LD_EXP 29
37542: PPUSH
37543: LD_STRING D4Fa-Frank-1
37545: PPUSH
37546: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
37550: LD_INT 18
37552: PPUSH
37553: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
37557: LD_EXP 17
37561: PPUSH
37562: LD_STRING D4Fa-JMM-2
37564: PPUSH
37565: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
37569: LD_INT 118
37571: PPUSH
37572: LD_INT 80
37574: PPUSH
37575: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
37579: LD_EXP 29
37583: PPUSH
37584: LD_STRING D4Fa-Frank-2
37586: PPUSH
37587: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
37591: LD_INT 10
37593: PPUSH
37594: CALL_OW 68
// DialogueOff ;
37598: CALL_OW 7
// SetSide ( Frank , 1 ) ;
37602: LD_EXP 29
37606: PPUSH
37607: LD_INT 1
37609: PPUSH
37610: CALL_OW 235
// end else
37614: GO 37878
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
37616: LD_INT 2
37618: PPUSH
37619: LD_INT 4
37621: PPUSH
37622: LD_INT 2
37624: PPUSH
37625: LD_INT 1
37627: PPUSH
37628: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
37632: LD_EXP 29
37636: PPUSH
37637: LD_INT 75
37639: PPUSH
37640: LD_INT 63
37642: PPUSH
37643: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
37647: LD_EXP 29
37651: PPUSH
37652: LD_INT 175
37654: PPUSH
37655: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
37659: LD_EXP 29
37663: PPUSH
37664: LD_INT 102
37666: PPUSH
37667: LD_INT 76
37669: PPUSH
37670: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
37674: LD_EXP 29
37678: PPUSH
37679: LD_INT 108
37681: PPUSH
37682: LD_INT 70
37684: PPUSH
37685: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
37689: LD_INT 35
37691: PPUSH
37692: CALL_OW 67
// until See ( 2 , Frank ) ;
37696: LD_INT 2
37698: PPUSH
37699: LD_EXP 29
37703: PPUSH
37704: CALL_OW 292
37708: IFFALSE 37689
// ComMoveXY ( Frank , 112 , 118 ) ;
37710: LD_EXP 29
37714: PPUSH
37715: LD_INT 112
37717: PPUSH
37718: LD_INT 118
37720: PPUSH
37721: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
37725: LD_EXP 29
37729: PPUSH
37730: CALL_OW 256
37734: PUSH
37735: LD_INT 750
37737: GREATEREQUAL
37738: IFFALSE 37752
// SetLives ( Frank , 700 ) ;
37740: LD_EXP 29
37744: PPUSH
37745: LD_INT 700
37747: PPUSH
37748: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
37752: LD_INT 35
37754: PPUSH
37755: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
37759: LD_INT 1
37761: PPUSH
37762: LD_EXP 29
37766: PPUSH
37767: CALL_OW 292
37771: PUSH
37772: LD_EXP 29
37776: PPUSH
37777: LD_INT 7
37779: PPUSH
37780: CALL_OW 296
37784: PUSH
37785: LD_INT 17
37787: LESS
37788: OR
37789: IFFALSE 37752
// DialogueOn ;
37791: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
37795: LD_EXP 29
37799: PPUSH
37800: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
37804: LD_EXP 29
37808: PPUSH
37809: LD_STRING D4Fb-Frank-1
37811: PPUSH
37812: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
37816: LD_EXP 17
37820: PPUSH
37821: LD_STRING D4Fb-JMM-1
37823: PPUSH
37824: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
37828: LD_INT 2
37830: PPUSH
37831: LD_STRING D4Fb-FSci1-1
37833: PPUSH
37834: CALL 1849 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
37838: LD_EXP 29
37842: PPUSH
37843: LD_STRING D4Fb-Frank-2
37845: PPUSH
37846: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
37850: LD_EXP 17
37854: PPUSH
37855: LD_STRING D4Fb-JMM-2
37857: PPUSH
37858: CALL_OW 88
// DialogueOff ;
37862: CALL_OW 7
// SetSide ( Frank , 1 ) ;
37866: LD_EXP 29
37870: PPUSH
37871: LD_INT 1
37873: PPUSH
37874: CALL_OW 235
// end ; end else
37878: GO 38037
// if IsOk ( Kikuchi ) then
37880: LD_EXP 30
37884: PPUSH
37885: CALL_OW 302
37889: IFFALSE 38037
// begin DialogueOn ;
37891: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
37895: LD_EXP 17
37899: PUSH
37900: LD_EXP 30
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PPUSH
37909: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
37913: LD_EXP 30
37917: PPUSH
37918: LD_STRING D3Y-Yam-1
37920: PPUSH
37921: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
37925: LD_EXP 17
37929: PPUSH
37930: LD_STRING D3Y-JMM-1
37932: PPUSH
37933: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
37937: LD_EXP 30
37941: PPUSH
37942: LD_STRING D3Y-Yam-2
37944: PPUSH
37945: CALL_OW 88
// case Query ( QYamoko ) of 1 :
37949: LD_STRING QYamoko
37951: PPUSH
37952: CALL_OW 97
37956: PUSH
37957: LD_INT 1
37959: DOUBLE
37960: EQUAL
37961: IFTRUE 37965
37963: GO 38000
37965: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
37966: LD_EXP 17
37970: PPUSH
37971: LD_STRING D3Ya-JMM-1
37973: PPUSH
37974: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
37978: LD_EXP 30
37982: PPUSH
37983: LD_STRING D3Ya-Yam-1
37985: PPUSH
37986: CALL_OW 88
// us_scout := 1 ;
37990: LD_ADDR_EXP 8
37994: PUSH
37995: LD_INT 1
37997: ST_TO_ADDR
// end ; 2 :
37998: GO 38033
38000: LD_INT 2
38002: DOUBLE
38003: EQUAL
38004: IFTRUE 38008
38006: GO 38032
38008: POP
// begin us_scout := - 1 ;
38009: LD_ADDR_EXP 8
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
38018: LD_EXP 17
38022: PPUSH
38023: LD_STRING D3Yb-JMM-1
38025: PPUSH
38026: CALL_OW 88
// end ; end ;
38030: GO 38033
38032: POP
// DialogueOff ;
38033: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
38037: LD_EXP 8
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: IN
38053: IFFALSE 38057
// exit ;
38055: GO 38798
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
38057: LD_ADDR_EXP 8
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: LIST
38075: PUSH
38076: LD_OWVAR 67
38080: ARRAY
38081: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
38082: LD_EXP 8
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: IN
38097: IFFALSE 38798
// begin if IsInUnit ( Kikuchi ) then
38099: LD_EXP 30
38103: PPUSH
38104: CALL_OW 310
38108: IFFALSE 38119
// ComExitBuilding ( Kikuchi ) ;
38110: LD_EXP 30
38114: PPUSH
38115: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
38119: LD_EXP 30
38123: PPUSH
38124: CALL_OW 311
38128: IFFALSE 38139
// ComExitVehicle ( Kikuchi ) ;
38130: LD_EXP 30
38134: PPUSH
38135: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
38139: LD_EXP 30
38143: PPUSH
38144: LD_INT 4
38146: PPUSH
38147: CALL_OW 235
// wait ( 0 0$1 ) ;
38151: LD_INT 35
38153: PPUSH
38154: CALL_OW 67
// if us_scout = 2 then
38158: LD_EXP 8
38162: PUSH
38163: LD_INT 2
38165: EQUAL
38166: IFFALSE 38546
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
38168: LD_EXP 30
38172: PPUSH
38173: LD_INT 75
38175: PPUSH
38176: LD_INT 63
38178: PPUSH
38179: CALL_OW 111
// AddComHold ( Kikuchi ) ;
38183: LD_EXP 30
38187: PPUSH
38188: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
38192: LD_EXP 30
38196: PPUSH
38197: LD_INT 770
38199: PPUSH
38200: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
38204: LD_EXP 30
38208: PPUSH
38209: LD_INT 100
38211: PPUSH
38212: LD_INT 75
38214: PPUSH
38215: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
38219: LD_EXP 30
38223: PPUSH
38224: LD_INT 123
38226: PPUSH
38227: LD_INT 103
38229: PPUSH
38230: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
38234: LD_EXP 30
38238: PPUSH
38239: LD_INT 138
38241: PPUSH
38242: LD_INT 108
38244: PPUSH
38245: CALL_OW 171
// AddComHold ( Kikuchi ) ;
38249: LD_EXP 30
38253: PPUSH
38254: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
38258: LD_INT 35
38260: PPUSH
38261: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
38265: LD_EXP 30
38269: PPUSH
38270: LD_INT 138
38272: PPUSH
38273: LD_INT 108
38275: PPUSH
38276: CALL_OW 307
38280: IFFALSE 38258
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
38282: LD_EXP 30
38286: PPUSH
38287: LD_INT 125
38289: PPUSH
38290: LD_INT 132
38292: PPUSH
38293: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
38297: LD_INT 35
38299: PPUSH
38300: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
38304: LD_INT 1
38306: PPUSH
38307: LD_EXP 30
38311: PPUSH
38312: CALL_OW 292
38316: PUSH
38317: LD_EXP 30
38321: PPUSH
38322: LD_INT 7
38324: PPUSH
38325: CALL_OW 296
38329: PUSH
38330: LD_INT 7
38332: LESS
38333: OR
38334: IFFALSE 38297
// DialogueOn ;
38336: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
38340: LD_EXP 30
38344: PPUSH
38345: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
38349: LD_INT 10
38351: PPUSH
38352: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
38356: LD_EXP 30
38360: PPUSH
38361: LD_STRING D4Ya-Yam-1
38363: PPUSH
38364: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
38368: LD_EXP 17
38372: PPUSH
38373: LD_STRING D4Ya-JMM-1
38375: PPUSH
38376: CALL_OW 88
// for i in points do
38380: LD_ADDR_VAR 0 1
38384: PUSH
38385: LD_VAR 0 2
38389: PUSH
38390: FOR_IN
38391: IFFALSE 38449
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
38393: LD_VAR 0 1
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PPUSH
38402: LD_VAR 0 1
38406: PUSH
38407: LD_INT 2
38409: ARRAY
38410: PPUSH
38411: LD_INT 1
38413: PPUSH
38414: LD_INT 20
38416: NEG
38417: PPUSH
38418: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
38422: LD_VAR 0 1
38426: PUSH
38427: LD_INT 1
38429: ARRAY
38430: PPUSH
38431: LD_VAR 0 1
38435: PUSH
38436: LD_INT 2
38438: ARRAY
38439: PPUSH
38440: LD_INT 1
38442: PPUSH
38443: CALL_OW 331
// end ;
38447: GO 38390
38449: POP
38450: POP
// dwait ( 0 0$0.5 ) ;
38451: LD_INT 18
38453: PPUSH
38454: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
38458: LD_INT 42
38460: PPUSH
38461: LD_INT 27
38463: PPUSH
38464: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
38468: LD_EXP 30
38472: PPUSH
38473: LD_STRING D4Ya-Yam-2
38475: PPUSH
38476: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
38480: LD_INT 18
38482: PPUSH
38483: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
38487: LD_INT 118
38489: PPUSH
38490: LD_INT 80
38492: PPUSH
38493: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
38497: LD_EXP 17
38501: PPUSH
38502: LD_STRING D4Ya-JMM-2
38504: PPUSH
38505: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
38509: LD_EXP 30
38513: PPUSH
38514: LD_STRING D4Ya-Yam-3
38516: PPUSH
38517: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
38521: LD_INT 10
38523: PPUSH
38524: CALL_OW 68
// DialogueOff ;
38528: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
38532: LD_EXP 30
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: CALL_OW 235
// end else
38544: GO 38798
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
38546: LD_INT 2
38548: PPUSH
38549: LD_INT 4
38551: PPUSH
38552: LD_INT 2
38554: PPUSH
38555: LD_INT 1
38557: PPUSH
38558: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
38562: LD_EXP 30
38566: PPUSH
38567: LD_INT 75
38569: PPUSH
38570: LD_INT 63
38572: PPUSH
38573: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
38577: LD_EXP 30
38581: PPUSH
38582: LD_INT 175
38584: PPUSH
38585: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
38589: LD_EXP 30
38593: PPUSH
38594: LD_INT 102
38596: PPUSH
38597: LD_INT 76
38599: PPUSH
38600: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
38604: LD_EXP 30
38608: PPUSH
38609: LD_INT 108
38611: PPUSH
38612: LD_INT 70
38614: PPUSH
38615: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
38619: LD_INT 35
38621: PPUSH
38622: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
38626: LD_INT 2
38628: PPUSH
38629: LD_EXP 30
38633: PPUSH
38634: CALL_OW 292
38638: IFFALSE 38619
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
38640: LD_EXP 30
38644: PPUSH
38645: LD_INT 112
38647: PPUSH
38648: LD_INT 118
38650: PPUSH
38651: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
38655: LD_EXP 30
38659: PPUSH
38660: CALL_OW 256
38664: PUSH
38665: LD_INT 750
38667: GREATEREQUAL
38668: IFFALSE 38682
// SetLives ( Kikuchi , 700 ) ;
38670: LD_EXP 30
38674: PPUSH
38675: LD_INT 700
38677: PPUSH
38678: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
38682: LD_INT 35
38684: PPUSH
38685: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
38689: LD_INT 1
38691: PPUSH
38692: LD_EXP 30
38696: PPUSH
38697: CALL_OW 292
38701: PUSH
38702: LD_EXP 30
38706: PPUSH
38707: LD_INT 7
38709: PPUSH
38710: CALL_OW 296
38714: PUSH
38715: LD_INT 17
38717: LESS
38718: OR
38719: IFFALSE 38682
// DialogueOn ;
38721: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
38725: LD_EXP 30
38729: PPUSH
38730: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
38734: LD_EXP 30
38738: PPUSH
38739: LD_STRING D4Yb-Yam-1
38741: PPUSH
38742: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
38746: LD_EXP 17
38750: PPUSH
38751: LD_STRING D4Yb-JMM-1
38753: PPUSH
38754: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
38758: LD_EXP 30
38762: PPUSH
38763: LD_STRING D4Yb-Yam-2
38765: PPUSH
38766: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
38770: LD_EXP 17
38774: PPUSH
38775: LD_STRING D4Yb-JMM-2
38777: PPUSH
38778: CALL_OW 88
// DialogueOff ;
38782: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
38786: LD_EXP 30
38790: PPUSH
38791: LD_INT 1
38793: PPUSH
38794: CALL_OW 235
// end ; end ; end ;
38798: PPOPN 2
38800: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
38801: LD_EXP 6
38805: IFFALSE 39820
38807: GO 38809
38809: DISABLE
38810: LD_INT 0
38812: PPUSH
38813: PPUSH
38814: PPUSH
38815: PPUSH
// begin enable ;
38816: ENABLE
// if not seen [ 1 ] then
38817: LD_EXP 9
38821: PUSH
38822: LD_INT 1
38824: ARRAY
38825: NOT
38826: IFFALSE 39004
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_chassis , 15 ] ] ] ) ;
38828: LD_ADDR_VAR 0 2
38832: PUSH
38833: LD_INT 22
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 25
38848: PUSH
38849: LD_INT 11
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 31
38858: PUSH
38859: LD_INT 15
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PPUSH
38875: CALL_OW 69
38879: ST_TO_ADDR
// if tmp then
38880: LD_VAR 0 2
38884: IFFALSE 39004
// for i in tmp do
38886: LD_ADDR_VAR 0 1
38890: PUSH
38891: LD_VAR 0 2
38895: PUSH
38896: FOR_IN
38897: IFFALSE 39002
// if See ( 1 , i ) then
38899: LD_INT 1
38901: PPUSH
38902: LD_VAR 0 1
38906: PPUSH
38907: CALL_OW 292
38911: IFFALSE 39000
// begin seen := Replace ( seen , 1 , true ) ;
38913: LD_ADDR_EXP 9
38917: PUSH
38918: LD_EXP 9
38922: PPUSH
38923: LD_INT 1
38925: PPUSH
38926: LD_INT 1
38928: PPUSH
38929: CALL_OW 1
38933: ST_TO_ADDR
// if CanSayRand ( 1 ) then
38934: LD_INT 1
38936: PPUSH
38937: CALL 1684 0 1
38941: IFFALSE 39000
// begin DialogueOn ;
38943: CALL_OW 6
// CenterNowOnUnits ( i ) ;
38947: LD_VAR 0 1
38951: PPUSH
38952: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
38956: LD_INT 10
38958: PPUSH
38959: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
38963: LD_ADDR_VAR 0 3
38967: PUSH
38968: LD_INT 1
38970: PPUSH
38971: LD_STRING D5a-Sol2-1
38973: PPUSH
38974: CALL 1849 0 2
38978: ST_TO_ADDR
// if not un then
38979: LD_VAR 0 3
38983: NOT
38984: IFFALSE 38996
// SayRand ( sex_female , D5a-FSol2-1 ) ;
38986: LD_INT 2
38988: PPUSH
38989: LD_STRING D5a-FSol2-1
38991: PPUSH
38992: CALL 1849 0 2
// DialogueOff ;
38996: CALL_OW 7
// end ; end ;
39000: GO 38896
39002: POP
39003: POP
// end ; if not seen [ 2 ] then
39004: LD_EXP 9
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: NOT
39013: IFFALSE 39228
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
39015: LD_ADDR_VAR 0 2
39019: PUSH
39020: LD_INT 22
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 25
39032: PUSH
39033: LD_INT 17
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PPUSH
39044: CALL_OW 69
39048: ST_TO_ADDR
// if tmp then
39049: LD_VAR 0 2
39053: IFFALSE 39228
// for i in tmp do
39055: LD_ADDR_VAR 0 1
39059: PUSH
39060: LD_VAR 0 2
39064: PUSH
39065: FOR_IN
39066: IFFALSE 39226
// if See ( 1 , i ) then
39068: LD_INT 1
39070: PPUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 292
39080: IFFALSE 39224
// begin seen := Replace ( seen , 2 , true ) ;
39082: LD_ADDR_EXP 9
39086: PUSH
39087: LD_EXP 9
39091: PPUSH
39092: LD_INT 2
39094: PPUSH
39095: LD_INT 1
39097: PPUSH
39098: CALL_OW 1
39102: ST_TO_ADDR
// if CanSayRand ( 1 ) then
39103: LD_INT 1
39105: PPUSH
39106: CALL 1684 0 1
39110: IFFALSE 39224
// begin DialogueOn ;
39112: CALL_OW 6
// CenterNowOnUnits ( i ) ;
39116: LD_VAR 0 1
39120: PPUSH
39121: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39125: LD_INT 10
39127: PPUSH
39128: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
39132: LD_ADDR_VAR 0 3
39136: PUSH
39137: LD_INT 1
39139: PPUSH
39140: LD_STRING D5b-Sol1-1
39142: PPUSH
39143: CALL 1849 0 2
39147: ST_TO_ADDR
// if not un then
39148: LD_VAR 0 3
39152: NOT
39153: IFFALSE 39171
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
39155: LD_ADDR_VAR 0 3
39159: PUSH
39160: LD_INT 2
39162: PPUSH
39163: LD_STRING D5b-FSol1-1
39165: PPUSH
39166: CALL 1849 0 2
39170: ST_TO_ADDR
// if un then
39171: LD_VAR 0 3
39175: IFFALSE 39220
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
39177: LD_ADDR_VAR 0 4
39181: PUSH
39182: LD_INT 1
39184: PPUSH
39185: LD_STRING D5b-Sol2-1
39187: PPUSH
39188: LD_VAR 0 3
39192: PPUSH
39193: CALL 2062 0 3
39197: ST_TO_ADDR
// if not un2 then
39198: LD_VAR 0 4
39202: NOT
39203: IFFALSE 39220
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
39205: LD_INT 2
39207: PPUSH
39208: LD_STRING D5b-FSol2-1
39210: PPUSH
39211: LD_VAR 0 3
39215: PPUSH
39216: CALL 2062 0 3
// end ; DialogueOff ;
39220: CALL_OW 7
// end ; end ;
39224: GO 39065
39226: POP
39227: POP
// end ; if not seen [ 3 ] then
39228: LD_EXP 9
39232: PUSH
39233: LD_INT 3
39235: ARRAY
39236: NOT
39237: IFFALSE 39409
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
39239: LD_ADDR_VAR 0 2
39243: PUSH
39244: LD_INT 22
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 33
39256: PUSH
39257: LD_INT 2
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PPUSH
39268: CALL_OW 69
39272: ST_TO_ADDR
// if tmp then
39273: LD_VAR 0 2
39277: IFFALSE 39409
// for i in tmp do
39279: LD_ADDR_VAR 0 1
39283: PUSH
39284: LD_VAR 0 2
39288: PUSH
39289: FOR_IN
39290: IFFALSE 39407
// if See ( 1 , i ) then
39292: LD_INT 1
39294: PPUSH
39295: LD_VAR 0 1
39299: PPUSH
39300: CALL_OW 292
39304: IFFALSE 39405
// begin seen := Replace ( seen , 3 , true ) ;
39306: LD_ADDR_EXP 9
39310: PUSH
39311: LD_EXP 9
39315: PPUSH
39316: LD_INT 3
39318: PPUSH
39319: LD_INT 1
39321: PPUSH
39322: CALL_OW 1
39326: ST_TO_ADDR
// if CanSayRand ( 1 ) then
39327: LD_INT 1
39329: PPUSH
39330: CALL 1684 0 1
39334: IFFALSE 39405
// begin DialogueOn ;
39336: CALL_OW 6
// CenterNowOnUnits ( i ) ;
39340: LD_VAR 0 1
39344: PPUSH
39345: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39349: LD_INT 10
39351: PPUSH
39352: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
39356: LD_ADDR_VAR 0 3
39360: PUSH
39361: LD_INT 1
39363: PPUSH
39364: LD_STRING D8-Sol1-1
39366: PPUSH
39367: CALL 1849 0 2
39371: ST_TO_ADDR
// if not un then
39372: LD_VAR 0 3
39376: NOT
39377: IFFALSE 39389
// SayRand ( sex_female , D8-FSol1-1 ) ;
39379: LD_INT 2
39381: PPUSH
39382: LD_STRING D8-FSol1-1
39384: PPUSH
39385: CALL 1849 0 2
// Say ( JMM , D8-JMM-1 ) ;
39389: LD_EXP 17
39393: PPUSH
39394: LD_STRING D8-JMM-1
39396: PPUSH
39397: CALL_OW 88
// DialogueOff ;
39401: CALL_OW 7
// end ; end ;
39405: GO 39289
39407: POP
39408: POP
// end ; if not seen [ 4 ] then
39409: LD_EXP 9
39413: PUSH
39414: LD_INT 4
39416: ARRAY
39417: NOT
39418: IFFALSE 39578
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
39420: LD_ADDR_VAR 0 2
39424: PUSH
39425: LD_INT 22
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 33
39437: PUSH
39438: LD_INT 5
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PPUSH
39449: CALL_OW 69
39453: ST_TO_ADDR
// if tmp then
39454: LD_VAR 0 2
39458: IFFALSE 39578
// for i in tmp do
39460: LD_ADDR_VAR 0 1
39464: PUSH
39465: LD_VAR 0 2
39469: PUSH
39470: FOR_IN
39471: IFFALSE 39576
// if See ( 1 , i ) then
39473: LD_INT 1
39475: PPUSH
39476: LD_VAR 0 1
39480: PPUSH
39481: CALL_OW 292
39485: IFFALSE 39574
// begin seen := Replace ( seen , 4 , true ) ;
39487: LD_ADDR_EXP 9
39491: PUSH
39492: LD_EXP 9
39496: PPUSH
39497: LD_INT 4
39499: PPUSH
39500: LD_INT 1
39502: PPUSH
39503: CALL_OW 1
39507: ST_TO_ADDR
// if CanSayRand ( 1 ) then
39508: LD_INT 1
39510: PPUSH
39511: CALL 1684 0 1
39515: IFFALSE 39574
// begin DialogueOn ;
39517: CALL_OW 6
// CenterNowOnUnits ( i ) ;
39521: LD_VAR 0 1
39525: PPUSH
39526: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39530: LD_INT 10
39532: PPUSH
39533: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_INT 1
39544: PPUSH
39545: LD_STRING D5a-Sol1-1
39547: PPUSH
39548: CALL 1849 0 2
39552: ST_TO_ADDR
// if not un then
39553: LD_VAR 0 3
39557: NOT
39558: IFFALSE 39570
// SayRand ( sex_female , D5a-FSol1-1 ) ;
39560: LD_INT 2
39562: PPUSH
39563: LD_STRING D5a-FSol1-1
39565: PPUSH
39566: CALL 1849 0 2
// DialogueOff ;
39570: CALL_OW 7
// end ; end ;
39574: GO 39470
39576: POP
39577: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
39578: LD_EXP 9
39582: PUSH
39583: LD_INT 5
39585: ARRAY
39586: NOT
39587: PUSH
39588: LD_EXP 9
39592: PUSH
39593: LD_INT 3
39595: ARRAY
39596: AND
39597: IFFALSE 39769
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
39599: LD_ADDR_VAR 0 2
39603: PUSH
39604: LD_INT 22
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 34
39616: PUSH
39617: LD_INT 31
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PPUSH
39628: CALL_OW 69
39632: ST_TO_ADDR
// if tmp then
39633: LD_VAR 0 2
39637: IFFALSE 39769
// for i in tmp do
39639: LD_ADDR_VAR 0 1
39643: PUSH
39644: LD_VAR 0 2
39648: PUSH
39649: FOR_IN
39650: IFFALSE 39767
// if See ( 1 , i ) then
39652: LD_INT 1
39654: PPUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: CALL_OW 292
39664: IFFALSE 39765
// begin seen := Replace ( seen , 5 , true ) ;
39666: LD_ADDR_EXP 9
39670: PUSH
39671: LD_EXP 9
39675: PPUSH
39676: LD_INT 5
39678: PPUSH
39679: LD_INT 1
39681: PPUSH
39682: CALL_OW 1
39686: ST_TO_ADDR
// if CanSayRand ( 1 ) then
39687: LD_INT 1
39689: PPUSH
39690: CALL 1684 0 1
39694: IFFALSE 39765
// begin DialogueOn ;
39696: CALL_OW 6
// CenterNowOnUnits ( i ) ;
39700: LD_VAR 0 1
39704: PPUSH
39705: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39709: LD_INT 10
39711: PPUSH
39712: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_INT 1
39723: PPUSH
39724: LD_STRING D8a-Sol2-1
39726: PPUSH
39727: CALL 1849 0 2
39731: ST_TO_ADDR
// if not un then
39732: LD_VAR 0 3
39736: NOT
39737: IFFALSE 39749
// SayRand ( sex_female , D8a-FSol2-1 ) ;
39739: LD_INT 2
39741: PPUSH
39742: LD_STRING D8a-FSol2-1
39744: PPUSH
39745: CALL 1849 0 2
// Say ( JMM , D8a-JMM-1 ) ;
39749: LD_EXP 17
39753: PPUSH
39754: LD_STRING D8a-JMM-1
39756: PPUSH
39757: CALL_OW 88
// DialogueOff ;
39761: CALL_OW 7
// end ; end ;
39765: GO 39649
39767: POP
39768: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
39769: LD_EXP 9
39773: PUSH
39774: LD_INT 1
39776: ARRAY
39777: PUSH
39778: LD_EXP 9
39782: PUSH
39783: LD_INT 2
39785: ARRAY
39786: AND
39787: PUSH
39788: LD_EXP 9
39792: PUSH
39793: LD_INT 3
39795: ARRAY
39796: AND
39797: PUSH
39798: LD_EXP 9
39802: PUSH
39803: LD_INT 4
39805: ARRAY
39806: AND
39807: PUSH
39808: LD_EXP 9
39812: PUSH
39813: LD_INT 5
39815: ARRAY
39816: AND
39817: IFFALSE 39820
// disable ;
39819: DISABLE
// end ;
39820: PPOPN 4
39822: END
// every 0 0$1 trigger kamikazed do var un ;
39823: LD_EXP 10
39827: IFFALSE 40025
39829: GO 39831
39831: DISABLE
39832: LD_INT 0
39834: PPUSH
// begin DialogueOn ;
39835: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
39839: LD_EXP 10
39843: PPUSH
39844: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
39848: LD_ADDR_VAR 0 1
39852: PUSH
39853: LD_INT 1
39855: PPUSH
39856: LD_STRING D5c-Sol1-1
39858: PPUSH
39859: CALL 1849 0 2
39863: ST_TO_ADDR
// if not un then
39864: LD_VAR 0 1
39868: NOT
39869: IFFALSE 39887
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
39871: LD_ADDR_VAR 0 1
39875: PUSH
39876: LD_INT 2
39878: PPUSH
39879: LD_STRING D5c-Sol1-1
39881: PPUSH
39882: CALL 1849 0 2
39886: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
39887: LD_EXP 17
39891: PPUSH
39892: LD_STRING D5c-JMM-1
39894: PPUSH
39895: CALL_OW 88
// if IsOk ( Lisa ) then
39899: LD_EXP 18
39903: PPUSH
39904: CALL_OW 302
39908: IFFALSE 39924
// Say ( Lisa , D5d-Lisa-1 ) else
39910: LD_EXP 18
39914: PPUSH
39915: LD_STRING D5d-Lisa-1
39917: PPUSH
39918: CALL_OW 88
39922: GO 40009
// if IsOk ( Cyrus ) then
39924: LD_EXP 21
39928: PPUSH
39929: CALL_OW 302
39933: IFFALSE 39949
// Say ( Cyrus , D5d-Cyrus-1 ) else
39935: LD_EXP 21
39939: PPUSH
39940: LD_STRING D5d-Cyrus-1
39942: PPUSH
39943: CALL_OW 88
39947: GO 40009
// if IsOk ( Gary ) then
39949: LD_EXP 28
39953: PPUSH
39954: CALL_OW 302
39958: IFFALSE 39974
// Say ( Gary , D5d-Gary-1 ) else
39960: LD_EXP 28
39964: PPUSH
39965: LD_STRING D5d-Gary-1
39967: PPUSH
39968: CALL_OW 88
39972: GO 40009
// if GetSex ( un ) = sex_male then
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 258
39983: PUSH
39984: LD_INT 1
39986: EQUAL
39987: IFFALSE 40003
// Say ( un , D5d-Sol1-1 ) else
39989: LD_VAR 0 1
39993: PPUSH
39994: LD_STRING D5d-Sol1-1
39996: PPUSH
39997: CALL_OW 88
40001: GO 40009
// begin DialogueOff ;
40003: CALL_OW 7
// exit ;
40007: GO 40025
// end ; Say ( JMM , D5d-JMM-1 ) ;
40009: LD_EXP 17
40013: PPUSH
40014: LD_STRING D5d-JMM-1
40016: PPUSH
40017: CALL_OW 88
// DialogueOff ;
40021: CALL_OW 7
// end ;
40025: PPOPN 1
40027: END
// every 0 0$1 trigger SeeXY ( 1 , 10 , 5 ) do var un ;
40028: LD_INT 1
40030: PPUSH
40031: LD_INT 10
40033: PPUSH
40034: LD_INT 5
40036: PPUSH
40037: CALL_OW 293
40041: IFFALSE 40114
40043: GO 40045
40045: DISABLE
40046: LD_INT 0
40048: PPUSH
// begin un := SayRand ( sex_male , D6-Sci1-1 ) ;
40049: LD_ADDR_VAR 0 1
40053: PUSH
40054: LD_INT 1
40056: PPUSH
40057: LD_STRING D6-Sci1-1
40059: PPUSH
40060: CALL 1849 0 2
40064: ST_TO_ADDR
// if un then
40065: LD_VAR 0 1
40069: IFFALSE 40107
// begin Say ( JMM , D6-JMM-1 ) ;
40071: LD_EXP 17
40075: PPUSH
40076: LD_STRING D6-JMM-1
40078: PPUSH
40079: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
40083: LD_VAR 0 1
40087: PPUSH
40088: LD_STRING D6-Sci1-2
40090: PPUSH
40091: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
40095: LD_EXP 17
40099: PPUSH
40100: LD_STRING D6-JMM-2
40102: PPUSH
40103: CALL_OW 88
// end ; ChangeMissionObjectives ( M3 ) ;
40107: LD_STRING M3
40109: PPUSH
40110: CALL_OW 337
// end ;
40114: PPOPN 1
40116: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
40117: LD_OWVAR 1
40121: PUSH
40122: LD_INT 65100
40124: GREATEREQUAL
40125: PUSH
40126: LD_INT 2
40128: PPUSH
40129: LD_INT 169
40131: PPUSH
40132: LD_INT 90
40134: PPUSH
40135: LD_INT 40
40137: PPUSH
40138: CALL 3274 0 4
40142: PUSH
40143: LD_INT 4
40145: ARRAY
40146: PUSH
40147: LD_INT 0
40149: EQUAL
40150: AND
40151: IFFALSE 41156
40153: GO 40155
40155: DISABLE
40156: LD_INT 0
40158: PPUSH
40159: PPUSH
40160: PPUSH
40161: PPUSH
// begin uc_side := 5 ;
40162: LD_ADDR_OWVAR 20
40166: PUSH
40167: LD_INT 5
40169: ST_TO_ADDR
// uc_nation := 2 ;
40170: LD_ADDR_OWVAR 21
40174: PUSH
40175: LD_INT 2
40177: ST_TO_ADDR
// InitHc ;
40178: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
40182: LD_INT 1
40184: PPUSH
40185: LD_INT 3
40187: PPUSH
40188: LD_INT 8
40190: PPUSH
40191: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
40195: LD_ADDR_OWVAR 29
40199: PUSH
40200: LD_INT 12
40202: PUSH
40203: LD_INT 12
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
40210: LD_ADDR_OWVAR 33
40214: PUSH
40215: LD_STRING SecondCharsGal
40217: ST_TO_ADDR
// hc_face_number := 7 ;
40218: LD_ADDR_OWVAR 34
40222: PUSH
40223: LD_INT 7
40225: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
40226: LD_ADDR_EXP 40
40230: PUSH
40231: CALL_OW 44
40235: ST_TO_ADDR
// PrepareHuman ( sex_male , 16 , 2 ) ;
40236: LD_INT 1
40238: PPUSH
40239: LD_INT 16
40241: PPUSH
40242: LD_INT 2
40244: PPUSH
40245: CALL_OW 380
// ar_mechanic_friend := CreateHuman ;
40249: LD_ADDR_EXP 41
40253: PUSH
40254: CALL_OW 44
40258: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40259: LD_INT 35
40261: PPUSH
40262: CALL_OW 67
// until not InBattle ( 1 ) ;
40266: LD_INT 1
40268: PPUSH
40269: CALL_OW 463
40273: NOT
40274: IFFALSE 40259
// wait ( 0 0$5 ) ;
40276: LD_INT 175
40278: PPUSH
40279: CALL_OW 67
// DialogueOn ;
40283: CALL_OW 6
// InGameOn ;
40287: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
40291: LD_ADDR_VAR 0 1
40295: PUSH
40296: LD_EXP 31
40300: PUSH
40301: LD_EXP 18
40305: PUSH
40306: LD_EXP 19
40310: PUSH
40311: LD_EXP 20
40315: PUSH
40316: LD_EXP 21
40320: PUSH
40321: LD_EXP 22
40325: PUSH
40326: LD_EXP 23
40330: PUSH
40331: LD_EXP 24
40335: PUSH
40336: LD_EXP 25
40340: PUSH
40341: LD_EXP 27
40345: PUSH
40346: LD_EXP 28
40350: PUSH
40351: LD_EXP 29
40355: PUSH
40356: LD_EXP 30
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: DIFF
40375: PPUSH
40376: LD_INT 26
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PPUSH
40386: CALL_OW 72
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: ST_TO_ADDR
// if not un and Brown then
40395: LD_VAR 0 1
40399: NOT
40400: PUSH
40401: LD_EXP 23
40405: AND
40406: IFFALSE 40418
// un := Brown ;
40408: LD_ADDR_VAR 0 1
40412: PUSH
40413: LD_EXP 23
40417: ST_TO_ADDR
// if un then
40418: LD_VAR 0 1
40422: IFFALSE 40448
// begin Say ( un , D7-Sol1-1 ) ;
40424: LD_VAR 0 1
40428: PPUSH
40429: LD_STRING D7-Sol1-1
40431: PPUSH
40432: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
40436: LD_EXP 17
40440: PPUSH
40441: LD_STRING D7-JMM-1
40443: PPUSH
40444: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
40448: LD_EXP 40
40452: PPUSH
40453: LD_STRING D7-Ar1-1
40455: PPUSH
40456: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
40460: LD_EXP 17
40464: PPUSH
40465: LD_STRING D7-JMM-2
40467: PPUSH
40468: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
40472: LD_EXP 40
40476: PPUSH
40477: LD_STRING D7-Ar1-2
40479: PPUSH
40480: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
40484: LD_EXP 17
40488: PPUSH
40489: LD_STRING D7-JMM-3
40491: PPUSH
40492: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
40496: LD_EXP 40
40500: PPUSH
40501: LD_STRING D7-Ar1-3
40503: PPUSH
40504: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
40508: LD_EXP 17
40512: PPUSH
40513: LD_STRING D7-JMM-4
40515: PPUSH
40516: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
40520: LD_EXP 40
40524: PPUSH
40525: LD_STRING D7-Ar1-4
40527: PPUSH
40528: CALL_OW 94
// InGameOff ;
40532: CALL_OW 9
// DialogueOff ;
40536: CALL_OW 7
// case Query ( QCameras ) of 1 :
40540: LD_STRING QCameras
40542: PPUSH
40543: CALL_OW 97
40547: PUSH
40548: LD_INT 1
40550: DOUBLE
40551: EQUAL
40552: IFTRUE 40556
40554: GO 40559
40556: POP
// ; 2 :
40557: GO 40573
40559: LD_INT 2
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40572
40567: POP
// exit ; end ;
40568: GO 41156
40570: GO 40573
40572: POP
// ChangeMissionObjectives ( MCar ) ;
40573: LD_STRING MCar
40575: PPUSH
40576: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
40580: LD_INT 124
40582: PPUSH
40583: LD_INT 90
40585: PPUSH
40586: LD_INT 1
40588: PPUSH
40589: LD_INT 6
40591: NEG
40592: PPUSH
40593: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
40597: LD_INT 124
40599: PPUSH
40600: LD_INT 90
40602: PPUSH
40603: LD_INT 1
40605: PPUSH
40606: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
40610: LD_INT 12
40612: PPUSH
40613: LD_INT 1
40615: PPUSH
40616: CALL_OW 424
// wait ( 3 ) ;
40620: LD_INT 3
40622: PPUSH
40623: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
40627: LD_INT 124
40629: PPUSH
40630: LD_INT 90
40632: PPUSH
40633: CALL_OW 86
// cargo := false ;
40637: LD_ADDR_VAR 0 3
40641: PUSH
40642: LD_INT 0
40644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40645: LD_INT 35
40647: PPUSH
40648: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
40652: LD_ADDR_VAR 0 3
40656: PUSH
40657: LD_INT 12
40659: PPUSH
40660: LD_INT 32
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 34
40672: PUSH
40673: LD_INT 32
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 58
40682: PUSH
40683: EMPTY
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: PPUSH
40691: CALL_OW 70
40695: ST_TO_ADDR
// until cargo ;
40696: LD_VAR 0 3
40700: IFFALSE 40645
// cargo := cargo [ 1 ] ;
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: LD_VAR 0 3
40711: PUSH
40712: LD_INT 1
40714: ARRAY
40715: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
40716: LD_VAR 0 3
40720: PPUSH
40721: LD_INT 5
40723: PPUSH
40724: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
40728: LD_INT 12
40730: PPUSH
40731: LD_INT 0
40733: PPUSH
40734: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
40738: LD_EXP 40
40742: PPUSH
40743: LD_INT 11
40745: PPUSH
40746: LD_INT 0
40748: PPUSH
40749: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
40753: LD_EXP 41
40757: PPUSH
40758: LD_INT 11
40760: PPUSH
40761: LD_INT 0
40763: PPUSH
40764: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
40768: LD_EXP 40
40772: PUSH
40773: LD_EXP 41
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PPUSH
40782: LD_INT 12
40784: PPUSH
40785: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
40789: LD_INT 35
40791: PPUSH
40792: CALL_OW 67
// until GetDistUnits ( ar_mechanic , cargo ) < 6 and GetDistUnits ( ar_mechanic_friend , cargo ) < 7 ;
40796: LD_EXP 40
40800: PPUSH
40801: LD_VAR 0 3
40805: PPUSH
40806: CALL_OW 296
40810: PUSH
40811: LD_INT 6
40813: LESS
40814: PUSH
40815: LD_EXP 41
40819: PPUSH
40820: LD_VAR 0 3
40824: PPUSH
40825: CALL_OW 296
40829: PUSH
40830: LD_INT 7
40832: LESS
40833: AND
40834: IFFALSE 40789
// ComEnterUnit ( ar_mechanic , cargo ) ;
40836: LD_EXP 40
40840: PPUSH
40841: LD_VAR 0 3
40845: PPUSH
40846: CALL_OW 120
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
40850: LD_EXP 40
40854: PUSH
40855: LD_EXP 41
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PPUSH
40864: LD_INT 209
40866: PPUSH
40867: LD_INT 178
40869: PPUSH
40870: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40874: LD_INT 35
40876: PPUSH
40877: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
40881: LD_EXP 40
40885: PPUSH
40886: CALL_OW 314
40890: NOT
40891: PUSH
40892: LD_EXP 41
40896: PPUSH
40897: CALL_OW 314
40901: NOT
40902: OR
40903: IFFALSE 40929
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
40905: LD_EXP 40
40909: PUSH
40910: LD_EXP 41
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PPUSH
40919: LD_INT 209
40921: PPUSH
40922: LD_INT 178
40924: PPUSH
40925: CALL_OW 171
// until IsInArea ( cargo , escape_area ) and IsInUnit ( ar_mechanic ) and IsInArea ( ar_mechanic_friend , escape_area ) ;
40929: LD_VAR 0 3
40933: PPUSH
40934: LD_INT 10
40936: PPUSH
40937: CALL_OW 308
40941: PUSH
40942: LD_EXP 40
40946: PPUSH
40947: CALL_OW 310
40951: AND
40952: PUSH
40953: LD_EXP 41
40957: PPUSH
40958: LD_INT 10
40960: PPUSH
40961: CALL_OW 308
40965: AND
40966: IFFALSE 40874
// RemoveUnit ( ar_mechanic ) ;
40968: LD_EXP 40
40972: PPUSH
40973: CALL_OW 64
// RemoveUnit ( ar_mechanic_friend ) ;
40977: LD_EXP 41
40981: PPUSH
40982: CALL_OW 64
// RemoveUnit ( cargo ) ;
40986: LD_VAR 0 3
40990: PPUSH
40991: CALL_OW 64
// wait ( 0 0$2 ) ;
40995: LD_INT 70
40997: PPUSH
40998: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
41002: LD_EXP 40
41006: PPUSH
41007: LD_STRING D7a-Ar1-1
41009: PPUSH
41010: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
41014: LD_ADDR_VAR 0 4
41018: PUSH
41019: LD_INT 129
41021: PUSH
41022: LD_INT 10
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 103
41031: PUSH
41032: LD_INT 6
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 148
41041: PUSH
41042: LD_INT 47
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 155
41051: PUSH
41052: LD_INT 16
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: ST_TO_ADDR
// if Difficulty = 1 then
41065: LD_OWVAR 67
41069: PUSH
41070: LD_INT 1
41072: EQUAL
41073: IFFALSE 41110
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
41075: LD_ADDR_VAR 0 4
41079: PUSH
41080: LD_VAR 0 4
41084: PUSH
41085: LD_INT 78
41087: PUSH
41088: LD_INT 7
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 104
41097: PUSH
41098: LD_INT 43
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: ADD
41109: ST_TO_ADDR
// for i in tmp do
41110: LD_ADDR_VAR 0 2
41114: PUSH
41115: LD_VAR 0 4
41119: PUSH
41120: FOR_IN
41121: IFFALSE 41154
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
41123: LD_VAR 0 2
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PPUSH
41132: LD_VAR 0 2
41136: PUSH
41137: LD_INT 2
41139: ARRAY
41140: PPUSH
41141: LD_INT 1
41143: PPUSH
41144: LD_INT 9
41146: NEG
41147: PPUSH
41148: CALL_OW 330
41152: GO 41120
41154: POP
41155: POP
// end ;
41156: PPOPN 4
41158: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
41159: LD_EXP 14
41163: PUSH
41164: LD_INT 21000
41166: MINUS
41167: PUSH
41168: LD_OWVAR 1
41172: LESSEQUAL
41173: IFFALSE 41213
41175: GO 41177
41177: DISABLE
// begin powell_warn := true ;
41178: LD_ADDR_EXP 15
41182: PUSH
41183: LD_INT 1
41185: ST_TO_ADDR
// DialogueOn ;
41186: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
41190: LD_EXP 26
41194: PPUSH
41195: LD_STRING D9-Pow-1
41197: PPUSH
41198: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
41202: LD_INT 10
41204: PPUSH
41205: CALL_OW 68
// DialogueOff ;
41209: CALL_OW 7
// end ;
41213: END
// every 0 0$1 trigger game_time <= tick do
41214: LD_EXP 14
41218: PUSH
41219: LD_OWVAR 1
41223: LESSEQUAL
41224: IFFALSE 41263
41226: GO 41228
41228: DISABLE
// begin DialogueOn ;
41229: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
41233: LD_EXP 26
41237: PPUSH
41238: LD_STRING D9a-Pow-1
41240: PPUSH
41241: CALL_OW 94
// dwait ( 0 0$2 ) ;
41245: LD_INT 70
41247: PPUSH
41248: CALL_OW 68
// DialogueOff ;
41252: CALL_OW 7
// YouLost ( Command ) ;
41256: LD_STRING Command
41258: PPUSH
41259: CALL_OW 104
// end ;
41263: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
41264: LD_EXP 17
41268: PPUSH
41269: CALL_OW 301
41273: PUSH
41274: LD_EXP 5
41278: AND
41279: IFFALSE 41291
41281: GO 41283
41283: DISABLE
// YouLost ( JMM ) ;
41284: LD_STRING JMM
41286: PPUSH
41287: CALL_OW 104
41291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
41292: LD_INT 22
41294: PUSH
41295: LD_INT 2
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 30
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PPUSH
41316: CALL_OW 69
41320: PUSH
41321: LD_INT 0
41323: EQUAL
41324: PUSH
41325: LD_EXP 17
41329: PPUSH
41330: CALL_OW 302
41334: AND
41335: IFFALSE 42076
41337: GO 41339
41339: DISABLE
// begin DialogueOn ;
41340: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
41344: LD_OWVAR 1
41348: PUSH
41349: LD_INT 126000
41351: PUSH
41352: LD_INT 105000
41354: PUSH
41355: LD_INT 94500
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: LIST
41362: PUSH
41363: LD_OWVAR 67
41367: ARRAY
41368: LESS
41369: IFFALSE 41383
// AddMedal ( Time1 , 2 ) else
41371: LD_STRING Time1
41373: PPUSH
41374: LD_INT 2
41376: PPUSH
41377: CALL_OW 101
41381: GO 41413
// if not powell_warn then
41383: LD_EXP 15
41387: NOT
41388: IFFALSE 41402
// AddMedal ( Time1 , 1 ) else
41390: LD_STRING Time1
41392: PPUSH
41393: LD_INT 1
41395: PPUSH
41396: CALL_OW 101
41400: GO 41413
// AddMedal ( Time1 , - 1 ) ;
41402: LD_STRING Time1
41404: PPUSH
41405: LD_INT 1
41407: NEG
41408: PPUSH
41409: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
41413: LD_EXP 16
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: LD_INT 4
41423: PUSH
41424: LD_INT 3
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: PUSH
41432: LD_OWVAR 67
41436: ARRAY
41437: GREATEREQUAL
41438: IFFALSE 41453
// AddMedal ( Destroy , - 2 ) else
41440: LD_STRING Destroy
41442: PPUSH
41443: LD_INT 2
41445: NEG
41446: PPUSH
41447: CALL_OW 101
41451: GO 41570
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
41453: LD_INT 22
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 21
41465: PUSH
41466: LD_INT 3
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 50
41475: PUSH
41476: EMPTY
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: PPUSH
41484: CALL_OW 69
41488: PUSH
41489: LD_INT 20
41491: GREATEREQUAL
41492: IFFALSE 41507
// AddMedal ( Destroy , - 1 ) else
41494: LD_STRING Destroy
41496: PPUSH
41497: LD_INT 1
41499: NEG
41500: PPUSH
41501: CALL_OW 101
41505: GO 41570
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
41507: LD_INT 22
41509: PUSH
41510: LD_INT 2
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 21
41519: PUSH
41520: LD_INT 3
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 50
41529: PUSH
41530: EMPTY
41531: LIST
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: PPUSH
41538: CALL_OW 69
41542: PUSH
41543: LD_INT 10
41545: GREATEREQUAL
41546: IFFALSE 41560
// AddMedal ( Destroy , 1 ) else
41548: LD_STRING Destroy
41550: PPUSH
41551: LD_INT 1
41553: PPUSH
41554: CALL_OW 101
41558: GO 41570
// AddMedal ( Destroy , 2 ) ;
41560: LD_STRING Destroy
41562: PPUSH
41563: LD_INT 2
41565: PPUSH
41566: CALL_OW 101
// if artifact_get then
41570: LD_EXP 12
41574: IFFALSE 41588
// AddMedal ( Artefact , 1 ) else
41576: LD_STRING Artefact
41578: PPUSH
41579: LD_INT 1
41581: PPUSH
41582: CALL_OW 101
41586: GO 41599
// AddMedal ( Artefact , - 1 ) ;
41588: LD_STRING Artefact
41590: PPUSH
41591: LD_INT 1
41593: NEG
41594: PPUSH
41595: CALL_OW 101
// GiveMedals ( MAIN ) ;
41599: LD_STRING MAIN
41601: PPUSH
41602: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
41606: LD_INT 22
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 2
41618: PUSH
41619: LD_INT 25
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 25
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 25
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 25
41651: PUSH
41652: LD_INT 4
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PPUSH
41670: CALL_OW 69
41674: PPUSH
41675: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
41679: LD_EXP 31
41683: PUSH
41684: LD_EXP 18
41688: PUSH
41689: LD_EXP 19
41693: PUSH
41694: LD_EXP 20
41698: PUSH
41699: LD_EXP 21
41703: PUSH
41704: LD_EXP 22
41708: PUSH
41709: LD_EXP 23
41713: PUSH
41714: LD_EXP 24
41718: PUSH
41719: LD_EXP 25
41723: PUSH
41724: LD_EXP 27
41728: PUSH
41729: LD_EXP 28
41733: PUSH
41734: LD_EXP 29
41738: PUSH
41739: LD_EXP 30
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: DIFF
41758: PPUSH
41759: LD_STRING 11c_others
41761: PPUSH
41762: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
41766: LD_EXP 17
41770: PPUSH
41771: LD_EXP 3
41775: PUSH
41776: LD_STRING JMM
41778: STR
41779: PPUSH
41780: CALL_OW 38
// if Lisa then
41784: LD_EXP 18
41788: IFFALSE 41808
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
41790: LD_EXP 18
41794: PPUSH
41795: LD_EXP 3
41799: PUSH
41800: LD_STRING Lisa
41802: STR
41803: PPUSH
41804: CALL_OW 38
// if Donaldson then
41808: LD_EXP 19
41812: IFFALSE 41832
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
41814: LD_EXP 19
41818: PPUSH
41819: LD_EXP 3
41823: PUSH
41824: LD_STRING Donaldson
41826: STR
41827: PPUSH
41828: CALL_OW 38
// if Bobby then
41832: LD_EXP 20
41836: IFFALSE 41856
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
41838: LD_EXP 20
41842: PPUSH
41843: LD_EXP 3
41847: PUSH
41848: LD_STRING Bobby
41850: STR
41851: PPUSH
41852: CALL_OW 38
// if Cyrus then
41856: LD_EXP 21
41860: IFFALSE 41880
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
41862: LD_EXP 21
41866: PPUSH
41867: LD_EXP 3
41871: PUSH
41872: LD_STRING Cyrus
41874: STR
41875: PPUSH
41876: CALL_OW 38
// if Denis then
41880: LD_EXP 22
41884: IFFALSE 41904
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
41886: LD_EXP 22
41890: PPUSH
41891: LD_EXP 3
41895: PUSH
41896: LD_STRING Denis
41898: STR
41899: PPUSH
41900: CALL_OW 38
// if Brown then
41904: LD_EXP 23
41908: IFFALSE 41928
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
41910: LD_EXP 23
41914: PPUSH
41915: LD_EXP 3
41919: PUSH
41920: LD_STRING Brown
41922: STR
41923: PPUSH
41924: CALL_OW 38
// if Gladstone then
41928: LD_EXP 24
41932: IFFALSE 41952
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
41934: LD_EXP 24
41938: PPUSH
41939: LD_EXP 3
41943: PUSH
41944: LD_STRING Gladstone
41946: STR
41947: PPUSH
41948: CALL_OW 38
// if Houten then
41952: LD_EXP 25
41956: IFFALSE 41976
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
41958: LD_EXP 25
41962: PPUSH
41963: LD_EXP 3
41967: PUSH
41968: LD_STRING Houten
41970: STR
41971: PPUSH
41972: CALL_OW 38
// if Cornel then
41976: LD_EXP 27
41980: IFFALSE 42000
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
41982: LD_EXP 27
41986: PPUSH
41987: LD_EXP 3
41991: PUSH
41992: LD_STRING Cornel
41994: STR
41995: PPUSH
41996: CALL_OW 38
// if Gary then
42000: LD_EXP 28
42004: IFFALSE 42024
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
42006: LD_EXP 28
42010: PPUSH
42011: LD_EXP 3
42015: PUSH
42016: LD_STRING Gary
42018: STR
42019: PPUSH
42020: CALL_OW 38
// if Frank then
42024: LD_EXP 29
42028: IFFALSE 42048
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
42030: LD_EXP 29
42034: PPUSH
42035: LD_EXP 3
42039: PUSH
42040: LD_STRING Frank
42042: STR
42043: PPUSH
42044: CALL_OW 38
// if Kikuchi then
42048: LD_EXP 30
42052: IFFALSE 42072
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
42054: LD_EXP 30
42058: PPUSH
42059: LD_EXP 3
42063: PUSH
42064: LD_STRING Kikuchi
42066: STR
42067: PPUSH
42068: CALL_OW 38
// YouWin ;
42072: CALL_OW 103
// end ; end_of_file
42076: END
// export callback_error ; export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce ; export function InitMacro ; begin
42077: LD_INT 0
42079: PPUSH
// callback_error := false ;
42080: LD_ADDR_EXP 42
42084: PUSH
42085: LD_INT 0
42087: ST_TO_ADDR
// skirmish := false ;
42088: LD_ADDR_EXP 43
42092: PUSH
42093: LD_INT 0
42095: ST_TO_ADDR
// mc_bases := [ ] ;
42096: LD_ADDR_EXP 44
42100: PUSH
42101: EMPTY
42102: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
42103: LD_ADDR_EXP 45
42107: PUSH
42108: EMPTY
42109: ST_TO_ADDR
// mc_building_repairs := [ ] ;
42110: LD_ADDR_EXP 46
42114: PUSH
42115: EMPTY
42116: ST_TO_ADDR
// mc_need_heal := [ ] ;
42117: LD_ADDR_EXP 47
42121: PUSH
42122: EMPTY
42123: ST_TO_ADDR
// mc_healers := [ ] ;
42124: LD_ADDR_EXP 48
42128: PUSH
42129: EMPTY
42130: ST_TO_ADDR
// mc_build_list := [ ] ;
42131: LD_ADDR_EXP 49
42135: PUSH
42136: EMPTY
42137: ST_TO_ADDR
// mc_builders := [ ] ;
42138: LD_ADDR_EXP 50
42142: PUSH
42143: EMPTY
42144: ST_TO_ADDR
// mc_construct_list := [ ] ;
42145: LD_ADDR_EXP 51
42149: PUSH
42150: EMPTY
42151: ST_TO_ADDR
// mc_turret_list := [ ] ;
42152: LD_ADDR_EXP 52
42156: PUSH
42157: EMPTY
42158: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
42159: LD_ADDR_EXP 53
42163: PUSH
42164: EMPTY
42165: ST_TO_ADDR
// mc_miners := [ ] ;
42166: LD_ADDR_EXP 55
42170: PUSH
42171: EMPTY
42172: ST_TO_ADDR
// mc_mines := [ ] ;
42173: LD_ADDR_EXP 54
42177: PUSH
42178: EMPTY
42179: ST_TO_ADDR
// mc_minefields := [ ] ;
42180: LD_ADDR_EXP 56
42184: PUSH
42185: EMPTY
42186: ST_TO_ADDR
// mc_crates := [ ] ;
42187: LD_ADDR_EXP 57
42191: PUSH
42192: EMPTY
42193: ST_TO_ADDR
// mc_crates_collector := [ ] ;
42194: LD_ADDR_EXP 58
42198: PUSH
42199: EMPTY
42200: ST_TO_ADDR
// mc_vehicles := [ ] ;
42201: LD_ADDR_EXP 59
42205: PUSH
42206: EMPTY
42207: ST_TO_ADDR
// mc_attack := [ ] ;
42208: LD_ADDR_EXP 60
42212: PUSH
42213: EMPTY
42214: ST_TO_ADDR
// mc_produce := [ ] ;
42215: LD_ADDR_EXP 61
42219: PUSH
42220: EMPTY
42221: ST_TO_ADDR
// end ;
42222: LD_VAR 0 1
42226: RET
// export function RunMacro ; var i ; begin
42227: LD_INT 0
42229: PPUSH
42230: PPUSH
// for i = 1 to mc_bases do
42231: LD_ADDR_VAR 0 2
42235: PUSH
42236: DOUBLE
42237: LD_INT 1
42239: DEC
42240: ST_TO_ADDR
42241: LD_EXP 44
42245: PUSH
42246: FOR_TO
42247: IFFALSE 42667
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
42249: LD_ADDR_EXP 45
42253: PUSH
42254: LD_EXP 45
42258: PPUSH
42259: LD_VAR 0 2
42263: PPUSH
42264: EMPTY
42265: PPUSH
42266: CALL_OW 1
42270: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
42271: LD_ADDR_EXP 46
42275: PUSH
42276: LD_EXP 46
42280: PPUSH
42281: LD_VAR 0 2
42285: PPUSH
42286: EMPTY
42287: PPUSH
42288: CALL_OW 1
42292: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
42293: LD_ADDR_EXP 47
42297: PUSH
42298: LD_EXP 47
42302: PPUSH
42303: LD_VAR 0 2
42307: PPUSH
42308: EMPTY
42309: PPUSH
42310: CALL_OW 1
42314: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
42315: LD_ADDR_EXP 48
42319: PUSH
42320: LD_EXP 48
42324: PPUSH
42325: LD_VAR 0 2
42329: PPUSH
42330: EMPTY
42331: PUSH
42332: EMPTY
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PPUSH
42338: CALL_OW 1
42342: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
42343: LD_ADDR_EXP 49
42347: PUSH
42348: LD_EXP 49
42352: PPUSH
42353: LD_VAR 0 2
42357: PPUSH
42358: EMPTY
42359: PPUSH
42360: CALL_OW 1
42364: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
42365: LD_ADDR_EXP 51
42369: PUSH
42370: LD_EXP 51
42374: PPUSH
42375: LD_VAR 0 2
42379: PPUSH
42380: EMPTY
42381: PPUSH
42382: CALL_OW 1
42386: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
42387: LD_ADDR_EXP 52
42391: PUSH
42392: LD_EXP 52
42396: PPUSH
42397: LD_VAR 0 2
42401: PPUSH
42402: EMPTY
42403: PPUSH
42404: CALL_OW 1
42408: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
42409: LD_ADDR_EXP 53
42413: PUSH
42414: LD_EXP 53
42418: PPUSH
42419: LD_VAR 0 2
42423: PPUSH
42424: EMPTY
42425: PPUSH
42426: CALL_OW 1
42430: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
42431: LD_ADDR_EXP 53
42435: PUSH
42436: LD_EXP 53
42440: PPUSH
42441: LD_VAR 0 2
42445: PUSH
42446: LD_INT 1
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PPUSH
42453: EMPTY
42454: PPUSH
42455: CALL 2780 0 3
42459: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
42460: LD_ADDR_EXP 53
42464: PUSH
42465: LD_EXP 53
42469: PPUSH
42470: LD_VAR 0 2
42474: PUSH
42475: LD_INT 2
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PPUSH
42482: EMPTY
42483: PPUSH
42484: CALL 2780 0 3
42488: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
42489: LD_ADDR_EXP 55
42493: PUSH
42494: LD_EXP 55
42498: PPUSH
42499: LD_VAR 0 2
42503: PPUSH
42504: EMPTY
42505: PPUSH
42506: CALL_OW 1
42510: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
42511: LD_ADDR_EXP 54
42515: PUSH
42516: LD_EXP 54
42520: PPUSH
42521: LD_VAR 0 2
42525: PPUSH
42526: EMPTY
42527: PPUSH
42528: CALL_OW 1
42532: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
42533: LD_ADDR_EXP 56
42537: PUSH
42538: LD_EXP 56
42542: PPUSH
42543: LD_VAR 0 2
42547: PPUSH
42548: EMPTY
42549: PPUSH
42550: CALL_OW 1
42554: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
42555: LD_ADDR_EXP 57
42559: PUSH
42560: LD_EXP 57
42564: PPUSH
42565: LD_VAR 0 2
42569: PPUSH
42570: EMPTY
42571: PPUSH
42572: CALL_OW 1
42576: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
42577: LD_ADDR_EXP 58
42581: PUSH
42582: LD_EXP 58
42586: PPUSH
42587: LD_VAR 0 2
42591: PPUSH
42592: EMPTY
42593: PPUSH
42594: CALL_OW 1
42598: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
42599: LD_ADDR_EXP 59
42603: PUSH
42604: LD_EXP 59
42608: PPUSH
42609: LD_VAR 0 2
42613: PPUSH
42614: EMPTY
42615: PPUSH
42616: CALL_OW 1
42620: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
42621: LD_ADDR_EXP 60
42625: PUSH
42626: LD_EXP 60
42630: PPUSH
42631: LD_VAR 0 2
42635: PPUSH
42636: EMPTY
42637: PPUSH
42638: CALL_OW 1
42642: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
42643: LD_ADDR_EXP 61
42647: PUSH
42648: LD_EXP 61
42652: PPUSH
42653: LD_VAR 0 2
42657: PPUSH
42658: EMPTY
42659: PPUSH
42660: CALL_OW 1
42664: ST_TO_ADDR
// end ;
42665: GO 42246
42667: POP
42668: POP
// MC_SetMinesField ( 1 , 8 , minefield1_left ) ;
42669: LD_INT 1
42671: PPUSH
42672: LD_INT 8
42674: PPUSH
42675: LD_INT 3
42677: PPUSH
42678: CALL 49390 0 3
// MC_SetMinesField ( 2 , 6 , minefield2_left ) ;
42682: LD_INT 2
42684: PPUSH
42685: LD_INT 6
42687: PPUSH
42688: LD_INT 2
42690: PPUSH
42691: CALL 49390 0 3
// MC_SetMinesField ( 3 , 6 , minefield3_left ) ;
42695: LD_INT 3
42697: PPUSH
42698: LD_INT 6
42700: PPUSH
42701: LD_INT 1
42703: PPUSH
42704: CALL 49390 0 3
// skirmish := true ;
42708: LD_ADDR_EXP 43
42712: PUSH
42713: LD_INT 1
42715: ST_TO_ADDR
// end ;
42716: LD_VAR 0 1
42720: RET
// every 0 0$01 trigger skirmish do
42721: LD_EXP 43
42725: IFFALSE 42802
42727: GO 42729
42729: DISABLE
// begin enable ;
42730: ENABLE
// MC_CheckBuildings ( ) ;
42731: CALL 43043 0 0
// MC_CheckPeopleLife ( ) ;
42735: CALL 43261 0 0
// RaiseSailEvent ( 103 ) ;
42739: LD_INT 103
42741: PPUSH
42742: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
42746: LD_INT 104
42748: PPUSH
42749: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
42753: LD_INT 105
42755: PPUSH
42756: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
42760: LD_INT 106
42762: PPUSH
42763: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
42767: LD_INT 107
42769: PPUSH
42770: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
42774: LD_INT 108
42776: PPUSH
42777: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
42781: LD_INT 109
42783: PPUSH
42784: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
42788: LD_INT 110
42790: PPUSH
42791: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
42795: LD_INT 200
42797: PPUSH
42798: CALL_OW 427
// end ;
42802: END
// on SailEvent ( event ) do begin if event = 101 then
42803: LD_VAR 0 1
42807: PUSH
42808: LD_INT 101
42810: EQUAL
42811: IFFALSE 42817
// MC_RepairBuildings ( ) ;
42813: CALL 43807 0 0
// if event = 102 then
42817: LD_VAR 0 1
42821: PUSH
42822: LD_INT 102
42824: EQUAL
42825: IFFALSE 42831
// MC_Heal ( ) ;
42827: CALL 44201 0 0
// if event = 103 then
42831: LD_VAR 0 1
42835: PUSH
42836: LD_INT 103
42838: EQUAL
42839: IFFALSE 42845
// MC_Build ( ) ;
42841: CALL 44586 0 0
// if event = 104 then
42845: LD_VAR 0 1
42849: PUSH
42850: LD_INT 104
42852: EQUAL
42853: IFFALSE 42859
// MC_TurretWeapon ( ) ;
42855: CALL 45309 0 0
// if event = 105 then
42859: LD_VAR 0 1
42863: PUSH
42864: LD_INT 105
42866: EQUAL
42867: IFFALSE 42873
// MC_TurretCrew ( ) ;
42869: CALL 45628 0 0
// if event = 106 then
42873: LD_VAR 0 1
42877: PUSH
42878: LD_INT 106
42880: EQUAL
42881: IFFALSE 42887
// MC_PlantMines ( ) ;
42883: CALL 46331 0 0
// if event = 107 then
42887: LD_VAR 0 1
42891: PUSH
42892: LD_INT 107
42894: EQUAL
42895: IFFALSE 42901
// MC_CollectCrates ( ) ;
42897: CALL 47250 0 0
// if event = 108 then
42901: LD_VAR 0 1
42905: PUSH
42906: LD_INT 108
42908: EQUAL
42909: IFFALSE 42915
// MC_LinkRemoteControl ( ) ;
42911: CALL 48047 0 0
// if event = 109 then
42915: LD_VAR 0 1
42919: PUSH
42920: LD_INT 109
42922: EQUAL
42923: IFFALSE 42929
// MC_ProduceVehicle ( ) ;
42925: CALL 48216 0 0
// if event = 110 then
42929: LD_VAR 0 1
42933: PUSH
42934: LD_INT 110
42936: EQUAL
42937: IFFALSE 42943
// MC_SendAttack ( ) ;
42939: CALL 48604 0 0
// if event = 200 then
42943: LD_VAR 0 1
42947: PUSH
42948: LD_INT 200
42950: EQUAL
42951: IFFALSE 42957
// MC_Idle ( ) ;
42953: CALL 49189 0 0
// end ;
42957: PPOPN 1
42959: END
// export function MC_Reset ( base , tag ) ; var i ; begin
42960: LD_INT 0
42962: PPUSH
42963: PPUSH
// if not mc_bases [ base ] or not tag then
42964: LD_EXP 44
42968: PUSH
42969: LD_VAR 0 1
42973: ARRAY
42974: NOT
42975: PUSH
42976: LD_VAR 0 2
42980: NOT
42981: OR
42982: IFFALSE 42986
// exit ;
42984: GO 43038
// for i in mc_bases [ base ] do
42986: LD_ADDR_VAR 0 4
42990: PUSH
42991: LD_EXP 44
42995: PUSH
42996: LD_VAR 0 1
43000: ARRAY
43001: PUSH
43002: FOR_IN
43003: IFFALSE 43036
// if GetTag ( i ) = tag then
43005: LD_VAR 0 4
43009: PPUSH
43010: CALL_OW 110
43014: PUSH
43015: LD_VAR 0 2
43019: EQUAL
43020: IFFALSE 43034
// SetTag ( i , 0 ) ;
43022: LD_VAR 0 4
43026: PPUSH
43027: LD_INT 0
43029: PPUSH
43030: CALL_OW 109
43034: GO 43002
43036: POP
43037: POP
// end ;
43038: LD_VAR 0 3
43042: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
43043: LD_INT 0
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
// if not mc_bases then
43049: LD_EXP 44
43053: NOT
43054: IFFALSE 43058
// exit ;
43056: GO 43256
// for i = 1 to mc_bases do
43058: LD_ADDR_VAR 0 2
43062: PUSH
43063: DOUBLE
43064: LD_INT 1
43066: DEC
43067: ST_TO_ADDR
43068: LD_EXP 44
43072: PUSH
43073: FOR_TO
43074: IFFALSE 43241
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
43076: LD_ADDR_VAR 0 4
43080: PUSH
43081: LD_EXP 44
43085: PUSH
43086: LD_VAR 0 2
43090: ARRAY
43091: PPUSH
43092: LD_INT 21
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: LD_INT 24
43107: PUSH
43108: LD_INT 1000
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PPUSH
43123: CALL_OW 72
43127: ST_TO_ADDR
// if not tmp then
43128: LD_VAR 0 4
43132: NOT
43133: IFFALSE 43159
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
43135: LD_ADDR_EXP 45
43139: PUSH
43140: LD_EXP 45
43144: PPUSH
43145: LD_VAR 0 2
43149: PPUSH
43150: EMPTY
43151: PPUSH
43152: CALL_OW 1
43156: ST_TO_ADDR
// continue ;
43157: GO 43073
// end ; for j in tmp do
43159: LD_ADDR_VAR 0 3
43163: PUSH
43164: LD_VAR 0 4
43168: PUSH
43169: FOR_IN
43170: IFFALSE 43237
// if not j in mc_building_need_repair [ i ] then
43172: LD_VAR 0 3
43176: PUSH
43177: LD_EXP 45
43181: PUSH
43182: LD_VAR 0 2
43186: ARRAY
43187: IN
43188: NOT
43189: IFFALSE 43235
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
43191: LD_ADDR_EXP 45
43195: PUSH
43196: LD_EXP 45
43200: PPUSH
43201: LD_VAR 0 2
43205: PUSH
43206: LD_EXP 45
43210: PUSH
43211: LD_VAR 0 2
43215: ARRAY
43216: PUSH
43217: LD_INT 1
43219: PLUS
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PPUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: CALL 2780 0 3
43234: ST_TO_ADDR
43235: GO 43169
43237: POP
43238: POP
// end ;
43239: GO 43073
43241: POP
43242: POP
// if mc_building_need_repair then
43243: LD_EXP 45
43247: IFFALSE 43256
// RaiseSailEvent ( 101 ) ;
43249: LD_INT 101
43251: PPUSH
43252: CALL_OW 427
// end ;
43256: LD_VAR 0 1
43260: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
43261: LD_INT 0
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
// if not mc_bases then
43270: LD_EXP 44
43274: NOT
43275: IFFALSE 43279
// exit ;
43277: GO 43802
// for i = 1 to mc_bases do
43279: LD_ADDR_VAR 0 2
43283: PUSH
43284: DOUBLE
43285: LD_INT 1
43287: DEC
43288: ST_TO_ADDR
43289: LD_EXP 44
43293: PUSH
43294: FOR_TO
43295: IFFALSE 43793
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
43297: LD_ADDR_VAR 0 5
43301: PUSH
43302: LD_EXP 44
43306: PUSH
43307: LD_VAR 0 2
43311: ARRAY
43312: PPUSH
43313: LD_INT 21
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: LD_INT 3
43328: PUSH
43329: LD_INT 54
43331: PUSH
43332: EMPTY
43333: LIST
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: PUSH
43342: LD_INT 24
43344: PUSH
43345: LD_INT 700
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PPUSH
43365: CALL_OW 72
43369: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
43370: LD_ADDR_VAR 0 6
43374: PUSH
43375: LD_EXP 44
43379: PUSH
43380: LD_VAR 0 2
43384: ARRAY
43385: PPUSH
43386: LD_INT 21
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 1
43398: PUSH
43399: LD_INT 3
43401: PUSH
43402: LD_INT 54
43404: PUSH
43405: EMPTY
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 3
43414: PUSH
43415: LD_INT 24
43417: PUSH
43418: LD_INT 250
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PPUSH
43438: CALL_OW 72
43442: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
43443: LD_ADDR_VAR 0 7
43447: PUSH
43448: LD_VAR 0 5
43452: PUSH
43453: LD_VAR 0 6
43457: DIFF
43458: ST_TO_ADDR
// if not need_heal_1 then
43459: LD_VAR 0 6
43463: NOT
43464: IFFALSE 43497
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
43466: LD_ADDR_EXP 47
43470: PUSH
43471: LD_EXP 47
43475: PPUSH
43476: LD_VAR 0 2
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: EMPTY
43489: PPUSH
43490: CALL 2780 0 3
43494: ST_TO_ADDR
43495: GO 43529
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
43497: LD_ADDR_EXP 47
43501: PUSH
43502: LD_EXP 47
43506: PPUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PPUSH
43519: LD_VAR 0 6
43523: PPUSH
43524: CALL 2780 0 3
43528: ST_TO_ADDR
// if not need_heal_2 then
43529: LD_VAR 0 7
43533: NOT
43534: IFFALSE 43567
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
43536: LD_ADDR_EXP 47
43540: PUSH
43541: LD_EXP 47
43545: PPUSH
43546: LD_VAR 0 2
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PPUSH
43558: EMPTY
43559: PPUSH
43560: CALL 2780 0 3
43564: ST_TO_ADDR
43565: GO 43599
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
43567: LD_ADDR_EXP 47
43571: PUSH
43572: LD_EXP 47
43576: PPUSH
43577: LD_VAR 0 2
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PPUSH
43589: LD_VAR 0 7
43593: PPUSH
43594: CALL 2780 0 3
43598: ST_TO_ADDR
// if need_heal_2 then
43599: LD_VAR 0 7
43603: IFFALSE 43775
// for j in need_heal_2 do
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_VAR 0 7
43614: PUSH
43615: FOR_IN
43616: IFFALSE 43773
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
43618: LD_ADDR_VAR 0 5
43622: PUSH
43623: LD_EXP 44
43627: PUSH
43628: LD_VAR 0 2
43632: ARRAY
43633: PPUSH
43634: LD_INT 2
43636: PUSH
43637: LD_INT 30
43639: PUSH
43640: LD_INT 6
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 30
43649: PUSH
43650: LD_INT 7
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 30
43659: PUSH
43660: LD_INT 8
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 30
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 30
43679: PUSH
43680: LD_INT 1
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 25
43689: PUSH
43690: LD_INT 4
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: PPUSH
43706: CALL_OW 72
43710: ST_TO_ADDR
// if tmp then
43711: LD_VAR 0 5
43715: IFFALSE 43771
// begin k := NearestUnitToUnit ( tmp , j ) ;
43717: LD_ADDR_VAR 0 4
43721: PUSH
43722: LD_VAR 0 5
43726: PPUSH
43727: LD_VAR 0 3
43731: PPUSH
43732: CALL_OW 74
43736: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
43737: LD_VAR 0 3
43741: PPUSH
43742: LD_VAR 0 4
43746: PPUSH
43747: CALL_OW 296
43751: PUSH
43752: LD_INT 7
43754: GREATER
43755: IFFALSE 43771
// ComMoveUnit ( j , k ) ;
43757: LD_VAR 0 3
43761: PPUSH
43762: LD_VAR 0 4
43766: PPUSH
43767: CALL_OW 112
// end ; end ;
43771: GO 43615
43773: POP
43774: POP
// if not need_heal_1 and not need_heal_2 then
43775: LD_VAR 0 6
43779: NOT
43780: PUSH
43781: LD_VAR 0 7
43785: NOT
43786: AND
43787: IFFALSE 43791
// continue ;
43789: GO 43294
// end ;
43791: GO 43294
43793: POP
43794: POP
// RaiseSailEvent ( 102 ) ;
43795: LD_INT 102
43797: PPUSH
43798: CALL_OW 427
// end ;
43802: LD_VAR 0 1
43806: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
43807: LD_INT 0
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
// if not mc_bases then
43814: LD_EXP 44
43818: NOT
43819: IFFALSE 43823
// exit ;
43821: GO 44196
// for i = 1 to mc_bases do
43823: LD_ADDR_VAR 0 2
43827: PUSH
43828: DOUBLE
43829: LD_INT 1
43831: DEC
43832: ST_TO_ADDR
43833: LD_EXP 44
43837: PUSH
43838: FOR_TO
43839: IFFALSE 44194
// begin if not mc_building_need_repair [ i ] then
43841: LD_EXP 45
43845: PUSH
43846: LD_VAR 0 2
43850: ARRAY
43851: NOT
43852: IFFALSE 43890
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
43854: LD_ADDR_EXP 46
43858: PUSH
43859: LD_EXP 46
43863: PPUSH
43864: LD_VAR 0 2
43868: PPUSH
43869: EMPTY
43870: PPUSH
43871: CALL_OW 1
43875: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
43876: LD_VAR 0 2
43880: PPUSH
43881: LD_INT 101
43883: PPUSH
43884: CALL 42960 0 2
// continue ;
43888: GO 43838
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
43890: LD_ADDR_EXP 50
43894: PUSH
43895: LD_EXP 50
43899: PPUSH
43900: LD_VAR 0 2
43904: PPUSH
43905: EMPTY
43906: PPUSH
43907: CALL_OW 1
43911: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
43912: LD_VAR 0 2
43916: PPUSH
43917: LD_INT 103
43919: PPUSH
43920: CALL 42960 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
43924: LD_ADDR_VAR 0 5
43928: PUSH
43929: LD_EXP 44
43933: PUSH
43934: LD_VAR 0 2
43938: ARRAY
43939: PPUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 25
43945: PUSH
43946: LD_INT 2
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 25
43955: PUSH
43956: LD_INT 16
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: PPUSH
43971: CALL_OW 72
43975: ST_TO_ADDR
// if not tmp then
43976: LD_VAR 0 5
43980: NOT
43981: IFFALSE 43985
// continue ;
43983: GO 43838
// for j in tmp do
43985: LD_ADDR_VAR 0 3
43989: PUSH
43990: LD_VAR 0 5
43994: PUSH
43995: FOR_IN
43996: IFFALSE 44190
// begin if mc_need_heal [ i ] then
43998: LD_EXP 47
44002: PUSH
44003: LD_VAR 0 2
44007: ARRAY
44008: IFFALSE 44056
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
44010: LD_VAR 0 3
44014: PUSH
44015: LD_EXP 47
44019: PUSH
44020: LD_VAR 0 2
44024: ARRAY
44025: PUSH
44026: LD_INT 1
44028: ARRAY
44029: IN
44030: PUSH
44031: LD_VAR 0 3
44035: PUSH
44036: LD_EXP 47
44040: PUSH
44041: LD_VAR 0 2
44045: ARRAY
44046: PUSH
44047: LD_INT 2
44049: ARRAY
44050: IN
44051: OR
44052: IFFALSE 44056
// continue ;
44054: GO 43995
// if IsInUnit ( j ) then
44056: LD_VAR 0 3
44060: PPUSH
44061: CALL_OW 310
44065: IFFALSE 44076
// ComExitBuilding ( j ) ;
44067: LD_VAR 0 3
44071: PPUSH
44072: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
44076: LD_VAR 0 3
44080: PUSH
44081: LD_EXP 46
44085: PUSH
44086: LD_VAR 0 2
44090: ARRAY
44091: IN
44092: NOT
44093: IFFALSE 44151
// begin SetTag ( j , 101 ) ;
44095: LD_VAR 0 3
44099: PPUSH
44100: LD_INT 101
44102: PPUSH
44103: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
44107: LD_ADDR_EXP 46
44111: PUSH
44112: LD_EXP 46
44116: PPUSH
44117: LD_VAR 0 2
44121: PUSH
44122: LD_EXP 46
44126: PUSH
44127: LD_VAR 0 2
44131: ARRAY
44132: PUSH
44133: LD_INT 1
44135: PLUS
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PPUSH
44141: LD_VAR 0 3
44145: PPUSH
44146: CALL 2780 0 3
44150: ST_TO_ADDR
// end ; Wait ( 3 ) ;
44151: LD_INT 3
44153: PPUSH
44154: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
44158: LD_VAR 0 3
44162: PPUSH
44163: LD_EXP 45
44167: PUSH
44168: LD_VAR 0 2
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 3
44178: PPUSH
44179: CALL_OW 74
44183: PPUSH
44184: CALL_OW 130
// end ;
44188: GO 43995
44190: POP
44191: POP
// end ;
44192: GO 43838
44194: POP
44195: POP
// end ;
44196: LD_VAR 0 1
44200: RET
// export function MC_Heal ; var i , j , tmp ; begin
44201: LD_INT 0
44203: PPUSH
44204: PPUSH
44205: PPUSH
44206: PPUSH
// if not mc_bases then
44207: LD_EXP 44
44211: NOT
44212: IFFALSE 44216
// exit ;
44214: GO 44581
// for i = 1 to mc_bases do
44216: LD_ADDR_VAR 0 2
44220: PUSH
44221: DOUBLE
44222: LD_INT 1
44224: DEC
44225: ST_TO_ADDR
44226: LD_EXP 44
44230: PUSH
44231: FOR_TO
44232: IFFALSE 44579
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
44234: LD_EXP 47
44238: PUSH
44239: LD_VAR 0 2
44243: ARRAY
44244: PUSH
44245: LD_INT 1
44247: ARRAY
44248: NOT
44249: PUSH
44250: LD_EXP 47
44254: PUSH
44255: LD_VAR 0 2
44259: ARRAY
44260: PUSH
44261: LD_INT 2
44263: ARRAY
44264: NOT
44265: AND
44266: IFFALSE 44304
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
44268: LD_ADDR_EXP 48
44272: PUSH
44273: LD_EXP 48
44277: PPUSH
44278: LD_VAR 0 2
44282: PPUSH
44283: EMPTY
44284: PPUSH
44285: CALL_OW 1
44289: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
44290: LD_VAR 0 2
44294: PPUSH
44295: LD_INT 102
44297: PPUSH
44298: CALL 42960 0 2
// continue ;
44302: GO 44231
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
44304: LD_ADDR_VAR 0 4
44308: PUSH
44309: LD_EXP 44
44313: PUSH
44314: LD_VAR 0 2
44318: ARRAY
44319: PPUSH
44320: LD_INT 25
44322: PUSH
44323: LD_INT 4
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PPUSH
44330: CALL_OW 72
44334: ST_TO_ADDR
// if not tmp then
44335: LD_VAR 0 4
44339: NOT
44340: IFFALSE 44344
// continue ;
44342: GO 44231
// for j in tmp do
44344: LD_ADDR_VAR 0 3
44348: PUSH
44349: LD_VAR 0 4
44353: PUSH
44354: FOR_IN
44355: IFFALSE 44575
// begin if IsInUnit ( j ) then
44357: LD_VAR 0 3
44361: PPUSH
44362: CALL_OW 310
44366: IFFALSE 44377
// ComExitBuilding ( j ) ;
44368: LD_VAR 0 3
44372: PPUSH
44373: CALL_OW 122
// if not j in mc_healers [ i ] then
44377: LD_VAR 0 3
44381: PUSH
44382: LD_EXP 48
44386: PUSH
44387: LD_VAR 0 2
44391: ARRAY
44392: IN
44393: NOT
44394: IFFALSE 44440
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
44396: LD_ADDR_EXP 48
44400: PUSH
44401: LD_EXP 48
44405: PPUSH
44406: LD_VAR 0 2
44410: PUSH
44411: LD_EXP 48
44415: PUSH
44416: LD_VAR 0 2
44420: ARRAY
44421: PUSH
44422: LD_INT 1
44424: PLUS
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PPUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: CALL 2780 0 3
44439: ST_TO_ADDR
// if not GetTag ( j ) then
44440: LD_VAR 0 3
44444: PPUSH
44445: CALL_OW 110
44449: NOT
44450: IFFALSE 44464
// SetTag ( j , 102 ) ;
44452: LD_VAR 0 3
44456: PPUSH
44457: LD_INT 102
44459: PPUSH
44460: CALL_OW 109
// Wait ( 3 ) ;
44464: LD_INT 3
44466: PPUSH
44467: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
44471: LD_EXP 47
44475: PUSH
44476: LD_VAR 0 2
44480: ARRAY
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: IFFALSE 44517
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
44487: LD_VAR 0 3
44491: PPUSH
44492: LD_EXP 47
44496: PUSH
44497: LD_VAR 0 2
44501: ARRAY
44502: PUSH
44503: LD_INT 1
44505: ARRAY
44506: PUSH
44507: LD_INT 1
44509: ARRAY
44510: PPUSH
44511: CALL_OW 128
44515: GO 44573
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
44517: LD_VAR 0 3
44521: PPUSH
44522: CALL_OW 314
44526: NOT
44527: PUSH
44528: LD_EXP 47
44532: PUSH
44533: LD_VAR 0 2
44537: ARRAY
44538: PUSH
44539: LD_INT 2
44541: ARRAY
44542: AND
44543: IFFALSE 44573
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
44545: LD_VAR 0 3
44549: PPUSH
44550: LD_EXP 47
44554: PUSH
44555: LD_VAR 0 2
44559: ARRAY
44560: PUSH
44561: LD_INT 2
44563: ARRAY
44564: PUSH
44565: LD_INT 1
44567: ARRAY
44568: PPUSH
44569: CALL_OW 128
// end ;
44573: GO 44354
44575: POP
44576: POP
// end ;
44577: GO 44231
44579: POP
44580: POP
// end ;
44581: LD_VAR 0 1
44585: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
44586: LD_INT 0
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
// if not mc_bases then
44592: LD_EXP 44
44596: NOT
44597: IFFALSE 44601
// exit ;
44599: GO 45304
// for i = 1 to mc_bases do
44601: LD_ADDR_VAR 0 2
44605: PUSH
44606: DOUBLE
44607: LD_INT 1
44609: DEC
44610: ST_TO_ADDR
44611: LD_EXP 44
44615: PUSH
44616: FOR_TO
44617: IFFALSE 45302
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
44619: LD_EXP 49
44623: PUSH
44624: LD_VAR 0 2
44628: ARRAY
44629: NOT
44630: PUSH
44631: LD_EXP 51
44635: PUSH
44636: LD_VAR 0 2
44640: ARRAY
44641: NOT
44642: AND
44643: IFFALSE 44681
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
44645: LD_ADDR_EXP 50
44649: PUSH
44650: LD_EXP 50
44654: PPUSH
44655: LD_VAR 0 2
44659: PPUSH
44660: EMPTY
44661: PPUSH
44662: CALL_OW 1
44666: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
44667: LD_VAR 0 2
44671: PPUSH
44672: LD_INT 103
44674: PPUSH
44675: CALL 42960 0 2
// continue ;
44679: GO 44616
// end ; if mc_construct_list [ i ] then
44681: LD_EXP 51
44685: PUSH
44686: LD_VAR 0 2
44690: ARRAY
44691: IFFALSE 44896
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
44693: LD_ADDR_VAR 0 4
44697: PUSH
44698: LD_EXP 44
44702: PUSH
44703: LD_VAR 0 2
44707: ARRAY
44708: PPUSH
44709: LD_INT 25
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PPUSH
44719: CALL_OW 72
44723: PUSH
44724: LD_EXP 46
44728: PUSH
44729: LD_VAR 0 2
44733: ARRAY
44734: DIFF
44735: ST_TO_ADDR
// if not tmp then
44736: LD_VAR 0 4
44740: NOT
44741: IFFALSE 44745
// continue ;
44743: GO 44616
// for j in tmp do
44745: LD_ADDR_VAR 0 3
44749: PUSH
44750: LD_VAR 0 4
44754: PUSH
44755: FOR_IN
44756: IFFALSE 44892
// begin if not mc_builders [ i ] then
44758: LD_EXP 50
44762: PUSH
44763: LD_VAR 0 2
44767: ARRAY
44768: NOT
44769: IFFALSE 44827
// begin SetTag ( j , 103 ) ;
44771: LD_VAR 0 3
44775: PPUSH
44776: LD_INT 103
44778: PPUSH
44779: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
44783: LD_ADDR_EXP 50
44787: PUSH
44788: LD_EXP 50
44792: PPUSH
44793: LD_VAR 0 2
44797: PUSH
44798: LD_EXP 50
44802: PUSH
44803: LD_VAR 0 2
44807: ARRAY
44808: PUSH
44809: LD_INT 1
44811: PLUS
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PPUSH
44817: LD_VAR 0 3
44821: PPUSH
44822: CALL 2780 0 3
44826: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
44827: LD_VAR 0 3
44831: PPUSH
44832: CALL_OW 310
44836: IFFALSE 44847
// ComExitBuilding ( j ) ;
44838: LD_VAR 0 3
44842: PPUSH
44843: CALL_OW 122
// wait ( 3 ) ;
44847: LD_INT 3
44849: PPUSH
44850: CALL_OW 67
// if not HasTask ( j ) then
44854: LD_VAR 0 3
44858: PPUSH
44859: CALL_OW 314
44863: NOT
44864: IFFALSE 44890
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
44866: LD_VAR 0 3
44870: PPUSH
44871: LD_EXP 51
44875: PUSH
44876: LD_VAR 0 2
44880: ARRAY
44881: PUSH
44882: LD_INT 1
44884: ARRAY
44885: PPUSH
44886: CALL 5181 0 2
// end ;
44890: GO 44755
44892: POP
44893: POP
// end else
44894: GO 45300
// if mc_build_list [ i ] then
44896: LD_EXP 49
44900: PUSH
44901: LD_VAR 0 2
44905: ARRAY
44906: IFFALSE 45300
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
44908: LD_EXP 44
44912: PUSH
44913: LD_VAR 0 2
44917: ARRAY
44918: PPUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 30
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 30
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: PPUSH
44947: CALL_OW 72
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: PPUSH
44956: LD_EXP 49
44960: PUSH
44961: LD_VAR 0 2
44965: ARRAY
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PUSH
44971: LD_INT 1
44973: ARRAY
44974: PPUSH
44975: LD_EXP 49
44979: PUSH
44980: LD_VAR 0 2
44984: ARRAY
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: PUSH
44990: LD_INT 2
44992: ARRAY
44993: PPUSH
44994: LD_EXP 49
44998: PUSH
44999: LD_VAR 0 2
45003: ARRAY
45004: PUSH
45005: LD_INT 1
45007: ARRAY
45008: PUSH
45009: LD_INT 3
45011: ARRAY
45012: PPUSH
45013: LD_EXP 49
45017: PUSH
45018: LD_VAR 0 2
45022: ARRAY
45023: PUSH
45024: LD_INT 1
45026: ARRAY
45027: PUSH
45028: LD_INT 4
45030: ARRAY
45031: PPUSH
45032: CALL 8227 0 5
45036: IFFALSE 45300
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
45038: LD_ADDR_VAR 0 4
45042: PUSH
45043: LD_EXP 44
45047: PUSH
45048: LD_VAR 0 2
45052: ARRAY
45053: PPUSH
45054: LD_INT 25
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PPUSH
45064: CALL_OW 72
45068: PUSH
45069: LD_EXP 46
45073: PUSH
45074: LD_VAR 0 2
45078: ARRAY
45079: DIFF
45080: ST_TO_ADDR
// if not tmp then
45081: LD_VAR 0 4
45085: NOT
45086: IFFALSE 45090
// continue ;
45088: GO 44616
// for j in tmp do
45090: LD_ADDR_VAR 0 3
45094: PUSH
45095: LD_VAR 0 4
45099: PUSH
45100: FOR_IN
45101: IFFALSE 45298
// begin if not mc_builders [ i ] then
45103: LD_EXP 50
45107: PUSH
45108: LD_VAR 0 2
45112: ARRAY
45113: NOT
45114: IFFALSE 45172
// begin SetTag ( j , 103 ) ;
45116: LD_VAR 0 3
45120: PPUSH
45121: LD_INT 103
45123: PPUSH
45124: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
45128: LD_ADDR_EXP 50
45132: PUSH
45133: LD_EXP 50
45137: PPUSH
45138: LD_VAR 0 2
45142: PUSH
45143: LD_EXP 50
45147: PUSH
45148: LD_VAR 0 2
45152: ARRAY
45153: PUSH
45154: LD_INT 1
45156: PLUS
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PPUSH
45162: LD_VAR 0 3
45166: PPUSH
45167: CALL 2780 0 3
45171: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
45172: LD_VAR 0 3
45176: PPUSH
45177: CALL_OW 310
45181: IFFALSE 45192
// ComExitBuilding ( j ) ;
45183: LD_VAR 0 3
45187: PPUSH
45188: CALL_OW 122
// wait ( 3 ) ;
45192: LD_INT 3
45194: PPUSH
45195: CALL_OW 67
// if not HasTask ( j ) then
45199: LD_VAR 0 3
45203: PPUSH
45204: CALL_OW 314
45208: NOT
45209: IFFALSE 45296
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
45211: LD_VAR 0 3
45215: PPUSH
45216: LD_EXP 49
45220: PUSH
45221: LD_VAR 0 2
45225: ARRAY
45226: PUSH
45227: LD_INT 1
45229: ARRAY
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: PPUSH
45235: LD_EXP 49
45239: PUSH
45240: LD_VAR 0 2
45244: ARRAY
45245: PUSH
45246: LD_INT 1
45248: ARRAY
45249: PUSH
45250: LD_INT 2
45252: ARRAY
45253: PPUSH
45254: LD_EXP 49
45258: PUSH
45259: LD_VAR 0 2
45263: ARRAY
45264: PUSH
45265: LD_INT 1
45267: ARRAY
45268: PUSH
45269: LD_INT 3
45271: ARRAY
45272: PPUSH
45273: LD_EXP 49
45277: PUSH
45278: LD_VAR 0 2
45282: ARRAY
45283: PUSH
45284: LD_INT 1
45286: ARRAY
45287: PUSH
45288: LD_INT 4
45290: ARRAY
45291: PPUSH
45292: CALL_OW 145
// end ;
45296: GO 45100
45298: POP
45299: POP
// end ; end ;
45300: GO 44616
45302: POP
45303: POP
// end ;
45304: LD_VAR 0 1
45308: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
45309: LD_INT 0
45311: PPUSH
45312: PPUSH
45313: PPUSH
45314: PPUSH
45315: PPUSH
45316: PPUSH
45317: PPUSH
// if not mc_bases then
45318: LD_EXP 44
45322: NOT
45323: IFFALSE 45327
// exit ;
45325: GO 45623
// for i = 1 to mc_bases do
45327: LD_ADDR_VAR 0 2
45331: PUSH
45332: DOUBLE
45333: LD_INT 1
45335: DEC
45336: ST_TO_ADDR
45337: LD_EXP 44
45341: PUSH
45342: FOR_TO
45343: IFFALSE 45621
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
45345: LD_EXP 52
45349: PUSH
45350: LD_VAR 0 2
45354: ARRAY
45355: NOT
45356: PUSH
45357: LD_EXP 44
45361: PUSH
45362: LD_VAR 0 2
45366: ARRAY
45367: PPUSH
45368: LD_INT 30
45370: PUSH
45371: LD_INT 3
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PPUSH
45378: CALL_OW 72
45382: NOT
45383: OR
45384: IFFALSE 45388
// continue ;
45386: GO 45342
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
45388: LD_EXP 52
45392: PUSH
45393: LD_VAR 0 2
45397: ARRAY
45398: PUSH
45399: LD_INT 1
45401: ARRAY
45402: PPUSH
45403: CALL_OW 269
45407: IFFALSE 45473
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
45409: LD_ADDR_VAR 0 4
45413: PUSH
45414: LD_EXP 52
45418: PUSH
45419: LD_VAR 0 2
45423: ARRAY
45424: PPUSH
45425: LD_INT 1
45427: PPUSH
45428: CALL_OW 3
45432: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
45433: LD_ADDR_EXP 52
45437: PUSH
45438: LD_EXP 52
45442: PPUSH
45443: LD_VAR 0 2
45447: PPUSH
45448: LD_VAR 0 4
45452: PPUSH
45453: CALL_OW 1
45457: ST_TO_ADDR
// if not mc_turret_list [ i ] then
45458: LD_EXP 52
45462: PUSH
45463: LD_VAR 0 2
45467: ARRAY
45468: NOT
45469: IFFALSE 45473
// continue ;
45471: GO 45342
// end ; busy := false ;
45473: LD_ADDR_VAR 0 6
45477: PUSH
45478: LD_INT 0
45480: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
45481: LD_ADDR_VAR 0 4
45485: PUSH
45486: LD_EXP 44
45490: PUSH
45491: LD_VAR 0 2
45495: ARRAY
45496: PPUSH
45497: LD_INT 30
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PPUSH
45507: CALL_OW 72
45511: ST_TO_ADDR
// for j in tmp do
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: LD_VAR 0 4
45521: PUSH
45522: FOR_IN
45523: IFFALSE 45551
// if not BuildingStatus ( j ) = bs_idle then
45525: LD_VAR 0 3
45529: PPUSH
45530: CALL_OW 461
45534: PUSH
45535: LD_INT 2
45537: EQUAL
45538: NOT
45539: IFFALSE 45549
// busy := true ;
45541: LD_ADDR_VAR 0 6
45545: PUSH
45546: LD_INT 1
45548: ST_TO_ADDR
45549: GO 45522
45551: POP
45552: POP
// if busy then
45553: LD_VAR 0 6
45557: IFFALSE 45561
// continue ;
45559: GO 45342
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
45561: LD_ADDR_VAR 0 7
45565: PUSH
45566: LD_EXP 52
45570: PUSH
45571: LD_VAR 0 2
45575: ARRAY
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PPUSH
45581: CALL 6716 0 1
45585: ST_TO_ADDR
// if not weapon then
45586: LD_VAR 0 7
45590: NOT
45591: IFFALSE 45595
// continue ;
45593: GO 45342
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
45595: LD_EXP 52
45599: PUSH
45600: LD_VAR 0 2
45604: ARRAY
45605: PUSH
45606: LD_INT 1
45608: ARRAY
45609: PPUSH
45610: LD_VAR 0 7
45614: PPUSH
45615: CALL_OW 148
// end ;
45619: GO 45342
45621: POP
45622: POP
// end ;
45623: LD_VAR 0 1
45627: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , x ; begin
45628: LD_INT 0
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
45635: PPUSH
// if not mc_bases then
45636: LD_EXP 44
45640: NOT
45641: IFFALSE 45645
// exit ;
45643: GO 46326
// for i = 1 to mc_bases do
45645: LD_ADDR_VAR 0 2
45649: PUSH
45650: DOUBLE
45651: LD_INT 1
45653: DEC
45654: ST_TO_ADDR
45655: LD_EXP 44
45659: PUSH
45660: FOR_TO
45661: IFFALSE 46324
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
45663: LD_ADDR_VAR 0 6
45667: PUSH
45668: LD_EXP 44
45672: PUSH
45673: LD_VAR 0 2
45677: ARRAY
45678: PPUSH
45679: LD_INT 24
45681: PUSH
45682: LD_INT 375
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: LD_INT 30
45694: PUSH
45695: LD_INT 32
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 30
45704: PUSH
45705: LD_INT 31
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 58
45719: PUSH
45720: EMPTY
45721: LIST
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: LIST
45727: PPUSH
45728: CALL_OW 72
45732: ST_TO_ADDR
// if not x then
45733: LD_VAR 0 6
45737: NOT
45738: IFFALSE 45742
// continue ;
45740: GO 45660
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
45742: LD_ADDR_EXP 53
45746: PUSH
45747: LD_EXP 53
45751: PPUSH
45752: LD_VAR 0 2
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PPUSH
45764: LD_VAR 0 6
45768: PPUSH
45769: CALL 2780 0 3
45773: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
45774: LD_EXP 53
45778: PUSH
45779: LD_VAR 0 2
45783: ARRAY
45784: NOT
45785: PUSH
45786: LD_EXP 53
45790: PUSH
45791: LD_VAR 0 2
45795: ARRAY
45796: PUSH
45797: LD_INT 1
45799: ARRAY
45800: NOT
45801: OR
45802: PUSH
45803: LD_EXP 53
45807: PUSH
45808: LD_VAR 0 2
45812: ARRAY
45813: PUSH
45814: LD_INT 1
45816: ARRAY
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: NOT
45822: OR
45823: IFFALSE 45827
// continue ;
45825: GO 45660
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
45827: LD_EXP 53
45831: PUSH
45832: LD_VAR 0 2
45836: ARRAY
45837: PUSH
45838: LD_INT 1
45840: ARRAY
45841: PUSH
45842: LD_INT 1
45844: ARRAY
45845: PPUSH
45846: CALL_OW 313
45850: PUSH
45851: LD_INT 0
45853: EQUAL
45854: IFFALSE 46322
// if not mc_empty_turret_list [ i ] [ 2 ] then
45856: LD_EXP 53
45860: PUSH
45861: LD_VAR 0 2
45865: ARRAY
45866: PUSH
45867: LD_INT 2
45869: ARRAY
45870: NOT
45871: IFFALSE 46020
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
45873: LD_ADDR_VAR 0 5
45877: PUSH
45878: LD_EXP 44
45882: PUSH
45883: LD_VAR 0 2
45887: ARRAY
45888: PPUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 30
45894: PUSH
45895: LD_INT 4
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 30
45904: PUSH
45905: LD_INT 5
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: LIST
45916: PPUSH
45917: CALL_OW 72
45921: ST_TO_ADDR
// if not tmp then
45922: LD_VAR 0 5
45926: NOT
45927: IFFALSE 45931
// continue ;
45929: GO 45660
// for j in tmp do
45931: LD_ADDR_VAR 0 3
45935: PUSH
45936: LD_VAR 0 5
45940: PUSH
45941: FOR_IN
45942: IFFALSE 46016
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
45944: LD_ADDR_VAR 0 4
45948: PUSH
45949: LD_VAR 0 3
45953: PPUSH
45954: CALL_OW 313
45958: PPUSH
45959: LD_INT 25
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PPUSH
45969: CALL_OW 72
45973: ST_TO_ADDR
// if t then
45974: LD_VAR 0 4
45978: IFFALSE 46014
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t ) ;
45980: LD_ADDR_EXP 53
45984: PUSH
45985: LD_EXP 53
45989: PPUSH
45990: LD_VAR 0 2
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PPUSH
46002: LD_VAR 0 4
46006: PPUSH
46007: CALL 2780 0 3
46011: ST_TO_ADDR
// break ;
46012: GO 46016
// end ; end ;
46014: GO 45941
46016: POP
46017: POP
// end else
46018: GO 46322
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
46020: LD_EXP 53
46024: PUSH
46025: LD_VAR 0 2
46029: ARRAY
46030: PUSH
46031: LD_INT 2
46033: ARRAY
46034: PUSH
46035: LD_INT 1
46037: ARRAY
46038: PPUSH
46039: CALL_OW 301
46043: IFFALSE 46076
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46045: LD_ADDR_EXP 53
46049: PUSH
46050: LD_EXP 53
46054: PPUSH
46055: LD_VAR 0 2
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PPUSH
46067: EMPTY
46068: PPUSH
46069: CALL 2780 0 3
46073: ST_TO_ADDR
// break ;
46074: GO 46324
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
46076: LD_EXP 53
46080: PUSH
46081: LD_VAR 0 2
46085: ARRAY
46086: PUSH
46087: LD_INT 2
46089: ARRAY
46090: PUSH
46091: LD_INT 1
46093: ARRAY
46094: PPUSH
46095: CALL_OW 314
46099: NOT
46100: PUSH
46101: LD_EXP 53
46105: PUSH
46106: LD_VAR 0 2
46110: ARRAY
46111: PUSH
46112: LD_INT 2
46114: ARRAY
46115: PUSH
46116: LD_INT 1
46118: ARRAY
46119: PUSH
46120: LD_EXP 53
46124: PUSH
46125: LD_VAR 0 2
46129: ARRAY
46130: PUSH
46131: LD_INT 1
46133: ARRAY
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: CALL_OW 313
46143: IN
46144: NOT
46145: AND
46146: IFFALSE 46322
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
46148: LD_EXP 53
46152: PUSH
46153: LD_VAR 0 2
46157: ARRAY
46158: PUSH
46159: LD_INT 2
46161: ARRAY
46162: PUSH
46163: LD_INT 1
46165: ARRAY
46166: PPUSH
46167: CALL_OW 310
46171: IFFALSE 46196
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
46173: LD_EXP 53
46177: PUSH
46178: LD_VAR 0 2
46182: ARRAY
46183: PUSH
46184: LD_INT 2
46186: ARRAY
46187: PUSH
46188: LD_INT 1
46190: ARRAY
46191: PPUSH
46192: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
46196: LD_EXP 53
46200: PUSH
46201: LD_VAR 0 2
46205: ARRAY
46206: PUSH
46207: LD_INT 2
46209: ARRAY
46210: PUSH
46211: LD_INT 1
46213: ARRAY
46214: PPUSH
46215: LD_EXP 53
46219: PUSH
46220: LD_VAR 0 2
46224: ARRAY
46225: PUSH
46226: LD_INT 1
46228: ARRAY
46229: PUSH
46230: LD_INT 1
46232: ARRAY
46233: PPUSH
46234: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
46238: LD_INT 35
46240: PPUSH
46241: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
46245: LD_EXP 53
46249: PUSH
46250: LD_VAR 0 2
46254: ARRAY
46255: PUSH
46256: LD_INT 2
46258: ARRAY
46259: NOT
46260: IFFALSE 46264
// break ;
46262: GO 46289
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
46264: LD_EXP 53
46268: PUSH
46269: LD_VAR 0 2
46273: ARRAY
46274: PUSH
46275: LD_INT 2
46277: ARRAY
46278: PUSH
46279: LD_INT 1
46281: ARRAY
46282: PPUSH
46283: CALL_OW 310
46287: IFFALSE 46238
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46289: LD_ADDR_EXP 53
46293: PUSH
46294: LD_EXP 53
46298: PPUSH
46299: LD_VAR 0 2
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PPUSH
46311: EMPTY
46312: PPUSH
46313: CALL 2780 0 3
46317: ST_TO_ADDR
// exit ;
46318: POP
46319: POP
46320: GO 46326
// end ; end ; end ;
46322: GO 45660
46324: POP
46325: POP
// end ;
46326: LD_VAR 0 1
46330: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
46331: LD_INT 0
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
// if not mc_bases then
46339: LD_EXP 44
46343: NOT
46344: IFFALSE 46348
// exit ;
46346: GO 47245
// for i = 1 to mc_bases do
46348: LD_ADDR_VAR 0 2
46352: PUSH
46353: DOUBLE
46354: LD_INT 1
46356: DEC
46357: ST_TO_ADDR
46358: LD_EXP 44
46362: PUSH
46363: FOR_TO
46364: IFFALSE 47243
// begin if mc_minefields [ i ] and mc_miners [ i ] then
46366: LD_EXP 56
46370: PUSH
46371: LD_VAR 0 2
46375: ARRAY
46376: PUSH
46377: LD_EXP 55
46381: PUSH
46382: LD_VAR 0 2
46386: ARRAY
46387: AND
46388: IFFALSE 46464
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
46390: LD_EXP 56
46394: PUSH
46395: LD_VAR 0 2
46399: ARRAY
46400: PPUSH
46401: LD_INT 81
46403: PUSH
46404: LD_EXP 55
46408: PUSH
46409: LD_VAR 0 2
46413: ARRAY
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PPUSH
46419: CALL_OW 255
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: LD_INT 21
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 21
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PPUSH
46460: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
46464: LD_EXP 54
46468: PUSH
46469: LD_VAR 0 2
46473: ARRAY
46474: NOT
46475: PUSH
46476: LD_EXP 54
46480: PUSH
46481: LD_VAR 0 2
46485: ARRAY
46486: PUSH
46487: LD_EXP 55
46491: PUSH
46492: LD_VAR 0 2
46496: ARRAY
46497: EQUAL
46498: OR
46499: IFFALSE 46503
// continue ;
46501: GO 46363
// if mc_miners [ i ] then
46503: LD_EXP 55
46507: PUSH
46508: LD_VAR 0 2
46512: ARRAY
46513: IFFALSE 46941
// for j = 1 to mc_miners [ i ] do
46515: LD_ADDR_VAR 0 3
46519: PUSH
46520: DOUBLE
46521: LD_INT 1
46523: DEC
46524: ST_TO_ADDR
46525: LD_EXP 55
46529: PUSH
46530: LD_VAR 0 2
46534: ARRAY
46535: PUSH
46536: FOR_TO
46537: IFFALSE 46939
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
46539: LD_EXP 55
46543: PUSH
46544: LD_VAR 0 2
46548: ARRAY
46549: PUSH
46550: LD_VAR 0 3
46554: ARRAY
46555: PPUSH
46556: CALL_OW 301
46560: IFFALSE 46642
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
46562: LD_ADDR_VAR 0 5
46566: PUSH
46567: LD_EXP 55
46571: PUSH
46572: LD_VAR 0 2
46576: ARRAY
46577: PUSH
46578: LD_EXP 55
46582: PUSH
46583: LD_VAR 0 2
46587: ARRAY
46588: PUSH
46589: LD_VAR 0 3
46593: ARRAY
46594: DIFF
46595: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
46596: LD_ADDR_EXP 55
46600: PUSH
46601: LD_EXP 55
46605: PPUSH
46606: LD_VAR 0 2
46610: PUSH
46611: LD_EXP 55
46615: PUSH
46616: LD_VAR 0 2
46620: ARRAY
46621: PUSH
46622: LD_INT 1
46624: PLUS
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PPUSH
46630: LD_VAR 0 5
46634: PPUSH
46635: CALL_OW 1
46639: ST_TO_ADDR
// continue ;
46640: GO 46536
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
46642: LD_EXP 55
46646: PUSH
46647: LD_VAR 0 2
46651: ARRAY
46652: PUSH
46653: LD_VAR 0 3
46657: ARRAY
46658: PPUSH
46659: CALL_OW 459
46663: NOT
46664: PUSH
46665: LD_EXP 55
46669: PUSH
46670: LD_VAR 0 2
46674: ARRAY
46675: PUSH
46676: LD_VAR 0 3
46680: ARRAY
46681: PPUSH
46682: CALL_OW 255
46686: PPUSH
46687: LD_EXP 54
46691: PUSH
46692: LD_VAR 0 2
46696: ARRAY
46697: PUSH
46698: LD_VAR 0 3
46702: ARRAY
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: LD_EXP 54
46712: PUSH
46713: LD_VAR 0 2
46717: ARRAY
46718: PUSH
46719: LD_VAR 0 3
46723: ARRAY
46724: PUSH
46725: LD_INT 2
46727: ARRAY
46728: PPUSH
46729: LD_INT 12
46731: PPUSH
46732: CALL 3274 0 4
46736: PUSH
46737: LD_INT 4
46739: ARRAY
46740: PUSH
46741: LD_INT 0
46743: EQUAL
46744: AND
46745: IFFALSE 46937
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
46747: LD_EXP 55
46751: PUSH
46752: LD_VAR 0 2
46756: ARRAY
46757: PUSH
46758: LD_VAR 0 3
46762: ARRAY
46763: PPUSH
46764: CALL_OW 310
46768: IFFALSE 46791
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
46770: LD_EXP 55
46774: PUSH
46775: LD_VAR 0 2
46779: ARRAY
46780: PUSH
46781: LD_VAR 0 3
46785: ARRAY
46786: PPUSH
46787: CALL_OW 122
// wait ( 3 ) ;
46791: LD_INT 3
46793: PPUSH
46794: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
46798: LD_EXP 54
46802: PUSH
46803: LD_VAR 0 2
46807: ARRAY
46808: PUSH
46809: LD_VAR 0 3
46813: ARRAY
46814: PUSH
46815: LD_INT 1
46817: ARRAY
46818: PPUSH
46819: LD_EXP 54
46823: PUSH
46824: LD_VAR 0 2
46828: ARRAY
46829: PUSH
46830: LD_VAR 0 3
46834: ARRAY
46835: PUSH
46836: LD_INT 2
46838: ARRAY
46839: PPUSH
46840: CALL_OW 458
46844: NOT
46845: PUSH
46846: LD_EXP 55
46850: PUSH
46851: LD_VAR 0 2
46855: ARRAY
46856: PUSH
46857: LD_VAR 0 3
46861: ARRAY
46862: PPUSH
46863: CALL_OW 314
46867: NOT
46868: AND
46869: IFFALSE 46937
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
46871: LD_EXP 55
46875: PUSH
46876: LD_VAR 0 2
46880: ARRAY
46881: PUSH
46882: LD_VAR 0 3
46886: ARRAY
46887: PPUSH
46888: LD_EXP 54
46892: PUSH
46893: LD_VAR 0 2
46897: ARRAY
46898: PUSH
46899: LD_VAR 0 3
46903: ARRAY
46904: PUSH
46905: LD_INT 1
46907: ARRAY
46908: PPUSH
46909: LD_EXP 54
46913: PUSH
46914: LD_VAR 0 2
46918: ARRAY
46919: PUSH
46920: LD_VAR 0 3
46924: ARRAY
46925: PUSH
46926: LD_INT 2
46928: ARRAY
46929: PPUSH
46930: LD_INT 0
46932: PPUSH
46933: CALL_OW 133
// end ; end ;
46937: GO 46536
46939: POP
46940: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46941: LD_ADDR_VAR 0 5
46945: PUSH
46946: LD_EXP 44
46950: PUSH
46951: LD_VAR 0 2
46955: ARRAY
46956: PPUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 30
46962: PUSH
46963: LD_INT 4
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 30
46972: PUSH
46973: LD_INT 5
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: PPUSH
46985: CALL_OW 72
46989: ST_TO_ADDR
// if not tmp then
46990: LD_VAR 0 5
46994: NOT
46995: IFFALSE 46999
// continue ;
46997: GO 46363
// list := [ ] ;
46999: LD_ADDR_VAR 0 6
47003: PUSH
47004: EMPTY
47005: ST_TO_ADDR
// for j in tmp do
47006: LD_ADDR_VAR 0 3
47010: PUSH
47011: LD_VAR 0 5
47015: PUSH
47016: FOR_IN
47017: IFFALSE 47086
// begin for k in UnitsInside ( j ) do
47019: LD_ADDR_VAR 0 4
47023: PUSH
47024: LD_VAR 0 3
47028: PPUSH
47029: CALL_OW 313
47033: PUSH
47034: FOR_IN
47035: IFFALSE 47082
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
47037: LD_VAR 0 4
47041: PPUSH
47042: CALL_OW 257
47046: PUSH
47047: LD_INT 1
47049: EQUAL
47050: PUSH
47051: LD_VAR 0 4
47055: PPUSH
47056: CALL_OW 459
47060: NOT
47061: AND
47062: IFFALSE 47080
// list := list ^ k ;
47064: LD_ADDR_VAR 0 6
47068: PUSH
47069: LD_VAR 0 6
47073: PUSH
47074: LD_VAR 0 4
47078: ADD
47079: ST_TO_ADDR
47080: GO 47034
47082: POP
47083: POP
// end ;
47084: GO 47016
47086: POP
47087: POP
// list := list diff mc_miners [ i ] ;
47088: LD_ADDR_VAR 0 6
47092: PUSH
47093: LD_VAR 0 6
47097: PUSH
47098: LD_EXP 55
47102: PUSH
47103: LD_VAR 0 2
47107: ARRAY
47108: DIFF
47109: ST_TO_ADDR
// if not list then
47110: LD_VAR 0 6
47114: NOT
47115: IFFALSE 47119
// continue ;
47117: GO 46363
// k := mc_mines [ i ] - mc_miners [ i ] ;
47119: LD_ADDR_VAR 0 4
47123: PUSH
47124: LD_EXP 54
47128: PUSH
47129: LD_VAR 0 2
47133: ARRAY
47134: PUSH
47135: LD_EXP 55
47139: PUSH
47140: LD_VAR 0 2
47144: ARRAY
47145: MINUS
47146: ST_TO_ADDR
// if k > list then
47147: LD_VAR 0 4
47151: PUSH
47152: LD_VAR 0 6
47156: GREATER
47157: IFFALSE 47169
// k := list ;
47159: LD_ADDR_VAR 0 4
47163: PUSH
47164: LD_VAR 0 6
47168: ST_TO_ADDR
// for j = 1 to k do
47169: LD_ADDR_VAR 0 3
47173: PUSH
47174: DOUBLE
47175: LD_INT 1
47177: DEC
47178: ST_TO_ADDR
47179: LD_VAR 0 4
47183: PUSH
47184: FOR_TO
47185: IFFALSE 47239
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
47187: LD_ADDR_EXP 55
47191: PUSH
47192: LD_EXP 55
47196: PPUSH
47197: LD_VAR 0 2
47201: PUSH
47202: LD_EXP 55
47206: PUSH
47207: LD_VAR 0 2
47211: ARRAY
47212: PUSH
47213: LD_INT 1
47215: PLUS
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PPUSH
47221: LD_VAR 0 6
47225: PUSH
47226: LD_VAR 0 3
47230: ARRAY
47231: PPUSH
47232: CALL 2780 0 3
47236: ST_TO_ADDR
47237: GO 47184
47239: POP
47240: POP
// end ;
47241: GO 46363
47243: POP
47244: POP
// end ;
47245: LD_VAR 0 1
47249: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
47250: LD_INT 0
47252: PPUSH
47253: PPUSH
47254: PPUSH
47255: PPUSH
47256: PPUSH
// if not mc_bases then
47257: LD_EXP 44
47261: NOT
47262: IFFALSE 47266
// exit ;
47264: GO 48042
// for i = 1 to mc_bases do
47266: LD_ADDR_VAR 0 2
47270: PUSH
47271: DOUBLE
47272: LD_INT 1
47274: DEC
47275: ST_TO_ADDR
47276: LD_EXP 44
47280: PUSH
47281: FOR_TO
47282: IFFALSE 48040
// begin if not mc_bases [ i ] then
47284: LD_EXP 44
47288: PUSH
47289: LD_VAR 0 2
47293: ARRAY
47294: NOT
47295: IFFALSE 47299
// continue ;
47297: GO 47281
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
47299: LD_EXP 57
47303: PUSH
47304: LD_VAR 0 2
47308: ARRAY
47309: NOT
47310: PUSH
47311: LD_EXP 58
47315: PUSH
47316: LD_VAR 0 2
47320: ARRAY
47321: AND
47322: IFFALSE 47360
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
47324: LD_ADDR_EXP 58
47328: PUSH
47329: LD_EXP 58
47333: PPUSH
47334: LD_VAR 0 2
47338: PPUSH
47339: EMPTY
47340: PPUSH
47341: CALL_OW 1
47345: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
47346: LD_VAR 0 2
47350: PPUSH
47351: LD_INT 107
47353: PPUSH
47354: CALL 42960 0 2
// continue ;
47358: GO 47281
// end ; target := [ ] ;
47360: LD_ADDR_VAR 0 5
47364: PUSH
47365: EMPTY
47366: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
47367: LD_ADDR_VAR 0 3
47371: PUSH
47372: DOUBLE
47373: LD_EXP 57
47377: PUSH
47378: LD_VAR 0 2
47382: ARRAY
47383: INC
47384: ST_TO_ADDR
47385: LD_INT 1
47387: PUSH
47388: FOR_DOWNTO
47389: IFFALSE 47649
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
47391: LD_EXP 57
47395: PUSH
47396: LD_VAR 0 2
47400: ARRAY
47401: PUSH
47402: LD_VAR 0 3
47406: ARRAY
47407: PUSH
47408: LD_INT 2
47410: ARRAY
47411: PPUSH
47412: LD_EXP 57
47416: PUSH
47417: LD_VAR 0 2
47421: ARRAY
47422: PUSH
47423: LD_VAR 0 3
47427: ARRAY
47428: PUSH
47429: LD_INT 3
47431: ARRAY
47432: PPUSH
47433: CALL_OW 488
47437: PUSH
47438: LD_EXP 57
47442: PUSH
47443: LD_VAR 0 2
47447: ARRAY
47448: PUSH
47449: LD_VAR 0 3
47453: ARRAY
47454: PUSH
47455: LD_INT 2
47457: ARRAY
47458: PPUSH
47459: LD_EXP 57
47463: PUSH
47464: LD_VAR 0 2
47468: ARRAY
47469: PUSH
47470: LD_VAR 0 3
47474: ARRAY
47475: PUSH
47476: LD_INT 3
47478: ARRAY
47479: PPUSH
47480: CALL_OW 284
47484: PUSH
47485: LD_INT 0
47487: EQUAL
47488: AND
47489: IFFALSE 47544
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
47491: LD_ADDR_VAR 0 4
47495: PUSH
47496: LD_EXP 57
47500: PUSH
47501: LD_VAR 0 2
47505: ARRAY
47506: PPUSH
47507: LD_VAR 0 3
47511: PPUSH
47512: CALL_OW 3
47516: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
47517: LD_ADDR_EXP 57
47521: PUSH
47522: LD_EXP 57
47526: PPUSH
47527: LD_VAR 0 2
47531: PPUSH
47532: LD_VAR 0 4
47536: PPUSH
47537: CALL_OW 1
47541: ST_TO_ADDR
// continue ;
47542: GO 47388
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
47544: LD_EXP 44
47548: PUSH
47549: LD_VAR 0 2
47553: ARRAY
47554: PUSH
47555: LD_INT 1
47557: ARRAY
47558: PPUSH
47559: CALL_OW 255
47563: PPUSH
47564: LD_EXP 57
47568: PUSH
47569: LD_VAR 0 2
47573: ARRAY
47574: PUSH
47575: LD_VAR 0 3
47579: ARRAY
47580: PUSH
47581: LD_INT 2
47583: ARRAY
47584: PPUSH
47585: LD_EXP 57
47589: PUSH
47590: LD_VAR 0 2
47594: ARRAY
47595: PUSH
47596: LD_VAR 0 3
47600: ARRAY
47601: PUSH
47602: LD_INT 3
47604: ARRAY
47605: PPUSH
47606: LD_INT 20
47608: PPUSH
47609: CALL 3274 0 4
47613: PUSH
47614: LD_INT 4
47616: ARRAY
47617: PUSH
47618: LD_INT 0
47620: EQUAL
47621: IFFALSE 47647
// begin target := mc_crates [ i ] [ j ] ;
47623: LD_ADDR_VAR 0 5
47627: PUSH
47628: LD_EXP 57
47632: PUSH
47633: LD_VAR 0 2
47637: ARRAY
47638: PUSH
47639: LD_VAR 0 3
47643: ARRAY
47644: ST_TO_ADDR
// break ;
47645: GO 47649
// end ; end ;
47647: GO 47388
47649: POP
47650: POP
// if not target then
47651: LD_VAR 0 5
47655: NOT
47656: IFFALSE 47660
// continue ;
47658: GO 47281
// if mc_crates_collector [ i ] < 5 then
47660: LD_EXP 58
47664: PUSH
47665: LD_VAR 0 2
47669: ARRAY
47670: PUSH
47671: LD_INT 5
47673: LESS
47674: IFFALSE 47854
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
47676: LD_ADDR_VAR 0 4
47680: PUSH
47681: LD_EXP 44
47685: PUSH
47686: LD_VAR 0 2
47690: ARRAY
47691: PPUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 25
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 25
47707: PUSH
47708: LD_INT 16
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 24
47722: PUSH
47723: LD_INT 750
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PPUSH
47734: CALL_OW 72
47738: ST_TO_ADDR
// if not tmp then
47739: LD_VAR 0 4
47743: NOT
47744: IFFALSE 47748
// continue ;
47746: GO 47281
// for j in tmp do
47748: LD_ADDR_VAR 0 3
47752: PUSH
47753: LD_VAR 0 4
47757: PUSH
47758: FOR_IN
47759: IFFALSE 47852
// if GetTag ( j ) = 0 then
47761: LD_VAR 0 3
47765: PPUSH
47766: CALL_OW 110
47770: PUSH
47771: LD_INT 0
47773: EQUAL
47774: IFFALSE 47850
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
47776: LD_ADDR_EXP 58
47780: PUSH
47781: LD_EXP 58
47785: PPUSH
47786: LD_VAR 0 2
47790: PUSH
47791: LD_EXP 58
47795: PUSH
47796: LD_VAR 0 2
47800: ARRAY
47801: PUSH
47802: LD_INT 1
47804: PLUS
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PPUSH
47810: LD_VAR 0 3
47814: PPUSH
47815: CALL 2780 0 3
47819: ST_TO_ADDR
// SetTag ( j , 107 ) ;
47820: LD_VAR 0 3
47824: PPUSH
47825: LD_INT 107
47827: PPUSH
47828: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
47832: LD_EXP 58
47836: PUSH
47837: LD_VAR 0 2
47841: ARRAY
47842: PUSH
47843: LD_INT 5
47845: GREATER
47846: IFFALSE 47850
// break ;
47848: GO 47852
// end ;
47850: GO 47758
47852: POP
47853: POP
// end ; if mc_crates_collector [ i ] and target then
47854: LD_EXP 58
47858: PUSH
47859: LD_VAR 0 2
47863: ARRAY
47864: PUSH
47865: LD_VAR 0 5
47869: AND
47870: IFFALSE 48038
// begin if mc_crates_collector [ i ] < target [ 1 ] then
47872: LD_EXP 58
47876: PUSH
47877: LD_VAR 0 2
47881: ARRAY
47882: PUSH
47883: LD_VAR 0 5
47887: PUSH
47888: LD_INT 1
47890: ARRAY
47891: LESS
47892: IFFALSE 47912
// tmp := mc_crates_collector [ i ] else
47894: LD_ADDR_VAR 0 4
47898: PUSH
47899: LD_EXP 58
47903: PUSH
47904: LD_VAR 0 2
47908: ARRAY
47909: ST_TO_ADDR
47910: GO 47926
// tmp := target [ 1 ] ;
47912: LD_ADDR_VAR 0 4
47916: PUSH
47917: LD_VAR 0 5
47921: PUSH
47922: LD_INT 1
47924: ARRAY
47925: ST_TO_ADDR
// for j = 1 to tmp do
47926: LD_ADDR_VAR 0 3
47930: PUSH
47931: DOUBLE
47932: LD_INT 1
47934: DEC
47935: ST_TO_ADDR
47936: LD_VAR 0 4
47940: PUSH
47941: FOR_TO
47942: IFFALSE 48036
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
47944: LD_EXP 58
47948: PUSH
47949: LD_VAR 0 2
47953: ARRAY
47954: PUSH
47955: LD_VAR 0 3
47959: ARRAY
47960: PPUSH
47961: CALL_OW 310
47965: IFFALSE 47988
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
47967: LD_EXP 58
47971: PUSH
47972: LD_VAR 0 2
47976: ARRAY
47977: PUSH
47978: LD_VAR 0 3
47982: ARRAY
47983: PPUSH
47984: CALL_OW 122
// wait ( 3 ) ;
47988: LD_INT 3
47990: PPUSH
47991: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
47995: LD_EXP 58
47999: PUSH
48000: LD_VAR 0 2
48004: ARRAY
48005: PUSH
48006: LD_VAR 0 3
48010: ARRAY
48011: PPUSH
48012: LD_VAR 0 5
48016: PUSH
48017: LD_INT 2
48019: ARRAY
48020: PPUSH
48021: LD_VAR 0 5
48025: PUSH
48026: LD_INT 3
48028: ARRAY
48029: PPUSH
48030: CALL_OW 117
// end ;
48034: GO 47941
48036: POP
48037: POP
// end ; end ;
48038: GO 47281
48040: POP
48041: POP
// end ;
48042: LD_VAR 0 1
48046: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
48047: LD_INT 0
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
// if not mc_bases then
48053: LD_EXP 44
48057: NOT
48058: IFFALSE 48062
// exit ;
48060: GO 48211
// for i = 1 to mc_bases do
48062: LD_ADDR_VAR 0 2
48066: PUSH
48067: DOUBLE
48068: LD_INT 1
48070: DEC
48071: ST_TO_ADDR
48072: LD_EXP 44
48076: PUSH
48077: FOR_TO
48078: IFFALSE 48209
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
48080: LD_ADDR_VAR 0 4
48084: PUSH
48085: LD_EXP 59
48089: PUSH
48090: LD_VAR 0 2
48094: ARRAY
48095: PPUSH
48096: LD_INT 33
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PPUSH
48106: CALL_OW 72
48110: ST_TO_ADDR
// if tmp then
48111: LD_VAR 0 4
48115: IFFALSE 48207
// for j in tmp do
48117: LD_ADDR_VAR 0 3
48121: PUSH
48122: LD_VAR 0 4
48126: PUSH
48127: FOR_IN
48128: IFFALSE 48205
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
48130: LD_VAR 0 3
48134: PPUSH
48135: CALL_OW 312
48139: NOT
48140: PUSH
48141: LD_VAR 0 3
48145: PPUSH
48146: CALL_OW 256
48150: PUSH
48151: LD_INT 250
48153: GREATEREQUAL
48154: AND
48155: IFFALSE 48168
// Connect ( j ) else
48157: LD_VAR 0 3
48161: PPUSH
48162: CALL 5263 0 1
48166: GO 48203
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
48168: LD_VAR 0 3
48172: PPUSH
48173: CALL_OW 256
48177: PUSH
48178: LD_INT 250
48180: LESS
48181: PUSH
48182: LD_VAR 0 3
48186: PPUSH
48187: CALL_OW 312
48191: AND
48192: IFFALSE 48203
// ComUnlink ( j ) ;
48194: LD_VAR 0 3
48198: PPUSH
48199: CALL_OW 136
48203: GO 48127
48205: POP
48206: POP
// end ;
48207: GO 48077
48209: POP
48210: POP
// end ;
48211: LD_VAR 0 1
48215: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
48216: LD_INT 0
48218: PPUSH
48219: PPUSH
48220: PPUSH
48221: PPUSH
48222: PPUSH
// if not mc_bases then
48223: LD_EXP 44
48227: NOT
48228: IFFALSE 48232
// exit ;
48230: GO 48599
// for i = 1 to mc_bases do
48232: LD_ADDR_VAR 0 2
48236: PUSH
48237: DOUBLE
48238: LD_INT 1
48240: DEC
48241: ST_TO_ADDR
48242: LD_EXP 44
48246: PUSH
48247: FOR_TO
48248: IFFALSE 48597
// begin if not mc_produce [ i ] then
48250: LD_EXP 61
48254: PUSH
48255: LD_VAR 0 2
48259: ARRAY
48260: NOT
48261: IFFALSE 48265
// continue ;
48263: GO 48247
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48265: LD_ADDR_VAR 0 5
48269: PUSH
48270: LD_EXP 44
48274: PUSH
48275: LD_VAR 0 2
48279: ARRAY
48280: PPUSH
48281: LD_INT 30
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PPUSH
48291: CALL_OW 72
48295: ST_TO_ADDR
// if not fac then
48296: LD_VAR 0 5
48300: NOT
48301: IFFALSE 48305
// continue ;
48303: GO 48247
// for j in fac do
48305: LD_ADDR_VAR 0 3
48309: PUSH
48310: LD_VAR 0 5
48314: PUSH
48315: FOR_IN
48316: IFFALSE 48593
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
48318: LD_VAR 0 3
48322: PPUSH
48323: CALL_OW 461
48327: PUSH
48328: LD_INT 2
48330: NONEQUAL
48331: PUSH
48332: LD_VAR 0 3
48336: PPUSH
48337: LD_INT 20
48339: PPUSH
48340: CALL 4954 0 2
48344: PUSH
48345: LD_INT 4
48347: ARRAY
48348: OR
48349: PUSH
48350: LD_VAR 0 3
48354: PPUSH
48355: CALL_OW 313
48359: PUSH
48360: LD_INT 0
48362: EQUAL
48363: OR
48364: IFFALSE 48368
// continue ;
48366: GO 48315
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
48368: LD_VAR 0 3
48372: PPUSH
48373: LD_EXP 61
48377: PUSH
48378: LD_VAR 0 2
48382: ARRAY
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: PUSH
48388: LD_INT 1
48390: ARRAY
48391: PPUSH
48392: LD_EXP 61
48396: PUSH
48397: LD_VAR 0 2
48401: ARRAY
48402: PUSH
48403: LD_INT 1
48405: ARRAY
48406: PUSH
48407: LD_INT 2
48409: ARRAY
48410: PPUSH
48411: LD_EXP 61
48415: PUSH
48416: LD_VAR 0 2
48420: ARRAY
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PUSH
48426: LD_INT 3
48428: ARRAY
48429: PPUSH
48430: LD_EXP 61
48434: PUSH
48435: LD_VAR 0 2
48439: ARRAY
48440: PUSH
48441: LD_INT 1
48443: ARRAY
48444: PUSH
48445: LD_INT 4
48447: ARRAY
48448: PPUSH
48449: CALL_OW 448
48453: IFFALSE 48591
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
48455: LD_VAR 0 3
48459: PPUSH
48460: LD_EXP 61
48464: PUSH
48465: LD_VAR 0 2
48469: ARRAY
48470: PUSH
48471: LD_INT 1
48473: ARRAY
48474: PUSH
48475: LD_INT 1
48477: ARRAY
48478: PPUSH
48479: LD_EXP 61
48483: PUSH
48484: LD_VAR 0 2
48488: ARRAY
48489: PUSH
48490: LD_INT 1
48492: ARRAY
48493: PUSH
48494: LD_INT 2
48496: ARRAY
48497: PPUSH
48498: LD_EXP 61
48502: PUSH
48503: LD_VAR 0 2
48507: ARRAY
48508: PUSH
48509: LD_INT 1
48511: ARRAY
48512: PUSH
48513: LD_INT 3
48515: ARRAY
48516: PPUSH
48517: LD_EXP 61
48521: PUSH
48522: LD_VAR 0 2
48526: ARRAY
48527: PUSH
48528: LD_INT 1
48530: ARRAY
48531: PUSH
48532: LD_INT 4
48534: ARRAY
48535: PPUSH
48536: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
48540: LD_ADDR_VAR 0 4
48544: PUSH
48545: LD_EXP 61
48549: PUSH
48550: LD_VAR 0 2
48554: ARRAY
48555: PPUSH
48556: LD_INT 1
48558: PPUSH
48559: CALL_OW 3
48563: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
48564: LD_ADDR_EXP 61
48568: PUSH
48569: LD_EXP 61
48573: PPUSH
48574: LD_VAR 0 2
48578: PPUSH
48579: LD_VAR 0 4
48583: PPUSH
48584: CALL_OW 1
48588: ST_TO_ADDR
// break ;
48589: GO 48593
// end ; end ;
48591: GO 48315
48593: POP
48594: POP
// end ;
48595: GO 48247
48597: POP
48598: POP
// end ;
48599: LD_VAR 0 1
48603: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
48604: LD_INT 0
48606: PPUSH
48607: PPUSH
48608: PPUSH
// if not mc_bases then
48609: LD_EXP 44
48613: NOT
48614: IFFALSE 48618
// exit ;
48616: GO 48707
// for i = 1 to mc_bases do
48618: LD_ADDR_VAR 0 2
48622: PUSH
48623: DOUBLE
48624: LD_INT 1
48626: DEC
48627: ST_TO_ADDR
48628: LD_EXP 44
48632: PUSH
48633: FOR_TO
48634: IFFALSE 48705
// begin if mc_attack [ i ] then
48636: LD_EXP 60
48640: PUSH
48641: LD_VAR 0 2
48645: ARRAY
48646: IFFALSE 48703
// begin tmp := mc_attack [ i ] [ 1 ] ;
48648: LD_ADDR_VAR 0 3
48652: PUSH
48653: LD_EXP 60
48657: PUSH
48658: LD_VAR 0 2
48662: ARRAY
48663: PUSH
48664: LD_INT 1
48666: ARRAY
48667: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
48668: LD_ADDR_EXP 60
48672: PUSH
48673: LD_EXP 60
48677: PPUSH
48678: LD_VAR 0 2
48682: PPUSH
48683: EMPTY
48684: PPUSH
48685: CALL_OW 1
48689: ST_TO_ADDR
// Attack ( tmp ) ;
48690: LD_VAR 0 3
48694: PPUSH
48695: CALL 28376 0 1
// exit ;
48699: POP
48700: POP
48701: GO 48707
// end ; end ;
48703: GO 48633
48705: POP
48706: POP
// end ;
48707: LD_VAR 0 1
48711: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
48712: LD_INT 0
48714: PPUSH
48715: PPUSH
48716: PPUSH
48717: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
48718: LD_VAR 0 1
48722: NOT
48723: PUSH
48724: LD_VAR 0 2
48728: NOT
48729: OR
48730: PUSH
48731: LD_VAR 0 3
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 3
48744: PUSH
48745: LD_INT 4
48747: PUSH
48748: LD_INT 5
48750: PUSH
48751: LD_INT 8
48753: PUSH
48754: LD_INT 9
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: IN
48766: NOT
48767: OR
48768: IFFALSE 48772
// exit ;
48770: GO 49184
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
48772: LD_ADDR_VAR 0 1
48776: PUSH
48777: LD_VAR 0 1
48781: PPUSH
48782: LD_INT 21
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 24
48794: PUSH
48795: LD_INT 250
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PPUSH
48806: CALL_OW 72
48810: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
48811: LD_VAR 0 3
48815: PUSH
48816: LD_INT 5
48818: PUSH
48819: LD_INT 8
48821: PUSH
48822: LD_INT 9
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: IN
48830: IFFALSE 48840
// class := 1 ;
48832: LD_ADDR_VAR 0 3
48836: PUSH
48837: LD_INT 1
48839: ST_TO_ADDR
// case class of 1 :
48840: LD_VAR 0 3
48844: PUSH
48845: LD_INT 1
48847: DOUBLE
48848: EQUAL
48849: IFTRUE 48853
48851: GO 48899
48853: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
48854: LD_ADDR_VAR 0 7
48858: PUSH
48859: LD_VAR 0 1
48863: PPUSH
48864: LD_INT 2
48866: PUSH
48867: LD_INT 30
48869: PUSH
48870: LD_INT 4
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 30
48879: PUSH
48880: LD_INT 5
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: PPUSH
48892: CALL_OW 72
48896: ST_TO_ADDR
48897: GO 49073
48899: LD_INT 2
48901: DOUBLE
48902: EQUAL
48903: IFTRUE 48907
48905: GO 48953
48907: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
48908: LD_ADDR_VAR 0 7
48912: PUSH
48913: LD_VAR 0 1
48917: PPUSH
48918: LD_INT 2
48920: PUSH
48921: LD_INT 30
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 30
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: PPUSH
48946: CALL_OW 72
48950: ST_TO_ADDR
48951: GO 49073
48953: LD_INT 3
48955: DOUBLE
48956: EQUAL
48957: IFTRUE 48961
48959: GO 49007
48961: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
48962: LD_ADDR_VAR 0 7
48966: PUSH
48967: LD_VAR 0 1
48971: PPUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 30
48977: PUSH
48978: LD_INT 2
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 30
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: LIST
48999: PPUSH
49000: CALL_OW 72
49004: ST_TO_ADDR
49005: GO 49073
49007: LD_INT 4
49009: DOUBLE
49010: EQUAL
49011: IFTRUE 49015
49013: GO 49072
49015: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
49016: LD_ADDR_VAR 0 7
49020: PUSH
49021: LD_VAR 0 1
49025: PPUSH
49026: LD_INT 2
49028: PUSH
49029: LD_INT 30
49031: PUSH
49032: LD_INT 6
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 30
49041: PUSH
49042: LD_INT 7
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 30
49051: PUSH
49052: LD_INT 8
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: PPUSH
49065: CALL_OW 72
49069: ST_TO_ADDR
49070: GO 49073
49072: POP
// if not tmp then
49073: LD_VAR 0 7
49077: NOT
49078: IFFALSE 49082
// exit ;
49080: GO 49184
// for i in tmp do
49082: LD_ADDR_VAR 0 5
49086: PUSH
49087: LD_VAR 0 7
49091: PUSH
49092: FOR_IN
49093: IFFALSE 49162
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
49095: LD_VAR 0 5
49099: PPUSH
49100: CALL_OW 313
49104: PUSH
49105: LD_INT 6
49107: LESS
49108: PUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 266
49118: PUSH
49119: LD_INT 31
49121: PUSH
49122: LD_INT 32
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: IN
49129: NOT
49130: AND
49131: PUSH
49132: LD_VAR 0 5
49136: PPUSH
49137: CALL_OW 313
49141: PUSH
49142: LD_INT 0
49144: EQUAL
49145: OR
49146: IFFALSE 49160
// begin j := i ;
49148: LD_ADDR_VAR 0 6
49152: PUSH
49153: LD_VAR 0 5
49157: ST_TO_ADDR
// break ;
49158: GO 49162
// end ; end ;
49160: GO 49092
49162: POP
49163: POP
// if j then
49164: LD_VAR 0 6
49168: IFFALSE 49184
// ComEnterUnit ( unit , j ) ;
49170: LD_VAR 0 2
49174: PPUSH
49175: LD_VAR 0 6
49179: PPUSH
49180: CALL_OW 120
// end ;
49184: LD_VAR 0 4
49188: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
49189: LD_INT 0
49191: PPUSH
49192: PPUSH
49193: PPUSH
49194: PPUSH
// if not mc_bases then
49195: LD_EXP 44
49199: NOT
49200: IFFALSE 49204
// exit ;
49202: GO 49385
// for i = 1 to mc_bases do
49204: LD_ADDR_VAR 0 2
49208: PUSH
49209: DOUBLE
49210: LD_INT 1
49212: DEC
49213: ST_TO_ADDR
49214: LD_EXP 44
49218: PUSH
49219: FOR_TO
49220: IFFALSE 49383
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
49222: LD_ADDR_VAR 0 4
49226: PUSH
49227: LD_EXP 44
49231: PUSH
49232: LD_VAR 0 2
49236: ARRAY
49237: PPUSH
49238: LD_INT 21
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PPUSH
49248: CALL_OW 72
49252: ST_TO_ADDR
// if not tmp then
49253: LD_VAR 0 4
49257: NOT
49258: IFFALSE 49264
// exit ;
49260: POP
49261: POP
49262: GO 49385
// for j in tmp do
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: LD_VAR 0 4
49273: PUSH
49274: FOR_IN
49275: IFFALSE 49379
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
49277: LD_VAR 0 3
49281: PPUSH
49282: CALL_OW 110
49286: NOT
49287: PUSH
49288: LD_VAR 0 3
49292: PPUSH
49293: CALL_OW 314
49297: NOT
49298: AND
49299: PUSH
49300: LD_VAR 0 3
49304: PPUSH
49305: CALL_OW 310
49309: NOT
49310: AND
49311: PUSH
49312: LD_EXP 47
49316: PUSH
49317: LD_VAR 0 2
49321: ARRAY
49322: PUSH
49323: LD_INT 1
49325: ARRAY
49326: NOT
49327: AND
49328: PUSH
49329: LD_EXP 47
49333: PUSH
49334: LD_VAR 0 2
49338: ARRAY
49339: PUSH
49340: LD_INT 2
49342: ARRAY
49343: NOT
49344: AND
49345: IFFALSE 49377
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
49347: LD_EXP 44
49351: PUSH
49352: LD_VAR 0 2
49356: ARRAY
49357: PPUSH
49358: LD_VAR 0 3
49362: PPUSH
49363: LD_VAR 0 3
49367: PPUSH
49368: CALL_OW 257
49372: PPUSH
49373: CALL 48712 0 3
// end ;
49377: GO 49274
49379: POP
49380: POP
// end ;
49381: GO 49219
49383: POP
49384: POP
// end ;
49385: LD_VAR 0 1
49389: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
49390: LD_INT 0
49392: PPUSH
49393: PPUSH
49394: PPUSH
49395: PPUSH
49396: PPUSH
49397: PPUSH
49398: PPUSH
// if not mc_bases [ base ] then
49399: LD_EXP 44
49403: PUSH
49404: LD_VAR 0 1
49408: ARRAY
49409: NOT
49410: IFFALSE 49414
// exit ;
49412: GO 49682
// tmp := [ ] ;
49414: LD_ADDR_VAR 0 7
49418: PUSH
49419: EMPTY
49420: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
49421: LD_ADDR_VAR 0 8
49425: PUSH
49426: LD_VAR 0 3
49430: PPUSH
49431: LD_INT 0
49433: PPUSH
49434: CALL_OW 517
49438: ST_TO_ADDR
// if not list then
49439: LD_VAR 0 8
49443: NOT
49444: IFFALSE 49448
// exit ;
49446: GO 49682
// for i = 1 to amount do
49448: LD_ADDR_VAR 0 5
49452: PUSH
49453: DOUBLE
49454: LD_INT 1
49456: DEC
49457: ST_TO_ADDR
49458: LD_VAR 0 2
49462: PUSH
49463: FOR_TO
49464: IFFALSE 49630
// begin c := rand ( 1 , list [ 1 ] - i ) ;
49466: LD_ADDR_VAR 0 6
49470: PUSH
49471: LD_INT 1
49473: PPUSH
49474: LD_VAR 0 8
49478: PUSH
49479: LD_INT 1
49481: ARRAY
49482: PUSH
49483: LD_VAR 0 5
49487: MINUS
49488: PPUSH
49489: CALL_OW 12
49493: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
49494: LD_ADDR_VAR 0 7
49498: PUSH
49499: LD_VAR 0 7
49503: PPUSH
49504: LD_VAR 0 5
49508: PPUSH
49509: LD_VAR 0 8
49513: PUSH
49514: LD_INT 1
49516: ARRAY
49517: PUSH
49518: LD_VAR 0 6
49522: ARRAY
49523: PUSH
49524: LD_VAR 0 8
49528: PUSH
49529: LD_INT 2
49531: ARRAY
49532: PUSH
49533: LD_VAR 0 6
49537: ARRAY
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PPUSH
49543: CALL_OW 1
49547: ST_TO_ADDR
// for j = 1 to 2 do
49548: LD_ADDR_VAR 0 10
49552: PUSH
49553: DOUBLE
49554: LD_INT 1
49556: DEC
49557: ST_TO_ADDR
49558: LD_INT 2
49560: PUSH
49561: FOR_TO
49562: IFFALSE 49617
// begin x := Delete ( list [ j ] , c ) ;
49564: LD_ADDR_VAR 0 9
49568: PUSH
49569: LD_VAR 0 8
49573: PUSH
49574: LD_VAR 0 10
49578: ARRAY
49579: PPUSH
49580: LD_VAR 0 6
49584: PPUSH
49585: CALL_OW 3
49589: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
49590: LD_ADDR_VAR 0 8
49594: PUSH
49595: LD_VAR 0 8
49599: PPUSH
49600: LD_VAR 0 10
49604: PPUSH
49605: LD_VAR 0 9
49609: PPUSH
49610: CALL_OW 1
49614: ST_TO_ADDR
// end ;
49615: GO 49561
49617: POP
49618: POP
// if not list then
49619: LD_VAR 0 8
49623: NOT
49624: IFFALSE 49628
// break ;
49626: GO 49630
// end ;
49628: GO 49463
49630: POP
49631: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
49632: LD_ADDR_EXP 54
49636: PUSH
49637: LD_EXP 54
49641: PPUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: LD_VAR 0 7
49651: PPUSH
49652: CALL_OW 1
49656: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
49657: LD_ADDR_EXP 56
49661: PUSH
49662: LD_EXP 56
49666: PPUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: LD_VAR 0 3
49676: PPUSH
49677: CALL_OW 1
49681: ST_TO_ADDR
// end ;
49682: LD_VAR 0 4
49686: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
49687: LD_INT 0
49689: PPUSH
// if not mc_bases [ base ] then
49690: LD_EXP 44
49694: PUSH
49695: LD_VAR 0 1
49699: ARRAY
49700: NOT
49701: IFFALSE 49705
// exit ;
49703: GO 49730
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
49705: LD_ADDR_EXP 61
49709: PUSH
49710: LD_EXP 61
49714: PPUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: LD_VAR 0 2
49724: PPUSH
49725: CALL_OW 1
49729: ST_TO_ADDR
// end ;
49730: LD_VAR 0 3
49734: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
49735: LD_INT 0
49737: PPUSH
49738: PPUSH
49739: PPUSH
49740: PPUSH
// if not mc_bases [ base ] then
49741: LD_EXP 44
49745: PUSH
49746: LD_VAR 0 1
49750: ARRAY
49751: NOT
49752: IFFALSE 49756
// exit ;
49754: GO 49821
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
49756: LD_ADDR_EXP 60
49760: PUSH
49761: LD_EXP 60
49765: PPUSH
49766: LD_VAR 0 1
49770: PUSH
49771: LD_EXP 60
49775: PUSH
49776: LD_VAR 0 1
49780: ARRAY
49781: PUSH
49782: LD_INT 1
49784: PLUS
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PPUSH
49790: LD_VAR 0 1
49794: PUSH
49795: LD_VAR 0 2
49799: PUSH
49800: LD_VAR 0 3
49804: PUSH
49805: LD_VAR 0 4
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: PPUSH
49816: CALL 2780 0 3
49820: ST_TO_ADDR
// end ;
49821: LD_VAR 0 5
49825: RET
// export function MC_GetMinesField ( base ) ; begin
49826: LD_INT 0
49828: PPUSH
// result := mc_mines [ base ] ;
49829: LD_ADDR_VAR 0 2
49833: PUSH
49834: LD_EXP 54
49838: PUSH
49839: LD_VAR 0 1
49843: ARRAY
49844: ST_TO_ADDR
// end ;
49845: LD_VAR 0 2
49849: RET
// export function MC_GetProduceList ( base ) ; begin
49850: LD_INT 0
49852: PPUSH
// result := mc_produce [ base ] ;
49853: LD_ADDR_VAR 0 2
49857: PUSH
49858: LD_EXP 61
49862: PUSH
49863: LD_VAR 0 1
49867: ARRAY
49868: ST_TO_ADDR
// end ; end_of_file
49869: LD_VAR 0 2
49873: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 255
49883: PUSH
49884: LD_INT 1
49886: EQUAL
49887: IFFALSE 49897
// artifact_get := true ;
49889: LD_ADDR_EXP 12
49893: PUSH
49894: LD_INT 1
49896: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
49897: LD_VAR 0 1
49901: PPUSH
49902: CALL_OW 255
49906: PUSH
49907: LD_INT 2
49909: EQUAL
49910: IFFALSE 49928
// begin artifact_get := false ;
49912: LD_ADDR_EXP 12
49916: PUSH
49917: LD_INT 0
49919: ST_TO_ADDR
// artifact_stolen := true ;
49920: LD_ADDR_EXP 11
49924: PUSH
49925: LD_INT 1
49927: ST_TO_ADDR
// end ; artifact_oncargo := true ;
49928: LD_ADDR_EXP 13
49932: PUSH
49933: LD_INT 1
49935: ST_TO_ADDR
// end ;
49936: PPOPN 2
49938: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
49939: LD_ADDR_EXP 13
49943: PUSH
49944: LD_INT 0
49946: ST_TO_ADDR
// end ;
49947: PPOPN 2
49949: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
49950: LD_INT 0
49952: PPUSH
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
49957: LD_VAR 0 1
49961: PUSH
49962: LD_INT 22
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 21
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: PUSH
49985: LD_INT 25
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 25
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 25
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 25
50017: PUSH
50018: LD_INT 4
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 25
50027: PUSH
50028: LD_INT 5
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 25
50037: PUSH
50038: LD_INT 8
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: PPUSH
50059: CALL_OW 69
50063: IN
50064: IFFALSE 50080
// loses_counter := loses_counter + 1 ;
50066: LD_ADDR_EXP 16
50070: PUSH
50071: LD_EXP 16
50075: PUSH
50076: LD_INT 1
50078: PLUS
50079: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
50080: LD_VAR 0 1
50084: PUSH
50085: LD_INT 21
50087: PUSH
50088: LD_INT 3
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PPUSH
50095: CALL_OW 69
50099: IN
50100: IFFALSE 50616
// begin if not mc_bases then
50102: LD_EXP 44
50106: NOT
50107: IFFALSE 50111
// exit ;
50109: GO 50616
// pos := mc_build_list [ i ] + 1 ;
50111: LD_ADDR_VAR 0 5
50115: PUSH
50116: LD_EXP 49
50120: PUSH
50121: LD_VAR 0 2
50125: ARRAY
50126: PUSH
50127: LD_INT 1
50129: PLUS
50130: ST_TO_ADDR
// btype := GetBType ( un ) ;
50131: LD_ADDR_VAR 0 4
50135: PUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 266
50145: ST_TO_ADDR
// if btype = b_warehouse then
50146: LD_VAR 0 4
50150: PUSH
50151: LD_INT 1
50153: EQUAL
50154: IFFALSE 50172
// begin btype := b_depot ;
50156: LD_ADDR_VAR 0 4
50160: PUSH
50161: LD_INT 0
50163: ST_TO_ADDR
// pos := 1 ;
50164: LD_ADDR_VAR 0 5
50168: PUSH
50169: LD_INT 1
50171: ST_TO_ADDR
// end ; if btype = b_factory then
50172: LD_VAR 0 4
50176: PUSH
50177: LD_INT 3
50179: EQUAL
50180: IFFALSE 50198
// begin btype := b_workshop ;
50182: LD_ADDR_VAR 0 4
50186: PUSH
50187: LD_INT 2
50189: ST_TO_ADDR
// pos := 1 ;
50190: LD_ADDR_VAR 0 5
50194: PUSH
50195: LD_INT 1
50197: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
50198: LD_VAR 0 4
50202: PUSH
50203: LD_INT 7
50205: PUSH
50206: LD_INT 8
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: IN
50213: IFFALSE 50223
// btype := b_lab ;
50215: LD_ADDR_VAR 0 4
50219: PUSH
50220: LD_INT 6
50222: ST_TO_ADDR
// for i = 1 to mc_bases do
50223: LD_ADDR_VAR 0 2
50227: PUSH
50228: DOUBLE
50229: LD_INT 1
50231: DEC
50232: ST_TO_ADDR
50233: LD_EXP 44
50237: PUSH
50238: FOR_TO
50239: IFFALSE 50614
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
50241: LD_VAR 0 1
50245: PUSH
50246: LD_EXP 44
50250: PUSH
50251: LD_VAR 0 2
50255: ARRAY
50256: IN
50257: PUSH
50258: LD_VAR 0 1
50262: PUSH
50263: LD_EXP 51
50267: PUSH
50268: LD_VAR 0 2
50272: ARRAY
50273: IN
50274: OR
50275: IFFALSE 50612
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
50277: LD_ADDR_EXP 49
50281: PUSH
50282: LD_EXP 49
50286: PPUSH
50287: LD_VAR 0 2
50291: PUSH
50292: LD_EXP 49
50296: PUSH
50297: LD_VAR 0 2
50301: ARRAY
50302: PUSH
50303: LD_INT 1
50305: PLUS
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PPUSH
50311: LD_VAR 0 4
50315: PUSH
50316: LD_VAR 0 1
50320: PPUSH
50321: CALL_OW 250
50325: PUSH
50326: LD_VAR 0 1
50330: PPUSH
50331: CALL_OW 251
50335: PUSH
50336: LD_VAR 0 1
50340: PPUSH
50341: CALL_OW 254
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: PPUSH
50352: CALL 2780 0 3
50356: ST_TO_ADDR
// if pos = 1 then
50357: LD_VAR 0 5
50361: PUSH
50362: LD_INT 1
50364: EQUAL
50365: IFFALSE 50480
// begin tmp := mc_build_list [ i ] ;
50367: LD_ADDR_VAR 0 6
50371: PUSH
50372: LD_EXP 49
50376: PUSH
50377: LD_VAR 0 2
50381: ARRAY
50382: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
50383: LD_VAR 0 6
50387: PPUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 30
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 30
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: PPUSH
50416: CALL_OW 72
50420: IFFALSE 50430
// pos := 2 ;
50422: LD_ADDR_VAR 0 5
50426: PUSH
50427: LD_INT 2
50429: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
50430: LD_ADDR_VAR 0 6
50434: PUSH
50435: LD_VAR 0 6
50439: PPUSH
50440: LD_VAR 0 5
50444: PPUSH
50445: LD_VAR 0 6
50449: PPUSH
50450: CALL 2671 0 3
50454: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
50455: LD_ADDR_EXP 49
50459: PUSH
50460: LD_EXP 49
50464: PPUSH
50465: LD_VAR 0 2
50469: PPUSH
50470: LD_VAR 0 6
50474: PPUSH
50475: CALL_OW 1
50479: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
50480: LD_VAR 0 1
50484: PUSH
50485: LD_EXP 44
50489: PUSH
50490: LD_VAR 0 2
50494: ARRAY
50495: IN
50496: IFFALSE 50545
// begin tmp := mc_bases [ i ] diff un ;
50498: LD_ADDR_VAR 0 6
50502: PUSH
50503: LD_EXP 44
50507: PUSH
50508: LD_VAR 0 2
50512: ARRAY
50513: PUSH
50514: LD_VAR 0 1
50518: DIFF
50519: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
50520: LD_ADDR_EXP 44
50524: PUSH
50525: LD_EXP 44
50529: PPUSH
50530: LD_VAR 0 2
50534: PPUSH
50535: LD_VAR 0 6
50539: PPUSH
50540: CALL_OW 1
50544: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
50545: LD_VAR 0 1
50549: PUSH
50550: LD_EXP 51
50554: PUSH
50555: LD_VAR 0 2
50559: ARRAY
50560: IN
50561: IFFALSE 50610
// begin tmp := mc_construct_list [ i ] diff un ;
50563: LD_ADDR_VAR 0 6
50567: PUSH
50568: LD_EXP 51
50572: PUSH
50573: LD_VAR 0 2
50577: ARRAY
50578: PUSH
50579: LD_VAR 0 1
50583: DIFF
50584: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
50585: LD_ADDR_EXP 51
50589: PUSH
50590: LD_EXP 51
50594: PPUSH
50595: LD_VAR 0 2
50599: PPUSH
50600: LD_VAR 0 6
50604: PPUSH
50605: CALL_OW 1
50609: ST_TO_ADDR
// end ; break ;
50610: GO 50614
// end ;
50612: GO 50238
50614: POP
50615: POP
// end ; end ;
50616: PPOPN 6
50618: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
50619: LD_INT 0
50621: PPUSH
50622: PPUSH
50623: PPUSH
50624: PPUSH
50625: PPUSH
50626: PPUSH
50627: PPUSH
// begin if not mc_bases then
50628: LD_EXP 44
50632: NOT
50633: IFFALSE 50637
// exit ;
50635: GO 50878
// btype := GetBType ( building ) ;
50637: LD_ADDR_VAR 0 6
50641: PUSH
50642: LD_VAR 0 1
50646: PPUSH
50647: CALL_OW 266
50651: ST_TO_ADDR
// x := GetX ( building ) ;
50652: LD_ADDR_VAR 0 7
50656: PUSH
50657: LD_VAR 0 1
50661: PPUSH
50662: CALL_OW 250
50666: ST_TO_ADDR
// y := GetY ( building ) ;
50667: LD_ADDR_VAR 0 8
50671: PUSH
50672: LD_VAR 0 1
50676: PPUSH
50677: CALL_OW 251
50681: ST_TO_ADDR
// d := GetDir ( building ) ;
50682: LD_ADDR_VAR 0 9
50686: PUSH
50687: LD_VAR 0 1
50691: PPUSH
50692: CALL_OW 254
50696: ST_TO_ADDR
// for i = 1 to mc_bases do
50697: LD_ADDR_VAR 0 3
50701: PUSH
50702: DOUBLE
50703: LD_INT 1
50705: DEC
50706: ST_TO_ADDR
50707: LD_EXP 44
50711: PUSH
50712: FOR_TO
50713: IFFALSE 50876
// begin if not mc_build_list [ i ] then
50715: LD_EXP 49
50719: PUSH
50720: LD_VAR 0 3
50724: ARRAY
50725: NOT
50726: IFFALSE 50730
// continue ;
50728: GO 50712
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
50730: LD_VAR 0 6
50734: PUSH
50735: LD_VAR 0 7
50739: PUSH
50740: LD_VAR 0 8
50744: PUSH
50745: LD_VAR 0 9
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: PPUSH
50756: LD_EXP 49
50760: PUSH
50761: LD_VAR 0 3
50765: ARRAY
50766: PUSH
50767: LD_INT 1
50769: ARRAY
50770: PPUSH
50771: CALL 7966 0 2
50775: IFFALSE 50874
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
50777: LD_ADDR_VAR 0 5
50781: PUSH
50782: LD_EXP 49
50786: PUSH
50787: LD_VAR 0 3
50791: ARRAY
50792: PPUSH
50793: LD_INT 1
50795: PPUSH
50796: CALL_OW 3
50800: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
50801: LD_ADDR_EXP 49
50805: PUSH
50806: LD_EXP 49
50810: PPUSH
50811: LD_VAR 0 3
50815: PPUSH
50816: LD_VAR 0 5
50820: PPUSH
50821: CALL_OW 1
50825: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
50826: LD_ADDR_EXP 51
50830: PUSH
50831: LD_EXP 51
50835: PPUSH
50836: LD_VAR 0 3
50840: PUSH
50841: LD_EXP 51
50845: PUSH
50846: LD_VAR 0 3
50850: ARRAY
50851: PUSH
50852: LD_INT 1
50854: PLUS
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PPUSH
50860: LD_VAR 0 1
50864: PPUSH
50865: CALL 2780 0 3
50869: ST_TO_ADDR
// exit ;
50870: POP
50871: POP
50872: GO 50878
// end ; end ;
50874: GO 50712
50876: POP
50877: POP
// end ;
50878: PPOPN 9
50880: END
// on BuildingComplete ( building ) do var i , j , tmp ;
50881: LD_INT 0
50883: PPUSH
50884: PPUSH
50885: PPUSH
// begin if not mc_bases then
50886: LD_EXP 44
50890: NOT
50891: IFFALSE 50895
// exit ;
50893: GO 51096
// for i = 1 to mc_bases do
50895: LD_ADDR_VAR 0 2
50899: PUSH
50900: DOUBLE
50901: LD_INT 1
50903: DEC
50904: ST_TO_ADDR
50905: LD_EXP 44
50909: PUSH
50910: FOR_TO
50911: IFFALSE 51094
// begin if building in mc_construct_list [ i ] then
50913: LD_VAR 0 1
50917: PUSH
50918: LD_EXP 51
50922: PUSH
50923: LD_VAR 0 2
50927: ARRAY
50928: IN
50929: IFFALSE 51092
// begin tmp := mc_construct_list [ i ] diff building ;
50931: LD_ADDR_VAR 0 4
50935: PUSH
50936: LD_EXP 51
50940: PUSH
50941: LD_VAR 0 2
50945: ARRAY
50946: PUSH
50947: LD_VAR 0 1
50951: DIFF
50952: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
50953: LD_ADDR_EXP 51
50957: PUSH
50958: LD_EXP 51
50962: PPUSH
50963: LD_VAR 0 2
50967: PPUSH
50968: LD_VAR 0 4
50972: PPUSH
50973: CALL_OW 1
50977: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
50978: LD_ADDR_EXP 44
50982: PUSH
50983: LD_EXP 44
50987: PPUSH
50988: LD_VAR 0 2
50992: PUSH
50993: LD_EXP 44
50997: PUSH
50998: LD_VAR 0 2
51002: ARRAY
51003: PUSH
51004: LD_INT 1
51006: PLUS
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PPUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL 2780 0 3
51021: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
51022: LD_VAR 0 1
51026: PPUSH
51027: CALL_OW 266
51031: PUSH
51032: LD_INT 32
51034: PUSH
51035: LD_INT 33
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: IN
51042: IFFALSE 51088
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
51044: LD_ADDR_EXP 52
51048: PUSH
51049: LD_EXP 52
51053: PPUSH
51054: LD_VAR 0 2
51058: PUSH
51059: LD_EXP 52
51063: PUSH
51064: LD_VAR 0 2
51068: ARRAY
51069: PUSH
51070: LD_INT 1
51072: PLUS
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PPUSH
51078: LD_VAR 0 1
51082: PPUSH
51083: CALL 2780 0 3
51087: ST_TO_ADDR
// exit ;
51088: POP
51089: POP
51090: GO 51096
// end ; end ;
51092: GO 50910
51094: POP
51095: POP
// end ;
51096: PPOPN 4
51098: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
51099: LD_INT 0
51101: PPUSH
51102: PPUSH
// begin if not mc_bases then
51103: LD_EXP 44
51107: NOT
51108: IFFALSE 51112
// exit ;
51110: GO 51327
// repeat wait ( 0 0$1 ) ;
51112: LD_INT 35
51114: PPUSH
51115: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
51119: LD_VAR 0 2
51123: PPUSH
51124: LD_VAR 0 3
51128: PPUSH
51129: CALL_OW 284
51133: IFFALSE 51112
// if GetResourceTypeXY ( x , y ) = mat_artefact then
51135: LD_VAR 0 2
51139: PPUSH
51140: LD_VAR 0 3
51144: PPUSH
51145: CALL_OW 283
51149: PUSH
51150: LD_INT 4
51152: EQUAL
51153: IFFALSE 51157
// exit ;
51155: GO 51327
// for i = 1 to mc_bases do
51157: LD_ADDR_VAR 0 6
51161: PUSH
51162: DOUBLE
51163: LD_INT 1
51165: DEC
51166: ST_TO_ADDR
51167: LD_EXP 44
51171: PUSH
51172: FOR_TO
51173: IFFALSE 51325
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
51175: LD_ADDR_VAR 0 7
51179: PUSH
51180: LD_EXP 44
51184: PUSH
51185: LD_VAR 0 6
51189: ARRAY
51190: PPUSH
51191: LD_INT 2
51193: PUSH
51194: LD_INT 30
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 30
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: PPUSH
51219: CALL_OW 72
51223: ST_TO_ADDR
// if not depot then
51224: LD_VAR 0 7
51228: NOT
51229: IFFALSE 51233
// continue ;
51231: GO 51172
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
51233: LD_VAR 0 7
51237: PUSH
51238: LD_INT 1
51240: ARRAY
51241: PPUSH
51242: LD_VAR 0 2
51246: PPUSH
51247: LD_VAR 0 3
51251: PPUSH
51252: CALL_OW 297
51256: PUSH
51257: LD_INT 30
51259: LESS
51260: IFFALSE 51323
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
51262: LD_ADDR_EXP 57
51266: PUSH
51267: LD_EXP 57
51271: PPUSH
51272: LD_VAR 0 6
51276: PUSH
51277: LD_EXP 57
51281: PUSH
51282: LD_VAR 0 6
51286: ARRAY
51287: PUSH
51288: LD_INT 1
51290: PLUS
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PPUSH
51296: LD_VAR 0 4
51300: PUSH
51301: LD_VAR 0 2
51305: PUSH
51306: LD_VAR 0 3
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: PPUSH
51316: CALL 2780 0 3
51320: ST_TO_ADDR
// break ;
51321: GO 51325
// end ; end ;
51323: GO 51172
51325: POP
51326: POP
// end ;
51327: PPOPN 7
51329: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
51330: LD_INT 0
51332: PPUSH
51333: PPUSH
// begin if not mc_bases then
51334: LD_EXP 44
51338: NOT
51339: IFFALSE 51343
// exit ;
51341: GO 51431
// for i = 1 to mc_bases do
51343: LD_ADDR_VAR 0 3
51347: PUSH
51348: DOUBLE
51349: LD_INT 1
51351: DEC
51352: ST_TO_ADDR
51353: LD_EXP 44
51357: PUSH
51358: FOR_TO
51359: IFFALSE 51429
// begin if factory in mc_bases [ i ] then
51361: LD_VAR 0 2
51365: PUSH
51366: LD_EXP 44
51370: PUSH
51371: LD_VAR 0 3
51375: ARRAY
51376: IN
51377: IFFALSE 51427
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
51379: LD_ADDR_EXP 59
51383: PUSH
51384: LD_EXP 59
51388: PPUSH
51389: LD_VAR 0 3
51393: PUSH
51394: LD_EXP 59
51398: PUSH
51399: LD_VAR 0 3
51403: ARRAY
51404: PUSH
51405: LD_INT 1
51407: PLUS
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PPUSH
51413: LD_VAR 0 1
51417: PPUSH
51418: CALL 2780 0 3
51422: ST_TO_ADDR
// exit ;
51423: POP
51424: POP
51425: GO 51431
// end ; end ;
51427: GO 51358
51429: POP
51430: POP
// end ;
51431: PPOPN 4
51433: END
// on UnitKamikazed ( unit ) do begin if not kamikazed then
51434: LD_EXP 10
51438: NOT
51439: IFFALSE 51451
// kamikazed := unit ;
51441: LD_ADDR_EXP 10
51445: PUSH
51446: LD_VAR 0 1
51450: ST_TO_ADDR
// end ; end_of_file
51451: PPOPN 1
51453: END
// every 0 0$1 trigger game do
51454: LD_EXP 2
51458: IFFALSE 51488
51460: GO 51462
51462: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
51463: LD_INT 7
51465: PUSH
51466: LD_INT 6
51468: PUSH
51469: LD_INT 4
51471: PUSH
51472: LD_INT 6
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: PPUSH
51481: LD_INT 1400
51483: PPUSH
51484: CALL 51489 0 2
51488: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
51489: LD_INT 0
51491: PPUSH
51492: PPUSH
51493: PPUSH
// if not areas then
51494: LD_VAR 0 1
51498: NOT
51499: IFFALSE 51503
// exit ;
51501: GO 51615
// repeat wait ( time ) ;
51503: LD_VAR 0 2
51507: PPUSH
51508: CALL_OW 67
// p := rand ( 1 , 90 ) ;
51512: LD_ADDR_VAR 0 5
51516: PUSH
51517: LD_INT 1
51519: PPUSH
51520: LD_INT 90
51522: PPUSH
51523: CALL_OW 12
51527: ST_TO_ADDR
// for i in areas do
51528: LD_ADDR_VAR 0 4
51532: PUSH
51533: LD_VAR 0 1
51537: PUSH
51538: FOR_IN
51539: IFFALSE 51592
// begin if Prob ( p ) then
51541: LD_VAR 0 5
51545: PPUSH
51546: CALL_OW 13
51550: IFFALSE 51590
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
51552: LD_INT 1
51554: PPUSH
51555: LD_INT 5
51557: PPUSH
51558: CALL_OW 12
51562: PPUSH
51563: LD_VAR 0 4
51567: PPUSH
51568: LD_INT 1
51570: PPUSH
51571: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
51575: LD_INT 455
51577: PPUSH
51578: LD_INT 595
51580: PPUSH
51581: CALL_OW 12
51585: PPUSH
51586: CALL_OW 67
// end ; end ;
51590: GO 51538
51592: POP
51593: POP
// time := time + 0 0$3 ;
51594: LD_ADDR_VAR 0 2
51598: PUSH
51599: LD_VAR 0 2
51603: PUSH
51604: LD_INT 105
51606: PLUS
51607: ST_TO_ADDR
// until not game ;
51608: LD_EXP 2
51612: NOT
51613: IFFALSE 51503
// end ;
51615: LD_VAR 0 3
51619: RET
