// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 46485 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 29189 0 0
// PrepareAmerican ;
  33: CALL 302 0 0
// PrepareArabian ;
  37: CALL 33800 0 0
// Action ;
  41: CALL 38953 0 0
// RunMacro ;
  45: CALL 46648 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 11
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 12
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 13
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 15
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 17
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 14
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 217: LD_ADDR_EXP 18
 221: PUSH
 222: LD_STRING 10_GensherEscape_1
 224: PPUSH
 225: LD_EXP 1
 229: PPUSH
 230: CALL_OW 30
 234: ST_TO_ADDR
// can_kamikazed := false ;
 235: LD_ADDR_EXP 10
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// function Debuger ; var i ; begin
 248: LD_INT 0
 250: PPUSH
 251: PPUSH
// if not debug then
 252: LD_EXP 1
 256: NOT
 257: IFFALSE 261
// exit ;
 259: GO 297
// game_speed := 5 ;
 261: LD_ADDR_OWVAR 65
 265: PUSH
 266: LD_INT 5
 268: ST_TO_ADDR
// uc_side := 1 ;
 269: LD_ADDR_OWVAR 20
 273: PUSH
 274: LD_INT 1
 276: ST_TO_ADDR
// uc_nation := 1 ;
 277: LD_ADDR_OWVAR 21
 281: PUSH
 282: LD_INT 1
 284: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 285: LD_EXP 36
 289: PPUSH
 290: LD_INT 1
 292: PPUSH
 293: CALL_OW 235
// end ; end_of_file
 297: LD_VAR 0 1
 301: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 302: LD_INT 0
 304: PPUSH
 305: PPUSH
 306: PPUSH
 307: PPUSH
 308: PPUSH
 309: PPUSH
 310: PPUSH
 311: PPUSH
// uc_side := 4 ;
 312: LD_ADDR_OWVAR 20
 316: PUSH
 317: LD_INT 4
 319: ST_TO_ADDR
// uc_nation := 1 ;
 320: LD_ADDR_OWVAR 21
 324: PUSH
 325: LD_INT 1
 327: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 328: LD_ADDR_EXP 30
 332: PUSH
 333: LD_STRING Powell
 335: PPUSH
 336: LD_INT 0
 338: PPUSH
 339: CALL 1919 0 2
 343: ST_TO_ADDR
// uc_side := 1 ;
 344: LD_ADDR_OWVAR 20
 348: PUSH
 349: LD_INT 1
 351: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 352: LD_ADDR_EXP 21
 356: PUSH
 357: LD_STRING JMM
 359: PPUSH
 360: LD_EXP 1
 364: NOT
 365: PPUSH
 366: CALL 1919 0 2
 370: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 371: LD_EXP 21
 375: PPUSH
 376: CALL_OW 257
 380: PUSH
 381: LD_INT 4
 383: GREATER
 384: IFFALSE 398
// SetClass ( JMM , 1 ) ;
 386: LD_EXP 21
 390: PPUSH
 391: LD_INT 1
 393: PPUSH
 394: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 398: LD_ADDR_EXP 22
 402: PUSH
 403: LD_STRING Lisa
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: CALL 1919 0 2
 416: ST_TO_ADDR
// if not Lisa then
 417: LD_EXP 22
 421: NOT
 422: IFFALSE 437
// Lisa := CreateCharacter ( 10_Lisa ) ;
 424: LD_ADDR_EXP 22
 428: PUSH
 429: LD_STRING 10_Lisa
 431: PPUSH
 432: CALL_OW 34
 436: ST_TO_ADDR
// if not Lisa then
 437: LD_EXP 22
 441: NOT
 442: IFFALSE 457
// Lisa := CreateCharacter ( 09_Lisa ) ;
 444: LD_ADDR_EXP 22
 448: PUSH
 449: LD_STRING 09_Lisa
 451: PPUSH
 452: CALL_OW 34
 456: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 457: LD_ADDR_EXP 31
 461: PUSH
 462: LD_STRING Cornel
 464: PPUSH
 465: LD_EXP 1
 469: NOT
 470: PPUSH
 471: CALL 1919 0 2
 475: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 476: LD_ADDR_EXP 23
 480: PUSH
 481: LD_STRING Donaldson
 483: PPUSH
 484: LD_EXP 1
 488: NOT
 489: PPUSH
 490: CALL 1919 0 2
 494: ST_TO_ADDR
// if not Donaldson then
 495: LD_EXP 23
 499: NOT
 500: IFFALSE 515
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 502: LD_ADDR_EXP 23
 506: PUSH
 507: LD_STRING 10_Donaldson
 509: PPUSH
 510: CALL_OW 34
 514: ST_TO_ADDR
// if not Donaldson then
 515: LD_EXP 23
 519: NOT
 520: IFFALSE 535
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 522: LD_ADDR_EXP 23
 526: PUSH
 527: LD_STRING 09_Donaldson
 529: PPUSH
 530: CALL_OW 34
 534: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 535: LD_ADDR_EXP 24
 539: PUSH
 540: LD_STRING Bobby
 542: PPUSH
 543: LD_EXP 1
 547: NOT
 548: PPUSH
 549: CALL 1919 0 2
 553: ST_TO_ADDR
// if not Bobby then
 554: LD_EXP 24
 558: NOT
 559: IFFALSE 574
// Bobby := CreateCharacter ( 10_Bobby ) ;
 561: LD_ADDR_EXP 24
 565: PUSH
 566: LD_STRING 10_Bobby
 568: PPUSH
 569: CALL_OW 34
 573: ST_TO_ADDR
// if not Bobby then
 574: LD_EXP 24
 578: NOT
 579: IFFALSE 594
// Bobby := CreateCharacter ( 09_Bobby ) ;
 581: LD_ADDR_EXP 24
 585: PUSH
 586: LD_STRING 09_Bobby
 588: PPUSH
 589: CALL_OW 34
 593: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 594: LD_ADDR_EXP 25
 598: PUSH
 599: LD_STRING Cyrus
 601: PPUSH
 602: LD_EXP 1
 606: NOT
 607: PPUSH
 608: CALL 1919 0 2
 612: ST_TO_ADDR
// if not Cyrus then
 613: LD_EXP 25
 617: NOT
 618: IFFALSE 633
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 620: LD_ADDR_EXP 25
 624: PUSH
 625: LD_STRING 10_Cyrus
 627: PPUSH
 628: CALL_OW 34
 632: ST_TO_ADDR
// if not Cyrus then
 633: LD_EXP 25
 637: NOT
 638: IFFALSE 653
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 640: LD_ADDR_EXP 25
 644: PUSH
 645: LD_STRING 09_Cyrus
 647: PPUSH
 648: CALL_OW 34
 652: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 653: LD_ADDR_EXP 26
 657: PUSH
 658: LD_STRING Denis
 660: PPUSH
 661: LD_EXP 1
 665: NOT
 666: PPUSH
 667: CALL 1919 0 2
 671: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 672: LD_ADDR_EXP 27
 676: PUSH
 677: LD_STRING Brown
 679: PPUSH
 680: LD_EXP 1
 684: NOT
 685: PPUSH
 686: CALL 1919 0 2
 690: ST_TO_ADDR
// if not Brown then
 691: LD_EXP 27
 695: NOT
 696: IFFALSE 711
// Brown := CreateCharacter ( 10_Brown ) ;
 698: LD_ADDR_EXP 27
 702: PUSH
 703: LD_STRING 10_Brown
 705: PPUSH
 706: CALL_OW 34
 710: ST_TO_ADDR
// if not Brown then
 711: LD_EXP 27
 715: NOT
 716: IFFALSE 731
// Brown := CreateCharacter ( 08_Brown ) ;
 718: LD_ADDR_EXP 27
 722: PUSH
 723: LD_STRING 08_Brown
 725: PPUSH
 726: CALL_OW 34
 730: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 731: LD_ADDR_EXP 28
 735: PUSH
 736: LD_STRING Gladstone
 738: PPUSH
 739: LD_EXP 1
 743: NOT
 744: PPUSH
 745: CALL 1919 0 2
 749: ST_TO_ADDR
// if not Gladstone then
 750: LD_EXP 28
 754: NOT
 755: IFFALSE 770
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 757: LD_ADDR_EXP 28
 761: PUSH
 762: LD_STRING 10_Gladstone
 764: PPUSH
 765: CALL_OW 34
 769: ST_TO_ADDR
// if not Gladstone then
 770: LD_EXP 28
 774: NOT
 775: IFFALSE 790
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 777: LD_ADDR_EXP 28
 781: PUSH
 782: LD_STRING 08_Gladstone
 784: PPUSH
 785: CALL_OW 34
 789: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 790: LD_ADDR_EXP 29
 794: PUSH
 795: LD_STRING Houten
 797: PPUSH
 798: LD_EXP 1
 802: NOT
 803: PPUSH
 804: CALL 1919 0 2
 808: ST_TO_ADDR
// if not Houten then
 809: LD_EXP 29
 813: NOT
 814: IFFALSE 829
// Houten := CreateCharacter ( 10_Houten ) ;
 816: LD_ADDR_EXP 29
 820: PUSH
 821: LD_STRING 10_Houten
 823: PPUSH
 824: CALL_OW 34
 828: ST_TO_ADDR
// if not Houten then
 829: LD_EXP 29
 833: NOT
 834: IFFALSE 849
// Houten := CreateCharacter ( 09_Houten ) ;
 836: LD_ADDR_EXP 29
 840: PUSH
 841: LD_STRING 09_Houten
 843: PPUSH
 844: CALL_OW 34
 848: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 849: LD_ADDR_EXP 31
 853: PUSH
 854: LD_STRING Cornel
 856: PPUSH
 857: LD_EXP 1
 861: NOT
 862: PPUSH
 863: CALL 1919 0 2
 867: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 868: LD_ADDR_EXP 32
 872: PUSH
 873: LD_STRING Gary
 875: PPUSH
 876: LD_EXP 1
 880: NOT
 881: PPUSH
 882: CALL 1919 0 2
 886: ST_TO_ADDR
// if not Gary then
 887: LD_EXP 32
 891: NOT
 892: IFFALSE 907
// Gary := CreateCharacter ( 10_Gary ) ;
 894: LD_ADDR_EXP 32
 898: PUSH
 899: LD_STRING 10_Gary
 901: PPUSH
 902: CALL_OW 34
 906: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 907: LD_ADDR_EXP 33
 911: PUSH
 912: LD_STRING Frank
 914: PPUSH
 915: LD_EXP 1
 919: NOT
 920: PPUSH
 921: CALL 1919 0 2
 925: ST_TO_ADDR
// if not Frank then
 926: LD_EXP 33
 930: NOT
 931: IFFALSE 946
// Frank := CreateCharacter ( 08_Frank ) ;
 933: LD_ADDR_EXP 33
 937: PUSH
 938: LD_STRING 08_Frank
 940: PPUSH
 941: CALL_OW 34
 945: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 946: LD_ADDR_EXP 34
 950: PUSH
 951: LD_STRING Kikuchi
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: CALL 1919 0 2
 964: ST_TO_ADDR
// if not Kikuchi then
 965: LD_EXP 34
 969: NOT
 970: IFFALSE 985
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 972: LD_ADDR_EXP 34
 976: PUSH
 977: LD_STRING 08_Kikuchi
 979: PPUSH
 980: CALL_OW 34
 984: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 985: LD_ADDR_VAR 0 5
 989: PUSH
 990: LD_EXP 22
 994: PUSH
 995: LD_EXP 23
 999: PUSH
1000: LD_EXP 24
1004: PUSH
1005: LD_EXP 25
1009: PUSH
1010: LD_EXP 26
1014: PUSH
1015: LD_EXP 27
1019: PUSH
1020: LD_EXP 28
1024: PUSH
1025: LD_EXP 29
1029: PUSH
1030: LD_EXP 31
1034: PUSH
1035: LD_EXP 32
1039: PUSH
1040: LD_EXP 33
1044: PUSH
1045: LD_EXP 34
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: ST_TO_ADDR
// tmp := tmp diff 0 ;
1064: LD_ADDR_VAR 0 5
1068: PUSH
1069: LD_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: DIFF
1077: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1078: LD_ADDR_VAR 0 5
1082: PUSH
1083: LD_VAR 0 5
1087: PUSH
1088: LD_STRING 10_lock
1090: PPUSH
1091: CALL_OW 31
1095: UNION
1096: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1097: LD_ADDR_VAR 0 5
1101: PUSH
1102: LD_VAR 0 5
1106: PUSH
1107: LD_STRING 10c_lock
1109: PPUSH
1110: CALL_OW 31
1114: UNION
1115: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1116: LD_STRING 10_lock
1118: PPUSH
1119: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1123: LD_STRING 10c_lock
1125: PPUSH
1126: CALL_OW 40
// for i in tmp do
1130: LD_ADDR_VAR 0 2
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: FOR_IN
1141: IFFALSE 1172
// if GetClass ( i ) = class_mortar then
1143: LD_VAR 0 2
1147: PPUSH
1148: CALL_OW 257
1152: PUSH
1153: LD_INT 8
1155: EQUAL
1156: IFFALSE 1170
// SetClass ( i , class_soldier ) ;
1158: LD_VAR 0 2
1162: PPUSH
1163: LD_INT 1
1165: PPUSH
1166: CALL_OW 336
1170: GO 1140
1172: POP
1173: POP
// if tmp < 12 then
1174: LD_VAR 0 5
1178: PUSH
1179: LD_INT 12
1181: LESS
1182: IFFALSE 1280
// begin k := 16 - tmp ;
1184: LD_ADDR_VAR 0 3
1188: PUSH
1189: LD_INT 16
1191: PUSH
1192: LD_VAR 0 5
1196: MINUS
1197: ST_TO_ADDR
// for i = 1 to k do
1198: LD_ADDR_VAR 0 2
1202: PUSH
1203: DOUBLE
1204: LD_INT 1
1206: DEC
1207: ST_TO_ADDR
1208: LD_VAR 0 3
1212: PUSH
1213: FOR_TO
1214: IFFALSE 1278
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1216: LD_INT 0
1218: PPUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 2
1227: PUSH
1228: LD_INT 3
1230: PUSH
1231: LD_INT 4
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 5
1246: PPUSH
1247: CALL_OW 12
1251: ARRAY
1252: PPUSH
1253: LD_INT 6
1255: PPUSH
1256: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1260: LD_ADDR_VAR 0 5
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: CALL_OW 44
1274: ADD
1275: ST_TO_ADDR
// end ;
1276: GO 1213
1278: POP
1279: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1280: LD_ADDR_EXP 20
1284: PUSH
1285: LD_STRING 1
1287: PPUSH
1288: LD_INT 12
1290: PPUSH
1291: LD_INT 12
1293: PPUSH
1294: LD_INT -5
1296: PUSH
1297: LD_EXP 21
1301: PUSH
1302: LD_INT -2
1304: PUSH
1305: LD_INT -3
1307: PUSH
1308: LD_INT -5
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_VAR 0 5
1322: ADD
1323: PUSH
1324: LD_INT -6
1326: PUSH
1327: LD_INT -4
1329: PUSH
1330: LD_EXP 30
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: ADD
1340: PPUSH
1341: LD_INT 1
1343: PUSH
1344: LD_INT 4
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: LD_INT 2
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PUSH
1361: LD_INT 3
1363: PUSH
1364: LD_INT 0
1366: PUSH
1367: LD_INT 5
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: LIST
1374: PUSH
1375: LD_INT 4
1377: PUSH
1378: LD_INT 0
1380: PUSH
1381: LD_INT 3
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 5
1391: PUSH
1392: LD_INT 0
1394: PUSH
1395: LD_INT 2
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 42
1414: ST_TO_ADDR
// others := tmp diff selected ;
1415: LD_ADDR_VAR 0 8
1419: PUSH
1420: LD_VAR 0 5
1424: PUSH
1425: LD_EXP 20
1429: DIFF
1430: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1431: LD_ADDR_VAR 0 8
1435: PUSH
1436: LD_VAR 0 5
1440: PUSH
1441: LD_EXP 22
1445: PUSH
1446: LD_EXP 23
1450: PUSH
1451: LD_EXP 24
1455: PUSH
1456: LD_EXP 25
1460: PUSH
1461: LD_EXP 26
1465: PUSH
1466: LD_EXP 27
1470: PUSH
1471: LD_EXP 28
1475: PUSH
1476: LD_EXP 29
1480: PUSH
1481: LD_EXP 31
1485: PUSH
1486: LD_EXP 32
1490: PUSH
1491: LD_EXP 33
1495: PUSH
1496: LD_EXP 34
1500: PUSH
1501: EMPTY
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: DIFF
1515: ST_TO_ADDR
// no_selected := others ;
1516: LD_ADDR_EXP 19
1520: PUSH
1521: LD_VAR 0 8
1525: ST_TO_ADDR
// if no_selected then
1526: LD_EXP 19
1530: IFFALSE 1544
// SaveCharacters ( no_selected , 11_others ) ;
1532: LD_EXP 19
1536: PPUSH
1537: LD_STRING 11_others
1539: PPUSH
1540: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1544: LD_ADDR_VAR 0 6
1548: PUSH
1549: LD_INT 3
1551: PUSH
1552: LD_INT 1
1554: PUSH
1555: LD_INT 1
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: PUSH
1567: LD_INT 2
1569: PUSH
1570: LD_INT 2
1572: PUSH
1573: LD_INT 1
1575: PUSH
1576: LD_INT 5
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: PUSH
1585: LD_INT 4
1587: PUSH
1588: LD_INT 1
1590: PUSH
1591: LD_INT 1
1593: PUSH
1594: LD_INT 5
1596: PUSH
1597: EMPTY
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 2
1605: PUSH
1606: LD_INT 1
1608: PUSH
1609: LD_INT 1
1611: PUSH
1612: LD_INT 7
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: LIST
1620: PUSH
1621: LD_INT 3
1623: PUSH
1624: LD_INT 2
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: LD_INT 7
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: ST_TO_ADDR
// for i in JMM ^ selected do
1646: LD_ADDR_VAR 0 2
1650: PUSH
1651: LD_EXP 21
1655: PUSH
1656: LD_EXP 20
1660: ADD
1661: PUSH
1662: FOR_IN
1663: IFFALSE 1852
// begin if GetClass ( i ) = 3 then
1665: LD_VAR 0 2
1669: PPUSH
1670: CALL_OW 257
1674: PUSH
1675: LD_INT 3
1677: EQUAL
1678: IFFALSE 1835
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1680: LD_ADDR_OWVAR 37
1684: PUSH
1685: LD_VAR 0 6
1689: PUSH
1690: LD_INT 1
1692: ARRAY
1693: PUSH
1694: LD_INT 1
1696: ARRAY
1697: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1698: LD_ADDR_OWVAR 39
1702: PUSH
1703: LD_VAR 0 6
1707: PUSH
1708: LD_INT 1
1710: ARRAY
1711: PUSH
1712: LD_INT 2
1714: ARRAY
1715: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1716: LD_ADDR_OWVAR 38
1720: PUSH
1721: LD_VAR 0 6
1725: PUSH
1726: LD_INT 1
1728: ARRAY
1729: PUSH
1730: LD_INT 3
1732: ARRAY
1733: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1734: LD_ADDR_OWVAR 40
1738: PUSH
1739: LD_VAR 0 6
1743: PUSH
1744: LD_INT 1
1746: ARRAY
1747: PUSH
1748: LD_INT 4
1750: ARRAY
1751: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: LD_VAR 0 6
1761: PPUSH
1762: LD_INT 1
1764: PPUSH
1765: CALL_OW 3
1769: ST_TO_ADDR
// veh := CreateVehicle ;
1770: LD_ADDR_VAR 0 7
1774: PUSH
1775: CALL_OW 45
1779: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1780: LD_VAR 0 7
1784: PPUSH
1785: LD_INT 8
1787: PPUSH
1788: LD_INT 0
1790: PPUSH
1791: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1795: LD_VAR 0 2
1799: PPUSH
1800: LD_VAR 0 7
1804: PPUSH
1805: CALL_OW 52
// if i = JMM then
1809: LD_VAR 0 2
1813: PUSH
1814: LD_EXP 21
1818: EQUAL
1819: IFFALSE 1833
// SetMark ( veh , 1 ) ;
1821: LD_VAR 0 7
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: CALL_OW 242
// end else
1833: GO 1850
// PlaceUnitArea ( i , am_hum_start , false ) ;
1835: LD_VAR 0 2
1839: PPUSH
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// end ;
1850: GO 1662
1852: POP
1853: POP
// vc_chassis := us_medium_tracked ;
1854: LD_ADDR_OWVAR 37
1858: PUSH
1859: LD_INT 3
1861: ST_TO_ADDR
// vc_engine := engine_solar ;
1862: LD_ADDR_OWVAR 39
1866: PUSH
1867: LD_INT 2
1869: ST_TO_ADDR
// vc_control := control_computer ;
1870: LD_ADDR_OWVAR 38
1874: PUSH
1875: LD_INT 3
1877: ST_TO_ADDR
// vc_weapon := us_radar ;
1878: LD_ADDR_OWVAR 40
1882: PUSH
1883: LD_INT 11
1885: ST_TO_ADDR
// veh := CreateVehicle ;
1886: LD_ADDR_VAR 0 7
1890: PUSH
1891: CALL_OW 45
1895: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1896: LD_VAR 0 7
1900: PPUSH
1901: LD_INT 87
1903: PPUSH
1904: LD_INT 142
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: CALL_OW 48
// end ; end_of_file
1914: LD_VAR 0 1
1918: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
// if exist_mode then
1923: LD_VAR 0 2
1927: IFFALSE 1952
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1929: LD_ADDR_VAR 0 4
1933: PUSH
1934: LD_EXP 4
1938: PUSH
1939: LD_VAR 0 1
1943: STR
1944: PPUSH
1945: CALL_OW 34
1949: ST_TO_ADDR
1950: GO 1967
// unit := NewCharacter ( ident ) ;
1952: LD_ADDR_VAR 0 4
1956: PUSH
1957: LD_VAR 0 1
1961: PPUSH
1962: CALL_OW 25
1966: ST_TO_ADDR
// result := unit ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: LD_VAR 0 4
1976: ST_TO_ADDR
// end ;
1977: LD_VAR 0 3
1981: RET
// export function _GetHexInfo ( x , y ) ; begin
1982: LD_INT 0
1984: PPUSH
// result := false ;
1985: LD_ADDR_VAR 0 3
1989: PUSH
1990: LD_INT 0
1992: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1993: LD_VAR 0 1
1997: PPUSH
1998: LD_VAR 0 2
2002: PPUSH
2003: CALL_OW 488
2007: NOT
2008: PUSH
2009: LD_VAR 0 1
2013: NOT
2014: OR
2015: PUSH
2016: LD_VAR 0 2
2020: NOT
2021: OR
2022: IFFALSE 2026
// exit ;
2024: GO 2046
// result := GetHexInfo ( x , y ) ;
2026: LD_ADDR_VAR 0 3
2030: PUSH
2031: LD_VAR 0 1
2035: PPUSH
2036: LD_VAR 0 2
2040: PPUSH
2041: CALL_OW 546
2045: ST_TO_ADDR
// end ;
2046: LD_VAR 0 3
2050: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2051: LD_INT 0
2053: PPUSH
// vc_chassis := chassis ;
2054: LD_ADDR_OWVAR 37
2058: PUSH
2059: LD_VAR 0 1
2063: ST_TO_ADDR
// vc_engine := engine ;
2064: LD_ADDR_OWVAR 39
2068: PUSH
2069: LD_VAR 0 2
2073: ST_TO_ADDR
// vc_control := control ;
2074: LD_ADDR_OWVAR 38
2078: PUSH
2079: LD_VAR 0 3
2083: ST_TO_ADDR
// vc_weapon := weapon ;
2084: LD_ADDR_OWVAR 40
2088: PUSH
2089: LD_VAR 0 4
2093: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2094: LD_ADDR_OWVAR 41
2098: PUSH
2099: LD_VAR 0 5
2103: ST_TO_ADDR
// end ;
2104: LD_VAR 0 6
2108: RET
// export function CanSayRand ( side ) ; begin
2109: LD_INT 0
2111: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2112: LD_ADDR_VAR 0 2
2116: PUSH
2117: LD_INT 52
2119: PUSH
2120: EMPTY
2121: LIST
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_VAR 0 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: LD_INT 2
2137: PUSH
2138: LD_INT 25
2140: PUSH
2141: LD_INT 1
2143: PUSH
2144: EMPTY
2145: LIST
2146: LIST
2147: PUSH
2148: LD_INT 25
2150: PUSH
2151: LD_INT 2
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 25
2160: PUSH
2161: LD_INT 3
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 25
2170: PUSH
2171: LD_INT 4
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: LIST
2189: PPUSH
2190: CALL_OW 69
2194: PUSH
2195: LD_EXP 21
2199: PUSH
2200: LD_EXP 33
2204: PUSH
2205: LD_EXP 22
2209: PUSH
2210: LD_EXP 23
2214: PUSH
2215: LD_EXP 24
2219: PUSH
2220: LD_EXP 25
2224: PUSH
2225: LD_EXP 26
2229: PUSH
2230: LD_EXP 27
2234: PUSH
2235: LD_EXP 28
2239: PUSH
2240: LD_EXP 29
2244: PUSH
2245: LD_EXP 30
2249: PUSH
2250: LD_EXP 31
2254: PUSH
2255: LD_EXP 32
2259: PUSH
2260: LD_EXP 34
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: LIST
2272: LIST
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: LIST
2280: DIFF
2281: ST_TO_ADDR
// end ;
2282: LD_VAR 0 2
2286: RET
// export function SayRand ( sex , dial ) ; begin
2287: LD_INT 0
2289: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2290: LD_ADDR_VAR 0 3
2294: PUSH
2295: LD_INT 52
2297: PUSH
2298: EMPTY
2299: LIST
2300: PUSH
2301: LD_INT 22
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 26
2313: PUSH
2314: LD_VAR 0 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 2
2325: PUSH
2326: LD_INT 25
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 25
2338: PUSH
2339: LD_INT 2
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 25
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: LD_INT 25
2358: PUSH
2359: LD_INT 4
2361: PUSH
2362: EMPTY
2363: LIST
2364: LIST
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PPUSH
2379: CALL_OW 69
2383: PUSH
2384: LD_EXP 21
2388: PUSH
2389: LD_EXP 33
2393: PUSH
2394: LD_EXP 22
2398: PUSH
2399: LD_EXP 23
2403: PUSH
2404: LD_EXP 24
2408: PUSH
2409: LD_EXP 25
2413: PUSH
2414: LD_EXP 26
2418: PUSH
2419: LD_EXP 27
2423: PUSH
2424: LD_EXP 28
2428: PUSH
2429: LD_EXP 29
2433: PUSH
2434: LD_EXP 30
2438: PUSH
2439: LD_EXP 31
2443: PUSH
2444: LD_EXP 32
2448: PUSH
2449: LD_EXP 34
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: LIST
2461: LIST
2462: LIST
2463: LIST
2464: LIST
2465: LIST
2466: LIST
2467: LIST
2468: LIST
2469: DIFF
2470: ST_TO_ADDR
// if not result then
2471: LD_VAR 0 3
2475: NOT
2476: IFFALSE 2480
// exit ;
2478: GO 2508
// result := result [ 1 ] ;
2480: LD_ADDR_VAR 0 3
2484: PUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: ST_TO_ADDR
// Say ( result , dial ) ;
2494: LD_VAR 0 3
2498: PPUSH
2499: LD_VAR 0 2
2503: PPUSH
2504: CALL_OW 88
// end ;
2508: LD_VAR 0 3
2512: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2513: LD_INT 0
2515: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2516: LD_ADDR_VAR 0 4
2520: PUSH
2521: LD_INT 22
2523: PUSH
2524: LD_INT 1
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: PUSH
2531: LD_INT 26
2533: PUSH
2534: LD_VAR 0 1
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: PUSH
2543: LD_INT 2
2545: PUSH
2546: LD_INT 25
2548: PUSH
2549: LD_INT 1
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 25
2558: PUSH
2559: LD_INT 2
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: PUSH
2566: LD_INT 25
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 25
2578: PUSH
2579: LD_INT 4
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: PPUSH
2598: CALL_OW 69
2602: PUSH
2603: LD_EXP 21
2607: PUSH
2608: LD_EXP 33
2612: PUSH
2613: LD_EXP 22
2617: PUSH
2618: LD_EXP 23
2622: PUSH
2623: LD_EXP 24
2627: PUSH
2628: LD_EXP 25
2632: PUSH
2633: LD_EXP 26
2637: PUSH
2638: LD_EXP 27
2642: PUSH
2643: LD_EXP 28
2647: PUSH
2648: LD_EXP 29
2652: PUSH
2653: LD_EXP 30
2657: PUSH
2658: LD_EXP 31
2662: PUSH
2663: LD_EXP 32
2667: PUSH
2668: LD_EXP 34
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: LD_VAR 0 3
2693: ADD
2694: DIFF
2695: ST_TO_ADDR
// if not result then
2696: LD_VAR 0 4
2700: NOT
2701: IFFALSE 2705
// exit ;
2703: GO 2733
// result := result [ 1 ] ;
2705: LD_ADDR_VAR 0 4
2709: PUSH
2710: LD_VAR 0 4
2714: PUSH
2715: LD_INT 1
2717: ARRAY
2718: ST_TO_ADDR
// Say ( result , dial ) ;
2719: LD_VAR 0 4
2723: PPUSH
2724: LD_VAR 0 2
2728: PPUSH
2729: CALL_OW 88
// end ;
2733: LD_VAR 0 4
2737: RET
// export function WantPlant ( unit ) ; var task ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
// result := false ;
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: LD_INT 0
2749: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2750: LD_ADDR_VAR 0 3
2754: PUSH
2755: LD_VAR 0 1
2759: PPUSH
2760: CALL_OW 437
2764: ST_TO_ADDR
// if task then
2765: LD_VAR 0 3
2769: IFFALSE 2797
// if task [ 1 ] [ 1 ] = p then
2771: LD_VAR 0 3
2775: PUSH
2776: LD_INT 1
2778: ARRAY
2779: PUSH
2780: LD_INT 1
2782: ARRAY
2783: PUSH
2784: LD_STRING p
2786: EQUAL
2787: IFFALSE 2797
// result := true ;
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// end ;
2797: LD_VAR 0 2
2801: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2802: LD_INT 0
2804: PPUSH
2805: PPUSH
2806: PPUSH
2807: PPUSH
// if pos < 1 then
2808: LD_VAR 0 2
2812: PUSH
2813: LD_INT 1
2815: LESS
2816: IFFALSE 2820
// exit ;
2818: GO 3123
// if pos = 1 then
2820: LD_VAR 0 2
2824: PUSH
2825: LD_INT 1
2827: EQUAL
2828: IFFALSE 2861
// result := Replace ( arr , pos [ 1 ] , value ) else
2830: LD_ADDR_VAR 0 4
2834: PUSH
2835: LD_VAR 0 1
2839: PPUSH
2840: LD_VAR 0 2
2844: PUSH
2845: LD_INT 1
2847: ARRAY
2848: PPUSH
2849: LD_VAR 0 3
2853: PPUSH
2854: CALL_OW 1
2858: ST_TO_ADDR
2859: GO 3123
// begin tmp := arr ;
2861: LD_ADDR_VAR 0 6
2865: PUSH
2866: LD_VAR 0 1
2870: ST_TO_ADDR
// s_arr := [ tmp ] ;
2871: LD_ADDR_VAR 0 7
2875: PUSH
2876: LD_VAR 0 6
2880: PUSH
2881: EMPTY
2882: LIST
2883: ST_TO_ADDR
// for i = 1 to pos - 1 do
2884: LD_ADDR_VAR 0 5
2888: PUSH
2889: DOUBLE
2890: LD_INT 1
2892: DEC
2893: ST_TO_ADDR
2894: LD_VAR 0 2
2898: PUSH
2899: LD_INT 1
2901: MINUS
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2949
// begin tmp := tmp [ pos [ i ] ] ;
2906: LD_ADDR_VAR 0 6
2910: PUSH
2911: LD_VAR 0 6
2915: PUSH
2916: LD_VAR 0 2
2920: PUSH
2921: LD_VAR 0 5
2925: ARRAY
2926: ARRAY
2927: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2928: LD_ADDR_VAR 0 7
2932: PUSH
2933: LD_VAR 0 7
2937: PUSH
2938: LD_VAR 0 6
2942: PUSH
2943: EMPTY
2944: LIST
2945: ADD
2946: ST_TO_ADDR
// end ;
2947: GO 2903
2949: POP
2950: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2951: LD_ADDR_VAR 0 6
2955: PUSH
2956: LD_VAR 0 6
2960: PPUSH
2961: LD_VAR 0 2
2965: PUSH
2966: LD_VAR 0 2
2970: ARRAY
2971: PPUSH
2972: LD_VAR 0 3
2976: PPUSH
2977: CALL_OW 1
2981: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 7
2991: PPUSH
2992: LD_VAR 0 7
2996: PPUSH
2997: LD_VAR 0 6
3001: PPUSH
3002: CALL_OW 1
3006: ST_TO_ADDR
// for i = s_arr downto 2 do
3007: LD_ADDR_VAR 0 5
3011: PUSH
3012: DOUBLE
3013: LD_VAR 0 7
3017: INC
3018: ST_TO_ADDR
3019: LD_INT 2
3021: PUSH
3022: FOR_DOWNTO
3023: IFFALSE 3107
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
3025: LD_ADDR_VAR 0 6
3029: PUSH
3030: LD_VAR 0 7
3034: PUSH
3035: LD_VAR 0 5
3039: PUSH
3040: LD_INT 1
3042: MINUS
3043: ARRAY
3044: PPUSH
3045: LD_VAR 0 2
3049: PUSH
3050: LD_VAR 0 5
3054: PUSH
3055: LD_INT 1
3057: MINUS
3058: ARRAY
3059: PPUSH
3060: LD_VAR 0 7
3064: PUSH
3065: LD_VAR 0 5
3069: ARRAY
3070: PPUSH
3071: CALL_OW 1
3075: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3076: LD_ADDR_VAR 0 7
3080: PUSH
3081: LD_VAR 0 7
3085: PPUSH
3086: LD_VAR 0 5
3090: PUSH
3091: LD_INT 1
3093: MINUS
3094: PPUSH
3095: LD_VAR 0 6
3099: PPUSH
3100: CALL_OW 1
3104: ST_TO_ADDR
// end ;
3105: GO 3022
3107: POP
3108: POP
// result := s_arr [ 1 ] ;
3109: LD_ADDR_VAR 0 4
3113: PUSH
3114: LD_VAR 0 7
3118: PUSH
3119: LD_INT 1
3121: ARRAY
3122: ST_TO_ADDR
// end ; end ;
3123: LD_VAR 0 4
3127: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3128: LD_INT 0
3130: PPUSH
3131: PPUSH
// if not list then
3132: LD_VAR 0 1
3136: NOT
3137: IFFALSE 3141
// exit ;
3139: GO 3232
// i := list [ pos1 ] ;
3141: LD_ADDR_VAR 0 5
3145: PUSH
3146: LD_VAR 0 1
3150: PUSH
3151: LD_VAR 0 2
3155: ARRAY
3156: ST_TO_ADDR
// if not i then
3157: LD_VAR 0 5
3161: NOT
3162: IFFALSE 3166
// exit ;
3164: GO 3232
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3166: LD_ADDR_VAR 0 1
3170: PUSH
3171: LD_VAR 0 1
3175: PPUSH
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_VAR 0 1
3185: PUSH
3186: LD_VAR 0 3
3190: ARRAY
3191: PPUSH
3192: CALL_OW 1
3196: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3197: LD_ADDR_VAR 0 1
3201: PUSH
3202: LD_VAR 0 1
3206: PPUSH
3207: LD_VAR 0 3
3211: PPUSH
3212: LD_VAR 0 5
3216: PPUSH
3217: CALL_OW 1
3221: ST_TO_ADDR
// result := list ;
3222: LD_ADDR_VAR 0 4
3226: PUSH
3227: LD_VAR 0 1
3231: ST_TO_ADDR
// end ;
3232: LD_VAR 0 4
3236: RET
// export function Add ( list , pos , val ) ; begin
3237: LD_INT 0
3239: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3240: LD_ADDR_VAR 0 4
3244: PUSH
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_VAR 0 2
3254: PPUSH
3255: LD_VAR 0 3
3259: PPUSH
3260: CALL 2802 0 3
3264: ST_TO_ADDR
3265: LD_VAR 0 4
3269: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3270: LD_INT 0
3272: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3273: LD_ADDR_VAR 0 5
3277: PUSH
3278: LD_VAR 0 1
3282: PPUSH
3283: CALL_OW 250
3287: PPUSH
3288: LD_VAR 0 1
3292: PPUSH
3293: CALL_OW 251
3297: PPUSH
3298: LD_VAR 0 2
3302: PPUSH
3303: LD_VAR 0 3
3307: PPUSH
3308: LD_VAR 0 4
3312: PPUSH
3313: CALL 3323 0 5
3317: ST_TO_ADDR
// end ;
3318: LD_VAR 0 5
3322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3323: LD_INT 0
3325: PPUSH
3326: PPUSH
3327: PPUSH
3328: PPUSH
// if not list then
3329: LD_VAR 0 3
3333: NOT
3334: IFFALSE 3338
// exit ;
3336: GO 3726
// result := [ ] ;
3338: LD_ADDR_VAR 0 6
3342: PUSH
3343: EMPTY
3344: ST_TO_ADDR
// for i in list do
3345: LD_ADDR_VAR 0 7
3349: PUSH
3350: LD_VAR 0 3
3354: PUSH
3355: FOR_IN
3356: IFFALSE 3558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3358: LD_ADDR_VAR 0 9
3362: PUSH
3363: LD_VAR 0 7
3367: PPUSH
3368: LD_VAR 0 1
3372: PPUSH
3373: LD_VAR 0 2
3377: PPUSH
3378: CALL_OW 297
3382: ST_TO_ADDR
// if not result then
3383: LD_VAR 0 6
3387: NOT
3388: IFFALSE 3414
// result := [ [ i , tmp ] ] else
3390: LD_ADDR_VAR 0 6
3394: PUSH
3395: LD_VAR 0 7
3399: PUSH
3400: LD_VAR 0 9
3404: PUSH
3405: EMPTY
3406: LIST
3407: LIST
3408: PUSH
3409: EMPTY
3410: LIST
3411: ST_TO_ADDR
3412: GO 3556
// begin if result [ result ] [ 2 ] < tmp then
3414: LD_VAR 0 6
3418: PUSH
3419: LD_VAR 0 6
3423: ARRAY
3424: PUSH
3425: LD_INT 2
3427: ARRAY
3428: PUSH
3429: LD_VAR 0 9
3433: LESS
3434: IFFALSE 3476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3436: LD_ADDR_VAR 0 6
3440: PUSH
3441: LD_VAR 0 6
3445: PPUSH
3446: LD_VAR 0 6
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: PPUSH
3455: LD_VAR 0 7
3459: PUSH
3460: LD_VAR 0 9
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: PPUSH
3469: CALL_OW 2
3473: ST_TO_ADDR
3474: GO 3556
// for j = 1 to result do
3476: LD_ADDR_VAR 0 8
3480: PUSH
3481: DOUBLE
3482: LD_INT 1
3484: DEC
3485: ST_TO_ADDR
3486: LD_VAR 0 6
3490: PUSH
3491: FOR_TO
3492: IFFALSE 3554
// begin if tmp < result [ j ] [ 2 ] then
3494: LD_VAR 0 9
3498: PUSH
3499: LD_VAR 0 6
3503: PUSH
3504: LD_VAR 0 8
3508: ARRAY
3509: PUSH
3510: LD_INT 2
3512: ARRAY
3513: LESS
3514: IFFALSE 3552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3516: LD_ADDR_VAR 0 6
3520: PUSH
3521: LD_VAR 0 6
3525: PPUSH
3526: LD_VAR 0 8
3530: PPUSH
3531: LD_VAR 0 7
3535: PUSH
3536: LD_VAR 0 9
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: PPUSH
3545: CALL_OW 2
3549: ST_TO_ADDR
// break ;
3550: GO 3554
// end ; end ;
3552: GO 3491
3554: POP
3555: POP
// end ; end ;
3556: GO 3355
3558: POP
3559: POP
// if result and not asc then
3560: LD_VAR 0 6
3564: PUSH
3565: LD_VAR 0 4
3569: NOT
3570: AND
3571: IFFALSE 3646
// begin tmp := result ;
3573: LD_ADDR_VAR 0 9
3577: PUSH
3578: LD_VAR 0 6
3582: ST_TO_ADDR
// for i = tmp downto 1 do
3583: LD_ADDR_VAR 0 7
3587: PUSH
3588: DOUBLE
3589: LD_VAR 0 9
3593: INC
3594: ST_TO_ADDR
3595: LD_INT 1
3597: PUSH
3598: FOR_DOWNTO
3599: IFFALSE 3644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3601: LD_ADDR_VAR 0 6
3605: PUSH
3606: LD_VAR 0 6
3610: PPUSH
3611: LD_VAR 0 9
3615: PUSH
3616: LD_VAR 0 7
3620: MINUS
3621: PUSH
3622: LD_INT 1
3624: PLUS
3625: PPUSH
3626: LD_VAR 0 9
3630: PUSH
3631: LD_VAR 0 7
3635: ARRAY
3636: PPUSH
3637: CALL_OW 1
3641: ST_TO_ADDR
3642: GO 3598
3644: POP
3645: POP
// end ; tmp := [ ] ;
3646: LD_ADDR_VAR 0 9
3650: PUSH
3651: EMPTY
3652: ST_TO_ADDR
// if mode then
3653: LD_VAR 0 5
3657: IFFALSE 3726
// begin for i = 1 to result do
3659: LD_ADDR_VAR 0 7
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_VAR 0 6
3673: PUSH
3674: FOR_TO
3675: IFFALSE 3714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3677: LD_ADDR_VAR 0 9
3681: PUSH
3682: LD_VAR 0 9
3686: PPUSH
3687: LD_VAR 0 7
3691: PPUSH
3692: LD_VAR 0 6
3696: PUSH
3697: LD_VAR 0 7
3701: ARRAY
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 1
3711: ST_TO_ADDR
3712: GO 3674
3714: POP
3715: POP
// result := tmp ;
3716: LD_ADDR_VAR 0 6
3720: PUSH
3721: LD_VAR 0 9
3725: ST_TO_ADDR
// end ; end ;
3726: LD_VAR 0 6
3730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3731: LD_INT 0
3733: PPUSH
3734: PPUSH
3735: PPUSH
3736: PPUSH
3737: PPUSH
3738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3739: LD_ADDR_VAR 0 5
3743: PUSH
3744: LD_INT 0
3746: PUSH
3747: LD_INT 0
3749: PUSH
3750: LD_INT 0
3752: PUSH
3753: EMPTY
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: ST_TO_ADDR
// if not x or not y then
3761: LD_VAR 0 2
3765: NOT
3766: PUSH
3767: LD_VAR 0 3
3771: NOT
3772: OR
3773: IFFALSE 3777
// exit ;
3775: GO 5423
// if not range then
3777: LD_VAR 0 4
3781: NOT
3782: IFFALSE 3792
// range := 10 ;
3784: LD_ADDR_VAR 0 4
3788: PUSH
3789: LD_INT 10
3791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3792: LD_ADDR_VAR 0 8
3796: PUSH
3797: LD_INT 81
3799: PUSH
3800: LD_VAR 0 1
3804: PUSH
3805: EMPTY
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 92
3811: PUSH
3812: LD_VAR 0 2
3816: PUSH
3817: LD_VAR 0 3
3821: PUSH
3822: LD_VAR 0 4
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 3
3835: PUSH
3836: LD_INT 21
3838: PUSH
3839: LD_INT 3
3841: PUSH
3842: EMPTY
3843: LIST
3844: LIST
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: EMPTY
3851: LIST
3852: LIST
3853: LIST
3854: PPUSH
3855: CALL_OW 69
3859: ST_TO_ADDR
// if not tmp then
3860: LD_VAR 0 8
3864: NOT
3865: IFFALSE 3869
// exit ;
3867: GO 5423
// for i in tmp do
3869: LD_ADDR_VAR 0 6
3873: PUSH
3874: LD_VAR 0 8
3878: PUSH
3879: FOR_IN
3880: IFFALSE 5398
// begin points := [ 0 , 0 , 0 ] ;
3882: LD_ADDR_VAR 0 9
3886: PUSH
3887: LD_INT 0
3889: PUSH
3890: LD_INT 0
3892: PUSH
3893: LD_INT 0
3895: PUSH
3896: EMPTY
3897: LIST
3898: LIST
3899: LIST
3900: ST_TO_ADDR
// bpoints := 1 ;
3901: LD_ADDR_VAR 0 10
3905: PUSH
3906: LD_INT 1
3908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3909: LD_VAR 0 6
3913: PPUSH
3914: CALL_OW 247
3918: PUSH
3919: LD_INT 1
3921: DOUBLE
3922: EQUAL
3923: IFTRUE 3927
3925: GO 4505
3927: POP
// begin if GetClass ( i ) = 1 then
3928: LD_VAR 0 6
3932: PPUSH
3933: CALL_OW 257
3937: PUSH
3938: LD_INT 1
3940: EQUAL
3941: IFFALSE 3962
// points := [ 10 , 5 , 3 ] ;
3943: LD_ADDR_VAR 0 9
3947: PUSH
3948: LD_INT 10
3950: PUSH
3951: LD_INT 5
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: LIST
3961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3962: LD_VAR 0 6
3966: PPUSH
3967: CALL_OW 257
3971: PUSH
3972: LD_INT 2
3974: PUSH
3975: LD_INT 3
3977: PUSH
3978: LD_INT 4
3980: PUSH
3981: EMPTY
3982: LIST
3983: LIST
3984: LIST
3985: IN
3986: IFFALSE 4007
// points := [ 3 , 2 , 1 ] ;
3988: LD_ADDR_VAR 0 9
3992: PUSH
3993: LD_INT 3
3995: PUSH
3996: LD_INT 2
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
4007: LD_VAR 0 6
4011: PPUSH
4012: CALL_OW 257
4016: PUSH
4017: LD_INT 5
4019: EQUAL
4020: IFFALSE 4041
// points := [ 130 , 5 , 2 ] ;
4022: LD_ADDR_VAR 0 9
4026: PUSH
4027: LD_INT 130
4029: PUSH
4030: LD_INT 5
4032: PUSH
4033: LD_INT 2
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
4041: LD_VAR 0 6
4045: PPUSH
4046: CALL_OW 257
4050: PUSH
4051: LD_INT 8
4053: EQUAL
4054: IFFALSE 4075
// points := [ 35 , 35 , 30 ] ;
4056: LD_ADDR_VAR 0 9
4060: PUSH
4061: LD_INT 35
4063: PUSH
4064: LD_INT 35
4066: PUSH
4067: LD_INT 30
4069: PUSH
4070: EMPTY
4071: LIST
4072: LIST
4073: LIST
4074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4075: LD_VAR 0 6
4079: PPUSH
4080: CALL_OW 257
4084: PUSH
4085: LD_INT 9
4087: EQUAL
4088: IFFALSE 4109
// points := [ 20 , 55 , 40 ] ;
4090: LD_ADDR_VAR 0 9
4094: PUSH
4095: LD_INT 20
4097: PUSH
4098: LD_INT 55
4100: PUSH
4101: LD_INT 40
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4109: LD_VAR 0 6
4113: PPUSH
4114: CALL_OW 257
4118: PUSH
4119: LD_INT 12
4121: PUSH
4122: LD_INT 16
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: IN
4129: IFFALSE 4150
// points := [ 5 , 3 , 2 ] ;
4131: LD_ADDR_VAR 0 9
4135: PUSH
4136: LD_INT 5
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: LD_INT 2
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4150: LD_VAR 0 6
4154: PPUSH
4155: CALL_OW 257
4159: PUSH
4160: LD_INT 17
4162: EQUAL
4163: IFFALSE 4184
// points := [ 100 , 50 , 75 ] ;
4165: LD_ADDR_VAR 0 9
4169: PUSH
4170: LD_INT 100
4172: PUSH
4173: LD_INT 50
4175: PUSH
4176: LD_INT 75
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: LIST
4183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4184: LD_VAR 0 6
4188: PPUSH
4189: CALL_OW 257
4193: PUSH
4194: LD_INT 15
4196: EQUAL
4197: IFFALSE 4218
// points := [ 10 , 5 , 3 ] ;
4199: LD_ADDR_VAR 0 9
4203: PUSH
4204: LD_INT 10
4206: PUSH
4207: LD_INT 5
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4218: LD_VAR 0 6
4222: PPUSH
4223: CALL_OW 257
4227: PUSH
4228: LD_INT 14
4230: EQUAL
4231: IFFALSE 4252
// points := [ 10 , 0 , 0 ] ;
4233: LD_ADDR_VAR 0 9
4237: PUSH
4238: LD_INT 10
4240: PUSH
4241: LD_INT 0
4243: PUSH
4244: LD_INT 0
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4252: LD_VAR 0 6
4256: PPUSH
4257: CALL_OW 257
4261: PUSH
4262: LD_INT 11
4264: EQUAL
4265: IFFALSE 4286
// points := [ 30 , 10 , 5 ] ;
4267: LD_ADDR_VAR 0 9
4271: PUSH
4272: LD_INT 30
4274: PUSH
4275: LD_INT 10
4277: PUSH
4278: LD_INT 5
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: LIST
4285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4286: LD_VAR 0 1
4290: PPUSH
4291: LD_INT 5
4293: PPUSH
4294: CALL_OW 321
4298: PUSH
4299: LD_INT 2
4301: EQUAL
4302: IFFALSE 4319
// bpoints := bpoints * 1.8 ;
4304: LD_ADDR_VAR 0 10
4308: PUSH
4309: LD_VAR 0 10
4313: PUSH
4314: LD_REAL  1.80000000000000E+0000
4317: MUL
4318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4319: LD_VAR 0 6
4323: PPUSH
4324: CALL_OW 257
4328: PUSH
4329: LD_INT 1
4331: PUSH
4332: LD_INT 2
4334: PUSH
4335: LD_INT 3
4337: PUSH
4338: LD_INT 4
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: IN
4347: PUSH
4348: LD_VAR 0 1
4352: PPUSH
4353: LD_INT 51
4355: PPUSH
4356: CALL_OW 321
4360: PUSH
4361: LD_INT 2
4363: EQUAL
4364: AND
4365: IFFALSE 4382
// bpoints := bpoints * 1.2 ;
4367: LD_ADDR_VAR 0 10
4371: PUSH
4372: LD_VAR 0 10
4376: PUSH
4377: LD_REAL  1.20000000000000E+0000
4380: MUL
4381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4382: LD_VAR 0 6
4386: PPUSH
4387: CALL_OW 257
4391: PUSH
4392: LD_INT 5
4394: PUSH
4395: LD_INT 7
4397: PUSH
4398: LD_INT 9
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: IN
4406: PUSH
4407: LD_VAR 0 1
4411: PPUSH
4412: LD_INT 52
4414: PPUSH
4415: CALL_OW 321
4419: PUSH
4420: LD_INT 2
4422: EQUAL
4423: AND
4424: IFFALSE 4441
// bpoints := bpoints * 1.5 ;
4426: LD_ADDR_VAR 0 10
4430: PUSH
4431: LD_VAR 0 10
4435: PUSH
4436: LD_REAL  1.50000000000000E+0000
4439: MUL
4440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 66
4448: PPUSH
4449: CALL_OW 321
4453: PUSH
4454: LD_INT 2
4456: EQUAL
4457: IFFALSE 4474
// bpoints := bpoints * 1.1 ;
4459: LD_ADDR_VAR 0 10
4463: PUSH
4464: LD_VAR 0 10
4468: PUSH
4469: LD_REAL  1.10000000000000E+0000
4472: MUL
4473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4474: LD_ADDR_VAR 0 10
4478: PUSH
4479: LD_VAR 0 10
4483: PUSH
4484: LD_VAR 0 6
4488: PPUSH
4489: LD_INT 1
4491: PPUSH
4492: CALL_OW 259
4496: PUSH
4497: LD_REAL  1.15000000000000E+0000
4500: MUL
4501: MUL
4502: ST_TO_ADDR
// end ; unit_vehicle :
4503: GO 5327
4505: LD_INT 2
4507: DOUBLE
4508: EQUAL
4509: IFTRUE 4513
4511: GO 5315
4513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4514: LD_VAR 0 6
4518: PPUSH
4519: CALL_OW 264
4523: PUSH
4524: LD_INT 2
4526: PUSH
4527: LD_INT 42
4529: PUSH
4530: LD_INT 24
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: LIST
4537: IN
4538: IFFALSE 4559
// points := [ 25 , 5 , 3 ] ;
4540: LD_ADDR_VAR 0 9
4544: PUSH
4545: LD_INT 25
4547: PUSH
4548: LD_INT 5
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: LIST
4558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4559: LD_VAR 0 6
4563: PPUSH
4564: CALL_OW 264
4568: PUSH
4569: LD_INT 4
4571: PUSH
4572: LD_INT 43
4574: PUSH
4575: LD_INT 25
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: IN
4583: IFFALSE 4604
// points := [ 40 , 15 , 5 ] ;
4585: LD_ADDR_VAR 0 9
4589: PUSH
4590: LD_INT 40
4592: PUSH
4593: LD_INT 15
4595: PUSH
4596: LD_INT 5
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4604: LD_VAR 0 6
4608: PPUSH
4609: CALL_OW 264
4613: PUSH
4614: LD_INT 3
4616: PUSH
4617: LD_INT 23
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: IN
4624: IFFALSE 4645
// points := [ 7 , 25 , 8 ] ;
4626: LD_ADDR_VAR 0 9
4630: PUSH
4631: LD_INT 7
4633: PUSH
4634: LD_INT 25
4636: PUSH
4637: LD_INT 8
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4645: LD_VAR 0 6
4649: PPUSH
4650: CALL_OW 264
4654: PUSH
4655: LD_INT 5
4657: PUSH
4658: LD_INT 27
4660: PUSH
4661: LD_INT 44
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: IN
4669: IFFALSE 4690
// points := [ 14 , 50 , 16 ] ;
4671: LD_ADDR_VAR 0 9
4675: PUSH
4676: LD_INT 14
4678: PUSH
4679: LD_INT 50
4681: PUSH
4682: LD_INT 16
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4690: LD_VAR 0 6
4694: PPUSH
4695: CALL_OW 264
4699: PUSH
4700: LD_INT 6
4702: PUSH
4703: LD_INT 46
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: IN
4710: IFFALSE 4731
// points := [ 32 , 120 , 70 ] ;
4712: LD_ADDR_VAR 0 9
4716: PUSH
4717: LD_INT 32
4719: PUSH
4720: LD_INT 120
4722: PUSH
4723: LD_INT 70
4725: PUSH
4726: EMPTY
4727: LIST
4728: LIST
4729: LIST
4730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4731: LD_VAR 0 6
4735: PPUSH
4736: CALL_OW 264
4740: PUSH
4741: LD_INT 7
4743: PUSH
4744: LD_INT 28
4746: PUSH
4747: LD_INT 45
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: IN
4755: IFFALSE 4776
// points := [ 35 , 20 , 45 ] ;
4757: LD_ADDR_VAR 0 9
4761: PUSH
4762: LD_INT 35
4764: PUSH
4765: LD_INT 20
4767: PUSH
4768: LD_INT 45
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4776: LD_VAR 0 6
4780: PPUSH
4781: CALL_OW 264
4785: PUSH
4786: LD_INT 47
4788: PUSH
4789: EMPTY
4790: LIST
4791: IN
4792: IFFALSE 4813
// points := [ 67 , 45 , 75 ] ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 67
4801: PUSH
4802: LD_INT 45
4804: PUSH
4805: LD_INT 75
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: LIST
4812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4813: LD_VAR 0 6
4817: PPUSH
4818: CALL_OW 264
4822: PUSH
4823: LD_INT 26
4825: PUSH
4826: EMPTY
4827: LIST
4828: IN
4829: IFFALSE 4850
// points := [ 120 , 30 , 80 ] ;
4831: LD_ADDR_VAR 0 9
4835: PUSH
4836: LD_INT 120
4838: PUSH
4839: LD_INT 30
4841: PUSH
4842: LD_INT 80
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: LIST
4849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4850: LD_VAR 0 6
4854: PPUSH
4855: CALL_OW 264
4859: PUSH
4860: LD_INT 22
4862: PUSH
4863: EMPTY
4864: LIST
4865: IN
4866: IFFALSE 4887
// points := [ 40 , 1 , 1 ] ;
4868: LD_ADDR_VAR 0 9
4872: PUSH
4873: LD_INT 40
4875: PUSH
4876: LD_INT 1
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4887: LD_VAR 0 6
4891: PPUSH
4892: CALL_OW 264
4896: PUSH
4897: LD_INT 29
4899: PUSH
4900: EMPTY
4901: LIST
4902: IN
4903: IFFALSE 4924
// points := [ 70 , 200 , 400 ] ;
4905: LD_ADDR_VAR 0 9
4909: PUSH
4910: LD_INT 70
4912: PUSH
4913: LD_INT 200
4915: PUSH
4916: LD_INT 400
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4924: LD_VAR 0 6
4928: PPUSH
4929: CALL_OW 264
4933: PUSH
4934: LD_INT 14
4936: PUSH
4937: LD_INT 53
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: IN
4944: IFFALSE 4965
// points := [ 40 , 10 , 20 ] ;
4946: LD_ADDR_VAR 0 9
4950: PUSH
4951: LD_INT 40
4953: PUSH
4954: LD_INT 10
4956: PUSH
4957: LD_INT 20
4959: PUSH
4960: EMPTY
4961: LIST
4962: LIST
4963: LIST
4964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4965: LD_VAR 0 6
4969: PPUSH
4970: CALL_OW 264
4974: PUSH
4975: LD_INT 9
4977: PUSH
4978: EMPTY
4979: LIST
4980: IN
4981: IFFALSE 5002
// points := [ 5 , 70 , 20 ] ;
4983: LD_ADDR_VAR 0 9
4987: PUSH
4988: LD_INT 5
4990: PUSH
4991: LD_INT 70
4993: PUSH
4994: LD_INT 20
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
5002: LD_VAR 0 6
5006: PPUSH
5007: CALL_OW 264
5011: PUSH
5012: LD_INT 10
5014: PUSH
5015: EMPTY
5016: LIST
5017: IN
5018: IFFALSE 5039
// points := [ 35 , 110 , 70 ] ;
5020: LD_ADDR_VAR 0 9
5024: PUSH
5025: LD_INT 35
5027: PUSH
5028: LD_INT 110
5030: PUSH
5031: LD_INT 70
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
5039: LD_VAR 0 6
5043: PPUSH
5044: CALL_OW 265
5048: PUSH
5049: LD_INT 25
5051: EQUAL
5052: IFFALSE 5073
// points := [ 80 , 65 , 100 ] ;
5054: LD_ADDR_VAR 0 9
5058: PUSH
5059: LD_INT 80
5061: PUSH
5062: LD_INT 65
5064: PUSH
5065: LD_INT 100
5067: PUSH
5068: EMPTY
5069: LIST
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5073: LD_VAR 0 6
5077: PPUSH
5078: CALL_OW 263
5082: PUSH
5083: LD_INT 1
5085: EQUAL
5086: IFFALSE 5121
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5088: LD_ADDR_VAR 0 10
5092: PUSH
5093: LD_VAR 0 10
5097: PUSH
5098: LD_VAR 0 6
5102: PPUSH
5103: CALL_OW 311
5107: PPUSH
5108: LD_INT 3
5110: PPUSH
5111: CALL_OW 259
5115: PUSH
5116: LD_INT 4
5118: MUL
5119: MUL
5120: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5121: LD_VAR 0 6
5125: PPUSH
5126: CALL_OW 263
5130: PUSH
5131: LD_INT 2
5133: EQUAL
5134: IFFALSE 5185
// begin j := IsControledBy ( i ) ;
5136: LD_ADDR_VAR 0 7
5140: PUSH
5141: LD_VAR 0 6
5145: PPUSH
5146: CALL_OW 312
5150: ST_TO_ADDR
// if j then
5151: LD_VAR 0 7
5155: IFFALSE 5185
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5157: LD_ADDR_VAR 0 10
5161: PUSH
5162: LD_VAR 0 10
5166: PUSH
5167: LD_VAR 0 7
5171: PPUSH
5172: LD_INT 3
5174: PPUSH
5175: CALL_OW 259
5179: PUSH
5180: LD_INT 3
5182: MUL
5183: MUL
5184: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5185: LD_VAR 0 6
5189: PPUSH
5190: CALL_OW 264
5194: PUSH
5195: LD_INT 5
5197: PUSH
5198: LD_INT 6
5200: PUSH
5201: LD_INT 46
5203: PUSH
5204: LD_INT 44
5206: PUSH
5207: LD_INT 47
5209: PUSH
5210: LD_INT 45
5212: PUSH
5213: LD_INT 28
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: LD_INT 27
5221: PUSH
5222: LD_INT 29
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: IN
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: LD_INT 52
5245: PPUSH
5246: CALL_OW 321
5250: PUSH
5251: LD_INT 2
5253: EQUAL
5254: AND
5255: IFFALSE 5272
// bpoints := bpoints * 1.2 ;
5257: LD_ADDR_VAR 0 10
5261: PUSH
5262: LD_VAR 0 10
5266: PUSH
5267: LD_REAL  1.20000000000000E+0000
5270: MUL
5271: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5272: LD_VAR 0 6
5276: PPUSH
5277: CALL_OW 264
5281: PUSH
5282: LD_INT 6
5284: PUSH
5285: LD_INT 46
5287: PUSH
5288: LD_INT 47
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: LIST
5295: IN
5296: IFFALSE 5313
// bpoints := bpoints * 1.2 ;
5298: LD_ADDR_VAR 0 10
5302: PUSH
5303: LD_VAR 0 10
5307: PUSH
5308: LD_REAL  1.20000000000000E+0000
5311: MUL
5312: ST_TO_ADDR
// end ; unit_building :
5313: GO 5327
5315: LD_INT 3
5317: DOUBLE
5318: EQUAL
5319: IFTRUE 5323
5321: GO 5326
5323: POP
// ; end ;
5324: GO 5327
5326: POP
// for j = 1 to 3 do
5327: LD_ADDR_VAR 0 7
5331: PUSH
5332: DOUBLE
5333: LD_INT 1
5335: DEC
5336: ST_TO_ADDR
5337: LD_INT 3
5339: PUSH
5340: FOR_TO
5341: IFFALSE 5394
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5343: LD_ADDR_VAR 0 5
5347: PUSH
5348: LD_VAR 0 5
5352: PPUSH
5353: LD_VAR 0 7
5357: PPUSH
5358: LD_VAR 0 5
5362: PUSH
5363: LD_VAR 0 7
5367: ARRAY
5368: PUSH
5369: LD_VAR 0 9
5373: PUSH
5374: LD_VAR 0 7
5378: ARRAY
5379: PUSH
5380: LD_VAR 0 10
5384: MUL
5385: PLUS
5386: PPUSH
5387: CALL_OW 1
5391: ST_TO_ADDR
5392: GO 5340
5394: POP
5395: POP
// end ;
5396: GO 3879
5398: POP
5399: POP
// result := Replace ( result , 4 , tmp ) ;
5400: LD_ADDR_VAR 0 5
5404: PUSH
5405: LD_VAR 0 5
5409: PPUSH
5410: LD_INT 4
5412: PPUSH
5413: LD_VAR 0 8
5417: PPUSH
5418: CALL_OW 1
5422: ST_TO_ADDR
// end ;
5423: LD_VAR 0 5
5427: RET
// export function DangerAtRange ( unit , range ) ; begin
5428: LD_INT 0
5430: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5431: LD_ADDR_VAR 0 3
5435: PUSH
5436: LD_VAR 0 1
5440: PPUSH
5441: CALL_OW 255
5445: PPUSH
5446: LD_VAR 0 1
5450: PPUSH
5451: CALL_OW 250
5455: PPUSH
5456: LD_VAR 0 1
5460: PPUSH
5461: CALL_OW 251
5465: PPUSH
5466: LD_VAR 0 2
5470: PPUSH
5471: CALL 3731 0 4
5475: ST_TO_ADDR
// end ;
5476: LD_VAR 0 3
5480: RET
// export function IsExtension ( b ) ; begin
5481: LD_INT 0
5483: PPUSH
// result := false ;
5484: LD_ADDR_VAR 0 2
5488: PUSH
5489: LD_INT 0
5491: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5492: LD_VAR 0 1
5496: PPUSH
5497: CALL_OW 266
5501: PUSH
5502: LD_INT 23
5504: PUSH
5505: LD_INT 20
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 17
5513: PUSH
5514: LD_INT 24
5516: PUSH
5517: LD_INT 21
5519: PUSH
5520: LD_INT 19
5522: PUSH
5523: LD_INT 16
5525: PUSH
5526: LD_INT 25
5528: PUSH
5529: LD_INT 18
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: IN
5544: IFFALSE 5554
// result := true ;
5546: LD_ADDR_VAR 0 2
5550: PUSH
5551: LD_INT 1
5553: ST_TO_ADDR
// end ;
5554: LD_VAR 0 2
5558: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5559: LD_INT 0
5561: PPUSH
5562: PPUSH
5563: PPUSH
// result := [ ] ;
5564: LD_ADDR_VAR 0 2
5568: PUSH
5569: EMPTY
5570: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 69
5590: ST_TO_ADDR
// if not tmp then
5591: LD_VAR 0 3
5595: NOT
5596: IFFALSE 5600
// exit ;
5598: GO 5650
// for i in tmp do
5600: LD_ADDR_VAR 0 4
5604: PUSH
5605: LD_VAR 0 3
5609: PUSH
5610: FOR_IN
5611: IFFALSE 5648
// if GetBase ( i ) = base then
5613: LD_VAR 0 4
5617: PPUSH
5618: CALL_OW 274
5622: PUSH
5623: LD_VAR 0 1
5627: EQUAL
5628: IFFALSE 5646
// result := result ^ i ;
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: LD_VAR 0 2
5639: PUSH
5640: LD_VAR 0 4
5644: ADD
5645: ST_TO_ADDR
5646: GO 5610
5648: POP
5649: POP
// end ;
5650: LD_VAR 0 2
5654: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5655: LD_INT 0
5657: PPUSH
5658: PPUSH
// if BuildingStatus ( b ) = bs_build then
5659: LD_VAR 0 2
5663: PPUSH
5664: CALL_OW 461
5668: PUSH
5669: LD_INT 1
5671: EQUAL
5672: IFFALSE 5732
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5674: LD_VAR 0 1
5678: PPUSH
5679: LD_STRING h
5681: PUSH
5682: LD_VAR 0 2
5686: PPUSH
5687: CALL_OW 250
5691: PUSH
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 251
5701: PUSH
5702: LD_VAR 0 2
5706: PUSH
5707: LD_INT 0
5709: PUSH
5710: LD_INT 0
5712: PUSH
5713: LD_INT 0
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: PPUSH
5728: CALL_OW 446
// end ;
5732: LD_VAR 0 3
5736: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5737: LD_INT 0
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5744: LD_VAR 0 1
5748: NOT
5749: PUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL_OW 263
5759: PUSH
5760: LD_INT 2
5762: EQUAL
5763: NOT
5764: OR
5765: IFFALSE 5769
// exit ;
5767: GO 6041
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5769: LD_ADDR_VAR 0 6
5773: PUSH
5774: LD_INT 22
5776: PUSH
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 255
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 2
5793: PUSH
5794: LD_INT 30
5796: PUSH
5797: LD_INT 36
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: PUSH
5804: LD_INT 34
5806: PUSH
5807: LD_INT 31
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PPUSH
5823: CALL_OW 69
5827: ST_TO_ADDR
// if not tmp then
5828: LD_VAR 0 6
5832: NOT
5833: IFFALSE 5837
// exit ;
5835: GO 6041
// result := [ ] ;
5837: LD_ADDR_VAR 0 2
5841: PUSH
5842: EMPTY
5843: ST_TO_ADDR
// for i in tmp do
5844: LD_ADDR_VAR 0 3
5848: PUSH
5849: LD_VAR 0 6
5853: PUSH
5854: FOR_IN
5855: IFFALSE 5903
// begin t := UnitsInside ( i ) ;
5857: LD_ADDR_VAR 0 4
5861: PUSH
5862: LD_VAR 0 3
5866: PPUSH
5867: CALL_OW 313
5871: ST_TO_ADDR
// if t then
5872: LD_VAR 0 4
5876: IFFALSE 5901
// result := Insert ( result , 1 , t ) ;
5878: LD_ADDR_VAR 0 2
5882: PUSH
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 1
5890: PPUSH
5891: LD_VAR 0 4
5895: PPUSH
5896: CALL_OW 2
5900: ST_TO_ADDR
// end ;
5901: GO 5854
5903: POP
5904: POP
// if not result then
5905: LD_VAR 0 2
5909: NOT
5910: IFFALSE 5914
// exit ;
5912: GO 6041
// mech := 0 ;
5914: LD_ADDR_VAR 0 5
5918: PUSH
5919: LD_INT 0
5921: ST_TO_ADDR
// for i in result do
5922: LD_ADDR_VAR 0 3
5926: PUSH
5927: LD_VAR 0 2
5931: PUSH
5932: FOR_IN
5933: IFFALSE 6015
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5935: LD_ADDR_VAR 0 4
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: LD_INT 3
5947: PPUSH
5948: CALL_OW 259
5952: PUSH
5953: LD_VAR 0 3
5957: PPUSH
5958: CALL_OW 432
5962: MINUS
5963: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5964: LD_VAR 0 4
5968: PUSH
5969: LD_VAR 0 5
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: LD_INT 3
5980: PPUSH
5981: CALL_OW 259
5985: PUSH
5986: LD_VAR 0 5
5990: PUSH
5991: LD_INT 1
5993: ARRAY
5994: PPUSH
5995: CALL_OW 432
5999: MINUS
6000: GREATEREQUAL
6001: IFFALSE 6013
// mech := i ;
6003: LD_ADDR_VAR 0 5
6007: PUSH
6008: LD_VAR 0 3
6012: ST_TO_ADDR
// end ;
6013: GO 5932
6015: POP
6016: POP
// if mech then
6017: LD_VAR 0 5
6021: IFFALSE 6041
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
6023: LD_VAR 0 1
6027: PPUSH
6028: LD_VAR 0 5
6032: PUSH
6033: LD_INT 1
6035: ARRAY
6036: PPUSH
6037: CALL_OW 135
// end ;
6041: LD_VAR 0 2
6045: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
6046: LD_INT 0
6048: PPUSH
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
6053: PPUSH
6054: PPUSH
6055: PPUSH
6056: PPUSH
6057: PPUSH
6058: PPUSH
6059: PPUSH
// result := [ ] ;
6060: LD_ADDR_VAR 0 6
6064: PUSH
6065: EMPTY
6066: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 266
6076: PUSH
6077: LD_INT 0
6079: PUSH
6080: LD_INT 1
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: IN
6087: NOT
6088: IFFALSE 6092
// exit ;
6090: GO 7385
// if name then
6092: LD_VAR 0 2
6096: IFFALSE 6112
// SetBName ( base_dep , name ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: LD_VAR 0 2
6107: PPUSH
6108: CALL_OW 500
// base := GetBase ( base_dep ) ;
6112: LD_ADDR_VAR 0 14
6116: PUSH
6117: LD_VAR 0 1
6121: PPUSH
6122: CALL_OW 274
6126: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6127: LD_ADDR_VAR 0 15
6131: PUSH
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 255
6141: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6142: LD_ADDR_VAR 0 16
6146: PUSH
6147: LD_VAR 0 1
6151: PPUSH
6152: CALL_OW 248
6156: ST_TO_ADDR
// if sources then
6157: LD_VAR 0 4
6161: IFFALSE 6208
// for i = 1 to 3 do
6163: LD_ADDR_VAR 0 7
6167: PUSH
6168: DOUBLE
6169: LD_INT 1
6171: DEC
6172: ST_TO_ADDR
6173: LD_INT 3
6175: PUSH
6176: FOR_TO
6177: IFFALSE 6206
// AddResourceType ( base , i , sources [ i ] ) ;
6179: LD_VAR 0 14
6183: PPUSH
6184: LD_VAR 0 7
6188: PPUSH
6189: LD_VAR 0 4
6193: PUSH
6194: LD_VAR 0 7
6198: ARRAY
6199: PPUSH
6200: CALL_OW 276
6204: GO 6176
6206: POP
6207: POP
// buildings := GetBaseBuildings ( base ) ;
6208: LD_ADDR_VAR 0 17
6212: PUSH
6213: LD_VAR 0 14
6217: PPUSH
6218: CALL 5559 0 1
6222: ST_TO_ADDR
// InitHc ;
6223: CALL_OW 19
// InitUc ;
6227: CALL_OW 18
// uc_side := side ;
6231: LD_ADDR_OWVAR 20
6235: PUSH
6236: LD_VAR 0 15
6240: ST_TO_ADDR
// uc_nation := nation ;
6241: LD_ADDR_OWVAR 21
6245: PUSH
6246: LD_VAR 0 16
6250: ST_TO_ADDR
// if buildings then
6251: LD_VAR 0 17
6255: IFFALSE 7244
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6257: LD_VAR 0 17
6261: PPUSH
6262: LD_INT 2
6264: PUSH
6265: LD_INT 30
6267: PUSH
6268: LD_INT 32
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 30
6277: PUSH
6278: LD_INT 33
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 72
6294: IFFALSE 6377
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6296: LD_ADDR_VAR 0 7
6300: PUSH
6301: LD_VAR 0 17
6305: PPUSH
6306: LD_INT 2
6308: PUSH
6309: LD_INT 30
6311: PUSH
6312: LD_INT 32
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 30
6321: PUSH
6322: LD_INT 33
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: EMPTY
6330: LIST
6331: LIST
6332: LIST
6333: PPUSH
6334: CALL_OW 72
6338: PUSH
6339: FOR_IN
6340: IFFALSE 6375
// begin if not GetBWeapon ( i ) then
6342: LD_VAR 0 7
6346: PPUSH
6347: CALL_OW 269
6351: NOT
6352: IFFALSE 6373
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6354: LD_VAR 0 7
6358: PPUSH
6359: LD_VAR 0 7
6363: PPUSH
6364: CALL 7390 0 1
6368: PPUSH
6369: CALL_OW 431
// end ;
6373: GO 6339
6375: POP
6376: POP
// end ; for i = 1 to personel do
6377: LD_ADDR_VAR 0 7
6381: PUSH
6382: DOUBLE
6383: LD_INT 1
6385: DEC
6386: ST_TO_ADDR
6387: LD_VAR 0 5
6391: PUSH
6392: FOR_TO
6393: IFFALSE 7224
// begin if i > 4 then
6395: LD_VAR 0 7
6399: PUSH
6400: LD_INT 4
6402: GREATER
6403: IFFALSE 6407
// break ;
6405: GO 7224
// case i of 1 :
6407: LD_VAR 0 7
6411: PUSH
6412: LD_INT 1
6414: DOUBLE
6415: EQUAL
6416: IFTRUE 6420
6418: GO 6493
6420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6421: LD_ADDR_VAR 0 11
6425: PUSH
6426: LD_VAR 0 17
6430: PPUSH
6431: LD_INT 22
6433: PUSH
6434: LD_VAR 0 15
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: PUSH
6443: LD_INT 2
6445: PUSH
6446: LD_INT 30
6448: PUSH
6449: LD_INT 32
6451: PUSH
6452: EMPTY
6453: LIST
6454: LIST
6455: PUSH
6456: LD_INT 30
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: LD_INT 30
6468: PUSH
6469: LD_INT 5
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PPUSH
6486: CALL_OW 72
6490: ST_TO_ADDR
6491: GO 6715
6493: LD_INT 2
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6563
6501: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6502: LD_ADDR_VAR 0 11
6506: PUSH
6507: LD_VAR 0 17
6511: PPUSH
6512: LD_INT 22
6514: PUSH
6515: LD_VAR 0 15
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 2
6526: PUSH
6527: LD_INT 30
6529: PUSH
6530: LD_INT 0
6532: PUSH
6533: EMPTY
6534: LIST
6535: LIST
6536: PUSH
6537: LD_INT 30
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PPUSH
6556: CALL_OW 72
6560: ST_TO_ADDR
6561: GO 6715
6563: LD_INT 3
6565: DOUBLE
6566: EQUAL
6567: IFTRUE 6571
6569: GO 6633
6571: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6572: LD_ADDR_VAR 0 11
6576: PUSH
6577: LD_VAR 0 17
6581: PPUSH
6582: LD_INT 22
6584: PUSH
6585: LD_VAR 0 15
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 2
6596: PUSH
6597: LD_INT 30
6599: PUSH
6600: LD_INT 2
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 30
6609: PUSH
6610: LD_INT 3
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 72
6630: ST_TO_ADDR
6631: GO 6715
6633: LD_INT 4
6635: DOUBLE
6636: EQUAL
6637: IFTRUE 6641
6639: GO 6714
6641: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6642: LD_ADDR_VAR 0 11
6646: PUSH
6647: LD_VAR 0 17
6651: PPUSH
6652: LD_INT 22
6654: PUSH
6655: LD_VAR 0 15
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 2
6666: PUSH
6667: LD_INT 30
6669: PUSH
6670: LD_INT 6
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: LD_INT 30
6679: PUSH
6680: LD_INT 7
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 30
6689: PUSH
6690: LD_INT 8
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: EMPTY
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PPUSH
6707: CALL_OW 72
6711: ST_TO_ADDR
6712: GO 6715
6714: POP
// if not f then
6715: LD_VAR 0 11
6719: NOT
6720: IFFALSE 6724
// continue ;
6722: GO 6392
// x := personel [ i ] ;
6724: LD_ADDR_VAR 0 12
6728: PUSH
6729: LD_VAR 0 5
6733: PUSH
6734: LD_VAR 0 7
6738: ARRAY
6739: ST_TO_ADDR
// if x = - 1 then
6740: LD_VAR 0 12
6744: PUSH
6745: LD_INT 1
6747: NEG
6748: EQUAL
6749: IFFALSE 6954
// begin for j in f do
6751: LD_ADDR_VAR 0 8
6755: PUSH
6756: LD_VAR 0 11
6760: PUSH
6761: FOR_IN
6762: IFFALSE 6950
// repeat if GetBType ( j ) = b_barracks then
6764: LD_VAR 0 8
6768: PPUSH
6769: CALL_OW 266
6773: PUSH
6774: LD_INT 5
6776: EQUAL
6777: IFFALSE 6847
// begin if UnitsInside ( j ) < 3 then
6779: LD_VAR 0 8
6783: PPUSH
6784: CALL_OW 313
6788: PUSH
6789: LD_INT 3
6791: LESS
6792: IFFALSE 6828
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
6794: LD_INT 0
6796: PPUSH
6797: LD_INT 5
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 9
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: PUSH
6811: LD_VAR 0 16
6815: ARRAY
6816: PPUSH
6817: LD_VAR 0 3
6821: PPUSH
6822: CALL_OW 380
6826: GO 6845
// PrepareHuman ( false , i , skill ) ;
6828: LD_INT 0
6830: PPUSH
6831: LD_VAR 0 7
6835: PPUSH
6836: LD_VAR 0 3
6840: PPUSH
6841: CALL_OW 380
// end else
6845: GO 6864
// PrepareHuman ( false , i , skill ) ;
6847: LD_INT 0
6849: PPUSH
6850: LD_VAR 0 7
6854: PPUSH
6855: LD_VAR 0 3
6859: PPUSH
6860: CALL_OW 380
// un := CreateHuman ;
6864: LD_ADDR_VAR 0 13
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6874: LD_ADDR_VAR 0 6
6878: PUSH
6879: LD_VAR 0 6
6883: PPUSH
6884: LD_INT 1
6886: PPUSH
6887: LD_VAR 0 13
6891: PPUSH
6892: CALL_OW 2
6896: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6897: LD_VAR 0 13
6901: PPUSH
6902: LD_VAR 0 8
6906: PPUSH
6907: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6911: LD_VAR 0 8
6915: PPUSH
6916: CALL_OW 313
6920: PUSH
6921: LD_INT 6
6923: EQUAL
6924: PUSH
6925: LD_VAR 0 8
6929: PPUSH
6930: CALL_OW 266
6934: PUSH
6935: LD_INT 32
6937: PUSH
6938: LD_INT 31
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: IN
6945: OR
6946: IFFALSE 6764
6948: GO 6761
6950: POP
6951: POP
// end else
6952: GO 7222
// for j = 1 to x do
6954: LD_ADDR_VAR 0 8
6958: PUSH
6959: DOUBLE
6960: LD_INT 1
6962: DEC
6963: ST_TO_ADDR
6964: LD_VAR 0 12
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7220
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6972: LD_VAR 0 11
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: CALL_OW 313
6985: PUSH
6986: LD_VAR 0 11
6990: PUSH
6991: LD_INT 1
6993: ARRAY
6994: PPUSH
6995: CALL_OW 266
6999: PUSH
7000: LD_INT 32
7002: PUSH
7003: LD_INT 31
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: IN
7010: AND
7011: PUSH
7012: LD_VAR 0 11
7016: PUSH
7017: LD_INT 1
7019: ARRAY
7020: PPUSH
7021: CALL_OW 313
7025: PUSH
7026: LD_INT 6
7028: EQUAL
7029: OR
7030: IFFALSE 7050
// f := Delete ( f , 1 ) ;
7032: LD_ADDR_VAR 0 11
7036: PUSH
7037: LD_VAR 0 11
7041: PPUSH
7042: LD_INT 1
7044: PPUSH
7045: CALL_OW 3
7049: ST_TO_ADDR
// if not f then
7050: LD_VAR 0 11
7054: NOT
7055: IFFALSE 7059
// break ;
7057: GO 7220
// if GetBType ( f [ 1 ] ) = b_barracks then
7059: LD_VAR 0 11
7063: PUSH
7064: LD_INT 1
7066: ARRAY
7067: PPUSH
7068: CALL_OW 266
7072: PUSH
7073: LD_INT 5
7075: EQUAL
7076: IFFALSE 7150
// begin if UnitsInside ( f [ 1 ] ) < 3 then
7078: LD_VAR 0 11
7082: PUSH
7083: LD_INT 1
7085: ARRAY
7086: PPUSH
7087: CALL_OW 313
7091: PUSH
7092: LD_INT 3
7094: LESS
7095: IFFALSE 7131
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
7097: LD_INT 0
7099: PPUSH
7100: LD_INT 5
7102: PUSH
7103: LD_INT 8
7105: PUSH
7106: LD_INT 9
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: PUSH
7114: LD_VAR 0 16
7118: ARRAY
7119: PPUSH
7120: LD_VAR 0 3
7124: PPUSH
7125: CALL_OW 380
7129: GO 7148
// PrepareHuman ( false , i , skill ) ;
7131: LD_INT 0
7133: PPUSH
7134: LD_VAR 0 7
7138: PPUSH
7139: LD_VAR 0 3
7143: PPUSH
7144: CALL_OW 380
// end else
7148: GO 7167
// PrepareHuman ( false , i , skill ) ;
7150: LD_INT 0
7152: PPUSH
7153: LD_VAR 0 7
7157: PPUSH
7158: LD_VAR 0 3
7162: PPUSH
7163: CALL_OW 380
// un := CreateHuman ;
7167: LD_ADDR_VAR 0 13
7171: PUSH
7172: CALL_OW 44
7176: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
7177: LD_ADDR_VAR 0 6
7181: PUSH
7182: LD_VAR 0 6
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: LD_VAR 0 13
7194: PPUSH
7195: CALL_OW 2
7199: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
7200: LD_VAR 0 13
7204: PPUSH
7205: LD_VAR 0 11
7209: PUSH
7210: LD_INT 1
7212: ARRAY
7213: PPUSH
7214: CALL_OW 52
// end ;
7218: GO 6969
7220: POP
7221: POP
// end ;
7222: GO 6392
7224: POP
7225: POP
// result := result ^ buildings ;
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 6
7235: PUSH
7236: LD_VAR 0 17
7240: ADD
7241: ST_TO_ADDR
// end else
7242: GO 7385
// begin for i = 1 to personel do
7244: LD_ADDR_VAR 0 7
7248: PUSH
7249: DOUBLE
7250: LD_INT 1
7252: DEC
7253: ST_TO_ADDR
7254: LD_VAR 0 5
7258: PUSH
7259: FOR_TO
7260: IFFALSE 7383
// begin if i > 4 then
7262: LD_VAR 0 7
7266: PUSH
7267: LD_INT 4
7269: GREATER
7270: IFFALSE 7274
// break ;
7272: GO 7383
// x := personel [ i ] ;
7274: LD_ADDR_VAR 0 12
7278: PUSH
7279: LD_VAR 0 5
7283: PUSH
7284: LD_VAR 0 7
7288: ARRAY
7289: ST_TO_ADDR
// if x = - 1 then
7290: LD_VAR 0 12
7294: PUSH
7295: LD_INT 1
7297: NEG
7298: EQUAL
7299: IFFALSE 7303
// continue ;
7301: GO 7259
// PrepareHuman ( false , i , skill ) ;
7303: LD_INT 0
7305: PPUSH
7306: LD_VAR 0 7
7310: PPUSH
7311: LD_VAR 0 3
7315: PPUSH
7316: CALL_OW 380
// un := CreateHuman ;
7320: LD_ADDR_VAR 0 13
7324: PUSH
7325: CALL_OW 44
7329: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7330: LD_VAR 0 13
7334: PPUSH
7335: LD_VAR 0 1
7339: PPUSH
7340: CALL_OW 250
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 251
7354: PPUSH
7355: LD_INT 10
7357: PPUSH
7358: LD_INT 0
7360: PPUSH
7361: CALL_OW 50
// result := result ^ un ;
7365: LD_ADDR_VAR 0 6
7369: PUSH
7370: LD_VAR 0 6
7374: PUSH
7375: LD_VAR 0 13
7379: ADD
7380: ST_TO_ADDR
// end ;
7381: GO 7259
7383: POP
7384: POP
// end ; end ;
7385: LD_VAR 0 6
7389: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7390: LD_INT 0
7392: PPUSH
7393: PPUSH
7394: PPUSH
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
// result := false ;
7408: LD_ADDR_VAR 0 2
7412: PUSH
7413: LD_INT 0
7415: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
7416: LD_VAR 0 1
7420: NOT
7421: PUSH
7422: LD_VAR 0 1
7426: PPUSH
7427: CALL_OW 266
7431: PUSH
7432: LD_INT 32
7434: PUSH
7435: LD_INT 33
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: IN
7442: NOT
7443: OR
7444: IFFALSE 7448
// exit ;
7446: GO 8681
// nat := GetNation ( tower ) ;
7448: LD_ADDR_VAR 0 11
7452: PUSH
7453: LD_VAR 0 1
7457: PPUSH
7458: CALL_OW 248
7462: ST_TO_ADDR
// side := GetSide ( tower ) ;
7463: LD_ADDR_VAR 0 15
7467: PUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 255
7477: ST_TO_ADDR
// x := GetX ( tower ) ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_VAR 0 1
7487: PPUSH
7488: CALL_OW 250
7492: ST_TO_ADDR
// y := GetY ( tower ) ;
7493: LD_ADDR_VAR 0 10
7497: PUSH
7498: LD_VAR 0 1
7502: PPUSH
7503: CALL_OW 251
7507: ST_TO_ADDR
// if not x or not y then
7508: LD_VAR 0 9
7512: NOT
7513: PUSH
7514: LD_VAR 0 10
7518: NOT
7519: OR
7520: IFFALSE 7524
// exit ;
7522: GO 8681
// weapon := 0 ;
7524: LD_ADDR_VAR 0 17
7528: PUSH
7529: LD_INT 0
7531: ST_TO_ADDR
// fac_list := [ ] ;
7532: LD_ADDR_VAR 0 16
7536: PUSH
7537: EMPTY
7538: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7539: LD_ADDR_VAR 0 5
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 274
7553: PPUSH
7554: CALL 5559 0 1
7558: PPUSH
7559: LD_INT 30
7561: PUSH
7562: LD_INT 3
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PPUSH
7569: CALL_OW 72
7573: ST_TO_ADDR
// if not factories then
7574: LD_VAR 0 5
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 8681
// for i in factories do
7583: LD_ADDR_VAR 0 7
7587: PUSH
7588: LD_VAR 0 5
7592: PUSH
7593: FOR_IN
7594: IFFALSE 7619
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7596: LD_ADDR_VAR 0 16
7600: PUSH
7601: LD_VAR 0 16
7605: PUSH
7606: LD_VAR 0 7
7610: PPUSH
7611: CALL_OW 478
7615: UNION
7616: ST_TO_ADDR
7617: GO 7593
7619: POP
7620: POP
// if not fac_list then
7621: LD_VAR 0 16
7625: NOT
7626: IFFALSE 7630
// exit ;
7628: GO 8681
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7630: LD_ADDR_VAR 0 4
7634: PUSH
7635: LD_INT 4
7637: PUSH
7638: LD_INT 5
7640: PUSH
7641: LD_INT 9
7643: PUSH
7644: LD_INT 10
7646: PUSH
7647: LD_INT 6
7649: PUSH
7650: LD_INT 7
7652: PUSH
7653: LD_INT 11
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 27
7667: PUSH
7668: LD_INT 28
7670: PUSH
7671: LD_INT 26
7673: PUSH
7674: LD_INT 30
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 43
7685: PUSH
7686: LD_INT 44
7688: PUSH
7689: LD_INT 46
7691: PUSH
7692: LD_INT 45
7694: PUSH
7695: LD_INT 47
7697: PUSH
7698: LD_INT 49
7700: PUSH
7701: EMPTY
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: PUSH
7714: LD_VAR 0 11
7718: ARRAY
7719: ST_TO_ADDR
// for i in list do
7720: LD_ADDR_VAR 0 7
7724: PUSH
7725: LD_VAR 0 4
7729: PUSH
7730: FOR_IN
7731: IFFALSE 7764
// if not i in fac_list then
7733: LD_VAR 0 7
7737: PUSH
7738: LD_VAR 0 16
7742: IN
7743: NOT
7744: IFFALSE 7762
// list := list diff i ;
7746: LD_ADDR_VAR 0 4
7750: PUSH
7751: LD_VAR 0 4
7755: PUSH
7756: LD_VAR 0 7
7760: DIFF
7761: ST_TO_ADDR
7762: GO 7730
7764: POP
7765: POP
// if not list then
7766: LD_VAR 0 4
7770: NOT
7771: IFFALSE 7775
// exit ;
7773: GO 8681
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7775: LD_VAR 0 11
7779: PUSH
7780: LD_INT 3
7782: EQUAL
7783: PUSH
7784: LD_INT 49
7786: PUSH
7787: LD_VAR 0 4
7791: IN
7792: AND
7793: PUSH
7794: LD_INT 31
7796: PPUSH
7797: LD_VAR 0 15
7801: PPUSH
7802: CALL_OW 321
7806: PUSH
7807: LD_INT 2
7809: EQUAL
7810: AND
7811: IFFALSE 7871
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7813: LD_INT 22
7815: PUSH
7816: LD_VAR 0 15
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 35
7827: PUSH
7828: LD_INT 49
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 91
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: LD_INT 10
7845: PUSH
7846: EMPTY
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: NOT
7861: IFFALSE 7871
// weapon := ru_time_lapser ;
7863: LD_ADDR_VAR 0 17
7867: PUSH
7868: LD_INT 49
7870: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7871: LD_VAR 0 11
7875: PUSH
7876: LD_INT 1
7878: PUSH
7879: LD_INT 2
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: IN
7886: PUSH
7887: LD_INT 11
7889: PUSH
7890: LD_VAR 0 4
7894: IN
7895: PUSH
7896: LD_INT 30
7898: PUSH
7899: LD_VAR 0 4
7903: IN
7904: OR
7905: AND
7906: PUSH
7907: LD_INT 6
7909: PPUSH
7910: LD_VAR 0 15
7914: PPUSH
7915: CALL_OW 321
7919: PUSH
7920: LD_INT 2
7922: EQUAL
7923: AND
7924: IFFALSE 8089
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
7926: LD_INT 22
7928: PUSH
7929: LD_VAR 0 15
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 35
7943: PUSH
7944: LD_INT 11
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: LD_INT 35
7953: PUSH
7954: LD_INT 30
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: PUSH
7966: LD_INT 91
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 18
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 69
7991: NOT
7992: PUSH
7993: LD_INT 22
7995: PUSH
7996: LD_VAR 0 15
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 2
8007: PUSH
8008: LD_INT 30
8010: PUSH
8011: LD_INT 32
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 30
8020: PUSH
8021: LD_INT 33
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 91
8035: PUSH
8036: LD_VAR 0 1
8040: PUSH
8041: LD_INT 12
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: PPUSH
8057: CALL_OW 69
8061: PUSH
8062: LD_INT 2
8064: GREATER
8065: AND
8066: IFFALSE 8089
// weapon := [ us_radar , ar_radar ] [ nat ] ;
8068: LD_ADDR_VAR 0 17
8072: PUSH
8073: LD_INT 11
8075: PUSH
8076: LD_INT 30
8078: PUSH
8079: EMPTY
8080: LIST
8081: LIST
8082: PUSH
8083: LD_VAR 0 11
8087: ARRAY
8088: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
8089: LD_VAR 0 17
8093: NOT
8094: PUSH
8095: LD_INT 40
8097: PPUSH
8098: LD_VAR 0 15
8102: PPUSH
8103: CALL_OW 321
8107: PUSH
8108: LD_INT 2
8110: EQUAL
8111: AND
8112: PUSH
8113: LD_INT 7
8115: PUSH
8116: LD_VAR 0 4
8120: IN
8121: PUSH
8122: LD_INT 28
8124: PUSH
8125: LD_VAR 0 4
8129: IN
8130: OR
8131: PUSH
8132: LD_INT 45
8134: PUSH
8135: LD_VAR 0 4
8139: IN
8140: OR
8141: AND
8142: IFFALSE 8396
// begin hex := _GetHexInfo ( x , y ) ;
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_VAR 0 9
8153: PPUSH
8154: LD_VAR 0 10
8158: PPUSH
8159: CALL 1982 0 2
8163: ST_TO_ADDR
// if hex [ 1 ] then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: IFFALSE 8176
// exit ;
8174: GO 8681
// height := hex [ 2 ] ;
8176: LD_ADDR_VAR 0 14
8180: PUSH
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 2
8188: ARRAY
8189: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
8190: LD_ADDR_VAR 0 13
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: LD_INT 2
8200: PUSH
8201: LD_INT 3
8203: PUSH
8204: LD_INT 5
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// for i in tmp do
8213: LD_ADDR_VAR 0 7
8217: PUSH
8218: LD_VAR 0 13
8222: PUSH
8223: FOR_IN
8224: IFFALSE 8394
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
8226: LD_ADDR_VAR 0 8
8230: PUSH
8231: LD_VAR 0 9
8235: PPUSH
8236: LD_VAR 0 7
8240: PPUSH
8241: LD_INT 5
8243: PPUSH
8244: CALL_OW 272
8248: PUSH
8249: LD_VAR 0 10
8253: PPUSH
8254: LD_VAR 0 7
8258: PPUSH
8259: LD_INT 5
8261: PPUSH
8262: CALL_OW 273
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
8271: LD_VAR 0 8
8275: PUSH
8276: LD_INT 1
8278: ARRAY
8279: PPUSH
8280: LD_VAR 0 8
8284: PUSH
8285: LD_INT 2
8287: ARRAY
8288: PPUSH
8289: CALL_OW 488
8293: IFFALSE 8392
// begin hex := _GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_VAR 0 8
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_VAR 0 8
8313: PUSH
8314: LD_INT 2
8316: ARRAY
8317: PPUSH
8318: CALL 1982 0 2
8322: ST_TO_ADDR
// if hex [ 1 ] then
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 1
8330: ARRAY
8331: IFFALSE 8335
// continue ;
8333: GO 8223
// h := hex [ 2 ] ;
8335: LD_ADDR_VAR 0 12
8339: PUSH
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: ST_TO_ADDR
// if h + 7 < height then
8349: LD_VAR 0 12
8353: PUSH
8354: LD_INT 7
8356: PLUS
8357: PUSH
8358: LD_VAR 0 14
8362: LESS
8363: IFFALSE 8392
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
8365: LD_ADDR_VAR 0 17
8369: PUSH
8370: LD_INT 7
8372: PUSH
8373: LD_INT 28
8375: PUSH
8376: LD_INT 45
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: PUSH
8384: LD_VAR 0 11
8388: ARRAY
8389: ST_TO_ADDR
// break ;
8390: GO 8394
// end ; end ; end ;
8392: GO 8223
8394: POP
8395: POP
// end ; if not weapon then
8396: LD_VAR 0 17
8400: NOT
8401: IFFALSE 8563
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
8403: LD_ADDR_VAR 0 4
8407: PUSH
8408: LD_VAR 0 4
8412: PUSH
8413: LD_INT 11
8415: PUSH
8416: LD_INT 30
8418: PUSH
8419: LD_INT 49
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: DIFF
8427: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
8428: LD_ADDR_VAR 0 17
8432: PUSH
8433: LD_VAR 0 4
8437: PUSH
8438: LD_INT 1
8440: PPUSH
8441: LD_VAR 0 4
8445: PPUSH
8446: CALL_OW 12
8450: ARRAY
8451: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
8452: LD_ADDR_VAR 0 13
8456: PUSH
8457: LD_INT 22
8459: PUSH
8460: LD_VAR 0 15
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 3
8471: PUSH
8472: LD_INT 35
8474: PUSH
8475: LD_INT 0
8477: PUSH
8478: EMPTY
8479: LIST
8480: LIST
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PPUSH
8490: CALL_OW 69
8494: ST_TO_ADDR
// for i in tmp do
8495: LD_ADDR_VAR 0 7
8499: PUSH
8500: LD_VAR 0 13
8504: PUSH
8505: FOR_IN
8506: IFFALSE 8531
// list := list diff GetBWeapon ( i ) ;
8508: LD_ADDR_VAR 0 4
8512: PUSH
8513: LD_VAR 0 4
8517: PUSH
8518: LD_VAR 0 7
8522: PPUSH
8523: CALL_OW 269
8527: DIFF
8528: ST_TO_ADDR
8529: GO 8505
8531: POP
8532: POP
// if list then
8533: LD_VAR 0 4
8537: IFFALSE 8563
// weapon := list [ rand ( 1 , list ) ] ;
8539: LD_ADDR_VAR 0 17
8543: PUSH
8544: LD_VAR 0 4
8548: PUSH
8549: LD_INT 1
8551: PPUSH
8552: LD_VAR 0 4
8556: PPUSH
8557: CALL_OW 12
8561: ARRAY
8562: ST_TO_ADDR
// end ; if weapon then
8563: LD_VAR 0 17
8567: IFFALSE 8681
// begin tmp := CostOfWeapon ( weapon ) ;
8569: LD_ADDR_VAR 0 13
8573: PUSH
8574: LD_VAR 0 17
8578: PPUSH
8579: CALL_OW 451
8583: ST_TO_ADDR
// j := GetBase ( tower ) ;
8584: LD_ADDR_VAR 0 8
8588: PUSH
8589: LD_VAR 0 1
8593: PPUSH
8594: CALL_OW 274
8598: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8599: LD_VAR 0 8
8603: PPUSH
8604: LD_INT 1
8606: PPUSH
8607: CALL_OW 275
8611: PUSH
8612: LD_VAR 0 13
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: GREATEREQUAL
8621: PUSH
8622: LD_VAR 0 8
8626: PPUSH
8627: LD_INT 2
8629: PPUSH
8630: CALL_OW 275
8634: PUSH
8635: LD_VAR 0 13
8639: PUSH
8640: LD_INT 2
8642: ARRAY
8643: GREATEREQUAL
8644: AND
8645: PUSH
8646: LD_VAR 0 8
8650: PPUSH
8651: LD_INT 3
8653: PPUSH
8654: CALL_OW 275
8658: PUSH
8659: LD_VAR 0 13
8663: PUSH
8664: LD_INT 3
8666: ARRAY
8667: GREATEREQUAL
8668: AND
8669: IFFALSE 8681
// result := weapon ;
8671: LD_ADDR_VAR 0 2
8675: PUSH
8676: LD_VAR 0 17
8680: ST_TO_ADDR
// end ; end ;
8681: LD_VAR 0 2
8685: RET
// export function Compare ( val1 , val2 ) ; begin
8686: LD_INT 0
8688: PPUSH
// if val1 = val2 then
8689: LD_VAR 0 1
8693: PUSH
8694: LD_VAR 0 2
8698: EQUAL
8699: IFFALSE 8711
// result := true else
8701: LD_ADDR_VAR 0 3
8705: PUSH
8706: LD_INT 1
8708: ST_TO_ADDR
8709: GO 8719
// result := false ;
8711: LD_ADDR_VAR 0 3
8715: PUSH
8716: LD_INT 0
8718: ST_TO_ADDR
// end ;
8719: LD_VAR 0 3
8723: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8724: LD_INT 0
8726: PPUSH
8727: PPUSH
// result := true ;
8728: LD_ADDR_VAR 0 3
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// if array1 = array2 then
8736: LD_VAR 0 1
8740: PUSH
8741: LD_VAR 0 2
8745: EQUAL
8746: IFFALSE 8811
// begin for i = 1 to array1 do
8748: LD_ADDR_VAR 0 4
8752: PUSH
8753: DOUBLE
8754: LD_INT 1
8756: DEC
8757: ST_TO_ADDR
8758: LD_VAR 0 1
8762: PUSH
8763: FOR_TO
8764: IFFALSE 8807
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8766: LD_VAR 0 1
8770: PUSH
8771: LD_VAR 0 4
8775: ARRAY
8776: PPUSH
8777: LD_VAR 0 2
8781: PUSH
8782: LD_VAR 0 4
8786: ARRAY
8787: PPUSH
8788: CALL 8686 0 2
8792: NOT
8793: IFFALSE 8805
// begin result := false ;
8795: LD_ADDR_VAR 0 3
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// break ;
8803: GO 8807
// end ;
8805: GO 8763
8807: POP
8808: POP
// end else
8809: GO 8819
// result := false ;
8811: LD_ADDR_VAR 0 3
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// end ;
8819: LD_VAR 0 3
8823: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8824: LD_INT 0
8826: PPUSH
8827: PPUSH
8828: PPUSH
// pom := GetBase ( fac ) ;
8829: LD_ADDR_VAR 0 5
8833: PUSH
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 274
8843: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8844: LD_ADDR_VAR 0 4
8848: PUSH
8849: LD_VAR 0 2
8853: PUSH
8854: LD_INT 1
8856: ARRAY
8857: PPUSH
8858: LD_VAR 0 2
8862: PUSH
8863: LD_INT 2
8865: ARRAY
8866: PPUSH
8867: LD_VAR 0 2
8871: PUSH
8872: LD_INT 3
8874: ARRAY
8875: PPUSH
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 4
8883: ARRAY
8884: PPUSH
8885: CALL_OW 449
8889: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8890: LD_VAR 0 5
8894: PPUSH
8895: LD_INT 1
8897: PPUSH
8898: CALL_OW 275
8902: PUSH
8903: LD_VAR 0 4
8907: PUSH
8908: LD_INT 1
8910: ARRAY
8911: GREATEREQUAL
8912: PUSH
8913: LD_VAR 0 5
8917: PPUSH
8918: LD_INT 2
8920: PPUSH
8921: CALL_OW 275
8925: PUSH
8926: LD_VAR 0 4
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: GREATEREQUAL
8935: AND
8936: PUSH
8937: LD_VAR 0 5
8941: PPUSH
8942: LD_INT 3
8944: PPUSH
8945: CALL_OW 275
8949: PUSH
8950: LD_VAR 0 4
8954: PUSH
8955: LD_INT 3
8957: ARRAY
8958: GREATEREQUAL
8959: AND
8960: IFFALSE 8972
// result := true else
8962: LD_ADDR_VAR 0 3
8966: PUSH
8967: LD_INT 1
8969: ST_TO_ADDR
8970: GO 8980
// result := false ;
8972: LD_ADDR_VAR 0 3
8976: PUSH
8977: LD_INT 0
8979: ST_TO_ADDR
// end ;
8980: LD_VAR 0 3
8984: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8985: LD_INT 0
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
8992: PPUSH
8993: PPUSH
8994: PPUSH
8995: PPUSH
// result := false ;
8996: LD_ADDR_VAR 0 6
9000: PUSH
9001: LD_INT 0
9003: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
9004: LD_VAR 0 1
9008: NOT
9009: PUSH
9010: LD_VAR 0 2
9014: NOT
9015: OR
9016: PUSH
9017: LD_VAR 0 5
9021: PUSH
9022: LD_INT 0
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: LD_INT 3
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: LD_INT 5
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: IN
9048: NOT
9049: OR
9050: PUSH
9051: LD_VAR 0 3
9055: PPUSH
9056: LD_VAR 0 4
9060: PPUSH
9061: CALL_OW 488
9065: NOT
9066: OR
9067: IFFALSE 9071
// exit ;
9069: GO 9745
// pom := GetBase ( bdepot ) ;
9071: LD_ADDR_VAR 0 9
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 274
9085: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
9086: LD_ADDR_VAR 0 10
9090: PUSH
9091: LD_VAR 0 2
9095: PPUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 248
9105: PPUSH
9106: CALL_OW 450
9110: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
9111: LD_VAR 0 9
9115: PPUSH
9116: LD_INT 1
9118: PPUSH
9119: CALL_OW 275
9123: PUSH
9124: LD_VAR 0 10
9128: PUSH
9129: LD_INT 1
9131: ARRAY
9132: GREATEREQUAL
9133: PUSH
9134: LD_VAR 0 9
9138: PPUSH
9139: LD_INT 2
9141: PPUSH
9142: CALL_OW 275
9146: PUSH
9147: LD_VAR 0 10
9151: PUSH
9152: LD_INT 2
9154: ARRAY
9155: GREATEREQUAL
9156: AND
9157: PUSH
9158: LD_VAR 0 9
9162: PPUSH
9163: LD_INT 3
9165: PPUSH
9166: CALL_OW 275
9170: PUSH
9171: LD_VAR 0 10
9175: PUSH
9176: LD_INT 3
9178: ARRAY
9179: GREATEREQUAL
9180: AND
9181: NOT
9182: IFFALSE 9186
// exit ;
9184: GO 9745
// if GetBType ( bdepot ) = b_depot then
9186: LD_VAR 0 1
9190: PPUSH
9191: CALL_OW 266
9195: PUSH
9196: LD_INT 0
9198: EQUAL
9199: IFFALSE 9211
// dist := 28 else
9201: LD_ADDR_VAR 0 13
9205: PUSH
9206: LD_INT 28
9208: ST_TO_ADDR
9209: GO 9219
// dist := 36 ;
9211: LD_ADDR_VAR 0 13
9215: PUSH
9216: LD_INT 36
9218: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
9219: LD_VAR 0 1
9223: PPUSH
9224: LD_VAR 0 3
9228: PPUSH
9229: LD_VAR 0 4
9233: PPUSH
9234: CALL_OW 297
9238: PUSH
9239: LD_VAR 0 13
9243: GREATER
9244: IFFALSE 9248
// exit ;
9246: GO 9745
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
9248: LD_ADDR_VAR 0 11
9252: PUSH
9253: LD_VAR 0 2
9257: PPUSH
9258: LD_VAR 0 3
9262: PPUSH
9263: LD_VAR 0 4
9267: PPUSH
9268: LD_VAR 0 5
9272: PPUSH
9273: LD_VAR 0 1
9277: PPUSH
9278: CALL_OW 248
9282: PPUSH
9283: LD_INT 0
9285: PPUSH
9286: CALL 9750 0 6
9290: ST_TO_ADDR
// if not hexes then
9291: LD_VAR 0 11
9295: NOT
9296: IFFALSE 9300
// exit ;
9298: GO 9745
// hex := _GetHexInfo ( x , y ) ;
9300: LD_ADDR_VAR 0 14
9304: PUSH
9305: LD_VAR 0 3
9309: PPUSH
9310: LD_VAR 0 4
9314: PPUSH
9315: CALL 1982 0 2
9319: ST_TO_ADDR
// if hex [ 1 ] then
9320: LD_VAR 0 14
9324: PUSH
9325: LD_INT 1
9327: ARRAY
9328: IFFALSE 9332
// exit ;
9330: GO 9745
// height := hex [ 2 ] ;
9332: LD_ADDR_VAR 0 12
9336: PUSH
9337: LD_VAR 0 14
9341: PUSH
9342: LD_INT 2
9344: ARRAY
9345: ST_TO_ADDR
// for i = 1 to hexes do
9346: LD_ADDR_VAR 0 7
9350: PUSH
9351: DOUBLE
9352: LD_INT 1
9354: DEC
9355: ST_TO_ADDR
9356: LD_VAR 0 11
9360: PUSH
9361: FOR_TO
9362: IFFALSE 9700
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9364: LD_VAR 0 11
9368: PUSH
9369: LD_VAR 0 7
9373: ARRAY
9374: PUSH
9375: LD_INT 1
9377: ARRAY
9378: PPUSH
9379: LD_VAR 0 11
9383: PUSH
9384: LD_VAR 0 7
9388: ARRAY
9389: PUSH
9390: LD_INT 2
9392: ARRAY
9393: PPUSH
9394: CALL_OW 488
9398: NOT
9399: IFFALSE 9403
// continue ;
9401: GO 9361
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
9403: LD_ADDR_VAR 0 8
9407: PUSH
9408: LD_VAR 0 11
9412: PUSH
9413: LD_VAR 0 7
9417: ARRAY
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PPUSH
9423: LD_VAR 0 11
9427: PUSH
9428: LD_VAR 0 7
9432: ARRAY
9433: PUSH
9434: LD_INT 2
9436: ARRAY
9437: PPUSH
9438: CALL 1982 0 2
9442: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
9443: LD_VAR 0 8
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PUSH
9452: LD_VAR 0 8
9456: PUSH
9457: LD_INT 2
9459: ARRAY
9460: PUSH
9461: LD_VAR 0 12
9465: PUSH
9466: LD_INT 2
9468: PLUS
9469: GREATER
9470: OR
9471: PUSH
9472: LD_VAR 0 8
9476: PUSH
9477: LD_INT 2
9479: ARRAY
9480: PUSH
9481: LD_VAR 0 12
9485: PUSH
9486: LD_INT 2
9488: MINUS
9489: LESS
9490: OR
9491: PUSH
9492: LD_VAR 0 8
9496: PUSH
9497: LD_INT 3
9499: ARRAY
9500: PUSH
9501: LD_INT 0
9503: PUSH
9504: LD_INT 8
9506: PUSH
9507: LD_INT 9
9509: PUSH
9510: LD_INT 10
9512: PUSH
9513: LD_INT 11
9515: PUSH
9516: LD_INT 12
9518: PUSH
9519: LD_INT 13
9521: PUSH
9522: LD_INT 16
9524: PUSH
9525: LD_INT 17
9527: PUSH
9528: LD_INT 18
9530: PUSH
9531: LD_INT 19
9533: PUSH
9534: LD_INT 20
9536: PUSH
9537: LD_INT 21
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: IN
9555: NOT
9556: OR
9557: PUSH
9558: LD_VAR 0 8
9562: PUSH
9563: LD_INT 4
9565: ARRAY
9566: OR
9567: PUSH
9568: LD_VAR 0 8
9572: PUSH
9573: LD_INT 5
9575: ARRAY
9576: NOT
9577: OR
9578: PUSH
9579: LD_VAR 0 8
9583: PUSH
9584: LD_INT 6
9586: ARRAY
9587: PUSH
9588: LD_INT 1
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: LD_INT 7
9596: PUSH
9597: LD_INT 9
9599: PUSH
9600: LD_INT 10
9602: PUSH
9603: LD_INT 11
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: IN
9614: NOT
9615: OR
9616: PUSH
9617: LD_VAR 0 11
9621: PUSH
9622: LD_VAR 0 7
9626: ARRAY
9627: PUSH
9628: LD_INT 1
9630: ARRAY
9631: PPUSH
9632: LD_VAR 0 11
9636: PUSH
9637: LD_VAR 0 7
9641: ARRAY
9642: PUSH
9643: LD_INT 2
9645: ARRAY
9646: PPUSH
9647: CALL_OW 428
9651: PUSH
9652: LD_INT 0
9654: GREATER
9655: OR
9656: PUSH
9657: LD_VAR 0 11
9661: PUSH
9662: LD_VAR 0 7
9666: ARRAY
9667: PUSH
9668: LD_INT 1
9670: ARRAY
9671: PPUSH
9672: LD_VAR 0 11
9676: PUSH
9677: LD_VAR 0 7
9681: ARRAY
9682: PUSH
9683: LD_INT 2
9685: ARRAY
9686: PPUSH
9687: CALL_OW 351
9691: OR
9692: IFFALSE 9698
// exit ;
9694: POP
9695: POP
9696: GO 9745
// end ;
9698: GO 9361
9700: POP
9701: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9702: LD_VAR 0 1
9706: PPUSH
9707: CALL_OW 255
9711: PPUSH
9712: LD_VAR 0 3
9716: PPUSH
9717: LD_VAR 0 4
9721: PPUSH
9722: LD_INT 20
9724: PPUSH
9725: CALL 3731 0 4
9729: PUSH
9730: LD_INT 4
9732: ARRAY
9733: IFFALSE 9737
// exit ;
9735: GO 9745
// result := true ;
9737: LD_ADDR_VAR 0 6
9741: PUSH
9742: LD_INT 1
9744: ST_TO_ADDR
// end ;
9745: LD_VAR 0 6
9749: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9750: LD_INT 0
9752: PPUSH
9753: PPUSH
9754: PPUSH
9755: PPUSH
9756: PPUSH
9757: PPUSH
9758: PPUSH
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
9763: PPUSH
9764: PPUSH
9765: PPUSH
9766: PPUSH
9767: PPUSH
9768: PPUSH
9769: PPUSH
9770: PPUSH
9771: PPUSH
9772: PPUSH
9773: PPUSH
9774: PPUSH
9775: PPUSH
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
9782: PPUSH
9783: PPUSH
9784: PPUSH
9785: PPUSH
9786: PPUSH
9787: PPUSH
9788: PPUSH
9789: PPUSH
9790: PPUSH
9791: PPUSH
9792: PPUSH
9793: PPUSH
9794: PPUSH
9795: PPUSH
9796: PPUSH
9797: PPUSH
9798: PPUSH
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
9806: PPUSH
9807: PPUSH
9808: PPUSH
9809: PPUSH
// result = [ ] ;
9810: LD_ADDR_VAR 0 7
9814: PUSH
9815: EMPTY
9816: ST_TO_ADDR
// temp_list = [ ] ;
9817: LD_ADDR_VAR 0 9
9821: PUSH
9822: EMPTY
9823: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9824: LD_VAR 0 4
9828: PUSH
9829: LD_INT 0
9831: PUSH
9832: LD_INT 1
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: LD_INT 3
9840: PUSH
9841: LD_INT 4
9843: PUSH
9844: LD_INT 5
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: IN
9855: NOT
9856: PUSH
9857: LD_VAR 0 1
9861: PUSH
9862: LD_INT 0
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: IN
9872: PUSH
9873: LD_VAR 0 5
9877: PUSH
9878: LD_INT 1
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: LD_INT 3
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: IN
9892: NOT
9893: AND
9894: OR
9895: IFFALSE 9899
// exit ;
9897: GO 28284
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9899: LD_VAR 0 1
9903: PUSH
9904: LD_INT 6
9906: PUSH
9907: LD_INT 7
9909: PUSH
9910: LD_INT 8
9912: PUSH
9913: LD_INT 13
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 15
9921: PUSH
9922: LD_INT 11
9924: PUSH
9925: LD_INT 14
9927: PUSH
9928: LD_INT 10
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: IN
9942: IFFALSE 9952
// btype = b_lab ;
9944: LD_ADDR_VAR 0 1
9948: PUSH
9949: LD_INT 6
9951: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9952: LD_VAR 0 6
9956: PUSH
9957: LD_INT 0
9959: PUSH
9960: LD_INT 1
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: IN
9971: NOT
9972: PUSH
9973: LD_VAR 0 1
9977: PUSH
9978: LD_INT 0
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 36
9995: PUSH
9996: LD_INT 4
9998: PUSH
9999: LD_INT 5
10001: PUSH
10002: LD_INT 31
10004: PUSH
10005: LD_INT 32
10007: PUSH
10008: LD_INT 33
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: IN
10024: NOT
10025: PUSH
10026: LD_VAR 0 6
10030: PUSH
10031: LD_INT 1
10033: EQUAL
10034: AND
10035: OR
10036: PUSH
10037: LD_VAR 0 1
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: LD_INT 3
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: IN
10052: NOT
10053: PUSH
10054: LD_VAR 0 6
10058: PUSH
10059: LD_INT 2
10061: EQUAL
10062: AND
10063: OR
10064: IFFALSE 10074
// mode = 0 ;
10066: LD_ADDR_VAR 0 6
10070: PUSH
10071: LD_INT 0
10073: ST_TO_ADDR
// case mode of 0 :
10074: LD_VAR 0 6
10078: PUSH
10079: LD_INT 0
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 21540
10087: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
10088: LD_ADDR_VAR 0 11
10092: PUSH
10093: LD_INT 0
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: LD_INT 0
10105: PUSH
10106: LD_INT 1
10108: NEG
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 1
10116: PUSH
10117: LD_INT 0
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 1
10126: PUSH
10127: LD_INT 1
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 0
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 1
10146: NEG
10147: PUSH
10148: LD_INT 0
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PUSH
10155: LD_INT 1
10157: NEG
10158: PUSH
10159: LD_INT 1
10161: NEG
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PUSH
10167: LD_INT 1
10169: NEG
10170: PUSH
10171: LD_INT 2
10173: NEG
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 0
10181: PUSH
10182: LD_INT 2
10184: NEG
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: LD_INT 2
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: LD_INT 0
10213: PUSH
10214: LD_INT 2
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 1
10223: NEG
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 1
10234: PUSH
10235: LD_INT 3
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 0
10244: PUSH
10245: LD_INT 3
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PUSH
10252: LD_INT 1
10254: NEG
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10281: LD_ADDR_VAR 0 12
10285: PUSH
10286: LD_INT 0
10288: PUSH
10289: LD_INT 0
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 0
10298: PUSH
10299: LD_INT 1
10301: NEG
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 1
10309: PUSH
10310: LD_INT 0
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 1
10319: PUSH
10320: LD_INT 1
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 0
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 1
10339: NEG
10340: PUSH
10341: LD_INT 0
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 1
10350: NEG
10351: PUSH
10352: LD_INT 1
10354: NEG
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 1
10362: PUSH
10363: LD_INT 1
10365: NEG
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 2
10373: PUSH
10374: LD_INT 0
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 1
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 1
10393: NEG
10394: PUSH
10395: LD_INT 1
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 2
10404: NEG
10405: PUSH
10406: LD_INT 0
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PUSH
10413: LD_INT 2
10415: NEG
10416: PUSH
10417: LD_INT 1
10419: NEG
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 2
10427: NEG
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 3
10438: NEG
10439: PUSH
10440: LD_INT 0
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: LD_INT 3
10449: NEG
10450: PUSH
10451: LD_INT 1
10453: NEG
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: EMPTY
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10477: LD_ADDR_VAR 0 13
10481: PUSH
10482: LD_INT 0
10484: PUSH
10485: LD_INT 0
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 0
10494: PUSH
10495: LD_INT 1
10497: NEG
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: LD_INT 0
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 0
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 1
10535: NEG
10536: PUSH
10537: LD_INT 0
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 1
10546: NEG
10547: PUSH
10548: LD_INT 1
10550: NEG
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 1
10558: NEG
10559: PUSH
10560: LD_INT 2
10562: NEG
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 2
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 2
10600: NEG
10601: PUSH
10602: LD_INT 1
10604: NEG
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 2
10612: NEG
10613: PUSH
10614: LD_INT 2
10616: NEG
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 2
10624: NEG
10625: PUSH
10626: LD_INT 3
10628: NEG
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 3
10636: NEG
10637: PUSH
10638: LD_INT 2
10640: NEG
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 3
10648: NEG
10649: PUSH
10650: LD_INT 3
10652: NEG
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10676: LD_ADDR_VAR 0 14
10680: PUSH
10681: LD_INT 0
10683: PUSH
10684: LD_INT 0
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 0
10693: PUSH
10694: LD_INT 1
10696: NEG
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 1
10704: PUSH
10705: LD_INT 0
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: LD_INT 1
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 0
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 1
10734: NEG
10735: PUSH
10736: LD_INT 0
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 1
10745: NEG
10746: PUSH
10747: LD_INT 1
10749: NEG
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 1
10757: NEG
10758: PUSH
10759: LD_INT 2
10761: NEG
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 0
10769: PUSH
10770: LD_INT 2
10772: NEG
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 1
10780: PUSH
10781: LD_INT 1
10783: NEG
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 0
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 1
10811: NEG
10812: PUSH
10813: LD_INT 1
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 1
10822: NEG
10823: PUSH
10824: LD_INT 3
10826: NEG
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 0
10834: PUSH
10835: LD_INT 3
10837: NEG
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: LD_INT 2
10848: NEG
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: PUSH
10854: EMPTY
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10872: LD_ADDR_VAR 0 15
10876: PUSH
10877: LD_INT 0
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 0
10889: PUSH
10890: LD_INT 1
10892: NEG
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: LD_INT 0
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 1
10910: PUSH
10911: LD_INT 1
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 0
10920: PUSH
10921: LD_INT 1
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 1
10930: NEG
10931: PUSH
10932: LD_INT 0
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 1
10941: NEG
10942: PUSH
10943: LD_INT 1
10945: NEG
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 1
10953: PUSH
10954: LD_INT 1
10956: NEG
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: LD_INT 0
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: LD_INT 1
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PUSH
10982: LD_INT 1
10984: NEG
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 2
10995: NEG
10996: PUSH
10997: LD_INT 0
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 2
11006: NEG
11007: PUSH
11008: LD_INT 1
11010: NEG
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: LD_INT 1
11021: NEG
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 3
11029: PUSH
11030: LD_INT 0
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 1
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
11065: LD_ADDR_VAR 0 16
11069: PUSH
11070: LD_INT 0
11072: PUSH
11073: LD_INT 0
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 0
11082: PUSH
11083: LD_INT 1
11085: NEG
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 1
11093: PUSH
11094: LD_INT 0
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 1
11103: PUSH
11104: LD_INT 1
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 0
11113: PUSH
11114: LD_INT 1
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 1
11123: NEG
11124: PUSH
11125: LD_INT 0
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 1
11134: NEG
11135: PUSH
11136: LD_INT 1
11138: NEG
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 1
11146: NEG
11147: PUSH
11148: LD_INT 2
11150: NEG
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: PUSH
11156: LD_INT 2
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 2
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 2
11188: NEG
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: LD_INT 2
11200: NEG
11201: PUSH
11202: LD_INT 2
11204: NEG
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11258: LD_ADDR_VAR 0 17
11262: PUSH
11263: LD_INT 0
11265: PUSH
11266: LD_INT 0
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: PUSH
11273: LD_INT 0
11275: PUSH
11276: LD_INT 1
11278: NEG
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 1
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 0
11306: PUSH
11307: LD_INT 1
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 1
11316: NEG
11317: PUSH
11318: LD_INT 0
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 1
11327: NEG
11328: PUSH
11329: LD_INT 1
11331: NEG
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: LD_INT 1
11339: NEG
11340: PUSH
11341: LD_INT 2
11343: NEG
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 0
11351: PUSH
11352: LD_INT 2
11354: NEG
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 1
11362: PUSH
11363: LD_INT 1
11365: NEG
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 2
11373: PUSH
11374: LD_INT 0
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 1
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 2
11393: PUSH
11394: LD_INT 2
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 1
11403: PUSH
11404: LD_INT 2
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 0
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PUSH
11421: LD_INT 1
11423: NEG
11424: PUSH
11425: LD_INT 1
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: PUSH
11432: LD_INT 2
11434: NEG
11435: PUSH
11436: LD_INT 0
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 2
11445: NEG
11446: PUSH
11447: LD_INT 1
11449: NEG
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 2
11457: NEG
11458: PUSH
11459: LD_INT 2
11461: NEG
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11488: LD_ADDR_VAR 0 18
11492: PUSH
11493: LD_INT 0
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: LD_INT 1
11508: NEG
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 1
11516: PUSH
11517: LD_INT 0
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 1
11526: PUSH
11527: LD_INT 1
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 0
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 1
11546: NEG
11547: PUSH
11548: LD_INT 0
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 1
11557: NEG
11558: PUSH
11559: LD_INT 1
11561: NEG
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 1
11569: NEG
11570: PUSH
11571: LD_INT 2
11573: NEG
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 0
11581: PUSH
11582: LD_INT 2
11584: NEG
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: LD_INT 1
11595: NEG
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 2
11603: PUSH
11604: LD_INT 0
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 1
11633: PUSH
11634: LD_INT 2
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 0
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 1
11653: NEG
11654: PUSH
11655: LD_INT 1
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: PUSH
11662: LD_INT 2
11664: NEG
11665: PUSH
11666: LD_INT 0
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 2
11675: NEG
11676: PUSH
11677: LD_INT 1
11679: NEG
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 2
11687: NEG
11688: PUSH
11689: LD_INT 2
11691: NEG
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11718: LD_ADDR_VAR 0 19
11722: PUSH
11723: LD_INT 0
11725: PUSH
11726: LD_INT 0
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 0
11735: PUSH
11736: LD_INT 1
11738: NEG
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 1
11746: PUSH
11747: LD_INT 0
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: LD_INT 1
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 0
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 1
11776: NEG
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 1
11787: NEG
11788: PUSH
11789: LD_INT 1
11791: NEG
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 1
11799: NEG
11800: PUSH
11801: LD_INT 2
11803: NEG
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 0
11811: PUSH
11812: LD_INT 2
11814: NEG
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: PUSH
11820: LD_INT 1
11822: PUSH
11823: LD_INT 1
11825: NEG
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 2
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 2
11843: PUSH
11844: LD_INT 1
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 2
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 1
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 0
11873: PUSH
11874: LD_INT 2
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 1
11883: NEG
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 2
11894: NEG
11895: PUSH
11896: LD_INT 0
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 2
11905: NEG
11906: PUSH
11907: LD_INT 1
11909: NEG
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 2
11917: NEG
11918: PUSH
11919: LD_INT 2
11921: NEG
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11948: LD_ADDR_VAR 0 20
11952: PUSH
11953: LD_INT 0
11955: PUSH
11956: LD_INT 0
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 0
11965: PUSH
11966: LD_INT 1
11968: NEG
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: LD_INT 0
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: LD_INT 1
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 0
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 1
12006: NEG
12007: PUSH
12008: LD_INT 0
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 1
12017: NEG
12018: PUSH
12019: LD_INT 1
12021: NEG
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 1
12029: NEG
12030: PUSH
12031: LD_INT 2
12033: NEG
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 0
12041: PUSH
12042: LD_INT 2
12044: NEG
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: PUSH
12050: LD_INT 1
12052: PUSH
12053: LD_INT 1
12055: NEG
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: PUSH
12074: LD_INT 1
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 2
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: LD_INT 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 0
12103: PUSH
12104: LD_INT 2
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 1
12113: NEG
12114: PUSH
12115: LD_INT 1
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 2
12124: NEG
12125: PUSH
12126: LD_INT 0
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 2
12135: NEG
12136: PUSH
12137: LD_INT 1
12139: NEG
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 2
12147: NEG
12148: PUSH
12149: LD_INT 2
12151: NEG
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12178: LD_ADDR_VAR 0 21
12182: PUSH
12183: LD_INT 0
12185: PUSH
12186: LD_INT 0
12188: PUSH
12189: EMPTY
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: LD_INT 1
12198: NEG
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 1
12206: PUSH
12207: LD_INT 0
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: LD_INT 1
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 1
12236: NEG
12237: PUSH
12238: LD_INT 0
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 1
12247: NEG
12248: PUSH
12249: LD_INT 1
12251: NEG
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 1
12259: NEG
12260: PUSH
12261: LD_INT 2
12263: NEG
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 0
12271: PUSH
12272: LD_INT 2
12274: NEG
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 1
12282: PUSH
12283: LD_INT 1
12285: NEG
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 2
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: LD_INT 2
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: LD_INT 2
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 0
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 1
12343: NEG
12344: PUSH
12345: LD_INT 1
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 2
12354: NEG
12355: PUSH
12356: LD_INT 0
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 2
12365: NEG
12366: PUSH
12367: LD_INT 1
12369: NEG
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 2
12377: NEG
12378: PUSH
12379: LD_INT 2
12381: NEG
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12408: LD_ADDR_VAR 0 22
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: LD_INT 0
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: LD_INT 0
12425: PUSH
12426: LD_INT 1
12428: NEG
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 1
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 0
12456: PUSH
12457: LD_INT 1
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 1
12466: NEG
12467: PUSH
12468: LD_INT 0
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 1
12477: NEG
12478: PUSH
12479: LD_INT 1
12481: NEG
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 1
12489: NEG
12490: PUSH
12491: LD_INT 2
12493: NEG
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 0
12501: PUSH
12502: LD_INT 2
12504: NEG
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 1
12512: PUSH
12513: LD_INT 1
12515: NEG
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 2
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 1
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: LD_INT 2
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 0
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: LD_INT 1
12573: NEG
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 2
12584: NEG
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: NEG
12596: PUSH
12597: LD_INT 1
12599: NEG
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 2
12607: NEG
12608: PUSH
12609: LD_INT 2
12611: NEG
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12638: LD_ADDR_VAR 0 23
12642: PUSH
12643: LD_INT 0
12645: PUSH
12646: LD_INT 0
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PUSH
12653: LD_INT 0
12655: PUSH
12656: LD_INT 1
12658: NEG
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PUSH
12664: LD_INT 1
12666: PUSH
12667: LD_INT 0
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: LD_INT 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 0
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 1
12696: NEG
12697: PUSH
12698: LD_INT 0
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 1
12707: NEG
12708: PUSH
12709: LD_INT 1
12711: NEG
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 1
12719: NEG
12720: PUSH
12721: LD_INT 2
12723: NEG
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 0
12731: PUSH
12732: LD_INT 2
12734: NEG
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 1
12742: PUSH
12743: LD_INT 1
12745: NEG
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 2
12753: PUSH
12754: LD_INT 0
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 2
12763: PUSH
12764: LD_INT 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 2
12773: PUSH
12774: LD_INT 2
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: LD_INT 1
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: LD_INT 0
12793: PUSH
12794: LD_INT 2
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 1
12803: NEG
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 2
12814: NEG
12815: PUSH
12816: LD_INT 0
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 2
12825: NEG
12826: PUSH
12827: LD_INT 1
12829: NEG
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 2
12837: NEG
12838: PUSH
12839: LD_INT 2
12841: NEG
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 2
12849: NEG
12850: PUSH
12851: LD_INT 3
12853: NEG
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 1
12861: NEG
12862: PUSH
12863: LD_INT 3
12865: NEG
12866: PUSH
12867: EMPTY
12868: LIST
12869: LIST
12870: PUSH
12871: LD_INT 1
12873: PUSH
12874: LD_INT 2
12876: NEG
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: LD_INT 2
12884: PUSH
12885: LD_INT 1
12887: NEG
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12918: LD_ADDR_VAR 0 24
12922: PUSH
12923: LD_INT 0
12925: PUSH
12926: LD_INT 0
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 0
12935: PUSH
12936: LD_INT 1
12938: NEG
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: LD_INT 0
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 1
12956: PUSH
12957: LD_INT 1
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 0
12966: PUSH
12967: LD_INT 1
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 1
12976: NEG
12977: PUSH
12978: LD_INT 0
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 1
12987: NEG
12988: PUSH
12989: LD_INT 1
12991: NEG
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 1
12999: NEG
13000: PUSH
13001: LD_INT 2
13003: NEG
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: LD_INT 2
13014: NEG
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 1
13022: PUSH
13023: LD_INT 1
13025: NEG
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 0
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: LD_INT 1
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 1
13063: PUSH
13064: LD_INT 2
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 0
13073: PUSH
13074: LD_INT 2
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 1
13083: NEG
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: LD_INT 2
13094: NEG
13095: PUSH
13096: LD_INT 0
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 2
13105: NEG
13106: PUSH
13107: LD_INT 1
13109: NEG
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 2
13117: NEG
13118: PUSH
13119: LD_INT 2
13121: NEG
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 1
13129: PUSH
13130: LD_INT 2
13132: NEG
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: LD_INT 1
13143: NEG
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: LD_INT 1
13154: PUSH
13155: EMPTY
13156: LIST
13157: LIST
13158: PUSH
13159: LD_INT 3
13161: PUSH
13162: LD_INT 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
13194: LD_ADDR_VAR 0 25
13198: PUSH
13199: LD_INT 0
13201: PUSH
13202: LD_INT 0
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 0
13211: PUSH
13212: LD_INT 1
13214: NEG
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: LD_INT 1
13222: PUSH
13223: LD_INT 0
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 1
13232: PUSH
13233: LD_INT 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 0
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 1
13252: NEG
13253: PUSH
13254: LD_INT 0
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 1
13263: NEG
13264: PUSH
13265: LD_INT 1
13267: NEG
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 1
13275: NEG
13276: PUSH
13277: LD_INT 2
13279: NEG
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 0
13287: PUSH
13288: LD_INT 2
13290: NEG
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 1
13298: PUSH
13299: LD_INT 1
13301: NEG
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 0
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 2
13319: PUSH
13320: LD_INT 1
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: LD_INT 2
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 1
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 0
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 1
13359: NEG
13360: PUSH
13361: LD_INT 1
13363: PUSH
13364: EMPTY
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 2
13370: NEG
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: NEG
13382: PUSH
13383: LD_INT 1
13385: NEG
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 2
13393: NEG
13394: PUSH
13395: LD_INT 2
13397: NEG
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 3
13405: PUSH
13406: LD_INT 1
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: LD_INT 3
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 1
13435: PUSH
13436: LD_INT 3
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13468: LD_ADDR_VAR 0 26
13472: PUSH
13473: LD_INT 0
13475: PUSH
13476: LD_INT 0
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 0
13485: PUSH
13486: LD_INT 1
13488: NEG
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: LD_INT 0
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: LD_INT 1
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 0
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 1
13526: NEG
13527: PUSH
13528: LD_INT 0
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 1
13537: NEG
13538: PUSH
13539: LD_INT 1
13541: NEG
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 1
13549: NEG
13550: PUSH
13551: LD_INT 2
13553: NEG
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 0
13561: PUSH
13562: LD_INT 2
13564: NEG
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 1
13572: PUSH
13573: LD_INT 1
13575: NEG
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: LD_INT 0
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 2
13593: PUSH
13594: LD_INT 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 2
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 1
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 0
13623: PUSH
13624: LD_INT 2
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PUSH
13631: LD_INT 1
13633: NEG
13634: PUSH
13635: LD_INT 1
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 2
13644: NEG
13645: PUSH
13646: LD_INT 0
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 2
13655: NEG
13656: PUSH
13657: LD_INT 1
13659: NEG
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 2
13667: NEG
13668: PUSH
13669: LD_INT 2
13671: NEG
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 3
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: LD_INT 3
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 1
13699: NEG
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 2
13710: NEG
13711: PUSH
13712: LD_INT 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13744: LD_ADDR_VAR 0 27
13748: PUSH
13749: LD_INT 0
13751: PUSH
13752: LD_INT 0
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 0
13761: PUSH
13762: LD_INT 1
13764: NEG
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 1
13772: PUSH
13773: LD_INT 0
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 1
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 0
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: LD_INT 1
13802: NEG
13803: PUSH
13804: LD_INT 0
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 1
13813: NEG
13814: PUSH
13815: LD_INT 1
13817: NEG
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 1
13825: NEG
13826: PUSH
13827: LD_INT 2
13829: NEG
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 0
13837: PUSH
13838: LD_INT 2
13840: NEG
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 1
13848: PUSH
13849: LD_INT 1
13851: NEG
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: LD_INT 2
13859: PUSH
13860: LD_INT 0
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 2
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: LD_INT 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 0
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 1
13909: NEG
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 2
13920: NEG
13921: PUSH
13922: LD_INT 0
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 2
13931: NEG
13932: PUSH
13933: LD_INT 1
13935: NEG
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 2
13943: NEG
13944: PUSH
13945: LD_INT 2
13947: NEG
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 1
13955: NEG
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 2
13966: NEG
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 3
13977: NEG
13978: PUSH
13979: LD_INT 1
13981: NEG
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 3
13989: NEG
13990: PUSH
13991: LD_INT 2
13993: NEG
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
14024: LD_ADDR_VAR 0 28
14028: PUSH
14029: LD_INT 0
14031: PUSH
14032: LD_INT 0
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 0
14041: PUSH
14042: LD_INT 1
14044: NEG
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 1
14052: PUSH
14053: LD_INT 0
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 1
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 0
14072: PUSH
14073: LD_INT 1
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 1
14082: NEG
14083: PUSH
14084: LD_INT 0
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 1
14093: NEG
14094: PUSH
14095: LD_INT 1
14097: NEG
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 1
14105: NEG
14106: PUSH
14107: LD_INT 2
14109: NEG
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 0
14117: PUSH
14118: LD_INT 2
14120: NEG
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 1
14128: PUSH
14129: LD_INT 1
14131: NEG
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 2
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 1
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: LD_INT 2
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 1
14169: PUSH
14170: LD_INT 2
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 0
14179: PUSH
14180: LD_INT 2
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 1
14189: NEG
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 2
14200: NEG
14201: PUSH
14202: LD_INT 0
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 2
14211: NEG
14212: PUSH
14213: LD_INT 1
14215: NEG
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 2
14223: NEG
14224: PUSH
14225: LD_INT 2
14227: NEG
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 2
14235: NEG
14236: PUSH
14237: LD_INT 3
14239: NEG
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 1
14247: NEG
14248: PUSH
14249: LD_INT 3
14251: NEG
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: NEG
14260: PUSH
14261: LD_INT 1
14263: NEG
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 3
14271: NEG
14272: PUSH
14273: LD_INT 2
14275: NEG
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14306: LD_ADDR_VAR 0 29
14310: PUSH
14311: LD_INT 0
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 0
14323: PUSH
14324: LD_INT 1
14326: NEG
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 1
14334: PUSH
14335: LD_INT 0
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 0
14354: PUSH
14355: LD_INT 1
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: LD_INT 1
14364: NEG
14365: PUSH
14366: LD_INT 0
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: NEG
14376: PUSH
14377: LD_INT 1
14379: NEG
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 1
14387: NEG
14388: PUSH
14389: LD_INT 2
14391: NEG
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 0
14399: PUSH
14400: LD_INT 2
14402: NEG
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: LD_INT 1
14413: NEG
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 0
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 0
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 1
14461: NEG
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 2
14472: NEG
14473: PUSH
14474: LD_INT 1
14476: NEG
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: LD_INT 2
14484: NEG
14485: PUSH
14486: LD_INT 2
14488: NEG
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 2
14496: NEG
14497: PUSH
14498: LD_INT 3
14500: NEG
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 1
14511: NEG
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 3
14519: PUSH
14520: LD_INT 1
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: LD_INT 3
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 1
14539: NEG
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 3
14550: NEG
14551: PUSH
14552: LD_INT 2
14554: NEG
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14585: LD_ADDR_VAR 0 30
14589: PUSH
14590: LD_INT 0
14592: PUSH
14593: LD_INT 0
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 0
14602: PUSH
14603: LD_INT 1
14605: NEG
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: PUSH
14611: LD_INT 1
14613: PUSH
14614: LD_INT 0
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 1
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 0
14633: PUSH
14634: LD_INT 1
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 1
14643: NEG
14644: PUSH
14645: LD_INT 0
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 1
14654: NEG
14655: PUSH
14656: LD_INT 1
14658: NEG
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 1
14666: NEG
14667: PUSH
14668: LD_INT 2
14670: NEG
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: LD_INT 0
14678: PUSH
14679: LD_INT 2
14681: NEG
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: LD_INT 1
14692: NEG
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: LD_INT 0
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PUSH
14708: LD_INT 2
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 2
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: LD_INT 1
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 1
14740: NEG
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 2
14751: NEG
14752: PUSH
14753: LD_INT 0
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 2
14762: NEG
14763: PUSH
14764: LD_INT 1
14766: NEG
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 1
14774: NEG
14775: PUSH
14776: LD_INT 3
14778: NEG
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 1
14786: PUSH
14787: LD_INT 2
14789: NEG
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 3
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 2
14807: PUSH
14808: LD_INT 3
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: LD_INT 2
14817: NEG
14818: PUSH
14819: LD_INT 1
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 3
14828: NEG
14829: PUSH
14830: LD_INT 1
14832: NEG
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14863: LD_ADDR_VAR 0 31
14867: PUSH
14868: LD_INT 0
14870: PUSH
14871: LD_INT 0
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 0
14880: PUSH
14881: LD_INT 1
14883: NEG
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: LD_INT 0
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 1
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 0
14911: PUSH
14912: LD_INT 1
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 1
14921: NEG
14922: PUSH
14923: LD_INT 0
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 1
14932: NEG
14933: PUSH
14934: LD_INT 1
14936: NEG
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 1
14944: NEG
14945: PUSH
14946: LD_INT 2
14948: NEG
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: LD_INT 1
14956: PUSH
14957: LD_INT 1
14959: NEG
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 2
14967: PUSH
14968: LD_INT 0
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 2
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 2
15028: NEG
15029: PUSH
15030: LD_INT 1
15032: NEG
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 2
15040: NEG
15041: PUSH
15042: LD_INT 2
15044: NEG
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 2
15052: NEG
15053: PUSH
15054: LD_INT 3
15056: NEG
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 2
15064: PUSH
15065: LD_INT 1
15067: NEG
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 3
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 1
15085: PUSH
15086: LD_INT 3
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 1
15095: NEG
15096: PUSH
15097: LD_INT 2
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 3
15106: NEG
15107: PUSH
15108: LD_INT 2
15110: NEG
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15141: LD_ADDR_VAR 0 32
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 0
15158: PUSH
15159: LD_INT 1
15161: NEG
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 1
15169: PUSH
15170: LD_INT 0
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 0
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 1
15199: NEG
15200: PUSH
15201: LD_INT 0
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 1
15210: NEG
15211: PUSH
15212: LD_INT 1
15214: NEG
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 1
15222: NEG
15223: PUSH
15224: LD_INT 2
15226: NEG
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 0
15234: PUSH
15235: LD_INT 2
15237: NEG
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: LD_INT 1
15248: NEG
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 2
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 1
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 0
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 1
15296: NEG
15297: PUSH
15298: LD_INT 1
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 2
15307: NEG
15308: PUSH
15309: LD_INT 0
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 2
15318: NEG
15319: PUSH
15320: LD_INT 1
15322: NEG
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 1
15330: NEG
15331: PUSH
15332: LD_INT 3
15334: NEG
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: LD_INT 2
15345: NEG
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 3
15353: PUSH
15354: LD_INT 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: LD_INT 3
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: NEG
15374: PUSH
15375: LD_INT 1
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 3
15384: NEG
15385: PUSH
15386: LD_INT 1
15388: NEG
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15419: LD_ADDR_VAR 0 33
15423: PUSH
15424: LD_INT 0
15426: PUSH
15427: LD_INT 0
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: LD_INT 1
15439: NEG
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: LD_INT 0
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: PUSH
15455: LD_INT 1
15457: PUSH
15458: LD_INT 1
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 0
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 1
15477: NEG
15478: PUSH
15479: LD_INT 0
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 1
15488: NEG
15489: PUSH
15490: LD_INT 1
15492: NEG
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 1
15500: NEG
15501: PUSH
15502: LD_INT 2
15504: NEG
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: LD_INT 1
15512: PUSH
15513: LD_INT 1
15515: NEG
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 2
15523: PUSH
15524: LD_INT 0
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PUSH
15551: LD_INT 0
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 1
15563: NEG
15564: PUSH
15565: LD_INT 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 2
15574: NEG
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 2
15585: NEG
15586: PUSH
15587: LD_INT 1
15589: NEG
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 2
15597: NEG
15598: PUSH
15599: LD_INT 2
15601: NEG
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: LD_INT 2
15609: NEG
15610: PUSH
15611: LD_INT 3
15613: NEG
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 1
15624: NEG
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 1
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 1
15652: NEG
15653: PUSH
15654: LD_INT 2
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 3
15663: NEG
15664: PUSH
15665: LD_INT 2
15667: NEG
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15698: LD_ADDR_VAR 0 34
15702: PUSH
15703: LD_INT 0
15705: PUSH
15706: LD_INT 0
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 0
15715: PUSH
15716: LD_INT 1
15718: NEG
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: LD_INT 0
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: LD_INT 1
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: LD_INT 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 1
15756: NEG
15757: PUSH
15758: LD_INT 0
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 1
15767: NEG
15768: PUSH
15769: LD_INT 1
15771: NEG
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 1
15779: NEG
15780: PUSH
15781: LD_INT 2
15783: NEG
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 0
15791: PUSH
15792: LD_INT 2
15794: NEG
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 1
15802: PUSH
15803: LD_INT 1
15805: NEG
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 2
15823: PUSH
15824: LD_INT 2
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 1
15843: NEG
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 2
15854: NEG
15855: PUSH
15856: LD_INT 0
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 2
15865: NEG
15866: PUSH
15867: LD_INT 1
15869: NEG
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: NEG
15878: PUSH
15879: LD_INT 2
15881: NEG
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 1
15889: NEG
15890: PUSH
15891: LD_INT 3
15893: NEG
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: LD_INT 2
15904: NEG
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 2
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 2
15922: PUSH
15923: LD_INT 3
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 2
15932: NEG
15933: PUSH
15934: LD_INT 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 3
15943: NEG
15944: PUSH
15945: LD_INT 1
15947: NEG
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15978: LD_ADDR_VAR 0 35
15982: PUSH
15983: LD_INT 0
15985: PUSH
15986: LD_INT 0
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 0
15995: PUSH
15996: LD_INT 1
15998: NEG
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: LD_INT 0
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: LD_INT 1
16016: PUSH
16017: LD_INT 1
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 1
16036: NEG
16037: PUSH
16038: LD_INT 0
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 1
16047: NEG
16048: PUSH
16049: LD_INT 1
16051: NEG
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 2
16059: PUSH
16060: LD_INT 1
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: NEG
16070: PUSH
16071: LD_INT 1
16073: NEG
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16090: LD_ADDR_VAR 0 36
16094: PUSH
16095: LD_INT 0
16097: PUSH
16098: LD_INT 0
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 0
16107: PUSH
16108: LD_INT 1
16110: NEG
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 1
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: LD_INT 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 1
16148: NEG
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 1
16159: NEG
16160: PUSH
16161: LD_INT 1
16163: NEG
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 1
16171: NEG
16172: PUSH
16173: LD_INT 2
16175: NEG
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16202: LD_ADDR_VAR 0 37
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 0
16219: PUSH
16220: LD_INT 1
16222: NEG
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 1
16230: PUSH
16231: LD_INT 0
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: LD_INT 1
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 0
16250: PUSH
16251: LD_INT 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 1
16260: NEG
16261: PUSH
16262: LD_INT 0
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 1
16271: NEG
16272: PUSH
16273: LD_INT 1
16275: NEG
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: LD_INT 1
16286: NEG
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 1
16294: NEG
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16314: LD_ADDR_VAR 0 38
16318: PUSH
16319: LD_INT 0
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: LD_INT 1
16334: NEG
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: LD_INT 0
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: LD_INT 1
16352: PUSH
16353: LD_INT 1
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 1
16372: NEG
16373: PUSH
16374: LD_INT 0
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: PUSH
16381: LD_INT 1
16383: NEG
16384: PUSH
16385: LD_INT 1
16387: NEG
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 2
16395: PUSH
16396: LD_INT 1
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PUSH
16403: LD_INT 2
16405: NEG
16406: PUSH
16407: LD_INT 1
16409: NEG
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16426: LD_ADDR_VAR 0 39
16430: PUSH
16431: LD_INT 0
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 0
16443: PUSH
16444: LD_INT 1
16446: NEG
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: LD_INT 0
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: LD_INT 1
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: LD_INT 1
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 1
16484: NEG
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 1
16495: NEG
16496: PUSH
16497: LD_INT 1
16499: NEG
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 1
16507: NEG
16508: PUSH
16509: LD_INT 2
16511: NEG
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16538: LD_ADDR_VAR 0 40
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: LD_INT 0
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 0
16555: PUSH
16556: LD_INT 1
16558: NEG
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: LD_INT 0
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 1
16576: PUSH
16577: LD_INT 1
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 0
16586: PUSH
16587: LD_INT 1
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 1
16596: NEG
16597: PUSH
16598: LD_INT 0
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 1
16607: NEG
16608: PUSH
16609: LD_INT 1
16611: NEG
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 1
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 1
16630: NEG
16631: PUSH
16632: LD_INT 1
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16650: LD_ADDR_VAR 0 41
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: LD_INT 0
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 0
16667: PUSH
16668: LD_INT 1
16670: NEG
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: PUSH
16676: LD_INT 1
16678: PUSH
16679: LD_INT 0
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 1
16688: PUSH
16689: LD_INT 1
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: PUSH
16696: LD_INT 0
16698: PUSH
16699: LD_INT 1
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: LD_INT 0
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 1
16719: NEG
16720: PUSH
16721: LD_INT 1
16723: NEG
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: LD_INT 2
16735: NEG
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: LD_INT 1
16746: NEG
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 2
16754: PUSH
16755: LD_INT 0
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 2
16764: PUSH
16765: LD_INT 1
16767: PUSH
16768: EMPTY
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 2
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: PUSH
16782: LD_INT 1
16784: PUSH
16785: LD_INT 2
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PUSH
16792: LD_INT 1
16794: NEG
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 2
16805: NEG
16806: PUSH
16807: LD_INT 0
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 2
16816: NEG
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PUSH
16826: LD_INT 2
16828: NEG
16829: PUSH
16830: LD_INT 2
16832: NEG
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 2
16840: NEG
16841: PUSH
16842: LD_INT 3
16844: NEG
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: LD_INT 1
16855: NEG
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: LD_INT 0
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 3
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: LD_INT 3
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 2
16913: NEG
16914: PUSH
16915: LD_INT 1
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 3
16924: NEG
16925: PUSH
16926: LD_INT 0
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 3
16935: NEG
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 3
16947: NEG
16948: PUSH
16949: LD_INT 2
16951: NEG
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 3
16959: NEG
16960: PUSH
16961: LD_INT 3
16963: NEG
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17000: LD_ADDR_VAR 0 42
17004: PUSH
17005: LD_INT 0
17007: PUSH
17008: LD_INT 0
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: LD_INT 1
17020: NEG
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: LD_INT 0
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: LD_INT 1
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 0
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 1
17058: NEG
17059: PUSH
17060: LD_INT 0
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 1
17069: NEG
17070: PUSH
17071: LD_INT 1
17073: NEG
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 1
17081: NEG
17082: PUSH
17083: LD_INT 2
17085: NEG
17086: PUSH
17087: EMPTY
17088: LIST
17089: LIST
17090: PUSH
17091: LD_INT 0
17093: PUSH
17094: LD_INT 2
17096: NEG
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: LD_INT 1
17107: NEG
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: LD_INT 2
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 1
17155: NEG
17156: PUSH
17157: LD_INT 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 2
17166: NEG
17167: PUSH
17168: LD_INT 1
17170: NEG
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: PUSH
17176: LD_INT 2
17178: NEG
17179: PUSH
17180: LD_INT 2
17182: NEG
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 2
17190: NEG
17191: PUSH
17192: LD_INT 3
17194: NEG
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 1
17202: NEG
17203: PUSH
17204: LD_INT 3
17206: NEG
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 0
17214: PUSH
17215: LD_INT 3
17217: NEG
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 1
17225: PUSH
17226: LD_INT 2
17228: NEG
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 3
17236: PUSH
17237: LD_INT 2
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 2
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: LD_INT 3
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 0
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 1
17286: NEG
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: LD_INT 3
17297: NEG
17298: PUSH
17299: LD_INT 2
17301: NEG
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 3
17309: NEG
17310: PUSH
17311: LD_INT 3
17313: NEG
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17350: LD_ADDR_VAR 0 43
17354: PUSH
17355: LD_INT 0
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 0
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 0
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 1
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 0
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 1
17408: NEG
17409: PUSH
17410: LD_INT 0
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 1
17419: NEG
17420: PUSH
17421: LD_INT 1
17423: NEG
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PUSH
17429: LD_INT 1
17431: NEG
17432: PUSH
17433: LD_INT 2
17435: NEG
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 0
17443: PUSH
17444: LD_INT 2
17446: NEG
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: LD_INT 0
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 2
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 0
17495: PUSH
17496: LD_INT 2
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: NEG
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 2
17516: NEG
17517: PUSH
17518: LD_INT 0
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 2
17527: NEG
17528: PUSH
17529: LD_INT 1
17531: NEG
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: PUSH
17541: LD_INT 3
17543: NEG
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 3
17554: NEG
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 2
17565: NEG
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 2
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 3
17594: PUSH
17595: LD_INT 1
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 1
17604: PUSH
17605: LD_INT 3
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 0
17614: PUSH
17615: LD_INT 3
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 1
17624: NEG
17625: PUSH
17626: LD_INT 2
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: LD_INT 2
17635: NEG
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 3
17646: NEG
17647: PUSH
17648: LD_INT 0
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 3
17657: NEG
17658: PUSH
17659: LD_INT 1
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17698: LD_ADDR_VAR 0 44
17702: PUSH
17703: LD_INT 0
17705: PUSH
17706: LD_INT 0
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: LD_INT 0
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: LD_INT 0
17729: PUSH
17730: EMPTY
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: LD_INT 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 0
17746: PUSH
17747: LD_INT 1
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: LD_INT 0
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 1
17767: NEG
17768: PUSH
17769: LD_INT 1
17771: NEG
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 2
17783: NEG
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 1
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 2
17812: PUSH
17813: LD_INT 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 2
17822: PUSH
17823: LD_INT 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: LD_INT 1
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 1
17842: NEG
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: LD_INT 0
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 2
17864: NEG
17865: PUSH
17866: LD_INT 1
17868: NEG
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: NEG
17877: PUSH
17878: LD_INT 2
17880: NEG
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 2
17888: NEG
17889: PUSH
17890: LD_INT 3
17892: NEG
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 2
17900: PUSH
17901: LD_INT 1
17903: NEG
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 3
17911: PUSH
17912: LD_INT 0
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: LD_INT 2
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: LD_INT 3
17941: PUSH
17942: LD_INT 3
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 3
17972: NEG
17973: PUSH
17974: LD_INT 0
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 3
17983: NEG
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: NEG
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 3
18007: NEG
18008: PUSH
18009: LD_INT 3
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18048: LD_ADDR_VAR 0 45
18052: PUSH
18053: LD_INT 0
18055: PUSH
18056: LD_INT 0
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 0
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 1
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 0
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: LD_INT 1
18117: NEG
18118: PUSH
18119: LD_INT 1
18121: NEG
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 1
18129: NEG
18130: PUSH
18131: LD_INT 2
18133: NEG
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: LD_INT 2
18144: NEG
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: LD_INT 1
18155: NEG
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 2
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 2
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 1
18203: NEG
18204: PUSH
18205: LD_INT 1
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 2
18214: NEG
18215: PUSH
18216: LD_INT 1
18218: NEG
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 2
18226: NEG
18227: PUSH
18228: LD_INT 2
18230: NEG
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: LD_INT 3
18242: NEG
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: LD_INT 3
18254: NEG
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 0
18262: PUSH
18263: LD_INT 3
18265: NEG
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: NEG
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 3
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 3
18294: PUSH
18295: LD_INT 3
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: LD_INT 3
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 3
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: NEG
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 3
18345: NEG
18346: PUSH
18347: LD_INT 2
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 3
18357: NEG
18358: PUSH
18359: LD_INT 3
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18398: LD_ADDR_VAR 0 46
18402: PUSH
18403: LD_INT 0
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 0
18415: PUSH
18416: LD_INT 1
18418: NEG
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: LD_INT 0
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 1
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 0
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: LD_INT 0
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: NEG
18480: PUSH
18481: LD_INT 2
18483: NEG
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: LD_INT 2
18494: NEG
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 2
18513: PUSH
18514: LD_INT 0
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: PUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: PUSH
18531: LD_INT 1
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 0
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: NEG
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: NEG
18565: PUSH
18566: LD_INT 0
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: NEG
18576: PUSH
18577: LD_INT 1
18579: NEG
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 1
18587: NEG
18588: PUSH
18589: LD_INT 3
18591: NEG
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 3
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 2
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 3
18632: PUSH
18633: LD_INT 0
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 3
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: LD_INT 3
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 0
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: LD_INT 2
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 2
18683: NEG
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 3
18694: NEG
18695: PUSH
18696: LD_INT 0
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 3
18705: NEG
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18746: LD_ADDR_VAR 0 47
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 0
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 0
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PUSH
18802: LD_INT 1
18804: NEG
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: NEG
18816: PUSH
18817: LD_INT 1
18819: NEG
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: LD_INT 2
18831: NEG
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: LD_INT 2
18842: NEG
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 1
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 2
18861: NEG
18862: PUSH
18863: LD_INT 1
18865: NEG
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 2
18873: NEG
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18897: LD_ADDR_VAR 0 48
18901: PUSH
18902: LD_INT 0
18904: PUSH
18905: LD_INT 0
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 1
18917: NEG
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 1
18925: PUSH
18926: LD_INT 0
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 1
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 0
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: NEG
18956: PUSH
18957: LD_INT 0
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PUSH
18964: LD_INT 1
18966: NEG
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: LD_INT 2
18982: NEG
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: LD_INT 2
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: LD_INT 1
19004: NEG
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: LD_INT 0
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 2
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
19044: LD_ADDR_VAR 0 49
19048: PUSH
19049: LD_INT 0
19051: PUSH
19052: LD_INT 0
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 0
19061: PUSH
19062: LD_INT 1
19064: NEG
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 0
19092: PUSH
19093: LD_INT 1
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: LD_INT 0
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: PUSH
19111: LD_INT 1
19113: NEG
19114: PUSH
19115: LD_INT 1
19117: NEG
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 1
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
19188: LD_ADDR_VAR 0 50
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: LD_INT 0
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PUSH
19214: LD_INT 1
19216: PUSH
19217: LD_INT 0
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: NEG
19247: PUSH
19248: LD_INT 0
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: LD_INT 1
19261: NEG
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 1
19309: NEG
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19332: LD_ADDR_VAR 0 51
19336: PUSH
19337: LD_INT 0
19339: PUSH
19340: LD_INT 0
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 0
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 1
19370: PUSH
19371: LD_INT 1
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 0
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 1
19390: NEG
19391: PUSH
19392: LD_INT 0
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: LD_INT 1
19401: NEG
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 0
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 1
19433: NEG
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 2
19444: NEG
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 2
19455: NEG
19456: PUSH
19457: LD_INT 1
19459: NEG
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19479: LD_ADDR_VAR 0 52
19483: PUSH
19484: LD_INT 0
19486: PUSH
19487: LD_INT 0
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: LD_INT 1
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 1
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 1
19537: NEG
19538: PUSH
19539: LD_INT 0
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: LD_INT 1
19552: NEG
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: LD_INT 2
19564: NEG
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 1
19572: NEG
19573: PUSH
19574: LD_INT 1
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 2
19606: NEG
19607: PUSH
19608: LD_INT 2
19610: NEG
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: LIST
19629: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19630: LD_ADDR_VAR 0 53
19634: PUSH
19635: LD_INT 0
19637: PUSH
19638: LD_INT 0
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 0
19647: PUSH
19648: LD_INT 1
19650: NEG
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 1
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: PUSH
19676: LD_INT 0
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 1
19688: NEG
19689: PUSH
19690: LD_INT 0
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: NEG
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 2
19726: NEG
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: LD_INT 2
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 0
19785: PUSH
19786: LD_INT 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 1
19795: NEG
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 2
19806: NEG
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: NEG
19818: PUSH
19819: LD_INT 1
19821: NEG
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 2
19829: NEG
19830: PUSH
19831: LD_INT 2
19833: NEG
19834: PUSH
19835: EMPTY
19836: LIST
19837: LIST
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19860: LD_ADDR_VAR 0 54
19864: PUSH
19865: LD_INT 0
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 0
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 1
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 1
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 0
19908: PUSH
19909: LD_INT 1
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: NEG
19919: PUSH
19920: LD_INT 0
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 1
19929: NEG
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: NEG
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: LD_INT 1
19967: NEG
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 1
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: LD_INT 2
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 1
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 0
20015: PUSH
20016: LD_INT 2
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 2
20036: NEG
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 2
20047: NEG
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 2
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20090: LD_ADDR_VAR 0 55
20094: PUSH
20095: LD_INT 0
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 0
20107: PUSH
20108: LD_INT 1
20110: NEG
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: PUSH
20116: LD_INT 1
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 1
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 1
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 1
20197: NEG
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 2
20225: PUSH
20226: LD_INT 2
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: LD_INT 2
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: PUSH
20243: LD_INT 0
20245: PUSH
20246: LD_INT 2
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PUSH
20253: LD_INT 1
20255: NEG
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 2
20266: NEG
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 2
20277: NEG
20278: PUSH
20279: LD_INT 1
20281: NEG
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 2
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20320: LD_ADDR_VAR 0 56
20324: PUSH
20325: LD_INT 0
20327: PUSH
20328: LD_INT 0
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 0
20337: PUSH
20338: LD_INT 1
20340: NEG
20341: PUSH
20342: EMPTY
20343: LIST
20344: LIST
20345: PUSH
20346: LD_INT 1
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 0
20368: PUSH
20369: LD_INT 1
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 1
20378: NEG
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 1
20389: NEG
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: NEG
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: LD_INT 1
20427: NEG
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: PUSH
20446: LD_INT 1
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 1
20465: PUSH
20466: LD_INT 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 0
20475: PUSH
20476: LD_INT 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PUSH
20483: LD_INT 1
20485: NEG
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 2
20496: NEG
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: LD_INT 1
20511: NEG
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 2
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20550: LD_ADDR_VAR 0 57
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 0
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 1
20570: NEG
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: PUSH
20589: LD_INT 1
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: PUSH
20596: LD_INT 0
20598: PUSH
20599: LD_INT 1
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: NEG
20609: PUSH
20610: LD_INT 0
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: LD_INT 2
20646: NEG
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: PUSH
20652: LD_INT 1
20654: PUSH
20655: LD_INT 1
20657: NEG
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: LD_INT 0
20668: PUSH
20669: EMPTY
20670: LIST
20671: LIST
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: LD_INT 1
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: LD_INT 2
20685: PUSH
20686: LD_INT 2
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 1
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: LD_INT 2
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 2
20737: NEG
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 2
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20780: LD_ADDR_VAR 0 58
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 0
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: LD_INT 1
20800: NEG
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 0
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 0
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: LD_INT 1
20838: NEG
20839: PUSH
20840: LD_INT 0
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 1
20849: NEG
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: LD_INT 2
20876: NEG
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 2
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 1
20945: NEG
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 2
20956: NEG
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 2
20967: NEG
20968: PUSH
20969: LD_INT 1
20971: NEG
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: LD_INT 2
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21010: LD_ADDR_VAR 0 59
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: LD_INT 1
21030: NEG
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: LD_INT 0
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: LD_INT 1
21048: PUSH
21049: LD_INT 1
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 1
21068: NEG
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 1
21079: NEG
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21098: LD_ADDR_VAR 0 60
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 1
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 0
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: LD_INT 1
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 1
21156: NEG
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21186: LD_ADDR_VAR 0 61
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: PUSH
21201: LD_INT 0
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PUSH
21225: LD_INT 1
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: LD_INT 1
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 1
21244: NEG
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 1
21255: NEG
21256: PUSH
21257: LD_INT 1
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21274: LD_ADDR_VAR 0 62
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 0
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 0
21291: PUSH
21292: LD_INT 1
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 0
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 1
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 0
21322: PUSH
21323: LD_INT 1
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21362: LD_ADDR_VAR 0 63
21366: PUSH
21367: LD_INT 0
21369: PUSH
21370: LD_INT 0
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 0
21379: PUSH
21380: LD_INT 1
21382: NEG
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: LD_INT 0
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 1
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 1
21420: NEG
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21450: LD_ADDR_VAR 0 64
21454: PUSH
21455: LD_INT 0
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 1
21478: PUSH
21479: LD_INT 0
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 1
21508: NEG
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: ST_TO_ADDR
// end ; 1 :
21538: GO 27435
21540: LD_INT 1
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21548
21546: GO 24171
21548: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21549: LD_ADDR_VAR 0 11
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 3
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 0
21568: PUSH
21569: LD_INT 3
21571: NEG
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 1
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21593: LD_ADDR_VAR 0 12
21597: PUSH
21598: LD_INT 2
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 3
21611: PUSH
21612: LD_INT 0
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 3
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: LIST
21633: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21634: LD_ADDR_VAR 0 13
21638: PUSH
21639: LD_INT 3
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: LD_INT 3
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 3
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21674: LD_ADDR_VAR 0 14
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 0
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: NEG
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21715: LD_ADDR_VAR 0 15
21719: PUSH
21720: LD_INT 2
21722: NEG
21723: PUSH
21724: LD_INT 1
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 3
21733: NEG
21734: PUSH
21735: LD_INT 0
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 3
21744: NEG
21745: PUSH
21746: LD_INT 1
21748: NEG
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21759: LD_ADDR_VAR 0 16
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: LD_INT 3
21770: NEG
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 3
21778: NEG
21779: PUSH
21780: LD_INT 2
21782: NEG
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 3
21790: NEG
21791: PUSH
21792: LD_INT 3
21794: NEG
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21805: LD_ADDR_VAR 0 17
21809: PUSH
21810: LD_INT 1
21812: NEG
21813: PUSH
21814: LD_INT 3
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: LD_INT 3
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: LD_INT 2
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21849: LD_ADDR_VAR 0 18
21853: PUSH
21854: LD_INT 2
21856: PUSH
21857: LD_INT 1
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 3
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: LD_INT 1
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: LIST
21889: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21890: LD_ADDR_VAR 0 19
21894: PUSH
21895: LD_INT 3
21897: PUSH
21898: LD_INT 2
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 3
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: LD_INT 3
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: LIST
21929: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21930: LD_ADDR_VAR 0 20
21934: PUSH
21935: LD_INT 1
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: LIST
21970: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21971: LD_ADDR_VAR 0 21
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 3
21989: NEG
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 3
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22015: LD_ADDR_VAR 0 22
22019: PUSH
22020: LD_INT 2
22022: NEG
22023: PUSH
22024: LD_INT 3
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 3
22034: NEG
22035: PUSH
22036: LD_INT 2
22038: NEG
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 3
22046: NEG
22047: PUSH
22048: LD_INT 3
22050: NEG
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: LIST
22060: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
22061: LD_ADDR_VAR 0 23
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 3
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: NEG
22080: PUSH
22081: LD_INT 4
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 1
22091: PUSH
22092: LD_INT 3
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
22105: LD_ADDR_VAR 0 24
22109: PUSH
22110: LD_INT 3
22112: PUSH
22113: LD_INT 0
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 3
22122: PUSH
22123: LD_INT 1
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 4
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
22146: LD_ADDR_VAR 0 25
22150: PUSH
22151: LD_INT 3
22153: PUSH
22154: LD_INT 3
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 4
22163: PUSH
22164: LD_INT 3
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 3
22173: PUSH
22174: LD_INT 4
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
22186: LD_ADDR_VAR 0 26
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: LD_INT 3
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 4
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: NEG
22214: PUSH
22215: LD_INT 3
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
22227: LD_ADDR_VAR 0 27
22231: PUSH
22232: LD_INT 3
22234: NEG
22235: PUSH
22236: LD_INT 0
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 3
22245: NEG
22246: PUSH
22247: LD_INT 1
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 4
22256: NEG
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: LIST
22270: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22271: LD_ADDR_VAR 0 28
22275: PUSH
22276: LD_INT 3
22278: NEG
22279: PUSH
22280: LD_INT 3
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 3
22290: NEG
22291: PUSH
22292: LD_INT 4
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 4
22302: NEG
22303: PUSH
22304: LD_INT 3
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22317: LD_ADDR_VAR 0 29
22321: PUSH
22322: LD_INT 1
22324: NEG
22325: PUSH
22326: LD_INT 3
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: LD_INT 3
22339: NEG
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: LD_INT 2
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: LD_INT 4
22362: NEG
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: LD_INT 4
22373: NEG
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 3
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: NEG
22393: PUSH
22394: LD_INT 5
22396: NEG
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 5
22407: NEG
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: LD_INT 4
22418: NEG
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 1
22426: NEG
22427: PUSH
22428: LD_INT 6
22430: NEG
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: LD_INT 6
22441: NEG
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: PUSH
22450: LD_INT 5
22452: NEG
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22472: LD_ADDR_VAR 0 30
22476: PUSH
22477: LD_INT 2
22479: PUSH
22480: LD_INT 1
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 3
22510: PUSH
22511: LD_INT 1
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 4
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 4
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 4
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 5
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 5
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 5
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 6
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 6
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22615: LD_ADDR_VAR 0 31
22619: PUSH
22620: LD_INT 3
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 3
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 3
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 4
22652: PUSH
22653: LD_INT 3
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 4
22662: PUSH
22663: LD_INT 4
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 3
22672: PUSH
22673: LD_INT 4
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 5
22682: PUSH
22683: LD_INT 4
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 5
22692: PUSH
22693: LD_INT 5
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 4
22702: PUSH
22703: LD_INT 5
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 6
22712: PUSH
22713: LD_INT 5
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 6
22722: PUSH
22723: LD_INT 6
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 5
22732: PUSH
22733: LD_INT 6
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22754: LD_ADDR_VAR 0 32
22758: PUSH
22759: LD_INT 1
22761: PUSH
22762: LD_INT 3
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: LD_INT 3
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 4
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 4
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 1
22812: NEG
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 5
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 5
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 4
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PUSH
22855: LD_INT 6
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 0
22864: PUSH
22865: LD_INT 6
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 1
22874: NEG
22875: PUSH
22876: LD_INT 5
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22897: LD_ADDR_VAR 0 33
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 3
22926: NEG
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 3
22938: NEG
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 4
22949: NEG
22950: PUSH
22951: LD_INT 0
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 4
22960: NEG
22961: PUSH
22962: LD_INT 1
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 4
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 5
22983: NEG
22984: PUSH
22985: LD_INT 0
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 5
22994: NEG
22995: PUSH
22996: LD_INT 1
22998: NEG
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PUSH
23004: LD_INT 5
23006: NEG
23007: PUSH
23008: LD_INT 1
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 6
23017: NEG
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 6
23028: NEG
23029: PUSH
23030: LD_INT 1
23032: NEG
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
23052: LD_ADDR_VAR 0 34
23056: PUSH
23057: LD_INT 2
23059: NEG
23060: PUSH
23061: LD_INT 3
23063: NEG
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 3
23071: NEG
23072: PUSH
23073: LD_INT 2
23075: NEG
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 3
23083: NEG
23084: PUSH
23085: LD_INT 3
23087: NEG
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 3
23095: NEG
23096: PUSH
23097: LD_INT 4
23099: NEG
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 4
23107: NEG
23108: PUSH
23109: LD_INT 3
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 4
23119: NEG
23120: PUSH
23121: LD_INT 4
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 4
23131: NEG
23132: PUSH
23133: LD_INT 5
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 5
23143: NEG
23144: PUSH
23145: LD_INT 4
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 5
23155: NEG
23156: PUSH
23157: LD_INT 5
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 5
23167: NEG
23168: PUSH
23169: LD_INT 6
23171: NEG
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 6
23179: NEG
23180: PUSH
23181: LD_INT 5
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 6
23191: NEG
23192: PUSH
23193: LD_INT 6
23195: NEG
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
23215: LD_ADDR_VAR 0 41
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: LD_INT 3
23237: NEG
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23259: LD_ADDR_VAR 0 42
23263: PUSH
23264: LD_INT 2
23266: PUSH
23267: LD_INT 0
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 1
23279: NEG
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 3
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23300: LD_ADDR_VAR 0 43
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 3
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23340: LD_ADDR_VAR 0 44
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: PUSH
23358: LD_INT 3
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: LIST
23380: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23381: LD_ADDR_VAR 0 45
23385: PUSH
23386: LD_INT 2
23388: NEG
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 3
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23425: LD_ADDR_VAR 0 46
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 3
23456: NEG
23457: PUSH
23458: LD_INT 2
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23471: LD_ADDR_VAR 0 47
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 3
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 1
23490: NEG
23491: PUSH
23492: LD_INT 3
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23504: LD_ADDR_VAR 0 48
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 2
23514: NEG
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23535: LD_ADDR_VAR 0 49
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: LD_INT 1
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 3
23552: PUSH
23553: LD_INT 2
23555: PUSH
23556: EMPTY
23557: LIST
23558: LIST
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23564: LD_ADDR_VAR 0 50
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 3
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 3
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23593: LD_ADDR_VAR 0 51
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23624: LD_ADDR_VAR 0 52
23628: PUSH
23629: LD_INT 3
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 3
23643: NEG
23644: PUSH
23645: LD_INT 2
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23657: LD_ADDR_VAR 0 53
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: LD_INT 3
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 0
23676: PUSH
23677: LD_INT 3
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 2
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23701: LD_ADDR_VAR 0 54
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PUSH
23717: LD_INT 3
23719: PUSH
23720: LD_INT 0
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 3
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: LIST
23741: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23742: LD_ADDR_VAR 0 55
23746: PUSH
23747: LD_INT 3
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 3
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 2
23769: PUSH
23770: LD_INT 3
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: LIST
23781: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23782: LD_ADDR_VAR 0 56
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: LD_INT 3
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: LD_INT 0
23799: PUSH
23800: LD_INT 3
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: NEG
23810: PUSH
23811: LD_INT 2
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23823: LD_ADDR_VAR 0 57
23827: PUSH
23828: LD_INT 2
23830: NEG
23831: PUSH
23832: LD_INT 1
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 3
23841: NEG
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 3
23852: NEG
23853: PUSH
23854: LD_INT 1
23856: NEG
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23867: LD_ADDR_VAR 0 58
23871: PUSH
23872: LD_INT 2
23874: NEG
23875: PUSH
23876: LD_INT 3
23878: NEG
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 3
23886: NEG
23887: PUSH
23888: LD_INT 2
23890: NEG
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 3
23898: NEG
23899: PUSH
23900: LD_INT 3
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: LIST
23912: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23913: LD_ADDR_VAR 0 59
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: LD_INT 2
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 2
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23957: LD_ADDR_VAR 0 60
23961: PUSH
23962: LD_INT 1
23964: PUSH
23965: LD_INT 1
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 2
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23998: LD_ADDR_VAR 0 61
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: LD_INT 1
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 2
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24038: LD_ADDR_VAR 0 62
24042: PUSH
24043: LD_INT 1
24045: PUSH
24046: LD_INT 2
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: NEG
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24079: LD_ADDR_VAR 0 63
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: NEG
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24123: LD_ADDR_VAR 0 64
24127: PUSH
24128: LD_INT 1
24130: NEG
24131: PUSH
24132: LD_INT 2
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 2
24142: NEG
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: LD_INT 2
24154: NEG
24155: PUSH
24156: LD_INT 2
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: LIST
24168: ST_TO_ADDR
// end ; 2 :
24169: GO 27435
24171: LD_INT 2
24173: DOUBLE
24174: EQUAL
24175: IFTRUE 24179
24177: GO 27434
24179: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
24180: LD_ADDR_VAR 0 29
24184: PUSH
24185: LD_INT 4
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 5
24208: PUSH
24209: LD_INT 0
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 5
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 4
24228: PUSH
24229: LD_INT 1
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 3
24238: PUSH
24239: LD_INT 0
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 3
24248: PUSH
24249: LD_INT 1
24251: NEG
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 5
24270: PUSH
24271: LD_INT 2
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 3
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: PUSH
24291: LD_INT 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 4
24300: PUSH
24301: LD_INT 3
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 4
24310: PUSH
24311: LD_INT 4
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 4
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 2
24330: PUSH
24331: LD_INT 3
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: LD_INT 2
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 4
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 2
24360: PUSH
24361: LD_INT 4
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: LD_INT 4
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 1
24390: PUSH
24391: LD_INT 4
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: LD_INT 5
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 0
24410: PUSH
24411: LD_INT 5
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 4
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: PUSH
24433: LD_INT 3
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 2
24442: PUSH
24443: LD_INT 5
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: NEG
24453: PUSH
24454: LD_INT 3
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 3
24463: NEG
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 3
24474: NEG
24475: PUSH
24476: LD_INT 1
24478: NEG
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: NEG
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 2
24497: NEG
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 3
24508: NEG
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 4
24519: NEG
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 4
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 4
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 4
24565: NEG
24566: PUSH
24567: LD_INT 4
24569: NEG
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 4
24577: NEG
24578: PUSH
24579: LD_INT 5
24581: NEG
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: NEG
24590: PUSH
24591: LD_INT 4
24593: NEG
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 3
24601: NEG
24602: PUSH
24603: LD_INT 3
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 4
24613: NEG
24614: PUSH
24615: LD_INT 3
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 5
24625: NEG
24626: PUSH
24627: LD_INT 4
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 5
24637: NEG
24638: PUSH
24639: LD_INT 5
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 3
24649: NEG
24650: PUSH
24651: LD_INT 5
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 5
24661: NEG
24662: PUSH
24663: LD_INT 3
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24718: LD_ADDR_VAR 0 30
24722: PUSH
24723: LD_INT 4
24725: PUSH
24726: LD_INT 4
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 4
24735: PUSH
24736: LD_INT 3
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 5
24745: PUSH
24746: LD_INT 4
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 5
24755: PUSH
24756: LD_INT 5
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 4
24765: PUSH
24766: LD_INT 5
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: LD_INT 4
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 3
24785: PUSH
24786: LD_INT 3
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 5
24795: PUSH
24796: LD_INT 3
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 3
24805: PUSH
24806: LD_INT 5
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 3
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 1
24835: PUSH
24836: LD_INT 3
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: LD_INT 4
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 4
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 3
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 2
24887: PUSH
24888: LD_INT 4
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: LD_INT 2
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 4
24908: NEG
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 4
24919: NEG
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 3
24931: NEG
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 3
24942: NEG
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 4
24953: NEG
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 5
24964: NEG
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 5
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 5
24987: NEG
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: NEG
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 3
25010: NEG
25011: PUSH
25012: LD_INT 3
25014: NEG
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 3
25022: NEG
25023: PUSH
25024: LD_INT 4
25026: NEG
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: LD_INT 3
25038: NEG
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 2
25046: NEG
25047: PUSH
25048: LD_INT 2
25050: NEG
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 3
25058: NEG
25059: PUSH
25060: LD_INT 2
25062: NEG
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 4
25070: NEG
25071: PUSH
25072: LD_INT 3
25074: NEG
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 4
25082: NEG
25083: PUSH
25084: LD_INT 4
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 2
25094: NEG
25095: PUSH
25096: LD_INT 4
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 4
25106: NEG
25107: PUSH
25108: LD_INT 2
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 4
25121: NEG
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: PUSH
25127: LD_INT 0
25129: PUSH
25130: LD_INT 5
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 4
25143: NEG
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PUSH
25149: LD_INT 1
25151: PUSH
25152: LD_INT 3
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 3
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: LD_INT 4
25177: NEG
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: LD_INT 5
25189: NEG
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: PUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 3
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: LD_INT 5
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25265: LD_ADDR_VAR 0 31
25269: PUSH
25270: LD_INT 0
25272: PUSH
25273: LD_INT 4
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 0
25282: PUSH
25283: LD_INT 3
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 4
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 5
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 5
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: LD_INT 4
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 5
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 2
25354: NEG
25355: PUSH
25356: LD_INT 3
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 3
25376: NEG
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: NEG
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 3
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 4
25421: NEG
25422: PUSH
25423: LD_INT 0
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: LD_INT 4
25432: NEG
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 4
25444: NEG
25445: PUSH
25446: LD_INT 2
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 4
25467: NEG
25468: PUSH
25469: LD_INT 4
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 4
25479: NEG
25480: PUSH
25481: LD_INT 5
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 3
25491: NEG
25492: PUSH
25493: LD_INT 4
25495: NEG
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 3
25503: NEG
25504: PUSH
25505: LD_INT 3
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 4
25515: NEG
25516: PUSH
25517: LD_INT 3
25519: NEG
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 5
25527: NEG
25528: PUSH
25529: LD_INT 4
25531: NEG
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 5
25539: NEG
25540: PUSH
25541: LD_INT 5
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 3
25551: NEG
25552: PUSH
25553: LD_INT 5
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 5
25563: NEG
25564: PUSH
25565: LD_INT 3
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 3
25578: NEG
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 4
25589: NEG
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 3
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: NEG
25631: PUSH
25632: LD_INT 3
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: NEG
25643: PUSH
25644: LD_INT 4
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 2
25657: NEG
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PUSH
25663: LD_INT 2
25665: NEG
25666: PUSH
25667: LD_INT 4
25669: NEG
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 4
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 4
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 5
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 5
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 4
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 3
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 3
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: LD_INT 2
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 5
25760: PUSH
25761: LD_INT 2
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25815: LD_ADDR_VAR 0 32
25819: PUSH
25820: LD_INT 4
25822: NEG
25823: PUSH
25824: LD_INT 0
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 4
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 3
25845: NEG
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 4
25867: NEG
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 5
25878: NEG
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 5
25889: NEG
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 5
25901: NEG
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 3
25913: NEG
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 3
25924: NEG
25925: PUSH
25926: LD_INT 3
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 3
25936: NEG
25937: PUSH
25938: LD_INT 4
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 2
25948: NEG
25949: PUSH
25950: LD_INT 3
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: LD_INT 2
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 3
25972: NEG
25973: PUSH
25974: LD_INT 2
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 4
25984: NEG
25985: PUSH
25986: LD_INT 3
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 4
25996: NEG
25997: PUSH
25998: LD_INT 4
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 4
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: LD_INT 4
26020: NEG
26021: PUSH
26022: LD_INT 2
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 0
26032: PUSH
26033: LD_INT 4
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 5
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 4
26057: NEG
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: LD_INT 3
26068: NEG
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: LD_INT 3
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 4
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 5
26103: NEG
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: LD_INT 3
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: LD_INT 5
26126: NEG
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 3
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 3
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 4
26155: PUSH
26156: LD_INT 0
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 4
26165: PUSH
26166: LD_INT 1
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 3
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 2
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 2
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 2
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 4
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 4
26227: PUSH
26228: LD_INT 4
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 4
26237: PUSH
26238: LD_INT 3
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 5
26247: PUSH
26248: LD_INT 4
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 5
26257: PUSH
26258: LD_INT 5
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 4
26267: PUSH
26268: LD_INT 5
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 3
26277: PUSH
26278: LD_INT 4
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 3
26287: PUSH
26288: LD_INT 3
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 5
26297: PUSH
26298: LD_INT 3
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 3
26307: PUSH
26308: LD_INT 5
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26362: LD_ADDR_VAR 0 33
26366: PUSH
26367: LD_INT 4
26369: NEG
26370: PUSH
26371: LD_INT 4
26373: NEG
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 4
26381: NEG
26382: PUSH
26383: LD_INT 5
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 3
26393: NEG
26394: PUSH
26395: LD_INT 4
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 3
26405: NEG
26406: PUSH
26407: LD_INT 3
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 4
26417: NEG
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 5
26429: NEG
26430: PUSH
26431: LD_INT 4
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 5
26441: NEG
26442: PUSH
26443: LD_INT 5
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 3
26453: NEG
26454: PUSH
26455: LD_INT 5
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 5
26465: NEG
26466: PUSH
26467: LD_INT 3
26469: NEG
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 3
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 4
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 1
26499: PUSH
26500: LD_INT 3
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 2
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 3
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 4
26548: NEG
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 2
26556: PUSH
26557: LD_INT 2
26559: NEG
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: LD_INT 4
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 4
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 5
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 5
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 4
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 3
26651: PUSH
26652: LD_INT 2
26654: NEG
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 5
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: LD_INT 3
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 2
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 4
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 4
26702: PUSH
26703: LD_INT 4
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 3
26712: PUSH
26713: LD_INT 4
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 2
26722: PUSH
26723: LD_INT 3
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 4
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: PUSH
26753: LD_INT 4
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 4
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 3
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 4
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 5
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: LD_INT 5
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: LD_INT 4
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 3
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 2
26834: PUSH
26835: LD_INT 5
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: LD_INT 3
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26900: LD_ADDR_VAR 0 34
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 4
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 5
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 4
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: LD_INT 3
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 0
26951: PUSH
26952: LD_INT 3
26954: NEG
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 4
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 5
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: LD_INT 3
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: LD_INT 5
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 3
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 3
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 4
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 3
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 2
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 2
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 4
27092: PUSH
27093: LD_INT 2
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 4
27102: PUSH
27103: LD_INT 4
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 4
27112: PUSH
27113: LD_INT 3
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 5
27122: PUSH
27123: LD_INT 4
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 5
27132: PUSH
27133: LD_INT 5
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 4
27142: PUSH
27143: LD_INT 5
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 3
27152: PUSH
27153: LD_INT 4
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 3
27162: PUSH
27163: LD_INT 3
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: LD_INT 5
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: LD_INT 5
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: LD_INT 3
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 4
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 4
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 2
27264: PUSH
27265: LD_INT 4
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 2
27274: NEG
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 4
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 4
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 4
27330: NEG
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 5
27341: NEG
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 5
27352: NEG
27353: PUSH
27354: LD_INT 1
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 5
27364: NEG
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 3
27376: NEG
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: ST_TO_ADDR
// end ; end ;
27432: GO 27435
27434: POP
// case btype of b_depot , b_warehouse :
27435: LD_VAR 0 1
27439: PUSH
27440: LD_INT 0
27442: DOUBLE
27443: EQUAL
27444: IFTRUE 27454
27446: LD_INT 1
27448: DOUBLE
27449: EQUAL
27450: IFTRUE 27454
27452: GO 27655
27454: POP
// case nation of nation_american :
27455: LD_VAR 0 5
27459: PUSH
27460: LD_INT 1
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27524
27468: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27469: LD_ADDR_VAR 0 9
27473: PUSH
27474: LD_VAR 0 11
27478: PUSH
27479: LD_VAR 0 12
27483: PUSH
27484: LD_VAR 0 13
27488: PUSH
27489: LD_VAR 0 14
27493: PUSH
27494: LD_VAR 0 15
27498: PUSH
27499: LD_VAR 0 16
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: PUSH
27512: LD_VAR 0 4
27516: PUSH
27517: LD_INT 1
27519: PLUS
27520: ARRAY
27521: ST_TO_ADDR
27522: GO 27653
27524: LD_INT 2
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27532
27530: GO 27588
27532: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27533: LD_ADDR_VAR 0 9
27537: PUSH
27538: LD_VAR 0 17
27542: PUSH
27543: LD_VAR 0 18
27547: PUSH
27548: LD_VAR 0 19
27552: PUSH
27553: LD_VAR 0 20
27557: PUSH
27558: LD_VAR 0 21
27562: PUSH
27563: LD_VAR 0 22
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: PUSH
27576: LD_VAR 0 4
27580: PUSH
27581: LD_INT 1
27583: PLUS
27584: ARRAY
27585: ST_TO_ADDR
27586: GO 27653
27588: LD_INT 3
27590: DOUBLE
27591: EQUAL
27592: IFTRUE 27596
27594: GO 27652
27596: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27597: LD_ADDR_VAR 0 9
27601: PUSH
27602: LD_VAR 0 23
27606: PUSH
27607: LD_VAR 0 24
27611: PUSH
27612: LD_VAR 0 25
27616: PUSH
27617: LD_VAR 0 26
27621: PUSH
27622: LD_VAR 0 27
27626: PUSH
27627: LD_VAR 0 28
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: PUSH
27640: LD_VAR 0 4
27644: PUSH
27645: LD_INT 1
27647: PLUS
27648: ARRAY
27649: ST_TO_ADDR
27650: GO 27653
27652: POP
27653: GO 28202
27655: LD_INT 2
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27669
27661: LD_INT 3
27663: DOUBLE
27664: EQUAL
27665: IFTRUE 27669
27667: GO 27725
27669: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27670: LD_ADDR_VAR 0 9
27674: PUSH
27675: LD_VAR 0 29
27679: PUSH
27680: LD_VAR 0 30
27684: PUSH
27685: LD_VAR 0 31
27689: PUSH
27690: LD_VAR 0 32
27694: PUSH
27695: LD_VAR 0 33
27699: PUSH
27700: LD_VAR 0 34
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: PUSH
27713: LD_VAR 0 4
27717: PUSH
27718: LD_INT 1
27720: PLUS
27721: ARRAY
27722: ST_TO_ADDR
27723: GO 28202
27725: LD_INT 16
27727: DOUBLE
27728: EQUAL
27729: IFTRUE 27781
27731: LD_INT 17
27733: DOUBLE
27734: EQUAL
27735: IFTRUE 27781
27737: LD_INT 18
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27781
27743: LD_INT 19
27745: DOUBLE
27746: EQUAL
27747: IFTRUE 27781
27749: LD_INT 20
27751: DOUBLE
27752: EQUAL
27753: IFTRUE 27781
27755: LD_INT 21
27757: DOUBLE
27758: EQUAL
27759: IFTRUE 27781
27761: LD_INT 23
27763: DOUBLE
27764: EQUAL
27765: IFTRUE 27781
27767: LD_INT 24
27769: DOUBLE
27770: EQUAL
27771: IFTRUE 27781
27773: LD_INT 25
27775: DOUBLE
27776: EQUAL
27777: IFTRUE 27781
27779: GO 27837
27781: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27782: LD_ADDR_VAR 0 9
27786: PUSH
27787: LD_VAR 0 35
27791: PUSH
27792: LD_VAR 0 36
27796: PUSH
27797: LD_VAR 0 37
27801: PUSH
27802: LD_VAR 0 38
27806: PUSH
27807: LD_VAR 0 39
27811: PUSH
27812: LD_VAR 0 40
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: PUSH
27825: LD_VAR 0 4
27829: PUSH
27830: LD_INT 1
27832: PLUS
27833: ARRAY
27834: ST_TO_ADDR
27835: GO 28202
27837: LD_INT 6
27839: DOUBLE
27840: EQUAL
27841: IFTRUE 27893
27843: LD_INT 7
27845: DOUBLE
27846: EQUAL
27847: IFTRUE 27893
27849: LD_INT 8
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27893
27855: LD_INT 13
27857: DOUBLE
27858: EQUAL
27859: IFTRUE 27893
27861: LD_INT 12
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27893
27867: LD_INT 15
27869: DOUBLE
27870: EQUAL
27871: IFTRUE 27893
27873: LD_INT 11
27875: DOUBLE
27876: EQUAL
27877: IFTRUE 27893
27879: LD_INT 14
27881: DOUBLE
27882: EQUAL
27883: IFTRUE 27893
27885: LD_INT 10
27887: DOUBLE
27888: EQUAL
27889: IFTRUE 27893
27891: GO 27949
27893: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27894: LD_ADDR_VAR 0 9
27898: PUSH
27899: LD_VAR 0 41
27903: PUSH
27904: LD_VAR 0 42
27908: PUSH
27909: LD_VAR 0 43
27913: PUSH
27914: LD_VAR 0 44
27918: PUSH
27919: LD_VAR 0 45
27923: PUSH
27924: LD_VAR 0 46
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: PUSH
27937: LD_VAR 0 4
27941: PUSH
27942: LD_INT 1
27944: PLUS
27945: ARRAY
27946: ST_TO_ADDR
27947: GO 28202
27949: LD_INT 36
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 28013
27957: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27958: LD_ADDR_VAR 0 9
27962: PUSH
27963: LD_VAR 0 47
27967: PUSH
27968: LD_VAR 0 48
27972: PUSH
27973: LD_VAR 0 49
27977: PUSH
27978: LD_VAR 0 50
27982: PUSH
27983: LD_VAR 0 51
27987: PUSH
27988: LD_VAR 0 52
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: PUSH
28001: LD_VAR 0 4
28005: PUSH
28006: LD_INT 1
28008: PLUS
28009: ARRAY
28010: ST_TO_ADDR
28011: GO 28202
28013: LD_INT 4
28015: DOUBLE
28016: EQUAL
28017: IFTRUE 28039
28019: LD_INT 5
28021: DOUBLE
28022: EQUAL
28023: IFTRUE 28039
28025: LD_INT 34
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28039
28031: LD_INT 37
28033: DOUBLE
28034: EQUAL
28035: IFTRUE 28039
28037: GO 28095
28039: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
28040: LD_ADDR_VAR 0 9
28044: PUSH
28045: LD_VAR 0 53
28049: PUSH
28050: LD_VAR 0 54
28054: PUSH
28055: LD_VAR 0 55
28059: PUSH
28060: LD_VAR 0 56
28064: PUSH
28065: LD_VAR 0 57
28069: PUSH
28070: LD_VAR 0 58
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: PUSH
28083: LD_VAR 0 4
28087: PUSH
28088: LD_INT 1
28090: PLUS
28091: ARRAY
28092: ST_TO_ADDR
28093: GO 28202
28095: LD_INT 31
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28145
28101: LD_INT 32
28103: DOUBLE
28104: EQUAL
28105: IFTRUE 28145
28107: LD_INT 33
28109: DOUBLE
28110: EQUAL
28111: IFTRUE 28145
28113: LD_INT 27
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28145
28119: LD_INT 26
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28145
28125: LD_INT 28
28127: DOUBLE
28128: EQUAL
28129: IFTRUE 28145
28131: LD_INT 29
28133: DOUBLE
28134: EQUAL
28135: IFTRUE 28145
28137: LD_INT 30
28139: DOUBLE
28140: EQUAL
28141: IFTRUE 28145
28143: GO 28201
28145: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
28146: LD_ADDR_VAR 0 9
28150: PUSH
28151: LD_VAR 0 59
28155: PUSH
28156: LD_VAR 0 60
28160: PUSH
28161: LD_VAR 0 61
28165: PUSH
28166: LD_VAR 0 62
28170: PUSH
28171: LD_VAR 0 63
28175: PUSH
28176: LD_VAR 0 64
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: PUSH
28189: LD_VAR 0 4
28193: PUSH
28194: LD_INT 1
28196: PLUS
28197: ARRAY
28198: ST_TO_ADDR
28199: GO 28202
28201: POP
// temp_list2 = [ ] ;
28202: LD_ADDR_VAR 0 10
28206: PUSH
28207: EMPTY
28208: ST_TO_ADDR
// for i in temp_list do
28209: LD_ADDR_VAR 0 8
28213: PUSH
28214: LD_VAR 0 9
28218: PUSH
28219: FOR_IN
28220: IFFALSE 28272
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
28222: LD_ADDR_VAR 0 10
28226: PUSH
28227: LD_VAR 0 10
28231: PUSH
28232: LD_VAR 0 8
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PUSH
28241: LD_VAR 0 2
28245: PLUS
28246: PUSH
28247: LD_VAR 0 8
28251: PUSH
28252: LD_INT 2
28254: ARRAY
28255: PUSH
28256: LD_VAR 0 3
28260: PLUS
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: EMPTY
28267: LIST
28268: ADD
28269: ST_TO_ADDR
28270: GO 28219
28272: POP
28273: POP
// result = temp_list2 ;
28274: LD_ADDR_VAR 0 7
28278: PUSH
28279: LD_VAR 0 10
28283: ST_TO_ADDR
// end ;
28284: LD_VAR 0 7
28288: RET
// export function EnemyInRange ( unit , dist ) ; begin
28289: LD_INT 0
28291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_VAR 0 1
28301: PPUSH
28302: CALL_OW 255
28306: PPUSH
28307: LD_VAR 0 1
28311: PPUSH
28312: CALL_OW 250
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 251
28326: PPUSH
28327: LD_VAR 0 2
28331: PPUSH
28332: CALL 3731 0 4
28336: PUSH
28337: LD_INT 4
28339: ARRAY
28340: ST_TO_ADDR
// end ;
28341: LD_VAR 0 3
28345: RET
// export function PlayerSeeMe ( unit ) ; begin
28346: LD_INT 0
28348: PPUSH
// result := See ( your_side , unit ) ;
28349: LD_ADDR_VAR 0 2
28353: PUSH
28354: LD_OWVAR 2
28358: PPUSH
28359: LD_VAR 0 1
28363: PPUSH
28364: CALL_OW 292
28368: ST_TO_ADDR
// end ;
28369: LD_VAR 0 2
28373: RET
// export function ReverseDir ( unit ) ; begin
28374: LD_INT 0
28376: PPUSH
// if not unit then
28377: LD_VAR 0 1
28381: NOT
28382: IFFALSE 28386
// exit ;
28384: GO 28432
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
28386: LD_ADDR_VAR 0 2
28390: PUSH
28391: LD_INT 3
28393: PUSH
28394: LD_INT 4
28396: PUSH
28397: LD_INT 5
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: LD_INT 2
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 254
28426: PUSH
28427: LD_INT 1
28429: PLUS
28430: ARRAY
28431: ST_TO_ADDR
// end ;
28432: LD_VAR 0 2
28436: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
28437: LD_INT 0
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
28443: PPUSH
// if not hexes then
28444: LD_VAR 0 2
28448: NOT
28449: IFFALSE 28453
// exit ;
28451: GO 28601
// dist := 9999 ;
28453: LD_ADDR_VAR 0 5
28457: PUSH
28458: LD_INT 9999
28460: ST_TO_ADDR
// for i = 1 to hexes do
28461: LD_ADDR_VAR 0 4
28465: PUSH
28466: DOUBLE
28467: LD_INT 1
28469: DEC
28470: ST_TO_ADDR
28471: LD_VAR 0 2
28475: PUSH
28476: FOR_TO
28477: IFFALSE 28589
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
28479: LD_VAR 0 1
28483: PPUSH
28484: LD_VAR 0 2
28488: PUSH
28489: LD_VAR 0 4
28493: ARRAY
28494: PUSH
28495: LD_INT 1
28497: ARRAY
28498: PPUSH
28499: LD_VAR 0 2
28503: PUSH
28504: LD_VAR 0 4
28508: ARRAY
28509: PUSH
28510: LD_INT 2
28512: ARRAY
28513: PPUSH
28514: CALL_OW 297
28518: PUSH
28519: LD_VAR 0 5
28523: LESS
28524: IFFALSE 28587
// begin hex := hexes [ i ] ;
28526: LD_ADDR_VAR 0 7
28530: PUSH
28531: LD_VAR 0 2
28535: PUSH
28536: LD_VAR 0 4
28540: ARRAY
28541: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28542: LD_ADDR_VAR 0 5
28546: PUSH
28547: LD_VAR 0 1
28551: PPUSH
28552: LD_VAR 0 2
28556: PUSH
28557: LD_VAR 0 4
28561: ARRAY
28562: PUSH
28563: LD_INT 1
28565: ARRAY
28566: PPUSH
28567: LD_VAR 0 2
28571: PUSH
28572: LD_VAR 0 4
28576: ARRAY
28577: PUSH
28578: LD_INT 2
28580: ARRAY
28581: PPUSH
28582: CALL_OW 297
28586: ST_TO_ADDR
// end ; end ;
28587: GO 28476
28589: POP
28590: POP
// result := hex ;
28591: LD_ADDR_VAR 0 3
28595: PUSH
28596: LD_VAR 0 7
28600: ST_TO_ADDR
// end ;
28601: LD_VAR 0 3
28605: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28606: LD_INT 0
28608: PPUSH
28609: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28610: LD_VAR 0 1
28614: NOT
28615: PUSH
28616: LD_VAR 0 1
28620: PUSH
28621: LD_INT 21
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 23
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PPUSH
28645: CALL_OW 69
28649: IN
28650: NOT
28651: OR
28652: IFFALSE 28656
// exit ;
28654: GO 28703
// for i = 1 to 3 do
28656: LD_ADDR_VAR 0 3
28660: PUSH
28661: DOUBLE
28662: LD_INT 1
28664: DEC
28665: ST_TO_ADDR
28666: LD_INT 3
28668: PUSH
28669: FOR_TO
28670: IFFALSE 28701
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 250
28681: PPUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 251
28691: PPUSH
28692: LD_INT 1
28694: PPUSH
28695: CALL_OW 453
28699: GO 28669
28701: POP
28702: POP
// end ;
28703: LD_VAR 0 2
28707: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28708: LD_INT 0
28710: PPUSH
28711: PPUSH
28712: PPUSH
28713: PPUSH
28714: PPUSH
28715: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28716: LD_VAR 0 1
28720: NOT
28721: PUSH
28722: LD_VAR 0 2
28726: NOT
28727: OR
28728: PUSH
28729: LD_VAR 0 1
28733: PPUSH
28734: CALL_OW 314
28738: OR
28739: IFFALSE 28743
// exit ;
28741: GO 29184
// x := GetX ( enemy_unit ) ;
28743: LD_ADDR_VAR 0 7
28747: PUSH
28748: LD_VAR 0 2
28752: PPUSH
28753: CALL_OW 250
28757: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28758: LD_ADDR_VAR 0 8
28762: PUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: CALL_OW 251
28772: ST_TO_ADDR
// if not x or not y then
28773: LD_VAR 0 7
28777: NOT
28778: PUSH
28779: LD_VAR 0 8
28783: NOT
28784: OR
28785: IFFALSE 28789
// exit ;
28787: GO 29184
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28789: LD_ADDR_VAR 0 6
28793: PUSH
28794: LD_VAR 0 7
28798: PPUSH
28799: LD_INT 0
28801: PPUSH
28802: LD_INT 4
28804: PPUSH
28805: CALL_OW 272
28809: PUSH
28810: LD_VAR 0 8
28814: PPUSH
28815: LD_INT 0
28817: PPUSH
28818: LD_INT 4
28820: PPUSH
28821: CALL_OW 273
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_VAR 0 7
28834: PPUSH
28835: LD_INT 1
28837: PPUSH
28838: LD_INT 4
28840: PPUSH
28841: CALL_OW 272
28845: PUSH
28846: LD_VAR 0 8
28850: PPUSH
28851: LD_INT 1
28853: PPUSH
28854: LD_INT 4
28856: PPUSH
28857: CALL_OW 273
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_VAR 0 7
28870: PPUSH
28871: LD_INT 2
28873: PPUSH
28874: LD_INT 4
28876: PPUSH
28877: CALL_OW 272
28881: PUSH
28882: LD_VAR 0 8
28886: PPUSH
28887: LD_INT 2
28889: PPUSH
28890: LD_INT 4
28892: PPUSH
28893: CALL_OW 273
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_VAR 0 7
28906: PPUSH
28907: LD_INT 3
28909: PPUSH
28910: LD_INT 4
28912: PPUSH
28913: CALL_OW 272
28917: PUSH
28918: LD_VAR 0 8
28922: PPUSH
28923: LD_INT 3
28925: PPUSH
28926: LD_INT 4
28928: PPUSH
28929: CALL_OW 273
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_VAR 0 7
28942: PPUSH
28943: LD_INT 4
28945: PPUSH
28946: LD_INT 4
28948: PPUSH
28949: CALL_OW 272
28953: PUSH
28954: LD_VAR 0 8
28958: PPUSH
28959: LD_INT 4
28961: PPUSH
28962: LD_INT 4
28964: PPUSH
28965: CALL_OW 273
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_VAR 0 7
28978: PPUSH
28979: LD_INT 5
28981: PPUSH
28982: LD_INT 4
28984: PPUSH
28985: CALL_OW 272
28989: PUSH
28990: LD_VAR 0 8
28994: PPUSH
28995: LD_INT 5
28997: PPUSH
28998: LD_INT 4
29000: PPUSH
29001: CALL_OW 273
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: ST_TO_ADDR
// for i = tmp downto 1 do
29018: LD_ADDR_VAR 0 4
29022: PUSH
29023: DOUBLE
29024: LD_VAR 0 6
29028: INC
29029: ST_TO_ADDR
29030: LD_INT 1
29032: PUSH
29033: FOR_DOWNTO
29034: IFFALSE 29135
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
29036: LD_VAR 0 6
29040: PUSH
29041: LD_VAR 0 4
29045: ARRAY
29046: PUSH
29047: LD_INT 1
29049: ARRAY
29050: PPUSH
29051: LD_VAR 0 6
29055: PUSH
29056: LD_VAR 0 4
29060: ARRAY
29061: PUSH
29062: LD_INT 2
29064: ARRAY
29065: PPUSH
29066: CALL_OW 488
29070: NOT
29071: PUSH
29072: LD_VAR 0 6
29076: PUSH
29077: LD_VAR 0 4
29081: ARRAY
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: LD_VAR 0 6
29091: PUSH
29092: LD_VAR 0 4
29096: ARRAY
29097: PUSH
29098: LD_INT 2
29100: ARRAY
29101: PPUSH
29102: CALL_OW 428
29106: PUSH
29107: LD_INT 0
29109: NONEQUAL
29110: OR
29111: IFFALSE 29133
// tmp := Delete ( tmp , i ) ;
29113: LD_ADDR_VAR 0 6
29117: PUSH
29118: LD_VAR 0 6
29122: PPUSH
29123: LD_VAR 0 4
29127: PPUSH
29128: CALL_OW 3
29132: ST_TO_ADDR
29133: GO 29033
29135: POP
29136: POP
// j := GetClosestHex ( unit , tmp ) ;
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_VAR 0 1
29146: PPUSH
29147: LD_VAR 0 6
29151: PPUSH
29152: CALL 28437 0 2
29156: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
29157: LD_VAR 0 1
29161: PPUSH
29162: LD_VAR 0 5
29166: PUSH
29167: LD_INT 1
29169: ARRAY
29170: PPUSH
29171: LD_VAR 0 5
29175: PUSH
29176: LD_INT 2
29178: ARRAY
29179: PPUSH
29180: CALL_OW 111
// end ;
29184: LD_VAR 0 3
29188: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
// uc_side = 0 ;
29195: LD_ADDR_OWVAR 20
29199: PUSH
29200: LD_INT 0
29202: ST_TO_ADDR
// uc_nation = 0 ;
29203: LD_ADDR_OWVAR 21
29207: PUSH
29208: LD_INT 0
29210: ST_TO_ADDR
// nat_area := natureArea ;
29211: LD_ADDR_VAR 0 4
29215: PUSH
29216: LD_INT 18
29218: ST_TO_ADDR
// InitHc ;
29219: CALL_OW 19
// for i = 1 to 4 do
29223: LD_ADDR_VAR 0 2
29227: PUSH
29228: DOUBLE
29229: LD_INT 1
29231: DEC
29232: ST_TO_ADDR
29233: LD_INT 4
29235: PUSH
29236: FOR_TO
29237: IFFALSE 29284
// begin hc_class = 18 ;
29239: LD_ADDR_OWVAR 28
29243: PUSH
29244: LD_INT 18
29246: ST_TO_ADDR
// hc_gallery =  ;
29247: LD_ADDR_OWVAR 33
29251: PUSH
29252: LD_STRING 
29254: ST_TO_ADDR
// animal := CreateHuman ;
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: CALL_OW 44
29264: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29265: LD_VAR 0 3
29269: PPUSH
29270: LD_VAR 0 4
29274: PPUSH
29275: LD_INT 0
29277: PPUSH
29278: CALL_OW 49
// end ;
29282: GO 29236
29284: POP
29285: POP
// for i = 1 to 3 do
29286: LD_ADDR_VAR 0 2
29290: PUSH
29291: DOUBLE
29292: LD_INT 1
29294: DEC
29295: ST_TO_ADDR
29296: LD_INT 3
29298: PUSH
29299: FOR_TO
29300: IFFALSE 29364
// begin hc_class = class_tiger ;
29302: LD_ADDR_OWVAR 28
29306: PUSH
29307: LD_INT 14
29309: ST_TO_ADDR
// hc_gallery =  ;
29310: LD_ADDR_OWVAR 33
29314: PUSH
29315: LD_STRING 
29317: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
29318: LD_ADDR_OWVAR 35
29322: PUSH
29323: LD_INT 5
29325: NEG
29326: PPUSH
29327: LD_INT 5
29329: PPUSH
29330: CALL_OW 12
29334: ST_TO_ADDR
// animal := CreateHuman ;
29335: LD_ADDR_VAR 0 3
29339: PUSH
29340: CALL_OW 44
29344: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29345: LD_VAR 0 3
29349: PPUSH
29350: LD_VAR 0 4
29354: PPUSH
29355: LD_INT 0
29357: PPUSH
29358: CALL_OW 49
// end ;
29362: GO 29299
29364: POP
29365: POP
// for i = 1 to 5 do
29366: LD_ADDR_VAR 0 2
29370: PUSH
29371: DOUBLE
29372: LD_INT 1
29374: DEC
29375: ST_TO_ADDR
29376: LD_INT 5
29378: PUSH
29379: FOR_TO
29380: IFFALSE 29483
// begin hc_class = class_apeman ;
29382: LD_ADDR_OWVAR 28
29386: PUSH
29387: LD_INT 12
29389: ST_TO_ADDR
// hc_gallery =  ;
29390: LD_ADDR_OWVAR 33
29394: PUSH
29395: LD_STRING 
29397: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
29398: LD_ADDR_OWVAR 35
29402: PUSH
29403: LD_INT 2
29405: NEG
29406: PPUSH
29407: LD_INT 2
29409: PPUSH
29410: CALL_OW 12
29414: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
29415: LD_ADDR_OWVAR 31
29419: PUSH
29420: LD_INT 1
29422: PPUSH
29423: LD_INT 3
29425: PPUSH
29426: CALL_OW 12
29430: PUSH
29431: LD_INT 1
29433: PPUSH
29434: LD_INT 3
29436: PPUSH
29437: CALL_OW 12
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// animal := CreateHuman ;
29454: LD_ADDR_VAR 0 3
29458: PUSH
29459: CALL_OW 44
29463: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29464: LD_VAR 0 3
29468: PPUSH
29469: LD_VAR 0 4
29473: PPUSH
29474: LD_INT 0
29476: PPUSH
29477: CALL_OW 49
// end ;
29481: GO 29379
29483: POP
29484: POP
// for i = 1 to 3 do
29485: LD_ADDR_VAR 0 2
29489: PUSH
29490: DOUBLE
29491: LD_INT 1
29493: DEC
29494: ST_TO_ADDR
29495: LD_INT 3
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29546
// begin hc_class = 13 ;
29501: LD_ADDR_OWVAR 28
29505: PUSH
29506: LD_INT 13
29508: ST_TO_ADDR
// hc_gallery =  ;
29509: LD_ADDR_OWVAR 33
29513: PUSH
29514: LD_STRING 
29516: ST_TO_ADDR
// animal := CreateHuman ;
29517: LD_ADDR_VAR 0 3
29521: PUSH
29522: CALL_OW 44
29526: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
29527: LD_VAR 0 3
29531: PPUSH
29532: LD_VAR 0 4
29536: PPUSH
29537: LD_INT 0
29539: PPUSH
29540: CALL_OW 49
// end ;
29544: GO 29498
29546: POP
29547: POP
// for i = 1 to 7 do
29548: LD_ADDR_VAR 0 2
29552: PUSH
29553: DOUBLE
29554: LD_INT 1
29556: DEC
29557: ST_TO_ADDR
29558: LD_INT 7
29560: PUSH
29561: FOR_TO
29562: IFFALSE 29607
// begin hc_class = 20 ;
29564: LD_ADDR_OWVAR 28
29568: PUSH
29569: LD_INT 20
29571: ST_TO_ADDR
// hc_gallery =  ;
29572: LD_ADDR_OWVAR 33
29576: PUSH
29577: LD_STRING 
29579: ST_TO_ADDR
// animal := CreateHuman ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: CALL_OW 44
29589: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29590: LD_VAR 0 3
29594: PPUSH
29595: LD_INT 19
29597: PPUSH
29598: LD_INT 0
29600: PPUSH
29601: CALL_OW 49
// end ;
29605: GO 29561
29607: POP
29608: POP
// end ;
29609: LD_VAR 0 1
29613: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29614: LD_INT 0
29616: PPUSH
29617: PPUSH
29618: PPUSH
29619: PPUSH
29620: PPUSH
29621: PPUSH
29622: PPUSH
29623: PPUSH
29624: PPUSH
29625: PPUSH
29626: PPUSH
29627: PPUSH
29628: PPUSH
29629: PPUSH
29630: PPUSH
29631: PPUSH
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
29641: PPUSH
29642: PPUSH
29643: PPUSH
// if not list then
29644: LD_VAR 0 1
29648: NOT
29649: IFFALSE 29653
// exit ;
29651: GO 32846
// base := list [ 1 ] ;
29653: LD_ADDR_VAR 0 3
29657: PUSH
29658: LD_VAR 0 1
29662: PUSH
29663: LD_INT 1
29665: ARRAY
29666: ST_TO_ADDR
// group := list [ 2 ] ;
29667: LD_ADDR_VAR 0 4
29671: PUSH
29672: LD_VAR 0 1
29676: PUSH
29677: LD_INT 2
29679: ARRAY
29680: ST_TO_ADDR
// path := list [ 3 ] ;
29681: LD_ADDR_VAR 0 5
29685: PUSH
29686: LD_VAR 0 1
29690: PUSH
29691: LD_INT 3
29693: ARRAY
29694: ST_TO_ADDR
// flags := list [ 4 ] ;
29695: LD_ADDR_VAR 0 6
29699: PUSH
29700: LD_VAR 0 1
29704: PUSH
29705: LD_INT 4
29707: ARRAY
29708: ST_TO_ADDR
// mined := [ ] ;
29709: LD_ADDR_VAR 0 27
29713: PUSH
29714: EMPTY
29715: ST_TO_ADDR
// bombed := [ ] ;
29716: LD_ADDR_VAR 0 28
29720: PUSH
29721: EMPTY
29722: ST_TO_ADDR
// if not group or not path then
29723: LD_VAR 0 4
29727: NOT
29728: PUSH
29729: LD_VAR 0 5
29733: NOT
29734: OR
29735: IFFALSE 29739
// exit ;
29737: GO 32846
// if flags then
29739: LD_VAR 0 6
29743: IFFALSE 29887
// begin f_ignore_area := flags [ 1 ] ;
29745: LD_ADDR_VAR 0 17
29749: PUSH
29750: LD_VAR 0 6
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29759: LD_ADDR_VAR 0 18
29763: PUSH
29764: LD_VAR 0 6
29768: PUSH
29769: LD_INT 2
29771: ARRAY
29772: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29773: LD_ADDR_VAR 0 19
29777: PUSH
29778: LD_VAR 0 6
29782: PUSH
29783: LD_INT 3
29785: ARRAY
29786: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29787: LD_ADDR_VAR 0 20
29791: PUSH
29792: LD_VAR 0 6
29796: PUSH
29797: LD_INT 4
29799: ARRAY
29800: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29801: LD_ADDR_VAR 0 21
29805: PUSH
29806: LD_VAR 0 6
29810: PUSH
29811: LD_INT 5
29813: ARRAY
29814: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29815: LD_ADDR_VAR 0 22
29819: PUSH
29820: LD_VAR 0 6
29824: PUSH
29825: LD_INT 6
29827: ARRAY
29828: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29829: LD_ADDR_VAR 0 23
29833: PUSH
29834: LD_VAR 0 6
29838: PUSH
29839: LD_INT 7
29841: ARRAY
29842: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29843: LD_ADDR_VAR 0 24
29847: PUSH
29848: LD_VAR 0 6
29852: PUSH
29853: LD_INT 8
29855: ARRAY
29856: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29857: LD_ADDR_VAR 0 25
29861: PUSH
29862: LD_VAR 0 6
29866: PUSH
29867: LD_INT 9
29869: ARRAY
29870: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29871: LD_ADDR_VAR 0 26
29875: PUSH
29876: LD_VAR 0 6
29880: PUSH
29881: LD_INT 10
29883: ARRAY
29884: ST_TO_ADDR
// end else
29885: GO 29967
// begin f_ignore_area := false ;
29887: LD_ADDR_VAR 0 17
29891: PUSH
29892: LD_INT 0
29894: ST_TO_ADDR
// f_capture := false ;
29895: LD_ADDR_VAR 0 18
29899: PUSH
29900: LD_INT 0
29902: ST_TO_ADDR
// f_ignore_civ := false ;
29903: LD_ADDR_VAR 0 19
29907: PUSH
29908: LD_INT 0
29910: ST_TO_ADDR
// f_murder := false ;
29911: LD_ADDR_VAR 0 20
29915: PUSH
29916: LD_INT 0
29918: ST_TO_ADDR
// f_mines := false ;
29919: LD_ADDR_VAR 0 21
29923: PUSH
29924: LD_INT 0
29926: ST_TO_ADDR
// f_repair := false ;
29927: LD_ADDR_VAR 0 22
29931: PUSH
29932: LD_INT 0
29934: ST_TO_ADDR
// f_heal := false ;
29935: LD_ADDR_VAR 0 23
29939: PUSH
29940: LD_INT 0
29942: ST_TO_ADDR
// f_spacetime := false ;
29943: LD_ADDR_VAR 0 24
29947: PUSH
29948: LD_INT 0
29950: ST_TO_ADDR
// f_attack_depot := false ;
29951: LD_ADDR_VAR 0 25
29955: PUSH
29956: LD_INT 0
29958: ST_TO_ADDR
// f_crawl := false ;
29959: LD_ADDR_VAR 0 26
29963: PUSH
29964: LD_INT 0
29966: ST_TO_ADDR
// end ; units_path := [ ] ;
29967: LD_ADDR_VAR 0 16
29971: PUSH
29972: EMPTY
29973: ST_TO_ADDR
// for i = 1 to group do
29974: LD_ADDR_VAR 0 7
29978: PUSH
29979: DOUBLE
29980: LD_INT 1
29982: DEC
29983: ST_TO_ADDR
29984: LD_VAR 0 4
29988: PUSH
29989: FOR_TO
29990: IFFALSE 30019
// begin units_path := Replace ( units_path , i , path ) ;
29992: LD_ADDR_VAR 0 16
29996: PUSH
29997: LD_VAR 0 16
30001: PPUSH
30002: LD_VAR 0 7
30006: PPUSH
30007: LD_VAR 0 5
30011: PPUSH
30012: CALL_OW 1
30016: ST_TO_ADDR
// end ;
30017: GO 29989
30019: POP
30020: POP
// repeat for i = group downto 1 do
30021: LD_ADDR_VAR 0 7
30025: PUSH
30026: DOUBLE
30027: LD_VAR 0 4
30031: INC
30032: ST_TO_ADDR
30033: LD_INT 1
30035: PUSH
30036: FOR_DOWNTO
30037: IFFALSE 32828
// begin tmp := [ ] ;
30039: LD_ADDR_VAR 0 14
30043: PUSH
30044: EMPTY
30045: ST_TO_ADDR
// attacking := false ;
30046: LD_ADDR_VAR 0 29
30050: PUSH
30051: LD_INT 0
30053: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
30054: LD_VAR 0 4
30058: PUSH
30059: LD_VAR 0 7
30063: ARRAY
30064: PPUSH
30065: CALL_OW 301
30069: PUSH
30070: LD_VAR 0 4
30074: PUSH
30075: LD_VAR 0 7
30079: ARRAY
30080: NOT
30081: OR
30082: IFFALSE 30126
// begin group := Delete ( group , i ) ;
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: LD_VAR 0 4
30093: PPUSH
30094: LD_VAR 0 7
30098: PPUSH
30099: CALL_OW 3
30103: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
30104: LD_ADDR_VAR 0 16
30108: PUSH
30109: LD_VAR 0 16
30113: PPUSH
30114: LD_VAR 0 7
30118: PPUSH
30119: CALL_OW 3
30123: ST_TO_ADDR
// continue ;
30124: GO 30036
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
30126: LD_VAR 0 4
30130: PUSH
30131: LD_VAR 0 7
30135: ARRAY
30136: PPUSH
30137: LD_INT 10
30139: PPUSH
30140: CALL 28289 0 2
30144: NOT
30145: PUSH
30146: LD_VAR 0 16
30150: PUSH
30151: LD_VAR 0 7
30155: ARRAY
30156: PUSH
30157: EMPTY
30158: EQUAL
30159: NOT
30160: AND
30161: IFFALSE 30445
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
30163: LD_VAR 0 4
30167: PUSH
30168: LD_VAR 0 7
30172: ARRAY
30173: PPUSH
30174: CALL_OW 262
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: IN
30189: IFFALSE 30248
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
30191: LD_VAR 0 4
30195: PUSH
30196: LD_VAR 0 7
30200: ARRAY
30201: PPUSH
30202: CALL_OW 261
30206: PUSH
30207: LD_INT 10
30209: LESS
30210: PUSH
30211: LD_VAR 0 4
30215: PUSH
30216: LD_VAR 0 7
30220: ARRAY
30221: PPUSH
30222: CALL 28346 0 1
30226: NOT
30227: AND
30228: IFFALSE 30248
// SetFuel ( group [ i ] , 12 ) ;
30230: LD_VAR 0 4
30234: PUSH
30235: LD_VAR 0 7
30239: ARRAY
30240: PPUSH
30241: LD_INT 12
30243: PPUSH
30244: CALL_OW 240
// if units_path [ i ] then
30248: LD_VAR 0 16
30252: PUSH
30253: LD_VAR 0 7
30257: ARRAY
30258: IFFALSE 30443
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
30260: LD_VAR 0 4
30264: PUSH
30265: LD_VAR 0 7
30269: ARRAY
30270: PPUSH
30271: LD_VAR 0 16
30275: PUSH
30276: LD_VAR 0 7
30280: ARRAY
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PUSH
30286: LD_INT 1
30288: ARRAY
30289: PPUSH
30290: LD_VAR 0 16
30294: PUSH
30295: LD_VAR 0 7
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PUSH
30305: LD_INT 2
30307: ARRAY
30308: PPUSH
30309: CALL_OW 297
30313: PUSH
30314: LD_INT 6
30316: GREATER
30317: IFFALSE 30392
// begin if not HasTask ( group [ i ] ) then
30319: LD_VAR 0 4
30323: PUSH
30324: LD_VAR 0 7
30328: ARRAY
30329: PPUSH
30330: CALL_OW 314
30334: NOT
30335: IFFALSE 30390
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
30337: LD_VAR 0 4
30341: PUSH
30342: LD_VAR 0 7
30346: ARRAY
30347: PPUSH
30348: LD_VAR 0 16
30352: PUSH
30353: LD_VAR 0 7
30357: ARRAY
30358: PUSH
30359: LD_INT 1
30361: ARRAY
30362: PUSH
30363: LD_INT 1
30365: ARRAY
30366: PPUSH
30367: LD_VAR 0 16
30371: PUSH
30372: LD_VAR 0 7
30376: ARRAY
30377: PUSH
30378: LD_INT 1
30380: ARRAY
30381: PUSH
30382: LD_INT 2
30384: ARRAY
30385: PPUSH
30386: CALL_OW 114
// end else
30390: GO 30443
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
30392: LD_ADDR_VAR 0 15
30396: PUSH
30397: LD_VAR 0 16
30401: PUSH
30402: LD_VAR 0 7
30406: ARRAY
30407: PPUSH
30408: LD_INT 1
30410: PPUSH
30411: CALL_OW 3
30415: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
30416: LD_ADDR_VAR 0 16
30420: PUSH
30421: LD_VAR 0 16
30425: PPUSH
30426: LD_VAR 0 7
30430: PPUSH
30431: LD_VAR 0 15
30435: PPUSH
30436: CALL_OW 1
30440: ST_TO_ADDR
// continue ;
30441: GO 30036
// end ; end ; end else
30443: GO 32826
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
30445: LD_ADDR_VAR 0 14
30449: PUSH
30450: LD_INT 81
30452: PUSH
30453: LD_VAR 0 4
30457: PUSH
30458: LD_VAR 0 7
30462: ARRAY
30463: PPUSH
30464: CALL_OW 255
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PPUSH
30473: CALL_OW 69
30477: ST_TO_ADDR
// if not tmp then
30478: LD_VAR 0 14
30482: NOT
30483: IFFALSE 30487
// continue ;
30485: GO 30036
// if f_ignore_area then
30487: LD_VAR 0 17
30491: IFFALSE 30579
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
30493: LD_ADDR_VAR 0 15
30497: PUSH
30498: LD_VAR 0 14
30502: PPUSH
30503: LD_INT 3
30505: PUSH
30506: LD_INT 92
30508: PUSH
30509: LD_VAR 0 17
30513: PUSH
30514: LD_INT 1
30516: ARRAY
30517: PUSH
30518: LD_VAR 0 17
30522: PUSH
30523: LD_INT 2
30525: ARRAY
30526: PUSH
30527: LD_VAR 0 17
30531: PUSH
30532: LD_INT 3
30534: ARRAY
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 72
30550: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30551: LD_VAR 0 14
30555: PUSH
30556: LD_VAR 0 15
30560: DIFF
30561: IFFALSE 30579
// tmp := tmp diff tmp2 ;
30563: LD_ADDR_VAR 0 14
30567: PUSH
30568: LD_VAR 0 14
30572: PUSH
30573: LD_VAR 0 15
30577: DIFF
30578: ST_TO_ADDR
// end ; if not f_murder then
30579: LD_VAR 0 20
30583: NOT
30584: IFFALSE 30642
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
30586: LD_ADDR_VAR 0 15
30590: PUSH
30591: LD_VAR 0 14
30595: PPUSH
30596: LD_INT 3
30598: PUSH
30599: LD_INT 50
30601: PUSH
30602: EMPTY
30603: LIST
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PPUSH
30609: CALL_OW 72
30613: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30614: LD_VAR 0 14
30618: PUSH
30619: LD_VAR 0 15
30623: DIFF
30624: IFFALSE 30642
// tmp := tmp diff tmp2 ;
30626: LD_ADDR_VAR 0 14
30630: PUSH
30631: LD_VAR 0 14
30635: PUSH
30636: LD_VAR 0 15
30640: DIFF
30641: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30642: LD_ADDR_VAR 0 14
30646: PUSH
30647: LD_VAR 0 4
30651: PUSH
30652: LD_VAR 0 7
30656: ARRAY
30657: PPUSH
30658: LD_VAR 0 14
30662: PPUSH
30663: LD_INT 1
30665: PPUSH
30666: LD_INT 1
30668: PPUSH
30669: CALL 3270 0 4
30673: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30674: LD_VAR 0 4
30678: PUSH
30679: LD_VAR 0 7
30683: ARRAY
30684: PPUSH
30685: CALL_OW 257
30689: PUSH
30690: LD_INT 1
30692: EQUAL
30693: IFFALSE 31120
// begin if WantPlant ( group [ i ] ) then
30695: LD_VAR 0 4
30699: PUSH
30700: LD_VAR 0 7
30704: ARRAY
30705: PPUSH
30706: CALL 2738 0 1
30710: IFFALSE 30714
// continue ;
30712: GO 30036
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30714: LD_VAR 0 18
30718: PUSH
30719: LD_VAR 0 4
30723: PUSH
30724: LD_VAR 0 7
30728: ARRAY
30729: PPUSH
30730: CALL_OW 310
30734: NOT
30735: AND
30736: PUSH
30737: LD_VAR 0 14
30741: PUSH
30742: LD_INT 1
30744: ARRAY
30745: PUSH
30746: LD_VAR 0 14
30750: PPUSH
30751: LD_INT 21
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 58
30763: PUSH
30764: EMPTY
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PPUSH
30771: CALL_OW 72
30775: IN
30776: AND
30777: IFFALSE 30813
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30779: LD_VAR 0 4
30783: PUSH
30784: LD_VAR 0 7
30788: ARRAY
30789: PPUSH
30790: LD_VAR 0 14
30794: PUSH
30795: LD_INT 1
30797: ARRAY
30798: PPUSH
30799: CALL_OW 120
// attacking := true ;
30803: LD_ADDR_VAR 0 29
30807: PUSH
30808: LD_INT 1
30810: ST_TO_ADDR
// continue ;
30811: GO 30036
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30813: LD_VAR 0 26
30817: PUSH
30818: LD_VAR 0 4
30822: PUSH
30823: LD_VAR 0 7
30827: ARRAY
30828: PPUSH
30829: CALL_OW 256
30833: PUSH
30834: LD_INT 800
30836: LESS
30837: AND
30838: PUSH
30839: LD_VAR 0 4
30843: PUSH
30844: LD_VAR 0 7
30848: ARRAY
30849: PPUSH
30850: CALL_OW 318
30854: NOT
30855: AND
30856: IFFALSE 30873
// ComCrawl ( group [ i ] ) ;
30858: LD_VAR 0 4
30862: PUSH
30863: LD_VAR 0 7
30867: ARRAY
30868: PPUSH
30869: CALL_OW 137
// if f_mines then
30873: LD_VAR 0 21
30877: IFFALSE 31120
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30879: LD_VAR 0 14
30883: PUSH
30884: LD_INT 1
30886: ARRAY
30887: PPUSH
30888: CALL_OW 247
30892: PUSH
30893: LD_INT 3
30895: EQUAL
30896: PUSH
30897: LD_VAR 0 14
30901: PUSH
30902: LD_INT 1
30904: ARRAY
30905: PUSH
30906: LD_VAR 0 27
30910: IN
30911: NOT
30912: AND
30913: IFFALSE 31120
// begin x := GetX ( tmp [ 1 ] ) ;
30915: LD_ADDR_VAR 0 10
30919: PUSH
30920: LD_VAR 0 14
30924: PUSH
30925: LD_INT 1
30927: ARRAY
30928: PPUSH
30929: CALL_OW 250
30933: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
30934: LD_ADDR_VAR 0 11
30938: PUSH
30939: LD_VAR 0 14
30943: PUSH
30944: LD_INT 1
30946: ARRAY
30947: PPUSH
30948: CALL_OW 251
30952: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
30953: LD_ADDR_VAR 0 12
30957: PUSH
30958: LD_VAR 0 4
30962: PUSH
30963: LD_VAR 0 7
30967: ARRAY
30968: PPUSH
30969: CALL 28374 0 1
30973: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
30974: LD_VAR 0 4
30978: PUSH
30979: LD_VAR 0 7
30983: ARRAY
30984: PPUSH
30985: LD_VAR 0 10
30989: PPUSH
30990: LD_VAR 0 11
30994: PPUSH
30995: LD_VAR 0 14
30999: PUSH
31000: LD_INT 1
31002: ARRAY
31003: PPUSH
31004: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
31008: LD_VAR 0 4
31012: PUSH
31013: LD_VAR 0 7
31017: ARRAY
31018: PPUSH
31019: LD_VAR 0 10
31023: PPUSH
31024: LD_VAR 0 12
31028: PPUSH
31029: LD_INT 7
31031: PPUSH
31032: CALL_OW 272
31036: PPUSH
31037: LD_VAR 0 11
31041: PPUSH
31042: LD_VAR 0 12
31046: PPUSH
31047: LD_INT 7
31049: PPUSH
31050: CALL_OW 273
31054: PPUSH
31055: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
31059: LD_VAR 0 4
31063: PUSH
31064: LD_VAR 0 7
31068: ARRAY
31069: PPUSH
31070: LD_INT 71
31072: PPUSH
31073: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
31077: LD_ADDR_VAR 0 27
31081: PUSH
31082: LD_VAR 0 27
31086: PPUSH
31087: LD_VAR 0 27
31091: PUSH
31092: LD_INT 1
31094: PLUS
31095: PPUSH
31096: LD_VAR 0 14
31100: PUSH
31101: LD_INT 1
31103: ARRAY
31104: PPUSH
31105: CALL_OW 1
31109: ST_TO_ADDR
// attacking := true ;
31110: LD_ADDR_VAR 0 29
31114: PUSH
31115: LD_INT 1
31117: ST_TO_ADDR
// continue ;
31118: GO 30036
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
31120: LD_VAR 0 4
31124: PUSH
31125: LD_VAR 0 7
31129: ARRAY
31130: PPUSH
31131: CALL_OW 257
31135: PUSH
31136: LD_INT 17
31138: EQUAL
31139: IFFALSE 31267
// begin attacking := false ;
31141: LD_ADDR_VAR 0 29
31145: PUSH
31146: LD_INT 0
31148: ST_TO_ADDR
// k := 5 ;
31149: LD_ADDR_VAR 0 9
31153: PUSH
31154: LD_INT 5
31156: ST_TO_ADDR
// if tmp < k then
31157: LD_VAR 0 14
31161: PUSH
31162: LD_VAR 0 9
31166: LESS
31167: IFFALSE 31179
// k := tmp ;
31169: LD_ADDR_VAR 0 9
31173: PUSH
31174: LD_VAR 0 14
31178: ST_TO_ADDR
// for j = 1 to k do
31179: LD_ADDR_VAR 0 8
31183: PUSH
31184: DOUBLE
31185: LD_INT 1
31187: DEC
31188: ST_TO_ADDR
31189: LD_VAR 0 9
31193: PUSH
31194: FOR_TO
31195: IFFALSE 31265
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
31197: LD_VAR 0 14
31201: PUSH
31202: LD_VAR 0 8
31206: ARRAY
31207: PUSH
31208: LD_VAR 0 14
31212: PPUSH
31213: LD_INT 58
31215: PUSH
31216: EMPTY
31217: LIST
31218: PPUSH
31219: CALL_OW 72
31223: IN
31224: NOT
31225: IFFALSE 31263
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31227: LD_VAR 0 4
31231: PUSH
31232: LD_VAR 0 7
31236: ARRAY
31237: PPUSH
31238: LD_VAR 0 14
31242: PUSH
31243: LD_VAR 0 8
31247: ARRAY
31248: PPUSH
31249: CALL_OW 115
// attacking := true ;
31253: LD_ADDR_VAR 0 29
31257: PUSH
31258: LD_INT 1
31260: ST_TO_ADDR
// continue ;
31261: GO 31194
// end ; end ;
31263: GO 31194
31265: POP
31266: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
31267: LD_VAR 0 4
31271: PUSH
31272: LD_VAR 0 7
31276: ARRAY
31277: PPUSH
31278: CALL_OW 257
31282: PUSH
31283: LD_INT 8
31285: EQUAL
31286: PUSH
31287: LD_VAR 0 4
31291: PUSH
31292: LD_VAR 0 7
31296: ARRAY
31297: PPUSH
31298: CALL_OW 264
31302: PUSH
31303: LD_INT 28
31305: PUSH
31306: LD_INT 45
31308: PUSH
31309: LD_INT 7
31311: PUSH
31312: LD_INT 47
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: IN
31321: OR
31322: IFFALSE 31552
// begin attacking := false ;
31324: LD_ADDR_VAR 0 29
31328: PUSH
31329: LD_INT 0
31331: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
31332: LD_VAR 0 14
31336: PUSH
31337: LD_INT 1
31339: ARRAY
31340: PPUSH
31341: CALL_OW 266
31345: PUSH
31346: LD_INT 32
31348: PUSH
31349: LD_INT 31
31351: PUSH
31352: LD_INT 33
31354: PUSH
31355: LD_INT 4
31357: PUSH
31358: LD_INT 5
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: IN
31368: IFFALSE 31552
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
31370: LD_ADDR_VAR 0 9
31374: PUSH
31375: LD_VAR 0 14
31379: PUSH
31380: LD_INT 1
31382: ARRAY
31383: PPUSH
31384: CALL_OW 266
31388: PPUSH
31389: LD_VAR 0 14
31393: PUSH
31394: LD_INT 1
31396: ARRAY
31397: PPUSH
31398: CALL_OW 250
31402: PPUSH
31403: LD_VAR 0 14
31407: PUSH
31408: LD_INT 1
31410: ARRAY
31411: PPUSH
31412: CALL_OW 251
31416: PPUSH
31417: LD_VAR 0 14
31421: PUSH
31422: LD_INT 1
31424: ARRAY
31425: PPUSH
31426: CALL_OW 254
31430: PPUSH
31431: LD_VAR 0 14
31435: PUSH
31436: LD_INT 1
31438: ARRAY
31439: PPUSH
31440: CALL_OW 248
31444: PPUSH
31445: LD_INT 0
31447: PPUSH
31448: CALL 9750 0 6
31452: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
31453: LD_ADDR_VAR 0 8
31457: PUSH
31458: LD_VAR 0 4
31462: PUSH
31463: LD_VAR 0 7
31467: ARRAY
31468: PPUSH
31469: LD_VAR 0 9
31473: PPUSH
31474: CALL 28437 0 2
31478: ST_TO_ADDR
// if j then
31479: LD_VAR 0 8
31483: IFFALSE 31552
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31485: LD_VAR 0 8
31489: PUSH
31490: LD_INT 1
31492: ARRAY
31493: PPUSH
31494: LD_VAR 0 8
31498: PUSH
31499: LD_INT 2
31501: ARRAY
31502: PPUSH
31503: CALL_OW 488
31507: IFFALSE 31552
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
31509: LD_VAR 0 4
31513: PUSH
31514: LD_VAR 0 7
31518: ARRAY
31519: PPUSH
31520: LD_VAR 0 8
31524: PUSH
31525: LD_INT 1
31527: ARRAY
31528: PPUSH
31529: LD_VAR 0 8
31533: PUSH
31534: LD_INT 2
31536: ARRAY
31537: PPUSH
31538: CALL_OW 116
// attacking := true ;
31542: LD_ADDR_VAR 0 29
31546: PUSH
31547: LD_INT 1
31549: ST_TO_ADDR
// continue ;
31550: GO 30036
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
31552: LD_VAR 0 4
31556: PUSH
31557: LD_VAR 0 7
31561: ARRAY
31562: PPUSH
31563: CALL_OW 265
31567: PUSH
31568: LD_INT 11
31570: EQUAL
31571: IFFALSE 31849
// begin k := 10 ;
31573: LD_ADDR_VAR 0 9
31577: PUSH
31578: LD_INT 10
31580: ST_TO_ADDR
// x := 0 ;
31581: LD_ADDR_VAR 0 10
31585: PUSH
31586: LD_INT 0
31588: ST_TO_ADDR
// if tmp < k then
31589: LD_VAR 0 14
31593: PUSH
31594: LD_VAR 0 9
31598: LESS
31599: IFFALSE 31611
// k := tmp ;
31601: LD_ADDR_VAR 0 9
31605: PUSH
31606: LD_VAR 0 14
31610: ST_TO_ADDR
// for j = k downto 1 do
31611: LD_ADDR_VAR 0 8
31615: PUSH
31616: DOUBLE
31617: LD_VAR 0 9
31621: INC
31622: ST_TO_ADDR
31623: LD_INT 1
31625: PUSH
31626: FOR_DOWNTO
31627: IFFALSE 31702
// begin if GetType ( tmp [ j ] ) = unit_human then
31629: LD_VAR 0 14
31633: PUSH
31634: LD_VAR 0 8
31638: ARRAY
31639: PPUSH
31640: CALL_OW 247
31644: PUSH
31645: LD_INT 1
31647: EQUAL
31648: IFFALSE 31700
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
31650: LD_VAR 0 4
31654: PUSH
31655: LD_VAR 0 7
31659: ARRAY
31660: PPUSH
31661: LD_VAR 0 14
31665: PUSH
31666: LD_VAR 0 8
31670: ARRAY
31671: PPUSH
31672: CALL 28708 0 2
// x := tmp [ j ] ;
31676: LD_ADDR_VAR 0 10
31680: PUSH
31681: LD_VAR 0 14
31685: PUSH
31686: LD_VAR 0 8
31690: ARRAY
31691: ST_TO_ADDR
// attacking := true ;
31692: LD_ADDR_VAR 0 29
31696: PUSH
31697: LD_INT 1
31699: ST_TO_ADDR
// end ; end ;
31700: GO 31626
31702: POP
31703: POP
// if not x then
31704: LD_VAR 0 10
31708: NOT
31709: IFFALSE 31849
// begin attacking := true ;
31711: LD_ADDR_VAR 0 29
31715: PUSH
31716: LD_INT 1
31718: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31719: LD_VAR 0 4
31723: PUSH
31724: LD_VAR 0 7
31728: ARRAY
31729: PPUSH
31730: CALL_OW 250
31734: PPUSH
31735: LD_VAR 0 4
31739: PUSH
31740: LD_VAR 0 7
31744: ARRAY
31745: PPUSH
31746: CALL_OW 251
31750: PPUSH
31751: CALL 1982 0 2
31755: PUSH
31756: LD_INT 2
31758: ARRAY
31759: PUSH
31760: LD_VAR 0 14
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PPUSH
31769: CALL_OW 250
31773: PPUSH
31774: LD_VAR 0 14
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: PPUSH
31783: CALL_OW 251
31787: PPUSH
31788: CALL 1982 0 2
31792: PUSH
31793: LD_INT 2
31795: ARRAY
31796: EQUAL
31797: IFFALSE 31825
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31799: LD_VAR 0 4
31803: PUSH
31804: LD_VAR 0 7
31808: ARRAY
31809: PPUSH
31810: LD_VAR 0 14
31814: PUSH
31815: LD_INT 1
31817: ARRAY
31818: PPUSH
31819: CALL 28708 0 2
31823: GO 31849
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31825: LD_VAR 0 4
31829: PUSH
31830: LD_VAR 0 7
31834: ARRAY
31835: PPUSH
31836: LD_VAR 0 14
31840: PUSH
31841: LD_INT 1
31843: ARRAY
31844: PPUSH
31845: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31849: LD_VAR 0 4
31853: PUSH
31854: LD_VAR 0 7
31858: ARRAY
31859: PPUSH
31860: CALL_OW 264
31864: PUSH
31865: LD_INT 29
31867: EQUAL
31868: IFFALSE 32234
// begin if WantsToAttack ( group [ i ] ) in bombed then
31870: LD_VAR 0 4
31874: PUSH
31875: LD_VAR 0 7
31879: ARRAY
31880: PPUSH
31881: CALL_OW 319
31885: PUSH
31886: LD_VAR 0 28
31890: IN
31891: IFFALSE 31895
// continue ;
31893: GO 30036
// k := 8 ;
31895: LD_ADDR_VAR 0 9
31899: PUSH
31900: LD_INT 8
31902: ST_TO_ADDR
// x := 0 ;
31903: LD_ADDR_VAR 0 10
31907: PUSH
31908: LD_INT 0
31910: ST_TO_ADDR
// if tmp < k then
31911: LD_VAR 0 14
31915: PUSH
31916: LD_VAR 0 9
31920: LESS
31921: IFFALSE 31933
// k := tmp ;
31923: LD_ADDR_VAR 0 9
31927: PUSH
31928: LD_VAR 0 14
31932: ST_TO_ADDR
// for j = 1 to k do
31933: LD_ADDR_VAR 0 8
31937: PUSH
31938: DOUBLE
31939: LD_INT 1
31941: DEC
31942: ST_TO_ADDR
31943: LD_VAR 0 9
31947: PUSH
31948: FOR_TO
31949: IFFALSE 32081
// begin if GetType ( tmp [ j ] ) = unit_building then
31951: LD_VAR 0 14
31955: PUSH
31956: LD_VAR 0 8
31960: ARRAY
31961: PPUSH
31962: CALL_OW 247
31966: PUSH
31967: LD_INT 3
31969: EQUAL
31970: IFFALSE 32079
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31972: LD_VAR 0 14
31976: PUSH
31977: LD_VAR 0 8
31981: ARRAY
31982: PUSH
31983: LD_VAR 0 28
31987: IN
31988: NOT
31989: PUSH
31990: LD_VAR 0 14
31994: PUSH
31995: LD_VAR 0 8
31999: ARRAY
32000: PPUSH
32001: CALL_OW 313
32005: AND
32006: IFFALSE 32079
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32008: LD_VAR 0 4
32012: PUSH
32013: LD_VAR 0 7
32017: ARRAY
32018: PPUSH
32019: LD_VAR 0 14
32023: PUSH
32024: LD_VAR 0 8
32028: ARRAY
32029: PPUSH
32030: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
32034: LD_ADDR_VAR 0 28
32038: PUSH
32039: LD_VAR 0 28
32043: PPUSH
32044: LD_VAR 0 28
32048: PUSH
32049: LD_INT 1
32051: PLUS
32052: PPUSH
32053: LD_VAR 0 14
32057: PUSH
32058: LD_VAR 0 8
32062: ARRAY
32063: PPUSH
32064: CALL_OW 1
32068: ST_TO_ADDR
// attacking := true ;
32069: LD_ADDR_VAR 0 29
32073: PUSH
32074: LD_INT 1
32076: ST_TO_ADDR
// break ;
32077: GO 32081
// end ; end ;
32079: GO 31948
32081: POP
32082: POP
// if not attacking and f_attack_depot then
32083: LD_VAR 0 29
32087: NOT
32088: PUSH
32089: LD_VAR 0 25
32093: AND
32094: IFFALSE 32189
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
32096: LD_ADDR_VAR 0 13
32100: PUSH
32101: LD_VAR 0 14
32105: PPUSH
32106: LD_INT 2
32108: PUSH
32109: LD_INT 30
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 30
32121: PUSH
32122: LD_INT 1
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: LIST
32133: PPUSH
32134: CALL_OW 72
32138: ST_TO_ADDR
// if z then
32139: LD_VAR 0 13
32143: IFFALSE 32189
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
32145: LD_VAR 0 4
32149: PUSH
32150: LD_VAR 0 7
32154: ARRAY
32155: PPUSH
32156: LD_VAR 0 13
32160: PPUSH
32161: LD_VAR 0 4
32165: PUSH
32166: LD_VAR 0 7
32170: ARRAY
32171: PPUSH
32172: CALL_OW 74
32176: PPUSH
32177: CALL_OW 115
// attacking := true ;
32181: LD_ADDR_VAR 0 29
32185: PUSH
32186: LD_INT 1
32188: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
32189: LD_VAR 0 4
32193: PUSH
32194: LD_VAR 0 7
32198: ARRAY
32199: PPUSH
32200: CALL_OW 256
32204: PUSH
32205: LD_INT 500
32207: LESS
32208: IFFALSE 32234
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32210: LD_VAR 0 4
32214: PUSH
32215: LD_VAR 0 7
32219: ARRAY
32220: PPUSH
32221: LD_VAR 0 14
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: PPUSH
32230: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
32234: LD_VAR 0 4
32238: PUSH
32239: LD_VAR 0 7
32243: ARRAY
32244: PPUSH
32245: CALL_OW 256
32249: PUSH
32250: LD_INT 250
32252: LESS
32253: PUSH
32254: LD_VAR 0 4
32258: PUSH
32259: LD_VAR 0 7
32263: ARRAY
32264: PUSH
32265: LD_INT 21
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 23
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PPUSH
32289: CALL_OW 69
32293: IN
32294: AND
32295: IFFALSE 32420
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
32297: LD_ADDR_VAR 0 9
32301: PUSH
32302: LD_OWVAR 3
32306: PUSH
32307: LD_VAR 0 4
32311: PUSH
32312: LD_VAR 0 7
32316: ARRAY
32317: DIFF
32318: PPUSH
32319: LD_VAR 0 4
32323: PUSH
32324: LD_VAR 0 7
32328: ARRAY
32329: PPUSH
32330: CALL_OW 74
32334: ST_TO_ADDR
// if not k then
32335: LD_VAR 0 9
32339: NOT
32340: IFFALSE 32344
// continue ;
32342: GO 30036
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
32344: LD_VAR 0 9
32348: PUSH
32349: LD_INT 81
32351: PUSH
32352: LD_VAR 0 4
32356: PUSH
32357: LD_VAR 0 7
32361: ARRAY
32362: PPUSH
32363: CALL_OW 255
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PPUSH
32372: CALL_OW 69
32376: IN
32377: PUSH
32378: LD_VAR 0 9
32382: PPUSH
32383: LD_VAR 0 4
32387: PUSH
32388: LD_VAR 0 7
32392: ARRAY
32393: PPUSH
32394: CALL_OW 296
32398: PUSH
32399: LD_INT 5
32401: LESS
32402: AND
32403: IFFALSE 32420
// ComAutodestruct ( group [ i ] ) ;
32405: LD_VAR 0 4
32409: PUSH
32410: LD_VAR 0 7
32414: ARRAY
32415: PPUSH
32416: CALL 28606 0 1
// end ; if f_attack_depot then
32420: LD_VAR 0 25
32424: IFFALSE 32536
// begin k := 6 ;
32426: LD_ADDR_VAR 0 9
32430: PUSH
32431: LD_INT 6
32433: ST_TO_ADDR
// if tmp < k then
32434: LD_VAR 0 14
32438: PUSH
32439: LD_VAR 0 9
32443: LESS
32444: IFFALSE 32456
// k := tmp ;
32446: LD_ADDR_VAR 0 9
32450: PUSH
32451: LD_VAR 0 14
32455: ST_TO_ADDR
// for j = 1 to k do
32456: LD_ADDR_VAR 0 8
32460: PUSH
32461: DOUBLE
32462: LD_INT 1
32464: DEC
32465: ST_TO_ADDR
32466: LD_VAR 0 9
32470: PUSH
32471: FOR_TO
32472: IFFALSE 32534
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
32474: LD_VAR 0 8
32478: PPUSH
32479: CALL_OW 266
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: IN
32494: IFFALSE 32532
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
32496: LD_VAR 0 4
32500: PUSH
32501: LD_VAR 0 7
32505: ARRAY
32506: PPUSH
32507: LD_VAR 0 14
32511: PUSH
32512: LD_VAR 0 8
32516: ARRAY
32517: PPUSH
32518: CALL_OW 115
// attacking := true ;
32522: LD_ADDR_VAR 0 29
32526: PUSH
32527: LD_INT 1
32529: ST_TO_ADDR
// break ;
32530: GO 32534
// end ;
32532: GO 32471
32534: POP
32535: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
32536: LD_VAR 0 4
32540: PUSH
32541: LD_VAR 0 7
32545: ARRAY
32546: PPUSH
32547: CALL_OW 302
32551: PUSH
32552: LD_VAR 0 29
32556: NOT
32557: AND
32558: IFFALSE 32826
// begin if GetTag ( group [ i ] ) = 71 then
32560: LD_VAR 0 4
32564: PUSH
32565: LD_VAR 0 7
32569: ARRAY
32570: PPUSH
32571: CALL_OW 110
32575: PUSH
32576: LD_INT 71
32578: EQUAL
32579: IFFALSE 32620
// begin if HasTask ( group [ i ] ) then
32581: LD_VAR 0 4
32585: PUSH
32586: LD_VAR 0 7
32590: ARRAY
32591: PPUSH
32592: CALL_OW 314
32596: IFFALSE 32602
// continue else
32598: GO 30036
32600: GO 32620
// SetTag ( group [ i ] , 0 ) ;
32602: LD_VAR 0 4
32606: PUSH
32607: LD_VAR 0 7
32611: ARRAY
32612: PPUSH
32613: LD_INT 0
32615: PPUSH
32616: CALL_OW 109
// end ; k := 8 ;
32620: LD_ADDR_VAR 0 9
32624: PUSH
32625: LD_INT 8
32627: ST_TO_ADDR
// x := 0 ;
32628: LD_ADDR_VAR 0 10
32632: PUSH
32633: LD_INT 0
32635: ST_TO_ADDR
// if tmp < k then
32636: LD_VAR 0 14
32640: PUSH
32641: LD_VAR 0 9
32645: LESS
32646: IFFALSE 32658
// k := tmp ;
32648: LD_ADDR_VAR 0 9
32652: PUSH
32653: LD_VAR 0 14
32657: ST_TO_ADDR
// for j = 1 to k do
32658: LD_ADDR_VAR 0 8
32662: PUSH
32663: DOUBLE
32664: LD_INT 1
32666: DEC
32667: ST_TO_ADDR
32668: LD_VAR 0 9
32672: PUSH
32673: FOR_TO
32674: IFFALSE 32772
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
32676: LD_VAR 0 14
32680: PUSH
32681: LD_VAR 0 8
32685: ARRAY
32686: PPUSH
32687: CALL_OW 247
32691: PUSH
32692: LD_INT 1
32694: EQUAL
32695: PUSH
32696: LD_VAR 0 14
32700: PUSH
32701: LD_VAR 0 8
32705: ARRAY
32706: PPUSH
32707: CALL_OW 256
32711: PUSH
32712: LD_INT 250
32714: LESS
32715: PUSH
32716: LD_VAR 0 20
32720: AND
32721: PUSH
32722: LD_VAR 0 20
32726: NOT
32727: PUSH
32728: LD_VAR 0 14
32732: PUSH
32733: LD_VAR 0 8
32737: ARRAY
32738: PPUSH
32739: CALL_OW 256
32743: PUSH
32744: LD_INT 250
32746: GREATEREQUAL
32747: AND
32748: OR
32749: AND
32750: IFFALSE 32770
// begin x := tmp [ j ] ;
32752: LD_ADDR_VAR 0 10
32756: PUSH
32757: LD_VAR 0 14
32761: PUSH
32762: LD_VAR 0 8
32766: ARRAY
32767: ST_TO_ADDR
// break ;
32768: GO 32772
// end ;
32770: GO 32673
32772: POP
32773: POP
// if x then
32774: LD_VAR 0 10
32778: IFFALSE 32802
// ComAttackUnit ( group [ i ] , x ) else
32780: LD_VAR 0 4
32784: PUSH
32785: LD_VAR 0 7
32789: ARRAY
32790: PPUSH
32791: LD_VAR 0 10
32795: PPUSH
32796: CALL_OW 115
32800: GO 32826
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32802: LD_VAR 0 4
32806: PUSH
32807: LD_VAR 0 7
32811: ARRAY
32812: PPUSH
32813: LD_VAR 0 14
32817: PUSH
32818: LD_INT 1
32820: ARRAY
32821: PPUSH
32822: CALL_OW 115
// end ; end ; end ;
32826: GO 30036
32828: POP
32829: POP
// wait ( 0 0$1 ) ;
32830: LD_INT 35
32832: PPUSH
32833: CALL_OW 67
// until group = [ ] ;
32837: LD_VAR 0 4
32841: PUSH
32842: EMPTY
32843: EQUAL
32844: IFFALSE 30021
// end ;
32846: LD_VAR 0 2
32850: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32851: LD_INT 0
32853: PPUSH
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
32859: PPUSH
// if not defenders then
32860: LD_VAR 0 2
32864: NOT
32865: IFFALSE 32869
// exit ;
32867: GO 33393
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32869: LD_ADDR_VAR 0 9
32873: PUSH
32874: LD_EXP 48
32878: PUSH
32879: LD_VAR 0 1
32883: ARRAY
32884: PPUSH
32885: LD_INT 25
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PPUSH
32895: CALL_OW 72
32899: ST_TO_ADDR
// if mechs then
32900: LD_VAR 0 9
32904: IFFALSE 33003
// for i in defenders do
32906: LD_ADDR_VAR 0 5
32910: PUSH
32911: LD_VAR 0 2
32915: PUSH
32916: FOR_IN
32917: IFFALSE 33001
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32919: LD_VAR 0 5
32923: PPUSH
32924: CALL_OW 263
32928: PUSH
32929: LD_INT 1
32931: EQUAL
32932: PUSH
32933: LD_VAR 0 5
32937: PPUSH
32938: CALL_OW 311
32942: NOT
32943: AND
32944: IFFALSE 32999
// begin un := mechs [ 1 ] ;
32946: LD_ADDR_VAR 0 7
32950: PUSH
32951: LD_VAR 0 9
32955: PUSH
32956: LD_INT 1
32958: ARRAY
32959: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32960: LD_VAR 0 7
32964: PPUSH
32965: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32969: LD_VAR 0 7
32973: PPUSH
32974: LD_VAR 0 5
32978: PPUSH
32979: CALL_OW 180
// mechs := mechs diff un ;
32983: LD_ADDR_VAR 0 9
32987: PUSH
32988: LD_VAR 0 9
32992: PUSH
32993: LD_VAR 0 7
32997: DIFF
32998: ST_TO_ADDR
// end ;
32999: GO 32916
33001: POP
33002: POP
// repeat wait ( 0 0$1 ) ;
33003: LD_INT 35
33005: PPUSH
33006: CALL_OW 67
// enemy := mc_scan [ base ] ;
33010: LD_ADDR_VAR 0 3
33014: PUSH
33015: LD_EXP 67
33019: PUSH
33020: LD_VAR 0 1
33024: ARRAY
33025: ST_TO_ADDR
// for i in defenders do
33026: LD_ADDR_VAR 0 5
33030: PUSH
33031: LD_VAR 0 2
33035: PUSH
33036: FOR_IN
33037: IFFALSE 33183
// begin e := NearestUnitToUnit ( enemy , i ) ;
33039: LD_ADDR_VAR 0 10
33043: PUSH
33044: LD_VAR 0 3
33048: PPUSH
33049: LD_VAR 0 5
33053: PPUSH
33054: CALL_OW 74
33058: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
33059: LD_VAR 0 5
33063: PPUSH
33064: CALL_OW 319
33068: NOT
33069: PUSH
33070: LD_VAR 0 5
33074: PPUSH
33075: CALL_OW 302
33079: AND
33080: PUSH
33081: LD_VAR 0 5
33085: PPUSH
33086: LD_VAR 0 10
33090: PPUSH
33091: CALL_OW 296
33095: PUSH
33096: LD_INT 30
33098: LESS
33099: AND
33100: IFFALSE 33118
// ComAttackUnit ( i , e ) else
33102: LD_VAR 0 5
33106: PPUSH
33107: LD_VAR 0 10
33111: PPUSH
33112: CALL_OW 115
33116: GO 33181
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
33118: LD_VAR 0 5
33122: PPUSH
33123: LD_VAR 0 10
33127: PPUSH
33128: CALL_OW 296
33132: PUSH
33133: LD_INT 30
33135: GREATEREQUAL
33136: PUSH
33137: LD_VAR 0 5
33141: PPUSH
33142: LD_EXP 68
33146: PUSH
33147: LD_VAR 0 1
33151: ARRAY
33152: PPUSH
33153: CALL_OW 308
33157: NOT
33158: AND
33159: IFFALSE 33181
// ComMoveToArea ( i , mc_parking [ base ] ) ;
33161: LD_VAR 0 5
33165: PPUSH
33166: LD_EXP 68
33170: PUSH
33171: LD_VAR 0 1
33175: ARRAY
33176: PPUSH
33177: CALL_OW 113
// end ;
33181: GO 33036
33183: POP
33184: POP
// until not enemy or not defenders ;
33185: LD_VAR 0 3
33189: NOT
33190: PUSH
33191: LD_VAR 0 2
33195: NOT
33196: OR
33197: IFFALSE 33003
// if not enemy and defenders then
33199: LD_VAR 0 3
33203: NOT
33204: PUSH
33205: LD_VAR 0 2
33209: AND
33210: IFFALSE 33368
// repeat wait ( 0 0$1 ) ;
33212: LD_INT 35
33214: PPUSH
33215: CALL_OW 67
// for i in defenders do
33219: LD_ADDR_VAR 0 5
33223: PUSH
33224: LD_VAR 0 2
33228: PUSH
33229: FOR_IN
33230: IFFALSE 33319
// begin if not IsInArea ( i , mc_parking [ base ] ) then
33232: LD_VAR 0 5
33236: PPUSH
33237: LD_EXP 68
33241: PUSH
33242: LD_VAR 0 1
33246: ARRAY
33247: PPUSH
33248: CALL_OW 308
33252: NOT
33253: IFFALSE 33277
// ComMoveToArea ( i , mc_parking [ base ] ) else
33255: LD_VAR 0 5
33259: PPUSH
33260: LD_EXP 68
33264: PUSH
33265: LD_VAR 0 1
33269: ARRAY
33270: PPUSH
33271: CALL_OW 113
33275: GO 33317
// if GetControl ( i ) = control_manual then
33277: LD_VAR 0 5
33281: PPUSH
33282: CALL_OW 263
33286: PUSH
33287: LD_INT 1
33289: EQUAL
33290: IFFALSE 33317
// if IsDrivenBy ( i ) then
33292: LD_VAR 0 5
33296: PPUSH
33297: CALL_OW 311
33301: IFFALSE 33317
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
33303: LD_VAR 0 5
33307: PPUSH
33308: CALL_OW 311
33312: PPUSH
33313: CALL_OW 121
// end ;
33317: GO 33229
33319: POP
33320: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
33321: LD_VAR 0 2
33325: PPUSH
33326: LD_INT 95
33328: PUSH
33329: LD_EXP 68
33333: PUSH
33334: LD_VAR 0 1
33338: ARRAY
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PPUSH
33344: CALL_OW 72
33348: PUSH
33349: LD_VAR 0 2
33353: EQUAL
33354: PUSH
33355: LD_EXP 67
33359: PUSH
33360: LD_VAR 0 1
33364: ARRAY
33365: OR
33366: IFFALSE 33212
// mc_defender := Replace ( mc_defender , base , defenders ) ;
33368: LD_ADDR_EXP 66
33372: PUSH
33373: LD_EXP 66
33377: PPUSH
33378: LD_VAR 0 1
33382: PPUSH
33383: LD_VAR 0 2
33387: PPUSH
33388: CALL_OW 1
33392: ST_TO_ADDR
// end ;
33393: LD_VAR 0 4
33397: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
33398: LD_INT 0
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
// if not base_units then
33404: LD_VAR 0 1
33408: NOT
33409: IFFALSE 33413
// exit ;
33411: GO 33500
// result := false ;
33413: LD_ADDR_VAR 0 2
33417: PUSH
33418: LD_INT 0
33420: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
33421: LD_ADDR_VAR 0 5
33425: PUSH
33426: LD_VAR 0 1
33430: PPUSH
33431: LD_INT 21
33433: PUSH
33434: LD_INT 3
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PPUSH
33441: CALL_OW 72
33445: ST_TO_ADDR
// if not tmp then
33446: LD_VAR 0 5
33450: NOT
33451: IFFALSE 33455
// exit ;
33453: GO 33500
// for i in tmp do
33455: LD_ADDR_VAR 0 3
33459: PUSH
33460: LD_VAR 0 5
33464: PUSH
33465: FOR_IN
33466: IFFALSE 33498
// begin result := EnemyInRange ( i , 18 ) ;
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 3
33477: PPUSH
33478: LD_INT 18
33480: PPUSH
33481: CALL 28289 0 2
33485: ST_TO_ADDR
// if result then
33486: LD_VAR 0 2
33490: IFFALSE 33496
// exit ;
33492: POP
33493: POP
33494: GO 33500
// end ;
33496: GO 33465
33498: POP
33499: POP
// end ;
33500: LD_VAR 0 2
33504: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33505: LD_INT 0
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
// result := false ;
33511: LD_ADDR_VAR 0 2
33515: PUSH
33516: LD_INT 0
33518: ST_TO_ADDR
// side := GetSide ( unit ) ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_VAR 0 1
33528: PPUSH
33529: CALL_OW 255
33533: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33534: LD_ADDR_VAR 0 4
33538: PUSH
33539: LD_VAR 0 1
33543: PPUSH
33544: CALL_OW 248
33548: ST_TO_ADDR
// case nat of 1 :
33549: LD_VAR 0 4
33553: PUSH
33554: LD_INT 1
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33573
33562: POP
// tech := tech_lassight ; 2 :
33563: LD_ADDR_VAR 0 5
33567: PUSH
33568: LD_INT 12
33570: ST_TO_ADDR
33571: GO 33612
33573: LD_INT 2
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33592
33581: POP
// tech := tech_mortar ; 3 :
33582: LD_ADDR_VAR 0 5
33586: PUSH
33587: LD_INT 41
33589: ST_TO_ADDR
33590: GO 33612
33592: LD_INT 3
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33611
33600: POP
// tech := tech_bazooka ; end ;
33601: LD_ADDR_VAR 0 5
33605: PUSH
33606: LD_INT 44
33608: ST_TO_ADDR
33609: GO 33612
33611: POP
// if Researched ( side , tech ) then
33612: LD_VAR 0 3
33616: PPUSH
33617: LD_VAR 0 5
33621: PPUSH
33622: CALL_OW 325
33626: IFFALSE 33653
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_INT 5
33635: PUSH
33636: LD_INT 8
33638: PUSH
33639: LD_INT 9
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: LIST
33646: PUSH
33647: LD_VAR 0 4
33651: ARRAY
33652: ST_TO_ADDR
// end ;
33653: LD_VAR 0 2
33657: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33658: LD_INT 0
33660: PPUSH
33661: PPUSH
33662: PPUSH
// if not mines then
33663: LD_VAR 0 2
33667: NOT
33668: IFFALSE 33672
// exit ;
33670: GO 33795
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
33672: LD_ADDR_VAR 0 5
33676: PUSH
33677: LD_INT 81
33679: PUSH
33680: LD_VAR 0 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PPUSH
33689: CALL_OW 69
33693: ST_TO_ADDR
// for i in mines do
33694: LD_ADDR_VAR 0 4
33698: PUSH
33699: LD_VAR 0 2
33703: PUSH
33704: FOR_IN
33705: IFFALSE 33793
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33707: LD_VAR 0 4
33711: PUSH
33712: LD_INT 1
33714: ARRAY
33715: PPUSH
33716: LD_VAR 0 4
33720: PUSH
33721: LD_INT 2
33723: ARRAY
33724: PPUSH
33725: CALL_OW 458
33729: NOT
33730: IFFALSE 33734
// continue ;
33732: GO 33704
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33734: LD_VAR 0 4
33738: PUSH
33739: LD_INT 1
33741: ARRAY
33742: PPUSH
33743: LD_VAR 0 4
33747: PUSH
33748: LD_INT 2
33750: ARRAY
33751: PPUSH
33752: CALL_OW 428
33756: PUSH
33757: LD_VAR 0 5
33761: IN
33762: IFFALSE 33791
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33764: LD_VAR 0 4
33768: PUSH
33769: LD_INT 1
33771: ARRAY
33772: PPUSH
33773: LD_VAR 0 4
33777: PUSH
33778: LD_INT 2
33780: ARRAY
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 456
// end ;
33791: GO 33704
33793: POP
33794: POP
// end ; end_of_file
33795: LD_VAR 0 3
33799: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
33800: LD_INT 0
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
33807: LD_ADDR_VAR 0 5
33811: PUSH
33812: LD_INT 6
33814: PUSH
33815: LD_INT 7
33817: PUSH
33818: LD_INT 8
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: PUSH
33826: LD_OWVAR 67
33830: ARRAY
33831: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
33832: LD_INT 69
33834: PUSH
33835: EMPTY
33836: LIST
33837: PPUSH
33838: LD_INT 141
33840: PPUSH
33841: CALL_OW 169
// Wait ( 1 ) ;
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 67
// uc_side := 2 ;
33852: LD_ADDR_OWVAR 20
33856: PUSH
33857: LD_INT 2
33859: ST_TO_ADDR
// uc_nation := 2 ;
33860: LD_ADDR_OWVAR 21
33864: PUSH
33865: LD_INT 2
33867: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
33868: LD_ADDR_OWVAR 37
33872: PUSH
33873: LD_INT 14
33875: ST_TO_ADDR
// vc_engine := engine_siberite ;
33876: LD_ADDR_OWVAR 39
33880: PUSH
33881: LD_INT 3
33883: ST_TO_ADDR
// vc_control := control_manual ;
33884: LD_ADDR_OWVAR 38
33888: PUSH
33889: LD_INT 1
33891: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33892: LD_ADDR_OWVAR 40
33896: PUSH
33897: LD_INT 31
33899: ST_TO_ADDR
// for i = 1 to 3 do
33900: LD_ADDR_VAR 0 2
33904: PUSH
33905: DOUBLE
33906: LD_INT 1
33908: DEC
33909: ST_TO_ADDR
33910: LD_INT 3
33912: PUSH
33913: FOR_TO
33914: IFFALSE 33998
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33916: LD_INT 0
33918: PPUSH
33919: LD_INT 3
33921: PPUSH
33922: LD_VAR 0 5
33926: PPUSH
33927: CALL_OW 380
// un := CreateVehicle ;
33931: LD_ADDR_VAR 0 4
33935: PUSH
33936: CALL_OW 45
33940: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33941: LD_VAR 0 4
33945: PPUSH
33946: LD_INT 0
33948: PPUSH
33949: LD_INT 5
33951: PPUSH
33952: CALL_OW 12
33956: PPUSH
33957: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33961: LD_VAR 0 4
33965: PPUSH
33966: LD_INT 156
33968: PPUSH
33969: LD_INT 15
33971: PPUSH
33972: LD_INT 6
33974: PPUSH
33975: LD_INT 0
33977: PPUSH
33978: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33982: CALL_OW 44
33986: PPUSH
33987: LD_VAR 0 4
33991: PPUSH
33992: CALL_OW 52
// end ;
33996: GO 33913
33998: POP
33999: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
34000: LD_ADDR_EXP 37
34004: PUSH
34005: LD_INT 94
34007: PPUSH
34008: LD_STRING dammam
34010: PPUSH
34011: LD_VAR 0 5
34015: PPUSH
34016: LD_INT 10000
34018: PUSH
34019: LD_INT 1000
34021: PUSH
34022: LD_INT 300
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: PPUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 5
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 4
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: PPUSH
34050: CALL 6046 0 5
34054: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
34055: LD_ADDR_EXP 37
34059: PUSH
34060: LD_EXP 37
34064: PUSH
34065: LD_INT 122
34067: PPUSH
34068: LD_STRING 
34070: PPUSH
34071: LD_VAR 0 5
34075: PPUSH
34076: LD_INT 100
34078: PUSH
34079: LD_INT 60
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: PPUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL 6046 0 5
34113: ADD
34114: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
34115: LD_ADDR_EXP 35
34119: PUSH
34120: LD_INT 45
34122: PPUSH
34123: LD_STRING jeddah
34125: PPUSH
34126: LD_VAR 0 5
34130: PPUSH
34131: LD_INT 700
34133: PUSH
34134: LD_INT 300
34136: PUSH
34137: LD_INT 10
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: PPUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: LD_INT 5
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: PPUSH
34164: CALL 6046 0 5
34168: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
34169: LD_ADDR_EXP 36
34173: PUSH
34174: LD_INT 7
34176: PPUSH
34177: LD_STRING riyadh
34179: PPUSH
34180: LD_VAR 0 5
34184: PPUSH
34185: LD_INT 500
34187: PUSH
34188: LD_INT 60
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: PPUSH
34199: LD_INT 4
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: EMPTY
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: PPUSH
34217: CALL 6046 0 5
34221: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
34222: LD_ADDR_EXP 38
34226: PUSH
34227: LD_INT 69
34229: PPUSH
34230: LD_STRING 
34232: PPUSH
34233: LD_VAR 0 5
34237: PPUSH
34238: LD_INT 500
34240: PUSH
34241: LD_INT 50
34243: PUSH
34244: LD_INT 0
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: PPUSH
34252: LD_INT 1
34254: NEG
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 3
34261: PUSH
34262: LD_INT 2
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: PPUSH
34271: CALL 6046 0 5
34275: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
34276: LD_ADDR_EXP 48
34280: PUSH
34281: LD_EXP 37
34285: PUSH
34286: LD_EXP 35
34290: PUSH
34291: LD_EXP 38
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
34301: LD_ADDR_VAR 0 2
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 30
34318: PUSH
34319: LD_INT 31
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 58
34328: PUSH
34329: EMPTY
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: PPUSH
34337: CALL_OW 69
34341: PUSH
34342: FOR_IN
34343: IFFALSE 34468
// begin if GetBase ( i ) then
34345: LD_VAR 0 2
34349: PPUSH
34350: CALL_OW 274
34354: IFFALSE 34358
// continue ;
34356: GO 34342
// d := GetDir ( i ) ;
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_VAR 0 2
34367: PPUSH
34368: CALL_OW 254
34372: ST_TO_ADDR
// if d < 3 then
34373: LD_VAR 0 3
34377: PUSH
34378: LD_INT 3
34380: LESS
34381: IFFALSE 34399
// d := d + 3 else
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_VAR 0 3
34392: PUSH
34393: LD_INT 3
34395: PLUS
34396: ST_TO_ADDR
34397: GO 34413
// d := d - 3 ;
34399: LD_ADDR_VAR 0 3
34403: PUSH
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 3
34411: MINUS
34412: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
34413: LD_INT 0
34415: PPUSH
34416: LD_INT 8
34418: PPUSH
34419: LD_VAR 0 5
34423: PPUSH
34424: CALL_OW 380
// un := CreateHuman ;
34428: LD_ADDR_VAR 0 4
34432: PUSH
34433: CALL_OW 44
34437: ST_TO_ADDR
// SetDir ( un , d ) ;
34438: LD_VAR 0 4
34442: PPUSH
34443: LD_VAR 0 3
34447: PPUSH
34448: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
34452: LD_VAR 0 4
34456: PPUSH
34457: LD_VAR 0 2
34461: PPUSH
34462: CALL_OW 52
// end ;
34466: GO 34342
34468: POP
34469: POP
// if Difficulty > 1 then
34470: LD_OWVAR 67
34474: PUSH
34475: LD_INT 1
34477: GREATER
34478: IFFALSE 34849
// begin ar_kamikadze := [ ] ;
34480: LD_ADDR_EXP 41
34484: PUSH
34485: EMPTY
34486: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
34487: LD_INT 0
34489: PPUSH
34490: LD_INT 1
34492: PPUSH
34493: LD_VAR 0 5
34497: PPUSH
34498: CALL_OW 380
// un := CreateHuman ;
34502: LD_ADDR_VAR 0 4
34506: PUSH
34507: CALL_OW 44
34511: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34512: LD_VAR 0 4
34516: PPUSH
34517: LD_INT 3
34519: PPUSH
34520: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
34524: LD_VAR 0 4
34528: PPUSH
34529: LD_INT 23
34531: PPUSH
34532: LD_INT 44
34534: PPUSH
34535: LD_INT 0
34537: PPUSH
34538: CALL_OW 48
// ComCrawl ( un ) ;
34542: LD_VAR 0 4
34546: PPUSH
34547: CALL_OW 137
// un := CreateHuman ;
34551: LD_ADDR_VAR 0 4
34555: PUSH
34556: CALL_OW 44
34560: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34561: LD_VAR 0 4
34565: PPUSH
34566: LD_INT 3
34568: PPUSH
34569: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
34573: LD_VAR 0 4
34577: PPUSH
34578: LD_INT 30
34580: PPUSH
34581: LD_INT 39
34583: PPUSH
34584: LD_INT 0
34586: PPUSH
34587: CALL_OW 48
// ComCrawl ( un ) ;
34591: LD_VAR 0 4
34595: PPUSH
34596: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
34600: LD_INT 0
34602: PPUSH
34603: LD_INT 17
34605: PPUSH
34606: LD_VAR 0 5
34610: PPUSH
34611: CALL_OW 380
// un := CreateHuman ;
34615: LD_ADDR_VAR 0 4
34619: PUSH
34620: CALL_OW 44
34624: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34625: LD_VAR 0 4
34629: PPUSH
34630: LD_INT 3
34632: PPUSH
34633: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
34637: LD_VAR 0 4
34641: PPUSH
34642: LD_INT 45
34644: PPUSH
34645: LD_INT 86
34647: PPUSH
34648: LD_INT 0
34650: PPUSH
34651: CALL_OW 48
// ComHold ( un ) ;
34655: LD_VAR 0 4
34659: PPUSH
34660: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34664: LD_ADDR_EXP 41
34668: PUSH
34669: LD_EXP 41
34673: PPUSH
34674: LD_EXP 41
34678: PUSH
34679: LD_INT 1
34681: PLUS
34682: PPUSH
34683: LD_VAR 0 4
34687: PPUSH
34688: CALL_OW 1
34692: ST_TO_ADDR
// un := CreateHuman ;
34693: LD_ADDR_VAR 0 4
34697: PUSH
34698: CALL_OW 44
34702: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34703: LD_VAR 0 4
34707: PPUSH
34708: LD_INT 3
34710: PPUSH
34711: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
34715: LD_VAR 0 4
34719: PPUSH
34720: LD_INT 60
34722: PPUSH
34723: LD_INT 85
34725: PPUSH
34726: LD_INT 0
34728: PPUSH
34729: CALL_OW 48
// ComHold ( un ) ;
34733: LD_VAR 0 4
34737: PPUSH
34738: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34742: LD_ADDR_EXP 41
34746: PUSH
34747: LD_EXP 41
34751: PPUSH
34752: LD_EXP 41
34756: PUSH
34757: LD_INT 1
34759: PLUS
34760: PPUSH
34761: LD_VAR 0 4
34765: PPUSH
34766: CALL_OW 1
34770: ST_TO_ADDR
// un := CreateHuman ;
34771: LD_ADDR_VAR 0 4
34775: PUSH
34776: CALL_OW 44
34780: ST_TO_ADDR
// SetDir ( un , 3 ) ;
34781: LD_VAR 0 4
34785: PPUSH
34786: LD_INT 3
34788: PPUSH
34789: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
34793: LD_VAR 0 4
34797: PPUSH
34798: LD_INT 222
34800: PPUSH
34801: LD_INT 166
34803: PPUSH
34804: LD_INT 0
34806: PPUSH
34807: CALL_OW 48
// ComHold ( un ) ;
34811: LD_VAR 0 4
34815: PPUSH
34816: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
34820: LD_ADDR_EXP 41
34824: PUSH
34825: LD_EXP 41
34829: PPUSH
34830: LD_EXP 41
34834: PUSH
34835: LD_INT 1
34837: PLUS
34838: PPUSH
34839: LD_VAR 0 4
34843: PPUSH
34844: CALL_OW 1
34848: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
34849: LD_ADDR_EXP 39
34853: PUSH
34854: EMPTY
34855: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
34856: LD_INT 1
34858: PPUSH
34859: LD_INT 1
34861: PPUSH
34862: LD_VAR 0 5
34866: PPUSH
34867: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34871: LD_ADDR_OWVAR 33
34875: PUSH
34876: LD_STRING SecondCharsGal
34878: ST_TO_ADDR
// hc_face_number := 4 ;
34879: LD_ADDR_OWVAR 34
34883: PUSH
34884: LD_INT 4
34886: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34887: LD_ADDR_EXP 39
34891: PUSH
34892: LD_EXP 39
34896: PPUSH
34897: LD_INT 1
34899: PPUSH
34900: CALL_OW 44
34904: PPUSH
34905: CALL_OW 1
34909: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34910: LD_INT 2
34912: PPUSH
34913: LD_INT 4
34915: PPUSH
34916: LD_VAR 0 5
34920: PPUSH
34921: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34925: LD_ADDR_OWVAR 33
34929: PUSH
34930: LD_STRING SecondCharsGal
34932: ST_TO_ADDR
// hc_face_number := 15 ;
34933: LD_ADDR_OWVAR 34
34937: PUSH
34938: LD_INT 15
34940: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34941: LD_ADDR_EXP 39
34945: PUSH
34946: LD_EXP 39
34950: PPUSH
34951: LD_INT 2
34953: PPUSH
34954: CALL_OW 44
34958: PPUSH
34959: CALL_OW 1
34963: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34964: LD_INT 2
34966: PPUSH
34967: LD_INT 4
34969: PPUSH
34970: LD_VAR 0 5
34974: PPUSH
34975: CALL_OW 380
// hc_gallery :=  ;
34979: LD_ADDR_OWVAR 33
34983: PUSH
34984: LD_STRING 
34986: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34987: LD_ADDR_EXP 39
34991: PUSH
34992: LD_EXP 39
34996: PPUSH
34997: LD_INT 3
34999: PPUSH
35000: CALL_OW 44
35004: PPUSH
35005: CALL_OW 1
35009: ST_TO_ADDR
// hc_sex := sex_male ;
35010: LD_ADDR_OWVAR 27
35014: PUSH
35015: LD_INT 1
35017: ST_TO_ADDR
// hc_class = 11 ;
35018: LD_ADDR_OWVAR 28
35022: PUSH
35023: LD_INT 11
35025: ST_TO_ADDR
// hc_gallery = sandar ;
35026: LD_ADDR_OWVAR 33
35030: PUSH
35031: LD_STRING sandar
35033: ST_TO_ADDR
// hc_face_number = 33 ;
35034: LD_ADDR_OWVAR 34
35038: PUSH
35039: LD_INT 33
35041: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
35042: LD_ADDR_OWVAR 26
35046: PUSH
35047: LD_STRING Thabit Muhair Saliba
35049: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
35050: LD_ADDR_OWVAR 31
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// Saliba = CreateHuman ;
35073: LD_ADDR_EXP 43
35077: PUSH
35078: CALL_OW 44
35082: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
35083: LD_EXP 43
35087: PPUSH
35088: LD_INT 7
35090: PPUSH
35091: CALL_OW 52
// if gensher_active then
35095: LD_EXP 18
35099: IFFALSE 35126
// begin Gensher = NewCharacter ( Dietrich ) ;
35101: LD_ADDR_EXP 44
35105: PUSH
35106: LD_STRING Dietrich
35108: PPUSH
35109: CALL_OW 25
35113: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
35114: LD_EXP 44
35118: PPUSH
35119: LD_INT 94
35121: PPUSH
35122: CALL_OW 52
// end ; InitHc ;
35126: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
35130: LD_ADDR_EXP 40
35134: PUSH
35135: EMPTY
35136: ST_TO_ADDR
// for i = 1 to 4 do
35137: LD_ADDR_VAR 0 2
35141: PUSH
35142: DOUBLE
35143: LD_INT 1
35145: DEC
35146: ST_TO_ADDR
35147: LD_INT 4
35149: PUSH
35150: FOR_TO
35151: IFFALSE 35323
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
35153: LD_INT 13
35155: PUSH
35156: LD_INT 14
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 1
35165: PPUSH
35166: LD_INT 2
35168: PPUSH
35169: CALL_OW 12
35173: ARRAY
35174: PPUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 2
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 1
35187: PPUSH
35188: LD_INT 2
35190: PPUSH
35191: CALL_OW 12
35195: ARRAY
35196: PPUSH
35197: LD_INT 1
35199: PPUSH
35200: LD_INT 25
35202: PUSH
35203: LD_INT 27
35205: PUSH
35206: LD_INT 26
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PPUSH
35217: LD_INT 3
35219: PPUSH
35220: CALL_OW 12
35224: ARRAY
35225: PPUSH
35226: LD_INT 60
35228: PPUSH
35229: LD_INT 100
35231: PPUSH
35232: CALL_OW 12
35236: PPUSH
35237: CALL 2051 0 5
// un := CreateVehicle ;
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: CALL_OW 45
35250: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
35251: LD_ADDR_EXP 40
35255: PUSH
35256: LD_EXP 40
35260: PPUSH
35261: LD_EXP 40
35265: PUSH
35266: LD_INT 1
35268: PLUS
35269: PPUSH
35270: LD_VAR 0 4
35274: PPUSH
35275: CALL_OW 1
35279: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35280: LD_VAR 0 4
35284: PPUSH
35285: LD_INT 0
35287: PPUSH
35288: LD_INT 5
35290: PPUSH
35291: CALL_OW 12
35295: PPUSH
35296: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
35300: LD_VAR 0 4
35304: PPUSH
35305: LD_INT 124
35307: PPUSH
35308: LD_INT 141
35310: PPUSH
35311: LD_INT 6
35313: PPUSH
35314: LD_INT 0
35316: PPUSH
35317: CALL_OW 50
// end ;
35321: GO 35150
35323: POP
35324: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
35325: LD_ADDR_EXP 42
35329: PUSH
35330: EMPTY
35331: PUSH
35332: EMPTY
35333: PUSH
35334: EMPTY
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: LIST
35340: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
35341: LD_ADDR_VAR 0 3
35345: PUSH
35346: DOUBLE
35347: LD_INT 1
35349: DEC
35350: ST_TO_ADDR
35351: LD_INT 3
35353: PUSH
35354: LD_INT 3
35356: PUSH
35357: LD_INT 4
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: PUSH
35365: LD_OWVAR 67
35369: ARRAY
35370: PUSH
35371: FOR_TO
35372: IFFALSE 35586
// for i = 1 to 3 do
35374: LD_ADDR_VAR 0 2
35378: PUSH
35379: DOUBLE
35380: LD_INT 1
35382: DEC
35383: ST_TO_ADDR
35384: LD_INT 3
35386: PUSH
35387: FOR_TO
35388: IFFALSE 35582
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
35390: LD_INT 14
35392: PPUSH
35393: LD_INT 3
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PPUSH
35406: LD_INT 2
35408: PPUSH
35409: CALL_OW 12
35413: ARRAY
35414: PPUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 5
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PPUSH
35428: LD_INT 2
35430: PPUSH
35431: CALL_OW 12
35435: ARRAY
35436: PPUSH
35437: LD_INT 25
35439: PUSH
35440: LD_INT 27
35442: PUSH
35443: LD_INT 26
35445: PUSH
35446: LD_INT 28
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: PPUSH
35458: LD_INT 4
35460: PPUSH
35461: CALL_OW 12
35465: ARRAY
35466: PPUSH
35467: LD_INT 100
35469: PPUSH
35470: CALL 2051 0 5
// un := CreateVehicle ;
35474: LD_ADDR_VAR 0 4
35478: PUSH
35479: CALL_OW 45
35483: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
35484: LD_ADDR_EXP 42
35488: PUSH
35489: LD_EXP 42
35493: PPUSH
35494: LD_VAR 0 2
35498: PUSH
35499: LD_EXP 42
35503: PUSH
35504: LD_VAR 0 2
35508: ARRAY
35509: PUSH
35510: LD_INT 1
35512: PLUS
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PPUSH
35518: LD_VAR 0 4
35522: PPUSH
35523: CALL 3237 0 3
35527: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
35528: LD_VAR 0 4
35532: PPUSH
35533: LD_INT 0
35535: PPUSH
35536: LD_INT 5
35538: PPUSH
35539: CALL_OW 12
35543: PPUSH
35544: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
35548: LD_VAR 0 4
35552: PPUSH
35553: LD_INT 20
35555: PUSH
35556: LD_INT 21
35558: PUSH
35559: LD_INT 22
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: PUSH
35567: LD_VAR 0 2
35571: ARRAY
35572: PPUSH
35573: LD_INT 0
35575: PPUSH
35576: CALL_OW 49
// end ;
35580: GO 35387
35582: POP
35583: POP
35584: GO 35371
35586: POP
35587: POP
// InitHc ;
35588: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
35592: LD_INT 4
35594: PPUSH
35595: LD_INT 5
35597: PPUSH
35598: LD_INT 10
35600: PPUSH
35601: LD_INT 5
35603: PPUSH
35604: LD_INT 0
35606: PPUSH
35607: CALL_OW 58
// end ;
35611: LD_VAR 0 1
35615: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
35616: LD_EXP 41
35620: IFFALSE 35694
35622: GO 35624
35624: DISABLE
35625: LD_INT 0
35627: PPUSH
// begin enable ;
35628: ENABLE
// for i in ar_kamikadze do
35629: LD_ADDR_VAR 0 1
35633: PUSH
35634: LD_EXP 41
35638: PUSH
35639: FOR_IN
35640: IFFALSE 35692
// if See ( 1 , i ) then
35642: LD_INT 1
35644: PPUSH
35645: LD_VAR 0 1
35649: PPUSH
35650: CALL_OW 292
35654: IFFALSE 35690
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
35656: LD_VAR 0 1
35660: PPUSH
35661: LD_INT 81
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PPUSH
35671: CALL_OW 69
35675: PPUSH
35676: LD_VAR 0 1
35680: PPUSH
35681: CALL_OW 74
35685: PPUSH
35686: CALL_OW 115
35690: GO 35639
35692: POP
35693: POP
// end ;
35694: PPOPN 1
35696: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
35697: LD_EXP 13
35701: IFFALSE 36018
35703: GO 35705
35705: DISABLE
35706: LD_INT 0
35708: PPUSH
35709: PPUSH
35710: PPUSH
35711: PPUSH
// begin repeat wait ( 0 0$1 ) ;
35712: LD_INT 35
35714: PPUSH
35715: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
35719: LD_INT 1
35721: PPUSH
35722: CALL 55244 0 1
35726: PUSH
35727: LD_INT 0
35729: EQUAL
35730: IFFALSE 35712
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
35732: LD_INT 1
35734: PPUSH
35735: LD_INT 14
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 32
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: EMPTY
35754: LIST
35755: PPUSH
35756: CALL 55033 0 2
// repeat wait ( 0 0$1 ) ;
35760: LD_INT 35
35762: PPUSH
35763: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
35767: LD_EXP 63
35771: PUSH
35772: LD_INT 1
35774: ARRAY
35775: PPUSH
35776: LD_INT 33
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 34
35788: PUSH
35789: LD_INT 32
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PPUSH
35800: CALL_OW 72
35804: IFFALSE 35760
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
35806: LD_ADDR_VAR 0 2
35810: PUSH
35811: LD_EXP 63
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PPUSH
35820: LD_INT 33
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 34
35832: PUSH
35833: LD_INT 32
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PPUSH
35844: CALL_OW 72
35848: PUSH
35849: LD_INT 1
35851: ARRAY
35852: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: LD_INT 5
35860: PPUSH
35861: CALL_OW 469
35865: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
35866: LD_INT 35
35868: PPUSH
35869: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
35873: LD_ADDR_VAR 0 4
35877: PUSH
35878: LD_INT 5
35880: PPUSH
35881: CALL_OW 469
35885: ST_TO_ADDR
// tmp := 100 ;
35886: LD_ADDR_VAR 0 3
35890: PUSH
35891: LD_INT 100
35893: ST_TO_ADDR
// if pos then
35894: LD_VAR 0 4
35898: IFFALSE 35938
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
35900: LD_ADDR_VAR 0 3
35904: PUSH
35905: LD_INT 2
35907: PPUSH
35908: LD_VAR 0 4
35912: PUSH
35913: LD_INT 1
35915: ARRAY
35916: PPUSH
35917: LD_VAR 0 4
35921: PUSH
35922: LD_INT 2
35924: ARRAY
35925: PPUSH
35926: LD_INT 20
35928: PPUSH
35929: CALL 3731 0 4
35933: PUSH
35934: LD_INT 4
35936: ARRAY
35937: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35938: LD_VAR 0 4
35942: PUSH
35943: LD_EXP 14
35947: NOT
35948: AND
35949: PUSH
35950: LD_VAR 0 3
35954: PUSH
35955: LD_INT 10
35957: LESS
35958: AND
35959: IFFALSE 35866
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35961: LD_VAR 0 2
35965: PPUSH
35966: LD_VAR 0 4
35970: PUSH
35971: LD_INT 1
35973: ARRAY
35974: PPUSH
35975: LD_VAR 0 4
35979: PUSH
35980: LD_INT 2
35982: ARRAY
35983: PPUSH
35984: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35988: LD_VAR 0 2
35992: PPUSH
35993: LD_INT 198
35995: PPUSH
35996: LD_INT 113
35998: PPUSH
35999: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
36003: LD_VAR 0 2
36007: PPUSH
36008: LD_INT 124
36010: PPUSH
36011: LD_INT 7
36013: PPUSH
36014: CALL_OW 171
// end ;
36018: PPOPN 4
36020: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
36021: LD_EXP 6
36025: IFFALSE 38570
36027: GO 36029
36029: DISABLE
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
36040: LD_ADDR_VAR 0 4
36044: PUSH
36045: LD_INT 5
36047: PUSH
36048: LD_INT 6
36050: PUSH
36051: LD_INT 7
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: LIST
36058: PUSH
36059: LD_OWVAR 67
36063: ARRAY
36064: ST_TO_ADDR
// coords := [ ] ;
36065: LD_ADDR_VAR 0 5
36069: PUSH
36070: EMPTY
36071: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
36072: LD_ADDR_VAR 0 6
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: LD_INT 1
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 0
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
36119: LD_INT 1
36121: PPUSH
36122: LD_INT 14
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 28
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 14
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: LD_INT 25
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 14
36160: PUSH
36161: LD_INT 1
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 28
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 14
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: LD_INT 29
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: PPUSH
36200: CALL 55033 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
36204: LD_INT 21000
36206: PUSH
36207: LD_INT 19600
36209: PUSH
36210: LD_INT 18900
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: PUSH
36218: LD_OWVAR 67
36222: ARRAY
36223: PPUSH
36224: CALL_OW 67
// InitHc ;
36228: CALL_OW 19
// InitUc ;
36232: CALL_OW 18
// uc_side := 2 ;
36236: LD_ADDR_OWVAR 20
36240: PUSH
36241: LD_INT 2
36243: ST_TO_ADDR
// uc_nation := 2 ;
36244: LD_ADDR_OWVAR 21
36248: PUSH
36249: LD_INT 2
36251: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: EMPTY
36258: PUSH
36259: EMPTY
36260: PUSH
36261: EMPTY
36262: PUSH
36263: EMPTY
36264: PUSH
36265: EMPTY
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
36274: LD_ADDR_VAR 0 3
36278: PUSH
36279: LD_VAR 0 3
36283: PPUSH
36284: LD_INT 1
36286: PPUSH
36287: LD_EXP 63
36291: PUSH
36292: LD_INT 1
36294: ARRAY
36295: PUSH
36296: LD_INT 34
36298: PUSH
36299: LD_INT 32
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PPUSH
36306: CALL_OW 69
36310: DIFF
36311: PPUSH
36312: CALL_OW 1
36316: ST_TO_ADDR
// for i = 1 to Difficulty do
36317: LD_ADDR_VAR 0 1
36321: PUSH
36322: DOUBLE
36323: LD_INT 1
36325: DEC
36326: ST_TO_ADDR
36327: LD_OWVAR 67
36331: PUSH
36332: FOR_TO
36333: IFFALSE 36455
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
36335: LD_INT 13
36337: PPUSH
36338: LD_INT 3
36340: PPUSH
36341: LD_INT 5
36343: PPUSH
36344: LD_INT 29
36346: PPUSH
36347: LD_INT 100
36349: PPUSH
36350: CALL 2051 0 5
// un := CreateVehicle ;
36354: LD_ADDR_VAR 0 2
36358: PUSH
36359: CALL_OW 45
36363: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_VAR 0 3
36373: PPUSH
36374: LD_INT 1
36376: PUSH
36377: LD_VAR 0 3
36381: PUSH
36382: LD_INT 1
36384: ARRAY
36385: PUSH
36386: LD_INT 1
36388: PLUS
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PPUSH
36394: LD_VAR 0 2
36398: PPUSH
36399: CALL 3237 0 3
36403: ST_TO_ADDR
// SetDir ( un , 3 ) ;
36404: LD_VAR 0 2
36408: PPUSH
36409: LD_INT 3
36411: PPUSH
36412: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
36416: LD_VAR 0 2
36420: PPUSH
36421: LD_INT 16
36423: PPUSH
36424: LD_INT 0
36426: PPUSH
36427: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
36431: LD_VAR 0 2
36435: PPUSH
36436: LD_INT 51
36438: PPUSH
36439: LD_INT 10
36441: PPUSH
36442: CALL_OW 111
// wait ( 0 0$2 ) ;
36446: LD_INT 70
36448: PPUSH
36449: CALL_OW 67
// end ;
36453: GO 36332
36455: POP
36456: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
36457: LD_ADDR_VAR 0 5
36461: PUSH
36462: LD_INT 51
36464: PUSH
36465: LD_INT 24
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 75
36474: PUSH
36475: LD_INT 90
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
36486: LD_INT 1
36488: PPUSH
36489: LD_VAR 0 3
36493: PUSH
36494: LD_INT 1
36496: ARRAY
36497: PPUSH
36498: LD_VAR 0 5
36502: PPUSH
36503: LD_VAR 0 6
36507: PPUSH
36508: CALL 55129 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36512: LD_ADDR_VAR 0 1
36516: PUSH
36517: DOUBLE
36518: LD_INT 1
36520: DEC
36521: ST_TO_ADDR
36522: LD_INT 2
36524: PUSH
36525: LD_INT 3
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: LIST
36535: PUSH
36536: LD_OWVAR 67
36540: ARRAY
36541: PUSH
36542: FOR_TO
36543: IFFALSE 36627
// begin PrepareHuman ( false , 17 , skill ) ;
36545: LD_INT 0
36547: PPUSH
36548: LD_INT 17
36550: PPUSH
36551: LD_VAR 0 4
36555: PPUSH
36556: CALL_OW 380
// un := CreateHuman ;
36560: LD_ADDR_VAR 0 2
36564: PUSH
36565: CALL_OW 44
36569: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: LD_VAR 0 3
36579: PPUSH
36580: LD_INT 2
36582: PUSH
36583: LD_VAR 0 3
36587: PUSH
36588: LD_INT 2
36590: ARRAY
36591: PUSH
36592: LD_INT 1
36594: PLUS
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PPUSH
36600: LD_VAR 0 2
36604: PPUSH
36605: CALL 3237 0 3
36609: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_INT 13
36617: PPUSH
36618: LD_INT 0
36620: PPUSH
36621: CALL_OW 49
// end ;
36625: GO 36542
36627: POP
36628: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
36629: LD_ADDR_VAR 0 1
36633: PUSH
36634: DOUBLE
36635: LD_INT 1
36637: DEC
36638: ST_TO_ADDR
36639: LD_INT 2
36641: PUSH
36642: LD_INT 3
36644: PUSH
36645: LD_INT 3
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: PUSH
36653: LD_OWVAR 67
36657: ARRAY
36658: PUSH
36659: FOR_TO
36660: IFFALSE 36763
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
36662: LD_INT 0
36664: PPUSH
36665: LD_INT 1
36667: PUSH
36668: LD_INT 8
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: PPUSH
36678: LD_INT 2
36680: PPUSH
36681: CALL_OW 12
36685: ARRAY
36686: PPUSH
36687: LD_VAR 0 4
36691: PPUSH
36692: CALL_OW 380
// un := CreateHuman ;
36696: LD_ADDR_VAR 0 2
36700: PUSH
36701: CALL_OW 44
36705: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
36706: LD_ADDR_VAR 0 3
36710: PUSH
36711: LD_VAR 0 3
36715: PPUSH
36716: LD_INT 2
36718: PUSH
36719: LD_VAR 0 3
36723: PUSH
36724: LD_INT 2
36726: ARRAY
36727: PUSH
36728: LD_INT 1
36730: PLUS
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PPUSH
36736: LD_VAR 0 2
36740: PPUSH
36741: CALL 3237 0 3
36745: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
36746: LD_VAR 0 2
36750: PPUSH
36751: LD_INT 13
36753: PPUSH
36754: LD_INT 0
36756: PPUSH
36757: CALL_OW 49
// end ;
36761: GO 36659
36763: POP
36764: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
36765: LD_ADDR_VAR 0 5
36769: PUSH
36770: LD_INT 67
36772: PUSH
36773: LD_INT 112
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 85
36782: PUSH
36783: LD_INT 130
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
36794: LD_INT 2
36796: PPUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_INT 2
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 5
36810: PPUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL 55129 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
36820: LD_ADDR_VAR 0 1
36824: PUSH
36825: DOUBLE
36826: LD_INT 1
36828: DEC
36829: ST_TO_ADDR
36830: LD_INT 1
36832: PUSH
36833: LD_INT 2
36835: PUSH
36836: LD_INT 3
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: LD_OWVAR 67
36848: ARRAY
36849: PUSH
36850: FOR_TO
36851: IFFALSE 36935
// begin PrepareHuman ( false , 17 , skill ) ;
36853: LD_INT 0
36855: PPUSH
36856: LD_INT 17
36858: PPUSH
36859: LD_VAR 0 4
36863: PPUSH
36864: CALL_OW 380
// un := CreateHuman ;
36868: LD_ADDR_VAR 0 2
36872: PUSH
36873: CALL_OW 44
36877: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
36878: LD_ADDR_VAR 0 3
36882: PUSH
36883: LD_VAR 0 3
36887: PPUSH
36888: LD_INT 3
36890: PUSH
36891: LD_VAR 0 3
36895: PUSH
36896: LD_INT 3
36898: ARRAY
36899: PUSH
36900: LD_INT 1
36902: PLUS
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PPUSH
36908: LD_VAR 0 2
36912: PPUSH
36913: CALL 3237 0 3
36917: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36918: LD_VAR 0 2
36922: PPUSH
36923: LD_INT 14
36925: PPUSH
36926: LD_INT 0
36928: PPUSH
36929: CALL_OW 49
// end ;
36933: GO 36850
36935: POP
36936: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36937: LD_ADDR_VAR 0 5
36941: PUSH
36942: LD_INT 148
36944: PUSH
36945: LD_INT 158
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 148
36954: PUSH
36955: LD_INT 158
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36966: LD_INT 3
36968: PPUSH
36969: LD_VAR 0 3
36973: PUSH
36974: LD_INT 3
36976: ARRAY
36977: PPUSH
36978: LD_VAR 0 5
36982: PPUSH
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL 55129 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
36992: LD_ADDR_VAR 0 1
36996: PUSH
36997: DOUBLE
36998: LD_INT 1
37000: DEC
37001: ST_TO_ADDR
37002: LD_INT 3
37004: PUSH
37005: LD_INT 4
37007: PUSH
37008: LD_INT 4
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: PUSH
37016: LD_OWVAR 67
37020: ARRAY
37021: PUSH
37022: FOR_TO
37023: IFFALSE 37231
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
37025: LD_INT 14
37027: PPUSH
37028: LD_INT 3
37030: PPUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 5
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 1
37043: PPUSH
37044: LD_INT 2
37046: PPUSH
37047: CALL_OW 12
37051: ARRAY
37052: PPUSH
37053: LD_INT 27
37055: PUSH
37056: LD_INT 26
37058: PUSH
37059: LD_INT 28
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PPUSH
37070: LD_INT 3
37072: PPUSH
37073: CALL_OW 12
37077: ARRAY
37078: PPUSH
37079: LD_INT 100
37081: PPUSH
37082: CALL 2051 0 5
// un := CreateVehicle ;
37086: LD_ADDR_VAR 0 2
37090: PUSH
37091: CALL_OW 45
37095: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: LD_VAR 0 3
37105: PPUSH
37106: LD_INT 4
37108: PUSH
37109: LD_VAR 0 3
37113: PUSH
37114: LD_INT 4
37116: ARRAY
37117: PUSH
37118: LD_INT 1
37120: PLUS
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PPUSH
37126: LD_VAR 0 2
37130: PPUSH
37131: CALL 3237 0 3
37135: ST_TO_ADDR
// SetDir ( un , 5 ) ;
37136: LD_VAR 0 2
37140: PPUSH
37141: LD_INT 5
37143: PPUSH
37144: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
37148: LD_VAR 0 2
37152: PPUSH
37153: LD_INT 15
37155: PPUSH
37156: LD_INT 0
37158: PPUSH
37159: CALL_OW 49
// if GetControl ( un ) = control_manual then
37163: LD_VAR 0 2
37167: PPUSH
37168: CALL_OW 263
37172: PUSH
37173: LD_INT 1
37175: EQUAL
37176: IFFALSE 37207
// begin PrepareHuman ( false , 3 , skill ) ;
37178: LD_INT 0
37180: PPUSH
37181: LD_INT 3
37183: PPUSH
37184: LD_VAR 0 4
37188: PPUSH
37189: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
37193: CALL_OW 44
37197: PPUSH
37198: LD_VAR 0 2
37202: PPUSH
37203: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
37207: LD_VAR 0 2
37211: PPUSH
37212: LD_INT 179
37214: PPUSH
37215: LD_INT 135
37217: PPUSH
37218: CALL_OW 111
// wait ( 0 0$2 ) ;
37222: LD_INT 70
37224: PPUSH
37225: CALL_OW 67
// end ;
37229: GO 37022
37231: POP
37232: POP
// vc_chassis := 15 ;
37233: LD_ADDR_OWVAR 37
37237: PUSH
37238: LD_INT 15
37240: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
37241: LD_ADDR_VAR 0 3
37245: PUSH
37246: LD_VAR 0 3
37250: PPUSH
37251: LD_INT 4
37253: PUSH
37254: LD_VAR 0 3
37258: PUSH
37259: LD_INT 4
37261: ARRAY
37262: PUSH
37263: LD_INT 1
37265: PLUS
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PPUSH
37271: CALL_OW 45
37275: PPUSH
37276: CALL 3237 0 3
37280: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
37281: LD_VAR 0 3
37285: PUSH
37286: LD_INT 4
37288: ARRAY
37289: PUSH
37290: LD_VAR 0 3
37294: PUSH
37295: LD_INT 4
37297: ARRAY
37298: ARRAY
37299: PPUSH
37300: LD_INT 15
37302: PPUSH
37303: LD_INT 0
37305: PPUSH
37306: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
37310: LD_INT 0
37312: PPUSH
37313: LD_INT 11
37315: PPUSH
37316: LD_VAR 0 4
37320: PPUSH
37321: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
37325: LD_ADDR_VAR 0 3
37329: PUSH
37330: LD_VAR 0 3
37334: PPUSH
37335: LD_INT 4
37337: PUSH
37338: LD_VAR 0 3
37342: PUSH
37343: LD_INT 4
37345: ARRAY
37346: PUSH
37347: LD_INT 1
37349: PLUS
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PPUSH
37355: CALL_OW 44
37359: PPUSH
37360: CALL 3237 0 3
37364: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
37365: LD_VAR 0 3
37369: PUSH
37370: LD_INT 4
37372: ARRAY
37373: PUSH
37374: LD_VAR 0 3
37378: PUSH
37379: LD_INT 4
37381: ARRAY
37382: ARRAY
37383: PPUSH
37384: LD_VAR 0 3
37388: PUSH
37389: LD_INT 4
37391: ARRAY
37392: PUSH
37393: LD_VAR 0 3
37397: PUSH
37398: LD_INT 4
37400: ARRAY
37401: PUSH
37402: LD_INT 1
37404: MINUS
37405: ARRAY
37406: PPUSH
37407: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
37411: LD_ADDR_VAR 0 5
37415: PUSH
37416: LD_INT 148
37418: PUSH
37419: LD_INT 140
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
37429: LD_INT 1
37431: PPUSH
37432: LD_VAR 0 3
37436: PUSH
37437: LD_INT 4
37439: ARRAY
37440: PPUSH
37441: LD_VAR 0 5
37445: PPUSH
37446: LD_VAR 0 6
37450: PPUSH
37451: CALL 55129 0 4
// if gensher_active then
37455: LD_EXP 18
37459: IFFALSE 37812
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
37461: LD_EXP 44
37465: PPUSH
37466: LD_STRING D10-Diet-1
37468: PPUSH
37469: CALL_OW 94
// for i = 1 to 2 do
37473: LD_ADDR_VAR 0 1
37477: PUSH
37478: DOUBLE
37479: LD_INT 1
37481: DEC
37482: ST_TO_ADDR
37483: LD_INT 2
37485: PUSH
37486: FOR_TO
37487: IFFALSE 37609
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
37489: LD_INT 13
37491: PPUSH
37492: LD_INT 3
37494: PPUSH
37495: LD_INT 5
37497: PPUSH
37498: LD_INT 29
37500: PPUSH
37501: LD_INT 100
37503: PPUSH
37504: CALL 2051 0 5
// un := CreateVehicle ;
37508: LD_ADDR_VAR 0 2
37512: PUSH
37513: CALL_OW 45
37517: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37518: LD_ADDR_VAR 0 3
37522: PUSH
37523: LD_VAR 0 3
37527: PPUSH
37528: LD_INT 5
37530: PUSH
37531: LD_VAR 0 3
37535: PUSH
37536: LD_INT 5
37538: ARRAY
37539: PUSH
37540: LD_INT 1
37542: PLUS
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PPUSH
37548: LD_VAR 0 2
37552: PPUSH
37553: CALL 3237 0 3
37557: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37558: LD_VAR 0 2
37562: PPUSH
37563: LD_INT 0
37565: PPUSH
37566: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37570: LD_VAR 0 2
37574: PPUSH
37575: LD_INT 23
37577: PPUSH
37578: LD_INT 0
37580: PPUSH
37581: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37585: LD_VAR 0 2
37589: PPUSH
37590: LD_INT 85
37592: PPUSH
37593: LD_INT 152
37595: PPUSH
37596: CALL_OW 111
// wait ( 0 0$2 ) ;
37600: LD_INT 70
37602: PPUSH
37603: CALL_OW 67
// end ;
37607: GO 37486
37609: POP
37610: POP
// for i = 1 to 3 do
37611: LD_ADDR_VAR 0 1
37615: PUSH
37616: DOUBLE
37617: LD_INT 1
37619: DEC
37620: ST_TO_ADDR
37621: LD_INT 3
37623: PUSH
37624: FOR_TO
37625: IFFALSE 37766
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
37627: LD_INT 14
37629: PPUSH
37630: LD_INT 3
37632: PPUSH
37633: LD_INT 5
37635: PPUSH
37636: LD_INT 27
37638: PUSH
37639: LD_INT 28
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PPUSH
37649: LD_INT 2
37651: PPUSH
37652: CALL_OW 12
37656: ARRAY
37657: PPUSH
37658: LD_INT 100
37660: PPUSH
37661: CALL 2051 0 5
// un := CreateVehicle ;
37665: LD_ADDR_VAR 0 2
37669: PUSH
37670: CALL_OW 45
37674: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
37675: LD_ADDR_VAR 0 3
37679: PUSH
37680: LD_VAR 0 3
37684: PPUSH
37685: LD_INT 5
37687: PUSH
37688: LD_VAR 0 3
37692: PUSH
37693: LD_INT 5
37695: ARRAY
37696: PUSH
37697: LD_INT 1
37699: PLUS
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PPUSH
37705: LD_VAR 0 2
37709: PPUSH
37710: CALL 3237 0 3
37714: ST_TO_ADDR
// SetDir ( un , 0 ) ;
37715: LD_VAR 0 2
37719: PPUSH
37720: LD_INT 0
37722: PPUSH
37723: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
37727: LD_VAR 0 2
37731: PPUSH
37732: LD_INT 23
37734: PPUSH
37735: LD_INT 0
37737: PPUSH
37738: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
37742: LD_VAR 0 2
37746: PPUSH
37747: LD_INT 85
37749: PPUSH
37750: LD_INT 152
37752: PPUSH
37753: CALL_OW 111
// wait ( 0 0$2 ) ;
37757: LD_INT 70
37759: PPUSH
37760: CALL_OW 67
// end ;
37764: GO 37624
37766: POP
37767: POP
// coords := [ [ 97 , 143 ] ] ;
37768: LD_ADDR_VAR 0 5
37772: PUSH
37773: LD_INT 97
37775: PUSH
37776: LD_INT 143
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
37786: LD_INT 1
37788: PPUSH
37789: LD_VAR 0 3
37793: PUSH
37794: LD_INT 5
37796: ARRAY
37797: PPUSH
37798: LD_VAR 0 5
37802: PPUSH
37803: LD_VAR 0 6
37807: PPUSH
37808: CALL 55129 0 4
// end ; Wait ( 10 10$00 ) ;
37812: LD_INT 21000
37814: PPUSH
37815: CALL_OW 67
// tmp := [ ] ;
37819: LD_ADDR_VAR 0 3
37823: PUSH
37824: EMPTY
37825: ST_TO_ADDR
// w := 1 ;
37826: LD_ADDR_VAR 0 7
37830: PUSH
37831: LD_INT 1
37833: ST_TO_ADDR
// repeat tmp := [ ] ;
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: EMPTY
37840: ST_TO_ADDR
// if w mod 4 = 0 then
37841: LD_VAR 0 7
37845: PUSH
37846: LD_INT 4
37848: MOD
37849: PUSH
37850: LD_INT 0
37852: EQUAL
37853: IFFALSE 37940
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
37855: LD_ADDR_VAR 0 8
37859: PUSH
37860: LD_INT 11
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 24
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 11
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 24
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 11
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: LD_INT 2
37904: PUSH
37905: LD_INT 24
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 11
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: LD_INT 24
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: ST_TO_ADDR
37938: GO 38042
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
37940: LD_ADDR_VAR 0 8
37944: PUSH
37945: LD_INT 14
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 28
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 14
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 25
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 14
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 2
37989: PUSH
37990: LD_INT 28
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 14
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: LD_INT 29
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 11
38019: PUSH
38020: LD_INT 1
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: LD_INT 24
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: ST_TO_ADDR
// if w mod 3 = 0 then
38042: LD_VAR 0 7
38046: PUSH
38047: LD_INT 3
38049: MOD
38050: PUSH
38051: LD_INT 0
38053: EQUAL
38054: IFFALSE 38130
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
38056: LD_ADDR_VAR 0 8
38060: PUSH
38061: LD_VAR 0 8
38065: PPUSH
38066: LD_INT 1
38068: PUSH
38069: LD_VAR 0 8
38073: PUSH
38074: LD_VAR 0 1
38078: ARRAY
38079: PUSH
38080: LD_INT 1
38082: PLUS
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PPUSH
38088: LD_INT 14
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 25
38099: PUSH
38100: LD_INT 28
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: PPUSH
38110: LD_INT 2
38112: PPUSH
38113: CALL_OW 12
38117: ARRAY
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: PPUSH
38125: CALL 3237 0 3
38129: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
38130: LD_INT 1
38132: PPUSH
38133: LD_VAR 0 8
38137: PPUSH
38138: CALL 55033 0 2
// if GetSide ( ar_dep_w ) = 2 then
38142: LD_INT 45
38144: PPUSH
38145: CALL_OW 255
38149: PUSH
38150: LD_INT 2
38152: EQUAL
38153: IFFALSE 38238
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
38155: LD_ADDR_VAR 0 8
38159: PUSH
38160: LD_INT 14
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: LD_INT 28
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 14
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 2
38186: PUSH
38187: LD_INT 27
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 14
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: LD_INT 27
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
38219: LD_INT 2
38221: PPUSH
38222: LD_VAR 0 8
38226: PPUSH
38227: CALL 55033 0 2
// wait ( 0 0$50 ) ;
38231: LD_INT 1750
38233: PPUSH
38234: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
38238: LD_INT 35
38240: PPUSH
38241: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
38245: LD_EXP 63
38249: PUSH
38250: LD_INT 1
38252: ARRAY
38253: PPUSH
38254: LD_INT 3
38256: PUSH
38257: LD_INT 34
38259: PUSH
38260: LD_INT 32
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PPUSH
38271: CALL_OW 72
38275: PUSH
38276: LD_INT 4
38278: GREATEREQUAL
38279: IFFALSE 38238
// wait ( 0 0$10 ) ;
38281: LD_INT 350
38283: PPUSH
38284: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_EXP 63
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: PPUSH
38302: LD_INT 3
38304: PUSH
38305: LD_INT 34
38307: PUSH
38308: LD_INT 32
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 72
38323: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
38324: LD_INT 100
38326: PPUSH
38327: CALL_OW 13
38331: PUSH
38332: LD_INT 50
38334: LESS
38335: IFFALSE 38368
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
38337: LD_ADDR_VAR 0 5
38341: PUSH
38342: LD_INT 55
38344: PUSH
38345: LD_INT 7
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 75
38354: PUSH
38355: LD_INT 90
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: ST_TO_ADDR
38366: GO 38397
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
38368: LD_ADDR_VAR 0 5
38372: PUSH
38373: LD_INT 128
38375: PUSH
38376: LD_INT 94
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 180
38385: PUSH
38386: LD_INT 135
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: ST_TO_ADDR
// if w mod 4 = 0 then
38397: LD_VAR 0 7
38401: PUSH
38402: LD_INT 4
38404: MOD
38405: PUSH
38406: LD_INT 0
38408: EQUAL
38409: IFFALSE 38440
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
38411: LD_ADDR_VAR 0 5
38415: PUSH
38416: LD_INT 91
38418: PUSH
38419: LD_INT 58
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 117
38428: PUSH
38429: LD_INT 107
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
38440: LD_INT 1
38442: PPUSH
38443: LD_VAR 0 3
38447: PPUSH
38448: LD_VAR 0 5
38452: PPUSH
38453: LD_VAR 0 6
38457: PPUSH
38458: CALL 55129 0 4
// if mc_vehicles [ 2 ] then
38462: LD_EXP 63
38466: PUSH
38467: LD_INT 2
38469: ARRAY
38470: IFFALSE 38506
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
38472: LD_INT 2
38474: PPUSH
38475: LD_EXP 63
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: PPUSH
38484: LD_INT 73
38486: PUSH
38487: LD_INT 115
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: PPUSH
38497: LD_VAR 0 6
38501: PPUSH
38502: CALL 55129 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
38506: LD_INT 19950
38508: PPUSH
38509: LD_INT 26250
38511: PPUSH
38512: CALL_OW 12
38516: PPUSH
38517: CALL_OW 67
// w := w + 1 ;
38521: LD_ADDR_VAR 0 7
38525: PUSH
38526: LD_VAR 0 7
38530: PUSH
38531: LD_INT 1
38533: PLUS
38534: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
38535: LD_INT 94
38537: PPUSH
38538: CALL_OW 301
38542: PUSH
38543: LD_EXP 48
38547: PUSH
38548: LD_INT 1
38550: ARRAY
38551: PPUSH
38552: LD_INT 30
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PPUSH
38562: CALL_OW 72
38566: NOT
38567: OR
38568: IFFALSE 37834
// end ;
38570: PPOPN 8
38572: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
38573: LD_INT 69
38575: IFFALSE 38950
38577: GO 38579
38579: DISABLE
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
38584: PPUSH
38585: PPUSH
// begin enable ;
38586: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
38587: LD_INT 35
38589: PPUSH
38590: LD_INT 1190
38592: PPUSH
38593: CALL_OW 12
38597: PPUSH
38598: CALL_OW 67
// tmp := [ ] ;
38602: LD_ADDR_VAR 0 2
38606: PUSH
38607: EMPTY
38608: ST_TO_ADDR
// uc_side := 8 ;
38609: LD_ADDR_OWVAR 20
38613: PUSH
38614: LD_INT 8
38616: ST_TO_ADDR
// uc_nation := 2 ;
38617: LD_ADDR_OWVAR 21
38621: PUSH
38622: LD_INT 2
38624: ST_TO_ADDR
// InitHc ;
38625: CALL_OW 19
// for i = 1 to 3 do
38629: LD_ADDR_VAR 0 1
38633: PUSH
38634: DOUBLE
38635: LD_INT 1
38637: DEC
38638: ST_TO_ADDR
38639: LD_INT 3
38641: PUSH
38642: FOR_TO
38643: IFFALSE 38770
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
38645: LD_INT 13
38647: PUSH
38648: LD_INT 14
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: PPUSH
38658: LD_INT 2
38660: PPUSH
38661: CALL_OW 12
38665: ARRAY
38666: PPUSH
38667: LD_INT 3
38669: PPUSH
38670: LD_INT 5
38672: PPUSH
38673: LD_INT 27
38675: PUSH
38676: LD_INT 28
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: PPUSH
38686: LD_INT 2
38688: PPUSH
38689: CALL_OW 12
38693: ARRAY
38694: PPUSH
38695: LD_INT 100
38697: PPUSH
38698: CALL 2051 0 5
// un := CreateVehicle ;
38702: LD_ADDR_VAR 0 3
38706: PUSH
38707: CALL_OW 45
38711: ST_TO_ADDR
// SetDir ( un , 4 ) ;
38712: LD_VAR 0 3
38716: PPUSH
38717: LD_INT 4
38719: PPUSH
38720: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38724: LD_VAR 0 3
38728: PPUSH
38729: LD_INT 15
38731: PPUSH
38732: LD_INT 0
38734: PPUSH
38735: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38739: LD_ADDR_VAR 0 2
38743: PUSH
38744: LD_VAR 0 2
38748: PPUSH
38749: LD_VAR 0 2
38753: PUSH
38754: LD_INT 1
38756: PLUS
38757: PPUSH
38758: LD_VAR 0 3
38762: PPUSH
38763: CALL_OW 1
38767: ST_TO_ADDR
// end ;
38768: GO 38642
38770: POP
38771: POP
// for i = 1 to 4 do
38772: LD_ADDR_VAR 0 1
38776: PUSH
38777: DOUBLE
38778: LD_INT 1
38780: DEC
38781: ST_TO_ADDR
38782: LD_INT 4
38784: PUSH
38785: FOR_TO
38786: IFFALSE 38865
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
38788: LD_INT 0
38790: PPUSH
38791: LD_INT 1
38793: PPUSH
38794: LD_INT 4
38796: PPUSH
38797: CALL_OW 12
38801: PPUSH
38802: LD_INT 6
38804: PPUSH
38805: CALL_OW 380
// un := CreateHuman ;
38809: LD_ADDR_VAR 0 3
38813: PUSH
38814: CALL_OW 44
38818: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
38819: LD_VAR 0 3
38823: PPUSH
38824: LD_INT 15
38826: PPUSH
38827: LD_INT 0
38829: PPUSH
38830: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
38834: LD_ADDR_VAR 0 2
38838: PUSH
38839: LD_VAR 0 2
38843: PPUSH
38844: LD_VAR 0 2
38848: PUSH
38849: LD_INT 1
38851: PLUS
38852: PPUSH
38853: LD_VAR 0 3
38857: PPUSH
38858: CALL_OW 1
38862: ST_TO_ADDR
// end ;
38863: GO 38785
38865: POP
38866: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
38867: LD_VAR 0 2
38871: PPUSH
38872: LD_INT 210
38874: PPUSH
38875: LD_INT 177
38877: PPUSH
38878: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
38882: LD_ADDR_VAR 0 4
38886: PUSH
38887: LD_INT 10
38889: PPUSH
38890: LD_INT 22
38892: PUSH
38893: LD_INT 8
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PPUSH
38900: CALL_OW 70
38904: ST_TO_ADDR
// if x then
38905: LD_VAR 0 4
38909: IFFALSE 38937
// for i in x do
38911: LD_ADDR_VAR 0 1
38915: PUSH
38916: LD_VAR 0 4
38920: PUSH
38921: FOR_IN
38922: IFFALSE 38935
// RemoveUnit ( i ) ;
38924: LD_VAR 0 1
38928: PPUSH
38929: CALL_OW 64
38933: GO 38921
38935: POP
38936: POP
// wait ( 0 0$3 ) ;
38937: LD_INT 105
38939: PPUSH
38940: CALL_OW 67
// until tmp ;
38944: LD_VAR 0 2
38948: IFFALSE 38867
// end ; end_of_file
38950: PPOPN 4
38952: END
// export function Action ; var tmp , p , radar , sols , i ; begin
38953: LD_INT 0
38955: PPUSH
38956: PPUSH
38957: PPUSH
38958: PPUSH
38959: PPUSH
38960: PPUSH
// InGameOn ;
38961: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
38965: LD_EXP 21
38969: PPUSH
38970: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
38974: LD_ADDR_VAR 0 2
38978: PUSH
38979: LD_INT 22
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 25
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PPUSH
39003: CALL_OW 69
39007: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
39008: LD_ADDR_VAR 0 4
39012: PUSH
39013: LD_INT 22
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 34
39025: PUSH
39026: LD_INT 11
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PPUSH
39037: CALL_OW 69
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: ST_TO_ADDR
// for i = 1 to tmp do
39046: LD_ADDR_VAR 0 6
39050: PUSH
39051: DOUBLE
39052: LD_INT 1
39054: DEC
39055: ST_TO_ADDR
39056: LD_VAR 0 2
39060: PUSH
39061: FOR_TO
39062: IFFALSE 39109
// begin if i = 5 then
39064: LD_VAR 0 6
39068: PUSH
39069: LD_INT 5
39071: EQUAL
39072: IFFALSE 39076
// break ;
39074: GO 39109
// sols := Replace ( sols , i , tmp [ i ] ) ;
39076: LD_ADDR_VAR 0 5
39080: PUSH
39081: LD_VAR 0 5
39085: PPUSH
39086: LD_VAR 0 6
39090: PPUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_VAR 0 6
39100: ARRAY
39101: PPUSH
39102: CALL_OW 1
39106: ST_TO_ADDR
// end ;
39107: GO 39061
39109: POP
39110: POP
// tmp := ar_force_tmp ;
39111: LD_ADDR_VAR 0 2
39115: PUSH
39116: LD_EXP 39
39120: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
39121: LD_VAR 0 2
39125: PUSH
39126: LD_INT 1
39128: ARRAY
39129: PPUSH
39130: LD_INT 108
39132: PPUSH
39133: LD_INT 139
39135: PPUSH
39136: LD_INT 0
39138: PPUSH
39139: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
39143: LD_VAR 0 2
39147: PUSH
39148: LD_INT 1
39150: ARRAY
39151: PPUSH
39152: LD_EXP 21
39156: PPUSH
39157: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
39161: LD_VAR 0 2
39165: PUSH
39166: LD_INT 2
39168: ARRAY
39169: PPUSH
39170: LD_INT 114
39172: PPUSH
39173: LD_INT 132
39175: PPUSH
39176: LD_INT 0
39178: PPUSH
39179: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
39183: LD_VAR 0 2
39187: PUSH
39188: LD_INT 3
39190: ARRAY
39191: PPUSH
39192: LD_INT 115
39194: PPUSH
39195: LD_INT 132
39197: PPUSH
39198: LD_INT 0
39200: PPUSH
39201: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
39205: LD_VAR 0 2
39209: PUSH
39210: LD_INT 2
39212: ARRAY
39213: PUSH
39214: LD_VAR 0 2
39218: PUSH
39219: LD_INT 3
39221: ARRAY
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PPUSH
39227: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
39231: LD_VAR 0 4
39235: PPUSH
39236: LD_INT 83
39238: PPUSH
39239: LD_INT 123
39241: PPUSH
39242: CALL_OW 111
// Wait ( 0 0$01 ) ;
39246: LD_INT 35
39248: PPUSH
39249: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
39253: LD_INT 90
39255: PPUSH
39256: LD_INT 144
39258: PPUSH
39259: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
39263: LD_VAR 0 5
39267: PPUSH
39268: LD_INT 88
39270: PPUSH
39271: LD_INT 129
39273: PPUSH
39274: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
39278: LD_ADDR_VAR 0 3
39282: PUSH
39283: LD_INT 92
39285: PUSH
39286: LD_INT 131
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 88
39295: PUSH
39296: LD_INT 127
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 91
39305: PUSH
39306: LD_INT 132
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 92
39315: PUSH
39316: LD_INT 134
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
// for i = 1 to sols do
39329: LD_ADDR_VAR 0 6
39333: PUSH
39334: DOUBLE
39335: LD_INT 1
39337: DEC
39338: ST_TO_ADDR
39339: LD_VAR 0 5
39343: PUSH
39344: FOR_TO
39345: IFFALSE 39418
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
39347: LD_VAR 0 5
39351: PUSH
39352: LD_VAR 0 6
39356: ARRAY
39357: PPUSH
39358: LD_VAR 0 3
39362: PUSH
39363: LD_VAR 0 6
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PPUSH
39373: LD_VAR 0 3
39377: PUSH
39378: LD_VAR 0 6
39382: ARRAY
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
39392: LD_VAR 0 5
39396: PUSH
39397: LD_VAR 0 6
39401: ARRAY
39402: PPUSH
39403: CALL_OW 197
// AddComHold ( sols ) ;
39407: LD_VAR 0 5
39411: PPUSH
39412: CALL_OW 200
// end ;
39416: GO 39344
39418: POP
39419: POP
// repeat wait ( 0 0$1 ) ;
39420: LD_INT 35
39422: PPUSH
39423: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
39427: LD_VAR 0 5
39431: PUSH
39432: LD_INT 1
39434: ARRAY
39435: PPUSH
39436: LD_INT 92
39438: PPUSH
39439: LD_INT 131
39441: PPUSH
39442: CALL_OW 297
39446: PUSH
39447: LD_INT 4
39449: LESS
39450: IFFALSE 39420
// CenterOnXY ( 96 , 139 ) ;
39452: LD_INT 96
39454: PPUSH
39455: LD_INT 139
39457: PPUSH
39458: CALL_OW 84
// wait ( 0 0$3 ) ;
39462: LD_INT 105
39464: PPUSH
39465: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
39469: LD_INT 111
39471: PPUSH
39472: LD_INT 135
39474: PPUSH
39475: LD_INT 1
39477: PPUSH
39478: LD_INT 25
39480: NEG
39481: PPUSH
39482: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
39486: LD_VAR 0 2
39490: PUSH
39491: LD_INT 2
39493: ARRAY
39494: PPUSH
39495: LD_VAR 0 2
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: CALL_OW 250
39508: PUSH
39509: LD_INT 3
39511: PLUS
39512: PPUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PPUSH
39522: CALL_OW 251
39526: PPUSH
39527: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 3
39538: ARRAY
39539: PPUSH
39540: LD_INT 7
39542: PPUSH
39543: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
39547: LD_VAR 0 2
39551: PUSH
39552: LD_INT 2
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 2
39560: PUSH
39561: LD_INT 1
39563: ARRAY
39564: PPUSH
39565: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
39569: LD_INT 35
39571: PPUSH
39572: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
39576: LD_VAR 0 2
39580: PUSH
39581: LD_INT 1
39583: ARRAY
39584: PPUSH
39585: LD_VAR 0 2
39589: PUSH
39590: LD_INT 2
39592: ARRAY
39593: PPUSH
39594: CALL_OW 296
39598: PUSH
39599: LD_INT 5
39601: LESS
39602: IFFALSE 39569
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
39604: LD_VAR 0 2
39608: PUSH
39609: LD_INT 1
39611: ARRAY
39612: PPUSH
39613: LD_VAR 0 2
39617: PUSH
39618: LD_INT 2
39620: ARRAY
39621: PPUSH
39622: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
39626: LD_VAR 0 2
39630: PUSH
39631: LD_INT 1
39633: ARRAY
39634: PPUSH
39635: LD_STRING D1a-Merc1-1
39637: PPUSH
39638: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
39642: LD_VAR 0 2
39646: PUSH
39647: LD_INT 2
39649: ARRAY
39650: PPUSH
39651: LD_STRING D1a-FMerc2-1
39653: PPUSH
39654: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
39658: LD_VAR 0 2
39662: PUSH
39663: LD_INT 2
39665: ARRAY
39666: PPUSH
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: PPUSH
39676: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
39680: LD_VAR 0 2
39684: PUSH
39685: LD_INT 1
39687: ARRAY
39688: PPUSH
39689: LD_INT 500
39691: PPUSH
39692: CALL_OW 234
// wait ( 0 0$2 ) ;
39696: LD_INT 70
39698: PPUSH
39699: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
39703: LD_VAR 0 2
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PPUSH
39712: LD_INT 2
39714: PPUSH
39715: CALL_OW 234
// wait ( 0 0$0.3 ) ;
39719: LD_INT 10
39721: PPUSH
39722: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
39726: LD_VAR 0 2
39730: PUSH
39731: LD_INT 1
39733: ARRAY
39734: PPUSH
39735: LD_STRING D1a-Merc1-2
39737: PPUSH
39738: CALL_OW 91
// wait ( 0 0$0.2 ) ;
39742: LD_INT 7
39744: PPUSH
39745: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
39749: LD_VAR 0 2
39753: PUSH
39754: LD_INT 1
39756: ARRAY
39757: PPUSH
39758: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
39762: LD_VAR 0 2
39766: PUSH
39767: LD_INT 2
39769: ARRAY
39770: PPUSH
39771: LD_INT 10
39773: PPUSH
39774: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
39778: LD_VAR 0 2
39782: PUSH
39783: LD_INT 2
39785: ARRAY
39786: PPUSH
39787: LD_STRING D1a-FMerc2-2
39789: PPUSH
39790: CALL_OW 88
// wait ( 0 0$1 ) ;
39794: LD_INT 35
39796: PPUSH
39797: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
39801: LD_INT 7
39803: PPUSH
39804: CALL_OW 85
// wait ( 0 0$2 ) ;
39808: LD_INT 70
39810: PPUSH
39811: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
39815: LD_EXP 43
39819: PPUSH
39820: LD_STRING D1a-Saliba-1
39822: PPUSH
39823: CALL_OW 91
// KillUnit ( Saliba ) ;
39827: LD_EXP 43
39831: PPUSH
39832: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
39836: LD_VAR 0 2
39840: PUSH
39841: LD_INT 3
39843: ARRAY
39844: PPUSH
39845: CALL_OW 122
// CenterOnUnits ( JMM ) ;
39849: LD_EXP 21
39853: PPUSH
39854: CALL_OW 85
// wait ( 0 0$1 ) ;
39858: LD_INT 35
39860: PPUSH
39861: CALL_OW 67
// InGameOff ;
39865: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
39869: LD_STRING M1
39871: PPUSH
39872: CALL_OW 337
// game_speed := 4 ;
39876: LD_ADDR_OWVAR 65
39880: PUSH
39881: LD_INT 4
39883: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
39884: LD_INT 111
39886: PPUSH
39887: LD_INT 135
39889: PPUSH
39890: LD_INT 1
39892: PPUSH
39893: CALL_OW 331
// SaveForQuickRestart ;
39897: CALL_OW 22
// ar_run := true ;
39901: LD_ADDR_EXP 5
39905: PUSH
39906: LD_INT 1
39908: ST_TO_ADDR
// wait ( 0 0$45 ) ;
39909: LD_INT 1575
39911: PPUSH
39912: CALL_OW 67
// if GetSide ( ar_dep_s ) = 2 then
39916: LD_INT 7
39918: PPUSH
39919: CALL_OW 255
39923: PUSH
39924: LD_INT 2
39926: EQUAL
39927: IFFALSE 39939
// SetSide ( ar_dep_s , 1 ) ;
39929: LD_INT 7
39931: PPUSH
39932: LD_INT 1
39934: PPUSH
39935: CALL_OW 235
// end ;
39939: LD_VAR 0 1
39943: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
39944: LD_EXP 5
39948: IFFALSE 40308
39950: GO 39952
39952: DISABLE
39953: LD_INT 0
39955: PPUSH
39956: PPUSH
39957: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
39958: LD_ADDR_VAR 0 2
39962: PUSH
39963: LD_EXP 39
39967: PUSH
39968: LD_EXP 36
39972: PPUSH
39973: LD_INT 2
39975: PUSH
39976: LD_INT 21
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 21
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: PPUSH
40001: CALL_OW 72
40005: ADD
40006: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
40007: LD_VAR 0 2
40011: PPUSH
40012: LD_INT 5
40014: PPUSH
40015: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
40019: LD_INT 5
40021: PPUSH
40022: LD_INT 1
40024: PPUSH
40025: CALL_OW 343
// k := 1 ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_INT 1
40036: ST_TO_ADDR
// for i in tmp do
40037: LD_ADDR_VAR 0 1
40041: PUSH
40042: LD_VAR 0 2
40046: PUSH
40047: FOR_IN
40048: IFFALSE 40133
// begin if IsInUnit ( i ) then
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 310
40059: IFFALSE 40070
// ComExitBuilding ( i ) ;
40061: LD_VAR 0 1
40065: PPUSH
40066: CALL_OW 122
// if GetClass ( i ) = 3 then
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 257
40079: PUSH
40080: LD_INT 3
40082: EQUAL
40083: IFFALSE 40119
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
40085: LD_VAR 0 1
40089: PPUSH
40090: LD_EXP 40
40094: PUSH
40095: LD_VAR 0 3
40099: ARRAY
40100: PPUSH
40101: CALL_OW 180
// k := k + 1 ;
40105: LD_ADDR_VAR 0 3
40109: PUSH
40110: LD_VAR 0 3
40114: PUSH
40115: LD_INT 1
40117: PLUS
40118: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
40119: LD_VAR 0 1
40123: PPUSH
40124: LD_INT 10
40126: PPUSH
40127: CALL_OW 173
// end ;
40131: GO 40047
40133: POP
40134: POP
// ar_patrol := true ;
40135: LD_ADDR_EXP 7
40139: PUSH
40140: LD_INT 1
40142: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
40143: LD_INT 10
40145: PPUSH
40146: CALL_OW 67
// for i in tmp do
40150: LD_ADDR_VAR 0 1
40154: PUSH
40155: LD_VAR 0 2
40159: PUSH
40160: FOR_IN
40161: IFFALSE 40189
// if not HasTask ( i ) then
40163: LD_VAR 0 1
40167: PPUSH
40168: CALL_OW 314
40172: NOT
40173: IFFALSE 40187
// ComMoveToArea ( i , escape_area ) ;
40175: LD_VAR 0 1
40179: PPUSH
40180: LD_INT 10
40182: PPUSH
40183: CALL_OW 113
40187: GO 40160
40189: POP
40190: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
40191: LD_ADDR_VAR 0 3
40195: PUSH
40196: LD_VAR 0 2
40200: PPUSH
40201: LD_INT 95
40203: PUSH
40204: LD_INT 10
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PPUSH
40211: CALL_OW 72
40215: ST_TO_ADDR
// if k then
40216: LD_VAR 0 3
40220: IFFALSE 40289
// for i in k do
40222: LD_ADDR_VAR 0 1
40226: PUSH
40227: LD_VAR 0 3
40231: PUSH
40232: FOR_IN
40233: IFFALSE 40287
// begin if IsInUnit ( i ) then
40235: LD_VAR 0 1
40239: PPUSH
40240: CALL_OW 310
40244: IFFALSE 40260
// RemoveUnit ( IsInUnit ( i ) ) ;
40246: LD_VAR 0 1
40250: PPUSH
40251: CALL_OW 310
40255: PPUSH
40256: CALL_OW 64
// RemoveUnit ( i ) ;
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 64
// tmp := tmp diff i ;
40269: LD_ADDR_VAR 0 2
40273: PUSH
40274: LD_VAR 0 2
40278: PUSH
40279: LD_VAR 0 1
40283: DIFF
40284: ST_TO_ADDR
// end ;
40285: GO 40232
40287: POP
40288: POP
// until tmp = [ ] ;
40289: LD_VAR 0 2
40293: PUSH
40294: EMPTY
40295: EQUAL
40296: IFFALSE 40143
// ChangeSideFog ( 5 , 5 ) ;
40298: LD_INT 5
40300: PPUSH
40301: LD_INT 5
40303: PPUSH
40304: CALL_OW 343
// end ;
40308: PPOPN 3
40310: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
40311: LD_EXP 7
40315: IFFALSE 40605
40317: GO 40319
40319: DISABLE
40320: LD_INT 0
40322: PPUSH
40323: PPUSH
40324: PPUSH
// begin uc_side := 2 ;
40325: LD_ADDR_OWVAR 20
40329: PUSH
40330: LD_INT 2
40332: ST_TO_ADDR
// uc_nation := 2 ;
40333: LD_ADDR_OWVAR 21
40337: PUSH
40338: LD_INT 2
40340: ST_TO_ADDR
// InitHc ;
40341: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
40345: LD_INT 1
40347: PPUSH
40348: LD_INT 1
40350: PPUSH
40351: LD_INT 6
40353: PPUSH
40354: CALL_OW 380
// un := CreateHuman ;
40358: LD_ADDR_VAR 0 2
40362: PUSH
40363: CALL_OW 44
40367: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
40368: LD_INT 14
40370: PPUSH
40371: LD_INT 1
40373: PPUSH
40374: LD_INT 1
40376: PPUSH
40377: LD_INT 27
40379: PPUSH
40380: LD_INT 98
40382: PPUSH
40383: CALL 2051 0 5
// veh := CreateVehicle ;
40387: LD_ADDR_VAR 0 3
40391: PUSH
40392: CALL_OW 45
40396: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
40397: LD_VAR 0 3
40401: PPUSH
40402: LD_INT 4
40404: PPUSH
40405: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
40409: LD_VAR 0 3
40413: PPUSH
40414: LD_INT 179
40416: PPUSH
40417: LD_INT 135
40419: PPUSH
40420: LD_INT 0
40422: PPUSH
40423: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
40427: LD_VAR 0 2
40431: PPUSH
40432: LD_VAR 0 3
40436: PPUSH
40437: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
40441: LD_VAR 0 2
40445: PPUSH
40446: LD_INT 126
40448: PPUSH
40449: LD_INT 133
40451: PPUSH
40452: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
40456: LD_INT 10
40458: PPUSH
40459: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
40463: LD_INT 1
40465: PPUSH
40466: LD_VAR 0 3
40470: PPUSH
40471: CALL_OW 292
40475: PUSH
40476: LD_VAR 0 3
40480: PPUSH
40481: LD_INT 7
40483: PPUSH
40484: CALL_OW 296
40488: PUSH
40489: LD_INT 9
40491: LESS
40492: OR
40493: IFFALSE 40456
// ComHold ( veh ) ;
40495: LD_VAR 0 3
40499: PPUSH
40500: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
40504: LD_VAR 0 2
40508: PPUSH
40509: LD_STRING D2aa-Ar1-1
40511: PPUSH
40512: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
40516: LD_VAR 0 2
40520: PPUSH
40521: LD_INT 177
40523: PPUSH
40524: LD_INT 96
40526: PPUSH
40527: CALL_OW 111
// AddComExitVehicle ( un ) ;
40531: LD_VAR 0 2
40535: PPUSH
40536: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
40540: LD_INT 35
40542: PPUSH
40543: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
40547: LD_VAR 0 2
40551: PPUSH
40552: LD_INT 69
40554: PPUSH
40555: CALL_OW 296
40559: PUSH
40560: LD_INT 15
40562: LESS
40563: IFFALSE 40540
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
40565: LD_ADDR_EXP 48
40569: PUSH
40570: LD_EXP 48
40574: PPUSH
40575: LD_INT 3
40577: PUSH
40578: LD_EXP 48
40582: PUSH
40583: LD_INT 3
40585: ARRAY
40586: PUSH
40587: LD_INT 1
40589: PLUS
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: CALL 3237 0 3
40604: ST_TO_ADDR
// end ;
40605: PPOPN 3
40607: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
40608: LD_INT 7
40610: PPUSH
40611: CALL_OW 255
40615: PUSH
40616: LD_INT 1
40618: EQUAL
40619: PUSH
40620: LD_INT 7
40622: PPUSH
40623: CALL_OW 301
40627: OR
40628: IFFALSE 43052
40630: GO 40632
40632: DISABLE
40633: LD_INT 0
40635: PPUSH
40636: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
40637: LD_ADDR_VAR 0 1
40641: PUSH
40642: LD_EXP 36
40646: PPUSH
40647: LD_INT 21
40649: PUSH
40650: LD_INT 3
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PPUSH
40657: CALL_OW 72
40661: PUSH
40662: FOR_IN
40663: IFFALSE 40679
// SetSide ( i , 1 ) ;
40665: LD_VAR 0 1
40669: PPUSH
40670: LD_INT 1
40672: PPUSH
40673: CALL_OW 235
40677: GO 40662
40679: POP
40680: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
40681: LD_ADDR_VAR 0 2
40685: PUSH
40686: LD_INT 46
40688: PUSH
40689: LD_INT 41
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 50
40698: PUSH
40699: LD_INT 25
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 57
40708: PUSH
40709: LD_INT 75
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 75
40718: PUSH
40719: LD_INT 89
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 51
40728: PUSH
40729: LD_INT 45
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 95
40738: PUSH
40739: LD_INT 95
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 84
40748: PUSH
40749: LD_INT 77
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 101
40758: PUSH
40759: LD_INT 76
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 118
40768: PUSH
40769: LD_INT 81
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 139
40778: PUSH
40779: LD_INT 97
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 129
40788: PUSH
40789: LD_INT 114
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 154
40798: PUSH
40799: LD_INT 111
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: ST_TO_ADDR
// base_captured := true ;
40820: LD_ADDR_EXP 6
40824: PUSH
40825: LD_INT 1
40827: ST_TO_ADDR
// DialogueOn ;
40828: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
40832: LD_EXP 21
40836: PPUSH
40837: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
40841: LD_EXP 21
40845: PPUSH
40846: LD_STRING D2-JMM-1
40848: PPUSH
40849: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
40853: LD_EXP 30
40857: PPUSH
40858: LD_STRING D2-Pow-1
40860: PPUSH
40861: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
40865: LD_EXP 21
40869: PPUSH
40870: LD_STRING D2-JMM-2
40872: PPUSH
40873: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
40877: LD_EXP 30
40881: PPUSH
40882: LD_STRING D2-Pow-2
40884: PPUSH
40885: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
40889: LD_EXP 21
40893: PPUSH
40894: LD_STRING D2-JMM-3
40896: PPUSH
40897: CALL_OW 88
// DialogueOff ;
40901: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
40905: LD_STRING M2
40907: PPUSH
40908: CALL_OW 337
// Wait ( 0 0$2 ) ;
40912: LD_INT 70
40914: PPUSH
40915: CALL_OW 67
// if IsOk ( Gary ) then
40919: LD_EXP 32
40923: PPUSH
40924: CALL_OW 302
40928: IFFALSE 40942
// Say ( Gary , D2a-Gary-1 ) ;
40930: LD_EXP 32
40934: PPUSH
40935: LD_STRING D2a-Gary-1
40937: PPUSH
40938: CALL_OW 88
// if IsOk ( Bobby ) then
40942: LD_EXP 24
40946: PPUSH
40947: CALL_OW 302
40951: IFFALSE 40965
// Say ( Bobby , D2a-Bobby-1 ) ;
40953: LD_EXP 24
40957: PPUSH
40958: LD_STRING D2a-Bobby-1
40960: PPUSH
40961: CALL_OW 88
// if IsOk ( Cyrus ) then
40965: LD_EXP 25
40969: PPUSH
40970: CALL_OW 302
40974: IFFALSE 40988
// Say ( Cyrus , D2a-Cyrus-1 ) ;
40976: LD_EXP 25
40980: PPUSH
40981: LD_STRING D2a-Cyrus-1
40983: PPUSH
40984: CALL_OW 88
// if IsOk ( Lisa ) then
40988: LD_EXP 22
40992: PPUSH
40993: CALL_OW 302
40997: IFFALSE 41011
// Say ( Lisa , D2a-Lisa-1 ) ;
40999: LD_EXP 22
41003: PPUSH
41004: LD_STRING D2a-Lisa-1
41006: PPUSH
41007: CALL_OW 88
// if IsOk ( Frank ) then
41011: LD_EXP 33
41015: PPUSH
41016: CALL_OW 302
41020: IFFALSE 41034
// Say ( Frank , D2a-Frank-1 ) ;
41022: LD_EXP 33
41026: PPUSH
41027: LD_STRING D2a-Frank-1
41029: PPUSH
41030: CALL_OW 88
// if IsOk ( Cornel ) then
41034: LD_EXP 31
41038: PPUSH
41039: CALL_OW 302
41043: IFFALSE 41057
// Say ( Cornel , D2a-Corn-1 ) ;
41045: LD_EXP 31
41049: PPUSH
41050: LD_STRING D2a-Corn-1
41052: PPUSH
41053: CALL_OW 88
// if IsOk ( Donaldson ) then
41057: LD_EXP 23
41061: PPUSH
41062: CALL_OW 302
41066: IFFALSE 41080
// Say ( Donaldson , D2a-Don-1 ) ;
41068: LD_EXP 23
41072: PPUSH
41073: LD_STRING D2a-Don-1
41075: PPUSH
41076: CALL_OW 88
// if IsOk ( Brown ) then
41080: LD_EXP 27
41084: PPUSH
41085: CALL_OW 302
41089: IFFALSE 41103
// Say ( Brown , D2a-Brown-1 ) ;
41091: LD_EXP 27
41095: PPUSH
41096: LD_STRING D2a-Brown-1
41098: PPUSH
41099: CALL_OW 88
// Wait ( 0 0$30 ) ;
41103: LD_INT 1050
41105: PPUSH
41106: CALL_OW 67
// if IsOk ( Frank ) then
41110: LD_EXP 33
41114: PPUSH
41115: CALL_OW 302
41119: IFFALSE 41385
// begin DialogueOn ;
41121: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
41125: LD_EXP 21
41129: PUSH
41130: LD_EXP 33
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PPUSH
41139: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
41143: LD_EXP 33
41147: PPUSH
41148: LD_STRING D3F-Frank-1
41150: PPUSH
41151: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
41155: LD_EXP 21
41159: PPUSH
41160: LD_STRING D3F-JMM-1
41162: PPUSH
41163: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
41167: LD_EXP 33
41171: PPUSH
41172: LD_STRING D3F-Frank-2
41174: PPUSH
41175: CALL_OW 88
// case Query ( QFrank ) of 1 :
41179: LD_STRING QFrank
41181: PPUSH
41182: CALL_OW 97
41186: PUSH
41187: LD_INT 1
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41218
41195: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
41196: LD_EXP 21
41200: PPUSH
41201: LD_STRING D3Fa-JMM-1
41203: PPUSH
41204: CALL_OW 88
// us_scout := 1 ;
41208: LD_ADDR_EXP 8
41212: PUSH
41213: LD_INT 1
41215: ST_TO_ADDR
// end ; 2 :
41216: GO 41381
41218: LD_INT 2
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41226
41224: GO 41348
41226: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
41227: LD_EXP 21
41231: PPUSH
41232: LD_STRING D3Fb-JMM-1
41234: PPUSH
41235: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
41239: LD_EXP 33
41243: PPUSH
41244: LD_STRING D3Fb-Frank-1
41246: PPUSH
41247: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
41251: LD_STRING QFrank2
41253: PPUSH
41254: CALL_OW 97
41258: PUSH
41259: LD_INT 1
41261: DOUBLE
41262: EQUAL
41263: IFTRUE 41267
41265: GO 41314
41267: POP
// begin us_scout := 2 ;
41268: LD_ADDR_EXP 8
41272: PUSH
41273: LD_INT 2
41275: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
41276: LD_EXP 21
41280: PPUSH
41281: LD_STRING D3Fba-JMM-1
41283: PPUSH
41284: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
41288: LD_EXP 33
41292: PPUSH
41293: LD_STRING D3Fba-Frank-1
41295: PPUSH
41296: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
41300: LD_EXP 21
41304: PPUSH
41305: LD_STRING D3Fba-JMM-2
41307: PPUSH
41308: CALL_OW 88
// end ; 2 :
41312: GO 41346
41314: LD_INT 2
41316: DOUBLE
41317: EQUAL
41318: IFTRUE 41322
41320: GO 41345
41322: POP
// begin us_scout := 0 ;
41323: LD_ADDR_EXP 8
41327: PUSH
41328: LD_INT 0
41330: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
41331: LD_EXP 21
41335: PPUSH
41336: LD_STRING D3Fbb-JMM-1
41338: PPUSH
41339: CALL_OW 88
// end ; end ;
41343: GO 41346
41345: POP
// end ; 3 :
41346: GO 41381
41348: LD_INT 3
41350: DOUBLE
41351: EQUAL
41352: IFTRUE 41356
41354: GO 41380
41356: POP
// begin us_scout := - 1 ;
41357: LD_ADDR_EXP 8
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
41366: LD_EXP 21
41370: PPUSH
41371: LD_STRING D3Fc-JMM-1
41373: PPUSH
41374: CALL_OW 88
// end ; end ;
41378: GO 41381
41380: POP
// DialogueOff ;
41381: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
41385: LD_EXP 8
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: IN
41401: IFFALSE 41405
// exit ;
41403: GO 43052
// if us_scout in [ 1 , 2 ] then
41405: LD_EXP 8
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: IN
41420: IFFALSE 42119
// begin if IsInUnit ( Frank ) then
41422: LD_EXP 33
41426: PPUSH
41427: CALL_OW 310
41431: IFFALSE 41442
// ComExitBuilding ( Frank ) ;
41433: LD_EXP 33
41437: PPUSH
41438: CALL_OW 122
// if IsDrivenBy ( Frank ) then
41442: LD_EXP 33
41446: PPUSH
41447: CALL_OW 311
41451: IFFALSE 41462
// ComExitVehicle ( Frank ) ;
41453: LD_EXP 33
41457: PPUSH
41458: CALL_OW 121
// SetSide ( Frank , 4 ) ;
41462: LD_EXP 33
41466: PPUSH
41467: LD_INT 4
41469: PPUSH
41470: CALL_OW 235
// wait ( 0 0$1 ) ;
41474: LD_INT 35
41476: PPUSH
41477: CALL_OW 67
// if us_scout = 2 then
41481: LD_EXP 8
41485: PUSH
41486: LD_INT 2
41488: EQUAL
41489: IFFALSE 41857
// begin ComMoveXY ( Frank , 75 , 63 ) ;
41491: LD_EXP 33
41495: PPUSH
41496: LD_INT 75
41498: PPUSH
41499: LD_INT 63
41501: PPUSH
41502: CALL_OW 111
// AddComHold ( Frank ) ;
41506: LD_EXP 33
41510: PPUSH
41511: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
41515: LD_EXP 33
41519: PPUSH
41520: LD_INT 770
41522: PPUSH
41523: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
41527: LD_EXP 33
41531: PPUSH
41532: LD_INT 100
41534: PPUSH
41535: LD_INT 75
41537: PPUSH
41538: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
41542: LD_EXP 33
41546: PPUSH
41547: LD_INT 123
41549: PPUSH
41550: LD_INT 103
41552: PPUSH
41553: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
41557: LD_EXP 33
41561: PPUSH
41562: LD_INT 138
41564: PPUSH
41565: LD_INT 108
41567: PPUSH
41568: CALL_OW 171
// AddComHold ( Frank ) ;
41572: LD_EXP 33
41576: PPUSH
41577: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
41581: LD_INT 35
41583: PPUSH
41584: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
41588: LD_EXP 33
41592: PPUSH
41593: LD_INT 138
41595: PPUSH
41596: LD_INT 108
41598: PPUSH
41599: CALL_OW 307
41603: IFFALSE 41581
// AddComMoveXY ( Frank , 125 , 132 ) ;
41605: LD_EXP 33
41609: PPUSH
41610: LD_INT 125
41612: PPUSH
41613: LD_INT 132
41615: PPUSH
41616: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41620: LD_INT 35
41622: PPUSH
41623: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
41627: LD_INT 1
41629: PPUSH
41630: LD_EXP 33
41634: PPUSH
41635: CALL_OW 292
41639: PUSH
41640: LD_EXP 33
41644: PPUSH
41645: LD_INT 7
41647: PPUSH
41648: CALL_OW 296
41652: PUSH
41653: LD_INT 7
41655: LESS
41656: OR
41657: IFFALSE 41620
// DialogueOn ;
41659: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
41663: LD_EXP 33
41667: PPUSH
41668: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41672: LD_INT 10
41674: PPUSH
41675: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
41679: LD_EXP 21
41683: PPUSH
41684: LD_STRING D4Fa-JMM-1
41686: PPUSH
41687: CALL_OW 88
// for i in points do
41691: LD_ADDR_VAR 0 1
41695: PUSH
41696: LD_VAR 0 2
41700: PUSH
41701: FOR_IN
41702: IFFALSE 41760
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
41704: LD_VAR 0 1
41708: PUSH
41709: LD_INT 1
41711: ARRAY
41712: PPUSH
41713: LD_VAR 0 1
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: PPUSH
41722: LD_INT 1
41724: PPUSH
41725: LD_INT 20
41727: NEG
41728: PPUSH
41729: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
41733: LD_VAR 0 1
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PPUSH
41742: LD_VAR 0 1
41746: PUSH
41747: LD_INT 2
41749: ARRAY
41750: PPUSH
41751: LD_INT 1
41753: PPUSH
41754: CALL_OW 331
// end ;
41758: GO 41701
41760: POP
41761: POP
// dwait ( 0 0$0.5 ) ;
41762: LD_INT 18
41764: PPUSH
41765: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
41769: LD_INT 42
41771: PPUSH
41772: LD_INT 27
41774: PPUSH
41775: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
41779: LD_EXP 33
41783: PPUSH
41784: LD_STRING D4Fa-Frank-1
41786: PPUSH
41787: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
41791: LD_INT 18
41793: PPUSH
41794: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
41798: LD_EXP 21
41802: PPUSH
41803: LD_STRING D4Fa-JMM-2
41805: PPUSH
41806: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
41810: LD_INT 118
41812: PPUSH
41813: LD_INT 80
41815: PPUSH
41816: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
41820: LD_EXP 33
41824: PPUSH
41825: LD_STRING D4Fa-Frank-2
41827: PPUSH
41828: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
41832: LD_INT 10
41834: PPUSH
41835: CALL_OW 68
// DialogueOff ;
41839: CALL_OW 7
// SetSide ( Frank , 1 ) ;
41843: LD_EXP 33
41847: PPUSH
41848: LD_INT 1
41850: PPUSH
41851: CALL_OW 235
// end else
41855: GO 42119
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
41857: LD_INT 2
41859: PPUSH
41860: LD_INT 4
41862: PPUSH
41863: LD_INT 2
41865: PPUSH
41866: LD_INT 1
41868: PPUSH
41869: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
41873: LD_EXP 33
41877: PPUSH
41878: LD_INT 75
41880: PPUSH
41881: LD_INT 63
41883: PPUSH
41884: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
41888: LD_EXP 33
41892: PPUSH
41893: LD_INT 175
41895: PPUSH
41896: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
41900: LD_EXP 33
41904: PPUSH
41905: LD_INT 102
41907: PPUSH
41908: LD_INT 76
41910: PPUSH
41911: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
41915: LD_EXP 33
41919: PPUSH
41920: LD_INT 108
41922: PPUSH
41923: LD_INT 70
41925: PPUSH
41926: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
41930: LD_INT 35
41932: PPUSH
41933: CALL_OW 67
// until See ( 2 , Frank ) ;
41937: LD_INT 2
41939: PPUSH
41940: LD_EXP 33
41944: PPUSH
41945: CALL_OW 292
41949: IFFALSE 41930
// ComMoveXY ( Frank , 112 , 118 ) ;
41951: LD_EXP 33
41955: PPUSH
41956: LD_INT 112
41958: PPUSH
41959: LD_INT 118
41961: PPUSH
41962: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
41966: LD_EXP 33
41970: PPUSH
41971: CALL_OW 256
41975: PUSH
41976: LD_INT 750
41978: GREATEREQUAL
41979: IFFALSE 41993
// SetLives ( Frank , 700 ) ;
41981: LD_EXP 33
41985: PPUSH
41986: LD_INT 700
41988: PPUSH
41989: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
41993: LD_INT 35
41995: PPUSH
41996: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
42000: LD_INT 1
42002: PPUSH
42003: LD_EXP 33
42007: PPUSH
42008: CALL_OW 292
42012: PUSH
42013: LD_EXP 33
42017: PPUSH
42018: LD_INT 7
42020: PPUSH
42021: CALL_OW 296
42025: PUSH
42026: LD_INT 17
42028: LESS
42029: OR
42030: IFFALSE 41993
// DialogueOn ;
42032: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
42036: LD_EXP 33
42040: PPUSH
42041: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
42045: LD_EXP 33
42049: PPUSH
42050: LD_STRING D4Fb-Frank-1
42052: PPUSH
42053: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
42057: LD_EXP 21
42061: PPUSH
42062: LD_STRING D4Fb-JMM-1
42064: PPUSH
42065: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
42069: LD_INT 2
42071: PPUSH
42072: LD_STRING D4Fb-FSci1-1
42074: PPUSH
42075: CALL 2287 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
42079: LD_EXP 33
42083: PPUSH
42084: LD_STRING D4Fb-Frank-2
42086: PPUSH
42087: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
42091: LD_EXP 21
42095: PPUSH
42096: LD_STRING D4Fb-JMM-2
42098: PPUSH
42099: CALL_OW 88
// DialogueOff ;
42103: CALL_OW 7
// SetSide ( Frank , 1 ) ;
42107: LD_EXP 33
42111: PPUSH
42112: LD_INT 1
42114: PPUSH
42115: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
42119: LD_EXP 34
42123: PPUSH
42124: CALL_OW 302
42128: PUSH
42129: LD_EXP 33
42133: NOT
42134: AND
42135: IFFALSE 42283
// begin DialogueOn ;
42137: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
42141: LD_EXP 21
42145: PUSH
42146: LD_EXP 34
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PPUSH
42155: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
42159: LD_EXP 34
42163: PPUSH
42164: LD_STRING D3Y-Yam-1
42166: PPUSH
42167: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
42171: LD_EXP 21
42175: PPUSH
42176: LD_STRING D3Y-JMM-1
42178: PPUSH
42179: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
42183: LD_EXP 34
42187: PPUSH
42188: LD_STRING D3Y-Yam-2
42190: PPUSH
42191: CALL_OW 88
// case Query ( QYamoko ) of 1 :
42195: LD_STRING QYamoko
42197: PPUSH
42198: CALL_OW 97
42202: PUSH
42203: LD_INT 1
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42211
42209: GO 42246
42211: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
42212: LD_EXP 21
42216: PPUSH
42217: LD_STRING D3Ya-JMM-1
42219: PPUSH
42220: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
42224: LD_EXP 34
42228: PPUSH
42229: LD_STRING D3Ya-Yam-1
42231: PPUSH
42232: CALL_OW 88
// us_scout := 1 ;
42236: LD_ADDR_EXP 8
42240: PUSH
42241: LD_INT 1
42243: ST_TO_ADDR
// end ; 2 :
42244: GO 42279
42246: LD_INT 2
42248: DOUBLE
42249: EQUAL
42250: IFTRUE 42254
42252: GO 42278
42254: POP
// begin us_scout := - 1 ;
42255: LD_ADDR_EXP 8
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
42264: LD_EXP 21
42268: PPUSH
42269: LD_STRING D3Yb-JMM-1
42271: PPUSH
42272: CALL_OW 88
// end ; end ;
42276: GO 42279
42278: POP
// DialogueOff ;
42279: CALL_OW 7
// end ; if Frank then
42283: LD_EXP 33
42287: IFFALSE 42291
// exit ;
42289: GO 43052
// if us_scout in [ - 1 , 0 ] then
42291: LD_EXP 8
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: IN
42307: IFFALSE 42311
// exit ;
42309: GO 43052
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
42311: LD_ADDR_EXP 8
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: LIST
42329: PUSH
42330: LD_OWVAR 67
42334: ARRAY
42335: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
42336: LD_EXP 8
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: IN
42351: IFFALSE 43052
// begin if IsInUnit ( Kikuchi ) then
42353: LD_EXP 34
42357: PPUSH
42358: CALL_OW 310
42362: IFFALSE 42373
// ComExitBuilding ( Kikuchi ) ;
42364: LD_EXP 34
42368: PPUSH
42369: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
42373: LD_EXP 34
42377: PPUSH
42378: CALL_OW 311
42382: IFFALSE 42393
// ComExitVehicle ( Kikuchi ) ;
42384: LD_EXP 34
42388: PPUSH
42389: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
42393: LD_EXP 34
42397: PPUSH
42398: LD_INT 4
42400: PPUSH
42401: CALL_OW 235
// wait ( 0 0$1 ) ;
42405: LD_INT 35
42407: PPUSH
42408: CALL_OW 67
// if us_scout = 2 then
42412: LD_EXP 8
42416: PUSH
42417: LD_INT 2
42419: EQUAL
42420: IFFALSE 42800
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
42422: LD_EXP 34
42426: PPUSH
42427: LD_INT 75
42429: PPUSH
42430: LD_INT 63
42432: PPUSH
42433: CALL_OW 111
// AddComHold ( Kikuchi ) ;
42437: LD_EXP 34
42441: PPUSH
42442: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
42446: LD_EXP 34
42450: PPUSH
42451: LD_INT 770
42453: PPUSH
42454: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
42458: LD_EXP 34
42462: PPUSH
42463: LD_INT 100
42465: PPUSH
42466: LD_INT 75
42468: PPUSH
42469: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
42473: LD_EXP 34
42477: PPUSH
42478: LD_INT 123
42480: PPUSH
42481: LD_INT 103
42483: PPUSH
42484: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
42488: LD_EXP 34
42492: PPUSH
42493: LD_INT 138
42495: PPUSH
42496: LD_INT 108
42498: PPUSH
42499: CALL_OW 171
// AddComHold ( Kikuchi ) ;
42503: LD_EXP 34
42507: PPUSH
42508: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
42512: LD_INT 35
42514: PPUSH
42515: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
42519: LD_EXP 34
42523: PPUSH
42524: LD_INT 138
42526: PPUSH
42527: LD_INT 108
42529: PPUSH
42530: CALL_OW 307
42534: IFFALSE 42512
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
42536: LD_EXP 34
42540: PPUSH
42541: LD_INT 125
42543: PPUSH
42544: LD_INT 132
42546: PPUSH
42547: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42551: LD_INT 35
42553: PPUSH
42554: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
42558: LD_INT 1
42560: PPUSH
42561: LD_EXP 34
42565: PPUSH
42566: CALL_OW 292
42570: PUSH
42571: LD_EXP 34
42575: PPUSH
42576: LD_INT 7
42578: PPUSH
42579: CALL_OW 296
42583: PUSH
42584: LD_INT 7
42586: LESS
42587: OR
42588: IFFALSE 42551
// DialogueOn ;
42590: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42594: LD_EXP 34
42598: PPUSH
42599: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42603: LD_INT 10
42605: PPUSH
42606: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
42610: LD_EXP 34
42614: PPUSH
42615: LD_STRING D4Ya-Yam-1
42617: PPUSH
42618: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
42622: LD_EXP 21
42626: PPUSH
42627: LD_STRING D4Ya-JMM-1
42629: PPUSH
42630: CALL_OW 88
// for i in points do
42634: LD_ADDR_VAR 0 1
42638: PUSH
42639: LD_VAR 0 2
42643: PUSH
42644: FOR_IN
42645: IFFALSE 42703
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
42647: LD_VAR 0 1
42651: PUSH
42652: LD_INT 1
42654: ARRAY
42655: PPUSH
42656: LD_VAR 0 1
42660: PUSH
42661: LD_INT 2
42663: ARRAY
42664: PPUSH
42665: LD_INT 1
42667: PPUSH
42668: LD_INT 20
42670: NEG
42671: PPUSH
42672: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
42676: LD_VAR 0 1
42680: PUSH
42681: LD_INT 1
42683: ARRAY
42684: PPUSH
42685: LD_VAR 0 1
42689: PUSH
42690: LD_INT 2
42692: ARRAY
42693: PPUSH
42694: LD_INT 1
42696: PPUSH
42697: CALL_OW 331
// end ;
42701: GO 42644
42703: POP
42704: POP
// dwait ( 0 0$0.5 ) ;
42705: LD_INT 18
42707: PPUSH
42708: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
42712: LD_INT 42
42714: PPUSH
42715: LD_INT 27
42717: PPUSH
42718: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
42722: LD_EXP 34
42726: PPUSH
42727: LD_STRING D4Ya-Yam-2
42729: PPUSH
42730: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
42734: LD_INT 18
42736: PPUSH
42737: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
42741: LD_INT 118
42743: PPUSH
42744: LD_INT 80
42746: PPUSH
42747: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
42751: LD_EXP 21
42755: PPUSH
42756: LD_STRING D4Ya-JMM-2
42758: PPUSH
42759: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
42763: LD_EXP 34
42767: PPUSH
42768: LD_STRING D4Ya-Yam-3
42770: PPUSH
42771: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
42775: LD_INT 10
42777: PPUSH
42778: CALL_OW 68
// DialogueOff ;
42782: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
42786: LD_EXP 34
42790: PPUSH
42791: LD_INT 1
42793: PPUSH
42794: CALL_OW 235
// end else
42798: GO 43052
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
42800: LD_INT 2
42802: PPUSH
42803: LD_INT 4
42805: PPUSH
42806: LD_INT 2
42808: PPUSH
42809: LD_INT 1
42811: PPUSH
42812: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
42816: LD_EXP 34
42820: PPUSH
42821: LD_INT 75
42823: PPUSH
42824: LD_INT 63
42826: PPUSH
42827: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
42831: LD_EXP 34
42835: PPUSH
42836: LD_INT 175
42838: PPUSH
42839: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
42843: LD_EXP 34
42847: PPUSH
42848: LD_INT 102
42850: PPUSH
42851: LD_INT 76
42853: PPUSH
42854: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
42858: LD_EXP 34
42862: PPUSH
42863: LD_INT 108
42865: PPUSH
42866: LD_INT 70
42868: PPUSH
42869: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
42873: LD_INT 35
42875: PPUSH
42876: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
42880: LD_INT 2
42882: PPUSH
42883: LD_EXP 34
42887: PPUSH
42888: CALL_OW 292
42892: IFFALSE 42873
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
42894: LD_EXP 34
42898: PPUSH
42899: LD_INT 112
42901: PPUSH
42902: LD_INT 118
42904: PPUSH
42905: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
42909: LD_EXP 34
42913: PPUSH
42914: CALL_OW 256
42918: PUSH
42919: LD_INT 750
42921: GREATEREQUAL
42922: IFFALSE 42936
// SetLives ( Kikuchi , 700 ) ;
42924: LD_EXP 34
42928: PPUSH
42929: LD_INT 700
42931: PPUSH
42932: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
42936: LD_INT 35
42938: PPUSH
42939: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
42943: LD_INT 1
42945: PPUSH
42946: LD_EXP 34
42950: PPUSH
42951: CALL_OW 292
42955: PUSH
42956: LD_EXP 34
42960: PPUSH
42961: LD_INT 7
42963: PPUSH
42964: CALL_OW 296
42968: PUSH
42969: LD_INT 17
42971: LESS
42972: OR
42973: IFFALSE 42936
// DialogueOn ;
42975: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
42979: LD_EXP 34
42983: PPUSH
42984: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
42988: LD_EXP 34
42992: PPUSH
42993: LD_STRING D4Yb-Yam-1
42995: PPUSH
42996: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
43000: LD_EXP 21
43004: PPUSH
43005: LD_STRING D4Yb-JMM-1
43007: PPUSH
43008: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
43012: LD_EXP 34
43016: PPUSH
43017: LD_STRING D4Yb-Yam-2
43019: PPUSH
43020: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
43024: LD_EXP 21
43028: PPUSH
43029: LD_STRING D4Yb-JMM-2
43031: PPUSH
43032: CALL_OW 88
// DialogueOff ;
43036: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
43040: LD_EXP 34
43044: PPUSH
43045: LD_INT 1
43047: PPUSH
43048: CALL_OW 235
// end ; end ; end ;
43052: PPOPN 2
43054: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
43055: LD_EXP 6
43059: IFFALSE 44092
43061: GO 43063
43063: DISABLE
43064: LD_INT 0
43066: PPUSH
43067: PPUSH
43068: PPUSH
43069: PPUSH
// begin enable ;
43070: ENABLE
// if not seen [ 1 ] then
43071: LD_EXP 9
43075: PUSH
43076: LD_INT 1
43078: ARRAY
43079: NOT
43080: IFFALSE 43260
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
43082: LD_ADDR_VAR 0 2
43086: PUSH
43087: LD_INT 22
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 25
43102: PUSH
43103: LD_INT 11
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 33
43112: PUSH
43113: LD_INT 4
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: LIST
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PPUSH
43129: CALL_OW 69
43133: ST_TO_ADDR
// if tmp then
43134: LD_VAR 0 2
43138: IFFALSE 43260
// for i in tmp do
43140: LD_ADDR_VAR 0 1
43144: PUSH
43145: LD_VAR 0 2
43149: PUSH
43150: FOR_IN
43151: IFFALSE 43258
// if See ( 1 , i ) then
43153: LD_INT 1
43155: PPUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: CALL_OW 292
43165: IFFALSE 43256
// begin seen := Replace ( seen , 1 , true ) ;
43167: LD_ADDR_EXP 9
43171: PUSH
43172: LD_EXP 9
43176: PPUSH
43177: LD_INT 1
43179: PPUSH
43180: LD_INT 1
43182: PPUSH
43183: CALL_OW 1
43187: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43188: LD_INT 1
43190: PPUSH
43191: CALL 2109 0 1
43195: IFFALSE 43256
// begin DialogueOn ;
43197: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43201: LD_VAR 0 1
43205: PPUSH
43206: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43210: LD_INT 10
43212: PPUSH
43213: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
43217: LD_ADDR_VAR 0 3
43221: PUSH
43222: LD_INT 1
43224: PPUSH
43225: LD_STRING D5a-Sol2-1
43227: PPUSH
43228: CALL 2287 0 2
43232: ST_TO_ADDR
// if not un then
43233: LD_VAR 0 3
43237: NOT
43238: IFFALSE 43250
// SayRand ( sex_female , D5a-FSol2-1 ) ;
43240: LD_INT 2
43242: PPUSH
43243: LD_STRING D5a-FSol2-1
43245: PPUSH
43246: CALL 2287 0 2
// DialogueOff ;
43250: CALL_OW 7
// break ;
43254: GO 43258
// end ; end ;
43256: GO 43150
43258: POP
43259: POP
// end ; if not seen [ 2 ] then
43260: LD_EXP 9
43264: PUSH
43265: LD_INT 2
43267: ARRAY
43268: NOT
43269: IFFALSE 43494
// begin can_kamikazed := true ;
43271: LD_ADDR_EXP 10
43275: PUSH
43276: LD_INT 1
43278: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
43279: LD_ADDR_VAR 0 2
43283: PUSH
43284: LD_INT 22
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 25
43296: PUSH
43297: LD_INT 17
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PPUSH
43308: CALL_OW 69
43312: ST_TO_ADDR
// if tmp then
43313: LD_VAR 0 2
43317: IFFALSE 43494
// for i in tmp do
43319: LD_ADDR_VAR 0 1
43323: PUSH
43324: LD_VAR 0 2
43328: PUSH
43329: FOR_IN
43330: IFFALSE 43492
// if See ( 1 , i ) then
43332: LD_INT 1
43334: PPUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: CALL_OW 292
43344: IFFALSE 43490
// begin seen := Replace ( seen , 2 , true ) ;
43346: LD_ADDR_EXP 9
43350: PUSH
43351: LD_EXP 9
43355: PPUSH
43356: LD_INT 2
43358: PPUSH
43359: LD_INT 1
43361: PPUSH
43362: CALL_OW 1
43366: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43367: LD_INT 1
43369: PPUSH
43370: CALL 2109 0 1
43374: IFFALSE 43490
// begin DialogueOn ;
43376: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43380: LD_VAR 0 1
43384: PPUSH
43385: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43389: LD_INT 10
43391: PPUSH
43392: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_INT 1
43403: PPUSH
43404: LD_STRING D5b-Sol1-1
43406: PPUSH
43407: CALL 2287 0 2
43411: ST_TO_ADDR
// if not un then
43412: LD_VAR 0 3
43416: NOT
43417: IFFALSE 43435
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
43419: LD_ADDR_VAR 0 3
43423: PUSH
43424: LD_INT 2
43426: PPUSH
43427: LD_STRING D5b-FSol1-1
43429: PPUSH
43430: CALL 2287 0 2
43434: ST_TO_ADDR
// if un then
43435: LD_VAR 0 3
43439: IFFALSE 43484
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
43441: LD_ADDR_VAR 0 4
43445: PUSH
43446: LD_INT 1
43448: PPUSH
43449: LD_STRING D5b-Sol2-1
43451: PPUSH
43452: LD_VAR 0 3
43456: PPUSH
43457: CALL 2513 0 3
43461: ST_TO_ADDR
// if not un2 then
43462: LD_VAR 0 4
43466: NOT
43467: IFFALSE 43484
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
43469: LD_INT 2
43471: PPUSH
43472: LD_STRING D5b-FSol2-1
43474: PPUSH
43475: LD_VAR 0 3
43479: PPUSH
43480: CALL 2513 0 3
// end ; DialogueOff ;
43484: CALL_OW 7
// break ;
43488: GO 43492
// end ; end ;
43490: GO 43329
43492: POP
43493: POP
// end ; if not seen [ 3 ] then
43494: LD_EXP 9
43498: PUSH
43499: LD_INT 3
43501: ARRAY
43502: NOT
43503: IFFALSE 43677
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
43505: LD_ADDR_VAR 0 2
43509: PUSH
43510: LD_INT 22
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 33
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PPUSH
43534: CALL_OW 69
43538: ST_TO_ADDR
// if tmp then
43539: LD_VAR 0 2
43543: IFFALSE 43677
// for i in tmp do
43545: LD_ADDR_VAR 0 1
43549: PUSH
43550: LD_VAR 0 2
43554: PUSH
43555: FOR_IN
43556: IFFALSE 43675
// if See ( 1 , i ) then
43558: LD_INT 1
43560: PPUSH
43561: LD_VAR 0 1
43565: PPUSH
43566: CALL_OW 292
43570: IFFALSE 43673
// begin seen := Replace ( seen , 3 , true ) ;
43572: LD_ADDR_EXP 9
43576: PUSH
43577: LD_EXP 9
43581: PPUSH
43582: LD_INT 3
43584: PPUSH
43585: LD_INT 1
43587: PPUSH
43588: CALL_OW 1
43592: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43593: LD_INT 1
43595: PPUSH
43596: CALL 2109 0 1
43600: IFFALSE 43673
// begin DialogueOn ;
43602: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43606: LD_VAR 0 1
43610: PPUSH
43611: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43615: LD_INT 10
43617: PPUSH
43618: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
43622: LD_ADDR_VAR 0 3
43626: PUSH
43627: LD_INT 1
43629: PPUSH
43630: LD_STRING D8-Sol1-1
43632: PPUSH
43633: CALL 2287 0 2
43637: ST_TO_ADDR
// if not un then
43638: LD_VAR 0 3
43642: NOT
43643: IFFALSE 43655
// SayRand ( sex_female , D8-FSol1-1 ) ;
43645: LD_INT 2
43647: PPUSH
43648: LD_STRING D8-FSol1-1
43650: PPUSH
43651: CALL 2287 0 2
// Say ( JMM , D8-JMM-1 ) ;
43655: LD_EXP 21
43659: PPUSH
43660: LD_STRING D8-JMM-1
43662: PPUSH
43663: CALL_OW 88
// DialogueOff ;
43667: CALL_OW 7
// break ;
43671: GO 43675
// end ; end ;
43673: GO 43555
43675: POP
43676: POP
// end ; if not seen [ 4 ] then
43677: LD_EXP 9
43681: PUSH
43682: LD_INT 4
43684: ARRAY
43685: NOT
43686: IFFALSE 43848
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
43688: LD_ADDR_VAR 0 2
43692: PUSH
43693: LD_INT 22
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 33
43705: PUSH
43706: LD_INT 5
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PPUSH
43717: CALL_OW 69
43721: ST_TO_ADDR
// if tmp then
43722: LD_VAR 0 2
43726: IFFALSE 43848
// for i in tmp do
43728: LD_ADDR_VAR 0 1
43732: PUSH
43733: LD_VAR 0 2
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43846
// if See ( 1 , i ) then
43741: LD_INT 1
43743: PPUSH
43744: LD_VAR 0 1
43748: PPUSH
43749: CALL_OW 292
43753: IFFALSE 43844
// begin seen := Replace ( seen , 4 , true ) ;
43755: LD_ADDR_EXP 9
43759: PUSH
43760: LD_EXP 9
43764: PPUSH
43765: LD_INT 4
43767: PPUSH
43768: LD_INT 1
43770: PPUSH
43771: CALL_OW 1
43775: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43776: LD_INT 1
43778: PPUSH
43779: CALL 2109 0 1
43783: IFFALSE 43844
// begin DialogueOn ;
43785: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43789: LD_VAR 0 1
43793: PPUSH
43794: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43798: LD_INT 10
43800: PPUSH
43801: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: LD_INT 1
43812: PPUSH
43813: LD_STRING D5a-Sol1-1
43815: PPUSH
43816: CALL 2287 0 2
43820: ST_TO_ADDR
// if not un then
43821: LD_VAR 0 3
43825: NOT
43826: IFFALSE 43838
// SayRand ( sex_female , D5a-FSol1-1 ) ;
43828: LD_INT 2
43830: PPUSH
43831: LD_STRING D5a-FSol1-1
43833: PPUSH
43834: CALL 2287 0 2
// DialogueOff ;
43838: CALL_OW 7
// break ;
43842: GO 43846
// end ; end ;
43844: GO 43738
43846: POP
43847: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
43848: LD_EXP 9
43852: PUSH
43853: LD_INT 5
43855: ARRAY
43856: NOT
43857: PUSH
43858: LD_EXP 9
43862: PUSH
43863: LD_INT 3
43865: ARRAY
43866: AND
43867: IFFALSE 44041
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
43869: LD_ADDR_VAR 0 2
43873: PUSH
43874: LD_INT 22
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 34
43886: PUSH
43887: LD_INT 31
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PPUSH
43898: CALL_OW 69
43902: ST_TO_ADDR
// if tmp then
43903: LD_VAR 0 2
43907: IFFALSE 44041
// for i in tmp do
43909: LD_ADDR_VAR 0 1
43913: PUSH
43914: LD_VAR 0 2
43918: PUSH
43919: FOR_IN
43920: IFFALSE 44039
// if See ( 1 , i ) then
43922: LD_INT 1
43924: PPUSH
43925: LD_VAR 0 1
43929: PPUSH
43930: CALL_OW 292
43934: IFFALSE 44037
// begin seen := Replace ( seen , 5 , true ) ;
43936: LD_ADDR_EXP 9
43940: PUSH
43941: LD_EXP 9
43945: PPUSH
43946: LD_INT 5
43948: PPUSH
43949: LD_INT 1
43951: PPUSH
43952: CALL_OW 1
43956: ST_TO_ADDR
// if CanSayRand ( 1 ) then
43957: LD_INT 1
43959: PPUSH
43960: CALL 2109 0 1
43964: IFFALSE 44037
// begin DialogueOn ;
43966: CALL_OW 6
// CenterNowOnUnits ( i ) ;
43970: LD_VAR 0 1
43974: PPUSH
43975: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
43979: LD_INT 10
43981: PPUSH
43982: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
43986: LD_ADDR_VAR 0 3
43990: PUSH
43991: LD_INT 1
43993: PPUSH
43994: LD_STRING D8a-Sol2-1
43996: PPUSH
43997: CALL 2287 0 2
44001: ST_TO_ADDR
// if not un then
44002: LD_VAR 0 3
44006: NOT
44007: IFFALSE 44019
// SayRand ( sex_female , D8a-FSol2-1 ) ;
44009: LD_INT 2
44011: PPUSH
44012: LD_STRING D8a-FSol2-1
44014: PPUSH
44015: CALL 2287 0 2
// Say ( JMM , D8a-JMM-1 ) ;
44019: LD_EXP 21
44023: PPUSH
44024: LD_STRING D8a-JMM-1
44026: PPUSH
44027: CALL_OW 88
// DialogueOff ;
44031: CALL_OW 7
// break ;
44035: GO 44039
// end ; end ;
44037: GO 43919
44039: POP
44040: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
44041: LD_EXP 9
44045: PUSH
44046: LD_INT 1
44048: ARRAY
44049: PUSH
44050: LD_EXP 9
44054: PUSH
44055: LD_INT 2
44057: ARRAY
44058: AND
44059: PUSH
44060: LD_EXP 9
44064: PUSH
44065: LD_INT 3
44067: ARRAY
44068: AND
44069: PUSH
44070: LD_EXP 9
44074: PUSH
44075: LD_INT 4
44077: ARRAY
44078: AND
44079: PUSH
44080: LD_EXP 9
44084: PUSH
44085: LD_INT 5
44087: ARRAY
44088: AND
44089: IFFALSE 44092
// disable ;
44091: DISABLE
// end ;
44092: PPOPN 4
44094: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
44095: LD_EXP 10
44099: PUSH
44100: LD_EXP 11
44104: AND
44105: IFFALSE 44303
44107: GO 44109
44109: DISABLE
44110: LD_INT 0
44112: PPUSH
// begin DialogueOn ;
44113: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
44117: LD_EXP 11
44121: PPUSH
44122: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
44126: LD_ADDR_VAR 0 1
44130: PUSH
44131: LD_INT 1
44133: PPUSH
44134: LD_STRING D5c-Sol1-1
44136: PPUSH
44137: CALL 2287 0 2
44141: ST_TO_ADDR
// if not un then
44142: LD_VAR 0 1
44146: NOT
44147: IFFALSE 44165
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
44149: LD_ADDR_VAR 0 1
44153: PUSH
44154: LD_INT 2
44156: PPUSH
44157: LD_STRING D5c-Sol1-1
44159: PPUSH
44160: CALL 2287 0 2
44164: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
44165: LD_EXP 21
44169: PPUSH
44170: LD_STRING D5c-JMM-1
44172: PPUSH
44173: CALL_OW 88
// if IsOk ( Lisa ) then
44177: LD_EXP 22
44181: PPUSH
44182: CALL_OW 302
44186: IFFALSE 44202
// Say ( Lisa , D5d-Lisa-1 ) else
44188: LD_EXP 22
44192: PPUSH
44193: LD_STRING D5d-Lisa-1
44195: PPUSH
44196: CALL_OW 88
44200: GO 44287
// if IsOk ( Cyrus ) then
44202: LD_EXP 25
44206: PPUSH
44207: CALL_OW 302
44211: IFFALSE 44227
// Say ( Cyrus , D5d-Cyrus-1 ) else
44213: LD_EXP 25
44217: PPUSH
44218: LD_STRING D5d-Cyrus-1
44220: PPUSH
44221: CALL_OW 88
44225: GO 44287
// if IsOk ( Gary ) then
44227: LD_EXP 32
44231: PPUSH
44232: CALL_OW 302
44236: IFFALSE 44252
// Say ( Gary , D5d-Gary-1 ) else
44238: LD_EXP 32
44242: PPUSH
44243: LD_STRING D5d-Gary-1
44245: PPUSH
44246: CALL_OW 88
44250: GO 44287
// if GetSex ( un ) = sex_male then
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 258
44261: PUSH
44262: LD_INT 1
44264: EQUAL
44265: IFFALSE 44281
// Say ( un , D5d-Sol1-1 ) else
44267: LD_VAR 0 1
44271: PPUSH
44272: LD_STRING D5d-Sol1-1
44274: PPUSH
44275: CALL_OW 88
44279: GO 44287
// begin DialogueOff ;
44281: CALL_OW 7
// exit ;
44285: GO 44303
// end ; Say ( JMM , D5d-JMM-1 ) ;
44287: LD_EXP 21
44291: PPUSH
44292: LD_STRING D5d-JMM-1
44294: PPUSH
44295: CALL_OW 88
// DialogueOff ;
44299: CALL_OW 7
// end ;
44303: PPOPN 1
44305: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
44306: LD_INT 1
44308: PPUSH
44309: LD_INT 17
44311: PPUSH
44312: CALL_OW 294
44316: PUSH
44317: LD_INT 2
44319: GREATEREQUAL
44320: IFFALSE 44441
44322: GO 44324
44324: DISABLE
44325: LD_INT 0
44327: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
44328: LD_INT 10
44330: PPUSH
44331: LD_INT 5
44333: PPUSH
44334: LD_INT 1
44336: PPUSH
44337: LD_INT 10
44339: NEG
44340: PPUSH
44341: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
44345: LD_INT 10
44347: PPUSH
44348: LD_INT 5
44350: PPUSH
44351: LD_INT 1
44353: PPUSH
44354: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
44358: LD_INT 10
44360: PPUSH
44361: LD_INT 5
44363: PPUSH
44364: CALL_OW 86
// DialogueOn ;
44368: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
44372: LD_ADDR_VAR 0 1
44376: PUSH
44377: LD_INT 1
44379: PPUSH
44380: LD_STRING D6-Sci1-1
44382: PPUSH
44383: CALL 2287 0 2
44387: ST_TO_ADDR
// if un then
44388: LD_VAR 0 1
44392: IFFALSE 44430
// begin Say ( JMM , D6-JMM-1 ) ;
44394: LD_EXP 21
44398: PPUSH
44399: LD_STRING D6-JMM-1
44401: PPUSH
44402: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_STRING D6-Sci1-2
44413: PPUSH
44414: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
44418: LD_EXP 21
44422: PPUSH
44423: LD_STRING D6-JMM-2
44425: PPUSH
44426: CALL_OW 88
// end ; DialogueOff ;
44430: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
44434: LD_STRING M3
44436: PPUSH
44437: CALL_OW 337
// end ;
44441: PPOPN 1
44443: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
44444: LD_OWVAR 1
44448: PUSH
44449: LD_INT 65100
44451: GREATEREQUAL
44452: PUSH
44453: LD_INT 2
44455: PPUSH
44456: LD_INT 169
44458: PPUSH
44459: LD_INT 90
44461: PPUSH
44462: LD_INT 40
44464: PPUSH
44465: CALL 3731 0 4
44469: PUSH
44470: LD_INT 4
44472: ARRAY
44473: PUSH
44474: LD_INT 0
44476: EQUAL
44477: AND
44478: IFFALSE 45604
44480: GO 44482
44482: DISABLE
44483: LD_INT 0
44485: PPUSH
44486: PPUSH
44487: PPUSH
44488: PPUSH
// begin uc_side := 5 ;
44489: LD_ADDR_OWVAR 20
44493: PUSH
44494: LD_INT 5
44496: ST_TO_ADDR
// uc_nation := 2 ;
44497: LD_ADDR_OWVAR 21
44501: PUSH
44502: LD_INT 2
44504: ST_TO_ADDR
// InitHc ;
44505: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
44509: LD_INT 1
44511: PPUSH
44512: LD_INT 3
44514: PPUSH
44515: LD_INT 8
44517: PPUSH
44518: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44522: LD_ADDR_OWVAR 29
44526: PUSH
44527: LD_INT 12
44529: PUSH
44530: LD_INT 12
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
44537: LD_ADDR_OWVAR 33
44541: PUSH
44542: LD_STRING SecondCharsGal
44544: ST_TO_ADDR
// hc_face_number := 7 ;
44545: LD_ADDR_OWVAR 34
44549: PUSH
44550: LD_INT 7
44552: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
44553: LD_ADDR_EXP 45
44557: PUSH
44558: CALL_OW 44
44562: ST_TO_ADDR
// InitHc ;
44563: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
44567: LD_INT 1
44569: PPUSH
44570: LD_INT 16
44572: PPUSH
44573: LD_INT 2
44575: PPUSH
44576: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
44580: LD_ADDR_OWVAR 29
44584: PUSH
44585: LD_INT 12
44587: PUSH
44588: LD_INT 12
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// hc_name :=  ;
44595: LD_ADDR_OWVAR 26
44599: PUSH
44600: LD_STRING 
44602: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
44603: LD_ADDR_EXP 46
44607: PUSH
44608: CALL_OW 44
44612: ST_TO_ADDR
// InitHc ;
44613: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
44617: LD_INT 35
44619: PPUSH
44620: CALL_OW 67
// until not InBattle ( 1 ) ;
44624: LD_INT 1
44626: PPUSH
44627: CALL_OW 463
44631: NOT
44632: IFFALSE 44617
// wait ( 0 0$5 ) ;
44634: LD_INT 175
44636: PPUSH
44637: CALL_OW 67
// DialogueOn ;
44641: CALL_OW 6
// InGameOn ;
44645: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
44649: LD_ADDR_VAR 0 1
44653: PUSH
44654: LD_INT 22
44656: PUSH
44657: LD_INT 1
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 2
44666: PUSH
44667: LD_INT 25
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 25
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 25
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 25
44699: PUSH
44700: LD_INT 4
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 25
44709: PUSH
44710: LD_INT 5
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 25
44719: PUSH
44720: LD_INT 8
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 69
44744: PUSH
44745: LD_EXP 21
44749: PUSH
44750: LD_EXP 22
44754: PUSH
44755: LD_EXP 23
44759: PUSH
44760: LD_EXP 24
44764: PUSH
44765: LD_EXP 25
44769: PUSH
44770: LD_EXP 26
44774: PUSH
44775: LD_EXP 27
44779: PUSH
44780: LD_EXP 28
44784: PUSH
44785: LD_EXP 29
44789: PUSH
44790: LD_EXP 31
44794: PUSH
44795: LD_EXP 32
44799: PUSH
44800: LD_EXP 33
44804: PUSH
44805: LD_EXP 34
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: DIFF
44825: PPUSH
44826: LD_INT 26
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PPUSH
44836: CALL_OW 72
44840: PUSH
44841: LD_INT 1
44843: ARRAY
44844: ST_TO_ADDR
// if not un and Brown then
44845: LD_VAR 0 1
44849: NOT
44850: PUSH
44851: LD_EXP 27
44855: AND
44856: IFFALSE 44868
// un := Brown ;
44858: LD_ADDR_VAR 0 1
44862: PUSH
44863: LD_EXP 27
44867: ST_TO_ADDR
// if un then
44868: LD_VAR 0 1
44872: IFFALSE 44898
// begin Say ( un , D7-Sol1-1 ) ;
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_STRING D7-Sol1-1
44881: PPUSH
44882: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
44886: LD_EXP 21
44890: PPUSH
44891: LD_STRING D7-JMM-1
44893: PPUSH
44894: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
44898: LD_EXP 45
44902: PPUSH
44903: LD_STRING D7-Ar1-1
44905: PPUSH
44906: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
44910: LD_EXP 21
44914: PPUSH
44915: LD_STRING D7-JMM-2
44917: PPUSH
44918: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
44922: LD_EXP 45
44926: PPUSH
44927: LD_STRING D7-Ar1-2
44929: PPUSH
44930: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
44934: LD_EXP 21
44938: PPUSH
44939: LD_STRING D7-JMM-3
44941: PPUSH
44942: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
44946: LD_EXP 45
44950: PPUSH
44951: LD_STRING D7-Ar1-3
44953: PPUSH
44954: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
44958: LD_EXP 21
44962: PPUSH
44963: LD_STRING D7-JMM-4
44965: PPUSH
44966: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
44970: LD_EXP 45
44974: PPUSH
44975: LD_STRING D7-Ar1-4
44977: PPUSH
44978: CALL_OW 94
// InGameOff ;
44982: CALL_OW 9
// DialogueOff ;
44986: CALL_OW 7
// case Query ( QCameras ) of 1 :
44990: LD_STRING QCameras
44992: PPUSH
44993: CALL_OW 97
44997: PUSH
44998: LD_INT 1
45000: DOUBLE
45001: EQUAL
45002: IFTRUE 45006
45004: GO 45009
45006: POP
// ; 2 :
45007: GO 45023
45009: LD_INT 2
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45022
45017: POP
// exit ; end ;
45018: GO 45604
45020: GO 45023
45022: POP
// ChangeMissionObjectives ( MCar ) ;
45023: LD_STRING MCar
45025: PPUSH
45026: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
45030: LD_INT 124
45032: PPUSH
45033: LD_INT 90
45035: PPUSH
45036: LD_INT 1
45038: PPUSH
45039: LD_INT 6
45041: NEG
45042: PPUSH
45043: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
45047: LD_INT 124
45049: PPUSH
45050: LD_INT 90
45052: PPUSH
45053: LD_INT 1
45055: PPUSH
45056: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
45060: LD_INT 12
45062: PPUSH
45063: LD_INT 1
45065: PPUSH
45066: CALL_OW 424
// wait ( 3 ) ;
45070: LD_INT 3
45072: PPUSH
45073: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
45077: LD_INT 124
45079: PPUSH
45080: LD_INT 90
45082: PPUSH
45083: CALL_OW 86
// cargo := false ;
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_INT 0
45094: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45095: LD_INT 35
45097: PPUSH
45098: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
45102: LD_ADDR_VAR 0 3
45106: PUSH
45107: LD_INT 12
45109: PPUSH
45110: LD_INT 32
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 34
45122: PUSH
45123: LD_INT 32
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 58
45132: PUSH
45133: EMPTY
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: PPUSH
45141: CALL_OW 70
45145: ST_TO_ADDR
// until cargo ;
45146: LD_VAR 0 3
45150: IFFALSE 45095
// cargo := cargo [ 1 ] ;
45152: LD_ADDR_VAR 0 3
45156: PUSH
45157: LD_VAR 0 3
45161: PUSH
45162: LD_INT 1
45164: ARRAY
45165: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
45166: LD_VAR 0 3
45170: PPUSH
45171: LD_INT 5
45173: PPUSH
45174: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
45178: LD_INT 12
45180: PPUSH
45181: LD_INT 0
45183: PPUSH
45184: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
45188: LD_EXP 45
45192: PPUSH
45193: LD_INT 11
45195: PPUSH
45196: LD_INT 0
45198: PPUSH
45199: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
45203: LD_EXP 46
45207: PPUSH
45208: LD_INT 11
45210: PPUSH
45211: LD_INT 0
45213: PPUSH
45214: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
45218: LD_EXP 45
45222: PUSH
45223: LD_EXP 46
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PPUSH
45232: LD_INT 12
45234: PPUSH
45235: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
45239: LD_EXP 45
45243: PPUSH
45244: LD_VAR 0 3
45248: PPUSH
45249: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45253: LD_EXP 45
45257: PUSH
45258: LD_EXP 46
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PPUSH
45267: LD_INT 209
45269: PPUSH
45270: LD_INT 178
45272: PPUSH
45273: CALL_OW 171
// while ( true ) do
45277: LD_INT 1
45279: IFFALSE 45433
// begin wait ( 0 0$1 ) ;
45281: LD_INT 35
45283: PPUSH
45284: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
45288: LD_EXP 45
45292: PPUSH
45293: CALL_OW 314
45297: NOT
45298: PUSH
45299: LD_EXP 46
45303: PPUSH
45304: CALL_OW 314
45308: NOT
45309: OR
45310: IFFALSE 45336
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
45312: LD_EXP 45
45316: PUSH
45317: LD_EXP 46
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PPUSH
45326: LD_INT 209
45328: PPUSH
45329: LD_INT 178
45331: PPUSH
45332: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
45336: LD_EXP 45
45340: PPUSH
45341: LD_INT 10
45343: PPUSH
45344: CALL_OW 308
45348: IFFALSE 45359
// RemoveUnit ( ar_mechanic ) ;
45350: LD_EXP 45
45354: PPUSH
45355: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
45359: LD_EXP 46
45363: PPUSH
45364: LD_INT 10
45366: PPUSH
45367: CALL_OW 308
45371: IFFALSE 45382
// RemoveUnit ( ar_mechanic_friend ) ;
45373: LD_EXP 46
45377: PPUSH
45378: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
45382: LD_VAR 0 3
45386: PPUSH
45387: LD_INT 10
45389: PPUSH
45390: CALL_OW 308
45394: IFFALSE 45405
// RemoveUnit ( cargo ) ;
45396: LD_VAR 0 3
45400: PPUSH
45401: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
45405: LD_EXP 45
45409: PPUSH
45410: CALL_OW 300
45414: NOT
45415: PUSH
45416: LD_EXP 46
45420: PPUSH
45421: CALL_OW 300
45425: NOT
45426: AND
45427: IFFALSE 45431
// break ;
45429: GO 45433
// end ;
45431: GO 45277
// wait ( 0 0$2 ) ;
45433: LD_INT 70
45435: PPUSH
45436: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
45440: LD_EXP 45
45444: PPUSH
45445: LD_STRING D7a-Ar1-1
45447: PPUSH
45448: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
45452: LD_ADDR_VAR 0 4
45456: PUSH
45457: LD_INT 129
45459: PUSH
45460: LD_INT 10
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 103
45469: PUSH
45470: LD_INT 6
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 148
45479: PUSH
45480: LD_INT 47
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 155
45489: PUSH
45490: LD_INT 16
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: ST_TO_ADDR
// if Difficulty = 1 then
45503: LD_OWVAR 67
45507: PUSH
45508: LD_INT 1
45510: EQUAL
45511: IFFALSE 45548
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
45513: LD_ADDR_VAR 0 4
45517: PUSH
45518: LD_VAR 0 4
45522: PUSH
45523: LD_INT 78
45525: PUSH
45526: LD_INT 7
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 104
45535: PUSH
45536: LD_INT 43
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: ADD
45547: ST_TO_ADDR
// for i in tmp do
45548: LD_ADDR_VAR 0 2
45552: PUSH
45553: LD_VAR 0 4
45557: PUSH
45558: FOR_IN
45559: IFFALSE 45592
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
45561: LD_VAR 0 2
45565: PUSH
45566: LD_INT 1
45568: ARRAY
45569: PPUSH
45570: LD_VAR 0 2
45574: PUSH
45575: LD_INT 2
45577: ARRAY
45578: PPUSH
45579: LD_INT 1
45581: PPUSH
45582: LD_INT 9
45584: NEG
45585: PPUSH
45586: CALL_OW 330
45590: GO 45558
45592: POP
45593: POP
// CenterOnXY ( 129 , 10 ) ;
45594: LD_INT 129
45596: PPUSH
45597: LD_INT 10
45599: PPUSH
45600: CALL_OW 84
// end ;
45604: PPOPN 4
45606: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
45607: LD_EXP 15
45611: PUSH
45612: LD_INT 21000
45614: MINUS
45615: PUSH
45616: LD_OWVAR 1
45620: LESSEQUAL
45621: IFFALSE 45661
45623: GO 45625
45625: DISABLE
// begin powell_warn := true ;
45626: LD_ADDR_EXP 16
45630: PUSH
45631: LD_INT 1
45633: ST_TO_ADDR
// DialogueOn ;
45634: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
45638: LD_EXP 30
45642: PPUSH
45643: LD_STRING D9-Pow-1
45645: PPUSH
45646: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
45650: LD_INT 10
45652: PPUSH
45653: CALL_OW 68
// DialogueOff ;
45657: CALL_OW 7
// end ;
45661: END
// every 0 0$1 trigger game_time <= tick do
45662: LD_EXP 15
45666: PUSH
45667: LD_OWVAR 1
45671: LESSEQUAL
45672: IFFALSE 45711
45674: GO 45676
45676: DISABLE
// begin DialogueOn ;
45677: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
45681: LD_EXP 30
45685: PPUSH
45686: LD_STRING D9a-Pow-1
45688: PPUSH
45689: CALL_OW 94
// dwait ( 0 0$2 ) ;
45693: LD_INT 70
45695: PPUSH
45696: CALL_OW 68
// DialogueOff ;
45700: CALL_OW 7
// YouLost ( Command ) ;
45704: LD_STRING Command
45706: PPUSH
45707: CALL_OW 104
// end ;
45711: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
45712: LD_EXP 21
45716: PPUSH
45717: CALL_OW 301
45721: PUSH
45722: LD_EXP 5
45726: AND
45727: IFFALSE 45739
45729: GO 45731
45731: DISABLE
// YouLost ( JMM ) ;
45732: LD_STRING JMM
45734: PPUSH
45735: CALL_OW 104
45739: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
45740: LD_INT 22
45742: PUSH
45743: LD_INT 2
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 30
45752: PUSH
45753: LD_INT 1
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PPUSH
45764: CALL_OW 69
45768: PUSH
45769: LD_INT 0
45771: EQUAL
45772: PUSH
45773: LD_EXP 21
45777: PPUSH
45778: CALL_OW 302
45782: AND
45783: IFFALSE 46482
45785: GO 45787
45787: DISABLE
45788: LD_INT 0
45790: PPUSH
// begin if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
45791: LD_OWVAR 1
45795: PUSH
45796: LD_INT 126000
45798: PUSH
45799: LD_INT 105000
45801: PUSH
45802: LD_INT 94500
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: PUSH
45810: LD_OWVAR 67
45814: ARRAY
45815: LESS
45816: IFFALSE 45830
// AddMedal ( Time1 , 1 ) else
45818: LD_STRING Time1
45820: PPUSH
45821: LD_INT 1
45823: PPUSH
45824: CALL_OW 101
45828: GO 45861
// if not powell_warn then
45830: LD_EXP 16
45834: NOT
45835: IFFALSE 45850
// AddMedal ( Time1 , - 1 ) else
45837: LD_STRING Time1
45839: PPUSH
45840: LD_INT 1
45842: NEG
45843: PPUSH
45844: CALL_OW 101
45848: GO 45861
// AddMedal ( Time1 , - 2 ) ;
45850: LD_STRING Time1
45852: PPUSH
45853: LD_INT 2
45855: NEG
45856: PPUSH
45857: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
45861: LD_EXP 17
45865: PUSH
45866: LD_INT 5
45868: PUSH
45869: LD_INT 4
45871: PUSH
45872: LD_INT 3
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: PUSH
45880: LD_OWVAR 67
45884: ARRAY
45885: GREATEREQUAL
45886: IFFALSE 45901
// AddMedal ( Destroy , - 2 ) else
45888: LD_STRING Destroy
45890: PPUSH
45891: LD_INT 2
45893: NEG
45894: PPUSH
45895: CALL_OW 101
45899: GO 46018
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
45901: LD_INT 22
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 21
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 50
45923: PUSH
45924: EMPTY
45925: LIST
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: LIST
45931: PPUSH
45932: CALL_OW 69
45936: PUSH
45937: LD_INT 20
45939: GREATEREQUAL
45940: IFFALSE 45955
// AddMedal ( Destroy , - 1 ) else
45942: LD_STRING Destroy
45944: PPUSH
45945: LD_INT 1
45947: NEG
45948: PPUSH
45949: CALL_OW 101
45953: GO 46018
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
45955: LD_INT 22
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 21
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 50
45977: PUSH
45978: EMPTY
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: LIST
45985: PPUSH
45986: CALL_OW 69
45990: PUSH
45991: LD_INT 10
45993: GREATEREQUAL
45994: IFFALSE 46008
// AddMedal ( Destroy , 1 ) else
45996: LD_STRING Destroy
45998: PPUSH
45999: LD_INT 1
46001: PPUSH
46002: CALL_OW 101
46006: GO 46018
// AddMedal ( Destroy , 2 ) ;
46008: LD_STRING Destroy
46010: PPUSH
46011: LD_INT 2
46013: PPUSH
46014: CALL_OW 101
// if artifact_get then
46018: LD_EXP 13
46022: IFFALSE 46036
// AddMedal ( Artefact , 1 ) else
46024: LD_STRING Artefact
46026: PPUSH
46027: LD_INT 1
46029: PPUSH
46030: CALL_OW 101
46034: GO 46047
// AddMedal ( Artefact , - 1 ) ;
46036: LD_STRING Artefact
46038: PPUSH
46039: LD_INT 1
46041: NEG
46042: PPUSH
46043: CALL_OW 101
// GiveMedals ( MAIN ) ;
46047: LD_STRING MAIN
46049: PPUSH
46050: CALL_OW 102
// tmp := JMM ^ selected ;
46054: LD_ADDR_VAR 0 1
46058: PUSH
46059: LD_EXP 21
46063: PUSH
46064: LD_EXP 20
46068: ADD
46069: ST_TO_ADDR
// RewardPeople ( tmp ) ;
46070: LD_VAR 0 1
46074: PPUSH
46075: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
46079: LD_VAR 0 1
46083: PUSH
46084: LD_EXP 21
46088: PUSH
46089: LD_EXP 22
46093: PUSH
46094: LD_EXP 23
46098: PUSH
46099: LD_EXP 24
46103: PUSH
46104: LD_EXP 25
46108: PUSH
46109: LD_EXP 26
46113: PUSH
46114: LD_EXP 27
46118: PUSH
46119: LD_EXP 28
46123: PUSH
46124: LD_EXP 29
46128: PUSH
46129: LD_EXP 31
46133: PUSH
46134: LD_EXP 32
46138: PUSH
46139: LD_EXP 33
46143: PUSH
46144: LD_EXP 34
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: DIFF
46164: PPUSH
46165: LD_STRING 11c_others
46167: PPUSH
46168: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
46172: LD_EXP 21
46176: PPUSH
46177: LD_EXP 3
46181: PUSH
46182: LD_STRING JMM
46184: STR
46185: PPUSH
46186: CALL_OW 38
// if Lisa then
46190: LD_EXP 22
46194: IFFALSE 46214
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
46196: LD_EXP 22
46200: PPUSH
46201: LD_EXP 3
46205: PUSH
46206: LD_STRING Lisa
46208: STR
46209: PPUSH
46210: CALL_OW 38
// if Donaldson then
46214: LD_EXP 23
46218: IFFALSE 46238
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
46220: LD_EXP 23
46224: PPUSH
46225: LD_EXP 3
46229: PUSH
46230: LD_STRING Donaldson
46232: STR
46233: PPUSH
46234: CALL_OW 38
// if Bobby then
46238: LD_EXP 24
46242: IFFALSE 46262
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
46244: LD_EXP 24
46248: PPUSH
46249: LD_EXP 3
46253: PUSH
46254: LD_STRING Bobby
46256: STR
46257: PPUSH
46258: CALL_OW 38
// if Cyrus then
46262: LD_EXP 25
46266: IFFALSE 46286
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
46268: LD_EXP 25
46272: PPUSH
46273: LD_EXP 3
46277: PUSH
46278: LD_STRING Cyrus
46280: STR
46281: PPUSH
46282: CALL_OW 38
// if Denis then
46286: LD_EXP 26
46290: IFFALSE 46310
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
46292: LD_EXP 26
46296: PPUSH
46297: LD_EXP 3
46301: PUSH
46302: LD_STRING Denis
46304: STR
46305: PPUSH
46306: CALL_OW 38
// if Brown then
46310: LD_EXP 27
46314: IFFALSE 46334
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
46316: LD_EXP 27
46320: PPUSH
46321: LD_EXP 3
46325: PUSH
46326: LD_STRING Brown
46328: STR
46329: PPUSH
46330: CALL_OW 38
// if Gladstone then
46334: LD_EXP 28
46338: IFFALSE 46358
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
46340: LD_EXP 28
46344: PPUSH
46345: LD_EXP 3
46349: PUSH
46350: LD_STRING Gladstone
46352: STR
46353: PPUSH
46354: CALL_OW 38
// if Houten then
46358: LD_EXP 29
46362: IFFALSE 46382
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
46364: LD_EXP 29
46368: PPUSH
46369: LD_EXP 3
46373: PUSH
46374: LD_STRING Houten
46376: STR
46377: PPUSH
46378: CALL_OW 38
// if Cornel then
46382: LD_EXP 31
46386: IFFALSE 46406
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
46388: LD_EXP 31
46392: PPUSH
46393: LD_EXP 3
46397: PUSH
46398: LD_STRING Cornel
46400: STR
46401: PPUSH
46402: CALL_OW 38
// if Gary then
46406: LD_EXP 32
46410: IFFALSE 46430
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
46412: LD_EXP 32
46416: PPUSH
46417: LD_EXP 3
46421: PUSH
46422: LD_STRING Gary
46424: STR
46425: PPUSH
46426: CALL_OW 38
// if Frank then
46430: LD_EXP 33
46434: IFFALSE 46454
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
46436: LD_EXP 33
46440: PPUSH
46441: LD_EXP 3
46445: PUSH
46446: LD_STRING Frank
46448: STR
46449: PPUSH
46450: CALL_OW 38
// if Kikuchi then
46454: LD_EXP 34
46458: IFFALSE 46478
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
46460: LD_EXP 34
46464: PPUSH
46465: LD_EXP 3
46469: PUSH
46470: LD_STRING Kikuchi
46472: STR
46473: PPUSH
46474: CALL_OW 38
// YouWin ;
46478: CALL_OW 103
// end ; end_of_file
46482: PPOPN 1
46484: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
46485: LD_INT 0
46487: PPUSH
// skirmish := false ;
46488: LD_ADDR_EXP 47
46492: PUSH
46493: LD_INT 0
46495: ST_TO_ADDR
// mc_bases := [ ] ;
46496: LD_ADDR_EXP 48
46500: PUSH
46501: EMPTY
46502: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
46503: LD_ADDR_EXP 49
46507: PUSH
46508: EMPTY
46509: ST_TO_ADDR
// mc_building_repairs := [ ] ;
46510: LD_ADDR_EXP 50
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// mc_need_heal := [ ] ;
46517: LD_ADDR_EXP 51
46521: PUSH
46522: EMPTY
46523: ST_TO_ADDR
// mc_healers := [ ] ;
46524: LD_ADDR_EXP 52
46528: PUSH
46529: EMPTY
46530: ST_TO_ADDR
// mc_build_list := [ ] ;
46531: LD_ADDR_EXP 53
46535: PUSH
46536: EMPTY
46537: ST_TO_ADDR
// mc_builders := [ ] ;
46538: LD_ADDR_EXP 54
46542: PUSH
46543: EMPTY
46544: ST_TO_ADDR
// mc_construct_list := [ ] ;
46545: LD_ADDR_EXP 55
46549: PUSH
46550: EMPTY
46551: ST_TO_ADDR
// mc_turret_list := [ ] ;
46552: LD_ADDR_EXP 56
46556: PUSH
46557: EMPTY
46558: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
46559: LD_ADDR_EXP 57
46563: PUSH
46564: EMPTY
46565: ST_TO_ADDR
// mc_miners := [ ] ;
46566: LD_ADDR_EXP 59
46570: PUSH
46571: EMPTY
46572: ST_TO_ADDR
// mc_mines := [ ] ;
46573: LD_ADDR_EXP 58
46577: PUSH
46578: EMPTY
46579: ST_TO_ADDR
// mc_minefields := [ ] ;
46580: LD_ADDR_EXP 60
46584: PUSH
46585: EMPTY
46586: ST_TO_ADDR
// mc_crates := [ ] ;
46587: LD_ADDR_EXP 61
46591: PUSH
46592: EMPTY
46593: ST_TO_ADDR
// mc_crates_collector := [ ] ;
46594: LD_ADDR_EXP 62
46598: PUSH
46599: EMPTY
46600: ST_TO_ADDR
// mc_vehicles := [ ] ;
46601: LD_ADDR_EXP 63
46605: PUSH
46606: EMPTY
46607: ST_TO_ADDR
// mc_attack := [ ] ;
46608: LD_ADDR_EXP 64
46612: PUSH
46613: EMPTY
46614: ST_TO_ADDR
// mc_produce := [ ] ;
46615: LD_ADDR_EXP 65
46619: PUSH
46620: EMPTY
46621: ST_TO_ADDR
// mc_defender := [ ] ;
46622: LD_ADDR_EXP 66
46626: PUSH
46627: EMPTY
46628: ST_TO_ADDR
// mc_parking := [ ] ;
46629: LD_ADDR_EXP 68
46633: PUSH
46634: EMPTY
46635: ST_TO_ADDR
// mc_scan := [ ] ;
46636: LD_ADDR_EXP 67
46640: PUSH
46641: EMPTY
46642: ST_TO_ADDR
// end ;
46643: LD_VAR 0 1
46647: RET
// export function RunMacro ; var i ; begin
46648: LD_INT 0
46650: PPUSH
46651: PPUSH
// for i = 1 to mc_bases do
46652: LD_ADDR_VAR 0 2
46656: PUSH
46657: DOUBLE
46658: LD_INT 1
46660: DEC
46661: ST_TO_ADDR
46662: LD_EXP 48
46666: PUSH
46667: FOR_TO
46668: IFFALSE 47156
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
46670: LD_ADDR_EXP 49
46674: PUSH
46675: LD_EXP 49
46679: PPUSH
46680: LD_VAR 0 2
46684: PPUSH
46685: EMPTY
46686: PPUSH
46687: CALL_OW 1
46691: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46692: LD_ADDR_EXP 50
46696: PUSH
46697: LD_EXP 50
46701: PPUSH
46702: LD_VAR 0 2
46706: PPUSH
46707: EMPTY
46708: PPUSH
46709: CALL_OW 1
46713: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
46714: LD_ADDR_EXP 51
46718: PUSH
46719: LD_EXP 51
46723: PPUSH
46724: LD_VAR 0 2
46728: PPUSH
46729: EMPTY
46730: PPUSH
46731: CALL_OW 1
46735: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
46736: LD_ADDR_EXP 52
46740: PUSH
46741: LD_EXP 52
46745: PPUSH
46746: LD_VAR 0 2
46750: PPUSH
46751: EMPTY
46752: PUSH
46753: EMPTY
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PPUSH
46759: CALL_OW 1
46763: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
46764: LD_ADDR_EXP 53
46768: PUSH
46769: LD_EXP 53
46773: PPUSH
46774: LD_VAR 0 2
46778: PPUSH
46779: EMPTY
46780: PPUSH
46781: CALL_OW 1
46785: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
46786: LD_ADDR_EXP 55
46790: PUSH
46791: LD_EXP 55
46795: PPUSH
46796: LD_VAR 0 2
46800: PPUSH
46801: EMPTY
46802: PPUSH
46803: CALL_OW 1
46807: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
46808: LD_ADDR_EXP 56
46812: PUSH
46813: LD_EXP 56
46817: PPUSH
46818: LD_VAR 0 2
46822: PPUSH
46823: EMPTY
46824: PPUSH
46825: CALL_OW 1
46829: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
46830: LD_ADDR_EXP 57
46834: PUSH
46835: LD_EXP 57
46839: PPUSH
46840: LD_VAR 0 2
46844: PPUSH
46845: EMPTY
46846: PPUSH
46847: CALL_OW 1
46851: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
46852: LD_ADDR_EXP 57
46856: PUSH
46857: LD_EXP 57
46861: PPUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PPUSH
46874: EMPTY
46875: PPUSH
46876: CALL 3237 0 3
46880: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
46881: LD_ADDR_EXP 57
46885: PUSH
46886: LD_EXP 57
46890: PPUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PPUSH
46903: EMPTY
46904: PPUSH
46905: CALL 3237 0 3
46909: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
46910: LD_ADDR_EXP 59
46914: PUSH
46915: LD_EXP 59
46919: PPUSH
46920: LD_VAR 0 2
46924: PPUSH
46925: EMPTY
46926: PPUSH
46927: CALL_OW 1
46931: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
46932: LD_ADDR_EXP 58
46936: PUSH
46937: LD_EXP 58
46941: PPUSH
46942: LD_VAR 0 2
46946: PPUSH
46947: EMPTY
46948: PPUSH
46949: CALL_OW 1
46953: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
46954: LD_ADDR_EXP 60
46958: PUSH
46959: LD_EXP 60
46963: PPUSH
46964: LD_VAR 0 2
46968: PPUSH
46969: EMPTY
46970: PPUSH
46971: CALL_OW 1
46975: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
46976: LD_ADDR_EXP 61
46980: PUSH
46981: LD_EXP 61
46985: PPUSH
46986: LD_VAR 0 2
46990: PPUSH
46991: EMPTY
46992: PPUSH
46993: CALL_OW 1
46997: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
46998: LD_ADDR_EXP 62
47002: PUSH
47003: LD_EXP 62
47007: PPUSH
47008: LD_VAR 0 2
47012: PPUSH
47013: EMPTY
47014: PPUSH
47015: CALL_OW 1
47019: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
47020: LD_ADDR_EXP 63
47024: PUSH
47025: LD_EXP 63
47029: PPUSH
47030: LD_VAR 0 2
47034: PPUSH
47035: EMPTY
47036: PPUSH
47037: CALL_OW 1
47041: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
47042: LD_ADDR_EXP 64
47046: PUSH
47047: LD_EXP 64
47051: PPUSH
47052: LD_VAR 0 2
47056: PPUSH
47057: EMPTY
47058: PPUSH
47059: CALL_OW 1
47063: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
47064: LD_ADDR_EXP 65
47068: PUSH
47069: LD_EXP 65
47073: PPUSH
47074: LD_VAR 0 2
47078: PPUSH
47079: EMPTY
47080: PPUSH
47081: CALL_OW 1
47085: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
47086: LD_ADDR_EXP 66
47090: PUSH
47091: LD_EXP 66
47095: PPUSH
47096: LD_VAR 0 2
47100: PPUSH
47101: EMPTY
47102: PPUSH
47103: CALL_OW 1
47107: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
47108: LD_ADDR_EXP 68
47112: PUSH
47113: LD_EXP 68
47117: PPUSH
47118: LD_VAR 0 2
47122: PPUSH
47123: LD_INT 0
47125: PPUSH
47126: CALL_OW 1
47130: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
47131: LD_ADDR_EXP 67
47135: PUSH
47136: LD_EXP 67
47140: PPUSH
47141: LD_VAR 0 2
47145: PPUSH
47146: LD_INT 0
47148: PPUSH
47149: CALL_OW 1
47153: ST_TO_ADDR
// end ;
47154: GO 46667
47156: POP
47157: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
47158: LD_INT 1
47160: PPUSH
47161: LD_INT 8
47163: PUSH
47164: LD_INT 10
47166: PUSH
47167: LD_INT 12
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: PUSH
47175: LD_OWVAR 67
47179: ARRAY
47180: PPUSH
47181: LD_INT 3
47183: PPUSH
47184: CALL 54823 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
47188: LD_INT 2
47190: PPUSH
47191: LD_INT 6
47193: PUSH
47194: LD_INT 8
47196: PUSH
47197: LD_INT 9
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: LIST
47204: PUSH
47205: LD_OWVAR 67
47209: ARRAY
47210: PPUSH
47211: LD_INT 2
47213: PPUSH
47214: CALL 54823 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
47218: LD_INT 3
47220: PPUSH
47221: LD_INT 6
47223: PUSH
47224: LD_INT 7
47226: PUSH
47227: LD_INT 9
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: PUSH
47235: LD_OWVAR 67
47239: ARRAY
47240: PPUSH
47241: LD_INT 1
47243: PPUSH
47244: CALL 54823 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
47248: LD_ADDR_EXP 68
47252: PUSH
47253: LD_INT 20
47255: PUSH
47256: LD_INT 21
47258: PUSH
47259: LD_INT 22
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: LIST
47266: ST_TO_ADDR
// for i = 1 to mc_bases do
47267: LD_ADDR_VAR 0 2
47271: PUSH
47272: DOUBLE
47273: LD_INT 1
47275: DEC
47276: ST_TO_ADDR
47277: LD_EXP 48
47281: PUSH
47282: FOR_TO
47283: IFFALSE 47307
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
47285: LD_VAR 0 2
47289: PPUSH
47290: LD_EXP 42
47294: PUSH
47295: LD_VAR 0 2
47299: ARRAY
47300: PPUSH
47301: CALL 55081 0 2
47305: GO 47282
47307: POP
47308: POP
// skirmish := true ;
47309: LD_ADDR_EXP 47
47313: PUSH
47314: LD_INT 1
47316: ST_TO_ADDR
// end ;
47317: LD_VAR 0 1
47321: RET
// every 0 0$01 trigger skirmish do
47322: LD_EXP 47
47326: IFFALSE 47410
47328: GO 47330
47330: DISABLE
// begin enable ;
47331: ENABLE
// MC_CheckBuildings ( ) ;
47332: CALL 47771 0 0
// MC_CheckPeopleLife ( ) ;
47336: CALL 47989 0 0
// RaiseSailEvent ( 103 ) ;
47340: LD_INT 103
47342: PPUSH
47343: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
47347: LD_INT 104
47349: PPUSH
47350: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
47354: LD_INT 105
47356: PPUSH
47357: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
47361: LD_INT 106
47363: PPUSH
47364: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
47368: LD_INT 107
47370: PPUSH
47371: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
47375: LD_INT 108
47377: PPUSH
47378: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
47382: LD_INT 109
47384: PPUSH
47385: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
47389: LD_INT 110
47391: PPUSH
47392: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
47396: LD_INT 111
47398: PPUSH
47399: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
47403: LD_INT 200
47405: PPUSH
47406: CALL_OW 427
// end ;
47410: END
// every 10 trigger skirmish do var i ;
47411: LD_EXP 47
47415: IFFALSE 47514
47417: GO 47419
47419: DISABLE
47420: LD_INT 0
47422: PPUSH
// begin enable ;
47423: ENABLE
// if not mc_bases then
47424: LD_EXP 48
47428: NOT
47429: IFFALSE 47433
// exit ;
47431: GO 47514
// for i = 1 to mc_bases do
47433: LD_ADDR_VAR 0 1
47437: PUSH
47438: DOUBLE
47439: LD_INT 1
47441: DEC
47442: ST_TO_ADDR
47443: LD_EXP 48
47447: PUSH
47448: FOR_TO
47449: IFFALSE 47512
// if mc_mines [ i ] and mc_miners [ i ] then
47451: LD_EXP 58
47455: PUSH
47456: LD_VAR 0 1
47460: ARRAY
47461: PUSH
47462: LD_EXP 59
47466: PUSH
47467: LD_VAR 0 1
47471: ARRAY
47472: AND
47473: IFFALSE 47510
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
47475: LD_EXP 59
47479: PUSH
47480: LD_VAR 0 1
47484: ARRAY
47485: PUSH
47486: LD_INT 1
47488: ARRAY
47489: PPUSH
47490: CALL_OW 255
47494: PPUSH
47495: LD_EXP 58
47499: PUSH
47500: LD_VAR 0 1
47504: ARRAY
47505: PPUSH
47506: CALL 33658 0 2
47510: GO 47448
47512: POP
47513: POP
// end ;
47514: PPOPN 1
47516: END
// on SailEvent ( event ) do begin if event = 101 then
47517: LD_VAR 0 1
47521: PUSH
47522: LD_INT 101
47524: EQUAL
47525: IFFALSE 47531
// MC_RepairBuildings ( ) ;
47527: CALL 48535 0 0
// if event = 102 then
47531: LD_VAR 0 1
47535: PUSH
47536: LD_INT 102
47538: EQUAL
47539: IFFALSE 47545
// MC_Heal ( ) ;
47541: CALL 48929 0 0
// if event = 103 then
47545: LD_VAR 0 1
47549: PUSH
47550: LD_INT 103
47552: EQUAL
47553: IFFALSE 47559
// MC_Build ( ) ;
47555: CALL 49314 0 0
// if event = 104 then
47559: LD_VAR 0 1
47563: PUSH
47564: LD_INT 104
47566: EQUAL
47567: IFFALSE 47573
// MC_TurretWeapon ( ) ;
47569: CALL 50082 0 0
// if event = 105 then
47573: LD_VAR 0 1
47577: PUSH
47578: LD_INT 105
47580: EQUAL
47581: IFFALSE 47587
// MC_TurretCrew ( ) ;
47583: CALL 50401 0 0
// if event = 106 then
47587: LD_VAR 0 1
47591: PUSH
47592: LD_INT 106
47594: EQUAL
47595: IFFALSE 47601
// MC_PlantMines ( ) ;
47597: CALL 51194 0 0
// if event = 107 then
47601: LD_VAR 0 1
47605: PUSH
47606: LD_INT 107
47608: EQUAL
47609: IFFALSE 47615
// MC_CollectCrates ( ) ;
47611: CALL 52177 0 0
// if event = 108 then
47615: LD_VAR 0 1
47619: PUSH
47620: LD_INT 108
47622: EQUAL
47623: IFFALSE 47629
// MC_LinkRemoteControl ( ) ;
47625: CALL 52974 0 0
// if event = 109 then
47629: LD_VAR 0 1
47633: PUSH
47634: LD_INT 109
47636: EQUAL
47637: IFFALSE 47643
// MC_ProduceVehicle ( ) ;
47639: CALL 53143 0 0
// if event = 110 then
47643: LD_VAR 0 1
47647: PUSH
47648: LD_INT 110
47650: EQUAL
47651: IFFALSE 47657
// MC_SendAttack ( ) ;
47653: CALL 53531 0 0
// if event = 111 then
47657: LD_VAR 0 1
47661: PUSH
47662: LD_INT 111
47664: EQUAL
47665: IFFALSE 47671
// MC_Defend ( ) ;
47667: CALL 53639 0 0
// if event = 200 then
47671: LD_VAR 0 1
47675: PUSH
47676: LD_INT 200
47678: EQUAL
47679: IFFALSE 47685
// MC_Idle ( ) ;
47681: CALL 54574 0 0
// end ;
47685: PPOPN 1
47687: END
// export function MC_Reset ( base , tag ) ; var i ; begin
47688: LD_INT 0
47690: PPUSH
47691: PPUSH
// if not mc_bases [ base ] or not tag then
47692: LD_EXP 48
47696: PUSH
47697: LD_VAR 0 1
47701: ARRAY
47702: NOT
47703: PUSH
47704: LD_VAR 0 2
47708: NOT
47709: OR
47710: IFFALSE 47714
// exit ;
47712: GO 47766
// for i in mc_bases [ base ] do
47714: LD_ADDR_VAR 0 4
47718: PUSH
47719: LD_EXP 48
47723: PUSH
47724: LD_VAR 0 1
47728: ARRAY
47729: PUSH
47730: FOR_IN
47731: IFFALSE 47764
// if GetTag ( i ) = tag then
47733: LD_VAR 0 4
47737: PPUSH
47738: CALL_OW 110
47742: PUSH
47743: LD_VAR 0 2
47747: EQUAL
47748: IFFALSE 47762
// SetTag ( i , 0 ) ;
47750: LD_VAR 0 4
47754: PPUSH
47755: LD_INT 0
47757: PPUSH
47758: CALL_OW 109
47762: GO 47730
47764: POP
47765: POP
// end ;
47766: LD_VAR 0 3
47770: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
47771: LD_INT 0
47773: PPUSH
47774: PPUSH
47775: PPUSH
47776: PPUSH
// if not mc_bases then
47777: LD_EXP 48
47781: NOT
47782: IFFALSE 47786
// exit ;
47784: GO 47984
// for i = 1 to mc_bases do
47786: LD_ADDR_VAR 0 2
47790: PUSH
47791: DOUBLE
47792: LD_INT 1
47794: DEC
47795: ST_TO_ADDR
47796: LD_EXP 48
47800: PUSH
47801: FOR_TO
47802: IFFALSE 47969
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
47804: LD_ADDR_VAR 0 4
47808: PUSH
47809: LD_EXP 48
47813: PUSH
47814: LD_VAR 0 2
47818: ARRAY
47819: PPUSH
47820: LD_INT 21
47822: PUSH
47823: LD_INT 3
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: PUSH
47833: LD_INT 24
47835: PUSH
47836: LD_INT 1000
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PPUSH
47851: CALL_OW 72
47855: ST_TO_ADDR
// if not tmp then
47856: LD_VAR 0 4
47860: NOT
47861: IFFALSE 47887
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
47863: LD_ADDR_EXP 49
47867: PUSH
47868: LD_EXP 49
47872: PPUSH
47873: LD_VAR 0 2
47877: PPUSH
47878: EMPTY
47879: PPUSH
47880: CALL_OW 1
47884: ST_TO_ADDR
// continue ;
47885: GO 47801
// end ; for j in tmp do
47887: LD_ADDR_VAR 0 3
47891: PUSH
47892: LD_VAR 0 4
47896: PUSH
47897: FOR_IN
47898: IFFALSE 47965
// if not j in mc_building_need_repair [ i ] then
47900: LD_VAR 0 3
47904: PUSH
47905: LD_EXP 49
47909: PUSH
47910: LD_VAR 0 2
47914: ARRAY
47915: IN
47916: NOT
47917: IFFALSE 47963
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
47919: LD_ADDR_EXP 49
47923: PUSH
47924: LD_EXP 49
47928: PPUSH
47929: LD_VAR 0 2
47933: PUSH
47934: LD_EXP 49
47938: PUSH
47939: LD_VAR 0 2
47943: ARRAY
47944: PUSH
47945: LD_INT 1
47947: PLUS
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PPUSH
47953: LD_VAR 0 3
47957: PPUSH
47958: CALL 3237 0 3
47962: ST_TO_ADDR
47963: GO 47897
47965: POP
47966: POP
// end ;
47967: GO 47801
47969: POP
47970: POP
// if mc_building_need_repair then
47971: LD_EXP 49
47975: IFFALSE 47984
// RaiseSailEvent ( 101 ) ;
47977: LD_INT 101
47979: PPUSH
47980: CALL_OW 427
// end ;
47984: LD_VAR 0 1
47988: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
47989: LD_INT 0
47991: PPUSH
47992: PPUSH
47993: PPUSH
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
// if not mc_bases then
47998: LD_EXP 48
48002: NOT
48003: IFFALSE 48007
// exit ;
48005: GO 48530
// for i = 1 to mc_bases do
48007: LD_ADDR_VAR 0 2
48011: PUSH
48012: DOUBLE
48013: LD_INT 1
48015: DEC
48016: ST_TO_ADDR
48017: LD_EXP 48
48021: PUSH
48022: FOR_TO
48023: IFFALSE 48521
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
48025: LD_ADDR_VAR 0 5
48029: PUSH
48030: LD_EXP 48
48034: PUSH
48035: LD_VAR 0 2
48039: ARRAY
48040: PPUSH
48041: LD_INT 21
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: LD_INT 3
48056: PUSH
48057: LD_INT 54
48059: PUSH
48060: EMPTY
48061: LIST
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: PUSH
48070: LD_INT 24
48072: PUSH
48073: LD_INT 700
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PPUSH
48093: CALL_OW 72
48097: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
48098: LD_ADDR_VAR 0 6
48102: PUSH
48103: LD_EXP 48
48107: PUSH
48108: LD_VAR 0 2
48112: ARRAY
48113: PPUSH
48114: LD_INT 21
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: LD_INT 54
48132: PUSH
48133: EMPTY
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: PUSH
48143: LD_INT 24
48145: PUSH
48146: LD_INT 250
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PPUSH
48166: CALL_OW 72
48170: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
48171: LD_ADDR_VAR 0 7
48175: PUSH
48176: LD_VAR 0 5
48180: PUSH
48181: LD_VAR 0 6
48185: DIFF
48186: ST_TO_ADDR
// if not need_heal_1 then
48187: LD_VAR 0 6
48191: NOT
48192: IFFALSE 48225
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
48194: LD_ADDR_EXP 51
48198: PUSH
48199: LD_EXP 51
48203: PPUSH
48204: LD_VAR 0 2
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PPUSH
48216: EMPTY
48217: PPUSH
48218: CALL 3237 0 3
48222: ST_TO_ADDR
48223: GO 48257
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
48225: LD_ADDR_EXP 51
48229: PUSH
48230: LD_EXP 51
48234: PPUSH
48235: LD_VAR 0 2
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PPUSH
48247: LD_VAR 0 6
48251: PPUSH
48252: CALL 3237 0 3
48256: ST_TO_ADDR
// if not need_heal_2 then
48257: LD_VAR 0 7
48261: NOT
48262: IFFALSE 48295
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
48264: LD_ADDR_EXP 51
48268: PUSH
48269: LD_EXP 51
48273: PPUSH
48274: LD_VAR 0 2
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PPUSH
48286: EMPTY
48287: PPUSH
48288: CALL 3237 0 3
48292: ST_TO_ADDR
48293: GO 48327
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
48295: LD_ADDR_EXP 51
48299: PUSH
48300: LD_EXP 51
48304: PPUSH
48305: LD_VAR 0 2
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PPUSH
48317: LD_VAR 0 7
48321: PPUSH
48322: CALL 3237 0 3
48326: ST_TO_ADDR
// if need_heal_2 then
48327: LD_VAR 0 7
48331: IFFALSE 48503
// for j in need_heal_2 do
48333: LD_ADDR_VAR 0 3
48337: PUSH
48338: LD_VAR 0 7
48342: PUSH
48343: FOR_IN
48344: IFFALSE 48501
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
48346: LD_ADDR_VAR 0 5
48350: PUSH
48351: LD_EXP 48
48355: PUSH
48356: LD_VAR 0 2
48360: ARRAY
48361: PPUSH
48362: LD_INT 2
48364: PUSH
48365: LD_INT 30
48367: PUSH
48368: LD_INT 6
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 30
48377: PUSH
48378: LD_INT 7
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 30
48387: PUSH
48388: LD_INT 8
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 30
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 30
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 25
48417: PUSH
48418: LD_INT 4
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: PPUSH
48434: CALL_OW 72
48438: ST_TO_ADDR
// if tmp then
48439: LD_VAR 0 5
48443: IFFALSE 48499
// begin k := NearestUnitToUnit ( tmp , j ) ;
48445: LD_ADDR_VAR 0 4
48449: PUSH
48450: LD_VAR 0 5
48454: PPUSH
48455: LD_VAR 0 3
48459: PPUSH
48460: CALL_OW 74
48464: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
48465: LD_VAR 0 3
48469: PPUSH
48470: LD_VAR 0 4
48474: PPUSH
48475: CALL_OW 296
48479: PUSH
48480: LD_INT 7
48482: GREATER
48483: IFFALSE 48499
// ComMoveUnit ( j , k ) ;
48485: LD_VAR 0 3
48489: PPUSH
48490: LD_VAR 0 4
48494: PPUSH
48495: CALL_OW 112
// end ; end ;
48499: GO 48343
48501: POP
48502: POP
// if not need_heal_1 and not need_heal_2 then
48503: LD_VAR 0 6
48507: NOT
48508: PUSH
48509: LD_VAR 0 7
48513: NOT
48514: AND
48515: IFFALSE 48519
// continue ;
48517: GO 48022
// end ;
48519: GO 48022
48521: POP
48522: POP
// RaiseSailEvent ( 102 ) ;
48523: LD_INT 102
48525: PPUSH
48526: CALL_OW 427
// end ;
48530: LD_VAR 0 1
48534: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
48535: LD_INT 0
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
// if not mc_bases then
48542: LD_EXP 48
48546: NOT
48547: IFFALSE 48551
// exit ;
48549: GO 48924
// for i = 1 to mc_bases do
48551: LD_ADDR_VAR 0 2
48555: PUSH
48556: DOUBLE
48557: LD_INT 1
48559: DEC
48560: ST_TO_ADDR
48561: LD_EXP 48
48565: PUSH
48566: FOR_TO
48567: IFFALSE 48922
// begin if not mc_building_need_repair [ i ] then
48569: LD_EXP 49
48573: PUSH
48574: LD_VAR 0 2
48578: ARRAY
48579: NOT
48580: IFFALSE 48618
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
48582: LD_ADDR_EXP 50
48586: PUSH
48587: LD_EXP 50
48591: PPUSH
48592: LD_VAR 0 2
48596: PPUSH
48597: EMPTY
48598: PPUSH
48599: CALL_OW 1
48603: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
48604: LD_VAR 0 2
48608: PPUSH
48609: LD_INT 101
48611: PPUSH
48612: CALL 47688 0 2
// continue ;
48616: GO 48566
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
48618: LD_ADDR_EXP 54
48622: PUSH
48623: LD_EXP 54
48627: PPUSH
48628: LD_VAR 0 2
48632: PPUSH
48633: EMPTY
48634: PPUSH
48635: CALL_OW 1
48639: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
48640: LD_VAR 0 2
48644: PPUSH
48645: LD_INT 103
48647: PPUSH
48648: CALL 47688 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
48652: LD_ADDR_VAR 0 5
48656: PUSH
48657: LD_EXP 48
48661: PUSH
48662: LD_VAR 0 2
48666: ARRAY
48667: PPUSH
48668: LD_INT 2
48670: PUSH
48671: LD_INT 25
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 25
48683: PUSH
48684: LD_INT 16
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: PPUSH
48699: CALL_OW 72
48703: ST_TO_ADDR
// if not tmp then
48704: LD_VAR 0 5
48708: NOT
48709: IFFALSE 48713
// continue ;
48711: GO 48566
// for j in tmp do
48713: LD_ADDR_VAR 0 3
48717: PUSH
48718: LD_VAR 0 5
48722: PUSH
48723: FOR_IN
48724: IFFALSE 48918
// begin if mc_need_heal [ i ] then
48726: LD_EXP 51
48730: PUSH
48731: LD_VAR 0 2
48735: ARRAY
48736: IFFALSE 48784
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
48738: LD_VAR 0 3
48742: PUSH
48743: LD_EXP 51
48747: PUSH
48748: LD_VAR 0 2
48752: ARRAY
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: IN
48758: PUSH
48759: LD_VAR 0 3
48763: PUSH
48764: LD_EXP 51
48768: PUSH
48769: LD_VAR 0 2
48773: ARRAY
48774: PUSH
48775: LD_INT 2
48777: ARRAY
48778: IN
48779: OR
48780: IFFALSE 48784
// continue ;
48782: GO 48723
// if IsInUnit ( j ) then
48784: LD_VAR 0 3
48788: PPUSH
48789: CALL_OW 310
48793: IFFALSE 48804
// ComExitBuilding ( j ) ;
48795: LD_VAR 0 3
48799: PPUSH
48800: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
48804: LD_VAR 0 3
48808: PUSH
48809: LD_EXP 50
48813: PUSH
48814: LD_VAR 0 2
48818: ARRAY
48819: IN
48820: NOT
48821: IFFALSE 48879
// begin SetTag ( j , 101 ) ;
48823: LD_VAR 0 3
48827: PPUSH
48828: LD_INT 101
48830: PPUSH
48831: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
48835: LD_ADDR_EXP 50
48839: PUSH
48840: LD_EXP 50
48844: PPUSH
48845: LD_VAR 0 2
48849: PUSH
48850: LD_EXP 50
48854: PUSH
48855: LD_VAR 0 2
48859: ARRAY
48860: PUSH
48861: LD_INT 1
48863: PLUS
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PPUSH
48869: LD_VAR 0 3
48873: PPUSH
48874: CALL 3237 0 3
48878: ST_TO_ADDR
// end ; Wait ( 3 ) ;
48879: LD_INT 3
48881: PPUSH
48882: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
48886: LD_VAR 0 3
48890: PPUSH
48891: LD_EXP 49
48895: PUSH
48896: LD_VAR 0 2
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 3
48906: PPUSH
48907: CALL_OW 74
48911: PPUSH
48912: CALL_OW 130
// end ;
48916: GO 48723
48918: POP
48919: POP
// end ;
48920: GO 48566
48922: POP
48923: POP
// end ;
48924: LD_VAR 0 1
48928: RET
// export function MC_Heal ; var i , j , tmp ; begin
48929: LD_INT 0
48931: PPUSH
48932: PPUSH
48933: PPUSH
48934: PPUSH
// if not mc_bases then
48935: LD_EXP 48
48939: NOT
48940: IFFALSE 48944
// exit ;
48942: GO 49309
// for i = 1 to mc_bases do
48944: LD_ADDR_VAR 0 2
48948: PUSH
48949: DOUBLE
48950: LD_INT 1
48952: DEC
48953: ST_TO_ADDR
48954: LD_EXP 48
48958: PUSH
48959: FOR_TO
48960: IFFALSE 49307
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
48962: LD_EXP 51
48966: PUSH
48967: LD_VAR 0 2
48971: ARRAY
48972: PUSH
48973: LD_INT 1
48975: ARRAY
48976: NOT
48977: PUSH
48978: LD_EXP 51
48982: PUSH
48983: LD_VAR 0 2
48987: ARRAY
48988: PUSH
48989: LD_INT 2
48991: ARRAY
48992: NOT
48993: AND
48994: IFFALSE 49032
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
48996: LD_ADDR_EXP 52
49000: PUSH
49001: LD_EXP 52
49005: PPUSH
49006: LD_VAR 0 2
49010: PPUSH
49011: EMPTY
49012: PPUSH
49013: CALL_OW 1
49017: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
49018: LD_VAR 0 2
49022: PPUSH
49023: LD_INT 102
49025: PPUSH
49026: CALL 47688 0 2
// continue ;
49030: GO 48959
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
49032: LD_ADDR_VAR 0 4
49036: PUSH
49037: LD_EXP 48
49041: PUSH
49042: LD_VAR 0 2
49046: ARRAY
49047: PPUSH
49048: LD_INT 25
49050: PUSH
49051: LD_INT 4
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PPUSH
49058: CALL_OW 72
49062: ST_TO_ADDR
// if not tmp then
49063: LD_VAR 0 4
49067: NOT
49068: IFFALSE 49072
// continue ;
49070: GO 48959
// for j in tmp do
49072: LD_ADDR_VAR 0 3
49076: PUSH
49077: LD_VAR 0 4
49081: PUSH
49082: FOR_IN
49083: IFFALSE 49303
// begin if IsInUnit ( j ) then
49085: LD_VAR 0 3
49089: PPUSH
49090: CALL_OW 310
49094: IFFALSE 49105
// ComExitBuilding ( j ) ;
49096: LD_VAR 0 3
49100: PPUSH
49101: CALL_OW 122
// if not j in mc_healers [ i ] then
49105: LD_VAR 0 3
49109: PUSH
49110: LD_EXP 52
49114: PUSH
49115: LD_VAR 0 2
49119: ARRAY
49120: IN
49121: NOT
49122: IFFALSE 49168
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
49124: LD_ADDR_EXP 52
49128: PUSH
49129: LD_EXP 52
49133: PPUSH
49134: LD_VAR 0 2
49138: PUSH
49139: LD_EXP 52
49143: PUSH
49144: LD_VAR 0 2
49148: ARRAY
49149: PUSH
49150: LD_INT 1
49152: PLUS
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PPUSH
49158: LD_VAR 0 3
49162: PPUSH
49163: CALL 3237 0 3
49167: ST_TO_ADDR
// if not GetTag ( j ) then
49168: LD_VAR 0 3
49172: PPUSH
49173: CALL_OW 110
49177: NOT
49178: IFFALSE 49192
// SetTag ( j , 102 ) ;
49180: LD_VAR 0 3
49184: PPUSH
49185: LD_INT 102
49187: PPUSH
49188: CALL_OW 109
// Wait ( 3 ) ;
49192: LD_INT 3
49194: PPUSH
49195: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
49199: LD_EXP 51
49203: PUSH
49204: LD_VAR 0 2
49208: ARRAY
49209: PUSH
49210: LD_INT 1
49212: ARRAY
49213: IFFALSE 49245
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
49215: LD_VAR 0 3
49219: PPUSH
49220: LD_EXP 51
49224: PUSH
49225: LD_VAR 0 2
49229: ARRAY
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: PPUSH
49239: CALL_OW 128
49243: GO 49301
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
49245: LD_VAR 0 3
49249: PPUSH
49250: CALL_OW 314
49254: NOT
49255: PUSH
49256: LD_EXP 51
49260: PUSH
49261: LD_VAR 0 2
49265: ARRAY
49266: PUSH
49267: LD_INT 2
49269: ARRAY
49270: AND
49271: IFFALSE 49301
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
49273: LD_VAR 0 3
49277: PPUSH
49278: LD_EXP 51
49282: PUSH
49283: LD_VAR 0 2
49287: ARRAY
49288: PUSH
49289: LD_INT 2
49291: ARRAY
49292: PUSH
49293: LD_INT 1
49295: ARRAY
49296: PPUSH
49297: CALL_OW 128
// end ;
49301: GO 49082
49303: POP
49304: POP
// end ;
49305: GO 48959
49307: POP
49308: POP
// end ;
49309: LD_VAR 0 1
49313: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
49314: LD_INT 0
49316: PPUSH
49317: PPUSH
49318: PPUSH
49319: PPUSH
// if not mc_bases then
49320: LD_EXP 48
49324: NOT
49325: IFFALSE 49329
// exit ;
49327: GO 50077
// for i = 1 to mc_bases do
49329: LD_ADDR_VAR 0 2
49333: PUSH
49334: DOUBLE
49335: LD_INT 1
49337: DEC
49338: ST_TO_ADDR
49339: LD_EXP 48
49343: PUSH
49344: FOR_TO
49345: IFFALSE 50075
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
49347: LD_EXP 53
49351: PUSH
49352: LD_VAR 0 2
49356: ARRAY
49357: NOT
49358: PUSH
49359: LD_EXP 55
49363: PUSH
49364: LD_VAR 0 2
49368: ARRAY
49369: NOT
49370: AND
49371: IFFALSE 49409
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
49373: LD_ADDR_EXP 54
49377: PUSH
49378: LD_EXP 54
49382: PPUSH
49383: LD_VAR 0 2
49387: PPUSH
49388: EMPTY
49389: PPUSH
49390: CALL_OW 1
49394: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
49395: LD_VAR 0 2
49399: PPUSH
49400: LD_INT 103
49402: PPUSH
49403: CALL 47688 0 2
// continue ;
49407: GO 49344
// end ; if mc_construct_list [ i ] then
49409: LD_EXP 55
49413: PUSH
49414: LD_VAR 0 2
49418: ARRAY
49419: IFFALSE 49624
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49421: LD_ADDR_VAR 0 4
49425: PUSH
49426: LD_EXP 48
49430: PUSH
49431: LD_VAR 0 2
49435: ARRAY
49436: PPUSH
49437: LD_INT 25
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PPUSH
49447: CALL_OW 72
49451: PUSH
49452: LD_EXP 50
49456: PUSH
49457: LD_VAR 0 2
49461: ARRAY
49462: DIFF
49463: ST_TO_ADDR
// if not tmp then
49464: LD_VAR 0 4
49468: NOT
49469: IFFALSE 49473
// continue ;
49471: GO 49344
// for j in tmp do
49473: LD_ADDR_VAR 0 3
49477: PUSH
49478: LD_VAR 0 4
49482: PUSH
49483: FOR_IN
49484: IFFALSE 49620
// begin if not mc_builders [ i ] then
49486: LD_EXP 54
49490: PUSH
49491: LD_VAR 0 2
49495: ARRAY
49496: NOT
49497: IFFALSE 49555
// begin SetTag ( j , 103 ) ;
49499: LD_VAR 0 3
49503: PPUSH
49504: LD_INT 103
49506: PPUSH
49507: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49511: LD_ADDR_EXP 54
49515: PUSH
49516: LD_EXP 54
49520: PPUSH
49521: LD_VAR 0 2
49525: PUSH
49526: LD_EXP 54
49530: PUSH
49531: LD_VAR 0 2
49535: ARRAY
49536: PUSH
49537: LD_INT 1
49539: PLUS
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PPUSH
49545: LD_VAR 0 3
49549: PPUSH
49550: CALL 3237 0 3
49554: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49555: LD_VAR 0 3
49559: PPUSH
49560: CALL_OW 310
49564: IFFALSE 49575
// ComExitBuilding ( j ) ;
49566: LD_VAR 0 3
49570: PPUSH
49571: CALL_OW 122
// wait ( 3 ) ;
49575: LD_INT 3
49577: PPUSH
49578: CALL_OW 67
// if not HasTask ( j ) then
49582: LD_VAR 0 3
49586: PPUSH
49587: CALL_OW 314
49591: NOT
49592: IFFALSE 49618
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
49594: LD_VAR 0 3
49598: PPUSH
49599: LD_EXP 55
49603: PUSH
49604: LD_VAR 0 2
49608: ARRAY
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: PPUSH
49614: CALL 5655 0 2
// end ;
49618: GO 49483
49620: POP
49621: POP
// end else
49622: GO 50073
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
49624: LD_EXP 53
49628: PUSH
49629: LD_VAR 0 2
49633: ARRAY
49634: PUSH
49635: LD_EXP 48
49639: PUSH
49640: LD_VAR 0 2
49644: ARRAY
49645: PPUSH
49646: LD_INT 2
49648: PUSH
49649: LD_INT 30
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 30
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: LIST
49673: PPUSH
49674: CALL_OW 72
49678: AND
49679: IFFALSE 50073
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
49681: LD_EXP 48
49685: PUSH
49686: LD_VAR 0 2
49690: ARRAY
49691: PPUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 30
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 30
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: LIST
49719: PPUSH
49720: CALL_OW 72
49724: PUSH
49725: LD_INT 1
49727: ARRAY
49728: PPUSH
49729: LD_EXP 53
49733: PUSH
49734: LD_VAR 0 2
49738: ARRAY
49739: PUSH
49740: LD_INT 1
49742: ARRAY
49743: PUSH
49744: LD_INT 1
49746: ARRAY
49747: PPUSH
49748: LD_EXP 53
49752: PUSH
49753: LD_VAR 0 2
49757: ARRAY
49758: PUSH
49759: LD_INT 1
49761: ARRAY
49762: PUSH
49763: LD_INT 2
49765: ARRAY
49766: PPUSH
49767: LD_EXP 53
49771: PUSH
49772: LD_VAR 0 2
49776: ARRAY
49777: PUSH
49778: LD_INT 1
49780: ARRAY
49781: PUSH
49782: LD_INT 3
49784: ARRAY
49785: PPUSH
49786: LD_EXP 53
49790: PUSH
49791: LD_VAR 0 2
49795: ARRAY
49796: PUSH
49797: LD_INT 1
49799: ARRAY
49800: PUSH
49801: LD_INT 4
49803: ARRAY
49804: PPUSH
49805: CALL 8985 0 5
49809: IFFALSE 50073
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
49811: LD_ADDR_VAR 0 4
49815: PUSH
49816: LD_EXP 48
49820: PUSH
49821: LD_VAR 0 2
49825: ARRAY
49826: PPUSH
49827: LD_INT 25
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PPUSH
49837: CALL_OW 72
49841: PUSH
49842: LD_EXP 50
49846: PUSH
49847: LD_VAR 0 2
49851: ARRAY
49852: DIFF
49853: ST_TO_ADDR
// if not tmp then
49854: LD_VAR 0 4
49858: NOT
49859: IFFALSE 49863
// continue ;
49861: GO 49344
// for j in tmp do
49863: LD_ADDR_VAR 0 3
49867: PUSH
49868: LD_VAR 0 4
49872: PUSH
49873: FOR_IN
49874: IFFALSE 50071
// begin if not mc_builders [ i ] then
49876: LD_EXP 54
49880: PUSH
49881: LD_VAR 0 2
49885: ARRAY
49886: NOT
49887: IFFALSE 49945
// begin SetTag ( j , 103 ) ;
49889: LD_VAR 0 3
49893: PPUSH
49894: LD_INT 103
49896: PPUSH
49897: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
49901: LD_ADDR_EXP 54
49905: PUSH
49906: LD_EXP 54
49910: PPUSH
49911: LD_VAR 0 2
49915: PUSH
49916: LD_EXP 54
49920: PUSH
49921: LD_VAR 0 2
49925: ARRAY
49926: PUSH
49927: LD_INT 1
49929: PLUS
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PPUSH
49935: LD_VAR 0 3
49939: PPUSH
49940: CALL 3237 0 3
49944: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
49945: LD_VAR 0 3
49949: PPUSH
49950: CALL_OW 310
49954: IFFALSE 49965
// ComExitBuilding ( j ) ;
49956: LD_VAR 0 3
49960: PPUSH
49961: CALL_OW 122
// wait ( 3 ) ;
49965: LD_INT 3
49967: PPUSH
49968: CALL_OW 67
// if not HasTask ( j ) then
49972: LD_VAR 0 3
49976: PPUSH
49977: CALL_OW 314
49981: NOT
49982: IFFALSE 50069
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
49984: LD_VAR 0 3
49988: PPUSH
49989: LD_EXP 53
49993: PUSH
49994: LD_VAR 0 2
49998: ARRAY
49999: PUSH
50000: LD_INT 1
50002: ARRAY
50003: PUSH
50004: LD_INT 1
50006: ARRAY
50007: PPUSH
50008: LD_EXP 53
50012: PUSH
50013: LD_VAR 0 2
50017: ARRAY
50018: PUSH
50019: LD_INT 1
50021: ARRAY
50022: PUSH
50023: LD_INT 2
50025: ARRAY
50026: PPUSH
50027: LD_EXP 53
50031: PUSH
50032: LD_VAR 0 2
50036: ARRAY
50037: PUSH
50038: LD_INT 1
50040: ARRAY
50041: PUSH
50042: LD_INT 3
50044: ARRAY
50045: PPUSH
50046: LD_EXP 53
50050: PUSH
50051: LD_VAR 0 2
50055: ARRAY
50056: PUSH
50057: LD_INT 1
50059: ARRAY
50060: PUSH
50061: LD_INT 4
50063: ARRAY
50064: PPUSH
50065: CALL_OW 145
// end ;
50069: GO 49873
50071: POP
50072: POP
// end ; end ;
50073: GO 49344
50075: POP
50076: POP
// end ;
50077: LD_VAR 0 1
50081: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
50082: LD_INT 0
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
// if not mc_bases then
50091: LD_EXP 48
50095: NOT
50096: IFFALSE 50100
// exit ;
50098: GO 50396
// for i = 1 to mc_bases do
50100: LD_ADDR_VAR 0 2
50104: PUSH
50105: DOUBLE
50106: LD_INT 1
50108: DEC
50109: ST_TO_ADDR
50110: LD_EXP 48
50114: PUSH
50115: FOR_TO
50116: IFFALSE 50394
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
50118: LD_EXP 56
50122: PUSH
50123: LD_VAR 0 2
50127: ARRAY
50128: NOT
50129: PUSH
50130: LD_EXP 48
50134: PUSH
50135: LD_VAR 0 2
50139: ARRAY
50140: PPUSH
50141: LD_INT 30
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PPUSH
50151: CALL_OW 72
50155: NOT
50156: OR
50157: IFFALSE 50161
// continue ;
50159: GO 50115
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
50161: LD_EXP 56
50165: PUSH
50166: LD_VAR 0 2
50170: ARRAY
50171: PUSH
50172: LD_INT 1
50174: ARRAY
50175: PPUSH
50176: CALL_OW 269
50180: IFFALSE 50246
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
50182: LD_ADDR_VAR 0 4
50186: PUSH
50187: LD_EXP 56
50191: PUSH
50192: LD_VAR 0 2
50196: ARRAY
50197: PPUSH
50198: LD_INT 1
50200: PPUSH
50201: CALL_OW 3
50205: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
50206: LD_ADDR_EXP 56
50210: PUSH
50211: LD_EXP 56
50215: PPUSH
50216: LD_VAR 0 2
50220: PPUSH
50221: LD_VAR 0 4
50225: PPUSH
50226: CALL_OW 1
50230: ST_TO_ADDR
// if not mc_turret_list [ i ] then
50231: LD_EXP 56
50235: PUSH
50236: LD_VAR 0 2
50240: ARRAY
50241: NOT
50242: IFFALSE 50246
// continue ;
50244: GO 50115
// end ; busy := false ;
50246: LD_ADDR_VAR 0 6
50250: PUSH
50251: LD_INT 0
50253: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
50254: LD_ADDR_VAR 0 4
50258: PUSH
50259: LD_EXP 48
50263: PUSH
50264: LD_VAR 0 2
50268: ARRAY
50269: PPUSH
50270: LD_INT 30
50272: PUSH
50273: LD_INT 3
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PPUSH
50280: CALL_OW 72
50284: ST_TO_ADDR
// for j in tmp do
50285: LD_ADDR_VAR 0 3
50289: PUSH
50290: LD_VAR 0 4
50294: PUSH
50295: FOR_IN
50296: IFFALSE 50324
// if not BuildingStatus ( j ) = bs_idle then
50298: LD_VAR 0 3
50302: PPUSH
50303: CALL_OW 461
50307: PUSH
50308: LD_INT 2
50310: EQUAL
50311: NOT
50312: IFFALSE 50322
// busy := true ;
50314: LD_ADDR_VAR 0 6
50318: PUSH
50319: LD_INT 1
50321: ST_TO_ADDR
50322: GO 50295
50324: POP
50325: POP
// if busy then
50326: LD_VAR 0 6
50330: IFFALSE 50334
// continue ;
50332: GO 50115
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
50334: LD_ADDR_VAR 0 7
50338: PUSH
50339: LD_EXP 56
50343: PUSH
50344: LD_VAR 0 2
50348: ARRAY
50349: PUSH
50350: LD_INT 1
50352: ARRAY
50353: PPUSH
50354: CALL 7390 0 1
50358: ST_TO_ADDR
// if not weapon then
50359: LD_VAR 0 7
50363: NOT
50364: IFFALSE 50368
// continue ;
50366: GO 50115
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
50368: LD_EXP 56
50372: PUSH
50373: LD_VAR 0 2
50377: ARRAY
50378: PUSH
50379: LD_INT 1
50381: ARRAY
50382: PPUSH
50383: LD_VAR 0 7
50387: PPUSH
50388: CALL_OW 148
// end ;
50392: GO 50115
50394: POP
50395: POP
// end ;
50396: LD_VAR 0 1
50400: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
50401: LD_INT 0
50403: PPUSH
50404: PPUSH
50405: PPUSH
50406: PPUSH
50407: PPUSH
50408: PPUSH
50409: PPUSH
// if not mc_bases then
50410: LD_EXP 48
50414: NOT
50415: IFFALSE 50419
// exit ;
50417: GO 51189
// for i = 1 to mc_bases do
50419: LD_ADDR_VAR 0 2
50423: PUSH
50424: DOUBLE
50425: LD_INT 1
50427: DEC
50428: ST_TO_ADDR
50429: LD_EXP 48
50433: PUSH
50434: FOR_TO
50435: IFFALSE 51187
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
50437: LD_ADDR_VAR 0 7
50441: PUSH
50442: LD_EXP 48
50446: PUSH
50447: LD_VAR 0 2
50451: ARRAY
50452: PPUSH
50453: LD_INT 24
50455: PUSH
50456: LD_INT 375
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 30
50468: PUSH
50469: LD_INT 32
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 30
50478: PUSH
50479: LD_INT 31
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 58
50493: PUSH
50494: EMPTY
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: PPUSH
50502: CALL_OW 72
50506: ST_TO_ADDR
// if not x then
50507: LD_VAR 0 7
50511: NOT
50512: IFFALSE 50516
// continue ;
50514: GO 50434
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
50516: LD_ADDR_EXP 57
50520: PUSH
50521: LD_EXP 57
50525: PPUSH
50526: LD_VAR 0 2
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PPUSH
50538: LD_VAR 0 7
50542: PPUSH
50543: CALL 3237 0 3
50547: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] then
50548: LD_EXP 57
50552: PUSH
50553: LD_VAR 0 2
50557: ARRAY
50558: NOT
50559: PUSH
50560: LD_EXP 57
50564: PUSH
50565: LD_VAR 0 2
50569: ARRAY
50570: PUSH
50571: LD_INT 1
50573: ARRAY
50574: NOT
50575: OR
50576: IFFALSE 50580
// continue ;
50578: GO 50434
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
50580: LD_EXP 57
50584: PUSH
50585: LD_VAR 0 2
50589: ARRAY
50590: PUSH
50591: LD_INT 1
50593: ARRAY
50594: PUSH
50595: LD_INT 1
50597: ARRAY
50598: PPUSH
50599: CALL_OW 313
50603: PUSH
50604: LD_INT 0
50606: EQUAL
50607: IFFALSE 51185
// if not mc_empty_turret_list [ i ] [ 2 ] then
50609: LD_EXP 57
50613: PUSH
50614: LD_VAR 0 2
50618: ARRAY
50619: PUSH
50620: LD_INT 2
50622: ARRAY
50623: NOT
50624: IFFALSE 50883
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
50626: LD_ADDR_VAR 0 6
50630: PUSH
50631: LD_EXP 48
50635: PUSH
50636: LD_VAR 0 2
50640: ARRAY
50641: PUSH
50642: LD_EXP 64
50646: PUSH
50647: LD_VAR 0 2
50651: ARRAY
50652: DIFF
50653: PPUSH
50654: LD_INT 25
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 3
50666: PUSH
50667: LD_INT 54
50669: PUSH
50670: EMPTY
50671: LIST
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PPUSH
50681: CALL_OW 72
50685: ST_TO_ADDR
// if tmp2 then
50686: LD_VAR 0 6
50690: IFFALSE 50732
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
50692: LD_ADDR_EXP 57
50696: PUSH
50697: LD_EXP 57
50701: PPUSH
50702: LD_VAR 0 2
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PPUSH
50714: LD_VAR 0 6
50718: PUSH
50719: LD_INT 1
50721: ARRAY
50722: PPUSH
50723: CALL 3237 0 3
50727: ST_TO_ADDR
// break ;
50728: GO 51187
// end else
50730: GO 50881
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
50732: LD_ADDR_VAR 0 5
50736: PUSH
50737: LD_EXP 48
50741: PUSH
50742: LD_VAR 0 2
50746: ARRAY
50747: PPUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 30
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 30
50763: PUSH
50764: LD_INT 5
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: PPUSH
50776: CALL_OW 72
50780: ST_TO_ADDR
// if not tmp then
50781: LD_VAR 0 5
50785: NOT
50786: IFFALSE 50790
// continue ;
50788: GO 50434
// for j in tmp do
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_VAR 0 5
50799: PUSH
50800: FOR_IN
50801: IFFALSE 50879
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
50803: LD_ADDR_VAR 0 4
50807: PUSH
50808: LD_VAR 0 3
50812: PPUSH
50813: CALL_OW 313
50817: PPUSH
50818: LD_INT 25
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PPUSH
50828: CALL_OW 72
50832: ST_TO_ADDR
// if t then
50833: LD_VAR 0 4
50837: IFFALSE 50877
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
50839: LD_ADDR_EXP 57
50843: PUSH
50844: LD_EXP 57
50848: PPUSH
50849: LD_VAR 0 2
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PPUSH
50861: LD_VAR 0 4
50865: PUSH
50866: LD_INT 1
50868: ARRAY
50869: PPUSH
50870: CALL 3237 0 3
50874: ST_TO_ADDR
// break ;
50875: GO 50879
// end ; end ;
50877: GO 50800
50879: POP
50880: POP
// end ; end else
50881: GO 51185
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
50883: LD_EXP 57
50887: PUSH
50888: LD_VAR 0 2
50892: ARRAY
50893: PUSH
50894: LD_INT 2
50896: ARRAY
50897: PUSH
50898: LD_INT 1
50900: ARRAY
50901: PPUSH
50902: CALL_OW 301
50906: IFFALSE 50939
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
50908: LD_ADDR_EXP 57
50912: PUSH
50913: LD_EXP 57
50917: PPUSH
50918: LD_VAR 0 2
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PPUSH
50930: EMPTY
50931: PPUSH
50932: CALL 3237 0 3
50936: ST_TO_ADDR
// break ;
50937: GO 51187
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
50939: LD_EXP 57
50943: PUSH
50944: LD_VAR 0 2
50948: ARRAY
50949: PUSH
50950: LD_INT 2
50952: ARRAY
50953: PUSH
50954: LD_INT 1
50956: ARRAY
50957: PPUSH
50958: CALL_OW 314
50962: NOT
50963: PUSH
50964: LD_EXP 57
50968: PUSH
50969: LD_VAR 0 2
50973: ARRAY
50974: PUSH
50975: LD_INT 2
50977: ARRAY
50978: PUSH
50979: LD_INT 1
50981: ARRAY
50982: PUSH
50983: LD_EXP 57
50987: PUSH
50988: LD_VAR 0 2
50992: ARRAY
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PUSH
50998: LD_INT 1
51000: ARRAY
51001: PPUSH
51002: CALL_OW 313
51006: IN
51007: NOT
51008: AND
51009: IFFALSE 51185
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
51011: LD_EXP 57
51015: PUSH
51016: LD_VAR 0 2
51020: ARRAY
51021: PUSH
51022: LD_INT 2
51024: ARRAY
51025: PUSH
51026: LD_INT 1
51028: ARRAY
51029: PPUSH
51030: CALL_OW 310
51034: IFFALSE 51059
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51036: LD_EXP 57
51040: PUSH
51041: LD_VAR 0 2
51045: ARRAY
51046: PUSH
51047: LD_INT 2
51049: ARRAY
51050: PUSH
51051: LD_INT 1
51053: ARRAY
51054: PPUSH
51055: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
51059: LD_EXP 57
51063: PUSH
51064: LD_VAR 0 2
51068: ARRAY
51069: PUSH
51070: LD_INT 2
51072: ARRAY
51073: PUSH
51074: LD_INT 1
51076: ARRAY
51077: PPUSH
51078: LD_EXP 57
51082: PUSH
51083: LD_VAR 0 2
51087: ARRAY
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PUSH
51093: LD_INT 1
51095: ARRAY
51096: PPUSH
51097: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
51101: LD_INT 35
51103: PPUSH
51104: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
51108: LD_EXP 57
51112: PUSH
51113: LD_VAR 0 2
51117: ARRAY
51118: PUSH
51119: LD_INT 2
51121: ARRAY
51122: NOT
51123: IFFALSE 51127
// break ;
51125: GO 51152
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
51127: LD_EXP 57
51131: PUSH
51132: LD_VAR 0 2
51136: ARRAY
51137: PUSH
51138: LD_INT 2
51140: ARRAY
51141: PUSH
51142: LD_INT 1
51144: ARRAY
51145: PPUSH
51146: CALL_OW 310
51150: IFFALSE 51101
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
51152: LD_ADDR_EXP 57
51156: PUSH
51157: LD_EXP 57
51161: PPUSH
51162: LD_VAR 0 2
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PPUSH
51174: EMPTY
51175: PPUSH
51176: CALL 3237 0 3
51180: ST_TO_ADDR
// exit ;
51181: POP
51182: POP
51183: GO 51189
// end ; end ; end ;
51185: GO 50434
51187: POP
51188: POP
// end ;
51189: LD_VAR 0 1
51193: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
51194: LD_INT 0
51196: PPUSH
51197: PPUSH
51198: PPUSH
51199: PPUSH
51200: PPUSH
51201: PPUSH
// if not mc_bases then
51202: LD_EXP 48
51206: NOT
51207: IFFALSE 51211
// exit ;
51209: GO 52172
// for i = 1 to mc_bases do
51211: LD_ADDR_VAR 0 2
51215: PUSH
51216: DOUBLE
51217: LD_INT 1
51219: DEC
51220: ST_TO_ADDR
51221: LD_EXP 48
51225: PUSH
51226: FOR_TO
51227: IFFALSE 52170
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
51229: LD_EXP 58
51233: PUSH
51234: LD_VAR 0 2
51238: ARRAY
51239: NOT
51240: PUSH
51241: LD_EXP 58
51245: PUSH
51246: LD_VAR 0 2
51250: ARRAY
51251: PUSH
51252: LD_EXP 59
51256: PUSH
51257: LD_VAR 0 2
51261: ARRAY
51262: EQUAL
51263: OR
51264: IFFALSE 51268
// continue ;
51266: GO 51226
// if mc_miners [ i ] then
51268: LD_EXP 59
51272: PUSH
51273: LD_VAR 0 2
51277: ARRAY
51278: IFFALSE 51857
// begin k := 1 ;
51280: LD_ADDR_VAR 0 4
51284: PUSH
51285: LD_INT 1
51287: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
51288: LD_ADDR_VAR 0 3
51292: PUSH
51293: DOUBLE
51294: LD_EXP 59
51298: PUSH
51299: LD_VAR 0 2
51303: ARRAY
51304: INC
51305: ST_TO_ADDR
51306: LD_INT 1
51308: PUSH
51309: FOR_DOWNTO
51310: IFFALSE 51855
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
51312: LD_EXP 59
51316: PUSH
51317: LD_VAR 0 2
51321: ARRAY
51322: PUSH
51323: LD_VAR 0 3
51327: ARRAY
51328: PPUSH
51329: CALL_OW 301
51333: IFFALSE 51396
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
51335: LD_ADDR_VAR 0 5
51339: PUSH
51340: LD_EXP 59
51344: PUSH
51345: LD_VAR 0 2
51349: ARRAY
51350: PUSH
51351: LD_EXP 59
51355: PUSH
51356: LD_VAR 0 2
51360: ARRAY
51361: PUSH
51362: LD_VAR 0 3
51366: ARRAY
51367: DIFF
51368: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
51369: LD_ADDR_EXP 59
51373: PUSH
51374: LD_EXP 59
51378: PPUSH
51379: LD_VAR 0 2
51383: PPUSH
51384: LD_VAR 0 5
51388: PPUSH
51389: CALL_OW 1
51393: ST_TO_ADDR
// continue ;
51394: GO 51309
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
51396: LD_EXP 59
51400: PUSH
51401: LD_VAR 0 2
51405: ARRAY
51406: PUSH
51407: LD_VAR 0 3
51411: ARRAY
51412: PPUSH
51413: CALL 2738 0 1
51417: PUSH
51418: LD_EXP 59
51422: PUSH
51423: LD_VAR 0 2
51427: ARRAY
51428: PUSH
51429: LD_VAR 0 3
51433: ARRAY
51434: PPUSH
51435: CALL_OW 255
51439: PPUSH
51440: LD_EXP 58
51444: PUSH
51445: LD_VAR 0 2
51449: ARRAY
51450: PUSH
51451: LD_VAR 0 4
51455: ARRAY
51456: PUSH
51457: LD_INT 1
51459: ARRAY
51460: PPUSH
51461: LD_EXP 58
51465: PUSH
51466: LD_VAR 0 2
51470: ARRAY
51471: PUSH
51472: LD_VAR 0 4
51476: ARRAY
51477: PUSH
51478: LD_INT 2
51480: ARRAY
51481: PPUSH
51482: LD_INT 15
51484: PPUSH
51485: CALL 3731 0 4
51489: PUSH
51490: LD_INT 4
51492: ARRAY
51493: PUSH
51494: LD_EXP 59
51498: PUSH
51499: LD_VAR 0 2
51503: ARRAY
51504: PUSH
51505: LD_VAR 0 3
51509: ARRAY
51510: PPUSH
51511: LD_INT 10
51513: PPUSH
51514: CALL 5428 0 2
51518: PUSH
51519: LD_INT 4
51521: ARRAY
51522: OR
51523: AND
51524: IFFALSE 51547
// ComStop ( mc_miners [ i ] [ j ] ) ;
51526: LD_EXP 59
51530: PUSH
51531: LD_VAR 0 2
51535: ARRAY
51536: PUSH
51537: LD_VAR 0 3
51541: ARRAY
51542: PPUSH
51543: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 then
51547: LD_EXP 59
51551: PUSH
51552: LD_VAR 0 2
51556: ARRAY
51557: PUSH
51558: LD_VAR 0 3
51562: ARRAY
51563: PPUSH
51564: CALL_OW 257
51568: PUSH
51569: LD_INT 1
51571: EQUAL
51572: PUSH
51573: LD_EXP 59
51577: PUSH
51578: LD_VAR 0 2
51582: ARRAY
51583: PUSH
51584: LD_VAR 0 3
51588: ARRAY
51589: PPUSH
51590: CALL_OW 459
51594: NOT
51595: AND
51596: PUSH
51597: LD_EXP 59
51601: PUSH
51602: LD_VAR 0 2
51606: ARRAY
51607: PUSH
51608: LD_VAR 0 3
51612: ARRAY
51613: PPUSH
51614: CALL_OW 255
51618: PPUSH
51619: LD_EXP 58
51623: PUSH
51624: LD_VAR 0 2
51628: ARRAY
51629: PUSH
51630: LD_VAR 0 4
51634: ARRAY
51635: PUSH
51636: LD_INT 1
51638: ARRAY
51639: PPUSH
51640: LD_EXP 58
51644: PUSH
51645: LD_VAR 0 2
51649: ARRAY
51650: PUSH
51651: LD_VAR 0 4
51655: ARRAY
51656: PUSH
51657: LD_INT 2
51659: ARRAY
51660: PPUSH
51661: LD_INT 15
51663: PPUSH
51664: CALL 3731 0 4
51668: PUSH
51669: LD_INT 4
51671: ARRAY
51672: PUSH
51673: LD_INT 0
51675: EQUAL
51676: AND
51677: IFFALSE 51853
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
51679: LD_EXP 59
51683: PUSH
51684: LD_VAR 0 2
51688: ARRAY
51689: PUSH
51690: LD_VAR 0 3
51694: ARRAY
51695: PPUSH
51696: CALL_OW 310
51700: IFFALSE 51723
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
51702: LD_EXP 59
51706: PUSH
51707: LD_VAR 0 2
51711: ARRAY
51712: PUSH
51713: LD_VAR 0 3
51717: ARRAY
51718: PPUSH
51719: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
51723: LD_EXP 59
51727: PUSH
51728: LD_VAR 0 2
51732: ARRAY
51733: PUSH
51734: LD_VAR 0 3
51738: ARRAY
51739: PPUSH
51740: CALL_OW 314
51744: NOT
51745: IFFALSE 51813
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
51747: LD_EXP 59
51751: PUSH
51752: LD_VAR 0 2
51756: ARRAY
51757: PUSH
51758: LD_VAR 0 3
51762: ARRAY
51763: PPUSH
51764: LD_EXP 58
51768: PUSH
51769: LD_VAR 0 2
51773: ARRAY
51774: PUSH
51775: LD_VAR 0 4
51779: ARRAY
51780: PUSH
51781: LD_INT 1
51783: ARRAY
51784: PPUSH
51785: LD_EXP 58
51789: PUSH
51790: LD_VAR 0 2
51794: ARRAY
51795: PUSH
51796: LD_VAR 0 4
51800: ARRAY
51801: PUSH
51802: LD_INT 2
51804: ARRAY
51805: PPUSH
51806: LD_INT 0
51808: PPUSH
51809: CALL_OW 193
// k := k + 1 ;
51813: LD_ADDR_VAR 0 4
51817: PUSH
51818: LD_VAR 0 4
51822: PUSH
51823: LD_INT 1
51825: PLUS
51826: ST_TO_ADDR
// if k > mc_mines [ i ] then
51827: LD_VAR 0 4
51831: PUSH
51832: LD_EXP 58
51836: PUSH
51837: LD_VAR 0 2
51841: ARRAY
51842: GREATER
51843: IFFALSE 51853
// k := 1 ;
51845: LD_ADDR_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: ST_TO_ADDR
// end ; end ;
51853: GO 51309
51855: POP
51856: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
51857: LD_ADDR_VAR 0 5
51861: PUSH
51862: LD_EXP 48
51866: PUSH
51867: LD_VAR 0 2
51871: ARRAY
51872: PPUSH
51873: LD_INT 2
51875: PUSH
51876: LD_INT 30
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 30
51888: PUSH
51889: LD_INT 5
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 30
51898: PUSH
51899: LD_INT 32
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: PPUSH
51912: CALL_OW 72
51916: ST_TO_ADDR
// if not tmp then
51917: LD_VAR 0 5
51921: NOT
51922: IFFALSE 51926
// continue ;
51924: GO 51226
// list := [ ] ;
51926: LD_ADDR_VAR 0 6
51930: PUSH
51931: EMPTY
51932: ST_TO_ADDR
// for j in tmp do
51933: LD_ADDR_VAR 0 3
51937: PUSH
51938: LD_VAR 0 5
51942: PUSH
51943: FOR_IN
51944: IFFALSE 52013
// begin for k in UnitsInside ( j ) do
51946: LD_ADDR_VAR 0 4
51950: PUSH
51951: LD_VAR 0 3
51955: PPUSH
51956: CALL_OW 313
51960: PUSH
51961: FOR_IN
51962: IFFALSE 52009
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
51964: LD_VAR 0 4
51968: PPUSH
51969: CALL_OW 257
51973: PUSH
51974: LD_INT 1
51976: EQUAL
51977: PUSH
51978: LD_VAR 0 4
51982: PPUSH
51983: CALL_OW 459
51987: NOT
51988: AND
51989: IFFALSE 52007
// list := list ^ k ;
51991: LD_ADDR_VAR 0 6
51995: PUSH
51996: LD_VAR 0 6
52000: PUSH
52001: LD_VAR 0 4
52005: ADD
52006: ST_TO_ADDR
52007: GO 51961
52009: POP
52010: POP
// end ;
52011: GO 51943
52013: POP
52014: POP
// list := list diff mc_miners [ i ] ;
52015: LD_ADDR_VAR 0 6
52019: PUSH
52020: LD_VAR 0 6
52024: PUSH
52025: LD_EXP 59
52029: PUSH
52030: LD_VAR 0 2
52034: ARRAY
52035: DIFF
52036: ST_TO_ADDR
// if not list then
52037: LD_VAR 0 6
52041: NOT
52042: IFFALSE 52046
// continue ;
52044: GO 51226
// k := mc_mines [ i ] - mc_miners [ i ] ;
52046: LD_ADDR_VAR 0 4
52050: PUSH
52051: LD_EXP 58
52055: PUSH
52056: LD_VAR 0 2
52060: ARRAY
52061: PUSH
52062: LD_EXP 59
52066: PUSH
52067: LD_VAR 0 2
52071: ARRAY
52072: MINUS
52073: ST_TO_ADDR
// if k > list then
52074: LD_VAR 0 4
52078: PUSH
52079: LD_VAR 0 6
52083: GREATER
52084: IFFALSE 52096
// k := list ;
52086: LD_ADDR_VAR 0 4
52090: PUSH
52091: LD_VAR 0 6
52095: ST_TO_ADDR
// for j = 1 to k do
52096: LD_ADDR_VAR 0 3
52100: PUSH
52101: DOUBLE
52102: LD_INT 1
52104: DEC
52105: ST_TO_ADDR
52106: LD_VAR 0 4
52110: PUSH
52111: FOR_TO
52112: IFFALSE 52166
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
52114: LD_ADDR_EXP 59
52118: PUSH
52119: LD_EXP 59
52123: PPUSH
52124: LD_VAR 0 2
52128: PUSH
52129: LD_EXP 59
52133: PUSH
52134: LD_VAR 0 2
52138: ARRAY
52139: PUSH
52140: LD_INT 1
52142: PLUS
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PPUSH
52148: LD_VAR 0 6
52152: PUSH
52153: LD_VAR 0 3
52157: ARRAY
52158: PPUSH
52159: CALL 3237 0 3
52163: ST_TO_ADDR
52164: GO 52111
52166: POP
52167: POP
// end ;
52168: GO 51226
52170: POP
52171: POP
// end ;
52172: LD_VAR 0 1
52176: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
52177: LD_INT 0
52179: PPUSH
52180: PPUSH
52181: PPUSH
52182: PPUSH
52183: PPUSH
// if not mc_bases then
52184: LD_EXP 48
52188: NOT
52189: IFFALSE 52193
// exit ;
52191: GO 52969
// for i = 1 to mc_bases do
52193: LD_ADDR_VAR 0 2
52197: PUSH
52198: DOUBLE
52199: LD_INT 1
52201: DEC
52202: ST_TO_ADDR
52203: LD_EXP 48
52207: PUSH
52208: FOR_TO
52209: IFFALSE 52967
// begin if not mc_bases [ i ] then
52211: LD_EXP 48
52215: PUSH
52216: LD_VAR 0 2
52220: ARRAY
52221: NOT
52222: IFFALSE 52226
// continue ;
52224: GO 52208
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
52226: LD_EXP 61
52230: PUSH
52231: LD_VAR 0 2
52235: ARRAY
52236: NOT
52237: PUSH
52238: LD_EXP 62
52242: PUSH
52243: LD_VAR 0 2
52247: ARRAY
52248: AND
52249: IFFALSE 52287
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52251: LD_ADDR_EXP 62
52255: PUSH
52256: LD_EXP 62
52260: PPUSH
52261: LD_VAR 0 2
52265: PPUSH
52266: EMPTY
52267: PPUSH
52268: CALL_OW 1
52272: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
52273: LD_VAR 0 2
52277: PPUSH
52278: LD_INT 107
52280: PPUSH
52281: CALL 47688 0 2
// continue ;
52285: GO 52208
// end ; target := [ ] ;
52287: LD_ADDR_VAR 0 5
52291: PUSH
52292: EMPTY
52293: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
52294: LD_ADDR_VAR 0 3
52298: PUSH
52299: DOUBLE
52300: LD_EXP 61
52304: PUSH
52305: LD_VAR 0 2
52309: ARRAY
52310: INC
52311: ST_TO_ADDR
52312: LD_INT 1
52314: PUSH
52315: FOR_DOWNTO
52316: IFFALSE 52576
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
52318: LD_EXP 61
52322: PUSH
52323: LD_VAR 0 2
52327: ARRAY
52328: PUSH
52329: LD_VAR 0 3
52333: ARRAY
52334: PUSH
52335: LD_INT 2
52337: ARRAY
52338: PPUSH
52339: LD_EXP 61
52343: PUSH
52344: LD_VAR 0 2
52348: ARRAY
52349: PUSH
52350: LD_VAR 0 3
52354: ARRAY
52355: PUSH
52356: LD_INT 3
52358: ARRAY
52359: PPUSH
52360: CALL_OW 488
52364: PUSH
52365: LD_EXP 61
52369: PUSH
52370: LD_VAR 0 2
52374: ARRAY
52375: PUSH
52376: LD_VAR 0 3
52380: ARRAY
52381: PUSH
52382: LD_INT 2
52384: ARRAY
52385: PPUSH
52386: LD_EXP 61
52390: PUSH
52391: LD_VAR 0 2
52395: ARRAY
52396: PUSH
52397: LD_VAR 0 3
52401: ARRAY
52402: PUSH
52403: LD_INT 3
52405: ARRAY
52406: PPUSH
52407: CALL_OW 284
52411: PUSH
52412: LD_INT 0
52414: EQUAL
52415: AND
52416: IFFALSE 52471
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
52418: LD_ADDR_VAR 0 4
52422: PUSH
52423: LD_EXP 61
52427: PUSH
52428: LD_VAR 0 2
52432: ARRAY
52433: PPUSH
52434: LD_VAR 0 3
52438: PPUSH
52439: CALL_OW 3
52443: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
52444: LD_ADDR_EXP 61
52448: PUSH
52449: LD_EXP 61
52453: PPUSH
52454: LD_VAR 0 2
52458: PPUSH
52459: LD_VAR 0 4
52463: PPUSH
52464: CALL_OW 1
52468: ST_TO_ADDR
// continue ;
52469: GO 52315
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
52471: LD_EXP 48
52475: PUSH
52476: LD_VAR 0 2
52480: ARRAY
52481: PUSH
52482: LD_INT 1
52484: ARRAY
52485: PPUSH
52486: CALL_OW 255
52490: PPUSH
52491: LD_EXP 61
52495: PUSH
52496: LD_VAR 0 2
52500: ARRAY
52501: PUSH
52502: LD_VAR 0 3
52506: ARRAY
52507: PUSH
52508: LD_INT 2
52510: ARRAY
52511: PPUSH
52512: LD_EXP 61
52516: PUSH
52517: LD_VAR 0 2
52521: ARRAY
52522: PUSH
52523: LD_VAR 0 3
52527: ARRAY
52528: PUSH
52529: LD_INT 3
52531: ARRAY
52532: PPUSH
52533: LD_INT 20
52535: PPUSH
52536: CALL 3731 0 4
52540: PUSH
52541: LD_INT 4
52543: ARRAY
52544: PUSH
52545: LD_INT 0
52547: EQUAL
52548: IFFALSE 52574
// begin target := mc_crates [ i ] [ j ] ;
52550: LD_ADDR_VAR 0 5
52554: PUSH
52555: LD_EXP 61
52559: PUSH
52560: LD_VAR 0 2
52564: ARRAY
52565: PUSH
52566: LD_VAR 0 3
52570: ARRAY
52571: ST_TO_ADDR
// break ;
52572: GO 52576
// end ; end ;
52574: GO 52315
52576: POP
52577: POP
// if not target then
52578: LD_VAR 0 5
52582: NOT
52583: IFFALSE 52587
// continue ;
52585: GO 52208
// if mc_crates_collector [ i ] < 5 then
52587: LD_EXP 62
52591: PUSH
52592: LD_VAR 0 2
52596: ARRAY
52597: PUSH
52598: LD_INT 5
52600: LESS
52601: IFFALSE 52781
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
52603: LD_ADDR_VAR 0 4
52607: PUSH
52608: LD_EXP 48
52612: PUSH
52613: LD_VAR 0 2
52617: ARRAY
52618: PPUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 25
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 25
52634: PUSH
52635: LD_INT 16
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 24
52649: PUSH
52650: LD_INT 750
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PPUSH
52661: CALL_OW 72
52665: ST_TO_ADDR
// if not tmp then
52666: LD_VAR 0 4
52670: NOT
52671: IFFALSE 52675
// continue ;
52673: GO 52208
// for j in tmp do
52675: LD_ADDR_VAR 0 3
52679: PUSH
52680: LD_VAR 0 4
52684: PUSH
52685: FOR_IN
52686: IFFALSE 52779
// if GetTag ( j ) = 0 then
52688: LD_VAR 0 3
52692: PPUSH
52693: CALL_OW 110
52697: PUSH
52698: LD_INT 0
52700: EQUAL
52701: IFFALSE 52777
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
52703: LD_ADDR_EXP 62
52707: PUSH
52708: LD_EXP 62
52712: PPUSH
52713: LD_VAR 0 2
52717: PUSH
52718: LD_EXP 62
52722: PUSH
52723: LD_VAR 0 2
52727: ARRAY
52728: PUSH
52729: LD_INT 1
52731: PLUS
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PPUSH
52737: LD_VAR 0 3
52741: PPUSH
52742: CALL 3237 0 3
52746: ST_TO_ADDR
// SetTag ( j , 107 ) ;
52747: LD_VAR 0 3
52751: PPUSH
52752: LD_INT 107
52754: PPUSH
52755: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
52759: LD_EXP 62
52763: PUSH
52764: LD_VAR 0 2
52768: ARRAY
52769: PUSH
52770: LD_INT 5
52772: GREATER
52773: IFFALSE 52777
// break ;
52775: GO 52779
// end ;
52777: GO 52685
52779: POP
52780: POP
// end ; if mc_crates_collector [ i ] and target then
52781: LD_EXP 62
52785: PUSH
52786: LD_VAR 0 2
52790: ARRAY
52791: PUSH
52792: LD_VAR 0 5
52796: AND
52797: IFFALSE 52965
// begin if mc_crates_collector [ i ] < target [ 1 ] then
52799: LD_EXP 62
52803: PUSH
52804: LD_VAR 0 2
52808: ARRAY
52809: PUSH
52810: LD_VAR 0 5
52814: PUSH
52815: LD_INT 1
52817: ARRAY
52818: LESS
52819: IFFALSE 52839
// tmp := mc_crates_collector [ i ] else
52821: LD_ADDR_VAR 0 4
52825: PUSH
52826: LD_EXP 62
52830: PUSH
52831: LD_VAR 0 2
52835: ARRAY
52836: ST_TO_ADDR
52837: GO 52853
// tmp := target [ 1 ] ;
52839: LD_ADDR_VAR 0 4
52843: PUSH
52844: LD_VAR 0 5
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: ST_TO_ADDR
// for j = 1 to tmp do
52853: LD_ADDR_VAR 0 3
52857: PUSH
52858: DOUBLE
52859: LD_INT 1
52861: DEC
52862: ST_TO_ADDR
52863: LD_VAR 0 4
52867: PUSH
52868: FOR_TO
52869: IFFALSE 52963
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
52871: LD_EXP 62
52875: PUSH
52876: LD_VAR 0 2
52880: ARRAY
52881: PUSH
52882: LD_VAR 0 3
52886: ARRAY
52887: PPUSH
52888: CALL_OW 310
52892: IFFALSE 52915
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
52894: LD_EXP 62
52898: PUSH
52899: LD_VAR 0 2
52903: ARRAY
52904: PUSH
52905: LD_VAR 0 3
52909: ARRAY
52910: PPUSH
52911: CALL_OW 122
// wait ( 3 ) ;
52915: LD_INT 3
52917: PPUSH
52918: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
52922: LD_EXP 62
52926: PUSH
52927: LD_VAR 0 2
52931: ARRAY
52932: PUSH
52933: LD_VAR 0 3
52937: ARRAY
52938: PPUSH
52939: LD_VAR 0 5
52943: PUSH
52944: LD_INT 2
52946: ARRAY
52947: PPUSH
52948: LD_VAR 0 5
52952: PUSH
52953: LD_INT 3
52955: ARRAY
52956: PPUSH
52957: CALL_OW 117
// end ;
52961: GO 52868
52963: POP
52964: POP
// end ; end ;
52965: GO 52208
52967: POP
52968: POP
// end ;
52969: LD_VAR 0 1
52973: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
52974: LD_INT 0
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
// if not mc_bases then
52980: LD_EXP 48
52984: NOT
52985: IFFALSE 52989
// exit ;
52987: GO 53138
// for i = 1 to mc_bases do
52989: LD_ADDR_VAR 0 2
52993: PUSH
52994: DOUBLE
52995: LD_INT 1
52997: DEC
52998: ST_TO_ADDR
52999: LD_EXP 48
53003: PUSH
53004: FOR_TO
53005: IFFALSE 53136
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
53007: LD_ADDR_VAR 0 4
53011: PUSH
53012: LD_EXP 63
53016: PUSH
53017: LD_VAR 0 2
53021: ARRAY
53022: PPUSH
53023: LD_INT 33
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PPUSH
53033: CALL_OW 72
53037: ST_TO_ADDR
// if tmp then
53038: LD_VAR 0 4
53042: IFFALSE 53134
// for j in tmp do
53044: LD_ADDR_VAR 0 3
53048: PUSH
53049: LD_VAR 0 4
53053: PUSH
53054: FOR_IN
53055: IFFALSE 53132
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
53057: LD_VAR 0 3
53061: PPUSH
53062: CALL_OW 312
53066: NOT
53067: PUSH
53068: LD_VAR 0 3
53072: PPUSH
53073: CALL_OW 256
53077: PUSH
53078: LD_INT 250
53080: GREATEREQUAL
53081: AND
53082: IFFALSE 53095
// Connect ( j ) else
53084: LD_VAR 0 3
53088: PPUSH
53089: CALL 5737 0 1
53093: GO 53130
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
53095: LD_VAR 0 3
53099: PPUSH
53100: CALL_OW 256
53104: PUSH
53105: LD_INT 250
53107: LESS
53108: PUSH
53109: LD_VAR 0 3
53113: PPUSH
53114: CALL_OW 312
53118: AND
53119: IFFALSE 53130
// ComUnlink ( j ) ;
53121: LD_VAR 0 3
53125: PPUSH
53126: CALL_OW 136
53130: GO 53054
53132: POP
53133: POP
// end ;
53134: GO 53004
53136: POP
53137: POP
// end ;
53138: LD_VAR 0 1
53142: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
53143: LD_INT 0
53145: PPUSH
53146: PPUSH
53147: PPUSH
53148: PPUSH
53149: PPUSH
// if not mc_bases then
53150: LD_EXP 48
53154: NOT
53155: IFFALSE 53159
// exit ;
53157: GO 53526
// for i = 1 to mc_bases do
53159: LD_ADDR_VAR 0 2
53163: PUSH
53164: DOUBLE
53165: LD_INT 1
53167: DEC
53168: ST_TO_ADDR
53169: LD_EXP 48
53173: PUSH
53174: FOR_TO
53175: IFFALSE 53524
// begin if not mc_produce [ i ] then
53177: LD_EXP 65
53181: PUSH
53182: LD_VAR 0 2
53186: ARRAY
53187: NOT
53188: IFFALSE 53192
// continue ;
53190: GO 53174
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
53192: LD_ADDR_VAR 0 5
53196: PUSH
53197: LD_EXP 48
53201: PUSH
53202: LD_VAR 0 2
53206: ARRAY
53207: PPUSH
53208: LD_INT 30
53210: PUSH
53211: LD_INT 3
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PPUSH
53218: CALL_OW 72
53222: ST_TO_ADDR
// if not fac then
53223: LD_VAR 0 5
53227: NOT
53228: IFFALSE 53232
// continue ;
53230: GO 53174
// for j in fac do
53232: LD_ADDR_VAR 0 3
53236: PUSH
53237: LD_VAR 0 5
53241: PUSH
53242: FOR_IN
53243: IFFALSE 53520
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
53245: LD_VAR 0 3
53249: PPUSH
53250: CALL_OW 461
53254: PUSH
53255: LD_INT 2
53257: NONEQUAL
53258: PUSH
53259: LD_VAR 0 3
53263: PPUSH
53264: LD_INT 20
53266: PPUSH
53267: CALL 5428 0 2
53271: PUSH
53272: LD_INT 4
53274: ARRAY
53275: OR
53276: PUSH
53277: LD_VAR 0 3
53281: PPUSH
53282: CALL_OW 313
53286: PUSH
53287: LD_INT 0
53289: EQUAL
53290: OR
53291: IFFALSE 53295
// continue ;
53293: GO 53242
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
53295: LD_VAR 0 3
53299: PPUSH
53300: LD_EXP 65
53304: PUSH
53305: LD_VAR 0 2
53309: ARRAY
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PUSH
53315: LD_INT 1
53317: ARRAY
53318: PPUSH
53319: LD_EXP 65
53323: PUSH
53324: LD_VAR 0 2
53328: ARRAY
53329: PUSH
53330: LD_INT 1
53332: ARRAY
53333: PUSH
53334: LD_INT 2
53336: ARRAY
53337: PPUSH
53338: LD_EXP 65
53342: PUSH
53343: LD_VAR 0 2
53347: ARRAY
53348: PUSH
53349: LD_INT 1
53351: ARRAY
53352: PUSH
53353: LD_INT 3
53355: ARRAY
53356: PPUSH
53357: LD_EXP 65
53361: PUSH
53362: LD_VAR 0 2
53366: ARRAY
53367: PUSH
53368: LD_INT 1
53370: ARRAY
53371: PUSH
53372: LD_INT 4
53374: ARRAY
53375: PPUSH
53376: CALL_OW 448
53380: IFFALSE 53518
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
53382: LD_VAR 0 3
53386: PPUSH
53387: LD_EXP 65
53391: PUSH
53392: LD_VAR 0 2
53396: ARRAY
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PUSH
53402: LD_INT 1
53404: ARRAY
53405: PPUSH
53406: LD_EXP 65
53410: PUSH
53411: LD_VAR 0 2
53415: ARRAY
53416: PUSH
53417: LD_INT 1
53419: ARRAY
53420: PUSH
53421: LD_INT 2
53423: ARRAY
53424: PPUSH
53425: LD_EXP 65
53429: PUSH
53430: LD_VAR 0 2
53434: ARRAY
53435: PUSH
53436: LD_INT 1
53438: ARRAY
53439: PUSH
53440: LD_INT 3
53442: ARRAY
53443: PPUSH
53444: LD_EXP 65
53448: PUSH
53449: LD_VAR 0 2
53453: ARRAY
53454: PUSH
53455: LD_INT 1
53457: ARRAY
53458: PUSH
53459: LD_INT 4
53461: ARRAY
53462: PPUSH
53463: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
53467: LD_ADDR_VAR 0 4
53471: PUSH
53472: LD_EXP 65
53476: PUSH
53477: LD_VAR 0 2
53481: ARRAY
53482: PPUSH
53483: LD_INT 1
53485: PPUSH
53486: CALL_OW 3
53490: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
53491: LD_ADDR_EXP 65
53495: PUSH
53496: LD_EXP 65
53500: PPUSH
53501: LD_VAR 0 2
53505: PPUSH
53506: LD_VAR 0 4
53510: PPUSH
53511: CALL_OW 1
53515: ST_TO_ADDR
// break ;
53516: GO 53520
// end ; end ;
53518: GO 53242
53520: POP
53521: POP
// end ;
53522: GO 53174
53524: POP
53525: POP
// end ;
53526: LD_VAR 0 1
53530: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
53531: LD_INT 0
53533: PPUSH
53534: PPUSH
53535: PPUSH
// if not mc_bases then
53536: LD_EXP 48
53540: NOT
53541: IFFALSE 53545
// exit ;
53543: GO 53634
// for i = 1 to mc_bases do
53545: LD_ADDR_VAR 0 2
53549: PUSH
53550: DOUBLE
53551: LD_INT 1
53553: DEC
53554: ST_TO_ADDR
53555: LD_EXP 48
53559: PUSH
53560: FOR_TO
53561: IFFALSE 53632
// begin if mc_attack [ i ] then
53563: LD_EXP 64
53567: PUSH
53568: LD_VAR 0 2
53572: ARRAY
53573: IFFALSE 53630
// begin tmp := mc_attack [ i ] [ 1 ] ;
53575: LD_ADDR_VAR 0 3
53579: PUSH
53580: LD_EXP 64
53584: PUSH
53585: LD_VAR 0 2
53589: ARRAY
53590: PUSH
53591: LD_INT 1
53593: ARRAY
53594: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
53595: LD_ADDR_EXP 64
53599: PUSH
53600: LD_EXP 64
53604: PPUSH
53605: LD_VAR 0 2
53609: PPUSH
53610: EMPTY
53611: PPUSH
53612: CALL_OW 1
53616: ST_TO_ADDR
// Attack ( tmp ) ;
53617: LD_VAR 0 3
53621: PPUSH
53622: CALL 29614 0 1
// exit ;
53626: POP
53627: POP
53628: GO 53634
// end ; end ;
53630: GO 53560
53632: POP
53633: POP
// end ;
53634: LD_VAR 0 1
53638: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
53639: LD_INT 0
53641: PPUSH
53642: PPUSH
53643: PPUSH
53644: PPUSH
53645: PPUSH
53646: PPUSH
53647: PPUSH
// if not mc_bases then
53648: LD_EXP 48
53652: NOT
53653: IFFALSE 53657
// exit ;
53655: GO 54074
// for i = 1 to mc_bases do
53657: LD_ADDR_VAR 0 2
53661: PUSH
53662: DOUBLE
53663: LD_INT 1
53665: DEC
53666: ST_TO_ADDR
53667: LD_EXP 48
53671: PUSH
53672: FOR_TO
53673: IFFALSE 54072
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
53675: LD_ADDR_EXP 67
53679: PUSH
53680: LD_EXP 67
53684: PPUSH
53685: LD_VAR 0 2
53689: PPUSH
53690: LD_EXP 48
53694: PUSH
53695: LD_VAR 0 2
53699: ARRAY
53700: PPUSH
53701: CALL 33398 0 1
53705: PPUSH
53706: CALL_OW 1
53710: ST_TO_ADDR
// if not mc_scan [ i ] then
53711: LD_EXP 67
53715: PUSH
53716: LD_VAR 0 2
53720: ARRAY
53721: NOT
53722: IFFALSE 53833
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53724: LD_ADDR_VAR 0 4
53728: PUSH
53729: LD_EXP 48
53733: PUSH
53734: LD_VAR 0 2
53738: ARRAY
53739: PPUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 25
53745: PUSH
53746: LD_INT 5
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 25
53755: PUSH
53756: LD_INT 8
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 25
53765: PUSH
53766: LD_INT 9
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: PPUSH
53779: CALL_OW 72
53783: ST_TO_ADDR
// if not tmp then
53784: LD_VAR 0 4
53788: NOT
53789: IFFALSE 53793
// continue ;
53791: GO 53672
// for j in tmp do
53793: LD_ADDR_VAR 0 3
53797: PUSH
53798: LD_VAR 0 4
53802: PUSH
53803: FOR_IN
53804: IFFALSE 53831
// if IsInUnit ( j ) then
53806: LD_VAR 0 3
53810: PPUSH
53811: CALL_OW 310
53815: IFFALSE 53829
// SetClass ( j , 1 ) ;
53817: LD_VAR 0 3
53821: PPUSH
53822: LD_INT 1
53824: PPUSH
53825: CALL_OW 336
53829: GO 53803
53831: POP
53832: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
53833: LD_EXP 67
53837: PUSH
53838: LD_VAR 0 2
53842: ARRAY
53843: PUSH
53844: LD_EXP 66
53848: PUSH
53849: LD_VAR 0 2
53853: ARRAY
53854: AND
53855: IFFALSE 54070
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
53857: LD_ADDR_VAR 0 7
53861: PUSH
53862: LD_EXP 66
53866: PUSH
53867: LD_INT 1
53869: ARRAY
53870: PPUSH
53871: CALL 33505 0 1
53875: ST_TO_ADDR
// if class then
53876: LD_VAR 0 7
53880: IFFALSE 54003
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
53882: LD_ADDR_VAR 0 4
53886: PUSH
53887: LD_EXP 48
53891: PUSH
53892: LD_VAR 0 2
53896: ARRAY
53897: PPUSH
53898: LD_INT 30
53900: PUSH
53901: LD_INT 5
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PPUSH
53908: CALL_OW 72
53912: ST_TO_ADDR
// if tmp then
53913: LD_VAR 0 4
53917: IFFALSE 54003
// begin for j in tmp do
53919: LD_ADDR_VAR 0 3
53923: PUSH
53924: LD_VAR 0 4
53928: PUSH
53929: FOR_IN
53930: IFFALSE 54001
// begin t := UnitsInside ( j ) ;
53932: LD_ADDR_VAR 0 5
53936: PUSH
53937: LD_VAR 0 3
53941: PPUSH
53942: CALL_OW 313
53946: ST_TO_ADDR
// if not t then
53947: LD_VAR 0 5
53951: NOT
53952: IFFALSE 53956
// continue ;
53954: GO 53929
// for x in t do
53956: LD_ADDR_VAR 0 6
53960: PUSH
53961: LD_VAR 0 5
53965: PUSH
53966: FOR_IN
53967: IFFALSE 53997
// if not MineOfUnit ( x ) then
53969: LD_VAR 0 6
53973: PPUSH
53974: CALL_OW 459
53978: NOT
53979: IFFALSE 53995
// SetClass ( x , class ) ;
53981: LD_VAR 0 6
53985: PPUSH
53986: LD_VAR 0 7
53990: PPUSH
53991: CALL_OW 336
53995: GO 53966
53997: POP
53998: POP
// end ;
53999: GO 53929
54001: POP
54002: POP
// end ; end ; tmp := mc_defender [ i ] ;
54003: LD_ADDR_VAR 0 4
54007: PUSH
54008: LD_EXP 66
54012: PUSH
54013: LD_VAR 0 2
54017: ARRAY
54018: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
54019: LD_ADDR_EXP 66
54023: PUSH
54024: LD_EXP 66
54028: PPUSH
54029: LD_VAR 0 2
54033: PPUSH
54034: EMPTY
54035: PPUSH
54036: CALL_OW 1
54040: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
54041: LD_VAR 0 2
54045: PPUSH
54046: LD_VAR 0 4
54050: PPUSH
54051: LD_EXP 67
54055: PUSH
54056: LD_VAR 0 2
54060: ARRAY
54061: PPUSH
54062: CALL 32851 0 3
// exit ;
54066: POP
54067: POP
54068: GO 54074
// end ; end ;
54070: GO 53672
54072: POP
54073: POP
// end ;
54074: LD_VAR 0 1
54078: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
54079: LD_INT 0
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
54085: LD_VAR 0 1
54089: NOT
54090: PUSH
54091: LD_VAR 0 2
54095: NOT
54096: OR
54097: PUSH
54098: LD_VAR 0 3
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 3
54111: PUSH
54112: LD_INT 4
54114: PUSH
54115: LD_INT 5
54117: PUSH
54118: LD_INT 8
54120: PUSH
54121: LD_INT 9
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: IN
54133: NOT
54134: OR
54135: PUSH
54136: LD_VAR 0 2
54140: PUSH
54141: LD_EXP 66
54145: PUSH
54146: LD_VAR 0 5
54150: ARRAY
54151: IN
54152: OR
54153: IFFALSE 54157
// exit ;
54155: GO 54569
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
54157: LD_ADDR_VAR 0 1
54161: PUSH
54162: LD_VAR 0 1
54166: PPUSH
54167: LD_INT 21
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 24
54179: PUSH
54180: LD_INT 250
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PPUSH
54191: CALL_OW 72
54195: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
54196: LD_VAR 0 3
54200: PUSH
54201: LD_INT 5
54203: PUSH
54204: LD_INT 8
54206: PUSH
54207: LD_INT 9
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: IN
54215: IFFALSE 54225
// class := 1 ;
54217: LD_ADDR_VAR 0 3
54221: PUSH
54222: LD_INT 1
54224: ST_TO_ADDR
// case class of 1 :
54225: LD_VAR 0 3
54229: PUSH
54230: LD_INT 1
54232: DOUBLE
54233: EQUAL
54234: IFTRUE 54238
54236: GO 54284
54238: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
54239: LD_ADDR_VAR 0 7
54243: PUSH
54244: LD_VAR 0 1
54248: PPUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 30
54254: PUSH
54255: LD_INT 4
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PPUSH
54277: CALL_OW 72
54281: ST_TO_ADDR
54282: GO 54458
54284: LD_INT 2
54286: DOUBLE
54287: EQUAL
54288: IFTRUE 54292
54290: GO 54338
54292: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
54293: LD_ADDR_VAR 0 7
54297: PUSH
54298: LD_VAR 0 1
54302: PPUSH
54303: LD_INT 2
54305: PUSH
54306: LD_INT 30
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 30
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: LIST
54330: PPUSH
54331: CALL_OW 72
54335: ST_TO_ADDR
54336: GO 54458
54338: LD_INT 3
54340: DOUBLE
54341: EQUAL
54342: IFTRUE 54346
54344: GO 54392
54346: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
54347: LD_ADDR_VAR 0 7
54351: PUSH
54352: LD_VAR 0 1
54356: PPUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 30
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 30
54372: PUSH
54373: LD_INT 3
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: PPUSH
54385: CALL_OW 72
54389: ST_TO_ADDR
54390: GO 54458
54392: LD_INT 4
54394: DOUBLE
54395: EQUAL
54396: IFTRUE 54400
54398: GO 54457
54400: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
54401: LD_ADDR_VAR 0 7
54405: PUSH
54406: LD_VAR 0 1
54410: PPUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 30
54416: PUSH
54417: LD_INT 6
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 30
54426: PUSH
54427: LD_INT 7
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 30
54436: PUSH
54437: LD_INT 8
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: PPUSH
54450: CALL_OW 72
54454: ST_TO_ADDR
54455: GO 54458
54457: POP
// if not tmp then
54458: LD_VAR 0 7
54462: NOT
54463: IFFALSE 54467
// exit ;
54465: GO 54569
// for i in tmp do
54467: LD_ADDR_VAR 0 5
54471: PUSH
54472: LD_VAR 0 7
54476: PUSH
54477: FOR_IN
54478: IFFALSE 54547
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
54480: LD_VAR 0 5
54484: PPUSH
54485: CALL_OW 313
54489: PUSH
54490: LD_INT 6
54492: LESS
54493: PUSH
54494: LD_VAR 0 5
54498: PPUSH
54499: CALL_OW 266
54503: PUSH
54504: LD_INT 31
54506: PUSH
54507: LD_INT 32
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: IN
54514: NOT
54515: AND
54516: PUSH
54517: LD_VAR 0 5
54521: PPUSH
54522: CALL_OW 313
54526: PUSH
54527: LD_INT 0
54529: EQUAL
54530: OR
54531: IFFALSE 54545
// begin j := i ;
54533: LD_ADDR_VAR 0 6
54537: PUSH
54538: LD_VAR 0 5
54542: ST_TO_ADDR
// break ;
54543: GO 54547
// end ; end ;
54545: GO 54477
54547: POP
54548: POP
// if j then
54549: LD_VAR 0 6
54553: IFFALSE 54569
// ComEnterUnit ( unit , j ) ;
54555: LD_VAR 0 2
54559: PPUSH
54560: LD_VAR 0 6
54564: PPUSH
54565: CALL_OW 120
// end ;
54569: LD_VAR 0 4
54573: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
54574: LD_INT 0
54576: PPUSH
54577: PPUSH
54578: PPUSH
54579: PPUSH
// if not mc_bases then
54580: LD_EXP 48
54584: NOT
54585: IFFALSE 54589
// exit ;
54587: GO 54818
// for i = 1 to mc_bases do
54589: LD_ADDR_VAR 0 2
54593: PUSH
54594: DOUBLE
54595: LD_INT 1
54597: DEC
54598: ST_TO_ADDR
54599: LD_EXP 48
54603: PUSH
54604: FOR_TO
54605: IFFALSE 54816
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
54607: LD_ADDR_VAR 0 4
54611: PUSH
54612: LD_EXP 48
54616: PUSH
54617: LD_VAR 0 2
54621: ARRAY
54622: PPUSH
54623: LD_INT 21
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PPUSH
54633: CALL_OW 72
54637: ST_TO_ADDR
// if not tmp then
54638: LD_VAR 0 4
54642: NOT
54643: IFFALSE 54649
// exit ;
54645: POP
54646: POP
54647: GO 54818
// for j in tmp do
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_VAR 0 4
54658: PUSH
54659: FOR_IN
54660: IFFALSE 54812
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
54662: LD_VAR 0 3
54666: PPUSH
54667: CALL_OW 257
54671: PUSH
54672: LD_INT 3
54674: EQUAL
54675: PUSH
54676: LD_EXP 67
54680: PUSH
54681: LD_VAR 0 2
54685: ARRAY
54686: AND
54687: IFFALSE 54691
// continue ;
54689: GO 54659
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
54691: LD_VAR 0 3
54695: PPUSH
54696: CALL_OW 110
54700: NOT
54701: PUSH
54702: LD_VAR 0 3
54706: PPUSH
54707: CALL_OW 314
54711: NOT
54712: AND
54713: PUSH
54714: LD_VAR 0 3
54718: PPUSH
54719: CALL_OW 310
54723: NOT
54724: AND
54725: PUSH
54726: LD_EXP 51
54730: PUSH
54731: LD_VAR 0 2
54735: ARRAY
54736: PUSH
54737: LD_INT 1
54739: ARRAY
54740: NOT
54741: AND
54742: PUSH
54743: LD_EXP 51
54747: PUSH
54748: LD_VAR 0 2
54752: ARRAY
54753: PUSH
54754: LD_INT 2
54756: ARRAY
54757: NOT
54758: AND
54759: PUSH
54760: LD_VAR 0 3
54764: PUSH
54765: LD_EXP 57
54769: PUSH
54770: LD_VAR 0 2
54774: ARRAY
54775: IN
54776: NOT
54777: AND
54778: IFFALSE 54810
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
54780: LD_EXP 48
54784: PUSH
54785: LD_VAR 0 2
54789: ARRAY
54790: PPUSH
54791: LD_VAR 0 3
54795: PPUSH
54796: LD_VAR 0 3
54800: PPUSH
54801: CALL_OW 257
54805: PPUSH
54806: CALL 54079 0 3
// end ;
54810: GO 54659
54812: POP
54813: POP
// end ;
54814: GO 54604
54816: POP
54817: POP
// end ;
54818: LD_VAR 0 1
54822: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
54823: LD_INT 0
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
// if not mc_bases [ base ] then
54831: LD_EXP 48
54835: PUSH
54836: LD_VAR 0 1
54840: ARRAY
54841: NOT
54842: IFFALSE 54846
// exit ;
54844: GO 55028
// tmp := [ ] ;
54846: LD_ADDR_VAR 0 6
54850: PUSH
54851: EMPTY
54852: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
54853: LD_ADDR_VAR 0 7
54857: PUSH
54858: LD_VAR 0 3
54862: PPUSH
54863: LD_INT 0
54865: PPUSH
54866: CALL_OW 517
54870: ST_TO_ADDR
// if not list then
54871: LD_VAR 0 7
54875: NOT
54876: IFFALSE 54880
// exit ;
54878: GO 55028
// for i = 1 to amount do
54880: LD_ADDR_VAR 0 5
54884: PUSH
54885: DOUBLE
54886: LD_INT 1
54888: DEC
54889: ST_TO_ADDR
54890: LD_VAR 0 2
54894: PUSH
54895: FOR_TO
54896: IFFALSE 54976
// begin x := rand ( 1 , list [ 1 ] ) ;
54898: LD_ADDR_VAR 0 8
54902: PUSH
54903: LD_INT 1
54905: PPUSH
54906: LD_VAR 0 7
54910: PUSH
54911: LD_INT 1
54913: ARRAY
54914: PPUSH
54915: CALL_OW 12
54919: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
54920: LD_ADDR_VAR 0 6
54924: PUSH
54925: LD_VAR 0 6
54929: PPUSH
54930: LD_VAR 0 5
54934: PPUSH
54935: LD_VAR 0 7
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: PUSH
54944: LD_VAR 0 8
54948: ARRAY
54949: PUSH
54950: LD_VAR 0 7
54954: PUSH
54955: LD_INT 2
54957: ARRAY
54958: PUSH
54959: LD_VAR 0 8
54963: ARRAY
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PPUSH
54969: CALL_OW 1
54973: ST_TO_ADDR
// end ;
54974: GO 54895
54976: POP
54977: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
54978: LD_ADDR_EXP 58
54982: PUSH
54983: LD_EXP 58
54987: PPUSH
54988: LD_VAR 0 1
54992: PPUSH
54993: LD_VAR 0 6
54997: PPUSH
54998: CALL_OW 1
55002: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
55003: LD_ADDR_EXP 60
55007: PUSH
55008: LD_EXP 60
55012: PPUSH
55013: LD_VAR 0 1
55017: PPUSH
55018: LD_VAR 0 3
55022: PPUSH
55023: CALL_OW 1
55027: ST_TO_ADDR
// end ;
55028: LD_VAR 0 4
55032: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
55033: LD_INT 0
55035: PPUSH
// if not mc_bases [ base ] then
55036: LD_EXP 48
55040: PUSH
55041: LD_VAR 0 1
55045: ARRAY
55046: NOT
55047: IFFALSE 55051
// exit ;
55049: GO 55076
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
55051: LD_ADDR_EXP 65
55055: PUSH
55056: LD_EXP 65
55060: PPUSH
55061: LD_VAR 0 1
55065: PPUSH
55066: LD_VAR 0 2
55070: PPUSH
55071: CALL_OW 1
55075: ST_TO_ADDR
// end ;
55076: LD_VAR 0 3
55080: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
55081: LD_INT 0
55083: PPUSH
// if not mc_bases [ base ] then
55084: LD_EXP 48
55088: PUSH
55089: LD_VAR 0 1
55093: ARRAY
55094: NOT
55095: IFFALSE 55099
// exit ;
55097: GO 55124
// mc_defender := Replace ( mc_defender , base , deflist ) ;
55099: LD_ADDR_EXP 66
55103: PUSH
55104: LD_EXP 66
55108: PPUSH
55109: LD_VAR 0 1
55113: PPUSH
55114: LD_VAR 0 2
55118: PPUSH
55119: CALL_OW 1
55123: ST_TO_ADDR
// end ;
55124: LD_VAR 0 3
55128: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
// if not mc_bases [ base ] then
55135: LD_EXP 48
55139: PUSH
55140: LD_VAR 0 1
55144: ARRAY
55145: NOT
55146: IFFALSE 55150
// exit ;
55148: GO 55215
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
55150: LD_ADDR_EXP 64
55154: PUSH
55155: LD_EXP 64
55159: PPUSH
55160: LD_VAR 0 1
55164: PUSH
55165: LD_EXP 64
55169: PUSH
55170: LD_VAR 0 1
55174: ARRAY
55175: PUSH
55176: LD_INT 1
55178: PLUS
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PPUSH
55184: LD_VAR 0 1
55188: PUSH
55189: LD_VAR 0 2
55193: PUSH
55194: LD_VAR 0 3
55198: PUSH
55199: LD_VAR 0 4
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: PPUSH
55210: CALL 3237 0 3
55214: ST_TO_ADDR
// end ;
55215: LD_VAR 0 5
55219: RET
// export function MC_GetMinesField ( base ) ; begin
55220: LD_INT 0
55222: PPUSH
// result := mc_mines [ base ] ;
55223: LD_ADDR_VAR 0 2
55227: PUSH
55228: LD_EXP 58
55232: PUSH
55233: LD_VAR 0 1
55237: ARRAY
55238: ST_TO_ADDR
// end ;
55239: LD_VAR 0 2
55243: RET
// export function MC_GetProduceList ( base ) ; begin
55244: LD_INT 0
55246: PPUSH
// result := mc_produce [ base ] ;
55247: LD_ADDR_VAR 0 2
55251: PUSH
55252: LD_EXP 65
55256: PUSH
55257: LD_VAR 0 1
55261: ARRAY
55262: ST_TO_ADDR
// end ; end_of_file
55263: LD_VAR 0 2
55267: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
55268: LD_VAR 0 1
55272: PPUSH
55273: CALL_OW 255
55277: PUSH
55278: LD_INT 1
55280: EQUAL
55281: IFFALSE 55291
// artifact_get := true ;
55283: LD_ADDR_EXP 13
55287: PUSH
55288: LD_INT 1
55290: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
55291: LD_VAR 0 1
55295: PPUSH
55296: CALL_OW 255
55300: PUSH
55301: LD_INT 2
55303: EQUAL
55304: IFFALSE 55322
// begin artifact_get := false ;
55306: LD_ADDR_EXP 13
55310: PUSH
55311: LD_INT 0
55313: ST_TO_ADDR
// artifact_stolen := true ;
55314: LD_ADDR_EXP 12
55318: PUSH
55319: LD_INT 1
55321: ST_TO_ADDR
// end ; artifact_oncargo := true ;
55322: LD_ADDR_EXP 14
55326: PUSH
55327: LD_INT 1
55329: ST_TO_ADDR
// end ;
55330: PPOPN 2
55332: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
55333: LD_ADDR_EXP 14
55337: PUSH
55338: LD_INT 0
55340: ST_TO_ADDR
// end ;
55341: PPOPN 2
55343: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
55344: LD_INT 0
55346: PPUSH
55347: PPUSH
55348: PPUSH
55349: PPUSH
55350: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
55351: LD_VAR 0 1
55355: PUSH
55356: LD_INT 22
55358: PUSH
55359: LD_INT 1
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 21
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: LD_INT 25
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 25
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 25
55401: PUSH
55402: LD_INT 3
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 25
55411: PUSH
55412: LD_INT 4
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 25
55421: PUSH
55422: LD_INT 5
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 25
55431: PUSH
55432: LD_INT 8
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: LIST
55452: PPUSH
55453: CALL_OW 69
55457: IN
55458: IFFALSE 55474
// loses_counter := loses_counter + 1 ;
55460: LD_ADDR_EXP 17
55464: PUSH
55465: LD_EXP 17
55469: PUSH
55470: LD_INT 1
55472: PLUS
55473: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
55474: LD_VAR 0 1
55478: PUSH
55479: LD_INT 21
55481: PUSH
55482: LD_INT 3
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PPUSH
55489: CALL_OW 69
55493: IN
55494: IFFALSE 56010
// begin if not mc_bases then
55496: LD_EXP 48
55500: NOT
55501: IFFALSE 55505
// exit ;
55503: GO 56010
// pos := mc_build_list [ i ] + 1 ;
55505: LD_ADDR_VAR 0 5
55509: PUSH
55510: LD_EXP 53
55514: PUSH
55515: LD_VAR 0 2
55519: ARRAY
55520: PUSH
55521: LD_INT 1
55523: PLUS
55524: ST_TO_ADDR
// btype := GetBType ( un ) ;
55525: LD_ADDR_VAR 0 4
55529: PUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: CALL_OW 266
55539: ST_TO_ADDR
// if btype = b_warehouse then
55540: LD_VAR 0 4
55544: PUSH
55545: LD_INT 1
55547: EQUAL
55548: IFFALSE 55566
// begin btype := b_depot ;
55550: LD_ADDR_VAR 0 4
55554: PUSH
55555: LD_INT 0
55557: ST_TO_ADDR
// pos := 1 ;
55558: LD_ADDR_VAR 0 5
55562: PUSH
55563: LD_INT 1
55565: ST_TO_ADDR
// end ; if btype = b_factory then
55566: LD_VAR 0 4
55570: PUSH
55571: LD_INT 3
55573: EQUAL
55574: IFFALSE 55592
// begin btype := b_workshop ;
55576: LD_ADDR_VAR 0 4
55580: PUSH
55581: LD_INT 2
55583: ST_TO_ADDR
// pos := 1 ;
55584: LD_ADDR_VAR 0 5
55588: PUSH
55589: LD_INT 1
55591: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
55592: LD_VAR 0 4
55596: PUSH
55597: LD_INT 7
55599: PUSH
55600: LD_INT 8
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: IN
55607: IFFALSE 55617
// btype := b_lab ;
55609: LD_ADDR_VAR 0 4
55613: PUSH
55614: LD_INT 6
55616: ST_TO_ADDR
// for i = 1 to mc_bases do
55617: LD_ADDR_VAR 0 2
55621: PUSH
55622: DOUBLE
55623: LD_INT 1
55625: DEC
55626: ST_TO_ADDR
55627: LD_EXP 48
55631: PUSH
55632: FOR_TO
55633: IFFALSE 56008
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
55635: LD_VAR 0 1
55639: PUSH
55640: LD_EXP 48
55644: PUSH
55645: LD_VAR 0 2
55649: ARRAY
55650: IN
55651: PUSH
55652: LD_VAR 0 1
55656: PUSH
55657: LD_EXP 55
55661: PUSH
55662: LD_VAR 0 2
55666: ARRAY
55667: IN
55668: OR
55669: IFFALSE 56006
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
55671: LD_ADDR_EXP 53
55675: PUSH
55676: LD_EXP 53
55680: PPUSH
55681: LD_VAR 0 2
55685: PUSH
55686: LD_EXP 53
55690: PUSH
55691: LD_VAR 0 2
55695: ARRAY
55696: PUSH
55697: LD_INT 1
55699: PLUS
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PPUSH
55705: LD_VAR 0 4
55709: PUSH
55710: LD_VAR 0 1
55714: PPUSH
55715: CALL_OW 250
55719: PUSH
55720: LD_VAR 0 1
55724: PPUSH
55725: CALL_OW 251
55729: PUSH
55730: LD_VAR 0 1
55734: PPUSH
55735: CALL_OW 254
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: PPUSH
55746: CALL 3237 0 3
55750: ST_TO_ADDR
// if pos = 1 then
55751: LD_VAR 0 5
55755: PUSH
55756: LD_INT 1
55758: EQUAL
55759: IFFALSE 55874
// begin tmp := mc_build_list [ i ] ;
55761: LD_ADDR_VAR 0 6
55765: PUSH
55766: LD_EXP 53
55770: PUSH
55771: LD_VAR 0 2
55775: ARRAY
55776: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
55777: LD_VAR 0 6
55781: PPUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 30
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 30
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: PPUSH
55810: CALL_OW 72
55814: IFFALSE 55824
// pos := 2 ;
55816: LD_ADDR_VAR 0 5
55820: PUSH
55821: LD_INT 2
55823: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
55824: LD_ADDR_VAR 0 6
55828: PUSH
55829: LD_VAR 0 6
55833: PPUSH
55834: LD_VAR 0 5
55838: PPUSH
55839: LD_VAR 0 6
55843: PPUSH
55844: CALL 3128 0 3
55848: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
55849: LD_ADDR_EXP 53
55853: PUSH
55854: LD_EXP 53
55858: PPUSH
55859: LD_VAR 0 2
55863: PPUSH
55864: LD_VAR 0 6
55868: PPUSH
55869: CALL_OW 1
55873: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
55874: LD_VAR 0 1
55878: PUSH
55879: LD_EXP 48
55883: PUSH
55884: LD_VAR 0 2
55888: ARRAY
55889: IN
55890: IFFALSE 55939
// begin tmp := mc_bases [ i ] diff un ;
55892: LD_ADDR_VAR 0 6
55896: PUSH
55897: LD_EXP 48
55901: PUSH
55902: LD_VAR 0 2
55906: ARRAY
55907: PUSH
55908: LD_VAR 0 1
55912: DIFF
55913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
55914: LD_ADDR_EXP 48
55918: PUSH
55919: LD_EXP 48
55923: PPUSH
55924: LD_VAR 0 2
55928: PPUSH
55929: LD_VAR 0 6
55933: PPUSH
55934: CALL_OW 1
55938: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
55939: LD_VAR 0 1
55943: PUSH
55944: LD_EXP 55
55948: PUSH
55949: LD_VAR 0 2
55953: ARRAY
55954: IN
55955: IFFALSE 56004
// begin tmp := mc_construct_list [ i ] diff un ;
55957: LD_ADDR_VAR 0 6
55961: PUSH
55962: LD_EXP 55
55966: PUSH
55967: LD_VAR 0 2
55971: ARRAY
55972: PUSH
55973: LD_VAR 0 1
55977: DIFF
55978: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
55979: LD_ADDR_EXP 55
55983: PUSH
55984: LD_EXP 55
55988: PPUSH
55989: LD_VAR 0 2
55993: PPUSH
55994: LD_VAR 0 6
55998: PPUSH
55999: CALL_OW 1
56003: ST_TO_ADDR
// end ; break ;
56004: GO 56008
// end ;
56006: GO 55632
56008: POP
56009: POP
// end ; end ;
56010: PPOPN 6
56012: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
56013: LD_INT 0
56015: PPUSH
56016: PPUSH
56017: PPUSH
56018: PPUSH
56019: PPUSH
56020: PPUSH
56021: PPUSH
// begin if not mc_bases then
56022: LD_EXP 48
56026: NOT
56027: IFFALSE 56031
// exit ;
56029: GO 56272
// btype := GetBType ( building ) ;
56031: LD_ADDR_VAR 0 6
56035: PUSH
56036: LD_VAR 0 1
56040: PPUSH
56041: CALL_OW 266
56045: ST_TO_ADDR
// x := GetX ( building ) ;
56046: LD_ADDR_VAR 0 7
56050: PUSH
56051: LD_VAR 0 1
56055: PPUSH
56056: CALL_OW 250
56060: ST_TO_ADDR
// y := GetY ( building ) ;
56061: LD_ADDR_VAR 0 8
56065: PUSH
56066: LD_VAR 0 1
56070: PPUSH
56071: CALL_OW 251
56075: ST_TO_ADDR
// d := GetDir ( building ) ;
56076: LD_ADDR_VAR 0 9
56080: PUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: CALL_OW 254
56090: ST_TO_ADDR
// for i = 1 to mc_bases do
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: DOUBLE
56097: LD_INT 1
56099: DEC
56100: ST_TO_ADDR
56101: LD_EXP 48
56105: PUSH
56106: FOR_TO
56107: IFFALSE 56270
// begin if not mc_build_list [ i ] then
56109: LD_EXP 53
56113: PUSH
56114: LD_VAR 0 3
56118: ARRAY
56119: NOT
56120: IFFALSE 56124
// continue ;
56122: GO 56106
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
56124: LD_VAR 0 6
56128: PUSH
56129: LD_VAR 0 7
56133: PUSH
56134: LD_VAR 0 8
56138: PUSH
56139: LD_VAR 0 9
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: PPUSH
56150: LD_EXP 53
56154: PUSH
56155: LD_VAR 0 3
56159: ARRAY
56160: PUSH
56161: LD_INT 1
56163: ARRAY
56164: PPUSH
56165: CALL 8724 0 2
56169: IFFALSE 56268
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
56171: LD_ADDR_VAR 0 5
56175: PUSH
56176: LD_EXP 53
56180: PUSH
56181: LD_VAR 0 3
56185: ARRAY
56186: PPUSH
56187: LD_INT 1
56189: PPUSH
56190: CALL_OW 3
56194: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
56195: LD_ADDR_EXP 53
56199: PUSH
56200: LD_EXP 53
56204: PPUSH
56205: LD_VAR 0 3
56209: PPUSH
56210: LD_VAR 0 5
56214: PPUSH
56215: CALL_OW 1
56219: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
56220: LD_ADDR_EXP 55
56224: PUSH
56225: LD_EXP 55
56229: PPUSH
56230: LD_VAR 0 3
56234: PUSH
56235: LD_EXP 55
56239: PUSH
56240: LD_VAR 0 3
56244: ARRAY
56245: PUSH
56246: LD_INT 1
56248: PLUS
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PPUSH
56254: LD_VAR 0 1
56258: PPUSH
56259: CALL 3237 0 3
56263: ST_TO_ADDR
// exit ;
56264: POP
56265: POP
56266: GO 56272
// end ; end ;
56268: GO 56106
56270: POP
56271: POP
// end ;
56272: PPOPN 9
56274: END
// on BuildingComplete ( building ) do var i , j , tmp ;
56275: LD_INT 0
56277: PPUSH
56278: PPUSH
56279: PPUSH
// begin if not mc_bases then
56280: LD_EXP 48
56284: NOT
56285: IFFALSE 56289
// exit ;
56287: GO 56490
// for i = 1 to mc_bases do
56289: LD_ADDR_VAR 0 2
56293: PUSH
56294: DOUBLE
56295: LD_INT 1
56297: DEC
56298: ST_TO_ADDR
56299: LD_EXP 48
56303: PUSH
56304: FOR_TO
56305: IFFALSE 56488
// begin if building in mc_construct_list [ i ] then
56307: LD_VAR 0 1
56311: PUSH
56312: LD_EXP 55
56316: PUSH
56317: LD_VAR 0 2
56321: ARRAY
56322: IN
56323: IFFALSE 56486
// begin tmp := mc_construct_list [ i ] diff building ;
56325: LD_ADDR_VAR 0 4
56329: PUSH
56330: LD_EXP 55
56334: PUSH
56335: LD_VAR 0 2
56339: ARRAY
56340: PUSH
56341: LD_VAR 0 1
56345: DIFF
56346: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
56347: LD_ADDR_EXP 55
56351: PUSH
56352: LD_EXP 55
56356: PPUSH
56357: LD_VAR 0 2
56361: PPUSH
56362: LD_VAR 0 4
56366: PPUSH
56367: CALL_OW 1
56371: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
56372: LD_ADDR_EXP 48
56376: PUSH
56377: LD_EXP 48
56381: PPUSH
56382: LD_VAR 0 2
56386: PUSH
56387: LD_EXP 48
56391: PUSH
56392: LD_VAR 0 2
56396: ARRAY
56397: PUSH
56398: LD_INT 1
56400: PLUS
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PPUSH
56406: LD_VAR 0 1
56410: PPUSH
56411: CALL 3237 0 3
56415: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
56416: LD_VAR 0 1
56420: PPUSH
56421: CALL_OW 266
56425: PUSH
56426: LD_INT 32
56428: PUSH
56429: LD_INT 33
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: IN
56436: IFFALSE 56482
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
56438: LD_ADDR_EXP 56
56442: PUSH
56443: LD_EXP 56
56447: PPUSH
56448: LD_VAR 0 2
56452: PUSH
56453: LD_EXP 56
56457: PUSH
56458: LD_VAR 0 2
56462: ARRAY
56463: PUSH
56464: LD_INT 1
56466: PLUS
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PPUSH
56472: LD_VAR 0 1
56476: PPUSH
56477: CALL 3237 0 3
56481: ST_TO_ADDR
// exit ;
56482: POP
56483: POP
56484: GO 56490
// end ; end ;
56486: GO 56304
56488: POP
56489: POP
// end ;
56490: PPOPN 4
56492: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
56493: LD_INT 0
56495: PPUSH
56496: PPUSH
// begin if not mc_bases then
56497: LD_EXP 48
56501: NOT
56502: IFFALSE 56506
// exit ;
56504: GO 56721
// repeat wait ( 0 0$1 ) ;
56506: LD_INT 35
56508: PPUSH
56509: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
56513: LD_VAR 0 2
56517: PPUSH
56518: LD_VAR 0 3
56522: PPUSH
56523: CALL_OW 284
56527: IFFALSE 56506
// if GetResourceTypeXY ( x , y ) = mat_artefact then
56529: LD_VAR 0 2
56533: PPUSH
56534: LD_VAR 0 3
56538: PPUSH
56539: CALL_OW 283
56543: PUSH
56544: LD_INT 4
56546: EQUAL
56547: IFFALSE 56551
// exit ;
56549: GO 56721
// for i = 1 to mc_bases do
56551: LD_ADDR_VAR 0 6
56555: PUSH
56556: DOUBLE
56557: LD_INT 1
56559: DEC
56560: ST_TO_ADDR
56561: LD_EXP 48
56565: PUSH
56566: FOR_TO
56567: IFFALSE 56719
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56569: LD_ADDR_VAR 0 7
56573: PUSH
56574: LD_EXP 48
56578: PUSH
56579: LD_VAR 0 6
56583: ARRAY
56584: PPUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 30
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 30
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: PPUSH
56613: CALL_OW 72
56617: ST_TO_ADDR
// if not depot then
56618: LD_VAR 0 7
56622: NOT
56623: IFFALSE 56627
// continue ;
56625: GO 56566
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
56627: LD_VAR 0 7
56631: PUSH
56632: LD_INT 1
56634: ARRAY
56635: PPUSH
56636: LD_VAR 0 2
56640: PPUSH
56641: LD_VAR 0 3
56645: PPUSH
56646: CALL_OW 297
56650: PUSH
56651: LD_INT 30
56653: LESS
56654: IFFALSE 56717
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
56656: LD_ADDR_EXP 61
56660: PUSH
56661: LD_EXP 61
56665: PPUSH
56666: LD_VAR 0 6
56670: PUSH
56671: LD_EXP 61
56675: PUSH
56676: LD_VAR 0 6
56680: ARRAY
56681: PUSH
56682: LD_INT 1
56684: PLUS
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PPUSH
56690: LD_VAR 0 4
56694: PUSH
56695: LD_VAR 0 2
56699: PUSH
56700: LD_VAR 0 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: PPUSH
56710: CALL 3237 0 3
56714: ST_TO_ADDR
// break ;
56715: GO 56719
// end ; end ;
56717: GO 56566
56719: POP
56720: POP
// end ;
56721: PPOPN 7
56723: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
56724: LD_INT 0
56726: PPUSH
56727: PPUSH
// begin if not mc_bases then
56728: LD_EXP 48
56732: NOT
56733: IFFALSE 56737
// exit ;
56735: GO 56825
// for i = 1 to mc_bases do
56737: LD_ADDR_VAR 0 3
56741: PUSH
56742: DOUBLE
56743: LD_INT 1
56745: DEC
56746: ST_TO_ADDR
56747: LD_EXP 48
56751: PUSH
56752: FOR_TO
56753: IFFALSE 56823
// begin if factory in mc_bases [ i ] then
56755: LD_VAR 0 2
56759: PUSH
56760: LD_EXP 48
56764: PUSH
56765: LD_VAR 0 3
56769: ARRAY
56770: IN
56771: IFFALSE 56821
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
56773: LD_ADDR_EXP 63
56777: PUSH
56778: LD_EXP 63
56782: PPUSH
56783: LD_VAR 0 3
56787: PUSH
56788: LD_EXP 63
56792: PUSH
56793: LD_VAR 0 3
56797: ARRAY
56798: PUSH
56799: LD_INT 1
56801: PLUS
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PPUSH
56807: LD_VAR 0 1
56811: PPUSH
56812: CALL 3237 0 3
56816: ST_TO_ADDR
// exit ;
56817: POP
56818: POP
56819: GO 56825
// end ; end ;
56821: GO 56752
56823: POP
56824: POP
// end ;
56825: PPOPN 4
56827: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
56828: LD_VAR 0 1
56832: PPUSH
56833: CALL_OW 247
56837: PUSH
56838: LD_INT 2
56840: EQUAL
56841: IFFALSE 56845
// exit ;
56843: GO 56862
// if not kamikazed then
56845: LD_EXP 11
56849: NOT
56850: IFFALSE 56862
// kamikazed := unit ;
56852: LD_ADDR_EXP 11
56856: PUSH
56857: LD_VAR 0 1
56861: ST_TO_ADDR
// end ;
56862: PPOPN 1
56864: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
56865: LD_INT 0
56867: PPUSH
56868: PPUSH
// begin if side <> 2 then
56869: LD_VAR 0 3
56873: PUSH
56874: LD_INT 2
56876: NONEQUAL
56877: IFFALSE 56881
// exit ;
56879: GO 57004
// for i = 1 to mc_vehicles do
56881: LD_ADDR_VAR 0 5
56885: PUSH
56886: DOUBLE
56887: LD_INT 1
56889: DEC
56890: ST_TO_ADDR
56891: LD_EXP 63
56895: PUSH
56896: FOR_TO
56897: IFFALSE 57002
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
56899: LD_VAR 0 2
56903: PUSH
56904: LD_EXP 63
56908: PUSH
56909: LD_VAR 0 5
56913: ARRAY
56914: IN
56915: PUSH
56916: LD_VAR 0 1
56920: PUSH
56921: LD_EXP 63
56925: PUSH
56926: LD_VAR 0 5
56930: ARRAY
56931: IN
56932: OR
56933: IFFALSE 57000
// begin tmp := mc_vehicles [ i ] diff old ;
56935: LD_ADDR_VAR 0 6
56939: PUSH
56940: LD_EXP 63
56944: PUSH
56945: LD_VAR 0 5
56949: ARRAY
56950: PUSH
56951: LD_VAR 0 2
56955: DIFF
56956: ST_TO_ADDR
// tmp := tmp diff new ;
56957: LD_ADDR_VAR 0 6
56961: PUSH
56962: LD_VAR 0 6
56966: PUSH
56967: LD_VAR 0 1
56971: DIFF
56972: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
56973: LD_ADDR_EXP 63
56977: PUSH
56978: LD_EXP 63
56982: PPUSH
56983: LD_VAR 0 5
56987: PPUSH
56988: LD_VAR 0 6
56992: PPUSH
56993: CALL_OW 1
56997: ST_TO_ADDR
// break ;
56998: GO 57002
// end ;
57000: GO 56896
57002: POP
57003: POP
// end ;
57004: PPOPN 6
57006: END
// on BuildingCaptured ( building , side , capturning_unit ) do var i , tmp ;
57007: LD_INT 0
57009: PPUSH
57010: PPUSH
// begin if side <> 2 then
57011: LD_VAR 0 2
57015: PUSH
57016: LD_INT 2
57018: NONEQUAL
57019: IFFALSE 57023
// exit ;
57021: GO 57112
// for i = 1 to mc_bases do
57023: LD_ADDR_VAR 0 4
57027: PUSH
57028: DOUBLE
57029: LD_INT 1
57031: DEC
57032: ST_TO_ADDR
57033: LD_EXP 48
57037: PUSH
57038: FOR_TO
57039: IFFALSE 57110
// if building in mc_bases [ i ] then
57041: LD_VAR 0 1
57045: PUSH
57046: LD_EXP 48
57050: PUSH
57051: LD_VAR 0 4
57055: ARRAY
57056: IN
57057: IFFALSE 57108
// begin tmp := mc_bases [ i ] diff building ;
57059: LD_ADDR_VAR 0 5
57063: PUSH
57064: LD_EXP 48
57068: PUSH
57069: LD_VAR 0 4
57073: ARRAY
57074: PUSH
57075: LD_VAR 0 1
57079: DIFF
57080: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
57081: LD_ADDR_EXP 48
57085: PUSH
57086: LD_EXP 48
57090: PPUSH
57091: LD_VAR 0 4
57095: PPUSH
57096: LD_VAR 0 5
57100: PPUSH
57101: CALL_OW 1
57105: ST_TO_ADDR
// break ;
57106: GO 57110
// end ;
57108: GO 57038
57110: POP
57111: POP
// end ; end_of_file
57112: PPOPN 5
57114: END
// every 0 0$1 trigger game do
57115: LD_EXP 2
57119: IFFALSE 57149
57121: GO 57123
57123: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
57124: LD_INT 7
57126: PUSH
57127: LD_INT 6
57129: PUSH
57130: LD_INT 4
57132: PUSH
57133: LD_INT 6
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: PPUSH
57142: LD_INT 1750
57144: PPUSH
57145: CALL 57150 0 2
57149: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
57150: LD_INT 0
57152: PPUSH
57153: PPUSH
57154: PPUSH
// if not areas then
57155: LD_VAR 0 1
57159: NOT
57160: IFFALSE 57164
// exit ;
57162: GO 57276
// repeat wait ( time ) ;
57164: LD_VAR 0 2
57168: PPUSH
57169: CALL_OW 67
// p := rand ( 1 , 90 ) ;
57173: LD_ADDR_VAR 0 5
57177: PUSH
57178: LD_INT 1
57180: PPUSH
57181: LD_INT 90
57183: PPUSH
57184: CALL_OW 12
57188: ST_TO_ADDR
// for i in areas do
57189: LD_ADDR_VAR 0 4
57193: PUSH
57194: LD_VAR 0 1
57198: PUSH
57199: FOR_IN
57200: IFFALSE 57253
// begin if Prob ( p ) then
57202: LD_VAR 0 5
57206: PPUSH
57207: CALL_OW 13
57211: IFFALSE 57251
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
57213: LD_INT 1
57215: PPUSH
57216: LD_INT 5
57218: PPUSH
57219: CALL_OW 12
57223: PPUSH
57224: LD_VAR 0 4
57228: PPUSH
57229: LD_INT 1
57231: PPUSH
57232: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
57236: LD_INT 455
57238: PPUSH
57239: LD_INT 595
57241: PPUSH
57242: CALL_OW 12
57246: PPUSH
57247: CALL_OW 67
// end ; end ;
57251: GO 57199
57253: POP
57254: POP
// time := time + 0 0$3 ;
57255: LD_ADDR_VAR 0 2
57259: PUSH
57260: LD_VAR 0 2
57264: PUSH
57265: LD_INT 105
57267: PLUS
57268: ST_TO_ADDR
// until not game ;
57269: LD_EXP 2
57273: NOT
57274: IFFALSE 57164
// end ;
57276: LD_VAR 0 3
57280: RET
