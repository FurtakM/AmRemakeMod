// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 42 0 0
// InitMacro ;
  12: CALL 26640 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareArabian ;
  29: CALL 25956 0 0
// RunMacro ;
  33: CALL 26790 0 0
// Debuger ;
  37: CALL 82 0 0
// end ;
  41: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; function InitVariables ; begin
  42: LD_INT 0
  44: PPUSH
// debug := true ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 1
  52: ST_TO_ADDR
// game := true ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_INT 1
  60: ST_TO_ADDR
// mission_prefix := 11_ ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_STRING 11_
  68: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_STRING 10c_
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// function Debuger ; var i ; begin
  82: LD_INT 0
  84: PPUSH
  85: PPUSH
// if not debug then
  86: LD_EXP 1
  90: NOT
  91: IFFALSE 95
// exit ;
  93: GO 192
// game_speed := 7 ;
  95: LD_ADDR_OWVAR 65
  99: PUSH
 100: LD_INT 7
 102: ST_TO_ADDR
// uc_side := 1 ;
 103: LD_ADDR_OWVAR 20
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// uc_nation := 1 ;
 111: LD_ADDR_OWVAR 21
 115: PUSH
 116: LD_INT 1
 118: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 119: LD_ADDR_OWVAR 37
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// vc_control := control_computer ;
 127: LD_ADDR_OWVAR 38
 131: PUSH
 132: LD_INT 3
 134: ST_TO_ADDR
// vc_engine := engine_combustion ;
 135: LD_ADDR_OWVAR 39
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 143: LD_ADDR_OWVAR 40
 147: PUSH
 148: LD_INT 7
 150: ST_TO_ADDR
// for i = 1 to 4 do
 151: LD_ADDR_VAR 0 2
 155: PUSH
 156: DOUBLE
 157: LD_INT 1
 159: DEC
 160: ST_TO_ADDR
 161: LD_INT 4
 163: PUSH
 164: FOR_TO
 165: IFFALSE 190
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 167: CALL_OW 45
 171: PPUSH
 172: LD_INT 137
 174: PPUSH
 175: LD_INT 91
 177: PPUSH
 178: LD_INT 6
 180: PPUSH
 181: LD_INT 0
 183: PPUSH
 184: CALL_OW 50
 188: GO 164
 190: POP
 191: POP
// end ; end_of_file
 192: LD_VAR 0 1
 196: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , un , tmp , selected ; begin
 197: LD_INT 0
 199: PPUSH
 200: PPUSH
 201: PPUSH
 202: PPUSH
 203: PPUSH
// uc_side := 4 ;
 204: LD_ADDR_OWVAR 20
 208: PUSH
 209: LD_INT 4
 211: ST_TO_ADDR
// uc_nation := 1 ;
 212: LD_ADDR_OWVAR 21
 216: PUSH
 217: LD_INT 1
 219: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 220: LD_ADDR_EXP 14
 224: PUSH
 225: LD_STRING Powell
 227: PPUSH
 228: LD_INT 0
 230: PPUSH
 231: CALL 744 0 2
 235: ST_TO_ADDR
// uc_side := 1 ;
 236: LD_ADDR_OWVAR 20
 240: PUSH
 241: LD_INT 1
 243: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 244: LD_ADDR_EXP 5
 248: PUSH
 249: LD_STRING JMM
 251: PPUSH
 252: LD_EXP 1
 256: NOT
 257: PPUSH
 258: CALL 744 0 2
 262: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 263: LD_ADDR_EXP 6
 267: PUSH
 268: LD_STRING Lisa
 270: PPUSH
 271: LD_EXP 1
 275: NOT
 276: PPUSH
 277: CALL 744 0 2
 281: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 282: LD_ADDR_EXP 7
 286: PUSH
 287: LD_STRING Donaldson
 289: PPUSH
 290: LD_EXP 1
 294: NOT
 295: PPUSH
 296: CALL 744 0 2
 300: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 301: LD_ADDR_EXP 8
 305: PUSH
 306: LD_STRING Bobby
 308: PPUSH
 309: LD_EXP 1
 313: NOT
 314: PPUSH
 315: CALL 744 0 2
 319: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 320: LD_ADDR_EXP 9
 324: PUSH
 325: LD_STRING Cyrus
 327: PPUSH
 328: LD_EXP 1
 332: NOT
 333: PPUSH
 334: CALL 744 0 2
 338: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 339: LD_ADDR_EXP 10
 343: PUSH
 344: LD_STRING Denis
 346: PPUSH
 347: LD_EXP 1
 351: NOT
 352: PPUSH
 353: CALL 744 0 2
 357: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 358: LD_ADDR_EXP 11
 362: PUSH
 363: LD_STRING Brown
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: CALL 744 0 2
 376: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 377: LD_ADDR_EXP 12
 381: PUSH
 382: LD_STRING Gladstone
 384: PPUSH
 385: LD_EXP 1
 389: NOT
 390: PPUSH
 391: CALL 744 0 2
 395: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 396: LD_ADDR_EXP 13
 400: PUSH
 401: LD_STRING Houten
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: CALL 744 0 2
 414: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 415: LD_ADDR_EXP 15
 419: PUSH
 420: LD_STRING Cornel
 422: PPUSH
 423: LD_EXP 1
 427: NOT
 428: PPUSH
 429: CALL 744 0 2
 433: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 434: LD_ADDR_EXP 16
 438: PUSH
 439: LD_STRING Gary
 441: PPUSH
 442: LD_EXP 1
 446: NOT
 447: PPUSH
 448: CALL 744 0 2
 452: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 453: LD_ADDR_EXP 17
 457: PUSH
 458: LD_STRING Frank
 460: PPUSH
 461: LD_EXP 1
 465: NOT
 466: PPUSH
 467: CALL 744 0 2
 471: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 472: LD_ADDR_EXP 18
 476: PUSH
 477: LD_STRING Kikuchi
 479: PPUSH
 480: LD_EXP 1
 484: NOT
 485: PPUSH
 486: CALL 744 0 2
 490: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 491: LD_ADDR_VAR 0 4
 495: PUSH
 496: LD_EXP 6
 500: PUSH
 501: LD_EXP 7
 505: PUSH
 506: LD_EXP 8
 510: PUSH
 511: LD_EXP 9
 515: PUSH
 516: LD_EXP 10
 520: PUSH
 521: LD_EXP 11
 525: PUSH
 526: LD_EXP 12
 530: PUSH
 531: LD_EXP 13
 535: PUSH
 536: LD_EXP 15
 540: PUSH
 541: LD_EXP 16
 545: PUSH
 546: LD_EXP 17
 550: PUSH
 551: LD_EXP 18
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: ST_TO_ADDR
// tmp := tmp diff 0 ;
 570: LD_ADDR_VAR 0 4
 574: PUSH
 575: LD_VAR 0 4
 579: PUSH
 580: LD_INT 0
 582: DIFF
 583: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
 584: LD_ADDR_VAR 0 4
 588: PUSH
 589: LD_VAR 0 4
 593: PUSH
 594: LD_STRING 10_lock
 596: PPUSH
 597: CALL_OW 31
 601: UNION
 602: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
 603: LD_ADDR_VAR 0 4
 607: PUSH
 608: LD_VAR 0 4
 612: PUSH
 613: LD_STRING 10c_lock
 615: PPUSH
 616: CALL_OW 31
 620: UNION
 621: ST_TO_ADDR
// selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ class_soldier , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , class_scientistic , [ class_sniper , 0 , 2 ] ] ) ;
 622: LD_ADDR_VAR 0 5
 626: PUSH
 627: LD_STRING 1
 629: PPUSH
 630: LD_INT 12
 632: PPUSH
 633: LD_INT 12
 635: PPUSH
 636: LD_INT -5
 638: PUSH
 639: LD_EXP 5
 643: PUSH
 644: LD_INT -2
 646: PUSH
 647: LD_INT -3
 649: PUSH
 650: LD_INT -5
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: LIST
 657: LIST
 658: LIST
 659: PUSH
 660: LD_VAR 0 4
 664: ADD
 665: PUSH
 666: LD_INT -6
 668: PUSH
 669: LD_INT -4
 671: PUSH
 672: LD_EXP 14
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: ADD
 682: PPUSH
 683: LD_INT 1
 685: PUSH
 686: LD_INT 2
 688: PUSH
 689: LD_INT 1
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 0
 701: PUSH
 702: LD_INT 5
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: LIST
 709: PUSH
 710: LD_INT 4
 712: PUSH
 713: LD_INT 5
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: LD_INT 2
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 42
 738: ST_TO_ADDR
// end ; end_of_file
 739: LD_VAR 0 1
 743: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 744: LD_INT 0
 746: PPUSH
 747: PPUSH
// if exist_mode then
 748: LD_VAR 0 2
 752: IFFALSE 777
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
 754: LD_ADDR_VAR 0 4
 758: PUSH
 759: LD_EXP 4
 763: PUSH
 764: LD_VAR 0 1
 768: STR
 769: PPUSH
 770: CALL_OW 34
 774: ST_TO_ADDR
 775: GO 792
// unit := NewCharacter ( ident ) ;
 777: LD_ADDR_VAR 0 4
 781: PUSH
 782: LD_VAR 0 1
 786: PPUSH
 787: CALL_OW 25
 791: ST_TO_ADDR
// result := unit ;
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: LD_VAR 0 4
 801: ST_TO_ADDR
// end ;
 802: LD_VAR 0 3
 806: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
 807: LD_INT 0
 809: PPUSH
 810: PPUSH
 811: PPUSH
 812: PPUSH
// if pos < 1 then
 813: LD_VAR 0 2
 817: PUSH
 818: LD_INT 1
 820: LESS
 821: IFFALSE 825
// exit ;
 823: GO 1128
// if pos = 1 then
 825: LD_VAR 0 2
 829: PUSH
 830: LD_INT 1
 832: EQUAL
 833: IFFALSE 866
// result := Replace ( arr , pos [ 1 ] , value ) else
 835: LD_ADDR_VAR 0 4
 839: PUSH
 840: LD_VAR 0 1
 844: PPUSH
 845: LD_VAR 0 2
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PPUSH
 854: LD_VAR 0 3
 858: PPUSH
 859: CALL_OW 1
 863: ST_TO_ADDR
 864: GO 1128
// begin tmp := arr ;
 866: LD_ADDR_VAR 0 6
 870: PUSH
 871: LD_VAR 0 1
 875: ST_TO_ADDR
// s_arr := [ tmp ] ;
 876: LD_ADDR_VAR 0 7
 880: PUSH
 881: LD_VAR 0 6
 885: PUSH
 886: EMPTY
 887: LIST
 888: ST_TO_ADDR
// for i = 1 to pos - 1 do
 889: LD_ADDR_VAR 0 5
 893: PUSH
 894: DOUBLE
 895: LD_INT 1
 897: DEC
 898: ST_TO_ADDR
 899: LD_VAR 0 2
 903: PUSH
 904: LD_INT 1
 906: MINUS
 907: PUSH
 908: FOR_TO
 909: IFFALSE 954
// begin tmp := tmp [ pos [ i ] ] ;
 911: LD_ADDR_VAR 0 6
 915: PUSH
 916: LD_VAR 0 6
 920: PUSH
 921: LD_VAR 0 2
 925: PUSH
 926: LD_VAR 0 5
 930: ARRAY
 931: ARRAY
 932: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
 933: LD_ADDR_VAR 0 7
 937: PUSH
 938: LD_VAR 0 7
 942: PUSH
 943: LD_VAR 0 6
 947: PUSH
 948: EMPTY
 949: LIST
 950: ADD
 951: ST_TO_ADDR
// end ;
 952: GO 908
 954: POP
 955: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
 956: LD_ADDR_VAR 0 6
 960: PUSH
 961: LD_VAR 0 6
 965: PPUSH
 966: LD_VAR 0 2
 970: PUSH
 971: LD_VAR 0 2
 975: ARRAY
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: CALL_OW 1
 986: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
 987: LD_ADDR_VAR 0 7
 991: PUSH
 992: LD_VAR 0 7
 996: PPUSH
 997: LD_VAR 0 7
1001: PPUSH
1002: LD_VAR 0 6
1006: PPUSH
1007: CALL_OW 1
1011: ST_TO_ADDR
// for i = s_arr downto 2 do
1012: LD_ADDR_VAR 0 5
1016: PUSH
1017: DOUBLE
1018: LD_VAR 0 7
1022: INC
1023: ST_TO_ADDR
1024: LD_INT 2
1026: PUSH
1027: FOR_DOWNTO
1028: IFFALSE 1112
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
1030: LD_ADDR_VAR 0 6
1034: PUSH
1035: LD_VAR 0 7
1039: PUSH
1040: LD_VAR 0 5
1044: PUSH
1045: LD_INT 1
1047: MINUS
1048: ARRAY
1049: PPUSH
1050: LD_VAR 0 2
1054: PUSH
1055: LD_VAR 0 5
1059: PUSH
1060: LD_INT 1
1062: MINUS
1063: ARRAY
1064: PPUSH
1065: LD_VAR 0 7
1069: PUSH
1070: LD_VAR 0 5
1074: ARRAY
1075: PPUSH
1076: CALL_OW 1
1080: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
1081: LD_ADDR_VAR 0 7
1085: PUSH
1086: LD_VAR 0 7
1090: PPUSH
1091: LD_VAR 0 5
1095: PUSH
1096: LD_INT 1
1098: MINUS
1099: PPUSH
1100: LD_VAR 0 6
1104: PPUSH
1105: CALL_OW 1
1109: ST_TO_ADDR
// end ;
1110: GO 1027
1112: POP
1113: POP
// result := s_arr [ 1 ] ;
1114: LD_ADDR_VAR 0 4
1118: PUSH
1119: LD_VAR 0 7
1123: PUSH
1124: LD_INT 1
1126: ARRAY
1127: ST_TO_ADDR
// end ; end ;
1128: LD_VAR 0 4
1132: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
1133: LD_INT 0
1135: PPUSH
1136: PPUSH
// if not list then
1137: LD_VAR 0 1
1141: NOT
1142: IFFALSE 1146
// exit ;
1144: GO 1237
// i := list [ pos1 ] ;
1146: LD_ADDR_VAR 0 5
1150: PUSH
1151: LD_VAR 0 1
1155: PUSH
1156: LD_VAR 0 2
1160: ARRAY
1161: ST_TO_ADDR
// if not i then
1162: LD_VAR 0 5
1166: NOT
1167: IFFALSE 1171
// exit ;
1169: GO 1237
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
1171: LD_ADDR_VAR 0 1
1175: PUSH
1176: LD_VAR 0 1
1180: PPUSH
1181: LD_VAR 0 2
1185: PPUSH
1186: LD_VAR 0 1
1190: PUSH
1191: LD_VAR 0 3
1195: ARRAY
1196: PPUSH
1197: CALL_OW 1
1201: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
1202: LD_ADDR_VAR 0 1
1206: PUSH
1207: LD_VAR 0 1
1211: PPUSH
1212: LD_VAR 0 3
1216: PPUSH
1217: LD_VAR 0 5
1221: PPUSH
1222: CALL_OW 1
1226: ST_TO_ADDR
// result := list ;
1227: LD_ADDR_VAR 0 4
1231: PUSH
1232: LD_VAR 0 1
1236: ST_TO_ADDR
// end ;
1237: LD_VAR 0 4
1241: RET
// export function Add ( list , pos , val ) ; begin
1242: LD_INT 0
1244: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
1245: LD_ADDR_VAR 0 4
1249: PUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_VAR 0 3
1264: PPUSH
1265: CALL 807 0 3
1269: ST_TO_ADDR
1270: LD_VAR 0 4
1274: RET
// export function SortByDistanceUnit ( unit , list , asc ) ; begin
1275: LD_INT 0
1277: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc ) ;
1278: LD_ADDR_VAR 0 4
1282: PUSH
1283: LD_VAR 0 1
1287: PPUSH
1288: CALL_OW 250
1292: PPUSH
1293: LD_VAR 0 1
1297: PPUSH
1298: CALL_OW 251
1302: PPUSH
1303: LD_VAR 0 2
1307: PPUSH
1308: LD_VAR 0 3
1312: PPUSH
1313: CALL 1323 0 4
1317: ST_TO_ADDR
// end ;
1318: LD_VAR 0 4
1322: RET
// export function SortByDistanceXY ( x , y , list , asc ) ; var i , j , tmp ; begin
1323: LD_INT 0
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
// if not list then
1329: LD_VAR 0 3
1333: NOT
1334: IFFALSE 1338
// exit ;
1336: GO 1646
// result := [ ] ;
1338: LD_ADDR_VAR 0 5
1342: PUSH
1343: EMPTY
1344: ST_TO_ADDR
// for i in list do
1345: LD_ADDR_VAR 0 6
1349: PUSH
1350: LD_VAR 0 3
1354: PUSH
1355: FOR_IN
1356: IFFALSE 1558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
1358: LD_ADDR_VAR 0 8
1362: PUSH
1363: LD_VAR 0 6
1367: PPUSH
1368: LD_VAR 0 1
1372: PPUSH
1373: LD_VAR 0 2
1377: PPUSH
1378: CALL_OW 297
1382: ST_TO_ADDR
// if not result then
1383: LD_VAR 0 5
1387: NOT
1388: IFFALSE 1414
// result := [ [ i , tmp ] ] else
1390: LD_ADDR_VAR 0 5
1394: PUSH
1395: LD_VAR 0 6
1399: PUSH
1400: LD_VAR 0 8
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: ST_TO_ADDR
1412: GO 1556
// begin if result [ result ] [ 2 ] < tmp then
1414: LD_VAR 0 5
1418: PUSH
1419: LD_VAR 0 5
1423: ARRAY
1424: PUSH
1425: LD_INT 2
1427: ARRAY
1428: PUSH
1429: LD_VAR 0 8
1433: LESS
1434: IFFALSE 1476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
1436: LD_ADDR_VAR 0 5
1440: PUSH
1441: LD_VAR 0 5
1445: PPUSH
1446: LD_VAR 0 5
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: PPUSH
1455: LD_VAR 0 6
1459: PUSH
1460: LD_VAR 0 8
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 2
1473: ST_TO_ADDR
1474: GO 1556
// for j = 1 to result do
1476: LD_ADDR_VAR 0 7
1480: PUSH
1481: DOUBLE
1482: LD_INT 1
1484: DEC
1485: ST_TO_ADDR
1486: LD_VAR 0 5
1490: PUSH
1491: FOR_TO
1492: IFFALSE 1554
// begin if tmp < result [ j ] [ 2 ] then
1494: LD_VAR 0 8
1498: PUSH
1499: LD_VAR 0 5
1503: PUSH
1504: LD_VAR 0 7
1508: ARRAY
1509: PUSH
1510: LD_INT 2
1512: ARRAY
1513: LESS
1514: IFFALSE 1552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
1516: LD_ADDR_VAR 0 5
1520: PUSH
1521: LD_VAR 0 5
1525: PPUSH
1526: LD_VAR 0 7
1530: PPUSH
1531: LD_VAR 0 6
1535: PUSH
1536: LD_VAR 0 8
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: PPUSH
1545: CALL_OW 2
1549: ST_TO_ADDR
// break ;
1550: GO 1554
// end ; end ;
1552: GO 1491
1554: POP
1555: POP
// end ; end ;
1556: GO 1355
1558: POP
1559: POP
// if result and not asc then
1560: LD_VAR 0 5
1564: PUSH
1565: LD_VAR 0 4
1569: NOT
1570: AND
1571: IFFALSE 1646
// begin tmp := result ;
1573: LD_ADDR_VAR 0 8
1577: PUSH
1578: LD_VAR 0 5
1582: ST_TO_ADDR
// for i = tmp downto 1 do
1583: LD_ADDR_VAR 0 6
1587: PUSH
1588: DOUBLE
1589: LD_VAR 0 8
1593: INC
1594: ST_TO_ADDR
1595: LD_INT 1
1597: PUSH
1598: FOR_DOWNTO
1599: IFFALSE 1644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
1601: LD_ADDR_VAR 0 5
1605: PUSH
1606: LD_VAR 0 5
1610: PPUSH
1611: LD_VAR 0 8
1615: PUSH
1616: LD_VAR 0 6
1620: MINUS
1621: PUSH
1622: LD_INT 1
1624: PLUS
1625: PPUSH
1626: LD_VAR 0 8
1630: PUSH
1631: LD_VAR 0 6
1635: ARRAY
1636: PPUSH
1637: CALL_OW 1
1641: ST_TO_ADDR
1642: GO 1598
1644: POP
1645: POP
// end ; end ;
1646: LD_VAR 0 5
1650: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
1651: LD_INT 0
1653: PPUSH
1654: PPUSH
1655: PPUSH
1656: PPUSH
1657: PPUSH
1658: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
1659: LD_ADDR_VAR 0 5
1663: PUSH
1664: LD_INT 0
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 0
1672: PUSH
1673: LD_INT 0
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: ST_TO_ADDR
// if not x or not y then
1682: LD_VAR 0 2
1686: NOT
1687: PUSH
1688: LD_VAR 0 3
1692: NOT
1693: OR
1694: IFFALSE 1698
// exit ;
1696: GO 3326
// if not range then
1698: LD_VAR 0 4
1702: NOT
1703: IFFALSE 1713
// range := 10 ;
1705: LD_ADDR_VAR 0 4
1709: PUSH
1710: LD_INT 10
1712: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
1713: LD_ADDR_VAR 0 8
1717: PUSH
1718: LD_INT 81
1720: PUSH
1721: LD_VAR 0 1
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 92
1732: PUSH
1733: LD_VAR 0 2
1737: PUSH
1738: LD_VAR 0 3
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 69
1762: ST_TO_ADDR
// if not tmp then
1763: LD_VAR 0 8
1767: NOT
1768: IFFALSE 1772
// exit ;
1770: GO 3326
// for i in tmp do
1772: LD_ADDR_VAR 0 6
1776: PUSH
1777: LD_VAR 0 8
1781: PUSH
1782: FOR_IN
1783: IFFALSE 3301
// begin points := [ 0 , 0 , 0 ] ;
1785: LD_ADDR_VAR 0 9
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 0
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: ST_TO_ADDR
// bpoints := 1 ;
1804: LD_ADDR_VAR 0 10
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// case GetType ( i ) of unit_human :
1812: LD_VAR 0 6
1816: PPUSH
1817: CALL_OW 247
1821: PUSH
1822: LD_INT 1
1824: DOUBLE
1825: EQUAL
1826: IFTRUE 1830
1828: GO 2408
1830: POP
// begin if GetClass ( i ) = 1 then
1831: LD_VAR 0 6
1835: PPUSH
1836: CALL_OW 257
1840: PUSH
1841: LD_INT 1
1843: EQUAL
1844: IFFALSE 1865
// points := [ 10 , 5 , 3 ] ;
1846: LD_ADDR_VAR 0 9
1850: PUSH
1851: LD_INT 10
1853: PUSH
1854: LD_INT 5
1856: PUSH
1857: LD_INT 3
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: LIST
1864: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
1865: LD_VAR 0 6
1869: PPUSH
1870: CALL_OW 257
1874: PUSH
1875: LD_INT 2
1877: PUSH
1878: LD_INT 3
1880: PUSH
1881: LD_INT 4
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: LIST
1888: IN
1889: IFFALSE 1910
// points := [ 3 , 2 , 1 ] ;
1891: LD_ADDR_VAR 0 9
1895: PUSH
1896: LD_INT 3
1898: PUSH
1899: LD_INT 2
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: EMPTY
1906: LIST
1907: LIST
1908: LIST
1909: ST_TO_ADDR
// if GetClass ( i ) = 5 then
1910: LD_VAR 0 6
1914: PPUSH
1915: CALL_OW 257
1919: PUSH
1920: LD_INT 5
1922: EQUAL
1923: IFFALSE 1944
// points := [ 130 , 5 , 2 ] ;
1925: LD_ADDR_VAR 0 9
1929: PUSH
1930: LD_INT 130
1932: PUSH
1933: LD_INT 5
1935: PUSH
1936: LD_INT 2
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: LIST
1943: ST_TO_ADDR
// if GetClass ( i ) = 8 then
1944: LD_VAR 0 6
1948: PPUSH
1949: CALL_OW 257
1953: PUSH
1954: LD_INT 8
1956: EQUAL
1957: IFFALSE 1978
// points := [ 35 , 35 , 30 ] ;
1959: LD_ADDR_VAR 0 9
1963: PUSH
1964: LD_INT 35
1966: PUSH
1967: LD_INT 35
1969: PUSH
1970: LD_INT 30
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: LIST
1977: ST_TO_ADDR
// if GetClass ( i ) = 9 then
1978: LD_VAR 0 6
1982: PPUSH
1983: CALL_OW 257
1987: PUSH
1988: LD_INT 9
1990: EQUAL
1991: IFFALSE 2012
// points := [ 20 , 55 , 40 ] ;
1993: LD_ADDR_VAR 0 9
1997: PUSH
1998: LD_INT 20
2000: PUSH
2001: LD_INT 55
2003: PUSH
2004: LD_INT 40
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: LIST
2011: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
2012: LD_VAR 0 6
2016: PPUSH
2017: CALL_OW 257
2021: PUSH
2022: LD_INT 12
2024: PUSH
2025: LD_INT 16
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: IN
2032: IFFALSE 2053
// points := [ 5 , 3 , 2 ] ;
2034: LD_ADDR_VAR 0 9
2038: PUSH
2039: LD_INT 5
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: LD_INT 2
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: ST_TO_ADDR
// if GetClass ( i ) = 17 then
2053: LD_VAR 0 6
2057: PPUSH
2058: CALL_OW 257
2062: PUSH
2063: LD_INT 17
2065: EQUAL
2066: IFFALSE 2087
// points := [ 100 , 50 , 75 ] ;
2068: LD_ADDR_VAR 0 9
2072: PUSH
2073: LD_INT 100
2075: PUSH
2076: LD_INT 50
2078: PUSH
2079: LD_INT 75
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: ST_TO_ADDR
// if GetClass ( i ) = 15 then
2087: LD_VAR 0 6
2091: PPUSH
2092: CALL_OW 257
2096: PUSH
2097: LD_INT 15
2099: EQUAL
2100: IFFALSE 2121
// points := [ 10 , 5 , 3 ] ;
2102: LD_ADDR_VAR 0 9
2106: PUSH
2107: LD_INT 10
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: LD_INT 3
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: ST_TO_ADDR
// if GetClass ( i ) = 14 then
2121: LD_VAR 0 6
2125: PPUSH
2126: CALL_OW 257
2130: PUSH
2131: LD_INT 14
2133: EQUAL
2134: IFFALSE 2155
// points := [ 10 , 0 , 0 ] ;
2136: LD_ADDR_VAR 0 9
2140: PUSH
2141: LD_INT 10
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 0
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: LIST
2154: ST_TO_ADDR
// if GetClass ( i ) = 11 then
2155: LD_VAR 0 6
2159: PPUSH
2160: CALL_OW 257
2164: PUSH
2165: LD_INT 11
2167: EQUAL
2168: IFFALSE 2189
// points := [ 30 , 10 , 5 ] ;
2170: LD_ADDR_VAR 0 9
2174: PUSH
2175: LD_INT 30
2177: PUSH
2178: LD_INT 10
2180: PUSH
2181: LD_INT 5
2183: PUSH
2184: EMPTY
2185: LIST
2186: LIST
2187: LIST
2188: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
2189: LD_VAR 0 1
2193: PPUSH
2194: LD_INT 5
2196: PPUSH
2197: CALL_OW 321
2201: PUSH
2202: LD_INT 2
2204: EQUAL
2205: IFFALSE 2222
// bpoints := bpoints * 1.8 ;
2207: LD_ADDR_VAR 0 10
2211: PUSH
2212: LD_VAR 0 10
2216: PUSH
2217: LD_REAL  1.80000000000000E+0000
2220: MUL
2221: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
2222: LD_VAR 0 6
2226: PPUSH
2227: CALL_OW 257
2231: PUSH
2232: LD_INT 1
2234: PUSH
2235: LD_INT 2
2237: PUSH
2238: LD_INT 3
2240: PUSH
2241: LD_INT 4
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: LIST
2248: LIST
2249: IN
2250: PUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: LD_INT 51
2258: PPUSH
2259: CALL_OW 321
2263: PUSH
2264: LD_INT 2
2266: EQUAL
2267: AND
2268: IFFALSE 2285
// bpoints := bpoints * 1.2 ;
2270: LD_ADDR_VAR 0 10
2274: PUSH
2275: LD_VAR 0 10
2279: PUSH
2280: LD_REAL  1.20000000000000E+0000
2283: MUL
2284: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
2285: LD_VAR 0 6
2289: PPUSH
2290: CALL_OW 257
2294: PUSH
2295: LD_INT 5
2297: PUSH
2298: LD_INT 7
2300: PUSH
2301: LD_INT 9
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: LIST
2308: IN
2309: PUSH
2310: LD_VAR 0 1
2314: PPUSH
2315: LD_INT 52
2317: PPUSH
2318: CALL_OW 321
2322: PUSH
2323: LD_INT 2
2325: EQUAL
2326: AND
2327: IFFALSE 2344
// bpoints := bpoints * 1.5 ;
2329: LD_ADDR_VAR 0 10
2333: PUSH
2334: LD_VAR 0 10
2338: PUSH
2339: LD_REAL  1.50000000000000E+0000
2342: MUL
2343: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
2344: LD_VAR 0 1
2348: PPUSH
2349: LD_INT 66
2351: PPUSH
2352: CALL_OW 321
2356: PUSH
2357: LD_INT 2
2359: EQUAL
2360: IFFALSE 2377
// bpoints := bpoints * 1.1 ;
2362: LD_ADDR_VAR 0 10
2366: PUSH
2367: LD_VAR 0 10
2371: PUSH
2372: LD_REAL  1.10000000000000E+0000
2375: MUL
2376: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
2377: LD_ADDR_VAR 0 10
2381: PUSH
2382: LD_VAR 0 10
2386: PUSH
2387: LD_VAR 0 6
2391: PPUSH
2392: LD_INT 1
2394: PPUSH
2395: CALL_OW 259
2399: PUSH
2400: LD_REAL  1.15000000000000E+0000
2403: MUL
2404: MUL
2405: ST_TO_ADDR
// end ; unit_vehicle :
2406: GO 3230
2408: LD_INT 2
2410: DOUBLE
2411: EQUAL
2412: IFTRUE 2416
2414: GO 3218
2416: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
2417: LD_VAR 0 6
2421: PPUSH
2422: CALL_OW 264
2426: PUSH
2427: LD_INT 2
2429: PUSH
2430: LD_INT 42
2432: PUSH
2433: LD_INT 24
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: IN
2441: IFFALSE 2462
// points := [ 25 , 5 , 3 ] ;
2443: LD_ADDR_VAR 0 9
2447: PUSH
2448: LD_INT 25
2450: PUSH
2451: LD_INT 5
2453: PUSH
2454: LD_INT 3
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: LIST
2461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
2462: LD_VAR 0 6
2466: PPUSH
2467: CALL_OW 264
2471: PUSH
2472: LD_INT 4
2474: PUSH
2475: LD_INT 43
2477: PUSH
2478: LD_INT 25
2480: PUSH
2481: EMPTY
2482: LIST
2483: LIST
2484: LIST
2485: IN
2486: IFFALSE 2507
// points := [ 40 , 15 , 5 ] ;
2488: LD_ADDR_VAR 0 9
2492: PUSH
2493: LD_INT 40
2495: PUSH
2496: LD_INT 15
2498: PUSH
2499: LD_INT 5
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: LIST
2506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
2507: LD_VAR 0 6
2511: PPUSH
2512: CALL_OW 264
2516: PUSH
2517: LD_INT 3
2519: PUSH
2520: LD_INT 23
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: IN
2527: IFFALSE 2548
// points := [ 7 , 25 , 8 ] ;
2529: LD_ADDR_VAR 0 9
2533: PUSH
2534: LD_INT 7
2536: PUSH
2537: LD_INT 25
2539: PUSH
2540: LD_INT 8
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
2548: LD_VAR 0 6
2552: PPUSH
2553: CALL_OW 264
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 27
2563: PUSH
2564: LD_INT 44
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: IN
2572: IFFALSE 2593
// points := [ 14 , 50 , 16 ] ;
2574: LD_ADDR_VAR 0 9
2578: PUSH
2579: LD_INT 14
2581: PUSH
2582: LD_INT 50
2584: PUSH
2585: LD_INT 16
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
2593: LD_VAR 0 6
2597: PPUSH
2598: CALL_OW 264
2602: PUSH
2603: LD_INT 6
2605: PUSH
2606: LD_INT 46
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: IN
2613: IFFALSE 2634
// points := [ 32 , 120 , 70 ] ;
2615: LD_ADDR_VAR 0 9
2619: PUSH
2620: LD_INT 32
2622: PUSH
2623: LD_INT 120
2625: PUSH
2626: LD_INT 70
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
2634: LD_VAR 0 6
2638: PPUSH
2639: CALL_OW 264
2643: PUSH
2644: LD_INT 7
2646: PUSH
2647: LD_INT 28
2649: PUSH
2650: LD_INT 45
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: IN
2658: IFFALSE 2679
// points := [ 35 , 20 , 45 ] ;
2660: LD_ADDR_VAR 0 9
2664: PUSH
2665: LD_INT 35
2667: PUSH
2668: LD_INT 20
2670: PUSH
2671: LD_INT 45
2673: PUSH
2674: EMPTY
2675: LIST
2676: LIST
2677: LIST
2678: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
2679: LD_VAR 0 6
2683: PPUSH
2684: CALL_OW 264
2688: PUSH
2689: LD_INT 47
2691: PUSH
2692: EMPTY
2693: LIST
2694: IN
2695: IFFALSE 2716
// points := [ 67 , 45 , 75 ] ;
2697: LD_ADDR_VAR 0 9
2701: PUSH
2702: LD_INT 67
2704: PUSH
2705: LD_INT 45
2707: PUSH
2708: LD_INT 75
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: LIST
2715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
2716: LD_VAR 0 6
2720: PPUSH
2721: CALL_OW 264
2725: PUSH
2726: LD_INT 26
2728: PUSH
2729: EMPTY
2730: LIST
2731: IN
2732: IFFALSE 2753
// points := [ 120 , 30 , 80 ] ;
2734: LD_ADDR_VAR 0 9
2738: PUSH
2739: LD_INT 120
2741: PUSH
2742: LD_INT 30
2744: PUSH
2745: LD_INT 80
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: LIST
2752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
2753: LD_VAR 0 6
2757: PPUSH
2758: CALL_OW 264
2762: PUSH
2763: LD_INT 22
2765: PUSH
2766: EMPTY
2767: LIST
2768: IN
2769: IFFALSE 2790
// points := [ 40 , 1 , 1 ] ;
2771: LD_ADDR_VAR 0 9
2775: PUSH
2776: LD_INT 40
2778: PUSH
2779: LD_INT 1
2781: PUSH
2782: LD_INT 1
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: LIST
2789: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
2790: LD_VAR 0 6
2794: PPUSH
2795: CALL_OW 264
2799: PUSH
2800: LD_INT 29
2802: PUSH
2803: EMPTY
2804: LIST
2805: IN
2806: IFFALSE 2827
// points := [ 70 , 200 , 400 ] ;
2808: LD_ADDR_VAR 0 9
2812: PUSH
2813: LD_INT 70
2815: PUSH
2816: LD_INT 200
2818: PUSH
2819: LD_INT 400
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: LIST
2826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
2827: LD_VAR 0 6
2831: PPUSH
2832: CALL_OW 264
2836: PUSH
2837: LD_INT 14
2839: PUSH
2840: LD_INT 53
2842: PUSH
2843: EMPTY
2844: LIST
2845: LIST
2846: IN
2847: IFFALSE 2868
// points := [ 40 , 10 , 20 ] ;
2849: LD_ADDR_VAR 0 9
2853: PUSH
2854: LD_INT 40
2856: PUSH
2857: LD_INT 10
2859: PUSH
2860: LD_INT 20
2862: PUSH
2863: EMPTY
2864: LIST
2865: LIST
2866: LIST
2867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
2868: LD_VAR 0 6
2872: PPUSH
2873: CALL_OW 264
2877: PUSH
2878: LD_INT 9
2880: PUSH
2881: EMPTY
2882: LIST
2883: IN
2884: IFFALSE 2905
// points := [ 5 , 70 , 20 ] ;
2886: LD_ADDR_VAR 0 9
2890: PUSH
2891: LD_INT 5
2893: PUSH
2894: LD_INT 70
2896: PUSH
2897: LD_INT 20
2899: PUSH
2900: EMPTY
2901: LIST
2902: LIST
2903: LIST
2904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
2905: LD_VAR 0 6
2909: PPUSH
2910: CALL_OW 264
2914: PUSH
2915: LD_INT 10
2917: PUSH
2918: EMPTY
2919: LIST
2920: IN
2921: IFFALSE 2942
// points := [ 35 , 110 , 70 ] ;
2923: LD_ADDR_VAR 0 9
2927: PUSH
2928: LD_INT 35
2930: PUSH
2931: LD_INT 110
2933: PUSH
2934: LD_INT 70
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
2942: LD_VAR 0 6
2946: PPUSH
2947: CALL_OW 265
2951: PUSH
2952: LD_INT 25
2954: EQUAL
2955: IFFALSE 2976
// points := [ 80 , 65 , 100 ] ;
2957: LD_ADDR_VAR 0 9
2961: PUSH
2962: LD_INT 80
2964: PUSH
2965: LD_INT 65
2967: PUSH
2968: LD_INT 100
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: LIST
2975: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
2976: LD_VAR 0 6
2980: PPUSH
2981: CALL_OW 263
2985: PUSH
2986: LD_INT 1
2988: EQUAL
2989: IFFALSE 3024
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
2991: LD_ADDR_VAR 0 10
2995: PUSH
2996: LD_VAR 0 10
3000: PUSH
3001: LD_VAR 0 6
3005: PPUSH
3006: CALL_OW 311
3010: PPUSH
3011: LD_INT 3
3013: PPUSH
3014: CALL_OW 259
3018: PUSH
3019: LD_INT 4
3021: MUL
3022: MUL
3023: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
3024: LD_VAR 0 6
3028: PPUSH
3029: CALL_OW 263
3033: PUSH
3034: LD_INT 2
3036: EQUAL
3037: IFFALSE 3088
// begin j := IsControledBy ( i ) ;
3039: LD_ADDR_VAR 0 7
3043: PUSH
3044: LD_VAR 0 6
3048: PPUSH
3049: CALL_OW 312
3053: ST_TO_ADDR
// if j then
3054: LD_VAR 0 7
3058: IFFALSE 3088
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
3060: LD_ADDR_VAR 0 10
3064: PUSH
3065: LD_VAR 0 10
3069: PUSH
3070: LD_VAR 0 7
3074: PPUSH
3075: LD_INT 3
3077: PPUSH
3078: CALL_OW 259
3082: PUSH
3083: LD_INT 3
3085: MUL
3086: MUL
3087: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
3088: LD_VAR 0 6
3092: PPUSH
3093: CALL_OW 264
3097: PUSH
3098: LD_INT 5
3100: PUSH
3101: LD_INT 6
3103: PUSH
3104: LD_INT 46
3106: PUSH
3107: LD_INT 44
3109: PUSH
3110: LD_INT 47
3112: PUSH
3113: LD_INT 45
3115: PUSH
3116: LD_INT 28
3118: PUSH
3119: LD_INT 7
3121: PUSH
3122: LD_INT 27
3124: PUSH
3125: LD_INT 29
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: IN
3140: PUSH
3141: LD_VAR 0 1
3145: PPUSH
3146: LD_INT 52
3148: PPUSH
3149: CALL_OW 321
3153: PUSH
3154: LD_INT 2
3156: EQUAL
3157: AND
3158: IFFALSE 3175
// bpoints := bpoints * 1.2 ;
3160: LD_ADDR_VAR 0 10
3164: PUSH
3165: LD_VAR 0 10
3169: PUSH
3170: LD_REAL  1.20000000000000E+0000
3173: MUL
3174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
3175: LD_VAR 0 6
3179: PPUSH
3180: CALL_OW 264
3184: PUSH
3185: LD_INT 6
3187: PUSH
3188: LD_INT 46
3190: PUSH
3191: LD_INT 47
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: LIST
3198: IN
3199: IFFALSE 3216
// bpoints := bpoints * 1.2 ;
3201: LD_ADDR_VAR 0 10
3205: PUSH
3206: LD_VAR 0 10
3210: PUSH
3211: LD_REAL  1.20000000000000E+0000
3214: MUL
3215: ST_TO_ADDR
// end ; unit_building :
3216: GO 3230
3218: LD_INT 3
3220: DOUBLE
3221: EQUAL
3222: IFTRUE 3226
3224: GO 3229
3226: POP
// ; end ;
3227: GO 3230
3229: POP
// for i = 1 to 3 do
3230: LD_ADDR_VAR 0 6
3234: PUSH
3235: DOUBLE
3236: LD_INT 1
3238: DEC
3239: ST_TO_ADDR
3240: LD_INT 3
3242: PUSH
3243: FOR_TO
3244: IFFALSE 3297
// result := Replace ( result , i , result [ i ] + ( points [ i ] * bpoints ) ) ;
3246: LD_ADDR_VAR 0 5
3250: PUSH
3251: LD_VAR 0 5
3255: PPUSH
3256: LD_VAR 0 6
3260: PPUSH
3261: LD_VAR 0 5
3265: PUSH
3266: LD_VAR 0 6
3270: ARRAY
3271: PUSH
3272: LD_VAR 0 9
3276: PUSH
3277: LD_VAR 0 6
3281: ARRAY
3282: PUSH
3283: LD_VAR 0 10
3287: MUL
3288: PLUS
3289: PPUSH
3290: CALL_OW 1
3294: ST_TO_ADDR
3295: GO 3243
3297: POP
3298: POP
// end ;
3299: GO 1782
3301: POP
3302: POP
// result := Replace ( result , 4 , tmp ) ;
3303: LD_ADDR_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: PPUSH
3313: LD_INT 4
3315: PPUSH
3316: LD_VAR 0 8
3320: PPUSH
3321: CALL_OW 1
3325: ST_TO_ADDR
// end ;
3326: LD_VAR 0 5
3330: RET
// export function DangerAtRange ( unit , range ) ; begin
3331: LD_INT 0
3333: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
3334: LD_ADDR_VAR 0 3
3338: PUSH
3339: LD_VAR 0 1
3343: PPUSH
3344: CALL_OW 255
3348: PPUSH
3349: LD_VAR 0 1
3353: PPUSH
3354: CALL_OW 250
3358: PPUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 251
3368: PPUSH
3369: LD_VAR 0 2
3373: PPUSH
3374: CALL 1651 0 4
3378: ST_TO_ADDR
// end ;
3379: LD_VAR 0 3
3383: RET
// export function IsExtension ( b ) ; begin
3384: LD_INT 0
3386: PPUSH
// result := false ;
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_INT 0
3394: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
3395: LD_VAR 0 1
3399: PPUSH
3400: CALL_OW 266
3404: PUSH
3405: LD_INT 23
3407: PUSH
3408: LD_INT 20
3410: PUSH
3411: LD_INT 22
3413: PUSH
3414: LD_INT 17
3416: PUSH
3417: LD_INT 24
3419: PUSH
3420: LD_INT 21
3422: PUSH
3423: LD_INT 19
3425: PUSH
3426: LD_INT 16
3428: PUSH
3429: LD_INT 25
3431: PUSH
3432: LD_INT 18
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: LIST
3444: LIST
3445: LIST
3446: IN
3447: IFFALSE 3457
// result := true ;
3449: LD_ADDR_VAR 0 2
3453: PUSH
3454: LD_INT 1
3456: ST_TO_ADDR
// end ;
3457: LD_VAR 0 2
3461: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
3462: LD_INT 0
3464: PPUSH
3465: PPUSH
3466: PPUSH
// result := [ ] ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: EMPTY
3473: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
3474: LD_ADDR_VAR 0 3
3478: PUSH
3479: LD_INT 21
3481: PUSH
3482: LD_INT 3
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PPUSH
3489: CALL_OW 69
3493: ST_TO_ADDR
// if not tmp then
3494: LD_VAR 0 3
3498: NOT
3499: IFFALSE 3503
// exit ;
3501: GO 3553
// for i in tmp do
3503: LD_ADDR_VAR 0 4
3507: PUSH
3508: LD_VAR 0 3
3512: PUSH
3513: FOR_IN
3514: IFFALSE 3551
// if GetBase ( i ) = base then
3516: LD_VAR 0 4
3520: PPUSH
3521: CALL_OW 274
3525: PUSH
3526: LD_VAR 0 1
3530: EQUAL
3531: IFFALSE 3549
// result := result ^ i ;
3533: LD_ADDR_VAR 0 2
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: LD_VAR 0 4
3547: ADD
3548: ST_TO_ADDR
3549: GO 3513
3551: POP
3552: POP
// end ;
3553: LD_VAR 0 2
3557: RET
// export function ComComplete ( unit , b ) ; var i ; begin
3558: LD_INT 0
3560: PPUSH
3561: PPUSH
// if BuildingStatus ( b ) = bs_build then
3562: LD_VAR 0 2
3566: PPUSH
3567: CALL_OW 461
3571: PUSH
3572: LD_INT 1
3574: EQUAL
3575: IFFALSE 3635
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: LD_STRING h
3584: PUSH
3585: LD_VAR 0 2
3589: PPUSH
3590: CALL_OW 250
3594: PUSH
3595: LD_VAR 0 2
3599: PPUSH
3600: CALL_OW 251
3604: PUSH
3605: LD_VAR 0 2
3609: PUSH
3610: LD_INT 0
3612: PUSH
3613: LD_INT 0
3615: PUSH
3616: LD_INT 0
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: PUSH
3628: EMPTY
3629: LIST
3630: PPUSH
3631: CALL_OW 446
// end ;
3635: LD_VAR 0 3
3639: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
3640: LD_INT 0
3642: PPUSH
3643: PPUSH
3644: PPUSH
3645: PPUSH
3646: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
3647: LD_VAR 0 1
3651: NOT
3652: PUSH
3653: LD_VAR 0 1
3657: PPUSH
3658: CALL_OW 263
3662: PUSH
3663: LD_INT 2
3665: EQUAL
3666: NOT
3667: OR
3668: IFFALSE 3672
// exit ;
3670: GO 3984
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
3672: LD_ADDR_VAR 0 6
3676: PUSH
3677: LD_INT 22
3679: PUSH
3680: LD_VAR 0 1
3684: PPUSH
3685: CALL_OW 255
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: LD_INT 30
3699: PUSH
3700: LD_INT 36
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 34
3709: PUSH
3710: LD_INT 31
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: PPUSH
3726: CALL_OW 69
3730: ST_TO_ADDR
// if not tmp then
3731: LD_VAR 0 6
3735: NOT
3736: IFFALSE 3740
// exit ;
3738: GO 3984
// result := [ ] ;
3740: LD_ADDR_VAR 0 2
3744: PUSH
3745: EMPTY
3746: ST_TO_ADDR
// for i in tmp do
3747: LD_ADDR_VAR 0 3
3751: PUSH
3752: LD_VAR 0 6
3756: PUSH
3757: FOR_IN
3758: IFFALSE 3806
// begin t := UnitsInside ( i ) ;
3760: LD_ADDR_VAR 0 4
3764: PUSH
3765: LD_VAR 0 3
3769: PPUSH
3770: CALL_OW 313
3774: ST_TO_ADDR
// if t then
3775: LD_VAR 0 4
3779: IFFALSE 3804
// result := Insert ( result , 1 , t ) ;
3781: LD_ADDR_VAR 0 2
3785: PUSH
3786: LD_VAR 0 2
3790: PPUSH
3791: LD_INT 1
3793: PPUSH
3794: LD_VAR 0 4
3798: PPUSH
3799: CALL_OW 2
3803: ST_TO_ADDR
// end ;
3804: GO 3757
3806: POP
3807: POP
// if not result then
3808: LD_VAR 0 2
3812: NOT
3813: IFFALSE 3817
// exit ;
3815: GO 3984
// mech := 0 ;
3817: LD_ADDR_VAR 0 5
3821: PUSH
3822: LD_INT 0
3824: ST_TO_ADDR
// for i in result do
3825: LD_ADDR_VAR 0 3
3829: PUSH
3830: LD_VAR 0 2
3834: PUSH
3835: FOR_IN
3836: IFFALSE 3918
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
3838: LD_ADDR_VAR 0 4
3842: PUSH
3843: LD_VAR 0 3
3847: PPUSH
3848: LD_INT 3
3850: PPUSH
3851: CALL_OW 259
3855: PUSH
3856: LD_VAR 0 3
3860: PPUSH
3861: CALL_OW 432
3865: MINUS
3866: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
3867: LD_VAR 0 4
3871: PUSH
3872: LD_VAR 0 5
3876: PUSH
3877: LD_INT 1
3879: ARRAY
3880: PPUSH
3881: LD_INT 3
3883: PPUSH
3884: CALL_OW 259
3888: PUSH
3889: LD_VAR 0 5
3893: PUSH
3894: LD_INT 1
3896: ARRAY
3897: PPUSH
3898: CALL_OW 432
3902: MINUS
3903: GREATEREQUAL
3904: IFFALSE 3916
// mech := i ;
3906: LD_ADDR_VAR 0 5
3910: PUSH
3911: LD_VAR 0 3
3915: ST_TO_ADDR
// end ;
3916: GO 3835
3918: POP
3919: POP
// display_strings := [ GetSkill ( mech [ 1 ] , 3 ) , UnitsLinked ( mech [ 1 ] ) ] ;
3920: LD_ADDR_OWVAR 47
3924: PUSH
3925: LD_VAR 0 5
3929: PUSH
3930: LD_INT 1
3932: ARRAY
3933: PPUSH
3934: LD_INT 3
3936: PPUSH
3937: CALL_OW 259
3941: PUSH
3942: LD_VAR 0 5
3946: PUSH
3947: LD_INT 1
3949: ARRAY
3950: PPUSH
3951: CALL_OW 432
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: ST_TO_ADDR
// if mech then
3960: LD_VAR 0 5
3964: IFFALSE 3984
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
3966: LD_VAR 0 1
3970: PPUSH
3971: LD_VAR 0 5
3975: PUSH
3976: LD_INT 1
3978: ARRAY
3979: PPUSH
3980: CALL_OW 135
// end ;
3984: LD_VAR 0 2
3988: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , f , x , un , base , side , nation , buildings ; begin
3989: LD_INT 0
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
3998: PPUSH
3999: PPUSH
4000: PPUSH
// result := [ ] ;
4001: LD_ADDR_VAR 0 6
4005: PUSH
4006: EMPTY
4007: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
4008: LD_VAR 0 1
4012: PPUSH
4013: CALL_OW 266
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: LD_INT 1
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: IN
4028: NOT
4029: IFFALSE 4033
// exit ;
4031: GO 5128
// if name then
4033: LD_VAR 0 2
4037: IFFALSE 4053
// SetBName ( base_dep , name ) ;
4039: LD_VAR 0 1
4043: PPUSH
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 500
// base := GetBase ( base_dep ) ;
4053: LD_ADDR_VAR 0 12
4057: PUSH
4058: LD_VAR 0 1
4062: PPUSH
4063: CALL_OW 274
4067: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
4068: LD_ADDR_VAR 0 13
4072: PUSH
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 255
4082: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
4083: LD_ADDR_VAR 0 14
4087: PUSH
4088: LD_VAR 0 1
4092: PPUSH
4093: CALL_OW 248
4097: ST_TO_ADDR
// if sources then
4098: LD_VAR 0 4
4102: IFFALSE 4149
// for i = 1 to 3 do
4104: LD_ADDR_VAR 0 7
4108: PUSH
4109: DOUBLE
4110: LD_INT 1
4112: DEC
4113: ST_TO_ADDR
4114: LD_INT 3
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4147
// AddResourceType ( base , i , sources [ i ] ) ;
4120: LD_VAR 0 12
4124: PPUSH
4125: LD_VAR 0 7
4129: PPUSH
4130: LD_VAR 0 4
4134: PUSH
4135: LD_VAR 0 7
4139: ARRAY
4140: PPUSH
4141: CALL_OW 276
4145: GO 4117
4147: POP
4148: POP
// buildings := GetBaseBuildings ( base ) ;
4149: LD_ADDR_VAR 0 15
4153: PUSH
4154: LD_VAR 0 12
4158: PPUSH
4159: CALL 3462 0 1
4163: ST_TO_ADDR
// InitHc ;
4164: CALL_OW 19
// InitUc ;
4168: CALL_OW 18
// uc_side := side ;
4172: LD_ADDR_OWVAR 20
4176: PUSH
4177: LD_VAR 0 13
4181: ST_TO_ADDR
// uc_nation := nation ;
4182: LD_ADDR_OWVAR 21
4186: PUSH
4187: LD_VAR 0 14
4191: ST_TO_ADDR
// if buildings then
4192: LD_VAR 0 15
4196: IFFALSE 4999
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
4198: LD_VAR 0 15
4202: PPUSH
4203: LD_INT 2
4205: PUSH
4206: LD_INT 30
4208: PUSH
4209: LD_INT 32
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: PUSH
4216: LD_INT 30
4218: PUSH
4219: LD_INT 33
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: LIST
4230: PPUSH
4231: CALL_OW 72
4235: IFFALSE 4318
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
4237: LD_ADDR_VAR 0 7
4241: PUSH
4242: LD_VAR 0 15
4246: PPUSH
4247: LD_INT 2
4249: PUSH
4250: LD_INT 30
4252: PUSH
4253: LD_INT 32
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PUSH
4260: LD_INT 30
4262: PUSH
4263: LD_INT 33
4265: PUSH
4266: EMPTY
4267: LIST
4268: LIST
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: PPUSH
4275: CALL_OW 72
4279: PUSH
4280: FOR_IN
4281: IFFALSE 4316
// if not GetBWeapon ( i ) then
4283: LD_VAR 0 7
4287: PPUSH
4288: CALL_OW 269
4292: NOT
4293: IFFALSE 4314
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
4295: LD_VAR 0 7
4299: PPUSH
4300: LD_VAR 0 7
4304: PPUSH
4305: CALL 5133 0 1
4309: PPUSH
4310: CALL_OW 431
4314: GO 4280
4316: POP
4317: POP
// end ; for i = 1 to personel do
4318: LD_ADDR_VAR 0 7
4322: PUSH
4323: DOUBLE
4324: LD_INT 1
4326: DEC
4327: ST_TO_ADDR
4328: LD_VAR 0 5
4332: PUSH
4333: FOR_TO
4334: IFFALSE 4979
// begin case i of 1 :
4336: LD_VAR 0 7
4340: PUSH
4341: LD_INT 1
4343: DOUBLE
4344: EQUAL
4345: IFTRUE 4349
4347: GO 4422
4349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
4350: LD_ADDR_VAR 0 9
4354: PUSH
4355: LD_VAR 0 15
4359: PPUSH
4360: LD_INT 22
4362: PUSH
4363: LD_VAR 0 13
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: PUSH
4372: LD_INT 2
4374: PUSH
4375: LD_INT 30
4377: PUSH
4378: LD_INT 32
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PUSH
4385: LD_INT 30
4387: PUSH
4388: LD_INT 4
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 5
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: EMPTY
4412: LIST
4413: LIST
4414: PPUSH
4415: CALL_OW 72
4419: ST_TO_ADDR
4420: GO 4644
4422: LD_INT 2
4424: DOUBLE
4425: EQUAL
4426: IFTRUE 4430
4428: GO 4492
4430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
4431: LD_ADDR_VAR 0 9
4435: PUSH
4436: LD_VAR 0 15
4440: PPUSH
4441: LD_INT 22
4443: PUSH
4444: LD_VAR 0 13
4448: PUSH
4449: EMPTY
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 2
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 0
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: LD_INT 30
4468: PUSH
4469: LD_INT 1
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 72
4489: ST_TO_ADDR
4490: GO 4644
4492: LD_INT 3
4494: DOUBLE
4495: EQUAL
4496: IFTRUE 4500
4498: GO 4562
4500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
4501: LD_ADDR_VAR 0 9
4505: PUSH
4506: LD_VAR 0 15
4510: PPUSH
4511: LD_INT 22
4513: PUSH
4514: LD_VAR 0 13
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 2
4525: PUSH
4526: LD_INT 30
4528: PUSH
4529: LD_INT 2
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PUSH
4536: LD_INT 30
4538: PUSH
4539: LD_INT 3
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: PPUSH
4555: CALL_OW 72
4559: ST_TO_ADDR
4560: GO 4644
4562: LD_INT 4
4564: DOUBLE
4565: EQUAL
4566: IFTRUE 4570
4568: GO 4643
4570: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
4571: LD_ADDR_VAR 0 9
4575: PUSH
4576: LD_VAR 0 15
4580: PPUSH
4581: LD_INT 22
4583: PUSH
4584: LD_VAR 0 13
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: LD_INT 30
4598: PUSH
4599: LD_INT 6
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PUSH
4606: LD_INT 30
4608: PUSH
4609: LD_INT 7
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PUSH
4616: LD_INT 30
4618: PUSH
4619: LD_INT 8
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PPUSH
4636: CALL_OW 72
4640: ST_TO_ADDR
4641: GO 4644
4643: POP
// if not f then
4644: LD_VAR 0 9
4648: NOT
4649: IFFALSE 4653
// continue ;
4651: GO 4333
// x := personel [ i ] ;
4653: LD_ADDR_VAR 0 10
4657: PUSH
4658: LD_VAR 0 5
4662: PUSH
4663: LD_VAR 0 7
4667: ARRAY
4668: ST_TO_ADDR
// if x = - 1 then
4669: LD_VAR 0 10
4673: PUSH
4674: LD_INT 1
4676: NEG
4677: EQUAL
4678: IFFALSE 4800
// begin for j in f do
4680: LD_ADDR_VAR 0 8
4684: PUSH
4685: LD_VAR 0 9
4689: PUSH
4690: FOR_IN
4691: IFFALSE 4796
// repeat PrepareHuman ( false , i , skill ) ;
4693: LD_INT 0
4695: PPUSH
4696: LD_VAR 0 7
4700: PPUSH
4701: LD_VAR 0 3
4705: PPUSH
4706: CALL_OW 380
// un := CreateHuman ;
4710: LD_ADDR_VAR 0 11
4714: PUSH
4715: CALL_OW 44
4719: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
4720: LD_ADDR_VAR 0 6
4724: PUSH
4725: LD_VAR 0 6
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: LD_VAR 0 11
4737: PPUSH
4738: CALL_OW 2
4742: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4743: LD_VAR 0 11
4747: PPUSH
4748: LD_VAR 0 8
4752: PPUSH
4753: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
4757: LD_VAR 0 8
4761: PPUSH
4762: CALL_OW 313
4766: PUSH
4767: LD_INT 6
4769: EQUAL
4770: PUSH
4771: LD_VAR 0 8
4775: PPUSH
4776: CALL_OW 266
4780: PUSH
4781: LD_INT 32
4783: PUSH
4784: LD_INT 31
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: IN
4791: OR
4792: IFFALSE 4693
4794: GO 4690
4796: POP
4797: POP
// end else
4798: GO 4977
// for j = 1 to x do
4800: LD_ADDR_VAR 0 8
4804: PUSH
4805: DOUBLE
4806: LD_INT 1
4808: DEC
4809: ST_TO_ADDR
4810: LD_VAR 0 10
4814: PUSH
4815: FOR_TO
4816: IFFALSE 4975
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
4818: LD_VAR 0 9
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: PPUSH
4827: CALL_OW 313
4831: PUSH
4832: LD_VAR 0 9
4836: PUSH
4837: LD_INT 1
4839: ARRAY
4840: PPUSH
4841: CALL_OW 266
4845: PUSH
4846: LD_INT 32
4848: PUSH
4849: LD_INT 31
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: IN
4856: AND
4857: PUSH
4858: LD_VAR 0 9
4862: PUSH
4863: LD_INT 1
4865: ARRAY
4866: PPUSH
4867: CALL_OW 313
4871: PUSH
4872: LD_INT 6
4874: EQUAL
4875: OR
4876: IFFALSE 4896
// f := Delete ( f , 1 ) ;
4878: LD_ADDR_VAR 0 9
4882: PUSH
4883: LD_VAR 0 9
4887: PPUSH
4888: LD_INT 1
4890: PPUSH
4891: CALL_OW 3
4895: ST_TO_ADDR
// if not f then
4896: LD_VAR 0 9
4900: NOT
4901: IFFALSE 4905
// break ;
4903: GO 4975
// PrepareHuman ( false , i , skill ) ;
4905: LD_INT 0
4907: PPUSH
4908: LD_VAR 0 7
4912: PPUSH
4913: LD_VAR 0 3
4917: PPUSH
4918: CALL_OW 380
// un := CreateHuman ;
4922: LD_ADDR_VAR 0 11
4926: PUSH
4927: CALL_OW 44
4931: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
4932: LD_ADDR_VAR 0 6
4936: PUSH
4937: LD_VAR 0 6
4941: PPUSH
4942: LD_INT 1
4944: PPUSH
4945: LD_VAR 0 11
4949: PPUSH
4950: CALL_OW 2
4954: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
4955: LD_VAR 0 11
4959: PPUSH
4960: LD_VAR 0 9
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: PPUSH
4969: CALL_OW 52
// end ;
4973: GO 4815
4975: POP
4976: POP
// end ;
4977: GO 4333
4979: POP
4980: POP
// result := result ^ buildings ;
4981: LD_ADDR_VAR 0 6
4985: PUSH
4986: LD_VAR 0 6
4990: PUSH
4991: LD_VAR 0 15
4995: ADD
4996: ST_TO_ADDR
// end else
4997: GO 5128
// begin for i = 1 to personel do
4999: LD_ADDR_VAR 0 7
5003: PUSH
5004: DOUBLE
5005: LD_INT 1
5007: DEC
5008: ST_TO_ADDR
5009: LD_VAR 0 5
5013: PUSH
5014: FOR_TO
5015: IFFALSE 5126
// begin x := personel [ i ] ;
5017: LD_ADDR_VAR 0 10
5021: PUSH
5022: LD_VAR 0 5
5026: PUSH
5027: LD_VAR 0 7
5031: ARRAY
5032: ST_TO_ADDR
// if x = - 1 then
5033: LD_VAR 0 10
5037: PUSH
5038: LD_INT 1
5040: NEG
5041: EQUAL
5042: IFFALSE 5046
// continue ;
5044: GO 5014
// PrepareHuman ( false , i , skill ) ;
5046: LD_INT 0
5048: PPUSH
5049: LD_VAR 0 7
5053: PPUSH
5054: LD_VAR 0 3
5058: PPUSH
5059: CALL_OW 380
// un := CreateHuman ;
5063: LD_ADDR_VAR 0 11
5067: PUSH
5068: CALL_OW 44
5072: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
5073: LD_VAR 0 11
5077: PPUSH
5078: LD_VAR 0 1
5082: PPUSH
5083: CALL_OW 250
5087: PPUSH
5088: LD_VAR 0 1
5092: PPUSH
5093: CALL_OW 251
5097: PPUSH
5098: LD_INT 10
5100: PPUSH
5101: LD_INT 0
5103: PPUSH
5104: CALL_OW 50
// result := result ^ un ;
5108: LD_ADDR_VAR 0 6
5112: PUSH
5113: LD_VAR 0 6
5117: PUSH
5118: LD_VAR 0 11
5122: ADD
5123: ST_TO_ADDR
// end ;
5124: GO 5014
5126: POP
5127: POP
// end ; end ;
5128: LD_VAR 0 6
5132: RET
// export function GetTurretWeapon ( tower ) ; var list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
5133: LD_INT 0
5135: PPUSH
5136: PPUSH
5137: PPUSH
5138: PPUSH
5139: PPUSH
5140: PPUSH
5141: PPUSH
5142: PPUSH
5143: PPUSH
5144: PPUSH
5145: PPUSH
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// result := false ;
5150: LD_ADDR_VAR 0 2
5154: PUSH
5155: LD_INT 0
5157: ST_TO_ADDR
// if not tower then
5158: LD_VAR 0 1
5162: NOT
5163: IFFALSE 5167
// exit ;
5165: GO 6340
// nat := GetNation ( tower ) ;
5167: LD_ADDR_VAR 0 10
5171: PUSH
5172: LD_VAR 0 1
5176: PPUSH
5177: CALL_OW 248
5181: ST_TO_ADDR
// side := GetSide ( tower ) ;
5182: LD_ADDR_VAR 0 14
5186: PUSH
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 255
5196: ST_TO_ADDR
// x := GetX ( tower ) ;
5197: LD_ADDR_VAR 0 8
5201: PUSH
5202: LD_VAR 0 1
5206: PPUSH
5207: CALL_OW 250
5211: ST_TO_ADDR
// y := GetY ( tower ) ;
5212: LD_ADDR_VAR 0 9
5216: PUSH
5217: LD_VAR 0 1
5221: PPUSH
5222: CALL_OW 251
5226: ST_TO_ADDR
// weapon := 0 ;
5227: LD_ADDR_VAR 0 16
5231: PUSH
5232: LD_INT 0
5234: ST_TO_ADDR
// fac_list := [ ] ;
5235: LD_ADDR_VAR 0 15
5239: PUSH
5240: EMPTY
5241: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
5242: LD_ADDR_VAR 0 4
5246: PUSH
5247: LD_VAR 0 1
5251: PPUSH
5252: CALL_OW 274
5256: PPUSH
5257: CALL 3462 0 1
5261: PPUSH
5262: LD_INT 30
5264: PUSH
5265: LD_INT 3
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PPUSH
5272: CALL_OW 72
5276: ST_TO_ADDR
// if not factories then
5277: LD_VAR 0 4
5281: NOT
5282: IFFALSE 5286
// exit ;
5284: GO 6340
// for i in factories do
5286: LD_ADDR_VAR 0 6
5290: PUSH
5291: LD_VAR 0 4
5295: PUSH
5296: FOR_IN
5297: IFFALSE 5322
// fac_list := fac_list union AvailableWeaponList ( i ) ;
5299: LD_ADDR_VAR 0 15
5303: PUSH
5304: LD_VAR 0 15
5308: PUSH
5309: LD_VAR 0 6
5313: PPUSH
5314: CALL_OW 478
5318: UNION
5319: ST_TO_ADDR
5320: GO 5296
5322: POP
5323: POP
// if not fac_list then
5324: LD_VAR 0 15
5328: NOT
5329: IFFALSE 5333
// exit ;
5331: GO 6340
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: LD_INT 4
5340: PUSH
5341: LD_INT 5
5343: PUSH
5344: LD_INT 9
5346: PUSH
5347: LD_INT 10
5349: PUSH
5350: LD_INT 6
5352: PUSH
5353: LD_INT 7
5355: PUSH
5356: LD_INT 11
5358: PUSH
5359: EMPTY
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: PUSH
5368: LD_INT 27
5370: PUSH
5371: LD_INT 28
5373: PUSH
5374: LD_INT 26
5376: PUSH
5377: LD_INT 30
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: PUSH
5386: LD_INT 43
5388: PUSH
5389: LD_INT 44
5391: PUSH
5392: LD_INT 46
5394: PUSH
5395: LD_INT 45
5397: PUSH
5398: LD_INT 47
5400: PUSH
5401: LD_INT 49
5403: PUSH
5404: EMPTY
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: PUSH
5417: LD_VAR 0 10
5421: ARRAY
5422: ST_TO_ADDR
// for i in list do
5423: LD_ADDR_VAR 0 6
5427: PUSH
5428: LD_VAR 0 3
5432: PUSH
5433: FOR_IN
5434: IFFALSE 5467
// if not i in fac_list then
5436: LD_VAR 0 6
5440: PUSH
5441: LD_VAR 0 15
5445: IN
5446: NOT
5447: IFFALSE 5465
// list := list diff i ;
5449: LD_ADDR_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: PUSH
5459: LD_VAR 0 6
5463: DIFF
5464: ST_TO_ADDR
5465: GO 5433
5467: POP
5468: POP
// if not list then
5469: LD_VAR 0 3
5473: NOT
5474: IFFALSE 5478
// exit ;
5476: GO 6340
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
5478: LD_VAR 0 10
5482: PUSH
5483: LD_INT 3
5485: EQUAL
5486: PUSH
5487: LD_INT 49
5489: PUSH
5490: LD_VAR 0 3
5494: IN
5495: AND
5496: PUSH
5497: LD_INT 31
5499: PPUSH
5500: LD_VAR 0 14
5504: PPUSH
5505: CALL_OW 321
5509: PUSH
5510: LD_INT 2
5512: EQUAL
5513: AND
5514: IFFALSE 5574
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
5516: LD_INT 22
5518: PUSH
5519: LD_VAR 0 14
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 35
5530: PUSH
5531: LD_INT 49
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 91
5540: PUSH
5541: LD_VAR 0 1
5545: PUSH
5546: LD_INT 10
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 69
5563: NOT
5564: IFFALSE 5574
// weapon := ru_time_lapser ;
5566: LD_ADDR_VAR 0 16
5570: PUSH
5571: LD_INT 49
5573: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
5574: LD_VAR 0 10
5578: PUSH
5579: LD_INT 1
5581: PUSH
5582: LD_INT 2
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: IN
5589: PUSH
5590: LD_INT 11
5592: PUSH
5593: LD_VAR 0 3
5597: IN
5598: PUSH
5599: LD_INT 30
5601: PUSH
5602: LD_VAR 0 3
5606: IN
5607: OR
5608: AND
5609: PUSH
5610: LD_INT 6
5612: PPUSH
5613: LD_VAR 0 14
5617: PPUSH
5618: CALL_OW 321
5622: PUSH
5623: LD_INT 2
5625: EQUAL
5626: AND
5627: IFFALSE 5792
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
5629: LD_INT 22
5631: PUSH
5632: LD_VAR 0 14
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 2
5643: PUSH
5644: LD_INT 35
5646: PUSH
5647: LD_INT 11
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 35
5656: PUSH
5657: LD_INT 30
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: PUSH
5669: LD_INT 91
5671: PUSH
5672: LD_VAR 0 1
5676: PUSH
5677: LD_INT 15
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: LIST
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: LIST
5689: PPUSH
5690: CALL_OW 69
5694: NOT
5695: PUSH
5696: LD_INT 22
5698: PUSH
5699: LD_VAR 0 14
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 2
5710: PUSH
5711: LD_INT 30
5713: PUSH
5714: LD_INT 32
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: PUSH
5721: LD_INT 30
5723: PUSH
5724: LD_INT 33
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: LIST
5735: PUSH
5736: LD_INT 91
5738: PUSH
5739: LD_VAR 0 1
5743: PUSH
5744: LD_INT 12
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: PPUSH
5760: CALL_OW 69
5764: PUSH
5765: LD_INT 1
5767: GREATER
5768: AND
5769: IFFALSE 5792
// weapon := [ us_radar , ar_radar ] [ nat ] ;
5771: LD_ADDR_VAR 0 16
5775: PUSH
5776: LD_INT 11
5778: PUSH
5779: LD_INT 30
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_VAR 0 10
5790: ARRAY
5791: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
5792: LD_VAR 0 16
5796: NOT
5797: PUSH
5798: LD_INT 40
5800: PPUSH
5801: LD_VAR 0 14
5805: PPUSH
5806: CALL_OW 321
5810: PUSH
5811: LD_INT 2
5813: EQUAL
5814: AND
5815: PUSH
5816: LD_INT 7
5818: PUSH
5819: LD_VAR 0 3
5823: IN
5824: PUSH
5825: LD_INT 28
5827: PUSH
5828: LD_VAR 0 3
5832: IN
5833: OR
5834: PUSH
5835: LD_INT 45
5837: PUSH
5838: LD_VAR 0 3
5842: IN
5843: OR
5844: AND
5845: IFFALSE 6055
// begin height := GetHexInfo ( x , y ) [ 2 ] ;
5847: LD_ADDR_VAR 0 13
5851: PUSH
5852: LD_VAR 0 8
5856: PPUSH
5857: LD_VAR 0 9
5861: PPUSH
5862: CALL_OW 546
5866: PUSH
5867: LD_INT 2
5869: ARRAY
5870: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
5871: LD_ADDR_VAR 0 12
5875: PUSH
5876: LD_INT 0
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: LD_INT 3
5884: PUSH
5885: LD_INT 5
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: ST_TO_ADDR
// for i in tmp do
5894: LD_ADDR_VAR 0 6
5898: PUSH
5899: LD_VAR 0 12
5903: PUSH
5904: FOR_IN
5905: IFFALSE 6053
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
5907: LD_ADDR_VAR 0 7
5911: PUSH
5912: LD_VAR 0 8
5916: PPUSH
5917: LD_VAR 0 6
5921: PPUSH
5922: LD_INT 5
5924: PPUSH
5925: CALL_OW 272
5929: PUSH
5930: LD_VAR 0 9
5934: PPUSH
5935: LD_VAR 0 6
5939: PPUSH
5940: LD_INT 5
5942: PPUSH
5943: CALL_OW 273
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
5952: LD_VAR 0 7
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PPUSH
5961: LD_VAR 0 7
5965: PUSH
5966: LD_INT 2
5968: ARRAY
5969: PPUSH
5970: CALL_OW 488
5974: IFFALSE 6051
// begin h := GetHexInfo ( j [ 1 ] , j [ 2 ] ) [ 2 ] ;
5976: LD_ADDR_VAR 0 11
5980: PUSH
5981: LD_VAR 0 7
5985: PUSH
5986: LD_INT 1
5988: ARRAY
5989: PPUSH
5990: LD_VAR 0 7
5994: PUSH
5995: LD_INT 2
5997: ARRAY
5998: PPUSH
5999: CALL_OW 546
6003: PUSH
6004: LD_INT 2
6006: ARRAY
6007: ST_TO_ADDR
// if h + 7 < height then
6008: LD_VAR 0 11
6012: PUSH
6013: LD_INT 7
6015: PLUS
6016: PUSH
6017: LD_VAR 0 13
6021: LESS
6022: IFFALSE 6051
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
6024: LD_ADDR_VAR 0 16
6028: PUSH
6029: LD_INT 7
6031: PUSH
6032: LD_INT 28
6034: PUSH
6035: LD_INT 45
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: PUSH
6043: LD_VAR 0 10
6047: ARRAY
6048: ST_TO_ADDR
// break ;
6049: GO 6053
// end ; end ; end ;
6051: GO 5904
6053: POP
6054: POP
// end ; if not weapon then
6055: LD_VAR 0 16
6059: NOT
6060: IFFALSE 6222
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
6062: LD_ADDR_VAR 0 3
6066: PUSH
6067: LD_VAR 0 3
6071: PUSH
6072: LD_INT 11
6074: PUSH
6075: LD_INT 30
6077: PUSH
6078: LD_INT 49
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: DIFF
6086: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
6087: LD_ADDR_VAR 0 16
6091: PUSH
6092: LD_VAR 0 3
6096: PUSH
6097: LD_INT 1
6099: PPUSH
6100: LD_VAR 0 3
6104: PPUSH
6105: CALL_OW 12
6109: ARRAY
6110: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
6111: LD_ADDR_VAR 0 12
6115: PUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 14
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 35
6133: PUSH
6134: LD_INT 0
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: CALL_OW 69
6153: ST_TO_ADDR
// for i in tmp do
6154: LD_ADDR_VAR 0 6
6158: PUSH
6159: LD_VAR 0 12
6163: PUSH
6164: FOR_IN
6165: IFFALSE 6190
// list := list diff GetBWeapon ( i ) ;
6167: LD_ADDR_VAR 0 3
6171: PUSH
6172: LD_VAR 0 3
6176: PUSH
6177: LD_VAR 0 6
6181: PPUSH
6182: CALL_OW 269
6186: DIFF
6187: ST_TO_ADDR
6188: GO 6164
6190: POP
6191: POP
// if list then
6192: LD_VAR 0 3
6196: IFFALSE 6222
// weapon := list [ rand ( 1 , list ) ] ;
6198: LD_ADDR_VAR 0 16
6202: PUSH
6203: LD_VAR 0 3
6207: PUSH
6208: LD_INT 1
6210: PPUSH
6211: LD_VAR 0 3
6215: PPUSH
6216: CALL_OW 12
6220: ARRAY
6221: ST_TO_ADDR
// end ; if weapon then
6222: LD_VAR 0 16
6226: IFFALSE 6340
// begin tmp := CostOfWeapon ( weapon ) ;
6228: LD_ADDR_VAR 0 12
6232: PUSH
6233: LD_VAR 0 16
6237: PPUSH
6238: CALL_OW 451
6242: ST_TO_ADDR
// j := GetBase ( tower ) ;
6243: LD_ADDR_VAR 0 7
6247: PUSH
6248: LD_VAR 0 1
6252: PPUSH
6253: CALL_OW 274
6257: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
6258: LD_VAR 0 7
6262: PPUSH
6263: LD_INT 1
6265: PPUSH
6266: CALL_OW 275
6270: PUSH
6271: LD_VAR 0 12
6275: PUSH
6276: LD_INT 1
6278: ARRAY
6279: GREATEREQUAL
6280: PUSH
6281: LD_VAR 0 7
6285: PPUSH
6286: LD_INT 2
6288: PPUSH
6289: CALL_OW 275
6293: PUSH
6294: LD_VAR 0 12
6298: PUSH
6299: LD_INT 2
6301: ARRAY
6302: GREATEREQUAL
6303: AND
6304: PUSH
6305: LD_VAR 0 7
6309: PPUSH
6310: LD_INT 3
6312: PPUSH
6313: CALL_OW 275
6317: PUSH
6318: LD_VAR 0 12
6322: PUSH
6323: LD_INT 3
6325: ARRAY
6326: GREATEREQUAL
6327: AND
6328: IFFALSE 6340
// result := weapon ;
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: LD_VAR 0 16
6339: ST_TO_ADDR
// end ; end ;
6340: LD_VAR 0 2
6344: RET
// export function Compare ( val1 , val2 ) ; begin
6345: LD_INT 0
6347: PPUSH
// if val1 = val2 then
6348: LD_VAR 0 1
6352: PUSH
6353: LD_VAR 0 2
6357: EQUAL
6358: IFFALSE 6370
// result := true else
6360: LD_ADDR_VAR 0 3
6364: PUSH
6365: LD_INT 1
6367: ST_TO_ADDR
6368: GO 6378
// result := false ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// end ;
6378: LD_VAR 0 3
6382: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
6383: LD_INT 0
6385: PPUSH
6386: PPUSH
// result := true ;
6387: LD_ADDR_VAR 0 3
6391: PUSH
6392: LD_INT 1
6394: ST_TO_ADDR
// if array1 = array2 then
6395: LD_VAR 0 1
6399: PUSH
6400: LD_VAR 0 2
6404: EQUAL
6405: IFFALSE 6470
// begin for i = 1 to array1 do
6407: LD_ADDR_VAR 0 4
6411: PUSH
6412: DOUBLE
6413: LD_INT 1
6415: DEC
6416: ST_TO_ADDR
6417: LD_VAR 0 1
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6466
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
6425: LD_VAR 0 1
6429: PUSH
6430: LD_VAR 0 4
6434: ARRAY
6435: PPUSH
6436: LD_VAR 0 2
6440: PUSH
6441: LD_VAR 0 4
6445: ARRAY
6446: PPUSH
6447: CALL 6345 0 2
6451: NOT
6452: IFFALSE 6464
// begin result := false ;
6454: LD_ADDR_VAR 0 3
6458: PUSH
6459: LD_INT 0
6461: ST_TO_ADDR
// break ;
6462: GO 6466
// end ;
6464: GO 6422
6466: POP
6467: POP
// end else
6468: GO 6478
// result := false ;
6470: LD_ADDR_VAR 0 3
6474: PUSH
6475: LD_INT 0
6477: ST_TO_ADDR
// end ;
6478: LD_VAR 0 3
6482: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
6483: LD_INT 0
6485: PPUSH
6486: PPUSH
6487: PPUSH
// pom := GetBase ( fac ) ;
6488: LD_ADDR_VAR 0 5
6492: PUSH
6493: LD_VAR 0 1
6497: PPUSH
6498: CALL_OW 274
6502: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: LD_VAR 0 2
6512: PUSH
6513: LD_INT 1
6515: ARRAY
6516: PPUSH
6517: LD_VAR 0 2
6521: PUSH
6522: LD_INT 2
6524: ARRAY
6525: PPUSH
6526: LD_VAR 0 2
6530: PUSH
6531: LD_INT 3
6533: ARRAY
6534: PPUSH
6535: LD_VAR 0 2
6539: PUSH
6540: LD_INT 4
6542: ARRAY
6543: PPUSH
6544: CALL_OW 449
6548: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
6549: LD_VAR 0 5
6553: PPUSH
6554: LD_INT 1
6556: PPUSH
6557: CALL_OW 275
6561: PUSH
6562: LD_VAR 0 4
6566: PUSH
6567: LD_INT 1
6569: ARRAY
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 5
6576: PPUSH
6577: LD_INT 2
6579: PPUSH
6580: CALL_OW 275
6584: PUSH
6585: LD_VAR 0 4
6589: PUSH
6590: LD_INT 2
6592: ARRAY
6593: GREATEREQUAL
6594: AND
6595: PUSH
6596: LD_VAR 0 5
6600: PPUSH
6601: LD_INT 3
6603: PPUSH
6604: CALL_OW 275
6608: PUSH
6609: LD_VAR 0 4
6613: PUSH
6614: LD_INT 3
6616: ARRAY
6617: GREATEREQUAL
6618: AND
6619: IFFALSE 6631
// result := true else
6621: LD_ADDR_VAR 0 3
6625: PUSH
6626: LD_INT 1
6628: ST_TO_ADDR
6629: GO 6639
// result := false ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 0
6638: ST_TO_ADDR
// end ;
6639: LD_VAR 0 3
6643: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist ; begin
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
6648: PPUSH
6649: PPUSH
6650: PPUSH
6651: PPUSH
6652: PPUSH
6653: PPUSH
// result := false ;
6654: LD_ADDR_VAR 0 6
6658: PUSH
6659: LD_INT 0
6661: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
6662: LD_VAR 0 1
6666: NOT
6667: PUSH
6668: LD_VAR 0 2
6672: NOT
6673: OR
6674: PUSH
6675: LD_VAR 0 5
6679: PUSH
6680: LD_INT 0
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: IN
6706: NOT
6707: OR
6708: PUSH
6709: LD_VAR 0 3
6713: PPUSH
6714: LD_VAR 0 4
6718: PPUSH
6719: CALL_OW 488
6723: NOT
6724: OR
6725: IFFALSE 6729
// exit ;
6727: GO 7412
// pom := GetBase ( bdepot ) ;
6729: LD_ADDR_VAR 0 9
6733: PUSH
6734: LD_VAR 0 1
6738: PPUSH
6739: CALL_OW 274
6743: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
6744: LD_ADDR_VAR 0 10
6748: PUSH
6749: LD_VAR 0 2
6753: PPUSH
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 248
6763: PPUSH
6764: CALL_OW 450
6768: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
6769: LD_VAR 0 9
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 275
6781: PUSH
6782: LD_VAR 0 10
6786: PUSH
6787: LD_INT 1
6789: ARRAY
6790: GREATEREQUAL
6791: PUSH
6792: LD_VAR 0 9
6796: PPUSH
6797: LD_INT 2
6799: PPUSH
6800: CALL_OW 275
6804: PUSH
6805: LD_VAR 0 10
6809: PUSH
6810: LD_INT 2
6812: ARRAY
6813: GREATEREQUAL
6814: AND
6815: PUSH
6816: LD_VAR 0 9
6820: PPUSH
6821: LD_INT 3
6823: PPUSH
6824: CALL_OW 275
6828: PUSH
6829: LD_VAR 0 10
6833: PUSH
6834: LD_INT 3
6836: ARRAY
6837: GREATEREQUAL
6838: AND
6839: IFFALSE 6851
// result := true else
6841: LD_ADDR_VAR 0 6
6845: PUSH
6846: LD_INT 1
6848: ST_TO_ADDR
6849: GO 6853
// exit ;
6851: GO 7412
// if GetBType ( bdepot ) = b_depot then
6853: LD_VAR 0 1
6857: PPUSH
6858: CALL_OW 266
6862: PUSH
6863: LD_INT 0
6865: EQUAL
6866: IFFALSE 6878
// dist := 28 else
6868: LD_ADDR_VAR 0 13
6872: PUSH
6873: LD_INT 28
6875: ST_TO_ADDR
6876: GO 6886
// dist := 36 ;
6878: LD_ADDR_VAR 0 13
6882: PUSH
6883: LD_INT 36
6885: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
6886: LD_VAR 0 1
6890: PPUSH
6891: LD_VAR 0 3
6895: PPUSH
6896: LD_VAR 0 4
6900: PPUSH
6901: CALL_OW 297
6905: PUSH
6906: LD_VAR 0 13
6910: GREATER
6911: IFFALSE 6923
// begin result := false ;
6913: LD_ADDR_VAR 0 6
6917: PUSH
6918: LD_INT 0
6920: ST_TO_ADDR
// exit ;
6921: GO 7412
// end ; hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
6923: LD_ADDR_VAR 0 11
6927: PUSH
6928: LD_VAR 0 2
6932: PPUSH
6933: LD_VAR 0 3
6937: PPUSH
6938: LD_VAR 0 4
6942: PPUSH
6943: LD_VAR 0 5
6947: PPUSH
6948: LD_VAR 0 1
6952: PPUSH
6953: CALL_OW 248
6957: PPUSH
6958: LD_INT 0
6960: PPUSH
6961: CALL 7417 0 6
6965: ST_TO_ADDR
// if not hexes then
6966: LD_VAR 0 11
6970: NOT
6971: IFFALSE 6983
// begin result := false ;
6973: LD_ADDR_VAR 0 6
6977: PUSH
6978: LD_INT 0
6980: ST_TO_ADDR
// exit ;
6981: GO 7412
// end ; height := GetHexInfo ( x , y ) [ 2 ] ;
6983: LD_ADDR_VAR 0 12
6987: PUSH
6988: LD_VAR 0 3
6992: PPUSH
6993: LD_VAR 0 4
6997: PPUSH
6998: CALL_OW 546
7002: PUSH
7003: LD_INT 2
7005: ARRAY
7006: ST_TO_ADDR
// for i = 1 to hexes do
7007: LD_ADDR_VAR 0 7
7011: PUSH
7012: DOUBLE
7013: LD_INT 1
7015: DEC
7016: ST_TO_ADDR
7017: LD_VAR 0 11
7021: PUSH
7022: FOR_TO
7023: IFFALSE 7369
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
7025: LD_VAR 0 11
7029: PUSH
7030: LD_VAR 0 7
7034: ARRAY
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PPUSH
7040: LD_VAR 0 11
7044: PUSH
7045: LD_VAR 0 7
7049: ARRAY
7050: PUSH
7051: LD_INT 2
7053: ARRAY
7054: PPUSH
7055: CALL_OW 488
7059: NOT
7060: IFFALSE 7064
// continue ;
7062: GO 7022
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
7064: LD_ADDR_VAR 0 8
7068: PUSH
7069: LD_VAR 0 11
7073: PUSH
7074: LD_VAR 0 7
7078: ARRAY
7079: PUSH
7080: LD_INT 1
7082: ARRAY
7083: PPUSH
7084: LD_VAR 0 11
7088: PUSH
7089: LD_VAR 0 7
7093: ARRAY
7094: PUSH
7095: LD_INT 2
7097: ARRAY
7098: PPUSH
7099: CALL_OW 546
7103: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
7104: LD_VAR 0 8
7108: PUSH
7109: LD_INT 1
7111: ARRAY
7112: PUSH
7113: LD_VAR 0 8
7117: PUSH
7118: LD_INT 2
7120: ARRAY
7121: PUSH
7122: LD_VAR 0 12
7126: PUSH
7127: LD_INT 2
7129: PLUS
7130: GREATER
7131: OR
7132: PUSH
7133: LD_VAR 0 8
7137: PUSH
7138: LD_INT 2
7140: ARRAY
7141: PUSH
7142: LD_VAR 0 12
7146: PUSH
7147: LD_INT 2
7149: MINUS
7150: LESS
7151: OR
7152: PUSH
7153: LD_VAR 0 8
7157: PUSH
7158: LD_INT 3
7160: ARRAY
7161: PUSH
7162: LD_INT 0
7164: PUSH
7165: LD_INT 8
7167: PUSH
7168: LD_INT 9
7170: PUSH
7171: LD_INT 10
7173: PUSH
7174: LD_INT 11
7176: PUSH
7177: LD_INT 12
7179: PUSH
7180: LD_INT 13
7182: PUSH
7183: LD_INT 16
7185: PUSH
7186: LD_INT 17
7188: PUSH
7189: LD_INT 18
7191: PUSH
7192: LD_INT 19
7194: PUSH
7195: LD_INT 20
7197: PUSH
7198: LD_INT 21
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: IN
7216: NOT
7217: OR
7218: PUSH
7219: LD_VAR 0 8
7223: PUSH
7224: LD_INT 4
7226: ARRAY
7227: OR
7228: PUSH
7229: LD_VAR 0 8
7233: PUSH
7234: LD_INT 5
7236: ARRAY
7237: NOT
7238: OR
7239: PUSH
7240: LD_VAR 0 8
7244: PUSH
7245: LD_INT 6
7247: ARRAY
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: LD_INT 7
7257: PUSH
7258: LD_INT 9
7260: PUSH
7261: LD_INT 10
7263: PUSH
7264: LD_INT 11
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: IN
7275: NOT
7276: OR
7277: PUSH
7278: LD_VAR 0 11
7282: PUSH
7283: LD_VAR 0 7
7287: ARRAY
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_VAR 0 11
7297: PUSH
7298: LD_VAR 0 7
7302: ARRAY
7303: PUSH
7304: LD_INT 2
7306: ARRAY
7307: PPUSH
7308: CALL_OW 428
7312: PUSH
7313: LD_INT 0
7315: GREATER
7316: OR
7317: PUSH
7318: LD_VAR 0 11
7322: PUSH
7323: LD_VAR 0 7
7327: ARRAY
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_VAR 0 11
7337: PUSH
7338: LD_VAR 0 7
7342: ARRAY
7343: PUSH
7344: LD_INT 2
7346: ARRAY
7347: PPUSH
7348: CALL_OW 351
7352: OR
7353: IFFALSE 7367
// begin result := false ;
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_INT 0
7362: ST_TO_ADDR
// exit ;
7363: POP
7364: POP
7365: GO 7412
// end ; end ;
7367: GO 7022
7369: POP
7370: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 255
7380: PPUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: LD_VAR 0 4
7390: PPUSH
7391: LD_INT 20
7393: PPUSH
7394: CALL 1651 0 4
7398: PUSH
7399: LD_INT 4
7401: ARRAY
7402: IFFALSE 7412
// result := false ;
7404: LD_ADDR_VAR 0 6
7408: PUSH
7409: LD_INT 0
7411: ST_TO_ADDR
// end ;
7412: LD_VAR 0 6
7416: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
7433: PPUSH
7434: PPUSH
7435: PPUSH
7436: PPUSH
7437: PPUSH
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
7443: PPUSH
7444: PPUSH
7445: PPUSH
7446: PPUSH
7447: PPUSH
7448: PPUSH
7449: PPUSH
7450: PPUSH
7451: PPUSH
7452: PPUSH
7453: PPUSH
7454: PPUSH
7455: PPUSH
7456: PPUSH
7457: PPUSH
7458: PPUSH
7459: PPUSH
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
7464: PPUSH
7465: PPUSH
7466: PPUSH
7467: PPUSH
7468: PPUSH
7469: PPUSH
7470: PPUSH
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
// result = [ ] ;
7477: LD_ADDR_VAR 0 7
7481: PUSH
7482: EMPTY
7483: ST_TO_ADDR
// temp_list = [ ] ;
7484: LD_ADDR_VAR 0 9
7488: PUSH
7489: EMPTY
7490: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
7491: LD_VAR 0 4
7495: PUSH
7496: LD_INT 0
7498: PUSH
7499: LD_INT 1
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 3
7507: PUSH
7508: LD_INT 4
7510: PUSH
7511: LD_INT 5
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: IN
7522: NOT
7523: PUSH
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 0
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: IN
7539: PUSH
7540: LD_VAR 0 5
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: LD_INT 2
7550: PUSH
7551: LD_INT 3
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: LIST
7558: IN
7559: NOT
7560: AND
7561: OR
7562: IFFALSE 7566
// exit ;
7564: GO 25951
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
7566: LD_VAR 0 1
7570: PUSH
7571: LD_INT 6
7573: PUSH
7574: LD_INT 7
7576: PUSH
7577: LD_INT 8
7579: PUSH
7580: LD_INT 13
7582: PUSH
7583: LD_INT 12
7585: PUSH
7586: LD_INT 15
7588: PUSH
7589: LD_INT 11
7591: PUSH
7592: LD_INT 14
7594: PUSH
7595: LD_INT 10
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: IN
7609: IFFALSE 7619
// btype = b_lab ;
7611: LD_ADDR_VAR 0 1
7615: PUSH
7616: LD_INT 6
7618: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
7619: LD_VAR 0 6
7623: PUSH
7624: LD_INT 0
7626: PUSH
7627: LD_INT 1
7629: PUSH
7630: LD_INT 2
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: IN
7638: NOT
7639: PUSH
7640: LD_VAR 0 1
7644: PUSH
7645: LD_INT 0
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: LD_INT 2
7653: PUSH
7654: LD_INT 3
7656: PUSH
7657: LD_INT 6
7659: PUSH
7660: LD_INT 36
7662: PUSH
7663: LD_INT 4
7665: PUSH
7666: LD_INT 5
7668: PUSH
7669: LD_INT 31
7671: PUSH
7672: LD_INT 32
7674: PUSH
7675: LD_INT 33
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: IN
7691: NOT
7692: PUSH
7693: LD_VAR 0 6
7697: PUSH
7698: LD_INT 1
7700: EQUAL
7701: AND
7702: OR
7703: PUSH
7704: LD_VAR 0 1
7708: PUSH
7709: LD_INT 2
7711: PUSH
7712: LD_INT 3
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: IN
7719: NOT
7720: PUSH
7721: LD_VAR 0 6
7725: PUSH
7726: LD_INT 2
7728: EQUAL
7729: AND
7730: OR
7731: IFFALSE 7741
// mode = 0 ;
7733: LD_ADDR_VAR 0 6
7737: PUSH
7738: LD_INT 0
7740: ST_TO_ADDR
// case mode of 0 :
7741: LD_VAR 0 6
7745: PUSH
7746: LD_INT 0
7748: DOUBLE
7749: EQUAL
7750: IFTRUE 7754
7752: GO 19207
7754: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
7755: LD_ADDR_VAR 0 11
7759: PUSH
7760: LD_INT 0
7762: PUSH
7763: LD_INT 0
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 0
7772: PUSH
7773: LD_INT 1
7775: NEG
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 1
7783: PUSH
7784: LD_INT 0
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 1
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 0
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 1
7813: NEG
7814: PUSH
7815: LD_INT 0
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 1
7824: NEG
7825: PUSH
7826: LD_INT 1
7828: NEG
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 1
7836: NEG
7837: PUSH
7838: LD_INT 2
7840: NEG
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_INT 0
7848: PUSH
7849: LD_INT 2
7851: NEG
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 1
7859: PUSH
7860: LD_INT 1
7862: NEG
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 1
7870: PUSH
7871: LD_INT 2
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: PUSH
7878: LD_INT 0
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 1
7890: NEG
7891: PUSH
7892: LD_INT 1
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: LD_INT 3
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 1
7921: NEG
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
7948: LD_ADDR_VAR 0 12
7952: PUSH
7953: LD_INT 0
7955: PUSH
7956: LD_INT 0
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 0
7965: PUSH
7966: LD_INT 1
7968: NEG
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 1
7976: PUSH
7977: LD_INT 0
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 0
7996: PUSH
7997: LD_INT 1
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 1
8006: NEG
8007: PUSH
8008: LD_INT 0
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 1
8017: NEG
8018: PUSH
8019: LD_INT 1
8021: NEG
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 1
8029: PUSH
8030: LD_INT 1
8032: NEG
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 0
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 2
8050: PUSH
8051: LD_INT 1
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 1
8060: NEG
8061: PUSH
8062: LD_INT 1
8064: PUSH
8065: EMPTY
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 2
8071: NEG
8072: PUSH
8073: LD_INT 0
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 2
8082: NEG
8083: PUSH
8084: LD_INT 1
8086: NEG
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 2
8094: NEG
8095: PUSH
8096: LD_INT 1
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_INT 3
8105: NEG
8106: PUSH
8107: LD_INT 0
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 3
8116: NEG
8117: PUSH
8118: LD_INT 1
8120: NEG
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: LIST
8141: LIST
8142: LIST
8143: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
8144: LD_ADDR_VAR 0 13
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 0
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 0
8161: PUSH
8162: LD_INT 1
8164: NEG
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 1
8172: PUSH
8173: LD_INT 0
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: LD_INT 1
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 0
8192: PUSH
8193: LD_INT 1
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 1
8202: NEG
8203: PUSH
8204: LD_INT 0
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 1
8213: NEG
8214: PUSH
8215: LD_INT 1
8217: NEG
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_INT 1
8225: NEG
8226: PUSH
8227: LD_INT 2
8229: NEG
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 2
8237: PUSH
8238: LD_INT 1
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 2
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: LD_INT 1
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 2
8267: NEG
8268: PUSH
8269: LD_INT 1
8271: NEG
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 2
8279: NEG
8280: PUSH
8281: LD_INT 2
8283: NEG
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: PUSH
8289: LD_INT 2
8291: NEG
8292: PUSH
8293: LD_INT 3
8295: NEG
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 3
8303: NEG
8304: PUSH
8305: LD_INT 2
8307: NEG
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 3
8315: NEG
8316: PUSH
8317: LD_INT 3
8319: NEG
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
8343: LD_ADDR_VAR 0 14
8347: PUSH
8348: LD_INT 0
8350: PUSH
8351: LD_INT 0
8353: PUSH
8354: EMPTY
8355: LIST
8356: LIST
8357: PUSH
8358: LD_INT 0
8360: PUSH
8361: LD_INT 1
8363: NEG
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: LD_INT 1
8371: PUSH
8372: LD_INT 0
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 1
8381: PUSH
8382: LD_INT 1
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: PUSH
8389: LD_INT 0
8391: PUSH
8392: LD_INT 1
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 1
8401: NEG
8402: PUSH
8403: LD_INT 0
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 1
8412: NEG
8413: PUSH
8414: LD_INT 1
8416: NEG
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_INT 1
8424: NEG
8425: PUSH
8426: LD_INT 2
8428: NEG
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_INT 0
8436: PUSH
8437: LD_INT 2
8439: NEG
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PUSH
8445: LD_INT 1
8447: PUSH
8448: LD_INT 1
8450: NEG
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 1
8458: PUSH
8459: LD_INT 2
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: LD_INT 0
8468: PUSH
8469: LD_INT 2
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_INT 1
8478: NEG
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 1
8489: NEG
8490: PUSH
8491: LD_INT 3
8493: NEG
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 0
8501: PUSH
8502: LD_INT 3
8504: NEG
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: LD_INT 2
8515: NEG
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
8539: LD_ADDR_VAR 0 15
8543: PUSH
8544: LD_INT 0
8546: PUSH
8547: LD_INT 0
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: LD_INT 0
8556: PUSH
8557: LD_INT 1
8559: NEG
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 1
8567: PUSH
8568: LD_INT 0
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 0
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 1
8597: NEG
8598: PUSH
8599: LD_INT 0
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: LD_INT 1
8608: NEG
8609: PUSH
8610: LD_INT 1
8612: NEG
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PUSH
8618: LD_INT 1
8620: PUSH
8621: LD_INT 1
8623: NEG
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 0
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: LD_INT 2
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 1
8651: NEG
8652: PUSH
8653: LD_INT 1
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PUSH
8660: LD_INT 2
8662: NEG
8663: PUSH
8664: LD_INT 0
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 2
8673: NEG
8674: PUSH
8675: LD_INT 1
8677: NEG
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 2
8685: PUSH
8686: LD_INT 1
8688: NEG
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: PUSH
8694: LD_INT 3
8696: PUSH
8697: LD_INT 0
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 3
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
8732: LD_ADDR_VAR 0 16
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: LD_INT 0
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 0
8749: PUSH
8750: LD_INT 1
8752: NEG
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 0
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 1
8770: PUSH
8771: LD_INT 1
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 0
8780: PUSH
8781: LD_INT 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 1
8790: NEG
8791: PUSH
8792: LD_INT 0
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 1
8801: NEG
8802: PUSH
8803: LD_INT 1
8805: NEG
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 1
8813: NEG
8814: PUSH
8815: LD_INT 2
8817: NEG
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 2
8825: PUSH
8826: LD_INT 1
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 2
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: LD_INT 2
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 2
8855: NEG
8856: PUSH
8857: LD_INT 1
8859: NEG
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: PUSH
8865: LD_INT 2
8867: NEG
8868: PUSH
8869: LD_INT 2
8871: NEG
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 3
8879: PUSH
8880: LD_INT 2
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 3
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: EMPTY
8894: LIST
8895: LIST
8896: PUSH
8897: LD_INT 2
8899: PUSH
8900: LD_INT 3
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
8925: LD_ADDR_VAR 0 17
8929: PUSH
8930: LD_INT 0
8932: PUSH
8933: LD_INT 0
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 0
8942: PUSH
8943: LD_INT 1
8945: NEG
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 1
8953: PUSH
8954: LD_INT 0
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 1
8963: PUSH
8964: LD_INT 1
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: LD_INT 1
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: PUSH
8981: LD_INT 1
8983: NEG
8984: PUSH
8985: LD_INT 0
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PUSH
8992: LD_INT 1
8994: NEG
8995: PUSH
8996: LD_INT 1
8998: NEG
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 1
9006: NEG
9007: PUSH
9008: LD_INT 2
9010: NEG
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: LD_INT 0
9018: PUSH
9019: LD_INT 2
9021: NEG
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 1
9029: PUSH
9030: LD_INT 1
9032: NEG
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PUSH
9038: LD_INT 2
9040: PUSH
9041: LD_INT 0
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 2
9050: PUSH
9051: LD_INT 1
9053: PUSH
9054: EMPTY
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: LD_INT 2
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: LD_INT 1
9070: PUSH
9071: LD_INT 2
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 0
9080: PUSH
9081: LD_INT 2
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: LD_INT 1
9090: NEG
9091: PUSH
9092: LD_INT 1
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PUSH
9099: LD_INT 2
9101: NEG
9102: PUSH
9103: LD_INT 0
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 2
9112: NEG
9113: PUSH
9114: LD_INT 1
9116: NEG
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 2
9124: NEG
9125: PUSH
9126: LD_INT 2
9128: NEG
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9155: LD_ADDR_VAR 0 18
9159: PUSH
9160: LD_INT 0
9162: PUSH
9163: LD_INT 0
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: PUSH
9170: LD_INT 0
9172: PUSH
9173: LD_INT 1
9175: NEG
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 1
9183: PUSH
9184: LD_INT 0
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: LD_INT 1
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 0
9203: PUSH
9204: LD_INT 1
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 1
9213: NEG
9214: PUSH
9215: LD_INT 0
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 1
9224: NEG
9225: PUSH
9226: LD_INT 1
9228: NEG
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 1
9236: NEG
9237: PUSH
9238: LD_INT 2
9240: NEG
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 0
9248: PUSH
9249: LD_INT 2
9251: NEG
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 1
9259: PUSH
9260: LD_INT 1
9262: NEG
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PUSH
9268: LD_INT 2
9270: PUSH
9271: LD_INT 0
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 2
9280: PUSH
9281: LD_INT 1
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 2
9290: PUSH
9291: LD_INT 2
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: PUSH
9298: LD_INT 1
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PUSH
9308: LD_INT 0
9310: PUSH
9311: LD_INT 2
9313: PUSH
9314: EMPTY
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 1
9320: NEG
9321: PUSH
9322: LD_INT 1
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 2
9331: NEG
9332: PUSH
9333: LD_INT 0
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 2
9342: NEG
9343: PUSH
9344: LD_INT 1
9346: NEG
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: LD_INT 2
9354: NEG
9355: PUSH
9356: LD_INT 2
9358: NEG
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9385: LD_ADDR_VAR 0 19
9389: PUSH
9390: LD_INT 0
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 0
9402: PUSH
9403: LD_INT 1
9405: NEG
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 0
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 1
9423: PUSH
9424: LD_INT 1
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 0
9433: PUSH
9434: LD_INT 1
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: LD_INT 1
9443: NEG
9444: PUSH
9445: LD_INT 0
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PUSH
9452: LD_INT 1
9454: NEG
9455: PUSH
9456: LD_INT 1
9458: NEG
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 1
9466: NEG
9467: PUSH
9468: LD_INT 2
9470: NEG
9471: PUSH
9472: EMPTY
9473: LIST
9474: LIST
9475: PUSH
9476: LD_INT 0
9478: PUSH
9479: LD_INT 2
9481: NEG
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 1
9489: PUSH
9490: LD_INT 1
9492: NEG
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 0
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 2
9510: PUSH
9511: LD_INT 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 2
9520: PUSH
9521: LD_INT 2
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 1
9530: PUSH
9531: LD_INT 2
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 0
9540: PUSH
9541: LD_INT 2
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 1
9550: NEG
9551: PUSH
9552: LD_INT 1
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 2
9561: NEG
9562: PUSH
9563: LD_INT 0
9565: PUSH
9566: EMPTY
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 2
9572: NEG
9573: PUSH
9574: LD_INT 1
9576: NEG
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 2
9584: NEG
9585: PUSH
9586: LD_INT 2
9588: NEG
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9615: LD_ADDR_VAR 0 20
9619: PUSH
9620: LD_INT 0
9622: PUSH
9623: LD_INT 0
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 0
9632: PUSH
9633: LD_INT 1
9635: NEG
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: LD_INT 1
9643: PUSH
9644: LD_INT 0
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PUSH
9654: LD_INT 1
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: LD_INT 0
9663: PUSH
9664: LD_INT 1
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: LD_INT 1
9673: NEG
9674: PUSH
9675: LD_INT 0
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 1
9684: NEG
9685: PUSH
9686: LD_INT 1
9688: NEG
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: PUSH
9694: LD_INT 1
9696: NEG
9697: PUSH
9698: LD_INT 2
9700: NEG
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: PUSH
9706: LD_INT 0
9708: PUSH
9709: LD_INT 2
9711: NEG
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 1
9719: PUSH
9720: LD_INT 1
9722: NEG
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 2
9730: PUSH
9731: LD_INT 0
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 2
9740: PUSH
9741: LD_INT 1
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 1
9760: PUSH
9761: LD_INT 2
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 0
9770: PUSH
9771: LD_INT 2
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 1
9780: NEG
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 2
9791: NEG
9792: PUSH
9793: LD_INT 0
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: LD_INT 2
9802: NEG
9803: PUSH
9804: LD_INT 1
9806: NEG
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 2
9814: NEG
9815: PUSH
9816: LD_INT 2
9818: NEG
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
9845: LD_ADDR_VAR 0 21
9849: PUSH
9850: LD_INT 0
9852: PUSH
9853: LD_INT 0
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 0
9862: PUSH
9863: LD_INT 1
9865: NEG
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 1
9873: PUSH
9874: LD_INT 0
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 1
9883: PUSH
9884: LD_INT 1
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 0
9893: PUSH
9894: LD_INT 1
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 1
9903: NEG
9904: PUSH
9905: LD_INT 0
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 1
9914: NEG
9915: PUSH
9916: LD_INT 1
9918: NEG
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 1
9926: NEG
9927: PUSH
9928: LD_INT 2
9930: NEG
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: LD_INT 2
9941: NEG
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 1
9949: PUSH
9950: LD_INT 1
9952: NEG
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 2
9960: PUSH
9961: LD_INT 0
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: PUSH
9968: LD_INT 2
9970: PUSH
9971: LD_INT 1
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: LD_INT 2
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 1
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 0
10000: PUSH
10001: LD_INT 2
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: LD_INT 1
10010: NEG
10011: PUSH
10012: LD_INT 1
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 2
10021: NEG
10022: PUSH
10023: LD_INT 0
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 2
10032: NEG
10033: PUSH
10034: LD_INT 1
10036: NEG
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 2
10044: NEG
10045: PUSH
10046: LD_INT 2
10048: NEG
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10075: LD_ADDR_VAR 0 22
10079: PUSH
10080: LD_INT 0
10082: PUSH
10083: LD_INT 0
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: PUSH
10090: LD_INT 0
10092: PUSH
10093: LD_INT 1
10095: NEG
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 1
10103: PUSH
10104: LD_INT 0
10106: PUSH
10107: EMPTY
10108: LIST
10109: LIST
10110: PUSH
10111: LD_INT 1
10113: PUSH
10114: LD_INT 1
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: LD_INT 0
10123: PUSH
10124: LD_INT 1
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: PUSH
10131: LD_INT 1
10133: NEG
10134: PUSH
10135: LD_INT 0
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 1
10144: NEG
10145: PUSH
10146: LD_INT 1
10148: NEG
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 1
10156: NEG
10157: PUSH
10158: LD_INT 2
10160: NEG
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 0
10168: PUSH
10169: LD_INT 2
10171: NEG
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 1
10179: PUSH
10180: LD_INT 1
10182: NEG
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: PUSH
10188: LD_INT 2
10190: PUSH
10191: LD_INT 0
10193: PUSH
10194: EMPTY
10195: LIST
10196: LIST
10197: PUSH
10198: LD_INT 2
10200: PUSH
10201: LD_INT 1
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 2
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 1
10220: PUSH
10221: LD_INT 2
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 0
10230: PUSH
10231: LD_INT 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 1
10240: NEG
10241: PUSH
10242: LD_INT 1
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 2
10251: NEG
10252: PUSH
10253: LD_INT 0
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 2
10262: NEG
10263: PUSH
10264: LD_INT 1
10266: NEG
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 2
10274: NEG
10275: PUSH
10276: LD_INT 2
10278: NEG
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
10305: LD_ADDR_VAR 0 23
10309: PUSH
10310: LD_INT 0
10312: PUSH
10313: LD_INT 0
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 0
10322: PUSH
10323: LD_INT 1
10325: NEG
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: LD_INT 0
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 1
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 0
10353: PUSH
10354: LD_INT 1
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 1
10363: NEG
10364: PUSH
10365: LD_INT 0
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: LD_INT 1
10374: NEG
10375: PUSH
10376: LD_INT 1
10378: NEG
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: LD_INT 1
10386: NEG
10387: PUSH
10388: LD_INT 2
10390: NEG
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 0
10398: PUSH
10399: LD_INT 2
10401: NEG
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 1
10409: PUSH
10410: LD_INT 1
10412: NEG
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: LD_INT 0
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: LD_INT 2
10430: PUSH
10431: LD_INT 1
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: LD_INT 2
10443: PUSH
10444: EMPTY
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 1
10450: PUSH
10451: LD_INT 2
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: PUSH
10458: LD_INT 0
10460: PUSH
10461: LD_INT 2
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 1
10470: NEG
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 2
10481: NEG
10482: PUSH
10483: LD_INT 0
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 2
10492: NEG
10493: PUSH
10494: LD_INT 1
10496: NEG
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 2
10504: NEG
10505: PUSH
10506: LD_INT 2
10508: NEG
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: LD_INT 2
10516: NEG
10517: PUSH
10518: LD_INT 3
10520: NEG
10521: PUSH
10522: EMPTY
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 1
10528: NEG
10529: PUSH
10530: LD_INT 3
10532: NEG
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: LD_INT 2
10543: NEG
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: LD_INT 1
10554: NEG
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
10585: LD_ADDR_VAR 0 24
10589: PUSH
10590: LD_INT 0
10592: PUSH
10593: LD_INT 0
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 0
10602: PUSH
10603: LD_INT 1
10605: NEG
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 1
10613: PUSH
10614: LD_INT 0
10616: PUSH
10617: EMPTY
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 0
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 1
10643: NEG
10644: PUSH
10645: LD_INT 0
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 1
10654: NEG
10655: PUSH
10656: LD_INT 1
10658: NEG
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 1
10666: NEG
10667: PUSH
10668: LD_INT 2
10670: NEG
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 0
10678: PUSH
10679: LD_INT 2
10681: NEG
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: LD_INT 1
10692: NEG
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 2
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 1
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 1
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 0
10740: PUSH
10741: LD_INT 2
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 1
10750: NEG
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 2
10761: NEG
10762: PUSH
10763: LD_INT 0
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 2
10772: NEG
10773: PUSH
10774: LD_INT 1
10776: NEG
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 2
10784: NEG
10785: PUSH
10786: LD_INT 2
10788: NEG
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: PUSH
10794: LD_INT 1
10796: PUSH
10797: LD_INT 2
10799: NEG
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: LD_INT 1
10810: NEG
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: LD_INT 1
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: LD_INT 2
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
10861: LD_ADDR_VAR 0 25
10865: PUSH
10866: LD_INT 0
10868: PUSH
10869: LD_INT 0
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: LD_INT 0
10878: PUSH
10879: LD_INT 1
10881: NEG
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 1
10889: PUSH
10890: LD_INT 0
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 1
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PUSH
10907: LD_INT 0
10909: PUSH
10910: LD_INT 1
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 1
10919: NEG
10920: PUSH
10921: LD_INT 0
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 1
10930: NEG
10931: PUSH
10932: LD_INT 1
10934: NEG
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 1
10942: NEG
10943: PUSH
10944: LD_INT 2
10946: NEG
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 0
10954: PUSH
10955: LD_INT 2
10957: NEG
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 1
10965: PUSH
10966: LD_INT 1
10968: NEG
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: LD_INT 0
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 2
10986: PUSH
10987: LD_INT 1
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 1
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 0
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 1
11026: NEG
11027: PUSH
11028: LD_INT 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 2
11037: NEG
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 2
11048: NEG
11049: PUSH
11050: LD_INT 1
11052: NEG
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 2
11060: NEG
11061: PUSH
11062: LD_INT 2
11064: NEG
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 3
11072: PUSH
11073: LD_INT 1
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_INT 2
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: LD_INT 2
11092: PUSH
11093: LD_INT 3
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 1
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
11135: LD_ADDR_VAR 0 26
11139: PUSH
11140: LD_INT 0
11142: PUSH
11143: LD_INT 0
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 0
11152: PUSH
11153: LD_INT 1
11155: NEG
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: LD_INT 0
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: LD_INT 1
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 0
11183: PUSH
11184: LD_INT 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 1
11193: NEG
11194: PUSH
11195: LD_INT 0
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 1
11204: NEG
11205: PUSH
11206: LD_INT 1
11208: NEG
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 1
11216: NEG
11217: PUSH
11218: LD_INT 2
11220: NEG
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 0
11228: PUSH
11229: LD_INT 2
11231: NEG
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: LD_INT 1
11242: NEG
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 0
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: LD_INT 2
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: LD_INT 2
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 0
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 1
11300: NEG
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: NEG
11312: PUSH
11313: LD_INT 0
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 2
11322: NEG
11323: PUSH
11324: LD_INT 1
11326: NEG
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 2
11334: NEG
11335: PUSH
11336: LD_INT 2
11338: NEG
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 2
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 1
11356: PUSH
11357: LD_INT 3
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: LD_INT 1
11366: NEG
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 2
11377: NEG
11378: PUSH
11379: LD_INT 1
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
11411: LD_ADDR_VAR 0 27
11415: PUSH
11416: LD_INT 0
11418: PUSH
11419: LD_INT 0
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 0
11428: PUSH
11429: LD_INT 1
11431: NEG
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 1
11439: PUSH
11440: LD_INT 0
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 0
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 1
11469: NEG
11470: PUSH
11471: LD_INT 0
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 1
11480: NEG
11481: PUSH
11482: LD_INT 1
11484: NEG
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 1
11492: NEG
11493: PUSH
11494: LD_INT 2
11496: NEG
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 2
11507: NEG
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: LD_INT 1
11518: NEG
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: LD_INT 0
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 2
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: LD_INT 2
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 1
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 0
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 1
11576: NEG
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 2
11587: NEG
11588: PUSH
11589: LD_INT 0
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 2
11598: NEG
11599: PUSH
11600: LD_INT 1
11602: NEG
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 2
11610: NEG
11611: PUSH
11612: LD_INT 2
11614: NEG
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 1
11622: NEG
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 2
11633: NEG
11634: PUSH
11635: LD_INT 1
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 3
11644: NEG
11645: PUSH
11646: LD_INT 1
11648: NEG
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 3
11656: NEG
11657: PUSH
11658: LD_INT 2
11660: NEG
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
11691: LD_ADDR_VAR 0 28
11695: PUSH
11696: LD_INT 0
11698: PUSH
11699: LD_INT 0
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 0
11708: PUSH
11709: LD_INT 1
11711: NEG
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 1
11719: PUSH
11720: LD_INT 0
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 0
11739: PUSH
11740: LD_INT 1
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 1
11749: NEG
11750: PUSH
11751: LD_INT 0
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 1
11760: NEG
11761: PUSH
11762: LD_INT 1
11764: NEG
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 1
11772: NEG
11773: PUSH
11774: LD_INT 2
11776: NEG
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 0
11784: PUSH
11785: LD_INT 2
11787: NEG
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: LD_INT 1
11795: PUSH
11796: LD_INT 1
11798: NEG
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 2
11806: PUSH
11807: LD_INT 0
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 2
11816: PUSH
11817: LD_INT 1
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PUSH
11824: LD_INT 2
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 1
11836: PUSH
11837: LD_INT 2
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 0
11846: PUSH
11847: LD_INT 2
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 1
11856: NEG
11857: PUSH
11858: LD_INT 1
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: LD_INT 2
11867: NEG
11868: PUSH
11869: LD_INT 0
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PUSH
11876: LD_INT 2
11878: NEG
11879: PUSH
11880: LD_INT 1
11882: NEG
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 2
11890: NEG
11891: PUSH
11892: LD_INT 2
11894: NEG
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: NEG
11903: PUSH
11904: LD_INT 3
11906: NEG
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 1
11914: NEG
11915: PUSH
11916: LD_INT 3
11918: NEG
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 3
11926: NEG
11927: PUSH
11928: LD_INT 1
11930: NEG
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 3
11938: NEG
11939: PUSH
11940: LD_INT 2
11942: NEG
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
11973: LD_ADDR_VAR 0 29
11977: PUSH
11978: LD_INT 0
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 0
11990: PUSH
11991: LD_INT 1
11993: NEG
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: LD_INT 0
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 1
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 0
12021: PUSH
12022: LD_INT 1
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 1
12031: NEG
12032: PUSH
12033: LD_INT 0
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 1
12042: NEG
12043: PUSH
12044: LD_INT 1
12046: NEG
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 1
12054: NEG
12055: PUSH
12056: LD_INT 2
12058: NEG
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: LD_INT 2
12069: NEG
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: LD_INT 1
12080: NEG
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 2
12088: PUSH
12089: LD_INT 0
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 1
12108: PUSH
12109: LD_INT 2
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 0
12118: PUSH
12119: LD_INT 2
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 1
12128: NEG
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 2
12139: NEG
12140: PUSH
12141: LD_INT 1
12143: NEG
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 2
12151: NEG
12152: PUSH
12153: LD_INT 2
12155: NEG
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 2
12163: NEG
12164: PUSH
12165: LD_INT 3
12167: NEG
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 1
12178: NEG
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: LD_INT 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: LD_INT 3
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 1
12206: NEG
12207: PUSH
12208: LD_INT 2
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 3
12217: NEG
12218: PUSH
12219: LD_INT 2
12221: NEG
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
12252: LD_ADDR_VAR 0 30
12256: PUSH
12257: LD_INT 0
12259: PUSH
12260: LD_INT 0
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 0
12269: PUSH
12270: LD_INT 1
12272: NEG
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: LD_INT 0
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: LD_INT 1
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 0
12300: PUSH
12301: LD_INT 1
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: PUSH
12308: LD_INT 1
12310: NEG
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 1
12321: NEG
12322: PUSH
12323: LD_INT 1
12325: NEG
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 1
12333: NEG
12334: PUSH
12335: LD_INT 2
12337: NEG
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 0
12345: PUSH
12346: LD_INT 2
12348: NEG
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: LD_INT 1
12359: NEG
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PUSH
12365: LD_INT 2
12367: PUSH
12368: LD_INT 0
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: LD_INT 1
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 2
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 1
12397: PUSH
12398: LD_INT 2
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 1
12407: NEG
12408: PUSH
12409: LD_INT 1
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 2
12418: NEG
12419: PUSH
12420: LD_INT 0
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 2
12429: NEG
12430: PUSH
12431: LD_INT 1
12433: NEG
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 1
12441: NEG
12442: PUSH
12443: LD_INT 3
12445: NEG
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 1
12453: PUSH
12454: LD_INT 2
12456: NEG
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 3
12464: PUSH
12465: LD_INT 2
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 2
12474: PUSH
12475: LD_INT 3
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: NEG
12485: PUSH
12486: LD_INT 1
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 3
12495: NEG
12496: PUSH
12497: LD_INT 1
12499: NEG
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
12530: LD_ADDR_VAR 0 31
12534: PUSH
12535: LD_INT 0
12537: PUSH
12538: LD_INT 0
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: LD_INT 0
12547: PUSH
12548: LD_INT 1
12550: NEG
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 1
12558: PUSH
12559: LD_INT 0
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: LD_INT 1
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 0
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 1
12588: NEG
12589: PUSH
12590: LD_INT 0
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 1
12599: NEG
12600: PUSH
12601: LD_INT 1
12603: NEG
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 1
12611: NEG
12612: PUSH
12613: LD_INT 2
12615: NEG
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: LD_INT 1
12626: NEG
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: LD_INT 0
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 2
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 0
12674: PUSH
12675: LD_INT 2
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 1
12684: NEG
12685: PUSH
12686: LD_INT 1
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: PUSH
12693: LD_INT 2
12695: NEG
12696: PUSH
12697: LD_INT 1
12699: NEG
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 2
12707: NEG
12708: PUSH
12709: LD_INT 2
12711: NEG
12712: PUSH
12713: EMPTY
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 2
12719: NEG
12720: PUSH
12721: LD_INT 3
12723: NEG
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 2
12731: PUSH
12732: LD_INT 1
12734: NEG
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 3
12742: PUSH
12743: LD_INT 1
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 1
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 1
12762: NEG
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 3
12773: NEG
12774: PUSH
12775: LD_INT 2
12777: NEG
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
12808: LD_ADDR_VAR 0 32
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: LD_INT 0
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 0
12825: PUSH
12826: LD_INT 1
12828: NEG
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 1
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 1
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 0
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 1
12866: NEG
12867: PUSH
12868: LD_INT 0
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 1
12877: NEG
12878: PUSH
12879: LD_INT 1
12881: NEG
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 1
12889: NEG
12890: PUSH
12891: LD_INT 2
12893: NEG
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 0
12901: PUSH
12902: LD_INT 2
12904: NEG
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: LD_INT 1
12915: NEG
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 2
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: LD_INT 2
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: LD_INT 1
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 0
12953: PUSH
12954: LD_INT 2
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 1
12963: NEG
12964: PUSH
12965: LD_INT 1
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 2
12974: NEG
12975: PUSH
12976: LD_INT 0
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 2
12985: NEG
12986: PUSH
12987: LD_INT 1
12989: NEG
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 1
12997: NEG
12998: PUSH
12999: LD_INT 3
13001: NEG
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 1
13009: PUSH
13010: LD_INT 2
13012: NEG
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 3
13020: PUSH
13021: LD_INT 2
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 2
13030: PUSH
13031: LD_INT 3
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 2
13040: NEG
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 3
13051: NEG
13052: PUSH
13053: LD_INT 1
13055: NEG
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13086: LD_ADDR_VAR 0 33
13090: PUSH
13091: LD_INT 0
13093: PUSH
13094: LD_INT 0
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: PUSH
13101: LD_INT 0
13103: PUSH
13104: LD_INT 1
13106: NEG
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: PUSH
13112: LD_INT 1
13114: PUSH
13115: LD_INT 0
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 1
13124: PUSH
13125: LD_INT 1
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 0
13134: PUSH
13135: LD_INT 1
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 1
13144: NEG
13145: PUSH
13146: LD_INT 0
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 1
13155: NEG
13156: PUSH
13157: LD_INT 1
13159: NEG
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 1
13167: NEG
13168: PUSH
13169: LD_INT 2
13171: NEG
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 1
13179: PUSH
13180: LD_INT 1
13182: NEG
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 2
13190: PUSH
13191: LD_INT 0
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 2
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 1
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: LD_INT 0
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 1
13230: NEG
13231: PUSH
13232: LD_INT 1
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PUSH
13239: LD_INT 2
13241: NEG
13242: PUSH
13243: LD_INT 0
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 2
13252: NEG
13253: PUSH
13254: LD_INT 1
13256: NEG
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 2
13264: NEG
13265: PUSH
13266: LD_INT 2
13268: NEG
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 2
13276: NEG
13277: PUSH
13278: LD_INT 3
13280: NEG
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 2
13288: PUSH
13289: LD_INT 1
13291: NEG
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: LD_INT 1
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 1
13309: PUSH
13310: LD_INT 3
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 1
13319: NEG
13320: PUSH
13321: LD_INT 2
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 3
13330: NEG
13331: PUSH
13332: LD_INT 2
13334: NEG
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
13365: LD_ADDR_VAR 0 34
13369: PUSH
13370: LD_INT 0
13372: PUSH
13373: LD_INT 0
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 0
13382: PUSH
13383: LD_INT 1
13385: NEG
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 1
13393: PUSH
13394: LD_INT 0
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 0
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 1
13423: NEG
13424: PUSH
13425: LD_INT 0
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 1
13434: NEG
13435: PUSH
13436: LD_INT 1
13438: NEG
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 1
13446: NEG
13447: PUSH
13448: LD_INT 2
13450: NEG
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 0
13458: PUSH
13459: LD_INT 2
13461: NEG
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 1
13469: PUSH
13470: LD_INT 1
13472: NEG
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 2
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 2
13490: PUSH
13491: LD_INT 2
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 1
13500: PUSH
13501: LD_INT 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 1
13510: NEG
13511: PUSH
13512: LD_INT 1
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: LD_INT 2
13521: NEG
13522: PUSH
13523: LD_INT 0
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 2
13532: NEG
13533: PUSH
13534: LD_INT 1
13536: NEG
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 2
13544: NEG
13545: PUSH
13546: LD_INT 2
13548: NEG
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 1
13556: NEG
13557: PUSH
13558: LD_INT 3
13560: NEG
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: LD_INT 2
13571: NEG
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: LD_INT 3
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 3
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: LD_INT 2
13599: NEG
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 3
13610: NEG
13611: PUSH
13612: LD_INT 1
13614: NEG
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
13645: LD_ADDR_VAR 0 35
13649: PUSH
13650: LD_INT 0
13652: PUSH
13653: LD_INT 0
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 0
13662: PUSH
13663: LD_INT 1
13665: NEG
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: LD_INT 0
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 1
13683: PUSH
13684: LD_INT 1
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 0
13693: PUSH
13694: LD_INT 1
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 1
13703: NEG
13704: PUSH
13705: LD_INT 0
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 1
13714: NEG
13715: PUSH
13716: LD_INT 1
13718: NEG
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 2
13736: NEG
13737: PUSH
13738: LD_INT 1
13740: NEG
13741: PUSH
13742: EMPTY
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
13757: LD_ADDR_VAR 0 36
13761: PUSH
13762: LD_INT 0
13764: PUSH
13765: LD_INT 0
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 0
13774: PUSH
13775: LD_INT 1
13777: NEG
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 1
13785: PUSH
13786: LD_INT 0
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 1
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 0
13805: PUSH
13806: LD_INT 1
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 1
13815: NEG
13816: PUSH
13817: LD_INT 0
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 1
13826: NEG
13827: PUSH
13828: LD_INT 1
13830: NEG
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 1
13838: NEG
13839: PUSH
13840: LD_INT 2
13842: NEG
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
13869: LD_ADDR_VAR 0 37
13873: PUSH
13874: LD_INT 0
13876: PUSH
13877: LD_INT 0
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 0
13886: PUSH
13887: LD_INT 1
13889: NEG
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: LD_INT 0
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 1
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: PUSH
13915: LD_INT 0
13917: PUSH
13918: LD_INT 1
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 1
13927: NEG
13928: PUSH
13929: LD_INT 0
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 1
13938: NEG
13939: PUSH
13940: LD_INT 1
13942: NEG
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 1
13950: PUSH
13951: LD_INT 1
13953: NEG
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 1
13961: NEG
13962: PUSH
13963: LD_INT 1
13965: PUSH
13966: EMPTY
13967: LIST
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
13981: LD_ADDR_VAR 0 38
13985: PUSH
13986: LD_INT 0
13988: PUSH
13989: LD_INT 0
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 0
13998: PUSH
13999: LD_INT 1
14001: NEG
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: PUSH
14007: LD_INT 1
14009: PUSH
14010: LD_INT 0
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 1
14019: PUSH
14020: LD_INT 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 0
14029: PUSH
14030: LD_INT 1
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 1
14039: NEG
14040: PUSH
14041: LD_INT 0
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 1
14050: NEG
14051: PUSH
14052: LD_INT 1
14054: NEG
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: LD_INT 1
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 2
14072: NEG
14073: PUSH
14074: LD_INT 1
14076: NEG
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
14093: LD_ADDR_VAR 0 39
14097: PUSH
14098: LD_INT 0
14100: PUSH
14101: LD_INT 0
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 0
14110: PUSH
14111: LD_INT 1
14113: NEG
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 1
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PUSH
14129: LD_INT 1
14131: PUSH
14132: LD_INT 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 0
14141: PUSH
14142: LD_INT 1
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 1
14151: NEG
14152: PUSH
14153: LD_INT 0
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 1
14162: NEG
14163: PUSH
14164: LD_INT 1
14166: NEG
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 1
14174: NEG
14175: PUSH
14176: LD_INT 2
14178: NEG
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 1
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
14205: LD_ADDR_VAR 0 40
14209: PUSH
14210: LD_INT 0
14212: PUSH
14213: LD_INT 0
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 0
14222: PUSH
14223: LD_INT 1
14225: NEG
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 1
14233: PUSH
14234: LD_INT 0
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 1
14243: PUSH
14244: LD_INT 1
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 0
14253: PUSH
14254: LD_INT 1
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 1
14263: NEG
14264: PUSH
14265: LD_INT 0
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: LD_INT 1
14274: NEG
14275: PUSH
14276: LD_INT 1
14278: NEG
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: PUSH
14284: LD_INT 1
14286: PUSH
14287: LD_INT 1
14289: NEG
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PUSH
14295: LD_INT 1
14297: NEG
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: LIST
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14317: LD_ADDR_VAR 0 41
14321: PUSH
14322: LD_INT 0
14324: PUSH
14325: LD_INT 0
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: LD_INT 1
14337: NEG
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 1
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 1
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 0
14365: PUSH
14366: LD_INT 1
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 1
14375: NEG
14376: PUSH
14377: LD_INT 0
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 1
14386: NEG
14387: PUSH
14388: LD_INT 1
14390: NEG
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 1
14398: NEG
14399: PUSH
14400: LD_INT 2
14402: NEG
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 1
14410: PUSH
14411: LD_INT 1
14413: NEG
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: LD_INT 0
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 1
14461: NEG
14462: PUSH
14463: LD_INT 1
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: LD_INT 2
14472: NEG
14473: PUSH
14474: LD_INT 0
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 2
14483: NEG
14484: PUSH
14485: LD_INT 1
14487: NEG
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 2
14495: NEG
14496: PUSH
14497: LD_INT 2
14499: NEG
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 2
14507: NEG
14508: PUSH
14509: LD_INT 3
14511: NEG
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 2
14519: PUSH
14520: LD_INT 1
14522: NEG
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 0
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 3
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 3
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 3
14560: PUSH
14561: LD_INT 3
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: LD_INT 3
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 2
14580: NEG
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 3
14591: NEG
14592: PUSH
14593: LD_INT 0
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: LD_INT 3
14602: NEG
14603: PUSH
14604: LD_INT 1
14606: NEG
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 3
14614: NEG
14615: PUSH
14616: LD_INT 2
14618: NEG
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: LD_INT 3
14626: NEG
14627: PUSH
14628: LD_INT 3
14630: NEG
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
14667: LD_ADDR_VAR 0 42
14671: PUSH
14672: LD_INT 0
14674: PUSH
14675: LD_INT 0
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 0
14684: PUSH
14685: LD_INT 1
14687: NEG
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 1
14705: PUSH
14706: LD_INT 1
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 0
14715: PUSH
14716: LD_INT 1
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 1
14725: NEG
14726: PUSH
14727: LD_INT 0
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 1
14736: NEG
14737: PUSH
14738: LD_INT 1
14740: NEG
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 1
14748: NEG
14749: PUSH
14750: LD_INT 2
14752: NEG
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 0
14760: PUSH
14761: LD_INT 2
14763: NEG
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 1
14771: PUSH
14772: LD_INT 1
14774: NEG
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 2
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 2
14792: PUSH
14793: LD_INT 2
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 1
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: LD_INT 0
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 1
14822: NEG
14823: PUSH
14824: LD_INT 1
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 2
14833: NEG
14834: PUSH
14835: LD_INT 1
14837: NEG
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 2
14845: NEG
14846: PUSH
14847: LD_INT 2
14849: NEG
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 2
14857: NEG
14858: PUSH
14859: LD_INT 3
14861: NEG
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: LD_INT 1
14869: NEG
14870: PUSH
14871: LD_INT 3
14873: NEG
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: LD_INT 3
14884: NEG
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: LD_INT 1
14892: PUSH
14893: LD_INT 2
14895: NEG
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 3
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: LD_INT 3
14913: PUSH
14914: LD_INT 3
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 2
14923: PUSH
14924: LD_INT 3
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 1
14933: PUSH
14934: LD_INT 3
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 0
14943: PUSH
14944: LD_INT 3
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 1
14953: NEG
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 3
14964: NEG
14965: PUSH
14966: LD_INT 2
14968: NEG
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 3
14976: NEG
14977: PUSH
14978: LD_INT 3
14980: NEG
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15017: LD_ADDR_VAR 0 43
15021: PUSH
15022: LD_INT 0
15024: PUSH
15025: LD_INT 0
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: LD_INT 0
15034: PUSH
15035: LD_INT 1
15037: NEG
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: LD_INT 0
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: LD_INT 1
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 0
15065: PUSH
15066: LD_INT 1
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 1
15075: NEG
15076: PUSH
15077: LD_INT 0
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 1
15086: NEG
15087: PUSH
15088: LD_INT 1
15090: NEG
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 1
15098: NEG
15099: PUSH
15100: LD_INT 2
15102: NEG
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 0
15110: PUSH
15111: LD_INT 2
15113: NEG
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 1
15121: PUSH
15122: LD_INT 1
15124: NEG
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: LD_INT 0
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 2
15142: PUSH
15143: LD_INT 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 1
15152: PUSH
15153: LD_INT 2
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 0
15162: PUSH
15163: LD_INT 2
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 1
15172: NEG
15173: PUSH
15174: LD_INT 1
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 2
15183: NEG
15184: PUSH
15185: LD_INT 0
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 2
15194: NEG
15195: PUSH
15196: LD_INT 1
15198: NEG
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 1
15206: NEG
15207: PUSH
15208: LD_INT 3
15210: NEG
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 0
15218: PUSH
15219: LD_INT 3
15221: NEG
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: LD_INT 2
15232: NEG
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 1
15243: NEG
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 3
15251: PUSH
15252: LD_INT 0
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 3
15261: PUSH
15262: LD_INT 1
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 1
15271: PUSH
15272: LD_INT 3
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: LD_INT 3
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 1
15291: NEG
15292: PUSH
15293: LD_INT 2
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 2
15302: NEG
15303: PUSH
15304: LD_INT 1
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 3
15313: NEG
15314: PUSH
15315: LD_INT 0
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 3
15324: NEG
15325: PUSH
15326: LD_INT 1
15328: NEG
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15365: LD_ADDR_VAR 0 44
15369: PUSH
15370: LD_INT 0
15372: PUSH
15373: LD_INT 0
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: PUSH
15380: LD_INT 0
15382: PUSH
15383: LD_INT 1
15385: NEG
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 1
15393: PUSH
15394: LD_INT 0
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 1
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 0
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 1
15423: NEG
15424: PUSH
15425: LD_INT 0
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 1
15434: NEG
15435: PUSH
15436: LD_INT 1
15438: NEG
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 1
15446: NEG
15447: PUSH
15448: LD_INT 2
15450: NEG
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 1
15458: PUSH
15459: LD_INT 1
15461: NEG
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: LD_INT 0
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 2
15479: PUSH
15480: LD_INT 1
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 2
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 1
15499: PUSH
15500: LD_INT 2
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: PUSH
15507: LD_INT 1
15509: NEG
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 2
15520: NEG
15521: PUSH
15522: LD_INT 0
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 2
15531: NEG
15532: PUSH
15533: LD_INT 1
15535: NEG
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 2
15543: NEG
15544: PUSH
15545: LD_INT 2
15547: NEG
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 2
15555: NEG
15556: PUSH
15557: LD_INT 3
15559: NEG
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 2
15567: PUSH
15568: LD_INT 1
15570: NEG
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 3
15578: PUSH
15579: LD_INT 0
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 3
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 3
15608: PUSH
15609: LD_INT 3
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 3
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: PUSH
15626: LD_INT 2
15628: NEG
15629: PUSH
15630: LD_INT 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 3
15639: NEG
15640: PUSH
15641: LD_INT 0
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 3
15650: NEG
15651: PUSH
15652: LD_INT 1
15654: NEG
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 3
15662: NEG
15663: PUSH
15664: LD_INT 2
15666: NEG
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 3
15674: NEG
15675: PUSH
15676: LD_INT 3
15678: NEG
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: LIST
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15715: LD_ADDR_VAR 0 45
15719: PUSH
15720: LD_INT 0
15722: PUSH
15723: LD_INT 0
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 0
15732: PUSH
15733: LD_INT 1
15735: NEG
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: LD_INT 0
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 0
15763: PUSH
15764: LD_INT 1
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 1
15773: NEG
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 1
15784: NEG
15785: PUSH
15786: LD_INT 1
15788: NEG
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: LD_INT 1
15796: NEG
15797: PUSH
15798: LD_INT 2
15800: NEG
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: LD_INT 2
15811: NEG
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: PUSH
15817: LD_INT 1
15819: PUSH
15820: LD_INT 1
15822: NEG
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 2
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: LD_INT 2
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 2
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 1
15870: NEG
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: NEG
15882: PUSH
15883: LD_INT 1
15885: NEG
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 2
15893: NEG
15894: PUSH
15895: LD_INT 2
15897: NEG
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 2
15905: NEG
15906: PUSH
15907: LD_INT 3
15909: NEG
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: LD_INT 3
15921: NEG
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 0
15929: PUSH
15930: LD_INT 3
15932: NEG
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 1
15940: PUSH
15941: LD_INT 2
15943: NEG
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 3
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 2
15971: PUSH
15972: LD_INT 3
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: LD_INT 1
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: LD_INT 0
15991: PUSH
15992: LD_INT 3
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: LD_INT 2
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 3
16012: NEG
16013: PUSH
16014: LD_INT 2
16016: NEG
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 3
16024: NEG
16025: PUSH
16026: LD_INT 3
16028: NEG
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16065: LD_ADDR_VAR 0 46
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: LD_INT 1
16085: NEG
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: LD_INT 0
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: LD_INT 1
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: PUSH
16111: LD_INT 0
16113: PUSH
16114: LD_INT 1
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 1
16123: NEG
16124: PUSH
16125: LD_INT 0
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 1
16134: NEG
16135: PUSH
16136: LD_INT 1
16138: NEG
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: LD_INT 2
16150: NEG
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 0
16158: PUSH
16159: LD_INT 2
16161: NEG
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: LD_INT 1
16172: NEG
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 2
16180: PUSH
16181: LD_INT 0
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 1
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: LD_INT 2
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 0
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 1
16220: NEG
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 2
16231: NEG
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 2
16242: NEG
16243: PUSH
16244: LD_INT 1
16246: NEG
16247: PUSH
16248: EMPTY
16249: LIST
16250: LIST
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: LD_INT 3
16258: NEG
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: LD_INT 0
16266: PUSH
16267: LD_INT 3
16269: NEG
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: PUSH
16275: LD_INT 1
16277: PUSH
16278: LD_INT 2
16280: NEG
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 2
16288: PUSH
16289: LD_INT 1
16291: NEG
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 3
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 1
16319: PUSH
16320: LD_INT 3
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 1
16339: NEG
16340: PUSH
16341: LD_INT 2
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 2
16350: NEG
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 3
16361: NEG
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 3
16372: NEG
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16413: LD_ADDR_VAR 0 47
16417: PUSH
16418: LD_INT 0
16420: PUSH
16421: LD_INT 0
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 0
16430: PUSH
16431: LD_INT 1
16433: NEG
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: LD_INT 0
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 1
16451: PUSH
16452: LD_INT 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 0
16461: PUSH
16462: LD_INT 1
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 1
16471: NEG
16472: PUSH
16473: LD_INT 0
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: LD_INT 1
16486: NEG
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: PUSH
16492: LD_INT 1
16494: NEG
16495: PUSH
16496: LD_INT 2
16498: NEG
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 0
16506: PUSH
16507: LD_INT 2
16509: NEG
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: LD_INT 1
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: LD_INT 2
16528: NEG
16529: PUSH
16530: LD_INT 1
16532: NEG
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 2
16540: NEG
16541: PUSH
16542: LD_INT 2
16544: NEG
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
16564: LD_ADDR_VAR 0 48
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 0
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 0
16581: PUSH
16582: LD_INT 1
16584: NEG
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: LD_INT 0
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: LD_INT 0
16612: PUSH
16613: LD_INT 1
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 1
16622: NEG
16623: PUSH
16624: LD_INT 0
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: LD_INT 1
16637: NEG
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 1
16645: NEG
16646: PUSH
16647: LD_INT 2
16649: NEG
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: PUSH
16655: LD_INT 0
16657: PUSH
16658: LD_INT 2
16660: NEG
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 1
16668: PUSH
16669: LD_INT 1
16671: NEG
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: LD_INT 0
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 2
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
16711: LD_ADDR_VAR 0 49
16715: PUSH
16716: LD_INT 0
16718: PUSH
16719: LD_INT 0
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 0
16728: PUSH
16729: LD_INT 1
16731: NEG
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 1
16739: PUSH
16740: LD_INT 0
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 1
16749: PUSH
16750: LD_INT 1
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 0
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PUSH
16767: LD_INT 1
16769: NEG
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 1
16780: NEG
16781: PUSH
16782: LD_INT 1
16784: NEG
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 1
16792: PUSH
16793: LD_INT 1
16795: NEG
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: LD_INT 0
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 2
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 1
16833: PUSH
16834: LD_INT 2
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
16855: LD_ADDR_VAR 0 50
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: LD_INT 0
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 0
16872: PUSH
16873: LD_INT 1
16875: NEG
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 1
16883: PUSH
16884: LD_INT 0
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 0
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: NEG
16914: PUSH
16915: LD_INT 0
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: LD_INT 1
16928: NEG
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: LD_INT 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 2
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: LD_INT 2
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 0
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: EMPTY
16971: LIST
16972: LIST
16973: PUSH
16974: LD_INT 1
16976: NEG
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
16999: LD_ADDR_VAR 0 51
17003: PUSH
17004: LD_INT 0
17006: PUSH
17007: LD_INT 0
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 0
17016: PUSH
17017: LD_INT 1
17019: NEG
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: LD_INT 1
17027: PUSH
17028: LD_INT 0
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: PUSH
17035: LD_INT 1
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: PUSH
17045: LD_INT 0
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 1
17057: NEG
17058: PUSH
17059: LD_INT 0
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 1
17068: NEG
17069: PUSH
17070: LD_INT 1
17072: NEG
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 0
17090: PUSH
17091: LD_INT 2
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 1
17100: NEG
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: LD_INT 0
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 2
17122: NEG
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17146: LD_ADDR_VAR 0 52
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: LD_INT 0
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 1
17166: NEG
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 1
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 0
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: NEG
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 1
17215: NEG
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: LD_INT 2
17231: NEG
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 1
17239: NEG
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: LD_INT 0
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: LD_INT 1
17265: NEG
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 2
17273: NEG
17274: PUSH
17275: LD_INT 2
17277: NEG
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17297: LD_ADDR_VAR 0 53
17301: PUSH
17302: LD_INT 0
17304: PUSH
17305: LD_INT 0
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 0
17314: PUSH
17315: LD_INT 1
17317: NEG
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: LD_INT 0
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: LD_INT 1
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 0
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 1
17355: NEG
17356: PUSH
17357: LD_INT 0
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 1
17366: NEG
17367: PUSH
17368: LD_INT 1
17370: NEG
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: NEG
17379: PUSH
17380: LD_INT 2
17382: NEG
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: LD_INT 0
17390: PUSH
17391: LD_INT 2
17393: NEG
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 1
17401: PUSH
17402: LD_INT 1
17404: NEG
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 2
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 2
17432: PUSH
17433: LD_INT 2
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: PUSH
17443: LD_INT 2
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: LD_INT 0
17452: PUSH
17453: LD_INT 2
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 1
17462: NEG
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 2
17473: NEG
17474: PUSH
17475: LD_INT 0
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 2
17484: NEG
17485: PUSH
17486: LD_INT 1
17488: NEG
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: NEG
17497: PUSH
17498: LD_INT 2
17500: NEG
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17527: LD_ADDR_VAR 0 54
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: LD_INT 0
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 0
17544: PUSH
17545: LD_INT 1
17547: NEG
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: LD_INT 0
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 1
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 0
17575: PUSH
17576: LD_INT 1
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 1
17585: NEG
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 1
17596: NEG
17597: PUSH
17598: LD_INT 1
17600: NEG
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 1
17608: NEG
17609: PUSH
17610: LD_INT 2
17612: NEG
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 2
17623: NEG
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 1
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 2
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 2
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 1
17672: PUSH
17673: LD_INT 2
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: PUSH
17680: LD_INT 0
17682: PUSH
17683: LD_INT 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 1
17692: NEG
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 2
17703: NEG
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 2
17714: NEG
17715: PUSH
17716: LD_INT 1
17718: NEG
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 2
17726: NEG
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: EMPTY
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17757: LD_ADDR_VAR 0 55
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: LD_INT 0
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 0
17774: PUSH
17775: LD_INT 1
17777: NEG
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: LD_INT 1
17785: PUSH
17786: LD_INT 0
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 1
17795: PUSH
17796: LD_INT 1
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 0
17805: PUSH
17806: LD_INT 1
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: LD_INT 1
17815: NEG
17816: PUSH
17817: LD_INT 0
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 1
17826: NEG
17827: PUSH
17828: LD_INT 1
17830: NEG
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 1
17838: NEG
17839: PUSH
17840: LD_INT 2
17842: NEG
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 0
17850: PUSH
17851: LD_INT 2
17853: NEG
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 2
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 2
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: LD_INT 2
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: NEG
17923: PUSH
17924: LD_INT 1
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 2
17933: NEG
17934: PUSH
17935: LD_INT 0
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 2
17944: NEG
17945: PUSH
17946: LD_INT 1
17948: NEG
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 2
17956: NEG
17957: PUSH
17958: LD_INT 2
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17987: LD_ADDR_VAR 0 56
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: LD_INT 0
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: LD_INT 1
18007: NEG
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: PUSH
18016: LD_INT 0
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: LD_INT 1
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 1
18045: NEG
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 1
18056: NEG
18057: PUSH
18058: LD_INT 1
18060: NEG
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 1
18068: NEG
18069: PUSH
18070: LD_INT 2
18072: NEG
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: LD_INT 0
18080: PUSH
18081: LD_INT 2
18083: NEG
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: LD_INT 1
18091: PUSH
18092: LD_INT 1
18094: NEG
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 2
18102: PUSH
18103: LD_INT 0
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 2
18112: PUSH
18113: LD_INT 1
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 2
18122: PUSH
18123: LD_INT 2
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: LD_INT 0
18142: PUSH
18143: LD_INT 2
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 1
18152: NEG
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: PUSH
18161: LD_INT 2
18163: NEG
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 2
18174: NEG
18175: PUSH
18176: LD_INT 1
18178: NEG
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: NEG
18187: PUSH
18188: LD_INT 2
18190: NEG
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18217: LD_ADDR_VAR 0 57
18221: PUSH
18222: LD_INT 0
18224: PUSH
18225: LD_INT 0
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: LD_INT 1
18237: NEG
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 0
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 1
18275: NEG
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 1
18286: NEG
18287: PUSH
18288: LD_INT 1
18290: NEG
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 1
18298: NEG
18299: PUSH
18300: LD_INT 2
18302: NEG
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 0
18310: PUSH
18311: LD_INT 2
18313: NEG
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: LD_INT 1
18324: NEG
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 2
18332: PUSH
18333: LD_INT 0
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 2
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 0
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 1
18382: NEG
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 2
18393: NEG
18394: PUSH
18395: LD_INT 0
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 2
18404: NEG
18405: PUSH
18406: LD_INT 1
18408: NEG
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 2
18416: NEG
18417: PUSH
18418: LD_INT 2
18420: NEG
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18447: LD_ADDR_VAR 0 58
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: LD_INT 0
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 0
18464: PUSH
18465: LD_INT 1
18467: NEG
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 1
18505: NEG
18506: PUSH
18507: LD_INT 0
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 1
18516: NEG
18517: PUSH
18518: LD_INT 1
18520: NEG
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 1
18528: NEG
18529: PUSH
18530: LD_INT 2
18532: NEG
18533: PUSH
18534: EMPTY
18535: LIST
18536: LIST
18537: PUSH
18538: LD_INT 0
18540: PUSH
18541: LD_INT 2
18543: NEG
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 2
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 0
18602: PUSH
18603: LD_INT 2
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: NEG
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: NEG
18635: PUSH
18636: LD_INT 1
18638: NEG
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 2
18646: NEG
18647: PUSH
18648: LD_INT 2
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
18677: LD_ADDR_VAR 0 59
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 0
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 0
18694: PUSH
18695: LD_INT 1
18697: NEG
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 1
18705: PUSH
18706: LD_INT 0
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 1
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: LD_INT 0
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: LD_INT 0
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 1
18746: NEG
18747: PUSH
18748: LD_INT 1
18750: NEG
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
18765: LD_ADDR_VAR 0 60
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: LD_INT 0
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 1
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: LD_INT 1
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 1
18834: NEG
18835: PUSH
18836: LD_INT 1
18838: NEG
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
18853: LD_ADDR_VAR 0 61
18857: PUSH
18858: LD_INT 0
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 1
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: LD_INT 0
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 1
18922: NEG
18923: PUSH
18924: LD_INT 1
18926: NEG
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
18941: LD_ADDR_VAR 0 62
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 1
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 0
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 0
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 1
18999: NEG
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: NEG
19011: PUSH
19012: LD_INT 1
19014: NEG
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19029: LD_ADDR_VAR 0 63
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 0
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 1
19057: PUSH
19058: LD_INT 0
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 1
19067: PUSH
19068: LD_INT 1
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 1
19087: NEG
19088: PUSH
19089: LD_INT 0
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 1
19098: NEG
19099: PUSH
19100: LD_INT 1
19102: NEG
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
19117: LD_ADDR_VAR 0 64
19121: PUSH
19122: LD_INT 0
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 1
19137: NEG
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 1
19175: NEG
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 1
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: ST_TO_ADDR
// end ; 1 :
19205: GO 25102
19207: LD_INT 1
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 21838
19215: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19216: LD_ADDR_VAR 0 11
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: LD_INT 3
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 0
19235: PUSH
19236: LD_INT 3
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 2
19249: NEG
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: LIST
19259: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19260: LD_ADDR_VAR 0 12
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 1
19270: NEG
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 3
19278: PUSH
19279: LD_INT 0
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 3
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19301: LD_ADDR_VAR 0 13
19305: PUSH
19306: LD_INT 3
19308: PUSH
19309: LD_INT 2
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 3
19318: PUSH
19319: LD_INT 3
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19341: LD_ADDR_VAR 0 14
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: NEG
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: LIST
19381: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19382: LD_ADDR_VAR 0 15
19386: PUSH
19387: LD_INT 2
19389: NEG
19390: PUSH
19391: LD_INT 1
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 3
19400: NEG
19401: PUSH
19402: LD_INT 0
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: LD_INT 3
19411: NEG
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19426: LD_ADDR_VAR 0 16
19430: PUSH
19431: LD_INT 2
19433: NEG
19434: PUSH
19435: LD_INT 3
19437: NEG
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 3
19445: NEG
19446: PUSH
19447: LD_INT 2
19449: NEG
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 3
19457: NEG
19458: PUSH
19459: LD_INT 3
19461: NEG
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19472: LD_ADDR_VAR 0 17
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 3
19483: NEG
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 0
19491: PUSH
19492: LD_INT 3
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 2
19505: NEG
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: LIST
19515: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19516: LD_ADDR_VAR 0 18
19520: PUSH
19521: LD_INT 2
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 3
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 3
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19557: LD_ADDR_VAR 0 19
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: LD_INT 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: LD_INT 3
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 2
19584: PUSH
19585: LD_INT 3
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
19597: LD_ADDR_VAR 0 20
19601: PUSH
19602: LD_INT 1
19604: PUSH
19605: LD_INT 3
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: LD_INT 0
19614: PUSH
19615: LD_INT 3
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: LD_INT 2
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
19638: LD_ADDR_VAR 0 21
19642: PUSH
19643: LD_INT 2
19645: NEG
19646: PUSH
19647: LD_INT 1
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: NEG
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 3
19667: NEG
19668: PUSH
19669: LD_INT 1
19671: NEG
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: LIST
19681: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19682: LD_ADDR_VAR 0 22
19686: PUSH
19687: LD_INT 2
19689: NEG
19690: PUSH
19691: LD_INT 3
19693: NEG
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 3
19701: NEG
19702: PUSH
19703: LD_INT 2
19705: NEG
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 3
19713: NEG
19714: PUSH
19715: LD_INT 3
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
19728: LD_ADDR_VAR 0 23
19732: PUSH
19733: LD_INT 0
19735: PUSH
19736: LD_INT 3
19738: NEG
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 1
19746: NEG
19747: PUSH
19748: LD_INT 4
19750: NEG
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: LD_INT 3
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
19772: LD_ADDR_VAR 0 24
19776: PUSH
19777: LD_INT 3
19779: PUSH
19780: LD_INT 0
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: LD_INT 1
19792: NEG
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 4
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
19813: LD_ADDR_VAR 0 25
19817: PUSH
19818: LD_INT 3
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 4
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 3
19840: PUSH
19841: LD_INT 4
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
19853: LD_ADDR_VAR 0 26
19857: PUSH
19858: LD_INT 0
19860: PUSH
19861: LD_INT 3
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 4
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: NEG
19881: PUSH
19882: LD_INT 3
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: LIST
19893: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
19894: LD_ADDR_VAR 0 27
19898: PUSH
19899: LD_INT 3
19901: NEG
19902: PUSH
19903: LD_INT 0
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: NEG
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 4
19923: NEG
19924: PUSH
19925: LD_INT 1
19927: NEG
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: LIST
19937: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
19938: LD_ADDR_VAR 0 28
19942: PUSH
19943: LD_INT 3
19945: NEG
19946: PUSH
19947: LD_INT 3
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: NEG
19958: PUSH
19959: LD_INT 4
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 4
19969: NEG
19970: PUSH
19971: LD_INT 3
19973: NEG
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: LIST
19983: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
19984: LD_ADDR_VAR 0 29
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: LD_INT 3
19995: NEG
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 0
20003: PUSH
20004: LD_INT 3
20006: NEG
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: LD_INT 2
20017: NEG
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 1
20025: NEG
20026: PUSH
20027: LD_INT 4
20029: NEG
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 4
20040: NEG
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: LD_INT 3
20051: NEG
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 1
20059: NEG
20060: PUSH
20061: LD_INT 5
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 0
20071: PUSH
20072: LD_INT 5
20074: NEG
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: LD_INT 4
20085: NEG
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 1
20093: NEG
20094: PUSH
20095: LD_INT 6
20097: NEG
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 0
20105: PUSH
20106: LD_INT 6
20108: NEG
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: LD_INT 5
20119: NEG
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
20139: LD_ADDR_VAR 0 30
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: LD_INT 1
20149: NEG
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 3
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 3
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 3
20177: PUSH
20178: LD_INT 1
20180: NEG
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: LD_INT 4
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 4
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 4
20208: PUSH
20209: LD_INT 1
20211: NEG
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 5
20219: PUSH
20220: LD_INT 0
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 5
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 5
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: LD_INT 6
20250: PUSH
20251: LD_INT 0
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 6
20260: PUSH
20261: LD_INT 1
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
20282: LD_ADDR_VAR 0 31
20286: PUSH
20287: LD_INT 3
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 3
20299: PUSH
20300: LD_INT 3
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 2
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 4
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 4
20329: PUSH
20330: LD_INT 4
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 3
20339: PUSH
20340: LD_INT 4
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 5
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 5
20359: PUSH
20360: LD_INT 5
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 4
20369: PUSH
20370: LD_INT 5
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 6
20379: PUSH
20380: LD_INT 5
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 6
20389: PUSH
20390: LD_INT 6
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: LD_INT 5
20399: PUSH
20400: LD_INT 6
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
20421: LD_ADDR_VAR 0 32
20425: PUSH
20426: LD_INT 1
20428: PUSH
20429: LD_INT 3
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 3
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: LD_INT 1
20448: NEG
20449: PUSH
20450: LD_INT 2
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 1
20459: PUSH
20460: LD_INT 4
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: LD_INT 0
20469: PUSH
20470: LD_INT 4
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 1
20479: NEG
20480: PUSH
20481: LD_INT 3
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 1
20490: PUSH
20491: LD_INT 5
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: LD_INT 5
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: LD_INT 4
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: PUSH
20522: LD_INT 6
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 0
20531: PUSH
20532: LD_INT 6
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 1
20541: NEG
20542: PUSH
20543: LD_INT 5
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
20564: LD_ADDR_VAR 0 33
20568: PUSH
20569: LD_INT 2
20571: NEG
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: NEG
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 3
20593: NEG
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 3
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 4
20616: NEG
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 4
20627: NEG
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 4
20639: NEG
20640: PUSH
20641: LD_INT 1
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 5
20650: NEG
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 5
20661: NEG
20662: PUSH
20663: LD_INT 1
20665: NEG
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 5
20673: NEG
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 6
20684: NEG
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 6
20695: NEG
20696: PUSH
20697: LD_INT 1
20699: NEG
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
20719: LD_ADDR_VAR 0 34
20723: PUSH
20724: LD_INT 2
20726: NEG
20727: PUSH
20728: LD_INT 3
20730: NEG
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 3
20738: NEG
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: NEG
20751: PUSH
20752: LD_INT 3
20754: NEG
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: PUSH
20760: LD_INT 3
20762: NEG
20763: PUSH
20764: LD_INT 4
20766: NEG
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 4
20774: NEG
20775: PUSH
20776: LD_INT 3
20778: NEG
20779: PUSH
20780: EMPTY
20781: LIST
20782: LIST
20783: PUSH
20784: LD_INT 4
20786: NEG
20787: PUSH
20788: LD_INT 4
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 4
20798: NEG
20799: PUSH
20800: LD_INT 5
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 5
20810: NEG
20811: PUSH
20812: LD_INT 4
20814: NEG
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 5
20822: NEG
20823: PUSH
20824: LD_INT 5
20826: NEG
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 5
20834: NEG
20835: PUSH
20836: LD_INT 6
20838: NEG
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 6
20846: NEG
20847: PUSH
20848: LD_INT 5
20850: NEG
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 6
20858: NEG
20859: PUSH
20860: LD_INT 6
20862: NEG
20863: PUSH
20864: EMPTY
20865: LIST
20866: LIST
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
20882: LD_ADDR_VAR 0 41
20886: PUSH
20887: LD_INT 0
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 3
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
20926: LD_ADDR_VAR 0 42
20930: PUSH
20931: LD_INT 2
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 3
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: LIST
20966: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
20967: LD_ADDR_VAR 0 43
20971: PUSH
20972: LD_INT 2
20974: PUSH
20975: LD_INT 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 3
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 3
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
21007: LD_ADDR_VAR 0 44
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 2
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: LD_INT 3
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21048: LD_ADDR_VAR 0 45
21052: PUSH
21053: LD_INT 2
21055: NEG
21056: PUSH
21057: LD_INT 0
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 3
21077: NEG
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
21092: LD_ADDR_VAR 0 46
21096: PUSH
21097: LD_INT 2
21099: NEG
21100: PUSH
21101: LD_INT 2
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: NEG
21112: PUSH
21113: LD_INT 3
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 3
21123: NEG
21124: PUSH
21125: LD_INT 2
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
21138: LD_ADDR_VAR 0 47
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 3
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: LD_INT 3
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21171: LD_ADDR_VAR 0 48
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: LD_INT 2
21181: NEG
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 1
21192: NEG
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
21202: LD_ADDR_VAR 0 49
21206: PUSH
21207: LD_INT 3
21209: PUSH
21210: LD_INT 1
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 3
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
21231: LD_ADDR_VAR 0 50
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 1
21248: PUSH
21249: LD_INT 3
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21260: LD_ADDR_VAR 0 51
21264: PUSH
21265: LD_INT 1
21267: NEG
21268: PUSH
21269: LD_INT 2
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: LD_INT 1
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21291: LD_ADDR_VAR 0 52
21295: PUSH
21296: LD_INT 3
21298: NEG
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: NEG
21311: PUSH
21312: LD_INT 2
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21324: LD_ADDR_VAR 0 53
21328: PUSH
21329: LD_INT 1
21331: NEG
21332: PUSH
21333: LD_INT 3
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 0
21343: PUSH
21344: LD_INT 3
21346: NEG
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: PUSH
21355: LD_INT 2
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21368: LD_ADDR_VAR 0 54
21372: PUSH
21373: LD_INT 2
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: LD_INT 3
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PUSH
21394: LD_INT 3
21396: PUSH
21397: LD_INT 1
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: LIST
21408: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21409: LD_ADDR_VAR 0 55
21413: PUSH
21414: LD_INT 3
21416: PUSH
21417: LD_INT 2
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 3
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21449: LD_ADDR_VAR 0 56
21453: PUSH
21454: LD_INT 1
21456: PUSH
21457: LD_INT 3
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21490: LD_ADDR_VAR 0 57
21494: PUSH
21495: LD_INT 2
21497: NEG
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 3
21508: NEG
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 3
21519: NEG
21520: PUSH
21521: LD_INT 1
21523: NEG
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: LIST
21533: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21534: LD_ADDR_VAR 0 58
21538: PUSH
21539: LD_INT 2
21541: NEG
21542: PUSH
21543: LD_INT 3
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 3
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 3
21565: NEG
21566: PUSH
21567: LD_INT 3
21569: NEG
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: LIST
21579: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
21580: LD_ADDR_VAR 0 59
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: LD_INT 2
21591: NEG
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 0
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
21624: LD_ADDR_VAR 0 60
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 1
21634: NEG
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 2
21642: PUSH
21643: LD_INT 0
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 2
21652: PUSH
21653: LD_INT 1
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
21665: LD_ADDR_VAR 0 61
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: LD_INT 1
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 2
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
21705: LD_ADDR_VAR 0 62
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 0
21722: PUSH
21723: LD_INT 2
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
21746: LD_ADDR_VAR 0 63
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: NEG
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21790: LD_ADDR_VAR 0 64
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 2
21801: NEG
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 2
21809: NEG
21810: PUSH
21811: LD_INT 1
21813: NEG
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: LD_INT 2
21821: NEG
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: ST_TO_ADDR
// end ; 2 :
21836: GO 25102
21838: LD_INT 2
21840: DOUBLE
21841: EQUAL
21842: IFTRUE 21846
21844: GO 25101
21846: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
21847: LD_ADDR_VAR 0 29
21851: PUSH
21852: LD_INT 4
21854: PUSH
21855: LD_INT 0
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 4
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 5
21875: PUSH
21876: LD_INT 0
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 5
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: EMPTY
21890: LIST
21891: LIST
21892: PUSH
21893: LD_INT 4
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: EMPTY
21900: LIST
21901: LIST
21902: PUSH
21903: LD_INT 3
21905: PUSH
21906: LD_INT 0
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: PUSH
21913: LD_INT 3
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 3
21926: PUSH
21927: LD_INT 2
21929: NEG
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 5
21937: PUSH
21938: LD_INT 2
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 3
21947: PUSH
21948: LD_INT 3
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 3
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 4
21967: PUSH
21968: LD_INT 3
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PUSH
21975: LD_INT 4
21977: PUSH
21978: LD_INT 4
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 3
21987: PUSH
21988: LD_INT 4
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: LD_INT 3
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: PUSH
22008: LD_INT 2
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 4
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 4
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 4
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 0
22047: PUSH
22048: LD_INT 3
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: LD_INT 4
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: PUSH
22068: LD_INT 5
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 5
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 4
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PUSH
22100: LD_INT 3
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: LD_INT 5
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: LD_INT 3
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 3
22130: NEG
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 3
22141: NEG
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 2
22153: NEG
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 2
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 3
22175: NEG
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 4
22186: NEG
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 4
22197: NEG
22198: PUSH
22199: LD_INT 1
22201: NEG
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 4
22209: NEG
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: PUSH
22219: LD_INT 2
22221: NEG
22222: PUSH
22223: LD_INT 2
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 4
22232: NEG
22233: PUSH
22234: LD_INT 4
22236: NEG
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 4
22244: NEG
22245: PUSH
22246: LD_INT 5
22248: NEG
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 3
22256: NEG
22257: PUSH
22258: LD_INT 4
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 3
22268: NEG
22269: PUSH
22270: LD_INT 3
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 4
22280: NEG
22281: PUSH
22282: LD_INT 3
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 5
22292: NEG
22293: PUSH
22294: LD_INT 4
22296: NEG
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 5
22304: NEG
22305: PUSH
22306: LD_INT 5
22308: NEG
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 3
22316: NEG
22317: PUSH
22318: LD_INT 5
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 5
22328: NEG
22329: PUSH
22330: LD_INT 3
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
22385: LD_ADDR_VAR 0 30
22389: PUSH
22390: LD_INT 4
22392: PUSH
22393: LD_INT 4
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 4
22402: PUSH
22403: LD_INT 3
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 5
22412: PUSH
22413: LD_INT 4
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 5
22422: PUSH
22423: LD_INT 5
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 4
22432: PUSH
22433: LD_INT 5
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 3
22442: PUSH
22443: LD_INT 4
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 3
22452: PUSH
22453: LD_INT 3
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 5
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 3
22472: PUSH
22473: LD_INT 5
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: LD_INT 3
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 1
22502: PUSH
22503: LD_INT 3
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: LD_INT 4
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 0
22522: PUSH
22523: LD_INT 4
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: NEG
22533: PUSH
22534: LD_INT 3
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: LD_INT 4
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: NEG
22565: PUSH
22566: LD_INT 2
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 4
22575: NEG
22576: PUSH
22577: LD_INT 0
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 4
22586: NEG
22587: PUSH
22588: LD_INT 1
22590: NEG
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 3
22598: NEG
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 3
22609: NEG
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 4
22620: NEG
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 5
22631: NEG
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 5
22642: NEG
22643: PUSH
22644: LD_INT 1
22646: NEG
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 5
22654: NEG
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 3
22666: NEG
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 3
22677: NEG
22678: PUSH
22679: LD_INT 3
22681: NEG
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PUSH
22687: LD_INT 3
22689: NEG
22690: PUSH
22691: LD_INT 4
22693: NEG
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 2
22701: NEG
22702: PUSH
22703: LD_INT 3
22705: NEG
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 2
22713: NEG
22714: PUSH
22715: LD_INT 2
22717: NEG
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 3
22725: NEG
22726: PUSH
22727: LD_INT 2
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 4
22737: NEG
22738: PUSH
22739: LD_INT 3
22741: NEG
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 4
22749: NEG
22750: PUSH
22751: LD_INT 4
22753: NEG
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 2
22761: NEG
22762: PUSH
22763: LD_INT 4
22765: NEG
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 4
22773: NEG
22774: PUSH
22775: LD_INT 2
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 4
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: LD_INT 5
22799: NEG
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: LD_INT 4
22810: NEG
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: PUSH
22819: LD_INT 3
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 0
22829: PUSH
22830: LD_INT 3
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: LD_INT 4
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 1
22852: NEG
22853: PUSH
22854: LD_INT 5
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: PUSH
22865: LD_INT 3
22867: NEG
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 2
22875: NEG
22876: PUSH
22877: LD_INT 5
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
22932: LD_ADDR_VAR 0 31
22936: PUSH
22937: LD_INT 0
22939: PUSH
22940: LD_INT 4
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 0
22949: PUSH
22950: LD_INT 3
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 4
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 5
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 5
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 4
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 2
23011: PUSH
23012: LD_INT 5
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 2
23021: NEG
23022: PUSH
23023: LD_INT 3
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 3
23032: NEG
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: NEG
23044: PUSH
23045: LD_INT 1
23047: NEG
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: LD_INT 0
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 3
23077: NEG
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 4
23088: NEG
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 4
23099: NEG
23100: PUSH
23101: LD_INT 1
23103: NEG
23104: PUSH
23105: EMPTY
23106: LIST
23107: LIST
23108: PUSH
23109: LD_INT 4
23111: NEG
23112: PUSH
23113: LD_INT 2
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 2
23123: NEG
23124: PUSH
23125: LD_INT 2
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: LD_INT 4
23134: NEG
23135: PUSH
23136: LD_INT 4
23138: NEG
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 4
23146: NEG
23147: PUSH
23148: LD_INT 5
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 3
23158: NEG
23159: PUSH
23160: LD_INT 4
23162: NEG
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: NEG
23171: PUSH
23172: LD_INT 3
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 4
23182: NEG
23183: PUSH
23184: LD_INT 3
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 5
23194: NEG
23195: PUSH
23196: LD_INT 4
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 5
23206: NEG
23207: PUSH
23208: LD_INT 5
23210: NEG
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 3
23218: NEG
23219: PUSH
23220: LD_INT 5
23222: NEG
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 5
23230: NEG
23231: PUSH
23232: LD_INT 3
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: LD_INT 3
23245: NEG
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 0
23253: PUSH
23254: LD_INT 4
23256: NEG
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: LD_INT 3
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 0
23286: PUSH
23287: LD_INT 2
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 1
23297: NEG
23298: PUSH
23299: LD_INT 3
23301: NEG
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: NEG
23310: PUSH
23311: LD_INT 4
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: LD_INT 2
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: LD_INT 4
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 4
23344: PUSH
23345: LD_INT 0
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 4
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 5
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 5
23375: PUSH
23376: LD_INT 1
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 4
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 3
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 3
23405: PUSH
23406: LD_INT 1
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 3
23416: PUSH
23417: LD_INT 2
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 5
23427: PUSH
23428: LD_INT 2
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
23482: LD_ADDR_VAR 0 32
23486: PUSH
23487: LD_INT 4
23489: NEG
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: LD_INT 4
23500: NEG
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 3
23512: NEG
23513: PUSH
23514: LD_INT 0
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 3
23523: NEG
23524: PUSH
23525: LD_INT 1
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 4
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 5
23545: NEG
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 5
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 5
23568: NEG
23569: PUSH
23570: LD_INT 2
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 3
23580: NEG
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 3
23591: NEG
23592: PUSH
23593: LD_INT 3
23595: NEG
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 3
23603: NEG
23604: PUSH
23605: LD_INT 4
23607: NEG
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: LD_INT 3
23619: NEG
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: LD_INT 2
23631: NEG
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 4
23651: NEG
23652: PUSH
23653: LD_INT 3
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 4
23663: NEG
23664: PUSH
23665: LD_INT 4
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: NEG
23676: PUSH
23677: LD_INT 4
23679: NEG
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 4
23687: NEG
23688: PUSH
23689: LD_INT 2
23691: NEG
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: LD_INT 4
23702: NEG
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: LD_INT 5
23713: NEG
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: LD_INT 4
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 1
23732: PUSH
23733: LD_INT 3
23735: NEG
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 0
23743: PUSH
23744: LD_INT 3
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 4
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: LD_INT 5
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: PUSH
23779: LD_INT 3
23781: NEG
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 2
23789: NEG
23790: PUSH
23791: LD_INT 5
23793: NEG
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 3
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 3
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 4
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 3
23842: PUSH
23843: LD_INT 1
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: LD_INT 0
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 2
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 4
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 4
23894: PUSH
23895: LD_INT 4
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 4
23904: PUSH
23905: LD_INT 3
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 5
23914: PUSH
23915: LD_INT 4
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: LD_INT 5
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: LD_INT 4
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 5
23964: PUSH
23965: LD_INT 3
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 3
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
24029: LD_ADDR_VAR 0 33
24033: PUSH
24034: LD_INT 4
24036: NEG
24037: PUSH
24038: LD_INT 4
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 4
24048: NEG
24049: PUSH
24050: LD_INT 5
24052: NEG
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 3
24060: NEG
24061: PUSH
24062: LD_INT 4
24064: NEG
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 3
24072: NEG
24073: PUSH
24074: LD_INT 3
24076: NEG
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 4
24084: NEG
24085: PUSH
24086: LD_INT 3
24088: NEG
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 5
24096: NEG
24097: PUSH
24098: LD_INT 4
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 5
24108: NEG
24109: PUSH
24110: LD_INT 5
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 3
24120: NEG
24121: PUSH
24122: LD_INT 5
24124: NEG
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 5
24132: NEG
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 0
24144: PUSH
24145: LD_INT 3
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 0
24155: PUSH
24156: LD_INT 4
24158: NEG
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: LD_INT 3
24169: NEG
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: PUSH
24178: LD_INT 2
24180: NEG
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 0
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: LD_INT 3
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 4
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: LD_INT 2
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 2
24234: NEG
24235: PUSH
24236: LD_INT 4
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 4
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 4
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 5
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 5
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 4
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 3
24297: PUSH
24298: LD_INT 0
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 3
24318: PUSH
24319: LD_INT 2
24321: NEG
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 5
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 3
24339: PUSH
24340: LD_INT 3
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 3
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 4
24359: PUSH
24360: LD_INT 3
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 4
24369: PUSH
24370: LD_INT 4
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 3
24379: PUSH
24380: LD_INT 4
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: LD_INT 3
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 2
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 4
24409: PUSH
24410: LD_INT 2
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 4
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 0
24429: PUSH
24430: LD_INT 4
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: PUSH
24450: LD_INT 4
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 5
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: LD_INT 5
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: LD_INT 4
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 2
24501: PUSH
24502: LD_INT 5
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 2
24511: NEG
24512: PUSH
24513: LD_INT 3
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: LIST
24534: LIST
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
24567: LD_ADDR_VAR 0 34
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: LD_INT 4
24577: NEG
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 5
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 4
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: LD_INT 3
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: LD_INT 4
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: LD_INT 5
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 3
24656: NEG
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: LD_INT 5
24668: NEG
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 3
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 4
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 4
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: LD_INT 1
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: LD_INT 2
24737: PUSH
24738: LD_INT 1
24740: NEG
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 4
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 4
24769: PUSH
24770: LD_INT 4
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 4
24779: PUSH
24780: LD_INT 3
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 5
24789: PUSH
24790: LD_INT 4
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 5
24799: PUSH
24800: LD_INT 5
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 4
24809: PUSH
24810: LD_INT 5
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 3
24819: PUSH
24820: LD_INT 4
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 5
24839: PUSH
24840: LD_INT 3
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 3
24849: PUSH
24850: LD_INT 5
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: LD_INT 4
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 4
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 2
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 4
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 2
24941: NEG
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 4
24952: NEG
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 4
24963: NEG
24964: PUSH
24965: LD_INT 1
24967: NEG
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 3
24975: NEG
24976: PUSH
24977: LD_INT 0
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 3
24986: NEG
24987: PUSH
24988: LD_INT 1
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 4
24997: NEG
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 5
25008: NEG
25009: PUSH
25010: LD_INT 0
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 5
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 5
25031: NEG
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 3
25043: NEG
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: ST_TO_ADDR
// end ; end ;
25099: GO 25102
25101: POP
// case btype of b_depot , b_warehouse :
25102: LD_VAR 0 1
25106: PUSH
25107: LD_INT 0
25109: DOUBLE
25110: EQUAL
25111: IFTRUE 25121
25113: LD_INT 1
25115: DOUBLE
25116: EQUAL
25117: IFTRUE 25121
25119: GO 25322
25121: POP
// case nation of nation_american :
25122: LD_VAR 0 5
25126: PUSH
25127: LD_INT 1
25129: DOUBLE
25130: EQUAL
25131: IFTRUE 25135
25133: GO 25191
25135: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
25136: LD_ADDR_VAR 0 9
25140: PUSH
25141: LD_VAR 0 11
25145: PUSH
25146: LD_VAR 0 12
25150: PUSH
25151: LD_VAR 0 13
25155: PUSH
25156: LD_VAR 0 14
25160: PUSH
25161: LD_VAR 0 15
25165: PUSH
25166: LD_VAR 0 16
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: PUSH
25179: LD_VAR 0 4
25183: PUSH
25184: LD_INT 1
25186: PLUS
25187: ARRAY
25188: ST_TO_ADDR
25189: GO 25320
25191: LD_INT 2
25193: DOUBLE
25194: EQUAL
25195: IFTRUE 25199
25197: GO 25255
25199: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
25200: LD_ADDR_VAR 0 9
25204: PUSH
25205: LD_VAR 0 17
25209: PUSH
25210: LD_VAR 0 18
25214: PUSH
25215: LD_VAR 0 19
25219: PUSH
25220: LD_VAR 0 20
25224: PUSH
25225: LD_VAR 0 21
25229: PUSH
25230: LD_VAR 0 22
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: PUSH
25243: LD_VAR 0 4
25247: PUSH
25248: LD_INT 1
25250: PLUS
25251: ARRAY
25252: ST_TO_ADDR
25253: GO 25320
25255: LD_INT 3
25257: DOUBLE
25258: EQUAL
25259: IFTRUE 25263
25261: GO 25319
25263: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
25264: LD_ADDR_VAR 0 9
25268: PUSH
25269: LD_VAR 0 23
25273: PUSH
25274: LD_VAR 0 24
25278: PUSH
25279: LD_VAR 0 25
25283: PUSH
25284: LD_VAR 0 26
25288: PUSH
25289: LD_VAR 0 27
25293: PUSH
25294: LD_VAR 0 28
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: PUSH
25307: LD_VAR 0 4
25311: PUSH
25312: LD_INT 1
25314: PLUS
25315: ARRAY
25316: ST_TO_ADDR
25317: GO 25320
25319: POP
25320: GO 25869
25322: LD_INT 2
25324: DOUBLE
25325: EQUAL
25326: IFTRUE 25336
25328: LD_INT 3
25330: DOUBLE
25331: EQUAL
25332: IFTRUE 25336
25334: GO 25392
25336: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
25337: LD_ADDR_VAR 0 9
25341: PUSH
25342: LD_VAR 0 29
25346: PUSH
25347: LD_VAR 0 30
25351: PUSH
25352: LD_VAR 0 31
25356: PUSH
25357: LD_VAR 0 32
25361: PUSH
25362: LD_VAR 0 33
25366: PUSH
25367: LD_VAR 0 34
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: PUSH
25380: LD_VAR 0 4
25384: PUSH
25385: LD_INT 1
25387: PLUS
25388: ARRAY
25389: ST_TO_ADDR
25390: GO 25869
25392: LD_INT 16
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25448
25398: LD_INT 17
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25448
25404: LD_INT 18
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25448
25410: LD_INT 19
25412: DOUBLE
25413: EQUAL
25414: IFTRUE 25448
25416: LD_INT 20
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25448
25422: LD_INT 21
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25448
25428: LD_INT 23
25430: DOUBLE
25431: EQUAL
25432: IFTRUE 25448
25434: LD_INT 24
25436: DOUBLE
25437: EQUAL
25438: IFTRUE 25448
25440: LD_INT 25
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25504
25448: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
25449: LD_ADDR_VAR 0 9
25453: PUSH
25454: LD_VAR 0 35
25458: PUSH
25459: LD_VAR 0 36
25463: PUSH
25464: LD_VAR 0 37
25468: PUSH
25469: LD_VAR 0 38
25473: PUSH
25474: LD_VAR 0 39
25478: PUSH
25479: LD_VAR 0 40
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: PUSH
25492: LD_VAR 0 4
25496: PUSH
25497: LD_INT 1
25499: PLUS
25500: ARRAY
25501: ST_TO_ADDR
25502: GO 25869
25504: LD_INT 6
25506: DOUBLE
25507: EQUAL
25508: IFTRUE 25560
25510: LD_INT 7
25512: DOUBLE
25513: EQUAL
25514: IFTRUE 25560
25516: LD_INT 8
25518: DOUBLE
25519: EQUAL
25520: IFTRUE 25560
25522: LD_INT 13
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25560
25528: LD_INT 12
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25560
25534: LD_INT 15
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25560
25540: LD_INT 11
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25560
25546: LD_INT 14
25548: DOUBLE
25549: EQUAL
25550: IFTRUE 25560
25552: LD_INT 10
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25560
25558: GO 25616
25560: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
25561: LD_ADDR_VAR 0 9
25565: PUSH
25566: LD_VAR 0 41
25570: PUSH
25571: LD_VAR 0 42
25575: PUSH
25576: LD_VAR 0 43
25580: PUSH
25581: LD_VAR 0 44
25585: PUSH
25586: LD_VAR 0 45
25590: PUSH
25591: LD_VAR 0 46
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: PUSH
25604: LD_VAR 0 4
25608: PUSH
25609: LD_INT 1
25611: PLUS
25612: ARRAY
25613: ST_TO_ADDR
25614: GO 25869
25616: LD_INT 36
25618: DOUBLE
25619: EQUAL
25620: IFTRUE 25624
25622: GO 25680
25624: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
25625: LD_ADDR_VAR 0 9
25629: PUSH
25630: LD_VAR 0 47
25634: PUSH
25635: LD_VAR 0 48
25639: PUSH
25640: LD_VAR 0 49
25644: PUSH
25645: LD_VAR 0 50
25649: PUSH
25650: LD_VAR 0 51
25654: PUSH
25655: LD_VAR 0 52
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: PUSH
25668: LD_VAR 0 4
25672: PUSH
25673: LD_INT 1
25675: PLUS
25676: ARRAY
25677: ST_TO_ADDR
25678: GO 25869
25680: LD_INT 4
25682: DOUBLE
25683: EQUAL
25684: IFTRUE 25706
25686: LD_INT 5
25688: DOUBLE
25689: EQUAL
25690: IFTRUE 25706
25692: LD_INT 34
25694: DOUBLE
25695: EQUAL
25696: IFTRUE 25706
25698: LD_INT 37
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25706
25704: GO 25762
25706: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
25707: LD_ADDR_VAR 0 9
25711: PUSH
25712: LD_VAR 0 53
25716: PUSH
25717: LD_VAR 0 54
25721: PUSH
25722: LD_VAR 0 55
25726: PUSH
25727: LD_VAR 0 56
25731: PUSH
25732: LD_VAR 0 57
25736: PUSH
25737: LD_VAR 0 58
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: PUSH
25750: LD_VAR 0 4
25754: PUSH
25755: LD_INT 1
25757: PLUS
25758: ARRAY
25759: ST_TO_ADDR
25760: GO 25869
25762: LD_INT 31
25764: DOUBLE
25765: EQUAL
25766: IFTRUE 25812
25768: LD_INT 32
25770: DOUBLE
25771: EQUAL
25772: IFTRUE 25812
25774: LD_INT 33
25776: DOUBLE
25777: EQUAL
25778: IFTRUE 25812
25780: LD_INT 27
25782: DOUBLE
25783: EQUAL
25784: IFTRUE 25812
25786: LD_INT 26
25788: DOUBLE
25789: EQUAL
25790: IFTRUE 25812
25792: LD_INT 28
25794: DOUBLE
25795: EQUAL
25796: IFTRUE 25812
25798: LD_INT 29
25800: DOUBLE
25801: EQUAL
25802: IFTRUE 25812
25804: LD_INT 30
25806: DOUBLE
25807: EQUAL
25808: IFTRUE 25812
25810: GO 25868
25812: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
25813: LD_ADDR_VAR 0 9
25817: PUSH
25818: LD_VAR 0 59
25822: PUSH
25823: LD_VAR 0 60
25827: PUSH
25828: LD_VAR 0 61
25832: PUSH
25833: LD_VAR 0 62
25837: PUSH
25838: LD_VAR 0 63
25842: PUSH
25843: LD_VAR 0 64
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: PUSH
25856: LD_VAR 0 4
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: ARRAY
25865: ST_TO_ADDR
25866: GO 25869
25868: POP
// temp_list2 = [ ] ;
25869: LD_ADDR_VAR 0 10
25873: PUSH
25874: EMPTY
25875: ST_TO_ADDR
// for i in temp_list do
25876: LD_ADDR_VAR 0 8
25880: PUSH
25881: LD_VAR 0 9
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25939
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
25889: LD_ADDR_VAR 0 10
25893: PUSH
25894: LD_VAR 0 10
25898: PUSH
25899: LD_VAR 0 8
25903: PUSH
25904: LD_INT 1
25906: ARRAY
25907: PUSH
25908: LD_VAR 0 2
25912: PLUS
25913: PUSH
25914: LD_VAR 0 8
25918: PUSH
25919: LD_INT 2
25921: ARRAY
25922: PUSH
25923: LD_VAR 0 3
25927: PLUS
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: ADD
25936: ST_TO_ADDR
25937: GO 25886
25939: POP
25940: POP
// result = temp_list2 ;
25941: LD_ADDR_VAR 0 7
25945: PUSH
25946: LD_VAR 0 10
25950: ST_TO_ADDR
// end ; end_of_file
25951: LD_VAR 0 7
25955: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export function PrepareArabian ; var i , d , un , skill ; begin
25956: LD_INT 0
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
25963: LD_ADDR_VAR 0 5
25967: PUSH
25968: LD_INT 6
25970: PUSH
25971: LD_INT 7
25973: PUSH
25974: LD_INT 8
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: PUSH
25982: LD_OWVAR 67
25986: ARRAY
25987: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
25988: LD_INT 69
25990: PUSH
25991: EMPTY
25992: LIST
25993: PPUSH
25994: LD_INT 141
25996: PPUSH
25997: CALL_OW 169
// Wait ( 1 ) ;
26001: LD_INT 1
26003: PPUSH
26004: CALL_OW 67
// uc_side := 2 ;
26008: LD_ADDR_OWVAR 20
26012: PUSH
26013: LD_INT 2
26015: ST_TO_ADDR
// uc_nation := 2 ;
26016: LD_ADDR_OWVAR 21
26020: PUSH
26021: LD_INT 2
26023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
26024: LD_ADDR_OWVAR 37
26028: PUSH
26029: LD_INT 14
26031: ST_TO_ADDR
// vc_engine := engine_siberite ;
26032: LD_ADDR_OWVAR 39
26036: PUSH
26037: LD_INT 3
26039: ST_TO_ADDR
// vc_control := control_manual ;
26040: LD_ADDR_OWVAR 38
26044: PUSH
26045: LD_INT 1
26047: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
26048: LD_ADDR_OWVAR 40
26052: PUSH
26053: LD_INT 31
26055: ST_TO_ADDR
// for i = 1 to 3 do
26056: LD_ADDR_VAR 0 2
26060: PUSH
26061: DOUBLE
26062: LD_INT 1
26064: DEC
26065: ST_TO_ADDR
26066: LD_INT 3
26068: PUSH
26069: FOR_TO
26070: IFFALSE 26154
// begin PrepareHuman ( false , class_mechanic , skill ) ;
26072: LD_INT 0
26074: PPUSH
26075: LD_INT 3
26077: PPUSH
26078: LD_VAR 0 5
26082: PPUSH
26083: CALL_OW 380
// un := CreateVehicle ;
26087: LD_ADDR_VAR 0 4
26091: PUSH
26092: CALL_OW 45
26096: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26097: LD_VAR 0 4
26101: PPUSH
26102: LD_INT 0
26104: PPUSH
26105: LD_INT 5
26107: PPUSH
26108: CALL_OW 12
26112: PPUSH
26113: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
26117: LD_VAR 0 4
26121: PPUSH
26122: LD_INT 156
26124: PPUSH
26125: LD_INT 15
26127: PPUSH
26128: LD_INT 6
26130: PPUSH
26131: LD_INT 0
26133: PPUSH
26134: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
26138: CALL_OW 44
26142: PPUSH
26143: LD_VAR 0 4
26147: PPUSH
26148: CALL_OW 52
// end ;
26152: GO 26069
26154: POP
26155: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 3000 , 500 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
26156: LD_ADDR_EXP 21
26160: PUSH
26161: LD_INT 94
26163: PPUSH
26164: LD_STRING dammam
26166: PPUSH
26167: LD_VAR 0 5
26171: PPUSH
26172: LD_INT 3000
26174: PUSH
26175: LD_INT 500
26177: PUSH
26178: LD_INT 300
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: LIST
26185: PPUSH
26186: LD_INT 1
26188: NEG
26189: PUSH
26190: LD_INT 1
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: LD_INT 4
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: PPUSH
26207: CALL 3989 0 5
26211: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
26212: LD_ADDR_EXP 21
26216: PUSH
26217: LD_EXP 21
26221: PUSH
26222: LD_INT 122
26224: PPUSH
26225: LD_STRING 
26227: PPUSH
26228: LD_VAR 0 5
26232: PPUSH
26233: LD_INT 100
26235: PUSH
26236: LD_INT 60
26238: PUSH
26239: LD_INT 0
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: LIST
26246: PPUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 4
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: LD_INT 0
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: PPUSH
26266: CALL 3989 0 5
26270: ADD
26271: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 0 , 2 ] ) ;
26272: LD_ADDR_EXP 19
26276: PUSH
26277: LD_INT 45
26279: PPUSH
26280: LD_STRING jeddah
26282: PPUSH
26283: LD_VAR 0 5
26287: PPUSH
26288: LD_INT 700
26290: PUSH
26291: LD_INT 300
26293: PUSH
26294: LD_INT 10
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: PPUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: LD_INT 5
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 2
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: PPUSH
26321: CALL 3989 0 5
26325: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 7 , 3 , 3 , 2 ] ) ;
26326: LD_ADDR_EXP 20
26330: PUSH
26331: LD_INT 7
26333: PPUSH
26334: LD_STRING riyadh
26336: PPUSH
26337: LD_VAR 0 5
26341: PPUSH
26342: LD_INT 500
26344: PUSH
26345: LD_INT 60
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: PPUSH
26356: LD_INT 7
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: LD_INT 3
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL 3989 0 5
26378: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 1 , 2 ] ) ;
26379: LD_ADDR_EXP 22
26383: PUSH
26384: LD_INT 69
26386: PPUSH
26387: LD_STRING 
26389: PPUSH
26390: LD_VAR 0 5
26394: PPUSH
26395: LD_INT 500
26397: PUSH
26398: LD_INT 50
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PPUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: LD_INT 3
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 2
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: PPUSH
26428: CALL 3989 0 5
26432: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
26433: LD_ADDR_EXP 25
26437: PUSH
26438: LD_EXP 21
26442: PUSH
26443: LD_EXP 19
26447: PUSH
26448: LD_EXP 22
26452: PUSH
26453: EMPTY
26454: LIST
26455: LIST
26456: LIST
26457: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
26458: LD_ADDR_VAR 0 2
26462: PUSH
26463: LD_INT 22
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 30
26475: PUSH
26476: LD_INT 31
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 58
26485: PUSH
26486: EMPTY
26487: LIST
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: LIST
26493: PPUSH
26494: CALL_OW 69
26498: PUSH
26499: FOR_IN
26500: IFFALSE 26625
// begin if GetBase ( i ) then
26502: LD_VAR 0 2
26506: PPUSH
26507: CALL_OW 274
26511: IFFALSE 26515
// continue ;
26513: GO 26499
// d := GetDir ( i ) ;
26515: LD_ADDR_VAR 0 3
26519: PUSH
26520: LD_VAR 0 2
26524: PPUSH
26525: CALL_OW 254
26529: ST_TO_ADDR
// if d < 3 then
26530: LD_VAR 0 3
26534: PUSH
26535: LD_INT 3
26537: LESS
26538: IFFALSE 26556
// d := d + 3 else
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_VAR 0 3
26549: PUSH
26550: LD_INT 3
26552: PLUS
26553: ST_TO_ADDR
26554: GO 26570
// d := d - 3 ;
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_VAR 0 3
26565: PUSH
26566: LD_INT 3
26568: MINUS
26569: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
26570: LD_INT 0
26572: PPUSH
26573: LD_INT 8
26575: PPUSH
26576: LD_VAR 0 5
26580: PPUSH
26581: CALL_OW 380
// un := CreateHuman ;
26585: LD_ADDR_VAR 0 4
26589: PUSH
26590: CALL_OW 44
26594: ST_TO_ADDR
// SetDir ( un , d ) ;
26595: LD_VAR 0 4
26599: PPUSH
26600: LD_VAR 0 3
26604: PPUSH
26605: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
26609: LD_VAR 0 4
26613: PPUSH
26614: LD_VAR 0 2
26618: PPUSH
26619: CALL_OW 52
// end ;
26623: GO 26499
26625: POP
26626: POP
// end ; end_of_file
26627: LD_VAR 0 1
26631: RET
// export function Action ; begin
26632: LD_INT 0
26634: PPUSH
// end ; end_of_file
26635: LD_VAR 0 1
26639: RET
// export callback_error ; export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce ; export function InitMacro ; begin
26640: LD_INT 0
26642: PPUSH
// callback_error := false ;
26643: LD_ADDR_EXP 23
26647: PUSH
26648: LD_INT 0
26650: ST_TO_ADDR
// skirmish := false ;
26651: LD_ADDR_EXP 24
26655: PUSH
26656: LD_INT 0
26658: ST_TO_ADDR
// mc_bases := [ ] ;
26659: LD_ADDR_EXP 25
26663: PUSH
26664: EMPTY
26665: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
26666: LD_ADDR_EXP 26
26670: PUSH
26671: EMPTY
26672: ST_TO_ADDR
// mc_building_repairs := [ ] ;
26673: LD_ADDR_EXP 27
26677: PUSH
26678: EMPTY
26679: ST_TO_ADDR
// mc_need_heal := [ ] ;
26680: LD_ADDR_EXP 28
26684: PUSH
26685: EMPTY
26686: ST_TO_ADDR
// mc_healers := [ ] ;
26687: LD_ADDR_EXP 29
26691: PUSH
26692: EMPTY
26693: ST_TO_ADDR
// mc_build_list := [ ] ;
26694: LD_ADDR_EXP 30
26698: PUSH
26699: EMPTY
26700: ST_TO_ADDR
// mc_builders := [ ] ;
26701: LD_ADDR_EXP 31
26705: PUSH
26706: EMPTY
26707: ST_TO_ADDR
// mc_construct_list := [ ] ;
26708: LD_ADDR_EXP 32
26712: PUSH
26713: EMPTY
26714: ST_TO_ADDR
// mc_turret_list := [ ] ;
26715: LD_ADDR_EXP 33
26719: PUSH
26720: EMPTY
26721: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
26722: LD_ADDR_EXP 34
26726: PUSH
26727: EMPTY
26728: ST_TO_ADDR
// mc_miners := [ ] ;
26729: LD_ADDR_EXP 36
26733: PUSH
26734: EMPTY
26735: ST_TO_ADDR
// mc_mines := [ ] ;
26736: LD_ADDR_EXP 35
26740: PUSH
26741: EMPTY
26742: ST_TO_ADDR
// mc_minefields := [ ] ;
26743: LD_ADDR_EXP 37
26747: PUSH
26748: EMPTY
26749: ST_TO_ADDR
// mc_crates := [ ] ;
26750: LD_ADDR_EXP 38
26754: PUSH
26755: EMPTY
26756: ST_TO_ADDR
// mc_crates_collector := [ ] ;
26757: LD_ADDR_EXP 39
26761: PUSH
26762: EMPTY
26763: ST_TO_ADDR
// mc_vehicles := [ ] ;
26764: LD_ADDR_EXP 40
26768: PUSH
26769: EMPTY
26770: ST_TO_ADDR
// mc_attack := [ ] ;
26771: LD_ADDR_EXP 41
26775: PUSH
26776: EMPTY
26777: ST_TO_ADDR
// mc_produce := [ ] ;
26778: LD_ADDR_EXP 42
26782: PUSH
26783: EMPTY
26784: ST_TO_ADDR
// end ;
26785: LD_VAR 0 1
26789: RET
// export function RunMacro ; var i ; begin
26790: LD_INT 0
26792: PPUSH
26793: PPUSH
// for i = 1 to mc_bases do
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: DOUBLE
26800: LD_INT 1
26802: DEC
26803: ST_TO_ADDR
26804: LD_EXP 25
26808: PUSH
26809: FOR_TO
26810: IFFALSE 27230
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
26812: LD_ADDR_EXP 26
26816: PUSH
26817: LD_EXP 26
26821: PPUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: EMPTY
26828: PPUSH
26829: CALL_OW 1
26833: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26834: LD_ADDR_EXP 27
26838: PUSH
26839: LD_EXP 27
26843: PPUSH
26844: LD_VAR 0 2
26848: PPUSH
26849: EMPTY
26850: PPUSH
26851: CALL_OW 1
26855: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
26856: LD_ADDR_EXP 28
26860: PUSH
26861: LD_EXP 28
26865: PPUSH
26866: LD_VAR 0 2
26870: PPUSH
26871: EMPTY
26872: PPUSH
26873: CALL_OW 1
26877: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
26878: LD_ADDR_EXP 29
26882: PUSH
26883: LD_EXP 29
26887: PPUSH
26888: LD_VAR 0 2
26892: PPUSH
26893: EMPTY
26894: PUSH
26895: EMPTY
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PPUSH
26901: CALL_OW 1
26905: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
26906: LD_ADDR_EXP 30
26910: PUSH
26911: LD_EXP 30
26915: PPUSH
26916: LD_VAR 0 2
26920: PPUSH
26921: EMPTY
26922: PPUSH
26923: CALL_OW 1
26927: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
26928: LD_ADDR_EXP 32
26932: PUSH
26933: LD_EXP 32
26937: PPUSH
26938: LD_VAR 0 2
26942: PPUSH
26943: EMPTY
26944: PPUSH
26945: CALL_OW 1
26949: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
26950: LD_ADDR_EXP 33
26954: PUSH
26955: LD_EXP 33
26959: PPUSH
26960: LD_VAR 0 2
26964: PPUSH
26965: EMPTY
26966: PPUSH
26967: CALL_OW 1
26971: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
26972: LD_ADDR_EXP 34
26976: PUSH
26977: LD_EXP 34
26981: PPUSH
26982: LD_VAR 0 2
26986: PPUSH
26987: EMPTY
26988: PPUSH
26989: CALL_OW 1
26993: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
26994: LD_ADDR_EXP 34
26998: PUSH
26999: LD_EXP 34
27003: PPUSH
27004: LD_VAR 0 2
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PPUSH
27016: EMPTY
27017: PPUSH
27018: CALL 1242 0 3
27022: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
27023: LD_ADDR_EXP 34
27027: PUSH
27028: LD_EXP 34
27032: PPUSH
27033: LD_VAR 0 2
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PPUSH
27045: EMPTY
27046: PPUSH
27047: CALL 1242 0 3
27051: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
27052: LD_ADDR_EXP 36
27056: PUSH
27057: LD_EXP 36
27061: PPUSH
27062: LD_VAR 0 2
27066: PPUSH
27067: EMPTY
27068: PPUSH
27069: CALL_OW 1
27073: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
27074: LD_ADDR_EXP 35
27078: PUSH
27079: LD_EXP 35
27083: PPUSH
27084: LD_VAR 0 2
27088: PPUSH
27089: EMPTY
27090: PPUSH
27091: CALL_OW 1
27095: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
27096: LD_ADDR_EXP 37
27100: PUSH
27101: LD_EXP 37
27105: PPUSH
27106: LD_VAR 0 2
27110: PPUSH
27111: EMPTY
27112: PPUSH
27113: CALL_OW 1
27117: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
27118: LD_ADDR_EXP 38
27122: PUSH
27123: LD_EXP 38
27127: PPUSH
27128: LD_VAR 0 2
27132: PPUSH
27133: EMPTY
27134: PPUSH
27135: CALL_OW 1
27139: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
27140: LD_ADDR_EXP 39
27144: PUSH
27145: LD_EXP 39
27149: PPUSH
27150: LD_VAR 0 2
27154: PPUSH
27155: EMPTY
27156: PPUSH
27157: CALL_OW 1
27161: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
27162: LD_ADDR_EXP 40
27166: PUSH
27167: LD_EXP 40
27171: PPUSH
27172: LD_VAR 0 2
27176: PPUSH
27177: EMPTY
27178: PPUSH
27179: CALL_OW 1
27183: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
27184: LD_ADDR_EXP 41
27188: PUSH
27189: LD_EXP 41
27193: PPUSH
27194: LD_VAR 0 2
27198: PPUSH
27199: EMPTY
27200: PPUSH
27201: CALL_OW 1
27205: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
27206: LD_ADDR_EXP 42
27210: PUSH
27211: LD_EXP 42
27215: PPUSH
27216: LD_VAR 0 2
27220: PPUSH
27221: EMPTY
27222: PPUSH
27223: CALL_OW 1
27227: ST_TO_ADDR
// end ;
27228: GO 26809
27230: POP
27231: POP
// MC_SetMinesField ( 1 , 8 , minefield1_left ) ;
27232: LD_INT 1
27234: PPUSH
27235: LD_INT 8
27237: PPUSH
27238: LD_INT 3
27240: PPUSH
27241: CALL 33824 0 3
// MC_SetMinesField ( 2 , 6 , minefield2_left ) ;
27245: LD_INT 2
27247: PPUSH
27248: LD_INT 6
27250: PPUSH
27251: LD_INT 2
27253: PPUSH
27254: CALL 33824 0 3
// MC_SetMinesField ( 3 , 6 , minefield3_left ) ;
27258: LD_INT 3
27260: PPUSH
27261: LD_INT 6
27263: PPUSH
27264: LD_INT 1
27266: PPUSH
27267: CALL 33824 0 3
// skirmish := true ;
27271: LD_ADDR_EXP 24
27275: PUSH
27276: LD_INT 1
27278: ST_TO_ADDR
// end ;
27279: LD_VAR 0 1
27283: RET
// every 0 0$01 trigger skirmish do
27284: LD_EXP 24
27288: IFFALSE 27358
27290: GO 27292
27292: DISABLE
// begin enable ;
27293: ENABLE
// MC_CheckBuildings ( ) ;
27294: CALL 27585 0 0
// MC_CheckPeopleLife ( ) ;
27298: CALL 27803 0 0
// RaiseSailEvent ( 103 ) ;
27302: LD_INT 103
27304: PPUSH
27305: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
27309: LD_INT 104
27311: PPUSH
27312: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
27316: LD_INT 105
27318: PPUSH
27319: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
27323: LD_INT 106
27325: PPUSH
27326: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
27330: LD_INT 107
27332: PPUSH
27333: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
27337: LD_INT 108
27339: PPUSH
27340: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
27344: LD_INT 109
27346: PPUSH
27347: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
27351: LD_INT 200
27353: PPUSH
27354: CALL_OW 427
// end ;
27358: END
// on SailEvent ( event ) do begin if event = 101 then
27359: LD_VAR 0 1
27363: PUSH
27364: LD_INT 101
27366: EQUAL
27367: IFFALSE 27373
// MC_RepairBuildings ( ) ;
27369: CALL 28349 0 0
// if event = 102 then
27373: LD_VAR 0 1
27377: PUSH
27378: LD_INT 102
27380: EQUAL
27381: IFFALSE 27387
// MC_Heal ( ) ;
27383: CALL 28743 0 0
// if event = 103 then
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 103
27394: EQUAL
27395: IFFALSE 27401
// MC_Build ( ) ;
27397: CALL 29128 0 0
// if event = 104 then
27401: LD_VAR 0 1
27405: PUSH
27406: LD_INT 104
27408: EQUAL
27409: IFFALSE 27415
// MC_TurretWeapon ( ) ;
27411: CALL 29851 0 0
// if event = 105 then
27415: LD_VAR 0 1
27419: PUSH
27420: LD_INT 105
27422: EQUAL
27423: IFFALSE 27429
// MC_TurretCrew ( ) ;
27425: CALL 30170 0 0
// if event = 106 then
27429: LD_VAR 0 1
27433: PUSH
27434: LD_INT 106
27436: EQUAL
27437: IFFALSE 27443
// MC_PlantMines ( ) ;
27439: CALL 30873 0 0
// if event = 107 then
27443: LD_VAR 0 1
27447: PUSH
27448: LD_INT 107
27450: EQUAL
27451: IFFALSE 27457
// MC_CollectCrates ( ) ;
27453: CALL 31792 0 0
// if event = 108 then
27457: LD_VAR 0 1
27461: PUSH
27462: LD_INT 108
27464: EQUAL
27465: IFFALSE 27471
// MC_LinkRemoteControl ( ) ;
27467: CALL 32589 0 0
// if event = 109 then
27471: LD_VAR 0 1
27475: PUSH
27476: LD_INT 109
27478: EQUAL
27479: IFFALSE 27485
// MC_ProduceVehicle ( ) ;
27481: CALL 32758 0 0
// if event = 200 then
27485: LD_VAR 0 1
27489: PUSH
27490: LD_INT 200
27492: EQUAL
27493: IFFALSE 27499
// MC_Idle ( ) ;
27495: CALL 33623 0 0
// end ;
27499: PPOPN 1
27501: END
// export function MC_Reset ( base , tag ) ; var i ; begin
27502: LD_INT 0
27504: PPUSH
27505: PPUSH
// if not mc_bases [ base ] or not tag then
27506: LD_EXP 25
27510: PUSH
27511: LD_VAR 0 1
27515: ARRAY
27516: NOT
27517: PUSH
27518: LD_VAR 0 2
27522: NOT
27523: OR
27524: IFFALSE 27528
// exit ;
27526: GO 27580
// for i in mc_bases [ base ] do
27528: LD_ADDR_VAR 0 4
27532: PUSH
27533: LD_EXP 25
27537: PUSH
27538: LD_VAR 0 1
27542: ARRAY
27543: PUSH
27544: FOR_IN
27545: IFFALSE 27578
// if GetTag ( i ) = tag then
27547: LD_VAR 0 4
27551: PPUSH
27552: CALL_OW 110
27556: PUSH
27557: LD_VAR 0 2
27561: EQUAL
27562: IFFALSE 27576
// SetTag ( i , 0 ) ;
27564: LD_VAR 0 4
27568: PPUSH
27569: LD_INT 0
27571: PPUSH
27572: CALL_OW 109
27576: GO 27544
27578: POP
27579: POP
// end ;
27580: LD_VAR 0 3
27584: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
27585: LD_INT 0
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
// if not mc_bases then
27591: LD_EXP 25
27595: NOT
27596: IFFALSE 27600
// exit ;
27598: GO 27798
// for i = 1 to mc_bases do
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: DOUBLE
27606: LD_INT 1
27608: DEC
27609: ST_TO_ADDR
27610: LD_EXP 25
27614: PUSH
27615: FOR_TO
27616: IFFALSE 27783
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27618: LD_ADDR_VAR 0 4
27622: PUSH
27623: LD_EXP 25
27627: PUSH
27628: LD_VAR 0 2
27632: ARRAY
27633: PPUSH
27634: LD_INT 21
27636: PUSH
27637: LD_INT 3
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 3
27646: PUSH
27647: LD_INT 24
27649: PUSH
27650: LD_INT 1000
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 72
27669: ST_TO_ADDR
// if not tmp then
27670: LD_VAR 0 4
27674: NOT
27675: IFFALSE 27701
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
27677: LD_ADDR_EXP 26
27681: PUSH
27682: LD_EXP 26
27686: PPUSH
27687: LD_VAR 0 2
27691: PPUSH
27692: EMPTY
27693: PPUSH
27694: CALL_OW 1
27698: ST_TO_ADDR
// continue ;
27699: GO 27615
// end ; for j in tmp do
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_VAR 0 4
27710: PUSH
27711: FOR_IN
27712: IFFALSE 27779
// if not j in mc_building_need_repair [ i ] then
27714: LD_VAR 0 3
27718: PUSH
27719: LD_EXP 26
27723: PUSH
27724: LD_VAR 0 2
27728: ARRAY
27729: IN
27730: NOT
27731: IFFALSE 27777
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
27733: LD_ADDR_EXP 26
27737: PUSH
27738: LD_EXP 26
27742: PPUSH
27743: LD_VAR 0 2
27747: PUSH
27748: LD_EXP 26
27752: PUSH
27753: LD_VAR 0 2
27757: ARRAY
27758: PUSH
27759: LD_INT 1
27761: PLUS
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PPUSH
27767: LD_VAR 0 3
27771: PPUSH
27772: CALL 1242 0 3
27776: ST_TO_ADDR
27777: GO 27711
27779: POP
27780: POP
// end ;
27781: GO 27615
27783: POP
27784: POP
// if mc_building_need_repair then
27785: LD_EXP 26
27789: IFFALSE 27798
// RaiseSailEvent ( 101 ) ;
27791: LD_INT 101
27793: PPUSH
27794: CALL_OW 427
// end ;
27798: LD_VAR 0 1
27802: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
27803: LD_INT 0
27805: PPUSH
27806: PPUSH
27807: PPUSH
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
// if not mc_bases then
27812: LD_EXP 25
27816: NOT
27817: IFFALSE 27821
// exit ;
27819: GO 28344
// for i = 1 to mc_bases do
27821: LD_ADDR_VAR 0 2
27825: PUSH
27826: DOUBLE
27827: LD_INT 1
27829: DEC
27830: ST_TO_ADDR
27831: LD_EXP 25
27835: PUSH
27836: FOR_TO
27837: IFFALSE 28335
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
27839: LD_ADDR_VAR 0 5
27843: PUSH
27844: LD_EXP 25
27848: PUSH
27849: LD_VAR 0 2
27853: ARRAY
27854: PPUSH
27855: LD_INT 21
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 1
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: LD_INT 54
27873: PUSH
27874: EMPTY
27875: LIST
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: LD_INT 24
27886: PUSH
27887: LD_INT 700
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: LIST
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PPUSH
27907: CALL_OW 72
27911: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
27912: LD_ADDR_VAR 0 6
27916: PUSH
27917: LD_EXP 25
27921: PUSH
27922: LD_VAR 0 2
27926: ARRAY
27927: PPUSH
27928: LD_INT 21
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: LD_INT 54
27946: PUSH
27947: EMPTY
27948: LIST
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 3
27956: PUSH
27957: LD_INT 24
27959: PUSH
27960: LD_INT 250
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: LIST
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PPUSH
27980: CALL_OW 72
27984: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
27985: LD_ADDR_VAR 0 7
27989: PUSH
27990: LD_VAR 0 5
27994: PUSH
27995: LD_VAR 0 6
27999: DIFF
28000: ST_TO_ADDR
// if not need_heal_1 then
28001: LD_VAR 0 6
28005: NOT
28006: IFFALSE 28039
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
28008: LD_ADDR_EXP 28
28012: PUSH
28013: LD_EXP 28
28017: PPUSH
28018: LD_VAR 0 2
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PPUSH
28030: EMPTY
28031: PPUSH
28032: CALL 1242 0 3
28036: ST_TO_ADDR
28037: GO 28071
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
28039: LD_ADDR_EXP 28
28043: PUSH
28044: LD_EXP 28
28048: PPUSH
28049: LD_VAR 0 2
28053: PUSH
28054: LD_INT 1
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PPUSH
28061: LD_VAR 0 6
28065: PPUSH
28066: CALL 1242 0 3
28070: ST_TO_ADDR
// if not need_heal_2 then
28071: LD_VAR 0 7
28075: NOT
28076: IFFALSE 28109
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
28078: LD_ADDR_EXP 28
28082: PUSH
28083: LD_EXP 28
28087: PPUSH
28088: LD_VAR 0 2
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PPUSH
28100: EMPTY
28101: PPUSH
28102: CALL 1242 0 3
28106: ST_TO_ADDR
28107: GO 28141
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
28109: LD_ADDR_EXP 28
28113: PUSH
28114: LD_EXP 28
28118: PPUSH
28119: LD_VAR 0 2
28123: PUSH
28124: LD_INT 2
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PPUSH
28131: LD_VAR 0 7
28135: PPUSH
28136: CALL 1242 0 3
28140: ST_TO_ADDR
// if need_heal_2 then
28141: LD_VAR 0 7
28145: IFFALSE 28317
// for j in need_heal_2 do
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_VAR 0 7
28156: PUSH
28157: FOR_IN
28158: IFFALSE 28315
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: LD_EXP 25
28169: PUSH
28170: LD_VAR 0 2
28174: ARRAY
28175: PPUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 30
28181: PUSH
28182: LD_INT 6
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 30
28191: PUSH
28192: LD_INT 7
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 30
28201: PUSH
28202: LD_INT 8
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 30
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 30
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 25
28231: PUSH
28232: LD_INT 4
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: PPUSH
28248: CALL_OW 72
28252: ST_TO_ADDR
// if tmp then
28253: LD_VAR 0 5
28257: IFFALSE 28313
// begin k := NearestUnitToUnit ( tmp , j ) ;
28259: LD_ADDR_VAR 0 4
28263: PUSH
28264: LD_VAR 0 5
28268: PPUSH
28269: LD_VAR 0 3
28273: PPUSH
28274: CALL_OW 74
28278: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
28279: LD_VAR 0 3
28283: PPUSH
28284: LD_VAR 0 4
28288: PPUSH
28289: CALL_OW 296
28293: PUSH
28294: LD_INT 7
28296: GREATER
28297: IFFALSE 28313
// ComMoveUnit ( j , k ) ;
28299: LD_VAR 0 3
28303: PPUSH
28304: LD_VAR 0 4
28308: PPUSH
28309: CALL_OW 112
// end ; end ;
28313: GO 28157
28315: POP
28316: POP
// if not need_heal_1 and not need_heal_2 then
28317: LD_VAR 0 6
28321: NOT
28322: PUSH
28323: LD_VAR 0 7
28327: NOT
28328: AND
28329: IFFALSE 28333
// continue ;
28331: GO 27836
// end ;
28333: GO 27836
28335: POP
28336: POP
// RaiseSailEvent ( 102 ) ;
28337: LD_INT 102
28339: PPUSH
28340: CALL_OW 427
// end ;
28344: LD_VAR 0 1
28348: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
28349: LD_INT 0
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
28355: PPUSH
// if not mc_bases then
28356: LD_EXP 25
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28738
// for i = 1 to mc_bases do
28365: LD_ADDR_VAR 0 2
28369: PUSH
28370: DOUBLE
28371: LD_INT 1
28373: DEC
28374: ST_TO_ADDR
28375: LD_EXP 25
28379: PUSH
28380: FOR_TO
28381: IFFALSE 28736
// begin if not mc_building_need_repair [ i ] then
28383: LD_EXP 26
28387: PUSH
28388: LD_VAR 0 2
28392: ARRAY
28393: NOT
28394: IFFALSE 28432
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
28396: LD_ADDR_EXP 27
28400: PUSH
28401: LD_EXP 27
28405: PPUSH
28406: LD_VAR 0 2
28410: PPUSH
28411: EMPTY
28412: PPUSH
28413: CALL_OW 1
28417: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
28418: LD_VAR 0 2
28422: PPUSH
28423: LD_INT 101
28425: PPUSH
28426: CALL 27502 0 2
// continue ;
28430: GO 28380
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
28432: LD_ADDR_EXP 31
28436: PUSH
28437: LD_EXP 31
28441: PPUSH
28442: LD_VAR 0 2
28446: PPUSH
28447: EMPTY
28448: PPUSH
28449: CALL_OW 1
28453: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
28454: LD_VAR 0 2
28458: PPUSH
28459: LD_INT 103
28461: PPUSH
28462: CALL 27502 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
28466: LD_ADDR_VAR 0 5
28470: PUSH
28471: LD_EXP 25
28475: PUSH
28476: LD_VAR 0 2
28480: ARRAY
28481: PPUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 25
28487: PUSH
28488: LD_INT 2
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 25
28497: PUSH
28498: LD_INT 16
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: PPUSH
28513: CALL_OW 72
28517: ST_TO_ADDR
// if not tmp then
28518: LD_VAR 0 5
28522: NOT
28523: IFFALSE 28527
// continue ;
28525: GO 28380
// for j in tmp do
28527: LD_ADDR_VAR 0 3
28531: PUSH
28532: LD_VAR 0 5
28536: PUSH
28537: FOR_IN
28538: IFFALSE 28732
// begin if mc_need_heal [ i ] then
28540: LD_EXP 28
28544: PUSH
28545: LD_VAR 0 2
28549: ARRAY
28550: IFFALSE 28598
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
28552: LD_VAR 0 3
28556: PUSH
28557: LD_EXP 28
28561: PUSH
28562: LD_VAR 0 2
28566: ARRAY
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: IN
28572: PUSH
28573: LD_VAR 0 3
28577: PUSH
28578: LD_EXP 28
28582: PUSH
28583: LD_VAR 0 2
28587: ARRAY
28588: PUSH
28589: LD_INT 2
28591: ARRAY
28592: IN
28593: OR
28594: IFFALSE 28598
// continue ;
28596: GO 28537
// if IsInUnit ( j ) then
28598: LD_VAR 0 3
28602: PPUSH
28603: CALL_OW 310
28607: IFFALSE 28618
// ComExitBuilding ( j ) ;
28609: LD_VAR 0 3
28613: PPUSH
28614: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
28618: LD_VAR 0 3
28622: PUSH
28623: LD_EXP 27
28627: PUSH
28628: LD_VAR 0 2
28632: ARRAY
28633: IN
28634: NOT
28635: IFFALSE 28693
// begin SetTag ( j , 101 ) ;
28637: LD_VAR 0 3
28641: PPUSH
28642: LD_INT 101
28644: PPUSH
28645: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
28649: LD_ADDR_EXP 27
28653: PUSH
28654: LD_EXP 27
28658: PPUSH
28659: LD_VAR 0 2
28663: PUSH
28664: LD_EXP 27
28668: PUSH
28669: LD_VAR 0 2
28673: ARRAY
28674: PUSH
28675: LD_INT 1
28677: PLUS
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PPUSH
28683: LD_VAR 0 3
28687: PPUSH
28688: CALL 1242 0 3
28692: ST_TO_ADDR
// end ; Wait ( 3 ) ;
28693: LD_INT 3
28695: PPUSH
28696: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
28700: LD_VAR 0 3
28704: PPUSH
28705: LD_EXP 26
28709: PUSH
28710: LD_VAR 0 2
28714: ARRAY
28715: PPUSH
28716: LD_VAR 0 3
28720: PPUSH
28721: CALL_OW 74
28725: PPUSH
28726: CALL_OW 130
// end ;
28730: GO 28537
28732: POP
28733: POP
// end ;
28734: GO 28380
28736: POP
28737: POP
// end ;
28738: LD_VAR 0 1
28742: RET
// export function MC_Heal ; var i , j , tmp ; begin
28743: LD_INT 0
28745: PPUSH
28746: PPUSH
28747: PPUSH
28748: PPUSH
// if not mc_bases then
28749: LD_EXP 25
28753: NOT
28754: IFFALSE 28758
// exit ;
28756: GO 29123
// for i = 1 to mc_bases do
28758: LD_ADDR_VAR 0 2
28762: PUSH
28763: DOUBLE
28764: LD_INT 1
28766: DEC
28767: ST_TO_ADDR
28768: LD_EXP 25
28772: PUSH
28773: FOR_TO
28774: IFFALSE 29121
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
28776: LD_EXP 28
28780: PUSH
28781: LD_VAR 0 2
28785: ARRAY
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: NOT
28791: PUSH
28792: LD_EXP 28
28796: PUSH
28797: LD_VAR 0 2
28801: ARRAY
28802: PUSH
28803: LD_INT 2
28805: ARRAY
28806: NOT
28807: AND
28808: IFFALSE 28846
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
28810: LD_ADDR_EXP 29
28814: PUSH
28815: LD_EXP 29
28819: PPUSH
28820: LD_VAR 0 2
28824: PPUSH
28825: EMPTY
28826: PPUSH
28827: CALL_OW 1
28831: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
28832: LD_VAR 0 2
28836: PPUSH
28837: LD_INT 102
28839: PPUSH
28840: CALL 27502 0 2
// continue ;
28844: GO 28773
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
28846: LD_ADDR_VAR 0 4
28850: PUSH
28851: LD_EXP 25
28855: PUSH
28856: LD_VAR 0 2
28860: ARRAY
28861: PPUSH
28862: LD_INT 25
28864: PUSH
28865: LD_INT 4
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PPUSH
28872: CALL_OW 72
28876: ST_TO_ADDR
// if not tmp then
28877: LD_VAR 0 4
28881: NOT
28882: IFFALSE 28886
// continue ;
28884: GO 28773
// for j in tmp do
28886: LD_ADDR_VAR 0 3
28890: PUSH
28891: LD_VAR 0 4
28895: PUSH
28896: FOR_IN
28897: IFFALSE 29117
// begin if IsInUnit ( j ) then
28899: LD_VAR 0 3
28903: PPUSH
28904: CALL_OW 310
28908: IFFALSE 28919
// ComExitBuilding ( j ) ;
28910: LD_VAR 0 3
28914: PPUSH
28915: CALL_OW 122
// if not j in mc_healers [ i ] then
28919: LD_VAR 0 3
28923: PUSH
28924: LD_EXP 29
28928: PUSH
28929: LD_VAR 0 2
28933: ARRAY
28934: IN
28935: NOT
28936: IFFALSE 28982
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
28938: LD_ADDR_EXP 29
28942: PUSH
28943: LD_EXP 29
28947: PPUSH
28948: LD_VAR 0 2
28952: PUSH
28953: LD_EXP 29
28957: PUSH
28958: LD_VAR 0 2
28962: ARRAY
28963: PUSH
28964: LD_INT 1
28966: PLUS
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: CALL 1242 0 3
28981: ST_TO_ADDR
// if not GetTag ( j ) then
28982: LD_VAR 0 3
28986: PPUSH
28987: CALL_OW 110
28991: NOT
28992: IFFALSE 29006
// SetTag ( j , 102 ) ;
28994: LD_VAR 0 3
28998: PPUSH
28999: LD_INT 102
29001: PPUSH
29002: CALL_OW 109
// Wait ( 3 ) ;
29006: LD_INT 3
29008: PPUSH
29009: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
29013: LD_EXP 28
29017: PUSH
29018: LD_VAR 0 2
29022: ARRAY
29023: PUSH
29024: LD_INT 1
29026: ARRAY
29027: IFFALSE 29059
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
29029: LD_VAR 0 3
29033: PPUSH
29034: LD_EXP 28
29038: PUSH
29039: LD_VAR 0 2
29043: ARRAY
29044: PUSH
29045: LD_INT 1
29047: ARRAY
29048: PUSH
29049: LD_INT 1
29051: ARRAY
29052: PPUSH
29053: CALL_OW 128
29057: GO 29115
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
29059: LD_VAR 0 3
29063: PPUSH
29064: CALL_OW 314
29068: NOT
29069: PUSH
29070: LD_EXP 28
29074: PUSH
29075: LD_VAR 0 2
29079: ARRAY
29080: PUSH
29081: LD_INT 2
29083: ARRAY
29084: AND
29085: IFFALSE 29115
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
29087: LD_VAR 0 3
29091: PPUSH
29092: LD_EXP 28
29096: PUSH
29097: LD_VAR 0 2
29101: ARRAY
29102: PUSH
29103: LD_INT 2
29105: ARRAY
29106: PUSH
29107: LD_INT 1
29109: ARRAY
29110: PPUSH
29111: CALL_OW 128
// end ;
29115: GO 28896
29117: POP
29118: POP
// end ;
29119: GO 28773
29121: POP
29122: POP
// end ;
29123: LD_VAR 0 1
29127: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
29128: LD_INT 0
29130: PPUSH
29131: PPUSH
29132: PPUSH
29133: PPUSH
// if not mc_bases then
29134: LD_EXP 25
29138: NOT
29139: IFFALSE 29143
// exit ;
29141: GO 29846
// for i = 1 to mc_bases do
29143: LD_ADDR_VAR 0 2
29147: PUSH
29148: DOUBLE
29149: LD_INT 1
29151: DEC
29152: ST_TO_ADDR
29153: LD_EXP 25
29157: PUSH
29158: FOR_TO
29159: IFFALSE 29844
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
29161: LD_EXP 30
29165: PUSH
29166: LD_VAR 0 2
29170: ARRAY
29171: NOT
29172: PUSH
29173: LD_EXP 32
29177: PUSH
29178: LD_VAR 0 2
29182: ARRAY
29183: NOT
29184: AND
29185: IFFALSE 29223
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
29187: LD_ADDR_EXP 31
29191: PUSH
29192: LD_EXP 31
29196: PPUSH
29197: LD_VAR 0 2
29201: PPUSH
29202: EMPTY
29203: PPUSH
29204: CALL_OW 1
29208: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_INT 103
29216: PPUSH
29217: CALL 27502 0 2
// continue ;
29221: GO 29158
// end ; if mc_construct_list [ i ] then
29223: LD_EXP 32
29227: PUSH
29228: LD_VAR 0 2
29232: ARRAY
29233: IFFALSE 29438
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
29235: LD_ADDR_VAR 0 4
29239: PUSH
29240: LD_EXP 25
29244: PUSH
29245: LD_VAR 0 2
29249: ARRAY
29250: PPUSH
29251: LD_INT 25
29253: PUSH
29254: LD_INT 2
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PPUSH
29261: CALL_OW 72
29265: PUSH
29266: LD_EXP 27
29270: PUSH
29271: LD_VAR 0 2
29275: ARRAY
29276: DIFF
29277: ST_TO_ADDR
// if not tmp then
29278: LD_VAR 0 4
29282: NOT
29283: IFFALSE 29287
// continue ;
29285: GO 29158
// for j in tmp do
29287: LD_ADDR_VAR 0 3
29291: PUSH
29292: LD_VAR 0 4
29296: PUSH
29297: FOR_IN
29298: IFFALSE 29434
// begin if not mc_builders [ i ] then
29300: LD_EXP 31
29304: PUSH
29305: LD_VAR 0 2
29309: ARRAY
29310: NOT
29311: IFFALSE 29369
// begin SetTag ( j , 103 ) ;
29313: LD_VAR 0 3
29317: PPUSH
29318: LD_INT 103
29320: PPUSH
29321: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
29325: LD_ADDR_EXP 31
29329: PUSH
29330: LD_EXP 31
29334: PPUSH
29335: LD_VAR 0 2
29339: PUSH
29340: LD_EXP 31
29344: PUSH
29345: LD_VAR 0 2
29349: ARRAY
29350: PUSH
29351: LD_INT 1
29353: PLUS
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PPUSH
29359: LD_VAR 0 3
29363: PPUSH
29364: CALL 1242 0 3
29368: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
29369: LD_VAR 0 3
29373: PPUSH
29374: CALL_OW 310
29378: IFFALSE 29389
// ComExitBuilding ( j ) ;
29380: LD_VAR 0 3
29384: PPUSH
29385: CALL_OW 122
// wait ( 3 ) ;
29389: LD_INT 3
29391: PPUSH
29392: CALL_OW 67
// if not HasTask ( j ) then
29396: LD_VAR 0 3
29400: PPUSH
29401: CALL_OW 314
29405: NOT
29406: IFFALSE 29432
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
29408: LD_VAR 0 3
29412: PPUSH
29413: LD_EXP 32
29417: PUSH
29418: LD_VAR 0 2
29422: ARRAY
29423: PUSH
29424: LD_INT 1
29426: ARRAY
29427: PPUSH
29428: CALL 3558 0 2
// end ;
29432: GO 29297
29434: POP
29435: POP
// end else
29436: GO 29842
// if mc_build_list [ i ] then
29438: LD_EXP 30
29442: PUSH
29443: LD_VAR 0 2
29447: ARRAY
29448: IFFALSE 29842
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
29450: LD_EXP 25
29454: PUSH
29455: LD_VAR 0 2
29459: ARRAY
29460: PPUSH
29461: LD_INT 2
29463: PUSH
29464: LD_INT 30
29466: PUSH
29467: LD_INT 0
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: PUSH
29474: LD_INT 30
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: PPUSH
29489: CALL_OW 72
29493: PUSH
29494: LD_INT 1
29496: ARRAY
29497: PPUSH
29498: LD_EXP 30
29502: PUSH
29503: LD_VAR 0 2
29507: ARRAY
29508: PUSH
29509: LD_INT 1
29511: ARRAY
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: LD_EXP 30
29521: PUSH
29522: LD_VAR 0 2
29526: ARRAY
29527: PUSH
29528: LD_INT 1
29530: ARRAY
29531: PUSH
29532: LD_INT 2
29534: ARRAY
29535: PPUSH
29536: LD_EXP 30
29540: PUSH
29541: LD_VAR 0 2
29545: ARRAY
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: PUSH
29551: LD_INT 3
29553: ARRAY
29554: PPUSH
29555: LD_EXP 30
29559: PUSH
29560: LD_VAR 0 2
29564: ARRAY
29565: PUSH
29566: LD_INT 1
29568: ARRAY
29569: PUSH
29570: LD_INT 4
29572: ARRAY
29573: PPUSH
29574: CALL 6644 0 5
29578: IFFALSE 29842
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: LD_EXP 25
29589: PUSH
29590: LD_VAR 0 2
29594: ARRAY
29595: PPUSH
29596: LD_INT 25
29598: PUSH
29599: LD_INT 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PPUSH
29606: CALL_OW 72
29610: PUSH
29611: LD_EXP 27
29615: PUSH
29616: LD_VAR 0 2
29620: ARRAY
29621: DIFF
29622: ST_TO_ADDR
// if not tmp then
29623: LD_VAR 0 4
29627: NOT
29628: IFFALSE 29632
// continue ;
29630: GO 29158
// for j in tmp do
29632: LD_ADDR_VAR 0 3
29636: PUSH
29637: LD_VAR 0 4
29641: PUSH
29642: FOR_IN
29643: IFFALSE 29840
// begin if not mc_builders [ i ] then
29645: LD_EXP 31
29649: PUSH
29650: LD_VAR 0 2
29654: ARRAY
29655: NOT
29656: IFFALSE 29714
// begin SetTag ( j , 103 ) ;
29658: LD_VAR 0 3
29662: PPUSH
29663: LD_INT 103
29665: PPUSH
29666: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
29670: LD_ADDR_EXP 31
29674: PUSH
29675: LD_EXP 31
29679: PPUSH
29680: LD_VAR 0 2
29684: PUSH
29685: LD_EXP 31
29689: PUSH
29690: LD_VAR 0 2
29694: ARRAY
29695: PUSH
29696: LD_INT 1
29698: PLUS
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: LD_VAR 0 3
29708: PPUSH
29709: CALL 1242 0 3
29713: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
29714: LD_VAR 0 3
29718: PPUSH
29719: CALL_OW 310
29723: IFFALSE 29734
// ComExitBuilding ( j ) ;
29725: LD_VAR 0 3
29729: PPUSH
29730: CALL_OW 122
// wait ( 3 ) ;
29734: LD_INT 3
29736: PPUSH
29737: CALL_OW 67
// if not HasTask ( j ) then
29741: LD_VAR 0 3
29745: PPUSH
29746: CALL_OW 314
29750: NOT
29751: IFFALSE 29838
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
29753: LD_VAR 0 3
29757: PPUSH
29758: LD_EXP 30
29762: PUSH
29763: LD_VAR 0 2
29767: ARRAY
29768: PUSH
29769: LD_INT 1
29771: ARRAY
29772: PUSH
29773: LD_INT 1
29775: ARRAY
29776: PPUSH
29777: LD_EXP 30
29781: PUSH
29782: LD_VAR 0 2
29786: ARRAY
29787: PUSH
29788: LD_INT 1
29790: ARRAY
29791: PUSH
29792: LD_INT 2
29794: ARRAY
29795: PPUSH
29796: LD_EXP 30
29800: PUSH
29801: LD_VAR 0 2
29805: ARRAY
29806: PUSH
29807: LD_INT 1
29809: ARRAY
29810: PUSH
29811: LD_INT 3
29813: ARRAY
29814: PPUSH
29815: LD_EXP 30
29819: PUSH
29820: LD_VAR 0 2
29824: ARRAY
29825: PUSH
29826: LD_INT 1
29828: ARRAY
29829: PUSH
29830: LD_INT 4
29832: ARRAY
29833: PPUSH
29834: CALL_OW 145
// end ;
29838: GO 29642
29840: POP
29841: POP
// end ; end ;
29842: GO 29158
29844: POP
29845: POP
// end ;
29846: LD_VAR 0 1
29850: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
29859: PPUSH
// if not mc_bases then
29860: LD_EXP 25
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 30165
// for i = 1 to mc_bases do
29869: LD_ADDR_VAR 0 2
29873: PUSH
29874: DOUBLE
29875: LD_INT 1
29877: DEC
29878: ST_TO_ADDR
29879: LD_EXP 25
29883: PUSH
29884: FOR_TO
29885: IFFALSE 30163
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
29887: LD_EXP 33
29891: PUSH
29892: LD_VAR 0 2
29896: ARRAY
29897: NOT
29898: PUSH
29899: LD_EXP 25
29903: PUSH
29904: LD_VAR 0 2
29908: ARRAY
29909: PPUSH
29910: LD_INT 30
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 72
29924: NOT
29925: OR
29926: IFFALSE 29930
// continue ;
29928: GO 29884
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
29930: LD_EXP 33
29934: PUSH
29935: LD_VAR 0 2
29939: ARRAY
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: PPUSH
29945: CALL_OW 269
29949: IFFALSE 30015
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
29951: LD_ADDR_VAR 0 4
29955: PUSH
29956: LD_EXP 33
29960: PUSH
29961: LD_VAR 0 2
29965: ARRAY
29966: PPUSH
29967: LD_INT 1
29969: PPUSH
29970: CALL_OW 3
29974: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
29975: LD_ADDR_EXP 33
29979: PUSH
29980: LD_EXP 33
29984: PPUSH
29985: LD_VAR 0 2
29989: PPUSH
29990: LD_VAR 0 4
29994: PPUSH
29995: CALL_OW 1
29999: ST_TO_ADDR
// if not mc_turret_list [ i ] then
30000: LD_EXP 33
30004: PUSH
30005: LD_VAR 0 2
30009: ARRAY
30010: NOT
30011: IFFALSE 30015
// continue ;
30013: GO 29884
// end ; busy := false ;
30015: LD_ADDR_VAR 0 6
30019: PUSH
30020: LD_INT 0
30022: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_EXP 25
30032: PUSH
30033: LD_VAR 0 2
30037: ARRAY
30038: PPUSH
30039: LD_INT 30
30041: PUSH
30042: LD_INT 3
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PPUSH
30049: CALL_OW 72
30053: ST_TO_ADDR
// for j in tmp do
30054: LD_ADDR_VAR 0 3
30058: PUSH
30059: LD_VAR 0 4
30063: PUSH
30064: FOR_IN
30065: IFFALSE 30093
// if not BuildingStatus ( j ) = bs_idle then
30067: LD_VAR 0 3
30071: PPUSH
30072: CALL_OW 461
30076: PUSH
30077: LD_INT 2
30079: EQUAL
30080: NOT
30081: IFFALSE 30091
// busy := true ;
30083: LD_ADDR_VAR 0 6
30087: PUSH
30088: LD_INT 1
30090: ST_TO_ADDR
30091: GO 30064
30093: POP
30094: POP
// if busy then
30095: LD_VAR 0 6
30099: IFFALSE 30103
// continue ;
30101: GO 29884
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
30103: LD_ADDR_VAR 0 7
30107: PUSH
30108: LD_EXP 33
30112: PUSH
30113: LD_VAR 0 2
30117: ARRAY
30118: PUSH
30119: LD_INT 1
30121: ARRAY
30122: PPUSH
30123: CALL 5133 0 1
30127: ST_TO_ADDR
// if not weapon then
30128: LD_VAR 0 7
30132: NOT
30133: IFFALSE 30137
// continue ;
30135: GO 29884
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
30137: LD_EXP 33
30141: PUSH
30142: LD_VAR 0 2
30146: ARRAY
30147: PUSH
30148: LD_INT 1
30150: ARRAY
30151: PPUSH
30152: LD_VAR 0 7
30156: PPUSH
30157: CALL_OW 148
// end ;
30161: GO 29884
30163: POP
30164: POP
// end ;
30165: LD_VAR 0 1
30169: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , x ; begin
30170: LD_INT 0
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
// if not mc_bases then
30178: LD_EXP 25
30182: NOT
30183: IFFALSE 30187
// exit ;
30185: GO 30868
// for i = 1 to mc_bases do
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: DOUBLE
30193: LD_INT 1
30195: DEC
30196: ST_TO_ADDR
30197: LD_EXP 25
30201: PUSH
30202: FOR_TO
30203: IFFALSE 30866
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
30205: LD_ADDR_VAR 0 6
30209: PUSH
30210: LD_EXP 25
30214: PUSH
30215: LD_VAR 0 2
30219: ARRAY
30220: PPUSH
30221: LD_INT 24
30223: PUSH
30224: LD_INT 375
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 2
30233: PUSH
30234: LD_INT 30
30236: PUSH
30237: LD_INT 32
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 31
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 58
30261: PUSH
30262: EMPTY
30263: LIST
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 72
30274: ST_TO_ADDR
// if not x then
30275: LD_VAR 0 6
30279: NOT
30280: IFFALSE 30284
// continue ;
30282: GO 30202
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
30284: LD_ADDR_EXP 34
30288: PUSH
30289: LD_EXP 34
30293: PPUSH
30294: LD_VAR 0 2
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PPUSH
30306: LD_VAR 0 6
30310: PPUSH
30311: CALL 1242 0 3
30315: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
30316: LD_EXP 34
30320: PUSH
30321: LD_VAR 0 2
30325: ARRAY
30326: NOT
30327: PUSH
30328: LD_EXP 34
30332: PUSH
30333: LD_VAR 0 2
30337: ARRAY
30338: PUSH
30339: LD_INT 1
30341: ARRAY
30342: NOT
30343: OR
30344: PUSH
30345: LD_EXP 34
30349: PUSH
30350: LD_VAR 0 2
30354: ARRAY
30355: PUSH
30356: LD_INT 1
30358: ARRAY
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: NOT
30364: OR
30365: IFFALSE 30369
// continue ;
30367: GO 30202
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
30369: LD_EXP 34
30373: PUSH
30374: LD_VAR 0 2
30378: ARRAY
30379: PUSH
30380: LD_INT 1
30382: ARRAY
30383: PUSH
30384: LD_INT 1
30386: ARRAY
30387: PPUSH
30388: CALL_OW 313
30392: PUSH
30393: LD_INT 0
30395: EQUAL
30396: IFFALSE 30864
// if not mc_empty_turret_list [ i ] [ 2 ] then
30398: LD_EXP 34
30402: PUSH
30403: LD_VAR 0 2
30407: ARRAY
30408: PUSH
30409: LD_INT 2
30411: ARRAY
30412: NOT
30413: IFFALSE 30562
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
30415: LD_ADDR_VAR 0 5
30419: PUSH
30420: LD_EXP 25
30424: PUSH
30425: LD_VAR 0 2
30429: ARRAY
30430: PPUSH
30431: LD_INT 2
30433: PUSH
30434: LD_INT 30
30436: PUSH
30437: LD_INT 4
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 30
30446: PUSH
30447: LD_INT 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 72
30463: ST_TO_ADDR
// if not tmp then
30464: LD_VAR 0 5
30468: NOT
30469: IFFALSE 30473
// continue ;
30471: GO 30202
// for j in tmp do
30473: LD_ADDR_VAR 0 3
30477: PUSH
30478: LD_VAR 0 5
30482: PUSH
30483: FOR_IN
30484: IFFALSE 30558
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_VAR 0 3
30495: PPUSH
30496: CALL_OW 313
30500: PPUSH
30501: LD_INT 25
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PPUSH
30511: CALL_OW 72
30515: ST_TO_ADDR
// if t then
30516: LD_VAR 0 4
30520: IFFALSE 30556
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t ) ;
30522: LD_ADDR_EXP 34
30526: PUSH
30527: LD_EXP 34
30531: PPUSH
30532: LD_VAR 0 2
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PPUSH
30544: LD_VAR 0 4
30548: PPUSH
30549: CALL 1242 0 3
30553: ST_TO_ADDR
// break ;
30554: GO 30558
// end ; end ;
30556: GO 30483
30558: POP
30559: POP
// end else
30560: GO 30864
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
30562: LD_EXP 34
30566: PUSH
30567: LD_VAR 0 2
30571: ARRAY
30572: PUSH
30573: LD_INT 2
30575: ARRAY
30576: PUSH
30577: LD_INT 1
30579: ARRAY
30580: PPUSH
30581: CALL_OW 301
30585: IFFALSE 30618
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
30587: LD_ADDR_EXP 34
30591: PUSH
30592: LD_EXP 34
30596: PPUSH
30597: LD_VAR 0 2
30601: PUSH
30602: LD_INT 2
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PPUSH
30609: EMPTY
30610: PPUSH
30611: CALL 1242 0 3
30615: ST_TO_ADDR
// break ;
30616: GO 30866
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
30618: LD_EXP 34
30622: PUSH
30623: LD_VAR 0 2
30627: ARRAY
30628: PUSH
30629: LD_INT 2
30631: ARRAY
30632: PUSH
30633: LD_INT 1
30635: ARRAY
30636: PPUSH
30637: CALL_OW 314
30641: NOT
30642: PUSH
30643: LD_EXP 34
30647: PUSH
30648: LD_VAR 0 2
30652: ARRAY
30653: PUSH
30654: LD_INT 2
30656: ARRAY
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: PUSH
30662: LD_EXP 34
30666: PUSH
30667: LD_VAR 0 2
30671: ARRAY
30672: PUSH
30673: LD_INT 1
30675: ARRAY
30676: PUSH
30677: LD_INT 1
30679: ARRAY
30680: PPUSH
30681: CALL_OW 313
30685: IN
30686: NOT
30687: AND
30688: IFFALSE 30864
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
30690: LD_EXP 34
30694: PUSH
30695: LD_VAR 0 2
30699: ARRAY
30700: PUSH
30701: LD_INT 2
30703: ARRAY
30704: PUSH
30705: LD_INT 1
30707: ARRAY
30708: PPUSH
30709: CALL_OW 310
30713: IFFALSE 30738
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
30715: LD_EXP 34
30719: PUSH
30720: LD_VAR 0 2
30724: ARRAY
30725: PUSH
30726: LD_INT 2
30728: ARRAY
30729: PUSH
30730: LD_INT 1
30732: ARRAY
30733: PPUSH
30734: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
30738: LD_EXP 34
30742: PUSH
30743: LD_VAR 0 2
30747: ARRAY
30748: PUSH
30749: LD_INT 2
30751: ARRAY
30752: PUSH
30753: LD_INT 1
30755: ARRAY
30756: PPUSH
30757: LD_EXP 34
30761: PUSH
30762: LD_VAR 0 2
30766: ARRAY
30767: PUSH
30768: LD_INT 1
30770: ARRAY
30771: PUSH
30772: LD_INT 1
30774: ARRAY
30775: PPUSH
30776: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
30780: LD_INT 35
30782: PPUSH
30783: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
30787: LD_EXP 34
30791: PUSH
30792: LD_VAR 0 2
30796: ARRAY
30797: PUSH
30798: LD_INT 2
30800: ARRAY
30801: NOT
30802: IFFALSE 30806
// break ;
30804: GO 30831
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
30806: LD_EXP 34
30810: PUSH
30811: LD_VAR 0 2
30815: ARRAY
30816: PUSH
30817: LD_INT 2
30819: ARRAY
30820: PUSH
30821: LD_INT 1
30823: ARRAY
30824: PPUSH
30825: CALL_OW 310
30829: IFFALSE 30780
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
30831: LD_ADDR_EXP 34
30835: PUSH
30836: LD_EXP 34
30840: PPUSH
30841: LD_VAR 0 2
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PPUSH
30853: EMPTY
30854: PPUSH
30855: CALL 1242 0 3
30859: ST_TO_ADDR
// exit ;
30860: POP
30861: POP
30862: GO 30868
// end ; end ; end ;
30864: GO 30202
30866: POP
30867: POP
// end ;
30868: LD_VAR 0 1
30872: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
30873: LD_INT 0
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
// if not mc_bases then
30881: LD_EXP 25
30885: NOT
30886: IFFALSE 30890
// exit ;
30888: GO 31787
// for i = 1 to mc_bases do
30890: LD_ADDR_VAR 0 2
30894: PUSH
30895: DOUBLE
30896: LD_INT 1
30898: DEC
30899: ST_TO_ADDR
30900: LD_EXP 25
30904: PUSH
30905: FOR_TO
30906: IFFALSE 31785
// begin if mc_minefields [ i ] and mc_miners [ i ] then
30908: LD_EXP 37
30912: PUSH
30913: LD_VAR 0 2
30917: ARRAY
30918: PUSH
30919: LD_EXP 36
30923: PUSH
30924: LD_VAR 0 2
30928: ARRAY
30929: AND
30930: IFFALSE 31006
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
30932: LD_EXP 37
30936: PUSH
30937: LD_VAR 0 2
30941: ARRAY
30942: PPUSH
30943: LD_INT 81
30945: PUSH
30946: LD_EXP 36
30950: PUSH
30951: LD_VAR 0 2
30955: ARRAY
30956: PUSH
30957: LD_INT 1
30959: ARRAY
30960: PPUSH
30961: CALL_OW 255
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 2
30972: PUSH
30973: LD_INT 21
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 21
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PPUSH
31002: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
31006: LD_EXP 35
31010: PUSH
31011: LD_VAR 0 2
31015: ARRAY
31016: NOT
31017: PUSH
31018: LD_EXP 35
31022: PUSH
31023: LD_VAR 0 2
31027: ARRAY
31028: PUSH
31029: LD_EXP 36
31033: PUSH
31034: LD_VAR 0 2
31038: ARRAY
31039: EQUAL
31040: OR
31041: IFFALSE 31045
// continue ;
31043: GO 30905
// if mc_miners [ i ] then
31045: LD_EXP 36
31049: PUSH
31050: LD_VAR 0 2
31054: ARRAY
31055: IFFALSE 31483
// for j = 1 to mc_miners [ i ] do
31057: LD_ADDR_VAR 0 3
31061: PUSH
31062: DOUBLE
31063: LD_INT 1
31065: DEC
31066: ST_TO_ADDR
31067: LD_EXP 36
31071: PUSH
31072: LD_VAR 0 2
31076: ARRAY
31077: PUSH
31078: FOR_TO
31079: IFFALSE 31481
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
31081: LD_EXP 36
31085: PUSH
31086: LD_VAR 0 2
31090: ARRAY
31091: PUSH
31092: LD_VAR 0 3
31096: ARRAY
31097: PPUSH
31098: CALL_OW 301
31102: IFFALSE 31184
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
31104: LD_ADDR_VAR 0 5
31108: PUSH
31109: LD_EXP 36
31113: PUSH
31114: LD_VAR 0 2
31118: ARRAY
31119: PUSH
31120: LD_EXP 36
31124: PUSH
31125: LD_VAR 0 2
31129: ARRAY
31130: PUSH
31131: LD_VAR 0 3
31135: ARRAY
31136: DIFF
31137: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
31138: LD_ADDR_EXP 36
31142: PUSH
31143: LD_EXP 36
31147: PPUSH
31148: LD_VAR 0 2
31152: PUSH
31153: LD_EXP 36
31157: PUSH
31158: LD_VAR 0 2
31162: ARRAY
31163: PUSH
31164: LD_INT 1
31166: PLUS
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PPUSH
31172: LD_VAR 0 5
31176: PPUSH
31177: CALL_OW 1
31181: ST_TO_ADDR
// continue ;
31182: GO 31078
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
31184: LD_EXP 36
31188: PUSH
31189: LD_VAR 0 2
31193: ARRAY
31194: PUSH
31195: LD_VAR 0 3
31199: ARRAY
31200: PPUSH
31201: CALL_OW 459
31205: NOT
31206: PUSH
31207: LD_EXP 36
31211: PUSH
31212: LD_VAR 0 2
31216: ARRAY
31217: PUSH
31218: LD_VAR 0 3
31222: ARRAY
31223: PPUSH
31224: CALL_OW 255
31228: PPUSH
31229: LD_EXP 35
31233: PUSH
31234: LD_VAR 0 2
31238: ARRAY
31239: PUSH
31240: LD_VAR 0 3
31244: ARRAY
31245: PUSH
31246: LD_INT 1
31248: ARRAY
31249: PPUSH
31250: LD_EXP 35
31254: PUSH
31255: LD_VAR 0 2
31259: ARRAY
31260: PUSH
31261: LD_VAR 0 3
31265: ARRAY
31266: PUSH
31267: LD_INT 2
31269: ARRAY
31270: PPUSH
31271: LD_INT 12
31273: PPUSH
31274: CALL 1651 0 4
31278: PUSH
31279: LD_INT 4
31281: ARRAY
31282: PUSH
31283: LD_INT 0
31285: EQUAL
31286: AND
31287: IFFALSE 31479
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
31289: LD_EXP 36
31293: PUSH
31294: LD_VAR 0 2
31298: ARRAY
31299: PUSH
31300: LD_VAR 0 3
31304: ARRAY
31305: PPUSH
31306: CALL_OW 310
31310: IFFALSE 31333
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
31312: LD_EXP 36
31316: PUSH
31317: LD_VAR 0 2
31321: ARRAY
31322: PUSH
31323: LD_VAR 0 3
31327: ARRAY
31328: PPUSH
31329: CALL_OW 122
// wait ( 3 ) ;
31333: LD_INT 3
31335: PPUSH
31336: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
31340: LD_EXP 35
31344: PUSH
31345: LD_VAR 0 2
31349: ARRAY
31350: PUSH
31351: LD_VAR 0 3
31355: ARRAY
31356: PUSH
31357: LD_INT 1
31359: ARRAY
31360: PPUSH
31361: LD_EXP 35
31365: PUSH
31366: LD_VAR 0 2
31370: ARRAY
31371: PUSH
31372: LD_VAR 0 3
31376: ARRAY
31377: PUSH
31378: LD_INT 2
31380: ARRAY
31381: PPUSH
31382: CALL_OW 458
31386: NOT
31387: PUSH
31388: LD_EXP 36
31392: PUSH
31393: LD_VAR 0 2
31397: ARRAY
31398: PUSH
31399: LD_VAR 0 3
31403: ARRAY
31404: PPUSH
31405: CALL_OW 314
31409: NOT
31410: AND
31411: IFFALSE 31479
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
31413: LD_EXP 36
31417: PUSH
31418: LD_VAR 0 2
31422: ARRAY
31423: PUSH
31424: LD_VAR 0 3
31428: ARRAY
31429: PPUSH
31430: LD_EXP 35
31434: PUSH
31435: LD_VAR 0 2
31439: ARRAY
31440: PUSH
31441: LD_VAR 0 3
31445: ARRAY
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: LD_EXP 35
31455: PUSH
31456: LD_VAR 0 2
31460: ARRAY
31461: PUSH
31462: LD_VAR 0 3
31466: ARRAY
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: PPUSH
31472: LD_INT 0
31474: PPUSH
31475: CALL_OW 133
// end ; end ;
31479: GO 31078
31481: POP
31482: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
31483: LD_ADDR_VAR 0 5
31487: PUSH
31488: LD_EXP 25
31492: PUSH
31493: LD_VAR 0 2
31497: ARRAY
31498: PPUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 30
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 30
31514: PUSH
31515: LD_INT 5
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: PPUSH
31527: CALL_OW 72
31531: ST_TO_ADDR
// if not tmp then
31532: LD_VAR 0 5
31536: NOT
31537: IFFALSE 31541
// continue ;
31539: GO 30905
// list := [ ] ;
31541: LD_ADDR_VAR 0 6
31545: PUSH
31546: EMPTY
31547: ST_TO_ADDR
// for j in tmp do
31548: LD_ADDR_VAR 0 3
31552: PUSH
31553: LD_VAR 0 5
31557: PUSH
31558: FOR_IN
31559: IFFALSE 31628
// begin for k in UnitsInside ( j ) do
31561: LD_ADDR_VAR 0 4
31565: PUSH
31566: LD_VAR 0 3
31570: PPUSH
31571: CALL_OW 313
31575: PUSH
31576: FOR_IN
31577: IFFALSE 31624
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
31579: LD_VAR 0 4
31583: PPUSH
31584: CALL_OW 257
31588: PUSH
31589: LD_INT 1
31591: EQUAL
31592: PUSH
31593: LD_VAR 0 4
31597: PPUSH
31598: CALL_OW 459
31602: NOT
31603: AND
31604: IFFALSE 31622
// list := list ^ k ;
31606: LD_ADDR_VAR 0 6
31610: PUSH
31611: LD_VAR 0 6
31615: PUSH
31616: LD_VAR 0 4
31620: ADD
31621: ST_TO_ADDR
31622: GO 31576
31624: POP
31625: POP
// end ;
31626: GO 31558
31628: POP
31629: POP
// list := list diff mc_miners [ i ] ;
31630: LD_ADDR_VAR 0 6
31634: PUSH
31635: LD_VAR 0 6
31639: PUSH
31640: LD_EXP 36
31644: PUSH
31645: LD_VAR 0 2
31649: ARRAY
31650: DIFF
31651: ST_TO_ADDR
// if not list then
31652: LD_VAR 0 6
31656: NOT
31657: IFFALSE 31661
// continue ;
31659: GO 30905
// k := mc_mines [ i ] - mc_miners [ i ] ;
31661: LD_ADDR_VAR 0 4
31665: PUSH
31666: LD_EXP 35
31670: PUSH
31671: LD_VAR 0 2
31675: ARRAY
31676: PUSH
31677: LD_EXP 36
31681: PUSH
31682: LD_VAR 0 2
31686: ARRAY
31687: MINUS
31688: ST_TO_ADDR
// if k > list then
31689: LD_VAR 0 4
31693: PUSH
31694: LD_VAR 0 6
31698: GREATER
31699: IFFALSE 31711
// k := list ;
31701: LD_ADDR_VAR 0 4
31705: PUSH
31706: LD_VAR 0 6
31710: ST_TO_ADDR
// for j = 1 to k do
31711: LD_ADDR_VAR 0 3
31715: PUSH
31716: DOUBLE
31717: LD_INT 1
31719: DEC
31720: ST_TO_ADDR
31721: LD_VAR 0 4
31725: PUSH
31726: FOR_TO
31727: IFFALSE 31781
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
31729: LD_ADDR_EXP 36
31733: PUSH
31734: LD_EXP 36
31738: PPUSH
31739: LD_VAR 0 2
31743: PUSH
31744: LD_EXP 36
31748: PUSH
31749: LD_VAR 0 2
31753: ARRAY
31754: PUSH
31755: LD_INT 1
31757: PLUS
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PPUSH
31763: LD_VAR 0 6
31767: PUSH
31768: LD_VAR 0 3
31772: ARRAY
31773: PPUSH
31774: CALL 1242 0 3
31778: ST_TO_ADDR
31779: GO 31726
31781: POP
31782: POP
// end ;
31783: GO 30905
31785: POP
31786: POP
// end ;
31787: LD_VAR 0 1
31791: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
31792: LD_INT 0
31794: PPUSH
31795: PPUSH
31796: PPUSH
31797: PPUSH
31798: PPUSH
// if not mc_bases then
31799: LD_EXP 25
31803: NOT
31804: IFFALSE 31808
// exit ;
31806: GO 32584
// for i = 1 to mc_bases do
31808: LD_ADDR_VAR 0 2
31812: PUSH
31813: DOUBLE
31814: LD_INT 1
31816: DEC
31817: ST_TO_ADDR
31818: LD_EXP 25
31822: PUSH
31823: FOR_TO
31824: IFFALSE 32582
// begin if not mc_bases [ i ] then
31826: LD_EXP 25
31830: PUSH
31831: LD_VAR 0 2
31835: ARRAY
31836: NOT
31837: IFFALSE 31841
// continue ;
31839: GO 31823
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
31841: LD_EXP 38
31845: PUSH
31846: LD_VAR 0 2
31850: ARRAY
31851: NOT
31852: PUSH
31853: LD_EXP 39
31857: PUSH
31858: LD_VAR 0 2
31862: ARRAY
31863: AND
31864: IFFALSE 31902
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
31866: LD_ADDR_EXP 39
31870: PUSH
31871: LD_EXP 39
31875: PPUSH
31876: LD_VAR 0 2
31880: PPUSH
31881: EMPTY
31882: PPUSH
31883: CALL_OW 1
31887: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
31888: LD_VAR 0 2
31892: PPUSH
31893: LD_INT 107
31895: PPUSH
31896: CALL 27502 0 2
// continue ;
31900: GO 31823
// end ; target := [ ] ;
31902: LD_ADDR_VAR 0 5
31906: PUSH
31907: EMPTY
31908: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
31909: LD_ADDR_VAR 0 3
31913: PUSH
31914: DOUBLE
31915: LD_EXP 38
31919: PUSH
31920: LD_VAR 0 2
31924: ARRAY
31925: INC
31926: ST_TO_ADDR
31927: LD_INT 1
31929: PUSH
31930: FOR_DOWNTO
31931: IFFALSE 32191
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
31933: LD_EXP 38
31937: PUSH
31938: LD_VAR 0 2
31942: ARRAY
31943: PUSH
31944: LD_VAR 0 3
31948: ARRAY
31949: PUSH
31950: LD_INT 2
31952: ARRAY
31953: PPUSH
31954: LD_EXP 38
31958: PUSH
31959: LD_VAR 0 2
31963: ARRAY
31964: PUSH
31965: LD_VAR 0 3
31969: ARRAY
31970: PUSH
31971: LD_INT 3
31973: ARRAY
31974: PPUSH
31975: CALL_OW 488
31979: PUSH
31980: LD_EXP 38
31984: PUSH
31985: LD_VAR 0 2
31989: ARRAY
31990: PUSH
31991: LD_VAR 0 3
31995: ARRAY
31996: PUSH
31997: LD_INT 2
31999: ARRAY
32000: PPUSH
32001: LD_EXP 38
32005: PUSH
32006: LD_VAR 0 2
32010: ARRAY
32011: PUSH
32012: LD_VAR 0 3
32016: ARRAY
32017: PUSH
32018: LD_INT 3
32020: ARRAY
32021: PPUSH
32022: CALL_OW 284
32026: PUSH
32027: LD_INT 0
32029: EQUAL
32030: AND
32031: IFFALSE 32086
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
32033: LD_ADDR_VAR 0 4
32037: PUSH
32038: LD_EXP 38
32042: PUSH
32043: LD_VAR 0 2
32047: ARRAY
32048: PPUSH
32049: LD_VAR 0 3
32053: PPUSH
32054: CALL_OW 3
32058: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
32059: LD_ADDR_EXP 38
32063: PUSH
32064: LD_EXP 38
32068: PPUSH
32069: LD_VAR 0 2
32073: PPUSH
32074: LD_VAR 0 4
32078: PPUSH
32079: CALL_OW 1
32083: ST_TO_ADDR
// continue ;
32084: GO 31930
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
32086: LD_EXP 25
32090: PUSH
32091: LD_VAR 0 2
32095: ARRAY
32096: PUSH
32097: LD_INT 1
32099: ARRAY
32100: PPUSH
32101: CALL_OW 255
32105: PPUSH
32106: LD_EXP 38
32110: PUSH
32111: LD_VAR 0 2
32115: ARRAY
32116: PUSH
32117: LD_VAR 0 3
32121: ARRAY
32122: PUSH
32123: LD_INT 2
32125: ARRAY
32126: PPUSH
32127: LD_EXP 38
32131: PUSH
32132: LD_VAR 0 2
32136: ARRAY
32137: PUSH
32138: LD_VAR 0 3
32142: ARRAY
32143: PUSH
32144: LD_INT 3
32146: ARRAY
32147: PPUSH
32148: LD_INT 20
32150: PPUSH
32151: CALL 1651 0 4
32155: PUSH
32156: LD_INT 4
32158: ARRAY
32159: PUSH
32160: LD_INT 0
32162: EQUAL
32163: IFFALSE 32189
// begin target := mc_crates [ i ] [ j ] ;
32165: LD_ADDR_VAR 0 5
32169: PUSH
32170: LD_EXP 38
32174: PUSH
32175: LD_VAR 0 2
32179: ARRAY
32180: PUSH
32181: LD_VAR 0 3
32185: ARRAY
32186: ST_TO_ADDR
// break ;
32187: GO 32191
// end ; end ;
32189: GO 31930
32191: POP
32192: POP
// if not target then
32193: LD_VAR 0 5
32197: NOT
32198: IFFALSE 32202
// continue ;
32200: GO 31823
// if mc_crates_collector [ i ] < 5 then
32202: LD_EXP 39
32206: PUSH
32207: LD_VAR 0 2
32211: ARRAY
32212: PUSH
32213: LD_INT 5
32215: LESS
32216: IFFALSE 32396
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
32218: LD_ADDR_VAR 0 4
32222: PUSH
32223: LD_EXP 25
32227: PUSH
32228: LD_VAR 0 2
32232: ARRAY
32233: PPUSH
32234: LD_INT 2
32236: PUSH
32237: LD_INT 25
32239: PUSH
32240: LD_INT 2
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 25
32249: PUSH
32250: LD_INT 16
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 24
32264: PUSH
32265: LD_INT 750
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PPUSH
32276: CALL_OW 72
32280: ST_TO_ADDR
// if not tmp then
32281: LD_VAR 0 4
32285: NOT
32286: IFFALSE 32290
// continue ;
32288: GO 31823
// for j in tmp do
32290: LD_ADDR_VAR 0 3
32294: PUSH
32295: LD_VAR 0 4
32299: PUSH
32300: FOR_IN
32301: IFFALSE 32394
// if GetTag ( j ) = 0 then
32303: LD_VAR 0 3
32307: PPUSH
32308: CALL_OW 110
32312: PUSH
32313: LD_INT 0
32315: EQUAL
32316: IFFALSE 32392
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
32318: LD_ADDR_EXP 39
32322: PUSH
32323: LD_EXP 39
32327: PPUSH
32328: LD_VAR 0 2
32332: PUSH
32333: LD_EXP 39
32337: PUSH
32338: LD_VAR 0 2
32342: ARRAY
32343: PUSH
32344: LD_INT 1
32346: PLUS
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PPUSH
32352: LD_VAR 0 3
32356: PPUSH
32357: CALL 1242 0 3
32361: ST_TO_ADDR
// SetTag ( j , 107 ) ;
32362: LD_VAR 0 3
32366: PPUSH
32367: LD_INT 107
32369: PPUSH
32370: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
32374: LD_EXP 39
32378: PUSH
32379: LD_VAR 0 2
32383: ARRAY
32384: PUSH
32385: LD_INT 5
32387: GREATER
32388: IFFALSE 32392
// break ;
32390: GO 32394
// end ;
32392: GO 32300
32394: POP
32395: POP
// end ; if mc_crates_collector [ i ] and target then
32396: LD_EXP 39
32400: PUSH
32401: LD_VAR 0 2
32405: ARRAY
32406: PUSH
32407: LD_VAR 0 5
32411: AND
32412: IFFALSE 32580
// begin if mc_crates_collector [ i ] < target [ 1 ] then
32414: LD_EXP 39
32418: PUSH
32419: LD_VAR 0 2
32423: ARRAY
32424: PUSH
32425: LD_VAR 0 5
32429: PUSH
32430: LD_INT 1
32432: ARRAY
32433: LESS
32434: IFFALSE 32454
// tmp := mc_crates_collector [ i ] else
32436: LD_ADDR_VAR 0 4
32440: PUSH
32441: LD_EXP 39
32445: PUSH
32446: LD_VAR 0 2
32450: ARRAY
32451: ST_TO_ADDR
32452: GO 32468
// tmp := target [ 1 ] ;
32454: LD_ADDR_VAR 0 4
32458: PUSH
32459: LD_VAR 0 5
32463: PUSH
32464: LD_INT 1
32466: ARRAY
32467: ST_TO_ADDR
// for j = 1 to tmp do
32468: LD_ADDR_VAR 0 3
32472: PUSH
32473: DOUBLE
32474: LD_INT 1
32476: DEC
32477: ST_TO_ADDR
32478: LD_VAR 0 4
32482: PUSH
32483: FOR_TO
32484: IFFALSE 32578
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
32486: LD_EXP 39
32490: PUSH
32491: LD_VAR 0 2
32495: ARRAY
32496: PUSH
32497: LD_VAR 0 3
32501: ARRAY
32502: PPUSH
32503: CALL_OW 310
32507: IFFALSE 32530
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
32509: LD_EXP 39
32513: PUSH
32514: LD_VAR 0 2
32518: ARRAY
32519: PUSH
32520: LD_VAR 0 3
32524: ARRAY
32525: PPUSH
32526: CALL_OW 122
// wait ( 3 ) ;
32530: LD_INT 3
32532: PPUSH
32533: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
32537: LD_EXP 39
32541: PUSH
32542: LD_VAR 0 2
32546: ARRAY
32547: PUSH
32548: LD_VAR 0 3
32552: ARRAY
32553: PPUSH
32554: LD_VAR 0 5
32558: PUSH
32559: LD_INT 2
32561: ARRAY
32562: PPUSH
32563: LD_VAR 0 5
32567: PUSH
32568: LD_INT 3
32570: ARRAY
32571: PPUSH
32572: CALL_OW 117
// end ;
32576: GO 32483
32578: POP
32579: POP
// end ; end ;
32580: GO 31823
32582: POP
32583: POP
// end ;
32584: LD_VAR 0 1
32588: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
32589: LD_INT 0
32591: PPUSH
32592: PPUSH
32593: PPUSH
32594: PPUSH
// if not mc_bases then
32595: LD_EXP 25
32599: NOT
32600: IFFALSE 32604
// exit ;
32602: GO 32753
// for i = 1 to mc_bases do
32604: LD_ADDR_VAR 0 2
32608: PUSH
32609: DOUBLE
32610: LD_INT 1
32612: DEC
32613: ST_TO_ADDR
32614: LD_EXP 25
32618: PUSH
32619: FOR_TO
32620: IFFALSE 32751
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
32622: LD_ADDR_VAR 0 4
32626: PUSH
32627: LD_EXP 40
32631: PUSH
32632: LD_VAR 0 2
32636: ARRAY
32637: PPUSH
32638: LD_INT 33
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PPUSH
32648: CALL_OW 72
32652: ST_TO_ADDR
// if tmp then
32653: LD_VAR 0 4
32657: IFFALSE 32749
// for j in tmp do
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_VAR 0 4
32668: PUSH
32669: FOR_IN
32670: IFFALSE 32747
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32672: LD_VAR 0 3
32676: PPUSH
32677: CALL_OW 312
32681: NOT
32682: PUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: CALL_OW 256
32692: PUSH
32693: LD_INT 250
32695: GREATEREQUAL
32696: AND
32697: IFFALSE 32710
// Connect ( j ) else
32699: LD_VAR 0 3
32703: PPUSH
32704: CALL 3640 0 1
32708: GO 32745
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32710: LD_VAR 0 3
32714: PPUSH
32715: CALL_OW 256
32719: PUSH
32720: LD_INT 250
32722: LESS
32723: PUSH
32724: LD_VAR 0 3
32728: PPUSH
32729: CALL_OW 312
32733: AND
32734: IFFALSE 32745
// ComUnlink ( j ) ;
32736: LD_VAR 0 3
32740: PPUSH
32741: CALL_OW 136
32745: GO 32669
32747: POP
32748: POP
// end ;
32749: GO 32619
32751: POP
32752: POP
// end ;
32753: LD_VAR 0 1
32757: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32758: LD_INT 0
32760: PPUSH
32761: PPUSH
32762: PPUSH
32763: PPUSH
32764: PPUSH
// if not mc_bases then
32765: LD_EXP 25
32769: NOT
32770: IFFALSE 32774
// exit ;
32772: GO 33141
// for i = 1 to mc_bases do
32774: LD_ADDR_VAR 0 2
32778: PUSH
32779: DOUBLE
32780: LD_INT 1
32782: DEC
32783: ST_TO_ADDR
32784: LD_EXP 25
32788: PUSH
32789: FOR_TO
32790: IFFALSE 33139
// begin if not mc_produce [ i ] then
32792: LD_EXP 42
32796: PUSH
32797: LD_VAR 0 2
32801: ARRAY
32802: NOT
32803: IFFALSE 32807
// continue ;
32805: GO 32789
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32807: LD_ADDR_VAR 0 5
32811: PUSH
32812: LD_EXP 25
32816: PUSH
32817: LD_VAR 0 2
32821: ARRAY
32822: PPUSH
32823: LD_INT 30
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PPUSH
32833: CALL_OW 72
32837: ST_TO_ADDR
// if not fac then
32838: LD_VAR 0 5
32842: NOT
32843: IFFALSE 32847
// continue ;
32845: GO 32789
// for j in fac do
32847: LD_ADDR_VAR 0 3
32851: PUSH
32852: LD_VAR 0 5
32856: PUSH
32857: FOR_IN
32858: IFFALSE 33135
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
32860: LD_VAR 0 3
32864: PPUSH
32865: CALL_OW 461
32869: PUSH
32870: LD_INT 2
32872: NONEQUAL
32873: PUSH
32874: LD_VAR 0 3
32878: PPUSH
32879: LD_INT 20
32881: PPUSH
32882: CALL 3331 0 2
32886: PUSH
32887: LD_INT 4
32889: ARRAY
32890: OR
32891: PUSH
32892: LD_VAR 0 3
32896: PPUSH
32897: CALL_OW 313
32901: PUSH
32902: LD_INT 0
32904: EQUAL
32905: OR
32906: IFFALSE 32910
// continue ;
32908: GO 32857
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
32910: LD_VAR 0 3
32914: PPUSH
32915: LD_EXP 42
32919: PUSH
32920: LD_VAR 0 2
32924: ARRAY
32925: PUSH
32926: LD_INT 1
32928: ARRAY
32929: PUSH
32930: LD_INT 1
32932: ARRAY
32933: PPUSH
32934: LD_EXP 42
32938: PUSH
32939: LD_VAR 0 2
32943: ARRAY
32944: PUSH
32945: LD_INT 1
32947: ARRAY
32948: PUSH
32949: LD_INT 2
32951: ARRAY
32952: PPUSH
32953: LD_EXP 42
32957: PUSH
32958: LD_VAR 0 2
32962: ARRAY
32963: PUSH
32964: LD_INT 1
32966: ARRAY
32967: PUSH
32968: LD_INT 3
32970: ARRAY
32971: PPUSH
32972: LD_EXP 42
32976: PUSH
32977: LD_VAR 0 2
32981: ARRAY
32982: PUSH
32983: LD_INT 1
32985: ARRAY
32986: PUSH
32987: LD_INT 4
32989: ARRAY
32990: PPUSH
32991: CALL_OW 448
32995: IFFALSE 33133
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32997: LD_VAR 0 3
33001: PPUSH
33002: LD_EXP 42
33006: PUSH
33007: LD_VAR 0 2
33011: ARRAY
33012: PUSH
33013: LD_INT 1
33015: ARRAY
33016: PUSH
33017: LD_INT 1
33019: ARRAY
33020: PPUSH
33021: LD_EXP 42
33025: PUSH
33026: LD_VAR 0 2
33030: ARRAY
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PUSH
33036: LD_INT 2
33038: ARRAY
33039: PPUSH
33040: LD_EXP 42
33044: PUSH
33045: LD_VAR 0 2
33049: ARRAY
33050: PUSH
33051: LD_INT 1
33053: ARRAY
33054: PUSH
33055: LD_INT 3
33057: ARRAY
33058: PPUSH
33059: LD_EXP 42
33063: PUSH
33064: LD_VAR 0 2
33068: ARRAY
33069: PUSH
33070: LD_INT 1
33072: ARRAY
33073: PUSH
33074: LD_INT 4
33076: ARRAY
33077: PPUSH
33078: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
33082: LD_ADDR_VAR 0 4
33086: PUSH
33087: LD_EXP 42
33091: PUSH
33092: LD_VAR 0 2
33096: ARRAY
33097: PPUSH
33098: LD_INT 1
33100: PPUSH
33101: CALL_OW 3
33105: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
33106: LD_ADDR_EXP 42
33110: PUSH
33111: LD_EXP 42
33115: PPUSH
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_VAR 0 4
33125: PPUSH
33126: CALL_OW 1
33130: ST_TO_ADDR
// break ;
33131: GO 33135
// end ; end ;
33133: GO 32857
33135: POP
33136: POP
// end ;
33137: GO 32789
33139: POP
33140: POP
// end ;
33141: LD_VAR 0 1
33145: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
33146: LD_INT 0
33148: PPUSH
33149: PPUSH
33150: PPUSH
33151: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] then
33152: LD_VAR 0 1
33156: NOT
33157: PUSH
33158: LD_VAR 0 2
33162: NOT
33163: OR
33164: PUSH
33165: LD_VAR 0 3
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 2
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 4
33181: PUSH
33182: LD_INT 5
33184: PUSH
33185: LD_INT 8
33187: PUSH
33188: LD_INT 9
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: IN
33200: NOT
33201: OR
33202: IFFALSE 33206
// exit ;
33204: GO 33618
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
33206: LD_ADDR_VAR 0 1
33210: PUSH
33211: LD_VAR 0 1
33215: PPUSH
33216: LD_INT 21
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 24
33228: PUSH
33229: LD_INT 250
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PPUSH
33240: CALL_OW 72
33244: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
33245: LD_VAR 0 3
33249: PUSH
33250: LD_INT 5
33252: PUSH
33253: LD_INT 8
33255: PUSH
33256: LD_INT 9
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: LIST
33263: IN
33264: IFFALSE 33274
// class := 1 ;
33266: LD_ADDR_VAR 0 3
33270: PUSH
33271: LD_INT 1
33273: ST_TO_ADDR
// case class of 1 :
33274: LD_VAR 0 3
33278: PUSH
33279: LD_INT 1
33281: DOUBLE
33282: EQUAL
33283: IFTRUE 33287
33285: GO 33333
33287: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
33288: LD_ADDR_VAR 0 7
33292: PUSH
33293: LD_VAR 0 1
33297: PPUSH
33298: LD_INT 2
33300: PUSH
33301: LD_INT 30
33303: PUSH
33304: LD_INT 4
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 30
33313: PUSH
33314: LD_INT 5
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: PPUSH
33326: CALL_OW 72
33330: ST_TO_ADDR
33331: GO 33507
33333: LD_INT 2
33335: DOUBLE
33336: EQUAL
33337: IFTRUE 33341
33339: GO 33387
33341: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
33342: LD_ADDR_VAR 0 7
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 30
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 30
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: LIST
33379: PPUSH
33380: CALL_OW 72
33384: ST_TO_ADDR
33385: GO 33507
33387: LD_INT 3
33389: DOUBLE
33390: EQUAL
33391: IFTRUE 33395
33393: GO 33441
33395: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
33396: LD_ADDR_VAR 0 7
33400: PUSH
33401: LD_VAR 0 1
33405: PPUSH
33406: LD_INT 2
33408: PUSH
33409: LD_INT 30
33411: PUSH
33412: LD_INT 2
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 30
33421: PUSH
33422: LD_INT 3
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: PPUSH
33434: CALL_OW 72
33438: ST_TO_ADDR
33439: GO 33507
33441: LD_INT 4
33443: DOUBLE
33444: EQUAL
33445: IFTRUE 33449
33447: GO 33506
33449: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
33450: LD_ADDR_VAR 0 7
33454: PUSH
33455: LD_VAR 0 1
33459: PPUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 30
33465: PUSH
33466: LD_INT 6
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 30
33475: PUSH
33476: LD_INT 7
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 30
33485: PUSH
33486: LD_INT 8
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: PPUSH
33499: CALL_OW 72
33503: ST_TO_ADDR
33504: GO 33507
33506: POP
// if not tmp then
33507: LD_VAR 0 7
33511: NOT
33512: IFFALSE 33516
// exit ;
33514: GO 33618
// for i in tmp do
33516: LD_ADDR_VAR 0 5
33520: PUSH
33521: LD_VAR 0 7
33525: PUSH
33526: FOR_IN
33527: IFFALSE 33596
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
33529: LD_VAR 0 5
33533: PPUSH
33534: CALL_OW 313
33538: PUSH
33539: LD_INT 6
33541: LESS
33542: PUSH
33543: LD_VAR 0 5
33547: PPUSH
33548: CALL_OW 266
33552: PUSH
33553: LD_INT 31
33555: PUSH
33556: LD_INT 32
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: IN
33563: NOT
33564: AND
33565: PUSH
33566: LD_VAR 0 5
33570: PPUSH
33571: CALL_OW 313
33575: PUSH
33576: LD_INT 0
33578: EQUAL
33579: OR
33580: IFFALSE 33594
// begin j := i ;
33582: LD_ADDR_VAR 0 6
33586: PUSH
33587: LD_VAR 0 5
33591: ST_TO_ADDR
// break ;
33592: GO 33596
// end ; end ;
33594: GO 33526
33596: POP
33597: POP
// if j then
33598: LD_VAR 0 6
33602: IFFALSE 33618
// ComEnterUnit ( unit , j ) ;
33604: LD_VAR 0 2
33608: PPUSH
33609: LD_VAR 0 6
33613: PPUSH
33614: CALL_OW 120
// end ;
33618: LD_VAR 0 4
33622: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
33623: LD_INT 0
33625: PPUSH
33626: PPUSH
33627: PPUSH
33628: PPUSH
// if not mc_bases then
33629: LD_EXP 25
33633: NOT
33634: IFFALSE 33638
// exit ;
33636: GO 33819
// for i = 1 to mc_bases do
33638: LD_ADDR_VAR 0 2
33642: PUSH
33643: DOUBLE
33644: LD_INT 1
33646: DEC
33647: ST_TO_ADDR
33648: LD_EXP 25
33652: PUSH
33653: FOR_TO
33654: IFFALSE 33817
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
33656: LD_ADDR_VAR 0 4
33660: PUSH
33661: LD_EXP 25
33665: PUSH
33666: LD_VAR 0 2
33670: ARRAY
33671: PPUSH
33672: LD_INT 21
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PPUSH
33682: CALL_OW 72
33686: ST_TO_ADDR
// if not tmp then
33687: LD_VAR 0 4
33691: NOT
33692: IFFALSE 33698
// exit ;
33694: POP
33695: POP
33696: GO 33819
// for j in tmp do
33698: LD_ADDR_VAR 0 3
33702: PUSH
33703: LD_VAR 0 4
33707: PUSH
33708: FOR_IN
33709: IFFALSE 33813
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
33711: LD_VAR 0 3
33715: PPUSH
33716: CALL_OW 110
33720: NOT
33721: PUSH
33722: LD_VAR 0 3
33726: PPUSH
33727: CALL_OW 314
33731: NOT
33732: AND
33733: PUSH
33734: LD_VAR 0 3
33738: PPUSH
33739: CALL_OW 310
33743: NOT
33744: AND
33745: PUSH
33746: LD_EXP 28
33750: PUSH
33751: LD_VAR 0 2
33755: ARRAY
33756: PUSH
33757: LD_INT 1
33759: ARRAY
33760: NOT
33761: AND
33762: PUSH
33763: LD_EXP 28
33767: PUSH
33768: LD_VAR 0 2
33772: ARRAY
33773: PUSH
33774: LD_INT 2
33776: ARRAY
33777: NOT
33778: AND
33779: IFFALSE 33811
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
33781: LD_EXP 25
33785: PUSH
33786: LD_VAR 0 2
33790: ARRAY
33791: PPUSH
33792: LD_VAR 0 3
33796: PPUSH
33797: LD_VAR 0 3
33801: PPUSH
33802: CALL_OW 257
33806: PPUSH
33807: CALL 33146 0 3
// end ;
33811: GO 33708
33813: POP
33814: POP
// end ;
33815: GO 33653
33817: POP
33818: POP
// end ;
33819: LD_VAR 0 1
33823: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
33824: LD_INT 0
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
// if not mc_bases [ base ] then
33833: LD_EXP 25
33837: PUSH
33838: LD_VAR 0 1
33842: ARRAY
33843: NOT
33844: IFFALSE 33848
// exit ;
33846: GO 34116
// tmp := [ ] ;
33848: LD_ADDR_VAR 0 7
33852: PUSH
33853: EMPTY
33854: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
33855: LD_ADDR_VAR 0 8
33859: PUSH
33860: LD_VAR 0 3
33864: PPUSH
33865: LD_INT 0
33867: PPUSH
33868: CALL_OW 517
33872: ST_TO_ADDR
// if not list then
33873: LD_VAR 0 8
33877: NOT
33878: IFFALSE 33882
// exit ;
33880: GO 34116
// for i = 1 to amount do
33882: LD_ADDR_VAR 0 5
33886: PUSH
33887: DOUBLE
33888: LD_INT 1
33890: DEC
33891: ST_TO_ADDR
33892: LD_VAR 0 2
33896: PUSH
33897: FOR_TO
33898: IFFALSE 34064
// begin c := rand ( 1 , list [ 1 ] - i ) ;
33900: LD_ADDR_VAR 0 6
33904: PUSH
33905: LD_INT 1
33907: PPUSH
33908: LD_VAR 0 8
33912: PUSH
33913: LD_INT 1
33915: ARRAY
33916: PUSH
33917: LD_VAR 0 5
33921: MINUS
33922: PPUSH
33923: CALL_OW 12
33927: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
33928: LD_ADDR_VAR 0 7
33932: PUSH
33933: LD_VAR 0 7
33937: PPUSH
33938: LD_VAR 0 5
33942: PPUSH
33943: LD_VAR 0 8
33947: PUSH
33948: LD_INT 1
33950: ARRAY
33951: PUSH
33952: LD_VAR 0 6
33956: ARRAY
33957: PUSH
33958: LD_VAR 0 8
33962: PUSH
33963: LD_INT 2
33965: ARRAY
33966: PUSH
33967: LD_VAR 0 6
33971: ARRAY
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PPUSH
33977: CALL_OW 1
33981: ST_TO_ADDR
// for j = 1 to 2 do
33982: LD_ADDR_VAR 0 10
33986: PUSH
33987: DOUBLE
33988: LD_INT 1
33990: DEC
33991: ST_TO_ADDR
33992: LD_INT 2
33994: PUSH
33995: FOR_TO
33996: IFFALSE 34051
// begin x := Delete ( list [ j ] , c ) ;
33998: LD_ADDR_VAR 0 9
34002: PUSH
34003: LD_VAR 0 8
34007: PUSH
34008: LD_VAR 0 10
34012: ARRAY
34013: PPUSH
34014: LD_VAR 0 6
34018: PPUSH
34019: CALL_OW 3
34023: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
34024: LD_ADDR_VAR 0 8
34028: PUSH
34029: LD_VAR 0 8
34033: PPUSH
34034: LD_VAR 0 10
34038: PPUSH
34039: LD_VAR 0 9
34043: PPUSH
34044: CALL_OW 1
34048: ST_TO_ADDR
// end ;
34049: GO 33995
34051: POP
34052: POP
// if not list then
34053: LD_VAR 0 8
34057: NOT
34058: IFFALSE 34062
// break ;
34060: GO 34064
// end ;
34062: GO 33897
34064: POP
34065: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
34066: LD_ADDR_EXP 35
34070: PUSH
34071: LD_EXP 35
34075: PPUSH
34076: LD_VAR 0 1
34080: PPUSH
34081: LD_VAR 0 7
34085: PPUSH
34086: CALL_OW 1
34090: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
34091: LD_ADDR_EXP 37
34095: PUSH
34096: LD_EXP 37
34100: PPUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: LD_VAR 0 3
34110: PPUSH
34111: CALL_OW 1
34115: ST_TO_ADDR
// end ;
34116: LD_VAR 0 4
34120: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
34121: LD_INT 0
34123: PPUSH
// if not mc_bases [ base ] then
34124: LD_EXP 25
34128: PUSH
34129: LD_VAR 0 1
34133: ARRAY
34134: NOT
34135: IFFALSE 34139
// exit ;
34137: GO 34164
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
34139: LD_ADDR_EXP 42
34143: PUSH
34144: LD_EXP 42
34148: PPUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: LD_VAR 0 2
34158: PPUSH
34159: CALL_OW 1
34163: ST_TO_ADDR
// end ;
34164: LD_VAR 0 3
34168: RET
// export function MC_PrepareAttack ( base , group , enemy , conditons ) ; var i , j , tmp ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
// if not mc_bases [ base ] then
34175: LD_EXP 25
34179: PUSH
34180: LD_VAR 0 1
34184: ARRAY
34185: NOT
34186: IFFALSE 34190
// exit ;
34188: GO 34190
// end ;
34190: LD_VAR 0 5
34194: RET
// export function MC_GetMinesField ( base ) ; begin
34195: LD_INT 0
34197: PPUSH
// result := mc_mines [ base ] ;
34198: LD_ADDR_VAR 0 2
34202: PUSH
34203: LD_EXP 35
34207: PUSH
34208: LD_VAR 0 1
34212: ARRAY
34213: ST_TO_ADDR
// end ; end_of_file
34214: LD_VAR 0 2
34218: RET
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
34219: LD_INT 0
34221: PPUSH
34222: PPUSH
34223: PPUSH
34224: PPUSH
34225: PPUSH
// begin if un in FilterAllUnits ( [ f_type , unit_building ] ) then
34226: LD_VAR 0 1
34230: PUSH
34231: LD_INT 21
34233: PUSH
34234: LD_INT 3
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PPUSH
34241: CALL_OW 69
34245: IN
34246: IFFALSE 34762
// begin if not mc_bases then
34248: LD_EXP 25
34252: NOT
34253: IFFALSE 34257
// exit ;
34255: GO 34762
// pos := mc_build_list [ i ] + 1 ;
34257: LD_ADDR_VAR 0 5
34261: PUSH
34262: LD_EXP 30
34266: PUSH
34267: LD_VAR 0 2
34271: ARRAY
34272: PUSH
34273: LD_INT 1
34275: PLUS
34276: ST_TO_ADDR
// btype := GetBType ( un ) ;
34277: LD_ADDR_VAR 0 4
34281: PUSH
34282: LD_VAR 0 1
34286: PPUSH
34287: CALL_OW 266
34291: ST_TO_ADDR
// if btype = b_warehouse then
34292: LD_VAR 0 4
34296: PUSH
34297: LD_INT 1
34299: EQUAL
34300: IFFALSE 34318
// begin btype := b_depot ;
34302: LD_ADDR_VAR 0 4
34306: PUSH
34307: LD_INT 0
34309: ST_TO_ADDR
// pos := 1 ;
34310: LD_ADDR_VAR 0 5
34314: PUSH
34315: LD_INT 1
34317: ST_TO_ADDR
// end ; if btype = b_factory then
34318: LD_VAR 0 4
34322: PUSH
34323: LD_INT 3
34325: EQUAL
34326: IFFALSE 34344
// begin btype := b_workshop ;
34328: LD_ADDR_VAR 0 4
34332: PUSH
34333: LD_INT 2
34335: ST_TO_ADDR
// pos := 1 ;
34336: LD_ADDR_VAR 0 5
34340: PUSH
34341: LD_INT 1
34343: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
34344: LD_VAR 0 4
34348: PUSH
34349: LD_INT 7
34351: PUSH
34352: LD_INT 8
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: IN
34359: IFFALSE 34369
// btype := b_lab ;
34361: LD_ADDR_VAR 0 4
34365: PUSH
34366: LD_INT 6
34368: ST_TO_ADDR
// for i = 1 to mc_bases do
34369: LD_ADDR_VAR 0 2
34373: PUSH
34374: DOUBLE
34375: LD_INT 1
34377: DEC
34378: ST_TO_ADDR
34379: LD_EXP 25
34383: PUSH
34384: FOR_TO
34385: IFFALSE 34760
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
34387: LD_VAR 0 1
34391: PUSH
34392: LD_EXP 25
34396: PUSH
34397: LD_VAR 0 2
34401: ARRAY
34402: IN
34403: PUSH
34404: LD_VAR 0 1
34408: PUSH
34409: LD_EXP 32
34413: PUSH
34414: LD_VAR 0 2
34418: ARRAY
34419: IN
34420: OR
34421: IFFALSE 34758
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
34423: LD_ADDR_EXP 30
34427: PUSH
34428: LD_EXP 30
34432: PPUSH
34433: LD_VAR 0 2
34437: PUSH
34438: LD_EXP 30
34442: PUSH
34443: LD_VAR 0 2
34447: ARRAY
34448: PUSH
34449: LD_INT 1
34451: PLUS
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PPUSH
34457: LD_VAR 0 4
34461: PUSH
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL_OW 250
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 251
34481: PUSH
34482: LD_VAR 0 1
34486: PPUSH
34487: CALL_OW 254
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: PPUSH
34498: CALL 1242 0 3
34502: ST_TO_ADDR
// if pos = 1 then
34503: LD_VAR 0 5
34507: PUSH
34508: LD_INT 1
34510: EQUAL
34511: IFFALSE 34626
// begin tmp := mc_build_list [ i ] ;
34513: LD_ADDR_VAR 0 6
34517: PUSH
34518: LD_EXP 30
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
34529: LD_VAR 0 6
34533: PPUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 30
34539: PUSH
34540: LD_INT 0
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 30
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: LIST
34561: PPUSH
34562: CALL_OW 72
34566: IFFALSE 34576
// pos := 2 ;
34568: LD_ADDR_VAR 0 5
34572: PUSH
34573: LD_INT 2
34575: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
34576: LD_ADDR_VAR 0 6
34580: PUSH
34581: LD_VAR 0 6
34585: PPUSH
34586: LD_VAR 0 5
34590: PPUSH
34591: LD_VAR 0 6
34595: PPUSH
34596: CALL 1133 0 3
34600: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
34601: LD_ADDR_EXP 30
34605: PUSH
34606: LD_EXP 30
34610: PPUSH
34611: LD_VAR 0 2
34615: PPUSH
34616: LD_VAR 0 6
34620: PPUSH
34621: CALL_OW 1
34625: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
34626: LD_VAR 0 1
34630: PUSH
34631: LD_EXP 25
34635: PUSH
34636: LD_VAR 0 2
34640: ARRAY
34641: IN
34642: IFFALSE 34691
// begin tmp := mc_bases [ i ] diff un ;
34644: LD_ADDR_VAR 0 6
34648: PUSH
34649: LD_EXP 25
34653: PUSH
34654: LD_VAR 0 2
34658: ARRAY
34659: PUSH
34660: LD_VAR 0 1
34664: DIFF
34665: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
34666: LD_ADDR_EXP 25
34670: PUSH
34671: LD_EXP 25
34675: PPUSH
34676: LD_VAR 0 2
34680: PPUSH
34681: LD_VAR 0 6
34685: PPUSH
34686: CALL_OW 1
34690: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
34691: LD_VAR 0 1
34695: PUSH
34696: LD_EXP 32
34700: PUSH
34701: LD_VAR 0 2
34705: ARRAY
34706: IN
34707: IFFALSE 34756
// begin tmp := mc_construct_list [ i ] diff un ;
34709: LD_ADDR_VAR 0 6
34713: PUSH
34714: LD_EXP 32
34718: PUSH
34719: LD_VAR 0 2
34723: ARRAY
34724: PUSH
34725: LD_VAR 0 1
34729: DIFF
34730: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
34731: LD_ADDR_EXP 32
34735: PUSH
34736: LD_EXP 32
34740: PPUSH
34741: LD_VAR 0 2
34745: PPUSH
34746: LD_VAR 0 6
34750: PPUSH
34751: CALL_OW 1
34755: ST_TO_ADDR
// end ; break ;
34756: GO 34760
// end ;
34758: GO 34384
34760: POP
34761: POP
// end ; end ;
34762: PPOPN 6
34764: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
34765: LD_INT 0
34767: PPUSH
34768: PPUSH
34769: PPUSH
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
// begin if not mc_bases then
34774: LD_EXP 25
34778: NOT
34779: IFFALSE 34783
// exit ;
34781: GO 35024
// btype := GetBType ( building ) ;
34783: LD_ADDR_VAR 0 6
34787: PUSH
34788: LD_VAR 0 1
34792: PPUSH
34793: CALL_OW 266
34797: ST_TO_ADDR
// x := GetX ( building ) ;
34798: LD_ADDR_VAR 0 7
34802: PUSH
34803: LD_VAR 0 1
34807: PPUSH
34808: CALL_OW 250
34812: ST_TO_ADDR
// y := GetY ( building ) ;
34813: LD_ADDR_VAR 0 8
34817: PUSH
34818: LD_VAR 0 1
34822: PPUSH
34823: CALL_OW 251
34827: ST_TO_ADDR
// d := GetDir ( building ) ;
34828: LD_ADDR_VAR 0 9
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 254
34842: ST_TO_ADDR
// for i = 1 to mc_bases do
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: DOUBLE
34849: LD_INT 1
34851: DEC
34852: ST_TO_ADDR
34853: LD_EXP 25
34857: PUSH
34858: FOR_TO
34859: IFFALSE 35022
// begin if not mc_build_list [ i ] then
34861: LD_EXP 30
34865: PUSH
34866: LD_VAR 0 3
34870: ARRAY
34871: NOT
34872: IFFALSE 34876
// continue ;
34874: GO 34858
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
34876: LD_VAR 0 6
34880: PUSH
34881: LD_VAR 0 7
34885: PUSH
34886: LD_VAR 0 8
34890: PUSH
34891: LD_VAR 0 9
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: PPUSH
34902: LD_EXP 30
34906: PUSH
34907: LD_VAR 0 3
34911: ARRAY
34912: PUSH
34913: LD_INT 1
34915: ARRAY
34916: PPUSH
34917: CALL 6383 0 2
34921: IFFALSE 35020
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
34923: LD_ADDR_VAR 0 5
34927: PUSH
34928: LD_EXP 30
34932: PUSH
34933: LD_VAR 0 3
34937: ARRAY
34938: PPUSH
34939: LD_INT 1
34941: PPUSH
34942: CALL_OW 3
34946: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
34947: LD_ADDR_EXP 30
34951: PUSH
34952: LD_EXP 30
34956: PPUSH
34957: LD_VAR 0 3
34961: PPUSH
34962: LD_VAR 0 5
34966: PPUSH
34967: CALL_OW 1
34971: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
34972: LD_ADDR_EXP 32
34976: PUSH
34977: LD_EXP 32
34981: PPUSH
34982: LD_VAR 0 3
34986: PUSH
34987: LD_EXP 32
34991: PUSH
34992: LD_VAR 0 3
34996: ARRAY
34997: PUSH
34998: LD_INT 1
35000: PLUS
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PPUSH
35006: LD_VAR 0 1
35010: PPUSH
35011: CALL 1242 0 3
35015: ST_TO_ADDR
// exit ;
35016: POP
35017: POP
35018: GO 35024
// end ; end ;
35020: GO 34858
35022: POP
35023: POP
// end ;
35024: PPOPN 9
35026: END
// on BuildingComplete ( building ) do var i , j , tmp ;
35027: LD_INT 0
35029: PPUSH
35030: PPUSH
35031: PPUSH
// begin if not mc_bases then
35032: LD_EXP 25
35036: NOT
35037: IFFALSE 35041
// exit ;
35039: GO 35242
// for i = 1 to mc_bases do
35041: LD_ADDR_VAR 0 2
35045: PUSH
35046: DOUBLE
35047: LD_INT 1
35049: DEC
35050: ST_TO_ADDR
35051: LD_EXP 25
35055: PUSH
35056: FOR_TO
35057: IFFALSE 35240
// begin if building in mc_construct_list [ i ] then
35059: LD_VAR 0 1
35063: PUSH
35064: LD_EXP 32
35068: PUSH
35069: LD_VAR 0 2
35073: ARRAY
35074: IN
35075: IFFALSE 35238
// begin tmp := mc_construct_list [ i ] diff building ;
35077: LD_ADDR_VAR 0 4
35081: PUSH
35082: LD_EXP 32
35086: PUSH
35087: LD_VAR 0 2
35091: ARRAY
35092: PUSH
35093: LD_VAR 0 1
35097: DIFF
35098: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
35099: LD_ADDR_EXP 32
35103: PUSH
35104: LD_EXP 32
35108: PPUSH
35109: LD_VAR 0 2
35113: PPUSH
35114: LD_VAR 0 4
35118: PPUSH
35119: CALL_OW 1
35123: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
35124: LD_ADDR_EXP 25
35128: PUSH
35129: LD_EXP 25
35133: PPUSH
35134: LD_VAR 0 2
35138: PUSH
35139: LD_EXP 25
35143: PUSH
35144: LD_VAR 0 2
35148: ARRAY
35149: PUSH
35150: LD_INT 1
35152: PLUS
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PPUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL 1242 0 3
35167: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL_OW 266
35177: PUSH
35178: LD_INT 32
35180: PUSH
35181: LD_INT 33
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: IN
35188: IFFALSE 35234
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
35190: LD_ADDR_EXP 33
35194: PUSH
35195: LD_EXP 33
35199: PPUSH
35200: LD_VAR 0 2
35204: PUSH
35205: LD_EXP 33
35209: PUSH
35210: LD_VAR 0 2
35214: ARRAY
35215: PUSH
35216: LD_INT 1
35218: PLUS
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PPUSH
35224: LD_VAR 0 1
35228: PPUSH
35229: CALL 1242 0 3
35233: ST_TO_ADDR
// exit ;
35234: POP
35235: POP
35236: GO 35242
// end ; end ;
35238: GO 35056
35240: POP
35241: POP
// end ;
35242: PPOPN 4
35244: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
// begin if not mc_bases then
35249: LD_EXP 25
35253: NOT
35254: IFFALSE 35258
// exit ;
35256: GO 35451
// repeat wait ( 0 0$1 ) ;
35258: LD_INT 35
35260: PPUSH
35261: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_VAR 0 3
35274: PPUSH
35275: CALL_OW 284
35279: IFFALSE 35258
// for i = 1 to mc_bases do
35281: LD_ADDR_VAR 0 6
35285: PUSH
35286: DOUBLE
35287: LD_INT 1
35289: DEC
35290: ST_TO_ADDR
35291: LD_EXP 25
35295: PUSH
35296: FOR_TO
35297: IFFALSE 35449
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35299: LD_ADDR_VAR 0 7
35303: PUSH
35304: LD_EXP 25
35308: PUSH
35309: LD_VAR 0 6
35313: ARRAY
35314: PPUSH
35315: LD_INT 2
35317: PUSH
35318: LD_INT 30
35320: PUSH
35321: LD_INT 0
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 30
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: PPUSH
35343: CALL_OW 72
35347: ST_TO_ADDR
// if not depot then
35348: LD_VAR 0 7
35352: NOT
35353: IFFALSE 35357
// continue ;
35355: GO 35296
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
35357: LD_VAR 0 7
35361: PUSH
35362: LD_INT 1
35364: ARRAY
35365: PPUSH
35366: LD_VAR 0 2
35370: PPUSH
35371: LD_VAR 0 3
35375: PPUSH
35376: CALL_OW 297
35380: PUSH
35381: LD_INT 30
35383: LESS
35384: IFFALSE 35447
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
35386: LD_ADDR_EXP 38
35390: PUSH
35391: LD_EXP 38
35395: PPUSH
35396: LD_VAR 0 6
35400: PUSH
35401: LD_EXP 38
35405: PUSH
35406: LD_VAR 0 6
35410: ARRAY
35411: PUSH
35412: LD_INT 1
35414: PLUS
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PPUSH
35420: LD_VAR 0 4
35424: PUSH
35425: LD_VAR 0 2
35429: PUSH
35430: LD_VAR 0 3
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: PPUSH
35440: CALL 1242 0 3
35444: ST_TO_ADDR
// break ;
35445: GO 35449
// end ; end ;
35447: GO 35296
35449: POP
35450: POP
// end ;
35451: PPOPN 7
35453: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
35454: LD_INT 0
35456: PPUSH
35457: PPUSH
// begin if not mc_bases then
35458: LD_EXP 25
35462: NOT
35463: IFFALSE 35467
// exit ;
35465: GO 35555
// for i = 1 to mc_bases do
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: DOUBLE
35473: LD_INT 1
35475: DEC
35476: ST_TO_ADDR
35477: LD_EXP 25
35481: PUSH
35482: FOR_TO
35483: IFFALSE 35553
// begin if factory in mc_bases [ i ] then
35485: LD_VAR 0 2
35489: PUSH
35490: LD_EXP 25
35494: PUSH
35495: LD_VAR 0 3
35499: ARRAY
35500: IN
35501: IFFALSE 35551
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
35503: LD_ADDR_EXP 40
35507: PUSH
35508: LD_EXP 40
35512: PPUSH
35513: LD_VAR 0 3
35517: PUSH
35518: LD_EXP 40
35522: PUSH
35523: LD_VAR 0 3
35527: ARRAY
35528: PUSH
35529: LD_INT 1
35531: PLUS
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL 1242 0 3
35546: ST_TO_ADDR
// exit ;
35547: POP
35548: POP
35549: GO 35555
// end ; end ;
35551: GO 35482
35553: POP
35554: POP
// end ; end_of_file
35555: PPOPN 4
35557: END
// every 0 0$1 trigger game do
35558: LD_EXP 2
35562: IFFALSE 35592
35564: GO 35566
35566: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
35567: LD_INT 7
35569: PUSH
35570: LD_INT 6
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 6
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: PPUSH
35585: LD_INT 1400
35587: PPUSH
35588: CALL 35593 0 2
35592: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
35593: LD_INT 0
35595: PPUSH
35596: PPUSH
35597: PPUSH
// if not areas then
35598: LD_VAR 0 1
35602: NOT
35603: IFFALSE 35607
// exit ;
35605: GO 35719
// repeat wait ( time ) ;
35607: LD_VAR 0 2
35611: PPUSH
35612: CALL_OW 67
// p := rand ( 1 , 90 ) ;
35616: LD_ADDR_VAR 0 5
35620: PUSH
35621: LD_INT 1
35623: PPUSH
35624: LD_INT 90
35626: PPUSH
35627: CALL_OW 12
35631: ST_TO_ADDR
// for i in areas do
35632: LD_ADDR_VAR 0 4
35636: PUSH
35637: LD_VAR 0 1
35641: PUSH
35642: FOR_IN
35643: IFFALSE 35696
// begin if Prob ( p ) then
35645: LD_VAR 0 5
35649: PPUSH
35650: CALL_OW 13
35654: IFFALSE 35694
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
35656: LD_INT 1
35658: PPUSH
35659: LD_INT 5
35661: PPUSH
35662: CALL_OW 12
35666: PPUSH
35667: LD_VAR 0 4
35671: PPUSH
35672: LD_INT 1
35674: PPUSH
35675: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
35679: LD_INT 455
35681: PPUSH
35682: LD_INT 595
35684: PPUSH
35685: CALL_OW 12
35689: PPUSH
35690: CALL_OW 67
// end ; end ;
35694: GO 35642
35696: POP
35697: POP
// time := time + 0 0$3 ;
35698: LD_ADDR_VAR 0 2
35702: PUSH
35703: LD_VAR 0 2
35707: PUSH
35708: LD_INT 105
35710: PLUS
35711: ST_TO_ADDR
// until not game ;
35712: LD_EXP 2
35716: NOT
35717: IFFALSE 35607
// end ;
35719: LD_VAR 0 3
35723: RET
