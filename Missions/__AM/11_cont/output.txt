// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 87 0 0
// InitMacro ;
  12: CALL 16279 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  29: LD_INT 8
  31: PPUSH
  32: LD_INT 1
  34: PPUSH
  35: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  39: LD_INT 4
  41: PPUSH
  42: LD_INT 3
  44: PPUSH
  45: LD_INT 6
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 2
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 7
  59: PPUSH
  60: LD_INT 18
  62: PPUSH
  63: LD_INT 19
  65: PPUSH
  66: CALL 71265 0 9
// PrepareAmerican ;
  70: CALL 518 0 0
// PrepareArabian ;
  74: CALL 2208 0 0
// MC_Start ( ) ;
  78: CALL 17337 0 0
// Action ;
  82: CALL 7361 0 0
// end ;
  86: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , no_selected , selected ; function InitVariables ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// game := true ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_INT 1
 105: ST_TO_ADDR
// mission_prefix := 11_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 11_
 113: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_STRING 10c_
 121: ST_TO_ADDR
// ar_run := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// ar_patrol := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// base_captured := false ;
 138: LD_ADDR_EXP 6
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// us_scout := 0 ;
 146: LD_ADDR_EXP 8
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: LD_INT 0
 170: PUSH
 171: LD_INT 0
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: ST_TO_ADDR
// kamikazed := false ;
 181: LD_ADDR_EXP 11
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// artifact_stolen := false ;
 189: LD_ADDR_EXP 12
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// artifact_get := false ;
 197: LD_ADDR_EXP 13
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 205: LD_ADDR_EXP 15
 209: PUSH
 210: LD_INT 189000
 212: PUSH
 213: LD_INT 168000
 215: PUSH
 216: LD_INT 157500
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: LIST
 223: PUSH
 224: LD_OWVAR 67
 228: ARRAY
 229: ST_TO_ADDR
// powell_warn := false ;
 230: LD_ADDR_EXP 16
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// loses_counter := 0 ;
 238: LD_ADDR_EXP 17
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// artifact_oncargo := false ;
 246: LD_ADDR_EXP 14
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_STRING 10_GensherEscape_1
 261: PPUSH
 262: LD_EXP 1
 266: PPUSH
 267: CALL_OW 30
 271: ST_TO_ADDR
// can_kamikazed := false ;
 272: LD_ADDR_EXP 10
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// end ;
 280: LD_VAR 0 1
 284: RET
// export function CustomInitMacro ; var i ; begin
 285: LD_INT 0
 287: PPUSH
 288: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 289: LD_ADDR_EXP 72
 293: PUSH
 294: LD_INT 20
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 308: LD_ADDR_EXP 73
 312: PUSH
 313: LD_INT 25
 315: PUSH
 316: LD_INT 24
 318: PUSH
 319: LD_INT 26
 321: PUSH
 322: EMPTY
 323: LIST
 324: LIST
 325: LIST
 326: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
 327: LD_INT 1
 329: PPUSH
 330: LD_INT 8
 332: PUSH
 333: LD_INT 10
 335: PUSH
 336: LD_INT 12
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: PPUSH
 350: LD_INT 3
 352: PPUSH
 353: CALL 31911 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
 357: LD_INT 2
 359: PPUSH
 360: LD_INT 6
 362: PUSH
 363: LD_INT 8
 365: PUSH
 366: LD_INT 9
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: LD_OWVAR 67
 378: ARRAY
 379: PPUSH
 380: LD_INT 2
 382: PPUSH
 383: CALL 31911 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
 387: LD_INT 3
 389: PPUSH
 390: LD_INT 6
 392: PUSH
 393: LD_INT 7
 395: PUSH
 396: LD_INT 9
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: LIST
 403: PUSH
 404: LD_OWVAR 67
 408: ARRAY
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 31911 0 3
// for i = 1 to mc_bases do
 417: LD_ADDR_VAR 0 2
 421: PUSH
 422: DOUBLE
 423: LD_INT 1
 425: DEC
 426: ST_TO_ADDR
 427: LD_EXP 48
 431: PUSH
 432: FOR_TO
 433: IFFALSE 457
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 435: LD_VAR 0 2
 439: PPUSH
 440: LD_EXP 42
 444: PUSH
 445: LD_VAR 0 2
 449: ARRAY
 450: PPUSH
 451: CALL 32359 0 2
 455: GO 432
 457: POP
 458: POP
// end ;
 459: LD_VAR 0 1
 463: RET
// function Debuger ; var i ; begin
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// if not debug then
 468: LD_EXP 1
 472: NOT
 473: IFFALSE 477
// exit ;
 475: GO 513
// game_speed := 5 ;
 477: LD_ADDR_OWVAR 65
 481: PUSH
 482: LD_INT 5
 484: ST_TO_ADDR
// uc_side := 1 ;
 485: LD_ADDR_OWVAR 20
 489: PUSH
 490: LD_INT 1
 492: ST_TO_ADDR
// uc_nation := 1 ;
 493: LD_ADDR_OWVAR 21
 497: PUSH
 498: LD_INT 1
 500: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 501: LD_EXP 36
 505: PPUSH
 506: LD_INT 1
 508: PPUSH
 509: CALL_OW 235
// end ; end_of_file
 513: LD_VAR 0 1
 517: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 518: LD_INT 0
 520: PPUSH
 521: PPUSH
 522: PPUSH
 523: PPUSH
 524: PPUSH
 525: PPUSH
 526: PPUSH
 527: PPUSH
// uc_side := 4 ;
 528: LD_ADDR_OWVAR 20
 532: PUSH
 533: LD_INT 4
 535: ST_TO_ADDR
// uc_nation := 1 ;
 536: LD_ADDR_OWVAR 21
 540: PUSH
 541: LD_INT 1
 543: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 544: LD_ADDR_EXP 30
 548: PUSH
 549: LD_STRING Powell
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: LD_STRING 
 557: PPUSH
 558: CALL 37727 0 3
 562: ST_TO_ADDR
// uc_side := 1 ;
 563: LD_ADDR_OWVAR 20
 567: PUSH
 568: LD_INT 1
 570: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 571: LD_ADDR_EXP 21
 575: PUSH
 576: LD_STRING JMM
 578: PPUSH
 579: LD_EXP 1
 583: NOT
 584: PPUSH
 585: LD_EXP 4
 589: PPUSH
 590: CALL 37727 0 3
 594: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 595: LD_EXP 21
 599: PPUSH
 600: CALL_OW 257
 604: PUSH
 605: LD_INT 4
 607: GREATER
 608: IFFALSE 622
// SetClass ( JMM , 1 ) ;
 610: LD_EXP 21
 614: PPUSH
 615: LD_INT 1
 617: PPUSH
 618: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 622: LD_ADDR_EXP 22
 626: PUSH
 627: LD_STRING Lisa
 629: PPUSH
 630: LD_EXP 1
 634: NOT
 635: PPUSH
 636: LD_EXP 4
 640: PPUSH
 641: CALL 37727 0 3
 645: ST_TO_ADDR
// if not Lisa then
 646: LD_EXP 22
 650: NOT
 651: IFFALSE 666
// Lisa := CreateCharacter ( 10_Lisa ) ;
 653: LD_ADDR_EXP 22
 657: PUSH
 658: LD_STRING 10_Lisa
 660: PPUSH
 661: CALL_OW 34
 665: ST_TO_ADDR
// if not Lisa then
 666: LD_EXP 22
 670: NOT
 671: IFFALSE 686
// Lisa := CreateCharacter ( 09_Lisa ) ;
 673: LD_ADDR_EXP 22
 677: PUSH
 678: LD_STRING 09_Lisa
 680: PPUSH
 681: CALL_OW 34
 685: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 686: LD_ADDR_EXP 31
 690: PUSH
 691: LD_STRING Cornel
 693: PPUSH
 694: LD_EXP 1
 698: NOT
 699: PPUSH
 700: LD_EXP 4
 704: PPUSH
 705: CALL 37727 0 3
 709: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Donaldson
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_EXP 4
 728: PPUSH
 729: CALL 37727 0 3
 733: ST_TO_ADDR
// if not Donaldson then
 734: LD_EXP 23
 738: NOT
 739: IFFALSE 754
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 741: LD_ADDR_EXP 23
 745: PUSH
 746: LD_STRING 10_Donaldson
 748: PPUSH
 749: CALL_OW 34
 753: ST_TO_ADDR
// if not Donaldson then
 754: LD_EXP 23
 758: NOT
 759: IFFALSE 774
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 761: LD_ADDR_EXP 23
 765: PUSH
 766: LD_STRING 09_Donaldson
 768: PPUSH
 769: CALL_OW 34
 773: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Bobby
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 4
 792: PPUSH
 793: CALL 37727 0 3
 797: ST_TO_ADDR
// if not Bobby then
 798: LD_EXP 24
 802: NOT
 803: IFFALSE 818
// Bobby := CreateCharacter ( 10_Bobby ) ;
 805: LD_ADDR_EXP 24
 809: PUSH
 810: LD_STRING 10_Bobby
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// if not Bobby then
 818: LD_EXP 24
 822: NOT
 823: IFFALSE 838
// Bobby := CreateCharacter ( 09_Bobby ) ;
 825: LD_ADDR_EXP 24
 829: PUSH
 830: LD_STRING 09_Bobby
 832: PPUSH
 833: CALL_OW 34
 837: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING Cyrus
 845: PPUSH
 846: LD_EXP 1
 850: NOT
 851: PPUSH
 852: LD_EXP 4
 856: PPUSH
 857: CALL 37727 0 3
 861: ST_TO_ADDR
// if not Cyrus then
 862: LD_EXP 25
 866: NOT
 867: IFFALSE 882
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 869: LD_ADDR_EXP 25
 873: PUSH
 874: LD_STRING 10_Cyrus
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// if not Cyrus then
 882: LD_EXP 25
 886: NOT
 887: IFFALSE 902
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 889: LD_ADDR_EXP 25
 893: PUSH
 894: LD_STRING 09_Cyrus
 896: PPUSH
 897: CALL_OW 34
 901: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 902: LD_ADDR_EXP 26
 906: PUSH
 907: LD_STRING Denis
 909: PPUSH
 910: LD_EXP 1
 914: NOT
 915: PPUSH
 916: LD_EXP 4
 920: PPUSH
 921: CALL 37727 0 3
 925: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 926: LD_ADDR_EXP 27
 930: PUSH
 931: LD_STRING Brown
 933: PPUSH
 934: LD_EXP 1
 938: NOT
 939: PPUSH
 940: LD_EXP 4
 944: PPUSH
 945: CALL 37727 0 3
 949: ST_TO_ADDR
// if not Brown then
 950: LD_EXP 27
 954: NOT
 955: IFFALSE 970
// Brown := CreateCharacter ( 10_Brown ) ;
 957: LD_ADDR_EXP 27
 961: PUSH
 962: LD_STRING 10_Brown
 964: PPUSH
 965: CALL_OW 34
 969: ST_TO_ADDR
// if not Brown then
 970: LD_EXP 27
 974: NOT
 975: IFFALSE 990
// Brown := CreateCharacter ( 08_Brown ) ;
 977: LD_ADDR_EXP 27
 981: PUSH
 982: LD_STRING 08_Brown
 984: PPUSH
 985: CALL_OW 34
 989: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
 990: LD_ADDR_EXP 28
 994: PUSH
 995: LD_STRING Gladstone
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 4
1008: PPUSH
1009: CALL 37727 0 3
1013: ST_TO_ADDR
// if not Gladstone then
1014: LD_EXP 28
1018: NOT
1019: IFFALSE 1034
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1021: LD_ADDR_EXP 28
1025: PUSH
1026: LD_STRING 10_Gladstone
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// if not Gladstone then
1034: LD_EXP 28
1038: NOT
1039: IFFALSE 1054
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1041: LD_ADDR_EXP 28
1045: PUSH
1046: LD_STRING 08_Gladstone
1048: PPUSH
1049: CALL_OW 34
1053: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1054: LD_ADDR_EXP 29
1058: PUSH
1059: LD_STRING Houten
1061: PPUSH
1062: LD_EXP 1
1066: NOT
1067: PPUSH
1068: LD_EXP 4
1072: PPUSH
1073: CALL 37727 0 3
1077: ST_TO_ADDR
// if not Houten then
1078: LD_EXP 29
1082: NOT
1083: IFFALSE 1098
// Houten := CreateCharacter ( 10_Houten ) ;
1085: LD_ADDR_EXP 29
1089: PUSH
1090: LD_STRING 10_Houten
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// if not Houten then
1098: LD_EXP 29
1102: NOT
1103: IFFALSE 1118
// Houten := CreateCharacter ( 09_Houten ) ;
1105: LD_ADDR_EXP 29
1109: PUSH
1110: LD_STRING 09_Houten
1112: PPUSH
1113: CALL_OW 34
1117: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
1118: LD_ADDR_EXP 31
1122: PUSH
1123: LD_STRING Cornel
1125: PPUSH
1126: LD_EXP 1
1130: NOT
1131: PPUSH
1132: LD_EXP 4
1136: PPUSH
1137: CALL 37727 0 3
1141: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1142: LD_ADDR_EXP 32
1146: PUSH
1147: LD_STRING Gary
1149: PPUSH
1150: LD_EXP 1
1154: NOT
1155: PPUSH
1156: LD_EXP 4
1160: PPUSH
1161: CALL 37727 0 3
1165: ST_TO_ADDR
// if not Gary then
1166: LD_EXP 32
1170: NOT
1171: IFFALSE 1186
// Gary := CreateCharacter ( 10_Gary ) ;
1173: LD_ADDR_EXP 32
1177: PUSH
1178: LD_STRING 10_Gary
1180: PPUSH
1181: CALL_OW 34
1185: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 33
1190: PUSH
1191: LD_STRING Frank
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 37727 0 3
1209: ST_TO_ADDR
// if not Frank then
1210: LD_EXP 33
1214: NOT
1215: IFFALSE 1230
// Frank := CreateCharacter ( 08_Frank ) ;
1217: LD_ADDR_EXP 33
1221: PUSH
1222: LD_STRING 08_Frank
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 34
1234: PUSH
1235: LD_STRING Kikuchi
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 37727 0 3
1253: ST_TO_ADDR
// if not Kikuchi then
1254: LD_EXP 34
1258: NOT
1259: IFFALSE 1274
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1261: LD_ADDR_EXP 34
1265: PUSH
1266: LD_STRING 08_Kikuchi
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1274: LD_ADDR_VAR 0 5
1278: PUSH
1279: LD_EXP 22
1283: PUSH
1284: LD_EXP 23
1288: PUSH
1289: LD_EXP 24
1293: PUSH
1294: LD_EXP 25
1298: PUSH
1299: LD_EXP 26
1303: PUSH
1304: LD_EXP 27
1308: PUSH
1309: LD_EXP 28
1313: PUSH
1314: LD_EXP 29
1318: PUSH
1319: LD_EXP 31
1323: PUSH
1324: LD_EXP 32
1328: PUSH
1329: LD_EXP 33
1333: PUSH
1334: LD_EXP 34
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: ST_TO_ADDR
// tmp := tmp diff 0 ;
1353: LD_ADDR_VAR 0 5
1357: PUSH
1358: LD_VAR 0 5
1362: PUSH
1363: LD_INT 0
1365: DIFF
1366: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1367: LD_ADDR_VAR 0 5
1371: PUSH
1372: LD_VAR 0 5
1376: PUSH
1377: LD_STRING 10_lock
1379: PPUSH
1380: CALL_OW 31
1384: UNION
1385: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1386: LD_ADDR_VAR 0 5
1390: PUSH
1391: LD_VAR 0 5
1395: PUSH
1396: LD_STRING 10c_lock
1398: PPUSH
1399: CALL_OW 31
1403: UNION
1404: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1405: LD_STRING 10_lock
1407: PPUSH
1408: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1412: LD_STRING 10c_lock
1414: PPUSH
1415: CALL_OW 40
// for i in tmp do
1419: LD_ADDR_VAR 0 2
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: FOR_IN
1430: IFFALSE 1461
// if GetClass ( i ) = class_mortar then
1432: LD_VAR 0 2
1436: PPUSH
1437: CALL_OW 257
1441: PUSH
1442: LD_INT 8
1444: EQUAL
1445: IFFALSE 1459
// SetClass ( i , class_soldier ) ;
1447: LD_VAR 0 2
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL_OW 336
1459: GO 1429
1461: POP
1462: POP
// if tmp < 12 then
1463: LD_VAR 0 5
1467: PUSH
1468: LD_INT 12
1470: LESS
1471: IFFALSE 1569
// begin k := 16 - tmp ;
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: LD_INT 16
1480: PUSH
1481: LD_VAR 0 5
1485: MINUS
1486: ST_TO_ADDR
// for i = 1 to k do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_VAR 0 3
1501: PUSH
1502: FOR_TO
1503: IFFALSE 1567
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1505: LD_INT 0
1507: PPUSH
1508: LD_INT 1
1510: PUSH
1511: LD_INT 1
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 3
1519: PUSH
1520: LD_INT 4
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 1
1532: PPUSH
1533: LD_INT 5
1535: PPUSH
1536: CALL_OW 12
1540: ARRAY
1541: PPUSH
1542: LD_INT 6
1544: PPUSH
1545: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: CALL_OW 44
1563: ADD
1564: ST_TO_ADDR
// end ;
1565: GO 1502
1567: POP
1568: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1569: LD_ADDR_EXP 20
1573: PUSH
1574: LD_STRING 1
1576: PPUSH
1577: LD_INT 12
1579: PPUSH
1580: LD_INT 12
1582: PPUSH
1583: LD_INT -5
1585: PUSH
1586: LD_EXP 21
1590: PUSH
1591: LD_INT -2
1593: PUSH
1594: LD_INT -3
1596: PUSH
1597: LD_INT -5
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_VAR 0 5
1611: ADD
1612: PUSH
1613: LD_INT -6
1615: PUSH
1616: LD_INT -4
1618: PUSH
1619: LD_EXP 30
1623: PUSH
1624: EMPTY
1625: LIST
1626: LIST
1627: LIST
1628: ADD
1629: PPUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 2
1642: PUSH
1643: LD_INT 1
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: LD_INT 5
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 4
1666: PUSH
1667: LD_INT 0
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: LIST
1677: PUSH
1678: LD_INT 5
1680: PUSH
1681: LD_INT 0
1683: PUSH
1684: LD_INT 2
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: LIST
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: LIST
1696: LIST
1697: LIST
1698: PPUSH
1699: CALL_OW 42
1703: ST_TO_ADDR
// others := tmp diff selected ;
1704: LD_ADDR_VAR 0 8
1708: PUSH
1709: LD_VAR 0 5
1713: PUSH
1714: LD_EXP 20
1718: DIFF
1719: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1720: LD_ADDR_VAR 0 8
1724: PUSH
1725: LD_VAR 0 5
1729: PUSH
1730: LD_EXP 22
1734: PUSH
1735: LD_EXP 23
1739: PUSH
1740: LD_EXP 24
1744: PUSH
1745: LD_EXP 25
1749: PUSH
1750: LD_EXP 26
1754: PUSH
1755: LD_EXP 27
1759: PUSH
1760: LD_EXP 28
1764: PUSH
1765: LD_EXP 29
1769: PUSH
1770: LD_EXP 31
1774: PUSH
1775: LD_EXP 32
1779: PUSH
1780: LD_EXP 33
1784: PUSH
1785: LD_EXP 34
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: DIFF
1804: ST_TO_ADDR
// no_selected := others ;
1805: LD_ADDR_EXP 19
1809: PUSH
1810: LD_VAR 0 8
1814: ST_TO_ADDR
// if no_selected then
1815: LD_EXP 19
1819: IFFALSE 1833
// SaveCharacters ( no_selected , 11_others ) ;
1821: LD_EXP 19
1825: PPUSH
1826: LD_STRING 11_others
1828: PPUSH
1829: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1833: LD_ADDR_VAR 0 6
1837: PUSH
1838: LD_INT 3
1840: PUSH
1841: LD_INT 1
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 4
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 5
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 4
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 5
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 2
1894: PUSH
1895: LD_INT 1
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 7
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 3
1912: PUSH
1913: LD_INT 2
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 7
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: LIST
1933: LIST
1934: ST_TO_ADDR
// for i in JMM ^ selected do
1935: LD_ADDR_VAR 0 2
1939: PUSH
1940: LD_EXP 21
1944: PUSH
1945: LD_EXP 20
1949: ADD
1950: PUSH
1951: FOR_IN
1952: IFFALSE 2141
// begin if GetClass ( i ) = 3 then
1954: LD_VAR 0 2
1958: PPUSH
1959: CALL_OW 257
1963: PUSH
1964: LD_INT 3
1966: EQUAL
1967: IFFALSE 2124
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1969: LD_ADDR_OWVAR 37
1973: PUSH
1974: LD_VAR 0 6
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PUSH
1983: LD_INT 1
1985: ARRAY
1986: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1987: LD_ADDR_OWVAR 39
1991: PUSH
1992: LD_VAR 0 6
1996: PUSH
1997: LD_INT 1
1999: ARRAY
2000: PUSH
2001: LD_INT 2
2003: ARRAY
2004: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2005: LD_ADDR_OWVAR 38
2009: PUSH
2010: LD_VAR 0 6
2014: PUSH
2015: LD_INT 1
2017: ARRAY
2018: PUSH
2019: LD_INT 3
2021: ARRAY
2022: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2023: LD_ADDR_OWVAR 40
2027: PUSH
2028: LD_VAR 0 6
2032: PUSH
2033: LD_INT 1
2035: ARRAY
2036: PUSH
2037: LD_INT 4
2039: ARRAY
2040: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2041: LD_ADDR_VAR 0 6
2045: PUSH
2046: LD_VAR 0 6
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: CALL_OW 3
2058: ST_TO_ADDR
// veh := CreateVehicle ;
2059: LD_ADDR_VAR 0 7
2063: PUSH
2064: CALL_OW 45
2068: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2069: LD_VAR 0 7
2073: PPUSH
2074: LD_INT 8
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2084: LD_VAR 0 2
2088: PPUSH
2089: LD_VAR 0 7
2093: PPUSH
2094: CALL_OW 52
// if i = JMM then
2098: LD_VAR 0 2
2102: PUSH
2103: LD_EXP 21
2107: EQUAL
2108: IFFALSE 2122
// SetMark ( veh , 1 ) ;
2110: LD_VAR 0 7
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: CALL_OW 242
// end else
2122: GO 2139
// PlaceUnitArea ( i , am_hum_start , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 9
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// end ;
2139: GO 1951
2141: POP
2142: POP
// vc_chassis := us_medium_tracked ;
2143: LD_ADDR_OWVAR 37
2147: PUSH
2148: LD_INT 3
2150: ST_TO_ADDR
// vc_engine := engine_solar ;
2151: LD_ADDR_OWVAR 39
2155: PUSH
2156: LD_INT 2
2158: ST_TO_ADDR
// vc_control := control_computer ;
2159: LD_ADDR_OWVAR 38
2163: PUSH
2164: LD_INT 3
2166: ST_TO_ADDR
// vc_weapon := us_radar ;
2167: LD_ADDR_OWVAR 40
2171: PUSH
2172: LD_INT 11
2174: ST_TO_ADDR
// veh := CreateVehicle ;
2175: LD_ADDR_VAR 0 7
2179: PUSH
2180: CALL_OW 45
2184: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2185: LD_VAR 0 7
2189: PPUSH
2190: LD_INT 87
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 48
// end ; end_of_file
2203: LD_VAR 0 1
2207: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
2215: LD_ADDR_VAR 0 5
2219: PUSH
2220: LD_INT 6
2222: PUSH
2223: LD_INT 7
2225: PUSH
2226: LD_INT 8
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_OWVAR 67
2238: ARRAY
2239: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
2240: LD_INT 69
2242: PUSH
2243: EMPTY
2244: LIST
2245: PPUSH
2246: LD_INT 141
2248: PPUSH
2249: CALL_OW 169
// Wait ( 1 ) ;
2253: LD_INT 1
2255: PPUSH
2256: CALL_OW 67
// uc_side := 2 ;
2260: LD_ADDR_OWVAR 20
2264: PUSH
2265: LD_INT 2
2267: ST_TO_ADDR
// uc_nation := 2 ;
2268: LD_ADDR_OWVAR 21
2272: PUSH
2273: LD_INT 2
2275: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2276: LD_ADDR_OWVAR 37
2280: PUSH
2281: LD_INT 14
2283: ST_TO_ADDR
// vc_engine := engine_siberite ;
2284: LD_ADDR_OWVAR 39
2288: PUSH
2289: LD_INT 3
2291: ST_TO_ADDR
// vc_control := control_manual ;
2292: LD_ADDR_OWVAR 38
2296: PUSH
2297: LD_INT 1
2299: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2300: LD_ADDR_OWVAR 40
2304: PUSH
2305: LD_INT 31
2307: ST_TO_ADDR
// for i = 1 to 3 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 3
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2406
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 3
2329: PPUSH
2330: LD_VAR 0 5
2334: PPUSH
2335: CALL_OW 380
// un := CreateVehicle ;
2339: LD_ADDR_VAR 0 4
2343: PUSH
2344: CALL_OW 45
2348: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2349: LD_VAR 0 4
2353: PPUSH
2354: LD_INT 0
2356: PPUSH
2357: LD_INT 5
2359: PPUSH
2360: CALL_OW 12
2364: PPUSH
2365: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 156
2376: PPUSH
2377: LD_INT 15
2379: PPUSH
2380: LD_INT 6
2382: PPUSH
2383: LD_INT 0
2385: PPUSH
2386: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2390: CALL_OW 44
2394: PPUSH
2395: LD_VAR 0 4
2399: PPUSH
2400: CALL_OW 52
// end ;
2404: GO 2321
2406: POP
2407: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , 5 , - 1 , 4 ] ) ;
2408: LD_ADDR_EXP 37
2412: PUSH
2413: LD_INT 94
2415: PPUSH
2416: LD_STRING dammam
2418: PPUSH
2419: LD_VAR 0 5
2423: PPUSH
2424: LD_INT 10000
2426: PUSH
2427: LD_INT 1000
2429: PUSH
2430: LD_INT 300
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PPUSH
2438: LD_INT 1
2440: NEG
2441: PUSH
2442: LD_INT 5
2444: PUSH
2445: LD_INT 1
2447: NEG
2448: PUSH
2449: LD_INT 4
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PPUSH
2458: CALL 47206 0 5
2462: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
2463: LD_ADDR_EXP 37
2467: PUSH
2468: LD_EXP 37
2472: PUSH
2473: LD_INT 122
2475: PPUSH
2476: LD_STRING 
2478: PPUSH
2479: LD_VAR 0 5
2483: PPUSH
2484: LD_INT 100
2486: PUSH
2487: LD_INT 60
2489: PUSH
2490: LD_INT 0
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: LIST
2497: PPUSH
2498: LD_INT 1
2500: NEG
2501: PUSH
2502: LD_INT 4
2504: PUSH
2505: LD_INT 0
2507: PUSH
2508: LD_INT 0
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: LIST
2515: LIST
2516: PPUSH
2517: CALL 47206 0 5
2521: ADD
2522: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
2523: LD_ADDR_EXP 35
2527: PUSH
2528: LD_INT 45
2530: PPUSH
2531: LD_STRING jeddah
2533: PPUSH
2534: LD_VAR 0 5
2538: PPUSH
2539: LD_INT 700
2541: PUSH
2542: LD_INT 300
2544: PUSH
2545: LD_INT 10
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: PPUSH
2553: LD_INT 1
2555: NEG
2556: PUSH
2557: LD_INT 5
2559: PUSH
2560: LD_INT 3
2562: PUSH
2563: LD_INT 2
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL 47206 0 5
2576: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2577: LD_ADDR_EXP 36
2581: PUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_STRING riyadh
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 500
2595: PUSH
2596: LD_INT 60
2598: PUSH
2599: LD_INT 0
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: LIST
2606: PPUSH
2607: LD_INT 4
2609: PUSH
2610: LD_INT 2
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 1
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL 47206 0 5
2629: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
2630: LD_ADDR_EXP 38
2634: PUSH
2635: LD_INT 69
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: LD_VAR 0 5
2645: PPUSH
2646: LD_INT 500
2648: PUSH
2649: LD_INT 50
2651: PUSH
2652: LD_INT 0
2654: PUSH
2655: EMPTY
2656: LIST
2657: LIST
2658: LIST
2659: PPUSH
2660: LD_INT 1
2662: NEG
2663: PUSH
2664: LD_INT 3
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: LIST
2677: LIST
2678: PPUSH
2679: CALL 47206 0 5
2683: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2684: LD_ADDR_EXP 48
2688: PUSH
2689: LD_EXP 37
2693: PUSH
2694: LD_EXP 35
2698: PUSH
2699: LD_EXP 38
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2709: LD_ADDR_VAR 0 2
2713: PUSH
2714: LD_INT 22
2716: PUSH
2717: LD_INT 2
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 30
2726: PUSH
2727: LD_INT 31
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: LD_INT 58
2736: PUSH
2737: EMPTY
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: LIST
2744: PPUSH
2745: CALL_OW 69
2749: PUSH
2750: FOR_IN
2751: IFFALSE 2876
// begin if GetBase ( i ) then
2753: LD_VAR 0 2
2757: PPUSH
2758: CALL_OW 274
2762: IFFALSE 2766
// continue ;
2764: GO 2750
// d := GetDir ( i ) ;
2766: LD_ADDR_VAR 0 3
2770: PUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: CALL_OW 254
2780: ST_TO_ADDR
// if d < 3 then
2781: LD_VAR 0 3
2785: PUSH
2786: LD_INT 3
2788: LESS
2789: IFFALSE 2807
// d := d + 3 else
2791: LD_ADDR_VAR 0 3
2795: PUSH
2796: LD_VAR 0 3
2800: PUSH
2801: LD_INT 3
2803: PLUS
2804: ST_TO_ADDR
2805: GO 2821
// d := d - 3 ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 3
2819: MINUS
2820: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
2821: LD_INT 0
2823: PPUSH
2824: LD_INT 8
2826: PPUSH
2827: LD_VAR 0 5
2831: PPUSH
2832: CALL_OW 380
// un := CreateHuman ;
2836: LD_ADDR_VAR 0 4
2840: PUSH
2841: CALL_OW 44
2845: ST_TO_ADDR
// SetDir ( un , d ) ;
2846: LD_VAR 0 4
2850: PPUSH
2851: LD_VAR 0 3
2855: PPUSH
2856: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
2860: LD_VAR 0 4
2864: PPUSH
2865: LD_VAR 0 2
2869: PPUSH
2870: CALL_OW 52
// end ;
2874: GO 2750
2876: POP
2877: POP
// if Difficulty > 1 then
2878: LD_OWVAR 67
2882: PUSH
2883: LD_INT 1
2885: GREATER
2886: IFFALSE 3257
// begin ar_kamikadze := [ ] ;
2888: LD_ADDR_EXP 41
2892: PUSH
2893: EMPTY
2894: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
2895: LD_INT 0
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_VAR 0 5
2905: PPUSH
2906: CALL_OW 380
// un := CreateHuman ;
2910: LD_ADDR_VAR 0 4
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2920: LD_VAR 0 4
2924: PPUSH
2925: LD_INT 3
2927: PPUSH
2928: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
2932: LD_VAR 0 4
2936: PPUSH
2937: LD_INT 23
2939: PPUSH
2940: LD_INT 44
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 48
// ComCrawl ( un ) ;
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 137
// un := CreateHuman ;
2959: LD_ADDR_VAR 0 4
2963: PUSH
2964: CALL_OW 44
2968: ST_TO_ADDR
// SetDir ( un , 3 ) ;
2969: LD_VAR 0 4
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
2981: LD_VAR 0 4
2985: PPUSH
2986: LD_INT 30
2988: PPUSH
2989: LD_INT 39
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 48
// ComCrawl ( un ) ;
2999: LD_VAR 0 4
3003: PPUSH
3004: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 17
3013: PPUSH
3014: LD_VAR 0 5
3018: PPUSH
3019: CALL_OW 380
// un := CreateHuman ;
3023: LD_ADDR_VAR 0 4
3027: PUSH
3028: CALL_OW 44
3032: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3033: LD_VAR 0 4
3037: PPUSH
3038: LD_INT 3
3040: PPUSH
3041: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3045: LD_VAR 0 4
3049: PPUSH
3050: LD_INT 45
3052: PPUSH
3053: LD_INT 86
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// ComHold ( un ) ;
3063: LD_VAR 0 4
3067: PPUSH
3068: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3072: LD_ADDR_EXP 41
3076: PUSH
3077: LD_EXP 41
3081: PPUSH
3082: LD_EXP 41
3086: PUSH
3087: LD_INT 1
3089: PLUS
3090: PPUSH
3091: LD_VAR 0 4
3095: PPUSH
3096: CALL_OW 1
3100: ST_TO_ADDR
// un := CreateHuman ;
3101: LD_ADDR_VAR 0 4
3105: PUSH
3106: CALL_OW 44
3110: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3111: LD_VAR 0 4
3115: PPUSH
3116: LD_INT 3
3118: PPUSH
3119: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3123: LD_VAR 0 4
3127: PPUSH
3128: LD_INT 60
3130: PPUSH
3131: LD_INT 85
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: CALL_OW 48
// ComHold ( un ) ;
3141: LD_VAR 0 4
3145: PPUSH
3146: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3150: LD_ADDR_EXP 41
3154: PUSH
3155: LD_EXP 41
3159: PPUSH
3160: LD_EXP 41
3164: PUSH
3165: LD_INT 1
3167: PLUS
3168: PPUSH
3169: LD_VAR 0 4
3173: PPUSH
3174: CALL_OW 1
3178: ST_TO_ADDR
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 4
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3189: LD_VAR 0 4
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 222
3208: PPUSH
3209: LD_INT 166
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 48
// ComHold ( un ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3228: LD_ADDR_EXP 41
3232: PUSH
3233: LD_EXP 41
3237: PPUSH
3238: LD_EXP 41
3242: PUSH
3243: LD_INT 1
3245: PLUS
3246: PPUSH
3247: LD_VAR 0 4
3251: PPUSH
3252: CALL_OW 1
3256: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3257: LD_ADDR_EXP 39
3261: PUSH
3262: EMPTY
3263: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3264: LD_INT 1
3266: PPUSH
3267: LD_INT 1
3269: PPUSH
3270: LD_VAR 0 5
3274: PPUSH
3275: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING SecondCharsGal
3286: ST_TO_ADDR
// hc_face_number := 4 ;
3287: LD_ADDR_OWVAR 34
3291: PUSH
3292: LD_INT 4
3294: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3295: LD_ADDR_EXP 39
3299: PUSH
3300: LD_EXP 39
3304: PPUSH
3305: LD_INT 1
3307: PPUSH
3308: CALL_OW 44
3312: PPUSH
3313: CALL_OW 1
3317: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3318: LD_INT 2
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_VAR 0 5
3328: PPUSH
3329: CALL_OW 380
// hc_gallery := SecondCharsGal ;
3333: LD_ADDR_OWVAR 33
3337: PUSH
3338: LD_STRING SecondCharsGal
3340: ST_TO_ADDR
// hc_face_number := 15 ;
3341: LD_ADDR_OWVAR 34
3345: PUSH
3346: LD_INT 15
3348: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3349: LD_ADDR_EXP 39
3353: PUSH
3354: LD_EXP 39
3358: PPUSH
3359: LD_INT 2
3361: PPUSH
3362: CALL_OW 44
3366: PPUSH
3367: CALL_OW 1
3371: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
3372: LD_INT 2
3374: PPUSH
3375: LD_INT 4
3377: PPUSH
3378: LD_VAR 0 5
3382: PPUSH
3383: CALL_OW 380
// hc_gallery :=  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3395: LD_ADDR_EXP 39
3399: PUSH
3400: LD_EXP 39
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: CALL_OW 44
3412: PPUSH
3413: CALL_OW 1
3417: ST_TO_ADDR
// hc_sex := sex_male ;
3418: LD_ADDR_OWVAR 27
3422: PUSH
3423: LD_INT 1
3425: ST_TO_ADDR
// hc_class = 11 ;
3426: LD_ADDR_OWVAR 28
3430: PUSH
3431: LD_INT 11
3433: ST_TO_ADDR
// hc_gallery = sandar ;
3434: LD_ADDR_OWVAR 33
3438: PUSH
3439: LD_STRING sandar
3441: ST_TO_ADDR
// hc_face_number = 33 ;
3442: LD_ADDR_OWVAR 34
3446: PUSH
3447: LD_INT 33
3449: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3450: LD_ADDR_OWVAR 26
3454: PUSH
3455: LD_STRING Thabit Muhair Saliba
3457: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3458: LD_ADDR_OWVAR 31
3462: PUSH
3463: LD_INT 0
3465: PUSH
3466: LD_INT 0
3468: PUSH
3469: LD_INT 0
3471: PUSH
3472: LD_INT 0
3474: PUSH
3475: EMPTY
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: ST_TO_ADDR
// Saliba = CreateHuman ;
3481: LD_ADDR_EXP 43
3485: PUSH
3486: CALL_OW 44
3490: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3491: LD_EXP 43
3495: PPUSH
3496: LD_INT 7
3498: PPUSH
3499: CALL_OW 52
// if gensher_active then
3503: LD_EXP 18
3507: IFFALSE 3534
// begin Gensher = NewCharacter ( Dietrich ) ;
3509: LD_ADDR_EXP 44
3513: PUSH
3514: LD_STRING Dietrich
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3522: LD_EXP 44
3526: PPUSH
3527: LD_INT 94
3529: PPUSH
3530: CALL_OW 52
// end ; InitHc ;
3534: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3538: LD_ADDR_EXP 40
3542: PUSH
3543: EMPTY
3544: ST_TO_ADDR
// for i = 1 to 4 do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 4
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3731
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3561: LD_INT 13
3563: PUSH
3564: LD_INT 14
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 1
3573: PPUSH
3574: LD_INT 2
3576: PPUSH
3577: CALL_OW 12
3581: ARRAY
3582: PPUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 1
3595: PPUSH
3596: LD_INT 2
3598: PPUSH
3599: CALL_OW 12
3603: ARRAY
3604: PPUSH
3605: LD_INT 1
3607: PPUSH
3608: LD_INT 25
3610: PUSH
3611: LD_INT 27
3613: PUSH
3614: LD_INT 26
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 1
3624: PPUSH
3625: LD_INT 3
3627: PPUSH
3628: CALL_OW 12
3632: ARRAY
3633: PPUSH
3634: LD_INT 60
3636: PPUSH
3637: LD_INT 100
3639: PPUSH
3640: CALL_OW 12
3644: PPUSH
3645: CALL 43807 0 5
// un := CreateVehicle ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: CALL_OW 45
3658: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3659: LD_ADDR_EXP 40
3663: PUSH
3664: LD_EXP 40
3668: PPUSH
3669: LD_EXP 40
3673: PUSH
3674: LD_INT 1
3676: PLUS
3677: PPUSH
3678: LD_VAR 0 4
3682: PPUSH
3683: CALL_OW 1
3687: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3688: LD_VAR 0 4
3692: PPUSH
3693: LD_INT 0
3695: PPUSH
3696: LD_INT 5
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
3708: LD_VAR 0 4
3712: PPUSH
3713: LD_INT 124
3715: PPUSH
3716: LD_INT 141
3718: PPUSH
3719: LD_INT 6
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: CALL_OW 50
// end ;
3729: GO 3558
3731: POP
3732: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3733: LD_ADDR_EXP 42
3737: PUSH
3738: EMPTY
3739: PUSH
3740: EMPTY
3741: PUSH
3742: EMPTY
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: DOUBLE
3755: LD_INT 1
3757: DEC
3758: ST_TO_ADDR
3759: LD_INT 3
3761: PUSH
3762: LD_INT 3
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_OWVAR 67
3777: ARRAY
3778: PUSH
3779: FOR_TO
3780: IFFALSE 3994
// for i = 1 to 3 do
3782: LD_ADDR_VAR 0 2
3786: PUSH
3787: DOUBLE
3788: LD_INT 1
3790: DEC
3791: ST_TO_ADDR
3792: LD_INT 3
3794: PUSH
3795: FOR_TO
3796: IFFALSE 3990
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
3798: LD_INT 14
3800: PPUSH
3801: LD_INT 3
3803: PUSH
3804: LD_INT 2
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: CALL_OW 12
3821: ARRAY
3822: PPUSH
3823: LD_INT 1
3825: PUSH
3826: LD_INT 5
3828: PUSH
3829: EMPTY
3830: LIST
3831: LIST
3832: PUSH
3833: LD_INT 1
3835: PPUSH
3836: LD_INT 2
3838: PPUSH
3839: CALL_OW 12
3843: ARRAY
3844: PPUSH
3845: LD_INT 25
3847: PUSH
3848: LD_INT 27
3850: PUSH
3851: LD_INT 26
3853: PUSH
3854: LD_INT 28
3856: PUSH
3857: EMPTY
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: PUSH
3863: LD_INT 1
3865: PPUSH
3866: LD_INT 4
3868: PPUSH
3869: CALL_OW 12
3873: ARRAY
3874: PPUSH
3875: LD_INT 100
3877: PPUSH
3878: CALL 43807 0 5
// un := CreateVehicle ;
3882: LD_ADDR_VAR 0 4
3886: PUSH
3887: CALL_OW 45
3891: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
3892: LD_ADDR_EXP 42
3896: PUSH
3897: LD_EXP 42
3901: PPUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_EXP 42
3911: PUSH
3912: LD_VAR 0 2
3916: ARRAY
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: LD_VAR 0 4
3930: PPUSH
3931: CALL 44364 0 3
3935: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3936: LD_VAR 0 4
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: LD_INT 5
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
3956: LD_VAR 0 4
3960: PPUSH
3961: LD_INT 20
3963: PUSH
3964: LD_INT 21
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: EMPTY
3971: LIST
3972: LIST
3973: LIST
3974: PUSH
3975: LD_VAR 0 2
3979: ARRAY
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ;
3988: GO 3795
3990: POP
3991: POP
3992: GO 3779
3994: POP
3995: POP
// InitHc ;
3996: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4000: LD_INT 4
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 10
4008: PPUSH
4009: LD_INT 5
4011: PPUSH
4012: LD_INT 0
4014: PPUSH
4015: CALL_OW 58
// end ;
4019: LD_VAR 0 1
4023: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4024: LD_EXP 41
4028: IFFALSE 4102
4030: GO 4032
4032: DISABLE
4033: LD_INT 0
4035: PPUSH
// begin enable ;
4036: ENABLE
// for i in ar_kamikadze do
4037: LD_ADDR_VAR 0 1
4041: PUSH
4042: LD_EXP 41
4046: PUSH
4047: FOR_IN
4048: IFFALSE 4100
// if See ( 1 , i ) then
4050: LD_INT 1
4052: PPUSH
4053: LD_VAR 0 1
4057: PPUSH
4058: CALL_OW 292
4062: IFFALSE 4098
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_INT 81
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PPUSH
4079: CALL_OW 69
4083: PPUSH
4084: LD_VAR 0 1
4088: PPUSH
4089: CALL_OW 74
4093: PPUSH
4094: CALL_OW 115
4098: GO 4047
4100: POP
4101: POP
// end ;
4102: PPOPN 1
4104: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4105: LD_EXP 13
4109: IFFALSE 4426
4111: GO 4113
4113: DISABLE
4114: LD_INT 0
4116: PPUSH
4117: PPUSH
4118: PPUSH
4119: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4120: LD_INT 35
4122: PPUSH
4123: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4127: LD_INT 1
4129: PPUSH
4130: CALL 32705 0 1
4134: PUSH
4135: LD_INT 0
4137: EQUAL
4138: IFFALSE 4120
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4140: LD_INT 1
4142: PPUSH
4143: LD_INT 14
4145: PUSH
4146: LD_INT 3
4148: PUSH
4149: LD_INT 2
4151: PUSH
4152: LD_INT 32
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: PPUSH
4164: CALL 32248 0 2
// repeat wait ( 0 0$1 ) ;
4168: LD_INT 35
4170: PPUSH
4171: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4175: LD_EXP 67
4179: PUSH
4180: LD_INT 1
4182: ARRAY
4183: PPUSH
4184: LD_INT 33
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 34
4196: PUSH
4197: LD_INT 32
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: PPUSH
4208: CALL_OW 72
4212: IFFALSE 4168
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4214: LD_ADDR_VAR 0 2
4218: PUSH
4219: LD_EXP 67
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: PPUSH
4228: LD_INT 33
4230: PUSH
4231: LD_INT 2
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: PUSH
4238: LD_INT 34
4240: PUSH
4241: LD_INT 32
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: PUSH
4257: LD_INT 1
4259: ARRAY
4260: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4261: LD_ADDR_VAR 0 4
4265: PUSH
4266: LD_INT 5
4268: PPUSH
4269: CALL_OW 469
4273: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4274: LD_INT 35
4276: PPUSH
4277: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4281: LD_ADDR_VAR 0 4
4285: PUSH
4286: LD_INT 5
4288: PPUSH
4289: CALL_OW 469
4293: ST_TO_ADDR
// tmp := 100 ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_INT 100
4301: ST_TO_ADDR
// if pos then
4302: LD_VAR 0 4
4306: IFFALSE 4346
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: LD_INT 2
4315: PPUSH
4316: LD_VAR 0 4
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: LD_VAR 0 4
4329: PUSH
4330: LD_INT 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 20
4336: PPUSH
4337: CALL 44858 0 4
4341: PUSH
4342: LD_INT 4
4344: ARRAY
4345: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4346: LD_VAR 0 4
4350: PUSH
4351: LD_EXP 14
4355: NOT
4356: AND
4357: PUSH
4358: LD_VAR 0 3
4362: PUSH
4363: LD_INT 10
4365: LESS
4366: AND
4367: IFFALSE 4274
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4369: LD_VAR 0 2
4373: PPUSH
4374: LD_VAR 0 4
4378: PUSH
4379: LD_INT 1
4381: ARRAY
4382: PPUSH
4383: LD_VAR 0 4
4387: PUSH
4388: LD_INT 2
4390: ARRAY
4391: PPUSH
4392: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4396: LD_VAR 0 2
4400: PPUSH
4401: LD_INT 198
4403: PPUSH
4404: LD_INT 113
4406: PPUSH
4407: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4411: LD_VAR 0 2
4415: PPUSH
4416: LD_INT 124
4418: PPUSH
4419: LD_INT 7
4421: PPUSH
4422: CALL_OW 171
// end ;
4426: PPOPN 4
4428: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4429: LD_EXP 6
4433: IFFALSE 6978
4435: GO 4437
4437: DISABLE
4438: LD_INT 0
4440: PPUSH
4441: PPUSH
4442: PPUSH
4443: PPUSH
4444: PPUSH
4445: PPUSH
4446: PPUSH
4447: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4448: LD_ADDR_VAR 0 4
4452: PUSH
4453: LD_INT 5
4455: PUSH
4456: LD_INT 6
4458: PUSH
4459: LD_INT 7
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: ST_TO_ADDR
// coords := [ ] ;
4473: LD_ADDR_VAR 0 5
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4480: LD_ADDR_VAR 0 6
4484: PUSH
4485: LD_INT 0
4487: PUSH
4488: LD_INT 0
4490: PUSH
4491: LD_INT 0
4493: PUSH
4494: LD_INT 0
4496: PUSH
4497: LD_INT 1
4499: PUSH
4500: LD_INT 0
4502: PUSH
4503: LD_INT 0
4505: PUSH
4506: LD_INT 0
4508: PUSH
4509: LD_INT 1
4511: PUSH
4512: LD_INT 0
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4527: LD_INT 1
4529: PPUSH
4530: LD_INT 14
4532: PUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 28
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 14
4550: PUSH
4551: LD_INT 1
4553: PUSH
4554: LD_INT 2
4556: PUSH
4557: LD_INT 25
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PUSH
4566: LD_INT 14
4568: PUSH
4569: LD_INT 1
4571: PUSH
4572: LD_INT 2
4574: PUSH
4575: LD_INT 28
4577: PUSH
4578: EMPTY
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 14
4586: PUSH
4587: LD_INT 1
4589: PUSH
4590: LD_INT 2
4592: PUSH
4593: LD_INT 29
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: PPUSH
4608: CALL 32248 0 2
// wait ( [ 10 10$00 , 9 9$20 , 9 9$00 ] [ Difficulty ] ) ;
4612: LD_INT 21000
4614: PUSH
4615: LD_INT 19600
4617: PUSH
4618: LD_INT 18900
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PPUSH
4632: CALL_OW 67
// InitHc ;
4636: CALL_OW 19
// InitUc ;
4640: CALL_OW 18
// uc_side := 2 ;
4644: LD_ADDR_OWVAR 20
4648: PUSH
4649: LD_INT 2
4651: ST_TO_ADDR
// uc_nation := 2 ;
4652: LD_ADDR_OWVAR 21
4656: PUSH
4657: LD_INT 2
4659: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: EMPTY
4666: PUSH
4667: EMPTY
4668: PUSH
4669: EMPTY
4670: PUSH
4671: EMPTY
4672: PUSH
4673: EMPTY
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: LIST
4680: LIST
4681: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4682: LD_ADDR_VAR 0 3
4686: PUSH
4687: LD_VAR 0 3
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: LD_EXP 67
4699: PUSH
4700: LD_INT 1
4702: ARRAY
4703: PUSH
4704: LD_INT 34
4706: PUSH
4707: LD_INT 32
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: DIFF
4719: PPUSH
4720: CALL_OW 1
4724: ST_TO_ADDR
// for i = 1 to Difficulty do
4725: LD_ADDR_VAR 0 1
4729: PUSH
4730: DOUBLE
4731: LD_INT 1
4733: DEC
4734: ST_TO_ADDR
4735: LD_OWVAR 67
4739: PUSH
4740: FOR_TO
4741: IFFALSE 4863
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4743: LD_INT 13
4745: PPUSH
4746: LD_INT 3
4748: PPUSH
4749: LD_INT 5
4751: PPUSH
4752: LD_INT 29
4754: PPUSH
4755: LD_INT 100
4757: PPUSH
4758: CALL 43807 0 5
// un := CreateVehicle ;
4762: LD_ADDR_VAR 0 2
4766: PUSH
4767: CALL_OW 45
4771: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
4772: LD_ADDR_VAR 0 3
4776: PUSH
4777: LD_VAR 0 3
4781: PPUSH
4782: LD_INT 1
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_INT 1
4792: ARRAY
4793: PUSH
4794: LD_INT 1
4796: PLUS
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_VAR 0 2
4806: PPUSH
4807: CALL 44364 0 3
4811: ST_TO_ADDR
// SetDir ( un , 3 ) ;
4812: LD_VAR 0 2
4816: PPUSH
4817: LD_INT 3
4819: PPUSH
4820: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
4824: LD_VAR 0 2
4828: PPUSH
4829: LD_INT 16
4831: PPUSH
4832: LD_INT 0
4834: PPUSH
4835: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 51
4846: PPUSH
4847: LD_INT 10
4849: PPUSH
4850: CALL_OW 111
// wait ( 0 0$2 ) ;
4854: LD_INT 70
4856: PPUSH
4857: CALL_OW 67
// end ;
4861: GO 4740
4863: POP
4864: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 51
4872: PUSH
4873: LD_INT 24
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 75
4882: PUSH
4883: LD_INT 90
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
4894: LD_INT 1
4896: PPUSH
4897: LD_VAR 0 3
4901: PUSH
4902: LD_INT 1
4904: ARRAY
4905: PPUSH
4906: LD_VAR 0 5
4910: PPUSH
4911: LD_VAR 0 6
4915: PPUSH
4916: CALL 32542 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: DOUBLE
4926: LD_INT 1
4928: DEC
4929: ST_TO_ADDR
4930: LD_INT 2
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: LD_INT 3
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: LIST
4943: PUSH
4944: LD_OWVAR 67
4948: ARRAY
4949: PUSH
4950: FOR_TO
4951: IFFALSE 5035
// begin PrepareHuman ( false , 17 , skill ) ;
4953: LD_INT 0
4955: PPUSH
4956: LD_INT 17
4958: PPUSH
4959: LD_VAR 0 4
4963: PPUSH
4964: CALL_OW 380
// un := CreateHuman ;
4968: LD_ADDR_VAR 0 2
4972: PUSH
4973: CALL_OW 44
4977: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
4978: LD_ADDR_VAR 0 3
4982: PUSH
4983: LD_VAR 0 3
4987: PPUSH
4988: LD_INT 2
4990: PUSH
4991: LD_VAR 0 3
4995: PUSH
4996: LD_INT 2
4998: ARRAY
4999: PUSH
5000: LD_INT 1
5002: PLUS
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: CALL 44364 0 3
5017: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5018: LD_VAR 0 2
5022: PPUSH
5023: LD_INT 13
5025: PPUSH
5026: LD_INT 0
5028: PPUSH
5029: CALL_OW 49
// end ;
5033: GO 4950
5035: POP
5036: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
5037: LD_ADDR_VAR 0 1
5041: PUSH
5042: DOUBLE
5043: LD_INT 1
5045: DEC
5046: ST_TO_ADDR
5047: LD_INT 2
5049: PUSH
5050: LD_INT 3
5052: PUSH
5053: LD_INT 3
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: PUSH
5061: LD_OWVAR 67
5065: ARRAY
5066: PUSH
5067: FOR_TO
5068: IFFALSE 5171
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
5070: LD_INT 0
5072: PPUSH
5073: LD_INT 1
5075: PUSH
5076: LD_INT 8
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PUSH
5083: LD_INT 1
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 12
5093: ARRAY
5094: PPUSH
5095: LD_VAR 0 4
5099: PPUSH
5100: CALL_OW 380
// un := CreateHuman ;
5104: LD_ADDR_VAR 0 2
5108: PUSH
5109: CALL_OW 44
5113: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5114: LD_ADDR_VAR 0 3
5118: PUSH
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_INT 2
5126: PUSH
5127: LD_VAR 0 3
5131: PUSH
5132: LD_INT 2
5134: ARRAY
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PPUSH
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL 44364 0 3
5153: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5154: LD_VAR 0 2
5158: PPUSH
5159: LD_INT 13
5161: PPUSH
5162: LD_INT 0
5164: PPUSH
5165: CALL_OW 49
// end ;
5169: GO 5067
5171: POP
5172: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5173: LD_ADDR_VAR 0 5
5177: PUSH
5178: LD_INT 67
5180: PUSH
5181: LD_INT 112
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 85
5190: PUSH
5191: LD_INT 130
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5202: LD_INT 2
5204: PPUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 2
5212: ARRAY
5213: PPUSH
5214: LD_VAR 0 5
5218: PPUSH
5219: LD_VAR 0 6
5223: PPUSH
5224: CALL 32542 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5228: LD_ADDR_VAR 0 1
5232: PUSH
5233: DOUBLE
5234: LD_INT 1
5236: DEC
5237: ST_TO_ADDR
5238: LD_INT 1
5240: PUSH
5241: LD_INT 2
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PUSH
5252: LD_OWVAR 67
5256: ARRAY
5257: PUSH
5258: FOR_TO
5259: IFFALSE 5343
// begin PrepareHuman ( false , 17 , skill ) ;
5261: LD_INT 0
5263: PPUSH
5264: LD_INT 17
5266: PPUSH
5267: LD_VAR 0 4
5271: PPUSH
5272: CALL_OW 380
// un := CreateHuman ;
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: CALL_OW 44
5285: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_VAR 0 3
5295: PPUSH
5296: LD_INT 3
5298: PUSH
5299: LD_VAR 0 3
5303: PUSH
5304: LD_INT 3
5306: ARRAY
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: LD_VAR 0 2
5320: PPUSH
5321: CALL 44364 0 3
5325: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5326: LD_VAR 0 2
5330: PPUSH
5331: LD_INT 14
5333: PPUSH
5334: LD_INT 0
5336: PPUSH
5337: CALL_OW 49
// end ;
5341: GO 5258
5343: POP
5344: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_INT 148
5352: PUSH
5353: LD_INT 158
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PUSH
5360: LD_INT 148
5362: PUSH
5363: LD_INT 158
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: EMPTY
5371: LIST
5372: LIST
5373: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5374: LD_INT 3
5376: PPUSH
5377: LD_VAR 0 3
5381: PUSH
5382: LD_INT 3
5384: ARRAY
5385: PPUSH
5386: LD_VAR 0 5
5390: PPUSH
5391: LD_VAR 0 6
5395: PPUSH
5396: CALL 32542 0 4
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 3
5412: PUSH
5413: LD_INT 4
5415: PUSH
5416: LD_INT 4
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_OWVAR 67
5428: ARRAY
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5639
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5433: LD_INT 14
5435: PPUSH
5436: LD_INT 3
5438: PPUSH
5439: LD_INT 1
5441: PUSH
5442: LD_INT 5
5444: PUSH
5445: EMPTY
5446: LIST
5447: LIST
5448: PUSH
5449: LD_INT 1
5451: PPUSH
5452: LD_INT 2
5454: PPUSH
5455: CALL_OW 12
5459: ARRAY
5460: PPUSH
5461: LD_INT 27
5463: PUSH
5464: LD_INT 26
5466: PUSH
5467: LD_INT 28
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 1
5477: PPUSH
5478: LD_INT 3
5480: PPUSH
5481: CALL_OW 12
5485: ARRAY
5486: PPUSH
5487: LD_INT 100
5489: PPUSH
5490: CALL 43807 0 5
// un := CreateVehicle ;
5494: LD_ADDR_VAR 0 2
5498: PUSH
5499: CALL_OW 45
5503: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5504: LD_ADDR_VAR 0 3
5508: PUSH
5509: LD_VAR 0 3
5513: PPUSH
5514: LD_INT 4
5516: PUSH
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 4
5524: ARRAY
5525: PUSH
5526: LD_INT 1
5528: PLUS
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: LD_VAR 0 2
5538: PPUSH
5539: CALL 44364 0 3
5543: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5544: LD_VAR 0 2
5548: PPUSH
5549: LD_INT 5
5551: PPUSH
5552: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5556: LD_VAR 0 2
5560: PPUSH
5561: LD_INT 15
5563: PPUSH
5564: LD_INT 0
5566: PPUSH
5567: CALL_OW 49
// if GetControl ( un ) = control_manual then
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 263
5580: PUSH
5581: LD_INT 1
5583: EQUAL
5584: IFFALSE 5615
// begin PrepareHuman ( false , 3 , skill ) ;
5586: LD_INT 0
5588: PPUSH
5589: LD_INT 3
5591: PPUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5601: CALL_OW 44
5605: PPUSH
5606: LD_VAR 0 2
5610: PPUSH
5611: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5615: LD_VAR 0 2
5619: PPUSH
5620: LD_INT 179
5622: PPUSH
5623: LD_INT 135
5625: PPUSH
5626: CALL_OW 111
// wait ( 0 0$2 ) ;
5630: LD_INT 70
5632: PPUSH
5633: CALL_OW 67
// end ;
5637: GO 5430
5639: POP
5640: POP
// vc_chassis := 15 ;
5641: LD_ADDR_OWVAR 37
5645: PUSH
5646: LD_INT 15
5648: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 4
5661: PUSH
5662: LD_VAR 0 3
5666: PUSH
5667: LD_INT 4
5669: ARRAY
5670: PUSH
5671: LD_INT 1
5673: PLUS
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PPUSH
5679: CALL_OW 45
5683: PPUSH
5684: CALL 44364 0 3
5688: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
5689: LD_VAR 0 3
5693: PUSH
5694: LD_INT 4
5696: ARRAY
5697: PUSH
5698: LD_VAR 0 3
5702: PUSH
5703: LD_INT 4
5705: ARRAY
5706: ARRAY
5707: PPUSH
5708: LD_INT 15
5710: PPUSH
5711: LD_INT 0
5713: PPUSH
5714: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
5718: LD_INT 0
5720: PPUSH
5721: LD_INT 11
5723: PPUSH
5724: LD_VAR 0 4
5728: PPUSH
5729: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
5733: LD_ADDR_VAR 0 3
5737: PUSH
5738: LD_VAR 0 3
5742: PPUSH
5743: LD_INT 4
5745: PUSH
5746: LD_VAR 0 3
5750: PUSH
5751: LD_INT 4
5753: ARRAY
5754: PUSH
5755: LD_INT 1
5757: PLUS
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: PPUSH
5763: CALL_OW 44
5767: PPUSH
5768: CALL 44364 0 3
5772: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
5773: LD_VAR 0 3
5777: PUSH
5778: LD_INT 4
5780: ARRAY
5781: PUSH
5782: LD_VAR 0 3
5786: PUSH
5787: LD_INT 4
5789: ARRAY
5790: ARRAY
5791: PPUSH
5792: LD_VAR 0 3
5796: PUSH
5797: LD_INT 4
5799: ARRAY
5800: PUSH
5801: LD_VAR 0 3
5805: PUSH
5806: LD_INT 4
5808: ARRAY
5809: PUSH
5810: LD_INT 1
5812: MINUS
5813: ARRAY
5814: PPUSH
5815: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
5819: LD_ADDR_VAR 0 5
5823: PUSH
5824: LD_INT 148
5826: PUSH
5827: LD_INT 140
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PUSH
5834: EMPTY
5835: LIST
5836: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
5837: LD_INT 1
5839: PPUSH
5840: LD_VAR 0 3
5844: PUSH
5845: LD_INT 4
5847: ARRAY
5848: PPUSH
5849: LD_VAR 0 5
5853: PPUSH
5854: LD_VAR 0 6
5858: PPUSH
5859: CALL 32542 0 4
// if gensher_active then
5863: LD_EXP 18
5867: IFFALSE 6220
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
5869: LD_EXP 44
5873: PPUSH
5874: LD_STRING D10-Diet-1
5876: PPUSH
5877: CALL_OW 94
// for i = 1 to 2 do
5881: LD_ADDR_VAR 0 1
5885: PUSH
5886: DOUBLE
5887: LD_INT 1
5889: DEC
5890: ST_TO_ADDR
5891: LD_INT 2
5893: PUSH
5894: FOR_TO
5895: IFFALSE 6017
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
5897: LD_INT 13
5899: PPUSH
5900: LD_INT 3
5902: PPUSH
5903: LD_INT 5
5905: PPUSH
5906: LD_INT 29
5908: PPUSH
5909: LD_INT 100
5911: PPUSH
5912: CALL 43807 0 5
// un := CreateVehicle ;
5916: LD_ADDR_VAR 0 2
5920: PUSH
5921: CALL_OW 45
5925: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
5926: LD_ADDR_VAR 0 3
5930: PUSH
5931: LD_VAR 0 3
5935: PPUSH
5936: LD_INT 5
5938: PUSH
5939: LD_VAR 0 3
5943: PUSH
5944: LD_INT 5
5946: ARRAY
5947: PUSH
5948: LD_INT 1
5950: PLUS
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_VAR 0 2
5960: PPUSH
5961: CALL 44364 0 3
5965: ST_TO_ADDR
// SetDir ( un , 0 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 0
5973: PPUSH
5974: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
5978: LD_VAR 0 2
5982: PPUSH
5983: LD_INT 23
5985: PPUSH
5986: LD_INT 0
5988: PPUSH
5989: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
5993: LD_VAR 0 2
5997: PPUSH
5998: LD_INT 85
6000: PPUSH
6001: LD_INT 152
6003: PPUSH
6004: CALL_OW 111
// wait ( 0 0$2 ) ;
6008: LD_INT 70
6010: PPUSH
6011: CALL_OW 67
// end ;
6015: GO 5894
6017: POP
6018: POP
// for i = 1 to 3 do
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_INT 3
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6174
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6035: LD_INT 14
6037: PPUSH
6038: LD_INT 3
6040: PPUSH
6041: LD_INT 5
6043: PPUSH
6044: LD_INT 27
6046: PUSH
6047: LD_INT 28
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 2
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 43807 0 5
// un := CreateVehicle ;
6073: LD_ADDR_VAR 0 2
6077: PUSH
6078: CALL_OW 45
6082: ST_TO_ADDR
// tmp := Add ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6083: LD_ADDR_VAR 0 3
6087: PUSH
6088: LD_VAR 0 3
6092: PPUSH
6093: LD_INT 5
6095: PUSH
6096: LD_VAR 0 3
6100: PUSH
6101: LD_INT 5
6103: ARRAY
6104: PUSH
6105: LD_INT 1
6107: PLUS
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL 44364 0 3
6122: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6123: LD_VAR 0 2
6127: PPUSH
6128: LD_INT 0
6130: PPUSH
6131: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6135: LD_VAR 0 2
6139: PPUSH
6140: LD_INT 23
6142: PPUSH
6143: LD_INT 0
6145: PPUSH
6146: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6150: LD_VAR 0 2
6154: PPUSH
6155: LD_INT 85
6157: PPUSH
6158: LD_INT 152
6160: PPUSH
6161: CALL_OW 111
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// end ;
6172: GO 6032
6174: POP
6175: POP
// coords := [ [ 97 , 143 ] ] ;
6176: LD_ADDR_VAR 0 5
6180: PUSH
6181: LD_INT 97
6183: PUSH
6184: LD_INT 143
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6194: LD_INT 1
6196: PPUSH
6197: LD_VAR 0 3
6201: PUSH
6202: LD_INT 5
6204: ARRAY
6205: PPUSH
6206: LD_VAR 0 5
6210: PPUSH
6211: LD_VAR 0 6
6215: PPUSH
6216: CALL 32542 0 4
// end ; Wait ( 10 10$00 ) ;
6220: LD_INT 21000
6222: PPUSH
6223: CALL_OW 67
// tmp := [ ] ;
6227: LD_ADDR_VAR 0 3
6231: PUSH
6232: EMPTY
6233: ST_TO_ADDR
// w := 1 ;
6234: LD_ADDR_VAR 0 7
6238: PUSH
6239: LD_INT 1
6241: ST_TO_ADDR
// repeat tmp := [ ] ;
6242: LD_ADDR_VAR 0 3
6246: PUSH
6247: EMPTY
6248: ST_TO_ADDR
// if w mod 4 = 0 then
6249: LD_VAR 0 7
6253: PUSH
6254: LD_INT 4
6256: MOD
6257: PUSH
6258: LD_INT 0
6260: EQUAL
6261: IFFALSE 6348
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6263: LD_ADDR_VAR 0 8
6267: PUSH
6268: LD_INT 11
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: LD_INT 24
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 11
6288: PUSH
6289: LD_INT 1
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 24
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 11
6306: PUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 24
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 11
6324: PUSH
6325: LD_INT 1
6327: PUSH
6328: LD_INT 2
6330: PUSH
6331: LD_INT 24
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: ST_TO_ADDR
6346: GO 6450
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6348: LD_ADDR_VAR 0 8
6352: PUSH
6353: LD_INT 14
6355: PUSH
6356: LD_INT 1
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: LD_INT 28
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 14
6373: PUSH
6374: LD_INT 1
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 14
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: LD_INT 28
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 14
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 2
6415: PUSH
6416: LD_INT 29
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 11
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 2
6433: PUSH
6434: LD_INT 24
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: ST_TO_ADDR
// if w mod 3 = 0 then
6450: LD_VAR 0 7
6454: PUSH
6455: LD_INT 3
6457: MOD
6458: PUSH
6459: LD_INT 0
6461: EQUAL
6462: IFFALSE 6538
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6464: LD_ADDR_VAR 0 8
6468: PUSH
6469: LD_VAR 0 8
6473: PPUSH
6474: LD_INT 1
6476: PUSH
6477: LD_VAR 0 8
6481: PUSH
6482: LD_VAR 0 1
6486: ARRAY
6487: PUSH
6488: LD_INT 1
6490: PLUS
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: LD_INT 14
6498: PUSH
6499: LD_INT 1
6501: PUSH
6502: LD_INT 2
6504: PUSH
6505: LD_INT 25
6507: PUSH
6508: LD_INT 28
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 1
6517: PPUSH
6518: LD_INT 2
6520: PPUSH
6521: CALL_OW 12
6525: ARRAY
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL 44364 0 3
6537: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6538: LD_INT 1
6540: PPUSH
6541: LD_VAR 0 8
6545: PPUSH
6546: CALL 32248 0 2
// if GetSide ( ar_dep_w ) = 2 then
6550: LD_INT 45
6552: PPUSH
6553: CALL_OW 255
6557: PUSH
6558: LD_INT 2
6560: EQUAL
6561: IFFALSE 6646
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6563: LD_ADDR_VAR 0 8
6567: PUSH
6568: LD_INT 14
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: LD_INT 2
6576: PUSH
6577: LD_INT 28
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 14
6588: PUSH
6589: LD_INT 1
6591: PUSH
6592: LD_INT 2
6594: PUSH
6595: LD_INT 27
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 14
6606: PUSH
6607: LD_INT 1
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 27
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6627: LD_INT 2
6629: PPUSH
6630: LD_VAR 0 8
6634: PPUSH
6635: CALL 32248 0 2
// wait ( 0 0$50 ) ;
6639: LD_INT 1750
6641: PPUSH
6642: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
6646: LD_INT 35
6648: PPUSH
6649: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
6653: LD_EXP 67
6657: PUSH
6658: LD_INT 1
6660: ARRAY
6661: PPUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 34
6667: PUSH
6668: LD_INT 32
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 72
6683: PUSH
6684: LD_INT 4
6686: GREATEREQUAL
6687: IFFALSE 6646
// wait ( 0 0$10 ) ;
6689: LD_INT 350
6691: PPUSH
6692: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
6696: LD_ADDR_VAR 0 3
6700: PUSH
6701: LD_EXP 67
6705: PUSH
6706: LD_INT 1
6708: ARRAY
6709: PPUSH
6710: LD_INT 3
6712: PUSH
6713: LD_INT 34
6715: PUSH
6716: LD_INT 32
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 72
6731: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
6732: LD_INT 100
6734: PPUSH
6735: CALL_OW 13
6739: PUSH
6740: LD_INT 50
6742: LESS
6743: IFFALSE 6776
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
6745: LD_ADDR_VAR 0 5
6749: PUSH
6750: LD_INT 55
6752: PUSH
6753: LD_INT 7
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 75
6762: PUSH
6763: LD_INT 90
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: ST_TO_ADDR
6774: GO 6805
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 128
6783: PUSH
6784: LD_INT 94
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 180
6793: PUSH
6794: LD_INT 135
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: ST_TO_ADDR
// if w mod 4 = 0 then
6805: LD_VAR 0 7
6809: PUSH
6810: LD_INT 4
6812: MOD
6813: PUSH
6814: LD_INT 0
6816: EQUAL
6817: IFFALSE 6848
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
6819: LD_ADDR_VAR 0 5
6823: PUSH
6824: LD_INT 91
6826: PUSH
6827: LD_INT 58
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 117
6836: PUSH
6837: LD_INT 107
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
6848: LD_INT 1
6850: PPUSH
6851: LD_VAR 0 3
6855: PPUSH
6856: LD_VAR 0 5
6860: PPUSH
6861: LD_VAR 0 6
6865: PPUSH
6866: CALL 32542 0 4
// if mc_vehicles [ 2 ] then
6870: LD_EXP 67
6874: PUSH
6875: LD_INT 2
6877: ARRAY
6878: IFFALSE 6914
// MC_PrepareAttack ( 2 , mc_vehicles [ 2 ] , [ [ 73 , 115 ] ] , flags ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_EXP 67
6887: PUSH
6888: LD_INT 2
6890: ARRAY
6891: PPUSH
6892: LD_INT 73
6894: PUSH
6895: LD_INT 115
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PUSH
6902: EMPTY
6903: LIST
6904: PPUSH
6905: LD_VAR 0 6
6909: PPUSH
6910: CALL 32542 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
6914: LD_INT 19950
6916: PPUSH
6917: LD_INT 26250
6919: PPUSH
6920: CALL_OW 12
6924: PPUSH
6925: CALL_OW 67
// w := w + 1 ;
6929: LD_ADDR_VAR 0 7
6933: PUSH
6934: LD_VAR 0 7
6938: PUSH
6939: LD_INT 1
6941: PLUS
6942: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
6943: LD_INT 94
6945: PPUSH
6946: CALL_OW 301
6950: PUSH
6951: LD_EXP 48
6955: PUSH
6956: LD_INT 1
6958: ARRAY
6959: PPUSH
6960: LD_INT 30
6962: PUSH
6963: LD_INT 3
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PPUSH
6970: CALL_OW 72
6974: NOT
6975: OR
6976: IFFALSE 6242
// end ;
6978: PPOPN 8
6980: END
// every 18 18$00 trigger ar_dep_e do var i , tmp , un , x ;
6981: LD_INT 69
6983: IFFALSE 7358
6985: GO 6987
6987: DISABLE
6988: LD_INT 0
6990: PPUSH
6991: PPUSH
6992: PPUSH
6993: PPUSH
// begin enable ;
6994: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
6995: LD_INT 35
6997: PPUSH
6998: LD_INT 1190
7000: PPUSH
7001: CALL_OW 12
7005: PPUSH
7006: CALL_OW 67
// tmp := [ ] ;
7010: LD_ADDR_VAR 0 2
7014: PUSH
7015: EMPTY
7016: ST_TO_ADDR
// uc_side := 8 ;
7017: LD_ADDR_OWVAR 20
7021: PUSH
7022: LD_INT 8
7024: ST_TO_ADDR
// uc_nation := 2 ;
7025: LD_ADDR_OWVAR 21
7029: PUSH
7030: LD_INT 2
7032: ST_TO_ADDR
// InitHc ;
7033: CALL_OW 19
// for i = 1 to 3 do
7037: LD_ADDR_VAR 0 1
7041: PUSH
7042: DOUBLE
7043: LD_INT 1
7045: DEC
7046: ST_TO_ADDR
7047: LD_INT 3
7049: PUSH
7050: FOR_TO
7051: IFFALSE 7178
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7053: LD_INT 13
7055: PUSH
7056: LD_INT 14
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_INT 2
7068: PPUSH
7069: CALL_OW 12
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PPUSH
7078: LD_INT 5
7080: PPUSH
7081: LD_INT 27
7083: PUSH
7084: LD_INT 28
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 1
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 12
7101: ARRAY
7102: PPUSH
7103: LD_INT 100
7105: PPUSH
7106: CALL 43807 0 5
// un := CreateVehicle ;
7110: LD_ADDR_VAR 0 3
7114: PUSH
7115: CALL_OW 45
7119: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7120: LD_VAR 0 3
7124: PPUSH
7125: LD_INT 4
7127: PPUSH
7128: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7132: LD_VAR 0 3
7136: PPUSH
7137: LD_INT 15
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7147: LD_ADDR_VAR 0 2
7151: PUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 2
7161: PUSH
7162: LD_INT 1
7164: PLUS
7165: PPUSH
7166: LD_VAR 0 3
7170: PPUSH
7171: CALL_OW 1
7175: ST_TO_ADDR
// end ;
7176: GO 7050
7178: POP
7179: POP
// for i = 1 to 4 do
7180: LD_ADDR_VAR 0 1
7184: PUSH
7185: DOUBLE
7186: LD_INT 1
7188: DEC
7189: ST_TO_ADDR
7190: LD_INT 4
7192: PUSH
7193: FOR_TO
7194: IFFALSE 7273
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 6 ) ;
7196: LD_INT 0
7198: PPUSH
7199: LD_INT 1
7201: PPUSH
7202: LD_INT 4
7204: PPUSH
7205: CALL_OW 12
7209: PPUSH
7210: LD_INT 6
7212: PPUSH
7213: CALL_OW 380
// un := CreateHuman ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: CALL_OW 44
7226: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7227: LD_VAR 0 3
7231: PPUSH
7232: LD_INT 15
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7242: LD_ADDR_VAR 0 2
7246: PUSH
7247: LD_VAR 0 2
7251: PPUSH
7252: LD_VAR 0 2
7256: PUSH
7257: LD_INT 1
7259: PLUS
7260: PPUSH
7261: LD_VAR 0 3
7265: PPUSH
7266: CALL_OW 1
7270: ST_TO_ADDR
// end ;
7271: GO 7193
7273: POP
7274: POP
// repeat ComAgressiveMove ( tmp , 210 , 177 ) ;
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_INT 210
7282: PPUSH
7283: LD_INT 177
7285: PPUSH
7286: CALL_OW 114
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7290: LD_ADDR_VAR 0 4
7294: PUSH
7295: LD_INT 10
7297: PPUSH
7298: LD_INT 22
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PPUSH
7308: CALL_OW 70
7312: ST_TO_ADDR
// if x then
7313: LD_VAR 0 4
7317: IFFALSE 7345
// for i in x do
7319: LD_ADDR_VAR 0 1
7323: PUSH
7324: LD_VAR 0 4
7328: PUSH
7329: FOR_IN
7330: IFFALSE 7343
// RemoveUnit ( i ) ;
7332: LD_VAR 0 1
7336: PPUSH
7337: CALL_OW 64
7341: GO 7329
7343: POP
7344: POP
// wait ( 0 0$3 ) ;
7345: LD_INT 105
7347: PPUSH
7348: CALL_OW 67
// until tmp ;
7352: LD_VAR 0 2
7356: IFFALSE 7275
// end ; end_of_file
7358: PPOPN 4
7360: END
// export function Action ; var tmp , p , radar , sols , i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// InGameOn ;
7369: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
7373: LD_EXP 21
7377: PPUSH
7378: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
7382: LD_ADDR_VAR 0 2
7386: PUSH
7387: LD_INT 22
7389: PUSH
7390: LD_INT 1
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PPUSH
7411: CALL_OW 69
7415: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
7416: LD_ADDR_VAR 0 4
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 1
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 34
7433: PUSH
7434: LD_INT 11
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 69
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: ST_TO_ADDR
// for i = 1 to tmp do
7454: LD_ADDR_VAR 0 6
7458: PUSH
7459: DOUBLE
7460: LD_INT 1
7462: DEC
7463: ST_TO_ADDR
7464: LD_VAR 0 2
7468: PUSH
7469: FOR_TO
7470: IFFALSE 7517
// begin if i = 5 then
7472: LD_VAR 0 6
7476: PUSH
7477: LD_INT 5
7479: EQUAL
7480: IFFALSE 7484
// break ;
7482: GO 7517
// sols := Replace ( sols , i , tmp [ i ] ) ;
7484: LD_ADDR_VAR 0 5
7488: PUSH
7489: LD_VAR 0 5
7493: PPUSH
7494: LD_VAR 0 6
7498: PPUSH
7499: LD_VAR 0 2
7503: PUSH
7504: LD_VAR 0 6
7508: ARRAY
7509: PPUSH
7510: CALL_OW 1
7514: ST_TO_ADDR
// end ;
7515: GO 7469
7517: POP
7518: POP
// tmp := ar_force_tmp ;
7519: LD_ADDR_VAR 0 2
7523: PUSH
7524: LD_EXP 39
7528: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
7529: LD_VAR 0 2
7533: PUSH
7534: LD_INT 1
7536: ARRAY
7537: PPUSH
7538: LD_INT 108
7540: PPUSH
7541: LD_INT 139
7543: PPUSH
7544: LD_INT 0
7546: PPUSH
7547: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
7551: LD_VAR 0 2
7555: PUSH
7556: LD_INT 1
7558: ARRAY
7559: PPUSH
7560: LD_EXP 21
7564: PPUSH
7565: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
7569: LD_VAR 0 2
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PPUSH
7578: LD_INT 114
7580: PPUSH
7581: LD_INT 132
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
7591: LD_VAR 0 2
7595: PUSH
7596: LD_INT 3
7598: ARRAY
7599: PPUSH
7600: LD_INT 115
7602: PPUSH
7603: LD_INT 132
7605: PPUSH
7606: LD_INT 0
7608: PPUSH
7609: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
7613: LD_VAR 0 2
7617: PUSH
7618: LD_INT 2
7620: ARRAY
7621: PUSH
7622: LD_VAR 0 2
7626: PUSH
7627: LD_INT 3
7629: ARRAY
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PPUSH
7635: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
7639: LD_VAR 0 4
7643: PPUSH
7644: LD_INT 83
7646: PPUSH
7647: LD_INT 123
7649: PPUSH
7650: CALL_OW 111
// Wait ( 0 0$01 ) ;
7654: LD_INT 35
7656: PPUSH
7657: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
7661: LD_INT 90
7663: PPUSH
7664: LD_INT 144
7666: PPUSH
7667: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
7671: LD_VAR 0 5
7675: PPUSH
7676: LD_INT 88
7678: PPUSH
7679: LD_INT 129
7681: PPUSH
7682: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
7686: LD_ADDR_VAR 0 3
7690: PUSH
7691: LD_INT 92
7693: PUSH
7694: LD_INT 131
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 88
7703: PUSH
7704: LD_INT 127
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 91
7713: PUSH
7714: LD_INT 132
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 92
7723: PUSH
7724: LD_INT 134
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: ST_TO_ADDR
// for i = 1 to sols do
7737: LD_ADDR_VAR 0 6
7741: PUSH
7742: DOUBLE
7743: LD_INT 1
7745: DEC
7746: ST_TO_ADDR
7747: LD_VAR 0 5
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7826
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
7755: LD_VAR 0 5
7759: PUSH
7760: LD_VAR 0 6
7764: ARRAY
7765: PPUSH
7766: LD_VAR 0 3
7770: PUSH
7771: LD_VAR 0 6
7775: ARRAY
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: LD_VAR 0 3
7785: PUSH
7786: LD_VAR 0 6
7790: ARRAY
7791: PUSH
7792: LD_INT 2
7794: ARRAY
7795: PPUSH
7796: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
7800: LD_VAR 0 5
7804: PUSH
7805: LD_VAR 0 6
7809: ARRAY
7810: PPUSH
7811: CALL_OW 197
// AddComHold ( sols ) ;
7815: LD_VAR 0 5
7819: PPUSH
7820: CALL_OW 200
// end ;
7824: GO 7752
7826: POP
7827: POP
// repeat wait ( 0 0$1 ) ;
7828: LD_INT 35
7830: PPUSH
7831: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
7835: LD_VAR 0 5
7839: PUSH
7840: LD_INT 1
7842: ARRAY
7843: PPUSH
7844: LD_INT 92
7846: PPUSH
7847: LD_INT 131
7849: PPUSH
7850: CALL_OW 297
7854: PUSH
7855: LD_INT 4
7857: LESS
7858: IFFALSE 7828
// CenterOnXY ( 96 , 139 ) ;
7860: LD_INT 96
7862: PPUSH
7863: LD_INT 139
7865: PPUSH
7866: CALL_OW 84
// wait ( 0 0$3 ) ;
7870: LD_INT 105
7872: PPUSH
7873: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
7877: LD_INT 111
7879: PPUSH
7880: LD_INT 135
7882: PPUSH
7883: LD_INT 1
7885: PPUSH
7886: LD_INT 25
7888: NEG
7889: PPUSH
7890: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
7894: LD_VAR 0 2
7898: PUSH
7899: LD_INT 2
7901: ARRAY
7902: PPUSH
7903: LD_VAR 0 2
7907: PUSH
7908: LD_INT 1
7910: ARRAY
7911: PPUSH
7912: CALL_OW 250
7916: PUSH
7917: LD_INT 3
7919: PLUS
7920: PPUSH
7921: LD_VAR 0 2
7925: PUSH
7926: LD_INT 1
7928: ARRAY
7929: PPUSH
7930: CALL_OW 251
7934: PPUSH
7935: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
7939: LD_VAR 0 2
7943: PUSH
7944: LD_INT 3
7946: ARRAY
7947: PPUSH
7948: LD_INT 7
7950: PPUSH
7951: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
7955: LD_VAR 0 2
7959: PUSH
7960: LD_INT 2
7962: ARRAY
7963: PPUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_INT 1
7971: ARRAY
7972: PPUSH
7973: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
7977: LD_INT 35
7979: PPUSH
7980: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
7984: LD_VAR 0 2
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: LD_VAR 0 2
7997: PUSH
7998: LD_INT 2
8000: ARRAY
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 5
8009: LESS
8010: IFFALSE 7977
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8012: LD_VAR 0 2
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 2
8025: PUSH
8026: LD_INT 2
8028: ARRAY
8029: PPUSH
8030: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8034: LD_VAR 0 2
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: LD_STRING D1a-Merc1-1
8045: PPUSH
8046: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PPUSH
8059: LD_STRING D1a-FMerc2-1
8061: PPUSH
8062: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8066: LD_VAR 0 2
8070: PUSH
8071: LD_INT 2
8073: ARRAY
8074: PPUSH
8075: LD_VAR 0 2
8079: PUSH
8080: LD_INT 1
8082: ARRAY
8083: PPUSH
8084: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8088: LD_VAR 0 2
8092: PUSH
8093: LD_INT 1
8095: ARRAY
8096: PPUSH
8097: LD_INT 500
8099: PPUSH
8100: CALL_OW 234
// wait ( 0 0$2 ) ;
8104: LD_INT 70
8106: PPUSH
8107: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8111: LD_VAR 0 2
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: LD_INT 2
8122: PPUSH
8123: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8127: LD_INT 10
8129: PPUSH
8130: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8134: LD_VAR 0 2
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_STRING D1a-Merc1-2
8145: PPUSH
8146: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8150: LD_INT 7
8152: PPUSH
8153: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: ARRAY
8165: PPUSH
8166: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8170: LD_VAR 0 2
8174: PUSH
8175: LD_INT 2
8177: ARRAY
8178: PPUSH
8179: LD_INT 10
8181: PPUSH
8182: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8186: LD_VAR 0 2
8190: PUSH
8191: LD_INT 2
8193: ARRAY
8194: PPUSH
8195: LD_STRING D1a-FMerc2-2
8197: PPUSH
8198: CALL_OW 88
// wait ( 0 0$1 ) ;
8202: LD_INT 35
8204: PPUSH
8205: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8209: LD_INT 7
8211: PPUSH
8212: CALL_OW 85
// wait ( 0 0$2 ) ;
8216: LD_INT 70
8218: PPUSH
8219: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8223: LD_EXP 43
8227: PPUSH
8228: LD_STRING D1a-Saliba-1
8230: PPUSH
8231: CALL_OW 91
// KillUnit ( Saliba ) ;
8235: LD_EXP 43
8239: PPUSH
8240: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8244: LD_VAR 0 2
8248: PUSH
8249: LD_INT 3
8251: ARRAY
8252: PPUSH
8253: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8257: LD_EXP 21
8261: PPUSH
8262: CALL_OW 85
// wait ( 0 0$1 ) ;
8266: LD_INT 35
8268: PPUSH
8269: CALL_OW 67
// InGameOff ;
8273: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8277: LD_STRING M1
8279: PPUSH
8280: CALL_OW 337
// game_speed := 4 ;
8284: LD_ADDR_OWVAR 65
8288: PUSH
8289: LD_INT 4
8291: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
8292: LD_INT 111
8294: PPUSH
8295: LD_INT 135
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: CALL_OW 331
// SaveForQuickRestart ;
8305: CALL_OW 22
// ar_run := true ;
8309: LD_ADDR_EXP 5
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8317: LD_INT 35
8319: PPUSH
8320: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
8324: LD_INT 22
8326: PUSH
8327: LD_INT 1
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_INT 91
8336: PUSH
8337: LD_INT 7
8339: PUSH
8340: LD_INT 10
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 7
8359: PPUSH
8360: CALL_OW 256
8364: PUSH
8365: LD_INT 999
8367: LESS
8368: OR
8369: IFFALSE 8317
// if GetSide ( ar_dep_s ) = 2 then
8371: LD_INT 7
8373: PPUSH
8374: CALL_OW 255
8378: PUSH
8379: LD_INT 2
8381: EQUAL
8382: IFFALSE 8394
// SetSide ( ar_dep_s , 1 ) ;
8384: LD_INT 7
8386: PPUSH
8387: LD_INT 1
8389: PPUSH
8390: CALL_OW 235
// end ;
8394: LD_VAR 0 1
8398: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
8399: LD_EXP 5
8403: IFFALSE 8763
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
8411: PPUSH
8412: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
8413: LD_ADDR_VAR 0 2
8417: PUSH
8418: LD_EXP 39
8422: PUSH
8423: LD_EXP 36
8427: PPUSH
8428: LD_INT 2
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: LD_INT 21
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ADD
8461: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_INT 5
8469: PPUSH
8470: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
8474: LD_INT 5
8476: PPUSH
8477: LD_INT 1
8479: PPUSH
8480: CALL_OW 343
// k := 1 ;
8484: LD_ADDR_VAR 0 3
8488: PUSH
8489: LD_INT 1
8491: ST_TO_ADDR
// for i in tmp do
8492: LD_ADDR_VAR 0 1
8496: PUSH
8497: LD_VAR 0 2
8501: PUSH
8502: FOR_IN
8503: IFFALSE 8588
// begin if IsInUnit ( i ) then
8505: LD_VAR 0 1
8509: PPUSH
8510: CALL_OW 310
8514: IFFALSE 8525
// ComExitBuilding ( i ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 122
// if GetClass ( i ) = 3 then
8525: LD_VAR 0 1
8529: PPUSH
8530: CALL_OW 257
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8574
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
8540: LD_VAR 0 1
8544: PPUSH
8545: LD_EXP 40
8549: PUSH
8550: LD_VAR 0 3
8554: ARRAY
8555: PPUSH
8556: CALL_OW 180
// k := k + 1 ;
8560: LD_ADDR_VAR 0 3
8564: PUSH
8565: LD_VAR 0 3
8569: PUSH
8570: LD_INT 1
8572: PLUS
8573: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
8574: LD_VAR 0 1
8578: PPUSH
8579: LD_INT 10
8581: PPUSH
8582: CALL_OW 173
// end ;
8586: GO 8502
8588: POP
8589: POP
// ar_patrol := true ;
8590: LD_ADDR_EXP 7
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
8598: LD_INT 10
8600: PPUSH
8601: CALL_OW 67
// for i in tmp do
8605: LD_ADDR_VAR 0 1
8609: PUSH
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_IN
8616: IFFALSE 8644
// if not HasTask ( i ) then
8618: LD_VAR 0 1
8622: PPUSH
8623: CALL_OW 314
8627: NOT
8628: IFFALSE 8642
// ComMoveToArea ( i , escape_area ) ;
8630: LD_VAR 0 1
8634: PPUSH
8635: LD_INT 10
8637: PPUSH
8638: CALL_OW 113
8642: GO 8615
8644: POP
8645: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
8646: LD_ADDR_VAR 0 3
8650: PUSH
8651: LD_VAR 0 2
8655: PPUSH
8656: LD_INT 95
8658: PUSH
8659: LD_INT 10
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// if k then
8671: LD_VAR 0 3
8675: IFFALSE 8744
// for i in k do
8677: LD_ADDR_VAR 0 1
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: FOR_IN
8688: IFFALSE 8742
// begin if IsInUnit ( i ) then
8690: LD_VAR 0 1
8694: PPUSH
8695: CALL_OW 310
8699: IFFALSE 8715
// RemoveUnit ( IsInUnit ( i ) ) ;
8701: LD_VAR 0 1
8705: PPUSH
8706: CALL_OW 310
8710: PPUSH
8711: CALL_OW 64
// RemoveUnit ( i ) ;
8715: LD_VAR 0 1
8719: PPUSH
8720: CALL_OW 64
// tmp := tmp diff i ;
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 2
8733: PUSH
8734: LD_VAR 0 1
8738: DIFF
8739: ST_TO_ADDR
// end ;
8740: GO 8687
8742: POP
8743: POP
// until tmp = [ ] ;
8744: LD_VAR 0 2
8748: PUSH
8749: EMPTY
8750: EQUAL
8751: IFFALSE 8598
// ChangeSideFog ( 5 , 5 ) ;
8753: LD_INT 5
8755: PPUSH
8756: LD_INT 5
8758: PPUSH
8759: CALL_OW 343
// end ;
8763: PPOPN 3
8765: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
8766: LD_EXP 7
8770: IFFALSE 9060
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
8778: PPUSH
8779: PPUSH
// begin uc_side := 2 ;
8780: LD_ADDR_OWVAR 20
8784: PUSH
8785: LD_INT 2
8787: ST_TO_ADDR
// uc_nation := 2 ;
8788: LD_ADDR_OWVAR 21
8792: PUSH
8793: LD_INT 2
8795: ST_TO_ADDR
// InitHc ;
8796: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
8800: LD_INT 1
8802: PPUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_INT 6
8808: PPUSH
8809: CALL_OW 380
// un := CreateHuman ;
8813: LD_ADDR_VAR 0 2
8817: PUSH
8818: CALL_OW 44
8822: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
8823: LD_INT 14
8825: PPUSH
8826: LD_INT 1
8828: PPUSH
8829: LD_INT 1
8831: PPUSH
8832: LD_INT 27
8834: PPUSH
8835: LD_INT 98
8837: PPUSH
8838: CALL 43807 0 5
// veh := CreateVehicle ;
8842: LD_ADDR_VAR 0 3
8846: PUSH
8847: CALL_OW 45
8851: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
8852: LD_VAR 0 3
8856: PPUSH
8857: LD_INT 4
8859: PPUSH
8860: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
8864: LD_VAR 0 3
8868: PPUSH
8869: LD_INT 179
8871: PPUSH
8872: LD_INT 135
8874: PPUSH
8875: LD_INT 0
8877: PPUSH
8878: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_VAR 0 3
8891: PPUSH
8892: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
8896: LD_VAR 0 2
8900: PPUSH
8901: LD_INT 126
8903: PPUSH
8904: LD_INT 133
8906: PPUSH
8907: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
8911: LD_INT 10
8913: PPUSH
8914: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
8918: LD_INT 1
8920: PPUSH
8921: LD_VAR 0 3
8925: PPUSH
8926: CALL_OW 292
8930: PUSH
8931: LD_VAR 0 3
8935: PPUSH
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 9
8946: LESS
8947: OR
8948: IFFALSE 8911
// ComHold ( veh ) ;
8950: LD_VAR 0 3
8954: PPUSH
8955: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: LD_STRING D2aa-Ar1-1
8966: PPUSH
8967: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
8971: LD_VAR 0 2
8975: PPUSH
8976: LD_INT 177
8978: PPUSH
8979: LD_INT 96
8981: PPUSH
8982: CALL_OW 111
// AddComExitVehicle ( un ) ;
8986: LD_VAR 0 2
8990: PPUSH
8991: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8995: LD_INT 35
8997: PPUSH
8998: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_INT 69
9009: PPUSH
9010: CALL_OW 296
9014: PUSH
9015: LD_INT 15
9017: LESS
9018: IFFALSE 8995
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9020: LD_ADDR_EXP 48
9024: PUSH
9025: LD_EXP 48
9029: PPUSH
9030: LD_INT 3
9032: PUSH
9033: LD_EXP 48
9037: PUSH
9038: LD_INT 3
9040: ARRAY
9041: PUSH
9042: LD_INT 1
9044: PLUS
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL 44364 0 3
9059: ST_TO_ADDR
// end ;
9060: PPOPN 3
9062: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9063: LD_INT 7
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_INT 7
9077: PPUSH
9078: CALL_OW 301
9082: OR
9083: IFFALSE 11507
9085: GO 9087
9087: DISABLE
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9092: LD_ADDR_VAR 0 1
9096: PUSH
9097: LD_EXP 36
9101: PPUSH
9102: LD_INT 21
9104: PUSH
9105: LD_INT 3
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PPUSH
9112: CALL_OW 72
9116: PUSH
9117: FOR_IN
9118: IFFALSE 9134
// SetSide ( i , 1 ) ;
9120: LD_VAR 0 1
9124: PPUSH
9125: LD_INT 1
9127: PPUSH
9128: CALL_OW 235
9132: GO 9117
9134: POP
9135: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9136: LD_ADDR_VAR 0 2
9140: PUSH
9141: LD_INT 46
9143: PUSH
9144: LD_INT 41
9146: PUSH
9147: EMPTY
9148: LIST
9149: LIST
9150: PUSH
9151: LD_INT 50
9153: PUSH
9154: LD_INT 25
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 57
9163: PUSH
9164: LD_INT 75
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: LD_INT 75
9173: PUSH
9174: LD_INT 89
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 51
9183: PUSH
9184: LD_INT 45
9186: PUSH
9187: EMPTY
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 95
9193: PUSH
9194: LD_INT 95
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 77
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: PUSH
9211: LD_INT 101
9213: PUSH
9214: LD_INT 76
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PUSH
9221: LD_INT 118
9223: PUSH
9224: LD_INT 81
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 139
9233: PUSH
9234: LD_INT 97
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 129
9243: PUSH
9244: LD_INT 114
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PUSH
9251: LD_INT 154
9253: PUSH
9254: LD_INT 111
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: ST_TO_ADDR
// base_captured := true ;
9275: LD_ADDR_EXP 6
9279: PUSH
9280: LD_INT 1
9282: ST_TO_ADDR
// DialogueOn ;
9283: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
9287: LD_EXP 21
9291: PPUSH
9292: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
9296: LD_EXP 21
9300: PPUSH
9301: LD_STRING D2-JMM-1
9303: PPUSH
9304: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9308: LD_EXP 30
9312: PPUSH
9313: LD_STRING D2-Pow-1
9315: PPUSH
9316: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
9320: LD_EXP 21
9324: PPUSH
9325: LD_STRING D2-JMM-2
9327: PPUSH
9328: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
9332: LD_EXP 30
9336: PPUSH
9337: LD_STRING D2-Pow-2
9339: PPUSH
9340: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
9344: LD_EXP 21
9348: PPUSH
9349: LD_STRING D2-JMM-3
9351: PPUSH
9352: CALL_OW 88
// DialogueOff ;
9356: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9360: LD_STRING M2
9362: PPUSH
9363: CALL_OW 337
// Wait ( 0 0$2 ) ;
9367: LD_INT 70
9369: PPUSH
9370: CALL_OW 67
// if IsOk ( Gary ) then
9374: LD_EXP 32
9378: PPUSH
9379: CALL_OW 302
9383: IFFALSE 9397
// Say ( Gary , D2a-Gary-1 ) ;
9385: LD_EXP 32
9389: PPUSH
9390: LD_STRING D2a-Gary-1
9392: PPUSH
9393: CALL_OW 88
// if IsOk ( Bobby ) then
9397: LD_EXP 24
9401: PPUSH
9402: CALL_OW 302
9406: IFFALSE 9420
// Say ( Bobby , D2a-Bobby-1 ) ;
9408: LD_EXP 24
9412: PPUSH
9413: LD_STRING D2a-Bobby-1
9415: PPUSH
9416: CALL_OW 88
// if IsOk ( Cyrus ) then
9420: LD_EXP 25
9424: PPUSH
9425: CALL_OW 302
9429: IFFALSE 9443
// Say ( Cyrus , D2a-Cyrus-1 ) ;
9431: LD_EXP 25
9435: PPUSH
9436: LD_STRING D2a-Cyrus-1
9438: PPUSH
9439: CALL_OW 88
// if IsOk ( Lisa ) then
9443: LD_EXP 22
9447: PPUSH
9448: CALL_OW 302
9452: IFFALSE 9466
// Say ( Lisa , D2a-Lisa-1 ) ;
9454: LD_EXP 22
9458: PPUSH
9459: LD_STRING D2a-Lisa-1
9461: PPUSH
9462: CALL_OW 88
// if IsOk ( Frank ) then
9466: LD_EXP 33
9470: PPUSH
9471: CALL_OW 302
9475: IFFALSE 9489
// Say ( Frank , D2a-Frank-1 ) ;
9477: LD_EXP 33
9481: PPUSH
9482: LD_STRING D2a-Frank-1
9484: PPUSH
9485: CALL_OW 88
// if IsOk ( Cornel ) then
9489: LD_EXP 31
9493: PPUSH
9494: CALL_OW 302
9498: IFFALSE 9512
// Say ( Cornel , D2a-Corn-1 ) ;
9500: LD_EXP 31
9504: PPUSH
9505: LD_STRING D2a-Corn-1
9507: PPUSH
9508: CALL_OW 88
// if IsOk ( Donaldson ) then
9512: LD_EXP 23
9516: PPUSH
9517: CALL_OW 302
9521: IFFALSE 9535
// Say ( Donaldson , D2a-Don-1 ) ;
9523: LD_EXP 23
9527: PPUSH
9528: LD_STRING D2a-Don-1
9530: PPUSH
9531: CALL_OW 88
// if IsOk ( Brown ) then
9535: LD_EXP 27
9539: PPUSH
9540: CALL_OW 302
9544: IFFALSE 9558
// Say ( Brown , D2a-Brown-1 ) ;
9546: LD_EXP 27
9550: PPUSH
9551: LD_STRING D2a-Brown-1
9553: PPUSH
9554: CALL_OW 88
// Wait ( 0 0$30 ) ;
9558: LD_INT 1050
9560: PPUSH
9561: CALL_OW 67
// if IsOk ( Frank ) then
9565: LD_EXP 33
9569: PPUSH
9570: CALL_OW 302
9574: IFFALSE 9840
// begin DialogueOn ;
9576: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
9580: LD_EXP 21
9584: PUSH
9585: LD_EXP 33
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
9598: LD_EXP 33
9602: PPUSH
9603: LD_STRING D3F-Frank-1
9605: PPUSH
9606: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
9610: LD_EXP 21
9614: PPUSH
9615: LD_STRING D3F-JMM-1
9617: PPUSH
9618: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
9622: LD_EXP 33
9626: PPUSH
9627: LD_STRING D3F-Frank-2
9629: PPUSH
9630: CALL_OW 88
// case Query ( QFrank ) of 1 :
9634: LD_STRING QFrank
9636: PPUSH
9637: CALL_OW 97
9641: PUSH
9642: LD_INT 1
9644: DOUBLE
9645: EQUAL
9646: IFTRUE 9650
9648: GO 9673
9650: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
9651: LD_EXP 21
9655: PPUSH
9656: LD_STRING D3Fa-JMM-1
9658: PPUSH
9659: CALL_OW 88
// us_scout := 1 ;
9663: LD_ADDR_EXP 8
9667: PUSH
9668: LD_INT 1
9670: ST_TO_ADDR
// end ; 2 :
9671: GO 9836
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9803
9681: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
9682: LD_EXP 21
9686: PPUSH
9687: LD_STRING D3Fb-JMM-1
9689: PPUSH
9690: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
9694: LD_EXP 33
9698: PPUSH
9699: LD_STRING D3Fb-Frank-1
9701: PPUSH
9702: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
9706: LD_STRING QFrank2
9708: PPUSH
9709: CALL_OW 97
9713: PUSH
9714: LD_INT 1
9716: DOUBLE
9717: EQUAL
9718: IFTRUE 9722
9720: GO 9769
9722: POP
// begin us_scout := 2 ;
9723: LD_ADDR_EXP 8
9727: PUSH
9728: LD_INT 2
9730: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
9731: LD_EXP 21
9735: PPUSH
9736: LD_STRING D3Fba-JMM-1
9738: PPUSH
9739: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
9743: LD_EXP 33
9747: PPUSH
9748: LD_STRING D3Fba-Frank-1
9750: PPUSH
9751: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
9755: LD_EXP 21
9759: PPUSH
9760: LD_STRING D3Fba-JMM-2
9762: PPUSH
9763: CALL_OW 88
// end ; 2 :
9767: GO 9801
9769: LD_INT 2
9771: DOUBLE
9772: EQUAL
9773: IFTRUE 9777
9775: GO 9800
9777: POP
// begin us_scout := 0 ;
9778: LD_ADDR_EXP 8
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
9786: LD_EXP 21
9790: PPUSH
9791: LD_STRING D3Fbb-JMM-1
9793: PPUSH
9794: CALL_OW 88
// end ; end ;
9798: GO 9801
9800: POP
// end ; 3 :
9801: GO 9836
9803: LD_INT 3
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9835
9811: POP
// begin us_scout := - 1 ;
9812: LD_ADDR_EXP 8
9816: PUSH
9817: LD_INT 1
9819: NEG
9820: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
9821: LD_EXP 21
9825: PPUSH
9826: LD_STRING D3Fc-JMM-1
9828: PPUSH
9829: CALL_OW 88
// end ; end ;
9833: GO 9836
9835: POP
// DialogueOff ;
9836: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
9840: LD_EXP 8
9844: PUSH
9845: LD_INT 1
9847: NEG
9848: PUSH
9849: LD_INT 0
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: IN
9856: IFFALSE 9860
// exit ;
9858: GO 11507
// if us_scout in [ 1 , 2 ] then
9860: LD_EXP 8
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: IN
9875: IFFALSE 10574
// begin if IsInUnit ( Frank ) then
9877: LD_EXP 33
9881: PPUSH
9882: CALL_OW 310
9886: IFFALSE 9897
// ComExitBuilding ( Frank ) ;
9888: LD_EXP 33
9892: PPUSH
9893: CALL_OW 122
// if IsDrivenBy ( Frank ) then
9897: LD_EXP 33
9901: PPUSH
9902: CALL_OW 311
9906: IFFALSE 9917
// ComExitVehicle ( Frank ) ;
9908: LD_EXP 33
9912: PPUSH
9913: CALL_OW 121
// SetSide ( Frank , 4 ) ;
9917: LD_EXP 33
9921: PPUSH
9922: LD_INT 4
9924: PPUSH
9925: CALL_OW 235
// wait ( 0 0$1 ) ;
9929: LD_INT 35
9931: PPUSH
9932: CALL_OW 67
// if us_scout = 2 then
9936: LD_EXP 8
9940: PUSH
9941: LD_INT 2
9943: EQUAL
9944: IFFALSE 10312
// begin ComMoveXY ( Frank , 75 , 63 ) ;
9946: LD_EXP 33
9950: PPUSH
9951: LD_INT 75
9953: PPUSH
9954: LD_INT 63
9956: PPUSH
9957: CALL_OW 111
// AddComHold ( Frank ) ;
9961: LD_EXP 33
9965: PPUSH
9966: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
9970: LD_EXP 33
9974: PPUSH
9975: LD_INT 770
9977: PPUSH
9978: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
9982: LD_EXP 33
9986: PPUSH
9987: LD_INT 100
9989: PPUSH
9990: LD_INT 75
9992: PPUSH
9993: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
9997: LD_EXP 33
10001: PPUSH
10002: LD_INT 123
10004: PPUSH
10005: LD_INT 103
10007: PPUSH
10008: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10012: LD_EXP 33
10016: PPUSH
10017: LD_INT 138
10019: PPUSH
10020: LD_INT 108
10022: PPUSH
10023: CALL_OW 171
// AddComHold ( Frank ) ;
10027: LD_EXP 33
10031: PPUSH
10032: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10036: LD_INT 35
10038: PPUSH
10039: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10043: LD_EXP 33
10047: PPUSH
10048: LD_INT 138
10050: PPUSH
10051: LD_INT 108
10053: PPUSH
10054: CALL_OW 307
10058: IFFALSE 10036
// AddComMoveXY ( Frank , 125 , 132 ) ;
10060: LD_EXP 33
10064: PPUSH
10065: LD_INT 125
10067: PPUSH
10068: LD_INT 132
10070: PPUSH
10071: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10075: LD_INT 35
10077: PPUSH
10078: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10082: LD_INT 1
10084: PPUSH
10085: LD_EXP 33
10089: PPUSH
10090: CALL_OW 292
10094: PUSH
10095: LD_EXP 33
10099: PPUSH
10100: LD_INT 7
10102: PPUSH
10103: CALL_OW 296
10107: PUSH
10108: LD_INT 7
10110: LESS
10111: OR
10112: IFFALSE 10075
// DialogueOn ;
10114: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10118: LD_EXP 33
10122: PPUSH
10123: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10127: LD_INT 10
10129: PPUSH
10130: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10134: LD_EXP 21
10138: PPUSH
10139: LD_STRING D4Fa-JMM-1
10141: PPUSH
10142: CALL_OW 88
// for i in points do
10146: LD_ADDR_VAR 0 1
10150: PUSH
10151: LD_VAR 0 2
10155: PUSH
10156: FOR_IN
10157: IFFALSE 10215
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10159: LD_VAR 0 1
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PPUSH
10168: LD_VAR 0 1
10172: PUSH
10173: LD_INT 2
10175: ARRAY
10176: PPUSH
10177: LD_INT 1
10179: PPUSH
10180: LD_INT 20
10182: NEG
10183: PPUSH
10184: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10188: LD_VAR 0 1
10192: PUSH
10193: LD_INT 1
10195: ARRAY
10196: PPUSH
10197: LD_VAR 0 1
10201: PUSH
10202: LD_INT 2
10204: ARRAY
10205: PPUSH
10206: LD_INT 1
10208: PPUSH
10209: CALL_OW 331
// end ;
10213: GO 10156
10215: POP
10216: POP
// dwait ( 0 0$0.5 ) ;
10217: LD_INT 18
10219: PPUSH
10220: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
10224: LD_INT 42
10226: PPUSH
10227: LD_INT 27
10229: PPUSH
10230: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
10234: LD_EXP 33
10238: PPUSH
10239: LD_STRING D4Fa-Frank-1
10241: PPUSH
10242: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
10246: LD_INT 18
10248: PPUSH
10249: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
10253: LD_EXP 21
10257: PPUSH
10258: LD_STRING D4Fa-JMM-2
10260: PPUSH
10261: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
10265: LD_INT 118
10267: PPUSH
10268: LD_INT 80
10270: PPUSH
10271: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
10275: LD_EXP 33
10279: PPUSH
10280: LD_STRING D4Fa-Frank-2
10282: PPUSH
10283: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
10287: LD_INT 10
10289: PPUSH
10290: CALL_OW 68
// DialogueOff ;
10294: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10298: LD_EXP 33
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 235
// end else
10310: GO 10574
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
10312: LD_INT 2
10314: PPUSH
10315: LD_INT 4
10317: PPUSH
10318: LD_INT 2
10320: PPUSH
10321: LD_INT 1
10323: PPUSH
10324: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
10328: LD_EXP 33
10332: PPUSH
10333: LD_INT 75
10335: PPUSH
10336: LD_INT 63
10338: PPUSH
10339: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
10343: LD_EXP 33
10347: PPUSH
10348: LD_INT 175
10350: PPUSH
10351: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
10355: LD_EXP 33
10359: PPUSH
10360: LD_INT 102
10362: PPUSH
10363: LD_INT 76
10365: PPUSH
10366: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
10370: LD_EXP 33
10374: PPUSH
10375: LD_INT 108
10377: PPUSH
10378: LD_INT 70
10380: PPUSH
10381: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10385: LD_INT 35
10387: PPUSH
10388: CALL_OW 67
// until See ( 2 , Frank ) ;
10392: LD_INT 2
10394: PPUSH
10395: LD_EXP 33
10399: PPUSH
10400: CALL_OW 292
10404: IFFALSE 10385
// ComMoveXY ( Frank , 112 , 118 ) ;
10406: LD_EXP 33
10410: PPUSH
10411: LD_INT 112
10413: PPUSH
10414: LD_INT 118
10416: PPUSH
10417: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
10421: LD_EXP 33
10425: PPUSH
10426: CALL_OW 256
10430: PUSH
10431: LD_INT 750
10433: GREATEREQUAL
10434: IFFALSE 10448
// SetLives ( Frank , 700 ) ;
10436: LD_EXP 33
10440: PPUSH
10441: LD_INT 700
10443: PPUSH
10444: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
10448: LD_INT 35
10450: PPUSH
10451: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
10455: LD_INT 1
10457: PPUSH
10458: LD_EXP 33
10462: PPUSH
10463: CALL_OW 292
10467: PUSH
10468: LD_EXP 33
10472: PPUSH
10473: LD_INT 7
10475: PPUSH
10476: CALL_OW 296
10480: PUSH
10481: LD_INT 17
10483: LESS
10484: OR
10485: IFFALSE 10448
// DialogueOn ;
10487: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10491: LD_EXP 33
10495: PPUSH
10496: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
10500: LD_EXP 33
10504: PPUSH
10505: LD_STRING D4Fb-Frank-1
10507: PPUSH
10508: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
10512: LD_EXP 21
10516: PPUSH
10517: LD_STRING D4Fb-JMM-1
10519: PPUSH
10520: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
10524: LD_INT 2
10526: PPUSH
10527: LD_STRING D4Fb-FSci1-1
10529: PPUSH
10530: CALL 15155 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
10534: LD_EXP 33
10538: PPUSH
10539: LD_STRING D4Fb-Frank-2
10541: PPUSH
10542: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
10546: LD_EXP 21
10550: PPUSH
10551: LD_STRING D4Fb-JMM-2
10553: PPUSH
10554: CALL_OW 88
// DialogueOff ;
10558: CALL_OW 7
// SetSide ( Frank , 1 ) ;
10562: LD_EXP 33
10566: PPUSH
10567: LD_INT 1
10569: PPUSH
10570: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
10574: LD_EXP 34
10578: PPUSH
10579: CALL_OW 302
10583: PUSH
10584: LD_EXP 33
10588: NOT
10589: AND
10590: IFFALSE 10738
// begin DialogueOn ;
10592: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
10596: LD_EXP 21
10600: PUSH
10601: LD_EXP 34
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
10614: LD_EXP 34
10618: PPUSH
10619: LD_STRING D3Y-Yam-1
10621: PPUSH
10622: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
10626: LD_EXP 21
10630: PPUSH
10631: LD_STRING D3Y-JMM-1
10633: PPUSH
10634: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
10638: LD_EXP 34
10642: PPUSH
10643: LD_STRING D3Y-Yam-2
10645: PPUSH
10646: CALL_OW 88
// case Query ( QYamoko ) of 1 :
10650: LD_STRING QYamoko
10652: PPUSH
10653: CALL_OW 97
10657: PUSH
10658: LD_INT 1
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10701
10666: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
10667: LD_EXP 21
10671: PPUSH
10672: LD_STRING D3Ya-JMM-1
10674: PPUSH
10675: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
10679: LD_EXP 34
10683: PPUSH
10684: LD_STRING D3Ya-Yam-1
10686: PPUSH
10687: CALL_OW 88
// us_scout := 1 ;
10691: LD_ADDR_EXP 8
10695: PUSH
10696: LD_INT 1
10698: ST_TO_ADDR
// end ; 2 :
10699: GO 10734
10701: LD_INT 2
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10733
10709: POP
// begin us_scout := - 1 ;
10710: LD_ADDR_EXP 8
10714: PUSH
10715: LD_INT 1
10717: NEG
10718: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
10719: LD_EXP 21
10723: PPUSH
10724: LD_STRING D3Yb-JMM-1
10726: PPUSH
10727: CALL_OW 88
// end ; end ;
10731: GO 10734
10733: POP
// DialogueOff ;
10734: CALL_OW 7
// end ; if Frank then
10738: LD_EXP 33
10742: IFFALSE 10746
// exit ;
10744: GO 11507
// if us_scout in [ - 1 , 0 ] then
10746: LD_EXP 8
10750: PUSH
10751: LD_INT 1
10753: NEG
10754: PUSH
10755: LD_INT 0
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: IN
10762: IFFALSE 10766
// exit ;
10764: GO 11507
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
10766: LD_ADDR_EXP 8
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 2
10776: PUSH
10777: LD_INT 1
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: PUSH
10785: LD_OWVAR 67
10789: ARRAY
10790: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
10791: LD_EXP 8
10795: PUSH
10796: LD_INT 1
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: IN
10806: IFFALSE 11507
// begin if IsInUnit ( Kikuchi ) then
10808: LD_EXP 34
10812: PPUSH
10813: CALL_OW 310
10817: IFFALSE 10828
// ComExitBuilding ( Kikuchi ) ;
10819: LD_EXP 34
10823: PPUSH
10824: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
10828: LD_EXP 34
10832: PPUSH
10833: CALL_OW 311
10837: IFFALSE 10848
// ComExitVehicle ( Kikuchi ) ;
10839: LD_EXP 34
10843: PPUSH
10844: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
10848: LD_EXP 34
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 235
// wait ( 0 0$1 ) ;
10860: LD_INT 35
10862: PPUSH
10863: CALL_OW 67
// if us_scout = 2 then
10867: LD_EXP 8
10871: PUSH
10872: LD_INT 2
10874: EQUAL
10875: IFFALSE 11255
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
10877: LD_EXP 34
10881: PPUSH
10882: LD_INT 75
10884: PPUSH
10885: LD_INT 63
10887: PPUSH
10888: CALL_OW 111
// AddComHold ( Kikuchi ) ;
10892: LD_EXP 34
10896: PPUSH
10897: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
10901: LD_EXP 34
10905: PPUSH
10906: LD_INT 770
10908: PPUSH
10909: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
10913: LD_EXP 34
10917: PPUSH
10918: LD_INT 100
10920: PPUSH
10921: LD_INT 75
10923: PPUSH
10924: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
10928: LD_EXP 34
10932: PPUSH
10933: LD_INT 123
10935: PPUSH
10936: LD_INT 103
10938: PPUSH
10939: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
10943: LD_EXP 34
10947: PPUSH
10948: LD_INT 138
10950: PPUSH
10951: LD_INT 108
10953: PPUSH
10954: CALL_OW 171
// AddComHold ( Kikuchi ) ;
10958: LD_EXP 34
10962: PPUSH
10963: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10967: LD_INT 35
10969: PPUSH
10970: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
10974: LD_EXP 34
10978: PPUSH
10979: LD_INT 138
10981: PPUSH
10982: LD_INT 108
10984: PPUSH
10985: CALL_OW 307
10989: IFFALSE 10967
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
10991: LD_EXP 34
10995: PPUSH
10996: LD_INT 125
10998: PPUSH
10999: LD_INT 132
11001: PPUSH
11002: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11006: LD_INT 35
11008: PPUSH
11009: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11013: LD_INT 1
11015: PPUSH
11016: LD_EXP 34
11020: PPUSH
11021: CALL_OW 292
11025: PUSH
11026: LD_EXP 34
11030: PPUSH
11031: LD_INT 7
11033: PPUSH
11034: CALL_OW 296
11038: PUSH
11039: LD_INT 7
11041: LESS
11042: OR
11043: IFFALSE 11006
// DialogueOn ;
11045: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11049: LD_EXP 34
11053: PPUSH
11054: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11058: LD_INT 10
11060: PPUSH
11061: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11065: LD_EXP 34
11069: PPUSH
11070: LD_STRING D4Ya-Yam-1
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11077: LD_EXP 21
11081: PPUSH
11082: LD_STRING D4Ya-JMM-1
11084: PPUSH
11085: CALL_OW 88
// for i in points do
11089: LD_ADDR_VAR 0 1
11093: PUSH
11094: LD_VAR 0 2
11098: PUSH
11099: FOR_IN
11100: IFFALSE 11158
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11102: LD_VAR 0 1
11106: PUSH
11107: LD_INT 1
11109: ARRAY
11110: PPUSH
11111: LD_VAR 0 1
11115: PUSH
11116: LD_INT 2
11118: ARRAY
11119: PPUSH
11120: LD_INT 1
11122: PPUSH
11123: LD_INT 20
11125: NEG
11126: PPUSH
11127: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11131: LD_VAR 0 1
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 1
11144: PUSH
11145: LD_INT 2
11147: ARRAY
11148: PPUSH
11149: LD_INT 1
11151: PPUSH
11152: CALL_OW 331
// end ;
11156: GO 11099
11158: POP
11159: POP
// dwait ( 0 0$0.5 ) ;
11160: LD_INT 18
11162: PPUSH
11163: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11167: LD_INT 42
11169: PPUSH
11170: LD_INT 27
11172: PPUSH
11173: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11177: LD_EXP 34
11181: PPUSH
11182: LD_STRING D4Ya-Yam-2
11184: PPUSH
11185: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11189: LD_INT 18
11191: PPUSH
11192: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11196: LD_INT 118
11198: PPUSH
11199: LD_INT 80
11201: PPUSH
11202: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11206: LD_EXP 21
11210: PPUSH
11211: LD_STRING D4Ya-JMM-2
11213: PPUSH
11214: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
11218: LD_EXP 34
11222: PPUSH
11223: LD_STRING D4Ya-Yam-3
11225: PPUSH
11226: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11230: LD_INT 10
11232: PPUSH
11233: CALL_OW 68
// DialogueOff ;
11237: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11241: LD_EXP 34
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: CALL_OW 235
// end else
11253: GO 11507
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11255: LD_INT 2
11257: PPUSH
11258: LD_INT 4
11260: PPUSH
11261: LD_INT 2
11263: PPUSH
11264: LD_INT 1
11266: PPUSH
11267: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
11271: LD_EXP 34
11275: PPUSH
11276: LD_INT 75
11278: PPUSH
11279: LD_INT 63
11281: PPUSH
11282: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
11286: LD_EXP 34
11290: PPUSH
11291: LD_INT 175
11293: PPUSH
11294: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
11298: LD_EXP 34
11302: PPUSH
11303: LD_INT 102
11305: PPUSH
11306: LD_INT 76
11308: PPUSH
11309: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
11313: LD_EXP 34
11317: PPUSH
11318: LD_INT 108
11320: PPUSH
11321: LD_INT 70
11323: PPUSH
11324: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11328: LD_INT 35
11330: PPUSH
11331: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
11335: LD_INT 2
11337: PPUSH
11338: LD_EXP 34
11342: PPUSH
11343: CALL_OW 292
11347: IFFALSE 11328
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
11349: LD_EXP 34
11353: PPUSH
11354: LD_INT 112
11356: PPUSH
11357: LD_INT 118
11359: PPUSH
11360: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
11364: LD_EXP 34
11368: PPUSH
11369: CALL_OW 256
11373: PUSH
11374: LD_INT 750
11376: GREATEREQUAL
11377: IFFALSE 11391
// SetLives ( Kikuchi , 700 ) ;
11379: LD_EXP 34
11383: PPUSH
11384: LD_INT 700
11386: PPUSH
11387: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11391: LD_INT 35
11393: PPUSH
11394: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
11398: LD_INT 1
11400: PPUSH
11401: LD_EXP 34
11405: PPUSH
11406: CALL_OW 292
11410: PUSH
11411: LD_EXP 34
11415: PPUSH
11416: LD_INT 7
11418: PPUSH
11419: CALL_OW 296
11423: PUSH
11424: LD_INT 17
11426: LESS
11427: OR
11428: IFFALSE 11391
// DialogueOn ;
11430: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11434: LD_EXP 34
11438: PPUSH
11439: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
11443: LD_EXP 34
11447: PPUSH
11448: LD_STRING D4Yb-Yam-1
11450: PPUSH
11451: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
11455: LD_EXP 21
11459: PPUSH
11460: LD_STRING D4Yb-JMM-1
11462: PPUSH
11463: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
11467: LD_EXP 34
11471: PPUSH
11472: LD_STRING D4Yb-Yam-2
11474: PPUSH
11475: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
11479: LD_EXP 21
11483: PPUSH
11484: LD_STRING D4Yb-JMM-2
11486: PPUSH
11487: CALL_OW 88
// DialogueOff ;
11491: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
11495: LD_EXP 34
11499: PPUSH
11500: LD_INT 1
11502: PPUSH
11503: CALL_OW 235
// end ; end ; end ;
11507: PPOPN 2
11509: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
11510: LD_EXP 6
11514: IFFALSE 12547
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
11523: PPUSH
11524: PPUSH
// begin enable ;
11525: ENABLE
// if not seen [ 1 ] then
11526: LD_EXP 9
11530: PUSH
11531: LD_INT 1
11533: ARRAY
11534: NOT
11535: IFFALSE 11715
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
11537: LD_ADDR_VAR 0 2
11541: PUSH
11542: LD_INT 22
11544: PUSH
11545: LD_INT 2
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 25
11557: PUSH
11558: LD_INT 11
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 33
11567: PUSH
11568: LD_INT 4
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: ST_TO_ADDR
// if tmp then
11589: LD_VAR 0 2
11593: IFFALSE 11715
// for i in tmp do
11595: LD_ADDR_VAR 0 1
11599: PUSH
11600: LD_VAR 0 2
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11713
// if See ( 1 , i ) then
11608: LD_INT 1
11610: PPUSH
11611: LD_VAR 0 1
11615: PPUSH
11616: CALL_OW 292
11620: IFFALSE 11711
// begin seen := Replace ( seen , 1 , true ) ;
11622: LD_ADDR_EXP 9
11626: PUSH
11627: LD_EXP 9
11631: PPUSH
11632: LD_INT 1
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 1
11642: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11643: LD_INT 1
11645: PPUSH
11646: CALL 14977 0 1
11650: IFFALSE 11711
// begin DialogueOn ;
11652: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11665: LD_INT 10
11667: PPUSH
11668: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 1
11679: PPUSH
11680: LD_STRING D5a-Sol2-1
11682: PPUSH
11683: CALL 15155 0 2
11687: ST_TO_ADDR
// if not un then
11688: LD_VAR 0 3
11692: NOT
11693: IFFALSE 11705
// SayRand ( sex_female , D5a-FSol2-1 ) ;
11695: LD_INT 2
11697: PPUSH
11698: LD_STRING D5a-FSol2-1
11700: PPUSH
11701: CALL 15155 0 2
// DialogueOff ;
11705: CALL_OW 7
// break ;
11709: GO 11713
// end ; end ;
11711: GO 11605
11713: POP
11714: POP
// end ; if not seen [ 2 ] then
11715: LD_EXP 9
11719: PUSH
11720: LD_INT 2
11722: ARRAY
11723: NOT
11724: IFFALSE 11949
// begin can_kamikazed := true ;
11726: LD_ADDR_EXP 10
11730: PUSH
11731: LD_INT 1
11733: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
11734: LD_ADDR_VAR 0 2
11738: PUSH
11739: LD_INT 22
11741: PUSH
11742: LD_INT 2
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 17
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PPUSH
11763: CALL_OW 69
11767: ST_TO_ADDR
// if tmp then
11768: LD_VAR 0 2
11772: IFFALSE 11949
// for i in tmp do
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: FOR_IN
11785: IFFALSE 11947
// if See ( 1 , i ) then
11787: LD_INT 1
11789: PPUSH
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 292
11799: IFFALSE 11945
// begin seen := Replace ( seen , 2 , true ) ;
11801: LD_ADDR_EXP 9
11805: PUSH
11806: LD_EXP 9
11810: PPUSH
11811: LD_INT 2
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 1
11821: ST_TO_ADDR
// if CanSayRand ( 1 ) then
11822: LD_INT 1
11824: PPUSH
11825: CALL 14977 0 1
11829: IFFALSE 11945
// begin DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( i ) ;
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
11851: LD_ADDR_VAR 0 3
11855: PUSH
11856: LD_INT 1
11858: PPUSH
11859: LD_STRING D5b-Sol1-1
11861: PPUSH
11862: CALL 15155 0 2
11866: ST_TO_ADDR
// if not un then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11890
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 2
11881: PPUSH
11882: LD_STRING D5b-FSol1-1
11884: PPUSH
11885: CALL 15155 0 2
11889: ST_TO_ADDR
// if un then
11890: LD_VAR 0 3
11894: IFFALSE 11939
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
11896: LD_ADDR_VAR 0 4
11900: PUSH
11901: LD_INT 1
11903: PPUSH
11904: LD_STRING D5b-Sol2-1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL 15381 0 3
11916: ST_TO_ADDR
// if not un2 then
11917: LD_VAR 0 4
11921: NOT
11922: IFFALSE 11939
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
11924: LD_INT 2
11926: PPUSH
11927: LD_STRING D5b-FSol2-1
11929: PPUSH
11930: LD_VAR 0 3
11934: PPUSH
11935: CALL 15381 0 3
// end ; DialogueOff ;
11939: CALL_OW 7
// break ;
11943: GO 11947
// end ; end ;
11945: GO 11784
11947: POP
11948: POP
// end ; if not seen [ 3 ] then
11949: LD_EXP 9
11953: PUSH
11954: LD_INT 3
11956: ARRAY
11957: NOT
11958: IFFALSE 12132
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 33
11977: PUSH
11978: LD_INT 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: ST_TO_ADDR
// if tmp then
11994: LD_VAR 0 2
11998: IFFALSE 12132
// for i in tmp do
12000: LD_ADDR_VAR 0 1
12004: PUSH
12005: LD_VAR 0 2
12009: PUSH
12010: FOR_IN
12011: IFFALSE 12130
// if See ( 1 , i ) then
12013: LD_INT 1
12015: PPUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 292
12025: IFFALSE 12128
// begin seen := Replace ( seen , 3 , true ) ;
12027: LD_ADDR_EXP 9
12031: PUSH
12032: LD_EXP 9
12036: PPUSH
12037: LD_INT 3
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 1
12047: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12048: LD_INT 1
12050: PPUSH
12051: CALL 14977 0 1
12055: IFFALSE 12128
// begin DialogueOn ;
12057: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12070: LD_INT 10
12072: PPUSH
12073: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12077: LD_ADDR_VAR 0 3
12081: PUSH
12082: LD_INT 1
12084: PPUSH
12085: LD_STRING D8-Sol1-1
12087: PPUSH
12088: CALL 15155 0 2
12092: ST_TO_ADDR
// if not un then
12093: LD_VAR 0 3
12097: NOT
12098: IFFALSE 12110
// SayRand ( sex_female , D8-FSol1-1 ) ;
12100: LD_INT 2
12102: PPUSH
12103: LD_STRING D8-FSol1-1
12105: PPUSH
12106: CALL 15155 0 2
// Say ( JMM , D8-JMM-1 ) ;
12110: LD_EXP 21
12114: PPUSH
12115: LD_STRING D8-JMM-1
12117: PPUSH
12118: CALL_OW 88
// DialogueOff ;
12122: CALL_OW 7
// break ;
12126: GO 12130
// end ; end ;
12128: GO 12010
12130: POP
12131: POP
// end ; if not seen [ 4 ] then
12132: LD_EXP 9
12136: PUSH
12137: LD_INT 4
12139: ARRAY
12140: NOT
12141: IFFALSE 12303
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12143: LD_ADDR_VAR 0 2
12147: PUSH
12148: LD_INT 22
12150: PUSH
12151: LD_INT 2
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 33
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PPUSH
12172: CALL_OW 69
12176: ST_TO_ADDR
// if tmp then
12177: LD_VAR 0 2
12181: IFFALSE 12303
// for i in tmp do
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_VAR 0 2
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12301
// if See ( 1 , i ) then
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 292
12208: IFFALSE 12299
// begin seen := Replace ( seen , 4 , true ) ;
12210: LD_ADDR_EXP 9
12214: PUSH
12215: LD_EXP 9
12219: PPUSH
12220: LD_INT 4
12222: PPUSH
12223: LD_INT 1
12225: PPUSH
12226: CALL_OW 1
12230: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12231: LD_INT 1
12233: PPUSH
12234: CALL 14977 0 1
12238: IFFALSE 12299
// begin DialogueOn ;
12240: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12253: LD_INT 10
12255: PPUSH
12256: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
12260: LD_ADDR_VAR 0 3
12264: PUSH
12265: LD_INT 1
12267: PPUSH
12268: LD_STRING D5a-Sol1-1
12270: PPUSH
12271: CALL 15155 0 2
12275: ST_TO_ADDR
// if not un then
12276: LD_VAR 0 3
12280: NOT
12281: IFFALSE 12293
// SayRand ( sex_female , D5a-FSol1-1 ) ;
12283: LD_INT 2
12285: PPUSH
12286: LD_STRING D5a-FSol1-1
12288: PPUSH
12289: CALL 15155 0 2
// DialogueOff ;
12293: CALL_OW 7
// break ;
12297: GO 12301
// end ; end ;
12299: GO 12193
12301: POP
12302: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
12303: LD_EXP 9
12307: PUSH
12308: LD_INT 5
12310: ARRAY
12311: NOT
12312: PUSH
12313: LD_EXP 9
12317: PUSH
12318: LD_INT 3
12320: ARRAY
12321: AND
12322: IFFALSE 12496
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
12324: LD_ADDR_VAR 0 2
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 34
12341: PUSH
12342: LD_INT 31
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PPUSH
12353: CALL_OW 69
12357: ST_TO_ADDR
// if tmp then
12358: LD_VAR 0 2
12362: IFFALSE 12496
// for i in tmp do
12364: LD_ADDR_VAR 0 1
12368: PUSH
12369: LD_VAR 0 2
12373: PUSH
12374: FOR_IN
12375: IFFALSE 12494
// if See ( 1 , i ) then
12377: LD_INT 1
12379: PPUSH
12380: LD_VAR 0 1
12384: PPUSH
12385: CALL_OW 292
12389: IFFALSE 12492
// begin seen := Replace ( seen , 5 , true ) ;
12391: LD_ADDR_EXP 9
12395: PUSH
12396: LD_EXP 9
12400: PPUSH
12401: LD_INT 5
12403: PPUSH
12404: LD_INT 1
12406: PPUSH
12407: CALL_OW 1
12411: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12412: LD_INT 1
12414: PPUSH
12415: CALL 14977 0 1
12419: IFFALSE 12492
// begin DialogueOn ;
12421: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12425: LD_VAR 0 1
12429: PPUSH
12430: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12434: LD_INT 10
12436: PPUSH
12437: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_INT 1
12448: PPUSH
12449: LD_STRING D8a-Sol2-1
12451: PPUSH
12452: CALL 15155 0 2
12456: ST_TO_ADDR
// if not un then
12457: LD_VAR 0 3
12461: NOT
12462: IFFALSE 12474
// SayRand ( sex_female , D8a-FSol2-1 ) ;
12464: LD_INT 2
12466: PPUSH
12467: LD_STRING D8a-FSol2-1
12469: PPUSH
12470: CALL 15155 0 2
// Say ( JMM , D8a-JMM-1 ) ;
12474: LD_EXP 21
12478: PPUSH
12479: LD_STRING D8a-JMM-1
12481: PPUSH
12482: CALL_OW 88
// DialogueOff ;
12486: CALL_OW 7
// break ;
12490: GO 12494
// end ; end ;
12492: GO 12374
12494: POP
12495: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
12496: LD_EXP 9
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_EXP 9
12509: PUSH
12510: LD_INT 2
12512: ARRAY
12513: AND
12514: PUSH
12515: LD_EXP 9
12519: PUSH
12520: LD_INT 3
12522: ARRAY
12523: AND
12524: PUSH
12525: LD_EXP 9
12529: PUSH
12530: LD_INT 4
12532: ARRAY
12533: AND
12534: PUSH
12535: LD_EXP 9
12539: PUSH
12540: LD_INT 5
12542: ARRAY
12543: AND
12544: IFFALSE 12547
// disable ;
12546: DISABLE
// end ;
12547: PPOPN 4
12549: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
12550: LD_EXP 10
12554: PUSH
12555: LD_EXP 11
12559: AND
12560: IFFALSE 12758
12562: GO 12564
12564: DISABLE
12565: LD_INT 0
12567: PPUSH
// begin DialogueOn ;
12568: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
12572: LD_EXP 11
12576: PPUSH
12577: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
12581: LD_ADDR_VAR 0 1
12585: PUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_STRING D5c-Sol1-1
12591: PPUSH
12592: CALL 15155 0 2
12596: ST_TO_ADDR
// if not un then
12597: LD_VAR 0 1
12601: NOT
12602: IFFALSE 12620
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
12604: LD_ADDR_VAR 0 1
12608: PUSH
12609: LD_INT 2
12611: PPUSH
12612: LD_STRING D5c-FSol1-1
12614: PPUSH
12615: CALL 15155 0 2
12619: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
12620: LD_EXP 21
12624: PPUSH
12625: LD_STRING D5c-JMM-1
12627: PPUSH
12628: CALL_OW 88
// if IsOk ( Lisa ) then
12632: LD_EXP 22
12636: PPUSH
12637: CALL_OW 302
12641: IFFALSE 12657
// Say ( Lisa , D5d-Lisa-1 ) else
12643: LD_EXP 22
12647: PPUSH
12648: LD_STRING D5d-Lisa-1
12650: PPUSH
12651: CALL_OW 88
12655: GO 12742
// if IsOk ( Cyrus ) then
12657: LD_EXP 25
12661: PPUSH
12662: CALL_OW 302
12666: IFFALSE 12682
// Say ( Cyrus , D5d-Cyrus-1 ) else
12668: LD_EXP 25
12672: PPUSH
12673: LD_STRING D5d-Cyrus-1
12675: PPUSH
12676: CALL_OW 88
12680: GO 12742
// if IsOk ( Gary ) then
12682: LD_EXP 32
12686: PPUSH
12687: CALL_OW 302
12691: IFFALSE 12707
// Say ( Gary , D5d-Gary-1 ) else
12693: LD_EXP 32
12697: PPUSH
12698: LD_STRING D5d-Gary-1
12700: PPUSH
12701: CALL_OW 88
12705: GO 12742
// if GetSex ( un ) = sex_male then
12707: LD_VAR 0 1
12711: PPUSH
12712: CALL_OW 258
12716: PUSH
12717: LD_INT 1
12719: EQUAL
12720: IFFALSE 12736
// Say ( un , D5d-Sol1-1 ) else
12722: LD_VAR 0 1
12726: PPUSH
12727: LD_STRING D5d-Sol1-1
12729: PPUSH
12730: CALL_OW 88
12734: GO 12742
// begin DialogueOff ;
12736: CALL_OW 7
// exit ;
12740: GO 12758
// end ; Say ( JMM , D5d-JMM-1 ) ;
12742: LD_EXP 21
12746: PPUSH
12747: LD_STRING D5d-JMM-1
12749: PPUSH
12750: CALL_OW 88
// DialogueOff ;
12754: CALL_OW 7
// end ;
12758: PPOPN 1
12760: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
12761: LD_INT 1
12763: PPUSH
12764: LD_INT 17
12766: PPUSH
12767: CALL_OW 294
12771: PUSH
12772: LD_INT 2
12774: GREATEREQUAL
12775: IFFALSE 12896
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
12783: LD_INT 10
12785: PPUSH
12786: LD_INT 5
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: LD_INT 10
12794: NEG
12795: PPUSH
12796: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
12800: LD_INT 10
12802: PPUSH
12803: LD_INT 5
12805: PPUSH
12806: LD_INT 1
12808: PPUSH
12809: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
12813: LD_INT 10
12815: PPUSH
12816: LD_INT 5
12818: PPUSH
12819: CALL_OW 86
// DialogueOn ;
12823: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
12827: LD_ADDR_VAR 0 1
12831: PUSH
12832: LD_INT 1
12834: PPUSH
12835: LD_STRING D6-Sci1-1
12837: PPUSH
12838: CALL 15155 0 2
12842: ST_TO_ADDR
// if un then
12843: LD_VAR 0 1
12847: IFFALSE 12885
// begin Say ( JMM , D6-JMM-1 ) ;
12849: LD_EXP 21
12853: PPUSH
12854: LD_STRING D6-JMM-1
12856: PPUSH
12857: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_STRING D6-Sci1-2
12868: PPUSH
12869: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
12873: LD_EXP 21
12877: PPUSH
12878: LD_STRING D6-JMM-2
12880: PPUSH
12881: CALL_OW 88
// end ; DialogueOff ;
12885: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12889: LD_STRING M3
12891: PPUSH
12892: CALL_OW 337
// end ;
12896: PPOPN 1
12898: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp ;
12899: LD_OWVAR 1
12903: PUSH
12904: LD_INT 42000
12906: GREATEREQUAL
12907: PUSH
12908: LD_INT 2
12910: PPUSH
12911: LD_INT 169
12913: PPUSH
12914: LD_INT 90
12916: PPUSH
12917: LD_INT 10
12919: PPUSH
12920: CALL 44858 0 4
12924: PUSH
12925: LD_INT 4
12927: ARRAY
12928: PUSH
12929: LD_INT 0
12931: EQUAL
12932: PUSH
12933: LD_INT 45
12935: PPUSH
12936: CALL_OW 301
12940: OR
12941: PUSH
12942: LD_INT 45
12944: PPUSH
12945: CALL_OW 255
12949: PUSH
12950: LD_INT 1
12952: EQUAL
12953: OR
12954: AND
12955: PUSH
12956: LD_INT 94
12958: PPUSH
12959: CALL_OW 301
12963: NOT
12964: AND
12965: IFFALSE 14091
12967: GO 12969
12969: DISABLE
12970: LD_INT 0
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
// begin uc_side := 5 ;
12976: LD_ADDR_OWVAR 20
12980: PUSH
12981: LD_INT 5
12983: ST_TO_ADDR
// uc_nation := 2 ;
12984: LD_ADDR_OWVAR 21
12988: PUSH
12989: LD_INT 2
12991: ST_TO_ADDR
// InitHc ;
12992: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
12996: LD_INT 1
12998: PPUSH
12999: LD_INT 3
13001: PPUSH
13002: LD_INT 8
13004: PPUSH
13005: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13009: LD_ADDR_OWVAR 29
13013: PUSH
13014: LD_INT 12
13016: PUSH
13017: LD_INT 12
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13024: LD_ADDR_OWVAR 33
13028: PUSH
13029: LD_STRING SecondCharsGal
13031: ST_TO_ADDR
// hc_face_number := 7 ;
13032: LD_ADDR_OWVAR 34
13036: PUSH
13037: LD_INT 7
13039: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13040: LD_ADDR_EXP 45
13044: PUSH
13045: CALL_OW 44
13049: ST_TO_ADDR
// InitHc ;
13050: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13054: LD_INT 1
13056: PPUSH
13057: LD_INT 16
13059: PPUSH
13060: LD_INT 2
13062: PPUSH
13063: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13067: LD_ADDR_OWVAR 29
13071: PUSH
13072: LD_INT 12
13074: PUSH
13075: LD_INT 12
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: ST_TO_ADDR
// hc_name :=  ;
13082: LD_ADDR_OWVAR 26
13086: PUSH
13087: LD_STRING 
13089: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13090: LD_ADDR_EXP 46
13094: PUSH
13095: CALL_OW 44
13099: ST_TO_ADDR
// InitHc ;
13100: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13104: LD_INT 35
13106: PPUSH
13107: CALL_OW 67
// until not InBattle ( 1 ) ;
13111: LD_INT 1
13113: PPUSH
13114: CALL_OW 463
13118: NOT
13119: IFFALSE 13104
// wait ( 0 0$5 ) ;
13121: LD_INT 175
13123: PPUSH
13124: CALL_OW 67
// DialogueOn ;
13128: CALL_OW 6
// InGameOn ;
13132: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13136: LD_ADDR_VAR 0 1
13140: PUSH
13141: LD_INT 22
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: LD_INT 25
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 25
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 25
13176: PUSH
13177: LD_INT 3
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 25
13186: PUSH
13187: LD_INT 4
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 25
13196: PUSH
13197: LD_INT 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 25
13206: PUSH
13207: LD_INT 8
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: EMPTY
13224: LIST
13225: LIST
13226: PPUSH
13227: CALL_OW 69
13231: PUSH
13232: LD_EXP 21
13236: PUSH
13237: LD_EXP 22
13241: PUSH
13242: LD_EXP 23
13246: PUSH
13247: LD_EXP 24
13251: PUSH
13252: LD_EXP 25
13256: PUSH
13257: LD_EXP 26
13261: PUSH
13262: LD_EXP 27
13266: PUSH
13267: LD_EXP 28
13271: PUSH
13272: LD_EXP 29
13276: PUSH
13277: LD_EXP 31
13281: PUSH
13282: LD_EXP 32
13286: PUSH
13287: LD_EXP 33
13291: PUSH
13292: LD_EXP 34
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: DIFF
13312: PPUSH
13313: LD_INT 26
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PPUSH
13323: CALL_OW 72
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: ST_TO_ADDR
// if not un and Brown then
13332: LD_VAR 0 1
13336: NOT
13337: PUSH
13338: LD_EXP 27
13342: AND
13343: IFFALSE 13355
// un := Brown ;
13345: LD_ADDR_VAR 0 1
13349: PUSH
13350: LD_EXP 27
13354: ST_TO_ADDR
// if un then
13355: LD_VAR 0 1
13359: IFFALSE 13385
// begin Say ( un , D7-Sol1-1 ) ;
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_STRING D7-Sol1-1
13368: PPUSH
13369: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
13373: LD_EXP 21
13377: PPUSH
13378: LD_STRING D7-JMM-1
13380: PPUSH
13381: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
13385: LD_EXP 45
13389: PPUSH
13390: LD_STRING D7-Ar1-1
13392: PPUSH
13393: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
13397: LD_EXP 21
13401: PPUSH
13402: LD_STRING D7-JMM-2
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
13409: LD_EXP 45
13413: PPUSH
13414: LD_STRING D7-Ar1-2
13416: PPUSH
13417: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
13421: LD_EXP 21
13425: PPUSH
13426: LD_STRING D7-JMM-3
13428: PPUSH
13429: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
13433: LD_EXP 45
13437: PPUSH
13438: LD_STRING D7-Ar1-3
13440: PPUSH
13441: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
13445: LD_EXP 21
13449: PPUSH
13450: LD_STRING D7-JMM-4
13452: PPUSH
13453: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
13457: LD_EXP 45
13461: PPUSH
13462: LD_STRING D7-Ar1-4
13464: PPUSH
13465: CALL_OW 94
// InGameOff ;
13469: CALL_OW 9
// DialogueOff ;
13473: CALL_OW 7
// case Query ( QCameras ) of 1 :
13477: LD_STRING QCameras
13479: PPUSH
13480: CALL_OW 97
13484: PUSH
13485: LD_INT 1
13487: DOUBLE
13488: EQUAL
13489: IFTRUE 13493
13491: GO 13496
13493: POP
// ; 2 :
13494: GO 13510
13496: LD_INT 2
13498: DOUBLE
13499: EQUAL
13500: IFTRUE 13504
13502: GO 13509
13504: POP
// exit ; end ;
13505: GO 14091
13507: GO 13510
13509: POP
// ChangeMissionObjectives ( MCar ) ;
13510: LD_STRING MCar
13512: PPUSH
13513: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
13517: LD_INT 124
13519: PPUSH
13520: LD_INT 90
13522: PPUSH
13523: LD_INT 1
13525: PPUSH
13526: LD_INT 6
13528: NEG
13529: PPUSH
13530: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
13534: LD_INT 124
13536: PPUSH
13537: LD_INT 90
13539: PPUSH
13540: LD_INT 1
13542: PPUSH
13543: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
13547: LD_INT 12
13549: PPUSH
13550: LD_INT 1
13552: PPUSH
13553: CALL_OW 424
// wait ( 3 ) ;
13557: LD_INT 3
13559: PPUSH
13560: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
13564: LD_INT 124
13566: PPUSH
13567: LD_INT 90
13569: PPUSH
13570: CALL_OW 86
// cargo := false ;
13574: LD_ADDR_VAR 0 3
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13582: LD_INT 35
13584: PPUSH
13585: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
13589: LD_ADDR_VAR 0 3
13593: PUSH
13594: LD_INT 12
13596: PPUSH
13597: LD_INT 32
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 34
13609: PUSH
13610: LD_INT 32
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 58
13619: PUSH
13620: EMPTY
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// until cargo ;
13633: LD_VAR 0 3
13637: IFFALSE 13582
// cargo := cargo [ 1 ] ;
13639: LD_ADDR_VAR 0 3
13643: PUSH
13644: LD_VAR 0 3
13648: PUSH
13649: LD_INT 1
13651: ARRAY
13652: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 5
13660: PPUSH
13661: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
13665: LD_INT 12
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
13675: LD_EXP 45
13679: PPUSH
13680: LD_INT 11
13682: PPUSH
13683: LD_INT 0
13685: PPUSH
13686: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
13690: LD_EXP 46
13694: PPUSH
13695: LD_INT 11
13697: PPUSH
13698: LD_INT 0
13700: PPUSH
13701: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
13705: LD_EXP 45
13709: PUSH
13710: LD_EXP 46
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PPUSH
13719: LD_INT 12
13721: PPUSH
13722: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
13726: LD_EXP 45
13730: PPUSH
13731: LD_VAR 0 3
13735: PPUSH
13736: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13740: LD_EXP 45
13744: PUSH
13745: LD_EXP 46
13749: PUSH
13750: EMPTY
13751: LIST
13752: LIST
13753: PPUSH
13754: LD_INT 209
13756: PPUSH
13757: LD_INT 178
13759: PPUSH
13760: CALL_OW 171
// while ( true ) do
13764: LD_INT 1
13766: IFFALSE 13920
// begin wait ( 0 0$1 ) ;
13768: LD_INT 35
13770: PPUSH
13771: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
13775: LD_EXP 45
13779: PPUSH
13780: CALL_OW 314
13784: NOT
13785: PUSH
13786: LD_EXP 46
13790: PPUSH
13791: CALL_OW 314
13795: NOT
13796: OR
13797: IFFALSE 13823
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
13799: LD_EXP 45
13803: PUSH
13804: LD_EXP 46
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PPUSH
13813: LD_INT 209
13815: PPUSH
13816: LD_INT 178
13818: PPUSH
13819: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
13823: LD_EXP 45
13827: PPUSH
13828: LD_INT 10
13830: PPUSH
13831: CALL_OW 308
13835: IFFALSE 13846
// RemoveUnit ( ar_mechanic ) ;
13837: LD_EXP 45
13841: PPUSH
13842: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
13846: LD_EXP 46
13850: PPUSH
13851: LD_INT 10
13853: PPUSH
13854: CALL_OW 308
13858: IFFALSE 13869
// RemoveUnit ( ar_mechanic_friend ) ;
13860: LD_EXP 46
13864: PPUSH
13865: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
13869: LD_VAR 0 3
13873: PPUSH
13874: LD_INT 10
13876: PPUSH
13877: CALL_OW 308
13881: IFFALSE 13892
// RemoveUnit ( cargo ) ;
13883: LD_VAR 0 3
13887: PPUSH
13888: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
13892: LD_EXP 45
13896: PPUSH
13897: CALL_OW 300
13901: NOT
13902: PUSH
13903: LD_EXP 46
13907: PPUSH
13908: CALL_OW 300
13912: NOT
13913: AND
13914: IFFALSE 13918
// break ;
13916: GO 13920
// end ;
13918: GO 13764
// wait ( 0 0$2 ) ;
13920: LD_INT 70
13922: PPUSH
13923: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
13927: LD_EXP 45
13931: PPUSH
13932: LD_STRING D7a-Ar1-1
13934: PPUSH
13935: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
13939: LD_ADDR_VAR 0 4
13943: PUSH
13944: LD_INT 129
13946: PUSH
13947: LD_INT 10
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 103
13956: PUSH
13957: LD_INT 6
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 148
13966: PUSH
13967: LD_INT 47
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 155
13976: PUSH
13977: LD_INT 16
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: ST_TO_ADDR
// if Difficulty = 1 then
13990: LD_OWVAR 67
13994: PUSH
13995: LD_INT 1
13997: EQUAL
13998: IFFALSE 14035
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 4
14009: PUSH
14010: LD_INT 78
14012: PUSH
14013: LD_INT 7
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 104
14022: PUSH
14023: LD_INT 43
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: ADD
14034: ST_TO_ADDR
// for i in tmp do
14035: LD_ADDR_VAR 0 2
14039: PUSH
14040: LD_VAR 0 4
14044: PUSH
14045: FOR_IN
14046: IFFALSE 14079
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: ARRAY
14065: PPUSH
14066: LD_INT 1
14068: PPUSH
14069: LD_INT 9
14071: NEG
14072: PPUSH
14073: CALL_OW 330
14077: GO 14045
14079: POP
14080: POP
// CenterOnXY ( 129 , 10 ) ;
14081: LD_INT 129
14083: PPUSH
14084: LD_INT 10
14086: PPUSH
14087: CALL_OW 84
// end ;
14091: PPOPN 4
14093: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14094: LD_EXP 15
14098: PUSH
14099: LD_INT 21000
14101: MINUS
14102: PUSH
14103: LD_OWVAR 1
14107: LESSEQUAL
14108: IFFALSE 14148
14110: GO 14112
14112: DISABLE
// begin powell_warn := true ;
14113: LD_ADDR_EXP 16
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// DialogueOn ;
14121: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14125: LD_EXP 30
14129: PPUSH
14130: LD_STRING D9-Pow-1
14132: PPUSH
14133: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
14137: LD_INT 10
14139: PPUSH
14140: CALL_OW 68
// DialogueOff ;
14144: CALL_OW 7
// end ;
14148: END
// every 0 0$1 trigger game_time <= tick do
14149: LD_EXP 15
14153: PUSH
14154: LD_OWVAR 1
14158: LESSEQUAL
14159: IFFALSE 14198
14161: GO 14163
14163: DISABLE
// begin DialogueOn ;
14164: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
14168: LD_EXP 30
14172: PPUSH
14173: LD_STRING D9a-Pow-1
14175: PPUSH
14176: CALL_OW 94
// dwait ( 0 0$2 ) ;
14180: LD_INT 70
14182: PPUSH
14183: CALL_OW 68
// DialogueOff ;
14187: CALL_OW 7
// YouLost ( Command ) ;
14191: LD_STRING Command
14193: PPUSH
14194: CALL_OW 104
// end ;
14198: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp ;
14199: LD_INT 22
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 30
14211: PUSH
14212: LD_INT 1
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: PUSH
14228: LD_INT 0
14230: EQUAL
14231: PUSH
14232: LD_EXP 21
14236: PPUSH
14237: CALL_OW 302
14241: AND
14242: IFFALSE 14974
14244: GO 14246
14246: DISABLE
14247: LD_INT 0
14249: PPUSH
// begin if tick < [ 70 70$00 , 60 60$00 , 55 55$00 ] [ Difficulty ] then
14250: LD_OWVAR 1
14254: PUSH
14255: LD_INT 147000
14257: PUSH
14258: LD_INT 126000
14260: PUSH
14261: LD_INT 115500
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_OWVAR 67
14273: ARRAY
14274: LESS
14275: IFFALSE 14289
// AddMedal ( Time1 , 1 ) else
14277: LD_STRING Time1
14279: PPUSH
14280: LD_INT 1
14282: PPUSH
14283: CALL_OW 101
14287: GO 14320
// if not powell_warn then
14289: LD_EXP 16
14293: NOT
14294: IFFALSE 14309
// AddMedal ( Time1 , - 1 ) else
14296: LD_STRING Time1
14298: PPUSH
14299: LD_INT 1
14301: NEG
14302: PPUSH
14303: CALL_OW 101
14307: GO 14320
// AddMedal ( Time1 , - 2 ) ;
14309: LD_STRING Time1
14311: PPUSH
14312: LD_INT 2
14314: NEG
14315: PPUSH
14316: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
14320: LD_EXP 17
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 4
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_OWVAR 67
14343: ARRAY
14344: GREATEREQUAL
14345: IFFALSE 14360
// AddMedal ( Destroy , - 2 ) else
14347: LD_STRING Destroy
14349: PPUSH
14350: LD_INT 2
14352: NEG
14353: PPUSH
14354: CALL_OW 101
14358: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
14360: LD_INT 22
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 21
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 50
14382: PUSH
14383: EMPTY
14384: LIST
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PUSH
14396: LD_INT 25
14398: GREATEREQUAL
14399: IFFALSE 14414
// AddMedal ( Destroy , - 1 ) else
14401: LD_STRING Destroy
14403: PPUSH
14404: LD_INT 1
14406: NEG
14407: PPUSH
14408: CALL_OW 101
14412: GO 14477
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
14414: LD_INT 22
14416: PUSH
14417: LD_INT 2
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 3
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 50
14436: PUSH
14437: EMPTY
14438: LIST
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PUSH
14450: LD_INT 15
14452: GREATEREQUAL
14453: IFFALSE 14467
// AddMedal ( Destroy , 1 ) else
14455: LD_STRING Destroy
14457: PPUSH
14458: LD_INT 1
14460: PPUSH
14461: CALL_OW 101
14465: GO 14477
// AddMedal ( Destroy , 2 ) ;
14467: LD_STRING Destroy
14469: PPUSH
14470: LD_INT 2
14472: PPUSH
14473: CALL_OW 101
// SaveVariable ( artifact_get , 11_artifact_captured ) ;
14477: LD_EXP 13
14481: PPUSH
14482: LD_STRING 11_artifact_captured
14484: PPUSH
14485: CALL_OW 39
// if artifact_get then
14489: LD_EXP 13
14493: IFFALSE 14507
// AddMedal ( Artefact , 1 ) else
14495: LD_STRING Artefact
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: CALL_OW 101
14505: GO 14518
// AddMedal ( Artefact , - 1 ) ;
14507: LD_STRING Artefact
14509: PPUSH
14510: LD_INT 1
14512: NEG
14513: PPUSH
14514: CALL_OW 101
// GiveMedals ( MAIN ) ;
14518: LD_STRING MAIN
14520: PPUSH
14521: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
14525: LD_ADDR_EXP 20
14529: PUSH
14530: LD_EXP 20
14534: PPUSH
14535: LD_INT 51
14537: PUSH
14538: EMPTY
14539: LIST
14540: PPUSH
14541: CALL_OW 72
14545: ST_TO_ADDR
// tmp := JMM ^ selected ;
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: LD_EXP 21
14555: PUSH
14556: LD_EXP 20
14560: ADD
14561: ST_TO_ADDR
// RewardPeople ( tmp ) ;
14562: LD_VAR 0 1
14566: PPUSH
14567: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
14571: LD_VAR 0 1
14575: PUSH
14576: LD_EXP 21
14580: PUSH
14581: LD_EXP 22
14585: PUSH
14586: LD_EXP 23
14590: PUSH
14591: LD_EXP 24
14595: PUSH
14596: LD_EXP 25
14600: PUSH
14601: LD_EXP 26
14605: PUSH
14606: LD_EXP 27
14610: PUSH
14611: LD_EXP 28
14615: PUSH
14616: LD_EXP 29
14620: PUSH
14621: LD_EXP 31
14625: PUSH
14626: LD_EXP 32
14630: PUSH
14631: LD_EXP 33
14635: PUSH
14636: LD_EXP 34
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: DIFF
14656: PPUSH
14657: LD_STRING 11c_others
14659: PPUSH
14660: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
14664: LD_EXP 21
14668: PPUSH
14669: LD_EXP 3
14673: PUSH
14674: LD_STRING JMM
14676: STR
14677: PPUSH
14678: CALL_OW 38
// if Lisa then
14682: LD_EXP 22
14686: IFFALSE 14706
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
14688: LD_EXP 22
14692: PPUSH
14693: LD_EXP 3
14697: PUSH
14698: LD_STRING Lisa
14700: STR
14701: PPUSH
14702: CALL_OW 38
// if Donaldson then
14706: LD_EXP 23
14710: IFFALSE 14730
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
14712: LD_EXP 23
14716: PPUSH
14717: LD_EXP 3
14721: PUSH
14722: LD_STRING Donaldson
14724: STR
14725: PPUSH
14726: CALL_OW 38
// if Bobby then
14730: LD_EXP 24
14734: IFFALSE 14754
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
14736: LD_EXP 24
14740: PPUSH
14741: LD_EXP 3
14745: PUSH
14746: LD_STRING Bobby
14748: STR
14749: PPUSH
14750: CALL_OW 38
// if Cyrus then
14754: LD_EXP 25
14758: IFFALSE 14778
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
14760: LD_EXP 25
14764: PPUSH
14765: LD_EXP 3
14769: PUSH
14770: LD_STRING Cyrus
14772: STR
14773: PPUSH
14774: CALL_OW 38
// if Denis then
14778: LD_EXP 26
14782: IFFALSE 14802
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
14784: LD_EXP 26
14788: PPUSH
14789: LD_EXP 3
14793: PUSH
14794: LD_STRING Denis
14796: STR
14797: PPUSH
14798: CALL_OW 38
// if Brown then
14802: LD_EXP 27
14806: IFFALSE 14826
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
14808: LD_EXP 27
14812: PPUSH
14813: LD_EXP 3
14817: PUSH
14818: LD_STRING Brown
14820: STR
14821: PPUSH
14822: CALL_OW 38
// if Gladstone then
14826: LD_EXP 28
14830: IFFALSE 14850
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
14832: LD_EXP 28
14836: PPUSH
14837: LD_EXP 3
14841: PUSH
14842: LD_STRING Gladstone
14844: STR
14845: PPUSH
14846: CALL_OW 38
// if Houten then
14850: LD_EXP 29
14854: IFFALSE 14874
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
14856: LD_EXP 29
14860: PPUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_STRING Houten
14868: STR
14869: PPUSH
14870: CALL_OW 38
// if Cornel then
14874: LD_EXP 31
14878: IFFALSE 14898
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
14880: LD_EXP 31
14884: PPUSH
14885: LD_EXP 3
14889: PUSH
14890: LD_STRING Cornel
14892: STR
14893: PPUSH
14894: CALL_OW 38
// if Gary then
14898: LD_EXP 32
14902: IFFALSE 14922
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
14904: LD_EXP 32
14908: PPUSH
14909: LD_EXP 3
14913: PUSH
14914: LD_STRING Gary
14916: STR
14917: PPUSH
14918: CALL_OW 38
// if Frank then
14922: LD_EXP 33
14926: IFFALSE 14946
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
14928: LD_EXP 33
14932: PPUSH
14933: LD_EXP 3
14937: PUSH
14938: LD_STRING Frank
14940: STR
14941: PPUSH
14942: CALL_OW 38
// if Kikuchi then
14946: LD_EXP 34
14950: IFFALSE 14970
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
14952: LD_EXP 34
14956: PPUSH
14957: LD_EXP 3
14961: PUSH
14962: LD_STRING Kikuchi
14964: STR
14965: PPUSH
14966: CALL_OW 38
// YouWin ;
14970: CALL_OW 103
// end ;
14974: PPOPN 1
14976: END
// export function CanSayRand ( side ) ; begin
14977: LD_INT 0
14979: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
14980: LD_ADDR_VAR 0 2
14984: PUSH
14985: LD_INT 52
14987: PUSH
14988: EMPTY
14989: LIST
14990: PUSH
14991: LD_INT 22
14993: PUSH
14994: LD_VAR 0 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 2
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 2
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: LD_INT 25
15028: PUSH
15029: LD_INT 3
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 25
15038: PUSH
15039: LD_INT 4
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: LD_EXP 21
15067: PUSH
15068: LD_EXP 33
15072: PUSH
15073: LD_EXP 22
15077: PUSH
15078: LD_EXP 23
15082: PUSH
15083: LD_EXP 24
15087: PUSH
15088: LD_EXP 25
15092: PUSH
15093: LD_EXP 26
15097: PUSH
15098: LD_EXP 27
15102: PUSH
15103: LD_EXP 28
15107: PUSH
15108: LD_EXP 29
15112: PUSH
15113: LD_EXP 30
15117: PUSH
15118: LD_EXP 31
15122: PUSH
15123: LD_EXP 32
15127: PUSH
15128: LD_EXP 34
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: DIFF
15149: ST_TO_ADDR
// end ;
15150: LD_VAR 0 2
15154: RET
// export function SayRand ( sex , dial ) ; begin
15155: LD_INT 0
15157: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
15158: LD_ADDR_VAR 0 3
15162: PUSH
15163: LD_INT 52
15165: PUSH
15166: EMPTY
15167: LIST
15168: PUSH
15169: LD_INT 22
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: LD_INT 26
15181: PUSH
15182: LD_VAR 0 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 2
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 1
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 25
15206: PUSH
15207: LD_INT 2
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 25
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 25
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_EXP 21
15256: PUSH
15257: LD_EXP 33
15261: PUSH
15262: LD_EXP 22
15266: PUSH
15267: LD_EXP 23
15271: PUSH
15272: LD_EXP 24
15276: PUSH
15277: LD_EXP 25
15281: PUSH
15282: LD_EXP 26
15286: PUSH
15287: LD_EXP 27
15291: PUSH
15292: LD_EXP 28
15296: PUSH
15297: LD_EXP 29
15301: PUSH
15302: LD_EXP 30
15306: PUSH
15307: LD_EXP 31
15311: PUSH
15312: LD_EXP 32
15316: PUSH
15317: LD_EXP 34
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: DIFF
15338: ST_TO_ADDR
// if not result then
15339: LD_VAR 0 3
15343: NOT
15344: IFFALSE 15348
// exit ;
15346: GO 15376
// result := result [ 1 ] ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 1
15360: ARRAY
15361: ST_TO_ADDR
// Say ( result , dial ) ;
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_VAR 0 2
15371: PPUSH
15372: CALL_OW 88
// end ;
15376: LD_VAR 0 3
15380: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
15381: LD_INT 0
15383: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
15384: LD_ADDR_VAR 0 4
15388: PUSH
15389: LD_INT 22
15391: PUSH
15392: LD_INT 1
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 26
15401: PUSH
15402: LD_VAR 0 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 2
15413: PUSH
15414: LD_INT 25
15416: PUSH
15417: LD_INT 1
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 3
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 4
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: LD_EXP 21
15475: PUSH
15476: LD_EXP 33
15480: PUSH
15481: LD_EXP 22
15485: PUSH
15486: LD_EXP 23
15490: PUSH
15491: LD_EXP 24
15495: PUSH
15496: LD_EXP 25
15500: PUSH
15501: LD_EXP 26
15505: PUSH
15506: LD_EXP 27
15510: PUSH
15511: LD_EXP 28
15515: PUSH
15516: LD_EXP 29
15520: PUSH
15521: LD_EXP 30
15525: PUSH
15526: LD_EXP 31
15530: PUSH
15531: LD_EXP 32
15535: PUSH
15536: LD_EXP 34
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: LD_VAR 0 3
15561: ADD
15562: DIFF
15563: ST_TO_ADDR
// if not result then
15564: LD_VAR 0 4
15568: NOT
15569: IFFALSE 15573
// exit ;
15571: GO 15601
// result := result [ 1 ] ;
15573: LD_ADDR_VAR 0 4
15577: PUSH
15578: LD_VAR 0 4
15582: PUSH
15583: LD_INT 1
15585: ARRAY
15586: ST_TO_ADDR
// Say ( result , dial ) ;
15587: LD_VAR 0 4
15591: PPUSH
15592: LD_VAR 0 2
15596: PPUSH
15597: CALL_OW 88
// end ; end_of_file
15601: LD_VAR 0 4
15605: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 255
15615: PUSH
15616: LD_INT 1
15618: EQUAL
15619: IFFALSE 15629
// artifact_get := true ;
15621: LD_ADDR_EXP 13
15625: PUSH
15626: LD_INT 1
15628: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
15629: LD_VAR 0 1
15633: PPUSH
15634: CALL_OW 255
15638: PUSH
15639: LD_INT 2
15641: EQUAL
15642: IFFALSE 15660
// begin artifact_get := false ;
15644: LD_ADDR_EXP 13
15648: PUSH
15649: LD_INT 0
15651: ST_TO_ADDR
// artifact_stolen := true ;
15652: LD_ADDR_EXP 12
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// end ; artifact_oncargo := true ;
15660: LD_ADDR_EXP 14
15664: PUSH
15665: LD_INT 1
15667: ST_TO_ADDR
// end ;
15668: PPOPN 2
15670: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
15671: LD_ADDR_EXP 14
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// end ;
15679: PPOPN 2
15681: END
// on UnitDestroyed ( un ) do begin if un = JMM then
15682: LD_VAR 0 1
15686: PUSH
15687: LD_EXP 21
15691: EQUAL
15692: IFFALSE 15703
// begin YouLost ( JMM ) ;
15694: LD_STRING JMM
15696: PPUSH
15697: CALL_OW 104
// exit ;
15701: GO 15835
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
15703: LD_VAR 0 1
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 1
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 21
15720: PUSH
15721: LD_INT 1
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 2
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 1
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: LD_INT 25
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: PUSH
15751: LD_INT 25
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: EMPTY
15758: LIST
15759: LIST
15760: PUSH
15761: LD_INT 25
15763: PUSH
15764: LD_INT 4
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 25
15773: PUSH
15774: LD_INT 5
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 8
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: LIST
15804: PPUSH
15805: CALL_OW 69
15809: IN
15810: IFFALSE 15826
// loses_counter := loses_counter + 1 ;
15812: LD_ADDR_EXP 17
15816: PUSH
15817: LD_EXP 17
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL 35263 0 1
// end ;
15835: PPOPN 1
15837: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
15838: LD_VAR 0 1
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: CALL 37130 0 2
// end ;
15852: PPOPN 2
15854: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
15855: LD_VAR 0 1
15859: PPUSH
15860: CALL 36446 0 1
// end ;
15864: PPOPN 1
15866: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
15867: LD_VAR 0 1
15871: PPUSH
15872: LD_VAR 0 2
15876: PPUSH
15877: LD_VAR 0 3
15881: PPUSH
15882: LD_VAR 0 4
15886: PPUSH
15887: LD_VAR 0 5
15891: PPUSH
15892: CALL 34602 0 5
// end ;
15896: PPOPN 5
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 34290 0 2
// end ;
15913: PPOPN 2
15915: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 247
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: IFFALSE 15933
// exit ;
15931: GO 15950
// if not kamikazed then
15933: LD_EXP 11
15937: NOT
15938: IFFALSE 15950
// kamikazed := unit ;
15940: LD_ADDR_EXP 11
15944: PUSH
15945: LD_VAR 0 1
15949: ST_TO_ADDR
// end ;
15950: PPOPN 1
15952: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
15953: LD_INT 0
15955: PPUSH
15956: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
15957: LD_VAR 0 1
15961: PPUSH
15962: LD_VAR 0 2
15966: PPUSH
15967: LD_VAR 0 3
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: CALL 34135 0 4
// end ;
15981: PPOPN 6
15983: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_VAR 0 2
15993: PPUSH
15994: LD_VAR 0 3
15998: PPUSH
15999: CALL 33917 0 3
// end ;
16003: PPOPN 3
16005: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
16006: LD_VAR 0 1
16010: PPUSH
16011: LD_VAR 0 2
16015: PPUSH
16016: CALL 34975 0 2
// end ;
16020: PPOPN 2
16022: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
16023: LD_VAR 0 1
16027: PPUSH
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL 33625 0 2
// end ;
16037: PPOPN 2
16039: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
16040: LD_VAR 0 1
16044: PPUSH
16045: LD_VAR 0 2
16049: PPUSH
16050: CALL 33809 0 2
// end ;
16054: PPOPN 2
16056: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL 36212 0 1
// end ;
16066: PPOPN 1
16068: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
16069: LD_VAR 0 1
16073: PPUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL 37384 0 2
// end ;
16083: PPOPN 2
16085: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
16086: LD_VAR 0 1
16090: PPUSH
16091: LD_VAR 0 2
16095: PPUSH
16096: LD_VAR 0 3
16100: PPUSH
16101: LD_VAR 0 4
16105: PPUSH
16106: CALL 37593 0 4
// end ; end_of_file
16110: PPOPN 4
16112: END
// every 0 0$1 trigger game do
16113: LD_EXP 2
16117: IFFALSE 16147
16119: GO 16121
16121: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
16122: LD_INT 7
16124: PUSH
16125: LD_INT 6
16127: PUSH
16128: LD_INT 4
16130: PUSH
16131: LD_INT 6
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: PPUSH
16140: LD_INT 1750
16142: PPUSH
16143: CALL 16148 0 2
16147: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// if not areas then
16153: LD_VAR 0 1
16157: NOT
16158: IFFALSE 16162
// exit ;
16160: GO 16274
// repeat wait ( time ) ;
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 67
// p := rand ( 1 , 90 ) ;
16171: LD_ADDR_VAR 0 5
16175: PUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_INT 90
16181: PPUSH
16182: CALL_OW 12
16186: ST_TO_ADDR
// for i in areas do
16187: LD_ADDR_VAR 0 4
16191: PUSH
16192: LD_VAR 0 1
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16251
// begin if Prob ( p ) then
16200: LD_VAR 0 5
16204: PPUSH
16205: CALL_OW 13
16209: IFFALSE 16249
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
16211: LD_INT 1
16213: PPUSH
16214: LD_INT 5
16216: PPUSH
16217: CALL_OW 12
16221: PPUSH
16222: LD_VAR 0 4
16226: PPUSH
16227: LD_INT 1
16229: PPUSH
16230: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
16234: LD_INT 455
16236: PPUSH
16237: LD_INT 595
16239: PPUSH
16240: CALL_OW 12
16244: PPUSH
16245: CALL_OW 67
// end ; end ;
16249: GO 16197
16251: POP
16252: POP
// time := time + 0 0$3 ;
16253: LD_ADDR_VAR 0 2
16257: PUSH
16258: LD_VAR 0 2
16262: PUSH
16263: LD_INT 105
16265: PLUS
16266: ST_TO_ADDR
// until not game ;
16267: LD_EXP 2
16271: NOT
16272: IFFALSE 16162
// end ; end_of_file
16274: LD_VAR 0 3
16278: RET
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver ; export function InitMacro ; var i ; begin
16279: LD_INT 0
16281: PPUSH
16282: PPUSH
// skirmish := false ;
16283: LD_ADDR_EXP 47
16287: PUSH
16288: LD_INT 0
16290: ST_TO_ADDR
// mc_bases := [ ] ;
16291: LD_ADDR_EXP 48
16295: PUSH
16296: EMPTY
16297: ST_TO_ADDR
// mc_sides := [ ] ;
16298: LD_ADDR_EXP 74
16302: PUSH
16303: EMPTY
16304: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
16305: LD_ADDR_EXP 49
16309: PUSH
16310: EMPTY
16311: ST_TO_ADDR
// mc_building_repairs := [ ] ;
16312: LD_ADDR_EXP 50
16316: PUSH
16317: EMPTY
16318: ST_TO_ADDR
// mc_need_heal := [ ] ;
16319: LD_ADDR_EXP 51
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// mc_healers := [ ] ;
16326: LD_ADDR_EXP 52
16330: PUSH
16331: EMPTY
16332: ST_TO_ADDR
// mc_build_list := [ ] ;
16333: LD_ADDR_EXP 53
16337: PUSH
16338: EMPTY
16339: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
16340: LD_ADDR_EXP 80
16344: PUSH
16345: EMPTY
16346: ST_TO_ADDR
// mc_builders := [ ] ;
16347: LD_ADDR_EXP 54
16351: PUSH
16352: EMPTY
16353: ST_TO_ADDR
// mc_construct_list := [ ] ;
16354: LD_ADDR_EXP 55
16358: PUSH
16359: EMPTY
16360: ST_TO_ADDR
// mc_turret_list := [ ] ;
16361: LD_ADDR_EXP 56
16365: PUSH
16366: EMPTY
16367: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
16368: LD_ADDR_EXP 57
16372: PUSH
16373: EMPTY
16374: ST_TO_ADDR
// mc_miners := [ ] ;
16375: LD_ADDR_EXP 62
16379: PUSH
16380: EMPTY
16381: ST_TO_ADDR
// mc_mines := [ ] ;
16382: LD_ADDR_EXP 61
16386: PUSH
16387: EMPTY
16388: ST_TO_ADDR
// mc_minefields := [ ] ;
16389: LD_ADDR_EXP 63
16393: PUSH
16394: EMPTY
16395: ST_TO_ADDR
// mc_crates := [ ] ;
16396: LD_ADDR_EXP 64
16400: PUSH
16401: EMPTY
16402: ST_TO_ADDR
// mc_crates_collector := [ ] ;
16403: LD_ADDR_EXP 65
16407: PUSH
16408: EMPTY
16409: ST_TO_ADDR
// mc_crates_area := [ ] ;
16410: LD_ADDR_EXP 66
16414: PUSH
16415: EMPTY
16416: ST_TO_ADDR
// mc_vehicles := [ ] ;
16417: LD_ADDR_EXP 67
16421: PUSH
16422: EMPTY
16423: ST_TO_ADDR
// mc_attack := [ ] ;
16424: LD_ADDR_EXP 68
16428: PUSH
16429: EMPTY
16430: ST_TO_ADDR
// mc_produce := [ ] ;
16431: LD_ADDR_EXP 69
16435: PUSH
16436: EMPTY
16437: ST_TO_ADDR
// mc_defender := [ ] ;
16438: LD_ADDR_EXP 70
16442: PUSH
16443: EMPTY
16444: ST_TO_ADDR
// mc_parking := [ ] ;
16445: LD_ADDR_EXP 72
16449: PUSH
16450: EMPTY
16451: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
16452: LD_ADDR_EXP 58
16456: PUSH
16457: EMPTY
16458: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
16459: LD_ADDR_EXP 60
16463: PUSH
16464: EMPTY
16465: ST_TO_ADDR
// mc_scan := [ ] ;
16466: LD_ADDR_EXP 71
16470: PUSH
16471: EMPTY
16472: ST_TO_ADDR
// mc_scan_area := [ ] ;
16473: LD_ADDR_EXP 73
16477: PUSH
16478: EMPTY
16479: ST_TO_ADDR
// mc_tech := [ ] ;
16480: LD_ADDR_EXP 75
16484: PUSH
16485: EMPTY
16486: ST_TO_ADDR
// end ;
16487: LD_VAR 0 1
16491: RET
// export function MC_Kill ( base ) ; begin
16492: LD_INT 0
16494: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
16495: LD_ADDR_EXP 48
16499: PUSH
16500: LD_EXP 48
16504: PPUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: EMPTY
16511: PPUSH
16512: CALL_OW 1
16516: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
16517: LD_ADDR_EXP 49
16521: PUSH
16522: LD_EXP 49
16526: PPUSH
16527: LD_VAR 0 1
16531: PPUSH
16532: EMPTY
16533: PPUSH
16534: CALL_OW 1
16538: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
16539: LD_ADDR_EXP 50
16543: PUSH
16544: LD_EXP 50
16548: PPUSH
16549: LD_VAR 0 1
16553: PPUSH
16554: EMPTY
16555: PPUSH
16556: CALL_OW 1
16560: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
16561: LD_ADDR_EXP 51
16565: PUSH
16566: LD_EXP 51
16570: PPUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: EMPTY
16577: PPUSH
16578: CALL_OW 1
16582: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
16583: LD_ADDR_EXP 52
16587: PUSH
16588: LD_EXP 52
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: EMPTY
16599: PPUSH
16600: CALL_OW 1
16604: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
16605: LD_ADDR_EXP 53
16609: PUSH
16610: LD_EXP 53
16614: PPUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: EMPTY
16621: PPUSH
16622: CALL_OW 1
16626: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
16627: LD_ADDR_EXP 54
16631: PUSH
16632: LD_EXP 54
16636: PPUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: EMPTY
16643: PPUSH
16644: CALL_OW 1
16648: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
16649: LD_ADDR_EXP 55
16653: PUSH
16654: LD_EXP 55
16658: PPUSH
16659: LD_VAR 0 1
16663: PPUSH
16664: EMPTY
16665: PPUSH
16666: CALL_OW 1
16670: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
16671: LD_ADDR_EXP 56
16675: PUSH
16676: LD_EXP 56
16680: PPUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: EMPTY
16687: PPUSH
16688: CALL_OW 1
16692: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
16693: LD_ADDR_EXP 57
16697: PUSH
16698: LD_EXP 57
16702: PPUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: EMPTY
16709: PPUSH
16710: CALL_OW 1
16714: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
16715: LD_ADDR_EXP 58
16719: PUSH
16720: LD_EXP 58
16724: PPUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: EMPTY
16731: PPUSH
16732: CALL_OW 1
16736: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
16737: LD_ADDR_EXP 59
16741: PUSH
16742: LD_EXP 59
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: LD_INT 0
16754: PPUSH
16755: CALL_OW 1
16759: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
16760: LD_ADDR_EXP 60
16764: PUSH
16765: LD_EXP 60
16769: PPUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: EMPTY
16776: PPUSH
16777: CALL_OW 1
16781: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
16782: LD_ADDR_EXP 61
16786: PUSH
16787: LD_EXP 61
16791: PPUSH
16792: LD_VAR 0 1
16796: PPUSH
16797: EMPTY
16798: PPUSH
16799: CALL_OW 1
16803: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
16804: LD_ADDR_EXP 62
16808: PUSH
16809: LD_EXP 62
16813: PPUSH
16814: LD_VAR 0 1
16818: PPUSH
16819: EMPTY
16820: PPUSH
16821: CALL_OW 1
16825: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
16826: LD_ADDR_EXP 63
16830: PUSH
16831: LD_EXP 63
16835: PPUSH
16836: LD_VAR 0 1
16840: PPUSH
16841: EMPTY
16842: PPUSH
16843: CALL_OW 1
16847: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
16848: LD_ADDR_EXP 64
16852: PUSH
16853: LD_EXP 64
16857: PPUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: EMPTY
16864: PPUSH
16865: CALL_OW 1
16869: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
16870: LD_ADDR_EXP 65
16874: PUSH
16875: LD_EXP 65
16879: PPUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: EMPTY
16886: PPUSH
16887: CALL_OW 1
16891: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
16892: LD_ADDR_EXP 66
16896: PUSH
16897: LD_EXP 66
16901: PPUSH
16902: LD_VAR 0 1
16906: PPUSH
16907: EMPTY
16908: PPUSH
16909: CALL_OW 1
16913: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
16914: LD_ADDR_EXP 67
16918: PUSH
16919: LD_EXP 67
16923: PPUSH
16924: LD_VAR 0 1
16928: PPUSH
16929: EMPTY
16930: PPUSH
16931: CALL_OW 1
16935: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
16936: LD_ADDR_EXP 68
16940: PUSH
16941: LD_EXP 68
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: EMPTY
16952: PPUSH
16953: CALL_OW 1
16957: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
16958: LD_ADDR_EXP 69
16962: PUSH
16963: LD_EXP 69
16967: PPUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: EMPTY
16974: PPUSH
16975: CALL_OW 1
16979: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
16980: LD_ADDR_EXP 70
16984: PUSH
16985: LD_EXP 70
16989: PPUSH
16990: LD_VAR 0 1
16994: PPUSH
16995: EMPTY
16996: PPUSH
16997: CALL_OW 1
17001: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
17002: LD_ADDR_EXP 71
17006: PUSH
17007: LD_EXP 71
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: EMPTY
17018: PPUSH
17019: CALL_OW 1
17023: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
17024: LD_ADDR_EXP 72
17028: PUSH
17029: LD_EXP 72
17033: PPUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: EMPTY
17040: PPUSH
17041: CALL_OW 1
17045: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
17046: LD_ADDR_EXP 73
17050: PUSH
17051: LD_EXP 73
17055: PPUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: EMPTY
17062: PPUSH
17063: CALL_OW 1
17067: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
17068: LD_ADDR_EXP 75
17072: PUSH
17073: LD_EXP 75
17077: PPUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: EMPTY
17084: PPUSH
17085: CALL_OW 1
17089: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
17090: LD_ADDR_EXP 77
17094: PUSH
17095: LD_EXP 77
17099: PPUSH
17100: LD_VAR 0 1
17104: PPUSH
17105: EMPTY
17106: PPUSH
17107: CALL_OW 1
17111: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
17112: LD_ADDR_EXP 78
17116: PUSH
17117: LD_EXP 78
17121: PPUSH
17122: LD_VAR 0 1
17126: PPUSH
17127: EMPTY
17128: PPUSH
17129: CALL_OW 1
17133: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
17134: LD_ADDR_EXP 79
17138: PUSH
17139: LD_EXP 79
17143: PPUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: EMPTY
17150: PPUSH
17151: CALL_OW 1
17155: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
17156: LD_ADDR_EXP 80
17160: PUSH
17161: LD_EXP 80
17165: PPUSH
17166: LD_VAR 0 1
17170: PPUSH
17171: EMPTY
17172: PPUSH
17173: CALL_OW 1
17177: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
17178: LD_ADDR_EXP 81
17182: PUSH
17183: LD_EXP 81
17187: PPUSH
17188: LD_VAR 0 1
17192: PPUSH
17193: EMPTY
17194: PPUSH
17195: CALL_OW 1
17199: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
17200: LD_ADDR_EXP 82
17204: PUSH
17205: LD_EXP 82
17209: PPUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: EMPTY
17216: PPUSH
17217: CALL_OW 1
17221: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
17222: LD_ADDR_EXP 83
17226: PUSH
17227: LD_EXP 83
17231: PPUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: EMPTY
17238: PPUSH
17239: CALL_OW 1
17243: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
17244: LD_ADDR_EXP 84
17248: PUSH
17249: LD_EXP 84
17253: PPUSH
17254: LD_VAR 0 1
17258: PPUSH
17259: EMPTY
17260: PPUSH
17261: CALL_OW 1
17265: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
17266: LD_ADDR_EXP 85
17270: PUSH
17271: LD_EXP 85
17275: PPUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: EMPTY
17282: PPUSH
17283: CALL_OW 1
17287: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
17288: LD_ADDR_EXP 86
17292: PUSH
17293: LD_EXP 86
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: EMPTY
17304: PPUSH
17305: CALL_OW 1
17309: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
17310: LD_ADDR_EXP 87
17314: PUSH
17315: LD_EXP 87
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: EMPTY
17326: PPUSH
17327: CALL_OW 1
17331: ST_TO_ADDR
// end ;
17332: LD_VAR 0 2
17336: RET
// export function MC_Start ( ) ; var i ; begin
17337: LD_INT 0
17339: PPUSH
17340: PPUSH
// for i = 1 to mc_bases do
17341: LD_ADDR_VAR 0 2
17345: PUSH
17346: DOUBLE
17347: LD_INT 1
17349: DEC
17350: ST_TO_ADDR
17351: LD_EXP 48
17355: PUSH
17356: FOR_TO
17357: IFFALSE 18290
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
17359: LD_ADDR_EXP 49
17363: PUSH
17364: LD_EXP 49
17368: PPUSH
17369: LD_VAR 0 2
17373: PPUSH
17374: EMPTY
17375: PPUSH
17376: CALL_OW 1
17380: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
17381: LD_ADDR_EXP 50
17385: PUSH
17386: LD_EXP 50
17390: PPUSH
17391: LD_VAR 0 2
17395: PPUSH
17396: EMPTY
17397: PPUSH
17398: CALL_OW 1
17402: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
17403: LD_ADDR_EXP 51
17407: PUSH
17408: LD_EXP 51
17412: PPUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: EMPTY
17419: PPUSH
17420: CALL_OW 1
17424: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
17425: LD_ADDR_EXP 52
17429: PUSH
17430: LD_EXP 52
17434: PPUSH
17435: LD_VAR 0 2
17439: PPUSH
17440: EMPTY
17441: PUSH
17442: EMPTY
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 1
17452: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
17453: LD_ADDR_EXP 53
17457: PUSH
17458: LD_EXP 53
17462: PPUSH
17463: LD_VAR 0 2
17467: PPUSH
17468: EMPTY
17469: PPUSH
17470: CALL_OW 1
17474: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
17475: LD_ADDR_EXP 80
17479: PUSH
17480: LD_EXP 80
17484: PPUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: EMPTY
17491: PPUSH
17492: CALL_OW 1
17496: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
17497: LD_ADDR_EXP 54
17501: PUSH
17502: LD_EXP 54
17506: PPUSH
17507: LD_VAR 0 2
17511: PPUSH
17512: EMPTY
17513: PPUSH
17514: CALL_OW 1
17518: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
17519: LD_ADDR_EXP 55
17523: PUSH
17524: LD_EXP 55
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: EMPTY
17535: PPUSH
17536: CALL_OW 1
17540: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
17541: LD_ADDR_EXP 56
17545: PUSH
17546: LD_EXP 56
17550: PPUSH
17551: LD_VAR 0 2
17555: PPUSH
17556: EMPTY
17557: PPUSH
17558: CALL_OW 1
17562: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
17563: LD_ADDR_EXP 57
17567: PUSH
17568: LD_EXP 57
17572: PPUSH
17573: LD_VAR 0 2
17577: PPUSH
17578: LD_EXP 48
17582: PUSH
17583: LD_VAR 0 2
17587: ARRAY
17588: PPUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 30
17594: PUSH
17595: LD_INT 32
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: LD_INT 30
17604: PUSH
17605: LD_INT 31
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 58
17619: PUSH
17620: EMPTY
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PPUSH
17627: CALL_OW 72
17631: PPUSH
17632: CALL_OW 1
17636: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
17637: LD_ADDR_EXP 58
17641: PUSH
17642: LD_EXP 58
17646: PPUSH
17647: LD_VAR 0 2
17651: PPUSH
17652: EMPTY
17653: PPUSH
17654: CALL_OW 1
17658: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
17659: LD_ADDR_EXP 62
17663: PUSH
17664: LD_EXP 62
17668: PPUSH
17669: LD_VAR 0 2
17673: PPUSH
17674: EMPTY
17675: PPUSH
17676: CALL_OW 1
17680: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
17681: LD_ADDR_EXP 61
17685: PUSH
17686: LD_EXP 61
17690: PPUSH
17691: LD_VAR 0 2
17695: PPUSH
17696: EMPTY
17697: PPUSH
17698: CALL_OW 1
17702: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
17703: LD_ADDR_EXP 63
17707: PUSH
17708: LD_EXP 63
17712: PPUSH
17713: LD_VAR 0 2
17717: PPUSH
17718: EMPTY
17719: PPUSH
17720: CALL_OW 1
17724: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
17725: LD_ADDR_EXP 64
17729: PUSH
17730: LD_EXP 64
17734: PPUSH
17735: LD_VAR 0 2
17739: PPUSH
17740: EMPTY
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
17747: LD_ADDR_EXP 65
17751: PUSH
17752: LD_EXP 65
17756: PPUSH
17757: LD_VAR 0 2
17761: PPUSH
17762: EMPTY
17763: PPUSH
17764: CALL_OW 1
17768: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
17769: LD_ADDR_EXP 66
17773: PUSH
17774: LD_EXP 66
17778: PPUSH
17779: LD_VAR 0 2
17783: PPUSH
17784: EMPTY
17785: PPUSH
17786: CALL_OW 1
17790: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
17791: LD_ADDR_EXP 67
17795: PUSH
17796: LD_EXP 67
17800: PPUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: EMPTY
17807: PPUSH
17808: CALL_OW 1
17812: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
17813: LD_ADDR_EXP 68
17817: PUSH
17818: LD_EXP 68
17822: PPUSH
17823: LD_VAR 0 2
17827: PPUSH
17828: EMPTY
17829: PPUSH
17830: CALL_OW 1
17834: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
17835: LD_ADDR_EXP 69
17839: PUSH
17840: LD_EXP 69
17844: PPUSH
17845: LD_VAR 0 2
17849: PPUSH
17850: EMPTY
17851: PPUSH
17852: CALL_OW 1
17856: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
17857: LD_ADDR_EXP 70
17861: PUSH
17862: LD_EXP 70
17866: PPUSH
17867: LD_VAR 0 2
17871: PPUSH
17872: EMPTY
17873: PPUSH
17874: CALL_OW 1
17878: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
17879: LD_ADDR_EXP 59
17883: PUSH
17884: LD_EXP 59
17888: PPUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_INT 0
17896: PPUSH
17897: CALL_OW 1
17901: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
17902: LD_ADDR_EXP 72
17906: PUSH
17907: LD_EXP 72
17911: PPUSH
17912: LD_VAR 0 2
17916: PPUSH
17917: LD_INT 0
17919: PPUSH
17920: CALL_OW 1
17924: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
17925: LD_ADDR_EXP 60
17929: PUSH
17930: LD_EXP 60
17934: PPUSH
17935: LD_VAR 0 2
17939: PPUSH
17940: EMPTY
17941: PPUSH
17942: CALL_OW 1
17946: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
17947: LD_ADDR_EXP 71
17951: PUSH
17952: LD_EXP 71
17956: PPUSH
17957: LD_VAR 0 2
17961: PPUSH
17962: LD_INT 0
17964: PPUSH
17965: CALL_OW 1
17969: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
17970: LD_ADDR_EXP 73
17974: PUSH
17975: LD_EXP 73
17979: PPUSH
17980: LD_VAR 0 2
17984: PPUSH
17985: EMPTY
17986: PPUSH
17987: CALL_OW 1
17991: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
17992: LD_ADDR_EXP 76
17996: PUSH
17997: LD_EXP 76
18001: PPUSH
18002: LD_VAR 0 2
18006: PPUSH
18007: LD_INT 0
18009: PPUSH
18010: CALL_OW 1
18014: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
18015: LD_ADDR_EXP 77
18019: PUSH
18020: LD_EXP 77
18024: PPUSH
18025: LD_VAR 0 2
18029: PPUSH
18030: EMPTY
18031: PPUSH
18032: CALL_OW 1
18036: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
18037: LD_ADDR_EXP 78
18041: PUSH
18042: LD_EXP 78
18046: PPUSH
18047: LD_VAR 0 2
18051: PPUSH
18052: EMPTY
18053: PPUSH
18054: CALL_OW 1
18058: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
18059: LD_ADDR_EXP 79
18063: PUSH
18064: LD_EXP 79
18068: PPUSH
18069: LD_VAR 0 2
18073: PPUSH
18074: EMPTY
18075: PPUSH
18076: CALL_OW 1
18080: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
18081: LD_ADDR_EXP 81
18085: PUSH
18086: LD_EXP 81
18090: PPUSH
18091: LD_VAR 0 2
18095: PPUSH
18096: LD_EXP 48
18100: PUSH
18101: LD_VAR 0 2
18105: ARRAY
18106: PPUSH
18107: LD_INT 2
18109: PUSH
18110: LD_INT 30
18112: PUSH
18113: LD_INT 6
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 30
18122: PUSH
18123: LD_INT 7
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 30
18132: PUSH
18133: LD_INT 8
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: PPUSH
18146: CALL_OW 72
18150: PPUSH
18151: CALL_OW 1
18155: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
18156: LD_ADDR_EXP 82
18160: PUSH
18161: LD_EXP 82
18165: PPUSH
18166: LD_VAR 0 2
18170: PPUSH
18171: EMPTY
18172: PPUSH
18173: CALL_OW 1
18177: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
18178: LD_ADDR_EXP 83
18182: PUSH
18183: LD_EXP 83
18187: PPUSH
18188: LD_VAR 0 2
18192: PPUSH
18193: EMPTY
18194: PPUSH
18195: CALL_OW 1
18199: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
18200: LD_ADDR_EXP 84
18204: PUSH
18205: LD_EXP 84
18209: PPUSH
18210: LD_VAR 0 2
18214: PPUSH
18215: EMPTY
18216: PPUSH
18217: CALL_OW 1
18221: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
18222: LD_ADDR_EXP 85
18226: PUSH
18227: LD_EXP 85
18231: PPUSH
18232: LD_VAR 0 2
18236: PPUSH
18237: EMPTY
18238: PPUSH
18239: CALL_OW 1
18243: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
18244: LD_ADDR_EXP 86
18248: PUSH
18249: LD_EXP 86
18253: PPUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: EMPTY
18260: PPUSH
18261: CALL_OW 1
18265: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
18266: LD_ADDR_EXP 87
18270: PUSH
18271: LD_EXP 87
18275: PPUSH
18276: LD_VAR 0 2
18280: PPUSH
18281: EMPTY
18282: PPUSH
18283: CALL_OW 1
18287: ST_TO_ADDR
// end ;
18288: GO 17356
18290: POP
18291: POP
// MC_InitSides ( ) ;
18292: CALL 18578 0 0
// MC_InitResearch ( ) ;
18296: CALL 18317 0 0
// CustomInitMacro ( ) ;
18300: CALL 285 0 0
// skirmish := true ;
18304: LD_ADDR_EXP 47
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// end ;
18312: LD_VAR 0 1
18316: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
18317: LD_INT 0
18319: PPUSH
18320: PPUSH
18321: PPUSH
18322: PPUSH
18323: PPUSH
18324: PPUSH
// if not mc_bases then
18325: LD_EXP 48
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18573
// for i = 1 to 8 do
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: DOUBLE
18340: LD_INT 1
18342: DEC
18343: ST_TO_ADDR
18344: LD_INT 8
18346: PUSH
18347: FOR_TO
18348: IFFALSE 18374
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
18350: LD_ADDR_EXP 75
18354: PUSH
18355: LD_EXP 75
18359: PPUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: EMPTY
18366: PPUSH
18367: CALL_OW 1
18371: ST_TO_ADDR
18372: GO 18347
18374: POP
18375: POP
// tmp := [ ] ;
18376: LD_ADDR_VAR 0 5
18380: PUSH
18381: EMPTY
18382: ST_TO_ADDR
// for i = 1 to mc_sides do
18383: LD_ADDR_VAR 0 2
18387: PUSH
18388: DOUBLE
18389: LD_INT 1
18391: DEC
18392: ST_TO_ADDR
18393: LD_EXP 74
18397: PUSH
18398: FOR_TO
18399: IFFALSE 18457
// if not mc_sides [ i ] in tmp then
18401: LD_EXP 74
18405: PUSH
18406: LD_VAR 0 2
18410: ARRAY
18411: PUSH
18412: LD_VAR 0 5
18416: IN
18417: NOT
18418: IFFALSE 18455
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
18420: LD_ADDR_VAR 0 5
18424: PUSH
18425: LD_VAR 0 5
18429: PPUSH
18430: LD_VAR 0 5
18434: PUSH
18435: LD_INT 1
18437: PLUS
18438: PPUSH
18439: LD_EXP 74
18443: PUSH
18444: LD_VAR 0 2
18448: ARRAY
18449: PPUSH
18450: CALL_OW 2
18454: ST_TO_ADDR
18455: GO 18398
18457: POP
18458: POP
// if not tmp then
18459: LD_VAR 0 5
18463: NOT
18464: IFFALSE 18468
// exit ;
18466: GO 18573
// for j in tmp do
18468: LD_ADDR_VAR 0 3
18472: PUSH
18473: LD_VAR 0 5
18477: PUSH
18478: FOR_IN
18479: IFFALSE 18571
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
18481: LD_ADDR_VAR 0 6
18485: PUSH
18486: LD_INT 22
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PPUSH
18498: CALL_OW 69
18502: ST_TO_ADDR
// if not un then
18503: LD_VAR 0 6
18507: NOT
18508: IFFALSE 18512
// continue ;
18510: GO 18478
// nation := GetNation ( un [ 1 ] ) ;
18512: LD_ADDR_VAR 0 4
18516: PUSH
18517: LD_VAR 0 6
18521: PUSH
18522: LD_INT 1
18524: ARRAY
18525: PPUSH
18526: CALL_OW 248
18530: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
18531: LD_ADDR_EXP 75
18535: PUSH
18536: LD_EXP 75
18540: PPUSH
18541: LD_VAR 0 3
18545: PPUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: LD_VAR 0 4
18555: PPUSH
18556: LD_INT 1
18558: PPUSH
18559: CALL 37790 0 3
18563: PPUSH
18564: CALL_OW 1
18568: ST_TO_ADDR
// end ;
18569: GO 18478
18571: POP
18572: POP
// end ;
18573: LD_VAR 0 1
18577: RET
// export function MC_InitSides ( ) ; var i ; begin
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
// if not mc_bases then
18582: LD_EXP 48
18586: NOT
18587: IFFALSE 18591
// exit ;
18589: GO 18665
// for i = 1 to mc_bases do
18591: LD_ADDR_VAR 0 2
18595: PUSH
18596: DOUBLE
18597: LD_INT 1
18599: DEC
18600: ST_TO_ADDR
18601: LD_EXP 48
18605: PUSH
18606: FOR_TO
18607: IFFALSE 18663
// if mc_bases [ i ] then
18609: LD_EXP 48
18613: PUSH
18614: LD_VAR 0 2
18618: ARRAY
18619: IFFALSE 18661
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
18621: LD_ADDR_EXP 74
18625: PUSH
18626: LD_EXP 74
18630: PPUSH
18631: LD_VAR 0 2
18635: PPUSH
18636: LD_EXP 48
18640: PUSH
18641: LD_VAR 0 2
18645: ARRAY
18646: PUSH
18647: LD_INT 1
18649: ARRAY
18650: PPUSH
18651: CALL_OW 255
18655: PPUSH
18656: CALL_OW 1
18660: ST_TO_ADDR
18661: GO 18606
18663: POP
18664: POP
// end ;
18665: LD_VAR 0 1
18669: RET
// every 0 0$01 trigger skirmish do
18670: LD_EXP 47
18674: IFFALSE 18807
18676: GO 18678
18678: DISABLE
// begin enable ;
18679: ENABLE
// MC_CheckBuildings ( ) ;
18680: CALL 19292 0 0
// MC_CheckPeopleLife ( ) ;
18684: CALL 19417 0 0
// RaiseSailEvent ( 103 ) ;
18688: LD_INT 103
18690: PPUSH
18691: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
18695: LD_INT 104
18697: PPUSH
18698: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
18702: LD_INT 105
18704: PPUSH
18705: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
18709: LD_INT 106
18711: PPUSH
18712: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
18716: LD_INT 107
18718: PPUSH
18719: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
18723: LD_INT 108
18725: PPUSH
18726: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
18730: LD_INT 109
18732: PPUSH
18733: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
18737: LD_INT 110
18739: PPUSH
18740: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
18744: LD_INT 111
18746: PPUSH
18747: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
18751: LD_INT 112
18753: PPUSH
18754: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
18758: LD_INT 120
18760: PPUSH
18761: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
18765: LD_INT 121
18767: PPUSH
18768: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
18772: LD_INT 122
18774: PPUSH
18775: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
18779: LD_INT 123
18781: PPUSH
18782: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
18786: LD_INT 125
18788: PPUSH
18789: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
18793: LD_INT 126
18795: PPUSH
18796: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
18800: LD_INT 200
18802: PPUSH
18803: CALL_OW 427
// end ;
18807: END
// every 10 trigger skirmish do var i ;
18808: LD_EXP 47
18812: IFFALSE 18911
18814: GO 18816
18816: DISABLE
18817: LD_INT 0
18819: PPUSH
// begin enable ;
18820: ENABLE
// if not mc_bases then
18821: LD_EXP 48
18825: NOT
18826: IFFALSE 18830
// exit ;
18828: GO 18911
// for i = 1 to mc_bases do
18830: LD_ADDR_VAR 0 1
18834: PUSH
18835: DOUBLE
18836: LD_INT 1
18838: DEC
18839: ST_TO_ADDR
18840: LD_EXP 48
18844: PUSH
18845: FOR_TO
18846: IFFALSE 18909
// if mc_mines [ i ] and mc_miners [ i ] then
18848: LD_EXP 61
18852: PUSH
18853: LD_VAR 0 1
18857: ARRAY
18858: PUSH
18859: LD_EXP 62
18863: PUSH
18864: LD_VAR 0 1
18868: ARRAY
18869: AND
18870: IFFALSE 18907
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
18872: LD_EXP 62
18876: PUSH
18877: LD_VAR 0 1
18881: ARRAY
18882: PUSH
18883: LD_INT 1
18885: ARRAY
18886: PPUSH
18887: CALL_OW 255
18891: PPUSH
18892: LD_EXP 61
18896: PUSH
18897: LD_VAR 0 1
18901: ARRAY
18902: PPUSH
18903: CALL 41022 0 2
18907: GO 18845
18909: POP
18910: POP
// end ;
18911: PPOPN 1
18913: END
// on SailEvent ( event ) do begin if event = 101 then
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 101
18921: EQUAL
18922: IFFALSE 18928
// MC_RepairBuildings ( ) ;
18924: CALL 19975 0 0
// if event = 102 then
18928: LD_VAR 0 1
18932: PUSH
18933: LD_INT 102
18935: EQUAL
18936: IFFALSE 18942
// MC_Heal ( ) ;
18938: CALL 20381 0 0
// if event = 103 then
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 103
18949: EQUAL
18950: IFFALSE 18956
// MC_Build ( ) ;
18952: CALL 20803 0 0
// if event = 104 then
18956: LD_VAR 0 1
18960: PUSH
18961: LD_INT 104
18963: EQUAL
18964: IFFALSE 18970
// MC_TurretWeapon ( ) ;
18966: CALL 22242 0 0
// if event = 105 then
18970: LD_VAR 0 1
18974: PUSH
18975: LD_INT 105
18977: EQUAL
18978: IFFALSE 18984
// MC_BuildUpgrade ( ) ;
18980: CALL 21793 0 0
// if event = 106 then
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 106
18991: EQUAL
18992: IFFALSE 18998
// MC_PlantMines ( ) ;
18994: CALL 22594 0 0
// if event = 107 then
18998: LD_VAR 0 1
19002: PUSH
19003: LD_INT 107
19005: EQUAL
19006: IFFALSE 19012
// MC_CollectCrates ( ) ;
19008: CALL 23601 0 0
// if event = 108 then
19012: LD_VAR 0 1
19016: PUSH
19017: LD_INT 108
19019: EQUAL
19020: IFFALSE 19026
// MC_LinkRemoteControl ( ) ;
19022: CALL 25105 0 0
// if event = 109 then
19026: LD_VAR 0 1
19030: PUSH
19031: LD_INT 109
19033: EQUAL
19034: IFFALSE 19040
// MC_ProduceVehicle ( ) ;
19036: CALL 25286 0 0
// if event = 110 then
19040: LD_VAR 0 1
19044: PUSH
19045: LD_INT 110
19047: EQUAL
19048: IFFALSE 19054
// MC_SendAttack ( ) ;
19050: CALL 25767 0 0
// if event = 111 then
19054: LD_VAR 0 1
19058: PUSH
19059: LD_INT 111
19061: EQUAL
19062: IFFALSE 19068
// MC_Defend ( ) ;
19064: CALL 25875 0 0
// if event = 112 then
19068: LD_VAR 0 1
19072: PUSH
19073: LD_INT 112
19075: EQUAL
19076: IFFALSE 19082
// MC_Research ( ) ;
19078: CALL 26273 0 0
// if event = 120 then
19082: LD_VAR 0 1
19086: PUSH
19087: LD_INT 120
19089: EQUAL
19090: IFFALSE 19096
// MC_RepairVehicle ( ) ;
19092: CALL 27242 0 0
// if event = 121 then
19096: LD_VAR 0 1
19100: PUSH
19101: LD_INT 121
19103: EQUAL
19104: IFFALSE 19110
// MC_TameApe ( ) ;
19106: CALL 27931 0 0
// if event = 122 then
19110: LD_VAR 0 1
19114: PUSH
19115: LD_INT 122
19117: EQUAL
19118: IFFALSE 19124
// MC_ChangeApeClass ( ) ;
19120: CALL 28694 0 0
// if event = 123 then
19124: LD_VAR 0 1
19128: PUSH
19129: LD_INT 123
19131: EQUAL
19132: IFFALSE 19138
// MC_Bazooka ( ) ;
19134: CALL 29328 0 0
// if event = 124 then
19138: LD_VAR 0 1
19142: PUSH
19143: LD_INT 124
19145: EQUAL
19146: IFFALSE 19152
// MC_TeleportExit ( ) ;
19148: CALL 29526 0 0
// if event = 125 then
19152: LD_VAR 0 1
19156: PUSH
19157: LD_INT 125
19159: EQUAL
19160: IFFALSE 19166
// MC_Deposits ( ) ;
19162: CALL 29568 0 0
// if event = 126 then
19166: LD_VAR 0 1
19170: PUSH
19171: LD_INT 126
19173: EQUAL
19174: IFFALSE 19180
// MC_RemoteDriver ( ) ;
19176: CALL 30147 0 0
// if event = 200 then
19180: LD_VAR 0 1
19184: PUSH
19185: LD_INT 200
19187: EQUAL
19188: IFFALSE 19194
// MC_Idle ( ) ;
19190: CALL 31652 0 0
// end ;
19194: PPOPN 1
19196: END
// export function MC_Reset ( base , tag ) ; var i ; begin
19197: LD_INT 0
19199: PPUSH
19200: PPUSH
// if not mc_bases [ base ] or not tag then
19201: LD_EXP 48
19205: PUSH
19206: LD_VAR 0 1
19210: ARRAY
19211: NOT
19212: PUSH
19213: LD_VAR 0 2
19217: NOT
19218: OR
19219: IFFALSE 19223
// exit ;
19221: GO 19287
// for i in mc_bases [ base ] union mc_ape [ base ] do
19223: LD_ADDR_VAR 0 4
19227: PUSH
19228: LD_EXP 48
19232: PUSH
19233: LD_VAR 0 1
19237: ARRAY
19238: PUSH
19239: LD_EXP 77
19243: PUSH
19244: LD_VAR 0 1
19248: ARRAY
19249: UNION
19250: PUSH
19251: FOR_IN
19252: IFFALSE 19285
// if GetTag ( i ) = tag then
19254: LD_VAR 0 4
19258: PPUSH
19259: CALL_OW 110
19263: PUSH
19264: LD_VAR 0 2
19268: EQUAL
19269: IFFALSE 19283
// SetTag ( i , 0 ) ;
19271: LD_VAR 0 4
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: CALL_OW 109
19283: GO 19251
19285: POP
19286: POP
// end ;
19287: LD_VAR 0 3
19291: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
19292: LD_INT 0
19294: PPUSH
19295: PPUSH
19296: PPUSH
// if not mc_bases then
19297: LD_EXP 48
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19412
// for i = 1 to mc_bases do
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: DOUBLE
19312: LD_INT 1
19314: DEC
19315: ST_TO_ADDR
19316: LD_EXP 48
19320: PUSH
19321: FOR_TO
19322: IFFALSE 19403
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: LD_EXP 48
19333: PUSH
19334: LD_VAR 0 2
19338: ARRAY
19339: PPUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 3
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 24
19355: PUSH
19356: LD_INT 1000
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 72
19375: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
19376: LD_ADDR_EXP 49
19380: PUSH
19381: LD_EXP 49
19385: PPUSH
19386: LD_VAR 0 2
19390: PPUSH
19391: LD_VAR 0 3
19395: PPUSH
19396: CALL_OW 1
19400: ST_TO_ADDR
// end ;
19401: GO 19321
19403: POP
19404: POP
// RaiseSailEvent ( 101 ) ;
19405: LD_INT 101
19407: PPUSH
19408: CALL_OW 427
// end ;
19412: LD_VAR 0 1
19416: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
19417: LD_INT 0
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
// if not mc_bases then
19426: LD_EXP 48
19430: NOT
19431: IFFALSE 19435
// exit ;
19433: GO 19970
// for i = 1 to mc_bases do
19435: LD_ADDR_VAR 0 2
19439: PUSH
19440: DOUBLE
19441: LD_INT 1
19443: DEC
19444: ST_TO_ADDR
19445: LD_EXP 48
19449: PUSH
19450: FOR_TO
19451: IFFALSE 19961
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
19453: LD_ADDR_VAR 0 5
19457: PUSH
19458: LD_EXP 48
19462: PUSH
19463: LD_VAR 0 2
19467: ARRAY
19468: PUSH
19469: LD_EXP 77
19473: PUSH
19474: LD_VAR 0 2
19478: ARRAY
19479: UNION
19480: PPUSH
19481: LD_INT 21
19483: PUSH
19484: LD_INT 1
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: LD_INT 54
19499: PUSH
19500: EMPTY
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_INT 24
19512: PUSH
19513: LD_INT 700
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 72
19537: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
19538: LD_ADDR_VAR 0 6
19542: PUSH
19543: LD_EXP 48
19547: PUSH
19548: LD_VAR 0 2
19552: ARRAY
19553: PPUSH
19554: LD_INT 21
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 3
19569: PUSH
19570: LD_INT 54
19572: PUSH
19573: EMPTY
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: LD_INT 3
19582: PUSH
19583: LD_INT 24
19585: PUSH
19586: LD_INT 250
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PPUSH
19606: CALL_OW 72
19610: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
19611: LD_ADDR_VAR 0 7
19615: PUSH
19616: LD_VAR 0 5
19620: PUSH
19621: LD_VAR 0 6
19625: DIFF
19626: ST_TO_ADDR
// if not need_heal_1 then
19627: LD_VAR 0 6
19631: NOT
19632: IFFALSE 19665
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
19634: LD_ADDR_EXP 51
19638: PUSH
19639: LD_EXP 51
19643: PPUSH
19644: LD_VAR 0 2
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PPUSH
19656: EMPTY
19657: PPUSH
19658: CALL 44364 0 3
19662: ST_TO_ADDR
19663: GO 19697
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
19665: LD_ADDR_EXP 51
19669: PUSH
19670: LD_EXP 51
19674: PPUSH
19675: LD_VAR 0 2
19679: PUSH
19680: LD_INT 1
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: PPUSH
19687: LD_VAR 0 6
19691: PPUSH
19692: CALL 44364 0 3
19696: ST_TO_ADDR
// if not need_heal_2 then
19697: LD_VAR 0 7
19701: NOT
19702: IFFALSE 19735
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
19704: LD_ADDR_EXP 51
19708: PUSH
19709: LD_EXP 51
19713: PPUSH
19714: LD_VAR 0 2
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL 44364 0 3
19732: ST_TO_ADDR
19733: GO 19767
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
19735: LD_ADDR_EXP 51
19739: PUSH
19740: LD_EXP 51
19744: PPUSH
19745: LD_VAR 0 2
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PPUSH
19757: LD_VAR 0 7
19761: PPUSH
19762: CALL 44364 0 3
19766: ST_TO_ADDR
// if need_heal_2 then
19767: LD_VAR 0 7
19771: IFFALSE 19943
// for j in need_heal_2 do
19773: LD_ADDR_VAR 0 3
19777: PUSH
19778: LD_VAR 0 7
19782: PUSH
19783: FOR_IN
19784: IFFALSE 19941
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
19786: LD_ADDR_VAR 0 5
19790: PUSH
19791: LD_EXP 48
19795: PUSH
19796: LD_VAR 0 2
19800: ARRAY
19801: PPUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 30
19807: PUSH
19808: LD_INT 6
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 30
19817: PUSH
19818: LD_INT 7
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 30
19827: PUSH
19828: LD_INT 8
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 30
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 4
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: PPUSH
19874: CALL_OW 72
19878: ST_TO_ADDR
// if tmp then
19879: LD_VAR 0 5
19883: IFFALSE 19939
// begin k := NearestUnitToUnit ( tmp , j ) ;
19885: LD_ADDR_VAR 0 4
19889: PUSH
19890: LD_VAR 0 5
19894: PPUSH
19895: LD_VAR 0 3
19899: PPUSH
19900: CALL_OW 74
19904: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
19905: LD_VAR 0 3
19909: PPUSH
19910: LD_VAR 0 4
19914: PPUSH
19915: CALL_OW 296
19919: PUSH
19920: LD_INT 7
19922: GREATER
19923: IFFALSE 19939
// ComMoveUnit ( j , k ) ;
19925: LD_VAR 0 3
19929: PPUSH
19930: LD_VAR 0 4
19934: PPUSH
19935: CALL_OW 112
// end ; end ;
19939: GO 19783
19941: POP
19942: POP
// if not need_heal_1 and not need_heal_2 then
19943: LD_VAR 0 6
19947: NOT
19948: PUSH
19949: LD_VAR 0 7
19953: NOT
19954: AND
19955: IFFALSE 19959
// continue ;
19957: GO 19450
// end ;
19959: GO 19450
19961: POP
19962: POP
// RaiseSailEvent ( 102 ) ;
19963: LD_INT 102
19965: PPUSH
19966: CALL_OW 427
// end ;
19970: LD_VAR 0 1
19974: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
19975: LD_INT 0
19977: PPUSH
19978: PPUSH
19979: PPUSH
19980: PPUSH
19981: PPUSH
// if not mc_bases then
19982: LD_EXP 48
19986: NOT
19987: IFFALSE 19991
// exit ;
19989: GO 20376
// for i = 1 to mc_bases do
19991: LD_ADDR_VAR 0 2
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_EXP 48
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20374
// begin if not mc_building_need_repair [ i ] then
20009: LD_EXP 49
20013: PUSH
20014: LD_VAR 0 2
20018: ARRAY
20019: NOT
20020: IFFALSE 20058
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
20022: LD_ADDR_EXP 50
20026: PUSH
20027: LD_EXP 50
20031: PPUSH
20032: LD_VAR 0 2
20036: PPUSH
20037: EMPTY
20038: PPUSH
20039: CALL_OW 1
20043: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
20044: LD_VAR 0 2
20048: PPUSH
20049: LD_INT 101
20051: PPUSH
20052: CALL 19197 0 2
// continue ;
20056: GO 20006
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
20058: LD_ADDR_EXP 54
20062: PUSH
20063: LD_EXP 54
20067: PPUSH
20068: LD_VAR 0 2
20072: PPUSH
20073: EMPTY
20074: PPUSH
20075: CALL_OW 1
20079: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20080: LD_VAR 0 2
20084: PPUSH
20085: LD_INT 103
20087: PPUSH
20088: CALL 19197 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
20092: LD_ADDR_VAR 0 5
20096: PUSH
20097: LD_EXP 48
20101: PUSH
20102: LD_VAR 0 2
20106: ARRAY
20107: PUSH
20108: LD_EXP 77
20112: PUSH
20113: LD_VAR 0 2
20117: ARRAY
20118: UNION
20119: PPUSH
20120: LD_INT 2
20122: PUSH
20123: LD_INT 25
20125: PUSH
20126: LD_INT 2
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 16
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PUSH
20148: EMPTY
20149: LIST
20150: PPUSH
20151: CALL_OW 72
20155: ST_TO_ADDR
// if not tmp then
20156: LD_VAR 0 5
20160: NOT
20161: IFFALSE 20165
// continue ;
20163: GO 20006
// for j in tmp do
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_VAR 0 5
20174: PUSH
20175: FOR_IN
20176: IFFALSE 20370
// begin if mc_need_heal [ i ] then
20178: LD_EXP 51
20182: PUSH
20183: LD_VAR 0 2
20187: ARRAY
20188: IFFALSE 20236
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
20190: LD_VAR 0 3
20194: PUSH
20195: LD_EXP 51
20199: PUSH
20200: LD_VAR 0 2
20204: ARRAY
20205: PUSH
20206: LD_INT 1
20208: ARRAY
20209: IN
20210: PUSH
20211: LD_VAR 0 3
20215: PUSH
20216: LD_EXP 51
20220: PUSH
20221: LD_VAR 0 2
20225: ARRAY
20226: PUSH
20227: LD_INT 2
20229: ARRAY
20230: IN
20231: OR
20232: IFFALSE 20236
// continue ;
20234: GO 20175
// if IsInUnit ( j ) then
20236: LD_VAR 0 3
20240: PPUSH
20241: CALL_OW 310
20245: IFFALSE 20256
// ComExitBuilding ( j ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
20256: LD_VAR 0 3
20260: PUSH
20261: LD_EXP 50
20265: PUSH
20266: LD_VAR 0 2
20270: ARRAY
20271: IN
20272: NOT
20273: IFFALSE 20331
// begin SetTag ( j , 101 ) ;
20275: LD_VAR 0 3
20279: PPUSH
20280: LD_INT 101
20282: PPUSH
20283: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
20287: LD_ADDR_EXP 50
20291: PUSH
20292: LD_EXP 50
20296: PPUSH
20297: LD_VAR 0 2
20301: PUSH
20302: LD_EXP 50
20306: PUSH
20307: LD_VAR 0 2
20311: ARRAY
20312: PUSH
20313: LD_INT 1
20315: PLUS
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: PPUSH
20321: LD_VAR 0 3
20325: PPUSH
20326: CALL 44364 0 3
20330: ST_TO_ADDR
// end ; Wait ( 3 ) ;
20331: LD_INT 3
20333: PPUSH
20334: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
20338: LD_VAR 0 3
20342: PPUSH
20343: LD_EXP 49
20347: PUSH
20348: LD_VAR 0 2
20352: ARRAY
20353: PPUSH
20354: LD_VAR 0 3
20358: PPUSH
20359: CALL_OW 74
20363: PPUSH
20364: CALL_OW 130
// end ;
20368: GO 20175
20370: POP
20371: POP
// end ;
20372: GO 20006
20374: POP
20375: POP
// end ;
20376: LD_VAR 0 1
20380: RET
// export function MC_Heal ; var i , j , tmp ; begin
20381: LD_INT 0
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
// if not mc_bases then
20387: LD_EXP 48
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20798
// for i = 1 to mc_bases do
20396: LD_ADDR_VAR 0 2
20400: PUSH
20401: DOUBLE
20402: LD_INT 1
20404: DEC
20405: ST_TO_ADDR
20406: LD_EXP 48
20410: PUSH
20411: FOR_TO
20412: IFFALSE 20796
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
20414: LD_EXP 51
20418: PUSH
20419: LD_VAR 0 2
20423: ARRAY
20424: PUSH
20425: LD_INT 1
20427: ARRAY
20428: NOT
20429: PUSH
20430: LD_EXP 51
20434: PUSH
20435: LD_VAR 0 2
20439: ARRAY
20440: PUSH
20441: LD_INT 2
20443: ARRAY
20444: NOT
20445: AND
20446: IFFALSE 20484
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
20448: LD_ADDR_EXP 52
20452: PUSH
20453: LD_EXP 52
20457: PPUSH
20458: LD_VAR 0 2
20462: PPUSH
20463: EMPTY
20464: PPUSH
20465: CALL_OW 1
20469: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_INT 102
20477: PPUSH
20478: CALL 19197 0 2
// continue ;
20482: GO 20411
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
20484: LD_ADDR_VAR 0 4
20488: PUSH
20489: LD_EXP 48
20493: PUSH
20494: LD_VAR 0 2
20498: ARRAY
20499: PPUSH
20500: LD_INT 25
20502: PUSH
20503: LD_INT 4
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 72
20514: ST_TO_ADDR
// if not tmp then
20515: LD_VAR 0 4
20519: NOT
20520: IFFALSE 20524
// continue ;
20522: GO 20411
// if mc_taming [ i ] then
20524: LD_EXP 79
20528: PUSH
20529: LD_VAR 0 2
20533: ARRAY
20534: IFFALSE 20558
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20536: LD_ADDR_EXP 79
20540: PUSH
20541: LD_EXP 79
20545: PPUSH
20546: LD_VAR 0 2
20550: PPUSH
20551: EMPTY
20552: PPUSH
20553: CALL_OW 1
20557: ST_TO_ADDR
// for j in tmp do
20558: LD_ADDR_VAR 0 3
20562: PUSH
20563: LD_VAR 0 4
20567: PUSH
20568: FOR_IN
20569: IFFALSE 20792
// begin if IsInUnit ( j ) then
20571: LD_VAR 0 3
20575: PPUSH
20576: CALL_OW 310
20580: IFFALSE 20591
// ComExitBuilding ( j ) ;
20582: LD_VAR 0 3
20586: PPUSH
20587: CALL_OW 122
// if not j in mc_healers [ i ] then
20591: LD_VAR 0 3
20595: PUSH
20596: LD_EXP 52
20600: PUSH
20601: LD_VAR 0 2
20605: ARRAY
20606: IN
20607: NOT
20608: IFFALSE 20654
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
20610: LD_ADDR_EXP 52
20614: PUSH
20615: LD_EXP 52
20619: PPUSH
20620: LD_VAR 0 2
20624: PUSH
20625: LD_EXP 52
20629: PUSH
20630: LD_VAR 0 2
20634: ARRAY
20635: PUSH
20636: LD_INT 1
20638: PLUS
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: LD_VAR 0 3
20648: PPUSH
20649: CALL 44364 0 3
20653: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
20654: LD_VAR 0 3
20658: PPUSH
20659: CALL_OW 110
20663: PUSH
20664: LD_INT 102
20666: NONEQUAL
20667: IFFALSE 20681
// SetTag ( j , 102 ) ;
20669: LD_VAR 0 3
20673: PPUSH
20674: LD_INT 102
20676: PPUSH
20677: CALL_OW 109
// Wait ( 3 ) ;
20681: LD_INT 3
20683: PPUSH
20684: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
20688: LD_EXP 51
20692: PUSH
20693: LD_VAR 0 2
20697: ARRAY
20698: PUSH
20699: LD_INT 1
20701: ARRAY
20702: IFFALSE 20734
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
20704: LD_VAR 0 3
20708: PPUSH
20709: LD_EXP 51
20713: PUSH
20714: LD_VAR 0 2
20718: ARRAY
20719: PUSH
20720: LD_INT 1
20722: ARRAY
20723: PUSH
20724: LD_INT 1
20726: ARRAY
20727: PPUSH
20728: CALL_OW 128
20732: GO 20790
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
20734: LD_VAR 0 3
20738: PPUSH
20739: CALL_OW 314
20743: NOT
20744: PUSH
20745: LD_EXP 51
20749: PUSH
20750: LD_VAR 0 2
20754: ARRAY
20755: PUSH
20756: LD_INT 2
20758: ARRAY
20759: AND
20760: IFFALSE 20790
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
20762: LD_VAR 0 3
20766: PPUSH
20767: LD_EXP 51
20771: PUSH
20772: LD_VAR 0 2
20776: ARRAY
20777: PUSH
20778: LD_INT 2
20780: ARRAY
20781: PUSH
20782: LD_INT 1
20784: ARRAY
20785: PPUSH
20786: CALL_OW 128
// end ;
20790: GO 20568
20792: POP
20793: POP
// end ;
20794: GO 20411
20796: POP
20797: POP
// end ;
20798: LD_VAR 0 1
20802: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
20803: LD_INT 0
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
// if not mc_bases then
20810: LD_EXP 48
20814: NOT
20815: IFFALSE 20819
// exit ;
20817: GO 21788
// for i = 1 to mc_bases do
20819: LD_ADDR_VAR 0 2
20823: PUSH
20824: DOUBLE
20825: LD_INT 1
20827: DEC
20828: ST_TO_ADDR
20829: LD_EXP 48
20833: PUSH
20834: FOR_TO
20835: IFFALSE 21786
// begin if mc_scan [ i ] then
20837: LD_EXP 71
20841: PUSH
20842: LD_VAR 0 2
20846: ARRAY
20847: IFFALSE 20851
// continue ;
20849: GO 20834
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
20851: LD_EXP 53
20855: PUSH
20856: LD_VAR 0 2
20860: ARRAY
20861: NOT
20862: PUSH
20863: LD_EXP 55
20867: PUSH
20868: LD_VAR 0 2
20872: ARRAY
20873: NOT
20874: AND
20875: PUSH
20876: LD_EXP 54
20880: PUSH
20881: LD_VAR 0 2
20885: ARRAY
20886: AND
20887: IFFALSE 20925
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
20889: LD_ADDR_EXP 54
20893: PUSH
20894: LD_EXP 54
20898: PPUSH
20899: LD_VAR 0 2
20903: PPUSH
20904: EMPTY
20905: PPUSH
20906: CALL_OW 1
20910: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
20911: LD_VAR 0 2
20915: PPUSH
20916: LD_INT 103
20918: PPUSH
20919: CALL 19197 0 2
// continue ;
20923: GO 20834
// end ; if mc_construct_list [ i ] then
20925: LD_EXP 55
20929: PUSH
20930: LD_VAR 0 2
20934: ARRAY
20935: IFFALSE 21155
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
20937: LD_ADDR_VAR 0 4
20941: PUSH
20942: LD_EXP 48
20946: PUSH
20947: LD_VAR 0 2
20951: ARRAY
20952: PPUSH
20953: LD_INT 25
20955: PUSH
20956: LD_INT 2
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 72
20967: PUSH
20968: LD_EXP 50
20972: PUSH
20973: LD_VAR 0 2
20977: ARRAY
20978: DIFF
20979: ST_TO_ADDR
// if not tmp then
20980: LD_VAR 0 4
20984: NOT
20985: IFFALSE 20989
// continue ;
20987: GO 20834
// for j in tmp do
20989: LD_ADDR_VAR 0 3
20993: PUSH
20994: LD_VAR 0 4
20998: PUSH
20999: FOR_IN
21000: IFFALSE 21151
// begin if not mc_builders [ i ] then
21002: LD_EXP 54
21006: PUSH
21007: LD_VAR 0 2
21011: ARRAY
21012: NOT
21013: IFFALSE 21071
// begin SetTag ( j , 103 ) ;
21015: LD_VAR 0 3
21019: PPUSH
21020: LD_INT 103
21022: PPUSH
21023: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21027: LD_ADDR_EXP 54
21031: PUSH
21032: LD_EXP 54
21036: PPUSH
21037: LD_VAR 0 2
21041: PUSH
21042: LD_EXP 54
21046: PUSH
21047: LD_VAR 0 2
21051: ARRAY
21052: PUSH
21053: LD_INT 1
21055: PLUS
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PPUSH
21061: LD_VAR 0 3
21065: PPUSH
21066: CALL 44364 0 3
21070: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21071: LD_VAR 0 3
21075: PPUSH
21076: CALL_OW 310
21080: IFFALSE 21091
// ComExitBuilding ( j ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: CALL_OW 122
// wait ( 3 ) ;
21091: LD_INT 3
21093: PPUSH
21094: CALL_OW 67
// if not mc_construct_list [ i ] then
21098: LD_EXP 55
21102: PUSH
21103: LD_VAR 0 2
21107: ARRAY
21108: NOT
21109: IFFALSE 21113
// break ;
21111: GO 21151
// if not HasTask ( j ) then
21113: LD_VAR 0 3
21117: PPUSH
21118: CALL_OW 314
21122: NOT
21123: IFFALSE 21149
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
21125: LD_VAR 0 3
21129: PPUSH
21130: LD_EXP 55
21134: PUSH
21135: LD_VAR 0 2
21139: ARRAY
21140: PUSH
21141: LD_INT 1
21143: ARRAY
21144: PPUSH
21145: CALL 46770 0 2
// end ;
21149: GO 20999
21151: POP
21152: POP
// end else
21153: GO 21784
// if mc_build_list [ i ] then
21155: LD_EXP 53
21159: PUSH
21160: LD_VAR 0 2
21164: ARRAY
21165: IFFALSE 21784
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
21167: LD_ADDR_VAR 0 5
21171: PUSH
21172: LD_EXP 48
21176: PUSH
21177: LD_VAR 0 2
21181: ARRAY
21182: PPUSH
21183: LD_INT 2
21185: PUSH
21186: LD_INT 30
21188: PUSH
21189: LD_INT 0
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 30
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: LIST
21210: PPUSH
21211: CALL_OW 72
21215: ST_TO_ADDR
// if depot then
21216: LD_VAR 0 5
21220: IFFALSE 21238
// depot := depot [ 1 ] else
21222: LD_ADDR_VAR 0 5
21226: PUSH
21227: LD_VAR 0 5
21231: PUSH
21232: LD_INT 1
21234: ARRAY
21235: ST_TO_ADDR
21236: GO 21246
// depot := 0 ;
21238: LD_ADDR_VAR 0 5
21242: PUSH
21243: LD_INT 0
21245: ST_TO_ADDR
// if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilded ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
21246: LD_EXP 53
21250: PUSH
21251: LD_VAR 0 2
21255: ARRAY
21256: PUSH
21257: LD_INT 1
21259: ARRAY
21260: PUSH
21261: LD_INT 1
21263: ARRAY
21264: PUSH
21265: LD_INT 0
21267: EQUAL
21268: PUSH
21269: LD_VAR 0 5
21273: PUSH
21274: LD_VAR 0 5
21278: PPUSH
21279: LD_EXP 53
21283: PUSH
21284: LD_VAR 0 2
21288: ARRAY
21289: PUSH
21290: LD_INT 1
21292: ARRAY
21293: PUSH
21294: LD_INT 1
21296: ARRAY
21297: PPUSH
21298: LD_EXP 53
21302: PUSH
21303: LD_VAR 0 2
21307: ARRAY
21308: PUSH
21309: LD_INT 1
21311: ARRAY
21312: PUSH
21313: LD_INT 2
21315: ARRAY
21316: PPUSH
21317: LD_EXP 53
21321: PUSH
21322: LD_VAR 0 2
21326: ARRAY
21327: PUSH
21328: LD_INT 1
21330: ARRAY
21331: PUSH
21332: LD_INT 3
21334: ARRAY
21335: PPUSH
21336: LD_EXP 53
21340: PUSH
21341: LD_VAR 0 2
21345: ARRAY
21346: PUSH
21347: LD_INT 1
21349: ARRAY
21350: PUSH
21351: LD_INT 4
21353: ARRAY
21354: PPUSH
21355: CALL 51002 0 5
21359: AND
21360: OR
21361: IFFALSE 21642
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
21363: LD_ADDR_VAR 0 4
21367: PUSH
21368: LD_EXP 48
21372: PUSH
21373: LD_VAR 0 2
21377: ARRAY
21378: PPUSH
21379: LD_INT 25
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 72
21393: PUSH
21394: LD_EXP 50
21398: PUSH
21399: LD_VAR 0 2
21403: ARRAY
21404: DIFF
21405: ST_TO_ADDR
// if not tmp then
21406: LD_VAR 0 4
21410: NOT
21411: IFFALSE 21415
// continue ;
21413: GO 20834
// for j in tmp do
21415: LD_ADDR_VAR 0 3
21419: PUSH
21420: LD_VAR 0 4
21424: PUSH
21425: FOR_IN
21426: IFFALSE 21638
// begin if not mc_builders [ i ] then
21428: LD_EXP 54
21432: PUSH
21433: LD_VAR 0 2
21437: ARRAY
21438: NOT
21439: IFFALSE 21497
// begin SetTag ( j , 103 ) ;
21441: LD_VAR 0 3
21445: PPUSH
21446: LD_INT 103
21448: PPUSH
21449: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
21453: LD_ADDR_EXP 54
21457: PUSH
21458: LD_EXP 54
21462: PPUSH
21463: LD_VAR 0 2
21467: PUSH
21468: LD_EXP 54
21472: PUSH
21473: LD_VAR 0 2
21477: ARRAY
21478: PUSH
21479: LD_INT 1
21481: PLUS
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PPUSH
21487: LD_VAR 0 3
21491: PPUSH
21492: CALL 44364 0 3
21496: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
21497: LD_VAR 0 3
21501: PPUSH
21502: CALL_OW 310
21506: IFFALSE 21517
// ComExitBuilding ( j ) ;
21508: LD_VAR 0 3
21512: PPUSH
21513: CALL_OW 122
// wait ( 3 ) ;
21517: LD_INT 3
21519: PPUSH
21520: CALL_OW 67
// if not mc_build_list [ i ] then
21524: LD_EXP 53
21528: PUSH
21529: LD_VAR 0 2
21533: ARRAY
21534: NOT
21535: IFFALSE 21539
// break ;
21537: GO 21638
// if not HasTask ( j ) then
21539: LD_VAR 0 3
21543: PPUSH
21544: CALL_OW 314
21548: NOT
21549: IFFALSE 21636
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
21551: LD_VAR 0 3
21555: PPUSH
21556: LD_EXP 53
21560: PUSH
21561: LD_VAR 0 2
21565: ARRAY
21566: PUSH
21567: LD_INT 1
21569: ARRAY
21570: PUSH
21571: LD_INT 1
21573: ARRAY
21574: PPUSH
21575: LD_EXP 53
21579: PUSH
21580: LD_VAR 0 2
21584: ARRAY
21585: PUSH
21586: LD_INT 1
21588: ARRAY
21589: PUSH
21590: LD_INT 2
21592: ARRAY
21593: PPUSH
21594: LD_EXP 53
21598: PUSH
21599: LD_VAR 0 2
21603: ARRAY
21604: PUSH
21605: LD_INT 1
21607: ARRAY
21608: PUSH
21609: LD_INT 3
21611: ARRAY
21612: PPUSH
21613: LD_EXP 53
21617: PUSH
21618: LD_VAR 0 2
21622: ARRAY
21623: PUSH
21624: LD_INT 1
21626: ARRAY
21627: PUSH
21628: LD_INT 4
21630: ARRAY
21631: PPUSH
21632: CALL_OW 145
// end ;
21636: GO 21425
21638: POP
21639: POP
// end else
21640: GO 21784
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
21642: LD_EXP 48
21646: PUSH
21647: LD_VAR 0 2
21651: ARRAY
21652: PPUSH
21653: LD_EXP 53
21657: PUSH
21658: LD_VAR 0 2
21662: ARRAY
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PUSH
21668: LD_INT 1
21670: ARRAY
21671: PPUSH
21672: LD_EXP 53
21676: PUSH
21677: LD_VAR 0 2
21681: ARRAY
21682: PUSH
21683: LD_INT 1
21685: ARRAY
21686: PUSH
21687: LD_INT 2
21689: ARRAY
21690: PPUSH
21691: LD_EXP 53
21695: PUSH
21696: LD_VAR 0 2
21700: ARRAY
21701: PUSH
21702: LD_INT 1
21704: ARRAY
21705: PUSH
21706: LD_INT 3
21708: ARRAY
21709: PPUSH
21710: LD_EXP 53
21714: PUSH
21715: LD_VAR 0 2
21719: ARRAY
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PUSH
21725: LD_INT 4
21727: ARRAY
21728: PPUSH
21729: CALL 50433 0 5
21733: NOT
21734: IFFALSE 21784
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
21736: LD_ADDR_EXP 53
21740: PUSH
21741: LD_EXP 53
21745: PPUSH
21746: LD_VAR 0 2
21750: PPUSH
21751: LD_EXP 53
21755: PUSH
21756: LD_VAR 0 2
21760: ARRAY
21761: PPUSH
21762: LD_INT 1
21764: PPUSH
21765: LD_INT 1
21767: NEG
21768: PPUSH
21769: LD_INT 0
21771: PPUSH
21772: CALL 43347 0 4
21776: PPUSH
21777: CALL_OW 1
21781: ST_TO_ADDR
// continue ;
21782: GO 20834
// end ; end ; end ;
21784: GO 20834
21786: POP
21787: POP
// end ;
21788: LD_VAR 0 1
21792: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
21797: PPUSH
21798: PPUSH
21799: PPUSH
21800: PPUSH
// if not mc_bases then
21801: LD_EXP 48
21805: NOT
21806: IFFALSE 21810
// exit ;
21808: GO 22237
// for i = 1 to mc_bases do
21810: LD_ADDR_VAR 0 2
21814: PUSH
21815: DOUBLE
21816: LD_INT 1
21818: DEC
21819: ST_TO_ADDR
21820: LD_EXP 48
21824: PUSH
21825: FOR_TO
21826: IFFALSE 22235
// begin tmp := mc_build_upgrade [ i ] ;
21828: LD_ADDR_VAR 0 4
21832: PUSH
21833: LD_EXP 80
21837: PUSH
21838: LD_VAR 0 2
21842: ARRAY
21843: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
21844: LD_ADDR_VAR 0 6
21848: PUSH
21849: LD_EXP 81
21853: PUSH
21854: LD_VAR 0 2
21858: ARRAY
21859: PPUSH
21860: LD_INT 2
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 6
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 30
21875: PUSH
21876: LD_INT 7
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: LIST
21887: PPUSH
21888: CALL_OW 72
21892: ST_TO_ADDR
// if not tmp and not lab then
21893: LD_VAR 0 4
21897: NOT
21898: PUSH
21899: LD_VAR 0 6
21903: NOT
21904: AND
21905: IFFALSE 21909
// continue ;
21907: GO 21825
// if tmp then
21909: LD_VAR 0 4
21913: IFFALSE 22033
// for j in tmp do
21915: LD_ADDR_VAR 0 3
21919: PUSH
21920: LD_VAR 0 4
21924: PUSH
21925: FOR_IN
21926: IFFALSE 22031
// begin if UpgradeCost ( j ) then
21928: LD_VAR 0 3
21932: PPUSH
21933: CALL 50093 0 1
21937: IFFALSE 22029
// begin ComUpgrade ( j ) ;
21939: LD_VAR 0 3
21943: PPUSH
21944: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
21948: LD_ADDR_EXP 80
21952: PUSH
21953: LD_EXP 80
21957: PPUSH
21958: LD_VAR 0 2
21962: PPUSH
21963: LD_EXP 80
21967: PUSH
21968: LD_VAR 0 2
21972: ARRAY
21973: PUSH
21974: LD_VAR 0 3
21978: DIFF
21979: PPUSH
21980: CALL_OW 1
21984: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
21985: LD_ADDR_EXP 55
21989: PUSH
21990: LD_EXP 55
21994: PPUSH
21995: LD_VAR 0 2
21999: PUSH
22000: LD_EXP 55
22004: PUSH
22005: LD_VAR 0 2
22009: ARRAY
22010: PUSH
22011: LD_INT 1
22013: PLUS
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PPUSH
22019: LD_VAR 0 3
22023: PPUSH
22024: CALL 44364 0 3
22028: ST_TO_ADDR
// end ; end ;
22029: GO 21925
22031: POP
22032: POP
// if not lab or not mc_lab_upgrade [ i ] then
22033: LD_VAR 0 6
22037: NOT
22038: PUSH
22039: LD_EXP 82
22043: PUSH
22044: LD_VAR 0 2
22048: ARRAY
22049: NOT
22050: OR
22051: IFFALSE 22055
// continue ;
22053: GO 21825
// for j in lab do
22055: LD_ADDR_VAR 0 3
22059: PUSH
22060: LD_VAR 0 6
22064: PUSH
22065: FOR_IN
22066: IFFALSE 22231
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
22068: LD_VAR 0 3
22072: PPUSH
22073: CALL_OW 266
22077: PUSH
22078: LD_INT 6
22080: PUSH
22081: LD_INT 7
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: IN
22088: PUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 461
22098: PUSH
22099: LD_INT 1
22101: NONEQUAL
22102: AND
22103: IFFALSE 22229
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
22105: LD_VAR 0 3
22109: PPUSH
22110: LD_EXP 82
22114: PUSH
22115: LD_VAR 0 2
22119: ARRAY
22120: PUSH
22121: LD_INT 1
22123: ARRAY
22124: PPUSH
22125: CALL 50298 0 2
22129: IFFALSE 22229
// begin ComCancel ( j ) ;
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
22140: LD_VAR 0 3
22144: PPUSH
22145: LD_EXP 82
22149: PUSH
22150: LD_VAR 0 2
22154: ARRAY
22155: PUSH
22156: LD_INT 1
22158: ARRAY
22159: PPUSH
22160: CALL_OW 207
// if not j in mc_construct_list [ i ] then
22164: LD_VAR 0 3
22168: PUSH
22169: LD_EXP 55
22173: PUSH
22174: LD_VAR 0 2
22178: ARRAY
22179: IN
22180: NOT
22181: IFFALSE 22227
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
22183: LD_ADDR_EXP 55
22187: PUSH
22188: LD_EXP 55
22192: PPUSH
22193: LD_VAR 0 2
22197: PUSH
22198: LD_EXP 55
22202: PUSH
22203: LD_VAR 0 2
22207: ARRAY
22208: PUSH
22209: LD_INT 1
22211: PLUS
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PPUSH
22217: LD_VAR 0 3
22221: PPUSH
22222: CALL 44364 0 3
22226: ST_TO_ADDR
// break ;
22227: GO 22231
// end ; end ; end ;
22229: GO 22065
22231: POP
22232: POP
// end ;
22233: GO 21825
22235: POP
22236: POP
// end ;
22237: LD_VAR 0 1
22241: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
22242: LD_INT 0
22244: PPUSH
22245: PPUSH
22246: PPUSH
22247: PPUSH
22248: PPUSH
22249: PPUSH
22250: PPUSH
// if not mc_bases then
22251: LD_EXP 48
22255: NOT
22256: IFFALSE 22260
// exit ;
22258: GO 22589
// for i = 1 to mc_bases do
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: DOUBLE
22266: LD_INT 1
22268: DEC
22269: ST_TO_ADDR
22270: LD_EXP 48
22274: PUSH
22275: FOR_TO
22276: IFFALSE 22587
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
22278: LD_EXP 56
22282: PUSH
22283: LD_VAR 0 2
22287: ARRAY
22288: NOT
22289: PUSH
22290: LD_EXP 48
22294: PUSH
22295: LD_VAR 0 2
22299: ARRAY
22300: PPUSH
22301: LD_INT 30
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PPUSH
22311: CALL_OW 72
22315: NOT
22316: OR
22317: IFFALSE 22321
// continue ;
22319: GO 22275
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
22321: LD_EXP 56
22325: PUSH
22326: LD_VAR 0 2
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: PPUSH
22336: CALL_OW 269
22340: IFFALSE 22406
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
22342: LD_ADDR_VAR 0 4
22346: PUSH
22347: LD_EXP 56
22351: PUSH
22352: LD_VAR 0 2
22356: ARRAY
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: CALL_OW 3
22365: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
22366: LD_ADDR_EXP 56
22370: PUSH
22371: LD_EXP 56
22375: PPUSH
22376: LD_VAR 0 2
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: CALL_OW 1
22390: ST_TO_ADDR
// if not mc_turret_list [ i ] then
22391: LD_EXP 56
22395: PUSH
22396: LD_VAR 0 2
22400: ARRAY
22401: NOT
22402: IFFALSE 22406
// continue ;
22404: GO 22275
// end ; busy := false ;
22406: LD_ADDR_VAR 0 6
22410: PUSH
22411: LD_INT 0
22413: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
22414: LD_ADDR_VAR 0 4
22418: PUSH
22419: LD_EXP 48
22423: PUSH
22424: LD_VAR 0 2
22428: ARRAY
22429: PPUSH
22430: LD_INT 30
22432: PUSH
22433: LD_INT 3
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PPUSH
22440: CALL_OW 72
22444: ST_TO_ADDR
// for j in tmp do
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_VAR 0 4
22454: PUSH
22455: FOR_IN
22456: IFFALSE 22484
// if not BuildingStatus ( j ) = bs_idle then
22458: LD_VAR 0 3
22462: PPUSH
22463: CALL_OW 461
22467: PUSH
22468: LD_INT 2
22470: EQUAL
22471: NOT
22472: IFFALSE 22482
// busy := true ;
22474: LD_ADDR_VAR 0 6
22478: PUSH
22479: LD_INT 1
22481: ST_TO_ADDR
22482: GO 22455
22484: POP
22485: POP
// if busy then
22486: LD_VAR 0 6
22490: IFFALSE 22494
// continue ;
22492: GO 22275
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
22494: LD_ADDR_VAR 0 7
22498: PUSH
22499: LD_EXP 56
22503: PUSH
22504: LD_VAR 0 2
22508: ARRAY
22509: PUSH
22510: LD_INT 1
22512: ARRAY
22513: PPUSH
22514: CALL 48657 0 1
22518: ST_TO_ADDR
// if not weapon then
22519: LD_VAR 0 7
22523: NOT
22524: IFFALSE 22528
// continue ;
22526: GO 22275
// if mc_allowed_tower_weapons [ i ] then
22528: LD_EXP 86
22532: PUSH
22533: LD_VAR 0 2
22537: ARRAY
22538: IFFALSE 22561
// if not weapon in mc_allowed_tower_weapons [ i ] then
22540: LD_VAR 0 7
22544: PUSH
22545: LD_EXP 86
22549: PUSH
22550: LD_VAR 0 2
22554: ARRAY
22555: IN
22556: NOT
22557: IFFALSE 22561
// continue ;
22559: GO 22275
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
22561: LD_EXP 56
22565: PUSH
22566: LD_VAR 0 2
22570: ARRAY
22571: PUSH
22572: LD_INT 1
22574: ARRAY
22575: PPUSH
22576: LD_VAR 0 7
22580: PPUSH
22581: CALL_OW 148
// end ;
22585: GO 22275
22587: POP
22588: POP
// end ;
22589: LD_VAR 0 1
22593: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
22594: LD_INT 0
22596: PPUSH
22597: PPUSH
22598: PPUSH
22599: PPUSH
22600: PPUSH
22601: PPUSH
// if not mc_bases then
22602: LD_EXP 48
22606: NOT
22607: IFFALSE 22611
// exit ;
22609: GO 23596
// for i = 1 to mc_bases do
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: DOUBLE
22617: LD_INT 1
22619: DEC
22620: ST_TO_ADDR
22621: LD_EXP 48
22625: PUSH
22626: FOR_TO
22627: IFFALSE 23594
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
22629: LD_EXP 61
22633: PUSH
22634: LD_VAR 0 2
22638: ARRAY
22639: NOT
22640: PUSH
22641: LD_EXP 61
22645: PUSH
22646: LD_VAR 0 2
22650: ARRAY
22651: PUSH
22652: LD_EXP 62
22656: PUSH
22657: LD_VAR 0 2
22661: ARRAY
22662: EQUAL
22663: OR
22664: IFFALSE 22668
// continue ;
22666: GO 22626
// if mc_miners [ i ] then
22668: LD_EXP 62
22672: PUSH
22673: LD_VAR 0 2
22677: ARRAY
22678: IFFALSE 23281
// begin k := 1 ;
22680: LD_ADDR_VAR 0 4
22684: PUSH
22685: LD_INT 1
22687: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
22688: LD_ADDR_VAR 0 3
22692: PUSH
22693: DOUBLE
22694: LD_EXP 62
22698: PUSH
22699: LD_VAR 0 2
22703: ARRAY
22704: INC
22705: ST_TO_ADDR
22706: LD_INT 1
22708: PUSH
22709: FOR_DOWNTO
22710: IFFALSE 23279
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
22712: LD_EXP 62
22716: PUSH
22717: LD_VAR 0 2
22721: ARRAY
22722: PUSH
22723: LD_VAR 0 3
22727: ARRAY
22728: PPUSH
22729: CALL_OW 301
22733: IFFALSE 22796
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
22735: LD_ADDR_VAR 0 5
22739: PUSH
22740: LD_EXP 62
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_EXP 62
22755: PUSH
22756: LD_VAR 0 2
22760: ARRAY
22761: PUSH
22762: LD_VAR 0 3
22766: ARRAY
22767: DIFF
22768: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
22769: LD_ADDR_EXP 62
22773: PUSH
22774: LD_EXP 62
22778: PPUSH
22779: LD_VAR 0 2
22783: PPUSH
22784: LD_VAR 0 5
22788: PPUSH
22789: CALL_OW 1
22793: ST_TO_ADDR
// continue ;
22794: GO 22709
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
22796: LD_EXP 62
22800: PUSH
22801: LD_VAR 0 2
22805: ARRAY
22806: PUSH
22807: LD_VAR 0 3
22811: ARRAY
22812: PPUSH
22813: CALL 43865 0 1
22817: PUSH
22818: LD_EXP 62
22822: PUSH
22823: LD_VAR 0 2
22827: ARRAY
22828: PUSH
22829: LD_VAR 0 3
22833: ARRAY
22834: PPUSH
22835: CALL_OW 255
22839: PPUSH
22840: LD_EXP 61
22844: PUSH
22845: LD_VAR 0 2
22849: ARRAY
22850: PUSH
22851: LD_VAR 0 4
22855: ARRAY
22856: PUSH
22857: LD_INT 1
22859: ARRAY
22860: PPUSH
22861: LD_EXP 61
22865: PUSH
22866: LD_VAR 0 2
22870: ARRAY
22871: PUSH
22872: LD_VAR 0 4
22876: ARRAY
22877: PUSH
22878: LD_INT 2
22880: ARRAY
22881: PPUSH
22882: LD_INT 15
22884: PPUSH
22885: CALL 44858 0 4
22889: PUSH
22890: LD_INT 4
22892: ARRAY
22893: PUSH
22894: LD_EXP 62
22898: PUSH
22899: LD_VAR 0 2
22903: ARRAY
22904: PUSH
22905: LD_VAR 0 3
22909: ARRAY
22910: PPUSH
22911: LD_INT 10
22913: PPUSH
22914: CALL 46555 0 2
22918: PUSH
22919: LD_INT 4
22921: ARRAY
22922: OR
22923: AND
22924: IFFALSE 22947
// ComStop ( mc_miners [ i ] [ j ] ) ;
22926: LD_EXP 62
22930: PUSH
22931: LD_VAR 0 2
22935: ARRAY
22936: PUSH
22937: LD_VAR 0 3
22941: ARRAY
22942: PPUSH
22943: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
22947: LD_EXP 62
22951: PUSH
22952: LD_VAR 0 2
22956: ARRAY
22957: PUSH
22958: LD_VAR 0 3
22962: ARRAY
22963: PPUSH
22964: CALL_OW 257
22968: PUSH
22969: LD_INT 1
22971: EQUAL
22972: PUSH
22973: LD_EXP 62
22977: PUSH
22978: LD_VAR 0 2
22982: ARRAY
22983: PUSH
22984: LD_VAR 0 3
22988: ARRAY
22989: PPUSH
22990: CALL_OW 459
22994: NOT
22995: AND
22996: PUSH
22997: LD_EXP 62
23001: PUSH
23002: LD_VAR 0 2
23006: ARRAY
23007: PUSH
23008: LD_VAR 0 3
23012: ARRAY
23013: PPUSH
23014: CALL_OW 255
23018: PPUSH
23019: LD_EXP 61
23023: PUSH
23024: LD_VAR 0 2
23028: ARRAY
23029: PUSH
23030: LD_VAR 0 4
23034: ARRAY
23035: PUSH
23036: LD_INT 1
23038: ARRAY
23039: PPUSH
23040: LD_EXP 61
23044: PUSH
23045: LD_VAR 0 2
23049: ARRAY
23050: PUSH
23051: LD_VAR 0 4
23055: ARRAY
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: LD_INT 15
23063: PPUSH
23064: CALL 44858 0 4
23068: PUSH
23069: LD_INT 4
23071: ARRAY
23072: PUSH
23073: LD_INT 0
23075: EQUAL
23076: AND
23077: PUSH
23078: LD_EXP 62
23082: PUSH
23083: LD_VAR 0 2
23087: ARRAY
23088: PUSH
23089: LD_VAR 0 3
23093: ARRAY
23094: PPUSH
23095: CALL_OW 314
23099: NOT
23100: AND
23101: IFFALSE 23277
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
23103: LD_EXP 62
23107: PUSH
23108: LD_VAR 0 2
23112: ARRAY
23113: PUSH
23114: LD_VAR 0 3
23118: ARRAY
23119: PPUSH
23120: CALL_OW 310
23124: IFFALSE 23147
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
23126: LD_EXP 62
23130: PUSH
23131: LD_VAR 0 2
23135: ARRAY
23136: PUSH
23137: LD_VAR 0 3
23141: ARRAY
23142: PPUSH
23143: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
23147: LD_EXP 62
23151: PUSH
23152: LD_VAR 0 2
23156: ARRAY
23157: PUSH
23158: LD_VAR 0 3
23162: ARRAY
23163: PPUSH
23164: CALL_OW 314
23168: NOT
23169: IFFALSE 23237
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
23171: LD_EXP 62
23175: PUSH
23176: LD_VAR 0 2
23180: ARRAY
23181: PUSH
23182: LD_VAR 0 3
23186: ARRAY
23187: PPUSH
23188: LD_EXP 61
23192: PUSH
23193: LD_VAR 0 2
23197: ARRAY
23198: PUSH
23199: LD_VAR 0 4
23203: ARRAY
23204: PUSH
23205: LD_INT 1
23207: ARRAY
23208: PPUSH
23209: LD_EXP 61
23213: PUSH
23214: LD_VAR 0 2
23218: ARRAY
23219: PUSH
23220: LD_VAR 0 4
23224: ARRAY
23225: PUSH
23226: LD_INT 2
23228: ARRAY
23229: PPUSH
23230: LD_INT 0
23232: PPUSH
23233: CALL_OW 193
// k := k + 1 ;
23237: LD_ADDR_VAR 0 4
23241: PUSH
23242: LD_VAR 0 4
23246: PUSH
23247: LD_INT 1
23249: PLUS
23250: ST_TO_ADDR
// if k > mc_mines [ i ] then
23251: LD_VAR 0 4
23255: PUSH
23256: LD_EXP 61
23260: PUSH
23261: LD_VAR 0 2
23265: ARRAY
23266: GREATER
23267: IFFALSE 23277
// k := 1 ;
23269: LD_ADDR_VAR 0 4
23273: PUSH
23274: LD_INT 1
23276: ST_TO_ADDR
// end ; end ;
23277: GO 22709
23279: POP
23280: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
23281: LD_ADDR_VAR 0 5
23285: PUSH
23286: LD_EXP 48
23290: PUSH
23291: LD_VAR 0 2
23295: ARRAY
23296: PPUSH
23297: LD_INT 2
23299: PUSH
23300: LD_INT 30
23302: PUSH
23303: LD_INT 4
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 30
23312: PUSH
23313: LD_INT 5
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 30
23322: PUSH
23323: LD_INT 32
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 72
23340: ST_TO_ADDR
// if not tmp then
23341: LD_VAR 0 5
23345: NOT
23346: IFFALSE 23350
// continue ;
23348: GO 22626
// list := [ ] ;
23350: LD_ADDR_VAR 0 6
23354: PUSH
23355: EMPTY
23356: ST_TO_ADDR
// for j in tmp do
23357: LD_ADDR_VAR 0 3
23361: PUSH
23362: LD_VAR 0 5
23366: PUSH
23367: FOR_IN
23368: IFFALSE 23437
// begin for k in UnitsInside ( j ) do
23370: LD_ADDR_VAR 0 4
23374: PUSH
23375: LD_VAR 0 3
23379: PPUSH
23380: CALL_OW 313
23384: PUSH
23385: FOR_IN
23386: IFFALSE 23433
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
23388: LD_VAR 0 4
23392: PPUSH
23393: CALL_OW 257
23397: PUSH
23398: LD_INT 1
23400: EQUAL
23401: PUSH
23402: LD_VAR 0 4
23406: PPUSH
23407: CALL_OW 459
23411: NOT
23412: AND
23413: IFFALSE 23431
// list := list ^ k ;
23415: LD_ADDR_VAR 0 6
23419: PUSH
23420: LD_VAR 0 6
23424: PUSH
23425: LD_VAR 0 4
23429: ADD
23430: ST_TO_ADDR
23431: GO 23385
23433: POP
23434: POP
// end ;
23435: GO 23367
23437: POP
23438: POP
// list := list diff mc_miners [ i ] ;
23439: LD_ADDR_VAR 0 6
23443: PUSH
23444: LD_VAR 0 6
23448: PUSH
23449: LD_EXP 62
23453: PUSH
23454: LD_VAR 0 2
23458: ARRAY
23459: DIFF
23460: ST_TO_ADDR
// if not list then
23461: LD_VAR 0 6
23465: NOT
23466: IFFALSE 23470
// continue ;
23468: GO 22626
// k := mc_mines [ i ] - mc_miners [ i ] ;
23470: LD_ADDR_VAR 0 4
23474: PUSH
23475: LD_EXP 61
23479: PUSH
23480: LD_VAR 0 2
23484: ARRAY
23485: PUSH
23486: LD_EXP 62
23490: PUSH
23491: LD_VAR 0 2
23495: ARRAY
23496: MINUS
23497: ST_TO_ADDR
// if k > list then
23498: LD_VAR 0 4
23502: PUSH
23503: LD_VAR 0 6
23507: GREATER
23508: IFFALSE 23520
// k := list ;
23510: LD_ADDR_VAR 0 4
23514: PUSH
23515: LD_VAR 0 6
23519: ST_TO_ADDR
// for j = 1 to k do
23520: LD_ADDR_VAR 0 3
23524: PUSH
23525: DOUBLE
23526: LD_INT 1
23528: DEC
23529: ST_TO_ADDR
23530: LD_VAR 0 4
23534: PUSH
23535: FOR_TO
23536: IFFALSE 23590
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
23538: LD_ADDR_EXP 62
23542: PUSH
23543: LD_EXP 62
23547: PPUSH
23548: LD_VAR 0 2
23552: PUSH
23553: LD_EXP 62
23557: PUSH
23558: LD_VAR 0 2
23562: ARRAY
23563: PUSH
23564: LD_INT 1
23566: PLUS
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PPUSH
23572: LD_VAR 0 6
23576: PUSH
23577: LD_VAR 0 3
23581: ARRAY
23582: PPUSH
23583: CALL 44364 0 3
23587: ST_TO_ADDR
23588: GO 23535
23590: POP
23591: POP
// end ;
23592: GO 22626
23594: POP
23595: POP
// end ;
23596: LD_VAR 0 1
23600: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target , cargo , depot , fac , components ; begin
23601: LD_INT 0
23603: PPUSH
23604: PPUSH
23605: PPUSH
23606: PPUSH
23607: PPUSH
23608: PPUSH
23609: PPUSH
23610: PPUSH
23611: PPUSH
// if not mc_bases then
23612: LD_EXP 48
23616: NOT
23617: IFFALSE 23621
// exit ;
23619: GO 25100
// for i = 1 to mc_bases do
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: DOUBLE
23627: LD_INT 1
23629: DEC
23630: ST_TO_ADDR
23631: LD_EXP 48
23635: PUSH
23636: FOR_TO
23637: IFFALSE 25098
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
23639: LD_EXP 48
23643: PUSH
23644: LD_VAR 0 2
23648: ARRAY
23649: NOT
23650: PUSH
23651: LD_EXP 55
23655: PUSH
23656: LD_VAR 0 2
23660: ARRAY
23661: OR
23662: IFFALSE 23666
// continue ;
23664: GO 23636
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
23666: LD_EXP 64
23670: PUSH
23671: LD_VAR 0 2
23675: ARRAY
23676: NOT
23677: PUSH
23678: LD_EXP 65
23682: PUSH
23683: LD_VAR 0 2
23687: ARRAY
23688: AND
23689: IFFALSE 23727
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
23691: LD_ADDR_EXP 65
23695: PUSH
23696: LD_EXP 65
23700: PPUSH
23701: LD_VAR 0 2
23705: PPUSH
23706: EMPTY
23707: PPUSH
23708: CALL_OW 1
23712: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
23713: LD_VAR 0 2
23717: PPUSH
23718: LD_INT 107
23720: PPUSH
23721: CALL 19197 0 2
// continue ;
23725: GO 23636
// end ; target := [ ] ;
23727: LD_ADDR_VAR 0 5
23731: PUSH
23732: EMPTY
23733: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
23734: LD_ADDR_VAR 0 3
23738: PUSH
23739: DOUBLE
23740: LD_EXP 64
23744: PUSH
23745: LD_VAR 0 2
23749: ARRAY
23750: INC
23751: ST_TO_ADDR
23752: LD_INT 1
23754: PUSH
23755: FOR_DOWNTO
23756: IFFALSE 24016
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
23758: LD_EXP 64
23762: PUSH
23763: LD_VAR 0 2
23767: ARRAY
23768: PUSH
23769: LD_VAR 0 3
23773: ARRAY
23774: PUSH
23775: LD_INT 2
23777: ARRAY
23778: PPUSH
23779: LD_EXP 64
23783: PUSH
23784: LD_VAR 0 2
23788: ARRAY
23789: PUSH
23790: LD_VAR 0 3
23794: ARRAY
23795: PUSH
23796: LD_INT 3
23798: ARRAY
23799: PPUSH
23800: CALL_OW 488
23804: PUSH
23805: LD_EXP 64
23809: PUSH
23810: LD_VAR 0 2
23814: ARRAY
23815: PUSH
23816: LD_VAR 0 3
23820: ARRAY
23821: PUSH
23822: LD_INT 2
23824: ARRAY
23825: PPUSH
23826: LD_EXP 64
23830: PUSH
23831: LD_VAR 0 2
23835: ARRAY
23836: PUSH
23837: LD_VAR 0 3
23841: ARRAY
23842: PUSH
23843: LD_INT 3
23845: ARRAY
23846: PPUSH
23847: CALL_OW 284
23851: PUSH
23852: LD_INT 0
23854: EQUAL
23855: AND
23856: IFFALSE 23911
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
23858: LD_ADDR_VAR 0 4
23862: PUSH
23863: LD_EXP 64
23867: PUSH
23868: LD_VAR 0 2
23872: ARRAY
23873: PPUSH
23874: LD_VAR 0 3
23878: PPUSH
23879: CALL_OW 3
23883: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
23884: LD_ADDR_EXP 64
23888: PUSH
23889: LD_EXP 64
23893: PPUSH
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_VAR 0 4
23903: PPUSH
23904: CALL_OW 1
23908: ST_TO_ADDR
// continue ;
23909: GO 23755
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
23911: LD_EXP 48
23915: PUSH
23916: LD_VAR 0 2
23920: ARRAY
23921: PUSH
23922: LD_INT 1
23924: ARRAY
23925: PPUSH
23926: CALL_OW 255
23930: PPUSH
23931: LD_EXP 64
23935: PUSH
23936: LD_VAR 0 2
23940: ARRAY
23941: PUSH
23942: LD_VAR 0 3
23946: ARRAY
23947: PUSH
23948: LD_INT 2
23950: ARRAY
23951: PPUSH
23952: LD_EXP 64
23956: PUSH
23957: LD_VAR 0 2
23961: ARRAY
23962: PUSH
23963: LD_VAR 0 3
23967: ARRAY
23968: PUSH
23969: LD_INT 3
23971: ARRAY
23972: PPUSH
23973: LD_INT 20
23975: PPUSH
23976: CALL 44858 0 4
23980: PUSH
23981: LD_INT 4
23983: ARRAY
23984: PUSH
23985: LD_INT 0
23987: EQUAL
23988: IFFALSE 24014
// begin target := mc_crates [ i ] [ j ] ;
23990: LD_ADDR_VAR 0 5
23994: PUSH
23995: LD_EXP 64
23999: PUSH
24000: LD_VAR 0 2
24004: ARRAY
24005: PUSH
24006: LD_VAR 0 3
24010: ARRAY
24011: ST_TO_ADDR
// break ;
24012: GO 24016
// end ; end ;
24014: GO 23755
24016: POP
24017: POP
// if not target then
24018: LD_VAR 0 5
24022: NOT
24023: IFFALSE 24027
// continue ;
24025: GO 23636
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
24027: LD_ADDR_VAR 0 6
24031: PUSH
24032: LD_EXP 67
24036: PUSH
24037: LD_VAR 0 2
24041: ARRAY
24042: PPUSH
24043: LD_INT 2
24045: PUSH
24046: LD_INT 3
24048: PUSH
24049: LD_INT 58
24051: PUSH
24052: EMPTY
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 61
24061: PUSH
24062: EMPTY
24063: LIST
24064: PUSH
24065: LD_INT 33
24067: PUSH
24068: LD_INT 5
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 33
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: PUSH
24095: LD_INT 34
24097: PUSH
24098: LD_INT 32
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 34
24107: PUSH
24108: LD_INT 51
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 34
24117: PUSH
24118: LD_INT 12
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PPUSH
24135: CALL_OW 72
24139: ST_TO_ADDR
// if not cargo then
24140: LD_VAR 0 6
24144: NOT
24145: IFFALSE 24633
// begin if mc_crates_collector [ i ] < 5 then
24147: LD_EXP 65
24151: PUSH
24152: LD_VAR 0 2
24156: ARRAY
24157: PUSH
24158: LD_INT 5
24160: LESS
24161: IFFALSE 24447
// begin if mc_ape [ i ] then
24163: LD_EXP 77
24167: PUSH
24168: LD_VAR 0 2
24172: ARRAY
24173: IFFALSE 24220
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
24175: LD_ADDR_VAR 0 4
24179: PUSH
24180: LD_EXP 77
24184: PUSH
24185: LD_VAR 0 2
24189: ARRAY
24190: PPUSH
24191: LD_INT 25
24193: PUSH
24194: LD_INT 16
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 24
24203: PUSH
24204: LD_INT 750
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: PPUSH
24215: CALL_OW 72
24219: ST_TO_ADDR
// if not tmp then
24220: LD_VAR 0 4
24224: NOT
24225: IFFALSE 24274
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) else
24227: LD_ADDR_VAR 0 4
24231: PUSH
24232: LD_EXP 48
24236: PUSH
24237: LD_VAR 0 2
24241: ARRAY
24242: PPUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 2
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 24
24255: PUSH
24256: LD_INT 750
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PPUSH
24267: CALL_OW 72
24271: ST_TO_ADDR
24272: GO 24335
// if tmp < 5 then
24274: LD_VAR 0 4
24278: PUSH
24279: LD_INT 5
24281: LESS
24282: IFFALSE 24335
// tmp := tmp union UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
24284: LD_ADDR_VAR 0 4
24288: PUSH
24289: LD_VAR 0 4
24293: PUSH
24294: LD_EXP 48
24298: PUSH
24299: LD_VAR 0 2
24303: ARRAY
24304: PPUSH
24305: LD_INT 25
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 24
24317: PUSH
24318: LD_INT 750
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PPUSH
24329: CALL_OW 72
24333: UNION
24334: ST_TO_ADDR
// if not tmp then
24335: LD_VAR 0 4
24339: NOT
24340: IFFALSE 24344
// continue ;
24342: GO 23636
// for j in tmp do
24344: LD_ADDR_VAR 0 3
24348: PUSH
24349: LD_VAR 0 4
24353: PUSH
24354: FOR_IN
24355: IFFALSE 24445
// if not GetTag ( j ) then
24357: LD_VAR 0 3
24361: PPUSH
24362: CALL_OW 110
24366: NOT
24367: IFFALSE 24443
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
24369: LD_ADDR_EXP 65
24373: PUSH
24374: LD_EXP 65
24378: PPUSH
24379: LD_VAR 0 2
24383: PUSH
24384: LD_EXP 65
24388: PUSH
24389: LD_VAR 0 2
24393: ARRAY
24394: PUSH
24395: LD_INT 1
24397: PLUS
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PPUSH
24403: LD_VAR 0 3
24407: PPUSH
24408: CALL 44364 0 3
24412: ST_TO_ADDR
// SetTag ( j , 107 ) ;
24413: LD_VAR 0 3
24417: PPUSH
24418: LD_INT 107
24420: PPUSH
24421: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
24425: LD_EXP 65
24429: PUSH
24430: LD_VAR 0 2
24434: ARRAY
24435: PUSH
24436: LD_INT 5
24438: GREATEREQUAL
24439: IFFALSE 24443
// break ;
24441: GO 24445
// end ;
24443: GO 24354
24445: POP
24446: POP
// end ; if mc_crates_collector [ i ] and target then
24447: LD_EXP 65
24451: PUSH
24452: LD_VAR 0 2
24456: ARRAY
24457: PUSH
24458: LD_VAR 0 5
24462: AND
24463: IFFALSE 24631
// begin if mc_crates_collector [ i ] < target [ 1 ] then
24465: LD_EXP 65
24469: PUSH
24470: LD_VAR 0 2
24474: ARRAY
24475: PUSH
24476: LD_VAR 0 5
24480: PUSH
24481: LD_INT 1
24483: ARRAY
24484: LESS
24485: IFFALSE 24505
// tmp := mc_crates_collector [ i ] else
24487: LD_ADDR_VAR 0 4
24491: PUSH
24492: LD_EXP 65
24496: PUSH
24497: LD_VAR 0 2
24501: ARRAY
24502: ST_TO_ADDR
24503: GO 24519
// tmp := target [ 1 ] ;
24505: LD_ADDR_VAR 0 4
24509: PUSH
24510: LD_VAR 0 5
24514: PUSH
24515: LD_INT 1
24517: ARRAY
24518: ST_TO_ADDR
// for j = 1 to tmp do
24519: LD_ADDR_VAR 0 3
24523: PUSH
24524: DOUBLE
24525: LD_INT 1
24527: DEC
24528: ST_TO_ADDR
24529: LD_VAR 0 4
24533: PUSH
24534: FOR_TO
24535: IFFALSE 24629
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
24537: LD_EXP 65
24541: PUSH
24542: LD_VAR 0 2
24546: ARRAY
24547: PUSH
24548: LD_VAR 0 3
24552: ARRAY
24553: PPUSH
24554: CALL_OW 310
24558: IFFALSE 24581
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
24560: LD_EXP 65
24564: PUSH
24565: LD_VAR 0 2
24569: ARRAY
24570: PUSH
24571: LD_VAR 0 3
24575: ARRAY
24576: PPUSH
24577: CALL_OW 122
// wait ( 3 ) ;
24581: LD_INT 3
24583: PPUSH
24584: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
24588: LD_EXP 65
24592: PUSH
24593: LD_VAR 0 2
24597: ARRAY
24598: PUSH
24599: LD_VAR 0 3
24603: ARRAY
24604: PPUSH
24605: LD_VAR 0 5
24609: PUSH
24610: LD_INT 2
24612: ARRAY
24613: PPUSH
24614: LD_VAR 0 5
24618: PUSH
24619: LD_INT 3
24621: ARRAY
24622: PPUSH
24623: CALL_OW 117
// end ;
24627: GO 24534
24629: POP
24630: POP
// end ; end else
24631: GO 25096
// begin for j in cargo do
24633: LD_ADDR_VAR 0 3
24637: PUSH
24638: LD_VAR 0 6
24642: PUSH
24643: FOR_IN
24644: IFFALSE 25094
// begin if GetTag ( j ) <> 0 then
24646: LD_VAR 0 3
24650: PPUSH
24651: CALL_OW 110
24655: PUSH
24656: LD_INT 0
24658: NONEQUAL
24659: IFFALSE 24663
// continue ;
24661: GO 24643
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
24663: LD_VAR 0 3
24667: PPUSH
24668: CALL_OW 262
24672: PUSH
24673: LD_INT 2
24675: EQUAL
24676: PUSH
24677: LD_VAR 0 3
24681: PPUSH
24682: CALL_OW 261
24686: PUSH
24687: LD_INT 15
24689: LESS
24690: AND
24691: IFFALSE 24695
// continue ;
24693: GO 24643
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
24695: LD_VAR 0 3
24699: PPUSH
24700: CALL_OW 262
24704: PUSH
24705: LD_INT 1
24707: EQUAL
24708: PUSH
24709: LD_VAR 0 3
24713: PPUSH
24714: CALL_OW 261
24718: PUSH
24719: LD_INT 10
24721: LESS
24722: AND
24723: IFFALSE 25033
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
24725: LD_ADDR_VAR 0 7
24729: PUSH
24730: LD_EXP 48
24734: PUSH
24735: LD_VAR 0 2
24739: ARRAY
24740: PPUSH
24741: LD_INT 2
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: PPUSH
24769: CALL_OW 72
24773: ST_TO_ADDR
// if not depot then
24774: LD_VAR 0 7
24778: NOT
24779: IFFALSE 24783
// continue ;
24781: GO 24643
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_VAR 0 7
24792: PPUSH
24793: LD_VAR 0 3
24797: PPUSH
24798: CALL_OW 74
24802: PPUSH
24803: CALL_OW 296
24807: PUSH
24808: LD_INT 6
24810: LESS
24811: IFFALSE 24827
// SetFuel ( j , 100 ) else
24813: LD_VAR 0 3
24817: PPUSH
24818: LD_INT 100
24820: PPUSH
24821: CALL_OW 240
24825: GO 25033
// if GetFuel ( j ) = 0 then
24827: LD_VAR 0 3
24831: PPUSH
24832: CALL_OW 261
24836: PUSH
24837: LD_INT 0
24839: EQUAL
24840: IFFALSE 25033
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
24842: LD_ADDR_EXP 67
24846: PUSH
24847: LD_EXP 67
24851: PPUSH
24852: LD_VAR 0 2
24856: PPUSH
24857: LD_EXP 67
24861: PUSH
24862: LD_VAR 0 2
24866: ARRAY
24867: PUSH
24868: LD_VAR 0 3
24872: DIFF
24873: PPUSH
24874: CALL_OW 1
24878: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
24879: LD_VAR 0 3
24883: PPUSH
24884: CALL_OW 263
24888: PUSH
24889: LD_INT 1
24891: EQUAL
24892: IFFALSE 24908
// ComExitVehicle ( IsInUnit ( j ) ) ;
24894: LD_VAR 0 3
24898: PPUSH
24899: CALL_OW 310
24903: PPUSH
24904: CALL_OW 121
// if GetControl ( j ) = control_remote then
24908: LD_VAR 0 3
24912: PPUSH
24913: CALL_OW 263
24917: PUSH
24918: LD_INT 2
24920: EQUAL
24921: IFFALSE 24932
// ComUnlink ( j ) ;
24923: LD_VAR 0 3
24927: PPUSH
24928: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
24932: LD_ADDR_VAR 0 8
24936: PUSH
24937: LD_VAR 0 2
24941: PPUSH
24942: LD_INT 3
24944: PPUSH
24945: CALL 32729 0 2
24949: ST_TO_ADDR
// if fac then
24950: LD_VAR 0 8
24954: IFFALSE 25031
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
24956: LD_ADDR_VAR 0 9
24960: PUSH
24961: LD_VAR 0 8
24965: PPUSH
24966: LD_VAR 0 3
24970: PPUSH
24971: CALL_OW 265
24975: PPUSH
24976: LD_VAR 0 3
24980: PPUSH
24981: CALL_OW 262
24985: PPUSH
24986: LD_VAR 0 3
24990: PPUSH
24991: CALL_OW 263
24995: PPUSH
24996: LD_VAR 0 3
25000: PPUSH
25001: CALL_OW 264
25005: PPUSH
25006: CALL 41529 0 5
25010: ST_TO_ADDR
// if components then
25011: LD_VAR 0 9
25015: IFFALSE 25031
// MC_InsertProduceList ( i , components ) ;
25017: LD_VAR 0 2
25021: PPUSH
25022: LD_VAR 0 9
25026: PPUSH
25027: CALL 32296 0 2
// end ; continue ;
25031: GO 24643
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
25033: LD_VAR 0 3
25037: PPUSH
25038: LD_INT 1
25040: PPUSH
25041: CALL_OW 289
25045: PUSH
25046: LD_INT 100
25048: LESS
25049: PUSH
25050: LD_VAR 0 3
25054: PPUSH
25055: CALL_OW 314
25059: NOT
25060: AND
25061: IFFALSE 25090
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
25063: LD_VAR 0 3
25067: PPUSH
25068: LD_VAR 0 5
25072: PUSH
25073: LD_INT 2
25075: ARRAY
25076: PPUSH
25077: LD_VAR 0 5
25081: PUSH
25082: LD_INT 3
25084: ARRAY
25085: PPUSH
25086: CALL_OW 117
// break ;
25090: GO 25094
// end ;
25092: GO 24643
25094: POP
25095: POP
// end ; end ;
25096: GO 23636
25098: POP
25099: POP
// end ;
25100: LD_VAR 0 1
25104: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
25105: LD_INT 0
25107: PPUSH
25108: PPUSH
25109: PPUSH
25110: PPUSH
// if not mc_bases then
25111: LD_EXP 48
25115: NOT
25116: IFFALSE 25120
// exit ;
25118: GO 25281
// for i = 1 to mc_bases do
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: DOUBLE
25126: LD_INT 1
25128: DEC
25129: ST_TO_ADDR
25130: LD_EXP 48
25134: PUSH
25135: FOR_TO
25136: IFFALSE 25279
// begin tmp := UnitFilter ( mc_vehicles [ i ] ^ mc_defender [ i ] , [ f_control , control_remote ] ) ;
25138: LD_ADDR_VAR 0 4
25142: PUSH
25143: LD_EXP 67
25147: PUSH
25148: LD_VAR 0 2
25152: ARRAY
25153: PUSH
25154: LD_EXP 70
25158: PUSH
25159: LD_VAR 0 2
25163: ARRAY
25164: ADD
25165: PPUSH
25166: LD_INT 33
25168: PUSH
25169: LD_INT 2
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PPUSH
25176: CALL_OW 72
25180: ST_TO_ADDR
// if tmp then
25181: LD_VAR 0 4
25185: IFFALSE 25277
// for j in tmp do
25187: LD_ADDR_VAR 0 3
25191: PUSH
25192: LD_VAR 0 4
25196: PUSH
25197: FOR_IN
25198: IFFALSE 25275
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
25200: LD_VAR 0 3
25204: PPUSH
25205: CALL_OW 312
25209: NOT
25210: PUSH
25211: LD_VAR 0 3
25215: PPUSH
25216: CALL_OW 256
25220: PUSH
25221: LD_INT 250
25223: GREATEREQUAL
25224: AND
25225: IFFALSE 25238
// Connect ( j ) else
25227: LD_VAR 0 3
25231: PPUSH
25232: CALL 46852 0 1
25236: GO 25273
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
25238: LD_VAR 0 3
25242: PPUSH
25243: CALL_OW 256
25247: PUSH
25248: LD_INT 250
25250: LESS
25251: PUSH
25252: LD_VAR 0 3
25256: PPUSH
25257: CALL_OW 312
25261: AND
25262: IFFALSE 25273
// ComUnlink ( j ) ;
25264: LD_VAR 0 3
25268: PPUSH
25269: CALL_OW 136
25273: GO 25197
25275: POP
25276: POP
// end ;
25277: GO 25135
25279: POP
25280: POP
// end ;
25281: LD_VAR 0 1
25285: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
25286: LD_INT 0
25288: PPUSH
25289: PPUSH
25290: PPUSH
25291: PPUSH
25292: PPUSH
// if not mc_bases then
25293: LD_EXP 48
25297: NOT
25298: IFFALSE 25302
// exit ;
25300: GO 25762
// for i = 1 to mc_bases do
25302: LD_ADDR_VAR 0 2
25306: PUSH
25307: DOUBLE
25308: LD_INT 1
25310: DEC
25311: ST_TO_ADDR
25312: LD_EXP 48
25316: PUSH
25317: FOR_TO
25318: IFFALSE 25760
// begin if not mc_produce [ i ] then
25320: LD_EXP 69
25324: PUSH
25325: LD_VAR 0 2
25329: ARRAY
25330: NOT
25331: IFFALSE 25335
// continue ;
25333: GO 25317
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
25335: LD_ADDR_VAR 0 5
25339: PUSH
25340: LD_EXP 48
25344: PUSH
25345: LD_VAR 0 2
25349: ARRAY
25350: PPUSH
25351: LD_INT 30
25353: PUSH
25354: LD_INT 3
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PPUSH
25361: CALL_OW 72
25365: ST_TO_ADDR
// if not fac then
25366: LD_VAR 0 5
25370: NOT
25371: IFFALSE 25375
// continue ;
25373: GO 25317
// for j in fac do
25375: LD_ADDR_VAR 0 3
25379: PUSH
25380: LD_VAR 0 5
25384: PUSH
25385: FOR_IN
25386: IFFALSE 25756
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
25388: LD_VAR 0 3
25392: PPUSH
25393: CALL_OW 461
25397: PUSH
25398: LD_INT 2
25400: NONEQUAL
25401: PUSH
25402: LD_VAR 0 3
25406: PPUSH
25407: LD_INT 15
25409: PPUSH
25410: CALL 46555 0 2
25414: PUSH
25415: LD_INT 4
25417: ARRAY
25418: OR
25419: PUSH
25420: LD_VAR 0 3
25424: PPUSH
25425: CALL_OW 313
25429: PUSH
25430: LD_INT 0
25432: EQUAL
25433: OR
25434: IFFALSE 25438
// continue ;
25436: GO 25385
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
25438: LD_VAR 0 3
25442: PPUSH
25443: LD_EXP 69
25447: PUSH
25448: LD_VAR 0 2
25452: ARRAY
25453: PUSH
25454: LD_INT 1
25456: ARRAY
25457: PUSH
25458: LD_INT 1
25460: ARRAY
25461: PPUSH
25462: LD_EXP 69
25466: PUSH
25467: LD_VAR 0 2
25471: ARRAY
25472: PUSH
25473: LD_INT 1
25475: ARRAY
25476: PUSH
25477: LD_INT 2
25479: ARRAY
25480: PPUSH
25481: LD_EXP 69
25485: PUSH
25486: LD_VAR 0 2
25490: ARRAY
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: PUSH
25496: LD_INT 3
25498: ARRAY
25499: PPUSH
25500: LD_EXP 69
25504: PUSH
25505: LD_VAR 0 2
25509: ARRAY
25510: PUSH
25511: LD_INT 1
25513: ARRAY
25514: PUSH
25515: LD_INT 4
25517: ARRAY
25518: PPUSH
25519: CALL_OW 448
25523: PUSH
25524: LD_VAR 0 3
25528: PPUSH
25529: LD_EXP 69
25533: PUSH
25534: LD_VAR 0 2
25538: ARRAY
25539: PUSH
25540: LD_INT 1
25542: ARRAY
25543: PUSH
25544: LD_INT 1
25546: ARRAY
25547: PUSH
25548: LD_EXP 69
25552: PUSH
25553: LD_VAR 0 2
25557: ARRAY
25558: PUSH
25559: LD_INT 1
25561: ARRAY
25562: PUSH
25563: LD_INT 2
25565: ARRAY
25566: PUSH
25567: LD_EXP 69
25571: PUSH
25572: LD_VAR 0 2
25576: ARRAY
25577: PUSH
25578: LD_INT 1
25580: ARRAY
25581: PUSH
25582: LD_INT 3
25584: ARRAY
25585: PUSH
25586: LD_EXP 69
25590: PUSH
25591: LD_VAR 0 2
25595: ARRAY
25596: PUSH
25597: LD_INT 1
25599: ARRAY
25600: PUSH
25601: LD_INT 4
25603: ARRAY
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: PPUSH
25611: CALL 49946 0 2
25615: AND
25616: IFFALSE 25754
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
25618: LD_VAR 0 3
25622: PPUSH
25623: LD_EXP 69
25627: PUSH
25628: LD_VAR 0 2
25632: ARRAY
25633: PUSH
25634: LD_INT 1
25636: ARRAY
25637: PUSH
25638: LD_INT 1
25640: ARRAY
25641: PPUSH
25642: LD_EXP 69
25646: PUSH
25647: LD_VAR 0 2
25651: ARRAY
25652: PUSH
25653: LD_INT 1
25655: ARRAY
25656: PUSH
25657: LD_INT 2
25659: ARRAY
25660: PPUSH
25661: LD_EXP 69
25665: PUSH
25666: LD_VAR 0 2
25670: ARRAY
25671: PUSH
25672: LD_INT 1
25674: ARRAY
25675: PUSH
25676: LD_INT 3
25678: ARRAY
25679: PPUSH
25680: LD_EXP 69
25684: PUSH
25685: LD_VAR 0 2
25689: ARRAY
25690: PUSH
25691: LD_INT 1
25693: ARRAY
25694: PUSH
25695: LD_INT 4
25697: ARRAY
25698: PPUSH
25699: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
25703: LD_ADDR_VAR 0 4
25707: PUSH
25708: LD_EXP 69
25712: PUSH
25713: LD_VAR 0 2
25717: ARRAY
25718: PPUSH
25719: LD_INT 1
25721: PPUSH
25722: CALL_OW 3
25726: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
25727: LD_ADDR_EXP 69
25731: PUSH
25732: LD_EXP 69
25736: PPUSH
25737: LD_VAR 0 2
25741: PPUSH
25742: LD_VAR 0 4
25746: PPUSH
25747: CALL_OW 1
25751: ST_TO_ADDR
// break ;
25752: GO 25756
// end ; end ;
25754: GO 25385
25756: POP
25757: POP
// end ;
25758: GO 25317
25760: POP
25761: POP
// end ;
25762: LD_VAR 0 1
25766: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
25767: LD_INT 0
25769: PPUSH
25770: PPUSH
25771: PPUSH
// if not mc_bases then
25772: LD_EXP 48
25776: NOT
25777: IFFALSE 25781
// exit ;
25779: GO 25870
// for i = 1 to mc_bases do
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: DOUBLE
25787: LD_INT 1
25789: DEC
25790: ST_TO_ADDR
25791: LD_EXP 48
25795: PUSH
25796: FOR_TO
25797: IFFALSE 25868
// begin if mc_attack [ i ] then
25799: LD_EXP 68
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: IFFALSE 25866
// begin tmp := mc_attack [ i ] [ 1 ] ;
25811: LD_ADDR_VAR 0 3
25815: PUSH
25816: LD_EXP 68
25820: PUSH
25821: LD_VAR 0 2
25825: ARRAY
25826: PUSH
25827: LD_INT 1
25829: ARRAY
25830: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
25831: LD_ADDR_EXP 68
25835: PUSH
25836: LD_EXP 68
25840: PPUSH
25841: LD_VAR 0 2
25845: PPUSH
25846: EMPTY
25847: PPUSH
25848: CALL_OW 1
25852: ST_TO_ADDR
// Attack ( tmp ) ;
25853: LD_VAR 0 3
25857: PPUSH
25858: CALL 71878 0 1
// exit ;
25862: POP
25863: POP
25864: GO 25870
// end ; end ;
25866: GO 25796
25868: POP
25869: POP
// end ;
25870: LD_VAR 0 1
25874: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
// if not mc_bases then
25884: LD_EXP 48
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 26268
// for i = 1 to mc_bases do
25893: LD_ADDR_VAR 0 2
25897: PUSH
25898: DOUBLE
25899: LD_INT 1
25901: DEC
25902: ST_TO_ADDR
25903: LD_EXP 48
25907: PUSH
25908: FOR_TO
25909: IFFALSE 26266
// begin if not mc_bases [ i ] then
25911: LD_EXP 48
25915: PUSH
25916: LD_VAR 0 2
25920: ARRAY
25921: NOT
25922: IFFALSE 25926
// continue ;
25924: GO 25908
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
25926: LD_ADDR_VAR 0 7
25930: PUSH
25931: LD_EXP 48
25935: PUSH
25936: LD_VAR 0 2
25940: ARRAY
25941: PUSH
25942: LD_INT 1
25944: ARRAY
25945: PPUSH
25946: CALL 40869 0 1
25950: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
25951: LD_ADDR_EXP 71
25955: PUSH
25956: LD_EXP 71
25960: PPUSH
25961: LD_VAR 0 2
25965: PPUSH
25966: LD_EXP 48
25970: PUSH
25971: LD_VAR 0 2
25975: ARRAY
25976: PUSH
25977: LD_INT 1
25979: ARRAY
25980: PPUSH
25981: CALL_OW 255
25985: PPUSH
25986: LD_EXP 73
25990: PUSH
25991: LD_VAR 0 2
25995: ARRAY
25996: PPUSH
25997: CALL 39327 0 2
26001: PPUSH
26002: CALL_OW 1
26006: ST_TO_ADDR
// if not mc_scan [ i ] then
26007: LD_EXP 71
26011: PUSH
26012: LD_VAR 0 2
26016: ARRAY
26017: NOT
26018: IFFALSE 26173
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
26020: LD_ADDR_VAR 0 4
26024: PUSH
26025: LD_EXP 48
26029: PUSH
26030: LD_VAR 0 2
26034: ARRAY
26035: PPUSH
26036: LD_INT 2
26038: PUSH
26039: LD_INT 25
26041: PUSH
26042: LD_INT 5
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 25
26051: PUSH
26052: LD_INT 8
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 25
26061: PUSH
26062: LD_INT 9
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 72
26079: ST_TO_ADDR
// if not tmp then
26080: LD_VAR 0 4
26084: NOT
26085: IFFALSE 26089
// continue ;
26087: GO 25908
// for j in tmp do
26089: LD_ADDR_VAR 0 3
26093: PUSH
26094: LD_VAR 0 4
26098: PUSH
26099: FOR_IN
26100: IFFALSE 26171
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
26102: LD_VAR 0 3
26106: PPUSH
26107: CALL_OW 310
26111: PPUSH
26112: CALL_OW 266
26116: PUSH
26117: LD_INT 5
26119: EQUAL
26120: PUSH
26121: LD_VAR 0 3
26125: PPUSH
26126: CALL_OW 257
26130: PUSH
26131: LD_INT 1
26133: EQUAL
26134: AND
26135: PUSH
26136: LD_VAR 0 3
26140: PPUSH
26141: CALL_OW 459
26145: NOT
26146: AND
26147: PUSH
26148: LD_VAR 0 7
26152: AND
26153: IFFALSE 26169
// ComChangeProfession ( j , class ) ;
26155: LD_VAR 0 3
26159: PPUSH
26160: LD_VAR 0 7
26164: PPUSH
26165: CALL_OW 123
26169: GO 26099
26171: POP
26172: POP
// end ; if mc_scan [ i ] and mc_defender [ i ] then
26173: LD_EXP 71
26177: PUSH
26178: LD_VAR 0 2
26182: ARRAY
26183: PUSH
26184: LD_EXP 70
26188: PUSH
26189: LD_VAR 0 2
26193: ARRAY
26194: AND
26195: IFFALSE 26264
// begin tmp := mc_defender [ i ] ;
26197: LD_ADDR_VAR 0 4
26201: PUSH
26202: LD_EXP 70
26206: PUSH
26207: LD_VAR 0 2
26211: ARRAY
26212: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
26213: LD_ADDR_EXP 70
26217: PUSH
26218: LD_EXP 70
26222: PPUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: EMPTY
26229: PPUSH
26230: CALL_OW 1
26234: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
26235: LD_VAR 0 2
26239: PPUSH
26240: LD_VAR 0 4
26244: PPUSH
26245: LD_EXP 71
26249: PUSH
26250: LD_VAR 0 2
26254: ARRAY
26255: PPUSH
26256: CALL 39362 0 3
// exit ;
26260: POP
26261: POP
26262: GO 26268
// end ; end ;
26264: GO 25908
26266: POP
26267: POP
// end ;
26268: LD_VAR 0 1
26272: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 ; begin
26273: LD_INT 0
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
// if not mc_bases then
26284: LD_EXP 48
26288: NOT
26289: IFFALSE 26293
// exit ;
26291: GO 27237
// for i = 1 to mc_bases do
26293: LD_ADDR_VAR 0 2
26297: PUSH
26298: DOUBLE
26299: LD_INT 1
26301: DEC
26302: ST_TO_ADDR
26303: LD_EXP 48
26307: PUSH
26308: FOR_TO
26309: IFFALSE 27235
// begin tmp := mc_lab [ i ] ;
26311: LD_ADDR_VAR 0 6
26315: PUSH
26316: LD_EXP 81
26320: PUSH
26321: LD_VAR 0 2
26325: ARRAY
26326: ST_TO_ADDR
// if not tmp then
26327: LD_VAR 0 6
26331: NOT
26332: IFFALSE 26336
// continue ;
26334: GO 26308
// for j in tmp do
26336: LD_ADDR_VAR 0 3
26340: PUSH
26341: LD_VAR 0 6
26345: PUSH
26346: FOR_IN
26347: IFFALSE 27231
// begin side := GetSide ( j ) ;
26349: LD_ADDR_VAR 0 4
26353: PUSH
26354: LD_VAR 0 3
26358: PPUSH
26359: CALL_OW 255
26363: ST_TO_ADDR
// if not mc_tech [ side ] then
26364: LD_EXP 75
26368: PUSH
26369: LD_VAR 0 4
26373: ARRAY
26374: NOT
26375: IFFALSE 26379
// continue ;
26377: GO 26346
// if BuildingStatus ( j ) = bs_idle then
26379: LD_VAR 0 3
26383: PPUSH
26384: CALL_OW 461
26388: PUSH
26389: LD_INT 2
26391: EQUAL
26392: IFFALSE 26465
// for t in mc_tech [ side ] do
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_EXP 75
26403: PUSH
26404: LD_VAR 0 4
26408: ARRAY
26409: PUSH
26410: FOR_IN
26411: IFFALSE 26463
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
26413: LD_VAR 0 3
26417: PPUSH
26418: LD_VAR 0 5
26422: PPUSH
26423: CALL_OW 430
26427: PUSH
26428: LD_VAR 0 4
26432: PPUSH
26433: LD_VAR 0 5
26437: PPUSH
26438: CALL 38435 0 2
26442: AND
26443: IFFALSE 26461
// begin ComResearch ( j , t ) ;
26445: LD_VAR 0 3
26449: PPUSH
26450: LD_VAR 0 5
26454: PPUSH
26455: CALL_OW 124
// break ;
26459: GO 26463
// end ;
26461: GO 26410
26463: POP
26464: POP
// if BuildingStatus ( j ) = bs_need_ape then
26465: LD_VAR 0 3
26469: PPUSH
26470: CALL_OW 461
26474: PUSH
26475: LD_INT 10
26477: EQUAL
26478: IFFALSE 27066
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
26480: LD_EXP 77
26484: PUSH
26485: LD_VAR 0 2
26489: ARRAY
26490: NOT
26491: PUSH
26492: LD_EXP 78
26496: PUSH
26497: LD_VAR 0 2
26501: ARRAY
26502: NOT
26503: AND
26504: PUSH
26505: LD_EXP 75
26509: PUSH
26510: LD_VAR 0 4
26514: ARRAY
26515: PUSH
26516: LD_INT 1
26518: GREATER
26519: AND
26520: IFFALSE 26651
// begin ComCancel ( j ) ;
26522: LD_VAR 0 3
26526: PPUSH
26527: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
26531: LD_ADDR_EXP 75
26535: PUSH
26536: LD_EXP 75
26540: PPUSH
26541: LD_VAR 0 4
26545: PPUSH
26546: LD_EXP 75
26550: PUSH
26551: LD_VAR 0 4
26555: ARRAY
26556: PPUSH
26557: LD_EXP 75
26561: PUSH
26562: LD_VAR 0 4
26566: ARRAY
26567: PUSH
26568: LD_INT 1
26570: MINUS
26571: PPUSH
26572: LD_EXP 75
26576: PUSH
26577: LD_VAR 0 4
26581: ARRAY
26582: PPUSH
26583: LD_INT 0
26585: PPUSH
26586: CALL 43347 0 4
26590: PPUSH
26591: CALL_OW 1
26595: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
26596: LD_ADDR_EXP 75
26600: PUSH
26601: LD_EXP 75
26605: PPUSH
26606: LD_VAR 0 4
26610: PPUSH
26611: LD_EXP 75
26615: PUSH
26616: LD_VAR 0 4
26620: ARRAY
26621: PPUSH
26622: LD_EXP 75
26626: PUSH
26627: LD_VAR 0 4
26631: ARRAY
26632: PPUSH
26633: LD_INT 1
26635: PPUSH
26636: LD_INT 0
26638: PPUSH
26639: CALL 43347 0 4
26643: PPUSH
26644: CALL_OW 1
26648: ST_TO_ADDR
// continue ;
26649: GO 26346
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
26651: LD_EXP 77
26655: PUSH
26656: LD_VAR 0 2
26660: ARRAY
26661: PUSH
26662: LD_EXP 78
26666: PUSH
26667: LD_VAR 0 2
26671: ARRAY
26672: NOT
26673: AND
26674: IFFALSE 26801
// begin mc_ape_in_lab := Add ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
26676: LD_ADDR_EXP 78
26680: PUSH
26681: LD_EXP 78
26685: PPUSH
26686: LD_VAR 0 2
26690: PUSH
26691: LD_EXP 78
26695: PUSH
26696: LD_VAR 0 2
26700: ARRAY
26701: PUSH
26702: LD_INT 1
26704: PLUS
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PPUSH
26710: LD_EXP 77
26714: PUSH
26715: LD_VAR 0 2
26719: ARRAY
26720: PUSH
26721: LD_INT 1
26723: ARRAY
26724: PPUSH
26725: CALL 44364 0 3
26729: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
26730: LD_EXP 77
26734: PUSH
26735: LD_VAR 0 2
26739: ARRAY
26740: PUSH
26741: LD_INT 1
26743: ARRAY
26744: PPUSH
26745: LD_INT 112
26747: PPUSH
26748: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
26752: LD_ADDR_VAR 0 9
26756: PUSH
26757: LD_EXP 77
26761: PUSH
26762: LD_VAR 0 2
26766: ARRAY
26767: PPUSH
26768: LD_INT 1
26770: PPUSH
26771: CALL_OW 3
26775: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
26776: LD_ADDR_EXP 77
26780: PUSH
26781: LD_EXP 77
26785: PPUSH
26786: LD_VAR 0 2
26790: PPUSH
26791: LD_VAR 0 9
26795: PPUSH
26796: CALL_OW 1
26800: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
26801: LD_EXP 77
26805: PUSH
26806: LD_VAR 0 2
26810: ARRAY
26811: PUSH
26812: LD_EXP 78
26816: PUSH
26817: LD_VAR 0 2
26821: ARRAY
26822: AND
26823: PUSH
26824: LD_EXP 78
26828: PUSH
26829: LD_VAR 0 2
26833: ARRAY
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: PPUSH
26839: CALL_OW 310
26843: NOT
26844: AND
26845: PUSH
26846: LD_VAR 0 3
26850: PPUSH
26851: CALL_OW 313
26855: PUSH
26856: LD_INT 6
26858: EQUAL
26859: AND
26860: IFFALSE 26916
// begin tmp2 := UnitsInside ( j ) ;
26862: LD_ADDR_VAR 0 9
26866: PUSH
26867: LD_VAR 0 3
26871: PPUSH
26872: CALL_OW 313
26876: ST_TO_ADDR
// if tmp2 = 6 then
26877: LD_VAR 0 9
26881: PUSH
26882: LD_INT 6
26884: EQUAL
26885: IFFALSE 26916
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
26887: LD_VAR 0 9
26891: PUSH
26892: LD_INT 1
26894: ARRAY
26895: PPUSH
26896: LD_INT 112
26898: PPUSH
26899: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
26903: LD_VAR 0 9
26907: PUSH
26908: LD_INT 1
26910: ARRAY
26911: PPUSH
26912: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
26916: LD_EXP 78
26920: PUSH
26921: LD_VAR 0 2
26925: ARRAY
26926: PUSH
26927: LD_EXP 78
26931: PUSH
26932: LD_VAR 0 2
26936: ARRAY
26937: PUSH
26938: LD_INT 1
26940: ARRAY
26941: PPUSH
26942: CALL_OW 314
26946: NOT
26947: AND
26948: PUSH
26949: LD_EXP 78
26953: PUSH
26954: LD_VAR 0 2
26958: ARRAY
26959: PUSH
26960: LD_INT 1
26962: ARRAY
26963: PPUSH
26964: CALL_OW 310
26968: NOT
26969: AND
26970: IFFALSE 26996
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
26972: LD_EXP 78
26976: PUSH
26977: LD_VAR 0 2
26981: ARRAY
26982: PUSH
26983: LD_INT 1
26985: ARRAY
26986: PPUSH
26987: LD_VAR 0 3
26991: PPUSH
26992: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
26996: LD_EXP 78
27000: PUSH
27001: LD_VAR 0 2
27005: ARRAY
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: PPUSH
27011: CALL_OW 310
27015: PUSH
27016: LD_EXP 78
27020: PUSH
27021: LD_VAR 0 2
27025: ARRAY
27026: PUSH
27027: LD_INT 1
27029: ARRAY
27030: PPUSH
27031: CALL_OW 310
27035: PPUSH
27036: CALL_OW 461
27040: PUSH
27041: LD_INT 3
27043: NONEQUAL
27044: AND
27045: IFFALSE 27066
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
27047: LD_EXP 78
27051: PUSH
27052: LD_VAR 0 2
27056: ARRAY
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PPUSH
27062: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
27066: LD_VAR 0 3
27070: PPUSH
27071: CALL_OW 461
27075: PUSH
27076: LD_INT 6
27078: EQUAL
27079: PUSH
27080: LD_VAR 0 6
27084: PUSH
27085: LD_INT 1
27087: GREATER
27088: AND
27089: IFFALSE 27229
// begin sci := [ ] ;
27091: LD_ADDR_VAR 0 8
27095: PUSH
27096: EMPTY
27097: ST_TO_ADDR
// for x in tmp diff j do
27098: LD_ADDR_VAR 0 7
27102: PUSH
27103: LD_VAR 0 6
27107: PUSH
27108: LD_VAR 0 3
27112: DIFF
27113: PUSH
27114: FOR_IN
27115: IFFALSE 27155
// begin if BuildingStatus ( x ) = bs_idle then
27117: LD_VAR 0 7
27121: PPUSH
27122: CALL_OW 461
27126: PUSH
27127: LD_INT 2
27129: EQUAL
27130: IFFALSE 27153
// sci := sci ^ UnitsInside ( x ) ;
27132: LD_ADDR_VAR 0 8
27136: PUSH
27137: LD_VAR 0 8
27141: PUSH
27142: LD_VAR 0 7
27146: PPUSH
27147: CALL_OW 313
27151: ADD
27152: ST_TO_ADDR
// end ;
27153: GO 27114
27155: POP
27156: POP
// if not sci then
27157: LD_VAR 0 8
27161: NOT
27162: IFFALSE 27166
// continue ;
27164: GO 26346
// for x in sci do
27166: LD_ADDR_VAR 0 7
27170: PUSH
27171: LD_VAR 0 8
27175: PUSH
27176: FOR_IN
27177: IFFALSE 27227
// if IsInUnit ( x ) and not HasTask ( x ) then
27179: LD_VAR 0 7
27183: PPUSH
27184: CALL_OW 310
27188: PUSH
27189: LD_VAR 0 7
27193: PPUSH
27194: CALL_OW 314
27198: NOT
27199: AND
27200: IFFALSE 27225
// begin ComExitBuilding ( x ) ;
27202: LD_VAR 0 7
27206: PPUSH
27207: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
27211: LD_VAR 0 7
27215: PPUSH
27216: LD_VAR 0 3
27220: PPUSH
27221: CALL_OW 180
// end ;
27225: GO 27176
27227: POP
27228: POP
// end ; end ;
27229: GO 26346
27231: POP
27232: POP
// end ;
27233: GO 26308
27235: POP
27236: POP
// end ;
27237: LD_VAR 0 1
27241: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
27242: LD_INT 0
27244: PPUSH
27245: PPUSH
27246: PPUSH
27247: PPUSH
27248: PPUSH
27249: PPUSH
27250: PPUSH
27251: PPUSH
// if not mc_bases or not mc_parking then
27252: LD_EXP 48
27256: NOT
27257: PUSH
27258: LD_EXP 72
27262: NOT
27263: OR
27264: IFFALSE 27268
// exit ;
27266: GO 27926
// for i = 1 to mc_bases do
27268: LD_ADDR_VAR 0 2
27272: PUSH
27273: DOUBLE
27274: LD_INT 1
27276: DEC
27277: ST_TO_ADDR
27278: LD_EXP 48
27282: PUSH
27283: FOR_TO
27284: IFFALSE 27924
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
27286: LD_EXP 48
27290: PUSH
27291: LD_VAR 0 2
27295: ARRAY
27296: NOT
27297: PUSH
27298: LD_EXP 72
27302: PUSH
27303: LD_VAR 0 2
27307: ARRAY
27308: NOT
27309: OR
27310: IFFALSE 27314
// continue ;
27312: GO 27283
// if mc_scan [ i ] then
27314: LD_EXP 71
27318: PUSH
27319: LD_VAR 0 2
27323: ARRAY
27324: IFFALSE 27350
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27326: LD_ADDR_EXP 60
27330: PUSH
27331: LD_EXP 60
27335: PPUSH
27336: LD_VAR 0 2
27340: PPUSH
27341: EMPTY
27342: PPUSH
27343: CALL_OW 1
27347: ST_TO_ADDR
// continue ;
27348: GO 27283
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
27350: LD_ADDR_VAR 0 5
27354: PUSH
27355: LD_EXP 48
27359: PUSH
27360: LD_VAR 0 2
27364: ARRAY
27365: PUSH
27366: LD_INT 1
27368: ARRAY
27369: PPUSH
27370: CALL_OW 255
27374: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27375: LD_ADDR_VAR 0 6
27379: PUSH
27380: LD_EXP 48
27384: PUSH
27385: LD_VAR 0 2
27389: ARRAY
27390: PPUSH
27391: LD_INT 30
27393: PUSH
27394: LD_INT 3
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PPUSH
27401: CALL_OW 72
27405: ST_TO_ADDR
// if not fac then
27406: LD_VAR 0 6
27410: NOT
27411: IFFALSE 27462
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27413: LD_ADDR_VAR 0 6
27417: PUSH
27418: LD_EXP 48
27422: PUSH
27423: LD_VAR 0 2
27427: ARRAY
27428: PPUSH
27429: LD_INT 2
27431: PUSH
27432: LD_INT 30
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 30
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: PPUSH
27457: CALL_OW 72
27461: ST_TO_ADDR
// if not fac then
27462: LD_VAR 0 6
27466: NOT
27467: IFFALSE 27471
// continue ;
27469: GO 27283
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
27471: LD_ADDR_VAR 0 7
27475: PUSH
27476: LD_EXP 72
27480: PUSH
27481: LD_VAR 0 2
27485: ARRAY
27486: PPUSH
27487: LD_INT 22
27489: PUSH
27490: LD_VAR 0 5
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 21
27501: PUSH
27502: LD_INT 2
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 3
27511: PUSH
27512: LD_INT 24
27514: PUSH
27515: LD_INT 1000
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: LIST
27530: PPUSH
27531: CALL_OW 70
27535: PUSH
27536: LD_INT 22
27538: PUSH
27539: LD_VAR 0 5
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 91
27550: PUSH
27551: LD_VAR 0 6
27555: PUSH
27556: LD_INT 1
27558: ARRAY
27559: PUSH
27560: LD_INT 25
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 21
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 3
27580: PUSH
27581: LD_INT 24
27583: PUSH
27584: LD_INT 1000
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: PPUSH
27601: CALL_OW 69
27605: UNION
27606: ST_TO_ADDR
// if not vehs then
27607: LD_VAR 0 7
27611: NOT
27612: IFFALSE 27638
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
27614: LD_ADDR_EXP 60
27618: PUSH
27619: LD_EXP 60
27623: PPUSH
27624: LD_VAR 0 2
27628: PPUSH
27629: EMPTY
27630: PPUSH
27631: CALL_OW 1
27635: ST_TO_ADDR
// continue ;
27636: GO 27283
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
27638: LD_ADDR_VAR 0 8
27642: PUSH
27643: LD_EXP 48
27647: PUSH
27648: LD_VAR 0 2
27652: ARRAY
27653: PPUSH
27654: LD_INT 30
27656: PUSH
27657: LD_INT 3
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PPUSH
27664: CALL_OW 72
27668: ST_TO_ADDR
// if tmp then
27669: LD_VAR 0 8
27673: IFFALSE 27776
// begin for j in tmp do
27675: LD_ADDR_VAR 0 3
27679: PUSH
27680: LD_VAR 0 8
27684: PUSH
27685: FOR_IN
27686: IFFALSE 27774
// for k in UnitsInside ( j ) do
27688: LD_ADDR_VAR 0 4
27692: PUSH
27693: LD_VAR 0 3
27697: PPUSH
27698: CALL_OW 313
27702: PUSH
27703: FOR_IN
27704: IFFALSE 27770
// if k then
27706: LD_VAR 0 4
27710: IFFALSE 27768
// if not k in mc_repair_vehicle [ i ] then
27712: LD_VAR 0 4
27716: PUSH
27717: LD_EXP 60
27721: PUSH
27722: LD_VAR 0 2
27726: ARRAY
27727: IN
27728: NOT
27729: IFFALSE 27768
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
27731: LD_ADDR_EXP 60
27735: PUSH
27736: LD_EXP 60
27740: PPUSH
27741: LD_VAR 0 2
27745: PPUSH
27746: LD_EXP 60
27750: PUSH
27751: LD_VAR 0 2
27755: ARRAY
27756: PUSH
27757: LD_VAR 0 4
27761: UNION
27762: PPUSH
27763: CALL_OW 1
27767: ST_TO_ADDR
27768: GO 27703
27770: POP
27771: POP
27772: GO 27685
27774: POP
27775: POP
// end ; if not mc_repair_vehicle [ i ] then
27776: LD_EXP 60
27780: PUSH
27781: LD_VAR 0 2
27785: ARRAY
27786: NOT
27787: IFFALSE 27791
// continue ;
27789: GO 27283
// for j in mc_repair_vehicle [ i ] do
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_EXP 60
27800: PUSH
27801: LD_VAR 0 2
27805: ARRAY
27806: PUSH
27807: FOR_IN
27808: IFFALSE 27920
// begin if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
27810: LD_VAR 0 3
27814: PPUSH
27815: CALL_OW 311
27819: NOT
27820: PUSH
27821: LD_VAR 0 3
27825: PUSH
27826: LD_EXP 51
27830: PUSH
27831: LD_VAR 0 2
27835: ARRAY
27836: PUSH
27837: LD_INT 1
27839: ARRAY
27840: IN
27841: NOT
27842: AND
27843: PUSH
27844: LD_VAR 0 3
27848: PUSH
27849: LD_EXP 51
27853: PUSH
27854: LD_VAR 0 2
27858: ARRAY
27859: PUSH
27860: LD_INT 2
27862: ARRAY
27863: IN
27864: NOT
27865: AND
27866: IFFALSE 27918
// begin if IsInUnit ( j ) then
27868: LD_VAR 0 3
27872: PPUSH
27873: CALL_OW 310
27877: IFFALSE 27888
// ComExitBuilding ( j ) ;
27879: LD_VAR 0 3
27883: PPUSH
27884: CALL_OW 122
// if not HasTask ( j ) then
27888: LD_VAR 0 3
27892: PPUSH
27893: CALL_OW 314
27897: NOT
27898: IFFALSE 27918
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
27900: LD_VAR 0 3
27904: PPUSH
27905: LD_VAR 0 7
27909: PUSH
27910: LD_INT 1
27912: ARRAY
27913: PPUSH
27914: CALL_OW 189
// end ; end ;
27918: GO 27807
27920: POP
27921: POP
// end ;
27922: GO 27283
27924: POP
27925: POP
// end ;
27926: LD_VAR 0 1
27930: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
27931: LD_INT 0
27933: PPUSH
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
27939: PPUSH
27940: PPUSH
27941: PPUSH
27942: PPUSH
27943: PPUSH
// if not mc_bases then
27944: LD_EXP 48
27948: NOT
27949: IFFALSE 27953
// exit ;
27951: GO 28689
// for i = 1 to mc_bases do
27953: LD_ADDR_VAR 0 2
27957: PUSH
27958: DOUBLE
27959: LD_INT 1
27961: DEC
27962: ST_TO_ADDR
27963: LD_EXP 48
27967: PUSH
27968: FOR_TO
27969: IFFALSE 28687
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
27971: LD_EXP 76
27975: PUSH
27976: LD_VAR 0 2
27980: ARRAY
27981: NOT
27982: PUSH
27983: LD_EXP 51
27987: PUSH
27988: LD_VAR 0 2
27992: ARRAY
27993: PUSH
27994: LD_INT 1
27996: ARRAY
27997: OR
27998: PUSH
27999: LD_EXP 51
28003: PUSH
28004: LD_VAR 0 2
28008: ARRAY
28009: PUSH
28010: LD_INT 2
28012: ARRAY
28013: OR
28014: PUSH
28015: LD_EXP 74
28019: PUSH
28020: LD_VAR 0 2
28024: ARRAY
28025: PPUSH
28026: LD_INT 1
28028: PPUSH
28029: CALL_OW 325
28033: NOT
28034: OR
28035: PUSH
28036: LD_EXP 71
28040: PUSH
28041: LD_VAR 0 2
28045: ARRAY
28046: OR
28047: IFFALSE 28051
// continue ;
28049: GO 27968
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
28051: LD_ADDR_VAR 0 8
28055: PUSH
28056: LD_EXP 48
28060: PUSH
28061: LD_VAR 0 2
28065: ARRAY
28066: PPUSH
28067: LD_INT 25
28069: PUSH
28070: LD_INT 4
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 50
28079: PUSH
28080: EMPTY
28081: LIST
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 60
28088: PUSH
28089: EMPTY
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 72
28105: PUSH
28106: LD_EXP 52
28110: PUSH
28111: LD_VAR 0 2
28115: ARRAY
28116: DIFF
28117: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28118: LD_ADDR_VAR 0 9
28122: PUSH
28123: LD_EXP 48
28127: PUSH
28128: LD_VAR 0 2
28132: ARRAY
28133: PPUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 30
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 30
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 72
28166: ST_TO_ADDR
// if not tmp or not dep then
28167: LD_VAR 0 8
28171: NOT
28172: PUSH
28173: LD_VAR 0 9
28177: NOT
28178: OR
28179: IFFALSE 28183
// continue ;
28181: GO 27968
// side := GetSide ( tmp [ 1 ] ) ;
28183: LD_ADDR_VAR 0 11
28187: PUSH
28188: LD_VAR 0 8
28192: PUSH
28193: LD_INT 1
28195: ARRAY
28196: PPUSH
28197: CALL_OW 255
28201: ST_TO_ADDR
// dep := dep [ 1 ] ;
28202: LD_ADDR_VAR 0 9
28206: PUSH
28207: LD_VAR 0 9
28211: PUSH
28212: LD_INT 1
28214: ARRAY
28215: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
28216: LD_ADDR_VAR 0 7
28220: PUSH
28221: LD_EXP 76
28225: PUSH
28226: LD_VAR 0 2
28230: ARRAY
28231: PPUSH
28232: LD_INT 22
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 25
28244: PUSH
28245: LD_INT 12
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PPUSH
28256: CALL_OW 70
28260: PUSH
28261: LD_INT 22
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 25
28273: PUSH
28274: LD_INT 12
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 91
28283: PUSH
28284: LD_VAR 0 9
28288: PUSH
28289: LD_INT 20
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: PPUSH
28302: CALL_OW 69
28306: UNION
28307: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
28308: LD_ADDR_VAR 0 10
28312: PUSH
28313: LD_EXP 76
28317: PUSH
28318: LD_VAR 0 2
28322: ARRAY
28323: PPUSH
28324: LD_INT 81
28326: PUSH
28327: LD_VAR 0 11
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PPUSH
28336: CALL_OW 70
28340: ST_TO_ADDR
// if not apes or danger_at_area then
28341: LD_VAR 0 7
28345: NOT
28346: PUSH
28347: LD_VAR 0 10
28351: OR
28352: IFFALSE 28402
// begin if mc_taming [ i ] then
28354: LD_EXP 79
28358: PUSH
28359: LD_VAR 0 2
28363: ARRAY
28364: IFFALSE 28400
// begin MC_Reset ( i , 121 ) ;
28366: LD_VAR 0 2
28370: PPUSH
28371: LD_INT 121
28373: PPUSH
28374: CALL 19197 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
28378: LD_ADDR_EXP 79
28382: PUSH
28383: LD_EXP 79
28387: PPUSH
28388: LD_VAR 0 2
28392: PPUSH
28393: EMPTY
28394: PPUSH
28395: CALL_OW 1
28399: ST_TO_ADDR
// end ; continue ;
28400: GO 27968
// end ; for j in tmp do
28402: LD_ADDR_VAR 0 3
28406: PUSH
28407: LD_VAR 0 8
28411: PUSH
28412: FOR_IN
28413: IFFALSE 28683
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
28415: LD_VAR 0 3
28419: PUSH
28420: LD_EXP 79
28424: PUSH
28425: LD_VAR 0 2
28429: ARRAY
28430: IN
28431: NOT
28432: PUSH
28433: LD_EXP 79
28437: PUSH
28438: LD_VAR 0 2
28442: ARRAY
28443: PUSH
28444: LD_INT 3
28446: LESS
28447: AND
28448: IFFALSE 28506
// begin SetTag ( j , 121 ) ;
28450: LD_VAR 0 3
28454: PPUSH
28455: LD_INT 121
28457: PPUSH
28458: CALL_OW 109
// mc_taming := Add ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
28462: LD_ADDR_EXP 79
28466: PUSH
28467: LD_EXP 79
28471: PPUSH
28472: LD_VAR 0 2
28476: PUSH
28477: LD_EXP 79
28481: PUSH
28482: LD_VAR 0 2
28486: ARRAY
28487: PUSH
28488: LD_INT 1
28490: PLUS
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PPUSH
28496: LD_VAR 0 3
28500: PPUSH
28501: CALL 44364 0 3
28505: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
28506: LD_VAR 0 3
28510: PUSH
28511: LD_EXP 79
28515: PUSH
28516: LD_VAR 0 2
28520: ARRAY
28521: IN
28522: IFFALSE 28681
// begin if IsInUnit ( j ) then
28524: LD_VAR 0 3
28528: PPUSH
28529: CALL_OW 310
28533: IFFALSE 28544
// ComExitBuilding ( j ) ;
28535: LD_VAR 0 3
28539: PPUSH
28540: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
28544: LD_ADDR_VAR 0 6
28548: PUSH
28549: LD_VAR 0 7
28553: PPUSH
28554: LD_VAR 0 3
28558: PPUSH
28559: CALL_OW 74
28563: ST_TO_ADDR
// if not ape then
28564: LD_VAR 0 6
28568: NOT
28569: IFFALSE 28573
// break ;
28571: GO 28683
// x := GetX ( ape ) ;
28573: LD_ADDR_VAR 0 4
28577: PUSH
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 250
28587: ST_TO_ADDR
// y := GetY ( ape ) ;
28588: LD_ADDR_VAR 0 5
28592: PUSH
28593: LD_VAR 0 6
28597: PPUSH
28598: CALL_OW 251
28602: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28603: LD_VAR 0 4
28607: PPUSH
28608: LD_VAR 0 5
28612: PPUSH
28613: CALL_OW 488
28617: NOT
28618: PUSH
28619: LD_VAR 0 11
28623: PPUSH
28624: LD_VAR 0 4
28628: PPUSH
28629: LD_VAR 0 5
28633: PPUSH
28634: LD_INT 20
28636: PPUSH
28637: CALL 44858 0 4
28641: PUSH
28642: LD_INT 4
28644: ARRAY
28645: OR
28646: IFFALSE 28650
// break ;
28648: GO 28683
// if not HasTask ( j ) then
28650: LD_VAR 0 3
28654: PPUSH
28655: CALL_OW 314
28659: NOT
28660: IFFALSE 28681
// ComTameXY ( j , x , y ) ;
28662: LD_VAR 0 3
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_VAR 0 5
28676: PPUSH
28677: CALL_OW 131
// end ; end ;
28681: GO 28412
28683: POP
28684: POP
// end ;
28685: GO 27968
28687: POP
28688: POP
// end ;
28689: LD_VAR 0 1
28693: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
28694: LD_INT 0
28696: PPUSH
28697: PPUSH
28698: PPUSH
28699: PPUSH
28700: PPUSH
28701: PPUSH
28702: PPUSH
28703: PPUSH
// if not mc_bases then
28704: LD_EXP 48
28708: NOT
28709: IFFALSE 28713
// exit ;
28711: GO 29323
// for i = 1 to mc_bases do
28713: LD_ADDR_VAR 0 2
28717: PUSH
28718: DOUBLE
28719: LD_INT 1
28721: DEC
28722: ST_TO_ADDR
28723: LD_EXP 48
28727: PUSH
28728: FOR_TO
28729: IFFALSE 29321
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
28731: LD_EXP 77
28735: PUSH
28736: LD_VAR 0 2
28740: ARRAY
28741: NOT
28742: PUSH
28743: LD_EXP 77
28747: PUSH
28748: LD_VAR 0 2
28752: ARRAY
28753: PPUSH
28754: LD_INT 25
28756: PUSH
28757: LD_INT 12
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PPUSH
28764: CALL_OW 72
28768: NOT
28769: OR
28770: IFFALSE 28774
// continue ;
28772: GO 28728
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
28774: LD_ADDR_VAR 0 5
28778: PUSH
28779: LD_EXP 77
28783: PUSH
28784: LD_VAR 0 2
28788: ARRAY
28789: PUSH
28790: LD_INT 1
28792: ARRAY
28793: PPUSH
28794: CALL_OW 255
28798: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
28799: LD_VAR 0 5
28803: PPUSH
28804: LD_INT 2
28806: PPUSH
28807: CALL_OW 325
28811: IFFALSE 29056
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
28813: LD_ADDR_VAR 0 4
28817: PUSH
28818: LD_EXP 77
28822: PUSH
28823: LD_VAR 0 2
28827: ARRAY
28828: PPUSH
28829: LD_INT 25
28831: PUSH
28832: LD_INT 16
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 72
28843: ST_TO_ADDR
// if tmp < 6 then
28844: LD_VAR 0 4
28848: PUSH
28849: LD_INT 6
28851: LESS
28852: IFFALSE 29056
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
28854: LD_ADDR_VAR 0 6
28858: PUSH
28859: LD_EXP 48
28863: PUSH
28864: LD_VAR 0 2
28868: ARRAY
28869: PPUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 30
28875: PUSH
28876: LD_INT 0
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 30
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 72
28902: ST_TO_ADDR
// if depot then
28903: LD_VAR 0 6
28907: IFFALSE 29056
// begin for j in depot do
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_VAR 0 6
28918: PUSH
28919: FOR_IN
28920: IFFALSE 28951
// begin if UnitsInside ( j ) < 6 then
28922: LD_VAR 0 3
28926: PPUSH
28927: CALL_OW 313
28931: PUSH
28932: LD_INT 6
28934: LESS
28935: IFFALSE 28949
// begin selected := j ;
28937: LD_ADDR_VAR 0 7
28941: PUSH
28942: LD_VAR 0 3
28946: ST_TO_ADDR
// break ;
28947: GO 28951
// end ; end ;
28949: GO 28919
28951: POP
28952: POP
// if selected then
28953: LD_VAR 0 7
28957: IFFALSE 29056
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
28959: LD_ADDR_VAR 0 3
28963: PUSH
28964: LD_EXP 77
28968: PUSH
28969: LD_VAR 0 2
28973: ARRAY
28974: PPUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 12
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PPUSH
28985: CALL_OW 72
28989: PUSH
28990: FOR_IN
28991: IFFALSE 29054
// if not HasTask ( j ) then
28993: LD_VAR 0 3
28997: PPUSH
28998: CALL_OW 314
29002: NOT
29003: IFFALSE 29052
// begin if not IsInUnit ( j ) then
29005: LD_VAR 0 3
29009: PPUSH
29010: CALL_OW 310
29014: NOT
29015: IFFALSE 29031
// ComEnterUnit ( j , selected ) ;
29017: LD_VAR 0 3
29021: PPUSH
29022: LD_VAR 0 7
29026: PPUSH
29027: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
29031: LD_VAR 0 3
29035: PPUSH
29036: LD_INT 16
29038: PPUSH
29039: CALL_OW 183
// AddComExitBuilding ( j ) ;
29043: LD_VAR 0 3
29047: PPUSH
29048: CALL_OW 182
// end ;
29052: GO 28990
29054: POP
29055: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
29056: LD_VAR 0 5
29060: PPUSH
29061: LD_INT 11
29063: PPUSH
29064: CALL_OW 325
29068: IFFALSE 29319
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
29070: LD_ADDR_VAR 0 4
29074: PUSH
29075: LD_EXP 77
29079: PUSH
29080: LD_VAR 0 2
29084: ARRAY
29085: PPUSH
29086: LD_INT 25
29088: PUSH
29089: LD_INT 16
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PPUSH
29096: CALL_OW 72
29100: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
29101: LD_VAR 0 4
29105: PUSH
29106: LD_INT 6
29108: GREATEREQUAL
29109: PUSH
29110: LD_VAR 0 5
29114: PPUSH
29115: LD_INT 2
29117: PPUSH
29118: CALL_OW 325
29122: NOT
29123: OR
29124: IFFALSE 29319
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
29126: LD_ADDR_VAR 0 8
29130: PUSH
29131: LD_EXP 48
29135: PUSH
29136: LD_VAR 0 2
29140: ARRAY
29141: PPUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 30
29147: PUSH
29148: LD_INT 4
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 30
29157: PUSH
29158: LD_INT 5
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: PPUSH
29170: CALL_OW 72
29174: ST_TO_ADDR
// if barracks then
29175: LD_VAR 0 8
29179: IFFALSE 29319
// begin for j in barracks do
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_VAR 0 8
29190: PUSH
29191: FOR_IN
29192: IFFALSE 29223
// begin if UnitsInside ( j ) < 6 then
29194: LD_VAR 0 3
29198: PPUSH
29199: CALL_OW 313
29203: PUSH
29204: LD_INT 6
29206: LESS
29207: IFFALSE 29221
// begin selected := j ;
29209: LD_ADDR_VAR 0 7
29213: PUSH
29214: LD_VAR 0 3
29218: ST_TO_ADDR
// break ;
29219: GO 29223
// end ; end ;
29221: GO 29191
29223: POP
29224: POP
// if selected then
29225: LD_VAR 0 7
29229: IFFALSE 29319
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_EXP 77
29240: PUSH
29241: LD_VAR 0 2
29245: ARRAY
29246: PPUSH
29247: LD_INT 25
29249: PUSH
29250: LD_INT 12
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PPUSH
29257: CALL_OW 72
29261: PUSH
29262: FOR_IN
29263: IFFALSE 29317
// if not IsInUnit ( j ) and not HasTask ( j ) then
29265: LD_VAR 0 3
29269: PPUSH
29270: CALL_OW 310
29274: NOT
29275: PUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: CALL_OW 314
29285: NOT
29286: AND
29287: IFFALSE 29315
// begin ComEnterUnit ( j , selected ) ;
29289: LD_VAR 0 3
29293: PPUSH
29294: LD_VAR 0 7
29298: PPUSH
29299: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
29303: LD_VAR 0 3
29307: PPUSH
29308: LD_INT 15
29310: PPUSH
29311: CALL_OW 183
// end ;
29315: GO 29262
29317: POP
29318: POP
// end ; end ; end ; end ; end ;
29319: GO 28728
29321: POP
29322: POP
// end ;
29323: LD_VAR 0 1
29327: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
29328: LD_INT 0
29330: PPUSH
29331: PPUSH
29332: PPUSH
29333: PPUSH
// if not mc_bases then
29334: LD_EXP 48
29338: NOT
29339: IFFALSE 29343
// exit ;
29341: GO 29521
// for i = 1 to mc_bases do
29343: LD_ADDR_VAR 0 2
29347: PUSH
29348: DOUBLE
29349: LD_INT 1
29351: DEC
29352: ST_TO_ADDR
29353: LD_EXP 48
29357: PUSH
29358: FOR_TO
29359: IFFALSE 29519
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
29361: LD_ADDR_VAR 0 4
29365: PUSH
29366: LD_EXP 48
29370: PUSH
29371: LD_VAR 0 2
29375: ARRAY
29376: PPUSH
29377: LD_INT 25
29379: PUSH
29380: LD_INT 9
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 72
29391: ST_TO_ADDR
// if not tmp then
29392: LD_VAR 0 4
29396: NOT
29397: IFFALSE 29401
// continue ;
29399: GO 29358
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
29401: LD_EXP 74
29405: PUSH
29406: LD_VAR 0 2
29410: ARRAY
29411: PPUSH
29412: LD_INT 29
29414: PPUSH
29415: CALL_OW 325
29419: NOT
29420: PUSH
29421: LD_EXP 74
29425: PUSH
29426: LD_VAR 0 2
29430: ARRAY
29431: PPUSH
29432: LD_INT 28
29434: PPUSH
29435: CALL_OW 325
29439: NOT
29440: AND
29441: IFFALSE 29445
// continue ;
29443: GO 29358
// for j in tmp do
29445: LD_ADDR_VAR 0 3
29449: PUSH
29450: LD_VAR 0 4
29454: PUSH
29455: FOR_IN
29456: IFFALSE 29515
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
29458: LD_VAR 0 3
29462: PUSH
29463: LD_EXP 51
29467: PUSH
29468: LD_VAR 0 2
29472: ARRAY
29473: PUSH
29474: LD_INT 1
29476: ARRAY
29477: IN
29478: NOT
29479: PUSH
29480: LD_VAR 0 3
29484: PUSH
29485: LD_EXP 51
29489: PUSH
29490: LD_VAR 0 2
29494: ARRAY
29495: PUSH
29496: LD_INT 2
29498: ARRAY
29499: IN
29500: NOT
29501: AND
29502: IFFALSE 29513
// ComSpaceTimeShoot ( j ) ;
29504: LD_VAR 0 3
29508: PPUSH
29509: CALL 38526 0 1
29513: GO 29455
29515: POP
29516: POP
// end ;
29517: GO 29358
29519: POP
29520: POP
// end ;
29521: LD_VAR 0 1
29525: RET
// export function MC_TeleportExit ( ) ; var i , j , tmp ; begin
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
29530: PPUSH
29531: PPUSH
// if not mc_bases then
29532: LD_EXP 48
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29563
// for i = 1 to mc_bases do
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: DOUBLE
29547: LD_INT 1
29549: DEC
29550: ST_TO_ADDR
29551: LD_EXP 48
29555: PUSH
29556: FOR_TO
29557: IFFALSE 29561
// begin end ;
29559: GO 29556
29561: POP
29562: POP
// end ;
29563: LD_VAR 0 1
29567: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
29568: LD_INT 0
29570: PPUSH
29571: PPUSH
29572: PPUSH
// if not mc_bases then
29573: LD_EXP 48
29577: NOT
29578: IFFALSE 29582
// exit ;
29580: GO 30142
// for i = 1 to mc_bases do
29582: LD_ADDR_VAR 0 2
29586: PUSH
29587: DOUBLE
29588: LD_INT 1
29590: DEC
29591: ST_TO_ADDR
29592: LD_EXP 48
29596: PUSH
29597: FOR_TO
29598: IFFALSE 30140
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
29600: LD_ADDR_VAR 0 3
29604: PUSH
29605: LD_EXP 48
29609: PUSH
29610: LD_VAR 0 2
29614: ARRAY
29615: PPUSH
29616: LD_INT 25
29618: PUSH
29619: LD_INT 4
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PPUSH
29626: CALL_OW 72
29630: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] then
29631: LD_VAR 0 3
29635: NOT
29636: PUSH
29637: LD_EXP 84
29641: PUSH
29642: LD_VAR 0 2
29646: ARRAY
29647: NOT
29648: OR
29649: IFFALSE 29699
// begin if mc_deposits_finder [ i ] then
29651: LD_EXP 85
29655: PUSH
29656: LD_VAR 0 2
29660: ARRAY
29661: IFFALSE 29697
// begin MC_Reset ( i , 125 ) ;
29663: LD_VAR 0 2
29667: PPUSH
29668: LD_INT 125
29670: PPUSH
29671: CALL 19197 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29675: LD_ADDR_EXP 85
29679: PUSH
29680: LD_EXP 85
29684: PPUSH
29685: LD_VAR 0 2
29689: PPUSH
29690: EMPTY
29691: PPUSH
29692: CALL_OW 1
29696: ST_TO_ADDR
// end ; continue ;
29697: GO 29597
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
29699: LD_EXP 84
29703: PUSH
29704: LD_VAR 0 2
29708: ARRAY
29709: PUSH
29710: LD_INT 1
29712: ARRAY
29713: PUSH
29714: LD_INT 3
29716: ARRAY
29717: PUSH
29718: LD_INT 1
29720: EQUAL
29721: PUSH
29722: LD_INT 20
29724: PPUSH
29725: LD_EXP 74
29729: PUSH
29730: LD_VAR 0 2
29734: ARRAY
29735: PPUSH
29736: CALL_OW 321
29740: PUSH
29741: LD_INT 2
29743: NONEQUAL
29744: AND
29745: IFFALSE 29795
// begin if mc_deposits_finder [ i ] then
29747: LD_EXP 85
29751: PUSH
29752: LD_VAR 0 2
29756: ARRAY
29757: IFFALSE 29793
// begin MC_Reset ( i , 125 ) ;
29759: LD_VAR 0 2
29763: PPUSH
29764: LD_INT 125
29766: PPUSH
29767: CALL 19197 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
29771: LD_ADDR_EXP 85
29775: PUSH
29776: LD_EXP 85
29780: PPUSH
29781: LD_VAR 0 2
29785: PPUSH
29786: EMPTY
29787: PPUSH
29788: CALL_OW 1
29792: ST_TO_ADDR
// end ; continue ;
29793: GO 29597
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
29795: LD_EXP 84
29799: PUSH
29800: LD_VAR 0 2
29804: ARRAY
29805: PUSH
29806: LD_INT 1
29808: ARRAY
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: LD_EXP 84
29818: PUSH
29819: LD_VAR 0 2
29823: ARRAY
29824: PUSH
29825: LD_INT 1
29827: ARRAY
29828: PUSH
29829: LD_INT 2
29831: ARRAY
29832: PPUSH
29833: LD_EXP 74
29837: PUSH
29838: LD_VAR 0 2
29842: ARRAY
29843: PPUSH
29844: CALL_OW 440
29848: IFFALSE 29891
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
29850: LD_ADDR_EXP 84
29854: PUSH
29855: LD_EXP 84
29859: PPUSH
29860: LD_VAR 0 2
29864: PPUSH
29865: LD_EXP 84
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PPUSH
29876: LD_INT 1
29878: PPUSH
29879: CALL_OW 3
29883: PPUSH
29884: CALL_OW 1
29888: ST_TO_ADDR
29889: GO 30138
// begin if not mc_deposits_finder [ i ] then
29891: LD_EXP 85
29895: PUSH
29896: LD_VAR 0 2
29900: ARRAY
29901: NOT
29902: IFFALSE 29954
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
29904: LD_ADDR_EXP 85
29908: PUSH
29909: LD_EXP 85
29913: PPUSH
29914: LD_VAR 0 2
29918: PPUSH
29919: LD_VAR 0 3
29923: PUSH
29924: LD_INT 1
29926: ARRAY
29927: PUSH
29928: EMPTY
29929: LIST
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
29936: LD_VAR 0 3
29940: PUSH
29941: LD_INT 1
29943: ARRAY
29944: PPUSH
29945: LD_INT 125
29947: PPUSH
29948: CALL_OW 109
// end else
29952: GO 30138
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
29954: LD_EXP 85
29958: PUSH
29959: LD_VAR 0 2
29963: ARRAY
29964: PUSH
29965: LD_INT 1
29967: ARRAY
29968: PPUSH
29969: CALL_OW 310
29973: IFFALSE 29996
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
29975: LD_EXP 85
29979: PUSH
29980: LD_VAR 0 2
29984: ARRAY
29985: PUSH
29986: LD_INT 1
29988: ARRAY
29989: PPUSH
29990: CALL_OW 122
29994: GO 30138
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
29996: LD_EXP 85
30000: PUSH
30001: LD_VAR 0 2
30005: ARRAY
30006: PUSH
30007: LD_INT 1
30009: ARRAY
30010: PPUSH
30011: CALL_OW 314
30015: NOT
30016: PUSH
30017: LD_EXP 85
30021: PUSH
30022: LD_VAR 0 2
30026: ARRAY
30027: PUSH
30028: LD_INT 1
30030: ARRAY
30031: PPUSH
30032: LD_EXP 84
30036: PUSH
30037: LD_VAR 0 2
30041: ARRAY
30042: PUSH
30043: LD_INT 1
30045: ARRAY
30046: PUSH
30047: LD_INT 1
30049: ARRAY
30050: PPUSH
30051: LD_EXP 84
30055: PUSH
30056: LD_VAR 0 2
30060: ARRAY
30061: PUSH
30062: LD_INT 1
30064: ARRAY
30065: PUSH
30066: LD_INT 2
30068: ARRAY
30069: PPUSH
30070: CALL_OW 297
30074: PUSH
30075: LD_INT 6
30077: GREATER
30078: AND
30079: IFFALSE 30138
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
30081: LD_EXP 85
30085: PUSH
30086: LD_VAR 0 2
30090: ARRAY
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: LD_EXP 84
30100: PUSH
30101: LD_VAR 0 2
30105: ARRAY
30106: PUSH
30107: LD_INT 1
30109: ARRAY
30110: PUSH
30111: LD_INT 1
30113: ARRAY
30114: PPUSH
30115: LD_EXP 84
30119: PUSH
30120: LD_VAR 0 2
30124: ARRAY
30125: PUSH
30126: LD_INT 1
30128: ARRAY
30129: PUSH
30130: LD_INT 2
30132: ARRAY
30133: PPUSH
30134: CALL_OW 111
// end ; end ; end ;
30138: GO 29597
30140: POP
30141: POP
// end ;
30142: LD_VAR 0 1
30146: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts ; begin
30147: LD_INT 0
30149: PPUSH
30150: PPUSH
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
30157: PPUSH
// if not mc_bases then
30158: LD_EXP 48
30162: NOT
30163: IFFALSE 30167
// exit ;
30165: GO 30665
// for i = 1 to mc_bases do
30167: LD_ADDR_VAR 0 2
30171: PUSH
30172: DOUBLE
30173: LD_INT 1
30175: DEC
30176: ST_TO_ADDR
30177: LD_EXP 48
30181: PUSH
30182: FOR_TO
30183: IFFALSE 30663
// begin if not mc_bases [ i ] then
30185: LD_EXP 48
30189: PUSH
30190: LD_VAR 0 2
30194: ARRAY
30195: NOT
30196: IFFALSE 30200
// continue ;
30198: GO 30182
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
30200: LD_ADDR_VAR 0 7
30204: PUSH
30205: LD_EXP 48
30209: PUSH
30210: LD_VAR 0 2
30214: ARRAY
30215: PUSH
30216: LD_INT 1
30218: ARRAY
30219: PPUSH
30220: CALL_OW 248
30224: ST_TO_ADDR
// if nation <> 1 or not UnitFilter ( ( mc_vehicles [ i ] union mc_defender [ i ] ) , [ f_control , control_remote ] ) then
30225: LD_VAR 0 7
30229: PUSH
30230: LD_INT 1
30232: NONEQUAL
30233: PUSH
30234: LD_EXP 67
30238: PUSH
30239: LD_VAR 0 2
30243: ARRAY
30244: PUSH
30245: LD_EXP 70
30249: PUSH
30250: LD_VAR 0 2
30254: ARRAY
30255: UNION
30256: PPUSH
30257: LD_INT 33
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PPUSH
30267: CALL_OW 72
30271: NOT
30272: OR
30273: IFFALSE 30277
// continue ;
30275: GO 30182
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
30277: LD_ADDR_VAR 0 9
30281: PUSH
30282: LD_EXP 48
30286: PUSH
30287: LD_VAR 0 2
30291: ARRAY
30292: PPUSH
30293: LD_INT 30
30295: PUSH
30296: LD_INT 36
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PPUSH
30303: CALL_OW 72
30307: ST_TO_ADDR
// if not cts then
30308: LD_VAR 0 9
30312: NOT
30313: IFFALSE 30317
// continue ;
30315: GO 30182
// if mc_remote_driver [ i ] then
30317: LD_EXP 87
30321: PUSH
30322: LD_VAR 0 2
30326: ARRAY
30327: IFFALSE 30476
// for j in mc_remote_driver [ i ] do
30329: LD_ADDR_VAR 0 3
30333: PUSH
30334: LD_EXP 87
30338: PUSH
30339: LD_VAR 0 2
30343: ARRAY
30344: PUSH
30345: FOR_IN
30346: IFFALSE 30474
// if not IsInUnit ( j ) or GetBType ( IsInUnit ( j ) ) <> b_control_tower then
30348: LD_VAR 0 3
30352: PPUSH
30353: CALL_OW 310
30357: NOT
30358: PUSH
30359: LD_VAR 0 3
30363: PPUSH
30364: CALL_OW 310
30368: PPUSH
30369: CALL_OW 266
30373: PUSH
30374: LD_INT 36
30376: NONEQUAL
30377: OR
30378: IFFALSE 30472
// begin if IsInUnit ( j ) then
30380: LD_VAR 0 3
30384: PPUSH
30385: CALL_OW 310
30389: IFFALSE 30400
// ComExitBuilding ( j ) ;
30391: LD_VAR 0 3
30395: PPUSH
30396: CALL_OW 122
// ct := 0 ;
30400: LD_ADDR_VAR 0 8
30404: PUSH
30405: LD_INT 0
30407: ST_TO_ADDR
// for k in cts do
30408: LD_ADDR_VAR 0 4
30412: PUSH
30413: LD_VAR 0 9
30417: PUSH
30418: FOR_IN
30419: IFFALSE 30450
// if UnitsInside ( k ) < 3 then
30421: LD_VAR 0 4
30425: PPUSH
30426: CALL_OW 313
30430: PUSH
30431: LD_INT 3
30433: LESS
30434: IFFALSE 30448
// begin ct := k ;
30436: LD_ADDR_VAR 0 8
30440: PUSH
30441: LD_VAR 0 4
30445: ST_TO_ADDR
// break ;
30446: GO 30450
// end ;
30448: GO 30418
30450: POP
30451: POP
// if ct then
30452: LD_VAR 0 8
30456: IFFALSE 30472
// AddComEnterUnit ( j , ct ) ;
30458: LD_VAR 0 3
30462: PPUSH
30463: LD_VAR 0 8
30467: PPUSH
30468: CALL_OW 180
// end ;
30472: GO 30345
30474: POP
30475: POP
// places := 0 ;
30476: LD_ADDR_VAR 0 5
30480: PUSH
30481: LD_INT 0
30483: ST_TO_ADDR
// for j = 1 to cts do
30484: LD_ADDR_VAR 0 3
30488: PUSH
30489: DOUBLE
30490: LD_INT 1
30492: DEC
30493: ST_TO_ADDR
30494: LD_VAR 0 9
30498: PUSH
30499: FOR_TO
30500: IFFALSE 30518
// places := places + 3 ;
30502: LD_ADDR_VAR 0 5
30506: PUSH
30507: LD_VAR 0 5
30511: PUSH
30512: LD_INT 3
30514: PLUS
30515: ST_TO_ADDR
30516: GO 30499
30518: POP
30519: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] ;
30520: LD_ADDR_VAR 0 6
30524: PUSH
30525: LD_EXP 48
30529: PUSH
30530: LD_VAR 0 2
30534: ARRAY
30535: PPUSH
30536: LD_INT 25
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PPUSH
30546: CALL_OW 72
30550: PUSH
30551: LD_EXP 87
30555: PUSH
30556: LD_VAR 0 2
30560: ARRAY
30561: DIFF
30562: ST_TO_ADDR
// if not tmp then
30563: LD_VAR 0 6
30567: NOT
30568: IFFALSE 30572
// continue ;
30570: GO 30182
// places := places - ( mc_remote_driver [ i ] + 1 ) ;
30572: LD_ADDR_VAR 0 5
30576: PUSH
30577: LD_VAR 0 5
30581: PUSH
30582: LD_EXP 87
30586: PUSH
30587: LD_VAR 0 2
30591: ARRAY
30592: PUSH
30593: LD_INT 1
30595: PLUS
30596: MINUS
30597: ST_TO_ADDR
// if places then
30598: LD_VAR 0 5
30602: IFFALSE 30661
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
30604: LD_ADDR_EXP 87
30608: PUSH
30609: LD_EXP 87
30613: PPUSH
30614: LD_VAR 0 2
30618: PPUSH
30619: LD_EXP 87
30623: PUSH
30624: LD_VAR 0 2
30628: ARRAY
30629: PUSH
30630: LD_VAR 0 6
30634: PUSH
30635: LD_INT 1
30637: ARRAY
30638: UNION
30639: PPUSH
30640: CALL_OW 1
30644: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
30645: LD_VAR 0 6
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: PPUSH
30654: LD_INT 126
30656: PPUSH
30657: CALL_OW 109
// end ; end ;
30661: GO 30182
30663: POP
30664: POP
// end ;
30665: LD_VAR 0 1
30669: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
30670: LD_INT 0
30672: PPUSH
30673: PPUSH
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
30678: LD_VAR 0 1
30682: NOT
30683: PUSH
30684: LD_VAR 0 2
30688: NOT
30689: OR
30690: PUSH
30691: LD_VAR 0 3
30695: NOT
30696: OR
30697: PUSH
30698: LD_VAR 0 4
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 3
30711: PUSH
30712: LD_INT 4
30714: PUSH
30715: LD_INT 5
30717: PUSH
30718: LD_INT 8
30720: PUSH
30721: LD_INT 9
30723: PUSH
30724: LD_INT 15
30726: PUSH
30727: LD_INT 16
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: IN
30741: NOT
30742: OR
30743: IFFALSE 30747
// exit ;
30745: GO 31647
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
30747: LD_ADDR_VAR 0 2
30751: PUSH
30752: LD_VAR 0 2
30756: PPUSH
30757: LD_INT 21
30759: PUSH
30760: LD_INT 3
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 24
30769: PUSH
30770: LD_INT 250
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PPUSH
30781: CALL_OW 72
30785: ST_TO_ADDR
// case class of 1 , 15 :
30786: LD_VAR 0 4
30790: PUSH
30791: LD_INT 1
30793: DOUBLE
30794: EQUAL
30795: IFTRUE 30805
30797: LD_INT 15
30799: DOUBLE
30800: EQUAL
30801: IFTRUE 30805
30803: GO 30890
30805: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
30806: LD_ADDR_VAR 0 8
30810: PUSH
30811: LD_VAR 0 2
30815: PPUSH
30816: LD_INT 2
30818: PUSH
30819: LD_INT 30
30821: PUSH
30822: LD_INT 32
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 30
30831: PUSH
30832: LD_INT 31
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: PPUSH
30844: CALL_OW 72
30848: PUSH
30849: LD_VAR 0 2
30853: PPUSH
30854: LD_INT 2
30856: PUSH
30857: LD_INT 30
30859: PUSH
30860: LD_INT 4
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 30
30869: PUSH
30870: LD_INT 5
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: PPUSH
30882: CALL_OW 72
30886: ADD
30887: ST_TO_ADDR
30888: GO 31136
30890: LD_INT 2
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30904
30896: LD_INT 16
30898: DOUBLE
30899: EQUAL
30900: IFTRUE 30904
30902: GO 30950
30904: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
30905: LD_ADDR_VAR 0 8
30909: PUSH
30910: LD_VAR 0 2
30914: PPUSH
30915: LD_INT 2
30917: PUSH
30918: LD_INT 30
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 30
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: PPUSH
30943: CALL_OW 72
30947: ST_TO_ADDR
30948: GO 31136
30950: LD_INT 3
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 31004
30958: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
30959: LD_ADDR_VAR 0 8
30963: PUSH
30964: LD_VAR 0 2
30968: PPUSH
30969: LD_INT 2
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 30
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: PPUSH
30997: CALL_OW 72
31001: ST_TO_ADDR
31002: GO 31136
31004: LD_INT 4
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31069
31012: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
31013: LD_ADDR_VAR 0 8
31017: PUSH
31018: LD_VAR 0 2
31022: PPUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: LD_INT 6
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 30
31038: PUSH
31039: LD_INT 7
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 30
31048: PUSH
31049: LD_INT 8
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: PPUSH
31062: CALL_OW 72
31066: ST_TO_ADDR
31067: GO 31136
31069: LD_INT 5
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31089
31075: LD_INT 8
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31089
31081: LD_INT 9
31083: DOUBLE
31084: EQUAL
31085: IFTRUE 31089
31087: GO 31135
31089: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
31090: LD_ADDR_VAR 0 8
31094: PUSH
31095: LD_VAR 0 2
31099: PPUSH
31100: LD_INT 2
31102: PUSH
31103: LD_INT 30
31105: PUSH
31106: LD_INT 4
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 30
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: PPUSH
31128: CALL_OW 72
31132: ST_TO_ADDR
31133: GO 31136
31135: POP
// if not tmp then
31136: LD_VAR 0 8
31140: NOT
31141: IFFALSE 31145
// exit ;
31143: GO 31647
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
31145: LD_VAR 0 4
31149: PUSH
31150: LD_INT 1
31152: PUSH
31153: LD_INT 15
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: IN
31160: PUSH
31161: LD_EXP 57
31165: PUSH
31166: LD_VAR 0 1
31170: ARRAY
31171: AND
31172: IFFALSE 31328
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
31174: LD_ADDR_VAR 0 9
31178: PUSH
31179: LD_EXP 57
31183: PUSH
31184: LD_VAR 0 1
31188: ARRAY
31189: PUSH
31190: LD_INT 1
31192: ARRAY
31193: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
31194: LD_VAR 0 9
31198: PUSH
31199: LD_EXP 58
31203: PUSH
31204: LD_VAR 0 1
31208: ARRAY
31209: IN
31210: NOT
31211: IFFALSE 31326
// begin mc_busy_turret_list := Add ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
31213: LD_ADDR_EXP 58
31217: PUSH
31218: LD_EXP 58
31222: PPUSH
31223: LD_VAR 0 1
31227: PUSH
31228: LD_EXP 58
31232: PUSH
31233: LD_VAR 0 1
31237: ARRAY
31238: PUSH
31239: LD_INT 1
31241: PLUS
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PPUSH
31247: LD_VAR 0 9
31251: PPUSH
31252: CALL 44364 0 3
31256: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
31257: LD_ADDR_EXP 57
31261: PUSH
31262: LD_EXP 57
31266: PPUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: LD_EXP 57
31276: PUSH
31277: LD_VAR 0 1
31281: ARRAY
31282: PUSH
31283: LD_VAR 0 9
31287: DIFF
31288: PPUSH
31289: CALL_OW 1
31293: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
31294: LD_VAR 0 3
31298: PPUSH
31299: LD_EXP 58
31303: PUSH
31304: LD_VAR 0 1
31308: ARRAY
31309: PUSH
31310: LD_EXP 58
31314: PUSH
31315: LD_VAR 0 1
31319: ARRAY
31320: ARRAY
31321: PPUSH
31322: CALL_OW 120
// end ; exit ;
31326: GO 31647
// end ; if tmp > 1 then
31328: LD_VAR 0 8
31332: PUSH
31333: LD_INT 1
31335: GREATER
31336: IFFALSE 31440
// for i = 2 to tmp do
31338: LD_ADDR_VAR 0 6
31342: PUSH
31343: DOUBLE
31344: LD_INT 2
31346: DEC
31347: ST_TO_ADDR
31348: LD_VAR 0 8
31352: PUSH
31353: FOR_TO
31354: IFFALSE 31438
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
31356: LD_VAR 0 8
31360: PUSH
31361: LD_VAR 0 6
31365: ARRAY
31366: PPUSH
31367: CALL_OW 461
31371: PUSH
31372: LD_INT 6
31374: EQUAL
31375: IFFALSE 31436
// begin x := tmp [ i ] ;
31377: LD_ADDR_VAR 0 9
31381: PUSH
31382: LD_VAR 0 8
31386: PUSH
31387: LD_VAR 0 6
31391: ARRAY
31392: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
31393: LD_ADDR_VAR 0 8
31397: PUSH
31398: LD_VAR 0 8
31402: PPUSH
31403: LD_VAR 0 6
31407: PPUSH
31408: CALL_OW 3
31412: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
31413: LD_ADDR_VAR 0 8
31417: PUSH
31418: LD_VAR 0 8
31422: PPUSH
31423: LD_INT 1
31425: PPUSH
31426: LD_VAR 0 9
31430: PPUSH
31431: CALL_OW 2
31435: ST_TO_ADDR
// end ;
31436: GO 31353
31438: POP
31439: POP
// for i in tmp do
31440: LD_ADDR_VAR 0 6
31444: PUSH
31445: LD_VAR 0 8
31449: PUSH
31450: FOR_IN
31451: IFFALSE 31520
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
31453: LD_VAR 0 6
31457: PPUSH
31458: CALL_OW 313
31462: PUSH
31463: LD_INT 6
31465: LESS
31466: PUSH
31467: LD_VAR 0 6
31471: PPUSH
31472: CALL_OW 266
31476: PUSH
31477: LD_INT 31
31479: PUSH
31480: LD_INT 32
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: IN
31487: NOT
31488: AND
31489: PUSH
31490: LD_VAR 0 6
31494: PPUSH
31495: CALL_OW 313
31499: PUSH
31500: LD_INT 0
31502: EQUAL
31503: OR
31504: IFFALSE 31518
// begin j := i ;
31506: LD_ADDR_VAR 0 7
31510: PUSH
31511: LD_VAR 0 6
31515: ST_TO_ADDR
// break ;
31516: GO 31520
// end ; end ;
31518: GO 31450
31520: POP
31521: POP
// if j then
31522: LD_VAR 0 7
31526: IFFALSE 31544
// ComEnterUnit ( unit , j ) else
31528: LD_VAR 0 3
31532: PPUSH
31533: LD_VAR 0 7
31537: PPUSH
31538: CALL_OW 120
31542: GO 31647
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31544: LD_ADDR_VAR 0 10
31548: PUSH
31549: LD_VAR 0 2
31553: PPUSH
31554: LD_INT 2
31556: PUSH
31557: LD_INT 30
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 30
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: PPUSH
31582: CALL_OW 72
31586: ST_TO_ADDR
// if depot then
31587: LD_VAR 0 10
31591: IFFALSE 31647
// begin depot := NearestUnitToUnit ( depot , unit ) ;
31593: LD_ADDR_VAR 0 10
31597: PUSH
31598: LD_VAR 0 10
31602: PPUSH
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 74
31612: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
31613: LD_VAR 0 3
31617: PPUSH
31618: LD_VAR 0 10
31622: PPUSH
31623: CALL_OW 296
31627: PUSH
31628: LD_INT 10
31630: GREATER
31631: IFFALSE 31647
// ComStandNearbyBuilding ( unit , depot ) ;
31633: LD_VAR 0 3
31637: PPUSH
31638: LD_VAR 0 10
31642: PPUSH
31643: CALL 39143 0 2
// end ; end ; end ;
31647: LD_VAR 0 5
31651: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
31652: LD_INT 0
31654: PPUSH
31655: PPUSH
31656: PPUSH
31657: PPUSH
// if not mc_bases then
31658: LD_EXP 48
31662: NOT
31663: IFFALSE 31667
// exit ;
31665: GO 31906
// for i = 1 to mc_bases do
31667: LD_ADDR_VAR 0 2
31671: PUSH
31672: DOUBLE
31673: LD_INT 1
31675: DEC
31676: ST_TO_ADDR
31677: LD_EXP 48
31681: PUSH
31682: FOR_TO
31683: IFFALSE 31904
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
31685: LD_ADDR_VAR 0 4
31689: PUSH
31690: LD_EXP 48
31694: PUSH
31695: LD_VAR 0 2
31699: ARRAY
31700: PPUSH
31701: LD_INT 21
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PPUSH
31711: CALL_OW 72
31715: PUSH
31716: LD_EXP 77
31720: PUSH
31721: LD_VAR 0 2
31725: ARRAY
31726: UNION
31727: ST_TO_ADDR
// if not tmp then
31728: LD_VAR 0 4
31732: NOT
31733: IFFALSE 31737
// continue ;
31735: GO 31682
// for j in tmp do
31737: LD_ADDR_VAR 0 3
31741: PUSH
31742: LD_VAR 0 4
31746: PUSH
31747: FOR_IN
31748: IFFALSE 31900
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
31750: LD_VAR 0 3
31754: PPUSH
31755: CALL_OW 110
31759: NOT
31760: PUSH
31761: LD_VAR 0 3
31765: PPUSH
31766: CALL_OW 314
31770: NOT
31771: AND
31772: PUSH
31773: LD_VAR 0 3
31777: PPUSH
31778: CALL_OW 311
31782: NOT
31783: AND
31784: PUSH
31785: LD_VAR 0 3
31789: PPUSH
31790: CALL_OW 310
31794: NOT
31795: AND
31796: PUSH
31797: LD_VAR 0 3
31801: PUSH
31802: LD_EXP 51
31806: PUSH
31807: LD_VAR 0 2
31811: ARRAY
31812: PUSH
31813: LD_INT 1
31815: ARRAY
31816: IN
31817: NOT
31818: AND
31819: PUSH
31820: LD_VAR 0 3
31824: PUSH
31825: LD_EXP 51
31829: PUSH
31830: LD_VAR 0 2
31834: ARRAY
31835: PUSH
31836: LD_INT 2
31838: ARRAY
31839: IN
31840: NOT
31841: AND
31842: PUSH
31843: LD_VAR 0 3
31847: PUSH
31848: LD_EXP 60
31852: PUSH
31853: LD_VAR 0 2
31857: ARRAY
31858: IN
31859: NOT
31860: AND
31861: IFFALSE 31898
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
31863: LD_VAR 0 2
31867: PPUSH
31868: LD_EXP 48
31872: PUSH
31873: LD_VAR 0 2
31877: ARRAY
31878: PPUSH
31879: LD_VAR 0 3
31883: PPUSH
31884: LD_VAR 0 3
31888: PPUSH
31889: CALL_OW 257
31893: PPUSH
31894: CALL 30670 0 4
// end ;
31898: GO 31747
31900: POP
31901: POP
// end ;
31902: GO 31682
31904: POP
31905: POP
// end ;
31906: LD_VAR 0 1
31910: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
31911: LD_INT 0
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
// if not mc_bases [ base ] then
31919: LD_EXP 48
31923: PUSH
31924: LD_VAR 0 1
31928: ARRAY
31929: NOT
31930: IFFALSE 31934
// exit ;
31932: GO 32116
// tmp := [ ] ;
31934: LD_ADDR_VAR 0 6
31938: PUSH
31939: EMPTY
31940: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
31941: LD_ADDR_VAR 0 7
31945: PUSH
31946: LD_VAR 0 3
31950: PPUSH
31951: LD_INT 0
31953: PPUSH
31954: CALL_OW 517
31958: ST_TO_ADDR
// if not list then
31959: LD_VAR 0 7
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 32116
// for i = 1 to amount do
31968: LD_ADDR_VAR 0 5
31972: PUSH
31973: DOUBLE
31974: LD_INT 1
31976: DEC
31977: ST_TO_ADDR
31978: LD_VAR 0 2
31982: PUSH
31983: FOR_TO
31984: IFFALSE 32064
// begin x := rand ( 1 , list [ 1 ] ) ;
31986: LD_ADDR_VAR 0 8
31990: PUSH
31991: LD_INT 1
31993: PPUSH
31994: LD_VAR 0 7
31998: PUSH
31999: LD_INT 1
32001: ARRAY
32002: PPUSH
32003: CALL_OW 12
32007: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
32008: LD_ADDR_VAR 0 6
32012: PUSH
32013: LD_VAR 0 6
32017: PPUSH
32018: LD_VAR 0 5
32022: PPUSH
32023: LD_VAR 0 7
32027: PUSH
32028: LD_INT 1
32030: ARRAY
32031: PUSH
32032: LD_VAR 0 8
32036: ARRAY
32037: PUSH
32038: LD_VAR 0 7
32042: PUSH
32043: LD_INT 2
32045: ARRAY
32046: PUSH
32047: LD_VAR 0 8
32051: ARRAY
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PPUSH
32057: CALL_OW 1
32061: ST_TO_ADDR
// end ;
32062: GO 31983
32064: POP
32065: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
32066: LD_ADDR_EXP 61
32070: PUSH
32071: LD_EXP 61
32075: PPUSH
32076: LD_VAR 0 1
32080: PPUSH
32081: LD_VAR 0 6
32085: PPUSH
32086: CALL_OW 1
32090: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
32091: LD_ADDR_EXP 63
32095: PUSH
32096: LD_EXP 63
32100: PPUSH
32101: LD_VAR 0 1
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: CALL_OW 1
32115: ST_TO_ADDR
// end ;
32116: LD_VAR 0 4
32120: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
32121: LD_INT 0
32123: PPUSH
// if not mc_bases [ base ] then
32124: LD_EXP 48
32128: PUSH
32129: LD_VAR 0 1
32133: ARRAY
32134: NOT
32135: IFFALSE 32139
// exit ;
32137: GO 32164
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
32139: LD_ADDR_EXP 53
32143: PUSH
32144: LD_EXP 53
32148: PPUSH
32149: LD_VAR 0 1
32153: PPUSH
32154: LD_VAR 0 2
32158: PPUSH
32159: CALL_OW 1
32163: ST_TO_ADDR
// end ;
32164: LD_VAR 0 3
32168: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
32169: LD_INT 0
32171: PPUSH
// if not mc_bases [ base ] then
32172: LD_EXP 48
32176: PUSH
32177: LD_VAR 0 1
32181: ARRAY
32182: NOT
32183: IFFALSE 32187
// exit ;
32185: GO 32243
// mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , list ) ) ;
32187: LD_ADDR_EXP 53
32191: PUSH
32192: LD_EXP 53
32196: PPUSH
32197: LD_VAR 0 1
32201: PPUSH
32202: LD_EXP 53
32206: PUSH
32207: LD_VAR 0 1
32211: ARRAY
32212: PPUSH
32213: LD_EXP 53
32217: PUSH
32218: LD_VAR 0 1
32222: ARRAY
32223: PUSH
32224: LD_INT 1
32226: PLUS
32227: PPUSH
32228: LD_VAR 0 2
32232: PPUSH
32233: CALL_OW 2
32237: PPUSH
32238: CALL_OW 1
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 3
32247: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
32248: LD_INT 0
32250: PPUSH
// if not mc_bases [ base ] then
32251: LD_EXP 48
32255: PUSH
32256: LD_VAR 0 1
32260: ARRAY
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32291
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
32266: LD_ADDR_EXP 69
32270: PUSH
32271: LD_EXP 69
32275: PPUSH
32276: LD_VAR 0 1
32280: PPUSH
32281: LD_VAR 0 2
32285: PPUSH
32286: CALL_OW 1
32290: ST_TO_ADDR
// end ;
32291: LD_VAR 0 3
32295: RET
// export function MC_InsertProduceList ( base , compontents ) ; begin
32296: LD_INT 0
32298: PPUSH
// if not mc_bases [ base ] then
32299: LD_EXP 48
32303: PUSH
32304: LD_VAR 0 1
32308: ARRAY
32309: NOT
32310: IFFALSE 32314
// exit ;
32312: GO 32354
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ [ compontents ] ) ;
32314: LD_ADDR_EXP 69
32318: PUSH
32319: LD_EXP 69
32323: PPUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: LD_EXP 69
32333: PUSH
32334: LD_VAR 0 1
32338: ARRAY
32339: PUSH
32340: LD_VAR 0 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: ADD
32348: PPUSH
32349: CALL_OW 1
32353: ST_TO_ADDR
// end ;
32354: LD_VAR 0 3
32358: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
32359: LD_INT 0
32361: PPUSH
// if not mc_bases [ base ] then
32362: LD_EXP 48
32366: PUSH
32367: LD_VAR 0 1
32371: ARRAY
32372: NOT
32373: IFFALSE 32377
// exit ;
32375: GO 32489
// mc_defender := Replace ( mc_defender , base , deflist ) ;
32377: LD_ADDR_EXP 70
32381: PUSH
32382: LD_EXP 70
32386: PPUSH
32387: LD_VAR 0 1
32391: PPUSH
32392: LD_VAR 0 2
32396: PPUSH
32397: CALL_OW 1
32401: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
32402: LD_ADDR_EXP 59
32406: PUSH
32407: LD_EXP 59
32411: PPUSH
32412: LD_VAR 0 1
32416: PPUSH
32417: LD_VAR 0 2
32421: PUSH
32422: LD_INT 0
32424: PLUS
32425: PPUSH
32426: CALL_OW 1
32430: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] union UnitFilter ( mc_defender [ base ] , [ f_type , unit_vehicle ] ) ) ;
32431: LD_ADDR_EXP 67
32435: PUSH
32436: LD_EXP 67
32440: PPUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: LD_EXP 67
32450: PUSH
32451: LD_VAR 0 1
32455: ARRAY
32456: PUSH
32457: LD_EXP 70
32461: PUSH
32462: LD_VAR 0 1
32466: ARRAY
32467: PPUSH
32468: LD_INT 21
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PPUSH
32478: CALL_OW 72
32482: UNION
32483: PPUSH
32484: CALL_OW 1
32488: ST_TO_ADDR
// end ;
32489: LD_VAR 0 3
32493: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
32494: LD_INT 0
32496: PPUSH
// if not mc_bases [ base ] then
32497: LD_EXP 48
32501: PUSH
32502: LD_VAR 0 1
32506: ARRAY
32507: NOT
32508: IFFALSE 32512
// exit ;
32510: GO 32537
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
32512: LD_ADDR_EXP 59
32516: PUSH
32517: LD_EXP 59
32521: PPUSH
32522: LD_VAR 0 1
32526: PPUSH
32527: LD_VAR 0 2
32531: PPUSH
32532: CALL_OW 1
32536: ST_TO_ADDR
// end ;
32537: LD_VAR 0 3
32541: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
32542: LD_INT 0
32544: PPUSH
32545: PPUSH
32546: PPUSH
32547: PPUSH
// if not mc_bases [ base ] then
32548: LD_EXP 48
32552: PUSH
32553: LD_VAR 0 1
32557: ARRAY
32558: NOT
32559: IFFALSE 32563
// exit ;
32561: GO 32628
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
32563: LD_ADDR_EXP 68
32567: PUSH
32568: LD_EXP 68
32572: PPUSH
32573: LD_VAR 0 1
32577: PUSH
32578: LD_EXP 68
32582: PUSH
32583: LD_VAR 0 1
32587: ARRAY
32588: PUSH
32589: LD_INT 1
32591: PLUS
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PPUSH
32597: LD_VAR 0 1
32601: PUSH
32602: LD_VAR 0 2
32606: PUSH
32607: LD_VAR 0 3
32611: PUSH
32612: LD_VAR 0 4
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: PPUSH
32623: CALL 44364 0 3
32627: ST_TO_ADDR
// end ;
32628: LD_VAR 0 5
32632: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
32633: LD_INT 0
32635: PPUSH
// if not mc_bases [ base ] then
32636: LD_EXP 48
32640: PUSH
32641: LD_VAR 0 1
32645: ARRAY
32646: NOT
32647: IFFALSE 32651
// exit ;
32649: GO 32676
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
32651: LD_ADDR_EXP 84
32655: PUSH
32656: LD_EXP 84
32660: PPUSH
32661: LD_VAR 0 1
32665: PPUSH
32666: LD_VAR 0 2
32670: PPUSH
32671: CALL_OW 1
32675: ST_TO_ADDR
// end ;
32676: LD_VAR 0 3
32680: RET
// export function MC_GetMinesField ( base ) ; begin
32681: LD_INT 0
32683: PPUSH
// result := mc_mines [ base ] ;
32684: LD_ADDR_VAR 0 2
32688: PUSH
32689: LD_EXP 61
32693: PUSH
32694: LD_VAR 0 1
32698: ARRAY
32699: ST_TO_ADDR
// end ;
32700: LD_VAR 0 2
32704: RET
// export function MC_GetProduceList ( base ) ; begin
32705: LD_INT 0
32707: PPUSH
// result := mc_produce [ base ] ;
32708: LD_ADDR_VAR 0 2
32712: PUSH
32713: LD_EXP 69
32717: PUSH
32718: LD_VAR 0 1
32722: ARRAY
32723: ST_TO_ADDR
// end ;
32724: LD_VAR 0 2
32728: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
32729: LD_INT 0
32731: PPUSH
32732: PPUSH
// if not mc_bases then
32733: LD_EXP 48
32737: NOT
32738: IFFALSE 32742
// exit ;
32740: GO 32807
// if mc_bases [ base ] then
32742: LD_EXP 48
32746: PUSH
32747: LD_VAR 0 1
32751: ARRAY
32752: IFFALSE 32807
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32754: LD_ADDR_VAR 0 3
32758: PUSH
32759: LD_EXP 48
32763: PUSH
32764: LD_VAR 0 1
32768: ARRAY
32769: PPUSH
32770: LD_INT 30
32772: PUSH
32773: LD_VAR 0 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PPUSH
32782: CALL_OW 72
32786: ST_TO_ADDR
// if result then
32787: LD_VAR 0 3
32791: IFFALSE 32807
// result := result [ 1 ] ;
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_VAR 0 3
32802: PUSH
32803: LD_INT 1
32805: ARRAY
32806: ST_TO_ADDR
// end ; end ;
32807: LD_VAR 0 3
32811: RET
// export function MC_SetTame ( base , area ) ; begin
32812: LD_INT 0
32814: PPUSH
// if not mc_bases or not base then
32815: LD_EXP 48
32819: NOT
32820: PUSH
32821: LD_VAR 0 1
32825: NOT
32826: OR
32827: IFFALSE 32831
// exit ;
32829: GO 32856
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
32831: LD_ADDR_EXP 76
32835: PUSH
32836: LD_EXP 76
32840: PPUSH
32841: LD_VAR 0 1
32845: PPUSH
32846: LD_VAR 0 2
32850: PPUSH
32851: CALL_OW 1
32855: ST_TO_ADDR
// end ;
32856: LD_VAR 0 3
32860: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
32861: LD_INT 0
32863: PPUSH
32864: PPUSH
// if not mc_bases or not base then
32865: LD_EXP 48
32869: NOT
32870: PUSH
32871: LD_VAR 0 1
32875: NOT
32876: OR
32877: IFFALSE 32881
// exit ;
32879: GO 32983
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: LD_EXP 48
32890: PUSH
32891: LD_VAR 0 1
32895: ARRAY
32896: PPUSH
32897: LD_INT 30
32899: PUSH
32900: LD_VAR 0 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PPUSH
32909: CALL_OW 72
32913: ST_TO_ADDR
// if not tmp then
32914: LD_VAR 0 4
32918: NOT
32919: IFFALSE 32923
// exit ;
32921: GO 32983
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
32923: LD_ADDR_EXP 80
32927: PUSH
32928: LD_EXP 80
32932: PPUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: LD_EXP 80
32942: PUSH
32943: LD_VAR 0 1
32947: ARRAY
32948: PPUSH
32949: LD_EXP 80
32953: PUSH
32954: LD_VAR 0 1
32958: ARRAY
32959: PUSH
32960: LD_INT 1
32962: PLUS
32963: PPUSH
32964: LD_VAR 0 4
32968: PUSH
32969: LD_INT 1
32971: ARRAY
32972: PPUSH
32973: CALL_OW 2
32977: PPUSH
32978: CALL_OW 1
32982: ST_TO_ADDR
// end ;
32983: LD_VAR 0 3
32987: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
32988: LD_INT 0
32990: PPUSH
32991: PPUSH
// if not mc_bases or not base or not kinds then
32992: LD_EXP 48
32996: NOT
32997: PUSH
32998: LD_VAR 0 1
33002: NOT
33003: OR
33004: PUSH
33005: LD_VAR 0 2
33009: NOT
33010: OR
33011: IFFALSE 33015
// exit ;
33013: GO 33076
// for i in kinds do
33015: LD_ADDR_VAR 0 4
33019: PUSH
33020: LD_VAR 0 2
33024: PUSH
33025: FOR_IN
33026: IFFALSE 33074
// mc_lab_upgrade := Add ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
33028: LD_ADDR_EXP 82
33032: PUSH
33033: LD_EXP 82
33037: PPUSH
33038: LD_VAR 0 1
33042: PUSH
33043: LD_EXP 82
33047: PUSH
33048: LD_VAR 0 1
33052: ARRAY
33053: PUSH
33054: LD_INT 1
33056: PLUS
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PPUSH
33062: LD_VAR 0 4
33066: PPUSH
33067: CALL 44364 0 3
33071: ST_TO_ADDR
33072: GO 33025
33074: POP
33075: POP
// end ;
33076: LD_VAR 0 3
33080: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
33081: LD_INT 0
33083: PPUSH
// if not mc_bases or not base or not areas then
33084: LD_EXP 48
33088: NOT
33089: PUSH
33090: LD_VAR 0 1
33094: NOT
33095: OR
33096: PUSH
33097: LD_VAR 0 2
33101: NOT
33102: OR
33103: IFFALSE 33107
// exit ;
33105: GO 33132
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
33107: LD_ADDR_EXP 66
33111: PUSH
33112: LD_EXP 66
33116: PPUSH
33117: LD_VAR 0 1
33121: PPUSH
33122: LD_VAR 0 2
33126: PPUSH
33127: CALL_OW 1
33131: ST_TO_ADDR
// end ;
33132: LD_VAR 0 3
33136: RET
// export function MC_SetTeleportExit ( base , x , y ) ; begin
33137: LD_INT 0
33139: PPUSH
// if not mc_bases or not base then
33140: LD_EXP 48
33144: NOT
33145: PUSH
33146: LD_VAR 0 1
33150: NOT
33151: OR
33152: IFFALSE 33156
// exit ;
33154: GO 33190
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ x , y ] ) ;
33156: LD_ADDR_EXP 83
33160: PUSH
33161: LD_EXP 83
33165: PPUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: LD_VAR 0 2
33175: PUSH
33176: LD_VAR 0 3
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PPUSH
33185: CALL_OW 1
33189: ST_TO_ADDR
// end ;
33190: LD_VAR 0 4
33194: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
33195: LD_INT 0
33197: PPUSH
33198: PPUSH
33199: PPUSH
// if not mc_bases or not base or not ext_list then
33200: LD_EXP 48
33204: NOT
33205: PUSH
33206: LD_VAR 0 1
33210: NOT
33211: OR
33212: PUSH
33213: LD_VAR 0 5
33217: NOT
33218: OR
33219: IFFALSE 33223
// exit ;
33221: GO 33396
// tmp := GetFacExtXYD ( x , y , d ) ;
33223: LD_ADDR_VAR 0 8
33227: PUSH
33228: LD_VAR 0 2
33232: PPUSH
33233: LD_VAR 0 3
33237: PPUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: CALL 75444 0 3
33247: ST_TO_ADDR
// if not tmp then
33248: LD_VAR 0 8
33252: NOT
33253: IFFALSE 33257
// exit ;
33255: GO 33396
// for i in tmp do
33257: LD_ADDR_VAR 0 7
33261: PUSH
33262: LD_VAR 0 8
33266: PUSH
33267: FOR_IN
33268: IFFALSE 33394
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
33270: LD_ADDR_EXP 53
33274: PUSH
33275: LD_EXP 53
33279: PPUSH
33280: LD_VAR 0 1
33284: PPUSH
33285: LD_EXP 53
33289: PUSH
33290: LD_VAR 0 1
33294: ARRAY
33295: PPUSH
33296: LD_EXP 53
33300: PUSH
33301: LD_VAR 0 1
33305: ARRAY
33306: PUSH
33307: LD_INT 1
33309: PLUS
33310: PPUSH
33311: LD_VAR 0 5
33315: PUSH
33316: LD_INT 1
33318: ARRAY
33319: PUSH
33320: LD_VAR 0 7
33324: PUSH
33325: LD_INT 1
33327: ARRAY
33328: PUSH
33329: LD_VAR 0 7
33333: PUSH
33334: LD_INT 2
33336: ARRAY
33337: PUSH
33338: LD_VAR 0 7
33342: PUSH
33343: LD_INT 3
33345: ARRAY
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: PPUSH
33353: CALL_OW 2
33357: PPUSH
33358: CALL_OW 1
33362: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
33363: LD_ADDR_VAR 0 5
33367: PUSH
33368: LD_VAR 0 5
33372: PPUSH
33373: LD_INT 1
33375: PPUSH
33376: CALL_OW 3
33380: ST_TO_ADDR
// if not ext_list then
33381: LD_VAR 0 5
33385: NOT
33386: IFFALSE 33392
// exit ;
33388: POP
33389: POP
33390: GO 33396
// end ;
33392: GO 33267
33394: POP
33395: POP
// end ;
33396: LD_VAR 0 6
33400: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
33401: LD_INT 0
33403: PPUSH
// if not mc_bases or not base or not weapon_list then
33404: LD_EXP 48
33408: NOT
33409: PUSH
33410: LD_VAR 0 1
33414: NOT
33415: OR
33416: PUSH
33417: LD_VAR 0 2
33421: NOT
33422: OR
33423: IFFALSE 33427
// exit ;
33425: GO 33452
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
33427: LD_ADDR_EXP 86
33431: PUSH
33432: LD_EXP 86
33436: PPUSH
33437: LD_VAR 0 1
33441: PPUSH
33442: LD_VAR 0 2
33446: PPUSH
33447: CALL_OW 1
33451: ST_TO_ADDR
// end ;
33452: LD_VAR 0 3
33456: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
33457: LD_INT 0
33459: PPUSH
// if not mc_bases or not base or not tech_list then
33460: LD_EXP 48
33464: NOT
33465: PUSH
33466: LD_VAR 0 1
33470: NOT
33471: OR
33472: PUSH
33473: LD_VAR 0 2
33477: NOT
33478: OR
33479: IFFALSE 33483
// exit ;
33481: GO 33508
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
33483: LD_ADDR_EXP 75
33487: PUSH
33488: LD_EXP 75
33492: PPUSH
33493: LD_VAR 0 1
33497: PPUSH
33498: LD_VAR 0 2
33502: PPUSH
33503: CALL_OW 1
33507: ST_TO_ADDR
// end ;
33508: LD_VAR 0 3
33512: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
33513: LD_INT 0
33515: PPUSH
// if not mc_bases or not parking_area or not base then
33516: LD_EXP 48
33520: NOT
33521: PUSH
33522: LD_VAR 0 2
33526: NOT
33527: OR
33528: PUSH
33529: LD_VAR 0 1
33533: NOT
33534: OR
33535: IFFALSE 33539
// exit ;
33537: GO 33564
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
33539: LD_ADDR_EXP 72
33543: PUSH
33544: LD_EXP 72
33548: PPUSH
33549: LD_VAR 0 1
33553: PPUSH
33554: LD_VAR 0 2
33558: PPUSH
33559: CALL_OW 1
33563: ST_TO_ADDR
// end ;
33564: LD_VAR 0 3
33568: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
33569: LD_INT 0
33571: PPUSH
// if not mc_bases or not base or not scan_area then
33572: LD_EXP 48
33576: NOT
33577: PUSH
33578: LD_VAR 0 1
33582: NOT
33583: OR
33584: PUSH
33585: LD_VAR 0 2
33589: NOT
33590: OR
33591: IFFALSE 33595
// exit ;
33593: GO 33620
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
33595: LD_ADDR_EXP 73
33599: PUSH
33600: LD_EXP 73
33604: PPUSH
33605: LD_VAR 0 1
33609: PPUSH
33610: LD_VAR 0 2
33614: PPUSH
33615: CALL_OW 1
33619: ST_TO_ADDR
// end ; end_of_file
33620: LD_VAR 0 3
33624: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
33625: LD_INT 0
33627: PPUSH
33628: PPUSH
33629: PPUSH
// if not mc_bases then
33630: LD_EXP 48
33634: NOT
33635: IFFALSE 33639
// exit ;
33637: GO 33804
// for i = 1 to mc_bases do
33639: LD_ADDR_VAR 0 4
33643: PUSH
33644: DOUBLE
33645: LD_INT 1
33647: DEC
33648: ST_TO_ADDR
33649: LD_EXP 48
33653: PUSH
33654: FOR_TO
33655: IFFALSE 33802
// begin if sci in mc_bases [ i ] then
33657: LD_VAR 0 2
33661: PUSH
33662: LD_EXP 48
33666: PUSH
33667: LD_VAR 0 4
33671: ARRAY
33672: IN
33673: IFFALSE 33800
// begin mc_ape := Add ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
33675: LD_ADDR_EXP 77
33679: PUSH
33680: LD_EXP 77
33684: PPUSH
33685: LD_VAR 0 4
33689: PUSH
33690: LD_EXP 77
33694: PUSH
33695: LD_VAR 0 4
33699: ARRAY
33700: PUSH
33701: LD_INT 1
33703: PLUS
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PPUSH
33709: LD_VAR 0 1
33713: PPUSH
33714: CALL 44364 0 3
33718: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
33719: LD_ADDR_VAR 0 5
33723: PUSH
33724: LD_EXP 48
33728: PUSH
33729: LD_VAR 0 4
33733: ARRAY
33734: PPUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 30
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 30
33750: PUSH
33751: LD_INT 1
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 72
33767: PPUSH
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 74
33777: ST_TO_ADDR
// if tmp then
33778: LD_VAR 0 5
33782: IFFALSE 33798
// ComStandNearbyBuilding ( ape , tmp ) ;
33784: LD_VAR 0 1
33788: PPUSH
33789: LD_VAR 0 5
33793: PPUSH
33794: CALL 39143 0 2
// break ;
33798: GO 33802
// end ; end ;
33800: GO 33654
33802: POP
33803: POP
// end ;
33804: LD_VAR 0 3
33808: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
33809: LD_INT 0
33811: PPUSH
33812: PPUSH
33813: PPUSH
// if not mc_bases then
33814: LD_EXP 48
33818: NOT
33819: IFFALSE 33823
// exit ;
33821: GO 33912
// for i = 1 to mc_bases do
33823: LD_ADDR_VAR 0 4
33827: PUSH
33828: DOUBLE
33829: LD_INT 1
33831: DEC
33832: ST_TO_ADDR
33833: LD_EXP 48
33837: PUSH
33838: FOR_TO
33839: IFFALSE 33910
// begin if building in mc_busy_turret_list [ i ] then
33841: LD_VAR 0 1
33845: PUSH
33846: LD_EXP 58
33850: PUSH
33851: LD_VAR 0 4
33855: ARRAY
33856: IN
33857: IFFALSE 33908
// begin tmp := mc_busy_turret_list [ i ] diff building ;
33859: LD_ADDR_VAR 0 5
33863: PUSH
33864: LD_EXP 58
33868: PUSH
33869: LD_VAR 0 4
33873: ARRAY
33874: PUSH
33875: LD_VAR 0 1
33879: DIFF
33880: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
33881: LD_ADDR_EXP 58
33885: PUSH
33886: LD_EXP 58
33890: PPUSH
33891: LD_VAR 0 4
33895: PPUSH
33896: LD_VAR 0 5
33900: PPUSH
33901: CALL_OW 1
33905: ST_TO_ADDR
// break ;
33906: GO 33910
// end ; end ;
33908: GO 33838
33910: POP
33911: POP
// end ;
33912: LD_VAR 0 3
33916: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
33917: LD_INT 0
33919: PPUSH
33920: PPUSH
33921: PPUSH
// if not mc_bases then
33922: LD_EXP 48
33926: NOT
33927: IFFALSE 33931
// exit ;
33929: GO 34130
// for i = 1 to mc_bases do
33931: LD_ADDR_VAR 0 5
33935: PUSH
33936: DOUBLE
33937: LD_INT 1
33939: DEC
33940: ST_TO_ADDR
33941: LD_EXP 48
33945: PUSH
33946: FOR_TO
33947: IFFALSE 34128
// if building in mc_bases [ i ] then
33949: LD_VAR 0 1
33953: PUSH
33954: LD_EXP 48
33958: PUSH
33959: LD_VAR 0 5
33963: ARRAY
33964: IN
33965: IFFALSE 34126
// begin tmp := mc_bases [ i ] diff building ;
33967: LD_ADDR_VAR 0 6
33971: PUSH
33972: LD_EXP 48
33976: PUSH
33977: LD_VAR 0 5
33981: ARRAY
33982: PUSH
33983: LD_VAR 0 1
33987: DIFF
33988: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
33989: LD_ADDR_EXP 48
33993: PUSH
33994: LD_EXP 48
33998: PPUSH
33999: LD_VAR 0 5
34003: PPUSH
34004: LD_VAR 0 6
34008: PPUSH
34009: CALL_OW 1
34013: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
34014: LD_VAR 0 1
34018: PUSH
34019: LD_EXP 56
34023: PUSH
34024: LD_VAR 0 5
34028: ARRAY
34029: IN
34030: IFFALSE 34069
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
34032: LD_ADDR_EXP 56
34036: PUSH
34037: LD_EXP 56
34041: PPUSH
34042: LD_VAR 0 5
34046: PPUSH
34047: LD_EXP 56
34051: PUSH
34052: LD_VAR 0 5
34056: ARRAY
34057: PUSH
34058: LD_VAR 0 1
34062: DIFF
34063: PPUSH
34064: CALL_OW 1
34068: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
34069: LD_VAR 0 1
34073: PUSH
34074: LD_EXP 57
34078: PUSH
34079: LD_VAR 0 5
34083: ARRAY
34084: IN
34085: IFFALSE 34124
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
34087: LD_ADDR_EXP 57
34091: PUSH
34092: LD_EXP 57
34096: PPUSH
34097: LD_VAR 0 5
34101: PPUSH
34102: LD_EXP 57
34106: PUSH
34107: LD_VAR 0 5
34111: ARRAY
34112: PUSH
34113: LD_VAR 0 1
34117: DIFF
34118: PPUSH
34119: CALL_OW 1
34123: ST_TO_ADDR
// break ;
34124: GO 34128
// end ;
34126: GO 33946
34128: POP
34129: POP
// end ;
34130: LD_VAR 0 4
34134: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
34135: LD_INT 0
34137: PPUSH
34138: PPUSH
34139: PPUSH
// if not mc_bases or not side in mc_sides then
34140: LD_EXP 48
34144: NOT
34145: PUSH
34146: LD_VAR 0 3
34150: PUSH
34151: LD_EXP 74
34155: IN
34156: NOT
34157: OR
34158: IFFALSE 34162
// exit ;
34160: GO 34285
// for i = 1 to mc_vehicles do
34162: LD_ADDR_VAR 0 6
34166: PUSH
34167: DOUBLE
34168: LD_INT 1
34170: DEC
34171: ST_TO_ADDR
34172: LD_EXP 67
34176: PUSH
34177: FOR_TO
34178: IFFALSE 34283
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
34180: LD_VAR 0 2
34184: PUSH
34185: LD_EXP 67
34189: PUSH
34190: LD_VAR 0 6
34194: ARRAY
34195: IN
34196: PUSH
34197: LD_VAR 0 1
34201: PUSH
34202: LD_EXP 67
34206: PUSH
34207: LD_VAR 0 6
34211: ARRAY
34212: IN
34213: OR
34214: IFFALSE 34281
// begin tmp := mc_vehicles [ i ] diff old ;
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: LD_EXP 67
34225: PUSH
34226: LD_VAR 0 6
34230: ARRAY
34231: PUSH
34232: LD_VAR 0 2
34236: DIFF
34237: ST_TO_ADDR
// tmp := tmp diff new ;
34238: LD_ADDR_VAR 0 7
34242: PUSH
34243: LD_VAR 0 7
34247: PUSH
34248: LD_VAR 0 1
34252: DIFF
34253: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
34254: LD_ADDR_EXP 67
34258: PUSH
34259: LD_EXP 67
34263: PPUSH
34264: LD_VAR 0 6
34268: PPUSH
34269: LD_VAR 0 7
34273: PPUSH
34274: CALL_OW 1
34278: ST_TO_ADDR
// break ;
34279: GO 34283
// end ;
34281: GO 34177
34283: POP
34284: POP
// end ;
34285: LD_VAR 0 5
34289: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
34290: LD_INT 0
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
// if not mc_bases then
34296: LD_EXP 48
34300: NOT
34301: IFFALSE 34305
// exit ;
34303: GO 34597
// side := GetSide ( vehicle ) ;
34305: LD_ADDR_VAR 0 5
34309: PUSH
34310: LD_VAR 0 1
34314: PPUSH
34315: CALL_OW 255
34319: ST_TO_ADDR
// for i = 1 to mc_bases do
34320: LD_ADDR_VAR 0 4
34324: PUSH
34325: DOUBLE
34326: LD_INT 1
34328: DEC
34329: ST_TO_ADDR
34330: LD_EXP 48
34334: PUSH
34335: FOR_TO
34336: IFFALSE 34595
// begin if factory in mc_bases [ i ] then
34338: LD_VAR 0 2
34342: PUSH
34343: LD_EXP 48
34347: PUSH
34348: LD_VAR 0 4
34352: ARRAY
34353: IN
34354: IFFALSE 34593
// begin if mc_defender [ i ] < mc_defender_limit [ i ] then
34356: LD_EXP 70
34360: PUSH
34361: LD_VAR 0 4
34365: ARRAY
34366: PUSH
34367: LD_EXP 59
34371: PUSH
34372: LD_VAR 0 4
34376: ARRAY
34377: LESS
34378: IFFALSE 34549
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) ;
34380: LD_ADDR_EXP 70
34384: PUSH
34385: LD_EXP 70
34389: PPUSH
34390: LD_VAR 0 4
34394: PPUSH
34395: LD_EXP 70
34399: PUSH
34400: LD_VAR 0 4
34404: ARRAY
34405: PUSH
34406: LD_VAR 0 1
34410: ADD
34411: PPUSH
34412: CALL_OW 1
34416: ST_TO_ADDR
// if not mc_scan [ i ] then
34417: LD_EXP 71
34421: PUSH
34422: LD_VAR 0 4
34426: ARRAY
34427: NOT
34428: IFFALSE 34547
// begin if GetControl ( vehicle ) = control_remote then
34430: LD_VAR 0 1
34434: PPUSH
34435: CALL_OW 263
34439: PUSH
34440: LD_INT 2
34442: EQUAL
34443: IFFALSE 34463
// repeat wait ( 0 0$1 ) ;
34445: LD_INT 35
34447: PPUSH
34448: CALL_OW 67
// until IsControledBy ( vehicle ) ;
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL_OW 312
34461: IFFALSE 34445
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
34463: LD_VAR 0 1
34467: PPUSH
34468: LD_EXP 72
34472: PUSH
34473: LD_VAR 0 4
34477: ARRAY
34478: PPUSH
34479: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
34483: LD_VAR 0 1
34487: PPUSH
34488: CALL_OW 263
34492: PUSH
34493: LD_INT 1
34495: NONEQUAL
34496: IFFALSE 34500
// break ;
34498: GO 34595
// repeat wait ( 0 0$1 ) ;
34500: LD_INT 35
34502: PPUSH
34503: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
34507: LD_VAR 0 1
34511: PPUSH
34512: LD_EXP 72
34516: PUSH
34517: LD_VAR 0 4
34521: ARRAY
34522: PPUSH
34523: CALL_OW 308
34527: IFFALSE 34500
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL_OW 311
34538: PPUSH
34539: CALL_OW 121
// exit ;
34543: POP
34544: POP
34545: GO 34597
// end ; end else
34547: GO 34593
// mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
34549: LD_ADDR_EXP 67
34553: PUSH
34554: LD_EXP 67
34558: PPUSH
34559: LD_VAR 0 4
34563: PUSH
34564: LD_EXP 67
34568: PUSH
34569: LD_VAR 0 4
34573: ARRAY
34574: PUSH
34575: LD_INT 1
34577: PLUS
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PPUSH
34583: LD_VAR 0 1
34587: PPUSH
34588: CALL 44364 0 3
34592: ST_TO_ADDR
// end ; end ;
34593: GO 34335
34595: POP
34596: POP
// end ;
34597: LD_VAR 0 3
34601: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
34602: LD_INT 0
34604: PPUSH
34605: PPUSH
34606: PPUSH
34607: PPUSH
// if not mc_bases then
34608: LD_EXP 48
34612: NOT
34613: IFFALSE 34617
// exit ;
34615: GO 34970
// repeat wait ( 0 0$1 ) ;
34617: LD_INT 35
34619: PPUSH
34620: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
34624: LD_VAR 0 2
34628: PPUSH
34629: LD_VAR 0 3
34633: PPUSH
34634: CALL_OW 284
34638: IFFALSE 34617
// if GetResourceTypeXY ( x , y ) = mat_artefact then
34640: LD_VAR 0 2
34644: PPUSH
34645: LD_VAR 0 3
34649: PPUSH
34650: CALL_OW 283
34654: PUSH
34655: LD_INT 4
34657: EQUAL
34658: IFFALSE 34662
// exit ;
34660: GO 34970
// for i = 1 to mc_bases do
34662: LD_ADDR_VAR 0 7
34666: PUSH
34667: DOUBLE
34668: LD_INT 1
34670: DEC
34671: ST_TO_ADDR
34672: LD_EXP 48
34676: PUSH
34677: FOR_TO
34678: IFFALSE 34968
// begin if mc_crates_area [ i ] then
34680: LD_EXP 66
34684: PUSH
34685: LD_VAR 0 7
34689: ARRAY
34690: IFFALSE 34801
// for j in mc_crates_area [ i ] do
34692: LD_ADDR_VAR 0 8
34696: PUSH
34697: LD_EXP 66
34701: PUSH
34702: LD_VAR 0 7
34706: ARRAY
34707: PUSH
34708: FOR_IN
34709: IFFALSE 34799
// if InArea ( x , y , j ) then
34711: LD_VAR 0 2
34715: PPUSH
34716: LD_VAR 0 3
34720: PPUSH
34721: LD_VAR 0 8
34725: PPUSH
34726: CALL_OW 309
34730: IFFALSE 34797
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34732: LD_ADDR_EXP 64
34736: PUSH
34737: LD_EXP 64
34741: PPUSH
34742: LD_VAR 0 7
34746: PUSH
34747: LD_EXP 64
34751: PUSH
34752: LD_VAR 0 7
34756: ARRAY
34757: PUSH
34758: LD_INT 1
34760: PLUS
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PPUSH
34766: LD_VAR 0 4
34770: PUSH
34771: LD_VAR 0 2
34775: PUSH
34776: LD_VAR 0 3
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: PPUSH
34786: CALL 44364 0 3
34790: ST_TO_ADDR
// exit ;
34791: POP
34792: POP
34793: POP
34794: POP
34795: GO 34970
// end ;
34797: GO 34708
34799: POP
34800: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34801: LD_ADDR_VAR 0 9
34805: PUSH
34806: LD_EXP 48
34810: PUSH
34811: LD_VAR 0 7
34815: ARRAY
34816: PPUSH
34817: LD_INT 2
34819: PUSH
34820: LD_INT 30
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 30
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: PPUSH
34845: CALL_OW 72
34849: ST_TO_ADDR
// if not depot then
34850: LD_VAR 0 9
34854: NOT
34855: IFFALSE 34859
// continue ;
34857: GO 34677
// for j in depot do
34859: LD_ADDR_VAR 0 8
34863: PUSH
34864: LD_VAR 0 9
34868: PUSH
34869: FOR_IN
34870: IFFALSE 34964
// if GetDistUnitXY ( j , x , y ) < 30 then
34872: LD_VAR 0 8
34876: PPUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_VAR 0 3
34886: PPUSH
34887: CALL_OW 297
34891: PUSH
34892: LD_INT 30
34894: LESS
34895: IFFALSE 34962
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
34897: LD_ADDR_EXP 64
34901: PUSH
34902: LD_EXP 64
34906: PPUSH
34907: LD_VAR 0 7
34911: PUSH
34912: LD_EXP 64
34916: PUSH
34917: LD_VAR 0 7
34921: ARRAY
34922: PUSH
34923: LD_INT 1
34925: PLUS
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PPUSH
34931: LD_VAR 0 4
34935: PUSH
34936: LD_VAR 0 2
34940: PUSH
34941: LD_VAR 0 3
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: PPUSH
34951: CALL 44364 0 3
34955: ST_TO_ADDR
// exit ;
34956: POP
34957: POP
34958: POP
34959: POP
34960: GO 34970
// end ;
34962: GO 34869
34964: POP
34965: POP
// end ;
34966: GO 34677
34968: POP
34969: POP
// end ;
34970: LD_VAR 0 6
34974: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
34975: LD_INT 0
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
// side := GetSide ( lab ) ;
34981: LD_ADDR_VAR 0 4
34985: PUSH
34986: LD_VAR 0 2
34990: PPUSH
34991: CALL_OW 255
34995: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
34996: LD_VAR 0 4
35000: PUSH
35001: LD_EXP 74
35005: IN
35006: NOT
35007: PUSH
35008: LD_EXP 75
35012: NOT
35013: OR
35014: PUSH
35015: LD_EXP 48
35019: NOT
35020: OR
35021: IFFALSE 35025
// exit ;
35023: GO 35258
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
35025: LD_ADDR_EXP 75
35029: PUSH
35030: LD_EXP 75
35034: PPUSH
35035: LD_VAR 0 4
35039: PPUSH
35040: LD_EXP 75
35044: PUSH
35045: LD_VAR 0 4
35049: ARRAY
35050: PUSH
35051: LD_VAR 0 1
35055: DIFF
35056: PPUSH
35057: CALL_OW 1
35061: ST_TO_ADDR
// for i = 1 to mc_bases do
35062: LD_ADDR_VAR 0 5
35066: PUSH
35067: DOUBLE
35068: LD_INT 1
35070: DEC
35071: ST_TO_ADDR
35072: LD_EXP 48
35076: PUSH
35077: FOR_TO
35078: IFFALSE 35256
// begin if lab in mc_bases [ i ] then
35080: LD_VAR 0 2
35084: PUSH
35085: LD_EXP 48
35089: PUSH
35090: LD_VAR 0 5
35094: ARRAY
35095: IN
35096: IFFALSE 35254
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
35098: LD_VAR 0 1
35102: PUSH
35103: LD_INT 11
35105: PUSH
35106: LD_INT 4
35108: PUSH
35109: LD_INT 3
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: IN
35121: PUSH
35122: LD_EXP 78
35126: PUSH
35127: LD_VAR 0 5
35131: ARRAY
35132: AND
35133: IFFALSE 35254
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
35135: LD_ADDR_VAR 0 6
35139: PUSH
35140: LD_EXP 78
35144: PUSH
35145: LD_VAR 0 5
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: ARRAY
35154: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35155: LD_ADDR_EXP 78
35159: PUSH
35160: LD_EXP 78
35164: PPUSH
35165: LD_VAR 0 5
35169: PPUSH
35170: EMPTY
35171: PPUSH
35172: CALL_OW 1
35176: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
35177: LD_VAR 0 6
35181: PPUSH
35182: LD_INT 0
35184: PPUSH
35185: CALL_OW 109
// ComExitBuilding ( tmp ) ;
35189: LD_VAR 0 6
35193: PPUSH
35194: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
35198: LD_ADDR_EXP 77
35202: PUSH
35203: LD_EXP 77
35207: PPUSH
35208: LD_VAR 0 5
35212: PPUSH
35213: LD_EXP 77
35217: PUSH
35218: LD_VAR 0 5
35222: ARRAY
35223: PPUSH
35224: LD_INT 1
35226: PPUSH
35227: LD_VAR 0 6
35231: PPUSH
35232: CALL_OW 2
35236: PPUSH
35237: CALL_OW 1
35241: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
35242: LD_VAR 0 5
35246: PPUSH
35247: LD_INT 112
35249: PPUSH
35250: CALL 19197 0 2
// end ; end ; end ;
35254: GO 35077
35256: POP
35257: POP
// end ;
35258: LD_VAR 0 3
35262: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
35263: LD_INT 0
35265: PPUSH
35266: PPUSH
35267: PPUSH
35268: PPUSH
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
// if not mc_bases then
35273: LD_EXP 48
35277: NOT
35278: IFFALSE 35282
// exit ;
35280: GO 36207
// for i = 1 to mc_bases do
35282: LD_ADDR_VAR 0 3
35286: PUSH
35287: DOUBLE
35288: LD_INT 1
35290: DEC
35291: ST_TO_ADDR
35292: LD_EXP 48
35296: PUSH
35297: FOR_TO
35298: IFFALSE 36205
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
35300: LD_VAR 0 1
35304: PUSH
35305: LD_EXP 48
35309: PUSH
35310: LD_VAR 0 3
35314: ARRAY
35315: IN
35316: PUSH
35317: LD_VAR 0 1
35321: PUSH
35322: LD_EXP 55
35326: PUSH
35327: LD_VAR 0 3
35331: ARRAY
35332: IN
35333: OR
35334: PUSH
35335: LD_VAR 0 1
35339: PUSH
35340: LD_EXP 67
35344: PUSH
35345: LD_VAR 0 3
35349: ARRAY
35350: IN
35351: OR
35352: PUSH
35353: LD_VAR 0 1
35357: PUSH
35358: LD_EXP 77
35362: PUSH
35363: LD_VAR 0 3
35367: ARRAY
35368: IN
35369: OR
35370: PUSH
35371: LD_VAR 0 1
35375: PUSH
35376: LD_EXP 78
35380: PUSH
35381: LD_VAR 0 3
35385: ARRAY
35386: IN
35387: OR
35388: IFFALSE 36203
// begin if un in mc_ape [ i ] then
35390: LD_VAR 0 1
35394: PUSH
35395: LD_EXP 77
35399: PUSH
35400: LD_VAR 0 3
35404: ARRAY
35405: IN
35406: IFFALSE 35445
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
35408: LD_ADDR_EXP 77
35412: PUSH
35413: LD_EXP 77
35417: PPUSH
35418: LD_VAR 0 3
35422: PPUSH
35423: LD_EXP 77
35427: PUSH
35428: LD_VAR 0 3
35432: ARRAY
35433: PUSH
35434: LD_VAR 0 1
35438: DIFF
35439: PPUSH
35440: CALL_OW 1
35444: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
35445: LD_VAR 0 1
35449: PUSH
35450: LD_EXP 78
35454: PUSH
35455: LD_VAR 0 3
35459: ARRAY
35460: IN
35461: IFFALSE 35485
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
35463: LD_ADDR_EXP 78
35467: PUSH
35468: LD_EXP 78
35472: PPUSH
35473: LD_VAR 0 3
35477: PPUSH
35478: EMPTY
35479: PPUSH
35480: CALL_OW 1
35484: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and GetTag ( un ) = 20 then
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 247
35494: PUSH
35495: LD_INT 2
35497: EQUAL
35498: PUSH
35499: LD_VAR 0 1
35503: PPUSH
35504: CALL_OW 110
35508: PUSH
35509: LD_INT 20
35511: EQUAL
35512: AND
35513: IFFALSE 35616
// begin fac := MC_GetBuilding ( i , b_factory ) ;
35515: LD_ADDR_VAR 0 8
35519: PUSH
35520: LD_VAR 0 3
35524: PPUSH
35525: LD_INT 3
35527: PPUSH
35528: CALL 32729 0 2
35532: ST_TO_ADDR
// if fac then
35533: LD_VAR 0 8
35537: IFFALSE 35616
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 8
35548: PPUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 265
35558: PPUSH
35559: LD_VAR 0 1
35563: PPUSH
35564: CALL_OW 262
35568: PPUSH
35569: LD_VAR 0 1
35573: PPUSH
35574: CALL_OW 263
35578: PPUSH
35579: LD_VAR 0 1
35583: PPUSH
35584: CALL_OW 264
35588: PPUSH
35589: CALL 41529 0 5
35593: ST_TO_ADDR
// if components then
35594: LD_VAR 0 9
35598: IFFALSE 35614
// MC_InsertProduceList ( i , components ) ;
35600: LD_VAR 0 3
35604: PPUSH
35605: LD_VAR 0 9
35609: PPUSH
35610: CALL 32296 0 2
// break ;
35614: GO 36205
// end ; end ; if GetType ( un ) = unit_building then
35616: LD_VAR 0 1
35620: PPUSH
35621: CALL_OW 247
35625: PUSH
35626: LD_INT 3
35628: EQUAL
35629: IFFALSE 35926
// begin btype := GetBType ( un ) ;
35631: LD_ADDR_VAR 0 5
35635: PUSH
35636: LD_VAR 0 1
35640: PPUSH
35641: CALL_OW 266
35645: ST_TO_ADDR
// if btype = b_warehouse then
35646: LD_VAR 0 5
35650: PUSH
35651: LD_INT 1
35653: EQUAL
35654: IFFALSE 35672
// begin btype := b_depot ;
35656: LD_ADDR_VAR 0 5
35660: PUSH
35661: LD_INT 0
35663: ST_TO_ADDR
// pos := 1 ;
35664: LD_ADDR_VAR 0 6
35668: PUSH
35669: LD_INT 1
35671: ST_TO_ADDR
// end ; if btype = b_factory then
35672: LD_VAR 0 5
35676: PUSH
35677: LD_INT 3
35679: EQUAL
35680: IFFALSE 35698
// begin btype := b_workshop ;
35682: LD_ADDR_VAR 0 5
35686: PUSH
35687: LD_INT 2
35689: ST_TO_ADDR
// pos := 1 ;
35690: LD_ADDR_VAR 0 6
35694: PUSH
35695: LD_INT 1
35697: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
35698: LD_VAR 0 5
35702: PUSH
35703: LD_INT 7
35705: PUSH
35706: LD_INT 8
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: IN
35713: IFFALSE 35723
// btype := b_lab ;
35715: LD_ADDR_VAR 0 5
35719: PUSH
35720: LD_INT 6
35722: ST_TO_ADDR
// mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
35723: LD_ADDR_EXP 53
35727: PUSH
35728: LD_EXP 53
35732: PPUSH
35733: LD_VAR 0 3
35737: PUSH
35738: LD_EXP 53
35742: PUSH
35743: LD_VAR 0 3
35747: ARRAY
35748: PUSH
35749: LD_INT 1
35751: PLUS
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PPUSH
35757: LD_VAR 0 5
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: CALL_OW 250
35771: PUSH
35772: LD_VAR 0 1
35776: PPUSH
35777: CALL_OW 251
35781: PUSH
35782: LD_VAR 0 1
35786: PPUSH
35787: CALL_OW 254
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: PPUSH
35798: CALL 44364 0 3
35802: ST_TO_ADDR
// if pos = 1 then
35803: LD_VAR 0 6
35807: PUSH
35808: LD_INT 1
35810: EQUAL
35811: IFFALSE 35926
// begin tmp := mc_build_list [ i ] ;
35813: LD_ADDR_VAR 0 7
35817: PUSH
35818: LD_EXP 53
35822: PUSH
35823: LD_VAR 0 3
35827: ARRAY
35828: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
35829: LD_VAR 0 7
35833: PPUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 30
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 30
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: PPUSH
35862: CALL_OW 72
35866: IFFALSE 35876
// pos := 2 ;
35868: LD_ADDR_VAR 0 6
35872: PUSH
35873: LD_INT 2
35875: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
35876: LD_ADDR_VAR 0 7
35880: PUSH
35881: LD_VAR 0 7
35885: PPUSH
35886: LD_VAR 0 6
35890: PPUSH
35891: LD_VAR 0 7
35895: PPUSH
35896: CALL 44255 0 3
35900: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
35901: LD_ADDR_EXP 53
35905: PUSH
35906: LD_EXP 53
35910: PPUSH
35911: LD_VAR 0 3
35915: PPUSH
35916: LD_VAR 0 7
35920: PPUSH
35921: CALL_OW 1
35925: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
35926: LD_VAR 0 1
35930: PUSH
35931: LD_EXP 48
35935: PUSH
35936: LD_VAR 0 3
35940: ARRAY
35941: IN
35942: IFFALSE 35981
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
35944: LD_ADDR_EXP 48
35948: PUSH
35949: LD_EXP 48
35953: PPUSH
35954: LD_VAR 0 3
35958: PPUSH
35959: LD_EXP 48
35963: PUSH
35964: LD_VAR 0 3
35968: ARRAY
35969: PUSH
35970: LD_VAR 0 1
35974: DIFF
35975: PPUSH
35976: CALL_OW 1
35980: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
35981: LD_VAR 0 1
35985: PUSH
35986: LD_EXP 55
35990: PUSH
35991: LD_VAR 0 3
35995: ARRAY
35996: IN
35997: IFFALSE 36036
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
35999: LD_ADDR_EXP 55
36003: PUSH
36004: LD_EXP 55
36008: PPUSH
36009: LD_VAR 0 3
36013: PPUSH
36014: LD_EXP 55
36018: PUSH
36019: LD_VAR 0 3
36023: ARRAY
36024: PUSH
36025: LD_VAR 0 1
36029: DIFF
36030: PPUSH
36031: CALL_OW 1
36035: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
36036: LD_VAR 0 1
36040: PUSH
36041: LD_EXP 67
36045: PUSH
36046: LD_VAR 0 3
36050: ARRAY
36051: IN
36052: IFFALSE 36091
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
36054: LD_ADDR_EXP 67
36058: PUSH
36059: LD_EXP 67
36063: PPUSH
36064: LD_VAR 0 3
36068: PPUSH
36069: LD_EXP 67
36073: PUSH
36074: LD_VAR 0 3
36078: ARRAY
36079: PUSH
36080: LD_VAR 0 1
36084: DIFF
36085: PPUSH
36086: CALL_OW 1
36090: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
36091: LD_VAR 0 1
36095: PUSH
36096: LD_EXP 57
36100: PUSH
36101: LD_VAR 0 3
36105: ARRAY
36106: IN
36107: IFFALSE 36146
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
36109: LD_ADDR_EXP 57
36113: PUSH
36114: LD_EXP 57
36118: PPUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: LD_EXP 57
36128: PUSH
36129: LD_VAR 0 3
36133: ARRAY
36134: PUSH
36135: LD_VAR 0 1
36139: DIFF
36140: PPUSH
36141: CALL_OW 1
36145: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
36146: LD_VAR 0 1
36150: PUSH
36151: LD_EXP 56
36155: PUSH
36156: LD_VAR 0 3
36160: ARRAY
36161: IN
36162: IFFALSE 36201
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
36164: LD_ADDR_EXP 56
36168: PUSH
36169: LD_EXP 56
36173: PPUSH
36174: LD_VAR 0 3
36178: PPUSH
36179: LD_EXP 56
36183: PUSH
36184: LD_VAR 0 3
36188: ARRAY
36189: PUSH
36190: LD_VAR 0 1
36194: DIFF
36195: PPUSH
36196: CALL_OW 1
36200: ST_TO_ADDR
// end ; break ;
36201: GO 36205
// end ;
36203: GO 35297
36205: POP
36206: POP
// end ;
36207: LD_VAR 0 2
36211: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
36212: LD_INT 0
36214: PPUSH
36215: PPUSH
36216: PPUSH
// if not mc_bases then
36217: LD_EXP 48
36221: NOT
36222: IFFALSE 36226
// exit ;
36224: GO 36441
// for i = 1 to mc_bases do
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: DOUBLE
36232: LD_INT 1
36234: DEC
36235: ST_TO_ADDR
36236: LD_EXP 48
36240: PUSH
36241: FOR_TO
36242: IFFALSE 36439
// begin if building in mc_construct_list [ i ] then
36244: LD_VAR 0 1
36248: PUSH
36249: LD_EXP 55
36253: PUSH
36254: LD_VAR 0 3
36258: ARRAY
36259: IN
36260: IFFALSE 36437
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36262: LD_ADDR_EXP 55
36266: PUSH
36267: LD_EXP 55
36271: PPUSH
36272: LD_VAR 0 3
36276: PPUSH
36277: LD_EXP 55
36281: PUSH
36282: LD_VAR 0 3
36286: ARRAY
36287: PUSH
36288: LD_VAR 0 1
36292: DIFF
36293: PPUSH
36294: CALL_OW 1
36298: ST_TO_ADDR
// if building in mc_lab [ i ] then
36299: LD_VAR 0 1
36303: PUSH
36304: LD_EXP 81
36308: PUSH
36309: LD_VAR 0 3
36313: ARRAY
36314: IN
36315: IFFALSE 36370
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
36317: LD_ADDR_EXP 82
36321: PUSH
36322: LD_EXP 82
36326: PPUSH
36327: LD_VAR 0 3
36331: PPUSH
36332: LD_EXP 82
36336: PUSH
36337: LD_VAR 0 3
36341: ARRAY
36342: PPUSH
36343: LD_INT 1
36345: PPUSH
36346: LD_EXP 82
36350: PUSH
36351: LD_VAR 0 3
36355: ARRAY
36356: PPUSH
36357: LD_INT 0
36359: PPUSH
36360: CALL 43347 0 4
36364: PPUSH
36365: CALL_OW 1
36369: ST_TO_ADDR
// if not building in mc_bases [ i ] then
36370: LD_VAR 0 1
36374: PUSH
36375: LD_EXP 48
36379: PUSH
36380: LD_VAR 0 3
36384: ARRAY
36385: IN
36386: NOT
36387: IFFALSE 36433
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36389: LD_ADDR_EXP 48
36393: PUSH
36394: LD_EXP 48
36398: PPUSH
36399: LD_VAR 0 3
36403: PUSH
36404: LD_EXP 48
36408: PUSH
36409: LD_VAR 0 3
36413: ARRAY
36414: PUSH
36415: LD_INT 1
36417: PLUS
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PPUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: CALL 44364 0 3
36432: ST_TO_ADDR
// exit ;
36433: POP
36434: POP
36435: GO 36441
// end ; end ;
36437: GO 36241
36439: POP
36440: POP
// end ;
36441: LD_VAR 0 2
36445: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
36446: LD_INT 0
36448: PPUSH
36449: PPUSH
36450: PPUSH
36451: PPUSH
36452: PPUSH
36453: PPUSH
36454: PPUSH
// if not mc_bases then
36455: LD_EXP 48
36459: NOT
36460: IFFALSE 36464
// exit ;
36462: GO 37125
// for i = 1 to mc_bases do
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: DOUBLE
36470: LD_INT 1
36472: DEC
36473: ST_TO_ADDR
36474: LD_EXP 48
36478: PUSH
36479: FOR_TO
36480: IFFALSE 37123
// begin if building in mc_construct_list [ i ] then
36482: LD_VAR 0 1
36486: PUSH
36487: LD_EXP 55
36491: PUSH
36492: LD_VAR 0 3
36496: ARRAY
36497: IN
36498: IFFALSE 37121
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
36500: LD_ADDR_EXP 55
36504: PUSH
36505: LD_EXP 55
36509: PPUSH
36510: LD_VAR 0 3
36514: PPUSH
36515: LD_EXP 55
36519: PUSH
36520: LD_VAR 0 3
36524: ARRAY
36525: PUSH
36526: LD_VAR 0 1
36530: DIFF
36531: PPUSH
36532: CALL_OW 1
36536: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
36537: LD_ADDR_EXP 48
36541: PUSH
36542: LD_EXP 48
36546: PPUSH
36547: LD_VAR 0 3
36551: PUSH
36552: LD_EXP 48
36556: PUSH
36557: LD_VAR 0 3
36561: ARRAY
36562: PUSH
36563: LD_INT 1
36565: PLUS
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PPUSH
36571: LD_VAR 0 1
36575: PPUSH
36576: CALL 44364 0 3
36580: ST_TO_ADDR
// btype := GetBType ( building ) ;
36581: LD_ADDR_VAR 0 5
36585: PUSH
36586: LD_VAR 0 1
36590: PPUSH
36591: CALL_OW 266
36595: ST_TO_ADDR
// side := GetSide ( building ) ;
36596: LD_ADDR_VAR 0 8
36600: PUSH
36601: LD_VAR 0 1
36605: PPUSH
36606: CALL_OW 255
36610: ST_TO_ADDR
// if btype = b_lab then
36611: LD_VAR 0 5
36615: PUSH
36616: LD_INT 6
36618: EQUAL
36619: IFFALSE 36669
// begin mc_lab := Add ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
36621: LD_ADDR_EXP 81
36625: PUSH
36626: LD_EXP 81
36630: PPUSH
36631: LD_VAR 0 3
36635: PUSH
36636: LD_EXP 81
36640: PUSH
36641: LD_VAR 0 3
36645: ARRAY
36646: PUSH
36647: LD_INT 1
36649: PLUS
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PPUSH
36655: LD_VAR 0 1
36659: PPUSH
36660: CALL 44364 0 3
36664: ST_TO_ADDR
// exit ;
36665: POP
36666: POP
36667: GO 37125
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
36669: LD_VAR 0 5
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: LD_INT 2
36679: PUSH
36680: LD_INT 4
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: IN
36688: IFFALSE 36812
// begin if btype = b_armoury then
36690: LD_VAR 0 5
36694: PUSH
36695: LD_INT 4
36697: EQUAL
36698: IFFALSE 36708
// btype := b_barracks ;
36700: LD_ADDR_VAR 0 5
36704: PUSH
36705: LD_INT 5
36707: ST_TO_ADDR
// if btype = b_depot then
36708: LD_VAR 0 5
36712: PUSH
36713: LD_INT 0
36715: EQUAL
36716: IFFALSE 36726
// btype := b_warehouse ;
36718: LD_ADDR_VAR 0 5
36722: PUSH
36723: LD_INT 1
36725: ST_TO_ADDR
// if btype = b_workshop then
36726: LD_VAR 0 5
36730: PUSH
36731: LD_INT 2
36733: EQUAL
36734: IFFALSE 36744
// btype := b_factory ;
36736: LD_ADDR_VAR 0 5
36740: PUSH
36741: LD_INT 3
36743: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
36744: LD_VAR 0 5
36748: PPUSH
36749: LD_VAR 0 8
36753: PPUSH
36754: CALL_OW 323
36758: PUSH
36759: LD_INT 1
36761: EQUAL
36762: IFFALSE 36808
// mc_build_upgrade := Add ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
36764: LD_ADDR_EXP 80
36768: PUSH
36769: LD_EXP 80
36773: PPUSH
36774: LD_VAR 0 3
36778: PUSH
36779: LD_EXP 80
36783: PUSH
36784: LD_VAR 0 3
36788: ARRAY
36789: PUSH
36790: LD_INT 1
36792: PLUS
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PPUSH
36798: LD_VAR 0 1
36802: PPUSH
36803: CALL 44364 0 3
36807: ST_TO_ADDR
// exit ;
36808: POP
36809: POP
36810: GO 37125
// end ; if btype in [ b_bunker , b_turret ] then
36812: LD_VAR 0 5
36816: PUSH
36817: LD_INT 32
36819: PUSH
36820: LD_INT 33
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: IN
36827: IFFALSE 37117
// begin mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
36829: LD_ADDR_EXP 56
36833: PUSH
36834: LD_EXP 56
36838: PPUSH
36839: LD_VAR 0 3
36843: PUSH
36844: LD_EXP 56
36848: PUSH
36849: LD_VAR 0 3
36853: ARRAY
36854: PUSH
36855: LD_INT 1
36857: PLUS
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PPUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL 44364 0 3
36872: ST_TO_ADDR
// if btype = b_bunker then
36873: LD_VAR 0 5
36877: PUSH
36878: LD_INT 32
36880: EQUAL
36881: IFFALSE 37117
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
36883: LD_ADDR_EXP 57
36887: PUSH
36888: LD_EXP 57
36892: PPUSH
36893: LD_VAR 0 3
36897: PUSH
36898: LD_EXP 57
36902: PUSH
36903: LD_VAR 0 3
36907: ARRAY
36908: PUSH
36909: LD_INT 1
36911: PLUS
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PPUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL 44364 0 3
36926: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
36927: LD_ADDR_VAR 0 6
36931: PUSH
36932: LD_EXP 48
36936: PUSH
36937: LD_VAR 0 3
36941: ARRAY
36942: PPUSH
36943: LD_INT 25
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: PUSH
36956: LD_INT 54
36958: PUSH
36959: EMPTY
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PPUSH
36970: CALL_OW 72
36974: ST_TO_ADDR
// if tmp then
36975: LD_VAR 0 6
36979: IFFALSE 36985
// exit ;
36981: POP
36982: POP
36983: GO 37125
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36985: LD_ADDR_VAR 0 6
36989: PUSH
36990: LD_EXP 48
36994: PUSH
36995: LD_VAR 0 3
36999: ARRAY
37000: PPUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 30
37006: PUSH
37007: LD_INT 4
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 30
37016: PUSH
37017: LD_INT 5
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: PPUSH
37029: CALL_OW 72
37033: ST_TO_ADDR
// if not tmp then
37034: LD_VAR 0 6
37038: NOT
37039: IFFALSE 37045
// exit ;
37041: POP
37042: POP
37043: GO 37125
// for j in tmp do
37045: LD_ADDR_VAR 0 4
37049: PUSH
37050: LD_VAR 0 6
37054: PUSH
37055: FOR_IN
37056: IFFALSE 37115
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
37058: LD_ADDR_VAR 0 7
37062: PUSH
37063: LD_VAR 0 4
37067: PPUSH
37068: CALL_OW 313
37072: PPUSH
37073: LD_INT 25
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 72
37087: ST_TO_ADDR
// if units then
37088: LD_VAR 0 7
37092: IFFALSE 37113
// begin ComExitBuilding ( units [ 1 ] ) ;
37094: LD_VAR 0 7
37098: PUSH
37099: LD_INT 1
37101: ARRAY
37102: PPUSH
37103: CALL_OW 122
// exit ;
37107: POP
37108: POP
37109: POP
37110: POP
37111: GO 37125
// end ; end ;
37113: GO 37055
37115: POP
37116: POP
// end ; end ; exit ;
37117: POP
37118: POP
37119: GO 37125
// end ; end ;
37121: GO 36479
37123: POP
37124: POP
// end ;
37125: LD_VAR 0 2
37129: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
// if not mc_bases then
37139: LD_EXP 48
37143: NOT
37144: IFFALSE 37148
// exit ;
37146: GO 37379
// btype := GetBType ( building ) ;
37148: LD_ADDR_VAR 0 6
37152: PUSH
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 266
37162: ST_TO_ADDR
// x := GetX ( building ) ;
37163: LD_ADDR_VAR 0 7
37167: PUSH
37168: LD_VAR 0 1
37172: PPUSH
37173: CALL_OW 250
37177: ST_TO_ADDR
// y := GetY ( building ) ;
37178: LD_ADDR_VAR 0 8
37182: PUSH
37183: LD_VAR 0 1
37187: PPUSH
37188: CALL_OW 251
37192: ST_TO_ADDR
// d := GetDir ( building ) ;
37193: LD_ADDR_VAR 0 9
37197: PUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 254
37207: ST_TO_ADDR
// for i = 1 to mc_bases do
37208: LD_ADDR_VAR 0 4
37212: PUSH
37213: DOUBLE
37214: LD_INT 1
37216: DEC
37217: ST_TO_ADDR
37218: LD_EXP 48
37222: PUSH
37223: FOR_TO
37224: IFFALSE 37377
// begin if not mc_build_list [ i ] then
37226: LD_EXP 53
37230: PUSH
37231: LD_VAR 0 4
37235: ARRAY
37236: NOT
37237: IFFALSE 37241
// continue ;
37239: GO 37223
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
37241: LD_VAR 0 6
37245: PUSH
37246: LD_VAR 0 7
37250: PUSH
37251: LD_VAR 0 8
37255: PUSH
37256: LD_VAR 0 9
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: PPUSH
37267: LD_EXP 53
37271: PUSH
37272: LD_VAR 0 4
37276: ARRAY
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: CALL 49851 0 2
37286: IFFALSE 37375
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
37288: LD_ADDR_EXP 53
37292: PUSH
37293: LD_EXP 53
37297: PPUSH
37298: LD_VAR 0 4
37302: PPUSH
37303: LD_EXP 53
37307: PUSH
37308: LD_VAR 0 4
37312: ARRAY
37313: PPUSH
37314: LD_INT 1
37316: PPUSH
37317: CALL_OW 3
37321: PPUSH
37322: CALL_OW 1
37326: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
37327: LD_ADDR_EXP 55
37331: PUSH
37332: LD_EXP 55
37336: PPUSH
37337: LD_VAR 0 4
37341: PUSH
37342: LD_EXP 55
37346: PUSH
37347: LD_VAR 0 4
37351: ARRAY
37352: PUSH
37353: LD_INT 1
37355: PLUS
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PPUSH
37361: LD_VAR 0 1
37365: PPUSH
37366: CALL 44364 0 3
37370: ST_TO_ADDR
// exit ;
37371: POP
37372: POP
37373: GO 37379
// end ; end ;
37375: GO 37223
37377: POP
37378: POP
// end ;
37379: LD_VAR 0 3
37383: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
37384: LD_INT 0
37386: PPUSH
37387: PPUSH
37388: PPUSH
// if not mc_bases then
37389: LD_EXP 48
37393: NOT
37394: IFFALSE 37398
// exit ;
37396: GO 37588
// for i = 1 to mc_bases do
37398: LD_ADDR_VAR 0 4
37402: PUSH
37403: DOUBLE
37404: LD_INT 1
37406: DEC
37407: ST_TO_ADDR
37408: LD_EXP 48
37412: PUSH
37413: FOR_TO
37414: IFFALSE 37501
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
37416: LD_VAR 0 1
37420: PUSH
37421: LD_EXP 56
37425: PUSH
37426: LD_VAR 0 4
37430: ARRAY
37431: IN
37432: PUSH
37433: LD_VAR 0 1
37437: PUSH
37438: LD_EXP 57
37442: PUSH
37443: LD_VAR 0 4
37447: ARRAY
37448: IN
37449: NOT
37450: AND
37451: IFFALSE 37499
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
37453: LD_ADDR_EXP 57
37457: PUSH
37458: LD_EXP 57
37462: PPUSH
37463: LD_VAR 0 4
37467: PUSH
37468: LD_EXP 57
37472: PUSH
37473: LD_VAR 0 4
37477: ARRAY
37478: PUSH
37479: LD_INT 1
37481: PLUS
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PPUSH
37487: LD_VAR 0 1
37491: PPUSH
37492: CALL 44364 0 3
37496: ST_TO_ADDR
// break ;
37497: GO 37501
// end ; end ;
37499: GO 37413
37501: POP
37502: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 257
37512: PUSH
37513: LD_EXP 74
37517: IN
37518: PUSH
37519: LD_VAR 0 1
37523: PPUSH
37524: CALL_OW 266
37528: PUSH
37529: LD_INT 5
37531: EQUAL
37532: AND
37533: PUSH
37534: LD_VAR 0 2
37538: PPUSH
37539: CALL_OW 110
37543: PUSH
37544: LD_INT 18
37546: NONEQUAL
37547: AND
37548: IFFALSE 37588
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
37550: LD_VAR 0 2
37554: PPUSH
37555: CALL_OW 257
37559: PUSH
37560: LD_INT 5
37562: PUSH
37563: LD_INT 8
37565: PUSH
37566: LD_INT 9
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: IN
37574: IFFALSE 37588
// SetClass ( unit , 1 ) ;
37576: LD_VAR 0 2
37580: PPUSH
37581: LD_INT 1
37583: PPUSH
37584: CALL_OW 336
// end ;
37588: LD_VAR 0 3
37592: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
37593: LD_INT 0
37595: PPUSH
37596: PPUSH
// if not mc_bases then
37597: LD_EXP 48
37601: NOT
37602: IFFALSE 37606
// exit ;
37604: GO 37722
// if GetLives ( abandoned_vehicle ) > 250 then
37606: LD_VAR 0 2
37610: PPUSH
37611: CALL_OW 256
37615: PUSH
37616: LD_INT 250
37618: GREATER
37619: IFFALSE 37623
// exit ;
37621: GO 37722
// for i = 1 to mc_bases do
37623: LD_ADDR_VAR 0 6
37627: PUSH
37628: DOUBLE
37629: LD_INT 1
37631: DEC
37632: ST_TO_ADDR
37633: LD_EXP 48
37637: PUSH
37638: FOR_TO
37639: IFFALSE 37720
// begin if driver in mc_bases [ i ] then
37641: LD_VAR 0 1
37645: PUSH
37646: LD_EXP 48
37650: PUSH
37651: LD_VAR 0 6
37655: ARRAY
37656: IN
37657: IFFALSE 37718
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
37659: LD_VAR 0 1
37663: PPUSH
37664: LD_EXP 48
37668: PUSH
37669: LD_VAR 0 6
37673: ARRAY
37674: PPUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 30
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 30
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: PPUSH
37703: CALL_OW 72
37707: PUSH
37708: LD_INT 1
37710: ARRAY
37711: PPUSH
37712: CALL_OW 112
// break ;
37716: GO 37720
// end ; end ;
37718: GO 37638
37720: POP
37721: POP
// end ; end_of_file
37722: LD_VAR 0 5
37726: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
37727: LD_INT 0
37729: PPUSH
37730: PPUSH
// if exist_mode then
37731: LD_VAR 0 2
37735: IFFALSE 37760
// unit := CreateCharacter ( prefix & ident ) else
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 3
37746: PUSH
37747: LD_VAR 0 1
37751: STR
37752: PPUSH
37753: CALL_OW 34
37757: ST_TO_ADDR
37758: GO 37775
// unit := NewCharacter ( ident ) ;
37760: LD_ADDR_VAR 0 5
37764: PUSH
37765: LD_VAR 0 1
37769: PPUSH
37770: CALL_OW 25
37774: ST_TO_ADDR
// result := unit ;
37775: LD_ADDR_VAR 0 4
37779: PUSH
37780: LD_VAR 0 5
37784: ST_TO_ADDR
// end ;
37785: LD_VAR 0 4
37789: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
37790: LD_INT 0
37792: PPUSH
37793: PPUSH
// if not side or not nation then
37794: LD_VAR 0 1
37798: NOT
37799: PUSH
37800: LD_VAR 0 2
37804: NOT
37805: OR
37806: IFFALSE 37810
// exit ;
37808: GO 38430
// case nation of nation_american :
37810: LD_VAR 0 2
37814: PUSH
37815: LD_INT 1
37817: DOUBLE
37818: EQUAL
37819: IFTRUE 37823
37821: GO 37989
37823: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
37824: LD_ADDR_VAR 0 4
37828: PUSH
37829: LD_INT 35
37831: PUSH
37832: LD_INT 45
37834: PUSH
37835: LD_INT 46
37837: PUSH
37838: LD_INT 47
37840: PUSH
37841: LD_INT 1
37843: PUSH
37844: LD_INT 2
37846: PUSH
37847: LD_INT 6
37849: PUSH
37850: LD_INT 15
37852: PUSH
37853: LD_INT 16
37855: PUSH
37856: LD_INT 7
37858: PUSH
37859: LD_INT 12
37861: PUSH
37862: LD_INT 13
37864: PUSH
37865: LD_INT 10
37867: PUSH
37868: LD_INT 14
37870: PUSH
37871: LD_INT 20
37873: PUSH
37874: LD_INT 25
37876: PUSH
37877: LD_INT 32
37879: PUSH
37880: LD_INT 27
37882: PUSH
37883: LD_INT 36
37885: PUSH
37886: LD_INT 69
37888: PUSH
37889: LD_INT 39
37891: PUSH
37892: LD_INT 34
37894: PUSH
37895: LD_INT 40
37897: PUSH
37898: LD_INT 48
37900: PUSH
37901: LD_INT 49
37903: PUSH
37904: LD_INT 50
37906: PUSH
37907: LD_INT 51
37909: PUSH
37910: LD_INT 52
37912: PUSH
37913: LD_INT 53
37915: PUSH
37916: LD_INT 54
37918: PUSH
37919: LD_INT 55
37921: PUSH
37922: LD_INT 56
37924: PUSH
37925: LD_INT 57
37927: PUSH
37928: LD_INT 58
37930: PUSH
37931: LD_INT 59
37933: PUSH
37934: LD_INT 60
37936: PUSH
37937: LD_INT 61
37939: PUSH
37940: LD_INT 62
37942: PUSH
37943: LD_INT 80
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: ST_TO_ADDR
37987: GO 38354
37989: LD_INT 2
37991: DOUBLE
37992: EQUAL
37993: IFTRUE 37997
37995: GO 38167
37997: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
37998: LD_ADDR_VAR 0 4
38002: PUSH
38003: LD_INT 35
38005: PUSH
38006: LD_INT 45
38008: PUSH
38009: LD_INT 46
38011: PUSH
38012: LD_INT 47
38014: PUSH
38015: LD_INT 70
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 11
38023: PUSH
38024: LD_INT 3
38026: PUSH
38027: LD_INT 4
38029: PUSH
38030: LD_INT 5
38032: PUSH
38033: LD_INT 6
38035: PUSH
38036: LD_INT 15
38038: PUSH
38039: LD_INT 18
38041: PUSH
38042: LD_INT 7
38044: PUSH
38045: LD_INT 17
38047: PUSH
38048: LD_INT 8
38050: PUSH
38051: LD_INT 20
38053: PUSH
38054: LD_INT 72
38056: PUSH
38057: LD_INT 26
38059: PUSH
38060: LD_INT 69
38062: PUSH
38063: LD_INT 39
38065: PUSH
38066: LD_INT 40
38068: PUSH
38069: LD_INT 41
38071: PUSH
38072: LD_INT 42
38074: PUSH
38075: LD_INT 43
38077: PUSH
38078: LD_INT 48
38080: PUSH
38081: LD_INT 49
38083: PUSH
38084: LD_INT 50
38086: PUSH
38087: LD_INT 51
38089: PUSH
38090: LD_INT 52
38092: PUSH
38093: LD_INT 53
38095: PUSH
38096: LD_INT 54
38098: PUSH
38099: LD_INT 55
38101: PUSH
38102: LD_INT 56
38104: PUSH
38105: LD_INT 60
38107: PUSH
38108: LD_INT 61
38110: PUSH
38111: LD_INT 62
38113: PUSH
38114: LD_INT 66
38116: PUSH
38117: LD_INT 67
38119: PUSH
38120: LD_INT 68
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
38165: GO 38354
38167: LD_INT 3
38169: DOUBLE
38170: EQUAL
38171: IFTRUE 38175
38173: GO 38353
38175: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: LD_INT 46
38183: PUSH
38184: LD_INT 47
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: LD_INT 11
38195: PUSH
38196: LD_INT 9
38198: PUSH
38199: LD_INT 20
38201: PUSH
38202: LD_INT 19
38204: PUSH
38205: LD_INT 21
38207: PUSH
38208: LD_INT 24
38210: PUSH
38211: LD_INT 22
38213: PUSH
38214: LD_INT 25
38216: PUSH
38217: LD_INT 28
38219: PUSH
38220: LD_INT 29
38222: PUSH
38223: LD_INT 31
38225: PUSH
38226: LD_INT 37
38228: PUSH
38229: LD_INT 38
38231: PUSH
38232: LD_INT 32
38234: PUSH
38235: LD_INT 27
38237: PUSH
38238: LD_INT 33
38240: PUSH
38241: LD_INT 69
38243: PUSH
38244: LD_INT 39
38246: PUSH
38247: LD_INT 34
38249: PUSH
38250: LD_INT 40
38252: PUSH
38253: LD_INT 71
38255: PUSH
38256: LD_INT 23
38258: PUSH
38259: LD_INT 44
38261: PUSH
38262: LD_INT 48
38264: PUSH
38265: LD_INT 49
38267: PUSH
38268: LD_INT 50
38270: PUSH
38271: LD_INT 51
38273: PUSH
38274: LD_INT 52
38276: PUSH
38277: LD_INT 53
38279: PUSH
38280: LD_INT 54
38282: PUSH
38283: LD_INT 55
38285: PUSH
38286: LD_INT 56
38288: PUSH
38289: LD_INT 57
38291: PUSH
38292: LD_INT 58
38294: PUSH
38295: LD_INT 59
38297: PUSH
38298: LD_INT 63
38300: PUSH
38301: LD_INT 64
38303: PUSH
38304: LD_INT 65
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
38351: GO 38354
38353: POP
// if state > - 1 and state < 3 then
38354: LD_VAR 0 3
38358: PUSH
38359: LD_INT 1
38361: NEG
38362: GREATER
38363: PUSH
38364: LD_VAR 0 3
38368: PUSH
38369: LD_INT 3
38371: LESS
38372: AND
38373: IFFALSE 38430
// for i in result do
38375: LD_ADDR_VAR 0 5
38379: PUSH
38380: LD_VAR 0 4
38384: PUSH
38385: FOR_IN
38386: IFFALSE 38428
// if GetTech ( i , side ) <> state then
38388: LD_VAR 0 5
38392: PPUSH
38393: LD_VAR 0 1
38397: PPUSH
38398: CALL_OW 321
38402: PUSH
38403: LD_VAR 0 3
38407: NONEQUAL
38408: IFFALSE 38426
// result := result diff i ;
38410: LD_ADDR_VAR 0 4
38414: PUSH
38415: LD_VAR 0 4
38419: PUSH
38420: LD_VAR 0 5
38424: DIFF
38425: ST_TO_ADDR
38426: GO 38385
38428: POP
38429: POP
// end ;
38430: LD_VAR 0 4
38434: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
38435: LD_INT 0
38437: PPUSH
38438: PPUSH
38439: PPUSH
// result := true ;
38440: LD_ADDR_VAR 0 3
38444: PUSH
38445: LD_INT 1
38447: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
38448: LD_ADDR_VAR 0 5
38452: PUSH
38453: LD_VAR 0 2
38457: PPUSH
38458: CALL_OW 480
38462: ST_TO_ADDR
// if not tmp then
38463: LD_VAR 0 5
38467: NOT
38468: IFFALSE 38472
// exit ;
38470: GO 38521
// for i in tmp do
38472: LD_ADDR_VAR 0 4
38476: PUSH
38477: LD_VAR 0 5
38481: PUSH
38482: FOR_IN
38483: IFFALSE 38519
// if GetTech ( i , side ) <> state_researched then
38485: LD_VAR 0 4
38489: PPUSH
38490: LD_VAR 0 1
38494: PPUSH
38495: CALL_OW 321
38499: PUSH
38500: LD_INT 2
38502: NONEQUAL
38503: IFFALSE 38517
// begin result := false ;
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_INT 0
38512: ST_TO_ADDR
// exit ;
38513: POP
38514: POP
38515: GO 38521
// end ;
38517: GO 38482
38519: POP
38520: POP
// end ;
38521: LD_VAR 0 3
38525: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
38526: LD_INT 0
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
38541: LD_VAR 0 1
38545: NOT
38546: PUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 257
38556: PUSH
38557: LD_INT 9
38559: NONEQUAL
38560: OR
38561: IFFALSE 38565
// exit ;
38563: GO 39138
// side := GetSide ( unit ) ;
38565: LD_ADDR_VAR 0 9
38569: PUSH
38570: LD_VAR 0 1
38574: PPUSH
38575: CALL_OW 255
38579: ST_TO_ADDR
// tech_space := tech_spacanom ;
38580: LD_ADDR_VAR 0 12
38584: PUSH
38585: LD_INT 29
38587: ST_TO_ADDR
// tech_time := tech_taurad ;
38588: LD_ADDR_VAR 0 13
38592: PUSH
38593: LD_INT 28
38595: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
38596: LD_ADDR_VAR 0 11
38600: PUSH
38601: LD_VAR 0 1
38605: PPUSH
38606: CALL_OW 310
38610: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
38611: LD_VAR 0 11
38615: PPUSH
38616: CALL_OW 247
38620: PUSH
38621: LD_INT 2
38623: EQUAL
38624: IFFALSE 38628
// exit ;
38626: GO 39138
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38628: LD_ADDR_VAR 0 8
38632: PUSH
38633: LD_INT 81
38635: PUSH
38636: LD_VAR 0 9
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: LD_INT 21
38650: PUSH
38651: LD_INT 3
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 69
38670: ST_TO_ADDR
// if not tmp then
38671: LD_VAR 0 8
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 39138
// if in_unit then
38680: LD_VAR 0 11
38684: IFFALSE 38708
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
38686: LD_ADDR_VAR 0 10
38690: PUSH
38691: LD_VAR 0 8
38695: PPUSH
38696: LD_VAR 0 11
38700: PPUSH
38701: CALL_OW 74
38705: ST_TO_ADDR
38706: GO 38728
// enemy := NearestUnitToUnit ( tmp , unit ) ;
38708: LD_ADDR_VAR 0 10
38712: PUSH
38713: LD_VAR 0 8
38717: PPUSH
38718: LD_VAR 0 1
38722: PPUSH
38723: CALL_OW 74
38727: ST_TO_ADDR
// if not enemy then
38728: LD_VAR 0 10
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 39138
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
38737: LD_VAR 0 11
38741: PUSH
38742: LD_VAR 0 11
38746: PPUSH
38747: LD_VAR 0 10
38751: PPUSH
38752: CALL_OW 296
38756: PUSH
38757: LD_INT 13
38759: GREATER
38760: AND
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: LD_VAR 0 10
38771: PPUSH
38772: CALL_OW 296
38776: PUSH
38777: LD_INT 12
38779: GREATER
38780: OR
38781: IFFALSE 38785
// exit ;
38783: GO 39138
// missile := [ 1 ] ;
38785: LD_ADDR_VAR 0 14
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38796: LD_VAR 0 9
38800: PPUSH
38801: LD_VAR 0 12
38805: PPUSH
38806: CALL_OW 325
38810: IFFALSE 38839
// missile := Insert ( missile , missile + 1 , 2 ) ;
38812: LD_ADDR_VAR 0 14
38816: PUSH
38817: LD_VAR 0 14
38821: PPUSH
38822: LD_VAR 0 14
38826: PUSH
38827: LD_INT 1
38829: PLUS
38830: PPUSH
38831: LD_INT 2
38833: PPUSH
38834: CALL_OW 2
38838: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38839: LD_VAR 0 9
38843: PPUSH
38844: LD_VAR 0 13
38848: PPUSH
38849: CALL_OW 325
38853: PUSH
38854: LD_VAR 0 10
38858: PPUSH
38859: CALL_OW 255
38863: PPUSH
38864: LD_VAR 0 13
38868: PPUSH
38869: CALL_OW 325
38873: NOT
38874: AND
38875: IFFALSE 38904
// missile := Insert ( missile , missile + 1 , 3 ) ;
38877: LD_ADDR_VAR 0 14
38881: PUSH
38882: LD_VAR 0 14
38886: PPUSH
38887: LD_VAR 0 14
38891: PUSH
38892: LD_INT 1
38894: PLUS
38895: PPUSH
38896: LD_INT 3
38898: PPUSH
38899: CALL_OW 2
38903: ST_TO_ADDR
// if missile < 2 then
38904: LD_VAR 0 14
38908: PUSH
38909: LD_INT 2
38911: LESS
38912: IFFALSE 38916
// exit ;
38914: GO 39138
// x := GetX ( enemy ) ;
38916: LD_ADDR_VAR 0 4
38920: PUSH
38921: LD_VAR 0 10
38925: PPUSH
38926: CALL_OW 250
38930: ST_TO_ADDR
// y := GetY ( enemy ) ;
38931: LD_ADDR_VAR 0 5
38935: PUSH
38936: LD_VAR 0 10
38940: PPUSH
38941: CALL_OW 251
38945: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38946: LD_ADDR_VAR 0 6
38950: PUSH
38951: LD_VAR 0 4
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PPUSH
38960: LD_INT 1
38962: PPUSH
38963: CALL_OW 12
38967: PLUS
38968: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38969: LD_ADDR_VAR 0 7
38973: PUSH
38974: LD_VAR 0 5
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PPUSH
38983: LD_INT 1
38985: PPUSH
38986: CALL_OW 12
38990: PLUS
38991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38992: LD_VAR 0 6
38996: PPUSH
38997: LD_VAR 0 7
39001: PPUSH
39002: CALL_OW 488
39006: NOT
39007: IFFALSE 39029
// begin _x := x ;
39009: LD_ADDR_VAR 0 6
39013: PUSH
39014: LD_VAR 0 4
39018: ST_TO_ADDR
// _y := y ;
39019: LD_ADDR_VAR 0 7
39023: PUSH
39024: LD_VAR 0 5
39028: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39029: LD_ADDR_VAR 0 3
39033: PUSH
39034: LD_INT 1
39036: PPUSH
39037: LD_VAR 0 14
39041: PPUSH
39042: CALL_OW 12
39046: ST_TO_ADDR
// case i of 1 :
39047: LD_VAR 0 3
39051: PUSH
39052: LD_INT 1
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39077
39060: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39061: LD_VAR 0 1
39065: PPUSH
39066: LD_VAR 0 10
39070: PPUSH
39071: CALL_OW 115
39075: GO 39138
39077: LD_INT 2
39079: DOUBLE
39080: EQUAL
39081: IFTRUE 39085
39083: GO 39107
39085: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39086: LD_VAR 0 1
39090: PPUSH
39091: LD_VAR 0 6
39095: PPUSH
39096: LD_VAR 0 7
39100: PPUSH
39101: CALL_OW 153
39105: GO 39138
39107: LD_INT 3
39109: DOUBLE
39110: EQUAL
39111: IFTRUE 39115
39113: GO 39137
39115: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39116: LD_VAR 0 1
39120: PPUSH
39121: LD_VAR 0 6
39125: PPUSH
39126: LD_VAR 0 7
39130: PPUSH
39131: CALL_OW 154
39135: GO 39138
39137: POP
// end ;
39138: LD_VAR 0 2
39142: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39143: LD_INT 0
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
// if not unit or not building then
39151: LD_VAR 0 1
39155: NOT
39156: PUSH
39157: LD_VAR 0 2
39161: NOT
39162: OR
39163: IFFALSE 39167
// exit ;
39165: GO 39322
// x := GetX ( building ) ;
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: LD_VAR 0 2
39176: PPUSH
39177: CALL_OW 250
39181: ST_TO_ADDR
// y := GetY ( building ) ;
39182: LD_ADDR_VAR 0 6
39186: PUSH
39187: LD_VAR 0 2
39191: PPUSH
39192: CALL_OW 251
39196: ST_TO_ADDR
// for i = 0 to 5 do
39197: LD_ADDR_VAR 0 4
39201: PUSH
39202: DOUBLE
39203: LD_INT 0
39205: DEC
39206: ST_TO_ADDR
39207: LD_INT 5
39209: PUSH
39210: FOR_TO
39211: IFFALSE 39320
// begin _x := ShiftX ( x , i , 3 ) ;
39213: LD_ADDR_VAR 0 7
39217: PUSH
39218: LD_VAR 0 5
39222: PPUSH
39223: LD_VAR 0 4
39227: PPUSH
39228: LD_INT 3
39230: PPUSH
39231: CALL_OW 272
39235: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
39236: LD_ADDR_VAR 0 8
39240: PUSH
39241: LD_VAR 0 6
39245: PPUSH
39246: LD_VAR 0 4
39250: PPUSH
39251: LD_INT 3
39253: PPUSH
39254: CALL_OW 273
39258: ST_TO_ADDR
// if HexInfo ( _x , _y ) = 0 and ValidHex ( _x , _y ) then
39259: LD_VAR 0 7
39263: PPUSH
39264: LD_VAR 0 8
39268: PPUSH
39269: CALL_OW 428
39273: PUSH
39274: LD_INT 0
39276: EQUAL
39277: PUSH
39278: LD_VAR 0 7
39282: PPUSH
39283: LD_VAR 0 8
39287: PPUSH
39288: CALL_OW 488
39292: AND
39293: IFFALSE 39318
// begin ComMoveXY ( unit , _x , _y ) ;
39295: LD_VAR 0 1
39299: PPUSH
39300: LD_VAR 0 7
39304: PPUSH
39305: LD_VAR 0 8
39309: PPUSH
39310: CALL_OW 111
// exit ;
39314: POP
39315: POP
39316: GO 39322
// end ; end ;
39318: GO 39210
39320: POP
39321: POP
// end ;
39322: LD_VAR 0 3
39326: RET
// export function ScanBase ( side , base_area ) ; begin
39327: LD_INT 0
39329: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
39330: LD_ADDR_VAR 0 3
39334: PUSH
39335: LD_VAR 0 2
39339: PPUSH
39340: LD_INT 81
39342: PUSH
39343: LD_VAR 0 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PPUSH
39352: CALL_OW 70
39356: ST_TO_ADDR
// end ;
39357: LD_VAR 0 3
39361: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
39362: LD_INT 0
39364: PPUSH
39365: PPUSH
39366: PPUSH
39367: PPUSH
39368: PPUSH
39369: PPUSH
39370: PPUSH
39371: PPUSH
39372: PPUSH
39373: PPUSH
39374: PPUSH
39375: PPUSH
39376: PPUSH
39377: PPUSH
39378: PPUSH
39379: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
39380: LD_ADDR_VAR 0 12
39384: PUSH
39385: LD_EXP 48
39389: PUSH
39390: LD_VAR 0 1
39394: ARRAY
39395: PPUSH
39396: LD_INT 25
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PPUSH
39406: CALL_OW 72
39410: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
39411: LD_ADDR_VAR 0 8
39415: PUSH
39416: LD_EXP 48
39420: PUSH
39421: LD_VAR 0 1
39425: ARRAY
39426: PPUSH
39427: LD_INT 2
39429: PUSH
39430: LD_INT 25
39432: PUSH
39433: LD_INT 1
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 25
39442: PUSH
39443: LD_INT 5
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 25
39452: PUSH
39453: LD_INT 8
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 25
39462: PUSH
39463: LD_INT 9
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: PPUSH
39477: CALL_OW 72
39481: ST_TO_ADDR
// if not defenders and not solds then
39482: LD_VAR 0 2
39486: NOT
39487: PUSH
39488: LD_VAR 0 8
39492: NOT
39493: AND
39494: IFFALSE 39498
// exit ;
39496: GO 40864
// depot_under_attack := false ;
39498: LD_ADDR_VAR 0 16
39502: PUSH
39503: LD_INT 0
39505: ST_TO_ADDR
// sold_defenders := [ ] ;
39506: LD_ADDR_VAR 0 17
39510: PUSH
39511: EMPTY
39512: ST_TO_ADDR
// if mechs then
39513: LD_VAR 0 12
39517: IFFALSE 39646
// for i in defenders do
39519: LD_ADDR_VAR 0 5
39523: PUSH
39524: LD_VAR 0 2
39528: PUSH
39529: FOR_IN
39530: IFFALSE 39644
// begin SetTag ( i , 20 ) ;
39532: LD_VAR 0 5
39536: PPUSH
39537: LD_INT 20
39539: PPUSH
39540: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
39544: LD_VAR 0 5
39548: PPUSH
39549: CALL_OW 263
39553: PUSH
39554: LD_INT 1
39556: EQUAL
39557: PUSH
39558: LD_VAR 0 5
39562: PPUSH
39563: CALL_OW 311
39567: NOT
39568: AND
39569: PUSH
39570: LD_VAR 0 12
39574: AND
39575: IFFALSE 39642
// begin un := mechs [ 1 ] ;
39577: LD_ADDR_VAR 0 10
39581: PUSH
39582: LD_VAR 0 12
39586: PUSH
39587: LD_INT 1
39589: ARRAY
39590: ST_TO_ADDR
// ComExitBuilding ( un ) ;
39591: LD_VAR 0 10
39595: PPUSH
39596: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
39600: LD_VAR 0 10
39604: PPUSH
39605: LD_VAR 0 5
39609: PPUSH
39610: CALL_OW 180
// SetTag ( un , 19 ) ;
39614: LD_VAR 0 10
39618: PPUSH
39619: LD_INT 19
39621: PPUSH
39622: CALL_OW 109
// mechs := mechs diff un ;
39626: LD_ADDR_VAR 0 12
39630: PUSH
39631: LD_VAR 0 12
39635: PUSH
39636: LD_VAR 0 10
39640: DIFF
39641: ST_TO_ADDR
// end ; end ;
39642: GO 39529
39644: POP
39645: POP
// if solds then
39646: LD_VAR 0 8
39650: IFFALSE 39709
// for i in solds do
39652: LD_ADDR_VAR 0 5
39656: PUSH
39657: LD_VAR 0 8
39661: PUSH
39662: FOR_IN
39663: IFFALSE 39707
// if not GetTag ( i ) then
39665: LD_VAR 0 5
39669: PPUSH
39670: CALL_OW 110
39674: NOT
39675: IFFALSE 39705
// begin defenders := defenders union i ;
39677: LD_ADDR_VAR 0 2
39681: PUSH
39682: LD_VAR 0 2
39686: PUSH
39687: LD_VAR 0 5
39691: UNION
39692: ST_TO_ADDR
// SetTag ( i , 18 ) ;
39693: LD_VAR 0 5
39697: PPUSH
39698: LD_INT 18
39700: PPUSH
39701: CALL_OW 109
// end ;
39705: GO 39662
39707: POP
39708: POP
// repeat wait ( 0 0$1 ) ;
39709: LD_INT 35
39711: PPUSH
39712: CALL_OW 67
// enemy := mc_scan [ base ] ;
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_EXP 71
39725: PUSH
39726: LD_VAR 0 1
39730: ARRAY
39731: ST_TO_ADDR
// for i in defenders do
39732: LD_ADDR_VAR 0 5
39736: PUSH
39737: LD_VAR 0 2
39741: PUSH
39742: FOR_IN
39743: IFFALSE 40428
// begin e := NearestUnitToUnit ( enemy , i ) ;
39745: LD_ADDR_VAR 0 13
39749: PUSH
39750: LD_VAR 0 3
39754: PPUSH
39755: LD_VAR 0 5
39759: PPUSH
39760: CALL_OW 74
39764: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
39765: LD_ADDR_VAR 0 16
39769: PUSH
39770: LD_EXP 48
39774: PUSH
39775: LD_VAR 0 1
39779: ARRAY
39780: PPUSH
39781: LD_INT 2
39783: PUSH
39784: LD_INT 30
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 30
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: PPUSH
39809: CALL_OW 72
39813: NOT
39814: PUSH
39815: LD_EXP 48
39819: PUSH
39820: LD_VAR 0 1
39824: ARRAY
39825: PPUSH
39826: LD_INT 2
39828: PUSH
39829: LD_INT 30
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 30
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: LIST
39853: PPUSH
39854: CALL_OW 72
39858: PPUSH
39859: CALL_OW 256
39863: PUSH
39864: LD_INT 600
39866: LESS
39867: OR
39868: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
39869: LD_VAR 0 5
39873: PPUSH
39874: CALL_OW 247
39878: PUSH
39879: LD_INT 2
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 40134
39887: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
39888: LD_VAR 0 5
39892: PPUSH
39893: CALL_OW 256
39897: PUSH
39898: LD_INT 650
39900: GREATER
39901: PUSH
39902: LD_VAR 0 5
39906: PPUSH
39907: LD_VAR 0 13
39911: PPUSH
39912: CALL_OW 296
39916: PUSH
39917: LD_INT 40
39919: LESS
39920: AND
39921: IFFALSE 39939
// ComAttackUnit ( i , e ) else
39923: LD_VAR 0 5
39927: PPUSH
39928: LD_VAR 0 13
39932: PPUSH
39933: CALL_OW 115
39937: GO 40017
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
39939: LD_VAR 0 5
39943: PPUSH
39944: LD_VAR 0 13
39948: PPUSH
39949: CALL_OW 296
39953: PUSH
39954: LD_INT 30
39956: GREATEREQUAL
39957: PUSH
39958: LD_VAR 0 5
39962: PPUSH
39963: CALL_OW 256
39967: PUSH
39968: LD_INT 650
39970: LESSEQUAL
39971: OR
39972: PUSH
39973: LD_VAR 0 5
39977: PPUSH
39978: LD_EXP 72
39982: PUSH
39983: LD_VAR 0 1
39987: ARRAY
39988: PPUSH
39989: CALL_OW 308
39993: NOT
39994: AND
39995: IFFALSE 40017
// ComMoveToArea ( i , mc_parking [ base ] ) ;
39997: LD_VAR 0 5
40001: PPUSH
40002: LD_EXP 72
40006: PUSH
40007: LD_VAR 0 1
40011: ARRAY
40012: PPUSH
40013: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
40017: LD_VAR 0 5
40021: PPUSH
40022: CALL_OW 256
40026: PUSH
40027: LD_INT 998
40029: LESS
40030: PUSH
40031: LD_VAR 0 5
40035: PPUSH
40036: CALL_OW 263
40040: PUSH
40041: LD_INT 1
40043: EQUAL
40044: AND
40045: PUSH
40046: LD_VAR 0 5
40050: PPUSH
40051: CALL_OW 311
40055: AND
40056: PUSH
40057: LD_VAR 0 5
40061: PPUSH
40062: LD_EXP 72
40066: PUSH
40067: LD_VAR 0 1
40071: ARRAY
40072: PPUSH
40073: CALL_OW 308
40077: AND
40078: IFFALSE 40132
// begin mech := IsDrivenBy ( i ) ;
40080: LD_ADDR_VAR 0 9
40084: PUSH
40085: LD_VAR 0 5
40089: PPUSH
40090: CALL_OW 311
40094: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
40095: LD_VAR 0 9
40099: PPUSH
40100: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
40104: LD_VAR 0 9
40108: PPUSH
40109: LD_VAR 0 5
40113: PPUSH
40114: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
40118: LD_VAR 0 9
40122: PPUSH
40123: LD_VAR 0 5
40127: PPUSH
40128: CALL_OW 180
// end ; end ; unit_human :
40132: GO 40399
40134: LD_INT 1
40136: DOUBLE
40137: EQUAL
40138: IFTRUE 40142
40140: GO 40398
40142: POP
// begin b := IsInUnit ( i ) ;
40143: LD_ADDR_VAR 0 18
40147: PUSH
40148: LD_VAR 0 5
40152: PPUSH
40153: CALL_OW 310
40157: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
40158: LD_ADDR_VAR 0 19
40162: PUSH
40163: LD_VAR 0 18
40167: NOT
40168: PUSH
40169: LD_VAR 0 18
40173: PPUSH
40174: CALL_OW 266
40178: PUSH
40179: LD_INT 32
40181: PUSH
40182: LD_INT 31
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: IN
40189: OR
40190: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
40191: LD_VAR 0 16
40195: PUSH
40196: LD_VAR 0 2
40200: PPUSH
40201: LD_INT 21
40203: PUSH
40204: LD_INT 2
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PPUSH
40211: CALL_OW 72
40215: PUSH
40216: LD_INT 1
40218: LESSEQUAL
40219: OR
40220: PUSH
40221: LD_VAR 0 19
40225: AND
40226: PUSH
40227: LD_VAR 0 5
40231: PUSH
40232: LD_VAR 0 17
40236: IN
40237: NOT
40238: AND
40239: IFFALSE 40332
// begin if b then
40241: LD_VAR 0 18
40245: IFFALSE 40294
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
40247: LD_VAR 0 18
40251: PPUSH
40252: LD_VAR 0 3
40256: PPUSH
40257: LD_VAR 0 18
40261: PPUSH
40262: CALL_OW 74
40266: PPUSH
40267: CALL_OW 296
40271: PUSH
40272: LD_INT 10
40274: LESS
40275: PUSH
40276: LD_VAR 0 18
40280: PPUSH
40281: CALL_OW 461
40285: PUSH
40286: LD_INT 7
40288: NONEQUAL
40289: AND
40290: IFFALSE 40294
// continue ;
40292: GO 39742
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
40294: LD_ADDR_VAR 0 17
40298: PUSH
40299: LD_VAR 0 17
40303: PPUSH
40304: LD_VAR 0 17
40308: PUSH
40309: LD_INT 1
40311: PLUS
40312: PPUSH
40313: LD_VAR 0 5
40317: PPUSH
40318: CALL_OW 1
40322: ST_TO_ADDR
// ComExitBuilding ( i ) ;
40323: LD_VAR 0 5
40327: PPUSH
40328: CALL_OW 122
// end ; if sold_defenders then
40332: LD_VAR 0 17
40336: IFFALSE 40396
// if i in sold_defenders then
40338: LD_VAR 0 5
40342: PUSH
40343: LD_VAR 0 17
40347: IN
40348: IFFALSE 40396
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
40350: LD_VAR 0 5
40354: PPUSH
40355: CALL_OW 314
40359: NOT
40360: PUSH
40361: LD_VAR 0 5
40365: PPUSH
40366: LD_VAR 0 13
40370: PPUSH
40371: CALL_OW 296
40375: PUSH
40376: LD_INT 30
40378: LESS
40379: AND
40380: IFFALSE 40396
// ComAttackUnit ( i , e ) ;
40382: LD_VAR 0 5
40386: PPUSH
40387: LD_VAR 0 13
40391: PPUSH
40392: CALL_OW 115
// end ; end ; end ;
40396: GO 40399
40398: POP
// if IsDead ( i ) then
40399: LD_VAR 0 5
40403: PPUSH
40404: CALL_OW 301
40408: IFFALSE 40426
// defenders := defenders diff i ;
40410: LD_ADDR_VAR 0 2
40414: PUSH
40415: LD_VAR 0 2
40419: PUSH
40420: LD_VAR 0 5
40424: DIFF
40425: ST_TO_ADDR
// end ;
40426: GO 39742
40428: POP
40429: POP
// until not enemy or not defenders ;
40430: LD_VAR 0 3
40434: NOT
40435: PUSH
40436: LD_VAR 0 2
40440: NOT
40441: OR
40442: IFFALSE 39709
// MC_Reset ( base , 18 ) ;
40444: LD_VAR 0 1
40448: PPUSH
40449: LD_INT 18
40451: PPUSH
40452: CALL 19197 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
40456: LD_ADDR_VAR 0 2
40460: PUSH
40461: LD_VAR 0 2
40465: PUSH
40466: LD_VAR 0 2
40470: PPUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 25
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 25
40486: PUSH
40487: LD_INT 5
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 25
40496: PUSH
40497: LD_INT 8
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 25
40506: PUSH
40507: LD_INT 9
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: PPUSH
40521: CALL_OW 72
40525: DIFF
40526: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
40527: LD_VAR 0 3
40531: NOT
40532: PUSH
40533: LD_VAR 0 2
40537: PPUSH
40538: LD_INT 21
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PPUSH
40548: CALL_OW 72
40552: AND
40553: IFFALSE 40815
// begin tmp := FilterByTag ( defenders , 19 ) ;
40555: LD_ADDR_VAR 0 11
40559: PUSH
40560: LD_VAR 0 2
40564: PPUSH
40565: LD_INT 19
40567: PPUSH
40568: CALL 75326 0 2
40572: ST_TO_ADDR
// if tmp then
40573: LD_VAR 0 11
40577: IFFALSE 40647
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
40579: LD_ADDR_VAR 0 11
40583: PUSH
40584: LD_VAR 0 11
40588: PPUSH
40589: LD_INT 25
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PPUSH
40599: CALL_OW 72
40603: ST_TO_ADDR
// if tmp then
40604: LD_VAR 0 11
40608: IFFALSE 40647
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
40610: LD_ADDR_EXP 60
40614: PUSH
40615: LD_EXP 60
40619: PPUSH
40620: LD_VAR 0 1
40624: PPUSH
40625: LD_EXP 60
40629: PUSH
40630: LD_VAR 0 1
40634: ARRAY
40635: PUSH
40636: LD_VAR 0 11
40640: UNION
40641: PPUSH
40642: CALL_OW 1
40646: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
40647: LD_VAR 0 1
40651: PPUSH
40652: LD_INT 19
40654: PPUSH
40655: CALL 19197 0 2
// repeat wait ( 0 0$1 ) ;
40659: LD_INT 35
40661: PPUSH
40662: CALL_OW 67
// for i in defenders do
40666: LD_ADDR_VAR 0 5
40670: PUSH
40671: LD_VAR 0 2
40675: PUSH
40676: FOR_IN
40677: IFFALSE 40766
// begin if not IsInArea ( i , mc_parking [ base ] ) then
40679: LD_VAR 0 5
40683: PPUSH
40684: LD_EXP 72
40688: PUSH
40689: LD_VAR 0 1
40693: ARRAY
40694: PPUSH
40695: CALL_OW 308
40699: NOT
40700: IFFALSE 40724
// ComMoveToArea ( i , mc_parking [ base ] ) else
40702: LD_VAR 0 5
40706: PPUSH
40707: LD_EXP 72
40711: PUSH
40712: LD_VAR 0 1
40716: ARRAY
40717: PPUSH
40718: CALL_OW 113
40722: GO 40764
// if GetControl ( i ) = control_manual then
40724: LD_VAR 0 5
40728: PPUSH
40729: CALL_OW 263
40733: PUSH
40734: LD_INT 1
40736: EQUAL
40737: IFFALSE 40764
// if IsDrivenBy ( i ) then
40739: LD_VAR 0 5
40743: PPUSH
40744: CALL_OW 311
40748: IFFALSE 40764
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
40750: LD_VAR 0 5
40754: PPUSH
40755: CALL_OW 311
40759: PPUSH
40760: CALL_OW 121
// end ;
40764: GO 40676
40766: POP
40767: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
40768: LD_VAR 0 2
40772: PPUSH
40773: LD_INT 95
40775: PUSH
40776: LD_EXP 72
40780: PUSH
40781: LD_VAR 0 1
40785: ARRAY
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PPUSH
40791: CALL_OW 72
40795: PUSH
40796: LD_VAR 0 2
40800: EQUAL
40801: PUSH
40802: LD_EXP 71
40806: PUSH
40807: LD_VAR 0 1
40811: ARRAY
40812: OR
40813: IFFALSE 40659
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
40815: LD_ADDR_EXP 70
40819: PUSH
40820: LD_EXP 70
40824: PPUSH
40825: LD_VAR 0 1
40829: PPUSH
40830: LD_EXP 70
40834: PUSH
40835: LD_VAR 0 1
40839: ARRAY
40840: PUSH
40841: LD_VAR 0 2
40845: UNION
40846: PPUSH
40847: CALL_OW 1
40851: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
40852: LD_VAR 0 1
40856: PPUSH
40857: LD_INT 20
40859: PPUSH
40860: CALL 19197 0 2
// end ;
40864: LD_VAR 0 4
40868: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40869: LD_INT 0
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
// result := false ;
40875: LD_ADDR_VAR 0 2
40879: PUSH
40880: LD_INT 0
40882: ST_TO_ADDR
// side := GetSide ( unit ) ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 1
40892: PPUSH
40893: CALL_OW 255
40897: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40898: LD_ADDR_VAR 0 4
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 248
40912: ST_TO_ADDR
// case nat of 1 :
40913: LD_VAR 0 4
40917: PUSH
40918: LD_INT 1
40920: DOUBLE
40921: EQUAL
40922: IFTRUE 40926
40924: GO 40937
40926: POP
// tech := tech_lassight ; 2 :
40927: LD_ADDR_VAR 0 5
40931: PUSH
40932: LD_INT 12
40934: ST_TO_ADDR
40935: GO 40976
40937: LD_INT 2
40939: DOUBLE
40940: EQUAL
40941: IFTRUE 40945
40943: GO 40956
40945: POP
// tech := tech_mortar ; 3 :
40946: LD_ADDR_VAR 0 5
40950: PUSH
40951: LD_INT 41
40953: ST_TO_ADDR
40954: GO 40976
40956: LD_INT 3
40958: DOUBLE
40959: EQUAL
40960: IFTRUE 40964
40962: GO 40975
40964: POP
// tech := tech_bazooka ; end ;
40965: LD_ADDR_VAR 0 5
40969: PUSH
40970: LD_INT 44
40972: ST_TO_ADDR
40973: GO 40976
40975: POP
// if Researched ( side , tech ) then
40976: LD_VAR 0 3
40980: PPUSH
40981: LD_VAR 0 5
40985: PPUSH
40986: CALL_OW 325
40990: IFFALSE 41017
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40992: LD_ADDR_VAR 0 2
40996: PUSH
40997: LD_INT 5
40999: PUSH
41000: LD_INT 8
41002: PUSH
41003: LD_INT 9
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: PUSH
41011: LD_VAR 0 4
41015: ARRAY
41016: ST_TO_ADDR
// end ;
41017: LD_VAR 0 2
41021: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41022: LD_INT 0
41024: PPUSH
41025: PPUSH
41026: PPUSH
// if not mines then
41027: LD_VAR 0 2
41031: NOT
41032: IFFALSE 41036
// exit ;
41034: GO 41180
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41036: LD_ADDR_VAR 0 5
41040: PUSH
41041: LD_INT 81
41043: PUSH
41044: LD_VAR 0 1
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 3
41055: PUSH
41056: LD_INT 21
41058: PUSH
41059: LD_INT 3
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PPUSH
41074: CALL_OW 69
41078: ST_TO_ADDR
// for i in mines do
41079: LD_ADDR_VAR 0 4
41083: PUSH
41084: LD_VAR 0 2
41088: PUSH
41089: FOR_IN
41090: IFFALSE 41178
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41092: LD_VAR 0 4
41096: PUSH
41097: LD_INT 1
41099: ARRAY
41100: PPUSH
41101: LD_VAR 0 4
41105: PUSH
41106: LD_INT 2
41108: ARRAY
41109: PPUSH
41110: CALL_OW 458
41114: NOT
41115: IFFALSE 41119
// continue ;
41117: GO 41089
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41119: LD_VAR 0 4
41123: PUSH
41124: LD_INT 1
41126: ARRAY
41127: PPUSH
41128: LD_VAR 0 4
41132: PUSH
41133: LD_INT 2
41135: ARRAY
41136: PPUSH
41137: CALL_OW 428
41141: PUSH
41142: LD_VAR 0 5
41146: IN
41147: IFFALSE 41176
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41149: LD_VAR 0 4
41153: PUSH
41154: LD_INT 1
41156: ARRAY
41157: PPUSH
41158: LD_VAR 0 4
41162: PUSH
41163: LD_INT 2
41165: ARRAY
41166: PPUSH
41167: LD_VAR 0 1
41171: PPUSH
41172: CALL_OW 456
// end ;
41176: GO 41089
41178: POP
41179: POP
// end ;
41180: LD_VAR 0 3
41184: RET
// export function Count ( array ) ; var i ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
// result := 0 ;
41189: LD_ADDR_VAR 0 2
41193: PUSH
41194: LD_INT 0
41196: ST_TO_ADDR
// for i in array do
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_VAR 0 1
41206: PUSH
41207: FOR_IN
41208: IFFALSE 41232
// if i then
41210: LD_VAR 0 3
41214: IFFALSE 41230
// result := result + 1 ;
41216: LD_ADDR_VAR 0 2
41220: PUSH
41221: LD_VAR 0 2
41225: PUSH
41226: LD_INT 1
41228: PLUS
41229: ST_TO_ADDR
41230: GO 41207
41232: POP
41233: POP
// end ;
41234: LD_VAR 0 2
41238: RET
// export function IsEmpty ( building ) ; begin
41239: LD_INT 0
41241: PPUSH
// if not building then
41242: LD_VAR 0 1
41246: NOT
41247: IFFALSE 41251
// exit ;
41249: GO 41294
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41251: LD_ADDR_VAR 0 2
41255: PUSH
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 22
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 255
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 58
41280: PUSH
41281: EMPTY
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PPUSH
41288: CALL_OW 69
41292: IN
41293: ST_TO_ADDR
// end ;
41294: LD_VAR 0 2
41298: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41299: LD_INT 0
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
// tmp := [ ] ;
41305: LD_ADDR_VAR 0 3
41309: PUSH
41310: EMPTY
41311: ST_TO_ADDR
// list := [ ] ;
41312: LD_ADDR_VAR 0 5
41316: PUSH
41317: EMPTY
41318: ST_TO_ADDR
// for i = 16 to 25 do
41319: LD_ADDR_VAR 0 4
41323: PUSH
41324: DOUBLE
41325: LD_INT 16
41327: DEC
41328: ST_TO_ADDR
41329: LD_INT 25
41331: PUSH
41332: FOR_TO
41333: IFFALSE 41406
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41335: LD_ADDR_VAR 0 3
41339: PUSH
41340: LD_VAR 0 3
41344: PUSH
41345: LD_INT 22
41347: PUSH
41348: LD_VAR 0 1
41352: PPUSH
41353: CALL_OW 255
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 91
41364: PUSH
41365: LD_VAR 0 1
41369: PUSH
41370: LD_INT 6
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 30
41380: PUSH
41381: LD_VAR 0 4
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: LIST
41394: PUSH
41395: EMPTY
41396: LIST
41397: PPUSH
41398: CALL_OW 69
41402: ADD
41403: ST_TO_ADDR
41404: GO 41332
41406: POP
41407: POP
// for i = 1 to tmp do
41408: LD_ADDR_VAR 0 4
41412: PUSH
41413: DOUBLE
41414: LD_INT 1
41416: DEC
41417: ST_TO_ADDR
41418: LD_VAR 0 3
41422: PUSH
41423: FOR_TO
41424: IFFALSE 41512
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41426: LD_ADDR_VAR 0 5
41430: PUSH
41431: LD_VAR 0 5
41435: PUSH
41436: LD_VAR 0 3
41440: PUSH
41441: LD_VAR 0 4
41445: ARRAY
41446: PPUSH
41447: CALL_OW 266
41451: PUSH
41452: LD_VAR 0 3
41456: PUSH
41457: LD_VAR 0 4
41461: ARRAY
41462: PPUSH
41463: CALL_OW 250
41467: PUSH
41468: LD_VAR 0 3
41472: PUSH
41473: LD_VAR 0 4
41477: ARRAY
41478: PPUSH
41479: CALL_OW 251
41483: PUSH
41484: LD_VAR 0 3
41488: PUSH
41489: LD_VAR 0 4
41493: ARRAY
41494: PPUSH
41495: CALL_OW 254
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: ADD
41509: ST_TO_ADDR
41510: GO 41423
41512: POP
41513: POP
// result := list ;
41514: LD_ADDR_VAR 0 2
41518: PUSH
41519: LD_VAR 0 5
41523: ST_TO_ADDR
// end ;
41524: LD_VAR 0 2
41528: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41529: LD_INT 0
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
// if not factory then
41538: LD_VAR 0 1
41542: NOT
41543: IFFALSE 41547
// exit ;
41545: GO 42072
// if control = control_apeman then
41547: LD_VAR 0 4
41551: PUSH
41552: LD_INT 5
41554: EQUAL
41555: IFFALSE 41664
// begin tmp := UnitsInside ( factory ) ;
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: LD_VAR 0 1
41566: PPUSH
41567: CALL_OW 313
41571: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41572: LD_VAR 0 8
41576: PPUSH
41577: LD_INT 25
41579: PUSH
41580: LD_INT 12
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PPUSH
41587: CALL_OW 72
41591: NOT
41592: IFFALSE 41602
// control := control_manual ;
41594: LD_ADDR_VAR 0 4
41598: PUSH
41599: LD_INT 1
41601: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41602: LD_ADDR_VAR 0 8
41606: PUSH
41607: LD_VAR 0 1
41611: PPUSH
41612: CALL 41299 0 1
41616: ST_TO_ADDR
// if tmp then
41617: LD_VAR 0 8
41621: IFFALSE 41664
// begin for i in tmp do
41623: LD_ADDR_VAR 0 7
41627: PUSH
41628: LD_VAR 0 8
41632: PUSH
41633: FOR_IN
41634: IFFALSE 41662
// if i [ 1 ] = b_ext_radar then
41636: LD_VAR 0 7
41640: PUSH
41641: LD_INT 1
41643: ARRAY
41644: PUSH
41645: LD_INT 20
41647: EQUAL
41648: IFFALSE 41660
// begin control := control_remote ;
41650: LD_ADDR_VAR 0 4
41654: PUSH
41655: LD_INT 2
41657: ST_TO_ADDR
// break ;
41658: GO 41662
// end ;
41660: GO 41633
41662: POP
41663: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41664: LD_VAR 0 1
41668: PPUSH
41669: LD_VAR 0 2
41673: PPUSH
41674: LD_VAR 0 3
41678: PPUSH
41679: LD_VAR 0 4
41683: PPUSH
41684: LD_VAR 0 5
41688: PPUSH
41689: CALL_OW 448
41693: IFFALSE 41728
// begin result := [ chassis , engine , control , weapon ] ;
41695: LD_ADDR_VAR 0 6
41699: PUSH
41700: LD_VAR 0 2
41704: PUSH
41705: LD_VAR 0 3
41709: PUSH
41710: LD_VAR 0 4
41714: PUSH
41715: LD_VAR 0 5
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: ST_TO_ADDR
// exit ;
41726: GO 42072
// end ; _chassis := AvailableChassisList ( factory ) ;
41728: LD_ADDR_VAR 0 9
41732: PUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 475
41742: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41743: LD_ADDR_VAR 0 11
41747: PUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 476
41757: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41758: LD_ADDR_VAR 0 12
41762: PUSH
41763: LD_VAR 0 1
41767: PPUSH
41768: CALL_OW 477
41772: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41773: LD_ADDR_VAR 0 10
41777: PUSH
41778: LD_VAR 0 1
41782: PPUSH
41783: CALL_OW 478
41787: ST_TO_ADDR
// if not chassis in _chassis then
41788: LD_VAR 0 2
41792: PUSH
41793: LD_VAR 0 9
41797: IN
41798: NOT
41799: IFFALSE 41825
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41801: LD_ADDR_VAR 0 2
41805: PUSH
41806: LD_VAR 0 9
41810: PUSH
41811: LD_INT 1
41813: PPUSH
41814: LD_VAR 0 9
41818: PPUSH
41819: CALL_OW 12
41823: ARRAY
41824: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41825: LD_VAR 0 2
41829: PPUSH
41830: LD_VAR 0 3
41834: PPUSH
41835: CALL 42077 0 2
41839: NOT
41840: IFFALSE 41899
// repeat engine := _engine [ 1 ] ;
41842: LD_ADDR_VAR 0 3
41846: PUSH
41847: LD_VAR 0 11
41851: PUSH
41852: LD_INT 1
41854: ARRAY
41855: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41856: LD_ADDR_VAR 0 11
41860: PUSH
41861: LD_VAR 0 11
41865: PPUSH
41866: LD_INT 1
41868: PPUSH
41869: CALL_OW 3
41873: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41874: LD_VAR 0 2
41878: PPUSH
41879: LD_VAR 0 3
41883: PPUSH
41884: CALL 42077 0 2
41888: PUSH
41889: LD_VAR 0 11
41893: PUSH
41894: EMPTY
41895: EQUAL
41896: OR
41897: IFFALSE 41842
// if not control in _control then
41899: LD_VAR 0 4
41903: PUSH
41904: LD_VAR 0 12
41908: IN
41909: NOT
41910: IFFALSE 41936
// control := _control [ rand ( 1 , _control ) ] ;
41912: LD_ADDR_VAR 0 4
41916: PUSH
41917: LD_VAR 0 12
41921: PUSH
41922: LD_INT 1
41924: PPUSH
41925: LD_VAR 0 12
41929: PPUSH
41930: CALL_OW 12
41934: ARRAY
41935: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41936: LD_VAR 0 2
41940: PPUSH
41941: LD_VAR 0 5
41945: PPUSH
41946: CALL 42297 0 2
41950: NOT
41951: IFFALSE 42010
// repeat weapon := _weapon [ 1 ] ;
41953: LD_ADDR_VAR 0 5
41957: PUSH
41958: LD_VAR 0 10
41962: PUSH
41963: LD_INT 1
41965: ARRAY
41966: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41967: LD_ADDR_VAR 0 10
41971: PUSH
41972: LD_VAR 0 10
41976: PPUSH
41977: LD_INT 1
41979: PPUSH
41980: CALL_OW 3
41984: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41985: LD_VAR 0 2
41989: PPUSH
41990: LD_VAR 0 5
41994: PPUSH
41995: CALL 42297 0 2
41999: PUSH
42000: LD_VAR 0 10
42004: PUSH
42005: EMPTY
42006: EQUAL
42007: OR
42008: IFFALSE 41953
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42010: LD_VAR 0 1
42014: PPUSH
42015: LD_VAR 0 2
42019: PPUSH
42020: LD_VAR 0 3
42024: PPUSH
42025: LD_VAR 0 4
42029: PPUSH
42030: LD_VAR 0 5
42034: PPUSH
42035: CALL_OW 448
42039: IFFALSE 42072
// result := [ chassis , engine , control , weapon ] ;
42041: LD_ADDR_VAR 0 6
42045: PUSH
42046: LD_VAR 0 2
42050: PUSH
42051: LD_VAR 0 3
42055: PUSH
42056: LD_VAR 0 4
42060: PUSH
42061: LD_VAR 0 5
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 6
42076: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42077: LD_INT 0
42079: PPUSH
// if not chassis or not engine then
42080: LD_VAR 0 1
42084: NOT
42085: PUSH
42086: LD_VAR 0 2
42090: NOT
42091: OR
42092: IFFALSE 42096
// exit ;
42094: GO 42292
// case engine of engine_solar :
42096: LD_VAR 0 2
42100: PUSH
42101: LD_INT 2
42103: DOUBLE
42104: EQUAL
42105: IFTRUE 42109
42107: GO 42147
42109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42110: LD_ADDR_VAR 0 3
42114: PUSH
42115: LD_INT 11
42117: PUSH
42118: LD_INT 12
42120: PUSH
42121: LD_INT 13
42123: PUSH
42124: LD_INT 14
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 3
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: ST_TO_ADDR
42145: GO 42276
42147: LD_INT 1
42149: DOUBLE
42150: EQUAL
42151: IFTRUE 42155
42153: GO 42217
42155: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42156: LD_ADDR_VAR 0 3
42160: PUSH
42161: LD_INT 11
42163: PUSH
42164: LD_INT 12
42166: PUSH
42167: LD_INT 13
42169: PUSH
42170: LD_INT 14
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: LD_INT 2
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 4
42184: PUSH
42185: LD_INT 5
42187: PUSH
42188: LD_INT 21
42190: PUSH
42191: LD_INT 23
42193: PUSH
42194: LD_INT 22
42196: PUSH
42197: LD_INT 24
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
42215: GO 42276
42217: LD_INT 3
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42225
42223: GO 42275
42225: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42226: LD_ADDR_VAR 0 3
42230: PUSH
42231: LD_INT 13
42233: PUSH
42234: LD_INT 14
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 4
42245: PUSH
42246: LD_INT 5
42248: PUSH
42249: LD_INT 21
42251: PUSH
42252: LD_INT 22
42254: PUSH
42255: LD_INT 23
42257: PUSH
42258: LD_INT 24
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
42273: GO 42276
42275: POP
// result := ( chassis in result ) ;
42276: LD_ADDR_VAR 0 3
42280: PUSH
42281: LD_VAR 0 1
42285: PUSH
42286: LD_VAR 0 3
42290: IN
42291: ST_TO_ADDR
// end ;
42292: LD_VAR 0 3
42296: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42297: LD_INT 0
42299: PPUSH
// if not chassis or not weapon then
42300: LD_VAR 0 1
42304: NOT
42305: PUSH
42306: LD_VAR 0 2
42310: NOT
42311: OR
42312: IFFALSE 42316
// exit ;
42314: GO 43342
// case weapon of us_machine_gun :
42316: LD_VAR 0 2
42320: PUSH
42321: LD_INT 2
42323: DOUBLE
42324: EQUAL
42325: IFTRUE 42329
42327: GO 42359
42329: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42330: LD_ADDR_VAR 0 3
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 4
42346: PUSH
42347: LD_INT 5
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: ST_TO_ADDR
42357: GO 43326
42359: LD_INT 3
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42367
42365: GO 42397
42367: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: LD_INT 3
42381: PUSH
42382: LD_INT 4
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: ST_TO_ADDR
42395: GO 43326
42397: LD_INT 11
42399: DOUBLE
42400: EQUAL
42401: IFTRUE 42405
42403: GO 42435
42405: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42406: LD_ADDR_VAR 0 3
42410: PUSH
42411: LD_INT 1
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: LD_INT 4
42422: PUSH
42423: LD_INT 5
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: ST_TO_ADDR
42433: GO 43326
42435: LD_INT 4
42437: DOUBLE
42438: EQUAL
42439: IFTRUE 42443
42441: GO 42469
42443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42444: LD_ADDR_VAR 0 3
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 3
42454: PUSH
42455: LD_INT 4
42457: PUSH
42458: LD_INT 5
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
42467: GO 43326
42469: LD_INT 5
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42477
42475: GO 42503
42477: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42478: LD_ADDR_VAR 0 3
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 3
42488: PUSH
42489: LD_INT 4
42491: PUSH
42492: LD_INT 5
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
42501: GO 43326
42503: LD_INT 9
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42511
42509: GO 42537
42511: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 2
42519: PUSH
42520: LD_INT 3
42522: PUSH
42523: LD_INT 4
42525: PUSH
42526: LD_INT 5
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: ST_TO_ADDR
42535: GO 43326
42537: LD_INT 7
42539: DOUBLE
42540: EQUAL
42541: IFTRUE 42545
42543: GO 42571
42545: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42546: LD_ADDR_VAR 0 3
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 3
42556: PUSH
42557: LD_INT 4
42559: PUSH
42560: LD_INT 5
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: ST_TO_ADDR
42569: GO 43326
42571: LD_INT 12
42573: DOUBLE
42574: EQUAL
42575: IFTRUE 42579
42577: GO 42605
42579: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42580: LD_ADDR_VAR 0 3
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: LD_INT 4
42593: PUSH
42594: LD_INT 5
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: ST_TO_ADDR
42603: GO 43326
42605: LD_INT 13
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42613
42611: GO 42639
42613: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42614: LD_ADDR_VAR 0 3
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 5
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
42637: GO 43326
42639: LD_INT 14
42641: DOUBLE
42642: EQUAL
42643: IFTRUE 42647
42645: GO 42665
42647: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_INT 4
42655: PUSH
42656: LD_INT 5
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: ST_TO_ADDR
42663: GO 43326
42665: LD_INT 6
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42691
42673: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 4
42681: PUSH
42682: LD_INT 5
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: ST_TO_ADDR
42689: GO 43326
42691: LD_INT 10
42693: DOUBLE
42694: EQUAL
42695: IFTRUE 42699
42697: GO 42717
42699: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42700: LD_ADDR_VAR 0 3
42704: PUSH
42705: LD_INT 4
42707: PUSH
42708: LD_INT 5
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: ST_TO_ADDR
42715: GO 43326
42717: LD_INT 22
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42751
42725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42726: LD_ADDR_VAR 0 3
42730: PUSH
42731: LD_INT 11
42733: PUSH
42734: LD_INT 12
42736: PUSH
42737: LD_INT 13
42739: PUSH
42740: LD_INT 14
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
42749: GO 43326
42751: LD_INT 23
42753: DOUBLE
42754: EQUAL
42755: IFTRUE 42759
42757: GO 42785
42759: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42760: LD_ADDR_VAR 0 3
42764: PUSH
42765: LD_INT 11
42767: PUSH
42768: LD_INT 12
42770: PUSH
42771: LD_INT 13
42773: PUSH
42774: LD_INT 14
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: ST_TO_ADDR
42783: GO 43326
42785: LD_INT 24
42787: DOUBLE
42788: EQUAL
42789: IFTRUE 42793
42791: GO 42819
42793: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42794: LD_ADDR_VAR 0 3
42798: PUSH
42799: LD_INT 11
42801: PUSH
42802: LD_INT 12
42804: PUSH
42805: LD_INT 13
42807: PUSH
42808: LD_INT 14
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: ST_TO_ADDR
42817: GO 43326
42819: LD_INT 30
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42853
42827: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 11
42835: PUSH
42836: LD_INT 12
42838: PUSH
42839: LD_INT 13
42841: PUSH
42842: LD_INT 14
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: ST_TO_ADDR
42851: GO 43326
42853: LD_INT 25
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42879
42861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_INT 13
42869: PUSH
42870: LD_INT 14
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43326
42879: LD_INT 27
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42905
42887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 13
42895: PUSH
42896: LD_INT 14
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: ST_TO_ADDR
42903: GO 43326
42905: LD_INT 28
42907: DOUBLE
42908: EQUAL
42909: IFTRUE 42913
42911: GO 42931
42913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42914: LD_ADDR_VAR 0 3
42918: PUSH
42919: LD_INT 13
42921: PUSH
42922: LD_INT 14
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: ST_TO_ADDR
42929: GO 43326
42931: LD_INT 29
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42939
42937: GO 42957
42939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42940: LD_ADDR_VAR 0 3
42944: PUSH
42945: LD_INT 13
42947: PUSH
42948: LD_INT 14
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: ST_TO_ADDR
42955: GO 43326
42957: LD_INT 31
42959: DOUBLE
42960: EQUAL
42961: IFTRUE 42965
42963: GO 42983
42965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_INT 13
42973: PUSH
42974: LD_INT 14
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: ST_TO_ADDR
42981: GO 43326
42983: LD_INT 26
42985: DOUBLE
42986: EQUAL
42987: IFTRUE 42991
42989: GO 43009
42991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42992: LD_ADDR_VAR 0 3
42996: PUSH
42997: LD_INT 13
42999: PUSH
43000: LD_INT 14
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: ST_TO_ADDR
43007: GO 43326
43009: LD_INT 42
43011: DOUBLE
43012: EQUAL
43013: IFTRUE 43017
43015: GO 43043
43017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_INT 21
43025: PUSH
43026: LD_INT 22
43028: PUSH
43029: LD_INT 23
43031: PUSH
43032: LD_INT 24
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
43041: GO 43326
43043: LD_INT 43
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43051
43049: GO 43077
43051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43052: LD_ADDR_VAR 0 3
43056: PUSH
43057: LD_INT 21
43059: PUSH
43060: LD_INT 22
43062: PUSH
43063: LD_INT 23
43065: PUSH
43066: LD_INT 24
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
43075: GO 43326
43077: LD_INT 44
43079: DOUBLE
43080: EQUAL
43081: IFTRUE 43085
43083: GO 43111
43085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43086: LD_ADDR_VAR 0 3
43090: PUSH
43091: LD_INT 21
43093: PUSH
43094: LD_INT 22
43096: PUSH
43097: LD_INT 23
43099: PUSH
43100: LD_INT 24
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: ST_TO_ADDR
43109: GO 43326
43111: LD_INT 45
43113: DOUBLE
43114: EQUAL
43115: IFTRUE 43119
43117: GO 43145
43119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43120: LD_ADDR_VAR 0 3
43124: PUSH
43125: LD_INT 21
43127: PUSH
43128: LD_INT 22
43130: PUSH
43131: LD_INT 23
43133: PUSH
43134: LD_INT 24
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: ST_TO_ADDR
43143: GO 43326
43145: LD_INT 49
43147: DOUBLE
43148: EQUAL
43149: IFTRUE 43153
43151: GO 43179
43153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43154: LD_ADDR_VAR 0 3
43158: PUSH
43159: LD_INT 21
43161: PUSH
43162: LD_INT 22
43164: PUSH
43165: LD_INT 23
43167: PUSH
43168: LD_INT 24
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: ST_TO_ADDR
43177: GO 43326
43179: LD_INT 51
43181: DOUBLE
43182: EQUAL
43183: IFTRUE 43187
43185: GO 43213
43187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_INT 21
43195: PUSH
43196: LD_INT 22
43198: PUSH
43199: LD_INT 23
43201: PUSH
43202: LD_INT 24
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: ST_TO_ADDR
43211: GO 43326
43213: LD_INT 52
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43221
43219: GO 43247
43221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43222: LD_ADDR_VAR 0 3
43226: PUSH
43227: LD_INT 21
43229: PUSH
43230: LD_INT 22
43232: PUSH
43233: LD_INT 23
43235: PUSH
43236: LD_INT 24
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: ST_TO_ADDR
43245: GO 43326
43247: LD_INT 53
43249: DOUBLE
43250: EQUAL
43251: IFTRUE 43255
43253: GO 43273
43255: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43256: LD_ADDR_VAR 0 3
43260: PUSH
43261: LD_INT 23
43263: PUSH
43264: LD_INT 24
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: ST_TO_ADDR
43271: GO 43326
43273: LD_INT 46
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43299
43281: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 23
43289: PUSH
43290: LD_INT 24
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: ST_TO_ADDR
43297: GO 43326
43299: LD_INT 47
43301: DOUBLE
43302: EQUAL
43303: IFTRUE 43307
43305: GO 43325
43307: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43308: LD_ADDR_VAR 0 3
43312: PUSH
43313: LD_INT 23
43315: PUSH
43316: LD_INT 24
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: ST_TO_ADDR
43323: GO 43326
43325: POP
// result := ( chassis in result ) ;
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_VAR 0 1
43335: PUSH
43336: LD_VAR 0 3
43340: IN
43341: ST_TO_ADDR
// end ;
43342: LD_VAR 0 3
43346: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43347: LD_INT 0
43349: PPUSH
43350: PPUSH
43351: PPUSH
43352: PPUSH
43353: PPUSH
43354: PPUSH
43355: PPUSH
// result := array ;
43356: LD_ADDR_VAR 0 5
43360: PUSH
43361: LD_VAR 0 1
43365: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43366: LD_VAR 0 1
43370: NOT
43371: PUSH
43372: LD_VAR 0 2
43376: NOT
43377: OR
43378: PUSH
43379: LD_VAR 0 3
43383: NOT
43384: OR
43385: PUSH
43386: LD_VAR 0 2
43390: PUSH
43391: LD_VAR 0 1
43395: GREATER
43396: OR
43397: PUSH
43398: LD_VAR 0 3
43402: PUSH
43403: LD_VAR 0 1
43407: GREATER
43408: OR
43409: IFFALSE 43413
// exit ;
43411: GO 43709
// if direction then
43413: LD_VAR 0 4
43417: IFFALSE 43481
// begin d := 1 ;
43419: LD_ADDR_VAR 0 9
43423: PUSH
43424: LD_INT 1
43426: ST_TO_ADDR
// if i_from > i_to then
43427: LD_VAR 0 2
43431: PUSH
43432: LD_VAR 0 3
43436: GREATER
43437: IFFALSE 43463
// length := ( array - i_from ) + i_to else
43439: LD_ADDR_VAR 0 11
43443: PUSH
43444: LD_VAR 0 1
43448: PUSH
43449: LD_VAR 0 2
43453: MINUS
43454: PUSH
43455: LD_VAR 0 3
43459: PLUS
43460: ST_TO_ADDR
43461: GO 43479
// length := i_to - i_from ;
43463: LD_ADDR_VAR 0 11
43467: PUSH
43468: LD_VAR 0 3
43472: PUSH
43473: LD_VAR 0 2
43477: MINUS
43478: ST_TO_ADDR
// end else
43479: GO 43542
// begin d := - 1 ;
43481: LD_ADDR_VAR 0 9
43485: PUSH
43486: LD_INT 1
43488: NEG
43489: ST_TO_ADDR
// if i_from > i_to then
43490: LD_VAR 0 2
43494: PUSH
43495: LD_VAR 0 3
43499: GREATER
43500: IFFALSE 43520
// length := i_from - i_to else
43502: LD_ADDR_VAR 0 11
43506: PUSH
43507: LD_VAR 0 2
43511: PUSH
43512: LD_VAR 0 3
43516: MINUS
43517: ST_TO_ADDR
43518: GO 43542
// length := ( array - i_to ) + i_from ;
43520: LD_ADDR_VAR 0 11
43524: PUSH
43525: LD_VAR 0 1
43529: PUSH
43530: LD_VAR 0 3
43534: MINUS
43535: PUSH
43536: LD_VAR 0 2
43540: PLUS
43541: ST_TO_ADDR
// end ; if not length then
43542: LD_VAR 0 11
43546: NOT
43547: IFFALSE 43551
// exit ;
43549: GO 43709
// tmp := array ;
43551: LD_ADDR_VAR 0 10
43555: PUSH
43556: LD_VAR 0 1
43560: ST_TO_ADDR
// for i = 1 to length do
43561: LD_ADDR_VAR 0 6
43565: PUSH
43566: DOUBLE
43567: LD_INT 1
43569: DEC
43570: ST_TO_ADDR
43571: LD_VAR 0 11
43575: PUSH
43576: FOR_TO
43577: IFFALSE 43697
// begin for j = 1 to array do
43579: LD_ADDR_VAR 0 7
43583: PUSH
43584: DOUBLE
43585: LD_INT 1
43587: DEC
43588: ST_TO_ADDR
43589: LD_VAR 0 1
43593: PUSH
43594: FOR_TO
43595: IFFALSE 43683
// begin k := j + d ;
43597: LD_ADDR_VAR 0 8
43601: PUSH
43602: LD_VAR 0 7
43606: PUSH
43607: LD_VAR 0 9
43611: PLUS
43612: ST_TO_ADDR
// if k > array then
43613: LD_VAR 0 8
43617: PUSH
43618: LD_VAR 0 1
43622: GREATER
43623: IFFALSE 43633
// k := 1 ;
43625: LD_ADDR_VAR 0 8
43629: PUSH
43630: LD_INT 1
43632: ST_TO_ADDR
// if not k then
43633: LD_VAR 0 8
43637: NOT
43638: IFFALSE 43650
// k := array ;
43640: LD_ADDR_VAR 0 8
43644: PUSH
43645: LD_VAR 0 1
43649: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43650: LD_ADDR_VAR 0 10
43654: PUSH
43655: LD_VAR 0 10
43659: PPUSH
43660: LD_VAR 0 8
43664: PPUSH
43665: LD_VAR 0 1
43669: PUSH
43670: LD_VAR 0 7
43674: ARRAY
43675: PPUSH
43676: CALL_OW 1
43680: ST_TO_ADDR
// end ;
43681: GO 43594
43683: POP
43684: POP
// array := tmp ;
43685: LD_ADDR_VAR 0 1
43689: PUSH
43690: LD_VAR 0 10
43694: ST_TO_ADDR
// end ;
43695: GO 43576
43697: POP
43698: POP
// result := array ;
43699: LD_ADDR_VAR 0 5
43703: PUSH
43704: LD_VAR 0 1
43708: ST_TO_ADDR
// end ;
43709: LD_VAR 0 5
43713: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43714: LD_INT 0
43716: PPUSH
43717: PPUSH
// result := 0 ;
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_INT 0
43725: ST_TO_ADDR
// if not array or not value in array then
43726: LD_VAR 0 1
43730: NOT
43731: PUSH
43732: LD_VAR 0 2
43736: PUSH
43737: LD_VAR 0 1
43741: IN
43742: NOT
43743: OR
43744: IFFALSE 43748
// exit ;
43746: GO 43802
// for i = 1 to array do
43748: LD_ADDR_VAR 0 4
43752: PUSH
43753: DOUBLE
43754: LD_INT 1
43756: DEC
43757: ST_TO_ADDR
43758: LD_VAR 0 1
43762: PUSH
43763: FOR_TO
43764: IFFALSE 43800
// if value = array [ i ] then
43766: LD_VAR 0 2
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: LD_VAR 0 4
43780: ARRAY
43781: EQUAL
43782: IFFALSE 43798
// begin result := i ;
43784: LD_ADDR_VAR 0 3
43788: PUSH
43789: LD_VAR 0 4
43793: ST_TO_ADDR
// exit ;
43794: POP
43795: POP
43796: GO 43802
// end ;
43798: GO 43763
43800: POP
43801: POP
// end ;
43802: LD_VAR 0 3
43806: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43807: LD_INT 0
43809: PPUSH
// vc_chassis := chassis ;
43810: LD_ADDR_OWVAR 37
43814: PUSH
43815: LD_VAR 0 1
43819: ST_TO_ADDR
// vc_engine := engine ;
43820: LD_ADDR_OWVAR 39
43824: PUSH
43825: LD_VAR 0 2
43829: ST_TO_ADDR
// vc_control := control ;
43830: LD_ADDR_OWVAR 38
43834: PUSH
43835: LD_VAR 0 3
43839: ST_TO_ADDR
// vc_weapon := weapon ;
43840: LD_ADDR_OWVAR 40
43844: PUSH
43845: LD_VAR 0 4
43849: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43850: LD_ADDR_OWVAR 41
43854: PUSH
43855: LD_VAR 0 5
43859: ST_TO_ADDR
// end ;
43860: LD_VAR 0 6
43864: RET
// export function WantPlant ( unit ) ; var task ; begin
43865: LD_INT 0
43867: PPUSH
43868: PPUSH
// result := false ;
43869: LD_ADDR_VAR 0 2
43873: PUSH
43874: LD_INT 0
43876: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43877: LD_ADDR_VAR 0 3
43881: PUSH
43882: LD_VAR 0 1
43886: PPUSH
43887: CALL_OW 437
43891: ST_TO_ADDR
// if task then
43892: LD_VAR 0 3
43896: IFFALSE 43924
// if task [ 1 ] [ 1 ] = p then
43898: LD_VAR 0 3
43902: PUSH
43903: LD_INT 1
43905: ARRAY
43906: PUSH
43907: LD_INT 1
43909: ARRAY
43910: PUSH
43911: LD_STRING p
43913: EQUAL
43914: IFFALSE 43924
// result := true ;
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
// end ;
43924: LD_VAR 0 2
43928: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43929: LD_INT 0
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
// if pos < 1 then
43935: LD_VAR 0 2
43939: PUSH
43940: LD_INT 1
43942: LESS
43943: IFFALSE 43947
// exit ;
43945: GO 44250
// if pos = 1 then
43947: LD_VAR 0 2
43951: PUSH
43952: LD_INT 1
43954: EQUAL
43955: IFFALSE 43988
// result := Replace ( arr , pos [ 1 ] , value ) else
43957: LD_ADDR_VAR 0 4
43961: PUSH
43962: LD_VAR 0 1
43966: PPUSH
43967: LD_VAR 0 2
43971: PUSH
43972: LD_INT 1
43974: ARRAY
43975: PPUSH
43976: LD_VAR 0 3
43980: PPUSH
43981: CALL_OW 1
43985: ST_TO_ADDR
43986: GO 44250
// begin tmp := arr ;
43988: LD_ADDR_VAR 0 6
43992: PUSH
43993: LD_VAR 0 1
43997: ST_TO_ADDR
// s_arr := [ tmp ] ;
43998: LD_ADDR_VAR 0 7
44002: PUSH
44003: LD_VAR 0 6
44007: PUSH
44008: EMPTY
44009: LIST
44010: ST_TO_ADDR
// for i = 1 to pos - 1 do
44011: LD_ADDR_VAR 0 5
44015: PUSH
44016: DOUBLE
44017: LD_INT 1
44019: DEC
44020: ST_TO_ADDR
44021: LD_VAR 0 2
44025: PUSH
44026: LD_INT 1
44028: MINUS
44029: PUSH
44030: FOR_TO
44031: IFFALSE 44076
// begin tmp := tmp [ pos [ i ] ] ;
44033: LD_ADDR_VAR 0 6
44037: PUSH
44038: LD_VAR 0 6
44042: PUSH
44043: LD_VAR 0 2
44047: PUSH
44048: LD_VAR 0 5
44052: ARRAY
44053: ARRAY
44054: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44055: LD_ADDR_VAR 0 7
44059: PUSH
44060: LD_VAR 0 7
44064: PUSH
44065: LD_VAR 0 6
44069: PUSH
44070: EMPTY
44071: LIST
44072: ADD
44073: ST_TO_ADDR
// end ;
44074: GO 44030
44076: POP
44077: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44078: LD_ADDR_VAR 0 6
44082: PUSH
44083: LD_VAR 0 6
44087: PPUSH
44088: LD_VAR 0 2
44092: PUSH
44093: LD_VAR 0 2
44097: ARRAY
44098: PPUSH
44099: LD_VAR 0 3
44103: PPUSH
44104: CALL_OW 1
44108: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44109: LD_ADDR_VAR 0 7
44113: PUSH
44114: LD_VAR 0 7
44118: PPUSH
44119: LD_VAR 0 7
44123: PPUSH
44124: LD_VAR 0 6
44128: PPUSH
44129: CALL_OW 1
44133: ST_TO_ADDR
// for i = s_arr downto 2 do
44134: LD_ADDR_VAR 0 5
44138: PUSH
44139: DOUBLE
44140: LD_VAR 0 7
44144: INC
44145: ST_TO_ADDR
44146: LD_INT 2
44148: PUSH
44149: FOR_DOWNTO
44150: IFFALSE 44234
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44152: LD_ADDR_VAR 0 6
44156: PUSH
44157: LD_VAR 0 7
44161: PUSH
44162: LD_VAR 0 5
44166: PUSH
44167: LD_INT 1
44169: MINUS
44170: ARRAY
44171: PPUSH
44172: LD_VAR 0 2
44176: PUSH
44177: LD_VAR 0 5
44181: PUSH
44182: LD_INT 1
44184: MINUS
44185: ARRAY
44186: PPUSH
44187: LD_VAR 0 7
44191: PUSH
44192: LD_VAR 0 5
44196: ARRAY
44197: PPUSH
44198: CALL_OW 1
44202: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44203: LD_ADDR_VAR 0 7
44207: PUSH
44208: LD_VAR 0 7
44212: PPUSH
44213: LD_VAR 0 5
44217: PUSH
44218: LD_INT 1
44220: MINUS
44221: PPUSH
44222: LD_VAR 0 6
44226: PPUSH
44227: CALL_OW 1
44231: ST_TO_ADDR
// end ;
44232: GO 44149
44234: POP
44235: POP
// result := s_arr [ 1 ] ;
44236: LD_ADDR_VAR 0 4
44240: PUSH
44241: LD_VAR 0 7
44245: PUSH
44246: LD_INT 1
44248: ARRAY
44249: ST_TO_ADDR
// end ; end ;
44250: LD_VAR 0 4
44254: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44255: LD_INT 0
44257: PPUSH
44258: PPUSH
// if not list then
44259: LD_VAR 0 1
44263: NOT
44264: IFFALSE 44268
// exit ;
44266: GO 44359
// i := list [ pos1 ] ;
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: LD_VAR 0 1
44277: PUSH
44278: LD_VAR 0 2
44282: ARRAY
44283: ST_TO_ADDR
// if not i then
44284: LD_VAR 0 5
44288: NOT
44289: IFFALSE 44293
// exit ;
44291: GO 44359
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44293: LD_ADDR_VAR 0 1
44297: PUSH
44298: LD_VAR 0 1
44302: PPUSH
44303: LD_VAR 0 2
44307: PPUSH
44308: LD_VAR 0 1
44312: PUSH
44313: LD_VAR 0 3
44317: ARRAY
44318: PPUSH
44319: CALL_OW 1
44323: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44324: LD_ADDR_VAR 0 1
44328: PUSH
44329: LD_VAR 0 1
44333: PPUSH
44334: LD_VAR 0 3
44338: PPUSH
44339: LD_VAR 0 5
44343: PPUSH
44344: CALL_OW 1
44348: ST_TO_ADDR
// result := list ;
44349: LD_ADDR_VAR 0 4
44353: PUSH
44354: LD_VAR 0 1
44358: ST_TO_ADDR
// end ;
44359: LD_VAR 0 4
44363: RET
// export function Add ( list , pos , val ) ; begin
44364: LD_INT 0
44366: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
44367: LD_ADDR_VAR 0 4
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_VAR 0 3
44386: PPUSH
44387: CALL 43929 0 3
44391: ST_TO_ADDR
44392: LD_VAR 0 4
44396: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44397: LD_INT 0
44399: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44400: LD_ADDR_VAR 0 5
44404: PUSH
44405: LD_VAR 0 1
44409: PPUSH
44410: CALL_OW 250
44414: PPUSH
44415: LD_VAR 0 1
44419: PPUSH
44420: CALL_OW 251
44424: PPUSH
44425: LD_VAR 0 2
44429: PPUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: LD_VAR 0 4
44439: PPUSH
44440: CALL 44450 0 5
44444: ST_TO_ADDR
// end ;
44445: LD_VAR 0 5
44449: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44450: LD_INT 0
44452: PPUSH
44453: PPUSH
44454: PPUSH
44455: PPUSH
// if not list then
44456: LD_VAR 0 3
44460: NOT
44461: IFFALSE 44465
// exit ;
44463: GO 44853
// result := [ ] ;
44465: LD_ADDR_VAR 0 6
44469: PUSH
44470: EMPTY
44471: ST_TO_ADDR
// for i in list do
44472: LD_ADDR_VAR 0 7
44476: PUSH
44477: LD_VAR 0 3
44481: PUSH
44482: FOR_IN
44483: IFFALSE 44685
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44485: LD_ADDR_VAR 0 9
44489: PUSH
44490: LD_VAR 0 7
44494: PPUSH
44495: LD_VAR 0 1
44499: PPUSH
44500: LD_VAR 0 2
44504: PPUSH
44505: CALL_OW 297
44509: ST_TO_ADDR
// if not result then
44510: LD_VAR 0 6
44514: NOT
44515: IFFALSE 44541
// result := [ [ i , tmp ] ] else
44517: LD_ADDR_VAR 0 6
44521: PUSH
44522: LD_VAR 0 7
44526: PUSH
44527: LD_VAR 0 9
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: ST_TO_ADDR
44539: GO 44683
// begin if result [ result ] [ 2 ] < tmp then
44541: LD_VAR 0 6
44545: PUSH
44546: LD_VAR 0 6
44550: ARRAY
44551: PUSH
44552: LD_INT 2
44554: ARRAY
44555: PUSH
44556: LD_VAR 0 9
44560: LESS
44561: IFFALSE 44603
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44563: LD_ADDR_VAR 0 6
44567: PUSH
44568: LD_VAR 0 6
44572: PPUSH
44573: LD_VAR 0 6
44577: PUSH
44578: LD_INT 1
44580: PLUS
44581: PPUSH
44582: LD_VAR 0 7
44586: PUSH
44587: LD_VAR 0 9
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PPUSH
44596: CALL_OW 2
44600: ST_TO_ADDR
44601: GO 44683
// for j = 1 to result do
44603: LD_ADDR_VAR 0 8
44607: PUSH
44608: DOUBLE
44609: LD_INT 1
44611: DEC
44612: ST_TO_ADDR
44613: LD_VAR 0 6
44617: PUSH
44618: FOR_TO
44619: IFFALSE 44681
// begin if tmp < result [ j ] [ 2 ] then
44621: LD_VAR 0 9
44625: PUSH
44626: LD_VAR 0 6
44630: PUSH
44631: LD_VAR 0 8
44635: ARRAY
44636: PUSH
44637: LD_INT 2
44639: ARRAY
44640: LESS
44641: IFFALSE 44679
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 6
44652: PPUSH
44653: LD_VAR 0 8
44657: PPUSH
44658: LD_VAR 0 7
44662: PUSH
44663: LD_VAR 0 9
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PPUSH
44672: CALL_OW 2
44676: ST_TO_ADDR
// break ;
44677: GO 44681
// end ; end ;
44679: GO 44618
44681: POP
44682: POP
// end ; end ;
44683: GO 44482
44685: POP
44686: POP
// if result and not asc then
44687: LD_VAR 0 6
44691: PUSH
44692: LD_VAR 0 4
44696: NOT
44697: AND
44698: IFFALSE 44773
// begin tmp := result ;
44700: LD_ADDR_VAR 0 9
44704: PUSH
44705: LD_VAR 0 6
44709: ST_TO_ADDR
// for i = tmp downto 1 do
44710: LD_ADDR_VAR 0 7
44714: PUSH
44715: DOUBLE
44716: LD_VAR 0 9
44720: INC
44721: ST_TO_ADDR
44722: LD_INT 1
44724: PUSH
44725: FOR_DOWNTO
44726: IFFALSE 44771
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44728: LD_ADDR_VAR 0 6
44732: PUSH
44733: LD_VAR 0 6
44737: PPUSH
44738: LD_VAR 0 9
44742: PUSH
44743: LD_VAR 0 7
44747: MINUS
44748: PUSH
44749: LD_INT 1
44751: PLUS
44752: PPUSH
44753: LD_VAR 0 9
44757: PUSH
44758: LD_VAR 0 7
44762: ARRAY
44763: PPUSH
44764: CALL_OW 1
44768: ST_TO_ADDR
44769: GO 44725
44771: POP
44772: POP
// end ; tmp := [ ] ;
44773: LD_ADDR_VAR 0 9
44777: PUSH
44778: EMPTY
44779: ST_TO_ADDR
// if mode then
44780: LD_VAR 0 5
44784: IFFALSE 44853
// begin for i = 1 to result do
44786: LD_ADDR_VAR 0 7
44790: PUSH
44791: DOUBLE
44792: LD_INT 1
44794: DEC
44795: ST_TO_ADDR
44796: LD_VAR 0 6
44800: PUSH
44801: FOR_TO
44802: IFFALSE 44841
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44804: LD_ADDR_VAR 0 9
44808: PUSH
44809: LD_VAR 0 9
44813: PPUSH
44814: LD_VAR 0 7
44818: PPUSH
44819: LD_VAR 0 6
44823: PUSH
44824: LD_VAR 0 7
44828: ARRAY
44829: PUSH
44830: LD_INT 1
44832: ARRAY
44833: PPUSH
44834: CALL_OW 1
44838: ST_TO_ADDR
44839: GO 44801
44841: POP
44842: POP
// result := tmp ;
44843: LD_ADDR_VAR 0 6
44847: PUSH
44848: LD_VAR 0 9
44852: ST_TO_ADDR
// end ; end ;
44853: LD_VAR 0 6
44857: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44858: LD_INT 0
44860: PPUSH
44861: PPUSH
44862: PPUSH
44863: PPUSH
44864: PPUSH
44865: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44866: LD_ADDR_VAR 0 5
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: EMPTY
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// if not x or not y then
44888: LD_VAR 0 2
44892: NOT
44893: PUSH
44894: LD_VAR 0 3
44898: NOT
44899: OR
44900: IFFALSE 44904
// exit ;
44902: GO 46550
// if not range then
44904: LD_VAR 0 4
44908: NOT
44909: IFFALSE 44919
// range := 10 ;
44911: LD_ADDR_VAR 0 4
44915: PUSH
44916: LD_INT 10
44918: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44919: LD_ADDR_VAR 0 8
44923: PUSH
44924: LD_INT 81
44926: PUSH
44927: LD_VAR 0 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 92
44938: PUSH
44939: LD_VAR 0 2
44943: PUSH
44944: LD_VAR 0 3
44948: PUSH
44949: LD_VAR 0 4
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 3
44962: PUSH
44963: LD_INT 21
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: PPUSH
44982: CALL_OW 69
44986: ST_TO_ADDR
// if not tmp then
44987: LD_VAR 0 8
44991: NOT
44992: IFFALSE 44996
// exit ;
44994: GO 46550
// for i in tmp do
44996: LD_ADDR_VAR 0 6
45000: PUSH
45001: LD_VAR 0 8
45005: PUSH
45006: FOR_IN
45007: IFFALSE 46525
// begin points := [ 0 , 0 , 0 ] ;
45009: LD_ADDR_VAR 0 9
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// bpoints := 1 ;
45028: LD_ADDR_VAR 0 10
45032: PUSH
45033: LD_INT 1
45035: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45036: LD_VAR 0 6
45040: PPUSH
45041: CALL_OW 247
45045: PUSH
45046: LD_INT 1
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45054
45052: GO 45632
45054: POP
// begin if GetClass ( i ) = 1 then
45055: LD_VAR 0 6
45059: PPUSH
45060: CALL_OW 257
45064: PUSH
45065: LD_INT 1
45067: EQUAL
45068: IFFALSE 45089
// points := [ 10 , 5 , 3 ] ;
45070: LD_ADDR_VAR 0 9
45074: PUSH
45075: LD_INT 10
45077: PUSH
45078: LD_INT 5
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45089: LD_VAR 0 6
45093: PPUSH
45094: CALL_OW 257
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 3
45104: PUSH
45105: LD_INT 4
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: LIST
45112: IN
45113: IFFALSE 45134
// points := [ 3 , 2 , 1 ] ;
45115: LD_ADDR_VAR 0 9
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45134: LD_VAR 0 6
45138: PPUSH
45139: CALL_OW 257
45143: PUSH
45144: LD_INT 5
45146: EQUAL
45147: IFFALSE 45168
// points := [ 130 , 5 , 2 ] ;
45149: LD_ADDR_VAR 0 9
45153: PUSH
45154: LD_INT 130
45156: PUSH
45157: LD_INT 5
45159: PUSH
45160: LD_INT 2
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45168: LD_VAR 0 6
45172: PPUSH
45173: CALL_OW 257
45177: PUSH
45178: LD_INT 8
45180: EQUAL
45181: IFFALSE 45202
// points := [ 35 , 35 , 30 ] ;
45183: LD_ADDR_VAR 0 9
45187: PUSH
45188: LD_INT 35
45190: PUSH
45191: LD_INT 35
45193: PUSH
45194: LD_INT 30
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45202: LD_VAR 0 6
45206: PPUSH
45207: CALL_OW 257
45211: PUSH
45212: LD_INT 9
45214: EQUAL
45215: IFFALSE 45236
// points := [ 20 , 55 , 40 ] ;
45217: LD_ADDR_VAR 0 9
45221: PUSH
45222: LD_INT 20
45224: PUSH
45225: LD_INT 55
45227: PUSH
45228: LD_INT 40
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: LIST
45235: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45236: LD_VAR 0 6
45240: PPUSH
45241: CALL_OW 257
45245: PUSH
45246: LD_INT 12
45248: PUSH
45249: LD_INT 16
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: IN
45256: IFFALSE 45277
// points := [ 5 , 3 , 2 ] ;
45258: LD_ADDR_VAR 0 9
45262: PUSH
45263: LD_INT 5
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: LIST
45276: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45277: LD_VAR 0 6
45281: PPUSH
45282: CALL_OW 257
45286: PUSH
45287: LD_INT 17
45289: EQUAL
45290: IFFALSE 45311
// points := [ 100 , 50 , 75 ] ;
45292: LD_ADDR_VAR 0 9
45296: PUSH
45297: LD_INT 100
45299: PUSH
45300: LD_INT 50
45302: PUSH
45303: LD_INT 75
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45311: LD_VAR 0 6
45315: PPUSH
45316: CALL_OW 257
45320: PUSH
45321: LD_INT 15
45323: EQUAL
45324: IFFALSE 45345
// points := [ 10 , 5 , 3 ] ;
45326: LD_ADDR_VAR 0 9
45330: PUSH
45331: LD_INT 10
45333: PUSH
45334: LD_INT 5
45336: PUSH
45337: LD_INT 3
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45345: LD_VAR 0 6
45349: PPUSH
45350: CALL_OW 257
45354: PUSH
45355: LD_INT 14
45357: EQUAL
45358: IFFALSE 45379
// points := [ 10 , 0 , 0 ] ;
45360: LD_ADDR_VAR 0 9
45364: PUSH
45365: LD_INT 10
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45379: LD_VAR 0 6
45383: PPUSH
45384: CALL_OW 257
45388: PUSH
45389: LD_INT 11
45391: EQUAL
45392: IFFALSE 45413
// points := [ 30 , 10 , 5 ] ;
45394: LD_ADDR_VAR 0 9
45398: PUSH
45399: LD_INT 30
45401: PUSH
45402: LD_INT 10
45404: PUSH
45405: LD_INT 5
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: LIST
45412: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45413: LD_VAR 0 1
45417: PPUSH
45418: LD_INT 5
45420: PPUSH
45421: CALL_OW 321
45425: PUSH
45426: LD_INT 2
45428: EQUAL
45429: IFFALSE 45446
// bpoints := bpoints * 1.8 ;
45431: LD_ADDR_VAR 0 10
45435: PUSH
45436: LD_VAR 0 10
45440: PUSH
45441: LD_REAL  1.80000000000000E+0000
45444: MUL
45445: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45446: LD_VAR 0 6
45450: PPUSH
45451: CALL_OW 257
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 3
45464: PUSH
45465: LD_INT 4
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: IN
45474: PUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: LD_INT 51
45482: PPUSH
45483: CALL_OW 321
45487: PUSH
45488: LD_INT 2
45490: EQUAL
45491: AND
45492: IFFALSE 45509
// bpoints := bpoints * 1.2 ;
45494: LD_ADDR_VAR 0 10
45498: PUSH
45499: LD_VAR 0 10
45503: PUSH
45504: LD_REAL  1.20000000000000E+0000
45507: MUL
45508: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45509: LD_VAR 0 6
45513: PPUSH
45514: CALL_OW 257
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: LD_INT 7
45524: PUSH
45525: LD_INT 9
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: LIST
45532: IN
45533: PUSH
45534: LD_VAR 0 1
45538: PPUSH
45539: LD_INT 52
45541: PPUSH
45542: CALL_OW 321
45546: PUSH
45547: LD_INT 2
45549: EQUAL
45550: AND
45551: IFFALSE 45568
// bpoints := bpoints * 1.5 ;
45553: LD_ADDR_VAR 0 10
45557: PUSH
45558: LD_VAR 0 10
45562: PUSH
45563: LD_REAL  1.50000000000000E+0000
45566: MUL
45567: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45568: LD_VAR 0 1
45572: PPUSH
45573: LD_INT 66
45575: PPUSH
45576: CALL_OW 321
45580: PUSH
45581: LD_INT 2
45583: EQUAL
45584: IFFALSE 45601
// bpoints := bpoints * 1.1 ;
45586: LD_ADDR_VAR 0 10
45590: PUSH
45591: LD_VAR 0 10
45595: PUSH
45596: LD_REAL  1.10000000000000E+0000
45599: MUL
45600: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45601: LD_ADDR_VAR 0 10
45605: PUSH
45606: LD_VAR 0 10
45610: PUSH
45611: LD_VAR 0 6
45615: PPUSH
45616: LD_INT 1
45618: PPUSH
45619: CALL_OW 259
45623: PUSH
45624: LD_REAL  1.15000000000000E+0000
45627: MUL
45628: MUL
45629: ST_TO_ADDR
// end ; unit_vehicle :
45630: GO 46454
45632: LD_INT 2
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 46442
45640: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45641: LD_VAR 0 6
45645: PPUSH
45646: CALL_OW 264
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 42
45656: PUSH
45657: LD_INT 24
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: IN
45665: IFFALSE 45686
// points := [ 25 , 5 , 3 ] ;
45667: LD_ADDR_VAR 0 9
45671: PUSH
45672: LD_INT 25
45674: PUSH
45675: LD_INT 5
45677: PUSH
45678: LD_INT 3
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45686: LD_VAR 0 6
45690: PPUSH
45691: CALL_OW 264
45695: PUSH
45696: LD_INT 4
45698: PUSH
45699: LD_INT 43
45701: PUSH
45702: LD_INT 25
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: IN
45710: IFFALSE 45731
// points := [ 40 , 15 , 5 ] ;
45712: LD_ADDR_VAR 0 9
45716: PUSH
45717: LD_INT 40
45719: PUSH
45720: LD_INT 15
45722: PUSH
45723: LD_INT 5
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45731: LD_VAR 0 6
45735: PPUSH
45736: CALL_OW 264
45740: PUSH
45741: LD_INT 3
45743: PUSH
45744: LD_INT 23
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: IN
45751: IFFALSE 45772
// points := [ 7 , 25 , 8 ] ;
45753: LD_ADDR_VAR 0 9
45757: PUSH
45758: LD_INT 7
45760: PUSH
45761: LD_INT 25
45763: PUSH
45764: LD_INT 8
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45772: LD_VAR 0 6
45776: PPUSH
45777: CALL_OW 264
45781: PUSH
45782: LD_INT 5
45784: PUSH
45785: LD_INT 27
45787: PUSH
45788: LD_INT 44
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: LIST
45795: IN
45796: IFFALSE 45817
// points := [ 14 , 50 , 16 ] ;
45798: LD_ADDR_VAR 0 9
45802: PUSH
45803: LD_INT 14
45805: PUSH
45806: LD_INT 50
45808: PUSH
45809: LD_INT 16
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45817: LD_VAR 0 6
45821: PPUSH
45822: CALL_OW 264
45826: PUSH
45827: LD_INT 6
45829: PUSH
45830: LD_INT 46
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: IN
45837: IFFALSE 45858
// points := [ 32 , 120 , 70 ] ;
45839: LD_ADDR_VAR 0 9
45843: PUSH
45844: LD_INT 32
45846: PUSH
45847: LD_INT 120
45849: PUSH
45850: LD_INT 70
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
45858: LD_VAR 0 6
45862: PPUSH
45863: CALL_OW 264
45867: PUSH
45868: LD_INT 7
45870: PUSH
45871: LD_INT 28
45873: PUSH
45874: LD_INT 45
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: IN
45882: IFFALSE 45903
// points := [ 35 , 20 , 45 ] ;
45884: LD_ADDR_VAR 0 9
45888: PUSH
45889: LD_INT 35
45891: PUSH
45892: LD_INT 20
45894: PUSH
45895: LD_INT 45
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: LIST
45902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45903: LD_VAR 0 6
45907: PPUSH
45908: CALL_OW 264
45912: PUSH
45913: LD_INT 47
45915: PUSH
45916: EMPTY
45917: LIST
45918: IN
45919: IFFALSE 45940
// points := [ 67 , 45 , 75 ] ;
45921: LD_ADDR_VAR 0 9
45925: PUSH
45926: LD_INT 67
45928: PUSH
45929: LD_INT 45
45931: PUSH
45932: LD_INT 75
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: LIST
45939: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45940: LD_VAR 0 6
45944: PPUSH
45945: CALL_OW 264
45949: PUSH
45950: LD_INT 26
45952: PUSH
45953: EMPTY
45954: LIST
45955: IN
45956: IFFALSE 45977
// points := [ 120 , 30 , 80 ] ;
45958: LD_ADDR_VAR 0 9
45962: PUSH
45963: LD_INT 120
45965: PUSH
45966: LD_INT 30
45968: PUSH
45969: LD_INT 80
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45977: LD_VAR 0 6
45981: PPUSH
45982: CALL_OW 264
45986: PUSH
45987: LD_INT 22
45989: PUSH
45990: EMPTY
45991: LIST
45992: IN
45993: IFFALSE 46014
// points := [ 40 , 1 , 1 ] ;
45995: LD_ADDR_VAR 0 9
45999: PUSH
46000: LD_INT 40
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46014: LD_VAR 0 6
46018: PPUSH
46019: CALL_OW 264
46023: PUSH
46024: LD_INT 29
46026: PUSH
46027: EMPTY
46028: LIST
46029: IN
46030: IFFALSE 46051
// points := [ 70 , 200 , 400 ] ;
46032: LD_ADDR_VAR 0 9
46036: PUSH
46037: LD_INT 70
46039: PUSH
46040: LD_INT 200
46042: PUSH
46043: LD_INT 400
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: LIST
46050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46051: LD_VAR 0 6
46055: PPUSH
46056: CALL_OW 264
46060: PUSH
46061: LD_INT 14
46063: PUSH
46064: LD_INT 53
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: IN
46071: IFFALSE 46092
// points := [ 40 , 10 , 20 ] ;
46073: LD_ADDR_VAR 0 9
46077: PUSH
46078: LD_INT 40
46080: PUSH
46081: LD_INT 10
46083: PUSH
46084: LD_INT 20
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46092: LD_VAR 0 6
46096: PPUSH
46097: CALL_OW 264
46101: PUSH
46102: LD_INT 9
46104: PUSH
46105: EMPTY
46106: LIST
46107: IN
46108: IFFALSE 46129
// points := [ 5 , 70 , 20 ] ;
46110: LD_ADDR_VAR 0 9
46114: PUSH
46115: LD_INT 5
46117: PUSH
46118: LD_INT 70
46120: PUSH
46121: LD_INT 20
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: LIST
46128: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46129: LD_VAR 0 6
46133: PPUSH
46134: CALL_OW 264
46138: PUSH
46139: LD_INT 10
46141: PUSH
46142: EMPTY
46143: LIST
46144: IN
46145: IFFALSE 46166
// points := [ 35 , 110 , 70 ] ;
46147: LD_ADDR_VAR 0 9
46151: PUSH
46152: LD_INT 35
46154: PUSH
46155: LD_INT 110
46157: PUSH
46158: LD_INT 70
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46166: LD_VAR 0 6
46170: PPUSH
46171: CALL_OW 265
46175: PUSH
46176: LD_INT 25
46178: EQUAL
46179: IFFALSE 46200
// points := [ 80 , 65 , 100 ] ;
46181: LD_ADDR_VAR 0 9
46185: PUSH
46186: LD_INT 80
46188: PUSH
46189: LD_INT 65
46191: PUSH
46192: LD_INT 100
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46200: LD_VAR 0 6
46204: PPUSH
46205: CALL_OW 263
46209: PUSH
46210: LD_INT 1
46212: EQUAL
46213: IFFALSE 46248
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46215: LD_ADDR_VAR 0 10
46219: PUSH
46220: LD_VAR 0 10
46224: PUSH
46225: LD_VAR 0 6
46229: PPUSH
46230: CALL_OW 311
46234: PPUSH
46235: LD_INT 3
46237: PPUSH
46238: CALL_OW 259
46242: PUSH
46243: LD_INT 4
46245: MUL
46246: MUL
46247: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46248: LD_VAR 0 6
46252: PPUSH
46253: CALL_OW 263
46257: PUSH
46258: LD_INT 2
46260: EQUAL
46261: IFFALSE 46312
// begin j := IsControledBy ( i ) ;
46263: LD_ADDR_VAR 0 7
46267: PUSH
46268: LD_VAR 0 6
46272: PPUSH
46273: CALL_OW 312
46277: ST_TO_ADDR
// if j then
46278: LD_VAR 0 7
46282: IFFALSE 46312
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46284: LD_ADDR_VAR 0 10
46288: PUSH
46289: LD_VAR 0 10
46293: PUSH
46294: LD_VAR 0 7
46298: PPUSH
46299: LD_INT 3
46301: PPUSH
46302: CALL_OW 259
46306: PUSH
46307: LD_INT 3
46309: MUL
46310: MUL
46311: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46312: LD_VAR 0 6
46316: PPUSH
46317: CALL_OW 264
46321: PUSH
46322: LD_INT 5
46324: PUSH
46325: LD_INT 6
46327: PUSH
46328: LD_INT 46
46330: PUSH
46331: LD_INT 44
46333: PUSH
46334: LD_INT 47
46336: PUSH
46337: LD_INT 45
46339: PUSH
46340: LD_INT 28
46342: PUSH
46343: LD_INT 7
46345: PUSH
46346: LD_INT 27
46348: PUSH
46349: LD_INT 29
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: IN
46364: PUSH
46365: LD_VAR 0 1
46369: PPUSH
46370: LD_INT 52
46372: PPUSH
46373: CALL_OW 321
46377: PUSH
46378: LD_INT 2
46380: EQUAL
46381: AND
46382: IFFALSE 46399
// bpoints := bpoints * 1.2 ;
46384: LD_ADDR_VAR 0 10
46388: PUSH
46389: LD_VAR 0 10
46393: PUSH
46394: LD_REAL  1.20000000000000E+0000
46397: MUL
46398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46399: LD_VAR 0 6
46403: PPUSH
46404: CALL_OW 264
46408: PUSH
46409: LD_INT 6
46411: PUSH
46412: LD_INT 46
46414: PUSH
46415: LD_INT 47
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: IN
46423: IFFALSE 46440
// bpoints := bpoints * 1.2 ;
46425: LD_ADDR_VAR 0 10
46429: PUSH
46430: LD_VAR 0 10
46434: PUSH
46435: LD_REAL  1.20000000000000E+0000
46438: MUL
46439: ST_TO_ADDR
// end ; unit_building :
46440: GO 46454
46442: LD_INT 3
46444: DOUBLE
46445: EQUAL
46446: IFTRUE 46450
46448: GO 46453
46450: POP
// ; end ;
46451: GO 46454
46453: POP
// for j = 1 to 3 do
46454: LD_ADDR_VAR 0 7
46458: PUSH
46459: DOUBLE
46460: LD_INT 1
46462: DEC
46463: ST_TO_ADDR
46464: LD_INT 3
46466: PUSH
46467: FOR_TO
46468: IFFALSE 46521
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46470: LD_ADDR_VAR 0 5
46474: PUSH
46475: LD_VAR 0 5
46479: PPUSH
46480: LD_VAR 0 7
46484: PPUSH
46485: LD_VAR 0 5
46489: PUSH
46490: LD_VAR 0 7
46494: ARRAY
46495: PUSH
46496: LD_VAR 0 9
46500: PUSH
46501: LD_VAR 0 7
46505: ARRAY
46506: PUSH
46507: LD_VAR 0 10
46511: MUL
46512: PLUS
46513: PPUSH
46514: CALL_OW 1
46518: ST_TO_ADDR
46519: GO 46467
46521: POP
46522: POP
// end ;
46523: GO 45006
46525: POP
46526: POP
// result := Replace ( result , 4 , tmp ) ;
46527: LD_ADDR_VAR 0 5
46531: PUSH
46532: LD_VAR 0 5
46536: PPUSH
46537: LD_INT 4
46539: PPUSH
46540: LD_VAR 0 8
46544: PPUSH
46545: CALL_OW 1
46549: ST_TO_ADDR
// end ;
46550: LD_VAR 0 5
46554: RET
// export function DangerAtRange ( unit , range ) ; begin
46555: LD_INT 0
46557: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46558: LD_ADDR_VAR 0 3
46562: PUSH
46563: LD_VAR 0 1
46567: PPUSH
46568: CALL_OW 255
46572: PPUSH
46573: LD_VAR 0 1
46577: PPUSH
46578: CALL_OW 250
46582: PPUSH
46583: LD_VAR 0 1
46587: PPUSH
46588: CALL_OW 251
46592: PPUSH
46593: LD_VAR 0 2
46597: PPUSH
46598: CALL 44858 0 4
46602: ST_TO_ADDR
// end ;
46603: LD_VAR 0 3
46607: RET
// export function IsExtension ( b ) ; begin
46608: LD_INT 0
46610: PPUSH
// result := GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46611: LD_ADDR_VAR 0 2
46615: PUSH
46616: LD_VAR 0 1
46620: PPUSH
46621: CALL_OW 266
46625: PUSH
46626: LD_INT 23
46628: PUSH
46629: LD_INT 20
46631: PUSH
46632: LD_INT 22
46634: PUSH
46635: LD_INT 17
46637: PUSH
46638: LD_INT 24
46640: PUSH
46641: LD_INT 21
46643: PUSH
46644: LD_INT 19
46646: PUSH
46647: LD_INT 16
46649: PUSH
46650: LD_INT 25
46652: PUSH
46653: LD_INT 18
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: IN
46668: ST_TO_ADDR
// end ;
46669: LD_VAR 0 2
46673: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
46674: LD_INT 0
46676: PPUSH
46677: PPUSH
46678: PPUSH
// result := [ ] ;
46679: LD_ADDR_VAR 0 2
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
46686: LD_ADDR_VAR 0 3
46690: PUSH
46691: LD_INT 21
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PPUSH
46701: CALL_OW 69
46705: ST_TO_ADDR
// if not tmp then
46706: LD_VAR 0 3
46710: NOT
46711: IFFALSE 46715
// exit ;
46713: GO 46765
// for i in tmp do
46715: LD_ADDR_VAR 0 4
46719: PUSH
46720: LD_VAR 0 3
46724: PUSH
46725: FOR_IN
46726: IFFALSE 46763
// if GetBase ( i ) = base then
46728: LD_VAR 0 4
46732: PPUSH
46733: CALL_OW 274
46737: PUSH
46738: LD_VAR 0 1
46742: EQUAL
46743: IFFALSE 46761
// result := result ^ i ;
46745: LD_ADDR_VAR 0 2
46749: PUSH
46750: LD_VAR 0 2
46754: PUSH
46755: LD_VAR 0 4
46759: ADD
46760: ST_TO_ADDR
46761: GO 46725
46763: POP
46764: POP
// end ;
46765: LD_VAR 0 2
46769: RET
// export function ComComplete ( unit , b ) ; var i ; begin
46770: LD_INT 0
46772: PPUSH
46773: PPUSH
// if BuildingStatus ( b ) = bs_build then
46774: LD_VAR 0 2
46778: PPUSH
46779: CALL_OW 461
46783: PUSH
46784: LD_INT 1
46786: EQUAL
46787: IFFALSE 46847
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46789: LD_VAR 0 1
46793: PPUSH
46794: LD_STRING h
46796: PUSH
46797: LD_VAR 0 2
46801: PPUSH
46802: CALL_OW 250
46806: PUSH
46807: LD_VAR 0 2
46811: PPUSH
46812: CALL_OW 251
46816: PUSH
46817: LD_VAR 0 2
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: PPUSH
46843: CALL_OW 446
// end ;
46847: LD_VAR 0 3
46851: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46852: LD_INT 0
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
46858: PPUSH
46859: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
46860: LD_VAR 0 1
46864: NOT
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: CALL_OW 263
46875: PUSH
46876: LD_INT 2
46878: EQUAL
46879: NOT
46880: OR
46881: IFFALSE 46885
// exit ;
46883: GO 47201
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46885: LD_ADDR_VAR 0 6
46889: PUSH
46890: LD_INT 22
46892: PUSH
46893: LD_VAR 0 1
46897: PPUSH
46898: CALL_OW 255
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 30
46912: PUSH
46913: LD_INT 36
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 34
46922: PUSH
46923: LD_INT 31
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PPUSH
46939: CALL_OW 69
46943: ST_TO_ADDR
// if not tmp then
46944: LD_VAR 0 6
46948: NOT
46949: IFFALSE 46953
// exit ;
46951: GO 47201
// result := [ ] ;
46953: LD_ADDR_VAR 0 2
46957: PUSH
46958: EMPTY
46959: ST_TO_ADDR
// for i in tmp do
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_VAR 0 6
46969: PUSH
46970: FOR_IN
46971: IFFALSE 47042
// begin t := UnitsInside ( i ) ;
46973: LD_ADDR_VAR 0 4
46977: PUSH
46978: LD_VAR 0 3
46982: PPUSH
46983: CALL_OW 313
46987: ST_TO_ADDR
// if t then
46988: LD_VAR 0 4
46992: IFFALSE 47040
// for j in t do
46994: LD_ADDR_VAR 0 7
46998: PUSH
46999: LD_VAR 0 4
47003: PUSH
47004: FOR_IN
47005: IFFALSE 47038
// result := Insert ( result , result + 1 , j ) ;
47007: LD_ADDR_VAR 0 2
47011: PUSH
47012: LD_VAR 0 2
47016: PPUSH
47017: LD_VAR 0 2
47021: PUSH
47022: LD_INT 1
47024: PLUS
47025: PPUSH
47026: LD_VAR 0 7
47030: PPUSH
47031: CALL_OW 2
47035: ST_TO_ADDR
47036: GO 47004
47038: POP
47039: POP
// end ;
47040: GO 46970
47042: POP
47043: POP
// if not result then
47044: LD_VAR 0 2
47048: NOT
47049: IFFALSE 47053
// exit ;
47051: GO 47201
// mech := result [ 1 ] ;
47053: LD_ADDR_VAR 0 5
47057: PUSH
47058: LD_VAR 0 2
47062: PUSH
47063: LD_INT 1
47065: ARRAY
47066: ST_TO_ADDR
// if result > 1 then
47067: LD_VAR 0 2
47071: PUSH
47072: LD_INT 1
47074: GREATER
47075: IFFALSE 47187
// for i = 2 to result do
47077: LD_ADDR_VAR 0 3
47081: PUSH
47082: DOUBLE
47083: LD_INT 2
47085: DEC
47086: ST_TO_ADDR
47087: LD_VAR 0 2
47091: PUSH
47092: FOR_TO
47093: IFFALSE 47185
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47095: LD_ADDR_VAR 0 4
47099: PUSH
47100: LD_VAR 0 2
47104: PUSH
47105: LD_VAR 0 3
47109: ARRAY
47110: PPUSH
47111: LD_INT 3
47113: PPUSH
47114: CALL_OW 259
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_VAR 0 3
47128: ARRAY
47129: PPUSH
47130: CALL_OW 432
47134: MINUS
47135: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47136: LD_VAR 0 4
47140: PUSH
47141: LD_VAR 0 5
47145: PPUSH
47146: LD_INT 3
47148: PPUSH
47149: CALL_OW 259
47153: PUSH
47154: LD_VAR 0 5
47158: PPUSH
47159: CALL_OW 432
47163: MINUS
47164: GREATEREQUAL
47165: IFFALSE 47183
// mech := result [ i ] ;
47167: LD_ADDR_VAR 0 5
47171: PUSH
47172: LD_VAR 0 2
47176: PUSH
47177: LD_VAR 0 3
47181: ARRAY
47182: ST_TO_ADDR
// end ;
47183: GO 47092
47185: POP
47186: POP
// ComLinkTo ( vehicle , mech ) ;
47187: LD_VAR 0 1
47191: PPUSH
47192: LD_VAR 0 5
47196: PPUSH
47197: CALL_OW 135
// end ;
47201: LD_VAR 0 2
47205: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings ; begin
47206: LD_INT 0
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
47212: PPUSH
47213: PPUSH
47214: PPUSH
47215: PPUSH
47216: PPUSH
47217: PPUSH
47218: PPUSH
47219: PPUSH
// result := [ ] ;
47220: LD_ADDR_VAR 0 6
47224: PUSH
47225: EMPTY
47226: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47227: LD_VAR 0 1
47231: PPUSH
47232: CALL_OW 266
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: IN
47247: NOT
47248: IFFALSE 47252
// exit ;
47250: GO 48652
// if name then
47252: LD_VAR 0 2
47256: IFFALSE 47272
// SetBName ( base_dep , name ) ;
47258: LD_VAR 0 1
47262: PPUSH
47263: LD_VAR 0 2
47267: PPUSH
47268: CALL_OW 500
// base := GetBase ( base_dep ) ;
47272: LD_ADDR_VAR 0 14
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 274
47286: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47287: LD_ADDR_VAR 0 15
47291: PUSH
47292: LD_VAR 0 1
47296: PPUSH
47297: CALL_OW 255
47301: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47302: LD_ADDR_VAR 0 16
47306: PUSH
47307: LD_VAR 0 1
47311: PPUSH
47312: CALL_OW 248
47316: ST_TO_ADDR
// if sources then
47317: LD_VAR 0 4
47321: IFFALSE 47368
// for i = 1 to 3 do
47323: LD_ADDR_VAR 0 7
47327: PUSH
47328: DOUBLE
47329: LD_INT 1
47331: DEC
47332: ST_TO_ADDR
47333: LD_INT 3
47335: PUSH
47336: FOR_TO
47337: IFFALSE 47366
// AddResourceType ( base , i , sources [ i ] ) ;
47339: LD_VAR 0 14
47343: PPUSH
47344: LD_VAR 0 7
47348: PPUSH
47349: LD_VAR 0 4
47353: PUSH
47354: LD_VAR 0 7
47358: ARRAY
47359: PPUSH
47360: CALL_OW 276
47364: GO 47336
47366: POP
47367: POP
// buildings := GetBaseBuildings ( base ) ;
47368: LD_ADDR_VAR 0 17
47372: PUSH
47373: LD_VAR 0 14
47377: PPUSH
47378: CALL 46674 0 1
47382: ST_TO_ADDR
// InitHc ;
47383: CALL_OW 19
// InitUc ;
47387: CALL_OW 18
// uc_side := side ;
47391: LD_ADDR_OWVAR 20
47395: PUSH
47396: LD_VAR 0 15
47400: ST_TO_ADDR
// uc_nation := nation ;
47401: LD_ADDR_OWVAR 21
47405: PUSH
47406: LD_VAR 0 16
47410: ST_TO_ADDR
// if buildings then
47411: LD_VAR 0 17
47415: IFFALSE 48511
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47417: LD_VAR 0 17
47421: PPUSH
47422: LD_INT 2
47424: PUSH
47425: LD_INT 30
47427: PUSH
47428: LD_INT 32
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 30
47437: PUSH
47438: LD_INT 33
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: LIST
47449: PPUSH
47450: CALL_OW 72
47454: IFFALSE 47537
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47456: LD_ADDR_VAR 0 7
47460: PUSH
47461: LD_VAR 0 17
47465: PPUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 30
47471: PUSH
47472: LD_INT 32
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 30
47481: PUSH
47482: LD_INT 33
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: PPUSH
47494: CALL_OW 72
47498: PUSH
47499: FOR_IN
47500: IFFALSE 47535
// begin if not GetBWeapon ( i ) then
47502: LD_VAR 0 7
47506: PPUSH
47507: CALL_OW 269
47511: NOT
47512: IFFALSE 47533
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
47514: LD_VAR 0 7
47518: PPUSH
47519: LD_VAR 0 7
47523: PPUSH
47524: CALL 48657 0 1
47528: PPUSH
47529: CALL_OW 431
// end ;
47533: GO 47499
47535: POP
47536: POP
// end ; for i = 1 to personel do
47537: LD_ADDR_VAR 0 7
47541: PUSH
47542: DOUBLE
47543: LD_INT 1
47545: DEC
47546: ST_TO_ADDR
47547: LD_VAR 0 5
47551: PUSH
47552: FOR_TO
47553: IFFALSE 48491
// begin if i > 4 then
47555: LD_VAR 0 7
47559: PUSH
47560: LD_INT 4
47562: GREATER
47563: IFFALSE 47567
// break ;
47565: GO 48491
// case i of 1 :
47567: LD_VAR 0 7
47571: PUSH
47572: LD_INT 1
47574: DOUBLE
47575: EQUAL
47576: IFTRUE 47580
47578: GO 47653
47580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47581: LD_ADDR_VAR 0 11
47585: PUSH
47586: LD_VAR 0 17
47590: PPUSH
47591: LD_INT 22
47593: PUSH
47594: LD_VAR 0 15
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 30
47608: PUSH
47609: LD_INT 32
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 30
47618: PUSH
47619: LD_INT 4
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 30
47628: PUSH
47629: LD_INT 5
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PPUSH
47646: CALL_OW 72
47650: ST_TO_ADDR
47651: GO 47875
47653: LD_INT 2
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47661
47659: GO 47723
47661: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47662: LD_ADDR_VAR 0 11
47666: PUSH
47667: LD_VAR 0 17
47671: PPUSH
47672: LD_INT 22
47674: PUSH
47675: LD_VAR 0 15
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 30
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 30
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PPUSH
47716: CALL_OW 72
47720: ST_TO_ADDR
47721: GO 47875
47723: LD_INT 3
47725: DOUBLE
47726: EQUAL
47727: IFTRUE 47731
47729: GO 47793
47731: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47732: LD_ADDR_VAR 0 11
47736: PUSH
47737: LD_VAR 0 17
47741: PPUSH
47742: LD_INT 22
47744: PUSH
47745: LD_VAR 0 15
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: LD_INT 30
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 30
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PPUSH
47786: CALL_OW 72
47790: ST_TO_ADDR
47791: GO 47875
47793: LD_INT 4
47795: DOUBLE
47796: EQUAL
47797: IFTRUE 47801
47799: GO 47874
47801: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47802: LD_ADDR_VAR 0 11
47806: PUSH
47807: LD_VAR 0 17
47811: PPUSH
47812: LD_INT 22
47814: PUSH
47815: LD_VAR 0 15
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 30
47829: PUSH
47830: LD_INT 6
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 30
47839: PUSH
47840: LD_INT 7
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 30
47849: PUSH
47850: LD_INT 8
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PPUSH
47867: CALL_OW 72
47871: ST_TO_ADDR
47872: GO 47875
47874: POP
// x := personel [ i ] ;
47875: LD_ADDR_VAR 0 12
47879: PUSH
47880: LD_VAR 0 5
47884: PUSH
47885: LD_VAR 0 7
47889: ARRAY
47890: ST_TO_ADDR
// if x = - 1 then
47891: LD_VAR 0 12
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: EQUAL
47900: IFFALSE 48109
// begin for j in f do
47902: LD_ADDR_VAR 0 8
47906: PUSH
47907: LD_VAR 0 11
47911: PUSH
47912: FOR_IN
47913: IFFALSE 48105
// repeat InitHc ;
47915: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47919: LD_VAR 0 8
47923: PPUSH
47924: CALL_OW 266
47928: PUSH
47929: LD_INT 5
47931: EQUAL
47932: IFFALSE 48002
// begin if UnitsInside ( j ) < 3 then
47934: LD_VAR 0 8
47938: PPUSH
47939: CALL_OW 313
47943: PUSH
47944: LD_INT 3
47946: LESS
47947: IFFALSE 47983
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47949: LD_INT 0
47951: PPUSH
47952: LD_INT 5
47954: PUSH
47955: LD_INT 8
47957: PUSH
47958: LD_INT 9
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: PUSH
47966: LD_VAR 0 16
47970: ARRAY
47971: PPUSH
47972: LD_VAR 0 3
47976: PPUSH
47977: CALL_OW 380
47981: GO 48000
// PrepareHuman ( false , i , skill ) ;
47983: LD_INT 0
47985: PPUSH
47986: LD_VAR 0 7
47990: PPUSH
47991: LD_VAR 0 3
47995: PPUSH
47996: CALL_OW 380
// end else
48000: GO 48019
// PrepareHuman ( false , i , skill ) ;
48002: LD_INT 0
48004: PPUSH
48005: LD_VAR 0 7
48009: PPUSH
48010: LD_VAR 0 3
48014: PPUSH
48015: CALL_OW 380
// un := CreateHuman ;
48019: LD_ADDR_VAR 0 13
48023: PUSH
48024: CALL_OW 44
48028: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48029: LD_ADDR_VAR 0 6
48033: PUSH
48034: LD_VAR 0 6
48038: PPUSH
48039: LD_INT 1
48041: PPUSH
48042: LD_VAR 0 13
48046: PPUSH
48047: CALL_OW 2
48051: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48052: LD_VAR 0 13
48056: PPUSH
48057: LD_VAR 0 8
48061: PPUSH
48062: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48066: LD_VAR 0 8
48070: PPUSH
48071: CALL_OW 313
48075: PUSH
48076: LD_INT 6
48078: EQUAL
48079: PUSH
48080: LD_VAR 0 8
48084: PPUSH
48085: CALL_OW 266
48089: PUSH
48090: LD_INT 32
48092: PUSH
48093: LD_INT 31
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: IN
48100: OR
48101: IFFALSE 47915
48103: GO 47912
48105: POP
48106: POP
// end else
48107: GO 48489
// for j = 1 to x do
48109: LD_ADDR_VAR 0 8
48113: PUSH
48114: DOUBLE
48115: LD_INT 1
48117: DEC
48118: ST_TO_ADDR
48119: LD_VAR 0 12
48123: PUSH
48124: FOR_TO
48125: IFFALSE 48487
// begin InitHc ;
48127: CALL_OW 19
// if not f then
48131: LD_VAR 0 11
48135: NOT
48136: IFFALSE 48225
// begin PrepareHuman ( false , i , skill ) ;
48138: LD_INT 0
48140: PPUSH
48141: LD_VAR 0 7
48145: PPUSH
48146: LD_VAR 0 3
48150: PPUSH
48151: CALL_OW 380
// un := CreateHuman ;
48155: LD_ADDR_VAR 0 13
48159: PUSH
48160: CALL_OW 44
48164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48165: LD_ADDR_VAR 0 6
48169: PUSH
48170: LD_VAR 0 6
48174: PPUSH
48175: LD_INT 1
48177: PPUSH
48178: LD_VAR 0 13
48182: PPUSH
48183: CALL_OW 2
48187: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48188: LD_VAR 0 13
48192: PPUSH
48193: LD_VAR 0 1
48197: PPUSH
48198: CALL_OW 250
48202: PPUSH
48203: LD_VAR 0 1
48207: PPUSH
48208: CALL_OW 251
48212: PPUSH
48213: LD_INT 10
48215: PPUSH
48216: LD_INT 0
48218: PPUSH
48219: CALL_OW 50
// continue ;
48223: GO 48124
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48225: LD_VAR 0 11
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: CALL_OW 313
48238: PUSH
48239: LD_VAR 0 11
48243: PUSH
48244: LD_INT 1
48246: ARRAY
48247: PPUSH
48248: CALL_OW 266
48252: PUSH
48253: LD_INT 32
48255: PUSH
48256: LD_INT 31
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: IN
48263: AND
48264: PUSH
48265: LD_VAR 0 11
48269: PUSH
48270: LD_INT 1
48272: ARRAY
48273: PPUSH
48274: CALL_OW 313
48278: PUSH
48279: LD_INT 6
48281: EQUAL
48282: OR
48283: IFFALSE 48303
// f := Delete ( f , 1 ) ;
48285: LD_ADDR_VAR 0 11
48289: PUSH
48290: LD_VAR 0 11
48294: PPUSH
48295: LD_INT 1
48297: PPUSH
48298: CALL_OW 3
48302: ST_TO_ADDR
// if not f then
48303: LD_VAR 0 11
48307: NOT
48308: IFFALSE 48326
// begin x := x + 2 ;
48310: LD_ADDR_VAR 0 12
48314: PUSH
48315: LD_VAR 0 12
48319: PUSH
48320: LD_INT 2
48322: PLUS
48323: ST_TO_ADDR
// continue ;
48324: GO 48124
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48326: LD_VAR 0 11
48330: PUSH
48331: LD_INT 1
48333: ARRAY
48334: PPUSH
48335: CALL_OW 266
48339: PUSH
48340: LD_INT 5
48342: EQUAL
48343: IFFALSE 48417
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48345: LD_VAR 0 11
48349: PUSH
48350: LD_INT 1
48352: ARRAY
48353: PPUSH
48354: CALL_OW 313
48358: PUSH
48359: LD_INT 3
48361: LESS
48362: IFFALSE 48398
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48364: LD_INT 0
48366: PPUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 8
48372: PUSH
48373: LD_INT 9
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: LIST
48380: PUSH
48381: LD_VAR 0 16
48385: ARRAY
48386: PPUSH
48387: LD_VAR 0 3
48391: PPUSH
48392: CALL_OW 380
48396: GO 48415
// PrepareHuman ( false , i , skill ) ;
48398: LD_INT 0
48400: PPUSH
48401: LD_VAR 0 7
48405: PPUSH
48406: LD_VAR 0 3
48410: PPUSH
48411: CALL_OW 380
// end else
48415: GO 48434
// PrepareHuman ( false , i , skill ) ;
48417: LD_INT 0
48419: PPUSH
48420: LD_VAR 0 7
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL_OW 380
// un := CreateHuman ;
48434: LD_ADDR_VAR 0 13
48438: PUSH
48439: CALL_OW 44
48443: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48444: LD_ADDR_VAR 0 6
48448: PUSH
48449: LD_VAR 0 6
48453: PPUSH
48454: LD_INT 1
48456: PPUSH
48457: LD_VAR 0 13
48461: PPUSH
48462: CALL_OW 2
48466: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48467: LD_VAR 0 13
48471: PPUSH
48472: LD_VAR 0 11
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PPUSH
48481: CALL_OW 52
// end ;
48485: GO 48124
48487: POP
48488: POP
// end ;
48489: GO 47552
48491: POP
48492: POP
// result := result ^ buildings ;
48493: LD_ADDR_VAR 0 6
48497: PUSH
48498: LD_VAR 0 6
48502: PUSH
48503: LD_VAR 0 17
48507: ADD
48508: ST_TO_ADDR
// end else
48509: GO 48652
// begin for i = 1 to personel do
48511: LD_ADDR_VAR 0 7
48515: PUSH
48516: DOUBLE
48517: LD_INT 1
48519: DEC
48520: ST_TO_ADDR
48521: LD_VAR 0 5
48525: PUSH
48526: FOR_TO
48527: IFFALSE 48650
// begin if i > 4 then
48529: LD_VAR 0 7
48533: PUSH
48534: LD_INT 4
48536: GREATER
48537: IFFALSE 48541
// break ;
48539: GO 48650
// x := personel [ i ] ;
48541: LD_ADDR_VAR 0 12
48545: PUSH
48546: LD_VAR 0 5
48550: PUSH
48551: LD_VAR 0 7
48555: ARRAY
48556: ST_TO_ADDR
// if x = - 1 then
48557: LD_VAR 0 12
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: EQUAL
48566: IFFALSE 48570
// continue ;
48568: GO 48526
// PrepareHuman ( false , i , skill ) ;
48570: LD_INT 0
48572: PPUSH
48573: LD_VAR 0 7
48577: PPUSH
48578: LD_VAR 0 3
48582: PPUSH
48583: CALL_OW 380
// un := CreateHuman ;
48587: LD_ADDR_VAR 0 13
48591: PUSH
48592: CALL_OW 44
48596: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48597: LD_VAR 0 13
48601: PPUSH
48602: LD_VAR 0 1
48606: PPUSH
48607: CALL_OW 250
48611: PPUSH
48612: LD_VAR 0 1
48616: PPUSH
48617: CALL_OW 251
48621: PPUSH
48622: LD_INT 10
48624: PPUSH
48625: LD_INT 0
48627: PPUSH
48628: CALL_OW 50
// result := result ^ un ;
48632: LD_ADDR_VAR 0 6
48636: PUSH
48637: LD_VAR 0 6
48641: PUSH
48642: LD_VAR 0 13
48646: ADD
48647: ST_TO_ADDR
// end ;
48648: GO 48526
48650: POP
48651: POP
// end ; end ;
48652: LD_VAR 0 6
48656: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48657: LD_INT 0
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
48664: PPUSH
48665: PPUSH
48666: PPUSH
48667: PPUSH
48668: PPUSH
48669: PPUSH
48670: PPUSH
48671: PPUSH
48672: PPUSH
48673: PPUSH
48674: PPUSH
// result := false ;
48675: LD_ADDR_VAR 0 2
48679: PUSH
48680: LD_INT 0
48682: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48683: LD_VAR 0 1
48687: NOT
48688: PUSH
48689: LD_VAR 0 1
48693: PPUSH
48694: CALL_OW 266
48698: PUSH
48699: LD_INT 32
48701: PUSH
48702: LD_INT 33
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: IN
48709: NOT
48710: OR
48711: IFFALSE 48715
// exit ;
48713: GO 49846
// nat := GetNation ( tower ) ;
48715: LD_ADDR_VAR 0 11
48719: PUSH
48720: LD_VAR 0 1
48724: PPUSH
48725: CALL_OW 248
48729: ST_TO_ADDR
// side := GetSide ( tower ) ;
48730: LD_ADDR_VAR 0 15
48734: PUSH
48735: LD_VAR 0 1
48739: PPUSH
48740: CALL_OW 255
48744: ST_TO_ADDR
// x := GetX ( tower ) ;
48745: LD_ADDR_VAR 0 9
48749: PUSH
48750: LD_VAR 0 1
48754: PPUSH
48755: CALL_OW 250
48759: ST_TO_ADDR
// y := GetY ( tower ) ;
48760: LD_ADDR_VAR 0 10
48764: PUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 251
48774: ST_TO_ADDR
// if not x or not y then
48775: LD_VAR 0 9
48779: NOT
48780: PUSH
48781: LD_VAR 0 10
48785: NOT
48786: OR
48787: IFFALSE 48791
// exit ;
48789: GO 49846
// weapon := 0 ;
48791: LD_ADDR_VAR 0 17
48795: PUSH
48796: LD_INT 0
48798: ST_TO_ADDR
// fac_list := [ ] ;
48799: LD_ADDR_VAR 0 16
48803: PUSH
48804: EMPTY
48805: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
48806: LD_ADDR_VAR 0 5
48810: PUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL_OW 274
48820: PPUSH
48821: CALL 46674 0 1
48825: PPUSH
48826: LD_INT 30
48828: PUSH
48829: LD_INT 3
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PPUSH
48836: CALL_OW 72
48840: ST_TO_ADDR
// if not factories then
48841: LD_VAR 0 5
48845: NOT
48846: IFFALSE 48850
// exit ;
48848: GO 49846
// for i in factories do
48850: LD_ADDR_VAR 0 7
48854: PUSH
48855: LD_VAR 0 5
48859: PUSH
48860: FOR_IN
48861: IFFALSE 48886
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48863: LD_ADDR_VAR 0 16
48867: PUSH
48868: LD_VAR 0 16
48872: PUSH
48873: LD_VAR 0 7
48877: PPUSH
48878: CALL_OW 478
48882: UNION
48883: ST_TO_ADDR
48884: GO 48860
48886: POP
48887: POP
// if not fac_list then
48888: LD_VAR 0 16
48892: NOT
48893: IFFALSE 48897
// exit ;
48895: GO 49846
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48897: LD_ADDR_VAR 0 4
48901: PUSH
48902: LD_INT 4
48904: PUSH
48905: LD_INT 5
48907: PUSH
48908: LD_INT 9
48910: PUSH
48911: LD_INT 10
48913: PUSH
48914: LD_INT 6
48916: PUSH
48917: LD_INT 7
48919: PUSH
48920: LD_INT 11
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 27
48934: PUSH
48935: LD_INT 28
48937: PUSH
48938: LD_INT 26
48940: PUSH
48941: LD_INT 30
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 43
48952: PUSH
48953: LD_INT 44
48955: PUSH
48956: LD_INT 46
48958: PUSH
48959: LD_INT 45
48961: PUSH
48962: LD_INT 47
48964: PUSH
48965: LD_INT 49
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: PUSH
48981: LD_VAR 0 11
48985: ARRAY
48986: ST_TO_ADDR
// for i in list do
48987: LD_ADDR_VAR 0 7
48991: PUSH
48992: LD_VAR 0 4
48996: PUSH
48997: FOR_IN
48998: IFFALSE 49031
// if not i in fac_list then
49000: LD_VAR 0 7
49004: PUSH
49005: LD_VAR 0 16
49009: IN
49010: NOT
49011: IFFALSE 49029
// list := list diff i ;
49013: LD_ADDR_VAR 0 4
49017: PUSH
49018: LD_VAR 0 4
49022: PUSH
49023: LD_VAR 0 7
49027: DIFF
49028: ST_TO_ADDR
49029: GO 48997
49031: POP
49032: POP
// if not list then
49033: LD_VAR 0 4
49037: NOT
49038: IFFALSE 49042
// exit ;
49040: GO 49846
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49042: LD_VAR 0 11
49046: PUSH
49047: LD_INT 3
49049: EQUAL
49050: PUSH
49051: LD_INT 49
49053: PUSH
49054: LD_VAR 0 4
49058: IN
49059: AND
49060: PUSH
49061: LD_INT 31
49063: PPUSH
49064: LD_VAR 0 15
49068: PPUSH
49069: CALL_OW 321
49073: PUSH
49074: LD_INT 2
49076: EQUAL
49077: AND
49078: IFFALSE 49138
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49080: LD_INT 22
49082: PUSH
49083: LD_VAR 0 15
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 35
49094: PUSH
49095: LD_INT 49
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 91
49104: PUSH
49105: LD_VAR 0 1
49109: PUSH
49110: LD_INT 10
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: LIST
49122: PPUSH
49123: CALL_OW 69
49127: NOT
49128: IFFALSE 49138
// weapon := ru_time_lapser ;
49130: LD_ADDR_VAR 0 17
49134: PUSH
49135: LD_INT 49
49137: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49138: LD_VAR 0 11
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: IN
49153: PUSH
49154: LD_INT 11
49156: PUSH
49157: LD_VAR 0 4
49161: IN
49162: PUSH
49163: LD_INT 30
49165: PUSH
49166: LD_VAR 0 4
49170: IN
49171: OR
49172: AND
49173: PUSH
49174: LD_INT 6
49176: PPUSH
49177: LD_VAR 0 15
49181: PPUSH
49182: CALL_OW 321
49186: PUSH
49187: LD_INT 2
49189: EQUAL
49190: AND
49191: IFFALSE 49356
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49193: LD_INT 22
49195: PUSH
49196: LD_VAR 0 15
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 35
49210: PUSH
49211: LD_INT 11
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 35
49220: PUSH
49221: LD_INT 30
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 91
49235: PUSH
49236: LD_VAR 0 1
49240: PUSH
49241: LD_INT 18
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: LIST
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: PPUSH
49254: CALL_OW 69
49258: NOT
49259: PUSH
49260: LD_INT 22
49262: PUSH
49263: LD_VAR 0 15
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 30
49277: PUSH
49278: LD_INT 32
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 30
49287: PUSH
49288: LD_INT 33
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 91
49302: PUSH
49303: LD_VAR 0 1
49307: PUSH
49308: LD_INT 12
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: PUSH
49321: EMPTY
49322: LIST
49323: PPUSH
49324: CALL_OW 69
49328: PUSH
49329: LD_INT 2
49331: GREATER
49332: AND
49333: IFFALSE 49356
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49335: LD_ADDR_VAR 0 17
49339: PUSH
49340: LD_INT 11
49342: PUSH
49343: LD_INT 30
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_VAR 0 11
49354: ARRAY
49355: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49356: LD_VAR 0 17
49360: NOT
49361: PUSH
49362: LD_INT 40
49364: PPUSH
49365: LD_VAR 0 15
49369: PPUSH
49370: CALL_OW 321
49374: PUSH
49375: LD_INT 2
49377: EQUAL
49378: AND
49379: PUSH
49380: LD_INT 7
49382: PUSH
49383: LD_VAR 0 4
49387: IN
49388: PUSH
49389: LD_INT 28
49391: PUSH
49392: LD_VAR 0 4
49396: IN
49397: OR
49398: PUSH
49399: LD_INT 45
49401: PUSH
49402: LD_VAR 0 4
49406: IN
49407: OR
49408: AND
49409: IFFALSE 49663
// begin hex := GetHexInfo ( x , y ) ;
49411: LD_ADDR_VAR 0 3
49415: PUSH
49416: LD_VAR 0 9
49420: PPUSH
49421: LD_VAR 0 10
49425: PPUSH
49426: CALL_OW 546
49430: ST_TO_ADDR
// if hex [ 1 ] then
49431: LD_VAR 0 3
49435: PUSH
49436: LD_INT 1
49438: ARRAY
49439: IFFALSE 49443
// exit ;
49441: GO 49846
// height := hex [ 2 ] ;
49443: LD_ADDR_VAR 0 14
49447: PUSH
49448: LD_VAR 0 3
49452: PUSH
49453: LD_INT 2
49455: ARRAY
49456: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49457: LD_ADDR_VAR 0 13
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 5
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// for i in tmp do
49480: LD_ADDR_VAR 0 7
49484: PUSH
49485: LD_VAR 0 13
49489: PUSH
49490: FOR_IN
49491: IFFALSE 49661
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49493: LD_ADDR_VAR 0 8
49497: PUSH
49498: LD_VAR 0 9
49502: PPUSH
49503: LD_VAR 0 7
49507: PPUSH
49508: LD_INT 5
49510: PPUSH
49511: CALL_OW 272
49515: PUSH
49516: LD_VAR 0 10
49520: PPUSH
49521: LD_VAR 0 7
49525: PPUSH
49526: LD_INT 5
49528: PPUSH
49529: CALL_OW 273
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49538: LD_VAR 0 8
49542: PUSH
49543: LD_INT 1
49545: ARRAY
49546: PPUSH
49547: LD_VAR 0 8
49551: PUSH
49552: LD_INT 2
49554: ARRAY
49555: PPUSH
49556: CALL_OW 488
49560: IFFALSE 49659
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49562: LD_ADDR_VAR 0 3
49566: PUSH
49567: LD_VAR 0 8
49571: PUSH
49572: LD_INT 1
49574: ARRAY
49575: PPUSH
49576: LD_VAR 0 8
49580: PUSH
49581: LD_INT 2
49583: ARRAY
49584: PPUSH
49585: CALL_OW 546
49589: ST_TO_ADDR
// if hex [ 1 ] then
49590: LD_VAR 0 3
49594: PUSH
49595: LD_INT 1
49597: ARRAY
49598: IFFALSE 49602
// continue ;
49600: GO 49490
// h := hex [ 2 ] ;
49602: LD_ADDR_VAR 0 12
49606: PUSH
49607: LD_VAR 0 3
49611: PUSH
49612: LD_INT 2
49614: ARRAY
49615: ST_TO_ADDR
// if h + 7 < height then
49616: LD_VAR 0 12
49620: PUSH
49621: LD_INT 7
49623: PLUS
49624: PUSH
49625: LD_VAR 0 14
49629: LESS
49630: IFFALSE 49659
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49632: LD_ADDR_VAR 0 17
49636: PUSH
49637: LD_INT 7
49639: PUSH
49640: LD_INT 28
49642: PUSH
49643: LD_INT 45
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: LIST
49650: PUSH
49651: LD_VAR 0 11
49655: ARRAY
49656: ST_TO_ADDR
// break ;
49657: GO 49661
// end ; end ; end ;
49659: GO 49490
49661: POP
49662: POP
// end ; if not weapon then
49663: LD_VAR 0 17
49667: NOT
49668: IFFALSE 49728
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49670: LD_ADDR_VAR 0 4
49674: PUSH
49675: LD_VAR 0 4
49679: PUSH
49680: LD_INT 11
49682: PUSH
49683: LD_INT 30
49685: PUSH
49686: LD_INT 49
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: DIFF
49694: ST_TO_ADDR
// if not list then
49695: LD_VAR 0 4
49699: NOT
49700: IFFALSE 49704
// exit ;
49702: GO 49846
// weapon := list [ rand ( 1 , list ) ] ;
49704: LD_ADDR_VAR 0 17
49708: PUSH
49709: LD_VAR 0 4
49713: PUSH
49714: LD_INT 1
49716: PPUSH
49717: LD_VAR 0 4
49721: PPUSH
49722: CALL_OW 12
49726: ARRAY
49727: ST_TO_ADDR
// end ; if weapon then
49728: LD_VAR 0 17
49732: IFFALSE 49846
// begin tmp := CostOfWeapon ( weapon ) ;
49734: LD_ADDR_VAR 0 13
49738: PUSH
49739: LD_VAR 0 17
49743: PPUSH
49744: CALL_OW 451
49748: ST_TO_ADDR
// j := GetBase ( tower ) ;
49749: LD_ADDR_VAR 0 8
49753: PUSH
49754: LD_VAR 0 1
49758: PPUSH
49759: CALL_OW 274
49763: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49764: LD_VAR 0 8
49768: PPUSH
49769: LD_INT 1
49771: PPUSH
49772: CALL_OW 275
49776: PUSH
49777: LD_VAR 0 13
49781: PUSH
49782: LD_INT 1
49784: ARRAY
49785: GREATEREQUAL
49786: PUSH
49787: LD_VAR 0 8
49791: PPUSH
49792: LD_INT 2
49794: PPUSH
49795: CALL_OW 275
49799: PUSH
49800: LD_VAR 0 13
49804: PUSH
49805: LD_INT 2
49807: ARRAY
49808: GREATEREQUAL
49809: AND
49810: PUSH
49811: LD_VAR 0 8
49815: PPUSH
49816: LD_INT 3
49818: PPUSH
49819: CALL_OW 275
49823: PUSH
49824: LD_VAR 0 13
49828: PUSH
49829: LD_INT 3
49831: ARRAY
49832: GREATEREQUAL
49833: AND
49834: IFFALSE 49846
// result := weapon ;
49836: LD_ADDR_VAR 0 2
49840: PUSH
49841: LD_VAR 0 17
49845: ST_TO_ADDR
// end ; end ;
49846: LD_VAR 0 2
49850: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49851: LD_INT 0
49853: PPUSH
49854: PPUSH
// result := true ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_INT 1
49862: ST_TO_ADDR
// if array1 = array2 then
49863: LD_VAR 0 1
49867: PUSH
49868: LD_VAR 0 2
49872: EQUAL
49873: IFFALSE 49933
// begin for i = 1 to array1 do
49875: LD_ADDR_VAR 0 4
49879: PUSH
49880: DOUBLE
49881: LD_INT 1
49883: DEC
49884: ST_TO_ADDR
49885: LD_VAR 0 1
49889: PUSH
49890: FOR_TO
49891: IFFALSE 49929
// if array1 [ i ] <> array2 [ i ] then
49893: LD_VAR 0 1
49897: PUSH
49898: LD_VAR 0 4
49902: ARRAY
49903: PUSH
49904: LD_VAR 0 2
49908: PUSH
49909: LD_VAR 0 4
49913: ARRAY
49914: NONEQUAL
49915: IFFALSE 49927
// begin result := false ;
49917: LD_ADDR_VAR 0 3
49921: PUSH
49922: LD_INT 0
49924: ST_TO_ADDR
// break ;
49925: GO 49929
// end ;
49927: GO 49890
49929: POP
49930: POP
// end else
49931: GO 49941
// result := false ;
49933: LD_ADDR_VAR 0 3
49937: PUSH
49938: LD_INT 0
49940: ST_TO_ADDR
// end ;
49941: LD_VAR 0 3
49945: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49946: LD_INT 0
49948: PPUSH
49949: PPUSH
49950: PPUSH
// pom := GetBase ( fac ) ;
49951: LD_ADDR_VAR 0 5
49955: PUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 274
49965: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49966: LD_ADDR_VAR 0 4
49970: PUSH
49971: LD_VAR 0 2
49975: PUSH
49976: LD_INT 1
49978: ARRAY
49979: PPUSH
49980: LD_VAR 0 2
49984: PUSH
49985: LD_INT 2
49987: ARRAY
49988: PPUSH
49989: LD_VAR 0 2
49993: PUSH
49994: LD_INT 3
49996: ARRAY
49997: PPUSH
49998: LD_VAR 0 2
50002: PUSH
50003: LD_INT 4
50005: ARRAY
50006: PPUSH
50007: CALL_OW 449
50011: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50012: LD_ADDR_VAR 0 3
50016: PUSH
50017: LD_VAR 0 5
50021: PPUSH
50022: LD_INT 1
50024: PPUSH
50025: CALL_OW 275
50029: PUSH
50030: LD_VAR 0 4
50034: PUSH
50035: LD_INT 1
50037: ARRAY
50038: GREATEREQUAL
50039: PUSH
50040: LD_VAR 0 5
50044: PPUSH
50045: LD_INT 2
50047: PPUSH
50048: CALL_OW 275
50052: PUSH
50053: LD_VAR 0 4
50057: PUSH
50058: LD_INT 2
50060: ARRAY
50061: GREATEREQUAL
50062: AND
50063: PUSH
50064: LD_VAR 0 5
50068: PPUSH
50069: LD_INT 3
50071: PPUSH
50072: CALL_OW 275
50076: PUSH
50077: LD_VAR 0 4
50081: PUSH
50082: LD_INT 3
50084: ARRAY
50085: GREATEREQUAL
50086: AND
50087: ST_TO_ADDR
// end ;
50088: LD_VAR 0 3
50092: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50093: LD_INT 0
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
// pom := GetBase ( building ) ;
50099: LD_ADDR_VAR 0 3
50103: PUSH
50104: LD_VAR 0 1
50108: PPUSH
50109: CALL_OW 274
50113: ST_TO_ADDR
// if not pom then
50114: LD_VAR 0 3
50118: NOT
50119: IFFALSE 50123
// exit ;
50121: GO 50293
// btype := GetBType ( building ) ;
50123: LD_ADDR_VAR 0 5
50127: PUSH
50128: LD_VAR 0 1
50132: PPUSH
50133: CALL_OW 266
50137: ST_TO_ADDR
// if btype = b_armoury then
50138: LD_VAR 0 5
50142: PUSH
50143: LD_INT 4
50145: EQUAL
50146: IFFALSE 50156
// btype := b_barracks ;
50148: LD_ADDR_VAR 0 5
50152: PUSH
50153: LD_INT 5
50155: ST_TO_ADDR
// if btype = b_depot then
50156: LD_VAR 0 5
50160: PUSH
50161: LD_INT 0
50163: EQUAL
50164: IFFALSE 50174
// btype := b_warehouse ;
50166: LD_ADDR_VAR 0 5
50170: PUSH
50171: LD_INT 1
50173: ST_TO_ADDR
// if btype = b_workshop then
50174: LD_VAR 0 5
50178: PUSH
50179: LD_INT 2
50181: EQUAL
50182: IFFALSE 50192
// btype := b_factory ;
50184: LD_ADDR_VAR 0 5
50188: PUSH
50189: LD_INT 3
50191: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50192: LD_ADDR_VAR 0 4
50196: PUSH
50197: LD_VAR 0 5
50201: PPUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL_OW 248
50211: PPUSH
50212: CALL_OW 450
50216: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50217: LD_ADDR_VAR 0 2
50221: PUSH
50222: LD_VAR 0 3
50226: PPUSH
50227: LD_INT 1
50229: PPUSH
50230: CALL_OW 275
50234: PUSH
50235: LD_VAR 0 4
50239: PUSH
50240: LD_INT 1
50242: ARRAY
50243: GREATEREQUAL
50244: PUSH
50245: LD_VAR 0 3
50249: PPUSH
50250: LD_INT 2
50252: PPUSH
50253: CALL_OW 275
50257: PUSH
50258: LD_VAR 0 4
50262: PUSH
50263: LD_INT 2
50265: ARRAY
50266: GREATEREQUAL
50267: AND
50268: PUSH
50269: LD_VAR 0 3
50273: PPUSH
50274: LD_INT 3
50276: PPUSH
50277: CALL_OW 275
50281: PUSH
50282: LD_VAR 0 4
50286: PUSH
50287: LD_INT 3
50289: ARRAY
50290: GREATEREQUAL
50291: AND
50292: ST_TO_ADDR
// end ;
50293: LD_VAR 0 2
50297: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50298: LD_INT 0
50300: PPUSH
50301: PPUSH
50302: PPUSH
// pom := GetBase ( building ) ;
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 274
50317: ST_TO_ADDR
// if not pom then
50318: LD_VAR 0 4
50322: NOT
50323: IFFALSE 50327
// exit ;
50325: GO 50428
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50327: LD_ADDR_VAR 0 5
50331: PUSH
50332: LD_VAR 0 2
50336: PPUSH
50337: LD_VAR 0 1
50341: PPUSH
50342: CALL_OW 248
50346: PPUSH
50347: CALL_OW 450
50351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50352: LD_ADDR_VAR 0 3
50356: PUSH
50357: LD_VAR 0 4
50361: PPUSH
50362: LD_INT 1
50364: PPUSH
50365: CALL_OW 275
50369: PUSH
50370: LD_VAR 0 5
50374: PUSH
50375: LD_INT 1
50377: ARRAY
50378: GREATEREQUAL
50379: PUSH
50380: LD_VAR 0 4
50384: PPUSH
50385: LD_INT 2
50387: PPUSH
50388: CALL_OW 275
50392: PUSH
50393: LD_VAR 0 5
50397: PUSH
50398: LD_INT 2
50400: ARRAY
50401: GREATEREQUAL
50402: AND
50403: PUSH
50404: LD_VAR 0 4
50408: PPUSH
50409: LD_INT 3
50411: PPUSH
50412: CALL_OW 275
50416: PUSH
50417: LD_VAR 0 5
50421: PUSH
50422: LD_INT 3
50424: ARRAY
50425: GREATEREQUAL
50426: AND
50427: ST_TO_ADDR
// end ;
50428: LD_VAR 0 3
50432: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
50433: LD_INT 0
50435: PPUSH
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
50440: PPUSH
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
// result := false ;
50445: LD_ADDR_VAR 0 6
50449: PUSH
50450: LD_INT 0
50452: ST_TO_ADDR
// if not base or not btype or not x or not y then
50453: LD_VAR 0 1
50457: NOT
50458: PUSH
50459: LD_VAR 0 2
50463: NOT
50464: OR
50465: PUSH
50466: LD_VAR 0 3
50470: NOT
50471: OR
50472: PUSH
50473: LD_VAR 0 4
50477: NOT
50478: OR
50479: IFFALSE 50483
// exit ;
50481: GO 50997
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
50483: LD_ADDR_VAR 0 12
50487: PUSH
50488: LD_VAR 0 2
50492: PPUSH
50493: LD_VAR 0 3
50497: PPUSH
50498: LD_VAR 0 4
50502: PPUSH
50503: LD_VAR 0 5
50507: PPUSH
50508: LD_VAR 0 1
50512: PUSH
50513: LD_INT 1
50515: ARRAY
50516: PPUSH
50517: CALL_OW 248
50521: PPUSH
50522: LD_INT 0
50524: PPUSH
50525: CALL 51826 0 6
50529: ST_TO_ADDR
// if not hexes then
50530: LD_VAR 0 12
50534: NOT
50535: IFFALSE 50539
// exit ;
50537: GO 50997
// for i = 1 to hexes do
50539: LD_ADDR_VAR 0 7
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_VAR 0 12
50553: PUSH
50554: FOR_TO
50555: IFFALSE 50995
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50557: LD_ADDR_VAR 0 11
50561: PUSH
50562: LD_VAR 0 12
50566: PUSH
50567: LD_VAR 0 7
50571: ARRAY
50572: PUSH
50573: LD_INT 1
50575: ARRAY
50576: PPUSH
50577: LD_VAR 0 12
50581: PUSH
50582: LD_VAR 0 7
50586: ARRAY
50587: PUSH
50588: LD_INT 2
50590: ARRAY
50591: PPUSH
50592: CALL_OW 428
50596: ST_TO_ADDR
// if not tmp or GetType ( tmp ) = unit_building then
50597: LD_VAR 0 11
50601: NOT
50602: PUSH
50603: LD_VAR 0 11
50607: PPUSH
50608: CALL_OW 247
50612: PUSH
50613: LD_INT 3
50615: EQUAL
50616: OR
50617: IFFALSE 50621
// continue ;
50619: GO 50554
// result := true ;
50621: LD_ADDR_VAR 0 6
50625: PUSH
50626: LD_INT 1
50628: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50629: LD_ADDR_VAR 0 15
50633: PUSH
50634: LD_INT 22
50636: PUSH
50637: LD_VAR 0 11
50641: PPUSH
50642: CALL_OW 255
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 30
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 30
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: LIST
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PPUSH
50683: CALL_OW 69
50687: ST_TO_ADDR
// if dep then
50688: LD_VAR 0 15
50692: IFFALSE 50828
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50694: LD_ADDR_VAR 0 14
50698: PUSH
50699: LD_VAR 0 15
50703: PUSH
50704: LD_INT 1
50706: ARRAY
50707: PPUSH
50708: CALL_OW 250
50712: PPUSH
50713: LD_VAR 0 15
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: CALL_OW 254
50726: PPUSH
50727: LD_INT 5
50729: PPUSH
50730: CALL_OW 272
50734: PUSH
50735: LD_VAR 0 15
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PPUSH
50744: CALL_OW 251
50748: PPUSH
50749: LD_VAR 0 15
50753: PUSH
50754: LD_INT 1
50756: ARRAY
50757: PPUSH
50758: CALL_OW 254
50762: PPUSH
50763: LD_INT 5
50765: PPUSH
50766: CALL_OW 273
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50775: LD_VAR 0 14
50779: PUSH
50780: LD_INT 1
50782: ARRAY
50783: PPUSH
50784: LD_VAR 0 14
50788: PUSH
50789: LD_INT 2
50791: ARRAY
50792: PPUSH
50793: CALL_OW 488
50797: IFFALSE 50828
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50799: LD_VAR 0 11
50803: PPUSH
50804: LD_VAR 0 14
50808: PUSH
50809: LD_INT 1
50811: ARRAY
50812: PPUSH
50813: LD_VAR 0 14
50817: PUSH
50818: LD_INT 2
50820: ARRAY
50821: PPUSH
50822: CALL_OW 111
// continue ;
50826: GO 50554
// end ; end ; r := GetDir ( tmp ) ;
50828: LD_ADDR_VAR 0 13
50832: PUSH
50833: LD_VAR 0 11
50837: PPUSH
50838: CALL_OW 254
50842: ST_TO_ADDR
// if r = 5 then
50843: LD_VAR 0 13
50847: PUSH
50848: LD_INT 5
50850: EQUAL
50851: IFFALSE 50861
// r := 0 ;
50853: LD_ADDR_VAR 0 13
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// for j = r to 5 do
50861: LD_ADDR_VAR 0 8
50865: PUSH
50866: DOUBLE
50867: LD_VAR 0 13
50871: DEC
50872: ST_TO_ADDR
50873: LD_INT 5
50875: PUSH
50876: FOR_TO
50877: IFFALSE 50991
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50879: LD_ADDR_VAR 0 9
50883: PUSH
50884: LD_VAR 0 11
50888: PPUSH
50889: CALL_OW 250
50893: PPUSH
50894: LD_VAR 0 8
50898: PPUSH
50899: LD_INT 2
50901: PPUSH
50902: CALL_OW 272
50906: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50907: LD_ADDR_VAR 0 10
50911: PUSH
50912: LD_VAR 0 11
50916: PPUSH
50917: CALL_OW 251
50921: PPUSH
50922: LD_VAR 0 8
50926: PPUSH
50927: LD_INT 2
50929: PPUSH
50930: CALL_OW 273
50934: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50935: LD_VAR 0 9
50939: PPUSH
50940: LD_VAR 0 10
50944: PPUSH
50945: CALL_OW 488
50949: PUSH
50950: LD_VAR 0 9
50954: PPUSH
50955: LD_VAR 0 10
50959: PPUSH
50960: CALL_OW 428
50964: NOT
50965: AND
50966: IFFALSE 50989
// begin ComMoveXY ( tmp , _x , _y ) ;
50968: LD_VAR 0 11
50972: PPUSH
50973: LD_VAR 0 9
50977: PPUSH
50978: LD_VAR 0 10
50982: PPUSH
50983: CALL_OW 111
// break ;
50987: GO 50991
// end ; end ;
50989: GO 50876
50991: POP
50992: POP
// end ;
50993: GO 50554
50995: POP
50996: POP
// end ;
50997: LD_VAR 0 6
51001: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
51002: LD_INT 0
51004: PPUSH
51005: PPUSH
51006: PPUSH
51007: PPUSH
51008: PPUSH
51009: PPUSH
51010: PPUSH
51011: PPUSH
51012: PPUSH
// result := false ;
51013: LD_ADDR_VAR 0 6
51017: PUSH
51018: LD_INT 0
51020: ST_TO_ADDR
// if not bdepot or not GetBType ( bdepot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51021: LD_VAR 0 1
51025: NOT
51026: PUSH
51027: LD_VAR 0 1
51031: PPUSH
51032: CALL_OW 266
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: IN
51047: NOT
51048: OR
51049: PUSH
51050: LD_VAR 0 2
51054: NOT
51055: OR
51056: PUSH
51057: LD_VAR 0 5
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: LD_INT 4
51076: PUSH
51077: LD_INT 5
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: IN
51088: NOT
51089: OR
51090: PUSH
51091: LD_VAR 0 3
51095: PPUSH
51096: LD_VAR 0 4
51100: PPUSH
51101: CALL_OW 488
51105: NOT
51106: OR
51107: IFFALSE 51111
// exit ;
51109: GO 51821
// pom := GetBase ( bdepot ) ;
51111: LD_ADDR_VAR 0 9
51115: PUSH
51116: LD_VAR 0 1
51120: PPUSH
51121: CALL_OW 274
51125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
51126: LD_ADDR_VAR 0 10
51130: PUSH
51131: LD_VAR 0 2
51135: PPUSH
51136: LD_VAR 0 1
51140: PPUSH
51141: CALL_OW 248
51145: PPUSH
51146: CALL_OW 450
51150: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51151: LD_VAR 0 9
51155: PPUSH
51156: LD_INT 1
51158: PPUSH
51159: CALL_OW 275
51163: PUSH
51164: LD_VAR 0 10
51168: PUSH
51169: LD_INT 1
51171: ARRAY
51172: GREATEREQUAL
51173: PUSH
51174: LD_VAR 0 9
51178: PPUSH
51179: LD_INT 2
51181: PPUSH
51182: CALL_OW 275
51186: PUSH
51187: LD_VAR 0 10
51191: PUSH
51192: LD_INT 2
51194: ARRAY
51195: GREATEREQUAL
51196: AND
51197: PUSH
51198: LD_VAR 0 9
51202: PPUSH
51203: LD_INT 3
51205: PPUSH
51206: CALL_OW 275
51210: PUSH
51211: LD_VAR 0 10
51215: PUSH
51216: LD_INT 3
51218: ARRAY
51219: GREATEREQUAL
51220: AND
51221: NOT
51222: IFFALSE 51226
// exit ;
51224: GO 51821
// if GetBType ( bdepot ) = b_depot then
51226: LD_VAR 0 1
51230: PPUSH
51231: CALL_OW 266
51235: PUSH
51236: LD_INT 0
51238: EQUAL
51239: IFFALSE 51251
// dist := 28 else
51241: LD_ADDR_VAR 0 13
51245: PUSH
51246: LD_INT 28
51248: ST_TO_ADDR
51249: GO 51259
// dist := 36 ;
51251: LD_ADDR_VAR 0 13
51255: PUSH
51256: LD_INT 36
51258: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
51259: LD_VAR 0 1
51263: PPUSH
51264: LD_VAR 0 3
51268: PPUSH
51269: LD_VAR 0 4
51273: PPUSH
51274: CALL_OW 297
51278: PUSH
51279: LD_VAR 0 13
51283: GREATER
51284: IFFALSE 51288
// exit ;
51286: GO 51821
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
51288: LD_ADDR_VAR 0 11
51292: PUSH
51293: LD_VAR 0 2
51297: PPUSH
51298: LD_VAR 0 3
51302: PPUSH
51303: LD_VAR 0 4
51307: PPUSH
51308: LD_VAR 0 5
51312: PPUSH
51313: LD_VAR 0 1
51317: PPUSH
51318: CALL_OW 248
51322: PPUSH
51323: LD_INT 0
51325: PPUSH
51326: CALL 51826 0 6
51330: ST_TO_ADDR
// if not hexes then
51331: LD_VAR 0 11
51335: NOT
51336: IFFALSE 51340
// exit ;
51338: GO 51821
// hex := GetHexInfo ( x , y ) ;
51340: LD_ADDR_VAR 0 14
51344: PUSH
51345: LD_VAR 0 3
51349: PPUSH
51350: LD_VAR 0 4
51354: PPUSH
51355: CALL_OW 546
51359: ST_TO_ADDR
// if hex [ 1 ] then
51360: LD_VAR 0 14
51364: PUSH
51365: LD_INT 1
51367: ARRAY
51368: IFFALSE 51372
// exit ;
51370: GO 51821
// height := hex [ 2 ] ;
51372: LD_ADDR_VAR 0 12
51376: PUSH
51377: LD_VAR 0 14
51381: PUSH
51382: LD_INT 2
51384: ARRAY
51385: ST_TO_ADDR
// for i = 1 to hexes do
51386: LD_ADDR_VAR 0 7
51390: PUSH
51391: DOUBLE
51392: LD_INT 1
51394: DEC
51395: ST_TO_ADDR
51396: LD_VAR 0 11
51400: PUSH
51401: FOR_TO
51402: IFFALSE 51730
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51404: LD_VAR 0 11
51408: PUSH
51409: LD_VAR 0 7
51413: ARRAY
51414: PUSH
51415: LD_INT 1
51417: ARRAY
51418: PPUSH
51419: LD_VAR 0 11
51423: PUSH
51424: LD_VAR 0 7
51428: ARRAY
51429: PUSH
51430: LD_INT 2
51432: ARRAY
51433: PPUSH
51434: CALL_OW 488
51438: NOT
51439: IFFALSE 51443
// continue ;
51441: GO 51401
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51443: LD_ADDR_VAR 0 8
51447: PUSH
51448: LD_VAR 0 11
51452: PUSH
51453: LD_VAR 0 7
51457: ARRAY
51458: PUSH
51459: LD_INT 1
51461: ARRAY
51462: PPUSH
51463: LD_VAR 0 11
51467: PUSH
51468: LD_VAR 0 7
51472: ARRAY
51473: PUSH
51474: LD_INT 2
51476: ARRAY
51477: PPUSH
51478: CALL_OW 546
51482: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51483: LD_VAR 0 8
51487: PUSH
51488: LD_INT 1
51490: ARRAY
51491: PUSH
51492: LD_VAR 0 8
51496: PUSH
51497: LD_INT 2
51499: ARRAY
51500: PUSH
51501: LD_VAR 0 12
51505: PUSH
51506: LD_INT 2
51508: PLUS
51509: GREATER
51510: OR
51511: PUSH
51512: LD_VAR 0 8
51516: PUSH
51517: LD_INT 2
51519: ARRAY
51520: PUSH
51521: LD_VAR 0 12
51525: PUSH
51526: LD_INT 2
51528: MINUS
51529: LESS
51530: OR
51531: PUSH
51532: LD_VAR 0 8
51536: PUSH
51537: LD_INT 3
51539: ARRAY
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 8
51546: PUSH
51547: LD_INT 9
51549: PUSH
51550: LD_INT 10
51552: PUSH
51553: LD_INT 11
51555: PUSH
51556: LD_INT 12
51558: PUSH
51559: LD_INT 13
51561: PUSH
51562: LD_INT 16
51564: PUSH
51565: LD_INT 17
51567: PUSH
51568: LD_INT 18
51570: PUSH
51571: LD_INT 19
51573: PUSH
51574: LD_INT 20
51576: PUSH
51577: LD_INT 21
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: IN
51595: NOT
51596: OR
51597: PUSH
51598: LD_VAR 0 8
51602: PUSH
51603: LD_INT 5
51605: ARRAY
51606: NOT
51607: OR
51608: PUSH
51609: LD_VAR 0 8
51613: PUSH
51614: LD_INT 6
51616: ARRAY
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 7
51626: PUSH
51627: LD_INT 9
51629: PUSH
51630: LD_INT 10
51632: PUSH
51633: LD_INT 11
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: IN
51644: NOT
51645: OR
51646: PUSH
51647: LD_VAR 0 11
51651: PUSH
51652: LD_VAR 0 7
51656: ARRAY
51657: PUSH
51658: LD_INT 1
51660: ARRAY
51661: PPUSH
51662: LD_VAR 0 11
51666: PUSH
51667: LD_VAR 0 7
51671: ARRAY
51672: PUSH
51673: LD_INT 2
51675: ARRAY
51676: PPUSH
51677: CALL_OW 428
51681: PUSH
51682: LD_INT 0
51684: GREATER
51685: OR
51686: PUSH
51687: LD_VAR 0 11
51691: PUSH
51692: LD_VAR 0 7
51696: ARRAY
51697: PUSH
51698: LD_INT 1
51700: ARRAY
51701: PPUSH
51702: LD_VAR 0 11
51706: PUSH
51707: LD_VAR 0 7
51711: ARRAY
51712: PUSH
51713: LD_INT 2
51715: ARRAY
51716: PPUSH
51717: CALL_OW 351
51721: OR
51722: IFFALSE 51728
// exit ;
51724: POP
51725: POP
51726: GO 51821
// end ;
51728: GO 51401
51730: POP
51731: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
51732: LD_VAR 0 1
51736: PPUSH
51737: CALL_OW 255
51741: PPUSH
51742: LD_VAR 0 3
51746: PPUSH
51747: LD_VAR 0 4
51751: PPUSH
51752: LD_INT 20
51754: PPUSH
51755: CALL 44858 0 4
51759: PUSH
51760: LD_INT 4
51762: ARRAY
51763: IFFALSE 51767
// exit ;
51765: GO 51821
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , GetSide ( bdepot ) ) then
51767: LD_VAR 0 2
51771: PUSH
51772: LD_INT 29
51774: PUSH
51775: LD_INT 30
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: IN
51782: PUSH
51783: LD_VAR 0 3
51787: PPUSH
51788: LD_VAR 0 4
51792: PPUSH
51793: LD_VAR 0 1
51797: PPUSH
51798: CALL_OW 255
51802: PPUSH
51803: CALL_OW 440
51807: NOT
51808: AND
51809: IFFALSE 51813
// exit ;
51811: GO 51821
// result := true ;
51813: LD_ADDR_VAR 0 6
51817: PUSH
51818: LD_INT 1
51820: ST_TO_ADDR
// end ;
51821: LD_VAR 0 6
51825: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
51826: LD_INT 0
51828: PPUSH
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
51833: PPUSH
51834: PPUSH
51835: PPUSH
51836: PPUSH
51837: PPUSH
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
51844: PPUSH
51845: PPUSH
51846: PPUSH
51847: PPUSH
51848: PPUSH
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
51853: PPUSH
51854: PPUSH
51855: PPUSH
51856: PPUSH
51857: PPUSH
51858: PPUSH
51859: PPUSH
51860: PPUSH
51861: PPUSH
51862: PPUSH
51863: PPUSH
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
51881: PPUSH
51882: PPUSH
51883: PPUSH
51884: PPUSH
51885: PPUSH
// result = [ ] ;
51886: LD_ADDR_VAR 0 7
51890: PUSH
51891: EMPTY
51892: ST_TO_ADDR
// temp_list = [ ] ;
51893: LD_ADDR_VAR 0 9
51897: PUSH
51898: EMPTY
51899: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
51900: LD_VAR 0 4
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: LD_INT 4
51919: PUSH
51920: LD_INT 5
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: IN
51931: NOT
51932: PUSH
51933: LD_VAR 0 1
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: IN
51948: PUSH
51949: LD_VAR 0 5
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: LD_INT 3
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: IN
51968: NOT
51969: AND
51970: OR
51971: IFFALSE 51975
// exit ;
51973: GO 70360
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
51975: LD_VAR 0 1
51979: PUSH
51980: LD_INT 6
51982: PUSH
51983: LD_INT 7
51985: PUSH
51986: LD_INT 8
51988: PUSH
51989: LD_INT 13
51991: PUSH
51992: LD_INT 12
51994: PUSH
51995: LD_INT 15
51997: PUSH
51998: LD_INT 11
52000: PUSH
52001: LD_INT 14
52003: PUSH
52004: LD_INT 10
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: IN
52018: IFFALSE 52028
// btype = b_lab ;
52020: LD_ADDR_VAR 0 1
52024: PUSH
52025: LD_INT 6
52027: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52028: LD_VAR 0 6
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 2
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: IN
52047: NOT
52048: PUSH
52049: LD_VAR 0 1
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: LD_INT 6
52068: PUSH
52069: LD_INT 36
52071: PUSH
52072: LD_INT 4
52074: PUSH
52075: LD_INT 5
52077: PUSH
52078: LD_INT 31
52080: PUSH
52081: LD_INT 32
52083: PUSH
52084: LD_INT 33
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: IN
52100: NOT
52101: PUSH
52102: LD_VAR 0 6
52106: PUSH
52107: LD_INT 1
52109: EQUAL
52110: AND
52111: OR
52112: PUSH
52113: LD_VAR 0 1
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: IN
52128: NOT
52129: PUSH
52130: LD_VAR 0 6
52134: PUSH
52135: LD_INT 2
52137: EQUAL
52138: AND
52139: OR
52140: IFFALSE 52150
// mode = 0 ;
52142: LD_ADDR_VAR 0 6
52146: PUSH
52147: LD_INT 0
52149: ST_TO_ADDR
// case mode of 0 :
52150: LD_VAR 0 6
52154: PUSH
52155: LD_INT 0
52157: DOUBLE
52158: EQUAL
52159: IFTRUE 52163
52161: GO 63616
52163: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52164: LD_ADDR_VAR 0 11
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: LD_INT 1
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52357: LD_ADDR_VAR 0 12
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: NEG
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 1
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52553: LD_ADDR_VAR 0 13
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: LD_INT 2
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 2
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: LD_INT 3
52704: NEG
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52752: LD_ADDR_VAR 0 14
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 2
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: LD_INT 1
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 3
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 3
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 1
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52948: LD_ADDR_VAR 0 15
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 1
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53141: LD_ADDR_VAR 0 16
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 2
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 2
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53334: LD_ADDR_VAR 0 17
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 1
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 2
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: NEG
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53564: LD_ADDR_VAR 0 18
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 0
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 0
53719: PUSH
53720: LD_INT 2
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53794: LD_ADDR_VAR 0 19
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 2
53890: NEG
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 0
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 0
53949: PUSH
53950: LD_INT 2
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54024: LD_ADDR_VAR 0 20
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 0
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: NEG
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 1
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 2
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 2
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54254: LD_ADDR_VAR 0 21
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: LD_INT 2
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 0
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 1
54419: NEG
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 2
54430: NEG
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: NEG
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 2
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54484: LD_ADDR_VAR 0 22
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 2
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 2
54660: NEG
54661: PUSH
54662: LD_INT 0
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: NEG
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 2
54683: NEG
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54714: LD_ADDR_VAR 0 23
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: NEG
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: LD_INT 0
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: LD_INT 1
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 2
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 2
54925: NEG
54926: PUSH
54927: LD_INT 3
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
54994: LD_ADDR_VAR 0 24
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: NEG
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: PUSH
55140: LD_INT 2
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: EMPTY
55222: LIST
55223: LIST
55224: PUSH
55225: LD_INT 3
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: LD_INT 2
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55270: LD_ADDR_VAR 0 25
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 2
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 2
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 1
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: LD_INT 0
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 2
55457: NEG
55458: PUSH
55459: LD_INT 1
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 1
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: LD_INT 3
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55544: LD_ADDR_VAR 0 26
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 0
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 1
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 2
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: LD_INT 2
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: NEG
55744: PUSH
55745: LD_INT 2
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: LD_INT 3
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 3
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 2
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55820: LD_ADDR_VAR 0 27
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 2
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56100: LD_ADDR_VAR 0 28
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 2
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: LD_INT 2
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: LD_INT 2
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 2
56311: NEG
56312: PUSH
56313: LD_INT 3
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 3
56347: NEG
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56382: LD_ADDR_VAR 0 29
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 0
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: NEG
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 2
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 2
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 1
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: NEG
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: NEG
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: NEG
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56661: LD_ADDR_VAR 0 30
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: LD_INT 2
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 3
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56939: LD_ADDR_VAR 0 31
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 0
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 0
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 2
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 2
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 2
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 1
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: LD_INT 2
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57217: LD_ADDR_VAR 0 32
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 2
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: NEG
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: NEG
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 3
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: LD_INT 3
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57495: LD_ADDR_VAR 0 33
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 1
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 3
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 1
57728: NEG
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 3
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57774: LD_ADDR_VAR 0 34
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 0
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 2
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 2
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 2
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: LD_INT 0
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: LD_INT 1
57945: NEG
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: LD_INT 2
57953: NEG
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: LD_INT 3
57969: NEG
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 1
57977: PUSH
57978: LD_INT 2
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 2
57998: PUSH
57999: LD_INT 3
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58054: LD_ADDR_VAR 0 35
58058: PUSH
58059: LD_INT 0
58061: PUSH
58062: LD_INT 0
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 1
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: LD_INT 1
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: LD_INT 0
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58166: LD_ADDR_VAR 0 36
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 1
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 1
58204: PUSH
58205: LD_INT 1
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 1
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: NEG
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 1
58247: NEG
58248: PUSH
58249: LD_INT 2
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58278: LD_ADDR_VAR 0 37
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 0
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 1
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58390: LD_ADDR_VAR 0 38
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 1
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: NEG
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58502: LD_ADDR_VAR 0 39
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: PUSH
58541: LD_INT 1
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 0
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 1
58571: NEG
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 1
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58614: LD_ADDR_VAR 0 40
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 0
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 0
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 1
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58726: LD_ADDR_VAR 0 41
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: LD_INT 2
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: NEG
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 3
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: PUSH
58929: LD_INT 1
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 3
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 3
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 3
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: LD_INT 3
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: NEG
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: LD_INT 3
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59076: LD_ADDR_VAR 0 42
59080: PUSH
59081: LD_INT 0
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 1
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: NEG
59146: PUSH
59147: LD_INT 1
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: NEG
59158: PUSH
59159: LD_INT 2
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 1
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 2
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: LD_INT 3
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 3
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 3
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 0
59352: PUSH
59353: LD_INT 3
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: LD_INT 3
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59426: LD_ADDR_VAR 0 43
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 0
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 1
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 2
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 1
59561: PUSH
59562: LD_INT 2
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: NEG
59582: PUSH
59583: LD_INT 1
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 2
59592: NEG
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 1
59615: NEG
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 3
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 3
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: LD_INT 3
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59774: LD_ADDR_VAR 0 44
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 1
59802: PUSH
59803: LD_INT 0
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: NEG
59844: PUSH
59845: LD_INT 1
59847: NEG
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 1
59867: PUSH
59868: LD_INT 1
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 2
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 1
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: LD_INT 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 2
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 2
59952: NEG
59953: PUSH
59954: LD_INT 2
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 2
59964: NEG
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: LD_INT 1
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: LD_INT 3
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 3
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: NEG
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 3
60048: NEG
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 3
60059: NEG
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: NEG
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 3
60083: NEG
60084: PUSH
60085: LD_INT 3
60087: NEG
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60124: LD_ADDR_VAR 0 45
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 0
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 0
60172: PUSH
60173: LD_INT 1
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: LD_INT 0
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: NEG
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: EMPTY
60200: LIST
60201: LIST
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: LD_INT 2
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: PUSH
60229: LD_INT 1
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: PUSH
60250: LD_INT 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: LD_INT 2
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: LD_INT 2
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 1
60279: NEG
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: LD_INT 1
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: NEG
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 1
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: PUSH
60361: LD_INT 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: LD_INT 3
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60474: LD_ADDR_VAR 0 46
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 1
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 1
60512: PUSH
60513: LD_INT 1
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: LD_INT 1
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: NEG
60533: PUSH
60534: LD_INT 0
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 1
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 2
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: PUSH
60590: LD_INT 0
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 2
60599: PUSH
60600: LD_INT 1
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 1
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 0
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: LD_INT 0
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 3
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: LD_INT 3
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 3
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: LD_INT 0
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60822: LD_ADDR_VAR 0 47
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: LD_INT 0
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 1
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 2
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: LD_INT 1
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 2
60949: NEG
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60973: LD_ADDR_VAR 0 48
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: LD_INT 0
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 1
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 0
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 1
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 2
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: PUSH
61099: LD_INT 1
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61120: LD_ADDR_VAR 0 49
61124: PUSH
61125: LD_INT 0
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 0
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 1
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 1
61178: NEG
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: LD_INT 0
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61264: LD_ADDR_VAR 0 50
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 0
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: LD_INT 1
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: NEG
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 2
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 1
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 0
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: NEG
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61408: LD_ADDR_VAR 0 51
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: NEG
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PUSH
61487: LD_INT 1
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 0
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 2
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61555: LD_ADDR_VAR 0 52
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: LD_INT 0
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 0
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 0
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: LD_INT 0
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: LD_INT 2
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 1
61648: NEG
61649: PUSH
61650: LD_INT 1
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61706: LD_ADDR_VAR 0 53
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 0
61723: PUSH
61724: LD_INT 1
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: LD_INT 1
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 1
61764: NEG
61765: PUSH
61766: LD_INT 0
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 1
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 2
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 0
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: PUSH
61811: LD_INT 1
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: LD_INT 0
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 1
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: LD_INT 2
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 2
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 2
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61936: LD_ADDR_VAR 0 54
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 0
61953: PUSH
61954: LD_INT 1
61956: NEG
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 0
61984: PUSH
61985: LD_INT 1
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 1
62005: NEG
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: NEG
62018: PUSH
62019: LD_INT 2
62021: NEG
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 2
62032: NEG
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 2
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 2
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 1
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: NEG
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 2
62112: NEG
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 2
62123: NEG
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62166: LD_ADDR_VAR 0 55
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 0
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 1
62224: NEG
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 2
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 1
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 0
62321: PUSH
62322: LD_INT 2
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 2
62353: NEG
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: NEG
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62396: LD_ADDR_VAR 0 56
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 1
62477: NEG
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 0
62489: PUSH
62490: LD_INT 2
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 1
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 2
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 1
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 2
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62626: LD_ADDR_VAR 0 57
62630: PUSH
62631: LD_INT 0
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: PUSH
62641: LD_INT 0
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: PUSH
62655: LD_INT 0
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 0
62674: PUSH
62675: LD_INT 1
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: LD_INT 0
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 1
62695: NEG
62696: PUSH
62697: LD_INT 1
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 2
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 2
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 2
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 0
62781: PUSH
62782: LD_INT 2
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 2
62813: NEG
62814: PUSH
62815: LD_INT 1
62817: NEG
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: EMPTY
62832: LIST
62833: LIST
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62856: LD_ADDR_VAR 0 58
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: LD_INT 0
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 2
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: LD_INT 0
62949: PUSH
62950: LD_INT 2
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: LD_INT 1
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 1
63001: PUSH
63002: LD_INT 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: LD_INT 2
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: NEG
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 2
63043: NEG
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: PUSH
63053: LD_INT 2
63055: NEG
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63086: LD_ADDR_VAR 0 59
63090: PUSH
63091: LD_INT 0
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 1
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 1
63144: NEG
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: NEG
63156: PUSH
63157: LD_INT 1
63159: NEG
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63174: LD_ADDR_VAR 0 60
63178: PUSH
63179: LD_INT 0
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 1
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 0
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63262: LD_ADDR_VAR 0 61
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 1
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 1
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63350: LD_ADDR_VAR 0 62
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: PUSH
63389: LD_INT 1
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: NEG
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: LD_INT 1
63423: NEG
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63438: LD_ADDR_VAR 0 63
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_INT 1
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 1
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 1
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 1
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 1
63507: NEG
63508: PUSH
63509: LD_INT 1
63511: NEG
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63526: LD_ADDR_VAR 0 64
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 1
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: LD_INT 0
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: NEG
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: ST_TO_ADDR
// end ; 1 :
63614: GO 69511
63616: LD_INT 1
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63624
63622: GO 66247
63624: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63625: LD_ADDR_VAR 0 11
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: LD_INT 3
63636: NEG
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 3
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 1
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: LIST
63668: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63669: LD_ADDR_VAR 0 12
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 1
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63710: LD_ADDR_VAR 0 13
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63750: LD_ADDR_VAR 0 14
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 3
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 3
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 2
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: LIST
63790: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63791: LD_ADDR_VAR 0 15
63795: PUSH
63796: LD_INT 2
63798: NEG
63799: PUSH
63800: LD_INT 1
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 3
63809: NEG
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63835: LD_ADDR_VAR 0 16
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: LD_INT 3
63846: NEG
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 2
63858: NEG
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: NEG
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: LIST
63880: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63881: LD_ADDR_VAR 0 17
63885: PUSH
63886: LD_INT 1
63888: NEG
63889: PUSH
63890: LD_INT 3
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: LD_INT 3
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: LD_INT 2
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63925: LD_ADDR_VAR 0 18
63929: PUSH
63930: LD_INT 2
63932: PUSH
63933: LD_INT 1
63935: NEG
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 3
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 3
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: LIST
63965: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63966: LD_ADDR_VAR 0 19
63970: PUSH
63971: LD_INT 3
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 3
63983: PUSH
63984: LD_INT 3
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: LD_INT 3
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64006: LD_ADDR_VAR 0 20
64010: PUSH
64011: LD_INT 1
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: LD_INT 0
64023: PUSH
64024: LD_INT 3
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: PUSH
64031: LD_INT 1
64033: NEG
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: LIST
64046: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64047: LD_ADDR_VAR 0 21
64051: PUSH
64052: LD_INT 2
64054: NEG
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 3
64065: NEG
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 3
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64091: LD_ADDR_VAR 0 22
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 3
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 3
64122: NEG
64123: PUSH
64124: LD_INT 3
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64137: LD_ADDR_VAR 0 23
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 3
64147: NEG
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: LD_INT 1
64155: NEG
64156: PUSH
64157: LD_INT 4
64159: NEG
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64181: LD_ADDR_VAR 0 24
64185: PUSH
64186: LD_INT 3
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 3
64198: PUSH
64199: LD_INT 1
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 4
64209: PUSH
64210: LD_INT 1
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: LIST
64221: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64222: LD_ADDR_VAR 0 25
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 4
64239: PUSH
64240: LD_INT 3
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 3
64249: PUSH
64250: LD_INT 4
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64262: LD_ADDR_VAR 0 26
64266: PUSH
64267: LD_INT 0
64269: PUSH
64270: LD_INT 3
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 4
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: LD_INT 3
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64303: LD_ADDR_VAR 0 27
64307: PUSH
64308: LD_INT 3
64310: NEG
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 4
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64347: LD_ADDR_VAR 0 28
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: LD_INT 4
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 4
64378: NEG
64379: PUSH
64380: LD_INT 3
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64393: LD_ADDR_VAR 0 29
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: LD_INT 3
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 3
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 4
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 4
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: LD_INT 3
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: LD_INT 5
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 5
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: PUSH
64492: LD_INT 4
64494: NEG
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 6
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 0
64514: PUSH
64515: LD_INT 6
64517: NEG
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: PUSH
64526: LD_INT 5
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
64548: LD_ADDR_VAR 0 30
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: LD_INT 1
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 3
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 3
64576: PUSH
64577: LD_INT 1
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: LD_INT 3
64586: PUSH
64587: LD_INT 1
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 4
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 4
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 5
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 5
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 5
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 6
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 6
64669: PUSH
64670: LD_INT 1
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
64691: LD_ADDR_VAR 0 31
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: LD_INT 3
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 2
64718: PUSH
64719: LD_INT 3
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 4
64728: PUSH
64729: LD_INT 3
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 4
64738: PUSH
64739: LD_INT 4
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: PUSH
64749: LD_INT 4
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 5
64758: PUSH
64759: LD_INT 4
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 5
64768: PUSH
64769: LD_INT 5
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 4
64778: PUSH
64779: LD_INT 5
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 6
64788: PUSH
64789: LD_INT 5
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 6
64798: PUSH
64799: LD_INT 6
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: LD_INT 5
64808: PUSH
64809: LD_INT 6
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
64830: LD_ADDR_VAR 0 32
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 3
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 3
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 4
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: LD_INT 5
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 5
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 1
64919: NEG
64920: PUSH
64921: LD_INT 4
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 1
64930: PUSH
64931: LD_INT 6
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 6
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 1
64950: NEG
64951: PUSH
64952: LD_INT 5
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
64973: LD_ADDR_VAR 0 33
64977: PUSH
64978: LD_INT 2
64980: NEG
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: NEG
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 4
65025: NEG
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 4
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 4
65048: NEG
65049: PUSH
65050: LD_INT 1
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 5
65059: NEG
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 5
65070: NEG
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 5
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 6
65093: NEG
65094: PUSH
65095: LD_INT 0
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 6
65104: NEG
65105: PUSH
65106: LD_INT 1
65108: NEG
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65128: LD_ADDR_VAR 0 34
65132: PUSH
65133: LD_INT 2
65135: NEG
65136: PUSH
65137: LD_INT 3
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 3
65147: NEG
65148: PUSH
65149: LD_INT 2
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 3
65159: NEG
65160: PUSH
65161: LD_INT 3
65163: NEG
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 3
65171: NEG
65172: PUSH
65173: LD_INT 4
65175: NEG
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 4
65183: NEG
65184: PUSH
65185: LD_INT 3
65187: NEG
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 4
65195: NEG
65196: PUSH
65197: LD_INT 4
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 4
65207: NEG
65208: PUSH
65209: LD_INT 5
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 5
65219: NEG
65220: PUSH
65221: LD_INT 4
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 5
65231: NEG
65232: PUSH
65233: LD_INT 5
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 5
65243: NEG
65244: PUSH
65245: LD_INT 6
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 6
65255: NEG
65256: PUSH
65257: LD_INT 5
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 6
65267: NEG
65268: PUSH
65269: LD_INT 6
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65291: LD_ADDR_VAR 0 41
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 2
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: NEG
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 1
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65335: LD_ADDR_VAR 0 42
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 0
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 2
65352: PUSH
65353: LD_INT 1
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65376: LD_ADDR_VAR 0 43
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 2
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 3
65393: PUSH
65394: LD_INT 2
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 2
65403: PUSH
65404: LD_INT 3
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: LIST
65415: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65416: LD_ADDR_VAR 0 44
65420: PUSH
65421: LD_INT 0
65423: PUSH
65424: LD_INT 2
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: NEG
65444: PUSH
65445: LD_INT 2
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65457: LD_ADDR_VAR 0 45
65461: PUSH
65462: LD_INT 2
65464: NEG
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 2
65475: NEG
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: NEG
65487: PUSH
65488: LD_INT 1
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65501: LD_ADDR_VAR 0 46
65505: PUSH
65506: LD_INT 2
65508: NEG
65509: PUSH
65510: LD_INT 2
65512: NEG
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 2
65520: NEG
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 3
65532: NEG
65533: PUSH
65534: LD_INT 2
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
65547: LD_ADDR_VAR 0 47
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: LD_INT 3
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65580: LD_ADDR_VAR 0 48
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 2
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
65611: LD_ADDR_VAR 0 49
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: LD_INT 1
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 3
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
65640: LD_ADDR_VAR 0 50
65644: PUSH
65645: LD_INT 2
65647: PUSH
65648: LD_INT 3
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 3
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
65669: LD_ADDR_VAR 0 51
65673: PUSH
65674: LD_INT 1
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: PUSH
65685: LD_INT 2
65687: NEG
65688: PUSH
65689: LD_INT 1
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65700: LD_ADDR_VAR 0 52
65704: PUSH
65705: LD_INT 3
65707: NEG
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 3
65719: NEG
65720: PUSH
65721: LD_INT 2
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65733: LD_ADDR_VAR 0 53
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: LD_INT 3
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: LD_INT 3
65755: NEG
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 1
65763: PUSH
65764: LD_INT 2
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65777: LD_ADDR_VAR 0 54
65781: PUSH
65782: LD_INT 2
65784: PUSH
65785: LD_INT 1
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 0
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65818: LD_ADDR_VAR 0 55
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 2
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 3
65835: PUSH
65836: LD_INT 3
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: LIST
65857: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65858: LD_ADDR_VAR 0 56
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 3
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 1
65885: NEG
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65899: LD_ADDR_VAR 0 57
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 3
65917: NEG
65918: PUSH
65919: LD_INT 0
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 3
65928: NEG
65929: PUSH
65930: LD_INT 1
65932: NEG
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: LIST
65942: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65943: LD_ADDR_VAR 0 58
65947: PUSH
65948: LD_INT 2
65950: NEG
65951: PUSH
65952: LD_INT 3
65954: NEG
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: LD_INT 3
65962: NEG
65963: PUSH
65964: LD_INT 2
65966: NEG
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 3
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
65989: LD_ADDR_VAR 0 59
65993: PUSH
65994: LD_INT 1
65996: NEG
65997: PUSH
65998: LD_INT 2
66000: NEG
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 2
66011: NEG
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: EMPTY
66029: LIST
66030: LIST
66031: LIST
66032: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66033: LD_ADDR_VAR 0 60
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: LD_INT 1
66043: NEG
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 2
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66074: LD_ADDR_VAR 0 61
66078: PUSH
66079: LD_INT 2
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 2
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66114: LD_ADDR_VAR 0 62
66118: PUSH
66119: LD_INT 1
66121: PUSH
66122: LD_INT 2
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: LD_INT 2
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: LIST
66154: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66155: LD_ADDR_VAR 0 63
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: LD_INT 1
66188: NEG
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: LIST
66198: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66199: LD_ADDR_VAR 0 64
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: LD_INT 2
66210: NEG
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: EMPTY
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 2
66230: NEG
66231: PUSH
66232: LD_INT 2
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// end ; 2 :
66245: GO 69511
66247: LD_INT 2
66249: DOUBLE
66250: EQUAL
66251: IFTRUE 66255
66253: GO 69510
66255: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66256: LD_ADDR_VAR 0 29
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: PUSH
66274: LD_INT 1
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 5
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 5
66294: PUSH
66295: LD_INT 1
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 3
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 3
66324: PUSH
66325: LD_INT 1
66327: NEG
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: LD_INT 2
66338: NEG
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 5
66346: PUSH
66347: LD_INT 2
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 3
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 4
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 4
66386: PUSH
66387: LD_INT 4
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 3
66396: PUSH
66397: LD_INT 4
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 2
66406: PUSH
66407: LD_INT 3
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 2
66416: PUSH
66417: LD_INT 2
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 2
66436: PUSH
66437: LD_INT 4
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: PUSH
66444: LD_INT 0
66446: PUSH
66447: LD_INT 4
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 3
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: PUSH
66467: LD_INT 4
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: PUSH
66477: LD_INT 5
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 0
66486: PUSH
66487: LD_INT 5
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 1
66496: NEG
66497: PUSH
66498: LD_INT 4
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: NEG
66508: PUSH
66509: LD_INT 3
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: LD_INT 5
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 3
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: NEG
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 3
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 4
66595: NEG
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 4
66606: NEG
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 4
66618: NEG
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 2
66630: NEG
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 4
66641: NEG
66642: PUSH
66643: LD_INT 4
66645: NEG
66646: PUSH
66647: EMPTY
66648: LIST
66649: LIST
66650: PUSH
66651: LD_INT 4
66653: NEG
66654: PUSH
66655: LD_INT 5
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 3
66665: NEG
66666: PUSH
66667: LD_INT 4
66669: NEG
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: NEG
66678: PUSH
66679: LD_INT 3
66681: NEG
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 4
66689: NEG
66690: PUSH
66691: LD_INT 3
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 5
66701: NEG
66702: PUSH
66703: LD_INT 4
66705: NEG
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 5
66713: NEG
66714: PUSH
66715: LD_INT 5
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 3
66725: NEG
66726: PUSH
66727: LD_INT 5
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 5
66737: NEG
66738: PUSH
66739: LD_INT 3
66741: NEG
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: LIST
66785: LIST
66786: LIST
66787: LIST
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
66794: LD_ADDR_VAR 0 30
66798: PUSH
66799: LD_INT 4
66801: PUSH
66802: LD_INT 4
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 5
66821: PUSH
66822: LD_INT 4
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 5
66831: PUSH
66832: LD_INT 5
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 4
66841: PUSH
66842: LD_INT 5
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 3
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 5
66871: PUSH
66872: LD_INT 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: LD_INT 5
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: LD_INT 2
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: LD_INT 3
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 1
66921: PUSH
66922: LD_INT 4
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 4
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: NEG
66942: PUSH
66943: LD_INT 3
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 1
66952: NEG
66953: PUSH
66954: LD_INT 2
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: PUSH
66961: LD_INT 2
66963: PUSH
66964: LD_INT 4
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 2
66973: NEG
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 4
66984: NEG
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 4
66995: NEG
66996: PUSH
66997: LD_INT 1
66999: NEG
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 3
67007: NEG
67008: PUSH
67009: LD_INT 0
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: PUSH
67016: LD_INT 3
67018: NEG
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 4
67029: NEG
67030: PUSH
67031: LD_INT 1
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 5
67040: NEG
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 5
67051: NEG
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 5
67063: NEG
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 3
67075: NEG
67076: PUSH
67077: LD_INT 2
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 3
67098: NEG
67099: PUSH
67100: LD_INT 4
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: LD_INT 3
67114: NEG
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 2
67122: NEG
67123: PUSH
67124: LD_INT 2
67126: NEG
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: LD_INT 2
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 4
67146: NEG
67147: PUSH
67148: LD_INT 3
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 4
67158: NEG
67159: PUSH
67160: LD_INT 4
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 2
67170: NEG
67171: PUSH
67172: LD_INT 4
67174: NEG
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 4
67182: NEG
67183: PUSH
67184: LD_INT 2
67186: NEG
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 4
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: LD_INT 5
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 4
67219: NEG
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 1
67227: PUSH
67228: LD_INT 3
67230: NEG
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 0
67238: PUSH
67239: LD_INT 3
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 1
67249: NEG
67250: PUSH
67251: LD_INT 4
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: NEG
67262: PUSH
67263: LD_INT 5
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 3
67276: NEG
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 2
67284: NEG
67285: PUSH
67286: LD_INT 5
67288: NEG
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: LIST
67316: LIST
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67341: LD_ADDR_VAR 0 31
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 0
67358: PUSH
67359: LD_INT 3
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: LD_INT 5
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 5
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: LD_INT 4
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: LD_INT 3
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: NEG
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: NEG
67453: PUSH
67454: LD_INT 1
67456: NEG
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 4
67497: NEG
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: LD_INT 1
67512: NEG
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 4
67520: NEG
67521: PUSH
67522: LD_INT 2
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: NEG
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 4
67543: NEG
67544: PUSH
67545: LD_INT 4
67547: NEG
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 4
67555: NEG
67556: PUSH
67557: LD_INT 5
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: NEG
67568: PUSH
67569: LD_INT 4
67571: NEG
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 3
67579: NEG
67580: PUSH
67581: LD_INT 3
67583: NEG
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: LD_INT 4
67591: NEG
67592: PUSH
67593: LD_INT 3
67595: NEG
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 5
67603: NEG
67604: PUSH
67605: LD_INT 4
67607: NEG
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 5
67615: NEG
67616: PUSH
67617: LD_INT 5
67619: NEG
67620: PUSH
67621: EMPTY
67622: LIST
67623: LIST
67624: PUSH
67625: LD_INT 3
67627: NEG
67628: PUSH
67629: LD_INT 5
67631: NEG
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 5
67639: NEG
67640: PUSH
67641: LD_INT 3
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 0
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 4
67665: NEG
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: LD_INT 3
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 0
67695: PUSH
67696: LD_INT 2
67698: NEG
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PUSH
67704: LD_INT 1
67706: NEG
67707: PUSH
67708: LD_INT 3
67710: NEG
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: PUSH
67716: LD_INT 1
67718: NEG
67719: PUSH
67720: LD_INT 4
67722: NEG
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: LD_INT 2
67733: NEG
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: LD_INT 4
67745: NEG
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 4
67753: PUSH
67754: LD_INT 0
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 4
67763: PUSH
67764: LD_INT 1
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 5
67774: PUSH
67775: LD_INT 0
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 5
67784: PUSH
67785: LD_INT 1
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 4
67794: PUSH
67795: LD_INT 1
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 3
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: LD_INT 1
67817: NEG
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 3
67825: PUSH
67826: LD_INT 2
67828: NEG
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: PUSH
67834: LD_INT 5
67836: PUSH
67837: LD_INT 2
67839: PUSH
67840: EMPTY
67841: LIST
67842: LIST
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: LIST
67863: LIST
67864: LIST
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
67891: LD_ADDR_VAR 0 32
67895: PUSH
67896: LD_INT 4
67898: NEG
67899: PUSH
67900: LD_INT 0
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 4
67909: NEG
67910: PUSH
67911: LD_INT 1
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 3
67921: NEG
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 3
67932: NEG
67933: PUSH
67934: LD_INT 1
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 4
67943: NEG
67944: PUSH
67945: LD_INT 1
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 5
67954: NEG
67955: PUSH
67956: LD_INT 0
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 5
67965: NEG
67966: PUSH
67967: LD_INT 1
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 5
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: LD_INT 2
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 3
68000: NEG
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 2
68036: NEG
68037: PUSH
68038: LD_INT 2
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 3
68048: NEG
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 4
68060: NEG
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 4
68072: NEG
68073: PUSH
68074: LD_INT 4
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 2
68084: NEG
68085: PUSH
68086: LD_INT 4
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 4
68096: NEG
68097: PUSH
68098: LD_INT 2
68100: NEG
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: PUSH
68106: LD_INT 0
68108: PUSH
68109: LD_INT 4
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: LD_INT 5
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 4
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 1
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: LD_INT 3
68155: NEG
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_INT 1
68163: NEG
68164: PUSH
68165: LD_INT 4
68167: NEG
68168: PUSH
68169: EMPTY
68170: LIST
68171: LIST
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: LD_INT 5
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 2
68187: PUSH
68188: LD_INT 3
68190: NEG
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: LD_INT 5
68202: NEG
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 3
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 3
68220: PUSH
68221: LD_INT 1
68223: NEG
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 4
68231: PUSH
68232: LD_INT 0
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 4
68241: PUSH
68242: LD_INT 1
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: PUSH
68252: LD_INT 1
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 2
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 2
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: PUSH
68283: LD_INT 2
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 4
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 4
68303: PUSH
68304: LD_INT 4
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 5
68323: PUSH
68324: LD_INT 4
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 5
68333: PUSH
68334: LD_INT 5
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 4
68343: PUSH
68344: LD_INT 5
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 3
68353: PUSH
68354: LD_INT 4
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 3
68363: PUSH
68364: LD_INT 3
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 5
68373: PUSH
68374: LD_INT 3
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: LD_INT 3
68383: PUSH
68384: LD_INT 5
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: LIST
68395: LIST
68396: LIST
68397: LIST
68398: LIST
68399: LIST
68400: LIST
68401: LIST
68402: LIST
68403: LIST
68404: LIST
68405: LIST
68406: LIST
68407: LIST
68408: LIST
68409: LIST
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68438: LD_ADDR_VAR 0 33
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 4
68457: NEG
68458: PUSH
68459: LD_INT 5
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 3
68469: NEG
68470: PUSH
68471: LD_INT 4
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: NEG
68482: PUSH
68483: LD_INT 3
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: NEG
68494: PUSH
68495: LD_INT 3
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 5
68505: NEG
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 5
68517: NEG
68518: PUSH
68519: LD_INT 5
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 3
68529: NEG
68530: PUSH
68531: LD_INT 5
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 5
68541: NEG
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 0
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 4
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 3
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: LD_INT 2
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 0
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 3
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: LD_INT 4
68624: NEG
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 2
68632: PUSH
68633: LD_INT 2
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: NEG
68644: PUSH
68645: LD_INT 4
68647: NEG
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: LD_INT 0
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 4
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 5
68676: PUSH
68677: LD_INT 0
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 5
68686: PUSH
68687: LD_INT 1
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 4
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 3
68716: PUSH
68717: LD_INT 1
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: PUSH
68728: LD_INT 2
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 5
68738: PUSH
68739: LD_INT 2
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 3
68748: PUSH
68749: LD_INT 3
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 3
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: PUSH
68769: LD_INT 3
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 4
68778: PUSH
68779: LD_INT 4
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: LD_INT 4
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 2
68798: PUSH
68799: LD_INT 3
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 2
68808: PUSH
68809: LD_INT 2
68811: PUSH
68812: EMPTY
68813: LIST
68814: LIST
68815: PUSH
68816: LD_INT 4
68818: PUSH
68819: LD_INT 2
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 2
68828: PUSH
68829: LD_INT 4
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: LD_INT 4
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: LD_INT 3
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: LD_INT 4
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: PUSH
68866: LD_INT 1
68868: PUSH
68869: LD_INT 5
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 5
68881: PUSH
68882: EMPTY
68883: LIST
68884: LIST
68885: PUSH
68886: LD_INT 1
68888: NEG
68889: PUSH
68890: LD_INT 4
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 1
68899: NEG
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 2
68910: PUSH
68911: LD_INT 5
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 2
68920: NEG
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: LIST
68951: LIST
68952: LIST
68953: LIST
68954: LIST
68955: LIST
68956: LIST
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: LIST
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
68976: LD_ADDR_VAR 0 34
68980: PUSH
68981: LD_INT 0
68983: PUSH
68984: LD_INT 4
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: LD_INT 5
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: LD_INT 4
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 3
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 1
69050: NEG
69051: PUSH
69052: LD_INT 5
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: LD_INT 3
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: NEG
69074: PUSH
69075: LD_INT 5
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 3
69085: PUSH
69086: LD_INT 0
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 3
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 4
69106: PUSH
69107: LD_INT 0
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 4
69116: PUSH
69117: LD_INT 1
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: LD_INT 3
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 2
69136: PUSH
69137: LD_INT 0
69139: PUSH
69140: EMPTY
69141: LIST
69142: LIST
69143: PUSH
69144: LD_INT 2
69146: PUSH
69147: LD_INT 1
69149: NEG
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 2
69157: PUSH
69158: LD_INT 2
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 4
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 4
69178: PUSH
69179: LD_INT 4
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 4
69188: PUSH
69189: LD_INT 3
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 5
69198: PUSH
69199: LD_INT 4
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 5
69208: PUSH
69209: LD_INT 5
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 4
69218: PUSH
69219: LD_INT 5
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 3
69228: PUSH
69229: LD_INT 4
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 3
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 5
69248: PUSH
69249: LD_INT 3
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: LD_INT 5
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: LD_INT 3
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 2
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: PUSH
69289: LD_INT 3
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 1
69298: PUSH
69299: LD_INT 4
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 0
69308: PUSH
69309: LD_INT 4
69311: PUSH
69312: EMPTY
69313: LIST
69314: LIST
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 1
69329: NEG
69330: PUSH
69331: LD_INT 2
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: LD_INT 4
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 2
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: EMPTY
69356: LIST
69357: LIST
69358: PUSH
69359: LD_INT 4
69361: NEG
69362: PUSH
69363: LD_INT 0
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: NEG
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 3
69384: NEG
69385: PUSH
69386: LD_INT 0
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: LD_INT 1
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: LD_INT 1
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 5
69417: NEG
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 5
69428: NEG
69429: PUSH
69430: LD_INT 1
69432: NEG
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 5
69440: NEG
69441: PUSH
69442: LD_INT 2
69444: NEG
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 3
69452: NEG
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: ST_TO_ADDR
// end ; end ;
69508: GO 69511
69510: POP
// case btype of b_depot , b_warehouse :
69511: LD_VAR 0 1
69515: PUSH
69516: LD_INT 0
69518: DOUBLE
69519: EQUAL
69520: IFTRUE 69530
69522: LD_INT 1
69524: DOUBLE
69525: EQUAL
69526: IFTRUE 69530
69528: GO 69731
69530: POP
// case nation of nation_american :
69531: LD_VAR 0 5
69535: PUSH
69536: LD_INT 1
69538: DOUBLE
69539: EQUAL
69540: IFTRUE 69544
69542: GO 69600
69544: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
69545: LD_ADDR_VAR 0 9
69549: PUSH
69550: LD_VAR 0 11
69554: PUSH
69555: LD_VAR 0 12
69559: PUSH
69560: LD_VAR 0 13
69564: PUSH
69565: LD_VAR 0 14
69569: PUSH
69570: LD_VAR 0 15
69574: PUSH
69575: LD_VAR 0 16
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: PUSH
69588: LD_VAR 0 4
69592: PUSH
69593: LD_INT 1
69595: PLUS
69596: ARRAY
69597: ST_TO_ADDR
69598: GO 69729
69600: LD_INT 2
69602: DOUBLE
69603: EQUAL
69604: IFTRUE 69608
69606: GO 69664
69608: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
69609: LD_ADDR_VAR 0 9
69613: PUSH
69614: LD_VAR 0 17
69618: PUSH
69619: LD_VAR 0 18
69623: PUSH
69624: LD_VAR 0 19
69628: PUSH
69629: LD_VAR 0 20
69633: PUSH
69634: LD_VAR 0 21
69638: PUSH
69639: LD_VAR 0 22
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: PUSH
69652: LD_VAR 0 4
69656: PUSH
69657: LD_INT 1
69659: PLUS
69660: ARRAY
69661: ST_TO_ADDR
69662: GO 69729
69664: LD_INT 3
69666: DOUBLE
69667: EQUAL
69668: IFTRUE 69672
69670: GO 69728
69672: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
69673: LD_ADDR_VAR 0 9
69677: PUSH
69678: LD_VAR 0 23
69682: PUSH
69683: LD_VAR 0 24
69687: PUSH
69688: LD_VAR 0 25
69692: PUSH
69693: LD_VAR 0 26
69697: PUSH
69698: LD_VAR 0 27
69702: PUSH
69703: LD_VAR 0 28
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: PUSH
69716: LD_VAR 0 4
69720: PUSH
69721: LD_INT 1
69723: PLUS
69724: ARRAY
69725: ST_TO_ADDR
69726: GO 69729
69728: POP
69729: GO 70278
69731: LD_INT 2
69733: DOUBLE
69734: EQUAL
69735: IFTRUE 69745
69737: LD_INT 3
69739: DOUBLE
69740: EQUAL
69741: IFTRUE 69745
69743: GO 69801
69745: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
69746: LD_ADDR_VAR 0 9
69750: PUSH
69751: LD_VAR 0 29
69755: PUSH
69756: LD_VAR 0 30
69760: PUSH
69761: LD_VAR 0 31
69765: PUSH
69766: LD_VAR 0 32
69770: PUSH
69771: LD_VAR 0 33
69775: PUSH
69776: LD_VAR 0 34
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: PUSH
69789: LD_VAR 0 4
69793: PUSH
69794: LD_INT 1
69796: PLUS
69797: ARRAY
69798: ST_TO_ADDR
69799: GO 70278
69801: LD_INT 16
69803: DOUBLE
69804: EQUAL
69805: IFTRUE 69857
69807: LD_INT 17
69809: DOUBLE
69810: EQUAL
69811: IFTRUE 69857
69813: LD_INT 18
69815: DOUBLE
69816: EQUAL
69817: IFTRUE 69857
69819: LD_INT 19
69821: DOUBLE
69822: EQUAL
69823: IFTRUE 69857
69825: LD_INT 20
69827: DOUBLE
69828: EQUAL
69829: IFTRUE 69857
69831: LD_INT 21
69833: DOUBLE
69834: EQUAL
69835: IFTRUE 69857
69837: LD_INT 23
69839: DOUBLE
69840: EQUAL
69841: IFTRUE 69857
69843: LD_INT 24
69845: DOUBLE
69846: EQUAL
69847: IFTRUE 69857
69849: LD_INT 25
69851: DOUBLE
69852: EQUAL
69853: IFTRUE 69857
69855: GO 69913
69857: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
69858: LD_ADDR_VAR 0 9
69862: PUSH
69863: LD_VAR 0 35
69867: PUSH
69868: LD_VAR 0 36
69872: PUSH
69873: LD_VAR 0 37
69877: PUSH
69878: LD_VAR 0 38
69882: PUSH
69883: LD_VAR 0 39
69887: PUSH
69888: LD_VAR 0 40
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: PUSH
69901: LD_VAR 0 4
69905: PUSH
69906: LD_INT 1
69908: PLUS
69909: ARRAY
69910: ST_TO_ADDR
69911: GO 70278
69913: LD_INT 6
69915: DOUBLE
69916: EQUAL
69917: IFTRUE 69969
69919: LD_INT 7
69921: DOUBLE
69922: EQUAL
69923: IFTRUE 69969
69925: LD_INT 8
69927: DOUBLE
69928: EQUAL
69929: IFTRUE 69969
69931: LD_INT 13
69933: DOUBLE
69934: EQUAL
69935: IFTRUE 69969
69937: LD_INT 12
69939: DOUBLE
69940: EQUAL
69941: IFTRUE 69969
69943: LD_INT 15
69945: DOUBLE
69946: EQUAL
69947: IFTRUE 69969
69949: LD_INT 11
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69969
69955: LD_INT 14
69957: DOUBLE
69958: EQUAL
69959: IFTRUE 69969
69961: LD_INT 10
69963: DOUBLE
69964: EQUAL
69965: IFTRUE 69969
69967: GO 70025
69969: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
69970: LD_ADDR_VAR 0 9
69974: PUSH
69975: LD_VAR 0 41
69979: PUSH
69980: LD_VAR 0 42
69984: PUSH
69985: LD_VAR 0 43
69989: PUSH
69990: LD_VAR 0 44
69994: PUSH
69995: LD_VAR 0 45
69999: PUSH
70000: LD_VAR 0 46
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: LIST
70009: LIST
70010: LIST
70011: LIST
70012: PUSH
70013: LD_VAR 0 4
70017: PUSH
70018: LD_INT 1
70020: PLUS
70021: ARRAY
70022: ST_TO_ADDR
70023: GO 70278
70025: LD_INT 36
70027: DOUBLE
70028: EQUAL
70029: IFTRUE 70033
70031: GO 70089
70033: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70034: LD_ADDR_VAR 0 9
70038: PUSH
70039: LD_VAR 0 47
70043: PUSH
70044: LD_VAR 0 48
70048: PUSH
70049: LD_VAR 0 49
70053: PUSH
70054: LD_VAR 0 50
70058: PUSH
70059: LD_VAR 0 51
70063: PUSH
70064: LD_VAR 0 52
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: PUSH
70077: LD_VAR 0 4
70081: PUSH
70082: LD_INT 1
70084: PLUS
70085: ARRAY
70086: ST_TO_ADDR
70087: GO 70278
70089: LD_INT 4
70091: DOUBLE
70092: EQUAL
70093: IFTRUE 70115
70095: LD_INT 5
70097: DOUBLE
70098: EQUAL
70099: IFTRUE 70115
70101: LD_INT 34
70103: DOUBLE
70104: EQUAL
70105: IFTRUE 70115
70107: LD_INT 37
70109: DOUBLE
70110: EQUAL
70111: IFTRUE 70115
70113: GO 70171
70115: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70116: LD_ADDR_VAR 0 9
70120: PUSH
70121: LD_VAR 0 53
70125: PUSH
70126: LD_VAR 0 54
70130: PUSH
70131: LD_VAR 0 55
70135: PUSH
70136: LD_VAR 0 56
70140: PUSH
70141: LD_VAR 0 57
70145: PUSH
70146: LD_VAR 0 58
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: PUSH
70159: LD_VAR 0 4
70163: PUSH
70164: LD_INT 1
70166: PLUS
70167: ARRAY
70168: ST_TO_ADDR
70169: GO 70278
70171: LD_INT 31
70173: DOUBLE
70174: EQUAL
70175: IFTRUE 70221
70177: LD_INT 32
70179: DOUBLE
70180: EQUAL
70181: IFTRUE 70221
70183: LD_INT 33
70185: DOUBLE
70186: EQUAL
70187: IFTRUE 70221
70189: LD_INT 27
70191: DOUBLE
70192: EQUAL
70193: IFTRUE 70221
70195: LD_INT 26
70197: DOUBLE
70198: EQUAL
70199: IFTRUE 70221
70201: LD_INT 28
70203: DOUBLE
70204: EQUAL
70205: IFTRUE 70221
70207: LD_INT 29
70209: DOUBLE
70210: EQUAL
70211: IFTRUE 70221
70213: LD_INT 30
70215: DOUBLE
70216: EQUAL
70217: IFTRUE 70221
70219: GO 70277
70221: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
70222: LD_ADDR_VAR 0 9
70226: PUSH
70227: LD_VAR 0 59
70231: PUSH
70232: LD_VAR 0 60
70236: PUSH
70237: LD_VAR 0 61
70241: PUSH
70242: LD_VAR 0 62
70246: PUSH
70247: LD_VAR 0 63
70251: PUSH
70252: LD_VAR 0 64
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: PUSH
70265: LD_VAR 0 4
70269: PUSH
70270: LD_INT 1
70272: PLUS
70273: ARRAY
70274: ST_TO_ADDR
70275: GO 70278
70277: POP
// temp_list2 = [ ] ;
70278: LD_ADDR_VAR 0 10
70282: PUSH
70283: EMPTY
70284: ST_TO_ADDR
// for i in temp_list do
70285: LD_ADDR_VAR 0 8
70289: PUSH
70290: LD_VAR 0 9
70294: PUSH
70295: FOR_IN
70296: IFFALSE 70348
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70298: LD_ADDR_VAR 0 10
70302: PUSH
70303: LD_VAR 0 10
70307: PUSH
70308: LD_VAR 0 8
70312: PUSH
70313: LD_INT 1
70315: ARRAY
70316: PUSH
70317: LD_VAR 0 2
70321: PLUS
70322: PUSH
70323: LD_VAR 0 8
70327: PUSH
70328: LD_INT 2
70330: ARRAY
70331: PUSH
70332: LD_VAR 0 3
70336: PLUS
70337: PUSH
70338: EMPTY
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: ADD
70345: ST_TO_ADDR
70346: GO 70295
70348: POP
70349: POP
// result = temp_list2 ;
70350: LD_ADDR_VAR 0 7
70354: PUSH
70355: LD_VAR 0 10
70359: ST_TO_ADDR
// end ;
70360: LD_VAR 0 7
70364: RET
// export function EnemyInRange ( unit , dist ) ; begin
70365: LD_INT 0
70367: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70368: LD_ADDR_VAR 0 3
70372: PUSH
70373: LD_VAR 0 1
70377: PPUSH
70378: CALL_OW 255
70382: PPUSH
70383: LD_VAR 0 1
70387: PPUSH
70388: CALL_OW 250
70392: PPUSH
70393: LD_VAR 0 1
70397: PPUSH
70398: CALL_OW 251
70402: PPUSH
70403: LD_VAR 0 2
70407: PPUSH
70408: CALL 44858 0 4
70412: PUSH
70413: LD_INT 4
70415: ARRAY
70416: ST_TO_ADDR
// end ;
70417: LD_VAR 0 3
70421: RET
// export function PlayerSeeMe ( unit ) ; begin
70422: LD_INT 0
70424: PPUSH
// result := See ( your_side , unit ) ;
70425: LD_ADDR_VAR 0 2
70429: PUSH
70430: LD_OWVAR 2
70434: PPUSH
70435: LD_VAR 0 1
70439: PPUSH
70440: CALL_OW 292
70444: ST_TO_ADDR
// end ;
70445: LD_VAR 0 2
70449: RET
// export function ReverseDir ( unit ) ; begin
70450: LD_INT 0
70452: PPUSH
// if not unit then
70453: LD_VAR 0 1
70457: NOT
70458: IFFALSE 70462
// exit ;
70460: GO 70508
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
70462: LD_ADDR_VAR 0 2
70466: PUSH
70467: LD_INT 3
70469: PUSH
70470: LD_INT 4
70472: PUSH
70473: LD_INT 5
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 2
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: PUSH
70493: LD_VAR 0 1
70497: PPUSH
70498: CALL_OW 254
70502: PUSH
70503: LD_INT 1
70505: PLUS
70506: ARRAY
70507: ST_TO_ADDR
// end ;
70508: LD_VAR 0 2
70512: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70513: LD_INT 0
70515: PPUSH
70516: PPUSH
70517: PPUSH
70518: PPUSH
70519: PPUSH
// if not hexes then
70520: LD_VAR 0 2
70524: NOT
70525: IFFALSE 70529
// exit ;
70527: GO 70677
// dist := 9999 ;
70529: LD_ADDR_VAR 0 5
70533: PUSH
70534: LD_INT 9999
70536: ST_TO_ADDR
// for i = 1 to hexes do
70537: LD_ADDR_VAR 0 4
70541: PUSH
70542: DOUBLE
70543: LD_INT 1
70545: DEC
70546: ST_TO_ADDR
70547: LD_VAR 0 2
70551: PUSH
70552: FOR_TO
70553: IFFALSE 70665
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
70555: LD_VAR 0 1
70559: PPUSH
70560: LD_VAR 0 2
70564: PUSH
70565: LD_VAR 0 4
70569: ARRAY
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PPUSH
70575: LD_VAR 0 2
70579: PUSH
70580: LD_VAR 0 4
70584: ARRAY
70585: PUSH
70586: LD_INT 2
70588: ARRAY
70589: PPUSH
70590: CALL_OW 297
70594: PUSH
70595: LD_VAR 0 5
70599: LESS
70600: IFFALSE 70663
// begin hex := hexes [ i ] ;
70602: LD_ADDR_VAR 0 7
70606: PUSH
70607: LD_VAR 0 2
70611: PUSH
70612: LD_VAR 0 4
70616: ARRAY
70617: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70618: LD_ADDR_VAR 0 5
70622: PUSH
70623: LD_VAR 0 1
70627: PPUSH
70628: LD_VAR 0 2
70632: PUSH
70633: LD_VAR 0 4
70637: ARRAY
70638: PUSH
70639: LD_INT 1
70641: ARRAY
70642: PPUSH
70643: LD_VAR 0 2
70647: PUSH
70648: LD_VAR 0 4
70652: ARRAY
70653: PUSH
70654: LD_INT 2
70656: ARRAY
70657: PPUSH
70658: CALL_OW 297
70662: ST_TO_ADDR
// end ; end ;
70663: GO 70552
70665: POP
70666: POP
// result := hex ;
70667: LD_ADDR_VAR 0 3
70671: PUSH
70672: LD_VAR 0 7
70676: ST_TO_ADDR
// end ;
70677: LD_VAR 0 3
70681: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
70682: LD_INT 0
70684: PPUSH
70685: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
70686: LD_VAR 0 1
70690: NOT
70691: PUSH
70692: LD_VAR 0 1
70696: PUSH
70697: LD_INT 21
70699: PUSH
70700: LD_INT 2
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 23
70709: PUSH
70710: LD_INT 2
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PPUSH
70721: CALL_OW 69
70725: IN
70726: NOT
70727: OR
70728: IFFALSE 70732
// exit ;
70730: GO 70779
// for i = 1 to 3 do
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: DOUBLE
70738: LD_INT 1
70740: DEC
70741: ST_TO_ADDR
70742: LD_INT 3
70744: PUSH
70745: FOR_TO
70746: IFFALSE 70777
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
70748: LD_VAR 0 1
70752: PPUSH
70753: CALL_OW 250
70757: PPUSH
70758: LD_VAR 0 1
70762: PPUSH
70763: CALL_OW 251
70767: PPUSH
70768: LD_INT 1
70770: PPUSH
70771: CALL_OW 453
70775: GO 70745
70777: POP
70778: POP
// end ;
70779: LD_VAR 0 2
70783: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
70784: LD_INT 0
70786: PPUSH
70787: PPUSH
70788: PPUSH
70789: PPUSH
70790: PPUSH
70791: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
70792: LD_VAR 0 1
70796: NOT
70797: PUSH
70798: LD_VAR 0 2
70802: NOT
70803: OR
70804: PUSH
70805: LD_VAR 0 1
70809: PPUSH
70810: CALL_OW 314
70814: OR
70815: IFFALSE 70819
// exit ;
70817: GO 71260
// x := GetX ( enemy_unit ) ;
70819: LD_ADDR_VAR 0 7
70823: PUSH
70824: LD_VAR 0 2
70828: PPUSH
70829: CALL_OW 250
70833: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
70834: LD_ADDR_VAR 0 8
70838: PUSH
70839: LD_VAR 0 2
70843: PPUSH
70844: CALL_OW 251
70848: ST_TO_ADDR
// if not x or not y then
70849: LD_VAR 0 7
70853: NOT
70854: PUSH
70855: LD_VAR 0 8
70859: NOT
70860: OR
70861: IFFALSE 70865
// exit ;
70863: GO 71260
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
70865: LD_ADDR_VAR 0 6
70869: PUSH
70870: LD_VAR 0 7
70874: PPUSH
70875: LD_INT 0
70877: PPUSH
70878: LD_INT 4
70880: PPUSH
70881: CALL_OW 272
70885: PUSH
70886: LD_VAR 0 8
70890: PPUSH
70891: LD_INT 0
70893: PPUSH
70894: LD_INT 4
70896: PPUSH
70897: CALL_OW 273
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 7
70910: PPUSH
70911: LD_INT 1
70913: PPUSH
70914: LD_INT 4
70916: PPUSH
70917: CALL_OW 272
70921: PUSH
70922: LD_VAR 0 8
70926: PPUSH
70927: LD_INT 1
70929: PPUSH
70930: LD_INT 4
70932: PPUSH
70933: CALL_OW 273
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_VAR 0 7
70946: PPUSH
70947: LD_INT 2
70949: PPUSH
70950: LD_INT 4
70952: PPUSH
70953: CALL_OW 272
70957: PUSH
70958: LD_VAR 0 8
70962: PPUSH
70963: LD_INT 2
70965: PPUSH
70966: LD_INT 4
70968: PPUSH
70969: CALL_OW 273
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_VAR 0 7
70982: PPUSH
70983: LD_INT 3
70985: PPUSH
70986: LD_INT 4
70988: PPUSH
70989: CALL_OW 272
70993: PUSH
70994: LD_VAR 0 8
70998: PPUSH
70999: LD_INT 3
71001: PPUSH
71002: LD_INT 4
71004: PPUSH
71005: CALL_OW 273
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_VAR 0 7
71018: PPUSH
71019: LD_INT 4
71021: PPUSH
71022: LD_INT 4
71024: PPUSH
71025: CALL_OW 272
71029: PUSH
71030: LD_VAR 0 8
71034: PPUSH
71035: LD_INT 4
71037: PPUSH
71038: LD_INT 4
71040: PPUSH
71041: CALL_OW 273
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_VAR 0 7
71054: PPUSH
71055: LD_INT 5
71057: PPUSH
71058: LD_INT 4
71060: PPUSH
71061: CALL_OW 272
71065: PUSH
71066: LD_VAR 0 8
71070: PPUSH
71071: LD_INT 5
71073: PPUSH
71074: LD_INT 4
71076: PPUSH
71077: CALL_OW 273
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: ST_TO_ADDR
// for i = tmp downto 1 do
71094: LD_ADDR_VAR 0 4
71098: PUSH
71099: DOUBLE
71100: LD_VAR 0 6
71104: INC
71105: ST_TO_ADDR
71106: LD_INT 1
71108: PUSH
71109: FOR_DOWNTO
71110: IFFALSE 71211
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71112: LD_VAR 0 6
71116: PUSH
71117: LD_VAR 0 4
71121: ARRAY
71122: PUSH
71123: LD_INT 1
71125: ARRAY
71126: PPUSH
71127: LD_VAR 0 6
71131: PUSH
71132: LD_VAR 0 4
71136: ARRAY
71137: PUSH
71138: LD_INT 2
71140: ARRAY
71141: PPUSH
71142: CALL_OW 488
71146: NOT
71147: PUSH
71148: LD_VAR 0 6
71152: PUSH
71153: LD_VAR 0 4
71157: ARRAY
71158: PUSH
71159: LD_INT 1
71161: ARRAY
71162: PPUSH
71163: LD_VAR 0 6
71167: PUSH
71168: LD_VAR 0 4
71172: ARRAY
71173: PUSH
71174: LD_INT 2
71176: ARRAY
71177: PPUSH
71178: CALL_OW 428
71182: PUSH
71183: LD_INT 0
71185: NONEQUAL
71186: OR
71187: IFFALSE 71209
// tmp := Delete ( tmp , i ) ;
71189: LD_ADDR_VAR 0 6
71193: PUSH
71194: LD_VAR 0 6
71198: PPUSH
71199: LD_VAR 0 4
71203: PPUSH
71204: CALL_OW 3
71208: ST_TO_ADDR
71209: GO 71109
71211: POP
71212: POP
// j := GetClosestHex ( unit , tmp ) ;
71213: LD_ADDR_VAR 0 5
71217: PUSH
71218: LD_VAR 0 1
71222: PPUSH
71223: LD_VAR 0 6
71227: PPUSH
71228: CALL 70513 0 2
71232: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71233: LD_VAR 0 1
71237: PPUSH
71238: LD_VAR 0 5
71242: PUSH
71243: LD_INT 1
71245: ARRAY
71246: PPUSH
71247: LD_VAR 0 5
71251: PUSH
71252: LD_INT 2
71254: ARRAY
71255: PPUSH
71256: CALL_OW 111
// end ;
71260: LD_VAR 0 3
71264: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71265: LD_INT 0
71267: PPUSH
71268: PPUSH
71269: PPUSH
// uc_side = 0 ;
71270: LD_ADDR_OWVAR 20
71274: PUSH
71275: LD_INT 0
71277: ST_TO_ADDR
// uc_nation = 0 ;
71278: LD_ADDR_OWVAR 21
71282: PUSH
71283: LD_INT 0
71285: ST_TO_ADDR
// InitHc ;
71286: CALL_OW 19
// InitVc ;
71290: CALL_OW 20
// if mastodonts then
71294: LD_VAR 0 6
71298: IFFALSE 71365
// for i = 1 to mastodonts do
71300: LD_ADDR_VAR 0 11
71304: PUSH
71305: DOUBLE
71306: LD_INT 1
71308: DEC
71309: ST_TO_ADDR
71310: LD_VAR 0 6
71314: PUSH
71315: FOR_TO
71316: IFFALSE 71363
// begin vc_chassis := 31 ;
71318: LD_ADDR_OWVAR 37
71322: PUSH
71323: LD_INT 31
71325: ST_TO_ADDR
// vc_control := control_rider ;
71326: LD_ADDR_OWVAR 38
71330: PUSH
71331: LD_INT 4
71333: ST_TO_ADDR
// animal := CreateVehicle ;
71334: LD_ADDR_VAR 0 12
71338: PUSH
71339: CALL_OW 45
71343: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71344: LD_VAR 0 12
71348: PPUSH
71349: LD_VAR 0 8
71353: PPUSH
71354: LD_INT 0
71356: PPUSH
71357: CALL_OW 49
// end ;
71361: GO 71315
71363: POP
71364: POP
// if horses then
71365: LD_VAR 0 5
71369: IFFALSE 71436
// for i = 1 to horses do
71371: LD_ADDR_VAR 0 11
71375: PUSH
71376: DOUBLE
71377: LD_INT 1
71379: DEC
71380: ST_TO_ADDR
71381: LD_VAR 0 5
71385: PUSH
71386: FOR_TO
71387: IFFALSE 71434
// begin hc_class := 21 ;
71389: LD_ADDR_OWVAR 28
71393: PUSH
71394: LD_INT 21
71396: ST_TO_ADDR
// hc_gallery :=  ;
71397: LD_ADDR_OWVAR 33
71401: PUSH
71402: LD_STRING 
71404: ST_TO_ADDR
// animal := CreateHuman ;
71405: LD_ADDR_VAR 0 12
71409: PUSH
71410: CALL_OW 44
71414: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71415: LD_VAR 0 12
71419: PPUSH
71420: LD_VAR 0 8
71424: PPUSH
71425: LD_INT 0
71427: PPUSH
71428: CALL_OW 49
// end ;
71432: GO 71386
71434: POP
71435: POP
// if birds then
71436: LD_VAR 0 1
71440: IFFALSE 71507
// for i = 1 to birds do
71442: LD_ADDR_VAR 0 11
71446: PUSH
71447: DOUBLE
71448: LD_INT 1
71450: DEC
71451: ST_TO_ADDR
71452: LD_VAR 0 1
71456: PUSH
71457: FOR_TO
71458: IFFALSE 71505
// begin hc_class = 18 ;
71460: LD_ADDR_OWVAR 28
71464: PUSH
71465: LD_INT 18
71467: ST_TO_ADDR
// hc_gallery =  ;
71468: LD_ADDR_OWVAR 33
71472: PUSH
71473: LD_STRING 
71475: ST_TO_ADDR
// animal := CreateHuman ;
71476: LD_ADDR_VAR 0 12
71480: PUSH
71481: CALL_OW 44
71485: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71486: LD_VAR 0 12
71490: PPUSH
71491: LD_VAR 0 8
71495: PPUSH
71496: LD_INT 0
71498: PPUSH
71499: CALL_OW 49
// end ;
71503: GO 71457
71505: POP
71506: POP
// if tigers then
71507: LD_VAR 0 2
71511: IFFALSE 71595
// for i = 1 to tigers do
71513: LD_ADDR_VAR 0 11
71517: PUSH
71518: DOUBLE
71519: LD_INT 1
71521: DEC
71522: ST_TO_ADDR
71523: LD_VAR 0 2
71527: PUSH
71528: FOR_TO
71529: IFFALSE 71593
// begin hc_class = class_tiger ;
71531: LD_ADDR_OWVAR 28
71535: PUSH
71536: LD_INT 14
71538: ST_TO_ADDR
// hc_gallery =  ;
71539: LD_ADDR_OWVAR 33
71543: PUSH
71544: LD_STRING 
71546: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71547: LD_ADDR_OWVAR 35
71551: PUSH
71552: LD_INT 7
71554: NEG
71555: PPUSH
71556: LD_INT 7
71558: PPUSH
71559: CALL_OW 12
71563: ST_TO_ADDR
// animal := CreateHuman ;
71564: LD_ADDR_VAR 0 12
71568: PUSH
71569: CALL_OW 44
71573: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71574: LD_VAR 0 12
71578: PPUSH
71579: LD_VAR 0 8
71583: PPUSH
71584: LD_INT 0
71586: PPUSH
71587: CALL_OW 49
// end ;
71591: GO 71528
71593: POP
71594: POP
// if apemans then
71595: LD_VAR 0 3
71599: IFFALSE 71722
// for i = 1 to apemans do
71601: LD_ADDR_VAR 0 11
71605: PUSH
71606: DOUBLE
71607: LD_INT 1
71609: DEC
71610: ST_TO_ADDR
71611: LD_VAR 0 3
71615: PUSH
71616: FOR_TO
71617: IFFALSE 71720
// begin hc_class = class_apeman ;
71619: LD_ADDR_OWVAR 28
71623: PUSH
71624: LD_INT 12
71626: ST_TO_ADDR
// hc_gallery =  ;
71627: LD_ADDR_OWVAR 33
71631: PUSH
71632: LD_STRING 
71634: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
71635: LD_ADDR_OWVAR 35
71639: PUSH
71640: LD_INT 5
71642: NEG
71643: PPUSH
71644: LD_INT 5
71646: PPUSH
71647: CALL_OW 12
71651: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
71652: LD_ADDR_OWVAR 31
71656: PUSH
71657: LD_INT 1
71659: PPUSH
71660: LD_INT 3
71662: PPUSH
71663: CALL_OW 12
71667: PUSH
71668: LD_INT 1
71670: PPUSH
71671: LD_INT 3
71673: PPUSH
71674: CALL_OW 12
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: LD_INT 0
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: ST_TO_ADDR
// animal := CreateHuman ;
71691: LD_ADDR_VAR 0 12
71695: PUSH
71696: CALL_OW 44
71700: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71701: LD_VAR 0 12
71705: PPUSH
71706: LD_VAR 0 8
71710: PPUSH
71711: LD_INT 0
71713: PPUSH
71714: CALL_OW 49
// end ;
71718: GO 71616
71720: POP
71721: POP
// if enchidnas then
71722: LD_VAR 0 4
71726: IFFALSE 71793
// for i = 1 to enchidnas do
71728: LD_ADDR_VAR 0 11
71732: PUSH
71733: DOUBLE
71734: LD_INT 1
71736: DEC
71737: ST_TO_ADDR
71738: LD_VAR 0 4
71742: PUSH
71743: FOR_TO
71744: IFFALSE 71791
// begin hc_class = 13 ;
71746: LD_ADDR_OWVAR 28
71750: PUSH
71751: LD_INT 13
71753: ST_TO_ADDR
// hc_gallery =  ;
71754: LD_ADDR_OWVAR 33
71758: PUSH
71759: LD_STRING 
71761: ST_TO_ADDR
// animal := CreateHuman ;
71762: LD_ADDR_VAR 0 12
71766: PUSH
71767: CALL_OW 44
71771: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
71772: LD_VAR 0 12
71776: PPUSH
71777: LD_VAR 0 8
71781: PPUSH
71782: LD_INT 0
71784: PPUSH
71785: CALL_OW 49
// end ;
71789: GO 71743
71791: POP
71792: POP
// if not wat_area then
71793: LD_VAR 0 9
71797: NOT
71798: IFFALSE 71802
// exit ;
71800: GO 71873
// if fishes then
71802: LD_VAR 0 7
71806: IFFALSE 71873
// for i = 1 to fishes do
71808: LD_ADDR_VAR 0 11
71812: PUSH
71813: DOUBLE
71814: LD_INT 1
71816: DEC
71817: ST_TO_ADDR
71818: LD_VAR 0 7
71822: PUSH
71823: FOR_TO
71824: IFFALSE 71871
// begin hc_class = 20 ;
71826: LD_ADDR_OWVAR 28
71830: PUSH
71831: LD_INT 20
71833: ST_TO_ADDR
// hc_gallery =  ;
71834: LD_ADDR_OWVAR 33
71838: PUSH
71839: LD_STRING 
71841: ST_TO_ADDR
// animal := CreateHuman ;
71842: LD_ADDR_VAR 0 12
71846: PUSH
71847: CALL_OW 44
71851: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
71852: LD_VAR 0 12
71856: PPUSH
71857: LD_VAR 0 9
71861: PPUSH
71862: LD_INT 0
71864: PPUSH
71865: CALL_OW 49
// end ;
71869: GO 71823
71871: POP
71872: POP
// end ;
71873: LD_VAR 0 10
71877: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
71878: LD_INT 0
71880: PPUSH
71881: PPUSH
71882: PPUSH
71883: PPUSH
71884: PPUSH
71885: PPUSH
71886: PPUSH
71887: PPUSH
71888: PPUSH
71889: PPUSH
71890: PPUSH
71891: PPUSH
71892: PPUSH
71893: PPUSH
71894: PPUSH
71895: PPUSH
71896: PPUSH
71897: PPUSH
71898: PPUSH
71899: PPUSH
71900: PPUSH
71901: PPUSH
71902: PPUSH
71903: PPUSH
71904: PPUSH
71905: PPUSH
71906: PPUSH
71907: PPUSH
// if not list then
71908: LD_VAR 0 1
71912: NOT
71913: IFFALSE 71917
// exit ;
71915: GO 75214
// base := list [ 1 ] ;
71917: LD_ADDR_VAR 0 3
71921: PUSH
71922: LD_VAR 0 1
71926: PUSH
71927: LD_INT 1
71929: ARRAY
71930: ST_TO_ADDR
// group := list [ 2 ] ;
71931: LD_ADDR_VAR 0 4
71935: PUSH
71936: LD_VAR 0 1
71940: PUSH
71941: LD_INT 2
71943: ARRAY
71944: ST_TO_ADDR
// path := list [ 3 ] ;
71945: LD_ADDR_VAR 0 5
71949: PUSH
71950: LD_VAR 0 1
71954: PUSH
71955: LD_INT 3
71957: ARRAY
71958: ST_TO_ADDR
// flags := list [ 4 ] ;
71959: LD_ADDR_VAR 0 6
71963: PUSH
71964: LD_VAR 0 1
71968: PUSH
71969: LD_INT 4
71971: ARRAY
71972: ST_TO_ADDR
// mined := [ ] ;
71973: LD_ADDR_VAR 0 27
71977: PUSH
71978: EMPTY
71979: ST_TO_ADDR
// bombed := [ ] ;
71980: LD_ADDR_VAR 0 28
71984: PUSH
71985: EMPTY
71986: ST_TO_ADDR
// if not group or not path then
71987: LD_VAR 0 4
71991: NOT
71992: PUSH
71993: LD_VAR 0 5
71997: NOT
71998: OR
71999: IFFALSE 72003
// exit ;
72001: GO 75214
// if flags then
72003: LD_VAR 0 6
72007: IFFALSE 72151
// begin f_ignore_area := flags [ 1 ] ;
72009: LD_ADDR_VAR 0 17
72013: PUSH
72014: LD_VAR 0 6
72018: PUSH
72019: LD_INT 1
72021: ARRAY
72022: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
72023: LD_ADDR_VAR 0 18
72027: PUSH
72028: LD_VAR 0 6
72032: PUSH
72033: LD_INT 2
72035: ARRAY
72036: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
72037: LD_ADDR_VAR 0 19
72041: PUSH
72042: LD_VAR 0 6
72046: PUSH
72047: LD_INT 3
72049: ARRAY
72050: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
72051: LD_ADDR_VAR 0 20
72055: PUSH
72056: LD_VAR 0 6
72060: PUSH
72061: LD_INT 4
72063: ARRAY
72064: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
72065: LD_ADDR_VAR 0 21
72069: PUSH
72070: LD_VAR 0 6
72074: PUSH
72075: LD_INT 5
72077: ARRAY
72078: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
72079: LD_ADDR_VAR 0 22
72083: PUSH
72084: LD_VAR 0 6
72088: PUSH
72089: LD_INT 6
72091: ARRAY
72092: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
72093: LD_ADDR_VAR 0 23
72097: PUSH
72098: LD_VAR 0 6
72102: PUSH
72103: LD_INT 7
72105: ARRAY
72106: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
72107: LD_ADDR_VAR 0 24
72111: PUSH
72112: LD_VAR 0 6
72116: PUSH
72117: LD_INT 8
72119: ARRAY
72120: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
72121: LD_ADDR_VAR 0 25
72125: PUSH
72126: LD_VAR 0 6
72130: PUSH
72131: LD_INT 9
72133: ARRAY
72134: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
72135: LD_ADDR_VAR 0 26
72139: PUSH
72140: LD_VAR 0 6
72144: PUSH
72145: LD_INT 10
72147: ARRAY
72148: ST_TO_ADDR
// end else
72149: GO 72231
// begin f_ignore_area := false ;
72151: LD_ADDR_VAR 0 17
72155: PUSH
72156: LD_INT 0
72158: ST_TO_ADDR
// f_capture := false ;
72159: LD_ADDR_VAR 0 18
72163: PUSH
72164: LD_INT 0
72166: ST_TO_ADDR
// f_ignore_civ := false ;
72167: LD_ADDR_VAR 0 19
72171: PUSH
72172: LD_INT 0
72174: ST_TO_ADDR
// f_murder := false ;
72175: LD_ADDR_VAR 0 20
72179: PUSH
72180: LD_INT 0
72182: ST_TO_ADDR
// f_mines := false ;
72183: LD_ADDR_VAR 0 21
72187: PUSH
72188: LD_INT 0
72190: ST_TO_ADDR
// f_repair := false ;
72191: LD_ADDR_VAR 0 22
72195: PUSH
72196: LD_INT 0
72198: ST_TO_ADDR
// f_heal := false ;
72199: LD_ADDR_VAR 0 23
72203: PUSH
72204: LD_INT 0
72206: ST_TO_ADDR
// f_spacetime := false ;
72207: LD_ADDR_VAR 0 24
72211: PUSH
72212: LD_INT 0
72214: ST_TO_ADDR
// f_attack_depot := false ;
72215: LD_ADDR_VAR 0 25
72219: PUSH
72220: LD_INT 0
72222: ST_TO_ADDR
// f_crawl := false ;
72223: LD_ADDR_VAR 0 26
72227: PUSH
72228: LD_INT 0
72230: ST_TO_ADDR
// end ; units_path := [ ] ;
72231: LD_ADDR_VAR 0 16
72235: PUSH
72236: EMPTY
72237: ST_TO_ADDR
// for i = 1 to group do
72238: LD_ADDR_VAR 0 7
72242: PUSH
72243: DOUBLE
72244: LD_INT 1
72246: DEC
72247: ST_TO_ADDR
72248: LD_VAR 0 4
72252: PUSH
72253: FOR_TO
72254: IFFALSE 72283
// begin units_path := Replace ( units_path , i , path ) ;
72256: LD_ADDR_VAR 0 16
72260: PUSH
72261: LD_VAR 0 16
72265: PPUSH
72266: LD_VAR 0 7
72270: PPUSH
72271: LD_VAR 0 5
72275: PPUSH
72276: CALL_OW 1
72280: ST_TO_ADDR
// end ;
72281: GO 72253
72283: POP
72284: POP
// repeat for i = group downto 1 do
72285: LD_ADDR_VAR 0 7
72289: PUSH
72290: DOUBLE
72291: LD_VAR 0 4
72295: INC
72296: ST_TO_ADDR
72297: LD_INT 1
72299: PUSH
72300: FOR_DOWNTO
72301: IFFALSE 75196
// begin wait ( 0 0$1 ) ;
72303: LD_INT 35
72305: PPUSH
72306: CALL_OW 67
// tmp := [ ] ;
72310: LD_ADDR_VAR 0 14
72314: PUSH
72315: EMPTY
72316: ST_TO_ADDR
// attacking := false ;
72317: LD_ADDR_VAR 0 29
72321: PUSH
72322: LD_INT 0
72324: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
72325: LD_VAR 0 4
72329: PUSH
72330: LD_VAR 0 7
72334: ARRAY
72335: PPUSH
72336: CALL_OW 301
72340: PUSH
72341: LD_VAR 0 4
72345: PUSH
72346: LD_VAR 0 7
72350: ARRAY
72351: NOT
72352: OR
72353: IFFALSE 72397
// begin group := Delete ( group , i ) ;
72355: LD_ADDR_VAR 0 4
72359: PUSH
72360: LD_VAR 0 4
72364: PPUSH
72365: LD_VAR 0 7
72369: PPUSH
72370: CALL_OW 3
72374: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
72375: LD_ADDR_VAR 0 16
72379: PUSH
72380: LD_VAR 0 16
72384: PPUSH
72385: LD_VAR 0 7
72389: PPUSH
72390: CALL_OW 3
72394: ST_TO_ADDR
// continue ;
72395: GO 72300
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
72397: LD_VAR 0 4
72401: PUSH
72402: LD_VAR 0 7
72406: ARRAY
72407: PPUSH
72408: LD_INT 10
72410: PPUSH
72411: CALL 70365 0 2
72415: NOT
72416: PUSH
72417: LD_VAR 0 16
72421: PUSH
72422: LD_VAR 0 7
72426: ARRAY
72427: PUSH
72428: EMPTY
72429: EQUAL
72430: NOT
72431: AND
72432: IFFALSE 72698
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
72434: LD_VAR 0 4
72438: PUSH
72439: LD_VAR 0 7
72443: ARRAY
72444: PPUSH
72445: CALL_OW 262
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: LD_INT 2
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: IN
72460: IFFALSE 72501
// if GetFuel ( group [ i ] ) < 10 then
72462: LD_VAR 0 4
72466: PUSH
72467: LD_VAR 0 7
72471: ARRAY
72472: PPUSH
72473: CALL_OW 261
72477: PUSH
72478: LD_INT 10
72480: LESS
72481: IFFALSE 72501
// SetFuel ( group [ i ] , 12 ) ;
72483: LD_VAR 0 4
72487: PUSH
72488: LD_VAR 0 7
72492: ARRAY
72493: PPUSH
72494: LD_INT 12
72496: PPUSH
72497: CALL_OW 240
// if units_path [ i ] then
72501: LD_VAR 0 16
72505: PUSH
72506: LD_VAR 0 7
72510: ARRAY
72511: IFFALSE 72696
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
72513: LD_VAR 0 4
72517: PUSH
72518: LD_VAR 0 7
72522: ARRAY
72523: PPUSH
72524: LD_VAR 0 16
72528: PUSH
72529: LD_VAR 0 7
72533: ARRAY
72534: PUSH
72535: LD_INT 1
72537: ARRAY
72538: PUSH
72539: LD_INT 1
72541: ARRAY
72542: PPUSH
72543: LD_VAR 0 16
72547: PUSH
72548: LD_VAR 0 7
72552: ARRAY
72553: PUSH
72554: LD_INT 1
72556: ARRAY
72557: PUSH
72558: LD_INT 2
72560: ARRAY
72561: PPUSH
72562: CALL_OW 297
72566: PUSH
72567: LD_INT 6
72569: GREATER
72570: IFFALSE 72645
// begin if not HasTask ( group [ i ] ) then
72572: LD_VAR 0 4
72576: PUSH
72577: LD_VAR 0 7
72581: ARRAY
72582: PPUSH
72583: CALL_OW 314
72587: NOT
72588: IFFALSE 72643
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
72590: LD_VAR 0 4
72594: PUSH
72595: LD_VAR 0 7
72599: ARRAY
72600: PPUSH
72601: LD_VAR 0 16
72605: PUSH
72606: LD_VAR 0 7
72610: ARRAY
72611: PUSH
72612: LD_INT 1
72614: ARRAY
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PPUSH
72620: LD_VAR 0 16
72624: PUSH
72625: LD_VAR 0 7
72629: ARRAY
72630: PUSH
72631: LD_INT 1
72633: ARRAY
72634: PUSH
72635: LD_INT 2
72637: ARRAY
72638: PPUSH
72639: CALL_OW 114
// end else
72643: GO 72696
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
72645: LD_ADDR_VAR 0 15
72649: PUSH
72650: LD_VAR 0 16
72654: PUSH
72655: LD_VAR 0 7
72659: ARRAY
72660: PPUSH
72661: LD_INT 1
72663: PPUSH
72664: CALL_OW 3
72668: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
72669: LD_ADDR_VAR 0 16
72673: PUSH
72674: LD_VAR 0 16
72678: PPUSH
72679: LD_VAR 0 7
72683: PPUSH
72684: LD_VAR 0 15
72688: PPUSH
72689: CALL_OW 1
72693: ST_TO_ADDR
// continue ;
72694: GO 72300
// end ; end ; end else
72696: GO 75194
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
72698: LD_ADDR_VAR 0 14
72702: PUSH
72703: LD_INT 81
72705: PUSH
72706: LD_VAR 0 4
72710: PUSH
72711: LD_VAR 0 7
72715: ARRAY
72716: PPUSH
72717: CALL_OW 255
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PPUSH
72726: CALL_OW 69
72730: ST_TO_ADDR
// if not tmp then
72731: LD_VAR 0 14
72735: NOT
72736: IFFALSE 72740
// continue ;
72738: GO 72300
// if f_ignore_area then
72740: LD_VAR 0 17
72744: IFFALSE 72832
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
72746: LD_ADDR_VAR 0 15
72750: PUSH
72751: LD_VAR 0 14
72755: PPUSH
72756: LD_INT 3
72758: PUSH
72759: LD_INT 92
72761: PUSH
72762: LD_VAR 0 17
72766: PUSH
72767: LD_INT 1
72769: ARRAY
72770: PUSH
72771: LD_VAR 0 17
72775: PUSH
72776: LD_INT 2
72778: ARRAY
72779: PUSH
72780: LD_VAR 0 17
72784: PUSH
72785: LD_INT 3
72787: ARRAY
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PPUSH
72799: CALL_OW 72
72803: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72804: LD_VAR 0 14
72808: PUSH
72809: LD_VAR 0 15
72813: DIFF
72814: IFFALSE 72832
// tmp := tmp diff tmp2 ;
72816: LD_ADDR_VAR 0 14
72820: PUSH
72821: LD_VAR 0 14
72825: PUSH
72826: LD_VAR 0 15
72830: DIFF
72831: ST_TO_ADDR
// end ; if not f_murder then
72832: LD_VAR 0 20
72836: NOT
72837: IFFALSE 72895
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
72839: LD_ADDR_VAR 0 15
72843: PUSH
72844: LD_VAR 0 14
72848: PPUSH
72849: LD_INT 3
72851: PUSH
72852: LD_INT 50
72854: PUSH
72855: EMPTY
72856: LIST
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PPUSH
72862: CALL_OW 72
72866: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
72867: LD_VAR 0 14
72871: PUSH
72872: LD_VAR 0 15
72876: DIFF
72877: IFFALSE 72895
// tmp := tmp diff tmp2 ;
72879: LD_ADDR_VAR 0 14
72883: PUSH
72884: LD_VAR 0 14
72888: PUSH
72889: LD_VAR 0 15
72893: DIFF
72894: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
72895: LD_ADDR_VAR 0 14
72899: PUSH
72900: LD_VAR 0 4
72904: PUSH
72905: LD_VAR 0 7
72909: ARRAY
72910: PPUSH
72911: LD_VAR 0 14
72915: PPUSH
72916: LD_INT 1
72918: PPUSH
72919: LD_INT 1
72921: PPUSH
72922: CALL 44397 0 4
72926: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
72927: LD_VAR 0 4
72931: PUSH
72932: LD_VAR 0 7
72936: ARRAY
72937: PPUSH
72938: CALL_OW 257
72942: PUSH
72943: LD_INT 1
72945: EQUAL
72946: IFFALSE 73394
// begin if WantPlant ( group [ i ] ) then
72948: LD_VAR 0 4
72952: PUSH
72953: LD_VAR 0 7
72957: ARRAY
72958: PPUSH
72959: CALL 43865 0 1
72963: IFFALSE 72967
// continue ;
72965: GO 72300
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
72967: LD_VAR 0 18
72971: PUSH
72972: LD_VAR 0 4
72976: PUSH
72977: LD_VAR 0 7
72981: ARRAY
72982: PPUSH
72983: CALL_OW 310
72987: NOT
72988: AND
72989: PUSH
72990: LD_VAR 0 14
72994: PUSH
72995: LD_INT 1
72997: ARRAY
72998: PUSH
72999: LD_VAR 0 14
73003: PPUSH
73004: LD_INT 21
73006: PUSH
73007: LD_INT 2
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 58
73016: PUSH
73017: EMPTY
73018: LIST
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PPUSH
73024: CALL_OW 72
73028: IN
73029: AND
73030: IFFALSE 73066
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
73032: LD_VAR 0 4
73036: PUSH
73037: LD_VAR 0 7
73041: ARRAY
73042: PPUSH
73043: LD_VAR 0 14
73047: PUSH
73048: LD_INT 1
73050: ARRAY
73051: PPUSH
73052: CALL_OW 120
// attacking := true ;
73056: LD_ADDR_VAR 0 29
73060: PUSH
73061: LD_INT 1
73063: ST_TO_ADDR
// continue ;
73064: GO 72300
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
73066: LD_VAR 0 26
73070: PUSH
73071: LD_VAR 0 4
73075: PUSH
73076: LD_VAR 0 7
73080: ARRAY
73081: PPUSH
73082: CALL_OW 257
73086: PUSH
73087: LD_INT 1
73089: EQUAL
73090: AND
73091: PUSH
73092: LD_VAR 0 4
73096: PUSH
73097: LD_VAR 0 7
73101: ARRAY
73102: PPUSH
73103: CALL_OW 256
73107: PUSH
73108: LD_INT 800
73110: LESS
73111: AND
73112: PUSH
73113: LD_VAR 0 4
73117: PUSH
73118: LD_VAR 0 7
73122: ARRAY
73123: PPUSH
73124: CALL_OW 318
73128: NOT
73129: AND
73130: IFFALSE 73147
// ComCrawl ( group [ i ] ) ;
73132: LD_VAR 0 4
73136: PUSH
73137: LD_VAR 0 7
73141: ARRAY
73142: PPUSH
73143: CALL_OW 137
// if f_mines then
73147: LD_VAR 0 21
73151: IFFALSE 73394
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
73153: LD_VAR 0 14
73157: PUSH
73158: LD_INT 1
73160: ARRAY
73161: PPUSH
73162: CALL_OW 247
73166: PUSH
73167: LD_INT 3
73169: EQUAL
73170: PUSH
73171: LD_VAR 0 14
73175: PUSH
73176: LD_INT 1
73178: ARRAY
73179: PUSH
73180: LD_VAR 0 27
73184: IN
73185: NOT
73186: AND
73187: IFFALSE 73394
// begin x := GetX ( tmp [ 1 ] ) ;
73189: LD_ADDR_VAR 0 10
73193: PUSH
73194: LD_VAR 0 14
73198: PUSH
73199: LD_INT 1
73201: ARRAY
73202: PPUSH
73203: CALL_OW 250
73207: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
73208: LD_ADDR_VAR 0 11
73212: PUSH
73213: LD_VAR 0 14
73217: PUSH
73218: LD_INT 1
73220: ARRAY
73221: PPUSH
73222: CALL_OW 251
73226: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
73227: LD_ADDR_VAR 0 12
73231: PUSH
73232: LD_VAR 0 4
73236: PUSH
73237: LD_VAR 0 7
73241: ARRAY
73242: PPUSH
73243: CALL 70450 0 1
73247: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
73248: LD_VAR 0 4
73252: PUSH
73253: LD_VAR 0 7
73257: ARRAY
73258: PPUSH
73259: LD_VAR 0 10
73263: PPUSH
73264: LD_VAR 0 11
73268: PPUSH
73269: LD_VAR 0 14
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: PPUSH
73278: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
73282: LD_VAR 0 4
73286: PUSH
73287: LD_VAR 0 7
73291: ARRAY
73292: PPUSH
73293: LD_VAR 0 10
73297: PPUSH
73298: LD_VAR 0 12
73302: PPUSH
73303: LD_INT 7
73305: PPUSH
73306: CALL_OW 272
73310: PPUSH
73311: LD_VAR 0 11
73315: PPUSH
73316: LD_VAR 0 12
73320: PPUSH
73321: LD_INT 7
73323: PPUSH
73324: CALL_OW 273
73328: PPUSH
73329: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
73333: LD_VAR 0 4
73337: PUSH
73338: LD_VAR 0 7
73342: ARRAY
73343: PPUSH
73344: LD_INT 71
73346: PPUSH
73347: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
73351: LD_ADDR_VAR 0 27
73355: PUSH
73356: LD_VAR 0 27
73360: PPUSH
73361: LD_VAR 0 27
73365: PUSH
73366: LD_INT 1
73368: PLUS
73369: PPUSH
73370: LD_VAR 0 14
73374: PUSH
73375: LD_INT 1
73377: ARRAY
73378: PPUSH
73379: CALL_OW 1
73383: ST_TO_ADDR
// attacking := true ;
73384: LD_ADDR_VAR 0 29
73388: PUSH
73389: LD_INT 1
73391: ST_TO_ADDR
// continue ;
73392: GO 72300
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
73394: LD_VAR 0 4
73398: PUSH
73399: LD_VAR 0 7
73403: ARRAY
73404: PPUSH
73405: CALL_OW 257
73409: PUSH
73410: LD_INT 17
73412: EQUAL
73413: PUSH
73414: LD_VAR 0 4
73418: PUSH
73419: LD_VAR 0 7
73423: ARRAY
73424: PPUSH
73425: CALL_OW 110
73429: PUSH
73430: LD_INT 71
73432: EQUAL
73433: NOT
73434: AND
73435: IFFALSE 73581
// begin attacking := false ;
73437: LD_ADDR_VAR 0 29
73441: PUSH
73442: LD_INT 0
73444: ST_TO_ADDR
// k := 5 ;
73445: LD_ADDR_VAR 0 9
73449: PUSH
73450: LD_INT 5
73452: ST_TO_ADDR
// if tmp < k then
73453: LD_VAR 0 14
73457: PUSH
73458: LD_VAR 0 9
73462: LESS
73463: IFFALSE 73475
// k := tmp ;
73465: LD_ADDR_VAR 0 9
73469: PUSH
73470: LD_VAR 0 14
73474: ST_TO_ADDR
// for j = 1 to k do
73475: LD_ADDR_VAR 0 8
73479: PUSH
73480: DOUBLE
73481: LD_INT 1
73483: DEC
73484: ST_TO_ADDR
73485: LD_VAR 0 9
73489: PUSH
73490: FOR_TO
73491: IFFALSE 73579
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
73493: LD_VAR 0 14
73497: PUSH
73498: LD_VAR 0 8
73502: ARRAY
73503: PUSH
73504: LD_VAR 0 14
73508: PPUSH
73509: LD_INT 58
73511: PUSH
73512: EMPTY
73513: LIST
73514: PPUSH
73515: CALL_OW 72
73519: IN
73520: NOT
73521: IFFALSE 73577
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
73523: LD_VAR 0 4
73527: PUSH
73528: LD_VAR 0 7
73532: ARRAY
73533: PPUSH
73534: LD_VAR 0 14
73538: PUSH
73539: LD_VAR 0 8
73543: ARRAY
73544: PPUSH
73545: CALL_OW 115
// attacking := true ;
73549: LD_ADDR_VAR 0 29
73553: PUSH
73554: LD_INT 1
73556: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
73557: LD_VAR 0 4
73561: PUSH
73562: LD_VAR 0 7
73566: ARRAY
73567: PPUSH
73568: LD_INT 71
73570: PPUSH
73571: CALL_OW 109
// continue ;
73575: GO 73490
// end ; end ;
73577: GO 73490
73579: POP
73580: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
73581: LD_VAR 0 4
73585: PUSH
73586: LD_VAR 0 7
73590: ARRAY
73591: PPUSH
73592: CALL_OW 257
73596: PUSH
73597: LD_INT 8
73599: EQUAL
73600: PUSH
73601: LD_VAR 0 4
73605: PUSH
73606: LD_VAR 0 7
73610: ARRAY
73611: PPUSH
73612: CALL_OW 264
73616: PUSH
73617: LD_INT 28
73619: PUSH
73620: LD_INT 45
73622: PUSH
73623: LD_INT 7
73625: PUSH
73626: LD_INT 47
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: IN
73635: OR
73636: IFFALSE 73866
// begin attacking := false ;
73638: LD_ADDR_VAR 0 29
73642: PUSH
73643: LD_INT 0
73645: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
73646: LD_VAR 0 14
73650: PUSH
73651: LD_INT 1
73653: ARRAY
73654: PPUSH
73655: CALL_OW 266
73659: PUSH
73660: LD_INT 32
73662: PUSH
73663: LD_INT 31
73665: PUSH
73666: LD_INT 33
73668: PUSH
73669: LD_INT 4
73671: PUSH
73672: LD_INT 5
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: LIST
73679: LIST
73680: LIST
73681: IN
73682: IFFALSE 73866
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
73684: LD_ADDR_VAR 0 9
73688: PUSH
73689: LD_VAR 0 14
73693: PUSH
73694: LD_INT 1
73696: ARRAY
73697: PPUSH
73698: CALL_OW 266
73702: PPUSH
73703: LD_VAR 0 14
73707: PUSH
73708: LD_INT 1
73710: ARRAY
73711: PPUSH
73712: CALL_OW 250
73716: PPUSH
73717: LD_VAR 0 14
73721: PUSH
73722: LD_INT 1
73724: ARRAY
73725: PPUSH
73726: CALL_OW 251
73730: PPUSH
73731: LD_VAR 0 14
73735: PUSH
73736: LD_INT 1
73738: ARRAY
73739: PPUSH
73740: CALL_OW 254
73744: PPUSH
73745: LD_VAR 0 14
73749: PUSH
73750: LD_INT 1
73752: ARRAY
73753: PPUSH
73754: CALL_OW 248
73758: PPUSH
73759: LD_INT 0
73761: PPUSH
73762: CALL 51826 0 6
73766: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
73767: LD_ADDR_VAR 0 8
73771: PUSH
73772: LD_VAR 0 4
73776: PUSH
73777: LD_VAR 0 7
73781: ARRAY
73782: PPUSH
73783: LD_VAR 0 9
73787: PPUSH
73788: CALL 70513 0 2
73792: ST_TO_ADDR
// if j then
73793: LD_VAR 0 8
73797: IFFALSE 73866
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
73799: LD_VAR 0 8
73803: PUSH
73804: LD_INT 1
73806: ARRAY
73807: PPUSH
73808: LD_VAR 0 8
73812: PUSH
73813: LD_INT 2
73815: ARRAY
73816: PPUSH
73817: CALL_OW 488
73821: IFFALSE 73866
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
73823: LD_VAR 0 4
73827: PUSH
73828: LD_VAR 0 7
73832: ARRAY
73833: PPUSH
73834: LD_VAR 0 8
73838: PUSH
73839: LD_INT 1
73841: ARRAY
73842: PPUSH
73843: LD_VAR 0 8
73847: PUSH
73848: LD_INT 2
73850: ARRAY
73851: PPUSH
73852: CALL_OW 116
// attacking := true ;
73856: LD_ADDR_VAR 0 29
73860: PUSH
73861: LD_INT 1
73863: ST_TO_ADDR
// continue ;
73864: GO 72300
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
73866: LD_VAR 0 4
73870: PUSH
73871: LD_VAR 0 7
73875: ARRAY
73876: PPUSH
73877: CALL_OW 265
73881: PUSH
73882: LD_INT 11
73884: EQUAL
73885: IFFALSE 74163
// begin k := 10 ;
73887: LD_ADDR_VAR 0 9
73891: PUSH
73892: LD_INT 10
73894: ST_TO_ADDR
// x := 0 ;
73895: LD_ADDR_VAR 0 10
73899: PUSH
73900: LD_INT 0
73902: ST_TO_ADDR
// if tmp < k then
73903: LD_VAR 0 14
73907: PUSH
73908: LD_VAR 0 9
73912: LESS
73913: IFFALSE 73925
// k := tmp ;
73915: LD_ADDR_VAR 0 9
73919: PUSH
73920: LD_VAR 0 14
73924: ST_TO_ADDR
// for j = k downto 1 do
73925: LD_ADDR_VAR 0 8
73929: PUSH
73930: DOUBLE
73931: LD_VAR 0 9
73935: INC
73936: ST_TO_ADDR
73937: LD_INT 1
73939: PUSH
73940: FOR_DOWNTO
73941: IFFALSE 74016
// begin if GetType ( tmp [ j ] ) = unit_human then
73943: LD_VAR 0 14
73947: PUSH
73948: LD_VAR 0 8
73952: ARRAY
73953: PPUSH
73954: CALL_OW 247
73958: PUSH
73959: LD_INT 1
73961: EQUAL
73962: IFFALSE 74014
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
73964: LD_VAR 0 4
73968: PUSH
73969: LD_VAR 0 7
73973: ARRAY
73974: PPUSH
73975: LD_VAR 0 14
73979: PUSH
73980: LD_VAR 0 8
73984: ARRAY
73985: PPUSH
73986: CALL 70784 0 2
// x := tmp [ j ] ;
73990: LD_ADDR_VAR 0 10
73994: PUSH
73995: LD_VAR 0 14
73999: PUSH
74000: LD_VAR 0 8
74004: ARRAY
74005: ST_TO_ADDR
// attacking := true ;
74006: LD_ADDR_VAR 0 29
74010: PUSH
74011: LD_INT 1
74013: ST_TO_ADDR
// end ; end ;
74014: GO 73940
74016: POP
74017: POP
// if not x then
74018: LD_VAR 0 10
74022: NOT
74023: IFFALSE 74163
// begin attacking := true ;
74025: LD_ADDR_VAR 0 29
74029: PUSH
74030: LD_INT 1
74032: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
74033: LD_VAR 0 4
74037: PUSH
74038: LD_VAR 0 7
74042: ARRAY
74043: PPUSH
74044: CALL_OW 250
74048: PPUSH
74049: LD_VAR 0 4
74053: PUSH
74054: LD_VAR 0 7
74058: ARRAY
74059: PPUSH
74060: CALL_OW 251
74064: PPUSH
74065: CALL_OW 546
74069: PUSH
74070: LD_INT 2
74072: ARRAY
74073: PUSH
74074: LD_VAR 0 14
74078: PUSH
74079: LD_INT 1
74081: ARRAY
74082: PPUSH
74083: CALL_OW 250
74087: PPUSH
74088: LD_VAR 0 14
74092: PUSH
74093: LD_INT 1
74095: ARRAY
74096: PPUSH
74097: CALL_OW 251
74101: PPUSH
74102: CALL_OW 546
74106: PUSH
74107: LD_INT 2
74109: ARRAY
74110: EQUAL
74111: IFFALSE 74139
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
74113: LD_VAR 0 4
74117: PUSH
74118: LD_VAR 0 7
74122: ARRAY
74123: PPUSH
74124: LD_VAR 0 14
74128: PUSH
74129: LD_INT 1
74131: ARRAY
74132: PPUSH
74133: CALL 70784 0 2
74137: GO 74163
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74139: LD_VAR 0 4
74143: PUSH
74144: LD_VAR 0 7
74148: ARRAY
74149: PPUSH
74150: LD_VAR 0 14
74154: PUSH
74155: LD_INT 1
74157: ARRAY
74158: PPUSH
74159: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
74163: LD_VAR 0 4
74167: PUSH
74168: LD_VAR 0 7
74172: ARRAY
74173: PPUSH
74174: CALL_OW 264
74178: PUSH
74179: LD_INT 29
74181: EQUAL
74182: IFFALSE 74548
// begin if WantsToAttack ( group [ i ] ) in bombed then
74184: LD_VAR 0 4
74188: PUSH
74189: LD_VAR 0 7
74193: ARRAY
74194: PPUSH
74195: CALL_OW 319
74199: PUSH
74200: LD_VAR 0 28
74204: IN
74205: IFFALSE 74209
// continue ;
74207: GO 72300
// k := 8 ;
74209: LD_ADDR_VAR 0 9
74213: PUSH
74214: LD_INT 8
74216: ST_TO_ADDR
// x := 0 ;
74217: LD_ADDR_VAR 0 10
74221: PUSH
74222: LD_INT 0
74224: ST_TO_ADDR
// if tmp < k then
74225: LD_VAR 0 14
74229: PUSH
74230: LD_VAR 0 9
74234: LESS
74235: IFFALSE 74247
// k := tmp ;
74237: LD_ADDR_VAR 0 9
74241: PUSH
74242: LD_VAR 0 14
74246: ST_TO_ADDR
// for j = 1 to k do
74247: LD_ADDR_VAR 0 8
74251: PUSH
74252: DOUBLE
74253: LD_INT 1
74255: DEC
74256: ST_TO_ADDR
74257: LD_VAR 0 9
74261: PUSH
74262: FOR_TO
74263: IFFALSE 74395
// begin if GetType ( tmp [ j ] ) = unit_building then
74265: LD_VAR 0 14
74269: PUSH
74270: LD_VAR 0 8
74274: ARRAY
74275: PPUSH
74276: CALL_OW 247
74280: PUSH
74281: LD_INT 3
74283: EQUAL
74284: IFFALSE 74393
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
74286: LD_VAR 0 14
74290: PUSH
74291: LD_VAR 0 8
74295: ARRAY
74296: PUSH
74297: LD_VAR 0 28
74301: IN
74302: NOT
74303: PUSH
74304: LD_VAR 0 14
74308: PUSH
74309: LD_VAR 0 8
74313: ARRAY
74314: PPUSH
74315: CALL_OW 313
74319: AND
74320: IFFALSE 74393
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74322: LD_VAR 0 4
74326: PUSH
74327: LD_VAR 0 7
74331: ARRAY
74332: PPUSH
74333: LD_VAR 0 14
74337: PUSH
74338: LD_VAR 0 8
74342: ARRAY
74343: PPUSH
74344: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
74348: LD_ADDR_VAR 0 28
74352: PUSH
74353: LD_VAR 0 28
74357: PPUSH
74358: LD_VAR 0 28
74362: PUSH
74363: LD_INT 1
74365: PLUS
74366: PPUSH
74367: LD_VAR 0 14
74371: PUSH
74372: LD_VAR 0 8
74376: ARRAY
74377: PPUSH
74378: CALL_OW 1
74382: ST_TO_ADDR
// attacking := true ;
74383: LD_ADDR_VAR 0 29
74387: PUSH
74388: LD_INT 1
74390: ST_TO_ADDR
// break ;
74391: GO 74395
// end ; end ;
74393: GO 74262
74395: POP
74396: POP
// if not attacking and f_attack_depot then
74397: LD_VAR 0 29
74401: NOT
74402: PUSH
74403: LD_VAR 0 25
74407: AND
74408: IFFALSE 74503
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74410: LD_ADDR_VAR 0 13
74414: PUSH
74415: LD_VAR 0 14
74419: PPUSH
74420: LD_INT 2
74422: PUSH
74423: LD_INT 30
74425: PUSH
74426: LD_INT 0
74428: PUSH
74429: EMPTY
74430: LIST
74431: LIST
74432: PUSH
74433: LD_INT 30
74435: PUSH
74436: LD_INT 1
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: PPUSH
74448: CALL_OW 72
74452: ST_TO_ADDR
// if z then
74453: LD_VAR 0 13
74457: IFFALSE 74503
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
74459: LD_VAR 0 4
74463: PUSH
74464: LD_VAR 0 7
74468: ARRAY
74469: PPUSH
74470: LD_VAR 0 13
74474: PPUSH
74475: LD_VAR 0 4
74479: PUSH
74480: LD_VAR 0 7
74484: ARRAY
74485: PPUSH
74486: CALL_OW 74
74490: PPUSH
74491: CALL_OW 115
// attacking := true ;
74495: LD_ADDR_VAR 0 29
74499: PUSH
74500: LD_INT 1
74502: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
74503: LD_VAR 0 4
74507: PUSH
74508: LD_VAR 0 7
74512: ARRAY
74513: PPUSH
74514: CALL_OW 256
74518: PUSH
74519: LD_INT 500
74521: LESS
74522: IFFALSE 74548
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
74524: LD_VAR 0 4
74528: PUSH
74529: LD_VAR 0 7
74533: ARRAY
74534: PPUSH
74535: LD_VAR 0 14
74539: PUSH
74540: LD_INT 1
74542: ARRAY
74543: PPUSH
74544: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74548: LD_VAR 0 4
74552: PUSH
74553: LD_VAR 0 7
74557: ARRAY
74558: PPUSH
74559: CALL_OW 256
74563: PUSH
74564: LD_INT 250
74566: LESS
74567: PUSH
74568: LD_VAR 0 4
74572: PUSH
74573: LD_VAR 0 7
74577: ARRAY
74578: PUSH
74579: LD_INT 21
74581: PUSH
74582: LD_INT 2
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 23
74591: PUSH
74592: LD_INT 2
74594: PUSH
74595: EMPTY
74596: LIST
74597: LIST
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PPUSH
74603: CALL_OW 69
74607: IN
74608: AND
74609: IFFALSE 74734
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
74611: LD_ADDR_VAR 0 9
74615: PUSH
74616: LD_OWVAR 3
74620: PUSH
74621: LD_VAR 0 4
74625: PUSH
74626: LD_VAR 0 7
74630: ARRAY
74631: DIFF
74632: PPUSH
74633: LD_VAR 0 4
74637: PUSH
74638: LD_VAR 0 7
74642: ARRAY
74643: PPUSH
74644: CALL_OW 74
74648: ST_TO_ADDR
// if not k then
74649: LD_VAR 0 9
74653: NOT
74654: IFFALSE 74658
// continue ;
74656: GO 72300
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
74658: LD_VAR 0 9
74662: PUSH
74663: LD_INT 81
74665: PUSH
74666: LD_VAR 0 4
74670: PUSH
74671: LD_VAR 0 7
74675: ARRAY
74676: PPUSH
74677: CALL_OW 255
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PPUSH
74686: CALL_OW 69
74690: IN
74691: PUSH
74692: LD_VAR 0 9
74696: PPUSH
74697: LD_VAR 0 4
74701: PUSH
74702: LD_VAR 0 7
74706: ARRAY
74707: PPUSH
74708: CALL_OW 296
74712: PUSH
74713: LD_INT 5
74715: LESS
74716: AND
74717: IFFALSE 74734
// ComAutodestruct ( group [ i ] ) ;
74719: LD_VAR 0 4
74723: PUSH
74724: LD_VAR 0 7
74728: ARRAY
74729: PPUSH
74730: CALL 70682 0 1
// end ; if f_attack_depot then
74734: LD_VAR 0 25
74738: IFFALSE 74850
// begin k := 6 ;
74740: LD_ADDR_VAR 0 9
74744: PUSH
74745: LD_INT 6
74747: ST_TO_ADDR
// if tmp < k then
74748: LD_VAR 0 14
74752: PUSH
74753: LD_VAR 0 9
74757: LESS
74758: IFFALSE 74770
// k := tmp ;
74760: LD_ADDR_VAR 0 9
74764: PUSH
74765: LD_VAR 0 14
74769: ST_TO_ADDR
// for j = 1 to k do
74770: LD_ADDR_VAR 0 8
74774: PUSH
74775: DOUBLE
74776: LD_INT 1
74778: DEC
74779: ST_TO_ADDR
74780: LD_VAR 0 9
74784: PUSH
74785: FOR_TO
74786: IFFALSE 74848
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
74788: LD_VAR 0 8
74792: PPUSH
74793: CALL_OW 266
74797: PUSH
74798: LD_INT 0
74800: PUSH
74801: LD_INT 1
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: IN
74808: IFFALSE 74846
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
74810: LD_VAR 0 4
74814: PUSH
74815: LD_VAR 0 7
74819: ARRAY
74820: PPUSH
74821: LD_VAR 0 14
74825: PUSH
74826: LD_VAR 0 8
74830: ARRAY
74831: PPUSH
74832: CALL_OW 115
// attacking := true ;
74836: LD_ADDR_VAR 0 29
74840: PUSH
74841: LD_INT 1
74843: ST_TO_ADDR
// break ;
74844: GO 74848
// end ;
74846: GO 74785
74848: POP
74849: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
74850: LD_VAR 0 4
74854: PUSH
74855: LD_VAR 0 7
74859: ARRAY
74860: PPUSH
74861: CALL_OW 302
74865: PUSH
74866: LD_VAR 0 29
74870: NOT
74871: AND
74872: IFFALSE 75194
// begin if GetTag ( group [ i ] ) = 71 then
74874: LD_VAR 0 4
74878: PUSH
74879: LD_VAR 0 7
74883: ARRAY
74884: PPUSH
74885: CALL_OW 110
74889: PUSH
74890: LD_INT 71
74892: EQUAL
74893: IFFALSE 74934
// begin if HasTask ( group [ i ] ) then
74895: LD_VAR 0 4
74899: PUSH
74900: LD_VAR 0 7
74904: ARRAY
74905: PPUSH
74906: CALL_OW 314
74910: IFFALSE 74916
// continue else
74912: GO 72300
74914: GO 74934
// SetTag ( group [ i ] , 0 ) ;
74916: LD_VAR 0 4
74920: PUSH
74921: LD_VAR 0 7
74925: ARRAY
74926: PPUSH
74927: LD_INT 0
74929: PPUSH
74930: CALL_OW 109
// end ; k := 8 ;
74934: LD_ADDR_VAR 0 9
74938: PUSH
74939: LD_INT 8
74941: ST_TO_ADDR
// x := 0 ;
74942: LD_ADDR_VAR 0 10
74946: PUSH
74947: LD_INT 0
74949: ST_TO_ADDR
// if tmp < k then
74950: LD_VAR 0 14
74954: PUSH
74955: LD_VAR 0 9
74959: LESS
74960: IFFALSE 74972
// k := tmp ;
74962: LD_ADDR_VAR 0 9
74966: PUSH
74967: LD_VAR 0 14
74971: ST_TO_ADDR
// for j = 1 to k do
74972: LD_ADDR_VAR 0 8
74976: PUSH
74977: DOUBLE
74978: LD_INT 1
74980: DEC
74981: ST_TO_ADDR
74982: LD_VAR 0 9
74986: PUSH
74987: FOR_TO
74988: IFFALSE 75086
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
74990: LD_VAR 0 14
74994: PUSH
74995: LD_VAR 0 8
74999: ARRAY
75000: PPUSH
75001: CALL_OW 247
75005: PUSH
75006: LD_INT 1
75008: EQUAL
75009: PUSH
75010: LD_VAR 0 14
75014: PUSH
75015: LD_VAR 0 8
75019: ARRAY
75020: PPUSH
75021: CALL_OW 256
75025: PUSH
75026: LD_INT 250
75028: LESS
75029: PUSH
75030: LD_VAR 0 20
75034: AND
75035: PUSH
75036: LD_VAR 0 20
75040: NOT
75041: PUSH
75042: LD_VAR 0 14
75046: PUSH
75047: LD_VAR 0 8
75051: ARRAY
75052: PPUSH
75053: CALL_OW 256
75057: PUSH
75058: LD_INT 250
75060: GREATEREQUAL
75061: AND
75062: OR
75063: AND
75064: IFFALSE 75084
// begin x := tmp [ j ] ;
75066: LD_ADDR_VAR 0 10
75070: PUSH
75071: LD_VAR 0 14
75075: PUSH
75076: LD_VAR 0 8
75080: ARRAY
75081: ST_TO_ADDR
// break ;
75082: GO 75086
// end ;
75084: GO 74987
75086: POP
75087: POP
// if x then
75088: LD_VAR 0 10
75092: IFFALSE 75116
// ComAttackUnit ( group [ i ] , x ) else
75094: LD_VAR 0 4
75098: PUSH
75099: LD_VAR 0 7
75103: ARRAY
75104: PPUSH
75105: LD_VAR 0 10
75109: PPUSH
75110: CALL_OW 115
75114: GO 75140
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
75116: LD_VAR 0 4
75120: PUSH
75121: LD_VAR 0 7
75125: ARRAY
75126: PPUSH
75127: LD_VAR 0 14
75131: PUSH
75132: LD_INT 1
75134: ARRAY
75135: PPUSH
75136: CALL_OW 115
// if not HasTask ( group [ i ] ) then
75140: LD_VAR 0 4
75144: PUSH
75145: LD_VAR 0 7
75149: ARRAY
75150: PPUSH
75151: CALL_OW 314
75155: NOT
75156: IFFALSE 75194
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
75158: LD_VAR 0 4
75162: PUSH
75163: LD_VAR 0 7
75167: ARRAY
75168: PPUSH
75169: LD_VAR 0 14
75173: PPUSH
75174: LD_VAR 0 4
75178: PUSH
75179: LD_VAR 0 7
75183: ARRAY
75184: PPUSH
75185: CALL_OW 74
75189: PPUSH
75190: CALL_OW 115
// end ; end ; end ;
75194: GO 72300
75196: POP
75197: POP
// wait ( 0 0$1 ) ;
75198: LD_INT 35
75200: PPUSH
75201: CALL_OW 67
// until group = [ ] ;
75205: LD_VAR 0 4
75209: PUSH
75210: EMPTY
75211: EQUAL
75212: IFFALSE 72285
// end ;
75214: LD_VAR 0 2
75218: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75219: LD_INT 0
75221: PPUSH
75222: PPUSH
75223: PPUSH
75224: PPUSH
// if not base_units then
75225: LD_VAR 0 1
75229: NOT
75230: IFFALSE 75234
// exit ;
75232: GO 75321
// result := false ;
75234: LD_ADDR_VAR 0 2
75238: PUSH
75239: LD_INT 0
75241: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75242: LD_ADDR_VAR 0 5
75246: PUSH
75247: LD_VAR 0 1
75251: PPUSH
75252: LD_INT 21
75254: PUSH
75255: LD_INT 3
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PPUSH
75262: CALL_OW 72
75266: ST_TO_ADDR
// if not tmp then
75267: LD_VAR 0 5
75271: NOT
75272: IFFALSE 75276
// exit ;
75274: GO 75321
// for i in tmp do
75276: LD_ADDR_VAR 0 3
75280: PUSH
75281: LD_VAR 0 5
75285: PUSH
75286: FOR_IN
75287: IFFALSE 75319
// begin result := EnemyInRange ( i , 22 ) ;
75289: LD_ADDR_VAR 0 2
75293: PUSH
75294: LD_VAR 0 3
75298: PPUSH
75299: LD_INT 22
75301: PPUSH
75302: CALL 70365 0 2
75306: ST_TO_ADDR
// if result then
75307: LD_VAR 0 2
75311: IFFALSE 75317
// exit ;
75313: POP
75314: POP
75315: GO 75321
// end ;
75317: GO 75286
75319: POP
75320: POP
// end ;
75321: LD_VAR 0 2
75325: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75326: LD_INT 0
75328: PPUSH
75329: PPUSH
// if not units then
75330: LD_VAR 0 1
75334: NOT
75335: IFFALSE 75339
// exit ;
75337: GO 75409
// result := [ ] ;
75339: LD_ADDR_VAR 0 3
75343: PUSH
75344: EMPTY
75345: ST_TO_ADDR
// for i in units do
75346: LD_ADDR_VAR 0 4
75350: PUSH
75351: LD_VAR 0 1
75355: PUSH
75356: FOR_IN
75357: IFFALSE 75407
// if GetTag ( i ) = tag then
75359: LD_VAR 0 4
75363: PPUSH
75364: CALL_OW 110
75368: PUSH
75369: LD_VAR 0 2
75373: EQUAL
75374: IFFALSE 75405
// result := Insert ( result , result + 1 , i ) ;
75376: LD_ADDR_VAR 0 3
75380: PUSH
75381: LD_VAR 0 3
75385: PPUSH
75386: LD_VAR 0 3
75390: PUSH
75391: LD_INT 1
75393: PLUS
75394: PPUSH
75395: LD_VAR 0 4
75399: PPUSH
75400: CALL_OW 2
75404: ST_TO_ADDR
75405: GO 75356
75407: POP
75408: POP
// end ;
75409: LD_VAR 0 3
75413: RET
// export function IsDriver ( un ) ; begin
75414: LD_INT 0
75416: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75417: LD_ADDR_VAR 0 2
75421: PUSH
75422: LD_VAR 0 1
75426: PUSH
75427: LD_INT 55
75429: PUSH
75430: EMPTY
75431: LIST
75432: PPUSH
75433: CALL_OW 69
75437: IN
75438: ST_TO_ADDR
// end ;
75439: LD_VAR 0 2
75443: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75444: LD_INT 0
75446: PPUSH
75447: PPUSH
// list := [ ] ;
75448: LD_ADDR_VAR 0 5
75452: PUSH
75453: EMPTY
75454: ST_TO_ADDR
// case d of 0 :
75455: LD_VAR 0 3
75459: PUSH
75460: LD_INT 0
75462: DOUBLE
75463: EQUAL
75464: IFTRUE 75468
75466: GO 75601
75468: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75469: LD_ADDR_VAR 0 5
75473: PUSH
75474: LD_VAR 0 1
75478: PUSH
75479: LD_INT 4
75481: MINUS
75482: PUSH
75483: LD_VAR 0 2
75487: PUSH
75488: LD_INT 4
75490: MINUS
75491: PUSH
75492: LD_INT 2
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: PUSH
75500: LD_VAR 0 1
75504: PUSH
75505: LD_INT 3
75507: MINUS
75508: PUSH
75509: LD_VAR 0 2
75513: PUSH
75514: LD_INT 1
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_VAR 0 1
75526: PUSH
75527: LD_INT 4
75529: PLUS
75530: PUSH
75531: LD_VAR 0 2
75535: PUSH
75536: LD_INT 4
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: LIST
75543: PUSH
75544: LD_VAR 0 1
75548: PUSH
75549: LD_INT 3
75551: PLUS
75552: PUSH
75553: LD_VAR 0 2
75557: PUSH
75558: LD_INT 3
75560: PLUS
75561: PUSH
75562: LD_INT 5
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: LIST
75569: PUSH
75570: LD_VAR 0 1
75574: PUSH
75575: LD_VAR 0 2
75579: PUSH
75580: LD_INT 4
75582: PLUS
75583: PUSH
75584: LD_INT 0
75586: PUSH
75587: EMPTY
75588: LIST
75589: LIST
75590: LIST
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: ST_TO_ADDR
// end ; 1 :
75599: GO 76299
75601: LD_INT 1
75603: DOUBLE
75604: EQUAL
75605: IFTRUE 75609
75607: GO 75742
75609: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75610: LD_ADDR_VAR 0 5
75614: PUSH
75615: LD_VAR 0 1
75619: PUSH
75620: LD_VAR 0 2
75624: PUSH
75625: LD_INT 4
75627: MINUS
75628: PUSH
75629: LD_INT 3
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: PUSH
75637: LD_VAR 0 1
75641: PUSH
75642: LD_INT 3
75644: MINUS
75645: PUSH
75646: LD_VAR 0 2
75650: PUSH
75651: LD_INT 3
75653: MINUS
75654: PUSH
75655: LD_INT 2
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: LIST
75662: PUSH
75663: LD_VAR 0 1
75667: PUSH
75668: LD_INT 4
75670: MINUS
75671: PUSH
75672: LD_VAR 0 2
75676: PUSH
75677: LD_INT 1
75679: PUSH
75680: EMPTY
75681: LIST
75682: LIST
75683: LIST
75684: PUSH
75685: LD_VAR 0 1
75689: PUSH
75690: LD_VAR 0 2
75694: PUSH
75695: LD_INT 3
75697: PLUS
75698: PUSH
75699: LD_INT 0
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: LIST
75706: PUSH
75707: LD_VAR 0 1
75711: PUSH
75712: LD_INT 4
75714: PLUS
75715: PUSH
75716: LD_VAR 0 2
75720: PUSH
75721: LD_INT 4
75723: PLUS
75724: PUSH
75725: LD_INT 5
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: LIST
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: ST_TO_ADDR
// end ; 2 :
75740: GO 76299
75742: LD_INT 2
75744: DOUBLE
75745: EQUAL
75746: IFTRUE 75750
75748: GO 75879
75750: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75751: LD_ADDR_VAR 0 5
75755: PUSH
75756: LD_VAR 0 1
75760: PUSH
75761: LD_VAR 0 2
75765: PUSH
75766: LD_INT 3
75768: MINUS
75769: PUSH
75770: LD_INT 3
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: LIST
75777: PUSH
75778: LD_VAR 0 1
75782: PUSH
75783: LD_INT 4
75785: PLUS
75786: PUSH
75787: LD_VAR 0 2
75791: PUSH
75792: LD_INT 4
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: LIST
75799: PUSH
75800: LD_VAR 0 1
75804: PUSH
75805: LD_VAR 0 2
75809: PUSH
75810: LD_INT 4
75812: PLUS
75813: PUSH
75814: LD_INT 0
75816: PUSH
75817: EMPTY
75818: LIST
75819: LIST
75820: LIST
75821: PUSH
75822: LD_VAR 0 1
75826: PUSH
75827: LD_INT 3
75829: MINUS
75830: PUSH
75831: LD_VAR 0 2
75835: PUSH
75836: LD_INT 1
75838: PUSH
75839: EMPTY
75840: LIST
75841: LIST
75842: LIST
75843: PUSH
75844: LD_VAR 0 1
75848: PUSH
75849: LD_INT 4
75851: MINUS
75852: PUSH
75853: LD_VAR 0 2
75857: PUSH
75858: LD_INT 4
75860: MINUS
75861: PUSH
75862: LD_INT 2
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: ST_TO_ADDR
// end ; 3 :
75877: GO 76299
75879: LD_INT 3
75881: DOUBLE
75882: EQUAL
75883: IFTRUE 75887
75885: GO 76020
75887: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75888: LD_ADDR_VAR 0 5
75892: PUSH
75893: LD_VAR 0 1
75897: PUSH
75898: LD_INT 3
75900: PLUS
75901: PUSH
75902: LD_VAR 0 2
75906: PUSH
75907: LD_INT 4
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: LIST
75914: PUSH
75915: LD_VAR 0 1
75919: PUSH
75920: LD_INT 4
75922: PLUS
75923: PUSH
75924: LD_VAR 0 2
75928: PUSH
75929: LD_INT 4
75931: PLUS
75932: PUSH
75933: LD_INT 5
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: LIST
75940: PUSH
75941: LD_VAR 0 1
75945: PUSH
75946: LD_INT 4
75948: MINUS
75949: PUSH
75950: LD_VAR 0 2
75954: PUSH
75955: LD_INT 1
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: LIST
75962: PUSH
75963: LD_VAR 0 1
75967: PUSH
75968: LD_VAR 0 2
75972: PUSH
75973: LD_INT 4
75975: MINUS
75976: PUSH
75977: LD_INT 3
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: PUSH
75985: LD_VAR 0 1
75989: PUSH
75990: LD_INT 3
75992: MINUS
75993: PUSH
75994: LD_VAR 0 2
75998: PUSH
75999: LD_INT 3
76001: MINUS
76002: PUSH
76003: LD_INT 2
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: LIST
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: ST_TO_ADDR
// end ; 4 :
76018: GO 76299
76020: LD_INT 4
76022: DOUBLE
76023: EQUAL
76024: IFTRUE 76028
76026: GO 76161
76028: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76029: LD_ADDR_VAR 0 5
76033: PUSH
76034: LD_VAR 0 1
76038: PUSH
76039: LD_VAR 0 2
76043: PUSH
76044: LD_INT 4
76046: PLUS
76047: PUSH
76048: LD_INT 0
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: LIST
76055: PUSH
76056: LD_VAR 0 1
76060: PUSH
76061: LD_INT 3
76063: PLUS
76064: PUSH
76065: LD_VAR 0 2
76069: PUSH
76070: LD_INT 3
76072: PLUS
76073: PUSH
76074: LD_INT 5
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: LIST
76081: PUSH
76082: LD_VAR 0 1
76086: PUSH
76087: LD_INT 4
76089: PLUS
76090: PUSH
76091: LD_VAR 0 2
76095: PUSH
76096: LD_INT 4
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: LIST
76103: PUSH
76104: LD_VAR 0 1
76108: PUSH
76109: LD_VAR 0 2
76113: PUSH
76114: LD_INT 3
76116: MINUS
76117: PUSH
76118: LD_INT 3
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: LIST
76125: PUSH
76126: LD_VAR 0 1
76130: PUSH
76131: LD_INT 4
76133: MINUS
76134: PUSH
76135: LD_VAR 0 2
76139: PUSH
76140: LD_INT 4
76142: MINUS
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: LIST
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: ST_TO_ADDR
// end ; 5 :
76159: GO 76299
76161: LD_INT 5
76163: DOUBLE
76164: EQUAL
76165: IFTRUE 76169
76167: GO 76298
76169: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_INT 4
76182: MINUS
76183: PUSH
76184: LD_VAR 0 2
76188: PUSH
76189: LD_INT 1
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: LIST
76196: PUSH
76197: LD_VAR 0 1
76201: PUSH
76202: LD_VAR 0 2
76206: PUSH
76207: LD_INT 4
76209: MINUS
76210: PUSH
76211: LD_INT 3
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: LIST
76218: PUSH
76219: LD_VAR 0 1
76223: PUSH
76224: LD_INT 4
76226: PLUS
76227: PUSH
76228: LD_VAR 0 2
76232: PUSH
76233: LD_INT 4
76235: PLUS
76236: PUSH
76237: LD_INT 5
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: LD_INT 3
76252: PLUS
76253: PUSH
76254: LD_VAR 0 2
76258: PUSH
76259: LD_INT 4
76261: PUSH
76262: EMPTY
76263: LIST
76264: LIST
76265: LIST
76266: PUSH
76267: LD_VAR 0 1
76271: PUSH
76272: LD_VAR 0 2
76276: PUSH
76277: LD_INT 3
76279: PLUS
76280: PUSH
76281: LD_INT 0
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: LIST
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: ST_TO_ADDR
// end ; end ;
76296: GO 76299
76298: POP
// result := list ;
76299: LD_ADDR_VAR 0 4
76303: PUSH
76304: LD_VAR 0 5
76308: ST_TO_ADDR
// end ;
76309: LD_VAR 0 4
76313: RET
