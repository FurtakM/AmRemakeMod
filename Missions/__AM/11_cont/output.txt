// starting begin ResetFog ;
   0: CALL_OW 335
// Randomize ;
   4: CALL_OW 10
// InitVariables ;
   8: CALL 50 0 0
// InitMacro ;
  12: CALL 44449 0 0
// if debug then
  16: LD_EXP 1
  20: IFFALSE 29
// FogOff ( 1 ) ;
  22: LD_INT 1
  24: PPUSH
  25: CALL_OW 344
// PrepareNature ;
  29: CALL 28604 0 0
// PrepareAmerican ;
  33: CALL 349 0 0
// PrepareArabian ;
  37: CALL 32919 0 0
// Action ;
  41: CALL 37111 0 0
// RunMacro ;
  45: CALL 44612 0 0
// end ;
  49: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter ; function InitVariables ; begin
  50: LD_INT 0
  52: PPUSH
// debug := false ;
  53: LD_ADDR_EXP 1
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// game := true ;
  61: LD_ADDR_EXP 2
  65: PUSH
  66: LD_INT 1
  68: ST_TO_ADDR
// mission_prefix := 11_ ;
  69: LD_ADDR_EXP 3
  73: PUSH
  74: LD_STRING 11_
  76: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
  77: LD_ADDR_EXP 4
  81: PUSH
  82: LD_STRING 10c_
  84: ST_TO_ADDR
// ar_run := false ;
  85: LD_ADDR_EXP 5
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// ar_patrol := false ;
  93: LD_ADDR_EXP 7
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// base_captured := false ;
 101: LD_ADDR_EXP 6
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// us_scout := 0 ;
 109: LD_ADDR_EXP 8
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 117: LD_ADDR_EXP 9
 121: PUSH
 122: LD_INT 0
 124: PUSH
 125: LD_INT 0
 127: PUSH
 128: LD_INT 0
 130: PUSH
 131: LD_INT 0
 133: PUSH
 134: LD_INT 0
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: LIST
 142: LIST
 143: ST_TO_ADDR
// kamikazed := false ;
 144: LD_ADDR_EXP 10
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// artifact_stolen := false ;
 152: LD_ADDR_EXP 11
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// artifact_get := false ;
 160: LD_ADDR_EXP 12
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// game_time := [ 90 90$00 , 80 80$00 , 75 75$00 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 14
 172: PUSH
 173: LD_INT 189000
 175: PUSH
 176: LD_INT 168000
 178: PUSH
 179: LD_INT 157500
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// powell_warn := false ;
 193: LD_ADDR_EXP 15
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// loses_counter := 0 ;
 201: LD_ADDR_EXP 16
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// artifact_oncargo := false ;
 209: LD_ADDR_EXP 13
 213: PUSH
 214: LD_INT 0
 216: ST_TO_ADDR
// end ;
 217: LD_VAR 0 1
 221: RET
// function Debuger ; var i ; begin
 222: LD_INT 0
 224: PPUSH
 225: PPUSH
// if not debug then
 226: LD_EXP 1
 230: NOT
 231: IFFALSE 235
// exit ;
 233: GO 344
// game_speed := 5 ;
 235: LD_ADDR_OWVAR 65
 239: PUSH
 240: LD_INT 5
 242: ST_TO_ADDR
// uc_side := 1 ;
 243: LD_ADDR_OWVAR 20
 247: PUSH
 248: LD_INT 1
 250: ST_TO_ADDR
// uc_nation := 1 ;
 251: LD_ADDR_OWVAR 21
 255: PUSH
 256: LD_INT 1
 258: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
 259: LD_ADDR_OWVAR 37
 263: PUSH
 264: LD_INT 2
 266: ST_TO_ADDR
// vc_control := control_computer ;
 267: LD_ADDR_OWVAR 38
 271: PUSH
 272: LD_INT 3
 274: ST_TO_ADDR
// vc_engine := engine_combustion ;
 275: LD_ADDR_OWVAR 39
 279: PUSH
 280: LD_INT 1
 282: ST_TO_ADDR
// vc_weapon := us_rocket_launcher ;
 283: LD_ADDR_OWVAR 40
 287: PUSH
 288: LD_INT 7
 290: ST_TO_ADDR
// for i = 1 to 4 do
 291: LD_ADDR_VAR 0 2
 295: PUSH
 296: DOUBLE
 297: LD_INT 1
 299: DEC
 300: ST_TO_ADDR
 301: LD_INT 4
 303: PUSH
 304: FOR_TO
 305: IFFALSE 330
// PlaceUnitXYR ( CreateVehicle , 137 , 91 , 6 , false ) ;
 307: CALL_OW 45
 311: PPUSH
 312: LD_INT 137
 314: PPUSH
 315: LD_INT 91
 317: PPUSH
 318: LD_INT 6
 320: PPUSH
 321: LD_INT 0
 323: PPUSH
 324: CALL_OW 50
 328: GO 304
 330: POP
 331: POP
// SetSide ( ar_force_south , 1 ) ;
 332: LD_EXP 33
 336: PPUSH
 337: LD_INT 1
 339: PPUSH
 340: CALL_OW 235
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export us_team ; export function PrepareAmerican ; var i , k , un , tmp , selected , vehs , veh , others ; begin
 349: LD_INT 0
 351: PPUSH
 352: PPUSH
 353: PPUSH
 354: PPUSH
 355: PPUSH
 356: PPUSH
 357: PPUSH
 358: PPUSH
 359: PPUSH
// uc_side := 4 ;
 360: LD_ADDR_OWVAR 20
 364: PUSH
 365: LD_INT 4
 367: ST_TO_ADDR
// uc_nation := 1 ;
 368: LD_ADDR_OWVAR 21
 372: PUSH
 373: LD_INT 1
 375: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ) ;
 376: LD_ADDR_EXP 26
 380: PUSH
 381: LD_STRING Powell
 383: PPUSH
 384: LD_INT 0
 386: PPUSH
 387: CALL 1907 0 2
 391: ST_TO_ADDR
// uc_side := 1 ;
 392: LD_ADDR_OWVAR 20
 396: PUSH
 397: LD_INT 1
 399: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
 400: LD_ADDR_EXP 17
 404: PUSH
 405: LD_STRING JMM
 407: PPUSH
 408: LD_EXP 1
 412: NOT
 413: PPUSH
 414: CALL 1907 0 2
 418: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
 419: LD_ADDR_EXP 18
 423: PUSH
 424: LD_STRING Lisa
 426: PPUSH
 427: LD_EXP 1
 431: NOT
 432: PPUSH
 433: CALL 1907 0 2
 437: ST_TO_ADDR
// if not Lisa then
 438: LD_EXP 18
 442: NOT
 443: IFFALSE 458
// Lisa := CreateCharacter ( 10_Lisa ) ;
 445: LD_ADDR_EXP 18
 449: PUSH
 450: LD_STRING 10_Lisa
 452: PPUSH
 453: CALL_OW 34
 457: ST_TO_ADDR
// if not Lisa then
 458: LD_EXP 18
 462: NOT
 463: IFFALSE 478
// Lisa := CreateCharacter ( 09_Lisa ) ;
 465: LD_ADDR_EXP 18
 469: PUSH
 470: LD_STRING 09_Lisa
 472: PPUSH
 473: CALL_OW 34
 477: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
 478: LD_ADDR_EXP 19
 482: PUSH
 483: LD_STRING Donaldson
 485: PPUSH
 486: LD_EXP 1
 490: NOT
 491: PPUSH
 492: CALL 1907 0 2
 496: ST_TO_ADDR
// if not Donaldson then
 497: LD_EXP 19
 501: NOT
 502: IFFALSE 517
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 504: LD_ADDR_EXP 19
 508: PUSH
 509: LD_STRING 10_Donaldson
 511: PPUSH
 512: CALL_OW 34
 516: ST_TO_ADDR
// if not Donaldson then
 517: LD_EXP 19
 521: NOT
 522: IFFALSE 537
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 524: LD_ADDR_EXP 19
 528: PUSH
 529: LD_STRING 09_Donaldson
 531: PPUSH
 532: CALL_OW 34
 536: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
 537: LD_ADDR_EXP 20
 541: PUSH
 542: LD_STRING Bobby
 544: PPUSH
 545: LD_EXP 1
 549: NOT
 550: PPUSH
 551: CALL 1907 0 2
 555: ST_TO_ADDR
// if not Bobby then
 556: LD_EXP 20
 560: NOT
 561: IFFALSE 576
// Bobby := CreateCharacter ( 10_Bobby ) ;
 563: LD_ADDR_EXP 20
 567: PUSH
 568: LD_STRING 10_Bobby
 570: PPUSH
 571: CALL_OW 34
 575: ST_TO_ADDR
// if not Bobby then
 576: LD_EXP 20
 580: NOT
 581: IFFALSE 596
// Bobby := CreateCharacter ( 09_Bobby ) ;
 583: LD_ADDR_EXP 20
 587: PUSH
 588: LD_STRING 09_Bobby
 590: PPUSH
 591: CALL_OW 34
 595: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
 596: LD_ADDR_EXP 21
 600: PUSH
 601: LD_STRING Cyrus
 603: PPUSH
 604: LD_EXP 1
 608: NOT
 609: PPUSH
 610: CALL 1907 0 2
 614: ST_TO_ADDR
// if not Cyrus then
 615: LD_EXP 21
 619: NOT
 620: IFFALSE 635
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 622: LD_ADDR_EXP 21
 626: PUSH
 627: LD_STRING 10_Cyrus
 629: PPUSH
 630: CALL_OW 34
 634: ST_TO_ADDR
// if not Cyrus then
 635: LD_EXP 21
 639: NOT
 640: IFFALSE 655
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 642: LD_ADDR_EXP 21
 646: PUSH
 647: LD_STRING 09_Cyrus
 649: PPUSH
 650: CALL_OW 34
 654: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) ) ;
 655: LD_ADDR_EXP 22
 659: PUSH
 660: LD_STRING Denis
 662: PPUSH
 663: LD_EXP 1
 667: NOT
 668: PPUSH
 669: CALL 1907 0 2
 673: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
 674: LD_ADDR_EXP 23
 678: PUSH
 679: LD_STRING Brown
 681: PPUSH
 682: LD_EXP 1
 686: NOT
 687: PPUSH
 688: CALL 1907 0 2
 692: ST_TO_ADDR
// if not Brown then
 693: LD_EXP 23
 697: NOT
 698: IFFALSE 713
// Brown := CreateCharacter ( 10_Brown ) ;
 700: LD_ADDR_EXP 23
 704: PUSH
 705: LD_STRING 10_Brown
 707: PPUSH
 708: CALL_OW 34
 712: ST_TO_ADDR
// if not Brown then
 713: LD_EXP 23
 717: NOT
 718: IFFALSE 733
// Brown := CreateCharacter ( 08_Brown ) ;
 720: LD_ADDR_EXP 23
 724: PUSH
 725: LD_STRING 08_Brown
 727: PPUSH
 728: CALL_OW 34
 732: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
 733: LD_ADDR_EXP 24
 737: PUSH
 738: LD_STRING Gladstone
 740: PPUSH
 741: LD_EXP 1
 745: NOT
 746: PPUSH
 747: CALL 1907 0 2
 751: ST_TO_ADDR
// if not Gladstone then
 752: LD_EXP 24
 756: NOT
 757: IFFALSE 772
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
 759: LD_ADDR_EXP 24
 763: PUSH
 764: LD_STRING 10_Gladstone
 766: PPUSH
 767: CALL_OW 34
 771: ST_TO_ADDR
// if not Gladstone then
 772: LD_EXP 24
 776: NOT
 777: IFFALSE 792
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
 779: LD_ADDR_EXP 24
 783: PUSH
 784: LD_STRING 08_Gladstone
 786: PPUSH
 787: CALL_OW 34
 791: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) ) ;
 792: LD_ADDR_EXP 25
 796: PUSH
 797: LD_STRING Houten
 799: PPUSH
 800: LD_EXP 1
 804: NOT
 805: PPUSH
 806: CALL 1907 0 2
 810: ST_TO_ADDR
// if not Houten then
 811: LD_EXP 25
 815: NOT
 816: IFFALSE 831
// Houten := CreateCharacter ( 10_Houten ) ;
 818: LD_ADDR_EXP 25
 822: PUSH
 823: LD_STRING 10_Houten
 825: PPUSH
 826: CALL_OW 34
 830: ST_TO_ADDR
// if not Houten then
 831: LD_EXP 25
 835: NOT
 836: IFFALSE 851
// Houten := CreateCharacter ( 09_Houten ) ;
 838: LD_ADDR_EXP 25
 842: PUSH
 843: LD_STRING 09_Houten
 845: PPUSH
 846: CALL_OW 34
 850: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) ) ;
 851: LD_ADDR_EXP 27
 855: PUSH
 856: LD_STRING Cornel
 858: PPUSH
 859: LD_EXP 1
 863: NOT
 864: PPUSH
 865: CALL 1907 0 2
 869: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ) ;
 870: LD_ADDR_EXP 28
 874: PUSH
 875: LD_STRING Gary
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: CALL 1907 0 2
 888: ST_TO_ADDR
// if not Gary then
 889: LD_EXP 28
 893: NOT
 894: IFFALSE 909
// Gary := CreateCharacter ( 10_Gary ) ;
 896: LD_ADDR_EXP 28
 900: PUSH
 901: LD_STRING 10_Gary
 903: PPUSH
 904: CALL_OW 34
 908: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) ) ;
 909: LD_ADDR_EXP 29
 913: PUSH
 914: LD_STRING Frank
 916: PPUSH
 917: LD_EXP 1
 921: NOT
 922: PPUSH
 923: CALL 1907 0 2
 927: ST_TO_ADDR
// if not Frank then
 928: LD_EXP 29
 932: NOT
 933: IFFALSE 948
// Frank := CreateCharacter ( 08_Frank ) ;
 935: LD_ADDR_EXP 29
 939: PUSH
 940: LD_STRING 08_Frank
 942: PPUSH
 943: CALL_OW 34
 947: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) ) ;
 948: LD_ADDR_EXP 30
 952: PUSH
 953: LD_STRING Kikuchi
 955: PPUSH
 956: LD_EXP 1
 960: NOT
 961: PPUSH
 962: CALL 1907 0 2
 966: ST_TO_ADDR
// if not Kikuchi then
 967: LD_EXP 30
 971: NOT
 972: IFFALSE 987
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
 974: LD_ADDR_EXP 30
 978: PUSH
 979: LD_STRING 08_Kikuchi
 981: PPUSH
 982: CALL_OW 34
 986: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 987: LD_ADDR_VAR 0 5
 991: PUSH
 992: LD_EXP 18
 996: PUSH
 997: LD_EXP 19
1001: PUSH
1002: LD_EXP 20
1006: PUSH
1007: LD_EXP 21
1011: PUSH
1012: LD_EXP 22
1016: PUSH
1017: LD_EXP 23
1021: PUSH
1022: LD_EXP 24
1026: PUSH
1027: LD_EXP 25
1031: PUSH
1032: LD_EXP 27
1036: PUSH
1037: LD_EXP 28
1041: PUSH
1042: LD_EXP 29
1046: PUSH
1047: LD_EXP 30
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: ST_TO_ADDR
// tmp := tmp diff 0 ;
1066: LD_ADDR_VAR 0 5
1070: PUSH
1071: LD_VAR 0 5
1075: PUSH
1076: LD_INT 0
1078: DIFF
1079: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1080: LD_ADDR_VAR 0 5
1084: PUSH
1085: LD_VAR 0 5
1089: PUSH
1090: LD_STRING 10_lock
1092: PPUSH
1093: CALL_OW 31
1097: UNION
1098: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1099: LD_ADDR_VAR 0 5
1103: PUSH
1104: LD_VAR 0 5
1108: PUSH
1109: LD_STRING 10c_lock
1111: PPUSH
1112: CALL_OW 31
1116: UNION
1117: ST_TO_ADDR
// for i in tmp do
1118: LD_ADDR_VAR 0 2
1122: PUSH
1123: LD_VAR 0 5
1127: PUSH
1128: FOR_IN
1129: IFFALSE 1160
// if GetClass ( i ) = class_mortar then
1131: LD_VAR 0 2
1135: PPUSH
1136: CALL_OW 257
1140: PUSH
1141: LD_INT 8
1143: EQUAL
1144: IFFALSE 1158
// SetClass ( i , class_soldier ) ;
1146: LD_VAR 0 2
1150: PPUSH
1151: LD_INT 1
1153: PPUSH
1154: CALL_OW 336
1158: GO 1128
1160: POP
1161: POP
// if tmp < 12 then
1162: LD_VAR 0 5
1166: PUSH
1167: LD_INT 12
1169: LESS
1170: IFFALSE 1268
// begin k := 16 - tmp ;
1172: LD_ADDR_VAR 0 3
1176: PUSH
1177: LD_INT 16
1179: PUSH
1180: LD_VAR 0 5
1184: MINUS
1185: ST_TO_ADDR
// for i = 1 to k do
1186: LD_ADDR_VAR 0 2
1190: PUSH
1191: DOUBLE
1192: LD_INT 1
1194: DEC
1195: ST_TO_ADDR
1196: LD_VAR 0 3
1200: PUSH
1201: FOR_TO
1202: IFFALSE 1266
// begin PrepareHuman ( false , [ 1 , 1 , 2 , 3 , 4 ] [ rand ( 1 , 5 ) ] , 6 ) ;
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PUSH
1210: LD_INT 1
1212: PUSH
1213: LD_INT 2
1215: PUSH
1216: LD_INT 3
1218: PUSH
1219: LD_INT 4
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: PUSH
1229: LD_INT 1
1231: PPUSH
1232: LD_INT 5
1234: PPUSH
1235: CALL_OW 12
1239: ARRAY
1240: PPUSH
1241: LD_INT 6
1243: PPUSH
1244: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_VAR 0 5
1257: PUSH
1258: CALL_OW 44
1262: ADD
1263: ST_TO_ADDR
// end ;
1264: GO 1201
1266: POP
1267: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_engineer , 1 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1268: LD_ADDR_VAR 0 6
1272: PUSH
1273: LD_STRING 1
1275: PPUSH
1276: LD_INT 12
1278: PPUSH
1279: LD_INT 12
1281: PPUSH
1282: LD_INT -5
1284: PUSH
1285: LD_EXP 17
1289: PUSH
1290: LD_INT -2
1292: PUSH
1293: LD_INT -3
1295: PUSH
1296: LD_INT -5
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: PUSH
1306: LD_VAR 0 5
1310: ADD
1311: PUSH
1312: LD_INT -6
1314: PUSH
1315: LD_INT -4
1317: PUSH
1318: LD_EXP 26
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: LIST
1327: ADD
1328: PPUSH
1329: LD_INT 1
1331: PUSH
1332: LD_INT 4
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 2
1341: PUSH
1342: LD_INT 1
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 3
1351: PUSH
1352: LD_INT 0
1354: PUSH
1355: LD_INT 5
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 4
1365: PUSH
1366: LD_INT 0
1368: PUSH
1369: LD_INT 3
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PUSH
1377: LD_INT 5
1379: PUSH
1380: LD_INT 0
1382: PUSH
1383: LD_INT 2
1385: PUSH
1386: EMPTY
1387: LIST
1388: LIST
1389: LIST
1390: PUSH
1391: EMPTY
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: LIST
1397: PPUSH
1398: CALL_OW 42
1402: ST_TO_ADDR
// others := tmp diff selected ;
1403: LD_ADDR_VAR 0 9
1407: PUSH
1408: LD_VAR 0 5
1412: PUSH
1413: LD_VAR 0 6
1417: DIFF
1418: ST_TO_ADDR
// others := tmp diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1419: LD_ADDR_VAR 0 9
1423: PUSH
1424: LD_VAR 0 5
1428: PUSH
1429: LD_EXP 18
1433: PUSH
1434: LD_EXP 19
1438: PUSH
1439: LD_EXP 20
1443: PUSH
1444: LD_EXP 21
1448: PUSH
1449: LD_EXP 22
1453: PUSH
1454: LD_EXP 23
1458: PUSH
1459: LD_EXP 24
1463: PUSH
1464: LD_EXP 25
1468: PUSH
1469: LD_EXP 27
1473: PUSH
1474: LD_EXP 28
1478: PUSH
1479: LD_EXP 29
1483: PUSH
1484: LD_EXP 30
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: DIFF
1503: ST_TO_ADDR
// if others then
1504: LD_VAR 0 9
1508: IFFALSE 1522
// SaveCharacters ( others , 11_others ) ;
1510: LD_VAR 0 9
1514: PPUSH
1515: LD_STRING 11_others
1517: PPUSH
1518: CALL_OW 38
// us_team := tmp ;
1522: LD_ADDR_EXP 31
1526: PUSH
1527: LD_VAR 0 5
1531: ST_TO_ADDR
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1532: LD_ADDR_VAR 0 7
1536: PUSH
1537: LD_INT 3
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: LD_INT 4
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 2
1557: PUSH
1558: LD_INT 2
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 5
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 5
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 1
1599: PUSH
1600: LD_INT 7
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: LD_INT 2
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: LD_INT 7
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: EMPTY
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: ST_TO_ADDR
// for i in JMM ^ selected do
1634: LD_ADDR_VAR 0 2
1638: PUSH
1639: LD_EXP 17
1643: PUSH
1644: LD_VAR 0 6
1648: ADD
1649: PUSH
1650: FOR_IN
1651: IFFALSE 1840
// begin if GetClass ( i ) = 3 then
1653: LD_VAR 0 2
1657: PPUSH
1658: CALL_OW 257
1662: PUSH
1663: LD_INT 3
1665: EQUAL
1666: IFFALSE 1823
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1668: LD_ADDR_OWVAR 37
1672: PUSH
1673: LD_VAR 0 7
1677: PUSH
1678: LD_INT 1
1680: ARRAY
1681: PUSH
1682: LD_INT 1
1684: ARRAY
1685: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_VAR 0 7
1695: PUSH
1696: LD_INT 1
1698: ARRAY
1699: PUSH
1700: LD_INT 2
1702: ARRAY
1703: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
1704: LD_ADDR_OWVAR 38
1708: PUSH
1709: LD_VAR 0 7
1713: PUSH
1714: LD_INT 1
1716: ARRAY
1717: PUSH
1718: LD_INT 3
1720: ARRAY
1721: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
1722: LD_ADDR_OWVAR 40
1726: PUSH
1727: LD_VAR 0 7
1731: PUSH
1732: LD_INT 1
1734: ARRAY
1735: PUSH
1736: LD_INT 4
1738: ARRAY
1739: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: LD_VAR 0 7
1749: PPUSH
1750: LD_INT 1
1752: PPUSH
1753: CALL_OW 3
1757: ST_TO_ADDR
// veh := CreateVehicle ;
1758: LD_ADDR_VAR 0 8
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
1768: LD_VAR 0 8
1772: PPUSH
1773: LD_INT 8
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
1783: LD_VAR 0 2
1787: PPUSH
1788: LD_VAR 0 8
1792: PPUSH
1793: CALL_OW 52
// if i = JMM then
1797: LD_VAR 0 2
1801: PUSH
1802: LD_EXP 17
1806: EQUAL
1807: IFFALSE 1821
// SetMark ( veh , 1 ) ;
1809: LD_VAR 0 8
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: CALL_OW 242
// end else
1821: GO 1838
// PlaceUnitArea ( i , am_hum_start , false ) ;
1823: LD_VAR 0 2
1827: PPUSH
1828: LD_INT 9
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 49
// end ;
1838: GO 1650
1840: POP
1841: POP
// vc_chassis := us_medium_tracked ;
1842: LD_ADDR_OWVAR 37
1846: PUSH
1847: LD_INT 3
1849: ST_TO_ADDR
// vc_engine := engine_solar ;
1850: LD_ADDR_OWVAR 39
1854: PUSH
1855: LD_INT 2
1857: ST_TO_ADDR
// vc_control := control_computer ;
1858: LD_ADDR_OWVAR 38
1862: PUSH
1863: LD_INT 3
1865: ST_TO_ADDR
// vc_weapon := us_radar ;
1866: LD_ADDR_OWVAR 40
1870: PUSH
1871: LD_INT 11
1873: ST_TO_ADDR
// veh := CreateVehicle ;
1874: LD_ADDR_VAR 0 8
1878: PUSH
1879: CALL_OW 45
1883: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
1884: LD_VAR 0 8
1888: PPUSH
1889: LD_INT 87
1891: PPUSH
1892: LD_INT 142
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 48
// end ; end_of_file
1902: LD_VAR 0 1
1906: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
// if exist_mode then
1911: LD_VAR 0 2
1915: IFFALSE 1940
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
1917: LD_ADDR_VAR 0 4
1921: PUSH
1922: LD_EXP 4
1926: PUSH
1927: LD_VAR 0 1
1931: STR
1932: PPUSH
1933: CALL_OW 34
1937: ST_TO_ADDR
1938: GO 1955
// unit := NewCharacter ( ident ) ;
1940: LD_ADDR_VAR 0 4
1944: PUSH
1945: LD_VAR 0 1
1949: PPUSH
1950: CALL_OW 25
1954: ST_TO_ADDR
// result := unit ;
1955: LD_ADDR_VAR 0 3
1959: PUSH
1960: LD_VAR 0 4
1964: ST_TO_ADDR
// end ;
1965: LD_VAR 0 3
1969: RET
// export function _GetHexInfo ( x , y ) ; begin
1970: LD_INT 0
1972: PPUSH
// result := false ;
1973: LD_ADDR_VAR 0 3
1977: PUSH
1978: LD_INT 0
1980: ST_TO_ADDR
// if not ValidHex ( x , y ) or not x or not y then
1981: LD_VAR 0 1
1985: PPUSH
1986: LD_VAR 0 2
1990: PPUSH
1991: CALL_OW 488
1995: NOT
1996: PUSH
1997: LD_VAR 0 1
2001: NOT
2002: OR
2003: PUSH
2004: LD_VAR 0 2
2008: NOT
2009: OR
2010: IFFALSE 2014
// exit ;
2012: GO 2034
// result := GetHexInfo ( x , y ) ;
2014: LD_ADDR_VAR 0 3
2018: PUSH
2019: LD_VAR 0 1
2023: PPUSH
2024: LD_VAR 0 2
2028: PPUSH
2029: CALL_OW 546
2033: ST_TO_ADDR
// end ;
2034: LD_VAR 0 3
2038: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
2039: LD_INT 0
2041: PPUSH
// vc_chassis := chassis ;
2042: LD_ADDR_OWVAR 37
2046: PUSH
2047: LD_VAR 0 1
2051: ST_TO_ADDR
// vc_engine := engine ;
2052: LD_ADDR_OWVAR 39
2056: PUSH
2057: LD_VAR 0 2
2061: ST_TO_ADDR
// vc_control := control ;
2062: LD_ADDR_OWVAR 38
2066: PUSH
2067: LD_VAR 0 3
2071: ST_TO_ADDR
// vc_weapon := weapon ;
2072: LD_ADDR_OWVAR 40
2076: PUSH
2077: LD_VAR 0 4
2081: ST_TO_ADDR
// vc_fuel_battery := fuel ;
2082: LD_ADDR_OWVAR 41
2086: PUSH
2087: LD_VAR 0 5
2091: ST_TO_ADDR
// end ;
2092: LD_VAR 0 6
2096: RET
// export function CanSayRand ( side ) ; begin
2097: LD_INT 0
2099: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: LD_INT 22
2107: PUSH
2108: LD_VAR 0 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 2
2119: PUSH
2120: LD_INT 25
2122: PUSH
2123: LD_INT 1
2125: PUSH
2126: EMPTY
2127: LIST
2128: LIST
2129: PUSH
2130: LD_INT 25
2132: PUSH
2133: LD_INT 2
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PUSH
2140: LD_INT 25
2142: PUSH
2143: LD_INT 3
2145: PUSH
2146: EMPTY
2147: LIST
2148: LIST
2149: PUSH
2150: LD_INT 25
2152: PUSH
2153: LD_INT 4
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 69
2175: PUSH
2176: LD_EXP 17
2180: PUSH
2181: LD_EXP 29
2185: PUSH
2186: LD_EXP 18
2190: PUSH
2191: LD_EXP 19
2195: PUSH
2196: LD_EXP 20
2200: PUSH
2201: LD_EXP 21
2205: PUSH
2206: LD_EXP 22
2210: PUSH
2211: LD_EXP 23
2215: PUSH
2216: LD_EXP 24
2220: PUSH
2221: LD_EXP 25
2225: PUSH
2226: LD_EXP 26
2230: PUSH
2231: LD_EXP 27
2235: PUSH
2236: LD_EXP 28
2240: PUSH
2241: LD_EXP 30
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: DIFF
2262: ST_TO_ADDR
// end ;
2263: LD_VAR 0 2
2267: RET
// export function SayRand ( sex , dial ) ; begin
2268: LD_INT 0
2270: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
2271: LD_ADDR_VAR 0 3
2275: PUSH
2276: LD_INT 22
2278: PUSH
2279: LD_INT 1
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 26
2288: PUSH
2289: LD_VAR 0 1
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 2
2300: PUSH
2301: LD_INT 25
2303: PUSH
2304: LD_INT 1
2306: PUSH
2307: EMPTY
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 25
2313: PUSH
2314: LD_INT 2
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PUSH
2321: LD_INT 25
2323: PUSH
2324: LD_INT 3
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PUSH
2331: LD_INT 25
2333: PUSH
2334: LD_INT 4
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL_OW 69
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 29
2367: PUSH
2368: LD_EXP 18
2372: PUSH
2373: LD_EXP 19
2377: PUSH
2378: LD_EXP 20
2382: PUSH
2383: LD_EXP 21
2387: PUSH
2388: LD_EXP 22
2392: PUSH
2393: LD_EXP 23
2397: PUSH
2398: LD_EXP 24
2402: PUSH
2403: LD_EXP 25
2407: PUSH
2408: LD_EXP 26
2412: PUSH
2413: LD_EXP 27
2417: PUSH
2418: LD_EXP 28
2422: PUSH
2423: LD_EXP 30
2427: PUSH
2428: EMPTY
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: DIFF
2444: ST_TO_ADDR
// if not result then
2445: LD_VAR 0 3
2449: NOT
2450: IFFALSE 2454
// exit ;
2452: GO 2482
// result := result [ 1 ] ;
2454: LD_ADDR_VAR 0 3
2458: PUSH
2459: LD_VAR 0 3
2463: PUSH
2464: LD_INT 1
2466: ARRAY
2467: ST_TO_ADDR
// Say ( result , dial ) ;
2468: LD_VAR 0 3
2472: PPUSH
2473: LD_VAR 0 2
2477: PPUSH
2478: CALL_OW 88
// end ;
2482: LD_VAR 0 3
2486: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
2487: LD_INT 0
2489: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_INT 22
2497: PUSH
2498: LD_INT 1
2500: PUSH
2501: EMPTY
2502: LIST
2503: LIST
2504: PUSH
2505: LD_INT 26
2507: PUSH
2508: LD_VAR 0 1
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: PUSH
2517: LD_INT 2
2519: PUSH
2520: LD_INT 25
2522: PUSH
2523: LD_INT 1
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 25
2532: PUSH
2533: LD_INT 2
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 25
2542: PUSH
2543: LD_INT 3
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: LD_INT 25
2552: PUSH
2553: LD_INT 4
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: PUSH
2577: LD_EXP 17
2581: PUSH
2582: LD_EXP 29
2586: PUSH
2587: LD_EXP 18
2591: PUSH
2592: LD_EXP 19
2596: PUSH
2597: LD_EXP 20
2601: PUSH
2602: LD_EXP 21
2606: PUSH
2607: LD_EXP 22
2611: PUSH
2612: LD_EXP 23
2616: PUSH
2617: LD_EXP 24
2621: PUSH
2622: LD_EXP 25
2626: PUSH
2627: LD_EXP 26
2631: PUSH
2632: LD_EXP 27
2636: PUSH
2637: LD_EXP 28
2641: PUSH
2642: LD_EXP 30
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_VAR 0 3
2667: ADD
2668: DIFF
2669: ST_TO_ADDR
// if not result then
2670: LD_VAR 0 4
2674: NOT
2675: IFFALSE 2679
// exit ;
2677: GO 2707
// result := result [ 1 ] ;
2679: LD_ADDR_VAR 0 4
2683: PUSH
2684: LD_VAR 0 4
2688: PUSH
2689: LD_INT 1
2691: ARRAY
2692: ST_TO_ADDR
// Say ( result , dial ) ;
2693: LD_VAR 0 4
2697: PPUSH
2698: LD_VAR 0 2
2702: PPUSH
2703: CALL_OW 88
// end ;
2707: LD_VAR 0 4
2711: RET
// export function WantPlant ( unit ) ; var task ; begin
2712: LD_INT 0
2714: PPUSH
2715: PPUSH
// result := false ;
2716: LD_ADDR_VAR 0 2
2720: PUSH
2721: LD_INT 0
2723: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
2724: LD_ADDR_VAR 0 3
2728: PUSH
2729: LD_VAR 0 1
2733: PPUSH
2734: CALL_OW 437
2738: ST_TO_ADDR
// if task then
2739: LD_VAR 0 3
2743: IFFALSE 2771
// if task [ 1 ] [ 1 ] = p then
2745: LD_VAR 0 3
2749: PUSH
2750: LD_INT 1
2752: ARRAY
2753: PUSH
2754: LD_INT 1
2756: ARRAY
2757: PUSH
2758: LD_STRING p
2760: EQUAL
2761: IFFALSE 2771
// result := true ;
2763: LD_ADDR_VAR 0 2
2767: PUSH
2768: LD_INT 1
2770: ST_TO_ADDR
// end ;
2771: LD_VAR 0 2
2775: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
2776: LD_INT 0
2778: PPUSH
2779: PPUSH
2780: PPUSH
2781: PPUSH
// if pos < 1 then
2782: LD_VAR 0 2
2786: PUSH
2787: LD_INT 1
2789: LESS
2790: IFFALSE 2794
// exit ;
2792: GO 3097
// if pos = 1 then
2794: LD_VAR 0 2
2798: PUSH
2799: LD_INT 1
2801: EQUAL
2802: IFFALSE 2835
// result := Replace ( arr , pos [ 1 ] , value ) else
2804: LD_ADDR_VAR 0 4
2808: PUSH
2809: LD_VAR 0 1
2813: PPUSH
2814: LD_VAR 0 2
2818: PUSH
2819: LD_INT 1
2821: ARRAY
2822: PPUSH
2823: LD_VAR 0 3
2827: PPUSH
2828: CALL_OW 1
2832: ST_TO_ADDR
2833: GO 3097
// begin tmp := arr ;
2835: LD_ADDR_VAR 0 6
2839: PUSH
2840: LD_VAR 0 1
2844: ST_TO_ADDR
// s_arr := [ tmp ] ;
2845: LD_ADDR_VAR 0 7
2849: PUSH
2850: LD_VAR 0 6
2854: PUSH
2855: EMPTY
2856: LIST
2857: ST_TO_ADDR
// for i = 1 to pos - 1 do
2858: LD_ADDR_VAR 0 5
2862: PUSH
2863: DOUBLE
2864: LD_INT 1
2866: DEC
2867: ST_TO_ADDR
2868: LD_VAR 0 2
2872: PUSH
2873: LD_INT 1
2875: MINUS
2876: PUSH
2877: FOR_TO
2878: IFFALSE 2923
// begin tmp := tmp [ pos [ i ] ] ;
2880: LD_ADDR_VAR 0 6
2884: PUSH
2885: LD_VAR 0 6
2889: PUSH
2890: LD_VAR 0 2
2894: PUSH
2895: LD_VAR 0 5
2899: ARRAY
2900: ARRAY
2901: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
2902: LD_ADDR_VAR 0 7
2906: PUSH
2907: LD_VAR 0 7
2911: PUSH
2912: LD_VAR 0 6
2916: PUSH
2917: EMPTY
2918: LIST
2919: ADD
2920: ST_TO_ADDR
// end ;
2921: GO 2877
2923: POP
2924: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
2925: LD_ADDR_VAR 0 6
2929: PUSH
2930: LD_VAR 0 6
2934: PPUSH
2935: LD_VAR 0 2
2939: PUSH
2940: LD_VAR 0 2
2944: ARRAY
2945: PPUSH
2946: LD_VAR 0 3
2950: PPUSH
2951: CALL_OW 1
2955: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
2956: LD_ADDR_VAR 0 7
2960: PUSH
2961: LD_VAR 0 7
2965: PPUSH
2966: LD_VAR 0 7
2970: PPUSH
2971: LD_VAR 0 6
2975: PPUSH
2976: CALL_OW 1
2980: ST_TO_ADDR
// for i = s_arr downto 2 do
2981: LD_ADDR_VAR 0 5
2985: PUSH
2986: DOUBLE
2987: LD_VAR 0 7
2991: INC
2992: ST_TO_ADDR
2993: LD_INT 2
2995: PUSH
2996: FOR_DOWNTO
2997: IFFALSE 3081
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
2999: LD_ADDR_VAR 0 6
3003: PUSH
3004: LD_VAR 0 7
3008: PUSH
3009: LD_VAR 0 5
3013: PUSH
3014: LD_INT 1
3016: MINUS
3017: ARRAY
3018: PPUSH
3019: LD_VAR 0 2
3023: PUSH
3024: LD_VAR 0 5
3028: PUSH
3029: LD_INT 1
3031: MINUS
3032: ARRAY
3033: PPUSH
3034: LD_VAR 0 7
3038: PUSH
3039: LD_VAR 0 5
3043: ARRAY
3044: PPUSH
3045: CALL_OW 1
3049: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
3050: LD_ADDR_VAR 0 7
3054: PUSH
3055: LD_VAR 0 7
3059: PPUSH
3060: LD_VAR 0 5
3064: PUSH
3065: LD_INT 1
3067: MINUS
3068: PPUSH
3069: LD_VAR 0 6
3073: PPUSH
3074: CALL_OW 1
3078: ST_TO_ADDR
// end ;
3079: GO 2996
3081: POP
3082: POP
// result := s_arr [ 1 ] ;
3083: LD_ADDR_VAR 0 4
3087: PUSH
3088: LD_VAR 0 7
3092: PUSH
3093: LD_INT 1
3095: ARRAY
3096: ST_TO_ADDR
// end ; end ;
3097: LD_VAR 0 4
3101: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
3102: LD_INT 0
3104: PPUSH
3105: PPUSH
// if not list then
3106: LD_VAR 0 1
3110: NOT
3111: IFFALSE 3115
// exit ;
3113: GO 3206
// i := list [ pos1 ] ;
3115: LD_ADDR_VAR 0 5
3119: PUSH
3120: LD_VAR 0 1
3124: PUSH
3125: LD_VAR 0 2
3129: ARRAY
3130: ST_TO_ADDR
// if not i then
3131: LD_VAR 0 5
3135: NOT
3136: IFFALSE 3140
// exit ;
3138: GO 3206
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
3140: LD_ADDR_VAR 0 1
3144: PUSH
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 2
3154: PPUSH
3155: LD_VAR 0 1
3159: PUSH
3160: LD_VAR 0 3
3164: ARRAY
3165: PPUSH
3166: CALL_OW 1
3170: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
3171: LD_ADDR_VAR 0 1
3175: PUSH
3176: LD_VAR 0 1
3180: PPUSH
3181: LD_VAR 0 3
3185: PPUSH
3186: LD_VAR 0 5
3190: PPUSH
3191: CALL_OW 1
3195: ST_TO_ADDR
// result := list ;
3196: LD_ADDR_VAR 0 4
3200: PUSH
3201: LD_VAR 0 1
3205: ST_TO_ADDR
// end ;
3206: LD_VAR 0 4
3210: RET
// export function Add ( list , pos , val ) ; begin
3211: LD_INT 0
3213: PPUSH
// result := ReplaceIn ( list , pos , val ) end ;
3214: LD_ADDR_VAR 0 4
3218: PUSH
3219: LD_VAR 0 1
3223: PPUSH
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL 2776 0 3
3238: ST_TO_ADDR
3239: LD_VAR 0 4
3243: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
3244: LD_INT 0
3246: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
3247: LD_ADDR_VAR 0 5
3251: PUSH
3252: LD_VAR 0 1
3256: PPUSH
3257: CALL_OW 250
3261: PPUSH
3262: LD_VAR 0 1
3266: PPUSH
3267: CALL_OW 251
3271: PPUSH
3272: LD_VAR 0 2
3276: PPUSH
3277: LD_VAR 0 3
3281: PPUSH
3282: LD_VAR 0 4
3286: PPUSH
3287: CALL 3297 0 5
3291: ST_TO_ADDR
// end ;
3292: LD_VAR 0 5
3296: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
3297: LD_INT 0
3299: PPUSH
3300: PPUSH
3301: PPUSH
3302: PPUSH
// if not list then
3303: LD_VAR 0 3
3307: NOT
3308: IFFALSE 3312
// exit ;
3310: GO 3700
// result := [ ] ;
3312: LD_ADDR_VAR 0 6
3316: PUSH
3317: EMPTY
3318: ST_TO_ADDR
// for i in list do
3319: LD_ADDR_VAR 0 7
3323: PUSH
3324: LD_VAR 0 3
3328: PUSH
3329: FOR_IN
3330: IFFALSE 3532
// begin tmp := GetDistUnitXY ( i , x , y ) ;
3332: LD_ADDR_VAR 0 9
3336: PUSH
3337: LD_VAR 0 7
3341: PPUSH
3342: LD_VAR 0 1
3346: PPUSH
3347: LD_VAR 0 2
3351: PPUSH
3352: CALL_OW 297
3356: ST_TO_ADDR
// if not result then
3357: LD_VAR 0 6
3361: NOT
3362: IFFALSE 3388
// result := [ [ i , tmp ] ] else
3364: LD_ADDR_VAR 0 6
3368: PUSH
3369: LD_VAR 0 7
3373: PUSH
3374: LD_VAR 0 9
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: EMPTY
3384: LIST
3385: ST_TO_ADDR
3386: GO 3530
// begin if result [ result ] [ 2 ] < tmp then
3388: LD_VAR 0 6
3392: PUSH
3393: LD_VAR 0 6
3397: ARRAY
3398: PUSH
3399: LD_INT 2
3401: ARRAY
3402: PUSH
3403: LD_VAR 0 9
3407: LESS
3408: IFFALSE 3450
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
3410: LD_ADDR_VAR 0 6
3414: PUSH
3415: LD_VAR 0 6
3419: PPUSH
3420: LD_VAR 0 6
3424: PUSH
3425: LD_INT 1
3427: PLUS
3428: PPUSH
3429: LD_VAR 0 7
3433: PUSH
3434: LD_VAR 0 9
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 2
3447: ST_TO_ADDR
3448: GO 3530
// for j = 1 to result do
3450: LD_ADDR_VAR 0 8
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_VAR 0 6
3464: PUSH
3465: FOR_TO
3466: IFFALSE 3528
// begin if tmp < result [ j ] [ 2 ] then
3468: LD_VAR 0 9
3472: PUSH
3473: LD_VAR 0 6
3477: PUSH
3478: LD_VAR 0 8
3482: ARRAY
3483: PUSH
3484: LD_INT 2
3486: ARRAY
3487: LESS
3488: IFFALSE 3526
// begin result := Insert ( result , j , [ i , tmp ] ) ;
3490: LD_ADDR_VAR 0 6
3494: PUSH
3495: LD_VAR 0 6
3499: PPUSH
3500: LD_VAR 0 8
3504: PPUSH
3505: LD_VAR 0 7
3509: PUSH
3510: LD_VAR 0 9
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 2
3523: ST_TO_ADDR
// break ;
3524: GO 3528
// end ; end ;
3526: GO 3465
3528: POP
3529: POP
// end ; end ;
3530: GO 3329
3532: POP
3533: POP
// if result and not asc then
3534: LD_VAR 0 6
3538: PUSH
3539: LD_VAR 0 4
3543: NOT
3544: AND
3545: IFFALSE 3620
// begin tmp := result ;
3547: LD_ADDR_VAR 0 9
3551: PUSH
3552: LD_VAR 0 6
3556: ST_TO_ADDR
// for i = tmp downto 1 do
3557: LD_ADDR_VAR 0 7
3561: PUSH
3562: DOUBLE
3563: LD_VAR 0 9
3567: INC
3568: ST_TO_ADDR
3569: LD_INT 1
3571: PUSH
3572: FOR_DOWNTO
3573: IFFALSE 3618
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
3575: LD_ADDR_VAR 0 6
3579: PUSH
3580: LD_VAR 0 6
3584: PPUSH
3585: LD_VAR 0 9
3589: PUSH
3590: LD_VAR 0 7
3594: MINUS
3595: PUSH
3596: LD_INT 1
3598: PLUS
3599: PPUSH
3600: LD_VAR 0 9
3604: PUSH
3605: LD_VAR 0 7
3609: ARRAY
3610: PPUSH
3611: CALL_OW 1
3615: ST_TO_ADDR
3616: GO 3572
3618: POP
3619: POP
// end ; tmp := [ ] ;
3620: LD_ADDR_VAR 0 9
3624: PUSH
3625: EMPTY
3626: ST_TO_ADDR
// if mode then
3627: LD_VAR 0 5
3631: IFFALSE 3700
// begin for i = 1 to result do
3633: LD_ADDR_VAR 0 7
3637: PUSH
3638: DOUBLE
3639: LD_INT 1
3641: DEC
3642: ST_TO_ADDR
3643: LD_VAR 0 6
3647: PUSH
3648: FOR_TO
3649: IFFALSE 3688
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
3651: LD_ADDR_VAR 0 9
3655: PUSH
3656: LD_VAR 0 9
3660: PPUSH
3661: LD_VAR 0 7
3665: PPUSH
3666: LD_VAR 0 6
3670: PUSH
3671: LD_VAR 0 7
3675: ARRAY
3676: PUSH
3677: LD_INT 1
3679: ARRAY
3680: PPUSH
3681: CALL_OW 1
3685: ST_TO_ADDR
3686: GO 3648
3688: POP
3689: POP
// result := tmp ;
3690: LD_ADDR_VAR 0 6
3694: PUSH
3695: LD_VAR 0 9
3699: ST_TO_ADDR
// end ; end ;
3700: LD_VAR 0 6
3704: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
3705: LD_INT 0
3707: PPUSH
3708: PPUSH
3709: PPUSH
3710: PPUSH
3711: PPUSH
3712: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
3713: LD_ADDR_VAR 0 5
3717: PUSH
3718: LD_INT 0
3720: PUSH
3721: LD_INT 0
3723: PUSH
3724: LD_INT 0
3726: PUSH
3727: EMPTY
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: LIST
3734: ST_TO_ADDR
// if not x or not y then
3735: LD_VAR 0 2
3739: NOT
3740: PUSH
3741: LD_VAR 0 3
3745: NOT
3746: OR
3747: IFFALSE 3751
// exit ;
3749: GO 5379
// if not range then
3751: LD_VAR 0 4
3755: NOT
3756: IFFALSE 3766
// range := 10 ;
3758: LD_ADDR_VAR 0 4
3762: PUSH
3763: LD_INT 10
3765: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] ] ) ;
3766: LD_ADDR_VAR 0 8
3770: PUSH
3771: LD_INT 81
3773: PUSH
3774: LD_VAR 0 1
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: PUSH
3783: LD_INT 92
3785: PUSH
3786: LD_VAR 0 2
3790: PUSH
3791: LD_VAR 0 3
3795: PUSH
3796: LD_VAR 0 4
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: PUSH
3807: EMPTY
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: ST_TO_ADDR
// if not tmp then
3816: LD_VAR 0 8
3820: NOT
3821: IFFALSE 3825
// exit ;
3823: GO 5379
// for i in tmp do
3825: LD_ADDR_VAR 0 6
3829: PUSH
3830: LD_VAR 0 8
3834: PUSH
3835: FOR_IN
3836: IFFALSE 5354
// begin points := [ 0 , 0 , 0 ] ;
3838: LD_ADDR_VAR 0 9
3842: PUSH
3843: LD_INT 0
3845: PUSH
3846: LD_INT 0
3848: PUSH
3849: LD_INT 0
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: ST_TO_ADDR
// bpoints := 1 ;
3857: LD_ADDR_VAR 0 10
3861: PUSH
3862: LD_INT 1
3864: ST_TO_ADDR
// case GetType ( i ) of unit_human :
3865: LD_VAR 0 6
3869: PPUSH
3870: CALL_OW 247
3874: PUSH
3875: LD_INT 1
3877: DOUBLE
3878: EQUAL
3879: IFTRUE 3883
3881: GO 4461
3883: POP
// begin if GetClass ( i ) = 1 then
3884: LD_VAR 0 6
3888: PPUSH
3889: CALL_OW 257
3893: PUSH
3894: LD_INT 1
3896: EQUAL
3897: IFFALSE 3918
// points := [ 10 , 5 , 3 ] ;
3899: LD_ADDR_VAR 0 9
3903: PUSH
3904: LD_INT 10
3906: PUSH
3907: LD_INT 5
3909: PUSH
3910: LD_INT 3
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
3918: LD_VAR 0 6
3922: PPUSH
3923: CALL_OW 257
3927: PUSH
3928: LD_INT 2
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 4
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: IN
3942: IFFALSE 3963
// points := [ 3 , 2 , 1 ] ;
3944: LD_ADDR_VAR 0 9
3948: PUSH
3949: LD_INT 3
3951: PUSH
3952: LD_INT 2
3954: PUSH
3955: LD_INT 1
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: ST_TO_ADDR
// if GetClass ( i ) = 5 then
3963: LD_VAR 0 6
3967: PPUSH
3968: CALL_OW 257
3972: PUSH
3973: LD_INT 5
3975: EQUAL
3976: IFFALSE 3997
// points := [ 130 , 5 , 2 ] ;
3978: LD_ADDR_VAR 0 9
3982: PUSH
3983: LD_INT 130
3985: PUSH
3986: LD_INT 5
3988: PUSH
3989: LD_INT 2
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: LIST
3996: ST_TO_ADDR
// if GetClass ( i ) = 8 then
3997: LD_VAR 0 6
4001: PPUSH
4002: CALL_OW 257
4006: PUSH
4007: LD_INT 8
4009: EQUAL
4010: IFFALSE 4031
// points := [ 35 , 35 , 30 ] ;
4012: LD_ADDR_VAR 0 9
4016: PUSH
4017: LD_INT 35
4019: PUSH
4020: LD_INT 35
4022: PUSH
4023: LD_INT 30
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: ST_TO_ADDR
// if GetClass ( i ) = 9 then
4031: LD_VAR 0 6
4035: PPUSH
4036: CALL_OW 257
4040: PUSH
4041: LD_INT 9
4043: EQUAL
4044: IFFALSE 4065
// points := [ 20 , 55 , 40 ] ;
4046: LD_ADDR_VAR 0 9
4050: PUSH
4051: LD_INT 20
4053: PUSH
4054: LD_INT 55
4056: PUSH
4057: LD_INT 40
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
4065: LD_VAR 0 6
4069: PPUSH
4070: CALL_OW 257
4074: PUSH
4075: LD_INT 12
4077: PUSH
4078: LD_INT 16
4080: PUSH
4081: EMPTY
4082: LIST
4083: LIST
4084: IN
4085: IFFALSE 4106
// points := [ 5 , 3 , 2 ] ;
4087: LD_ADDR_VAR 0 9
4091: PUSH
4092: LD_INT 5
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: LD_INT 2
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: ST_TO_ADDR
// if GetClass ( i ) = 17 then
4106: LD_VAR 0 6
4110: PPUSH
4111: CALL_OW 257
4115: PUSH
4116: LD_INT 17
4118: EQUAL
4119: IFFALSE 4140
// points := [ 100 , 50 , 75 ] ;
4121: LD_ADDR_VAR 0 9
4125: PUSH
4126: LD_INT 100
4128: PUSH
4129: LD_INT 50
4131: PUSH
4132: LD_INT 75
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: ST_TO_ADDR
// if GetClass ( i ) = 15 then
4140: LD_VAR 0 6
4144: PPUSH
4145: CALL_OW 257
4149: PUSH
4150: LD_INT 15
4152: EQUAL
4153: IFFALSE 4174
// points := [ 10 , 5 , 3 ] ;
4155: LD_ADDR_VAR 0 9
4159: PUSH
4160: LD_INT 10
4162: PUSH
4163: LD_INT 5
4165: PUSH
4166: LD_INT 3
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: LIST
4173: ST_TO_ADDR
// if GetClass ( i ) = 14 then
4174: LD_VAR 0 6
4178: PPUSH
4179: CALL_OW 257
4183: PUSH
4184: LD_INT 14
4186: EQUAL
4187: IFFALSE 4208
// points := [ 10 , 0 , 0 ] ;
4189: LD_ADDR_VAR 0 9
4193: PUSH
4194: LD_INT 10
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: LIST
4207: ST_TO_ADDR
// if GetClass ( i ) = 11 then
4208: LD_VAR 0 6
4212: PPUSH
4213: CALL_OW 257
4217: PUSH
4218: LD_INT 11
4220: EQUAL
4221: IFFALSE 4242
// points := [ 30 , 10 , 5 ] ;
4223: LD_ADDR_VAR 0 9
4227: PUSH
4228: LD_INT 30
4230: PUSH
4231: LD_INT 10
4233: PUSH
4234: LD_INT 5
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
4242: LD_VAR 0 1
4246: PPUSH
4247: LD_INT 5
4249: PPUSH
4250: CALL_OW 321
4254: PUSH
4255: LD_INT 2
4257: EQUAL
4258: IFFALSE 4275
// bpoints := bpoints * 1.8 ;
4260: LD_ADDR_VAR 0 10
4264: PUSH
4265: LD_VAR 0 10
4269: PUSH
4270: LD_REAL  1.80000000000000E+0000
4273: MUL
4274: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
4275: LD_VAR 0 6
4279: PPUSH
4280: CALL_OW 257
4284: PUSH
4285: LD_INT 1
4287: PUSH
4288: LD_INT 2
4290: PUSH
4291: LD_INT 3
4293: PUSH
4294: LD_INT 4
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: IN
4303: PUSH
4304: LD_VAR 0 1
4308: PPUSH
4309: LD_INT 51
4311: PPUSH
4312: CALL_OW 321
4316: PUSH
4317: LD_INT 2
4319: EQUAL
4320: AND
4321: IFFALSE 4338
// bpoints := bpoints * 1.2 ;
4323: LD_ADDR_VAR 0 10
4327: PUSH
4328: LD_VAR 0 10
4332: PUSH
4333: LD_REAL  1.20000000000000E+0000
4336: MUL
4337: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
4338: LD_VAR 0 6
4342: PPUSH
4343: CALL_OW 257
4347: PUSH
4348: LD_INT 5
4350: PUSH
4351: LD_INT 7
4353: PUSH
4354: LD_INT 9
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: LIST
4361: IN
4362: PUSH
4363: LD_VAR 0 1
4367: PPUSH
4368: LD_INT 52
4370: PPUSH
4371: CALL_OW 321
4375: PUSH
4376: LD_INT 2
4378: EQUAL
4379: AND
4380: IFFALSE 4397
// bpoints := bpoints * 1.5 ;
4382: LD_ADDR_VAR 0 10
4386: PUSH
4387: LD_VAR 0 10
4391: PUSH
4392: LD_REAL  1.50000000000000E+0000
4395: MUL
4396: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
4397: LD_VAR 0 1
4401: PPUSH
4402: LD_INT 66
4404: PPUSH
4405: CALL_OW 321
4409: PUSH
4410: LD_INT 2
4412: EQUAL
4413: IFFALSE 4430
// bpoints := bpoints * 1.1 ;
4415: LD_ADDR_VAR 0 10
4419: PUSH
4420: LD_VAR 0 10
4424: PUSH
4425: LD_REAL  1.10000000000000E+0000
4428: MUL
4429: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
4430: LD_ADDR_VAR 0 10
4434: PUSH
4435: LD_VAR 0 10
4439: PUSH
4440: LD_VAR 0 6
4444: PPUSH
4445: LD_INT 1
4447: PPUSH
4448: CALL_OW 259
4452: PUSH
4453: LD_REAL  1.15000000000000E+0000
4456: MUL
4457: MUL
4458: ST_TO_ADDR
// end ; unit_vehicle :
4459: GO 5283
4461: LD_INT 2
4463: DOUBLE
4464: EQUAL
4465: IFTRUE 4469
4467: GO 5271
4469: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
4470: LD_VAR 0 6
4474: PPUSH
4475: CALL_OW 264
4479: PUSH
4480: LD_INT 2
4482: PUSH
4483: LD_INT 42
4485: PUSH
4486: LD_INT 24
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: IN
4494: IFFALSE 4515
// points := [ 25 , 5 , 3 ] ;
4496: LD_ADDR_VAR 0 9
4500: PUSH
4501: LD_INT 25
4503: PUSH
4504: LD_INT 5
4506: PUSH
4507: LD_INT 3
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: LIST
4514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
4515: LD_VAR 0 6
4519: PPUSH
4520: CALL_OW 264
4524: PUSH
4525: LD_INT 4
4527: PUSH
4528: LD_INT 43
4530: PUSH
4531: LD_INT 25
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: IN
4539: IFFALSE 4560
// points := [ 40 , 15 , 5 ] ;
4541: LD_ADDR_VAR 0 9
4545: PUSH
4546: LD_INT 40
4548: PUSH
4549: LD_INT 15
4551: PUSH
4552: LD_INT 5
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
4560: LD_VAR 0 6
4564: PPUSH
4565: CALL_OW 264
4569: PUSH
4570: LD_INT 3
4572: PUSH
4573: LD_INT 23
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: IN
4580: IFFALSE 4601
// points := [ 7 , 25 , 8 ] ;
4582: LD_ADDR_VAR 0 9
4586: PUSH
4587: LD_INT 7
4589: PUSH
4590: LD_INT 25
4592: PUSH
4593: LD_INT 8
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: LIST
4600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
4601: LD_VAR 0 6
4605: PPUSH
4606: CALL_OW 264
4610: PUSH
4611: LD_INT 5
4613: PUSH
4614: LD_INT 27
4616: PUSH
4617: LD_INT 44
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: LIST
4624: IN
4625: IFFALSE 4646
// points := [ 14 , 50 , 16 ] ;
4627: LD_ADDR_VAR 0 9
4631: PUSH
4632: LD_INT 14
4634: PUSH
4635: LD_INT 50
4637: PUSH
4638: LD_INT 16
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
4646: LD_VAR 0 6
4650: PPUSH
4651: CALL_OW 264
4655: PUSH
4656: LD_INT 6
4658: PUSH
4659: LD_INT 46
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: IN
4666: IFFALSE 4687
// points := [ 32 , 120 , 70 ] ;
4668: LD_ADDR_VAR 0 9
4672: PUSH
4673: LD_INT 32
4675: PUSH
4676: LD_INT 120
4678: PUSH
4679: LD_INT 70
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: LIST
4686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
4687: LD_VAR 0 6
4691: PPUSH
4692: CALL_OW 264
4696: PUSH
4697: LD_INT 7
4699: PUSH
4700: LD_INT 28
4702: PUSH
4703: LD_INT 45
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: LIST
4710: IN
4711: IFFALSE 4732
// points := [ 35 , 20 , 45 ] ;
4713: LD_ADDR_VAR 0 9
4717: PUSH
4718: LD_INT 35
4720: PUSH
4721: LD_INT 20
4723: PUSH
4724: LD_INT 45
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
4732: LD_VAR 0 6
4736: PPUSH
4737: CALL_OW 264
4741: PUSH
4742: LD_INT 47
4744: PUSH
4745: EMPTY
4746: LIST
4747: IN
4748: IFFALSE 4769
// points := [ 67 , 45 , 75 ] ;
4750: LD_ADDR_VAR 0 9
4754: PUSH
4755: LD_INT 67
4757: PUSH
4758: LD_INT 45
4760: PUSH
4761: LD_INT 75
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
4769: LD_VAR 0 6
4773: PPUSH
4774: CALL_OW 264
4778: PUSH
4779: LD_INT 26
4781: PUSH
4782: EMPTY
4783: LIST
4784: IN
4785: IFFALSE 4806
// points := [ 120 , 30 , 80 ] ;
4787: LD_ADDR_VAR 0 9
4791: PUSH
4792: LD_INT 120
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: LD_INT 80
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
4806: LD_VAR 0 6
4810: PPUSH
4811: CALL_OW 264
4815: PUSH
4816: LD_INT 22
4818: PUSH
4819: EMPTY
4820: LIST
4821: IN
4822: IFFALSE 4843
// points := [ 40 , 1 , 1 ] ;
4824: LD_ADDR_VAR 0 9
4828: PUSH
4829: LD_INT 40
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: LD_INT 1
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
4843: LD_VAR 0 6
4847: PPUSH
4848: CALL_OW 264
4852: PUSH
4853: LD_INT 29
4855: PUSH
4856: EMPTY
4857: LIST
4858: IN
4859: IFFALSE 4880
// points := [ 70 , 200 , 400 ] ;
4861: LD_ADDR_VAR 0 9
4865: PUSH
4866: LD_INT 70
4868: PUSH
4869: LD_INT 200
4871: PUSH
4872: LD_INT 400
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
4880: LD_VAR 0 6
4884: PPUSH
4885: CALL_OW 264
4889: PUSH
4890: LD_INT 14
4892: PUSH
4893: LD_INT 53
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: IN
4900: IFFALSE 4921
// points := [ 40 , 10 , 20 ] ;
4902: LD_ADDR_VAR 0 9
4906: PUSH
4907: LD_INT 40
4909: PUSH
4910: LD_INT 10
4912: PUSH
4913: LD_INT 20
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
4921: LD_VAR 0 6
4925: PPUSH
4926: CALL_OW 264
4930: PUSH
4931: LD_INT 9
4933: PUSH
4934: EMPTY
4935: LIST
4936: IN
4937: IFFALSE 4958
// points := [ 5 , 70 , 20 ] ;
4939: LD_ADDR_VAR 0 9
4943: PUSH
4944: LD_INT 5
4946: PUSH
4947: LD_INT 70
4949: PUSH
4950: LD_INT 20
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
4958: LD_VAR 0 6
4962: PPUSH
4963: CALL_OW 264
4967: PUSH
4968: LD_INT 10
4970: PUSH
4971: EMPTY
4972: LIST
4973: IN
4974: IFFALSE 4995
// points := [ 35 , 110 , 70 ] ;
4976: LD_ADDR_VAR 0 9
4980: PUSH
4981: LD_INT 35
4983: PUSH
4984: LD_INT 110
4986: PUSH
4987: LD_INT 70
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
4995: LD_VAR 0 6
4999: PPUSH
5000: CALL_OW 265
5004: PUSH
5005: LD_INT 25
5007: EQUAL
5008: IFFALSE 5029
// points := [ 80 , 65 , 100 ] ;
5010: LD_ADDR_VAR 0 9
5014: PUSH
5015: LD_INT 80
5017: PUSH
5018: LD_INT 65
5020: PUSH
5021: LD_INT 100
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: LIST
5028: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
5029: LD_VAR 0 6
5033: PPUSH
5034: CALL_OW 263
5038: PUSH
5039: LD_INT 1
5041: EQUAL
5042: IFFALSE 5077
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
5044: LD_ADDR_VAR 0 10
5048: PUSH
5049: LD_VAR 0 10
5053: PUSH
5054: LD_VAR 0 6
5058: PPUSH
5059: CALL_OW 311
5063: PPUSH
5064: LD_INT 3
5066: PPUSH
5067: CALL_OW 259
5071: PUSH
5072: LD_INT 4
5074: MUL
5075: MUL
5076: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
5077: LD_VAR 0 6
5081: PPUSH
5082: CALL_OW 263
5086: PUSH
5087: LD_INT 2
5089: EQUAL
5090: IFFALSE 5141
// begin j := IsControledBy ( i ) ;
5092: LD_ADDR_VAR 0 7
5096: PUSH
5097: LD_VAR 0 6
5101: PPUSH
5102: CALL_OW 312
5106: ST_TO_ADDR
// if j then
5107: LD_VAR 0 7
5111: IFFALSE 5141
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
5113: LD_ADDR_VAR 0 10
5117: PUSH
5118: LD_VAR 0 10
5122: PUSH
5123: LD_VAR 0 7
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 259
5135: PUSH
5136: LD_INT 3
5138: MUL
5139: MUL
5140: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
5141: LD_VAR 0 6
5145: PPUSH
5146: CALL_OW 264
5150: PUSH
5151: LD_INT 5
5153: PUSH
5154: LD_INT 6
5156: PUSH
5157: LD_INT 46
5159: PUSH
5160: LD_INT 44
5162: PUSH
5163: LD_INT 47
5165: PUSH
5166: LD_INT 45
5168: PUSH
5169: LD_INT 28
5171: PUSH
5172: LD_INT 7
5174: PUSH
5175: LD_INT 27
5177: PUSH
5178: LD_INT 29
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: IN
5193: PUSH
5194: LD_VAR 0 1
5198: PPUSH
5199: LD_INT 52
5201: PPUSH
5202: CALL_OW 321
5206: PUSH
5207: LD_INT 2
5209: EQUAL
5210: AND
5211: IFFALSE 5228
// bpoints := bpoints * 1.2 ;
5213: LD_ADDR_VAR 0 10
5217: PUSH
5218: LD_VAR 0 10
5222: PUSH
5223: LD_REAL  1.20000000000000E+0000
5226: MUL
5227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 264
5237: PUSH
5238: LD_INT 6
5240: PUSH
5241: LD_INT 46
5243: PUSH
5244: LD_INT 47
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: IN
5252: IFFALSE 5269
// bpoints := bpoints * 1.2 ;
5254: LD_ADDR_VAR 0 10
5258: PUSH
5259: LD_VAR 0 10
5263: PUSH
5264: LD_REAL  1.20000000000000E+0000
5267: MUL
5268: ST_TO_ADDR
// end ; unit_building :
5269: GO 5283
5271: LD_INT 3
5273: DOUBLE
5274: EQUAL
5275: IFTRUE 5279
5277: GO 5282
5279: POP
// ; end ;
5280: GO 5283
5282: POP
// for j = 1 to 3 do
5283: LD_ADDR_VAR 0 7
5287: PUSH
5288: DOUBLE
5289: LD_INT 1
5291: DEC
5292: ST_TO_ADDR
5293: LD_INT 3
5295: PUSH
5296: FOR_TO
5297: IFFALSE 5350
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
5299: LD_ADDR_VAR 0 5
5303: PUSH
5304: LD_VAR 0 5
5308: PPUSH
5309: LD_VAR 0 7
5313: PPUSH
5314: LD_VAR 0 5
5318: PUSH
5319: LD_VAR 0 7
5323: ARRAY
5324: PUSH
5325: LD_VAR 0 9
5329: PUSH
5330: LD_VAR 0 7
5334: ARRAY
5335: PUSH
5336: LD_VAR 0 10
5340: MUL
5341: PLUS
5342: PPUSH
5343: CALL_OW 1
5347: ST_TO_ADDR
5348: GO 5296
5350: POP
5351: POP
// end ;
5352: GO 3835
5354: POP
5355: POP
// result := Replace ( result , 4 , tmp ) ;
5356: LD_ADDR_VAR 0 5
5360: PUSH
5361: LD_VAR 0 5
5365: PPUSH
5366: LD_INT 4
5368: PPUSH
5369: LD_VAR 0 8
5373: PPUSH
5374: CALL_OW 1
5378: ST_TO_ADDR
// end ;
5379: LD_VAR 0 5
5383: RET
// export function DangerAtRange ( unit , range ) ; begin
5384: LD_INT 0
5386: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
5387: LD_ADDR_VAR 0 3
5391: PUSH
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 255
5401: PPUSH
5402: LD_VAR 0 1
5406: PPUSH
5407: CALL_OW 250
5411: PPUSH
5412: LD_VAR 0 1
5416: PPUSH
5417: CALL_OW 251
5421: PPUSH
5422: LD_VAR 0 2
5426: PPUSH
5427: CALL 3705 0 4
5431: ST_TO_ADDR
// end ;
5432: LD_VAR 0 3
5436: RET
// export function IsExtension ( b ) ; begin
5437: LD_INT 0
5439: PPUSH
// result := false ;
5440: LD_ADDR_VAR 0 2
5444: PUSH
5445: LD_INT 0
5447: ST_TO_ADDR
// if GetBType ( b ) in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] then
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 266
5457: PUSH
5458: LD_INT 23
5460: PUSH
5461: LD_INT 20
5463: PUSH
5464: LD_INT 22
5466: PUSH
5467: LD_INT 17
5469: PUSH
5470: LD_INT 24
5472: PUSH
5473: LD_INT 21
5475: PUSH
5476: LD_INT 19
5478: PUSH
5479: LD_INT 16
5481: PUSH
5482: LD_INT 25
5484: PUSH
5485: LD_INT 18
5487: PUSH
5488: EMPTY
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: IN
5500: IFFALSE 5510
// result := true ;
5502: LD_ADDR_VAR 0 2
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// end ;
5510: LD_VAR 0 2
5514: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
5515: LD_INT 0
5517: PPUSH
5518: PPUSH
5519: PPUSH
// result := [ ] ;
5520: LD_ADDR_VAR 0 2
5524: PUSH
5525: EMPTY
5526: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
5527: LD_ADDR_VAR 0 3
5531: PUSH
5532: LD_INT 21
5534: PUSH
5535: LD_INT 3
5537: PUSH
5538: EMPTY
5539: LIST
5540: LIST
5541: PPUSH
5542: CALL_OW 69
5546: ST_TO_ADDR
// if not tmp then
5547: LD_VAR 0 3
5551: NOT
5552: IFFALSE 5556
// exit ;
5554: GO 5606
// for i in tmp do
5556: LD_ADDR_VAR 0 4
5560: PUSH
5561: LD_VAR 0 3
5565: PUSH
5566: FOR_IN
5567: IFFALSE 5604
// if GetBase ( i ) = base then
5569: LD_VAR 0 4
5573: PPUSH
5574: CALL_OW 274
5578: PUSH
5579: LD_VAR 0 1
5583: EQUAL
5584: IFFALSE 5602
// result := result ^ i ;
5586: LD_ADDR_VAR 0 2
5590: PUSH
5591: LD_VAR 0 2
5595: PUSH
5596: LD_VAR 0 4
5600: ADD
5601: ST_TO_ADDR
5602: GO 5566
5604: POP
5605: POP
// end ;
5606: LD_VAR 0 2
5610: RET
// export function ComComplete ( unit , b ) ; var i ; begin
5611: LD_INT 0
5613: PPUSH
5614: PPUSH
// if BuildingStatus ( b ) = bs_build then
5615: LD_VAR 0 2
5619: PPUSH
5620: CALL_OW 461
5624: PUSH
5625: LD_INT 1
5627: EQUAL
5628: IFFALSE 5688
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
5630: LD_VAR 0 1
5634: PPUSH
5635: LD_STRING h
5637: PUSH
5638: LD_VAR 0 2
5642: PPUSH
5643: CALL_OW 250
5647: PUSH
5648: LD_VAR 0 2
5652: PPUSH
5653: CALL_OW 251
5657: PUSH
5658: LD_VAR 0 2
5662: PUSH
5663: LD_INT 0
5665: PUSH
5666: LD_INT 0
5668: PUSH
5669: LD_INT 0
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: PPUSH
5684: CALL_OW 446
// end ;
5688: LD_VAR 0 3
5692: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp ; begin
5693: LD_INT 0
5695: PPUSH
5696: PPUSH
5697: PPUSH
5698: PPUSH
5699: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
5700: LD_VAR 0 1
5704: NOT
5705: PUSH
5706: LD_VAR 0 1
5710: PPUSH
5711: CALL_OW 263
5715: PUSH
5716: LD_INT 2
5718: EQUAL
5719: NOT
5720: OR
5721: IFFALSE 5725
// exit ;
5723: GO 5997
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
5725: LD_ADDR_VAR 0 6
5729: PUSH
5730: LD_INT 22
5732: PUSH
5733: LD_VAR 0 1
5737: PPUSH
5738: CALL_OW 255
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 30
5752: PUSH
5753: LD_INT 36
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 34
5762: PUSH
5763: LD_INT 31
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: PPUSH
5779: CALL_OW 69
5783: ST_TO_ADDR
// if not tmp then
5784: LD_VAR 0 6
5788: NOT
5789: IFFALSE 5793
// exit ;
5791: GO 5997
// result := [ ] ;
5793: LD_ADDR_VAR 0 2
5797: PUSH
5798: EMPTY
5799: ST_TO_ADDR
// for i in tmp do
5800: LD_ADDR_VAR 0 3
5804: PUSH
5805: LD_VAR 0 6
5809: PUSH
5810: FOR_IN
5811: IFFALSE 5859
// begin t := UnitsInside ( i ) ;
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: CALL_OW 313
5827: ST_TO_ADDR
// if t then
5828: LD_VAR 0 4
5832: IFFALSE 5857
// result := Insert ( result , 1 , t ) ;
5834: LD_ADDR_VAR 0 2
5838: PUSH
5839: LD_VAR 0 2
5843: PPUSH
5844: LD_INT 1
5846: PPUSH
5847: LD_VAR 0 4
5851: PPUSH
5852: CALL_OW 2
5856: ST_TO_ADDR
// end ;
5857: GO 5810
5859: POP
5860: POP
// if not result then
5861: LD_VAR 0 2
5865: NOT
5866: IFFALSE 5870
// exit ;
5868: GO 5997
// mech := 0 ;
5870: LD_ADDR_VAR 0 5
5874: PUSH
5875: LD_INT 0
5877: ST_TO_ADDR
// for i in result do
5878: LD_ADDR_VAR 0 3
5882: PUSH
5883: LD_VAR 0 2
5887: PUSH
5888: FOR_IN
5889: IFFALSE 5971
// begin t := GetSkill ( i , 3 ) - UnitsLinked ( i ) ;
5891: LD_ADDR_VAR 0 4
5895: PUSH
5896: LD_VAR 0 3
5900: PPUSH
5901: LD_INT 3
5903: PPUSH
5904: CALL_OW 259
5908: PUSH
5909: LD_VAR 0 3
5913: PPUSH
5914: CALL_OW 432
5918: MINUS
5919: ST_TO_ADDR
// if t >= ( GetSkill ( mech [ 1 ] , 3 ) - UnitsLinked ( mech [ 1 ] ) ) then
5920: LD_VAR 0 4
5924: PUSH
5925: LD_VAR 0 5
5929: PUSH
5930: LD_INT 1
5932: ARRAY
5933: PPUSH
5934: LD_INT 3
5936: PPUSH
5937: CALL_OW 259
5941: PUSH
5942: LD_VAR 0 5
5946: PUSH
5947: LD_INT 1
5949: ARRAY
5950: PPUSH
5951: CALL_OW 432
5955: MINUS
5956: GREATEREQUAL
5957: IFFALSE 5969
// mech := i ;
5959: LD_ADDR_VAR 0 5
5963: PUSH
5964: LD_VAR 0 3
5968: ST_TO_ADDR
// end ;
5969: GO 5888
5971: POP
5972: POP
// if mech then
5973: LD_VAR 0 5
5977: IFFALSE 5997
// ComLinkTo ( vehicle , mech [ 1 ] ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_VAR 0 5
5988: PUSH
5989: LD_INT 1
5991: ARRAY
5992: PPUSH
5993: CALL_OW 135
// end ;
5997: LD_VAR 0 2
6001: RET
// export function PrepareBase ( base_dep , name , skill , sources , personel ) ; var i , j , f , x , un , base , side , nation , buildings ; begin
6002: LD_INT 0
6004: PPUSH
6005: PPUSH
6006: PPUSH
6007: PPUSH
6008: PPUSH
6009: PPUSH
6010: PPUSH
6011: PPUSH
6012: PPUSH
6013: PPUSH
// result := [ ] ;
6014: LD_ADDR_VAR 0 6
6018: PUSH
6019: EMPTY
6020: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
6021: LD_VAR 0 1
6025: PPUSH
6026: CALL_OW 266
6030: PUSH
6031: LD_INT 0
6033: PUSH
6034: LD_INT 1
6036: PUSH
6037: EMPTY
6038: LIST
6039: LIST
6040: IN
6041: NOT
6042: IFFALSE 6046
// exit ;
6044: GO 7165
// if name then
6046: LD_VAR 0 2
6050: IFFALSE 6066
// SetBName ( base_dep , name ) ;
6052: LD_VAR 0 1
6056: PPUSH
6057: LD_VAR 0 2
6061: PPUSH
6062: CALL_OW 500
// base := GetBase ( base_dep ) ;
6066: LD_ADDR_VAR 0 12
6070: PUSH
6071: LD_VAR 0 1
6075: PPUSH
6076: CALL_OW 274
6080: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
6081: LD_ADDR_VAR 0 13
6085: PUSH
6086: LD_VAR 0 1
6090: PPUSH
6091: CALL_OW 255
6095: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
6096: LD_ADDR_VAR 0 14
6100: PUSH
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 248
6110: ST_TO_ADDR
// if sources then
6111: LD_VAR 0 4
6115: IFFALSE 6162
// for i = 1 to 3 do
6117: LD_ADDR_VAR 0 7
6121: PUSH
6122: DOUBLE
6123: LD_INT 1
6125: DEC
6126: ST_TO_ADDR
6127: LD_INT 3
6129: PUSH
6130: FOR_TO
6131: IFFALSE 6160
// AddResourceType ( base , i , sources [ i ] ) ;
6133: LD_VAR 0 12
6137: PPUSH
6138: LD_VAR 0 7
6142: PPUSH
6143: LD_VAR 0 4
6147: PUSH
6148: LD_VAR 0 7
6152: ARRAY
6153: PPUSH
6154: CALL_OW 276
6158: GO 6130
6160: POP
6161: POP
// buildings := GetBaseBuildings ( base ) ;
6162: LD_ADDR_VAR 0 15
6166: PUSH
6167: LD_VAR 0 12
6171: PPUSH
6172: CALL 5515 0 1
6176: ST_TO_ADDR
// InitHc ;
6177: CALL_OW 19
// InitUc ;
6181: CALL_OW 18
// uc_side := side ;
6185: LD_ADDR_OWVAR 20
6189: PUSH
6190: LD_VAR 0 13
6194: ST_TO_ADDR
// uc_nation := nation ;
6195: LD_ADDR_OWVAR 21
6199: PUSH
6200: LD_VAR 0 14
6204: ST_TO_ADDR
// if buildings then
6205: LD_VAR 0 15
6209: IFFALSE 7024
// begin if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6211: LD_VAR 0 15
6215: PPUSH
6216: LD_INT 2
6218: PUSH
6219: LD_INT 30
6221: PUSH
6222: LD_INT 32
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 30
6231: PUSH
6232: LD_INT 33
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: LIST
6243: PPUSH
6244: CALL_OW 72
6248: IFFALSE 6331
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
6250: LD_ADDR_VAR 0 7
6254: PUSH
6255: LD_VAR 0 15
6259: PPUSH
6260: LD_INT 2
6262: PUSH
6263: LD_INT 30
6265: PUSH
6266: LD_INT 32
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 30
6275: PUSH
6276: LD_INT 33
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 72
6292: PUSH
6293: FOR_IN
6294: IFFALSE 6329
// if not GetBWeapon ( i ) then
6296: LD_VAR 0 7
6300: PPUSH
6301: CALL_OW 269
6305: NOT
6306: IFFALSE 6327
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
6308: LD_VAR 0 7
6312: PPUSH
6313: LD_VAR 0 7
6317: PPUSH
6318: CALL 7170 0 1
6322: PPUSH
6323: CALL_OW 431
6327: GO 6293
6329: POP
6330: POP
// end ; for i = 1 to personel do
6331: LD_ADDR_VAR 0 7
6335: PUSH
6336: DOUBLE
6337: LD_INT 1
6339: DEC
6340: ST_TO_ADDR
6341: LD_VAR 0 5
6345: PUSH
6346: FOR_TO
6347: IFFALSE 7004
// begin if i > 4 then
6349: LD_VAR 0 7
6353: PUSH
6354: LD_INT 4
6356: GREATER
6357: IFFALSE 6361
// break ;
6359: GO 7004
// case i of 1 :
6361: LD_VAR 0 7
6365: PUSH
6366: LD_INT 1
6368: DOUBLE
6369: EQUAL
6370: IFTRUE 6374
6372: GO 6447
6374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
6375: LD_ADDR_VAR 0 9
6379: PUSH
6380: LD_VAR 0 15
6384: PPUSH
6385: LD_INT 22
6387: PUSH
6388: LD_VAR 0 13
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: LD_INT 30
6402: PUSH
6403: LD_INT 32
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 30
6412: PUSH
6413: LD_INT 4
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 30
6422: PUSH
6423: LD_INT 5
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 72
6444: ST_TO_ADDR
6445: GO 6669
6447: LD_INT 2
6449: DOUBLE
6450: EQUAL
6451: IFTRUE 6455
6453: GO 6517
6455: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
6456: LD_ADDR_VAR 0 9
6460: PUSH
6461: LD_VAR 0 15
6465: PPUSH
6466: LD_INT 22
6468: PUSH
6469: LD_VAR 0 13
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 2
6480: PUSH
6481: LD_INT 30
6483: PUSH
6484: LD_INT 0
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 30
6493: PUSH
6494: LD_INT 1
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: CALL_OW 72
6514: ST_TO_ADDR
6515: GO 6669
6517: LD_INT 3
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6525
6523: GO 6587
6525: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
6526: LD_ADDR_VAR 0 9
6530: PUSH
6531: LD_VAR 0 15
6535: PPUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 13
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 2
6550: PUSH
6551: LD_INT 30
6553: PUSH
6554: LD_INT 2
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 30
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PPUSH
6580: CALL_OW 72
6584: ST_TO_ADDR
6585: GO 6669
6587: LD_INT 4
6589: DOUBLE
6590: EQUAL
6591: IFTRUE 6595
6593: GO 6668
6595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
6596: LD_ADDR_VAR 0 9
6600: PUSH
6601: LD_VAR 0 15
6605: PPUSH
6606: LD_INT 22
6608: PUSH
6609: LD_VAR 0 13
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: LD_INT 30
6623: PUSH
6624: LD_INT 6
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 30
6633: PUSH
6634: LD_INT 7
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 30
6643: PUSH
6644: LD_INT 8
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 72
6665: ST_TO_ADDR
6666: GO 6669
6668: POP
// if not f then
6669: LD_VAR 0 9
6673: NOT
6674: IFFALSE 6678
// continue ;
6676: GO 6346
// x := personel [ i ] ;
6678: LD_ADDR_VAR 0 10
6682: PUSH
6683: LD_VAR 0 5
6687: PUSH
6688: LD_VAR 0 7
6692: ARRAY
6693: ST_TO_ADDR
// if x = - 1 then
6694: LD_VAR 0 10
6698: PUSH
6699: LD_INT 1
6701: NEG
6702: EQUAL
6703: IFFALSE 6825
// begin for j in f do
6705: LD_ADDR_VAR 0 8
6709: PUSH
6710: LD_VAR 0 9
6714: PUSH
6715: FOR_IN
6716: IFFALSE 6821
// repeat PrepareHuman ( false , i , skill ) ;
6718: LD_INT 0
6720: PPUSH
6721: LD_VAR 0 7
6725: PPUSH
6726: LD_VAR 0 3
6730: PPUSH
6731: CALL_OW 380
// un := CreateHuman ;
6735: LD_ADDR_VAR 0 11
6739: PUSH
6740: CALL_OW 44
6744: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6745: LD_ADDR_VAR 0 6
6749: PUSH
6750: LD_VAR 0 6
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: LD_VAR 0 11
6762: PPUSH
6763: CALL_OW 2
6767: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
6768: LD_VAR 0 11
6772: PPUSH
6773: LD_VAR 0 8
6777: PPUSH
6778: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
6782: LD_VAR 0 8
6786: PPUSH
6787: CALL_OW 313
6791: PUSH
6792: LD_INT 6
6794: EQUAL
6795: PUSH
6796: LD_VAR 0 8
6800: PPUSH
6801: CALL_OW 266
6805: PUSH
6806: LD_INT 32
6808: PUSH
6809: LD_INT 31
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: IN
6816: OR
6817: IFFALSE 6718
6819: GO 6715
6821: POP
6822: POP
// end else
6823: GO 7002
// for j = 1 to x do
6825: LD_ADDR_VAR 0 8
6829: PUSH
6830: DOUBLE
6831: LD_INT 1
6833: DEC
6834: ST_TO_ADDR
6835: LD_VAR 0 10
6839: PUSH
6840: FOR_TO
6841: IFFALSE 7000
// begin if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
6843: LD_VAR 0 9
6847: PUSH
6848: LD_INT 1
6850: ARRAY
6851: PPUSH
6852: CALL_OW 313
6856: PUSH
6857: LD_VAR 0 9
6861: PUSH
6862: LD_INT 1
6864: ARRAY
6865: PPUSH
6866: CALL_OW 266
6870: PUSH
6871: LD_INT 32
6873: PUSH
6874: LD_INT 31
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: IN
6881: AND
6882: PUSH
6883: LD_VAR 0 9
6887: PUSH
6888: LD_INT 1
6890: ARRAY
6891: PPUSH
6892: CALL_OW 313
6896: PUSH
6897: LD_INT 6
6899: EQUAL
6900: OR
6901: IFFALSE 6921
// f := Delete ( f , 1 ) ;
6903: LD_ADDR_VAR 0 9
6907: PUSH
6908: LD_VAR 0 9
6912: PPUSH
6913: LD_INT 1
6915: PPUSH
6916: CALL_OW 3
6920: ST_TO_ADDR
// if not f then
6921: LD_VAR 0 9
6925: NOT
6926: IFFALSE 6930
// break ;
6928: GO 7000
// PrepareHuman ( false , i , skill ) ;
6930: LD_INT 0
6932: PPUSH
6933: LD_VAR 0 7
6937: PPUSH
6938: LD_VAR 0 3
6942: PPUSH
6943: CALL_OW 380
// un := CreateHuman ;
6947: LD_ADDR_VAR 0 11
6951: PUSH
6952: CALL_OW 44
6956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
6957: LD_ADDR_VAR 0 6
6961: PUSH
6962: LD_VAR 0 6
6966: PPUSH
6967: LD_INT 1
6969: PPUSH
6970: LD_VAR 0 11
6974: PPUSH
6975: CALL_OW 2
6979: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
6980: LD_VAR 0 11
6984: PPUSH
6985: LD_VAR 0 9
6989: PUSH
6990: LD_INT 1
6992: ARRAY
6993: PPUSH
6994: CALL_OW 52
// end ;
6998: GO 6840
7000: POP
7001: POP
// end ;
7002: GO 6346
7004: POP
7005: POP
// result := result ^ buildings ;
7006: LD_ADDR_VAR 0 6
7010: PUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_VAR 0 15
7020: ADD
7021: ST_TO_ADDR
// end else
7022: GO 7165
// begin for i = 1 to personel do
7024: LD_ADDR_VAR 0 7
7028: PUSH
7029: DOUBLE
7030: LD_INT 1
7032: DEC
7033: ST_TO_ADDR
7034: LD_VAR 0 5
7038: PUSH
7039: FOR_TO
7040: IFFALSE 7163
// begin if i > 4 then
7042: LD_VAR 0 7
7046: PUSH
7047: LD_INT 4
7049: GREATER
7050: IFFALSE 7054
// break ;
7052: GO 7163
// x := personel [ i ] ;
7054: LD_ADDR_VAR 0 10
7058: PUSH
7059: LD_VAR 0 5
7063: PUSH
7064: LD_VAR 0 7
7068: ARRAY
7069: ST_TO_ADDR
// if x = - 1 then
7070: LD_VAR 0 10
7074: PUSH
7075: LD_INT 1
7077: NEG
7078: EQUAL
7079: IFFALSE 7083
// continue ;
7081: GO 7039
// PrepareHuman ( false , i , skill ) ;
7083: LD_INT 0
7085: PPUSH
7086: LD_VAR 0 7
7090: PPUSH
7091: LD_VAR 0 3
7095: PPUSH
7096: CALL_OW 380
// un := CreateHuman ;
7100: LD_ADDR_VAR 0 11
7104: PUSH
7105: CALL_OW 44
7109: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
7110: LD_VAR 0 11
7114: PPUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 250
7124: PPUSH
7125: LD_VAR 0 1
7129: PPUSH
7130: CALL_OW 251
7134: PPUSH
7135: LD_INT 10
7137: PPUSH
7138: LD_INT 0
7140: PPUSH
7141: CALL_OW 50
// result := result ^ un ;
7145: LD_ADDR_VAR 0 6
7149: PUSH
7150: LD_VAR 0 6
7154: PUSH
7155: LD_VAR 0 11
7159: ADD
7160: ST_TO_ADDR
// end ;
7161: GO 7039
7163: POP
7164: POP
// end ; end ;
7165: LD_VAR 0 6
7169: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
7170: LD_INT 0
7172: PPUSH
7173: PPUSH
7174: PPUSH
7175: PPUSH
7176: PPUSH
7177: PPUSH
7178: PPUSH
7179: PPUSH
7180: PPUSH
7181: PPUSH
7182: PPUSH
7183: PPUSH
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
// result := false ;
7188: LD_ADDR_VAR 0 2
7192: PUSH
7193: LD_INT 0
7195: ST_TO_ADDR
// if not tower then
7196: LD_VAR 0 1
7200: NOT
7201: IFFALSE 7205
// exit ;
7203: GO 8131
// nat := GetNation ( tower ) ;
7205: LD_ADDR_VAR 0 11
7209: PUSH
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 248
7219: ST_TO_ADDR
// side := GetSide ( tower ) ;
7220: LD_ADDR_VAR 0 15
7224: PUSH
7225: LD_VAR 0 1
7229: PPUSH
7230: CALL_OW 255
7234: ST_TO_ADDR
// x := GetX ( tower ) ;
7235: LD_ADDR_VAR 0 9
7239: PUSH
7240: LD_VAR 0 1
7244: PPUSH
7245: CALL_OW 250
7249: ST_TO_ADDR
// y := GetY ( tower ) ;
7250: LD_ADDR_VAR 0 10
7254: PUSH
7255: LD_VAR 0 1
7259: PPUSH
7260: CALL_OW 251
7264: ST_TO_ADDR
// if not x or not y then
7265: LD_VAR 0 9
7269: NOT
7270: PUSH
7271: LD_VAR 0 10
7275: NOT
7276: OR
7277: IFFALSE 7281
// exit ;
7279: GO 8131
// weapon := 0 ;
7281: LD_ADDR_VAR 0 17
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// fac_list := [ ] ;
7289: LD_ADDR_VAR 0 16
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) ) , [ f_btype , b_factory ] ) ;
7296: LD_ADDR_VAR 0 5
7300: PUSH
7301: LD_VAR 0 1
7305: PPUSH
7306: CALL_OW 274
7310: PPUSH
7311: CALL 5515 0 1
7315: PPUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 3
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 72
7330: ST_TO_ADDR
// if not factories then
7331: LD_VAR 0 5
7335: NOT
7336: IFFALSE 7340
// exit ;
7338: GO 8131
// for i in factories do
7340: LD_ADDR_VAR 0 7
7344: PUSH
7345: LD_VAR 0 5
7349: PUSH
7350: FOR_IN
7351: IFFALSE 7376
// fac_list := fac_list union AvailableWeaponList ( i ) ;
7353: LD_ADDR_VAR 0 16
7357: PUSH
7358: LD_VAR 0 16
7362: PUSH
7363: LD_VAR 0 7
7367: PPUSH
7368: CALL_OW 478
7372: UNION
7373: ST_TO_ADDR
7374: GO 7350
7376: POP
7377: POP
// if not fac_list then
7378: LD_VAR 0 16
7382: NOT
7383: IFFALSE 7387
// exit ;
7385: GO 8131
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
7387: LD_ADDR_VAR 0 4
7391: PUSH
7392: LD_INT 4
7394: PUSH
7395: LD_INT 5
7397: PUSH
7398: LD_INT 9
7400: PUSH
7401: LD_INT 10
7403: PUSH
7404: LD_INT 6
7406: PUSH
7407: LD_INT 7
7409: PUSH
7410: LD_INT 11
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 27
7424: PUSH
7425: LD_INT 28
7427: PUSH
7428: LD_INT 26
7430: PUSH
7431: LD_INT 30
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: PUSH
7440: LD_INT 43
7442: PUSH
7443: LD_INT 44
7445: PUSH
7446: LD_INT 46
7448: PUSH
7449: LD_INT 45
7451: PUSH
7452: LD_INT 47
7454: PUSH
7455: LD_INT 49
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: LD_VAR 0 11
7475: ARRAY
7476: ST_TO_ADDR
// for i in list do
7477: LD_ADDR_VAR 0 7
7481: PUSH
7482: LD_VAR 0 4
7486: PUSH
7487: FOR_IN
7488: IFFALSE 7521
// if not i in fac_list then
7490: LD_VAR 0 7
7494: PUSH
7495: LD_VAR 0 16
7499: IN
7500: NOT
7501: IFFALSE 7519
// list := list diff i ;
7503: LD_ADDR_VAR 0 4
7507: PUSH
7508: LD_VAR 0 4
7512: PUSH
7513: LD_VAR 0 7
7517: DIFF
7518: ST_TO_ADDR
7519: GO 7487
7521: POP
7522: POP
// if not list then
7523: LD_VAR 0 4
7527: NOT
7528: IFFALSE 7532
// exit ;
7530: GO 8131
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
7532: LD_VAR 0 11
7536: PUSH
7537: LD_INT 3
7539: EQUAL
7540: PUSH
7541: LD_INT 49
7543: PUSH
7544: LD_VAR 0 4
7548: IN
7549: AND
7550: PUSH
7551: LD_INT 31
7553: PPUSH
7554: LD_VAR 0 15
7558: PPUSH
7559: CALL_OW 321
7563: PUSH
7564: LD_INT 2
7566: EQUAL
7567: AND
7568: IFFALSE 7628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
7570: LD_INT 22
7572: PUSH
7573: LD_VAR 0 15
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 35
7584: PUSH
7585: LD_INT 49
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 91
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 10
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: EMPTY
7609: LIST
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: NOT
7618: IFFALSE 7628
// weapon := ru_time_lapser ;
7620: LD_ADDR_VAR 0 17
7624: PUSH
7625: LD_INT 49
7627: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
7628: LD_VAR 0 11
7632: PUSH
7633: LD_INT 1
7635: PUSH
7636: LD_INT 2
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: IN
7643: PUSH
7644: LD_INT 11
7646: PUSH
7647: LD_VAR 0 4
7651: IN
7652: PUSH
7653: LD_INT 30
7655: PUSH
7656: LD_VAR 0 4
7660: IN
7661: OR
7662: AND
7663: PUSH
7664: LD_INT 6
7666: PPUSH
7667: LD_VAR 0 15
7671: PPUSH
7672: CALL_OW 321
7676: PUSH
7677: LD_INT 2
7679: EQUAL
7680: AND
7681: IFFALSE 7846
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 15 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 1 then
7683: LD_INT 22
7685: PUSH
7686: LD_VAR 0 15
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 35
7700: PUSH
7701: LD_INT 11
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 35
7710: PUSH
7711: LD_INT 30
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PUSH
7723: LD_INT 91
7725: PUSH
7726: LD_VAR 0 1
7730: PUSH
7731: LD_INT 15
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: NOT
7749: PUSH
7750: LD_INT 22
7752: PUSH
7753: LD_VAR 0 15
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 30
7767: PUSH
7768: LD_INT 32
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 30
7777: PUSH
7778: LD_INT 33
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 91
7792: PUSH
7793: LD_VAR 0 1
7797: PUSH
7798: LD_INT 12
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: EMPTY
7812: LIST
7813: PPUSH
7814: CALL_OW 69
7818: PUSH
7819: LD_INT 1
7821: GREATER
7822: AND
7823: IFFALSE 7846
// weapon := [ us_radar , ar_radar ] [ nat ] ;
7825: LD_ADDR_VAR 0 17
7829: PUSH
7830: LD_INT 11
7832: PUSH
7833: LD_INT 30
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: LD_VAR 0 11
7844: ARRAY
7845: ST_TO_ADDR
// end ; if not weapon then
7846: LD_VAR 0 17
7850: NOT
7851: IFFALSE 8013
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
7853: LD_ADDR_VAR 0 4
7857: PUSH
7858: LD_VAR 0 4
7862: PUSH
7863: LD_INT 11
7865: PUSH
7866: LD_INT 30
7868: PUSH
7869: LD_INT 49
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: LIST
7876: DIFF
7877: ST_TO_ADDR
// weapon := list [ rand ( 1 , list ) ] ;
7878: LD_ADDR_VAR 0 17
7882: PUSH
7883: LD_VAR 0 4
7887: PUSH
7888: LD_INT 1
7890: PPUSH
7891: LD_VAR 0 4
7895: PPUSH
7896: CALL_OW 12
7900: ARRAY
7901: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
7902: LD_ADDR_VAR 0 13
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_VAR 0 15
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 35
7924: PUSH
7925: LD_INT 0
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: ST_TO_ADDR
// for i in tmp do
7945: LD_ADDR_VAR 0 7
7949: PUSH
7950: LD_VAR 0 13
7954: PUSH
7955: FOR_IN
7956: IFFALSE 7981
// list := list diff GetBWeapon ( i ) ;
7958: LD_ADDR_VAR 0 4
7962: PUSH
7963: LD_VAR 0 4
7967: PUSH
7968: LD_VAR 0 7
7972: PPUSH
7973: CALL_OW 269
7977: DIFF
7978: ST_TO_ADDR
7979: GO 7955
7981: POP
7982: POP
// if list then
7983: LD_VAR 0 4
7987: IFFALSE 8013
// weapon := list [ rand ( 1 , list ) ] ;
7989: LD_ADDR_VAR 0 17
7993: PUSH
7994: LD_VAR 0 4
7998: PUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_VAR 0 4
8006: PPUSH
8007: CALL_OW 12
8011: ARRAY
8012: ST_TO_ADDR
// end ; if weapon then
8013: LD_VAR 0 17
8017: IFFALSE 8131
// begin tmp := CostOfWeapon ( weapon ) ;
8019: LD_ADDR_VAR 0 13
8023: PUSH
8024: LD_VAR 0 17
8028: PPUSH
8029: CALL_OW 451
8033: ST_TO_ADDR
// j := GetBase ( tower ) ;
8034: LD_ADDR_VAR 0 8
8038: PUSH
8039: LD_VAR 0 1
8043: PPUSH
8044: CALL_OW 274
8048: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
8049: LD_VAR 0 8
8053: PPUSH
8054: LD_INT 1
8056: PPUSH
8057: CALL_OW 275
8061: PUSH
8062: LD_VAR 0 13
8066: PUSH
8067: LD_INT 1
8069: ARRAY
8070: GREATEREQUAL
8071: PUSH
8072: LD_VAR 0 8
8076: PPUSH
8077: LD_INT 2
8079: PPUSH
8080: CALL_OW 275
8084: PUSH
8085: LD_VAR 0 13
8089: PUSH
8090: LD_INT 2
8092: ARRAY
8093: GREATEREQUAL
8094: AND
8095: PUSH
8096: LD_VAR 0 8
8100: PPUSH
8101: LD_INT 3
8103: PPUSH
8104: CALL_OW 275
8108: PUSH
8109: LD_VAR 0 13
8113: PUSH
8114: LD_INT 3
8116: ARRAY
8117: GREATEREQUAL
8118: AND
8119: IFFALSE 8131
// result := weapon ;
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_VAR 0 17
8130: ST_TO_ADDR
// end ; end ;
8131: LD_VAR 0 2
8135: RET
// export function Compare ( val1 , val2 ) ; begin
8136: LD_INT 0
8138: PPUSH
// if val1 = val2 then
8139: LD_VAR 0 1
8143: PUSH
8144: LD_VAR 0 2
8148: EQUAL
8149: IFFALSE 8161
// result := true else
8151: LD_ADDR_VAR 0 3
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
8159: GO 8169
// result := false ;
8161: LD_ADDR_VAR 0 3
8165: PUSH
8166: LD_INT 0
8168: ST_TO_ADDR
// end ;
8169: LD_VAR 0 3
8173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
8174: LD_INT 0
8176: PPUSH
8177: PPUSH
// result := true ;
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_INT 1
8185: ST_TO_ADDR
// if array1 = array2 then
8186: LD_VAR 0 1
8190: PUSH
8191: LD_VAR 0 2
8195: EQUAL
8196: IFFALSE 8261
// begin for i = 1 to array1 do
8198: LD_ADDR_VAR 0 4
8202: PUSH
8203: DOUBLE
8204: LD_INT 1
8206: DEC
8207: ST_TO_ADDR
8208: LD_VAR 0 1
8212: PUSH
8213: FOR_TO
8214: IFFALSE 8257
// if not Compare ( array1 [ i ] , array2 [ i ] ) then
8216: LD_VAR 0 1
8220: PUSH
8221: LD_VAR 0 4
8225: ARRAY
8226: PPUSH
8227: LD_VAR 0 2
8231: PUSH
8232: LD_VAR 0 4
8236: ARRAY
8237: PPUSH
8238: CALL 8136 0 2
8242: NOT
8243: IFFALSE 8255
// begin result := false ;
8245: LD_ADDR_VAR 0 3
8249: PUSH
8250: LD_INT 0
8252: ST_TO_ADDR
// break ;
8253: GO 8257
// end ;
8255: GO 8213
8257: POP
8258: POP
// end else
8259: GO 8269
// result := false ;
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 0
8268: ST_TO_ADDR
// end ;
8269: LD_VAR 0 3
8273: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
8274: LD_INT 0
8276: PPUSH
8277: PPUSH
8278: PPUSH
// pom := GetBase ( fac ) ;
8279: LD_ADDR_VAR 0 5
8283: PUSH
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 274
8293: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
8294: LD_ADDR_VAR 0 4
8298: PUSH
8299: LD_VAR 0 2
8303: PUSH
8304: LD_INT 1
8306: ARRAY
8307: PPUSH
8308: LD_VAR 0 2
8312: PUSH
8313: LD_INT 2
8315: ARRAY
8316: PPUSH
8317: LD_VAR 0 2
8321: PUSH
8322: LD_INT 3
8324: ARRAY
8325: PPUSH
8326: LD_VAR 0 2
8330: PUSH
8331: LD_INT 4
8333: ARRAY
8334: PPUSH
8335: CALL_OW 449
8339: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8340: LD_VAR 0 5
8344: PPUSH
8345: LD_INT 1
8347: PPUSH
8348: CALL_OW 275
8352: PUSH
8353: LD_VAR 0 4
8357: PUSH
8358: LD_INT 1
8360: ARRAY
8361: GREATEREQUAL
8362: PUSH
8363: LD_VAR 0 5
8367: PPUSH
8368: LD_INT 2
8370: PPUSH
8371: CALL_OW 275
8375: PUSH
8376: LD_VAR 0 4
8380: PUSH
8381: LD_INT 2
8383: ARRAY
8384: GREATEREQUAL
8385: AND
8386: PUSH
8387: LD_VAR 0 5
8391: PPUSH
8392: LD_INT 3
8394: PPUSH
8395: CALL_OW 275
8399: PUSH
8400: LD_VAR 0 4
8404: PUSH
8405: LD_INT 3
8407: ARRAY
8408: GREATEREQUAL
8409: AND
8410: IFFALSE 8422
// result := true else
8412: LD_ADDR_VAR 0 3
8416: PUSH
8417: LD_INT 1
8419: ST_TO_ADDR
8420: GO 8430
// result := false ;
8422: LD_ADDR_VAR 0 3
8426: PUSH
8427: LD_INT 0
8429: ST_TO_ADDR
// end ;
8430: LD_VAR 0 3
8434: RET
// export function CanBeBuilded ( bdepot , btype , x , y , d ) ; var i , j , pom , cost , hexes , height , dist , hex ; begin
8435: LD_INT 0
8437: PPUSH
8438: PPUSH
8439: PPUSH
8440: PPUSH
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
// result := false ;
8446: LD_ADDR_VAR 0 6
8450: PUSH
8451: LD_INT 0
8453: ST_TO_ADDR
// if not bdepot or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
8454: LD_VAR 0 1
8458: NOT
8459: PUSH
8460: LD_VAR 0 2
8464: NOT
8465: OR
8466: PUSH
8467: LD_VAR 0 5
8471: PUSH
8472: LD_INT 0
8474: PUSH
8475: LD_INT 1
8477: PUSH
8478: LD_INT 2
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: LD_INT 4
8486: PUSH
8487: LD_INT 5
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: IN
8498: NOT
8499: OR
8500: PUSH
8501: LD_VAR 0 3
8505: PPUSH
8506: LD_VAR 0 4
8510: PPUSH
8511: CALL_OW 488
8515: NOT
8516: OR
8517: IFFALSE 8521
// exit ;
8519: GO 9223
// pom := GetBase ( bdepot ) ;
8521: LD_ADDR_VAR 0 9
8525: PUSH
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 274
8535: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( bdepot ) ) ;
8536: LD_ADDR_VAR 0 10
8540: PUSH
8541: LD_VAR 0 2
8545: PPUSH
8546: LD_VAR 0 1
8550: PPUSH
8551: CALL_OW 248
8555: PPUSH
8556: CALL_OW 450
8560: ST_TO_ADDR
// if GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] then
8561: LD_VAR 0 9
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 275
8573: PUSH
8574: LD_VAR 0 10
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: GREATEREQUAL
8583: PUSH
8584: LD_VAR 0 9
8588: PPUSH
8589: LD_INT 2
8591: PPUSH
8592: CALL_OW 275
8596: PUSH
8597: LD_VAR 0 10
8601: PUSH
8602: LD_INT 2
8604: ARRAY
8605: GREATEREQUAL
8606: AND
8607: PUSH
8608: LD_VAR 0 9
8612: PPUSH
8613: LD_INT 3
8615: PPUSH
8616: CALL_OW 275
8620: PUSH
8621: LD_VAR 0 10
8625: PUSH
8626: LD_INT 3
8628: ARRAY
8629: GREATEREQUAL
8630: AND
8631: IFFALSE 8643
// result := true else
8633: LD_ADDR_VAR 0 6
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
8641: GO 8645
// exit ;
8643: GO 9223
// if GetBType ( bdepot ) = b_depot then
8645: LD_VAR 0 1
8649: PPUSH
8650: CALL_OW 266
8654: PUSH
8655: LD_INT 0
8657: EQUAL
8658: IFFALSE 8670
// dist := 28 else
8660: LD_ADDR_VAR 0 13
8664: PUSH
8665: LD_INT 28
8667: ST_TO_ADDR
8668: GO 8678
// dist := 36 ;
8670: LD_ADDR_VAR 0 13
8674: PUSH
8675: LD_INT 36
8677: ST_TO_ADDR
// if GetDistUnitXY ( bdepot , x , y ) > dist then
8678: LD_VAR 0 1
8682: PPUSH
8683: LD_VAR 0 3
8687: PPUSH
8688: LD_VAR 0 4
8692: PPUSH
8693: CALL_OW 297
8697: PUSH
8698: LD_VAR 0 13
8702: GREATER
8703: IFFALSE 8715
// begin result := false ;
8705: LD_ADDR_VAR 0 6
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// exit ;
8713: GO 9223
// end ; hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( bdepot ) , 0 ) ;
8715: LD_ADDR_VAR 0 11
8719: PUSH
8720: LD_VAR 0 2
8724: PPUSH
8725: LD_VAR 0 3
8729: PPUSH
8730: LD_VAR 0 4
8734: PPUSH
8735: LD_VAR 0 5
8739: PPUSH
8740: LD_VAR 0 1
8744: PPUSH
8745: CALL_OW 248
8749: PPUSH
8750: LD_INT 0
8752: PPUSH
8753: CALL 9228 0 6
8757: ST_TO_ADDR
// if not hexes then
8758: LD_VAR 0 11
8762: NOT
8763: IFFALSE 8775
// begin result := false ;
8765: LD_ADDR_VAR 0 6
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// exit ;
8773: GO 9223
// end ; hex := _GetHexInfo ( x , y ) ;
8775: LD_ADDR_VAR 0 14
8779: PUSH
8780: LD_VAR 0 3
8784: PPUSH
8785: LD_VAR 0 4
8789: PPUSH
8790: CALL 1970 0 2
8794: ST_TO_ADDR
// if not hex then
8795: LD_VAR 0 14
8799: NOT
8800: IFFALSE 8804
// exit ;
8802: GO 9223
// height := hex [ 2 ] ;
8804: LD_ADDR_VAR 0 12
8808: PUSH
8809: LD_VAR 0 14
8813: PUSH
8814: LD_INT 2
8816: ARRAY
8817: ST_TO_ADDR
// for i = 1 to hexes do
8818: LD_ADDR_VAR 0 7
8822: PUSH
8823: DOUBLE
8824: LD_INT 1
8826: DEC
8827: ST_TO_ADDR
8828: LD_VAR 0 11
8832: PUSH
8833: FOR_TO
8834: IFFALSE 9180
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
8836: LD_VAR 0 11
8840: PUSH
8841: LD_VAR 0 7
8845: ARRAY
8846: PUSH
8847: LD_INT 1
8849: ARRAY
8850: PPUSH
8851: LD_VAR 0 11
8855: PUSH
8856: LD_VAR 0 7
8860: ARRAY
8861: PUSH
8862: LD_INT 2
8864: ARRAY
8865: PPUSH
8866: CALL_OW 488
8870: NOT
8871: IFFALSE 8875
// continue ;
8873: GO 8833
// j := _GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
8875: LD_ADDR_VAR 0 8
8879: PUSH
8880: LD_VAR 0 11
8884: PUSH
8885: LD_VAR 0 7
8889: ARRAY
8890: PUSH
8891: LD_INT 1
8893: ARRAY
8894: PPUSH
8895: LD_VAR 0 11
8899: PUSH
8900: LD_VAR 0 7
8904: ARRAY
8905: PUSH
8906: LD_INT 2
8908: ARRAY
8909: PPUSH
8910: CALL 1970 0 2
8914: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or j [ 4 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
8915: LD_VAR 0 8
8919: PUSH
8920: LD_INT 1
8922: ARRAY
8923: PUSH
8924: LD_VAR 0 8
8928: PUSH
8929: LD_INT 2
8931: ARRAY
8932: PUSH
8933: LD_VAR 0 12
8937: PUSH
8938: LD_INT 2
8940: PLUS
8941: GREATER
8942: OR
8943: PUSH
8944: LD_VAR 0 8
8948: PUSH
8949: LD_INT 2
8951: ARRAY
8952: PUSH
8953: LD_VAR 0 12
8957: PUSH
8958: LD_INT 2
8960: MINUS
8961: LESS
8962: OR
8963: PUSH
8964: LD_VAR 0 8
8968: PUSH
8969: LD_INT 3
8971: ARRAY
8972: PUSH
8973: LD_INT 0
8975: PUSH
8976: LD_INT 8
8978: PUSH
8979: LD_INT 9
8981: PUSH
8982: LD_INT 10
8984: PUSH
8985: LD_INT 11
8987: PUSH
8988: LD_INT 12
8990: PUSH
8991: LD_INT 13
8993: PUSH
8994: LD_INT 16
8996: PUSH
8997: LD_INT 17
8999: PUSH
9000: LD_INT 18
9002: PUSH
9003: LD_INT 19
9005: PUSH
9006: LD_INT 20
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: IN
9027: NOT
9028: OR
9029: PUSH
9030: LD_VAR 0 8
9034: PUSH
9035: LD_INT 4
9037: ARRAY
9038: OR
9039: PUSH
9040: LD_VAR 0 8
9044: PUSH
9045: LD_INT 5
9047: ARRAY
9048: NOT
9049: OR
9050: PUSH
9051: LD_VAR 0 8
9055: PUSH
9056: LD_INT 6
9058: ARRAY
9059: PUSH
9060: LD_INT 1
9062: PUSH
9063: LD_INT 2
9065: PUSH
9066: LD_INT 7
9068: PUSH
9069: LD_INT 9
9071: PUSH
9072: LD_INT 10
9074: PUSH
9075: LD_INT 11
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: IN
9086: NOT
9087: OR
9088: PUSH
9089: LD_VAR 0 11
9093: PUSH
9094: LD_VAR 0 7
9098: ARRAY
9099: PUSH
9100: LD_INT 1
9102: ARRAY
9103: PPUSH
9104: LD_VAR 0 11
9108: PUSH
9109: LD_VAR 0 7
9113: ARRAY
9114: PUSH
9115: LD_INT 2
9117: ARRAY
9118: PPUSH
9119: CALL_OW 428
9123: PUSH
9124: LD_INT 0
9126: GREATER
9127: OR
9128: PUSH
9129: LD_VAR 0 11
9133: PUSH
9134: LD_VAR 0 7
9138: ARRAY
9139: PUSH
9140: LD_INT 1
9142: ARRAY
9143: PPUSH
9144: LD_VAR 0 11
9148: PUSH
9149: LD_VAR 0 7
9153: ARRAY
9154: PUSH
9155: LD_INT 2
9157: ARRAY
9158: PPUSH
9159: CALL_OW 351
9163: OR
9164: IFFALSE 9178
// begin result := false ;
9166: LD_ADDR_VAR 0 6
9170: PUSH
9171: LD_INT 0
9173: ST_TO_ADDR
// exit ;
9174: POP
9175: POP
9176: GO 9223
// end ; end ;
9178: GO 8833
9180: POP
9181: POP
// if DangerAtRangeXY ( GetSide ( bdepot ) , x , y , 20 ) [ 4 ] then
9182: LD_VAR 0 1
9186: PPUSH
9187: CALL_OW 255
9191: PPUSH
9192: LD_VAR 0 3
9196: PPUSH
9197: LD_VAR 0 4
9201: PPUSH
9202: LD_INT 20
9204: PPUSH
9205: CALL 3705 0 4
9209: PUSH
9210: LD_INT 4
9212: ARRAY
9213: IFFALSE 9223
// result := false ;
9215: LD_ADDR_VAR 0 6
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// end ;
9223: LD_VAR 0 6
9227: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9228: LD_INT 0
9230: PPUSH
9231: PPUSH
9232: PPUSH
9233: PPUSH
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
9247: PPUSH
9248: PPUSH
9249: PPUSH
9250: PPUSH
9251: PPUSH
9252: PPUSH
9253: PPUSH
9254: PPUSH
9255: PPUSH
9256: PPUSH
9257: PPUSH
9258: PPUSH
9259: PPUSH
9260: PPUSH
9261: PPUSH
9262: PPUSH
9263: PPUSH
9264: PPUSH
9265: PPUSH
9266: PPUSH
9267: PPUSH
9268: PPUSH
9269: PPUSH
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
9274: PPUSH
9275: PPUSH
9276: PPUSH
9277: PPUSH
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
9285: PPUSH
9286: PPUSH
9287: PPUSH
// result = [ ] ;
9288: LD_ADDR_VAR 0 7
9292: PUSH
9293: EMPTY
9294: ST_TO_ADDR
// temp_list = [ ] ;
9295: LD_ADDR_VAR 0 9
9299: PUSH
9300: EMPTY
9301: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9302: LD_VAR 0 4
9306: PUSH
9307: LD_INT 0
9309: PUSH
9310: LD_INT 1
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: LD_INT 3
9318: PUSH
9319: LD_INT 4
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: IN
9333: NOT
9334: PUSH
9335: LD_VAR 0 1
9339: PUSH
9340: LD_INT 0
9342: PUSH
9343: LD_INT 1
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: IN
9350: PUSH
9351: LD_VAR 0 5
9355: PUSH
9356: LD_INT 1
9358: PUSH
9359: LD_INT 2
9361: PUSH
9362: LD_INT 3
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: IN
9370: NOT
9371: AND
9372: OR
9373: IFFALSE 9377
// exit ;
9375: GO 27762
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9377: LD_VAR 0 1
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: LD_INT 7
9387: PUSH
9388: LD_INT 8
9390: PUSH
9391: LD_INT 13
9393: PUSH
9394: LD_INT 12
9396: PUSH
9397: LD_INT 15
9399: PUSH
9400: LD_INT 11
9402: PUSH
9403: LD_INT 14
9405: PUSH
9406: LD_INT 10
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: IN
9420: IFFALSE 9430
// btype = b_lab ;
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: LD_INT 6
9429: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9430: LD_VAR 0 6
9434: PUSH
9435: LD_INT 0
9437: PUSH
9438: LD_INT 1
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: IN
9449: NOT
9450: PUSH
9451: LD_VAR 0 1
9455: PUSH
9456: LD_INT 0
9458: PUSH
9459: LD_INT 1
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: LD_INT 3
9467: PUSH
9468: LD_INT 6
9470: PUSH
9471: LD_INT 36
9473: PUSH
9474: LD_INT 4
9476: PUSH
9477: LD_INT 5
9479: PUSH
9480: LD_INT 31
9482: PUSH
9483: LD_INT 32
9485: PUSH
9486: LD_INT 33
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: IN
9502: NOT
9503: PUSH
9504: LD_VAR 0 6
9508: PUSH
9509: LD_INT 1
9511: EQUAL
9512: AND
9513: OR
9514: PUSH
9515: LD_VAR 0 1
9519: PUSH
9520: LD_INT 2
9522: PUSH
9523: LD_INT 3
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: IN
9530: NOT
9531: PUSH
9532: LD_VAR 0 6
9536: PUSH
9537: LD_INT 2
9539: EQUAL
9540: AND
9541: OR
9542: IFFALSE 9552
// mode = 0 ;
9544: LD_ADDR_VAR 0 6
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// case mode of 0 :
9552: LD_VAR 0 6
9556: PUSH
9557: LD_INT 0
9559: DOUBLE
9560: EQUAL
9561: IFTRUE 9565
9563: GO 21018
9565: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9566: LD_ADDR_VAR 0 11
9570: PUSH
9571: LD_INT 0
9573: PUSH
9574: LD_INT 0
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PUSH
9581: LD_INT 0
9583: PUSH
9584: LD_INT 1
9586: NEG
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: LD_INT 0
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 1
9604: PUSH
9605: LD_INT 1
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 0
9614: PUSH
9615: LD_INT 1
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: PUSH
9622: LD_INT 1
9624: NEG
9625: PUSH
9626: LD_INT 0
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 1
9635: NEG
9636: PUSH
9637: LD_INT 1
9639: NEG
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 1
9647: NEG
9648: PUSH
9649: LD_INT 2
9651: NEG
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 0
9659: PUSH
9660: LD_INT 2
9662: NEG
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 1
9670: PUSH
9671: LD_INT 1
9673: NEG
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 1
9681: PUSH
9682: LD_INT 2
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 0
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 1
9701: NEG
9702: PUSH
9703: LD_INT 1
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 1
9712: PUSH
9713: LD_INT 3
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 0
9722: PUSH
9723: LD_INT 3
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: PUSH
9730: LD_INT 1
9732: NEG
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
9759: LD_ADDR_VAR 0 12
9763: PUSH
9764: LD_INT 0
9766: PUSH
9767: LD_INT 0
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 0
9776: PUSH
9777: LD_INT 1
9779: NEG
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: LD_INT 1
9787: PUSH
9788: LD_INT 0
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: PUSH
9795: LD_INT 1
9797: PUSH
9798: LD_INT 1
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 0
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 1
9817: NEG
9818: PUSH
9819: LD_INT 0
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PUSH
9826: LD_INT 1
9828: NEG
9829: PUSH
9830: LD_INT 1
9832: NEG
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 1
9840: PUSH
9841: LD_INT 1
9843: NEG
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 1
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PUSH
9869: LD_INT 1
9871: NEG
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 2
9882: NEG
9883: PUSH
9884: LD_INT 0
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 2
9893: NEG
9894: PUSH
9895: LD_INT 1
9897: NEG
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 2
9905: NEG
9906: PUSH
9907: LD_INT 1
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 3
9916: NEG
9917: PUSH
9918: LD_INT 0
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 3
9927: NEG
9928: PUSH
9929: LD_INT 1
9931: NEG
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
9955: LD_ADDR_VAR 0 13
9959: PUSH
9960: LD_INT 0
9962: PUSH
9963: LD_INT 0
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 0
9972: PUSH
9973: LD_INT 1
9975: NEG
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: LD_INT 0
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 1
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 0
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 1
10013: NEG
10014: PUSH
10015: LD_INT 0
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 1
10024: NEG
10025: PUSH
10026: LD_INT 1
10028: NEG
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 1
10036: NEG
10037: PUSH
10038: LD_INT 2
10040: NEG
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 1
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 2
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 1
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 2
10078: NEG
10079: PUSH
10080: LD_INT 1
10082: NEG
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 2
10090: NEG
10091: PUSH
10092: LD_INT 2
10094: NEG
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: LD_INT 2
10102: NEG
10103: PUSH
10104: LD_INT 3
10106: NEG
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 3
10114: NEG
10115: PUSH
10116: LD_INT 2
10118: NEG
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 3
10126: NEG
10127: PUSH
10128: LD_INT 3
10130: NEG
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10154: LD_ADDR_VAR 0 14
10158: PUSH
10159: LD_INT 0
10161: PUSH
10162: LD_INT 0
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: LD_INT 1
10174: NEG
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 1
10182: PUSH
10183: LD_INT 0
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 1
10192: PUSH
10193: LD_INT 1
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: LD_INT 0
10202: PUSH
10203: LD_INT 1
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 1
10212: NEG
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 1
10223: NEG
10224: PUSH
10225: LD_INT 1
10227: NEG
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 1
10235: NEG
10236: PUSH
10237: LD_INT 2
10239: NEG
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 0
10247: PUSH
10248: LD_INT 2
10250: NEG
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 1
10258: PUSH
10259: LD_INT 1
10261: NEG
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: LD_INT 2
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 0
10279: PUSH
10280: LD_INT 2
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: LD_INT 1
10289: NEG
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 1
10300: NEG
10301: PUSH
10302: LD_INT 3
10304: NEG
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 0
10312: PUSH
10313: LD_INT 3
10315: NEG
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: LD_INT 2
10326: NEG
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10350: LD_ADDR_VAR 0 15
10354: PUSH
10355: LD_INT 0
10357: PUSH
10358: LD_INT 0
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 0
10367: PUSH
10368: LD_INT 1
10370: NEG
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: LD_INT 0
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 1
10388: PUSH
10389: LD_INT 1
10391: PUSH
10392: EMPTY
10393: LIST
10394: LIST
10395: PUSH
10396: LD_INT 0
10398: PUSH
10399: LD_INT 1
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 1
10408: NEG
10409: PUSH
10410: LD_INT 0
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 1
10419: NEG
10420: PUSH
10421: LD_INT 1
10423: NEG
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 1
10431: PUSH
10432: LD_INT 1
10434: NEG
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 2
10442: PUSH
10443: LD_INT 0
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: LD_INT 1
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 1
10462: NEG
10463: PUSH
10464: LD_INT 1
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 2
10473: NEG
10474: PUSH
10475: LD_INT 0
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 2
10484: NEG
10485: PUSH
10486: LD_INT 1
10488: NEG
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: LD_INT 1
10499: NEG
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 3
10507: PUSH
10508: LD_INT 0
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: LD_INT 1
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10543: LD_ADDR_VAR 0 16
10547: PUSH
10548: LD_INT 0
10550: PUSH
10551: LD_INT 0
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 0
10560: PUSH
10561: LD_INT 1
10563: NEG
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 1
10571: PUSH
10572: LD_INT 0
10574: PUSH
10575: EMPTY
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: LD_INT 1
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 0
10591: PUSH
10592: LD_INT 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: LD_INT 1
10601: NEG
10602: PUSH
10603: LD_INT 0
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 1
10612: NEG
10613: PUSH
10614: LD_INT 1
10616: NEG
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: LD_INT 1
10624: NEG
10625: PUSH
10626: LD_INT 2
10628: NEG
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 1
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 2
10666: NEG
10667: PUSH
10668: LD_INT 1
10670: NEG
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 2
10678: NEG
10679: PUSH
10680: LD_INT 2
10682: NEG
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 3
10690: PUSH
10691: LD_INT 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 3
10700: PUSH
10701: LD_INT 3
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10736: LD_ADDR_VAR 0 17
10740: PUSH
10741: LD_INT 0
10743: PUSH
10744: LD_INT 0
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 0
10753: PUSH
10754: LD_INT 1
10756: NEG
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 0
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 1
10794: NEG
10795: PUSH
10796: LD_INT 0
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 1
10805: NEG
10806: PUSH
10807: LD_INT 1
10809: NEG
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 1
10817: NEG
10818: PUSH
10819: LD_INT 2
10821: NEG
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 0
10829: PUSH
10830: LD_INT 2
10832: NEG
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PUSH
10838: LD_INT 1
10840: PUSH
10841: LD_INT 1
10843: NEG
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 2
10851: PUSH
10852: LD_INT 0
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 2
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 2
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 1
10881: PUSH
10882: LD_INT 2
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: LD_INT 2
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 1
10901: NEG
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 2
10912: NEG
10913: PUSH
10914: LD_INT 0
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 2
10923: NEG
10924: PUSH
10925: LD_INT 1
10927: NEG
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 2
10935: NEG
10936: PUSH
10937: LD_INT 2
10939: NEG
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
10966: LD_ADDR_VAR 0 18
10970: PUSH
10971: LD_INT 0
10973: PUSH
10974: LD_INT 0
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 0
10983: PUSH
10984: LD_INT 1
10986: NEG
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 1
10994: PUSH
10995: LD_INT 0
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: LD_INT 1
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 0
11014: PUSH
11015: LD_INT 1
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: PUSH
11022: LD_INT 1
11024: NEG
11025: PUSH
11026: LD_INT 0
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 1
11035: NEG
11036: PUSH
11037: LD_INT 1
11039: NEG
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 1
11047: NEG
11048: PUSH
11049: LD_INT 2
11051: NEG
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 0
11059: PUSH
11060: LD_INT 2
11062: NEG
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 1
11070: PUSH
11071: LD_INT 1
11073: NEG
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: LD_INT 0
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 2
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 2
11101: PUSH
11102: LD_INT 2
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: LD_INT 1
11111: PUSH
11112: LD_INT 2
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 0
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 1
11131: NEG
11132: PUSH
11133: LD_INT 1
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 2
11142: NEG
11143: PUSH
11144: LD_INT 0
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 2
11153: NEG
11154: PUSH
11155: LD_INT 1
11157: NEG
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 2
11165: NEG
11166: PUSH
11167: LD_INT 2
11169: NEG
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11196: LD_ADDR_VAR 0 19
11200: PUSH
11201: LD_INT 0
11203: PUSH
11204: LD_INT 0
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PUSH
11211: LD_INT 0
11213: PUSH
11214: LD_INT 1
11216: NEG
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: LD_INT 0
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: LD_INT 1
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 1
11254: NEG
11255: PUSH
11256: LD_INT 0
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 1
11265: NEG
11266: PUSH
11267: LD_INT 1
11269: NEG
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 1
11277: NEG
11278: PUSH
11279: LD_INT 2
11281: NEG
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 0
11289: PUSH
11290: LD_INT 2
11292: NEG
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 1
11300: PUSH
11301: LD_INT 1
11303: NEG
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: LD_INT 0
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PUSH
11319: LD_INT 2
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 2
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 1
11341: PUSH
11342: LD_INT 2
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: LD_INT 0
11351: PUSH
11352: LD_INT 2
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 1
11361: NEG
11362: PUSH
11363: LD_INT 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 2
11372: NEG
11373: PUSH
11374: LD_INT 0
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: NEG
11384: PUSH
11385: LD_INT 1
11387: NEG
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 2
11395: NEG
11396: PUSH
11397: LD_INT 2
11399: NEG
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11426: LD_ADDR_VAR 0 20
11430: PUSH
11431: LD_INT 0
11433: PUSH
11434: LD_INT 0
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 0
11443: PUSH
11444: LD_INT 1
11446: NEG
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 1
11454: PUSH
11455: LD_INT 0
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: LD_INT 0
11474: PUSH
11475: LD_INT 1
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: PUSH
11482: LD_INT 1
11484: NEG
11485: PUSH
11486: LD_INT 0
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 1
11495: NEG
11496: PUSH
11497: LD_INT 1
11499: NEG
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 1
11507: NEG
11508: PUSH
11509: LD_INT 2
11511: NEG
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: LD_INT 0
11519: PUSH
11520: LD_INT 2
11522: NEG
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 1
11530: PUSH
11531: LD_INT 1
11533: NEG
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 0
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 2
11561: PUSH
11562: LD_INT 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 1
11571: PUSH
11572: LD_INT 2
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 0
11581: PUSH
11582: LD_INT 2
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 1
11591: NEG
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 2
11602: NEG
11603: PUSH
11604: LD_INT 0
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 2
11613: NEG
11614: PUSH
11615: LD_INT 1
11617: NEG
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 2
11625: NEG
11626: PUSH
11627: LD_INT 2
11629: NEG
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11656: LD_ADDR_VAR 0 21
11660: PUSH
11661: LD_INT 0
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 0
11673: PUSH
11674: LD_INT 1
11676: NEG
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: LD_INT 0
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: LD_INT 1
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 0
11704: PUSH
11705: LD_INT 1
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: LD_INT 1
11714: NEG
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 1
11725: NEG
11726: PUSH
11727: LD_INT 1
11729: NEG
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 1
11737: NEG
11738: PUSH
11739: LD_INT 2
11741: NEG
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 0
11749: PUSH
11750: LD_INT 2
11752: NEG
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: PUSH
11758: LD_INT 1
11760: PUSH
11761: LD_INT 1
11763: NEG
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PUSH
11769: LD_INT 2
11771: PUSH
11772: LD_INT 0
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 2
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 2
11791: PUSH
11792: LD_INT 2
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 1
11801: PUSH
11802: LD_INT 2
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 0
11811: PUSH
11812: LD_INT 2
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 1
11821: NEG
11822: PUSH
11823: LD_INT 1
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 2
11832: NEG
11833: PUSH
11834: LD_INT 0
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 2
11843: NEG
11844: PUSH
11845: LD_INT 1
11847: NEG
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 2
11855: NEG
11856: PUSH
11857: LD_INT 2
11859: NEG
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11886: LD_ADDR_VAR 0 22
11890: PUSH
11891: LD_INT 0
11893: PUSH
11894: LD_INT 0
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 0
11903: PUSH
11904: LD_INT 1
11906: NEG
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 1
11914: PUSH
11915: LD_INT 0
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: LD_INT 1
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 0
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 1
11944: NEG
11945: PUSH
11946: LD_INT 0
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: LD_INT 1
11955: NEG
11956: PUSH
11957: LD_INT 1
11959: NEG
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 1
11967: NEG
11968: PUSH
11969: LD_INT 2
11971: NEG
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 0
11979: PUSH
11980: LD_INT 2
11982: NEG
11983: PUSH
11984: EMPTY
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: LD_INT 1
11993: NEG
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 2
12001: PUSH
12002: LD_INT 0
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 2
12011: PUSH
12012: LD_INT 1
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 1
12031: PUSH
12032: LD_INT 2
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 0
12041: PUSH
12042: LD_INT 2
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 1
12051: NEG
12052: PUSH
12053: LD_INT 1
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 2
12062: NEG
12063: PUSH
12064: LD_INT 0
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 2
12073: NEG
12074: PUSH
12075: LD_INT 1
12077: NEG
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 2
12085: NEG
12086: PUSH
12087: LD_INT 2
12089: NEG
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12116: LD_ADDR_VAR 0 23
12120: PUSH
12121: LD_INT 0
12123: PUSH
12124: LD_INT 0
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: PUSH
12131: LD_INT 0
12133: PUSH
12134: LD_INT 1
12136: NEG
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 1
12144: PUSH
12145: LD_INT 0
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: LD_INT 1
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 0
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 1
12174: NEG
12175: PUSH
12176: LD_INT 0
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: LD_INT 1
12185: NEG
12186: PUSH
12187: LD_INT 1
12189: NEG
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 1
12197: NEG
12198: PUSH
12199: LD_INT 2
12201: NEG
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 0
12209: PUSH
12210: LD_INT 2
12212: NEG
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: LD_INT 1
12223: NEG
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: LD_INT 0
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 1
12261: PUSH
12262: LD_INT 2
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 0
12271: PUSH
12272: LD_INT 2
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 1
12281: NEG
12282: PUSH
12283: LD_INT 1
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 2
12292: NEG
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 2
12303: NEG
12304: PUSH
12305: LD_INT 1
12307: NEG
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 2
12315: NEG
12316: PUSH
12317: LD_INT 2
12319: NEG
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 2
12327: NEG
12328: PUSH
12329: LD_INT 3
12331: NEG
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 1
12339: NEG
12340: PUSH
12341: LD_INT 3
12343: NEG
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 1
12351: PUSH
12352: LD_INT 2
12354: NEG
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 2
12362: PUSH
12363: LD_INT 1
12365: NEG
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12396: LD_ADDR_VAR 0 24
12400: PUSH
12401: LD_INT 0
12403: PUSH
12404: LD_INT 0
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 0
12413: PUSH
12414: LD_INT 1
12416: NEG
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: LD_INT 0
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: LD_INT 1
12434: PUSH
12435: LD_INT 1
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 0
12444: PUSH
12445: LD_INT 1
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 1
12454: NEG
12455: PUSH
12456: LD_INT 0
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 1
12465: NEG
12466: PUSH
12467: LD_INT 1
12469: NEG
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 1
12477: NEG
12478: PUSH
12479: LD_INT 2
12481: NEG
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 0
12489: PUSH
12490: LD_INT 2
12492: NEG
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: LD_INT 1
12503: NEG
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 2
12511: PUSH
12512: LD_INT 0
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: LD_INT 1
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 2
12531: PUSH
12532: LD_INT 2
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 1
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 0
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 1
12561: NEG
12562: PUSH
12563: LD_INT 1
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 2
12572: NEG
12573: PUSH
12574: LD_INT 0
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 2
12583: NEG
12584: PUSH
12585: LD_INT 1
12587: NEG
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: LD_INT 2
12595: NEG
12596: PUSH
12597: LD_INT 2
12599: NEG
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: LD_INT 2
12610: NEG
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: LD_INT 1
12621: NEG
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: LD_INT 1
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: LD_INT 3
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12672: LD_ADDR_VAR 0 25
12676: PUSH
12677: LD_INT 0
12679: PUSH
12680: LD_INT 0
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 0
12689: PUSH
12690: LD_INT 1
12692: NEG
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 1
12700: PUSH
12701: LD_INT 0
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: LD_INT 1
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 0
12720: PUSH
12721: LD_INT 1
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 1
12730: NEG
12731: PUSH
12732: LD_INT 0
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 1
12741: NEG
12742: PUSH
12743: LD_INT 1
12745: NEG
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 1
12753: NEG
12754: PUSH
12755: LD_INT 2
12757: NEG
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 0
12765: PUSH
12766: LD_INT 2
12768: NEG
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: LD_INT 1
12779: NEG
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: LD_INT 0
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 2
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 2
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 1
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 0
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 1
12837: NEG
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 2
12848: NEG
12849: PUSH
12850: LD_INT 0
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 2
12859: NEG
12860: PUSH
12861: LD_INT 1
12863: NEG
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 2
12871: NEG
12872: PUSH
12873: LD_INT 2
12875: NEG
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 3
12893: PUSH
12894: LD_INT 2
12896: PUSH
12897: EMPTY
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 2
12903: PUSH
12904: LD_INT 3
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 1
12913: PUSH
12914: LD_INT 3
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
12946: LD_ADDR_VAR 0 26
12950: PUSH
12951: LD_INT 0
12953: PUSH
12954: LD_INT 0
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: LD_INT 0
12963: PUSH
12964: LD_INT 1
12966: NEG
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: LD_INT 1
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 1
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: LD_INT 1
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PUSH
13002: LD_INT 1
13004: NEG
13005: PUSH
13006: LD_INT 0
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 1
13015: NEG
13016: PUSH
13017: LD_INT 1
13019: NEG
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 1
13027: NEG
13028: PUSH
13029: LD_INT 2
13031: NEG
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 0
13039: PUSH
13040: LD_INT 2
13042: NEG
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 1
13050: PUSH
13051: LD_INT 1
13053: NEG
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: LD_INT 0
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: LD_INT 2
13071: PUSH
13072: LD_INT 1
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: LD_INT 2
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 1
13091: PUSH
13092: LD_INT 2
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 0
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 1
13111: NEG
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: NEG
13123: PUSH
13124: LD_INT 0
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 2
13133: NEG
13134: PUSH
13135: LD_INT 1
13137: NEG
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 2
13145: NEG
13146: PUSH
13147: LD_INT 2
13149: NEG
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 1
13167: PUSH
13168: LD_INT 3
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 1
13177: NEG
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 2
13188: NEG
13189: PUSH
13190: LD_INT 1
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13222: LD_ADDR_VAR 0 27
13226: PUSH
13227: LD_INT 0
13229: PUSH
13230: LD_INT 0
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 0
13239: PUSH
13240: LD_INT 1
13242: NEG
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 0
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 1
13260: PUSH
13261: LD_INT 1
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 0
13270: PUSH
13271: LD_INT 1
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 1
13280: NEG
13281: PUSH
13282: LD_INT 0
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 1
13291: NEG
13292: PUSH
13293: LD_INT 1
13295: NEG
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 1
13303: NEG
13304: PUSH
13305: LD_INT 2
13307: NEG
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 0
13315: PUSH
13316: LD_INT 2
13318: NEG
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: LD_INT 1
13329: NEG
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 2
13337: PUSH
13338: LD_INT 0
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 2
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: LD_INT 2
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 0
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 1
13387: NEG
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 2
13398: NEG
13399: PUSH
13400: LD_INT 0
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 2
13409: NEG
13410: PUSH
13411: LD_INT 1
13413: NEG
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 2
13421: NEG
13422: PUSH
13423: LD_INT 2
13425: NEG
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 1
13433: NEG
13434: PUSH
13435: LD_INT 2
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 2
13444: NEG
13445: PUSH
13446: LD_INT 1
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 3
13455: NEG
13456: PUSH
13457: LD_INT 1
13459: NEG
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 3
13467: NEG
13468: PUSH
13469: LD_INT 2
13471: NEG
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13502: LD_ADDR_VAR 0 28
13506: PUSH
13507: LD_INT 0
13509: PUSH
13510: LD_INT 0
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 0
13519: PUSH
13520: LD_INT 1
13522: NEG
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: LD_INT 0
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 1
13540: PUSH
13541: LD_INT 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 0
13550: PUSH
13551: LD_INT 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 1
13560: NEG
13561: PUSH
13562: LD_INT 0
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 1
13571: NEG
13572: PUSH
13573: LD_INT 1
13575: NEG
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 1
13583: NEG
13584: PUSH
13585: LD_INT 2
13587: NEG
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 0
13595: PUSH
13596: LD_INT 2
13598: NEG
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 1
13606: PUSH
13607: LD_INT 1
13609: NEG
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 2
13617: PUSH
13618: LD_INT 0
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: LD_INT 2
13627: PUSH
13628: LD_INT 1
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 2
13637: PUSH
13638: LD_INT 2
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 0
13657: PUSH
13658: LD_INT 2
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 1
13667: NEG
13668: PUSH
13669: LD_INT 1
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 2
13678: NEG
13679: PUSH
13680: LD_INT 0
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 2
13689: NEG
13690: PUSH
13691: LD_INT 1
13693: NEG
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 2
13701: NEG
13702: PUSH
13703: LD_INT 2
13705: NEG
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 2
13713: NEG
13714: PUSH
13715: LD_INT 3
13717: NEG
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: LD_INT 1
13725: NEG
13726: PUSH
13727: LD_INT 3
13729: NEG
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 3
13737: NEG
13738: PUSH
13739: LD_INT 1
13741: NEG
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 3
13749: NEG
13750: PUSH
13751: LD_INT 2
13753: NEG
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
13784: LD_ADDR_VAR 0 29
13788: PUSH
13789: LD_INT 0
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 0
13801: PUSH
13802: LD_INT 1
13804: NEG
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PUSH
13810: LD_INT 1
13812: PUSH
13813: LD_INT 0
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 0
13832: PUSH
13833: LD_INT 1
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 1
13842: NEG
13843: PUSH
13844: LD_INT 0
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 1
13853: NEG
13854: PUSH
13855: LD_INT 1
13857: NEG
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 1
13865: NEG
13866: PUSH
13867: LD_INT 2
13869: NEG
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 0
13877: PUSH
13878: LD_INT 2
13880: NEG
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PUSH
13886: LD_INT 1
13888: PUSH
13889: LD_INT 1
13891: NEG
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 0
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 2
13909: PUSH
13910: LD_INT 1
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 1
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 0
13929: PUSH
13930: LD_INT 2
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 1
13939: NEG
13940: PUSH
13941: LD_INT 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 2
13950: NEG
13951: PUSH
13952: LD_INT 1
13954: NEG
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: LD_INT 2
13962: NEG
13963: PUSH
13964: LD_INT 2
13966: NEG
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 2
13974: NEG
13975: PUSH
13976: LD_INT 3
13978: NEG
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 2
13986: PUSH
13987: LD_INT 1
13989: NEG
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 1
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 1
14007: PUSH
14008: LD_INT 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 1
14017: NEG
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 3
14028: NEG
14029: PUSH
14030: LD_INT 2
14032: NEG
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14063: LD_ADDR_VAR 0 30
14067: PUSH
14068: LD_INT 0
14070: PUSH
14071: LD_INT 0
14073: PUSH
14074: EMPTY
14075: LIST
14076: LIST
14077: PUSH
14078: LD_INT 0
14080: PUSH
14081: LD_INT 1
14083: NEG
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: LD_INT 0
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 1
14101: PUSH
14102: LD_INT 1
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: LD_INT 1
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 1
14121: NEG
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 1
14132: NEG
14133: PUSH
14134: LD_INT 1
14136: NEG
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 1
14144: NEG
14145: PUSH
14146: LD_INT 2
14148: NEG
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: LD_INT 2
14159: NEG
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: LD_INT 1
14167: PUSH
14168: LD_INT 1
14170: NEG
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: LD_INT 0
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 2
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 1
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 1
14218: NEG
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 2
14229: NEG
14230: PUSH
14231: LD_INT 0
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 2
14240: NEG
14241: PUSH
14242: LD_INT 1
14244: NEG
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 1
14252: NEG
14253: PUSH
14254: LD_INT 3
14256: NEG
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: LD_INT 2
14267: NEG
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 3
14275: PUSH
14276: LD_INT 2
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 2
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 2
14295: NEG
14296: PUSH
14297: LD_INT 1
14299: PUSH
14300: EMPTY
14301: LIST
14302: LIST
14303: PUSH
14304: LD_INT 3
14306: NEG
14307: PUSH
14308: LD_INT 1
14310: NEG
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14341: LD_ADDR_VAR 0 31
14345: PUSH
14346: LD_INT 0
14348: PUSH
14349: LD_INT 0
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 0
14358: PUSH
14359: LD_INT 1
14361: NEG
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 1
14369: PUSH
14370: LD_INT 0
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 1
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: PUSH
14387: LD_INT 0
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 1
14399: NEG
14400: PUSH
14401: LD_INT 0
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 1
14410: NEG
14411: PUSH
14412: LD_INT 1
14414: NEG
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 1
14422: NEG
14423: PUSH
14424: LD_INT 2
14426: NEG
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 1
14434: PUSH
14435: LD_INT 1
14437: NEG
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 2
14445: PUSH
14446: LD_INT 0
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 2
14455: PUSH
14456: LD_INT 1
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 2
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 1
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 0
14485: PUSH
14486: LD_INT 2
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: LD_INT 1
14495: NEG
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 2
14506: NEG
14507: PUSH
14508: LD_INT 1
14510: NEG
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 2
14518: NEG
14519: PUSH
14520: LD_INT 2
14522: NEG
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 2
14530: NEG
14531: PUSH
14532: LD_INT 3
14534: NEG
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: LD_INT 1
14545: NEG
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 3
14553: PUSH
14554: LD_INT 1
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 1
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 1
14573: NEG
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: LD_INT 3
14584: NEG
14585: PUSH
14586: LD_INT 2
14588: NEG
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14619: LD_ADDR_VAR 0 32
14623: PUSH
14624: LD_INT 0
14626: PUSH
14627: LD_INT 0
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 0
14636: PUSH
14637: LD_INT 1
14639: NEG
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: LD_INT 0
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 1
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: LD_INT 0
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 1
14677: NEG
14678: PUSH
14679: LD_INT 0
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 1
14688: NEG
14689: PUSH
14690: LD_INT 1
14692: NEG
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 1
14700: NEG
14701: PUSH
14702: LD_INT 2
14704: NEG
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 0
14712: PUSH
14713: LD_INT 2
14715: NEG
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 1
14723: PUSH
14724: LD_INT 1
14726: NEG
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 2
14734: PUSH
14735: LD_INT 1
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 2
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 1
14754: PUSH
14755: LD_INT 2
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 0
14764: PUSH
14765: LD_INT 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 1
14774: NEG
14775: PUSH
14776: LD_INT 1
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 2
14785: NEG
14786: PUSH
14787: LD_INT 0
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 2
14796: NEG
14797: PUSH
14798: LD_INT 1
14800: NEG
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 1
14808: NEG
14809: PUSH
14810: LD_INT 3
14812: NEG
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: PUSH
14818: LD_INT 1
14820: PUSH
14821: LD_INT 2
14823: NEG
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: PUSH
14829: LD_INT 3
14831: PUSH
14832: LD_INT 2
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 2
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 2
14851: NEG
14852: PUSH
14853: LD_INT 1
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PUSH
14860: LD_INT 3
14862: NEG
14863: PUSH
14864: LD_INT 1
14866: NEG
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14897: LD_ADDR_VAR 0 33
14901: PUSH
14902: LD_INT 0
14904: PUSH
14905: LD_INT 0
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: PUSH
14912: LD_INT 0
14914: PUSH
14915: LD_INT 1
14917: NEG
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 1
14925: PUSH
14926: LD_INT 0
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: PUSH
14943: LD_INT 0
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 1
14955: NEG
14956: PUSH
14957: LD_INT 0
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: LD_INT 1
14966: NEG
14967: PUSH
14968: LD_INT 1
14970: NEG
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 1
14978: NEG
14979: PUSH
14980: LD_INT 2
14982: NEG
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 1
14990: PUSH
14991: LD_INT 1
14993: NEG
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: LD_INT 0
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 0
15031: PUSH
15032: LD_INT 2
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 1
15041: NEG
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 2
15052: NEG
15053: PUSH
15054: LD_INT 0
15056: PUSH
15057: EMPTY
15058: LIST
15059: LIST
15060: PUSH
15061: LD_INT 2
15063: NEG
15064: PUSH
15065: LD_INT 1
15067: NEG
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: LD_INT 2
15075: NEG
15076: PUSH
15077: LD_INT 2
15079: NEG
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 2
15087: NEG
15088: PUSH
15089: LD_INT 3
15091: NEG
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 2
15099: PUSH
15100: LD_INT 1
15102: NEG
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 3
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 1
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 1
15130: NEG
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 3
15141: NEG
15142: PUSH
15143: LD_INT 2
15145: NEG
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15176: LD_ADDR_VAR 0 34
15180: PUSH
15181: LD_INT 0
15183: PUSH
15184: LD_INT 0
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 0
15193: PUSH
15194: LD_INT 1
15196: NEG
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 1
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 1
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: LD_INT 1
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: LD_INT 1
15234: NEG
15235: PUSH
15236: LD_INT 0
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 1
15245: NEG
15246: PUSH
15247: LD_INT 1
15249: NEG
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 1
15257: NEG
15258: PUSH
15259: LD_INT 2
15261: NEG
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: LD_INT 2
15272: NEG
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: LD_INT 1
15283: NEG
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 2
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 1
15311: PUSH
15312: LD_INT 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 1
15321: NEG
15322: PUSH
15323: LD_INT 1
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 2
15332: NEG
15333: PUSH
15334: LD_INT 0
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 2
15343: NEG
15344: PUSH
15345: LD_INT 1
15347: NEG
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: LD_INT 2
15355: NEG
15356: PUSH
15357: LD_INT 2
15359: NEG
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PUSH
15365: LD_INT 1
15367: NEG
15368: PUSH
15369: LD_INT 3
15371: NEG
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: LD_INT 2
15382: NEG
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 3
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 2
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PUSH
15408: LD_INT 2
15410: NEG
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 3
15421: NEG
15422: PUSH
15423: LD_INT 1
15425: NEG
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15456: LD_ADDR_VAR 0 35
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: LD_INT 0
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: LD_INT 0
15473: PUSH
15474: LD_INT 1
15476: NEG
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: LD_INT 1
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: PUSH
15502: LD_INT 0
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 1
15514: NEG
15515: PUSH
15516: LD_INT 0
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: LD_INT 1
15529: NEG
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 2
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 2
15547: NEG
15548: PUSH
15549: LD_INT 1
15551: NEG
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15568: LD_ADDR_VAR 0 36
15572: PUSH
15573: LD_INT 0
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 0
15585: PUSH
15586: LD_INT 1
15588: NEG
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: PUSH
15594: LD_INT 1
15596: PUSH
15597: LD_INT 0
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PUSH
15604: LD_INT 1
15606: PUSH
15607: LD_INT 1
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: PUSH
15614: LD_INT 0
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: PUSH
15624: LD_INT 1
15626: NEG
15627: PUSH
15628: LD_INT 0
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: PUSH
15639: LD_INT 1
15641: NEG
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 1
15649: NEG
15650: PUSH
15651: LD_INT 2
15653: NEG
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15680: LD_ADDR_VAR 0 37
15684: PUSH
15685: LD_INT 0
15687: PUSH
15688: LD_INT 0
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 0
15697: PUSH
15698: LD_INT 1
15700: NEG
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 1
15708: PUSH
15709: LD_INT 0
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: LD_INT 1
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 0
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 1
15738: NEG
15739: PUSH
15740: LD_INT 0
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: LD_INT 1
15749: NEG
15750: PUSH
15751: LD_INT 1
15753: NEG
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: LD_INT 1
15761: PUSH
15762: LD_INT 1
15764: NEG
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 1
15772: NEG
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15792: LD_ADDR_VAR 0 38
15796: PUSH
15797: LD_INT 0
15799: PUSH
15800: LD_INT 0
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: LD_INT 0
15809: PUSH
15810: LD_INT 1
15812: NEG
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 1
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 1
15830: PUSH
15831: LD_INT 1
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: LD_INT 0
15840: PUSH
15841: LD_INT 1
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: LD_INT 0
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: LD_INT 1
15865: NEG
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: PUSH
15871: LD_INT 2
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 2
15883: NEG
15884: PUSH
15885: LD_INT 1
15887: NEG
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15904: LD_ADDR_VAR 0 39
15908: PUSH
15909: LD_INT 0
15911: PUSH
15912: LD_INT 0
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 1
15924: NEG
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: PUSH
15933: LD_INT 0
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 1
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 0
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 1
15962: NEG
15963: PUSH
15964: LD_INT 0
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 1
15973: NEG
15974: PUSH
15975: LD_INT 1
15977: NEG
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 1
15985: NEG
15986: PUSH
15987: LD_INT 2
15989: NEG
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 1
15997: PUSH
15998: LD_INT 2
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16016: LD_ADDR_VAR 0 40
16020: PUSH
16021: LD_INT 0
16023: PUSH
16024: LD_INT 0
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 0
16033: PUSH
16034: LD_INT 1
16036: NEG
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 1
16044: PUSH
16045: LD_INT 0
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 1
16054: PUSH
16055: LD_INT 1
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 0
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: LD_INT 0
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PUSH
16083: LD_INT 1
16085: NEG
16086: PUSH
16087: LD_INT 1
16089: NEG
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PUSH
16095: LD_INT 1
16097: PUSH
16098: LD_INT 1
16100: NEG
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: LD_INT 1
16108: NEG
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16128: LD_ADDR_VAR 0 41
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: LD_INT 0
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: LD_INT 1
16148: NEG
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 1
16156: PUSH
16157: LD_INT 0
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 1
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 0
16176: PUSH
16177: LD_INT 1
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: LD_INT 1
16186: NEG
16187: PUSH
16188: LD_INT 0
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: LD_INT 1
16201: NEG
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PUSH
16207: LD_INT 1
16209: NEG
16210: PUSH
16211: LD_INT 2
16213: NEG
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: PUSH
16219: LD_INT 1
16221: PUSH
16222: LD_INT 1
16224: NEG
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 2
16232: PUSH
16233: LD_INT 0
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 2
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: LD_INT 2
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: NEG
16273: PUSH
16274: LD_INT 1
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 2
16283: NEG
16284: PUSH
16285: LD_INT 0
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 2
16294: NEG
16295: PUSH
16296: LD_INT 1
16298: NEG
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 2
16306: NEG
16307: PUSH
16308: LD_INT 2
16310: NEG
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 2
16318: NEG
16319: PUSH
16320: LD_INT 3
16322: NEG
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 1
16333: NEG
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 3
16341: PUSH
16342: LD_INT 0
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 3
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 3
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 3
16371: PUSH
16372: LD_INT 3
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 3
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 2
16391: NEG
16392: PUSH
16393: LD_INT 1
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 3
16402: NEG
16403: PUSH
16404: LD_INT 0
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: LD_INT 3
16413: NEG
16414: PUSH
16415: LD_INT 1
16417: NEG
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 3
16425: NEG
16426: PUSH
16427: LD_INT 2
16429: NEG
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: PUSH
16435: LD_INT 3
16437: NEG
16438: PUSH
16439: LD_INT 3
16441: NEG
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16478: LD_ADDR_VAR 0 42
16482: PUSH
16483: LD_INT 0
16485: PUSH
16486: LD_INT 0
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: LD_INT 1
16498: NEG
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 1
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 1
16516: PUSH
16517: LD_INT 1
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 1
16536: NEG
16537: PUSH
16538: LD_INT 0
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 1
16547: NEG
16548: PUSH
16549: LD_INT 1
16551: NEG
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 1
16559: NEG
16560: PUSH
16561: LD_INT 2
16563: NEG
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: LD_INT 0
16571: PUSH
16572: LD_INT 2
16574: NEG
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: PUSH
16583: LD_INT 1
16585: NEG
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 1
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 2
16603: PUSH
16604: LD_INT 2
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: LD_INT 2
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 0
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 1
16633: NEG
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 2
16644: NEG
16645: PUSH
16646: LD_INT 1
16648: NEG
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 2
16656: NEG
16657: PUSH
16658: LD_INT 2
16660: NEG
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PUSH
16666: LD_INT 2
16668: NEG
16669: PUSH
16670: LD_INT 3
16672: NEG
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 1
16680: NEG
16681: PUSH
16682: LD_INT 3
16684: NEG
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 0
16692: PUSH
16693: LD_INT 3
16695: NEG
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 1
16703: PUSH
16704: LD_INT 2
16706: NEG
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: LD_INT 3
16714: PUSH
16715: LD_INT 2
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 3
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 2
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: LD_INT 3
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: LD_INT 1
16764: NEG
16765: PUSH
16766: LD_INT 2
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 3
16775: NEG
16776: PUSH
16777: LD_INT 2
16779: NEG
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 3
16787: NEG
16788: PUSH
16789: LD_INT 3
16791: NEG
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
16828: LD_ADDR_VAR 0 43
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: LD_INT 0
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: LD_INT 0
16845: PUSH
16846: LD_INT 1
16848: NEG
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 1
16856: PUSH
16857: LD_INT 0
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: LD_INT 1
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 1
16886: NEG
16887: PUSH
16888: LD_INT 0
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 1
16897: NEG
16898: PUSH
16899: LD_INT 1
16901: NEG
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: PUSH
16907: LD_INT 1
16909: NEG
16910: PUSH
16911: LD_INT 2
16913: NEG
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 0
16921: PUSH
16922: LD_INT 2
16924: NEG
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: LD_INT 1
16932: PUSH
16933: LD_INT 1
16935: NEG
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 2
16943: PUSH
16944: LD_INT 0
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: LD_INT 1
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: LD_INT 1
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: EMPTY
16968: LIST
16969: LIST
16970: PUSH
16971: LD_INT 0
16973: PUSH
16974: LD_INT 2
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: NEG
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 2
16994: NEG
16995: PUSH
16996: LD_INT 0
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 2
17005: NEG
17006: PUSH
17007: LD_INT 1
17009: NEG
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 1
17017: NEG
17018: PUSH
17019: LD_INT 3
17021: NEG
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 0
17029: PUSH
17030: LD_INT 3
17032: NEG
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 1
17040: PUSH
17041: LD_INT 2
17043: NEG
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: LD_INT 1
17054: NEG
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 3
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: LD_INT 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 1
17082: PUSH
17083: LD_INT 3
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 0
17092: PUSH
17093: LD_INT 3
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 1
17102: NEG
17103: PUSH
17104: LD_INT 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 2
17113: NEG
17114: PUSH
17115: LD_INT 1
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 3
17124: NEG
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 3
17135: NEG
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17176: LD_ADDR_VAR 0 44
17180: PUSH
17181: LD_INT 0
17183: PUSH
17184: LD_INT 0
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 0
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: LD_INT 0
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 0
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 1
17234: NEG
17235: PUSH
17236: LD_INT 0
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 1
17245: NEG
17246: PUSH
17247: LD_INT 1
17249: NEG
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: LD_INT 1
17257: NEG
17258: PUSH
17259: LD_INT 2
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 1
17269: PUSH
17270: LD_INT 1
17272: NEG
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 2
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: LD_INT 2
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 1
17320: NEG
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 2
17331: NEG
17332: PUSH
17333: LD_INT 0
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 2
17342: NEG
17343: PUSH
17344: LD_INT 1
17346: NEG
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 2
17354: NEG
17355: PUSH
17356: LD_INT 2
17358: NEG
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 2
17366: NEG
17367: PUSH
17368: LD_INT 3
17370: NEG
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 1
17381: NEG
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 3
17399: PUSH
17400: LD_INT 1
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 3
17409: PUSH
17410: LD_INT 2
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: LD_INT 3
17419: PUSH
17420: LD_INT 3
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PUSH
17437: LD_INT 2
17439: NEG
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 3
17450: NEG
17451: PUSH
17452: LD_INT 0
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 3
17461: NEG
17462: PUSH
17463: LD_INT 1
17465: NEG
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: LD_INT 3
17473: NEG
17474: PUSH
17475: LD_INT 2
17477: NEG
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: LD_INT 3
17485: NEG
17486: PUSH
17487: LD_INT 3
17489: NEG
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17526: LD_ADDR_VAR 0 45
17530: PUSH
17531: LD_INT 0
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: LD_INT 1
17546: NEG
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 1
17564: PUSH
17565: LD_INT 1
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: LD_INT 1
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 1
17584: NEG
17585: PUSH
17586: LD_INT 0
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: LD_INT 1
17599: NEG
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 1
17607: NEG
17608: PUSH
17609: LD_INT 2
17611: NEG
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: LD_INT 0
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 2
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: LD_INT 2
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: PUSH
17659: LD_INT 1
17661: PUSH
17662: LD_INT 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 1
17681: NEG
17682: PUSH
17683: LD_INT 1
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 2
17692: NEG
17693: PUSH
17694: LD_INT 1
17696: NEG
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 2
17704: NEG
17705: PUSH
17706: LD_INT 2
17708: NEG
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: LD_INT 2
17716: NEG
17717: PUSH
17718: LD_INT 3
17720: NEG
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: NEG
17729: PUSH
17730: LD_INT 3
17732: NEG
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 0
17740: PUSH
17741: LD_INT 3
17743: NEG
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 1
17751: PUSH
17752: LD_INT 2
17754: NEG
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: LD_INT 3
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: LD_INT 2
17782: PUSH
17783: LD_INT 3
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 1
17792: PUSH
17793: LD_INT 3
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 0
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: NEG
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: LD_INT 3
17823: NEG
17824: PUSH
17825: LD_INT 2
17827: NEG
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 3
17835: NEG
17836: PUSH
17837: LD_INT 3
17839: NEG
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17876: LD_ADDR_VAR 0 46
17880: PUSH
17881: LD_INT 0
17883: PUSH
17884: LD_INT 0
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: LD_INT 0
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: LD_INT 1
17914: PUSH
17915: LD_INT 1
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: PUSH
17922: LD_INT 0
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 1
17934: NEG
17935: PUSH
17936: LD_INT 0
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 1
17945: NEG
17946: PUSH
17947: LD_INT 1
17949: NEG
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 1
17957: NEG
17958: PUSH
17959: LD_INT 2
17961: NEG
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 0
17969: PUSH
17970: LD_INT 2
17972: NEG
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 1
17980: PUSH
17981: LD_INT 1
17983: NEG
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 0
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: LD_INT 2
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 0
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 1
18031: NEG
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: LD_INT 0
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 2
18053: NEG
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: NEG
18066: PUSH
18067: LD_INT 3
18069: NEG
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 0
18077: PUSH
18078: LD_INT 3
18080: NEG
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: LD_INT 2
18091: NEG
18092: PUSH
18093: EMPTY
18094: LIST
18095: LIST
18096: PUSH
18097: LD_INT 2
18099: PUSH
18100: LD_INT 1
18102: NEG
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: LD_INT 3
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 3
18120: PUSH
18121: LD_INT 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: LD_INT 3
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: LD_INT 3
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: NEG
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 2
18161: NEG
18162: PUSH
18163: LD_INT 1
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 3
18172: NEG
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: EMPTY
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 3
18183: NEG
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18224: LD_ADDR_VAR 0 47
18228: PUSH
18229: LD_INT 0
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 0
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: LD_INT 0
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: PUSH
18263: LD_INT 1
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 0
18272: PUSH
18273: LD_INT 1
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 1
18282: NEG
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 1
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: LD_INT 2
18309: NEG
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 0
18317: PUSH
18318: LD_INT 2
18320: NEG
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: LD_INT 1
18331: NEG
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 2
18339: NEG
18340: PUSH
18341: LD_INT 1
18343: NEG
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: LD_INT 2
18355: NEG
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18375: LD_ADDR_VAR 0 48
18379: PUSH
18380: LD_INT 0
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 0
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: LD_INT 0
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 1
18413: PUSH
18414: LD_INT 1
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 0
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: PUSH
18446: LD_INT 1
18448: NEG
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: LD_INT 2
18460: NEG
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: LD_INT 2
18471: NEG
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: LD_INT 1
18482: NEG
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 2
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 2
18500: PUSH
18501: LD_INT 1
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18522: LD_ADDR_VAR 0 49
18526: PUSH
18527: LD_INT 0
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: LD_INT 0
18539: PUSH
18540: LD_INT 1
18542: NEG
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: LD_INT 1
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 0
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: NEG
18581: PUSH
18582: LD_INT 0
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 1
18591: NEG
18592: PUSH
18593: LD_INT 1
18595: NEG
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: PUSH
18604: LD_INT 1
18606: NEG
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 2
18624: PUSH
18625: LD_INT 1
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: LD_INT 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 1
18644: PUSH
18645: LD_INT 2
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18666: LD_ADDR_VAR 0 50
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 2
18747: PUSH
18748: LD_INT 1
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: LD_INT 2
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 1
18787: NEG
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
18810: LD_ADDR_VAR 0 51
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 1
18830: NEG
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 1
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: NEG
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 1
18879: NEG
18880: PUSH
18881: LD_INT 1
18883: NEG
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 1
18891: PUSH
18892: LD_INT 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: LD_INT 1
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: LD_INT 2
18922: NEG
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 2
18933: NEG
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18957: LD_ADDR_VAR 0 52
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: NEG
19039: PUSH
19040: LD_INT 2
19042: NEG
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 1
19050: NEG
19051: PUSH
19052: LD_INT 1
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: NEG
19062: PUSH
19063: LD_INT 0
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 2
19072: NEG
19073: PUSH
19074: LD_INT 1
19076: NEG
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: NEG
19085: PUSH
19086: LD_INT 2
19088: NEG
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19108: LD_ADDR_VAR 0 53
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 0
19125: PUSH
19126: LD_INT 1
19128: NEG
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: LD_INT 1
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PUSH
19154: LD_INT 0
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 1
19166: NEG
19167: PUSH
19168: LD_INT 0
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 1
19177: NEG
19178: PUSH
19179: LD_INT 1
19181: NEG
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 2
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: LD_INT 2
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: PUSH
19213: LD_INT 1
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: LD_INT 0
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 1
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 0
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: NEG
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 2
19284: NEG
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 2
19295: NEG
19296: PUSH
19297: LD_INT 1
19299: NEG
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 2
19307: NEG
19308: PUSH
19309: LD_INT 2
19311: NEG
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19338: LD_ADDR_VAR 0 54
19342: PUSH
19343: LD_INT 0
19345: PUSH
19346: LD_INT 0
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 0
19355: PUSH
19356: LD_INT 1
19358: NEG
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: LD_INT 0
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: LD_INT 1
19376: PUSH
19377: LD_INT 1
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 0
19386: PUSH
19387: LD_INT 1
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 1
19407: NEG
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: LD_INT 2
19423: NEG
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: LD_INT 2
19434: NEG
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: LD_INT 1
19445: NEG
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 2
19453: PUSH
19454: LD_INT 0
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 1
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: LD_INT 2
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: NEG
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: LD_INT 0
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 2
19525: NEG
19526: PUSH
19527: LD_INT 1
19529: NEG
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: NEG
19538: PUSH
19539: LD_INT 2
19541: NEG
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19568: LD_ADDR_VAR 0 55
19572: PUSH
19573: LD_INT 0
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 0
19585: PUSH
19586: LD_INT 1
19588: NEG
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 1
19596: PUSH
19597: LD_INT 0
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 1
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PUSH
19614: LD_INT 0
19616: PUSH
19617: LD_INT 1
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 1
19626: NEG
19627: PUSH
19628: LD_INT 0
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 1
19637: NEG
19638: PUSH
19639: LD_INT 1
19641: NEG
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: LD_INT 2
19653: NEG
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 0
19661: PUSH
19662: LD_INT 2
19664: NEG
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 1
19672: PUSH
19673: LD_INT 1
19675: NEG
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 2
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 2
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 2
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 1
19713: PUSH
19714: LD_INT 2
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: LD_INT 2
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: LD_INT 1
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: LD_INT 0
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 2
19755: NEG
19756: PUSH
19757: LD_INT 1
19759: NEG
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: PUSH
19765: LD_INT 2
19767: NEG
19768: PUSH
19769: LD_INT 2
19771: NEG
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19798: LD_ADDR_VAR 0 56
19802: PUSH
19803: LD_INT 0
19805: PUSH
19806: LD_INT 0
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 0
19815: PUSH
19816: LD_INT 1
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 1
19826: PUSH
19827: LD_INT 0
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 1
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: LD_INT 1
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 1
19856: NEG
19857: PUSH
19858: LD_INT 0
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: NEG
19868: PUSH
19869: LD_INT 1
19871: NEG
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: LD_INT 2
19883: NEG
19884: PUSH
19885: EMPTY
19886: LIST
19887: LIST
19888: PUSH
19889: LD_INT 0
19891: PUSH
19892: LD_INT 2
19894: NEG
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 1
19905: NEG
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 2
19913: PUSH
19914: LD_INT 0
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 2
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 2
19933: PUSH
19934: LD_INT 2
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 1
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: LD_INT 1
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: LD_INT 0
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 2
19985: NEG
19986: PUSH
19987: LD_INT 1
19989: NEG
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: NEG
19998: PUSH
19999: LD_INT 2
20001: NEG
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20028: LD_ADDR_VAR 0 57
20032: PUSH
20033: LD_INT 0
20035: PUSH
20036: LD_INT 0
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 1
20048: NEG
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: PUSH
20054: LD_INT 1
20056: PUSH
20057: LD_INT 0
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 1
20066: PUSH
20067: LD_INT 1
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 0
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: NEG
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 1
20097: NEG
20098: PUSH
20099: LD_INT 1
20101: NEG
20102: PUSH
20103: EMPTY
20104: LIST
20105: LIST
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: LD_INT 2
20113: NEG
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 0
20121: PUSH
20122: LD_INT 2
20124: NEG
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: LD_INT 1
20135: NEG
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: LD_INT 0
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 2
20153: PUSH
20154: LD_INT 1
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 2
20163: PUSH
20164: LD_INT 2
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 2
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: LD_INT 1
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: LD_INT 0
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 2
20215: NEG
20216: PUSH
20217: LD_INT 1
20219: NEG
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: NEG
20228: PUSH
20229: LD_INT 2
20231: NEG
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20258: LD_ADDR_VAR 0 58
20262: PUSH
20263: LD_INT 0
20265: PUSH
20266: LD_INT 0
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 0
20275: PUSH
20276: LD_INT 1
20278: NEG
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 1
20286: PUSH
20287: LD_INT 0
20289: PUSH
20290: EMPTY
20291: LIST
20292: LIST
20293: PUSH
20294: LD_INT 1
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 0
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 1
20316: NEG
20317: PUSH
20318: LD_INT 0
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: LD_INT 1
20327: NEG
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: LD_INT 2
20343: NEG
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 0
20351: PUSH
20352: LD_INT 2
20354: NEG
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: PUSH
20360: LD_INT 1
20362: PUSH
20363: LD_INT 1
20365: NEG
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: LD_INT 0
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 2
20383: PUSH
20384: LD_INT 1
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 2
20393: PUSH
20394: LD_INT 2
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 1
20403: PUSH
20404: LD_INT 2
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: LD_INT 2
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 2
20445: NEG
20446: PUSH
20447: LD_INT 1
20449: NEG
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: NEG
20458: PUSH
20459: LD_INT 2
20461: NEG
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20488: LD_ADDR_VAR 0 59
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: LD_INT 1
20508: NEG
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: LD_INT 0
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 1
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: PUSH
20544: LD_INT 1
20546: NEG
20547: PUSH
20548: LD_INT 0
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: LD_INT 1
20557: NEG
20558: PUSH
20559: LD_INT 1
20561: NEG
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20576: LD_ADDR_VAR 0 60
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PUSH
20602: LD_INT 1
20604: PUSH
20605: LD_INT 0
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: LD_INT 1
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 1
20634: NEG
20635: PUSH
20636: LD_INT 0
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20664: LD_ADDR_VAR 0 61
20668: PUSH
20669: LD_INT 0
20671: PUSH
20672: LD_INT 0
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 1
20684: NEG
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: LD_INT 1
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 1
20737: NEG
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20752: LD_ADDR_VAR 0 62
20756: PUSH
20757: LD_INT 0
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 1
20772: NEG
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: LD_INT 0
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: NEG
20822: PUSH
20823: LD_INT 1
20825: NEG
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: LIST
20838: LIST
20839: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20840: LD_ADDR_VAR 0 63
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 0
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 1
20898: NEG
20899: PUSH
20900: LD_INT 0
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: NEG
20910: PUSH
20911: LD_INT 1
20913: NEG
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20928: LD_ADDR_VAR 0 64
20932: PUSH
20933: LD_INT 0
20935: PUSH
20936: LD_INT 0
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PUSH
20943: LD_INT 0
20945: PUSH
20946: LD_INT 1
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 0
20976: PUSH
20977: LD_INT 1
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: LD_INT 0
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: NEG
20998: PUSH
20999: LD_INT 1
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: ST_TO_ADDR
// end ; 1 :
21016: GO 26913
21018: LD_INT 1
21020: DOUBLE
21021: EQUAL
21022: IFTRUE 21026
21024: GO 23649
21026: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21027: LD_ADDR_VAR 0 11
21031: PUSH
21032: LD_INT 1
21034: NEG
21035: PUSH
21036: LD_INT 3
21038: NEG
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 0
21046: PUSH
21047: LD_INT 3
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: LD_INT 2
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21071: LD_ADDR_VAR 0 12
21075: PUSH
21076: LD_INT 2
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 3
21089: PUSH
21090: LD_INT 0
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21112: LD_ADDR_VAR 0 13
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 2
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 3
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: LD_INT 3
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: LIST
21151: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21152: LD_ADDR_VAR 0 14
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 3
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 0
21169: PUSH
21170: LD_INT 3
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: NEG
21180: PUSH
21181: LD_INT 2
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21193: LD_ADDR_VAR 0 15
21197: PUSH
21198: LD_INT 2
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 3
21211: NEG
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 3
21222: NEG
21223: PUSH
21224: LD_INT 1
21226: NEG
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21237: LD_ADDR_VAR 0 16
21241: PUSH
21242: LD_INT 2
21244: NEG
21245: PUSH
21246: LD_INT 3
21248: NEG
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 3
21256: NEG
21257: PUSH
21258: LD_INT 2
21260: NEG
21261: PUSH
21262: EMPTY
21263: LIST
21264: LIST
21265: PUSH
21266: LD_INT 3
21268: NEG
21269: PUSH
21270: LD_INT 3
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21283: LD_ADDR_VAR 0 17
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: LD_INT 3
21294: NEG
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 3
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 2
21316: NEG
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21327: LD_ADDR_VAR 0 18
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: LD_INT 0
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 3
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21368: LD_ADDR_VAR 0 19
21372: PUSH
21373: LD_INT 3
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 3
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 3
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: LIST
21407: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21408: LD_ADDR_VAR 0 20
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: LD_INT 3
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: LD_INT 3
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: NEG
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: LIST
21448: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21449: LD_ADDR_VAR 0 21
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 1
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: LD_INT 0
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 3
21478: NEG
21479: PUSH
21480: LD_INT 1
21482: NEG
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21493: LD_ADDR_VAR 0 22
21497: PUSH
21498: LD_INT 2
21500: NEG
21501: PUSH
21502: LD_INT 3
21504: NEG
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 3
21512: NEG
21513: PUSH
21514: LD_INT 2
21516: NEG
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 3
21524: NEG
21525: PUSH
21526: LD_INT 3
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21539: LD_ADDR_VAR 0 23
21543: PUSH
21544: LD_INT 0
21546: PUSH
21547: LD_INT 3
21549: NEG
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 1
21557: NEG
21558: PUSH
21559: LD_INT 4
21561: NEG
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 1
21569: PUSH
21570: LD_INT 3
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21583: LD_ADDR_VAR 0 24
21587: PUSH
21588: LD_INT 3
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 1
21603: NEG
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PUSH
21609: LD_INT 4
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21624: LD_ADDR_VAR 0 25
21628: PUSH
21629: LD_INT 3
21631: PUSH
21632: LD_INT 3
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 4
21641: PUSH
21642: LD_INT 3
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 3
21651: PUSH
21652: LD_INT 4
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: LIST
21663: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21664: LD_ADDR_VAR 0 26
21668: PUSH
21669: LD_INT 0
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: LD_INT 4
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 3
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21705: LD_ADDR_VAR 0 27
21709: PUSH
21710: LD_INT 3
21712: NEG
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 3
21723: NEG
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 4
21734: NEG
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: LIST
21748: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
21749: LD_ADDR_VAR 0 28
21753: PUSH
21754: LD_INT 3
21756: NEG
21757: PUSH
21758: LD_INT 3
21760: NEG
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 3
21768: NEG
21769: PUSH
21770: LD_INT 4
21772: NEG
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 4
21780: NEG
21781: PUSH
21782: LD_INT 3
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: LIST
21794: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
21795: LD_ADDR_VAR 0 29
21799: PUSH
21800: LD_INT 1
21802: NEG
21803: PUSH
21804: LD_INT 3
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 0
21814: PUSH
21815: LD_INT 3
21817: NEG
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: LD_INT 2
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: NEG
21837: PUSH
21838: LD_INT 4
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 4
21851: NEG
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: LD_INT 3
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 1
21870: NEG
21871: PUSH
21872: LD_INT 5
21874: NEG
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 5
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 4
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 6
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 0
21916: PUSH
21917: LD_INT 6
21919: NEG
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: LD_INT 5
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
21950: LD_ADDR_VAR 0 30
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 3
21988: PUSH
21989: LD_INT 1
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 4
21999: PUSH
22000: LD_INT 0
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 4
22009: PUSH
22010: LD_INT 1
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 4
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 5
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 5
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 5
22050: PUSH
22051: LD_INT 1
22053: NEG
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 6
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 6
22071: PUSH
22072: LD_INT 1
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22093: LD_ADDR_VAR 0 31
22097: PUSH
22098: LD_INT 3
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: LD_INT 3
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 4
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 4
22140: PUSH
22141: LD_INT 4
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: LD_INT 4
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 5
22160: PUSH
22161: LD_INT 4
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 5
22170: PUSH
22171: LD_INT 5
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 4
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 6
22190: PUSH
22191: LD_INT 5
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 6
22200: PUSH
22201: LD_INT 6
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 5
22210: PUSH
22211: LD_INT 6
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22232: LD_ADDR_VAR 0 32
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: LD_INT 3
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 0
22249: PUSH
22250: LD_INT 3
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 1
22259: NEG
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: LD_INT 4
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: LD_INT 4
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: LD_INT 5
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 0
22311: PUSH
22312: LD_INT 5
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 1
22321: NEG
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: LD_INT 6
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 6
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 1
22352: NEG
22353: PUSH
22354: LD_INT 5
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22375: LD_ADDR_VAR 0 33
22379: PUSH
22380: LD_INT 2
22382: NEG
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 3
22393: NEG
22394: PUSH
22395: LD_INT 0
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: NEG
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: NEG
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 4
22427: NEG
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 4
22438: NEG
22439: PUSH
22440: LD_INT 1
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 4
22450: NEG
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 5
22461: NEG
22462: PUSH
22463: LD_INT 0
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 5
22472: NEG
22473: PUSH
22474: LD_INT 1
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 5
22484: NEG
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 6
22495: NEG
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 6
22506: NEG
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22530: LD_ADDR_VAR 0 34
22534: PUSH
22535: LD_INT 2
22537: NEG
22538: PUSH
22539: LD_INT 3
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 3
22549: NEG
22550: PUSH
22551: LD_INT 2
22553: NEG
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 3
22561: NEG
22562: PUSH
22563: LD_INT 3
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 3
22573: NEG
22574: PUSH
22575: LD_INT 4
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 4
22585: NEG
22586: PUSH
22587: LD_INT 3
22589: NEG
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 4
22597: NEG
22598: PUSH
22599: LD_INT 4
22601: NEG
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 4
22609: NEG
22610: PUSH
22611: LD_INT 5
22613: NEG
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 5
22621: NEG
22622: PUSH
22623: LD_INT 4
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 5
22633: NEG
22634: PUSH
22635: LD_INT 5
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 5
22645: NEG
22646: PUSH
22647: LD_INT 6
22649: NEG
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 6
22657: NEG
22658: PUSH
22659: LD_INT 5
22661: NEG
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 6
22669: NEG
22670: PUSH
22671: LD_INT 6
22673: NEG
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22693: LD_ADDR_VAR 0 41
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: LD_INT 3
22715: NEG
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 1
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
22737: LD_ADDR_VAR 0 42
22741: PUSH
22742: LD_INT 2
22744: PUSH
22745: LD_INT 0
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: PUSH
22755: LD_INT 1
22757: NEG
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 1
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: LIST
22777: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
22778: LD_ADDR_VAR 0 43
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 3
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: PUSH
22806: LD_INT 3
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
22818: LD_ADDR_VAR 0 44
22822: PUSH
22823: LD_INT 0
22825: PUSH
22826: LD_INT 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 1
22835: PUSH
22836: LD_INT 3
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22859: LD_ADDR_VAR 0 45
22863: PUSH
22864: LD_INT 2
22866: NEG
22867: PUSH
22868: LD_INT 0
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 3
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: LIST
22902: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
22903: LD_ADDR_VAR 0 46
22907: PUSH
22908: LD_INT 2
22910: NEG
22911: PUSH
22912: LD_INT 2
22914: NEG
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: NEG
22923: PUSH
22924: LD_INT 3
22926: NEG
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 3
22934: NEG
22935: PUSH
22936: LD_INT 2
22938: NEG
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
22949: LD_ADDR_VAR 0 47
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: LD_INT 3
22960: NEG
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 1
22968: NEG
22969: PUSH
22970: LD_INT 3
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
22982: LD_ADDR_VAR 0 48
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: LD_INT 2
22992: NEG
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23013: LD_ADDR_VAR 0 49
23017: PUSH
23018: LD_INT 3
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: LD_INT 2
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23042: LD_ADDR_VAR 0 50
23046: PUSH
23047: LD_INT 2
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: LD_INT 3
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23071: LD_ADDR_VAR 0 51
23075: PUSH
23076: LD_INT 1
23078: NEG
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: LD_INT 1
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23102: LD_ADDR_VAR 0 52
23106: PUSH
23107: LD_INT 3
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 3
23121: NEG
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23135: LD_ADDR_VAR 0 53
23139: PUSH
23140: LD_INT 1
23142: NEG
23143: PUSH
23144: LD_INT 3
23146: NEG
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: LD_INT 3
23157: NEG
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23179: LD_ADDR_VAR 0 54
23183: PUSH
23184: LD_INT 2
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 3
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 3
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23220: LD_ADDR_VAR 0 55
23224: PUSH
23225: LD_INT 3
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 3
23237: PUSH
23238: LD_INT 3
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 3
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23260: LD_ADDR_VAR 0 56
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: LIST
23300: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23301: LD_ADDR_VAR 0 57
23305: PUSH
23306: LD_INT 2
23308: NEG
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 3
23319: NEG
23320: PUSH
23321: LD_INT 0
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PUSH
23328: LD_INT 3
23330: NEG
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23345: LD_ADDR_VAR 0 58
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: LD_INT 3
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 3
23364: NEG
23365: PUSH
23366: LD_INT 2
23368: NEG
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 3
23376: NEG
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23391: LD_ADDR_VAR 0 59
23395: PUSH
23396: LD_INT 1
23398: NEG
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: LD_INT 2
23413: NEG
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 1
23424: NEG
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23435: LD_ADDR_VAR 0 60
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: LD_INT 1
23445: NEG
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 2
23463: PUSH
23464: LD_INT 1
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23476: LD_ADDR_VAR 0 61
23480: PUSH
23481: LD_INT 2
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: LIST
23515: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23516: LD_ADDR_VAR 0 62
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23557: LD_ADDR_VAR 0 63
23561: PUSH
23562: LD_INT 1
23564: NEG
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: NEG
23576: PUSH
23577: LD_INT 0
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 2
23586: NEG
23587: PUSH
23588: LD_INT 1
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23601: LD_ADDR_VAR 0 64
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: LD_INT 2
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: NEG
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 2
23632: NEG
23633: PUSH
23634: LD_INT 2
23636: NEG
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: LIST
23646: ST_TO_ADDR
// end ; 2 :
23647: GO 26913
23649: LD_INT 2
23651: DOUBLE
23652: EQUAL
23653: IFTRUE 23657
23655: GO 26912
23657: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23658: LD_ADDR_VAR 0 29
23662: PUSH
23663: LD_INT 4
23665: PUSH
23666: LD_INT 0
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 4
23675: PUSH
23676: LD_INT 1
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 5
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 5
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 4
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 3
23716: PUSH
23717: LD_INT 0
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 3
23726: PUSH
23727: LD_INT 1
23729: NEG
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 3
23737: PUSH
23738: LD_INT 2
23740: NEG
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 5
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 4
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 4
23788: PUSH
23789: LD_INT 4
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 3
23798: PUSH
23799: LD_INT 4
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 3
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: LD_INT 4
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 4
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 4
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 5
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 5
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: LD_INT 4
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: LD_INT 3
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 5
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: NEG
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 3
23941: NEG
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 3
23952: NEG
23953: PUSH
23954: LD_INT 1
23956: NEG
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: NEG
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 1
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: LD_INT 3
23986: NEG
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 4
23997: NEG
23998: PUSH
23999: LD_INT 0
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 4
24008: NEG
24009: PUSH
24010: LD_INT 1
24012: NEG
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 4
24020: NEG
24021: PUSH
24022: LD_INT 2
24024: NEG
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: NEG
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 4
24043: NEG
24044: PUSH
24045: LD_INT 4
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 4
24055: NEG
24056: PUSH
24057: LD_INT 5
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 3
24067: NEG
24068: PUSH
24069: LD_INT 4
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 3
24079: NEG
24080: PUSH
24081: LD_INT 3
24083: NEG
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 4
24091: NEG
24092: PUSH
24093: LD_INT 3
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 5
24103: NEG
24104: PUSH
24105: LD_INT 4
24107: NEG
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 5
24115: NEG
24116: PUSH
24117: LD_INT 5
24119: NEG
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 3
24127: NEG
24128: PUSH
24129: LD_INT 5
24131: NEG
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 5
24139: NEG
24140: PUSH
24141: LD_INT 3
24143: NEG
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24196: LD_ADDR_VAR 0 30
24200: PUSH
24201: LD_INT 4
24203: PUSH
24204: LD_INT 4
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: PUSH
24211: LD_INT 4
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 5
24223: PUSH
24224: LD_INT 4
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 5
24233: PUSH
24234: LD_INT 5
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 4
24243: PUSH
24244: LD_INT 5
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 3
24253: PUSH
24254: LD_INT 4
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: PUSH
24271: LD_INT 5
24273: PUSH
24274: LD_INT 3
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 5
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 0
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 0
24303: PUSH
24304: LD_INT 2
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: LD_INT 3
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 4
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: LD_INT 4
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: NEG
24344: PUSH
24345: LD_INT 3
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: NEG
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: LD_INT 4
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 4
24386: NEG
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 4
24397: NEG
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: NEG
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 3
24420: NEG
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 4
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 5
24442: NEG
24443: PUSH
24444: LD_INT 0
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: LD_INT 5
24453: NEG
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 5
24465: NEG
24466: PUSH
24467: LD_INT 2
24469: NEG
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 3
24477: NEG
24478: PUSH
24479: LD_INT 2
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 3
24488: NEG
24489: PUSH
24490: LD_INT 3
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 3
24500: NEG
24501: PUSH
24502: LD_INT 4
24504: NEG
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: LD_INT 2
24512: NEG
24513: PUSH
24514: LD_INT 3
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 2
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 3
24536: NEG
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 4
24548: NEG
24549: PUSH
24550: LD_INT 3
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 4
24560: NEG
24561: PUSH
24562: LD_INT 4
24564: NEG
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: PUSH
24570: LD_INT 2
24572: NEG
24573: PUSH
24574: LD_INT 4
24576: NEG
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 4
24584: NEG
24585: PUSH
24586: LD_INT 2
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 0
24596: PUSH
24597: LD_INT 4
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 5
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: LD_INT 4
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: LD_INT 3
24632: NEG
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 3
24643: NEG
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: LD_INT 4
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 5
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 3
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 2
24686: NEG
24687: PUSH
24688: LD_INT 5
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
24743: LD_ADDR_VAR 0 31
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 4
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: LD_INT 3
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 4
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 5
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: LD_INT 5
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 4
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 1
24811: NEG
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 5
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 2
24832: NEG
24833: PUSH
24834: LD_INT 3
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 3
24843: NEG
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 3
24854: NEG
24855: PUSH
24856: LD_INT 1
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 2
24866: NEG
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 2
24877: NEG
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 3
24888: NEG
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 4
24899: NEG
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 4
24910: NEG
24911: PUSH
24912: LD_INT 1
24914: NEG
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 4
24922: NEG
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 2
24934: NEG
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 4
24945: NEG
24946: PUSH
24947: LD_INT 4
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 4
24957: NEG
24958: PUSH
24959: LD_INT 5
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 3
24969: NEG
24970: PUSH
24971: LD_INT 4
24973: NEG
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: NEG
24982: PUSH
24983: LD_INT 3
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 4
24993: NEG
24994: PUSH
24995: LD_INT 3
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 5
25005: NEG
25006: PUSH
25007: LD_INT 4
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 5
25017: NEG
25018: PUSH
25019: LD_INT 5
25021: NEG
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 3
25029: NEG
25030: PUSH
25031: LD_INT 5
25033: NEG
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 5
25041: NEG
25042: PUSH
25043: LD_INT 3
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: LD_INT 3
25056: NEG
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 0
25064: PUSH
25065: LD_INT 4
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 3
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: PUSH
25087: LD_INT 2
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: LD_INT 2
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 3
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 1
25120: NEG
25121: PUSH
25122: LD_INT 4
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 2
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: NEG
25144: PUSH
25145: LD_INT 4
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 4
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 4
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 5
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 5
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 4
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 3
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 3
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 5
25238: PUSH
25239: LD_INT 2
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25293: LD_ADDR_VAR 0 32
25297: PUSH
25298: LD_INT 4
25300: NEG
25301: PUSH
25302: LD_INT 0
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 4
25311: NEG
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 3
25323: NEG
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 3
25334: NEG
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 4
25345: NEG
25346: PUSH
25347: LD_INT 1
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 5
25356: NEG
25357: PUSH
25358: LD_INT 0
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 5
25367: NEG
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 5
25379: NEG
25380: PUSH
25381: LD_INT 2
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 3
25391: NEG
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 3
25414: NEG
25415: PUSH
25416: LD_INT 4
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: LD_INT 3
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: NEG
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 3
25450: NEG
25451: PUSH
25452: LD_INT 2
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 4
25462: NEG
25463: PUSH
25464: LD_INT 3
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 4
25474: NEG
25475: PUSH
25476: LD_INT 4
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 4
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 4
25498: NEG
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 0
25510: PUSH
25511: LD_INT 4
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 0
25521: PUSH
25522: LD_INT 5
25524: NEG
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 4
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 3
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 3
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: LD_INT 4
25569: NEG
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: LD_INT 5
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 3
25592: NEG
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 2
25600: NEG
25601: PUSH
25602: LD_INT 5
25604: NEG
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 3
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 4
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 4
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 3
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 0
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 4
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 4
25705: PUSH
25706: LD_INT 4
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 4
25715: PUSH
25716: LD_INT 3
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 5
25725: PUSH
25726: LD_INT 4
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 5
25735: PUSH
25736: LD_INT 5
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 4
25745: PUSH
25746: LD_INT 5
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 3
25755: PUSH
25756: LD_INT 4
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 3
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 5
25775: PUSH
25776: LD_INT 3
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: LD_INT 5
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
25840: LD_ADDR_VAR 0 33
25844: PUSH
25845: LD_INT 4
25847: NEG
25848: PUSH
25849: LD_INT 4
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 4
25859: NEG
25860: PUSH
25861: LD_INT 5
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 3
25871: NEG
25872: PUSH
25873: LD_INT 4
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 3
25883: NEG
25884: PUSH
25885: LD_INT 3
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 4
25895: NEG
25896: PUSH
25897: LD_INT 3
25899: NEG
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 5
25907: NEG
25908: PUSH
25909: LD_INT 4
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 5
25919: NEG
25920: PUSH
25921: LD_INT 5
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 3
25931: NEG
25932: PUSH
25933: LD_INT 5
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 5
25943: NEG
25944: PUSH
25945: LD_INT 3
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 3
25958: NEG
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 0
25966: PUSH
25967: LD_INT 4
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 3
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 2
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 1
26010: NEG
26011: PUSH
26012: LD_INT 3
26014: NEG
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 4
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: LD_INT 2
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 2
26045: NEG
26046: PUSH
26047: LD_INT 4
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 4
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 5
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 5
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 4
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 3
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: LD_INT 1
26121: NEG
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 3
26129: PUSH
26130: LD_INT 2
26132: NEG
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 5
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 3
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 4
26170: PUSH
26171: LD_INT 3
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 4
26180: PUSH
26181: LD_INT 4
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 3
26190: PUSH
26191: LD_INT 4
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 4
26220: PUSH
26221: LD_INT 2
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: LD_INT 4
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: LD_INT 4
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 0
26250: PUSH
26251: LD_INT 3
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 4
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: LD_INT 5
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 5
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 4
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 3
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 5
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: LD_INT 3
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26378: LD_ADDR_VAR 0 34
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 4
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 0
26396: PUSH
26397: LD_INT 5
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: PUSH
26408: LD_INT 4
26410: NEG
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: LD_INT 3
26421: NEG
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 3
26432: NEG
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: NEG
26441: PUSH
26442: LD_INT 4
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 1
26452: NEG
26453: PUSH
26454: LD_INT 5
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 3
26467: NEG
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: NEG
26476: PUSH
26477: LD_INT 5
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 3
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 3
26497: PUSH
26498: LD_INT 1
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 4
26508: PUSH
26509: LD_INT 0
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: PUSH
26516: LD_INT 4
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 3
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: PUSH
26549: LD_INT 1
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 2
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 4
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 4
26580: PUSH
26581: LD_INT 4
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 4
26590: PUSH
26591: LD_INT 3
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 5
26600: PUSH
26601: LD_INT 4
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 5
26610: PUSH
26611: LD_INT 5
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 4
26620: PUSH
26621: LD_INT 5
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: LD_INT 4
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 5
26650: PUSH
26651: LD_INT 3
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 3
26660: PUSH
26661: LD_INT 5
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 3
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 4
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 4
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 3
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 2
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: LD_INT 4
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 2
26752: NEG
26753: PUSH
26754: LD_INT 2
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 4
26763: NEG
26764: PUSH
26765: LD_INT 0
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 4
26774: NEG
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 3
26786: NEG
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 3
26797: NEG
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 4
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 5
26819: NEG
26820: PUSH
26821: LD_INT 0
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 5
26830: NEG
26831: PUSH
26832: LD_INT 1
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 5
26842: NEG
26843: PUSH
26844: LD_INT 2
26846: NEG
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 3
26854: NEG
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: ST_TO_ADDR
// end ; end ;
26910: GO 26913
26912: POP
// case btype of b_depot , b_warehouse :
26913: LD_VAR 0 1
26917: PUSH
26918: LD_INT 0
26920: DOUBLE
26921: EQUAL
26922: IFTRUE 26932
26924: LD_INT 1
26926: DOUBLE
26927: EQUAL
26928: IFTRUE 26932
26930: GO 27133
26932: POP
// case nation of nation_american :
26933: LD_VAR 0 5
26937: PUSH
26938: LD_INT 1
26940: DOUBLE
26941: EQUAL
26942: IFTRUE 26946
26944: GO 27002
26946: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
26947: LD_ADDR_VAR 0 9
26951: PUSH
26952: LD_VAR 0 11
26956: PUSH
26957: LD_VAR 0 12
26961: PUSH
26962: LD_VAR 0 13
26966: PUSH
26967: LD_VAR 0 14
26971: PUSH
26972: LD_VAR 0 15
26976: PUSH
26977: LD_VAR 0 16
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: PUSH
26990: LD_VAR 0 4
26994: PUSH
26995: LD_INT 1
26997: PLUS
26998: ARRAY
26999: ST_TO_ADDR
27000: GO 27131
27002: LD_INT 2
27004: DOUBLE
27005: EQUAL
27006: IFTRUE 27010
27008: GO 27066
27010: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27011: LD_ADDR_VAR 0 9
27015: PUSH
27016: LD_VAR 0 17
27020: PUSH
27021: LD_VAR 0 18
27025: PUSH
27026: LD_VAR 0 19
27030: PUSH
27031: LD_VAR 0 20
27035: PUSH
27036: LD_VAR 0 21
27040: PUSH
27041: LD_VAR 0 22
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: PUSH
27054: LD_VAR 0 4
27058: PUSH
27059: LD_INT 1
27061: PLUS
27062: ARRAY
27063: ST_TO_ADDR
27064: GO 27131
27066: LD_INT 3
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27130
27074: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27075: LD_ADDR_VAR 0 9
27079: PUSH
27080: LD_VAR 0 23
27084: PUSH
27085: LD_VAR 0 24
27089: PUSH
27090: LD_VAR 0 25
27094: PUSH
27095: LD_VAR 0 26
27099: PUSH
27100: LD_VAR 0 27
27104: PUSH
27105: LD_VAR 0 28
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: PUSH
27118: LD_VAR 0 4
27122: PUSH
27123: LD_INT 1
27125: PLUS
27126: ARRAY
27127: ST_TO_ADDR
27128: GO 27131
27130: POP
27131: GO 27680
27133: LD_INT 2
27135: DOUBLE
27136: EQUAL
27137: IFTRUE 27147
27139: LD_INT 3
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27203
27147: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27148: LD_ADDR_VAR 0 9
27152: PUSH
27153: LD_VAR 0 29
27157: PUSH
27158: LD_VAR 0 30
27162: PUSH
27163: LD_VAR 0 31
27167: PUSH
27168: LD_VAR 0 32
27172: PUSH
27173: LD_VAR 0 33
27177: PUSH
27178: LD_VAR 0 34
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: PUSH
27191: LD_VAR 0 4
27195: PUSH
27196: LD_INT 1
27198: PLUS
27199: ARRAY
27200: ST_TO_ADDR
27201: GO 27680
27203: LD_INT 16
27205: DOUBLE
27206: EQUAL
27207: IFTRUE 27259
27209: LD_INT 17
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27259
27215: LD_INT 18
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27259
27221: LD_INT 19
27223: DOUBLE
27224: EQUAL
27225: IFTRUE 27259
27227: LD_INT 20
27229: DOUBLE
27230: EQUAL
27231: IFTRUE 27259
27233: LD_INT 21
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27259
27239: LD_INT 23
27241: DOUBLE
27242: EQUAL
27243: IFTRUE 27259
27245: LD_INT 24
27247: DOUBLE
27248: EQUAL
27249: IFTRUE 27259
27251: LD_INT 25
27253: DOUBLE
27254: EQUAL
27255: IFTRUE 27259
27257: GO 27315
27259: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27260: LD_ADDR_VAR 0 9
27264: PUSH
27265: LD_VAR 0 35
27269: PUSH
27270: LD_VAR 0 36
27274: PUSH
27275: LD_VAR 0 37
27279: PUSH
27280: LD_VAR 0 38
27284: PUSH
27285: LD_VAR 0 39
27289: PUSH
27290: LD_VAR 0 40
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: PUSH
27303: LD_VAR 0 4
27307: PUSH
27308: LD_INT 1
27310: PLUS
27311: ARRAY
27312: ST_TO_ADDR
27313: GO 27680
27315: LD_INT 6
27317: DOUBLE
27318: EQUAL
27319: IFTRUE 27371
27321: LD_INT 7
27323: DOUBLE
27324: EQUAL
27325: IFTRUE 27371
27327: LD_INT 8
27329: DOUBLE
27330: EQUAL
27331: IFTRUE 27371
27333: LD_INT 13
27335: DOUBLE
27336: EQUAL
27337: IFTRUE 27371
27339: LD_INT 12
27341: DOUBLE
27342: EQUAL
27343: IFTRUE 27371
27345: LD_INT 15
27347: DOUBLE
27348: EQUAL
27349: IFTRUE 27371
27351: LD_INT 11
27353: DOUBLE
27354: EQUAL
27355: IFTRUE 27371
27357: LD_INT 14
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27371
27363: LD_INT 10
27365: DOUBLE
27366: EQUAL
27367: IFTRUE 27371
27369: GO 27427
27371: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27372: LD_ADDR_VAR 0 9
27376: PUSH
27377: LD_VAR 0 41
27381: PUSH
27382: LD_VAR 0 42
27386: PUSH
27387: LD_VAR 0 43
27391: PUSH
27392: LD_VAR 0 44
27396: PUSH
27397: LD_VAR 0 45
27401: PUSH
27402: LD_VAR 0 46
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: PUSH
27415: LD_VAR 0 4
27419: PUSH
27420: LD_INT 1
27422: PLUS
27423: ARRAY
27424: ST_TO_ADDR
27425: GO 27680
27427: LD_INT 36
27429: DOUBLE
27430: EQUAL
27431: IFTRUE 27435
27433: GO 27491
27435: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27436: LD_ADDR_VAR 0 9
27440: PUSH
27441: LD_VAR 0 47
27445: PUSH
27446: LD_VAR 0 48
27450: PUSH
27451: LD_VAR 0 49
27455: PUSH
27456: LD_VAR 0 50
27460: PUSH
27461: LD_VAR 0 51
27465: PUSH
27466: LD_VAR 0 52
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: PUSH
27479: LD_VAR 0 4
27483: PUSH
27484: LD_INT 1
27486: PLUS
27487: ARRAY
27488: ST_TO_ADDR
27489: GO 27680
27491: LD_INT 4
27493: DOUBLE
27494: EQUAL
27495: IFTRUE 27517
27497: LD_INT 5
27499: DOUBLE
27500: EQUAL
27501: IFTRUE 27517
27503: LD_INT 34
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27517
27509: LD_INT 37
27511: DOUBLE
27512: EQUAL
27513: IFTRUE 27517
27515: GO 27573
27517: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27518: LD_ADDR_VAR 0 9
27522: PUSH
27523: LD_VAR 0 53
27527: PUSH
27528: LD_VAR 0 54
27532: PUSH
27533: LD_VAR 0 55
27537: PUSH
27538: LD_VAR 0 56
27542: PUSH
27543: LD_VAR 0 57
27547: PUSH
27548: LD_VAR 0 58
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: PUSH
27561: LD_VAR 0 4
27565: PUSH
27566: LD_INT 1
27568: PLUS
27569: ARRAY
27570: ST_TO_ADDR
27571: GO 27680
27573: LD_INT 31
27575: DOUBLE
27576: EQUAL
27577: IFTRUE 27623
27579: LD_INT 32
27581: DOUBLE
27582: EQUAL
27583: IFTRUE 27623
27585: LD_INT 33
27587: DOUBLE
27588: EQUAL
27589: IFTRUE 27623
27591: LD_INT 27
27593: DOUBLE
27594: EQUAL
27595: IFTRUE 27623
27597: LD_INT 26
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27623
27603: LD_INT 28
27605: DOUBLE
27606: EQUAL
27607: IFTRUE 27623
27609: LD_INT 29
27611: DOUBLE
27612: EQUAL
27613: IFTRUE 27623
27615: LD_INT 30
27617: DOUBLE
27618: EQUAL
27619: IFTRUE 27623
27621: GO 27679
27623: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27624: LD_ADDR_VAR 0 9
27628: PUSH
27629: LD_VAR 0 59
27633: PUSH
27634: LD_VAR 0 60
27638: PUSH
27639: LD_VAR 0 61
27643: PUSH
27644: LD_VAR 0 62
27648: PUSH
27649: LD_VAR 0 63
27653: PUSH
27654: LD_VAR 0 64
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: PUSH
27667: LD_VAR 0 4
27671: PUSH
27672: LD_INT 1
27674: PLUS
27675: ARRAY
27676: ST_TO_ADDR
27677: GO 27680
27679: POP
// temp_list2 = [ ] ;
27680: LD_ADDR_VAR 0 10
27684: PUSH
27685: EMPTY
27686: ST_TO_ADDR
// for i in temp_list do
27687: LD_ADDR_VAR 0 8
27691: PUSH
27692: LD_VAR 0 9
27696: PUSH
27697: FOR_IN
27698: IFFALSE 27750
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27700: LD_ADDR_VAR 0 10
27704: PUSH
27705: LD_VAR 0 10
27709: PUSH
27710: LD_VAR 0 8
27714: PUSH
27715: LD_INT 1
27717: ARRAY
27718: PUSH
27719: LD_VAR 0 2
27723: PLUS
27724: PUSH
27725: LD_VAR 0 8
27729: PUSH
27730: LD_INT 2
27732: ARRAY
27733: PUSH
27734: LD_VAR 0 3
27738: PLUS
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: ADD
27747: ST_TO_ADDR
27748: GO 27697
27750: POP
27751: POP
// result = temp_list2 ;
27752: LD_ADDR_VAR 0 7
27756: PUSH
27757: LD_VAR 0 10
27761: ST_TO_ADDR
// end ;
27762: LD_VAR 0 7
27766: RET
// export function EnemyInRange ( unit , dist ) ; begin
27767: LD_INT 0
27769: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
27770: LD_ADDR_VAR 0 3
27774: PUSH
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 255
27784: PPUSH
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 250
27794: PPUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 251
27804: PPUSH
27805: LD_VAR 0 2
27809: PPUSH
27810: CALL 3705 0 4
27814: PUSH
27815: LD_INT 4
27817: ARRAY
27818: ST_TO_ADDR
// end ;
27819: LD_VAR 0 3
27823: RET
// export function PlayerSeeMe ( unit ) ; begin
27824: LD_INT 0
27826: PPUSH
// result := See ( your_side , unit ) ;
27827: LD_ADDR_VAR 0 2
27831: PUSH
27832: LD_OWVAR 2
27836: PPUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 292
27846: ST_TO_ADDR
// end ;
27847: LD_VAR 0 2
27851: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
27852: LD_INT 0
27854: PPUSH
27855: PPUSH
27856: PPUSH
27857: PPUSH
27858: PPUSH
// if not hexes then
27859: LD_VAR 0 2
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 28016
// dist := 9999 ;
27868: LD_ADDR_VAR 0 5
27872: PUSH
27873: LD_INT 9999
27875: ST_TO_ADDR
// for i = 1 to hexes do
27876: LD_ADDR_VAR 0 4
27880: PUSH
27881: DOUBLE
27882: LD_INT 1
27884: DEC
27885: ST_TO_ADDR
27886: LD_VAR 0 2
27890: PUSH
27891: FOR_TO
27892: IFFALSE 28004
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
27894: LD_VAR 0 1
27898: PPUSH
27899: LD_VAR 0 2
27903: PUSH
27904: LD_VAR 0 4
27908: ARRAY
27909: PUSH
27910: LD_INT 1
27912: ARRAY
27913: PPUSH
27914: LD_VAR 0 2
27918: PUSH
27919: LD_VAR 0 4
27923: ARRAY
27924: PUSH
27925: LD_INT 2
27927: ARRAY
27928: PPUSH
27929: CALL_OW 297
27933: PUSH
27934: LD_VAR 0 5
27938: LESS
27939: IFFALSE 28002
// begin hex := hexes [ i ] ;
27941: LD_ADDR_VAR 0 7
27945: PUSH
27946: LD_VAR 0 2
27950: PUSH
27951: LD_VAR 0 4
27955: ARRAY
27956: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27957: LD_ADDR_VAR 0 5
27961: PUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: LD_VAR 0 2
27971: PUSH
27972: LD_VAR 0 4
27976: ARRAY
27977: PUSH
27978: LD_INT 1
27980: ARRAY
27981: PPUSH
27982: LD_VAR 0 2
27986: PUSH
27987: LD_VAR 0 4
27991: ARRAY
27992: PUSH
27993: LD_INT 2
27995: ARRAY
27996: PPUSH
27997: CALL_OW 297
28001: ST_TO_ADDR
// end ; end ;
28002: GO 27891
28004: POP
28005: POP
// result := hex ;
28006: LD_ADDR_VAR 0 3
28010: PUSH
28011: LD_VAR 0 7
28015: ST_TO_ADDR
// end ;
28016: LD_VAR 0 3
28020: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
28021: LD_INT 0
28023: PPUSH
28024: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
28025: LD_VAR 0 1
28029: NOT
28030: PUSH
28031: LD_VAR 0 1
28035: PUSH
28036: LD_INT 21
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 23
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: IN
28065: NOT
28066: OR
28067: IFFALSE 28071
// exit ;
28069: GO 28118
// for i = 1 to 3 do
28071: LD_ADDR_VAR 0 3
28075: PUSH
28076: DOUBLE
28077: LD_INT 1
28079: DEC
28080: ST_TO_ADDR
28081: LD_INT 3
28083: PUSH
28084: FOR_TO
28085: IFFALSE 28116
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 250
28096: PPUSH
28097: LD_VAR 0 1
28101: PPUSH
28102: CALL_OW 251
28106: PPUSH
28107: LD_INT 1
28109: PPUSH
28110: CALL_OW 453
28114: GO 28084
28116: POP
28117: POP
// end ;
28118: LD_VAR 0 2
28122: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
28123: LD_INT 0
28125: PPUSH
28126: PPUSH
28127: PPUSH
28128: PPUSH
28129: PPUSH
28130: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
28131: LD_VAR 0 1
28135: NOT
28136: PUSH
28137: LD_VAR 0 2
28141: NOT
28142: OR
28143: PUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 314
28153: OR
28154: IFFALSE 28158
// exit ;
28156: GO 28599
// x := GetX ( enemy_unit ) ;
28158: LD_ADDR_VAR 0 7
28162: PUSH
28163: LD_VAR 0 2
28167: PPUSH
28168: CALL_OW 250
28172: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
28173: LD_ADDR_VAR 0 8
28177: PUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 251
28187: ST_TO_ADDR
// if not x or not y then
28188: LD_VAR 0 7
28192: NOT
28193: PUSH
28194: LD_VAR 0 8
28198: NOT
28199: OR
28200: IFFALSE 28204
// exit ;
28202: GO 28599
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
28204: LD_ADDR_VAR 0 6
28208: PUSH
28209: LD_VAR 0 7
28213: PPUSH
28214: LD_INT 0
28216: PPUSH
28217: LD_INT 4
28219: PPUSH
28220: CALL_OW 272
28224: PUSH
28225: LD_VAR 0 8
28229: PPUSH
28230: LD_INT 0
28232: PPUSH
28233: LD_INT 4
28235: PPUSH
28236: CALL_OW 273
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_VAR 0 7
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: LD_INT 4
28255: PPUSH
28256: CALL_OW 272
28260: PUSH
28261: LD_VAR 0 8
28265: PPUSH
28266: LD_INT 1
28268: PPUSH
28269: LD_INT 4
28271: PPUSH
28272: CALL_OW 273
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_VAR 0 7
28285: PPUSH
28286: LD_INT 2
28288: PPUSH
28289: LD_INT 4
28291: PPUSH
28292: CALL_OW 272
28296: PUSH
28297: LD_VAR 0 8
28301: PPUSH
28302: LD_INT 2
28304: PPUSH
28305: LD_INT 4
28307: PPUSH
28308: CALL_OW 273
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_VAR 0 7
28321: PPUSH
28322: LD_INT 3
28324: PPUSH
28325: LD_INT 4
28327: PPUSH
28328: CALL_OW 272
28332: PUSH
28333: LD_VAR 0 8
28337: PPUSH
28338: LD_INT 3
28340: PPUSH
28341: LD_INT 4
28343: PPUSH
28344: CALL_OW 273
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_VAR 0 7
28357: PPUSH
28358: LD_INT 4
28360: PPUSH
28361: LD_INT 4
28363: PPUSH
28364: CALL_OW 272
28368: PUSH
28369: LD_VAR 0 8
28373: PPUSH
28374: LD_INT 4
28376: PPUSH
28377: LD_INT 4
28379: PPUSH
28380: CALL_OW 273
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_VAR 0 7
28393: PPUSH
28394: LD_INT 5
28396: PPUSH
28397: LD_INT 4
28399: PPUSH
28400: CALL_OW 272
28404: PUSH
28405: LD_VAR 0 8
28409: PPUSH
28410: LD_INT 5
28412: PPUSH
28413: LD_INT 4
28415: PPUSH
28416: CALL_OW 273
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
// for i = tmp downto 1 do
28433: LD_ADDR_VAR 0 4
28437: PUSH
28438: DOUBLE
28439: LD_VAR 0 6
28443: INC
28444: ST_TO_ADDR
28445: LD_INT 1
28447: PUSH
28448: FOR_DOWNTO
28449: IFFALSE 28550
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
28451: LD_VAR 0 6
28455: PUSH
28456: LD_VAR 0 4
28460: ARRAY
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_VAR 0 6
28470: PUSH
28471: LD_VAR 0 4
28475: ARRAY
28476: PUSH
28477: LD_INT 2
28479: ARRAY
28480: PPUSH
28481: CALL_OW 488
28485: NOT
28486: PUSH
28487: LD_VAR 0 6
28491: PUSH
28492: LD_VAR 0 4
28496: ARRAY
28497: PUSH
28498: LD_INT 1
28500: ARRAY
28501: PPUSH
28502: LD_VAR 0 6
28506: PUSH
28507: LD_VAR 0 4
28511: ARRAY
28512: PUSH
28513: LD_INT 2
28515: ARRAY
28516: PPUSH
28517: CALL_OW 428
28521: PUSH
28522: LD_INT 0
28524: NONEQUAL
28525: OR
28526: IFFALSE 28548
// tmp := Delete ( tmp , i ) ;
28528: LD_ADDR_VAR 0 6
28532: PUSH
28533: LD_VAR 0 6
28537: PPUSH
28538: LD_VAR 0 4
28542: PPUSH
28543: CALL_OW 3
28547: ST_TO_ADDR
28548: GO 28448
28550: POP
28551: POP
// j := GetClosestHex ( unit , tmp ) ;
28552: LD_ADDR_VAR 0 5
28556: PUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: LD_VAR 0 6
28566: PPUSH
28567: CALL 27852 0 2
28571: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
28572: LD_VAR 0 1
28576: PPUSH
28577: LD_VAR 0 5
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 5
28590: PUSH
28591: LD_INT 2
28593: ARRAY
28594: PPUSH
28595: CALL_OW 111
// end ;
28599: LD_VAR 0 3
28603: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
28604: LD_INT 0
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
// uc_side = 0 ;
28610: LD_ADDR_OWVAR 20
28614: PUSH
28615: LD_INT 0
28617: ST_TO_ADDR
// uc_nation = 0 ;
28618: LD_ADDR_OWVAR 21
28622: PUSH
28623: LD_INT 0
28625: ST_TO_ADDR
// nat_area := natureArea ;
28626: LD_ADDR_VAR 0 4
28630: PUSH
28631: LD_INT 18
28633: ST_TO_ADDR
// InitHc ;
28634: CALL_OW 19
// for i = 1 to 4 do
28638: LD_ADDR_VAR 0 2
28642: PUSH
28643: DOUBLE
28644: LD_INT 1
28646: DEC
28647: ST_TO_ADDR
28648: LD_INT 4
28650: PUSH
28651: FOR_TO
28652: IFFALSE 28699
// begin hc_class = 18 ;
28654: LD_ADDR_OWVAR 28
28658: PUSH
28659: LD_INT 18
28661: ST_TO_ADDR
// hc_gallery =  ;
28662: LD_ADDR_OWVAR 33
28666: PUSH
28667: LD_STRING 
28669: ST_TO_ADDR
// animal := CreateHuman ;
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: CALL_OW 44
28679: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28680: LD_VAR 0 3
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_INT 0
28692: PPUSH
28693: CALL_OW 49
// end ;
28697: GO 28651
28699: POP
28700: POP
// for i = 1 to 3 do
28701: LD_ADDR_VAR 0 2
28705: PUSH
28706: DOUBLE
28707: LD_INT 1
28709: DEC
28710: ST_TO_ADDR
28711: LD_INT 3
28713: PUSH
28714: FOR_TO
28715: IFFALSE 28779
// begin hc_class = class_tiger ;
28717: LD_ADDR_OWVAR 28
28721: PUSH
28722: LD_INT 14
28724: ST_TO_ADDR
// hc_gallery =  ;
28725: LD_ADDR_OWVAR 33
28729: PUSH
28730: LD_STRING 
28732: ST_TO_ADDR
// hc_agressivity = Rand ( - 5 , 5 ) ;
28733: LD_ADDR_OWVAR 35
28737: PUSH
28738: LD_INT 5
28740: NEG
28741: PPUSH
28742: LD_INT 5
28744: PPUSH
28745: CALL_OW 12
28749: ST_TO_ADDR
// animal := CreateHuman ;
28750: LD_ADDR_VAR 0 3
28754: PUSH
28755: CALL_OW 44
28759: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28760: LD_VAR 0 3
28764: PPUSH
28765: LD_VAR 0 4
28769: PPUSH
28770: LD_INT 0
28772: PPUSH
28773: CALL_OW 49
// end ;
28777: GO 28714
28779: POP
28780: POP
// for i = 1 to 5 do
28781: LD_ADDR_VAR 0 2
28785: PUSH
28786: DOUBLE
28787: LD_INT 1
28789: DEC
28790: ST_TO_ADDR
28791: LD_INT 5
28793: PUSH
28794: FOR_TO
28795: IFFALSE 28898
// begin hc_class = class_apeman ;
28797: LD_ADDR_OWVAR 28
28801: PUSH
28802: LD_INT 12
28804: ST_TO_ADDR
// hc_gallery =  ;
28805: LD_ADDR_OWVAR 33
28809: PUSH
28810: LD_STRING 
28812: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
28813: LD_ADDR_OWVAR 35
28817: PUSH
28818: LD_INT 2
28820: NEG
28821: PPUSH
28822: LD_INT 2
28824: PPUSH
28825: CALL_OW 12
28829: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
28830: LD_ADDR_OWVAR 31
28834: PUSH
28835: LD_INT 1
28837: PPUSH
28838: LD_INT 3
28840: PPUSH
28841: CALL_OW 12
28845: PUSH
28846: LD_INT 1
28848: PPUSH
28849: LD_INT 3
28851: PPUSH
28852: CALL_OW 12
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: ST_TO_ADDR
// animal := CreateHuman ;
28869: LD_ADDR_VAR 0 3
28873: PUSH
28874: CALL_OW 44
28878: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28879: LD_VAR 0 3
28883: PPUSH
28884: LD_VAR 0 4
28888: PPUSH
28889: LD_INT 0
28891: PPUSH
28892: CALL_OW 49
// end ;
28896: GO 28794
28898: POP
28899: POP
// for i = 1 to 3 do
28900: LD_ADDR_VAR 0 2
28904: PUSH
28905: DOUBLE
28906: LD_INT 1
28908: DEC
28909: ST_TO_ADDR
28910: LD_INT 3
28912: PUSH
28913: FOR_TO
28914: IFFALSE 28961
// begin hc_class = 13 ;
28916: LD_ADDR_OWVAR 28
28920: PUSH
28921: LD_INT 13
28923: ST_TO_ADDR
// hc_gallery =  ;
28924: LD_ADDR_OWVAR 33
28928: PUSH
28929: LD_STRING 
28931: ST_TO_ADDR
// animal := CreateHuman ;
28932: LD_ADDR_VAR 0 3
28936: PUSH
28937: CALL_OW 44
28941: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
28942: LD_VAR 0 3
28946: PPUSH
28947: LD_VAR 0 4
28951: PPUSH
28952: LD_INT 0
28954: PPUSH
28955: CALL_OW 49
// end ;
28959: GO 28913
28961: POP
28962: POP
// for i = 1 to 7 do
28963: LD_ADDR_VAR 0 2
28967: PUSH
28968: DOUBLE
28969: LD_INT 1
28971: DEC
28972: ST_TO_ADDR
28973: LD_INT 7
28975: PUSH
28976: FOR_TO
28977: IFFALSE 29022
// begin hc_class = 20 ;
28979: LD_ADDR_OWVAR 28
28983: PUSH
28984: LD_INT 20
28986: ST_TO_ADDR
// hc_gallery =  ;
28987: LD_ADDR_OWVAR 33
28991: PUSH
28992: LD_STRING 
28994: ST_TO_ADDR
// animal := CreateHuman ;
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: CALL_OW 44
29004: ST_TO_ADDR
// PlaceUnitArea ( animal , waterArea , false ) ;
29005: LD_VAR 0 3
29009: PPUSH
29010: LD_INT 19
29012: PPUSH
29013: LD_INT 0
29015: PPUSH
29016: CALL_OW 49
// end ;
29020: GO 28976
29022: POP
29023: POP
// end ;
29024: LD_VAR 0 1
29028: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking ; begin
29029: LD_INT 0
29031: PPUSH
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
29037: PPUSH
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
29054: PPUSH
29055: PPUSH
29056: PPUSH
// if not list then
29057: LD_VAR 0 1
29061: NOT
29062: IFFALSE 29066
// exit ;
29064: GO 32107
// base := list [ 1 ] ;
29066: LD_ADDR_VAR 0 3
29070: PUSH
29071: LD_VAR 0 1
29075: PUSH
29076: LD_INT 1
29078: ARRAY
29079: ST_TO_ADDR
// group := list [ 2 ] ;
29080: LD_ADDR_VAR 0 4
29084: PUSH
29085: LD_VAR 0 1
29089: PUSH
29090: LD_INT 2
29092: ARRAY
29093: ST_TO_ADDR
// path := list [ 3 ] ;
29094: LD_ADDR_VAR 0 5
29098: PUSH
29099: LD_VAR 0 1
29103: PUSH
29104: LD_INT 3
29106: ARRAY
29107: ST_TO_ADDR
// flags := list [ 4 ] ;
29108: LD_ADDR_VAR 0 6
29112: PUSH
29113: LD_VAR 0 1
29117: PUSH
29118: LD_INT 4
29120: ARRAY
29121: ST_TO_ADDR
// mined := [ ] ;
29122: LD_ADDR_VAR 0 25
29126: PUSH
29127: EMPTY
29128: ST_TO_ADDR
// bombed := [ ] ;
29129: LD_ADDR_VAR 0 26
29133: PUSH
29134: EMPTY
29135: ST_TO_ADDR
// if not group or not path then
29136: LD_VAR 0 4
29140: NOT
29141: PUSH
29142: LD_VAR 0 5
29146: NOT
29147: OR
29148: IFFALSE 29152
// exit ;
29150: GO 32107
// if flags then
29152: LD_VAR 0 6
29156: IFFALSE 29300
// begin f_ignore_area := flags [ 1 ] ;
29158: LD_ADDR_VAR 0 15
29162: PUSH
29163: LD_VAR 0 6
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
29172: LD_ADDR_VAR 0 16
29176: PUSH
29177: LD_VAR 0 6
29181: PUSH
29182: LD_INT 2
29184: ARRAY
29185: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
29186: LD_ADDR_VAR 0 17
29190: PUSH
29191: LD_VAR 0 6
29195: PUSH
29196: LD_INT 3
29198: ARRAY
29199: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
29200: LD_ADDR_VAR 0 18
29204: PUSH
29205: LD_VAR 0 6
29209: PUSH
29210: LD_INT 4
29212: ARRAY
29213: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
29214: LD_ADDR_VAR 0 19
29218: PUSH
29219: LD_VAR 0 6
29223: PUSH
29224: LD_INT 5
29226: ARRAY
29227: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
29228: LD_ADDR_VAR 0 20
29232: PUSH
29233: LD_VAR 0 6
29237: PUSH
29238: LD_INT 6
29240: ARRAY
29241: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
29242: LD_ADDR_VAR 0 21
29246: PUSH
29247: LD_VAR 0 6
29251: PUSH
29252: LD_INT 7
29254: ARRAY
29255: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
29256: LD_ADDR_VAR 0 22
29260: PUSH
29261: LD_VAR 0 6
29265: PUSH
29266: LD_INT 8
29268: ARRAY
29269: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
29270: LD_ADDR_VAR 0 23
29274: PUSH
29275: LD_VAR 0 6
29279: PUSH
29280: LD_INT 9
29282: ARRAY
29283: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
29284: LD_ADDR_VAR 0 24
29288: PUSH
29289: LD_VAR 0 6
29293: PUSH
29294: LD_INT 10
29296: ARRAY
29297: ST_TO_ADDR
// end else
29298: GO 29380
// begin f_ignore_area := false ;
29300: LD_ADDR_VAR 0 15
29304: PUSH
29305: LD_INT 0
29307: ST_TO_ADDR
// f_capture := false ;
29308: LD_ADDR_VAR 0 16
29312: PUSH
29313: LD_INT 0
29315: ST_TO_ADDR
// f_ignore_civ := false ;
29316: LD_ADDR_VAR 0 17
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// f_murder := false ;
29324: LD_ADDR_VAR 0 18
29328: PUSH
29329: LD_INT 0
29331: ST_TO_ADDR
// f_mines := false ;
29332: LD_ADDR_VAR 0 19
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
// f_repair := false ;
29340: LD_ADDR_VAR 0 20
29344: PUSH
29345: LD_INT 0
29347: ST_TO_ADDR
// f_heal := false ;
29348: LD_ADDR_VAR 0 21
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// f_spacetime := false ;
29356: LD_ADDR_VAR 0 22
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// f_attack_depot := false ;
29364: LD_ADDR_VAR 0 23
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// f_crawl := false ;
29372: LD_ADDR_VAR 0 24
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// end ; units_path := [ ] ;
29380: LD_ADDR_VAR 0 14
29384: PUSH
29385: EMPTY
29386: ST_TO_ADDR
// for i = 1 to group do
29387: LD_ADDR_VAR 0 7
29391: PUSH
29392: DOUBLE
29393: LD_INT 1
29395: DEC
29396: ST_TO_ADDR
29397: LD_VAR 0 4
29401: PUSH
29402: FOR_TO
29403: IFFALSE 29432
// begin units_path := Replace ( units_path , i , path ) ;
29405: LD_ADDR_VAR 0 14
29409: PUSH
29410: LD_VAR 0 14
29414: PPUSH
29415: LD_VAR 0 7
29419: PPUSH
29420: LD_VAR 0 5
29424: PPUSH
29425: CALL_OW 1
29429: ST_TO_ADDR
// end ;
29430: GO 29402
29432: POP
29433: POP
// repeat for i = group downto 1 do
29434: LD_ADDR_VAR 0 7
29438: PUSH
29439: DOUBLE
29440: LD_VAR 0 4
29444: INC
29445: ST_TO_ADDR
29446: LD_INT 1
29448: PUSH
29449: FOR_DOWNTO
29450: IFFALSE 32089
// begin tmp := [ ] ;
29452: LD_ADDR_VAR 0 12
29456: PUSH
29457: EMPTY
29458: ST_TO_ADDR
// attacking := false ;
29459: LD_ADDR_VAR 0 27
29463: PUSH
29464: LD_INT 0
29466: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
29467: LD_VAR 0 4
29471: PUSH
29472: LD_VAR 0 7
29476: ARRAY
29477: PPUSH
29478: CALL_OW 301
29482: PUSH
29483: LD_VAR 0 4
29487: PUSH
29488: LD_VAR 0 7
29492: ARRAY
29493: NOT
29494: OR
29495: IFFALSE 29539
// begin group := Delete ( group , i ) ;
29497: LD_ADDR_VAR 0 4
29501: PUSH
29502: LD_VAR 0 4
29506: PPUSH
29507: LD_VAR 0 7
29511: PPUSH
29512: CALL_OW 3
29516: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
29517: LD_ADDR_VAR 0 14
29521: PUSH
29522: LD_VAR 0 14
29526: PPUSH
29527: LD_VAR 0 7
29531: PPUSH
29532: CALL_OW 3
29536: ST_TO_ADDR
// continue ;
29537: GO 29449
// end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
29539: LD_VAR 0 4
29543: PUSH
29544: LD_VAR 0 7
29548: ARRAY
29549: PPUSH
29550: LD_INT 10
29552: PPUSH
29553: CALL 27767 0 2
29557: NOT
29558: PUSH
29559: LD_VAR 0 14
29563: PUSH
29564: LD_VAR 0 7
29568: ARRAY
29569: PUSH
29570: EMPTY
29571: EQUAL
29572: NOT
29573: AND
29574: IFFALSE 29858
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
29576: LD_VAR 0 4
29580: PUSH
29581: LD_VAR 0 7
29585: ARRAY
29586: PPUSH
29587: CALL_OW 262
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: IN
29602: IFFALSE 29661
// if GetFuel ( group [ i ] ) < 10 and not PlayerSeeMe ( group [ i ] ) then
29604: LD_VAR 0 4
29608: PUSH
29609: LD_VAR 0 7
29613: ARRAY
29614: PPUSH
29615: CALL_OW 261
29619: PUSH
29620: LD_INT 10
29622: LESS
29623: PUSH
29624: LD_VAR 0 4
29628: PUSH
29629: LD_VAR 0 7
29633: ARRAY
29634: PPUSH
29635: CALL 27824 0 1
29639: NOT
29640: AND
29641: IFFALSE 29661
// SetFuel ( group [ i ] , 12 ) ;
29643: LD_VAR 0 4
29647: PUSH
29648: LD_VAR 0 7
29652: ARRAY
29653: PPUSH
29654: LD_INT 12
29656: PPUSH
29657: CALL_OW 240
// if units_path [ i ] then
29661: LD_VAR 0 14
29665: PUSH
29666: LD_VAR 0 7
29670: ARRAY
29671: IFFALSE 29856
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
29673: LD_VAR 0 4
29677: PUSH
29678: LD_VAR 0 7
29682: ARRAY
29683: PPUSH
29684: LD_VAR 0 14
29688: PUSH
29689: LD_VAR 0 7
29693: ARRAY
29694: PUSH
29695: LD_INT 1
29697: ARRAY
29698: PUSH
29699: LD_INT 1
29701: ARRAY
29702: PPUSH
29703: LD_VAR 0 14
29707: PUSH
29708: LD_VAR 0 7
29712: ARRAY
29713: PUSH
29714: LD_INT 1
29716: ARRAY
29717: PUSH
29718: LD_INT 2
29720: ARRAY
29721: PPUSH
29722: CALL_OW 297
29726: PUSH
29727: LD_INT 6
29729: GREATER
29730: IFFALSE 29805
// begin if not HasTask ( group [ i ] ) then
29732: LD_VAR 0 4
29736: PUSH
29737: LD_VAR 0 7
29741: ARRAY
29742: PPUSH
29743: CALL_OW 314
29747: NOT
29748: IFFALSE 29803
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
29750: LD_VAR 0 4
29754: PUSH
29755: LD_VAR 0 7
29759: ARRAY
29760: PPUSH
29761: LD_VAR 0 14
29765: PUSH
29766: LD_VAR 0 7
29770: ARRAY
29771: PUSH
29772: LD_INT 1
29774: ARRAY
29775: PUSH
29776: LD_INT 1
29778: ARRAY
29779: PPUSH
29780: LD_VAR 0 14
29784: PUSH
29785: LD_VAR 0 7
29789: ARRAY
29790: PUSH
29791: LD_INT 1
29793: ARRAY
29794: PUSH
29795: LD_INT 2
29797: ARRAY
29798: PPUSH
29799: CALL_OW 114
// end else
29803: GO 29856
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
29805: LD_ADDR_VAR 0 13
29809: PUSH
29810: LD_VAR 0 14
29814: PUSH
29815: LD_VAR 0 7
29819: ARRAY
29820: PPUSH
29821: LD_INT 1
29823: PPUSH
29824: CALL_OW 3
29828: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
29829: LD_ADDR_VAR 0 14
29833: PUSH
29834: LD_VAR 0 14
29838: PPUSH
29839: LD_VAR 0 7
29843: PPUSH
29844: LD_VAR 0 13
29848: PPUSH
29849: CALL_OW 1
29853: ST_TO_ADDR
// continue ;
29854: GO 29449
// end ; end ; end else
29856: GO 32087
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
29858: LD_ADDR_VAR 0 12
29862: PUSH
29863: LD_INT 81
29865: PUSH
29866: LD_VAR 0 4
29870: PUSH
29871: LD_VAR 0 7
29875: ARRAY
29876: PPUSH
29877: CALL_OW 255
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PPUSH
29886: CALL_OW 69
29890: ST_TO_ADDR
// if not tmp then
29891: LD_VAR 0 12
29895: NOT
29896: IFFALSE 29900
// continue ;
29898: GO 29449
// if f_ignore_area then
29900: LD_VAR 0 15
29904: IFFALSE 29992
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
29906: LD_ADDR_VAR 0 13
29910: PUSH
29911: LD_VAR 0 12
29915: PPUSH
29916: LD_INT 3
29918: PUSH
29919: LD_INT 92
29921: PUSH
29922: LD_VAR 0 15
29926: PUSH
29927: LD_INT 1
29929: ARRAY
29930: PUSH
29931: LD_VAR 0 15
29935: PUSH
29936: LD_INT 2
29938: ARRAY
29939: PUSH
29940: LD_VAR 0 15
29944: PUSH
29945: LD_INT 3
29947: ARRAY
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PPUSH
29959: CALL_OW 72
29963: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
29964: LD_VAR 0 12
29968: PUSH
29969: LD_VAR 0 13
29973: DIFF
29974: IFFALSE 29992
// tmp := tmp diff tmp2 ;
29976: LD_ADDR_VAR 0 12
29980: PUSH
29981: LD_VAR 0 12
29985: PUSH
29986: LD_VAR 0 13
29990: DIFF
29991: ST_TO_ADDR
// end ; if not f_murder then
29992: LD_VAR 0 18
29996: NOT
29997: IFFALSE 30055
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
29999: LD_ADDR_VAR 0 13
30003: PUSH
30004: LD_VAR 0 12
30008: PPUSH
30009: LD_INT 3
30011: PUSH
30012: LD_INT 50
30014: PUSH
30015: EMPTY
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PPUSH
30022: CALL_OW 72
30026: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
30027: LD_VAR 0 12
30031: PUSH
30032: LD_VAR 0 13
30036: DIFF
30037: IFFALSE 30055
// tmp := tmp diff tmp2 ;
30039: LD_ADDR_VAR 0 12
30043: PUSH
30044: LD_VAR 0 12
30048: PUSH
30049: LD_VAR 0 13
30053: DIFF
30054: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
30055: LD_ADDR_VAR 0 12
30059: PUSH
30060: LD_VAR 0 4
30064: PUSH
30065: LD_VAR 0 7
30069: ARRAY
30070: PPUSH
30071: LD_VAR 0 12
30075: PPUSH
30076: LD_INT 1
30078: PPUSH
30079: LD_INT 1
30081: PPUSH
30082: CALL 3244 0 4
30086: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
30087: LD_VAR 0 4
30091: PUSH
30092: LD_VAR 0 7
30096: ARRAY
30097: PPUSH
30098: CALL_OW 257
30102: PUSH
30103: LD_INT 1
30105: EQUAL
30106: IFFALSE 30441
// begin if WantPlant ( group [ i ] ) then
30108: LD_VAR 0 4
30112: PUSH
30113: LD_VAR 0 7
30117: ARRAY
30118: PPUSH
30119: CALL 2712 0 1
30123: IFFALSE 30127
// continue ;
30125: GO 29449
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
30127: LD_VAR 0 16
30131: PUSH
30132: LD_VAR 0 4
30136: PUSH
30137: LD_VAR 0 7
30141: ARRAY
30142: PPUSH
30143: CALL_OW 310
30147: NOT
30148: AND
30149: PUSH
30150: LD_VAR 0 12
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PUSH
30159: LD_VAR 0 12
30163: PPUSH
30164: LD_INT 21
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 58
30176: PUSH
30177: EMPTY
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PPUSH
30184: CALL_OW 72
30188: IN
30189: AND
30190: IFFALSE 30226
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
30192: LD_VAR 0 4
30196: PUSH
30197: LD_VAR 0 7
30201: ARRAY
30202: PPUSH
30203: LD_VAR 0 12
30207: PUSH
30208: LD_INT 1
30210: ARRAY
30211: PPUSH
30212: CALL_OW 120
// attacking := true ;
30216: LD_ADDR_VAR 0 27
30220: PUSH
30221: LD_INT 1
30223: ST_TO_ADDR
// continue ;
30224: GO 29449
// end ; if f_crawl and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
30226: LD_VAR 0 24
30230: PUSH
30231: LD_VAR 0 4
30235: PUSH
30236: LD_VAR 0 7
30240: ARRAY
30241: PPUSH
30242: CALL_OW 256
30246: PUSH
30247: LD_INT 800
30249: LESS
30250: AND
30251: PUSH
30252: LD_VAR 0 4
30256: PUSH
30257: LD_VAR 0 7
30261: ARRAY
30262: PPUSH
30263: CALL_OW 318
30267: NOT
30268: AND
30269: IFFALSE 30286
// ComCrawl ( group [ i ] ) ;
30271: LD_VAR 0 4
30275: PUSH
30276: LD_VAR 0 7
30280: ARRAY
30281: PPUSH
30282: CALL_OW 137
// if f_mines then
30286: LD_VAR 0 19
30290: IFFALSE 30441
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
30292: LD_VAR 0 12
30296: PUSH
30297: LD_INT 1
30299: ARRAY
30300: PPUSH
30301: CALL_OW 247
30305: PUSH
30306: LD_INT 3
30308: EQUAL
30309: PUSH
30310: LD_VAR 0 12
30314: PUSH
30315: LD_INT 1
30317: ARRAY
30318: PUSH
30319: LD_VAR 0 25
30323: IN
30324: NOT
30325: AND
30326: IFFALSE 30441
// begin ComPlaceDelayedCharge ( group [ i ] , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , tmp [ 1 ] ) ;
30328: LD_VAR 0 4
30332: PUSH
30333: LD_VAR 0 7
30337: ARRAY
30338: PPUSH
30339: LD_VAR 0 12
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PPUSH
30348: CALL_OW 250
30352: PPUSH
30353: LD_VAR 0 12
30357: PUSH
30358: LD_INT 1
30360: ARRAY
30361: PPUSH
30362: CALL_OW 251
30366: PPUSH
30367: LD_VAR 0 12
30371: PUSH
30372: LD_INT 1
30374: ARRAY
30375: PPUSH
30376: CALL_OW 132
// AddComWait ( group [ i ] , 0 0$2 ) ;
30380: LD_VAR 0 4
30384: PUSH
30385: LD_VAR 0 7
30389: ARRAY
30390: PPUSH
30391: LD_INT 70
30393: PPUSH
30394: CALL_OW 202
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
30398: LD_ADDR_VAR 0 25
30402: PUSH
30403: LD_VAR 0 25
30407: PPUSH
30408: LD_VAR 0 25
30412: PUSH
30413: LD_INT 1
30415: PLUS
30416: PPUSH
30417: LD_VAR 0 12
30421: PUSH
30422: LD_INT 1
30424: ARRAY
30425: PPUSH
30426: CALL_OW 1
30430: ST_TO_ADDR
// attacking := true ;
30431: LD_ADDR_VAR 0 27
30435: PUSH
30436: LD_INT 1
30438: ST_TO_ADDR
// continue ;
30439: GO 29449
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 then
30441: LD_VAR 0 4
30445: PUSH
30446: LD_VAR 0 7
30450: ARRAY
30451: PPUSH
30452: CALL_OW 257
30456: PUSH
30457: LD_INT 17
30459: EQUAL
30460: IFFALSE 30588
// begin attacking := false ;
30462: LD_ADDR_VAR 0 27
30466: PUSH
30467: LD_INT 0
30469: ST_TO_ADDR
// k := 5 ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 5
30477: ST_TO_ADDR
// if tmp < k then
30478: LD_VAR 0 12
30482: PUSH
30483: LD_VAR 0 9
30487: LESS
30488: IFFALSE 30500
// k := tmp ;
30490: LD_ADDR_VAR 0 9
30494: PUSH
30495: LD_VAR 0 12
30499: ST_TO_ADDR
// for j = 1 to k do
30500: LD_ADDR_VAR 0 8
30504: PUSH
30505: DOUBLE
30506: LD_INT 1
30508: DEC
30509: ST_TO_ADDR
30510: LD_VAR 0 9
30514: PUSH
30515: FOR_TO
30516: IFFALSE 30586
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
30518: LD_VAR 0 12
30522: PUSH
30523: LD_VAR 0 8
30527: ARRAY
30528: PUSH
30529: LD_VAR 0 12
30533: PPUSH
30534: LD_INT 58
30536: PUSH
30537: EMPTY
30538: LIST
30539: PPUSH
30540: CALL_OW 72
30544: IN
30545: NOT
30546: IFFALSE 30584
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
30548: LD_VAR 0 4
30552: PUSH
30553: LD_VAR 0 7
30557: ARRAY
30558: PPUSH
30559: LD_VAR 0 12
30563: PUSH
30564: LD_VAR 0 8
30568: ARRAY
30569: PPUSH
30570: CALL_OW 115
// attacking := true ;
30574: LD_ADDR_VAR 0 27
30578: PUSH
30579: LD_INT 1
30581: ST_TO_ADDR
// continue ;
30582: GO 30515
// end ; end ;
30584: GO 30515
30586: POP
30587: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
30588: LD_VAR 0 4
30592: PUSH
30593: LD_VAR 0 7
30597: ARRAY
30598: PPUSH
30599: CALL_OW 257
30603: PUSH
30604: LD_INT 8
30606: EQUAL
30607: PUSH
30608: LD_VAR 0 4
30612: PUSH
30613: LD_VAR 0 7
30617: ARRAY
30618: PPUSH
30619: CALL_OW 264
30623: PUSH
30624: LD_INT 28
30626: PUSH
30627: LD_INT 45
30629: PUSH
30630: LD_INT 7
30632: PUSH
30633: LD_INT 47
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: IN
30642: OR
30643: IFFALSE 30873
// begin attacking := false ;
30645: LD_ADDR_VAR 0 27
30649: PUSH
30650: LD_INT 0
30652: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
30653: LD_VAR 0 12
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: PPUSH
30662: CALL_OW 266
30666: PUSH
30667: LD_INT 32
30669: PUSH
30670: LD_INT 31
30672: PUSH
30673: LD_INT 33
30675: PUSH
30676: LD_INT 4
30678: PUSH
30679: LD_INT 5
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: IN
30689: IFFALSE 30873
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
30691: LD_ADDR_VAR 0 9
30695: PUSH
30696: LD_VAR 0 12
30700: PUSH
30701: LD_INT 1
30703: ARRAY
30704: PPUSH
30705: CALL_OW 266
30709: PPUSH
30710: LD_VAR 0 12
30714: PUSH
30715: LD_INT 1
30717: ARRAY
30718: PPUSH
30719: CALL_OW 250
30723: PPUSH
30724: LD_VAR 0 12
30728: PUSH
30729: LD_INT 1
30731: ARRAY
30732: PPUSH
30733: CALL_OW 251
30737: PPUSH
30738: LD_VAR 0 12
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: CALL_OW 254
30751: PPUSH
30752: LD_VAR 0 12
30756: PUSH
30757: LD_INT 1
30759: ARRAY
30760: PPUSH
30761: CALL_OW 248
30765: PPUSH
30766: LD_INT 0
30768: PPUSH
30769: CALL 9228 0 6
30773: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
30774: LD_ADDR_VAR 0 8
30778: PUSH
30779: LD_VAR 0 4
30783: PUSH
30784: LD_VAR 0 7
30788: ARRAY
30789: PPUSH
30790: LD_VAR 0 9
30794: PPUSH
30795: CALL 27852 0 2
30799: ST_TO_ADDR
// if j then
30800: LD_VAR 0 8
30804: IFFALSE 30873
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30806: LD_VAR 0 8
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PPUSH
30815: LD_VAR 0 8
30819: PUSH
30820: LD_INT 2
30822: ARRAY
30823: PPUSH
30824: CALL_OW 488
30828: IFFALSE 30873
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
30830: LD_VAR 0 4
30834: PUSH
30835: LD_VAR 0 7
30839: ARRAY
30840: PPUSH
30841: LD_VAR 0 8
30845: PUSH
30846: LD_INT 1
30848: ARRAY
30849: PPUSH
30850: LD_VAR 0 8
30854: PUSH
30855: LD_INT 2
30857: ARRAY
30858: PPUSH
30859: CALL_OW 116
// attacking := true ;
30863: LD_ADDR_VAR 0 27
30867: PUSH
30868: LD_INT 1
30870: ST_TO_ADDR
// continue ;
30871: GO 29449
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
30873: LD_VAR 0 4
30877: PUSH
30878: LD_VAR 0 7
30882: ARRAY
30883: PPUSH
30884: CALL_OW 265
30888: PUSH
30889: LD_INT 11
30891: EQUAL
30892: IFFALSE 31170
// begin k := 10 ;
30894: LD_ADDR_VAR 0 9
30898: PUSH
30899: LD_INT 10
30901: ST_TO_ADDR
// x := 0 ;
30902: LD_ADDR_VAR 0 10
30906: PUSH
30907: LD_INT 0
30909: ST_TO_ADDR
// if tmp < k then
30910: LD_VAR 0 12
30914: PUSH
30915: LD_VAR 0 9
30919: LESS
30920: IFFALSE 30932
// k := tmp ;
30922: LD_ADDR_VAR 0 9
30926: PUSH
30927: LD_VAR 0 12
30931: ST_TO_ADDR
// for j = k downto 1 do
30932: LD_ADDR_VAR 0 8
30936: PUSH
30937: DOUBLE
30938: LD_VAR 0 9
30942: INC
30943: ST_TO_ADDR
30944: LD_INT 1
30946: PUSH
30947: FOR_DOWNTO
30948: IFFALSE 31023
// begin if GetType ( tmp [ j ] ) = unit_human then
30950: LD_VAR 0 12
30954: PUSH
30955: LD_VAR 0 8
30959: ARRAY
30960: PPUSH
30961: CALL_OW 247
30965: PUSH
30966: LD_INT 1
30968: EQUAL
30969: IFFALSE 31021
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
30971: LD_VAR 0 4
30975: PUSH
30976: LD_VAR 0 7
30980: ARRAY
30981: PPUSH
30982: LD_VAR 0 12
30986: PUSH
30987: LD_VAR 0 8
30991: ARRAY
30992: PPUSH
30993: CALL 28123 0 2
// x := tmp [ j ] ;
30997: LD_ADDR_VAR 0 10
31001: PUSH
31002: LD_VAR 0 12
31006: PUSH
31007: LD_VAR 0 8
31011: ARRAY
31012: ST_TO_ADDR
// attacking := true ;
31013: LD_ADDR_VAR 0 27
31017: PUSH
31018: LD_INT 1
31020: ST_TO_ADDR
// end ; end ;
31021: GO 30947
31023: POP
31024: POP
// if not x then
31025: LD_VAR 0 10
31029: NOT
31030: IFFALSE 31170
// begin attacking := true ;
31032: LD_ADDR_VAR 0 27
31036: PUSH
31037: LD_INT 1
31039: ST_TO_ADDR
// if _GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = _GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
31040: LD_VAR 0 4
31044: PUSH
31045: LD_VAR 0 7
31049: ARRAY
31050: PPUSH
31051: CALL_OW 250
31055: PPUSH
31056: LD_VAR 0 4
31060: PUSH
31061: LD_VAR 0 7
31065: ARRAY
31066: PPUSH
31067: CALL_OW 251
31071: PPUSH
31072: CALL 1970 0 2
31076: PUSH
31077: LD_INT 2
31079: ARRAY
31080: PUSH
31081: LD_VAR 0 12
31085: PUSH
31086: LD_INT 1
31088: ARRAY
31089: PPUSH
31090: CALL_OW 250
31094: PPUSH
31095: LD_VAR 0 12
31099: PUSH
31100: LD_INT 1
31102: ARRAY
31103: PPUSH
31104: CALL_OW 251
31108: PPUSH
31109: CALL 1970 0 2
31113: PUSH
31114: LD_INT 2
31116: ARRAY
31117: EQUAL
31118: IFFALSE 31146
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
31120: LD_VAR 0 4
31124: PUSH
31125: LD_VAR 0 7
31129: ARRAY
31130: PPUSH
31131: LD_VAR 0 12
31135: PUSH
31136: LD_INT 1
31138: ARRAY
31139: PPUSH
31140: CALL 28123 0 2
31144: GO 31170
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31146: LD_VAR 0 4
31150: PUSH
31151: LD_VAR 0 7
31155: ARRAY
31156: PPUSH
31157: LD_VAR 0 12
31161: PUSH
31162: LD_INT 1
31164: ARRAY
31165: PPUSH
31166: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
31170: LD_VAR 0 4
31174: PUSH
31175: LD_VAR 0 7
31179: ARRAY
31180: PPUSH
31181: CALL_OW 264
31185: PUSH
31186: LD_INT 29
31188: EQUAL
31189: IFFALSE 31555
// begin if WantsToAttack ( group [ i ] ) in bombed then
31191: LD_VAR 0 4
31195: PUSH
31196: LD_VAR 0 7
31200: ARRAY
31201: PPUSH
31202: CALL_OW 319
31206: PUSH
31207: LD_VAR 0 26
31211: IN
31212: IFFALSE 31216
// continue ;
31214: GO 29449
// k := 8 ;
31216: LD_ADDR_VAR 0 9
31220: PUSH
31221: LD_INT 8
31223: ST_TO_ADDR
// x := 0 ;
31224: LD_ADDR_VAR 0 10
31228: PUSH
31229: LD_INT 0
31231: ST_TO_ADDR
// if tmp < k then
31232: LD_VAR 0 12
31236: PUSH
31237: LD_VAR 0 9
31241: LESS
31242: IFFALSE 31254
// k := tmp ;
31244: LD_ADDR_VAR 0 9
31248: PUSH
31249: LD_VAR 0 12
31253: ST_TO_ADDR
// for j = 1 to k do
31254: LD_ADDR_VAR 0 8
31258: PUSH
31259: DOUBLE
31260: LD_INT 1
31262: DEC
31263: ST_TO_ADDR
31264: LD_VAR 0 9
31268: PUSH
31269: FOR_TO
31270: IFFALSE 31402
// begin if GetType ( tmp [ j ] ) = unit_building then
31272: LD_VAR 0 12
31276: PUSH
31277: LD_VAR 0 8
31281: ARRAY
31282: PPUSH
31283: CALL_OW 247
31287: PUSH
31288: LD_INT 3
31290: EQUAL
31291: IFFALSE 31400
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
31293: LD_VAR 0 12
31297: PUSH
31298: LD_VAR 0 8
31302: ARRAY
31303: PUSH
31304: LD_VAR 0 26
31308: IN
31309: NOT
31310: PUSH
31311: LD_VAR 0 12
31315: PUSH
31316: LD_VAR 0 8
31320: ARRAY
31321: PPUSH
31322: CALL_OW 313
31326: AND
31327: IFFALSE 31400
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31329: LD_VAR 0 4
31333: PUSH
31334: LD_VAR 0 7
31338: ARRAY
31339: PPUSH
31340: LD_VAR 0 12
31344: PUSH
31345: LD_VAR 0 8
31349: ARRAY
31350: PPUSH
31351: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
31355: LD_ADDR_VAR 0 26
31359: PUSH
31360: LD_VAR 0 26
31364: PPUSH
31365: LD_VAR 0 26
31369: PUSH
31370: LD_INT 1
31372: PLUS
31373: PPUSH
31374: LD_VAR 0 12
31378: PUSH
31379: LD_VAR 0 8
31383: ARRAY
31384: PPUSH
31385: CALL_OW 1
31389: ST_TO_ADDR
// attacking := true ;
31390: LD_ADDR_VAR 0 27
31394: PUSH
31395: LD_INT 1
31397: ST_TO_ADDR
// break ;
31398: GO 31402
// end ; end ;
31400: GO 31269
31402: POP
31403: POP
// if not attacking and f_attack_depot then
31404: LD_VAR 0 27
31408: NOT
31409: PUSH
31410: LD_VAR 0 23
31414: AND
31415: IFFALSE 31510
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31417: LD_ADDR_VAR 0 11
31421: PUSH
31422: LD_VAR 0 12
31426: PPUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 30
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 30
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: PPUSH
31455: CALL_OW 72
31459: ST_TO_ADDR
// if z then
31460: LD_VAR 0 11
31464: IFFALSE 31510
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
31466: LD_VAR 0 4
31470: PUSH
31471: LD_VAR 0 7
31475: ARRAY
31476: PPUSH
31477: LD_VAR 0 11
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_VAR 0 7
31491: ARRAY
31492: PPUSH
31493: CALL_OW 74
31497: PPUSH
31498: CALL_OW 115
// attacking := true ;
31502: LD_ADDR_VAR 0 27
31506: PUSH
31507: LD_INT 1
31509: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
31510: LD_VAR 0 4
31514: PUSH
31515: LD_VAR 0 7
31519: ARRAY
31520: PPUSH
31521: CALL_OW 256
31525: PUSH
31526: LD_INT 500
31528: LESS
31529: IFFALSE 31555
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
31531: LD_VAR 0 4
31535: PUSH
31536: LD_VAR 0 7
31540: ARRAY
31541: PPUSH
31542: LD_VAR 0 12
31546: PUSH
31547: LD_INT 1
31549: ARRAY
31550: PPUSH
31551: CALL_OW 115
// end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
31555: LD_VAR 0 4
31559: PUSH
31560: LD_VAR 0 7
31564: ARRAY
31565: PPUSH
31566: CALL_OW 256
31570: PUSH
31571: LD_INT 250
31573: LESS
31574: PUSH
31575: LD_VAR 0 4
31579: PUSH
31580: LD_VAR 0 7
31584: ARRAY
31585: PUSH
31586: LD_INT 21
31588: PUSH
31589: LD_INT 2
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 23
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: CALL_OW 69
31614: IN
31615: AND
31616: IFFALSE 31741
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
31618: LD_ADDR_VAR 0 9
31622: PUSH
31623: LD_OWVAR 3
31627: PUSH
31628: LD_VAR 0 4
31632: PUSH
31633: LD_VAR 0 7
31637: ARRAY
31638: DIFF
31639: PPUSH
31640: LD_VAR 0 4
31644: PUSH
31645: LD_VAR 0 7
31649: ARRAY
31650: PPUSH
31651: CALL_OW 74
31655: ST_TO_ADDR
// if not k then
31656: LD_VAR 0 9
31660: NOT
31661: IFFALSE 31665
// continue ;
31663: GO 29449
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
31665: LD_VAR 0 9
31669: PUSH
31670: LD_INT 81
31672: PUSH
31673: LD_VAR 0 4
31677: PUSH
31678: LD_VAR 0 7
31682: ARRAY
31683: PPUSH
31684: CALL_OW 255
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PPUSH
31693: CALL_OW 69
31697: IN
31698: PUSH
31699: LD_VAR 0 9
31703: PPUSH
31704: LD_VAR 0 4
31708: PUSH
31709: LD_VAR 0 7
31713: ARRAY
31714: PPUSH
31715: CALL_OW 296
31719: PUSH
31720: LD_INT 5
31722: LESS
31723: AND
31724: IFFALSE 31741
// ComAutodestruct ( group [ i ] ) ;
31726: LD_VAR 0 4
31730: PUSH
31731: LD_VAR 0 7
31735: ARRAY
31736: PPUSH
31737: CALL 28021 0 1
// end ; if f_attack_depot then
31741: LD_VAR 0 23
31745: IFFALSE 31857
// begin k := 6 ;
31747: LD_ADDR_VAR 0 9
31751: PUSH
31752: LD_INT 6
31754: ST_TO_ADDR
// if tmp < k then
31755: LD_VAR 0 12
31759: PUSH
31760: LD_VAR 0 9
31764: LESS
31765: IFFALSE 31777
// k := tmp ;
31767: LD_ADDR_VAR 0 9
31771: PUSH
31772: LD_VAR 0 12
31776: ST_TO_ADDR
// for j = 1 to k do
31777: LD_ADDR_VAR 0 8
31781: PUSH
31782: DOUBLE
31783: LD_INT 1
31785: DEC
31786: ST_TO_ADDR
31787: LD_VAR 0 9
31791: PUSH
31792: FOR_TO
31793: IFFALSE 31855
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
31795: LD_VAR 0 8
31799: PPUSH
31800: CALL_OW 266
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: IN
31815: IFFALSE 31853
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
31817: LD_VAR 0 4
31821: PUSH
31822: LD_VAR 0 7
31826: ARRAY
31827: PPUSH
31828: LD_VAR 0 12
31832: PUSH
31833: LD_VAR 0 8
31837: ARRAY
31838: PPUSH
31839: CALL_OW 115
// attacking := true ;
31843: LD_ADDR_VAR 0 27
31847: PUSH
31848: LD_INT 1
31850: ST_TO_ADDR
// break ;
31851: GO 31855
// end ;
31853: GO 31792
31855: POP
31856: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
31857: LD_VAR 0 4
31861: PUSH
31862: LD_VAR 0 7
31866: ARRAY
31867: PPUSH
31868: CALL_OW 302
31872: PUSH
31873: LD_VAR 0 27
31877: NOT
31878: AND
31879: IFFALSE 32087
// begin k := 8 ;
31881: LD_ADDR_VAR 0 9
31885: PUSH
31886: LD_INT 8
31888: ST_TO_ADDR
// x := 0 ;
31889: LD_ADDR_VAR 0 10
31893: PUSH
31894: LD_INT 0
31896: ST_TO_ADDR
// if tmp < k then
31897: LD_VAR 0 12
31901: PUSH
31902: LD_VAR 0 9
31906: LESS
31907: IFFALSE 31919
// k := tmp ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: LD_VAR 0 12
31918: ST_TO_ADDR
// for j = 1 to k do
31919: LD_ADDR_VAR 0 8
31923: PUSH
31924: DOUBLE
31925: LD_INT 1
31927: DEC
31928: ST_TO_ADDR
31929: LD_VAR 0 9
31933: PUSH
31934: FOR_TO
31935: IFFALSE 32033
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
31937: LD_VAR 0 12
31941: PUSH
31942: LD_VAR 0 8
31946: ARRAY
31947: PPUSH
31948: CALL_OW 247
31952: PUSH
31953: LD_INT 1
31955: EQUAL
31956: PUSH
31957: LD_VAR 0 12
31961: PUSH
31962: LD_VAR 0 8
31966: ARRAY
31967: PPUSH
31968: CALL_OW 256
31972: PUSH
31973: LD_INT 250
31975: LESS
31976: PUSH
31977: LD_VAR 0 18
31981: AND
31982: PUSH
31983: LD_VAR 0 18
31987: NOT
31988: PUSH
31989: LD_VAR 0 12
31993: PUSH
31994: LD_VAR 0 8
31998: ARRAY
31999: PPUSH
32000: CALL_OW 256
32004: PUSH
32005: LD_INT 250
32007: GREATEREQUAL
32008: AND
32009: OR
32010: AND
32011: IFFALSE 32031
// begin x := tmp [ j ] ;
32013: LD_ADDR_VAR 0 10
32017: PUSH
32018: LD_VAR 0 12
32022: PUSH
32023: LD_VAR 0 8
32027: ARRAY
32028: ST_TO_ADDR
// break ;
32029: GO 32033
// end ;
32031: GO 31934
32033: POP
32034: POP
// if x then
32035: LD_VAR 0 10
32039: IFFALSE 32063
// ComAttackUnit ( group [ i ] , x ) else
32041: LD_VAR 0 4
32045: PUSH
32046: LD_VAR 0 7
32050: ARRAY
32051: PPUSH
32052: LD_VAR 0 10
32056: PPUSH
32057: CALL_OW 115
32061: GO 32087
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
32063: LD_VAR 0 4
32067: PUSH
32068: LD_VAR 0 7
32072: ARRAY
32073: PPUSH
32074: LD_VAR 0 12
32078: PUSH
32079: LD_INT 1
32081: ARRAY
32082: PPUSH
32083: CALL_OW 115
// end ; end ; end ;
32087: GO 29449
32089: POP
32090: POP
// wait ( 0 0$1 ) ;
32091: LD_INT 35
32093: PPUSH
32094: CALL_OW 67
// until group = [ ] ;
32098: LD_VAR 0 4
32102: PUSH
32103: EMPTY
32104: EQUAL
32105: IFFALSE 29434
// end ;
32107: LD_VAR 0 2
32111: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , un , tmp , mechs , e ; begin
32112: LD_INT 0
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
// if not defenders then
32121: LD_VAR 0 2
32125: NOT
32126: IFFALSE 32130
// exit ;
32128: GO 32654
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
32130: LD_ADDR_VAR 0 9
32134: PUSH
32135: LD_EXP 44
32139: PUSH
32140: LD_VAR 0 1
32144: ARRAY
32145: PPUSH
32146: LD_INT 25
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PPUSH
32156: CALL_OW 72
32160: ST_TO_ADDR
// if mechs then
32161: LD_VAR 0 9
32165: IFFALSE 32264
// for i in defenders do
32167: LD_ADDR_VAR 0 5
32171: PUSH
32172: LD_VAR 0 2
32176: PUSH
32177: FOR_IN
32178: IFFALSE 32262
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
32180: LD_VAR 0 5
32184: PPUSH
32185: CALL_OW 263
32189: PUSH
32190: LD_INT 1
32192: EQUAL
32193: PUSH
32194: LD_VAR 0 5
32198: PPUSH
32199: CALL_OW 311
32203: NOT
32204: AND
32205: IFFALSE 32260
// begin un := mechs [ 1 ] ;
32207: LD_ADDR_VAR 0 7
32211: PUSH
32212: LD_VAR 0 9
32216: PUSH
32217: LD_INT 1
32219: ARRAY
32220: ST_TO_ADDR
// ComExitBuilding ( un ) ;
32221: LD_VAR 0 7
32225: PPUSH
32226: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
32230: LD_VAR 0 7
32234: PPUSH
32235: LD_VAR 0 5
32239: PPUSH
32240: CALL_OW 180
// mechs := mechs diff un ;
32244: LD_ADDR_VAR 0 9
32248: PUSH
32249: LD_VAR 0 9
32253: PUSH
32254: LD_VAR 0 7
32258: DIFF
32259: ST_TO_ADDR
// end ;
32260: GO 32177
32262: POP
32263: POP
// repeat wait ( 0 0$1 ) ;
32264: LD_INT 35
32266: PPUSH
32267: CALL_OW 67
// enemy := mc_scan [ base ] ;
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_EXP 63
32280: PUSH
32281: LD_VAR 0 1
32285: ARRAY
32286: ST_TO_ADDR
// for i in defenders do
32287: LD_ADDR_VAR 0 5
32291: PUSH
32292: LD_VAR 0 2
32296: PUSH
32297: FOR_IN
32298: IFFALSE 32444
// begin e := NearestUnitToUnit ( enemy , i ) ;
32300: LD_ADDR_VAR 0 10
32304: PUSH
32305: LD_VAR 0 3
32309: PPUSH
32310: LD_VAR 0 5
32314: PPUSH
32315: CALL_OW 74
32319: ST_TO_ADDR
// if not WantsToAttack ( i ) and IsOk ( i ) and GetDistUnits ( i , e ) < 30 then
32320: LD_VAR 0 5
32324: PPUSH
32325: CALL_OW 319
32329: NOT
32330: PUSH
32331: LD_VAR 0 5
32335: PPUSH
32336: CALL_OW 302
32340: AND
32341: PUSH
32342: LD_VAR 0 5
32346: PPUSH
32347: LD_VAR 0 10
32351: PPUSH
32352: CALL_OW 296
32356: PUSH
32357: LD_INT 30
32359: LESS
32360: AND
32361: IFFALSE 32379
// ComAttackUnit ( i , e ) else
32363: LD_VAR 0 5
32367: PPUSH
32368: LD_VAR 0 10
32372: PPUSH
32373: CALL_OW 115
32377: GO 32442
// if GetDistUnits ( i , e ) >= 30 and not IsInArea ( i , mc_parking [ base ] ) then
32379: LD_VAR 0 5
32383: PPUSH
32384: LD_VAR 0 10
32388: PPUSH
32389: CALL_OW 296
32393: PUSH
32394: LD_INT 30
32396: GREATEREQUAL
32397: PUSH
32398: LD_VAR 0 5
32402: PPUSH
32403: LD_EXP 64
32407: PUSH
32408: LD_VAR 0 1
32412: ARRAY
32413: PPUSH
32414: CALL_OW 308
32418: NOT
32419: AND
32420: IFFALSE 32442
// ComMoveToArea ( i , mc_parking [ base ] ) ;
32422: LD_VAR 0 5
32426: PPUSH
32427: LD_EXP 64
32431: PUSH
32432: LD_VAR 0 1
32436: ARRAY
32437: PPUSH
32438: CALL_OW 113
// end ;
32442: GO 32297
32444: POP
32445: POP
// until not enemy or not defenders ;
32446: LD_VAR 0 3
32450: NOT
32451: PUSH
32452: LD_VAR 0 2
32456: NOT
32457: OR
32458: IFFALSE 32264
// if not enemy and defenders then
32460: LD_VAR 0 3
32464: NOT
32465: PUSH
32466: LD_VAR 0 2
32470: AND
32471: IFFALSE 32629
// repeat wait ( 0 0$1 ) ;
32473: LD_INT 35
32475: PPUSH
32476: CALL_OW 67
// for i in defenders do
32480: LD_ADDR_VAR 0 5
32484: PUSH
32485: LD_VAR 0 2
32489: PUSH
32490: FOR_IN
32491: IFFALSE 32580
// begin if not IsInArea ( i , mc_parking [ base ] ) then
32493: LD_VAR 0 5
32497: PPUSH
32498: LD_EXP 64
32502: PUSH
32503: LD_VAR 0 1
32507: ARRAY
32508: PPUSH
32509: CALL_OW 308
32513: NOT
32514: IFFALSE 32538
// ComMoveToArea ( i , mc_parking [ base ] ) else
32516: LD_VAR 0 5
32520: PPUSH
32521: LD_EXP 64
32525: PUSH
32526: LD_VAR 0 1
32530: ARRAY
32531: PPUSH
32532: CALL_OW 113
32536: GO 32578
// if GetControl ( i ) = control_manual then
32538: LD_VAR 0 5
32542: PPUSH
32543: CALL_OW 263
32547: PUSH
32548: LD_INT 1
32550: EQUAL
32551: IFFALSE 32578
// if IsDrivenBy ( i ) then
32553: LD_VAR 0 5
32557: PPUSH
32558: CALL_OW 311
32562: IFFALSE 32578
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
32564: LD_VAR 0 5
32568: PPUSH
32569: CALL_OW 311
32573: PPUSH
32574: CALL_OW 121
// end ;
32578: GO 32490
32580: POP
32581: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
32582: LD_VAR 0 2
32586: PPUSH
32587: LD_INT 95
32589: PUSH
32590: LD_EXP 64
32594: PUSH
32595: LD_VAR 0 1
32599: ARRAY
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PPUSH
32605: CALL_OW 72
32609: PUSH
32610: LD_VAR 0 2
32614: EQUAL
32615: PUSH
32616: LD_EXP 63
32620: PUSH
32621: LD_VAR 0 1
32625: ARRAY
32626: OR
32627: IFFALSE 32473
// mc_defender := Replace ( mc_defender , base , defenders ) ;
32629: LD_ADDR_EXP 62
32633: PUSH
32634: LD_EXP 62
32638: PPUSH
32639: LD_VAR 0 1
32643: PPUSH
32644: LD_VAR 0 2
32648: PPUSH
32649: CALL_OW 1
32653: ST_TO_ADDR
// end ;
32654: LD_VAR 0 4
32658: RET
// export function ScanBase ( base_units ) ; var i , t , tmp ; begin
32659: LD_INT 0
32661: PPUSH
32662: PPUSH
32663: PPUSH
32664: PPUSH
// if not base_units then
32665: LD_VAR 0 1
32669: NOT
32670: IFFALSE 32674
// exit ;
32672: GO 32761
// result := false ;
32674: LD_ADDR_VAR 0 2
32678: PUSH
32679: LD_INT 0
32681: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
32682: LD_ADDR_VAR 0 5
32686: PUSH
32687: LD_VAR 0 1
32691: PPUSH
32692: LD_INT 21
32694: PUSH
32695: LD_INT 3
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 72
32706: ST_TO_ADDR
// if not tmp then
32707: LD_VAR 0 5
32711: NOT
32712: IFFALSE 32716
// exit ;
32714: GO 32761
// for i in tmp do
32716: LD_ADDR_VAR 0 3
32720: PUSH
32721: LD_VAR 0 5
32725: PUSH
32726: FOR_IN
32727: IFFALSE 32759
// begin result := EnemyInRange ( i , 18 ) ;
32729: LD_ADDR_VAR 0 2
32733: PUSH
32734: LD_VAR 0 3
32738: PPUSH
32739: LD_INT 18
32741: PPUSH
32742: CALL 27767 0 2
32746: ST_TO_ADDR
// if result then
32747: LD_VAR 0 2
32751: IFFALSE 32757
// exit ;
32753: POP
32754: POP
32755: GO 32761
// end ;
32757: GO 32726
32759: POP
32760: POP
// end ;
32761: LD_VAR 0 2
32765: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32766: LD_INT 0
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
// result := false ;
32772: LD_ADDR_VAR 0 2
32776: PUSH
32777: LD_INT 0
32779: ST_TO_ADDR
// side := GetSide ( unit ) ;
32780: LD_ADDR_VAR 0 3
32784: PUSH
32785: LD_VAR 0 1
32789: PPUSH
32790: CALL_OW 255
32794: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32795: LD_ADDR_VAR 0 4
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 248
32809: ST_TO_ADDR
// case nat of 1 :
32810: LD_VAR 0 4
32814: PUSH
32815: LD_INT 1
32817: DOUBLE
32818: EQUAL
32819: IFTRUE 32823
32821: GO 32834
32823: POP
// tech := tech_lassight ; 2 :
32824: LD_ADDR_VAR 0 5
32828: PUSH
32829: LD_INT 12
32831: ST_TO_ADDR
32832: GO 32873
32834: LD_INT 2
32836: DOUBLE
32837: EQUAL
32838: IFTRUE 32842
32840: GO 32853
32842: POP
// tech := tech_mortar ; 3 :
32843: LD_ADDR_VAR 0 5
32847: PUSH
32848: LD_INT 41
32850: ST_TO_ADDR
32851: GO 32873
32853: LD_INT 3
32855: DOUBLE
32856: EQUAL
32857: IFTRUE 32861
32859: GO 32872
32861: POP
// tech := tech_bazooka ; end ;
32862: LD_ADDR_VAR 0 5
32866: PUSH
32867: LD_INT 44
32869: ST_TO_ADDR
32870: GO 32873
32872: POP
// if Researched ( side , tech ) then
32873: LD_VAR 0 3
32877: PPUSH
32878: LD_VAR 0 5
32882: PPUSH
32883: CALL_OW 325
32887: IFFALSE 32914
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32889: LD_ADDR_VAR 0 2
32893: PUSH
32894: LD_INT 5
32896: PUSH
32897: LD_INT 8
32899: PUSH
32900: LD_INT 9
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: PUSH
32908: LD_VAR 0 4
32912: ARRAY
32913: ST_TO_ADDR
// end ; end_of_file
32914: LD_VAR 0 2
32918: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba ; export function PrepareArabian ; var i , d , un , skill ; begin
32919: LD_INT 0
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
// skill := [ 6 , 7 , 8 ] [ Difficulty ] ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_INT 6
32933: PUSH
32934: LD_INT 7
32936: PUSH
32937: LD_INT 8
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: PUSH
32945: LD_OWVAR 67
32949: ARRAY
32950: ST_TO_ADDR
// ComLinkToBase ( [ ar_dep_e ] , 141 ) ;
32951: LD_INT 69
32953: PUSH
32954: EMPTY
32955: LIST
32956: PPUSH
32957: LD_INT 141
32959: PPUSH
32960: CALL_OW 169
// Wait ( 1 ) ;
32964: LD_INT 1
32966: PPUSH
32967: CALL_OW 67
// uc_side := 2 ;
32971: LD_ADDR_OWVAR 20
32975: PUSH
32976: LD_INT 2
32978: ST_TO_ADDR
// uc_nation := 2 ;
32979: LD_ADDR_OWVAR 21
32983: PUSH
32984: LD_INT 2
32986: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
32987: LD_ADDR_OWVAR 37
32991: PUSH
32992: LD_INT 14
32994: ST_TO_ADDR
// vc_engine := engine_siberite ;
32995: LD_ADDR_OWVAR 39
32999: PUSH
33000: LD_INT 3
33002: ST_TO_ADDR
// vc_control := control_manual ;
33003: LD_ADDR_OWVAR 38
33007: PUSH
33008: LD_INT 1
33010: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
33011: LD_ADDR_OWVAR 40
33015: PUSH
33016: LD_INT 31
33018: ST_TO_ADDR
// for i = 1 to 3 do
33019: LD_ADDR_VAR 0 2
33023: PUSH
33024: DOUBLE
33025: LD_INT 1
33027: DEC
33028: ST_TO_ADDR
33029: LD_INT 3
33031: PUSH
33032: FOR_TO
33033: IFFALSE 33117
// begin PrepareHuman ( false , class_mechanic , skill ) ;
33035: LD_INT 0
33037: PPUSH
33038: LD_INT 3
33040: PPUSH
33041: LD_VAR 0 5
33045: PPUSH
33046: CALL_OW 380
// un := CreateVehicle ;
33050: LD_ADDR_VAR 0 4
33054: PUSH
33055: CALL_OW 45
33059: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33060: LD_VAR 0 4
33064: PPUSH
33065: LD_INT 0
33067: PPUSH
33068: LD_INT 5
33070: PPUSH
33071: CALL_OW 12
33075: PPUSH
33076: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
33080: LD_VAR 0 4
33084: PPUSH
33085: LD_INT 156
33087: PPUSH
33088: LD_INT 15
33090: PPUSH
33091: LD_INT 6
33093: PPUSH
33094: LD_INT 0
33096: PPUSH
33097: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
33101: CALL_OW 44
33105: PPUSH
33106: LD_VAR 0 4
33110: PPUSH
33111: CALL_OW 52
// end ;
33115: GO 33032
33117: POP
33118: POP
// ar_force_north := PrepareBase ( ar_dep_n , dammam , skill , [ 10000 , 1000 , 300 ] , [ - 1 , - 1 , - 1 , 4 ] ) ;
33119: LD_ADDR_EXP 34
33123: PUSH
33124: LD_INT 94
33126: PPUSH
33127: LD_STRING dammam
33129: PPUSH
33130: LD_VAR 0 5
33134: PPUSH
33135: LD_INT 10000
33137: PUSH
33138: LD_INT 1000
33140: PUSH
33141: LD_INT 300
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: PPUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 4
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: PPUSH
33170: CALL 6002 0 5
33174: ST_TO_ADDR
// ar_force_north := ar_force_north ^ PrepareBase ( ar_dep_n2 ,  , skill , [ 100 , 60 , 0 ] , [ - 1 , 4 , 0 , 0 ] ) ;
33175: LD_ADDR_EXP 34
33179: PUSH
33180: LD_EXP 34
33184: PUSH
33185: LD_INT 122
33187: PPUSH
33188: LD_STRING 
33190: PPUSH
33191: LD_VAR 0 5
33195: PPUSH
33196: LD_INT 100
33198: PUSH
33199: LD_INT 60
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: PPUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 4
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: PPUSH
33229: CALL 6002 0 5
33233: ADD
33234: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , jeddah , skill , [ 700 , 300 , 10 ] , [ - 1 , 5 , 3 , 2 ] ) ;
33235: LD_ADDR_EXP 32
33239: PUSH
33240: LD_INT 45
33242: PPUSH
33243: LD_STRING jeddah
33245: PPUSH
33246: LD_VAR 0 5
33250: PPUSH
33251: LD_INT 700
33253: PUSH
33254: LD_INT 300
33256: PUSH
33257: LD_INT 10
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: LIST
33264: PPUSH
33265: LD_INT 1
33267: NEG
33268: PUSH
33269: LD_INT 5
33271: PUSH
33272: LD_INT 3
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: PPUSH
33284: CALL 6002 0 5
33288: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
33289: LD_ADDR_EXP 33
33293: PUSH
33294: LD_INT 7
33296: PPUSH
33297: LD_STRING riyadh
33299: PPUSH
33300: LD_VAR 0 5
33304: PPUSH
33305: LD_INT 500
33307: PUSH
33308: LD_INT 60
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: LIST
33318: PPUSH
33319: LD_INT 4
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: LD_INT 3
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL 6002 0 5
33341: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e ,  , skill , [ 500 , 50 , 0 ] , [ - 1 , 3 , 3 , 2 ] ) ;
33342: LD_ADDR_EXP 35
33346: PUSH
33347: LD_INT 69
33349: PPUSH
33350: LD_STRING 
33352: PPUSH
33353: LD_VAR 0 5
33357: PPUSH
33358: LD_INT 500
33360: PUSH
33361: LD_INT 50
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: PPUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 3
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: PPUSH
33391: CALL 6002 0 5
33395: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
33396: LD_ADDR_EXP 44
33400: PUSH
33401: LD_EXP 34
33405: PUSH
33406: LD_EXP 32
33410: PUSH
33411: LD_EXP 35
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: LIST
33420: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
33421: LD_ADDR_VAR 0 2
33425: PUSH
33426: LD_INT 22
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 30
33438: PUSH
33439: LD_INT 31
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 58
33448: PUSH
33449: EMPTY
33450: LIST
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: LIST
33456: PPUSH
33457: CALL_OW 69
33461: PUSH
33462: FOR_IN
33463: IFFALSE 33588
// begin if GetBase ( i ) then
33465: LD_VAR 0 2
33469: PPUSH
33470: CALL_OW 274
33474: IFFALSE 33478
// continue ;
33476: GO 33462
// d := GetDir ( i ) ;
33478: LD_ADDR_VAR 0 3
33482: PUSH
33483: LD_VAR 0 2
33487: PPUSH
33488: CALL_OW 254
33492: ST_TO_ADDR
// if d < 3 then
33493: LD_VAR 0 3
33497: PUSH
33498: LD_INT 3
33500: LESS
33501: IFFALSE 33519
// d := d + 3 else
33503: LD_ADDR_VAR 0 3
33507: PUSH
33508: LD_VAR 0 3
33512: PUSH
33513: LD_INT 3
33515: PLUS
33516: ST_TO_ADDR
33517: GO 33533
// d := d - 3 ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_VAR 0 3
33528: PUSH
33529: LD_INT 3
33531: MINUS
33532: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
33533: LD_INT 0
33535: PPUSH
33536: LD_INT 8
33538: PPUSH
33539: LD_VAR 0 5
33543: PPUSH
33544: CALL_OW 380
// un := CreateHuman ;
33548: LD_ADDR_VAR 0 4
33552: PUSH
33553: CALL_OW 44
33557: ST_TO_ADDR
// SetDir ( un , d ) ;
33558: LD_VAR 0 4
33562: PPUSH
33563: LD_VAR 0 3
33567: PPUSH
33568: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
33572: LD_VAR 0 4
33576: PPUSH
33577: LD_VAR 0 2
33581: PPUSH
33582: CALL_OW 52
// end ;
33586: GO 33462
33588: POP
33589: POP
// if Difficulty > 1 then
33590: LD_OWVAR 67
33594: PUSH
33595: LD_INT 1
33597: GREATER
33598: IFFALSE 33969
// begin ar_kamikadze := [ ] ;
33600: LD_ADDR_EXP 38
33604: PUSH
33605: EMPTY
33606: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
33607: LD_INT 0
33609: PPUSH
33610: LD_INT 1
33612: PPUSH
33613: LD_VAR 0 5
33617: PPUSH
33618: CALL_OW 380
// un := CreateHuman ;
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: CALL_OW 44
33631: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33632: LD_VAR 0 4
33636: PPUSH
33637: LD_INT 3
33639: PPUSH
33640: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
33644: LD_VAR 0 4
33648: PPUSH
33649: LD_INT 23
33651: PPUSH
33652: LD_INT 44
33654: PPUSH
33655: LD_INT 0
33657: PPUSH
33658: CALL_OW 48
// ComCrawl ( un ) ;
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 137
// un := CreateHuman ;
33671: LD_ADDR_VAR 0 4
33675: PUSH
33676: CALL_OW 44
33680: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33681: LD_VAR 0 4
33685: PPUSH
33686: LD_INT 3
33688: PPUSH
33689: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
33693: LD_VAR 0 4
33697: PPUSH
33698: LD_INT 30
33700: PPUSH
33701: LD_INT 39
33703: PPUSH
33704: LD_INT 0
33706: PPUSH
33707: CALL_OW 48
// ComCrawl ( un ) ;
33711: LD_VAR 0 4
33715: PPUSH
33716: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
33720: LD_INT 0
33722: PPUSH
33723: LD_INT 17
33725: PPUSH
33726: LD_VAR 0 5
33730: PPUSH
33731: CALL_OW 380
// un := CreateHuman ;
33735: LD_ADDR_VAR 0 4
33739: PUSH
33740: CALL_OW 44
33744: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33745: LD_VAR 0 4
33749: PPUSH
33750: LD_INT 3
33752: PPUSH
33753: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
33757: LD_VAR 0 4
33761: PPUSH
33762: LD_INT 45
33764: PPUSH
33765: LD_INT 86
33767: PPUSH
33768: LD_INT 0
33770: PPUSH
33771: CALL_OW 48
// ComHold ( un ) ;
33775: LD_VAR 0 4
33779: PPUSH
33780: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
33784: LD_ADDR_EXP 38
33788: PUSH
33789: LD_EXP 38
33793: PPUSH
33794: LD_EXP 38
33798: PUSH
33799: LD_INT 1
33801: PLUS
33802: PPUSH
33803: LD_VAR 0 4
33807: PPUSH
33808: CALL_OW 1
33812: ST_TO_ADDR
// un := CreateHuman ;
33813: LD_ADDR_VAR 0 4
33817: PUSH
33818: CALL_OW 44
33822: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33823: LD_VAR 0 4
33827: PPUSH
33828: LD_INT 3
33830: PPUSH
33831: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
33835: LD_VAR 0 4
33839: PPUSH
33840: LD_INT 60
33842: PPUSH
33843: LD_INT 85
33845: PPUSH
33846: LD_INT 0
33848: PPUSH
33849: CALL_OW 48
// ComHold ( un ) ;
33853: LD_VAR 0 4
33857: PPUSH
33858: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
33862: LD_ADDR_EXP 38
33866: PUSH
33867: LD_EXP 38
33871: PPUSH
33872: LD_EXP 38
33876: PUSH
33877: LD_INT 1
33879: PLUS
33880: PPUSH
33881: LD_VAR 0 4
33885: PPUSH
33886: CALL_OW 1
33890: ST_TO_ADDR
// un := CreateHuman ;
33891: LD_ADDR_VAR 0 4
33895: PUSH
33896: CALL_OW 44
33900: ST_TO_ADDR
// SetDir ( un , 3 ) ;
33901: LD_VAR 0 4
33905: PPUSH
33906: LD_INT 3
33908: PPUSH
33909: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
33913: LD_VAR 0 4
33917: PPUSH
33918: LD_INT 222
33920: PPUSH
33921: LD_INT 166
33923: PPUSH
33924: LD_INT 0
33926: PPUSH
33927: CALL_OW 48
// ComHold ( un ) ;
33931: LD_VAR 0 4
33935: PPUSH
33936: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
33940: LD_ADDR_EXP 38
33944: PUSH
33945: LD_EXP 38
33949: PPUSH
33950: LD_EXP 38
33954: PUSH
33955: LD_INT 1
33957: PLUS
33958: PPUSH
33959: LD_VAR 0 4
33963: PPUSH
33964: CALL_OW 1
33968: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
33969: LD_ADDR_EXP 36
33973: PUSH
33974: EMPTY
33975: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
33976: LD_INT 1
33978: PPUSH
33979: LD_INT 1
33981: PPUSH
33982: LD_VAR 0 5
33986: PPUSH
33987: CALL_OW 380
// hc_gallery := SecondCharsGal ;
33991: LD_ADDR_OWVAR 33
33995: PUSH
33996: LD_STRING SecondCharsGal
33998: ST_TO_ADDR
// hc_face_number := 4 ;
33999: LD_ADDR_OWVAR 34
34003: PUSH
34004: LD_INT 4
34006: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
34007: LD_ADDR_EXP 36
34011: PUSH
34012: LD_EXP 36
34016: PPUSH
34017: LD_INT 1
34019: PPUSH
34020: CALL_OW 44
34024: PPUSH
34025: CALL_OW 1
34029: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34030: LD_INT 2
34032: PPUSH
34033: LD_INT 4
34035: PPUSH
34036: LD_VAR 0 5
34040: PPUSH
34041: CALL_OW 380
// hc_gallery := SecondCharsGal ;
34045: LD_ADDR_OWVAR 33
34049: PUSH
34050: LD_STRING SecondCharsGal
34052: ST_TO_ADDR
// hc_face_number := 15 ;
34053: LD_ADDR_OWVAR 34
34057: PUSH
34058: LD_INT 15
34060: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
34061: LD_ADDR_EXP 36
34065: PUSH
34066: LD_EXP 36
34070: PPUSH
34071: LD_INT 2
34073: PPUSH
34074: CALL_OW 44
34078: PPUSH
34079: CALL_OW 1
34083: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
34084: LD_INT 2
34086: PPUSH
34087: LD_INT 4
34089: PPUSH
34090: LD_VAR 0 5
34094: PPUSH
34095: CALL_OW 380
// hc_gallery :=  ;
34099: LD_ADDR_OWVAR 33
34103: PUSH
34104: LD_STRING 
34106: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
34107: LD_ADDR_EXP 36
34111: PUSH
34112: LD_EXP 36
34116: PPUSH
34117: LD_INT 3
34119: PPUSH
34120: CALL_OW 44
34124: PPUSH
34125: CALL_OW 1
34129: ST_TO_ADDR
// hc_sex := sex_male ;
34130: LD_ADDR_OWVAR 27
34134: PUSH
34135: LD_INT 1
34137: ST_TO_ADDR
// hc_class = 11 ;
34138: LD_ADDR_OWVAR 28
34142: PUSH
34143: LD_INT 11
34145: ST_TO_ADDR
// hc_gallery = sandar ;
34146: LD_ADDR_OWVAR 33
34150: PUSH
34151: LD_STRING sandar
34153: ST_TO_ADDR
// hc_face_number = 33 ;
34154: LD_ADDR_OWVAR 34
34158: PUSH
34159: LD_INT 33
34161: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
34162: LD_ADDR_OWVAR 26
34166: PUSH
34167: LD_STRING Thabit Muhair Saliba
34169: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
34170: LD_ADDR_OWVAR 31
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
// Saliba = CreateHuman ;
34193: LD_ADDR_EXP 40
34197: PUSH
34198: CALL_OW 44
34202: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
34203: LD_EXP 40
34207: PPUSH
34208: LD_INT 7
34210: PPUSH
34211: CALL_OW 52
// ar_vehicles_tmp := [ ] ;
34215: LD_ADDR_EXP 37
34219: PUSH
34220: EMPTY
34221: ST_TO_ADDR
// for i = 1 to 4 do
34222: LD_ADDR_VAR 0 2
34226: PUSH
34227: DOUBLE
34228: LD_INT 1
34230: DEC
34231: ST_TO_ADDR
34232: LD_INT 4
34234: PUSH
34235: FOR_TO
34236: IFFALSE 34408
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
34238: LD_INT 13
34240: PUSH
34241: LD_INT 14
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 1
34250: PPUSH
34251: LD_INT 2
34253: PPUSH
34254: CALL_OW 12
34258: ARRAY
34259: PPUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 1
34272: PPUSH
34273: LD_INT 2
34275: PPUSH
34276: CALL_OW 12
34280: ARRAY
34281: PPUSH
34282: LD_INT 1
34284: PPUSH
34285: LD_INT 25
34287: PUSH
34288: LD_INT 27
34290: PUSH
34291: LD_INT 26
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: PPUSH
34302: LD_INT 3
34304: PPUSH
34305: CALL_OW 12
34309: ARRAY
34310: PPUSH
34311: LD_INT 60
34313: PPUSH
34314: LD_INT 100
34316: PPUSH
34317: CALL_OW 12
34321: PPUSH
34322: CALL 2039 0 5
// un := CreateVehicle ;
34326: LD_ADDR_VAR 0 4
34330: PUSH
34331: CALL_OW 45
34335: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
34336: LD_ADDR_EXP 37
34340: PUSH
34341: LD_EXP 37
34345: PPUSH
34346: LD_EXP 37
34350: PUSH
34351: LD_INT 1
34353: PLUS
34354: PPUSH
34355: LD_VAR 0 4
34359: PPUSH
34360: CALL_OW 1
34364: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34365: LD_VAR 0 4
34369: PPUSH
34370: LD_INT 0
34372: PPUSH
34373: LD_INT 5
34375: PPUSH
34376: CALL_OW 12
34380: PPUSH
34381: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 6 , false ) ;
34385: LD_VAR 0 4
34389: PPUSH
34390: LD_INT 124
34392: PPUSH
34393: LD_INT 141
34395: PPUSH
34396: LD_INT 6
34398: PPUSH
34399: LD_INT 0
34401: PPUSH
34402: CALL_OW 50
// end ;
34406: GO 34235
34408: POP
34409: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
34410: LD_ADDR_EXP 39
34414: PUSH
34415: EMPTY
34416: PUSH
34417: EMPTY
34418: PUSH
34419: EMPTY
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
34426: LD_ADDR_VAR 0 3
34430: PUSH
34431: DOUBLE
34432: LD_INT 1
34434: DEC
34435: ST_TO_ADDR
34436: LD_INT 3
34438: PUSH
34439: LD_INT 3
34441: PUSH
34442: LD_INT 4
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: PUSH
34450: LD_OWVAR 67
34454: ARRAY
34455: PUSH
34456: FOR_TO
34457: IFFALSE 34671
// for i = 1 to 3 do
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: DOUBLE
34465: LD_INT 1
34467: DEC
34468: ST_TO_ADDR
34469: LD_INT 3
34471: PUSH
34472: FOR_TO
34473: IFFALSE 34667
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
34475: LD_INT 14
34477: PPUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PPUSH
34491: LD_INT 2
34493: PPUSH
34494: CALL_OW 12
34498: ARRAY
34499: PPUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 5
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: PPUSH
34513: LD_INT 2
34515: PPUSH
34516: CALL_OW 12
34520: ARRAY
34521: PPUSH
34522: LD_INT 25
34524: PUSH
34525: LD_INT 27
34527: PUSH
34528: LD_INT 26
34530: PUSH
34531: LD_INT 28
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: PPUSH
34543: LD_INT 4
34545: PPUSH
34546: CALL_OW 12
34550: ARRAY
34551: PPUSH
34552: LD_INT 100
34554: PPUSH
34555: CALL 2039 0 5
// un := CreateVehicle ;
34559: LD_ADDR_VAR 0 4
34563: PUSH
34564: CALL_OW 45
34568: ST_TO_ADDR
// ar_defenders_tmp := Add ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
34569: LD_ADDR_EXP 39
34573: PUSH
34574: LD_EXP 39
34578: PPUSH
34579: LD_VAR 0 2
34583: PUSH
34584: LD_EXP 39
34588: PUSH
34589: LD_VAR 0 2
34593: ARRAY
34594: PUSH
34595: LD_INT 1
34597: PLUS
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PPUSH
34603: LD_VAR 0 4
34607: PPUSH
34608: CALL 3211 0 3
34612: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34613: LD_VAR 0 4
34617: PPUSH
34618: LD_INT 0
34620: PPUSH
34621: LD_INT 5
34623: PPUSH
34624: CALL_OW 12
34628: PPUSH
34629: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
34633: LD_VAR 0 4
34637: PPUSH
34638: LD_INT 20
34640: PUSH
34641: LD_INT 21
34643: PUSH
34644: LD_INT 22
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: PUSH
34652: LD_VAR 0 2
34656: ARRAY
34657: PPUSH
34658: LD_INT 0
34660: PPUSH
34661: CALL_OW 49
// end ;
34665: GO 34472
34667: POP
34668: POP
34669: GO 34456
34671: POP
34672: POP
// InitHc ;
34673: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
34677: LD_INT 4
34679: PPUSH
34680: LD_INT 5
34682: PPUSH
34683: LD_INT 10
34685: PPUSH
34686: LD_INT 5
34688: PPUSH
34689: LD_INT 0
34691: PPUSH
34692: CALL_OW 58
// end ;
34696: LD_VAR 0 1
34700: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
34701: LD_EXP 38
34705: IFFALSE 34779
34707: GO 34709
34709: DISABLE
34710: LD_INT 0
34712: PPUSH
// begin enable ;
34713: ENABLE
// for i in ar_kamikadze do
34714: LD_ADDR_VAR 0 1
34718: PUSH
34719: LD_EXP 38
34723: PUSH
34724: FOR_IN
34725: IFFALSE 34777
// if See ( 1 , i ) then
34727: LD_INT 1
34729: PPUSH
34730: LD_VAR 0 1
34734: PPUSH
34735: CALL_OW 292
34739: IFFALSE 34775
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
34741: LD_VAR 0 1
34745: PPUSH
34746: LD_INT 22
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PPUSH
34756: CALL_OW 69
34760: PPUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 74
34770: PPUSH
34771: CALL_OW 115
34775: GO 34724
34777: POP
34778: POP
// end ;
34779: PPOPN 1
34781: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
34782: LD_EXP 12
34786: IFFALSE 35103
34788: GO 34790
34790: DISABLE
34791: LD_INT 0
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
// begin repeat wait ( 0 0$1 ) ;
34797: LD_INT 35
34799: PPUSH
34800: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
34804: LD_INT 1
34806: PPUSH
34807: CALL 53035 0 1
34811: PUSH
34812: LD_INT 0
34814: EQUAL
34815: IFFALSE 34797
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
34817: LD_INT 1
34819: PPUSH
34820: LD_INT 14
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: LD_INT 32
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: PPUSH
34841: CALL 52824 0 2
// repeat wait ( 0 0$1 ) ;
34845: LD_INT 35
34847: PPUSH
34848: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
34852: LD_EXP 59
34856: PUSH
34857: LD_INT 1
34859: ARRAY
34860: PPUSH
34861: LD_INT 33
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 34
34873: PUSH
34874: LD_INT 32
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL_OW 72
34889: IFFALSE 34845
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
34891: LD_ADDR_VAR 0 2
34895: PUSH
34896: LD_EXP 59
34900: PUSH
34901: LD_INT 1
34903: ARRAY
34904: PPUSH
34905: LD_INT 33
34907: PUSH
34908: LD_INT 2
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 34
34917: PUSH
34918: LD_INT 32
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PPUSH
34929: CALL_OW 72
34933: PUSH
34934: LD_INT 1
34936: ARRAY
34937: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
34938: LD_ADDR_VAR 0 4
34942: PUSH
34943: LD_INT 5
34945: PPUSH
34946: CALL_OW 469
34950: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
34951: LD_INT 35
34953: PPUSH
34954: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
34958: LD_ADDR_VAR 0 4
34962: PUSH
34963: LD_INT 5
34965: PPUSH
34966: CALL_OW 469
34970: ST_TO_ADDR
// tmp := 100 ;
34971: LD_ADDR_VAR 0 3
34975: PUSH
34976: LD_INT 100
34978: ST_TO_ADDR
// if pos then
34979: LD_VAR 0 4
34983: IFFALSE 35023
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
34985: LD_ADDR_VAR 0 3
34989: PUSH
34990: LD_INT 2
34992: PPUSH
34993: LD_VAR 0 4
34997: PUSH
34998: LD_INT 1
35000: ARRAY
35001: PPUSH
35002: LD_VAR 0 4
35006: PUSH
35007: LD_INT 2
35009: ARRAY
35010: PPUSH
35011: LD_INT 20
35013: PPUSH
35014: CALL 3705 0 4
35018: PUSH
35019: LD_INT 4
35021: ARRAY
35022: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
35023: LD_VAR 0 4
35027: PUSH
35028: LD_EXP 13
35032: NOT
35033: AND
35034: PUSH
35035: LD_VAR 0 3
35039: PUSH
35040: LD_INT 10
35042: LESS
35043: AND
35044: IFFALSE 34951
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
35046: LD_VAR 0 2
35050: PPUSH
35051: LD_VAR 0 4
35055: PUSH
35056: LD_INT 1
35058: ARRAY
35059: PPUSH
35060: LD_VAR 0 4
35064: PUSH
35065: LD_INT 2
35067: ARRAY
35068: PPUSH
35069: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
35073: LD_VAR 0 2
35077: PPUSH
35078: LD_INT 198
35080: PPUSH
35081: LD_INT 113
35083: PPUSH
35084: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_INT 124
35095: PPUSH
35096: LD_INT 7
35098: PPUSH
35099: CALL_OW 171
// end ;
35103: PPOPN 4
35105: END
// every 12 12$00 do
35106: GO 35108
35108: DISABLE
// begin end ;
35109: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
35110: LD_EXP 6
35114: IFFALSE 37108
35116: GO 35118
35118: DISABLE
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
35129: LD_ADDR_VAR 0 4
35133: PUSH
35134: LD_INT 5
35136: PUSH
35137: LD_INT 6
35139: PUSH
35140: LD_INT 7
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: PUSH
35148: LD_OWVAR 67
35152: ARRAY
35153: ST_TO_ADDR
// coords := [ ] ;
35154: LD_ADDR_VAR 0 5
35158: PUSH
35159: EMPTY
35160: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
35161: LD_ADDR_VAR 0 6
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
35208: LD_INT 1
35210: PPUSH
35211: LD_INT 14
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 2
35219: PUSH
35220: LD_INT 28
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 14
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 25
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 14
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: LD_INT 28
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 14
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 2
35273: PUSH
35274: LD_INT 29
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: PPUSH
35289: CALL 52824 0 2
// wait ( [ 9 9$00 , 8 8$00 , 7 7$20 ] [ Difficulty ] ) ;
35293: LD_INT 18900
35295: PUSH
35296: LD_INT 16800
35298: PUSH
35299: LD_INT 15400
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: LIST
35306: PUSH
35307: LD_OWVAR 67
35311: ARRAY
35312: PPUSH
35313: CALL_OW 67
// InitHc ;
35317: CALL_OW 19
// InitUc ;
35321: CALL_OW 18
// uc_side := 2 ;
35325: LD_ADDR_OWVAR 20
35329: PUSH
35330: LD_INT 2
35332: ST_TO_ADDR
// uc_nation := 2 ;
35333: LD_ADDR_OWVAR 21
35337: PUSH
35338: LD_INT 2
35340: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] ] ;
35341: LD_ADDR_VAR 0 3
35345: PUSH
35346: EMPTY
35347: PUSH
35348: EMPTY
35349: PUSH
35350: EMPTY
35351: PUSH
35352: EMPTY
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_VAR 0 3
35369: PPUSH
35370: LD_INT 1
35372: PPUSH
35373: LD_EXP 59
35377: PUSH
35378: LD_INT 1
35380: ARRAY
35381: PUSH
35382: LD_INT 34
35384: PUSH
35385: LD_INT 32
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PPUSH
35392: CALL_OW 69
35396: DIFF
35397: PPUSH
35398: CALL_OW 1
35402: ST_TO_ADDR
// for i = 1 to Difficulty do
35403: LD_ADDR_VAR 0 1
35407: PUSH
35408: DOUBLE
35409: LD_INT 1
35411: DEC
35412: ST_TO_ADDR
35413: LD_OWVAR 67
35417: PUSH
35418: FOR_TO
35419: IFFALSE 35541
// begin PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
35421: LD_INT 13
35423: PPUSH
35424: LD_INT 3
35426: PPUSH
35427: LD_INT 5
35429: PPUSH
35430: LD_INT 29
35432: PPUSH
35433: LD_INT 100
35435: PPUSH
35436: CALL 2039 0 5
// un := CreateVehicle ;
35440: LD_ADDR_VAR 0 2
35444: PUSH
35445: CALL_OW 45
35449: ST_TO_ADDR
// tmp := Add ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
35450: LD_ADDR_VAR 0 3
35454: PUSH
35455: LD_VAR 0 3
35459: PPUSH
35460: LD_INT 1
35462: PUSH
35463: LD_VAR 0 3
35467: PUSH
35468: LD_INT 1
35470: ARRAY
35471: PUSH
35472: LD_INT 1
35474: PLUS
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PPUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: CALL 3211 0 3
35489: ST_TO_ADDR
// SetDir ( un , 3 ) ;
35490: LD_VAR 0 2
35494: PPUSH
35495: LD_INT 3
35497: PPUSH
35498: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
35502: LD_VAR 0 2
35506: PPUSH
35507: LD_INT 16
35509: PPUSH
35510: LD_INT 0
35512: PPUSH
35513: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
35517: LD_VAR 0 2
35521: PPUSH
35522: LD_INT 51
35524: PPUSH
35525: LD_INT 10
35527: PPUSH
35528: CALL_OW 111
// wait ( 0 0$2 ) ;
35532: LD_INT 70
35534: PPUSH
35535: CALL_OW 67
// end ;
35539: GO 35418
35541: POP
35542: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
35543: LD_ADDR_VAR 0 5
35547: PUSH
35548: LD_INT 51
35550: PUSH
35551: LD_INT 24
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 75
35560: PUSH
35561: LD_INT 90
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
35572: LD_INT 1
35574: PPUSH
35575: LD_VAR 0 3
35579: PUSH
35580: LD_INT 1
35582: ARRAY
35583: PPUSH
35584: LD_VAR 0 5
35588: PPUSH
35589: LD_VAR 0 6
35593: PPUSH
35594: CALL 52920 0 4
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
35598: LD_ADDR_VAR 0 1
35602: PUSH
35603: DOUBLE
35604: LD_INT 1
35606: DEC
35607: ST_TO_ADDR
35608: LD_INT 2
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: PUSH
35622: LD_OWVAR 67
35626: ARRAY
35627: PUSH
35628: FOR_TO
35629: IFFALSE 35713
// begin PrepareHuman ( false , 17 , skill ) ;
35631: LD_INT 0
35633: PPUSH
35634: LD_INT 17
35636: PPUSH
35637: LD_VAR 0 4
35641: PPUSH
35642: CALL_OW 380
// un := CreateHuman ;
35646: LD_ADDR_VAR 0 2
35650: PUSH
35651: CALL_OW 44
35655: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: LD_VAR 0 3
35665: PPUSH
35666: LD_INT 2
35668: PUSH
35669: LD_VAR 0 3
35673: PUSH
35674: LD_INT 2
35676: ARRAY
35677: PUSH
35678: LD_INT 1
35680: PLUS
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PPUSH
35686: LD_VAR 0 2
35690: PPUSH
35691: CALL 3211 0 3
35695: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
35696: LD_VAR 0 2
35700: PPUSH
35701: LD_INT 13
35703: PPUSH
35704: LD_INT 0
35706: PPUSH
35707: CALL_OW 49
// end ;
35711: GO 35628
35713: POP
35714: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
35715: LD_ADDR_VAR 0 1
35719: PUSH
35720: DOUBLE
35721: LD_INT 1
35723: DEC
35724: ST_TO_ADDR
35725: LD_INT 3
35727: PUSH
35728: LD_INT 4
35730: PUSH
35731: LD_INT 4
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PUSH
35739: LD_OWVAR 67
35743: ARRAY
35744: PUSH
35745: FOR_TO
35746: IFFALSE 35849
// begin PrepareHuman ( false , [ 1 , 8 ] [ rand ( 1 , 2 ) ] , skill ) ;
35748: LD_INT 0
35750: PPUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 8
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PPUSH
35764: LD_INT 2
35766: PPUSH
35767: CALL_OW 12
35771: ARRAY
35772: PPUSH
35773: LD_VAR 0 4
35777: PPUSH
35778: CALL_OW 380
// un := CreateHuman ;
35782: LD_ADDR_VAR 0 2
35786: PUSH
35787: CALL_OW 44
35791: ST_TO_ADDR
// tmp := Add ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
35792: LD_ADDR_VAR 0 3
35796: PUSH
35797: LD_VAR 0 3
35801: PPUSH
35802: LD_INT 2
35804: PUSH
35805: LD_VAR 0 3
35809: PUSH
35810: LD_INT 2
35812: ARRAY
35813: PUSH
35814: LD_INT 1
35816: PLUS
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PPUSH
35822: LD_VAR 0 2
35826: PPUSH
35827: CALL 3211 0 3
35831: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
35832: LD_VAR 0 2
35836: PPUSH
35837: LD_INT 13
35839: PPUSH
35840: LD_INT 0
35842: PPUSH
35843: CALL_OW 49
// end ;
35847: GO 35745
35849: POP
35850: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
35851: LD_ADDR_VAR 0 5
35855: PUSH
35856: LD_INT 67
35858: PUSH
35859: LD_INT 112
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 85
35868: PUSH
35869: LD_INT 130
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
35880: LD_INT 2
35882: PPUSH
35883: LD_VAR 0 3
35887: PUSH
35888: LD_INT 2
35890: ARRAY
35891: PPUSH
35892: LD_VAR 0 5
35896: PPUSH
35897: LD_VAR 0 6
35901: PPUSH
35902: CALL 52920 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
35906: LD_ADDR_VAR 0 1
35910: PUSH
35911: DOUBLE
35912: LD_INT 1
35914: DEC
35915: ST_TO_ADDR
35916: LD_INT 1
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_OWVAR 67
35934: ARRAY
35935: PUSH
35936: FOR_TO
35937: IFFALSE 36021
// begin PrepareHuman ( false , 17 , skill ) ;
35939: LD_INT 0
35941: PPUSH
35942: LD_INT 17
35944: PPUSH
35945: LD_VAR 0 4
35949: PPUSH
35950: CALL_OW 380
// un := CreateHuman ;
35954: LD_ADDR_VAR 0 2
35958: PUSH
35959: CALL_OW 44
35963: ST_TO_ADDR
// tmp := Add ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: LD_VAR 0 3
35973: PPUSH
35974: LD_INT 3
35976: PUSH
35977: LD_VAR 0 3
35981: PUSH
35982: LD_INT 3
35984: ARRAY
35985: PUSH
35986: LD_INT 1
35988: PLUS
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PPUSH
35994: LD_VAR 0 2
35998: PPUSH
35999: CALL 3211 0 3
36003: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
36004: LD_VAR 0 2
36008: PPUSH
36009: LD_INT 14
36011: PPUSH
36012: LD_INT 0
36014: PPUSH
36015: CALL_OW 49
// end ;
36019: GO 35936
36021: POP
36022: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
36023: LD_ADDR_VAR 0 5
36027: PUSH
36028: LD_INT 148
36030: PUSH
36031: LD_INT 158
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 148
36040: PUSH
36041: LD_INT 158
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
36052: LD_INT 3
36054: PPUSH
36055: LD_VAR 0 3
36059: PUSH
36060: LD_INT 3
36062: ARRAY
36063: PPUSH
36064: LD_VAR 0 5
36068: PPUSH
36069: LD_VAR 0 6
36073: PPUSH
36074: CALL 52920 0 4
// for i = 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
36078: LD_ADDR_VAR 0 1
36082: PUSH
36083: DOUBLE
36084: LD_INT 1
36086: DEC
36087: ST_TO_ADDR
36088: LD_INT 3
36090: PUSH
36091: LD_INT 4
36093: PUSH
36094: LD_INT 5
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: PUSH
36102: LD_OWVAR 67
36106: ARRAY
36107: PUSH
36108: FOR_TO
36109: IFFALSE 36317
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
36111: LD_INT 14
36113: PPUSH
36114: LD_INT 3
36116: PPUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 5
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PPUSH
36130: LD_INT 2
36132: PPUSH
36133: CALL_OW 12
36137: ARRAY
36138: PPUSH
36139: LD_INT 27
36141: PUSH
36142: LD_INT 26
36144: PUSH
36145: LD_INT 28
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: PPUSH
36156: LD_INT 3
36158: PPUSH
36159: CALL_OW 12
36163: ARRAY
36164: PPUSH
36165: LD_INT 100
36167: PPUSH
36168: CALL 2039 0 5
// un := CreateVehicle ;
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: CALL_OW 45
36181: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
36182: LD_ADDR_VAR 0 3
36186: PUSH
36187: LD_VAR 0 3
36191: PPUSH
36192: LD_INT 4
36194: PUSH
36195: LD_VAR 0 3
36199: PUSH
36200: LD_INT 4
36202: ARRAY
36203: PUSH
36204: LD_INT 1
36206: PLUS
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PPUSH
36212: LD_VAR 0 2
36216: PPUSH
36217: CALL 3211 0 3
36221: ST_TO_ADDR
// SetDir ( un , 5 ) ;
36222: LD_VAR 0 2
36226: PPUSH
36227: LD_INT 5
36229: PPUSH
36230: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
36234: LD_VAR 0 2
36238: PPUSH
36239: LD_INT 15
36241: PPUSH
36242: LD_INT 0
36244: PPUSH
36245: CALL_OW 49
// if GetControl ( un ) = control_manual then
36249: LD_VAR 0 2
36253: PPUSH
36254: CALL_OW 263
36258: PUSH
36259: LD_INT 1
36261: EQUAL
36262: IFFALSE 36293
// begin PrepareHuman ( false , 3 , skill ) ;
36264: LD_INT 0
36266: PPUSH
36267: LD_INT 3
36269: PPUSH
36270: LD_VAR 0 4
36274: PPUSH
36275: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
36279: CALL_OW 44
36283: PPUSH
36284: LD_VAR 0 2
36288: PPUSH
36289: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
36293: LD_VAR 0 2
36297: PPUSH
36298: LD_INT 179
36300: PPUSH
36301: LD_INT 135
36303: PPUSH
36304: CALL_OW 111
// wait ( 0 0$2 ) ;
36308: LD_INT 70
36310: PPUSH
36311: CALL_OW 67
// end ;
36315: GO 36108
36317: POP
36318: POP
// vc_chassis := 15 ;
36319: LD_ADDR_OWVAR 37
36323: PUSH
36324: LD_INT 15
36326: ST_TO_ADDR
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_VAR 0 3
36336: PPUSH
36337: LD_INT 4
36339: PUSH
36340: LD_VAR 0 3
36344: PUSH
36345: LD_INT 4
36347: ARRAY
36348: PUSH
36349: LD_INT 1
36351: PLUS
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PPUSH
36357: CALL_OW 45
36361: PPUSH
36362: CALL 3211 0 3
36366: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ 1 ] , east_attack_spawn , false ) ;
36367: LD_VAR 0 3
36371: PUSH
36372: LD_INT 4
36374: ARRAY
36375: PUSH
36376: LD_INT 1
36378: ARRAY
36379: PPUSH
36380: LD_INT 15
36382: PPUSH
36383: LD_INT 0
36385: PPUSH
36386: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
36390: LD_INT 0
36392: PPUSH
36393: LD_INT 11
36395: PPUSH
36396: LD_VAR 0 4
36400: PPUSH
36401: CALL_OW 380
// tmp := Add ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
36405: LD_ADDR_VAR 0 3
36409: PUSH
36410: LD_VAR 0 3
36414: PPUSH
36415: LD_INT 4
36417: PUSH
36418: LD_VAR 0 3
36422: PUSH
36423: LD_INT 4
36425: ARRAY
36426: PUSH
36427: LD_INT 1
36429: PLUS
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PPUSH
36435: CALL_OW 44
36439: PPUSH
36440: CALL 3211 0 3
36444: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
36445: LD_VAR 0 3
36449: PUSH
36450: LD_INT 4
36452: ARRAY
36453: PUSH
36454: LD_VAR 0 3
36458: PUSH
36459: LD_INT 4
36461: ARRAY
36462: ARRAY
36463: PPUSH
36464: LD_VAR 0 3
36468: PUSH
36469: LD_INT 4
36471: ARRAY
36472: PUSH
36473: LD_VAR 0 3
36477: PUSH
36478: LD_INT 4
36480: ARRAY
36481: PUSH
36482: LD_INT 1
36484: MINUS
36485: ARRAY
36486: PPUSH
36487: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
36491: LD_ADDR_VAR 0 5
36495: PUSH
36496: LD_INT 148
36498: PUSH
36499: LD_INT 140
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: EMPTY
36507: LIST
36508: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
36509: LD_INT 1
36511: PPUSH
36512: LD_VAR 0 3
36516: PUSH
36517: LD_INT 4
36519: ARRAY
36520: PPUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: LD_VAR 0 6
36530: PPUSH
36531: CALL 52920 0 4
// Wait ( 10 10$00 ) ;
36535: LD_INT 21000
36537: PPUSH
36538: CALL_OW 67
// tmp := [ ] ;
36542: LD_ADDR_VAR 0 3
36546: PUSH
36547: EMPTY
36548: ST_TO_ADDR
// w := 1 ;
36549: LD_ADDR_VAR 0 7
36553: PUSH
36554: LD_INT 1
36556: ST_TO_ADDR
// repeat tmp := [ ] ;
36557: LD_ADDR_VAR 0 3
36561: PUSH
36562: EMPTY
36563: ST_TO_ADDR
// if w mod 4 = 0 then
36564: LD_VAR 0 7
36568: PUSH
36569: LD_INT 4
36571: MOD
36572: PUSH
36573: LD_INT 0
36575: EQUAL
36576: IFFALSE 36663
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_gun ] ] else
36578: LD_ADDR_VAR 0 8
36582: PUSH
36583: LD_INT 11
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 27
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 11
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 27
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 11
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: LD_INT 27
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 11
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 2
36645: PUSH
36646: LD_INT 27
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: ST_TO_ADDR
36661: GO 36746
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
36663: LD_ADDR_VAR 0 8
36667: PUSH
36668: LD_INT 14
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: LD_INT 28
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 14
36688: PUSH
36689: LD_INT 1
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: LD_INT 25
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 14
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: LD_INT 2
36712: PUSH
36713: LD_INT 28
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 14
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 2
36730: PUSH
36731: LD_INT 29
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: LIST
36744: LIST
36745: ST_TO_ADDR
// if w mod 3 = 0 then
36746: LD_VAR 0 7
36750: PUSH
36751: LD_INT 3
36753: MOD
36754: PUSH
36755: LD_INT 0
36757: EQUAL
36758: IFFALSE 36834
// list := Add ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
36760: LD_ADDR_VAR 0 8
36764: PUSH
36765: LD_VAR 0 8
36769: PPUSH
36770: LD_INT 1
36772: PUSH
36773: LD_VAR 0 8
36777: PUSH
36778: LD_VAR 0 1
36782: ARRAY
36783: PUSH
36784: LD_INT 1
36786: PLUS
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PPUSH
36792: LD_INT 14
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 2
36800: PUSH
36801: LD_INT 25
36803: PUSH
36804: LD_INT 28
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: PPUSH
36814: LD_INT 2
36816: PPUSH
36817: CALL_OW 12
36821: ARRAY
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: PPUSH
36829: CALL 3211 0 3
36833: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
36834: LD_INT 1
36836: PPUSH
36837: LD_VAR 0 8
36841: PPUSH
36842: CALL 52824 0 2
// repeat wait ( 0 0$1 ) ;
36846: LD_INT 35
36848: PPUSH
36849: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
36853: LD_EXP 59
36857: PUSH
36858: LD_INT 1
36860: ARRAY
36861: PPUSH
36862: LD_INT 3
36864: PUSH
36865: LD_INT 34
36867: PUSH
36868: LD_INT 32
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PPUSH
36879: CALL_OW 72
36883: PUSH
36884: LD_INT 4
36886: GREATEREQUAL
36887: IFFALSE 36846
// wait ( 0 0$10 ) ;
36889: LD_INT 350
36891: PPUSH
36892: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
36896: LD_ADDR_VAR 0 3
36900: PUSH
36901: LD_EXP 59
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PPUSH
36910: LD_INT 3
36912: PUSH
36913: LD_INT 34
36915: PUSH
36916: LD_INT 32
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PPUSH
36927: CALL_OW 72
36931: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
36932: LD_INT 100
36934: PPUSH
36935: CALL_OW 13
36939: PUSH
36940: LD_INT 50
36942: LESS
36943: IFFALSE 36976
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] else
36945: LD_ADDR_VAR 0 5
36949: PUSH
36950: LD_INT 51
36952: PUSH
36953: LD_INT 24
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 75
36962: PUSH
36963: LD_INT 90
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: ST_TO_ADDR
36974: GO 37005
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
36976: LD_ADDR_VAR 0 5
36980: PUSH
36981: LD_INT 128
36983: PUSH
36984: LD_INT 94
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 180
36993: PUSH
36994: LD_INT 135
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: ST_TO_ADDR
// if w mod 4 = 0 then
37005: LD_VAR 0 7
37009: PUSH
37010: LD_INT 4
37012: MOD
37013: PUSH
37014: LD_INT 0
37016: EQUAL
37017: IFFALSE 37048
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
37019: LD_ADDR_VAR 0 5
37023: PUSH
37024: LD_INT 91
37026: PUSH
37027: LD_INT 58
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 117
37036: PUSH
37037: LD_INT 107
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp , coords , flags ) ;
37048: LD_INT 1
37050: PPUSH
37051: LD_VAR 0 3
37055: PPUSH
37056: LD_VAR 0 5
37060: PPUSH
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL 52920 0 4
// wait ( rand ( 9 9$30 , 12 12$30 ) ) ;
37070: LD_INT 19950
37072: PPUSH
37073: LD_INT 26250
37075: PPUSH
37076: CALL_OW 12
37080: PPUSH
37081: CALL_OW 67
// w := w + 1 ;
37085: LD_ADDR_VAR 0 7
37089: PUSH
37090: LD_VAR 0 7
37094: PUSH
37095: LD_INT 1
37097: PLUS
37098: ST_TO_ADDR
// until IsDead ( ar_dep_n ) ;
37099: LD_INT 94
37101: PPUSH
37102: CALL_OW 301
37106: IFFALSE 36557
// end ; end_of_file
37108: PPOPN 8
37110: END
// export function Action ; var tmp , p , radar , sols , i ; begin
37111: LD_INT 0
37113: PPUSH
37114: PPUSH
37115: PPUSH
37116: PPUSH
37117: PPUSH
37118: PPUSH
// InGameOn ;
37119: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
37123: LD_EXP 17
37127: PPUSH
37128: CALL_OW 87
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
37132: LD_ADDR_VAR 0 2
37136: PUSH
37137: LD_INT 22
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 25
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PPUSH
37161: CALL_OW 69
37165: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
37166: LD_ADDR_VAR 0 4
37170: PUSH
37171: LD_INT 22
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 34
37183: PUSH
37184: LD_INT 11
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PPUSH
37195: CALL_OW 69
37199: PUSH
37200: LD_INT 1
37202: ARRAY
37203: ST_TO_ADDR
// for i = 1 to tmp do
37204: LD_ADDR_VAR 0 6
37208: PUSH
37209: DOUBLE
37210: LD_INT 1
37212: DEC
37213: ST_TO_ADDR
37214: LD_VAR 0 2
37218: PUSH
37219: FOR_TO
37220: IFFALSE 37267
// begin if i = 5 then
37222: LD_VAR 0 6
37226: PUSH
37227: LD_INT 5
37229: EQUAL
37230: IFFALSE 37234
// break ;
37232: GO 37267
// sols := Replace ( sols , i , tmp [ i ] ) ;
37234: LD_ADDR_VAR 0 5
37238: PUSH
37239: LD_VAR 0 5
37243: PPUSH
37244: LD_VAR 0 6
37248: PPUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_VAR 0 6
37258: ARRAY
37259: PPUSH
37260: CALL_OW 1
37264: ST_TO_ADDR
// end ;
37265: GO 37219
37267: POP
37268: POP
// tmp := ar_force_tmp ;
37269: LD_ADDR_VAR 0 2
37273: PUSH
37274: LD_EXP 36
37278: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
37279: LD_VAR 0 2
37283: PUSH
37284: LD_INT 1
37286: ARRAY
37287: PPUSH
37288: LD_INT 108
37290: PPUSH
37291: LD_INT 139
37293: PPUSH
37294: LD_INT 0
37296: PPUSH
37297: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
37301: LD_VAR 0 2
37305: PUSH
37306: LD_INT 1
37308: ARRAY
37309: PPUSH
37310: LD_EXP 17
37314: PPUSH
37315: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
37319: LD_VAR 0 2
37323: PUSH
37324: LD_INT 2
37326: ARRAY
37327: PPUSH
37328: LD_INT 114
37330: PPUSH
37331: LD_INT 132
37333: PPUSH
37334: LD_INT 0
37336: PPUSH
37337: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
37341: LD_VAR 0 2
37345: PUSH
37346: LD_INT 3
37348: ARRAY
37349: PPUSH
37350: LD_INT 115
37352: PPUSH
37353: LD_INT 132
37355: PPUSH
37356: LD_INT 0
37358: PPUSH
37359: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
37363: LD_VAR 0 2
37367: PUSH
37368: LD_INT 2
37370: ARRAY
37371: PUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_INT 3
37379: ARRAY
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PPUSH
37385: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
37389: LD_VAR 0 4
37393: PPUSH
37394: LD_INT 83
37396: PPUSH
37397: LD_INT 123
37399: PPUSH
37400: CALL_OW 111
// Wait ( 0 0$01 ) ;
37404: LD_INT 35
37406: PPUSH
37407: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
37411: LD_INT 90
37413: PPUSH
37414: LD_INT 144
37416: PPUSH
37417: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
37421: LD_VAR 0 5
37425: PPUSH
37426: LD_INT 88
37428: PPUSH
37429: LD_INT 129
37431: PPUSH
37432: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_INT 92
37443: PUSH
37444: LD_INT 131
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 88
37453: PUSH
37454: LD_INT 127
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 91
37463: PUSH
37464: LD_INT 132
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 92
37473: PUSH
37474: LD_INT 134
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// for i = 1 to sols do
37487: LD_ADDR_VAR 0 6
37491: PUSH
37492: DOUBLE
37493: LD_INT 1
37495: DEC
37496: ST_TO_ADDR
37497: LD_VAR 0 5
37501: PUSH
37502: FOR_TO
37503: IFFALSE 37576
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
37505: LD_VAR 0 5
37509: PUSH
37510: LD_VAR 0 6
37514: ARRAY
37515: PPUSH
37516: LD_VAR 0 3
37520: PUSH
37521: LD_VAR 0 6
37525: ARRAY
37526: PUSH
37527: LD_INT 1
37529: ARRAY
37530: PPUSH
37531: LD_VAR 0 3
37535: PUSH
37536: LD_VAR 0 6
37540: ARRAY
37541: PUSH
37542: LD_INT 2
37544: ARRAY
37545: PPUSH
37546: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
37550: LD_VAR 0 5
37554: PUSH
37555: LD_VAR 0 6
37559: ARRAY
37560: PPUSH
37561: CALL_OW 197
// AddComHold ( sols ) ;
37565: LD_VAR 0 5
37569: PPUSH
37570: CALL_OW 200
// end ;
37574: GO 37502
37576: POP
37577: POP
// repeat wait ( 0 0$1 ) ;
37578: LD_INT 35
37580: PPUSH
37581: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
37585: LD_VAR 0 5
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PPUSH
37594: LD_INT 92
37596: PPUSH
37597: LD_INT 131
37599: PPUSH
37600: CALL_OW 297
37604: PUSH
37605: LD_INT 4
37607: LESS
37608: IFFALSE 37578
// CenterOnXY ( 96 , 139 ) ;
37610: LD_INT 96
37612: PPUSH
37613: LD_INT 139
37615: PPUSH
37616: CALL_OW 84
// wait ( 0 0$3 ) ;
37620: LD_INT 105
37622: PPUSH
37623: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
37627: LD_INT 111
37629: PPUSH
37630: LD_INT 135
37632: PPUSH
37633: LD_INT 1
37635: PPUSH
37636: LD_INT 25
37638: NEG
37639: PPUSH
37640: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
37644: LD_VAR 0 2
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: PPUSH
37653: LD_VAR 0 2
37657: PUSH
37658: LD_INT 1
37660: ARRAY
37661: PPUSH
37662: CALL_OW 250
37666: PUSH
37667: LD_INT 3
37669: PLUS
37670: PPUSH
37671: LD_VAR 0 2
37675: PUSH
37676: LD_INT 1
37678: ARRAY
37679: PPUSH
37680: CALL_OW 251
37684: PPUSH
37685: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
37689: LD_VAR 0 2
37693: PUSH
37694: LD_INT 3
37696: ARRAY
37697: PPUSH
37698: LD_INT 7
37700: PPUSH
37701: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
37705: LD_VAR 0 2
37709: PUSH
37710: LD_INT 2
37712: ARRAY
37713: PPUSH
37714: LD_VAR 0 2
37718: PUSH
37719: LD_INT 1
37721: ARRAY
37722: PPUSH
37723: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
37727: LD_INT 35
37729: PPUSH
37730: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
37734: LD_VAR 0 2
37738: PUSH
37739: LD_INT 1
37741: ARRAY
37742: PPUSH
37743: LD_VAR 0 2
37747: PUSH
37748: LD_INT 2
37750: ARRAY
37751: PPUSH
37752: CALL_OW 296
37756: PUSH
37757: LD_INT 5
37759: LESS
37760: IFFALSE 37727
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
37762: LD_VAR 0 2
37766: PUSH
37767: LD_INT 1
37769: ARRAY
37770: PPUSH
37771: LD_VAR 0 2
37775: PUSH
37776: LD_INT 2
37778: ARRAY
37779: PPUSH
37780: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: LD_STRING D1a-Merc1-1
37795: PPUSH
37796: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
37800: LD_VAR 0 2
37804: PUSH
37805: LD_INT 2
37807: ARRAY
37808: PPUSH
37809: LD_STRING D1a-FMerc2-1
37811: PPUSH
37812: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
37816: LD_VAR 0 2
37820: PUSH
37821: LD_INT 2
37823: ARRAY
37824: PPUSH
37825: LD_VAR 0 2
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PPUSH
37834: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
37838: LD_VAR 0 2
37842: PUSH
37843: LD_INT 1
37845: ARRAY
37846: PPUSH
37847: LD_INT 500
37849: PPUSH
37850: CALL_OW 234
// wait ( 0 0$2 ) ;
37854: LD_INT 70
37856: PPUSH
37857: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
37861: LD_VAR 0 2
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PPUSH
37870: LD_INT 2
37872: PPUSH
37873: CALL_OW 234
// wait ( 0 0$0.3 ) ;
37877: LD_INT 10
37879: PPUSH
37880: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
37884: LD_VAR 0 2
37888: PUSH
37889: LD_INT 1
37891: ARRAY
37892: PPUSH
37893: LD_STRING D1a-Merc1-2
37895: PPUSH
37896: CALL_OW 91
// wait ( 0 0$0.2 ) ;
37900: LD_INT 7
37902: PPUSH
37903: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
37907: LD_VAR 0 2
37911: PUSH
37912: LD_INT 1
37914: ARRAY
37915: PPUSH
37916: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
37920: LD_VAR 0 2
37924: PUSH
37925: LD_INT 2
37927: ARRAY
37928: PPUSH
37929: LD_INT 10
37931: PPUSH
37932: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 2
37943: ARRAY
37944: PPUSH
37945: LD_STRING D1a-FMerc2-2
37947: PPUSH
37948: CALL_OW 88
// wait ( 0 0$1 ) ;
37952: LD_INT 35
37954: PPUSH
37955: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
37959: LD_INT 7
37961: PPUSH
37962: CALL_OW 85
// wait ( 0 0$2 ) ;
37966: LD_INT 70
37968: PPUSH
37969: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
37973: LD_EXP 40
37977: PPUSH
37978: LD_STRING D1a-Saliba-1
37980: PPUSH
37981: CALL_OW 91
// KillUnit ( Saliba ) ;
37985: LD_EXP 40
37989: PPUSH
37990: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 3
38001: ARRAY
38002: PPUSH
38003: CALL_OW 122
// CenterOnUnits ( JMM ) ;
38007: LD_EXP 17
38011: PPUSH
38012: CALL_OW 85
// wait ( 0 0$1 ) ;
38016: LD_INT 35
38018: PPUSH
38019: CALL_OW 67
// InGameOff ;
38023: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
38027: LD_STRING M1
38029: PPUSH
38030: CALL_OW 337
// game_speed := 4 ;
38034: LD_ADDR_OWVAR 65
38038: PUSH
38039: LD_INT 4
38041: ST_TO_ADDR
// SaveForQuickRestart ;
38042: CALL_OW 22
// ar_run := true ;
38046: LD_ADDR_EXP 5
38050: PUSH
38051: LD_INT 1
38053: ST_TO_ADDR
// end ;
38054: LD_VAR 0 1
38058: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
38059: LD_EXP 5
38063: IFFALSE 38395
38065: GO 38067
38067: DISABLE
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_type , unit_human ] ) ;
38073: LD_ADDR_VAR 0 2
38077: PUSH
38078: LD_EXP 36
38082: PUSH
38083: LD_EXP 33
38087: PPUSH
38088: LD_INT 21
38090: PUSH
38091: LD_INT 1
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PPUSH
38098: CALL_OW 72
38102: ADD
38103: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
38104: LD_VAR 0 2
38108: PPUSH
38109: LD_INT 5
38111: PPUSH
38112: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
38116: LD_INT 5
38118: PPUSH
38119: LD_INT 1
38121: PPUSH
38122: CALL_OW 343
// k := 1 ;
38126: LD_ADDR_VAR 0 3
38130: PUSH
38131: LD_INT 1
38133: ST_TO_ADDR
// for i in tmp do
38134: LD_ADDR_VAR 0 1
38138: PUSH
38139: LD_VAR 0 2
38143: PUSH
38144: FOR_IN
38145: IFFALSE 38230
// begin if IsInUnit ( i ) then
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 310
38156: IFFALSE 38167
// ComExitBuilding ( i ) ;
38158: LD_VAR 0 1
38162: PPUSH
38163: CALL_OW 122
// if GetClass ( i ) = 3 then
38167: LD_VAR 0 1
38171: PPUSH
38172: CALL_OW 257
38176: PUSH
38177: LD_INT 3
38179: EQUAL
38180: IFFALSE 38216
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
38182: LD_VAR 0 1
38186: PPUSH
38187: LD_EXP 37
38191: PUSH
38192: LD_VAR 0 3
38196: ARRAY
38197: PPUSH
38198: CALL_OW 180
// k := k + 1 ;
38202: LD_ADDR_VAR 0 3
38206: PUSH
38207: LD_VAR 0 3
38211: PUSH
38212: LD_INT 1
38214: PLUS
38215: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
38216: LD_VAR 0 1
38220: PPUSH
38221: LD_INT 10
38223: PPUSH
38224: CALL_OW 173
// end ;
38228: GO 38144
38230: POP
38231: POP
// ar_patrol := true ;
38232: LD_ADDR_EXP 7
38236: PUSH
38237: LD_INT 1
38239: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
38240: LD_INT 10
38242: PPUSH
38243: CALL_OW 67
// for i in tmp do
38247: LD_ADDR_VAR 0 1
38251: PUSH
38252: LD_VAR 0 2
38256: PUSH
38257: FOR_IN
38258: IFFALSE 38286
// if not HasTask ( i ) then
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 314
38269: NOT
38270: IFFALSE 38284
// ComMoveToArea ( i , escape_area ) ;
38272: LD_VAR 0 1
38276: PPUSH
38277: LD_INT 10
38279: PPUSH
38280: CALL_OW 113
38284: GO 38257
38286: POP
38287: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
38288: LD_ADDR_VAR 0 3
38292: PUSH
38293: LD_VAR 0 2
38297: PPUSH
38298: LD_INT 95
38300: PUSH
38301: LD_INT 10
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PPUSH
38308: CALL_OW 72
38312: ST_TO_ADDR
// if k then
38313: LD_VAR 0 3
38317: IFFALSE 38386
// for i in k do
38319: LD_ADDR_VAR 0 1
38323: PUSH
38324: LD_VAR 0 3
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38384
// begin if IsInUnit ( i ) then
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 310
38341: IFFALSE 38357
// RemoveUnit ( IsInUnit ( i ) ) ;
38343: LD_VAR 0 1
38347: PPUSH
38348: CALL_OW 310
38352: PPUSH
38353: CALL_OW 64
// RemoveUnit ( i ) ;
38357: LD_VAR 0 1
38361: PPUSH
38362: CALL_OW 64
// tmp := tmp diff i ;
38366: LD_ADDR_VAR 0 2
38370: PUSH
38371: LD_VAR 0 2
38375: PUSH
38376: LD_VAR 0 1
38380: DIFF
38381: ST_TO_ADDR
// end ;
38382: GO 38329
38384: POP
38385: POP
// until tmp = [ ] ;
38386: LD_VAR 0 2
38390: PUSH
38391: EMPTY
38392: EQUAL
38393: IFFALSE 38240
// end ;
38395: PPOPN 3
38397: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
38398: LD_EXP 7
38402: IFFALSE 38692
38404: GO 38406
38406: DISABLE
38407: LD_INT 0
38409: PPUSH
38410: PPUSH
38411: PPUSH
// begin uc_side := 2 ;
38412: LD_ADDR_OWVAR 20
38416: PUSH
38417: LD_INT 2
38419: ST_TO_ADDR
// uc_nation := 2 ;
38420: LD_ADDR_OWVAR 21
38424: PUSH
38425: LD_INT 2
38427: ST_TO_ADDR
// InitHc ;
38428: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
38432: LD_INT 1
38434: PPUSH
38435: LD_INT 1
38437: PPUSH
38438: LD_INT 6
38440: PPUSH
38441: CALL_OW 380
// un := CreateHuman ;
38445: LD_ADDR_VAR 0 2
38449: PUSH
38450: CALL_OW 44
38454: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
38455: LD_INT 14
38457: PPUSH
38458: LD_INT 1
38460: PPUSH
38461: LD_INT 1
38463: PPUSH
38464: LD_INT 27
38466: PPUSH
38467: LD_INT 98
38469: PPUSH
38470: CALL 2039 0 5
// veh := CreateVehicle ;
38474: LD_ADDR_VAR 0 3
38478: PUSH
38479: CALL_OW 45
38483: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
38484: LD_VAR 0 3
38488: PPUSH
38489: LD_INT 4
38491: PPUSH
38492: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
38496: LD_VAR 0 3
38500: PPUSH
38501: LD_INT 179
38503: PPUSH
38504: LD_INT 135
38506: PPUSH
38507: LD_INT 0
38509: PPUSH
38510: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
38514: LD_VAR 0 2
38518: PPUSH
38519: LD_VAR 0 3
38523: PPUSH
38524: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
38528: LD_VAR 0 2
38532: PPUSH
38533: LD_INT 126
38535: PPUSH
38536: LD_INT 133
38538: PPUSH
38539: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
38543: LD_INT 10
38545: PPUSH
38546: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
38550: LD_INT 1
38552: PPUSH
38553: LD_VAR 0 3
38557: PPUSH
38558: CALL_OW 292
38562: PUSH
38563: LD_VAR 0 3
38567: PPUSH
38568: LD_INT 7
38570: PPUSH
38571: CALL_OW 296
38575: PUSH
38576: LD_INT 9
38578: LESS
38579: OR
38580: IFFALSE 38543
// ComHold ( veh ) ;
38582: LD_VAR 0 3
38586: PPUSH
38587: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
38591: LD_VAR 0 2
38595: PPUSH
38596: LD_STRING D2aa-Ar1-1
38598: PPUSH
38599: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
38603: LD_VAR 0 2
38607: PPUSH
38608: LD_INT 177
38610: PPUSH
38611: LD_INT 96
38613: PPUSH
38614: CALL_OW 111
// AddComExitVehicle ( un ) ;
38618: LD_VAR 0 2
38622: PPUSH
38623: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
38627: LD_INT 35
38629: PPUSH
38630: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
38634: LD_VAR 0 2
38638: PPUSH
38639: LD_INT 69
38641: PPUSH
38642: CALL_OW 296
38646: PUSH
38647: LD_INT 15
38649: LESS
38650: IFFALSE 38627
// mc_bases := Add ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
38652: LD_ADDR_EXP 44
38656: PUSH
38657: LD_EXP 44
38661: PPUSH
38662: LD_INT 3
38664: PUSH
38665: LD_EXP 44
38669: PUSH
38670: LD_INT 3
38672: ARRAY
38673: PUSH
38674: LD_INT 1
38676: PLUS
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PPUSH
38682: LD_VAR 0 2
38686: PPUSH
38687: CALL 3211 0 3
38691: ST_TO_ADDR
// end ;
38692: PPOPN 3
38694: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
38695: LD_INT 7
38697: PPUSH
38698: CALL_OW 255
38702: PUSH
38703: LD_INT 1
38705: EQUAL
38706: PUSH
38707: LD_INT 7
38709: PPUSH
38710: CALL_OW 301
38714: OR
38715: IFFALSE 41082
38717: GO 38719
38719: DISABLE
38720: LD_INT 0
38722: PPUSH
38723: PPUSH
// begin points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
38724: LD_ADDR_VAR 0 2
38728: PUSH
38729: LD_INT 46
38731: PUSH
38732: LD_INT 41
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 50
38741: PUSH
38742: LD_INT 25
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 57
38751: PUSH
38752: LD_INT 75
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 75
38761: PUSH
38762: LD_INT 89
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 51
38771: PUSH
38772: LD_INT 45
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 95
38781: PUSH
38782: LD_INT 95
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 84
38791: PUSH
38792: LD_INT 77
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 101
38801: PUSH
38802: LD_INT 76
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 118
38811: PUSH
38812: LD_INT 81
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 139
38821: PUSH
38822: LD_INT 97
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 129
38831: PUSH
38832: LD_INT 114
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 154
38841: PUSH
38842: LD_INT 111
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: ST_TO_ADDR
// base_captured := true ;
38863: LD_ADDR_EXP 6
38867: PUSH
38868: LD_INT 1
38870: ST_TO_ADDR
// DialogueOn ;
38871: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
38875: LD_EXP 17
38879: PPUSH
38880: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
38884: LD_EXP 17
38888: PPUSH
38889: LD_STRING D2-JMM-1
38891: PPUSH
38892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
38896: LD_EXP 26
38900: PPUSH
38901: LD_STRING D2-Pow-1
38903: PPUSH
38904: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
38908: LD_EXP 17
38912: PPUSH
38913: LD_STRING D2-JMM-2
38915: PPUSH
38916: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
38920: LD_EXP 26
38924: PPUSH
38925: LD_STRING D2-Pow-2
38927: PPUSH
38928: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
38932: LD_EXP 17
38936: PPUSH
38937: LD_STRING D2-JMM-3
38939: PPUSH
38940: CALL_OW 88
// DialogueOff ;
38944: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
38948: LD_STRING M2
38950: PPUSH
38951: CALL_OW 337
// Wait ( 0 0$2 ) ;
38955: LD_INT 70
38957: PPUSH
38958: CALL_OW 67
// if IsOk ( Gary ) then
38962: LD_EXP 28
38966: PPUSH
38967: CALL_OW 302
38971: IFFALSE 38985
// Say ( Gary , D2a-Gary-1 ) ;
38973: LD_EXP 28
38977: PPUSH
38978: LD_STRING D2a-Gary-1
38980: PPUSH
38981: CALL_OW 88
// if IsOk ( Bobby ) then
38985: LD_EXP 20
38989: PPUSH
38990: CALL_OW 302
38994: IFFALSE 39008
// Say ( Bobby , D2a-Bobby-1 ) ;
38996: LD_EXP 20
39000: PPUSH
39001: LD_STRING D2a-Bobby-1
39003: PPUSH
39004: CALL_OW 88
// if IsOk ( Cyrus ) then
39008: LD_EXP 21
39012: PPUSH
39013: CALL_OW 302
39017: IFFALSE 39031
// Say ( Cyrus , D2a-Cyrus-1 ) ;
39019: LD_EXP 21
39023: PPUSH
39024: LD_STRING D2a-Cyrus-1
39026: PPUSH
39027: CALL_OW 88
// if IsOk ( Lisa ) then
39031: LD_EXP 18
39035: PPUSH
39036: CALL_OW 302
39040: IFFALSE 39054
// Say ( Lisa , D2a-Lisa-1 ) ;
39042: LD_EXP 18
39046: PPUSH
39047: LD_STRING D2a-Lisa-1
39049: PPUSH
39050: CALL_OW 88
// if IsOk ( Frank ) then
39054: LD_EXP 29
39058: PPUSH
39059: CALL_OW 302
39063: IFFALSE 39077
// Say ( Frank , D2a-Frank-1 ) ;
39065: LD_EXP 29
39069: PPUSH
39070: LD_STRING D2a-Frank-1
39072: PPUSH
39073: CALL_OW 88
// if IsOk ( Cornel ) then
39077: LD_EXP 27
39081: PPUSH
39082: CALL_OW 302
39086: IFFALSE 39100
// Say ( Cornel , D2a-Corn-1 ) ;
39088: LD_EXP 27
39092: PPUSH
39093: LD_STRING D2a-Corn-1
39095: PPUSH
39096: CALL_OW 88
// if IsOk ( Donaldson ) then
39100: LD_EXP 19
39104: PPUSH
39105: CALL_OW 302
39109: IFFALSE 39123
// Say ( Donaldson , D2a-Don-1 ) ;
39111: LD_EXP 19
39115: PPUSH
39116: LD_STRING D2a-Don-1
39118: PPUSH
39119: CALL_OW 88
// if IsOk ( Brown ) then
39123: LD_EXP 23
39127: PPUSH
39128: CALL_OW 302
39132: IFFALSE 39146
// Say ( Brown , D2a-Brown-1 ) ;
39134: LD_EXP 23
39138: PPUSH
39139: LD_STRING D2a-Brown-1
39141: PPUSH
39142: CALL_OW 88
// Wait ( 0 0$30 ) ;
39146: LD_INT 1050
39148: PPUSH
39149: CALL_OW 67
// if IsOk ( Frank ) then
39153: LD_EXP 29
39157: PPUSH
39158: CALL_OW 302
39162: IFFALSE 39428
// begin DialogueOn ;
39164: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
39168: LD_EXP 17
39172: PUSH
39173: LD_EXP 29
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PPUSH
39182: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
39186: LD_EXP 29
39190: PPUSH
39191: LD_STRING D3F-Frank-1
39193: PPUSH
39194: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
39198: LD_EXP 17
39202: PPUSH
39203: LD_STRING D3F-JMM-1
39205: PPUSH
39206: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
39210: LD_EXP 29
39214: PPUSH
39215: LD_STRING D3F-Frank-2
39217: PPUSH
39218: CALL_OW 88
// case Query ( QFrank ) of 1 :
39222: LD_STRING QFrank
39224: PPUSH
39225: CALL_OW 97
39229: PUSH
39230: LD_INT 1
39232: DOUBLE
39233: EQUAL
39234: IFTRUE 39238
39236: GO 39261
39238: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
39239: LD_EXP 17
39243: PPUSH
39244: LD_STRING D3Fa-JMM-1
39246: PPUSH
39247: CALL_OW 88
// us_scout := 1 ;
39251: LD_ADDR_EXP 8
39255: PUSH
39256: LD_INT 1
39258: ST_TO_ADDR
// end ; 2 :
39259: GO 39424
39261: LD_INT 2
39263: DOUBLE
39264: EQUAL
39265: IFTRUE 39269
39267: GO 39391
39269: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
39270: LD_EXP 17
39274: PPUSH
39275: LD_STRING D3Fb-JMM-1
39277: PPUSH
39278: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
39282: LD_EXP 29
39286: PPUSH
39287: LD_STRING D3Fb-Frank-1
39289: PPUSH
39290: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
39294: LD_STRING QFrank2
39296: PPUSH
39297: CALL_OW 97
39301: PUSH
39302: LD_INT 1
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39357
39310: POP
// begin us_scout := 2 ;
39311: LD_ADDR_EXP 8
39315: PUSH
39316: LD_INT 2
39318: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
39319: LD_EXP 17
39323: PPUSH
39324: LD_STRING D3Fba-JMM-1
39326: PPUSH
39327: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
39331: LD_EXP 29
39335: PPUSH
39336: LD_STRING D3Fba-Frank-1
39338: PPUSH
39339: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
39343: LD_EXP 17
39347: PPUSH
39348: LD_STRING D3Fba-JMM-2
39350: PPUSH
39351: CALL_OW 88
// end ; 2 :
39355: GO 39389
39357: LD_INT 2
39359: DOUBLE
39360: EQUAL
39361: IFTRUE 39365
39363: GO 39388
39365: POP
// begin us_scout := 0 ;
39366: LD_ADDR_EXP 8
39370: PUSH
39371: LD_INT 0
39373: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
39374: LD_EXP 17
39378: PPUSH
39379: LD_STRING D3Fbb-JMM-1
39381: PPUSH
39382: CALL_OW 88
// end ; end ;
39386: GO 39389
39388: POP
// end ; 3 :
39389: GO 39424
39391: LD_INT 3
39393: DOUBLE
39394: EQUAL
39395: IFTRUE 39399
39397: GO 39423
39399: POP
// begin us_scout := - 1 ;
39400: LD_ADDR_EXP 8
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
39409: LD_EXP 17
39413: PPUSH
39414: LD_STRING D3Fc-JMM-1
39416: PPUSH
39417: CALL_OW 88
// end ; end ;
39421: GO 39424
39423: POP
// DialogueOff ;
39424: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
39428: LD_EXP 8
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: IN
39444: IFFALSE 39448
// exit ;
39446: GO 41082
// if us_scout in [ 1 , 2 ] then
39448: LD_EXP 8
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: IN
39463: IFFALSE 40164
// begin if IsInUnit ( Frank ) then
39465: LD_EXP 29
39469: PPUSH
39470: CALL_OW 310
39474: IFFALSE 39485
// ComExitBuilding ( Frank ) ;
39476: LD_EXP 29
39480: PPUSH
39481: CALL_OW 122
// if IsDrivenBy ( Frank ) then
39485: LD_EXP 29
39489: PPUSH
39490: CALL_OW 311
39494: IFFALSE 39505
// ComExitVehicle ( Frank ) ;
39496: LD_EXP 29
39500: PPUSH
39501: CALL_OW 121
// SetSide ( Frank , 4 ) ;
39505: LD_EXP 29
39509: PPUSH
39510: LD_INT 4
39512: PPUSH
39513: CALL_OW 235
// wait ( 0 0$1 ) ;
39517: LD_INT 35
39519: PPUSH
39520: CALL_OW 67
// if us_scout = 2 then
39524: LD_EXP 8
39528: PUSH
39529: LD_INT 2
39531: EQUAL
39532: IFFALSE 39900
// begin ComMoveXY ( Frank , 75 , 63 ) ;
39534: LD_EXP 29
39538: PPUSH
39539: LD_INT 75
39541: PPUSH
39542: LD_INT 63
39544: PPUSH
39545: CALL_OW 111
// AddComHold ( Frank ) ;
39549: LD_EXP 29
39553: PPUSH
39554: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
39558: LD_EXP 29
39562: PPUSH
39563: LD_INT 770
39565: PPUSH
39566: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
39570: LD_EXP 29
39574: PPUSH
39575: LD_INT 100
39577: PPUSH
39578: LD_INT 75
39580: PPUSH
39581: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
39585: LD_EXP 29
39589: PPUSH
39590: LD_INT 123
39592: PPUSH
39593: LD_INT 103
39595: PPUSH
39596: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
39600: LD_EXP 29
39604: PPUSH
39605: LD_INT 138
39607: PPUSH
39608: LD_INT 108
39610: PPUSH
39611: CALL_OW 171
// AddComHold ( Frank ) ;
39615: LD_EXP 29
39619: PPUSH
39620: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
39624: LD_INT 35
39626: PPUSH
39627: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
39631: LD_EXP 29
39635: PPUSH
39636: LD_INT 138
39638: PPUSH
39639: LD_INT 108
39641: PPUSH
39642: CALL_OW 307
39646: IFFALSE 39624
// AddComMoveXY ( Frank , 125 , 132 ) ;
39648: LD_EXP 29
39652: PPUSH
39653: LD_INT 125
39655: PPUSH
39656: LD_INT 132
39658: PPUSH
39659: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
39663: LD_INT 35
39665: PPUSH
39666: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
39670: LD_INT 1
39672: PPUSH
39673: LD_EXP 29
39677: PPUSH
39678: CALL_OW 292
39682: PUSH
39683: LD_EXP 29
39687: PPUSH
39688: LD_INT 7
39690: PPUSH
39691: CALL_OW 296
39695: PUSH
39696: LD_INT 7
39698: LESS
39699: OR
39700: IFFALSE 39663
// DialogueOn ;
39702: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
39706: LD_EXP 29
39710: PPUSH
39711: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
39715: LD_INT 10
39717: PPUSH
39718: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
39722: LD_EXP 17
39726: PPUSH
39727: LD_STRING D4Fa-JMM-1
39729: PPUSH
39730: CALL_OW 88
// for i in points do
39734: LD_ADDR_VAR 0 1
39738: PUSH
39739: LD_VAR 0 2
39743: PUSH
39744: FOR_IN
39745: IFFALSE 39803
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
39747: LD_VAR 0 1
39751: PUSH
39752: LD_INT 1
39754: ARRAY
39755: PPUSH
39756: LD_VAR 0 1
39760: PUSH
39761: LD_INT 2
39763: ARRAY
39764: PPUSH
39765: LD_INT 1
39767: PPUSH
39768: LD_INT 20
39770: NEG
39771: PPUSH
39772: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
39776: LD_VAR 0 1
39780: PUSH
39781: LD_INT 1
39783: ARRAY
39784: PPUSH
39785: LD_VAR 0 1
39789: PUSH
39790: LD_INT 2
39792: ARRAY
39793: PPUSH
39794: LD_INT 1
39796: PPUSH
39797: CALL_OW 331
// end ;
39801: GO 39744
39803: POP
39804: POP
// dwait ( 0 0$0.5 ) ;
39805: LD_INT 18
39807: PPUSH
39808: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
39812: LD_INT 42
39814: PPUSH
39815: LD_INT 27
39817: PPUSH
39818: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
39822: LD_EXP 29
39826: PPUSH
39827: LD_STRING D4Fa-Frank-1
39829: PPUSH
39830: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
39834: LD_INT 18
39836: PPUSH
39837: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
39841: LD_EXP 17
39845: PPUSH
39846: LD_STRING D4Fa-JMM-2
39848: PPUSH
39849: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
39853: LD_INT 118
39855: PPUSH
39856: LD_INT 80
39858: PPUSH
39859: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
39863: LD_EXP 29
39867: PPUSH
39868: LD_STRING D4Fa-Frank-2
39870: PPUSH
39871: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
39875: LD_INT 10
39877: PPUSH
39878: CALL_OW 68
// DialogueOff ;
39882: CALL_OW 7
// SetSide ( Frank , 1 ) ;
39886: LD_EXP 29
39890: PPUSH
39891: LD_INT 1
39893: PPUSH
39894: CALL_OW 235
// end else
39898: GO 40162
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
39900: LD_INT 2
39902: PPUSH
39903: LD_INT 4
39905: PPUSH
39906: LD_INT 2
39908: PPUSH
39909: LD_INT 1
39911: PPUSH
39912: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
39916: LD_EXP 29
39920: PPUSH
39921: LD_INT 75
39923: PPUSH
39924: LD_INT 63
39926: PPUSH
39927: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
39931: LD_EXP 29
39935: PPUSH
39936: LD_INT 175
39938: PPUSH
39939: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
39943: LD_EXP 29
39947: PPUSH
39948: LD_INT 102
39950: PPUSH
39951: LD_INT 76
39953: PPUSH
39954: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
39958: LD_EXP 29
39962: PPUSH
39963: LD_INT 108
39965: PPUSH
39966: LD_INT 70
39968: PPUSH
39969: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
39973: LD_INT 35
39975: PPUSH
39976: CALL_OW 67
// until See ( 2 , Frank ) ;
39980: LD_INT 2
39982: PPUSH
39983: LD_EXP 29
39987: PPUSH
39988: CALL_OW 292
39992: IFFALSE 39973
// ComMoveXY ( Frank , 112 , 118 ) ;
39994: LD_EXP 29
39998: PPUSH
39999: LD_INT 112
40001: PPUSH
40002: LD_INT 118
40004: PPUSH
40005: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
40009: LD_EXP 29
40013: PPUSH
40014: CALL_OW 256
40018: PUSH
40019: LD_INT 750
40021: GREATEREQUAL
40022: IFFALSE 40036
// SetLives ( Frank , 700 ) ;
40024: LD_EXP 29
40028: PPUSH
40029: LD_INT 700
40031: PPUSH
40032: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
40036: LD_INT 35
40038: PPUSH
40039: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
40043: LD_INT 1
40045: PPUSH
40046: LD_EXP 29
40050: PPUSH
40051: CALL_OW 292
40055: PUSH
40056: LD_EXP 29
40060: PPUSH
40061: LD_INT 7
40063: PPUSH
40064: CALL_OW 296
40068: PUSH
40069: LD_INT 17
40071: LESS
40072: OR
40073: IFFALSE 40036
// DialogueOn ;
40075: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
40079: LD_EXP 29
40083: PPUSH
40084: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
40088: LD_EXP 29
40092: PPUSH
40093: LD_STRING D4Fb-Frank-1
40095: PPUSH
40096: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
40100: LD_EXP 17
40104: PPUSH
40105: LD_STRING D4Fb-JMM-1
40107: PPUSH
40108: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
40112: LD_INT 2
40114: PPUSH
40115: LD_STRING D4Fb-FSci1-1
40117: PPUSH
40118: CALL 2268 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
40122: LD_EXP 29
40126: PPUSH
40127: LD_STRING D4Fb-Frank-2
40129: PPUSH
40130: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
40134: LD_EXP 17
40138: PPUSH
40139: LD_STRING D4Fb-JMM-2
40141: PPUSH
40142: CALL_OW 88
// DialogueOff ;
40146: CALL_OW 7
// SetSide ( Frank , 1 ) ;
40150: LD_EXP 29
40154: PPUSH
40155: LD_INT 1
40157: PPUSH
40158: CALL_OW 235
// end ; end else
40162: GO 40321
// if IsOk ( Kikuchi ) then
40164: LD_EXP 30
40168: PPUSH
40169: CALL_OW 302
40173: IFFALSE 40321
// begin DialogueOn ;
40175: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
40179: LD_EXP 17
40183: PUSH
40184: LD_EXP 30
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PPUSH
40193: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
40197: LD_EXP 30
40201: PPUSH
40202: LD_STRING D3Y-Yam-1
40204: PPUSH
40205: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
40209: LD_EXP 17
40213: PPUSH
40214: LD_STRING D3Y-JMM-1
40216: PPUSH
40217: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
40221: LD_EXP 30
40225: PPUSH
40226: LD_STRING D3Y-Yam-2
40228: PPUSH
40229: CALL_OW 88
// case Query ( QYamoko ) of 1 :
40233: LD_STRING QYamoko
40235: PPUSH
40236: CALL_OW 97
40240: PUSH
40241: LD_INT 1
40243: DOUBLE
40244: EQUAL
40245: IFTRUE 40249
40247: GO 40284
40249: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
40250: LD_EXP 17
40254: PPUSH
40255: LD_STRING D3Ya-JMM-1
40257: PPUSH
40258: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
40262: LD_EXP 30
40266: PPUSH
40267: LD_STRING D3Ya-Yam-1
40269: PPUSH
40270: CALL_OW 88
// us_scout := 1 ;
40274: LD_ADDR_EXP 8
40278: PUSH
40279: LD_INT 1
40281: ST_TO_ADDR
// end ; 2 :
40282: GO 40317
40284: LD_INT 2
40286: DOUBLE
40287: EQUAL
40288: IFTRUE 40292
40290: GO 40316
40292: POP
// begin us_scout := - 1 ;
40293: LD_ADDR_EXP 8
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
40302: LD_EXP 17
40306: PPUSH
40307: LD_STRING D3Yb-JMM-1
40309: PPUSH
40310: CALL_OW 88
// end ; end ;
40314: GO 40317
40316: POP
// DialogueOff ;
40317: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
40321: LD_EXP 8
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: IN
40337: IFFALSE 40341
// exit ;
40339: GO 41082
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
40341: LD_ADDR_EXP 8
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: LD_INT 2
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: LIST
40359: PUSH
40360: LD_OWVAR 67
40364: ARRAY
40365: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
40366: LD_EXP 8
40370: PUSH
40371: LD_INT 1
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: IN
40381: IFFALSE 41082
// begin if IsInUnit ( Kikuchi ) then
40383: LD_EXP 30
40387: PPUSH
40388: CALL_OW 310
40392: IFFALSE 40403
// ComExitBuilding ( Kikuchi ) ;
40394: LD_EXP 30
40398: PPUSH
40399: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
40403: LD_EXP 30
40407: PPUSH
40408: CALL_OW 311
40412: IFFALSE 40423
// ComExitVehicle ( Kikuchi ) ;
40414: LD_EXP 30
40418: PPUSH
40419: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
40423: LD_EXP 30
40427: PPUSH
40428: LD_INT 4
40430: PPUSH
40431: CALL_OW 235
// wait ( 0 0$1 ) ;
40435: LD_INT 35
40437: PPUSH
40438: CALL_OW 67
// if us_scout = 2 then
40442: LD_EXP 8
40446: PUSH
40447: LD_INT 2
40449: EQUAL
40450: IFFALSE 40830
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
40452: LD_EXP 30
40456: PPUSH
40457: LD_INT 75
40459: PPUSH
40460: LD_INT 63
40462: PPUSH
40463: CALL_OW 111
// AddComHold ( Kikuchi ) ;
40467: LD_EXP 30
40471: PPUSH
40472: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
40476: LD_EXP 30
40480: PPUSH
40481: LD_INT 770
40483: PPUSH
40484: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
40488: LD_EXP 30
40492: PPUSH
40493: LD_INT 100
40495: PPUSH
40496: LD_INT 75
40498: PPUSH
40499: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
40503: LD_EXP 30
40507: PPUSH
40508: LD_INT 123
40510: PPUSH
40511: LD_INT 103
40513: PPUSH
40514: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
40518: LD_EXP 30
40522: PPUSH
40523: LD_INT 138
40525: PPUSH
40526: LD_INT 108
40528: PPUSH
40529: CALL_OW 171
// AddComHold ( Kikuchi ) ;
40533: LD_EXP 30
40537: PPUSH
40538: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
40542: LD_INT 35
40544: PPUSH
40545: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
40549: LD_EXP 30
40553: PPUSH
40554: LD_INT 138
40556: PPUSH
40557: LD_INT 108
40559: PPUSH
40560: CALL_OW 307
40564: IFFALSE 40542
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
40566: LD_EXP 30
40570: PPUSH
40571: LD_INT 125
40573: PPUSH
40574: LD_INT 132
40576: PPUSH
40577: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40581: LD_INT 35
40583: PPUSH
40584: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
40588: LD_INT 1
40590: PPUSH
40591: LD_EXP 30
40595: PPUSH
40596: CALL_OW 292
40600: PUSH
40601: LD_EXP 30
40605: PPUSH
40606: LD_INT 7
40608: PPUSH
40609: CALL_OW 296
40613: PUSH
40614: LD_INT 7
40616: LESS
40617: OR
40618: IFFALSE 40581
// DialogueOn ;
40620: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
40624: LD_EXP 30
40628: PPUSH
40629: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
40633: LD_INT 10
40635: PPUSH
40636: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
40640: LD_EXP 30
40644: PPUSH
40645: LD_STRING D4Ya-Yam-1
40647: PPUSH
40648: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
40652: LD_EXP 17
40656: PPUSH
40657: LD_STRING D4Ya-JMM-1
40659: PPUSH
40660: CALL_OW 88
// for i in points do
40664: LD_ADDR_VAR 0 1
40668: PUSH
40669: LD_VAR 0 2
40673: PUSH
40674: FOR_IN
40675: IFFALSE 40733
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
40677: LD_VAR 0 1
40681: PUSH
40682: LD_INT 1
40684: ARRAY
40685: PPUSH
40686: LD_VAR 0 1
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PPUSH
40695: LD_INT 1
40697: PPUSH
40698: LD_INT 20
40700: NEG
40701: PPUSH
40702: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
40706: LD_VAR 0 1
40710: PUSH
40711: LD_INT 1
40713: ARRAY
40714: PPUSH
40715: LD_VAR 0 1
40719: PUSH
40720: LD_INT 2
40722: ARRAY
40723: PPUSH
40724: LD_INT 1
40726: PPUSH
40727: CALL_OW 331
// end ;
40731: GO 40674
40733: POP
40734: POP
// dwait ( 0 0$0.5 ) ;
40735: LD_INT 18
40737: PPUSH
40738: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
40742: LD_INT 42
40744: PPUSH
40745: LD_INT 27
40747: PPUSH
40748: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
40752: LD_EXP 30
40756: PPUSH
40757: LD_STRING D4Ya-Yam-2
40759: PPUSH
40760: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
40764: LD_INT 18
40766: PPUSH
40767: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
40771: LD_INT 118
40773: PPUSH
40774: LD_INT 80
40776: PPUSH
40777: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
40781: LD_EXP 17
40785: PPUSH
40786: LD_STRING D4Ya-JMM-2
40788: PPUSH
40789: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
40793: LD_EXP 30
40797: PPUSH
40798: LD_STRING D4Ya-Yam-3
40800: PPUSH
40801: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
40805: LD_INT 10
40807: PPUSH
40808: CALL_OW 68
// DialogueOff ;
40812: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
40816: LD_EXP 30
40820: PPUSH
40821: LD_INT 1
40823: PPUSH
40824: CALL_OW 235
// end else
40828: GO 41082
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
40830: LD_INT 2
40832: PPUSH
40833: LD_INT 4
40835: PPUSH
40836: LD_INT 2
40838: PPUSH
40839: LD_INT 1
40841: PPUSH
40842: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
40846: LD_EXP 30
40850: PPUSH
40851: LD_INT 75
40853: PPUSH
40854: LD_INT 63
40856: PPUSH
40857: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
40861: LD_EXP 30
40865: PPUSH
40866: LD_INT 175
40868: PPUSH
40869: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
40873: LD_EXP 30
40877: PPUSH
40878: LD_INT 102
40880: PPUSH
40881: LD_INT 76
40883: PPUSH
40884: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
40888: LD_EXP 30
40892: PPUSH
40893: LD_INT 108
40895: PPUSH
40896: LD_INT 70
40898: PPUSH
40899: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
40903: LD_INT 35
40905: PPUSH
40906: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
40910: LD_INT 2
40912: PPUSH
40913: LD_EXP 30
40917: PPUSH
40918: CALL_OW 292
40922: IFFALSE 40903
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
40924: LD_EXP 30
40928: PPUSH
40929: LD_INT 112
40931: PPUSH
40932: LD_INT 118
40934: PPUSH
40935: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
40939: LD_EXP 30
40943: PPUSH
40944: CALL_OW 256
40948: PUSH
40949: LD_INT 750
40951: GREATEREQUAL
40952: IFFALSE 40966
// SetLives ( Kikuchi , 700 ) ;
40954: LD_EXP 30
40958: PPUSH
40959: LD_INT 700
40961: PPUSH
40962: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
40966: LD_INT 35
40968: PPUSH
40969: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
40973: LD_INT 1
40975: PPUSH
40976: LD_EXP 30
40980: PPUSH
40981: CALL_OW 292
40985: PUSH
40986: LD_EXP 30
40990: PPUSH
40991: LD_INT 7
40993: PPUSH
40994: CALL_OW 296
40998: PUSH
40999: LD_INT 17
41001: LESS
41002: OR
41003: IFFALSE 40966
// DialogueOn ;
41005: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
41009: LD_EXP 30
41013: PPUSH
41014: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
41018: LD_EXP 30
41022: PPUSH
41023: LD_STRING D4Yb-Yam-1
41025: PPUSH
41026: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
41030: LD_EXP 17
41034: PPUSH
41035: LD_STRING D4Yb-JMM-1
41037: PPUSH
41038: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
41042: LD_EXP 30
41046: PPUSH
41047: LD_STRING D4Yb-Yam-2
41049: PPUSH
41050: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
41054: LD_EXP 17
41058: PPUSH
41059: LD_STRING D4Yb-JMM-2
41061: PPUSH
41062: CALL_OW 88
// DialogueOff ;
41066: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
41070: LD_EXP 30
41074: PPUSH
41075: LD_INT 1
41077: PPUSH
41078: CALL_OW 235
// end ; end ; end ;
41082: PPOPN 2
41084: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
41085: LD_EXP 6
41089: IFFALSE 42114
41091: GO 41093
41093: DISABLE
41094: LD_INT 0
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
// begin enable ;
41100: ENABLE
// if not seen [ 1 ] then
41101: LD_EXP 9
41105: PUSH
41106: LD_INT 1
41108: ARRAY
41109: NOT
41110: IFFALSE 41290
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
41112: LD_ADDR_VAR 0 2
41116: PUSH
41117: LD_INT 22
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: LD_INT 25
41132: PUSH
41133: LD_INT 11
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 33
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: LIST
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PPUSH
41159: CALL_OW 69
41163: ST_TO_ADDR
// if tmp then
41164: LD_VAR 0 2
41168: IFFALSE 41290
// for i in tmp do
41170: LD_ADDR_VAR 0 1
41174: PUSH
41175: LD_VAR 0 2
41179: PUSH
41180: FOR_IN
41181: IFFALSE 41288
// if See ( 1 , i ) then
41183: LD_INT 1
41185: PPUSH
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL_OW 292
41195: IFFALSE 41286
// begin seen := Replace ( seen , 1 , true ) ;
41197: LD_ADDR_EXP 9
41201: PUSH
41202: LD_EXP 9
41206: PPUSH
41207: LD_INT 1
41209: PPUSH
41210: LD_INT 1
41212: PPUSH
41213: CALL_OW 1
41217: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41218: LD_INT 1
41220: PPUSH
41221: CALL 2097 0 1
41225: IFFALSE 41286
// begin DialogueOn ;
41227: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41231: LD_VAR 0 1
41235: PPUSH
41236: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41240: LD_INT 10
41242: PPUSH
41243: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
41247: LD_ADDR_VAR 0 3
41251: PUSH
41252: LD_INT 1
41254: PPUSH
41255: LD_STRING D5a-Sol2-1
41257: PPUSH
41258: CALL 2268 0 2
41262: ST_TO_ADDR
// if not un then
41263: LD_VAR 0 3
41267: NOT
41268: IFFALSE 41280
// SayRand ( sex_female , D5a-FSol2-1 ) ;
41270: LD_INT 2
41272: PPUSH
41273: LD_STRING D5a-FSol2-1
41275: PPUSH
41276: CALL 2268 0 2
// DialogueOff ;
41280: CALL_OW 7
// break ;
41284: GO 41288
// end ; end ;
41286: GO 41180
41288: POP
41289: POP
// end ; if not seen [ 2 ] then
41290: LD_EXP 9
41294: PUSH
41295: LD_INT 2
41297: ARRAY
41298: NOT
41299: IFFALSE 41516
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
41301: LD_ADDR_VAR 0 2
41305: PUSH
41306: LD_INT 22
41308: PUSH
41309: LD_INT 2
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 25
41318: PUSH
41319: LD_INT 17
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PPUSH
41330: CALL_OW 69
41334: ST_TO_ADDR
// if tmp then
41335: LD_VAR 0 2
41339: IFFALSE 41516
// for i in tmp do
41341: LD_ADDR_VAR 0 1
41345: PUSH
41346: LD_VAR 0 2
41350: PUSH
41351: FOR_IN
41352: IFFALSE 41514
// if See ( 1 , i ) then
41354: LD_INT 1
41356: PPUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: CALL_OW 292
41366: IFFALSE 41512
// begin seen := Replace ( seen , 2 , true ) ;
41368: LD_ADDR_EXP 9
41372: PUSH
41373: LD_EXP 9
41377: PPUSH
41378: LD_INT 2
41380: PPUSH
41381: LD_INT 1
41383: PPUSH
41384: CALL_OW 1
41388: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41389: LD_INT 1
41391: PPUSH
41392: CALL 2097 0 1
41396: IFFALSE 41512
// begin DialogueOn ;
41398: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41411: LD_INT 10
41413: PPUSH
41414: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
41418: LD_ADDR_VAR 0 3
41422: PUSH
41423: LD_INT 1
41425: PPUSH
41426: LD_STRING D5b-Sol1-1
41428: PPUSH
41429: CALL 2268 0 2
41433: ST_TO_ADDR
// if not un then
41434: LD_VAR 0 3
41438: NOT
41439: IFFALSE 41457
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
41441: LD_ADDR_VAR 0 3
41445: PUSH
41446: LD_INT 2
41448: PPUSH
41449: LD_STRING D5b-FSol1-1
41451: PPUSH
41452: CALL 2268 0 2
41456: ST_TO_ADDR
// if un then
41457: LD_VAR 0 3
41461: IFFALSE 41506
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
41463: LD_ADDR_VAR 0 4
41467: PUSH
41468: LD_INT 1
41470: PPUSH
41471: LD_STRING D5b-Sol2-1
41473: PPUSH
41474: LD_VAR 0 3
41478: PPUSH
41479: CALL 2487 0 3
41483: ST_TO_ADDR
// if not un2 then
41484: LD_VAR 0 4
41488: NOT
41489: IFFALSE 41506
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
41491: LD_INT 2
41493: PPUSH
41494: LD_STRING D5b-FSol2-1
41496: PPUSH
41497: LD_VAR 0 3
41501: PPUSH
41502: CALL 2487 0 3
// end ; DialogueOff ;
41506: CALL_OW 7
// break ;
41510: GO 41514
// end ; end ;
41512: GO 41351
41514: POP
41515: POP
// end ; if not seen [ 3 ] then
41516: LD_EXP 9
41520: PUSH
41521: LD_INT 3
41523: ARRAY
41524: NOT
41525: IFFALSE 41699
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
41527: LD_ADDR_VAR 0 2
41531: PUSH
41532: LD_INT 22
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 33
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PPUSH
41556: CALL_OW 69
41560: ST_TO_ADDR
// if tmp then
41561: LD_VAR 0 2
41565: IFFALSE 41699
// for i in tmp do
41567: LD_ADDR_VAR 0 1
41571: PUSH
41572: LD_VAR 0 2
41576: PUSH
41577: FOR_IN
41578: IFFALSE 41697
// if See ( 1 , i ) then
41580: LD_INT 1
41582: PPUSH
41583: LD_VAR 0 1
41587: PPUSH
41588: CALL_OW 292
41592: IFFALSE 41695
// begin seen := Replace ( seen , 3 , true ) ;
41594: LD_ADDR_EXP 9
41598: PUSH
41599: LD_EXP 9
41603: PPUSH
41604: LD_INT 3
41606: PPUSH
41607: LD_INT 1
41609: PPUSH
41610: CALL_OW 1
41614: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41615: LD_INT 1
41617: PPUSH
41618: CALL 2097 0 1
41622: IFFALSE 41695
// begin DialogueOn ;
41624: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41637: LD_INT 10
41639: PPUSH
41640: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
41644: LD_ADDR_VAR 0 3
41648: PUSH
41649: LD_INT 1
41651: PPUSH
41652: LD_STRING D8-Sol1-1
41654: PPUSH
41655: CALL 2268 0 2
41659: ST_TO_ADDR
// if not un then
41660: LD_VAR 0 3
41664: NOT
41665: IFFALSE 41677
// SayRand ( sex_female , D8-FSol1-1 ) ;
41667: LD_INT 2
41669: PPUSH
41670: LD_STRING D8-FSol1-1
41672: PPUSH
41673: CALL 2268 0 2
// Say ( JMM , D8-JMM-1 ) ;
41677: LD_EXP 17
41681: PPUSH
41682: LD_STRING D8-JMM-1
41684: PPUSH
41685: CALL_OW 88
// DialogueOff ;
41689: CALL_OW 7
// break ;
41693: GO 41697
// end ; end ;
41695: GO 41577
41697: POP
41698: POP
// end ; if not seen [ 4 ] then
41699: LD_EXP 9
41703: PUSH
41704: LD_INT 4
41706: ARRAY
41707: NOT
41708: IFFALSE 41870
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
41710: LD_ADDR_VAR 0 2
41714: PUSH
41715: LD_INT 22
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 33
41727: PUSH
41728: LD_INT 5
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PPUSH
41739: CALL_OW 69
41743: ST_TO_ADDR
// if tmp then
41744: LD_VAR 0 2
41748: IFFALSE 41870
// for i in tmp do
41750: LD_ADDR_VAR 0 1
41754: PUSH
41755: LD_VAR 0 2
41759: PUSH
41760: FOR_IN
41761: IFFALSE 41868
// if See ( 1 , i ) then
41763: LD_INT 1
41765: PPUSH
41766: LD_VAR 0 1
41770: PPUSH
41771: CALL_OW 292
41775: IFFALSE 41866
// begin seen := Replace ( seen , 4 , true ) ;
41777: LD_ADDR_EXP 9
41781: PUSH
41782: LD_EXP 9
41786: PPUSH
41787: LD_INT 4
41789: PPUSH
41790: LD_INT 1
41792: PPUSH
41793: CALL_OW 1
41797: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41798: LD_INT 1
41800: PPUSH
41801: CALL 2097 0 1
41805: IFFALSE 41866
// begin DialogueOn ;
41807: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
41820: LD_INT 10
41822: PPUSH
41823: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
41827: LD_ADDR_VAR 0 3
41831: PUSH
41832: LD_INT 1
41834: PPUSH
41835: LD_STRING D5a-Sol1-1
41837: PPUSH
41838: CALL 2268 0 2
41842: ST_TO_ADDR
// if not un then
41843: LD_VAR 0 3
41847: NOT
41848: IFFALSE 41860
// SayRand ( sex_female , D5a-FSol1-1 ) ;
41850: LD_INT 2
41852: PPUSH
41853: LD_STRING D5a-FSol1-1
41855: PPUSH
41856: CALL 2268 0 2
// DialogueOff ;
41860: CALL_OW 7
// break ;
41864: GO 41868
// end ; end ;
41866: GO 41760
41868: POP
41869: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
41870: LD_EXP 9
41874: PUSH
41875: LD_INT 5
41877: ARRAY
41878: NOT
41879: PUSH
41880: LD_EXP 9
41884: PUSH
41885: LD_INT 3
41887: ARRAY
41888: AND
41889: IFFALSE 42063
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
41891: LD_ADDR_VAR 0 2
41895: PUSH
41896: LD_INT 22
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 34
41908: PUSH
41909: LD_INT 31
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PPUSH
41920: CALL_OW 69
41924: ST_TO_ADDR
// if tmp then
41925: LD_VAR 0 2
41929: IFFALSE 42063
// for i in tmp do
41931: LD_ADDR_VAR 0 1
41935: PUSH
41936: LD_VAR 0 2
41940: PUSH
41941: FOR_IN
41942: IFFALSE 42061
// if See ( 1 , i ) then
41944: LD_INT 1
41946: PPUSH
41947: LD_VAR 0 1
41951: PPUSH
41952: CALL_OW 292
41956: IFFALSE 42059
// begin seen := Replace ( seen , 5 , true ) ;
41958: LD_ADDR_EXP 9
41962: PUSH
41963: LD_EXP 9
41967: PPUSH
41968: LD_INT 5
41970: PPUSH
41971: LD_INT 1
41973: PPUSH
41974: CALL_OW 1
41978: ST_TO_ADDR
// if CanSayRand ( 1 ) then
41979: LD_INT 1
41981: PPUSH
41982: CALL 2097 0 1
41986: IFFALSE 42059
// begin DialogueOn ;
41988: CALL_OW 6
// CenterNowOnUnits ( i ) ;
41992: LD_VAR 0 1
41996: PPUSH
41997: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
42001: LD_INT 10
42003: PPUSH
42004: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
42008: LD_ADDR_VAR 0 3
42012: PUSH
42013: LD_INT 1
42015: PPUSH
42016: LD_STRING D8a-Sol2-1
42018: PPUSH
42019: CALL 2268 0 2
42023: ST_TO_ADDR
// if not un then
42024: LD_VAR 0 3
42028: NOT
42029: IFFALSE 42041
// SayRand ( sex_female , D8a-FSol2-1 ) ;
42031: LD_INT 2
42033: PPUSH
42034: LD_STRING D8a-FSol2-1
42036: PPUSH
42037: CALL 2268 0 2
// Say ( JMM , D8a-JMM-1 ) ;
42041: LD_EXP 17
42045: PPUSH
42046: LD_STRING D8a-JMM-1
42048: PPUSH
42049: CALL_OW 88
// DialogueOff ;
42053: CALL_OW 7
// break ;
42057: GO 42061
// end ; end ;
42059: GO 41941
42061: POP
42062: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
42063: LD_EXP 9
42067: PUSH
42068: LD_INT 1
42070: ARRAY
42071: PUSH
42072: LD_EXP 9
42076: PUSH
42077: LD_INT 2
42079: ARRAY
42080: AND
42081: PUSH
42082: LD_EXP 9
42086: PUSH
42087: LD_INT 3
42089: ARRAY
42090: AND
42091: PUSH
42092: LD_EXP 9
42096: PUSH
42097: LD_INT 4
42099: ARRAY
42100: AND
42101: PUSH
42102: LD_EXP 9
42106: PUSH
42107: LD_INT 5
42109: ARRAY
42110: AND
42111: IFFALSE 42114
// disable ;
42113: DISABLE
// end ;
42114: PPOPN 4
42116: END
// every 0 0$1 trigger kamikazed do var un ;
42117: LD_EXP 10
42121: IFFALSE 42319
42123: GO 42125
42125: DISABLE
42126: LD_INT 0
42128: PPUSH
// begin DialogueOn ;
42129: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
42133: LD_EXP 10
42137: PPUSH
42138: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
42142: LD_ADDR_VAR 0 1
42146: PUSH
42147: LD_INT 1
42149: PPUSH
42150: LD_STRING D5c-Sol1-1
42152: PPUSH
42153: CALL 2268 0 2
42157: ST_TO_ADDR
// if not un then
42158: LD_VAR 0 1
42162: NOT
42163: IFFALSE 42181
// un := SayRand ( sex_female , D5c-Sol1-1 ) ;
42165: LD_ADDR_VAR 0 1
42169: PUSH
42170: LD_INT 2
42172: PPUSH
42173: LD_STRING D5c-Sol1-1
42175: PPUSH
42176: CALL 2268 0 2
42180: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
42181: LD_EXP 17
42185: PPUSH
42186: LD_STRING D5c-JMM-1
42188: PPUSH
42189: CALL_OW 88
// if IsOk ( Lisa ) then
42193: LD_EXP 18
42197: PPUSH
42198: CALL_OW 302
42202: IFFALSE 42218
// Say ( Lisa , D5d-Lisa-1 ) else
42204: LD_EXP 18
42208: PPUSH
42209: LD_STRING D5d-Lisa-1
42211: PPUSH
42212: CALL_OW 88
42216: GO 42303
// if IsOk ( Cyrus ) then
42218: LD_EXP 21
42222: PPUSH
42223: CALL_OW 302
42227: IFFALSE 42243
// Say ( Cyrus , D5d-Cyrus-1 ) else
42229: LD_EXP 21
42233: PPUSH
42234: LD_STRING D5d-Cyrus-1
42236: PPUSH
42237: CALL_OW 88
42241: GO 42303
// if IsOk ( Gary ) then
42243: LD_EXP 28
42247: PPUSH
42248: CALL_OW 302
42252: IFFALSE 42268
// Say ( Gary , D5d-Gary-1 ) else
42254: LD_EXP 28
42258: PPUSH
42259: LD_STRING D5d-Gary-1
42261: PPUSH
42262: CALL_OW 88
42266: GO 42303
// if GetSex ( un ) = sex_male then
42268: LD_VAR 0 1
42272: PPUSH
42273: CALL_OW 258
42277: PUSH
42278: LD_INT 1
42280: EQUAL
42281: IFFALSE 42297
// Say ( un , D5d-Sol1-1 ) else
42283: LD_VAR 0 1
42287: PPUSH
42288: LD_STRING D5d-Sol1-1
42290: PPUSH
42291: CALL_OW 88
42295: GO 42303
// begin DialogueOff ;
42297: CALL_OW 7
// exit ;
42301: GO 42319
// end ; Say ( JMM , D5d-JMM-1 ) ;
42303: LD_EXP 17
42307: PPUSH
42308: LD_STRING D5d-JMM-1
42310: PPUSH
42311: CALL_OW 88
// DialogueOff ;
42315: CALL_OW 7
// end ;
42319: PPOPN 1
42321: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
42322: LD_INT 1
42324: PPUSH
42325: LD_INT 17
42327: PPUSH
42328: CALL_OW 294
42332: PUSH
42333: LD_INT 2
42335: GREATEREQUAL
42336: IFFALSE 42457
42338: GO 42340
42340: DISABLE
42341: LD_INT 0
42343: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
42344: LD_INT 10
42346: PPUSH
42347: LD_INT 5
42349: PPUSH
42350: LD_INT 1
42352: PPUSH
42353: LD_INT 10
42355: NEG
42356: PPUSH
42357: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
42361: LD_INT 10
42363: PPUSH
42364: LD_INT 5
42366: PPUSH
42367: LD_INT 1
42369: PPUSH
42370: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
42374: LD_INT 10
42376: PPUSH
42377: LD_INT 5
42379: PPUSH
42380: CALL_OW 86
// DialogueOn ;
42384: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
42388: LD_ADDR_VAR 0 1
42392: PUSH
42393: LD_INT 1
42395: PPUSH
42396: LD_STRING D6-Sci1-1
42398: PPUSH
42399: CALL 2268 0 2
42403: ST_TO_ADDR
// if un then
42404: LD_VAR 0 1
42408: IFFALSE 42446
// begin Say ( JMM , D6-JMM-1 ) ;
42410: LD_EXP 17
42414: PPUSH
42415: LD_STRING D6-JMM-1
42417: PPUSH
42418: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
42422: LD_VAR 0 1
42426: PPUSH
42427: LD_STRING D6-Sci1-2
42429: PPUSH
42430: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
42434: LD_EXP 17
42438: PPUSH
42439: LD_STRING D6-JMM-2
42441: PPUSH
42442: CALL_OW 88
// end ; DialogueOff ;
42446: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
42450: LD_STRING M3
42452: PPUSH
42453: CALL_OW 337
// end ;
42457: PPOPN 1
42459: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$2 trigger tick >= 31 31$00 and DangerAtRangeXY ( 2 , 169 , 90 , 40 ) [ 4 ] = 0 do var un , i , cargo , tmp ;
42460: LD_OWVAR 1
42464: PUSH
42465: LD_INT 65100
42467: GREATEREQUAL
42468: PUSH
42469: LD_INT 2
42471: PPUSH
42472: LD_INT 169
42474: PPUSH
42475: LD_INT 90
42477: PPUSH
42478: LD_INT 40
42480: PPUSH
42481: CALL 3705 0 4
42485: PUSH
42486: LD_INT 4
42488: ARRAY
42489: PUSH
42490: LD_INT 0
42492: EQUAL
42493: AND
42494: IFFALSE 43528
42496: GO 42498
42498: DISABLE
42499: LD_INT 0
42501: PPUSH
42502: PPUSH
42503: PPUSH
42504: PPUSH
// begin uc_side := 5 ;
42505: LD_ADDR_OWVAR 20
42509: PUSH
42510: LD_INT 5
42512: ST_TO_ADDR
// uc_nation := 2 ;
42513: LD_ADDR_OWVAR 21
42517: PUSH
42518: LD_INT 2
42520: ST_TO_ADDR
// InitHc ;
42521: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
42525: LD_INT 1
42527: PPUSH
42528: LD_INT 3
42530: PPUSH
42531: LD_INT 8
42533: PPUSH
42534: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42538: LD_ADDR_OWVAR 29
42542: PUSH
42543: LD_INT 12
42545: PUSH
42546: LD_INT 12
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
42553: LD_ADDR_OWVAR 33
42557: PUSH
42558: LD_STRING SecondCharsGal
42560: ST_TO_ADDR
// hc_face_number := 7 ;
42561: LD_ADDR_OWVAR 34
42565: PUSH
42566: LD_INT 7
42568: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
42569: LD_ADDR_EXP 41
42573: PUSH
42574: CALL_OW 44
42578: ST_TO_ADDR
// InitHc ;
42579: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
42583: LD_INT 1
42585: PPUSH
42586: LD_INT 16
42588: PPUSH
42589: LD_INT 2
42591: PPUSH
42592: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
42596: LD_ADDR_OWVAR 29
42600: PUSH
42601: LD_INT 12
42603: PUSH
42604: LD_INT 12
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: ST_TO_ADDR
// hc_name := Livid ;
42611: LD_ADDR_OWVAR 26
42615: PUSH
42616: LD_STRING Livid
42618: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
42619: LD_ADDR_EXP 42
42623: PUSH
42624: CALL_OW 44
42628: ST_TO_ADDR
// InitHc ;
42629: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
42633: LD_INT 35
42635: PPUSH
42636: CALL_OW 67
// until not InBattle ( 1 ) ;
42640: LD_INT 1
42642: PPUSH
42643: CALL_OW 463
42647: NOT
42648: IFFALSE 42633
// wait ( 0 0$5 ) ;
42650: LD_INT 175
42652: PPUSH
42653: CALL_OW 67
// DialogueOn ;
42657: CALL_OW 6
// InGameOn ;
42661: CALL_OW 8
// un := UnitFilter ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
42665: LD_ADDR_VAR 0 1
42669: PUSH
42670: LD_EXP 31
42674: PUSH
42675: LD_EXP 18
42679: PUSH
42680: LD_EXP 19
42684: PUSH
42685: LD_EXP 20
42689: PUSH
42690: LD_EXP 21
42694: PUSH
42695: LD_EXP 22
42699: PUSH
42700: LD_EXP 23
42704: PUSH
42705: LD_EXP 24
42709: PUSH
42710: LD_EXP 25
42714: PUSH
42715: LD_EXP 27
42719: PUSH
42720: LD_EXP 28
42724: PUSH
42725: LD_EXP 29
42729: PUSH
42730: LD_EXP 30
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: DIFF
42749: PPUSH
42750: LD_INT 26
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PPUSH
42760: CALL_OW 72
42764: PUSH
42765: LD_INT 1
42767: ARRAY
42768: ST_TO_ADDR
// if not un and Brown then
42769: LD_VAR 0 1
42773: NOT
42774: PUSH
42775: LD_EXP 23
42779: AND
42780: IFFALSE 42792
// un := Brown ;
42782: LD_ADDR_VAR 0 1
42786: PUSH
42787: LD_EXP 23
42791: ST_TO_ADDR
// if un then
42792: LD_VAR 0 1
42796: IFFALSE 42822
// begin Say ( un , D7-Sol1-1 ) ;
42798: LD_VAR 0 1
42802: PPUSH
42803: LD_STRING D7-Sol1-1
42805: PPUSH
42806: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
42810: LD_EXP 17
42814: PPUSH
42815: LD_STRING D7-JMM-1
42817: PPUSH
42818: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
42822: LD_EXP 41
42826: PPUSH
42827: LD_STRING D7-Ar1-1
42829: PPUSH
42830: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
42834: LD_EXP 17
42838: PPUSH
42839: LD_STRING D7-JMM-2
42841: PPUSH
42842: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
42846: LD_EXP 41
42850: PPUSH
42851: LD_STRING D7-Ar1-2
42853: PPUSH
42854: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
42858: LD_EXP 17
42862: PPUSH
42863: LD_STRING D7-JMM-3
42865: PPUSH
42866: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
42870: LD_EXP 41
42874: PPUSH
42875: LD_STRING D7-Ar1-3
42877: PPUSH
42878: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
42882: LD_EXP 17
42886: PPUSH
42887: LD_STRING D7-JMM-4
42889: PPUSH
42890: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
42894: LD_EXP 41
42898: PPUSH
42899: LD_STRING D7-Ar1-4
42901: PPUSH
42902: CALL_OW 94
// InGameOff ;
42906: CALL_OW 9
// DialogueOff ;
42910: CALL_OW 7
// case Query ( QCameras ) of 1 :
42914: LD_STRING QCameras
42916: PPUSH
42917: CALL_OW 97
42921: PUSH
42922: LD_INT 1
42924: DOUBLE
42925: EQUAL
42926: IFTRUE 42930
42928: GO 42933
42930: POP
// ; 2 :
42931: GO 42947
42933: LD_INT 2
42935: DOUBLE
42936: EQUAL
42937: IFTRUE 42941
42939: GO 42946
42941: POP
// exit ; end ;
42942: GO 43528
42944: GO 42947
42946: POP
// ChangeMissionObjectives ( MCar ) ;
42947: LD_STRING MCar
42949: PPUSH
42950: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
42954: LD_INT 124
42956: PPUSH
42957: LD_INT 90
42959: PPUSH
42960: LD_INT 1
42962: PPUSH
42963: LD_INT 6
42965: NEG
42966: PPUSH
42967: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
42971: LD_INT 124
42973: PPUSH
42974: LD_INT 90
42976: PPUSH
42977: LD_INT 1
42979: PPUSH
42980: CALL_OW 331
// SetAreaMapShow ( parking_area , 1 ) ;
42984: LD_INT 12
42986: PPUSH
42987: LD_INT 1
42989: PPUSH
42990: CALL_OW 424
// wait ( 3 ) ;
42994: LD_INT 3
42996: PPUSH
42997: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
43001: LD_INT 124
43003: PPUSH
43004: LD_INT 90
43006: PPUSH
43007: CALL_OW 86
// cargo := false ;
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 0
43018: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
43019: LD_INT 35
43021: PPUSH
43022: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_area , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 12
43033: PPUSH
43034: LD_INT 32
43036: PUSH
43037: LD_INT 3
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 34
43046: PUSH
43047: LD_INT 32
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 58
43056: PUSH
43057: EMPTY
43058: LIST
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: PPUSH
43065: CALL_OW 70
43069: ST_TO_ADDR
// until cargo ;
43070: LD_VAR 0 3
43074: IFFALSE 43019
// cargo := cargo [ 1 ] ;
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_VAR 0 3
43085: PUSH
43086: LD_INT 1
43088: ARRAY
43089: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
43090: LD_VAR 0 3
43094: PPUSH
43095: LD_INT 5
43097: PPUSH
43098: CALL_OW 235
// SetAreaMapShow ( parking_area , 0 ) ;
43102: LD_INT 12
43104: PPUSH
43105: LD_INT 0
43107: PPUSH
43108: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
43112: LD_EXP 41
43116: PPUSH
43117: LD_INT 11
43119: PPUSH
43120: LD_INT 0
43122: PPUSH
43123: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
43127: LD_EXP 42
43131: PPUSH
43132: LD_INT 11
43134: PPUSH
43135: LD_INT 0
43137: PPUSH
43138: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_area ) ;
43142: LD_EXP 41
43146: PUSH
43147: LD_EXP 42
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PPUSH
43156: LD_INT 12
43158: PPUSH
43159: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
43163: LD_EXP 41
43167: PPUSH
43168: LD_VAR 0 3
43172: PPUSH
43173: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43177: LD_EXP 41
43181: PUSH
43182: LD_EXP 42
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PPUSH
43191: LD_INT 209
43193: PPUSH
43194: LD_INT 178
43196: PPUSH
43197: CALL_OW 171
// while ( true ) do
43201: LD_INT 1
43203: IFFALSE 43357
// begin wait ( 0 0$1 ) ;
43205: LD_INT 35
43207: PPUSH
43208: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
43212: LD_EXP 41
43216: PPUSH
43217: CALL_OW 314
43221: NOT
43222: PUSH
43223: LD_EXP 42
43227: PPUSH
43228: CALL_OW 314
43232: NOT
43233: OR
43234: IFFALSE 43260
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
43236: LD_EXP 41
43240: PUSH
43241: LD_EXP 42
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PPUSH
43250: LD_INT 209
43252: PPUSH
43253: LD_INT 178
43255: PPUSH
43256: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
43260: LD_EXP 41
43264: PPUSH
43265: LD_INT 10
43267: PPUSH
43268: CALL_OW 308
43272: IFFALSE 43283
// RemoveUnit ( ar_mechanic ) ;
43274: LD_EXP 41
43278: PPUSH
43279: CALL_OW 64
// if IsInArea ( ar_mechanic_friend , escape_area ) then
43283: LD_EXP 42
43287: PPUSH
43288: LD_INT 10
43290: PPUSH
43291: CALL_OW 308
43295: IFFALSE 43306
// RemoveUnit ( ar_mechanic_friend ) ;
43297: LD_EXP 42
43301: PPUSH
43302: CALL_OW 64
// if IsInArea ( cargo , escape_area ) then
43306: LD_VAR 0 3
43310: PPUSH
43311: LD_INT 10
43313: PPUSH
43314: CALL_OW 308
43318: IFFALSE 43329
// RemoveUnit ( cargo ) ;
43320: LD_VAR 0 3
43324: PPUSH
43325: CALL_OW 64
// if not IsLive ( ar_mechanic ) and not IsLive ( ar_mechanic_friend ) then
43329: LD_EXP 41
43333: PPUSH
43334: CALL_OW 300
43338: NOT
43339: PUSH
43340: LD_EXP 42
43344: PPUSH
43345: CALL_OW 300
43349: NOT
43350: AND
43351: IFFALSE 43355
// break ;
43353: GO 43357
// end ;
43355: GO 43201
// wait ( 0 0$2 ) ;
43357: LD_INT 70
43359: PPUSH
43360: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
43364: LD_EXP 41
43368: PPUSH
43369: LD_STRING D7a-Ar1-1
43371: PPUSH
43372: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
43376: LD_ADDR_VAR 0 4
43380: PUSH
43381: LD_INT 129
43383: PUSH
43384: LD_INT 10
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 103
43393: PUSH
43394: LD_INT 6
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 148
43403: PUSH
43404: LD_INT 47
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 155
43413: PUSH
43414: LD_INT 16
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: ST_TO_ADDR
// if Difficulty = 1 then
43427: LD_OWVAR 67
43431: PUSH
43432: LD_INT 1
43434: EQUAL
43435: IFFALSE 43472
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
43437: LD_ADDR_VAR 0 4
43441: PUSH
43442: LD_VAR 0 4
43446: PUSH
43447: LD_INT 78
43449: PUSH
43450: LD_INT 7
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 104
43459: PUSH
43460: LD_INT 43
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: ADD
43471: ST_TO_ADDR
// for i in tmp do
43472: LD_ADDR_VAR 0 2
43476: PUSH
43477: LD_VAR 0 4
43481: PUSH
43482: FOR_IN
43483: IFFALSE 43516
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
43485: LD_VAR 0 2
43489: PUSH
43490: LD_INT 1
43492: ARRAY
43493: PPUSH
43494: LD_VAR 0 2
43498: PUSH
43499: LD_INT 2
43501: ARRAY
43502: PPUSH
43503: LD_INT 1
43505: PPUSH
43506: LD_INT 9
43508: NEG
43509: PPUSH
43510: CALL_OW 330
43514: GO 43482
43516: POP
43517: POP
// CenterOnXY ( 129 , 10 ) ;
43518: LD_INT 129
43520: PPUSH
43521: LD_INT 10
43523: PPUSH
43524: CALL_OW 84
// end ;
43528: PPOPN 4
43530: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
43531: LD_EXP 14
43535: PUSH
43536: LD_INT 21000
43538: MINUS
43539: PUSH
43540: LD_OWVAR 1
43544: LESSEQUAL
43545: IFFALSE 43585
43547: GO 43549
43549: DISABLE
// begin powell_warn := true ;
43550: LD_ADDR_EXP 15
43554: PUSH
43555: LD_INT 1
43557: ST_TO_ADDR
// DialogueOn ;
43558: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
43562: LD_EXP 26
43566: PPUSH
43567: LD_STRING D9-Pow-1
43569: PPUSH
43570: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
43574: LD_INT 10
43576: PPUSH
43577: CALL_OW 68
// DialogueOff ;
43581: CALL_OW 7
// end ;
43585: END
// every 0 0$1 trigger game_time <= tick do
43586: LD_EXP 14
43590: PUSH
43591: LD_OWVAR 1
43595: LESSEQUAL
43596: IFFALSE 43635
43598: GO 43600
43600: DISABLE
// begin DialogueOn ;
43601: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
43605: LD_EXP 26
43609: PPUSH
43610: LD_STRING D9a-Pow-1
43612: PPUSH
43613: CALL_OW 94
// dwait ( 0 0$2 ) ;
43617: LD_INT 70
43619: PPUSH
43620: CALL_OW 68
// DialogueOff ;
43624: CALL_OW 7
// YouLost ( Command ) ;
43628: LD_STRING Command
43630: PPUSH
43631: CALL_OW 104
// end ;
43635: END
// every 0 0$1 trigger IsDead ( JMM ) and ar_run do
43636: LD_EXP 17
43640: PPUSH
43641: CALL_OW 301
43645: PUSH
43646: LD_EXP 5
43650: AND
43651: IFFALSE 43663
43653: GO 43655
43655: DISABLE
// YouLost ( JMM ) ;
43656: LD_STRING JMM
43658: PPUSH
43659: CALL_OW 104
43663: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do
43664: LD_INT 22
43666: PUSH
43667: LD_INT 2
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 30
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 69
43692: PUSH
43693: LD_INT 0
43695: EQUAL
43696: PUSH
43697: LD_EXP 17
43701: PPUSH
43702: CALL_OW 302
43706: AND
43707: IFFALSE 44448
43709: GO 43711
43711: DISABLE
// begin DialogueOn ;
43712: CALL_OW 6
// if tick < [ 60 60$00 , 50 50$00 , 45 45$00 ] [ Difficulty ] then
43716: LD_OWVAR 1
43720: PUSH
43721: LD_INT 126000
43723: PUSH
43724: LD_INT 105000
43726: PUSH
43727: LD_INT 94500
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: PUSH
43735: LD_OWVAR 67
43739: ARRAY
43740: LESS
43741: IFFALSE 43755
// AddMedal ( Time1 , 2 ) else
43743: LD_STRING Time1
43745: PPUSH
43746: LD_INT 2
43748: PPUSH
43749: CALL_OW 101
43753: GO 43785
// if not powell_warn then
43755: LD_EXP 15
43759: NOT
43760: IFFALSE 43774
// AddMedal ( Time1 , 1 ) else
43762: LD_STRING Time1
43764: PPUSH
43765: LD_INT 1
43767: PPUSH
43768: CALL_OW 101
43772: GO 43785
// AddMedal ( Time1 , - 1 ) ;
43774: LD_STRING Time1
43776: PPUSH
43777: LD_INT 1
43779: NEG
43780: PPUSH
43781: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
43785: LD_EXP 16
43789: PUSH
43790: LD_INT 5
43792: PUSH
43793: LD_INT 4
43795: PUSH
43796: LD_INT 3
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: PUSH
43804: LD_OWVAR 67
43808: ARRAY
43809: GREATEREQUAL
43810: IFFALSE 43825
// AddMedal ( Destroy , - 2 ) else
43812: LD_STRING Destroy
43814: PPUSH
43815: LD_INT 2
43817: NEG
43818: PPUSH
43819: CALL_OW 101
43823: GO 43942
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 20 then
43825: LD_INT 22
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 21
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 50
43847: PUSH
43848: EMPTY
43849: LIST
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: PPUSH
43856: CALL_OW 69
43860: PUSH
43861: LD_INT 20
43863: GREATEREQUAL
43864: IFFALSE 43879
// AddMedal ( Destroy , - 1 ) else
43866: LD_STRING Destroy
43868: PPUSH
43869: LD_INT 1
43871: NEG
43872: PPUSH
43873: CALL_OW 101
43877: GO 43942
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 10 then
43879: LD_INT 22
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 21
43891: PUSH
43892: LD_INT 3
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 50
43901: PUSH
43902: EMPTY
43903: LIST
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: LIST
43909: PPUSH
43910: CALL_OW 69
43914: PUSH
43915: LD_INT 10
43917: GREATEREQUAL
43918: IFFALSE 43932
// AddMedal ( Destroy , 1 ) else
43920: LD_STRING Destroy
43922: PPUSH
43923: LD_INT 1
43925: PPUSH
43926: CALL_OW 101
43930: GO 43942
// AddMedal ( Destroy , 2 ) ;
43932: LD_STRING Destroy
43934: PPUSH
43935: LD_INT 2
43937: PPUSH
43938: CALL_OW 101
// if artifact_get then
43942: LD_EXP 12
43946: IFFALSE 43960
// AddMedal ( Artefact , 1 ) else
43948: LD_STRING Artefact
43950: PPUSH
43951: LD_INT 1
43953: PPUSH
43954: CALL_OW 101
43958: GO 43971
// AddMedal ( Artefact , - 1 ) ;
43960: LD_STRING Artefact
43962: PPUSH
43963: LD_INT 1
43965: NEG
43966: PPUSH
43967: CALL_OW 101
// GiveMedals ( MAIN ) ;
43971: LD_STRING MAIN
43973: PPUSH
43974: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
43978: LD_INT 22
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 25
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 25
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 25
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 25
44023: PUSH
44024: LD_INT 4
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PPUSH
44042: CALL_OW 69
44046: PPUSH
44047: CALL_OW 43
// SaveCharacters ( us_team diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
44051: LD_EXP 31
44055: PUSH
44056: LD_EXP 18
44060: PUSH
44061: LD_EXP 19
44065: PUSH
44066: LD_EXP 20
44070: PUSH
44071: LD_EXP 21
44075: PUSH
44076: LD_EXP 22
44080: PUSH
44081: LD_EXP 23
44085: PUSH
44086: LD_EXP 24
44090: PUSH
44091: LD_EXP 25
44095: PUSH
44096: LD_EXP 27
44100: PUSH
44101: LD_EXP 28
44105: PUSH
44106: LD_EXP 29
44110: PUSH
44111: LD_EXP 30
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: DIFF
44130: PPUSH
44131: LD_STRING 11c_others
44133: PPUSH
44134: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
44138: LD_EXP 17
44142: PPUSH
44143: LD_EXP 3
44147: PUSH
44148: LD_STRING JMM
44150: STR
44151: PPUSH
44152: CALL_OW 38
// if Lisa then
44156: LD_EXP 18
44160: IFFALSE 44180
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
44162: LD_EXP 18
44166: PPUSH
44167: LD_EXP 3
44171: PUSH
44172: LD_STRING Lisa
44174: STR
44175: PPUSH
44176: CALL_OW 38
// if Donaldson then
44180: LD_EXP 19
44184: IFFALSE 44204
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
44186: LD_EXP 19
44190: PPUSH
44191: LD_EXP 3
44195: PUSH
44196: LD_STRING Donaldson
44198: STR
44199: PPUSH
44200: CALL_OW 38
// if Bobby then
44204: LD_EXP 20
44208: IFFALSE 44228
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
44210: LD_EXP 20
44214: PPUSH
44215: LD_EXP 3
44219: PUSH
44220: LD_STRING Bobby
44222: STR
44223: PPUSH
44224: CALL_OW 38
// if Cyrus then
44228: LD_EXP 21
44232: IFFALSE 44252
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
44234: LD_EXP 21
44238: PPUSH
44239: LD_EXP 3
44243: PUSH
44244: LD_STRING Cyrus
44246: STR
44247: PPUSH
44248: CALL_OW 38
// if Denis then
44252: LD_EXP 22
44256: IFFALSE 44276
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
44258: LD_EXP 22
44262: PPUSH
44263: LD_EXP 3
44267: PUSH
44268: LD_STRING Denis
44270: STR
44271: PPUSH
44272: CALL_OW 38
// if Brown then
44276: LD_EXP 23
44280: IFFALSE 44300
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
44282: LD_EXP 23
44286: PPUSH
44287: LD_EXP 3
44291: PUSH
44292: LD_STRING Brown
44294: STR
44295: PPUSH
44296: CALL_OW 38
// if Gladstone then
44300: LD_EXP 24
44304: IFFALSE 44324
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
44306: LD_EXP 24
44310: PPUSH
44311: LD_EXP 3
44315: PUSH
44316: LD_STRING Gladstone
44318: STR
44319: PPUSH
44320: CALL_OW 38
// if Houten then
44324: LD_EXP 25
44328: IFFALSE 44348
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
44330: LD_EXP 25
44334: PPUSH
44335: LD_EXP 3
44339: PUSH
44340: LD_STRING Houten
44342: STR
44343: PPUSH
44344: CALL_OW 38
// if Cornel then
44348: LD_EXP 27
44352: IFFALSE 44372
// SaveCharacters ( Cornel , mission_prefix & Cornel ) ;
44354: LD_EXP 27
44358: PPUSH
44359: LD_EXP 3
44363: PUSH
44364: LD_STRING Cornel
44366: STR
44367: PPUSH
44368: CALL_OW 38
// if Gary then
44372: LD_EXP 28
44376: IFFALSE 44396
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
44378: LD_EXP 28
44382: PPUSH
44383: LD_EXP 3
44387: PUSH
44388: LD_STRING Gary
44390: STR
44391: PPUSH
44392: CALL_OW 38
// if Frank then
44396: LD_EXP 29
44400: IFFALSE 44420
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
44402: LD_EXP 29
44406: PPUSH
44407: LD_EXP 3
44411: PUSH
44412: LD_STRING Frank
44414: STR
44415: PPUSH
44416: CALL_OW 38
// if Kikuchi then
44420: LD_EXP 30
44424: IFFALSE 44444
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
44426: LD_EXP 30
44430: PPUSH
44431: LD_EXP 3
44435: PUSH
44436: LD_STRING Kikuchi
44438: STR
44439: PPUSH
44440: CALL_OW 38
// YouWin ;
44444: CALL_OW 103
// end ; end_of_file
44448: END
// export skirmish ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking ; export function InitMacro ; begin
44449: LD_INT 0
44451: PPUSH
// skirmish := false ;
44452: LD_ADDR_EXP 43
44456: PUSH
44457: LD_INT 0
44459: ST_TO_ADDR
// mc_bases := [ ] ;
44460: LD_ADDR_EXP 44
44464: PUSH
44465: EMPTY
44466: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
44467: LD_ADDR_EXP 45
44471: PUSH
44472: EMPTY
44473: ST_TO_ADDR
// mc_building_repairs := [ ] ;
44474: LD_ADDR_EXP 46
44478: PUSH
44479: EMPTY
44480: ST_TO_ADDR
// mc_need_heal := [ ] ;
44481: LD_ADDR_EXP 47
44485: PUSH
44486: EMPTY
44487: ST_TO_ADDR
// mc_healers := [ ] ;
44488: LD_ADDR_EXP 48
44492: PUSH
44493: EMPTY
44494: ST_TO_ADDR
// mc_build_list := [ ] ;
44495: LD_ADDR_EXP 49
44499: PUSH
44500: EMPTY
44501: ST_TO_ADDR
// mc_builders := [ ] ;
44502: LD_ADDR_EXP 50
44506: PUSH
44507: EMPTY
44508: ST_TO_ADDR
// mc_construct_list := [ ] ;
44509: LD_ADDR_EXP 51
44513: PUSH
44514: EMPTY
44515: ST_TO_ADDR
// mc_turret_list := [ ] ;
44516: LD_ADDR_EXP 52
44520: PUSH
44521: EMPTY
44522: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
44523: LD_ADDR_EXP 53
44527: PUSH
44528: EMPTY
44529: ST_TO_ADDR
// mc_miners := [ ] ;
44530: LD_ADDR_EXP 55
44534: PUSH
44535: EMPTY
44536: ST_TO_ADDR
// mc_mines := [ ] ;
44537: LD_ADDR_EXP 54
44541: PUSH
44542: EMPTY
44543: ST_TO_ADDR
// mc_minefields := [ ] ;
44544: LD_ADDR_EXP 56
44548: PUSH
44549: EMPTY
44550: ST_TO_ADDR
// mc_crates := [ ] ;
44551: LD_ADDR_EXP 57
44555: PUSH
44556: EMPTY
44557: ST_TO_ADDR
// mc_crates_collector := [ ] ;
44558: LD_ADDR_EXP 58
44562: PUSH
44563: EMPTY
44564: ST_TO_ADDR
// mc_vehicles := [ ] ;
44565: LD_ADDR_EXP 59
44569: PUSH
44570: EMPTY
44571: ST_TO_ADDR
// mc_attack := [ ] ;
44572: LD_ADDR_EXP 60
44576: PUSH
44577: EMPTY
44578: ST_TO_ADDR
// mc_produce := [ ] ;
44579: LD_ADDR_EXP 61
44583: PUSH
44584: EMPTY
44585: ST_TO_ADDR
// mc_defender := [ ] ;
44586: LD_ADDR_EXP 62
44590: PUSH
44591: EMPTY
44592: ST_TO_ADDR
// mc_parking := [ ] ;
44593: LD_ADDR_EXP 64
44597: PUSH
44598: EMPTY
44599: ST_TO_ADDR
// mc_scan := [ ] ;
44600: LD_ADDR_EXP 63
44604: PUSH
44605: EMPTY
44606: ST_TO_ADDR
// end ;
44607: LD_VAR 0 1
44611: RET
// export function RunMacro ; var i ; begin
44612: LD_INT 0
44614: PPUSH
44615: PPUSH
// for i = 1 to mc_bases do
44616: LD_ADDR_VAR 0 2
44620: PUSH
44621: DOUBLE
44622: LD_INT 1
44624: DEC
44625: ST_TO_ADDR
44626: LD_EXP 44
44630: PUSH
44631: FOR_TO
44632: IFFALSE 45120
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
44634: LD_ADDR_EXP 45
44638: PUSH
44639: LD_EXP 45
44643: PPUSH
44644: LD_VAR 0 2
44648: PPUSH
44649: EMPTY
44650: PPUSH
44651: CALL_OW 1
44655: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
44656: LD_ADDR_EXP 46
44660: PUSH
44661: LD_EXP 46
44665: PPUSH
44666: LD_VAR 0 2
44670: PPUSH
44671: EMPTY
44672: PPUSH
44673: CALL_OW 1
44677: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
44678: LD_ADDR_EXP 47
44682: PUSH
44683: LD_EXP 47
44687: PPUSH
44688: LD_VAR 0 2
44692: PPUSH
44693: EMPTY
44694: PPUSH
44695: CALL_OW 1
44699: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
44700: LD_ADDR_EXP 48
44704: PUSH
44705: LD_EXP 48
44709: PPUSH
44710: LD_VAR 0 2
44714: PPUSH
44715: EMPTY
44716: PUSH
44717: EMPTY
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PPUSH
44723: CALL_OW 1
44727: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
44728: LD_ADDR_EXP 49
44732: PUSH
44733: LD_EXP 49
44737: PPUSH
44738: LD_VAR 0 2
44742: PPUSH
44743: EMPTY
44744: PPUSH
44745: CALL_OW 1
44749: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
44750: LD_ADDR_EXP 51
44754: PUSH
44755: LD_EXP 51
44759: PPUSH
44760: LD_VAR 0 2
44764: PPUSH
44765: EMPTY
44766: PPUSH
44767: CALL_OW 1
44771: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , [ ] ) ;
44772: LD_ADDR_EXP 52
44776: PUSH
44777: LD_EXP 52
44781: PPUSH
44782: LD_VAR 0 2
44786: PPUSH
44787: EMPTY
44788: PPUSH
44789: CALL_OW 1
44793: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , [ ] ) ;
44794: LD_ADDR_EXP 53
44798: PUSH
44799: LD_EXP 53
44803: PPUSH
44804: LD_VAR 0 2
44808: PPUSH
44809: EMPTY
44810: PPUSH
44811: CALL_OW 1
44815: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , [ ] ) ;
44816: LD_ADDR_EXP 53
44820: PUSH
44821: LD_EXP 53
44825: PPUSH
44826: LD_VAR 0 2
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PPUSH
44838: EMPTY
44839: PPUSH
44840: CALL 3211 0 3
44844: ST_TO_ADDR
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
44845: LD_ADDR_EXP 53
44849: PUSH
44850: LD_EXP 53
44854: PPUSH
44855: LD_VAR 0 2
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PPUSH
44867: EMPTY
44868: PPUSH
44869: CALL 3211 0 3
44873: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
44874: LD_ADDR_EXP 55
44878: PUSH
44879: LD_EXP 55
44883: PPUSH
44884: LD_VAR 0 2
44888: PPUSH
44889: EMPTY
44890: PPUSH
44891: CALL_OW 1
44895: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
44896: LD_ADDR_EXP 54
44900: PUSH
44901: LD_EXP 54
44905: PPUSH
44906: LD_VAR 0 2
44910: PPUSH
44911: EMPTY
44912: PPUSH
44913: CALL_OW 1
44917: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
44918: LD_ADDR_EXP 56
44922: PUSH
44923: LD_EXP 56
44927: PPUSH
44928: LD_VAR 0 2
44932: PPUSH
44933: EMPTY
44934: PPUSH
44935: CALL_OW 1
44939: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
44940: LD_ADDR_EXP 57
44944: PUSH
44945: LD_EXP 57
44949: PPUSH
44950: LD_VAR 0 2
44954: PPUSH
44955: EMPTY
44956: PPUSH
44957: CALL_OW 1
44961: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
44962: LD_ADDR_EXP 58
44966: PUSH
44967: LD_EXP 58
44971: PPUSH
44972: LD_VAR 0 2
44976: PPUSH
44977: EMPTY
44978: PPUSH
44979: CALL_OW 1
44983: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
44984: LD_ADDR_EXP 59
44988: PUSH
44989: LD_EXP 59
44993: PPUSH
44994: LD_VAR 0 2
44998: PPUSH
44999: EMPTY
45000: PPUSH
45001: CALL_OW 1
45005: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
45006: LD_ADDR_EXP 60
45010: PUSH
45011: LD_EXP 60
45015: PPUSH
45016: LD_VAR 0 2
45020: PPUSH
45021: EMPTY
45022: PPUSH
45023: CALL_OW 1
45027: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
45028: LD_ADDR_EXP 61
45032: PUSH
45033: LD_EXP 61
45037: PPUSH
45038: LD_VAR 0 2
45042: PPUSH
45043: EMPTY
45044: PPUSH
45045: CALL_OW 1
45049: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
45050: LD_ADDR_EXP 62
45054: PUSH
45055: LD_EXP 62
45059: PPUSH
45060: LD_VAR 0 2
45064: PPUSH
45065: EMPTY
45066: PPUSH
45067: CALL_OW 1
45071: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
45072: LD_ADDR_EXP 64
45076: PUSH
45077: LD_EXP 64
45081: PPUSH
45082: LD_VAR 0 2
45086: PPUSH
45087: LD_INT 0
45089: PPUSH
45090: CALL_OW 1
45094: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
45095: LD_ADDR_EXP 63
45099: PUSH
45100: LD_EXP 63
45104: PPUSH
45105: LD_VAR 0 2
45109: PPUSH
45110: LD_INT 0
45112: PPUSH
45113: CALL_OW 1
45117: ST_TO_ADDR
// end ;
45118: GO 44631
45120: POP
45121: POP
// MC_SetMinesField ( 1 , [ 8 , 10 , 12 ] [ Difficulty ] , minefield1_left ) ;
45122: LD_INT 1
45124: PPUSH
45125: LD_INT 8
45127: PUSH
45128: LD_INT 10
45130: PUSH
45131: LD_INT 12
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: PUSH
45139: LD_OWVAR 67
45143: ARRAY
45144: PPUSH
45145: LD_INT 3
45147: PPUSH
45148: CALL 52527 0 3
// MC_SetMinesField ( 2 , [ 6 , 8 , 9 ] [ Difficulty ] , minefield2_left ) ;
45152: LD_INT 2
45154: PPUSH
45155: LD_INT 6
45157: PUSH
45158: LD_INT 8
45160: PUSH
45161: LD_INT 9
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: LIST
45168: PUSH
45169: LD_OWVAR 67
45173: ARRAY
45174: PPUSH
45175: LD_INT 2
45177: PPUSH
45178: CALL 52527 0 3
// MC_SetMinesField ( 3 , [ 6 , 7 , 9 ] [ Difficulty ] , minefield3_left ) ;
45182: LD_INT 3
45184: PPUSH
45185: LD_INT 6
45187: PUSH
45188: LD_INT 7
45190: PUSH
45191: LD_INT 9
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: PUSH
45199: LD_OWVAR 67
45203: ARRAY
45204: PPUSH
45205: LD_INT 1
45207: PPUSH
45208: CALL 52527 0 3
// mc_parking := [ parking_north , parking_west , parking_east ] ;
45212: LD_ADDR_EXP 64
45216: PUSH
45217: LD_INT 20
45219: PUSH
45220: LD_INT 21
45222: PUSH
45223: LD_INT 22
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// for i = 1 to mc_bases do
45231: LD_ADDR_VAR 0 2
45235: PUSH
45236: DOUBLE
45237: LD_INT 1
45239: DEC
45240: ST_TO_ADDR
45241: LD_EXP 44
45245: PUSH
45246: FOR_TO
45247: IFFALSE 45271
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
45249: LD_VAR 0 2
45253: PPUSH
45254: LD_EXP 39
45258: PUSH
45259: LD_VAR 0 2
45263: ARRAY
45264: PPUSH
45265: CALL 52872 0 2
45269: GO 45246
45271: POP
45272: POP
// skirmish := true ;
45273: LD_ADDR_EXP 43
45277: PUSH
45278: LD_INT 1
45280: ST_TO_ADDR
// end ;
45281: LD_VAR 0 1
45285: RET
// every 0 0$01 trigger skirmish do
45286: LD_EXP 43
45290: IFFALSE 45374
45292: GO 45294
45294: DISABLE
// begin enable ;
45295: ENABLE
// MC_CheckBuildings ( ) ;
45296: CALL 45629 0 0
// MC_CheckPeopleLife ( ) ;
45300: CALL 45847 0 0
// RaiseSailEvent ( 103 ) ;
45304: LD_INT 103
45306: PPUSH
45307: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
45311: LD_INT 104
45313: PPUSH
45314: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
45318: LD_INT 105
45320: PPUSH
45321: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
45325: LD_INT 106
45327: PPUSH
45328: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
45332: LD_INT 107
45334: PPUSH
45335: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
45339: LD_INT 108
45341: PPUSH
45342: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
45346: LD_INT 109
45348: PPUSH
45349: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
45353: LD_INT 110
45355: PPUSH
45356: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
45360: LD_INT 111
45362: PPUSH
45363: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
45367: LD_INT 200
45369: PPUSH
45370: CALL_OW 427
// end ;
45374: END
// on SailEvent ( event ) do begin if event = 101 then
45375: LD_VAR 0 1
45379: PUSH
45380: LD_INT 101
45382: EQUAL
45383: IFFALSE 45389
// MC_RepairBuildings ( ) ;
45385: CALL 46393 0 0
// if event = 102 then
45389: LD_VAR 0 1
45393: PUSH
45394: LD_INT 102
45396: EQUAL
45397: IFFALSE 45403
// MC_Heal ( ) ;
45399: CALL 46787 0 0
// if event = 103 then
45403: LD_VAR 0 1
45407: PUSH
45408: LD_INT 103
45410: EQUAL
45411: IFFALSE 45417
// MC_Build ( ) ;
45413: CALL 47172 0 0
// if event = 104 then
45417: LD_VAR 0 1
45421: PUSH
45422: LD_INT 104
45424: EQUAL
45425: IFFALSE 45431
// MC_TurretWeapon ( ) ;
45427: CALL 47940 0 0
// if event = 105 then
45431: LD_VAR 0 1
45435: PUSH
45436: LD_INT 105
45438: EQUAL
45439: IFFALSE 45445
// MC_TurretCrew ( ) ;
45441: CALL 48259 0 0
// if event = 106 then
45445: LD_VAR 0 1
45449: PUSH
45450: LD_INT 106
45452: EQUAL
45453: IFFALSE 45459
// MC_PlantMines ( ) ;
45455: CALL 49073 0 0
// if event = 107 then
45459: LD_VAR 0 1
45463: PUSH
45464: LD_INT 107
45466: EQUAL
45467: IFFALSE 45473
// MC_CollectCrates ( ) ;
45469: CALL 50003 0 0
// if event = 108 then
45473: LD_VAR 0 1
45477: PUSH
45478: LD_INT 108
45480: EQUAL
45481: IFFALSE 45487
// MC_LinkRemoteControl ( ) ;
45483: CALL 50800 0 0
// if event = 109 then
45487: LD_VAR 0 1
45491: PUSH
45492: LD_INT 109
45494: EQUAL
45495: IFFALSE 45501
// MC_ProduceVehicle ( ) ;
45497: CALL 50969 0 0
// if event = 110 then
45501: LD_VAR 0 1
45505: PUSH
45506: LD_INT 110
45508: EQUAL
45509: IFFALSE 45515
// MC_SendAttack ( ) ;
45511: CALL 51357 0 0
// if event = 111 then
45515: LD_VAR 0 1
45519: PUSH
45520: LD_INT 111
45522: EQUAL
45523: IFFALSE 45529
// MC_Defend ( ) ;
45525: CALL 51465 0 0
// if event = 200 then
45529: LD_VAR 0 1
45533: PUSH
45534: LD_INT 200
45536: EQUAL
45537: IFFALSE 45543
// MC_Idle ( ) ;
45539: CALL 52278 0 0
// end ;
45543: PPOPN 1
45545: END
// export function MC_Reset ( base , tag ) ; var i ; begin
45546: LD_INT 0
45548: PPUSH
45549: PPUSH
// if not mc_bases [ base ] or not tag then
45550: LD_EXP 44
45554: PUSH
45555: LD_VAR 0 1
45559: ARRAY
45560: NOT
45561: PUSH
45562: LD_VAR 0 2
45566: NOT
45567: OR
45568: IFFALSE 45572
// exit ;
45570: GO 45624
// for i in mc_bases [ base ] do
45572: LD_ADDR_VAR 0 4
45576: PUSH
45577: LD_EXP 44
45581: PUSH
45582: LD_VAR 0 1
45586: ARRAY
45587: PUSH
45588: FOR_IN
45589: IFFALSE 45622
// if GetTag ( i ) = tag then
45591: LD_VAR 0 4
45595: PPUSH
45596: CALL_OW 110
45600: PUSH
45601: LD_VAR 0 2
45605: EQUAL
45606: IFFALSE 45620
// SetTag ( i , 0 ) ;
45608: LD_VAR 0 4
45612: PPUSH
45613: LD_INT 0
45615: PPUSH
45616: CALL_OW 109
45620: GO 45588
45622: POP
45623: POP
// end ;
45624: LD_VAR 0 3
45628: RET
// export function MC_CheckBuildings ( ) ; var i , j , tmp ; begin
45629: LD_INT 0
45631: PPUSH
45632: PPUSH
45633: PPUSH
45634: PPUSH
// if not mc_bases then
45635: LD_EXP 44
45639: NOT
45640: IFFALSE 45644
// exit ;
45642: GO 45842
// for i = 1 to mc_bases do
45644: LD_ADDR_VAR 0 2
45648: PUSH
45649: DOUBLE
45650: LD_INT 1
45652: DEC
45653: ST_TO_ADDR
45654: LD_EXP 44
45658: PUSH
45659: FOR_TO
45660: IFFALSE 45827
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
45662: LD_ADDR_VAR 0 4
45666: PUSH
45667: LD_EXP 44
45671: PUSH
45672: LD_VAR 0 2
45676: ARRAY
45677: PPUSH
45678: LD_INT 21
45680: PUSH
45681: LD_INT 3
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 3
45690: PUSH
45691: LD_INT 24
45693: PUSH
45694: LD_INT 1000
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PPUSH
45709: CALL_OW 72
45713: ST_TO_ADDR
// if not tmp then
45714: LD_VAR 0 4
45718: NOT
45719: IFFALSE 45745
// begin mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
45721: LD_ADDR_EXP 45
45725: PUSH
45726: LD_EXP 45
45730: PPUSH
45731: LD_VAR 0 2
45735: PPUSH
45736: EMPTY
45737: PPUSH
45738: CALL_OW 1
45742: ST_TO_ADDR
// continue ;
45743: GO 45659
// end ; for j in tmp do
45745: LD_ADDR_VAR 0 3
45749: PUSH
45750: LD_VAR 0 4
45754: PUSH
45755: FOR_IN
45756: IFFALSE 45823
// if not j in mc_building_need_repair [ i ] then
45758: LD_VAR 0 3
45762: PUSH
45763: LD_EXP 45
45767: PUSH
45768: LD_VAR 0 2
45772: ARRAY
45773: IN
45774: NOT
45775: IFFALSE 45821
// mc_building_need_repair := Add ( mc_building_need_repair , [ i , mc_building_need_repair [ i ] + 1 ] , j ) ;
45777: LD_ADDR_EXP 45
45781: PUSH
45782: LD_EXP 45
45786: PPUSH
45787: LD_VAR 0 2
45791: PUSH
45792: LD_EXP 45
45796: PUSH
45797: LD_VAR 0 2
45801: ARRAY
45802: PUSH
45803: LD_INT 1
45805: PLUS
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PPUSH
45811: LD_VAR 0 3
45815: PPUSH
45816: CALL 3211 0 3
45820: ST_TO_ADDR
45821: GO 45755
45823: POP
45824: POP
// end ;
45825: GO 45659
45827: POP
45828: POP
// if mc_building_need_repair then
45829: LD_EXP 45
45833: IFFALSE 45842
// RaiseSailEvent ( 101 ) ;
45835: LD_INT 101
45837: PPUSH
45838: CALL_OW 427
// end ;
45842: LD_VAR 0 1
45846: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
45847: LD_INT 0
45849: PPUSH
45850: PPUSH
45851: PPUSH
45852: PPUSH
45853: PPUSH
45854: PPUSH
45855: PPUSH
// if not mc_bases then
45856: LD_EXP 44
45860: NOT
45861: IFFALSE 45865
// exit ;
45863: GO 46388
// for i = 1 to mc_bases do
45865: LD_ADDR_VAR 0 2
45869: PUSH
45870: DOUBLE
45871: LD_INT 1
45873: DEC
45874: ST_TO_ADDR
45875: LD_EXP 44
45879: PUSH
45880: FOR_TO
45881: IFFALSE 46379
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 700 ] ] ] ] ) ;
45883: LD_ADDR_VAR 0 5
45887: PUSH
45888: LD_EXP 44
45892: PUSH
45893: LD_VAR 0 2
45897: ARRAY
45898: PPUSH
45899: LD_INT 21
45901: PUSH
45902: LD_INT 1
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 54
45917: PUSH
45918: EMPTY
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: PUSH
45928: LD_INT 24
45930: PUSH
45931: LD_INT 700
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PPUSH
45951: CALL_OW 72
45955: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
45956: LD_ADDR_VAR 0 6
45960: PUSH
45961: LD_EXP 44
45965: PUSH
45966: LD_VAR 0 2
45970: ARRAY
45971: PPUSH
45972: LD_INT 21
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: LD_INT 54
45990: PUSH
45991: EMPTY
45992: LIST
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: LD_INT 24
46003: PUSH
46004: LD_INT 250
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PPUSH
46024: CALL_OW 72
46028: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
46029: LD_ADDR_VAR 0 7
46033: PUSH
46034: LD_VAR 0 5
46038: PUSH
46039: LD_VAR 0 6
46043: DIFF
46044: ST_TO_ADDR
// if not need_heal_1 then
46045: LD_VAR 0 6
46049: NOT
46050: IFFALSE 46083
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , [ ] ) else
46052: LD_ADDR_EXP 47
46056: PUSH
46057: LD_EXP 47
46061: PPUSH
46062: LD_VAR 0 2
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PPUSH
46074: EMPTY
46075: PPUSH
46076: CALL 3211 0 3
46080: ST_TO_ADDR
46081: GO 46115
// mc_need_heal := Add ( mc_need_heal , [ i , 1 ] , need_heal_1 ) ;
46083: LD_ADDR_EXP 47
46087: PUSH
46088: LD_EXP 47
46092: PPUSH
46093: LD_VAR 0 2
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PPUSH
46105: LD_VAR 0 6
46109: PPUSH
46110: CALL 3211 0 3
46114: ST_TO_ADDR
// if not need_heal_2 then
46115: LD_VAR 0 7
46119: NOT
46120: IFFALSE 46153
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , [ ] ) else
46122: LD_ADDR_EXP 47
46126: PUSH
46127: LD_EXP 47
46131: PPUSH
46132: LD_VAR 0 2
46136: PUSH
46137: LD_INT 2
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PPUSH
46144: EMPTY
46145: PPUSH
46146: CALL 3211 0 3
46150: ST_TO_ADDR
46151: GO 46185
// mc_need_heal := Add ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
46153: LD_ADDR_EXP 47
46157: PUSH
46158: LD_EXP 47
46162: PPUSH
46163: LD_VAR 0 2
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PPUSH
46175: LD_VAR 0 7
46179: PPUSH
46180: CALL 3211 0 3
46184: ST_TO_ADDR
// if need_heal_2 then
46185: LD_VAR 0 7
46189: IFFALSE 46361
// for j in need_heal_2 do
46191: LD_ADDR_VAR 0 3
46195: PUSH
46196: LD_VAR 0 7
46200: PUSH
46201: FOR_IN
46202: IFFALSE 46359
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
46204: LD_ADDR_VAR 0 5
46208: PUSH
46209: LD_EXP 44
46213: PUSH
46214: LD_VAR 0 2
46218: ARRAY
46219: PPUSH
46220: LD_INT 2
46222: PUSH
46223: LD_INT 30
46225: PUSH
46226: LD_INT 6
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 30
46235: PUSH
46236: LD_INT 7
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 30
46245: PUSH
46246: LD_INT 8
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 30
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 30
46265: PUSH
46266: LD_INT 1
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 25
46275: PUSH
46276: LD_INT 4
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: PPUSH
46292: CALL_OW 72
46296: ST_TO_ADDR
// if tmp then
46297: LD_VAR 0 5
46301: IFFALSE 46357
// begin k := NearestUnitToUnit ( tmp , j ) ;
46303: LD_ADDR_VAR 0 4
46307: PUSH
46308: LD_VAR 0 5
46312: PPUSH
46313: LD_VAR 0 3
46317: PPUSH
46318: CALL_OW 74
46322: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
46323: LD_VAR 0 3
46327: PPUSH
46328: LD_VAR 0 4
46332: PPUSH
46333: CALL_OW 296
46337: PUSH
46338: LD_INT 7
46340: GREATER
46341: IFFALSE 46357
// ComMoveUnit ( j , k ) ;
46343: LD_VAR 0 3
46347: PPUSH
46348: LD_VAR 0 4
46352: PPUSH
46353: CALL_OW 112
// end ; end ;
46357: GO 46201
46359: POP
46360: POP
// if not need_heal_1 and not need_heal_2 then
46361: LD_VAR 0 6
46365: NOT
46366: PUSH
46367: LD_VAR 0 7
46371: NOT
46372: AND
46373: IFFALSE 46377
// continue ;
46375: GO 45880
// end ;
46377: GO 45880
46379: POP
46380: POP
// RaiseSailEvent ( 102 ) ;
46381: LD_INT 102
46383: PPUSH
46384: CALL_OW 427
// end ;
46388: LD_VAR 0 1
46392: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
46393: LD_INT 0
46395: PPUSH
46396: PPUSH
46397: PPUSH
46398: PPUSH
46399: PPUSH
// if not mc_bases then
46400: LD_EXP 44
46404: NOT
46405: IFFALSE 46409
// exit ;
46407: GO 46782
// for i = 1 to mc_bases do
46409: LD_ADDR_VAR 0 2
46413: PUSH
46414: DOUBLE
46415: LD_INT 1
46417: DEC
46418: ST_TO_ADDR
46419: LD_EXP 44
46423: PUSH
46424: FOR_TO
46425: IFFALSE 46780
// begin if not mc_building_need_repair [ i ] then
46427: LD_EXP 45
46431: PUSH
46432: LD_VAR 0 2
46436: ARRAY
46437: NOT
46438: IFFALSE 46476
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
46440: LD_ADDR_EXP 46
46444: PUSH
46445: LD_EXP 46
46449: PPUSH
46450: LD_VAR 0 2
46454: PPUSH
46455: EMPTY
46456: PPUSH
46457: CALL_OW 1
46461: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
46462: LD_VAR 0 2
46466: PPUSH
46467: LD_INT 101
46469: PPUSH
46470: CALL 45546 0 2
// continue ;
46474: GO 46424
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
46476: LD_ADDR_EXP 50
46480: PUSH
46481: LD_EXP 50
46485: PPUSH
46486: LD_VAR 0 2
46490: PPUSH
46491: EMPTY
46492: PPUSH
46493: CALL_OW 1
46497: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
46498: LD_VAR 0 2
46502: PPUSH
46503: LD_INT 103
46505: PPUSH
46506: CALL 45546 0 2
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
46510: LD_ADDR_VAR 0 5
46514: PUSH
46515: LD_EXP 44
46519: PUSH
46520: LD_VAR 0 2
46524: ARRAY
46525: PPUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 25
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 25
46541: PUSH
46542: LD_INT 16
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: PUSH
46554: EMPTY
46555: LIST
46556: PPUSH
46557: CALL_OW 72
46561: ST_TO_ADDR
// if not tmp then
46562: LD_VAR 0 5
46566: NOT
46567: IFFALSE 46571
// continue ;
46569: GO 46424
// for j in tmp do
46571: LD_ADDR_VAR 0 3
46575: PUSH
46576: LD_VAR 0 5
46580: PUSH
46581: FOR_IN
46582: IFFALSE 46776
// begin if mc_need_heal [ i ] then
46584: LD_EXP 47
46588: PUSH
46589: LD_VAR 0 2
46593: ARRAY
46594: IFFALSE 46642
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
46596: LD_VAR 0 3
46600: PUSH
46601: LD_EXP 47
46605: PUSH
46606: LD_VAR 0 2
46610: ARRAY
46611: PUSH
46612: LD_INT 1
46614: ARRAY
46615: IN
46616: PUSH
46617: LD_VAR 0 3
46621: PUSH
46622: LD_EXP 47
46626: PUSH
46627: LD_VAR 0 2
46631: ARRAY
46632: PUSH
46633: LD_INT 2
46635: ARRAY
46636: IN
46637: OR
46638: IFFALSE 46642
// continue ;
46640: GO 46581
// if IsInUnit ( j ) then
46642: LD_VAR 0 3
46646: PPUSH
46647: CALL_OW 310
46651: IFFALSE 46662
// ComExitBuilding ( j ) ;
46653: LD_VAR 0 3
46657: PPUSH
46658: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
46662: LD_VAR 0 3
46666: PUSH
46667: LD_EXP 46
46671: PUSH
46672: LD_VAR 0 2
46676: ARRAY
46677: IN
46678: NOT
46679: IFFALSE 46737
// begin SetTag ( j , 101 ) ;
46681: LD_VAR 0 3
46685: PPUSH
46686: LD_INT 101
46688: PPUSH
46689: CALL_OW 109
// mc_building_repairs := Add ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
46693: LD_ADDR_EXP 46
46697: PUSH
46698: LD_EXP 46
46702: PPUSH
46703: LD_VAR 0 2
46707: PUSH
46708: LD_EXP 46
46712: PUSH
46713: LD_VAR 0 2
46717: ARRAY
46718: PUSH
46719: LD_INT 1
46721: PLUS
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PPUSH
46727: LD_VAR 0 3
46731: PPUSH
46732: CALL 3211 0 3
46736: ST_TO_ADDR
// end ; Wait ( 3 ) ;
46737: LD_INT 3
46739: PPUSH
46740: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
46744: LD_VAR 0 3
46748: PPUSH
46749: LD_EXP 45
46753: PUSH
46754: LD_VAR 0 2
46758: ARRAY
46759: PPUSH
46760: LD_VAR 0 3
46764: PPUSH
46765: CALL_OW 74
46769: PPUSH
46770: CALL_OW 130
// end ;
46774: GO 46581
46776: POP
46777: POP
// end ;
46778: GO 46424
46780: POP
46781: POP
// end ;
46782: LD_VAR 0 1
46786: RET
// export function MC_Heal ; var i , j , tmp ; begin
46787: LD_INT 0
46789: PPUSH
46790: PPUSH
46791: PPUSH
46792: PPUSH
// if not mc_bases then
46793: LD_EXP 44
46797: NOT
46798: IFFALSE 46802
// exit ;
46800: GO 47167
// for i = 1 to mc_bases do
46802: LD_ADDR_VAR 0 2
46806: PUSH
46807: DOUBLE
46808: LD_INT 1
46810: DEC
46811: ST_TO_ADDR
46812: LD_EXP 44
46816: PUSH
46817: FOR_TO
46818: IFFALSE 47165
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
46820: LD_EXP 47
46824: PUSH
46825: LD_VAR 0 2
46829: ARRAY
46830: PUSH
46831: LD_INT 1
46833: ARRAY
46834: NOT
46835: PUSH
46836: LD_EXP 47
46840: PUSH
46841: LD_VAR 0 2
46845: ARRAY
46846: PUSH
46847: LD_INT 2
46849: ARRAY
46850: NOT
46851: AND
46852: IFFALSE 46890
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
46854: LD_ADDR_EXP 48
46858: PUSH
46859: LD_EXP 48
46863: PPUSH
46864: LD_VAR 0 2
46868: PPUSH
46869: EMPTY
46870: PPUSH
46871: CALL_OW 1
46875: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
46876: LD_VAR 0 2
46880: PPUSH
46881: LD_INT 102
46883: PPUSH
46884: CALL 45546 0 2
// continue ;
46888: GO 46817
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
46890: LD_ADDR_VAR 0 4
46894: PUSH
46895: LD_EXP 44
46899: PUSH
46900: LD_VAR 0 2
46904: ARRAY
46905: PPUSH
46906: LD_INT 25
46908: PUSH
46909: LD_INT 4
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PPUSH
46916: CALL_OW 72
46920: ST_TO_ADDR
// if not tmp then
46921: LD_VAR 0 4
46925: NOT
46926: IFFALSE 46930
// continue ;
46928: GO 46817
// for j in tmp do
46930: LD_ADDR_VAR 0 3
46934: PUSH
46935: LD_VAR 0 4
46939: PUSH
46940: FOR_IN
46941: IFFALSE 47161
// begin if IsInUnit ( j ) then
46943: LD_VAR 0 3
46947: PPUSH
46948: CALL_OW 310
46952: IFFALSE 46963
// ComExitBuilding ( j ) ;
46954: LD_VAR 0 3
46958: PPUSH
46959: CALL_OW 122
// if not j in mc_healers [ i ] then
46963: LD_VAR 0 3
46967: PUSH
46968: LD_EXP 48
46972: PUSH
46973: LD_VAR 0 2
46977: ARRAY
46978: IN
46979: NOT
46980: IFFALSE 47026
// mc_healers := Add ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
46982: LD_ADDR_EXP 48
46986: PUSH
46987: LD_EXP 48
46991: PPUSH
46992: LD_VAR 0 2
46996: PUSH
46997: LD_EXP 48
47001: PUSH
47002: LD_VAR 0 2
47006: ARRAY
47007: PUSH
47008: LD_INT 1
47010: PLUS
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PPUSH
47016: LD_VAR 0 3
47020: PPUSH
47021: CALL 3211 0 3
47025: ST_TO_ADDR
// if not GetTag ( j ) then
47026: LD_VAR 0 3
47030: PPUSH
47031: CALL_OW 110
47035: NOT
47036: IFFALSE 47050
// SetTag ( j , 102 ) ;
47038: LD_VAR 0 3
47042: PPUSH
47043: LD_INT 102
47045: PPUSH
47046: CALL_OW 109
// Wait ( 3 ) ;
47050: LD_INT 3
47052: PPUSH
47053: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
47057: LD_EXP 47
47061: PUSH
47062: LD_VAR 0 2
47066: ARRAY
47067: PUSH
47068: LD_INT 1
47070: ARRAY
47071: IFFALSE 47103
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
47073: LD_VAR 0 3
47077: PPUSH
47078: LD_EXP 47
47082: PUSH
47083: LD_VAR 0 2
47087: ARRAY
47088: PUSH
47089: LD_INT 1
47091: ARRAY
47092: PUSH
47093: LD_INT 1
47095: ARRAY
47096: PPUSH
47097: CALL_OW 128
47101: GO 47159
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
47103: LD_VAR 0 3
47107: PPUSH
47108: CALL_OW 314
47112: NOT
47113: PUSH
47114: LD_EXP 47
47118: PUSH
47119: LD_VAR 0 2
47123: ARRAY
47124: PUSH
47125: LD_INT 2
47127: ARRAY
47128: AND
47129: IFFALSE 47159
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
47131: LD_VAR 0 3
47135: PPUSH
47136: LD_EXP 47
47140: PUSH
47141: LD_VAR 0 2
47145: ARRAY
47146: PUSH
47147: LD_INT 2
47149: ARRAY
47150: PUSH
47151: LD_INT 1
47153: ARRAY
47154: PPUSH
47155: CALL_OW 128
// end ;
47159: GO 46940
47161: POP
47162: POP
// end ;
47163: GO 46817
47165: POP
47166: POP
// end ;
47167: LD_VAR 0 1
47171: RET
// export function MC_Build ( ) ; var i , j , tmp ; begin
47172: LD_INT 0
47174: PPUSH
47175: PPUSH
47176: PPUSH
47177: PPUSH
// if not mc_bases then
47178: LD_EXP 44
47182: NOT
47183: IFFALSE 47187
// exit ;
47185: GO 47935
// for i = 1 to mc_bases do
47187: LD_ADDR_VAR 0 2
47191: PUSH
47192: DOUBLE
47193: LD_INT 1
47195: DEC
47196: ST_TO_ADDR
47197: LD_EXP 44
47201: PUSH
47202: FOR_TO
47203: IFFALSE 47933
// begin if not mc_build_list [ i ] and not mc_construct_list [ i ] then
47205: LD_EXP 49
47209: PUSH
47210: LD_VAR 0 2
47214: ARRAY
47215: NOT
47216: PUSH
47217: LD_EXP 51
47221: PUSH
47222: LD_VAR 0 2
47226: ARRAY
47227: NOT
47228: AND
47229: IFFALSE 47267
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
47231: LD_ADDR_EXP 50
47235: PUSH
47236: LD_EXP 50
47240: PPUSH
47241: LD_VAR 0 2
47245: PPUSH
47246: EMPTY
47247: PPUSH
47248: CALL_OW 1
47252: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
47253: LD_VAR 0 2
47257: PPUSH
47258: LD_INT 103
47260: PPUSH
47261: CALL 45546 0 2
// continue ;
47265: GO 47202
// end ; if mc_construct_list [ i ] then
47267: LD_EXP 51
47271: PUSH
47272: LD_VAR 0 2
47276: ARRAY
47277: IFFALSE 47482
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47279: LD_ADDR_VAR 0 4
47283: PUSH
47284: LD_EXP 44
47288: PUSH
47289: LD_VAR 0 2
47293: ARRAY
47294: PPUSH
47295: LD_INT 25
47297: PUSH
47298: LD_INT 2
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PPUSH
47305: CALL_OW 72
47309: PUSH
47310: LD_EXP 46
47314: PUSH
47315: LD_VAR 0 2
47319: ARRAY
47320: DIFF
47321: ST_TO_ADDR
// if not tmp then
47322: LD_VAR 0 4
47326: NOT
47327: IFFALSE 47331
// continue ;
47329: GO 47202
// for j in tmp do
47331: LD_ADDR_VAR 0 3
47335: PUSH
47336: LD_VAR 0 4
47340: PUSH
47341: FOR_IN
47342: IFFALSE 47478
// begin if not mc_builders [ i ] then
47344: LD_EXP 50
47348: PUSH
47349: LD_VAR 0 2
47353: ARRAY
47354: NOT
47355: IFFALSE 47413
// begin SetTag ( j , 103 ) ;
47357: LD_VAR 0 3
47361: PPUSH
47362: LD_INT 103
47364: PPUSH
47365: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47369: LD_ADDR_EXP 50
47373: PUSH
47374: LD_EXP 50
47378: PPUSH
47379: LD_VAR 0 2
47383: PUSH
47384: LD_EXP 50
47388: PUSH
47389: LD_VAR 0 2
47393: ARRAY
47394: PUSH
47395: LD_INT 1
47397: PLUS
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PPUSH
47403: LD_VAR 0 3
47407: PPUSH
47408: CALL 3211 0 3
47412: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47413: LD_VAR 0 3
47417: PPUSH
47418: CALL_OW 310
47422: IFFALSE 47433
// ComExitBuilding ( j ) ;
47424: LD_VAR 0 3
47428: PPUSH
47429: CALL_OW 122
// wait ( 3 ) ;
47433: LD_INT 3
47435: PPUSH
47436: CALL_OW 67
// if not HasTask ( j ) then
47440: LD_VAR 0 3
47444: PPUSH
47445: CALL_OW 314
47449: NOT
47450: IFFALSE 47476
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
47452: LD_VAR 0 3
47456: PPUSH
47457: LD_EXP 51
47461: PUSH
47462: LD_VAR 0 2
47466: ARRAY
47467: PUSH
47468: LD_INT 1
47470: ARRAY
47471: PPUSH
47472: CALL 5611 0 2
// end ;
47476: GO 47341
47478: POP
47479: POP
// end else
47480: GO 47931
// if mc_build_list [ i ] and UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
47482: LD_EXP 49
47486: PUSH
47487: LD_VAR 0 2
47491: ARRAY
47492: PUSH
47493: LD_EXP 44
47497: PUSH
47498: LD_VAR 0 2
47502: ARRAY
47503: PPUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 30
47509: PUSH
47510: LD_INT 0
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 30
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: PPUSH
47532: CALL_OW 72
47536: AND
47537: IFFALSE 47931
// if CanBeBuilded ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
47539: LD_EXP 44
47543: PUSH
47544: LD_VAR 0 2
47548: ARRAY
47549: PPUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 30
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 30
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: PPUSH
47578: CALL_OW 72
47582: PUSH
47583: LD_INT 1
47585: ARRAY
47586: PPUSH
47587: LD_EXP 49
47591: PUSH
47592: LD_VAR 0 2
47596: ARRAY
47597: PUSH
47598: LD_INT 1
47600: ARRAY
47601: PUSH
47602: LD_INT 1
47604: ARRAY
47605: PPUSH
47606: LD_EXP 49
47610: PUSH
47611: LD_VAR 0 2
47615: ARRAY
47616: PUSH
47617: LD_INT 1
47619: ARRAY
47620: PUSH
47621: LD_INT 2
47623: ARRAY
47624: PPUSH
47625: LD_EXP 49
47629: PUSH
47630: LD_VAR 0 2
47634: ARRAY
47635: PUSH
47636: LD_INT 1
47638: ARRAY
47639: PUSH
47640: LD_INT 3
47642: ARRAY
47643: PPUSH
47644: LD_EXP 49
47648: PUSH
47649: LD_VAR 0 2
47653: ARRAY
47654: PUSH
47655: LD_INT 1
47657: ARRAY
47658: PUSH
47659: LD_INT 4
47661: ARRAY
47662: PPUSH
47663: CALL 8435 0 5
47667: IFFALSE 47931
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
47669: LD_ADDR_VAR 0 4
47673: PUSH
47674: LD_EXP 44
47678: PUSH
47679: LD_VAR 0 2
47683: ARRAY
47684: PPUSH
47685: LD_INT 25
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PPUSH
47695: CALL_OW 72
47699: PUSH
47700: LD_EXP 46
47704: PUSH
47705: LD_VAR 0 2
47709: ARRAY
47710: DIFF
47711: ST_TO_ADDR
// if not tmp then
47712: LD_VAR 0 4
47716: NOT
47717: IFFALSE 47721
// continue ;
47719: GO 47202
// for j in tmp do
47721: LD_ADDR_VAR 0 3
47725: PUSH
47726: LD_VAR 0 4
47730: PUSH
47731: FOR_IN
47732: IFFALSE 47929
// begin if not mc_builders [ i ] then
47734: LD_EXP 50
47738: PUSH
47739: LD_VAR 0 2
47743: ARRAY
47744: NOT
47745: IFFALSE 47803
// begin SetTag ( j , 103 ) ;
47747: LD_VAR 0 3
47751: PPUSH
47752: LD_INT 103
47754: PPUSH
47755: CALL_OW 109
// mc_builders := Add ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
47759: LD_ADDR_EXP 50
47763: PUSH
47764: LD_EXP 50
47768: PPUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_EXP 50
47778: PUSH
47779: LD_VAR 0 2
47783: ARRAY
47784: PUSH
47785: LD_INT 1
47787: PLUS
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PPUSH
47793: LD_VAR 0 3
47797: PPUSH
47798: CALL 3211 0 3
47802: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
47803: LD_VAR 0 3
47807: PPUSH
47808: CALL_OW 310
47812: IFFALSE 47823
// ComExitBuilding ( j ) ;
47814: LD_VAR 0 3
47818: PPUSH
47819: CALL_OW 122
// wait ( 3 ) ;
47823: LD_INT 3
47825: PPUSH
47826: CALL_OW 67
// if not HasTask ( j ) then
47830: LD_VAR 0 3
47834: PPUSH
47835: CALL_OW 314
47839: NOT
47840: IFFALSE 47927
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
47842: LD_VAR 0 3
47846: PPUSH
47847: LD_EXP 49
47851: PUSH
47852: LD_VAR 0 2
47856: ARRAY
47857: PUSH
47858: LD_INT 1
47860: ARRAY
47861: PUSH
47862: LD_INT 1
47864: ARRAY
47865: PPUSH
47866: LD_EXP 49
47870: PUSH
47871: LD_VAR 0 2
47875: ARRAY
47876: PUSH
47877: LD_INT 1
47879: ARRAY
47880: PUSH
47881: LD_INT 2
47883: ARRAY
47884: PPUSH
47885: LD_EXP 49
47889: PUSH
47890: LD_VAR 0 2
47894: ARRAY
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: PUSH
47900: LD_INT 3
47902: ARRAY
47903: PPUSH
47904: LD_EXP 49
47908: PUSH
47909: LD_VAR 0 2
47913: ARRAY
47914: PUSH
47915: LD_INT 1
47917: ARRAY
47918: PUSH
47919: LD_INT 4
47921: ARRAY
47922: PPUSH
47923: CALL_OW 145
// end ;
47927: GO 47731
47929: POP
47930: POP
// end ; end ;
47931: GO 47202
47933: POP
47934: POP
// end ;
47935: LD_VAR 0 1
47939: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , t , busy , weapon ; begin
47940: LD_INT 0
47942: PPUSH
47943: PPUSH
47944: PPUSH
47945: PPUSH
47946: PPUSH
47947: PPUSH
47948: PPUSH
// if not mc_bases then
47949: LD_EXP 44
47953: NOT
47954: IFFALSE 47958
// exit ;
47956: GO 48254
// for i = 1 to mc_bases do
47958: LD_ADDR_VAR 0 2
47962: PUSH
47963: DOUBLE
47964: LD_INT 1
47966: DEC
47967: ST_TO_ADDR
47968: LD_EXP 44
47972: PUSH
47973: FOR_TO
47974: IFFALSE 48252
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
47976: LD_EXP 52
47980: PUSH
47981: LD_VAR 0 2
47985: ARRAY
47986: NOT
47987: PUSH
47988: LD_EXP 44
47992: PUSH
47993: LD_VAR 0 2
47997: ARRAY
47998: PPUSH
47999: LD_INT 30
48001: PUSH
48002: LD_INT 3
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PPUSH
48009: CALL_OW 72
48013: NOT
48014: OR
48015: IFFALSE 48019
// continue ;
48017: GO 47973
// if GetBWeapon ( mc_turret_list [ i ] [ 1 ] ) then
48019: LD_EXP 52
48023: PUSH
48024: LD_VAR 0 2
48028: ARRAY
48029: PUSH
48030: LD_INT 1
48032: ARRAY
48033: PPUSH
48034: CALL_OW 269
48038: IFFALSE 48104
// begin tmp := Delete ( mc_turret_list [ i ] , 1 ) ;
48040: LD_ADDR_VAR 0 4
48044: PUSH
48045: LD_EXP 52
48049: PUSH
48050: LD_VAR 0 2
48054: ARRAY
48055: PPUSH
48056: LD_INT 1
48058: PPUSH
48059: CALL_OW 3
48063: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , tmp ) ;
48064: LD_ADDR_EXP 52
48068: PUSH
48069: LD_EXP 52
48073: PPUSH
48074: LD_VAR 0 2
48078: PPUSH
48079: LD_VAR 0 4
48083: PPUSH
48084: CALL_OW 1
48088: ST_TO_ADDR
// if not mc_turret_list [ i ] then
48089: LD_EXP 52
48093: PUSH
48094: LD_VAR 0 2
48098: ARRAY
48099: NOT
48100: IFFALSE 48104
// continue ;
48102: GO 47973
// end ; busy := false ;
48104: LD_ADDR_VAR 0 6
48108: PUSH
48109: LD_INT 0
48111: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
48112: LD_ADDR_VAR 0 4
48116: PUSH
48117: LD_EXP 44
48121: PUSH
48122: LD_VAR 0 2
48126: ARRAY
48127: PPUSH
48128: LD_INT 30
48130: PUSH
48131: LD_INT 3
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PPUSH
48138: CALL_OW 72
48142: ST_TO_ADDR
// for j in tmp do
48143: LD_ADDR_VAR 0 3
48147: PUSH
48148: LD_VAR 0 4
48152: PUSH
48153: FOR_IN
48154: IFFALSE 48182
// if not BuildingStatus ( j ) = bs_idle then
48156: LD_VAR 0 3
48160: PPUSH
48161: CALL_OW 461
48165: PUSH
48166: LD_INT 2
48168: EQUAL
48169: NOT
48170: IFFALSE 48180
// busy := true ;
48172: LD_ADDR_VAR 0 6
48176: PUSH
48177: LD_INT 1
48179: ST_TO_ADDR
48180: GO 48153
48182: POP
48183: POP
// if busy then
48184: LD_VAR 0 6
48188: IFFALSE 48192
// continue ;
48190: GO 47973
// weapon := GetTurretWeapon ( mc_turret_list [ i ] [ 1 ] ) ;
48192: LD_ADDR_VAR 0 7
48196: PUSH
48197: LD_EXP 52
48201: PUSH
48202: LD_VAR 0 2
48206: ARRAY
48207: PUSH
48208: LD_INT 1
48210: ARRAY
48211: PPUSH
48212: CALL 7170 0 1
48216: ST_TO_ADDR
// if not weapon then
48217: LD_VAR 0 7
48221: NOT
48222: IFFALSE 48226
// continue ;
48224: GO 47973
// ComPlaceWeapon ( mc_turret_list [ i ] [ 1 ] , weapon ) ;
48226: LD_EXP 52
48230: PUSH
48231: LD_VAR 0 2
48235: ARRAY
48236: PUSH
48237: LD_INT 1
48239: ARRAY
48240: PPUSH
48241: LD_VAR 0 7
48245: PPUSH
48246: CALL_OW 148
// end ;
48250: GO 47973
48252: POP
48253: POP
// end ;
48254: LD_VAR 0 1
48258: RET
// export function MC_TurretCrew ( ) ; var i , j , t , tmp , tmp2 , x ; begin
48259: LD_INT 0
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
// if not mc_bases then
48268: LD_EXP 44
48272: NOT
48273: IFFALSE 48277
// exit ;
48275: GO 49068
// for i = 1 to mc_bases do
48277: LD_ADDR_VAR 0 2
48281: PUSH
48282: DOUBLE
48283: LD_INT 1
48285: DEC
48286: ST_TO_ADDR
48287: LD_EXP 44
48291: PUSH
48292: FOR_TO
48293: IFFALSE 49066
// begin x := UnitFilter ( mc_bases [ i ] , [ [ f_lives , 375 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
48295: LD_ADDR_VAR 0 7
48299: PUSH
48300: LD_EXP 44
48304: PUSH
48305: LD_VAR 0 2
48309: ARRAY
48310: PPUSH
48311: LD_INT 24
48313: PUSH
48314: LD_INT 375
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 30
48326: PUSH
48327: LD_INT 32
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 30
48336: PUSH
48337: LD_INT 31
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 58
48351: PUSH
48352: EMPTY
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: PPUSH
48360: CALL_OW 72
48364: ST_TO_ADDR
// if not x then
48365: LD_VAR 0 7
48369: NOT
48370: IFFALSE 48374
// continue ;
48372: GO 48292
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 1 ] , x ) ;
48374: LD_ADDR_EXP 53
48378: PUSH
48379: LD_EXP 53
48383: PPUSH
48384: LD_VAR 0 2
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PPUSH
48396: LD_VAR 0 7
48400: PPUSH
48401: CALL 3211 0 3
48405: ST_TO_ADDR
// if not mc_empty_turret_list [ i ] or not mc_empty_turret_list [ i ] [ 1 ] or not mc_empty_turret_list [ i ] [ 1 ] [ 1 ] then
48406: LD_EXP 53
48410: PUSH
48411: LD_VAR 0 2
48415: ARRAY
48416: NOT
48417: PUSH
48418: LD_EXP 53
48422: PUSH
48423: LD_VAR 0 2
48427: ARRAY
48428: PUSH
48429: LD_INT 1
48431: ARRAY
48432: NOT
48433: OR
48434: PUSH
48435: LD_EXP 53
48439: PUSH
48440: LD_VAR 0 2
48444: ARRAY
48445: PUSH
48446: LD_INT 1
48448: ARRAY
48449: PUSH
48450: LD_INT 1
48452: ARRAY
48453: NOT
48454: OR
48455: IFFALSE 48459
// continue ;
48457: GO 48292
// if UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) = 0 then
48459: LD_EXP 53
48463: PUSH
48464: LD_VAR 0 2
48468: ARRAY
48469: PUSH
48470: LD_INT 1
48472: ARRAY
48473: PUSH
48474: LD_INT 1
48476: ARRAY
48477: PPUSH
48478: CALL_OW 313
48482: PUSH
48483: LD_INT 0
48485: EQUAL
48486: IFFALSE 49064
// if not mc_empty_turret_list [ i ] [ 2 ] then
48488: LD_EXP 53
48492: PUSH
48493: LD_VAR 0 2
48497: ARRAY
48498: PUSH
48499: LD_INT 2
48501: ARRAY
48502: NOT
48503: IFFALSE 48762
// begin tmp2 := UnitFilter ( ( mc_bases [ i ] diff mc_attack [ i ] ) , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
48505: LD_ADDR_VAR 0 6
48509: PUSH
48510: LD_EXP 44
48514: PUSH
48515: LD_VAR 0 2
48519: ARRAY
48520: PUSH
48521: LD_EXP 60
48525: PUSH
48526: LD_VAR 0 2
48530: ARRAY
48531: DIFF
48532: PPUSH
48533: LD_INT 25
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 54
48548: PUSH
48549: EMPTY
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PPUSH
48560: CALL_OW 72
48564: ST_TO_ADDR
// if tmp2 then
48565: LD_VAR 0 6
48569: IFFALSE 48611
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , tmp2 [ 1 ] ) ;
48571: LD_ADDR_EXP 53
48575: PUSH
48576: LD_EXP 53
48580: PPUSH
48581: LD_VAR 0 2
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PPUSH
48593: LD_VAR 0 6
48597: PUSH
48598: LD_INT 1
48600: ARRAY
48601: PPUSH
48602: CALL 3211 0 3
48606: ST_TO_ADDR
// break ;
48607: GO 49066
// end else
48609: GO 48760
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
48611: LD_ADDR_VAR 0 5
48615: PUSH
48616: LD_EXP 44
48620: PUSH
48621: LD_VAR 0 2
48625: ARRAY
48626: PPUSH
48627: LD_INT 2
48629: PUSH
48630: LD_INT 30
48632: PUSH
48633: LD_INT 4
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 30
48642: PUSH
48643: LD_INT 5
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: PPUSH
48655: CALL_OW 72
48659: ST_TO_ADDR
// if not tmp then
48660: LD_VAR 0 5
48664: NOT
48665: IFFALSE 48669
// continue ;
48667: GO 48292
// for j in tmp do
48669: LD_ADDR_VAR 0 3
48673: PUSH
48674: LD_VAR 0 5
48678: PUSH
48679: FOR_IN
48680: IFFALSE 48758
// begin t := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
48682: LD_ADDR_VAR 0 4
48686: PUSH
48687: LD_VAR 0 3
48691: PPUSH
48692: CALL_OW 313
48696: PPUSH
48697: LD_INT 25
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 72
48711: ST_TO_ADDR
// if t then
48712: LD_VAR 0 4
48716: IFFALSE 48756
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , t [ 1 ] ) ;
48718: LD_ADDR_EXP 53
48722: PUSH
48723: LD_EXP 53
48727: PPUSH
48728: LD_VAR 0 2
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PPUSH
48740: LD_VAR 0 4
48744: PUSH
48745: LD_INT 1
48747: ARRAY
48748: PPUSH
48749: CALL 3211 0 3
48753: ST_TO_ADDR
// break ;
48754: GO 48758
// end ; end ;
48756: GO 48679
48758: POP
48759: POP
// end ; end else
48760: GO 49064
// begin if IsDead ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
48762: LD_EXP 53
48766: PUSH
48767: LD_VAR 0 2
48771: ARRAY
48772: PUSH
48773: LD_INT 2
48775: ARRAY
48776: PUSH
48777: LD_INT 1
48779: ARRAY
48780: PPUSH
48781: CALL_OW 301
48785: IFFALSE 48818
// begin mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
48787: LD_ADDR_EXP 53
48791: PUSH
48792: LD_EXP 53
48796: PPUSH
48797: LD_VAR 0 2
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PPUSH
48809: EMPTY
48810: PPUSH
48811: CALL 3211 0 3
48815: ST_TO_ADDR
// break ;
48816: GO 49066
// end ; if not HasTask ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) and not mc_empty_turret_list [ i ] [ 2 ] [ 1 ] in UnitsInside ( mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) then
48818: LD_EXP 53
48822: PUSH
48823: LD_VAR 0 2
48827: ARRAY
48828: PUSH
48829: LD_INT 2
48831: ARRAY
48832: PUSH
48833: LD_INT 1
48835: ARRAY
48836: PPUSH
48837: CALL_OW 314
48841: NOT
48842: PUSH
48843: LD_EXP 53
48847: PUSH
48848: LD_VAR 0 2
48852: ARRAY
48853: PUSH
48854: LD_INT 2
48856: ARRAY
48857: PUSH
48858: LD_INT 1
48860: ARRAY
48861: PUSH
48862: LD_EXP 53
48866: PUSH
48867: LD_VAR 0 2
48871: ARRAY
48872: PUSH
48873: LD_INT 1
48875: ARRAY
48876: PUSH
48877: LD_INT 1
48879: ARRAY
48880: PPUSH
48881: CALL_OW 313
48885: IN
48886: NOT
48887: AND
48888: IFFALSE 49064
// begin if IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) then
48890: LD_EXP 53
48894: PUSH
48895: LD_VAR 0 2
48899: ARRAY
48900: PUSH
48901: LD_INT 2
48903: ARRAY
48904: PUSH
48905: LD_INT 1
48907: ARRAY
48908: PPUSH
48909: CALL_OW 310
48913: IFFALSE 48938
// ComExitBuilding ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
48915: LD_EXP 53
48919: PUSH
48920: LD_VAR 0 2
48924: ARRAY
48925: PUSH
48926: LD_INT 2
48928: ARRAY
48929: PUSH
48930: LD_INT 1
48932: ARRAY
48933: PPUSH
48934: CALL_OW 122
// AddComEnterUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] , mc_empty_turret_list [ i ] [ 1 ] [ 1 ] ) ;
48938: LD_EXP 53
48942: PUSH
48943: LD_VAR 0 2
48947: ARRAY
48948: PUSH
48949: LD_INT 2
48951: ARRAY
48952: PUSH
48953: LD_INT 1
48955: ARRAY
48956: PPUSH
48957: LD_EXP 53
48961: PUSH
48962: LD_VAR 0 2
48966: ARRAY
48967: PUSH
48968: LD_INT 1
48970: ARRAY
48971: PUSH
48972: LD_INT 1
48974: ARRAY
48975: PPUSH
48976: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
48980: LD_INT 35
48982: PPUSH
48983: CALL_OW 67
// if not mc_empty_turret_list [ i ] [ 2 ] then
48987: LD_EXP 53
48991: PUSH
48992: LD_VAR 0 2
48996: ARRAY
48997: PUSH
48998: LD_INT 2
49000: ARRAY
49001: NOT
49002: IFFALSE 49006
// break ;
49004: GO 49031
// until IsInUnit ( mc_empty_turret_list [ i ] [ 2 ] [ 1 ] ) ;
49006: LD_EXP 53
49010: PUSH
49011: LD_VAR 0 2
49015: ARRAY
49016: PUSH
49017: LD_INT 2
49019: ARRAY
49020: PUSH
49021: LD_INT 1
49023: ARRAY
49024: PPUSH
49025: CALL_OW 310
49029: IFFALSE 48980
// mc_empty_turret_list := Add ( mc_empty_turret_list , [ i , 2 ] , [ ] ) ;
49031: LD_ADDR_EXP 53
49035: PUSH
49036: LD_EXP 53
49040: PPUSH
49041: LD_VAR 0 2
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PPUSH
49053: EMPTY
49054: PPUSH
49055: CALL 3211 0 3
49059: ST_TO_ADDR
// exit ;
49060: POP
49061: POP
49062: GO 49068
// end ; end ; end ;
49064: GO 48292
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 1
49072: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
// if not mc_bases then
49081: LD_EXP 44
49085: NOT
49086: IFFALSE 49090
// exit ;
49088: GO 49998
// for i = 1 to mc_bases do
49090: LD_ADDR_VAR 0 2
49094: PUSH
49095: DOUBLE
49096: LD_INT 1
49098: DEC
49099: ST_TO_ADDR
49100: LD_EXP 44
49104: PUSH
49105: FOR_TO
49106: IFFALSE 49996
// begin if mc_minefields [ i ] and mc_miners [ i ] then
49108: LD_EXP 56
49112: PUSH
49113: LD_VAR 0 2
49117: ARRAY
49118: PUSH
49119: LD_EXP 55
49123: PUSH
49124: LD_VAR 0 2
49128: ARRAY
49129: AND
49130: IFFALSE 49206
// CheckMinesInArea ( mc_minefields [ i ] , [ [ f_enemy , GetSide ( mc_miners [ i ] [ 1 ] ) ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) ;
49132: LD_EXP 56
49136: PUSH
49137: LD_VAR 0 2
49141: ARRAY
49142: PPUSH
49143: LD_INT 81
49145: PUSH
49146: LD_EXP 55
49150: PUSH
49151: LD_VAR 0 2
49155: ARRAY
49156: PUSH
49157: LD_INT 1
49159: ARRAY
49160: PPUSH
49161: CALL_OW 255
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 2
49172: PUSH
49173: LD_INT 21
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 21
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PPUSH
49202: CALL_OW 512
// if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
49206: LD_EXP 54
49210: PUSH
49211: LD_VAR 0 2
49215: ARRAY
49216: NOT
49217: PUSH
49218: LD_EXP 54
49222: PUSH
49223: LD_VAR 0 2
49227: ARRAY
49228: PUSH
49229: LD_EXP 55
49233: PUSH
49234: LD_VAR 0 2
49238: ARRAY
49239: EQUAL
49240: OR
49241: IFFALSE 49245
// continue ;
49243: GO 49105
// if mc_miners [ i ] then
49245: LD_EXP 55
49249: PUSH
49250: LD_VAR 0 2
49254: ARRAY
49255: IFFALSE 49683
// for j = 1 to mc_miners [ i ] do
49257: LD_ADDR_VAR 0 3
49261: PUSH
49262: DOUBLE
49263: LD_INT 1
49265: DEC
49266: ST_TO_ADDR
49267: LD_EXP 55
49271: PUSH
49272: LD_VAR 0 2
49276: ARRAY
49277: PUSH
49278: FOR_TO
49279: IFFALSE 49681
// begin if IsDead ( mc_miners [ i ] [ j ] ) then
49281: LD_EXP 55
49285: PUSH
49286: LD_VAR 0 2
49290: ARRAY
49291: PUSH
49292: LD_VAR 0 3
49296: ARRAY
49297: PPUSH
49298: CALL_OW 301
49302: IFFALSE 49384
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
49304: LD_ADDR_VAR 0 5
49308: PUSH
49309: LD_EXP 55
49313: PUSH
49314: LD_VAR 0 2
49318: ARRAY
49319: PUSH
49320: LD_EXP 55
49324: PUSH
49325: LD_VAR 0 2
49329: ARRAY
49330: PUSH
49331: LD_VAR 0 3
49335: ARRAY
49336: DIFF
49337: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , [ i , mc_miners [ i ] + 1 ] , tmp ) ;
49338: LD_ADDR_EXP 55
49342: PUSH
49343: LD_EXP 55
49347: PPUSH
49348: LD_VAR 0 2
49352: PUSH
49353: LD_EXP 55
49357: PUSH
49358: LD_VAR 0 2
49362: ARRAY
49363: PUSH
49364: LD_INT 1
49366: PLUS
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PPUSH
49372: LD_VAR 0 5
49376: PPUSH
49377: CALL_OW 1
49381: ST_TO_ADDR
// continue ;
49382: GO 49278
// end ; if not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 12 ) [ 4 ] = 0 then
49384: LD_EXP 55
49388: PUSH
49389: LD_VAR 0 2
49393: ARRAY
49394: PUSH
49395: LD_VAR 0 3
49399: ARRAY
49400: PPUSH
49401: CALL_OW 459
49405: NOT
49406: PUSH
49407: LD_EXP 55
49411: PUSH
49412: LD_VAR 0 2
49416: ARRAY
49417: PUSH
49418: LD_VAR 0 3
49422: ARRAY
49423: PPUSH
49424: CALL_OW 255
49428: PPUSH
49429: LD_EXP 54
49433: PUSH
49434: LD_VAR 0 2
49438: ARRAY
49439: PUSH
49440: LD_VAR 0 3
49444: ARRAY
49445: PUSH
49446: LD_INT 1
49448: ARRAY
49449: PPUSH
49450: LD_EXP 54
49454: PUSH
49455: LD_VAR 0 2
49459: ARRAY
49460: PUSH
49461: LD_VAR 0 3
49465: ARRAY
49466: PUSH
49467: LD_INT 2
49469: ARRAY
49470: PPUSH
49471: LD_INT 12
49473: PPUSH
49474: CALL 3705 0 4
49478: PUSH
49479: LD_INT 4
49481: ARRAY
49482: PUSH
49483: LD_INT 0
49485: EQUAL
49486: AND
49487: IFFALSE 49679
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
49489: LD_EXP 55
49493: PUSH
49494: LD_VAR 0 2
49498: ARRAY
49499: PUSH
49500: LD_VAR 0 3
49504: ARRAY
49505: PPUSH
49506: CALL_OW 310
49510: IFFALSE 49533
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
49512: LD_EXP 55
49516: PUSH
49517: LD_VAR 0 2
49521: ARRAY
49522: PUSH
49523: LD_VAR 0 3
49527: ARRAY
49528: PPUSH
49529: CALL_OW 122
// wait ( 3 ) ;
49533: LD_INT 3
49535: PPUSH
49536: CALL_OW 67
// if not MineAtPos ( mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
49540: LD_EXP 54
49544: PUSH
49545: LD_VAR 0 2
49549: ARRAY
49550: PUSH
49551: LD_VAR 0 3
49555: ARRAY
49556: PUSH
49557: LD_INT 1
49559: ARRAY
49560: PPUSH
49561: LD_EXP 54
49565: PUSH
49566: LD_VAR 0 2
49570: ARRAY
49571: PUSH
49572: LD_VAR 0 3
49576: ARRAY
49577: PUSH
49578: LD_INT 2
49580: ARRAY
49581: PPUSH
49582: CALL_OW 458
49586: NOT
49587: PUSH
49588: LD_EXP 55
49592: PUSH
49593: LD_VAR 0 2
49597: ARRAY
49598: PUSH
49599: LD_VAR 0 3
49603: ARRAY
49604: PPUSH
49605: CALL_OW 314
49609: NOT
49610: AND
49611: IFFALSE 49679
// ComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j ] [ 1 ] , mc_mines [ i ] [ j ] [ 2 ] , 0 ) ;
49613: LD_EXP 55
49617: PUSH
49618: LD_VAR 0 2
49622: ARRAY
49623: PUSH
49624: LD_VAR 0 3
49628: ARRAY
49629: PPUSH
49630: LD_EXP 54
49634: PUSH
49635: LD_VAR 0 2
49639: ARRAY
49640: PUSH
49641: LD_VAR 0 3
49645: ARRAY
49646: PUSH
49647: LD_INT 1
49649: ARRAY
49650: PPUSH
49651: LD_EXP 54
49655: PUSH
49656: LD_VAR 0 2
49660: ARRAY
49661: PUSH
49662: LD_VAR 0 3
49666: ARRAY
49667: PUSH
49668: LD_INT 2
49670: ARRAY
49671: PPUSH
49672: LD_INT 0
49674: PPUSH
49675: CALL_OW 133
// end ; end ;
49679: GO 49278
49681: POP
49682: POP
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
49683: LD_ADDR_VAR 0 5
49687: PUSH
49688: LD_EXP 44
49692: PUSH
49693: LD_VAR 0 2
49697: ARRAY
49698: PPUSH
49699: LD_INT 2
49701: PUSH
49702: LD_INT 30
49704: PUSH
49705: LD_INT 4
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 30
49714: PUSH
49715: LD_INT 5
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 30
49724: PUSH
49725: LD_INT 32
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: PPUSH
49738: CALL_OW 72
49742: ST_TO_ADDR
// if not tmp then
49743: LD_VAR 0 5
49747: NOT
49748: IFFALSE 49752
// continue ;
49750: GO 49105
// list := [ ] ;
49752: LD_ADDR_VAR 0 6
49756: PUSH
49757: EMPTY
49758: ST_TO_ADDR
// for j in tmp do
49759: LD_ADDR_VAR 0 3
49763: PUSH
49764: LD_VAR 0 5
49768: PUSH
49769: FOR_IN
49770: IFFALSE 49839
// begin for k in UnitsInside ( j ) do
49772: LD_ADDR_VAR 0 4
49776: PUSH
49777: LD_VAR 0 3
49781: PPUSH
49782: CALL_OW 313
49786: PUSH
49787: FOR_IN
49788: IFFALSE 49835
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
49790: LD_VAR 0 4
49794: PPUSH
49795: CALL_OW 257
49799: PUSH
49800: LD_INT 1
49802: EQUAL
49803: PUSH
49804: LD_VAR 0 4
49808: PPUSH
49809: CALL_OW 459
49813: NOT
49814: AND
49815: IFFALSE 49833
// list := list ^ k ;
49817: LD_ADDR_VAR 0 6
49821: PUSH
49822: LD_VAR 0 6
49826: PUSH
49827: LD_VAR 0 4
49831: ADD
49832: ST_TO_ADDR
49833: GO 49787
49835: POP
49836: POP
// end ;
49837: GO 49769
49839: POP
49840: POP
// list := list diff mc_miners [ i ] ;
49841: LD_ADDR_VAR 0 6
49845: PUSH
49846: LD_VAR 0 6
49850: PUSH
49851: LD_EXP 55
49855: PUSH
49856: LD_VAR 0 2
49860: ARRAY
49861: DIFF
49862: ST_TO_ADDR
// if not list then
49863: LD_VAR 0 6
49867: NOT
49868: IFFALSE 49872
// continue ;
49870: GO 49105
// k := mc_mines [ i ] - mc_miners [ i ] ;
49872: LD_ADDR_VAR 0 4
49876: PUSH
49877: LD_EXP 54
49881: PUSH
49882: LD_VAR 0 2
49886: ARRAY
49887: PUSH
49888: LD_EXP 55
49892: PUSH
49893: LD_VAR 0 2
49897: ARRAY
49898: MINUS
49899: ST_TO_ADDR
// if k > list then
49900: LD_VAR 0 4
49904: PUSH
49905: LD_VAR 0 6
49909: GREATER
49910: IFFALSE 49922
// k := list ;
49912: LD_ADDR_VAR 0 4
49916: PUSH
49917: LD_VAR 0 6
49921: ST_TO_ADDR
// for j = 1 to k do
49922: LD_ADDR_VAR 0 3
49926: PUSH
49927: DOUBLE
49928: LD_INT 1
49930: DEC
49931: ST_TO_ADDR
49932: LD_VAR 0 4
49936: PUSH
49937: FOR_TO
49938: IFFALSE 49992
// mc_miners := Add ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
49940: LD_ADDR_EXP 55
49944: PUSH
49945: LD_EXP 55
49949: PPUSH
49950: LD_VAR 0 2
49954: PUSH
49955: LD_EXP 55
49959: PUSH
49960: LD_VAR 0 2
49964: ARRAY
49965: PUSH
49966: LD_INT 1
49968: PLUS
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PPUSH
49974: LD_VAR 0 6
49978: PUSH
49979: LD_VAR 0 3
49983: ARRAY
49984: PPUSH
49985: CALL 3211 0 3
49989: ST_TO_ADDR
49990: GO 49937
49992: POP
49993: POP
// end ;
49994: GO 49105
49996: POP
49997: POP
// end ;
49998: LD_VAR 0 1
50002: RET
// export function MC_CollectCrates ( ) ; var i , j , tmp , target ; begin
50003: LD_INT 0
50005: PPUSH
50006: PPUSH
50007: PPUSH
50008: PPUSH
50009: PPUSH
// if not mc_bases then
50010: LD_EXP 44
50014: NOT
50015: IFFALSE 50019
// exit ;
50017: GO 50795
// for i = 1 to mc_bases do
50019: LD_ADDR_VAR 0 2
50023: PUSH
50024: DOUBLE
50025: LD_INT 1
50027: DEC
50028: ST_TO_ADDR
50029: LD_EXP 44
50033: PUSH
50034: FOR_TO
50035: IFFALSE 50793
// begin if not mc_bases [ i ] then
50037: LD_EXP 44
50041: PUSH
50042: LD_VAR 0 2
50046: ARRAY
50047: NOT
50048: IFFALSE 50052
// continue ;
50050: GO 50034
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
50052: LD_EXP 57
50056: PUSH
50057: LD_VAR 0 2
50061: ARRAY
50062: NOT
50063: PUSH
50064: LD_EXP 58
50068: PUSH
50069: LD_VAR 0 2
50073: ARRAY
50074: AND
50075: IFFALSE 50113
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50077: LD_ADDR_EXP 58
50081: PUSH
50082: LD_EXP 58
50086: PPUSH
50087: LD_VAR 0 2
50091: PPUSH
50092: EMPTY
50093: PPUSH
50094: CALL_OW 1
50098: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
50099: LD_VAR 0 2
50103: PPUSH
50104: LD_INT 107
50106: PPUSH
50107: CALL 45546 0 2
// continue ;
50111: GO 50034
// end ; target := [ ] ;
50113: LD_ADDR_VAR 0 5
50117: PUSH
50118: EMPTY
50119: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
50120: LD_ADDR_VAR 0 3
50124: PUSH
50125: DOUBLE
50126: LD_EXP 57
50130: PUSH
50131: LD_VAR 0 2
50135: ARRAY
50136: INC
50137: ST_TO_ADDR
50138: LD_INT 1
50140: PUSH
50141: FOR_DOWNTO
50142: IFFALSE 50402
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
50144: LD_EXP 57
50148: PUSH
50149: LD_VAR 0 2
50153: ARRAY
50154: PUSH
50155: LD_VAR 0 3
50159: ARRAY
50160: PUSH
50161: LD_INT 2
50163: ARRAY
50164: PPUSH
50165: LD_EXP 57
50169: PUSH
50170: LD_VAR 0 2
50174: ARRAY
50175: PUSH
50176: LD_VAR 0 3
50180: ARRAY
50181: PUSH
50182: LD_INT 3
50184: ARRAY
50185: PPUSH
50186: CALL_OW 488
50190: PUSH
50191: LD_EXP 57
50195: PUSH
50196: LD_VAR 0 2
50200: ARRAY
50201: PUSH
50202: LD_VAR 0 3
50206: ARRAY
50207: PUSH
50208: LD_INT 2
50210: ARRAY
50211: PPUSH
50212: LD_EXP 57
50216: PUSH
50217: LD_VAR 0 2
50221: ARRAY
50222: PUSH
50223: LD_VAR 0 3
50227: ARRAY
50228: PUSH
50229: LD_INT 3
50231: ARRAY
50232: PPUSH
50233: CALL_OW 284
50237: PUSH
50238: LD_INT 0
50240: EQUAL
50241: AND
50242: IFFALSE 50297
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
50244: LD_ADDR_VAR 0 4
50248: PUSH
50249: LD_EXP 57
50253: PUSH
50254: LD_VAR 0 2
50258: ARRAY
50259: PPUSH
50260: LD_VAR 0 3
50264: PPUSH
50265: CALL_OW 3
50269: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
50270: LD_ADDR_EXP 57
50274: PUSH
50275: LD_EXP 57
50279: PPUSH
50280: LD_VAR 0 2
50284: PPUSH
50285: LD_VAR 0 4
50289: PPUSH
50290: CALL_OW 1
50294: ST_TO_ADDR
// continue ;
50295: GO 50141
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 20 ) [ 4 ] = 0 then
50297: LD_EXP 44
50301: PUSH
50302: LD_VAR 0 2
50306: ARRAY
50307: PUSH
50308: LD_INT 1
50310: ARRAY
50311: PPUSH
50312: CALL_OW 255
50316: PPUSH
50317: LD_EXP 57
50321: PUSH
50322: LD_VAR 0 2
50326: ARRAY
50327: PUSH
50328: LD_VAR 0 3
50332: ARRAY
50333: PUSH
50334: LD_INT 2
50336: ARRAY
50337: PPUSH
50338: LD_EXP 57
50342: PUSH
50343: LD_VAR 0 2
50347: ARRAY
50348: PUSH
50349: LD_VAR 0 3
50353: ARRAY
50354: PUSH
50355: LD_INT 3
50357: ARRAY
50358: PPUSH
50359: LD_INT 20
50361: PPUSH
50362: CALL 3705 0 4
50366: PUSH
50367: LD_INT 4
50369: ARRAY
50370: PUSH
50371: LD_INT 0
50373: EQUAL
50374: IFFALSE 50400
// begin target := mc_crates [ i ] [ j ] ;
50376: LD_ADDR_VAR 0 5
50380: PUSH
50381: LD_EXP 57
50385: PUSH
50386: LD_VAR 0 2
50390: ARRAY
50391: PUSH
50392: LD_VAR 0 3
50396: ARRAY
50397: ST_TO_ADDR
// break ;
50398: GO 50402
// end ; end ;
50400: GO 50141
50402: POP
50403: POP
// if not target then
50404: LD_VAR 0 5
50408: NOT
50409: IFFALSE 50413
// continue ;
50411: GO 50034
// if mc_crates_collector [ i ] < 5 then
50413: LD_EXP 58
50417: PUSH
50418: LD_VAR 0 2
50422: ARRAY
50423: PUSH
50424: LD_INT 5
50426: LESS
50427: IFFALSE 50607
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 750 ] ] ) ;
50429: LD_ADDR_VAR 0 4
50433: PUSH
50434: LD_EXP 44
50438: PUSH
50439: LD_VAR 0 2
50443: ARRAY
50444: PPUSH
50445: LD_INT 2
50447: PUSH
50448: LD_INT 25
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 25
50460: PUSH
50461: LD_INT 16
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 24
50475: PUSH
50476: LD_INT 750
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PPUSH
50487: CALL_OW 72
50491: ST_TO_ADDR
// if not tmp then
50492: LD_VAR 0 4
50496: NOT
50497: IFFALSE 50501
// continue ;
50499: GO 50034
// for j in tmp do
50501: LD_ADDR_VAR 0 3
50505: PUSH
50506: LD_VAR 0 4
50510: PUSH
50511: FOR_IN
50512: IFFALSE 50605
// if GetTag ( j ) = 0 then
50514: LD_VAR 0 3
50518: PPUSH
50519: CALL_OW 110
50523: PUSH
50524: LD_INT 0
50526: EQUAL
50527: IFFALSE 50603
// begin mc_crates_collector := Add ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
50529: LD_ADDR_EXP 58
50533: PUSH
50534: LD_EXP 58
50538: PPUSH
50539: LD_VAR 0 2
50543: PUSH
50544: LD_EXP 58
50548: PUSH
50549: LD_VAR 0 2
50553: ARRAY
50554: PUSH
50555: LD_INT 1
50557: PLUS
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PPUSH
50563: LD_VAR 0 3
50567: PPUSH
50568: CALL 3211 0 3
50572: ST_TO_ADDR
// SetTag ( j , 107 ) ;
50573: LD_VAR 0 3
50577: PPUSH
50578: LD_INT 107
50580: PPUSH
50581: CALL_OW 109
// if mc_crates_collector [ i ] > 5 then
50585: LD_EXP 58
50589: PUSH
50590: LD_VAR 0 2
50594: ARRAY
50595: PUSH
50596: LD_INT 5
50598: GREATER
50599: IFFALSE 50603
// break ;
50601: GO 50605
// end ;
50603: GO 50511
50605: POP
50606: POP
// end ; if mc_crates_collector [ i ] and target then
50607: LD_EXP 58
50611: PUSH
50612: LD_VAR 0 2
50616: ARRAY
50617: PUSH
50618: LD_VAR 0 5
50622: AND
50623: IFFALSE 50791
// begin if mc_crates_collector [ i ] < target [ 1 ] then
50625: LD_EXP 58
50629: PUSH
50630: LD_VAR 0 2
50634: ARRAY
50635: PUSH
50636: LD_VAR 0 5
50640: PUSH
50641: LD_INT 1
50643: ARRAY
50644: LESS
50645: IFFALSE 50665
// tmp := mc_crates_collector [ i ] else
50647: LD_ADDR_VAR 0 4
50651: PUSH
50652: LD_EXP 58
50656: PUSH
50657: LD_VAR 0 2
50661: ARRAY
50662: ST_TO_ADDR
50663: GO 50679
// tmp := target [ 1 ] ;
50665: LD_ADDR_VAR 0 4
50669: PUSH
50670: LD_VAR 0 5
50674: PUSH
50675: LD_INT 1
50677: ARRAY
50678: ST_TO_ADDR
// for j = 1 to tmp do
50679: LD_ADDR_VAR 0 3
50683: PUSH
50684: DOUBLE
50685: LD_INT 1
50687: DEC
50688: ST_TO_ADDR
50689: LD_VAR 0 4
50693: PUSH
50694: FOR_TO
50695: IFFALSE 50789
// begin if IsInUnit ( mc_crates_collector [ i ] [ j ] ) then
50697: LD_EXP 58
50701: PUSH
50702: LD_VAR 0 2
50706: ARRAY
50707: PUSH
50708: LD_VAR 0 3
50712: ARRAY
50713: PPUSH
50714: CALL_OW 310
50718: IFFALSE 50741
// ComExitBuilding ( mc_crates_collector [ i ] [ j ] ) ;
50720: LD_EXP 58
50724: PUSH
50725: LD_VAR 0 2
50729: ARRAY
50730: PUSH
50731: LD_VAR 0 3
50735: ARRAY
50736: PPUSH
50737: CALL_OW 122
// wait ( 3 ) ;
50741: LD_INT 3
50743: PPUSH
50744: CALL_OW 67
// ComCollect ( mc_crates_collector [ i ] [ j ] , target [ 2 ] , target [ 3 ] ) ;
50748: LD_EXP 58
50752: PUSH
50753: LD_VAR 0 2
50757: ARRAY
50758: PUSH
50759: LD_VAR 0 3
50763: ARRAY
50764: PPUSH
50765: LD_VAR 0 5
50769: PUSH
50770: LD_INT 2
50772: ARRAY
50773: PPUSH
50774: LD_VAR 0 5
50778: PUSH
50779: LD_INT 3
50781: ARRAY
50782: PPUSH
50783: CALL_OW 117
// end ;
50787: GO 50694
50789: POP
50790: POP
// end ; end ;
50791: GO 50034
50793: POP
50794: POP
// end ;
50795: LD_VAR 0 1
50799: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
50800: LD_INT 0
50802: PPUSH
50803: PPUSH
50804: PPUSH
50805: PPUSH
// if not mc_bases then
50806: LD_EXP 44
50810: NOT
50811: IFFALSE 50815
// exit ;
50813: GO 50964
// for i = 1 to mc_bases do
50815: LD_ADDR_VAR 0 2
50819: PUSH
50820: DOUBLE
50821: LD_INT 1
50823: DEC
50824: ST_TO_ADDR
50825: LD_EXP 44
50829: PUSH
50830: FOR_TO
50831: IFFALSE 50962
// begin tmp := UnitFilter ( mc_vehicles [ i ] , [ f_control , control_remote ] ) ;
50833: LD_ADDR_VAR 0 4
50837: PUSH
50838: LD_EXP 59
50842: PUSH
50843: LD_VAR 0 2
50847: ARRAY
50848: PPUSH
50849: LD_INT 33
50851: PUSH
50852: LD_INT 2
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PPUSH
50859: CALL_OW 72
50863: ST_TO_ADDR
// if tmp then
50864: LD_VAR 0 4
50868: IFFALSE 50960
// for j in tmp do
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_VAR 0 4
50879: PUSH
50880: FOR_IN
50881: IFFALSE 50958
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
50883: LD_VAR 0 3
50887: PPUSH
50888: CALL_OW 312
50892: NOT
50893: PUSH
50894: LD_VAR 0 3
50898: PPUSH
50899: CALL_OW 256
50903: PUSH
50904: LD_INT 250
50906: GREATEREQUAL
50907: AND
50908: IFFALSE 50921
// Connect ( j ) else
50910: LD_VAR 0 3
50914: PPUSH
50915: CALL 5693 0 1
50919: GO 50956
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
50921: LD_VAR 0 3
50925: PPUSH
50926: CALL_OW 256
50930: PUSH
50931: LD_INT 250
50933: LESS
50934: PUSH
50935: LD_VAR 0 3
50939: PPUSH
50940: CALL_OW 312
50944: AND
50945: IFFALSE 50956
// ComUnlink ( j ) ;
50947: LD_VAR 0 3
50951: PPUSH
50952: CALL_OW 136
50956: GO 50880
50958: POP
50959: POP
// end ;
50960: GO 50830
50962: POP
50963: POP
// end ;
50964: LD_VAR 0 1
50968: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
50969: LD_INT 0
50971: PPUSH
50972: PPUSH
50973: PPUSH
50974: PPUSH
50975: PPUSH
// if not mc_bases then
50976: LD_EXP 44
50980: NOT
50981: IFFALSE 50985
// exit ;
50983: GO 51352
// for i = 1 to mc_bases do
50985: LD_ADDR_VAR 0 2
50989: PUSH
50990: DOUBLE
50991: LD_INT 1
50993: DEC
50994: ST_TO_ADDR
50995: LD_EXP 44
50999: PUSH
51000: FOR_TO
51001: IFFALSE 51350
// begin if not mc_produce [ i ] then
51003: LD_EXP 61
51007: PUSH
51008: LD_VAR 0 2
51012: ARRAY
51013: NOT
51014: IFFALSE 51018
// continue ;
51016: GO 51000
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
51018: LD_ADDR_VAR 0 5
51022: PUSH
51023: LD_EXP 44
51027: PUSH
51028: LD_VAR 0 2
51032: ARRAY
51033: PPUSH
51034: LD_INT 30
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PPUSH
51044: CALL_OW 72
51048: ST_TO_ADDR
// if not fac then
51049: LD_VAR 0 5
51053: NOT
51054: IFFALSE 51058
// continue ;
51056: GO 51000
// for j in fac do
51058: LD_ADDR_VAR 0 3
51062: PUSH
51063: LD_VAR 0 5
51067: PUSH
51068: FOR_IN
51069: IFFALSE 51346
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 20 ) [ 4 ] or UnitsInside ( j ) = 0 then
51071: LD_VAR 0 3
51075: PPUSH
51076: CALL_OW 461
51080: PUSH
51081: LD_INT 2
51083: NONEQUAL
51084: PUSH
51085: LD_VAR 0 3
51089: PPUSH
51090: LD_INT 20
51092: PPUSH
51093: CALL 5384 0 2
51097: PUSH
51098: LD_INT 4
51100: ARRAY
51101: OR
51102: PUSH
51103: LD_VAR 0 3
51107: PPUSH
51108: CALL_OW 313
51112: PUSH
51113: LD_INT 0
51115: EQUAL
51116: OR
51117: IFFALSE 51121
// continue ;
51119: GO 51068
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) then
51121: LD_VAR 0 3
51125: PPUSH
51126: LD_EXP 61
51130: PUSH
51131: LD_VAR 0 2
51135: ARRAY
51136: PUSH
51137: LD_INT 1
51139: ARRAY
51140: PUSH
51141: LD_INT 1
51143: ARRAY
51144: PPUSH
51145: LD_EXP 61
51149: PUSH
51150: LD_VAR 0 2
51154: ARRAY
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PUSH
51160: LD_INT 2
51162: ARRAY
51163: PPUSH
51164: LD_EXP 61
51168: PUSH
51169: LD_VAR 0 2
51173: ARRAY
51174: PUSH
51175: LD_INT 1
51177: ARRAY
51178: PUSH
51179: LD_INT 3
51181: ARRAY
51182: PPUSH
51183: LD_EXP 61
51187: PUSH
51188: LD_VAR 0 2
51192: ARRAY
51193: PUSH
51194: LD_INT 1
51196: ARRAY
51197: PUSH
51198: LD_INT 4
51200: ARRAY
51201: PPUSH
51202: CALL_OW 448
51206: IFFALSE 51344
// begin ComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
51208: LD_VAR 0 3
51212: PPUSH
51213: LD_EXP 61
51217: PUSH
51218: LD_VAR 0 2
51222: ARRAY
51223: PUSH
51224: LD_INT 1
51226: ARRAY
51227: PUSH
51228: LD_INT 1
51230: ARRAY
51231: PPUSH
51232: LD_EXP 61
51236: PUSH
51237: LD_VAR 0 2
51241: ARRAY
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: PUSH
51247: LD_INT 2
51249: ARRAY
51250: PPUSH
51251: LD_EXP 61
51255: PUSH
51256: LD_VAR 0 2
51260: ARRAY
51261: PUSH
51262: LD_INT 1
51264: ARRAY
51265: PUSH
51266: LD_INT 3
51268: ARRAY
51269: PPUSH
51270: LD_EXP 61
51274: PUSH
51275: LD_VAR 0 2
51279: ARRAY
51280: PUSH
51281: LD_INT 1
51283: ARRAY
51284: PUSH
51285: LD_INT 4
51287: ARRAY
51288: PPUSH
51289: CALL_OW 125
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
51293: LD_ADDR_VAR 0 4
51297: PUSH
51298: LD_EXP 61
51302: PUSH
51303: LD_VAR 0 2
51307: ARRAY
51308: PPUSH
51309: LD_INT 1
51311: PPUSH
51312: CALL_OW 3
51316: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
51317: LD_ADDR_EXP 61
51321: PUSH
51322: LD_EXP 61
51326: PPUSH
51327: LD_VAR 0 2
51331: PPUSH
51332: LD_VAR 0 4
51336: PPUSH
51337: CALL_OW 1
51341: ST_TO_ADDR
// break ;
51342: GO 51346
// end ; end ;
51344: GO 51068
51346: POP
51347: POP
// end ;
51348: GO 51000
51350: POP
51351: POP
// end ;
51352: LD_VAR 0 1
51356: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
51357: LD_INT 0
51359: PPUSH
51360: PPUSH
51361: PPUSH
// if not mc_bases then
51362: LD_EXP 44
51366: NOT
51367: IFFALSE 51371
// exit ;
51369: GO 51460
// for i = 1 to mc_bases do
51371: LD_ADDR_VAR 0 2
51375: PUSH
51376: DOUBLE
51377: LD_INT 1
51379: DEC
51380: ST_TO_ADDR
51381: LD_EXP 44
51385: PUSH
51386: FOR_TO
51387: IFFALSE 51458
// begin if mc_attack [ i ] then
51389: LD_EXP 60
51393: PUSH
51394: LD_VAR 0 2
51398: ARRAY
51399: IFFALSE 51456
// begin tmp := mc_attack [ i ] [ 1 ] ;
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_EXP 60
51410: PUSH
51411: LD_VAR 0 2
51415: ARRAY
51416: PUSH
51417: LD_INT 1
51419: ARRAY
51420: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
51421: LD_ADDR_EXP 60
51425: PUSH
51426: LD_EXP 60
51430: PPUSH
51431: LD_VAR 0 2
51435: PPUSH
51436: EMPTY
51437: PPUSH
51438: CALL_OW 1
51442: ST_TO_ADDR
// Attack ( tmp ) ;
51443: LD_VAR 0 3
51447: PPUSH
51448: CALL 29029 0 1
// exit ;
51452: POP
51453: POP
51454: GO 51460
// end ; end ;
51456: GO 51386
51458: POP
51459: POP
// end ;
51460: LD_VAR 0 1
51464: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
51465: LD_INT 0
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
// if not mc_bases then
51474: LD_EXP 44
51478: NOT
51479: IFFALSE 51483
// exit ;
51481: GO 51778
// for i = 1 to mc_bases do
51483: LD_ADDR_VAR 0 2
51487: PUSH
51488: DOUBLE
51489: LD_INT 1
51491: DEC
51492: ST_TO_ADDR
51493: LD_EXP 44
51497: PUSH
51498: FOR_TO
51499: IFFALSE 51776
// begin mc_scan := Replace ( mc_scan , i , ScanBase ( mc_bases [ i ] ) ) ;
51501: LD_ADDR_EXP 63
51505: PUSH
51506: LD_EXP 63
51510: PPUSH
51511: LD_VAR 0 2
51515: PPUSH
51516: LD_EXP 44
51520: PUSH
51521: LD_VAR 0 2
51525: ARRAY
51526: PPUSH
51527: CALL 32659 0 1
51531: PPUSH
51532: CALL_OW 1
51536: ST_TO_ADDR
// if mc_scan [ i ] and mc_defender [ i ] then
51537: LD_EXP 63
51541: PUSH
51542: LD_VAR 0 2
51546: ARRAY
51547: PUSH
51548: LD_EXP 62
51552: PUSH
51553: LD_VAR 0 2
51557: ARRAY
51558: AND
51559: IFFALSE 51774
// begin class := AllowSpecClass ( mc_defender [ 1 ] ) ;
51561: LD_ADDR_VAR 0 7
51565: PUSH
51566: LD_EXP 62
51570: PUSH
51571: LD_INT 1
51573: ARRAY
51574: PPUSH
51575: CALL 32766 0 1
51579: ST_TO_ADDR
// if class then
51580: LD_VAR 0 7
51584: IFFALSE 51707
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_barracks ] ) ;
51586: LD_ADDR_VAR 0 4
51590: PUSH
51591: LD_EXP 44
51595: PUSH
51596: LD_VAR 0 2
51600: ARRAY
51601: PPUSH
51602: LD_INT 30
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PPUSH
51612: CALL_OW 72
51616: ST_TO_ADDR
// if tmp then
51617: LD_VAR 0 4
51621: IFFALSE 51707
// begin for j in tmp do
51623: LD_ADDR_VAR 0 3
51627: PUSH
51628: LD_VAR 0 4
51632: PUSH
51633: FOR_IN
51634: IFFALSE 51705
// begin t := UnitsInside ( j ) ;
51636: LD_ADDR_VAR 0 5
51640: PUSH
51641: LD_VAR 0 3
51645: PPUSH
51646: CALL_OW 313
51650: ST_TO_ADDR
// if not t then
51651: LD_VAR 0 5
51655: NOT
51656: IFFALSE 51660
// continue ;
51658: GO 51633
// for x in t do
51660: LD_ADDR_VAR 0 6
51664: PUSH
51665: LD_VAR 0 5
51669: PUSH
51670: FOR_IN
51671: IFFALSE 51701
// if not MineOfUnit ( x ) then
51673: LD_VAR 0 6
51677: PPUSH
51678: CALL_OW 459
51682: NOT
51683: IFFALSE 51699
// SetClass ( x , class ) ;
51685: LD_VAR 0 6
51689: PPUSH
51690: LD_VAR 0 7
51694: PPUSH
51695: CALL_OW 336
51699: GO 51670
51701: POP
51702: POP
// end ;
51703: GO 51633
51705: POP
51706: POP
// end ; end ; tmp := mc_defender [ i ] ;
51707: LD_ADDR_VAR 0 4
51711: PUSH
51712: LD_EXP 62
51716: PUSH
51717: LD_VAR 0 2
51721: ARRAY
51722: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51723: LD_ADDR_EXP 62
51727: PUSH
51728: LD_EXP 62
51732: PPUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: EMPTY
51739: PPUSH
51740: CALL_OW 1
51744: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
51745: LD_VAR 0 2
51749: PPUSH
51750: LD_VAR 0 4
51754: PPUSH
51755: LD_EXP 63
51759: PUSH
51760: LD_VAR 0 2
51764: ARRAY
51765: PPUSH
51766: CALL 32112 0 3
// exit ;
51770: POP
51771: POP
51772: GO 51778
// end ; end ;
51774: GO 51498
51776: POP
51777: POP
// end ;
51778: LD_VAR 0 1
51782: RET
// export function MC_Back ( base_unit_list , unit , class ) ; var i , j , tmp ; begin
51783: LD_INT 0
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
// if not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 ] or unit in mc_defender [ i ] then
51789: LD_VAR 0 1
51793: NOT
51794: PUSH
51795: LD_VAR 0 2
51799: NOT
51800: OR
51801: PUSH
51802: LD_VAR 0 3
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: LD_INT 5
51821: PUSH
51822: LD_INT 8
51824: PUSH
51825: LD_INT 9
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: IN
51837: NOT
51838: OR
51839: PUSH
51840: LD_VAR 0 2
51844: PUSH
51845: LD_EXP 62
51849: PUSH
51850: LD_VAR 0 5
51854: ARRAY
51855: IN
51856: OR
51857: IFFALSE 51861
// exit ;
51859: GO 52273
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
51861: LD_ADDR_VAR 0 1
51865: PUSH
51866: LD_VAR 0 1
51870: PPUSH
51871: LD_INT 21
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 24
51883: PUSH
51884: LD_INT 250
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PPUSH
51895: CALL_OW 72
51899: ST_TO_ADDR
// if class in [ 5 , 8 , 9 ] then
51900: LD_VAR 0 3
51904: PUSH
51905: LD_INT 5
51907: PUSH
51908: LD_INT 8
51910: PUSH
51911: LD_INT 9
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: LIST
51918: IN
51919: IFFALSE 51929
// class := 1 ;
51921: LD_ADDR_VAR 0 3
51925: PUSH
51926: LD_INT 1
51928: ST_TO_ADDR
// case class of 1 :
51929: LD_VAR 0 3
51933: PUSH
51934: LD_INT 1
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51942
51940: GO 51988
51942: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 :
51943: LD_ADDR_VAR 0 7
51947: PUSH
51948: LD_VAR 0 1
51952: PPUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 30
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 30
51968: PUSH
51969: LD_INT 5
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: PPUSH
51981: CALL_OW 72
51985: ST_TO_ADDR
51986: GO 52162
51988: LD_INT 2
51990: DOUBLE
51991: EQUAL
51992: IFTRUE 51996
51994: GO 52042
51996: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
51997: LD_ADDR_VAR 0 7
52001: PUSH
52002: LD_VAR 0 1
52006: PPUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 30
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 30
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: PPUSH
52035: CALL_OW 72
52039: ST_TO_ADDR
52040: GO 52162
52042: LD_INT 3
52044: DOUBLE
52045: EQUAL
52046: IFTRUE 52050
52048: GO 52096
52050: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
52051: LD_ADDR_VAR 0 7
52055: PUSH
52056: LD_VAR 0 1
52060: PPUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 30
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 30
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: LIST
52088: PPUSH
52089: CALL_OW 72
52093: ST_TO_ADDR
52094: GO 52162
52096: LD_INT 4
52098: DOUBLE
52099: EQUAL
52100: IFTRUE 52104
52102: GO 52161
52104: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; end ;
52105: LD_ADDR_VAR 0 7
52109: PUSH
52110: LD_VAR 0 1
52114: PPUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 30
52120: PUSH
52121: LD_INT 6
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 30
52130: PUSH
52131: LD_INT 7
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 30
52140: PUSH
52141: LD_INT 8
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: PPUSH
52154: CALL_OW 72
52158: ST_TO_ADDR
52159: GO 52162
52161: POP
// if not tmp then
52162: LD_VAR 0 7
52166: NOT
52167: IFFALSE 52171
// exit ;
52169: GO 52273
// for i in tmp do
52171: LD_ADDR_VAR 0 5
52175: PUSH
52176: LD_VAR 0 7
52180: PUSH
52181: FOR_IN
52182: IFFALSE 52251
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
52184: LD_VAR 0 5
52188: PPUSH
52189: CALL_OW 313
52193: PUSH
52194: LD_INT 6
52196: LESS
52197: PUSH
52198: LD_VAR 0 5
52202: PPUSH
52203: CALL_OW 266
52207: PUSH
52208: LD_INT 31
52210: PUSH
52211: LD_INT 32
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: IN
52218: NOT
52219: AND
52220: PUSH
52221: LD_VAR 0 5
52225: PPUSH
52226: CALL_OW 313
52230: PUSH
52231: LD_INT 0
52233: EQUAL
52234: OR
52235: IFFALSE 52249
// begin j := i ;
52237: LD_ADDR_VAR 0 6
52241: PUSH
52242: LD_VAR 0 5
52246: ST_TO_ADDR
// break ;
52247: GO 52251
// end ; end ;
52249: GO 52181
52251: POP
52252: POP
// if j then
52253: LD_VAR 0 6
52257: IFFALSE 52273
// ComEnterUnit ( unit , j ) ;
52259: LD_VAR 0 2
52263: PPUSH
52264: LD_VAR 0 6
52268: PPUSH
52269: CALL_OW 120
// end ;
52273: LD_VAR 0 4
52277: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
52278: LD_INT 0
52280: PPUSH
52281: PPUSH
52282: PPUSH
52283: PPUSH
// if not mc_bases then
52284: LD_EXP 44
52288: NOT
52289: IFFALSE 52293
// exit ;
52291: GO 52522
// for i = 1 to mc_bases do
52293: LD_ADDR_VAR 0 2
52297: PUSH
52298: DOUBLE
52299: LD_INT 1
52301: DEC
52302: ST_TO_ADDR
52303: LD_EXP 44
52307: PUSH
52308: FOR_TO
52309: IFFALSE 52520
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) ;
52311: LD_ADDR_VAR 0 4
52315: PUSH
52316: LD_EXP 44
52320: PUSH
52321: LD_VAR 0 2
52325: ARRAY
52326: PPUSH
52327: LD_INT 21
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PPUSH
52337: CALL_OW 72
52341: ST_TO_ADDR
// if not tmp then
52342: LD_VAR 0 4
52346: NOT
52347: IFFALSE 52353
// exit ;
52349: POP
52350: POP
52351: GO 52522
// for j in tmp do
52353: LD_ADDR_VAR 0 3
52357: PUSH
52358: LD_VAR 0 4
52362: PUSH
52363: FOR_IN
52364: IFFALSE 52516
// begin if GetClass ( j ) = 3 and mc_scan [ i ] then
52366: LD_VAR 0 3
52370: PPUSH
52371: CALL_OW 257
52375: PUSH
52376: LD_INT 3
52378: EQUAL
52379: PUSH
52380: LD_EXP 63
52384: PUSH
52385: LD_VAR 0 2
52389: ARRAY
52390: AND
52391: IFFALSE 52395
// continue ;
52393: GO 52363
// if not GetTag ( j ) and not HasTask ( j ) and not IsInUnit ( j ) and not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] and not j in mc_empty_turret_list [ i ] then
52395: LD_VAR 0 3
52399: PPUSH
52400: CALL_OW 110
52404: NOT
52405: PUSH
52406: LD_VAR 0 3
52410: PPUSH
52411: CALL_OW 314
52415: NOT
52416: AND
52417: PUSH
52418: LD_VAR 0 3
52422: PPUSH
52423: CALL_OW 310
52427: NOT
52428: AND
52429: PUSH
52430: LD_EXP 47
52434: PUSH
52435: LD_VAR 0 2
52439: ARRAY
52440: PUSH
52441: LD_INT 1
52443: ARRAY
52444: NOT
52445: AND
52446: PUSH
52447: LD_EXP 47
52451: PUSH
52452: LD_VAR 0 2
52456: ARRAY
52457: PUSH
52458: LD_INT 2
52460: ARRAY
52461: NOT
52462: AND
52463: PUSH
52464: LD_VAR 0 3
52468: PUSH
52469: LD_EXP 53
52473: PUSH
52474: LD_VAR 0 2
52478: ARRAY
52479: IN
52480: NOT
52481: AND
52482: IFFALSE 52514
// MC_Back ( mc_bases [ i ] , j , GetClass ( j ) ) ;
52484: LD_EXP 44
52488: PUSH
52489: LD_VAR 0 2
52493: ARRAY
52494: PPUSH
52495: LD_VAR 0 3
52499: PPUSH
52500: LD_VAR 0 3
52504: PPUSH
52505: CALL_OW 257
52509: PPUSH
52510: CALL 51783 0 3
// end ;
52514: GO 52363
52516: POP
52517: POP
// end ;
52518: GO 52308
52520: POP
52521: POP
// end ;
52522: LD_VAR 0 1
52526: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , c , tmp , list , x , j ; begin
52527: LD_INT 0
52529: PPUSH
52530: PPUSH
52531: PPUSH
52532: PPUSH
52533: PPUSH
52534: PPUSH
52535: PPUSH
// if not mc_bases [ base ] then
52536: LD_EXP 44
52540: PUSH
52541: LD_VAR 0 1
52545: ARRAY
52546: NOT
52547: IFFALSE 52551
// exit ;
52549: GO 52819
// tmp := [ ] ;
52551: LD_ADDR_VAR 0 7
52555: PUSH
52556: EMPTY
52557: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
52558: LD_ADDR_VAR 0 8
52562: PUSH
52563: LD_VAR 0 3
52567: PPUSH
52568: LD_INT 0
52570: PPUSH
52571: CALL_OW 517
52575: ST_TO_ADDR
// if not list then
52576: LD_VAR 0 8
52580: NOT
52581: IFFALSE 52585
// exit ;
52583: GO 52819
// for i = 1 to amount do
52585: LD_ADDR_VAR 0 5
52589: PUSH
52590: DOUBLE
52591: LD_INT 1
52593: DEC
52594: ST_TO_ADDR
52595: LD_VAR 0 2
52599: PUSH
52600: FOR_TO
52601: IFFALSE 52767
// begin c := rand ( 1 , list [ 1 ] - i ) ;
52603: LD_ADDR_VAR 0 6
52607: PUSH
52608: LD_INT 1
52610: PPUSH
52611: LD_VAR 0 8
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: PUSH
52620: LD_VAR 0 5
52624: MINUS
52625: PPUSH
52626: CALL_OW 12
52630: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ c ] , list [ 2 ] [ c ] ] ) ;
52631: LD_ADDR_VAR 0 7
52635: PUSH
52636: LD_VAR 0 7
52640: PPUSH
52641: LD_VAR 0 5
52645: PPUSH
52646: LD_VAR 0 8
52650: PUSH
52651: LD_INT 1
52653: ARRAY
52654: PUSH
52655: LD_VAR 0 6
52659: ARRAY
52660: PUSH
52661: LD_VAR 0 8
52665: PUSH
52666: LD_INT 2
52668: ARRAY
52669: PUSH
52670: LD_VAR 0 6
52674: ARRAY
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PPUSH
52680: CALL_OW 1
52684: ST_TO_ADDR
// for j = 1 to 2 do
52685: LD_ADDR_VAR 0 10
52689: PUSH
52690: DOUBLE
52691: LD_INT 1
52693: DEC
52694: ST_TO_ADDR
52695: LD_INT 2
52697: PUSH
52698: FOR_TO
52699: IFFALSE 52754
// begin x := Delete ( list [ j ] , c ) ;
52701: LD_ADDR_VAR 0 9
52705: PUSH
52706: LD_VAR 0 8
52710: PUSH
52711: LD_VAR 0 10
52715: ARRAY
52716: PPUSH
52717: LD_VAR 0 6
52721: PPUSH
52722: CALL_OW 3
52726: ST_TO_ADDR
// list := Replace ( list , j , x ) ;
52727: LD_ADDR_VAR 0 8
52731: PUSH
52732: LD_VAR 0 8
52736: PPUSH
52737: LD_VAR 0 10
52741: PPUSH
52742: LD_VAR 0 9
52746: PPUSH
52747: CALL_OW 1
52751: ST_TO_ADDR
// end ;
52752: GO 52698
52754: POP
52755: POP
// if not list then
52756: LD_VAR 0 8
52760: NOT
52761: IFFALSE 52765
// break ;
52763: GO 52767
// end ;
52765: GO 52600
52767: POP
52768: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
52769: LD_ADDR_EXP 54
52773: PUSH
52774: LD_EXP 54
52778: PPUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: LD_VAR 0 7
52788: PPUSH
52789: CALL_OW 1
52793: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
52794: LD_ADDR_EXP 56
52798: PUSH
52799: LD_EXP 56
52803: PPUSH
52804: LD_VAR 0 1
52808: PPUSH
52809: LD_VAR 0 3
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// end ;
52819: LD_VAR 0 4
52823: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
52824: LD_INT 0
52826: PPUSH
// if not mc_bases [ base ] then
52827: LD_EXP 44
52831: PUSH
52832: LD_VAR 0 1
52836: ARRAY
52837: NOT
52838: IFFALSE 52842
// exit ;
52840: GO 52867
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
52842: LD_ADDR_EXP 61
52846: PUSH
52847: LD_EXP 61
52851: PPUSH
52852: LD_VAR 0 1
52856: PPUSH
52857: LD_VAR 0 2
52861: PPUSH
52862: CALL_OW 1
52866: ST_TO_ADDR
// end ;
52867: LD_VAR 0 3
52871: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
52872: LD_INT 0
52874: PPUSH
// if not mc_bases [ base ] then
52875: LD_EXP 44
52879: PUSH
52880: LD_VAR 0 1
52884: ARRAY
52885: NOT
52886: IFFALSE 52890
// exit ;
52888: GO 52915
// mc_defender := Replace ( mc_defender , base , deflist ) ;
52890: LD_ADDR_EXP 62
52894: PUSH
52895: LD_EXP 62
52899: PPUSH
52900: LD_VAR 0 1
52904: PPUSH
52905: LD_VAR 0 2
52909: PPUSH
52910: CALL_OW 1
52914: ST_TO_ADDR
// end ;
52915: LD_VAR 0 3
52919: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
52920: LD_INT 0
52922: PPUSH
52923: PPUSH
52924: PPUSH
52925: PPUSH
// if not mc_bases [ base ] then
52926: LD_EXP 44
52930: PUSH
52931: LD_VAR 0 1
52935: ARRAY
52936: NOT
52937: IFFALSE 52941
// exit ;
52939: GO 53006
// mc_attack := Add ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
52941: LD_ADDR_EXP 60
52945: PUSH
52946: LD_EXP 60
52950: PPUSH
52951: LD_VAR 0 1
52955: PUSH
52956: LD_EXP 60
52960: PUSH
52961: LD_VAR 0 1
52965: ARRAY
52966: PUSH
52967: LD_INT 1
52969: PLUS
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PPUSH
52975: LD_VAR 0 1
52979: PUSH
52980: LD_VAR 0 2
52984: PUSH
52985: LD_VAR 0 3
52989: PUSH
52990: LD_VAR 0 4
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: PPUSH
53001: CALL 3211 0 3
53005: ST_TO_ADDR
// end ;
53006: LD_VAR 0 5
53010: RET
// export function MC_GetMinesField ( base ) ; begin
53011: LD_INT 0
53013: PPUSH
// result := mc_mines [ base ] ;
53014: LD_ADDR_VAR 0 2
53018: PUSH
53019: LD_EXP 54
53023: PUSH
53024: LD_VAR 0 1
53028: ARRAY
53029: ST_TO_ADDR
// end ;
53030: LD_VAR 0 2
53034: RET
// export function MC_GetProduceList ( base ) ; begin
53035: LD_INT 0
53037: PPUSH
// result := mc_produce [ base ] ;
53038: LD_ADDR_VAR 0 2
53042: PUSH
53043: LD_EXP 61
53047: PUSH
53048: LD_VAR 0 1
53052: ARRAY
53053: ST_TO_ADDR
// end ; end_of_file
53054: LD_VAR 0 2
53058: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
53059: LD_VAR 0 1
53063: PPUSH
53064: CALL_OW 255
53068: PUSH
53069: LD_INT 1
53071: EQUAL
53072: IFFALSE 53082
// artifact_get := true ;
53074: LD_ADDR_EXP 12
53078: PUSH
53079: LD_INT 1
53081: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
53082: LD_VAR 0 1
53086: PPUSH
53087: CALL_OW 255
53091: PUSH
53092: LD_INT 2
53094: EQUAL
53095: IFFALSE 53113
// begin artifact_get := false ;
53097: LD_ADDR_EXP 12
53101: PUSH
53102: LD_INT 0
53104: ST_TO_ADDR
// artifact_stolen := true ;
53105: LD_ADDR_EXP 11
53109: PUSH
53110: LD_INT 1
53112: ST_TO_ADDR
// end ; artifact_oncargo := true ;
53113: LD_ADDR_EXP 13
53117: PUSH
53118: LD_INT 1
53120: ST_TO_ADDR
// end ;
53121: PPOPN 2
53123: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
53124: LD_ADDR_EXP 13
53128: PUSH
53129: LD_INT 0
53131: ST_TO_ADDR
// end ;
53132: PPOPN 2
53134: END
// on UnitDestroyed ( un ) do var i , j , btype , pos , tmp ;
53135: LD_INT 0
53137: PPUSH
53138: PPUSH
53139: PPUSH
53140: PPUSH
53141: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
53142: LD_VAR 0 1
53146: PUSH
53147: LD_INT 22
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 21
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: LD_INT 25
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 25
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 25
53192: PUSH
53193: LD_INT 3
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 25
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 25
53212: PUSH
53213: LD_INT 5
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 25
53222: PUSH
53223: LD_INT 8
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: LIST
53243: PPUSH
53244: CALL_OW 69
53248: IN
53249: IFFALSE 53265
// loses_counter := loses_counter + 1 ;
53251: LD_ADDR_EXP 16
53255: PUSH
53256: LD_EXP 16
53260: PUSH
53261: LD_INT 1
53263: PLUS
53264: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_type , unit_building ] ) then
53265: LD_VAR 0 1
53269: PUSH
53270: LD_INT 21
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PPUSH
53280: CALL_OW 69
53284: IN
53285: IFFALSE 53801
// begin if not mc_bases then
53287: LD_EXP 44
53291: NOT
53292: IFFALSE 53296
// exit ;
53294: GO 53801
// pos := mc_build_list [ i ] + 1 ;
53296: LD_ADDR_VAR 0 5
53300: PUSH
53301: LD_EXP 49
53305: PUSH
53306: LD_VAR 0 2
53310: ARRAY
53311: PUSH
53312: LD_INT 1
53314: PLUS
53315: ST_TO_ADDR
// btype := GetBType ( un ) ;
53316: LD_ADDR_VAR 0 4
53320: PUSH
53321: LD_VAR 0 1
53325: PPUSH
53326: CALL_OW 266
53330: ST_TO_ADDR
// if btype = b_warehouse then
53331: LD_VAR 0 4
53335: PUSH
53336: LD_INT 1
53338: EQUAL
53339: IFFALSE 53357
// begin btype := b_depot ;
53341: LD_ADDR_VAR 0 4
53345: PUSH
53346: LD_INT 0
53348: ST_TO_ADDR
// pos := 1 ;
53349: LD_ADDR_VAR 0 5
53353: PUSH
53354: LD_INT 1
53356: ST_TO_ADDR
// end ; if btype = b_factory then
53357: LD_VAR 0 4
53361: PUSH
53362: LD_INT 3
53364: EQUAL
53365: IFFALSE 53383
// begin btype := b_workshop ;
53367: LD_ADDR_VAR 0 4
53371: PUSH
53372: LD_INT 2
53374: ST_TO_ADDR
// pos := 1 ;
53375: LD_ADDR_VAR 0 5
53379: PUSH
53380: LD_INT 1
53382: ST_TO_ADDR
// end ; if btype in [ b_lab_half , b_lab_full ] then
53383: LD_VAR 0 4
53387: PUSH
53388: LD_INT 7
53390: PUSH
53391: LD_INT 8
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: IN
53398: IFFALSE 53408
// btype := b_lab ;
53400: LD_ADDR_VAR 0 4
53404: PUSH
53405: LD_INT 6
53407: ST_TO_ADDR
// for i = 1 to mc_bases do
53408: LD_ADDR_VAR 0 2
53412: PUSH
53413: DOUBLE
53414: LD_INT 1
53416: DEC
53417: ST_TO_ADDR
53418: LD_EXP 44
53422: PUSH
53423: FOR_TO
53424: IFFALSE 53799
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] then
53426: LD_VAR 0 1
53430: PUSH
53431: LD_EXP 44
53435: PUSH
53436: LD_VAR 0 2
53440: ARRAY
53441: IN
53442: PUSH
53443: LD_VAR 0 1
53447: PUSH
53448: LD_EXP 51
53452: PUSH
53453: LD_VAR 0 2
53457: ARRAY
53458: IN
53459: OR
53460: IFFALSE 53797
// begin mc_build_list := Add ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
53462: LD_ADDR_EXP 49
53466: PUSH
53467: LD_EXP 49
53471: PPUSH
53472: LD_VAR 0 2
53476: PUSH
53477: LD_EXP 49
53481: PUSH
53482: LD_VAR 0 2
53486: ARRAY
53487: PUSH
53488: LD_INT 1
53490: PLUS
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PPUSH
53496: LD_VAR 0 4
53500: PUSH
53501: LD_VAR 0 1
53505: PPUSH
53506: CALL_OW 250
53510: PUSH
53511: LD_VAR 0 1
53515: PPUSH
53516: CALL_OW 251
53520: PUSH
53521: LD_VAR 0 1
53525: PPUSH
53526: CALL_OW 254
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: PPUSH
53537: CALL 3211 0 3
53541: ST_TO_ADDR
// if pos = 1 then
53542: LD_VAR 0 5
53546: PUSH
53547: LD_INT 1
53549: EQUAL
53550: IFFALSE 53665
// begin tmp := mc_build_list [ i ] ;
53552: LD_ADDR_VAR 0 6
53556: PUSH
53557: LD_EXP 49
53561: PUSH
53562: LD_VAR 0 2
53566: ARRAY
53567: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53568: LD_VAR 0 6
53572: PPUSH
53573: LD_INT 2
53575: PUSH
53576: LD_INT 30
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 30
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: PPUSH
53601: CALL_OW 72
53605: IFFALSE 53615
// pos := 2 ;
53607: LD_ADDR_VAR 0 5
53611: PUSH
53612: LD_INT 2
53614: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
53615: LD_ADDR_VAR 0 6
53619: PUSH
53620: LD_VAR 0 6
53624: PPUSH
53625: LD_VAR 0 5
53629: PPUSH
53630: LD_VAR 0 6
53634: PPUSH
53635: CALL 3102 0 3
53639: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
53640: LD_ADDR_EXP 49
53644: PUSH
53645: LD_EXP 49
53649: PPUSH
53650: LD_VAR 0 2
53654: PPUSH
53655: LD_VAR 0 6
53659: PPUSH
53660: CALL_OW 1
53664: ST_TO_ADDR
// end ; if un in mc_bases [ i ] then
53665: LD_VAR 0 1
53669: PUSH
53670: LD_EXP 44
53674: PUSH
53675: LD_VAR 0 2
53679: ARRAY
53680: IN
53681: IFFALSE 53730
// begin tmp := mc_bases [ i ] diff un ;
53683: LD_ADDR_VAR 0 6
53687: PUSH
53688: LD_EXP 44
53692: PUSH
53693: LD_VAR 0 2
53697: ARRAY
53698: PUSH
53699: LD_VAR 0 1
53703: DIFF
53704: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
53705: LD_ADDR_EXP 44
53709: PUSH
53710: LD_EXP 44
53714: PPUSH
53715: LD_VAR 0 2
53719: PPUSH
53720: LD_VAR 0 6
53724: PPUSH
53725: CALL_OW 1
53729: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
53730: LD_VAR 0 1
53734: PUSH
53735: LD_EXP 51
53739: PUSH
53740: LD_VAR 0 2
53744: ARRAY
53745: IN
53746: IFFALSE 53795
// begin tmp := mc_construct_list [ i ] diff un ;
53748: LD_ADDR_VAR 0 6
53752: PUSH
53753: LD_EXP 51
53757: PUSH
53758: LD_VAR 0 2
53762: ARRAY
53763: PUSH
53764: LD_VAR 0 1
53768: DIFF
53769: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
53770: LD_ADDR_EXP 51
53774: PUSH
53775: LD_EXP 51
53779: PPUSH
53780: LD_VAR 0 2
53784: PPUSH
53785: LD_VAR 0 6
53789: PPUSH
53790: CALL_OW 1
53794: ST_TO_ADDR
// end ; break ;
53795: GO 53799
// end ;
53797: GO 53423
53799: POP
53800: POP
// end ; end ;
53801: PPOPN 6
53803: END
// on BuildingStarted ( building , builder ) do var i , j , tmp , btype , x , y , d ;
53804: LD_INT 0
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
53810: PPUSH
53811: PPUSH
53812: PPUSH
// begin if not mc_bases then
53813: LD_EXP 44
53817: NOT
53818: IFFALSE 53822
// exit ;
53820: GO 54063
// btype := GetBType ( building ) ;
53822: LD_ADDR_VAR 0 6
53826: PUSH
53827: LD_VAR 0 1
53831: PPUSH
53832: CALL_OW 266
53836: ST_TO_ADDR
// x := GetX ( building ) ;
53837: LD_ADDR_VAR 0 7
53841: PUSH
53842: LD_VAR 0 1
53846: PPUSH
53847: CALL_OW 250
53851: ST_TO_ADDR
// y := GetY ( building ) ;
53852: LD_ADDR_VAR 0 8
53856: PUSH
53857: LD_VAR 0 1
53861: PPUSH
53862: CALL_OW 251
53866: ST_TO_ADDR
// d := GetDir ( building ) ;
53867: LD_ADDR_VAR 0 9
53871: PUSH
53872: LD_VAR 0 1
53876: PPUSH
53877: CALL_OW 254
53881: ST_TO_ADDR
// for i = 1 to mc_bases do
53882: LD_ADDR_VAR 0 3
53886: PUSH
53887: DOUBLE
53888: LD_INT 1
53890: DEC
53891: ST_TO_ADDR
53892: LD_EXP 44
53896: PUSH
53897: FOR_TO
53898: IFFALSE 54061
// begin if not mc_build_list [ i ] then
53900: LD_EXP 49
53904: PUSH
53905: LD_VAR 0 3
53909: ARRAY
53910: NOT
53911: IFFALSE 53915
// continue ;
53913: GO 53897
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
53915: LD_VAR 0 6
53919: PUSH
53920: LD_VAR 0 7
53924: PUSH
53925: LD_VAR 0 8
53929: PUSH
53930: LD_VAR 0 9
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: PPUSH
53941: LD_EXP 49
53945: PUSH
53946: LD_VAR 0 3
53950: ARRAY
53951: PUSH
53952: LD_INT 1
53954: ARRAY
53955: PPUSH
53956: CALL 8174 0 2
53960: IFFALSE 54059
// begin tmp := Delete ( mc_build_list [ i ] , 1 ) ;
53962: LD_ADDR_VAR 0 5
53966: PUSH
53967: LD_EXP 49
53971: PUSH
53972: LD_VAR 0 3
53976: ARRAY
53977: PPUSH
53978: LD_INT 1
53980: PPUSH
53981: CALL_OW 3
53985: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
53986: LD_ADDR_EXP 49
53990: PUSH
53991: LD_EXP 49
53995: PPUSH
53996: LD_VAR 0 3
54000: PPUSH
54001: LD_VAR 0 5
54005: PPUSH
54006: CALL_OW 1
54010: ST_TO_ADDR
// mc_construct_list := Add ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
54011: LD_ADDR_EXP 51
54015: PUSH
54016: LD_EXP 51
54020: PPUSH
54021: LD_VAR 0 3
54025: PUSH
54026: LD_EXP 51
54030: PUSH
54031: LD_VAR 0 3
54035: ARRAY
54036: PUSH
54037: LD_INT 1
54039: PLUS
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PPUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: CALL 3211 0 3
54054: ST_TO_ADDR
// exit ;
54055: POP
54056: POP
54057: GO 54063
// end ; end ;
54059: GO 53897
54061: POP
54062: POP
// end ;
54063: PPOPN 9
54065: END
// on BuildingComplete ( building ) do var i , j , tmp ;
54066: LD_INT 0
54068: PPUSH
54069: PPUSH
54070: PPUSH
// begin if not mc_bases then
54071: LD_EXP 44
54075: NOT
54076: IFFALSE 54080
// exit ;
54078: GO 54281
// for i = 1 to mc_bases do
54080: LD_ADDR_VAR 0 2
54084: PUSH
54085: DOUBLE
54086: LD_INT 1
54088: DEC
54089: ST_TO_ADDR
54090: LD_EXP 44
54094: PUSH
54095: FOR_TO
54096: IFFALSE 54279
// begin if building in mc_construct_list [ i ] then
54098: LD_VAR 0 1
54102: PUSH
54103: LD_EXP 51
54107: PUSH
54108: LD_VAR 0 2
54112: ARRAY
54113: IN
54114: IFFALSE 54277
// begin tmp := mc_construct_list [ i ] diff building ;
54116: LD_ADDR_VAR 0 4
54120: PUSH
54121: LD_EXP 51
54125: PUSH
54126: LD_VAR 0 2
54130: ARRAY
54131: PUSH
54132: LD_VAR 0 1
54136: DIFF
54137: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , tmp ) ;
54138: LD_ADDR_EXP 51
54142: PUSH
54143: LD_EXP 51
54147: PPUSH
54148: LD_VAR 0 2
54152: PPUSH
54153: LD_VAR 0 4
54157: PPUSH
54158: CALL_OW 1
54162: ST_TO_ADDR
// mc_bases := Add ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
54163: LD_ADDR_EXP 44
54167: PUSH
54168: LD_EXP 44
54172: PPUSH
54173: LD_VAR 0 2
54177: PUSH
54178: LD_EXP 44
54182: PUSH
54183: LD_VAR 0 2
54187: ARRAY
54188: PUSH
54189: LD_INT 1
54191: PLUS
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PPUSH
54197: LD_VAR 0 1
54201: PPUSH
54202: CALL 3211 0 3
54206: ST_TO_ADDR
// if GetBType ( building ) in [ b_bunker , b_turret ] then
54207: LD_VAR 0 1
54211: PPUSH
54212: CALL_OW 266
54216: PUSH
54217: LD_INT 32
54219: PUSH
54220: LD_INT 33
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: IN
54227: IFFALSE 54273
// mc_turret_list := Add ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
54229: LD_ADDR_EXP 52
54233: PUSH
54234: LD_EXP 52
54238: PPUSH
54239: LD_VAR 0 2
54243: PUSH
54244: LD_EXP 52
54248: PUSH
54249: LD_VAR 0 2
54253: ARRAY
54254: PUSH
54255: LD_INT 1
54257: PLUS
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PPUSH
54263: LD_VAR 0 1
54267: PPUSH
54268: CALL 3211 0 3
54272: ST_TO_ADDR
// exit ;
54273: POP
54274: POP
54275: GO 54281
// end ; end ;
54277: GO 54095
54279: POP
54280: POP
// end ;
54281: PPOPN 4
54283: END
// on CrateSpawn ( id , x , y , amount , mode ) do var i , depot ;
54284: LD_INT 0
54286: PPUSH
54287: PPUSH
// begin if not mc_bases then
54288: LD_EXP 44
54292: NOT
54293: IFFALSE 54297
// exit ;
54295: GO 54512
// repeat wait ( 0 0$1 ) ;
54297: LD_INT 35
54299: PPUSH
54300: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
54304: LD_VAR 0 2
54308: PPUSH
54309: LD_VAR 0 3
54313: PPUSH
54314: CALL_OW 284
54318: IFFALSE 54297
// if GetResourceTypeXY ( x , y ) = mat_artefact then
54320: LD_VAR 0 2
54324: PPUSH
54325: LD_VAR 0 3
54329: PPUSH
54330: CALL_OW 283
54334: PUSH
54335: LD_INT 4
54337: EQUAL
54338: IFFALSE 54342
// exit ;
54340: GO 54512
// for i = 1 to mc_bases do
54342: LD_ADDR_VAR 0 6
54346: PUSH
54347: DOUBLE
54348: LD_INT 1
54350: DEC
54351: ST_TO_ADDR
54352: LD_EXP 44
54356: PUSH
54357: FOR_TO
54358: IFFALSE 54510
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
54360: LD_ADDR_VAR 0 7
54364: PUSH
54365: LD_EXP 44
54369: PUSH
54370: LD_VAR 0 6
54374: ARRAY
54375: PPUSH
54376: LD_INT 2
54378: PUSH
54379: LD_INT 30
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 30
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: PPUSH
54404: CALL_OW 72
54408: ST_TO_ADDR
// if not depot then
54409: LD_VAR 0 7
54413: NOT
54414: IFFALSE 54418
// continue ;
54416: GO 54357
// if GetDistUnitXY ( depot [ 1 ] , x , y ) < 30 then
54418: LD_VAR 0 7
54422: PUSH
54423: LD_INT 1
54425: ARRAY
54426: PPUSH
54427: LD_VAR 0 2
54431: PPUSH
54432: LD_VAR 0 3
54436: PPUSH
54437: CALL_OW 297
54441: PUSH
54442: LD_INT 30
54444: LESS
54445: IFFALSE 54508
// begin mc_crates := Add ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
54447: LD_ADDR_EXP 57
54451: PUSH
54452: LD_EXP 57
54456: PPUSH
54457: LD_VAR 0 6
54461: PUSH
54462: LD_EXP 57
54466: PUSH
54467: LD_VAR 0 6
54471: ARRAY
54472: PUSH
54473: LD_INT 1
54475: PLUS
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PPUSH
54481: LD_VAR 0 4
54485: PUSH
54486: LD_VAR 0 2
54490: PUSH
54491: LD_VAR 0 3
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: LIST
54500: PPUSH
54501: CALL 3211 0 3
54505: ST_TO_ADDR
// break ;
54506: GO 54510
// end ; end ;
54508: GO 54357
54510: POP
54511: POP
// end ;
54512: PPOPN 7
54514: END
// on VehicleConstructed ( vehicle , factory ) do var i , tmp ;
54515: LD_INT 0
54517: PPUSH
54518: PPUSH
// begin if not mc_bases then
54519: LD_EXP 44
54523: NOT
54524: IFFALSE 54528
// exit ;
54526: GO 54616
// for i = 1 to mc_bases do
54528: LD_ADDR_VAR 0 3
54532: PUSH
54533: DOUBLE
54534: LD_INT 1
54536: DEC
54537: ST_TO_ADDR
54538: LD_EXP 44
54542: PUSH
54543: FOR_TO
54544: IFFALSE 54614
// begin if factory in mc_bases [ i ] then
54546: LD_VAR 0 2
54550: PUSH
54551: LD_EXP 44
54555: PUSH
54556: LD_VAR 0 3
54560: ARRAY
54561: IN
54562: IFFALSE 54612
// begin mc_vehicles := Add ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
54564: LD_ADDR_EXP 59
54568: PUSH
54569: LD_EXP 59
54573: PPUSH
54574: LD_VAR 0 3
54578: PUSH
54579: LD_EXP 59
54583: PUSH
54584: LD_VAR 0 3
54588: ARRAY
54589: PUSH
54590: LD_INT 1
54592: PLUS
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PPUSH
54598: LD_VAR 0 1
54602: PPUSH
54603: CALL 3211 0 3
54607: ST_TO_ADDR
// exit ;
54608: POP
54609: POP
54610: GO 54616
// end ; end ;
54612: GO 54543
54614: POP
54615: POP
// end ;
54616: PPOPN 4
54618: END
// on UnitKamikazed ( unit ) do begin if not kamikazed then
54619: LD_EXP 10
54623: NOT
54624: IFFALSE 54636
// kamikazed := unit ;
54626: LD_ADDR_EXP 10
54630: PUSH
54631: LD_VAR 0 1
54635: ST_TO_ADDR
// end ; end_of_file
54636: PPOPN 1
54638: END
// every 0 0$1 trigger game do
54639: LD_EXP 2
54643: IFFALSE 54673
54645: GO 54647
54647: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$40 ) ;
54648: LD_INT 7
54650: PUSH
54651: LD_INT 6
54653: PUSH
54654: LD_INT 4
54656: PUSH
54657: LD_INT 6
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: PPUSH
54666: LD_INT 1400
54668: PPUSH
54669: CALL 54674 0 2
54673: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
54674: LD_INT 0
54676: PPUSH
54677: PPUSH
54678: PPUSH
// if not areas then
54679: LD_VAR 0 1
54683: NOT
54684: IFFALSE 54688
// exit ;
54686: GO 54800
// repeat wait ( time ) ;
54688: LD_VAR 0 2
54692: PPUSH
54693: CALL_OW 67
// p := rand ( 1 , 90 ) ;
54697: LD_ADDR_VAR 0 5
54701: PUSH
54702: LD_INT 1
54704: PPUSH
54705: LD_INT 90
54707: PPUSH
54708: CALL_OW 12
54712: ST_TO_ADDR
// for i in areas do
54713: LD_ADDR_VAR 0 4
54717: PUSH
54718: LD_VAR 0 1
54722: PUSH
54723: FOR_IN
54724: IFFALSE 54777
// begin if Prob ( p ) then
54726: LD_VAR 0 5
54730: PPUSH
54731: CALL_OW 13
54735: IFFALSE 54775
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
54737: LD_INT 1
54739: PPUSH
54740: LD_INT 5
54742: PPUSH
54743: CALL_OW 12
54747: PPUSH
54748: LD_VAR 0 4
54752: PPUSH
54753: LD_INT 1
54755: PPUSH
54756: CALL_OW 55
// wait ( rand ( 0 0$13 , 0 0$17 ) ) ;
54760: LD_INT 455
54762: PPUSH
54763: LD_INT 595
54765: PPUSH
54766: CALL_OW 12
54770: PPUSH
54771: CALL_OW 67
// end ; end ;
54775: GO 54723
54777: POP
54778: POP
// time := time + 0 0$3 ;
54779: LD_ADDR_VAR 0 2
54783: PUSH
54784: LD_VAR 0 2
54788: PUSH
54789: LD_INT 105
54791: PLUS
54792: ST_TO_ADDR
// until not game ;
54793: LD_EXP 2
54797: NOT
54798: IFFALSE 54688
// end ;
54800: LD_VAR 0 3
54804: RET
